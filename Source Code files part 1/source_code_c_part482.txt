bHScrollbar->top =
        max(rcbBorderWidths.top, prcbHScrollbar->bottom - _sizeScrollbars.cy);
    prcbHScrollbar->left = rcbBorderWidths.left;
    prcbHScrollbar->right = _rcpContainer.Width() - rcbBorderWidths.right;

    if (_fHasVScrollbar)
    {
        if (!IsRTLScroller())
            prcbHScrollbar->right -= _sizeScrollbars.cx;
        else
            prcbHScrollbar->left += _sizeScrollbars.cx;

        // don't do a negative scroll
        if (prcbHScrollbar->right < prcbHScrollbar->left)
            prcbHScrollbar->right = prcbHScrollbar->left;
    }
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispScroller::SetVerticalScrollbarWidth
//
//  Synopsis:   Set the width of the vertical scroll bar, and whether it is
//              forced to display.
//
//  Arguments:  width       new width
//              fForce      TRUE to force scroll bar to be displayed
//
//  Notes:
//
//----------------------------------------------------------------------------

void
CDispScroller::SetVerticalScrollbarWidth(LONG width, BOOL fForce)
{
    Assert(width >= 0);

    if (width != _sizeScrollbars.cx || fForce != !!_fForceVScrollbar)
    {
        _sizeScrollbars.cx = width;
        _fForceVScrollbar = fForce;

        RequestRecalcSubtree();
    }
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispScroller::SetHorizontalScrollbarHeight
//
//  Synopsis:   Set the height of the horizontal scroll bar, and whether it is
//              forced to display.
//
//  Arguments:  height      new height
//              fForce      TRUE to force scroll bar to be displayed
//
//  Notes:
//
//----------------------------------------------------------------------------

void
CDispScroller::SetHorizontalScrollbarHeight(LONG height, BOOL fForce)
{
    Assert(height >= 0);

    if (height != _sizeScrollbars.cy || fForce != !!_fForceHScrollbar)
    {
        _sizeScrollbars.cy = height;
        _fForceHScrollbar = fForce;

        RequestRecalcSubtree();
    }
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispScroller::VerticalScrollbarIsActive
//
//  Synopsis:   Determine whether the vertical scroll bar is visible and
//              active (can scroll the content).
//
//  Arguments:  none
//
//  Returns:    TRUE if the vertical scroll bar is visible and active
//
//  Notes:
//
//----------------------------------------------------------------------------

BOOL
CDispScroller::VerticalScrollbarIsActive() const
{
    if (!_fHasVScrollbar)
        return FALSE;

    CRect rcbBorderWidths;
    GetBorderWidths(&rcbBorderWidths);
    
    return
        _rcpContainer.Height()
        - rcbBorderWidths.top - rcbBorderWidths.bottom
        - ((_fHasHScrollbar) ? _sizeScrollbars.cy : 0)
        < _sizesContent.cy;
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispScroller::HorizontalScrollbarIsActive
//
//  Synopsis:   Determine whether the horizontal scroll bar is visible and
//              active (can scroll the content).
//
//  Arguments:  none
//
//  Returns:    TRUE if the horizontal scroll bar is visible and active
//
//  Notes:
//
//----------------------------------------------------------------------------

BOOL
CDispScroller::HorizontalScrollbarIsActive() const
{
    if (!_fHasHScrollbar)
        return FALSE;

    CRect rcbBorderWidths;
    GetBorderWidths(&rcbBorderWidths);
    
    return
        _rcpContainer.Width()
        - rcbBorderWidths.left - rcbBorderWidths.right
        - ((_fHasVScrollbar) ? _sizeScrollbars.cx : 0)
        < _sizesContent.cx;
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispScroller::CalcScrollbars
//
//  Synopsis:   Determine scroll bar visibility and adjust scroll offsets.
//
//  Arguments:  none
//
//  Returns:    FALSE if the whole scroller must be invalidated due to
//              scroll offset change.
//
//  Notes:
//
//----------------------------------------------------------------------------

BOOL
CDispScroller::CalcScrollbars(
        LONG cxsScrollerWidthOld,   // need for RTL scroller
        LONG cxsContentWidthOld)    // need for RTL scroller
{
    // sometimes we're called before SetSize!
    if (_rcpContainer.IsEmpty())
    {
        _fHasVScrollbar = _fHasHScrollbar = FALSE;
        return TRUE;
    }

    BOOL fOldHasVScrollbar = !!_fHasVScrollbar;
    BOOL fOldHasHScrollbar = !!_fHasHScrollbar;
    BOOL fNewHasVScrollbar;

    CRect rcbBorderWidths;
    GetBorderWidths(&rcbBorderWidths);

    // calculate container size inside border
    CSize sizeInsideBorder(
        _rcpContainer.Width()
            - rcbBorderWidths.left - rcbBorderWidths.right,
        _rcpContainer.Height()
            - rcbBorderWidths.top - rcbBorderWidths.bottom);

    // determine whether vertical scroll bar is needed
    fNewHasVScrollbar =
        _sizeScrollbars.cx > 0 &&
        (_fForceVScrollbar || _sizesContent.cy > sizeInsideBorder.cy);

    if (    fNewHasVScrollbar != fOldHasVScrollbar
        &&  GetDispClient()->AllowVScrollbarChange(fNewHasVScrollbar)
       )
    {
        _fHasVScrollbar = fNewHasVScrollbar;
    }

    if (_fHasVScrollbar)
    {
        sizeInsideBorder.cx -= _sizeScrollbars.cx;

        // determine whether horizontal scroll bar is needed
        _fHasHScrollbar =
            _sizeScrollbars.cy > 0 &&
            (_fForceHScrollbar || _sizesContent.cx > sizeInsideBorder.cx);

        if (_fHasHScrollbar)
        {
            sizeInsideBorder.cy -= _sizeScrollbars.cy;
        }
    }

    else
    {
        // determine whether horizontal scroll bar is needed
        _fHasHScrollbar =
            _sizeScrollbars.cy > 0 &&
            (_fForceHScrollbar ||
             _sizesContent.cx > sizeInsideBorder.cx);

        if (_fHasHScrollbar)
        {
            sizeInsideBorder.cy -= _sizeScrollbars.cy;

            // but now vertical scroll bar might be needed
            _fHasVScrollbar =
                _sizeScrollbars.cx > 0 &&
                _sizesContent.cy > sizeInsideBorder.cy;

            if (_fHasVScrollbar)
            {
                sizeInsideBorder.cx -= _sizeScrollbars.cx;
            }
        }
    }

    // Fix scroll offsets: ensure that either all of the content fits, 
    // or all of the scroller is used (as opposed to being scrolled beyond content boundaries).
    BOOL fScrollOffsetChanged = FALSE;
    CSize contentBottomRight = _sizesContent + _sizeScrollOffset;
    
    // RTL scroller preserves offset from right
    if (_fRTLScroller)
    {
        // note that this needs to be done whether we have scrollbars or not (e.g. for overflow:hidden)
        long newOffset = min(0L, _xScrollOffsetRTL + sizeInsideBorder.cx - _sizesContent.cx);
        if (newOffset != _sizeScrollOffset.cx)
        {
            _sizeScrollOffset.cx = newOffset;
            fScrollOffsetChanged = TRUE;
        }
    }
    if (contentBottomRight.cx < sizeInsideBorder.cx)
    {
        long newOffset = min(0L, sizeInsideBorder.cx - _sizesContent.cx);
        if (newOffset != _sizeScrollOffset.cx)
        {
            _sizeScrollOffset.cx = newOffset;
            fScrollOffsetChanged = TRUE;
        }
    }
    if (contentBottomRight.cy < sizeInsideBorder.cy)
    {
        long newOffset = min(0L, sizeInsideBorder.cy - _sizesContent.cy);
        if (newOffset != _sizeScrollOffset.cy)
        {
            _sizeScrollOffset.cy = newOffset;
            fScrollOffsetChanged = TRUE;
        }
    }

    // Update RTL scroll offset from right
    if (_fRTLScroller)
    {
        _xScrollOffsetRTL = max(0L, _sizesContent.cx - sizeInsideBorder.cx + _sizeScrollOffset.cx);
    }

    // Scroll offsets should never be positive
    Assert(_sizeScrollOffset.cx <= 0);
    Assert(_sizeScrollOffset.cy <= 0);

    // TRICKY... invalidate scroll bars if they've come
    // or gone, but their coming and going also invalidates
    // the other scroll bar, because it has to adjust for
    // the presence or absence of the scroll bar filler
    if (!!_fHasVScrollbar != fOldHasVScrollbar)
    {
        _fInvalidVScrollbar = TRUE;
        if (_fHasHScrollbar || fOldHasHScrollbar)
            _fInvalidHScrollbar = TRUE;
    }
    if (!!_fHasHScrollbar != fOldHasHScrollbar)
    {
        _fInvalidHScrollbar = TRUE;
        if (_fHasVScrollbar || fOldHasVScrollbar)
            _fInvalidVScrollbar = TRUE;
    }

    return !fScrollOffsetChanged;
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispScroller::InvalidateScrollbars
//
//  Synopsis:   Invalidate the scroll bars according to their invalid flags.
//
//  Arguments:  none
//
//  Notes:
//
//----------------------------------------------------------------------------

void
CDispScroller::InvalidateScrollbars()
{
    CRect rcbBorderWidths;
    GetBorderWidths(&rcbBorderWidths);
    
    if (_fInvalidVScrollbar)
    {
        _fInvalidVScrollbar = FALSE;
            
        CRect rcbVScrollbar;
        if (_fHasHScrollbar)
        {
            // hack to force invalidation of scrollbar filler
            _fHasHScrollbar = FALSE;
            GetVScrollbarRect(&rcbVScrollbar, rcbBorderWidths);
            _fHasHScrollbar = TRUE;
        }
        else
        {
            GetVScrollbarRect(&rcbVScrollbar, rcbBorderWidths);
        }
        
        Invalidate(rcbVScrollbar, COORDSYS_BOX);
    }
    
    if (_fInvalidHScrollbar)
    {
        _fInvalidHScrollbar = FALSE;
        
        CRect rcbHScrollbar;
        GetHScrollbarRect(&rcbHScrollbar, rcbBorderWidths);
        Invalidate(rcbHScrollbar, COORDSYS_BOX);
    }
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispScroller::InvalidateEdges
//
//  Synopsis:   Invalidate edges of a node that is changing size.
//
//  Arguments:  sizebOld        old size
//              sizebNew        new size
//              rcbBorderWidths width of borders
//
//  Notes:
//
//----------------------------------------------------------------------------

void
CDispScroller::InvalidateEdges(
        const CSize& sizebOld,
        const CSize& sizebNew,
        const CRect& rcbBorderWidths)
{
    CRect rcbBorderWidthsPlusScrollbars(rcbBorderWidths);
    
    if (_fHasVScrollbar)
    {
        if (!_fRTLScroller)
            rcbBorderWidthsPlusScrollbars.right += _sizeScrollbars.cx;
        else
            rcbBorderWidthsPlusScrollbars.left += _sizeScrollbars.cx;
    }
    if (_fHasHScrollbar)
    {
        rcbBorderWidthsPlusScrollbars.bottom += _sizeScrollbars.cy;
    }

    super::InvalidateEdges(sizebOld, sizebNew, rcbBorderWidthsPlusScrollbars);
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispScroller::GetSizeInsideBorder
//              
//  Synopsis:   Get the size of the area within the border of this node
//              in content coordinates.
//              
//  Arguments:  psizes          returns size of node inside border
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

void
CDispScroller::GetSizeInsideBorder(CSize* psizes) const
{
    super::GetSizeInsideBorder(psizes);
    if (_fHasVScrollbar) psizes->cx -= _sizeScrollbars.cx;
    if (_fHasHScrollbar) psizes->cy -= _sizeScrollbars.cy;
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispScroller::PrivateScrollRectIntoView
//
//  Synopsis:   Scroll the given rect in the indicated coordinate system into
//              view, with various pinning (alignment) options.
//
//  Arguments:  prc             rect to scroll into view (clipped to content
//                              size on exit)
//              coordSystem     coordinate system for prc
//              spVert          scroll pin request, vertical axis
//              spHorz          scroll pin request, horizontal axis
//
//  Notes:
//
//----------------------------------------------------------------------------

void
CDispScroller::PrivateScrollRectIntoView(
        CRect* prc,
        COORDINATE_SYSTEM coordSystem,
        SCROLLPIN spVert,
        SCROLLPIN spHorz)
{
    Assert(coordSystem == COORDSYS_CONTENT ||
           coordSystem == COORDSYS_FLOWCONTENT);

    CSize sizeContent(_sizesContent);
    if (coordSystem == COORDSYS_FLOWCONTENT && HasInset())
    {
        sizeContent -= GetInset();
    }
    
    // restrict rect to size of contents
    CRect rccContent(sizeContent);
    if (HasContentOrigin())
    {
        rccContent.OffsetRect(-GetContentOrigin());
    }
    // can't use IntersectRect here - it sets empty result to (0,0,0,0), but
    // we need to preserve the edges even for empty rects.
    if (prc->left < rccContent.left)     prc->left = rccContent.left;
    if (prc->right > rccContent.right)   prc->right = rccContent.right;
    if (prc->top < rccContent.top)       prc->top = rccContent.top;
    if (prc->bottom > rccContent.bottom) prc->bottom = rccContent.bottom;

    CRect rcs;
    TransformRect(*prc, coordSystem, &rcs, COORDSYS_SCROLL);
    
    CSize sizesInsideBorder;
    GetSizeInsideBorder(&sizesInsideBorder);
    CRect rcsView(sizesInsideBorder);
    
    // calculate scroll offset required to bring rcs into view
    CSize scrollDelta;
    CSize sizeDiff;
    if (rcsView.CalcScrollDelta(rcs, &scrollDelta, spVert, spHorz) &&
        !scrollDelta.IsZero() &&
        ComputeScrollOffset(scrollDelta - _sizeScrollOffset,
                            sizesInsideBorder, &sizeDiff))
    {
        CDispRoot *pRoot = GetDispRoot();

        // before scrolling, we may need to invalidate window-top nodes that
        // extend outside my client area
        if (pRoot)
        {
            pRoot->InvalidateWindowTopForScroll(this);
        }
    
        _sizeScrollOffset += sizeDiff;

        TraceTag((tagDispScroll, "scroll into view %x by (%d,%d) to (%d,%d)", this,
                    sizeDiff.cy, sizeDiff.cx,
                    _sizeScrollOffset.cy, _sizeScrollOffset.cx));

        SetInvalidAndRecalcSubtree();
        
        // Update RTL scroll offset from right
        if (_fRTLScroller)
        {
            _xScrollOffsetRTL = _sizesContent.cx - sizesInsideBorder.cx + _sizeScrollOffset.cx;
        }
    
        GetDispClient()->NotifyScrollEvent(NULL, 0);

        // after scrolling, we may need to invalidate window-top nodes that
        // extend outside my client area
        if (pRoot)
        {
            pRoot->InvalidateWindowTopForScroll(this);
        }
    }
}



//+---------------------------------------------------------------------------
//
//  Member:     CDispScroller::SetSize
//
//  Synopsis:   Set size of this node.
//
//  Arguments:  sizep               new size in parent coords
//              fInvalidateAll      TRUE to entirely invalidate this node
//
//  Notes:      Adjusts horizontal scroll position for RTL scroller if needed
//
//----------------------------------------------------------------------------

void
CDispScroller::SetSize(
        const CSize& sizep,
        const CRect *prcpMapped,
        BOOL fInvalidateAll)
{
    // FUTURE RTL (donmarsh) -- we can do something more efficient for RTL nodes,
    // but since we're not sure what our final RTL strategy is right now, we
    // simply invalidate the entire bounds of an RTL node in order to make
    // sure the scrollbar is updated correctly
    // TODO RTL 112514: we now know what RTL strategy is, but we don't care enough to make RTL scrolling faster in IE5.5
    super::SetSize(sizep, prcpMapped, fInvalidateAll ||
                   (_fRTLScroller && (_fHasVScrollbar || _fHasHScrollbar)));

    // RTL nodes maintain content origin at constand distance from right edge
    if (_fRTLScroller && HasContentOrigin())
    {
        SetContentOrigin(GetContentOrigin(), GetContentOffsetRTL());
    }
    else
        AssertSz(!_fRTLScroller, "no content origin on RTL scroller?");
        
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispScroller:PreDraw
//
//  Synopsis:   Before drawing starts, PreDraw processes the redraw region,
//              subtracting areas that are blocked by opaque or buffered items.
//              PreDraw is finished when the redraw region becomes empty
//              (i.e., an opaque item completely obscures all content below it)
//
//  Arguments:  pContext    draw context
//
//  Returns:    TRUE if first opaque node to draw has been found
//
//  Notes:
//
//----------------------------------------------------------------------------

BOOL
CDispScroller::PreDraw(CDispDrawContext* pContext)
{
    // Interesting nodes are visible, in-view, opaque
    Assert(IsAllSet(s_preDrawSelector));
    Assert(pContext->IntersectsRedrawRegion(_rctBounds));
    Assert(!IsAnySet(s_flagsNotSetInDraw));

    // We do not delve inside a node whose content is drawn externally.
    // TODO (sambent) Someday, filters may help determine whether PreDraw
    // can safely look at its children and come up with the correct answers.
    if (IsDrawnExternally())
        return FALSE;
    
    if (HasUserTransform())
        return FALSE;
    
    // check for redraw region intersection with scroll bars
    if ((_fHasVScrollbar || _fHasHScrollbar) && IsVisible())
    {
        CSaveDispClipTransform saveTransform(pContext);
        if (!TransformedToBoxCoords(&pContext->GetClipTransform(), pContext->GetRedrawRegion()))
            return FALSE;
        
        CRect rcbBorderWidths;
        GetBorderWidths(&rcbBorderWidths);

        if (_fHasVScrollbar)
        {
            CRect rcbVScrollbar, rcgVScrollbar;
            GetVScrollbarRect(&rcbVScrollbar, rcbBorderWidths);
            pContext->GetClipTransform().Transform(rcbVScrollbar, &rcgVScrollbar);
            CRect rcBounds;
                pContext->GetRedrawRegion()->GetBounds(&rcBounds);
            if (rcgVScrollbar.Contains(rcBounds))
            {
                // add this node to the redraw region stack
                Verify(!pContext->PushRedrawRegion(rcgVScrollbar,this));
                return TRUE;
            }
        }
        if (_fHasHScrollbar)
        {
            CRect rcbHScrollbar, rcgHScrollbar;
            GetHScrollbarRect(&rcbHScrollbar, rcbBorderWidths);
            pContext->GetClipTransform().Transform(rcbHScrollbar, &rcgHScrollbar);
            CRect rcBounds;
                pContext->GetRedrawRegion()->GetBounds(&rcBounds);
            if (rcgHScrollbar.Contains(rcBounds))
            {
                // add this node to the redraw region stack
                Verify(!pContext->PushRedrawRegion(rcgHScrollbar,this));
                return TRUE;
            }
        }
    }
    
    // process border and children
    return super::PreDraw(pContext);
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispScroller::DrawBorder
//              
//  Synopsis:   Draw optional border for this node.
//              
//  Arguments:  pContext        draw context, in COORDSYS_BOX
//              rcbBorderWidths widths of borders
//              pDispClient     client for this node
//              dwFlags         scrollbar hints
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

void
CDispScroller::DrawBorder(
        CDispDrawContext* pContext,
        const CRect& rcbBorderWidths,
        CDispClient* pDispClient,
        DWORD dwFlags)
{
    Assert(pDispClient == GetDispClient());
    
    if (!IsVisible())
        return;
    
    CRect rcbVScrollbar(CRect::CRECT_EMPTY);
    CRect rcbHScrollbar(CRect::CRECT_EMPTY);
    
    // draw border unless we're simply updating the scrollbars in response
    // to scrolling
    if (dwFlags != DISPSCROLLBARHINT_NOBUTTONDRAW)
    {
        super::DrawBorder(pContext, rcbBorderWidths, pDispClient, dwFlags);
    }
    
    // draw vertical scroll bar
    if (_fHasVScrollbar)
    {
        // calculate intersection with redraw region
        GetVScrollbarRect(&rcbVScrollbar, rcbBorderWidths);
        CRect rcbRedraw(rcbVScrollbar);
        pContext->IntersectRedrawRegion(&rcbRedraw);
        if (!rcbRedraw.IsEmpty())
        {
            pDispClient->DrawClientScrollbar(
                1,
                &rcbVScrollbar,
                &rcbRedraw,
                _sizesContent.cy,        // content size
                rcbVScrollbar.Height(),  // container size
                -_sizeScrollOffset.cy,   // amount scrolled
                pContext->PrepareDispSurface(),
                this,
                pContext->GetClientData(),
                dwFlags);
        }
    }

    // draw horizontal scroll bar
    if (_fHasHScrollbar)
    {
        // calculate intersection with redraw region
        GetHScrollbarRect(&rcbHScrollbar, rcbBorderWidths);
        CRect rcbRedraw(rcbHScrollbar);
        pContext->IntersectRedrawRegion(&rcbRedraw);
        if (!rcbRedraw.IsEmpty())
        {
            long xScroll = -_sizeScrollOffset.cx;
            pDispClient->DrawClientScrollbar(
                0,
                &rcbHScrollbar,
                &rcbRedraw,
                _sizesContent.cx,        // content size
                rcbHScrollbar.Width(),   // container size
                xScroll,                 // amount scrolled
                pContext->PrepareDispSurface(),
                this,
                pContext->GetClientData(),
                dwFlags);
        }

        // draw scroll bar filler if necessary
        if (_fHasVScrollbar)
        {
            // calculate intersection with redraw region
            CRect rcbScrollbarFiller(
                rcbVScrollbar.left,
                rcbHScrollbar.top,
                rcbVScrollbar.right,
                rcbHScrollbar.bottom);
            rcbRedraw = rcbScrollbarFiller;
            pContext->IntersectRedrawRegion(&rcbRedraw);
            if (!rcbRedraw.IsEmpty())
            {
                pDispClient->DrawClientScrollbarFiller(
                    &rcbScrollbarFiller,
                    &rcbRedraw,
                    pContext->PrepareDispSurface(),
                    this,
                    pContext->GetClientData(),
                    dwFlags);
            }
        }
    }
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispScroller::HitTestScrollbars
//
//  Synopsis:   Determine whether any of my scrollbars
//              intersect the hit test point.
//
//  Arguments:  pContext        hit context (box coords)
//              fHitContent     TRUE to hit contents of this container,
//                              regardless of this container's bounds
//
//  Returns:    TRUE if my scrollbars intersect the hit test pt.
//
//  Notes:
//
//----------------------------------------------------------------------------

BOOL
CDispScroller::HitTestScrollbars(CDispHitContext* pContext, BOOL fHitContent)
{
    Assert(IsVisibleBranch());
    
    if (IsVisible() && (_fHasVScrollbar || _fHasHScrollbar))
    {
        // get border info
        CRect rcbBorderWidths;
        GetBorderWidths(&rcbBorderWidths);

        // translate hit point to local coordinates
        CPoint ptbHitTest;
        pContext->GetHitTestPoint(&ptbHitTest);

        CRect rcbVScrollbar(CRect::CRECT_EMPTY);
        CRect rcbHScrollbar(CRect::CRECT_EMPTY);

        // does point hit vertical scroll bar?
        if (_fHasVScrollbar)
        {
            GetVScrollbarRect(&rcbVScrollbar, rcbBorderWidths);
            if (pContext->RectIsHit(rcbVScrollbar) &&
                GetDispClient()->HitTestScrollbar(
                    1,
                    &ptbHitTest,
                    const_cast<CDispScroller*>(this),
                    pContext->_pClientData))
            {
                // NOTE: don't bother to restore context transform for speed
                return TRUE;
            }
        }

        // does point hit horizontal scroll bar?
        if (_fHasHScrollbar)
        {
            GetHScrollbarRect(&rcbHScrollbar, rcbBorderWidths);
            if (pContext->RectIsHit(rcbHScrollbar) &&
                GetDispClient()->HitTestScrollbar(
                    0,
                    &ptbHitTest,
                    const_cast<CDispScroller*>(this),
                    pContext->_pClientData))
            {
                // NOTE: don't bother to restore context transform for speed
                return TRUE;
            }

            // does point hit scroll bar filler?
            if (_fHasVScrollbar)
            {
                CRect rcbScrollbarFiller(
                    rcbVScrollbar.left,
                    rcbHScrollbar.top,
                    rcbVScrollbar.right,
                    rcbHScrollbar.bottom);
                if (pContext->RectIsHit(rcbScrollbarFiller) &&
                    GetDispClient()->HitTestScrollbarFiller(
                        &ptbHitTest,
                        const_cast<CDispScroller*>(this),
                        pContext->_pClientData))
                {
                    // NOTE: don't bother to restore context transform for speed
                    return TRUE;
                }
            }
        }
    }

    return FALSE;
}


CDispScroller *
CDispScroller::HitScrollInset(const CPoint& pttHit, DWORD *pdwScrollDir)
{
    // translate hit point to local coordinates
    CPoint ptbHit;
    TransformPoint(pttHit, COORDSYS_TRANSFORMED, &ptbHit, COORDSYS_BOX);
    
    *pdwScrollDir = 0;

    CSize sizesInsideBorder;
    GetSizeInsideBorder(&sizesInsideBorder);
    if (sizesInsideBorder.cx > 2 * g_sizeDragScrollInset.cx)
    {
        if (    (ptbHit.x <= g_sizeDragScrollInset.cx)
            &&  (ptbHit.x >= 0)
            &&  (_sizeScrollOffset.cx < 0))
        {
            *pdwScrollDir |= SCROLL_LEFT;
        }
        else if (   (ptbHit.x >= sizesInsideBorder.cx - g_sizeDragScrollInset.cx)
                 && (ptbHit.x <= sizesInsideBorder.cx)
                 && (_sizesContent.cx + _sizeScrollOffset.cx > sizesInsideBorder.cx))
        {
            *pdwScrollDir |= SCROLL_RIGHT;
        }
    }

    if (sizesInsideBorder.cy > 2 * g_sizeDragScrollInset.cy)
    {
        if (    (ptbHit.y <= g_sizeDragScrollInset.cy)
            &&  (ptbHit.y >= 0)
            &&  (_sizeScrollOffset.cy < 0))
        {
            *pdwScrollDir |= SCROLL_UP;
        }
        else if (   (ptbHit.y >= sizesInsideBorder.cy - g_sizeDragScrollInset.cy)
                 && (ptbHit.y <= sizesInsideBorder.cy)
                 && (_sizesContent.cy + _sizeScrollOffset.cy > sizesInsideBorder.cy))
        {
            *pdwScrollDir |= SCROLL_DOWN;
        }
    }

    if (*pdwScrollDir)
        return this;

    return super::HitScrollInset(pttHit, pdwScrollDir);
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispScroller::GetClientRect
//
//  Synopsis:   Return rectangles for various interesting parts of a display
//              node.
//
//  Arguments:  prc         rect which is returned
//              type        type of rect wanted
//
//  Notes:
//
//----------------------------------------------------------------------------

void
CDispScroller::GetClientRect(RECT* prc, CLIENTRECT type) const
{
    CRect rcbBorderWidths;
    GetBorderWidths(&rcbBorderWidths);
    
    switch (type)
    {
    case CLIENTRECT_BACKGROUND:
        {
            CSize sizesInsideBorder;
            GetSizeInsideBorder(&sizesInsideBorder);
            ((CRect*)prc)->SetRect(sizesInsideBorder);

            ((CRect*)prc)->OffsetRect(-_sizeScrollOffset);

            // RTL nodes may have non-zero content origin
            if (HasContentOrigin())
            {
                ((CRect*)prc)->OffsetRect(-GetContentOrigin());
            }
        }
        break;

    case CLIENTRECT_CONTENT:
        {
            CSize sizesInsideBorder;
            GetSizeInsideBorder(&sizesInsideBorder);
            ((CRect*)prc)->SetRect(sizesInsideBorder);

            if (_fForceVScrollbar && !_fHasVScrollbar)
            {
                sizesInsideBorder.cx -= _sizeScrollbars.cx;
            }

            ((CRect*)prc)->SetRect(
                -_sizeScrollOffset.AsPoint(),
                sizesInsideBorder);
                
            // RTL nodes may have non-zero content origin
            if (HasContentOrigin())
            {
                ((CRect*)prc)->OffsetRect(-GetContentOrigin());
            }
        }
        break;

    case CLIENTRECT_VSCROLLBAR:
        if (_fHasVScrollbar)
        {
            GetVScrollbarRect((CRect*)prc, rcbBorderWidths);
        }
        else
            *prc = g_Zero.rc;
        break;

    case CLIENTRECT_HSCROLLBAR:
        if (_fHasHScrollbar)
        {
            GetHScrollbarRect((CRect*)prc, rcbBorderWidths);
        }
        else
            *prc = g_Zero.rc;
        break;

    case CLIENTRECT_SCROLLBARFILLER:
        if (_fHasHScrollbar && _fHasVScrollbar)
        {
            prc->bottom = _rcpContainer.Height() - rcbBorderWidths.bottom;
            prc->top = max(rcbBorderWidths.top, prc->bottom - _sizeScrollbars.cy);
            if (!_fRTLScroller)
            {
                prc->right = _rcpContainer.Width() - rcbBorderWidths.right;
                prc->left = max(rcbBorderWidths.left, prc->right - _sizeScrollbars.cx);
            }
            else
            {
                prc->left = rcbBorderWidths.left;
                prc->right = min(_rcpContainer.Width() - rcbBorderWidths.right, prc->left + _sizeScrollbars.cx);
            }
        }
        else
            *prc = g_Zero.rc;
        break;
    }

    if (prc->left >= prc->right || prc->top >= prc->bottom)
        *prc = g_Zero.rc;
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispScroller::ComputeScrollOffset
//
//  Synopsis:   Compute a new scroll offset.  This helper routine handles the
//              logic of clamping the scroll offset to be non-positive, and
//              resetting the offset to 0 when the entire content fits on the
//              canvas (in each direction, separately).
//
//  Arguments:  offset              proposed scroll offset
//              sizesInsideBorder   the size of my scrolling canvas (not including scrollbars)
//              psizeDiff           [out] the change in scroll offset
//
//  Returns:    TRUE if the change is non-zero
//
//----------------------------------------------------------------------------

BOOL
CDispScroller::ComputeScrollOffset( const SIZE& offset,
                                    const CSize& sizesInsideBorder,
                                    CSize *psizeDiff)
{
    CSize peggedOffset(offset);

    if (peggedOffset.cx < 0)    // don't scroll into negative coords.
        peggedOffset.cx = 0;

    psizeDiff->cx =
        (sizesInsideBorder.cx >= _sizesContent.cx
            ? 0
            : max(-peggedOffset.cx, sizesInsideBorder.cx - _sizesContent.cx))
        - _sizeScrollOffset.cx;

    if (peggedOffset.cy < 0)
        peggedOffset.cy = 0;

    psizeDiff->cy =
        (sizesInsideBorder.cy >= _sizesContent.cy
            ? 0
            : max(-peggedOffset.cy, sizesInsideBorder.cy - _sizesContent.cy))
        - _sizeScrollOffset.cy;

    return !psizeDiff->IsZero();
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispScroller::SetScrollOffset
//
//  Synopsis:   Set new scroll offset.
//
//  Arguments:  offset          new scroll offset
//              fScrollBits     TRUE if we should try to scroll bits on screen
//
//  Returns:    TRUE if a scroll update occurred
//
//----------------------------------------------------------------------------

BOOL
CDispScroller::SetScrollOffset(
        const SIZE& offset,
        BOOL fScrollBits)
{

    CDispClient* pDispClient = GetDispClient();
    CSize sizesInsideBorder;
    GetSizeInsideBorder(&sizesInsideBorder);

    // calculate new scroll offset
    // scroll only if we need to
    CSize sizeDiff;
    if (!ComputeScrollOffset(offset, sizesInsideBorder, &sizeDiff))
        return FALSE;

    // very little work needed if this node isn't rooted under a CDispRoot node
    // Along the way we need to check for any replaced parents (this is why
    // we don't call GetRootNode).

    BOOL fReplaced = IsDrawnExternally();
    CDispNode* pRootCandidate = this;
    CDispRoot* pRoot = NULL;

    while (pRootCandidate->GetRawParentNode() != NULL)
    {
        pRootCandidate = pRootCandidate->GetRawParentNode();
        fReplaced |= pRootCandidate->IsDrawnExternally();
    }
    if (pRootCandidate->IsDispRoot())
        pRoot = DYNCAST(CDispRoot, pRootCandidate);

    // before scrolling, we may need to invalidate window-top nodes that
    // extend outside my client area
    if (pRoot)
    {
        pRoot->InvalidateWindowTopForScroll(this);
    }

    // update the scroll offset
    _sizeScrollOffset += sizeDiff;

    TraceTag((tagDispScroll, "scroll %x by (%d,%d) to (%d,%d)", this,
                sizeDiff.cy, sizeDiff.cx,
                _sizeScrollOffset.cy, _sizeScrollOffset.cx));

    // Update RTL scroll offset from right
    if (_fRTLScroller)
    {
        _xScrollOffsetRTL = _sizesContent.cx - sizesInsideBorder.cx + _sizeScrollOffset.cx;
    }

    if (!pRoot)
        return FALSE;

    CDispClipTransform transform;

    if (fReplaced)
    {
        GetNodeClipTransform(&transform, COORDSYS_TRANSFORMED, COORDSYS_GLOBAL);
        if (CalculateInView(transform, TRUE, TRUE, pRoot))
        {
            Invalidate();
        }

        goto Cleanup;
    }


    // check to make sure display tree is open
    // NOTE (donmarsh) -- normally we could assert this, but CView::SmoothScroll calls
    // SetScrollOffset multiple times, and the display tree will only be open for the first
    // call.  After we call CDispRoot::ScrollRect below, the tree may not be open anymore.
    //Assert(pRoot->DisplayTreeIsOpen());

    // no more work if this scroller isn't in view and visible
    if (!IsAllSet(s_inView | s_visibleBranch))
        goto Cleanup;

    // if the root is marked for recalc, just recalc this scroller.
    // if we aren't being asked to scroll bits, simply request recalc.
    // if we aren't clipped in both dimensions, request recalc.
    if (!fScrollBits || pRoot->MustRecalc() || !_fClipX || !_fClipY)
    {
        SetInvalid();
        RequestRecalcSubtree();
    }

    else
    {
        GetNodeClipTransform(&transform, COORDSYS_TRANSFORMED, COORDSYS_GLOBAL);

        // get rect area to scroll
        CRect rcsScroll(sizesInsideBorder);
        CRect rctScroll;
        
        CDispNode* pNode;

        // try to scroll bits only if it was requested, and
        // it's being scrolled less than the width of the container,
        // and nothing complicated is happening
        fScrollBits = FALSE;
        if ((abs(sizeDiff.cx) >= sizesInsideBorder.cx) ||   // must be smaller than rect
            (abs(sizeDiff.cy) >= sizesInsideBorder.cy) ||
            !IsOpaque()                                ||   // must be opaque
            HasFixedBackground()                       ||   // no fixed background
            IsDisableScrollBits()                      ||   // scroll bits is enabled
            HasUserTransform()                         ||   // no user transform
            !transform.IsOffsetOnly())                      // no arbitrary transforms
        {
            goto Invalidate;
        }

        TransformRect(rcsScroll, COORDSYS_SCROLL, &rctScroll, COORDSYS_TRANSFORMED);
        
        // Now determine if there are any items layered on top of this
        // scroll container.  We could do partial scroll bits in this
        // scenario, but for now we completely disqualify bit scrolling
        // if there is anything overlapping us.
        if (pRoot && pRoot->DoesWindowTopOverlap(this, rctScroll))
            goto Invalidate;

        pNode = this;
        for (;;)
        {
            for (CDispNode* pSibling = pNode->_pNext; pSibling; pSibling = pSibling->_pNext)
            {
                // does sibling intersect scroll area?
                if (pSibling->IsAllSet(s_inView | s_visibleBranch) &&
                    rctScroll.Intersects(pSibling->_rctBounds))
                {
                    goto Invalidate;
                }
            }

            // no intersections among this node's siblings, now check
            // our parent's siblings
            CDispNode* pParent = pNode->GetRawParentNode();
            if (pParent == NULL)
                break;

            pParent->TransformAndClipRect(
                rctScroll,  // in pNode's transformed coords.
                pNode->GetContentCoordinateSystem(),
                &rctScroll, // to pParent's transformed coords.
                COORDSYS_TRANSFORMED);
            Assert(!rctScroll.IsEmpty());
            pNode = pParent;
        }

        // we made it to the root
        Assert(pNode == pRoot);
        fScrollBits = TRUE;

Invalidate:
        // determine which children are in view, and do change notification
        Verify(CalculateInView(transform, TRUE, TRUE, pRoot));

        CRect rcgScroll;
        TransformAndClipRect(rcsScroll, COORDSYS_SCROLL, &rcgScroll, COORDSYS_GLOBAL);
        
        // do scroll bars need to be redrawn?
        Assert(!_fInvalidVScrollbar && !_fInvalidHScrollbar);
        _fInvalidVScrollbar = _fHasVScrollbar && sizeDiff.cy != 0;
        _fInvalidHScrollbar = _fHasHScrollbar && sizeDiff.cx != 0;
        if (_fInvalidVScrollbar || _fInvalidHScrollbar)
        {
            InvalidateScrollbars();
        }

        // scroll content
        pRoot->ScrollRect(
            rcgScroll,
            sizeDiff,
            this,
            fScrollBits);
        
        // CAUTION:  After we call ScrollRect, this node may have been destroyed!
        // We can no longer refer to any member data or call any methods on
        // this object!
    }

Cleanup:

    // after scrolling, we may need to invalidate window-top nodes that
    // extend outside my client area [caution: (this) should not be dereferenced]
    if (pRoot)
    {
        pRoot->InvalidateWindowTopForScroll(this);
    }

    pDispClient->NotifyScrollEvent(NULL, 0);

    return TRUE;
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispScroller::RecalcChildren
//
//  Synopsis:   Recalculate children.
//
//  Arguments:  pRecalcContext      recalc context, in COORDSYS_TRANSFORMED
//
//  Notes:
//
//----------------------------------------------------------------------------

void
CDispScroller::RecalcChildren(
        CRecalcContext* pRecalcContext)
{
    CDispRecalcContext* pContext = DispContext(pRecalcContext);
    
    // recalc children's in view flag with probable scroll bar existence
    if (_fForceVScrollbar)
    {
        _fHasVScrollbar = TRUE;
    }
    if (_fForceHScrollbar)
    {
        _fHasHScrollbar = TRUE;
    }

    BOOL fHadVScrollbar = !!_fHasVScrollbar;
    BOOL fHadHScrollbar = !!_fHasHScrollbar;

    // RecalcChildren may add elements to the root's obscurable list.  Since
    // we may call RecalcChildren several times (if ContentOrigin changes,
    // if ScrollOffset changes), we'll have to "un-add" the new elements 
    // before the second call - otherwise they'll appear to be lower in z-order
    // than all other children of this node.
    int cObscurableBegin = pContext->_pRootNode->GetObscurableCount();

    super::RecalcChildren(pRecalcContext);

    // compute the size of this container's content
    CSize sizeContentOld = _sizesContent;
    CRect rccScrollable;
    GetScrollableBounds(&rccScrollable, COORDSYS_CONTENT);

    // Content origin should be added to scrollable size
    CSize sizeOrigin(0,0);
    if (HasContentOrigin())
    {
        sizeOrigin = GetContentOrigin();
    }

    // top must be always positive (sizeOrigin.cy should be always zero)
    rccScrollable.top = -sizeOrigin.cy;

    // horizontal clipping of scrollable content depends on layout direction
    if (!IsRTLScroller())
    {
        // normal scroller doesn't scroll to negative coordinates
        rccScrollable.left = -sizeOrigin.cx;
    }
    else
    {
        // in RTL, horizontal scrolling is needed if there is something in negative X
        if (rccScrollable.left < 0)
            _fHasHScrollbar = TRUE;

        // need to know exact scroller size to set rccScrollable.right. See below.
    }
    
    // Calculate scrollbar rectangles
    CRect rcbBorderWidths;
    GetBorderWidths(&rcbBorderWidths);
    CRect rcbVSB(g_Zero.rc);
    CRect rcbHSB(g_Zero.rc);

    if (_fHasVScrollbar || _fInvalidVScrollbar)
    {
        GetVScrollbarRect(&rcbVSB, rcbBorderWidths);
    }

    if (_fHasHScrollbar || _fInvalidHScrollbar)
    {
        GetHScrollbarRect(&rcbHSB, rcbBorderWidths);
    }

    // container width adjusted to scrollbars.
    LONG cxsScrollerWidthOld = _fHasHScrollbar ? rcbHSB.Width() : sizeContentOld.cx;

/* (dmitryt) IE6 18787 the "+ _sizeScrollbars.cx" part of it is actually incorrect.
    it was checked in as part of ellipsis work after consultation with AlexMog who
    created this if() at the first place. Grzegorz and I thinked about it and didn't 
    find any reason to have it here. Removal of it fixes some other RTL bugs 
    (30574, 30634, 26261, 24522, 16855)
    
    // now we know the container width - restrict RTL content on the right
    if (IsRTLScroller())
    {
        rccScrollable.right = cxsScrollerWidthOld + _sizeScrollbars.cx;
    }
*/

    // save the content widht
    _sizesContent = rccScrollable.Size();


    // update content origin
    if (HasContentOrigin())
    {
        CSize sizeContentOrigin = GetContentOrigin();
        // update the scroller's content origin
        // note that it is important that we don't inval here - it is
        // not legal to do at the time this method is called
        SetContentOriginNoInval(sizeContentOrigin, GetContentOffsetRTL());

        // if origin has changed, 
        // recalc children again, because clipping rectangle changes 
        // with change of content origin, and visibility of children needs to be updated.
        // Yes, it is kind of inefficient, but the case (RTL with overflow)
        // is not critical enough to refactor RecalcChildren.
        // NOTE: see IE bug 102699 for a test case
        if (GetContentOrigin() != sizeContentOrigin)
        {
            pContext->_pRootNode->SetObscurableCount(cObscurableBegin);
            super::RecalcChildren(pRecalcContext);
        }
    }
    

    //
    // CALCULATE SCROLLBARS
    //
    BOOL fScrollOffsetChanged = !CalcScrollbars(cxsScrollerWidthOld, sizeContentOld.cx);
    
                                                
    if (!pContext->_fSuppressInval && IsVisible())
    {
        if (!fScrollOffsetChanged)
        {
            BOOL fInvalidateVScrollbar = _fInvalidVScrollbar || (_fHasVScrollbar && _sizesContent.cy != sizeContentOld.cy);
            if (fInvalidateVScrollbar)
            {
                Invalidate(rcbVSB, COORDSYS_BOX);           // old box

                GetVScrollbarRect(&rcbVSB, rcbBorderWidths);// new box
                Invalidate(rcbVSB, COORDSYS_BOX);
            }
            if (_fInvalidHScrollbar ||
                (_fHasHScrollbar && _sizesContent.cx != sizeContentOld.cx))
            {

                Invalidate(rcbHSB, COORDSYS_BOX);   //old box
                //(dmitryt) We have to re-take the box of horiz scroller because
                //it might have changed as a result of CalcScrollbars called earlier.
                //(for example, horiz scroller can appear now and thus have non-null size)
                GetHScrollbarRect(&rcbHSB, rcbBorderWidths);
                Invalidate(rcbHSB, COORDSYS_BOX);   //new box
                // invalidate scrollbar filler if we invalidated both
                // scroll bars. We don't need to inval old rect of this small guy.
                if (fInvalidateVScrollbar)
                {
                    CRect rcbFiller(rcbVSB.left, rcbHSB.top, rcbVSB.right, rcbHSB.bottom);
                    Invalidate(rcbFiller, COORDSYS_BOX);
                }
            }
        }
        else
        {
            pContext->AddToRedrawRegion(_rctBounds, !HasWindowTop());
        }
    }
    
    _fInvalidVScrollbar = _fInvalidHScrollbar = FALSE;

    // if the scroll bar status or scrolloffset changed, we need to correct the
    // in-view status of children
    if ((fScrollOffsetChanged ||
         !!_fHasVScrollbar != fHadVScrollbar ||
         !!_fHasHScrollbar != fHadHScrollbar) &&
        (IsInView() || pContext->IsInView(_rctBounds)))
    {
        //CalculateInView(pContext->GetClipTransform(), pContext->_fRecalcSubtree || fScrollOffsetChanged, FALSE);
        // We also need to correct children's bounds.
        // See bug 102979 (mikhaill) -- 02/11/00.
        pContext->_pRootNode->SetObscurableCount(cObscurableBegin);
        SetMustRecalcSubtree();
        super::RecalcChildren(pRecalcContext);
    }
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispScroller::CalcDispInfo
//
//  Synopsis:   Calculate clipping and positioning info for this node.
//
//  Arguments:  rcbClip         current clip rect
//              pdi             display info structure
//
//  Notes:
//
//----------------------------------------------------------------------------

void
CDispScroller::CalcDispInfo(
        const CRect& rcbClip,
        CDispInfo* pdi) const
{
    CDispInfo& di = *pdi;   // notational convenience
    
    // set scrolling offset
    di._sizesScroll = _sizeScrollOffset;

    // content size
    di._sizesContent = _sizesContent;

    // offset to box coordinates
    _rcpContainer.GetTopLeft(&(di._sizepBoxToParent.AsPoint()));

    // calc container clip in box coordinates
    di._rcbContainerClip = rcbClip;

    // calc rect inside border and scroll bars
    GetBorderWidthsAndInset(&di._prcbBorderWidths, &di._sizecInset, &di._rcTemp);
    di._sizebScrollToBox = di._prcbBorderWidths->TopLeft().AsSize();
    di._sizecBackground =
        _rcpContainer.Size()
        - di._prcbBorderWidths->TopLeft().AsSize()
        - di._prcbBorderWidths->BottomRight().AsSize();
    if (_fHasVScrollbar)
    {
        di._sizecBackground.cx -= _sizeScrollbars.cx;

        if (IsRTLScroller())
            di._sizebScrollToBox.cx += _sizeScrollbars.cx;
    }
    if (_fHasHScrollbar)
    {
        di._sizecBackground.cy -= _sizeScrollbars.cy;
    }
    
    // calc background clip (in box coordinates, so far)
    di._rccBackgroundClip.SetRect(
        di._sizebScrollToBox.AsPoint(),
        di._sizecBackground);
    di._rccBackgroundClip.IntersectRect(di._rcbContainerClip);
    di._rccBackgroundClip.OffsetRect(-di._sizebScrollToBox);    // to scroll coords

    // contents scroll
    di._rccBackgroundClip.OffsetRect(-_sizeScrollOffset);
    
    // clip positioned content
    if (_fClipX)
    {
        di._rccPositionedClip.left = di._rccBackgroundClip.left;
        di._rccPositionedClip.right = di._rccBackgroundClip.right;
    }
    else
    {
        di._rccPositionedClip.left = rcbClip.left - di._sizebScrollToBox.cx - _sizeScrollOffset.cx;
        di._rccPositionedClip.right = rcbClip.right - di._sizebScrollToBox.cx - _sizeScrollOffset.cx;
    }
    if (_fClipY)
    {
        di._rccPositionedClip.top = di._rccBackgroundClip.top;
        di._rccPositionedClip.bottom = di._rccBackgroundClip.bottom;
    }
    else
    {
        di._rccPositionedClip.top = rcbClip.top - di._sizebScrollToBox.cy - _sizeScrollOffset.cy;
        di._rccPositionedClip.bottom = rcbClip.bottom - di._sizebScrollToBox.cy - _sizeScrollOffset.cy;
    }

    di._rcfFlowClip.left = max(di._rccBackgroundClip.left, di._sizecInset.cx);
    di._rcfFlowClip.right = di._rccBackgroundClip.right;
    di._rcfFlowClip.top = max(di._rccBackgroundClip.top, di._sizecInset.cy);
    di._rcfFlowClip.bottom = di._rccBackgroundClip.bottom;
    di._rcfFlowClip.OffsetRect(-di._sizecInset);
    
    // size of background is big enough to fill background and content
    di._sizecBackground.Max(di._sizesContent);

    // optional offset from content origin
    if (HasContentOrigin())
    {
        const CSize& sizecOrigin = GetContentOrigin();
        di._sizesScroll += sizecOrigin;

        // adjust all content rects for content origin
        di._rccPositionedClip.OffsetRect(-sizecOrigin);
        di._rccBackgroundClip.OffsetRect(-sizecOrigin);
        di._rcfFlowClip.OffsetRect(-sizecOrigin);
    }
}


#if DBG==1
//+---------------------------------------------------------------------------
//
//  Member:     CDispScroller::DumpBounds
//
//  Synopsis:   Dump custom information for this node.
//
//  Arguments:  hFile       file handle to dump to
//              level       tree depth at this node
//              childNumber number of this child in parent list
//
//----------------------------------------------------------------------------

static void
DumpScrollbarInfo(int i, HANDLE hFile, const CSize& sizeScrollbars, BOOL fHasScrollbar, BOOL fForceScrollbar)
{
    WriteHelp(hFile, _T("<<scrollbar dir='<0s>' width='<1d>'<2s><3s>/>\r\n"),
        i ? _T("V") : _T("H"),
        sizeScrollbars[!i],
        fHasScrollbar ? _T(" visible='1'") : _T(""),
        fForceScrollbar ? _T(" force='1'") : _T(""));
}

void
CDispScroller::DumpBounds(HANDLE hFile, long level, long childNumber) const
{
    super::DumpBounds(hFile, level, childNumber);

    // print scroll offset
    WriteString(hFile, _T("<scroll>"));
    DumpSize(hFile, _sizeScrollOffset);
    WriteString(hFile, _T("</scroll>\r\n"));

    // dump scroll bar info
    DumpScrollbarInfo(1, hFile, _sizeScrollbars, _fHasVScrollbar, _fForceVScrollbar);
    DumpScrollbarInfo(0, hFile, _sizeScrollbars, _fHasHScrollbar, _fForceHScrollbar);
}
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\display\dispsizingnode.cxx ===
//+---------------------------------------------------------------------------
//
//  Microsoft Internet Explorer
//  Copyright (C) Microsoft Corporation, 1997-1998
//
//  File:       dispsizingnode.cxx
//
//  Contents:   Scroller node which resizes to contain its contents.
//
//  Classes:    CDispSizingNode
//
//----------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_DISPSIZINGNODE_HXX_
#define X_DISPSIZINGNODE_HXX_
#include "dispsizingnode.hxx"
#endif

MtDefine(CDispSizingNode, DisplayTree, "CDispSizingNode")


//+---------------------------------------------------------------------------
//
//  Member:     CDispSizingNode::RecalcChildren
//              
//  Synopsis:   Set the size of this node, if appropriate, after determining
//              the size of its contents.
//              
//  Arguments:  pContext        recalc context, in COORDSYS_TRANSFORMED
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

void
CDispSizingNode::RecalcChildren(CRecalcContext* pContext)
{
    CRect rcbBorderWidths;
    GetBorderWidths(&rcbBorderWidths);
    CSize sizeBorder =
        rcbBorderWidths.TopLeft().AsSize() + rcbBorderWidths.BottomRight().AsSize();
    
    // add scrollbar widths only if we're being forced to display scrollbars
    if (_fForceVScrollbar)
        sizeBorder.cx += _sizeScrollbars.cx;
    if (_fForceHScrollbar)
        sizeBorder.cy += _sizeScrollbars.cy;
    
    // resize to probable new size (if we're wrong, we must resize after
    // super::RecalcChildren and recompute in view status of this subtree)
    if (_fResizeX)
        _rcpContainer.right = _rcpContainer.left +
        max(_sizeMinimum.cx, _sizesContent.cx + sizeBorder.cx);
    if (_fResizeY)
        _rcpContainer.bottom = _rcpContainer.top +
        max(_sizeMinimum.cy, _sizesContent.cy + sizeBorder.cy);
    
    super::RecalcChildren(pContext);
    
    // now determine whether we need to resize to fit our contents
    BOOL fSizeChanged = FALSE;
    if (_fResizeX)
    {
        long newRight = _rcpContainer.left +
            max(_sizeMinimum.cx, _sizesContent.cx + sizeBorder.cx);
        if (newRight != _rcpContainer.right)
        {
            _rcpContainer.right = newRight;
            fSizeChanged = TRUE;
        }
    }
    if (_fResizeY)
    {
        long newBottom = _rcpContainer.top +
            max(_sizeMinimum.cy, _sizesContent.cy + sizeBorder.cy);
        if (newBottom != _rcpContainer.bottom)
        {
            _rcpContainer.bottom = newBottom;
            fSizeChanged = TRUE;
        }
    }
    
    // recalculate in view status of this subtree if necessary
    if (fSizeChanged)
    {
        CDispRecalcContext *pDispContext = DispContext(pContext);
        ComputeVisibleBounds();
        CalculateInView(pDispContext->GetClipTransform(), TRUE, FALSE,
                                                    pDispContext->_pRootNode);
    }
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispSizingNode::SetSize
//              
//  Synopsis:   Set the minimum size of this sizing node.
//              
//  Arguments:  sizep           node size in parent coordinates
//              fInvalidateAll  TRUE to entirely invalidate this node
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

void
CDispSizingNode::SetSize(const CSize& sizep, const CRect *prcpMapped, BOOL fInvalidateAll)
{
    _sizeMinimum = sizep;
    super::SetSize(_sizeMinimum, prcpMapped, fInvalidateAll);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\display\dispnode.cxx ===
//+---------------------------------------------------------------------------
//
//  Microsoft Internet Explorer
//  Copyright (C) Microsoft Corporation, 1997-1998
//
//  File:       dispnode.cxx
//
//  Contents:   Base class for nodes in the display tree.
//
//  Classes:    CDispNode
//
//----------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_DISPNODE_HXX_
#define X_DISPNODE_HXX_
#include "dispnode.hxx"
#endif

#ifndef X_DISPTRANSFORM_HXX_
#define X_DISPTRANSFORM_HXX_
#include "disptransform.hxx"
#endif

#ifndef X_DISPCONTEXT_HXX_
#define X_DISPCONTEXT_HXX_
#include "dispcontext.hxx"
#endif

#ifndef X_DISPINFO_HXX_
#define X_DISPINFO_HXX_
#include "dispinfo.hxx"
#endif

#ifndef X_DISPCLIENT_HXX_
#define X_DISPCLIENT_HXX_
#include "dispclient.hxx"
#endif

#ifndef X_DISPFILTER_HXX_
#define X_DISPFILTER_HXX_
#include "dispfilter.hxx"
#endif

#ifndef X_DISPROOT_HXX_
#define X_DISPROOT_HXX_
#include "disproot.hxx"
#endif

#ifndef X_DISPCONTAINER_HXX_
#define X_DISPCONTAINER_HXX_
#include "dispcontainer.hxx"
#endif

#ifndef X_DISPSCROLLER_HXX_
#define X_DISPSCROLLER_HXX_
#include "dispscroller.hxx"
#endif

#ifndef X_DISPSURFACE_HXX_
#define X_DISPSURFACE_HXX_
#include "dispsurface.hxx"
#endif

#ifndef X_DDRAW_H_
#define X_DDRAW_H_
#include "ddraw.h"
#endif

MtDefine(CAryDrawProgram, Mem, "CAryDrawProgram");
MtDefine(CAryDrawCookie, Mem, "CAryDrawCookie");
MtDefine(CDispNodeDrawProgram_pv, CAryDrawProgram, "CAryDrawProgram::_pv")
MtDefine(CDispNodeDrawCookie_pv, CAryDrawCookie, "CAryDrawCookie::_pv")
DeclareTag(tagDispNodeVisible, "Display", "disp node visibility");
ExternTag(tagHackGDICoords);


//========================================================================
// extras access

// The following set of macros (OFFSET_*) intended for generating CDispNode::_extraSizeTable.
// CDispNode::_sizeTable[n] should contain the sum of the lenght of all extras which flag values are presented in n.
// This table is somewhat similar to binary code.
// The meaning of binary value <A[n]A[n-1]...A[1]A[0]>, where A[i] = {0|1},
// is defined as sum((2^i) * A[i]);
// The table in question is composed by same manner, but instead of (2^i) the sizeof(extra number 'i') is used.

#define OFFSET_001(x) (x)/sizeof(DWORD_PTR),
#define OFFSET_002(x) OFFSET_001(x) OFFSET_001(x + sizeof(LONG_PTR                )) // simple border
#define OFFSET_004(x) OFFSET_002(x) OFFSET_002(x + sizeof(CRect                   )) // complex border
#define OFFSET_008(x) OFFSET_004(x) OFFSET_004(x + sizeof(CSize                   )) // inset
#define OFFSET_016(x) OFFSET_008(x) OFFSET_008(x + sizeof(CUserClipAndExpandedClip)) // user clip
#define OFFSET_032(x) OFFSET_016(x) OFFSET_016(x + sizeof(void*                   )) // extra cookie
#define OFFSET_064(x) OFFSET_032(x) OFFSET_032(x + sizeof(CExtraTransform         )) // display transform
#define OFFSET_128(x) OFFSET_064(x) OFFSET_064(x + sizeof(CExtraContentOrigin     )) // content origin (used for layout right-alignment in RTL nodes)
#define OFFSET_ALL OFFSET_128(0)

const BYTE CDispNode::_extraSizeTable[DISPEX_ALL+1] = { OFFSET_ALL };


//========================================================================
// new & delete operators; 

#if DBG == 1
void*
CDispNode::operator new(size_t cBytes, PERFMETERTAG mt)
{
    return MemAllocClear(mt, cBytes);
}
#endif

void*
CDispNode::operator new(size_t cBytes, PERFMETERTAG mt, DWORD extras)
{
    // compute size required by optional data
    int extraSize = GetExtraSize(extras);
    
    // allocate enough memory for object + optional data
    void* p = MemAllocClear(mt, cBytes + extraSize);
    if (p)
    {
        p = (char*)p + extraSize;
        ((CDispNode*)p)->_flags = extras;
        
        // Initialize Extras:
        if (extras & DISPEX_CONTENTORIGIN)
            ((CDispNode*)p)->SetContentOriginNoInval(CSize(0,0), -1);
    }
    return p;
}

void*
CDispNode::operator new(size_t cBytes, PERFMETERTAG mt, const CDispNode* pOrigin)
{
    Assert(pOrigin != NULL);
    DWORD extras = pOrigin->_flags & DISPEX_ALL;

    // compute size required by optional data
    int extraSize = GetExtraSize(extras);
    
    // allocate enough memory for object + optional data
    void* p = MemAllocClear(mt, cBytes + extraSize);
    if (p)
    {
        // copy extras
        memcpy(p, (char*)pOrigin - extraSize, extraSize);
    
        p = (char*)p + extraSize;
        ((CDispNode*)p)->_flags = extras;
    }
    return p;
}

#if DBG == 1
void
CDispNode::operator delete(void* pv)
{
    MemFree((char*)pv - GetExtraSize( ((CDispNode*)pv)->_flags & DISPEX_ALL));
}
#endif

//=============================================================================
// tree traversal

//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::GetParentNode
//              
//  Synopsis:   Walk up the current branch, skipping structured nodes, until
//              we find the non-structured node parent.
//              
//  Arguments:  none
//              
//  Returns:    pointer to true parent
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

CDispParentNode*
CDispNode::GetParentNode() const
{
    CDispParentNode* pParent = _pParent;
    while (pParent != NULL)
    {
        if (!pParent->IsStructureNode())
            break;
        pParent = pParent->_pParent;
        AssertSz(pParent != NULL, "No true parent found in GetParentNode()");
    }
    
    return pParent;
}

//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::GetRootNode
//              
//  Synopsis:   Return the root of the tree that contains this node, or this
//              node if it has no parent.
//              
//  Arguments:  none
//              
//  Returns:    pointer to root node of tree
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

CDispNode const*
CDispNode::GetRootNode() const
{
    for (CDispNode const* pNode = this; pNode->_pParent; pNode = pNode->_pParent) {}
    
    return pNode;
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::IsAncestorOf
//              
//  Synopsis:   Am I an ancestor of the given node?
//              
//  Arguments:  pNode       candidate descendant
//              
//  Returns:    TRUE        if I'm an ancestor
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

BOOL
CDispNode::IsAncestorOf(const CDispNode *pNode) const
{
    for ( ; pNode; pNode = pNode->_pParent)
    {
        if (pNode == this)
            return TRUE;
    }
    
    return FALSE;
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::GetFirstChildNode
//              
//  Synopsis:   Return this node's first child node, descending into structure nodes.
//              
//  Returns:    pointer to child, may be NULL
//              
//----------------------------------------------------------------------------

CDispNode*
CDispNode::GetFirstChildNode() const
{
    Assert(IsParentNode());

    CDispNode* pNode = AsParent()->_pFirstChild;
    if (pNode)
    {
        while (pNode->IsStructureNode())
        {
            pNode = pNode->AsParent()->_pFirstChild;
            Assert(pNode);
        }
    }
    return pNode;
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::GetLastChildNode
//              
//  Synopsis:   Return this node's last child node, descending into structure nodes.
//              
//  Returns:    pointer to child, may be NULL
//              
//----------------------------------------------------------------------------

CDispNode*
CDispNode::GetLastChildNode() const
{
    Assert(IsParentNode());

    CDispNode* pNode = AsParent()->_pLastChild;
    if (pNode)
    {
        while (pNode->IsStructureNode())
        {
            pNode = pNode->AsParent()->_pLastChild;
            Assert(pNode);
        }
    }
    return pNode;
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::GetNextSiblingNode
//              
//  Synopsis:   Find the right nearest node, descending as necessary
//              through structure nodes.
//              
//----------------------------------------------------------------------------
CDispNode*
CDispNode::GetNextSiblingNode() const
{
    if (_pNext) return _pNext;

    // ascending to next level of tree
    for (CDispNode* pNode = _pParent; ; pNode = pNode->_pParent)
    {
        if (!pNode->IsStructureNode()) return 0;
        if (pNode->_pNext) break;
    }
    
    pNode = pNode->_pNext;
    Assert(pNode->IsStructureNode());

    // descending into structure nodes
    do
    {
        pNode = pNode->AsParent()->_pFirstChild;
        Assert(pNode);
    }
    while (pNode->IsStructureNode());

    return pNode;
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::GetPreviousSiblingNode
//              
//  Synopsis:   Find the left nearest node, descending as necessary
//              through structure nodes.
//              
//----------------------------------------------------------------------------

CDispNode*
CDispNode::GetPreviousSiblingNode() const
{
    if (_pPrevious) return _pPrevious;

    // ascending to next level of tree
    for (CDispNode* pNode = _pParent; ; pNode = pNode->_pParent)
    {
        if (!pNode->IsStructureNode()) return 0;
        if (pNode->_pPrevious) break;
    }
    
    pNode = pNode->_pPrevious;
    Assert(pNode->IsStructureNode());

    // descending into structure nodes
    do
    {
        pNode = pNode->AsParent()->_pLastChild;
        Assert(pNode);
    }
    while (pNode->IsStructureNode());

    return pNode;
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::GetFirstFlowChildNode
//              
//  Synopsis:   Get the first child flow node
//              
//  Returns:    ptr to the first child flow node, or NULL if there
//              are no children in flow layer
//              
//----------------------------------------------------------------------------

CDispNode*
CDispNode::GetFirstFlowChildNode() const
{
    Assert(IsParentNode());
    // scan forwards through layers
    for (CDispNode* pChild = AsParent()->_pFirstChild; pChild; pChild = pChild->_pNext)
    {
        int childLayer = pChild->GetLayer();
        if (childLayer == s_layerFlow)
            return (pChild->IsStructureNode())
                ? pChild->GetFirstChildNode()
                : pChild;
        if (childLayer > s_layerFlow)
            return NULL;
    }
    
    return NULL;
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::GetLastFlowChildNode
//              
//  Synopsis:   Get the last child flow node
//              
//  Returns:    ptr to the last child flow node, or NULL if there
//              are no children in flow layer
//              
//----------------------------------------------------------------------------

CDispNode*
CDispNode::GetLastFlowChildNode() const
{
    Assert(IsParentNode());
    // scan forwards through layers
    for (CDispNode* pChild = AsParent()->_pLastChild; pChild; pChild = pChild->_pPrevious)
    {
        int childLayer = pChild->GetLayer();
        if (childLayer == s_layerFlow)
            return (pChild->IsStructureNode())
                ? pChild->GetLastChildNode()
                : pChild;
        if (childLayer < s_layerFlow)
            return NULL;
    }
    
    return NULL;
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::GetLastInSameLayer
//              
//  Synopsis:   Get the last sibling of same layer type as this node.
//              
//  Returns:    ptr to the last sibling of same layer type as this node. Never NULL.
//              
//----------------------------------------------------------------------------

CDispNode*
CDispNode::GetLastInSameLayer() const
{
    CDispParentNode const* pParent = GetParentNode();
    Assert(pParent);

    int thisLayer = GetLayer();

    // scan backwards through layers
    for (CDispNode* pChild = pParent->_pLastChild; ; pChild = pChild->_pPrevious)
    {
        Assert(pChild);
        int childLayer = pChild->GetLayer();
        if (childLayer == thisLayer)
            break;
        Assert(childLayer > thisLayer);
    }
        
    return (pChild->IsStructureNode())
        ? pChild->GetLastChildNode()
        : pChild;
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::TraverseInViewAware
//              
//  Synopsis:   Traverse the display tree from top to bottom, calling the
//              ProcessDisplayTreeTraversal on every in0view aware node
//
//  Arguments:  pClientData     client defined data
//              
//  Returns:    TRUE to continue traversal
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

BOOL
CDispNode::TraverseInViewAware(void* pClientData)
{
    // is this node interesting to us?
    if (!IsInViewAware())
        return TRUE;
    
    if (IsParentNode())
    {
        for (CDispNode* pChild = AsParent()->_pLastChild; pChild; pChild = pChild->_pPrevious)
        {
            if (!pChild->TraverseInViewAware(pClientData))
                return FALSE;
        }
    }

    return
        // TODO (donmarsh) -- this call seems to be about 13% slower
        // after the display tree split when loading select1600.htm.
        // I'm not sure why, but we have work to do here anyway to
        // decrease the frequency with which FixWindowZOrder is invoked.
        IsStructureNode() ||
        GetDispClient()->ProcessDisplayTreeTraversal(pClientData);
}


//=============================================================================


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::GetBounds
//
//  Synopsis:   Get the bounds of this node in the indicated coordinate system.
//
//  Arguments:  prcBounds           returns bounds rect
//              coordinateSystem    which coordinate system
//
//  Notes:
//
//----------------------------------------------------------------------------

void
CDispNode::GetBounds(
        RECT* prcBounds,
        COORDINATE_SYSTEM coordinateSystem) const
{
    CRect rcpBounds;
    GetBounds(&rcpBounds);
    if (HasAdvanced())
    {
        GetAdvanced()->MapBounds(&rcpBounds);
    }

    TransformRect(rcpBounds, COORDSYS_PARENT, (CRect*) prcBounds, coordinateSystem);
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::GetClippedBounds
//
//  Synopsis:   Get the clipped bounds of this node in the requested coordinate
//              system.
//
//  Arguments:  prcBounds           returns bounds rect
//              coordinateSystem    which coordinate system
//
//  Notes:
//
//----------------------------------------------------------------------------

void
CDispNode::GetClippedBounds(
        CRect* prc,
        COORDINATE_SYSTEM coordinateSystem) const
{
    GetBounds(prc);
    CDispRoot const* pRoot = GetDispRoot();

    // don't clip if we're currently drawing for a filter (bug 104811)
    if (!(pRoot && pRoot->IsDrawingUnfiltered(this)))
    {
        CDispClipTransform transform;
        GetNodeClipTransform(&transform, COORDSYS_PARENT, COORDSYS_GLOBAL);
        
        prc->IntersectRect(transform.GetClipRect());
    }

    if (prc->IsEmpty())
    {
        *prc = g_Zero.rc;
    }
    else if (coordinateSystem != COORDSYS_PARENT)
    {
        TransformRect(*prc, COORDSYS_PARENT, prc, coordinateSystem);
    }
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::GetExpandedBounds
//
//  Synopsis:   Get the expanded bounds of this node in the indicated coordinate system.
//
//  Arguments:  prcBounds           returns bounds rect
//              coordinateSystem    which coordinate system
//
//  Notes:
//
//----------------------------------------------------------------------------

void
CDispNode::GetExpandedBounds(
        CRect* prcBounds,
        COORDINATE_SYSTEM coordinateSystem) const
{
    CRect rcbBounds = GetExpandedBounds();
    TransformRect(rcbBounds, COORDSYS_BOX, prcBounds, coordinateSystem);
}







//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::GetScrollExtnet
//              
//  Synopsis:   Return the Scrolling bounds to outside callers.  This is currently
//              only used to size view Slaves that have no size of their own.
//
//  Notes   :   Use at you own peril.
//
//----------------------------------------------------------------------------

void
CDispNode::GetScrollExtent(CRect * prcsExtent, COORDINATE_SYSTEM coordSys) const
{
    Assert(!IsStructureNode() && " Structure nodes are supposed to be hidden to Layout!" );

    if (IsContainer())
    {
        AsParent()->GetScrollableBounds(prcsExtent, coordSys);
    }
    else 
    {
        GetBounds(prcsExtent, coordSys );
    }
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::GetClipRect
//              
//  Synopsis:   Return the global clip rect in parent coordinates for this node.
//
//  Arguments:  prcpClip    returns clipping rect in parent coordinates
//
//  Returns:    TRUE if prcpClip is not empty
//
//  Notes:
//
//----------------------------------------------------------------------------

BOOL
CDispNode::GetClipRect(RECT* prcpClip) const
{
    CDispClipTransform transform;
    GetNodeClipTransform(&transform, COORDSYS_PARENT, COORDSYS_GLOBAL);
    *prcpClip = transform.GetClipRect();
    return !transform.GetClipRect().IsEmpty();
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::GetClippedClientRect
//
//  Synopsis:   Get the clipped client rect of this node in the requested coordinate
//              system.
//
//  Arguments:  prc     returns bounds rect
//              type    which client rect
//
//  Notes:
//
//----------------------------------------------------------------------------

void
CDispNode::GetClippedClientRect(RECT* prc, CLIENTRECT type) const
{
    CDispClipTransform transform;

    GetClientRect(prc, type);
    GetNodeClipTransform(&transform, COORDSYS_FLOWCONTENT, COORDSYS_GLOBAL);
    ((CRect*)prc)->IntersectRect(transform.GetClipRect());

    if (((CRect*)prc)->IsEmpty())
    {
        *prc = g_Zero.rc;
    }
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::GetSizeInsideBorder
//              
//  Synopsis:   Get the size of the area within the border of this node
//              in content coordinates.
//              
//  Arguments:  psizes          returns size of node inside border
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

void
CDispNode::GetSizeInsideBorder(CSize* psizes) const
{
    *psizes = GetSize();
    
    if (HasBorder())
    {
        CRect rcbBorderWidths;
        GetBorderWidths(&rcbBorderWidths);
        *psizes -=
            rcbBorderWidths.TopLeft().AsSize() +
            rcbBorderWidths.BottomRight().AsSize();
    }
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::SetVisible
//              
//  Synopsis:   Set this node's visibility.
//
//  Arguments:  fVisible    TRUE if this node is visible
//              
//----------------------------------------------------------------------------

void
CDispNode::SetVisible(BOOL fVisible)
{
    if (fVisible != IsVisible())
    {
        TraceTag((tagDispNodeVisible, "%x -> %s", this, (fVisible? "visible" : "hidden")));

        //
        // Make sure we send the view change notification for this
        // visibility change.
        //
        
        if (IsLeafNode() && IsInViewAware())
        {
            // must be a leaf node
            SetPositionChanged();
        }

        // if going invisible, invalidate current bounds
        if (!fVisible)
        {
            if (!IsInvalid())
                PrivateInvalidate(_rctBounds, COORDSYS_TRANSFORMED);
            
            ClearFlag(s_visibleNode);
        }
        else
        {
            SetFlags(s_inval | s_visibleNode);
        }

        RequestRecalc();
    }
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::SetOpaque
//              
//  Synopsis:   Set the opacity of this node.  An opaque node must opaquely
//              draw every pixel within its bounds.
//
//  Arguments:  fOpaque         TRUE if this node is opaque
//              fIgnoreFilter   if TRUE, ignore filtering on this node
//
//  Notes:
//
//----------------------------------------------------------------------------

void
CDispNode::SetOpaque(BOOL fOpaque, BOOL fIgnoreFilter)
{
    if (!IsDrawnExternally() || fIgnoreFilter)
    {
        if (fOpaque != IsOpaque())
        {
            SetFlag(s_opaqueNode, fOpaque);
            // note: s_opaqueBranch will be set appropriately in Recalc
            RequestRecalc();
        }
    }
}




//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::PrivateInvalidate
//              
//  Synopsis:   Invalidate the given rectangle.
//
//  Arguments:  rcInvalid           invalid rect
//              coordinateSystem    which coordinate system the rect is in
//              fSynchronousRedraw  TRUE to force synchronous redraw
//              fIgnoreFilter       TRUE to ignore filtering on this node
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

void
CDispNode::PrivateInvalidate(
        const CRect& rcInvalid,
        COORDINATE_SYSTEM coordinateSystem,
        BOOL fSynchronousRedraw,
        BOOL fIgnoreFilter)
{
    HRESULT     hr = S_OK;

    if (HasWindowTop())
    {
        PrivateInvalidateAtWindowTop(rcInvalid, coordinateSystem, fSynchronousRedraw);
    }

    // conditions under which no invalidation is necessary:
    // 1. rcInvalid is empty
    // 2. this node is not visible or not in view
    // 3. a parent of this node has set flag to suppress invalidation
    // 4. this node isn't in a tree rooted in a CDispRoot node

    CRect rctInvalid;
    CDispNode* pChild;
    CDispNode* pParent;

    if (rcInvalid.IsEmpty() || !MustInvalidate())
        return;

    // don't clip if we're coming from a parent coordinate system.  This
    // is important to make sure that CDispNode::InvalidateEdges can
    // invalidate areas outside the current display node boundaries when
    // the display node is expanding.
    BOOL fClip = (coordinateSystem >= COORDSYS_BOX);
    
    // clip to userclip
    if (fClip)
    {
        if (HasUserClip())
        {
            CRect rcbInvalid;
            TransformAndClipRect(rcInvalid, coordinateSystem, &rcbInvalid, COORDSYS_BOX);
            rcbInvalid.IntersectRect(GetUserClip());
            TransformAndClipRect(rcbInvalid, COORDSYS_BOX, &rctInvalid, COORDSYS_TRANSFORMED);
            Assert(!HasExpandedClipRect());
        }
        else
        {
            TransformAndClipRect(rcInvalid, coordinateSystem, &rctInvalid, COORDSYS_TRANSFORMED);
        }
    }
    else
    {
        if (HasUserClip())
        {
            CRect rcbInvalid;
            TransformRect(rcInvalid, coordinateSystem, &rcbInvalid, COORDSYS_BOX);
            rcbInvalid.IntersectRect(GetUserClip());
            TransformRect(rcbInvalid, COORDSYS_BOX, &rctInvalid, COORDSYS_TRANSFORMED);
            Assert(!HasExpandedClipRect());
        }
        else
        {
            TransformRect(rcInvalid, coordinateSystem, &rctInvalid, COORDSYS_TRANSFORMED);
        }
    }

    if (HasExpandedClipRect())
    {
        const CRect& rcExpandedClip = GetExpandedClipRect();
        rctInvalid.Expand(rcExpandedClip);
        Assert(!HasUserClip());
    }
    
    if (rctInvalid.IsEmpty())
        return;

    pChild = this;

    // traverse tree to root, clipping rect as necessary
    for (pParent = GetRawParentNode();
         pParent != NULL;
         pChild = pParent, pParent = pParent->GetRawParentNode())
    {
        // hand off to filter
        if (!fIgnoreFilter)
        {
            if (pChild->IsDrawnExternally())
            {
                if (pChild->HasAdvanced())
                {
                    CRect rcbInvalid;
                    pChild->TransformRect(
                        rctInvalid,
                        COORDSYS_TRANSFORMED,
                        &rcbInvalid,
                        COORDSYS_BOX);
                    hr = THR_NOTRACE(pChild->GetDispClient()->InvalidateFilterPeer(&rcbInvalid,
                                                        NULL, fSynchronousRedraw));
                }
                // S_FALSE means the behavior could not be invalidated. This happens, for example when
                //  this is called when detaching the filter behavior for the page transiton. In that
                //  case we just invalidate the dispnode
                if(hr != S_FALSE)
                    return;
            }
        }
        else
        {
            // don't ignore filters of parent nodes further up this branch
            fIgnoreFilter = FALSE;
        }

        // transform to next parent's coordinate system
        pParent->TransformAndClipRect(
            rctInvalid,     // from child's transformed coords
            pChild->GetContentCoordinateSystem(),
            &rctInvalid,    // to parent's transformed coords
            COORDSYS_TRANSFORMED);
        
        // check for clipped rect
        if (rctInvalid.IsEmpty())
            return;
    }

    // we made it to the root with a non-empty rect
    if (pChild->IsDispRoot())
    {
        CDispRoot* pRoot = CDispRoot::Cast(pChild);
        pRoot->InvalidateRoot(rctInvalid, fSynchronousRedraw, FALSE);
    }
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::PrivateInvalidate
//              
//  Synopsis:   Invalidate the given region.
//
//  Arguments:  rgnInvalid          invalid region
//              coordinateSystem    which coordinate system the region is in
//              fSynchronousRedraw  TRUE to force synchronous redraw
//              fIgnoreFilter       TRUE to ignore filtering on this node
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

void
CDispNode::PrivateInvalidate(
        const CRegion& rgnInvalid,
        COORDINATE_SYSTEM coordinateSystem,
        BOOL fSynchronousRedraw,
        BOOL fIgnoreFilter)
{
    CRect rcBounds;
        rgnInvalid.GetBounds(&rcBounds);
    PrivateInvalidate(rcBounds, coordinateSystem, fSynchronousRedraw, fIgnoreFilter);
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::PrivateInvalidateAtWindowTop
//              
//  Synopsis:   Invalidate the given rectangle.
//
//  Arguments:  rcInvalid           invalid rect
//              coordinateSystem    which coordinate system the rect is in
//              fSynchronousRedraw  TRUE to force synchronous redraw
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

void
CDispNode::PrivateInvalidateAtWindowTop(
        const CRect& rcInvalid,
        COORDINATE_SYSTEM coordinateSystem,
        BOOL fSynchronousRedraw)
{
    // conditions under which no invalidation is necessary:
    // 1. rcInvalid is empty
    // 2. this node isn't in a tree rooted in a CDispRoot node

    CRect rcgInvalid;
    CDispRoot* pDispRoot = GetDispRoot();

    if (rcInvalid.IsEmpty() || !pDispRoot)
        return;

    TransformRect(rcInvalid, coordinateSystem, &rcgInvalid, COORDSYS_GLOBAL);

    pDispRoot->InvalidateRoot(rcgInvalid, fSynchronousRedraw, FALSE);
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::HitTest
//
//  Synopsis:   Determine whether and what the given point intersects.
//
//  Arguments:  pptHit              [in] the point to test
//                                  [out] if something was hit, the point is
//                                  returned in container coordinates for the
//                                  thing that was hit
//              coordinateSystem    [in out] the coordinate system for pptHit
//              pClientData         client data
//              fHitContent         if TRUE, hit test the content regardless
//                                  of whether it is clipped or not. If FALSE,
//                                  take current clipping into account,
//                                  and clip to the bounds of this container.
//              cFuzzyHitTest       Number of pixels to extend hit testing
//                                  rectangles in order to do "fuzzy" hit
//                                  testing
//
//  Returns:    TRUE if the point hit something.
//
//  Notes:
//
//----------------------------------------------------------------------------

BOOL
CDispNode::HitTest(
        CPoint* pptHit,
        COORDINATE_SYSTEM* pCoordinateSystem,
        void* pClientData,
        BOOL fHitContent,
        long cFuzzyHitTest)
{
    // must be a visible node somewhere
    if (!IsVisibleBranch())
        return FALSE;
    
    // create hit context
    CDispHitContext hitContext;
    hitContext._pClientData = pClientData;
    hitContext._cFuzzyHitTest = cFuzzyHitTest;

    CDispClipTransform transform;
    GetNodeClipTransform(&transform, COORDSYS_TRANSFORMED, COORDSYS_GLOBAL);
    hitContext.SetClipTransform(transform);
        
    // if we're hit-testing content, take away the clipping
    if (fHitContent)
    {
        hitContext.SetHugeClip();
    }
    
#if DBG==1
    hitContext.GetClipTransform().NoClip()._csDebug = COORDSYS_TRANSFORMED;
    hitContext.GetClipTransform().NoClip()._pNode = this;
#endif
    
    // hit point in global coordinates
    CPoint ptgHitTest;
    TransformPoint(
        *pptHit,
        *pCoordinateSystem,
        &ptgHitTest,
        COORDSYS_GLOBAL);
    hitContext.SetHitTestPoint(ptgHitTest);
        
    hitContext.SetHitTestCoordinateSystem(*pCoordinateSystem);
    
    //
    // FATHIT. Fix for Bug 65015 - enabling "Fat" hit testing on tables.
    // TODO - At some point the edit team may want to provide
    // a better UI-level way of selecting nested "thin" tables
    //
    //
    // TODO - when this is done revert sig. of FuzzyRectIsHit to not take the extra param
    //
    if ((fHitContent || hitContext.FuzzyRectIsHit(_rctBounds, IsFatHitTest())) &&
        HitTestPoint(&hitContext, FALSE, fHitContent))
    {
        // if we hit something, the transform should still be in local coordinates
        // of the hit node
        // 
        hitContext.GetHitTestPoint(pptHit);
        *pCoordinateSystem = hitContext.GetHitTestCoordinateSystem();
        return TRUE;
    }
    
    return FALSE;
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::TransformRect
//
//  Synopsis:   Transform a rect from the source coordinate system to the
//              destination coordinate system.
//
//  Arguments:  rcSource        rect in source coordinates
//              csSource        source coordinate system
//              prcDestination  returns rect in destination coordinates
//              csDestination   destination coordinate system
//
//----------------------------------------------------------------------------

void
CDispNode::TransformRect(const CRect& rcSource,
                         COORDINATE_SYSTEM csSource,
                         CRect* prcDestination,
                         COORDINATE_SYSTEM csDestination) const
{
    CDispTransform transform;
    GetNodeTransform(&transform, csSource, csDestination);
    transform.Transform(rcSource, prcDestination);
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::TransformAndClipRect
//
//  Synopsis:   Transform a rect from the source coordinate system to the
//              destination coordinate system with clipping.
//
//  Arguments:  rcSource        rect in source coordinates
//              csSource        source coordinate system
//              prcDestination  returns rect in destination coordinates
//              csDestination   destination coordinate system
//
//----------------------------------------------------------------------------

void
CDispNode::TransformAndClipRect(const CRect& rcSource,
                                COORDINATE_SYSTEM csSource,
                                CRect* prcDestination,
                                COORDINATE_SYSTEM csDestination) const
{
    CDispClipTransform transform;
    GetNodeClipTransform(&transform, csSource, csDestination);
    transform.Transform(rcSource, prcDestination);
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::GetBorderWidthsAndInset
//              
//  Synopsis:   Optimized routine to get border widths and inset in one call.
//              
//  Arguments:  pprcbBorderWidths       returns pointer to border widths
//                                      (never NULL)
//              psizebInset             returns inset
//              prcTemp                 temporary rect which must remain in
//                                      scope as long as border information is
//                                      accessed
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

void
CDispNode::GetBorderWidthsAndInset(
        CRect** pprcbBorderWidths,
        CSize* psizebInset,
        CRect* prcTemp) const
{
    if (HasExtra(DISPEX_SIMPLEBORDER))
    {
        long c = *((long*)
            GetExtra(DISPEX_SIMPLEBORDER));
        prcTemp->SetRect(c);
        *pprcbBorderWidths = prcTemp;
    }
    else if (HasExtra(DISPEX_COMPLEXBORDER))
        *pprcbBorderWidths = (CRect*)
        GetExtra(DISPEX_COMPLEXBORDER);
    else
        *pprcbBorderWidths = &((CRect&)g_Zero.rc);
    
    *psizebInset = HasExtra(DISPEX_INSET)
        ? *((CSize*) GetExtra(DISPEX_INSET))
        : g_Zero.size;
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::GetNodeTransform
//
//  Synopsis:   Return a non-clipping transform.
//
//  Arguments:  pTransform      returns transform
//              csSource        source coordinate system
//              csDestination   destination coordinate system
//
//  Notes:
//
//----------------------------------------------------------------------------

void
CDispNode::GetNodeTransform(
        CDispTransform* pTransform,
        COORDINATE_SYSTEM csSource,
        COORDINATE_SYSTEM csDestination) const
{
    pTransform->SetToIdentity();
    
#if DBG==1
    pTransform->_csDebug = csSource;
    pTransform->_pNode = this;
#endif
    
    if (csDestination == csSource)
        return;
    
    BOOL fReversed = FALSE;
    if (csDestination > csSource)
    {
        COORDINATE_SYSTEM csTemp = csSource;
        csSource = csDestination;
        csDestination = csTemp;
        fReversed = TRUE;
    }
    
    const CDispNode* pNode = this;
    while (pNode != NULL)
    {
        // no coordinate systems inside a structure node
        if (pNode->IsStructureNode())
        {
            if (csDestination != COORDSYS_GLOBAL)
                goto Done;
            csSource = COORDSYS_TRANSFORMED;
        }

        switch (csSource)
        {
        case COORDSYS_FLOWCONTENT:
            // COORDSYS_FLOWCONTENT --> COORDSYS_CONTENT
            if (pNode->HasInset())
                pTransform->AddPostOffset(pNode->GetInset());

            if (csDestination == COORDSYS_CONTENT)
                goto Done;
            
            // fall thru to continue transformation...

        case COORDSYS_CONTENT:
            // COORDSYS_CONTENT --> COORDSYS_SCROLL

            // Add content origin to right-align layouts in RTL nodes
            if (pNode->HasContentOrigin())
                pTransform->AddPostOffset(pNode->GetContentOrigin());

            // add scroll amount
            // TODO (donmarsh) - we may want to make this a flag instead of a
            // virtual call for perf
            if (pNode->IsScroller())
                pTransform->AddPostOffset(CDispScroller::Cast(pNode)->GetScrollOffsetInternal());
            
            if (csDestination == COORDSYS_SCROLL)
                goto Done;
            
            // fall thru to continue transformation...
            
        case COORDSYS_SCROLL:
            // COORDSYS_SCROLL --> COORDSYS_BOX
            
            // add offset for borders
            if (pNode->HasBorder())
            {
                // retrieve border widths
                CRect rcbBorderWidths;
                pNode->GetBorderWidths(&rcbBorderWidths);
                pTransform->AddPostOffset(rcbBorderWidths.TopLeft().AsSize());
            }
            
            // RTL: vertical scrollbar is on the left
            if (pNode->IsScroller() && CDispScroller::Cast(pNode)->IsRTLScroller())
                pTransform->AddPostOffset(
                    CSize(CDispScroller::Cast(pNode)->GetActualVerticalScrollbarWidth(), 0));
            
            if (csDestination == COORDSYS_BOX)
                goto Done;
            
            // fall thru to continue transformation...
            
        case COORDSYS_BOX:
            // COORDSYS_BOX --> COORDSYS_PARENT
            pTransform->AddPostOffset(pNode->GetPosition().AsSize());
            
            if (csDestination == COORDSYS_PARENT)
                goto Done;
            
            // fall thru to continue transformation...
            
        case COORDSYS_PARENT:
            // COORDSYS_PARENT --> COORDSYS_TRANSFORMED
            
            // apply optional user transform
            if (pNode->HasUserTransform())
            {
                CSize sizepToParent(pNode->GetPosition().AsSize());
                pTransform->AddPostOffset(-sizepToParent);
                pTransform->AddPostTransform(pNode->GetUserTransform());
                pTransform->AddPostOffset(sizepToParent);
            }
            
            if (csDestination == COORDSYS_TRANSFORMED)
                goto Done;
            
            // fall thru to continue transformation...
            
        case COORDSYS_TRANSFORMED:
            // COORDSYS_TRANSFORMED --> COORDSYS_GLOBAL
            csSource = pNode->GetContentCoordinateSystem();
            pNode = pNode->GetRawParentNode();
            
            // continue loop until we reach the root
            break;
        }
    }
    
Done:
    if (fReversed)
        pTransform->ReverseTransform();
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::GetNodeClipTransform
//
//  Synopsis:   Return a transform that can be used to transform values from
//              the source coordinate system to the destination coordinate
//              system.
//
//  Arguments:  pTransform      returns transform
//              csSource        source coordinate system
//              csDestination   destination coordinate system
//
//  Notes:      
//
//----------------------------------------------------------------------------

void
CDispNode::GetNodeClipTransform(
        CDispClipTransform* pTransform,
        COORDINATE_SYSTEM csSource,
        COORDINATE_SYSTEM csDestination) const
{
    pTransform->SetToIdentity();

#if DBG==1
    pTransform->NoClip()._csDebug = csSource;
    pTransform->NoClip()._pNode = this;
#endif
    
    if (csDestination == csSource)
        return;
    
    if (csDestination > csSource)
    {
        GetReversedNodeClipTransform(pTransform, csSource, csDestination);
        return;
    }
    
    CRect rcClip;
    CRect rcSourceClip;
    
    const CDispNode* pNode = this;
    while (pNode != NULL)
    {
        // no coordinate systems inside a structure node
        if (pNode->IsStructureNode())
        {
            if (csDestination != COORDSYS_GLOBAL)
                return;
            csSource = COORDSYS_TRANSFORMED;
        }
        
        switch (csSource)
        {
        case COORDSYS_FLOWCONTENT:
            // COORDSYS_FLOWCONTENT --> COORDSYS_CONTENT
            if (pNode->HasInset())
                pTransform->AddPostOffset(pNode->GetInset());
        
            if (csDestination == COORDSYS_CONTENT)
                return;
        
            // fall thru to continue transformation...
            
        case COORDSYS_CONTENT:
            // COORDSYS_CONTENT --> COORDSYS_SCROLL
            
            // Add user content origin to right-align layouts in RTL nodes
            if (pNode->HasContentOrigin())
                pTransform->AddPostOffset(pNode->GetContentOrigin());

            // add scroll amount
            // TODO (donmarsh) - we may want to make this a flag instead of a
            // virtual call for perf
            if (pNode->IsScroller())
                pTransform->AddPostOffset(CDispScroller::Cast(pNode)->GetScrollOffsetInternal());

            // do we need to clip content?
            if ((csSource == COORDSYS_FLOWCONTENT && pNode->GetFlowClipInScrollCoords(&rcClip)) ||
                (csSource == COORDSYS_CONTENT && pNode->IsClipNode()
                                && CDispClipNode::Cast(pNode)->GetContentClipInScrollCoords(&rcClip)))
            {
                pTransform->Untransform(rcClip, &rcSourceClip); // to source coords.
                pTransform->SetClipRect(rcSourceClip);
            }
            
            if (csDestination == COORDSYS_SCROLL)
                return;
            
            // fall thru to continue transformation...
            
        case COORDSYS_SCROLL:
            // COORDSYS_SCROLL --> COORDSYS_BOX

            // add offset for borders
            if (pNode->HasBorder())
            {
                CRect rcbBorderWidths;
                pNode->GetBorderWidths(&rcbBorderWidths);
                pTransform->AddPostOffset(rcbBorderWidths.TopLeft().AsSize());
            }
            
            // RTL: vertical scrollbar is on the left
            if (pNode->IsScroller() && CDispScroller::Cast(pNode)->IsRTLScroller())
                pTransform->AddPostOffset(
                    CSize(CDispScroller::Cast(pNode)->GetActualVerticalScrollbarWidth(), 0));
            
            if (csDestination == COORDSYS_BOX)
                return;
            
            // fall thru to continue transformation...
            
        case COORDSYS_BOX:
            // COORDSYS_BOX --> COORDSYS_PARENT
            if (pNode->HasUserClip())
            {
                pTransform->Untransform(pNode->GetUserClip(), &rcSourceClip); // to source coords.
                pTransform->SetClipRect(rcSourceClip);
            }
            pTransform->AddPostOffset(pNode->GetPosition().AsSize());
            
            if (csDestination == COORDSYS_PARENT)
                return;
            
            // fall thru to continue transformation...
            
        case COORDSYS_PARENT:
            // COORDSYS_PARENT --> COORDSYS_TRANSFORMED
            
            // apply optional user transform
            if (pNode->HasUserTransform())
            {
                CSize sizepToParent(pNode->GetPosition().AsSize());
                pTransform->AddPostOffset(-sizepToParent);
                pTransform->AddPostTransform(pNode->GetUserTransform());
                pTransform->AddPostOffset(sizepToParent);
            }
            
            if (csDestination == COORDSYS_TRANSFORMED)
                return;
            
            // fall thru to continue transformation...
            
        case COORDSYS_TRANSFORMED:
            // COORDSYS_TRANSFORMED --> COORDSYS_GLOBAL
            csSource = pNode->GetContentCoordinateSystem();
            pNode = pNode->GetRawParentNode();
            
            // continue loop until we reach the root
            break;
        }
    }
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::GetReversedNodeClipTransform
//
//  Synopsis:   Return a transform that can be used to transform values from
//              the source coordinate system to the destination coordinate
//              system.
//
//  Arguments:  pTransform      returns transform
//              csSource        source coordinate system
//              csDestination   destination coordinate system
//
//  Notes:      
//
//----------------------------------------------------------------------------

void
CDispNode::GetReversedNodeClipTransform(
        CDispClipTransform* pTransform,
        COORDINATE_SYSTEM csSource,
        COORDINATE_SYSTEM csDestination) const
{
    Assert(csDestination > csSource);
    
    if (csSource == COORDSYS_GLOBAL)
    {
        GetGlobalNodeClipTransform(pTransform, csDestination);
        return;
    }
    
    CRect rcClip;
    CRect rcSourceClip;
    
    // no coordinate systems inside a structure node
    if (IsStructureNode())
        return;
    
    switch (csSource)
    {
    case COORDSYS_TRANSFORMED:
        // COORDSYS_TRANSFORMED --> COORDSYS_PARENT
        
        // apply optional user transform
        if (HasUserTransform())
        {
            CSize sizepToParent(GetPosition().AsSize());
            pTransform->AddPreOffset(-sizepToParent);
            CDispTransform userTransform(GetUserTransform());
            userTransform.ReverseTransform();
            pTransform->AddPreTransform(userTransform);
            pTransform->AddPreOffset(sizepToParent);
        }
        
        if (csDestination == COORDSYS_PARENT)
            break;
        
        // fall thru to continue transformation...
        
    case COORDSYS_PARENT:
        // COORDSYS_PARENT --> COORDSYS_BOX
        pTransform->AddPreOffset(-GetPosition().AsSize());
        if (HasUserClip())
        {
            pTransform->SetClipRect(GetUserClip());
        }
        
        if (csDestination == COORDSYS_BOX)
            break;
        
        // fall thru to continue transformation...
        
    case COORDSYS_BOX:
        // COORDSYS_BOX --> COORDSYS_SCROLL

        // RTL scroller has vertical scrollbar on the left
        if (IsScroller() && CDispScroller::Cast(this)->IsRTLScroller())
            pTransform->AddPreOffset(
                CSize(-CDispScroller::Cast(this)->GetActualVerticalScrollbarWidth(), 0));
        
        // add offset for borders
        if (HasBorder())
        {
            CRect rcbBorderWidths;
            GetBorderWidths(&rcbBorderWidths);
            pTransform->AddPreOffset(-rcbBorderWidths.TopLeft().AsSize());
        }
        
        if (csDestination == COORDSYS_SCROLL)
            break;
        
        // fall thru to continue transformation...
        
    case COORDSYS_SCROLL:
        // COORDSYS_SCROLL --> COORDSYS_CONTENT
        
        // do we need to clip content?
        if ((csSource == COORDSYS_FLOWCONTENT && GetFlowClipInScrollCoords(&rcClip)) ||
            (csSource == COORDSYS_CONTENT && IsClipNode()
                        && CDispClipNode::Cast(this)->GetContentClipInScrollCoords(&rcClip)))
        {
            pTransform->SetClipRect(rcClip);
        }
        
        // add scroll amount
        // TODO (donmarsh) - we may want to make this a flag instead of a
        // virtual call for perf
        if (IsScroller())
            pTransform->AddPreOffset(-CDispScroller::Cast(this)->GetScrollOffsetInternal());

        // Add user content origin to right-align layouts in RTL nodes
        if (HasContentOrigin())
            pTransform->AddPreOffset(-GetContentOrigin());

        if (csDestination == COORDSYS_CONTENT)
            break;
        
        // fall thru to continue transformation...
        
    case COORDSYS_CONTENT:
        // COORDSYS_CONTENT --> COORDSYS_FLOWCONTENT
        if (HasInset())
            pTransform->AddPreOffset(-GetInset());
    
        Assert(csDestination == COORDSYS_FLOWCONTENT);
        
        break;
    }
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::GetGlobalNodeClipTransform
//
//  Synopsis:   Return a transform that can be used to transform values from
//              COORDSYS_GLOBAL to the destination coordinate system.
//
//  Arguments:  pTransform      returns transform
//              csDestination   destination coordinate system
//
//  Notes:      
//
//----------------------------------------------------------------------------

void
CDispNode::GetGlobalNodeClipTransform(
        CDispClipTransform* pTransform,
        COORDINATE_SYSTEM csDestination) const
{
    CDispNode* pParent = GetRawParentNode();
    if (pParent != NULL)
    {
        pParent->GetGlobalNodeClipTransform(pTransform, GetContentCoordinateSystem());
    }
    
    GetReversedNodeClipTransform(pTransform, COORDSYS_TRANSFORMED, csDestination);
}

    
//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::GetGlobalClientAndClipRects, helper
//
//  Synopsis:   Compute the client and clip rects (in global coordinates)
//
//  Notes:
//
//----------------------------------------------------------------------------

void
CDispNode::GetGlobalClientAndClipRects(
        const CDispClipTransform& transform,
        CRect *prcgClient,
        CRect *prcgClip) const
{
    // calculate clip and position info
    CDispInfo di;
    CalcDispInfo(transform.GetClipRect(), &di);

    // calculate client rect in global coordinates
    CRect rcbClient(
        di._sizebScrollToBox.AsPoint(),
        di._sizesContent - di._sizecInset);
    transform.NoClip().Transform(rcbClient, prcgClient);

    // calculate clip rect in global coordinates
    CRect rcbClip(di._rcfFlowClip); // in flow coordinates
    // to box coords
    rcbClip.OffsetRect(di._sizecInset + di._sizesScroll + di._sizebScrollToBox);
    transform.Transform(rcbClip, prcgClip);
    prcgClip->IntersectRect(*prcgClient);
    if (prcgClip->IsEmpty())   // normalize empty rect for ignorant clients
        prcgClip->SetRectEmpty();

    // fixing bug 106399 (mikhaill) - on zooming transform
    // obtained prcgClip can be inexact because of rounding,
    // so we need the following additional intersection
    prcgClip->IntersectRect(transform.GetClipRectGlobal());
}

    
//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::ScrollRectIntoView
//
//  Synopsis:   Scroll the given rect in CONTENT coordinates into
//              view, with various pinning (alignment) options.
//
//  Arguments:  rc              rect to scroll into view
//              coordSystem     coordinate system for rc (COORDSYS_CONTENT
//                              or COORDSYS_FLOWCONTENT only)
//              spVert          scroll pin request, vertical axis
//              spHorz          scroll pin request, horizontal axis
//
//  Returns:    TRUE if any scrolling was necessary.
//
//  Notes:
//
//----------------------------------------------------------------------------

void
CDispNode::ScrollRectIntoView(
        const CRect& rc,
        COORDINATE_SYSTEM coordSystem,
        SCROLLPIN spVert,
        SCROLLPIN spHorz)
{
    CRect rcScroll(rc);
    CDispNode* pNode = NULL;
    CDispNode* pParent = this; 
    
    // adjust scroll offsets for every node on this branch which is a scroller
    while (pParent != NULL && !rcScroll.IsEmpty())
    {
        Assert(coordSystem == COORDSYS_CONTENT || coordSystem == COORDSYS_FLOWCONTENT);
        pNode = pParent;
        pParent = pNode->GetRawParentNode();
        pNode->PrivateScrollRectIntoView(&rcScroll, coordSystem, spVert, spHorz);
        pNode->TransformAndClipRect(rcScroll, coordSystem, &rcScroll, COORDSYS_TRANSFORMED);
        coordSystem = pNode->GetContentCoordinateSystem();
    }
    
    // TRICKY: if any scroller along the branch needed to change its scroll
    // offset, it would call RequestRecalc, which would set the s_recalc flag
    // on the root.  Therefore, we can look at that flag to see if a synchronous
    // redraw is now necessary.
    
    // do a synchronous update if necessary
    if (!rcScroll.IsEmpty() && pNode->IsDispRoot() && pNode->IsSet(s_recalc))
    {
        CDispRoot::Cast(pNode)->InvalidateRoot(rcScroll, TRUE, TRUE);
    }
}

void
CDispNode::ScrollIntoView(SCROLLPIN spVert, SCROLLPIN spHorz)
{
    CDispParentNode* pParent = GetRawParentNode();
    if (pParent != NULL)
    {
        CRect rctBounds;
        GetBounds(&rctBounds, COORDSYS_TRANSFORMED);
        pParent->ScrollRectIntoView(
            rctBounds, GetContentCoordinateSystem(),
            spVert, spHorz);
    }
}

//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::MustInvalidate
//
//  Synopsis:   A parent node may have already invalidated the area within
//              its clipping region, so children may not have to do invalidation
//              calculations.
//
//  Arguments:  none
//
//  Returns:    TRUE if this node must perform invalidation calculations.
//
//  Notes:
//
//----------------------------------------------------------------------------

BOOL
CDispNode::MustInvalidate() const
{
    for (const CDispNode* pNode = this;
         pNode != NULL;
         pNode = pNode->GetRawParentNode())
    {
        if (pNode->IsInvalid())
            return FALSE;
    }

    return TRUE;
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::InvalidateEdges
//
//  Synopsis:   Invalidate edges of a node that is changing size.
//
//  Arguments:  sizebOld        old node size
//              sizebNew        new node size
//              rcbBorderWidths width of borders
//
//  Notes:
//
//----------------------------------------------------------------------------

void
CDispNode::InvalidateEdges(
        const CSize& sizebOld,
        const CSize& sizebNew,
        const CRect& rcbBorderWidths)
{
    // TODO (donmarsh) -- this routine does not currently handle resizing
    // of RTL elements.  It assumes only the right edge needs to be invalidated
    // when horizontal size changes.  Need to revisit when we have our new RTL
    // strategy in place.
    
    Assert(sizebNew != sizebOld);
    
    CRect rcbInval;

    // invalidate right edge and border
    if (sizebOld.cx != sizebNew.cx || rcbBorderWidths.right > 0)
    {
        rcbInval.SetRect(
            min(sizebOld.cx, sizebNew.cx) - rcbBorderWidths.right,
            0,
            max(sizebOld.cx, sizebNew.cx),
            max(sizebOld.cy, sizebNew.cy) - rcbBorderWidths.bottom);
        Invalidate(rcbInval, COORDSYS_BOX);
    }
    
    // invalidate bottom edge and border
    if (sizebOld.cy != sizebNew.cy || rcbBorderWidths.bottom > 0)
    {
        rcbInval.SetRect(
            0,
            min(sizebOld.cy, sizebNew.cy) - rcbBorderWidths.bottom,
            max(sizebOld.cx, sizebNew.cx),
            max(sizebOld.cy, sizebNew.cy));
        Invalidate(rcbInval, COORDSYS_BOX);
    }
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::SetUserClip
//
//  Synopsis:   Set user clip rect for this node.
//
//  Arguments:  rcbUserClip      rectangle in box coordinates
//
//  Notes:
//
//----------------------------------------------------------------------------

void
CDispNode::SetUserClip(const RECT& rcbUserClip)
{
    // if not invalid, and visible branch and visible node
    if (MaskFlags(s_inval | s_visibleBranch | s_visibleNode)
                        == (s_visibleBranch | s_visibleNode))
    {
        // invalidate area that was exposed before (in case it will be clipped
        // now and nodes beneath need to be repainted)
        CRect rcbInvalid;
        TransformRect(_rctBounds, COORDSYS_TRANSFORMED, &rcbInvalid, COORDSYS_BOX);
        rcbInvalid.IntersectRect(GetUserClip());
        Invalidate(rcbInvalid, COORDSYS_BOX);

        // invalidate new clipped area
        SetInvalid();
    }

    RequestRecalcSubtree();

    CRect rcbUC(rcbUserClip);
    rcbUC.RestrictRange();
    Assert(HasExtra(DISPEX_USERCLIP));
    ((CUserClipAndExpandedClip*)GetExtra(DISPEX_USERCLIP))->_fUserClip = TRUE;
    ((CUserClipAndExpandedClip*)GetExtra(DISPEX_USERCLIP))->_fExpandedClip = FALSE;
    ((CUserClipAndExpandedClip*)GetExtra(DISPEX_USERCLIP))->_rcClip = rcbUC;
}

//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::RestrictUserClip
//
//  Synopsis:   Restrict user clip rectangle so as no coordinate exceeds +-LONG_MAX/2
//
//----------------------------------------------------------------------------
void CDispNode::RestrictUserClip()
{
    CRect* prcUserClip = (CRect*)GetExtra(DISPEX_USERCLIP);
    prcUserClip->RestrictRange();
}

//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::PreDraw
//
//  Synopsis:   Before drawing starts, PreDraw processes the redraw region,
//              subtracting areas that are blocked by opaque or buffered items.
//              PreDraw is finished when the redraw region becomes empty
//              (i.e., an opaque item completely obscures all content below it)
//
//              NOTE: This method is called by subclasses to handle opaque
//              items and containers.
//
//  Arguments:  pContext    draw context
//
//  Returns:    TRUE if first opaque node to draw has been found
//
//  Notes:
//
//----------------------------------------------------------------------------

BOOL
CDispNode::PreDraw(CDispDrawContext* pContext)
{
    // Interesting nodes are visible branch, in-view, opaque
    Assert(IsAllSet(s_preDrawSelector));
    Assert(pContext->IntersectsRedrawRegion(_rctBounds));
    Assert(!IsAnySet(s_flagsNotSetInDraw));

    // if this node isn't visible, opacity doesn't matter
    if (!IsVisible())
        return FALSE;

    // don't subtract transformed nodes
    if (HasUserTransform())
        return FALSE;

    // We do not delve inside a node whose content is drawn externally.
    // TODO (sambent) Someday, filters may help determine whether PreDraw
    // can safely look at its children and come up with the correct answers.
    if (IsDrawnExternally())
        return FALSE;

    // determine if enough of this opaque thing is visible to warrant
    // expensive subtraction from the redraw region
    const CRegion* prgngRedraw = pContext->GetRedrawRegion();
    CRect rcpBounds;
    CRect rcgBounds;
    GetBounds(&rcpBounds);
    if (HasUserClip())
    {
        CRect rcpUserClip(GetUserClip());   // in box coordinates
        rcpUserClip.OffsetRect(rcpBounds.TopLeft().AsSize());   // to parent coordinates
        rcpBounds.IntersectRect(rcpUserClip);
    }
    pContext->GetClipTransform().Transform(rcpBounds, &rcgBounds);
    
    // on Win_9x, we can't allow operations on regions that exceed GDI's 16-bit
    // resolution, therefore we don't perform opaque optimizations in these cases
    BOOL fHackForGDI = g_dwPlatformID == VER_PLATFORM_WIN32_WINDOWS;
#if DBG==1
    if (IsTagEnabled(tagHackGDICoords)) fHackForGDI = TRUE;
#endif
    if (fHackForGDI &&
        rcgBounds.Width() > 32767 ||
        rcgBounds.Height() > 32767 ||
        rcgBounds.left < -32768 || rcgBounds.left > 32767 ||
        rcgBounds.top < -32768 || rcgBounds.top > 32767 ||
        rcgBounds.right < -32768 || rcgBounds.right > 32767 ||
        rcgBounds.bottom < -32768 || rcgBounds.bottom > 32767)
        return FALSE;
    
    if (prgngRedraw->BoundsInside(rcgBounds))
    {
        // add this node to the redraw region stack
        Verify(!pContext->PushRedrawRegion(rcgBounds,this));
        return TRUE;
    }

    CRegion rgngGlobal(rcgBounds);
    rgngGlobal.Intersect(*prgngRedraw);
    CRect rcgBounds2;
        rgngGlobal.GetBounds(&rcgBounds2);
    if (rcgBounds2.Area() < MINIMUM_OPAQUE_PIXELS)
    {
        // intersection isn't big enough, simply continue processing
        return FALSE;
    }

    // TODO (donmarsh) - The following code prevents an opaque item from
    // subtracting itself from a rectangular redraw region and producing
    // a non-rectangular result.  Non-rectangular regions are just too
    // slow for Windows to deal with.
    switch (prgngRedraw->ResultOfSubtract(rgngGlobal))
    {
    case CRegion::SUB_EMPTY:
        // this case should have been identified already above
        Assert(FALSE);
        return FALSE;
    case CRegion::SUB_RECTANGLE:
        // subtract this item's region and continue predraw processing
        if (!pContext->PushRedrawRegion(rgngGlobal,this))
            return TRUE;
        break;
    case CRegion::SUB_REGION:
        // don't subtract this item's region to keep redraw region simple
        break;
    case CRegion::SUB_UNKNOWN:
        // see if we can get back to a simple rectangular redraw region
        if (!pContext->PushRedrawRegion(rgngGlobal,this))
        {
            return TRUE;
        }
        prgngRedraw = pContext->GetRedrawRegion();
        if (prgngRedraw->IsComplex())
        {
            pContext->RestorePreviousRedrawRegion();
        }
        break;
    }

    // TODO (donmarsh) - what I would have liked to do instead of the
    // code above.
#ifdef NEVER
    // subtract the item's clipped and offset bounds from the redraw region
    if (!pContext->PushRedrawRegion(rgngGlobal,this))
        return TRUE;
#endif

    return FALSE;
}


// here are the fixed draw programs
const int 
CDispNode::s_rgDrawPrograms[][DP_MAX_LENGTH] =
{
    { DP_PROGRAM(NONE)
        DP_DrawBorder,
        DP_DrawBackground,
        DP_DrawContent, DISPNODELAYER_POSITIVEZ,
        DP_Done,
    },

    { DP_PROGRAM(REPLACE_ALL)
        DP_Expand, 0, 0, 0, 0,
        DP_DrawPainter,
        DP_Done,
    },

    { DP_PROGRAM(REPLACE_CONTENT)
        DP_DrawBorder,
        DP_DrawBackground,
        DP_DrawPainter,
        DP_Done,
    },

    { DP_PROGRAM(REPLACE_BACKGROUND)
        DP_DrawBorder,
        DP_BoxToContent,
        DP_DrawPainter,
        DP_DrawContent, DISPNODELAYER_POSITIVEZ,
        DP_Done,
    },

    { DP_PROGRAM(BELOW_CONTENT)
        DP_DrawBorder,
        DP_DrawBackground,
        DP_DrawPainter,
        DP_DrawContent, DISPNODELAYER_POSITIVEZ,
        DP_Done,
    },

    { DP_PROGRAM(BELOW_FLOW)
        DP_DrawBorder,
        DP_DrawBackground,
        DP_DrawContent, DISPNODELAYER_NEGATIVEZ,
        DP_DrawPainter,
        DP_DrawContent, DISPNODELAYER_POSITIVEZ,
        DP_Done,
    },

    { DP_PROGRAM(ABOVE_FLOW)
        DP_DrawBorder,
        DP_DrawBackground,
        DP_DrawContent, DISPNODELAYER_FLOW,
        DP_DrawPainter,
        DP_DrawContent, DISPNODELAYER_POSITIVEZ,
        DP_Done,
    },

    { DP_PROGRAM(ABOVE_CONTENT)
        DP_DrawBorder,
        DP_DrawBackground,
        DP_DrawContent, DISPNODELAYER_POSITIVEZ,
        DP_DrawPainter,
        DP_Done,
    },

    { DP_PROGRAM(WINDOW_TOP)
        DP_DrawBorder,
        DP_DrawBackground,
        DP_DrawContent, DISPNODELAYER_POSITIVEZ,
        DP_WindowTop,
        DP_Done,
    },
};

// The order in the previous array must match the HTMLPAINT_ZORDER enum.
COMPILE_TIME_ASSERT_1( HTMLPAINT_ZORDER_NONE, 0 );
COMPILE_TIME_ASSERT_1( HTMLPAINT_ZORDER_REPLACE_ALL, 1 );
COMPILE_TIME_ASSERT_1( HTMLPAINT_ZORDER_REPLACE_CONTENT, 2 );
COMPILE_TIME_ASSERT_1( HTMLPAINT_ZORDER_REPLACE_BACKGROUND, 3 );
COMPILE_TIME_ASSERT_1( HTMLPAINT_ZORDER_BELOW_CONTENT, 4 );
COMPILE_TIME_ASSERT_1( HTMLPAINT_ZORDER_BELOW_FLOW, 5 );
COMPILE_TIME_ASSERT_1( HTMLPAINT_ZORDER_ABOVE_FLOW, 6 );
COMPILE_TIME_ASSERT_1( HTMLPAINT_ZORDER_ABOVE_CONTENT, 7 );
COMPILE_TIME_ASSERT_1( HTMLPAINT_ZORDER_WINDOW_TOP, 8);


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::GetDrawProgram
//              
//  Synopsis:   Select a draw program to execute.  If there are multiple
//              painters, we construct the program dynamically.  Otherwise
//              we pick one from the list of predefined programs.
//              
//  Arguments:  paryProgram     array for program
//              paryCookie      array for cookie arguments in the program
//              lDrawLayers     which layers to draw (for filters)
//
//  Returns:    S_OK            normal
//              S_FALSE         use default (hardwired) program
//              E_*             error
//----------------------------------------------------------------------------

HRESULT
CDispNode::GetDrawProgram(CAryDrawProgram *paryProgram,
                          CAryDrawCookie *paryCookie,
                          LONG lDrawLayers)
{
    HRESULT hr = S_FALSE;

    if (!HasAdvanced())
    {
        CAryDispClientInfo aryInfo;
        const LONG lZOrder = GetPainterInfo(&aryInfo);

        if (!NeedAdvanced(&aryInfo, lDrawLayers))
        {
            Assert(0 <= lZOrder && lZOrder < ARRAY_SIZE(s_rgDrawPrograms));
            Assert(s_rgDrawPrograms[lZOrder][DP_START_INDEX-1] == lZOrder);
            if (OK(paryProgram->Grow(DP_MAX_LENGTH)))
            {
                hr = paryProgram->CopyIndirect(DP_MAX_LENGTH, (int *) s_rgDrawPrograms[lZOrder], FALSE);
            }
            else
                hr = E_OUTOFMEMORY;
        }
        else
        {
            // Advanced mode is normally detected in the recalc pass.
            // The one exception is page transitions.  When Apply() is called to
            // take the "before" picture of the old page, the filter behavior
            // will call RenderElement with non-trivial lDrawLayers, and this
            // requires advanced mode.  We can't tell at recalc time, because
            // we don't know whether our client is involved in a page transition.
            AssertSz(GetDispClient()->IsInPageTransitionApply(),
                        "advanced mode should be set during recalc");
            SetUpAdvancedDisplay();
        }
    }

    if (HasAdvanced())
    {
        hr = GetAdvanced()->GetDrawProgram(paryProgram, paryCookie, lDrawLayers);
    }
    
    RRETURN1(hr, S_FALSE);
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::GetPainterInfo
//              
//  Synopsis:   Get painter info from the client
//              
//  Arguments:  paryInfo        client info
//              
//----------------------------------------------------------------------------

LONG
CDispNode::GetPainterInfo(CAryDispClientInfo *pAryClientInfo)
{
    LONG lZOrder = GetDispClient()->GetClientPainterInfo(this, pAryClientInfo);

    // intercept any requests to replace the background of the top-level
    // BODY by a transparent painter.  The BODY *must* paint a background of
    // some kind, or else we end up displaying uninitialized garbage from the
    // offscreen buffer

    if (pAryClientInfo->Size() > 0 && RequiresBackground())
    {
        int i;
        for (i=pAryClientInfo->Size()-1; i>=0; --i)
        {
            HTML_PAINTER_INFO *pInfo = &pAryClientInfo->Item(i)._sInfo;

            if (pInfo->lZOrder == HTMLPAINT_ZORDER_REPLACE_BACKGROUND &&
                !(pInfo->lFlags & HTMLPAINTER_OPAQUE))
            {
                // turn this into BELOW_CONTENT instead
                pInfo->lZOrder = HTMLPAINT_ZORDER_BELOW_CONTENT;
                if (i == 0)
                    lZOrder = pInfo->lZOrder;
            }
        }
    }

    return lZOrder;
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::RequiresBackground
//              
//  Synopsis:   Determine whether this node absolutely must draw a background
//              
//  Arguments:  none
//              
//----------------------------------------------------------------------------

BOOL
CDispNode::RequiresBackground() const
{
    // the top-level BODY node must paint a background of some kind
    CDispParentNode *pParent = GetParentNode();
    return (pParent && pParent->IsDispRoot());
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::NeedAdvanced
//              
//  Synopsis:   Determine whether this node needs advanced drawing features
//              
//  Arguments:  paryInfo        client info
//              lDrawLayers     which layers need drawing
//              
//----------------------------------------------------------------------------

BOOL
CDispNode::NeedAdvanced(CAryDispClientInfo *paryInfo, LONG lDrawLayers,
                            BOOL *pfIsFiltered)
{
    BOOL fNeedAdvanced = FALSE;
    int i;

    if (pfIsFiltered)
        *pfIsFiltered = FALSE;

    // multiple painters, or non-trivial layer selector, requires advanced
    if (paryInfo->Size() > 1 || lDrawLayers != FILTER_DRAW_ALLLAYERS)
        fNeedAdvanced =  TRUE;

    for (i=paryInfo->Size()-1; i>=0; --i)
    {
        // REPLACE_ALL requires advanced
        // non-zero rcExpand requires advanced
        if (paryInfo->Item(i)._sInfo.lZOrder == HTMLPAINT_ZORDER_REPLACE_ALL ||
            memcmp(&paryInfo->Item(i)._sInfo.rcExpand, &g_Zero.rc, sizeof(RECT)))
        {
            fNeedAdvanced = TRUE;
            break;
        }
    }

    // filters and overlays require advanced
    if (pfIsFiltered || !fNeedAdvanced)
    {
        if (GetDispClient()->HasFilterPeer(this))
        {
            if (pfIsFiltered)
                *pfIsFiltered = TRUE;
            fNeedAdvanced =  TRUE;
        }

        if (GetDispClient()->HasOverlayPeer(this))
        {
            fNeedAdvanced =  TRUE;
        }
    }

    return fNeedAdvanced;
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::ReverseDrawProgram
//              
//  Synopsis:   Reverse the draw program (for hit testing)
//              
//  Arguments:  paryProgram     the program
//              piPC            index of end of program (i.e. beginning of reversed program)
//              piCookie        number of cookies
//              
//----------------------------------------------------------------------------

void
CDispNode::ReverseDrawProgram(CAryDrawProgram& aryProgram,
                              int *piPC, int *piCookie)
{
    int iPC, iCookie;
    int layerPrevious = DISPNODELAYER_NEGATIVEINF;

    for (iPC=DP_START_INDEX, iCookie=0;  aryProgram[iPC] != DP_Done;  ++iPC)
    {
        switch (aryProgram[iPC])
        {
            case DP_DrawContent:
                // reverse the instruction and its argument,
                // and change the argument.  We want to stop just above the
                // previous layer, unless the previous layer was NEGATIVEINF
                // when we should include that layer as well.  The left-shift
                // does this perfectly because NEGATIVEINF is 0 (and 0<<1 == 0),
                // while all the other layers we care about (NEGATIVEZ and FLOW)
                // left-shift onto the next higher layer (FLOW and POSITIVEZ).
                aryProgram[iPC] = layerPrevious << 1;
                layerPrevious = aryProgram[++iPC];
                aryProgram[iPC] = DP_DrawContent;
                break;

            case DP_DrawPainterMulti:
            case DP_WindowTopMulti:
                ++iCookie;
                break;

            case DP_Expand:
                Assert(iPC + 5 < aryProgram.Size());
                aryProgram[iPC] = aryProgram[iPC + 5];
                Assert(aryProgram[iPC] == DP_DrawPainterMulti ||
                       aryProgram[iPC] == DP_WindowTopMulti);
                ++iCookie;
                iPC += 5;
                aryProgram[iPC] = DP_Expand;
                break;

            default:
                break;
        }
    }

    *piPC = iPC - 1;
    *piCookie = iCookie;
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::Draw
//              
//  Synopsis:   Determine whether this node should be drawn, and what its
//              clipping rect should be.
//              
//  Arguments:  pContext        display context, in COORDSYS_TRANSFORMED
//              pChild          if not NULL, which child to start drawing at
//              
//  Notes:      This method should only be called on nodes that are visible
//              and in-view: IsAllSet(pContext->GetDrawSelector()).
//              
//----------------------------------------------------------------------------

void
CDispNode::Draw(CDispDrawContext* pContext, CDispNode* pChild, long lDrawLayers)
{
    if(!pContext)
        return;
    Assert(IsAllSet(pContext->GetDrawSelector()));
    
    // if this is an opaque node that saved a redraw region during PreDraw,
    // restore that redraw region (with the opaque area now included)
    const CRegion* prgnRedraw;
    if (IsSet(s_savedRedrawRegion))
    {
        pContext->PopRedrawRegionForKey((void*)this);
        prgnRedraw = NULL;  // don't test for redraw region intersection in TransformedToBoxCoords below
    }

    else if (pContext->IntersectsRedrawRegion(_rctBounds))
    {
        prgnRedraw = pContext->GetRedrawRegion();
    }

    // this node's bounds do not intersect the redraw region
    else
    {
        return;
    }
    
    // save old transform, change context to box coordinates
    CSaveDispClipTransform saveTransform(pContext);
    if (TransformedToBoxCoords(&pContext->GetClipTransform(), prgnRedraw))
    {
        // Change drawing resolution on nodes representing DEVICERECTs
        CDispDrawContext drawcontextLocal(s_drawSelector);
        CFormDrawInfo drawinfoLocal;
        
        // Use context with a differen device resolution if it changes here
        if (HasUserTransform() && GetExtraTransform()->_fResolutionChange)
        {
            CExtraTransform *pExtraTransform = GetExtraTransform();
            void *pClientData = pContext->GetClientData();
            CFormDrawInfo *pDI = (CFormDrawInfo *)pClientData;

            // Switch unit info to match the resolution
            drawinfoLocal = *pDI;
            drawinfoLocal.SetUnitInfo(pExtraTransform->_pUnitInfo);
            
            drawcontextLocal = *pContext;
            drawcontextLocal.SetClientData(&drawinfoLocal);
            
            pContext = &drawcontextLocal;
        }

        // redirect for filtering
         pContext->_fBypassFilter = FALSE;
         DrawSelf(pContext, pChild, lDrawLayers);
    }
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::DrawBorder
//              
//  Synopsis:   Draw optional border for this node.
//              
//  Arguments:  pContext            draw context, in COORDSYS_BOX
//              rcbBorderWidths     widths of optional border
//              pDispClient         client for this node
//              dwFlags             border flags
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

void
CDispNode::DrawBorder(
        CDispDrawContext* pContext,
        const CRect& rcbBorderWidths,
        CDispClient* pDispClient,
        DWORD dwFlags)
{
    if(!pContext)
        return;

    if (HasBorder() && IsVisible())
    {
        // does redraw region intersect the border?
        CRect rcbBounds(GetSize());
        CRect rcbInsideBorder(
            rcbBorderWidths.TopLeft(),
            rcbBounds.BottomRight() - rcbBorderWidths.BottomRight().AsSize());
        CRect rcgInsideBorder;
        pContext->GetClipTransform().TransformRoundIn(rcbInsideBorder, &rcgInsideBorder);
        if (!pContext->GetRedrawRegion()->BoundsInside(rcgInsideBorder))
        {
            CRect rcbClip(pContext->GetClipRect());
            rcbClip.IntersectRect(rcbBounds);
            pDispClient->DrawClientBorder(
                &rcbBounds,
                &rcbClip,
                pContext->PrepareDispSurface(),
                this,
                pContext->GetClientData(),
                dwFlags);
        }
    }
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::DrawBackground
//              
//  Synopsis:   Draw background (shared for filtered or unfiltered case).
//              
//  Arguments:  pContext    draw context, in COORDSYS_BOX
//              di          clipping and offset information for various layers
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

void
CDispNode::DrawBackground(CDispDrawContext* pContext, const CDispInfo& di)
{
    Assert(HasBackground());
    
    if (!IsVisible())
        return;
    
    CSaveDispClipTransform saveTransform(pContext);
    TransformBoxToScroll(&pContext->GetClipTransform().NoClip(), di);
    
    // calculate intersection with redraw region
    CRect rccBackground(di._sizecBackground);
    if (HasContentOrigin())
    {
        rccBackground.OffsetRect(-GetContentOrigin());
    }
    CRect rccBackgroundClip(di._rccBackgroundClip);
    TransformScrollToContent(&pContext->GetClipTransform().NoClip(), di);
    
    pContext->SetClipRect(rccBackgroundClip);
    pContext->IntersectRedrawRegion(&rccBackgroundClip);
    if (!rccBackgroundClip.IsEmpty())
    {
        GetDispClient()->DrawClientBackground(
            &rccBackground,
            &rccBackgroundClip,
            pContext->PrepareDispSurface(),
            this,
            pContext->GetClientData(),
            0);
    }
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::DrawAtWindowTop
//
//  Synopsis:   Draw this node's window-top layers
//
//  Arguments:  pContext        draw context, in COORDSYS_GLOBAL
//
//  Notes:
//
//----------------------------------------------------------------------------

void
CDispNode::DrawAtWindowTop(CDispDrawContext* pContext)
{
    CSaveDispClipTransform saveTransform(pContext);
    CDispClipTransform transform;

    // prepare to draw in content coords
    GetNodeTransform(&transform.NoClip(), COORDSYS_CONTENT, COORDSYS_GLOBAL);
    transform.SetHugeClip();
    pContext->GetClipTransform().AddPreTransform(transform);
    
#if DBG==1
    pContext->GetClipTransform().NoClip()._csDebug = COORDSYS_CONTENT;
    pContext->GetClipTransform().NoClip()._pNode = this;
#endif

    // calculate clip and position info
    CDispInfo di;
    CalcDispInfo(pContext->GetClipRect(), &di);
    
    // prepare to run the draw program
    CRect rccContent(di._sizecBackground);
    CRect rccClip(di._rccBackgroundClip);

    // find out which draw program to run
    CAryDrawProgram aryProgram;
    CAryDrawCookie aryCookie;
    if (S_OK != GetDrawProgram(&aryProgram, &aryCookie, FILTER_DRAW_ALLLAYERS))
    {
        AssertSz(0, "Failed to get draw program");
        return;
    }

    int iCookie = -1;
    void * cookie = NULL;
    BOOL fExpand = FALSE;
    CRect rcExpand = g_Zero.rc; // keep compiler happy

    // run the program
    for (int iPC = DP_START_INDEX;  aryProgram[iPC] != DP_Done;  ++iPC)
    {
        switch (aryProgram[iPC])
        {
        case DP_Expand:
            fExpand = TRUE;
            rcExpand.top    = aryProgram[++iPC];
            rcExpand.left   = aryProgram[++iPC];
            rcExpand.bottom = aryProgram[++iPC];
            rcExpand.right  = aryProgram[++iPC];
            break;

        case DP_WindowTopMulti:
            Assert(HasAdvanced());
            cookie = aryCookie[++iCookie];
            // fall through to DP_WindowTop

        case DP_WindowTop:
            if (!fExpand)
            {
                GetDispClient()->DrawClientLayers(
                    &rccContent,
                    &rccClip,
                    pContext->PrepareDispSurface(),
                    this,
                    cookie,
                    pContext,
                    CLIENTLAYERS_AFTERBACKGROUND);
            }
            else
            {
                Assert(HasAdvanced());
                CSaveDispClipTransform transformSaveContent(pContext);
                CRect rcbBounds = GetBounds().Size();

                TransformContentToBox(&pContext->GetClipTransform().NoClip(), di);
                pContext->SetHugeClip();
                rcbBounds.Expand(rcExpand);

                GetDispClient()->DrawClientLayers(
                    &rcbBounds,
                    &rcbBounds,
                    pContext->PrepareDispSurface(),
                    this,
                    cookie,
                    pContext,
                    CLIENTLAYERS_AFTERBACKGROUND);
            }

            cookie = NULL;
            fExpand = FALSE;
            break;

        case DP_DrawContent:
            ++iPC;
            break;

        case DP_DrawPainterMulti:
            ++iCookie;
            fExpand = FALSE;
            break;

        default:
            Assert(aryProgram[iPC] != DP_DrawPainter);
            break;
        }
    }
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::HitTestAtWindowTop
//
//  Synopsis:   Hit-test this node's window-top layers
//
//  Arguments:  pContext        hit context, in COORDSYS_GLOBAL
//
//  Notes:
//
//----------------------------------------------------------------------------

BOOL
CDispNode::HitTestAtWindowTop(CDispHitContext* pContext, BOOL fHitContent)
{
    CSaveDispClipTransform saveTransform(pContext);
    CDispClipTransform transform;
    BOOL               fDeclinedHit = FALSE;

    // prepare to hit-test in content coords
    GetNodeTransform(&transform.NoClip(), COORDSYS_CONTENT, COORDSYS_GLOBAL);
    transform.SetHugeClip();
    pContext->GetClipTransform().AddPreTransform(transform);
    
#if DBG==1
    pContext->GetClipTransform().NoClip()._csDebug = COORDSYS_CONTENT;
    pContext->GetClipTransform().NoClip()._pNode = this;
#endif

    // calculate clip and position info
    CDispInfo di;
    CalcDispInfo(pContext->GetClipRect(), &di);
    
    // prepare to run the draw program
    CRect rccContent(di._sizecBackground);
    CRect rccClip(di._rccBackgroundClip);

    pContext->SetClipRect(rccClip);

    // find out which draw program to run
    CAryDrawProgram aryProgram;
    CAryDrawCookie aryCookie;
    if (S_OK != GetDrawProgram(&aryProgram, &aryCookie, FILTER_DRAW_ALLLAYERS))
    {
        AssertSz(0, "Failed to get draw program");
        return FALSE;
    }

    int iPC;
    int iCookie;
    void * cookie = NULL;
    BOOL fExpand = FALSE;
    CRect rcExpand = g_Zero.rc; // keep compiler happy

    // we will run the program backwards;  first fix up the arguments
    ReverseDrawProgram(aryProgram, &iPC, &iCookie);

    // run the program
    for ( ;  iPC>=DP_START_INDEX;  --iPC)
    {
        switch (aryProgram[iPC])
        {
        case DP_Expand:
            fExpand = TRUE;
            rcExpand.right  = aryProgram[--iPC];
            rcExpand.bottom = aryProgram[--iPC];
            rcExpand.left   = aryProgram[--iPC];
            rcExpand.top    = aryProgram[--iPC];
            break;

        case DP_WindowTopMulti:
            Assert(HasAdvanced());
            cookie = aryCookie[--iCookie];
            // fall through to DP_WindowTop

        case DP_WindowTop:
            if (!fExpand)
            {
                if (pContext->RectIsHit(di._rccBackgroundClip))
                {
                    CPoint ptcHitTest;
                    pContext->GetHitTestPoint(&ptcHitTest);
                    if (GetDispClient()->HitTestPeer(
                            &ptcHitTest,
                            COORDSYS_CONTENT,
                            (CDispContainer*)this,
                            cookie,
                            pContext->_pClientData,
                            fHitContent,
                            pContext,
                            &fDeclinedHit))
                    {
                        return TRUE;
                    }
                }
            }
            else
            {
                Assert(HasAdvanced());
                CSaveDispClipTransform transformSaveContent(pContext);
                CRect rcbBounds = GetBounds().Size();

                TransformContentToBox(&pContext->GetClipTransform().NoClip(), di);
                pContext->SetHugeClip();
                rcbBounds.Expand(rcExpand);

                if (pContext->RectIsHit(rcbBounds))
                {
                    CPoint ptbHitTest;
                    pContext->GetHitTestPoint(&ptbHitTest);
                    if (GetDispClient()->HitTestPeer(
                            &ptbHitTest,
                            COORDSYS_BOX,
                            (CDispContainer*)this,
                            cookie,
                            pContext->_pClientData,
                            fHitContent,
                            pContext,
                            &fDeclinedHit))
                    {
                        // NOTE: don't bother to restore context transform for speed
                        return TRUE;
                    }
                }
            }
            cookie = NULL;
            fExpand = FALSE;
            break;

        case DP_DrawContent:
            --iPC;
            break;

        case DP_DrawPainterMulti:
            --iCookie;
            fExpand = FALSE;
            break;

        default:
            break;
        }
    }

    return FALSE;
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::ComputeExpandedBounds
//              
//  Synopsis:   Return the "expanded" bounds, including expansion requested
//              by external painters.  Used for hit-testing.
//              
//  Arguments:  prcpBounds      returned bounds
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

void
CDispNode::ComputeExpandedBounds(RECT * prcpBounds)
{
    Assert(HasAdvanced());
    CRect rcbBoundsSelf = GetBounds().Size();
    CRect rcbBounds = rcbBoundsSelf;
    CAryDispClientInfo aryInfo;

    GetDispClient()->GetClientPainterInfo(this, &aryInfo);

    // union in all the expansions desired by external painters
    for (int i=aryInfo.Size()-1; i>=0; --i)
    {
        CRect rcbExpanded = rcbBoundsSelf;
        rcbExpanded.Expand(aryInfo[i]._sInfo.rcExpand);
        rcbBounds.Union(rcbExpanded);
    }

    // union in my "normal" visible bounds
    // TODO (sambent) We should really redo the ComputeVisibleBounds calculation
    // (in parent coords), union, then convert to transformed coords.  This
    // is more accurate when there are non-90-degree rotations involved.
    // For expedience and speed, we do the union in transformed coords instead.

    CRect rctBounds;
    TransformRect(rcbBounds, COORDSYS_BOX, &rctBounds, COORDSYS_TRANSFORMED);
    rctBounds.Union(_rctBounds);

    *prcpBounds = rctBounds;
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::SetUpAdvancedDisplay
//              
//  Synopsis:   Create a CAdvancedPainter, to implement advanced features
//              
//  Arguments:  none
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

void
CDispNode::SetUpAdvancedDisplay()
{
    AssertSz(!HasAdvanced(), "Disp node already in advanced mode");

    if (HasAdvanced())
        return;

    CAdvancedDisplay *pAdvanced = new CAdvancedDisplay(this, _pDispClient);
    if (pAdvanced)
    {
        if (_pDispClient->HasOverlayPeer(this))
        {
            pAdvanced->SetOverlay(TRUE);
            SetPositionAware();
        }
        
        SetFlag(s_advanced);
        _pAdvancedDisplay = pAdvanced;
    }
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::TearDownAdvancedDisplay
//              
//  Synopsis:   Remove the CAdvancedDisplay
//              
//  Arguments:  none
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

void
CDispNode::TearDownAdvancedDisplay()
{
    AssertSz(HasAdvanced(), "Disp node not in advanced mode");

    if (!HasAdvanced())
        return;

    CAdvancedDisplay *pAdvanced = _pAdvancedDisplay;
    _pDispClient = GetDispClient();
    ClearFlag(s_advanced);

    delete pAdvanced;
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::SetPainterState
//              
//  Synopsis:   Called during recalc.  Determines how the node needs to
//              interact with external painters (if any).
//              
//  Arguments:  rcpBoundsSelf       bounding rect for this node (parent coords)
//              prcpBoundsExpanded  new bounding rect, taking into account any
//                                  rcExpand from external painters
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

void
CDispNode::SetPainterState(const CRect& rcpBoundsSelf, CRect *prcpBoundsExpanded)
{
    CDispClient *pDispClient = GetDispClient();

    *prcpBoundsExpanded = rcpBoundsSelf;

    if (pDispClient)
    {
        CAryDispClientInfo aryClientInfo;
        int i;
        BOOL fDrawnExternally = FALSE;
        BOOL fHasWindowTop = FALSE;
        BOOL fHadOverlay = HasOverlay();

        GetPainterInfo(&aryClientInfo);

        for (i=aryClientInfo.Size()-1;  i>=0;  --i)
        {
            CDispClientInfo& info = aryClientInfo[i];

            if (info._sInfo.lZOrder == HTMLPAINT_ZORDER_REPLACE_ALL ||
                info._sInfo.lZOrder == HTMLPAINT_ZORDER_REPLACE_CONTENT)
            {
                fDrawnExternally = TRUE;
            }
            else if (info._sInfo.lZOrder == HTMLPAINT_ZORDER_WINDOW_TOP)
            {
                fHasWindowTop = TRUE;
            }

            CRect rcpExpanded = rcpBoundsSelf;
            rcpExpanded.Expand(info._sInfo.rcExpand);
            prcpBoundsExpanded->Union(rcpExpanded);
        }

        SetFlag(s_drawnExternally, fDrawnExternally);

        if (fHasWindowTop != HasWindowTop())
        {
            CDispRoot *pDispRoot = GetDispRoot();
            if (pDispRoot)
            {
                if (fHasWindowTop)
                {
                    pDispRoot->AddWindowTop(this);
                }
                else
                {
                    pDispRoot->RemoveWindowTop(this);
                }
            }
        }
        Assert(fHasWindowTop == HasWindowTop());

        if (NeedAdvanced(&aryClientInfo, FILTER_DRAW_ALLLAYERS))
        {
            if (!HasAdvanced())
                SetUpAdvancedDisplay();
        }
        else
        {
            if (HasAdvanced())
                TearDownAdvancedDisplay();
        }

        // update overlay info
        if (fHadOverlay != HasOverlay())
        {
            CDispRoot *pDispRoot = GetDispRoot();
            if (pDispRoot)
            {
                if (fHadOverlay)
                {
                    pDispRoot->RemoveOverlay(this);
                }
                else
                {
                    pDispRoot->AddOverlay(this);
                }
            }
        }

        // remember the expanded bounds
        if (HasAdvanced())
        {
            CRect rcbBoundsExpanded = *prcpBoundsExpanded;
            rcbBoundsExpanded.OffsetRect(-rcpBoundsSelf.TopLeft().AsSize());
            GetAdvanced()->SetExpandedBounds(rcbBoundsExpanded);

            if (HasOverlay())
            {
                GetAdvanced()->MoveOverlays();
            }
        }
    }
}

// TODO global variable yuckness.

extern CDispNode * g_pdispnodeElementDrawnToDC;

//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::GetDrawInfo
//              
//  Synopsis:   Return special information that an external painter may
//              want to know during a Draw call.
//
//              If transform information is requested, only transforms that
//              don't represent resolution changes are returned.
//              
//  Arguments:  pContext        draw context, in COORDSYS_CONTENT
//              lFlags          which info the painter wants
//              dwPrivateFlags  Internal flags for filtered elements.
//              pInfo           where to store the info
//              
//----------------------------------------------------------------------------
HRESULT
CDispNode::GetDrawInfo(RENDER_CALLBACK_INFO *   pCallbackInfo,
                       LONG                     lFlags,
                       DWORD                    dwPrivateFlags,
                       HTML_PAINT_DRAW_INFO *   pInfo) const
{
    HRESULT hr = S_OK;
    CDispDrawContext *pContext =  NULL;

    if (pCallbackInfo)
    {
        pContext = (CDispDrawContext*)pCallbackInfo->_pContext;
    }

    if (!pContext)
    {
        hr = E_UNEXPECTED;
        goto done;
    }

    if (!pInfo)
    {
        hr = E_POINTER;
        goto done;
    }
    
    if (lFlags & HTMLPAINT_DRAWINFO_VIEWPORT)
    {
        CRect rccClient;
        CRect rcgViewport;

        GetClientRect(&rccClient, CLIENTRECT_BACKGROUND);
        if (pCallbackInfo->_lFlags & HTMLPAINT_DRAW_USE_XFORM)
        {
            rcgViewport = rccClient;
        }
        else
        {
            pContext->GetClipTransform().NoClip().Transform(rccClient, &rcgViewport);
        }
        pInfo->rcViewport = rcgViewport;
    }

    if (lFlags & HTMLPAINT_DRAWINFO_UPDATEREGION)
    {
        CRegion rgngUpdate = *pContext->GetRedrawRegion();
        rgngUpdate.Intersect(pCallbackInfo->_rcgClip);
        rgngUpdate.Untransform(pContext->GetClipTransform().GetWorldTransform());
        pInfo->hrgnUpdate = rgngUpdate.GetRegionForever();
    }

    if (lFlags & HTMLPAINT_DRAWINFO_XFORM)
    {
        Assert(sizeof(XFORM) == sizeof(pInfo->xform));

        // If we printing or print previewing a filtered element we need to
        // return a transform that doesn't include resolution changes.

        if (   (dwPrivateFlags & HTMLPAINT_DRAWINFO_PRIVATE_PRINTMEDIA)
            && (dwPrivateFlags & HTMLPAINT_DRAWINFO_PRIVATE_FILTER))
        {
            CDispNode const *   pNode       = this;
            CWorldTransform     worldxform;
            CPoint              pt(0, 0);

            while (pNode)
            {
                if (   pNode->HasUserTransform()
                    && !pNode->GetUserTransform().GetWorldTransform()->IsOffsetOnly())
                {
                    CDispTransform  transform   = pNode->GetUserTransform();

                    if (!pNode->GetExtraTransform()->_fResolutionChange)
                    {
                        worldxform.AddPreTransform(transform.GetWorldTransform());
                    }
                }
            
                pNode = pNode->GetParentNode();
            }

            worldxform.GetMatrix().GetXFORM((XFORM&)pInfo->xform);

            // Get translation by transforming a point at {0, 0} with the
            // DispSurface transformation, which holds the element's top/left
            // offset.

            pContext->GetDispSurface()->GetWorldTransform()->Transform(&pt);

            // Because the resolution change transforms we didn't include will
            // not have offsets, we can be certain that the offsets of the 
            // DispSurface transform will be correct.

            pInfo->xform.eDx = pt.x;
            pInfo->xform.eDy = pt.y;
        }
        else
        {
            CWorldTransform     wxform;

            wxform.Init(pContext->GetDispSurface()->GetWorldTransform());

            // If we're a filter rendering to a high resolution device, add a 
            // transform to represent the conversion from 96DPI to the display
            // resolution.
            
            if (   (dwPrivateFlags & HTMLPAINT_DRAWINFO_PRIVATE_FILTER)
                && g_uiDisplay.IsDeviceScaling())
            {
                CWorldTransform wxformHiRes;
                MAT             matrix;

                matrix.eM11 =   (float)g_uiDisplay.GetResolution().cx 
                              / FIXED_PIXELS_PER_INCH;
                matrix.eM12 = 0.0F;
                matrix.eM21 = 0.0F;
                matrix.eM22 =   (float)g_uiDisplay.GetResolution().cy 
                              / FIXED_PIXELS_PER_INCH;
                matrix.eDx  = 0.0F;
                matrix.eDy  = 0.0F;

                wxformHiRes.Init(&matrix);

                wxform.AddPreTransform(&wxformHiRes);
            }

            wxform.GetMatrix().GetXFORM((XFORM&)pInfo->xform);
        }
    }

done:

    RRETURN1(hr, S_FALSE);
}
//  Member:     CDispNode::GetDrawInfo


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::DrawNodeForFilter
//              
//  Synopsis:   This is a special entry point that modifies the context
//              appropriately to draw the contents of a node which will then
//              be filtered.
//              
//  Arguments:  pContext        draw context, in COORDSYS_BOX
//              pFilterSurface  destination surface (NULL means use context)
//              pMatrix         optional matrix to use when drawing to a
//                              surface.
//              lDrawLayers     which layers to actually draw
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

void
CDispNode::DrawNodeForFilter(
        CDispDrawContext *  pContext,
        CDispSurface *      pFilterSurface,
        MAT *               pMatrix,
        LONG                lDrawLayers)
{
    Assert(pContext != NULL);

    CSaveDispClipTransform saveTransform(pContext);
    CRect rcbBounds(GetSize());

    // if the filter gave us our own HDC, we don't have to do any special
    // clipping

    if (pFilterSurface == NULL)
    {
        // Using a matrix without a CDispSurface isn't supported.

        Assert(NULL == pMatrix);

        // does this disabled filter really intersect the redraw region?
        GetMappedBounds(&rcbBounds);
        pContext->IntersectClipRect(rcbBounds);
        Assert(pContext->IntersectsRedrawRegion(pContext->GetClipRect()));
        
        DrawSelf(pContext, NULL, lDrawLayers);
    
        // NOTE (donmarsh) -- the surface we have here has physical clipping
        // enforced on the DC (see CFilter::DrawFiltered).
        // DrawSelf may modify the surface state to say that no physical clipping
        // is being done, but CFilter::Draw does a RestoreDC that reinstates
        // physical clipping.  Now the clip state in the surface will not match
        // the actual state of the DC, and the next item to draw
        // will assume that no physical clipping has been applied to the DC
        // when it actually has.  The following hack sets surface
        // state so that the next item is forced to reestablish the clip region
        // appropriately.
        pContext->GetDispSurface()->ForceClip();
    }

    else if (!rcbBounds.IsEmpty())
    {
        CDispSurface* pSaveSurface = pContext->GetDispSurface();
        pContext->SetDispSurface(pFilterSurface);

        if (pMatrix)
        {
            pContext->GetClipTransform().GetWorldTransform()->Init(pMatrix);
        }
        else
        {
            pContext->SetToIdentity();
        }

        pContext->ForceClipRect(rcbBounds);

#if DBG==1
        pContext->GetClipTransform().NoClip()._csDebug = COORDSYS_BOX;
        pContext->GetClipTransform().NoClip()._pNode = this;
#endif
        CRegion rgngClip(rcbBounds);

        CRegion* prgngSaveRedraw = pContext->GetRedrawRegion();
        pContext->SetRedrawRegion(&rgngClip);

        // get surface ready for rendering
        pContext->GetDispSurface()->SetClipRgn(&rgngClip);
        CFormDrawInfo *pDI = (CFormDrawInfo*)pContext->GetClientData();
        CSetDrawSurface sds(pDI, &rcbBounds, &rcbBounds, 
                            pContext->GetDispSurface());
        pDI->_hdc = NULL;           // force DI to recompute its hdc
        
        // draw content that might not be in view
        int saveSelector = pContext->GetDrawSelector();
        pContext->SetDrawSelector(s_visibleBranch);

        // register myself with the root
        CDispRoot *pRoot = GetDispRoot();
        CDispNode *pOldDrawingUnfiltered = NULL;
        if (pRoot)
        {
            pOldDrawingUnfiltered = pRoot->SwapDrawingUnfiltered(this);
        }

        // Draw!
        DrawSelf(pContext, NULL, lDrawLayers);

        // restore the world
        if (pRoot)
        {
            WHEN_DBG( pOldDrawingUnfiltered = )
            pRoot->SwapDrawingUnfiltered(pOldDrawingUnfiltered);
            Assert( pOldDrawingUnfiltered == this );
        }
        pContext->SetDrawSelector(saveSelector);
        pContext->SetRedrawRegion(prgngSaveRedraw);
        pContext->SetDispSurface(pSaveSurface);
    }
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::HitTestUnfiltered
//              
//  Synopsis:   Hit-test the unfiltered version of a node.
//              
//  Arguments:  pContext        hit context, in COORDSYS_BOX
//              ppt             point to test
//              lDrawLayers     which layers to actually hit-test
//              pbHit           (return) is hit successful
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

HRESULT
CDispNode::HitTestUnfiltered(
                CDispHitContext *pContext,
                BOOL fHitContent,
                POINT *ppt,
                LONG lDrawLayers,
                BOOL *pbHit)
{
    // Do the unfiltered test with a separate context that differs from the
    // original context in two respects:
    //  (1) use the new query point supplied by the filter 
    //  (2) don't clip
    // This allows filters like FlipH to test a point that differs from the
    // original point, and whose pre-image may not even be visible.
    
    CDispHitContext context = *pContext;
    CPoint ptgHitTestFiltered;

    TransformPoint(*ppt, COORDSYS_BOX,
                    &ptgHitTestFiltered, COORDSYS_GLOBAL);

    context.SetHitTestPoint(ptgHitTestFiltered);
    context.SetHugeClip();

    *pbHit = HitTestPoint(&context, TRUE, fHitContent);

    RRETURN(S_OK);
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::InsertSiblingNode
//              
//  Synopsis:   Insert a new node into the tree as a sibling of this node.
//
//  Arguments:  pNew        node to be inserted as sibling of this node
//              where       if == before then insert new node before this one;
//                          else insert after.
//              
//  Returns:    TRUE if new node was inserted into a new location in the tree
//              
//----------------------------------------------------------------------------

BOOL
CDispNode::InsertSiblingNode(CDispNode* pNew, BeforeAfterEnum where)
{
    // this node must be in the tree
    Assert(_pParent != NULL);
    Assert(pNew != NULL);

    // we shouldn't be inserting a structure node or next to a structure node
    Assert(!pNew->IsStructureNode() && !IsStructureNode());
    
    // don't execute senseless insertion
    if (pNew == this || _pParent == NULL)
        goto NoInsertion;

    CDispNode *pPrevious, *pNext;
    if (where == before)
    {
        // if new node is already in correct place, don't insert
        if (pNew == _pPrevious)
            goto NoInsertion;

        pPrevious = _pPrevious;
        pNext = this;
    }
    else
    {
        // if new node is already in correct place, don't insert
        if (pNew == _pNext)
            goto NoInsertion;

        pPrevious = this;
        pNext = _pNext;
    }

    // extract new sibling from its current location
    if (pNew->_pParent != NULL)
        pNew->ExtractFromTree();

    Assert(pNew->_pParent == NULL);
    Assert(pNew->_pPrevious == NULL);
    Assert(pNew->_pNext == NULL);

    // link new sibling
    pNew->_pParent = _pParent;
    pNew->_pPrevious = pPrevious;
    pNew->_pNext = pNext;
    
    {   // modify parent
        _pParent->_cChildren++;
        _pParent->SetChildrenChanged();

        // link siblings
        if (pPrevious != NULL)
            pPrevious->_pNext = pNew;
        else
            _pParent->_pFirstChild = pNew;
    
        if (pNext != NULL)
            pNext->_pPrevious = pNew;
        else
            _pParent->_pLastChild = pNew;
    }
        
    // recalc subtree starting with newly inserted node
    pNew->SetFlags(s_newInsertion | s_recalcSubtree);
    pNew->RequestRecalc();
    
    // rebalance grandparent if parent is structure node
    _pParent->RequestRebalance();

    WHEN_DBG(_pParent->VerifyTreeCorrectness();)

    // invalidate this node in its new tree location
    pNew->SetInvalid();

    return TRUE;
    
NoInsertion:
    WHEN_DBG(VerifyTreeCorrectness();)
    return FALSE;
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::ExtractFromTree
//
//  Synopsis:   Extract this node from the tree.
//
//  Arguments:  none
//
//  Notes:
//
//----------------------------------------------------------------------------

void
CDispNode::ExtractFromTree()
{
    // invalidate current visible bounds if the bounds aren't already invalid
    // and if there is something visible on this branch
    if (MaskFlags(s_inval | s_visibleBranch) == s_visibleBranch)
        Invalidate();

    // check to see if this node is actually in a tree
    if (_pParent == NULL)
    {
        Assert(_pPrevious == NULL && _pNext == NULL);
        return;
    }

    // flag this branch as needing recalc
    _pParent->RequestRecalc();
    _pParent->SetChildrenChanged();

    // remove this node from parent's list of children
    _pParent->UnlinkChild(this);
    
    // remove all empty structure nodes above this node
    if (_pParent->_cChildren == 0 && _pParent->IsStructureNode())
        _pParent->CollapseStructureNode();

    _pPrevious = _pNext = NULL;
    _pParent = NULL;

    WHEN_DBG(VerifyTreeCorrectness();)
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::RestoreZOrder
//
//  Synopsis:   This node's z-index has changed, possibly violating the
//              invariant that z-index increases within a list of siblings.
//              Restore the invariant by re-inserting this node, if necessary.
//
//  Arguments:  lZOrder of this node: not used for DISPNODELAYER_FLOW layer type.
//
//  Returns:    TRUE    if a change was actually made
//
//  Notes:
//
//----------------------------------------------------------------------------

BOOL
CDispNode::RestoreZOrder(LONG lZOrder)
{
    Assert(!IsStructureNode());

    // nothing to do if this node in not in tree
    if (_pParent == NULL) return FALSE;

    int layer = GetLayer();

    // layer type should be valid and consistent with lZOrder
    Assert(layer == s_layerNegZ && lZOrder < 0 ||
           layer == s_layerFlow ||
           layer == s_layerPosZ && lZOrder >= 0);


    BOOL fNeedReinsert = FALSE;

    // look to my left.  If the order is wrong, we need to reinsert.
    {
        CDispNode const* pSibling = GetPreviousSiblingNode();
        if (pSibling)
        {
            int siblingLayer = pSibling->GetLayer();
            if (siblingLayer > layer ||
                siblingLayer == layer &&
                layer != s_layerFlow &&
                pSibling->IsGreaterZOrder(this, lZOrder))
                fNeedReinsert = TRUE;
        }
    }

    // now do the same thing to my right
    if (!fNeedReinsert)
    {
        CDispNode const* pSibling = GetNextSiblingNode();
        if (pSibling)
        {
            int siblingLayer = pSibling->GetLayer();
            if (siblingLayer < layer ||
                siblingLayer == layer &&
                layer != s_layerFlow &&
                !pSibling->IsGreaterZOrder(this, lZOrder))
                fNeedReinsert = TRUE;
        }
    }

    if (fNeedReinsert)
    {
        CDispParentNode *pParent = GetParentNode();
        Assert(pParent);

        // remove myself from the tree, and re-insert in the right layer
        ExtractFromTree();

        if (layer < s_layerFlow)
            pParent->InsertChildInNegZ(this, lZOrder);
        else if (layer == s_layerFlow)
            pParent->InsertChildInFlow(this);
        else
            pParent->InsertChildInPosZ(this, lZOrder);
    }

    return fNeedReinsert;
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::ReplaceNode
//              
//  Synopsis:   Replace the indicated node with this one.
//
//  Arguments:  pOldNode        node to replace
//
//  Notes:      This node must have no children.  If this node is a leaf node,
//              any unowned children of the replaced node will be deleted.
//              This node must not already be in a tree.
//              
//              All children of pOldNode are adopted to this one.
//              Old node is deleted (even if it was marked as owned).
//
//  CAUTION!  For performance reasons, this method invalidates the new node
//  only if the new and old bounds are different.  If they are equal, the
//  client must invalidate if it's necessary.
//              
//----------------------------------------------------------------------------

void
CDispNode::ReplaceNode(CDispNode* pOldNode)
{
    Assert(pOldNode != NULL && pOldNode != this);
    Assert(_pParent == NULL && _pPrevious == NULL && _pNext == NULL);
    Assert(IsLeafNode() || AsParent()->_cChildren == 0);
    
    const CRect& rcpOld = pOldNode->GetBounds();
    
    BOOL fMustInval =
        pOldNode->IsVisibleBranch() && GetBounds() != rcpOld;

    // invalidate bounds of old node
    if (fMustInval)
    {
        pOldNode->Invalidate();
    }

    CRect rcpMapped;
    CRect *prcpMapped = NULL;
    if (pOldNode->MapsBounds())
    {
        rcpMapped = rcpOld.Size();
        prcpMapped = &rcpMapped;
        pOldNode->GetMappedBounds(prcpMapped);
    }

    SetPosition(rcpOld.TopLeft());
    SetSize(rcpOld.Size(), prcpMapped, FALSE);  // NOTE: don't invalidate here, see SetInvalid below
    SetInView(pOldNode->IsInView());

    // maintain the root's special lists
    CDispRoot *pDispRoot = pOldNode->GetDispRoot();
    if (pDispRoot)
    {
        if (pOldNode->HasWindowTop())
        {
            pDispRoot->RemoveWindowTop(pOldNode);
        }

        if (pOldNode->HasOverlay())
        {
            pDispRoot->RemoveOverlay(pOldNode);
        }
    }

    if (pOldNode->IsParentNode())
    {
        CDispParentNode* pOldNodeAsParent = pOldNode->AsParent();
        
        // transfer children
        if (IsParentNode())
        {
            CDispParentNode* pNewNodeAsParent = AsParent();

            // move children
            pNewNodeAsParent->_cChildren   = pOldNodeAsParent->_cChildren  ;
            pNewNodeAsParent->_pFirstChild = pOldNodeAsParent->_pFirstChild;
            pNewNodeAsParent->_pLastChild  = pOldNodeAsParent->_pLastChild ;
            pOldNodeAsParent->_cChildren   = 0;
            pOldNodeAsParent->_pFirstChild = 0;
            pOldNodeAsParent->_pLastChild  = 0;
            pOldNodeAsParent->SetChildrenChanged();
            SetChildrenChanged();
            
            // set new parent on all children
            for (CDispNode* pChild = pNewNodeAsParent->_pFirstChild;
                 pChild != NULL;
                 pChild = pChild->_pNext)
            {
                pChild->_pParent = pNewNodeAsParent;
            }
        }
    }

    // place in tree
    _pParent = pOldNode->_pParent;
    _pPrevious = pOldNode->_pPrevious;
    _pNext = pOldNode->_pNext;

    if (_pParent)
    {
        if (_pPrevious) _pPrevious->_pNext = this;
        else            _pParent->_pFirstChild = this;
    
        if (_pNext) _pNext->_pPrevious  = this;
        else        _pParent->_pLastChild = this;
    }

    // delete old node
    pOldNode->Delete();
    
    WHEN_DBG(VerifyTreeCorrectness();)

    RequestRecalc();

    // invalidate new bounds
    if (fMustInval)
    {
        SetInvalid();
    }
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::Destroy
//              
//  Synopsis:   Destroy this node. 
//              
//  Arguments:  none
//              
//  Notes:
//      This node is deleted, the "owned" flag is of no matter.
//      
//      If this node is parent node, its children are unlinked recoursively.
//      When the unlinked child is not owned, it is also destroyed; this
//      causes recoursive tree erase.
//
//----------------------------------------------------------------------------

void
CDispNode::Destroy()
{
    if (_pParent != NULL)
    {
        // invalidate current bounds
        if (!IsInvalid())
        {
            Invalidate();
            SetInvalid();   // inhibit invalidation of all children
        }

        CDispRoot* pDispRoot = GetDispRoot();
        if (pDispRoot)
        {
            pDispRoot->ScrubWindowTopList(this);
            pDispRoot->ScrubOverlayList(this);
        }

        _pParent->SetChildrenChanged();
        RequestRecalc();
        _pParent->UnlinkChild(this);

        if (_pParent->IsStructureNode() && _pParent->_cChildren == 0)
            _pParent->CollapseStructureNode();
    
        _pParent = NULL;
        _pNext = NULL;
        _pPrevious = NULL;
    }

    Delete();
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::TransformedToBoxCoords
//              
//  Synopsis:   Switch the given transform from COORDSYS_TRANSFORMED to
//              COORDSYS_BOX, incorporating optional user transform and user
//              clip.
//              
//  Arguments:  pTransform      transform to be modified
//              prgng           if not NULL, the bounds of this node is tested
//                              to make sure it still intersects this region
//                              after user clipping has been incorporated into
//                              the transform
//                              
//  Returns:    TRUE if the bounds of this node still intersects the optional
//              region argument after user clipping has been incorporated into
//              the transform
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

BOOL
CDispNode::TransformedToBoxCoords(
        CDispClipTransform* pTransform,
        const CRegion* prgng) const
{
    if (!IsStructureNode())
    {
        AssertCoords(pTransform, COORDSYS_TRANSFORMED, COORDSYS_BOX);
    
        // add position of this node
        pTransform->AddPreOffset(GetPosition().AsSize());
    
        // add optional user transform
        if (HasUserTransform())
        {
            CDispClipTransform userTransform(GetUserTransform());
            pTransform->AddPreTransform(userTransform);
        }
    
        // incorporate optional user clip rect
        if (HasUserClip())
        {
            pTransform->IntersectClipRect(GetUserClip());
            if (prgng != NULL)
            {
                CRect rcgBounds;
                pTransform->Transform(CRect(_rctBounds.Size()), &rcgBounds);
                return prgng->Intersects(rcgBounds);
            }
        }
    }
    
    return TRUE;
}

void
CDispNode::SetExpandedClipRect(CRect &rc)
{
    Assert(HasExtra(DISPEX_USERCLIP));
    CUserClipAndExpandedClip *pucec = ((CUserClipAndExpandedClip*)GetExtra(DISPEX_USERCLIP));
    if (!pucec->_fUserClip)
    {
        pucec->_fExpandedClip = TRUE;
        pucec->_rcClip = rc;
    }
}

//
// Content origin calculations
//
void                    
CDispNode::SetContentOrigin(const CSize& sizeContentOrigin, 
                            int xOffsetRTL)                         // -1 if unknown or irrelevant
                                                                    // has priority otherwise
{
    CSize sizeContentOriginOld = GetContentOrigin();
    int xOffsetRTLOld = GetContentOffsetRTL();

    SetContentOriginNoInval(sizeContentOrigin, xOffsetRTL);

    if (GetContentOrigin()    != sizeContentOriginOld ||
        GetContentOffsetRTL() != xOffsetRTLOld)
    {
        InvalidateAndRecalcSubtree();
    }
}

void                    
CDispNode::SetContentOriginNoInval(const CSize& sizeContentOrigin,
                                   int xOffsetRTL)                  // -1 if unknown or irrelevant
                                                                    // has priority otherwise
{
    CExtraContentOrigin eco(sizeContentOrigin, xOffsetRTL);

    // If offset from right is non-zero, it takes priority, 
    // and offset from left is calculated from content width
    if (xOffsetRTL != -1)
    {
        // Caclulate size of content rectangle (where content coordinate space is applied)
        int xContentWidth;
        
        if (!IsScroller())
        {
            // CDispLeafNode or CDispContainer: content size equals to size within bounds
            CRect rcContent;
            GetClientRect(&rcContent, CLIENTRECT_CONTENT);
            xContentWidth = rcContent.Width();
        }
        else
        {
            // CDispScroller: 
            // TODO 15036: There is no CLIENTRECT_SCROLLABLECONTENT. consider adding.
            CDispInfo di;
            CalcDispInfo(g_Zero.rc, &di); // clip rect doesn't matter for content size
            xContentWidth = di._sizesContent.cx;
        }

        // content offset has to be positive - if content is wider than the node, 
        // something must be wrong. We can't assert it though, as it temporarily 
        // goes negative when sizes are set in particular order.
        eco._sizeOrigin.cx = max(0L, (long)(xContentWidth - xOffsetRTL));
    }
    
    *(CExtraContentOrigin*)GetExtra(DISPEX_CONTENTORIGIN) = eco;
}


#if DBG==1
//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::AssertCoords
//              
//  Synopsis:   Check correctness of coordinate system.
//              
//  Arguments:  pContext        display context
//              csFrom          current coordinate system
//              csTo            new coordinate system
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

void
CDispNode::AssertCoords(
        CDispTransform* pTransform,
        COORDINATE_SYSTEM csFrom,
        COORDINATE_SYSTEM csTo) const
{
    Assert(pTransform != NULL);
    CDispNode* pTrueParent = GetParentNode();
    AssertSz(
        pTrueParent == NULL ||
        (pTransform->_csDebug == csFrom && pTransform->_pNode == this) ||
        (csFrom == COORDSYS_TRANSFORMED &&
         pTransform->_pNode == pTrueParent &&
         pTransform->_csDebug == GetContentCoordinateSystem()),
        "Display Tree coordinate system screw up");
    pTransform->_csDebug = csTo;
    pTransform->_pNode = this;
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::VerifyRecalc
//              
//  Synopsis:   Verify that the recalc flag is set on this node and all nodes
//              on this branch from this node to the root.
//              
//  Arguments:  none
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

void
CDispNode::VerifyRecalc()
{
    VerifyFlagsToRoot(s_recalc);
    
    // check tree open state
    CDispRoot* pRoot = GetDispRoot();
    if (pRoot)
    {
        AssertSz(pRoot->_cOpen > 0,
            "Display Tree not properly opened before tree modification");
        AssertSz(!pRoot->_fDrawLock,
            "Display Tree RequestRecalc called during Draw");
    }
}

//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::DumpDisplayTree
//              
//  Synopsis:   Dump entire display tree.
//              
//----------------------------------------------------------------------------

void
CDispNode::DumpDisplayTree() const
{
    DumpTree();
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::DumpTree
//
//  Synopsis:   Dump the tree containing this node.
//
//  Arguments:  none (so it can be easily called from the debugger)
//
//  Notes:
//
//----------------------------------------------------------------------------

void
CDispNode::DumpTree() const
{
    CDispNode const* pRoot = GetRootNode();
    if (pRoot != NULL)
    {
        pRoot->DumpNode();
    }
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::DumpNode
//
//  Synopsis:   Dump the tree starting at this node.
//
//  Arguments:  none (so it can be easily called from the debugger)
//
//  Notes:
//
//----------------------------------------------------------------------------

void
CDispNode::DumpNode() const
{
    HANDLE hfile =
        CreateFile(_T("c:\\displaytree.xml"),
            GENERIC_WRITE,
            FILE_SHARE_WRITE | FILE_SHARE_READ,
            NULL,
            CREATE_ALWAYS,
            FILE_ATTRIBUTE_NORMAL,
            NULL);
    
#if 0  // we don't append to the dump file since we started dumping XML
    if (hfile != INVALID_HANDLE_VALUE)
    {
        SetFilePointer( hfile, GetFileSize( hfile, 0 ), 0, 0 );
    }
#endif

    if (hfile == INVALID_HANDLE_VALUE)
    {
        return;
    }

    DumpStart(hfile);
    Dump(hfile, 0, MAXLONG, 0);
    DumpEnd(hfile);

    CloseHandle(hfile);
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::DumpStart
//
//  Synopsis:   Start dump of display tree debug information.
//
//  Arguments:  hFile       handle to output file
//
//  Notes:
//
//----------------------------------------------------------------------------

void
CDispNode::DumpStart(HANDLE hfile) const
{
    WriteString(hfile, _T("<?xml version='1.0' encoding='windows-1252'?>\r\n")
                       _T("<?xml-stylesheet type='text/xsl' href='"));
    WriteString(hfile, _T("http://trident/dev/display/displaytree.xsl"));
    WriteString(hfile, _T("'?>\r\n")
                       _T("\r\n")
                       _T("<treedump>\r\n")
                       _T("\r\n"));
    
    WriteString(hfile, _T("<help>\r\n")
                       _T("The number of children is shown in parentheses after the class name of each node.\r\n")
                       _T("</help>\r\n")
                       _T("\r\n"));
    
    CDispNode const* pRoot = GetRootNode();
    if (pRoot->IsDispRoot())
    {
        CDispRoot const* pDispRoot = CDispRoot::Cast(pRoot);
        if (pDispRoot->_debugUrl)
        {
            WriteHelp(hfile, _T("<<file>\r\n<0s>\r\n<</file>\r\n\r\n"),
                (LPTSTR) *((CStr*)(pDispRoot->_debugUrl)));
        }
    }
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::DumpEnd
//
//  Synopsis:   Finish dumping tree debugging information.
//
//  Arguments:  hFile       handle to output file
//
//  Notes:
//
//----------------------------------------------------------------------------

void
CDispNode::DumpEnd(HANDLE hFile) const
{
    WriteString(hFile, _T("\r\n")
                       _T("</treedump>\r\n"));
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::Dump
//
//  Synopsis:   Dump debugging information for one node in the tree
//
//  Arguments:  hFile       file handle to dump to
//              level       tree depth at this node
//              maxLevel    max tree depth to dump
//              childNumber number of this child in parent list
//
//  Notes:
//
//----------------------------------------------------------------------------

void
CDispNode::Dump(HANDLE hFile, long level, long maxLevel, long childNumber) const
{
    WriteString(hFile, _T("<node>\r\n"));
    DumpNodeInfo(hFile, level, childNumber);
    DumpChildren(hFile, level, maxLevel, childNumber);
    WriteString(hFile, _T("</node>\r\n"));
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::DumpChildren
//
//  Synopsis:   Dump this node's children.
//
//  Arguments:  hFile       file handle to dump to
//              level       tree depth at this node
//              maxLevel    max tree depth to dump
//              childNumber number of this child in parent list
//
//  Notes:
//
//----------------------------------------------------------------------------

void
CDispNode::DumpChildren(HANDLE hFile, long level, long maxLevel, long childNumber) const
{
    // dump children
    if (level < maxLevel && IsParentNode())
    {
        long i = 0;
        for (CDispNode* pChild = AsParent()->_pFirstChild;
             pChild != NULL;
             pChild = pChild->_pNext)
        {
            pChild->Dump(hFile, level+1, maxLevel, i++);
        }
    }
}

//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::DumpNodeInfo
//
//  Synopsis:   Dump custom information for this node.
//
//  Arguments:  hFile       file handle to dump to
//              level       tree depth at this node
//              childNumber number of this child in parent list
//
//  Notes:      Nodes with extra information to display override this method.
//
//----------------------------------------------------------------------------

void
CDispNode::DumpNodeInfo(HANDLE hFile, long level, long childNumber) const
{
    WriteHelp(hFile, _T("<<class><0s><</class>\r\n"), ClassName());
    
    DumpContentInfo(hFile, level, childNumber);
    
    DumpFlags(hFile, level, childNumber);
    
    WriteHelp(hFile, _T("<<this><0x><</this>\r\n"), this);
    
    DumpBounds(hFile, level, childNumber);
    
    if (!IsFlowNode() && !IsStructureNode())
    {
        WriteHelp(hFile, _T("<<zindex><0d><</zindex>\r\n"), GetZOrder());
    }
    
    {
        CRect rcbBorderWidths;
        if (HasUserClip())
        {
            WriteString(hFile, _T("<rcUserClip>"));
            DumpRect(hFile, GetUserClip());
            WriteString(hFile, _T("</rcUserClip>\r\n"));
        }
        // WARNING (donmarsh) -- DON'T ADD USER TRANSFORM DATA HERE UNLESS
        // YOU EXTEND displaytree.xsl TO DISPLAY IT USING XML AND XSL.  TALK
        // TO Don Marsh IF YOU NEED ASSISTANCE.
        if (HasUserTransform())
        {
            WriteString(hFile, _T("<i>user transform</i>"));
        }
        if (HasContentOrigin())
        {
            CSize sizeOrigin = GetContentOrigin();
            WriteString(hFile, _T("<contentOrigin>"));
            DumpSize(hFile, sizeOrigin);
            WriteString(hFile, _T("</contentOrigin>\r\n"));
        }
        if (GetBorderType() == DISPNODEBORDER_SIMPLE)
        {
            GetBorderWidths(&rcbBorderWidths);
            WriteHelp(hFile, _T("<<border uniform='1'><0d><</border>\r\n"),
                      rcbBorderWidths.left);
        }
        else if (GetBorderType() == DISPNODEBORDER_COMPLEX)
        {
            GetBorderWidths(&rcbBorderWidths);
            WriteString(hFile, _T("<border>"));
            DumpRect(hFile, rcbBorderWidths);
            WriteString(hFile, _T("</border>\r\n"));
        }
        if (HasInset())
        {
            CSize sizebInset = GetInset();
            WriteString(hFile, _T("<inset>"));
            DumpSize(hFile, sizebInset);
            WriteString(hFile, _T("</inset>\r\n"));
        }
        if (HasExtraCookie())
        {
            WriteHelp(hFile, _T("<<extraCookie><0x><</extraCookie>\r\n"), (LONG)(LONG_PTR)GetExtraCookie());
        }
    }
    
    WriteHelp(hFile, _T("<<size><0d><</size>\r\n"), GetMemorySize());
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::DumpBounds
//
//  Synopsis:   Dump this node's bounding rect.
//
//  Arguments:  hFile       file handle to dump to
//              level       tree depth at this node
//              childNumber number of this child in parent list
//
//  Notes:
//
//----------------------------------------------------------------------------

void
CDispNode::DumpBounds(HANDLE hFile, long level, long childNumber) const
{
    // print bounds
    WriteString(hFile, _T("<rcVis>"));
    DumpRect(hFile, _rctBounds);
    WriteString(hFile, _T("</rcVis>\r\n"));
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::DumpFlags
//
//  Synopsis:   Dump this node's flags.
//
//  Arguments:  hFile       file handle to dump to
//              level       tree depth at this node
//              childNumber number of this child in parent list
//
//  Notes:
//
//----------------------------------------------------------------------------

void
CDispNode::DumpFlags(HANDLE hFile, long level, long childNumber) const
{
    WriteString(hFile, _T("<flags>"));
    if (MustRecalc())           WriteString(hFile, _T(" RECALC"));
    if (MustRecalcSubtree())    WriteString(hFile, _T(" RECALCSUBTREE"));
    if (!IsStructureNode() && IsOwned())
                                WriteString(hFile, _T(" OWNED"));
    
    // general flags
    switch (GetLayer())
    {
    case s_layerNegZ:
        WriteString(hFile, _T(" -z"));
        break;
    case s_layerFlow:
        WriteString(hFile, _T(" flow"));
        break;
    case s_layerPosZ:
        WriteString(hFile, _T(" +z"));
        break;
    default:
        WriteHelp(hFile, _T("<<b>ILLEGAL LAYER: <0d><</b>"), GetLayer());
        break;
    }

    if (HasUserTransform())     WriteString(hFile, _T(" userTransform"));
    
    if (!AffectsScrollBounds()) WriteString(hFile, _T(" !affectsScrollBounds"));
    if (!IsVisible())           WriteString(hFile, _T(" invisible"));
    if (HasBackground())        WriteString(hFile, _T(" hasBackground"));
    if (IsSet(s_hasWindowTop))  WriteString(hFile, _T(" hasWindowTop"));
    if (IsSet(s_advanced))      WriteString(hFile, _T(" advanced"));
    if (IsSet(s_savedRedrawRegion))
                                WriteString(hFile, _T(" savedRedrawRegion"));
    if (IsInvalid())            WriteString(hFile, _T(" inval"));
    if (IsOpaque())             WriteString(hFile, _T(" opaque"));
    if (IsDrawnExternally())    WriteString(hFile, _T("<b><i> drawnExternally</i></b>"));

    // leaf flags
    if (IsLeafNode())
    {
        if (PositionChanged())  WriteString(hFile, _T(" positionChanged"));
        if (IsSet(s_notifyNewInsertion))
                                WriteString(hFile, _T(" notifyInsert"));
    }

    // parent flags
    else
    {
        if (HasFixedBackground())
                                WriteString(hFile, _T(" fixedBkgnd"));
    }

    // propagated flags
    if (!IsInView())            WriteString(hFile, _T(" !inView"));
    if (!IsVisibleBranch())     WriteString(hFile, _T(" invisibleBranch"));
    if (IsOpaqueBranch())       WriteString(hFile, _T(" opaqueBranch"));
    if (IsPositionAware())      WriteString(hFile, _T(" positionAware"));
    if (IsInViewAware())        WriteString(hFile, _T(" inViewAware"));
    
    WriteString(hFile, _T("</flags>\r\n"));
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::Info
//              
//  Synopsis:   Dump interesting info to debug output window.
//              
//  Arguments:  
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

void
CDispNode::Info() const
{
    OutputDebugString(ClassName());
    
    OutputDebugStringA("\n basic flags: ");
    if (IsParentNode())         OutputDebugStringA("PARENT ");
    if (IsStructureNode())      OutputDebugStringA("STRUCTURE ");
    if (!IsStructureNode() && IsOwned())
                                OutputDebugStringA("OWNED ");
    if (IsNewInsertion())       OutputDebugStringA("NEWINSERT ");
    if (IsParentNode() && ChildrenChanged())
                                OutputDebugStringA("CHILDRENCHANGED ");
    if (MustRecalc())           OutputDebugStringA("RECALC ");
    if (MustRecalcSubtree())    OutputDebugStringA("RECALCSUBTREE ");
    if (IsStructureNode() && MustRebalance())
                                OutputDebugStringA("REBALANCE ");
    OutputDebugStringA("\n");
    
    OutputDebugStringA(" display flags: ");
    switch (GetLayer())
    {
    case s_layerNegZ:   OutputDebugStringA("-z ");      break;
    case s_layerFlow:   OutputDebugStringA("flow ");    break;
    case s_layerPosZ:   OutputDebugStringA("+z ");      break;
    default:            OutputDebugStringA("ILLEGAL LAYER "); break;
    }
    
    if (HasUserTransform())         OutputDebugStringA("userTransform ");
    
    if (IsVisible())                OutputDebugStringA("visibleNode ");
    if (HasBackground())            OutputDebugStringA("hasBackground ");
    if (IsSet(s_hasWindowTop))      OutputDebugStringA("hasWindowTop ");
    if (IsSet(s_advanced))          OutputDebugStringA("advanced ");
    if (IsOpaque())                 OutputDebugStringA("opaqueNode ");
    if (!AffectsScrollBounds())     OutputDebugStringA("!noScrollBounds ");
    if (IsDrawnExternally())        OutputDebugStringA("drawnExternally ");
    if (HasUserClip())              OutputDebugStringA("hasUserClip ");
    if (IsSet(s_fatHitTest))        OutputDebugStringA("fatHitTest ");
    if (IsSet(s_savedRedrawRegion)) OutputDebugStringA("savedRedrawRegion ");
    if (IsInView())                 OutputDebugStringA("inView ");
    if (IsVisibleBranch())          OutputDebugStringA("visibleBranch ");
    if (IsOpaqueBranch())           OutputDebugStringA("opaqueBranch ");
    if (IsPositionAware())          OutputDebugStringA("notifyPositionChange ");
    if (IsInViewAware())            OutputDebugStringA("notifyInViewChange ");
    if (IsLeafNode())
    {
        if (PositionChanged())      OutputDebugStringA("positionChanged ");
        if (IsInsertionAware())     OutputDebugStringA("notifyNewInsertion ");
    }
    else
    {
        if (HasFixedBackground())   OutputDebugStringA("fixedBackground ");
    }
    
    if (HasUserTransform())
    {
        _TCHAR buf[1024];
        OutputDebugStringA("\nUser Transform:\n");
        const CDispTransform& transform = GetUserTransform();
        if (transform.IsOffsetOnly())
        {
            const CSize& offset = transform.GetOffsetOnly();
            wsprintf(buf, __T("translate: %d,%d"), offset.cx, offset.cy);
            OutputDebugString(buf); 
        }
        else
        {
            const MAT& m = transform.GetWorldTransform()->GetMatrix();
            wsprintf(buf, __T("mat (*100): %d,%d | %d,%d | %d,%d\n"),
                     (int)(m.eM11*100), (int)(m.eM12*100),
                     (int)(m.eM21*100), (int)(m.eM22*100),
                     (int)(m.eDx*100), (int)(m.eDy*100));
            OutputDebugString(buf); 
            const MAT& r = transform.GetWorldTransform()->GetMatrixInverse();
            wsprintf(buf, __T("inv (*100): %d,%d | %d,%d | %d,%d"),
                     (int)(r.eM11*100), (int)(r.eM12*100),
                     (int)(r.eM21*100), (int)(r.eM22*100),
                     (int)(r.eDx*100), (int)(r.eDy*100));
            OutputDebugString(buf); 
        }
    }
    
    OutputDebugStringA("\n\n");
}


//+---------------------------------------------------------------------------
//
//  Class:      CShowExtras
//              
//  Synopsis:   Visualize extras for debugging purposes.
//              See CDispNode::ShowExtras()
//              
//----------------------------------------------------------------------------

class CShowExtras
{
public:
    LONG*                     _pSimpleBorderWidth;
    CRect*                    _pComplexBorder;
    CSize*                    _pInset;
    CUserClipAndExpandedClip* _pUserClip;
    void**                    _pExtraCookie;
    CExtraTransform*          _pExtraTransform;
    CExtraContentOrigin*      _pExtraContentOrigin;

    // force linker keep dbg methods that are not referenced anywhere else
    CShowExtras(CDispNode* p) {if (p) p->ShowExtras(), p->Info();}
};

CShowExtras g_ShowExtras(0);

//+---------------------------------------------------------------------------
//
//  Member:     CDispNode::ShowExtras
//              
//  Synopsis:   Visualize extras in MSVC debugger.
//              Usage: just drag ShowExtras() into watch window
//              and see pointers to real extras of "this" CDispNode
//              (or zeros if corresponding extras don't present).
//              
//----------------------------------------------------------------------------

CShowExtras const* CDispNode::ShowExtras() const
{
    g_ShowExtras._pSimpleBorderWidth  = HasExtra(DISPEX_SIMPLEBORDER ) ? (LONG*                    )GetExtra(DISPEX_SIMPLEBORDER ) : 0;
    g_ShowExtras._pComplexBorder      = HasExtra(DISPEX_COMPLEXBORDER) ? (CRect*                   )GetExtra(DISPEX_COMPLEXBORDER) : 0;
    g_ShowExtras._pInset              = HasExtra(DISPEX_INSET        ) ? (CSize*                   )GetExtra(DISPEX_INSET        ) : 0;
    g_ShowExtras._pUserClip           = HasExtra(DISPEX_USERCLIP     ) ? (CUserClipAndExpandedClip*)GetExtra(DISPEX_USERCLIP     ) : 0;
    g_ShowExtras._pExtraCookie        = HasExtra(DISPEX_EXTRACOOKIE  ) ? (void**                   )GetExtra(DISPEX_EXTRACOOKIE  ) : 0;
    g_ShowExtras._pExtraTransform     = HasExtra(DISPEX_USERTRANSFORM) ? (CExtraTransform*         )GetExtra(DISPEX_USERTRANSFORM) : 0;
    g_ShowExtras._pExtraContentOrigin = HasExtra(DISPEX_CONTENTORIGIN) ? (CExtraContentOrigin*     )GetExtra(DISPEX_CONTENTORIGIN) : 0;
    return &g_ShowExtras;
}

#endif

void CDispNode::SetUserTransform(const CDispTransform *pUserTransform)
{
    GetExtraTransform()->_transform = *pUserTransform;
    InvalidateAndRecalcSubtree();
}

void CDispNode::SetInset(const SIZE& sizebInset)
{
    *(CSize*)GetExtra(DISPEX_INSET) = sizebInset;
    InvalidateAndRecalcSubtree();
}

DISPNODEBORDER CDispNode::GetBorderType() const
{
    return HasExtra(DISPEX_SIMPLEBORDER ) ? DISPNODEBORDER_SIMPLE
         : HasExtra(DISPEX_COMPLEXBORDER) ? DISPNODEBORDER_COMPLEX
         :                                  DISPNODEBORDER_NONE;
}
    
void CDispNode::GetBorderWidths(CRect* prcbBorderWidths) const
{
    if (HasExtra(DISPEX_SIMPLEBORDER))
    {
        long c = *((long*)GetExtra(DISPEX_SIMPLEBORDER));
        prcbBorderWidths->SetRect(c);
    }
    else if (HasExtra(DISPEX_COMPLEXBORDER))
        *prcbBorderWidths = *((CRect*)GetExtra(DISPEX_COMPLEXBORDER));
    else
        *prcbBorderWidths = g_Zero.rc;
}

void CDispNode::SetBorderWidths(LONG borderWidth)
{
    *(LONG*)GetExtra(DISPEX_SIMPLEBORDER) = borderWidth;
    InvalidateAndRecalcSubtree();
}

void CDispNode::SetBorderWidths(const CRect& rcbBorderWidths)
{
    *(CRect*)GetExtra(DISPEX_COMPLEXBORDER) =  rcbBorderWidths;
    InvalidateAndRecalcSubtree();
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\display\disproot.cxx ===
//+---------------------------------------------------------------------------
//
//  Microsoft Internet Explorer
//  Copyright (C) Microsoft Corporation, 1997-1998
//
//  File:       disproot.cxx
//
//  Contents:   Parent node at the root of a display tree.
//
//  Classes:    CDispRoot
//
//----------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_DISPROOT_HXX_
#define X_DISPROOT_HXX_
#include "disproot.hxx"
#endif

#ifndef X_DEBUGPAINT_HXX_
#define X_DEBUGPAINT_HXX_
#include "debugpaint.hxx"
#endif

#ifndef X_DISPCLIENT_HXX_
#define X_DISPCLIENT_HXX_
#include "dispclient.hxx"
#endif

#ifndef X_DISPINFO_HXX_
#define X_DISPINFO_HXX_
#include "dispinfo.hxx"
#endif

MtDefine(DisplayTree, Mem, "DisplayTree")
MtDefine(CDispRoot, DisplayTree, "CDispRoot")
MtDefine(CDispRoot_aryDispNode_pv, DisplayTree, "CDispRoot_aryDispNode")
MtDefine(CDispRoot_aryWTopScroller_pv, DisplayTree, "CDispRoot_aryWTopScroller")
MtDefine(CDispRoot_aryObscure_pv, DisplayTree, "CDispRoot_aryObscure")

DeclareTag(tagDisplayTreeOpen, "Display", "trace Open/Close");
DeclareTag(tagDisplayTreeOpenStack,   "Display: TreeOpen stack",   "Stack trace for each OpenDisplayTree")
DeclareTag(tagObscure,   "Display",   "trace obscured list")

#if DBG==1
void
CDispRoot::OpenDisplayTree()
{
#ifndef VSTUDIO7
    CheckReenter();
#endif //VSTUDIO7
    _cOpen++;

    TraceTag((tagDisplayTreeOpen, "TID:%x %x root +%d", GetCurrentThreadId(), this, _cOpen));
    TraceTag((tagDisplayTreeOpenStack, "\n***** OpenDisplayTree call stack:"));
    TraceCallers(tagDisplayTreeOpenStack, 0, 10);

    if (_cOpen == 1)
    {
        // on first open, none of these flags should be set
        VerifyFlags(s_flagsNotSetInDraw, 0, TRUE);
    }
}

void
CDispRoot::CloseDisplayTree(CDispRecalcContext* pContext)
{
#ifndef VSTUDIO7
    CheckReenter();
#endif //VSTUDIO7
    Assert(_cOpen > 0 && !IsInRecalc());
    TraceTag((tagDisplayTreeOpen, "TID:%x %x root -%d", GetCurrentThreadId(), this, _cOpen));
    if (_cOpen == 1)
    {
        RecalcRoot(pContext);
        
        // after recalc, no recalc flags should be set
        VerifyFlags(s_flagsNotSetInDraw, 0, TRUE);
    }
    _cOpen--;
}
#endif

//+---------------------------------------------------------------------------
//
//  Member:     CDispRoot::CDispRoot
//
//  Synopsis:   Constructor.
//
//  Arguments:  pObserver       display tree observer
//              pDispClient     display client
//
//  Notes:
//
//----------------------------------------------------------------------------

CDispRoot::CDispRoot(
        CDispObserver* pObserver,
        CDispClient* pDispClient)
    : CDispScroller(pDispClient)
{
    SetFlags(s_visibleBranch | s_visibleNode | s_opaqueBranch | s_opaqueNode | s_inView);
    _pDispObserver = pObserver;
    _pOverlaySink = NULL;
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispRoot::~CDispRoot
//
//  Synopsis:   Destructor
//
//----------------------------------------------------------------------------


CDispRoot::~CDispRoot()
{
    AssertSz(!_fDrawLock, "Illegal call to CDispRoot inside Draw()");
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispRoot::Unload
//
//  Synopsis:   Unload the tree (called by CView::Unload)
//
//----------------------------------------------------------------------------

void
CDispRoot::Unload()
{
    CDispNode * pDispNode;

    ClearWindowTopList();
    ClearOverlayList();
    
    Assert(CountChildren() <= 1);

    pDispNode = GetFirstChildNode();

    if (pDispNode)
    {
        pDispNode->ExtractFromTree();
    }
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispRoot::ExtractNode
//
//  Synopsis:   Remove the given node from the tree
//
//----------------------------------------------------------------------------

void
CDispRoot::ExtractNode(CDispNode *pDispNode)
{
    // if the node is in the tree, remove its descendants from the special lists
    if (pDispNode->_pParent)
    {
        if (_aryDispNodeWindowTop.Size() > 0)
        {
            ScrubWindowTopList(pDispNode);
        }

        if (_aryDispNodeOverlay.Size() > 0)
        {
            ScrubOverlayList(pDispNode);
        }
    }

    pDispNode->ExtractFromTree();
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispRoot::ExtractNodes
//
//  Synopsis:   Removes several nodes from the tree
//
//----------------------------------------------------------------------------

void
CDispRoot::ExtractNodes(CDispNode *pDispNodeStart, CDispNode *pDispNodeStop)
{
    // all tree extractions must clean up the special lists
    if (pDispNodeStart->GetParentNode() &&
        (_aryDispNodeWindowTop.Size() > 0 ||
         _aryDispNodeOverlay.Size() > 0))
    {
        // for each node between the start and stop
        for (   CDispNode* pNode = pDispNodeStart;
                (_aryDispNodeWindowTop.Size() > 0 ||
                 _aryDispNodeOverlay.Size() > 0)
                 && pNode != 0;
                pNode = pNode->GetNextSiblingNode()
            )
        {
            // clean up current node (and its descendants)
            ScrubWindowTopList(pNode);
            ScrubOverlayList(pNode);

            // if we're reached the stop node, we're done
            if (pNode == pDispNodeStop)
            {
                break;
            }
        }
    }

    // now do the real extraction
    ExtractOrDestroyNodes(pDispNodeStart, pDispNodeStop);
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispRoot::DrawRoot
//
//  Synopsis:   Draw this display tree.
//
//  Arguments:  pContext        draw context
//              pClientData     client data used by clients in DrawClient
//              hrgngDraw       region to draw in destination coordinates
//              prcgDraw        rect to draw in destination coordinates
//
//  Notes:      if hrgngDraw and prcgDraw are both NULL, the bounding rect of
//              this root node is used
//
//----------------------------------------------------------------------------

void
CDispRoot::DrawRoot(
        CDispSurface* pRenderSurface,
        CDispSurface* pOffscreenBuffer,
        CDispDrawContext* pContext,
        void* pClientData,
        HRGN hrgngDraw,
        const RECT* prcgDraw)
{
    AssertSz(!_fDrawLock, "Illegal call to DrawRoot inside Draw()");
    AssertSz(_cOpen == 0, "DrawRoot called while Display Tree is open");
    Assert(pRenderSurface != NULL);
    Assert(!IsAnySet(s_flagsNotSetInDraw));

    pContext->SetRootNode(this);
    pContext->SetDispSurface(pRenderSurface);

    // set redraw region (will become a rect if possible)
    CRegion rgngRedraw;
    CRect rcContainerTransformed;
    pContext->GetClipTransform()
             .NoClip()
             .GetWorldTransform()
            ->GetBoundingRectAfterTransform(&_rcpContainer,
                                            &rcContainerTransformed,
                                            TRUE);
    if (hrgngDraw != NULL)
    {
        rgngRedraw = hrgngDraw;
        rgngRedraw.Intersect(rcContainerTransformed);
    }
    else if (prcgDraw != NULL)
    {
        rgngRedraw = *prcgDraw;
        rgngRedraw.Intersect(rcContainerTransformed);
    }
    else
    {
        rgngRedraw = rcContainerTransformed;
    }
    
#if DBG==1
    CRegionRects debugHrgn(hrgngDraw);
    CRegionRects debugRedraw(rgngRedraw);

    // show invalid area for debugging

        CDebugPaint::ShowPaint(
            NULL, rgngRedraw.GetRegionForLook(), pRenderSurface->GetRawDC(),
            tagPaintShow, tagPaintPause, tagPaintWait, TRUE);
#endif

    // check for early exit conditions
    if (!rgngRedraw.Intersects(_rcpContainer))
        return;
    
    // set initial context values
    pContext->SetClientData(pClientData);
    pContext->SetFirstDrawNode(NULL);
    pContext->SetRedrawRegion(&rgngRedraw);

    // NOTE (donmarsh) -- this is a little ugly, but _rctBounds
    // for CDispRoot must be zero-based, because it is transformed by the
    // offset in CDispNode::Draw, and if _rctBounds == _rcpContainer like
    // one would expect, _rctBounds gets transformed twice.
    _rctBounds.MoveToOrigin();

    // DrawRoot does not allow recursion
    _fDrawLock = TRUE;

    // don't worry about return value of TransformedToBoxCoords, because we
    // don't expect the root to have user clip specified
    Assert(!HasUserClip());
    TransformedToBoxCoords(&pContext->GetClipTransform());
    
    // calculate rect inside border and scrollbars
    CSize sizeInsideBorder;
    GetSizeInsideBorder(&sizeInsideBorder);
    CRect rcgInsideBorder(_rcpContainer.TopLeft(), sizeInsideBorder);
    
    // speed optimization: draw border and scroll bars
    // without buffering or banding, then subtract them from the redraw
    // region.
    if (IsVisible())
    {
        CRect rcgClip;
        rgngRedraw.GetBounds(&rcgClip);
        
        CRegion rgngClip(rcgClip);
        pRenderSurface->SetClipRgn(&rgngClip);
        
        // draw borders for clipping nodes near the top of the tree, and remove
        // the border areas from the redraw region
        {
            CSaveDispClipTransform saveTransform(pContext);
            Assert(IsClipNode());
            CDispClipNode::Cast(this)->DrawUnbufferedBorder(pContext);
        }
        
        pRenderSurface->SetClipRgn(NULL);

        // restore clipping on destination surface to redraw region
        // (this is important when we're using filters and we have a
        // direct draw surface)
        rgngRedraw.SelectClipRgn(pRenderSurface->GetRawDC());
        
        // early exit if all we needed to draw was the border and scroll bars
        if (rgngRedraw.IsEmpty())
            goto Cleanup;
    }

    // early exit if all we needed to draw was the border and scroll bars
    if (!rcgInsideBorder.IsEmpty())
    {
        // save the initial state, to be used in the window-top pass
        CDispClipTransform transformInitial = pContext->GetClipTransform();

        // allocate stacks for redraw regions and transforms
        CRegionStack redrawRegionStack;
        pContext->SetRedrawRegionStack(&redrawRegionStack);
        CDispTransformStack transformStack;
        pContext->SetTransformStack(&transformStack);

        // PreDraw pass processes the tree from highest layer to lowest,
        // culling layers beneath opaque layers, and identifying the lowest
        // opaque layer which needs to be rendered during the Draw pass
        PreDraw(pContext);
        pContext->SetClipTransform(transformInitial);
        
        // the redraw region will always be empty, because we should subtract
        // the root from it if nothing else
        Assert(pContext->GetRedrawRegion()->IsEmpty());
        delete pContext->GetRedrawRegion();
        // we shouldn't reference this redraw region again
        WHEN_DBG(pContext->SetRedrawRegion(NULL);)

        if (pContext->GetFirstDrawNode() == NULL)
        {
            pContext->SetFirstDrawNode(this);
        }
        else
        {
            AssertSz(redrawRegionStack.MoreToPop(), "Mysterious redraw region stack bug!");
            transformStack.Restore();
        }


        if (pOffscreenBuffer == NULL)
        {
            DrawEntire(pContext);
        }
        else if (pOffscreenBuffer->Height() >= rcgInsideBorder.Height())
        {
#if DBG == 1
            {
                HDC hdc = pOffscreenBuffer->GetRawDC();
                HBRUSH hbr = CreateSolidBrush(RGB(0, 255, 0));
                CRect rc(-10000, -10000, 20000, 20000);
                FillRect(hdc, &rc, hbr);
                DeleteObject(hbr);
            }
#endif

            pContext->SetDispSurface(pOffscreenBuffer);
            DrawEntire(pContext);
            pOffscreenBuffer->Draw(pRenderSurface, rcgInsideBorder);
        }
        else
        {
            pContext->SetDispSurface(pOffscreenBuffer);
            DrawBands(
                pRenderSurface,
                pOffscreenBuffer,
                pContext,
                &rgngRedraw,
                redrawRegionStack,
                rcgInsideBorder);
        }

        // delete all regions except the first
        redrawRegionStack.DeleteStack(&rgngRedraw);
    
#if DBG==1
        // make sure we didn't lose any nodes that were marked with
        // savedRedrawRegion
        VerifyFlags(s_savedRedrawRegion, 0, TRUE);
#endif

        pContext->SetClientData(NULL);
    }

Cleanup:
    // NOTE (donmarsh) -- restore _rctBounds to coincide with _rcpContainer
    _rctBounds = _rcpContainer;

    _fDrawLock = FALSE;
}

//+---------------------------------------------------------------------------
//
//  Member:     CDispRoot::DrawWindowTopNodes
//
//  Synopsis:   Draw the nodes on the window-top list
//
//  Arguments:  pContext        draw context
//
//  Notes:      
//
//----------------------------------------------------------------------------

void
CDispRoot::DrawWindowTopNodes(CDispDrawContext* pContext)
{
    if (_aryDispNodeWindowTop.Size() > 0)
    {
        int i = _aryDispNodeWindowTop.Size();
        CDispNode **ppDispNode = &_aryDispNodeWindowTop[0];

        for ( ; i > 0; --i, ++ppDispNode)
        {
            Assert((*ppDispNode)->GetDispRoot() == this);
            (*ppDispNode)->DrawAtWindowTop(pContext);
        }
    }
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispRoot::DrawEntire
//
//  Synopsis:   Draw the display tree in one pass, starting at the top node
//              in the saved redraw region array.
//
//  Arguments:  pContext        draw context
//
//  Notes:      
//
//----------------------------------------------------------------------------

void
CDispRoot::DrawEntire(CDispDrawContext* pContext)
{
    CDispClipTransform transformSave;

    // if there are window-top nodes, we'll need the original context later
    if (_aryDispNodeWindowTop.Size() > 0)
    {
        transformSave = pContext->GetClipTransform();
    }

    // pop first node and redraw region
    CDispNode* pDrawNode = (CDispNode*) pContext->PopFirstRedrawRegion();
    
    Assert(pDrawNode == pContext->GetFirstDrawNode());

    // we better have the correct context ready for the parent node
    Assert(pDrawNode != NULL &&
           (pDrawNode->GetRawParentNode() == NULL ||
            pContext->GetTransformStack()->GetTopNode() == pDrawNode->GetRawParentNode()));
    
    MarkSavedRedrawBranches(*pContext->GetRedrawRegionStack(), TRUE);
    
    while (pDrawNode != NULL)
    {
        // get context (clip rect and offset) for parent node
        CDispNode* pParent = pDrawNode->GetRawParentNode();
        
        if (pParent == NULL)
        {
            pParent = this;
            pDrawNode = NULL;
        }
        else if (!pContext->PopTransform(pParent))
        {
            pContext->FillTransformStack(pDrawNode);
            Verify(pContext->PopTransform(pParent));
        }

        // draw children of this parent node, starting with this child
        pParent->Draw(pContext, pDrawNode, FILTER_DRAW_ALLLAYERS);

        // find next node to the right of the parent node
        for (;;)
        {
            pDrawNode = pParent->_pNext;
            if (pDrawNode != NULL)
                break;
            pParent = pParent->GetRawParentNode();
            if (pParent == NULL)
                break;
            
            // this parent node should not have saved context information
            Assert(pContext->GetTransformStack()->GetTopNode() != pParent);
        }
    }

    MarkSavedRedrawBranches(*pContext->GetRedrawRegionStack(), FALSE);

    // stacks should now be empty
    Assert(!pContext->GetTransformStack()->MoreToPop());
    Assert(!pContext->GetRedrawRegionStack()->MoreToPop());

    // draw the window-top nodes
    if (_aryDispNodeWindowTop.Size() > 0)
    {
        pContext->SetClipTransform(transformSave);
        DrawWindowTopNodes(pContext);
    }
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispRoot::DrawBand
//
//  Synopsis:   Draw one band using the display tree, starting at the top node
//              in the saved redraw region array.
//
//  Arguments:  pContext        draw context
//
//  Notes:
//
//----------------------------------------------------------------------------

void
CDispRoot::DrawBands(
        CDispSurface* pRenderSurface,
        CDispSurface* pOffscreenBuffer,
        CDispDrawContext* pContext,
        CRegion* prgngRedraw,
        const CRegionStack& redrawRegionStack,
        const CRect& rcgInsideBorder)
{
    Assert(pOffscreenBuffer);

    if(!pContext)
        return;

    long height = min(rcgInsideBorder.Height(), pOffscreenBuffer->Height());
    while (!prgngRedraw->IsEmpty())
    {
        // compute next banding rectangle
        CRect rcgBand;
        prgngRedraw->GetBounds(&rcgBand);
        rcgBand.left = rcgInsideBorder.left;
        rcgBand.right = rcgInsideBorder.right;
        rcgBand.bottom = rcgBand.top + height;
        if (rcgBand.bottom > rcgInsideBorder.bottom)
        {
            rcgBand.bottom = rcgInsideBorder.bottom;
        }
        
        // NOTE (donmarsh) -- for some reason, we're getting here occasionally
        // with an empty rcBand.  At one time, this could be caused by
        // pOffscreenBuffer->Height() returning zero.  I don't believe that
        // is possible any more.  However, something is happening, and we have
        // to check for it, or we will go into an infinite loop.
        Assert(height > 0 && pOffscreenBuffer->Height() > 0);
        Assert(!rcgBand.IsEmpty());
        Assert(prgngRedraw->Intersects(rcgBand));
        if (rcgBand.bottom <= rcgBand.top || !prgngRedraw->Intersects(rcgBand))
            break;
        
        // clip regions in redraw region stack to this band
        CRegionStack clippedRedrawRegionStack(redrawRegionStack, rcgBand);
        
        if (clippedRedrawRegionStack.MoreToPop())
        {
            pContext->SetRedrawRegionStack(&clippedRedrawRegionStack);
    
#if DBG==1
            // show invalid area for debugging
            CRect rcDebug(0,0,_rcpContainer.Width(), height);
            CDebugPaint::ShowPaint(
                &rcDebug, NULL,
                pContext->GetRawDC(),
                tagPaintShow, tagPaintPause, tagPaintWait, TRUE);

            {
                HDC hdc = pOffscreenBuffer->GetRawDC();
                HBRUSH hbr = CreateSolidBrush(RGB(0, 255, 0));
                CRect rc(-10000, -10000, 20000, 20000);
                FillRect(hdc, &rc, hbr);
                DeleteObject(hbr);
            }
#endif
            
            // draw contents of this band
            MarkSavedRedrawBranches(clippedRedrawRegionStack, TRUE);
            DrawBand(pContext, rcgBand);
            MarkSavedRedrawBranches(clippedRedrawRegionStack, FALSE);

            // draw offscreen buffer to destination
            pOffscreenBuffer->Draw(pRenderSurface, rcgBand);
            
            // discard clipped regions
            clippedRedrawRegionStack.DeleteStack();
        }
        
        // remove band from redraw region
        prgngRedraw->Subtract(rcgBand);
    }
}

void
CDispRoot::DrawBand(CDispDrawContext* pContext, const CRect& rcgBand)
{
    if(!pContext)
        return;

    CSaveDispClipTransform transformSave(pContext);
    CDispClipTransform transformSaveForWindowTop;

    // add band offset to transform
    pContext->AddPostOffset(-rcgBand.TopLeft().AsSize());

    // if there are window-top nodes, we'll need the original context later
    if (_aryDispNodeWindowTop.Size() > 0)
    {
        transformSaveForWindowTop = pContext->GetClipTransform();
    }
    
    // pop first node and redraw region
    CDispNode* pDrawNode = (CDispNode*) pContext->PopFirstRedrawRegion();

    // create a new transform stack that will incorporate the new band offset
    CDispTransformStack transformStack;
    pContext->SetTransformStack(&transformStack);

    while (pDrawNode != NULL)
    {
        // get context (clip rect and offset) for parent node
        CDispNode* pParent = pDrawNode->GetRawParentNode();
        if (pParent == NULL)
        {
            pParent = this;
            pDrawNode = NULL;
        }
        else if (!pContext->PopTransform(pParent))
        {
            pContext->FillTransformStack(pDrawNode);
            Verify(pContext->PopTransform(pParent));
        }

        // draw children of this parent node, starting with this child
        pParent->Draw(pContext, pDrawNode, FILTER_DRAW_ALLLAYERS);

        // find next node to the right of the parent node
        for (;;)
        {
            pDrawNode = pParent->_pNext;
            if (pDrawNode != NULL)
                break;
            pParent = pParent->GetRawParentNode();
            if (pParent == NULL)
                break;

            // this parent node should not have saved transform information
            Assert(pContext->GetTransformStack()->GetTopNode() != pParent);
        }
    }

    // stacks should now be empty
    Assert(!pContext->GetTransformStack()->MoreToPop());
    Assert(!pContext->GetRedrawRegionStack()->MoreToPop());

    // draw the window-top nodes
    if (_aryDispNodeWindowTop.Size() > 0)
    {
        pContext->SetClipTransform(transformSaveForWindowTop);
        DrawWindowTopNodes(pContext);
    }
}


void
CDispRoot::MarkSavedRedrawBranches(const CRegionStack& regionStack, BOOL fSet)
{
    for (int i = 0; i < regionStack.Size(); i++)
    {
        CDispNode* pNode = (CDispNode*) regionStack.GetKey(i);
        if (fSet)
            pNode->SetFlagsToRoot(s_savedRedrawRegion);
        else
            pNode->ClearFlagsToRoot(s_savedRedrawRegion);
    }
}

//+---------------------------------------------------------------------------
//
//  Member:     CDispRoot::DrawNode
//
//  Synopsis:   Draw the display tree rooted at the given display node on
//              an HDC supplied by external entity.
//              Used for trans. filters and external printing
//              Called by CView::RenderElement
//
//  Arguments:  
//              pNode           node to draw
//              pSurface        drawinf surface
//              pContext        drawing context
//
//  Notes:      
//
//----------------------------------------------------------------------------

void
CDispRoot::DrawNode(
        CDispNode* pNode,
        CDispSurface *pSurface,
        CDispDrawContext *pContext,
        long lDrawLayers)
{
    // DrawRoot does not allow recursion
    AssertSz(!_fDrawLock, "Illegal call to DrawNodeLayer inside Draw()");
    AssertSz(_cOpen == 0, "DrawNodeLayer called while Display Tree is open");
    Assert(pNode && pSurface && pContext);

    if(!pNode || !pContext)
        return;


#if DBG==1
    // shouldn't be here with a tree needing recalc
    VerifyFlags(s_flagsNotSetInDraw, 0, TRUE);
#endif

    _fDrawLock = TRUE;

    // TODO (donmarsh) -- for ultimate performance, we should set things up
    // like DrawRoot in order to do a PreDraw pass on the children belonging to
    // the indicated layer.  However, this is complicated by the fact that we
    // may begin drawing at an arbitrary node deep in the tree below this node,
    // and we have to be sure not to draw any nodes above this node.
    // DrawEntire, which we would like to
    // use to accomplish this, does not stop drawing until it has drawn all
    // layers in all nodes all the way to the root.  For now, we do the simple
    // thing, and just draw all of our children,
    // ignoring the opaque optimizations of PreDraw.

    // allocate stacks for redraw regions and transforms
    CRegionStack redrawRegionStack;
    pContext->SetRedrawRegionStack(&redrawRegionStack);
    CDispTransformStack transformStack;
    pContext->SetTransformStack(&transformStack);

    pContext->SetDispSurface(pSurface);

#if DBG==1
    pContext->GetClipTransform().NoClip()._csDebug = COORDSYS_TRANSFORMED;
    pContext->GetClipTransform().NoClip()._pNode = pNode;
#endif

    pNode->Draw(pContext, NULL, lDrawLayers);

    _fDrawLock = FALSE;

}


//+---------------------------------------------------------------------------
//
//  Member:     CDispRoot::SetSize
//
//  Synopsis:   Set the size of the root container.
//
//  Arguments:  sizep               new size
//              fInvalidateAll      TRUE if entire area should be invalidated
//
//  Notes:
//
//----------------------------------------------------------------------------

void
CDispRoot::SetSize(const CSize& sizep, const CRect *prcpMapped, BOOL fInvalidateAll)
{
    AssertSz(!_fDrawLock, "Illegal call to CDispRoot::SetSize inside Draw()");
    super::SetSize(sizep, prcpMapped, fInvalidateAll);
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispRoot::SetContentOffset
//              
//  Synopsis:   Set an offset that shifts displayed content (used by printing
//              to effectively scroll content between pages).
//              
//  Arguments:  sizesOffset     offset amount, where positive values display
//                              content farther to the right and bottom
//                              
//  Returns:    TRUE if the content offset amount was successfully set.
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

BOOL
CDispRoot::SetContentOffset(const SIZE& sizesOffset)
{
    AssertSz(_cOpen == 1, "Display Tree: Unexpected call to SetContentOffset");
    
    _sizeScrollOffset = -(CSize&)sizesOffset;
    CDispParentNode::CalculateInView(this);
    
    return TRUE;
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispRoot::RecalcRoot
//              
//  Synopsis:   Recalculate this tree's cached state.
//              
//  Arguments:  pContext    recalc context
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

void
CDispRoot::RecalcRoot(CDispRecalcContext* pContext)
{
    AssertSz(_cOpen == 1, "Display Tree: Unexpected call to RecalcRoot");
#ifndef VSTUDIO7
    AssertSz(!_fDrawLock, "Illegal call to RecalcRoot inside Draw()");
#endif //VSTUDIO7

    if (MustRecalc())
    {
        ULONG cObscuringElements  = _cObscuringElements;
        ULONG cObscurableElements = _cObscurableElements;
        BOOL fWasObscuringPossible = IsObscuringPossible();

        pContext->SetRootNode(this);
        
        // recalc everything if root size changed, or obscuring might occur
        pContext->_fSuppressInval = IsInvalid();
        pContext->_fRecalcSubtree = pContext->_fSuppressInval || fWasObscuringPossible;

RestartRecalc:
        // initialize obscure list
        _cObscuringElements = 0;
        Assert(_aryObscure.Size() == 0);

        // recalc
        _fRecalcLock = TRUE;
        Recalc(pContext);
        _fRecalcLock = FALSE;


        // after a full recalc, simply update the counts of obscurable
        // elements (obscuring elements get counted in Recalc)
        if (pContext->_fRecalcSubtree)
        {
            _cObscurableElements = _aryObscure.Size();
        }

        // after a partial recalc, update the counts of
        // elements participating in obscuring.  (We don't need an exact count,
        // only the zero/nonzero status matters.)
        else
        {
            _cObscuringElements = max(_cObscuringElements, cObscuringElements);
            _cObscurableElements = max((ULONG)_aryObscure.Size(), cObscurableElements);

            // if new obscuring and/or obscurable elements were discovered during
            // recalc, we have to run the full obscuring algorithm.  This requires
            // a full recalc.
            if (IsObscuringPossible())
            {
                _cObscuringElements = 0;    // supress real work in ProcessObscureList
                ProcessObscureList();       // but clear the list anyway

                pContext->_fRecalcSubtree = TRUE;
                goto RestartRecalc;
            }
        }


        // process the obscure list
        ProcessObscureList();

        // the root is always a visible, opaque, in-view branch
        SetFlags(s_preDrawSelector);

        Assert(_aryObscure.Size() == 0);
    }
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispRoot::HitTest
//              
//  Synopsis:   Perform hit testing starting at the root of the display tree.
//              
//  Arguments:  pptHit              [in] the point to test
//                                  [out] if something was hit, the point is
//                                  returned in container coordinates for the
//                                  thing that was hit
//              pCoordinateSystem   the coordinate system for pptHit
//              pClientData         client data
//              fHitContent         if TRUE, hit test the content regardless
//                                  of whether it is clipped or not. If FALSE,
//                                  take current clipping into account,
//                                  and clip to the bounds of this container.
//              cFuzzyHitTest       Number of pixels to extend hit testing
//                                  rectangles in order to do "fuzzy" hit
//                                  testing
//
//  Returns:    TRUE if the point hit something.
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

BOOL
CDispRoot::HitTest(
        CPoint* pptHit,
        COORDINATE_SYSTEM *pCoordinateSystem,
        void* pClientData,
        BOOL fHitContent,
        long cFuzzyHitTest)
{
    // test the window-top nodes first (top to bottom)
    if (_aryDispNodeWindowTop.Size() > 0)
    {
        // create hit context
        CDispHitContext hitContext;
        hitContext._pClientData = pClientData;
        hitContext._cFuzzyHitTest = cFuzzyHitTest;
        hitContext.GetClipTransform().SetToIdentity();
    
#if DBG==1
        hitContext.GetClipTransform().NoClip()._csDebug = COORDSYS_GLOBAL;
        hitContext.GetClipTransform().NoClip()._pNode = this;
#endif
        
        // hit point in global coordinates
        CPoint ptgHitTest;
        TransformPoint(
            *pptHit,
            *pCoordinateSystem,
            &ptgHitTest,
            COORDSYS_GLOBAL);
        hitContext.SetHitTestPoint(ptgHitTest);

        int i = _aryDispNodeWindowTop.Size();
        CDispNode **ppDispNode = &_aryDispNodeWindowTop[i-1];

        for ( ; i > 0; --i, --ppDispNode)
        {
            Assert((*ppDispNode)->GetDispRoot() == this);
            if ((*ppDispNode)->HitTestAtWindowTop(&hitContext, fHitContent))
            {
                hitContext.GetHitTestPoint(pptHit);
                return TRUE;
            }
        }
    }
    
    // if we are doing a virtual hit test on the root, we actually must do
    // the test on its first child, because virtualness applies only to the
    // immediate children of the node that is tested.  If we test the root,
    // it will report no hit outside its bounds, because the body's display node
    // is the same size as the root.
    if (fHitContent)
    {
        CDispNode* pChild = GetFirstChildNode();
        if (pChild != NULL)
        {
            *pptHit -= _rcpContainer.TopLeft().AsSize();
            return pChild->HitTest(
                pptHit, pCoordinateSystem, pClientData, fHitContent, cFuzzyHitTest);
        }
    }
    
    return super::HitTest(
        pptHit, pCoordinateSystem, pClientData, fHitContent, cFuzzyHitTest);
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispRoot::ScrollRect
//
//  Synopsis:   Smoothly scroll the content in the given rect by the indicated
//              delta, and draw the newly-exposed content.
//
//  Arguments:  rcgScroll               rect to scroll
//              sizegScrollDelta        direction to scroll
//              pScroller               the scroller node that
//                                      is requesting the scroll
//              fMayScrollDC            TRUE if it would be okay to use ScrollDC
//
//  Notes:
//
//----------------------------------------------------------------------------

void
CDispRoot::ScrollRect(
        const CRect& rcgScroll,
        const CSize& sizegScrollDelta,
        CDispScroller* pScroller,
        BOOL fMayScrollDC)
{
    // shouldn't be here with recalc flags set
    WHEN_DBG(VerifyFlags( s_flagsNotSetInDraw, 0, TRUE));
    
    Assert(!sizegScrollDelta.IsZero());
    AssertSz(!_fDrawLock, "CDispRoot::ScrollRect called inside Draw.");
    if (_fDrawLock || _pDispObserver == NULL)
        return;

    // can we use ScrollDC to simply scroll the bits?
    if (fMayScrollDC)
    {
        _pDispObserver->ScrollRect(
            rcgScroll,
            sizegScrollDelta,
            pScroller);
    }
    else
    {
        InvalidateRoot(rcgScroll, TRUE, TRUE);
    }
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispRoot::PreDraw
//
//  Synopsis:   Before drawing starts, PreDraw processes the redraw region,
//              subtracting areas that are blocked by opaque or buffered items.
//              PreDraw is finished when the redraw region becomes empty
//              (i.e., an opaque item completely obscures all content below it)
//
//  Arguments:  pContext    draw context
//
//  Returns:    TRUE if first opaque node to draw has been found
//
//  Notes:
//
//----------------------------------------------------------------------------

BOOL
CDispRoot::PreDraw(CDispDrawContext* pContext)
{
    // Interesting nodes are visible, in-view, opaque
    Assert(IsAllSet(s_preDrawSelector));
    Assert(!IsAnySet(s_flagsNotSetInDraw));

    // we don't expect filter or transform on the root node
    Assert(!IsDrawnExternally() && !HasUserTransform());
    
    if (!super::PreDraw(pContext))
    {
        // root is always opaque
        pContext->SetFirstDrawNode(this);
        Verify(!pContext->PushRedrawRegion(*(pContext->GetRedrawRegion()),this));
    }
    
    return TRUE;
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispRoot::EraseBackground
//              
//  Synopsis:   Quickly draw border and background.
//              
//  Arguments:  pContext        draw context
//              pClientData     client data used by clients in DrawClient
//              hrgngDraw       region to draw in destination coordinates
//              prcgDraw        rect to draw in destination coordinates
//              fEraseChildWindow   if TRUE, we are erasing the background of
//                                  a child window (the IE Label control)
//
//  Notes:      if hrgngDraw and prcgDraw are both NULL, the bounding rect of
//              this root node is used
//              
//----------------------------------------------------------------------------

void
CDispRoot::EraseBackground(
        CDispSurface* pRenderSurface,
        CDispDrawContext* pContext,
        void* pClientData,
        HRGN hrgngDraw,
        const RECT* prcgDraw,
        BOOL fEraseChildWindow)
{
    // NOTE (donmarsh) - EraseBackground can be called while we are recalcing
    // the display tree!  For example, CSelectLayout::HandleViewChange changes
    // the clip region of child windows, which causes an immediate
    // call to EraseBackground.  This is messy, because we could stomp on
    // values in pContext that are in use by the recalc code.  Therefore, we
    // ignore these calls.  If the following Assert fires, you should look
    // at the stack and protect the operation that called it with
    // CServer::CLock lock(Doc(), SERVERLOCK_IGNOREERASEBKGND);
    CheckSz(!_fDrawLock, "EraseBackground called during drawing");
    CheckSz(!_fRecalcLock, "EraseBackground called during recalc");
    if (_fDrawLock || _fRecalcLock)
        return;
    
    Assert(pRenderSurface != NULL);

    CSaveDispClipTransform saveTransform(pContext);
    pContext->SetRootNode(this);
    pContext->SetDispSurface(pRenderSurface);

    // set redraw region (will become a rect if possible)
    CRegion rgngRedraw;
    // TODO (donmarsh) -- this isn't exactly what we want with transforms
    // enabled, but it will work for now, because there is never a transform
    // on the root node.
    if (hrgngDraw != NULL)
    {
        rgngRedraw = hrgngDraw;
    }
    else if (prcgDraw != NULL)
    {
        rgngRedraw = *prcgDraw;
    }
    else
    {
        rgngRedraw = _rcpContainer;
    }
    
    // check for early exit conditions
    if (!rgngRedraw.Intersects(_rcpContainer))
        return;
    
    // set initial context values
    pContext->SetClientData(pClientData);
    pContext->SetFirstDrawNode(NULL);
    pContext->SetRedrawRegion(&rgngRedraw);
    pContext->SetDispSurface(pRenderSurface);

    // NOTE (donmarsh) - To address bug 62008 (erase background for HTML Help
    // control), we need to disable clipping in CDispSurface::GetDC.  Ideally,
    // CDispSurface should allow us to have a NULL _prgngClip, but that is
    // currently not the case.
    CRegion rgngClip(-15000,-15000,15000,15000);
    pRenderSurface->SetClipRgn(&rgngClip);
    
    // draw border and scrollbars
    Assert(!HasUserClip());
    TransformedToBoxCoords(&pContext->GetClipTransform());
    CRect rcbContainer(_rcpContainer.Size());
    CDispInfo di;
    CalcDispInfo(rcbContainer, &di);
    DrawBorder(pContext, *di._prcbBorderWidths, GetDispClient());
    
    // determine area that the root's children opaquely.  We do this in order
    // to avoid drawing the root background if it is completely covered by its
    // opaque children, thus reducing flash.
    // NOTE: Ideally, we should examine all children of the root node.  However,
    // Trident currently creates at most one opaque child, and it is always
    // the first child.  To simplify the code and accelerate performance, we
    // take advantage of this special case.
    BOOL fHasOpaqueChild = FALSE;
    CDispNode* pFirstChild = GetFirstChildNode();
    if (pFirstChild != NULL &&
        pFirstChild->IsOpaque() &&
        pFirstChild->IsVisible() &&
        pFirstChild->HasBackground() &&
        pFirstChild->IsContainer() &&
        !pFirstChild->HasUserTransform())
    {
        CSize sizecInsideBorder;
        GetSizeInsideBorder(&sizecInsideBorder);
        fHasOpaqueChild = pFirstChild->_rctBounds.Contains(CRect(sizecInsideBorder));
    }
    
    TransformBoxToContent(&pContext->GetClipTransform(), di);
    
    // draw background of first child
    if (fHasOpaqueChild)
    {
        if (pFirstChild->IsFlowNode())
            TransformContentToFlow(&pContext->GetClipTransform(), di);
        
        if (pFirstChild->TransformedToBoxCoords(
                &pContext->GetClipTransform(), pContext->GetRedrawRegion()))
        {
            // we checked that pFirstChild is a container above
            Assert(pFirstChild->IsContainer());
            CDispContainer::Cast(pFirstChild)->CalcDispInfo(pContext->GetClipRect(), &di);
            
            // this is evil: the nasty IE Label control passes us its DC for
            // us to draw our background into.  This was a hack to try
            // to simulate transparency, but it doesn't even work very well.
            // In this case, we have to avoid setting any clip region on this
            // foreign DC.
            if (fEraseChildWindow)
                pContext->GetDispSurface()->SetNeverClip(TRUE);

            pFirstChild->DrawBorder(pContext, *di._prcbBorderWidths, pFirstChild->GetDispClient());
            if (pFirstChild->HasBackground())
                pFirstChild->DrawBackground(pContext, di);

            pContext->GetDispSurface()->SetNeverClip(FALSE);
        }
    }
    
    // draw background for root
    else
    {
        CRect rccBackground(di._sizecBackground);
        GetDispClient()->DrawClientBackground(
            &rccBackground,
            &di._rccBackgroundClip,
            pContext->PrepareDispSurface(),
            this,
            pContext->GetClientData(),
            0);
    }
    
    pRenderSurface->SetClipRgn(NULL);
    ::SelectClipRgn(pRenderSurface->GetRawDC(), NULL);
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispRoot::InvalidateRoot
//              
//  Synopsis:   Add the given rect to the accumulated invalid area.
//              
//  Arguments:  rcgInval    invalid rect
//              
//  Notes:      Slot 0 in the invalid rect array is special.  It is used to
//              hold the new invalid rect while figuring out which rects to
//              merge.
//              
//----------------------------------------------------------------------------

void
CDispRoot::InvalidateRoot(const CRect& rcgInval, BOOL fSynchronousRedraw, BOOL fInvalChildWindows)
{
    // Unfortunately, we can't assert this, because certain OLE controls
    // invalidate when they are asked to draw.  This isn't really harmful,
    // just not optimal.
    //AssertSz(!_fDrawLock, "Illegal call to CDispRoot inside Draw()");

    if (_pDispObserver != NULL)
    {
        _pDispObserver->Invalidate(&rcgInval, NULL, fSynchronousRedraw, fInvalChildWindows);
    }
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispRoot::InvalidateRoot
//              
//  Synopsis:   Add the given invalid region to the accumulated invalid area.
//              
//  Arguments:  rgng        region to invalidate
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

void
CDispRoot::InvalidateRoot(const CRegion& rgng, BOOL fSynchronousRedraw, BOOL fInvalChildWindows)
{
    // Unfortunately, we can't assert this, because certain OLE controls
    // invalidate when they are asked to draw.  This isn't really harmful,
    // just not optimal.
    //AssertSz(!_fDrawLock, "Illegal call to CDispRoot inside Draw()");
    
    if (rgng.IsComplex())
    {
        if (_pDispObserver != NULL)
            _pDispObserver->Invalidate(NULL, rgng.GetRegionForLook(), fSynchronousRedraw, fInvalChildWindows);
    }
    else
    {
        CRect rc;
        rgng.GetBounds(&rc);
        InvalidateRoot(rc, fSynchronousRedraw, fInvalChildWindows);
    }
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispRoot::SwapDrawingUnfiltered
//              
//  Synopsis:   When a node is doing DrawNodeForFilter, it records itself
//              at the root, so that GetClippedBounds can do the right
//              thing.
//              
//  Arguments:  pDispNode   node to add
//
//  Returns:    node that was previously drawing unfiltered
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

CDispNode *
CDispRoot::SwapDrawingUnfiltered(CDispNode *pDispNode)
{
    CDispNode *pdn = _pDispNodeDrawingUnfiltered;
    _pDispNodeDrawingUnfiltered = pDispNode;
    return pdn;
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispRoot::AddWindowTop
//              
//  Synopsis:   Add the given node to the window-top list
//              
//  Arguments:  pDispNode   node to add
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

void
CDispRoot::AddWindowTop(CDispNode *pDispNode)
{
    if (_aryDispNodeWindowTop.Find(pDispNode) == -1)
    {
        _aryDispNodeWindowTop.Append(pDispNode);
        pDispNode->SetWindowTop();

        // remember the node's ancestors that are scrollers
        CDispNode *pdnAncestor;
        for (pdnAncestor = pDispNode->GetRawParentNode();
             pdnAncestor;
             pdnAncestor = pdnAncestor->GetRawParentNode())
        {
            // the top-level (BODY) scroller doesn't count
            if (pdnAncestor->IsScroller() && pdnAncestor->GetRawParentNode() != this)
            {
                WTopScrollerEntry *pEntry;
                if (S_OK == _aryWTopScroller.AppendIndirect(NULL, &pEntry))
                {
                    pEntry->pdnWindowTop = pDispNode;
                    pEntry->pdnScroller = CDispScroller::Cast(pdnAncestor);
                }
            }
        }
    }
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispRoot::RemoveWindowTop
//              
//  Synopsis:   Remove the given node from the window-top list
//              
//  Arguments:  pDispNode   node to remove
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

void
CDispRoot::RemoveWindowTop(CDispNode *pDispNode)
{
    _aryDispNodeWindowTop.DeleteByValue(pDispNode);
    pDispNode->ClearWindowTop();

    // remove the node from the scroller associative array
    for (int i=_aryWTopScroller.Size()-1;  i>=0;  --i)
    {
        if (_aryWTopScroller[i].pdnWindowTop == pDispNode)
        {
            _aryWTopScroller.Delete(i);
        }
    }
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispRoot::IsOnWindowTopList
//              
//  Synopsis:   Return TRUE if the given node is on the window-top list
//              
//  Arguments:  pDispNode   node to query
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

BOOL
CDispRoot::IsOnWindowTopList(CDispNode *pDispNode)
{
    return (-1 != _aryDispNodeWindowTop.Find(pDispNode));
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispRoot::ScrubWindowTopList
//              
//  Synopsis:   Remove all entries that are descendants of the given node
//              
//  Arguments:  pDispNode   node to query
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

void
CDispRoot::ScrubWindowTopList(CDispNode *pDispNode)
{
    // if the node isn't in my tree, there's nothing to do
    if (_aryDispNodeWindowTop.Size() == 0 || pDispNode->GetDispRoot() != this)
        return;

    int i = _aryDispNodeWindowTop.Size() - 1;
    CDispNode **ppDispNode = &_aryDispNodeWindowTop[i];

    // loop backwards, so that deletions don't affect the loop's future
    for ( ; i>=0; --i, --ppDispNode)
    {
        CDispNode *pdn;
        for (pdn = *ppDispNode; pdn; pdn = pdn->GetRawParentNode())
        {
            if (pdn == pDispNode)
            {
                RemoveWindowTop(*ppDispNode);
                break;
            }
        }
    }
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispRoot::ClearWindowTopList
//              
//  Synopsis:   Remove all entries
//              
//  Arguments:  none
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

void
CDispRoot::ClearWindowTopList()
{
    int i = _aryDispNodeWindowTop.Size() - 1;
    CDispNode **ppDispNode = &_aryDispNodeWindowTop[i];

    for ( ; i>=0; --i, --ppDispNode)
    {
        (*ppDispNode)->ClearWindowTop();
    }

    _aryDispNodeWindowTop.DeleteAll();
    _aryWTopScroller.DeleteAll();
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispRoot::InvalidateWindowTopForScroll
//              
//  Synopsis:   Whenever a CDispScroller scrolls, any window-top nodes
//              that it governs will move.  If these nodes stick out
//              beyond the scroller's client area, we need to invalidate
//              them (since the parts that stick out don't get moved by
//              the normal scrolling process).
//              
//  Arguments:  pDispScroller   - the scroller that's scrolling
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

void
CDispRoot::InvalidateWindowTopForScroll(CDispScroller *pDispScroller)
{
    // TODO (sambent) we should really check only for window-top nodes that
    // extrude from the client area.  But for now, let's invalidate all
    // window-top nodes governed by the scroller.  Overkill, but much simpler.

    // Note: the top-level (BODY) scroller doesn't participate in this
    // little dance (see AddWindowTop), because nothing sticks out from it.

    for (int i=_aryWTopScroller.Size()-1;  i>=0;  --i)
    {
        if (_aryWTopScroller[i].pdnScroller == pDispScroller)
        {
            _aryWTopScroller[i].pdnWindowTop->InvalidateAtWindowTop();
        }
    }
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispRoot::DoesWindowTopOverlap
//              
//  Synopsis:   A scroller wants to scroll by BLTing bits.  This won't work
//              if there's a window-top node that draws on top of the
//              scrolling area - the BLT will incorrectly move bits painted
//              by the window-top node.  This function determines whether
//              this situation exists.
//              
//  Arguments:  pDispScroller   - the scroller that's scrolling
//              rctScroll       - the area it wants to scroll (transformed coords)
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

BOOL
CDispRoot::DoesWindowTopOverlap(CDispScroller *pDispScroller, const CRect& rctScroll)
{
    int i, j;
    CRect rcgScroll;

    pDispScroller->TransformRect(rctScroll, COORDSYS_TRANSFORMED,
                                &rcgScroll, COORDSYS_GLOBAL);

    // look for a window-top node that (a) isn't a descendant of the scroller, 
    // and (b) intersects the scrolling area
    for (i=0; i<_aryDispNodeWindowTop.Size(); ++i)
    {
        CDispNode *pdnWT = _aryDispNodeWindowTop[i];
        BOOL fIsScrolling = FALSE;

        for (j=0; j<_aryWTopScroller.Size(); ++j)
        {
            if (_aryWTopScroller[j].pdnScroller == pDispScroller &&
                _aryWTopScroller[j].pdnWindowTop == pdnWT)
            {
                fIsScrolling = TRUE;
                break;
            }
        }

        if (!fIsScrolling)
        {
            CRect rcgBounds;

            pdnWT->TransformRect(pdnWT->_rctBounds, COORDSYS_TRANSFORMED,
                                        &rcgBounds, COORDSYS_GLOBAL);
            if (rcgScroll.Intersects(rcgBounds))
                return TRUE;
        }
    }

    return FALSE;
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispRoot::AddObscureElement
//              
//  Synopsis:   Add a new entry to the obscure list.  During Recalc, this list
//              holds information about each element that should be obscured
//              by content higher in the z-order.  At the end of recalc, we
//              use the accumulated information to set the visible region of
//              the obscured elements.
//              
//  Arguments:  pDispNode       the disp node of the obscured element
//              rcgClient       the element's client rect (global coords)
//              rcgClip         the element's initial clip rect (global coords)
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

void
CDispRoot::AddObscureElement(CDispNode *pDispNode,
                                const CRect& rcgClient,
                                const CRect& rcgClip)
{
    if (IsInRecalc())
    {
        // during recalc, add an entry to the list
        ObscureEntry *pEntry;

        if (_aryObscure.AppendIndirect(NULL, &pEntry) == S_OK)
        {
            pEntry->pDispNode = pDispNode;
            pEntry->rcgClient = rcgClient;
            pEntry->rcgClip = rcgClip;
            pEntry->rgngVisible = rcgClip;

            TraceTag((tagObscure, 
                    "add obscured node %x  clnt: (%ld,%ld,%ld,%ld)  clip: (%ld,%ld,%ld,%ld)",
                    pDispNode,
                    rcgClient.left, rcgClient.top, rcgClient.right, rcgClient.bottom,
                    rcgClip.left,   rcgClip.top,   rcgClip.right,   rcgClip.bottom));
        }
    }
    else
    {
        // outside of recalc (i.e. while scrolling), just mark the root as
        // having an obscurable element.  See ScrollRect for the rest of the story.
        ++ _cObscurableElements;
    }
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispRoot::ObscureElements
//              
//  Synopsis:   Subtract the given rect from the visible region of each
//              entry on the obscure list.  Don't change descendants of
//              the given disp node - clipping against ancestors is handled
//              the normal way.
//              
//  Arguments:  rcgOpaque       rect to subtract (global coordinates)
//              pDispNode       dispnode doing the clipping
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

void
CDispRoot::ObscureElements(const CRect& rcgOpaque, const CDispNode *pDispNode)
{
    if (IsInRecalc())
    {
        // during recalc, clip the elements on the list by the rect
        CRegion2 rgngOpaque = rcgOpaque;
        int i;

        for (i=_aryObscure.Size()-1;  i>=0;  --i)
        {
            if (!pDispNode->IsAncestorOf(_aryObscure[i].pDispNode))
            {
                _aryObscure[i].rgngVisible.Subtract(rgngOpaque);
            }
        }

        ++ _cObscuringElements;

        TraceTag((tagObscure, "%ld obscure by (%ld,%ld,%ld,%ld)",
                    _cObscuringElements,
                    rcgOpaque.left, rcgOpaque.top, rcgOpaque.right, rcgOpaque.bottom));
    }
    else
    {
        // outside of recalc (i.e. while scrolling), just mark the root as
        // having an obscuring element.  See ScrollRect for the rest of the story.
        ++ _cObscuringElements;
    }
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispRoot::ProcessObscureList
//              
//  Synopsis:   At the end of Recalc, tell each obscured element what
//              visible region remains after all the obscuring.
//              
//  Arguments:  none
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

void
CDispRoot::ProcessObscureList()
{
    int i;
    ObscureEntry *pEntry;

    if (_fDisableObscureProcessing)
       _cObscuringElements = 0;

    for (   i = _aryObscure.Size()-1,  pEntry = &_aryObscure[0];
            i >= 0;
            --i,  ++pEntry)
    {
        // if obscuring didn't change anything, no need to work
        if (_cObscuringElements > 0 && pEntry->rgngVisible != pEntry->rcgClip)
        {
            // tell the obscured element what's still visible
            pEntry->pDispNode->GetDispClient()->Obscure(
                                                    &pEntry->rcgClient,
                                                    &pEntry->rcgClip,
                                                    &pEntry->rgngVisible);

            TraceTag((tagObscure, "obscuring %x  clnt:(%ld,%ld,%ld,%ld)",
                        pEntry->pDispNode,
                        pEntry->rcgClient.left, pEntry->rcgClient.top, pEntry->rcgClient.right, pEntry->rcgClient.bottom));
        }

        // CDataAry doesn't call destructors, so explicitly tell region to
        // release its memory
        pEntry->rgngVisible.SetEmpty();
    }

    TraceTag((tagObscure, "obscuring done - %d entries",
                _aryObscure.Size()));

    _aryObscure.SetSize(0);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\display\disptransform.cxx ===
//+---------------------------------------------------------------------------
//
//  Microsoft Internet Explorer
//  Copyright (C) Microsoft Corporation, 1997-1998
//
//  File:       disptransform.cxx
//
//  Contents:   
//
//  Classes:    
//
//----------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_DISPTRANSFORM_HXX_
#define X_DISPTRANSFORM_HXX_
#include "disptransform.hxx"
#endif


MtDefine(CDispTransform, DisplayTree, "CDispTransform")
MtDefine(CDispClipTransform, DisplayTree, "CDispClipTransform")

void
CDispClipTransform::TransformRoundIn(const CRect& rcSource, CRect* prcDest) const
{
    if (_transform.IsOffsetOnly())
    {
        *prcDest = rcSource;
        prcDest->OffsetRect(_transform.GetOffsetOnly());
    }
    else
    {
        // note: FALSE for fRoundOut doesn't really mean "round in". 
        //       It means "round to closest integer", which is the default behavior.
        _transform.GetBoundingRectAfterTransform(&rcSource, prcDest, FALSE);
    }
}

void
CDispClipTransform::UntransformRoundOut(const CRect& rcSource, CRect* prcDest) const
{
    if (_transform.IsOffsetOnly())
    {
        *prcDest = rcSource;
        prcDest->OffsetRect(-_transform.GetOffsetOnly());
    }
    else
    {
        // Note: it is important to round clip rectangle out. With zoom > 100%
        //       clip rectangle is represented in fractional pixels in content coordinates.
        //       Normal rounding doesn't do the right thing in this case: if clip rectangle
        //       includes 1/3 of a pixel at 600% zoom, we still need to render the pixel.
        //       If normal rounding is applied, the 1/3 is truncated, the pixel is not rendered,
        //       and there is a 2-pixel gap in the image.
        _transform.GetBoundingRectAfterInverseTransform(&rcSource, prcDest, TRUE);        
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\display\dispsurface.cxx ===
//+---------------------------------------------------------------------------
//
//  Microsoft Internet Explorer
//  Copyright (C) Microsoft Corporation, 1997-1998
//
//  File:       dispsurface.cxx
//
//  Contents:   Drawing surface abstraction used by display tree.
//
//  Classes:    CDispSurface
//
//----------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_DISPSURFACE_HXX_
#define X_DISPSURFACE_HXX_
#include "dispsurface.hxx"
#endif

#ifndef X_REGION_HXX_
#define X_REGION_HXX_
#include "region.hxx"
#endif

#ifndef X_DDRAW_H_
#define X_DDRAW_H_
#include "ddraw.h"
#endif

#ifndef X_DDRAWEX_H_
#define X_DDRAWEX_H_
#include <ddrawex.h>
#endif

#ifndef X_CDUTIL_HXX_
#define X_CDUTIL_HXX_
#include "cdutil.hxx"
#endif

#ifdef _MAC
#ifndef X_MACCONTROLS_HXX_
#define X_MACCONTROLS_HXX_
#include "maccontrols.h"
#endif
#endif

DeclareTag(tagSurfaceDraw, "Display", "trace CDispSurface::Draw");

MtDefine(CDispSurface, DisplayTree, "CDispSurface")

#if !defined (NODD)
extern HRESULT InitSurface();
extern CGlobalCriticalSection    g_csOscCache;
extern IDirectDraw * g_pDirectDraw;
extern DDPIXELFORMAT* PixelFormat(HDC hdc, long cBitsPixel);
#endif

CDispSurface::CDispSurface(HDC hdc)
{
    // there are a lot of checks to prevent this constructor from being called
    // with a NULL hdc.  If this ever happens, we will probably hang in
    // CDispRoot::DrawBands.
    Assert(hdc != NULL);

    SetRawDC(hdc);
}

CDispSurface::CDispSurface(const XHDC& hdc)
{
    // there are a lot of checks to prevent this constructor from being called
    // with a NULL hdc.  If this ever happens, we will probably hang in
    // CDispRoot::DrawBands.
    Assert(!hdc.IsEmpty());
    
    // not expecting to create a surface from an XHDC which is itself a surface
    Assert(hdc.pSurface() == NULL);

    SetRawDC(hdc.hdc());
}


CDispSurface::CDispSurface(IDirectDrawSurface *pDDSurface)
{
    Assert(pDDSurface != NULL);
    
    _pDDSurface = pDDSurface;
    pDDSurface->AddRef();

    pDDSurface->GetDC(&_hdc);
    _dwObjType = 0;

    WHEN_DBG( _hpal = (HPALETTE)::GetCurrentObject(_hdc, OBJ_PAL); )

    WHEN_DBG( InitFromDDSurface(_pDDSurface); )
}


// This is a private function, call it only from a constructor
void
CDispSurface::SetRawDC(HDC hdc)
{
    AssertSz(_pDDSurface == NULL && _hdc == NULL, "CDispSurface is not a reusable class, you need to construct a new one");

    _hdc = hdc;

    if (_hdc == NULL)
    {
#if DBG == 1
        _hpal = NULL;
#endif // DBG == 1
        return;
    }

#if DBG == 1
    _hpal = (HPALETTE)::GetCurrentObject(hdc, OBJ_PAL);

#if !defined(NODD)
    IDirectDrawSurface *pDDSurface = 0;

    HRESULT hr = GetSurfaceFromDC(&pDDSurface);
    if (!hr)
    {
        InitFromDDSurface(pDDSurface);
        ReleaseInterface(pDDSurface);
    }
#endif // !NODD
#endif // DBG == 1
}


#if DBG == 1
void
CDispSurface::InitFromDDSurface(IDirectDrawSurface *pDDSurface)
{
    DDSURFACEDESC desc;
    ZeroMemory(&desc, sizeof(desc));
    desc.dwSize = sizeof(desc);

    Assert(SUCCEEDED((pDDSurface)->GetSurfaceDesc(&desc)) && (desc.dwFlags & DDSD_CAPS));
    Assert((desc.ddsCaps.dwCaps & DDSCAPS_ZBUFFER) == 0);
}
#endif


//+---------------------------------------------------------------------------
//
//  Member:     CDispSurface::CreateBuffer
//              
//  Synopsis:   Create a buffer surface compatible with this (and all the args!)
//              
//  Arguments:  pSurface        surface to clone
//              fTexture        should the dd surface be a texture surface?
//
//  Returns:    A CDispSurface* or NULL
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

CDispSurface *
CDispSurface::CreateBuffer(long width, long height, short bufferDepth, HPALETTE hpal, BOOL fDirectDraw, BOOL fTexture)
{
    CDispSurface *pSurface = new CDispSurface();

    if (!pSurface)
        return 0;

    HRESULT hr;

#if !defined (NODD)
    if (fDirectDraw)
    {
        hr = THR(pSurface->InitDD(_hdc, width, height, bufferDepth, hpal, fTexture));
    }
    else
#endif
    {
        hr = THR(pSurface->InitGDI(_hdc, width, height, bufferDepth, hpal));
    }

    if (hr)
    {
        delete pSurface;
        return 0;
    }

    return pSurface;
}

//+---------------------------------------------------------------------------
//
//  Member:     CDispSurface::IsCompat
//              
//  Synopsis:   Checks if the surface is compatible with the arguments
//              
//  Arguments:  See CreateBuffer
//              
//  Returns:    TRUE if successful
//              
//  Notes:      
//              
//----------------------------------------------------------------------------
BOOL
CDispSurface::IsCompat(long width, long height, short bufferDepth, HPALETTE hpal, BOOL fDirectDraw, BOOL fTexture)
{
    // TODO (michaelw) It really isn't enough to compare bufferDepth because of the strange
    //                   16 bit formats that may be different from one display to the next.
    //                   This could only happen in a multi monitor situation when we move from
    //                   entirely on one monitor to entirely on the other.  In all other cases
    //                   we are (I believe) insulated from this stuff.

    return (_sizeBitmap.cx >= width
    &&          _sizeBitmap.cy >= height
    &&          _bufferDepth == bufferDepth
    &&          (!hpal || _hpal == hpal)
    &&          (_pDDSurface != NULL) == fDirectDraw
    &&          _fTexture == fTexture);
}

#if !defined(NODD)
//+---------------------------------------------------------------------------
//
//  Member:     CDispSurface::InitDD
//              
//  Synopsis:   Create a DD surface.
//              
//  Arguments:  See CreateBuffer
//              
//  Returns:    A regular HRESULT
//              
//  Notes:      
//              
//----------------------------------------------------------------------------
HRESULT
CDispSurface::InitDD(HDC hdc, long width, long height, short bufferDepth, HPALETTE hpal, BOOL fTexture)
{
    // TODO: (mcalkins) Clean up this function a bit for feature fork.

    IDirectDrawPalette* pDDPal = 0;

    Assert(_pDDSurface == 0);
    Assert(_hbm == 0);

    HRESULT hr = THR(InitSurface());
    if (FAILED(hr))
        RRETURN(hr);

    // Figure out the dd pixel format for our buffer depth and dc
    DDPIXELFORMAT* pPF = PixelFormat(hdc, bufferDepth);
    if (!pPF)
        RRETURN(E_FAIL);

    // Setup the surface description
    DDSURFACEDESC	ddsd;

    ZeroMemory(&ddsd, sizeof(ddsd));

    ddsd.dwSize = sizeof(ddsd);
    ddsd.ddpfPixelFormat = *pPF;
    ddsd.dwFlags = DDSD_CAPS | DDSD_HEIGHT | DDSD_WIDTH | DDSD_PIXELFORMAT;
    ddsd.ddsCaps.dwCaps = DDSCAPS_DATAEXCHANGE | DDSCAPS_OWNDC;
    if (fTexture)
        ddsd.ddsCaps.dwCaps |= DDSCAPS_3DDEVICE;
    ddsd.dwWidth = width;
    ddsd.dwHeight = height;

    LOCK_SECTION(g_csOscCache);

    // Actually create the surface
    hr = THR(g_pDirectDraw->CreateSurface(&ddsd, &_pDDSurface, NULL));
    if (FAILED(hr))
        goto Cleanup;

    // set color table
    if (bufferDepth <= 8)
    {
        extern const PALETTEENTRY g_pal16[];
        extern const PALETTEENTRY g_pal2[];
        const PALETTEENTRY* pPal;
        PALETTEENTRY        pal256[256];
        long                cEntries;
        DWORD               pcaps;

        if (bufferDepth == 8)
        {
#ifdef NEVER
            int i       = 0;

            ZeroMemory(pal256, sizeof(pal256));

            for ( ; i < 256 ; i++)
            {
                pal256[i].peFlags   = PC_EXPLICIT;
                pal256[i].peRed     = i;
            }

            cEntries    = 256; // GetPaletteEntries(hpal, 0, 256, pal256);
#else  // !NEVER
            cEntries    = GetPaletteEntries(hpal, 0, 256, pal256);
#endif // !NEVER
            pPal        = pal256;
            pcaps       = DDPCAPS_8BIT;
        }
        else if (bufferDepth == 4)
        {
            cEntries    = 16;
            pPal        = g_pal16;
            pcaps       = DDPCAPS_4BIT;
        }
        else if (bufferDepth == 1)
        {
            cEntries    = 2;
            pPal        = g_pal2;
            pcaps       = DDPCAPS_1BIT;
        }
        else
        {
            Assert(0 && "invalid cBitsPerPixel");
            goto Cleanup;
        }
        
        // create and initialize a new DD palette
        hr = THR(g_pDirectDraw->CreatePalette(pcaps | DDPCAPS_INITIALIZE, (LPPALETTEENTRY)pPal, &pDDPal, NULL));
        if (FAILED(hr))
            goto Cleanup;

        // attach the DD palette to the DD surface
        hr = THR(_pDDSurface->SetPalette(pDDPal));
        if (FAILED(hr))
            goto Cleanup;
    }

    hr = THR(_pDDSurface->GetDC(&_hdc));
    _dwObjType = 0;
    if (FAILED(hr))
        goto Cleanup;

    if (hpal)
    {
#if DBG==1
    HPALETTE hPalOld = 
#endif
        SelectPalette(_hdc, hpal, TRUE);
#if DBG==1
        if(!hPalOld)
        {
            CheckSz(FALSE, "SelectPalette call into a DirectDraw DC failed!");
            if (GetObjectType((HGDIOBJ)hpal) != OBJ_PAL)
            {
                AssertSz(FALSE, "Something's wrong with the palette");
            }

            if (GetObjectType((HGDIOBJ)_hdc) != OBJ_MEMDC )
            {
                AssertSz(FALSE, "Something's wrong with the DC");
            }

            hpal = (HPALETTE)::GetCurrentObject(_hdc, OBJ_PAL);
        }
#endif
        ::RealizePalette(_hdc);
        _fDDPaletteSelected = true;
    }


    Assert(VerifyGetSurfaceFromDC());

    _sizeBitmap.cx = width;
    _sizeBitmap.cy = height;
    _fTexture = fTexture;
    _hpal = hpal;
    _bufferDepth = bufferDepth;

Cleanup:
    ReleaseInterface(pDDPal);
    if (hr)
        ClearInterface(&_pDDSurface);

    return hr;
}
#endif //NODD

//+---------------------------------------------------------------------------
//
//  Member:     CDispSurface::InitDD
//              
//  Synopsis:   Create a compatible bitmap surface.
//              
//  Arguments:  See CreateBuffer
//              
//  Returns:    A regular HRESULT
//              
//  Notes:      
//              
//----------------------------------------------------------------------------
HRESULT
CDispSurface::InitGDI(HDC hdc, long width, long height, short bufferDepth, HPALETTE hpal)
{
    // Compatible bitmaps have to be the same bith depth as the display
    Assert(bufferDepth == GetDeviceCaps(hdc, PLANES) * GetDeviceCaps(hdc, BITSPIXEL));

    _hbm = ::CreateCompatibleBitmap(hdc, width, height);
    if (!_hbm)
        RRETURN(GetLastError());

    _hdc = ::CreateCompatibleDC(hdc);
    _dwObjType = 0;
    if (!_hdc)
    {
        ::DeleteObject(_hbm);
        _hbm = NULL;
        RRETURN(GetLastError());
    }

    ::SelectObject(_hdc, _hbm);

    if (!hpal)
    {
        hpal = (HPALETTE) ::GetCurrentObject(hdc, OBJ_PAL);
        if (hpal == NULL)
            hpal = g_hpalHalftone;
    }

    if (hpal)
    {
        Verify(::SelectPalette(_hdc, hpal, TRUE));
        ::RealizePalette(_hdc);
    }

    _sizeBitmap.cx = width;
    _sizeBitmap.cy = height;
    _fTexture = FALSE;
    _hpal = hpal;
    _bufferDepth = bufferDepth;
    return S_OK;
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispSurface::~CDispSurface
//
//  Synopsis:   destructor
//
//----------------------------------------------------------------------------


CDispSurface::~CDispSurface()
{
    // Prevent Windows from RIPing when we delete our palette later on
    
    if (_fDDPaletteSelected)
    {
        Verify(::SelectPalette(_hdc, (HPALETTE)GetStockObject(DEFAULT_PALETTE), TRUE));
    }
    
    if (_hbm != NULL)
    {
        // clear out old bit map
        ::DeleteDC(_hdc);
        ::DeleteObject(_hbm);
    }

    if (_pDDSurface)
    {
        _pDDSurface->ReleaseDC(_hdc);
        _pDDSurface->Release();
    }

    Assert(_pBaseCcs == NULL);

}


//+---------------------------------------------------------------------------
//
//  Member:     CDispSurface::Draw
//              
//  Synopsis:   Blit the contents of this surface into the destination surface.
//              
//  Arguments:  pDestinationSurface     destination surface
//              rc                      rect to transfer (destination coords.)
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

void
CDispSurface::Draw(CDispSurface* pDestinationSurface, const CRect& rc)
{
    Assert(pDestinationSurface != NULL);
    
    Assert(_hdc != NULL && (_hbm != NULL || _pDDSurface != NULL) && pDestinationSurface->_hdc != NULL);
    Assert(_sizeBitmap.cx > 0 && _sizeBitmap.cy > 0);

#if DBG == 1
    if (IsTagEnabled(tagSurfaceDraw))
    {
        TraceTag((tagSurfaceDraw,
            "drawing surf %x src %x (%ld,%ld) dst %x (%ld,%ld,%ld,%ld)",
            this, _hdc, _sizeBitmap.cx, _sizeBitmap.cy,
            pDestinationSurface->_hdc, rc.left, rc.top, rc.right, rc.bottom));

        extern void DumpHDC(HDC);
        DumpHDC(_hdc);
        DumpHDC(pDestinationSurface->_hdc);
    }
#endif

    ::BitBlt(
        pDestinationSurface->_hdc,
        rc.left, rc.top,
        min(_sizeBitmap.cx, rc.Width()),
        min(_sizeBitmap.cy, rc.Height()),
        _hdc,
        0, 0,
        SRCCOPY);

#ifdef _MAC
    DrawMacScrollbars();
#endif

}


//+---------------------------------------------------------------------------
//
//  Member:     CDispSurface::SetClip
//
//  Synopsis:   Set the clip region appropriately.
//
//  Arguments:  rcWillDraw      area that will be drawn
//              fGlobalCoords   TRUE if rcWillDraw is in global coordinates
//
//  Returns:    nothing
//
//  Notes:
//
//----------------------------------------------------------------------------

void
CDispSurface::SetClip(const RECT& rcWillDraw, BOOL fGlobalCoords)
{
    Assert(_pTransform != NULL);

    if (!_fNeverClip)
    {
        CRect rcgClipNew = _pTransform->GetClipRectGlobal();
        BOOL fSetHDCClip = _fClipRgnHasChanged;
        
        // set the clip region if our clipping rect changed in a way that affects
        // the way that rcgWillDraw is clipped
        if (!fSetHDCClip && rcgClipNew != _rcgClip)
        {
            CRect rcgWillDraw;
            if (!fGlobalCoords)
                _pTransform->NoClip().Transform(rcWillDraw, &rcgWillDraw);
            else
                rcgWillDraw = rcWillDraw;
            BOOL fOldClipActive = !_rcgClip.Contains(rcgWillDraw);
            BOOL fNewClipActive = !rcgClipNew.Contains(rcgWillDraw);
            // since the old and new clip rects are different, we have to redo the
            // clip region if either of them would affect rcgWillDraw
            fSetHDCClip = fOldClipActive || fNewClipActive;
        }
        
        // must recalculate the clip region
        if (fSetHDCClip)
        {
            Assert(_prgnClip != NULL);
            
            _rcgClip = rcgClipNew;
            _fClipRgnHasChanged = FALSE;
            
            CRegion rgngClip;
            if (_prgnClip)
                rgngClip = *_prgnClip;
            rgngClip.Intersect(_rcgClip);
            rgngClip.SelectClipRgn(_hdc);
        }
    }
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispSurface::GetDC
//
//  Synopsis:   Return an HDC for rendering, clip should be set by SetClip()
//
//  Arguments:  phdc            pointer to returned HDC
//
//  Returns:    S_OK if successful
//
//  Notes:
//
//----------------------------------------------------------------------------

HRESULT
CDispSurface::GetDC(HDC* phdc)
{
    *phdc = _hdc;

#if DBG == 1
    if ((GetDeviceCaps(_hdc, PLANES) * GetDeviceCaps(_hdc, BITSPIXEL)) == 8)
    {
        Assert(_hpal == (HPALETTE)::GetCurrentObject(_hdc, OBJ_PAL));
    }
#endif

    return S_OK;
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispSurface::GetDirectDrawSurface
//
//  Synopsis:   Return a DirectDraw surface for rendering.
//
//  Arguments:  ppSurface       pointer to IDirectDrawSurface* for result
//              pOffset         offset from global coordinates
//
//  Returns:    S_OK if successful
//
//  Notes:      If the client didn't specify a desire for a DirectDraw
//              interface when inserted in the tree, he may not get one now.
//
//----------------------------------------------------------------------------

HRESULT
CDispSurface::GetDirectDrawSurface(
        IDirectDrawSurface** ppSurface,
        SIZE* pOffset)
{
    Assert(_pTransform != NULL);
    *ppSurface = _pDDSurface;
    _pTransform->GetOffsetDst((CPoint *)pOffset);

    if (NULL == _pDDSurface)
    {
        return E_FAIL;
    }
    else
    {
        return S_OK;
    }
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispSurface::GetSurface
//
//  Synopsis:   Get a surface using a general IID-based interface.
//
//  Arguments:  iid         IID of surface interface to be returned
//              ppv         interface pointer returned
//              pOffset     offset to global coordinates
//
//  Returns:    S_OK if successful, E_NOINTERFACE if we don't have the
//              requested interface, E_FAIL for other problems
//
//  Notes:
//
//----------------------------------------------------------------------------

HRESULT
CDispSurface::GetSurface(REFIID iid, void** ppv, SIZE* pOffset)
{
    if (iid == IID_IDirectDrawSurface)
    {
        return GetDirectDrawSurface((IDirectDrawSurface**)ppv,pOffset);
    }
    return E_NOINTERFACE;
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispSurface::GetSurface
//
//  Synopsis:   Return current DC or DirectDraw rendering surface.
//
//  Arguments:  hdc         returns DC
//              ppSurface   returns DirectDraw surface
//
//  Notes:      The owner of the returned HDC remains the CDispSurface.
//              Callers should not cache it.
//
//----------------------------------------------------------------------------

void
CDispSurface::GetSurface(HDC *hdc, IDirectDrawSurface** ppSurface)
{
    if (_pDDSurface)
    {
        *hdc = NULL;
        _pDDSurface->AddRef();
        *ppSurface = _pDDSurface;
    }
    else
    {
        *ppSurface = NULL;
        *hdc = _hdc;
    }
}

HRESULT
CDispSurface::GetSurfaceFromDC(HDC hdc, IDirectDrawSurface **ppDDSurface)
{
#if !defined(NODD)
    IDirectDraw3 *pDD3 = 0;

    HRESULT hr = THR(InitSurface());
    if (FAILED(hr))
        goto Cleanup;

    {
        LOCK_SECTION(g_csOscCache);

        hr = THR(g_pDirectDraw->QueryInterface(IID_IDirectDraw3, (LPVOID *)&pDD3));
        if (FAILED(hr))
            goto Cleanup;
    }

    Assert(pDD3);
    hr = THR_NOTRACE(pDD3->GetSurfaceFromDC(hdc, ppDDSurface));


Cleanup:
    ReleaseInterface(pDD3);

#else
    HRESULT hr = E_FAIL;
#endif
    // This is the code that GetSurfaceFromDC fails to get the Surface
    RRETURN1(hr, DDERR_NOTFOUND  /*0x887600ff */);
}

//+---------------------------------------------------------------------------
//
//  Member:     CDispSurface::VerifyGetSurfaceFromDC
//
//  Synopsis:   Verifies that it is possible to GetSurfaceFromDC
//
//  Arguments:  hdc
//
//  Notes:
//
//----------------------------------------------------------------------------
BOOL
CDispSurface::VerifyGetSurfaceFromDC(HDC hdc)
{
#if !defined(NODD)
    IDirectDrawSurface *pDDSurface;

    HRESULT hr = THR_NOTRACE(GetSurfaceFromDC(hdc, &pDDSurface));

    if (SUCCEEDED(hr))
    {
        pDDSurface->Release();
    }

    return hr == S_OK;
#else
    return FALSE;
#endif
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\display\dispstructurenode.cxx ===
//+---------------------------------------------------------------------------
//
//  Microsoft Internet Explorer
//  Copyright (C) Microsoft Corporation, 1997-1998
//
//  File:       dispstructurenode.cxx
//
//  Contents:   Structure node for display tree.
//
//  Classes:    CDispStructureNode
//
//----------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_DISPSTRUCTURENODE_HXX_
#define X_DISPSTRUCTURENODE_HXX_
#include "dispstructurenode.hxx"
#endif

MtDefine(CDispStructureNode, DisplayTree, "CDispStructureNode")

// ======== CDispStructureNode basics =============
// (this comment should go to proper place)
//
// Structure node never exposed to display tree users.
// Structure node is never owned (i.e. SetOwned/IsOwned never applied to it)
// Structure node is never empty, it contains at least one child (that can be also structure)
// Structure node siblings are always structure node.
// Structure node subtree however can have "different depth". I.e. structure node cousins
//   not necessary is structure node.
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\display\matrix.cxx ===
//+---------------------------------------------------------------------------
//  
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1995.
//  
//  File:       matrix.cxx
//  
//  Contents:   rotation matrix implementation
//  
//----------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#include <math.h>

#ifndef X_FLOAT2INT_HXX_
#define X_FLOAT2INT_HXX_
#include "float2int.hxx"
#endif

#undef F2I_MODE
#define F2I_MODE Flow

//+---------------------------------------------------------------------------
//
//  The functions in this file deals with the transformation matrix.
//  A transformation matrix is a special 3x3 matrix that can store rotation,
//  scaling and offset information. It looks like this
//
//      M11    M21    eDx
//      M12    M22    eDy
//       0      0      1
//
//----------------------------------------------------------------------------


//+---------------------------------------------------------------------------
//
//  Synopsis:   Return the sine snd cosine of an angle
//              
//  Notes:      LIBC FUNCTIONS USED FROM TRAN.LIB: atan2 cos sin
//              
//----------------------------------------------------------------------------
void CosSinFromAng(ANG ang, float *pangCos, float *pangSin)
{
    // Ensure angle is normalized
    Assert(ang < ang360 && ang >= 0);

    //Note: Sine sign is reversed, since the window coordinate system is reversed in Y
    switch (ang)
    {
    // special-cases for speed and to avoid noise in math library.
    case 0:
        *pangCos = 1.0f;
        *pangSin = 0.0f;
        break;

    case ang90:
        *pangCos = 0.0f;
        *pangSin = -1.0f;
        break;
        
    case ang180:
        *pangCos = -1.0f;
        *pangSin = 0.0f;
        break;

    case ang270:
        *pangCos = 0.0f;
        *pangSin = 1.0f;
        break;

    default:
        {
        float angRadians = RadFromAng(ang);
        *pangCos = cos(angRadians);
        *pangSin = -sin(angRadians);
        break;
        }
    }
}

//+---------------------------------------------------------------------------
//
//  Member:     MAT::MultiplyForward
//              
//  Synopsis:   Multiply this matrix (multiplier) by pmat (multiplicand)
//              The result is stored in this matrix
//              
//  Arguments:  pmat         the multiplicand matrix
//              
//  Notes: This is a customized matrix multiplication for the transforms.
//         Order of transforms: 'pmat' transform applies first, 'this' second
//              
//----------------------------------------------------------------------------
void MAT::MultiplyForward(MAT const *pmat)
{
    float fTmp1, fTmp2;

    fTmp1 = eM11 * pmat->eM11 + eM21 * pmat->eM12;
    fTmp2 = eM11 * pmat->eM21 + eM21 * pmat->eM22;
    eDx = eM11 * pmat->eDx + eM21 * pmat->eDy + eDx;
    eM11 = fTmp1;
    eM21 = fTmp2;

    fTmp1 = eM12 * pmat->eM11 + eM22 * pmat->eM12;
    fTmp2 = eM12 * pmat->eM21 + eM22 * pmat->eM22;
    eDy  = eM12 * pmat->eDx + eM22 * pmat->eDy + eDy;
    eM12 = fTmp1;
    eM22 = fTmp2;
}

//+---------------------------------------------------------------------------
//
//  Member:     MAT::MultiplyBackward
//              
//  Synopsis:   Multiply pmat (multiplier) by this matrix (multiplicand),
//              The result is stored in this matrix
//              
//  Arguments:  pmat         the multiplier matrix
//              
//  Notes: This is a customized matrix multiplication for the transforms
//         Order of transforms: 'this' transform applies first, 'pmat' second
//              
//----------------------------------------------------------------------------
void MAT::MultiplyBackward(MAT const*pmat)
{
    float fTmp1;

    fTmp1 = pmat->eM11 * eM11 + pmat->eM21 * eM12;
    eM12 = pmat->eM12 * eM11 + pmat->eM22 * eM12;    
    eM11 = fTmp1;
    fTmp1 = pmat->eM11 * eM21 + pmat->eM21 * eM22;
    eM22 = pmat->eM12 * eM21 + pmat->eM22 * eM22;
    eM21 = fTmp1;

    double fTmp2 = pmat->eM11 * eDx + pmat->eM21 * eDy + pmat->eDx;
    eDy = pmat->eM12 * eDx + pmat->eM22 * eDy + pmat->eDy;
    eDx = fTmp2;
}

//+---------------------------------------------------------------------------
//
//  Member:     MAT::Inverse
//              
//  Synopsis:   Inverse the current matrix
//              
//  Notes: Inverse is defined as (MAT * Inverse MAT = Unity Matrix)
//              
//----------------------------------------------------------------------------
void MAT::Inverse(void)
{
    double det = eM11 * eM22 - eM21 * eM12;

    if (det == 0)
    {
        AssertSz(FALSE, "Matrix cannot be inversed");
        return;
    }

    double det_rc = 1/det;
    //NOTE (mikhaill) -- previous version used 6 divisions by det; I've replaced
    //                   it to single division and 6 multiplications by det_rc.
    //                   This is much faster - because compiler never treats this
    //                   repeating divisions as repeating expressions and can't make
    //                   optimization. Note that, in general, a/b != a*(1/b), although
    //                   the difference can be just in least significant bits of 80-bit
    //                   internal fpp representation.

    double t = eDx;
    eDx = (eDy * eM21 - eDx * eM22) * det_rc;
    eDy = (  t * eM12 - eDy * eM11) * det_rc;
    
    t = eM11;
    eM11 = eM22 * det_rc;
    eM22 =    t * det_rc;

    eM21 = - eM21 * det_rc;
    eM12 = - eM12 * det_rc;
}

//+---------------------------------------------------------------------------
//
//  Member:     MAT::InitTranslation
//              
//  Synopsis:   Constructs a matrix from the passed translation.
//              
//  Arguments:  x, y  offset
//              
//----------------------------------------------------------------------------
void MAT::InitTranslation(const int x, const int y)
{
    eM11 = eM22 = 1;
    eM12 = eM21 = 0;
    eDx = x; eDy = y;
}

//+---------------------------------------------------------------------------
//
//  Member:     MAT::InitFromXYAng
//              
//  Synopsis:   Constructs a matrix from the passed floating point point and angle.
//              
//  Arguments:  xl, yl  center of rotation
//              ang     angle of rotation
//              
//  Notes: the result matrix does contain coordinate rounding
//              
//----------------------------------------------------------------------------
void MAT::InitFromXYAng(double xl, double yl, ANG ang)
{
    float angCos;    // not really angles, but oh well
    float angSin;

    AssertSz(ang, "Rotation angle = 0, avoid using this function for performance");

    // force to be in bounds
    ang = AngNormalize(ang);

    CosSinFromAng(ang, &angCos, &angSin);
    
    eM11 = angCos;
    eM12 = angSin;
    eM21 = -angSin;
    eM22 = angCos;
    eDx = (1 - angCos) * xl + yl * angSin;
    eDy = (1 - angCos) * yl - xl * angSin;
}

//+---------------------------------------------------------------------------
//
//  Member:     MAT::InitFromPtAng
//              
//  Synopsis:   Constructs a matrix from the passed point and angle
//              
//  Arguments:  ptCenter    center of rotation
//              ang         angle of rotation
//              
//  Notes: the result matrix does contain coordinate rounding
//              
//----------------------------------------------------------------------------
void MAT::InitFromPtAng(const CPoint ptCenter, ANG ang)
{
    InitFromXYAng(ptCenter.x, ptCenter.y, ang);
}

//+---------------------------------------------------------------------------
//
//  Member:     MAT::InitFromRcAng
//              
//  Synopsis:   Constructs a matrix from the passed rectangle and angle
//              
//  Arguments:  prc    rectangle, its center is the center of rotation
//              ang    angle of rotation
//              
//  Notes: the result matrix does contain coordinate rounding
//              
//----------------------------------------------------------------------------
void MAT::InitFromRcAng(const CRect *prc, ANG ang)
{
    InitFromXYAng((prc->left + prc->right)*.5, (prc->top + prc->bottom)*.5, ang);
}

//+---------------------------------------------------------------------------
//
//  Member:     MAT::TransformRgpt
//              
//  Synopsis:   The core transformation function,
//              Transforms an array of points using the current matrix
//              
//  Arguments:  ppt    pointer to the array of points.
//              cpt    number of points in the array
//              
//----------------------------------------------------------------------------
void MAT::TransformRgpt(CPoint *ppt, int cpt) const
{
    Assert(ppt);

    F2I_FLOW;

    for (; cpt > 0; ppt++, cpt--)
    {
        int x = ppt->x;
        int y = ppt->y;

        // For each point: multiply the 2x2 vector by the 1x2 point vector,
        // then add the translation offset

        ppt->x = IntNear(eM11 * x + eM21 * y + eDx);
        ppt->y = IntNear(eM12 * x + eM22 * y + eDy);
    }
}

//+---------------------------------------------------------------------------
//
//  Member:     MAT::GetBoundingRect
//              
//  Synopsis:   Computes the bounding CRect from a given RRC
//              
//  Arguments:  prrc    the rotated rectangle
//              
//  Notes: the result matrix does contain coordinate rounding
//              
//----------------------------------------------------------------------------
CRect MAT::GetBoundingRect(const RRC * const prrc) const
{
    CRect rcBound;
    int xp1, xp2;
    int yp1, yp2;
    // compute left edge: min of four points
    xp1 = min(prrc->ptTopLeft.x,    prrc->ptTopRight.x);
    xp2 = min(prrc->ptBottomLeft.x, prrc->ptBottomRight.x);
    rcBound.left = min(xp1, xp2);
    // compute right edge: max of four points
    xp1 = max(prrc->ptTopLeft.x,    prrc->ptTopRight.x);
    xp2 = max(prrc->ptBottomLeft.x, prrc->ptBottomRight.x);
    rcBound.right = max(xp1, xp2);
    // compute top edge: min of four points
    yp1 = min(prrc->ptTopLeft.y,    prrc->ptTopRight.y);
    yp2 = min(prrc->ptBottomLeft.y, prrc->ptBottomRight.y);
    rcBound.top = min(yp1, yp2);
    // compute bottom edge: max of four points
    yp1 = max(prrc->ptTopLeft.y,    prrc->ptTopRight.y);
    yp2 = max(prrc->ptBottomLeft.y, prrc->ptBottomRight.y);
    rcBound.bottom = max(yp1, yp2);

    return rcBound;
}

//+---------------------------------------------------------------------------
//
//  Member:     MAT::GetBoundingRectAfterTransform
//              
//  Synopsis:   Computes the bounding rect of prc after applying the transform
//              
//  Arguments:  prc         the rectangle to be rotated
//              fRoundOut   TRUE if floating-point coords should be rounded outwards
//              
//----------------------------------------------------------------------------

void MAT::GetBoundingRectAfterTransform(CRect *prc, BOOL fRoundOut) const
{
    // Transform each point of the
    // rect individually in floating-point coordinates,
    // detect mins and maxs of x and y of transformed points,
    // and compose bounding rectangle.

    double x = eM11 * prc->left + eM21 * prc->top + eDx;
    double y = eM12 * prc->left + eM22 * prc->top + eDy;

    double minx = x, maxx = x,
           miny = y, maxy = y;

    x = eM11 * prc->right + eM21 * prc->top + eDx;
    y = eM12 * prc->right + eM22 * prc->top + eDy;

    if (minx > x) minx = x; else if (maxx < x) maxx = x;
    if (miny > y) miny = y; else if (maxy < y) maxy = y;

    x = eM11 * prc->right + eM21 * prc->bottom + eDx;
    y = eM12 * prc->right + eM22 * prc->bottom + eDy;

    if (minx > x) minx = x; else if (maxx < x) maxx = x;
    if (miny > y) miny = y; else if (maxy < y) maxy = y;

    x = eM11 * prc->left + eM21 * prc->bottom + eDx;
    y = eM12 * prc->left + eM22 * prc->bottom + eDy;

    if (minx > x) minx = x; else if (maxx < x) maxx = x;
    if (miny > y) miny = y; else if (maxy < y) maxy = y;

    F2I_FLOW;
    if (fRoundOut)
        prc->SetRect(IntFloor(minx), IntFloor(miny),
                     IntCeil(maxx),  IntCeil(maxy));
    else
        prc->SetRect(IntNear(minx),  IntNear(miny),
                     IntNear(maxx),  IntNear(maxy));
}

//+---------------------------------------------------------------------------
//
//  Member:     MAT::GetXFORM
//              
//  Synopsis:   Convert martix into Windows atdard form
//              
//  Arguments:  x       reference to Windows matrix
//              
//----------------------------------------------------------------------------
void MAT::GetXFORM(XFORM& x) const
{
    x.eM11 = eM11;
    x.eM12 = eM12;
    x.eM21 = eM21;
    x.eM22 = eM22;
    x.eDx  = float(eDx);
    x.eDy  = float(eDy);
}

//+---------------------------------------------------------------------------
//
//  Member:     MAT::CombinePostTranslation
//              
//  Synopsis:   Adds a post transform offset to the current matrix
//              
//  Arguments:  xOffset, yOffset
//              
//  Notes: This is a short cut instead of combining the two transforms
//              
//----------------------------------------------------------------------------
void MAT::CombinePostTranslation(int xOffset, int yOffset)
{
    eDx += xOffset;
    eDy += yOffset;
}

//+---------------------------------------------------------------------------
//
//  Member:     MAT::CombinePreTranslation
//              
//  Synopsis:   Adds a pre transform offset to the current matrix
//              
//  Arguments:  xOffset, yOffset
//              
//  Notes: This is a short cut instead of combining the two transforms
//              
//----------------------------------------------------------------------------
void MAT::CombinePreTranslation(int xOffset, int yOffset)
{
    eDx += eM11 * xOffset + eM21 * yOffset;
    eDy += eM12 * xOffset + eM22 * yOffset;
}

//+---------------------------------------------------------------------------
//
//  Member:     MAT::CombinePostScaling
//              
//  Synopsis:   Adds a post transform scaling to the current matrix
//              
//  Arguments:  xScale, yScale
//              
//  Notes: This is a short cut instead of combining the two transforms
//              
//----------------------------------------------------------------------------
void MAT::CombinePostScaling(double scaleX, double scaleY)
{
    eM11 *= scaleX;
    eM21 *= scaleX;
    eDx  *= scaleX;
    eM12 *= scaleY; 
    eM22 *= scaleY; 
    eDy  *= scaleY;
}

//+---------------------------------------------------------------------------
//
//  Member:     MAT::CombinePostTransform
//              
//  Synopsis:   Combines the current transform with the pmat transform
//              
//  Arguments:  pmat    Transform to be added After the current one
//              
//  Notes: The order of applying transforms is important,
//         the result is current transform followed by the one form pmat     
//----------------------------------------------------------------------------
// (mikhaill) - inlined
//void MAT::CombinePostTransform(MAT const *pmat)
//{
//    MultiplyBackward(pmat);
//}

//+---------------------------------------------------------------------------
//
//  Member:     MAT::CombinePreTransform
//              
//  Synopsis:   Combines the pmat transform with the current transform
//              
//  Arguments:  pmat    Transform to be added prior to the current one
//              
//  Notes: The order of applying transforms is important,
//         the result is the pmat transform followed by the current transform
//----------------------------------------------------------------------------
// (mikhaill) - inlined
//void MAT::CombinePreTransform(MAT const *pmat)
//{
//    MultiplyForward(pmat);
//}

//+---------------------------------------------------------------------------
//
//  Member:     MAT::CombinePreScaling
//              
//  Synopsis:   Adds a pre transform scaling to the current matrix
//              
//  Arguments:  xScale, yScale
//              
//  Notes: This is a short cut instead of combining the two transforms
//              
//----------------------------------------------------------------------------
void MAT::CombinePreScaling(double scaleX, double scaleY)
{
    eM11 = eM11 * scaleX;
    eM21 = eM21 * scaleY;
    eM12 = eM12 * scaleX; 
    eM22 = eM22 * scaleY; 
}

//+---------------------------------------------------------------------------
//
//  Synopsis: returns whether two floats are within 1% of each other.
//              
//----------------------------------------------------------------------------
#define floatCloseRange  0.01
#define floatSmallEnough 0.0001
static bool AreClose(double f1, double f2)
{
    if (fabs(f1) < floatSmallEnough && fabs(f2) < floatSmallEnough)
        return TRUE;
    else
        return (fabs(f1 - f2) < fabs(floatCloseRange * f1));
}


//+---------------------------------------------------------------------------
//
//  Member:     MAT::GetAngleScaleTilt
//              
//  Synopsis: Deconstruct the matrix
//              
//----------------------------------------------------------------------------
void MAT::GetAngleScaleTilt(float *pdegAngle, float *pflScaleX, float *pflScaleY, float *pdegTilt) const
{
    // note: we need angle for all parameters except scaleX, so don't bother to check if they are
    //       are actually intereated in the angle
    //
    // angle is reversed because Y points down
    float degAngle = - DegFromRad(atan2(eM12, eM11));

    if (pdegAngle)
        *pdegAngle = degAngle;

    if (pdegTilt)
    {
        // where a vertical line moves when rotated. remember, Y axis is reversed
        float degAngleV = - DegFromRad(atan2(-eM22, -eM21));

        *pdegTilt = 90.0 + degAngle - degAngleV;
        if (*pdegTilt > 180)
            *pdegTilt -= 360;
        else
        if (*pdegTilt < -180)
            *pdegTilt += 360;
        
        // Tilt is supposed to be zero, because there is no way to set it now
        AssertSz(AreClose(*pdegTilt, 0), "Tilt is not zero");
    }

    if (pflScaleX)
    {
        *pflScaleX = sqrt(eM11 * eM11 + eM12 * eM12);
    }

    if (pflScaleY)
    {
        // FUTURE (alexmog, 6/7/99): this formula must take tilt into account. Change when it matters.
        AssertSz(AreClose(GetRealTilt(), 0), "ScaleY calculation does not support tilt");
        *pflScaleY = sqrt(eM21 * eM21 + eM22 * eM22);
    }
}

//+---------------------------------------------------------------------------
//
//  Member:     MAT::FTransforms
//              
//  Synopsis:   Test whether matrix provide any transform
//
//  Returns:    TRUE if indeed transforms
//              
//----------------------------------------------------------------------------
BOOL MAT::FTransforms() const
{
    return eM11 != 1 || eM22 != eM11 ||
           eM12 != 0 || eM21 != eM12 ||
           eDx  != 0 || eDy  != eDx;
}



#ifdef DBG
//+---------------------------------------------------------------------------
//
// ---------------------- SMOKE TEST -----------------------------------------
//
//----------------------------------------------------------------------------

static int IntPart(double d) { return (int) d; }
static int FracPart(double d) { return (int)(10000*(d - IntPart(d))); } // in 10000th's

//+---------------------------------------------------------------------------
//
//  Member:     MAT::Dump
//              
//  Synopsis: Dumps a matrix to the debug output. Since this will call wsprintf,
//        we can't use floating point conversion specifiers. !#^@%$&*
//              
//----------------------------------------------------------------------------
void MAT::Dump() const
{
/*
    wsprintf("|%d.%05d\t%d.%05d\t(%d.%05d)|\r\n",
        IntPart(eM11),
        FracPart(eM11),
        IntPart(eM21),
        FracPart(eM21),
        IntPart(eDx),
        FracPart(eDx));
    wsprintf("|%d.%05d\t%d.%05d\t(%d.%05d)|\r\n",
        IntPart(eM12),
        FracPart(eM12),
        IntPart(eM22),
        FracPart(eM22),
        IntPart(eDy),
        FracPart(eDy));
    wsprintf("angle %d\r\n",
        (int)(DegFromRad(GetAngFromMat())));
*/
}

//+---------------------------------------------------------------------------
//
//  Synopsis: Finds if the two matrices are close.

//  Note:     Because we are comparing floats, we test if they are close enough
//              
//----------------------------------------------------------------------------
static bool AreClose(MAT const& mat1, MAT const& mat2)
{
    return (AreClose(mat1.eM11, mat2.eM11) &&
            AreClose(mat1.eM21, mat2.eM21) &&
            AreClose(mat1.eM12, mat2.eM12) &&
            AreClose(mat1.eM22, mat2.eM22) &&
            AreClose(mat1.eDx,  mat2.eDx)  &&
            AreClose(mat1.eDy,  mat2.eDy) );
}

//+---------------------------------------------------------------------------
//
//  Member:     MAT::AssertValid
//              
//  Synopsis: Asserts a passed matrix is in fact a rotation matrix.
//            Plan: Get the angle from the matrix, then assert that the values in
//            the matrix correspond to the correct sin/cos values.
//              
//----------------------------------------------------------------------------
void MAT::AssertValid() const
{
    double rad = RadFromDeg(GetRealAngle());
   //Note: Sine sign is reversed, since the window coordinate system is reversed in Y
    float radCos = cos(rad), radSin = -sin(rad);

    double scale = GetRealScaleX();
    AssertSz(AreClose(scale, GetRealScaleY()), "Anisotropic matrix");

    AssertSz(AreClose(eM11,  radCos * scale), "Bogus matrix 1");
    AssertSz(AreClose(eM21, -radSin * scale), "Bogus matrix 2");
    AssertSz(AreClose(eM12,  radSin * scale), "Bogus matrix 3");
    AssertSz(AreClose(eM22,  radCos * scale), "Bogus matrix 4");
}

//+---------------------------------------------------------------------------
//
//  Member:     MAT::IsMatrixEqualTo
//              
//  Synopsis:   Test two matrices equality
//
//  Returns:    TRUE if this matrix is equal to given one
//              
//----------------------------------------------------------------------------
BOOL MAT::IsMatrixEqualTo(const MAT &m) const
{
    return eM11 == m.eM11 &&
           eM12 == m.eM12 &&
           eM21 == m.eM21 &&
           eM22 == m.eM22 &&
           eDx  == m.eDx  &&
           eDy  == m.eDy;
}

//+---------------------------------------------------------------------------
//
//  Member:     MAT::TestMatrix
//              
//  Synopsis: Test matrix operations work as expected
//              
//----------------------------------------------------------------------------
BOOL MAT::TestMatrix()
{
    BOOL    fRet = TRUE;    // return code
    CRect   rcDisp;         // dummy display rectangle
    ANG     ang1, ang2;     // dummy angle of rotation
    MAT     mat1, mat2, mat3;
    CRect   rcTestBefore, rcTestAfter, rcTestFinal;
    CRect   rcBounds1, rcBounds2;
    CPoint  ptCenter(-5,10);

    rcDisp.left = 366;
    rcDisp.top = -165;
    rcDisp.right = 486;
    rcDisp.bottom = 63;

    ang1 = AngFromDeg(180);

    // Test matrix initialization
    mat1.InitFromRcAng(&rcDisp, ang1);
    mat1.AssertValid();

    mat2.InitFromRcAng(&rcDisp, ang360 - ang1);
    mat2.AssertValid();
    AssertSz(mat1.IsMatrixEqualTo(mat2), "180 degree rotation matrices differ.");

    // Test bounding rectangles
    RRC rrc1(&rcDisp);
    rcBounds1 = GetBoundingRect(&rrc1);
    if (rcDisp != rcBounds1)
    {
        AssertSz(FALSE, "Bounding rectangle differs from rectangle.");
        fRet = FALSE;
    }

    mat1.TransformRRc(&rrc1);   // rotate 180 deg
    rcBounds2 = GetBoundingRect(&rrc1);
    if (rcBounds1 != rcBounds2)
    {
        AssertSz(FALSE, "180 degree rotated bounding rectangles differ.");
        fRet = FALSE;
    }

    // test matrix operations
    
    // Test inverse
    mat1.InitFromPtAng(ptCenter, ang1);
    mat1.Inverse();
    mat2.InitFromPtAng(ptCenter, -ang1);
    if (!AreClose(mat1, mat2))
    {
        AssertSz(FALSE, "Matrix inverse is not correct.");
        fRet = FALSE;
    }

    // Test multiplication
    ang1 = AngFromDeg(90);
    ang2 = AngFromDeg(180);    
    mat1.InitFromPtAng(ptCenter, ang1);
    mat2.InitFromPtAng(ptCenter, ang2);
    mat3.InitFromPtAng(ptCenter, ang1 + ang2);

    mat1.MultiplyForward(&mat2);
    if (!AreClose(mat1, mat3))
    {
        AssertSz(FALSE, "Matrix Forward multiplication is not correct.");
        fRet = FALSE;
    }

    mat1.InitFromPtAng(ptCenter, ang1);    
    mat1.MultiplyBackward(&mat2);
    if (!AreClose(mat1, mat3))
    {
        AssertSz(FALSE, "Matrix Backward multiplication is not correct.");
        fRet = FALSE;
    }

    return fRet;
}

//+---------------------------------------------------------------------------
//
//  Member:     DoMatrixSmokeTest
//              
//  Synopsis: Performs the matrix smoke test
//              
//----------------------------------------------------------------------------
BOOL DoMatrixSmokeTest()
{
    MAT mat;
    return (mat.TestMatrix());
}
#endif // DEBUG
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\display\overlay.cxx ===
//+---------------------------------------------------------------------------
//
//  Microsoft Internet Explorer
//  Copyright (C) Microsoft Corporation, 2000
//
//  File:       overlay.cxx
//
//  Contents:   Overlay processing for disp root.
//
//  Classes:    CDispRoot (overlay methods), COverlaySink
//
//----------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_DISPROOT_HXX_
#define X_DISPROOT_HXX_
#include "disproot.hxx"
#endif

#ifndef X_DEBUGPAINT_HXX_
#define X_DEBUGPAINT_HXX_
#include "debugpaint.hxx"
#endif

#ifndef X_DISPCLIENT_HXX_
#define X_DISPCLIENT_HXX_
#include "dispclient.hxx"
#endif

#ifndef X_DISPINFO_HXX_
#define X_DISPINFO_HXX_
#include "dispinfo.hxx"
#endif

#ifndef X_QI_IMPL_H_
#define X_QI_IMPL_H_
#include "qi_impl.h"
#endif

MtDefine(COverlaySink, DisplayTree, "COverlaySink")

// how frequently to sample window position (in samples per second)
#define OVERLAY_POLLING_RATE    (30)

//+---------------------------------------------------------------------------
//
//  Member:     CDispRoot::AddOverlay
//              
//  Synopsis:   Add the given node to the overlay list
//              
//  Arguments:  pDispNode   node to add
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

void
CDispRoot::AddOverlay(CDispNode *pDispNode)
{
    if (_aryDispNodeOverlay.Find(pDispNode) == -1)
    {
        BOOL fStartService = (_aryDispNodeOverlay.Size() == 0);
        
        _aryDispNodeOverlay.Append(pDispNode);

        if (fStartService)
        {
            StartOverlayService();
        }
    }
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispRoot::RemoveOverlay
//              
//  Synopsis:   Remove the given node from the overlay list
//              
//  Arguments:  pDispNode   node to remove
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

void
CDispRoot::RemoveOverlay(CDispNode *pDispNode)
{
    _aryDispNodeOverlay.DeleteByValue(pDispNode);

    if (_aryDispNodeOverlay.Size() == 0)
    {
        StopOverlayService();
    }
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispRoot::ScrubOverlayList
//              
//  Synopsis:   Remove all entries that are descendants of the given node
//              
//  Arguments:  pDispNode   node to query
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

void
CDispRoot::ScrubOverlayList(CDispNode *pDispNode)
{
    // if the node isn't in my tree, there's nothing to do
    if (_aryDispNodeOverlay.Size() == 0 || pDispNode->GetDispRoot() != this)
        return;

    int i = _aryDispNodeOverlay.Size() - 1;
    CDispNode **ppDispNode = &_aryDispNodeOverlay[i];

    // loop backwards, so that deletions don't affect the loop's future
    for ( ; i>=0; --i, --ppDispNode)
    {
        CDispNode *pdn;
        for (pdn = *ppDispNode; pdn; pdn = pdn->GetRawParentNode())
        {
            if (pdn == pDispNode)
            {
                RemoveOverlay(*ppDispNode);
                break;
            }
        }
    }
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispRoot::ClearOverlayList
//              
//  Synopsis:   Remove all entries
//              
//  Arguments:  none
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

void
CDispRoot::ClearOverlayList()
{
    _aryDispNodeOverlay.DeleteAll();

    StopOverlayService();
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispRoot::StartOverlayService
//              
//  Synopsis:   Start the overlay service
//              
//  Arguments:  none
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

void
CDispRoot::StartOverlayService()
{
    if (_pOverlaySink || _aryDispNodeOverlay.Size() == 0)
        return;

    _pOverlaySink = new COverlaySink(this);

    if (_pOverlaySink)
    {
        IServiceProvider *pSP = GetDispClient()->GetServiceProvider();
        
        _pOverlaySink->StartService(pSP);

        ReleaseInterface(pSP);
    }
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispRoot::StopOverlayService
//              
//  Synopsis:   Stop the overlay service
//              
//  Arguments:  none
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

void
CDispRoot::StopOverlayService()
{
    Assert(_aryDispNodeOverlay.Size() == 0);

    if (_pOverlaySink)
    {
        _pOverlaySink->StopService();

        ClearInterface(&_pOverlaySink);
    }
}


//+---------------------------------------------------------------------------
//
//  Member:     CDispRoot::NotifyOverlays
//              
//  Synopsis:   Callback from overlay timer.  Notify overlay nodes if they've
//              moved.
//              
//  Arguments:  none
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

HRESULT
CDispRoot::NotifyOverlays()
{
    HRESULT hr = S_OK;
    int i;

    for (i=_aryDispNodeOverlay.Size()-1; i>=0; --i)
    {
        _aryDispNodeOverlay[i]->GetAdvanced()->MoveOverlays();
    }

    RRETURN(hr);
}


/******************************************************************************
                COverlaySink
******************************************************************************/

COverlaySink::COverlaySink( CDispRoot *pDispRoot )
{
    _pDispRoot = pDispRoot;
    _ulRefs = 1;
}


COverlaySink::~COverlaySink()
{
}


ULONG
COverlaySink::AddRef()
{
    return ++_ulRefs;
}


ULONG
COverlaySink::Release()
{
    if ( 0 == --_ulRefs )
    {
        delete this;
        return 0;
    }
    return _ulRefs;
}


//+-------------------------------------------------------------------------
//
//  Member:     QueryInterface
//
//  Synopsis:   IUnknown implementation.
//
//  Arguments:  the usual
//
//  Returns:    HRESULT
//
//--------------------------------------------------------------------------
HRESULT
COverlaySink::QueryInterface(REFIID iid, void **ppv)
{
    if ( !ppv )
        RRETURN(E_POINTER);

    *ppv = NULL;
    switch (iid.Data1)
    {
        QI_INHERITS((ITimerSink *)this, IUnknown)
        QI_INHERITS(this, ITimerSink)
        default:
            break;
    }

    if (*ppv)
    {
        ((IUnknown *)*ppv)->AddRef();
        return S_OK;
    }

    RRETURN(E_NOINTERFACE);
}


//+----------------------------------------------------------------------------
//
//  Method:     OnTimer             [ITimerSink]
//
//  Synopsis:   Notify all overlay painters that have moved since the last time.
//
//  Arguments:  timeAdvise - the time that the advise was set.
//
//  Returns:    S_OK
//
//-----------------------------------------------------------------------------
HRESULT
COverlaySink::OnTimer( VARIANT vtimeAdvise )
{
    HRESULT hr = _pDispRoot->NotifyOverlays();

    RRETURN(hr);
}


//+-------------------------------------------------------------------------
//
//  Member:     StartService
//
//  Synopsis:   Start the timer.
//
//  Arguments:  pSP     - service provider to ask for timer service
//
//--------------------------------------------------------------------------

void
COverlaySink::StartService(IServiceProvider *pSP)
{
    HRESULT hr;
    ITimerService *pTS = NULL;

    if (_pTimer)
        return;

    hr = pSP->QueryService( SID_STimerService, IID_ITimerService, (void **)&pTS );
    
    if (!hr && pTS)
        hr = pTS->CreateTimer( NULL, &_pTimer );

    if (!hr && _pTimer)
    {
        VARIANT varTimeStart, varTimeStop, varInterval;

        _pTimer->Freeze(TRUE);

        _pTimer->GetTime(&varTimeStart);        // start now

        V_VT(&varTimeStop) = VT_UI4;            // stop never
        V_UI4(&varTimeStop) = 0;

        V_VT(&varInterval) = VT_UI4;            // fire at polling rate
        V_UI4(&varInterval) = (ULONG) (1000L / OVERLAY_POLLING_RATE);

        _dwCookie = 0;                          // in case Advise fails

        hr = _pTimer->Advise(varTimeStart, varTimeStop, varInterval,
                                0, (ITimerSink*)this, &_dwCookie);

        _pTimer->Freeze(FALSE);
    }

    ReleaseInterface(pTS);
}


//+-------------------------------------------------------------------------
//
//  Member:     StopService
//
//  Synopsis:   Stop the timer.
//
//  Arguments:  none
//
//--------------------------------------------------------------------------

void
COverlaySink::StopService()
{
    if (_pTimer && _dwCookie)
    {
        _pTimer->Unadvise(_dwCookie);
    }

    _dwCookie = 0;
    ClearInterface(&_pTimer);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\display\float2int.cxx ===
//+---------------------------------------------------------------------------
//
//  Microsoft Internet Explorer
//  Copyright (C) Microsoft Corporation, 2000
//
//  File:       float2int.cxx
//
//  Contents:   routines to accelerate float/double -> int conversion
//
//
// The float- (or double-) -to-int conversion does not look like a big
// problem. However it hides some underwater rocks that required following
// introduction.

// The standard C++ double-to-int conversion is often unacceptable
// because of two reasons:
//
// - it works slow (much slower than floating point addition and multiplication);
// - it makes so-called "chopping" conversion, that is irregular.

// The (int)x or int(x), where x is floating-point expression, is transformed
// by MS C++ compilers to the call to service routine
//      int _ftol(double)
// that provides "nearest-to-zero" rounding conversion:
//      int(2.999) == 2;     int(-2.999) == -2;
//      int(3.000) == 3;     int(-3.000) == -3;
//      int(3.001) == 3;     int(-3.001) == -3;
// and so on.
// This irregularity, being used for graphics, eventually distorts images.
// The rounding-to-near can be obtained as
//      int Round1(double d) { return d < 0 ? int(d-.5) : int(d+.5); }
// or 
//      int Round2(double d) { return int(floor(d+.5)); }
//
// Note: Round1() also is "a little" irregular: the positive and negative
// half-integers are rounded in oppose directions (out-of-zero).
//      Round1(-1.501) == -2;
//      Rounf1(-1.500) == -2; <-------- rounded down
//      Rounf1(-1.499) == -1;
//      ..........
//      Round1( 1.499) ==  1;
//      Rounf1( 1.500) ==  2; <-------- rounded up
//      Rounf1( 1.500) ==  2;
// The attempts to invent regular Round1-like expression, say
//      int Round3(double d) { return d < 0 ? -int(.5-d) : int(d+.5); }
// give nothing - one can ensure in it by careful thinking. So Round2() routine
// is preferrable, in spite of it is approxinately thrice slower than int(),
// which, in turn, is 20 times slower than processor actually can do it.
//
// The typical floating point processor (486, Pentiums and others) have four
// rounding modes:
//
// near: round to the nearest integer
// down: round to nearest integer less or equal than origin
// up:   round to nearest integer greater or equal than origin
// chop: round to nearest integer toward zero
//
// Rounding takes effect each time when data are moved from fp register to
// memory - not only when converting to integer, but also when storing double
// or float value (internal 80-bit representation is rounded to 64-bit double
// or 32-bit float value).
// In Windows (likely in every OS) the default processor state is rounding-near
// mode. What actually int() do is:
// - change processor state to chop mode for a moment,
// - convert-to-int-and-store value to memory, and then
// - restore processor mode.
// The mode switch operation brakes Pentium conveyers and therefore
// is slow, and that is the reason why int() works slow.
//
// "down" mode works like floor(), "up" - like ceil().
// WARNING: the "near" mode looks good - but it is irregular!
// The matter is it rounds half-integers to nearest even number:
//  proc_near(1.499) == 1
//  proc_near(1.500) == 2   <------ rounded up
//  proc_near(1.501) == 2
//  .........
//  proc_near(2.499) == 2
//  proc_near(2.500) == 2   <------ rounded down
//  proc_near(2.501) == 3
//  .........
//  proc_near(3.499) == 3
//  proc_near(3.500) == 4   <------ rounded up
//  proc_near(3.501) == 4

// Such manner is targeted to average error balancing, but in graphics
// it can cause images wriggling.


#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_FLOAT2INT_HXX_
#define X_FLOAT2INT_HXX_
#include "float2int.hxx"
#endif

#ifdef _M_IX86

                                        // corresponding values in _control87
//Rounding
#define F2I_ROUNDING_NEAR        0x000  //_RC_NEAR 0x00000000
#define F2I_ROUNDING_DOWN        0x400  //_RC_DOWN 0x00000100
#define F2I_ROUNDING_UP          0x800  //_RC_UP   0x00000200
#define F2I_ROUNDING_CHOP        0xC00  //_RC_CHOP 0x00000300
#define F2I_ROUNDING_MASK        0xC00  //_MCW_RC  0x00000300

// the following definitions reserved for future needs
//Precision control
#define F2I_PRECISION_24         0x000  //_PC_24  0x00020000
#define F2I_PRECISION_53         0x200  //_PC_53  0x00010000
#define F2I_PRECISION_64         0x300  //_PC_64  0x00000000
#define F2I_PRECISION_MASK       0x300  //_MCW_PC 0x00030000 

//Interrupt exception
#define F2I_EXCEPTION_INVALID    0x001  //_EM_INVALID    0x00000010
#define F2I_EXCEPTION_DENORMAL   0x002  //_EM_DENORMAL   0x00080000
#define F2I_EXCEPTION_ZERODIVIDE 0x004  //_EM_ZERODIVIDE 0x00000008
#define F2I_EXCEPTION_OVERFLOW   0x008  //_EM_OVERFLOW   0x00000004
#define F2I_EXCEPTION_UNDERFLOW  0x010  //_EM_UNDERFLOW  0x00000002
#define F2I_EXCEPTION_INEXACT    0x020  //_EM_INEXACT    0x00000001
#define F2I_EXCEPTION_MASK       0x03F  //_MCW_EM        0x0008001F


/* reserved universal version
CRoundingMode::CRoundingMode(int mode)
{
    unsigned cw;
    _asm fstcw cw;
    _cw_saved = cw & F2I_ROUNDING_MASK;
    cw = cw & ~F2I_ROUNDING_MASK | mode & F2I_ROUNDING_MASK;
    _asm fldcw cw;
}

CRoundingMode::~CRoundingMode()
{
    unsigned cw;
    _asm fstcw cw;
    cw = cw & ~F2I_ROUNDING_MASK | _cw_saved;
    _asm fldcw cw;
}*/

CF2I_Flow::CF2I_Flow()
{
    unsigned cw;
    _asm fstcw cw;
    _cw_saved = cw & F2I_WORK_MASK;
    cw = cw & ~F2I_WORK_MASK | F2I_WORK_DOWN;
    _asm fldcw cw;
}

CF2I_Flow::~CF2I_Flow()
{
    unsigned cw;
    _asm fstcw cw;
    cw = cw & ~F2I_WORK_MASK | _cw_saved;
#if WINDOWS_MISSING_CW_DEFENCE == 1
    _asm fclex;
#endif //WINDOWS_MISSING_CW_DEFENCE
    _asm fldcw cw;
}

#if F2I_USE_INLINE_ASSEMBLER == 0 || DBG == 1
_declspec(naked) int _stdcall CF2I_Quick::_IntFloor(double d)
{
    _asm
    {
        sub esp, 8              // make room in stack
        fstcw [esp+4]           // store processor control word
        fld qword ptr [esp+12]  // get d
        mov eax, [esp+4]        // pcw to eax
        and eax,~F2I_WORK_MASK  // ax &= ~F2I_WORK_MASK
        or eax,F2I_WORK_DOWN    // ax |= F2I_WORK_DOWN
        mov [esp], eax          // put new pcw to memory
        fldcw [esp]             // and load it into pcw (this switches processor to proper rounding mode)
        fistp dword ptr [esp]   // convert d to integer and store in memory
#if WINDOWS_MISSING_CW_DEFENCE == 1
        fclex                   // clear exception flags
#endif //WINDOWS_MISSING_CW_DEFENCE
        fldcw [esp+4]           // wait for result and restore processor mode
        mov eax,[esp]           // result to eax
        add esp,8               // clear stack
        ret 8                   // return to caller using _stdcall convention
    }
} 

_declspec(naked) int _stdcall CF2I_Quick::_IntCeil(double d)
{
    _asm
    {
        sub esp, 8              // make room in stack
        fstcw [esp+4]           // store processor control word
        fld qword ptr [esp+12]  // get d
        mov eax, [esp+4]        // pcw to eax
        and eax,~F2I_WORK_MASK  // ax &= ~F2I_WORK_MASK
        or eax,F2I_WORK_UP      // ax |= F2I_WORK_UP
        mov [esp], eax          // put new pcw to memory
        fldcw [esp]             // and load it into pcw (this switches processor to proper rounding mode)
        fistp dword ptr [esp]   // convert d to integer and store in memory
#if WINDOWS_MISSING_CW_DEFENCE == 1
        fclex                   // clear exception flags
#endif //WINDOWS_MISSING_CW_DEFENCE
        fldcw [esp+4]           // wait for result and restore processor mode
        mov eax,[esp]           // result to eax
        add esp,8               // clear stack
        ret 8                   // return to caller using _stdcall convention
    }
} 

#if DBG == 0
_declspec(naked) int _stdcall CF2I_Flow::_IntOf(double d)
{
    _asm
    {
        fld qword ptr [esp+4]   // get d
        fistp dword ptr [esp+4] // convert d to integer and store in memory
        wait                    // wait for result
        mov eax, [esp+4]        // result to eax
        ret 8                   // return to caller using _stdcall convention
    }
}

#else //DBG == 1

int _stdcall CF2I_Flow::_IntOf(double d)
{
    unsigned cw;
    _asm fstcw cw;
    AssertSz((cw & F2I_WORK_MASK) == F2I_WORK_DOWN, "Wrong processor state");
    // This assertion can appear if F2I_FLOW was not properly declared
    
    _asm fld d      // get d
    int r;
    _asm fistp r    // convert d to integer and store in memory
    _asm wait       // wait for r
    return r;
} 
#endif //DBG
#endif //F2I_NO_INLINE_ASSEMBLER

#endif //_M_IX86
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\display\pubprint.cxx ===
/**************************************************************************
*
*                           PUBPRINT.CXX
*
*  PUBLISHER CODE TO HANDLE PRINTING TO AN INVERTED DC PORTED TO QUILL
*      
*  This is necessary because of the following reasons...
*
*      *  some metafiles are naughty and cannot be rendered to
*         an upside down DC because they use non rotated clip
*         rects (actually a windows bug) and clip themselves
*         out of existance. They are handled by patching up the
*         parameters of the INTERSECTCLIPRECT GDI call.
*
*      *  DJ5xxx and BJxxx series printer drivers GPF when stretchblt'ing
*         with inverted extents. They are handled by inverting scanline
*         by scanline into a DIB.
*
*      *  ExtTextOut calls to rotated DC's do not work correctly. They
*         are handled by setting the font's escapement to 180deg           
*
*  This code modified from Publishers GRAFDRAW.C to work in Quill code
*  base by warrenb (09/09/1994)
*
*  Changes from Publisher code base
*       Always called in rotated case so tests for rotation removed
*       Some CommPrintf's removed (no quill equiv.)
*       Raster font capability removed.
*       Special cased Monochrome capability removed (FColorStretchDibHack)
*         handles Monochrome perfectly well. (removed ~400 lines)
*
*  Notes:
*       This code *may* be completely replaced in Win32 by just doing a 
*       PlayMetafileRecord in the main enumeration routine. Investigate.
*       We do not handle the following records correctly...
*       META_BITBLT, META_SETDIBTODEV, META_STRETCHBLT, META_DIBBITBLT
*       META_TEXTOUT but good metafiles don't usually use these.           
*
*       Copyright (C)1994 Microsoft Corporation. All rights reserved.
*
***************************************************************************/

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_XGDI2_HXX_
#define X_XGDI2_HXX_
#include "xgdi2.hxx"
#endif

#ifndef X_PUBROT_HXX_
#define X_PUBROT_HXX_
#include "pubrot.hxx"
#endif

#ifndef X_PUBPRINT_HXX_
#define X_PUBPRINT_HXX_
#include "pubprint.hxx"
#endif

#ifndef X_DBGMETAF_HXX_
#define X_DBGMETAF_HXX_
#include "dbgmetaf.hxx"
#endif

BOOL fBruteFlipping = fTrue;

extern BOOL FPlayRotatedMFR(HDC hdc, LPHANDLETABLE lpHTable, LPMETARECORD lpMFR, int nObj, EMFP *lpemfp);

/****************************************************************************\
 *                                                                          *
 * %%Function: FStepMetaPrint       %%Owner: EdR       %%Reviewed: 12/21/93 *
 *                                                                          *
 * Parameters:                                                              *
 *    hdc           - hdc to play record on                                 *
 *    lpHTable      - Handle table                                          *
 *    lpMFR         - metafile record                                       *
 *    nObj          - Number of active objects                              *
 *    lpemfp        - long ptr to enum meta file params                     *
 *                                                                          *
 * Description:                                                             *
 *    Graphic enumeration routine.                                          *
 *    Can display executing metafile commands through debug menu.           *
 *    For use only when printing.                                           *
 *                                                                          *
 *    Modified for Quill - warrenb:                                         *
 *      . bad records now will cause harmless  assert.                      *
 *      . does not use Monochrome routines, lets color routines handle it   *
 *                                                                          *
 * Port to quill:                                                           *
 *    Owner: warrenb                Reviewed: 00/00/00                      *
\****************************************************************************/

int CALLBACK FStepMetaPrint(HDC hdc, 
							LPHANDLETABLE lpHTable, 
							LPMETARECORD lpMFR, 
							int nObj,
							LPARAM lparam)
{
	EMFP	*pemfp = (EMFP *) lparam;
    BOOL    fReturn = fTrue;

    pemfp->lcNumRecords++;

	TraceMetaFunc(lpMFR->rdFunction, pemfp->lcNumRecords); // Trace it in DEBUG if TRACE_META_RECORDS is defined.

	// Setup handling and filtering of metarecords
	switch (lpMFR->rdFunction)
		{

		{ // BUG 4423
		// Not all devices support the PatBlt function. Moreover, many printers handle it
		// in different way. Using this simple code (for UNROTATED case) improves print output
		// for some printer drivers for Win 95 and (always?) does not makes difference for
		// NT or for display. So we do best we can for this record.
		// NOTE 1: The way we (and Publisher) handle META_PATBLT for rotated images will give
		// incorrect result when ROP parameter is PATINVERT or DSTINVERT. I don't think that
		// there is any workaround.
		// NOTE 2: I didn't find any metafiles with META_PATBLT in real world. Only metafiles
		// created specialy for testing  ( see \\alchemy\gold\graphics\wmf\Test Suite\WMFCreatNT3.51(OR Win95))
		// have that record. If that record is not easy to play, it could be not easy to create
		// using todays software.. 
		// SashaT
		case META_PATBLT:
			if (!pemfp->pmrs->ang)
				{
				unsigned int iValueThisDC = GetDeviceCaps(hdc,  RASTERCAPS);
				AssertSz(iValueThisDC & RC_BITBLT, "Device does not support PatBlt");
				if (!(iValueThisDC & RC_BITBLT))
					{
					AssertSz(FALSE, "Device does not support PatBlt");
					break; // Will fail in PlayMetaRecord
					}

				DWORD dwRop = MAKELONG(lpMFR->rdParm[0], lpMFR->rdParm[1]);

				short nLeft = lpMFR->rdParm[5];
				short nTop = lpMFR->rdParm[4];
				short nWidth = lpMFR->rdParm[3];
				short nHeight = lpMFR->rdParm[2];

				return PatBlt(hdc, nLeft, nTop, nWidth, nHeight, dwRop);
				}
		break;
		} // END of BUG 4423

	case META_SETSTRETCHBLTMODE:
		// Do not let metafiles do this GDI call because it can override Quill's
		// SetStretchBltMode(COLORONCOLOR); which ensures smooth drawing of bitmaps
		// resized smaller than their orginal.
        goto LMFRHandled;
		break;

	case META_SETVIEWPORTORG:
	case META_SETVIEWPORTEXT:
		// Don't let the metafile reposition itself.
        goto LMFRHandled;
		break;

	case META_SELECTPALETTE:
	case META_REALIZEPALETTE:
	case META_ANIMATEPALETTE:
	case META_SETPALENTRIES:
	case META_RESIZEPALETTE:
		// We are disabling any metafile record which attempts a palette change.
        goto LMFRHandled;
		break;

	case META_ESCAPE:
		// The META_ESCAPE function returns false if it isn't supported, but
		// we don't care.  We also don't need to try to rotate it.
		PlayMetaFileRecord(hdc, lpHTable, lpMFR, nObj);
		goto LMFRHandled; // We _WILL_ return true!

    case META_ARC:
    case META_CHORD:
    case META_PIE:
		if (!(pemfp->qflip & qflipHorz) != !(pemfp->qflip & qflipVert))
			{
			SwapValNonDebug(Param(0), Param(2));
			SwapValNonDebug(Param(1), Param(3));
			}
		break;
		}

    // Metarecord rotation
#ifdef NOTYET // FUTURE alexmog (6/9/99) to be enabled if grafrot.cxx is used
    if (pemfp->pmrs->ang && FPlayRotatedMFR(hdc, lpHTable, lpMFR, nObj, pemfp))
        {
        fReturn = pemfp->fMFRSucceeded;
        goto LMFRHandled;
        }
#else
	Assert(FALSE);
#endif

	// Nonrotated metarecord handling (generally flipped/inverted cases)
    switch(lpMFR->rdFunction)
        {
        case META_STRETCHDIB:
        case META_STRETCHBLT:
        case META_DIBSTRETCHBLT:
        case META_SETDIBTODEV:
        case META_DIBBITBLT:
        case META_BITBLT:
	        if (pemfp->fPrint)	// NOTE: in Publisher, it is called always
	            {
	            SDIB FAR * lpsdib = NULL;
	            int iwDySrc;

	            if( lpMFR->rdFunction == META_STRETCHDIB )
	                iwDySrc = 3;
	            else if( lpMFR->rdFunction == META_STRETCHBLT ||
	                     lpMFR->rdFunction == META_DIBSTRETCHBLT )
	                iwDySrc = 2;
	            else if( lpMFR->rdFunction == META_SETDIBTODEV )
	                iwDySrc = 0;
	            else
	                break;

	            lpsdib = (SDIB FAR *)&Param(iwDySrc);
	            if ( (lpMFR->rdFunction == META_STRETCHDIB || 
	                  lpMFR->rdFunction == META_DIBSTRETCHBLT) &&
	                (FColorStretchDibHack(hdc, lpHTable, lpMFR, nObj, lpsdib))  )
	                {
	                fReturn = fTrue;
	                break;
	                }
	            }
            goto LDefault;

        case META_INTERSECTCLIPRECT:
            /* When printing on upside down pages of a greeting or tent
                card, the viewport extents will be negative.
                IntersectClipRect records will have to have their
                coordinates reversed (top <-> bottom, left <-> right)
                to be compatible with the current clip rgn. */
            if (pemfp->fFlipped && GetMapMode(hdc) == MM_ANISOTROPIC)
                {
                CPoint     dptVExt;

				AssertSz(pemfp->fPrint, "Currently this is only done while printing.");

                GetViewportExtEx(hdc, (SIZE *) &dptVExt);

                if (dptVExt.x < 0 || dptVExt.y < 0)
                    {
                    int     xdvLeft;
                    int     xdvRight;
                    int     ydvTop;
                    int     ydvBottom;

                    xdvLeft = Param(3);
                    ydvTop = Param(2);
                    xdvRight = Param(1);
                    ydvBottom = Param(0);

                    if (dptVExt.x < 0)
                        SwapValNonDebug(xdvLeft, xdvRight);
                    if (dptVExt.y < 0)
                        SwapValNonDebug(ydvTop, ydvBottom);

                    fReturn = (IntersectClipRect(hdc, xdvLeft, ydvTop, xdvRight, ydvBottom) != ERROR);
					AssertSz(fReturn, "Failed to intersect clip region");
                    break;
                    } /* Negative viewport extents */
                } /* Flipped printing and Anisotropic */
			else
				{
				if (FWindows9x() && pemfp->qflip)
					{
					// We'll handle META_INTERSECTCLIPRECT on Windows 95 for flipped images without passing it to the
					// PlayMetaFile, because on Windows 95 PlayMetaFile for META_INTERSECTCLIPRECT makes current clipping
					// rectangle empty for flipped images. Looks like Win 95 cannot intersect rectangles if one of rectangles
					// has left greater than right.
					// META_INTERSECTCLIPRECT widely used in Adobe Ilustrator. Many other windows metafiles (source unknown)
					// don't have META_INTERSECTCLIPRECT. SashaT
						
#ifdef DEBUG
					BLOCK
						{
						CPoint dptVExt;
						GetViewportExtEx(hdc, (SIZE *) &dptVExt);

						AssertSz(dptVExt.x < 0 || dptVExt.y < 0, "Implemented for flipped images only");

						RECT rcClip;
						int iRes = GetClipBox(hdc, &rcClip.rect);

						int iDummy;
						switch (iRes)
							{
							case ERROR:
								WarningSz(fFalse, "GetClipBox returned ERROR");
								break;
							case NULLREGION:
								iDummy = iRes;
								break;
							case SIMPLEREGION:
								iDummy = iRes;
								break;
							case COMPLEXREGION:
								iDummy = iRes;
								break;
							}
						}
#endif // DEBUG
					POINT rgpt[4];
					rgpt[0].x = Param(3);
					rgpt[0].y = Param(2);

					rgpt[1].x = Param(1);
					rgpt[1].y = Param(2);
					
					rgpt[2].x = Param(1);
					rgpt[2].y = Param(0);

					rgpt[3].x = Param(3);
					rgpt[3].y = Param(0);

					BeginPath(hdc);
					Polygon(hdc, rgpt, 4);  // Don't use Rectangle() because it will make empty clipping region.
					EndPath(hdc);
					return SelectClipPath(hdc, RGN_AND);
					}
				}

            /* Normal case, pass the clip record to PlayMetaFile */
            goto LDefault;

        case META_EXTTEXTOUT:
        	if (pemfp->fFlipped)
				{
				AssertSz(pemfp->fPrint, "Currently this is only done while printing.");
                fReturn = FMetaTextOutFlip(hdc, (WORD *)&Param(0),
                   lpMFR->rdSize - (sizeof(DWORD)+sizeof(WORD))/sizeof(WORD));
				AssertSz(fReturn, "FMetaTextOutFlip failed");
				}
            else
            	goto LDefault;
            break;  

#ifdef METAFILE_SQUAREEDGES
#include "grafrot.hxx"
        case META_CREATEPENINDIRECT:
            {
            // We create the Pen ourself to use the extendid pen fetures (square edges)
            DWORD Style = ((LOGPEN16*)lpMFR->rdParm)->lopnStyle;
			DWORD Width = ((LOGPEN16*)lpMFR->rdParm)->lopnWidth.x;
			COLORREF crColor = ((LOGPEN16*)lpMFR->rdParm)->lopnColor;

            if (Width == 0)
				Width = 1;	// Width must be at least one

			LOGBRUSH logBrush;
			logBrush.lbStyle = BS_SOLID;
			logBrush.lbColor = crColor;
			logBrush.lbHatch = 0;

			if ( (Width > 1) && (Style == PS_SOLID || Style == PS_INSIDEFRAME) )
				Style = Style | PS_GEOMETRIC|PS_ENDCAP_FLAT|PS_JOIN_MITER;

			HPEN hPen = ExtCreatePen(Style, Width, &logBrush, 0, NULL);

			fReturn = FALSE;
			if (hPen)
				{
				int i;
				for (i=0; i<nObj; i++)
					{
					if(lpHTable->objectHandle[i] == NULL)
						{
						lpHTable->objectHandle[i] = hPen;
						fReturn = TRUE;
						break;
						}
					}
				}
            break;
            }
#endif

LDefault:
        default:
			{
#ifdef DEBUG
			BOOL fResult = PlayMetaFileRecord(hdc, lpHTable, lpMFR, nObj);
			if (!fResult)
				{
				// One of the reasons it may fail: "Your file waiting to be printed was deleted" bug 3895
				// Sure, we don't have to assert on this.
				DWORD dErr = GetLastError();
				if (dErr) 
				    {
				    AssertSz(FALSE, "PlayMetaFileRecord() failed");
					// DPF("PlayMetaFileRecord() failed, Last Error == 0x%x\n", dErr);
			        }
				fReturn = fFalse;
				goto LMFRHandled;
				}
#else
			if (!PlayMetaFileRecord(hdc, lpHTable, lpMFR, nObj))
				{
				fReturn = fFalse;
				goto LMFRHandled;
				}
#endif
			}
            break;

        } /* switch */
        
LMFRHandled:

	// Metarecord cleanup handling
	switch (lpMFR->rdFunction)
		{
    case META_ARC:
    case META_CHORD:
    case META_PIE:
		if (!(pemfp->qflip & qflipHorz) != !(pemfp->qflip & qflipVert))
			{
			SwapValNonDebug(Param(0), Param(2));
			SwapValNonDebug(Param(1), Param(3));
			}
		break;
		}

	AssertSz(fReturn, "FStepMetaPrint failed");
    return fReturn;
} /* FStepMetaPrint */

/****************************************************************************\
 *                                                                          *
 * %%Function: CbDibHeader          %%Owner: DavidVe   %%Reviewed: 00/00/00 *
 *                                                                          *
 * Parameters:                                                              *
 *    lpbi - long pointer to a BITMAPINFOHEADER                             *
 *                                                                          *
 * Description: Determine the size of the DIB header + RGB data             *
 *              (the offset to the bitmap bits array)                       *
 *                                                                          *
 * Port to quill:                                                           *
 *    Owner: warrenb                Reviewed: 00/00/00                      *
\****************************************************************************/
int CbDibHeader(LPBITMAPINFOHEADER lpbi)
{
    return CbDibColorTable(lpbi) + sizeof(BITMAPINFOHEADER);    
}    /* CbDibHeader */

/****************************************************************************\
 *                                                                          *
 * %%Function: CbDibColorTable      %%Owner: DavidVe   %%Reviewed: 00/00/00 *
 *                                                                          *
 * Parameters:                                                              *
 *    lpbi - long pointer to a BITMAPINFOHEADER                             *
 *                                                                          *
 * Description: Determine the size of the DIB colortable                    *
 *              Does not work for OS/2 Dibs, i.e. BITMAPCOREHEADER          *
 *              The number of bitmap planes must be 1.                      *
 *              The number of Bits/Pixel must be 1, 4, 8 or 24              *
 *                                                                          *
 * Port to quill:                                                           *
 *    Owner: warrenb                Reviewed: 00/00/00                      *
\****************************************************************************/
int CbDibColorTable(LPBITMAPINFOHEADER lpbi)
{
    WORD cClr = 0;

    PubAssert(lpbi->biSize == sizeof(BITMAPINFOHEADER));
    if (lpbi->biPlanes != 1)
        {
        PubAssert(fFalse);
        return 0;
        }
        
    if (lpbi->biClrUsed == 0)
        {
        if (  lpbi->biBitCount == 1 || lpbi->biBitCount == 4 || lpbi->biBitCount == 8)
           cClr = (WORD) (1 << lpbi->biBitCount);
        else
           PubAssert(lpbi->biBitCount == 24);
        }
    else
        {
        PubAssert(lpbi->biClrUsed < (long)UINT_MAX);
        cClr = (WORD)lpbi->biClrUsed;
        }        
    return (cClr * cbRGBQUAD);
}    /* CbDibColorTable */

/****************************************************************************\
 *                                                                          *
 * %%Function: FPlayDibFlipped       %%Owner: DavidVe  %%Reviewed: 00/00/00 *
 *                                                                          *
 * Parameters:  HDC         hdc to hack StretchDib call to (printer DC)     *
 *              lpMFR       long pointer to metafile record                 *
 *                                                                          *
 * Description:                                                             *
 *       Function which takes a hdc and a lpMFR containing a METASTRETCHDIB *
 *       record and StretchDibBlts the DIB upside down by creating a copy   *
 *       of the DIB mirrored along both axes.                               *
 *                                                                          *
 *       Only works with 16 and 256 color dibs.  Monochrom dibs are         *
 *       supported by FMonoStretchDibHack.  24-bit dibs are not supported.  *
 *                                                                          *
 * Return:                                                                  *
 *      fTrue if Successful, fFalse otherwise                               *
 *                                                                          *
 * Port to quill:                                                           *
 *    Owner: warrenb                Reviewed: 00/00/00                      *
 *   . dependancy on large static bit-flipping lookup table removed         *
\****************************************************************************/
BOOL FPlayDibFlipped(HDC hdc, LPMETARECORD lpMFR, BOOL fFlipHorz, BOOL fFlipVert)
{
    LPBITMAPINFOHEADER lpbmi;
    BITMAPINFOHEADER   bmiSav;
    LPSDIB             lpsdib;
    HANDLE  volatile ghdibDst = NULL;
    HPSTR   hpBufSrc = NULL;
    HPSTR   hpBufDst = NULL;
    PubDebug(HPSTR   hpBufSrcBtm = NULL;)
    HPSTR   hpBufDstBtm = NULL;
    DWORD   cbSclnSrc, cbPixelSclnSrc, cbPaddingDst;
    DWORD   cbSclnDst, cbPixelSclnDst, cbPaddingSrc;
    DWORD   cbDibSrc, cbDibDst;
    int     dxmAdjust0;
    int     dxmAdjust1;
    int     dxmAdjust2;
    int     nScanLines;
    BOOL    f1Bit;     
    BOOL    f4Bit;
    BOOL    f8Bit;
    BOOL    f24Bit;
    BOOL    fSuccess = fFalse;
    unsigned int fuColorUse;    

	AssertEx(fFlipHorz || fFlipVert);

    PubAssert(hdc   != NULL);
    PubAssert(lpMFR != NULL);
    PubAssert(lpMFR->rdFunction == META_STRETCHDIB || lpMFR->rdFunction == META_DIBSTRETCHBLT);

    //Get pointer to BITMAPINFOHEADER, and sav a copy
    bmiSav = *(lpbmi = (LPBITMAPINFOHEADER)&(lpMFR->rdParm[10 + (lpMFR->rdFunction==META_STRETCHDIB)]));

    // Bail if compressed
    if(bmiSav.biCompression != BI_RGB)
        return fSuccess;

    // SDIB, beautiful SDIB
    lpsdib = (LPSDIB)&(lpMFR->rdParm[2 + (lpMFR->rdFunction==META_STRETCHDIB)]);
    PubAssert(lpsdib->xSrc>=0 && lpsdib->ySrc>=0 && lpsdib->dxSrc>=0 && lpsdib->dySrc>=0 &&
              lpsdib->xDst>=0 && lpsdib->yDst>=0);
    PubAssert(((LONG)(lpsdib->xSrc + lpsdib->dxSrc)) <= (LONG)lpbmi->biWidth);
    PubAssert(((LONG)(lpsdib->ySrc + lpsdib->dySrc)) <= (LONG)lpbmi->biHeight);

    // These value cached for optimization
    PubAssert(lpbmi->biPlanes == 1);
    f1Bit = f4Bit = f8Bit = f24Bit = dxmAdjust0 = dxmAdjust1 = dxmAdjust2 = fFalse;
    switch (bmiSav.biBitCount)
        {
        default:
            PubAssert(fFalse);
        case 8:
            f8Bit = fTrue;
            break;
        case 1:
            f1Bit = fTrue;
            dxmAdjust0 = lpsdib->xSrc % 8;
            dxmAdjust1 = (lpsdib->xSrc + lpsdib->dxSrc) % 8;
            dxmAdjust2 = (8 - dxmAdjust1) % 8;              
            break;
        case 4:
            f4Bit = fTrue;
            dxmAdjust0 = lpsdib->dxSrc % 2;                // start on odd nibble?
            dxmAdjust1 = (lpsdib->xSrc + lpsdib->dxSrc) % 2; // end on odd nibble?
            dxmAdjust2 = dxmAdjust1;
            break;
        case 24:
            f24Bit = fTrue;
            break;
        } // switch
        
    // Get ptr to the bits of the Src DIB 
    hpBufSrc = (HPSTR)LpAddLpCb((LPSTR)lpbmi, (DWORD)CbDibHeader(lpbmi));

    cbSclnSrc      = (((bmiSav.biWidth * bmiSav.biBitCount) + 31) >> 5) << 2;
    cbPixelSclnSrc = ( (bmiSav.biWidth * bmiSav.biBitCount) + 7) >> 3;
    cbPaddingSrc   = cbSclnSrc - cbPixelSclnSrc;
    cbDibSrc       = cbSclnSrc * bmiSav.biHeight;
    //Assert(cbDibSrc == bmiSav.biSizeImage); /* Bogus Assert, bmiSav.biSizeImage can be 0 */
    
    cbSclnDst      = ((((lpsdib->dxSrc + dxmAdjust0 + dxmAdjust2) * bmiSav.biBitCount) + 31) >> 5) << 2;
    cbPixelSclnDst = ( ((lpsdib->dxSrc + dxmAdjust0 + dxmAdjust2) * bmiSav.biBitCount) + 7) >> 3;
    cbPaddingDst   = cbSclnDst - cbPixelSclnDst;
    cbDibDst       = cbSclnDst * lpsdib->dySrc;
    //Assert(cbDibDst <= bmiSav.biSizeImage); /* Bogus Assert, bmiSav.biSizeImage can be 0 */
    
    lpbmi->biWidth  = lpsdib->dxSrc + dxmAdjust0;
    lpbmi->biHeight = lpsdib->dySrc;
    lpbmi->biSizeImage = 0; /* Valid for a non-compressed bmp */
    
    /* Make sure DIB is not compressed and allocate a global block to
    ** place the flipped DIB. (Clear room for optimization here)  Also, 
    ** we can allocate the block as moveable since it wont persist past
    ** this function (i.e. no chance for it to move)
    */
    ghdibDst = GhAllocLcbGrf(cbDibDst, GHND);
    if (!ghdibDst) 
        goto LCleanUp;
        
    if ((hpBufDst = (HPSTR) LpLockGh(ghdibDst)) == NULL)
        goto LCleanUp;
        
    PubDebug(hpBufSrcBtm = hpBufSrc + cbDibSrc - 1);
    hpBufDstBtm = hpBufDst + cbDibDst - 1;
    PubAssert( (DWORD)(hpBufDstBtm - hpBufDst + 1) <= LcbSizeGh(ghdibDst));

    {
    SCLN sclnMin = 0;
    SCLN sclnMac = lpsdib->dySrc;
    SCLN sclnCur = 0;
    HPSTR hpbSrc  = NULL;
    HPSTR hpbDst  = NULL;
    DWORD  cbPixelsCopied;
    int    cbRPixel = (f24Bit) ? 3 : 1;

    for (sclnCur = sclnMin ; sclnCur < sclnMac ; sclnCur++)
        {
        if (fFlipHorz)
        	{
	        for (hpbSrc = hpBufSrc + ( ((fFlipVert ? sclnCur : (sclnMac - 1 - sclnCur)) + (DWORD)lpsdib->ySrc) * (DWORD)cbSclnSrc)
	                                  + (((DWORD)lpsdib->xSrc * lpbmi->biBitCount) >> 3)
	            ,hpbDst = hpBufDstBtm - ((DWORD)sclnCur * cbSclnDst) - cbPaddingDst - cbRPixel + 1
	            ,cbPixelsCopied = 0L
	            ;cbPixelsCopied < cbPixelSclnDst 
	            ;hpbSrc += cbRPixel
	            ,hpbDst -= cbRPixel
	            ,cbPixelsCopied += cbRPixel
	            )
	            {
	            PubAssert(hpbSrc >= hpBufSrc);
	            PubAssert(hpbSrc <= hpBufSrcBtm);
	            PubAssert(hpbDst >= hpBufDst);
	            PubAssert(hpbDst <= hpBufDstBtm);
	            if (f1Bit)
	            {
	                BYTE bSrc;
	                bSrc=(BYTE) *hpbSrc;
	                *hpbDst = ((bSrc&0x01)<<7) | ((bSrc&0x02)<<5) | ((bSrc&0x04)<<3) | ((bSrc&0x08)<<1) |
	                          ((bSrc&0x10)>>1) | ((bSrc&0x20)>>3) | ((bSrc&0x40)>>5) | ((bSrc&0x80)>>7);
	            }
	            else if (f4Bit)
	            {
	                BYTE bSrc;
	                bSrc=(BYTE) *hpbSrc;
	                *hpbDst = ((bSrc&0x0F)<<4) | ((bSrc&0xF0)>>4);
	            }
	            else if (f8Bit)
	                *hpbDst = *hpbSrc;
	            else
	                {
	                PubAssert(f24Bit);
	                *((HPPIX24)hpbDst) = *((HPPIX24)hpbSrc);
	                }
            	} //for
	        PubAssert(cbPixelsCopied == cbPixelSclnDst);
			}
		else
			{
			CopyLpb(hpBufSrc + (fFlipVert ? (sclnMac - 1 - sclnCur) : sclnCur) * (DWORD)cbSclnSrc,
					hpBufDst + sclnCur * (DWORD)cbSclnDst, cbSclnSrc);
			}
		} //for
	}

    fuColorUse=lpMFR->rdParm[2];
    if (fuColorUse!=DIB_PAL_COLORS && fuColorUse!=DIB_RGB_COLORS) 
        fuColorUse=DIB_RGB_COLORS;

#ifdef DEBUG
	BLOCK
		{
		CPoint dptdVPSav;
    	GetViewportExtEx(hdc, (LPSIZE)&dptdVPSav);
		AssertSz(dptdVPSav.x > 0, "BLTing to negative extents");
		AssertSz(dptdVPSav.y > 0, "BLTing to negative extents");
		}
#endif // DEBUG

    nScanLines=StretchDIBits(hdc,
                             lpsdib->xDst , lpsdib->yDst ,
                             lpsdib->dxDst, lpsdib->dyDst,
                             0 + dxmAdjust2, 0,
                             lpsdib->dxSrc, lpsdib->dySrc,
                             (LPBYTE)hpBufDst,
                             (LPBITMAPINFO)lpbmi,   
                             fuColorUse, 
                             *((DWORD FAR *)&lpMFR->rdParm[0])); 
                             
    fSuccess= (nScanLines == lpsdib->dySrc);

LCleanUp:
    if (hpBufDst != NULL)
        UnlockGh(ghdibDst);
    if (ghdibDst != NULL)
        {
        PubAssert(!FLockedGh(ghdibDst));
        FreeGh(ghdibDst);
        ghdibDst = NULL;
        }
    *lpbmi = bmiSav;        
    return fSuccess;
} /* FPlayDibFlipped */

/****************************************************************************\
 *                                                                          *
 * %%Function: FColorStretchDibHack  %%Owner: DavidVe  %%Reviewed: 00/00/00 *
 *                                                                          *
 * Parameters:  HDC         hdc to hack StretchDib call to (printer DC)     *
 *              lpHTable    Handle table                                    *
 *              lpMFR       long pointer to metafile record                 *
 *              nObj        Number of active objects                        *
 *              lpsdib      long pointer to struct ( in MFR!!) containing   *
 *                          parameters to StretchDIb (except for RasterOp)  *
 *                          in reverse order                                *
 *                                                                          *
 * Description:                                                             *
 *      Function to work around some driver bugs that occurs                * 
 *      when StretchBlting a DIB to a DC which has had its                  *
 *      ViewPort flipped upside down (i.e. the ViewPort                     *
 *      Extents are negative).                                              *
 *                                                                          *
 *      If the dib is color and is going onto an upside down                *
 *      page we first set the VP RSU and try to flip the                    *
 *      DIB directly.                                                       *
 *                                                                          *
 *      If we fail to flip it directly we create a                          *
 *      compatible Mem DC. We then play the metafile record                 *   
 *      into this compatible DC (right side up) optimizing                  *
 *      in such a way such that only the portion of the DIB                 *
 *      falling in the clipping rect of the printer DC is                   *
 *      actually played into the Mem DC.  This allows the                   *
 *      Mem DC to be as small as possible.                                  *
 *                                                                          *
 *      We then StretchBlt the DDB in the Mem DC (it's a                    *
 *      DDB since we used the Mem DC is compatible with the                 *
 *      DC we ultimately want to go to) into the printer                    *
 *      DC, flipping it in the process such that it is                      *
 *      upside-down on the printer DC.                                      *
 *                                                                          *
 * Return:                                                                  *
 *      fTrue if Successful, fFalse otherwise                               *
 *                                                                          *
 * Port to quill:                                                           *
 *    Owner: warrenb                Reviewed: 00/00/00                      *
\****************************************************************************/
BOOL FColorStretchDibHack(HDC               hdc,
                          LPHANDLETABLE     lpHTable,
                          LPMETARECORD      lpMFR,
                          int               nObj, 
                          LPSDIB            lpsdib)
{
    BOOL  fSuccess = fFalse;
    DWORD dwRopOrig;
    SDIB  sdibOrig; 
    CPoint    ptdWinSav, ptdVPSav;
    CPoint    dptdWinSav, dptdVPSav;

    // Sav Away Some Original Info    
    dwRopOrig = *((DWORD FAR *)&lpMFR->rdParm[0]);   //Store Original Rop
    sdibOrig  = *lpsdib;                             //Store Original SDIB
    GetViewportOrgEx(hdc, (LPPOINT)&ptdVPSav);
    GetViewportExtEx(hdc, (LPSIZE)&dptdVPSav);
    GetWindowOrgEx(hdc, (LPPOINT)&ptdWinSav);    
    GetWindowExtEx(hdc, (LPSIZE)&dptdWinSav);    

	// Due to HP print driver bugs, we should never BLT when the extents
	// are negative.  Rather than BLT to negative extents, flip the image
	// manually and draw it into positive extents.
	//
	// DrawPicInRc didn't know that the metafile would contain a dib, so it
	// has already set the extents.  One or both of the horizontal and vertical
	// extents may be negative.
	//
	// Keep track of which extents are negative and then accomplish the
	// effect by manually flipping the bits of the dib.
	BOOL fFlipHorz = dptdVPSav.x < 0;
	BOOL fFlipVert = dptdVPSav.y < 0;

	if (!fFlipHorz && !fFlipVert)	// No flipping required, don't waste time looping...
		return fFalse;

    // Set VPort RSU
    SetViewportExtEx(hdc, fFlipHorz ? -dptdVPSav.x : dptdVPSav.x,
    					  fFlipVert ? -dptdVPSav.y : dptdVPSav.y, (LPSIZE)NULL); 
    SetViewportOrgEx(hdc, ptdVPSav.x + (fFlipHorz ? dptdVPSav.x : 0),
    					  ptdVPSav.y + (fFlipVert ? dptdVPSav.y : 0), (LPPOINT)NULL);

    // Try flipping the DIB directly
    lpsdib->xDst  = (int)(2 * ptdWinSav.x + dptdWinSav.x - lpsdib->xDst - lpsdib->dxDst);
    lpsdib->yDst  = (int)(2 * ptdWinSav.y + dptdWinSav.y - lpsdib->yDst - lpsdib->dyDst);

    fSuccess = FPlayDibFlipped(hdc, lpMFR, fFlipHorz, fFlipVert);

    SetViewportOrgEx(hdc,ptdVPSav.x, ptdVPSav.y, (LPPOINT)NULL);  //Restore VPort Orig
    SetViewportExtEx(hdc,dptdVPSav.x,dptdVPSav.y, (LPSIZE)NULL);  //Restore VPort Ext
    *((SDIB FAR *)lpsdib) = sdibOrig;                               // Restore Info, this really isn't necessary, but what the hey
    *((DWORD FAR *)&lpMFR->rdParm[0]) = dwRopOrig;                  // Restore Rop
    return fSuccess;
} /* FColorStretchDibHack */

/****************************************************************************
    %%Function:ExtTextOutFlip2        %%Owner:edr     %%Reviewed:00/00/00

    Special-purpose ExtTextOut for drawing fonts onto compatible DC (for
    upside-down pages.)  We have to do it this way because many printer
    drivers won't allow raster fonts to be drawn on compatible DCs.
    This does work for screen-compatible DC's, so we draw the text in a
    screen-compatible DC monochrome, then BLT the bitmap to the
    printer-compatible DC.

    This allows users to get Bitstream fonts to come out upside down.

    Note: vppjp->dptpFlipFont contains the size of the compatible bitmap.
                                                                           
    Port to quill:                                                         
     Owner: warrenb                Reviewed: 00/00/00                       

    CAUTION: this function is not Unicode
    
****************************************************************************/
BOOL ExtTextOutFlip2(   HDC hdc, 
                        int x, 
                        int y, 
                        UINT eto, 
                        const RECT FAR *lprcp, 
                        LPCSTR lpch, 
                        UINT cch, 
                        int FAR *lpdxp, 
                        BOOL fSelectFont)  
{
    TEXTMETRIC  tm;
    LOGFONT     lf;
    HFONT       hfont = NULL;
    HFONT       hfontPrinter;
    BOOL        fDCSaved;

    PubAssert(lprcp != NULL);
    GetTextMetrics(hdc, &tm);

    // wlb... code for rasterised printer fonts removed...
    
    fDCSaved = SaveDC(hdc);
      
    if (tm.tmPitchAndFamily & TMPF_VECTOR)
        {
        hfontPrinter = (HFONT)SelectObject(hdc, GetStockObject(DEVICE_DEFAULT_FONT));
            
        if (hfontPrinter != NULL)
            {
            GetObject(hfontPrinter, sizeof(LOGFONT),(LPSTR)(LOGFONT FAR *)&lf);

            lf.lfOrientation = lf.lfEscapement = 1800;

            if ((hfont = CreateFontIndirect((LOGFONT FAR *)&lf)) != NULL)
                SelectObject(hdc, hfont);
            else 
                SelectObject(hdc, hfontPrinter);
            }

        /* On some printer drivers, the opaque box is not
            rotated with the text.  If we ever print using
            ETO_OPAQUE we will have to work around that. */
        /* removed the assert for print pass, we should investigate
           whether rotating a ET_OPAQUE extetextout call has any
           adverse side-affect on any printers - davidve - 4/6/93 
        Assert(!(eto & ETO_OPAQUE));
        */
        ::ExtTextOutA(hdc, x, y, eto, (RECT FAR *) lprcp, lpch, cch, lpdxp);

        if (hfontPrinter != NULL && hfont != NULL)
            {
            SelectObject(hdc, hfontPrinter);
            if (hfont != NULL)
                DeleteObject(hfont);
            }
        }
    /* Else: use FlipFont code -- currently the memory DC isn't
        set up to do this. */

    if (fDCSaved)
        PubDoAssert(RestoreDC(hdc, -1));

    return fTrue;
} /* ExtTextOutFlip2 */
           
// ---------------------------------------------------------------------------
// %%Function: FMetaTextOutFlip         %%Owner: davidve  %%Reviewed: 00/00/00
// 
// Parameters:
//  hdc     -   
//  pParam  -   Parameter list from METARECORD struct
//  cwParam -   Size in words of param list
//  
// Returns:
//  fTrue is successful
//  fFalse otherwise
//  
// Description:
//  Translate a metafile ExtTextOut record to a call to our upside-down
//  text printing routine.
//
//  You'll grow to love this code.
//
//                                                                          
// Port to quill:                                                           
//    Owner: warrenb                Reviewed: 00/00/00                      
// ---------------------------------------------------------------------------
BOOL FMetaTextOutFlip(  HDC hdc, 
                        WORD * pParam, 
                        DWORD cwParam)
{
    // CAUTION alexmog (6/3/99): this function is not Unicode.
    //                          If we end up using it, we'll probably need a unicode
    //                          version as well.
    
    /*
    Here is the format of the parameter list:
    Index   Content
        0   y
        1   x
        2   cch
        3   options: eto flags
        4   if options != 0, contains a RECT, otherwise, nonexistent
    4 or 8  String
    4 or 8 + ((cch + 1)>>1)     rgdxp (optional)
    */

    int     x;
    int     y;
    int     cch;
    UINT    eto;
    RC16   *prcp16=NULL;
    RECT    rcp;
    LPCSTR  pch;
    int     rgdxp[256];
    int    *pdxp;
    DWORD   cw;

    y = (int)(short)pParam[0];
    x = (int)(short)pParam[1];
    cch = (int)(WORD)pParam[2];
    eto = (int)((WORD)pParam[3] & ETO_CLIPPED) | ((WORD)pParam[3] & ETO_OPAQUE);
    cw = 4;
    if (pParam[3])
        {
        prcp16 = (RC16 FAR *)&pParam[4];
        cw += sizeof(RC16) / sizeof(WORD);
        }

    /* At this point, cw is the index to the string */
    pch = (LPCSTR)&pParam[cw];

    cw += (cch + 1)>>1;
    /* At this point, cw is the index to the array of character widths */
    /* Assert that there are either 0 or cch character widths */
    PubAssert(cw == cwParam || cw + cch == cwParam);
    if (cw >= cwParam)
        pdxp = NULL;
    else
        {
        int idxp;
        /* we have to make a copy of the array of character widths
           padded to 32 bit */
        PubAssert(cch <= 256);
        cch = min(256, cch);
        pdxp = rgdxp;        
        for(idxp = 0; idxp < cch; idxp++)
            pdxp[idxp] = (int)(short)pParam[cw + idxp];
        }

    if (prcp16)
        {
        rcp.left   = (int)prcp16->xLeft;
        rcp.top    = (int)prcp16->yTop;
        rcp.right  = (int)prcp16->xRight;
        rcp.bottom = (int)prcp16->yBottom;
        }
    else
        {
        /* The metafile record didn't contain a bounding rect, so fake
            one */
        SIZE    sizeWExt;
        SIZE    sizeTExt;
        UINT    ta;
        TEXTMETRIC  tm = {0};

        GetTextExtentPointA(hdc, pch, cch, &sizeTExt);
        GetWindowExtEx(hdc, &sizeWExt);
        ta = GetTextAlign(hdc);
        if ((ta & (TA_BASELINE | TA_BOTTOM | TA_TOP)) == TA_BASELINE)
            {
            GetTextMetrics(hdc, &tm);
            }
        if (sizeWExt.cy < 0)
            {
            sizeTExt.cy = -sizeTExt.cy;
            tm.tmAscent = -tm.tmAscent;
            tm.tmDescent = -tm.tmDescent;
            }
        switch (ta & (TA_BASELINE | TA_BOTTOM | TA_TOP))
            {
        case TA_TOP:
            rcp.top = y;
            rcp.bottom = y + sizeTExt.cy;
            break;
        case TA_BOTTOM:
            rcp.bottom = y;
            rcp.top = y - sizeTExt.cy;
            break;
        case TA_BASELINE:
            rcp.top = y - tm.tmAscent;
            rcp.bottom = y + tm.tmDescent;
            break;
            } /* switch vertical alignment */
        if (pdxp != NULL)
            {
            int    idxp;

            for (sizeTExt.cx = 0, idxp = 0; idxp < cch; idxp++)
                sizeTExt.cx += pdxp[idxp];
            }
        if (sizeWExt.cx < 0)
            {
            sizeTExt.cx = -sizeTExt.cy;
            AssertSz(0, "Negative X Window Extent. This is wierd, but not fatal.");
            }
        switch (ta & (TA_LEFT | TA_CENTER | TA_RIGHT))
            {
        case TA_LEFT:
            rcp.left = x;
            rcp.right = x + sizeTExt.cx;
            break;
        case TA_RIGHT:
            rcp.right = x;
            rcp.left = x - sizeTExt.cx;
            break;
        case TA_CENTER:
            rcp.left = x - sizeTExt.cx/2;
            rcp.right = rcp.left + sizeTExt.cx;
            break;
            } /* switch horizontal alignment */
        }

    return ExtTextOutFlip2(hdc, x, y, eto, &rcp, pch, cch, pdxp, fTrue);

} /* FMetaTextOutFlip */

//
// Init EMFP structure
//
void InitEmfp(EMFP *pemfp, BOOL fFlipped, MRS *pmrs, BOOL fPrint, long qflip)
{
	pemfp->lcNumRecords = 0;
	pemfp->fFlipped = fFlipped;
	pemfp->fMFRSucceeded = fTrue;
	pemfp->pmrs = pmrs;
	pemfp->fPrint = fPrint;
	pemfp->qflip = qflip;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\display\grafrot.cxx ===
/****************************************************************************\
|   File:  GrafRot . CXX                                                     |
|                                                                            |
|                                                                            |
|   Handle drawing of rotated metafiles                                      |
|                                                                            |
|    Copyright 1990-1995 Microsoft Corporation.  All rights reserved.        |
|    Microsoft Confidential                                                  |
|                                                                            |
\****************************************************************************/

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifdef NOTYET // FUTURE (alexmog 6/20/2000): Unused Quill rotation code.
              // remove if a different solution is used for metafile rotation

#ifndef X_XGDI2_HXX_
#define X_XGDI2_HXX_
#include "xgdi2.hxx"
#endif

#ifndef X_PUBROT_HXX_
#define X_PUBROT_HXX_
#include "pubrot.hxx"
#endif

#ifndef X_PUBPRINT_HXX_
#define X_PUBPRINT_HXX_
#include "pubprint.hxx"
#endif

#ifndef X_DBGMETAF_HXX_
#define X_DBGMETAF_HXX_
#include "grafrot.hxx"
#endif

#ifndef X_DIBROT_HXX_
#define X_DIBROT_HXX_
#include "dibrot.hxx"
#endif

BOOL FMetaExtTextOutFlip(MRS *pmrs, WORD * pParam, DWORD cwParam);

// shoud we scale the X coords in the metafile. scale Y if fFalse
// should most probably replace with WMultDiv(pmrs->mde.drcWin.dy,pmrs->mde.drcView.dx, pmrs->mde.drcView.dy) < pmrs->mde.drcWin.dx
// to handle a very wide mf played into a tall frame or vice-versa.
#define FScaleX(pmrs) (pmrs->mde.drcView.dy > pmrs->mde.drcView.dx)

// macro to scale down all coords to avoid overflow.
#define ZScaled(pmrs, z) ((z) >> pmrs->wScale)

/****************************************************************************
* %%Function: RotRotatePt        %%Owner:harip           Reviewed:00/00/00
* Rotates the pt lppt. using matCurrent returns result in same
*****************************************************************************/
void RotRotatePt(MRS *pmrs, CPoint *ppt)
{
    if (pmrs->ang)
        ApplyMatToPt(&pmrs->mat, ppt);
} /* RotRotatePt */

// ***************************************************************************
// %%Function: ScaleDownRc              %%Owner: harip    %%Reviewed: 12/15/94
// Description: scales down the rc
//
// ***************************************************************************
void ScaleDownRc(MRS *prms, RECT *prc)
{
    prc->left = ZScaled(prms, prc->left);
    prc->top  = ZScaled(prms, prc->top);
    prc->right = ZScaled(prms, prc->right);
    prc->bottom = ZScaled(prms, prc->bottom);
}   /* ScaleDownRc */

/* %%Function:LGetHypWW %%Owner:kennyy %%Reviewed:0/0/00 */
/* Gets the hypotenuse of a triangle where the legs are integers. */
long LGetHypWW(int dx, int dy)
{
    long lhypSq = (long)dx * dx + (long)dy * dy;
    long lhypGuess;

    if (lhypSq == 0L)
        return 0;
    lhypGuess = max(abs(dx), abs(dy));
    lhypGuess = (lhypGuess + lhypSq / lhypGuess) >> 1;
    lhypGuess = (lhypGuess + lhypSq / lhypGuess) >> 1;
    lhypGuess = (lhypGuess + lhypSq / lhypGuess) >> 1;

    return lhypGuess;
} /* LGetHypWW */

// ***************************************************************************
// %%Function: FRcSafeForRotation       %%Owner: harip    %%Reviewed: 12/15/94
// Description: returns fTrue if the rc given (generally the  window ext rc of
//              a metafile) will not overflow gdi on rotation.
//  dzDiagHalf is half the diagonal of the rc.
//  The test is that the encircling circle should be inside GDI coords.
// ***************************************************************************
BOOL FRcSafeForRotation(RECT *prc)
{
    int dzDiagHalf; // half the diagonal of the rc
    int dxRc = prc->right - prc->left,
        dyRc = prc->bottom - prc->top;
    int xCenter = prc->left + dxRc / 2;  // center of the rc
    int yCenter = prc->top + dyRc / 2;

    dzDiagHalf =  LGetHypWW(dxRc, dyRc) / 2 + 1;
    if (((xCenter - dzDiagHalf) >= zGDIMin + 1) &&
        ((xCenter + dzDiagHalf) <= zGDIMost - 1) &&
        ((yCenter + dzDiagHalf) <= zGDIMost - 1) &&
        ((yCenter - dzDiagHalf) >= zGDIMin - 1))
        return fTrue;

    return fFalse;

}   /* FRcSafeForRotation */

/****************************************************************************\
|   %%Function:RcToDrc      %%Owner:AdamE       %%Reviewed:05/17/91          |
|                                                                            |
|   Convert an Rc to a Drc                                                   |
|                                                                            |
|   Returns: a Drc in *pdrc.                                                 |
|                                                                            |
\****************************************************************************/
void RcToDrc(RECT rc, DRC *pdrc)
{
    pdrc->x  = rc.left;
    pdrc->dx = rc.right - rc.left;
    pdrc->y  = rc.top;
    pdrc->dy = rc.bottom - rc.top;
}  /* RcToDrc */

/****************************************************************************\
|   %%Function:DrcToRc      %%Owner:AdamE       %%Reviewed:05/17/91          |
|                                                                            |
|   Convert a Drc to an Rc                                                   |
|                                                                            |
|   Returns: an Rc in *prc.                                                  |
|                                                                            |
\****************************************************************************/
void DrcToRc(DRC drc, RECT *prc)
{
    prc->left  = drc.x;
    prc->right = drc.x + drc.dx;
    prc->top   = drc.y;
    prc->bottom = drc.y + drc.dy;
}  /* DrcToRc */

// Make sure that RCs have a width and a height
void ValidateRcForRotate(RECT *prc)
{
	if (prc->right - prc->left == 0)
		prc->right = prc->left + 1;
	if (prc->bottom - prc->top == 0)
		prc->bottom = prc->top + 1;
}

// Make sure that DRCs have a width and a height
void ValidateDrcForRotate(DRC *pdrc)
{
	if (pdrc->dx == 0)
		pdrc->dx = 1;
	if (pdrc->dy == 0)
		pdrc->dy = 1;
}

// ***************************************************************************
// %%Function: InitMFRotationInfo       %%Owner: harip    %%Reviewed: 12/15/94
// Description: initializes fields in pmrs after calling this the client
//          wanting to draw the rotated mf can call their own enumertion fn with
//          the call to FPlayRotatedMFR() before the switch stmt.
// ***************************************************************************
BOOL FInitMFRotationInfo(MRS *pmrs, int ang, BOOL fCropped,
	RECT *prcWin, RECT *prcView, RECT *prcMFViewport, long qflip, BOOL fInverted, BOOL fPrint)
{
    RECT rcSav;
    DRC drcView; // Local copy to modify

    if (ang == 0)
        return fFalse;

	AssertEx(pmrs);
	AssertEx(prcWin);
    AssertEx(prcView);
    AssertEx(prcMFViewport);

	ZeroMemory(pmrs, cbMRS);

	pmrs->ang = ang;
	pmrs->qflip = qflip;
	pmrs->fPrint = fPrint;
	pmrs->fInverted = fInverted;

	MatFromRcAng(&pmrs->mat, prcView, ang);

	RcToDrc(*prcMFViewport, &drcView);

	// Extents cannot equal zero.
	ValidateDrcForRotate(&drcView);
	BltLpb(&drcView, &pmrs->mde.drcView, cbDRC);

    if ((pmrs->hplMDE = HplNew(cbMDE, 4)) == hplNil)
		return fFalse;

    // croppage??
    // this is because rotation is wrt the current frame (cropped or otherwise)
    // pmrs->wScale is used to scale down (amt of right shift) all metafile coord
    // values to prevent integer overflow if the rcmfViewport is too big.
    pmrs->fCropped = fCropped;
    if (pmrs->fCropped)
        {
        AssertEx(prcMFViewport);
        rcSav = *prcMFViewport;

        while(!FRcSafeForRotation(prcMFViewport))
            {
            *prcMFViewport = rcSav;
            pmrs->wScale++;
            ScaleDownRc(pmrs, prcMFViewport);
            }
        // restore, since we may scale down again after next block
        *prcMFViewport = rcSav;
        }
    BLOCK // values for this will be set again in FPlayRotatedMFR()
        {
        // now see if lprcWin itself might overflow with current pmrs->wScale
        RECT rcWin = *prcWin;

        ScaleDownRc(pmrs, &rcWin);    // scale it down by existing scaling factor
        rcSav = rcWin;
        while(!FRcSafeForRotation(&rcWin))
            {
            rcWin = rcSav;
            pmrs->wScale++;
            ScaleDownRc(pmrs, &rcWin);
            }
        RcToDrc(rcWin, &pmrs->mde.drcWin);
        ValidateDrcForRotate(&pmrs->mde.drcWin);
        }
    if (pmrs->fCropped)
        {
        // When cropped the rcmfViewport is the visible part
        // of the image which is drawn into rcmfPreferred.
		pmrs->rcmfViewport = *prcView;
		// The window is scaled from the preferred to the
		// viewport.
        pmrs->rcmfPreferred = *prcMFViewport;
        ValidateRcForRotate(&pmrs->rcmfPreferred);
        }
    // init scaling values
    pmrs->mde.xScaleNum     = 1;
    pmrs->mde.xScaleDen     = 1;
    pmrs->mde.yScaleNum     = 1;
    pmrs->mde.yScaleDen     = 1;
    pmrs->mde.xWinScaleNum  = 1;
    pmrs->mde.xWinScaleDen  = 1;
    pmrs->mde.yWinScaleNum  = 1;
    pmrs->mde.yWinScaleDen  = 1;
    pmrs->mde.xVPScaleNum   = 1;
    pmrs->mde.xVPScaleDen   = 1;
    pmrs->mde.yVPScaleNum   = 1;
    pmrs->mde.yVPScaleDen   = 1;
    return fTrue;
}   /* FInitMFRotationInfo */

// ***************************************************************************
// %%Function: FEndRotation              %%Owner: harip    %%Reviewed: 12/15/94
// Description: Resets pmrs and frees up memory allocated during rotation
//              returns fFalse is there was an error during display.
//              Shows error msg if fReportError
// ***************************************************************************
BOOL FEndRotation(MRS *pmrs)
{
    BOOL fReturn = fTrue;

	FreeHpl(pmrs->hplMDE);

	ZeroMemory(pmrs, cbMRS);

    return fReturn;
}   /* FEndRotation */

// ***************************************************************************
// %%Function: ZScaleZ                  %%Owner: harip    %%Reviewed: 12/15/94
// Description: scales the x or y coordinate depending on the FScaleX(). this is
//              so that we do not always scale blindly, but  we always scale DOWN
//              and hence avoid overflow problems.
// ***************************************************************************
int ZScaleZ(MRS *pmrs, int z)
{
    int zT;
    if (FScaleX(pmrs))
        {
        zT = MulDivR(z, pmrs->mde.drcWin.dy, pmrs->mde.drcWin.dx);
        return MulDivR(zT, pmrs->mde.drcView.dx, pmrs->mde.drcView.dy);
        }
    else
        {
        zT = MulDivR(z, pmrs->mde.drcWin.dx, pmrs->mde.drcWin.dy);
        return MulDivR(zT, pmrs->mde.drcView.dy, pmrs->mde.drcView.dx);
        }
}   /* ZScaleZ */

// ***************************************************************************
// %%Function: ScaleXAndY               %%Owner: harip    %%Reviewed: 12/15/94
// Description: takes  original x and y mf coords and scales the appropriate
//              one so that they can be passed to a Rot<foo> function.
//              the initial pmrs->dzWinOff subtraction is for OffsetWindowOrg.
// ***************************************************************************
void ScaleXAndY(MRS *pmrs, int *px, int *py)
{
    int dzT;
    int sign;

    *px = MulDivR(*px - pmrs->mde.dxWinOff, pmrs->mde.xScaleNum, pmrs->mde.xScaleDen);
    *py = MulDivR(*py - pmrs->mde.dyWinOff, pmrs->mde.yScaleNum, pmrs->mde.yScaleDen);
    
    if (pmrs->qflip & qflipHorz)
    	*px = 2 * XpCenterFromMrs(pmrs) - *px;
    if (pmrs->qflip & qflipVert)
    	*py = 2 * YpCenterFromMrs(pmrs) - *py;

    dzT = FScaleX(pmrs) ? (*px - pmrs->mde.drcWin.x) : (*py - pmrs->mde.drcWin.y);
    sign = Sgn(dzT);
    dzT = ZScaleZ(pmrs, dzT);
    if (FScaleX(pmrs))
        *px = pmrs->mde.drcWin.x + Abs(dzT)*sign;
    else
        *py = pmrs->mde.drcWin.y + Abs(dzT)*sign;
}   /* ScaleXAndY */

/****************************************************************************\
 * %%Macro: WNonZero                %%Owner: EdR       %%Reviewed: 12/21/93 *
 *                                                                          *
 * Description:                                                             *
 *    If w is nonzero, return w. Otherwise, return the smallest non-zero    *
 *    int of the same sign as wReference.                                   *
 *    If w == 0 and wReference == 0, returns (positive) 1.                  *
 *                                                                          *
\****************************************************************************/
#define WNonZero(w, wReference)                         \
            (AssertZero((w) == (w)),                       \
            AssertZero((wReference) == (wReference)),      \
            (w) == 0 ? ((wReference) < 0 ? (-1) : 1) : (w))

// ***************************************************************************
// %%Function: ZScaledNZ                %%Owner: harip    %%Reviewed: 12/15/94
// Description:
//
// ***************************************************************************
int ZScaledNZ(MRS *pmrs, int dxOrig)
{
    int     dx;

    dx = ZScaled(pmrs, dxOrig);
    if (dxOrig != 0)
        dx = WNonZero(dx, dxOrig);
    return dx;
} /* ZScaledNZ */

// ***************************************************************************
// %%Function: CalcScaleValues          %%Owner: harip    %%Reviewed: 12/15/94
// Description:  calculates the numerator and denominator for scaling the x or
//              y coordinated of a metafile. used in meta_poly... routines so
//              ZScaleZ() is not called for each point.
// ***************************************************************************
void CalcScaleValues(MRS *pmrs, long * plScaleNum, long * plScaleDen)
{
    // set up scale values
    if (FScaleX(pmrs))
        {
        *plScaleNum = (long)pmrs->mde.drcWin.dy * (long)pmrs->mde.drcView.dx;
        *plScaleDen = (long)pmrs->mde.drcWin.dx * (long)pmrs->mde.drcView.dy;
        }
    else
        {
        *plScaleNum = (long)pmrs->mde.drcWin.dx * (long)pmrs->mde.drcView.dy;
        *plScaleDen = (long)pmrs->mde.drcWin.dy * (long)pmrs->mde.drcView.dx;
        }

	AssertEx(*plScaleNum);
	AssertEx(*plScaleDen);
}   /* CalcScaleValues */

// ***************************************************************************
// %%Function: RgptScaleRgpt16            %%Owner: harip    %%Reviewed: 12/15/94
// Description: Scales pts in lpptSrc and returns in lpptDest.
//
// ***************************************************************************
void RgptScaleRgpt16(MRS *pmrs, POINT *lpptDest, PT16 * lpptSrc, int cpt)
{
    int  i;
    long lScaleNum, lScaleDen;
    X    xpCenter;
    Y    ypCenter;
    
    // calc scale values
    CalcScaleValues(pmrs, &lScaleNum, &lScaleDen);

    // calc and save centers for flipped orientation
    if (pmrs->qflip & qflipHorz)
	    xpCenter = XpCenterFromMrs(pmrs);
    if (pmrs->qflip & qflipVert)
	    ypCenter = YpCenterFromMrs(pmrs);
    
    for (i = cpt; i-- > 0; )
        {
        int x = lpptSrc->x;
        int y = lpptSrc->y;

        x = MulDivR(ZScaled(pmrs, x) - pmrs->mde.dxWinOff, pmrs->mde.xScaleNum, pmrs->mde.xScaleDen);
        y = MulDivR(ZScaled(pmrs, y) - pmrs->mde.dyWinOff, pmrs->mde.yScaleNum, pmrs->mde.yScaleDen);
                    
		if (pmrs->qflip & qflipHorz)
			x = 2 * xpCenter - x;
		if (pmrs->qflip & qflipVert)
			y = 2 * ypCenter - y;

        int dzT = FScaleX(pmrs) ? (x - pmrs->mde.drcWin.x) : (y - pmrs->mde.drcWin.y);
        int sign = Sgn(dzT);
        dzT = MulDivR(dzT, lScaleNum, lScaleDen);
        lpptDest->x = FScaleX(pmrs) ? (pmrs->mde.drcWin.x + sign * Abs(dzT)) : x;
        lpptDest->y = FScaleX(pmrs) ?  y : (pmrs->mde.drcWin.y + sign * Abs(dzT));
        lpptDest++; lpptSrc++;
        }
}   /* RgptScaleRgpt16 */

/****************************************************************************\
|   %%Macro:FValidGdiCoord        %%Owner:edr         %%Reviewed: 0/00/00
|   Determines if a value is within the range of GDI logical coordinates.
|   Assumes that x and y coords have same limits; thus, use this macro for
|   both x and y.
\****************************************************************************/
#define FValidGDICoord(z) \
                (AssertZero((z) == (z)), (z) >= zGDIMin && (z) <= zGDIMost)

// ***************************************************************************
// %%Function: SetMFRotationContext    %%Owner: harip    %%Reviewed: 12/15/94
// Description: Sets the rotation context for a metafile with the window
//            origin and extents that we have got at the moment for a NON_CROPPED
//             pif. For Cropped pifs we want the center of rotation to be the
//              center of dppif->rcmfViewport
// ***************************************************************************
void SetMFRotationContext(MRS *pmrs)
{
    RECT rcT;

    if (pmrs->fCropped)
        {// need to scale the crop rc in the mf
        int sign;
        rcT.left = pmrs->mde.drcWin.x + 
                      MulDivR(pmrs->rcmfViewport.left - pmrs->rcmfPreferred.left,
                                    pmrs->mde.drcWin.dx,
                                    DxOfRc(&pmrs->rcmfPreferred));
        rcT.top = pmrs->mde.drcWin.y +
                         MulDivR(pmrs->rcmfViewport.top - pmrs->rcmfPreferred.top,
                                    pmrs->mde.drcWin.dy,
                                    DyOfRc(&pmrs->rcmfPreferred));
        rcT.right = rcT.left +
                           MulDivR(DxOfRc(&pmrs->rcmfViewport), pmrs->mde.drcWin.dx,
                                        DxOfRc(&pmrs->rcmfPreferred));
        rcT.bottom = rcT.top +
                            MulDivR(DyOfRc(&pmrs->rcmfViewport), pmrs->mde.drcWin.dy,
                                        DyOfRc(&pmrs->rcmfPreferred));
        if (FScaleX(pmrs))
            {
            sign = Sgn(rcT.left - pmrs->mde.drcWin.x);
            rcT.left = sign*Abs(ZScaleZ(pmrs, rcT.left - pmrs->mde.drcWin.x)) + pmrs->mde.drcWin.x;
            sign = Sgn(rcT.right - pmrs->mde.drcWin.x);
            rcT.right = sign*Abs(ZScaleZ(pmrs, rcT.right - pmrs->mde.drcWin.x)) + pmrs->mde.drcWin.x;
            }
        else
            {
            sign = Sgn(rcT.top - pmrs->mde.drcWin.y);
            rcT.top = sign*Abs(ZScaleZ(pmrs, rcT.top - pmrs->mde.drcWin.y)) + pmrs->mde.drcWin.y;
            sign = Sgn(rcT.bottom - pmrs->mde.drcWin.y);
            rcT.bottom = sign*Abs(ZScaleZ(pmrs, rcT.bottom - pmrs->mde.drcWin.y)) + pmrs->mde.drcWin.y;
            }
        }
    else
        {
        DrcToRc(pmrs->mde.drcWin, &rcT);
        // values better be in gdi coord space
        AssertEx(FValidGDICoord(rcT.left) && FValidGDICoord(rcT.top) &&
                FValidGDICoord(rcT.right) && FValidGDICoord(rcT.bottom) &&
                FValidGDICoord(rcT.right-rcT.left) &&
                FValidGDICoord(rcT.bottom - rcT.top));
        if (FScaleX(pmrs))
            rcT.right = rcT.left + Sgn(pmrs->mde.drcWin.dx) *
                            Abs(MulDivR(pmrs->mde.drcWin.dy,pmrs->mde.drcView.dx, pmrs->mde.drcView.dy));
        else
            rcT.bottom = rcT.top + Sgn(pmrs->mde.drcWin.dy) *
                            Abs(MulDivR(pmrs->mde.drcWin.dx,pmrs->mde.drcView.dy, pmrs->mde.drcView.dx));
        }

	POINT ptCenterHacked;
	ptCenterHacked.x = ((long)rcT.left + (long)rcT.right) / 2;
	ptCenterHacked.y = ((long)rcT.top + (long)rcT.bottom) / 2;

	MatFromPtAng(&pmrs->mat, ptCenterHacked,
				((pmrs->mde.drcWin.dy < 0 && pmrs->mde.drcWin.dx > 0) ?
				(3600 - pmrs->ang) : pmrs->ang));

	pmrs->fRotContextSet = fTrue;
} /* SetMFRotationContext */

// ***************************************************************************
// %%Function: PushMDE                  %%Owner: harip    %%Reviewed: 12/15/94
// ***************************************************************************
BOOL PushMDE(MRS *pmrs)
{
    if (!pmrs->hplMDE)
        return fFalse;

	return FInsertInPl(pmrs->hplMDE, 0, &pmrs->mde);
} /* PushMDE */

// ***************************************************************************
// %%Function: PopMDE                   %%Owner: harip    %%Reviewed: 12/15/94
// Description:  pops the stored rotation extents (on restoredc)
// ***************************************************************************
void PopMDE(MRS *pmrs)
{
    if (!pmrs->hplMDE)
        return;

    // could happen if one of the PushMDE's fails, and we keep Popping away.
    if (IMacPl(pmrs->hplMDE) == 0)
        return;
        
    BltLpb(LqInPl(pmrs->hplMDE, 0), &pmrs->mde, cbMDE);

    DeleteFromPl(pmrs->hplMDE, 0);
} /* PopMDE */

// ***************************************************************************
// %%Function: MultiplyRatios           %%Owner: edr      %%Reviewed: 01/16/96
//
//  Multiply two pairs of ratios of the form Num/Den, resulting in a product
//  ratio.
//  Make sure that the resulting num and denom terms are all < 32K (so GDI can
//  use them).
//  The output parameters can point to either of the sets of inputs.
// ***************************************************************************
void MultiplyRatios(int xNum1, int xDen1, int yNum1, int yDen1,
                int xNum2, int xDen2, int yNum2, int yDen2,
                int *pxNumOut, int *pxDenOut, int *pyNumOut, int *pyDenOut)
{
    long    rgzScale[4];
    int     zScaleMost;
    int     i;

    AssertEx(pxNumOut != NULL && pxDenOut != NULL &&
            pyNumOut != NULL && pyDenOut != NULL);

    rgzScale[0] = xNum1 * xNum2;
    rgzScale[1] = xDen1 * xDen2;
    rgzScale[2] = yNum1 * yNum2;
    rgzScale[3] = yDen1 * yDen2;

    zScaleMost = 0;
    for (i = 0; i < 4; i++)
        if (Abs(rgzScale[i]) > zScaleMost)
            zScaleMost = Abs(rgzScale[i]);
    AssertEx(zScaleMost > 0);
    if (zScaleMost > SHRT_MAX)
        {
        int     wdiv;

        wdiv = (zScaleMost/(SHRT_MAX+1)) + 1;
        for (i = 0; i < 4; i++)
            {
            if (rgzScale[i] != 0)
                {
                int     w;

                w = rgzScale[i] / wdiv;
                if (w == 0)
                    w = (rgzScale[i] < 0) ? -1 : 1;
                rgzScale[i] = w;
                }
            }
        }

    *pxNumOut = rgzScale[0];
    *pxDenOut = rgzScale[1];
    *pyNumOut = rgzScale[2];
    *pyDenOut = rgzScale[3];

    AssertEx(*pxDenOut != 0);
    AssertEx(*pyDenOut != 0);

} // MultiplyRatios

// ***************************************************************************
// %%Function: FMeta_IntersectClipRect   %%Owner: harip    %%Reviewed: 12/15/94
//
// Description:Rotates a Meta_intersectCLipRect call. uses clip path.
// ***************************************************************************
BOOL FMeta_IntersectClipRect(HDC hdc, MRS *pmrs, LPMETARECORD lpMFR)
{
    HRGN  hrgn=NULL;
    RECT rcT;
    RRC rrcT;
    BOOL    fSuccess;
    int xL = ZScaled(pmrs, (short)Param(3)),   // left
        yT = ZScaled(pmrs, (short)Param(2)),   // top
        xR = ZScaled(pmrs, (short)Param(1)),   // right
        yB = ZScaled(pmrs, (short)Param(0));   // bottom

    AssertEx(lpMFR->rdFunction == META_INTERSECTCLIPRECT);

    // since nt has problems with the selectclippath() during metafile playback
    // when printing to PS, we are just going to ignore this record.
    if (!FWindows95() && FPrintingToPostscript(hdc))
        return fTrue;
    ScaleXAndY(pmrs, &xL, &yT);
    ScaleXAndY(pmrs, &xR, &yB);
    SetRc(&rcT, xL, yT, xR, yB);
	RrcFromMatRc(&rrcT, &pmrs->mat, &rcT);
    BeginPath(hdc);
    Polygon(hdc, (POINT *)&rrcT, 4);
    EndPath(hdc);
    fSuccess = SelectClipPath(hdc, RGN_AND);
    return fSuccess;
}   /* FMeta_IntersectClipRect */

// ***************************************************************************
// %%Function: FMeta_CreateFontInd  %%Owner: harip    %%Reviewed: 12/15/94
// Description: creates roated font for text in a mf (which is rotated)
// ***************************************************************************
BOOL FMeta_CreateFontInd(HDC hdc, MRS *pmrs, LPHANDLETABLE lpHTable, LPMETARECORD lpMFR, int nObj)
{
    LOGFONT16 *lplf,            // ptr to logfont data
              lfSav;            // saved original data
    BOOL      fStrokeFont;      // was font stroke font?
    BOOL      fSuccess;         // result of playing metafile record
    int       nHeight;          // new scaled height of font
    ANG       angT;             // ang of font

    AssertEx(lpMFR->rdFunction == META_CREATEFONTINDIRECT);

    lplf = (LOGFONT16 *)&(Param(0));
    lfSav=*lplf;

    // raid 3.7522 - warrenb - calculate new font height
    nHeight = MulDivR(lplf->lfHeight, pmrs->mde.xScaleNum, pmrs->mde.xScaleDen);
    lplf->lfHeight = Abs(ZScaleZ(pmrs, nHeight));

    // is it a stroke font??
    fStrokeFont = (lplf->lfCharSet == OEM_CHARSET);
    // force windows to give a  TT fnt so that it will rotate
    lplf->lfOutPrecision = fStrokeFont ? OUT_STROKE_PRECIS : OUT_TT_ONLY_PRECIS;
    // clipping
    lplf->lfClipPrecision = CLIP_LH_ANGLES | CLIP_TT_ALWAYS | CLIP_STROKE_PRECIS;

    // take into account if window is flipped.
    if ((pmrs->mde.drcWin.dy < 0) && (pmrs->mde.drcWin.dx > 0))
        angT = -pmrs->ang;
    else
        angT = pmrs->ang;

    lplf->lfEscapement = AngNormalize(lplf->lfEscapement + angT);
    lplf->lfOrientation = AngNormalize(lplf->lfOrientation + angT);

    fSuccess = PlayMetaFileRecord(hdc, lpHTable, lpMFR, nObj);

    // restore values which were changed
    *lplf=lfSav;

    return fSuccess;
} /* FMeta_CreateFontInd */

// ***************************************************************************
// %%Function: FMeta_ExtTextOut          %%Owner: harip    %%Reviewed: 12/15/94
// Description: rotated exttextout call. takes care of setting new position.
//              NOTE: no clipping is done.
// ***************************************************************************
BOOL FMeta_ExtTextOut(HDC hdc, MRS *pmrs, LPHANDLETABLE lpHTable, LPMETARECORD lpMFR, int nObj)
{
    POINT  ptT;
    short x,y;
    BOOL fSuccess;

    AssertEx(lpMFR->rdFunction == META_EXTTEXTOUT);

    ptT.y = ZScaled(pmrs, y = SParam(0));
    ptT.x = ZScaled(pmrs, x = SParam(1));
    ScaleXAndY(pmrs, (int*)&(ptT.x), (int*)&(ptT.y));
    Param(0) = (short)ptT.y;
    Param(1) = (short)ptT.x;
    fSuccess = FMetaExtTextOutFlip(hdc, pmrs, (WORD *)&Param(0),
                            lpMFR->rdSize - (sizeof(DWORD)+sizeof(WORD))/sizeof(WORD));

    Param(0) = y;
    Param(1) = x;
    return fSuccess;
} /* FMeta_ExtTextOut */

// ***************************************************************************
// %%Function: FMeta_TextOut             %%Owner: harip    %%Reviewed: 12/15/94
// Description: Rotated TextOut handler.
// ***************************************************************************
BOOL FMeta_TextOut(XHDC xhdc, MRS *pmrs, LPHANDLETABLE lpHTable, LPMETARECORD lpMFR, int nObj)
{
    POINT  ptT;
    short x,y, bT;
    BOOL fSuccess;

    AssertEx(lpMFR->rdFunction == META_TEXTOUT);

    bT = (Param(0) + sizeof(WORD)-1)/sizeof(WORD);  // offset to y coord
    ptT.y = ZScaled(pmrs, y = SParam(1 + bT));
    ptT.x = ZScaled(pmrs, x = SParam(2 + bT));
    ScaleXAndY(pmrs, (int*)&(ptT.x), (int*)&(ptT.y));
    xhdc.TransformPt(&ptT);
    Param(1 + bT) = (short)ptT.y;
    Param(2 + bT) = (short)ptT.x;
    fSuccess = PlayMetaFileRecord(xhdc.Hdc(), lpHTable, lpMFR, nObj);
    Param(1 + bT) = y;
    Param(2 + bT) = x;
    return fSuccess;
} /* FMeta_TextOut */

// ***************************************************************************
// %%Function: FMeta_MoveTo              %%Owner: harip    %%Reviewed: 12/15/94
//
// Description: MoveTo handling under rotation
// ***************************************************************************
BOOL FMeta_MoveTo(HDC hdc, MRS *pmrs, LPMETARECORD lpMFR)
{
    int x = ZScaled(pmrs, SParam(1));
    int y = ZScaled(pmrs, SParam(0));

    AssertEx(lpMFR->rdFunction == META_MOVETO);

    ScaleXAndY(pmrs, &x, &y);
    return RotMoveTo(hdc, pmrs, x, y);
}   /* FMeta_MoveTo */

// ***************************************************************************
// %%Function: FMeta_LineTo              %%Owner: harip    %%Reviewed: 12/15/94
//
// Description: LineTo handling under rotation
// ***************************************************************************
BOOL FMeta_LineTo(HDC hdc, MRS *pmrs, LPMETARECORD lpMFR)
{
    int x = ZScaled(pmrs, SParam(1));
    int y = ZScaled(pmrs, SParam(0));

    AssertEx(lpMFR->rdFunction == META_LINETO);

    ScaleXAndY(pmrs, &x, &y);
    return RotLineTo(hdc, pmrs, x, y);
}   /* FMeta_LineTo */

// ***************************************************************************
// %%Function: FMeta_SetPixel              %%Owner: harip    %%Reviewed: 12/15/94
// ***************************************************************************
BOOL FMeta_SetPixel(HDC hdc, MRS *pmrs, LPMETARECORD lpMFR)
{
    POINT  ptT;

    AssertEx(lpMFR->rdFunction == META_SETPIXEL);

    ptT.x = ZScaled(pmrs, SParam(3));
    ptT.y = ZScaled(pmrs, SParam(2));
    ScaleXAndY(pmrs, (int*)&(ptT.x), (int*)&(ptT.y));
    RotRotatePt(pmrs, &ptT);
    // using SetPixelV() since it is faster because it doesn't return a COLORREF
    SetPixelV(hdc,   ptT.x, ptT.y, MAKELONG(Param(0), Param(1)));
    // RAID 3413 : SetPixel() requires that the pt be inside the clipping
    // region and some pixels seem to fall outside and thus stop the mf
    // enumeration. So we always return fTrue in this case.
    return fTrue;
}   /* FMeta_SetPixel */

// ***************************************************************************
// %%Function: FMeta_Rectangle           %%Owner: harip    %%Reviewed: 12/15/94
// ***************************************************************************
BOOL FMeta_Rectangle(HDC hdc, MRS *pmrs, LPMETARECORD lpMFR)
{
    int xL = ZScaled(pmrs, SParam(3)),  // left
        yT = ZScaled(pmrs, SParam(2)),  // top
        xR = ZScaled(pmrs, SParam(1)),  // right
        yB = ZScaled(pmrs, SParam(0));  // bottom

    AssertEx(lpMFR->rdFunction == META_RECTANGLE);

    ScaleXAndY(pmrs, &xL, &yT);
    ScaleXAndY(pmrs, &xR, &yB);
    return RotRectangle(hdc, pmrs, xL, yT, xR, yB);
}   /* FMeta_Rectangle */

// ***************************************************************************
// %%Function: FMeta_RoundRect           %%Owner: harip    %%Reviewed: 12/15/94
// Description:
//
// ***************************************************************************
BOOL FMeta_RoundRect(HDC hdc, MRS *pmrs, LPMETARECORD lpMFR)
{
    int xL = ZScaled(pmrs, SParam(5)),
        yT = ZScaled(pmrs, SParam(4)),
        xR = ZScaled(pmrs, SParam(3)),
        yB = ZScaled(pmrs, SParam(2)),
        dxEllipse = ZScaledNZ(pmrs, SParam(1)),
        dyEllipse = ZScaledNZ(pmrs, SParam(0));

    AssertEx(lpMFR->rdFunction == META_ROUNDRECT);

    ScaleXAndY(pmrs, &xL, &yT);
    ScaleXAndY(pmrs, &xR, &yB);
    // size of the ellipse is just that, and and so we'll treat it as an offset and scale
    // not calling just ScaleXAndY() since  these 2 are not related to the origin etc.
    // and we dont want to take offsets from pmrs->mde.drcWin.x etc.
    AssertEx(dxEllipse > 0 && dyEllipse > 0);  // else need to multiply Abs() scaled value by sign below
    dxEllipse = MulDivR(dxEllipse, pmrs->mde.xScaleNum, pmrs->mde.xScaleDen);
    dyEllipse = MulDivR(dyEllipse, pmrs->mde.xScaleNum, pmrs->mde.xScaleDen);
    if (FScaleX(pmrs))
        dxEllipse = Abs(ZScaleZ(pmrs, dxEllipse));    // should be > 0
    else
        dyEllipse = Abs(ZScaleZ(pmrs, dyEllipse));

    return RotRoundRect(hdc, pmrs, xL, yT, xR, yB, dxEllipse, dyEllipse);
}   /* FMeta_RoundRect */

// ***************************************************************************
// %%Function: FMeta_PolyFoo             %%Owner: harip    %%Reviewed: 12/15/94
// Description:Plays rotated versions of the META_POLYGON & META_POLYLINE
// ***************************************************************************
BOOL FMeta_PolyFoo(HDC hdc, MRS *pmrs, LPMETARECORD lpMFR)
{
    int cpt;
    POINT *lppt;
    POINT *lpptDest;
    PT16 *lpptSrc;
    BOOL fSuccess;

    AssertEx(lpMFR->rdFunction == META_POLYGON ||
            lpMFR->rdFunction == META_POLYLINE);

    cpt = SParam(0);
    if (cpt < 2)
        return fTrue;  // something screwy around here. see bug 7271 for the fTrue (and 8227)

    lppt = lpptDest = (POINT *) new POINT[cpt];
	if (!lpptDest)
		return fFalse;

    lpptSrc = (PT16 *)&Param(1);
    // scale the pts
	RgptScaleRgpt16(pmrs, lpptDest, lpptSrc, cpt);

	if (lpMFR->rdFunction == META_POLYGON)
		fSuccess = RotPolygon(hdc, pmrs, lppt, cpt);
	else
		fSuccess = RotPolyline(hdc, pmrs, lppt, cpt);

	delete [] lpptDest;

    return fSuccess;
} /* FMeta_PolyFoo */

// ***************************************************************************
// %%Function: FMeta_PolyPolygon         %%Owner: harip    %%Reviewed: 12/15/94
// Description: rotates META_polypolygon record.
//
// ***************************************************************************
BOOL FMeta_PolyPolygon(HDC hdc, MRS *pmrs, LPMETARECORD lpMFR)
{
    short cply;       /* number of polygons */
    short cptTotal;   /* number of points in all polygons */
    int *lpcpt;
    short *pcptT;
    POINT *lpptSav;
    POINT *lpptDest;
    PT16 *lpptSrc;
    int iply;
    BOOL fReturn;

    AssertEx(lpMFR->rdFunction == META_POLYPOLYGON);

    cply = SParam(0);
    if (cply <= 0)
        return fTrue; // see bug 7271 for the fTrue

    for (iply = cply, cptTotal = 0, pcptT = (short*)(&Param(1)); iply-- > 0;)
        cptTotal += *pcptT++;
    if (cptTotal <= 0)
        return fTrue;   // see bug 7271 for the fTrue

    lpptSav = lpptDest = (POINT *)new POINT[cptTotal];
	if (!lpptSav)
		return fFalse;

    // now convert pcpt (array of short ints) to an array of ints
	lpcpt = (int *)new int[cply];
	if (!lpcpt)
		{
    	delete [] lpptDest;
    	return fFalse;
    	}

    for (iply = 0, pcptT = (short*)&Param(1); iply < cply; iply++)
        {
        *lpcpt = *pcptT;
        lpcpt++; pcptT++;
        }
    // reset lpt to point to beginning of block
    lpcpt -= cply;
    lpptSrc = (PT16 *)&Param(1 + cply);
    // scale all the pts
    RgptScaleRgpt16(pmrs, lpptDest, lpptSrc, cptTotal);

    fReturn = RotPolyPolygon(hdc, pmrs, lpptSav, lpcpt, cply);

    delete [] lpptDest;
    delete [] lpcpt;

    return fReturn;
}   /* FMeta_PolyPolygon */

// ***************************************************************************
// %%Function: FMeta_Ellipse             %%Owner: harip    %%Reviewed: 12/15/94
// Description:
//
// ***************************************************************************
BOOL FMeta_Ellipse(HDC hdc, MRS *pmrs, LPMETARECORD lpMFR)
{
    int xL = ZScaled(pmrs, SParam(3)),
        yT = ZScaled(pmrs, SParam(2)),
        xR = ZScaled(pmrs, SParam(1)),
        yB = ZScaled(pmrs, SParam(0));

    AssertEx(lpMFR->rdFunction == META_ELLIPSE);

    ScaleXAndY(pmrs, &xL, &yT);
    ScaleXAndY(pmrs, &xR, &yB);
    return RotEllipse(hdc, pmrs, xL, yT, xR, yB);
}   /* FMeta_Ellipse */

// ***************************************************************************
// %%Function: FMeta_ArcChordPie         %%Owner: harip    %%Reviewed: 12/15/94
// Description: Three in one! Calls appropriate Rot-foo function
//
// ***************************************************************************
BOOL FMeta_ArcChordPie(HDC hdc, MRS *pmrs, LPMETARECORD lpMFR)
{
    int xL = ZScaled(pmrs, SParam(7)),
        yT = ZScaled(pmrs, SParam(6)),
        xR = ZScaled(pmrs, SParam(5)),
        yB = ZScaled(pmrs, SParam(4)),
        xS = ZScaled(pmrs, SParam(3)),   // xStartArc
        yS = ZScaled(pmrs, SParam(2)),   // yStartArc
        xE = ZScaled(pmrs, SParam(1)),   // xEndArc
        yE = ZScaled(pmrs, SParam(0));   // yEndArc

    AssertEx(lpMFR->rdFunction == META_ARC || lpMFR->rdFunction == META_CHORD ||
            lpMFR->rdFunction == META_PIE);

    ScaleXAndY(pmrs, &xL, &yT);
    ScaleXAndY(pmrs, &xR, &yB);
    ScaleXAndY(pmrs, &xS, &yS);
    ScaleXAndY(pmrs, &xE, &yE);

	if (lpMFR->rdFunction == META_ARC)
		return RotArc(hdc, pmrs, xL, yT, xR, yB, xS, yS, xE, yE);
	else if (lpMFR->rdFunction == META_CHORD)
		return RotChord(hdc, pmrs, xL, yT, xR, yB, xS, yS, xE, yE);
	else
		return RotPie(hdc, pmrs, xL, yT, xR, yB, xS, yS, xE, yE);
}   /* FMeta_Arc */

// ***************************************************************************
// %%Function: FMeta_FooFloodFill        %%Owner: harip    %%Reviewed: 12/15/94
// Description: handles FloodFill and ExtFloodFill
//
// ***************************************************************************
BOOL FMeta_FooFloodFill(HDC hdc, MRS *pmrs, LPHANDLETABLE lpHTable, LPMETARECORD lpMFR, int nObj)
{
    POINT  ptT;
    short x,y;
    int bCoord; // offsett to be added depending on the record
    BOOL fSuccess;

    AssertEx(lpMFR->rdFunction == META_FLOODFILL ||
            lpMFR->rdFunction == META_EXTFLOODFILL);

    bCoord = (lpMFR->rdFunction == META_FLOODFILL) ? 0 : 1;
    ptT.y = ZScaled(pmrs, y = SParam(2+bCoord));    // clrref takes 2 ints
    ptT.x = ZScaled(pmrs, x = SParam(3+bCoord));
    ScaleXAndY(pmrs, (int*)&(ptT.x), (int*)&(ptT.y));
    RotRotatePt(pmrs, &ptT);
    Param(2+bCoord) = (short)ptT.y;
    Param(3+bCoord) = (short)ptT.x;
    fSuccess = PlayMetaFileRecord(hdc, lpHTable, lpMFR, nObj);
    Param(2+bCoord) = y;
    Param(3+bCoord) = x;
    return fSuccess;
} /* FMeta_FloodFill */

// ***************************************************************************
// %%Function: FMeta_PatBlt             %%Owner: harip    %%Reviewed: 12/15/94
// Description:
//
// ***************************************************************************
BOOL FMeta_PatBlt(HDC hdc, MRS *pmrs, LPMETARECORD lpMFR)
{
    int xL = ZScaled(pmrs, SParam(5)),
        yT = ZScaled(pmrs, SParam(4)),
        dx = ZScaledNZ(pmrs, SParam(3)),
        dy = ZScaledNZ(pmrs, SParam(2));
    int sign;

    AssertEx(lpMFR->rdFunction == META_PATBLT);

    ScaleXAndY(pmrs, &xL, &yT);
    dx = MulDivR(dx, pmrs->mde.xScaleNum, pmrs->mde.xScaleDen);
    dy = MulDivR(dy, pmrs->mde.xScaleNum, pmrs->mde.xScaleDen);
    if (FScaleX(pmrs))
        {
        sign = Sgn(dx);
        dx = sign * Abs(ZScaleZ(pmrs, dx));
        }
    else
        {
        sign = Sgn(dy);
        dy = sign * Abs(ZScaleZ(pmrs, dy ));
        }
    return RotPatBlt(hdc, pmrs, xL, yT, dx, dy, MAKELONG(Param(0), Param(1)));
}   /* FMeta_Ellipse */

// ***************************************************************************
// %%Function: CopySdibToDibext         %%Owner: harip    %%Reviewed: 00/00/00
//  
// Description:
//  
// ***************************************************************************
void CopySdibToDibext(LPSDIB psdib, PDIBEXT pdibext)
{
    pdibext->dySrc = psdib->dySrc;
    pdibext->dxSrc = psdib->dxSrc;
    pdibext->ySrc =  psdib->ySrc;
    pdibext->xSrc =  psdib->xSrc;
    pdibext->dyDst = psdib->dyDst;
    pdibext->dxDst = psdib->dxDst;
    pdibext->yDst =  psdib->yDst;
    pdibext->xDst =  psdib->xDst;
}	// CopySdibToDibext

// ***************************************************************************
// %%Function: FNeedToScaleDIB          %%Owner: harip    %%Reviewed: 12/15/94
//
// Parameters:
//          ohgxf : oh of frame containing the dib (can be ohNil)
// Description:
//          return fTrue if we need to scale the dib pointed to by lpbmih so
//          that scaling in x and y is the same.
// ***************************************************************************
BOOL FNeedToScaleDIB(MRS *pmrs, LPBITMAPINFOHEADER lpbmih,
                                                    int *pdxNew, int *pdyNew)
{
    BOOL    fNeedToScale=fFalse;

    // if we need to scale we scale down one side of the dib depending on which
    // coordinate we are scaling during this rotation (from FScaleX()).
    *pdyNew = lpbmih->biHeight;
    *pdxNew = lpbmih->biWidth;

    int dzT;
    long    lScaleNum, lScaleDen;

    // calc scale values
    CalcScaleValues(pmrs, &lScaleNum, &lScaleDen);
    // we only want to do the scaling and dont want to worry about the sign.
    lScaleNum = Abs(lScaleNum);
    lScaleDen = Abs(lScaleDen);
    // this handles dibs in metafiles.
    if (FScaleX(pmrs))
        {
        dzT = MulDivR(lpbmih->biWidth, pmrs->mde.xScaleNum,pmrs->mde.xScaleDen);
        dzT = MulDivR(dzT, pmrs->mde.yScaleDen, pmrs->mde.yScaleNum);
        *pdxNew = Abs(MulDivR(dzT, lScaleNum, lScaleDen));
        }
    else
        {
        dzT = MulDivR(lpbmih->biHeight, pmrs->mde.yScaleNum,pmrs->mde.yScaleDen);
        dzT = MulDivR(dzT, pmrs->mde.xScaleDen, pmrs->mde.xScaleNum);
        *pdyNew = Abs(MulDivR(dzT, lScaleNum, lScaleDen));
		}

	if (FScaleX(pmrs))
		fNeedToScale = (lpbmih->biWidth != *pdxNew);
	else
		fNeedToScale = (lpbmih->biHeight != *pdyNew);
	return fNeedToScale;
}   /* FNeedToScaleDIB */

// ***************************************************************************
// %%Function: FLotsOfMemReqd           %%Owner: harip    %%Reviewed: 01/16/96
//
// Parameters:  *pdxReqd, *pdyReqd: (IN/OUT)size of bits which would be rotated. Need not
//                              be the original size (unequally scaled pifs).
//              *pndivisor: number to divide by to scale down.
// Description: Returns fTrue if the intermediate dib bits would require a
//          lot of memory. So we want to warn the user about this and
//          scale down the sides and rotate that. In this case *pndivisor
//          will contain the amount to divide the sides by.
//          ELSE returns fFalse.
// ***************************************************************************
BOOL FLotsOfMemReqd(MRS *pmrs, LPBITMAPINFOHEADER lpbmih, int *pdxNew, int *pdyNew, int *pndivisor)
{
    MEMORYSTATUS ms;
    int cbPixel;    // number of bytes per pixel
    int dxT = *pdxNew,
        dyT = *pdyNew;
    BOOL fReturn = fFalse;
    RECT rcRot, rcNew;
    DRC drcRot;
    int ndivisor;

    ndivisor = 1;  // init to 1 ==> no scaling.
    if (lpbmih->biBitCount <= 8)
        cbPixel = 2;    // the values are 1 and 3 mult by 2 since we want
    else                // twice the size in the product below. This is so that
        cbPixel = 6;    // we take the intermediate also into account.

    ms.dwLength = sizeof(MEMORYSTATUS); // got to do this
    GlobalMemoryStatus(&ms);            // get total avail mem info.
    // get bounding rc's since that is the size of final DIB bits
    SetRc(&rcRot, 0, 0,dxT, dyT);
	BoundingRcFromRcAng(&rcNew, &rcRot, pmrs->ang);
    RcToDrc(rcNew, &drcRot);
    // we keep scaling down while the mem reqd is > half the total RAM.
    while ((cbPixel * drcRot.dx * drcRot.dy) > MulDivR(ms.dwTotalPhys, 1L, 2L))
        {
        ndivisor++;
        dxT = MulDivR(*pdxNew, 1L, ndivisor);
        dyT = MulDivR(*pdyNew, 1L, ndivisor);
        SetRc(&rcRot, 0, 0,dxT, dyT);
		BoundingRcFromRcAng(&rcNew, &rcRot, pmrs->ang);
        RcToDrc(rcNew, &drcRot);
        }   //while
#ifdef DEBUG
    if (ndivisor > 1)
        {
        CommSzNum(_T("Size of bounding bits (in bytes): "), *pdxNew-0);
        CommSzNum(_T(" x "), *pdyNew - 0);
        CommSzNum(_T(" x "), cbPixel / 2);
        CommCrLf();
        if (ndivisor > 1)
            {
            CommSzNum(_T("Dividing factor = "), ndivisor - 0);
            }
        else
            {
            CommSz(_T("**** Did not scale down. *****"));
            }
        CommCrLf();
        }
#endif
    if ((*pndivisor = ndivisor) > 1)
        {
        *pdxNew = dxT;
        *pdyNew = dyT;
        fReturn = fTrue;
        }
    return fReturn;
}   // FLotsOfMemReqd

// ***************************************************************************
// %%Function: FRotateDIBits            %%Owner: harip    %%Reviewed: 01/16/96
//  
// Description: Rotates the dib bits and returns fTrue on success.
//  
// ***************************************************************************
BOOL FRotateDIBits(HDC hdc, MRS *pmrs, LPBITMAPINFOHEADER lpbmih, DIBEXT *pdibext, 
                        BYTE *pDIBBitsOrig, UINT iUsage, DWORD dwRopOrig)
{
    BYTE       *pDIBBitsRot=NULL;
    BOOL	fSuccess =         fFalse,
            fDIBScaled =     fFalse,
            fBitBlt = fFalse;

    BITMAPINFOHEADER *lpbmihScaled, bmihSav;
    HPALETTE    hpalSav=NULL;
    HQ hqDIBBitsRot = NULL;
	HQ hqDIBBitsOrig = NULL;
            
    RECT  rcRot, rcNew;
    DRC drcRot, drcRotDst;
    DSI dsiScaled, dsiScaledRot;  // dibsection info for the scaled dib bits
	int cPSClip;
	MGE mge;

    bmihSav = *lpbmih;  //save away dib info so that we can restore later
    
    // check that bits are not encoded and if they are, convert to BI_RGB
    if (lpbmih->biCompression != BI_RGB)
        {
        // convert RLE to RGB bitmap, since rotating rle bits leads to bogosity
        if (hqDIBBitsOrig = HQDIBBitsConvertDIB(hdc, lpbmih, pDIBBitsOrig, BI_RGB))
            pDIBBitsOrig = (BYTE*)LpLockHq(hqDIBBitsOrig);
        else
            goto LExit;
        }
    // check if we need to get the bits in the same proportion as viewport.
    {
    int dxNew, dyNew;   // size for new dib returned by FNeedToScaleDIB()
    int ndivisor;

    fDIBScaled = FNeedToScaleDIB(pmrs, lpbmih, &dxNew, &dyNew);
    if (!fDIBScaled)
        {
        dxNew = lpbmih->biWidth;
        dyNew = Abs(lpbmih->biHeight);
        }
    // now check if the image is so big that trying to rotate it will send
    // us into disk rotating confusion.
     if (FLotsOfMemReqd(pmrs, lpbmih, &dxNew, &dyNew, &ndivisor))
        {
        AssertEx(ndivisor > 1);
        pdibext->dxSrc = MulDivR(pdibext->dxSrc, 1, ndivisor);
        pdibext->dySrc = MulDivR(pdibext->dySrc, 1, ndivisor);
        fDIBScaled = fTrue; // so that we go through normal scaling code
        }

    if (fDIBScaled)
        {
        // clear out the dsi's
        // NOTE: FUTURE: using i variable for the dsi will simplify cleanup code and would
        //              not require this setting to 0 stuff here.
        ClearStruct(dsiScaled);
        ClearStruct(dsiScaledRot);

        if (!FDIBBitsScaledFromHDIB(hdc, pmrs, lpbmih, pDIBBitsOrig, dxNew, dyNew, &dsiScaled))
            {
            FreeDIBSection(&dsiScaled);
            goto LCleanup;
            }
        pDIBBitsOrig = (BYTE*)dsiScaled.lpBits;
        lpbmihScaled = NULL;
        if (hqDIBBitsOrig)
            {
            UnlockHq(hqDIBBitsOrig);
            FreeHq(hqDIBBitsOrig);
            hqDIBBitsOrig = hqNil;
            }
        }
    }
    // get bounding rc's for the source and destination rc's of the BLT record.
    SetRc(&rcRot, pdibext->xSrc, pdibext->xSrc,
                    pdibext->xSrc + pdibext->dxSrc, pdibext->ySrc + pdibext->dySrc);
    // get size of rotated bitmap
    BoundingRcFromRcAng(&rcNew, &rcRot, pmrs->ang);
    RcToDrc(rcNew, &drcRot);
    // now the dest
    SetRc(&rcRot, pdibext->xDst, pdibext->yDst,
                    pdibext->xDst + pdibext->dxDst, pdibext->yDst + pdibext->dyDst);

    ScaleXAndY(pmrs, (int*)&rcRot.left, (int*)&rcRot.top);
    ScaleXAndY(pmrs, (int*)&rcRot.right, (int*)&rcRot.bottom);
	RRC rrcT;
	RrcFromMatRc(&rrcT, &pmrs->mat, &rcRot);
	BoundingRcFromRrc(&rcNew, &rrcT);
    RcToDrc(rcNew, &drcRotDst);

    // need to do this stuff below because -ve dz's are used to flip the bits
    // from src to dst and going from rc to drc screws with the origin ot the drc.
    if ((pdibext->dxDst < 0) && (Sgn(pmrs->mde.drcWin.dx) != Sgn(pmrs->mde.drcView.dx)))
        {
        drcRotDst.x += drcRotDst.dx;
        drcRotDst.dx = -drcRotDst.dx;
        }
    if ((pdibext->dyDst < 0) && (Sgn(pmrs->mde.drcWin.dy) != Sgn(pmrs->mde.drcView.dy)))
        {
        drcRotDst.y += drcRotDst.dy;
        drcRotDst.dy = -drcRotDst.dy;
        }
    // if the dib is being inverted as part of the blt we'll pretend that the bits are
    // inverted when rotating them. biHeight is made +ve again in HDIBBitsRot().
    if ((pdibext->dyDst < 0) && (pmrs->mde.drcWin.dy > 0))
        lpbmih->biHeight *= -1;
    // lets rotate
    if ((hqDIBBitsRot = HQDIBBitsRot(pmrs, lpbmih, pDIBBitsOrig, pmrs->ang)) == NULL)
        goto LCleanup;
    AssertEx(Sgn(lpbmih->biHeight) == Sgn(bmihSav.biHeight));

    pDIBBitsRot = (BYTE*)LpLockHq(hqDIBBitsRot);    // get pointer to the bits

#ifdef DEBUG_BITS_ROT
	BLOCK
		{
		StretchDIBits(pmrs->hdcDebug, 0, 0, lpbmih->biWidth, lpbmih->biHeight,
			0,0, lpbmih->biWidth, lpbmih->biHeight, pDIBBitsRot,
			(LPBITMAPINFO)lpbmih, DIB_RGB_COLORS, SRCCOPY);
		}
#endif // DEBUG_BITS_ROT

    if (fDIBScaled) // scale it back to size we would have got
        {
        FreeDIBSection(&dsiScaled);
        if (!FDIBBitsScaledFromHDIB(hdc, pmrs, lpbmih, pDIBBitsRot, drcRot.dx, drcRot.dy, &dsiScaledRot))
            goto LCleanup;
        pDIBBitsRot = (BYTE*)dsiScaledRot.lpBits;
        }   // if (fDIBScaled)

	SDE sde = SdeFromHwndHdc(NULL, hdc);
	InitMge(pNil, 0, &mge, &sde, qinitsdePaint);
	// We have no CQuillView to use to call SetMgeDisplay
	// so set the needed fields by hand.
	mge.rcVisi = rcNew; // rcNew is the bounding rect of the rotated image
	mge.ang = pmrs->ang;
	mge.mat = pmrs->mat;
	mge.fPrint = pmrs->fPrint;

 	cPSClip = SavePSClipRgn(&mge);
	ClipRcPS(&mge, &rcRot, grfcrcNormal);

    // finally, we display it
    fSuccess = (StretchDIBits(hdc, drcRotDst.x, drcRotDst.y, drcRotDst.dx, drcRotDst.dy,
                            0,0, lpbmih->biWidth, lpbmih->biHeight, pDIBBitsRot,
                            (LPBITMAPINFO)lpbmih, iUsage, dwRopOrig) !=
                            GDI_ERROR);

	RestorePSClipRgn(&mge, cPSClip);
	FreeMge(&mge);

LCleanup:
    // cleanup if necessary
    if (hqDIBBitsOrig)
        {
        UnlockHq(hqDIBBitsOrig);
        FreeHq(hqDIBBitsOrig);
        }

    *lpbmih = bmihSav;   //restore
    if (hqDIBBitsRot)
        {
        UnlockHq(hqDIBBitsRot);
        FreeHq(hqDIBBitsRot);
        }
    if (fDIBScaled)
        FreeDIBSection(&dsiScaledRot);
LExit:
    return fSuccess;

}    //     FRotateDIBits

BOOL NormalizeDCCoords(HDC hdc, DCInfo *pDCInfo)
{
	AssertEx(pDCInfo);

    GetViewportOrgEx(hdc, (LPPOINT)&pDCInfo->ptdVPSav);
    GetViewportExtEx(hdc, (LPSIZE)&pDCInfo->dptdVPSav);
    GetWindowOrgEx(hdc, (LPPOINT)&pDCInfo->ptdWinSav);    
    GetWindowExtEx(hdc, (LPSIZE)&pDCInfo->dptdWinSav);    

	BOOL fFlipHorz = pDCInfo->dptdVPSav.x < 0;
	BOOL fFlipVert = pDCInfo->dptdVPSav.y < 0;

	if (!fFlipHorz && !fFlipVert)
		return fFalse; // No flipping was undone

    SetViewportExtEx(hdc, fFlipHorz ? -pDCInfo->dptdVPSav.x : pDCInfo->dptdVPSav.x,
    					  fFlipVert ? -pDCInfo->dptdVPSav.y : pDCInfo->dptdVPSav.y, (LPSIZE)NULL); 
    SetViewportOrgEx(hdc, pDCInfo->ptdVPSav.x + (fFlipHorz ? pDCInfo->dptdVPSav.x : 0),
    					  pDCInfo->ptdVPSav.y + (fFlipVert ? pDCInfo->dptdVPSav.y : 0), (LPPOINT)NULL);

	return fTrue; // Flipping was undone
}

void RestoreDCCoords(HDC hdc, DCInfo *pDCInfo)
{
	AssertEx(pDCInfo);
	
	SetViewportOrgEx(hdc, pDCInfo->ptdVPSav.x, pDCInfo->ptdVPSav.y, (LPPOINT)NULL);  //Restore VPort Orig
	SetViewportExtEx(hdc, pDCInfo->dptdVPSav.x, pDCInfo->dptdVPSav.y, (LPSIZE)NULL);  //Restore VPort Ext
}

// ***************************************************************************
// %%Function: FMeta_StretchFoo         %%Owner: harip    %%Reviewed: 12/15/94
//
// Description: Handles all the bitmap blt calls (META_STRETCHDIB etc.)
// ***************************************************************************
BOOL FMeta_StretchFoo(HDC hdc, MRS *pmrs, LPMETARECORD lpMFR, EMFP FAR *lpemfp)
{
    SDIB *psdib, sdibT;
    int iwDySrc;
    LPBITMAPINFOHEADER lpbmih;
    BOOL  fSuccess = fFalse;
    DWORD dwRopOrig;
    BYTE   *pDIBBitsOrig = NULL;
    WORD    wUsage;
    UINT    iUsage=DIB_RGB_COLORS;
    BOOL    fBitBlt = fFalse;
    SDBBLT  *psdblt;
    DIBEXT dibext;

    // get position of src/dest rc's in the metafile record
    if( lpMFR->rdFunction == META_STRETCHDIB )
        iwDySrc = 3;
    else if( lpMFR->rdFunction == META_STRETCHBLT ||
             lpMFR->rdFunction == META_DIBSTRETCHBLT )
        iwDySrc = 2;
    else if( lpMFR->rdFunction == META_SETDIBTODEV )
        iwDySrc = 0;
    else if( lpMFR->rdFunction == META_DIBBITBLT)
        {
        iwDySrc = 2;
        fBitBlt = fTrue;
        }
    else
        {
        AssertEx(fFalse);
        goto LExit; // what strange beast do we have here?
        }

    // since there is no iUsage for stretchblt()
    if (iwDySrc == 3)
        {
        wUsage = lpMFR->rdParm[2];
        iUsage = wUsage;
        }
    // this stuff below because for BITBLT dxSrc and dxDst is not present so
    // we have to translate to a sdib struct.
    if (fBitBlt)
        {
        psdblt = (SDBBLT *)&Param(iwDySrc);
        sdibT.dySrc = sdibT.dyDst = psdblt->dyDst;
        sdibT.dxSrc = sdibT.dxDst = psdblt->dxDst;
        sdibT.ySrc = psdblt->ySrc;
        sdibT.xSrc = psdblt->xSrc;
        sdibT.yDst = psdblt->yDst;
        sdibT.xDst = psdblt->xDst;
        psdib = &sdibT;
        lpbmih = (LPBITMAPINFOHEADER)((LPBYTE)psdblt + cbSDBBLT);
        }
    else
        {
        psdib = (SDIB *)&Param(iwDySrc);
        lpbmih = (LPBITMAPINFOHEADER)((LPBYTE)psdib + cbSDIB);
        }

    dwRopOrig = *((DWORD FAR *)&lpMFR->rdParm[0]);      //Store Original Rop
    // Get ptr to the bits of the Src DIB
    pDIBBitsOrig = (BYTE *)((BYTE *)lpbmih + CbDibHeader(lpbmih));
	CopySdibToDibext(psdib, &dibext);

	DCInfo dcinfo;
	long qflipSav;
	if (pmrs->fInverted)
		{
		qflipSav = pmrs->qflip;
		pmrs->qflip ^= (qflipHorz | qflipVert);
		NormalizeDCCoords(hdc, &dcinfo);
		}

	fSuccess = FRotateDIBits(hdc, pmrs, lpbmih, &dibext, pDIBBitsOrig, 
						    				iUsage, dwRopOrig);

	if (pmrs->fInverted)
		{
		pmrs->qflip = qflipSav;
		RestoreDCCoords(hdc, &dcinfo);
		}

LExit:
    return fSuccess;
} /* FMeta_StretchFoo */

void ScaleWindowExtentParmsForRotation(MRS *pmrs, short *px, short *py)
{
	*px = (short)(ZScaledNZ(pmrs, (short)*px));
	*py = (short)(ZScaledNZ(pmrs, (short)*py));
	pmrs->mde.drcWin.dx  =  (short)*px;
	pmrs->mde.drcWin.dy  =  (short)*py;
	ValidateDrcForRotate(&pmrs->mde.drcWin);
	if (FScaleX(pmrs))
		*px = (short) (Sgn(pmrs->mde.drcWin.dx) *
			Abs(MulDivR((short)*py,pmrs->mde.drcView.dx, pmrs->mde.drcView.dy)));
	else
		*py = (short)(Sgn(pmrs->mde.drcWin.dy) *
			Abs(MulDivR((short)*px,pmrs->mde.drcView.dy, pmrs->mde.drcView.dx)));
	// Zero extents don't make sense and cause PlayMetaFileRecord to fail.
	if (*py == 0)
		*py = 1;
	if (*px == 0)
		*px = 1;
}

// ***************************************************************************
// %%Function: FPlayRotatedMFR          %%Owner: harip    %%Reviewed: 12/15/94
//
// Description: this function handles the records for which we may need to do
//      something special or get information, in the case of rotation.
// Returns: fTrue if it handled the record (called PlayMetafileRecord) or else
//          fFalse (which means the calling function should handle the playing
//          of that record.
// ***************************************************************************
BOOL FPlayRotatedMFR(HDC hdc, LPHANDLETABLE lpHTable, LPMETARECORD lpMFR,
					int nObj, EMFP *lpemfp)
{
	MRS *pmrs = lpemfp->pmrs;

    AssertEx(pmrs->ang);

    switch(lpMFR->rdFunction)
        {
        case META_DIBSTRETCHBLT:
        case META_STRETCHBLT:       /* Stretches a DDB */
        case META_STRETCHDIB:       /* StretchDIBits */
        case META_DIBBITBLT:
            {
            if (!FRotContextSet(pmrs))
                SetMFRotationContext(pmrs);
            lpemfp->fMFRSucceeded = FMeta_StretchFoo(hdc, pmrs, lpMFR, lpemfp);
            return fTrue;
            }

#ifdef METAFILE_SQUAREEDGES
        case META_CREATEPENINDIRECT:
            {
            // We create the Pen ourself to use the extendid pen fetures (square edges)
            DWORD Style = ((LOGPEN16*)lpMFR->rdParm)->lopnStyle;
			DWORD Width = ((LOGPEN16*)lpMFR->rdParm)->lopnWidth.x;
			COLORREF crColor = ((LOGPEN16*)lpMFR->rdParm)->lopnColor;

            if (!FRotContextSet(pmrs))
                SetMFRotationContext(pmrs);

            if (!pmrs->fPrint)
                crColor = crColor & 0x00FFFFFF;

            if (Width > 0)
                Width = (short)MulDivR(ZScaled(pmrs, (short)Width), pmrs->mde.xScaleNum, pmrs->mde.xScaleDen);
			else
				Width = 1;

			LOGBRUSH logBrush;

			logBrush.lbStyle = BS_SOLID;
			logBrush.lbColor = crColor;
			logBrush.lbHatch = 0;

			if ( (Width > 1) && (Style == PS_SOLID || Style == PS_INSIDEFRAME) )
				Style = Style | PS_GEOMETRIC|PS_ENDCAP_FLAT|PS_JOIN_MITER;

			HPEN hPen = ExtCreatePen(Style, Width, &logBrush, 0, NULL);

			lpemfp->fMFRSucceeded = FALSE;
			if (hPen)
				{
				int i;
				for (i=0; i<nObj; i++)
					{
					if(lpHTable->objectHandle[i] == NULL)
						{
						lpHTable->objectHandle[i] = hPen;
						lpemfp->fMFRSucceeded = TRUE;
						break;
						}
					}
				}

            return fTrue;
            break;
            }
#else
        case META_CREATEPENINDIRECT:
            {
            // raid 1588 : need to scale down pen sizes by the amount we scale down the
            //             all other coordinates.
            PT16   pt;
            PT16 * lppt;
            COLORREF crSaved;

            if (!pmrs->fPrint)
                {
                crSaved = ((LOGPEN16 *)lpMFR->rdParm)->lopnColor;
				// Bug 4733 (Q98): unless we put the paletteRgb bit on, light rotated colors
				// may be displayed wrong on a 256 color display.
                ((LOGPEN16 *)lpMFR->rdParm)->lopnColor = (crSaved & 0x00FFFFFF) | qcrPaletteRgb;
                }

            if (!FRotContextSet(pmrs))
                SetMFRotationContext(pmrs);

            lppt = (PT16 FAR *)&Param(1);
            pt = *lppt;
            if (lppt->x > 0)
                lppt->x = (short)MulDivR(ZScaled(pmrs, lppt->x), pmrs->mde.xScaleNum, pmrs->mde.xScaleDen);
            lpemfp->fMFRSucceeded =
                        PlayMetaFileRecord(hdc, lpHTable, lpMFR, nObj);
            *lppt = pt;
            if (!pmrs->fPrint)
                ((LOGPEN16 *)lpMFR->rdParm)->lopnColor = crSaved;
            return fTrue;
            break;
            }
#endif

        case META_SAVEDC:
        	// Publisher sets the rotation context here for some reason.  I discussed
        	// this with HariP and he agreed that it seemed unnecessary.  The original
        	// rotation code check-in contained the context push (set) so it is unlikely
        	// that it served as a bug fix.  -davidhoe
            PushMDE(pmrs);
            goto LDefault;
        case META_RESTOREDC:
            PopMDE(pmrs);
            goto LDefault;

        case META_EXCLUDECLIPRECT :
        // returning fTrue because there is nothing we can do about this and we
        // certainly dont want the original record played.
            return fTrue;
        case META_OFFSETCLIPRGN:   // dont want to do much about this either.
            return fTrue;

        case META_INTERSECTCLIPRECT:
            if (!FRotContextSet(pmrs))
                SetMFRotationContext(pmrs);
            lpemfp->fMFRSucceeded = FMeta_IntersectClipRect(hdc, pmrs, lpMFR);
            return fTrue;
            break;

        case META_SETTEXTCHAREXTRA:
			NewCode("Attach metafile to bug and report any problems.");
            SetTextCharacterExtra(hdc, ZScaled(pmrs, SParam(0)));
            return fTrue;
            break;

        case META_CREATEFONTINDIRECT:
            lpemfp->fMFRSucceeded =
                            FMeta_CreateFontInd(hdc, pmrs, lpHTable, lpMFR, nObj);  // calls PlayMetaFileRecord
            return fTrue;
            break;
        case META_EXTTEXTOUT :
            if (!FRotContextSet(pmrs))
                SetMFRotationContext(pmrs);
            lpemfp->fMFRSucceeded =
                            FMeta_ExtTextOut(hdc, pmrs, lpHTable, lpMFR, nObj);
            return fTrue;
            break;
        case META_TEXTOUT :
            if (!FRotContextSet(pmrs))
                SetMFRotationContext(pmrs);
            lpemfp->fMFRSucceeded =
                            FMeta_TextOut(hdc, pmrs, lpHTable, lpMFR, nObj);
            return fTrue;
            break;
        case META_MOVETO:
            if (!FRotContextSet(pmrs))
                SetMFRotationContext(pmrs);
            lpemfp->fMFRSucceeded = FMeta_MoveTo(hdc, pmrs, lpMFR);
            return fTrue;
            break;
        case META_LINETO:
            if (!FRotContextSet(pmrs))
                SetMFRotationContext(pmrs);
            lpemfp->fMFRSucceeded = FMeta_LineTo(hdc, pmrs, lpMFR);
            return fTrue;
            break;
        case META_SETPIXEL:
            if (!FRotContextSet(pmrs))
                SetMFRotationContext(pmrs);
            lpemfp->fMFRSucceeded = FMeta_SetPixel(hdc, pmrs, lpMFR);
            return fTrue;
            break;

        case META_RECTANGLE:
            if (!FRotContextSet(pmrs))
                SetMFRotationContext(pmrs);
            lpemfp->fMFRSucceeded = FMeta_Rectangle(hdc, pmrs, lpMFR);
            return fTrue;
            break;
        case META_ROUNDRECT:
            if (!FRotContextSet(pmrs))
                SetMFRotationContext(pmrs);
            lpemfp->fMFRSucceeded = FMeta_RoundRect(hdc, pmrs, lpMFR);
            return fTrue;
            break;
        case META_POLYPOLYGON:
            if (!FRotContextSet(pmrs))
                SetMFRotationContext(pmrs);
            lpemfp->fMFRSucceeded = FMeta_PolyPolygon(hdc, pmrs, lpMFR);
            return fTrue;
            break;
        case META_POLYGON:
        case META_POLYLINE:
            if (!FRotContextSet(pmrs))
                SetMFRotationContext(pmrs);
            lpemfp->fMFRSucceeded = FMeta_PolyFoo(hdc, pmrs, lpMFR);
            return fTrue;
            break;
        case META_ELLIPSE:
            if (!FRotContextSet(pmrs))
                SetMFRotationContext(pmrs);
            lpemfp->fMFRSucceeded = FMeta_Ellipse(hdc, pmrs, lpMFR);
            return fTrue;
            break;
        case META_ARC:
        case META_CHORD:
        case META_PIE:
            if (!FRotContextSet(pmrs))
                SetMFRotationContext(pmrs);
            lpemfp->fMFRSucceeded = FMeta_ArcChordPie(hdc, pmrs, lpMFR);
            return fTrue;
            break;

        case META_FLOODFILL :
        case META_EXTFLOODFILL :
            if (!FRotContextSet(pmrs))
                SetMFRotationContext(pmrs);
            lpemfp->fMFRSucceeded =
                            FMeta_FooFloodFill(hdc, pmrs, lpHTable, lpMFR, nObj);
            return fTrue;
            break;

        case META_PATBLT:
            if (!FRotContextSet(pmrs))
                SetMFRotationContext(pmrs);
            lpemfp->fMFRSucceeded = FMeta_PatBlt(hdc, pmrs, lpMFR);
            return fTrue;
            break;


        case META_OFFSETWINDOWORG:
                // we dont play this record, but just remember the offset values.
                pmrs->mde.dxWinOff += ZScaled(pmrs, SParam(1));
                pmrs->mde.dyWinOff += ZScaled(pmrs, SParam(0));

                return fTrue;
                break;

        case META_SCALEWINDOWEXT:
                pmrs->mde.xWinScaleNum = pmrs->mde.drcWin.dx;
                pmrs->mde.xWinScaleDen = MulDivR(pmrs->mde.drcWin.dx, SParam(3), SParam(2));
                pmrs->mde.yWinScaleNum = pmrs->mde.drcWin.dy;
                pmrs->mde.yWinScaleDen = MulDivR(pmrs->mde.drcWin.dy, SParam(1), SParam(0));
                MultiplyRatios(pmrs->mde.xVPScaleNum,    pmrs->mde.xVPScaleDen,
                                pmrs->mde.yVPScaleNum,   pmrs->mde.yVPScaleDen,
                                pmrs->mde.xWinScaleNum,  pmrs->mde.xWinScaleDen,
                                pmrs->mde.yWinScaleNum,  pmrs->mde.yWinScaleDen,
                                &pmrs->mde.xScaleNum,    &pmrs->mde.xScaleDen,
                                &pmrs->mde.yScaleNum,    &pmrs->mde.yScaleDen);
                return fTrue;   // not playing this

        case META_SETWINDOWEXT:
            {
            if (FRotContextSet(pmrs))
                {
                pmrs->mde.xWinScaleNum = pmrs->mde.drcWin.dx;
                pmrs->mde.xWinScaleDen = ZScaledNZ(pmrs, SParam(1));
                pmrs->mde.yWinScaleNum = pmrs->mde.drcWin.dy;
                pmrs->mde.yWinScaleDen = ZScaledNZ(pmrs, SParam(0));
                MultiplyRatios(pmrs->mde.xVPScaleNum,    pmrs->mde.xVPScaleDen,
                                pmrs->mde.yVPScaleNum,   pmrs->mde.yVPScaleDen,
                                pmrs->mde.xWinScaleNum,  pmrs->mde.xWinScaleDen,
                                pmrs->mde.yWinScaleNum,  pmrs->mde.yWinScaleDen,
                                &pmrs->mde.xScaleNum,    &pmrs->mde.xScaleDen,
                                &pmrs->mde.yScaleNum,    &pmrs->mde.yScaleDen);
                return fTrue;   // not playing this
                }
            else
                {
                short dxSav = SParam(1);    // save values
                short dySav = SParam(0);
                short dx = dxSav;
                short dy = dySav;

				ScaleWindowExtentParmsForRotation(pmrs, &dx, &dy);

                Param(1) = dx;
                Param(0) = dy;

                lpemfp->fMFRSucceeded =
                                PlayMetaFileRecord(hdc, lpHTable, lpMFR, nObj);
                Param(1) = dxSav;
                Param(0) = dySav;
                return fTrue;
                }
             goto LDefault;
             break;
             }
        case META_SETWINDOWORG:
            {
            if (FRotContextSet(pmrs))
                {
                pmrs->mde.dxWinOff = ZScaled(pmrs, SParam(1)) - pmrs->mde.drcWin.x;
                pmrs->mde.dyWinOff = ZScaled(pmrs, SParam(0)) - pmrs->mde.drcWin.y;
                return fTrue;   // not playing this
                }
            else
                {
                short xT = SParam(1);
                short yT = SParam(0);
                Param(1) = (short)(pmrs->mde.drcWin.x  = ZScaled(pmrs, xT));
                Param(0) = (short)(pmrs->mde.drcWin.y  = ZScaled(pmrs, yT));
                ValidateDrcForRotate(&pmrs->mde.drcWin);
                lpemfp->fMFRSucceeded =
                            PlayMetaFileRecord(hdc, lpHTable, lpMFR, nObj);
                Param(1) = xT;
                Param(0) = yT;
                return fTrue;
                }
            goto LDefault;
            break;
            }
        case META_SCALEVIEWPORTEXT:
            MultiplyRatios(pmrs->mde.xVPScaleNum,    pmrs->mde.xVPScaleDen,
                            pmrs->mde.yVPScaleNum,   pmrs->mde.yVPScaleDen,
                            SParam(3),        SParam(2),
                            SParam(1),        SParam(0),
                            &pmrs->mde.xVPScaleNum,  &pmrs->mde.xVPScaleDen,
                            &pmrs->mde.yVPScaleNum,  &pmrs->mde.yVPScaleDen);
            MultiplyRatios(pmrs->mde.xVPScaleNum,    pmrs->mde.xVPScaleDen,
                            pmrs->mde.yVPScaleNum,   pmrs->mde.yVPScaleDen,
                            pmrs->mde.xWinScaleNum,  pmrs->mde.xWinScaleDen,
                            pmrs->mde.yWinScaleNum,  pmrs->mde.yWinScaleDen,
                            &pmrs->mde.xScaleNum,    &pmrs->mde.xScaleDen,
                            &pmrs->mde.yScaleNum,    &pmrs->mde.yScaleDen);
            return fTrue;
            break;
LDefault:
        default:
            return fFalse;
            break;

        } /* switch */
    AssertEx(fFalse); // something slipped through
	return fFalse;
}   /* FPlayRotatedMFR */

///////////////////////////
//
// more text out
//

//
// ExtTextOutFlip
//
BOOL ExtTextOutFlip(
    HDC     hdc,
    MRS		*pmrs,
    int     xp,
    int     yp,
    UINT    eto,
    RECT *lprcp,
    char *lpch,
    UINT    cch,
    int FAR *lpdxp)
{
    return RotExtTextOut(hdc, pmrs, xp, yp, eto, lprcp, lpch, cch, lpdxp);
} /* ExtTextOutFlip */

#define SwapValNonDebug(val1,val2)      ((val1)^=(val2), (val2)^=(val1), (val1)^=(val2))
#define  SwapVal(val1,val2)   (Assert0(sizeof(val1) == sizeof(val2), "SwapVal problem", 0, 0), \
							   SwapValNonDebug((val1),(val2)))

BOOL FMetaTextOutFlip2(HDC hdc, MRS *pmrs, int xp, int yp, UINT cch, char *pch,
	UINT eto, RC16 *prcp16, WORD *pdxp16);



// ---------------------------------------------------------------------------
// %%Function: FMetaTextOutFlip         %%Owner: davidve  %%Reviewed: 00/00/00
//
// Parameters:
//  hdc     -
//  pParam  -   Parameter list from METARECORD struct
//  cwParam -   Size in words of param list
//
// Returns:
//  fTrue is successful
//  fFalse otherwise
//
// Description:
//  Translate a metafile ExtTextOut record to a call to our upside-down
//  text printing routine.
//
//  You'll grow to love this code.
//
// ---------------------------------------------------------------------------
BOOL FMetaTextOutFlip(HDC hdc, MRS *pmrs, WORD * pParam, DWORD cwParam)
{
    /*
    Here is the format of the parameter list:
    Index   Content
        0   cch
        1   string
        1 + ((cch + 1)>>1)  yp
        2 + ((cch + 1)>>1)  xp
    */

    int     xp;
    int     yp;
    UINT    cch;

    cch = (UINT)(WORD)pParam[0];
    yp = (int)(short)pParam[1 + ((cch + 1) >> 1)];
    xp = (int)(short)pParam[2 + ((cch + 1) >> 1)];

    return FMetaTextOutFlip2(hdc, pmrs, xp, yp, cch, (char *)&pParam[1], 0, NULL, NULL);
} /* FMetaTextOutFlip */



// REVIEW (davidhoe):  Consider the possibility of trying to combine some of the
// TextOutFlip functions.  There are enough differences to require significant care.
// Note that Publisher, the source of these functions, has these functions separate
// just as we currently have.
BOOL FMetaExtTextOutFlip(HDC hdc, MRS *pmrs, WORD * pParam, DWORD cwParam)
{
    /*
    Here is the format of the parameter list:
    Index   Content
        0   yp
        1   xp
        2   cch
        3   options: eto flags
        4   if options != 0, contains a RECT, otherwise, nonexistent
    4 or 8  String
    4 or 8 + ((cch + 1)>>1)     rgdxp (optional)
    */

    int     xp;
    int     yp;
    UINT    cch;
    UINT    eto;
    RC16    *prcp16;
    WORD    *pdxp16;
    DWORD   cw;

    yp = (int)(short)pParam[0];
    xp = (int)(short)pParam[1];
    cch = (UINT)(WORD)pParam[2];
    eto = (UINT)((WORD)pParam[3] & ETO_CLIPPED) | ((WORD)pParam[3] & ETO_OPAQUE);
    cw = 4;
    if (!pParam[3])
        prcp16 = NULL;
    else
        {
        prcp16 = (RC16 FAR *)&pParam[4];
        cw += sizeof(RC16) / sizeof(WORD);
        }

    /* At this point, cw is the index to the string */
    char *pszT = (char *)&pParam[cw];

    cw += (cch + 1) >> 1;
    /* At this point, cw is the index to the array of character widths */
    /* Assert that there are either 0 or cch character widths */
    AssertEx(cw == cwParam || cw + cch == cwParam);
    if (cw >= cwParam)
        pdxp16 = NULL;
    else
        pdxp16 = &pParam[cw];

    return FMetaTextOutFlip2(hdc, pmrs, xp, yp, cch, pszT, eto, prcp16, pdxp16);
} /* FMetaExtTextOutFlip */



BOOL FMetaTextOutFlip2(HDC hdc, MRS *pmrs, int xp, int yp, UINT cch, char *pch, UINT eto, 
                       RC16 *prcp16, WORD *pdxp16)
{
    RECT      rcp;
    int     rgdxp[256];
    int     *pdxp = NULL;
    
    if (pdxp16 != NULL)
        {
        UINT idxp;
        /* we have to make a copy of the array of character widths
           padded to 32 bit */
        AssertEx(cch <= 256);
        cch = min((UINT)256, cch);
        pdxp = rgdxp;
        for(idxp = 0; idxp < cch; idxp++)
            pdxp[idxp] = (int)(short)pdxp16[idxp];
        }

    if (prcp16)
        {
        rcp.left   = (int)prcp16->xLeft;
        rcp.top    = (int)prcp16->yTop;
        rcp.right  = (int)prcp16->xRight;
        rcp.bottom = (int)prcp16->yBottom;
        }
    else
        {
        /* The metafile record didn't contain a bounding rect, so fake
            one */
        SIZE    sizeWExt;
        SIZE    sizeTExt;
        UINT    ta;
        TEXTMETRIC  tm;

        GetTextExtentPointA(hdc, pch, cch, &sizeTExt);
        GetWindowExtEx(hdc, &sizeWExt);
        ta = GetTextAlign(hdc);
        if ((ta & (TA_BASELINE | TA_BOTTOM | TA_TOP)) == TA_BASELINE)
            {
            GetTextMetrics(hdc, &tm);
            }
        if (sizeWExt.cy < 0)
            {
            sizeTExt.cy = -sizeTExt.cy;
            tm.tmAscent = -tm.tmAscent;
            tm.tmDescent = -tm.tmDescent;
            }
        switch (ta & (TA_BASELINE | TA_BOTTOM | TA_TOP))
            {
        case TA_TOP:
            rcp.top = yp;
            rcp.bottom = yp + sizeTExt.cy;
            break;
        case TA_BOTTOM:
            rcp.bottom = yp;
            rcp.top = yp - sizeTExt.cy;
            break;
        case TA_BASELINE:
            rcp.top = yp - tm.tmAscent;
            rcp.bottom = yp + tm.tmDescent;
            break;
            } /* switch vertical alignment */
        if (pdxp != NULL)
            {
            UINT    idxp;

            for (sizeTExt.cx = 0, idxp = 0; idxp < cch; idxp++)
                sizeTExt.cx += pdxp[idxp];
            }
        if (sizeWExt.cx < 0)
            {
            sizeTExt.cx = -sizeTExt.cy;
            }
        switch (ta & (TA_LEFT | TA_CENTER | TA_RIGHT))
            {
        case TA_LEFT:
            rcp.left = xp;
            rcp.right = xp + sizeTExt.cx;
            break;
        case TA_RIGHT:
            rcp.right = xp;
            rcp.left = xp - sizeTExt.cx;
            break;
        case TA_CENTER:
            rcp.left = xp - sizeTExt.cx / 2;
            rcp.right = rcp.left + sizeTExt.cx;
            break;
            } /* switch horizontal alignment */
        }

    return ExtTextOutFlip(hdc, pmrs, xp, yp, eto, &rcp, pch, cch, pdxp);

} /* FMetaTextOutFlip2 */

#endif // NOTYET
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\display\region.cxx ===
//+---------------------------------------------------------------------------
//
//  Microsoft Internet Explorer
//  Copyright (C) Microsoft Corporation, 1997-2000
//
//  File:       region.cxx
//
//  Contents:   Container class to operate regions in both Windows and local
//              representation.
//
//  Classes:    CRegion
//
//  Notes:      The purpose of this class is to avoid, whenever possible,
//              the expensive HRGN conversions from/to CRegion2.
//
//----------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_DISPTRANSFORM_HXX_
#define X_DISPTRANSFORM_HXX_
#include "disptransform.hxx"
#endif

MtDefine(CRegion, DisplayTree, "CRegion");


//+---------------------------------------------------------------------------
//
//  Member:     CRegion::Intersect
//              
//  Synopsis:   Intersect this region with the given HRGN.
//              
//  Arguments:  hrgn        HRGN to intersect
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

void
CRegion::Intersect(HRGN hrgn)
{
    Assert(hrgn != NULL);

    if (_rgn2.IsEmpty())
        return;
    
    RidHRGN();
    
    CRegion2 tmp;
    tmp.ConvertFromWindows(hrgn);
    _rgn2.Intersect(tmp);
}


//+---------------------------------------------------------------------------
//
//  Member:     CRegion::Union
//              
//  Synopsis:   Union this region with the given rect.
//              
//  Arguments:  rc      rect to union
//              
//  Notes:      
//              
//----------------------------------------------------------------------------
void
CRegion::Union(const RECT& rc)
{
    RidHRGN();
    CRegion2 tmpRgn(rc);
    _rgn2.Union(tmpRgn);
}

//+---------------------------------------------------------------------------
//
//  Member:     CRegion::Union
//              
//  Synopsis:   Union this region with the given HRGN.
//              
//  Arguments:  hrgn        HRGN to union
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

void
CRegion::Union(HRGN hrgn)
{
    RidHRGN();
    CRegion2 tmp;
    tmp.ConvertFromWindows(hrgn);
    _rgn2.Union(tmp);
}


//+---------------------------------------------------------------------------
//
//  Member:     CRegion::Subtract
//              
//  Synopsis:   Subtract the given rect from this region.
//              
//  Arguments:  rc      rect to subtract
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

void
CRegion::Subtract(const RECT& rc)
{
    RidHRGN();
    CRegion2 tmp(rc);
    _rgn2.Subtract(tmp);
}


//+---------------------------------------------------------------------------
//
//  Member:     CRegion::Subtract
//              
//  Synopsis:   Subtract the given HRGN from this region.
//              
//  Arguments:  hrgn        HRGN to subtract
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

void
CRegion::Subtract(HRGN hrgn)
{
    RidHRGN();
    CRegion2 tmp;
    tmp.ConvertFromWindows(hrgn);
    _rgn2.Subtract(tmp);
}

//+---------------------------------------------------------------------------
//
//  Member:     CRegion::BoundsInside
//              
//  Synopsis:   Determine whether this region is totally contained in given rectangle
//              
//  Arguments:  rc      given rectangle
//              
//  Returns:    TRUE if this region is totally contained in given rectangle
//              
//----------------------------------------------------------------------------
BOOL
CRegion::BoundsInside(const RECT& rc) const
{
    CRect rcBounds;
    _rgn2.GetBoundingRect(rcBounds);
    return ((CRect&)rc).Contains(rcBounds);
}

//+---------------------------------------------------------------------------
//
//  Member:     CRegion::BoundsIntersects
//              
//  Synopsis:   Determine whether this region contains points in given rectangle
//              
//  Arguments:  rc      given rectangle
//              
//  Returns:    TRUE if this region's bounding rectangle contains one or more points of given rectangle
//              
//----------------------------------------------------------------------------
BOOL
CRegion::BoundsIntersects(const RECT& rc) const
{
    CRect rcBounds;
    _rgn2.GetBoundingRect(rcBounds);
    return rcBounds.Intersects(rc);
}

//+---------------------------------------------------------------------------
//
//  Member:     CRegion::ResultOfSubtract
//              
//  Synopsis:   This method returns a quick estimate of the type of region that
//              will be returned if the given region is subtracted from this
//              one.
//              
//  Arguments:  rgnSubtract     region to be subtracted
//              
//  Returns:    SR_RECTANGLE    if the result would be a rectangle
//              SR_REGION       if the result would be a complex region
//              SR_UNKNOWN      if the result cannot be determined without
//                              invoking the more expensive Subtract method
//                              
//  Notes:      
//              
//----------------------------------------------------------------------------

CRegion::SUBTRACTRESULT
CRegion::ResultOfSubtract(const CRegion& rgnSubtract) const
{
    CRect rcThis, rcThat;
                _rgn2.GetBoundingRect(rcThis);
    rgnSubtract._rgn2.GetBoundingRect(rcThat);

    if (IsComplex())
    {
        if (rgnSubtract.IsComplex())
            return SUB_UNKNOWN;
        return (rcThat.Contains(rcThis))
            ? SUB_EMPTY
            : SUB_UNKNOWN;
    }
    
    if (rgnSubtract.IsComplex())
    {
        return (rcThis.Intersects(rcThat))
            ? SUB_UNKNOWN
            : SUB_RECTANGLE;
    }

    // subtracted rectangle must contain at least two corners of this
    // rectangle to yield a rectangular result.  If it contains 4, the
    // result will be empty.
    int cContainedCorners =
        rcThat.CountContainedCorners(rcThis);
    switch (cContainedCorners)
    {
    case -1:
        return SUB_RECTANGLE;   // rectangles do not intersect
    case 0:
        return SUB_REGION;      // produces rectangle with a hole in it
    case 1:
        return SUB_REGION;      // produces a rectangle with notch out of a corner
    case 2:
        return SUB_RECTANGLE;   // produces a smaller rectangle
    case 4:
        return SUB_EMPTY;       // rectangles completely overlap
    default:
        Assert(FALSE);          // 3 is an impossible result
    }
    return SUB_REGION;
}


//+---------------------------------------------------------------------------
//
//  Member:     CRegion::Transform
//
//  Synopsis:   Transform region
//
//----------------------------------------------------------------------------

void 
CRegion::Transform(const CWorldTransform *pTransform, BOOL fRoundOut)
{
    // NOTE:  In some (rare) scenarios, rotating a region must
    //        produce a polygon. In most cases, we'll want to 
    //        get a bounding rectangle instead (for performance reasons,
    //        or just to make our life easier).
    //        If these two different behaviors are actually 
    //        desired, we need to use different transformation methods,
    //        or maybe a flag.
    

    // speed optimization for offset-only matrix
    if (pTransform->IsOffsetOnly())
    {
        Offset(pTransform->GetOffsetOnly());
        return;
    }

    if (pTransform->FTransforms())
    {

        // Apply transform to the region
        // Note: We can only transform complex rectangle regions only
        // Once the region is transformed it will be of a polygon type
        // and can not be transformed again.

        RidHRGN();
        _rgn2.Transform(pTransform, fRoundOut);
    }
}



//+---------------------------------------------------------------------------
//
//  Member:     CRegion::Untransform
//
//  Synopsis:   Untransform region
//
//----------------------------------------------------------------------------
void 
CRegion::Untransform(const CWorldTransform *pTransform)
{
    // apply the reverse transformation
    //REVIEW dmitryt: we do have a reverse matrix in CWorldTransform,
    //                I guess we could optimize things here not calculating a new one..
    //          To Do: use cached reverse matrix from CWorldTransform.
    
    Assert(pTransform);
    
    // speed optimization in case we only have an offset
    if (pTransform->IsOffsetOnly())
    {
        Offset(-pTransform->GetOffsetOnly());
        return;
    }
   
    CWorldTransform transformReverse(pTransform);
    transformReverse.Reverse();
    Transform(&transformReverse, TRUE);
}


#if DBG == 1
//+---------------------------------------------------------------------------
//
//  Member:     DumpRegion
//
//  Synopsis:   debugging
//
//----------------------------------------------------------------------------

void 
DumpRegion(const CRegion& rgn)
{
    rgn.Dump();
}

void
CRegion::Dump() const
{
    DumpRegion(_rgn2);
}
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\display\rect.cxx ===
//+---------------------------------------------------------------------------
//
//  Microsoft Internet Explorer
//  Copyright (C) Microsoft Corporation, 1997-1998
//
//  File:       rect.cxx
//
//  Contents:   Class to make rectangles easier to deal with.
//
//  Classes:    CRect
//
//----------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_RECT_HXX_
#define X_RECT_HXX_
#include "rect.hxx"
#endif


//+---------------------------------------------------------------------------
//
//  Member:     CRect::Union
//              
//  Synopsis:   Extend rect to contain the given point.  If the rect is
//              initially empty, it will contain only the point afterwards.
//              
//  Arguments:  p       point to extend to
//              
//----------------------------------------------------------------------------

void
CRect::Union(const POINT& p)
{
    if (IsRectEmpty())
        SetRect(p.x,p.y,p.x+1,p.y+1);
    else
    {
        if (p.x < left) left = p.x;
        if (p.y < top) top = p.y;
        if (p.x >= right) right = p.x+1;
        if (p.y >= bottom) bottom = p.y+1;
    }
}


//+---------------------------------------------------------------------------
//
//  Member:     CRect::Intersects
//              
//  Synopsis:   Determine whether the given rect intersects this rect without
//              taking the time to compute the intersection.
//              
//  Arguments:  rc      other rect
//              
//  Returns:    TRUE if the rects are not empty and overlap    
//              
//----------------------------------------------------------------------------

BOOL
CRect::Intersects(const RECT& rc) const
{
    return
        left < rc.right &&
        top < rc.bottom &&
        right > rc.left &&
        bottom > rc.top &&
        !IsRectEmpty() &&
        !((CRect&)rc).IsRectEmpty();
}


//+---------------------------------------------------------------------------
//
//  Function:   CalcScrollDelta
//
//  Synopsis:   Calculates the distance needed to scroll to make a given rect
//              visible inside this rect.
//
//  Arguments:  rc          Rectangle which needs to be visible inside this rect
//              psizeScroll Amount to scroll
//              vp, hp      Where to "pin" given RECT inside this RECT
//
//  Returns:    TRUE if scrolling required.
//
//----------------------------------------------------------------------------

BOOL
CRect::CalcScrollDelta(
        const CRect& rc,
        CSize* psizeScroll,
        SCROLLPIN spVert,
        SCROLLPIN spHorz) const
{
    int         i;
    long        cxLeft;
    long        cxRight;
    SCROLLPIN   sp;

    Assert(psizeScroll);

    if ((spVert == SP_MINIMAL || spVert == SP_TYPINGSCROLL)
          && (spHorz == SP_MINIMAL || spHorz == SP_TYPINGSCROLL)
          && Contains(rc))
    {
        *psizeScroll = g_Zero.size;
        return FALSE;
    }

    sp = spHorz;
    for (i = 0; i < 2; i++)
    {
        // Calculate amount necessary to "pin" the left edge
        cxLeft = rc[i] - (*this)[i];

        // Examine right edge only if not "pin"ing to the left
        if (sp != SP_TOPLEFT)
        {
            Assert(sp == SP_BOTTOMRIGHT || sp == SP_MINIMAL || sp == SP_TYPINGSCROLL);

            cxRight = (*this)[i+2] - rc[i+2];

            // "Pin" the inner RECT to the right side of the outer RECT
            if (sp == SP_BOTTOMRIGHT)
            {
                cxLeft = -cxRight;
            }

            // Otherwise, move the minimal amount necessary to make the
            // inner RECT visible within the outer RECT
            // (This code will try to make the entire inner RECT visible
            //  and gives preference to the left edge)
            else if (cxLeft > 0)
            {
                if (cxRight >= 0)
                {
                    cxLeft = 0;
                }
                else if (-cxRight < cxLeft)
                {
                    cxLeft = -cxRight;
                }
            }
        }
        if(sp == SP_TYPINGSCROLL)
        {
            if(cxLeft > 0)
                cxLeft = max(cxLeft, ((*this)[i+2] - (*this)[i]) / 3);
            else if (cxLeft < 0)
                cxLeft = min(cxLeft, -((*this)[i+2] - (*this)[i]) / 3);                    
        }

        (*psizeScroll)[i] = cxLeft;
        sp = spVert;
    }

    return !psizeScroll->IsZero();
}


//+---------------------------------------------------------------------------
//
//  Member:     CRect::CountContainedCorners
//              
//  Synopsis:   Count how many corners of the given rect are contained by
//              this rect.  This is tricky, because a rect doesn't technically
//              contain any of its corners except the top left.  This method
//              returns a count of 4 for rc.CountContainedCorners(rc).
//              
//  Arguments:  rc      rect to count contained corners for
//              
//  Returns:    -1 if rectangles do not intersect, or 0-4 if they do.  Zero
//              if rc completely contains this rect.
//              
//  Notes:      
//              
//----------------------------------------------------------------------------

int
CRect::CountContainedCorners(const RECT& rc) const
{
    if (!Intersects(rc))
        return -1;
    
    int c = 0;
    if (rc.left >= left) {
        if (rc.top >= top) c++;
        if (rc.bottom <= bottom) c++;
    }
    if (rc.right <= right) {
        if (rc.top >= top) c++;
        if (rc.bottom <= bottom) c++;
    }
    return c;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\download\bitsctx.cxx ===
#error "@@@ This file is nuked"
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\display\region2.cxx ===
//+-----------------------------------------------------------------------
//
//  Microsoft MSHTM
//  Copyright (C) Microsoft Corporation, 1999
//
//  File:      src\site\display\region2.cpp
//
//  Contents:  CRegion2 implementation
//
//  Classes:   CRegion2
//             CRgnData (local)
//             CStripe  (local)
//
//------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_REGION2_HXX_
#define X_REGION2_HXX_
#include "region2.hxx"
#endif


#ifndef X_FLOAT2INT_HXX_
#define X_FLOAT2INT_HXX_
#include "float2int.hxx"
#endif

#undef F2I_MODE
#define F2I_MODE Flow

#ifndef X_DISPTRANSFORM_HXX_
#define X_DISPTRANSFORM_HXX_
#include "disptransform.hxx"
#endif

MtDefine(CRegion2, DisplayTree, "CRegion2");

#if DBG == 1
#  define RGN_INLINE
#else
#  define RGN_INLINE inline
#endif


// CRegion2 data are contained in variable-length structure CRgnData,
// that occupies single contiguous memory block.
// Empty regions have no data, and _pData == 0.
//
// class CRgnData
// {
//     int _count;          // number of horizontal stripes
//     int _left, _right;   // bounding rectangle edges: left <= x < right
//     class CStripe
//     {
//          int _nTop;  // top y of a stripe
//          int* _px;   // points into xHeap
//     } stripe[count];
//     possible unused gap 1;
//     int xHeap[xHeapSize];
//     possible unused gap 2;
// }
//
//    For each point belonging to the stripe[i]
//        stripe[i].top <= point.y < stripe[i+1].top.
//
//    The last stripe, stripe[count-1], is dummy.
//    It actually does not describe region's stripe, but holds
//    region's bottom y-coordinate (as stripe[count-1].top),
//    and also points to end of xHeap.
//
//    For each stripe[i], 0<=i<count-1, stripe[i]._px points to
//    an array of 2*k integer x-coordinates, where k >= 0 is the number of segments.
//
//    The length of x-coordinate array can be obtained as
//        stripe[i+1]._px - stripe[i]._px
//
//    Numbers in x-coordinate array goes in increasing order.
//    Segment j of stripe i contains points (x,y) where
//        stripe[i].top <= y < stripe[i+1].top
//        stripe[i]._px[2*j] <= x < stripe[i]._px[2*j+1]
//
//    There are no unused gaps in xHeap.
//    The length of xHeap = stripe[count-1]._px - stripe[0]._px.

#if DBG==1
DeclareTag(tagRgnDataValid, "Regions", "Trace CRgnData validity");
#define ASSERT_RGN_VALID\
    if (IsTagEnabled(tagRgnDataValid))\
        if (!IsEmpty())\
            Assert(Data()->IsDataValid(UsingOwnMemory() != FALSE));
#else
#define ASSERT_RGN_VALID
#endif

static const int SizeOfSimpleStripe = 2 * sizeof(int);

class CStripe
{
    friend class CRgnData;
    friend class CRegion2;

    int  _nTop; // least y of a stripe
    int  _ox;   // offset in bytes from (this) to stripe's x-coordinates array

    int* px() const { return (int*)((char*)(this) + _ox); }
    void setp(const int* px) { _ox = ((char*)px - (char*)this); }

    int GetSize() const
    {
        return (char*)(this+1)->px() - (char*)px();
    }

    bool IsSimple() const { return GetSize() == SizeOfSimpleStripe; }

    void Copy(const CStripe *s)
    {
        _nTop = s->_nTop;
        int *q = s->px();
        int n = (s+1)->px() - q;
        int *p = px();
        for (int i = 0; i < n; i++) p[i] = q[i];
        (this+1)->setp(p+n);
    }

    void Copy(const CStripe *s, const CStripe *t)
    {
        _nTop = t->_nTop;
        int *q = s->px();
        int n = (s+1)->px() - q;
        int *p = px();
        for (int i = 0; i < n; i++) p[i] = q[i];
        (this+1)->setp(p+n);
    }

    bool IsEqualToPrevious() const
    {
        int *p = px();
        int *q = (this-1)->px();
        int n = p - q;
        if (n != (this+1)->px() - p)
            return false;   // lengths differ
        for (int i = 0; i < n; i++)
            if (p[i] != q[i]) return false;
        return true;
    }

    bool IsEqualTo(const CStripe &s) const
    {
        if (_nTop != s._nTop)
            return false;
        int *p = px();
        int *q = s.px();
        int n = (this+1)->px() - p;
        int m = (&s+1)->px() - q;
        if (m != n) return false;

        for (int i = 0; i < n; i++)
            if (p[i] != q[i]) return false;
        return true;
    }

    void Offset(int dx)
    {
        int *p = px(), *q = (this+1)->px();
        while (p != q) *p++ += dx;
    }

    void Scale(double coef)
    {
        _nTop = IntNear(coef*_nTop);
        int *p = px(), *q = (this+1)->px();
        for (int i = q-p; --i>=0;)
            p[i] = IntNear(coef*p[i]);
    }

    void SetTop(const CStripe *s)
    {
        _nTop = s->_nTop;
    }

    void Zero(const CStripe *s)
    {
        _nTop = s->_nTop;
        (this+1)->setp(px());
    }

    bool Contains(int x) const;

    void Union(const CStripe *sa, const CStripe *sb);

    void Intersect(const CStripe *sa, const CStripe *sb);

    static bool Intersects(const CStripe *sa, const CStripe *sb);

    void Subtract(const CStripe *sa, const CStripe *sb, const CStripe *sc);
};

RGN_INLINE
bool CStripe::Contains(int x) const
{
    int *p = px(),
        *q = (this+1)->px();
    if (p == q) return false;   // empty stripe

    if (x < *p || x >= q[-1]) return false;
    for (int i = 0, j = (q-p)>>1; j-i != 1;)
    {
        int k = (i+j)>>1;
        if (x < p[2*k]) j = k;
        else            i = k;
    }
    return x < p[i+j];
}

RGN_INLINE
void CStripe::Union(const CStripe *sa, const CStripe *sb)
{
    _nTop = sa->_nTop;

    int *qa = sa->px(), *qafin = (sa+1)->px();
    int *qb = sb->px(), *qbfin = (sb+1)->px();
    int *p = px();

    if (qa != qafin && qb != qbfin)
    for (;;)
    {
a0b0:
        if (*qa < *qb) { *p++ = *qa++;                               goto a1b0; }
        if (*qb < *qa) { *p++ =       *qb++;                         goto a0b1; }
        /* *qa==*qb */ { *p++ = *qa++; qb++;                         goto a1b1; }
a1b1:
        if (*qa < *qb) {         qa++;       if (qa == qafin) break; goto a0b1; }
        if (*qb < *qa) {               qb++; if (qb == qbfin) break; goto a1b0; }
        /* *qa==*qb */ { *p++ = *qa++; qb++; if (qa == qafin) break;
                                             if (qb == qbfin) break; goto a0b0; }
a1b0:
        if (*qa < *qb) { *p++ = *qa++;       if (qa == qafin) break; goto a0b0; }
        if (*qb < *qa) {               qb++;                         goto a1b1; }
        /* *qa==*qb */ {         qa++; qb++; if (qa == qafin) break; goto a0b1; }
a0b1:
        if (*qa < *qb) {         qa++;                               goto a1b1; }
        if (*qb < *qa) { *p++ =       *qb++; if (qb == qbfin) break; goto a0b0; }
        /* *qa==*qb */ {         qa++; qb++; if (qb == qbfin) break; goto a1b0; }
    }

    while (qa != qafin) *p++ = *qa++;
    while (qb != qbfin) *p++ = *qb++;
    (this+1)->setp(p);
}

RGN_INLINE
void CStripe::Intersect(const CStripe *sa, const CStripe *sb)
{
    _nTop = sa->_nTop;

    int *qa = sa->px(), *qafin = (sa+1)->px();
    int *qb = sb->px(), *qbfin = (sb+1)->px();
    int *p = px();

    if (qa != qafin && qb != qbfin)
    for (;;)
    {
a0b0:
        if (*qa < *qb) {         qa++;                               goto a1b0; }
        if (*qb < *qa) {               qb++;                         goto a0b1; }
        /* *qa==*qb */ { *p++ = *qa++; qb++;                         goto a1b1; }
a1b1:
        if (*qa < *qb) { *p++ = *qa++;       if (qa == qafin) break; goto a0b1; }
        if (*qb < *qa) { *p++ =       *qb++; if (qb == qbfin) break; goto a1b0; }
        /* *qa==*qb */ { *p++ = *qa++; qb++; if (qa == qafin) break;
                                             if (qb == qbfin) break; goto a0b0; }
a1b0:
        if (*qa < *qb) {         qa++;       if (qa == qafin) break; goto a0b0; }
        if (*qb < *qa) { *p++ =       *qb++;                         goto a1b1; }
        /* *qa==*qb */ {         qa++; qb++; if (qa == qafin) break; goto a0b1; }
a0b1:
        if (*qa < *qb) { *p++ = *qa++;                               goto a1b1; }
        if (*qb < *qa) {               qb++; if (qb == qbfin) break; goto a0b0; }
        /* *qa==*qb */ {         qa++; qb++; if (qb == qbfin) break; goto a1b0; }
    }

    (this+1)->setp(p);
}

RGN_INLINE
bool CStripe::Intersects(const CStripe *sa, const CStripe *sb)
{
    int *qa = sa->px(), *qafin = (sa+1)->px();
    int *qb = sb->px(), *qbfin = (sb+1)->px();

    if (qa == qafin || qb == qbfin) return false;

    for (;;)
    {
a0b0:
        if (*qa < *qb) {qa++;                               goto a1b0; }
        if (*qb < *qa) {      qb++;                         goto a0b1; }
        /* *qa==*qb */ {                                  return true; }
a1b0:
        if (*qa < *qb) {qa++;       if (qa == qafin) break; goto a0b0; }
        if (*qb < *qa) {                                  return true; }
        /* *qa==*qb */ {qa++; qb++; if (qa == qafin) break; goto a0b1; }
a0b1:
        if (*qa < *qb) {                                  return true; }
        if (*qb < *qa) {      qb++; if (qb == qbfin) break; goto a0b0; }
        /* *qa==*qb */ {qa++; qb++; if (qb == qbfin) break; goto a1b0; }
    }

    return false;
}

RGN_INLINE
void CStripe::Subtract(const CStripe *sa, const CStripe *sb, const CStripe *sc)
{
    _nTop = sc->_nTop;

    int *qa = sa->px(), *qafin = (sa+1)->px();
    int *qb = sb->px(), *qbfin = (sb+1)->px();
    int *p = px();

    if (qa != qafin && qb != qbfin)
    for (;;)
    {
a0b0:
        if (*qa < *qb) { *p++ = *qa++;                               goto a1b0; }
        if (*qb < *qa) {               qb++;                         goto a0b1; }
        /* *qa==*qb */ {         qa++; qb++;                         goto a1b1; }
a1b1:
        if (*qa < *qb) {         qa++;       if (qa == qafin) break; goto a0b1; }
        if (*qb < *qa) { *p++ =       *qb++; if (qb == qbfin) break; goto a1b0; }
        /* *qa==*qb */ {         qa++; qb++; if (qa == qafin) break;
                                             if (qb == qbfin) break; goto a0b0; }
a1b0:
        if (*qa < *qb) { *p++ = *qa++;       if (qa == qafin) break; goto a0b0; }
        if (*qb < *qa) { *p++ =       *qb++;                         goto a1b1; }
        /* *qa==*qb */ { *p++ = *qa++; qb++; if (qa == qafin) break; goto a0b1; }
a0b1:
        if (*qa < *qb) {         qa++;                               goto a1b1; }
        if (*qb < *qa) {               qb++; if (qb == qbfin) break; goto a0b0; }
        /* *qa==*qb */ { *p++ = *qa++; qb++; if (qb == qbfin) break; goto a1b0; }
    }

    while (qa != qafin) *p++ = *qa++;
    (this+1)->setp(p);
}

class CRgnData
{
    friend CRegion2;

    int _nCount;            // (count-1) == number of horizontal stripes
    int _nLeft, _nRight;    // bounding rectangle edges: _nLeft <= x < _nRight
    CStripe _aStripe[2];     // actually _aStripe[_nCount]

    int GetHdrSize() const  // in char
    {
        return sizeof(CRgnData) + (_nCount-2)*sizeof(CStripe);
    }

    int GetArySize() const  // in char
    {
        return (char*)_aStripe[_nCount-1].px() - (char*)_aStripe[0].px();
    }

    int CountRectangles() const
    {
        return (_aStripe[_nCount-1].px() - _aStripe[0].px()) >> 1;
    }

    int GetMinSize() const  // in char
    {
        return GetHdrSize() + GetArySize();
    }

    void SetRectangle(int left, int top, int right, int bottom)
    {
        int *p = (int*)(this + 1);

        _nCount = 2;
        _nLeft  = left;
        _nRight = right;

        _aStripe[0]._nTop = top;
        _aStripe[0].setp(p);

        p[0] = left;
        p[1] = right;
        _aStripe[1]._nTop = bottom;
        _aStripe[1].setp(p+2);
    }

    void GetBoundingRect(RECT &rc) const
    {
        rc.left  = _nLeft;
        rc.right = _nRight;
        rc.top = _aStripe[0]._nTop;
        rc.bottom = _aStripe[_nCount-1]._nTop;
    }

    bool IsEqualTo(const CRect &rc) const
    {
        if (_nCount != 2 || !_aStripe[0].IsSimple()) return false;
        return rc.left  == _nLeft &&
               rc.right == _nRight &&
               rc.top == _aStripe[0]._nTop &&
               rc.bottom == _aStripe[1]._nTop;
    }

    bool IsRectangle(int left, int top, int right, int bottom) const
    {
        if (_nCount != 2|| !_aStripe[0].IsSimple()) return false;
        return left  == _nLeft &&
               right == _nRight &&
               top == _aStripe[0]._nTop &&
               bottom == _aStripe[1]._nTop;
    }

    RECT* GetAllRectangles(RECT *pr)
    {
        for (int i = 0, n = _nCount-1; i < n; i++)
        {
            CStripe &s = _aStripe[i];
            int *p = s.px();
            int m = ((&s+1)->px() - p) >> 1;

            int top = s._nTop;
            int bottom = (&s+1)->_nTop;

            for (int j = 0; j < m; j++, pr++)
            {
                pr->top    = top;
                pr->bottom = bottom;
                pr->left   = p[2*j];
                pr->right  = p[2*j+1];
            }
        }
        return pr;
    }

    bool Offset(int dx, int dy)
    {
        int countm1 = _nCount-1;
        int new_left  = _nLeft + dx,
            new_right = _nRight + dx,
            top = _aStripe[0]._nTop,
            new_top = top + dy,
            bottom = _aStripe[countm1]._nTop,
            new_bottom = bottom + dy;
        // check oveflows
        if (dx > 0)
        {
            if (new_right < _nRight)
                return false;
        }
        else
        {
            if (new_left > _nLeft)
                return false;
        }

        if (dy > 0)
        {
            if (new_bottom < bottom)
                return false;
        }
        else
        {
            if (new_top > top)
                return false;
        }

        // do shift
        _nLeft = new_left;
        _nRight = new_right;
        for (int i = 0; i < countm1; i++)
        {
            CStripe &s = _aStripe[i];
            s._nTop += dy;
            s.Offset(dx);
        }

        _aStripe[countm1]._nTop += dy;

        return true;
    }

    bool Scale(double coef)
    {
        if (coef <= 0) return false;

        double dbl_left   = _nLeft,
               dbl_right  = _nRight,
               dbl_top    = _aStripe[0]._nTop,
               dbl_bottom = _aStripe[_nCount-1]._nTop,

               new_left   = coef*dbl_left,
               new_right  = coef*dbl_right,
               new_top    = coef*dbl_top,
               new_bottom = coef*dbl_bottom,

               limit = double(int(0x80000000));

        if (new_left   < limit ||
            new_right  < limit ||
            new_top    < limit ||
            new_bottom < limit)
            return false;

               limit = double(int(0x7FFFFFFF));

        if (new_left   > limit ||
            new_right  > limit ||
            new_top    > limit ||
            new_bottom > limit)
            return false;

        _nLeft  = IntNear(new_left);
        _nRight = IntNear(new_right);

        // do scale
        for (int i = 0; i < _nCount-1; i++)
            _aStripe[i].Scale(coef);

            _aStripe[i]._nTop = IntNear(new_bottom);

        return true;
    }

    bool Squeeze(const CRgnData& d);

    void Copy(const CRgnData& d)
    {
        _nCount = d._nCount;
        _nLeft = d._nLeft;
        _nRight = d._nRight;

        int *p = (int*)((char*)this + GetHdrSize());
        const int *q = d._aStripe[0].px();
        int off = p-q;
        for (int i = 0; i < _nCount; i++)
        {
            _aStripe[i]._nTop = d._aStripe[i]._nTop;
            _aStripe[i].setp(d._aStripe[i].px() + off);
        }
        int n = d.GetArySize()/sizeof(int);
        for (i = 0; i < n; i++) p[i] = q[i];
    }


    bool IsEqualTo(const CRgnData& d) const
    {
        if (_nCount != d._nCount) return false;
        for (int i = 0; i < _nCount-1; i++)
        {
            if (!_aStripe[i].IsEqualTo(d._aStripe[i]))
                return false;
        }
        return _aStripe[i]._nTop == d._aStripe[i]._nTop;
    }

    bool Contains(const CPoint& pt) const
    {
        if (pt.x < _nLeft ||
            pt.x >= _nRight ||
            pt.y < _aStripe[0]._nTop ||
            pt.y >= _aStripe[_nCount-1]._nTop)
            return false;
        int i = 0, j = _nCount-1;
        while (j-i > 1)
        {
            int k = (i+j)>>1;
            if (pt.y < _aStripe[k]._nTop) j = k;
            else                        i = k;
        }
        return _aStripe[i].Contains(pt.x);
    }

    bool Contains(const CRect& rc) const;

    static int EstimateSizeUnion(const CRgnData& da, const CRgnData& db);

    void Union(const CRgnData& da, const CRgnData& db);

    static int EstimateSizeIntersect(const CRgnData& da, const CRgnData& db);

    void Intersect(const CRgnData& da, const CRgnData& db);

    static bool Intersects(const CRgnData& da, const CRgnData& db);

    void Intersect(const CRgnData& da, const CRect& r);

    static int EstimateSizeSubtract(const CRgnData& da, const CRgnData& db);

    void Subtract(const CRgnData& da, const CRgnData& db);

#if DBG == 1
    void Dump(const CRegion2* prgn) const;

    #define INVALID return falseBreak()

    static bool falseBreak()
    {
#ifdef _M_IX86
        _asm int 3;
#endif //_M_IX86
        return false;
    }

    bool IsDataValid(bool own) const
    {
        if (_nCount < 2) INVALID;

        int* xHeapMin = (int*)((char*)this + GetHdrSize());
        int* xHeapMax = (int*)((char*)this + (own ? RGN_OWN_MEM_SIZ : MemGetSize((void*)this)));

        if (_aStripe[        0].px() < xHeapMin) INVALID; // header overlaps xHeap
        if (_aStripe[_nCount-1].px() > xHeapMax) INVALID; // xHeap overlaps allocated space

        int xmin = 0x7FFFFFFF,
            xmax = 0x80000000;
        for (int i = 0; i < _nCount-1; i++)
        {
            if (_aStripe[i]._nTop >= _aStripe[i+1]._nTop) INVALID;  // stripes do not go in increasing order by y
            if (_aStripe[i].px()   >  _aStripe[i+1].px()  ) INVALID;  // x arrays mixed
            if (INT_PTR(_aStripe[i].px()) & 3) INVALID;            // odd address
            int l = (char*)_aStripe[i+1].px() - (char*)_aStripe[i].px();
            if (l & 7) INVALID; // stripe size should be even, but does not

            if (l == 0) continue;
            l >>= 2; // measure ints now

            const int *p = _aStripe[i].px();
            if (xmin > *p) xmin = *p;
            for (int j = 0; j < l-1; j++, p++)
                if (p[0] >= p[1]) INVALID;    // x increasing order violation
            if (xmax < *p) xmax = *p;
        }
        if (_nLeft  != xmin) INVALID;
        if (_nRight != xmax) INVALID;
        return true;
    }
#endif
};


// the following routine copies data from given CRgnData
// with removing repeated coordinates
// (possibly appeared after calling Scale(coef < 1).
// Can work in-place (i.e. &d can be == this)
RGN_INLINE
bool CRgnData::Squeeze(const CRgnData& d)
{
    _nLeft  = 0x7FFFFFFF; // will be
    _nRight = 0x80000000; //         recalculated
    int *p = (int*)((char*)this + d.GetHdrSize());
    int ilimit = d._nCount-1;
    _nCount = 0;
    for (int i = 0; i < ilimit; i++)
    {
        const CStripe &src = d._aStripe[i];
        if (src._nTop == (&src+1)->_nTop) continue; // zero-height(width?) stripe

        CStripe &dst = _aStripe[_nCount];
        dst._nTop = src._nTop;
        int *srcBeg = src.px(),
            *srcEnd = (&src+1)->px(),
            srcLen = srcEnd - srcBeg;
        dst.setp(p);
        if (srcLen)
        {
            if (_nLeft  > srcBeg[ 0]) _nLeft  = srcBeg[ 0];
            if (_nRight < srcEnd[-1]) _nRight = srcEnd[-1];

            for (int j = 0; j < srcLen-1;)
            {
                if (srcBeg[j] == srcBeg[j+1])
                {
                    j += 2; // skip this pair
                    continue;
                }
                *p++ = srcBeg[j++];
            }
            if (j < srcLen)
                *p++ = srcBeg[j];
        }

        if (_nCount++)
        {   // check if this newly created stripe is x-equal to previous
            int *pthis = dst.px();
            int *pprev = (&dst-1)->px();
            int nprev = pthis - pprev;
            int nthis = p - pthis;
            if (nprev == nthis)
            {
                for (int k = 0; k < nthis; k++)
                {
                    if (pthis[k] != pprev[k])
                        break;
                }
                if (k == nthis)
                {   // indeed equal; roll back to ignore this stripe
                    p = dst.px();
                    _nCount--;
                }

            }
        }
    }

    if (_nCount == 0) return false;   // totally empty

    // finalize: fill last stripe
    {
        const CStripe &src = d._aStripe[i];
        CStripe &dst = _aStripe[_nCount++];
        dst._nTop = src._nTop;
        dst.setp(p);
    }

    return true;
}


RGN_INLINE
bool CRgnData::Contains(const CRect& rc) const
{
    // if the rect sticks out of my bounding box, return false
    if (rc.left < _nLeft ||
        rc.right > _nRight ||
        rc.top < _aStripe[0]._nTop ||
        rc.bottom > _aStripe[_nCount-1]._nTop)
        return false;

    // check that each stripe that y-touches the rect also x-covers the rect
    int i;
    for (i=0; ; ++i)
    {
        if (rc.bottom <= _aStripe[i]._nTop)
            break;                      // stripe is below the rect - done
        Assert(i < _nCount - 1);        // rect doesn't stick out the bottom
        if (rc.top >= _aStripe[i+1]._nTop)
            continue;                   // stripe is above the rect
        int x = rc.left;                // this stripe x-covers up to x
        const int *px = _aStripe[i].px();
        const int * const pEnd = _aStripe[i+1].px();
        for (;  px < pEnd;  px += 2)
        {
            if (*px > x)
                break;                  // stripe has a gap at x - done
            else if (*(px+1) > x)       // else advance the frontier
                x = *(px+1);
        }
        if (x < rc.right)
            return false;               // gap is within rect
    }
    return true;
}


// label agreement:
// x0 - no stripes of region x passed (x == a or b)
// x1 - some (not all) stripes of region x passed
// x2 - all stripes of region x passed

#define ANEXT qa->_nTop < qb->_nTop
#define BNEXT qa->_nTop > qb->_nTop
#define ALAST qa == paLast
#define BLAST qb == pbLast


RGN_INLINE
int CRgnData::EstimateSizeUnion(const CRgnData& da, const CRgnData& db)
{
    const CStripe *qa = da._aStripe, *paLast = qa + da._nCount;
    const CStripe *qb = db._aStripe, *pbLast = qb + db._nCount;

    int estCount = da._nCount + db._nCount;
    int siz = sizeof(CRgnData) + (estCount-2)*sizeof(CStripe);

#define PLUS_A   siz += (qa-1)->GetSize()
#define PLUS_B   siz += (qb-1)->GetSize()
#define PLUS_AB PLUS_A; PLUS_B
//a0b0:
    if (ANEXT) { qa++;                                {   PLUS_A; goto a1b0; }
    }

    if (BNEXT) {       qb++;                          {   PLUS_B; goto a0b1; }
    }

    {            qa++, qb++;                          {  PLUS_AB; goto a1b1; }
    }

a0b1:
    if (ANEXT) { qa++;                                {  PLUS_AB; goto a1b1; }
    }

    if (BNEXT) {       qb++;               if (BLAST) {           goto a0b2; }
                                                      {   PLUS_B; goto a0b1; }
    }

    {            qa++, qb++;               if (BLAST) {   PLUS_A; goto a1b2; }
                                                      {  PLUS_AB; goto a1b1; }
    }

a1b0:
    if (ANEXT) { qa++;       if (ALAST)               {           goto a2b0; }
                                                      {   PLUS_A; goto a1b0; }
    }

    if (BNEXT) {       qb++;                          {  PLUS_AB; goto a1b1; }
    }

    {            qa++, qb++; if (ALAST)               {   PLUS_B; goto a2b1; }
                                                      {  PLUS_AB; goto a1b1; }
    }

a1b1:
    if (ANEXT) { qa++;       if (ALAST)               {   PLUS_B; goto a2b1; }
                                                      {  PLUS_AB; goto a1b1; }
    }

    if (BNEXT) {       qb++;               if (BLAST) {   PLUS_A; goto a1b2; }
                                                      {  PLUS_AB; goto a1b1; }
    }

    {            qa++, qb++; if (ALAST)  { if (BLAST) {           goto a2b2; }
                                                      {   PLUS_B; goto a2b1; }
                                         }
                                         { if (BLAST) {   PLUS_A; goto a1b2; }
                                                      {  PLUS_AB; goto a1b1; }
                                         }
    }

a0b2:
    {            qa++;                                {   PLUS_A; goto a1b2; }
    }

a1b2:
    {            qa++;       if (ALAST)               {           goto a2b2; }
                                                      {   PLUS_A; goto a1b2; }
    }

a2b0:
    {                  qb++;                          {   PLUS_B; goto a2b1; }
    }

a2b1:
    {                  qb++;               if (BLAST) {           goto a2b2; }
                                                      {   PLUS_B; goto a2b1; }
    }

a2b2:   return siz;
}


RGN_INLINE
void CRgnData::Union(const CRgnData& da, const CRgnData& db)
{
    const CStripe *qa = da._aStripe, *paLast = qa + da._nCount;
    const CStripe *qb = db._aStripe, *pbLast = qb + db._nCount;
          CStripe *p  =    _aStripe;

    int estCount = da._nCount + db._nCount;
    int estHdrSize = sizeof(CRgnData) + (estCount-2)*sizeof(CStripe);

    _aStripe[0].setp((int*)((char*)this + estHdrSize));

#define YSTEP if (p == _aStripe) { if (p->GetSize() != 0) p++; }\
          else               { if (!p->IsEqualToPrevious()) p++; }
#define YSTEPFIN if (p != _aStripe) { if (p->px() != (p-1)->px()) p++; }

#define COPY_A   p->Copy(qa-1);            YSTEP
#define COPY_B   p->Copy(qb-1);            YSTEP

#define COPY_AB  p->Copy(qa-1, qb-1);      YSTEP
#define COPY_BA  p->Copy(qb-1, qa-1);      YSTEP

#define OR_AB    p->Union(qa-1, qb-1);     YSTEP
#define OR_BA    p->Union(qb-1, qa-1);     YSTEP

#define AND_AB   p->Intersect(qa-1, qb-1); YSTEP
#define AND_BA   p->Intersect(qb-1, qa-1); YSTEP

#define ZERO_A   p->Zero(qa-1);            YSTEP
#define ZERO_B   p->Zero(qb-1);            YSTEP

#define SETTOP_A p->SetTop(qa-1);          YSTEPFIN
#define SETTOP_B p->SetTop(qb-1);          YSTEPFIN
//a0b0:
    if (ANEXT) { qa++;                                {   COPY_A; goto a1b0; }
    }

    if (BNEXT) {       qb++;                          {   COPY_B; goto a0b1; }
    }

    {            qa++, qb++;                          {    OR_AB; goto a1b1;}
    }

a0b1:
    if (ANEXT) { qa++;                                {    OR_AB; goto a1b1; }
    }

    if (BNEXT) {       qb++;               if (BLAST) {   ZERO_B; goto a0b2; }
                                                      {   COPY_B; goto a0b1; }
    }

    {            qa++, qb++;               if (BLAST) {   COPY_A; goto a1b2; }
                                                      {    OR_AB; goto a1b1; }
    }

a1b0:
    if (ANEXT) { qa++;       if (ALAST)               {   ZERO_A; goto a2b0; }
                                                      {   COPY_A; goto a1b0; }
    }

    if (BNEXT) {       qb++;                          {    OR_BA; goto a1b1; }
    }

    {            qa++, qb++; if (ALAST)               {   COPY_B; goto a2b1; }
                                                      {    OR_BA; goto a1b1; }
    }


a1b1:
    if (ANEXT) { qa++;       if (ALAST)               {  COPY_BA; goto a2b1; }
                                                      {    OR_AB; goto a1b1; }
    }

    if (BNEXT) {       qb++;               if (BLAST) {  COPY_AB; goto a1b2; }
                                                      {    OR_BA; goto a1b1; }
    }

    {            qa++, qb++; if (ALAST)  { if (BLAST) { SETTOP_A; goto a2b2; }
                                                      {  COPY_BA; goto a2b1; }
                                         }
                                         { if (BLAST) {  COPY_AB; goto a1b2; }
                                                      {    OR_AB; goto a1b1; }
                                         }
    }

a0b2:
    {            qa++;                                {   COPY_A; goto a1b2; }
    }

a1b2:
    {            qa++;       if (ALAST)               { SETTOP_A; goto a2b2; }
                                                      {   COPY_A; goto a1b2; }
    }

a2b0:
    {                  qb++;                          {   COPY_B; goto a2b1; }
    }

a2b1:
    {                  qb++;               if (BLAST) { SETTOP_B; goto a2b2; }
                                                      {   COPY_B; goto a2b1; }
    }

a2b2:
    _nCount = p - _aStripe;
    _nLeft  = da._nLeft  < db._nLeft  ? da._nLeft  : db._nLeft;
    _nRight = da._nRight > db._nRight ? da._nRight : db._nRight;
}


RGN_INLINE
int CRgnData::EstimateSizeIntersect(const CRgnData& da, const CRgnData& db)
{
    const CStripe *qa = da._aStripe, *paLast = qa + da._nCount;
    const CStripe *qb = db._aStripe, *pbLast = qb + db._nCount;

    int estCount = da._nCount + db._nCount;
    int siz = sizeof(CRgnData) + (estCount-2)*sizeof(CStripe);

#define PLUS_A   siz += (qa-1)->GetSize()
#define PLUS_B   siz += (qb-1)->GetSize()
#define PLUS_AB PLUS_A; PLUS_B
//a0b0:
    if (ANEXT) { qa++;                                {           goto a1b0; }
    }

    if (BNEXT) {       qb++;                          {           goto a0b1; }
    }

    {            qa++, qb++;                          {  PLUS_AB; goto a1b1; }
    }

a0b1:
    if (ANEXT) { qa++;                                {  PLUS_AB; goto a1b1; }
    }

    if (BNEXT) {       qb++;               if (BLAST) {           goto a0b2; }
                                                      {           goto a0b1; }
    }

    {            qa++, qb++;               if (BLAST) {           goto a1b2; }
                                                      {  PLUS_AB; goto a1b1; }
    }

a1b0:
    if (ANEXT) { qa++;       if (ALAST)               {           goto a2b0; }
                                                      {           goto a1b0; }
    }

    if (BNEXT) {       qb++;                          {  PLUS_AB; goto a1b1; }
    }

    {            qa++, qb++; if (ALAST)               {           goto a2b1; }
                                                      {  PLUS_AB; goto a1b1; }
    }

a1b1:
    if (ANEXT) { qa++;       if (ALAST)               {           goto a2b1; }
                                                      {  PLUS_AB; goto a1b1; }
    }

    if (BNEXT) {       qb++;               if (BLAST) {           goto a1b2; }
                                                      {  PLUS_AB; goto a1b1; }
    }

    {            qa++, qb++; if ((ALAST) || (BLAST))  {           goto a2b2; }
                                                      {  PLUS_AB; goto a1b1; }
    }

a0b2:
a1b2:
a2b0:
a2b1:
a2b2:   return siz;
}


RGN_INLINE
void CRgnData::Intersect(const CRgnData& da, const CRgnData& db)
{
    const CStripe *qa = da._aStripe, *paLast = qa + da._nCount;
    const CStripe *qb = db._aStripe, *pbLast = qb + db._nCount;
          CStripe *p  =    _aStripe;

    int estCount = da._nCount + db._nCount;
    int estHdrSize = sizeof(CRgnData) + (estCount-2)*sizeof(CStripe);

    _aStripe[0].setp((int*)((char*)this + estHdrSize));

//a0b0:
    if (ANEXT) { qa++;                                {           goto a1b0; }
    }

    if (BNEXT) {       qb++;                          {           goto a0b1; }
    }

    {            qa++, qb++;                          {   AND_AB; goto a1b1;}
    }

a0b1:
    if (ANEXT) { qa++;                                {   AND_AB; goto a1b1; }
    }

    if (BNEXT) {       qb++;               if (BLAST) {           goto a0b2; }
                                                      {           goto a0b1; }
    }

    {            qa++, qb++;               if (BLAST) {           goto a1b2; }
                                                      {   AND_AB; goto a1b1; }
    }

a1b0:
    if (ANEXT) { qa++;       if (ALAST)               {           goto a2b0; }
                                                      {           goto a1b0; }
    }

    if (BNEXT) {       qb++;                          {   AND_BA; goto a1b1; }
    }

    {            qa++, qb++; if (ALAST)               {           goto a2b1; }
                                                      {   AND_BA; goto a1b1; }
    }


a1b1:
    if (ANEXT) { qa++;       if (ALAST)               { SETTOP_A; goto a2b1; }
                                                      {   AND_AB; goto a1b1; }
    }

    if (BNEXT) {       qb++;               if (BLAST) { SETTOP_B; goto a1b2; }
                                                      {   AND_BA; goto a1b1; }
    }

    {            qa++, qb++; if ((ALAST) || (BLAST))  { SETTOP_A; goto a2b2; }
                                                      {   AND_AB; goto a1b1; }
    }

a0b2:
a1b2:
a2b0:
a2b1:
a2b2:
    _nCount = p - _aStripe;
    if (_nCount)
    {   // calculate hor bounds
        _nLeft = 0x7FFFFFFF, _nRight = 0x80000000;
        p--;
        int *pLeft = p->px();
        while (--p >= _aStripe)
        {
            int *pLeftPrev = pLeft;
            pLeft = p->px();
            if (pLeft == pLeftPrev) continue;
            int t = *pLeft; if (_nLeft > t) _nLeft = t;
            t = pLeftPrev[-1]; if (_nRight < t) _nRight = t;
        }
    }
}


// "Incomplete intersecting":
// Just to understand that there exist at least one point
// belonging to both given regions
RGN_INLINE
bool CRgnData::Intersects(const CRgnData& da, const CRgnData& db)
{
    const CStripe *qa = da._aStripe, *paLast = qa + da._nCount;
    const CStripe *qb = db._aStripe, *pbLast = qb + db._nCount;

#define AND_CHECK if (CStripe::Intersects(qa-1, qb-1)) return true
//a0b0:
    if (ANEXT) { qa++;                                {            goto a1b0; }
    }

    if (BNEXT) {       qb++;                          {            goto a0b1; }
    }

    {            qa++, qb++;                          { AND_CHECK; goto a1b1;}
    }

a0b1:
    if (ANEXT) { qa++;                                { AND_CHECK; goto a1b1; }
    }

    if (BNEXT) {       qb++;               if (BLAST) {            goto a0b2; }
                                                      {            goto a0b1; }
    }

    {            qa++, qb++;               if (BLAST) {            goto a1b2; }
                                                      { AND_CHECK; goto a1b1; }
    }

a1b0:
    if (ANEXT) { qa++;       if (ALAST)               {            goto a2b0; }
                                                      {            goto a1b0; }
    }

    if (BNEXT) {       qb++;                          { AND_CHECK; goto a1b1; }
    }

    {            qa++, qb++; if (ALAST)               {            goto a2b1; }
                                                      { AND_CHECK; goto a1b1; }
    }


a1b1:
    if (ANEXT) { qa++;       if (ALAST)               {            goto a2b1; }
                                                      { AND_CHECK; goto a1b1; }
    }

    if (BNEXT) {       qb++;               if (BLAST) {            goto a1b2; }
                                                      { AND_CHECK; goto a1b1; }
    }

    {            qa++, qb++; if ((ALAST) || (BLAST))  {            goto a2b2; }
                                                      { AND_CHECK; goto a1b1; }
    }

a0b2:
a1b2:
a2b0:
a2b1:
a2b2:
    return false;
}


RGN_INLINE
int CRgnData::EstimateSizeSubtract(const CRgnData& da, const CRgnData& db)
{
    const CStripe *qa = da._aStripe, *paLast = qa + da._nCount;
    const CStripe *qb = db._aStripe, *pbLast = qb + db._nCount;

    int estCount = da._nCount + db._nCount;
    int siz = sizeof(CRgnData) + (estCount-2)*sizeof(CStripe);

#define PLUS_A   siz += (qa-1)->GetSize()
#define PLUS_B   siz += (qb-1)->GetSize()
#define PLUS_AB PLUS_A; PLUS_B
//a0b0:
    if (ANEXT) { qa++;                                {   PLUS_A; goto a1b0; }
    }

    if (BNEXT) {       qb++;                          {           goto a0b1; }
    }

    {            qa++, qb++;                          {  PLUS_AB; goto a1b1; }
    }

a0b1:
    if (ANEXT) { qa++;                                {  PLUS_AB; goto a1b1; }
    }

    if (BNEXT) {       qb++;               if (BLAST) {           goto a0b2; }
                                                      {           goto a0b1; }
    }

    {            qa++, qb++;               if (BLAST) {   PLUS_A; goto a1b2; }
                                                      {  PLUS_AB; goto a1b1; }
    }

a1b0:
    if (ANEXT) { qa++;       if (ALAST)               {           goto a2b0; }
                                                      {   PLUS_A; goto a1b0; }
    }

    if (BNEXT) {       qb++;                          {  PLUS_AB; goto a1b1; }
    }

    {            qa++, qb++; if (ALAST)               {           goto a2b1; }
                                                      {  PLUS_AB; goto a1b1; }
    }

a1b1:
    if (ANEXT) { qa++;       if (ALAST)               {           goto a2b1; }
                                                      {  PLUS_AB; goto a1b1; }
    }

    if (BNEXT) {       qb++;               if (BLAST) {   PLUS_A; goto a1b2; }
                                                      {  PLUS_AB; goto a1b1; }
    }

    {            qa++, qb++; if (ALAST)  { if (BLAST) {           goto a2b2; }
                                                      {           goto a2b1; }
                                         }
                                         { if (BLAST) {   PLUS_A; goto a1b2; }
                                                      {  PLUS_AB; goto a1b1; }
                                         }
    }

a0b2:
    {            qa++;                                {   PLUS_A; goto a1b2; }
    }

a1b2:
    {            qa++;       if (ALAST)               {           goto a2b2; }
                                                      {   PLUS_A; goto a1b2; }
    }

a2b0:
a2b1:
a2b2:   return siz;
}


#define SUB_AB    p->Subtract(qa-1, qb-1, qa-1);   YSTEP
#define SUB_BA    p->Subtract(qa-1, qb-1, qb-1);   YSTEP
RGN_INLINE
void CRgnData::Subtract(const CRgnData& da, const CRgnData& db)
{
    const CStripe *qa = da._aStripe, *paLast = qa + da._nCount;
    const CStripe *qb = db._aStripe, *pbLast = qb + db._nCount;
          CStripe *p  =    _aStripe;

    int estCount = da._nCount + db._nCount;
    int estHdrSize = sizeof(CRgnData) + (estCount-2)*sizeof(CStripe);

    _aStripe[0].setp((int*)((char*)this + estHdrSize));

//a0b0:
    if (ANEXT) { qa++;                                {   COPY_A; goto a1b0; }
    }

    if (BNEXT) {       qb++;                          {           goto a0b1; }
    }

    {            qa++, qb++;                          {   SUB_AB; goto a1b1;}
    }

a0b1:
    if (ANEXT) { qa++;                                {   SUB_AB; goto a1b1; }
    }

    if (BNEXT) {       qb++;               if (BLAST) {           goto a0b2; }
                                                      {           goto a0b1; }
    }

    {            qa++, qb++;               if (BLAST) {   COPY_A; goto a1b2; }
                                                      {   SUB_AB; goto a1b1; }
    }

a1b0:
    if (ANEXT) { qa++;       if (ALAST)               { SETTOP_A; goto a2b0; }
                                                      {   COPY_A; goto a1b0; }
    }

    if (BNEXT) {       qb++;                          {   SUB_BA; goto a1b1; }
    }

    {            qa++, qb++; if (ALAST)               { SETTOP_A; goto a2b1; }
                                                      {   SUB_BA; goto a1b1; }
    }


a1b1:
    if (ANEXT) { qa++;       if (ALAST)               { SETTOP_A; goto a2b1; }
                                                      {   SUB_AB; goto a1b1; }
    }

    if (BNEXT) {       qb++;               if (BLAST) {  COPY_AB; goto a1b2; }
                                                      {   SUB_BA; goto a1b1; }
    }

    {            qa++, qb++; if (ALAST)  {            { SETTOP_A; goto a2b2; }
                                         }
                                         { if (BLAST) {  COPY_AB; goto a1b2; }
                                                      {   SUB_AB; goto a1b1; }
                                         }
    }

a0b2:
    {            qa++;                                {   COPY_A; goto a1b2; }
    }

a1b2:
    {            qa++;       if (ALAST)               { SETTOP_A; goto a2b2; }
                                                      {   COPY_A; goto a1b2; }
    }

a2b0:
a2b1:
a2b2:
    _nCount = p - _aStripe;
    if (_nCount)
    {   // calculate hor bounds
        _nLeft = 0x7FFFFFFF, _nRight = 0x80000000;
        p--;
        int *pLeft = p->px();
        while (--p >= _aStripe)
        {
            int *pLeftPrev = pLeft;
            pLeft = p->px();
            if (pLeft == pLeftPrev) continue;
            int t = *pLeft; if (_nLeft > t) _nLeft = t;
            t = pLeftPrev[-1]; if (_nRight < t) _nRight = t;
        }
    }
}


//+===========================================================================
//
//                          CRegion2
//
//============================================================================

#define TMP_MEM_SIZ 200


//+---------------------------------------------------------------------------
//
//  Member:     CRegion2::~CRegion2
//
//----------------------------------------------------------------------------
CRegion2::~CRegion2()
{
    FreeMemory();
}

//+---------------------------------------------------------------------------
//
//  Member:     CRegion2::SetEmpty
//
//  Synopsis:   Remove all the points from region
//
//----------------------------------------------------------------------------
CRegion2&
CRegion2::SetEmpty()
{
    FreeMemory();
    _pData = 0;
    return *this;
}

//+---------------------------------------------------------------------------
//
//  Member:     CRegion2::Swap
//
//  Synopsis:   Exchange content of this and given region
//
//  Arguments:  r       ref to given region
//
//----------------------------------------------------------------------------
void
CRegion2::Swap(CRegion2& r)
{
    if (UsingOwnMemory())
    {
        CRgnData *pData = Data();
        Assert(pData->GetMinSize() <= RGN_OWN_MEM_SIZ);
        if (r.UsingOwnMemory())
        {
            CRgnData *prData = r.Data();
            Assert(prData->GetMinSize() <= RGN_OWN_MEM_SIZ);

            char tmpMem[RGN_OWN_MEM_SIZ];
            CRgnData *p = (CRgnData*)tmpMem;
                      p->Copy(*prData);
                               prData->Copy(*pData);
                                             pData->Copy(*p);
        }
        else
        {
            _pData = r._pData;
            r.UseOwnMemory();
            r.Data()->Copy(*pData);
        }
    }
    else if (r.UsingOwnMemory())
    {
        CRgnData *prData = r.Data();
        Assert(prData->GetMinSize() <= RGN_OWN_MEM_SIZ);
        r._pData = _pData;
        UseOwnMemory();
        Data()->Copy(*prData);
    }
    else
    {
        CRgnData* t = _pData;
                      _pData = r._pData;
                               r._pData = t;
    }
}

//+---------------------------------------------------------------------------
//
//  Member:     CRegion2::SetRectangle
//
//  Synopsis:   Create rectangular region, containing points (x,y),
//              r.left <= x < r.right
//              r.top  <= y < r.bottom
//
//  Arguments:  r       ref to given rectangle
//
//----------------------------------------------------------------------------

CRegion2&
CRegion2::SetRectangle(const CRect& r)
{
    FreeMemory();

    if (r.IsEmpty())
        _pData = 0;
    else
    {
        Assert(RGN_OWN_MEM_SIZ >= (sizeof(CRgnData) + 2*sizeof(int)));
        UseOwnMemory();
        Data()->SetRectangle(r.left, r.top, r.right, r.bottom);
    }
    return *this;
}

//+---------------------------------------------------------------------------
//
//  Member:     CRegion2::SetRectangle
//
//  Synopsis:   Create rectangular region, containing points (x,y),
//              left <= x < right
//              top  <= y < bottom
//
//  Arguments:  left        |
//              top         |   rectangle
//              right       |   limits
//              bottom      |
//
//----------------------------------------------------------------------------
CRegion2&
CRegion2::SetRectangle(int left, int top, int right, int bottom)
{
    FreeMemory();

    if (left >= right || top >= bottom)
        _pData = 0;
    else
    {
        Assert(RGN_OWN_MEM_SIZ >= (sizeof(CRgnData) + 2*sizeof(int)));
        UseOwnMemory();
        Data()->SetRectangle(left, top, right, bottom);
    }
    return *this;
}

//+---------------------------------------------------------------------------
//
//  Member:     CRegion2::IsRectangular
//
//  Synopsis:   check whether region has rectangular shape
//
//  Arguments:  no
//
//  Returns:    TRUE if region has rectangular shape
//
//  Note:       Empty region returns FALSE
//
//----------------------------------------------------------------------------
BOOL
CRegion2::IsRectangular() const
{
    CRgnData *pData = Data();
    if (pData == 0) return FALSE;
    if (pData->_nCount != 2) return FALSE;
    if (pData->_aStripe[1].px() - pData->_aStripe[0].px() != 2) return FALSE;
    return TRUE;
}

//+---------------------------------------------------------------------------
//
//  Member:     CRegion2::IsRectangle
//
//  Synopsis:   check whether region has rectangular shape of given size
//
//  Arguments:  left        |
//              top         |   rectangle
//              right       |   limits
//              bottom      |
//
//  Returns:    TRUE if would be equal to region made
//                   by SetRectanle(left, top, right, bottom)
//
//----------------------------------------------------------------------------
BOOL
CRegion2::IsRectangle(int left, int top, int right, int bottom) const
{
    return IsEmpty() ? FALSE : Data()->IsRectangle(left, top, right, bottom);
}

//+---------------------------------------------------------------------------
//
//  Member:     CRegion2::GetBoundingRect
//
//  Synopsis:   get minimal rectangle including all region points
//
//  Arguments:  rc      reference to rectangle to fill
//
//  Returns:    FALSE if region is empty
//
//----------------------------------------------------------------------------
BOOL
CRegion2::GetBoundingRect(CRect &rc) const
{
    if (IsEmpty()) return FALSE;
    Data()->GetBoundingRect(rc);
    return TRUE;
}

//+---------------------------------------------------------------------------
//
//  Member:     CRegion2::Union
//
//  Synopsis:   Calculate the union of two regions:
//              Resulting region contains points
//              presenting at least in one of this and given regions
//
//  Arguments:  r      reference to second region
//
//----------------------------------------------------------------------------
void
CRegion2::Union(const CRegion2& r)
{
    if (r.IsEmpty()) return;
    if (IsEmpty()) { Copy(r); return; }

    CRgnData *pData  = Data();
    CRgnData *prData = r.Data();

    int es = CRgnData::EstimateSizeUnion(*pData, *prData);
    char tmpMem[TMP_MEM_SIZ];
    CRgnData *result = es <= TMP_MEM_SIZ
                     ? (CRgnData*)tmpMem
                     : (CRgnData*)new char[es];
    if (result == NULL)
        return;
    result->Union(*pData, *prData);

    FreeMemory();

    int rs = result->GetMinSize();
    if (rs <= RGN_OWN_MEM_SIZ)
    {
        UseOwnMemory();
        Data()->Copy(*result);
        if (result != (CRgnData*)tmpMem)
            delete[] (char*)result;
    }
    else if (result == (CRgnData*)tmpMem)
    {
        CRgnData *pData = (CRgnData*)new char[rs];
        if (pData == NULL)
            return;
        _pData = pData;
        _pData->Copy(*result);
    }
    else
        _pData = result;

    ASSERT_RGN_VALID
}

//+---------------------------------------------------------------------------
//
//  Member:     CRegion2::Intersect
//
//  Synopsis:   Calculate the intersection of two regions:
//              Resulting region contains points
//              presenting at least in both this and given regions
//
//  Arguments:  r      reference to second region
//
//----------------------------------------------------------------------------
void
CRegion2::Intersect(const CRegion2& r)
{
    if (r.IsEmpty()) { SetEmpty(); return; }

    if (IsEmpty()) return;

    CRgnData *pData  = Data();
    CRgnData *prData = r.Data();

    int es = CRgnData::EstimateSizeIntersect(*pData, *prData);
    char tmpMem[TMP_MEM_SIZ];
    CRgnData *result = es <= TMP_MEM_SIZ
                     ? (CRgnData*)tmpMem
                     : (CRgnData*)new char[es];
    if (result == NULL)
        return;
    result->Intersect(*pData, *prData);

    FreeMemory();

    if (result->_nCount == 0)
    {
        if (result != (CRgnData*)tmpMem)
            delete[] (char*)result;
        _pData = 0;
        return;
    }

    int rs = result->GetMinSize();
    if (rs <= RGN_OWN_MEM_SIZ)
    {
        UseOwnMemory();
        Data()->Copy(*result);
        if (result != (CRgnData*)tmpMem)
            delete[] (char*)result;
    }
    else if (result == (CRgnData*)tmpMem)
    {
        CRgnData *pData = (CRgnData*)new char[rs];
        if (pData == NULL)
            return;
        _pData = pData;
        _pData->Copy(*result);
    }
    else
        _pData = result;

    ASSERT_RGN_VALID
}

//+---------------------------------------------------------------------------
//
//  Member:     CRegion2::Intersects
//
//  Synopsis:   Incomplete intersecting:
//              Just to understand that there exist at least one point
//              belonging to both given regions
//
//  Arguments:  r      reference to second region
//
//  Returns:    TRUE if regions have nonempty intersection
//
//----------------------------------------------------------------------------
BOOL
CRegion2::Intersects(const CRegion2& r) const
{
    if (r.IsEmpty()) return FALSE;
    if (  IsEmpty()) return FALSE;


    return CRgnData::Intersects(*Data(), *r.Data());
}

//+---------------------------------------------------------------------------
//
//  Member:     CRegion2::Subtract
//
//  Synopsis:   Calculate the "difference" of two regions:
//              Resulting region contains points
//              that present in this region but not in given region
//
//  Arguments:  r      reference to second region
//
//----------------------------------------------------------------------------
void
CRegion2::Subtract(const CRegion2& r)
{
    if (r.IsEmpty()) return;

    if (IsEmpty()) return;

    CRgnData *pData  = Data();
    CRgnData *prData = r.Data();

    int es = CRgnData::EstimateSizeSubtract(*pData, *prData);
    char tmpMem[TMP_MEM_SIZ];
    CRgnData *result = es <= TMP_MEM_SIZ
                     ? (CRgnData*)tmpMem
                     : (CRgnData*)new char[es];
    if (result == NULL)
        return;
    result->Subtract(*pData, *prData);

    FreeMemory();

    if (result->_nCount == 0)
    {
        if (result != (CRgnData*)tmpMem)
            delete[] (char*)result;
        _pData = 0;
        return;
    }

    int rs = result->GetMinSize();
    if (rs <= RGN_OWN_MEM_SIZ)
    {
        UseOwnMemory();
        Data()->Copy(*result);
        if (result != (CRgnData*)tmpMem)
            delete[] (char*)result;
    }
    else if (result == (CRgnData*)tmpMem)
    {
        CRgnData *pData = (CRgnData*)new char[rs];
        if (pData == NULL)
            return;
        _pData = pData;
        _pData->Copy(*result);
    }
    else
        _pData = result;


    ASSERT_RGN_VALID
}

//+---------------------------------------------------------------------------
//
//  Member:     CRegion2::operator==
//
//  Synopsis:   Compare two regions
//
//  Arguments:  r      reference to second region
//
//  Returns:    TRUE if this region is equal to given
//
//  Note: two regions, A and B, are considered to be equal if
//        each point contained in A is contained in B, and
//        each point contained in B is contained in A.
//
//----------------------------------------------------------------------------
BOOL
CRegion2::operator==(const CRegion2& r) const
{
    if (IsEmpty()) return r.IsEmpty();
    if (r.IsEmpty()) return FALSE;
    return Data()->IsEqualTo(*r.Data());
}

//+---------------------------------------------------------------------------
//
//  Member:     CRegion2::operator!=
//
//  Synopsis:   Compare two regions
//
//  Arguments:  r      reference to second region
//
//  Returns:    TRUE if this region is not equal to given
//
//----------------------------------------------------------------------------
BOOL
CRegion2::operator!=(const CRegion2& r) const
{
    if (IsEmpty()) return !r.IsEmpty();
    if (r.IsEmpty()) return TRUE;
    return !Data()->IsEqualTo(*r.Data());
}

//+---------------------------------------------------------------------------
//
//  Member:     CRegion2::operator==
//
//  Synopsis:   Compare this region and rectangle
//
//  Arguments:  r      reference to rectangle
//
//  Returns:    TRUE if this region is equal to given rect.
//              Equivalent of operator==(CRegion2(r))
//
//----------------------------------------------------------------------------
BOOL
CRegion2::operator==(const CRect& r) const
{
    return IsEmpty() ? r.IsRectEmpty() : Data()->IsEqualTo(r);
}

//+---------------------------------------------------------------------------
//
//  Member:     CRegion2::operator!=
//
//  Synopsis:   Compare this region and rectangle
//
//  Arguments:  r      reference to rectangle
//
//  Returns:    TRUE if this region is not equal to given rect.
//
//----------------------------------------------------------------------------
BOOL
CRegion2::operator!=(const CRect& r) const
{
    return IsEmpty() ? !r.IsRectEmpty() : !Data()->IsEqualTo(r);
}

//+---------------------------------------------------------------------------
//
//  Member:     CRegion2::Contains
//
//  Synopsis:   Check whether given point is contained in this region
//
//  Arguments:  pt      reference to point
//
//  Returns:    TRUE if this region contains given point
//
//----------------------------------------------------------------------------
BOOL
CRegion2::Contains(const CPoint& pt) const
{
    if (IsEmpty())
        return FALSE;

    return Data()->Contains(pt);
}

//+---------------------------------------------------------------------------
//
//  Member:     CRegion2::Contains
//
//  Synopsis:   Check whether given rect is contained in this region
//
//  Arguments:  rc      reference to rect
//
//  Returns:    TRUE if this region contains given rect
//
//----------------------------------------------------------------------------
BOOL
CRegion2::Contains(const CRect& rc) const
{
    if (IsEmpty())
        return FALSE;

    return Data()->Contains(rc);
}

//+---------------------------------------------------------------------------
//
//  Member:     CRegion2::CRegion2
//
//  Synopsis:   Construct region of rectangle
//
//  Arguments:  r      reference to rectangle
//
//----------------------------------------------------------------------------
CRegion2::CRegion2(const CRect& r)
{
    if (r.IsEmpty())
        _pData = 0;
    else
    {
        Assert(RGN_OWN_MEM_SIZ >= (sizeof(CRgnData) + 2*sizeof(int)));
        UseOwnMemory();
        Data()->SetRectangle(r.left, r.top, r.right, r.bottom);
    }
}

//+---------------------------------------------------------------------------
//
//  Member:     CRegion2::CRegion2
//
//  Synopsis:   Construct rectangular region
//
//  Arguments:  left        |
//              top         |   rectangle
//              right       |   limits
//              bottom      |
//
//----------------------------------------------------------------------------
CRegion2::CRegion2(int left, int top, int right, int bottom)
{
    if (left >= right || top >= bottom)
        _pData = 0;
    else
    {
        Assert(RGN_OWN_MEM_SIZ >= (sizeof(CRgnData) + 2*sizeof(int)));
        UseOwnMemory();
        Data()->SetRectangle(left, top, right, bottom);
    }
}


//+---------------------------------------------------------------------------
//
//  Member:     CRegion2::CRegion2
//
//  Synopsis:   Construct region as a copy of given one
//
//  Arguments:  r       reference to given region
//
//----------------------------------------------------------------------------
CRegion2::CRegion2(const CRegion2& r)
{
    if (r.IsEmpty())
        _pData = 0;
    else
    {
        int rs = r.Data()->GetMinSize();
        if (rs <= RGN_OWN_MEM_SIZ)
        {
            UseOwnMemory();
        }
        else
        {
            _pData = (CRgnData*)new char[rs];
            if (_pData == NULL)
                return;
        }
        Data()->Copy(*r.Data());
    }
}

//+---------------------------------------------------------------------------
//
//  Member:     CRegion2::Copy
//
//  Synopsis:   Copy of given region to this one
//
//  Arguments:  r       reference to given region
//
//  Note: if given region contains unused gaps in data,
//        they will be renmoved while copying
//
//----------------------------------------------------------------------------
void
CRegion2::Copy(const CRegion2& r)
{
    FreeMemory();
    if (r.IsEmpty())
        _pData = 0;
    else
    {
        int rs = r.Data()->GetMinSize();
        if (rs <= RGN_OWN_MEM_SIZ)
        {
            UseOwnMemory();
        }
        else
        {
            _pData = (CRgnData*)new char[rs];
            if (_pData == NULL)
                return;
        }
        Data()->Copy(*r.Data());
    }
}


//----------------------- windows operations -------------------------------------//


//+---------------------------------------------------------------------------
//
//  Member:     static CRegion2::MakeRgnOfRectAry
//
//  Synopsis:   Compose region of given array of rectangles.
//
//  Arguments:  pRect       pointer to aray of rectangles
//              nRect       amount of rectangles in array
//
//  Returns:    New region
//
//  Note:   nRect should not be zero
//
//----------------------------------------------------------------------------
CRegion2*
CRegion2::MakeRgnOfRectAry(CRect *pRect, int nRect)
{
    if (nRect  == 1)
        return new CRegion2(*pRect);

    int nHalf = nRect >> 1;
    CRegion2 *a = MakeRgnOfRectAry(pRect, nHalf),
             *b = MakeRgnOfRectAry(pRect+nHalf, nRect-nHalf);
    if(a && b)
    {
        a->Union(*b);
    }
    else
    {
        delete a;
        a = NULL;
    }
    delete b;
    return a;
}

//+---------------------------------------------------------------------------
//
//  Member:     CRegion2::ConvertFromWindows
//
//  Synopsis:   Compose region identical to given Window's region
//
//  Arguments:  hRgn        handle to Windows region
//
//  Returns:    FALSE if any error returned by call to Windows
//
//----------------------------------------------------------------------------
BOOL
CRegion2::ConvertFromWindows(HRGN hRgn)
// returns false on error returned by Windows
{
    DWORD dwCount = GetRegionData(hRgn, 0, 0);
    BOOL ok = FALSE;

    if (dwCount == 0)
        return FALSE;

    LPRGNDATA lpRgnData = (LPRGNDATA)new char[dwCount];
    if (lpRgnData)
    {
        DWORD dwCountReturned = GetRegionData(hRgn, dwCount, lpRgnData);

        ok = dwCountReturned == dwCount;
        if (ok)
            ok = lpRgnData->rdh.iType == RDH_RECTANGLES;
        if (ok)
        {
            CRect *pRectAry = (CRect*)((char*)lpRgnData + lpRgnData->rdh.dwSize);
            int nRectAry = lpRgnData->rdh.nCount;
            if (nRectAry == 0) SetEmpty();
            else
            {
                CRegion2 *r = MakeRgnOfRectAry(pRectAry, lpRgnData->rdh.nCount);
                if (r)
                {
                    Swap(*r);
                    delete r;
                }
            }
        }

        delete[] (char*)lpRgnData;
    }
    return ok;
}

//+---------------------------------------------------------------------------
//
//  Member:     CRegion2::ConvertToWindows
//
//  Synopsis:   Compose Windows region identical to this
//
//  Arguments:  no
//
//  Returns:    handle to new Windows region
//
//----------------------------------------------------------------------------

#if DBG == 1
// Win9x 16-bit overflow defence helper
static void Win9xOverflowDefence(RECT *prc, int n)
{
    static const int min = -0x3FFF, max = 0x3FFF;

    for (int i = 0; i < n; i++, prc++)
    {
        RECT *p = prc+i;
        if (p->left < min || p->top < min || p->right > max || p->bottom > max)
        {
            AssertSz(FALSE, "Rectangle too big for ExtCreateRegion in Win9x");
            break; // single assertion is quite enough
        }
    }

    // correct remaining RECTs without assertion
    for (; i < n; i++, prc++)
    {
        RECT *p = prc+i;
        if (p->left   < min) p->left   = min;
        if (p->top    < min) p->top    = min;
        if (p->right  > max) p->right  = max;
        if (p->bottom > max) p->bottom = max;
    }
}
#endif

HRGN
CRegion2::ConvertToWindows() const
{
    if (IsEmpty())
        return ::CreateRectRgn(0,0,0,0);

    CRgnData *pData = Data();

    int n = pData->CountRectangles();

    DWORD dwRgnDataSize = sizeof(RGNDATAHEADER) + n*sizeof(RECT);
    LPRGNDATA lpRgnData = (LPRGNDATA)new char[dwRgnDataSize];
    if (lpRgnData == NULL)
        return NULL;

    lpRgnData->rdh.dwSize = sizeof(RGNDATAHEADER);
    lpRgnData->rdh.iType = RDH_RECTANGLES;
    lpRgnData->rdh.nCount = n;
    lpRgnData->rdh.nRgnSize = 0;
    pData->GetBoundingRect(lpRgnData->rdh.rcBound);
    pData->GetAllRectangles((RECT*)(lpRgnData->Buffer));

    //IF_DBG(Win9xOverflowDefence((RECT*)(lpRgnData->Buffer), n));

    HRGN hRgn = ::ExtCreateRegion(0, dwRgnDataSize, lpRgnData);
    delete[] (char*)lpRgnData;
    return hRgn;
}

//----------------------------- transformations --------------------------------//

//+---------------------------------------------------------------------------
//
//  Member:     CRegion2::Offset
//
//  Synopsis:   Shift all the points in region by given 2d vector
//
//  Arguments:  s       reference to CSize containing shift vector
//
//  Returns:    FALSE if given vector is too big and
//              conversion can't be provided because of int32 overflow
//
//----------------------------------------------------------------------------
BOOL
CRegion2::Offset(const CSize& s)
{
    if (IsEmpty()) return TRUE;
    BOOL ok = Data()->Offset(s.cx, s.cy);
    ASSERT_RGN_VALID
    return ok;
}

//+---------------------------------------------------------------------------
//
//  Member:     CRegion2::Scale
//
//  Synopsis:   Stretch given region from (0,0) center
//
//  Arguments:  coef        stretch coefficient
//
//  Returns:    FALSE if given coef is zero, negative or big so much that
//              conversion can't be provided because of int32 overflow
//
//  Note:   Scaling with coef < 1 can brake the region shape:
//          slightly different coordinates can became equal, and some
//          areas can merge. To keep region data in legal state, the
//          special Squeeze routine is executed. This routine removes
//          merged edges and decrease region data size.
//
//----------------------------------------------------------------------------
BOOL
CRegion2::Scale(double coef)
{
    if (coef <= 0) return FALSE;
    if (IsEmpty()) return TRUE;

    CRgnData *pData = Data();

    F2I_FLOW;

    if (!pData->Scale(coef)) return FALSE;
    if (coef < 1)
    {
        if (!pData->Squeeze(*pData))
        {
            FreeMemory();
            _pData = 0;
        }
        else if (!UsingOwnMemory() && pData->GetMinSize() <= RGN_OWN_MEM_SIZ)
        {
            UseOwnMemory();
            Data()->Copy(*pData);
            delete[] (char*)pData;
        }
    }

    ASSERT_RGN_VALID
    return TRUE;
}

//+---------------------------------------------------------------------------
//
//  Member:     CRegion2::Transform
//
//  Synopsis:   Transform region
//
//  Note: Made of CRegion::Transform by donmarsh without deep thoughts
//
//----------------------------------------------------------------------------

void
CRegion2::Transform(const CWorldTransform *pTransform, BOOL fRoundOut)
{
    // NOTE:  In some (rare) scenarios, rotating a region must
    //        produce a polygon. In most cases, we'll want to
    //        get a bounding rectangle instead (for performance reasons,
    //        or just to make our life easier).
    //        If these two different behaviors are actually
    //        desired, we need to use different transformation methods,
    //        or maybe a flag.


    if (IsEmpty())
        return;

    CRgnData *pData = Data();

    //
    // apply transformations
    //

    // speed optimization for offset-only matrix
    if (pTransform->IsOffsetOnly())
    {
        Offset(pTransform->GetOffsetOnly());
        return;
    }

    if (pTransform->FTransforms())
    {
        int n = pData->CountRectangles();
        CRect* pRect = new CRect[n];
        if (pRect)
        {
            pData->GetAllRectangles(pRect);

            for (int i = 0; i < n; i++)
            {
                CRect srcRect = pRect[i];
                pTransform->GetBoundingRectAfterTransform(&srcRect, &pRect[i], fRoundOut);
            }

            CRegion2* r = MakeRgnOfRectAry(pRect, n);
            delete[] pRect;
            if (r)
            {
                Swap(*r);
                delete r;
            }
        }
    }
}

//+---------------------------------------------------------------------------
//
//  Member:     CRegion2::Untransform
//
//  Synopsis:   Untransform region
//
//  Note: Made of CRegion::Untransform by donmarsh without deep thoughts
//
//----------------------------------------------------------------------------
void
CRegion2::Untransform(const CWorldTransform *pTransform)
{
    // apply the reverse transformation
    //REVIEW dmitryt: we do have a reverse matrix in CWorldTransform,
    //                I guess we could optimize things here not calculating a new one..
    //          To Do: use cached reverse matrix from CWorldTransform.

    Assert(pTransform);

    // speed optimization in case we only have an offset
    if (pTransform->IsOffsetOnly())
    {
        Offset(-pTransform->GetOffsetOnly());
        return;
    }

    CWorldTransform transformReverse(pTransform);
    transformReverse.Reverse();
    Transform(&transformReverse, TRUE);
}


#if DBG == 1
//+---------------------------------------------------------------------------
//
//  Member:     DumpRegion, Dump
//
//  Synopsis:   debugging
//
//----------------------------------------------------------------------------
void
DumpRegion(const CRegion2& rgn)
{
    rgn.Dump();
}

void
CRegion2::Dump() const
{
    Data()->Dump(this);
}

void
CRgnData::Dump(const CRegion2* prgn) const
{
    TraceTagEx((0, TAG_NONAME, "CRegion2 %x  bounds (%d,%d,%d,%d)", prgn,
                _nLeft, _aStripe[0]._nTop, _nRight, _aStripe[_nCount-1]._nTop));

    for (int i = 0, n = _nCount-1; i < n; i++)
    {
        const CStripe &s = _aStripe[i];
        int *p = s.px();
        int m = ((&s+1)->px() - p) >> 1;

        int top = s._nTop;
        int bottom = (&s+1)->_nTop;

        for (int j = 0; j < m; j++)
        {
            TraceTagEx((0, TAG_NONAME, "    Slice %d rect %d (%d,%d,%d,%d)",
                        i, j, p[2*j], top, p[2*j+1], bottom));
        }
    }
}
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\display\xtextout.cxx ===
/*----------------------------------------------------------------------------
    File: xtextout.cxx

    Transformation wrappers for ExtTextOut*
----------------------------------------------------------------------------*/

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\download\bits.cxx ===
//+------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1992 - 1996.
//
//  File:       bits.cxx
//
//  Contents:   CBitsCtx
//              CBitsInfo
//              CBitsLoad
//
//-------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_BITS_HXX_
#define X_BITS_HXX_
#include "bits.hxx"
#endif

#ifndef X_UWININET_H_
#define X_UWININET_H_
#include "uwininet.h"
#endif

#ifndef X_MSHTMLRC_H_
#define X_MSHTMLRC_H_
#include "mshtmlrc.h"
#endif

#ifndef X_FATSTG_HXX_
#define X_FATSTG_HXX_
#include "fatstg.hxx"
#endif

#ifndef X_PRGSNK_H_
#define X_PRGSNK_H_
#include <prgsnk.h>
#endif

// Debugging ------------------------------------------------------------------

PerfDbgTag(tagBitsBuffer, "Dwn", "! Force CBitsCtx to buffer data")
PerfDbgTag(tagBitsInfo,   "Dwn", "Trace CBitsInfo")
PerfDbgTag(tagBitsLoad,   "Dwn", "Trace CBitsLoad")
MtDefine(CBitsCtx, Dwn, "CBitsCtx")
MtDefine(CBitsInfo, Dwn, "CBitsInfo")
MtDefine(CBitsInfoGetFile, Dwn, "CBitsInfo::GetFile")
MtDefine(CBitsLoad, Dwn, "CBitsLoad")

// CBitsCtx -------------------------------------------------------------------

void
CBitsCtx::SelectChanges(ULONG ulChgOn, ULONG ulChgOff, BOOL fSignal)
{
    WORD wNewChg = 0;

    EnterCriticalSection();

    _wChgReq &= (WORD)~ulChgOff;

    if (    fSignal
        &&  !(_wChgReq & DWNCHG_COMPLETE)
        &&  (ulChgOn & DWNCHG_COMPLETE)
        &&  GetDwnInfo()->TstFlags(DWNLOAD_COMPLETE))
    {
        wNewChg = DWNCHG_COMPLETE;
    }

    _wChgReq |= (WORD)ulChgOn;
    
    if (wNewChg)
    {
        super::Signal(wNewChg);
    }

    LeaveCriticalSection();
}

HRESULT
CBitsCtx::GetStream(IStream ** ppStream)
{
    return(((CBitsInfo *)GetDwnInfo())->GetStream(ppStream));
}

// CBitsInfo ------------------------------------------------------------------

HRESULT
CBitsInfo::Init(DWNLOADINFO * pdli)
{
    _dwClass = pdli->dwProgClass ? pdli->dwProgClass : PROGSINK_CLASS_MULTIMEDIA;
    
    RRETURN(THR(super::Init(pdli)));
}

CBitsInfo::~CBitsInfo()
{
    PerfDbgLog(tagBitsInfo, this, "+CBitsInfo::~CBitsInfo");

    if (_hLock)
    {
        InternetUnlockRequestFile(_hLock);
    }

    if (_pDwnStm)
        _pDwnStm->Release();

    if (_fIsTemp && _cstrFile)
    {
        DeleteFile(_cstrFile);
    }

    PerfDbgLog(tagBitsInfo, this, "-CBitsInfo::~CBitsInfo");
}

HRESULT
CBitsInfo::GetFile(LPTSTR * ppch)
{
    RRETURN(_cstrFile ? MemAllocString(Mt(CBitsInfoGetFile), _cstrFile, ppch) : E_FAIL);
}

HRESULT
CBitsInfo::NewDwnCtx(CDwnCtx ** ppDwnCtx)
{
    *ppDwnCtx = new CBitsCtx;
    RRETURN(*ppDwnCtx ? S_OK : E_OUTOFMEMORY);
}

HRESULT
CBitsInfo::NewDwnLoad(CDwnLoad ** ppDwnLoad)
{
    *ppDwnLoad = new CBitsLoad;
    RRETURN(*ppDwnLoad ? S_OK : E_OUTOFMEMORY);
}

HRESULT
CBitsInfo::OnLoadFile(LPCTSTR pszFile, HANDLE * phLock, BOOL fIsTemp)
{
    PerfDbgLog2(tagBitsInfo, this, "+CBitsInfo::OnLoadFile (psz=%ls,hLock=%lX)", pszFile, phLock ? *phLock : NULL);

    HRESULT hr = THR(_cstrFile.Set(pszFile));

    if (hr == S_OK)
    {
        if (phLock)
        {
            _hLock = *phLock;
            *phLock = NULL;
        }

        _fIsTemp = fIsTemp;
    }

    PerfDbgLog1(tagBitsInfo, this, "-CBitsInfo::OnLoadFile (hr=%lX)", hr);
    RRETURN(hr);
}

void
CBitsInfo::OnLoadDwnStm(CDwnStm * pDwnStm)
{
    Assert(_pDwnStm == NULL);
    _pDwnStm = pDwnStm;
    _pDwnStm->AddRef();
}

void
CBitsInfo::OnLoadDone(HRESULT hrErr)
{
    PerfDbgLog1(tagBitsInfo, this, "+CBitsInfo::OnLoadDone (hrErr=%lX)", hrErr);

    Assert(EnteredCriticalSection());

    UpdFlags(DWNLOAD_MASK, !hrErr ? DWNLOAD_COMPLETE : DWNLOAD_ERROR);
    Signal(DWNCHG_COMPLETE);

    PerfDbgLog(tagBitsInfo, this, "-CBitsInfo::OnLoadDone");
}

BOOL
CBitsInfo::AttachEarly(UINT dt, DWORD dwRefresh, DWORD dwFlags, DWORD dwBindf)
{
    // In order to attach to an existing CBitsInfo, the following must match:
    //      _cstrUrl            (Already checked by caller)
    //      _dwRefresh
    //      DWNF_DOWNLOADONLY
    //      BINDF_OFFLINEOPERATION
    
    return( GetRefresh() == dwRefresh
        &&  GetFlags(DWNF_DOWNLOADONLY) == (dwFlags & DWNF_DOWNLOADONLY)
        &&  _dt == dt
        &&  (GetBindf() & BINDF_OFFLINEOPERATION) == (dwBindf & BINDF_OFFLINEOPERATION));
}

HRESULT
CBitsInfo::GetStream(IStream ** ppStream)
{
    PerfDbgLog(tagBitsInfo, this, "+CBitsInfo::GetStream");

    HRESULT hr;

    if (_cstrFile)
    {
        hr = THR(CreateStreamOnFile(_cstrFile,
                    STGM_READ | STGM_SHARE_DENY_NONE,
                    ppStream));
        if (hr)
            goto Cleanup;
    }
    else if (_pDwnStm)
    {
        hr = THR(CreateStreamOnDwnStm(_pDwnStm, ppStream));
        if (hr)
            goto Cleanup;
    }
    else
    {
        hr = E_FAIL;
        *ppStream = NULL;
    }

Cleanup:
    PerfDbgLog1(tagBitsInfo, this, "-CBitsInfo::GetStream (hr=%lX)", hr);
    RRETURN(hr);
}

// CBitsLoad ---------------------------------------------------------------

CBitsLoad::~CBitsLoad()
{
    if (_pDwnStm)
        _pDwnStm->Release();

    ReleaseInterface(_pStmFile);
}

HRESULT
CBitsLoad::Init(DWNLOADINFO * pdli, CDwnInfo * pDwnInfo)
{
    PerfDbgLog(tagBitsLoad, this, "+CBitsLoad::Init");

    HRESULT hr;

    hr = THR(super::Init(pdli, pDwnInfo, 
        IDS_BINDSTATUS_DOWNLOADINGDATA_BITS,
        DWNF_GETFILELOCK|DWNF_NOAUTOBUFFER|DWNF_GETSTATUSCODE|DWNF_GETMODTIME));

    PerfDbgLog1(tagBitsLoad, this, "-CBitsLoad::Init (hr=%lX)", hr);
    RRETURN(hr);
}

HRESULT
CBitsLoad::OnBindHeaders()
{
    PerfDbgLog(tagBitsLoad, this, "+CBitsLoad::OnBindHeaders");

    LPCTSTR     pch;
    HANDLE      hLock = NULL;
    HRESULT     hr = S_OK;
    DWORD       dwStatusCode = _pDwnBindData->GetStatusCode();
    BOOL        fPretransform;

    #if DBG==1 || defined(PERFTAGS)
    if (IsPerfDbgEnabled(tagBitsBuffer))
        goto Cleanup;
    #endif

    if ((dwStatusCode >= 400) && (dwStatusCode < 600))
    {
        hr = E_FAIL;
        goto Cleanup;
    }

    GetBitsInfo()->SetLastMod( _pDwnBindData->GetLastMod() );
    OnHeaders(S_OK);

    pch = _pDwnBindData->GetFileLock(&hLock, &fPretransform);
    
    if (fPretransform)
    {
        // we don't want to hold onto this file, we always want the bits
        if (hLock)
        {
            InternetUnlockRequestFile(hLock);
            hLock = NULL;
        }
        pch = NULL;
    }
    
    if (pch)
    {
        hr = THR(GetBitsInfo()->OnLoadFile(pch, &hLock, FALSE));
        if (hr)
            goto Cleanup;

        _fGotFile = TRUE;

        if (    _pDwnBindData->GetScheme() == URL_SCHEME_FILE
            ||  _pDwnBindData->IsFullyAvail())
        {
            CDwnDoc * pDwnDoc = _pDwnBindData->GetDwnDoc();

            if (pDwnDoc)
            {
                DWNPROG DwnProg;
                _pDwnBindData->GetProgress(&DwnProg);
                pDwnDoc->AddBytesRead(DwnProg.dwMax);
            }

            _pDwnBindData->Disconnect();
            OnDone(S_OK);

            hr = S_FALSE;
        }
    }

Cleanup:
    if (hLock)
        InternetUnlockRequestFile(hLock);
    PerfDbgLog1(tagBitsLoad, this, "-CBitsLoad::OnBindHeaders (hr=%lX)", hr);
    RRETURN1(hr, S_FALSE);
}

HRESULT
CBitsLoad::OnBindData()
{
    PerfDbgLog(tagBitsLoad, this, "+CBitsLoad::OnBindData");

    BYTE    ab[1024];
    ULONG   cb;
    HRESULT hr;

    if (!_fGotData)
    {
        _fGotData = TRUE;

        if (!_fGotFile)
        {
            if (GetBitsInfo()->_dt == DWNCTX_FILE)
            {
                if (_pDwnBindData->GetScheme() == URL_SCHEME_HTTPS)
                {
                    // No can do for secure connections.  The user has told
                    // us to not write secure data to disk (because otherwise
                    // we would have gotten a cache file name already).

                    hr = E_FAIL;
                    goto Cleanup;
                }

                // Create a temporary file for storing the data.

                TCHAR achFileName[MAX_PATH];
                TCHAR achPathName[MAX_PATH];
                DWORD dwRet;

                dwRet = GetTempPath(ARRAY_SIZE(achPathName), achPathName);
                if (!(dwRet && dwRet < ARRAY_SIZE(achPathName)))
                {
                    hr = E_FAIL;
                    goto Cleanup;
                }

                if (!GetTempFileName(achPathName, _T("dat"), 0, achFileName))
                {
                    hr = E_FAIL;
                    goto Cleanup;
                }

                hr = THR(CreateStreamOnFile(achFileName,
                         STGM_READWRITE | STGM_SHARE_DENY_WRITE | STGM_CREATE,
                         &_pStmFile));
                if (hr)
                    goto Cleanup;

                hr = THR(GetBitsInfo()->OnLoadFile(achFileName, NULL, TRUE));
                if (hr)
                    goto Cleanup;
            }
            else
            {
                // We only need to provide access to the data, not a file,
                // so just buffer the data as it comes in.

                _pDwnStm = new CDwnStm;

                if (_pDwnStm == NULL)
                {
                    hr = E_OUTOFMEMORY;
                    goto Cleanup;
                }

                _pDwnStm->SetSeekable();

                GetBitsInfo()->OnLoadDwnStm(_pDwnStm);
            }
        }
    }

    if (_pDwnStm)
    {
        void *  pv;
        ULONG   cbW, cbR;

        for (;;)
        {
            hr = THR(_pDwnStm->WriteBeg(&pv, &cbW));
            if (hr)
                goto Cleanup;

            Assert(cbW > 0);

            hr = THR(_pDwnBindData->Read(pv, cbW, &cbR));
            if (hr)
                break;

            Assert(cbR <= cbW);

            _pDwnStm->WriteEnd(cbR);

            if (cbR == 0)
                break;
        }
    }
    else
    {
        for (;;)
        {
            hr = THR(_pDwnBindData->Read(ab, sizeof(ab), &cb));

            if (hr || !cb)
                break;

            if (_pStmFile)
            {
                hr = THR(_pStmFile->Write(ab, cb, NULL));
                if (hr)
                    goto Cleanup;
            }
        }
    }

Cleanup:
    PerfDbgLog1(tagBitsLoad, this, "-CBitsLoad::OnBindData (hr=%lX)", hr);
    RRETURN(hr);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\download\bodyctx.cxx ===
//+---------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1994-1998
//
//  File:       bodyctx.cxx
//
//  Contents:   CHtmTextParseCtx manipulates spaces and nbsps, and adds
//              special characters underneath certain elements in the BODY
//
//----------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_WCHDEFS_H_
#define X_WCHDEFS_H_
#include "wchdefs.h"
#endif

#ifndef X_ROOTCTX_HXX_
#define X_ROOTCTX_HXX_
#include "rootctx.hxx"
#endif

#ifndef X_HTM_HXX_
#define X_HTM_HXX_
#include "htm.hxx"
#endif

#ifndef X_HEDELEMS_HXX_
#define X_HEDELEMS_HXX_
#include "hedelems.hxx"
#endif

#ifndef X_FILLCODE_HXX_
#define X_FILLCODE_HXX_
#include "fillcode.hxx"
#endif

DeclareTag(tagNoWchNoScope, "TextNoScope", "Don't use WCH_NOSCOPE for noscope elements");

MtDefine(CHtmTextParseCtx, CHtmParseCtx, "CHtmTextParseCtx");
MtDefine(CHtmBodyParseCtx, CHtmParseCtx, "CHtmTextParseCtx");
MtDefine(CHtmPreParseCtx,  CHtmParseCtx, "CHtmCrlfParseCtx")
MtDefine(CHtmHeadParseCtx, Dwn,          "CHtmHeadParseCtx")

ULONG
FillCodeFromEtag(ELEMENT_TAG etag)
{
    switch (etag)
    {
    case ETAG_ADDRESS:
    case ETAG_BLOCKQUOTE:
    case ETAG_BODY:
    case ETAG_CAPTION:
    case ETAG_CENTER:
    case ETAG_COLGROUP:
    case ETAG_DD:
    case ETAG_DIR:
    case ETAG_DL:
    case ETAG_DT:
    case ETAG_FORM:
    case ETAG_H1:
    case ETAG_H2:
    case ETAG_H3:
    case ETAG_H4:
    case ETAG_H5:
    case ETAG_H6:
    case ETAG_LEGEND:
    case ETAG_LI:
    case ETAG_MENU:
    case ETAG_OL:
    case ETAG_P:
    case ETAG_TABLE:
    case ETAG_TBODY:
    case ETAG_TC:
    case ETAG_TD:
    case ETAG_TFOOT:
    case ETAG_TH:
    case ETAG_THEAD:
    case ETAG_TR:
    case ETAG_UL:
    case ETAG_DIV:
#ifdef  NEVER
    case ETAG_HTMLAREA:
#endif
    case ETAG_BR:
        
        // Left of  begin: allow space
        // Right of begin: eat space
        // Left of  end:   allow space
        // Right of end:   eat space
        return LB(FILL_PUT) | RB(FILL_EAT) | LE(FILL_PUT) | RE(FILL_EAT);

    case ETAG_FIELDSET:
        // Left of  begin: allow space
        // Right of begin: eat space
        // Left of  end:   allow space
        // Right of end:   allow space
        return LB(FILL_PUT) | RB(FILL_EAT) | LE(FILL_PUT) | RE(FILL_PUT);
    case ETAG_LISTING:
    case ETAG_PLAINTEXT:
    case ETAG_PRE:
    case ETAG_XMP:
    
        // Left of  begin: allow space
        // Right of begin: allow space
        // Left of  end:   allow space
        // Right of end:   eat space
        return LB(FILL_PUT) | RB(FILL_PUT) | LE(FILL_PUT) | RE(FILL_EAT);
    
    case ETAG_OPTION:
    
        // Left of  begin: allow space
        // Right of begin: eat space
        // Left of  end:   eat space
        // Right of end:   allow space
        return LB(FILL_PUT) | RB(FILL_EAT) | LE(FILL_EAT) | RE(FILL_PUT);

    case ETAG_IMG:
    case ETAG_INPUT:
    case ETAG_SELECT:
    case ETAG_TEXTAREA:
    case ETAG_APPLET:
    case ETAG_EMBED:
    
        // Left of  begin: allow space
        // Right of begin: allow space
        // Left of  end:   allow space
        // Right of end:   allow space
        return LB(FILL_PUT) | RB(FILL_PUT) | LE(FILL_PUT) | RE(FILL_PUT);

    case ETAG_OBJECT:
    
        // Note that OBJECT tags in IE4 ate spaces around themselves(IE5 21266)
        
        // Left of  begin: eat space
        // Right of begin: eat space
        // Left of  end:   eat space
        // Right of end:   eat space
        return LB(FILL_EAT) | RB(FILL_EAT) | LE(FILL_EAT) | RE(FILL_EAT);
    
    case ETAG_MARQUEE:
    
        // MARQUEE tags in IE4 ate spaces after themselves
        
        // Left of  begin: eat space
        // Right of begin: eat space
        // Left of  end:   eat space
        // Right of end:   eat space
        return LB(FILL_PUT) | RB(FILL_EAT) | LE(FILL_EAT) | RE(FILL_EAT);
        
    case ETAG_BUTTON:
    
        // BUTTON tags in IE4 ate spaces before themselves (IE5 24846)
        
        // Left of  begin: eat space
        // Right of begin: eat space
        // Left of  end:   eat space
        // Right of end:   eat space
        return LB(FILL_EAT) | RB(FILL_EAT) | LE(FILL_EAT) | RE(FILL_PUT);
    case ETAG_SCRIPT:
        // Transfer space through a script as if it weren't there
        return LB(FILL_NUL) | RB(FILL_NUL) | LE(FILL_NUL) | RE(FILL_NUL);

    default:
        // Left of  begin: allow space
        // Right of begin: don't care
        // Left of  end:   allow space
        // Right of end:   don't care
        return LB(FILL_PUT) | RB(FILL_NUL) | LE(FILL_PUT) | RE(FILL_NUL);
    }
}

//+----------------------------------------------------------------------------
//
//  Function:   RemoveOneNbspFromEtag
//
//  Synopsis:   Returns TRUE for etags for which a single nbsp will be
//              removed in edit mode.
//
//-----------------------------------------------------------------------------
static BOOL
ShouldEatNbsp(ELEMENT_TAG etag)
{
    switch (etag)
    {
    case ETAG_ADDRESS:
    case ETAG_BLOCKQUOTE:
    case ETAG_BODY:
    case ETAG_CAPTION:
    case ETAG_CENTER:
    case ETAG_DD:
    case ETAG_DIR:
    case ETAG_DL:
    case ETAG_DT:
    case ETAG_FIELDSET:
    case ETAG_FORM:
    case ETAG_H1:
    case ETAG_H2:
    case ETAG_H3:
    case ETAG_H4:
    case ETAG_H5:
    case ETAG_H6:
    case ETAG_LEGEND:
    case ETAG_LI:
    case ETAG_LISTING:
    case ETAG_MENU:
    case ETAG_OL:
    case ETAG_P:
    case ETAG_PLAINTEXT:
    case ETAG_PRE:
    case ETAG_UL:
    case ETAG_XMP:
    case ETAG_DIV:
#ifdef  NEVER
    case ETAG_HTMLAREA:
#endif
    return TRUE;
    }
    return FALSE;
}


//+----------------------------------------------------------------------------
//
//  Function:   DoesNotDisturbNbspEating
//
//  Synopsis:   These ETAGs can be mixed in with a potential nbsp to be
//              removed and turned into a break on empty.
//
//-----------------------------------------------------------------------------
static BOOL
DoesNotDisturbNbspEating(ELEMENT_TAG etag)
{
    switch (etag)
    {
    // (JHarding): List of tags here that do not disturb nbsp eating
    // came from JohnThim 8/10/99
    case ETAG_CITE:
    case ETAG_FONT:
    case ETAG_S:
    case ETAG_STRONG:
    case ETAG_U:
    case ETAG_B:
    case ETAG_CODE:
    case ETAG_I:
    case ETAG_SAMP:
    case ETAG_SUB:
    case ETAG_BIG:
    case ETAG_DFN:
    case ETAG_KBD:
    case ETAG_SMALL:
    case ETAG_SUP:
    case ETAG_EM:
    case ETAG_Q:
    case ETAG_STRIKE:
    case ETAG_TT:
    case ETAG_COMMENT:
    case ETAG_SCRIPT:
    case ETAG_NOSCRIPT:
    case ETAG_A:
    case ETAG_SPAN:
    case ETAG_UNKNOWN:
    case ETAG_NOFRAMES:
    // Add the rest here
        return TRUE;
    }
    return FALSE;
}



//+----------------------------------------------------------------------------
//
//  CHtmTextParseCtx
//
//  Synopsis:   This class
//              1. Depends on its base class to collapse crlfs and spaces
//              2. Depends on the Root parse context to actually insert
//                 text and nodes into the tree
//              3. Applies rules to figure out when to remove &nbsps in edit mode
//
//-----------------------------------------------------------------------------

class CHtmTextParseCtx : public CHtmSpaceParseCtx
{
public:

    typedef CHtmSpaceParseCtx super;

    DECLARE_MEMCLEAR_NEW_DELETE(Mt(CHtmTextParseCtx))

    CHtmTextParseCtx(CHtmParseCtx *phpxParent, CElement *pel, CHtmParse *pHtmParse);
    
    virtual ~CHtmTextParseCtx ();
    
    virtual HRESULT BeginElement(CTreeNode **ppNodeNew, CElement *pel, CTreeNode *pNodeCur, BOOL fEmpty);
    virtual HRESULT EndElement(CTreeNode **ppNodeNew, CTreeNode *pNodeCur, CTreeNode *pNodeEnd);
    virtual HRESULT AddWord(CTreeNode *pNode, TCHAR *pch, ULONG cch, BOOL fAscii);
    virtual HRESULT AddSpace(CTreeNode *pNode);
    virtual HRESULT AddCollapsedWhitespace(CTreeNode *pNode, TCHAR *pch, ULONG cch);
    virtual HRESULT Init();
    virtual HRESULT Finish();
    virtual HRESULT InsertLPointer ( CTreePos * * pptp, CTreeNode * pNodeCur );
    virtual HRESULT InsertRPointer ( CTreePos * * pptp, CTreeNode * pNodeCur );


    HRESULT FlushNbsp(CTreeNode * pNodeCur);
    void AbsorbNbsp();
    void BeginNbspEater(CTreeNode *pNode);
    void SetNbspPos(CTreePos *ptp);
    HRESULT AddOneNbsp(CTreeNode *pNode);
    BOOL MatchNbspNode(CTreeNode *pNode);

protected:

    CTreeNode    *_pNodeNbsp;       // for setting _fBreakOnEmpty
    CTreePos     *_ptpAfterNbsp;    // for adding &nbsp text
    BOOL          _fHaveNbsp;
    CHtmParseCtx *_phpxRoot;
    BOOL          _fNbspMode;
    ELEMENT_TAG   _etagContainer;   // Top container, whether BODY or TD etc
    CHtmParse    *_pHtmParse;       // HtmParse for commit-ing
};

//+----------------------------------------------------------------------------
//
//  Function:   CreateHtmTextParseContext
//
//  Synopsis:   Factory
//
//-----------------------------------------------------------------------------

HRESULT
CreateHtmTextParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse)
{
    CHtmParseCtx *phpx;

    phpx = new CHtmTextParseCtx(phpxParent, pel, pHtmParse);
    
    if (!phpx)
        return E_OUTOFMEMORY;

    *pphpx = phpx;

    return S_OK;
}


//+----------------------------------------------------------------------------
//
//  Function:   CHtmTextParseContext::CHtmTextParseContext
//
//  Synopsis:   Constructor, destructor
//
//-----------------------------------------------------------------------------

const ELEMENT_TAG
s_atagTextReject[] =
{
    ETAG_HEAD,
    ETAG_HTML,
    ETAG_FRAMESET,
    ETAG_FRAME,
    ETAG_OPTGROUP,
    ETAG_OPTION,
    ETAG_PARAM,
    ETAG_UNKNOWN,
    ETAG_NULL
};

const ELEMENT_TAG
s_atagTextDrop[] =
{
    ETAG_HEAD,
    ETAG_HTML,
    ETAG_NULL
};

const ELEMENT_TAG
s_atagTextIgnoreEnd[] =
{
    ETAG_HEAD,
    ETAG_HTML,
    ETAG_BODY,
    ETAG_BASE,
    ETAG_LI,
    ETAG_DD,
    ETAG_DT,
    ETAG_NULL
};

const ELEMENT_TAG
s_atagPasteIgnoreEnd[] =
{
    ETAG_HEAD,
    ETAG_HTML,
    ETAG_BODY,
    ETAG_BASE,
    ETAG_NULL
};

CHtmTextParseCtx::CHtmTextParseCtx(CHtmParseCtx *phpxParent, CElement *pel, CHtmParse *pHtmParse)
    : CHtmSpaceParseCtx(phpxParent)
{
    CMarkup *pMarkup = pel->GetMarkup();

    _phpxRoot = GetHpxRoot();
    
    // When parsing for paste, don't ignore end-tags for LI's, DD's, DT's.
    if (pMarkup->_fMarkupServicesParsing)
        _atagIgnoreEnd = s_atagPasteIgnoreEnd;
    else
        _atagIgnoreEnd = s_atagTextIgnoreEnd;
    
    _atagReject    = s_atagTextReject;
    _atagTag       = s_atagTextDrop;

    // TODO (MohanB) Shouldn't check pel->IsEditable() instead?
    _fNbspMode = (pMarkup && pMarkup->IsEditable());
    _pHtmParse = pHtmParse;
    
    _etagContainer = pel->Tag();
}

//+----------------------------------------------------------------------------
//
//  Function:   CHtmTextParseCtx::AddWord, CHtmTextParseCtx::AddSpace
//
//  Synopsis:   Text handling for CHtmTextParseCtx
//
//              In addition to using the base class to collapse multiple
//              spaces down to one, this class also removes single
//              &nbsp characters from within paragraphs and other designated
//              elements, and from before BRs.
//
//-----------------------------------------------------------------------------

HRESULT
CHtmTextParseCtx::AddWord(CTreeNode *pNode, TCHAR *pch, ULONG cch, BOOL fAscii)
{
    HRESULT hr;
    
    // 1. Deal with single nbsp

    if (_fNbspMode)
    {
        if (cch == 1 && *pch == WCH_NBSP)
        {
            hr = THR(AddOneNbsp(pNode));
            goto Cleanup; // skip the rest
        }
        else
        {
            hr = THR(FlushNbsp(pNode));
            if (hr)
                goto Cleanup;
        }
    }

    // 2. Go ahead and add text
    
    hr = THR(_phpxRoot->AddText(pNode, pch, cch, fAscii));
    if (hr)
        goto Cleanup;

Cleanup:
    RRETURN(hr);
}

//+----------------------------------------------------------------------------
//
//  Function:   CHtmTextParseCtx::AddCollapsedWhitespace
//
//  Synopsis:   Collapsed whitespace handling for CHtmTextParseCtx
//
//-----------------------------------------------------------------------------

HRESULT
CHtmTextParseCtx::AddCollapsedWhitespace(CTreeNode *pNode, TCHAR *pch, ULONG cch)
{
    HRESULT hr;
    
    // Delegate to root context
    
    hr = THR(_phpxRoot->AddCollapsedWhitespace(pNode, pch, cch));
    if (hr)
        goto Cleanup;

Cleanup:
    RRETURN(hr);
}

            
HRESULT
CHtmTextParseCtx::AddSpace(CTreeNode *pNode)
{
    HRESULT hr;
    TCHAR ch = _T(' ');
    
    if (_fNbspMode)
    {
        hr = THR(FlushNbsp(pNode));
        if (hr)
            goto Cleanup;
    }
    
    hr = THR(_phpxRoot->AddText(pNode, &ch, 1, TRUE));
    if (hr)
        goto Cleanup;

Cleanup:
    RRETURN(hr);
}

//+----------------------------------------------------------------------------
//
//  Methods:    CHtmTextParseCtx::BeginElement
//              CHtmTextParseCtx::EndElement
//
//  Synopsis:   Tag handling for CHtmTextParseCtx
//
//              In addition to driving space collapsing logic for
//              CHtmSpaceParseCtx, this code also
//
//              1. drives the nbsp eater to absorb lone nbsps in certain
//                 situations (while setting _fBreakOnEmpty)
//
//              2. places embedding characters underneath certain elements
//
//-----------------------------------------------------------------------------

HRESULT
CHtmTextParseCtx::BeginElement(CTreeNode **ppNodeNew, CElement *pel, CTreeNode *pNodeCur, BOOL fEmpty)
{
    HRESULT hr;
    ULONG fillcode;
    ELEMENT_TAG etag;

    etag = pel->Tag();

    // 1. Flush any nbsp that we might have been saving

    if (_fNbspMode)
    {
        if (etag == ETAG_BR)
        {
            AbsorbNbsp();
        }
        else if (!DoesNotDisturbNbspEating(etag))
        {
            hr = THR(FlushNbsp(pNodeCur));
            if (hr)
                goto Cleanup;
        }
    }
    
    // 2. Deal with space collapsing before begin tag
    
    fillcode = FillCodeFromEtag(etag);
    hr = THR(LFill(FILL_LB(fillcode)));
    if (hr)
        goto Cleanup;
   
    // 3. Put element into tree

    hr = THR(super::BeginElement(ppNodeNew, pel, pNodeCur, fEmpty));
    if (hr)
        goto Cleanup;

    // 4. Deal with space collapsing after begin tag

    RFill(FILL_RB(fillcode), fEmpty ? pNodeCur : *ppNodeNew);

    // 5. If element is of a current class, try to eat the next nbsp

    if( _fNbspMode )
    {
        // If we're eating an nbsp but haven't seen a begin/end yet, 
        if( _fHaveNbsp && !_ptpAfterNbsp )
        {
            SetNbspPos( (*ppNodeNew)->GetBeginPos() );
        }
        else if ( ShouldEatNbsp(etag) )
        {
            // Otherwise if we need to eat an nbsp, let's do that
            BeginNbspEater(*ppNodeNew);
        }
    }
 
Cleanup:
    RRETURN(hr);
}

HRESULT
CHtmTextParseCtx::EndElement(CTreeNode **ppNodeNew, CTreeNode *pNodeCur, CTreeNode *pNodeEnd)
{
    ULONG fillcode;
    HRESULT hr;

    // 1. Flush or absorb any nbsp that we might have been saving
    
    if (_fNbspMode)
    {
        if (MatchNbspNode(pNodeEnd))
        {
            AbsorbNbsp();
        }
        else if (!DoesNotDisturbNbspEating(pNodeEnd->Tag()))
        {
            hr = THR(FlushNbsp(pNodeCur));
            if (hr)
                goto Cleanup;
        }
    }

    // 2. Deal with whitespace to the left
    
    fillcode = FillCodeFromEtag(pNodeEnd->Tag());
    hr = THR(LFill(FILL_LE(fillcode)));
    if (hr)
        goto Cleanup;

    // 3. End element in tree

    hr = THR(super::EndElement(ppNodeNew, pNodeCur, pNodeEnd));
    if (hr)
        goto Cleanup;

    // 4. Deal with whitespace to the right
    
    hr = THR(RFill(FILL_RE(fillcode), *ppNodeNew));
    if (hr)
        goto Cleanup;

    if( _fNbspMode && _fHaveNbsp && !_ptpAfterNbsp )
    {
        SetNbspPos( pNodeEnd->GetEndPos() );
    }
        
Cleanup:
    RRETURN(hr);
}

HRESULT
CHtmTextParseCtx::InsertLPointer(CTreePos **pptp, CTreeNode *pNodeCur)
{
    HRESULT hr;
    
    // 1. Space eaten to the left of the beginning of a paste dealie
    
    hr = THR(LFill(FILL_EAT));
    if (hr)
        goto Cleanup;
   
    // 2. Insert LPointer

    hr = THR(super::InsertLPointer(pptp, pNodeCur));
    if (hr)
        goto Cleanup;

    // 3. Space is forced to the right of the beginning of a paste dealie

    RFill(FILL_PUT, pNodeCur);

Cleanup:
    RRETURN(hr);
}

HRESULT
CHtmTextParseCtx::InsertRPointer(CTreePos **pptp, CTreeNode *pNodeCur)
{
    HRESULT hr;
    
    // 1. Space is forced to the left of the end of a paste dealie
    
    hr = THR(LFill(FILL_PUT));
    if (hr)
        goto Cleanup;
   
    // 2. Insert RPointer

    hr = THR(super::InsertRPointer(pptp, pNodeCur));
    if (hr)
        goto Cleanup;

    // 3. Space is eaten to the right of the end pf a paste dealie

    RFill(FILL_EAT, pNodeCur);

Cleanup:
    RRETURN(hr);
}


HRESULT
CHtmTextParseCtx::Init()
{
    HRESULT hr = S_OK;
    ULONG fillcode;
    
    fillcode = FillCodeFromEtag(_etagContainer);
    hr = THR(RFill(FILL_RB(fillcode), NULL));
    if (hr)
        goto Cleanup;
    
Cleanup:
    RRETURN(hr);
}

HRESULT
CHtmTextParseCtx::Finish()
{
    HRESULT hr = S_OK;
    ULONG fillcode;
    
    fillcode = FillCodeFromEtag(_etagContainer);
    hr = THR(LFill(FILL_LE(fillcode)));
    if (hr)
        goto Cleanup;
    
Cleanup:
    RRETURN(hr);
}

CHtmTextParseCtx::~CHtmTextParseCtx()
{
#ifdef NOPARSEADDREF
    CTreeNode::ReleasePtr(_pNodeNbsp);
    CTreeNode::ReleasePtr(_ptpAfterNbsp);
#endif
}

//+----------------------------------------------------------------------------
//
//  Methods:    CHtmTextParseCtx::FlushNbsp
//              CHtmTextParseCtx::AbsorbNbsp
//              CHtmTextParseCtx::BeginNbspEater
//              CHtmTextParseCtx::AddOneNbsp
//              CHtmTextParseCtx::MatchNbspNode
//
//  Synopsis:   Basic Nbsp handling primitives for CHtmTextParseCtx 
//
//-----------------------------------------------------------------------------

// Flushes nbsp state and add stored nbsp if we had one
HRESULT
CHtmTextParseCtx::FlushNbsp(CTreeNode * pNodeCur)
{
    HRESULT hr = S_OK;
    
    if (_fHaveNbsp)
    {
        TCHAR ch = WCH_NBSP;
        Assert(_pNodeNbsp);

        if( !_ptpAfterNbsp )
        {
            // If we haven't put any nodes in after the nbsp, we can just insert
            hr = THR(_phpxRoot->AddText(pNodeCur, &ch, 1, FALSE));
            if (hr)
                goto Cleanup;
        }
        else
        {
            // Otherwise, we have to commit the parser, go back and insert the text, and then
            // spin the parser back up
            hr = THR( _pHtmParse->Commit() );
            if( hr )
                goto Cleanup;

            // We may have created an inclusion when we ended the node, 
            // so walk back to the appropriate spot
            if( _ptpAfterNbsp->IsEndNode() )
            {
                CTreePos * ptpPrev = _ptpAfterNbsp->PreviousTreePos();
                while( ptpPrev->IsNode() && !ptpPrev->IsEdgeScope() )
                {
                    Assert( ptpPrev->IsEndNode() );
                    _ptpAfterNbsp = ptpPrev;
                    ptpPrev = ptpPrev->PreviousTreePos();
                }
            }
            // CONSIDER (JHarding): May want to do this manually since we know we're inserting between 2 node pos's
            hr = THR( _ptpAfterNbsp->Branch()->GetMarkup()->InsertTextInternal( _ptpAfterNbsp, &ch, 1, 0 ) );
            if( hr )
                goto Cleanup;

            hr = THR( _pHtmParse->Prepare() );
            if( hr )
                goto Cleanup;
        }
    }

#ifdef NOPARSEADDREF
    CTreeNode::ClearPtr(&_pNodeNbsp);
    CTreeNode::ClearPtr(&_ptpAfterNbsp);
#else
    _pNodeNbsp = NULL;
    _ptpAfterNbsp = NULL;
#endif
    _fHaveNbsp = FALSE;

Cleanup:
    RRETURN(hr);
}

// Absorbs the nbsp if we have one
void
CHtmTextParseCtx::AbsorbNbsp()
{
    if (_fHaveNbsp)
    {
        Assert(_pNodeNbsp);
        
        _pNodeNbsp->Element()->_fBreakOnEmpty = TRUE;
    }
       
#ifdef NOPARSEADDREF
    CTreeNode::ClearPtr(&_pNodeNbsp);
    CTreeNode::ClearPtr(&_ptpAfterNbsp);
#else
    _pNodeNbsp = NULL;
    _ptpAfterNbsp = NULL;
#endif
    _fHaveNbsp = FALSE;
}

// Starts up our nbsp-storing state for a new nbsp-eater
void
CHtmTextParseCtx::BeginNbspEater(CTreeNode *pNode)
{
#ifdef NOPARSEADDREF
    CTreeNode::ReplacePtr(&_pNodeNbsp, pNode);
#else
    _pNodeNbsp = pNode;
#endif
    _ptpAfterNbsp = NULL;
    _fHaveNbsp = FALSE;
}


// Sets the variables that track where to put the nbsp
#if !DBG==1
inline
#endif // !DBG
void
CHtmTextParseCtx::SetNbspPos( CTreePos * ptp )
{
    Assert( ptp->IsEdgeScope() );

    _ptpAfterNbsp = ptp;
}

// Adds an nbsp - if we had one, we flush and insert this, otherwise
// we save it for later
HRESULT
CHtmTextParseCtx::AddOneNbsp(CTreeNode *pNode)
{
    HRESULT hr = S_OK;
    static TCHAR ch = WCH_NBSP;
    
    if (_fHaveNbsp)
    {
        hr = THR(FlushNbsp(pNode));
        if (hr)
            goto Cleanup;
    }

    if (_pNodeNbsp)
    {
        _fHaveNbsp = TRUE;
    }
    else
    {
        hr = THR(_phpxRoot->AddText(pNode, &ch, 1, FALSE));
        if (hr)
            goto Cleanup;
    }
    
Cleanup:
    RRETURN(hr);
}

// Is this node the one we were saving an nbsp for?
inline BOOL
CHtmTextParseCtx::MatchNbspNode(CTreeNode *pNode)
{
    return SameScope( pNode, _pNodeNbsp );
}


//+------------------------------------------------------------------------
//
//  CHtmHeadParseCtx
//
//  The top-level context for the HEAD element
//
//-------------------------------------------------------------------------

class CHtmHeadParseCtx : public CHtmTextParseCtx
{
public:
    typedef CHtmTextParseCtx super;

    DECLARE_MEMCLEAR_NEW_DELETE(Mt(CHtmHeadParseCtx));
    
    CHtmHeadParseCtx(CHtmParseCtx *phpxParent, CElement *pelTop, CHtmParse * pHtmParse);
    ~CHtmHeadParseCtx();
    
    CHtmParseCtx *GetHpxEmbed();
    
    virtual BOOL QueryTextlike(CMarkup * pMarkup, ELEMENT_TAG etag, CHtmTag *pht);
    virtual HRESULT AddText(CTreeNode *pNode, TCHAR *pch, ULONG cch, BOOL fAscii);
    virtual HRESULT BeginElement(CTreeNode **ppNodeNew, CElement *pel, CTreeNode *pNodeCur, BOOL fEmpty);
    virtual HRESULT EndElement(CTreeNode **ppNodeNew, CTreeNode *pNodeCur, CTreeNode *pNodeEnd);

    CHeadElement *  _pHeadElement;
    long            _cAccumulate;
};

//+------------------------------------------------------------------------
//
//  Function:   CreateHtmHeadParseCtx
//
//  Synopsis:   Factory
//
//-------------------------------------------------------------------------

HRESULT
CreateHtmHeadParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse)
{
    CHtmParseCtx *phpx;

    phpx = new CHtmHeadParseCtx(phpxParent, pel, pHtmParse);
    if (!phpx)
        return E_OUTOFMEMORY;

    *pphpx = phpx;
    return S_OK;
}

//+------------------------------------------------------------------------
//
//  Constant:   s_atagHeadAccept
//
//  Synopsis:   The set of tags not treated as unknowns within a head ctx.
//              Note that CHtmPost ensures that the majority of tags are
//              not even fed to the HEAD ctx.
//
//-------------------------------------------------------------------------

//ELEMENT_TAG s_atagHeadAccept[] = {ETAG_TITLE, ETAG_SCRIPT, ETAG_STYLE, ETAG_META,
//                                  ETAG_LINK, ETAG_NEXTID, ETAG_BASE_EMPTY, ETAG_BGSOUND, ETAG_OBJECT,
//                                  ETAG_NOSCRIPT, ETAG_NOEMBED, ETAG_NOFRAMES, ETAG_COMMENT, ETAG_NULL};

const ELEMENT_TAG s_atagHeadReject[] = {ETAG_NULL};
const ELEMENT_TAG s_atagHeadIgnoreEnd[] = {ETAG_HTML, ETAG_HEAD, ETAG_BODY, ETAG_NULL};


//+------------------------------------------------------------------------
//
//  Member:     CHtmHeadParseCtx::ctor
//
//  Synopsis:   first-phase construction
//
//-------------------------------------------------------------------------
CHtmHeadParseCtx::CHtmHeadParseCtx(CHtmParseCtx *phpxParent, CElement *pelTop, CHtmParse * pHtmParse)
    : CHtmTextParseCtx(phpxParent, pelTop, pHtmParse)
{
    Assert(pelTop->Tag() == ETAG_HEAD);

    _atagReject    = s_atagHeadReject;
    _atagIgnoreEnd = s_atagHeadIgnoreEnd;
    _pHeadElement  = DYNCAST(CHeadElement, pelTop);
    _pHeadElement->AddRef();
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmHeadParseCtx::ctor
//
//  Synopsis:   first-phase construction
//
//-------------------------------------------------------------------------
CHtmHeadParseCtx::~CHtmHeadParseCtx()
{
    CElement::ReleasePtr(_pHeadElement);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmHeadParseCtx::GetHpxEmbed
//
//  Synopsis:   HEAD is an embedding context
//
//-------------------------------------------------------------------------
CHtmParseCtx *
CHtmHeadParseCtx::GetHpxEmbed()
{
    return this;
}

//+------------------------------------------------------------------------
//
//  Method:     CHtmHeadParseCtx::QueryTextlike
//
//  Synopsis:   Computes if a tag should be treated as textlike in
//              the HEAD - mostly, compatibility concerns
//
//-------------------------------------------------------------------------
BOOL
CHtmHeadParseCtx::QueryTextlike(CMarkup * pMarkup, ELEMENT_TAG etag, CHtmTag *pht)
{
    Assert(!pht || pht->Is(etag));
    
    // For IE 3 compatibility:
    // an OBJECT in the HEAD is not textlike if the HEAD was explicit and /HEAD hasn't been seen yet
    if (etag == ETAG_OBJECT && !_pHeadElement->_fSynthesized && !_pHeadElement->_fExplicitEndTag)
        return FALSE;

    return _phpxParent->QueryTextlike(pMarkup, etag, pht);
}


//+----------------------------------------------------------------------------
//
//  Methods:    CHtmHeadParseCtx::BeginElement
//              CHtmHeadParseCtx::EndElement
//              CHtmHeadParseCtx::AddText
//
//  Synopsis:   Accumulate text or not based on generic elements
//
//-----------------------------------------------------------------------------

HRESULT
CHtmHeadParseCtx::BeginElement(CTreeNode **ppNodeNew, CElement *pel, CTreeNode *pNodeCur, BOOL fEmpty)
{
    if (pel->TagType() == ETAG_GENERIC)
    {
        _cAccumulate++;
    }

    if (!_cAccumulate)
    {
        RRETURN(CHtmParseCtx::BeginElement(ppNodeNew, pel, pNodeCur, fEmpty));
    }
    
    RRETURN(super::BeginElement(ppNodeNew, pel, pNodeCur, fEmpty));
}


HRESULT
CHtmHeadParseCtx::EndElement(CTreeNode **ppNodeNew, CTreeNode *pNodeCur, CTreeNode *pNodeEnd)
{
    if (pNodeEnd->TagType() == ETAG_GENERIC)
    {
        _cAccumulate--;
    }
        
    RRETURN(super::EndElement(ppNodeNew, pNodeCur, pNodeEnd));
}

HRESULT 
CHtmHeadParseCtx::AddText(CTreeNode *pNode, TCHAR *pch, ULONG cch, BOOL fAscii) 
{ 
    if (!_cAccumulate)
    {
        Assert(IsAllSpaces(pch, cch)); 
        return S_OK; 
    }

    RRETURN(super::AddText(pNode, pch, cch, fAscii));
}



//+------------------------------------------------------------------------
//
//  Function:   TagPreservationType
//
//  Synopsis:   Describes how white space is handled in this tag
//
//-------------------------------------------------------------------------

WSPT
TagPreservationType ( ELEMENT_TAG etag )
{
    switch ( etag )
    {
    case ETAG_PRE :
    case ETAG_PLAINTEXT :
    case ETAG_LISTING :
    case ETAG_XMP :
    case ETAG_TEXTAREA:
    case ETAG_INPUT:
        return WSPT_PRESERVE;

    case ETAG_TD :
    case ETAG_TH :
    case ETAG_TC :
    case ETAG_CAPTION :
    case ETAG_BODY :
    case ETAG_ROOT :
    case ETAG_BUTTON :
#ifdef  NEVER
    case ETAG_HTMLAREA :
#endif
        return WSPT_COLLAPSE;

    default:
        return WSPT_NEITHER;
    }
}

//+----------------------------------------------------------------------------
//
//  CHtmBodyParseCtx
//
//  Synopsis:   This class extends CHtmTextParseCtx so that it knows
//              when to insert an automatic character under an element
//
//-----------------------------------------------------------------------------

class CHtmBodyParseCtx : public CHtmTextParseCtx
{
public:

    typedef CHtmTextParseCtx super;

    DECLARE_MEMCLEAR_NEW_DELETE(Mt(CHtmBodyParseCtx))

    CHtmBodyParseCtx(CHtmParseCtx *phpxParent, CElement *pel, CHtmParse * pHtmParse) : CHtmTextParseCtx(phpxParent, pel, pHtmParse) { };
    
    virtual BOOL QueryTextlike(CMarkup * pMarkup, ELEMENT_TAG etag, CHtmTag *pht);
    
    CHtmParseCtx *GetHpxEmbed();
    
private:

    CHtmParseCtx *_phpxParent;
};

//+----------------------------------------------------------------------------
//
//  Function:   CreateHtmBodyParseContext
//
//  Synopsis:   Factory
//
//-----------------------------------------------------------------------------

HRESULT
CreateHtmBodyParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse)
{
    CHtmParseCtx *phpx;

    phpx = new CHtmBodyParseCtx(phpxParent, pel, pHtmParse);
    
    if (!phpx)
        return E_OUTOFMEMORY;

    *pphpx = phpx;

    return S_OK;
}


CHtmParseCtx *
CHtmBodyParseCtx::GetHpxEmbed()
{
    return this;
}


//+----------------------------------------------------------------------------
//
//  Function:   QueryTextlike
//
//  Synopsis:   Determines if TEXTLIKE_QUERY tags are textlike in the body
//              or not
//
//-----------------------------------------------------------------------------
BOOL
CHtmBodyParseCtx::QueryTextlike(CMarkup * pMarkup, ELEMENT_TAG etag, CHtmTag *pht)
{
    switch(etag)
    {
        case ETAG_INPUT:
        case ETAG_OBJECT:
        case ETAG_APPLET:
        case ETAG_A:
        case ETAG_DIV:
        case ETAG_SPAN:
        
            // Inside the body, INPUTs, OBJECTs, APPLETs, and As are always textlike

            return TRUE;

        default:

            // Everything else marked textlike_query is not.

            return FALSE;
    }
}
            

#if 0
//+----------------------------------------------------------------------------
//
//  Function:   InPre
//
//  Synopsis:   This computes the pre status of a branch after an element goes
//              out of scope.  The branch before the element goes out of scope
//              is passed in, as well as the element going out of scope.
//
//-----------------------------------------------------------------------------

CTreeNode *
InPre(CTreeNode * pNodeCur, CTreeNode * pNodeEnd)
{
    CTreeNode *pNode;

    for ( pNode = pNodeCur ; pNode ; pNode = pNode->Parent() )
    {
        if (!pNodeEnd || DifferentScope( pNode, pNodeEnd ))
        {
            switch ( TagPreservationType( pNode->Tag()) )
            {
            case WSPT_PRESERVE : return pNode;
            case WSPT_COLLAPSE : return NULL;
            case WSPT_NEITHER  : break;
            default            : Assert( 0 );
            }
        }
    }

    return NULL;
}
#endif

//+----------------------------------------------------------------------------
//
//  Class:      CHtmPreParseCtx
//
//  Synopsis:   For preformatted areas of text in which we should not
//              collapse any spaces, like in <PRE>s
//
//-----------------------------------------------------------------------------
class CHtmPreParseCtx : public CHtmCrlfParseCtx
{
    typedef CHtmCrlfParseCtx super;

public:

    DECLARE_MEMCLEAR_NEW_DELETE(Mt(CHtmPreParseCtx))

    CHtmPreParseCtx(CHtmParseCtx *phpxParent);
            
    virtual HRESULT BeginElement(CTreeNode **ppNodeNew, CElement *pel, CTreeNode *pNodeCur, BOOL fEmpty);
    virtual HRESULT EndElement(CTreeNode **ppNodeNew, CTreeNode *pNodeCur, CTreeNode *pNodeEnd);
    virtual HRESULT AddNonspaces(CTreeNode *pNode, TCHAR *pch, ULONG cch, BOOL fAscii);
    virtual HRESULT AddSpaces(CTreeNode *pNode, TCHAR *pch, ULONG cch);

    inline void FlushLine(CTreeNode *pNodeCur);

private:
    BOOL _fInside;
    CHtmParseCtx *_phpxRoot;
};

HRESULT
CreateHtmPreParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse)
{
    CHtmParseCtx *phpx;

    phpx = new CHtmPreParseCtx(phpxParent);
    
    if (!phpx)
        return E_OUTOFMEMORY;

    Assert(pel->GetFirstBranch());
    pel->GetFirstBranch()->SetPre(TRUE);

    *pphpx = phpx;

    return S_OK;
}

CHtmPreParseCtx::CHtmPreParseCtx(CHtmParseCtx *phpxParent) : CHtmCrlfParseCtx(phpxParent)
{
    _atagReject    = s_atagTextReject;
    _atagIgnoreEnd = s_atagTextIgnoreEnd;
    
    _phpxRoot = GetHpxRoot();
}


//+----------------------------------------------------------------------------
//
//  Method:     CHtmPreParseCtx::FlushLine
//
//  Synopsis:   Used to a line if we've been saving one (disabled for
//              infoseek.htm robovision compat - it's not correct to
//              drop the last \r in a PRE.)
//
//              Now, simply notes that we're past the first \r in a pre.
//              (The first \r still needs to be dropped.)
//
//-----------------------------------------------------------------------------
void
CHtmPreParseCtx::FlushLine(CTreeNode *pNodeCur)
{
    _fInside = TRUE;
}

//+----------------------------------------------------------------------------
//
//  Methods:    CHtmPreParseCtx::EmptyElement
//              CHtmPreParseCtx::BeginElement
//              CHtmPreParseCtx::EndElement
//              CHtmPreParseCtx::AddNonspaces
//
//  Synopsis:   Flush a saved line before any element boundary or text
//
//-----------------------------------------------------------------------------
HRESULT
CHtmPreParseCtx::BeginElement(CTreeNode **ppNodeNew, CElement *pel, CTreeNode *pNodeCur, BOOL fEmpty)
{
    FlushLine(pNodeCur);

    pNodeCur->SetPre(TRUE);
        
    RRETURN(super::BeginElement(ppNodeNew, pel, pNodeCur, fEmpty));
}

HRESULT
CHtmPreParseCtx::EndElement(CTreeNode **ppNodeNew, CTreeNode *pNodeCur, CTreeNode *pNodeEnd)
{
    FlushLine(pNodeCur);
        
    RRETURN(super::EndElement(ppNodeNew, pNodeCur, pNodeEnd));
}

HRESULT
CHtmPreParseCtx::AddNonspaces(CTreeNode *pNode, TCHAR *pch, ULONG cch, BOOL fAscii)
{
    FlushLine(pNode);
        
    RRETURN(_phpxRoot->AddText(pNode, pch, cch, fAscii));
}

//+----------------------------------------------------------------------------
//
//  Method:     CHtmPreParseCtx::AddSpaces
//
//  Synopsis:   Drop first character in the pre if it is a \r
//
//-----------------------------------------------------------------------------

HRESULT
CHtmPreParseCtx::AddSpaces(CTreeNode *pNode, TCHAR *pch, ULONG cch)
{
    HRESULT hr = S_OK;

    Assert(cch > 0);
    
    // Eat first carriage return in pre if any

    if (!_fInside && *pch == _T('\r'))
    {
        pch++;
        cch--;
    }

    FlushLine(pNode);

    // Send the rest of the text into the tree

    if (cch)
    {
        hr = THR(_phpxRoot->AddText(pNode, pch, cch, TRUE));
        if (hr)
            goto Cleanup;
    }
    
Cleanup:
    RRETURN(hr);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\display\regionstack.cxx ===
//+---------------------------------------------------------------------------
//
//  Microsoft Internet Explorer
//  Copyright (C) Microsoft Corporation, 1997-1998
//
//  File:       regionstack.cxx
//
//  Contents:   Store regions associated with particular display nodes.
//
//  Classes:    CRegionStack
//
//----------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_REGIONSTACK_HXX_
#define X_REGIONSTACK_HXX_
#include "regionstack.hxx"
#endif


//+---------------------------------------------------------------------------
//
//  Member:     CRegionStack::CRegionStack
//              
//  Synopsis:   Constructor that creates a new region stack clipped to the
//              given band rectangle.
//              
//  Arguments:  rgnStack        region stack to copy
//              rcgBand          band rectangle to clip regions
//              
//  Notes:      
//              
//----------------------------------------------------------------------------


CRegionStack::CRegionStack(const CRegionStack& rgnStack, const CRect& rcgBand)
{
    _stackIndex = 0;
    
    // copy regions that intersect the band
    for (int i = 0; i < rgnStack._stackMax; i++)
    {
        // unless the bounds of an opaque item intersects this band, we're not
        // interested
        if (rcgBand.Intersects(rgnStack._stack[i]._rcgBounds))
        {
            CRegion* prgng = new CRegion(*rgnStack._stack[i]._prgng);

            if (prgng == NULL)
                break;

            prgng->Intersect(rcgBand);
            
            // believe it or not, both the opaque item's bounds AND the new
            // redraw region have to intersect this band in order for us
            // to put this entry in the stack
            if (prgng->IsEmpty())
            {
                delete prgng;
            }
            else
            {
                prgng->Offset(-rcgBand.TopLeft().AsSize());
                stackElement* p = &_stack[_stackIndex++];
                p->_prgng = prgng;
                p->_key = rgnStack._stack[i]._key;
            }
        }
    }
    
    _stackMax = _stackIndex;
}


#if DBG==1
//+---------------------------------------------------------------------------
//
//  Member:     CRegionStack::~CRegionStack
//              
//  Synopsis:   destructor
//              
//----------------------------------------------------------------------------


CRegionStack::~CRegionStack()
{
    Assert(_stackMax == 0);
}
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\download\css.cxx ===
//+------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 2000 - 2001.
//
//  File:       Css.cxx
//
//  Contents:   CCssCtx
//              CCssInfo
//              CCssLoad
//
//-------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_CSS_HXX_
#define X_CSS_HXX_
#include "css.hxx"
#endif

#ifndef X_UWININET_H_
#define X_UWININET_H_
#include "uwininet.h"
#endif

#ifndef X_MSHTMLRC_H_
#define X_MSHTMLRC_H_
#include "mshtmlrc.h"
#endif

#ifndef X_FATSTG_HXX_
#define X_FATSTG_HXX_
#include "fatstg.hxx"
#endif

#ifndef X_PRGSNK_H_
#define X_PRGSNK_H_
#include <prgsnk.h>
#endif

// Debugging ------------------------------------------------------------------
PerfDbgTag(tagCssCtx,    "Dwn",  "Trace CCssCtx")
PerfDbgTag(tagCssInfo,   "Dwn", "Trace CCssInfo")
PerfDbgTag(tagCssLoad,   "Dwn", "Trace CCssLoad")
MtDefine(CCssCtx, Dwn, "CCssCtx")
MtDefine(CCssInfo, Dwn, "CCssInfo")
MtDefine(CCssLoad, Dwn, "CCssLoad")

// CCssCtx -------------------------------------------------------------------
DWORD
CCssCtx::GetState()
{
    PerfDbgLog(tagCssCtx, this, "+CCssCtx::GetState ");

    DWORD dwState;

    EnterCriticalSection();

    dwState = _wChg;

    if (_pDwnInfo)
    {
        dwState |= _pDwnInfo->GetFlags(DWNF_STATE|DWNLOAD_HEADERS);
    }

    LeaveCriticalSection();

    PerfDbgLog1(tagCssCtx, this, "-CCssCtx::GetState (dwState=%08lX)", dwState);
    return(dwState);
}


DWORD    
CCssCtx::GetRefresh()
{
    return _pDwnInfo->GetRefresh();
}

DWORD    
CCssCtx::GetBindf()
{
    return _pDwnInfo->GetBindf();
}


void
CCssCtx::SelectChanges(ULONG ulChgOn, ULONG ulChgOff, BOOL fSignal)
{

    WORD wNewChg = 0;
    
    EnterCriticalSection();

    _wChgReq &= (WORD)~ulChgOff;

    if (    fSignal
        &&  !(_wChgReq & DWNCHG_HEADERS)
        &&  (ulChgOn & DWNCHG_HEADERS)
        &&  GetDwnInfo()->TstFlags(DWNLOAD_HEADERS))
    {
        wNewChg |= DWNCHG_HEADERS;
    }

    if (    fSignal
        &&  !(_wChgReq & DWNCHG_COMPLETE)
        &&  (ulChgOn & DWNCHG_COMPLETE)
        &&  GetDwnInfo()->TstFlags(DWNLOAD_COMPLETE))
    {
        wNewChg |= DWNCHG_COMPLETE;
    }

    _wChgReq |= (WORD)ulChgOn;
    
    if (wNewChg)
    {
        Signal(wNewChg);
    }

    LeaveCriticalSection();
}



// CCssInfo ------------------------------------------------------------------
HRESULT
CCssInfo::NewDwnCtx(CDwnCtx ** ppDwnCtx)
{
    *ppDwnCtx = new CCssCtx;
    RRETURN(*ppDwnCtx ? S_OK : E_OUTOFMEMORY);
}

HRESULT
CCssInfo::NewDwnLoad(CDwnLoad ** ppDwnLoad)
{
    *ppDwnLoad = new CCssLoad;
    RRETURN(*ppDwnLoad ? S_OK : E_OUTOFMEMORY);
}


void
CCssInfo::OnLoadDone(HRESULT hrErr)
{
    PerfDbgLog1(tagCssInfo, this, "+CCssInfo::OnLoadDone (hrErr=%lX)", hrErr);

    Assert(EnteredCriticalSection());

    UpdFlags(DWNLOAD_MASK|DWNLOAD_HEADERS, !hrErr ? DWNLOAD_COMPLETE : DWNLOAD_ERROR);
    Signal(DWNCHG_COMPLETE);

    PerfDbgLog(tagCssInfo, this, "-CCssInfo::OnLoadDone");
}


void  
CCssInfo::OnLoadHeaders(HRESULT hrErr)
{
    PerfDbgLog1(tagCssInfo, this, "+CCssInfo::OnHeadersDone (hrErr=%lX)", hrErr);

    Assert(!EnteredCriticalSection());

    EnterCriticalSection();

    UpdFlags(DWNLOAD_MASK|DWNLOAD_HEADERS, !hrErr ? DWNLOAD_HEADERS : DWNLOAD_ERROR);
    Signal(DWNCHG_HEADERS);
    
    LeaveCriticalSection();

    PerfDbgLog(tagCssInfo, this, "-CCssInfo::OnHeadersDone");
}



// CCssLoad ---------------------------------------------------------------
HRESULT 
CCssLoad::OnHeaders(HRESULT hrErr)
{
    GetCssInfo()->OnLoadHeaders(hrErr);
    return S_OK;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\display\transform.cxx ===
//+---------------------------------------------------------------------------
//
//  Microsoft Internet Explorer
//  Copyright (C) Microsoft Corporation, 1997-1998
//
//  File:       transform.cxx
//
//  Contents:   Transformation classes.
//
//  Classes:    CWorldTransform, CDocScaleInfo
//
//----------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_TRANSFORM_HXX_
#define X_TRANSFORM_HXX_
#include "transform.hxx"
#endif



//++--------------------------------------------------------------------------
///  Member:     CWorldTransform::Init
//++---------------------------------------------------------------------------
void 
CWorldTransform::Init(const CWorldTransform * pTransform)
{
    _fUseMatrix = pTransform->_fUseMatrix;
    if (_fUseMatrix)
    {
        _ang     = pTransform->_ang;
#if DBG==1
        _ptSrcRot= pTransform->_ptSrcRot;
#endif //DBG
        _mat     = pTransform->_mat;
        _matInverse = pTransform->_matInverse;
    }
    else
    {
        _offset = pTransform->_offset;
    }

    IF_DBG(ValidateTransform());
}

//++--------------------------------------------------------------------------
///  Member:     CWorldTransform::Init
//++---------------------------------------------------------------------------
void 
CWorldTransform::Init(const MAT * pMatrix)
{
    SetToIdentity();
    
    _mat = *pMatrix;
    _matInverse = _mat;
    _matInverse.Inverse();
    _fUseMatrix = TRUE;
    
    IF_DBG(ValidateTransform());
}

//++--------------------------------------------------------------------------
///  Member:     CWorldTransform::GetOffsetDst
//++--------------------------------------------------------------------------
void 
CWorldTransform::GetOffsetDst(CPoint *ppt) const
{
    IF_DBG(ValidateTransform());
    
    if (_fUseMatrix)
    {
        //dmitryt: Can't return this. It's mixed into matrix. Fix the code using it later
        //$REVIEW (azmyh): This gets the overall translation effect of the transformation, 
        // not the translation component, translation effect due to rotation should be accounted for.
        CPoint p(0,0);
        Transform(&p);
        *ppt = p;
    }
    else
    {
        *ppt = _offset.AsPoint();
    }
}

//++--------------------------------------------------------------------------
///  Member:     CWorldTransform::Reverse
///  Synopsis:   Convert transformation to the opposite of itself
//++--------------------------------------------------------------------------
void
CWorldTransform::Reverse()
{
    if (_fUseMatrix)
    {
        // reverse rotation
        _ang = -_ang;
        MAT matT = _mat;
        _mat = _matInverse;
        _matInverse = matT;
    }
    else
    {
        _offset = -_offset;
    }

    IF_DBG(ValidateTransform());
};

//++--------------------------------------------------------------------------
/// Member:     CWorldTransform::AddPostTransform
/// Synopsis:   Combine two transformations. 
///             Offsets add, angles add, scaling and rotation multiply.
/// Note:       Order of transforms: 'this' first, 'ptransform' second.
//++--------------------------------------------------------------------------
void CWorldTransform::AddPostTransform(const CWorldTransform *ptransform)
{
    if (ptransform->_fUseMatrix)    
    {
        if (!_fUseMatrix)
        {
            // Current matrix is unused, just use the other matrix
            _ang     = 0;
#if DBG==1
            _ptSrcRot= g_Zero.pt;
#endif //DBG
            _mat.InitTranslation(_offset.cx,_offset.cy);
            _matInverse.InitTranslation(-_offset.cx,-_offset.cy);
            _fUseMatrix = TRUE;
        }

        // REVIEW azmyh: if the rotation center of both transforms are not the same
        // then the angle and center of the resultant transform are undefined
        _ang += ptransform->_ang;
#if DBG==1
        _ptSrcRot = ptransform->_ptSrcRot;
#endif //DBG
        _mat.CombinePostTransform(&ptransform->_mat);
        _matInverse.CombinePreTransform(&ptransform->_matInverse);
    }
    else // ptransform is just an offset
    {
        if(!_fUseMatrix)
        {
            _offset += ptransform->_offset;
        }
        else
        {
            _mat.CombinePostTranslation(ptransform->_offset.cx,ptransform->_offset.cy);
            _matInverse.CombinePreTranslation(-ptransform->_offset.cx,-ptransform->_offset.cy);
        }
    }

    IF_DBG(ValidateTransform());
}

//++--------------------------------------------------------------------------
/// Member:     CWorldTransform::AddPreTransform
/// Synopsis:   Combine two transformations. 
///             Offsets add, angles add, scaling and rotation multiply.
/// Note:       Order of transforms: 'ptransform' first, 'this' second.
//++--------------------------------------------------------------------------
void CWorldTransform::AddPreTransform(const CWorldTransform *ptransform)
{
    if (ptransform->_fUseMatrix)    
    {
        if (!_fUseMatrix)
        {
            // Current matrix is unused, just use the other matrix
            _ang     = 0;
#if DBG==1
            _ptSrcRot= g_Zero.pt;
#endif //DBG            
            _mat.InitTranslation(_offset.cx,_offset.cy);
            _matInverse.InitTranslation(-_offset.cx,-_offset.cy);
            _fUseMatrix = TRUE;
        }

        // REVIEW azmyh: if the rotation center of both transforms are not the same
        // then the angle and center of the resultant transform are undefined
        _ang += ptransform->_ang;

        _mat.CombinePreTransform(&ptransform->_mat);
        _matInverse.CombinePostTransform(&ptransform->_matInverse);
    }
    else // ptransform is just an offset
    {
        if(!_fUseMatrix)
        {
            _offset += ptransform->_offset;
        }
        else
        {
            _mat.CombinePreTranslation(ptransform->_offset.cx,ptransform->_offset.cy);
            _matInverse.CombinePostTranslation(-ptransform->_offset.cx,-ptransform->_offset.cy);
        }
    }

    IF_DBG(ValidateTransform());
}

//++--------------------------------------------------------------------------
/// Member:     CWorldTransform::GetBoundingRectAfterTransform
/// Synopsis:   Calculates the bounding Rect of prcSrc after transformation
//++--------------------------------------------------------------------------
void
CWorldTransform::GetBoundingRectAfterTransform(const CRect *prcSrc, CRect *prcBound, BOOL fRoundOut) const
{
    *prcBound = *prcSrc;
    if (_fUseMatrix)
        _mat.GetBoundingRectAfterTransform(prcBound, fRoundOut);
    else
        prcBound->OffsetRect(_offset);
}

//++--------------------------------------------------------------------------
/// Member:     CWorldTransform::GetBoundingRectAfterInverseTransform
/// Synopsis:   Calculates the bounding Rect of prcSrc after inverse transformation
//++--------------------------------------------------------------------------
void
CWorldTransform::GetBoundingRectAfterInverseTransform(const CRect *prcSrc, CRect *prcBound, BOOL fRoundOut) const
{
    *prcBound = *prcSrc;
    if (_fUseMatrix)
        _matInverse.GetBoundingRectAfterTransform(prcBound, fRoundOut);
    else
        prcBound->OffsetRect(-_offset);
}

//++--------------------------------------------------------------------------
/// Member:     CWorldTransform::GetBoundingSizeAfterTransform
/// Synopsis:   Calculates the bounding Rect of prcSrc after transformation
//++--------------------------------------------------------------------------
void
CWorldTransform::GetBoundingSizeAfterTransform(const CRect *prcSrc, CSize *pSize) const
{
    if (_fUseMatrix)
    {
        CRect rcBound(*prcSrc);
        _mat.GetBoundingRectAfterTransform(&rcBound, FALSE /*changed from TRUE for bug 93619*/);
        pSize->cx = rcBound.Width();
        pSize->cy = rcBound.Height();
    }
    else
    {
        pSize->cx = prcSrc->Width();
        pSize->cy = prcSrc->Height();
    }
}

//++--------------------------------------------------------------------------
/// Member:     CWorldTransform::GetBoundingSizeAfterInverseTransform
/// Synopsis:   Calculates the bounding Rect of prcSrc after inverse transformation
//++--------------------------------------------------------------------------
void
CWorldTransform::GetBoundingSizeAfterInverseTransform(const CRect *prcSrc, CSize *pSize) const
{
    if (_fUseMatrix)
    {
        CRect rcBound(*prcSrc);
        _matInverse.GetBoundingRectAfterTransform(&rcBound, FALSE /*changed from TRUE for bug 93619*/);
        pSize->cx = rcBound.Width();
        pSize->cy = rcBound.Height();
    }
    else
    {
        pSize->cx = prcSrc->Width();
        pSize->cy = prcSrc->Height();
    }
}

//++--------------------------------------------------------------------------
/// Member:     CWorldTransform::AddScaling
/// Synopsis:   Add a post scaling fraction to the current transform
//++--------------------------------------------------------------------------
void
CWorldTransform::AddScaling(FLOAT scaleX, FLOAT scaleY)
{
    AssertSz(scaleX == scaleY, "Anisotrpic scaling is not supported");

    // Multiply scales
    if (scaleX != 1.0 /* || scaleY != 1.0 */)    
    {
        if (!_fUseMatrix)
        {
            _ang = 0; // angle was unused while _fUseMatrix was false
            _mat.InitTranslation(_offset.cx,_offset.cy);
            _matInverse.InitTranslation(-_offset.cx,-_offset.cy);
            _fUseMatrix = TRUE;
        }

        _mat.CombinePostScaling(scaleX, scaleY);
        _matInverse.CombinePreScaling(1./scaleX, 1./scaleY);
    }

    IF_DBG(ValidateTransform());
}


//++--------------------------------------------------------------------------
/// Member:     CWorldTransform::AddRotation
/// Synopsis:   Add a post rotation to the current transform
//++--------------------------------------------------------------------------
void
CWorldTransform::AddRotation(ANG ang)
{
    if (ang)
    {
        if(!_fUseMatrix)
        {
            _mat.InitTranslation(_offset.cx,_offset.cy);
            _matInverse.InitTranslation(-_offset.cx,-_offset.cy);
            _ang = 0;
            _fUseMatrix = TRUE;
        }

        CPoint ptSrcRot(0, 0);
#if DBG==1
        _ptSrcRot = ptSrcRot;  //undefined if we have an offset between rotations,
                               //use the center of the last rotation for debugging puposes.
#endif //DBG
        _ang += ang;

        MAT m;
        m.InitFromPtAng(ptSrcRot, ang);
        _mat.CombinePostTransform(&m);

        //dmitryt: we are guaranteed the existence of reverse matrix
        //         here because rotation matrix always has det = 1 (cos^2 + sin^2)
        //m.Inverse();    
        m.InitFromPtAng(ptSrcRot, -ang);
        _matInverse.CombinePreTransform(&m);
    }

    IF_DBG(ValidateTransform());
}


//++--------------------------------------------------------------------------
/// Member:     CWorldTransform::AddRotation
/// Synopsis:   Add a post rotation to the current transform
//++--------------------------------------------------------------------------
void
CWorldTransform::AddRotation(const CRect *prcSrc, ANG ang)
{
    if (ang)
    {
        if(!_fUseMatrix)
        {
            _mat.InitTranslation(_offset.cx,_offset.cy);
            _matInverse.InitTranslation(-_offset.cx,-_offset.cy);
            _ang = 0;
            _fUseMatrix = TRUE;
        }

        CPoint ptSrcRot((prcSrc->left + prcSrc->right) / 2, (prcSrc->top + prcSrc->bottom) / 2);
#if DBG==1
        _ptSrcRot = ptSrcRot;  //undefined if we have an offset between rotations,
                               //use the center of the last rotation for debugging puposes.
#endif //DBG
        _ang += ang;

        MAT m;
        m.InitFromPtAng(ptSrcRot, ang);
        _mat.CombinePostTransform(&m);

        //dmitryt: we are guaranteed the existence of reverse matrix
        //         here because rotation matrix always has det = 1 (cos^2 + sin^2)
        //m.Inverse();    
        m.InitFromPtAng(ptSrcRot, -ang);
        _matInverse.CombinePreTransform(&m);
    }

    IF_DBG(ValidateTransform());
}

//++--------------------------------------------------------------------------
/// Member:     CWorldTransform::ShiftMatrixOrigin
/// Synopsis:   Shifts the origin of the current transformation matrix
//++--------------------------------------------------------------------------
void
CWorldTransform::ShiftMatrixOrigin(const CSize& offset)
{
    if (_fUseMatrix)
    {
        _mat.CombinePreTranslation(offset.cx, offset.cy);
        _mat.CombinePostTranslation(-offset.cx, -offset.cy);

        _matInverse.CombinePostTranslation(-offset.cx, -offset.cy);
        _matInverse.CombinePreTranslation(offset.cx, offset.cy);
    }

    IF_DBG(ValidateTransform());
}

const MAT& CWorldTransform::GetMatrix() const
{ 
    if(!_fUseMatrix)
        const_cast<MAT &>(_mat).InitTranslation(_offset.cx,_offset.cy);
    return _mat; 
}


const MAT& CWorldTransform::GetMatrixInverse() const
{ 
    if(!_fUseMatrix)
        const_cast<MAT &>(_matInverse).InitTranslation(-_offset.cx,-_offset.cy);
    return _matInverse; 
}

#if DBG==1
bool AreAnglesEqual(ANG a1, ANG a2)
{
    return (a1-a2)%3600 == 0;
}

void CWorldTransform::ValidateTransform() const
{
    if (_fUseMatrix)
    {
#ifdef OPTIMIZE_MATRIX // we can optimize transform to remove matrix when it is not needed
        AssertSz(_mat.eM11 != 1.0
              || _mat.eM12 != 0.0
              || _mat.eM21 != 0.0
              || _mat.eM22 != 1.0, "_fUseMatrix set for offset-only matrix");
#endif
              
        AssertSz(!_fUseMatrix || AreAnglesEqual(_ang, _mat.GetAng()), "_ang not is sync with _mat");
        _mat.AssertValid();
    }
    else
    {
        Assert(_ang == 0);  // Angle should not be unititialized when matrix is not used.
    }
}
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\download\dither.cxx ===
#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_DITHERS_H_
#define X_DITHERS_H_
#include "dithers.h"
#endif

#ifndef X_OCMM_H_
#define X_OCMM_H_
#include "ocmm.h"
#endif

#ifndef X_SHLOBJ_H_
#define X_SHLOBJ_H_
#include "shlobj.h"
#endif

#ifndef X_SHLOBJP_H_
#define X_SHLOBJP_H_
#include "shlobjp.h"
#endif

#ifndef X_SHLGUID_H_
#define X_SHLGUID_H_
#include "shlguid.h"
#endif

#ifndef WIN16
#ifndef X_SHLGUIDP_H_
#define X_SHLGUIDP_H_
#include "shlguidp.h"
#endif
#endif

#if DBG==1
#define INLINE
#else
#define INLINE __inline
#endif

MtExtern(Dwn)
MtDefine(ImgDithBufs, Dwn, "AllocDitherBuffers")
MtDefine(CIntDitherer, Dwn, "CIntDitherer")

//-----------------------------------------------------------------------------
// helpers
//-----------------------------------------------------------------------------

const BYTE g_abClamp[] = {
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,
32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,
64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,
96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,
128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,
160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,
192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,
224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,
};

INLINE UINT Clamp8(int z)
{
#if DBG==1
    UINT t = (z & 0xff00) ? (0xff & ~(z >> 16)) : z;

    if (t != g_abClamp[z + 256])
        DebugBreak();
#endif

    return g_abClamp[z + 256];
}

INLINE WORD rgb555(BYTE r, BYTE g, BYTE b)
{
    return( WORD( ((((WORD)(r) << 5) | (WORD)(g)) << 5) | (WORD)(b) ) );
}

INLINE WORD rgb565(BYTE r, BYTE g, BYTE b)
{
//    return( WORD( ((((WORD)(r) << 5) | (WORD)(g)) << 6) | (WORD)(b) ) );
//    return( WORD( ((((WORD)(r) << 6) | (WORD)((g << 1) | !!(g > 16))) << 5) | (WORD)(b) ) );
    return((WORD)(((((((WORD)(r) << 5) | (WORD)(g)) << 1) | (WORD)((g) > 16)) << 5) | (WORD)(b)));
}

//-----------------------------------------------------------------------------
// Halftoning stuff
//-----------------------------------------------------------------------------
//
// This table is used to halftone from 8 to 5 bpp.  Typically, 16 bit
// halftoning code will map an 8 bit value to a 5 bit value, map it back to
// 8 bits, compute some error, and use a halftone table to adjust the 5 bit
// value for the error.  This array is a concatenation of 8 different 8-to-5
// tables that include the error factoring in their mapping.  It is used with
// the halftoning table below, which gives indices to each of the mapping
// tables within the array.   Given the correct table pointer for a pixel,
// callers can perform a single lookup per color component in this table to get
// a halftoned 5 bit component.
//
#pragma data_seg(".text", "CODE")
const BYTE aHT16Data[] =
{
      0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,
      1,  1,  1,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  2,  2,
      3,  3,  3,  3,  3,  3,  3,  3,  4,  4,  4,  4,  4,  4,  4,  4,
      5,  5,  5,  5,  5,  5,  5,  5,  6,  6,  6,  6,  6,  6,  6,  6,
      7,  7,  7,  7,  7,  7,  7,  7,  8,  8,  8,  8,  8,  8,  8,  8,
      9,  9,  9,  9,  9,  9,  9,  9, 10, 10, 10, 10, 10, 10, 10, 10,
     11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12,
     13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14,
     15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16,
     17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18,
     19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20,
     21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22,
     23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24,
     25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26,
     27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28,
     29, 29, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 30, 30, 31,
      0,  0,  0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  1,
      1,  1,  1,  1,  1,  1,  1,  2,  2,  2,  2,  2,  2,  2,  2,  3,
      3,  3,  3,  3,  3,  3,  3,  4,  4,  4,  4,  4,  4,  4,  4,  5,
      5,  5,  5,  5,  5,  5,  5,  6,  6,  6,  6,  6,  6,  6,  6,  7,
      7,  7,  7,  7,  7,  7,  7,  8,  8,  8,  8,  8,  8,  8,  8,  9,
      9,  9,  9,  9,  9,  9,  9, 10, 10, 10, 10, 10, 10, 10, 10, 11,
     11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 13,
     13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 15,
     15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 17,
     17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 19,
     19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 21,
     21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 23,
     23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 25,
     25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 27,
     27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29,
     29, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 30, 30, 30, 31,
     31, 31, 31, 31, 31, 31
};
const UINT aHT16Heads[4][4] =
{
    262, 256, 261,   0,
    258, 260, 257, 259,
    261,   0, 262, 256,
    257, 259, 258, 260,
};
#pragma data_seg()

INLINE UINT *
Get555HalftoneRow(UINT y)
{
    return (UINT*) (aHT16Heads[y % 4]);
}

INLINE BYTE *
Get555HalftoneTable(UINT *row, UINT x)
{
    return (BYTE*) (aHT16Data + row[x % 4]);
}

//-----------------------------------------------------------------------------
// Rounding stuff
//-----------------------------------------------------------------------------
//
// round an 8bit value to a 5bit value with good distribution
//
#pragma data_seg(".text", "CODE")
const BYTE aRound8to5[] = {
      0,  0,  0,  0,  0,  1,  1,  1,  1,  1,  1,  1,  1,  2,  2,  2,
      2,  2,  2,  2,  2,  3,  3,  3,  3,  3,  3,  3,  3,  4,  4,  4,
      4,  4,  4,  4,  4,  4,  5,  5,  5,  5,  5,  5,  5,  5,  6,  6,
      6,  6,  6,  6,  6,  6,  7,  7,  7,  7,  7,  7,  7,  7,  8,  8,
      8,  8,  8,  8,  8,  8,  9,  9,  9,  9,  9,  9,  9,  9,  9, 10,
     10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 12,
     12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13,
     14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15,
     16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17,
     18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19,
     19, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21,
     21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23,
     23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25,
     25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27,
     27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29,
     29, 29, 29, 30, 30, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31,
};
#pragma data_seg()

#pragma data_seg(".text", "CODE")
const BYTE aRound8to6[] =
{
  0,  0,  0,  0,  0,  1,  1,  1,  1,  2,  2,  2,  2,  3,  3,  3,
  3,  4,  4,  4,  4,  5,  5,  5,  5,  6,  6,  6,  6,  7,  7,  7,
  7,  8,  8,  8,  8,  9,  9,  9,  9, 10, 10, 10, 10, 11, 11, 11,
 11, 12, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 14, 15, 15, 15,
 15, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19,
 19, 20, 20, 20, 20, 21, 21, 21, 21, 21, 22, 22, 22, 22, 23, 23,
 23, 23, 24, 24, 24, 24, 25, 25, 25, 25, 26, 26, 26, 26, 27, 27,
 27, 27, 28, 28, 28, 28, 29, 29, 29, 29, 30, 30, 30, 30, 31, 31,
 31, 31, 32, 32, 32, 32, 33, 33, 33, 33, 34, 34, 34, 34, 35, 35,
 35, 35, 36, 36, 36, 36, 37, 37, 37, 37, 38, 38, 38, 38, 39, 39,
 39, 39, 40, 40, 40, 40, 41, 41, 41, 41, 42, 42, 42, 42, 42, 43,
 43, 43, 43, 44, 44, 44, 44, 45, 45, 45, 45, 46, 46, 46, 46, 47,
 47, 47, 47, 48, 48, 48, 48, 49, 49, 49, 49, 50, 50, 50, 50, 51,
 51, 51, 51, 52, 52, 52, 52, 53, 53, 53, 53, 54, 54, 54, 54, 55,
 55, 55, 55, 56, 56, 56, 56, 57, 57, 57, 57, 58, 58, 58, 58, 59,
 59, 59, 59, 60, 60, 60, 60, 61, 61, 61, 61, 62, 62, 62, 62, 63,
};
#pragma data_seg()

//
// complement of table above
//
#pragma data_seg(".text", "CODE")
const BYTE aRound5to8[] = {
      0,  8, 16, 25, 33, 41, 49, 58, 66, 74, 82, 90, 99,107,115,123,
    132,140,148,156,165,173,181,189,197,206,214,222,230,239,247,255,
};
#pragma data_seg()

///////////////////////////////////////////////////////////////////////////////
//
// Dithering stuff.
//
// This code implements error-diffusion to an arbitrary set of colors,
// optionally with transparency.  Since the output colors can be arbitrary,
// the color picker for the dither is a 32k inverse-mapping table.  24bpp
// values are whacked down to 16bpp (555) and used as indices into the table.
// To compensate for posterization effects when converting 24bpp to 16bpp, an
// ordered dither (16bpp halftone) is used to generate the 555 color.
//
///////////////////////////////////////////////////////////////////////////////

INLINE void SwapError(ERRBUF **a, ERRBUF **b)
{
    ERRBUF *te;

    te = *a;
    *a = *b;
    *b = te;
}

INLINE void ZeroError(ERRBUF *err, size_t pels)
{
    ZeroMemory(err - 1, ErrbufBytes(pels));
}

#if 0
// UNUSED DITHERING CODE
//-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

INLINE void ConvertScan8to8( BYTE* pbDest, const BYTE* pbSrc, 
   const RGBQUAD* prgbColors, const BYTE* pbMap, UINT x, UINT xl, UINT y )
{
   UINT* pRow = Get555HalftoneRow( y );
   BYTE* pbTable;
   BYTE r;
   BYTE g;
   BYTE b;

   for (; x < xl; pbSrc += 3, x++ )
   {
      r = prgbColors[*pbSrc].rgbRed;
      g = prgbColors[*pbSrc].rgbGreen;
      b = prgbColors[*pbSrc].rgbBlue;

      pbTable = Get555HalftoneTable( pRow, x );
      *pbDest = pbMap[rgb555( pbTable[r], pbTable[g], pbTable[b] )];
   }
}

void Convert8to8( BYTE* pbDest, const BYTE* pbSrc, int nDestPitch, 
   int nSrcPitch, const RGBQUAD* prgbColors, const BYTE* pbMap, UINT x, 
   UINT nWidth, UINT y, int nHeight )
{
   int dy;
   UINT x2;

   x2 = x+nWidth;

   if( nHeight < 0 )
   {
      dy = -1;
      nHeight *= -1;
   }
   else
   {
      dy = 1;
   }

   while( nHeight )
   {
      ConvertScan8to8( pbDest, pbSrc, prgbColors, pbMap, x, x2, y );

      pbSrc += nSrcPitch;
      pbDest += nDestPitch;

      y += dy;
      nHeight--;
   }
}

INLINE void ConvertScanGray8to8( BYTE* pbDest, const BYTE* pbSrc,
   const BYTE* pbMap, UINT x, UINT xl, UINT y )
{
   UINT* pRow = Get555HalftoneRow( y );
   BYTE* pbTable;
   BYTE g;

   for (; x < xl; pbSrc++, x++ )
   {
      g = *pbSrc;

      pbTable = Get555HalftoneTable( pRow, x );
      *pbDest++ = pbMap[rgb555( pbTable[g], pbTable[g], pbTable[g] )];
   }
}

void ConvertGray8to8( BYTE* pbDest, const BYTE* pbSrc, int nDestPitch, 
   int nSrcPitch, const BYTE* pbMap, UINT x, UINT nWidth, UINT y, int nHeight )
{
   int dy;
   UINT x2;

   x2 = x+nWidth;

   if( nHeight < 0 )
   {
      dy = -1;
      nHeight *= -1;
   }
   else
   {
      dy = 1;
   }

   while( nHeight )
   {
      ConvertScanGray8to8( pbDest, pbSrc, pbMap, x, x2, y );

      pbSrc += nSrcPitch;
      pbDest += nDestPitch;

      y += dy;
      nHeight--;
   }
}

///////////////////////////////////////////////////////////////////////////////
//
// Dith8to16()                                            8bpp to 16bpp dither.
//
// Computes the 24bpp source color by combining the source pixel's color table
// entry with accumulated error for the pixel.  Halftones this 24bpp value to a
// 16bpp 555 color.  Remaps this color to 24bpp to compute and accumulates
// error for neighboring pixels.
//
///////////////////////////////////////////////////////////////////////////////

INLINE void DithScan8to16(WORD *dst, const BYTE *src, const RGBQUAD *colors,
    ERRBUF *cur_err, ERRBUF *nxt_err, UINT x, UINT xl, UINT y)
{
    UINT *row = Get555HalftoneRow(y);

    for (; x < xl; src++, x++)
    {
        register const RGBQUAD *pChosen;
        register WORD wColor;
        register BYTE *tbl;
        register int r;
        register int g;
        register int b;

        pChosen = colors + *src;
        r = Clamp8((int)pChosen->rgbRed   + cur_err->r / 16);
        g = Clamp8((int)pChosen->rgbGreen + cur_err->g / 16);
        b = Clamp8((int)pChosen->rgbBlue  + cur_err->b / 16);
        cur_err++;

        tbl = Get555HalftoneTable(row, x);
        wColor = (*dst++ = rgb555(tbl[r], tbl[g], tbl[b]));

        b -= (int)aRound5to8[wColor & 0x1f];
        (nxt_err+1)->b += b * 1;
        (nxt_err-1)->b += b * 3;
        (nxt_err  )->b += b * 5;
        (cur_err  )->b += b * 7;

        g -= (int)aRound5to8[(wColor >> 5) & 0x1f];
        (nxt_err+1)->g += g * 1;
        (nxt_err-1)->g += g * 3;
        (nxt_err  )->g += g * 5;
        (cur_err  )->g += g * 7;

        r -= (int)aRound5to8[(wColor >> 10) & 0x1f];
        (nxt_err+1)->r += r * 1;
        (nxt_err-1)->r += r * 3;
        (nxt_err  )->r += r * 5;
        (cur_err  )->r += r * 7;

        nxt_err++;
    }
}

void Dith8to16(WORD *dst, const BYTE *src, int dst_next_scan,
    int src_next_scan, const RGBQUAD *colors, ERRBUF *cur_err, ERRBUF *nxt_err,
    UINT x, UINT cx, UINT y, int cy)
{
    int dy;

    cx += x;

    if (cy < 0)
    {
        dy = -1;
        cy *= -1;
    }
    else
        dy = 1;

    if (y & 1)
        SwapError(&cur_err, &nxt_err);

    while (cy)
    {
        DithScan8to16(dst, src, colors, cur_err, nxt_err, x, cx, y);

        ZeroError(cur_err, cx);
        SwapError(&cur_err, &nxt_err);

        *(BYTE **)&src += src_next_scan;
        *(BYTE **)&dst += dst_next_scan;
        y += dy;
        cy--;
    }
}

///////////////////////////////////////////////////////////////////////////////
//
// Dith8to16t()                         8bpp to 16bpp dither with transparency.
//
// If the source pixel is the given source transparency color, this routine
// picks the destination transparency color for output and zero error is
// accumulated to the pixel's neighbors.
// Otherwise, this routine functions identically to Dith8to16.
//
///////////////////////////////////////////////////////////////////////////////

INLINE void DithScan8to16t(WORD *dst, const BYTE *src, const RGBQUAD *colors,
    ERRBUF *cur_err, ERRBUF *nxt_err, UINT x, UINT xl, UINT y,
    WORD wColorTxpOUT, BYTE indexTxpIN)
{
    UINT *row = Get555HalftoneRow(y);

    for (; x < xl; src ++, x++)
    {
        register const RGBQUAD *pChosen;
        register WORD wColor;
        register BYTE *tbl;
        register BYTE index;
        register int r;
        register int g;
        register int b;

        index = *src;
        if (index == indexTxpIN)
        {
            *dst++ = wColorTxpOUT;
            cur_err++;
            nxt_err++;
            continue;
        }

        pChosen = colors + index;
        r = Clamp8((int)pChosen->rgbRed   + cur_err->r / 16);
        g = Clamp8((int)pChosen->rgbGreen + cur_err->g / 16);
        b = Clamp8((int)pChosen->rgbBlue  + cur_err->b / 16);
        cur_err++;

        tbl = Get555HalftoneTable(row, x);
        wColor = (*dst++ = rgb555(tbl[r], tbl[g], tbl[b]));

        b -= (int)aRound5to8[wColor & 0x1f];
        (nxt_err+1)->b += b * 1;
        (nxt_err-1)->b += b * 3;
        (nxt_err  )->b += b * 5;
        (cur_err  )->b += b * 7;

        g -= (int)aRound5to8[(wColor >> 5) & 0x1f];
        (nxt_err+1)->g += g * 1;
        (nxt_err-1)->g += g * 3;
        (nxt_err  )->g += g * 5;
        (cur_err  )->g += g * 7;

        r -= (int)aRound5to8[(wColor >> 10) & 0x1f];
        (nxt_err+1)->r += r * 1;
        (nxt_err-1)->r += r * 3;
        (nxt_err  )->r += r * 5;
        (cur_err  )->r += r * 7;

        nxt_err++;
    }
}

void Dith8to16t(WORD *dst, const BYTE *src, int dst_next_scan,
    int src_next_scan, const RGBQUAD *colors, ERRBUF *cur_err, ERRBUF *nxt_err,
    UINT x, UINT cx, UINT y, int cy, WORD wColorTxpOUT, BYTE indexTxpIN)
{
    int dy;

    cx += x;

    if (cy < 0)
    {
        dy = -1;
        cy *= -1;
    }
    else
        dy = 1;

    if (y & 1)
        SwapError(&cur_err, &nxt_err);

    while (cy)
    {
        DithScan8to16t(dst, src, colors, cur_err, nxt_err, x, cx, y,
            wColorTxpOUT, indexTxpIN);

        ZeroError(cur_err, cx);
        SwapError(&cur_err, &nxt_err);

        *(BYTE **)&src += src_next_scan;
        *(BYTE **)&dst += dst_next_scan;
        y += dy;
        cy--;
    }
}

INLINE void ConvertScan24to8( BYTE* pbDest, const BYTE* pbSrc, 
   const BYTE* pbMap, UINT x, UINT xl, UINT y )
{
   UINT* pRow;
   BYTE* pbTable;
   BYTE r;
   BYTE g;
   BYTE b;

   pRow = Get555HalftoneRow( y );

   for (; x < xl; pbSrc += 3, x++ )
   {
      r = pbSrc[2];
      g = pbSrc[1];
      b = pbSrc[0];

      pbTable = Get555HalftoneTable( pRow, x );
      *pbDest = pbMap[rgb555( pbTable[r], pbTable[g], pbTable[b] )];
   }
}

void Convert24to8( BYTE* pbDest, const BYTE* pbSrc, int nDestPitch, 
   int nSrcPitch, const BYTE* pbMap, UINT x, UINT nWidth, UINT y, int nHeight )
{
   int dy;
   UINT x2;

   x2 = x+nWidth;

   if( nHeight < 0 )
   {
      dy = -1;
      nHeight *= -1;
   }
   else
   {
      dy = 1;
   }

   while( nHeight )
   {
      ConvertScan24to8( pbDest, pbSrc, pbMap, x, x2, y );

      pbSrc += nSrcPitch;
      pbDest += nDestPitch;

      y += dy;
      nHeight--;
   }
}

///////////////////////////////////////////////////////////////////////////////
//
// Dith24to16()                                          24bpp to 16bpp dither.
//
// Computes the 24bpp source color by combining the source pixel's color with
// accumulated error for the pixel.  Halftones this 24bpp value to a 16bpp 555
// color.  Remaps this color to 24bpp to compute and accumulates error for
// neighboring pixels.
//
///////////////////////////////////////////////////////////////////////////////

INLINE void DithScan24to16(WORD *dst, const BYTE *src, ERRBUF *cur_err,
    ERRBUF *nxt_err, UINT x, UINT xl, UINT y)
{
    UINT *row = Get555HalftoneRow(y);

    for (; x < xl; src += 3, x++)
    {
        register WORD wColor;
        register BYTE *tbl;
        register int r;
        register int g;
        register int b;

        r = Clamp8((int)src[2] + cur_err->r / 16);
        g = Clamp8((int)src[1] + cur_err->g / 16);
        b = Clamp8((int)src[0] + cur_err->b / 16);
        cur_err++;

        tbl = Get555HalftoneTable(row, x);
        wColor = (*dst++ = rgb555(tbl[r], tbl[g], tbl[b]));

        b -= (int)aRound5to8[wColor & 0x1f];
        (nxt_err+1)->b += b * 1;
        (nxt_err-1)->b += b * 3;
        (nxt_err  )->b += b * 5;
        (cur_err  )->b += b * 7;

        g -= (int)aRound5to8[(wColor >> 5) & 0x1f];
        (nxt_err+1)->g += g * 1;
        (nxt_err-1)->g += g * 3;
        (nxt_err  )->g += g * 5;
        (cur_err  )->g += g * 7;

        r -= (int)aRound5to8[(wColor >> 10) & 0x1f];
        (nxt_err+1)->r += r * 1;
        (nxt_err-1)->r += r * 3;
        (nxt_err  )->r += r * 5;
        (cur_err  )->r += r * 7;

        nxt_err++;
    }
}

void Dith24to16(WORD *dst, const BYTE *src, int dst_next_scan,
    int src_next_scan, ERRBUF *cur_err, ERRBUF *nxt_err, UINT x, UINT cx,
    UINT y, int cy)
{
    int dy;

    cx += x;

    if (cy < 0)
    {
        dy = -1;
        cy *= -1;
    }
    else
        dy = 1;

    if (y & 1)
        SwapError(&cur_err, &nxt_err);

    while (cy)
    {
        DithScan24to16(dst, src, cur_err, nxt_err, x, cx, y);

        ZeroError(cur_err, cx);
        SwapError(&cur_err, &nxt_err);

        *(BYTE **)&src += src_next_scan;
        *(BYTE **)&dst += dst_next_scan;
        y += dy;
        cy--;
    }
}

// END OF UNUSED DITHERING CODE
//-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
#endif

///////////////////////////////////////////////////////////////////////////////
//
// Dith24rto15()                                         24bpp to 15bpp dither.
//
// Computes the 24bpp source color by combining the source pixel's color with
// accumulated error for the pixel.  THE SOURCE COMPONENT ORDER IS OPPOSITE A DIB:
// RED, GREEN, BLUE.  Halftones this 24bpp value to a 16bpp 555 color.  Remaps this 
// color to 24bpp to compute and accumulates error for neighboring pixels.
//
///////////////////////////////////////////////////////////////////////////////

INLINE void DithScan24rto15(WORD *dst, const BYTE *src, ERRBUF *cur_err,
    ERRBUF *nxt_err, UINT x, UINT xl, UINT y)
{
    UINT *row = Get555HalftoneRow(y);

    for (; x < xl; src += 3, x++)
    {
        register WORD wColor;
        register BYTE *tbl;
        register int r;
        register int g;
        register int b;

        r = Clamp8((int)src[0] + cur_err->r / 16);
        g = Clamp8((int)src[1] + cur_err->g / 16);
        b = Clamp8((int)src[2] + cur_err->b / 16);
        cur_err++;

        tbl = Get555HalftoneTable(row, x);
        wColor = (*dst++ = rgb555(tbl[r], tbl[g], tbl[b]));

        b -= (int)aRound5to8[wColor & 0x1f];
        (nxt_err+1)->b += b * 1;
        (nxt_err-1)->b += b * 3;
        (nxt_err  )->b += b * 5;
        (cur_err  )->b += b * 7;

        g -= (int)aRound5to8[(wColor >> 5) & 0x1f];
        (nxt_err+1)->g += g * 1;
        (nxt_err-1)->g += g * 3;
        (nxt_err  )->g += g * 5;
        (cur_err  )->g += g * 7;

        r -= (int)aRound5to8[(wColor >> 10) & 0x1f];
        (nxt_err+1)->r += r * 1;
        (nxt_err-1)->r += r * 3;
        (nxt_err  )->r += r * 5;
        (cur_err  )->r += r * 7;

        nxt_err++;
    }
}

void Dith24rto15(WORD *dst, const BYTE *src, int dst_next_scan,
    int src_next_scan, ERRBUF *cur_err, ERRBUF *nxt_err, UINT x, UINT cx,
    UINT y, int cy)
{
    int dy;

    cx += x;

    if (cy < 0)
    {
        dy = -1;
        cy *= -1;
    }
    else
        dy = 1;

    if (y & 1)
        SwapError(&cur_err, &nxt_err);

    while (cy)
    {
        DithScan24rto15(dst, src, cur_err, nxt_err, x, cx, y);

        ZeroError(cur_err, cx);
        SwapError(&cur_err, &nxt_err);

        *(BYTE **)&src += src_next_scan;
        *(BYTE **)&dst += dst_next_scan;
        y += dy;
        cy--;
    }
}

///////////////////////////////////////////////////////////////////////////////
//
// Dith24rto16()                                         24bpp to 16bpp dither.
//
// Computes the 24bpp source color by combining the source pixel's color with
// accumulated error for the pixel.  THE SOURCE COMPONENT ORDER IS OPPOSITE A DIB:
// RED, GREEN, BLUE.  Halftones this 24bpp value to a 16bpp 565 color.  Remaps this 
// color to 24bpp to compute and accumulates error for neighboring pixels.
//
///////////////////////////////////////////////////////////////////////////////

INLINE void DithScan24rto16(WORD *dst, const BYTE *src, ERRBUF *cur_err,
    ERRBUF *nxt_err, UINT x, UINT xl, UINT y)
{
    UINT *row = Get555HalftoneRow(y);

    for (; x < xl; src += 3, x++)
    {
        register WORD wColor;
        register BYTE *tbl;
        register int r;
        register int g;
        register int b;

        r = Clamp8((int)src[0] + cur_err->r / 16);
        g = Clamp8((int)src[1] + cur_err->g / 16);
        b = Clamp8((int)src[2] + cur_err->b / 16);
        cur_err++;

        tbl = Get555HalftoneTable(row, x);
        wColor = (*dst++ = rgb565(tbl[r], tbl[g], tbl[b]));

        b -= (int)aRound5to8[wColor & 0x1f];
        (nxt_err+1)->b += b * 1;
        (nxt_err-1)->b += b * 3;
        (nxt_err  )->b += b * 5;
        (cur_err  )->b += b * 7;

        g -= (int)aRound5to8[(wColor >> 6) & 0x1f];
        (nxt_err+1)->g += g * 1;
        (nxt_err-1)->g += g * 3;
        (nxt_err  )->g += g * 5;
        (cur_err  )->g += g * 7;

        r -= (int)aRound5to8[(wColor >> 11) & 0x1f];
        (nxt_err+1)->r += r * 1;
        (nxt_err-1)->r += r * 3;
        (nxt_err  )->r += r * 5;
        (cur_err  )->r += r * 7;

        nxt_err++;
    }
}

void Dith24rto16(WORD *dst, const BYTE *src, int dst_next_scan,
    int src_next_scan, ERRBUF *cur_err, ERRBUF *nxt_err, UINT x, UINT cx,
    UINT y, int cy)
{
    int dy;

    cx += x;

    if (cy < 0)
    {
        dy = -1;
        cy *= -1;
    }
    else
        dy = 1;

    if (y & 1)
        SwapError(&cur_err, &nxt_err);

    while (cy)
    {
        DithScan24rto16(dst, src, cur_err, nxt_err, x, cx, y);

        ZeroError(cur_err, cx);
        SwapError(&cur_err, &nxt_err);

        *(BYTE **)&src += src_next_scan;
        *(BYTE **)&dst += dst_next_scan;
        y += dy;
        cy--;
    }
}

///////////////////////////////////////////////////////////////////////////////
//
// Convert24rto16()                                         24bpp to 16bpp translation.
//
// Converts 24bpp source color to 16bpp (565) format by mapping each component
// to the closest value in 565 space.  THE SOURCE COMPONENT ORDER IS OPPOSITE A DIB:
// RED, GREEN, BLUE. 
//
///////////////////////////////////////////////////////////////////////////////

void Convert24rto16(WORD *dst, const BYTE *src, int dst_next_scan,
    int src_next_scan, UINT x, UINT cx, UINT y, int cy)
{
    int dy;

    cx += x;

    if (cy < 0)
    {
        dy = -1;
        cy *= -1;
    }
    else
        dy = 1;

    while (cy)
    {
        WORD *pdst;
        const BYTE *psrc;
        UINT xt;

        pdst = dst;
        psrc = src;
        for (xt = x; xt < cx; psrc += 3, xt++)
        {
            *pdst++ = (WORD)((((WORD)aRound8to5[psrc[0]] << 6) | (WORD)aRound8to6[psrc[1]]) << 5) | (WORD)aRound8to5[psrc[2]];
        }
        
        *(BYTE **)&src += src_next_scan;
        *(BYTE **)&dst += dst_next_scan;
        y += dy;
        cy--;
    }
}

///////////////////////////////////////////////////////////////////////////////
//
// Convert24rto15()                                         24bpp to 15bpp translation.
//
// Converts 24bpp source color to 15bpp (555) format by mapping each component
// to the closest value in 555 space.  THE SOURCE COMPONENT ORDER IS OPPOSITE A DIB:
// RED, GREEN, BLUE. 
//
///////////////////////////////////////////////////////////////////////////////

void Convert24rto15(WORD *dst, const BYTE *src, int dst_next_scan,
    int src_next_scan, UINT x, UINT cx, UINT y, int cy)
{
    int dy;

    cx += x;

    if (cy < 0)
    {
        dy = -1;
        cy *= -1;
    }
    else
        dy = 1;

    while (cy)
    {
        WORD *pdst;
        const BYTE *psrc;
        UINT xt;

        pdst = dst;
        psrc = src;
        for (xt = x; xt < cx; psrc += 3, xt++)
        {
#ifdef _MAC
            WORD    wVal;
            
            wVal = (WORD)((((WORD)aRound8to5[psrc[0]] << 5) | (WORD)aRound8to5[psrc[1]]) << 5) | (WORD)aRound8to5[psrc[2]];
            *pdst++ = (wVal << 8) | (wVal >> 8);
#else
            *pdst++ = (WORD)((((WORD)aRound8to5[psrc[0]] << 5) | (WORD)aRound8to5[psrc[1]]) << 5) | (WORD)aRound8to5[psrc[2]];
#endif
        }
        
        *(BYTE **)&src += src_next_scan;
        *(BYTE **)&dst += dst_next_scan;
        y += dy;
        cy--;
    }
}

///////////////////////////////////////////////////////////////////////////////
//
// Dith24to8()                                            24bpp to 8bpp dither.
//
// Computes the 24bpp source color by combining the source pixel's color with
// accumulated error for the pixel.  Halftones this 24bpp value to a 16bpp 555
// color.  Uses the 16bpp color as a lookup into an inverse mapping table to
// pick the output color for the pixel.  Uses the destination color table entry
// to compute and accumulates error for neighboring pixels.
//
///////////////////////////////////////////////////////////////////////////////

INLINE void DithScan24to8(BYTE *dst, const BYTE *src, const RGBQUAD *colors,
    const BYTE *map, ERRBUF *cur_err, ERRBUF *nxt_err, UINT x, UINT xl, UINT y)
{
    UINT *row = Get555HalftoneRow(y);

    for (; x < xl; src += 3, x++)
    {
        register const RGBQUAD *pChosen;
        register BYTE *tbl;
        register int r;
        register int g;
        register int b;

        r = Clamp8((int)src[2] + cur_err->r / 16);
        g = Clamp8((int)src[1] + cur_err->g / 16);
        b = Clamp8((int)src[0] + cur_err->b / 16);
        cur_err++;

        tbl = Get555HalftoneTable(row, x);
        pChosen = colors + (*dst++ = map[rgb555(tbl[r], tbl[g], tbl[b])]);

        r -= (int)pChosen->rgbRed;
        (nxt_err+1)->r += r * 1;
        (nxt_err-1)->r += r * 3;
        (nxt_err  )->r += r * 5;
        (cur_err  )->r += r * 7;

        g -= (int)pChosen->rgbGreen;
        (nxt_err+1)->g += g * 1;
        (nxt_err-1)->g += g * 3;
        (nxt_err  )->g += g * 5;
        (cur_err  )->g += g * 7;

        b -= (int)pChosen->rgbBlue;
        (nxt_err+1)->b += b * 1;
        (nxt_err-1)->b += b * 3;
        (nxt_err  )->b += b * 5;
        (cur_err  )->b += b * 7;

        nxt_err++;
    }
}

void Dith24to8(BYTE *dst, const BYTE *src, int dst_next_scan,
    int src_next_scan, const RGBQUAD *colors, const BYTE *map, ERRBUF *cur_err,
    ERRBUF *nxt_err, UINT x, UINT cx, UINT y, int cy)
{
    int dy;

    cx += x;

    if (cy < 0)
    {
        dy = -1;
        cy *= -1;
    }
    else
        dy = 1;

    if (y & 1)
        SwapError(&cur_err, &nxt_err);

    while (cy)
    {
        DithScan24to8(dst, src, colors, map, cur_err, nxt_err, x, cx, y);

        ZeroError(cur_err, cx);
        SwapError(&cur_err, &nxt_err);

        *(BYTE **)&src += src_next_scan;
        *(BYTE **)&dst += dst_next_scan;
        y += dy;
        cy--;
    }
}

///////////////////////////////////////////////////////////////////////////////
//
// Dith24rto8()                                            24bpp to 8bpp dither.
//
// Computes the 24bpp source color by combining the source pixel's color with
// accumulated error for the pixel.  Halftones this 24bpp value to a 16bpp 555
// color.  Uses the 16bpp color as a lookup into an inverse mapping table to
// pick the output color for the pixel.  Uses the destination color table entry
// to compute and accumulates error for neighboring pixels.
//
///////////////////////////////////////////////////////////////////////////////

INLINE void DithScan24rto8(BYTE *dst, const BYTE *src, const RGBQUAD *colors,
    const BYTE *map, ERRBUF *cur_err, ERRBUF *nxt_err, UINT x, UINT xl, UINT y)
{
    UINT *row = Get555HalftoneRow(y);

    for (; x < xl; src += 3, x++)
    {
        register const RGBQUAD *pChosen;
        register BYTE *tbl;
        register int r;
        register int g;
        register int b;

        r = Clamp8((int)src[0] + cur_err->r / 16);
        g = Clamp8((int)src[1] + cur_err->g / 16);
        b = Clamp8((int)src[2] + cur_err->b / 16);

        cur_err++;

        tbl = Get555HalftoneTable(row, x);
        pChosen = colors + (*dst++ = map[rgb555(tbl[r], tbl[g], tbl[b])]);

        r -= (int)pChosen->rgbRed;
        (nxt_err+1)->r += r * 1;
        (nxt_err-1)->r += r * 3;
        (nxt_err  )->r += r * 5;
        (cur_err  )->r += r * 7;

        g -= (int)pChosen->rgbGreen;
        (nxt_err+1)->g += g * 1;
        (nxt_err-1)->g += g * 3;
        (nxt_err  )->g += g * 5;
        (cur_err  )->g += g * 7;

        b -= (int)pChosen->rgbBlue;
        (nxt_err+1)->b += b * 1;
        (nxt_err-1)->b += b * 3;
        (nxt_err  )->b += b * 5;
        (cur_err  )->b += b * 7;

        nxt_err++;
    }
}

void Dith24rto8(BYTE *dst, const BYTE *src, int dst_next_scan,
    int src_next_scan, const RGBQUAD *colors, const BYTE *map, ERRBUF *cur_err,
    ERRBUF *nxt_err, UINT x, UINT cx, UINT y, int cy)
{
    int dy;

    cx += x;

    if (cy < 0)
    {
        dy = -1;
        cy *= -1;
    }
    else
        dy = 1;

    if (y & 1)
        SwapError(&cur_err, &nxt_err);

    while (cy)
    {
        DithScan24rto8(dst, src, colors, map, cur_err, nxt_err, x, cx, y);

        ZeroError(cur_err, cx);
        SwapError(&cur_err, &nxt_err);

        *(BYTE **)&src += src_next_scan;
        *(BYTE **)&dst += dst_next_scan;
        y += dy;
        cy--;
    }
}

///////////////////////////////////////////////////////////////////////////////
//
// Dith15to8()                                            16bpp to 8bpp dither.
//
// Uses the 16bpp color as a lookup into an inverse mapping table to
// pick the output color for the pixel.  Uses the destination color table entry
// to compute and accumulates error for neighboring pixels.
//
///////////////////////////////////////////////////////////////////////////////

INLINE void DithScan15to8(BYTE *dst, const WORD *src, const RGBQUAD *colors,
    const BYTE *map, ERRBUF *cur_err, ERRBUF *nxt_err, UINT x, UINT xl, UINT y)
{
    UINT *row = Get555HalftoneRow(y);

    for (; x < xl; ++src, x++)
    {
        register const RGBQUAD *pChosen;
        register BYTE *tbl;
        register int r;
        register int g;
        register int b;

        r = Clamp8((int)aRound5to8[(*src >> 10) & 0x1F] + cur_err->r / 16);
        g = Clamp8((int)aRound5to8[(*src >> 5) & 0x1F] + cur_err->g / 16);
        b = Clamp8((int)aRound5to8[*src & 0x1F] + cur_err->b / 16);
        cur_err++;

        tbl = Get555HalftoneTable(row, x);
        pChosen = colors + (*dst++ = map[rgb555(tbl[r], tbl[g], tbl[b])]);

        r -= (int)pChosen->rgbRed;
        (nxt_err+1)->r += r * 1;
        (nxt_err-1)->r += r * 3;
        (nxt_err  )->r += r * 5;
        (cur_err  )->r += r * 7;

        g -= (int)pChosen->rgbGreen;
        (nxt_err+1)->g += g * 1;
        (nxt_err-1)->g += g * 3;
        (nxt_err  )->g += g * 5;
        (cur_err  )->g += g * 7;

        b -= (int)pChosen->rgbBlue;
        (nxt_err+1)->b += b * 1;
        (nxt_err-1)->b += b * 3;
        (nxt_err  )->b += b * 5;
        (cur_err  )->b += b * 7;

        nxt_err++;
    }
}

void Dith15to8(BYTE *dst, const WORD *src, int dst_next_scan,
    int src_next_scan, const RGBQUAD *colors, const BYTE *map, ERRBUF *cur_err,
    ERRBUF *nxt_err, UINT x, UINT cx, UINT y, int cy)
{
    int dy;

    cx += x;

    if (cy < 0)
    {
        dy = -1;
        cy *= -1;
    }
    else
        dy = 1;

    if (y & 1)
        SwapError(&cur_err, &nxt_err);

    while (cy)
    {
        DithScan15to8(dst, src, colors, map, cur_err, nxt_err, x, cx, y);

        ZeroError(cur_err, cx);
        SwapError(&cur_err, &nxt_err);

        *(BYTE **)&src += src_next_scan;
        *(BYTE **)&dst += dst_next_scan;
        y += dy;
        cy--;
    }
}


///////////////////////////////////////////////////////////////////////////////
//
// Dith16to8()                                            16bpp to 8bpp dither.
//
// Uses the 16bpp color as a lookup into an inverse mapping table to
// pick the output color for the pixel.  Uses the destination color table entry
// to compute and accumulates error for neighboring pixels.
//
///////////////////////////////////////////////////////////////////////////////

INLINE void DithScan16to8(BYTE *dst, const WORD *src, const RGBQUAD *colors,
    const BYTE *map, ERRBUF *cur_err, ERRBUF *nxt_err, UINT x, UINT xl, UINT y)
{
    UINT *row = Get555HalftoneRow(y);

    for (; x < xl; ++src, x++)
    {
        register const RGBQUAD *pChosen;
        register BYTE *tbl;
        register int r;
        register int g;
        register int b;

        r = Clamp8((int)aRound5to8[(*src >> 11) & 0x1F] + cur_err->r / 16);
        g = Clamp8((int)aRound5to8[(*src >> 6) & 0x1F] + cur_err->g / 16);
        b = Clamp8((int)aRound5to8[*src & 0x1F] + cur_err->b / 16);
        cur_err++;

        tbl = Get555HalftoneTable(row, x);
        pChosen = colors + (*dst++ = map[rgb555(tbl[r], tbl[g], tbl[b])]);

        r -= (int)pChosen->rgbRed;
        (nxt_err+1)->r += r * 1;
        (nxt_err-1)->r += r * 3;
        (nxt_err  )->r += r * 5;
        (cur_err  )->r += r * 7;

        g -= (int)pChosen->rgbGreen;
        (nxt_err+1)->g += g * 1;
        (nxt_err-1)->g += g * 3;
        (nxt_err  )->g += g * 5;
        (cur_err  )->g += g * 7;

        b -= (int)pChosen->rgbBlue;
        (nxt_err+1)->b += b * 1;
        (nxt_err-1)->b += b * 3;
        (nxt_err  )->b += b * 5;
        (cur_err  )->b += b * 7;

        nxt_err++;
    }
}

void Dith16to8(BYTE *dst, const WORD *src, int dst_next_scan,
    int src_next_scan, const RGBQUAD *colors, const BYTE *map, ERRBUF *cur_err,
    ERRBUF *nxt_err, UINT x, UINT cx, UINT y, int cy)
{
    int dy;

    cx += x;

    if (cy < 0)
    {
        dy = -1;
        cy *= -1;
    }
    else
        dy = 1;

    if (y & 1)
        SwapError(&cur_err, &nxt_err);

    while (cy)
    {
        DithScan16to8(dst, src, colors, map, cur_err, nxt_err, x, cx, y);

        ZeroError(cur_err, cx);
        SwapError(&cur_err, &nxt_err);

        *(BYTE **)&src += src_next_scan;
        *(BYTE **)&dst += dst_next_scan;
        y += dy;
        cy--;
    }
}

///////////////////////////////////////////////////////////////////////////////
//
// Dith8to8()                                              8bpp to 8bpp dither.
//
// Computes the 24bpp source color by combining the source pixel's color table
// entry with accumulated error for the pixel.  Halftones this 24bpp value to a
// 16bpp 555 color.  Uses the 16bpp color as a lookup into an inverse mapping
// table to pick the output color for the pixel.  Uses the destination color
// table entry to compute and accumulates error for neighboring pixels.
//
///////////////////////////////////////////////////////////////////////////////

INLINE void DithScan8to8(BYTE *dst, const BYTE *src, const RGBQUAD *colorsIN,
    const RGBQUAD *colorsOUT, const BYTE *map, ERRBUF *cur_err,
    ERRBUF *nxt_err, UINT x, UINT xl, UINT y)
{
    UINT *row = Get555HalftoneRow(y);

    for (; x < xl; src++, x++)
    {
        register const RGBQUAD *pChosen;
        register BYTE *tbl;
        register int r;
        register int g;
        register int b;

        pChosen = colorsIN + *src;

        r = Clamp8((int)pChosen->rgbRed   + (cur_err->r >> 4));
        g = Clamp8((int)pChosen->rgbGreen + (cur_err->g >> 4));
        b = Clamp8((int)pChosen->rgbBlue  + (cur_err->b >> 4));
        cur_err++;

        tbl = Get555HalftoneTable(row, x);
        pChosen = colorsOUT + (*dst++ = map[rgb555(tbl[r], tbl[g], tbl[b])]);

        r -= (int)pChosen->rgbRed;
        (nxt_err+1)->r += r * 1;
        (nxt_err-1)->r += r * 3;
        (nxt_err  )->r += r * 5;
        (cur_err  )->r += r * 7;

        g -= (int)pChosen->rgbGreen;
        (nxt_err+1)->g += g * 1;
        (nxt_err-1)->g += g * 3;
        (nxt_err  )->g += g * 5;
        (cur_err  )->g += g * 7;

        b -= (int)pChosen->rgbBlue;
        (nxt_err+1)->b += b * 1;
        (nxt_err-1)->b += b * 3;
        (nxt_err  )->b += b * 5;
        (cur_err  )->b += b * 7;

        nxt_err++;
    }
}

void Dith8to8(BYTE *dst, const BYTE *src, int dst_next_scan, int src_next_scan,
    const RGBQUAD *colorsIN, const RGBQUAD *colorsOUT, const BYTE *map,
    ERRBUF *cur_err, ERRBUF *nxt_err, UINT x, UINT cx, UINT y, int cy)
{
    int dy;

    cx += x;

    if (cy < 0)
    {
        dy = -1;
        cy *= -1;
    }
    else
        dy = 1;

    if (y & 1)
        SwapError(&cur_err, &nxt_err);

    while (cy)
    {
        DithScan8to8(dst, src, colorsIN, colorsOUT, map, cur_err, nxt_err,
            x, cx, y);

        ZeroError(cur_err, cx);
        SwapError(&cur_err, &nxt_err);

        *(BYTE **)&src += src_next_scan;
        *(BYTE **)&dst += dst_next_scan;
        y += dy;
        cy--;
    }
}

///////////////////////////////////////////////////////////////////////////////
//
// Dith8to8t()                           8bpp to 8bpp dither with transparency.
//
// If the source pixel is the given source transparency color, this routine
// picks the destination transparency color for output and zero error is
// accumulated to the pixel's neighbors.
// Otherwise, this routine functions identically to Dith8to8.
//
///////////////////////////////////////////////////////////////////////////////

INLINE void DithScan8to8t(BYTE *dst, const BYTE *src,
    const RGBQUAD *colorsIN, const RGBQUAD *colorsOUT, const BYTE *map,
    ERRBUF *cur_err, ERRBUF *nxt_err, UINT x, UINT xl, UINT y,
    BYTE indexTxpOUT, BYTE indexTxpIN)
{
    UINT *row = Get555HalftoneRow(y);

    for (; x < xl; src++, x++)
    {
        register const RGBQUAD *pChosen;
        register BYTE *tbl;
        register BYTE index;
        register int r;
        register int g;
        register int b;

        index = *src;
        if (index == indexTxpIN)
        {
            *dst++ = indexTxpOUT;
            cur_err++;
            nxt_err++;
            continue;
        }

        pChosen = colorsIN + index;
        r = Clamp8((int)pChosen->rgbRed   + (cur_err->r >> 4));
        g = Clamp8((int)pChosen->rgbGreen + (cur_err->g >> 4));
        b = Clamp8((int)pChosen->rgbBlue  + (cur_err->b >> 4));
        cur_err++;

        tbl = Get555HalftoneTable(row, x);
        pChosen = colorsOUT + (*dst++ = map[rgb555(tbl[r], tbl[g], tbl[b])]);

        r -= (int)pChosen->rgbRed;
        (nxt_err+1)->r += r * 1;
        (nxt_err-1)->r += r * 3;
        (nxt_err  )->r += r * 5;
        (cur_err  )->r += r * 7;

        g -= (int)pChosen->rgbGreen;
        (nxt_err+1)->g += g * 1;
        (nxt_err-1)->g += g * 3;
        (nxt_err  )->g += g * 5;
        (cur_err  )->g += g * 7;

        b -= (int)pChosen->rgbBlue;
        (nxt_err+1)->b += b * 1;
        (nxt_err-1)->b += b * 3;
        (nxt_err  )->b += b * 5;
        (cur_err  )->b += b * 7;

        nxt_err++;
    }
}

void Dith8to8t(BYTE *dst, const BYTE *src, int dst_next_scan,
    int src_next_scan, const RGBQUAD *colorsIN, const RGBQUAD *colorsOUT,
    const BYTE *map, ERRBUF *cur_err, ERRBUF *nxt_err, UINT x, UINT cx, UINT y,
    int cy, BYTE indexTxpOUT, BYTE indexTxpIN)
{
    int dy;

    cx += x;

    if (cy < 0)
    {
        dy = -1;
        cy *= -1;
    }
    else
        dy = 1;

    if (y & 1)
        SwapError(&cur_err, &nxt_err);

    while (cy)
    {
        DithScan8to8t(dst, src, colorsIN, colorsOUT, map, cur_err, nxt_err,
            x, cx, y, indexTxpOUT, indexTxpIN);

        ZeroError(cur_err, cx);
        SwapError(&cur_err, &nxt_err);

        *(BYTE **)&src += src_next_scan;
        *(BYTE **)&dst += dst_next_scan;
        y += dy;
        cy--;
    }
}

INLINE void DithScanGray8to8( BYTE* pbDest, const BYTE* pbSrc,
   const RGBQUAD* prgbColors, const BYTE* pbMap, ERRBUF* pCurrentError,
   ERRBUF* pNextError, UINT x, UINT xl, UINT y )
{
   BYTE bSrc;
   BYTE bDest;
    UINT* pRow = Get555HalftoneRow( y );

    for(; x < xl; pbSrc++, x++ )
    {
        const RGBQUAD* prgbChosen;
        BYTE* pbTable;
        int r;
        int g;
        int b;

        bSrc = *pbSrc;
        r = Clamp8( (int)bSrc + pCurrentError->r/16 );
        g= Clamp8( (int)bSrc + pCurrentError->g/16 );
        b = Clamp8( (int)bSrc + pCurrentError->b/16 );
        pCurrentError++;

        pbTable = Get555HalftoneTable( pRow, x );
        bDest = pbMap[rgb555( pbTable[r], pbTable[g], pbTable[b] )];
         prgbChosen = prgbColors+bDest;
         *pbDest = bDest;
         pbDest++;

        r -= (int)prgbChosen->rgbRed;
        (pNextError+1)->r += r * 1;
        (pNextError-1)->r += r * 3;
        (pNextError)->r += r * 5;
        (pCurrentError)->r += r * 7;

        g -= (int)prgbChosen->rgbGreen;
        (pNextError+1)->g += g * 1;
        (pNextError-1)->g += g * 3;
        (pNextError)->g += g * 5;
        (pCurrentError)->g += g * 7;

        b -= (int)prgbChosen->rgbBlue;
        (pNextError+1)->b += b * 1;
        (pNextError-1)->b += b * 3;
        (pNextError)->b += b * 5;
        (pCurrentError)->b += b * 7;

        pNextError++;
    }
}

void DithGray8to8( BYTE* pbDest, const BYTE* pbSrc, int nDestPitch, 
   int nSrcPitch, const RGBQUAD* prgbColors, const BYTE* pbMap, 
   ERRBUF* pCurrentError, ERRBUF* pNextError, UINT x, UINT cx, UINT y, int cy )
{
    int dy;

    cx += x;

    if (cy < 0)
    {
        dy = -1;
        cy *= -1;
    }
    else
    {
        dy = 1;
    }

    if (y & 1)
    {
        SwapError( &pCurrentError, &pNextError );
    }
    while (cy)
    {
        DithScanGray8to8( pbDest, pbSrc, prgbColors, pbMap, pCurrentError, 
           pNextError, x, cx, y );

        ZeroError( pCurrentError, cx );
        SwapError( &pCurrentError, &pNextError );

        *(BYTE **)&pbSrc += nSrcPitch;
        *(BYTE **)&pbDest += nDestPitch;
        y += dy;
        cy--;
    }
}

INLINE void DithScanGray8to16( WORD* dst, const BYTE* src,
   ERRBUF* cur_err, ERRBUF* nxt_err, UINT x, UINT xl, UINT y )
{
    UINT *row = Get555HalftoneRow(y);

    for (; x < xl; ++src, x++)
    {
        register WORD wColor;
        register BYTE *tbl;
        register int r;
        register int g;
        register int b;
        int bSrc;

        bSrc = (int)*src;
        r = Clamp8(bSrc + cur_err->r / 16);
        g = Clamp8(bSrc + cur_err->g / 16);
        b = Clamp8(bSrc + cur_err->b / 16);
        cur_err++;

        tbl = Get555HalftoneTable(row, x);
        wColor = (*dst++ = rgb565(tbl[r], tbl[g], tbl[b]));

        b -= (int)aRound5to8[wColor & 0x1f];
        (nxt_err+1)->b += b * 1;
        (nxt_err-1)->b += b * 3;
        (nxt_err  )->b += b * 5;
        (cur_err  )->b += b * 7;

        g -= (int)aRound5to8[(wColor >> 6) & 0x1f];
        (nxt_err+1)->g += g * 1;
        (nxt_err-1)->g += g * 3;
        (nxt_err  )->g += g * 5;
        (cur_err  )->g += g * 7;

        r -= (int)aRound5to8[(wColor >> 11) & 0x1f];
        (nxt_err+1)->r += r * 1;
        (nxt_err-1)->r += r * 3;
        (nxt_err  )->r += r * 5;
        (cur_err  )->r += r * 7;

        nxt_err++;
    }
}

void DithGray8to16( WORD* pbDest, const BYTE* pbSrc, int nDestPitch, 
   int nSrcPitch, ERRBUF* pCurrentError, ERRBUF* pNextError, UINT x, 
   UINT cx, UINT y, int cy )
{
    int dy;

    cx += x;

    if (cy < 0)
    {
        dy = -1;
        cy *= -1;
    }
    else
    {
        dy = 1;
    }

    if (y & 1)
    {
        SwapError( &pCurrentError, &pNextError );
    }
    while (cy)
    {
        DithScanGray8to16( pbDest, pbSrc, pCurrentError, pNextError, x, cx, y );

        ZeroError( pCurrentError, cx );
        SwapError( &pCurrentError, &pNextError );

        *(BYTE **)&pbSrc += nSrcPitch;
        *(BYTE **)&pbDest += nDestPitch;
        y += dy;
        cy--;
    }
}

INLINE void DithScanGray8to15( WORD* dst, const BYTE* src,
   ERRBUF* cur_err, ERRBUF* nxt_err, UINT x, UINT xl, UINT y )
{
    UINT *row = Get555HalftoneRow(y);

    for (; x < xl; ++src, x++)
    {
        register WORD wColor;
        register BYTE *tbl;
        register int r;
        register int g;
        register int b;
        int bSrc;

        bSrc = (int)*src;
        r = Clamp8(bSrc + cur_err->r / 16);
        g = Clamp8(bSrc + cur_err->g / 16);
        b = Clamp8(bSrc + cur_err->b / 16);
        cur_err++;

        tbl = Get555HalftoneTable(row, x);
        wColor = (*dst++ = rgb555(tbl[r], tbl[g], tbl[b]));

        b -= (int)aRound5to8[wColor & 0x1f];
        (nxt_err+1)->b += b * 1;
        (nxt_err-1)->b += b * 3;
        (nxt_err  )->b += b * 5;
        (cur_err  )->b += b * 7;

        g -= (int)aRound5to8[(wColor >> 5) & 0x1f];
        (nxt_err+1)->g += g * 1;
        (nxt_err-1)->g += g * 3;
        (nxt_err  )->g += g * 5;
        (cur_err  )->g += g * 7;

        r -= (int)aRound5to8[(wColor >> 10) & 0x1f];
        (nxt_err+1)->r += r * 1;
        (nxt_err-1)->r += r * 3;
        (nxt_err  )->r += r * 5;
        (cur_err  )->r += r * 7;

        nxt_err++;
    }
}

void DithGray8to15( WORD* pbDest, const BYTE* pbSrc, int nDestPitch, 
   int nSrcPitch, ERRBUF* pCurrentError, ERRBUF* pNextError, UINT x, 
   UINT cx, UINT y, int cy )
{
    int dy;

    cx += x;

    if (cy < 0)
    {
        dy = -1;
        cy *= -1;
    }
    else
    {
        dy = 1;
    }

    if (y & 1)
    {
        SwapError( &pCurrentError, &pNextError );
    }
    while (cy)
    {
        DithScanGray8to15( pbDest, pbSrc, pCurrentError, pNextError, x, cx, y );

        ZeroError( pCurrentError, cx );
        SwapError( &pCurrentError, &pNextError );

        *(BYTE **)&pbSrc += nSrcPitch;
        *(BYTE **)&pbDest += nDestPitch;
        y += dy;
        cy--;
    }
}

#ifdef UNIX
INLINE void DithScanGray8to1( BYTE* pbDest, const BYTE* pbSrc,
   ERRBUF* pCurrentError, ERRBUF* pNextError, UINT x, UINT xl, UINT y )
{
    BYTE bSrc;
    BYTE bDest;
    register BYTE byOut = 0;

    for(; x < xl; pbSrc++, x++ )
    {
        int r;
        int g;
        int b;
        int v;

        bSrc = *pbSrc;
        r = Clamp8( (int)bSrc + pCurrentError->r/16 );
        g = Clamp8( (int)bSrc + pCurrentError->g/16 );
        b = Clamp8( (int)bSrc + pCurrentError->b/16 );
        v = (r * 30 + g * 59 + b * 11) / 100;
        v = (v > 127) ? 255 : 0;
        pCurrentError++;

        byOut = (byOut << 1) | (v & 1);
        if ((x & 7) == 7)
        {
            *pbDest++ = byOut;
            byOut = 0;
        }
        
        r -= v;
        (pNextError+1)->r += r;
        (pNextError-1)->r += r * 3;
        (pNextError)->r += r * 5;
        (pCurrentError)->r += r * 7;

        g -= v;
        (pNextError+1)->g += g;
        (pNextError-1)->g += g * 3;
        (pNextError)->g += g * 5;
        (pCurrentError)->g += g * 7;

        b -= v;
        (pNextError+1)->b += b;
        (pNextError-1)->b += b * 3;
        (pNextError)->b += b * 5;
        (pCurrentError)->b += b * 7;

        pNextError++;
    }

    if (x & 7)
    {
        *pbDest++ = byOut << (8 - (x & 7));
    }
    
}

void DithGray8to1( BYTE* pbDest, const BYTE* pbSrc, int nDestPitch, 
   int nSrcPitch, ERRBUF* pCurrentError, ERRBUF* pNextError, 
   UINT x, UINT cx, UINT y, int cy )
{
    int dy;

    cx += x;

    if (cy < 0)
    {
        dy = -1;
        cy *= -1;
    }
    else
    {
        dy = 1;
    }

    if (y & 1)
    {
        SwapError( &pCurrentError, &pNextError );
    }
    while (cy)
    {
        DithScanGray8to1( pbDest, pbSrc, pCurrentError, pNextError, x, cx, y );

        ZeroError( pCurrentError, cx );
        SwapError( &pCurrentError, &pNextError );

        *(BYTE **)&pbSrc += nSrcPitch;
        *(BYTE **)&pbDest += nDestPitch;
        y += dy;
        cy--;
    }
}

///////////////////////////////////////////////////////////////////////////////
//
// Dith24rto1()                                            24bpp to 1bpp dither.
//
// Computes the 24bpp source color by combining the source pixel's color with
// accumulated error for the pixel.  Halftones this 24bpp value to a monochrome
// color.  Uses threshold of 128 to determine the output color for the pixel.  
// Uses the destination color to compute and accumulates error for neighboring 
// pixels.
//
///////////////////////////////////////////////////////////////////////////////

INLINE void DithScan24rto1(BYTE *dst, const BYTE *src, ERRBUF *cur_err, ERRBUF *nxt_err, UINT x, UINT xl, UINT y)
{
    register BYTE byOut = 0;

    for (; x < xl; src += 3, x++)
    {
        register int r;
        register int g;
        register int b;
        register int v;

        r = Clamp8((int)src[0] + cur_err->r / 16);
        g = Clamp8((int)src[1] + cur_err->g / 16);
        b = Clamp8((int)src[2] + cur_err->b / 16);
        v = (r * 30 + g * 59 + b * 11) / 100;
        v = (v > 127) ? 255 : 0;
        cur_err++;

        byOut = (byOut << 1) | (v & 1);
        if ((x & 7) == 7)
        {
            *dst++ = byOut;
            byOut = 0;
        }

        r -= v;
        (nxt_err+1)->r += r;
        (nxt_err-1)->r += r * 3;
        (nxt_err  )->r += r * 5;
        (cur_err  )->r += r * 7;

        g -= v;
        (nxt_err+1)->g += g;
        (nxt_err-1)->g += g * 3;
        (nxt_err  )->g += g * 5;
        (cur_err  )->g += g * 7;

        b -= v;
        (nxt_err+1)->b += b;
        (nxt_err-1)->b += b * 3;
        (nxt_err  )->b += b * 5;
        (cur_err  )->b += b * 7;

        nxt_err++;
    }

    if (x & 7)
    {
        *dst++ = byOut << (8 - (x & 7));
    }
}

void Dith24rto1(BYTE *dst, const BYTE *src, int dst_next_scan,
    int src_next_scan, ERRBUF *cur_err, ERRBUF *nxt_err, 
    UINT x, UINT cx, UINT y, int cy)
{
    int dy;

    cx += x;

    if (cy < 0)
    {
        dy = -1;
        cy *= -1;
    }
    else
        dy = 1;

    if (y & 1)
        SwapError(&cur_err, &nxt_err);

    while (cy)
    {
        DithScan24rto1(dst, src, cur_err, nxt_err, x, cx, y);

        ZeroError(cur_err, cx);
        SwapError(&cur_err, &nxt_err);

        *(BYTE **)&src += src_next_scan;
        *(BYTE **)&dst += dst_next_scan;
        y += dy;
        cy--;
    }
}
#endif

#ifndef WIN16

class CIntDitherer : public IIntDitherer
{
public:

    DECLARE_MEMALLOC_NEW_DELETE(Mt(CIntDitherer))

    CIntDitherer();
    
    // IUnknown members

    STDMETHOD(QueryInterface)(REFIID, void **);
    STDMETHOD_(ULONG,AddRef)();
    STDMETHOD_(ULONG,Release)();

    // IIntDitherer members
    
    STDMETHOD(DitherTo8bpp)( BYTE * pDestBits, LONG nDestPitch, 
                    BYTE * pSrcBits, LONG nSrcPitch, REFGUID bfidSrc, 
                    RGBQUAD * prgbDestColors, RGBQUAD * prgbSrcColors,
                    BYTE * pbDestInvMap,
                    LONG x, LONG y, LONG cx, LONG cy,
                    LONG lDestTrans, LONG lSrcTrans);

public:
    ULONG   m_cRef;
};

CIntDitherer::CIntDitherer()
{
    m_cRef = 1;
}

STDMETHODIMP
CIntDitherer::QueryInterface(REFIID riid, void ** ppv)
{
    if (riid == IID_IIntDitherer || riid == IID_IUnknown)
    {
        *ppv = (IUnknown *)this;
        ((LPUNKNOWN)*ppv)->AddRef();
        return(S_OK);
    }
    else
    {
        *ppv = NULL;
        return(E_NOINTERFACE);
    }
}

STDMETHODIMP_(ULONG)
CIntDitherer::AddRef()
{
    return(++m_cRef);
}

STDMETHODIMP_(ULONG)
CIntDitherer::Release()
{
    --m_cRef;
    if (m_cRef == 0)
    {
        delete this;
        return 0;
    }

    return m_cRef;
}

HRESULT CIntDitherer::DitherTo8bpp(  BYTE * pDestBits, LONG nDestPitch, 
                    BYTE * pSrcBits, LONG nSrcPitch, REFGUID bfidSrc, 
                    RGBQUAD * prgbDestColors, RGBQUAD * prgbSrcColors,
                    BYTE * pbDestInvMap,
                    LONG x, LONG y, LONG cx, LONG cy,
                    LONG lDestTrans, LONG lSrcTrans)
{
    return DitherTo8(pDestBits, nDestPitch, pSrcBits, nSrcPitch, bfidSrc, 
                    prgbDestColors, prgbSrcColors, pbDestInvMap,
                    x, y, cx, cy, lDestTrans, lSrcTrans);
}
#endif // ndef WIN16

HRESULT DitherTo8(  BYTE * pDestBits, LONG nDestPitch, 
                    BYTE * pSrcBits, LONG nSrcPitch, REFGUID bfidSrc, 
                    RGBQUAD * prgbDestColors, RGBQUAD * prgbSrcColors,
                    BYTE * pbDestInvMap,
                    LONG x, LONG y, LONG cx, LONG cy,
                    LONG lDestTrans, LONG lSrcTrans)
{
    ERRBUF* m_pErrBuf1;
    ERRBUF* m_pErrBuf2;

    HRESULT hr;

    hr = AllocDitherBuffers(cx, &m_pErrBuf1, &m_pErrBuf2);
    if (FAILED(hr))
        return hr;
        
    if (bfidSrc == BFID_RGB_24)
    {
        Dith24to8( pDestBits, pSrcBits, nDestPitch, nSrcPitch, 
            prgbDestColors, pbDestInvMap, 
            m_pErrBuf1, m_pErrBuf2, x, cx, y, cy );
    }
    else if (bfidSrc == BFID_RGB_555)
    {
        Dith15to8( pDestBits, (WORD *)pSrcBits, nDestPitch, nSrcPitch,
            prgbDestColors, pbDestInvMap,
            m_pErrBuf1, m_pErrBuf2, x, cx, y, cy );
    }
    else if (bfidSrc == BFID_RGB_565)
    {
        Dith16to8( pDestBits, (WORD *)pSrcBits, nDestPitch, nSrcPitch,
            prgbDestColors, pbDestInvMap,
            m_pErrBuf1, m_pErrBuf2, x, cx, y, cy );
    }
    else if (bfidSrc == BFID_RGB_8)
    {
        if (lDestTrans == -1 || lSrcTrans == -1)
        {
            Dith8to8( pDestBits, pSrcBits, nDestPitch, nSrcPitch,
                prgbSrcColors, prgbDestColors, pbDestInvMap, 
                m_pErrBuf1, m_pErrBuf2, x, cx, y, cy );
        }
        else
        {
            Dith8to8t( pDestBits, pSrcBits, nDestPitch, nSrcPitch,
                prgbSrcColors, prgbDestColors, pbDestInvMap, 
                m_pErrBuf1, m_pErrBuf2, x, cx, y, cy, (BYTE)lDestTrans, (BYTE)lSrcTrans );
        }
    }
    else
    {
        hr = E_FAIL;
    }

    FreeDitherBuffers(m_pErrBuf1, m_pErrBuf2);
    
    return hr;
}

HRESULT AllocDitherBuffers(LONG cx, ERRBUF **ppBuf1, ERRBUF **ppBuf2)
{
    ERRBUF *pBuf;

    *ppBuf1 = *ppBuf2 = NULL;
    
    pBuf = (ERRBUF *)MemAllocClear(Mt(ImgDithBufs), (cx+2)*2*sizeof(ERRBUF));
    if (pBuf == NULL)
        return E_OUTOFMEMORY;

    *ppBuf1 = &pBuf[1];
    *ppBuf2 = &pBuf[cx+3];

    return S_OK;       
}

void FreeDitherBuffers(ERRBUF *pBuf1, ERRBUF *pBuf2)
{
    MemFree(&pBuf1[-1]);
}

HRESULT
CreateIIntDitherer(IUnknown * pUnkOuter, IUnknown **ppUnk)
{
    if (pUnkOuter != NULL)
    {
        *ppUnk = NULL;
        return(CLASS_E_NOAGGREGATION);
    }

    CIntDitherer * pDitherer = new CIntDitherer;

    *ppUnk = pDitherer;

    RRETURN(pDitherer ? S_OK : E_OUTOFMEMORY);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\display\xgdi.cxx ===
/*****************************************************************************
*
*   xgdi.cxx
*
*   This file contains the implementation of the transforming GDI fns.
*
*   Ported from Quill on 5/20/99 - alexmog
*
*   Created: 12/29/93 - warrenb
*
*   Copyright 1990-1995 Microsoft Corporation.  All rights reserved.
*   Microsoft confidential.
*
*****************************************************************************/

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_MATH_H_
#define X_MATH_H_
#include <math.h>
#endif

#ifndef X_XGDI2_HXX_
#define X_XGDI2_HXX_
#include "xgdi2.hxx"
#endif

#ifndef X_DISPGDI16BIT_HXX_
#define X_DISPGDI16BIT_HXX_
#include "dispgdi16bit.hxx"
#endif

#ifndef X_DISPSURFACE_HXX_
#define X_DISPSURFACE_HXX_
#include "dispsurface.hxx"
#endif

#ifndef X__FONT_H_
#define X__FONT_H_
#include "_font.h"
#endif

#ifndef X_DDRAW_H_
#define X_DDRAW_H_
#include "ddraw.h"
#endif

#ifndef X_DDRAWEX_H_
#define X_DDRAWEX_H_
#include <ddrawex.h>
#endif

extern const ZERO_STRUCTS     g_Zero;
extern IDirectDraw *    g_pDirectDraw;

MtDefine(XHDC, DisplayTree, "XHDC");
MtDefine(XHDC_LocalBitmaps, XHDC, "XHDC local bitmaps");
MtDefine(CTransformWidthsArray, DisplayTree, "width space allocated for transformations");
MtExtern(Mem);

DeclareTag(tagXFormFont, "Font", "XFormFont trace");

class CNewWidths : public CStackDataAry<INT, 100>
{
public:
    DECLARE_MEMALLOC_NEW_DELETE(Mt(Mem))
    DECLARE_MEMMETER_NEW;
    CNewWidths() : CStackDataAry<INT,100>(Mt(CTransformWidthsArray)){}
    INT *GetWidths(INT *lpdxdOriginal) { return lpdxdOriginal ? &Item(0) : NULL; }
    void TransformWidthsArray(INT *lpdxd, UINT cch, double scf);
};

class CNewOffsets : public CStackDataAry<GOFFSET, 50>
{
public:
    DECLARE_MEMALLOC_NEW_DELETE(Mt(Mem))
    DECLARE_MEMMETER_NEW;
    CNewOffsets() : CStackDataAry<GOFFSET,50>(Mt(CTransformWidthsArray)){}
    GOFFSET *GetOffsets(GOFFSET *pO) { return pO ? &Item(0) : NULL; }
    void TransformOffsetsArray(GOFFSET *pOffset, UINT cch, double sx, double sy);
};

static void RotateBitmap(const BITMAP& bmSrc, BITMAP& bmDst, int rotation);

ExternTag(tagFilterPaintScreen);

#ifdef USEADVANCEDMODE
DeclareTag(tagEmulateTransform, "Display:EmulateTransform", "Emulate Transformations on WinNT");

inline BOOL EmulateTransform()
{
    return g_dwPlatformID != VER_PLATFORM_WIN32_NT
        WHEN_DBG(|| IsTagEnabled(tagEmulateTransform)) ;
}

class CAdvancedDC
{
public:
    CAdvancedDC(const XHDC* pxhdc)
    {
        _pSurface = pxhdc->pSurface();
        if (_pSurface)
        {
            const CWorldTransform* pTransform = _pSurface->GetWorldTransform();
            Assert(pTransform);
            _hdc = _pSurface->GetRawDC();
            Assert(_hdc);
            // set advanced mode the first time we encounter an advanced transform,
            // and never go back!
            ::SetGraphicsMode(_hdc, GM_ADVANCED);
            ::GetWorldTransform(_hdc, &_xf);
            Assert(_xf.eM11==1.0f && _xf.eM12==0.0f &&
                   _xf.eM21==0.0f && _xf.eM22==1.0f &&
                   _xf.eDx ==0.0f && _xf.eDy ==0.0f);
            ::SetWorldTransform(_hdc, pTransform->GetXform());
        }
        else
        {
            _hdc = pxhdc->hdc();
        }
    }
    
    ~CAdvancedDC()
    {
        if (_pSurface)
            ::SetWorldTransform(_hdc, &_xf);
    }
    
    operator HDC()
    {
        return _hdc;
    }
    
private:
    const CDispSurface* _pSurface;
    HDC     _hdc;
    XFORM   _xf;
};
#endif


class CXFormFont
{
public:
#if DBG==1
    CXFormFont(const XHDC* pxhdc, BOOL fStockFont = FALSE);
#else
    CXFormFont(const XHDC* pxhdc);
#endif
    ~CXFormFont();

private:
    HFONT _hFontOld;
    HFONT _hFontNew;
    const XHDC *_pxhdc;
};

inline static void Translate(const SIZE* psizeOffset, int* px, int* py)
{
    *px += psizeOffset->cx;
    *py += psizeOffset->cy;
    CDispGdi16Bit::Assert16Bit(*px, *py);
}

inline static void Translate(const SIZE* psizeOffset, int* px1, int* py1, int* px2, int* py2)
{
    Translate(psizeOffset, px1, py1);
    Translate(psizeOffset, px2, py2);
}

inline static void Translate(const SIZE* psizeOffset, LONG* px, LONG* py)
{
    *px += psizeOffset->cx;
    *py += psizeOffset->cy;
    CDispGdi16Bit::Assert16Bit(*px, *py);
}

inline static void Translate(const SIZE* psizeOffset, LONG* px1, LONG* py1, LONG* px2, LONG* py2)
{
    Translate(psizeOffset, px1, py1);
    Translate(psizeOffset, px2, py2);
}

inline static void Translate(const SIZE* psizeOffset, POINT* ppt)
{
    ppt->x += psizeOffset->cx;
    ppt->y += psizeOffset->cy;
    CDispGdi16Bit::Assert16Bit(*ppt);
}

inline static void Translate(const SIZE* psizeOffset, RECT* prc)
{
    Translate(psizeOffset, &prc->left, &prc->top);
    Translate(psizeOffset, &prc->right, &prc->bottom);
}

static void Translate(const SIZE* psizeOffset, POINT* ppt, int cpt)
{
    for (; cpt > 0; ppt++, cpt--)
    {
        Translate(psizeOffset, ppt);
    }
}

// GDI MoveTo and LineTo fill in the pixel below and to the right of the
// given point.  If we've done a rotation, we actually want to fill in
// a different pixel.  For example, after rotation by 270 degrees we want
// to fill in the pixel below and to the *left* of the point.  This function
// makes the necessary adjustment.

void
XHDC::TransformPtWithCorrection(POINT *ppt) const
{
    ANG ang = AngNormalize(transform().GetAngle()) + (ang90 / 2);

    TransformPt(ppt);

    // rotations of 180 or 270 degrees require adjusting x by -1.  We'll
    // extend that to rotations between 135 and 315 degrees, for generality.
    if (ang180 <= ang && ang < ang360)
        ppt->x -= 1;

    // We need to adjust y for 90 and 180 degrees.  Extend to angles between
    // 45 and 225.  The boundaries are at 45-degree marks to move any possible
    // discontinuities away from the common cases of 90-degree rotations.
    // And we add 45 degrees first so we can use the handy ang* constants.
    if (ang90 <= ang && ang < ang270)
        ppt->y -= 1;
}


BOOL
XHDC::TransformRect(CRect *prc) const
{
    if (!prc->IsEmpty())
    {
        RRC rrc;
        RrcFromMatRc(&rrc, &mat(), prc);
        rrc.GetBounds(prc);
        return rrc.IsAxisAlignedRect();
    }
    else
    {
        return TRUE;
    }
}


/****************************************************************************
*
*  %%Function: GetObjectType
*
* This function returns the GDI object type of the DC.  Because ::GetObjectType
*   is slow and throws exceptions on W9x, we compute the type once (the first
*   time we need it), and cache the result.
*
****************************************************************************/
DWORD
XHDC::GetObjectType() const
{
    if (_dwObjType == 0)
    {
#ifdef COMPILER_UNDERSTANDS_MUTABLE
        // TODO (sambent) _dwObjType is marked mutable, but VC still
        // won't let me change it from a const method.  The doc (for VC 5.0)
        // says this is supposed to work, goldarn it.
        _dwObjType = ::GetObjectType(hdc());    // _dwObjType is mutable
#else
        // here's the standard workaround.  It's a hack...
        XHDC *pThis = const_cast<XHDC*>(this);
        pThis->_dwObjType = ::GetObjectType(hdc());
#endif
    }

    return _dwObjType;
}


/****************************************************************************
*
*  %%Function: CptGetArcPoints
*
*  %%Owner:    t-erick
*
*  %%Reviewed: 00/00/00
*
* This function fills a buffer with the points that describe a single arc.
*  If the arc data passed in describes a straight segment, only one point
*  is placed in the buffer, that point being the same as the first point
*  in the arc data buffer.
*
****************************************************************************/
#define cptMaxInc       5
#define cptPolyMax      160
#define cptOpenPolyMax  (cptPolyMax+1)
#define cptClipPolyMax  (2 * cptOpenPolyMax)
#define iptPyMax        cptPolyMax
#define radTwoPI        (2 * PI)

int CptGetArcPoints(CPoint *pptBuf, CPoint *pptArcData, int cptMax, int dzlThreshold, BOOL fForRotGdi)
{
    struct tagArcData
    {
        CPoint ptStart;
        CPoint ptCenter;
        int dxlRad;
        int dylRad;
        CPoint ptEnd;
    } ArcData;
    
    float radStartAngle;
    float radEndAngle;
    float radTotAngle;
    float radDegInc = 0, radCurrDeg;
    float radCosDegInc;
    int  ipt;                // Index into buffer for polygon points
    long lxTemp, lyTemp;
    int  dxlRadAbs;
    int  dylRadAbs;
    long dzlRadLargest;

    // Assert that the start & end points are valid

    Assert( cptMax && cptMax < iptPyMax );

    if (!fForRotGdi)
        // Always copy segment starting point directly
        pptBuf[0] = pptArcData[0];
    else
        cptMax--; // because we'll compute last point too

    // Copy arc data into local buffer so we can change it at will

    BltLpb(pptArcData, &ArcData, sizeof(ArcData));

    // Since we have an arc, get more detailed info

    dxlRadAbs = abs(ArcData.dxlRad);
    dylRadAbs = abs(ArcData.dylRad);
    dzlRadLargest = max(dxlRadAbs, dylRadAbs);

    // Translate start & end points of ellipse to be centered at the origin

    ArcData.ptStart.x -= ArcData.ptCenter.x;
    ArcData.ptStart.y -= ArcData.ptCenter.y;
    ArcData.ptEnd.x   -= ArcData.ptCenter.x;
    ArcData.ptEnd.y   -= ArcData.ptCenter.y;

    // Scale radii so that points lie on a circle

    if( dylRadAbs > dxlRadAbs && ArcData.dxlRad != 0 )
        {
        ArcData.ptStart.x = MulDivR( dylRadAbs, ArcData.ptStart.x, dxlRadAbs );
        ArcData.ptEnd.x   = MulDivR( dylRadAbs, ArcData.ptEnd.x,   dxlRadAbs );
        }
    else if( dxlRadAbs > dylRadAbs && ArcData.dylRad != 0 )
        {
        ArcData.ptStart.y = MulDivR( dxlRadAbs, ArcData.ptStart.y, dylRadAbs );
        ArcData.ptEnd.y   = MulDivR( dxlRadAbs, ArcData.ptEnd.y,   dylRadAbs );
        }

    // Calculate total degree sweep for arc

    radStartAngle = atan2((float)ArcData.ptStart.y, (float)ArcData.ptStart.x);
    radEndAngle = atan2((float)ArcData.ptEnd.y, (float)ArcData.ptEnd.x);

    // Normalize angles

    if (ArcData.dxlRad > 0)
        radStartAngle += radTwoPI;
    else
        radStartAngle -= radTwoPI;

    radTotAngle = radEndAngle;
    radTotAngle -= radStartAngle;

    while (radTotAngle > radTwoPI)
        radTotAngle -= radTwoPI;
    while (radTotAngle < -radTwoPI)
        radTotAngle += radTwoPI;

    Assert(radTotAngle >= -radTwoPI && radTotAngle <= radTwoPI);

    // Calculate degree increment according to resolution of output device

    if (dzlRadLargest != 0)
        {
        // Keep adjusting the max. point count until the error in the
        // arc is greater than one device unit

        do  {
            cptMax -= cptMaxInc;

            radDegInc = radTotAngle;
            radDegInc /= cptMax;

            if (radDegInc < 0)
            	radDegInc = -radDegInc;
            radDegInc /= 2;
            radCosDegInc = cos(radDegInc);

            } while ((dzlRadLargest * (1 - radCosDegInc)) < dzlThreshold &&
                     cptMax > cptMaxInc);

        // We went one step too far, so get a more accurate point count

        cptMax += cptMaxInc;

        // Calculate final degree increment

        radDegInc = radTotAngle;
        radDegInc /= cptMax;

        } /* if there is a radius we need to calculate a valid increment */

    if (fForRotGdi)
        cptMax++; // radDegInc based on 1 less so endpoint will be output

    // Calculate actual points

    for (ipt = (fForRotGdi ? 0 : 1) ; ipt < cptMax; ipt++)
        {
        radCurrDeg = radDegInc;
        radCurrDeg *= ipt;
        radCurrDeg += radStartAngle;

        while (radCurrDeg >= radTwoPI)
            radCurrDeg -= radTwoPI;
        while (radCurrDeg < 0)
            radCurrDeg += radTwoPI;

        // Calculate ellipse X at current degree

        lxTemp = dxlRadAbs * cos(radCurrDeg);

        // Calculate ellipse Y at current degree

        lyTemp = dylRadAbs * sin(radCurrDeg);

        // transform point back to original ellipse center

        lxTemp += ArcData.ptCenter.x;
        lyTemp += ArcData.ptCenter.y;

        // Store point

        pptBuf[ipt].x = lxTemp;
        pptBuf[ipt].y = lyTemp;

        } /* for looping through arc sweep, calculating points */

#undef cptMaxInc

    Assert(ipt <= cptMax);
    return ipt;

} /* CptGetArcPoints */


/****************************************************************************
*
*                         BEZIER/POLYGON HELPER FUNCTIONS
*
* Module internal fn prototypes for Bezier/Polygon helper functions
*****************************************************************************/

// max. 5 levels of recursion / segment (32 points)
#define MAX_BEZIER_RECURSE  (5)

typedef struct
    {
    CPoint pt1;
    CPoint pt2;
    CPoint pt3;
    int iLevel;
    } GPT;

/****************************************************************************
* %%Function: CptBezierLine   %%Owner:kennyy   Reviewed:0/0/0
*
* Generates a Bezier segment within the specified tolerance and stack limit,
* returning the number of points generated. Returns 0 if it can't fit the line
* into the buffer with these parameters.
*****************************************************************************/
int CptBezierLine(CPoint *rgptvControl, CPoint *rgptv, int cptMax, long dzlThreshold, int log2Cpt)
{
    CPoint ptvStart = rgptvControl[0];
    GPT gptvCur;
    GPT rggptvStack[6];
    int iStackDepth = 0;
    BOOL fSplit = fFalse;
    int cpt = 0;

    Assert(log2Cpt < 6);

    BltLpb(&rgptvControl[1], &gptvCur, sizeof(GPT));
    gptvCur.iLevel = 0;

    Assert(1 << log2Cpt <= cptMax);

    while (cpt < cptMax)
        {
        if (gptvCur.iLevel < log2Cpt)
            {
            GPT gptvL;
            CPoint ptvH;

            gptvL.pt1.x = (ptvStart.x + gptvCur.pt1.x) >> 1;
            gptvL.pt1.y = (ptvStart.y + gptvCur.pt1.y) >> 1;
            ptvH.x = (gptvCur.pt1.x + gptvCur.pt2.x) >> 1;
            ptvH.y = (gptvCur.pt1.y + gptvCur.pt2.y) >> 1;
            gptvL.pt2.x = (gptvL.pt1.x + ptvH.x) >> 1;
            gptvL.pt2.y = (gptvL.pt1.y + ptvH.y) >> 1;
            gptvCur.pt2.x = (gptvCur.pt2.x + gptvCur.pt3.x) >> 1;
            gptvCur.pt2.y = (gptvCur.pt2.y + gptvCur.pt3.y) >> 1;
            gptvCur.pt1.x = (ptvH.x + gptvCur.pt2.x) >> 1;
            gptvCur.pt1.y = (ptvH.y + gptvCur.pt2.y) >> 1;
            gptvL.pt3.x = (gptvL.pt2.x + gptvCur.pt1.x) >> 1;
            gptvL.pt3.y = (gptvL.pt2.y + gptvCur.pt1.y) >> 1;

            if ((labs(gptvL.pt3.x - ((gptvCur.pt3.x + ptvStart.x) >> 1))+
                 labs(gptvL.pt3.y - ((gptvCur.pt3.y + ptvStart.y) >> 1)) >= dzlThreshold)
                 || !fSplit)
                {
                gptvL.iLevel = ++gptvCur.iLevel;
                rggptvStack[iStackDepth++] = gptvCur;
                gptvCur = gptvL;
                fSplit = fTrue;
                continue;
                }
            }
        rgptv[cpt++] = gptvCur.pt3;
        if (iStackDepth == 0)
            return cpt;
        ptvStart = gptvCur.pt3;
        gptvCur = rggptvStack[--iStackDepth];
        }
        
    return 0;
}


/****************************************************************************
*
*                         BEZIER/POLYGON HELPER FUNCTIONS
*
* The following are functions which make the generation of arbitrary bezier
* polygons easier.
*****************************************************************************/


/****************************************************************************
* %%Function:AddBezierPts       %%Owner:warrenb             Reviewed:03/01/94
*
* Adds up to 2^cPts to the Polygon Array passed in rgpt. The points specified
* by the bezier end & control points passed. starting at ipt the value of ipt
* is updated to reflect the current index.
*****************************************************************************/
void AddBezierPts(CPoint rgpt[], int *pipt,
                  const CPoint& ptEnd1, const CPoint& ptEnd2,
                  const CPoint& ptCtrl1, const CPoint& ptCtrl2, int cPtsLog2)
{
    CPoint rgptControl[4];
    int cpt;
    int ipt;

    // don't allow more than 32pts per bezier seg
    Assert(cPtsLog2<6);

    rgptControl[0] = ptEnd1;
    rgptControl[1] = ptCtrl1;
    rgptControl[2] = ptCtrl2;
    rgptControl[3] = ptEnd2;

    // get better precision: mult by 256
    for (ipt = 0; ipt < 4; ipt++)
        {
        Assert(labs(rgptControl[ipt].x <= 0x007FFFFF));
        Assert(labs(rgptControl[ipt].y <= 0x007FFFFF));
        rgptControl[ipt].x <<= 8;
        rgptControl[ipt].y <<= 8;
        }

    // Generate to 1 pixel tolerance
    cpt = CptBezierLine(rgptControl, &(rgpt[*pipt]), 1 << cPtsLog2, 256, cPtsLog2);
    Assert(cpt != 0);

    // Scale back
    for (ipt = 0; ipt < cpt; ipt++)
        {
        rgpt[*pipt + ipt].x >>= 8;
        rgpt[*pipt + ipt].y >>= 8;
        }

    *pipt += cpt;
} // AddBezierPts

/****************************************************************************
* %%Function:FillPolygonRoundRect  %%Owner:warrenb         Reviewed:03/01/94
*
* Creates the points for the round rect passed in the passed polygon array.
* Called by RotRoundedRect & CreateRoundRectRgn. returns # pts used
*****************************************************************************/
#define iptEnd1   0
#define iptEnd2   1
#define iptCtl1   2
#define iptCtl2   3

int XHDC::FillPolygonRoundRect(CPoint  *rgptPolygon,
                               int ptdvLeft, int ptdvTop,
                               int ptdvRight, int ptdvBottom,
                               int nWidthEllipse, int nHeightEllipse) const
{
    CRect  rc;
    int nWidthCtrl;
    int nHeightCtrl;
    CPoint  rgptBez[4];
    int iptPolygon;

    if (ptdvTop > ptdvBottom)
        SwapVal(ptdvTop, ptdvBottom);
    if (ptdvLeft > ptdvRight)
        SwapVal(ptdvLeft, ptdvRight);

    nWidthEllipse  = min(ptdvRight - ptdvLeft, nWidthEllipse );
    nHeightEllipse = min(ptdvBottom - ptdvTop, nHeightEllipse );

    nWidthCtrl = (nWidthEllipse << 3) / 29;
    nHeightCtrl = (nHeightEllipse << 3) / 29;

    // half the height&width ellipses
    nWidthEllipse >>= 1;
    nHeightEllipse >>= 1;

    SetRc(&rc, ptdvLeft, ptdvTop, ptdvRight, ptdvBottom);

    iptPolygon = 0;

    // top left corner
    SetPt(&rgptBez[iptEnd1], rc.left, rc.top+nHeightEllipse);
    SetPt(&rgptBez[iptEnd2], rc.left + nWidthEllipse, rc.top);
    SetPt(&rgptBez[iptCtl1], rgptBez[iptEnd1].x, rgptBez[iptEnd1].y - nHeightCtrl);
    SetPt(&rgptBez[iptCtl2], rgptBez[iptEnd2].x - nWidthCtrl, rgptBez[iptEnd2].y);
    TransformRgpt(rgptBez, 4);
    rgptPolygon[iptPolygon++] = rgptBez[iptEnd1];
    AddBezierPts(&(rgptPolygon[0]), &iptPolygon,
                 rgptBez[iptEnd1], rgptBez[iptEnd2],
                 rgptBez[iptCtl1], rgptBez[iptCtl2], MAX_BEZIER_RECURSE);

    // top right corner
    SetPt(&rgptBez[iptEnd1], rc.right, rc.top + nHeightEllipse);
    SetPt(&rgptBez[iptEnd2], rc.right - nWidthEllipse, rc.top);
    SetPt(&rgptBez[iptCtl1], rgptBez[iptEnd1].x, rgptBez[iptEnd1].y - nHeightCtrl);
    SetPt(&rgptBez[iptCtl2], rgptBez[iptEnd2].x + nWidthCtrl, rgptBez[iptEnd2].y);
    TransformRgpt(rgptBez, 4);
    rgptPolygon[iptPolygon++] = rgptBez[iptEnd2];
    AddBezierPts(&(rgptPolygon[0]), &iptPolygon,
                 rgptBez[iptEnd2], rgptBez[iptEnd1],
                 rgptBez[iptCtl2], rgptBez[iptCtl1], MAX_BEZIER_RECURSE);

    // bottom right corner
    SetPt(&rgptBez[iptEnd1], rc.right, rc.bottom - nHeightEllipse);
    SetPt(&rgptBez[iptEnd2], rc.right - nWidthEllipse, rc.bottom);
    SetPt(&rgptBez[iptCtl1], rgptBez[iptEnd1].x, rgptBez[iptEnd1].y + nHeightCtrl);
    SetPt(&rgptBez[iptCtl2], rgptBez[iptEnd2].x + nWidthCtrl, rgptBez[iptEnd2].y);
    TransformRgpt(rgptBez, 4);
    rgptPolygon[iptPolygon++] = rgptBez[iptEnd1];
    AddBezierPts(&(rgptPolygon[0]), &iptPolygon,
                 rgptBez[iptEnd1], rgptBez[iptEnd2],
                 rgptBez[iptCtl1], rgptBez[iptCtl2], MAX_BEZIER_RECURSE);

    // bottom left corner
    SetPt(&rgptBez[iptEnd1], rc.left, rc.bottom - nHeightEllipse);
    SetPt(&rgptBez[iptEnd2], rc.left + nWidthEllipse, rc.bottom);
    SetPt(&rgptBez[iptCtl1], rgptBez[iptEnd1].x, rgptBez[iptEnd1].y + nHeightCtrl);
    SetPt(&rgptBez[iptCtl2], rgptBez[iptEnd2].x - nWidthCtrl, rgptBez[iptEnd2].y);
    TransformRgpt(rgptBez, 4);
    rgptPolygon[iptPolygon++] = rgptBez[iptEnd2];
    AddBezierPts(&(rgptPolygon[0]), &iptPolygon,
                 rgptBez[iptEnd2], rgptBez[iptEnd1],
                 rgptBez[iptCtl2], rgptBez[iptCtl1], MAX_BEZIER_RECURSE);

    return iptPolygon;
} // FillPolygonRoundRect

/****************************************************************************
* %%Function:FillPolygonEllipse  %%Owner:warrenb         Reviewed:03/01/94
*
* Creates the points for the else passed in the passed polygon array. Called
* by RotEllipse & CreateEllipticRgn. returns the number of points used
*****************************************************************************/
int XHDC::FillPolygonEllipse(CPoint  *rgptPolygon,
                             int xdvLeft, int ydvTop,
                             int xdvRight, int ydvBottom) const
{
    Assert(!IsOffsetOnly());

    CRect      rc;
    CPoint      rgptBez[4];
    int     iptPolygon;
    int     xMid, yMid, xCtrl, yCtrl;
    long    xWidth, yHeight;

    SetRc(&rc, xdvLeft, ydvTop, xdvRight, ydvBottom);

    // midpoints of rect
    xMid = (xdvLeft + xdvRight) >> 1;
    yMid = (ydvTop + ydvBottom) >> 1;

    // dimensions of rect
    xWidth = (long)(xdvRight - xdvLeft);
    yHeight = (long)(ydvBottom - ydvTop);

    // length of control points
    xCtrl = (int)((xWidth << 3L) / 29L);
    yCtrl = (int)((yHeight << 3L) / 29L);

    iptPolygon = 0;

    // 1st Quadrant
    SetPt(&rgptBez[iptEnd1], rc.left,		yMid);
    SetPt(&rgptBez[iptEnd2], xMid,			rc.top);
    SetPt(&rgptBez[iptCtl1], rc.left,		yMid - yCtrl);
    SetPt(&rgptBez[iptCtl2], xMid - xCtrl,	rc.top);
    TransformRgpt(rgptBez, 4);
    rgptPolygon[iptPolygon++] = rgptBez[0];
    AddBezierPts(&(rgptPolygon[0]), &iptPolygon,
                 rgptBez[iptEnd1], rgptBez[iptEnd2],
                 rgptBez[iptCtl1], rgptBez[iptCtl2], MAX_BEZIER_RECURSE);

    // 2nd Quadrant
    SetPt(&rgptBez[iptEnd1], rc.right,	yMid);
    SetPt(&rgptBez[iptEnd2], xMid,			rc.top);
    SetPt(&rgptBez[iptCtl1], rc.right,	yMid - yCtrl);
    SetPt(&rgptBez[iptCtl2], xMid + xCtrl,	rc.top);
    TransformRgpt(rgptBez, 4);
    AddBezierPts(&(rgptPolygon[0]), &iptPolygon,
                 rgptBez[iptEnd2], rgptBez[iptEnd1],
                 rgptBez[iptCtl2], rgptBez[iptCtl1], MAX_BEZIER_RECURSE);

    // 3rd Quadrant
    SetPt(&rgptBez[iptEnd1], rc.right,	yMid);
    SetPt(&rgptBez[iptEnd2], xMid,			rc.bottom);
    SetPt(&rgptBez[iptCtl2], xMid+xCtrl,	rc.bottom);
    SetPt(&rgptBez[iptCtl1], rc.right,	yMid + yCtrl);
    TransformRgpt(rgptBez, 4);
    AddBezierPts(&(rgptPolygon[0]), &iptPolygon,
                 rgptBez[iptEnd1], rgptBez[iptEnd2],
                 rgptBez[iptCtl1], rgptBez[iptCtl2], MAX_BEZIER_RECURSE);

    // Final Quadrant
    SetPt(&rgptBez[iptEnd1], rc.left,		yMid);
    SetPt(&rgptBez[iptEnd2], xMid,			rc.bottom);
    SetPt(&rgptBez[iptCtl2], xMid - xCtrl,	rc.bottom);
    SetPt(&rgptBez[iptCtl1], rc.left,		yMid + yCtrl);
    TransformRgpt(rgptBez, 4);
    AddBezierPts(&(rgptPolygon[0]), &iptPolygon,
                 rgptBez[iptEnd2], rgptBez[iptEnd1],
                 rgptBez[iptCtl2], rgptBez[iptCtl1], MAX_BEZIER_RECURSE);

    return iptPolygon - 1;
} // FillPolygonEllipse

/****************************************************************************
* %%Function:FillPolygonArc  %%Owner:warrenb         Reviewed:00/00/00
*
* Creates the points for the arc passed in the passed polygon array. Called
* by RotArc, RotPie & RotChord. returns the number of points used
*****************************************************************************/
int XHDC::FillPolygonArc(CPoint  *rgptPolygon,
                         int xdvLeft, int ydvTop,
                         int xdvRight, int ydvBottom,
                         int xdvArcStart, int ydvArcStart,
                         int xdvArcEnd, int ydvArcEnd) const
{
    Assert(!IsOffsetOnly());
    
    int ipt;
    int cpt;
    CPoint  ptBuf[4];

    ptBuf[0].x = xdvArcStart;
    ptBuf[0].y = ydvArcStart;
    ptBuf[1].x = (xdvLeft + xdvRight) / 2;
    ptBuf[1].y = (ydvTop + ydvBottom) / 2;
    ptBuf[2].x = Abs(xdvRight - xdvLeft) / 2;
    ptBuf[2].y = Abs(ydvBottom - ydvTop) / 2;
    ptBuf[3].x = xdvArcEnd;
    ptBuf[3].y = ydvArcEnd;

    // threshold is 1/2 of scaleup value
    cpt = CptGetArcPoints(rgptPolygon, ptBuf, 127, 1, fTrue);

    // Scale down
    for (ipt = 0; ipt < cpt; ipt++)
        {
        rgptPolygon[ipt].x;
        rgptPolygon[ipt].y;
        }

    TransformRgpt(rgptPolygon, cpt);

    return cpt;
} // FillPolygonArc

//
// Fill Polygon helper
//
inline BOOL FillPolygonHelper(HDC hdc, CPoint *rgpt, int cpt, HBRUSH hbr)
{
    BOOL fReturn;
    HBRUSH hbrOld = (HBRUSH)SelectObject(hdc, hbr);
    HPEN hpnOld = (HPEN)SelectObject(hdc, GetStockObject(NULL_PEN));
    fReturn = Polygon(hdc, rgpt, cpt);
    if (hpnOld != NULL)
        SelectObject(hdc, hpnOld);
    if (hbrOld != NULL)
        SelectObject(hdc, hbrOld);
    return fReturn;
}

/****************************************************************************
* %%Function: RotRoundRect        %%Owner:warrenb           Reviewed:03/01/94
*
* The rotated version of RoundRect. creates a rounded rectangle at the passed
* points influenced by the current rotation context with passed Corner
* Elliptical radii
*****************************************************************************/
BOOL XHDC::RoundRect(int xdvLeft, int ydvTop,
                     int xdvRight, int ydvBottom,
                     int nWidthEllipse, int nHeightEllipse) const
{
    Assert(hdc());

    const SIZE* psizeOffset = GetOffsetOnly();
    if (psizeOffset)
    {
        Translate(psizeOffset, &xdvLeft, &ydvTop, &xdvRight, &ydvBottom);
        return ::RoundRect(hdc(), xdvLeft, ydvTop, xdvRight, ydvBottom, nWidthEllipse, nHeightEllipse);
    }

#ifdef USEADVANCEDMODE
    if (!EmulateTransform())
    {
        CAdvancedDC adc(this);
        return ::RoundRect(adc, xdvLeft, ydvTop, xdvRight, ydvBottom, nWidthEllipse, nHeightEllipse);
    }
#endif

    CPoint rgptPolygon[133];
    int cpt = FillPolygonRoundRect(&rgptPolygon[0], xdvLeft, ydvTop,
                                   xdvRight - 1, ydvBottom - 1,
                                   nWidthEllipse, nHeightEllipse);
    
    CDispGdi16Bit::Assert16Bit((POINT *)rgptPolygon, cpt);
    return ::Polygon(hdc(), (POINT *)rgptPolygon, cpt);
} // RotRoundRect

/****************************************************************************
* %%Function: RotMoveTo        %%Owner:warrenb           Reviewed:03/01/94
*
* The rotated version of MoveTo. A normal MoveTo influenced by the current
* rotation context. The pragma's are bizarre. Even though the MoveTo is
* declared to take ints I cannot type them to work. cf. the LineTo's below!
*****************************************************************************/
BOOL XHDC::MoveToEx(int x, int y, POINT* ppt) const
{
    Assert(hdc());
    Assert(ppt == NULL);    // we don't return this yet

    const SIZE* psizeOffset = GetOffsetOnly();
    if (psizeOffset)
    {
        Translate(psizeOffset, &x, &y);
        return ::MoveToEx(hdc(), x, y, NULL);
    }
    
#ifdef USEADVANCEDMODE
    if (!EmulateTransform())
    {
        CAdvancedDC adc(this);
        return ::MoveToEx(adc, x, y, NULL);
    }
#endif
    
    CPoint pt(x,y);
    TransformPtWithCorrection(&pt);
    return ::MoveToEx(hdc(), pt.x, pt.y, NULL);
} // RotMoveTo

/****************************************************************************
* %%Function: RotLineTo        %%Owner:warrenb           Reviewed:03/01/94
*
* The rotated version of LineTo. A normal LineTo influenced by the current
* rotation context
*****************************************************************************/
BOOL XHDC::LineTo(int x, int y) const
{
    Assert(hdc());

    const SIZE* psizeOffset = GetOffsetOnly();
    if (psizeOffset)
    {
        Translate(psizeOffset, &x, &y);
        return ::LineTo(hdc(), x, y);
    }

#ifdef USEADVANCEDMODE
    if (!EmulateTransform())
    {
        CAdvancedDC adc(this);
        return ::LineTo(adc, x, y);
    }
#endif
    
    CPoint pt(x,y);
    TransformPtWithCorrection(&pt);
    return ::LineTo(hdc(), pt.x, pt.y);
} // RotLineTo

/****************************************************************************
* %%Function: RotPolyline       %%Owner:warrenb           Reviewed:03/01/94
*
* The rotated version of Polyline. A normal Polyline influenced by the current
* rotation context
*
* This function is preceded by another version that takes a MGE.  Since
* a MGE isn't available to the caller and creating a MGE would more than
* double the size of the function I have opted to leave this as-is. -davidhoe
* 
* WLB note: currently destroys points in polyline...
*****************************************************************************/
BOOL XHDC::Polyline(POINT * ppt, int cpts) const
{
    Assert(hdc() && ppt && cpts >= 0);

    const SIZE* psizeOffset = GetOffsetOnly();
    if (psizeOffset)
    {
        Translate(psizeOffset, ppt, cpts);
        return ::Polyline(hdc(), ppt, cpts);
    }
    
#ifdef USEADVANCEDMODE
    if (!EmulateTransform())
    {
        CAdvancedDC adc(this);
        return ::Polyline(adc, ppt, cpts);
    }
#endif
    
    TransformRgpt(ppt, cpts);
    return ::Polyline(hdc(), (POINT *)ppt, cpts);
} // RotPolyline

/****************************************************************************
* %%Function: RotPolygon       %%Owner:warrenb           Reviewed:03/01/94
*
* The rotated version of Polygon. A normal Polygon influenced by the current
* rotation context
*
* WLB note: currently destroys points in polygon...
*****************************************************************************/
BOOL XHDC::Polygon(POINT * ppt, int cpt) const
{
    Assert(hdc());
    Assert(ppt && cpt >= 0);

    const SIZE* psizeOffset = GetOffsetOnly();
    if (psizeOffset)
    {
        Translate(psizeOffset, ppt, cpt);
        return ::Polygon(hdc(), ppt, cpt);
    }
    
#ifdef USEADVANCEDMODE
    if (!EmulateTransform())
    {
        CAdvancedDC adc(this);
        return ::Polygon(adc, ppt, cpt);
    }
#endif
    
    TransformRgpt(ppt, cpt);
    return ::Polygon(hdc(), ppt, cpt);
} // RotPolygon

/****************************************************************************
* %%Function: RotPolyPolygon     %%Owner:warrenb           Reviewed:03/01/94
*
* The rotated version of PolyPolygon. A normal PolyPolygon influenced by the
* current rotation context
*
* WLB note: currently destroys points in polygon...
*****************************************************************************/
BOOL XHDC::PolyPolygon(POINT * ppt, LPINT lpnPolyCounts, int cpoly) const
{
    Assert(hdc());
    Assert(ppt && lpnPolyCounts && cpoly >= 0);

    int ipoly;
    int npt = 0;

    for (ipoly = 0; ipoly < cpoly; ++ipoly)
        npt += lpnPolyCounts[ipoly];

    const SIZE* psizeOffset = GetOffsetOnly();
    if (psizeOffset)
    {
        Translate(psizeOffset, ppt, npt);
        return ::PolyPolygon(hdc(), (POINT *)ppt, lpnPolyCounts, cpoly);
    }
    
#ifdef USEADVANCEDMODE
    if (!EmulateTransform())
    {
        CAdvancedDC adc(this);
        return ::PolyPolygon(adc, (POINT *)ppt, lpnPolyCounts, cpoly);
    }
#endif
    
    TransformRgpt(ppt, npt);
    return ::PolyPolygon(hdc(), (POINT *)ppt, lpnPolyCounts, cpoly);
} // RotPolyPolygon

/****************************************************************************
* %%Function: RotEllipse %%Owner:warrenb     Reviewed:03/01/94
*
*****************************************************************************/
BOOL XHDC::Ellipse(int xdvLeft, int ydvTop, int xdvRight, int ydvBottom) const
{
    Assert(hdc());

    const SIZE* psizeOffset = GetOffsetOnly();
    if (psizeOffset)
    {
        Translate(psizeOffset, &xdvLeft, &ydvTop, &xdvRight, &ydvBottom);
        return ::Ellipse(hdc(), xdvLeft, ydvTop, xdvRight, ydvBottom);
    }
    
#ifdef USEADVANCEDMODE
    if (!EmulateTransform())
    {
        CAdvancedDC adc(this);
        return ::Ellipse(adc, xdvLeft, ydvTop, xdvRight, ydvBottom);
    }
#endif
    
    CPoint rgptPolygon[133];
    CPoint *pptPolygon = &rgptPolygon[0];
    int cpt;

    cpt = FillPolygonEllipse(pptPolygon, xdvLeft, ydvTop,
                             xdvRight - 1, ydvBottom - 1);

    CDispGdi16Bit::Assert16Bit(pptPolygon, cpt);
    return ::Polygon(hdc(), pptPolygon, cpt);
} // RotEllipse

/****************************************************************************
* %%Function: RotArc            %%Owner:warrenb             Reviewed:00/00/00
*
* The rotated version of Arc.
*****************************************************************************/
BOOL XHDC::Arc(int xdvLeft, int ydvTop, int xdvRight, int ydvBottom,
               int xdvArcStart, int ydvArcStart,
               int xdvArcEnd, int ydvArcEnd) const
{
    Assert(hdc());

    const SIZE* psizeOffset = GetOffsetOnly();
    if (psizeOffset)
    {
        Translate(psizeOffset, &xdvLeft, &ydvTop, &xdvRight, &ydvBottom);
        Translate(psizeOffset, &xdvArcStart, &ydvArcStart, &xdvArcEnd, &ydvArcEnd);
        return ::Arc(hdc(), xdvLeft, ydvTop, xdvRight, ydvBottom, xdvArcStart, ydvArcStart, xdvArcEnd, ydvArcEnd);
    }

#ifdef USEADVANCEDMODE
    if (!EmulateTransform())
    {
        CAdvancedDC adc(this);
        return ::Arc(adc, xdvLeft, ydvTop, xdvRight, ydvBottom, xdvArcStart, ydvArcStart, xdvArcEnd, ydvArcEnd);
    }
#endif
    
    CPoint  rgptPolygon[128];
    int cpt;

    cpt = FillPolygonArc(&rgptPolygon[0], xdvLeft, ydvTop, xdvRight, ydvBottom,
                         xdvArcStart, ydvArcStart, xdvArcEnd, ydvArcEnd);
    CDispGdi16Bit::Assert16Bit(xdvLeft, ydvTop, xdvRight, ydvBottom);
    CDispGdi16Bit::Assert16Bit(xdvArcStart, ydvArcStart, xdvArcEnd, ydvArcEnd);
    return ::Polyline(hdc(), (POINT *)rgptPolygon, cpt);
} // RotArc

/****************************************************************************
* %%Function: RotChord          %%Owner:warrenb             Reviewed:00/00/00
*
* The rotated version of Chord
*****************************************************************************/
BOOL XHDC::Chord(int xdvLeft, int ydvTop, int xdvRight, int ydvBottom,
                    int xdvArcStart, int ydvArcStart,
                    int xdvArcEnd, int ydvArcEnd) const
{
    Assert(hdc());

    const SIZE* psizeOffset = GetOffsetOnly();
    if (psizeOffset)
    {
        Translate(psizeOffset, &xdvLeft, &ydvTop, &xdvRight, &ydvBottom);
        Translate(psizeOffset, &xdvArcStart, &ydvArcStart, &xdvArcEnd, &ydvArcEnd);
        return ::Chord(hdc(), xdvLeft, ydvTop, xdvRight, ydvBottom, xdvArcStart, ydvArcStart, xdvArcEnd, ydvArcEnd);
    }

#ifdef USEADVANCEDMODE
    if (!EmulateTransform())
    {
        CAdvancedDC adc(this);
        return ::Chord(adc, xdvLeft, ydvTop, xdvRight, ydvBottom, xdvArcStart, ydvArcStart, xdvArcEnd, ydvArcEnd);
    }
#endif
    
    CPoint  rgptPolygon[129];
    int cpt;

    cpt = FillPolygonArc(&rgptPolygon[0], xdvLeft, ydvTop, xdvRight, ydvBottom,
                         xdvArcStart, ydvArcStart, xdvArcEnd, ydvArcEnd);
    rgptPolygon[cpt++] = rgptPolygon[0];
    
    CDispGdi16Bit::Assert16Bit(rgptPolygon, cpt);
    return ::Polygon(hdc(), rgptPolygon, cpt);
} // RotChord

/****************************************************************************
* %%Function: RotPie         %%Owner:warrenb             Reviewed:03/01/94
*
* The rotated version of Pie
*****************************************************************************/
BOOL XHDC::Pie(int xdvLeft, int ydvTop, int xdvRight, int ydvBottom,
               int xdvArcStart, int ydvArcStart,
               int xdvArcEnd, int ydvArcEnd) const
{
    Assert(hdc());

    const SIZE* psizeOffset = GetOffsetOnly();
    if (psizeOffset)
    {
        Translate(psizeOffset, &xdvLeft, &ydvTop, &xdvRight, &ydvBottom);
        Translate(psizeOffset, &xdvArcStart, &ydvArcStart, &xdvArcEnd, &ydvArcEnd);
        return ::Pie(hdc(), xdvLeft, ydvTop, xdvRight, ydvBottom, xdvArcStart, ydvArcStart, xdvArcEnd, ydvArcEnd);
    }

#ifdef USEADVANCEDMODE
    if (!EmulateTransform())
    {
        CAdvancedDC adc(this);
        return ::Pie(adc, xdvLeft, ydvTop, xdvRight, ydvBottom, xdvArcStart, ydvArcStart, xdvArcEnd, ydvArcEnd);
    }
#endif
    
    CPoint  rgptPolygon[130];
    int cpt;

    cpt = FillPolygonArc(&rgptPolygon[0], xdvLeft, ydvTop, xdvRight, ydvBottom,
                         xdvArcStart, ydvArcStart, xdvArcEnd, ydvArcEnd);
    rgptPolygon[cpt].x = (xdvLeft + xdvRight) >> 1;
    rgptPolygon[cpt].y = (ydvTop + ydvBottom) >> 1;
    TransformPt(&rgptPolygon[cpt]);
    cpt++;
    rgptPolygon[cpt++] = rgptPolygon[0];
    
    CDispGdi16Bit::Assert16Bit(rgptPolygon, cpt);
    return ::Polygon(hdc(), rgptPolygon, cpt);
} // RotPie


// Nameless ROP: destnew = destold & src. From Petzold on PatBlt
#define ROPAND 0x00A000C9L
// Nameless ROP: destnew = destold | src. From Petzold on PatBlt
#define ROPOR  0x00FA0089L

/* %%Function:RotPatBlt %%Owner:mattrh %%Reviewed:0/0/00 */
//  The rotated version of PatBlt.
// We do some mapping here to try to boil things down to a RotRectangle.  We
// can map the ROP to something with which we can call SetROP2; we do so,
// call RotRectangle, and are peachy.
BOOL XHDC::PatBlt(int xdsLeft, int ydsTop, int dxd, int dyd, DWORD rop) const
{
    Assert(hdc());

    const SIZE* psizeOffset = GetOffsetOnly();
    if (psizeOffset)
    {
        Translate(psizeOffset, &xdsLeft, &ydsTop);
        return ::PatBlt(hdc(), xdsLeft, ydsTop, dxd, dyd, rop);
    }
    
    // *** NOTE *** 
    // WinNT PatBlt ignores the matrix, so we do emulation on both WinNT and Win9x
        
    // brushes we may use
    enum { ibrNone, ibrBlack, ibrWhite };

    // Here's the mapping array. We put the ROPs we're most likely to use
    // often near the top. There are 16 possible ROP2s; PatBlt can only
    // use the equivalent ROPs. Many of them don't have names; the names
    // quoted here are from Petzold's chapter on PatBlt.
    // Comments marked with *** are nameless ROPs for which we have already
    // defined names (usually in disp.h). Also note these are dword values;
    // they all fit into three bytes so I saved some notation space here.
    // Because some ROPs you can pass to PatBlt make it ignore the brush
    // selected into the DC (WHITENESS is an example), we store a reference
    // to a brush on vdraw in the table; then we can look up the brush
    // and select it if needed.
    static struct
        {
        DWORD dwROP;
        DWORD dwROP2;
        int iBrush;
        }
    kmpRopRop2 [] =
    //    ROP,       ROP2
        {
        { PATCOPY,   R2_COPYPEN,    ibrNone },		// P
        { BLACKNESS, R2_BLACK,      ibrBlack },	    // 0
        { WHITENESS, R2_WHITE,      ibrWhite },	    // 1
        { DSTINVERT, R2_NOT,        ibrNone },		// ~D
        { PATINVERT, R2_XORPEN,     ibrNone },		// P ^ D
        { ROPAND,    R2_MASKPEN,    ibrNone },		// P & D ***
        { ROPOR,     R2_MERGEPEN,   ibrNone },		// P | D ***
        { 0x0A0329,  R2_MASKNOTPEN, ibrNone },		// ~P & D
        { 0x500325,  R2_MASKPENNOT, ibrNone },		// P & ~D
        { 0xAF0229,  R2_MERGENOTPEN,ibrNone },	    // ~P | D
        { 0xF50225,  R2_MERGEPENNOT,ibrNone },	    // P | ~D
        { 0xAA0029,  R2_NOP,        ibrNone },		// D
        { 0x0F0001,  R2_NOTCOPYPEN, ibrNone },		// ~P
        { 0x5F00E9,  R2_NOTMASKPEN, ibrNone },		// ~(P & D)
        { 0x0500A9,  R2_NOTMERGEPEN,ibrNone },	    // ~(P | D)
        { 0xA50065,  R2_NOTXORPEN,  ibrNone },		// ~(P ^ D)
        { PATPAINT,  R2_COPYPEN,    ibrNone },
        };


    Assert(sizeof(kmpRopRop2) / (3 * sizeof(DWORD)) == 17);
    // NOTE: We reset values in the DC if drawing to a non MF dc.
    int irop;
    int bkMode;
    DWORD ropOld = 0;
    HPEN hpnOld;
    HBRUSH hbrPrev = NULL;
    BOOL fSuccess;

    hpnOld = (HPEN)SelectObject(hdc(), GetStockObject(NULL_PEN));
    for (irop = 0; irop < 17; irop++)
        {
        if (kmpRopRop2[irop].dwROP == rop)
            {
            ropOld = kmpRopRop2[irop].dwROP2;
            break;
            }
        }
    if (!ropOld)
        {
        Assert(irop == 17);
        AssertSz(FALSE, "RotPatBlt called with bogus rop"/* 0x%08X\r\n", rop*/);
        fSuccess = fFalse;
        goto LRPBErr;
        }

    ropOld = SetROP2(hdc(), ropOld);
    bkMode = SetBkMode(hdc(), OPAQUE);
    switch (kmpRopRop2[irop].iBrush)
        {
    case ibrWhite:
        hbrPrev = (HBRUSH)SelectObject(hdc(), GetStockObject(WHITE_BRUSH));
        break;
    case ibrBlack:
        hbrPrev = (HBRUSH)SelectObject(hdc(), GetStockObject(BLACK_BRUSH));
        break;
        }

    // NOTE (donmarsh) -- this is a weird hack, but since we are reusing the
    // XHDC::Rectangle method here, we need to adjust the bottom,right coords
    // of the rectangle. I'm actually not sure why this is necessary, but it
    // seems to work.
    dxd++;
    dyd++;
    
    fSuccess = Rectangle(xdsLeft, ydsTop,
                         xdsLeft + dxd, ydsTop + dyd);

    if (bkMode)
        SetBkMode(hdc(), bkMode);
    if (ropOld)
        SetROP2(hdc(), ropOld);
    if (hbrPrev)
        SelectObject(hdc(), hbrPrev);

LRPBErr:
    if (hpnOld != NULL)
        SelectObject(hdc(), hpnOld);
        
    return fSuccess;
} /* RotPatBlt */


/****************************************************************************\
|   %%Function:PatBltRc        %%Owner:AdamE       %%Reviewed:               |
|                                                                            |
|   Pat Blt our CRect type.                                                     |
|                                                                            |
\****************************************************************************/

void XHDC::PatBltRc(const CRect *prcds, DWORD rop) const
{
    Assert(!IsOffsetOnly());
    Assert((prcds) == (prcds));

    if (!prcds->IsEmpty())
    {
        PatBlt((prcds)->left, (prcds)->top,
               (prcds)->right - (prcds)->left,
               (prcds)->bottom - (prcds)->top, (rop)); 
    }
}

#ifdef NEEDED
/* %%Function:RotExtTextOut %%Owner:gems %%Reviewed:0/0/00 */
/* Rotated version of ExtTextOut.  The caller is responsible for selecting
   a font with the correct escapement into the hdc */
// REVIEW (davidhoe):  This looks remarkably like parts of RotExtTextOutA, although
// it takes a hdc rather than a MGE.  This function is so small that it may
// not be worth the complication of building a MGE just to call the other.
// The main thing that concerns me is: Is this function sufficient?

// NOTE (alexmog, 6/3/99): This function is not Unicode. The only caller is ExtTextOutFlip (unused so far)

BOOL XHDC::RotExtTextOut(int xds, int yds, UINT eto, CRect *lprect, char *rgch, UINT cch, int *lpdxd) const
{
    Assert(!IsOffsetOnly());
    
    CPoint ptdv;
    int xdv, ydv;

    eto = (eto & ~ETO_CLIPPED);
    if (eto & ETO_OPAQUE)
        {
        PatBltRc(lprect, PATCOPY);
        eto = (eto & ~ETO_OPAQUE);
        }
    Assert(eto == 0);

    ptdv.x = xds;
    ptdv.y = yds;
    TransformPt(&ptdv);
    xdv = ptdv.x;
    ydv = ptdv.y;
    ::ExtTextOutA(hdc(), xdv, ydv, eto, NULL, rgch, cch, lpdxd);

    return fTrue;
} /* RotExtTextOut */
#endif

/* %%Function:FEscSupported %%Owner:kennyy %%Reviewed:0/0/00 */
/* Returns whether or not the escape is supported on the given hdc.
 * Handles aborts gracefully.
 */
BOOL XHDC::FEscSupported(int nEscape) const
{
    Assert(!IsOffsetOnly());
    return (ExtEscape(hdc(),QUERYESCSUPPORT,sizeof(int),(LPSTR)&nEscape,0, NULL) > 0);
} /* FEscSupported */

// ---------------------------------------------------------------------------
// %%Function: FPrintingToPostscript    %%Owner: davidve  %%Reviewed: 00/00/00
//
// Parameters:
//
// Returns:
//
// Description:
//
// ---------------------------------------------------------------------------

BOOL XHDC::FPrintingToPostscript() const
{
    Assert(!IsOffsetOnly());
    return (FEscSupported(POSTSCRIPT_PASSTHROUGH));
} // FPrintingToPostscript

/* Maximum size of the X-clipped pipeline */
#define iptPipeMax 3

/* %%Function:ClipPoly %%Owner:kennyy %%Reviewed:6/11/92 */
/* This function is an ugly one, but it's necessary. It's a more generalized
 * (read slower) version of ClipLnpd that uses only integer math (no quads).
 * We clip a polygon to an arbitrary rectangle, returning the polygon
 * representing the intersection.
 *
 * The algorithm, by the way, is a version of the Sutherland-Hodgman
 * algorithm, which has been optimized to take half as long as the general
 * algorithm. The more general algorithm performs four clipping passes,
 * one for each edge of the clipping rectangle; I do two clipping passes
 * only, one for the horizontal boundaries and one for the vertical.
 *
 * I clip the polygon against the X boundaries first; the X-clipped
 * polygon is stored in a "pipeline" where the Y-clipping routine picks it
 * up.
 *
 * Historical note: The TF for the class in which I learned the general
 * Sutherland-Hodgman algorithm was Nat Brown. Go figure!
 */

void ClipPoly(CRect *prc, int cpt, CPoint *ppt, int *pcptClip, CPoint *pptClip)
{
    int iptX;                   /* X-clipping index */
    CPoint ptPrevX;             /* Previous X point */
    CPoint ptCurX;              /* Current X point */
    int wPtPrevLocX;            /* The previous X point's location in the range -1, 0, or 1 */
    int wPtCurLocX;             /* The current X point's location in the range? */
    CPoint  rgptPipe[iptPipeMax];/* The X-clipped pipeline */
    int iptPipeMac = 0;         /* # of points in the pipe */
    BOOL fPipeBegun = fFalse;   /* Have we begun to use the pipeline? */
    CPoint ptPipelineFirst(0,0);/* First point in pipeline */
    int iptY;                   /* Y-clipping index */
    CPoint ptPrevY(0,0);        /* Previous Y point */
    CPoint ptCurY;              /* Current Y point */
    int wPtPrevLocY = 0;        /* The previous Y point's location in the range -1, 0, or 1 */
    int wPtCurLocY;             /* The current Y point's location in the range? */
    int iptClipMac = 0;         /* # of points in the clipped polygon */

    Assert(cpt >= 3);

    /* X clipping routine. Clipped points are placed in the pipeline. */

    /* The point behind the first one is the last one. Set up the
     * previous-point information.
     */

    ptPrevX = ppt[cpt - 1];
    wPtPrevLocX = (ptPrevX.x < prc->left) ? -1: ((ptPrevX.x > prc->right) ? 1 : 0);

    for (iptX = 0; iptX < cpt; iptX++)
        {
        /* Set up the current-point information */

        ptCurX = ppt[iptX];
        wPtCurLocX = (ptCurX.x < prc->left) ? -1: ((ptCurX.x > prc->right) ? 1 : 0);

        /* If we crossed a boundary, output the point(s) at which we cross */

        if (wPtPrevLocX != wPtCurLocX)
            {
            if (wPtPrevLocX != 0)
                {
                /* Add intersection point to the pipe */

                rgptPipe[iptPipeMac].x = (wPtPrevLocX < 0) ? prc->left : prc->right;
                rgptPipe[iptPipeMac].y = ptPrevX.y +
                                    (int)(((long)rgptPipe[iptPipeMac].x - ptPrevX.x) *
                                    (ptCurX.y - ptPrevX.y) / (ptCurX.x - ptPrevX.x));
                iptPipeMac++;
                Assert(iptPipeMac <= iptPipeMax);
                } /* if */
            if (wPtCurLocX != 0)
                {
                /* Add intersection point to the pipe */

                rgptPipe[iptPipeMac].x = (wPtCurLocX < 0) ? prc->left : prc->right;
                rgptPipe[iptPipeMac].y = ptPrevX.y +
                                    (int)(((long)rgptPipe[iptPipeMac].x - ptPrevX.x) *
                                    (ptCurX.y - ptPrevX.y) / (ptCurX.x - ptPrevX.x));
                iptPipeMac++;
                Assert(iptPipeMac <= iptPipeMax);
                } /* if */
            } /* if */

        /* If this point is in the valid range, add it to the pipe as well. */

        if (wPtCurLocX == 0)
            {
            rgptPipe[iptPipeMac++] = ptCurX;
            Assert(iptPipeMac <= iptPipeMax);
            }

        /* Cur -> Prev so we can move on to the next point */

        ptPrevX = ptCurX;
        wPtPrevLocX = wPtCurLocX;

        if (iptPipeMac <= 1)
            continue;

        /* Y clipping routine. X-clipped points are taken from the pipeline and
         * placed in the output buffer in XY-clipped form. The code here is essentially
         * the same as the X-clipping, so I won't elaborate...
         */

        if (!fPipeBegun)
            {
            fPipeBegun = fTrue;
            ptPipelineFirst = ptPrevY = rgptPipe[0];
            wPtPrevLocY = (ptPrevY.y < prc->top) ? -1: ((ptPrevY.y > prc->bottom) ? 1 : 0);
            }

        /* Skip the first point in the pipeline, since it's the prev point */

LFlushPipe:
        for (iptY = 1; iptY < iptPipeMac; iptY++)
            {
            ptCurY = rgptPipe[iptY];
            wPtCurLocY = (ptCurY.y < prc->top) ? -1:((ptCurY.y > prc->bottom) ? 1 : 0);

            if (wPtPrevLocY != wPtCurLocY)
                {
                if (wPtPrevLocY != 0)
                    {
                    pptClip[iptClipMac].y = (wPtPrevLocY < 0) ? prc->top : prc->bottom;
                    pptClip[iptClipMac].x = ptPrevY.x +
                                        (int)(((long)pptClip[iptClipMac].y-ptPrevY.y) *
                                        (ptCurY.x - ptPrevY.x) / (ptCurY.y - ptPrevY.y));
                    iptClipMac++;
                    // Assert(iptClipMac <= cptClipPolyMax);
                    } /* if */
                if (wPtCurLocY != 0)
                    {
                    pptClip[iptClipMac].y = (wPtCurLocY < 0) ? prc->top : prc->bottom;
                    pptClip[iptClipMac].x = ptPrevY.x +
                                        (int)(((long)pptClip[iptClipMac].y - ptPrevY.y) *
                                        (ptCurY.x - ptPrevY.x) / (ptCurY.y - ptPrevY.y));
                    iptClipMac++;
                    // Assert(iptClipMac <= cptClipPolyMax);
                    } /* if */
                } /* if */

            if (wPtCurLocY == 0)
                {
                pptClip[iptClipMac++] = ptCurY;
                // Assert(iptClipMac <= cptClipPolyMax);
                }

            rgptPipe[0] = ptPrevY = ptCurY;
            wPtPrevLocY = wPtCurLocY;
            } /* for Y */
        iptPipeMac = 1;
        } /* for X */

    if (fPipeBegun)
        {
        Assert(iptPipeMac == 1);
        rgptPipe[iptPipeMac++] = ptPipelineFirst;
        fPipeBegun = fFalse;       /* to avoid endless loop */
        goto LFlushPipe;
        }

    *pcptClip = iptClipMac;
} /* ClipPoly */

/****************************************************************************\
 * %%Function: MakeNormalRect       %%Owner: Warrenb   %%Reviewed: 00/00/00 *
 *                                                                          *
 * Description: makes the passed rectangle normal ie. bottomleft>topright   *
\****************************************************************************/
void MakeNormalRc(CRect *prc)
{
    if (prc->left > prc->right)
        SwapVal(prc->left, prc->right);
    if (prc->top > prc->bottom)
        SwapVal(prc->top, prc->bottom);
} // MakeNormalRect

/*----------------------------------------------------------------------------
@func void | RestrictPolygonToRectangleInterior | Rotation support code.
@contact sidda

@comm   The Windows API Rectangle() excludes the right and bottom edges.
        The Windows API Polygon() does not (for the same set of points).

        This routine ensures the image painted by Polygon() does not exceed
        the bounds of that which would be painted by Rectangle().
----------------------------------------------------------------------------*/
void RestrictPolygonToRectangleInterior(
    CPoint *rgpt,
    int cpt,
    CRect *prc)
{
    int    i = 0;
    CPoint    *ppt = rgpt;

    for (; i < cpt; i++, ppt++)
        {
        // restrict to left, top edges
        if (ppt->x < prc->left)
            ppt->x = prc->left;

        if (ppt->y < prc->top)
            ppt->y = prc->top;

        // restrict to lie inside right, bottom edges
        if (ppt->x >= prc->right)
            ppt->x = prc->right - 1;

        if (ppt->y >= prc->bottom)
            ppt->y = prc->bottom - 1;
        }
}

/*----------------------------------------------------------------------------
@func BOOL | RotRectangle | Rotation GDI wrapper
@contact mattrh

@comm The rotated version of Rectangle, creates a rectangle at the passed points
influenced by the passed MGE's rotation information.

pub3 RAID 1072: Rectangle Border Width varies as position and angle changes
*   WLB > The rectangle now calculate a thickness vector and makes sure that
*   WLB > the largest of dx,dy of the vectors is at least 1 pixel.
If this becomes a problem we can port similar code from Publisher codebase.

----------------------------------------------------------------------------*/
BOOL XHDC::Rectangle(int xpwLeft, int ypwTop, int xpwRight, int ypwBottom,
                     RECT *prcBounds) // @parm Upright bounding rectangle. We should not draw
                                       // in the right and bottom edges of this rectangle. Pass
                     const             // NULL if you don't care that we do.
{
    Assert(hdc());

    const SIZE* psizeOffset = GetOffsetOnly();
    if (psizeOffset)
    {
        Translate(psizeOffset, &xpwLeft, &ypwTop, &xpwRight, &ypwBottom);
        return ::Rectangle(hdc(), xpwLeft, ypwTop, xpwRight, ypwBottom);
    }

#ifdef USEADVANCEDMODE
    if (!EmulateTransform())
    {
        CAdvancedDC adc(this);
        return ::Rectangle(adc, xpwLeft, ypwTop, xpwRight, ypwBottom);
    }
#endif
    
    CPoint rgptPoly[4];

    RRC rrcpw;
    CRect rcpwr;

    SetRc(&rcpwr, xpwLeft, ypwTop, xpwRight-1, ypwBottom-1);
    RrcFromMatRc(&rrcpw, &mat(), &rcpwr);
    rgptPoly[0] = rrcpw.ptTopLeft;
    rgptPoly[1] = rrcpw.ptTopRight;
    rgptPoly[2] = rrcpw.ptBottomRight;
    rgptPoly[3] = rrcpw.ptBottomLeft;

    if (prcBounds != NULL)
        RestrictPolygonToRectangleInterior(rgptPoly, 4, (CRect*) prcBounds);

    CDispGdi16Bit::Assert16Bit((LPPOINT) &rgptPoly, 4);
    return ::Polygon(hdc(), (LPPOINT) &rgptPoly, 4);
}

/*----------------------------------------------------------------------------
@func BOOL | RotFillRect | Rotation GDI wrapper
@contact mattrh

@comm The rotated version of FillRect.

----------------------------------------------------------------------------*/
BOOL XHDC::FillRect(const RECT *prc, HBRUSH hbr) const
{
    Assert(hdc());

    CRect rcpwr = *prc;
    
    const SIZE* psizeOffset = GetOffsetOnly();
    if (psizeOffset)
    {
        Translate(psizeOffset, &rcpwr);
        return ::FillRect(hdc(), &rcpwr, hbr);
    }

#ifdef USEADVANCEDMODE
    if (!EmulateTransform())
    {
        CAdvancedDC adc(this);
        return ::FillRect(adc, &rcpwr, hbr);
    }
#endif
    
    RRC rrcpw;
    CPoint rgptPoly[4];
    BOOL fReRotate = fFalse;

    RrcFromMatRc(&rrcpw, &mat(), (CRect*)prc);

    // if either height or width of rotated rectangle
    // is sub pixel then add 1 to initial rectangle
    // and recalculate
    if (rrcpw.ptTopLeft == rrcpw.ptBottomLeft)
        {
        fReRotate = fTrue;
        rcpwr.bottom += 1;
        }
    if (rrcpw.ptTopLeft == rrcpw.ptTopRight)
        {
        fReRotate = fTrue;
        rcpwr.right += 1;
        }

    // if we had to adjust existing unrotated rectangle
    // then re-rotate.
    if (fReRotate)
        RrcFromMatRc(&rrcpw, &mat(), &rcpwr);

    // make polygon from rotated points
    SetPt(&(rgptPoly[0]), rrcpw.ptTopLeft.x, rrcpw.ptTopLeft.y);
    SetPt(&(rgptPoly[1]), rrcpw.ptTopRight.x, rrcpw.ptTopRight.y);
    SetPt(&(rgptPoly[2]), rrcpw.ptBottomRight.x, rrcpw.ptBottomRight.y);
    SetPt(&(rgptPoly[3]), rrcpw.ptBottomLeft.x, rrcpw.ptBottomLeft.y);

    CDispGdi16Bit::Assert16Bit(rgptPoly[0]);
    CDispGdi16Bit::Assert16Bit(rgptPoly[1]);
    CDispGdi16Bit::Assert16Bit(rgptPoly[2]);
    CDispGdi16Bit::Assert16Bit(rgptPoly[3]);
    
    return FillPolygonHelper(hdc(), rgptPoly, 4, hbr);
}


BOOL XHDC::FrameRect(const RECT *prc, HBRUSH hbr) const
{
    Assert(hdc());

    CRect rc = *prc;
    const SIZE* psizeOffset = GetOffsetOnly();
    if (psizeOffset)
    {
        Translate(psizeOffset, &rc);
        return ::FrameRect(hdc(), &rc, hbr);
    }
    
#ifdef USEADVANCEDMODE
    // NOTE: FrameRect doesn't appear to work in Advanced Mode in NT!
#endif
    
    if (!TransformRect(&rc))
    {
        AssertSz(FALSE, "FrameRect doesn't work with non-axis-aligned transformations yet");
        return FALSE;
    }
    
    return ::FrameRect(hdc(), &rc, hbr);
}


BOOL XHDC::DrawEdge(const RECT* prc, UINT edge, UINT grfFlags) const
{
    Assert(hdc());

    CRect rc = *prc;
    const SIZE* psizeOffset = GetOffsetOnly();
    if (psizeOffset)
    {
        Translate(psizeOffset, &rc);
        return ::DrawEdge(hdc(), &rc, edge, grfFlags);
    }
    
#ifdef USEADVANCEDMODE
    // NOTE: DrawEdge doesn't appear to work in Advanced Mode in NT!
#endif
    
    if (!TransformRect(&rc))
    {
        AssertSz(FALSE, "DrawEdge doesn't work with non-axis-aligned transformations yet");
        return FALSE;
    }
    
    return ::DrawEdge(hdc(), &rc, edge, grfFlags);
}


int XHDC::SelectClipRgn(HRGN hrgn) const
{
    Assert(hdc());
    
    if (hrgn == NULL)
        return ::SelectClipRgn(hdc(), NULL);

    // easy if transform is just a translation
    const SIZE* psizeOffset = GetOffsetOnly();
    if (psizeOffset)
    {
        HRGN hrgnShifted = ::CreateRectRgn(0,0,0,0);
        if (hrgnShifted == NULL)
            return RGN_ERROR;

        int r = ::CombineRgn(hrgnShifted, hrgn, NULL, RGN_COPY);
        if (r == ERROR)
            return RGN_ERROR;

        r = ::OffsetRgn(hrgnShifted, psizeOffset->cx, psizeOffset->cy);
        if (r == ERROR)
            return RGN_ERROR;

        r = ::SelectClipRgn(hdc(), hrgnShifted);
        ::DeleteObject(hrgnShifted);
        return r;
    }
    
#ifdef USEADVANCEDMODE
    // NOTE (donmarsh) -- because we aren't using advanced mode
    // to render transformed images, we can't use advanced mode to
    // handle clip regions: they don't mix and match.
    if (!EmulateTransform())
    {
        CAdvancedDC adc(this);
        return ::SelectClipRgn(adc, hrgn);
    }
#endif
    
    // transform region.  Note that this works correctly only once if we have
    // a rotation that isn't a multiple of 90 degrees.
    CRegion rgnTransformed(hrgn);
    rgnTransformed.Transform(&transform());
    return rgnTransformed.SelectClipRgn(hdc());
}


int XHDC::ExtSelectClipRgn(HRGN hrgn, int fnMode) const
{
    Assert(hdc());
    
    if (hrgn == NULL)
    {
        return ::ExtSelectClipRgn(hdc(), NULL, fnMode);
    }

    // easy if transform is just a translation
    const SIZE* psizeOffset = GetOffsetOnly();
    if (psizeOffset)
    {
        HRGN hrgnShifted = ::CreateRectRgn(0,0,0,0);
        if (hrgnShifted == NULL)
            return RGN_ERROR;

        int r = ::CombineRgn(hrgnShifted, hrgn, NULL, RGN_COPY);
        if (r == ERROR)
            return RGN_ERROR;

        r = ::OffsetRgn(hrgnShifted, psizeOffset->cx, psizeOffset->cy);
        if (r == ERROR)
            return RGN_ERROR;

        r = ::ExtSelectClipRgn(hdc(), hrgnShifted, fnMode);
        ::DeleteObject(hrgnShifted);
        return r;
    }
    
#ifdef USEADVANCEDMODE
    // NOTE (donmarsh) -- because we aren't using advanced mode
    // to render transformed images, we can't use advanced mode to
    // handle clip regions: they don't mix and match.
    if (!EmulateTransform())
    {
        CAdvancedDC adc(this);
        return ::ExtSelectClipRgn(adc, hrgn, fnMode);
    }
#endif
    
    // transform region.  Note that this works correctly only once if we have
    // a rotation that isn't a multiple of 90 degrees.
    CRegion rgnTransformed(hrgn);
    rgnTransformed.Transform(&transform());
    return rgnTransformed.ExtSelectClipRgn(hdc(), fnMode);
}


int XHDC::GetClipRgn(HRGN hrgn) const
{
    Assert(hdc());
    Assert(hrgn);

    // easy if transform is just a translation
    int result;
    const SIZE* psizeOffset = GetOffsetOnly();
    if (psizeOffset)
    {
        result = ::GetClipRgn(hdc(), hrgn);
        if (result == 1)
            ::OffsetRgn(hrgn, -psizeOffset->cx, -psizeOffset->cy);
        return result;
    }
    
#ifdef USEADVANCEDMODE
    // NOTE (donmarsh) -- because we aren't using advanced mode
    // to render transformed images, we can't use advanced mode to
    // handle clip regions: they don't mix and match.
    if (!EmulateTransform())
    {
        CAdvancedDC adc(this);
        return ::GetClipRgn(adc, hrgn);
    }
#endif
    
    result = ::GetClipRgn(hdc(), hrgn);
    if (result != 1)
        return result;
    
    // untransform region
    CRegion rgnTransformed(hrgn);
    rgnTransformed.Untransform(&transform());
    return rgnTransformed.CopyTo(hrgn) != RGN_ERROR
        ? 1
        : -1;  // NOTE (donmarsh) -- GetLastError won't work after this!
}

BOOL XHDC::GetCurrentPositionEx(POINT* ppt) const
{
    if (!::GetCurrentPositionEx(hdc(), ppt))
        return FALSE;
    
    const SIZE* pOffset = GetOffsetOnly();
    if (pOffset)
    {
        ppt->x -= pOffset->cx;
        ppt->y -= pOffset->cy;
    }
    else
    {
        transform().Untransform((CPoint*)ppt);
    }
    
    return TRUE;
}

BOOL XHDC::BitBlt(
        int nXDest,
        int nYDest,
        int nWidth,
        int nHeight,
        const XHDC& hdcSrc,
        int nXSrc,
        int nYSrc,
        DWORD dwRop) const
{
    const SIZE* psizeOffsetDest = GetOffsetOnly();
    const SIZE* psizeOffsetSrc = hdcSrc.GetOffsetOnly();
    if (psizeOffsetDest && psizeOffsetSrc)
    {
        Translate(psizeOffsetDest, &nXDest, &nYDest);
        Translate(psizeOffsetSrc, &nXSrc, &nYSrc);
        return ::BitBlt(hdc(), nXDest, nYDest, nWidth, nHeight, hdcSrc.hdc(), nXSrc, nYSrc, dwRop);
    }
    
#ifdef USEADVANCEDMODE
    if (!EmulateTransform())
    {
        CAdvancedDC adcDest(this);
        CAdvancedDC adcSrc(&hdcSrc);
        return ::BitBlt(adcDest, nXDest, nYDest, nWidth, nHeight, adcSrc, nXSrc, nYSrc, dwRop);
    }
#endif
    
    return StretchBlt(nXDest, nYDest, nWidth, nHeight, hdcSrc, nXSrc, nYSrc, nWidth, nHeight, dwRop);
}

BOOL XHDC::MaskBlt(
        int nXDest, 
        int nYDest, 
        int nWidth, 
        int nHeight, 
        const XHDC& hdcSrc, 
        int nXSrc, 
        int nYSrc, 
        HBITMAP hbmMask, 
        int xMask, 
        int yMask, 
        DWORD dwRop) const
{
    // NOTE: this should only be called on WinNT
    Assert(g_dwPlatformID == VER_PLATFORM_WIN32_NT);
    
    const SIZE* psizeOffsetDest = GetOffsetOnly();
    const SIZE* psizeOffsetSrc = hdcSrc.GetOffsetOnly();
    if (psizeOffsetDest && psizeOffsetSrc)
    {
        Translate(psizeOffsetDest, &nXDest, &nYDest);
        Translate(psizeOffsetSrc, &nXSrc, &nYSrc);
        return ::MaskBlt(hdc(), nXDest, nYDest, nWidth, nHeight, hdcSrc.hdc(), nXSrc, nYSrc, hbmMask, xMask, yMask, dwRop);
    }
    
#ifdef USEADVANCEDMODE
    if (!EmulateTransform())
    {
        CAdvancedDC adcDest(this);
        CAdvancedDC adcSrc(&hdcSrc);
        return ::MaskBlt(adcDest, nXDest, nYDest, nWidth, nHeight, adcSrc, nXSrc, nYSrc, hbmMask, xMask, yMask, dwRop);
    }
#endif
    
    AssertSz(FALSE, "MaskBlt called with complex transform");
    return FALSE;
}


// Transformation doesn't include any scale
BOOL XHDC::HasNoScale() const
{
    if (_fSurface == NULL)
        return TRUE;

    const MAT& xf = mat();

    if (xf.eM12 == 0 && xf.eM21 == 0)
    {
        if ((xf.eM11 == 1.0 || xf.eM11 == -1.0) && (xf.eM22 == 1.0 || xf.eM22 == -1.0))
        {
            // no scale, may be flipped
            return TRUE;
        }
    }
    else if (xf.eM11 == 0 && xf.eM22 == 0)
    {
        if ((xf.eM12 == 1.0 || xf.eM12 == -1.0) && (xf.eM21 == 1.0 || xf.eM21 == -1.0))
        {
            // no scale, may have a combination of 90-degree rotation and flips
            return TRUE;
        }
    }

    float flScaleX, flScaleY;
    xf.GetAngleScaleTilt(NULL, &flScaleX, &flScaleY, NULL);
    return flScaleX == 1.0 && flScaleY == 1.0;
}

int XHDC::GetTrivialRotationAngle() const
{
    Assert(HasTransform() && HasTrivialRotation());
    
    const MAT& xf = mat();

    if (xf.eM12 == 0 && xf.eM21 == 0)
    {
        // check for 0 or 180 degree rotation
        if (xf.eM11 > 0 && xf.eM22 > 0)
            return 0;
        else if (xf.eM11 < 0 && xf.eM22 < 0)
            return 180;
    }
    else if (xf.eM11 == 0 && xf.eM22 == 0)
    {
        // check for 90 or 270 degree rotation
        if (xf.eM12 < 0 && xf.eM21 > 0)
            return 90;
        else if (xf.eM12 > 0 && xf.eM21 < 0)
            return 270;
    }
    
    AssertSz(FALSE, "Unexpected non-axis-aligned rotation");
    return 0;
}


WHEN_DBG(static HDC hdcDebug;)


//+-----------------------------------------------------------------------------
//
//  Member: XHDC::StretchBlt
//
//------------------------------------------------------------------------------
BOOL 
XHDC::StretchBlt(
        int             nXOriginDest,
        int             nYOriginDest,
        int             nWidthDest,
        int             nHeightDest,
        const XHDC &    hdcSrc, 
        int             nXOriginSrc,
        int             nYOriginSrc,
        int             nWidthSrc,
        int             nHeightSrc,
        DWORD           dwRop) const
{
    HRESULT         hr              = S_OK;
    HDC             hdcSrc1         = hdcSrc.hdc();
    const SIZE *    psizeOffsetDest = GetOffsetOnly();
    const SIZE *    psizeOffsetSrc  = hdcSrc.GetOffsetOnly();
    HBITMAP         hSrcBitmap2     = NULL;
    HBITMAP         hDstBitmap      = NULL;
    HBITMAP         hbmOld          = NULL;
    HDC             hdcSrc2         = NULL;
    int             iResult         = GDI_ERROR;
    bool            fDstAlloc       = false;
    BITMAP          bmpSrc;
    BITMAP          bmpDst;
    IDirectDraw3 *  pDD3            = NULL;
    IDirectDrawSurface *    
                    pDDSurface      = NULL;
    
    ZeroMemory(&bmpSrc, sizeof(bmpSrc));
    ZeroMemory(&bmpDst, sizeof(bmpDst));

    if (psizeOffsetDest && psizeOffsetSrc)
    {
        Translate(psizeOffsetDest, &nXOriginDest, &nYOriginDest);
        Translate(psizeOffsetSrc, &nXOriginSrc, &nYOriginSrc);

        return ::StretchBlt(hdc(), nXOriginDest, nYOriginDest, nWidthDest, nHeightDest,
                            hdcSrc1, nXOriginSrc, nYOriginSrc, nWidthSrc, nHeightSrc, dwRop);
    }
    
#ifdef USEADVANCEDMODE
    // NOTE: WinNT advanced mode messes up clipping, 1-bit mask rotation, and
    // it seems to be slow!  Just use emulation instead.
#endif    
    
    // only deal with complex transformation for destination
    Assert(psizeOffsetSrc);

    if (psizeOffsetSrc)
    {
        Translate(psizeOffsetSrc, &nXOriginSrc, &nYOriginSrc);
    }
    
    // compute transformed rectangle
    CRect rc(nXOriginDest, nYOriginDest, 
             nXOriginDest + nWidthDest, nYOriginDest + nHeightDest);

    if (!TransformRect(&rc))
    {
        AssertSz(FALSE, "StretchBlt doesn't work with non-axis-aligned transformations yet");
        return FALSE;
    }

    // compute rotation amount
    int nRotationAngle = GetTrivialRotationAngle();
    
    // important optimization for no rotation
    if (nRotationAngle == 0)
    {
        return ::StretchBlt(hdc(), rc.left, rc.top, rc.Width(), rc.Height(),
                            hdcSrc1, nXOriginSrc, nYOriginSrc, nWidthSrc, nHeightSrc, dwRop);
    }

    // At the point we know we need to do a rotation.  To do this we'll create 
    // two bitmaps:
    //
    // hSrcBitmap2: This is a copy of the input area to be stretch blitted.
    // hDstBitmap:  This is a bitmap to hold the post-rotated image.
    //
    // And one new HDC:
    //
    // hdcSrc2:     This DC will first have hSrcBitmap2 selected into it so that
    //              the pixel information needed can be copied to hSrcBitmap2.
    //              Then it will have hDstBitmap selected into it so that the
    //              post-rotated image can be stretch blitted to "this" XHDC.

    // Create hSrcBitmap2 (source for rotation)

    hSrcBitmap2 = ::CreateCompatibleBitmap(hdcSrc1, nWidthSrc, nHeightSrc);

    // Create hDstBitmap (destination for rotation)

    if (nRotationAngle == 180)
    {
        hDstBitmap = ::CreateCompatibleBitmap(hdcSrc1, nWidthSrc, nHeightSrc);
    }
    else
    {
        hDstBitmap = ::CreateCompatibleBitmap(hdcSrc1, nHeightSrc, nWidthSrc);
    }
    
    // Create hdcSrc2 which will host the bitmaps.

    hdcSrc2 = ::CreateCompatibleDC(hdcSrc1);
    
    // If everything was created properly...

    if (   (hSrcBitmap2 != NULL)
        && (hDstBitmap  != NULL)
        && (hdcSrc2     != NULL))
    {
        // Save old bitmap.

        hbmOld = (HBITMAP)::SelectObject(hdcSrc2, hSrcBitmap2);

        // Copy source pixels.

        ::BitBlt(hdcSrc2, 0, 0, nWidthSrc, nHeightSrc,
                 hdcSrc1, nXOriginSrc, nYOriginSrc, SRCCOPY);
    
        // rotate pixels
        ::SelectObject(hdcSrc2, hDstBitmap);

        WHEN_DBG(hdcDebug = hdcSrc2;)

        // Get the actual bitmap bits.

        ::GetObject(hSrcBitmap2, sizeof(BITMAP), &bmpSrc);
        ::GetObject(hDstBitmap, sizeof(BITMAP), &bmpDst);

        // With a usual trident HDC, apparently GetObject will fill in the 
        // bmBits member of the structure.  But with HDCs created from 
        // DirectDraw surfaces it won't, so we'll do it manually below.

        if (NULL == bmpSrc.bmBits)
        {
            DDSURFACEDESC   ddsd;

            // 2000/10/02 (mcalkins) I'm only going to handle the 32-bit case as
            // this issue of bmBits being NULL only first showed up during my 
            // work to get filtered elements to print and I know that the source
            // will always be a DirectDraw surface with 32 bits per pixel and 
            // I'm under time pressure.

            Assert(32 == bmpSrc.bmBitsPixel);

            if (bmpSrc.bmBitsPixel != 32)
            {
                hr = E_FAIL;

                goto done;
            }

            // Initialize the surface description.

            ZeroMemory(&ddsd, sizeof(ddsd));

            ddsd.dwSize = sizeof(ddsd);

            // IDirectDraw3 needed to get surface.

            hr = g_pDirectDraw->QueryInterface(IID_IDirectDraw3, 
                                               (void **)&pDD3);

            if (hr)
            {
                goto done;
            }

            hr = pDD3->GetSurfaceFromDC(hdcSrc1, &pDDSurface);

            if (hr)
            {
                goto done;
            }

            // Locking the surface gets us a direct pointer to its bits.

            hr = pDDSurface->Lock(NULL, &ddsd, DDLOCK_SURFACEMEMORYPTR | DDLOCK_NOSYSLOCK, NULL);

            if (hr)
            {
                goto done;
            }

            // This is the pointer to the bits.

            bmpSrc.bmBits = ddsd.lpSurface;
        }

        if (NULL == bmpDst.bmBits)
        {
            Assert(32 == bmpDst.bmBitsPixel);

            if (bmpDst.bmBitsPixel != 32)
            {
                hr = E_FAIL;

                goto done;
            }

            bmpDst.bmBits = new BYTE[bmpDst.bmWidth * bmpDst.bmHeight * 4];

            if (NULL == bmpDst.bmBits)
            {
                hr = E_OUTOFMEMORY;

                goto done;
            }

            fDstAlloc = true;
        }

        RotateBitmap(bmpSrc, bmpDst, nRotationAngle);

        // If we used a DirectDraw surface for input, we need to unlock it now.

        if (pDDSurface)
        {
            hr = pDDSurface->Unlock(NULL);

            if (hr)
            {
                goto done;
            }
        }

        // We've rotated the bitmap, but if we had to allocate the destination
        // bitmap memory ourselves, the bits won't be associated with the 
        // GDI bitmap.  A call to SetDIBits will fix that.

        if (fDstAlloc)
        {
            BITMAPINFO  bmi;

            ZeroMemory(&bmi, sizeof(bmi));

            bmi.bmiHeader.biSize        = sizeof(bmi.bmiHeader);
            bmi.bmiHeader.biWidth       = bmpDst.bmWidth;
            bmi.bmiHeader.biHeight      = bmpDst.bmHeight;
            bmi.bmiHeader.biPlanes      = bmpDst.bmPlanes;
            bmi.bmiHeader.biBitCount    = bmpDst.bmBitsPixel;
            bmi.bmiHeader.biCompression = BI_RGB;

            iResult = ::SetDIBits(hdcSrc2, hDstBitmap, 
                                  0,                // Start row 
                                  bmpDst.bmHeight,  // Row count
                                  bmpDst.bmBits, &bmi, DIB_RGB_COLORS);

            if (0 == iResult)
            {
                hr = E_FAIL;

                goto done;
            }
        }

        // Now blit from hdcSrc2 (attached to the post-rotated bitmap) to the
        // final destination.

        iResult = ::StretchBlt(hdc(), 
                               rc.left, rc.top, rc.Width(), rc.Height(),
                               hdcSrc2, 
                               0, 0, bmpDst.bmWidth, bmpDst.bmHeight, 
                               dwRop);

        if (GDI_ERROR == iResult)
        {
            hr = E_FAIL;

            goto done;
        }
    }

done:

    ReleaseInterface(pDDSurface);
    ReleaseInterface(pDD3);

    if (fDstAlloc)
    {
        delete [] bmpDst.bmBits;
    }
    
    // Restore previous bitmap into hdcSrc2.

    if (hbmOld)
    {
        ::SelectObject(hdcSrc2, hbmOld);
    }

    if (hSrcBitmap2)
    {
        ::DeleteObject(hSrcBitmap2);
    }

    if (hDstBitmap)
    {
        ::DeleteObject(hDstBitmap);
    }

    if (hdcSrc2)
    {
        ::DeleteDC(hdcSrc2);
    }
    
    // TODO (donmarsh) -- this should actually return the number of scanlines copied

    if (hr)
    {
        return FALSE;
    }
    else
    {
        return TRUE;
    }
}
//  Member: XHDC::StretchBlt


int GetScanlineSizeInBytes(int nPixels, int nBitsPerPixel)
{
    return (nPixels * nBitsPerPixel + 31) / 32 * 4;
}

BOOL XHDC::StretchDIBits(
        int nXDest,
        int nYDest,
        int nDestWidth,
        int nDestHeight, 
        int nXSrc,
        int nYSrc,
        int nSrcWidth,
        int nSrcHeight,
        const void *lpBits,
        const BITMAPINFO *lpBitsInfo,
        UINT iUsage,
        DWORD dwRop) const
{
    const SIZE* psizeOffset = GetOffsetOnly();
    if (psizeOffset)
    {
        Translate(psizeOffset, &nXDest, &nYDest);
        return ::StretchDIBits(hdc(), nXDest, nYDest, nDestWidth, nDestHeight,
                               nXSrc, nYSrc, nSrcWidth, nSrcHeight, lpBits, lpBitsInfo, iUsage, dwRop);
    }
    
#ifdef USEADVANCEDMODE
    // NOTE: WinNT advanced mode is messed up for StretchBlt, so we don't use
    // it.  For consistency, we don't use advanced mode here either.  Given
    // the buggy implementation for StretchBlt, it seems safer not to trust
    // NT in this area.
#endif    
    
    // compute transformed rectangle
    CRect rc(nXDest, nYDest, nXDest+nDestWidth, nYDest+nDestHeight);

    if (!TransformRect(&rc))
    {
        AssertSz(FALSE, "StretchDIBits doesn't work with non-axis-aligned transformations yet");
        return FALSE;
    }

    // compute rotation amount
    int nRotationAngle = GetTrivialRotationAngle();

    // important special case for no rotation
    if (nRotationAngle == 0)
    {
        return ::StretchDIBits( hdc(), rc.left, rc.top, rc.Width(), rc.Height(),
                                nXSrc, nYSrc, nSrcWidth, nSrcHeight,
                                lpBits, lpBitsInfo, iUsage, dwRop);
    }

    // populate src bitmap structure
    BITMAP bmpSrc;
    bmpSrc.bmType = 0;
    bmpSrc.bmWidth = lpBitsInfo->bmiHeader.biWidth;
    bmpSrc.bmHeight = lpBitsInfo->bmiHeader.biHeight;
    bmpSrc.bmBitsPixel = lpBitsInfo->bmiHeader.biBitCount;
    bmpSrc.bmWidthBytes = GetScanlineSizeInBytes(bmpSrc.bmWidth, bmpSrc.bmBitsPixel);
    bmpSrc.bmPlanes = 1;
    bmpSrc.bmBits = const_cast<void*>(lpBits);
    
    // copy the src bitmapinfo header and palette data
    long lInfoSize = sizeof(BITMAPINFO) + (lpBitsInfo->bmiHeader.biClrUsed-1) * sizeof(RGBQUAD);
    BITMAPINFO* pbmiDest = (BITMAPINFO*) MemAlloc(Mt(XHDC_LocalBitmaps), lInfoSize);
    if (!pbmiDest)
        return FALSE; //GDI_ERROR;
    memcpy(pbmiDest, lpBitsInfo, lInfoSize);
    
    // set the size of the destination bitmap
    if (90 == nRotationAngle || 270 == nRotationAngle)
    {
        int tmp = pbmiDest->bmiHeader.biWidth;
        pbmiDest->bmiHeader.biWidth = pbmiDest->bmiHeader.biHeight;
        pbmiDest->bmiHeader.biHeight = tmp;
    }

    // populate the destination bitmap structure
    BITMAP bmpDst;
    bmpDst.bmType = 0;
    bmpDst.bmWidth = pbmiDest->bmiHeader.biWidth;
    bmpDst.bmHeight = pbmiDest->bmiHeader.biHeight;
    bmpDst.bmBitsPixel = bmpSrc.bmBitsPixel;
    bmpDst.bmWidthBytes = GetScanlineSizeInBytes(bmpDst.bmWidth, bmpDst.bmBitsPixel);
    bmpDst.bmPlanes = 1;
    bmpDst.bmBits = MemAlloc(Mt(XHDC_LocalBitmaps), bmpDst.bmHeight * GetScanlineSizeInBytes(bmpDst.bmWidth, bmpDst.bmBitsPixel));

    if (NULL == bmpDst.bmBits)
    {
        MemFree(pbmiDest);
        return FALSE;
    }

#if DBG==1
    __int64 t1, t2, tfrq;
    QueryPerformanceFrequency((LARGE_INTEGER *)&tfrq);

    QueryPerformanceCounter((LARGE_INTEGER *)&t1);
#endif

    RotateBitmap(bmpSrc, bmpDst, nRotationAngle);

#if DBG==1
    QueryPerformanceCounter((LARGE_INTEGER *)&t2);
    TraceTag((tagError, "RotateBitmap took us %ld", ((LONG)(((t2 - t1) * 1000000) / tfrq))));
#endif

    int result = ::StretchDIBits( hdc(), rc.left, rc.top, rc.Width(), rc.Height(),

                                  //-------------------------------------------------------------------------
                                  //
                                  // TODO: These 4 are suspect. We need to understand what they need to be
                                  //
                                  0, 0, pbmiDest->bmiHeader.biWidth, pbmiDest->bmiHeader.biHeight,
                                  //
                                  //-------------------------------------------------------------------------
                                  
                                  bmpDst.bmBits, pbmiDest, iUsage, dwRop);

    MemFree(bmpDst.bmBits);
    MemFree(pbmiDest);
    
    // TODO (donmarsh) -- this should actually return the number of scanlines copied
    return result != GDI_ERROR;
}

void RotateBitmap(const BITMAP& bmSrc, BITMAP& bmDst, int rotation)
{
    // This code should actually never be called in Trident v3, because there are
    // no situations in which images should be rotated.
    // NOTE: This code is executed for glyphs
    // AssertSz(FALSE, "Harmless assert: we do not expect to rotate images in MSHTML v3");
    
    // this routine handles rotations of only 90, 180, or 270 degrees
    Assert(
        ((rotation == 90 || rotation == 270) && 
         bmSrc.bmWidth == bmDst.bmHeight && bmSrc.bmHeight == bmDst.bmWidth) ||
        (rotation == 180 &&
         bmSrc.bmWidth == bmDst.bmWidth && bmSrc.bmHeight == bmDst.bmHeight));
    
    Assert(bmSrc.bmBitsPixel == bmDst.bmBitsPixel);
    
    int     srcWidthBytes   = GetScanlineSizeInBytes(bmSrc.bmWidth, 
                                                     bmSrc.bmBitsPixel);
    int     dstWidthBytes   = GetScanlineSizeInBytes(bmDst.bmWidth, 
                                                     bmDst.bmBitsPixel);

    //
    // 8,16,24, or 32 bits per pixel
    // 
    if (bmSrc.bmBitsPixel > 4)
    {
        BYTE* pSrcPixel = (BYTE*) bmSrc.bmBits;
        BYTE* pDstPixel = (BYTE*) bmDst.bmBits;
        int bytesPerPixel = bmSrc.bmBitsPixel/8;
        int srcSkip = srcWidthBytes - bmSrc.bmWidth * bytesPerPixel;
        int dstSkip = dstWidthBytes - bmDst.bmWidth * bytesPerPixel;
        int dstPixelInc;
        int dstRowInc;
        
        switch (rotation)
        {
        case 90:
            pDstPixel += -bytesPerPixel + dstWidthBytes - dstSkip;
            dstPixelInc = -bytesPerPixel + dstWidthBytes;
            dstRowInc = -bytesPerPixel - dstWidthBytes * bmDst.bmHeight;
            break;
        case 180:
            pDstPixel += -bytesPerPixel + dstWidthBytes * bmDst.bmHeight - dstSkip;
            dstPixelInc = -2*bytesPerPixel;
            dstRowInc = -dstSkip;
            break;
        default:
            pDstPixel += dstWidthBytes * (bmDst.bmHeight-1);
            dstPixelInc = -bytesPerPixel - dstWidthBytes;
            dstRowInc = bytesPerPixel + dstWidthBytes * bmDst.bmHeight;
            break;
        }
        
        for (int y = 0; y < bmSrc.bmHeight; y++)
        {
            for (int x = 0; x < bmSrc.bmWidth; x++)
            {
                // copy one pixel
                switch (bytesPerPixel)
                {
                case 4:  *pDstPixel++ = *pSrcPixel++;
                case 3:  *pDstPixel++ = *pSrcPixel++;
                case 2:  *pDstPixel++ = *pSrcPixel++;
                default: *pDstPixel++ = *pSrcPixel++;
                }
                
                // jump to next destination pixel
                pDstPixel += dstPixelInc;
            }
            
            // jump to next source and destination row
            pSrcPixel += srcSkip;
            pDstPixel += dstRowInc;
        }
        
        return;
    }
    

    //
    // 1 or 4 bits per pixel
    // 
    int pixelsPerByte = 8 / bmSrc.bmBitsPixel;
    BYTE leftMask = bmSrc.bmBitsPixel == 1 ? 0x80 : 0xF0;
    
    for (int y = 0; y < bmSrc.bmHeight; y++)
    {
        BYTE* pSrcPixel = ((BYTE*) bmSrc.bmBits) + y * srcWidthBytes;
        int y1 = bmSrc.bmHeight-1 - y;
        
        switch (rotation)
        {
        case 90:
            {
                BYTE* pDstPixel = ((BYTE*) bmDst.bmBits) + y1 / pixelsPerByte;
                int srcShift = 0;
                int dstShift = (y1 % pixelsPerByte) * bmSrc.bmBitsPixel;
                BYTE dstMask = ~(leftMask >> dstShift);
                for (int x = 0; x < bmSrc.bmWidth; x++)
                {
                    int shift = dstShift - srcShift;
                    BYTE pixel = *pSrcPixel & (leftMask >> srcShift);
                    *pDstPixel &= dstMask;
                    if (shift < 0)
                        *pDstPixel |= pixel << -shift;
                    else
                        *pDstPixel |= pixel >> shift;
                    
                    srcShift = (srcShift + bmSrc.bmBitsPixel) & 0x07;
                    if (srcShift == 0)
                        pSrcPixel++;
                    
                    pDstPixel += dstWidthBytes;
                }
            }
            break;
        
        case 180:
            {
                BYTE* pDstPixel = ((BYTE*) bmDst.bmBits) + y1 * dstWidthBytes + bmDst.bmWidth / pixelsPerByte;
                int srcShift = 0;
                int dstShift = (bmDst.bmWidth % pixelsPerByte) * bmSrc.bmBitsPixel;
                for (int x = 0; x < bmSrc.bmWidth; x++)
                {
                    int shift = dstShift - srcShift;
                    BYTE pixel = *pSrcPixel & (leftMask >> srcShift);
                    *pDstPixel &= ~(leftMask >> dstShift);
                    if (shift < 0)
                        *pDstPixel |= pixel << -shift;
                    else
                        *pDstPixel |= pixel >> shift;
                    
                    srcShift = (srcShift + bmSrc.bmBitsPixel) & 0x07;
                    if (srcShift == 0)
                        pSrcPixel++;
                    
                    if (dstShift == 0)
                        pDstPixel--;
                    dstShift = (dstShift - bmSrc.bmBitsPixel) & 0x07;
                }
            }
            break;
        
        default:
            {
                BYTE* pDstPixel = ((BYTE*) bmDst.bmBits) + (bmDst.bmHeight-1) * dstWidthBytes + y / pixelsPerByte;
                int srcShift = 0;
                int dstShift = (y % pixelsPerByte) * bmSrc.bmBitsPixel;
                BYTE dstMask = ~(leftMask >> dstShift);
                for (int x = 0; x < bmSrc.bmWidth; x++)
                {
                    int shift = dstShift - srcShift;
                    BYTE pixel = *pSrcPixel & (leftMask >> srcShift);
                    *pDstPixel &= dstMask;
                    if (shift < 0)
                        *pDstPixel |= pixel << -shift;
                    else
                        *pDstPixel |= pixel >> shift;
                    
                    srcShift = (srcShift + bmSrc.bmBitsPixel) & 0x07;
                    if (srcShift == 0)
                        pSrcPixel++;
                    
                    pDstPixel -= dstWidthBytes;
                }
            }
            break;
        }

#if DBG == 1
        if (IsTagEnabled(tagFilterPaintScreen))
        {
            HDC hdcScreen = CreateDC(_T("DISPLAY"), NULL, NULL, NULL);
            if (hdcScreen)
            {
                ::BitBlt(hdcScreen, 0, 0, bmDst.bmWidth, bmDst.bmHeight, hdcDebug, 0, 0, BLACKNESS);
                ::BitBlt(hdcScreen, 0, 0, bmDst.bmWidth, bmDst.bmHeight, hdcDebug, 0, 0, SRCCOPY);  
                ::DeleteDC(hdcScreen);
            }
        }
#endif
    }
}


BOOL XHDC::DrawFocusRect(const RECT* prc) const
{
    CRect rc(*prc);
    const SIZE* psizeOffset = GetOffsetOnly();
    if (psizeOffset)
    {
        Translate(psizeOffset, &rc);
        return ::DrawFocusRect(hdc(), &rc);
    }
    
#ifdef USEADVANCEDMODE
    if (!EmulateTransform())
    {
        CAdvancedDC adc(this);
        return ::DrawFocusRect(adc, prc);
    }
#endif
    
    // compute transformed rectangle
    if (!TransformRect(&rc))
    {
        AssertSz(FALSE, "DrawFocusRect doesn't work with non-axis-aligned transformations yet");
        return FALSE;
    }
        
    return ::DrawFocusRect(hdc(), &rc);
}

BOOL XHDC::DrawFrameControl(LPRECT prc, UINT uType, UINT uState) const
{
    CRect rc(*prc);
    const SIZE* psizeOffset = GetOffsetOnly();
    if (psizeOffset)
    {
        Translate(psizeOffset, &rc);
        return ::DrawFrameControl(hdc(), &rc, uType, uState);
    }
    
#ifdef USEADVANCEDMODE
    // NOTE: we don't use Advanced Mode on WinNT to render frame controls,
    // because it does not properly handle the direction of the light source.
    // In other words, when we rotate a checkbox by 90 degrees, it should
    // look no different than the unrotated case, but WinNT actually rotates
    // the shading!
#endif
    
    if (!TransformRect(&rc))
    {
        AssertSz(FALSE, "DrawFrameControl doesn't work with non-axis-aligned transformations yet");
        return FALSE;
    }
    
    return ::DrawFrameControl(hdc(), &rc, uType, uState);
}

int XHDC::ExcludeClipRect(int left, int top, int right, int bottom) const
{
    const SIZE* psizeOffset = GetOffsetOnly();
    if (psizeOffset)
    {
        Translate(psizeOffset, &left, &top, &right, &bottom);
        return ::ExcludeClipRect(hdc(), left, top, right, bottom);
    }
    
#ifdef USEADVANCEDMODE
    if (!EmulateTransform())
    {
        CAdvancedDC adc(this);
        return ::ExcludeClipRect(adc, left, top, right, bottom);
    }
#endif
        
    // compute transformed rectangle
    CRect rc(left, top, right, bottom);
    if (!TransformRect(&rc))
    {
        AssertSz(FALSE, "ExcludeClipRect doesn't work with non-axis-aligned transformations yet");
        return FALSE;
    }
    
    return ::ExcludeClipRect(hdc(), rc.left, rc.top, rc.right, rc.bottom);
}

int XHDC::GetClipBox(LPRECT prc) const
{
    int result;
    const SIZE* psizeOffset = GetOffsetOnly();
    if (psizeOffset)
    {
        result = ::GetClipBox(hdc(), prc);
        ((CRect*)prc)->OffsetRect(-psizeOffset->cx, -psizeOffset->cy);
        return result;
    }
    
#ifdef USEADVANCEDMODE
    if (!EmulateTransform())
    {
        CAdvancedDC adc(this);
        return ::GetClipBox(hdc(), prc);
    }
#endif

    result = ::GetClipBox(hdc(), prc);
    if (result == NULLREGION || result == RGN_ERROR)
        return result;
    
    // untransform rc
    transform().Untransform((CRect*) prc);
    return result;    
}

int XHDC::IntersectClipRect(int left, int top, int right, int bottom) const
{
    const SIZE* psizeOffset = GetOffsetOnly();
    if (psizeOffset)
    {
        Translate(psizeOffset, &left, &top, &right, &bottom);
        return ::IntersectClipRect(hdc(), left, top, right, bottom);
    }
    
#ifdef USEADVANCEDMODE
    if (!EmulateTransform())
    {
        CAdvancedDC adc(this);
        return ::IntersectClipRect(adc, left, top, right, bottom);
    }
#endif
        
    // compute transformed rectangle
    CRect rc(left, top, right, bottom);
    if (!TransformRect(&rc))
    {
        AssertSz(FALSE, "IntersectClipRect doesn't work with non-axis-aligned transformations yet");
        return FALSE;
    }
    
    return ::IntersectClipRect(hdc(), rc.left, rc.top, rc.right, rc.bottom);
}

BOOL XHDC::SetBrushOrgEx(int nXOrg, int nYOrg, LPPOINT ppt) const
{
    const SIZE* psizeOffset = GetOffsetOnly();
    if (psizeOffset)
    {
        Translate(psizeOffset, &nXOrg, &nYOrg);
        BOOL result = ::SetBrushOrgEx(hdc(), nXOrg, nYOrg, ppt);
        if (ppt)
        {
            ppt->x -= psizeOffset->cx;
            ppt->y -= psizeOffset->cy;
        }
        return result;
    }
    
#ifdef USEADVANCEDMODE
    if (!EmulateTransform())
    {
        CAdvancedDC adc(this);
        return ::SetBrushOrgEx(adc, nXOrg, nYOrg, ppt);
    }
#endif
        
    // TODO (donmarsh) -- not sure what to do here.  Since we aren't actually
    // transforming the brush, transforming the brush origin might be futile.
    return ::SetBrushOrgEx(hdc(), nXOrg, nYOrg, ppt);
}

#ifdef NOTYET
//
//  Metafile enumeration callback
//
int CALLBACK XhdcEnhMetaFunc(
                              HDC hDC,                    // handle to device context
                              HANDLETABLE *lpHTable,      // pointer to metafile handle table
                              ENHMETARECORD const *lpEMFR,// pointer to metafile record
                              int nObj,                   // count of objects
                              LPARAM lpData               // pointer to optional data
                            )
{
    ENHMETARECORD *pemfrCopy = NULL;

    switch (lpEMFR->iType)
    {
    case EMR_BITBLT:
    case EMR_MASKBLT:
    case EMR_STRETCHBLT:
        {
            EMRBITBLT *pemrbitblt = (EMRBITBLT *) lpEMFR;
            
            if (!IsRectlEmpty(&pemrbitblt->rclBounds))
            {
                // copy the record and redirect record pointer
                pemfrCopy = (ENHMETARECORD *) MemAlloc(Mt(XHDC), lpEMFR->nSize);
                if (pemfrCopy)
                {
                    memcpy(pemfrCopy, lpEMFR, lpEMFR->nSize);
                    lpEMFR = pemfrCopy;
                    pemrbitblt = (EMRBITBLT *) lpEMFR;

                    // Convert rectangles
                    ...
                    // Draw transformed image
                    ...

                    goto Cleanup;
                }
            }
            
        }
        break;

    case EMR_TEXT:
        {
            // transform font sizes and/or replace screen fonts with TT fonts.
            ...
        }
        break;

    default:
        // no change
        break;
    }

    // Default processing
    {
        BOOL fResult = ::PlayEnhMetaFileRecord(hDC, lpHTable, lpEMFR, nObj);
    }

Cleanup:
    if (pemfrCopy)
        MemFree(pemfrCopy);

    // continue enumeration regardless of individual record failures
    return 1;   
}
#endif

//
// PlayEnhMetaFile
//
BOOL XHDC::PlayEnhMetaFile(HENHMETAFILE hemf, const RECT *prc) const
{
    // FUTURE (alexmog): for now, we merely transform the rectangle, 
    // and rely on Windows to scale metafile appropriately.
    // That works fine at 100% zoom in print preview, and when printing 
    // (as long as physical size of rectangle matches size of metafile bounds).
    // At other zoom levels, metafiles scale reasonably, but font sizes are not 
    // scaled, resulting in weird rendering of text. 
    // And of course, we can't make Win9x apply rotation.
    //
    // To transform properly, we need to enumerate metafile, and transform all points
    // in all records, plus scale fonts. PUBPRINT.CXX contains code that does exactly
    // that - it needs to be updated, reviewed, and put to work.

    // Transform the rectangle
    CRect rc(*prc);
    if (HasTransform())
        transform().Transform(&rc);

    return ::PlayEnhMetaFile(hdc(), hemf, &rc);

#ifdef NOTYET
    // Enumerate the metafile and transform record by record
    return ::EnumEnhMetaFile(hdc(), 
                             hemf,
                             &XhdcEnhMetaFunc,
                             (LPVOID) this,
                             prc);  // note: original rect. may need to pass both.
#endif
}


//
// PlayEnhMetaFileRecord
//
BOOL XHDC::PlayEnhMetaFileRecord(LPHANDLETABLE pHandleTable, const ENHMETARECORD *pemr, UINT nHandles) const
{
    AssertSz(0, "PlayEnhMetaFileRecord: not yet implemented");
    return FALSE;
}

/*----------------------------------------------------------------------------
@func BOOL | RotExtTextOutA | Rotation GDI wrapper
@contact mattrh

@comm    The rotated version of ExtTextOutA.
        ETO_OPAQUE and ETO_CLIPPED are unsupported.
        You must select a font with the appropriate escapement.
        Unlike RotExtTextOutW, this does not handle the visi characters.  All visi drawing must be done in RotExtTextOutW.

----------------------------------------------------------------------------*/
BOOL XHDC::ExtTextOutA(int xds, int yds, UINT eto,
    const RECT *lprect, LPCSTR rgch, UINT cch, const int FAR *lpdxd) const
{
    Assert(hdc());
    RECT rectT;
    LPRECT prectT = NULL;
    if (lprect)
    {
        rectT = *lprect;
        prectT = &rectT;
    }
    
    const SIZE* psizeOffset = GetOffsetOnly();
    if (psizeOffset)
    {
        Translate(psizeOffset, &xds, &yds);
        if (prectT)
        {
            Translate(psizeOffset, prectT);
        }
        return ::ExtTextOutA(hdc(), xds, yds, eto, prectT, rgch, cch, lpdxd);
    }
    
#ifdef USEADVANCEDMODE
    if (!EmulateTransform())
    {
        CAdvancedDC adc(this);
        return ::ExtTextOutA(adc, xds, yds, eto, prectT, rgch, cch, lpdxd);
    }
#endif
        
    CXFormFont xf(this);
    
    CPoint ptpw(xds, yds);
    CNewWidths nw;
    
    TransformPt(&ptpw);
    nw.TransformWidthsArray((INT*)lpdxd, cch, transform().GetRealScaleX());
    if (prectT && !TransformRect((CRect*) prectT))
    {
        AssertSz(FALSE, "ExtTextOutA called with clipping rect and complex transform");
        prectT = NULL;
    }
    return ::ExtTextOutA(hdc(), ptpw.x, ptpw.y, eto, prectT, rgch, cch, nw.GetWidths((INT*)lpdxd));
}


/*----------------------------------------------------------------------------
@func BOOL | RotExtTextOutW | Rotation GDI wrapper
@contact mattrh

@comm    The rotated version of ExtTextOutW.
        ETO_OPAQUE and ETO_CLIPPED are unsupported.
        You must select a font with the appropriate escapement.

----------------------------------------------------------------------------*/
BOOL XHDC::ExtTextOutW(int xds, int yds, UINT eto,
    const RECT *lprect, LPCWSTR rgch, UINT cch, const int *lpdxd/*, const LHT* plht*/, int kTFlow) const
{
    Assert(hdc());
    
    RECT rectT;
    LPRECT prectT = NULL;
    if (lprect)
    {
        rectT = *lprect;
        prectT = &rectT;
    }
    
    const SIZE* psizeOffset = GetOffsetOnly();
    if (psizeOffset)
    {
        Translate(psizeOffset, &xds, &yds);
        if (prectT)
        {
            Translate(psizeOffset, prectT);
        }
        return ::ExtTextOutW(hdc(), xds, yds, eto, prectT, rgch, cch, lpdxd);
    }
    
#ifdef USEADVANCEDMODE
    if (!EmulateTransform())
    {
        CAdvancedDC adc(this);
        return ::ExtTextOutW(adc, xds, yds, eto, prectT, rgch, cch, lpdxd);
    }
#endif
        
    CPoint ptpw(xds, yds);
    CXFormFont xf(this);
    CNewWidths nw;
    TransformPt(&ptpw);
    nw.TransformWidthsArray((INT*)lpdxd, cch, transform().GetRealScaleX());
    if (prectT && !TransformRect((CRect*) prectT))
    {
        AssertSz(FALSE, "ExtTextOutW called with clipping rect and complex transform");
        prectT = NULL;
    }
    
    return ::ExtTextOutW(hdc(), ptpw.x, ptpw.y, eto, prectT, rgch, cch, nw.GetWidths((INT*)lpdxd));
}

BOOL XHDC::TextOutW(int xds, int yds, LPCWSTR rgch, UINT cch) const
{
    return ExtTextOutW(xds, yds, NULL, NULL, rgch, cch, NULL);
}


HRESULT XHDC::ScriptStringAnalyse(
        const void *pString, 
        int cString, 
        int cGlyphs, 
        int iCharset, 
        DWORD dwFlags,
        int iReqWidth,
        SCRIPT_CONTROL *psControl,
        SCRIPT_STATE *psState,
        const int *piDx,
        SCRIPT_TABDEF *pTabdef,
        const BYTE *pbInClass,
        SCRIPT_STRING_ANALYSIS *pssa
        ) const
{
    Assert(hdc());

    const SIZE* psizeOffset = GetOffsetOnly();
    if (psizeOffset)
    {
        return ::ScriptStringAnalyse(hdc(), pString, cString, cGlyphs, iCharset, dwFlags, iReqWidth, psControl, psState, piDx, pTabdef, pbInClass, pssa);
    }
 
    // this case is called only for rendering image alt text, and therefore
    // should never be rotated
    // Actually, selects also use this codepath in printing.
    Assert(GetTrivialRotationAngle() == 0);
        

    CXFormFont xf(this);
    int iXWidth = (iReqWidth * transform().GetRealScaleX());
    
    return ::ScriptStringAnalyse(hdc(), pString, cString, cGlyphs, iCharset, dwFlags, iXWidth, psControl, psState, piDx, pTabdef, pbInClass, pssa);
}

HRESULT XHDC::ScriptStringOut(
        SCRIPT_STRING_ANALYSIS ssa,
        int iX,
        int iY,
        UINT uOptions,
        const RECT* prc,
        int iMinSel,
        int iMaxSel,
        BOOL fDisabled) const
{
    Assert(hdc());
    
    RECT rectT;
    LPRECT prectT = NULL;
    if (prc)
    {
        rectT = *prc;
        prectT = &rectT;
    }
    
    const SIZE* psizeOffset = GetOffsetOnly();
    if (psizeOffset)
    {
        Translate(psizeOffset, &iX, &iY);
        if (prectT)
        {
            Translate(psizeOffset, prectT);
        }
        return ::ScriptStringOut(ssa, iX, iY, uOptions, prectT, iMinSel, iMaxSel, fDisabled);
    }
    
#ifdef USEADVANCEDMODE
    if (!EmulateTransform())
    {
        CAdvancedDC adc(this);
        return ::ScriptStringOut(ssa, iX, iY, uOptions, prectT, iMinSel, iMaxSel, fDisabled);
    }
#endif
        
    // this case is called only for rendering image alt text, and therefore
    // should never be rotated
    // Actually, selects also use this codepath in printing.
    Assert(GetTrivialRotationAngle() == 0);
    
    CXFormFont xf(this);
    CPoint pt(iX,iY);
    TransformPt(&pt);
    if (prectT)
    {
        Verify(TransformRect((CRect*) prectT));
    }
    
    return ::ScriptStringOut(ssa, pt.x, pt.y, uOptions, prectT, iMinSel, iMaxSel, fDisabled);
}

BOOL XHDC::ScriptTextOut(
                         SCRIPT_CACHE *psc,          // cache handle
                         int x,                      // x,y position for first glyph
                         int y,                      // 
                         UINT fuOptions,             // ExtTextOut options
                         const RECT *lprc,            // optional clipping/opaquing rectangle
                         const SCRIPT_ANALYSIS *psa, // result of ScriptItemize
                         const WCHAR *pwcInChars,    // required only for metafile DCs
                         int cChars,                 // required only for metafile DCs
                         const WORD *pwGlyphs,       // glyph buffer from prior ScriptShape call
                         int cGlyphs,                // number of glyphs
                         const int *piAdvance,       // advance widths from ScriptPlace
                         const int *piJustify,       // justified advance widths (optional)
                         const GOFFSET *pGoffset     // x,y offset for combining glyph
                     ) const
{
    Assert(hdc());
    
    RECT rectT;
    LPRECT prectT = NULL;
    if (lprc)
    {
        rectT = *lprc;
        prectT = &rectT;
    }
    
    const SIZE* psizeOffset = GetOffsetOnly();
    if (psizeOffset)
    {
        Translate(psizeOffset, &x, &y);
        if (prectT)
        {
            Translate(psizeOffset, prectT);
        }
        return ::ScriptTextOut(hdc(), psc, x, y, fuOptions, prectT, psa, pwcInChars, cChars, pwGlyphs, cGlyphs, 
                             piAdvance, piJustify, pGoffset);    
    }
    
#ifdef USEADVANCEDMODE
    if (!EmulateTransform())
    {
        CAdvancedDC adc(this);
        return ::ScriptTextOut(adc, psc, x, y, fuOptions, lprc, psa, pwcInChars, cChars, pwGlyphs, cGlyphs, 
                             piAdvance, piJustify, pGoffset);    
    }
#endif
        
    SCRIPT_CACHE scTemp = NULL;
    BOOL         fReturn;
    CPoint pt(x, y);
    CXFormFont xf(this);
    CNewWidths nw1;
    CNewWidths nw2;
    CNewOffsets no;
    TransformPt(&pt);
    nw1.TransformWidthsArray((INT*)piAdvance, cGlyphs, transform().GetRealScaleX());
    nw2.TransformWidthsArray((INT*)piJustify, cGlyphs, transform().GetRealScaleX());
    no.TransformOffsetsArray((GOFFSET*)pGoffset, cGlyphs, transform().GetRealScaleX(), transform().GetRealScaleY());
    if (prectT && !TransformRect((CRect*) prectT))
    {
        AssertSz(FALSE, "ScriptTextOut called with clipping rect and complex transform");
        prectT = NULL;
    }
        
    // TODO Bug #2831 in IE6 database
    // The SCRIPT_CACHE parameter contains font information cached by Uniscribe to avoid doing GDI work.
    // If we use the passed in script cache, Uniscribe will use the measuring font metrics, causing several issues.
    // So, we force Uniscribe to use this font info on the hdc by passing in a null SCRIPT_CACHE.
    // What we really need here is a lightweight rendering font cache to avoid recreation of fonts in CXFormFont and
    // to allow us to use SCRIPT_CACHE variables for contiguous glyph runs in the same font.

    fReturn = ::ScriptTextOut(hdc(), &scTemp, pt.x, pt.y, fuOptions, prectT, psa, pwcInChars, cChars, pwGlyphs, cGlyphs, 
                     nw1.GetWidths((INT*)piAdvance), nw2.GetWidths((INT*)piJustify), no.GetOffsets((GOFFSET*)pGoffset));    

    if (scTemp)
        ::ScriptFreeCache(&scTemp);

    return fReturn;
}

BOOL XHDC::DrawTextW(
                     LPCTSTR lpString, // pointer to string to draw
                     int nCount,       // string length, in characters
                     LPRECT lpRect,    // pointer to struct with formatting dimensions
                     UINT uFormat      // text-drawing flags
                     ) const
{
    Assert(hdc());
    BOOL fCalcRectOnly = !!(uFormat & DT_CALCRECT);
    BOOL fRetVal;
    
    CRect rc(*lpRect);
    const SIZE* psizeOffset = GetOffsetOnly();
    if (psizeOffset)
    {
        if(!fCalcRectOnly)
        {
            Translate(psizeOffset, &rc);
            return ::DrawTextW(hdc(), lpString, nCount, &rc, uFormat);   
        }
        else
        {
            fRetVal = ::DrawTextW(hdc(), lpString, nCount, lpRect, uFormat);
            // Returning the value, do an UnTranslate
            OffsetRect(lpRect, -psizeOffset->cx, -psizeOffset->cy);
            return fRetVal;
        }
    }
    
#ifdef USEADVANCEDMODE
    if (!EmulateTransform())
    {
        CAdvancedDC adc(this);
        return ::DrawTextW(adc, lpString, nCount, lpRect, uFormat);   
    }
#endif
        
    if (!TransformRect(&rc))
    {
        AssertSz(FALSE, "DrawTextW doesn't work with non-axis-aligned transformations yet");
        return FALSE;
    }
    
    if (!fCalcRectOnly)
    {
#if DBG==1
        CXFormFont xf(this, TRUE);
#else
        CXFormFont xf(this);
#endif
        return ::DrawTextW(hdc(), lpString, nCount, &rc, uFormat);
    }
    else
    {
#if DBG==1
        CXFormFont xf(this, TRUE);
#else
        CXFormFont xf(this);
#endif
        fRetVal = ::DrawTextW(hdc(), lpString, nCount, lpRect, uFormat);
        transform().Untransform((CRect *)lpRect);

        return fRetVal;
    }
}

BOOL XHDC::DrawTextA(
                     LPCSTR lpString,  // pointer to string to draw
                     int nCount,       // string length, in characters
                     LPRECT lpRect,    // pointer to struct with formatting dimensions
                     UINT uFormat      // text-drawing flags
                     ) const
{
    Assert(hdc());
    BOOL fCalcRectOnly = !!(uFormat & DT_CALCRECT);
    BOOL fRetVal;
    
    CRect rc(*lpRect);
    const SIZE* psizeOffset = GetOffsetOnly();
    if (psizeOffset)
    {
        if(!fCalcRectOnly)
        {
            Translate(psizeOffset, &rc);
            return ::DrawTextA(hdc(), lpString, nCount, &rc, uFormat);
        }
        else
        {
            fRetVal = ::DrawTextA(hdc(), lpString, nCount, lpRect, uFormat);
            // Returning the value, do an UnTranslate
            OffsetRect(lpRect, -psizeOffset->cx, -psizeOffset->cy);
            return fRetVal;
        }
    }
    
#ifdef USEADVANCEDMODE
    if (!EmulateTransform())
    {
        CAdvancedDC adc(this);
        return ::DrawTextA(adc, lpString, nCount, lpRect, uFormat);   
    }
#endif
        
    if (!TransformRect(&rc))
    {
        AssertSz(FALSE, "DrawTextA doesn't work with non-axis-aligned transformations yet");
        return FALSE;
    }

    if(!fCalcRectOnly)
    {
#if DBG==1
        CXFormFont xf(this, TRUE);
#else
        CXFormFont xf(this);
#endif
        return ::DrawTextA(hdc(), lpString, nCount, &rc, uFormat);
    }
    else
    {
#if DBG==1
        CXFormFont xf(this, TRUE);
#else
        CXFormFont xf(this);
#endif
        fRetVal = ::DrawTextA(hdc(), lpString, nCount, lpRect, uFormat);
        transform().Untransform((CRect *)lpRect);

        return fRetVal;
    }
}

BOOL XHDC::DrawThemeBackground(
                    HANDLE  hTheme,
                    int     iPartId,
                    int     iStateId,
                    const   RECT *pRect,
                    const   RECT *pClipRect)
{
    Assert(hdc());

    CRect rc(*pRect);
    const SIZE* psizeOffset = GetOffsetOnly();
    if (psizeOffset)
    {
        Translate(psizeOffset, &rc);
        return SUCCEEDED(::DrawThemeBackground(hTheme, hdc(), iPartId, iStateId, &rc, pClipRect));
    }

    // This code works fine for everything but check boxes and radio buttons, which fail to
    // print (though they preview fine).  Current guess: This is a themeing API issue.
    // A bug is being opened to track this issue separately (but can't really b.  (greglett)
    if (!TransformRect(&rc))
    {
        AssertSz(FALSE, "DrawThemeBackground doesn't work with non-axis-aligned transformations yet");
        return FALSE;
    }
    
    return (SUCCEEDED(::DrawThemeBackground(hTheme, hdc(), iPartId, iStateId, &rc, pClipRect)));
}

const CBaseCcs* XHDC::GetBaseCcsPtr() const
{ 
    return (_fSurface && _pSurface ? _pSurface->_pBaseCcs : NULL ); 
}

void XHDC::SetBaseCcsPtr(CBaseCcs *pCcs)
{ 
    if(_fSurface && _pSurface)
    {
        CBaseCcs *pOldCcs = _pSurface->_pBaseCcs;

        _pSurface->_pBaseCcs = pCcs; 
        if(pCcs) pCcs->AddRef();

        if(pOldCcs) pOldCcs->Release();
    }
}



#ifndef X_XTEXTOUT_HXX_
#define X_XTEXTOUT_HXX_
#include "xtextout.hxx"
#endif

#ifndef X_LSTFLOW_H_
#define X_LSTFLOW_H_
#include "lstflow.h"
#endif

// including this here isn't ideal, but we need CStrIn...
#ifndef X_UNICWRAP_HXX_
#define X_UNICWRAP_HXX_
#include "unicwrap.hxx"
#endif

#if DBG==1
CXFormFont::CXFormFont(const XHDC* pxhdc, BOOL fStockFont)
#else
CXFormFont::CXFormFont(const XHDC* pxhdc)
#endif
{
    HFONT hFontOld = NULL;
    HFONT hFontNew = NULL;
    
    if (pxhdc->HasComplexTransform())
    {
        LOGFONT lf;
                
        hFontOld = (HFONT)::GetCurrentObject(*pxhdc, OBJ_FONT);
        if (   hFontOld
            && GetObject(hFontOld, sizeof(lf), &lf)
           )
        {
            TraceTagEx((tagXFormFont, TAG_NONAME,
                        "XFormFont: (Old) F:%ls, H:=%d, E:%d, CS:%d, OP:%d",
                        lf.lfFaceName, lf.lfHeight, lf.lfEscapement, lf.lfCharSet, lf.lfOutPrecision));           

#if DBG==1
            if (!fStockFont)
            {
                // These asserts firing may cause incorrect display, especially on localized systems.
                AssertSz(pxhdc->GetBaseCcsPtr(), "XFormFont instantiated with no font pushed!");
            }
#endif
            lf.lfEscapement = lf.lfOrientation = pxhdc->transform().GetAngle();
            lf.lfOutPrecision = OUT_TT_ONLY_PRECIS;
            lf.lfWidth = (lf.lfWidth * pxhdc->transform().GetRealScaleX());
            lf.lfHeight = (lf.lfHeight * pxhdc->transform().GetRealScaleY());

            const CBaseCcs *pBaseCcs = pxhdc->GetBaseCcsPtr();

            
            if (pBaseCcs && pBaseCcs->_fScalingRequired)
            {
                lf.lfWidth *= pBaseCcs->_flScaleFactor;
                lf.lfHeight *= pBaseCcs->_flScaleFactor;
            }
            
            //  Force us to render using the measuring font face.
            //  This becomes an issue because the font mapper may choose different font at a different resolution.
            if (pBaseCcs)
            {
                AssertSz((pxhdc->GetBaseCcsPtr()->_fTTFont), "Non true-type font pushed when rendering with complex XForm!");
                _tcsncpy(lf.lfFaceName, fc().GetFaceNameFromAtom(pBaseCcs->_latmRealFaceName), LF_FACESIZE);
            }

            hFontNew = CreateFontIndirect(&lf);
            
            if (hFontNew)
            {
                Verify(hFontOld == SelectFontEx(*pxhdc, hFontNew));

#if DBG==1
                if ( IsTagEnabled(tagXFormFont) )
                {
                    TCHAR       szNewFaceName[LF_FACESIZE];
                    TEXTMETRIC  tm;

                    if (!::GetTextMetrics(*pxhdc, &tm))
                    {    
                        AssertSz(FALSE, "(DEBUG Trace Code) GetTextMetrics failed for XFormFont!");
                    }
                    else
                    {
                        AssertSz(!!(TMPF_TRUETYPE & tm.tmPitchAndFamily), "Non TrueType Font selected for XFont!");
                        GetTextFace(*pxhdc, LF_FACESIZE, szNewFaceName);

                        TraceTagEx((tagXFormFont, TAG_NONAME,
                                    "XFormFont: (Requested) F:%ls, H:=%d, E:%d, CS:%d, OP:%d",
                                    lf.lfFaceName, lf.lfHeight, lf.lfEscapement, lf.lfCharSet, lf.lfOutPrecision));

                        TraceTagEx((tagXFormFont, TAG_NONAME,
                                    "XFormFont: (New) F:%ls, H:=%d, CS:%d, TT:%d",
                                    szNewFaceName, tm.tmHeight, tm.tmCharSet, !!(TMPF_TRUETYPE & tm.tmPitchAndFamily)));
                    }
                    
                }
#endif
            }
        }
    }
    if (hFontOld && hFontNew)
    {
        _hFontOld = hFontOld;
        _hFontNew = hFontNew;
        _pxhdc = pxhdc;
    }
    else
    {
        _hFontOld = _hFontNew = NULL;
        _pxhdc = NULL;
    }
}

CXFormFont::~CXFormFont()
{
    if (_hFontOld)
    {
        Assert(_pxhdc);
        Assert(_hFontNew);
        SelectFontEx(*_pxhdc, _hFontOld);
        DeleteFontEx(_hFontNew);
    }
#if DBG==1
    else
    {
        Assert(!_pxhdc);
        Assert(!_hFontNew);
    }
#endif
}   

void
CNewWidths::TransformWidthsArray(INT *lpdxd, UINT cch, double scf)
{
    if (lpdxd)
    {
        if (S_OK == EnsureSize(cch))
        {
            INT *pWidths = lpdxd;
            INT *pWidthsNew = &Item(0);
            INT sxut = 0;           // sigmaX - untransformed
            double sxt;             // sigmaX - transformed
            INT sxtPrev = 0;        // sigmaX till prev char - transformed

            for (UINT i = 0; i < cch; i++, pWidths++, pWidthsNew++)
            {
                sxut += *pWidths;
                sxt = sxut * scf;
                *pWidthsNew = sxt - sxtPrev;
                sxtPrev += *pWidthsNew;
            }
        }
    }
}

void
CNewOffsets::TransformOffsetsArray(GOFFSET *pOffset, UINT cch, double sx, double sy)
{
    if (pOffset)
    {
        if (S_OK == EnsureSize(cch))
        {
            INT sxut = 0;           // sigmaX - untransformed
            INT syut = 0;           // sigmaX - untransformed
            double sxt;             // sigmaX - transformed
            double syt;             // sigmaX - transformed
            INT sxtPrev = 0;        // sigmaX till prev char - transformed
            INT sytPrev = 0;        // sigmaX till prev char - transformed
            GOFFSET *pOffsetNew = &Item(0);

            for (UINT i = 0; i < cch; i++, pOffset++, pOffsetNew++)
            {
                sxut += pOffset->du;
                sxt = sxut * sx;
                pOffsetNew->du = sxt - sxtPrev;
                sxtPrev += pOffsetNew->du;

                syut += pOffset->dv;
                syt = syut * sy;
                pOffsetNew->dv = syt - sytPrev;
                sytPrev += pOffsetNew->dv;
            }
        }
    }
}

#if USE_UNICODE_WRAPPERS==1
int DrawTextInCodePage(UINT uCP, XHDC xhdc, LPCWSTR lpString, int nCount, LPRECT lpRect, UINT uFormat)
{
    if (g_fUnicodePlatform)
        return xhdc.DrawTextW((LPWSTR)lpString, nCount, lpRect, uFormat);
    else
    {
        CStrIn str(uCP,lpString,nCount);
        return xhdc.DrawTextA(str, str.strlen(), lpRect, uFormat);
    }
}
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\download\dwnbind.cxx ===
//+ ---------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1992 - 1997.
//
//  File:       dwnbind.cxx
//
//  Contents:   CDwnPost, CDwnBind
//
// ----------------------------------------------------------------------------

#include "headers.hxx"

// This list needs to continue to be updated and we should try to keep parity with Office and shdocvw

const LPCTSTR c_arszUnsafeExts[]  =
{
    TEXT(".exe"), TEXT(".com"), TEXT(".bat"), TEXT(".lnk"), TEXT(".url"),
    TEXT(".cmd"), TEXT(".inf"), TEXT(".reg"), TEXT(".isp"), TEXT(".bas"), TEXT(".pcd"),
    TEXT(".mst"), TEXT(".pif"), TEXT(".scr"), TEXT(".hlp"), TEXT(".chm"), TEXT(".hta"), TEXT(".asp"), 
    TEXT(".js"),  TEXT(".jse"), TEXT(".vbs"), TEXT(".vbe"), TEXT(".ws"),  TEXT(".wsh"), TEXT(".msi"),
    TEXT(".ade"), TEXT(".adp"), TEXT(".crt"), TEXT(".ins"), TEXT(".mdb"),
    TEXT(".mde"), TEXT(".msc"), TEXT(".msp"), TEXT(".sct"), TEXT(".shb"),
    TEXT(".vb"),  TEXT(".wsc"), TEXT(".wsf"), TEXT(".cpl"), TEXT(".shs"),
    TEXT(".vsd"), TEXT(".vst"), TEXT(".vss"), TEXT(".vsw"), TEXT(".its"), TEXT(".tmp"),
    TEXT(".mdw"), TEXT(".mdt"), TEXT(".ops"), TEXT("")
};

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_DWN_HXX_
#define X_DWN_HXX_
#include "dwn.hxx"
#endif

#ifndef X_OTHRGUID_H_
#define X_OTHRGUID_H_
#include "othrguid.h"
#endif

#ifndef X_UWININET_H_
#define X_UWININET_H_
#include "uwininet.h"
#endif

#ifndef X_INETREG_H_
#define X_INETREF_H_
#include <inetreg.h>
#endif

#ifndef X_WINNETWK_H_
#define X_WINNETWK_H_
#include <winnetwk.h>
#endif

#ifndef X_URLCOMP_HXX_
#define X_URLCOMP_HXX_
#include <urlcomp.hxx>
#endif

extern class CResProtocolCF g_cfResProtocol;
extern class CAboutProtocolCF g_cfAboutProtocol;
extern class CViewSourceProtocolCF g_cfViewSourceProtocol;

void IndicateWinsockActivity();
DWORD _GetErrorThreshold(DWORD dwError);
BOOL IsErrorHandled( DWORD dwError );
BOOL IsSpecialUrl(LPCTSTR pchUrl);   // TRUE for javascript, vbscript, about protocols

// Debugging ------------------------------------------------------------------

PerfDbgTag(tagDwnBindInfo,      "Dwn", "Trace CDwnBindInfo")
PerfDbgTag(tagDwnBindData,      "Dwn", "Trace CDwnBindData")
PerfDbgTag(tagDwnBindDataIO,    "Dwn", "Trace CDwnBindData Peek/Read")
PerfDbgTag(tagDwnBindSlow,      "Dwn", "! Don't use InternetSession")
PerfDbgTag(tagNoWriteCache,     "Dwn", "! Force BINDF_NOWRITECACHE")
PerfDbgTag(tagNoReadCache,      "Dwn", "! Force BINDF_GETNEWESTVERSION")
PerfDbgTag(tagPushData,         "Dwn", "! Force PUSHDATA");
DeclareTag(tagDwnBindTrace,     "Dwn", "Trace CDwnBindInfo refs (next instance)")
DeclareTag(tagDwnBindTraceAll,  "Dwn", "Trace CDwnBindInfo refs (all instances)")
DeclareTag(tagDwnBindBinds,     "Dwn", "Trace all calls to CDwnBindData::Bind")
DeclareTag(tagDwnBindPrivacy,   "Dwn", "Trace all privacy notifications and list additions")
MtDefine(CDwnBindInfo, Dwn, "CDwnBindInfo")
MtDefine(CDwnBindData, Dwn, "CDwnBindData")
MtDefine(CDwnBindData_pbPeek, CDwnBindData, "CDwnBindData::_pbPeek")
MtDefine(CDwnBindData_pbRawEcho, Dwn, "CDwnBindData::_pbRawEcho")
MtDefine(CDwnBindData_pSecConInfo, Dwn, "CDwnBindData::_pSecConInfo")
MtDefine(CDwnBindData_pchP3PHeader, Dwn, "CDwnBindData::_pchP3PHeader")

PerfDbgExtern(tagPerfWatch)
extern BOOL IsGlobalOffline();
extern BOOL g_fInIexplorer;
extern BOOL g_fDisableUnTrustedProtocol;


// Globals --------------------------------------------------------------------

CDwnBindInfo *      g_pDwnBindTrace = NULL;

#if DBG==1 || defined(PERFTAGS)
static char * const g_rgpchBindStatus[] = { "",
    "FINDINGRESOURCE","CONNECTING","REDIRECTING","BEGINDOWNLOADDATA",
    "DOWNLOADINGDATA","ENDDOWNLOADDATA","BEGINDOWNLOADCOMPONENTS",
    "INSTALLINGCOMPONENTS","ENDDOWNLOADCOMPONENTS","USINGCACHEDCOPY",
    "SENDINGREQUEST","CLASSIDAVAILABLE","MIMETYPEAVAILABLE",
    "CACHEFILENAMEAVAILABLE","BEGINSYNCOPERATION","ENDSYNCOPERATION",
    "BEGINUPLOADDATA","UPLOADINGDATA","ENDUPLOADDATA","PROTOCOLCLASSID",
    "ENCODING","VERIFIEDMIMETYPEAVAILABLE","CLASSINSTALLLOCATION",
    "DECODING","LOADINGMIMEHANDLER","CONTENTDISPOSITIONATTACH",
    "FILTERREPORTMIMETYPE","CLSIDCANINSTANTIATE","IUNKNOWNAVAILABLE",
    "DIRECTBIND","RAWMIMETYPE","PROXYDETECTING","ACCEPTRANGES",
    "COOKIE_SENT","COOKIE_RECEIVED","COOKIE_SUPPRESSED", 
    "COOKIE_STATE_UNKNOWN","COOKIE_STATE_ACCEPT","COOKIE_STATE_REJECT",
    "COOKIE_STATE_PROMPT","COOKIE_STATE_LEASH", "COOKIE_STATE_DOWNGRADE", 
    "POLICY_HREF", "P3P_HEADER", "SESSION_COOKIE_RECEIVED", 
    "PERSISTENT_COOKIE_RECEIVED", "SESSION_COOKIES_ALLOWED", "COMPACT_POLICY_RECEIVED",
    "?","?", "?","?","?","?", "?"
};
#endif

// Data for custom marshaling security
// We don't have to init this flag to FALSE because it is global data
// and global data is always init to null
BOOL                    CDwnBindInfo::_fSecretInit;
BYTE                    CDwnBindInfo::_SecretBlock[16];
CGlobalCriticalSection  CDwnBindInfo::_csSecretInit;


// Definitions ----------------------------------------------------------------

#define Align64(n)              (((n) + 63) & ~63)

#define ERRORPAGE_DNS               1
#define ERRORPAGE_SYNTAX            2
#define ERRORPAGE_NAVCANCEL         3
#define ERRORPAGE_OFFCANCEL         4
#define ERRORPAGE_CHANNELNOTINCACHE 5

BOOL IsDangerousChmMime(LPCTSTR pszURL)
{
    BOOL   fIsChime = FALSE;
    BOOL   fIsSafe  = TRUE;
    TCHAR* pch;

    if ((pszURL == NULL) || ((*pszURL) == NULL))
    {
        return FALSE;
    }

    //
    // Is this a chm file
    //

    pch = _tcschr(pszURL, _T('.'));

    while ((pch != NULL) && (!fIsChime))
    {
        if (_tcsncicmp,(pch,_TEXT(".chm"),4))
        {
            fIsChime = TRUE;
        }

        //
        // Even if we found the .chm we want to look
        // at the embedded extension.
        //
        pch++;
        pch = _tcschr(pch, _T('.'));
    }

    if (!fIsChime)
    {
        return FALSE;
    }

    while ((pch != NULL) && fIsSafe)
    {
        int i = 0;

        while (fIsSafe && (_tcslen(c_arszUnsafeExts[i])!= 0))
        {
            if (_tcsncicmp(pch,c_arszUnsafeExts[i],_tcslen(c_arszUnsafeExts[i])) == 0)
            {
                fIsSafe = FALSE;
            }

            i++;
        }

        pch++;
        pch = _tcschr(pch, _T('.'));
    }

    return !fIsSafe; 
}

BOOL IsDangerousProtoclAndChmMime(LPCTSTR pszURL)
{
    BOOL fDangerousProtocol = TRUE;
    BOOL fDangerousChm      = TRUE;

    UINT uProt = GetUrlScheme(pszURL);
    HRESULT hrParseUrl  = E_FAIL;
    LPTSTR  pTempBuffer = NULL;
    DWORD   nUrlLen = 0;
    
    pTempBuffer = new TCHAR [INTERNET_MAX_URL_LENGTH + 1];

    //
    //  Target specific dangerous protocols for now
    //

    if (URL_SCHEME_MK          == uProt || 
        URL_SCHEME_MSHELP      == uProt)             
    {
        fDangerousProtocol = TRUE;
    }
    else
    {  
        hrParseUrl = CoInternetParseUrl(pszURL,
                                        PARSE_SCHEMA,
                                        0,
                                        pTempBuffer,
                                        INTERNET_MAX_URL_LENGTH + 1,
                                        &nUrlLen,
                                        0);

        if (SUCCEEDED(hrParseUrl))
        {
            fDangerousProtocol = (_tcsicmp(pTempBuffer,_T("ms-its")) == 0)        ||
                                 (_tcsicmp(pTempBuffer,_T("ms-itss")) == 0)       ||
                                 (_tcsicmp(pTempBuffer,_T("its")) == 0)           ||
                                 (_tcsicmp(pTempBuffer,_T("mk:@msitstore")) == 0); 
        }
        else
        {
            fDangerousProtocol = FALSE;
        }
    }

    if (fDangerousProtocol)
    {
        fDangerousChm = IsDangerousChmMime(pszURL);
    }
    else
    {
        fDangerousChm = FALSE;
    }

    if (pTempBuffer)
    {
        delete[] pTempBuffer;
    }

    return fDangerousChm;
}

//
// NB - the table of errors that are handled is in shdocvw
// this needs to be kept in sync
//

// Utilities ------------------------------------------------------------------

BOOL GetFileLastModTime(TCHAR * pchFile, FILETIME * pftLastMod)
{
    WIN32_FIND_DATA fd;
    HANDLE hFF = FindFirstFile(pchFile, &fd);

    if (hFF != INVALID_HANDLE_VALUE)
    {
        *pftLastMod = fd.ftLastWriteTime;
        FindClose(hFF);
        return(TRUE);
    }

    return(FALSE);
}

BOOL GetUrlLastModTime(TCHAR * pchUrl, UINT uScheme, DWORD dwBindf, FILETIME * pftLastMod)
{
    BOOL    fRet = FALSE;
    HRESULT hr;

    Assert(uScheme == GetUrlScheme(pchUrl));

    if (uScheme == URL_SCHEME_FILE)
    {
        TCHAR achPath[MAX_PATH];
        DWORD cchPath;

        hr = THR(CoInternetParseUrl(pchUrl, PARSE_PATH_FROM_URL, 0,
                    achPath, ARRAY_SIZE(achPath), &cchPath, 0));

        if (hr == S_OK)
        {
            fRet = GetFileLastModTime(achPath, pftLastMod);
        }
    }
    else if (uScheme == URL_SCHEME_HTTP || uScheme == URL_SCHEME_HTTPS)
    {
        fRet = !IsUrlCacheEntryExpired(pchUrl, dwBindf & BINDF_FWD_BACK, pftLastMod)
               && pftLastMod->dwLowDateTime
               && pftLastMod->dwHighDateTime;
    }

    return(fRet);
}

// CDwnBindInfo ---------------------------------------------------------------

CDwnBindInfo::CDwnBindInfo()
{
    PerfDbgLog(tagDwnBindInfo, this, "CDwnBindInfo::CDwnBindInfo");

    #if DBG==1
    if (    (g_pDwnBindTrace == NULL && IsTagEnabled(tagDwnBindTrace))
        ||  IsTagEnabled(tagDwnBindTraceAll))
    {
        g_pDwnBindTrace = this;
        TraceTag((0, "DwnBindInfo [%lX] Construct %d", this, GetRefs()));
        TraceCallers(0, 1, 12);
    }
    #endif
}

CDwnBindInfo::~CDwnBindInfo()
{
    PerfDbgLog(tagDwnBindInfo, this, "+CDwnBindInfo::~CDwnBindInfo");

    #if DBG==1
    if (g_pDwnBindTrace == this || IsTagEnabled(tagDwnBindTraceAll))
    {
        g_pDwnBindTrace = NULL;
        TraceTag((0, "DwnBindInfo [%lX] Destruct", this));
        TraceCallers(0, 1, 12);
    }
    #endif

    if (_pDwnDoc)
        _pDwnDoc->Release();

    ReleaseInterface((IUnknown *)_pDwnPost);

    PerfDbgLog(tagDwnBindInfo, this, "-CDwnBindInfo::~CDwnBindInfo");
}

// CDwnBindInfo (IUnknown) --------------------------------------------------------

STDMETHODIMP
CDwnBindInfo::QueryInterface(REFIID iid, void **ppv)
{
    PerfDbgLog(tagDwnBindInfo, this, "CDwnBindInfo::QueryInterface");
    Assert(CheckThread());

    if (iid == IID_IUnknown || iid == IID_IBindStatusCallback)
        *ppv = (IBindStatusCallback *)this;
    else if (iid == IID_IServiceProvider)
        *ppv = (IServiceProvider *)this;
    else if (iid == IID_IHttpNegotiate)
        *ppv = (IHttpNegotiate *)this;
    else if (iid == IID_IHttpNegotiate2)
        *ppv = (IHttpNegotiate2 *)this;
    else if (iid == IID_IMarshal)
        *ppv = (IMarshal *)this;
    else if (iid == IID_IInternetBindInfo)
        *ppv = (IInternetBindInfo *)this;
    else if (iid == IID_IDwnBindInfo)
    {
        *ppv = this;
        AddRef();
        return(S_OK);
    }
    else
    {
        *ppv = NULL;
        return(E_NOINTERFACE);
    }

    ((IUnknown *)*ppv)->AddRef();
    return S_OK;
}

STDMETHODIMP_(ULONG)
CDwnBindInfo::AddRef()
{
    ULONG ulRefs = super::AddRef();

    #if DBG==1
    if (this == g_pDwnBindTrace || IsTagEnabled(tagDwnBindTraceAll))
    {
        TraceTag((0, "[%lX] DwnBindInfo %lX AR  %ld",
            GetCurrentThreadId(), this, ulRefs));
        TraceCallers(0, 1, 12);
    }
    #endif

    PerfDbgLog1(tagDwnBindInfo, this, "CDwnBindInfo::AddRef (cRefs=%ld)",
        ulRefs);

    return(ulRefs);
}

STDMETHODIMP_(ULONG)
CDwnBindInfo::Release()
{
    PerfDbgLog(tagDwnBindInfo, this, "+CDwnBindInfo::Release");

    ULONG ulRefs = super::Release();

    #if DBG==1
    if (this == g_pDwnBindTrace || IsTagEnabled(tagDwnBindTraceAll))
    {
        TraceTag((0, "[%lX] DwnBindInfo %lX Rel %ld",
            GetCurrentThreadId(), this, ulRefs));
        TraceCallers(0, 1, 12);
    }
    #endif

    PerfDbgLog1(tagDwnBindInfo, this, "-CDwnBindInfo::Release (cRefs=%ld)",
        ulRefs);

    return(ulRefs);
}

void
CDwnBindInfo::SetDwnDoc(CDwnDoc * pDwnDoc)
{
    if (_pDwnDoc)
        _pDwnDoc->Release();

    _pDwnDoc = pDwnDoc;

    if (_pDwnDoc)
        _pDwnDoc->AddRef();
}

void
CDwnBindInfo::SetDwnPost(CDwnPost * pDwnPost)
{
    if (_pDwnPost)
        _pDwnPost->Release();

    _pDwnPost = pDwnPost;

    if (_pDwnPost)
        _pDwnPost->AddRef();
}

UINT
CDwnBindInfo::GetScheme()
{
    return(URL_SCHEME_UNKNOWN);
}

// CDwnBindInfo (IBindStatusCallback) -----------------------------------------

STDMETHODIMP
CDwnBindInfo::OnStartBinding(DWORD grfBSCOption, IBinding *pbinding)
{
    PerfDbgLog(tagDwnBindInfo, this, "CDwnBindInfo::OnStartBinding");
    Assert(CheckThread());
    return(S_OK);
}

STDMETHODIMP
CDwnBindInfo::GetPriority(LONG *pnPriority)
{
    PerfDbgLog(tagDwnBindInfo, this, "CDwnBindInfo::GetPriority");
    Assert(CheckThread());
    *pnPriority = NORMAL_PRIORITY_CLASS;
    return(S_OK);
}

STDMETHODIMP
CDwnBindInfo::OnLowResource(DWORD dwReserved)
{
    PerfDbgLog(tagDwnBindInfo, this, "CDwnBindInfo::OnLowResource");
    Assert(CheckThread());
    return(S_OK);
}

STDMETHODIMP
CDwnBindInfo::OnProgress(ULONG ulPos, ULONG ulMax, ULONG ulCode,
    LPCWSTR pszText)
{
    PerfDbgLog(tagDwnBindInfo, this, "CDwnBindInfo::OnProgress");
    Assert(CheckThread());
  
    if (pszText && (ulCode == BINDSTATUS_MIMETYPEAVAILABLE || ulCode == BINDSTATUS_RAWMIMETYPE))
    {
        _cstrContentType.Set(pszText);
    }

    if (pszText && (ulCode == BINDSTATUS_CACHEFILENAMEAVAILABLE))
    {
        _cstrCacheFilename.Set(pszText);
    }

    return(S_OK);
}

STDMETHODIMP
CDwnBindInfo::OnStopBinding(HRESULT hrReason, LPCWSTR szReason)
{
    PerfDbgLog(tagDwnBindInfo, this, "CDwnBindInfo::OnStopBinding");
    Assert(CheckThread());
    return(S_OK);
}

STDMETHODIMP
CDwnBindInfo::GetBindInfo(DWORD * pdwBindf, BINDINFO * pbindinfo)
{
    PerfDbgLog(tagDwnBindInfo, this, "+CDwnBindInfo::GetBindInfo");
    Assert(CheckThread());

    HRESULT hr;

    if (pbindinfo->cbSize != sizeof(BINDINFO))
    {
        hr = E_FAIL;
        goto Cleanup;
    }

    memset(pbindinfo, 0, sizeof(BINDINFO));

    pbindinfo->cbSize = sizeof(BINDINFO);

    *pdwBindf = BINDF_ASYNCHRONOUS|BINDF_ASYNCSTORAGE|BINDF_PULLDATA;

    if (_pDwnDoc)
    {
        if (_fIsDocBind)
        {
            *pdwBindf |= _pDwnDoc->GetDocBindf();
            pbindinfo->dwCodePage = _pDwnDoc->GetURLCodePage();
        }
        else
        {
            *pdwBindf |= _pDwnDoc->GetBindf();
            pbindinfo->dwCodePage = _pDwnDoc->GetDocCodePage();
        }

        if (_pDwnDoc->GetLoadf() & DLCTL_URL_ENCODING_DISABLE_UTF8)
            pbindinfo->dwOptions = BINDINFO_OPTIONS_DISABLE_UTF8;
        else if (_pDwnDoc->GetLoadf() & DLCTL_URL_ENCODING_ENABLE_UTF8)
            pbindinfo->dwOptions = BINDINFO_OPTIONS_ENABLE_UTF8;
        else 
            pbindinfo->dwOptions = BINDINFO_OPTIONS_USE_IE_ENCODING;
    }

#ifdef WINCE	// WINCEREVIEW - temp until we have caching support
	*pdwBindf |= BINDF_GETNEWESTVERSION | BINDF_NOWRITECACHE;
#endif // WINCE

    #if DBG==1 || defined(PERFTAGS)
    if (IsPerfDbgEnabled(tagNoWriteCache))
        *pdwBindf |= BINDF_NOWRITECACHE;
    if (IsPerfDbgEnabled(tagNoReadCache))
        *pdwBindf |= BINDF_GETNEWESTVERSION;
    if (IsPerfDbgEnabled(tagPushData))
        *pdwBindf &= ~BINDF_PULLDATA;
    #endif

    if (_pDwnPost)
    {
        hr = THR(_pDwnPost->GetBindInfo(pbindinfo));
        if (hr)
            goto Cleanup;

        // If local cache is not demanded,
        // Then require POSTs to go all the way to the originating server
        if (!(*pdwBindf & BINDF_OFFLINEOPERATION))
        {
            *pdwBindf |= BINDF_GETNEWESTVERSION | BINDF_PRAGMA_NO_CACHE;
            *pdwBindf &= ~BINDF_RESYNCHRONIZE;
        }

        pbindinfo->dwBindVerb = BINDVERB_POST;
    }
    else
    {
        // If a GET method for a form, always hit the server
        if (!(*pdwBindf & BINDF_OFFLINEOPERATION) && (*pdwBindf & BINDF_FORMS_SUBMIT))
        {
            *pdwBindf &= ~(BINDF_GETNEWESTVERSION | BINDF_PRAGMA_NO_CACHE);
            *pdwBindf |= BINDF_RESYNCHRONIZE;
        }
        pbindinfo->dwBindVerb = BINDVERB_GET;
    }


    if (_fIsOfflineBind)
    {
        *pdwBindf &= ~(BINDF_GETNEWESTVERSION | BINDF_PRAGMA_NO_CACHE | BINDF_RESYNCHRONIZE);
        // NB (JHarding): What we really want to say here is
        // "I know you've downloaded this before, and I want the same bits, no
        //  matter what the server may have said about caches or expiration"
        // But URLMON can't do that right now.
        // *pdwBindf |= BINDF_OFFLINEOPERATION;
    }

    // If us-ascii (20127) encoding is used and it's not available on the system,
    // MLang uses 1252 during conversion to Unicode. But it cannot convert
    // from Unicode to 20127. So callers of GetBindInfo may fail to do conversion.
    // In this case pretend using 1252.
    if (   pbindinfo->dwCodePage == CP_20127
        && !IsValidCodePage(CP_20127)
       )
    {
        pbindinfo->dwCodePage = CP_1252;
    }

    hr = S_OK;

Cleanup:
    PerfDbgLog1(tagDwnBindInfo, this, "-CDwnBindInfo::GetBindInfo (hr=%lX)", hr);
    RRETURN(hr);
}

STDMETHODIMP
CDwnBindInfo::OnDataAvailable(DWORD grfBSCF, DWORD dwSize,
    FORMATETC * pformatetc, STGMEDIUM * pstgmed)
{
    PerfDbgLog(tagDwnBindInfo, this, "CDwnBindInfo::OnDataAvailable");
    Assert(CheckThread());
    return(S_OK);
}

STDMETHODIMP
CDwnBindInfo::OnObjectAvailable(REFIID riid, IUnknown *punk)
{
    PerfDbgLog(tagDwnBindInfo, this, "CDwnBindInfo::OnObjectAvailable");
    Assert(CheckThread());
    return(S_OK);
}

// CDwnBindInfo (IInternetBindInfo) -------------------------------------------

STDMETHODIMP
CDwnBindInfo::GetBindString(ULONG ulStringType, LPOLESTR * ppwzStr,
    ULONG cEl, ULONG * pcElFetched)
{
    PerfDbgLog1(tagDwnBindData, this, "+CDwnBindData::GetBindString %s",
        ulStringType == BINDSTRING_URL              ? "URL" :
        ulStringType == BINDSTRING_HEADERS          ? "HEADERS" :
        ulStringType == BINDSTRING_ACCEPT_MIMES     ? "ACCEPT_MIMES" :
        ulStringType == BINDSTRING_EXTRA_URL        ? "EXTRA_URL" :
        ulStringType == BINDSTRING_LANGUAGE         ? "LANGUAGE" :
        ulStringType == BINDSTRING_USERNAME         ? "USERNAME" :
        ulStringType == BINDSTRING_PASSWORD         ? "PASSWORD" :
        ulStringType == BINDSTRING_UA_PIXELS        ? "UA_PIXELS" :
        ulStringType == BINDSTRING_UA_COLOR         ? "UA_COLOR" :
        ulStringType == BINDSTRING_OS               ? "OS" :
        ulStringType == BINDSTRING_ACCEPT_ENCODINGS ? "ACCEPT_ENCODINGS" :
        ulStringType == BINDSTRING_POST_DATA_MIME   ? "POST_DATA_MIME" :
        "???");

    HRESULT hr = S_OK;

    *pcElFetched = 0;

    switch (ulStringType)
    {
        case BINDSTRING_URL:
            {
                if (cEl >= 1)
                {
                    LPOLESTR pwzURL = NULL;
                    pwzURL = (LPOLESTR)CoTaskMemAlloc( (_cstrUrl.Length()+1) *  sizeof(TCHAR));

                    if (!pwzURL)
                    {
                        hr = E_OUTOFMEMORY;
                        goto Cleanup;
                    }

                    memcpy(pwzURL, _cstrUrl, (_cstrUrl.Length() + 1) * sizeof(TCHAR));
                    *ppwzStr = pwzURL;
                    *pcElFetched = 1;
                }
            }
            break;
        case BINDSTRING_ACCEPT_MIMES:
            {
                if (cEl >= 1)
                {
                    ppwzStr[0] = (LPOLESTR)CoTaskMemAlloc(4 * sizeof(TCHAR));

                    if (ppwzStr[0] == 0)
                    {
                        hr = E_OUTOFMEMORY; 
                        goto Cleanup;
                    }

                    memcpy(ppwzStr[0], _T("*/*"), 4 * sizeof(TCHAR));
                    *pcElFetched = 1;
                }
            }
            break;

        case BINDSTRING_POST_COOKIE:
            {
                if (cEl >= 1 && _pDwnPost)
                {
                    hr = THR(_pDwnPost->GetHashString(&(ppwzStr[0])));

                    *pcElFetched = hr ? 0 : 1;
                }
            }
            break;

        case BINDSTRING_POST_DATA_MIME:
            {
                if (cEl >= 1 && _pDwnPost)
                {
                    LPCTSTR pcszEncoding = _pDwnPost->GetEncodingString();
                    
                    if (pcszEncoding)
                    {
                        DWORD   dwSize = sizeof(TCHAR) + 
                                    _tcslen(pcszEncoding) * sizeof(TCHAR);

                        ppwzStr[0] = (LPOLESTR)CoTaskMemAlloc(dwSize);
                        if (ppwzStr[0])
                        {
                            memcpy(ppwzStr[0], pcszEncoding, dwSize);
                            *pcElFetched = 1;
                        }
                        else
                        {
                            hr = E_OUTOFMEMORY;
                        }
                    }
                    else
                    {   // we don't know, use the default instead
                        hr = INET_E_USE_DEFAULT_SETTING;
                    }
                }

            }
            break;
    }

Cleanup:
    PerfDbgLog1(tagDwnBindData, this, "-CDwnBindData::GetBindString (hr=%lX)", hr);
    RRETURN(hr);
}

// CDwnBindInfo (IServiceProvider) --------------------------------------------

STDMETHODIMP
CDwnBindInfo::QueryService(REFGUID rguidService, REFIID riid, void ** ppvObj)
{
    PerfDbgLog(tagDwnBindInfo, this, "+CDwnBindInfo::QueryService");
    Assert(CheckThread());

    HRESULT hr;

    if (   rguidService == IID_IHttpNegotiate
        || rguidService == IID_IHttpNegotiate2)
    {
        hr = QueryInterface(riid, ppvObj);
    }
    else if (rguidService == IID_IInternetBindInfo)
    {
        hr = QueryInterface(riid, ppvObj);
    }
    else if (_pDwnDoc)
    {
        hr = _pDwnDoc->QueryService(IsBindOnApt(), rguidService, riid, ppvObj);
    }
    else
    {
        *ppvObj = NULL;
        hr = E_NOINTERFACE;
    }

    PerfDbgLog1(tagDwnBindInfo, this, "-CDwnBindInfo::QueryService (hr=%lX)", hr);
    RRETURN(hr);
}

// CDwnBindInfo (IHttpNegotiate) ----------------------------------------------

STDMETHODIMP
CDwnBindInfo::BeginningTransaction(LPCWSTR pszUrl, LPCWSTR pszHeaders,
    DWORD dwReserved, LPWSTR * ppszHeaders)
{
    PerfDbgLog1(tagDwnBindInfo, this, "+CDwnBindInfo::BeginningTransaction "
        "\"%ls\"", pszUrl ? pszUrl : g_Zero.ach);
    Assert(CheckThread());

    LPCTSTR     apch[16];
    UINT        acch[16];
    LPCTSTR *   ppch = apch;
    UINT *      pcch = acch;
    HRESULT     hr   = S_OK;

    _cstrUrl.Set(pszUrl);

    // If we have been told the exact http headers to use, use them now
    
    if (_fIsDocBind && _pDwnDoc && _pDwnDoc->GetRequestHeaders())
    {
        TCHAR *     pch;
        UINT        cch = _pDwnDoc->GetRequestHeadersLength();
        
        pch = (TCHAR *)CoTaskMemAlloc(cch * sizeof(TCHAR));

        if (pch == NULL)
        {
            hr = E_OUTOFMEMORY;
            goto Cleanup;
        }

        // note: we don't need to convert an extra zero terminator, so cch-1
        
        AnsiToWideTrivial((char *)_pDwnDoc->GetRequestHeaders(), pch, cch - 1);

        *ppszHeaders = pch;

        goto Cleanup;
    }
    
    // Otherwise, assemble the http headers
    
    *ppszHeaders = NULL;

    if (_pDwnDoc)
    {
        LPCTSTR pch;

        pch = _fIsDocBind ? _pDwnDoc->GetDocReferer() :
                _pDwnDoc->GetSubReferer();

        if (pch)
        {
            UINT uSchemeSrc;
            UINT uSchemeDst;

            if (_fIsDocBind)
                uSchemeSrc = _pDwnDoc->GetDocRefererScheme();
            else
                uSchemeSrc = _pDwnDoc->GetSubRefererScheme();

            uSchemeDst = GetScheme();

            if (uSchemeDst == URL_SCHEME_UNKNOWN && pszUrl)
                uSchemeDst = GetUrlScheme(pszUrl);

            // Only send the referer through the same protocol with the exception
            // of https protocol receiving the http referer information.
            if (uSchemeSrc == uSchemeDst || 
                (uSchemeDst == URL_SCHEME_HTTPS && uSchemeSrc == URL_SCHEME_HTTP))
            {
                UINT    cch = _tcslen(pch);
                UINT    ich = 0;

                *ppch++ = _T("Referer: ");
                *pcch++ = 9;
                *ppch++ = pch;

                for (; ich < cch; ++ich, ++pch)
                {
                    if (*pch == ':')
                    {
                        // Skip past all slashes to find the beginning of the host

                        for (++ich, ++pch; ich < cch; ++ich, ++pch)
                        {
                            if (*pch != '/')
                                break;
                        }
                        break;
                    }
                }

                *pcch++ = ich;

                if (ich < cch)
                {
                    for (; ich < cch; ++ich, ++pch)
                    {
                        if (*pch == '@')
                        {
                            *ppch++ = pch + 1;
                            *pcch++ = cch - ich - 1;
                            goto zapped;
                        }
                        else if (*pch == '/')
                            break;
                    }

                    // No username or password, so just change the last
                    // fragment to include the entire string.

                    pcch[-1] = cch;
                }
                
            zapped:

                *ppch++ = _T("\r\n");
                *pcch++ = 2;
            }
        }

        pch = _pDwnDoc->GetAcceptLanguage();

        if (pch)
        {
            *ppch++ = _T("Accept-Language: ");
            *pcch++ = 17;
            *ppch++ = pch;
            *pcch++ = _tcslen(pch);
            *ppch++ = _T("\r\n");
            *pcch++ = 2;
        }

        pch = _pDwnDoc->GetExtraHeaders();
        if (pch)
        {
            *ppch++ = pch;
            *pcch++ = _tcslen(pch);
            *ppch++ = _T("\r\n");
            *pcch++ = 2;
        }

        pch = _pDwnDoc->GetUserAgent();

        if (pch)
        {
            *ppch++ = _T("User-Agent: ");
            *pcch++ = 12;
            *ppch++ = pch;
            *pcch++ = _tcslen(pch);
            *ppch++ = _T("\r\n");
            *pcch++ = 2;
        }
    }

    if (_pDwnPost)
    {
        LPCTSTR pchEncoding = _pDwnPost->GetEncodingString();

        if (pchEncoding)
        {
            *ppch++ = _T("Content-Type: ");
            *pcch++ = 14;
            *ppch++ = pchEncoding;
            *pcch++ = _tcslen(pchEncoding);
            *ppch++ = _T("\r\n");
            *pcch++ = 2;
        }
        // KB: If we can't determine the Content-Type, we should not submit
        // anything thereby allowing the server to sniff the incoming data
        // and make its own determination.
    }

    if (ppch > apch)
    {
        LPCTSTR *   ppchEnd = ppch;
        TCHAR *     pch;
        UINT        cch = 0;

        for (; ppch > apch; --ppch)
            cch += *--pcch;

        pch = (TCHAR *)CoTaskMemAlloc((cch + 1) * sizeof(TCHAR));

        if (pch == NULL)
        {
            hr = E_OUTOFMEMORY;
            goto Cleanup;
        }

        *ppszHeaders = pch;

        for (; ppch < ppchEnd; pch += *pcch++, ppch++)
        {
            memcpy(pch, *ppch, *pcch * sizeof(TCHAR));
        }

        *pch = 0;

        Assert((UINT)(pch - *ppszHeaders) == cch);
    }

Cleanup:
    PerfDbgLog1(tagDwnBindInfo, this, "-CDwnBindInfo::BeginningTransaction (hr=%lX)", hr);
    RRETURN(hr);
}

STDMETHODIMP
CDwnBindInfo::OnResponse(DWORD dwResponseCode, LPCWSTR szResponseHeaders,
    LPCWSTR szRequestHeaders, LPWSTR * ppszAdditionalRequestHeaders)
{
    PerfDbgLog(tagDwnBindInfo, this, "+CDwnBindInfo::OnResponse");
    Assert(CheckThread());
    PerfDbgLog(tagDwnBindInfo, this, "-CDwnBindInfo::OnResponse (hr=0)");
    return(S_OK);
}

// CDwnBindInfo (IHttpNegotiate2) ----------------------------------------------

STDMETHODIMP
CDwnBindInfo::GetRootSecurityId( BYTE       * pbSecurityId, 
                                 DWORD      * pcbSecurityId, 
                                 DWORD_PTR    dwReserved)
{
    HRESULT hr = E_FAIL;

    PerfDbgLog(tagDwnBindInfo, this, "+CDwnBindInfo::GetRootSecurityId");
    Assert(CheckThread());

    if (_pDwnDoc && !_fIsRootMarkup)
    {
        hr = _pDwnDoc->GetSecurityID(pbSecurityId, pcbSecurityId);
    }

    PerfDbgLog1(tagDwnBindInfo, this, "-CDwnBindInfo::GetRootSecurityId (hr=%lX)", hr);
    RRETURN(hr);
}


// CDwnBindInfo (IMarshal) --------------------------------------------------------

// SECURITY NOTE: (jbeda 2/28/2002)
// Any data coming into an unmarshal call should be considered completely 
// untrusted.  This means that all buffers should be validated.  
//
// In the case when we are doing a free threaded marshal type trick we have
// to take extra precautions.  Specifically if we are just pushing pointers
// around in memory because we know that we are in proc we want to pass a secret
// key along with those pointers.  The code for doing this is very similar to
// the code implemented in the FTM itself.  Refer to this source file:
//  nt\com\ole32\com\dcomrem\ipmrshl.cxx 

STDMETHODIMP
CDwnBindInfo::GetUnmarshalClass(REFIID riid, void *pvInterface,
    DWORD dwDestContext, void * pvDestContext, DWORD mshlflags, CLSID * pclsid)
{
    PerfDbgLog(tagDwnBindInfo, this, "CDwnBindInfo::GetUnmarshalClass");
    HRESULT hr;

    hr = ValidateMarshalParams(riid, pvInterface, dwDestContext,
            pvDestContext, mshlflags);

    if (hr == S_OK)
    {
        *pclsid = CLSID_CDwnBindInfo;
    }

    RRETURN(hr);
}

STDMETHODIMP
CDwnBindInfo::GetMarshalSizeMax(REFIID riid, void * pvInterface,
    DWORD dwDestContext, void *pvDestContext, DWORD mshlflags, DWORD * pdwSize)
{
    PerfDbgLog(tagDwnBindInfo, this, "CDwnBindInfo::GetMarshalSizeMax");
    HRESULT hr;

    hr = ValidateMarshalParams(riid, pvInterface, dwDestContext,
            pvDestContext, mshlflags);

    if (hr == S_OK)
    {
        *pdwSize = sizeof(BYTE) +                       // fByRef
            ((dwDestContext == MSHCTX_INPROC) ?
                sizeof(CDwnBindInfo *)                  // _pDwnBindInfo
                + sizeof(_SecretBlock)                  // secret block 
                :                
                CDwnDoc::GetSaveSize(_pDwnDoc)          // _pDwnDoc
                + CDwnPost::GetSaveSize(_pDwnPost));    // _pDwnPost
    }
    else
    {
        *pdwSize = 0;
    }

    RRETURN(hr);
}

STDMETHODIMP
CDwnBindInfo::MarshalInterface(IStream * pstm, REFIID riid,
    void *pvInterface, DWORD dwDestContext,
    void *pvDestContext, DWORD mshlflags)
{
    PerfDbgLog(tagDwnBindInfo, this, "CDwnBindInfo::MarshalInterface");
    BYTE fByRef = (dwDestContext == MSHCTX_INPROC);
    HRESULT hr;

    hr = ValidateMarshalParams(riid, pvInterface, dwDestContext,
            pvDestContext, mshlflags);

    if (hr == S_OK)
        hr = pstm->Write(&fByRef, sizeof(BYTE), NULL);
    if (hr == S_OK)
    {
        if (fByRef)
        {
            CDwnBindInfo * pDwnBindInfo = this;

            // Write the secret to the stream
            hr = EnsureSecret();
            if (SUCCEEDED(hr))
            {
                hr = pstm->Write(_SecretBlock, sizeof(_SecretBlock), NULL);
                if (hr == S_OK)
                {
                    hr = pstm->Write(&pDwnBindInfo, sizeof(CDwnBindInfo *), NULL);
                    if (hr == S_OK)
                        pDwnBindInfo->AddRef();
                }
            }
        }
        else
        {
            hr = CDwnDoc::Save(_pDwnDoc, pstm);
            if (hr == S_OK)
                hr = CDwnPost::Save(_pDwnPost, pstm);
         }
    }

    RRETURN(hr);
}

STDMETHODIMP
CDwnBindInfo::UnmarshalInterface(IStream * pstm, REFIID riid, void ** ppvObj)
{
    PerfDbgLog(tagDwnBindInfo, this, "CDwnBindInfo::UnmarshalInterface");
    BYTE fByRef = FALSE;
    HRESULT hr;

    *ppvObj = NULL;

    hr = CanMarshalIID(riid) ? S_OK : E_NOINTERFACE;
    if (hr == S_OK)
        hr = pstm->Read(&fByRef, sizeof(BYTE), NULL);
    if (hr == S_OK)
    {
        CDwnBindInfo * pDwnBindInfo = NULL;

        if (fByRef)
        {
            BYTE  secret[sizeof(_SecretBlock)];

            // Our secret should have been initialized by now
            if (!_fSecretInit)
                hr = E_UNEXPECTED;

            if (SUCCEEDED(hr))
            {
                  ULONG cbSize = 0;

                  hr = pstm->Read(secret, sizeof(secret), &cbSize);
                  if (SUCCEEDED(hr))
                  {
                      if (   cbSize != sizeof(secret) 
                          || memcmp(secret, _SecretBlock, sizeof(secret)) != 0)
                      {
                          hr = E_UNEXPECTED;
                      }
                  }
                  
            }

            if (SUCCEEDED(hr))
            {
                hr = pstm->Read(&pDwnBindInfo, sizeof(CDwnBindInfo *), NULL);
            }
        }
        else
        {
            hr = CDwnDoc::Load(pstm, &_pDwnDoc);
            if (hr == S_OK)
                hr = CDwnPost::Load(pstm, &_pDwnPost);

            pDwnBindInfo = this;
            pDwnBindInfo->AddRef();
        }

        if (hr == S_OK)
        {
            hr = pDwnBindInfo->QueryInterface(riid, ppvObj);
            pDwnBindInfo->Release();
        }
    }

    RRETURN(hr);
}

STDMETHODIMP
CDwnBindInfo::ReleaseMarshalData(IStream * pstm)
{
    PerfDbgLog(tagDwnBindInfo, this, "CDwnBindInfo::ReleaseMarshalData");
    return(S_OK);
}

STDMETHODIMP
CDwnBindInfo::DisconnectObject(DWORD dwReserved)
{
    PerfDbgLog(tagDwnBindInfo, this, "CDwnBindInfo::DisconnectObject");
    return(S_OK);
}

BOOL
CDwnBindInfo::CanMarshalIID(REFIID riid)
{
    return(riid == IID_IUnknown
        || riid == IID_IBindStatusCallback
        || riid == IID_IServiceProvider
        || riid == IID_IHttpNegotiate
        || riid == IID_IHttpNegotiate2);
}

HRESULT
CDwnBindInfo::ValidateMarshalParams(REFIID riid, void *pvInterface,
    DWORD dwDestContext, void *pvDestContext, DWORD mshlflags)
{
    HRESULT hr = S_OK;
 
    if (!CanMarshalIID(riid))
        hr = E_NOINTERFACE;
    else if (   (   dwDestContext != MSHCTX_INPROC
                &&  dwDestContext != MSHCTX_LOCAL
                &&  dwDestContext != MSHCTX_NOSHAREDMEM)
            || (    mshlflags != MSHLFLAGS_NORMAL
                &&  mshlflags != MSHLFLAGS_TABLESTRONG))
        hr = E_INVALIDARG;
    else
        hr = S_OK;

    RRETURN(hr);
}

HRESULT 
CDwnBindInfo::EnsureSecret()
{
    HRESULT hr = S_OK;

    if (!_fSecretInit)
    {
        LOCK_SECTION(_csSecretInit);
        
        if (!_fSecretInit)
        {
            // The easy way to get mostly random bits
            // (Random for all but 3 bytes)
            hr = CoCreateGuid((GUID *)_SecretBlock);
            if (SUCCEEDED(hr))
            {
                _fSecretInit = TRUE;        
            }
        }
    }

    return hr;
}

// CDwnBindInfo (Internal) ----------------------------------------------------

HRESULT
CreateDwnBindInfo(IUnknown *pUnkOuter, IUnknown **ppUnk)
{
    PerfDbgLog(tagDwnBindInfo, NULL, "CreateDwnBindInfo");

    *ppUnk = NULL;

    if (pUnkOuter != NULL)
        RRETURN(CLASS_E_NOAGGREGATION);

    CDwnBindInfo * pDwnBindInfo = new CDwnBindInfo;

    if (pDwnBindInfo == NULL)
        RRETURN(E_OUTOFMEMORY);

    *ppUnk = (IBindStatusCallback *)pDwnBindInfo;
    
    return(S_OK);
}

// CDwnBindData (IUnknown) ----------------------------------------------------

STDMETHODIMP
CDwnBindData::QueryInterface(REFIID iid, void **ppv)
{
    PerfDbgLog(tagDwnBindInfo, this, "CDwnBindData::QueryInterface");
    Assert(CheckThread());

    *ppv = NULL;

    if (iid == IID_IInternetBindInfo)
        *ppv = (IInternetBindInfo *)this;
    else if (iid == IID_IInternetProtocolSink)
        *ppv = (IInternetProtocolSink *)this;
    else
        return(super::QueryInterface(iid, ppv));

    ((IUnknown *)*ppv)->AddRef();
    return S_OK;
}

STDMETHODIMP_(ULONG)
CDwnBindData::AddRef()
{
    return(super::AddRef());
}

STDMETHODIMP_(ULONG)
CDwnBindData::Release()
{
    return(super::Release());
}

// CDwnBindData (Internal) ----------------------------------------------------

CDwnBindData::~CDwnBindData()
{
    PerfDbgLog(tagDwnBindData, this, "+CDwnBindData::~CDwnBindData");

    Assert(!_fBindOnApt || _u.pts == NULL);

    if (_pDwnStm)
        _pDwnStm->Release();

    MemFree(_pbPeek);

    if (!_fBindOnApt && _o.pInetProt)
    {
        _o.pInetProt->Release();
    }

    if (_hLock)
    {
        InternetUnlockRequestFile(_hLock);
    }

    delete [] _pchP3PHeader;

    PerfDbgLog(tagDwnBindData, this, "-CDwnBindData::~CDwnBindData");
}

void
CDwnBindData::Passivate()
{

    MemFree( _pSecConInfo );
    _pSecConInfo = NULL;

    if (!_fBindTerm)
    {
        Terminate(E_ABORT);
    }

    super::Passivate();
}

void
CDwnBindData::Terminate(HRESULT hrErr)
{
    if (_fBindTerm)
        return;

    PerfDbgLog1(tagDwnBindData, this, "+CDwnBindData::Terminate (hrErr=%lX)", hrErr);

    BOOL fTerminate = FALSE;

    g_csDwnBindTerm.Enter();

    if (_fBindTerm)
        goto Cleanup;

    if (_hrErr == S_OK)
    {
        _hrErr = hrErr;
    }

    if (_fBindOnApt)
    {
        if (    !_u.pstm
            &&  !_u.punkForRel
            &&  !_u.pbc
            &&  !_u.pbinding
            &&  !_u.pts)
            goto Cleanup;

        if (_u.dwTid != GetCurrentThreadId())
        {
            if (!_u.pts || _u.fTermPosted)
                goto Cleanup;

            // We're not on the apartment thread, so we can't access
            // the objects we're binding right now.  Post a callback
            // on the apartment thread.

            PerfDbgLog(tagDwnBindData, this, "+CDwnBindData::Terminate "
                "GWPostMethodCall");

            // SubAddRef and set flags before posting the message to avoid race
            SubAddRef();
            _u.fTermPosted = TRUE;
            _u.fTermReceived = FALSE;

            HRESULT hr = GWPostMethodCallEx(_u.pts, this,
                ONCALL_METHOD(CDwnBindData, TerminateOnApt, terminateonapt), 0, FALSE, "CDwnBindData::TerminateOnApt");

            PerfDbgLog1(tagDwnBindData, this, "-CDwnBindData::Terminate "
                "GWPostMethodCall (hr=%lX)", hr);

            if (hr)
            {
            	_u.fTermReceived = TRUE;
                SubRelease();
            }

            goto Cleanup;
        }
    }

    fTerminate = TRUE;

Cleanup:
    g_csDwnBindTerm.Leave();

    if (fTerminate)
    {
        TerminateBind();
    }

    PerfDbgLog(tagDwnBindData, this, "-CDwnBindData::Terminate");
}

void BUGCALL
CDwnBindData::TerminateOnApt(DWORD_PTR dwContext)
{
    PerfDbgLog(tagDwnBindData, this, "+CDwnBindData::TerminateOnApt");

    Assert(!_u.fTermReceived);

    _u.fTermReceived = TRUE;
    TerminateBind();
    SubRelease();

    PerfDbgLog(tagDwnBindData, this, "-CDwnBindData::TerminateOnApt");
}

void
CDwnBindData::TerminateBind()
{
    PerfDbgLog(tagDwnBindData, this, "+CDwnBindData::TerminateBind");
    Assert(CheckThread());

    SubAddRef();

    g_csDwnBindTerm.Enter();

    if (_pDwnStm && !_pDwnStm->IsEofWritten())
        _pDwnStm->WriteEof(_hrErr);

    SetEof();

    if (_fBindOnApt)
    {
        IUnknown * punkRel1 = _u.pstm;
        IUnknown * punkRel2 = _u.punkForRel;
        IBindCtx * pbc      = NULL;
        IBinding * pbinding = NULL;
        BOOL       fDoAbort = FALSE;
        BOOL       fRelTls  = FALSE;

        _u.pstm             = NULL;
        _u.punkForRel       = NULL;

        if (_u.pts && _u.fTermPosted && !_u.fTermReceived)
        {
            // We've posted a method call to TerminateOnApt which hasn't been received
            // yet.  This happens if Terminate gets called on the apartment thread
            // before messages are pumped.  To keep reference counts happy, we need
            // to simulate the receipt of the method call here by first killing any
            // posted method call and then undoing the SubAddRef.

            GWKillMethodCallEx(_u.pts, this,
                  ONCALL_METHOD(CDwnBindData, TerminateOnApt, terminateonapt), 0);
                  
            // note: no danger of post/kill/set-flag race because
            // we're protected by g_csDwnBindTerm
            
            _u.fTermReceived = TRUE;
            SubRelease();
        }

        if (_fBindDone)
        {
            pbc         = _u.pbc;
            _u.pbc      = NULL;
            pbinding    = _u.pbinding;
            _u.pbinding = NULL;
            fRelTls     = !!_u.pts;
            _u.pts      = NULL;
            _fBindTerm  = TRUE;
        }
        else if (!_fBindAbort && _u.pbinding)
        {
            pbinding    = _u.pbinding;
            fDoAbort    = TRUE;
            _fBindAbort = TRUE;
        }

        g_csDwnBindTerm.Leave();

        ReleaseInterface(punkRel1);
        ReleaseInterface(punkRel2);

        if (fDoAbort)
        {
            PerfDbgLog(tagDwnBindData, this, "CDwnBindData::TerminateBind (Aborting IBinding)");
            pbinding->Abort();
        }
        else
        {
            PerfDbgLog(tagDwnBindData, this, "CDwnBindData::TerminateBind (Release IBinding)");
            ReleaseInterface(pbinding);
        }

        if (pbc)
        {
            PerfDbgLog(tagDwnBindData, this, "CDwnBindData::TerminateBind (Release IBindCtx)");
            IGNORE_HR(RevokeBindStatusCallback(pbc, this));
            ReleaseInterface(pbc);
        }

        if (fRelTls)
        {
            PerfDbgLog(tagDwnBindData, this, "CDwnBindData::TerminateBind (ReleaseThreadState)");
            ReleaseThreadState(&_u.dwObjCnt);
        }
    }
    else if (_o.pInetProt)
    {
        BOOL fDoTerm    = _fBindDone && !_fBindTerm;
        BOOL fDoAbort   = !_fBindDone && !_fBindAbort;

        if (_fBindDone)
            _fBindTerm = TRUE;
        else
            _fBindAbort = TRUE;

        g_csDwnBindTerm.Leave();

        if (fDoAbort)
        {
            PerfDbgLog(tagDwnBindData, this, "CDwnBindData::TerminateBind (Abort IInternetProtocol)");
            _o.pInetProt->Abort(E_ABORT, 0);
        }
        else if (fDoTerm)
        {
            PerfDbgLog(tagDwnBindData, this, "CDwnBindData::TerminateBind (Terminate IInternetProtocol)");
            _o.pInetProt->Terminate(0);
        }
    }
    else
    {
        _fBindTerm = TRUE;
        g_csDwnBindTerm.Leave();
    }

    SubRelease();

    PerfDbgLog(tagDwnBindData, this, "-CDwnBindData::TerminateBind");
}

void
CDwnBindData::AddToPrivacyList()
{
    if (_pDwnDoc)
    {
        g_csDwnDoc.Enter();

        CDoc *pDoc = _pDwnDoc->GetCDoc();
        if (pDoc && !pDoc->IsShut())
        {
            _dwPrivacyFlags |= (_fIsRootMarkup ? PRIVACY_URLISTOPLEVEL : 0);
            _dwPrivacyFlags |= (_pDwnPost ? PRIVACY_URLHASPOSTDATA : 0);
            THR(pDoc->AddToPrivacyList(_cstrSiteUrl, _cstrPolicyRef, _dwPrivacyFlags, _fStartedInPending));
            TraceTag((tagDwnBindPrivacy, "Added to Privacy List - url %ls, policyRef %ls, privacyFlags %x", _cstrSiteUrl, _cstrPolicyRef, _dwPrivacyFlags));
        }
        else
            TraceTag((tagDwnBindPrivacy, "Failed to add to Privacy List - could not get CDoc"));

        g_csDwnDoc.Leave();
    }
    else
        TraceTag((tagDwnBindPrivacy, "Failed to add to Privacy List - could not get CDwnDoc"));
}

HRESULT
CDwnBindData::SetBindOnApt()
{
    HRESULT hr;

    if (!(_dwFlags & DWNF_NOAUTOBUFFER))
    {
        _pDwnStm = new CDwnStm;

        if (_pDwnStm == NULL)
        {
            hr = E_OUTOFMEMORY;
            goto Cleanup;
        }
    }

    hr = THR(AddRefThreadState(&_u.dwObjCnt));
    if (hr)
        goto Cleanup;

    _u.pts      = GetThreadState();
    _u.dwTid    = GetCurrentThreadId();
    _fBindDone  = TRUE;
    _fBindOnApt = TRUE;

Cleanup:
    RRETURN(hr);
}

#if DBG==1
BOOL
CDwnBindData::CheckThread()
{
    return(!_fBindOnApt || _u.dwTid == GetCurrentThreadId());
}
#endif

void
CDwnBindData::OnDwnDocCallback(void * pvArg)
{
    PerfDbgLog(tagDwnBindData, this, "+CDwnBindData::OnDwnDocCallback");

    Assert(!_fBindOnApt);

    if (_o.pInetProt)
    {
        HRESULT hr = THR(_o.pInetProt->Continue((PROTOCOLDATA *)pvArg));

        if (hr)
        {
            SignalDone(hr);
        }
    }

    PerfDbgLog(tagDwnBindData, this, "-CDwnBindData::OnDwnDocCallback");
}

void
CDwnBindData::SetEof()
{
    PerfDbgLog(tagDwnBindDataIO, this, "+CDwnBindData::SetEof");

    g_csDwnBindPend.Enter();

    _fPending = FALSE;
    _fEof = TRUE;

    g_csDwnBindPend.Leave();

    PerfDbgLog(tagDwnBindDataIO, this, "-CDwnBindData::SetEof");
}

void
CDwnBindData::SetPending(BOOL fPending)
{
    PerfDbgLog1(tagDwnBindDataIO, this, "+CDwnBindData::SetPending %s",
        fPending ? "TRUE" : "FALSE");

    g_csDwnBindPend.Enter();

    if (!_fEof)
    {
        _fPending = fPending;
    }

    g_csDwnBindPend.Leave();

    PerfDbgLog(tagDwnBindDataIO, this, "-CDwnBindData::SetPending");
}

// CDwnBindData (Binding) -----------------------------------------------------

void
CDwnBindData::Bind(DWNLOADINFO * pdli, DWORD dwFlagsExtra)
{
    PerfDbgLog(tagPerfWatch, this, "+CDwnBindData::Bind");
    PerfDbgLog(tagDwnBindData, this, "+CDwnBindData::Bind");
     LPTSTR      pchAlloc = NULL;
    IMoniker *  pmkAlloc = NULL;
    IBindCtx *  pbcAlloc = NULL;
    IStream *   pstm     = NULL;
    CDwnDoc *   pDwnDoc  = pdli->pDwnDoc;
    IBindHost * pbh      = pDwnDoc ? pDwnDoc->GetBindHost() : NULL;
    CMarkup *   pMarkup  = pDwnDoc ? pDwnDoc->GetMarkup() : _pDwnDoc->GetMarkup();
    LPCTSTR     pchUrl;
    IMoniker *  pmk;
    IBindCtx *  pbc;
    IWrappedProtocol * pWP = NULL;
    HRESULT     hr;

    TraceTag((tagDwnBindBinds, "CDwnBindData::Bind url=%S", pdli->pchUrl ? pdli->pchUrl : _T("UNKNOWN")));
    
    _dwFlags = dwFlagsExtra;

    if (pDwnDoc)
    {
        _dwFlags |= pDwnDoc->GetDownf();
    }

    if (_dwFlags & DWNF_ISDOCBIND)
    {
        SetIsDocBind();
    }

    if (_dwFlags & DWNF_ISROOTMARKUP)
    {
        SetIsRootMarkup();
    }

    // Doing it here rather than in the constructor since we memset the class on creating
    // and adding a constructor means re-initializing 
    ResetPrivacyInfo();

    // Case 1: Binding to an user-supplied IStream

    if (pdli->pstm)
    {
        Assert(!pdli->fForceInet);

        _dwSecFlags = (!pdli->fUnsecureSource && IsUrlSecure(pdli->pchUrl)) ? SECURITY_FLAG_SECURE : 0;

        hr = THR(SetBindOnApt());
        if (hr)
            goto Cleanup;

        ReplaceInterface(&_u.pstm, pdli->pstm);
        SignalData();
        
        // Retain the url so we can send url info in the cookie privacy notifications
        _cstrSiteUrl.Set(pdli->pchUrl);
        
        goto Cleanup;
    }

    // Case 2: Not binding to a moniker or URL.  This is a manual binding
    // where data will be provided externally and shunted to the consumer.
    // Actual configuration of buffering will occur outside this function.
        
    if (pdli->fClientData || (!pdli->pmk && !pdli->pchUrl))
    {
        _dwSecFlags = (!pdli->fUnsecureSource && IsUrlSecure(pdli->pchUrl)) ? SECURITY_FLAG_SECURE : 0;
        hr = S_OK;
        goto Cleanup;
    }

    // Case 3: Binding asynchronously with IInternetSession

    pchUrl = pdli->pchUrl;

    if (!pchUrl && IsAsyncMoniker(pdli->pmk) == S_OK)
    {
        hr = THR(pdli->pmk->GetDisplayName(NULL, NULL, &pchAlloc));
        if (hr)
            goto Cleanup;

        pchUrl = pchAlloc;
    }

    // Retain the url so we can send url info in the cookie privacy notifications
    _cstrSiteUrl.Set(pchUrl);

    // Since INTERNET_OPTION_SECURITY_FLAGS doesn't work for non-wininet URLs
    _uScheme = pchUrl ? GetUrlScheme(pchUrl) : URL_SCHEME_UNKNOWN;

    // Check _uScheme first before calling IsUrlSecure to avoid second (slow) GetUrlScheme call
    _dwSecFlags = (_uScheme != URL_SCHEME_HTTP &&
                   _uScheme != URL_SCHEME_FILE &&
                   !pdli->fUnsecureSource &&
                   IsUrlSecure(pchUrl)) ? SECURITY_FLAG_SECURE : 0;
    
    if (    _uScheme == URL_SCHEME_FILE
        &&  (_dwFlags & (DWNF_GETFILELOCK|DWNF_GETMODTIME)))
    {
        TCHAR achPath[MAX_PATH];
        DWORD cchPath;

        hr = THR(CoInternetParseUrl(pchUrl, PARSE_PATH_FROM_URL, 0,
                    achPath, ARRAY_SIZE(achPath), &cchPath, 0));
        if (hr)
            goto Cleanup;

        hr = THR(_cstrFile.Set(achPath));
        if (hr)
            goto Cleanup;

        if (_cstrFile && (_dwFlags & DWNF_GETMODTIME))
        {
            GetFileLastModTime(_cstrFile, &_ftLastMod);
        }
    }

#ifndef _MAC // Temporarily disable this code so we can get images to load until IInternetSession is fully implemented
    if (    pchUrl
        &&  pdli->pInetSess
        &&  !pbh
        &&  !pdli->pbc
        &&  (   _uScheme == URL_SCHEME_FILE
            ||  _uScheme == URL_SCHEME_HTTP
            ||  _uScheme == URL_SCHEME_HTTPS)
        #if DBG==1 || defined(PERFTAGS)
        &&  !IsPerfDbgEnabled(tagDwnBindSlow)
        #endif
        )
    {
        hr = THR(pdli->pInetSess->CreateBinding(NULL, pchUrl, NULL,
                    NULL, &_o.pInetProt, 0));
        if (hr)
            goto Cleanup;

        //
        // If this QI succeeds, then it means that we've gotten an URLMON wrapper object on
        // an APP instead of the system protocol.  This changes things in 2 ways:
        // 1) If this is a speculative download from the tokenizer (fForceInet == TRUE ), 
        //      we should just bail.  Ideally, we should have an out-of-band stream between 
        //      the tokenzier and postparser that could kick off speculative downloads on 
        //      the UI thread, but that's a bit of work.
        // 2) If this is a normal download, we should re-create the binding, passing in
        //      OIBDG_APARTMENTTHREADED, so that we only get called back on the UI thread.
        //
        if( SUCCEEDED( _o.pInetProt->QueryInterface( IID_IWrappedProtocol, (void **)&pWP ) ) )
        {
#if DBG == 1
            // Right now this method is just there for future compat.  If this assert fires,
            // we should understand what the new code means before changing this.
            LONG lCode;
            pWP->GetWrapperCode( &lCode, NULL );
            Assert( lCode == 0 );
#endif
            pWP->Release();
            ClearInterface( &_o.pInetProt );

            if( pdli->fForceInet )
            {
                // Case 1 - abort speculative download
                hr = E_FAIL;
                goto Cleanup;
            }
            else
            {
                // Case 2 - restart apartment threaded
                hr = THR(pdli->pInetSess->CreateBinding(NULL, pchUrl, NULL,
                            NULL, &_o.pInetProt, PI_APARTMENTTHREADED));
                if( hr )
                    goto Cleanup;
            }
        }
        
        if (!_fIsDocBind)
        {
            IOInetPriority * pOInetPrio = NULL;

            _o.pInetProt->QueryInterface(IID_IInternetPriority, (void **)&pOInetPrio);

            if (pOInetPrio)
            {
                IGNORE_HR(pOInetPrio->SetPriority(THREAD_PRIORITY_BELOW_NORMAL));
                pOInetPrio->Release();
            }
        }

        hr = THR(_o.pInetProt->Start(pchUrl, this, this,
                    PI_MIMEVERIFICATION, 0));

        // That's it.  We're off ...

        goto Cleanup;
    }

    if (pdli->fForceInet)
    {
        hr = E_FAIL;
        goto Cleanup;
    }
#endif // _MAC

    // Case 4: Binding through URL moniker on apartment thread

    pmk = pdli->pmk;

    if (pmk == NULL)
    {
        hr = THR(CreateURLMoniker(NULL, pchUrl, &pmkAlloc));
        if (hr)
            goto Cleanup;
    
        pmk = pmkAlloc;
    }

    hr = THR(SetBindOnApt());
    if (hr)
        goto Cleanup;

    pbc = pdli->pbc;

    if (pbc == NULL)
    {
        hr = THR(CreateBindCtx(0, &pbcAlloc));
        if (hr)
            goto Cleanup;

        pbc = pbcAlloc;
    }

    // Register the "Accept: " headers
    if (_fIsDocBind && pMarkup && pMarkup->Doc()->_pShellBrowser)
        RegisterDefaultAcceptHeaders(pbc, pMarkup->Doc()->_pShellBrowser);

    ReplaceInterface(&_u.pbc, pbc);

    if ((dwFlagsExtra & DWNF_IMGLOAD) && 
        ((_uScheme == URL_SCHEME_JAVASCRIPT) || (_uScheme == URL_SCHEME_VBSCRIPT) || 
         (_uScheme == URL_SCHEME_ABOUT) || !pchUrl || !*pchUrl))
    {
        Assert(pMarkup);
        CStr cstrCreatorUrl;

        hr = THR(cstrCreatorUrl.Set(CMarkup::GetUrl(pMarkup)));
        if (hr)
            goto Cleanup;

#if DBG==1
        // We should not find a bind context param in this case.
        // We will assert but won't touch whatever was inside the bctxparam 
        hr = GetBindContextParam(pbc, &cstrCreatorUrl);

        Assert(hr != S_OK);
#endif

        hr = THR(AddBindContextParam(pbc, &cstrCreatorUrl));
        if (hr)
            goto Cleanup;
    }

    if (pbh)
    {
        hr = THR(pbh->MonikerBindToStorage(pmk, pbc, this,
                IID_IStream, (void **)&pstm));
        if (FAILED(hr))
            goto Cleanup;
    }
    else
    {
        hr = THR(RegisterBindStatusCallback(pbc, this, 0, 0));
        if (FAILED(hr))
            goto Cleanup;

        // If aggregated, save the pUnkOuter in the bind context
        if (_pDwnDoc->GetCDoc() && _pDwnDoc->GetCDoc()->IsAggregated())
        {
            // we're being aggregated
            // don't need to add ref, should be done by routine
            hr = pbc->RegisterObjectParam(L"AGG", _pDwnDoc->GetCDoc()->PunkOuter());
            if (FAILED(hr))
                goto Cleanup;
        }

        hr = THR(pmk->BindToStorage(pbc, NULL, IID_IStream, (void **)&pstm));
        if (FAILED(hr))
        {
            IGNORE_HR(RevokeBindStatusCallback(pbc, this));
            goto Cleanup;
        }
        else if (S_ASYNCHRONOUS == hr && _fBindMayBeIntercepted)
        {
            // 
            // This bind was intercepted by a pluggable protocol (ex: getright)
            // We stop the navigation by signalling data not available.
            //
            TraceTag((tagError, "Bind was Intercepted by pluggable protocol"));
            SignalDone(INET_E_DATA_NOT_AVAILABLE);
        }
    }

    if (pstm)
    {
        ReplaceInterface(&_u.pstm, pstm);
        SignalData();
    }

    hr = S_OK;

Cleanup:

    // If failed to start binding, signal done
    if (hr)
    {
        SignalDone(hr);
    }
    
    ReleaseInterface(pbcAlloc);
    ReleaseInterface(pmkAlloc);
    ReleaseInterface(pstm);
    CoTaskMemFree(pchAlloc);

    PerfDbgLog1(tagDwnBindData, this, "-CDwnBindData::Bind (returning void, hr=%lX)", hr);
    PerfDbgLog(tagPerfWatch, this, "-CDwnBindData::Bind");
}

// CDwnBindData (Reading) ---------------------------------------------------------

HRESULT
CDwnBindData::Peek(void * pv, ULONG cb, ULONG * pcb, BOOL fReadForMimeChk)
{
    PerfDbgLog1(tagDwnBindData, this, "+CDwnBindData::Peek (req %ld)", cb);

    ULONG   cbRead;
    ULONG   cbPeek = _pbPeek ? *(ULONG *)_pbPeek : 0;
    HRESULT hr = S_OK;

    *pcb = 0;

    if (cb > cbPeek)
    {
        if (Align64(cb) > Align64(cbPeek))
        {
            hr = THR(MemRealloc(Mt(CDwnBindData_pbPeek),
                        (void **)&_pbPeek, sizeof(ULONG) + Align64(cb)));
            if (hr)
                goto Cleanup;
        }

        cbRead = 0;

        hr = THR(ReadFromData(_pbPeek + sizeof(ULONG) + cbPeek,
                    cb - cbPeek, &cbRead, fReadForMimeChk));
        if (hr)
            goto Cleanup;

        cbPeek += cbRead;
        *(ULONG *)_pbPeek = cbPeek;

        if (cbPeek == 0)
        {
            // We don't want the state where _pbPeek exists but has no peek
            // data.  The IsEof and IsPending functions assume this won't
            // happen.

            MemFree(_pbPeek);
            _pbPeek = NULL;
        }

    }

    if (cb > cbPeek)
        cb = cbPeek;

    if (cb > 0)
        memcpy(pv, _pbPeek + sizeof(ULONG), cb);

    *pcb = cb;

Cleanup:
    PerfDbgLog3(tagDwnBindData, this, "-CDwnBindData::Peek (%ld bytes) %c%c",
        *pcb, IsPending() ? 'P' : ' ', IsEof() ? 'E' : ' ');
    RRETURN(hr);
}

HRESULT
CDwnBindData::Read(void * pv, ULONG cb, ULONG * pcb)
{
    PerfDbgLog1(tagDwnBindDataIO, this, "+CDwnBindData::Read (req %ld)", cb);

    ULONG   cbRead  = 0;
    ULONG   cbPeek  = _pbPeek ? *(ULONG *)_pbPeek : 0;
    HRESULT hr      = S_OK;

    if (cbPeek)
    {
        cbRead = (cb > cbPeek) ? cbPeek : cb;

        memcpy(pv, _pbPeek + sizeof(ULONG), cbRead);

        if (cbRead == cbPeek)
        {
            MemFree(_pbPeek);
            _pbPeek = NULL;
        }
        else
        {
            memmove(_pbPeek + sizeof(ULONG), _pbPeek + sizeof(ULONG) + cbRead, 
                cbPeek - cbRead);
            *(ULONG *)_pbPeek -= cbRead;
        }

        cb -= cbRead;
        pv = (BYTE *)pv + cbRead;
    }

    *pcb = cbRead;

    if (cb)
    {
        hr = THR(ReadFromData(pv, cb, pcb));

        if (hr)
            *pcb  = cbRead;
        else
            *pcb += cbRead;
    }

    if (_pDwnDoc)
        _pDwnDoc->AddBytesRead(*pcb);

    PerfDbgLog3(tagDwnBindDataIO, this, "-CDwnBindData::Read (got %ld) %c%c",
        *pcb, IsPending() ? 'P' : ' ', IsEof() ? 'E' : ' ');

    RRETURN(hr);
}
    
HRESULT
CDwnBindData::ReadFromData(void * pv, ULONG cb, ULONG * pcb, BOOL fReadForMimeChk)
{
    PerfDbgLog1(tagDwnBindDataIO, this, "+CDwnBindData::ReadFromData (cb=%ld)", cb);

    BOOL fBindDone = _fBindDone;
    HRESULT hr;

    if (_pDwnStm)
    {
        if (!fReadForMimeChk)
        {
            hr = THR(_pDwnStm->Read(pv, cb, pcb));            
        }
        else
        {
            hr = THR(_pDwnStm->ReadForMimeChk(pv, cb, pcb));
        }
    }
    else
        hr = THR(ReadFromBind(pv, cb, pcb));

    if (hr || (fBindDone && IsEof()))
    {
        SignalDone(hr);
    }

    PerfDbgLog2(tagDwnBindDataIO, this,
        "-CDwnBindData::ReadFromData (*pcb=%ld,hr=%lX)", *pcb, hr);

    RRETURN(hr);
}

HRESULT
CDwnBindData::ReadFromBind(void * pv, ULONG cb, ULONG * pcb)
{
    PerfDbgLog1(tagDwnBindDataIO, this, "+CDwnBindData::ReadFromBind (cb=%ld)", cb);
    Assert(CheckThread());

    HRESULT hr;

    #if DBG==1 || defined(PERFTAGS)
    BOOL fBindDone = _fBindDone;
    #endif

    *pcb = 0;

    if (_fEof)
        hr = S_FALSE;
    else if (!_fBindOnApt)
    {
        if (_o.pInetProt)
        {
            SetPending(TRUE);

            hr = _o.pInetProt->Read(pv, cb, pcb);

            PerfDbgLog2(tagDwnBindDataIO, this,
                "CDwnBindData::ReadFromBind InetProt::Read (*pcb=%ld,hr=%lX)",
                *pcb, hr);
        }
        else
            hr = S_FALSE;
    }
    else if (_u.pstm)
    {
        SetPending(TRUE);

        hr = _u.pstm->Read(pv, cb, pcb);

        PerfDbgLog2(tagDwnBindDataIO, this,
            "CDwnBindData::ReadFromBind IStream::Read (*pcb=%ld,hr=%lX)",
            *pcb, hr);
    }
    else
        hr = S_FALSE;

    AssertSz(hr != E_PENDING || !fBindDone, 
        "URLMON reports data pending after binding done!");

    if (!hr && cb && *pcb == 0)
    {
        PerfDbgLog(tagDwnBindData, this,
            "CDwnBindData::ReadFromBind (!hr && !*pcb) == Implied Eof!");
        hr = S_FALSE;
    }
 
    if (hr == E_PENDING)
    {
        hr = S_OK;
    }
    else if (hr == S_FALSE)
    {
        SetEof();

        if (_fBindOnApt)
        {
            ClearInterface(&_u.pstm);
        }

        hr = S_OK;
    }
    else if (hr == S_OK)
    {
        SetPending(FALSE);
    }

    #if DBG==1 || defined(PERFTAGS)
    _cbBind += *pcb;
    #endif

    PerfDbgLog6(tagDwnBindDataIO, this,
        "-CDwnBindData::ReadFromBind (*pcb=%ld,cbBind=%ld,hr=%lX) %c%c%c",
        *pcb, _cbBind, hr, _fPending ? 'P' : ' ', _fEof ? 'E' : ' ',
        fBindDone ? 'D' : ' ');

    RRETURN(hr);
}

void
CDwnBindData::BufferData()
{
    PerfDbgLog(tagPerfWatch, this, "+CDwnBindData::BufferData");

    if (_pDwnStm)
    {
        void *  pv;
        ULONG   cbW, cbR;
        HRESULT hr = S_OK;

        for (;;)
        {
            hr = THR(_pDwnStm->WriteBeg(&pv, &cbW));
            if (hr)
                break;

            Assert(cbW > 0);

            hr = THR(ReadFromBind(pv, cbW, &cbR));
            if (hr)
                break;

            Assert(cbR <= cbW);

            _pDwnStm->WriteEnd(cbR);

            if (cbR == 0)
                break;
        }

        if (hr || _fEof)
        {
            _pDwnStm->WriteEof(hr);
        }

        if (hr)
        {
            SignalDone(hr);
        }
    }

    PerfDbgLog(tagPerfWatch, this, "-CDwnBindData::BufferData");
}

BOOL
CDwnBindData::IsPending()
{
    return(!_pbPeek && (_pDwnStm ? _pDwnStm->IsPending() : _fPending));
}

BOOL
CDwnBindData::IsEof()
{
    return(!_pbPeek && (_pDwnStm ? _pDwnStm->IsEof() : _fEof));
}

// CDwnBindData (Callback) ----------------------------------------------------

void
CDwnBindData::SetCallback(CDwnLoad * pDwnLoad)
{
    PerfDbgLog(tagDwnBindData, this, "+CDwnBindData::SetCallback");

    g_csDwnBindSig.Enter();

    _wSig     = _wSigAll;
    _pDwnLoad = pDwnLoad;
    _pDwnLoad->SubAddRef();

    g_csDwnBindSig.Leave();

    if (_wSig)
    {
        Signal(0);
    }

    if (_fHandleFailedNavigationOnAttatch)
    {
        HandleFailedNavigation(_hrReasonForFailedNavigation);
    }

    PerfDbgLog(tagDwnBindData, this, "-CDwnBindData::SetCallback");
}

void
CDwnBindData::Disconnect()
{
    PerfDbgLog(tagDwnBindData, this, "+CDwnBindData::Disconnect");

    g_csDwnBindSig.Enter();

    CDwnLoad * pDwnLoad = _pDwnLoad;

    _pDwnLoad = NULL;
    _wSig     = 0;

    g_csDwnBindSig.Leave();

    if (pDwnLoad)
        pDwnLoad->SubRelease();

    PerfDbgLog(tagDwnBindData, this, "-CDwnBindData::Disconnect");
}

void
CDwnBindData::Signal(WORD wSig)
{
    PerfDbgLog1(tagDwnBindData, this, "+CDwnBindData::Signal (wSig=%04lX)", wSig);

    SubAddRef();

    for (;;)
    {
        CDwnLoad *  pDwnLoad = NULL;
        WORD        wSigCur  = 0;

        g_csDwnBindSig.Enter();

        // DBF_DONE is sent exactly once, even though it may be signalled
        // more than once.  If we are trying to signal it and have already
        // done so, turn off the flag.

        wSig &= ~(_wSigAll & DBF_DONE);

        // Remember all flags signalled since we started in case we disconnect
        // and reconnect to a new client.  That way we can replay all the
        // missed flags.

        _wSigAll |= wSig;

        if (_pDwnLoad)
        {
            // Someone is listening, so lets figure out what to tell the
            // callback.  Notice that if _dwSigTid is not zero, then a
            // different thread is currently in a callback.  In that case,
            // we just let it do the callback again when it returns.

            _wSig |= wSig;

            if (_wSig && !_dwSigTid)
            {
                wSigCur   = _wSig;
                _wSig     = 0;
                _dwSigTid = GetCurrentThreadId();
                pDwnLoad  = _pDwnLoad;
                pDwnLoad->SubAddRef();
            }
        }

        g_csDwnBindSig.Leave();

        if (!pDwnLoad)
            break;

        // NB: (jbeda, jharding) If this is not _fBindOnApt, then
        // we want to delay BufferData as long as possible -- so
        // we do it only right before we signal.  We can't do this
        // when _fBindOnApt because that might cause us to do the
        // BufferData on the wrong thread.
        if (!_fBindOnApt && _pDwnStm && (wSigCur & DBF_DATA))
        {
            BufferData();
        }

        pDwnLoad->OnBindCallback(wSigCur);
        pDwnLoad->SubRelease();

        _dwSigTid = 0;
        wSig      = 0;
    }

    SubRelease();

    PerfDbgLog(tagDwnBindData, this, "-CDwnBindData::Signal");
}

void
CDwnBindData::SignalRedirect(LPCTSTR pszText, IUnknown *punkBinding)
{
    PerfDbgLog1(tagDwnBindData, this, "+CDwnBindData::SignalRedirect %ls", pszText);

    IWinInetHttpInfo * pwhi = NULL;
    char  achA[16];
    TCHAR achW[16];
    ULONG cch = ARRAY_SIZE(achA);
    HRESULT hr;

    //$ Need protection here.  Redirection can happen more than once.
    //$ This means that GetRedirect() returns a potentially dangerous
    //$ string.

    // Discover the last HTTP request method

    _cstrMethod.Free();
    hr = THR(punkBinding->QueryInterface(IID_IWinInetHttpInfo, (void **)&pwhi));
    if (!hr && pwhi)
    {
        hr = THR(pwhi->QueryInfo(HTTP_QUERY_REQUEST_METHOD, &achA, &cch, NULL, 0));
        if (!hr && cch)
        {
            AnsiToWideTrivial(achA, achW, cch);
            hr = THR(_cstrMethod.Set(achW));
            if (hr)
                goto Cleanup;

            if (_tcsequal(_T("POST"), _cstrMethod))
            {
                // HACK HACK HACK !!
                // Double check the status code to see if this is a real POST
                // there is a HttpQueryInfo() bug which will send verb=POST
                // on a POST->GET Redirect
                //

                DWORD dwStatusCode = 0;
                ULONG cch = sizeof(dwStatusCode);

                hr = THR(pwhi->QueryInfo(HTTP_QUERY_STATUS_CODE | HTTP_QUERY_FLAG_NUMBER,
                                         &dwStatusCode, &cch, NULL, 0));
                if (!hr && cch && dwStatusCode != HTTP_STATUS_REDIRECT_KEEP_VERB)
                {
                    hr = THR(_cstrMethod.Set(_T("GET")));
                    if (hr)
                        goto Cleanup;
                }
            }
        }
    }

    // In case the new URL isn't covered by wininet: clear security flags
    
    _dwSecFlags = IsUrlSecure(pszText) ? SECURITY_FLAG_SECURE : 0;
    
    // Set the redirect url
    
    hr = THR(_cstrRedirect.Set(pszText));

    // Redirection means that our POST request, if any, may have become a GET
    
    if (!_cstrMethod || !_tcsequal(_T("POST"), _cstrMethod))
        SetDwnPost(NULL);

Cleanup:

    ReleaseInterface(pwhi);
    
    if (hr)
        SignalDone(hr);
    else
    {
        Signal(DBF_REDIRECT);

        AddToPrivacyList();
        ResetPrivacyInfo();
        // If this was a top level navigation then this redirection should be considered
        // a non-user initiated navigation, so we need to add the dummy marker record here
        if (_fIsRootMarkup)
            AddToPrivacyList();
        
        // Store the redirect url 
        Assert(pszText);
        _cstrSiteUrl.Set(pszText);
    }

    PerfDbgLog(tagDwnBindData, this, "-CDwnBindData::SignalRedirect");
}

void
CDwnBindData::SignalProgress(DWORD dwPos, DWORD dwMax, DWORD dwStatus)
{
    PerfDbgLog(tagDwnBindData, this, "+CDwnBindData::SignalProgress");

    _DwnProg.dwMax    = dwMax;
    _DwnProg.dwPos    = dwPos;
    _DwnProg.dwStatus = dwStatus;

    Signal(DBF_PROGRESS);

    PerfDbgLog(tagDwnBindData, this, "-CDwnBindData::SignalProgress");
}

void
CDwnBindData::SignalFile(LPCTSTR pszText)
{
    if (    pszText
        &&  *pszText
        &&  (_dwFlags & DWNF_GETFILELOCK)
        &&  (   _uScheme == URL_SCHEME_HTTP
             || _uScheme == URL_SCHEME_HTTPS
             || _uScheme == URL_SCHEME_FTP
             || _uScheme == URL_SCHEME_GOPHER
             || ( _pDwnDoc && _pDwnDoc->GetTrustAPPCache()) ))
    {
        HRESULT hr = THR(_cstrFile.Set(pszText));

        if (hr)
        {
            SignalDone(hr);
        }
    }
}

void
CDwnBindData::SignalHeaders(IUnknown * punkBinding)
{
    PerfDbgLog(tagDwnBindData, this, "+CDwnBindData::SignalHeaders");

    IWinInetHttpInfo * pwhi = NULL;
    IWinInetInfo *pwi = NULL;
    BOOL fSignal = FALSE;
    ULONG cch;
    HRESULT hr = S_OK;

    punkBinding->QueryInterface(IID_IWinInetHttpInfo, (void **)&pwhi);

    if (pwhi)
    {
        CHAR    achA[256];
        TCHAR   achW[256];
 
        if (_dwFlags & DWNF_GETCONTENTTYPE)
        {
            cch = sizeof(achA);

            hr = THR(pwhi->QueryInfo(HTTP_QUERY_CONTENT_TYPE, achA, &cch, NULL, 0));

            if (hr == S_OK && cch > 0)
            {
                AnsiToWideTrivial(achA, achW, cch);

                hr = THR(_cstrContentType.Set(achW));
                if (hr)
                    goto Cleanup;

                fSignal = TRUE;
            }

            hr = S_OK;
        }

        if (_dwFlags & DWNF_GETREFRESH)
        {
            cch = sizeof(achA);

            hr = THR(pwhi->QueryInfo(HTTP_QUERY_REFRESH, achA, &cch, NULL, 0));

            if (hr == S_OK && cch > 0)
            {
                AnsiToWideTrivial(achA, achW, cch);

                hr = THR(_cstrRefresh.Set(achW));
                if (hr)
                    goto Cleanup;

                fSignal = TRUE;
            }

            hr = S_OK;
        }

        if (_dwFlags & DWNF_GETMODTIME)
        {
            SYSTEMTIME st;
            cch = sizeof(SYSTEMTIME);

            hr = THR(pwhi->QueryInfo(HTTP_QUERY_LAST_MODIFIED|HTTP_QUERY_FLAG_SYSTEMTIME,
                        &st, &cch, NULL, 0));

            if (hr == S_OK && cch == sizeof(SYSTEMTIME))
            {
                if (SystemTimeToFileTime(&st, &_ftLastMod))
                {
                    fSignal = TRUE;
                }
            }

            hr = S_OK;
        }

        if (_dwFlags & DWNF_GETPICS)
        {
            ExternTag(tagPics);

            cch = sizeof(achA);
            StrCpyA(achA, "PICS-Label");
            hr = THR(pwhi->QueryInfo(HTTP_QUERY_CUSTOM, achA, &cch, NULL, 0));
            if (hr == S_OK && cch > 0)
            {
                AnsiToWideTrivial(achA, achW, cch);

                hr = THR(_cstrPics.Set(achW));
                if (hr)
                    goto Cleanup;

                fSignal = TRUE;

                TraceTag((tagPics, "PICS-Label: %S", achW));
            }
        }
        
        Assert(!(_dwFlags & DWNF_HANDLEECHO) || (_dwFlags & DWNF_GETSTATUSCODE));

        if (_dwFlags & DWNF_GETSTATUSCODE)
        {
            cch = sizeof(_dwStatusCode);

            hr = THR(pwhi->QueryInfo(HTTP_QUERY_STATUS_CODE|HTTP_QUERY_FLAG_NUMBER,
                        &_dwStatusCode, &cch, NULL, 0));

            if (!hr && (_dwFlags & DWNF_HANDLEECHO) && _dwStatusCode == HTTP_STATUS_RETRY_WITH)
            {
                ULONG cb = 0;

                hr = THR(pwhi->QueryInfo(HTTP_QUERY_FLAG_REQUEST_HEADERS | HTTP_QUERY_ECHO_HEADERS_CRLF, NULL, &cb, NULL, 0));
                if ((hr && hr != S_FALSE) || !cb)
                    goto NoHeaders;

                Assert(!_pbRawEcho);
                MemFree(_pbRawEcho);
                
                _pbRawEcho = (BYTE *)MemAlloc(Mt(CDwnBindData_pbRawEcho), cb);
                if (!_pbRawEcho)
                {
                    hr = E_OUTOFMEMORY;
                    goto Cleanup;
                }

                _cbRawEcho = cb;

                hr = THR(pwhi->QueryInfo(HTTP_QUERY_FLAG_REQUEST_HEADERS | HTTP_QUERY_ECHO_HEADERS_CRLF, _pbRawEcho, &cb, NULL, 0));
                Assert(!hr && cb+1 == _cbRawEcho);
                
            NoHeaders:
                ;
            }

            fSignal = TRUE;
            hr = S_OK;
        }
    }
    
    if (!pwhi)
    {
        punkBinding->QueryInterface(IID_IWinInetInfo, (void **)&pwi);
    }
    else
    {
        pwi = pwhi;
        pwhi = NULL;
    }

    if (_dwFlags & DWNF_GETFLAGS)
    {
        if (pwi)
        {
            DWORD dwFlags;
            cch = sizeof(DWORD);

            hr = THR_NOTRACE(pwi->QueryOption(INTERNET_OPTION_REQUEST_FLAGS, &dwFlags, &cch));
            if (hr == S_OK && cch == sizeof(DWORD))
            {
                _dwReqFlags = dwFlags;
            }

            // NOTE: wininet does not remember security for cached files,
            // if it's from the cache, don't ask wininet; just use security-based-on-url.

            cch = sizeof(DWORD);

            hr = THR_NOTRACE(pwi->QueryOption(INTERNET_OPTION_SECURITY_FLAGS, &dwFlags, &cch));
            if (hr == S_OK && cch == sizeof(DWORD))
            {
                if ((dwFlags & SECURITY_FLAG_SECURE) || !(_dwReqFlags & INTERNET_REQFLAG_FROM_CACHE))
                    _dwSecFlags = dwFlags;
            }
        }
        
        fSignal = TRUE; // always pick up security flags

        hr = S_OK;
    }

    if ((_dwFlags & DWNF_GETSECCONINFO) && pwi)
    {
        ULONG cb = sizeof(INTERNET_SECURITY_CONNECTION_INFO);
        INTERNET_SECURITY_CONNECTION_INFO isci;
        
        Assert(!_pSecConInfo);
        MemFree(_pSecConInfo);

        isci.dwSize = cb;
        
        hr = THR_NOTRACE(pwi->QueryOption(INTERNET_OPTION_SECURITY_CONNECTION_INFO, &isci, &cb));
        if (!hr && cb == sizeof(INTERNET_SECURITY_CONNECTION_INFO))
        {
            _pSecConInfo = (INTERNET_SECURITY_CONNECTION_INFO *)MemAlloc(Mt(CDwnBindData_pSecConInfo), cb);
            if (!_pSecConInfo)
            {
                hr = E_OUTOFMEMORY;
                goto Cleanup;
            }

            memcpy(_pSecConInfo, &isci, cb);
        }

        hr = S_OK;
    }


    if (_cstrFile)
    {
        fSignal = TRUE;

        if (pwi && _uScheme != URL_SCHEME_FILE)
        {
            cch = sizeof(HANDLE);
            IGNORE_HR(pwi->QueryOption(WININETINFO_OPTION_LOCK_HANDLE, &_hLock, &cch));
        }
    }

Cleanup:

    if (pwhi)
        pwhi->Release();

    if (pwi)
        pwi->Release();

    if (hr)
        SignalDone(hr);
    else if (fSignal)
        Signal(DBF_HEADERS);

    PerfDbgLog2(tagDwnBindData, this, "-CDwnBindData::SignalHeaders ReqFlags:%lx SecFlags:%lx", _dwReqFlags, _dwSecFlags);
}

void
CDwnBindData::SignalData()
{
    PerfDbgLog(tagDwnBindData, this, "+CDwnBindData::SignalData");

    // NB: (jbeda, jharding) If we are _fBindOnApt, we need to buffer 
    // data here to make sure that we do it on the correct thread.  We 
    // can't do it late because in Signal because it might be picked up 
    // and done on the wrong thread
    if (_fBindOnApt && _pDwnStm)
    {
        BufferData();
    }

    Signal(DBF_DATA);

    PerfDbgLog(tagDwnBindData, this, "-CDwnBindData::SignalData");
}

void
CDwnBindData::SignalDone(HRESULT hrErr)
{
    PerfDbgLog1(tagDwnBindData, this, "+CDwnBindData::SignalDone (hrErr=%lX)", hrErr);

    Terminate(hrErr);

    Signal(DBF_DONE);

    PerfDbgLog(tagDwnBindData, this, "-CDwnBindData::SignalDone");
}

// CDwnBindData (Misc) --------------------------------------------------------

LPCTSTR
CDwnBindData::GetFileLock(HANDLE * phLock, BOOL *pfPretransform)
{
    // Don't grab the file if there is a MIME filter or we have a transformed HTML file
    // because we don't want to look at the file directly.
    BOOL fTransform = FALSE;
    CDwnDoc *pDwnDoc;
    if ((pDwnDoc = GetDwnDoc()) != NULL)
        fTransform = pDwnDoc->GetDwnTransform();
    *pfPretransform = _fMimeFilter || fTransform;
    if (_cstrFile)  // note that the file will always be returned
    {
        *phLock = _hLock;
        _hLock = NULL;

        return(_cstrFile);
    }

    *phLock = NULL;
    return(NULL);
}

void
CDwnBindData::GiveRawEcho(BYTE **ppb, ULONG *pcb)
{
    Assert(!*ppb);
    
    *ppb = _pbRawEcho;
    *pcb = _cbRawEcho;
    _pbRawEcho = NULL;
    _cbRawEcho = 0;
}

void
CDwnBindData::GiveSecConInfo(INTERNET_SECURITY_CONNECTION_INFO **ppsci)
{
    Assert(!*ppsci);
    
    *ppsci = _pSecConInfo;
    _pSecConInfo = NULL;
}

// CDwnBindData (IBindStatusCallback) -----------------------------------------

STDMETHODIMP
CDwnBindData::OnStartBinding(DWORD grfBSCOption, IBinding *pbinding)
{
    PerfDbgLog(tagPerfWatch, this, "+CDwnBindData::OnStartBinding");
    PerfDbgLog(tagDwnBindData, this, "+CDwnBindData::OnStartBinding");

    Assert(_fBindOnApt && CheckThread());

    _fBindDone = FALSE;

    ReplaceInterface(&_u.pbinding, pbinding);

    if (!_fIsDocBind)
    {
        IGNORE_HR(pbinding->SetPriority(THREAD_PRIORITY_BELOW_NORMAL));
    }

    PerfDbgLog(tagDwnBindData, this, "-CDwnBindData::OnStartBinding");
    PerfDbgLog(tagPerfWatch, this, "-CDwnBindData::OnProgress");

    return(S_OK);
}

void
CDwnBindData::SignalCache(IBindCtx * pbc, ULONG ulPos, ULONG ulMax, ULONG ulCode, LPCWSTR pszText)
{
    IUnknown *      pUnk = NULL;
    CDwnBindInfo *  pDwnBindInfo      = NULL;

    if (pbc)
    {
        pbc->GetObjectParam(SZ_DWNBINDINFO_OBJECTPARAM, &pUnk);

        if (pUnk)
        {
            pUnk->QueryInterface(IID_IDwnBindInfo, (void **)&pDwnBindInfo);

            if (pDwnBindInfo)
            {
                IGNORE_HR(pDwnBindInfo->OnProgress(ulPos, ulMax,  ulCode,  pszText));
            }
        }
        ReleaseInterface(pUnk);
        ReleaseInterface((IBindStatusCallback *)pDwnBindInfo);
    }
}

STDMETHODIMP
CDwnBindData::OnProgress(ULONG ulPos, ULONG ulMax, ULONG ulCode, LPCWSTR pszText)
{
    PerfDbgLog(tagPerfWatch, this, "+CDwnBindData::OnProgress");
    PerfDbgLog4(tagDwnBindData, this, "+CDwnBindData::OnProgress %ld %ld %s \"%ls\"",
        ulPos, ulMax, g_rgpchBindStatus[ulCode], pszText ? pszText : g_Zero.ach);

    BindingNotIntercepted();

    //
    // marka - tickle dialmon periodically - 
    // like shdocvw's CDocObjectHost::CDOHBindStatusCallback::OnProgress
    //
    IndicateWinsockActivity();
    
    Assert(_fBindOnApt && CheckThread());

    CDoc * pDoc = _pDwnDoc ? _pDwnDoc->GetCDoc() : NULL;

    switch (ulCode)
    {
        case BINDSTATUS_SENDINGREQUEST:
            if (   _pDwnDoc
                && _pDwnDoc->GetMarkup()
                && !_pDwnDoc->GetMarkup()->_fLoadingHistory
                && _pDwnDoc->GetCDoc()
                && _pDwnDoc->GetCDoc()->_pClientSite)
            {
                IUnknown_Exec(_pDwnDoc->GetCDoc()->_pClientSite,
                              &CGID_DocHostCmdPriv,
                              DOCHOST_SENDINGREQUEST,
                              0, NULL, NULL);
            }

            break;

        case BINDSTATUS_COOKIE_SENT:            
            if(pszText && *pszText && pDoc)
            {
                TraceTag((tagDwnBindPrivacy, "CDwnBindData::ReportProgress - Received BINDSTATUS_COOKIE_SENT for url %ls", pszText));            
                THR(pDoc->AddToPrivacyList(pszText, NULL, COOKIEACTION_READ)); 
            }
            else
            {
                TraceTag((tagDwnBindPrivacy, "CDwnBindData::ReportProgress - Received BINDSTATUS_COOKIE_SENT for url %ls", _cstrSiteUrl));            
                _dwPrivacyFlags |= COOKIEACTION_READ;
            }
            break;

        case BINDSTATUS_COOKIE_SUPPRESSED:            
            if(pszText && *pszText && pDoc)
            {
                TraceTag((tagDwnBindPrivacy, "CDwnBindData::ReportProgress - Received BINDSTATUS_COOKIE_SUPPRESSED for url %ls", pszText));
                THR(pDoc->AddToPrivacyList(pszText, NULL, COOKIEACTION_SUPPRESS)); 
            }
            else
            {
                TraceTag((tagDwnBindPrivacy, "CDwnBindData::ReportProgress - Received BINDSTATUS_COOKIE_SUPPRESSED for url %ls", _cstrSiteUrl));
                _dwPrivacyFlags |= COOKIEACTION_SUPPRESS;
            }
            break;

        case BINDSTATUS_COOKIE_STATE_UNKNOWN:
            TraceTag((tagDwnBindPrivacy, "Trident should never BINDSTATUS_COOKIE_STATE_UNKNOWN from Wininet/Urlmon for url %ls", _cstrSiteUrl));
            break;
        case BINDSTATUS_COOKIE_STATE_ACCEPT:            
            if(pszText && *pszText && pDoc)
            {
                TraceTag((tagDwnBindPrivacy, "CDwnBindData::OnProgress - Received BINDSTATUS_COOKIE_STATE_ACCEPT for url %ls", pszText));
                THR(pDoc->AddToPrivacyList(pszText, NULL, COOKIEACTION_ACCEPT)); 
            }
            else
            {
                TraceTag((tagDwnBindPrivacy, "CDwnBindData::OnProgress - Received BINDSTATUS_COOKIE_STATE_ACCEPT for url %ls", _cstrSiteUrl));
                _dwPrivacyFlags |= COOKIEACTION_ACCEPT;
            }
            break;
        case BINDSTATUS_COOKIE_STATE_REJECT:            
            if(pszText && *pszText && pDoc)
            {
                TraceTag((tagDwnBindPrivacy, "CDwnBindData::OnProgress - Received BINDSTATUS_COOKIE_STATE_REJECT for url %ls", pszText));
                THR(pDoc->AddToPrivacyList(pszText, NULL, COOKIEACTION_REJECT)); 
            }
            else
            {
                TraceTag((tagDwnBindPrivacy, "CDwnBindData::OnProgress - Received BINDSTATUS_COOKIE_STATE_REJECT for url %ls", _cstrSiteUrl));
                _dwPrivacyFlags |= COOKIEACTION_REJECT;
            }
            break;
        case BINDSTATUS_COOKIE_STATE_LEASH:            
            if(pszText && *pszText && pDoc)
            {
                TraceTag((tagDwnBindPrivacy, "CDwnBindData::OnProgress - Received BINDSTATUS_COOKIE_STATE_LEASH for url %ls", pszText));
                THR(pDoc->AddToPrivacyList(pszText, NULL, COOKIEACTION_LEASH)); 
            }
            else
            {
                TraceTag((tagDwnBindPrivacy, "CDwnBindData::OnProgress - Received BINDSTATUS_COOKIE_STATE_LEASH for url %ls", _cstrSiteUrl));
                _dwPrivacyFlags |= COOKIEACTION_LEASH;
            }
            break;
        case BINDSTATUS_COOKIE_STATE_DOWNGRADE:            
            if(pszText && *pszText && pDoc)
            {
                TraceTag((tagDwnBindPrivacy, "CDwnBindData::OnProgress - Received BINDSTATUS_COOKIE_STATE_DOWNGRADE for url %ls", pszText));
                THR(pDoc->AddToPrivacyList(pszText, NULL, COOKIEACTION_DOWNGRADE)); 
            }
            else
            {
                TraceTag((tagDwnBindPrivacy, "CDwnBindData::OnProgress - Received BINDSTATUS_COOKIE_STATE_DOWNGRADE for url %ls", _cstrSiteUrl));
                _dwPrivacyFlags |= COOKIEACTION_DOWNGRADE;
            }
            break;
            
        case BINDSTATUS_COMPACT_POLICY_RECEIVED:
            _dwPrivacyFlags |= PRIVACY_URLHASCOMPACTPOLICY;
            break;            
        
        case BINDSTATUS_POLICY_HREF:
            TraceTag((tagDwnBindPrivacy, "CDwnBindData::OnProgress - Received BINDSTATUS_POLICY_HREF for url %ls", _cstrSiteUrl));
            Assert(pszText && *pszText);
            _cstrPolicyRef.Set(pszText);
            _dwPrivacyFlags |= PRIVACY_URLHASPOLICYREFHEADER;
            break;

        case BINDSTATUS_P3P_HEADER:
            TraceTag((tagDwnBindPrivacy, "CDwnBindData::OnProgress - Received BINDSTATUS_P3P_HEADER for url %ls", _cstrSiteUrl));
            Assert(pszText && *pszText);
            {
                // We are getting two notifications from urlmon, once that is fixed, need to uncomment this assert
                //Assert(!_pchP3PHeader);
                delete [] _pchP3PHeader;

                unsigned len = _tcslen(pszText);
                _pchP3PHeader = new(Mt(CDwnBindData_pchP3PHeader)) TCHAR[len + 1];
                if (_pchP3PHeader)
                {
                    _tcscpy(_pchP3PHeader, pszText);
                    _pchP3PHeader[len] = _T('\0');
                }
                _dwPrivacyFlags |= PRIVACY_URLHASP3PHEADER;
            }
            break;

        case BINDSTATUS_REDIRECTING:
            SignalRedirect(pszText, _u.pbinding);
            break;

        case BINDSTATUS_CACHEFILENAMEAVAILABLE:
            SignalFile(pszText);
            SignalCache(_u.pbc, ulPos, ulMax,  ulCode,  pszText);
            break;

        case BINDSTATUS_RAWMIMETYPE:
            _pRawMimeInfo = GetMimeInfoFromMimeType(pszText);
            _fReceivedMimeNotification = TRUE;
            SignalCache(_u.pbc, ulPos, ulMax,  ulCode,  pszText);
            break;

        case BINDSTATUS_MIMETYPEAVAILABLE:
            SignalCache(_u.pbc, ulPos, ulMax,  ulCode,  pszText);
            _pmi = GetMimeInfoFromMimeType(pszText);
            _fReceivedMimeNotification = TRUE;
            if (StrCmpIC(pszText,_T("text/xml")) == 0)
                _pDwnDoc->SetDocIsXML(TRUE);
            if (!_pmi)
            {
                // This stores the media mime-type as a string on the bind ctx.
                // This is a hook for the IE Media Bar, so that when navigation
                // is delegated to shdocvw, the media bar can catch media urls.
                // This approach is needed because (as per VenkatK) the mime-type 
                // cannot be curently obtained from the bind ctx after delegating 
                // to shdocvw.
                SetMediaMimeOnBindCtx(pszText, _u.pbc);
            }
            break;

        case BINDSTATUS_LOADINGMIMEHANDLER:
            _fMimeFilter = TRUE;
            break;

        case BINDSTATUS_FINDINGRESOURCE:
            if (   _pDwnDoc
                && _pDwnDoc->GetMarkup()
                && !_pDwnDoc->GetMarkup()->_fLoadingHistory
                && _pDwnDoc->GetCDoc()
                && _pDwnDoc->GetCDoc()->_pClientSite)
            {
                IUnknown_Exec(_pDwnDoc->GetCDoc()->_pClientSite,
                              &CGID_DocHostCmdPriv,
                              DOCHOST_FINDINGRESOURCE,
                              0, NULL, NULL);
            }

            // Intentional fall-through.

        case BINDSTATUS_CONNECTING:
        case BINDSTATUS_BEGINDOWNLOADDATA:
        case BINDSTATUS_DOWNLOADINGDATA:
        case BINDSTATUS_ENDDOWNLOADDATA:
            SignalProgress(ulPos, ulMax, ulCode);

            if (_pDwnDoc && _pDwnDoc->GetCDoc())
            {
                CMarkup        * pMarkup        = _pDwnDoc->GetMarkup();
                COmWindowProxy * pWindowPending = pMarkup  ? pMarkup->GetWindowPending() : NULL;

                if (    pWindowPending 
                    &&  pWindowPending->Window()->_pMarkup
                    && !pWindowPending->Window()->IsPrimaryWindow())
                {
                    // NB (scotrobe): ulProgress depends on the value of ulCode.
                    //
                    ULONG ulProgress = ulCode >= BINDSTATUS_BEGINDOWNLOADDATA ? (ulCode-1) : ulCode;

                    _pDwnDoc->GetCDoc()->_webOCEvents.FrameProgressChange(pWindowPending,
                                                                          ulProgress,
                                                                          BINDSTATUS_ENDDOWNLOADDATA - 1);
                }
            }

            break;

        case BINDSTATUS_CONTENTDISPOSITIONATTACH:
            _fDelegateDownload = TRUE;
            break;
    }

    // NB: Shdocvw would handle http errors (404) on the OnStopBinding of its BindToObject bind.
    // However, we are always doing BindToStorage so OnStopBinding has different meaning.  Instead,
    // we handle http errors when BEGINDOWNLOADDATA is sent -- this is an equivalent time 
    // for BindToStorage.  We also want to make sure that we don't switch before we can process
    // this data -- don't worry -- it shouldn't be a problem.  Why would we switch before we have
    // *any* data?
    if (ulCode == BINDSTATUS_BEGINDOWNLOADDATA)
    {
        HandleFailedNavigation(S_OK);
    }
  
    PerfDbgLog(tagDwnBindData, this, "-CDwnBindData::OnProgress");
    PerfDbgLog(tagPerfWatch, this, "-CDwnBindData::OnProgress");
    return(S_OK);
}

//
//  Only available in the DDK so defined here 
//
#define E_INVALID_SYNTAX  0x800401E4

STDMETHODIMP
CDwnBindData::OnStopBinding(HRESULT hrReason, LPCWSTR szReason)
{
    PerfDbgLog(tagPerfWatch, this, "+CDwnBindData::OnStopBinding");
    PerfDbgLog2(tagDwnBindData, this, "+CDwnBindData::OnStopBinding %lX \"%ls\"",
        hrReason, szReason ? szReason : g_Zero.ach);
    Assert(_fBindOnApt && CheckThread());

    LPWSTR pchError = NULL;

    SubAddRef();

    _fBindDone = TRUE;

    //
    // We will always be notified of mime-type before OnStopBinding
    // if there is a mime-type to be had. The reason we would not get
    // a mime-type is because the bind failed too quickly. I believe that 
    // the only way the bind would fail that quickly is because of a syntax
    // error in the URL; however I am not going to rely on that belief.
    // I will use CoInternetParseUrl to check syntax of the URL.
    // 
    // CoInternetParseUrl will verify the syntax against the protocol.
    // It is more expensive than Parse URL; however using.
    //
    // OnStopBinding is where Trident does all its error handling.
    // This is a problem, because if we do have syntactically bad Url
    // then it will show up in SignalDone and not here. So what we are going
    // to do, change the reason from okay to invalid syntax for this 
    // one error case.
    //
    // The reason we do this is because if we keep delegating to Shdocvw
    // Urls with invalid syntax instead using HandleFailedNavigation, 
    // it will eventually blow up Shdocvw.
    // 

    //
    // This breaks application compatibility, so let us make sure we are
    // hosted in the browser and the we don't have any reported mime-type
    // GetMimeInfo filters out certain mime-types.
    //

    if (g_fInIexplorer && (_fReceivedMimeNotification != TRUE) && !SHRegGetBoolUSValue(TEXT("SOFTWARE\\Microsoft\\Internet Explorer\\Main"), TEXT("Enable Browser Extensions"), FALSE, TRUE))
    {
        if ((GetMimeInfo() == NULL) && SUCCEEDED(hrReason))
        {
            HRESULT  hrParseUrl  = E_FAIL;
            LPTSTR   pTempBuffer = NULL;
            DWORD    nUrlLen;

            pTempBuffer = new TCHAR [INTERNET_MAX_URL_LENGTH + 1];

            if (pTempBuffer)
            {
                // CoInternetParseUrl does not give us a detailed 
                // analysis of its failures. So we going to check 
                // the protocol and the domain because they or so
                // important. We are going to check the mime-type.
                // It was the lack of a mime-type that caused 
                // us to have a problem with Windows Bugs://493765

                hrParseUrl = CoInternetParseUrl(_cstrSiteUrl,
                                                PARSE_SCHEMA,
                                                0,
                                                pTempBuffer,
                                                INTERNET_MAX_URL_LENGTH + 1,
                                                &nUrlLen,
                                                0);

                if (SUCCEEDED(hrParseUrl))
                {
                    hrParseUrl = CoInternetParseUrl(_cstrSiteUrl,
                                                    PARSE_DOMAIN,
                                                    0,
                                                    pTempBuffer,
                                                    INTERNET_MAX_URL_LENGTH + 1,
                                                    &nUrlLen,
                                                    0);
                }

                if (SUCCEEDED(hrParseUrl))
                {
                    hrParseUrl = CoInternetParseUrl(_cstrSiteUrl,
                                                    PARSE_MIME,
                                                    0,
                                                    pTempBuffer,
                                                    INTERNET_MAX_URL_LENGTH + 1,
                                                    &nUrlLen,
                                                    0);
                }

                //
                // Just to be ultra safe, let's check that we aren't failing 
                // these checks because we are dealing with a local file.
                //

                if (SUCCEEDED(hrParseUrl))
                {
                    hrParseUrl = CoInternetParseUrl(_cstrSiteUrl,
                                                    PARSE_PATH_FROM_URL,
                                                    0,
                                                    pTempBuffer,
                                                    INTERNET_MAX_URL_LENGTH + 1,
                                                    &nUrlLen,
                                                    0);
                }

                if (FAILED(hrParseUrl))
                {
                    hrReason = E_INVALID_SYNTAX;
                }
            }

            delete[] pTempBuffer;
        }
    }

    if (SUCCEEDED(hrReason) &&
        g_fDisableUnTrustedProtocol &&
        _pDwnDoc->HasCallerUrl() &&
        IsDangerousProtoclAndChmMime(_cstrSiteUrl))
    {
        DWORD dwZoneIDCaller  = URLZONE_UNTRUSTED;

        //
        // Get the security manager.
        //
        //
        // I don't trust _pDwnDoc calls on _pDoc
        // They cause leaks and threading issues.
        //

        HRESULT hrSec = E_FAIL;

        IInternetSecurityManager* pISM = NULL; 

        hrSec = THR(CoInternetCreateSecurityManager(NULL, &pISM, 0));

        if (SUCCEEDED(hrSec))
        {
            hrSec = pISM->MapUrlToZone(_pDwnDoc->GetCallerUrl(),&dwZoneIDCaller,0);

            if (FAILED(hrSec) ||
                ((dwZoneIDCaller != URLZONE_LOCAL_MACHINE) &&
                 (dwZoneIDCaller != URLZONE_TRUSTED)))
            {
                hrReason = E_ACCESSDENIED;        
            }

            ClearInterface(&pISM);
        }
    }

    //
    // Handle a bad error -- friendly error page
    // is handled with BINDSTATUS_BEGINDOWNLOADDATA
    //
    if (hrReason && hrReason != E_ABORT && hrReason != INET_E_TERMINATED_BIND)
    {
        HandleFailedNavigation(hrReason);
    }

    if (hrReason || _fBindAbort)
    {
        CLSID clsid;
        HRESULT hrUrlmon = S_OK;

        if (_u.pbinding && GetErrorStatusCode() == HTTP_STATUS_NO_CONTENT)
        {
            HandleFailedNavigation(S_OK);
            SignalDone(INET_E_DATA_NOT_AVAILABLE);
        }
        else
        {        
            if (_u.pbinding)
                IGNORE_HR(_u.pbinding->GetBindResult(&clsid, (DWORD *)&hrUrlmon, &pchError, NULL));

            // NB: URLMON returns a native Win32 error.
            if (SUCCEEDED(hrUrlmon))
                hrUrlmon = HRESULT_FROM_WIN32(hrUrlmon);

            if (!SUCCEEDED(hrUrlmon))
            {
                SignalDone(hrUrlmon);
            }
            else
            {
                SignalDone(hrReason);
            }

            if ( hrReason == INET_E_DOWNLOAD_FAILURE && IsGlobalOffline() )
            {
                _hrErr =  hrReason ; // store the original error result.
            }            
        }
    }
    else if (!_fBindNotIntercepted)
    {
        //
        // OnStopBinding has been called before OnProgress or OnDataAvaiable
        // the bind may have been intercepted - we can tell when we return from BindToStorage
        //
        _fBindMayBeIntercepted = TRUE;

        //
        // Special case for navigation javascript: navigation within security=restricted 
        // OnStopBind gets called, after the bind is done, 
        // but OnProgress, OnDataAvailable don't get called
        //
        // TODO: urlmon should tell us in a better way that this wasn't allowed due to security
        // 
        CMarkup* pMarkup = _pDwnDoc->GetMarkup();
        CWindow* pWindow = pMarkup ? pMarkup->GetWindowedMarkupContext()->GetWindowPending()->Window() : NULL ;

        if ( pWindow &&
             pWindow->_fRestricted)
        {                    
            SignalDone(INET_E_DATA_NOT_AVAILABLE);
        }
    }
    else
    {
        SetPending(FALSE);
        SignalData();
    }

    SubRelease();
    CoTaskMemFree(pchError);

    PerfDbgLog(tagDwnBindData, this, "-CDwnBindData::OnStopBinding");
    PerfDbgLog(tagPerfWatch, this, "-CDwnBindData::OnStopBinding");
    return(S_OK);
}

//+---------------------------------------------------------------
//
//  Member   : CDwnBindData::VerifyResource
//
//  Synopsis : This method checks if an url points to an UNC
//             and if so, ensures that it's alive so we can 
//             go to shdocvw.
//----------------------------------------------------------------

HRESULT
CDwnBindData::VerifyResource()
{
    HRESULT hr = INET_E_RESOURCE_NOT_FOUND;
    TCHAR szPath[MAX_PATH];
    DWORD dwLen = ARRAY_SIZE(szPath);

    if (SUCCEEDED(PathCreateFromUrl(CMarkup::GetUrl(_pDwnDoc->GetMarkup()), szPath, &dwLen, 0))
        && PathIsUNC(szPath))
    {
        DWORD dwRes;
        HANDLE hEnum;
        PTSTR psz = szPath + 2;
        while (*psz && *psz!=TEXT('\\'))
            psz++;

        if (!*psz || !*(psz+1))
        {
#ifdef UNICODE
            if (g_dwPlatformID==VER_PLATFORM_WIN32_NT)
            {
#endif
                NETRESOURCE nr = {RESOURCE_GLOBALNET,RESOURCETYPE_ANY,
                        RESOURCEDISPLAYTYPE_GENERIC, RESOURCEUSAGE_CONTAINER,
                        NULL, szPath, NULL, NULL};

                dwRes = WNetOpenEnum(RESOURCE_GLOBALNET, RESOURCETYPE_ANY,
                        RESOURCEUSAGE_ALL, &nr, &hEnum);
#ifdef UNICODE
            }
            else
            {
                CHAR szPathA[MAX_PATH];
                SHUnicodeToAnsi(szPath, szPathA, ARRAY_SIZE(szPath));

                {
                    NETRESOURCEA nr = {RESOURCE_GLOBALNET,RESOURCETYPE_ANY,
                            RESOURCEDISPLAYTYPE_GENERIC, RESOURCEUSAGE_CONTAINER,
                            NULL, szPathA, NULL, NULL};

                    dwRes = WNetOpenEnumA(RESOURCE_GLOBALNET, RESOURCETYPE_ANY,
                            RESOURCEUSAGE_ALL, &nr, &hEnum);
                }
            }
#endif
            if (WN_SUCCESS==dwRes)
            {
                WNetCloseEnum(hEnum);
                hr = INET_E_REDIRECT_TO_DIR;
            }
        }
    }
    return hr;
}

//+---------------------------------------------------------------------------
//
//  Member : DontAddToMRU
//
//  Synopsis : parallel to the docHost function of the same name.
//
//----------------------------------------------------------------------------

void 
CDwnBindData::DontAddToMRU()
{
    IDockingWindow    * pdw  = NULL;
    IOleCommandTarget * poct = NULL;
    IServiceProvider  * psp  = NULL;

    if (   _pDwnDoc->GetCDoc()->_pShellBrowser 
        && SUCCEEDED(_pDwnDoc->GetCDoc()->_pShellBrowser->QueryInterface(IID_IServiceProvider, 
                                                                       (LPVOID*)&psp)))
    {
        if (   psp
            && SUCCEEDED(psp->QueryService(SID_SExplorerToolbar, 
                                           IID_IDockingWindow, 
                                           (LPVOID*)&pdw)))
        {
            if (SUCCEEDED(pdw->QueryInterface(IID_IOleCommandTarget, (LPVOID*)&poct)))
            {
                // Get the URL we were navigating to
                CVariant cvarURL;

                cvarURL.vt      = VT_BSTR;
                V_BSTR(&cvarURL) = SysAllocString (CMarkup::GetUrl(_pDwnDoc->GetMarkup()));

                poct->Exec(&CGID_Explorer, SBCMDID_ERRORPAGE, 0, &cvarURL, NULL);
            }
        }
    }

    ReleaseInterface(poct);
    ReleaseInterface(pdw);
    ReleaseInterface(psp);
}

//+---------------------------------------------------------------
//
//  Member   : CDwnBindData::HandleFailedNavigation
//
//  Synopsis : This method alerts the client site of a download
//             error. If the given error code is 0, the HTTP
//             status code will be retrieved and sent to the
//             client site instead.
// 
//  Input    : hrReason - the binding error or HTTP status code.
//
//  Note     : This method builds a SafeArray that is sent
//             to the client site. Here is the format of the
//             SafeArray. (See CMarkup::DoAutoSearch.)
//
//             pos  data                            type
//             ---  -----------------------------   ----------
//             0    error code                      VT_I4
//             1    pending URL                     VT_BSTR
//             2    IBinding interface              VT_UNKNOWN
//             3    current window's IHTMLWindow2   VT_UNKNOWN
//             4    flag - do autosearch or show
//                  friendly error page             VT_BOOL
//
//----------------------------------------------------------------

void
CDwnBindData::HandleFailedNavigation(HRESULT hrReason)
{
    COmWindowProxy * pWindowPending = NULL;

    if (!_pDwnDoc || !_pDwnDoc->GetCDoc())
    {
        goto Cleanup;
    }

    //
    // Send SBCMDID_CANCELNAVIGATION ( to show offline cancel dialog if necessary ).
    //
    if ((hrReason == INET_E_DOWNLOAD_FAILURE) && IsGlobalOffline())
    {
        IGNORE_HR(CTExec(_pDwnDoc->GetCDoc()->_pClientSite,  &CGID_Explorer,
                     SBCMDID_CANCELNAVIGATION, 0, NULL, NULL ));
    } 

    if (!_pDwnDoc->GetMarkup())
        goto Cleanup;

    if (   _fBindAbort
        || !_fIsDocBind
        || !_pDwnLoad
        || !_pDwnDoc->GetCDoc()->_pClientSite
        || (   hrReason == E_ABORT
            && IsSpecialUrl(CMarkup::GetUrl(_pDwnDoc->GetMarkup()))))
    {
        if (hrReason==INET_E_RESOURCE_NOT_FOUND)
        {
            hrReason = VerifyResource();
        }

        // if we ever get attatched to an element, call this function again!
        if (   hrReason
            && hrReason != INET_E_REDIRECT_TO_DIR
            && hrReason != HRESULT_FROM_WIN32(ERROR_NOT_ENOUGH_MEMORY))
        {
            _hrReasonForFailedNavigation      = hrReason;
            _fHandleFailedNavigationOnAttatch = TRUE;
        }

        goto Cleanup;
    }
   
    // If the binding didn't fail, find out if there
    // was a WinInet error (e.g., 404 - file not found).
    //
    if (!hrReason)
    {
        hrReason = GetErrorStatusCode();

        if (!hrReason || hrReason == HTTP_STATUS_NO_CONTENT)
        {
            goto Cleanup;
        }
    }

    if (IsErrorHandled(hrReason))
    {
        _pDwnDoc->GetMarkup()->NoteErrorWebPage();
        if (_DwnProg.dwPos > _GetErrorThreshold(hrReason))
        {
            // Mimic shdocvw behavior. We only navigate to the error page - if we get 
            // below a certain threshold. Beyond the threshhold - we display the data
            // that we received.
            // 
            // (carled) this also include NOT adding this url to the MRU
            //
            DontAddToMRU();

            _pDwnDoc->GetMarkup()->_fServerErrorPage = TRUE;

            _pDwnDoc->GetCDoc()->_webOCEvents.NavigateError(_pDwnDoc->GetMarkup(), hrReason);

            hrReason = S_OK;
            goto Cleanup;
        }
    }

    pWindowPending = _pDwnDoc->GetMarkup()->GetWindowPending();

    if (!pWindowPending)
        goto Cleanup;
    
    Assert(pWindowPending->_pWindow);

    _pDwnDoc->GetMarkup()->DoAutoSearch(hrReason, pWindowPending->_pWindow, _u.pbinding);
    
Cleanup:
    if (   _pDwnDoc 
        && _pDwnDoc->GetCDoc()
        && _pDwnDoc->GetMarkup()
        && !_pDwnDoc->GetCDoc()->_fStartup
        && (!hrReason || (E_ABORT == hrReason)))
    {
        _pDwnDoc->GetMarkup()->ResetSearchInfo();
    }
}

//
// When an http error occurs the server generally returns a page.  The
// threshold value this function returns is used to determine if the
// server page is displayed (if the size of the returned page is greater than
// the threshold) or if an internal error page is shown (if the returned page
// is smaller than the threshold).
//

DWORD _GetErrorThreshold(DWORD dwError)
{
    DWORD dwRet;

    TCHAR szValue[11]; // Should be large enough to hold max dword 4294967295
    DWORD cbValue = sizeof(szValue)/sizeof(szValue[0]) ;
    DWORD cbdwRet = sizeof(dwRet);
    DWORD dwType  = REG_DWORD;

    wnsprintf(szValue, cbValue, TEXT("%d"), dwError);

    if (ERROR_SUCCESS != SHRegGetUSValue(REGSTR_PATH_THRESHOLDS, szValue,
                                         &dwType, (LPVOID)&dwRet, &cbdwRet,
                                         FALSE, NULL, 0))
    {
        dwRet = 512; // hard coded default size if all else fails.
    }

    return dwRet;
}

//
// NB - the table of errors that are handled is in shdocvw
// this needs to be kept in sync
//

BOOL
IsErrorHandled(DWORD dwError)
{
    switch(dwError)
    {
        case 404:
        case 400:
        case 403:
        case 405:
        case 406:
        case 408:
        case 409:
        case 410:
        case 500:
        case 501:
        case 505:
        case ERRORPAGE_DNS:
        case ERRORPAGE_SYNTAX:
        case ERRORPAGE_NAVCANCEL:
        case ERRORPAGE_OFFCANCEL:
        case ERRORPAGE_CHANNELNOTINCACHE:
            return TRUE;

        default: 
            return FALSE;
    }
}    
//+---------------------------------------------------------------
//
//  Member:     CDwnBindData::GetStatusCode
//
//  Synopsis:   Retrieves the HTTP status code from WinInet.
//
//----------------------------------------------------------------

DWORD
CDwnBindData::GetErrorStatusCode() const
{
    HRESULT  hr;
    DWORD    dwStatusCode = 0L;
    ULONG    cch = sizeof(DWORD);
    IWinInetHttpInfo * pWinInetHttpInfo = NULL;

    hr = _u.pbinding->QueryInterface(IID_IWinInetHttpInfo,
                                     (void**)&pWinInetHttpInfo);
    if (hr)
        goto Cleanup;

    IGNORE_HR(pWinInetHttpInfo->QueryInfo(HTTP_QUERY_STATUS_CODE | HTTP_QUERY_FLAG_NUMBER,
                                          &dwStatusCode, &cch, NULL, 0));
    if (!dwStatusCode)
    {
        goto Cleanup;
    }

    if (HTTP_STATUS_NO_CONTENT == dwStatusCode)
        goto Cleanup;

    if (  dwStatusCode < HTTP_STATUS_BAD_REQUEST )
        dwStatusCode = 0L;

    if ( dwStatusCode > HTTP_STATUS_LAST)
        dwStatusCode = 0L;
    
Cleanup:
    ReleaseInterface(pWinInetHttpInfo);

    return dwStatusCode;
}
    
BOOL
UrlIsFtpDirectory(const TCHAR * pchUrl)
{
    if (UrlIs(pchUrl, URLIS_DIRECTORY))
        return TRUE;

    // (#109598) Check if there is a file extension. If none found, treat as a directory. Sure, this
    // is a hack, but it emulates the behavior in FtpItemID_CreateFake() in shell\ext\ftp\ftppidl.cpp

    CStr    cstrPath;
    TCHAR * pchLastItem;

    if (S_OK != GetUrlComponentHelper(pchUrl, &cstrPath, ICU_DECODE | URL_ESCAPE_SPACES_ONLY | URL_BROWSER_MODE, URLCOMP_PATHNAME))
        return FALSE;

    pchLastItem = StrRChr(cstrPath, NULL, _T('/'));
    if (!pchLastItem)
    {
        pchLastItem = cstrPath;
    }
    else
    {
        pchLastItem++;
        if (!*pchLastItem)
            return TRUE;
    }

    // Get the traling part of the path in the Url.
    return !*PathFindExtension(pchLastItem);
}

// *** IE Media Bar Hook *** 
// This stores the media mime-type as a string on the bind ctx.
// This is a hook for the IE Media Bar, so that when navigation
// is delegated to shdocvw, the media bar can catch media urls.
// This approach is needed because (as per VenkatK) the mime-type 
// cannot be curently obtained from the bind ctx after delegating 
// to shdocvw.
void 
CDwnBindData::SetMediaMimeOnBindCtx(LPCWSTR pstrMimeType, IBindCtx * pbc)
{
    // do it only for audio or video
    if (    pbc
        &&  pstrMimeType
        &&  (   !StrCmpNIW(pstrMimeType, _T("audio"), 5)
             || !StrCmpNIW(pstrMimeType, _T("video"), 5)))
    {
        CStr cstrMime;
        
        HRESULT hr = cstrMime.Set(pstrMimeType);
        if (FAILED(hr))
            goto done;
        
        hr = AddBindContextParam(pbc, &cstrMime, NULL, _T("MediaBarMime"));
        if (FAILED(hr))
            goto done;
    }

done:
    return;
}



STDMETHODIMP
CDwnBindData::OnDataAvailable(DWORD grfBSCF, DWORD dwSize,
    FORMATETC * pformatetc, STGMEDIUM * pstgmed)
{    

    PerfDbgLog(tagPerfWatch, this, "+CDwnBindData::OnDataAvailable");
    PerfDbgLog5(tagDwnBindData, this, "+CDwnBindData::OnDataAvailable %c%c%c%c %ld",
        (grfBSCF & BSCF_FIRSTDATANOTIFICATION) ? 'F' : ' ',
        (grfBSCF & BSCF_INTERMEDIATEDATANOTIFICATION) ? 'I' : ' ',
        (grfBSCF & BSCF_LASTDATANOTIFICATION) ? 'L' : ' ',
        (grfBSCF & BSCF_DATAFULLYAVAILABLE) ? 'A' : ' ',
        dwSize);

    CMarkup * pMarkup = _pDwnDoc? _pDwnDoc->GetMarkup(): NULL;

    Assert(_fBindOnApt && CheckThread());
    
    BindingNotIntercepted();

    HRESULT hr = S_OK;
    
    if (pstgmed->tymed == TYMED_ISTREAM)
    {
        ReplaceInterface(&_u.pstm, pstgmed->pstm);
        ReplaceInterface(&_u.punkForRel, pstgmed->pUnkForRelease);
    }

    if (grfBSCF & (BSCF_DATAFULLYAVAILABLE|BSCF_LASTDATANOTIFICATION))
    {
        _fFullyAvail = TRUE;

        // Clients assume that they can find out how many bytes are fully
        // available in the callback to SignalHeaders.  Fill it in here if
        // we haven't already.

        if (_DwnProg.dwMax == 0)
            _DwnProg.dwMax = dwSize;
    }

    if (!_fSigHeaders)
    {
        _fSigHeaders = TRUE;
        SignalHeaders(_u.pbinding);
    }

    if (!_fSigMime)
    {
        _fSigMime = TRUE;

        if (_pmi == NULL)
            _pmi = GetMimeInfoFromClipFormat(pformatetc->cfFormat);

        BOOL fIsActiveDesktopComponent = FALSE;
        if (pMarkup && pMarkup->IsActiveDesktopComponent())
        {
            fIsActiveDesktopComponent = TRUE;
        }

        // Don't delegate if this is the primary markup and we have no tob web OC to delegate to.
        BOOL fPrimaryMarkupAndNoWebOC = pMarkup?( pMarkup->HasPrimaryWindow() && !_pDwnDoc->GetCDoc()->_pTopWebOC ):TRUE;

        // TODO: (jbeda) All of this stuff should be on the other side of the signal -- that is what
        // it is there for!
        if ( _fIsDocBind && !_fBindAbort && !fPrimaryMarkupAndNoWebOC &&    
             (    _pmi == NULL
               || !StrCmpIC(_pmi->pch, CFSTR_MIME_AVI)
               || !StrCmpIC(_pmi->pch, CFSTR_MIME_X_MSVIDEO)
               || !StrCmpIC(_pmi->pch, CFSTR_MIME_MPEG)
               || !StrCmpIC(_pmi->pch, CFSTR_MIME_QUICKTIME)
               || (!StrCmpIC(_pmi->pch, CFSTR_MIME_HTA) && 
                        !(_pDwnDoc->GetCDoc()->_dwCompat & URLCOMPAT_ALLOWBIND))
               || (! IsHtcDownload()  &&
                    _pmi == g_pmiTextComponent  ) )  // cancel for non HTC-download ( ie. click on hyperlink to HTC)
                
                   
               || (_uScheme == URL_SCHEME_FTP && 
                   _pDwnDoc && 
                   _pDwnDoc->GetDocReferer()  &&

                   //
                   // cancel if we're going to show a directory
                   //
                   UrlIsFtpDirectory(CMarkup::GetUrl(pMarkup)))
               || fIsActiveDesktopComponent
               || _fDelegateDownload )
        {
            if (_pmi != NULL || (pMarkup && !pMarkup->_fPrecreated))
            {
                hr = INET_E_TERMINATED_BIND;

                // This stores the media mime-type as a string on the bind ctx.
                // This is a hook for the IE Media Bar, so that when navigation
                // is delegated to shdocvw, the media bar can catch media urls.
                // This approach is needed because (as per VenkatK) the mime-type 
                // cannot be curently obtained from the bind ctx after delegating 
                // to shdocvw.
                if (_pmi)
                {
                    SetMediaMimeOnBindCtx(_pmi->pch, _u.pbc);
                }

                // Set the bind ctx on the pending window so that we
                // can send it to shdocvw when delegating the navigation.
                //
                if (pMarkup && pMarkup->HasWindowPending())
                {
                    pMarkup->GetWindowPending()->Window()->SetBindCtx(_u.pbc);
                }

                if (pMarkup)
                {
                    pMarkup->_fIsActiveDesktopComponent = fIsActiveDesktopComponent;
                }

                goto Cleanup;
            }
        }

        Signal(DBF_MIME);
    }

    SetPending(FALSE);
    SignalData();

Cleanup:
    PerfDbgLog(tagDwnBindData, this, "-CDwnBindData::OnDataAvailable");
    PerfDbgLog(tagPerfWatch, this, "-CDwnBindData::OnDataAvailable");
    RRETURN(hr);
}

// CDwnBindData (IHttpNegotiate) ----------------------------------------------

STDMETHODIMP
CDwnBindData::OnResponse(DWORD dwResponseCode, LPCWSTR szResponseHeaders,
    LPCWSTR szRequestHeaders, LPWSTR * ppszAdditionalRequestHeaders)
{
    PerfDbgLog(tagDwnBindData, this, "+CDwnBindData::OnResponse");
    Assert(CheckThread());

    PerfDbgLog(tagDwnBindData, this, "-CDwnBindData::OnResponse (hr=0)");
    return(S_OK);
}

// CDwnBindData (IInternetBindInfo) -------------------------------------------

STDMETHODIMP
CDwnBindData::GetBindInfo(DWORD * pdwBindf, BINDINFO * pbindinfo)
{
    PerfDbgLog(tagDwnBindData, this, "+CDwnBindData::GetBindInfo");
    Assert(CheckThread());

    HRESULT hr;

    hr = THR(super::GetBindInfo(pdwBindf, pbindinfo));

    if (hr == S_OK)
    {
        if (!_fBindOnApt)
            *pdwBindf |= BINDF_DIRECT_READ;

        if (_dwFlags & DWNF_ENFORCERESTRICTED)
            *pdwBindf |= BINDF_ENFORCERESTRICTED;

        if (_dwFlags & DWNF_IGNORESECURITY)
            *pdwBindf |= BINDF_IGNORESECURITYPROBLEM;
    }

    PerfDbgLog1(tagDwnBindData, this, "-CDwnBindData::GetBindInfo (hr=%lX)", hr);
    RRETURN(hr);
}

// CDwnBindData (IInternetProtocolSink) ---------------------------------------

STDMETHODIMP
CDwnBindData::Switch(PROTOCOLDATA * ppd)
{
    PerfDbgLog(tagDwnBindData, this, "+CDwnBindData::Switch");

    HRESULT hr;

    if (!_pDwnDoc || _pDwnDoc->IsDocThread())
    {
        hr = THR(_o.pInetProt->Continue(ppd));
    }
    else
    {
        hr = THR(_pDwnDoc->AddDocThreadCallback(this, ppd));
    }

    PerfDbgLog1(tagDwnBindData, this, "-CDwnBindData::Switch (hr=%lX)", hr);
    RRETURN(hr);
}

STDMETHODIMP
CDwnBindData::ReportProgress(ULONG ulCode, LPCWSTR pszText)
{
    PerfDbgLog2(tagDwnBindData, this, "+CDwnBindData::ReportProgress %s \"%ls\"",
        g_rgpchBindStatus[ulCode], pszText ? pszText : g_Zero.ach);

    SubAddRef();

    CDoc * pDoc = _pDwnDoc ? _pDwnDoc->GetCDoc() : NULL;

    switch (ulCode)
    {        
        case BINDSTATUS_COOKIE_SENT:            
            if(pszText && *pszText && pDoc)
            {
                TraceTag((tagDwnBindPrivacy, "CDwnBindData::ReportProgress - Received BINDSTATUS_COOKIE_SENT for url %ls", pszText));
                THR(pDoc->AddToPrivacyList(pszText, NULL, COOKIEACTION_READ)); 
            }
            else
            {
                TraceTag((tagDwnBindPrivacy, "CDwnBindData::ReportProgress - Received BINDSTATUS_COOKIE_SENT for url %ls", _cstrSiteUrl));
                _dwPrivacyFlags |= COOKIEACTION_READ;
            }
            break;

        case BINDSTATUS_COOKIE_SUPPRESSED:            
            if(pszText && *pszText && pDoc)
            {
                TraceTag((tagDwnBindPrivacy, "CDwnBindData::ReportProgress - Received BINDSTATUS_COOKIE_SUPPRESSED for url %ls", pszText));
                THR(pDoc->AddToPrivacyList(pszText, NULL, COOKIEACTION_SUPPRESS)); 
            }
            else
            {
                TraceTag((tagDwnBindPrivacy, "CDwnBindData::ReportProgress - Received BINDSTATUS_COOKIE_SUPPRESSED for url %ls", _cstrSiteUrl));
                _dwPrivacyFlags |= COOKIEACTION_SUPPRESS;
            }
            break;

        case BINDSTATUS_COOKIE_STATE_UNKNOWN:
            TraceTag((tagDwnBindPrivacy, "Trident should never BINDSTATUS_COOKIE_STATE_UNKNOWN from Wininet/Urlmon for url %ls", _cstrSiteUrl));
            break;
        case BINDSTATUS_COOKIE_STATE_ACCEPT:            
            if(pszText && *pszText && pDoc)
            {
                TraceTag((tagDwnBindPrivacy, "CDwnBindData::ReportProgress - Received BINDSTATUS_COOKIE_STATE_ACCEPT for url %ls", pszText));
                THR(pDoc->AddToPrivacyList(pszText, NULL, COOKIEACTION_ACCEPT)); 
            }
            else
            {
                TraceTag((tagDwnBindPrivacy, "CDwnBindData::ReportProgress - Received BINDSTATUS_COOKIE_STATE_ACCEPT for url %ls", _cstrSiteUrl));
                _dwPrivacyFlags |= COOKIEACTION_ACCEPT;
            }
            break;
        case BINDSTATUS_COOKIE_STATE_REJECT:            
            if(pszText && *pszText && pDoc)
            {
                TraceTag((tagDwnBindPrivacy, "CDwnBindData::ReportProgress - Received BINDSTATUS_COOKIE_STATE_REJECT for url %ls", pszText));
                THR(pDoc->AddToPrivacyList(pszText, NULL, COOKIEACTION_REJECT)); 
            }
            else
            {
                TraceTag((tagDwnBindPrivacy, "CDwnBindData::ReportProgress - Received BINDSTATUS_COOKIE_STATE_REJECT for url %ls", _cstrSiteUrl));
                _dwPrivacyFlags |= COOKIEACTION_REJECT;
            }
            break;
        case BINDSTATUS_COOKIE_STATE_LEASH:            
            if(pszText && *pszText && pDoc)
            {
                TraceTag((tagDwnBindPrivacy, "CDwnBindData::OnProgress - Received BINDSTATUS_COOKIE_STATE_LEASH for url %ls", pszText));
                THR(pDoc->AddToPrivacyList(pszText, NULL, COOKIEACTION_LEASH)); 
            }
            else
            {
                TraceTag((tagDwnBindPrivacy, "CDwnBindData::OnProgress - Received BINDSTATUS_COOKIE_STATE_LEASH for url %ls", _cstrSiteUrl));
                _dwPrivacyFlags |= COOKIEACTION_LEASH;
            }
            break;
        case BINDSTATUS_COOKIE_STATE_DOWNGRADE:            
            if(pszText && *pszText && pDoc)
            {
                TraceTag((tagDwnBindPrivacy, "CDwnBindData::OnProgress - Received BINDSTATUS_COOKIE_STATE_DOWNGRADE for url %ls", pszText));
                THR(pDoc->AddToPrivacyList(pszText, NULL, COOKIEACTION_DOWNGRADE)); 
            }
            else
            {
                TraceTag((tagDwnBindPrivacy, "CDwnBindData::OnProgress - Received BINDSTATUS_COOKIE_STATE_DOWNGRADE for url %ls", _cstrSiteUrl));
                _dwPrivacyFlags |= COOKIEACTION_DOWNGRADE;
            }
            break;
            
        case BINDSTATUS_COMPACT_POLICY_RECEIVED:
            _dwPrivacyFlags |= PRIVACY_URLHASCOMPACTPOLICY;
            break;
        
        case BINDSTATUS_POLICY_HREF:
            TraceTag((tagDwnBindPrivacy, "CDwnBindData::ReportProgress - Received BINDSTATUS_POLICY_HREF for url %ls", _cstrSiteUrl));
            Assert(pszText && *pszText);
            _cstrPolicyRef.Set(pszText);
            _dwPrivacyFlags |= PRIVACY_URLHASPOLICYREFHEADER;
            break;
        case BINDSTATUS_P3P_HEADER:
            TraceTag((tagDwnBindPrivacy, "CDwnBindData::ReportProgress - Received BINDSTATUS_P3P_HEADER for url %ls", _cstrSiteUrl));
            Assert(pszText && *pszText);
            {
                // We are getting two notifications from urlmon, once that is fixed, need to uncomment this assert
                //Assert(!_pchP3PHeader);
                delete [] _pchP3PHeader;

                unsigned len = _tcslen(pszText);
                _pchP3PHeader = new(Mt(CDwnBindData_pchP3PHeader)) TCHAR[len + 1];
                if (_pchP3PHeader)
                {
                    _tcscpy(_pchP3PHeader, pszText);
                    _pchP3PHeader[len] = _T('\0');
                }
                _dwPrivacyFlags |= PRIVACY_URLHASP3PHEADER;
            }
            break;

        case BINDSTATUS_REDIRECTING:
            SignalRedirect(pszText, _o.pInetProt);
            break;

        case BINDSTATUS_CACHEFILENAMEAVAILABLE:
            SignalFile(pszText);
            break;

        case BINDSTATUS_RAWMIMETYPE:
            _pRawMimeInfo = GetMimeInfoFromMimeType(pszText);
            _fReceivedMimeNotification = TRUE;
            break;

        case BINDSTATUS_MIMETYPEAVAILABLE:
            _pmi = GetMimeInfoFromMimeType(pszText);
            _fReceivedMimeNotification = TRUE;
            if (StrCmpIC(pszText,_T("text/xml")) == 0)
                _pDwnDoc->SetDocIsXML(TRUE);
            break;

        case BINDSTATUS_LOADINGMIMEHANDLER:
            _fMimeFilter = TRUE;
            break;

        case BINDSTATUS_FINDINGRESOURCE:
        case BINDSTATUS_CONNECTING:
            SignalProgress(0, 0, ulCode);
            break;
    }

    SubRelease();
   
    PerfDbgLog(tagDwnBindData, this, "-CDwnBindData::ReportProgress (hr=0)");
    return(S_OK);
}

STDMETHODIMP
CDwnBindData::ReportData(DWORD grfBSCF, ULONG ulPos, ULONG ulMax)
{
    PerfDbgLog6(tagDwnBindData, this, "+CDwnBindData::ReportData %c%c%c%c ulPos=%ld ulMax=%ld", 
        (grfBSCF & BSCF_FIRSTDATANOTIFICATION) ? 'F' : ' ',
        (grfBSCF & BSCF_INTERMEDIATEDATANOTIFICATION) ? 'I' : ' ',
        (grfBSCF & BSCF_LASTDATANOTIFICATION) ? 'L' : ' ',
        (grfBSCF & BSCF_DATAFULLYAVAILABLE) ? 'A' : ' ',
        ulPos, ulMax);

    SubAddRef();

    if (grfBSCF & (BSCF_DATAFULLYAVAILABLE|BSCF_LASTDATANOTIFICATION))
    {
        _fFullyAvail = TRUE;

        // Clients assume that they can find out how many bytes are fully
        // available in the callback to SignalHeaders.  Fill it in here if
        // we haven't already.

        if (_DwnProg.dwMax == 0)
            _DwnProg.dwMax = ulMax;
    }

    if (!_fSigHeaders)
    {
        _fSigHeaders = TRUE;
        SignalHeaders(_o.pInetProt);
    }

    if (!_fSigData)
    {
        _fSigData = TRUE;

        Assert(_pDwnStm == NULL);

        // If the data is coming from the network, then read it immediately
        // into a buffers in order to release the socket connection as soon
        // as possible.

        if (    !_fFullyAvail
            &&  (_uScheme == URL_SCHEME_HTTP || _uScheme == URL_SCHEME_HTTPS)
            &&  !(_dwFlags & (DWNF_DOWNLOADONLY|DWNF_NOAUTOBUFFER)))
        {
            // No problem if this fails.  We just end up not buffering.

            _pDwnStm = new CDwnStm;
        }
    }

    if (!_fSigMime)
    {
        _fSigMime = TRUE;
        Signal(DBF_MIME);
    }

    SignalProgress(ulPos, ulMax, BINDSTATUS_DOWNLOADINGDATA);

    SetPending(FALSE);
    SignalData();

    SubRelease();

    PerfDbgLog(tagDwnBindData, this, "-CDwnBindData::ReportData (hr=0)");
    return(S_OK);
}

STDMETHODIMP
CDwnBindData::ReportResult(HRESULT hrResult, DWORD dwError, LPCWSTR szResult)
{
    PerfDbgLog3(tagDwnBindData, this, "+CDwnBindData::ReportResult (hrErr=%lX,"
        "dwErr=%ld,szRes=%ls)", hrResult, dwError,
        szResult ? szResult : g_Zero.ach);

    SubAddRef();

    _fBindDone = TRUE;

    if (hrResult || _fBindAbort)
    {
        // Mimics urlmon's GetBindResult
        if (dwError)
            hrResult = HRESULT_FROM_WIN32(dwError);

        SignalDone(hrResult);
    }
    else
    {
        SetPending(FALSE);
        SignalData();
    }

    SubRelease();

    PerfDbgLog(tagDwnBindData, this, "-CDwnBindData::ReportResult (hr=0)");
    return(S_OK);
}

// Public Functions -----------------------------------------------------------

HRESULT
NewDwnBindData(DWNLOADINFO * pdli, CDwnBindData ** ppDwnBindData,
    DWORD dwFlagsExtra)
{
    HRESULT hr = S_OK;

    if (pdli->pDwnBindData)
    {
        *ppDwnBindData = pdli->pDwnBindData;
        pdli->pDwnBindData->SetDwnDoc(pdli->pDwnDoc);
        pdli->pDwnBindData->SetStartedInPending(pdli->fPendingRoot);
        pdli->pDwnBindData->AddRef();
        return(S_OK);
    }

    PerfDbgLog(tagDwnBindData, NULL, "+NewDwnBindData");

    CDwnBindData * pDwnBindData = new CDwnBindData;

    if (pDwnBindData == NULL)
    {
        hr = E_OUTOFMEMORY;
        goto Cleanup;
    }

    pDwnBindData->SetDwnDoc(pdli->pDwnDoc);
    pDwnBindData->SetDwnPost(pdli->pDwnPost);
    pDwnBindData->SetHtcDownload( ( dwFlagsExtra & DWNF_HTCDOWNLOAD ) != 0 );
    pDwnBindData->SetStartedInPending(pdli->fPendingRoot);
    
    if (pdli->fOffline)
        pDwnBindData->SetIsOfflineBind();

    pDwnBindData->Bind(pdli, dwFlagsExtra);

    *ppDwnBindData = pDwnBindData;
    pDwnBindData = NULL;

Cleanup:
    if (pDwnBindData)
        pDwnBindData->Release();
    PerfDbgLog1(tagDwnBindData, NULL, "-NewDwnBindData (hr=%lX)", hr);
    RRETURN(hr);
}

// TlsGetInternetSession ------------------------------------------------------

IInternetSession *
TlsGetInternetSession()
{
    IInternetSession * pInetSess = TLS(pInetSess);

    if (pInetSess == NULL)
    {
        IGNORE_HR(CoInternetGetSession(0, &pInetSess, 0));
        TLS(pInetSess) = pInetSess;

        if (pInetSess)
        {
            pInetSess->RegisterNameSpace((IClassFactory *) &g_cfResProtocol, CLSID_ResProtocol, _T("res"), 0, NULL, 0);
            pInetSess->RegisterNameSpace((IClassFactory *) &g_cfAboutProtocol, CLSID_AboutProtocol, _T("about"), 0, NULL, 0);
            pInetSess->RegisterNameSpace((IClassFactory *) &g_cfViewSourceProtocol, CLSID_ViewSourceProtocol, _T("view-source"), 0, NULL, 0);
        }
    }

    return(pInetSess);
}


//-------------------------------------------------------------
//
// marka - some vintage code from shdocvw
// to tickle dialmon periodically
//
//-------------------------------------------------------------

#define AUTODIAL_MONITOR_CLASS_NAME     TEXT("MS_AutodialMonitor")
#define WEBCHECK_MONITOR_CLASS_NAME     TEXT("MS_WebcheckMonitor")
#define WM_DIALMON_FIRST        WM_USER+100

// message sent to dial monitor app window indicating that there has been
// winsock activity and dial monitor should reset its idle timer
#define WM_WINSOCK_ACTIVITY             WM_DIALMON_FIRST + 0


static const TCHAR szAutodialMonitorClass[] = AUTODIAL_MONITOR_CLASS_NAME;
static const TCHAR szWebcheckMonitorClass[] = WEBCHECK_MONITOR_CLASS_NAME;

#define MIN_ACTIVITY_MSG_INTERVAL       15000

VOID IndicateWinsockActivity(VOID)
{
    // if there is an autodisconnect monitor, send it an activity message
    // so that we don't get disconnected during long downloads.  For perf's sake,
    // don't send a message any more often than once every MIN_ACTIVITY_MSG_INTERVAL
    // milliseconds (15 seconds).  Use GetTickCount to determine interval;
    // GetTickCount is very cheap.
    DWORD dwTickCount = GetTickCount();
    // Sharing this among multiple threads is OK
    static DWORD dwLastActivityMsgTickCount = 0;
    DWORD dwElapsed = dwTickCount - dwLastActivityMsgTickCount;

    // have we sent an activity message recently?
    if (dwElapsed > MIN_ACTIVITY_MSG_INTERVAL) 
    {
        HWND hwndMonitorApp = FindWindow(szAutodialMonitorClass,NULL);
        if (hwndMonitorApp) 
        {
            PostMessage(hwndMonitorApp,WM_WINSOCK_ACTIVITY,0,0);
        }
        hwndMonitorApp = FindWindow(szWebcheckMonitorClass,NULL);
        if (hwndMonitorApp) 
        {
            PostMessage(hwndMonitorApp,WM_WINSOCK_ACTIVITY,0,0);
        }

        // record the tick count of the last time we sent an
        // activity message
        dwLastActivityMsgTickCount = dwTickCount;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\download\dwntask.cxx ===
//+------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1992 - 1996.
//
//  File:       dwntask.cxx
//
//  Contents:   CDwnTask
//				CDwnTaskExec
//
//-------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_DWN_HXX_
#define X_DWN_HXX_
#include "dwn.hxx"
#endif

#ifndef X_SWITCHES_HXX_
#define X_SWITCHES_HXX_
#include "switches.hxx"
#endif

// Debugging ------------------------------------------------------------------

PerfDbgTag(tagDwnTask,            "Dwn", "Trace CDwnTask")
PerfDbgTag(tagDwnTaskExec,        "Dwn", "Trace CDwnTaskExec")
PerfDbgTag(tagDwnTaskExecVerbose, "Dwn", "Trace CDwnTaskExec (Verbose)")
PerfDbgTag(tagDwnTaskExec10Sec,   "Dwn", "! Timeout download threads in 10 sec")

MtDefine(CDwnTaskExec, Dwn, "CDwnTaskExec")

// Globals --------------------------------------------------------------------

CDwnTaskExec *   g_pDwnTaskExec = NULL;

// CDwnTask -------------------------------------------------------------------

void
CDwnTask::Passivate()
{
    PerfDbgLog(tagDwnTask, this, "+CDwnTask::Passivate");

    Terminate();
    super::Passivate();

    PerfDbgLog(tagDwnTask, this, "-CDwnTask::Passivate");
}

// CDwnTaskExec ---------------------------------------------------------------

CDwnTaskExec::CDwnTaskExec(CRITICAL_SECTION * pcs)
    : super(pcs)
{
    // This object will be destroyed on DllProcessDetach, so its existence
    // should not prevent the DLL from being unloaded.  This next call
    // undoes what CBaseFT::CBaseFT did.

    DecrementSecondaryObjectCount(10);
}

CDwnTaskExec::~CDwnTaskExec()
{
    // This next call temporarily puts back a secondary reference that
    // CBaseFT::~CBaseFT will decrement.

    IncrementSecondaryObjectCount(10);
}

void
CDwnTaskExec::AddTask(CDwnTask * pDwnTask)
{
    PerfDbgLog1(tagDwnTaskExec, this, "+CDwnTaskExec::AddTask %lX", pDwnTask);

    BOOL fSignal = FALSE;

    EnterCriticalSection();

    #if DBG==1
    Invariant();
    #endif

    Assert(!pDwnTask->_fEnqueued);
    Assert(!pDwnTask->_pDwnTaskExec);

    pDwnTask->_pDwnTaskExec = this;
    pDwnTask->_pDwnTaskNext = NULL;
    pDwnTask->_pDwnTaskPrev = _pDwnTaskTail;
    pDwnTask->_fEnqueued    = TRUE;
    pDwnTask->SubAddRef();

    if (_pDwnTaskTail)
        _pDwnTaskTail = _pDwnTaskTail->_pDwnTaskNext = pDwnTask;
    else
        _pDwnTaskHead = _pDwnTaskTail = pDwnTask;

    if (pDwnTask->_fActive)
    {
        fSignal = (_cDwnTaskActive == 0);
        _cDwnTaskActive += 1;
    }

    _cDwnTask += 1;

    #if DBG==1
    Invariant();
    #endif

    LeaveCriticalSection();

    if (fSignal)
    {
        Verify(SetEvent(_hevWait));
    }

    PerfDbgLog(tagDwnTaskExec, this, "+CDwnTaskExec::AddTask");
}

void
CDwnTaskExec::SetTask(CDwnTask * pDwnTask, BOOL fActive)
{
    PerfDbgLog2(tagDwnTaskExec, this, "+CDwnTaskExec::SetTask %lX %s", pDwnTask, fActive ? "Active" : "Blocked");

    BOOL fSignal = FALSE;

    EnterCriticalSection();

    #if DBG==1
    Invariant();
    #endif

    if (pDwnTask->_fEnqueued)
    {
        if (pDwnTask == _pDwnTaskRun)
        {
            // Making a running task active always wins ... the task will
            // run from the top at least one more time.

            if (_ta != TA_DELETE)
            {
                if (fActive)
                    _ta = TA_ACTIVATE;
                else if (_ta != TA_ACTIVATE)
                    _ta = TA_BLOCK;
            }
        }
        else if (!!fActive != !!pDwnTask->_fActive)
        {
            pDwnTask->_fActive = fActive;

            if (fActive)
            {
                fSignal = (_cDwnTaskActive == 0);
                _cDwnTaskActive += 1;
            }
            else
            {
                _cDwnTaskActive -= 1;
            }
        }
    }

    #if DBG==1
    Invariant();
    #endif

    LeaveCriticalSection();

    if (fSignal && GetThreadId() != GetCurrentThreadId())
    {
        Verify(SetEvent(_hevWait));
    }

    PerfDbgLog(tagDwnTaskExec, this, "-CDwnTaskExec::SetTask");
}

void
CDwnTaskExec::DelTask(CDwnTask * pDwnTask)
{
    PerfDbgLog1(tagDwnTaskExec, this, "+CDwnTaskExec::DelTask %lX", pDwnTask);

    BOOL fRelease = FALSE;

    EnterCriticalSection();

    #if DBG==1
    Invariant();
    #endif

    if (pDwnTask->_fEnqueued)
    {
        if (pDwnTask == _pDwnTaskRun)
        {
            _ta = TA_DELETE;
        }
        else
        {
            if (pDwnTask->_pDwnTaskPrev)
                pDwnTask->_pDwnTaskPrev->_pDwnTaskNext = pDwnTask->_pDwnTaskNext;
            else
                _pDwnTaskHead = pDwnTask->_pDwnTaskNext;

            if (pDwnTask->_pDwnTaskNext)
                pDwnTask->_pDwnTaskNext->_pDwnTaskPrev = pDwnTask->_pDwnTaskPrev;
            else
                _pDwnTaskTail = pDwnTask->_pDwnTaskPrev;

            if (pDwnTask->_fActive)
            {
                _cDwnTaskActive -= 1;
            }

            _cDwnTask -= 1;

            if (_pDwnTaskCur == pDwnTask)
                _pDwnTaskCur = pDwnTask->_pDwnTaskNext;

            pDwnTask->_fEnqueued = FALSE;
            fRelease = TRUE;
        }
    }

    #if DBG==1
    Invariant();
    #endif

    LeaveCriticalSection();

    if (fRelease)
        pDwnTask->SubRelease();

    PerfDbgLog(tagDwnTaskExec, this, "-CDwnTaskExec::DelTask");
}

BOOL
CDwnTaskExec::IsTaskTimeout()
{
    return(_fShutdown || (GetTickCount() - _dwTickRun > _dwTickSlice));
}

HRESULT
CDwnTaskExec::Launch()
{
    PerfDbgLog(tagDwnTaskExec, this, "+CDwnTaskExec::Launch");

    HRESULT hr;

    _hevWait = CreateEventA(NULL, FALSE, FALSE, NULL);

    if (_hevWait == NULL)
    {
        hr = GetLastWin32Error();
        goto Cleanup;
    }

    hr = THR(super::Launch(FALSE));
    if (hr)
        goto Cleanup;

Cleanup:
    PerfDbgLog1(tagDwnTaskExec, this, "-CDwnTaskExec::Launch (hr=%lX)", hr);
    RRETURN(hr);
}

void
CDwnTaskExec::Passivate()
{
    PerfDbgLog(tagDwnTaskExec, this, "+CDwnTaskExec::Passivate");

    if (_hevWait)
    {
        CloseEvent(_hevWait);
    }

    PerfDbgLog(tagDwnTaskExec, this, "-CDwnTaskExec::Passivate");
}

HRESULT
CDwnTaskExec::ThreadInit()
{
    PerfDbgLog(tagDwnTaskExec, this, "+CDwnTaskExec::ThreadInit");

    // Name this thread for IceCAP
    NameThread("DwnTask");

    _dwTickTimeout  = 10 * 60 * 1000;   // Ten minutes
    _dwTickSlice    = 200;              // 0.2 seconds

    #if DBG==1 || defined(PERFTAGS)
    if (IsPerfDbgEnabled(tagDwnTaskExec10Sec))
        _dwTickTimeout = 10 * 1000;     // Ten seconds
    #endif

    PerfDbgLog(tagDwnTaskExec, this, "-CDwnTaskExec::ThreadInit (hr=0)");

    return(S_OK);
}

void
CDwnTaskExec::ThreadExec()
{
    PerfDbgLog(tagDwnTaskExecVerbose, this, "CDwnTaskExec::ThreadExec (Enter)");

    CDwnTask * pDwnTask;

    for (;;)
    {
        for (;;)
        {
            PerfDbgLog(tagDwnTaskExecVerbose, this,
                "CDwnTaskExec::ThreadExec (EnterCriticalSection)");

            EnterCriticalSection();

            #if DBG==1
            Invariant();
            #endif

            pDwnTask     = _pDwnTaskRun;
            _pDwnTaskRun = NULL;

            if (_ta == TA_DELETE)
                DelTask(pDwnTask);
            else if (_ta == TA_BLOCK)
                pDwnTask->SetBlocked(TRUE);

            _ta = TA_NONE;

            if (_cDwnTaskActive && !_fShutdown)
            {
                PerfDbgLog(tagDwnTaskExecVerbose, this,
                    "CDwnTaskExec::ThreadExec (find unblocked task)");

                while (!_pDwnTaskRun)
                {
                    if (_pDwnTaskCur == NULL)
                        _pDwnTaskCur = _pDwnTaskHead;

                    if (_pDwnTaskCur->_fActive)
                        _pDwnTaskRun = _pDwnTaskCur;

                    _pDwnTaskCur = _pDwnTaskCur->_pDwnTaskNext;
                }
            }

            #if DBG==1
            Invariant();
            #endif

            LeaveCriticalSection();

            PerfDbgLog(tagDwnTaskExecVerbose, this,
                "CDwnTaskExec::ThreadExec (LeaveCriticalSection)");

            if (!_pDwnTaskRun)
                break;

            PerfDbgLog(tagDwnTaskExecVerbose, this,
                "CDwnTaskExec::ThreadExec (run task)");

            _dwTickRun = GetTickCount();
            _pDwnTaskRun->Run();

            PerfDbgLog1(tagDwnTaskExecVerbose, this,
                "CDwnTaskExec::ThreadExec (task ran for %ld ticks)",
                GetTickCount() - _dwTickRun);
        }

        if (_fShutdown)
            break;

        PerfDbgLog(tagDwnTaskExecVerbose, this,
            "CDwnTaskExec::ThreadExec (WaitForSingleObject)");

        SuspendCAP();

        DWORD dwResult = WaitForSingleObject(_hevWait, _dwTickTimeout);

        ResumeCAP();

        PerfDbgLog1(tagDwnTaskExecVerbose, this,
            "CDwnTaskExec::ThreadExec (Wait over, dwResult=%ld)", dwResult);

        if (dwResult == WAIT_TIMEOUT)
        {
            PerfDbgLog(tagDwnTaskExecVerbose, this,
                "CDwnTaskExec::ThreadExec (WAIT_TIMEOUT)");

            EnterCriticalSection();

            if (_cDwnTask == 0)
            {
                ThreadTimeout();
            }

            LeaveCriticalSection();
        }
    }

    PerfDbgLog(tagDwnTaskExecVerbose, this, "CDwnTaskExec::ThreadExec (Leave)");
}

void
CDwnTaskExec::ThreadTimeout()
{
    PerfDbgLog(tagDwnTaskExec, this, "+CDwnTaskExec::ThreadTimeout");

    KillDwnTaskExec();

    PerfDbgLog(tagDwnTaskExec, this, "-CDwnTaskExec::ThreadTimeout");
}

void
CDwnTaskExec::ThreadTerm()
{
    while (_pDwnTaskHead)
    {
        PerfDbgLog1(tagDwnTaskExec, this, "+CDwnTaskExec::ThreadExec "
            "Terminate %lX", _pDwnTaskHead);

        _pDwnTaskHead->Terminate();

        PerfDbgLog(tagDwnTaskExec, this, "-CDwnTaskExec::ThreadExec Terminate");
    }
}

void
CDwnTaskExec::Shutdown()
{
    PerfDbgLog(tagDwnTaskExec, this, "+CDwnTaskExec::Shutdown");

    _fShutdown = TRUE;
    Verify(SetEvent(_hevWait));
    super::Shutdown();

    PerfDbgLog(tagDwnTaskExec, this, "-CDwnTaskExec::Shutdown");
}

#if DBG==1

void
CDwnTaskExec::Invariant()
{
    EnterCriticalSection();

    LONG        cDwnTask        = 0;
    LONG        cDwnTaskActive  = 0;
    CDwnTask *  pDwnTaskPrev    = NULL;
    CDwnTask *  pDwnTask        = _pDwnTaskHead;
    BOOL        fFoundCur       = _pDwnTaskCur == NULL;
    BOOL        fFoundRun       = _pDwnTaskRun == NULL;

    Assert(!_pDwnTaskHead == !_pDwnTaskTail);
    Assert(!_pDwnTaskHead || !_pDwnTaskHead->_pDwnTaskPrev);
    Assert(!_pDwnTaskTail || !_pDwnTaskTail->_pDwnTaskNext);

    for (; pDwnTask; pDwnTaskPrev = pDwnTask, pDwnTask = pDwnTask->_pDwnTaskNext)
    {
        cDwnTask += 1;

        if (pDwnTask->_fActive)
            cDwnTaskActive += 1;

        Assert(pDwnTask->_pDwnTaskPrev == pDwnTaskPrev);
        Assert(pDwnTask->_fEnqueued);

        if (pDwnTask == _pDwnTaskCur)
            fFoundCur = TRUE;

        if (pDwnTask == _pDwnTaskRun)
            fFoundRun = TRUE;
    }

    Assert(pDwnTaskPrev == _pDwnTaskTail);
    Assert(cDwnTask == _cDwnTask);
    Assert(cDwnTaskActive == _cDwnTaskActive);
    Assert(fFoundCur);
    Assert(fFoundRun);

    LeaveCriticalSection();
}

#endif

// External Functions ---------------------------------------------------------

HRESULT
StartDwnTask(CDwnTask * pDwnTask)
{
    PerfDbgLog1(tagDwnTaskExec, NULL, "+StartDwnTask %lX", pDwnTask);

    HRESULT hr = S_OK;

    g_csDwnTaskExec.Enter();

    if (g_pDwnTaskExec == NULL)
    {
        g_pDwnTaskExec = new CDwnTaskExec(g_csDwnTaskExec.GetPcs());

        if (g_pDwnTaskExec == NULL)
        {
            hr = E_OUTOFMEMORY;
            goto Cleanup;
        }

        hr = THR(g_pDwnTaskExec->Launch());

        if (hr)
        {
            g_pDwnTaskExec->Release();
            g_pDwnTaskExec = NULL;
            goto Cleanup;
        }
    }

    g_pDwnTaskExec->AddTask(pDwnTask);

Cleanup:
    g_csDwnTaskExec.Leave();
    PerfDbgLog(tagDwnTaskExec, NULL, "-StartDwnTask");
    RRETURN(hr);
}

void
KillDwnTaskExec()
{
    PerfDbgLog(tagDwnTaskExec, NULL, "+KillDwnTaskExec");

    g_csDwnTaskExec.Enter();

    CDwnTaskExec * pDwnTaskExec = g_pDwnTaskExec;
    g_pDwnTaskExec = NULL;

    g_csDwnTaskExec.Leave();

    if (pDwnTaskExec)
    {
        pDwnTaskExec->Shutdown();
        pDwnTaskExec->Release();
    }

    PerfDbgLog(tagDwnTaskExec, NULL, "-KillDwnTaskExec");
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\download\dwnutil.cxx ===
//+------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1992 - 1996.
//
//  File:       dwnutil.cxx
//
//  Contents:   CBaseFT
//              CExecFT
//              CDwnChan
//              CDwnStm
//              CDwnCtx
//              CDwnInfo
//              CDwnLoad
//              MIMEINFO
//
//-------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_DWN_HXX_
#define X_DWN_HXX_
#include "dwn.hxx"
#endif

#ifndef X_HTM_HXX_
#define X_HTM_HXX_
#include "htm.hxx"
#endif

#ifndef X_IMG_HXX_
#define X_IMG_HXX_
#include "img.hxx"
#endif

#ifndef X_BITS_HXX_
#define X_BITS_HXX_
#include "bits.hxx"
#endif

#ifndef X_POSTDATA_HXX_
#define X_POSTDATA_HXX_
#include "postdata.hxx"
#endif

#ifndef X_MSHTMLRC_H_
#define X_MSHTMLRC_H_
#include "mshtmlrc.h"
#endif

#ifndef X_DWNNOT_H_
#define X_DWNNOT_H_
#include <dwnnot.h>
#endif

#ifndef X_PRGSNK_H_
#define X_PRGSNK_H_
#include <prgsnk.h>
#endif

#ifndef X_MARKUPCTX_HXX_
#define X_MARKUPCTX_HXX_
#include "markupctx.hxx"
#endif

#ifndef X_HTC_HXX_
#define X_HTC_HXX_
#include "htc.hxx"
#endif

#ifndef X_SWITCHES_HXX_
#define X_SWITCHES_HXX_
#include "switches.hxx"
#endif

#ifdef _MAC
STDAPI_(unsigned long)  RegisterMimeFormat(LPCSTR szFormat);
#ifdef __cplusplus
extern "C" {
#endif
WINBASEAPI BOOL WINAPI AfxTerminateThread(HANDLE hThread, DWORD dwExitCode);
#ifdef __cplusplus
}
#endif
#endif // _MAC

// Debugging ------------------------------------------------------------------

PerfDbgTag(tagDwnChan,   "Dwn",  "Trace CDwnChan")
PerfDbgTag(tagDwnStm,    "Dwn",  "Trace CDwnStm")
PerfDbgTag(tagDwnStmStm, "Dwn",  "Trace CDwnStmStm")
PerfDbgTag(tagDwnCtx,    "Dwn",  "Trace CDwnCtx")
PerfDbgTag(tagDwnInfo,   "Dwn",  "Trace CDwnInfo")
PerfDbgTag(tagDwnLoad,   "Dwn",  "Trace CDwnLoad")

// Performance Meters ---------------------------------------------------------

MtDefine(Dwn, Mem, "Download")
MtDefine(GlobalDwn, Dwn, "Global Download CS")
MtDefine(CDwnStm, Dwn, "CDwnStm")
MtDefine(CDwnStm_pbuf, CDwnStm, "CDwnStm buffer")
MtDefine(CDwnStmStm, Dwn, "CDwnStmStm")
MtDefine(CDwnInfo, Dwn, "CDwnInfo")
MtDefine(CDwnInfoGetFile, CDwnInfo, "CDwnInfo::GetFile")
MtDefine(CDwnInfo_arySink_pv, Dwn, "CDwnInfo::_arySink::_pv")
MtDefine(GetHeadersAndPostData, Dwn, "GetHeadersAndPostData")

// Globals --------------------------------------------------------------------

DEFINE_GLOBAL_CRITICAL(g_csDwnBindPend, 0); // CDwnBindData (SetPending, SetEof)
DEFINE_GLOBAL_CRITICAL(g_csDwnChanSig,  0); // CDwnChan (Signal)
DEFINE_GLOBAL_CRITICAL(g_csDwnStm,      0); // CDwnStm
DEFINE_GLOBAL_CRITICAL(g_csDwnDoc,      0); // CDwnDoc
DEFINE_GLOBAL_CRITICAL(g_csDwnPost,     0); // CDwnPost (GetStgMedium)
DEFINE_GLOBAL_CRITICAL(g_csHtmSrc,      1); // CHtmInfo (OnSource, ReadSource)
DEFINE_GLOBAL_CRITICAL(g_csDwnBindSig,  1); // CDwnBind (Signal)
DEFINE_GLOBAL_CRITICAL(g_csDwnBindTerm, 1); // CDwnBind (Terminate)
DEFINE_GLOBAL_CRITICAL(g_csDwnCache,    1); // CDwnInfo active and cache lists
DEFINE_GLOBAL_CRITICAL(g_csDwnTaskExec, 1); // CDwnTaskExec
DEFINE_GLOBAL_CRITICAL(g_csImgTaskExec, 1); // CImgTaskExec
DEFINE_GLOBAL_CRITICAL(g_csImgTransBlt, 1); // CImgBitsDIB::StretchBlt

CGlobalDwnCrit *CGlobalDwnCrit::g_gdcsList = NULL;

// CDwnCrit -------------------------------------------------------------------

#if DBG==1

CDwnCrit * g_pDwnCritHead;

CDwnCrit::CDwnCrit(LPCSTR pszName, UINT cLevel)
{
    _pszName        = pszName;
    _cLevel         = cLevel;
    _dwThread       = 0;
    _cEnter         = 0;
    _pDwnCritNext   = g_pDwnCritHead;
    g_pDwnCritHead  = this;
}

void
CDwnCrit::Enter()
{
    CCriticalSection::Enter();

    Assert(_dwThread == 0 || _dwThread == GetCurrentThreadId());

    if (_dwThread == 0)
    {
        _dwThread = GetCurrentThreadId();

        CDwnCrit * pDwnCrit = g_pDwnCritHead;

        for (; pDwnCrit; pDwnCrit = pDwnCrit->_pDwnCritNext)
        {
            if (pDwnCrit == this)
                continue;

            if (pDwnCrit->_dwThread != GetCurrentThreadId())
                continue;
                
            if (pDwnCrit->_cLevel > _cLevel)
                continue;

            char ach[256];

            wsprintfA(ach, "CDwnCrit: %s (%d) -> %s (%d) deadlock potential",
                pDwnCrit->_pszName, pDwnCrit->_cLevel, _pszName ? _pszName : "", _cLevel);

            AssertSz(0, ach);
        }
    }

    _cEnter += 1;
}

void
CDwnCrit::Leave()
{
    Assert(_dwThread == GetCurrentThreadId());
    Assert(_cEnter > 0);

    if (--_cEnter == 0)
    {
        _dwThread = 0;
    }

    CCriticalSection::Leave();
}

// Global Section
CGlobalDwnCrit::CGlobalDwnCrit(LPCSTR pszName, UINT cLevel) 
    : CDwnCrit(pszName, cLevel)
{
    AddToGlobalList();
}

#endif

CDwnCrit::CDwnCrit()
{
#if DBG==1
    _pszName        = NULL;
    _cLevel         = (UINT)-1;
    _dwThread       = 0;
    _cEnter         = 0;
    _pDwnCritNext   = NULL;
#endif
}

CDwnCrit::~CDwnCrit()
{
    Assert(_dwThread == 0);
    Assert(_cEnter == 0);
}

CGlobalDwnCrit::CGlobalDwnCrit()
{
    AddToGlobalList();
}


HRESULT
CGlobalDwnCrit::InitializeAll()
{
    HRESULT         hr = S_OK;
    CGlobalDwnCrit *pCurrent = g_gdcsList;

    while (pCurrent)
    {
        hr = pCurrent->Init();
        if (FAILED(hr))
            goto Cleanup;
        pCurrent = pCurrent->_gdcsNext;
    }

Cleanup:
    RRETURN(hr);
}


HRESULT
InitializeDownloadGlobals()
{
    return CGlobalDwnCrit::InitializeAll();
}

// CBaseFT --------------------------------------------------------------------

CBaseFT::CBaseFT(CRITICAL_SECTION * pcs)
{
    _ulRefs     = 1;
    _ulAllRefs  = 1;
    _pcs        = pcs;
    IncrementSecondaryObjectCount(10);
}

CBaseFT::~CBaseFT()
{
    AssertSz(_ulAllRefs == 0, "Ref count messed up in derived dtor?");
    AssertSz(_ulRefs == 0, "Ref count messed up in derived dtor?");
    DecrementSecondaryObjectCount(10);
}

void CBaseFT::Passivate()
{
    AssertSz(_ulRefs == 0,
        "CBaseFT::Passivate called unexpectedly or refcnt "
        "messed up in derived Passivate");
}

#if DBG==1
CBaseFT * g_pBaseFTTrace;
extern BOOL g_fDisableBaseTrace;

ULONG CBaseFT::AddRef()
{
    ULONG ulRefs = (ULONG)InterlockedIncrement((LONG *)&_ulRefs);

    if (!g_fDisableBaseTrace && (this == g_pBaseFTTrace))
    {
        TraceTag((0, "baseFT %x AR %d", this, _ulRefs));
        TraceCallers(0, 0, 12);
    }

    return(ulRefs);
}
#endif // DBG

ULONG CBaseFT::Release()
{
    ULONG ulRefs = (ULONG)InterlockedDecrement((LONG *)&_ulRefs);

#if DBG==1
    if (!g_fDisableBaseTrace && (this == g_pBaseFTTrace))
    {
        TraceTag((0, "baseFT %x Rel %d", this, _ulRefs));
        TraceCallers(0, 0, 12);
    }
#endif // DBG

    if (ulRefs == 0)
    {
        Passivate();
        AssertSz(_ulRefs==0, "CBaseFT::AddRef occured after last release");
        SubRelease();
    }

    return(ulRefs);
}

ULONG CBaseFT::SubRelease()
{
    ULONG ulRefs = (ULONG)InterlockedDecrement((LONG *)&_ulAllRefs);

    if (ulRefs == 0)
    {
        delete this;
    }

    return(ulRefs);
}

#if DBG==1

void CBaseFT::EnterCriticalSection()
{
    if (_pcs)
    {
        ::EnterCriticalSection(_pcs);

        Assert(_dwThread == 0 || _dwThread == GetCurrentThreadId());

        if (_dwThread == 0)
        {
            _dwThread = GetCurrentThreadId();
        }

        _cEnter += 1;
    }
}

void CBaseFT::LeaveCriticalSection()
{
    if (_pcs)
    {
        Assert(_dwThread == GetCurrentThreadId());
        Assert(_cEnter > 0);

        if (--_cEnter == 0)
        {
            _dwThread = 0;
        }

        ::LeaveCriticalSection(_pcs);
    }
}

BOOL CBaseFT::EnteredCriticalSection()
{
    //$TODO (dinartem) Doesn't work across shared _pcs
    return(TRUE);
//    return(!_pcs || _dwThread == GetCurrentThreadId());
}

#endif

// CExecFT --------------------------------------------------------------------

CExecFT::CExecFT(CRITICAL_SECTION * pcs)
    : CBaseFT(pcs)
{
    _hThread = NULL;
    _hEvent  = NULL;
    _hrInit  = S_OK;
}

CExecFT::~CExecFT()
{
    CloseThread(_hThread);
    if(_hEvent)
        Verify( CloseEvent(_hEvent) );
}

void CExecFT::Passivate()
{
}

DWORD WINAPI IF_WIN16(__loadds)
CExecFT::StaticThreadProc(void * pv)
{
    return(((CExecFT *)pv)->ThreadProc());
}

DWORD CExecFT::ThreadProc()
{   

#if _WIN64
     ITypeLib * pMSHTMLTypeLib = NULL;

    // This is an attempt to force the MSHTML.TLB to stay cached 
    // TODO: Version independent and/or localized version of loading the type library is needed

     // This is only done for the 64 bit case because it really slows us down in the 32 bit case. 
     // see IE6 bug 14173 for future work on this issue

    if (FAILED(LoadTypeLib(TEXT("MSHTML.TLB"),&pMSHTMLTypeLib)))
    {
        // If we have not loaded the type library then we haven't cached the file.
        Assert(0);
    }
#endif //WIN64

    _hrInit = ThreadInit();

    if (_hEvent)
    {
        Verify(SetEvent(_hEvent));
    }

    if (_hrInit == S_OK)
    {
        StartCAP();
        ThreadExec();
        StopCAP();
    }

    ThreadTerm();
    ThreadExit();

#if _WIN64
    if (pMSHTMLTypeLib)
    {
        pMSHTMLTypeLib->Release();
    }
#endif

    return(0);
}

void CExecFT::ThreadExit()
{
    SubRelease();
}

HRESULT CExecFT::Launch(BOOL fWait)
{
    DWORD dwResult;
#ifdef WIN16
    DWORD dwStackSize = 0x3000;
#else
    DWORD dwStackSize = 0;
#endif

    if (fWait)
    {
        _hEvent = CreateEventA(NULL, FALSE, FALSE, NULL);

        if (_hEvent == NULL)
            RRETURN(GetLastWin32Error());
    }

    SubAddRef();

    _hThread = CreateThread(NULL, dwStackSize, &CExecFT::StaticThreadProc, this, 0, &_dwThreadId);

    if (_hThread == NULL)
    {
        SubRelease();
        RRETURN(GetLastWin32Error());
    }

    if (fWait)
    {
        dwResult = WaitForSingleObject(_hEvent, INFINITE);

        Assert(dwResult == WAIT_OBJECT_0);

        CloseEvent(_hEvent);
        _hEvent = NULL;

        RRETURN(_hrInit);
    }

    return(S_OK);
}

void CExecFT::Shutdown(DWORD dwTimeOut)
{
    if (_hThread && GetCurrentThreadId() != _dwThreadId)
    {
        DWORD dwExitCode;

        WaitForSingleObject(_hThread, dwTimeOut);

#ifndef WIN16
        if (    GetExitCodeThread(_hThread, &dwExitCode)
            &&  dwExitCode == STILL_ACTIVE)
        {
            TerminateThread(_hThread, 1);
        }
#endif // ndef WIN16
    }
}

// CDwnChan -------------------------------------------------------------------

CDwnChan::CDwnChan(CRITICAL_SECTION * pcs)
    : super(pcs)
{
    PerfDbgLog(tagDwnChan, this, "CDwnChan::CDwnChan");

    _fSignalled = TRUE;
}

void
CDwnChan::Passivate()
{
    PerfDbgLog(tagDwnChan, this, "+CDwnChan::Passivate");

    Disconnect();

    PerfDbgLog(tagDwnChan, this, "-CDwnChan::Passivate");
}

void
CDwnChan::SetCallback(PFNDWNCHAN pfnCallback, void * pvCallback)
{
    PerfDbgLog(tagDwnChan, this, "+CDwnChan::SetCallback %s");

#ifdef OBJCNTCHK
    DWORD dwObjCnt;
#endif

    HRESULT hr = AddRefThreadState(&dwObjCnt);

    Disconnect();

    if (hr == S_OK)
    {
        Assert(_fSignalled);

        _pts          = GetThreadState();
        _pfnCallback  = pfnCallback;
        _pvCallback   = pvCallback;
        _fSignalled   = FALSE;

#ifdef OBJCNTCHK
        _dwObjCnt     = dwObjCnt;
#endif
    }

    PerfDbgLog(tagDwnChan, this, "-CDwnChan::SetCallback");
}

void
CDwnChan::Disconnect()
{
    if (_pts && (_pts == GetThreadState()))
    {
        PerfDbgLog(tagDwnChan, this, "+CDwnChan::Disconnect");

        THREADSTATE * pts;
        BOOL fSignalled;

        g_csDwnChanSig.Enter();

        fSignalled   = _fSignalled;
        pts          = _pts;
        _pts         = NULL;
        _pfnCallback = NULL;
        _pvCallback  = NULL;
        _fSignalled  = TRUE;

        g_csDwnChanSig.Leave();

        if (fSignalled)
        {
            GWKillMethodCallEx(pts, this, ONCALL_METHOD(CDwnChan, OnMethodCall, onmethodcall), 0);
        }

        ReleaseThreadState(&_dwObjCnt);

        PerfDbgLog(tagDwnChan, this, "-CDwnChan::Disconnect");
    }
}

void CDwnChan::Signal()
{
    if (!_fSignalled)
    {
        PerfDbgLog(tagDwnChan, this, "+CDwnChan::Signal");

        g_csDwnChanSig.Enter();

        if (!_fSignalled)
        {
            _fSignalled = TRUE;
            GWPostMethodCallEx(_pts, this, ONCALL_METHOD(CDwnChan, OnMethodCall, onmethodcall), 0, FALSE, GetOnMethodCallName());
        }

        g_csDwnChanSig.Leave();

        PerfDbgLog(tagDwnChan, this, "-CDwnChan::Signal");
    }
}

void CDwnChan::OnMethodCall(DWORD_PTR dwContext)
{
    PerfDbgLog(tagDwnChan, this, "+CDwnChan::OnMethodCall");

    if (_fSignalled)
    {
        _fSignalled = FALSE;
        _pfnCallback(this, _pvCallback);
    }

    PerfDbgLog(tagDwnChan, this, "-CDwnChan::OnMethodCall");
}

// CDwnStm --------------------------------------------------------------------

CDwnStm::CDwnStm(UINT cbBuf)
    : CDwnChan(g_csDwnStm.GetPcs())
{
    PerfDbgLog(tagDwnStm, this, "+CDwnStm::CDwnStm");

    _cbBuf = cbBuf;

    PerfDbgLog(tagDwnStm, this, "-CDwnStm::CDwnStm");
}

CDwnStm::~CDwnStm()
{
    PerfDbgLog(tagDwnStm, this, "+CDwnStm::~CDwnStm");

    BUF * pbuf;
    BUF * pbufNext;

    for (pbuf = _pbufHead; pbuf; pbuf = pbufNext)
    {
        pbufNext = pbuf->pbufNext;
        MemFree(pbuf);
    }

    PerfDbgLog(tagDwnStm, this, "-CDwnStm::~CDwnStm");
}

HRESULT
CDwnStm::SetSeekable()
{
    PerfDbgLog(tagDwnStm, this, "+CDwnStm::SetSeekable");

    _fSeekable = TRUE;

    PerfDbgLog1(tagDwnStm, this, "-CDwnStm::SetSeekable (hr=%lX)", S_OK);
    return(S_OK);
}

HRESULT CDwnStm::Write(void * pv, ULONG cb)
{
    PerfDbgLog1(tagDwnStm, this, "+CDwnStm::Write (cb=%ld)", cb);

    void *  pvW;
    ULONG   cbW;
    HRESULT hr = S_OK;

    while (cb > 0)
    {
        hr = WriteBeg(&pvW, &cbW);
        if (hr)
            goto Cleanup;

        if (cbW > cb)
            cbW = cb;

        memcpy(pvW, pv, cbW);

        WriteEnd(cbW);

        pv = (BYTE *)pv + cbW;
        cb = cb - cbW;
    }

Cleanup:
    PerfDbgLog1(tagDwnStm, this, "-CDwnStm::Write (hr=%lX)", hr);
    RRETURN(hr);
}

HRESULT CDwnStm::WriteBeg(void ** ppv, ULONG * pcb)
{
    PerfDbgLog(tagDwnStm, this, "+CDwnStm::WriteBeg");

    BUF * pbuf = _pbufWrite;
    HRESULT hr = S_OK;

    if (pbuf == NULL)
    {
        pbuf = (BUF *)MemAlloc(Mt(CDwnStm_pbuf), offsetof(BUF, ab) + _cbBuf);

        if (pbuf == NULL)
        {
            hr = E_OUTOFMEMORY;
            goto Cleanup;
        }

        pbuf->pbufNext = NULL;
        pbuf->ib = 0;
        pbuf->cb = _cbBuf;

        g_csDwnStm.Enter();

        if (_pbufTail == NULL)
        {
            _pbufHead = pbuf;
            _pbufTail = pbuf;
        }
        else
        {
            _pbufTail->pbufNext = pbuf;
            _pbufTail = pbuf;
        }

        if (_pbufRead == NULL)
        {
            Assert(_ibRead == 0);
            _pbufRead = pbuf;
        }

        g_csDwnStm.Leave();

        _pbufWrite = pbuf;
    }

    Assert(pbuf->cb > pbuf->ib);

    *ppv = &pbuf->ab[pbuf->ib];
    *pcb = pbuf->cb - pbuf->ib;

Cleanup:
    PerfDbgLog2(tagDwnStm, this, "-CDwnStm::WriteBeg (hr=%lX,*pcb=%ld)", hr, *pcb);
    RRETURN(hr);
}

void CDwnStm::WriteEnd(ULONG cb)
{
    PerfDbgLog1(tagDwnStm, this, "+CDwnStm::WriteEnd (cb=%ld)", cb);

    if (cb > 0)
    {
        BUF *   pbuf = _pbufWrite;
        ULONG   ib   = pbuf->ib + cb;

        Assert(ib <= pbuf->cb);

        if (ib >= pbuf->cb)
        {
            _pbufWrite = NULL;
        }

        // As soon as pbuf->ib is written and matches pbuf->cb, the reader
        // can asynchronously read and free the buffer.  Therefore, pbuf
        // cannot be accessed after this next line.

        pbuf->ib  = ib;
        _cbWrite += cb;

        Signal();
    }

    PerfDbgLog(tagDwnStm, this, "-CDwnStm::WriteEnd");
}

void CDwnStm::WriteEof(HRESULT hrEof)
{
    PerfDbgLog1(tagDwnStm, this, "+CDwnStm::WriteEof (hrEof=%lX)", hrEof);

    if (!_fEof || hrEof)
    {
        _hrEof = hrEof;
        _fEof  = TRUE;
        Signal();
    }

    PerfDbgLog(tagDwnStm, this, "-CDwnStm::WriteEof");
}

HRESULT CDwnStm::Read(void * pv, ULONG cb, ULONG * pcbRead)
{
    PerfDbgLog1(tagDwnStm, this, "+CDwnStm::Read (cb=%ld)", cb);

    void *  pvR;
    ULONG   cbR;
    ULONG   cbRead  = 0;
    HRESULT hr      = S_OK;

    while (cb > 0)
    {
        hr = ReadBeg(&pvR, &cbR);
        if (hr)
            break;

        if (cbR == 0)
            break;

        if (cbR > cb)
            cbR = cb;

        memcpy(pv, pvR, cbR);

        pv = (BYTE *)pv + cbR;
        cb = cb - cbR;
        cbRead += cbR;

        ReadEnd(cbR);
    }

    *pcbRead = cbRead;

    PerfDbgLog2(tagDwnStm, this, "-CDwnStm::Read (hr=%lX,*pcb=%ld)", hr, *pcbRead);
    RRETURN(hr);
}

//
// Read from a stream the number of bytes or the max number of bytes available, 
// without updating the buffers and stream's read/write counters.
// Used for mime type sniffing during synchronous binding.
//
//
// We are not doing any head / tail buffer manipulation here which is OK for the
// cases we will be using this. 
//
HRESULT CDwnStm::ReadForMimeChk(void * pv, ULONG cb, ULONG * pcbRead)
{
    PerfDbgLog1(tagDwnStm, this, "+CDwnStm::Read (cb=%ld)", cb);

    void *  pvR;
    ULONG   cbR;
    ULONG   cbRead  = 0;

    BUF * pbuf = _pbufHead;     // buffer to start reading from.

    // while we still have to read more information
    while (cb > 0)
    {
        if (pbuf)
        {
            pvR = &pbuf->ab[0];
            cbR = pbuf->ib;
        }
        else
        {
            pvR = NULL;
            cbR = 0;
        }

        if (cbR == 0)
            break;

        if (cbR > cb)
            cbR = cb;

        memcpy(pv, pvR, cbR);

        pv = (BYTE *)pv + cbR;
        cb = cb - cbR;
        cbRead += cbR;

        // go to the next buffer if there is one
        if (pbuf->pbufNext)
        {
            pbuf = pbuf->pbufNext;
        }
    }

    *pcbRead = cbRead;

    PerfDbgLog1(tagDwnStm, this, "-CDwnStm::ReadForMimeChk (*pcb=%ld)", *pcbRead);
    RRETURN(S_OK);
}

HRESULT CDwnStm::ReadBeg(void ** ppv, ULONG * pcb)
{
    PerfDbgLog(tagDwnStm, this, "+CDwnStm::ReadBeg");

    BUF * pbuf = _pbufRead;
    HRESULT hr = S_OK;

    if (_fEof && _hrEof != S_OK)
    {
        *ppv = NULL;
        *pcb = 0;
        hr   = _hrEof;
        goto Cleanup;
    }

    if (pbuf)
    {
        Assert(_ibRead <= pbuf->ib);

        *ppv = &pbuf->ab[_ibRead];
        *pcb = pbuf->ib - _ibRead;
    }
    else
    {
        *ppv = NULL;
        *pcb = 0;
    }

Cleanup:
    PerfDbgLog2(tagDwnStm, this, "-CDwnStm::ReadBeg (hr=%lX,*pcb=%ld)", hr, *pcb);
    return(S_OK);
}

void CDwnStm::ReadEnd(ULONG cb)
{
    PerfDbgLog1(tagDwnStm, this, "+CDwnStm::ReadEnd (cb=%ld)", cb);

    BUF * pbuf = _pbufRead;

    Assert(pbuf);
    Assert(_ibRead + cb <= pbuf->ib);

    _ibRead += cb;

    if (_ibRead >= pbuf->cb)
    {
        _ibRead = 0;

        g_csDwnStm.Enter();

        _pbufRead = pbuf->pbufNext;

        if (!_fSeekable)
        {
            _pbufHead = _pbufRead;
            
            if (_pbufHead == NULL)
                _pbufTail = NULL;
        }

        g_csDwnStm.Leave();

        if (!_fSeekable)
        {
            MemFree(pbuf);
        }
    }

    _cbRead += cb;

    PerfDbgLog(tagDwnStm, this, "-CDwnStm::ReadEnd");
}

BOOL CDwnStm::ReadEof(HRESULT * phrEof)
{
    if (_fEof && (_hrEof || _cbRead == _cbWrite))
    {
        PerfDbgLog1(tagDwnStm, this, "CDwnStm::ReadEof (TRUE,hrEof=%lX)", _hrEof);
        *phrEof = _hrEof;
        return(TRUE);
    }
    else
    {
        PerfDbgLog(tagDwnStm, this, "CDwnStm::ReadEof (FALSE)");
        *phrEof = S_OK;
        return(FALSE);
    }
}

HRESULT CDwnStm::Seek(ULONG ib)
{
    PerfDbgLog1(tagDwnStm, this, "+CDwnStm::Seek (ib=%ld)", ib);

    BUF *   pbuf;
    ULONG   cb;
    HRESULT hr = S_OK;
    
    if (!_fSeekable || ib > _cbWrite)
    {
        Assert(FALSE);
        hr = E_FAIL;
        goto Cleanup;
    }

    pbuf = _pbufHead;
    cb   = ib;

    if (pbuf)
    {
        while (cb > pbuf->cb)
        {
            cb  -= pbuf->cb;
            pbuf = pbuf->pbufNext;
        }
    }
    
    g_csDwnStm.Enter();

    if (!pbuf || cb < pbuf->cb)
    {
        _pbufRead = pbuf;
        _ibRead   = cb;
    }
    else
    {
        _pbufRead = pbuf->pbufNext;
        _ibRead   = 0;
    }

    g_csDwnStm.Leave();

    _cbRead = ib;

Cleanup:
    PerfDbgLog1(tagDwnStm, this, "-CDwnStm::Seek (hr=%lX)", hr);
    RRETURN(hr);
}

HRESULT
CDwnStm::CopyStream(IStream * pstm, ULONG * pcbCopy)
{
    PerfDbgLog(tagDwnStm, this, "+CDwnStm::CopyStream");

    void *  pv;
    ULONG   cbW;
    ULONG   cbR;
    ULONG   cbRTotal;
    HRESULT hr = S_OK;

    cbRTotal = 0;
    
    for (;;)
    {
        hr = THR(WriteBeg(&pv, &cbW));
        if (hr)
            goto Cleanup;

        Assert(cbW > 0);

        hr = THR(pstm->Read(pv, cbW, &cbR));
        if (FAILED(hr))
            goto Cleanup;

        hr = S_OK;

        Assert(cbR <= cbW);

        WriteEnd(cbR);

        cbRTotal += cbR;

        if (cbR == 0)
            break;
    }

Cleanup:
    if (pcbCopy)
        *pcbCopy = cbRTotal;
        
    PerfDbgLog2(tagDwnStm, this, "+CDwnStm::CopyStream (hr=%lX,*pcb=%ld)", hr, cbRTotal);
    RRETURN(hr);
}

// CDwnStmStm -----------------------------------------------------------------

class CDwnStmStm : public CBaseFT, public IStream
{
    typedef CBaseFT super;

public:

    DECLARE_MEMCLEAR_NEW_DELETE(Mt(CDwnStmStm))

                    CDwnStmStm(CDwnStm * pDwnStm);
    virtual void    Passivate();

    // IUnknown methods

    STDMETHOD (QueryInterface)(REFIID riid, void ** ppv);
    STDMETHOD_(ULONG,AddRef)();
    STDMETHOD_(ULONG,Release)();

    // IStream

    STDMETHOD(Clone)(IStream ** ppStream);
    STDMETHOD(Commit)(DWORD dwFlags);
    STDMETHOD(CopyTo)(IStream * pStream, ULARGE_INTEGER cb, ULARGE_INTEGER * pcbRead, ULARGE_INTEGER * pcbWrite);
    STDMETHOD(LockRegion)(ULARGE_INTEGER ib, ULARGE_INTEGER cb, DWORD dwLockType);
    STDMETHOD(Read)(void HUGEP * pv, ULONG cb, ULONG * pcb);
    STDMETHOD(Revert)();
    STDMETHOD(Seek)(LARGE_INTEGER ib, DWORD dwOrigin, ULARGE_INTEGER * pib);
    STDMETHOD(SetSize)(ULARGE_INTEGER cb);
    STDMETHOD(Stat)(STATSTG * pstatstg, DWORD dwFlags);
    STDMETHOD(UnlockRegion)(ULARGE_INTEGER ib, ULARGE_INTEGER cb, DWORD dwLockType);
    STDMETHOD(Write)(const void HUGEP * pv, ULONG cb, ULONG * pcb);

protected:

    CDwnStm *       _pDwnStm;
    ULONG           _ib;

};

CDwnStmStm::CDwnStmStm(CDwnStm * pDwnStm)
{
    PerfDbgLog(tagDwnStmStm, this, "+CDwnStmStm::CDwnStmStm");

    _pDwnStm = pDwnStm;
    _pDwnStm->AddRef();

    PerfDbgLog(tagDwnStmStm, this, "-CDwnStmStm::CDwnStmStm");
}

void
CDwnStmStm::Passivate(void)
{
    PerfDbgLog(tagDwnStmStm, this, "+CDwnStmStm::Passivate");

    _pDwnStm->Release();

    super::Passivate();

    PerfDbgLog(tagDwnStmStm, this, "-CDwnStmStm::Passivate");
}

STDMETHODIMP
CDwnStmStm::QueryInterface(REFIID iid, void ** ppv)
{
    PerfDbgLog(tagDwnStmStm, this, "+CDwnStmStm::QueryInterface");

    HRESULT hr;

    if (iid == IID_IUnknown || iid == IID_IStream)
    {
        *ppv = (IStream *)this;
        AddRef();
        hr = S_OK;
    }
    else
    {
        *ppv = NULL;
        hr = E_NOINTERFACE;
    }

    PerfDbgLog1(tagDwnStmStm, this, "-CDwnStmStm::QueryInterface (hr=%lX)", hr);
    return(hr);
}

STDMETHODIMP_(ULONG)
CDwnStmStm::AddRef()
{
    PerfDbgLog(tagDwnStmStm, this, "+CDwnStmStm::AddRef");

    ULONG ulRefs = super::AddRef();

    PerfDbgLog1(tagDwnStmStm, this, "-CDwnStmStm::AddRef (cRefs=%ld)", ulRefs);
    return(ulRefs);
}

STDMETHODIMP_(ULONG)
CDwnStmStm::Release()
{
    PerfDbgLog(tagDwnStmStm, this, "+CDwnStmStm::Release");

    ULONG ulRefs = super::Release();

    PerfDbgLog1(tagDwnStmStm, this, "-CDwnStmStm::Release (cRefs=%ld)", ulRefs);
    return(ulRefs);
}

STDMETHODIMP CDwnStmStm::Clone(IStream ** ppStream)
{
    PerfDbgLog(tagDwnStmStm, this, "+CDwnStmStm::Clone");

    HRESULT hr = E_NOTIMPL;
    *ppStream = NULL;

    PerfDbgLog1(tagDwnStmStm, this, "-CDwnStmStm::Clone (hr=%lX)", hr);
    RRETURN(hr);
}

STDMETHODIMP CDwnStmStm::Commit(DWORD dwFlags)
{
    PerfDbgLog(tagDwnStmStm, this, "+CDwnStmStm::Commit");

    HRESULT hr = S_OK;

    PerfDbgLog1(tagDwnStmStm, this, "-CDwnStmStm::Commit (hr=%lX)", hr);
    RRETURN(hr);
}

STDMETHODIMP CDwnStmStm::CopyTo(IStream * pStream, ULARGE_INTEGER cb,
    ULARGE_INTEGER * pcbRead, ULARGE_INTEGER * pcbWrite)
{
    PerfDbgLog(tagDwnStmStm, this, "+CDwnStmStm::CopyTo");

    HRESULT hr = E_NOTIMPL;

    PerfDbgLog1(tagDwnStmStm, this, "-CDwnStmStm::CopyTo (hr=%lX)", hr);
    RRETURN(hr);
}

STDMETHODIMP CDwnStmStm::LockRegion(ULARGE_INTEGER ib, ULARGE_INTEGER cb,
    DWORD dwLockType)
{
    PerfDbgLog(tagDwnStmStm, this, "+CDwnStmStm::LockRegion");

    HRESULT hr = E_NOTIMPL;

    PerfDbgLog1(tagDwnStmStm, this, "-CDwnStmStm::LockRegion (hr=%lX)", hr);
    RRETURN(hr);
}

STDMETHODIMP CDwnStmStm::Read(void HUGEP * pv, ULONG cb, ULONG * pcb)
{
    PerfDbgLog1(tagDwnStmStm, this, "+CDwnStmStm::Read (cbReq=%ld)", cb);

    ULONG   cbRead;
    HRESULT hr;

    if (pcb == NULL)
        pcb = &cbRead;

    *pcb = 0;

    hr = THR(_pDwnStm->Seek(_ib));
    if (hr)
        goto Cleanup;

    hr = THR(_pDwnStm->Read(pv, cb, pcb));
    if (hr)
        goto Cleanup;

    _ib += *pcb;

    if (*pcb == 0)
    {
        hr = S_FALSE;
        goto Cleanup;
    }

Cleanup:
    PerfDbgLog2(tagDwnStmStm, this, "-CDwnStmStm::Read (*pcb=%ld,hr=%lX)", *pcb, hr);
    RRETURN1(hr, S_FALSE);
}

STDMETHODIMP CDwnStmStm::Revert()
{
    PerfDbgLog(tagDwnStmStm, this, "+CDwnStmStm::Revert");

    HRESULT hr = E_NOTIMPL;

    PerfDbgLog1(tagDwnStmStm, this, "-CDwnStmStm::Revert (hr=%lX)", hr);
    RRETURN(hr);
}

STDMETHODIMP CDwnStmStm::Seek(LARGE_INTEGER ib, DWORD dwOrigin,
    ULARGE_INTEGER * pib)
{
    PerfDbgLog(tagDwnStmStm, this, "+CDwnStmStm::Seek");

    HRESULT hr = E_NOTIMPL;

    if (dwOrigin == STREAM_SEEK_SET)
    {
        _ib = ib.LowPart;
        hr = S_OK;
    }

    PerfDbgLog1(tagDwnStmStm, this, "-CDwnStmStm::Seek (hr=%lX)", hr);
    RRETURN(hr);
}

STDMETHODIMP CDwnStmStm::SetSize(ULARGE_INTEGER cb)
{
    PerfDbgLog(tagDwnStmStm, this, "+CDwnStmStm::SetSize");

    HRESULT hr = E_NOTIMPL;

    PerfDbgLog1(tagDwnStmStm, this, "-CDwnStmStm::SetSize (hr=%lX)", hr);
    RRETURN(hr);
}

STDMETHODIMP
CDwnStmStm::Stat(STATSTG * pstatstg, DWORD dwFlags)
{
    PerfDbgLog(tagDwnStmStm, this, "+CDwnStmStm::Stat");

    memset(pstatstg, 0, sizeof(STATSTG));

    pstatstg->type           = STGTY_STREAM;
    pstatstg->grfMode        = STGM_READ;
    pstatstg->cbSize.LowPart = _pDwnStm->Size();

    PerfDbgLog(tagDwnStmStm, this, "-CDwnStmStm::Stat (hr=0)");
    return(S_OK);
}

STDMETHODIMP CDwnStmStm::UnlockRegion(ULARGE_INTEGER ib, ULARGE_INTEGER cb,
    DWORD dwLockType)
{
    PerfDbgLog(tagDwnStmStm, this, "+CDwnStmStm::UnlockRegion");

    HRESULT hr = E_NOTIMPL;

    PerfDbgLog1(tagDwnStmStm, this, "-CDwnStmStm::UnlockRegion (hr=%lX)", hr);
    RRETURN(hr);
}

STDMETHODIMP CDwnStmStm::Write(const void HUGEP * pv, ULONG cb, ULONG * pcb)
{
    PerfDbgLog(tagDwnStmStm, this, "+CDwnStmStm::Write");

    HRESULT hr = E_NOTIMPL;

    PerfDbgLog1(tagDwnStmStm, this, "-CDwnStmStm::Write (hr=%lX)", hr);
    RRETURN(hr);
}

HRESULT
CreateStreamOnDwnStm(CDwnStm * pDwnStm, IStream ** ppStream)
{
    *ppStream = new CDwnStmStm(pDwnStm);
    RRETURN(*ppStream ? S_OK : E_OUTOFMEMORY);
}

// CDwnCtx --------------------------------------------------------------------

#if DBG==1

void
CDwnCtx::EnterCriticalSection()
{
    ((CDwnCrit *)GetPcs())->Enter();
}

void
CDwnCtx::LeaveCriticalSection()
{
    ((CDwnCrit *)GetPcs())->Leave();
}

BOOL
CDwnCtx::EnteredCriticalSection()
{
    return(((CDwnCrit *)GetPcs())->IsEntered());
}

#endif

void
CDwnCtx::Passivate()
{
    PerfDbgLog(tagDwnCtx, this, "+CDwnCtx::Passivate");

    SetLoad(FALSE, NULL, FALSE);

    super::Passivate();

    if (_pDwnInfo)
        _pDwnInfo->DelDwnCtx(this);

    ClearInterface(&_pProgSink);

    PerfDbgLog(tagDwnCtx, this, "-CDwnCtx::Passivate");
}

LPCTSTR
CDwnCtx::GetUrl()
{
    return(_pDwnInfo ? _pDwnInfo->GetUrl() : g_Zero.ach);
}

LPCTSTR
CDwnCtx::GetRedirectedUrl()
{
    return(_pDwnInfo ? _pDwnInfo->GetRedirectedUrl() : g_Zero.ach);
}

const MIMEINFO *
CDwnCtx::GetMimeInfo()
{
    return(_pDwnInfo ? _pDwnInfo->GetMimeInfo() : NULL);
}

HRESULT
CDwnCtx::GetFile(LPTSTR * ppch)
{
    *ppch = NULL;
    RRETURN(_pDwnInfo ? _pDwnInfo->GetFile(ppch) : E_FAIL);
}

FILETIME
CDwnCtx::GetLastMod()
{
    if (_pDwnInfo)
    {
        return _pDwnInfo->GetLastMod();
    }
    else
    {
        FILETIME ftZ = {0};
        return ftZ;
    }
}

DWORD
CDwnCtx::GetSecFlags()
{
    return(_pDwnInfo ? _pDwnInfo->GetSecFlags() : 0);
}

HRESULT
CDwnCtx::SetProgSink(IProgSink * pProgSink)
{
    PerfDbgLog(tagDwnCtx, this, "+CDwnCtx::SetProgSink");

    HRESULT     hr = S_OK;

    EnterCriticalSection();

#if DBG == 1
    if (pProgSink)
    {
        if (!_pDwnInfo)
        {
            TraceTag((tagWarning, "CDwnCtx::SetProgSink called with no _pDwnInfo"));
            TraceCallers(tagWarning, 0, 6);
        }
        else
        {
            if (_pDwnInfo->GetFlags(DWNF_STATE) & (DWNLOAD_COMPLETE | DWNLOAD_ERROR | DWNLOAD_STOPPED))
            {
                TraceTag((tagWarning, "CDwnCtx::SetProgSink called when _pDwnInfo is already done"));
                TraceCallers(tagWarning, 0, 6);
            }
        }
    }
#endif

    if (_pDwnInfo)
    {
        if (pProgSink)
        {
            hr = THR(_pDwnInfo->AddProgSink(pProgSink));
            if (hr)
                goto Cleanup;
        }

        if (_pProgSink)
        {
            _pDwnInfo->DelProgSink(_pProgSink);
        }

    }

    ReplaceInterface(&_pProgSink, pProgSink);

Cleanup:
    LeaveCriticalSection();
    PerfDbgLog1(tagDwnCtx, this, "-CDwnCtx::SetProgSink (hr=%lX)", hr);
    RRETURN(hr);
}

ULONG
CDwnCtx::GetState(BOOL fClear)
{
    PerfDbgLog1(tagDwnCtx, this, "+CDwnCtx::GetState (fClear=%s)",
        fClear ? "TRUE" : "FALSE");

    DWORD dwState;

    EnterCriticalSection();

    dwState = _wChg;

    if (_pDwnInfo)
    {
        dwState |= _pDwnInfo->GetFlags(DWNF_STATE);
    }

    if (fClear)
    {
        _wChg = 0;
    }

    LeaveCriticalSection();

    PerfDbgLog1(tagDwnCtx, this, "-CDwnCtx::GetState (dwState=%08lX)", dwState);
    return(dwState);
}

void
CDwnCtx::Signal(WORD wChg)
{
    PerfDbgLog1(tagDwnCtx, this, "+CDwnCtx::Signal (wChg=%04lX)", wChg);

    Assert(EnteredCriticalSection());

    wChg &= _wChgReq;   // Only light up requested bits
    wChg &= ~_wChg;     // Don't light up bits already on

    if (wChg)
    {
        _wChg |= (WORD)wChg;
        super::Signal();
    }

    PerfDbgLog(tagDwnCtx, this, "-CDwnCtx::Signal");
}

void
CDwnCtx::SetLoad(BOOL fLoad, DWNLOADINFO * pdli, BOOL fReload)
{
    PerfDbgLog2(tagDwnCtx, this, "+CDwnCtx::SetLoad (fLoad=%s,fReload=%s)",
        fLoad ? "TRUE" : "FALSE", fReload ? "TRUE" : "FALSE");

    if (    !!fLoad != !!_fLoad
        ||  (fLoad && _fLoad && fReload))
    {
        if (    fLoad 
            &&  !pdli->pDwnBindData 
            &&  !pdli->pmk 
            &&  !pdli->pstm 
            &&  !pdli->pchUrl
            &&  !pdli->fClientData)
        {
            pdli->pchUrl = _pDwnInfo->GetUrl();
        }

        _pDwnInfo->SetLoad(this, fLoad, fReload, pdli);
    }

    PerfDbgLog(tagDwnCtx, this, "-CDwnCtx::SetLoad");
}

CDwnLoad *
CDwnCtx::GetDwnLoad()
{
    CDwnLoad * pDwnLoadRet = NULL;

    EnterCriticalSection();
    if (_pDwnInfo && _pDwnInfo->_pDwnLoad)
    {
        pDwnLoadRet = _pDwnInfo->_pDwnLoad;
        pDwnLoadRet->AddRef();
    }
    LeaveCriticalSection();

    return pDwnLoadRet;
}

HRESULT
NewDwnCtx(UINT dt, BOOL fLoad, DWNLOADINFO * pdli, CDwnCtx ** ppDwnCtx)
{
    PerfDbgLog2(tagDwnCtx, NULL, "+NewDwnCtx (dt=%d,fLoad=%s)", dt, fLoad ? "TRUE" : "FALSE");

    CDwnInfo *  pDwnInfo;
    CDwnCtx *   pDwnCtx;
    HRESULT     hr;

    hr = THR(CDwnInfo::Create(dt, pdli, &pDwnInfo));
    if (hr)
        goto Cleanup;

    hr = THR(pDwnInfo->NewDwnCtx(&pDwnCtx));

    if (hr == S_OK)
    {
        pDwnInfo->AddDwnCtx(pDwnCtx);        
    }

    pDwnInfo->Release();

    if (hr)
        goto Cleanup;

    if (fLoad)
    {
        pDwnCtx->SetLoad(TRUE, pdli, FALSE);
    }

    *ppDwnCtx = pDwnCtx;

Cleanup:
    PerfDbgLog1(tagDwnCtx, NULL, "-NewDwnCtx (hr=%lX)", hr);
    RRETURN(hr);
}

// CDwnInfo -------------------------------------------------------------------

CDwnInfo::CDwnInfo()
    : CBaseFT(_cs.GetPcs())
{
}

CDwnInfo::~CDwnInfo()
{
    if (_pDwnInfoLock)
        _pDwnInfoLock->SubRelease();
}

void
CDwnInfo::Passivate()
{
    EnterCriticalSection();

#if DBG == 1
    _fPassive = TRUE;
#endif

    if (_arySink.Size() > 0)
    {
        SINKENTRY * pSinkEntry = _arySink;
        UINT cSink = _arySink.Size();

        for (; cSink > 0; --cSink, ++pSinkEntry)
        {
            if (pSinkEntry->dwCookie)
                pSinkEntry->pProgSink->DelProgress(pSinkEntry->dwCookie);
            pSinkEntry->pProgSink->Release();
        }

        _arySink.SetSize(0);
    }

    LeaveCriticalSection();
}

HRESULT
CDwnInfo::Init(DWNLOADINFO * pdli)
{
    PerfDbgLog(tagDwnInfo, this, "+CDwnInfo::Init");

    CDwnDoc * pDwnDoc = pdli->pDwnDoc;
    HRESULT hr;

    hr = THR(_cs.Init());
    if (hr)
        goto Cleanup;

    hr = THR(_cstrUrl.Set(pdli->pchUrl));
    if (hr)
        goto Cleanup;

    _dwBindf   = pDwnDoc->GetBindf();
    _dwRefresh = pdli->fResynchronize ? IncrementLcl() : pDwnDoc->GetRefresh();
    _dwFlags   = DWNLOAD_NOTLOADED | (pDwnDoc->GetDownf() & ~DWNF_STATE);

Cleanup:
    PerfDbgLog1(tagDwnInfo, this, "-CDwnInfo::Init (hr=%lX)", hr);
    RRETURN(hr);
}

void
CDwnInfo::DelProgSinks()
{
    PerfDbgLog(tagDwnInfo, this, "+CDwnInfo::DelProgSinks");

    EnterCriticalSection();

    for (CDwnCtx * pDwnCtx = _pDwnCtxHead; pDwnCtx;
            pDwnCtx = pDwnCtx->_pDwnCtxNext)
    {
        Assert(pDwnCtx->_pDwnInfo == this);
        pDwnCtx->SetProgSink(NULL);
    }

    LeaveCriticalSection();

    PerfDbgLog(tagDwnInfo, this, "-CDwnInfo::DelProgSinks");
}


void
CDwnInfo::AddDwnCtx(CDwnCtx * pDwnCtx)
{
    PerfDbgLog(tagDwnInfo, this, "+CDwnInfo::AddDwnCtx");

    AddRef();

    EnterCriticalSection();

    pDwnCtx->_pDwnInfo    = this;
    pDwnCtx->_pDwnCtxNext = _pDwnCtxHead;
    _pDwnCtxHead          = pDwnCtx;
    pDwnCtx->SetPcs(GetPcs());

    LeaveCriticalSection();

    PerfDbgLog(tagDwnInfo, this, "-CDwnInfo::AddDwnCtx");
}

void
CDwnInfo::DelDwnCtx(CDwnCtx * pDwnCtx)
{
    PerfDbgLog(tagDwnInfo, this, "+CDwnInfo::DelDwnCtx");

    EnterCriticalSection();

    CDwnCtx ** ppDwnCtx = &_pDwnCtxHead;

    for (; *ppDwnCtx; ppDwnCtx = &(*ppDwnCtx)->_pDwnCtxNext)
    {
        if (*ppDwnCtx == pDwnCtx)
        {
            *ppDwnCtx = pDwnCtx->_pDwnCtxNext;

            DelProgSink(pDwnCtx->_pProgSink);
            
            Assert(pDwnCtx->_pDwnInfo == this);
            pDwnCtx->_pDwnInfo = NULL;
            goto found;
        }
    }

    AssertSz(FALSE, "Couldn't find CDwnCtx in CDwnInfo list");

found:
    LeaveCriticalSection();

    Release();

    PerfDbgLog(tagDwnInfo, this, "-CDwnInfo::DelDwnCtx");
}

HRESULT
CDwnInfo::GetFile(LPTSTR * ppch)
{
    PerfDbgLog(tagDwnInfo, this, "+CDwnInfo::GetFile");

    HRESULT hr;
    LPCTSTR pchUrl = GetUrl();

    *ppch = NULL;

    if (_tcsnipre(_T("file"), 4, pchUrl, -1))
    {
        TCHAR achPath[MAX_PATH];
        DWORD cchPath;

        hr = THR(CoInternetParseUrl(pchUrl, PARSE_PATH_FROM_URL, 0,
                    achPath, ARRAY_SIZE(achPath), &cchPath, 0));
        if (hr)
            goto Cleanup;

        hr = THR(MemAllocString(Mt(CDwnInfoGetFile), achPath, ppch));
    }
    else
    {
        BYTE                        buf[MAX_CACHE_ENTRY_INFO_SIZE];
        INTERNET_CACHE_ENTRY_INFO * pInfo = (INTERNET_CACHE_ENTRY_INFO *) buf;
        DWORD                       cInfo = sizeof(buf);

        if (RetrieveUrlCacheEntryFile(pchUrl, pInfo, &cInfo, 0))
        {
            DoUnlockUrlCacheEntryFile(pchUrl, 0);
            hr = THR(MemAllocString(Mt(CDwnInfoGetFile),
                        pInfo->lpszLocalFileName, ppch));
        }
        else
        {
            hr = E_FAIL;
        }
    }

Cleanup:
    PerfDbgLog1(tagDwnInfo, this, "+CDwnInfo::GetFile (hr=%lX)", hr);
    RRETURN(hr);
}

void
CDwnInfo::Signal(WORD wChg)
{
    PerfDbgLog1(tagDwnInfo, this, "+CDwnInfo::Signal (wChg=%04lX)", wChg);

    if (_pDwnCtxHead)
    {
        EnterCriticalSection();

        for (CDwnCtx * pDwnCtx = _pDwnCtxHead; pDwnCtx;
                pDwnCtx = pDwnCtx->_pDwnCtxNext)
        {
            pDwnCtx->Signal(wChg);
        }

        LeaveCriticalSection();
    }

    PerfDbgLog(tagDwnInfo, this, "-CDwnInfo::Signal");
}

void
CDwnInfo::SetLoad(CDwnCtx * pDwnCtx, BOOL fLoad, BOOL fReload,
    DWNLOADINFO * pdli)
{
    PerfDbgLog2(tagDwnInfo, this, "+CDwnInfo::SetLoad (fLoad=%d,fReload=%d)", fLoad, fReload);

    CDwnLoad * pDwnLoadOld = NULL;
    CDwnLoad * pDwnLoadNew = NULL;
    HRESULT hr = S_OK;

    Assert(!EnteredCriticalSection());

    EnterCriticalSection();

    int cLoad = fReload ? (pDwnCtx->_fLoad ? 0 : 1) : (fLoad ? 1 : -1);

    if (cLoad == 0 && !(TstFlags(DWNLOAD_ERROR | DWNLOAD_STOPPED)))
        goto Cleanup;

    Assert(!(_cLoad == 0 && cLoad == -1));

    _cLoad += cLoad;
    pDwnCtx->_fLoad = fLoad;

    #if DBG==1
    {
        UINT        cLoad    = 0;
        CDwnCtx *   pDwnCtxT = _pDwnCtxHead;

        for (; pDwnCtxT; pDwnCtxT = pDwnCtxT->_pDwnCtxNext)
        {
            cLoad += !!pDwnCtxT->_fLoad;
        }

        AssertSz(cLoad == _cLoad, "CDwnInfo _cLoad is inconistent with "
            "sum of CDwnCtx _fLoad");
    }
    #endif

    if (    (cLoad  > 0 && _cLoad == 1 && !TstFlags(DWNLOAD_COMPLETE))
        ||  (cLoad == 0 && _cLoad  > 0))
    {
        if (!TstFlags(DWNLOAD_NOTLOADED))
        {
            Abort(E_ABORT, &pDwnLoadOld);
            Reset();
        }
        else
        {
            StartProgress();
        }

        Assert(_pDwnLoad == NULL);

        UpdFlags(DWNLOAD_MASK, DWNLOAD_LOADING);

        hr = THR(NewDwnLoad(&_pDwnLoad));

        if (hr == S_OK)
            hr = THR(_pDwnLoad->Init(pdli, this));

        if (hr == S_OK)
        {
            pDwnLoadNew = _pDwnLoad;
            pDwnLoadNew->AddRef();
        }
        else
        {
            Abort(hr, &pDwnLoadOld);
        }
    }
    else if (cLoad < 0 && _cLoad == 0)
    {
        Abort(S_OK, &pDwnLoadOld);
    }

Cleanup:
    LeaveCriticalSection();

    Assert(!EnteredCriticalSection());

    if (pDwnLoadOld)
        pDwnLoadOld->Release();

    if (pDwnLoadNew)
    {
        pDwnLoadNew->SetCallback();
        pDwnLoadNew->Release();
    }
            
    PerfDbgLog(tagDwnInfo, this, "-CDwnInfo::SetLoad");
}

void
CDwnInfo::OnLoadDone(CDwnLoad * pDwnLoad, HRESULT hrErr)
{
    PerfDbgLog1(tagDwnInfo, this, "+CDwnInfo::OnLoadDone (hrErr=%lX)", hrErr);

    Assert(!EnteredCriticalSection());
    
    EnterCriticalSection();

    if (pDwnLoad == _pDwnLoad)
    {
        OnLoadDone(hrErr);
        _pDwnLoad = NULL;
    }
    else
    {
        pDwnLoad = NULL;
    }

    LeaveCriticalSection();

    if (pDwnLoad)
        pDwnLoad->Release();

    PerfDbgLog(tagDwnInfo, this, "-CDwnInfo::OnLoadDone");
}

void
CDwnInfo::Abort(HRESULT hrErr, CDwnLoad ** ppDwnLoad)
{
    PerfDbgLog1(tagDwnInfo, this, "+CDwnInfo::Abort (hrErr=%lX)", hrErr);

    Assert(EnteredCriticalSection());

    if (TstFlags(DWNLOAD_LOADING))
    {
        UpdFlags(DWNLOAD_MASK, hrErr ? DWNLOAD_ERROR : DWNLOAD_STOPPED);
        Signal(IMGCHG_COMPLETE);
    }

    *ppDwnLoad = _pDwnLoad;
    _pDwnLoad  = NULL;

    PerfDbgLog(tagDwnInfo, this, "-CDwnInfo::Abort");
}

HRESULT
CDwnInfo::AddProgSink(IProgSink * pProgSink)
{
    PerfDbgLog(tagDwnInfo, this, "+CDwnInfo::AddProgSink");

    Assert(EnteredCriticalSection());
    Assert(!_fPassive);

    SINKENTRY * pSinkEntry  = _arySink;
    UINT        cSink       = _arySink.Size();
    DWORD       dwCookie;
    HRESULT     hr = S_OK;

    for (; cSink > 0; --cSink, ++pSinkEntry)
    {
        if (pSinkEntry->pProgSink == pProgSink)
        {
            pSinkEntry->ulRefs += 1;
            goto Cleanup;
        }
    }

    hr = THR(_arySink.AppendIndirect(NULL, &pSinkEntry));
    if (hr)
        goto Cleanup;

    // Don't add the progress if we're still at the (nonpending) NOTLOADED state
    
    if (!TstFlags(DWNLOAD_NOTLOADED))
    {
        hr = THR(pProgSink->AddProgress(GetProgSinkClass(), &dwCookie));

        if (hr == S_OK && _pDwnLoad)
        {
            hr = THR(_pDwnLoad->RequestProgress(pProgSink, dwCookie));

            if (hr)
            {
                pProgSink->DelProgress(dwCookie);
                dwCookie = 0;
            }
        }
    }
    else
    {
        dwCookie = 0; // not a valid cookie
    }

    if (hr)
    {
        _arySink.Delete(_arySink.Size() - 1);
        goto Cleanup;
    }
    
    pSinkEntry->pProgSink = pProgSink;
    pSinkEntry->ulRefs    = 1;
    pSinkEntry->dwCookie  = dwCookie;
    pProgSink->AddRef();

Cleanup:
    PerfDbgLog1(tagDwnInfo, this, "-CDwnLoad::AddProgSink (hr=%lX)", hr);
    RRETURN(hr);
}

void
CDwnInfo::StartProgress()
{
    SINKENTRY * pSinkEntry  = _arySink;
    UINT        cSink       = _arySink.Size();
    HRESULT     hr;

    Assert(TstFlags(DWNLOAD_NOTLOADED));
    
    for (; cSink; --cSink, ++pSinkEntry)
    {
        Assert(pSinkEntry->ulRefs && !pSinkEntry->dwCookie);
        
        hr = THR(pSinkEntry->pProgSink->AddProgress(GetProgSinkClass(), &(pSinkEntry->dwCookie)));

        if (hr == S_OK && _pDwnLoad)
        {
            hr = THR(_pDwnLoad->RequestProgress(pSinkEntry->pProgSink, pSinkEntry->dwCookie));

            if (hr)
            {
                pSinkEntry->pProgSink->DelProgress(pSinkEntry->dwCookie);
                pSinkEntry->dwCookie = 0;
            }
        }
    }
}


void
CDwnInfo::DelProgSink(IProgSink * pProgSink)
{
    PerfDbgLog(tagDwnInfo, this, "+CDwnInfo::DelProgSink");

    Assert(EnteredCriticalSection());

    SINKENTRY * pSinkEntry = _arySink;
    UINT cSink = _arySink.Size();

    for (; cSink > 0; --cSink, ++pSinkEntry)
    {
        if (pSinkEntry->pProgSink == pProgSink)
        {
            if (--pSinkEntry->ulRefs == 0)
            {
                if (pSinkEntry->dwCookie)
                    pProgSink->DelProgress(pSinkEntry->dwCookie);
                pProgSink->Release();
                _arySink.Delete(_arySink.Size() - cSink);
            }
            break;
        }
    }

    PerfDbgLog(tagDwnInfo, this, "-CDwnInfo::DelProgSink");
}

HRESULT
CDwnInfo::SetProgress(DWORD dwFlags, DWORD dwState,
    LPCTSTR pch, DWORD dwIds, DWORD dwPos, DWORD dwMax)
{
    if (dwFlags && _arySink.Size())
    {
        EnterCriticalSection();

        SINKENTRY * pSinkEntry = _arySink;
        UINT cSink = _arySink.Size();

        for (; cSink > 0; --cSink, ++pSinkEntry)
        {
            pSinkEntry->pProgSink->SetProgress(pSinkEntry->dwCookie,
                dwFlags, dwState, pch, dwIds, dwPos, dwMax);
        }

        LeaveCriticalSection();
    }

    return S_OK;
}


// CDwnLoad ----------------------------------------------------------------

CDwnLoad::~CDwnLoad()
{
    PerfDbgLog(tagDwnLoad, this, "+CDwnLoad::~CDwnLoad");

    if (_pDwnInfo)
        _pDwnInfo->SubRelease();

    if (_pDwnBindData)
        _pDwnBindData->Release();

    if (_pDownloadNotify)
        _pDownloadNotify->Release();

    PerfDbgLog(tagDwnLoad, this, "-CDwnLoad::~CDwnLoad");
}

HRESULT
CDwnLoad::Init(DWNLOADINFO * pdli, CDwnInfo * pDwnInfo,
    UINT idsLoad, DWORD dwFlagsExtra)
{
    PerfDbgLog(tagDwnLoad, this, "+CDwnLoad::Init");
    
    HRESULT hr;
    TCHAR *pchAlloc = NULL;
    const TCHAR *pchUrl;

    Assert(!_pDwnInfo && !_pDwnBindData);
    Assert(!_pDownloadNotify);

    _cDone    = 1;
    _idsLoad  = idsLoad;
    _pDwnInfo = pDwnInfo;
    _pDwnInfo->SubAddRef();

    SetPcs(_pDwnInfo->GetPcs());

    // Only notify IDownloadNotify if load is _NOT_ from
    // an IStream, an existing bind context, or client-supplied data
    
    _pDownloadNotify = pdli->pDwnDoc && !pdli->pstm && !pdli->pbc && !pdli->fClientData ? pdli->pDwnDoc->GetDownloadNotify() : NULL;

    if (_pDownloadNotify)
    {
        _pDownloadNotify->AddRef();

        pchUrl = pdli->pchUrl;
        
        // If all we have is a moniker, we can try to extract the URL anyway
        if (!pchUrl && pdli->pmk)
        {
            hr = THR(pdli->pmk->GetDisplayName(NULL, NULL, &pchAlloc));
            if (hr)
                goto Cleanup;

            pchUrl = pchAlloc;
        }
        
//$ WIN64: IDownloadNotify::DownloadStart needs a DWORD_PTR as second argument

        hr = THR_NOTRACE(_pDownloadNotify->DownloadStart(pchUrl, (DWORD)(DWORD_PTR)this, pDwnInfo->GetType(), 0));
        if (hr)
            goto Cleanup;
    }

    hr = THR(NewDwnBindData(pdli, &_pDwnBindData, dwFlagsExtra));
    if( hr )
        goto Cleanup;

    // initial guess for security based on url (may be updated in onbindheaders)
    _pDwnInfo->SetSecFlags(_pDwnBindData->GetSecFlags());

Cleanup:
    CoTaskMemFree(pchAlloc);
    PerfDbgLog1(tagDwnLoad, this, "-CDwnLoad::Init (hr=%lX)", hr);
    RRETURN(hr);
}

void
CDwnLoad::SetCallback()
{
    PerfDbgLog(tagDwnLoad, this, "+CDwnLoad::SetCallback");

    _pDwnBindData->SetCallback(this);

    PerfDbgLog(tagDwnLoad, this, "-CDwnLoad::SetCallback");
}

void
CDwnLoad::OnBindCallback(DWORD dwFlags)
{
    PerfDbgLog1(tagDwnLoad, this, "+CDwnLoad::OnBindCallback (dwFlags=%04lX)", dwFlags);

    HRESULT hr = S_OK;

    Assert(!EnteredCriticalSection());
    
    if (dwFlags & DBF_PROGRESS)
    {
        DWNPROG DwnProg;

        _pDwnBindData->GetProgress(&DwnProg);

        hr = THR(OnBindProgress(&DwnProg));
        if (hr)
            goto Cleanup;
    }

    if (dwFlags & DBF_REDIRECT)
    {
        hr = THR(OnBindRedirect(_pDwnBindData->GetRedirect(), _pDwnBindData->GetMethod()));
        if (hr)
            goto Cleanup;
    }

    if (dwFlags & DBF_HEADERS)
    {
        _pDwnBindData->AddToPrivacyList();

        hr = THR(OnBindHeaders());
        if (hr)
            goto Cleanup;
    }

    if (dwFlags & DBF_MIME)
    {
        hr = THR(OnBindMime(_pDwnBindData->GetMimeInfo()));
        if (hr)
            goto Cleanup;
    }

    if (dwFlags & DBF_DATA)
    {
        hr = THR(OnBindData());
        if (hr)
            goto Cleanup;
    }

Cleanup:

    if (FAILED(hr))
    {
        if (!_fDwnBindTerm)
        {
            _pDwnBindData->Disconnect();
            _pDwnBindData->Terminate(hr);
        }

        dwFlags |= DBF_DONE;
    }

    if (dwFlags & DBF_DONE)
    {               
        OnBindDone(_pDwnBindData->GetBindResult());
    }

    PerfDbgLog1(tagDwnLoad, this, "-CDwnLoad::OnBindCallback (hr=%lX)", hr);
}

void
CDwnLoad::Passivate()
{
    PerfDbgLog(tagDwnLoad, this, "+CDwnLoad::Passivate");

    _fPassive = TRUE;
    
    if (_pDwnBindData && !_fDwnBindTerm)
    {
        _pDwnBindData->Disconnect();
        _pDwnBindData->Terminate(E_ABORT);
    }

    super::Passivate();

    PerfDbgLog(tagDwnLoad, this, "-CDwnLoad::Passivate");
}

HRESULT
CDwnLoad::RequestProgress(IProgSink * pProgSink, DWORD dwCookie)
{
    HRESULT hr;
    
    hr = THR(pProgSink->SetProgress(dwCookie,
            PROGSINK_SET_STATE|PROGSINK_SET_TEXT|PROGSINK_SET_IDS|
            PROGSINK_SET_POS|PROGSINK_SET_MAX,
            _dwState, GetProgText(), _dwIds, _dwPos, _dwMax));

    if (hr)
        goto Cleanup;

Cleanup:
    RRETURN(hr);
}

HRESULT
CDwnLoad::OnBindProgress(DWNPROG * pDwnProg)
{
    PerfDbgLog(tagDwnLoad, this, "+CDwnLoad::OnBindProgress");

    DWORD   dwFlags = 0;
    DWORD   dwState = _dwState;
    DWORD   dwPos   = _dwPos;
    DWORD   dwMax   = _dwMax;
    UINT    dwIds   = _dwIds;

    if (_fPassive)
        goto Cleanup;

    switch (pDwnProg->dwStatus)
    {
        case BINDSTATUS_FINDINGRESOURCE:
        case BINDSTATUS_CONNECTING:
            dwState  = PROGSINK_STATE_CONNECTING;
            dwIds    = _idsLoad;
            break;

        case BINDSTATUS_BEGINDOWNLOADDATA:
        case BINDSTATUS_DOWNLOADINGDATA:
        case BINDSTATUS_ENDDOWNLOADDATA:
            dwState  = PROGSINK_STATE_LOADING;
            dwIds    = _idsLoad;
            dwPos    = pDwnProg->dwPos;
            dwMax    = pDwnProg->dwMax;

            if (    _dwState != PROGSINK_STATE_LOADING
                &&  _pDwnBindData->GetRedirect())
            {
                // Looks like we got redirected somewhere else.  Force the
                // progress text to get recalculated.

                _dwIds = 0;
            }

            break;

        default:
            goto Cleanup;
    }

    if (_dwState != dwState)
    {
        _dwState = dwState;
        dwFlags |= PROGSINK_SET_STATE;
    }

    if (_dwPos != dwPos)
    {
        _dwPos = dwPos;
        dwFlags |= PROGSINK_SET_POS;
    }

    if (_dwMax != dwMax)
    {
        _dwMax = dwMax;
        dwFlags |= PROGSINK_SET_MAX;
    }

    if (_dwIds != dwIds)
    {
        _dwIds = dwIds;
        dwFlags |= PROGSINK_SET_TEXT | PROGSINK_SET_IDS;
    }

    if (dwFlags)
    {
        const TCHAR *pch = (dwFlags & PROGSINK_SET_TEXT) ? GetProgText() : NULL;
        
        _pDwnInfo->SetProgress(dwFlags, _dwState, pch, _dwIds, _dwPos, _dwMax);
    }
    
Cleanup:
    PerfDbgLog(tagDwnLoad, this, "-CDwnLoad::OnBindProgress");
    return(S_OK);
}

LPCTSTR
CDwnLoad::GetProgText()
{
    if (_dwState == PROGSINK_STATE_LOADING)
    {
        LPCTSTR pch = _pDwnBindData->GetRedirect();
        if (pch)
            return(pch);
    }

    return(GetUrl());
}

void
CDwnLoad::OnDone(HRESULT hrErr)
{
    PerfDbgLog1(tagDwnLoad, this, "+CDwnLoad::OnDone (hrErr=%lX)", hrErr);

    if (InterlockedDecrement(&_cDone) == 0)
    {
        if (_pDownloadNotify)
        {
//$ WIN64: IDownloadNotify::DownloadComplete needs a DWORD_PTR as first argument
             THR_NOTRACE(_pDownloadNotify->DownloadComplete((DWORD)(DWORD_PTR)this, hrErr, 0));
        }
             
        _hrErr = hrErr;
        _pDwnInfo->OnLoadDone(this, hrErr);
    }

    PerfDbgLog(tagDwnLoad, this, "-CDwnLoad::OnDone");
}

// AnsiToWideTrivial ----------------------------------------------------------

void
AnsiToWideTrivial(const CHAR * pchA, WCHAR * pchW, LONG cch)
{
    for (; cch >= 0; --cch)
        *pchW++ = *pchA++;
}

// MIMEINFO -------------------------------------------------------------------

NEWIMGTASKFN NewImgTaskGif;
NEWIMGTASKFN NewImgTaskJpg;
NEWIMGTASKFN NewImgTaskBmp;
#ifndef NO_ART
NEWIMGTASKFN NewImgTaskArt;
#endif // ndef WIN16
NEWIMGTASKFN NewImgTaskXbm;
#ifndef NO_METAFILE
NEWIMGTASKFN NewImgTaskWmf;
NEWIMGTASKFN NewImgTaskEmf;
#endif // NO_METAFILE
#if !defined(WINCE) && !defined(WIN16)
NEWIMGTASKFN NewImgTaskPlug;
#endif // WINCE
NEWIMGTASKFN NewImgTaskIco;

MIMEINFO g_rgMimeInfo[] =
{
    { 0, CFSTR_MIME_HTML,         0,               0 },
    { 0, CFSTR_MIME_TEXT,         0,               0 },
    { 0, TEXT("text/x-component"),0,             0 },
    { 0, CFSTR_MIME_GIF,          NewImgTaskGif,   IDS_SAVEPICTUREAS_GIF },
    { 0, CFSTR_MIME_JPEG,         NewImgTaskJpg,   IDS_SAVEPICTUREAS_JPG },
    { 0, CFSTR_MIME_PJPEG,        NewImgTaskJpg,   IDS_SAVEPICTUREAS_JPG },
    { 0, CFSTR_MIME_BMP,          NewImgTaskBmp,   IDS_SAVEPICTUREAS_BMP },
#ifndef NO_ART
    { 0, CFSTR_MIME_X_ART,        NewImgTaskArt,   IDS_SAVEPICTUREAS_ART },
    { 0, TEXT("image/x-art"),     NewImgTaskArt,   IDS_SAVEPICTUREAS_ART },
#endif // ndef NO_ART
    { 0, CFSTR_MIME_XBM,          NewImgTaskXbm,   IDS_SAVEPICTUREAS_XBM },
    { 0, CFSTR_MIME_X_BITMAP,     NewImgTaskXbm,   IDS_SAVEPICTUREAS_XBM },
#ifndef NO_METAFILE
    { 0, CFSTR_MIME_X_WMF,        NewImgTaskWmf,   IDS_SAVEPICTUREAS_WMF },
    { 0, CFSTR_MIME_X_EMF,        NewImgTaskEmf,   IDS_SAVEPICTUREAS_EMF },
#endif // NO_METAFILE
    { 0, CFSTR_MIME_AVI,          0,               IDS_SAVEPICTUREAS_AVI },
    { 0, CFSTR_MIME_X_MSVIDEO,    0,               IDS_SAVEPICTUREAS_AVI },
    { 0, CFSTR_MIME_MPEG,         0,               IDS_SAVEPICTUREAS_MPG },
    { 0, CFSTR_MIME_QUICKTIME,    0,               IDS_SAVEPICTUREAS_MOV },
    { 0, CFSTR_MIME_HTA,          0,               0 },
#ifndef _MAC
    { 0, CFSTR_MIME_X_PNG,      NewImgTaskPlug,  IDS_SAVEPICTUREAS_PNG },
    { 0, TEXT("image/png"),     NewImgTaskPlug,  IDS_SAVEPICTUREAS_PNG },
    { 0, TEXT("image/x-icon"),  NewImgTaskIco,   IDS_SAVEPICTUREAS_BMP },
#endif // _MAC
};

const LPCTSTR g_pchWebviewMimeWorkaround = _T("text/webviewhtml");


#define MIME_TYPE_COUNT         ARRAY_SIZE(g_rgMimeInfo)

#if !defined(WINCE) && !defined(WIN16)
const MIMEINFO g_miImagePlug =
    { 0, _T("image/x-ms-plug"), NewImgTaskPlug,  0 };
#endif

const LPCSTR g_rgpchMimeType[MIME_TYPE_COUNT] =
{
    "text/html",
    "text/plain",
    "text/x-component",
    "image/gif",
    "image/jpeg",
    "image/pjpeg",
    "image/bmp",
#ifndef NO_ART
    "image/x-jg",
    "image/x-art",
#endif // ndef NO_ART
    "image/xbm",
    "image/x-xbitmap",
#ifndef NO_METAFILE
    "image/x-wmf",
    "image/x-emf",
#endif // NO_METAFILE
    "video/avi",
    "video/x-msvideo",
    "video/mpeg",
    "video/quicktime",
    "application/hta",
#ifndef _MAC
    "image/x-png",
    "image/png",
    "image/x-icon",
#endif // _MAC
};

const MIMEINFO * const g_pmiTextHtml       = &g_rgMimeInfo[0];
const MIMEINFO * const g_pmiTextPlain      = &g_rgMimeInfo[1];
const MIMEINFO * const g_pmiTextComponent  = &g_rgMimeInfo[2];

#if !defined(WINCE) && !defined(WIN16)
const MIMEINFO * const g_pmiImagePlug = &g_miImagePlug;
#endif

BOOL g_fInitMimeInfo = FALSE;

void InitMimeInfo()
{
    MIMEINFO * pmi  = g_rgMimeInfo;
    const LPCSTR * ppch = g_rgpchMimeType;
    int         c    = MIME_TYPE_COUNT;
	
	Assert(ARRAY_SIZE(g_rgMimeInfo) == ARRAY_SIZE(g_rgpchMimeType));
    
    for (; --c >= 0; ++pmi, ++ppch)
    {
		Assert(*ppch);
#ifdef _MAC
        pmi->cf = RegisterMimeFormat(*ppch);
#else
        pmi->cf = (CLIPFORMAT)RegisterClipboardFormatA(*ppch);
#endif
    }

    g_fInitMimeInfo = TRUE;
}

const MIMEINFO * GetMimeInfoFromClipFormat(CLIPFORMAT cf)
{
    const MIMEINFO * pmi;
    UINT c;

    if (!g_fInitMimeInfo)
    {
        InitMimeInfo();
    }

    for (c = MIME_TYPE_COUNT, pmi = g_rgMimeInfo; c > 0; --c, ++pmi)
    {
        if (pmi->cf == cf)
        {
            return(pmi);
        }
    }

    return(NULL);
}

const MIMEINFO * GetMimeInfoFromMimeType(const TCHAR * pchMime)
{
    const  MIMEINFO * pmi;
    UINT c;

    if (!g_fInitMimeInfo)
    {
        InitMimeInfo();
    }

    for (c = MIME_TYPE_COUNT, pmi = g_rgMimeInfo; c > 0; --c, ++pmi)
    {
        if (StrCmpIC(pmi->pch, pchMime) == 0)
        {
            return(pmi);
        }
    }

    // NOTE: the following works around urlmon bug NT 175191:
    // Mime filters do not change the mime type correctly.
    // Remove this exception when that bug is fixed.
    if (StrCmpIC(g_pchWebviewMimeWorkaround, pchMime) == 0)
    {
    	return g_pmiTextHtml;
    }

    return(NULL);
}

#if !defined(WINCE) && !defined(WIN16)
const MIMEINFO * GetMimeInfoFromData(void * pvData, ULONG cbData, const TCHAR *pchProposed, CStr * pcstrMimeType)
{
    HRESULT hr;
    const MIMEINFO * pmi = NULL;
    TCHAR * pchMimeType = NULL;

    hr = FindMimeFromData(NULL,             // bind context - can be NULL                                     
                          NULL,             // url - can be null
                          pvData,           // buffer with data to sniff - can be null (pwzUrl must be valid) 
                          cbData,           // size of buffer                                                 
                          pchProposed,      // proposed mime if - can be null                                 
                          0,                // will be defined                                                
                          &pchMimeType,     // the suggested mime                                             
                          0);
    if (!hr)
    {
        pmi = GetMimeInfoFromMimeType(pchMimeType);
        if (pmi)
            goto Cleanup;
    }

    if (cbData && IsPluginImgFormat((BYTE *)pvData, cbData))
    {
        pmi = g_pmiImagePlug;
    }

    if (pcstrMimeType)
    {
        pcstrMimeType->Set(pchMimeType);
    }

Cleanup:
    CoTaskMemFree(pchMimeType);
    return(pmi);
}
#endif

// Shutdown -------------------------------------------------------------------

void DeinitDownload()
{
    if (g_pImgBitsNotLoaded)
        delete g_pImgBitsNotLoaded;

    if (g_pImgBitsMissing)
        delete g_pImgBitsMissing;

    DwnCacheDeinit();
}

//+------------------------------------------------------------------------
//
//  Helper:     GetBuiltinGenericTagDesc
//
//-------------------------------------------------------------------------

const CBuiltinGenericTagDesc g_aryBuiltinGenericTags[] = 
{
    {_T("HTC"),                 CBuiltinGenericTagDesc::TYPE_HTC,      HTC_BEHAVIOR_DESC},
    {_T("COMPONENT"),           CBuiltinGenericTagDesc::TYPE_HTC,      HTC_BEHAVIOR_DESC},
    {_T("PROPERTY"),            CBuiltinGenericTagDesc::TYPE_HTC,      HTC_BEHAVIOR_PROPERTY},
    {_T("METHOD"),              CBuiltinGenericTagDesc::TYPE_HTC,      HTC_BEHAVIOR_METHOD},
    {_T("EVENT"),               CBuiltinGenericTagDesc::TYPE_HTC,      HTC_BEHAVIOR_EVENT},
    {_T("ATTACH"),              CBuiltinGenericTagDesc::TYPE_HTC,      HTC_BEHAVIOR_ATTACH},
    {_T("PUT"),                 CBuiltinGenericTagDesc::TYPE_HTC,      HTC_BEHAVIOR_NONE},
    {_T("GET"),                 CBuiltinGenericTagDesc::TYPE_HTC,      HTC_BEHAVIOR_NONE},
    {NULL}
};

const CBuiltinGenericTagDesc *
GetBuiltinGenericTagDesc(LPTSTR pchName)
{
    const CBuiltinGenericTagDesc * pTagDesc;

    Assert (NULL == StrChr(pchName, _T(':')));

    // TODO (alexz): optimize to use assoc tables for fast hashed lookup
    for (pTagDesc = g_aryBuiltinGenericTags; pTagDesc->pchName; pTagDesc++)
    {
        if (0 == StrCmpIC(pchName, pTagDesc->pchName))
        {
            return pTagDesc;
        }
    }

    return GetBuiltinLiteralGenericTagDesc(pchName);
}

//+------------------------------------------------------------------------
//
//  Helper:     GetBuiltinLiteralGenericTagDesc
//
//-------------------------------------------------------------------------

const CBuiltinGenericTagDesc g_aryBuiltinLiteralGenericTags[] = 
{
    {_T("XML"),     CBuiltinGenericTagDesc::TYPE_OLE, {0x379E501F, 0xB231, 0x11d1, 0xad, 0xc1, 0x00, 0x80, 0x5F, 0xc7, 0x52, 0xd8}},
    {NULL}
};

const CBuiltinGenericTagDesc *
GetBuiltinLiteralGenericTagDesc(LPTSTR pchName, LONG cchName)
{
    const CBuiltinGenericTagDesc * pTagDesc;

    if (-1 != cchName)
    {
        // note that (TRUE == _tcsnipre(_T("XML"), 3, pchName, cchName)) will not work correctly here
        // (if pchName is XML:NAMESPACE for example)
        for (pTagDesc = g_aryBuiltinLiteralGenericTags; pTagDesc->pchName; pTagDesc++)
        {
            if ((LONG)_tcslen(pTagDesc->pchName) == cchName &&
                0 == StrCmpNIC(pTagDesc->pchName, pchName, cchName))
            {
                return pTagDesc;
            }
        }
    }
    else
    {
        for (pTagDesc = g_aryBuiltinLiteralGenericTags; pTagDesc->pchName; pTagDesc++)
        {
            if (0 == StrCmpIC(pTagDesc->pchName, pchName))
            {
                return pTagDesc;
            }
        }
    }
    return NULL;
}

#define HDR_LANGUAGE     _T("Accept-Language:")
#define CRLF             _T("\x0D\x0A")

void
GetHeadersAndPostData(CDwnBindInfo * pDwnBindInfo,
                      BYTE ** ppPostData,
                      DWORD * pcbPostData,
                      LPTSTR * ppchHeaders)
{
    HRESULT hr;
    CDwnPost * pDwnPost = pDwnBindInfo ? pDwnBindInfo->GetDwnPost() : NULL;

    *ppPostData = NULL;
    *pcbPostData = 0;
    *ppchHeaders = NULL;

    if (pDwnPost)
    {
        ULONG cItems = pDwnPost->GetItemCount();
        CPostItem * pItems = pDwnPost->GetItems();

        if (cItems > 0 && pItems->_ePostDataType == POSTDATA_LITERAL)
        {
            *ppPostData = (BYTE *) pItems->_pszAnsi;
            *pcbPostData = strlen(pItems->_pszAnsi) + 1;
        }
    }

    if (pDwnBindInfo)
    {
        TCHAR   achNull[1];
        TCHAR * pchAdditionalHeaders = NULL;

        achNull[0] = 0;
        hr = THR(pDwnBindInfo->BeginningTransaction(achNull, achNull, 0, &pchAdditionalHeaders));
        if (hr)
            return;

        if (pchAdditionalHeaders)
        {
            TCHAR * pchHeaders;
            DWORD cchHeaders;
            LPTSTR pchNext;
            LPTSTR pchLine;
            LPTSTR pchLast;

            cchHeaders = lstrlen(pchAdditionalHeaders) + 1;

            hr = THR(MemAllocString(Mt(GetHeadersAndPostData), pchAdditionalHeaders, &pchHeaders));
            if (hr)
                return;

            StrCpyN(pchHeaders, pchAdditionalHeaders, cchHeaders);
            pchLine = pchHeaders;
            pchLast = pchHeaders + lstrlen(pchHeaders);
            while (pchLine < pchLast)
            {
                pchNext = StrStrI(pchLine, CRLF);
                if (pchNext == NULL)
                {
                    // All Headers must be terminated in CRLF!
                    pchLine[0] = '\0';
                    break;
                }
                pchNext += 2;
                if (!StrCmpNI(pchLine, HDR_LANGUAGE, 16))
                {
                    MoveMemory(pchLine, pchNext, ((pchLast - pchNext) + 1) * sizeof(TCHAR));
                    break;
                }
                pchLine = pchNext;
            }

            // Don't include empty headers
            if (pchHeaders[0] == '\0')
            {
                MemFreeString(pchHeaders);
                pchHeaders = NULL;
            }

            CoTaskMemFree(pchAdditionalHeaders);
            *ppchHeaders = pchHeaders;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\download\htmctx.cxx ===
//+---------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1994-1995
//
//  File:       htmctx.cxx
//
//  Contents:   CHtmParseCtx derivatives for parsing ROOT, HEAD, etc
//
//----------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_HTM_HXX_
#define X_HTM_HXX_
#include "htm.hxx"
#endif

#ifndef X_COMMENT_HXX_
#define X_COMMENT_HXX_
#include "comment.hxx"
#endif

#ifndef X_FORMKRNL_HXX_
#define X_FORMKRNL_HXX_
#include "formkrnl.hxx"
#endif

#ifndef X_FRAME_HXX_
#define X_FRAME_HXX_
#include "frame.hxx"
#endif

#ifndef X_FRAMESET_HXX_
#define X_FRAMESET_HXX_
#include "frameset.hxx"
#endif

#ifndef X_HEDELEMS_HXX_
#define X_HEDELEMS_HXX_
#include "hedelems.hxx"
#endif

#ifndef X_INPUTTXT_HXX_
#define X_INPUTTXT_HXX_
#include "inputtxt.hxx"
#endif

#ifndef X_TEXTAREA_HXX_
#define X_TEXTAREA_HXX_
#include "textarea.hxx"
#endif

#ifndef X_TABLE_HXX_
#define X_TABLE_HXX_
#include "table.hxx"
#endif

#ifndef X_ESCRIPT_HXX_
#define X_ESCRIPT_HXX_
#include "escript.hxx"
#endif

#ifndef X_HTC_HXX_
#define X_HTC_HXX_
#include "htc.hxx"
#endif

#ifndef X_ESTYLE_HXX_
#define X_ESTYLE_HXX_
#include "estyle.hxx"
#endif

#ifndef X_ESELECT_HXX_
#define X_ESELECT_HXX_
#include "eselect.hxx"
#endif

#ifndef X_EOPTION_HXX_
#define X_EOPTION_HXX_
#include "eoption.hxx"
#endif

#ifndef X_PROPBAG_HXX_
#define X_PROPBAG_HXX_
#include "propbag.hxx"
#endif

#ifndef X_EOBJECT_HXX_
#define X_EOBJECT_HXX_
#include "eobject.hxx"
#endif

#ifndef X_GENERIC_HXX_
#define X_GENERIC_HXX_
#include "generic.hxx"
#endif

#ifndef X_ENOSHOW_HXX_
#define X_ENOSHOW_HXX_
#include "enoshow.hxx"
#endif

#ifndef X_LAYOUT_HXX_
#define X_LAYOUT_HXX_
#include "layout.hxx"
#endif

#ifndef X_BUFFER_HXX_
#define X_BUFFER_HXX_
#include "buffer.hxx"
#endif

#ifndef X_CBUFSTR_HXX_
#define X_CBUFSTR_HXX_
#include "cbufstr.hxx"
#endif

ExternTag(tagParse);

MtDefine(CHtmParseCtx, Dwn, "CHtmParseCtx")
MtDefine(CHtmParseCtx_apNodeStack_pv, Dwn, "CHtmParseCtx::EndElement apNodeStack::_pv")
MtDefine(CHtmSelectHackBaseCtx_apNodeStack_pv, Dwn, "CHtmSelectHackBaseCtx::EndElement apNodeStack::_pv")
MtDefine(CHtmOutsideParseCtx, Dwn, "CHtmOutsideParseCtx")
MtDefine(CHtmCommentParseCtx, Dwn, "CHtmCommentParseCtx")
MtDefine(CHtmNoShowParseCtx, Dwn, "CHtmNoShowParseCtx")
MtDefine(CHtmTitleParseCtx, Dwn, "CHtmTitleParseCtx")
MtDefine(CHtmTextareaParseCtx, Dwn, "CHtmTextareaParseCtx")
MtDefine(CHtmStyleParseCtx, Dwn, "CHtmStyleParseCtx")
MtDefine(CHtmScriptParseCtx, Dwn, "CHtmScriptParseCtx")
MtDefine(CHtmGenericParseCtx, Dwn, "CHtmGenericParseCtx")
MtDefine(CHtmFramesetParseCtx, Dwn, "CHtmFramesetParseCtx")
MtDefine(CHtmSelectParseCtx, Dwn, "CHtmSelectParseCtx")
MtDefine(CHtmIframeParseCtx, Dwn, "CHtmIframeParseCtx")
MtDefine(CHtmFrameParseCtx, Dwn, "CHtmFrameParseCtx")
MtDefine(CHtmObjectParseCtx, Dwn, "CHtmObjectParseCtx")
MtDefine(CHtmObjectParseCtxAddTag, Dwn, "CObjectElement::PARAMBINDING strings")

const ELEMENT_TAG s_atagEmpty[] = {ETAG_NULL};

//+------------------------------------------------------------------------
//
//  CHtmParseCtx::AddSource
//
//  The contract for AddSource: we must extract the specified number of
//  chars from the source stream.
//
//-------------------------------------------------------------------------
HRESULT
CHtmParseCtx::AddSource(CHtmTag *pht)
{
    HRESULT hr;
    
    hr = THR(pht->GetHtmTagStm()->SkipSource(pht->GetSourceCch()));
    if (hr)
        goto Cleanup;

Cleanup:
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  CHtmCommentParseCtx
//
//  The top-level context for the COMMENT element
//
//-------------------------------------------------------------------------

class CHtmCommentParseCtx : public CHtmParseCtx
{
public:
    typedef CHtmParseCtx super;

    DECLARE_MEMCLEAR_NEW_DELETE(Mt(CHtmCommentParseCtx))
    CHtmCommentParseCtx(CHtmParseCtx *phpxParent, CElement *pelTop);
    virtual ~CHtmCommentParseCtx();

    virtual HRESULT AddText(CTreeNode *pNode, TCHAR *pch, ULONG cch, BOOL fAscii);
    virtual HRESULT Init();

#if DBG == 1
    virtual HRESULT BeginElement(CTreeNode **ppNodeNew, CElement *pel, CTreeNode *pNodeCur, BOOL fEmpty) { Assert(0); return super::BeginElement(ppNodeNew, pel, pNodeCur, fEmpty); }
    virtual HRESULT EndElement(CTreeNode **ppNodeNew, CTreeNode *pNodeCur, CTreeNode *pNodeEnd) { Assert(0); return super::EndElement(ppNodeNew, pNodeCur, pNodeEnd); }
#endif

private:

    CCommentElement *_pelComment;
};

//+------------------------------------------------------------------------
//
//  Function:   CreateHtmCommentParseCtx
//
//  Synopsis:   Factory
//
//-------------------------------------------------------------------------
HRESULT CreateHtmCommentParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse)
{
    CHtmParseCtx *phpx = new CHtmCommentParseCtx(phpxParent, pel);
    if (!phpx)
        return E_OUTOFMEMORY;

    *pphpx = phpx;
    return S_OK;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmCommentParseCtx::ctor
//
//  Synopsis:   first-phase construction
//
//-------------------------------------------------------------------------
CHtmCommentParseCtx::CHtmCommentParseCtx(CHtmParseCtx *phpxParent, CElement *pelTop)
    : CHtmParseCtx(phpxParent)
{
    Assert(pelTop->Tag() == ETAG_COMMENT);

    _pelComment = DYNCAST(CCommentElement, pelTop);
    _pelComment->AddRef();
    _atagReject = s_atagEmpty;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmCommentParseCtx::dtor
//
//  Synopsis:   last-phase destruction
//
//-------------------------------------------------------------------------
CHtmCommentParseCtx::~CHtmCommentParseCtx()
{
    Assert(_pelComment);
    _pelComment->Release();
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmCommentParseCtx::Init
//
//  Synopsis:   Gets Comment element ready
//
//-------------------------------------------------------------------------
HRESULT
CHtmCommentParseCtx::Init()
{
    RRETURN(_pelComment->_cstrText.Set(_T("")));
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmCommentParseCtx::AddText
//
//  Synopsis:   store Comment text
//
//-------------------------------------------------------------------------
HRESULT
CHtmCommentParseCtx::AddText(CTreeNode *pNode, TCHAR *pch, ULONG cch, BOOL fAscii)
{
    HRESULT hr;

    Assert(pNode->Element() == _pelComment);
    Assert(cch && *pch);

    hr = THR(_pelComment->_cstrText.Append(pch, cch));

    RRETURN(hr);
}


//+------------------------------------------------------------------------
//
//  CHtmNoShowParseCtx
//
//  The top-level context for the HEAD element
//
//-------------------------------------------------------------------------

class CHtmNoShowParseCtx : public CHtmParseCtx
{
public:
    typedef CHtmParseCtx super;

    DECLARE_MEMCLEAR_NEW_DELETE(Mt(CHtmNoShowParseCtx))
    CHtmNoShowParseCtx(CHtmParseCtx *phpxParent, CElement *pelTop);
    ~CHtmNoShowParseCtx();
    
    virtual HRESULT AddSource(CHtmTag *pht);
    virtual HRESULT Finish();
    
private:
    ELEMENT_TAG _atagAccept2[2];
    CBuffer2 _cbuf2Contents;
    CNoShowElement *_pelNoshow;
};

//+------------------------------------------------------------------------
//
//  Function:   CreateHtmlNoShowCtx
//
//  Synopsis:   Factory
//
//-------------------------------------------------------------------------
HRESULT CreateHtmNoShowParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse)
{
    CHtmParseCtx *phpx = new CHtmNoShowParseCtx(phpxParent, pel);
    if (!phpx)
        return E_OUTOFMEMORY;

    *pphpx = phpx;
    return S_OK;
}


//+------------------------------------------------------------------------
//
//  Member:     CHtmNoShowParseCtx::ctor
//
//  Synopsis:   first-phase construction
//
//-------------------------------------------------------------------------
CHtmNoShowParseCtx::CHtmNoShowParseCtx(CHtmParseCtx *phpxParent, CElement *pelTop)
    : CHtmParseCtx(phpxParent)
{
    Assert(pelTop->Tag() == ETAG_NOFRAMES ||
           pelTop->Tag() == ETAG_NOSCRIPT ||
           pelTop->Tag() == ETAG_NOEMBED);
    _atagAccept2[0] = pelTop->Tag();
    _atagAccept2[1] = ETAG_NULL;
    _atagAccept = _atagAccept2;
    _fDropUnknownTags = TRUE;
    
    _pelNoshow = DYNCAST(CNoShowElement, pelTop);
    _pelNoshow->AddRef();
    
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmNoShowParseCtx::dtor
//
//  Synopsis:   destructor
//
//-------------------------------------------------------------------------
CHtmNoShowParseCtx::~CHtmNoShowParseCtx()
{
    Assert(_pelNoshow);
    _pelNoshow->Release();
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmNoShowParseCtx::AddSource
//
//  Synopsis:   To keep track of stuff between <NOFRAMES> and </NOFRAMES>
//
//-------------------------------------------------------------------------
HRESULT
CHtmNoShowParseCtx::AddSource(CHtmTag *pht)
{
    HRESULT hr;
    
    hr = THR(pht->GetHtmTagStm()->ReadSource(&_cbuf2Contents, pht->GetSourceCch()));
    
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmNoShowParseCtx::Finish
//
//  Synopsis:   Transfer contents to element
//
//-------------------------------------------------------------------------
HRESULT
CHtmNoShowParseCtx::Finish()
{
    HRESULT hr = S_OK;
    
    _pelNoshow->SetContents(&_cbuf2Contents);

    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  CHtmTitleParseCtx
//
//  The top-level context for the TITLE element
//
//-------------------------------------------------------------------------

class CHtmTitleParseCtx : public CHtmSpaceParseCtx
{
public:
    typedef CHtmSpaceParseCtx super;

    DECLARE_MEMCLEAR_NEW_DELETE(Mt(CHtmTitleParseCtx))
    CHtmTitleParseCtx(CHtmParseCtx *phpxParent, CElement *pelTop);
    ~CHtmTitleParseCtx();

    virtual HRESULT AddWord(CTreeNode *pNode, TCHAR *pch, ULONG cch, BOOL fAscii);
    virtual HRESULT AddSpace(CTreeNode *pNode);
    virtual HRESULT AddCollapsedWhitespace(CTreeNode *pNode, TCHAR *pch, ULONG cch);
    virtual HRESULT Init();
    virtual HRESULT Execute();
    virtual CElement *GetMergeElement();

#if DBG == 1
    virtual HRESULT BeginElement(CTreeNode **ppNodeNew, CElement *pel, CTreeNode *pNodeCur, BOOL fEmpty) { Assert(0); return super::BeginElement(ppNodeNew, pel, pNodeCur, fEmpty); }
    virtual HRESULT EndElement(CTreeNode **ppNodeNew, CTreeNode *pNodeCur, CTreeNode *pNodeEnd) { Assert(0); return super::EndElement(ppNodeNew, pNodeCur, pNodeEnd); }
#endif

private:

    CMarkup * _pMarkup;

    enum SPACESTATE
    {
        SS_NOSPACE,
        SS_NEEDSPACE,
        SS_DIDSPACE
    };

    SPACESTATE _spacestate;

    CStr _cstrTitle;
};

//+------------------------------------------------------------------------
//
//  Function:   CreateHtmTitleParseCtx
//
//  Synopsis:   Factory
//
//-------------------------------------------------------------------------
HRESULT CreateHtmTitleParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse)
{
    CHtmParseCtx *phpx = new CHtmTitleParseCtx(phpxParent, pel);

    if (!phpx)
        return E_OUTOFMEMORY;

    *pphpx = phpx;
    return S_OK;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmTitleParseCtx::ctor
//
//  Synopsis:   first-phase construction
//
//-------------------------------------------------------------------------
CHtmTitleParseCtx::CHtmTitleParseCtx(CHtmParseCtx *phpxParent, CElement *pelTop)
    : CHtmSpaceParseCtx(phpxParent)
{
    Assert(pelTop->Tag() == ETAG_ROOT);

    _pMarkup = pelTop->GetMarkup();

    _pMarkup->AddRef();
    _fNeedExecute = TRUE;
    _atagReject = s_atagEmpty;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmTitleParseCtx::~CHtmTitleParseCtx
//
//  Synopsis:   dtor
//
//-------------------------------------------------------------------------
CHtmTitleParseCtx::~CHtmTitleParseCtx()
{
    _pMarkup->Release();
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmTitleParseCtx::Init
//
//  Synopsis:   Gets title element ready
//
//-------------------------------------------------------------------------
HRESULT
CHtmTitleParseCtx::Init()
{
    HRESULT hr;

    hr = THR(_cstrTitle.Set(_T("")));
    if (hr)
        goto Cleanup;

    hr = THR(RFill(FILL_EAT, NULL));
    if (hr)
        goto Cleanup;

Cleanup:
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmTitleParseCtx::AddText
//
//  Synopsis:   store title text
//
//-------------------------------------------------------------------------
HRESULT
CHtmTitleParseCtx::AddWord(CTreeNode *pNode, TCHAR *pch, ULONG cch, BOOL fAscii)
{
    HRESULT hr;

    Assert(cch && *pch);

    hr = THR(_cstrTitle.Append(pch, cch));

    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmTitleParseCtx::AddCollapsedWhitespace
//
//  Synopsis:   ignores collapsed whitespace
//
//-------------------------------------------------------------------------

HRESULT
CHtmTitleParseCtx::AddCollapsedWhitespace(CTreeNode *pNode, TCHAR *pch, ULONG cch)
{
    // ignore collpased whitespace
    return S_OK;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmTitleParseCtx::AddSpace
//
//  Synopsis:   store title text
//
//-------------------------------------------------------------------------
HRESULT
CHtmTitleParseCtx::AddSpace(CTreeNode *pNode)
{
    HRESULT hr;

    hr = THR(_cstrTitle.Append(_T(" ")));

    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmTitleParseCtx::GetMergeElement
//
//  Synopsis:   Element with which to merge the found tag
//
//-------------------------------------------------------------------------
CElement *
CHtmTitleParseCtx::GetMergeElement()
{
    return _pMarkup->GetTitleElement();
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmTitleParseCtx::Finish
//
//  Synopsis:   Cause UI to be updated after TITLE is complete
//
//-------------------------------------------------------------------------
HRESULT
CHtmTitleParseCtx::Execute()
{
    HRESULT hr = S_OK;
    
    CTitleElement * pElementTitle = _pMarkup->GetTitleElement();

    if (pElementTitle && !pElementTitle->GetTitle())
    {
        // TODO: SetTitle will always make the document dirty.
        // This screws up VB.  Will fix this for IE5 RTM (jbeda).
        CDoc * pDoc = pElementTitle->Doc();
        BOOL fDirty = !!pDoc->_lDirtyVersion;

        hr = THR( pElementTitle->SetTitle( _cstrTitle ) );

        if (    !fDirty
            &&  pDoc->_lDirtyVersion)
        {
            pDoc->_lDirtyVersion = 0;
        }

        if (hr)
            goto Cleanup;
    }

Cleanup:

    RRETURN( hr );
}

//+------------------------------------------------------------------------
//
//  CHtmStyleParseCtx
//
//  The top-level context for the STYLE element
//
//-------------------------------------------------------------------------

class CHtmStyleParseCtx : public CHtmParseCtx
{
public:
    typedef CHtmParseCtx super;

    DECLARE_MEMCLEAR_NEW_DELETE(Mt(CHtmStyleParseCtx))
    CHtmStyleParseCtx(CHtmParseCtx *phpxParent, CElement *pelTop);
    ~CHtmStyleParseCtx();

    virtual HRESULT AddText(CTreeNode *pNode, TCHAR *pch, ULONG cch, BOOL fAscii);
    virtual HRESULT Init();
    virtual HRESULT Finish();

#if DBG == 1
    virtual HRESULT BeginElement(CTreeNode **ppNodeNew, CElement *pel, CTreeNode *pNodeCur, BOOL fEmpty) { Assert(0); return super::BeginElement(ppNodeNew, pel, pNodeCur, fEmpty); }
    virtual HRESULT EndElement(CTreeNode **ppNodeNew, CTreeNode *pNodeCur, CTreeNode *pNodeEnd) { Assert(0); return super::EndElement(ppNodeNew, pNodeCur, pNodeEnd); }
#endif

private:

    CStyleElement *_pelStyle;
    CBuffer _cbufText;
};

//+------------------------------------------------------------------------
//
//  Function:   CreateHtmStyleCtx
//
//  Synopsis:   Factory
//
//-------------------------------------------------------------------------
HRESULT CreateHtmStyleParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse)
{
    CHtmParseCtx *phpx = new CHtmStyleParseCtx(phpxParent, pel);
    if (!phpx)
        return E_OUTOFMEMORY;

    *pphpx = phpx;
    return S_OK;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmStyleParseCtx::ctor
//
//  Synopsis:   first-phase construction
//
//-------------------------------------------------------------------------
CHtmStyleParseCtx::CHtmStyleParseCtx(CHtmParseCtx *phpxParent, CElement *pelTop)
    : CHtmParseCtx(phpxParent)
{
    Assert(pelTop->Tag() == ETAG_STYLE);

    _pelStyle = DYNCAST(CStyleElement, pelTop);
    _pelStyle->AddRef();
    _pelStyle->_fParseFinished = FALSE;
    _atagReject = s_atagEmpty;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmStyleParseCtx::~CHtmStyleParseCtx
//
//  Synopsis:   dtor
//
//-------------------------------------------------------------------------
CHtmStyleParseCtx::~CHtmStyleParseCtx()
{
    Assert(_pelStyle);
    _pelStyle->Release();
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmStyleParseCtx::Init
//
//  Synopsis:   Gets ourselves ready
//
//-------------------------------------------------------------------------
HRESULT
CHtmStyleParseCtx::Init()
{
    RRETURN(S_OK);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmStyleParseCtx::AddText
//
//  Synopsis:   store style text
//
//-------------------------------------------------------------------------
HRESULT
CHtmStyleParseCtx::AddText(CTreeNode *pNode, TCHAR *pch, ULONG cch, BOOL fAscii)
{
    Assert(pNode->Element() == _pelStyle);

    _cbufText.Append(pch, cch);

    RRETURN(S_OK);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmStyleParseCtx::Finish
//
//  Synopsis:   Fill in Style once text is complete
//
//-------------------------------------------------------------------------
HRESULT
CHtmStyleParseCtx::Finish()
{
    HRESULT hr = S_OK;

    _pelStyle->_fParseFinished = TRUE;
    if (_pelStyle->_fEnterTreeCalled)
    {
        hr = THR(_pelStyle->SetText((LPTSTR)_cbufText));
    }
    else
    {
        _pelStyle->_cstrText.Set((LPTSTR)_cbufText);
    }

    _cbufText.Clear();

    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  CHtmScriptParseCtx
//
//  The top-level context for the SCRIPT element
//
//-------------------------------------------------------------------------

class CHtmScriptParseCtx : public CHtmParseCtx
{
public:
    typedef CHtmParseCtx super;

    DECLARE_MEMCLEAR_NEW_DELETE(Mt(CHtmScriptParseCtx))
    CHtmScriptParseCtx(CHtmParseCtx *phpxParent, CElement *pelTop);
    virtual ~CHtmScriptParseCtx();

    virtual HRESULT AddText(CTreeNode *pNode, TCHAR *pch, ULONG cch, BOOL fAscii);
    virtual HRESULT Init();
    virtual HRESULT Finish();
    virtual HRESULT Execute();

#if DBG == 1
    virtual HRESULT BeginElement(CTreeNode **ppNodeNew, CElement *pel, CTreeNode *pNodeCur, BOOL fEmpty) { Assert(0); return super::BeginElement(ppNodeNew, pel, pNodeCur, fEmpty); }
    virtual HRESULT EndElement(CTreeNode **ppNodeNew, CTreeNode *pNodeCur, CTreeNode *pNodeEnd) { Assert(0); return super::EndElement(ppNodeNew, pNodeCur, pNodeEnd); }
#endif

private:

    CScriptElement *_pelScript;
    CTreeNode *_pNodeScript;
    CBuffer _cbufText;
    BOOL _fGotNodeRef;
};


//+------------------------------------------------------------------------
//
//  Function:   CreateHtmScriptCtx
//
//  Synopsis:   Factory
//
//-------------------------------------------------------------------------
HRESULT CreateHtmScriptParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse)
{
    CHtmParseCtx *phpx = new CHtmScriptParseCtx(phpxParent, pel);
    if (!phpx)
        return E_OUTOFMEMORY;

    *pphpx = phpx;
    return S_OK;
}


//+------------------------------------------------------------------------
//
//  Member:     CHtmScriptParseCtx::ctor
//
//  Synopsis:   first-phase construction
//
//-------------------------------------------------------------------------
CHtmScriptParseCtx::CHtmScriptParseCtx(CHtmParseCtx *phpxParent, CElement *pelTop)
    : CHtmParseCtx(phpxParent)
{
    Assert(pelTop->Tag() == ETAG_SCRIPT);

    _pelScript = DYNCAST(CScriptElement, pelTop);
    _pNodeScript = _pelScript->GetFirstBranch();
    _atagReject = s_atagEmpty;
    _fNeedExecute = TRUE;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmScriptParseCtx::dtor
//
//  Synopsis:   destructor
//
//-------------------------------------------------------------------------
CHtmScriptParseCtx::~CHtmScriptParseCtx()
{
    Assert(_pelScript);
    if( _fGotNodeRef )
        _pNodeScript->NodeRelease();
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmScriptParseCtx::Init
//
//  Synopsis:   Gets ourselves ready
//
//-------------------------------------------------------------------------
HRESULT
CHtmScriptParseCtx::Init()
{
    HRESULT hr = S_OK;

    hr = THR( _pNodeScript->NodeAddRef() );  // ref needed for execute
    if( hr )
        goto Cleanup;

    _fGotNodeRef = TRUE;

    _pelScript->SetParserWillExecute();

Cleanup:
    RRETURN( hr );
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmScriptParseCtx::AddText
//
//  Synopsis:   store script text
//
//-------------------------------------------------------------------------
HRESULT
CHtmScriptParseCtx::AddText(CTreeNode *pNode, TCHAR *pch, ULONG cch, BOOL fAscii)
{
    BOOL fSetText = TRUE;
    CHtmlComponent *pComponent = NULL;
    CMarkup *pMarkup = _pelScript->GetMarkup();
    Assert(pMarkup);
    Assert(pNode->Element() == _pelScript);

    if (pMarkup->HasBehaviorContext())
    {
        pComponent = pMarkup->BehaviorContext()->_pHtmlComponent;
        if (pComponent && !pComponent->_fFactoryComponent && pComponent->_pConstructor->_pelFactoryScript)
        {
            if (!_pelScript->GetAAevent())
                fSetText = FALSE;
        }
    }

    if (fSetText)
    {
        _cbufText.Append(pch, cch);
    }

    RRETURN(S_OK);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmScriptParseCtx::Finish
//
//  Synopsis:   Fill in Script once text is complete
//
//-------------------------------------------------------------------------
HRESULT
CHtmScriptParseCtx::Finish()
{
    HRESULT hr = S_OK;
    BOOL fSetText = TRUE;
    CHtmlComponent *pComponent = NULL;
    CMarkup *pMarkup = _pelScript->GetMarkup();
    Assert(pMarkup);

    if (pMarkup->HasBehaviorContext())
    {
        pComponent = pMarkup->BehaviorContext()->_pHtmlComponent;
        if (pComponent && !pComponent->_fFactoryComponent && pComponent->_pConstructor->_pelFactoryScript)
        {
            if (!_pelScript->GetAAevent())
                fSetText = FALSE;
        }
    }

    if (fSetText)
    {
        hr = THR(_pelScript->_cstrText.Set((LPTSTR)_cbufText));
    }
    else
    {
        Assert(!pComponent->_fFactoryComponent);
        Assert(pComponent->_pConstructor->_pFactoryComponent->_fClonedScript);
        Assert(pComponent->_pConstructor->_pelFactoryScript);
        Assert(pComponent->_pConstructor->_pFactoryComponent->_pMarkup == pComponent->_pConstructor->_pelFactoryScript->GetMarkup());
        Assert((LPTSTR)(pComponent->_pConstructor->_pelFactoryScript->_cstrText));
        _pelScript->_cstrText.SetPch((LPTSTR)(pComponent->_pConstructor->_pelFactoryScript->_cstrText));
        _pelScript->_fSharedCode = TRUE;
    }
    
    return hr;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmScriptParseCtx::Execute
//
//  Synopsis:   Execute inline script
//
//-------------------------------------------------------------------------
HRESULT
CHtmScriptParseCtx::Execute()
{
    Assert(_pelScript);
    
    RRETURN(_pelScript->Execute());
}

//+------------------------------------------------------------------------
//
//  CHtmGenericParseCtx
//
//  The top-level context for the Generic element
//
//-------------------------------------------------------------------------

class CHtmGenericParseCtx : public CHtmParseCtx
{
public:
    typedef CHtmParseCtx super;

    DECLARE_MEMCLEAR_NEW_DELETE(Mt(CHtmGenericParseCtx))
    CHtmGenericParseCtx(CHtmParseCtx *phpxParent, CElement *pelTop);
    virtual ~CHtmGenericParseCtx();

    virtual HRESULT AddText(CTreeNode *pNode, TCHAR *pch, ULONG cch, BOOL fAscii);
    virtual HRESULT Init();
    virtual HRESULT Finish();

private:

    CGenericElement * _pelGeneric;
    CBuffer           _cbufText;
};

//+------------------------------------------------------------------------
//
//  Function:   CreateHtmGenericCtx
//
//-------------------------------------------------------------------------

HRESULT CreateHtmGenericParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse)
{
    CHtmParseCtx *phpx = new CHtmGenericParseCtx(phpxParent, pel);
    if (!phpx)
        return E_OUTOFMEMORY;

    *pphpx = phpx;
    return S_OK;
}


//+------------------------------------------------------------------------
//
//  Member:     CHtmGenericParseCtx::constructor
//
//-------------------------------------------------------------------------

CHtmGenericParseCtx::CHtmGenericParseCtx(CHtmParseCtx *phpxParent, CElement *pelTop)
    : CHtmParseCtx(phpxParent)
{
    Assert(ETAG_GENERIC_LITERAL == pelTop->Tag());

    _pelGeneric = DYNCAST(CGenericElement, pelTop);
    _pelGeneric->AddRef();
    _atagReject = s_atagEmpty;
    _fNeedExecute = TRUE;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmGenericParseCtx::destructor
//
//-------------------------------------------------------------------------

CHtmGenericParseCtx::~CHtmGenericParseCtx()
{
    Assert(_pelGeneric);
    _pelGeneric->Release();
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmGenericParseCtx::Init
//
//-------------------------------------------------------------------------

HRESULT
CHtmGenericParseCtx::Init()
{
    HRESULT hr;

    hr = THR(_pelGeneric->_cstrContents.Set(_T("")));
    if (hr)
        RRETURN(hr);

    RRETURN(S_OK);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmGenericParseCtx::AddText
//
//-------------------------------------------------------------------------
HRESULT
CHtmGenericParseCtx::AddText(CTreeNode *pNode, TCHAR *pch, ULONG cch, BOOL fAscii)
{
    Assert(pNode->Element() == _pelGeneric);

    _cbufText.Append(pch, cch);

    RRETURN(S_OK);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmGenericParseCtx::Finish
//
//-------------------------------------------------------------------------

HRESULT
CHtmGenericParseCtx::Finish()
{
    _pelGeneric->_cstrContents.Set((LPTSTR)_cbufText);

    return S_OK;
}


//+------------------------------------------------------------------------
//
//  CHtmFramesetParseCtx
//
//  The top-level context for the HEAD element
//
//-------------------------------------------------------------------------

class CHtmFramesetParseCtx : public CHtmParseCtx
{
public:
    typedef CHtmParseCtx super;

    DECLARE_MEMCLEAR_NEW_DELETE(Mt(CHtmFramesetParseCtx))
    CHtmFramesetParseCtx(CHtmParseCtx *phpxParent, CElement *pelTop);
    ~CHtmFramesetParseCtx();

    virtual HRESULT Finish();

private:

    CFrameSetSite *_psiteFrameset;
    BOOL _fTop;
};

//+------------------------------------------------------------------------
//
//  Function:   CreateHtmlFramesetCtx
//
//  Synopsis:   Factory
//
//-------------------------------------------------------------------------
HRESULT CreateHtmFramesetParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse)
{
    CHtmParseCtx *phpx = new CHtmFramesetParseCtx(phpxParent, pel);
    if (!phpx)
        return E_OUTOFMEMORY;

    *pphpx = phpx;
    return S_OK;
}

//+------------------------------------------------------------------------
//
//  Constant:   s_atagFramesetAccept
//
//  Synopsis:   The set of tags processed normally within a frameset.
//
//              To imitate NS, we ignore _everything_
//              except <FRAMESET> and <FRAME> tags
//              (issue: NS ignores SCRIPT. Should we?)
//
//-------------------------------------------------------------------------
const ELEMENT_TAG s_atagFramesetAccept[] = {
    ETAG_EMBED,
    ETAG_FRAME,
    ETAG_FRAMESET,
    ETAG_NOFRAMES,
//    ETAG_NOSCRIPT, // commented to fix bug 58528
//    ETAG_NOEMBED,  // commented to fix bug 58528
//    ETAG_SCRIPT,   // ignore the script tag (NS compat)
    ETAG_UNKNOWN,
//    ETAG_FORM,     // Hidden inputs in the HEAD are now handled in a new way
//    ETAG_INPUT,    //
    ETAG_NULL,
};

const ELEMENT_TAG s_atagFramesetIgnoreEnd[] = {
    ETAG_HTML,
    ETAG_NULL,
};


//+------------------------------------------------------------------------
//
//  Member:     CHtmFramesetParseCtx::ctor
//
//  Synopsis:   first-phase construction
//
//-------------------------------------------------------------------------
CHtmFramesetParseCtx::CHtmFramesetParseCtx(CHtmParseCtx *phpxParent, CElement *pelTop)
    : CHtmParseCtx(phpxParent)
{
    Assert(pelTop->Tag() == ETAG_FRAMESET);

    // no parent layout means TOP frameset - so ignore the rest of the file after my </FRAMESET>
    // (dmitryt) Note that if there IS a parent layout but it is HTML Layout 
    // (in case of Strict CSS Compat) - this still means the element is a top 
    // frameset and the rest shoudl be ignored (IE 6 bug 38662)

    CTreeNode *pParentLayoutNode = pelTop->GetUpdatedParentLayoutNode();
    
    if (!pParentLayoutNode || pParentLayoutNode->Tag() == ETAG_HTML)
    {
        _fIgnoreSubsequent = TRUE;
    }
    
    _atagIgnoreEnd  = s_atagFramesetIgnoreEnd;
    _atagAccept     = s_atagFramesetAccept;
    _fDropUnknownTags = TRUE;
    
    _psiteFrameset = DYNCAST(CFrameSetSite, pelTop);
    _psiteFrameset->AddRef();
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmFramesetParseCtx::~CHtmFramesetParseCtx
//
//  Synopsis:   dtor
//
//-------------------------------------------------------------------------
CHtmFramesetParseCtx::~CHtmFramesetParseCtx()
{
    Assert(_psiteFrameset);
    _psiteFrameset->Release();
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmFramesetParseCtx::Finish
//
//  Synopsis:   do the frameset thing...
//
//-------------------------------------------------------------------------
HRESULT
CHtmFramesetParseCtx::Finish()
{
    return S_OK;
}

//+------------------------------------------------------------------------
//
//  Frame context
//
//  The parser context for the FRAME element
//
//-------------------------------------------------------------------------

class CHtmFrameParseCtx : public CHtmParseCtx
{
public:
    typedef CHtmParseCtx super;

    DECLARE_MEMCLEAR_NEW_DELETE(Mt(CHtmFrameParseCtx))
    CHtmFrameParseCtx(CHtmParseCtx *phpxParent, CElement *pel);
    ~CHtmFrameParseCtx();
    virtual HRESULT Execute();

#if DBG == 1
    virtual HRESULT BeginElement(CTreeNode **ppNodeNew, CElement *pel, CTreeNode *pNodeCur, BOOL fEmpty) { Assert(0); return super::BeginElement(ppNodeNew, pel, pNodeCur, fEmpty); }
    virtual HRESULT EndElement(CTreeNode **ppNodeNew, CTreeNode *pNodeCur, CTreeNode *pNodeEnd) { Assert(0); return super::EndElement(ppNodeNew, pNodeCur, pNodeEnd); }
#endif
    
    CFrameElement *_psiteFrame;
};


//+------------------------------------------------------------------------
//
//  Function:   CreateHtmFrameParseCtx
//
//  Synopsis:   Factory
//
//-------------------------------------------------------------------------
HRESULT CreateHtmFrameParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse)
{
    CHtmParseCtx *phpx = new CHtmFrameParseCtx(phpxParent, pel);
    if (!phpx)
        return E_OUTOFMEMORY;

    *pphpx = phpx;
    return S_OK;
}

//+------------------------------------------------------------------------
//
//  Function:   CHtmFrameParseCtx::CHtmFrameParseCtx
//
//  Synopsis:   ctor
//
//-------------------------------------------------------------------------
CHtmFrameParseCtx::CHtmFrameParseCtx(CHtmParseCtx *phpxParent, CElement *pel)
    : CHtmParseCtx(phpxParent)
{
    _psiteFrame = DYNCAST(CFrameElement, pel);
    _psiteFrame->AddRef();
    _fNeedExecute   = TRUE;
    _fExecuteOnEof  = TRUE;
}

//+------------------------------------------------------------------------
//
//  Function:   CHtmFrameParseCtx::~CHtmFrameParseCtx
//
//  Synopsis:   dtor
//
//-------------------------------------------------------------------------
CHtmFrameParseCtx::~CHtmFrameParseCtx()
{
    Assert(_psiteFrame);
    _psiteFrame->Release();
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmFrameParseCtx::Execute
//
//  Synopsis:   instantiate
//
//-------------------------------------------------------------------------
HRESULT
CHtmFrameParseCtx::Execute()
{
    THR(_psiteFrame->CreateObject());
    return S_OK;
}


//+------------------------------------------------------------------------
//
//  Select context
//
//  The parser context for the SELECT element
//
//-------------------------------------------------------------------------

class CHtmSelectParseCtx : public CHtmSpaceParseCtx
{
public:
    typedef CHtmParseCtx super;

    DECLARE_MEMCLEAR_NEW_DELETE(Mt(CHtmSelectParseCtx))
    CHtmSelectParseCtx(CHtmParseCtx *phpxParent, CElement *pel);
    ~CHtmSelectParseCtx();        
    virtual HRESULT Init();
    virtual HRESULT AddWord(CTreeNode *pNode, TCHAR *pch, ULONG cch, BOOL fAscii);
    virtual HRESULT AddSpace(CTreeNode *pNode);
    virtual HRESULT AddCollapsedWhitespace(CTreeNode *pNode, TCHAR *pch, ULONG cch);
    virtual HRESULT BeginElement(CTreeNode **ppNodeNew, CElement *pel, CTreeNode *pNodeCur, BOOL fEmpty);
    virtual HRESULT EndElement(CTreeNode **ppNodeNew, CTreeNode *pNodeCur, CTreeNode *pNodeEnd);

    CSelectElement *_psiteSelect;
    CHtmParseCtx * _pRootCtx;
};

//+------------------------------------------------------------------------
//
//  Constant:   s_atagSelectAccept
//
//  Synopsis:   The set of tags processed normally within a select.
//
//              (issue: NS ignores SCRIPT. Should we?)
//
//-------------------------------------------------------------------------
const ELEMENT_TAG s_atagSelectAccept[] = {
    ETAG_OPTGROUP,
    ETAG_OPTION,
    ETAG_SCRIPT,
    ETAG_UNKNOWN,
    ETAG_TC,
    ETAG_TD,
    ETAG_TH,
    ETAG_TR,
    ETAG_TBODY,
    ETAG_THEAD,
    ETAG_TFOOT,
    ETAG_TABLE,
    ETAG_INPUT,
    ETAG_TEXTAREA,

    ETAG_NULL,
};

ELEMENT_TAG const s_atagSelectAlwaysEnd[] = { ETAG_SELECT, ETAG_NULL };

//+------------------------------------------------------------------------
//
//  Function:   CreateHtmSelectParseCtx
//
//  Synopsis:   Factory
//
//-------------------------------------------------------------------------
HRESULT CreateHtmSelectParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse)
{
    CHtmParseCtx *phpx = new CHtmSelectParseCtx(phpxParent, pel);
    if (!phpx)
        return E_OUTOFMEMORY;

    *pphpx = phpx;
    return S_OK;
}

//+------------------------------------------------------------------------
//
//  Function:   CHtmSelectParseCtx::CHtmSelectParseCtx
//
//  Synopsis:   ctor
//
//-------------------------------------------------------------------------
CHtmSelectParseCtx::CHtmSelectParseCtx(CHtmParseCtx *phpxParent, CElement *pel)
    : CHtmSpaceParseCtx(phpxParent)
{
    _psiteSelect = DYNCAST(CSelectElement, pel);
    _psiteSelect->AddRef();

    _atagAccept     = s_atagSelectAccept;
    _atagAlwaysEnd  = s_atagSelectAlwaysEnd;
    _fDropUnknownTags = TRUE;
}

//+------------------------------------------------------------------------
//
//  Function:   CHtmSelectParseCtx::~CHtmSelectParseCtx
//
//  Synopsis:   dtor
//
//-------------------------------------------------------------------------
CHtmSelectParseCtx::~CHtmSelectParseCtx()
{
    Assert(_psiteSelect);

    _psiteSelect->Release();
}


HRESULT
CHtmSelectParseCtx::Init()
{
    _pRootCtx = GetHpxRoot();
    
    RRETURN(_pRootCtx ? S_OK : E_FAIL);
}


//+------------------------------------------------------------------------
//
//  Member:     CHtmSelectParseCtx::BeginElement
//
//  Synopsis:   Listen to the beginning of OPTION tags and
//              eat leading whitespace
//
//-------------------------------------------------------------------------
HRESULT
CHtmSelectParseCtx::BeginElement(CTreeNode **ppNodeNew, CElement *pel, CTreeNode *pNodeCur, BOOL fEmpty)
{

    HRESULT hr;
    CTreeNode *pNode = NULL;

    hr = LFill(FILL_PUT);
    if ( hr )
        goto Cleanup;

    hr = THR(super::BeginElement(&pNode, pel, pNodeCur, fEmpty));
    if (hr)
        goto Cleanup;

    *ppNodeNew = pNode;
    pNode = NULL;

    if ( ETAG_OPTION == pel->Tag() )
    {
        hr = RFill(FILL_EAT, NULL);
        if ( hr )
            goto Cleanup;
    }
    else
    {
        hr = RFill(FILL_PUT, *ppNodeNew);
        if ( hr )
            goto Cleanup;
    }


Cleanup:

    CTreeNode::ReleasePtr(pNode);
    RRETURN(hr);
}


//+------------------------------------------------------------------------
//
//  Member:     CHtmSelectParseCtx::EndElement
//
//  Synopsis:   Listen to the end of OPTION tags, sets up the space-eating
//              for symmetry's sake
//
//-------------------------------------------------------------------------
HRESULT
CHtmSelectParseCtx::EndElement(CTreeNode **ppNodeNew, CTreeNode *pNodeCur, CTreeNode *pNodeEnd)
{
    HRESULT hr;


    
    if (ETAG_OPTION == pNodeEnd->Element()->Tag())
    {
        hr = LFill(FILL_EAT);
        if ( hr )
            goto Cleanup;
    }
    else
    {
        hr = LFill(FILL_PUT);
        if ( hr )
            goto Cleanup;
    }

    hr = THR(super::EndElement(ppNodeNew, pNodeCur, pNodeEnd));
    if (hr)
        goto Cleanup;

    hr = RFill(FILL_PUT, *ppNodeNew);
    if ( hr )
        goto Cleanup;

Cleanup:
    RRETURN(hr);
}


//+------------------------------------------------------------------------
//
//  Member:     CHtmSelectParseCtx::AddWord
//
//  Synopsis:   Listen for the space context passing in text,
//              forward it to the root
//
//-------------------------------------------------------------------------
HRESULT
CHtmSelectParseCtx::AddWord(CTreeNode *pNode, TCHAR *pch, ULONG cch, BOOL fAscii)
{
    HRESULT hr;
    
    hr = THR(_pRootCtx->AddText(pNode, pch, cch, fAscii));

    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmSelectParseCtx::AddCollapsedWhitespace
//
//  Synopsis:   Ignore collapsed whitespace
//
//-------------------------------------------------------------------------

HRESULT
CHtmSelectParseCtx::AddCollapsedWhitespace(CTreeNode *pNode, TCHAR *pch, ULONG cch)
{
    // ignore collpased whitespace
    return S_OK;
}


//+------------------------------------------------------------------------
//
//  Member:     CHtmSelectParseCtx::AddSpace
//
//  Synopsis:   Listen for the space context passing in space,
//              forward a single space to the root
//
//-------------------------------------------------------------------------
HRESULT
CHtmSelectParseCtx::AddSpace(CTreeNode *pNode)
{
    HRESULT hr;
    
    hr = THR(_pRootCtx->AddText(pNode, _T(" "), 1, TRUE));

    RRETURN(hr);
}


//+------------------------------------------------------------------------
//
//  Iframe context
//
//  The parser context for the IFRAME element
//
//-------------------------------------------------------------------------

class CHtmIframeParseCtx : public CHtmParseCtx
{
public:
    typedef CHtmParseCtx super;

    DECLARE_MEMCLEAR_NEW_DELETE(Mt(CHtmIframeParseCtx))
    CHtmIframeParseCtx(CHtmParseCtx *phpxParent, CElement *pel);
    ~CHtmIframeParseCtx();
    virtual HRESULT Finish();
    virtual HRESULT Execute();
    virtual HRESULT AddSource(CHtmTag *pht);
    
#if DBG == 1
    virtual HRESULT BeginElement(CTreeNode **ppNodeNew, CElement *pel, CTreeNode *pNodeCur, BOOL fEmpty) { Assert(0); return super::BeginElement(ppNodeNew, pel, pNodeCur, fEmpty); }
    virtual HRESULT EndElement(CTreeNode **ppNodeNew, CTreeNode *pNodeCur, CTreeNode *pNodeEnd) { Assert(0); return super::EndElement(ppNodeNew, pNodeCur, pNodeEnd); }
#endif

    CBuffer2 _cbuf2Contents;
    CIFrameElement *_psiteIframe;
};

//+------------------------------------------------------------------------
//
//  Constant:   s_atagIframeAccept
//
//  Synopsis:   The set of tags processed normally within a object.
//
//-------------------------------------------------------------------------
const ELEMENT_TAG s_atagIframeAccept[] = {
    ETAG_IFRAME,
    ETAG_NULL
};

//+------------------------------------------------------------------------
//
//  Function:   CreateHtmIframeParseCtx
//
//  Synopsis:   Factory
//
//-------------------------------------------------------------------------
HRESULT CreateHtmIframeParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse)
{
    CHtmParseCtx *phpx = new CHtmIframeParseCtx(phpxParent, pel);
    if (!phpx)
        return E_OUTOFMEMORY;

    *pphpx = phpx;
    return S_OK;
}

//+------------------------------------------------------------------------
//
//  Function:   CHtmIframeParseCtx::CHtmIframeParseCtx
//
//  Synopsis:   ctor
//
//-------------------------------------------------------------------------
CHtmIframeParseCtx::CHtmIframeParseCtx(CHtmParseCtx *phpxParent, CElement *pel)
    : CHtmParseCtx(phpxParent)
{
    _psiteIframe = DYNCAST(CIFrameElement, pel);
    _psiteIframe->AddRef();
    _fNeedExecute   = TRUE;
    _fExecuteOnEof  = TRUE;

    _atagAccept     = s_atagIframeAccept;
    _fDropUnknownTags = TRUE;
}

//+------------------------------------------------------------------------
//
//  Function:   CHtmIframeParseCtx::~CHtmIframeParseCtx
//
//  Synopsis:   dtor
//
//-------------------------------------------------------------------------
CHtmIframeParseCtx::~CHtmIframeParseCtx()
{
    Assert(_psiteIframe);
    _psiteIframe->Release();
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmIframeParseCtx::AddSource
//
//  Synopsis:   To keep track of stuff between <NOFRAMES> and </NOFRAMES>
//
//-------------------------------------------------------------------------
HRESULT
CHtmIframeParseCtx::AddSource(CHtmTag *pht)
{
    HRESULT hr;
    
    hr = THR(pht->GetHtmTagStm()->ReadSource(&_cbuf2Contents, pht->GetSourceCch()));
    
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmIframeParseCtx::Finish
//
//  Synopsis:   Transfer contents to element
//
//-------------------------------------------------------------------------
HRESULT
CHtmIframeParseCtx::Finish()
{
    HRESULT hr = S_OK;
    
    _psiteIframe->SetContents(&_cbuf2Contents);

    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmIframeParseCtx::Execute
//
//  Synopsis:   instantiate
//
//-------------------------------------------------------------------------
HRESULT
CHtmIframeParseCtx::Execute()
{
    THR(_psiteIframe->CreateObject());
    return S_OK;
}

//+------------------------------------------------------------------------
//
//  Object context
//
//  The parser context for the OBJECT element
//
//-------------------------------------------------------------------------

class CHtmObjectParseCtx : public CHtmParseCtx
{
public:
    typedef CHtmParseCtx super;

    DECLARE_MEMCLEAR_NEW_DELETE(Mt(CHtmObjectParseCtx))
    CHtmObjectParseCtx(CHtmParseCtx *phpxParent, CElement *pel);
    ~CHtmObjectParseCtx();
    virtual HRESULT AddText(CTreeNode *pNode, TCHAR *pch, ULONG cch, BOOL fAscii);
    virtual HRESULT AddTag(CHtmTag *pht);
    virtual HRESULT Init();
    virtual HRESULT Finish();
    virtual HRESULT AddSource(CHtmTag *pht);
    virtual HRESULT Execute();

#if DBG == 1
    virtual HRESULT BeginElement(CTreeNode **ppNodeNew, CElement *pel, CTreeNode *pNodeCur, BOOL fEmpty) { Assert(0); return super::BeginElement(ppNodeNew, pel, pNodeCur, fEmpty); }
    virtual HRESULT EndElement(CTreeNode **ppNodeNew, CTreeNode *pNodeCur, CTreeNode *pNodeEnd) { Assert(0); return super::EndElement(ppNodeNew, pNodeCur, pNodeEnd); }
#endif

    CObjectElement *_psiteObject;
    int _cchLastSource;
    CBuffer2 _cbuf2AltHtml;
};

//+------------------------------------------------------------------------
//
//  Constant:   s_atagObjectAccept
//
//  Synopsis:   The set of tags processed normally within a object.
//
//              (issue: NS ignores SCRIPT. Should we?)
//
//-------------------------------------------------------------------------
const ELEMENT_TAG s_atagObjectAccept[] = {
    ETAG_APPLET,
    ETAG_OBJECT,
    ETAG_NULL,
};

const ELEMENT_TAG s_atagObjectTag[] = { ETAG_PARAM, ETAG_NULL };

//+------------------------------------------------------------------------
//
//  Function:   CreateHtmObjectParseCtx
//
//  Synopsis:   Factory
//
//-------------------------------------------------------------------------
HRESULT CreateHtmObjectParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse)
{
    CHtmParseCtx *phpx = new CHtmObjectParseCtx(phpxParent, pel);
    if (!phpx)
        return E_OUTOFMEMORY;

    *pphpx = phpx;
    return S_OK;
}

//+------------------------------------------------------------------------
//
//  Function:   CHtmObjectParseCtx::CHtmObjectParseCtx
//
//  Synopsis:   ctor
//
//-------------------------------------------------------------------------
CHtmObjectParseCtx::CHtmObjectParseCtx(CHtmParseCtx *phpxParent, CElement *pel)
    : CHtmParseCtx(phpxParent)
{
    _psiteObject = DYNCAST(CObjectElement, pel);
    _psiteObject->AddRef();
    _atagAccept     = s_atagObjectAccept;
    _atagTag        = s_atagObjectTag;
    _atagAlwaysEnd  = NULL;
    _fNeedExecute   = TRUE;
    _fExecuteOnEof  = TRUE;
    _fDropUnknownTags = TRUE;
}

//+------------------------------------------------------------------------
//
//  Function:   CHtmObjectParseCtx::~CHtmObjectParseCtx
//
//  Synopsis:   dtor
//
//-------------------------------------------------------------------------
CHtmObjectParseCtx::~CHtmObjectParseCtx()
{
    Assert(_psiteObject);
    _psiteObject->Release();
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmObjectParseCtx::AddTag
//
//  Synopsis:   store Object params
//
//-------------------------------------------------------------------------
HRESULT
CHtmObjectParseCtx::AddTag(CHtmTag *pht)
{
    int c;
    TCHAR *pchName;
    TCHAR *pchValue;
    TCHAR *pchDataSrc;
    TCHAR *pchDataFld;
    TCHAR *pchDataFormatAs;
    HRESULT hr = S_OK;

    Assert(pht->Is(ETAG_PARAM));

    // Since we don't want Param's in our althtml, blow it away here.
    _cbuf2AltHtml.Chop(_cchLastSource);
    _cchLastSource = 0;

    if (pht->IsEnd())
        return S_OK;

    pht->ValFromName(OBJECTPARAM_NAME, &pchName);
    pht->ValFromName(OBJECTPARAM_VALUE, &pchValue);

    if (pchName && *pchName)
    {
        CMarkup *pMarkup;
        CParamElement *pelParam;

        hr = THR(_psiteObject->EnsureParamBag());
        if (hr)
            RRETURN(hr);

        c = _psiteObject->_pParamBag->_aryProps.Size();

        hr = THR(_psiteObject->_pParamBag->AddProp(pchName, _tcslen(pchName), pchValue, pchValue ? _tcslen(pchValue) : 0));

        if (c+1 == _psiteObject->_pParamBag->_aryProps.Size())
        {
            pMarkup = _psiteObject->GetMarkup();
            Assert(pMarkup && pMarkup->Doc());
            if (S_OK == ::CreateElement(pht, (CElement **)&pelParam, pMarkup->Doc(), pMarkup, NULL, INIT2FLAG_EXECUTE))
            {
                Assert(pelParam && !pelParam->_pelObjParent);
                pelParam->_pelObjParent = _psiteObject;
                IGNORE_HR(_psiteObject->_aryParams.Append(pelParam));
                Assert(pelParam->_idxParam == -1);
                pelParam->_idxParam = c;
            }
        }

        // check for param bindings
        pht->ValFromName(OBJECTPARAM_DATASRC, &pchDataSrc);
        pht->ValFromName(OBJECTPARAM_DATAFLD, &pchDataFld);
        pht->ValFromName(OBJECTPARAM_DATAFORMATAS, &pchDataFormatAs);

        if (pchDataSrc || pchDataFld)
        {
            CObjectElement::PARAMBINDING paramBinding;

            hr = MemAllocString(Mt(CHtmObjectParseCtxAddTag), pchName, &paramBinding._strParamName);
            if (hr)
                goto CleanupBinding;

            if (pchDataSrc)
            {
                hr = MemAllocString(Mt(CHtmObjectParseCtxAddTag), pchDataSrc, &paramBinding._strDataSrc);
                if (hr)
                    goto CleanupBinding;
            }

            if (pchDataFld)
            {
                hr = MemAllocString(Mt(CHtmObjectParseCtxAddTag), pchDataFld, &paramBinding._strDataFld);
                if (hr)
                    goto CleanupBinding;
            }

            if (pchDataFormatAs)
            {
                hr = MemAllocString(Mt(CHtmObjectParseCtxAddTag), pchDataFormatAs, &paramBinding._strDataFormatAs);
                if (hr)
                    goto CleanupBinding;
            }
            hr = _psiteObject->_aryParamBinding.AppendIndirect(&paramBinding);

        CleanupBinding:

            if (hr)
            {
                MemFreeString(paramBinding._strDataFormatAs);
                MemFreeString(paramBinding._strDataFld);
                MemFreeString(paramBinding._strDataSrc);
                MemFreeString(paramBinding._strParamName);
            }
        }
    }

    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmObjectParseCtx::Execute
//
//  Synopsis:   instantiate object
//
//-------------------------------------------------------------------------
HRESULT
CHtmObjectParseCtx::Execute()
{
    // instantiate object
    THR(_psiteObject->CreateObject());
    
    return S_OK;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmObjectParseCtx::Init
//
//  Synopsis:   inits string to store altHtml string
//
//-------------------------------------------------------------------------
HRESULT
CHtmObjectParseCtx::Init()
{
    return S_OK;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmObjectParseCtx::Finish
//
//  Synopsis:   saves the altHtml once parsing is complete
//
//-------------------------------------------------------------------------
#define ISSPACE(ch) (((ch) == _T(' ')) || ((unsigned)((ch) - 9)) <= 13 - 9)

HRESULT
CHtmObjectParseCtx::Finish()
{
    HRESULT hr = S_OK;
    CStr cstrAltHtml;
    TCHAR *pch;
    ULONG cch;

    if (_cbuf2AltHtml.Length())
    {
        // Consolidate into one string
        
        hr = THR(_cbuf2AltHtml.SetCStr(&cstrAltHtml));
        if (hr) 
            goto Cleanup;
        
        for (pch = cstrAltHtml, cch = cstrAltHtml.Length(); cch; pch++, cch--)
        {
            // only save alt html if object contains nonspace
            if (!ISSPACE(*pch))
            {
                hr = THR(_psiteObject->SetAAaltHtml(cstrAltHtml));
                break;
            }
        }
    }

Cleanup:
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmObjectParseCtx::AddText
//
//  Synopsis:   store Object text in the altHtml property
//
//-------------------------------------------------------------------------
HRESULT
CHtmObjectParseCtx::AddText(CTreeNode *pNode, TCHAR *pch, ULONG cch, BOOL fAscii)
{
    _cchLastSource = 0;
    return S_OK;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmObjectParseCtx::AddSource
//
//  Synopsis:   Stores the original source
//              for the altHtml property
//
//-------------------------------------------------------------------------
HRESULT
CHtmObjectParseCtx::AddSource(CHtmTag *pht)
{
    HRESULT hr = S_OK;
    Assert(pht);

    _cchLastSource = pht->GetSourceCch();
    
    hr = THR(pht->GetHtmTagStm()->ReadSource(&_cbuf2AltHtml, _cchLastSource));
    if (hr)
        goto Cleanup;

Cleanup:
    RRETURN(hr);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\download\dwncache.cxx ===
//+------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1992 - 1995.
//
//  File:       dwncache.cxx
//
//  Contents:   
//
//-------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_DWN_HXX_
#define X_DWN_HXX_
#include "dwn.hxx"
#endif

#ifndef X_BITS_HXX_
#define X_BITS_HXX_
#include "bits.hxx"
#endif

#ifndef X_CSS_HXX_
#define X_CSS_HXX_
#include "css.hxx"
#endif

#ifndef X_HTM_HXX_
#define X_HTM_HXX_
#include "htm.hxx"
#endif

#ifndef X_IMG_HXX_
#define X_IMG_HXX_
#include "img.hxx"
#endif

#ifndef X_SWITCHES_HXX_
#define X_SWITCHES_HXX_
#include "switches.hxx"
#endif

#ifndef X_INETREG_H
#define X_INETREG_H
#include "inetreg.h"
#endif

// Debugging ------------------------------------------------------------------

PerfDbgTag(tagDwnCache,     "Dwn", "! Trace DwnInfo cache")
PerfDbgTag(tagDwnCacheOff,  "Dwn", "! Disable DwnInfo cache")

MtDefine(GAryDwnInfo, PerProcess, "g_aryDwnInfo::_pv")
MtDefine(GAryDwnInfoCache, PerProcess, "g_aryDwnInfoCache::_pv")

// Types ----------------------------------------------------------------------

struct DWNINFOENTRY
{
    DWORD           dwKey;
    CDwnInfo *      pDwnInfo;
};

struct FINDINFO
{
    LPCTSTR         pchUrl;
    UINT            dt;
    DWORD           dwKey;
    UINT            cbUrl;
    UINT            iEnt;
    UINT            cEnt;
    CDwnInfo *      pDwnInfo;
    DWNINFOENTRY *  pde;
};

typedef CDataAry<DWNINFOENTRY> CDwnInfoAry;

// Globals --------------------------------------------------------------------

CDwnInfoAry         g_aryDwnInfo(Mt(GAryDwnInfo));            // Active references
CDwnInfoAry         g_aryDwnInfoCache(Mt(GAryDwnInfoCache));  // Cached references
ULONG               g_ulDwnInfoSize         = 0;
const ULONG         g_ulDwnInfoItemThresh   =  128 * 1024;
const ULONG         g_ulDwnInfoThreshBytes  = 1024 * 1024;
const LONG          g_ulDwnInfoThreshCount  = 128;
DWORD               g_dwDwnInfoLru          = 0;

#define HashData MSHTMLHashData // avoid conflict with shlwapi
void                HashData(LPBYTE pbData, DWORD cbData,
                        LPBYTE pbHash, DWORD cbHash);


// Debugging ------------------------------------------------------------------

#if DBG==1

void
DwnCacheInvariant()
{
    DWNINFOENTRY * pde, * pdeT;
    UINT cEnt, cEntT;
    DWORD dwKey, dwKeyPrev, dwSizeT;

    // For each entry in the active array, verify that:
    //      - all the keys are in sorted order
    //      - each key is correct (is a hash of the URL)
    //      - no two entries with the same URL+type have the same _dwRefresh
    //      - each active item is not in the cache array
    //      - no _pDwnInfoLock item is in the cache array
    //      - no _pDwnInfoLock item has a _pDwnInfoLock != NULL
    //      - no _pDwnInfoLock item is incomplete

    pde       = g_aryDwnInfo;
    cEnt      = g_aryDwnInfo.Size();
    dwKeyPrev = 0;

    for (; cEnt > 0; --cEnt, dwKeyPrev = pde->dwKey, ++pde)
    {
        Assert(pde->dwKey >= dwKeyPrev);
        
        HashData((BYTE *)pde->pDwnInfo->GetUrl(),
            _tcslen(pde->pDwnInfo->GetUrl()) * sizeof(TCHAR),
            (BYTE *)&dwKey, sizeof(DWORD));

        Assert(pde->dwKey == dwKey);

        pdeT  = pde + 1;
        cEntT = cEnt - 1;

        for (; cEntT > 0; --cEntT, ++pdeT)
        {
            if (pdeT->dwKey != dwKey)
                break;

            if (    StrCmpC(pde->pDwnInfo->GetUrl(), pdeT->pDwnInfo->GetUrl()) == 0
                &&  pde->pDwnInfo->GetType() == pdeT->pDwnInfo->GetType())
            {
                Assert(     pde->pDwnInfo->_fNoShare 
                        ||  pdeT->pDwnInfo->_fNoShare 
                        ||  !pde->pDwnInfo->AttachEarly(pde->pDwnInfo->GetType(),
                                pdeT->pDwnInfo->GetRefresh(),
                                pdeT->pDwnInfo->GetFlags(0xFFFFFFFF),
                                pdeT->pDwnInfo->GetBindf()));
            }
        }

        pdeT  = g_aryDwnInfoCache;
        cEntT = g_aryDwnInfoCache.Size();

        for (; cEntT > 0; --cEntT, ++pdeT)
        {
            Assert(pdeT->pDwnInfo != pde->pDwnInfo);
        }

        if (pde->pDwnInfo->GetDwnInfoLock())
        {
            pdeT  = g_aryDwnInfoCache;
            cEntT = g_aryDwnInfoCache.Size();
            
            for (; cEntT > 0; --cEntT, ++pdeT)
            {
                Assert(pdeT->pDwnInfo != pde->pDwnInfo->GetDwnInfoLock());
            }

            Assert(pde->pDwnInfo->GetDwnInfoLock()->GetDwnInfoLock() == NULL);
            Assert(pde->pDwnInfo->GetDwnInfoLock()->TstFlags(IMGLOAD_COMPLETE));
        }
    }

    // For each entry in the cache array, verify that:
    //      - all the keys are in sorted order
    //      - each key is correct (is a hash of the URL)
    //      - no two entries with the same URL+type exist in the cache
    //      - each cached item is not in the active array
    //      - each cached item is not locked by an active item
    //      - each cached item is complete
    //      - each cached item has the correct cache size
    //      - each cached item has _ulRefs == 0
    //      - each cached item has _pDwnInfoLock == NULL

    pde       = g_aryDwnInfoCache;
    cEnt      = g_aryDwnInfoCache.Size();
    dwKeyPrev = 0;
    dwSizeT   = 0;

    for (; cEnt > 0; --cEnt, ++pde)
    {
        dwSizeT += pde->pDwnInfo->GetCacheSize();

        Assert(pde->dwKey >= dwKeyPrev);
        
        HashData((BYTE *)pde->pDwnInfo->GetUrl(),
            _tcslen(pde->pDwnInfo->GetUrl()) * sizeof(TCHAR),
            (BYTE *)&dwKey, sizeof(DWORD));

        Assert(pde->dwKey == dwKey);

        pdeT  = pde + 1;
        cEntT = cEnt - 1;

        for (; cEntT > 0; --cEntT, ++pdeT)
        {
            if (pdeT->dwKey != dwKey)
                break;

            if (pde->pDwnInfo->GetType() == pdeT->pDwnInfo->GetType())
            {
                Assert(StrCmpC(pde->pDwnInfo->GetUrl(),
                    pdeT->pDwnInfo->GetUrl()) != 0);
            }
        }

        pdeT  = g_aryDwnInfo;
        cEntT = g_aryDwnInfo.Size();

        for (; cEntT > 0; --cEntT, ++pdeT)
        {
            Assert(pdeT->pDwnInfo != pde->pDwnInfo);
            Assert(pdeT->pDwnInfo->GetDwnInfoLock() != pde->pDwnInfo);
        }

        // The following assert was disabled (by dinartem) because it doesn't
        // always hold.  It is possible for CImgInfo::ComputeCacheSize to
        // return a higher value in the case where a transparency mask is
        // computed *after* the image is cached.  This can happen if an
        // animated GIF doesn't display all of its transparent frames before
        // it is cached.
        // 
        // Assert(pde->pDwnInfo->GetCacheSize() == pde->pDwnInfo->ComputeCacheSize());

        Assert(pde->pDwnInfo->TstFlags(DWNLOAD_COMPLETE));
        Assert(pde->pDwnInfo->GetRefs() == 0);
        Assert(pde->pDwnInfo->GetDwnInfoLock() == NULL);
    }

    Assert(dwSizeT == g_ulDwnInfoSize);
}

#endif

// Internal -------------------------------------------------------------------

BOOL
DwnCacheFind(CDwnInfoAry * pary, FINDINFO * pfi)
{
    DWNINFOENTRY *  pde;
    LPCTSTR         pchUrl;
    CDwnInfo *      pDwnInfo;
    DWORD           dwKey;
    UINT            cb1, cb2;

    if (pfi->pde == NULL)
    {
        DWNINFOENTRY *  pdeBase = *pary;
        LONG            iEntLo = 0, iEntHi = (LONG)pary->Size() - 1, iEnt;

        cb1 = pfi->cbUrl = _tcslen(pfi->pchUrl) * sizeof(TCHAR);

        HashData((BYTE *)pfi->pchUrl, pfi->cbUrl, (BYTE *)&dwKey, sizeof(DWORD));

        pfi->dwKey = dwKey;

        while (iEntLo <= iEntHi)
        {
            iEnt = (iEntLo + iEntHi) / 2;
            pde  = &pdeBase[iEnt];

            if (pde->dwKey == dwKey)
            {
                iEntLo = iEnt;

                while (iEnt > 0 && pde[-1].dwKey == dwKey)
                {
                    --iEnt, --pde;
                }
                
                pfi->iEnt = iEnt;
                pfi->cEnt = pary->Size() - iEnt - 1;
                pfi->pde  = pde;

                goto validate;
            }
            else if (pde->dwKey < dwKey)
                iEntLo = iEnt + 1;
            else
                iEntHi = iEnt - 1;
        }

        pfi->iEnt = iEntLo;

        return(FALSE);
    }
                
advance:

    if (pfi->cEnt == 0)
    {
        return(FALSE);
    }

    pfi->iEnt += 1;
    pfi->cEnt -= 1;
    pfi->pde  += 1;
    pde        = pfi->pde;
    cb1        = pfi->cbUrl;
    dwKey      = pfi->dwKey;

    if (pde->dwKey != dwKey)
    {
        return(FALSE);
    }

validate:

    pDwnInfo = pde->pDwnInfo;

    if (!pDwnInfo || pDwnInfo->GetType() != pfi->dt)
        goto advance;

    pchUrl = pDwnInfo->GetUrl();
    cb2    = _tcslen(pchUrl) * sizeof(TCHAR);

    if (    cb1 != cb2
        ||  memcmp(pchUrl, pfi->pchUrl, cb1) != 0)
        goto advance;

    pfi->pDwnInfo = pDwnInfo;

    return(TRUE);
}

void
DwnCachePurge()
{
    LONG            cb, cbItem;
    UINT            iEnt, cEnt, iLru = 0;
    DWORD           dwLru, dwLruItem;
    DWNINFOENTRY *  pde;
    CDwnInfo *      pDwnInfo;

    cb   = (LONG)(g_ulDwnInfoSize - g_ulDwnInfoThreshBytes);
    cEnt = g_aryDwnInfoCache.Size();

    if (cb <= 0 && cEnt > (UINT)g_ulDwnInfoThreshCount)
    {
        Assert(cEnt - g_ulDwnInfoThreshCount == 1);
        cb = 1;
    }

    while (cb > 0 && cEnt > 0)
    {
        dwLru = 0xFFFFFFFF;
        pde   = g_aryDwnInfoCache;

        for (iEnt = 0; iEnt < cEnt; ++iEnt, ++pde)
        {
            pDwnInfo  = pde->pDwnInfo;
            dwLruItem = pDwnInfo->GetLru();

            if (dwLru > dwLruItem)
            {
                dwLru = dwLruItem;
                iLru  = iEnt;
            }
        }

        if (dwLru != 0xFFFFFFFF)
        {
            pDwnInfo = g_aryDwnInfoCache[iLru].pDwnInfo;
            cbItem   = pDwnInfo->GetCacheSize();
            
            cb -= cbItem;
            g_ulDwnInfoSize -= cbItem;

            g_aryDwnInfoCache.Delete(iLru);
            cEnt -= 1;

            PerfDbgLog4(tagDwnCache, pDwnInfo,
                "DwnCachePurge DelCache cb=%ld [n=%ld,t=%ld] %ls",
                cbItem, cEnt, g_ulDwnInfoSize, pDwnInfo->GetUrl());

            IncrementSecondaryObjectCount(10);

            pDwnInfo->SubRelease();

            #if DBG==1
            DwnCacheInvariant();
            #endif
        }
    }

    Assert(g_ulDwnInfoSize <= g_ulDwnInfoThreshBytes);
    Assert(g_aryDwnInfoCache.Size() <= g_ulDwnInfoThreshCount);
}

void
DwnCacheDeinit(BOOL fShutDown /* = TRUE */)
{
    DWNINFOENTRY * pde = g_aryDwnInfoCache;
    UINT cEnt = g_aryDwnInfoCache.Size();

    #if DBG==1
    DwnCacheInvariant();
    #endif

    for (; cEnt > 0; --cEnt, ++pde)
    {
        #if DBG==1
        g_ulDwnInfoSize -= pde->pDwnInfo->GetCacheSize();
        #endif

        PerfDbgLog4(tagDwnCache, pde->pDwnInfo,
            "DwnCacheDeinit DelCache cb=%ld [n=%ld,t=%ld] %ls",
            pde->pDwnInfo->GetCacheSize(), cEnt - 1, g_ulDwnInfoSize,
            pde->pDwnInfo->GetUrl());

        IncrementSecondaryObjectCount(10);

        pde->pDwnInfo->SubRelease();
    }

    Assert(g_ulDwnInfoSize == 0);
    g_aryDwnInfoCache.DeleteAll();

    if (fShutDown)
    {
        AssertSz(g_aryDwnInfo.Size() == 0,
            "One or more CDwnInfo objects were leaked.  Most likely caused by "
            "leaking a CDoc or CImgElement.");

        g_aryDwnInfo.DeleteAll();
    }
}

void DwnCacheOnSettingsChange(WPARAM wParam, LPARAM lParam)
{
    if (lParam && !_tcscmp((TCHAR*)lParam, REGSTR_PATH_IEXPLORER))
    {
        g_csDwnCache.Enter();
        DwnCacheDeinit(FALSE);
        g_csDwnCache.Leave();
    }
}

int
FtCompare(FILETIME * pft1, FILETIME * pft2)
{
    return(pft1->dwHighDateTime > pft2->dwHighDateTime ? 1 :
        (pft1->dwHighDateTime < pft2->dwHighDateTime ? -1 :
        (pft1->dwLowDateTime > pft2->dwLowDateTime ? 1 :
        (pft1->dwLowDateTime < pft2->dwLowDateTime ? -1 : 0))));
}

// External -------------------------------------------------------------------

HRESULT
CDwnInfo::Create(UINT dt, DWNLOADINFO * pdli, CDwnInfo ** ppDwnInfo)
{
    CDwnInfo *  pDwnInfo    = NULL;
    FINDINFO    fi;
    BOOL        fScanActive = FALSE;
    HRESULT     hr          = S_OK;
    BOOL        fAttachLate = FALSE;
WHEN_DBG(BOOL   fNoShare    = FALSE; )
    

    g_csDwnCache.Enter();
    memset(&fi, 0, sizeof(FINDINFO));

    if (dt != DWNCTX_HTM && pdli->pchUrl && *pdli->pchUrl)
    {
        CDwnDoc * pDwnDoc = pdli->pDwnDoc;

        fi.pchUrl = pdli->pchUrl;
        fi.dt     = dt;

        if (fi.dt == DWNCTX_FILE)
            fi.dt = DWNCTX_BITS;

        while (DwnCacheFind(&g_aryDwnInfo, &fi))
        {
            fScanActive = TRUE;

            // If we have a bind-in-progress, don't attach early to an image in the cache.  We end
            // up abandoning the bind-in-progress and it never terminates properly.  We probably
            // could just hit it with an ABORT, but this case is not common enough to add yet
            // another state transition at this time (this case is when you hyperlink to a page
            // which turns out to actually be an image).

			if (pdli->fResynchronize || pdli->pDwnBindData)
            {
                WHEN_DBG( fNoShare = TRUE );
				break;
            }

            if (fi.pDwnInfo->AttachEarly(dt, pDwnDoc->GetRefresh(), pDwnDoc->GetDownf(), pDwnDoc->GetBindf()))
            {
                pDwnInfo = fi.pDwnInfo;
                pDwnInfo->AddRef();

                PerfDbgLog2(tagDwnCache, fi.pDwnInfo,
                    "DwnInfoCache AttachEarly %ld@%ls",
                    fi.pDwnInfo->GetRefresh(), fi.pDwnInfo->GetUrl());

                break;
            }
        }
    }

    if (pDwnInfo == NULL)
    {
        switch (dt)
        {
            case DWNCTX_HTM:
                pDwnInfo = new CHtmInfo();
                break;

            case DWNCTX_IMG:
                pDwnInfo = new CImgInfo();
                break;

            case DWNCTX_BITS:
            case DWNCTX_FILE:
                pDwnInfo = new CBitsInfo(dt);
                break;

            case DWNCTX_CSS:
                pDwnInfo = new CCssInfo(dt);
                break;

            default:
                AssertSz(FALSE, "Unknown DWNCTX type");
                break;
        }

        if (pDwnInfo == NULL)
        {
            hr = E_OUTOFMEMORY;
            goto Cleanup;
        }

        hr = THR(pDwnInfo->Init(pdli));

        if (hr == S_OK && dt != DWNCTX_HTM && *pDwnInfo->GetUrl())
        {
            DWNINFOENTRY de = { fi.dwKey, pDwnInfo };

            WHEN_DBG( pDwnInfo->_fNoShare = fNoShare );
            hr = THR(g_aryDwnInfo.InsertIndirect(fi.iEnt, &de));

            if (hr == S_OK)
            {
                PerfDbgLog2(tagDwnCache, pDwnInfo,
                    "DwnInfoCache InsActive %ld@%ls",
                    pDwnInfo->GetRefresh(), pDwnInfo->GetUrl());

                if (    dt == DWNCTX_IMG
                    &&  (pDwnInfo->GetBindf() & (BINDF_GETNEWESTVERSION|BINDF_NOWRITECACHE|BINDF_RESYNCHRONIZE|BINDF_PRAGMA_NO_CACHE)) == 0
                    &&  !pdli->pDwnBindData)
                {
                    UINT uScheme = GetUrlScheme(pDwnInfo->GetUrl());

                    if (uScheme == URL_SCHEME_FILE || uScheme == URL_SCHEME_HTTP || uScheme == URL_SCHEME_HTTPS)
                    {
                        fAttachLate = pDwnInfo->AttachByLastModEx(fScanActive, uScheme);
                    }
                }
            }
        }

        if (hr)
        {
            pDwnInfo->Release();
            goto Cleanup;
        }
    }

    #if DBG==1
    DwnCacheInvariant();
    #endif

    *ppDwnInfo = pDwnInfo;

Cleanup:

    g_csDwnCache.Leave();

    if (fAttachLate && dt == DWNCTX_IMG)
    {
        Assert(pdli->pDwnDoc);
        CDoc * pDoc = pdli->pDwnDoc->GetCDoc();
        if (pDoc)
        {
            CImgInfo *pImgInfo = (CImgInfo*)*ppDwnInfo;
            THR(pDoc->AddToPrivacyList(pImgInfo->GetUrl(), pImgInfo->GetPolicyRef(), pImgInfo->GetPrivacyFlags()));
        }

    }

    RRETURN(hr);
}

BOOL
CDwnInfo::AttachByLastMod(CDwnLoad * pDwnLoad, FILETIME * pft, BOOL fDoAttach)
{
    if (!_cstrUrl || !*_cstrUrl)
    {
        return(FALSE);
    }

    EnterCriticalSection();

    BOOL fRet = FALSE;

    if (pDwnLoad == _pDwnLoad)
    {
        _ftLastMod = *pft;

        if (fDoAttach)
        {
            g_csDwnCache.Enter();

            fRet = AttachByLastModEx(TRUE, URL_SCHEME_UNKNOWN);

            g_csDwnCache.Leave();
        }
    }

    LeaveCriticalSection();

    return(fRet);
}

BOOL
CDwnInfo::AttachByLastModEx(BOOL fScanActive, UINT uScheme)
{
    UINT        dt          = GetType();
    FINDINFO    fi          = { _cstrUrl, dt };
    CDwnInfo *  pDwnInfo    = NULL;
    BOOL        fGotLastMod = _ftLastMod.dwLowDateTime || _ftLastMod.dwHighDateTime;

    if (g_pHtmPerfCtl && (g_pHtmPerfCtl->dwFlags & HTMPF_DISABLE_IMGCACHE))
    {
        goto Cleanup;
    }

    if (fScanActive)
    {
        while (DwnCacheFind(&g_aryDwnInfo, &fi))
        {
            if (fi.pDwnInfo != this && fi.pDwnInfo->TstFlags(DWNLOAD_COMPLETE))
            {
                if (!fGotLastMod)
                {
                    if (!GetUrlLastModTime(_cstrUrl, uScheme, _dwBindf, &_ftLastMod))
                        goto Cleanup;

                    fGotLastMod = TRUE;
                }

                if (memcmp(&_ftLastMod, &fi.pDwnInfo->_ftLastMod, sizeof(FILETIME)) == 0)
                {
                    // If the active object is locking another object, then attach
                    // to the locked object in order to avoid chains of locked objects.

                    pDwnInfo = fi.pDwnInfo->_pDwnInfoLock;

                    if (pDwnInfo == NULL)
                        pDwnInfo = fi.pDwnInfo;

                    if (CanAttachLate(pDwnInfo))
                        pDwnInfo->SubAddRef();
                    else
                        pDwnInfo = NULL;

                    break;
                }
            }
        }
    }

    if (pDwnInfo == NULL)
    {
        memset(&fi, 0, sizeof(FINDINFO));
        fi.pchUrl = _cstrUrl;
        fi.dt     = dt;

        while (DwnCacheFind(&g_aryDwnInfoCache, &fi))
        {
            if (fi.pDwnInfo != this && CanAttachLate(fi.pDwnInfo))
            {
                if (!fGotLastMod)
                {
                    if (!GetUrlLastModTime(_cstrUrl, uScheme, _dwBindf, &_ftLastMod))
                        goto Cleanup;

                    fGotLastMod = TRUE;
                }
                
                if (memcmp(&_ftLastMod, &fi.pDwnInfo->_ftLastMod, sizeof(FILETIME)) == 0)
                {
                    Assert(!fi.pDwnInfo->_pDwnInfoLock);

                    pDwnInfo = fi.pDwnInfo;

                    g_ulDwnInfoSize -= pDwnInfo->GetCacheSize();
                    g_aryDwnInfoCache.Delete(fi.iEnt);

                    IncrementSecondaryObjectCount(10);

                    PerfDbgLog4(tagDwnCache, pDwnInfo,
                        "DwnInfoCache DelCache cb=%d [n=%ld,t=%ld] %ls",
                        pDwnInfo->GetCacheSize(), g_aryDwnInfoCache.Size(),
                        g_ulDwnInfoSize, pDwnInfo->GetUrl());

                    break;
                }
            }
        }
    }

    #if DBG==1
    DwnCacheInvariant();
    #endif

    if (pDwnInfo)
    {
        PerfDbgLog5(tagDwnCache, this,
            "DwnInfoCache %s %lX (%s) %ld@%ls",
            uScheme == URL_SCHEME_UNKNOWN ? "AttachLate" : "AttachEarlyByLastMod",
            pDwnInfo, pDwnInfo->GetRefs() ? "active" : "cached",
            GetRefresh(), GetUrl());

        AttachLate(pDwnInfo);
        pDwnInfo->SubRelease();
    }

Cleanup:
    return(!!pDwnInfo);
}

ULONG
CDwnInfo::Release()
{
    g_csDwnCache.Enter();

    ULONG ulRefs = (ULONG)InterlockedRelease();

    if (ulRefs == 0 && _cstrUrl && *_cstrUrl)
    {
        FINDINFO    fi       = { _cstrUrl, GetType() };
        CDwnInfo *  pDwnInfo = NULL;
        DWORD       cbSize;
        UINT        iEntDel  = 0;
        BOOL        fDeleted = FALSE;

        // We want to cache this object if it is completely loaded and
        // we either own the bits (don't have a lock on another object)
        // or we are locking another object, but it has no active references.
        // In the latter case, we actually want to cache the locked object,
        // not this object, because we don't allow entries in the cache which
        // have locks on other objects.

        if (!TstFlags(DWNLOAD_COMPLETE))
        {
            PerfDbgLog1(tagDwnCache, this,
                "DwnInfoCache Release (no cache; not complete) %ls",
                GetUrl());
        }
        else if (TstFlags(DWNF_DOWNLOADONLY))
        {
            PerfDbgLog1(tagDwnCache, this,
                "DwnInfoCache Release (no cache; download only) %ls",
                GetUrl());
        }
        else if (_ftLastMod.dwLowDateTime == 0 && _ftLastMod.dwHighDateTime == 0)
        {
            PerfDbgLog1(tagDwnCache, this,
                "DwnInfoCache Release (no cache; no _ftLastMod) %ls",
                GetUrl());
        }
        else if (_pDwnInfoLock)
        {
            if (_pDwnInfoLock->GetRefs() > 0)
            {
                PerfDbgLog1(tagDwnCache, this,
                    "DwnInfoCache Release (no cache; locked and target is active) %ls",
                    GetUrl());
            }
            else
            {
                pDwnInfo = _pDwnInfoLock;
                pDwnInfo->SubAddRef();
            }
        }
#ifdef SWITCHES_ENABLED
        else if (IsSwitchNoImageCache())
        {
        }
#endif
#if DBG==1 || defined(PERFTAGS)
        else if (IsPerfDbgEnabled(tagDwnCacheOff))
        {
        }
#endif
        else if (g_pHtmPerfCtl && (g_pHtmPerfCtl->dwFlags & HTMPF_DISABLE_IMGCACHE))
        {
        }
        else
        {
            pDwnInfo = this;
            SubAddRef();
        }

        while (DwnCacheFind(&g_aryDwnInfo, &fi))
        {
            if (fi.pDwnInfo == this)
            {
                PerfDbgLog2(tagDwnCache, fi.pDwnInfo,
                    "DwnInfoCache DelActive %ld@%ls",
                    fi.pDwnInfo->GetRefresh(), fi.pDwnInfo->GetUrl());

                iEntDel = fi.iEnt;
                fDeleted = TRUE;

                if (pDwnInfo == NULL)
                    break;
            }
            else if (pDwnInfo && fi.pDwnInfo->_pDwnInfoLock == pDwnInfo)
            {
                // Some other active object has the target locked.  We don't
                // put it into the cache because it is still accessible
                // through that active object.

                PerfDbgLog2(tagDwnCache, this,
                    "DwnInfoCache Release (no cache; active item %lX has us locked) %ls",
                    fi.pDwnInfo, GetUrl());

                pDwnInfo->SubRelease();
                pDwnInfo = NULL;

                if (fDeleted)
                    break;
            }
        }

        if (fDeleted)
        {
            g_aryDwnInfo.Delete(iEntDel);
        }

        AssertSz(fDeleted, "Can't find reference to CDwnInfo in active array");

        if (pDwnInfo)
        {
            cbSize = pDwnInfo->ComputeCacheSize();

            if (cbSize == 0)
            {
                PerfDbgLog1(tagDwnCache, this,
                    "DwnInfoCache Release (no cache; ComputeCacheSize declined) %ls",
                    GetUrl());
            }
            else if (cbSize > g_ulDwnInfoItemThresh)
            {
                PerfDbgLog3(tagDwnCache, this,
                    "DwnInfoCache Release (no cache; cb=%lX is too big) (max %lX) %ls",
                    cbSize, g_ulDwnInfoItemThresh, GetUrl());
            }
            else
            {
                pDwnInfo->SetCacheSize(cbSize);
                pDwnInfo->SetLru(++g_dwDwnInfoLru);

                memset(&fi, 0, sizeof(FINDINFO));
                fi.pchUrl = pDwnInfo->GetUrl();
                fi.dt     = pDwnInfo->GetType();
                
                while (DwnCacheFind(&g_aryDwnInfoCache, &fi))
                {
                    if (FtCompare(&fi.pDwnInfo->_ftLastMod, &pDwnInfo->_ftLastMod) > 0)
                    {
                        // The current entry in the cache has a newer mod date
                        // then the one we're trying to add.  Forget about
                        // ours.

                        PerfDbgLog1(tagDwnCache, this,
                            "DwnInfoCache Release (no cache; existing item is newer) %ls",
                            GetUrl());

                        goto endcache;
                    }

                    // Replace the older entry with this newer one.

                    g_ulDwnInfoSize -= fi.pDwnInfo->GetCacheSize();

                    PerfDbgLog4(tagDwnCache, fi.pDwnInfo,
                        "DwnInfoCache DelCache cb=%d [n=%ld,t=%ld] %ls",
                        fi.pDwnInfo->GetCacheSize(), g_aryDwnInfoCache.Size(),
                        g_ulDwnInfoSize, fi.pDwnInfo->GetUrl());

                    fi.pDwnInfo->SubRelease();
                    fi.pDwnInfo = pDwnInfo;
                    g_aryDwnInfoCache[fi.iEnt].pDwnInfo = pDwnInfo;
                    pDwnInfo = NULL;

                    g_ulDwnInfoSize += cbSize;

                    PerfDbgLog4(tagDwnCache, fi.pDwnInfo,
                        "DwnInfoCache InsCache cb=%d [n=%ld,t=%ld] %ls",
                        cbSize, g_aryDwnInfoCache.Size(), g_ulDwnInfoSize,
                        fi.pDwnInfo->GetUrl());

                    if (g_ulDwnInfoSize > g_ulDwnInfoThreshBytes)
                    {
                        DwnCachePurge();
                    }

                    #if DBG==1
                    DwnCacheInvariant();
                    #endif

                    goto endcache;
                }

                // No matching entry found, but now we know where to insert.

                DWNINFOENTRY de = { fi.dwKey, pDwnInfo };

                if (g_aryDwnInfoCache.InsertIndirect(fi.iEnt, &de) == S_OK)
                {
                    // Each CDwnInfo stored in the cache maintains a secondary
                    // reference count (inheriting from CBaseFT).  Since this
                    // object is now globally cached without active references,
                    // it should no longer maintain its secondary reference
                    // because it will be destroyed when the DLL is unloaded.

                    DecrementSecondaryObjectCount(10);
                    pDwnInfo = NULL;

                    g_ulDwnInfoSize += cbSize;

                    PerfDbgLog4(tagDwnCache, de.pDwnInfo,
                        "DwnInfoCache InsCache cb=%d [n=%ld,t=%ld] %ls",
                        cbSize, g_aryDwnInfoCache.Size(), g_ulDwnInfoSize,
                        de.pDwnInfo->GetUrl());

                    #if DBG==1
                    DwnCacheInvariant();
                    #endif

                    if (    g_ulDwnInfoSize > g_ulDwnInfoThreshBytes
                        ||  g_aryDwnInfoCache.Size() > g_ulDwnInfoThreshCount)
                    {
                        DwnCachePurge();
                    }
                }
            }

        endcache:

            if (pDwnInfo)
            {
                pDwnInfo->SubRelease();
                pDwnInfo = NULL;
            }

            #if DBG==1
            DwnCacheInvariant();
            #endif
        }
    }

    g_csDwnCache.Leave();

    if (ulRefs == 0)
    {
        Passivate();
        SubRelease();
    }

    return(ulRefs);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\download\htmdesc.cxx ===
//+---------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1994-1996
//
//  File:       htmdesc.cxx
//
//  Contents:   Tag descriptors, for mapping tag strings to ETAGs,
//              describing parsing rules, etc.
//
//----------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_FORMKRNL_HXX_
#define X_FORMKRNL_HXX_
#include "formkrnl.hxx"
#endif

#ifndef X_HTM_HXX_
#define X_HTM_HXX_
#include "htm.hxx"
#endif

#ifndef X_COMMENT_HXX_
#define X_COMMENT_HXX_
#include "comment.hxx"
#endif

#ifndef X_TXTELEMS_HXX_
#define X_TXTELEMS_HXX_
#include "txtelems.hxx"
#endif

#ifndef X_IMGELEM_HXX_
#define X_IMGELEM_HXX_
#include "imgelem.hxx"
#endif

#ifndef X_DIV_HXX_
#define X_DIV_HXX_
#include "div.hxx"
#endif

#ifndef X_EBODY_HXX_
#define X_EBODY_HXX_
#include "ebody.hxx"
#endif

#ifndef X_TABLE_HXX_
#define X_TABLE_HXX_
#include "table.hxx"
#endif

#ifndef X_EPHRASE_HXX_
#define X_EPHRASE_HXX_
#include "ephrase.hxx"
#endif

#ifndef X_ELIST_HXX_
#define X_ELIST_HXX_
#include "elist.hxx"
#endif

#ifndef X_ELI_HXX_
#define X_ELI_HXX_
#include "eli.hxx"
#endif

#ifndef X_EDD_HXX_
#define X_EDD_HXX_
#include "edd.hxx"
#endif

#ifndef X_EDT_HXX_
#define X_EDT_HXX_
#include "edt.hxx"
#endif

#ifndef X_EULIST_HXX_
#define X_EULIST_HXX_
#include "eulist.hxx"
#endif

#ifndef X_EDLIST_HXX_
#define X_EDLIST_HXX_
#include "edlist.hxx"
#endif

#ifndef X_EOLIST_HXX_
#define X_EOLIST_HXX_
#include "eolist.hxx"
#endif

#ifndef X_EHEADER_HXX_
#define X_EHEADER_HXX_
#include "eheader.hxx"
#endif

#ifndef X_LAYOUT_HXX_
#define X_LAYOUT_HXX_
#include "layout.hxx"
#endif

#ifndef X_FLOWLYT_HXX_
#define X_FLOWLYT_HXX_
#include "flowlyt.hxx"
#endif

#ifndef X_HRLYT_HXX_
#define X_HRLYT_HXX_
#include "hrlyt.hxx"
#endif

#ifndef X_EHR_HXX_
#define X_EHR_HXX_
#include "ehr.hxx"
#endif

#ifndef X_EBR_HXX_
#define X_EBR_HXX_
#include "ebr.hxx"
#endif

#ifndef X_EBLOCK_HXX_
#define X_EBLOCK_HXX_
#include "eblock.hxx"
#endif

#ifndef X_EPARA_HXX_
#define X_EPARA_HXX_
#include "epara.hxx"
#endif

#ifndef X_BTNHLPER_HXX_
#define X_BTNHLPER_HXX_
#include "btnhlper.hxx"
#endif

#ifndef X_INPUTTXT_HXX_
#define X_INPUTTXT_HXX_
#include "inputtxt.hxx"
#endif

#ifndef X_TEXTAREA_HXX_
#define X_TEXTAREA_HXX_
#include "textarea.hxx"
#endif

#ifndef X_INPUTBTN_HXX_
#define X_INPUTBTN_HXX_
#include "inputbtn.hxx"
#endif

#ifndef X_MARQUEE_HXX_
#define X_MARQUEE_HXX_
#include "marquee.hxx"
#endif

#ifndef X_EFORM_HXX_
#define X_EFORM_HXX_
#include "eform.hxx"
#endif

#ifndef X_ESELECT_HXX_
#define X_ESELECT_HXX_
#include "eselect.hxx"
#endif

#ifndef X_EOPTION_HXX_
#define X_EOPTION_HXX_
#include "eoption.hxx"
#endif

#ifndef X_EOBJECT_HXX_
#define X_EOBJECT_HXX_
#include "eobject.hxx"
#endif

#ifndef X_PLUGINST_HXX_
#define X_PLUGINST_HXX_
#include "pluginst.hxx"
#endif

#ifndef X_FRAME_HXX_
#define X_FRAME_HXX_
#include "frame.hxx"
#endif

#ifndef X_INPUTTXT_HXX_
#define X_INPUTTXT_HXX_
#include "inputtxt.hxx"
#endif

#ifndef X_HYPLNK_HXX_
#define X_HYPLNK_HXX_
#include "hyplnk.hxx"
#endif

#ifndef X_EANCHOR_HXX_
#define X_EANCHOR_HXX_
#include "eanchor.hxx"
#endif

#ifndef X_ELABEL_HXX_
#define X_ELABEL_HXX_
#include "elabel.hxx"
#endif

#ifndef X_HEDELEMS_HXX_
#define X_HEDELEMS_HXX_
#include "hedelems.hxx"
#endif

#ifndef X_EFONT_HXX_
#define X_EFONT_HXX_
#include "efont.hxx"
#endif

#ifndef X_EAREA_HXX_
#define X_EAREA_HXX_
#include "earea.hxx"
#endif

#ifndef X_EMAP_HXX_
#define X_EMAP_HXX_
#include "emap.hxx"
#endif

#ifndef X_ESTYLE_HXX_
#define X_ESTYLE_HXX_
#include "estyle.hxx"
#endif

#ifndef X_FRAMESET_HXX_
#define X_FRAMESET_HXX_
#include "frameset.hxx"
#endif

#ifndef X_ESCRIPT_HXX_
#define X_ESCRIPT_HXX_
#include "escript.hxx"
#endif

#ifndef X_ENOSHOW_HXX_
#define X_ENOSHOW_HXX_
#include "enoshow.hxx"
#endif

#ifndef X_ELINK_HXX_
#define X_ELINK_HXX_
#include "elink.hxx"
#endif

#ifndef X_EBGSOUND_HXX_
#define X_EBGSOUND_HXX_
#include "ebgsound.hxx"
#endif

#ifndef X_E1D_HXX_
#define X_E1D_HXX_
#include "e1d.hxx"
#endif

#ifndef X_GENERIC_HXX_
#define X_GENERIC_HXX_
#include "generic.hxx"
#endif

#ifndef X_ASSOC_HXX_
#define X_ASSOC_HXX_
#include "assoc.hxx"
#endif

#define _cxx_
#include "tags.h"

HRESULT CreateHtmBodyParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse);
HRESULT CreateHtmCommentParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse);
HRESULT CreateHtmFramesetParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse);
HRESULT CreateHtmFrameParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse);
HRESULT CreateHtmGenericParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse);
HRESULT CreateHtmHeadParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse);
HRESULT CreateHtmIframeParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse);
HRESULT CreateHtmNoShowParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse);
HRESULT CreateHtmObjectParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse);
HRESULT CreateHtmPreParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse);
HRESULT CreateHtmScriptParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse);
HRESULT CreateHtmStyleParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse);
HRESULT CreateHtmTextareaParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse);
HRESULT CreateHtmTextParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse);
HRESULT CreateHtmTitleParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse);
HRESULT CreateHtmSelectParseCtx(CHtmParseCtx **pphpx, CElement *pel, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse);

// to make them global (could just as well go to .hxx)
extern const ELEMENT_TAG s_atagNull[];
extern const ELEMENT_TAG s_atagAppletObject[];
extern const ELEMENT_TAG s_atagIframe[];
extern const ELEMENT_TAG s_atagEOFProhibited[];

//+---------------------------------------------------------------------------
//
//  Parse classes
//
//  If not otherwise specified, parseclass fields default to the following
//  values (numerically zero):
//
//  CHtmlParseClass hpcDefault =
//  {
//      SCOPE_EMPTY,        // _scope
//      TEXTTYPE_NEVER,     // _texttype
//      NULL,               // _atagEndContainers   -- REQUIRED --
//      NULL,               // _atagBeginContainers -- REQUIRED --
//      NULL,               // _atagProhibitedContainers
//      NULL,               // _atagRequiredContainers
//      ETAG_NULL,          // _etagDefaultContainer
//      FALSE,              // _fQueueForRequired
//      TEXTSCOPE_NEUTRAL,  // _textscope
//      ETAG_NULL,          // _etagTextSubcontainer
//      NULL,               // _atagMatch
//      ETAG_NULL,          // _etagUnmatchedSubstitute
//      NULL,               // _pfnHpxCreator
//      FALSE,              // _fMerge
//      ETAG_NULL,          // _etagImplicitChild
//      FALSE,              // _fCloseImplicitChild
//  };
//
//  The meaning of the parse table entries:
//
//  _scope determines default implicit end-tag behavior. The values are:
//      SCOPE_EMPTY: an end tag is implied immediately after a begin tag
//      SCOPE_NESTED: an automatic end tag is implied when a parent or
//                    further ancestor that is also SCOPE_NESTED is closed
//      SCOPE_OVERLAP: no default end-tags are implied
//
//      implicit end-tags can also be generated in other situations
//
//  _texttype is ALWAYS if the begin tag should be treated like a piece
//      of text with respect to _textscope and _textsubcontainer of
//      ancestors (see _textscope and _textsubcontainer).
//
//  _atagEndContainers is a set of strict End Containers of this tag.
//      1. An end tag of this tag will only match the lowest open element
//         if it is not an ancestor of a currently open End Container element.
//      2. If an End Container ancestor closes, this kind of element is
//         automatically closed (an automatic end tag is implied).
//
//      For example, <TD> is an End Container for <B> because </B>
//      does not match a B element that is an ancestor of an open TD
//      and because if an open TD closes, any open child B elements
//      are automatically closed.
//
//  _atagBeginContainers is a set of Begin Containers of this tag.
//      When looking for required containers, prohibited containers, and
//      masking containers, the parser never searches above a Begin Container
//      element.
//
//----------------------------------------------------------------------------

//      SCOPE_EMPTY,        // _scope
//      TEXTTYPE_NEVER,     // _texttype
//      NULL,               // _atagEndContainers   -- REQUIRED --
//      NULL,               // _atagBeginContainers -- REQUIRED --
//      NULL,               // _atagMaskingContainers
//      NULL,               // _atagProhibitedContainers
//      NULL,               // _atagRequiredContainers
//      ETAG_NULL,          // _etagDefaultContainer
//      FALSE,              // _fQueueForRequired
//      TEXTSCOPE_NEUTRAL,  // _textscope
//      ETAG_NULL,          // _etagTextSubcontainer
//      NULL,               // _atagMatch
//      ETAG_NULL,          // _etagUnmatchedSubstitute
//      NULL,               // _pfnHpxCreator
//      FALSE,              // _fMerge
//      ETAG_NULL,          // _etagImplicitChild
//      FALSE,              // _fCloseImplicitChild
//  };


const ELEMENT_TAG s_atagNull[] = {ETAG_NULL};
const ELEMENT_TAG s_atagHtml[] = {ETAG_HTML, ETAG_NULL};
const ELEMENT_TAG s_atagHead[] = {ETAG_HEAD, ETAG_NULL};
const ELEMENT_TAG s_atagBody[] = {ETAG_BODY, ETAG_NULL};
const ELEMENT_TAG s_atagBodyGeneric[] = {ETAG_BODY, ETAG_GENERIC, ETAG_NULL};
const ELEMENT_TAG s_atagBodyHead[] = {ETAG_BODY, ETAG_HEAD, ETAG_NULL};
const ELEMENT_TAG s_atagBodyHeadFrameSet[] = {ETAG_BODY, ETAG_HEAD, ETAG_FRAMESET, ETAG_NULL};
const ELEMENT_TAG s_atagOverlapBoundary[] = {ETAG_BUTTON, ETAG_CAPTION, ETAG_HTML, ETAG_MARQUEE, /* ETAG_HTMLAREA, */ ETAG_TD, ETAG_TH, ETAG_NULL};
const ELEMENT_TAG s_atagOverlapRequired[] = {ETAG_BODY, ETAG_BUTTON, ETAG_CAPTION, ETAG_GENERIC, ETAG_MARQUEE, /* ETAG_HTMLAREA, */ ETAG_TD, ETAG_TH, ETAG_NULL};
const ELEMENT_TAG s_atagPBoundary[] = {ETAG_BLOCKQUOTE, ETAG_BODY, ETAG_BUTTON, ETAG_CAPTION, ETAG_DIR, ETAG_DL, ETAG_LISTING, ETAG_MARQUEE, ETAG_MENU, ETAG_OL, ETAG_PRE, /* ETAG_HTMLAREA, */ ETAG_TABLE, ETAG_TBODY, ETAG_TC, ETAG_TD, ETAG_TFOOT, ETAG_TH, ETAG_THEAD, ETAG_TR, ETAG_UL, ETAG_NULL};
const ELEMENT_TAG s_atagPBoundaryGeneric[] = {ETAG_BLOCKQUOTE, ETAG_BODY, ETAG_BUTTON, ETAG_CAPTION, ETAG_DIR, ETAG_DL, ETAG_GENERIC, ETAG_LISTING, ETAG_MARQUEE, ETAG_MENU, ETAG_OL, ETAG_PRE, /* ETAG_HTMLAREA, */ ETAG_TABLE, ETAG_TBODY, ETAG_TC, ETAG_TD, ETAG_TFOOT, ETAG_TH, ETAG_THEAD, ETAG_TR, ETAG_UL, ETAG_NULL};
const ELEMENT_TAG s_atagNestBoundary[] = {ETAG_BODY, ETAG_BUTTON, ETAG_CAPTION, ETAG_HEAD, ETAG_MARQUEE, /* ETAG_HTMLAREA, */ ETAG_TABLE, ETAG_TBODY, ETAG_TC, ETAG_TD, ETAG_TFOOT, ETAG_TH, ETAG_THEAD, ETAG_TR, ETAG_NULL};
const ELEMENT_TAG s_atagLiteral[] = {ETAG_COMMENT, ETAG_SCRIPT, ETAG_STYLE, ETAG_TEXTAREA, ETAG_GENERIC_LITERAL, ETAG_GENERIC_NESTED_LITERAL, ETAG_TITLE_TAG, ETAG_NULL};
const ELEMENT_TAG s_atagButton[] = {ETAG_BUTTON, ETAG_NULL};
const ELEMENT_TAG s_atagBasefont[] = {ETAG_BASEFONT, ETAG_NULL};
const ELEMENT_TAG s_atagA[] = {ETAG_A, ETAG_NULL};
const ELEMENT_TAG s_atagNobr[] = {ETAG_NOBR, ETAG_NULL};
const ELEMENT_TAG s_atagP[] = {ETAG_P, ETAG_NULL};
const ELEMENT_TAG s_atagFieldset[] = {ETAG_FIELDSET, ETAG_NULL};
const ELEMENT_TAG s_atagLiP[] = {ETAG_LI, ETAG_P, ETAG_NULL};
const ELEMENT_TAG s_atagList[] = {ETAG_DL, ETAG_MENU, ETAG_OL, ETAG_UL, ETAG_NULL};
const ELEMENT_TAG s_atagListCloses[] = {ETAG_DD, ETAG_DT, ETAG_LI, ETAG_P, ETAG_NULL};
const ELEMENT_TAG s_atagDdDtP[] = {ETAG_DD, ETAG_DT, ETAG_P, ETAG_NULL};
const ELEMENT_TAG s_atagSelect[] = {ETAG_SELECT, ETAG_NULL};
const ELEMENT_TAG s_atagOption[] = {ETAG_OPTION, ETAG_NULL};
const ELEMENT_TAG s_atagOptgroup[] = {ETAG_OPTGROUP, ETAG_NULL};
const ELEMENT_TAG s_atagIframe[] = {ETAG_IFRAME, ETAG_NULL};
const ELEMENT_TAG s_atagForm[] = {ETAG_FORM, ETAG_NULL};
const ELEMENT_TAG s_atagNoShow[] = {ETAG_NOEMBED, ETAG_NOSCRIPT, ETAG_NOFRAMES, ETAG_NULL};
const ELEMENT_TAG s_atagFormHead[] = {ETAG_FORM, ETAG_HEAD, ETAG_NULL};
const ELEMENT_TAG s_atagTable[] = {ETAG_TABLE, ETAG_NULL};
const ELEMENT_TAG s_atagTableTr[] = {ETAG_TABLE, ETAG_TR, ETAG_NULL};
const ELEMENT_TAG s_atagTdCloses[] = {ETAG_TC, ETAG_TD, ETAG_TH, ETAG_CAPTION, ETAG_COLGROUP, ETAG_SELECT, ETAG_OPTGROUP, ETAG_OPTION, ETAG_NULL};
const ELEMENT_TAG s_atagTrCloses[] = {ETAG_TR, ETAG_CAPTION, ETAG_COLGROUP, ETAG_TC, ETAG_SELECT, ETAG_OPTGROUP, ETAG_OPTION, ETAG_NULL};
const ELEMENT_TAG s_atagColCloses[] = {ETAG_THEAD, ETAG_TBODY, ETAG_TFOOT, ETAG_CAPTION, ETAG_TC, ETAG_SELECT, ETAG_OPTGROUP, ETAG_OPTION, ETAG_NULL};
const ELEMENT_TAG s_atagTbodyCloses[] = {ETAG_THEAD, ETAG_TBODY, ETAG_TFOOT, ETAG_COLGROUP, ETAG_CAPTION, ETAG_TC, ETAG_SELECT, ETAG_OPTGROUP, ETAG_OPTION, ETAG_NULL};
const ELEMENT_TAG s_atagTableCloses[] = {ETAG_TABLE, ETAG_TC, ETAG_SELECT, ETAG_OPTGROUP, ETAG_OPTION, ETAG_NULL};
const ELEMENT_TAG s_atagEndTr[] = {ETAG_THEAD, ETAG_TBODY, ETAG_TFOOT, ETAG_TABLE, ETAG_TD, ETAG_TH, ETAG_CAPTION, ETAG_NULL}; // NS compat: Bug 21464
const ELEMENT_TAG s_atagAppletObject[] = {ETAG_APPLET, ETAG_OBJECT, ETAG_NULL};
const ELEMENT_TAG s_atagTr[] = {ETAG_TR, ETAG_NULL};
const ELEMENT_TAG s_atagTbodyTfootThead[] = {ETAG_TBODY, ETAG_TFOOT, ETAG_THEAD, ETAG_NULL};
const ELEMENT_TAG s_atagColgroupTable[] = {ETAG_COLGROUP, ETAG_TABLE, ETAG_NULL};
const ELEMENT_TAG s_atagTableCellCaption[] = {ETAG_CAPTION, ETAG_TABLE, ETAG_TC, ETAG_TD, ETAG_TH, ETAG_NULL};
const ELEMENT_TAG s_atagColgroup[] = {ETAG_COLGROUP, ETAG_NULL};
const ELEMENT_TAG s_atagObjectApplet[] = {ETAG_OBJECT, ETAG_APPLET, ETAG_NULL};
const ELEMENT_TAG s_atagFrameset[]  = {ETAG_FRAMESET, ETAG_NULL};
const ELEMENT_TAG s_atagEOFProhibited[] = {ETAG_APPLET, ETAG_COMMENT, ETAG_OBJECT, ETAG_SCRIPT, ETAG_STYLE, ETAG_TITLE_ELEMENT, ETAG_GENERIC_LITERAL, ETAG_GENERIC_NESTED_LITERAL, ETAG_NOSCRIPT, ETAG_NOFRAMES, ETAG_NOEMBED, ETAG_IFRAME, ETAG_NULL };


//+------------------------------------------------------------------------
//
//  Function:   MergableTags
//
//  Synopsis:   Returns TRUE if tags can be merged with MergeTag
//
//-------------------------------------------------------------------------
const ELEMENT_TAG s_atagTitles[] = {ETAG_TITLE_ELEMENT, ETAG_TITLE_TAG, ETAG_NULL};
const ELEMENT_TAG * const s_aatagMergable[] = {s_atagTitles, NULL};

BOOL
MergableTags(const ELEMENT_TAG etag1, const ELEMENT_TAG etag2)
{
    if (etag1 == etag2)
        return TRUE;
        
    const ELEMENT_TAG * const * patag;

    for (patag = s_aatagMergable; *patag; patag += 1)
    {
        if (IsEtagInSet(etag1, *patag) && IsEtagInSet(etag2, *patag))
            return TRUE;
    }
    
    return FALSE;
}

// Special parsing class for unknown tags - address is tested for equality


// ETAG_UNKNOWN

const CHtmlParseClass s_hpcUnknown =
{
    SCOPE_EMPTY,                    // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagNull,                     // _atagEndContainers
    s_atagNull,                     // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    NULL,                           // _atagProhibitedContainers
    NULL,                           // _atagRequiredContainers
    ETAG_NULL,                      // _etagDefaultContainer
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// ROOT

// The ROOT element is never created - it exists in every tree.
// It excludes text, and implies a BODY element if text is injected.

static const CHtmlParseClass s_hpcRoot =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagNull,                     // _atagEndContainers
    s_atagNull,                     // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    NULL,                           // _atagProhibitedContainers
    NULL,                           // _atagRequiredContainers
    ETAG_NULL,                      // _etagDefaultContainer
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_EXCLUDE,              // _textscope
    ETAG_BODY,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// HTML

// The HTML element can be explicitly or implicitly created (it is required by the HEAD and BODY).
// It immediately implies the HEAD subcontainer
// HTML excludes text (text implies a BODY)



static const CHtmlParseClass s_hpcHtml =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagHtml,                     // _atagEndContainers
    s_atagHtml,                     // _atagBeginContainers
    s_atagHtml,                     // _atagMaskingContainers       ; HTML in another HTML is masked
    NULL,                           // _atagProhibitedContainers
    NULL,                           // _atagRequiredContainers
    ETAG_NULL,                      // _etagDefaultContainer
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_EXCLUDE,              // _textscope                   ; exclude text
    ETAG_BODY,                      // _etagTextSubcontainer        ; if text appears inside, it implies a BODY
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    TRUE,                           // _fMerge                      ; IE5 bug 43801: merge HTML tags
    ETAG_HEAD,                      // _etagImplicitChild           ; HTML always has a HEAD child
    FALSE,                          // _fCloseImplicitChild         ; the child is left open
};

// HEAD

// The HEAD element will be implicitly created by the HTML element
// If HEAD tags are nested inside the HEAD section, they will be merged
// HEAD excludes text (text implies a BODY, which will close the HEAD)

static const CHtmlParseClass s_hpcHead =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagHtml,                     // _atagEndContainers           ; HEAD is strictly contained by HTML
    s_atagHtml,                     // _atagBeginContainers         ; HEAD tag parse does not search above containing HTML
    s_atagBodyHead,                 // _atagMaskingContainers       ; HEAD tag in a BODY is masked
    NULL,                           // _atagProhibitedContainers
    s_atagHtml,                     // _atagRequiredContainers      ; HEAD tag requires an HTML tag
    ETAG_HTML,                      // _etagDefaultContainer        ; HEAD implies HTML if one isn't present
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    CreateHtmHeadParseCtx,          // _pfnHpxCreator
    TRUE,                           // _fMerge                      ; HEAD tag in a HEAD is merged
    ETAG_TITLE_ELEMENT,             // _etagImplicitChild           ; HEAD always has a TITLE child
    TRUE,                           // _fCloseImplicitChild         ; the child is implicitly closed
};

// BODY

static const CHtmlParseClass s_hpcBody =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagHtml,                     // _atagEndContainers           ; BODY is strictly contained by HTML
    s_atagHtml,                     // _atagBeginContainers         ; BODY tag parse does not search above containing HTML
    s_atagBody,                     // _atagMaskingContainers
    s_atagHead,                     // _atagProhibitedContainers    ; closes any open HEAD
    s_atagHtml,                     // _atagRequiredContainers      ; BODY tag requires an HTML tag
    ETAG_HTML,                      // _etagDefaultContainer        ; BODY implies HTML if one isn't present
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_INCLUDE,              // _textscope                   ; BODY can contain text
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    CreateHtmBodyParseCtx,          // _pfnHpxCreator
    TRUE,                           // _fMerge                      ; BODY tag in a BODY is merged
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// PARAM

static const CHtmlParseClass s_hpcParam =
{
    SCOPE_EMPTY,                    // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagNull,                     // _atagEndContainers           ; end tags are irrelevant
    s_atagAppletObject,             // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    NULL,                           // _atagProhibitedContainers
    s_atagAppletObject,             // _atagRequiredContainers      ; must appear inside an OBJECT
    ETAG_NULL,                      // _etagDefaultContainer        ; if neither is present, unknownify
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_EXCLUDE,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// BGSOUND, LINK, META, NEXTID

static const CHtmlParseClass s_hpcEmpty =
{
    SCOPE_EMPTY,                    // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagNull,                     // _atagEndContainers           ; end tags are irrelevant
    s_atagHtml,                     // _atagBeginContainers         ; when requiring BODY/HEAD, stop searching at HTML
    NULL,                           // _atagMaskingContainers
    NULL,                           // _atagProhibitedContainers
    s_atagBodyHead,                 // _atagRequiredContainers      ; must appear inside a BODY or HEAD
    ETAG_HEAD,                      // _etagDefaultContainer        ; if neither is present, imply a HEAD
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};


// AREA

// TODO: remove BASE

static const CHtmlParseClass s_hpcArea =
{
    SCOPE_EMPTY,                    // _scope
    TEXTTYPE_QUERY,                 // _texttype                    ; area is text-like when pasting
    s_atagNull,                     // _atagEndContainers           ; end tags are irrelevant
    s_atagHtml,                     // _atagBeginContainers         ; when requiring BODY/HEAD, stop searching at HTML
    NULL,                           // _atagMaskingContainers
    NULL,                           // _atagProhibitedContainers
    s_atagBodyHead,                 // _atagRequiredContainers      ; must appear inside a BODY or HEAD
    ETAG_HEAD,                      // _etagDefaultContainer        ; if neither is present, imply a HEAD
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};


// BR, EMBED, IMG, INPUTTXT, ISINDEX, WBR

static const CHtmlParseClass s_hpcEmptyText =
{
    SCOPE_EMPTY,                    // _scope
    TEXTTYPE_ALWAYS,                // _texttype                    ; these empty tags are textlike
    s_atagNull,                     // _atagEndContainers
    s_atagHtml,                     // _atagBeginContainers         ; when requiring BODY/HEAD, stop searching at HTML
    NULL,                           // _atagMaskingContainers
    NULL,                           // _atagProhibitedContainers
    s_atagBodyHead,                 // _atagRequiredContainers      ; must appear inside a BODY or HEAD (note that "textlike" will normally ensure BODY already)
    ETAG_BODY,                      // _etagDefaultContainer        ; if neither is present, imply a BODY
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// ACRONYM, B, BDO, BIG, BLINK, CITE, CODE, DEL, DFN, EM, FONT,
// I, INS, KBD, LABEL, Q, S, SAMP, SMALL, STRIKE, STRONG, SUB,
// SUP, TT, U, VAR

static const CHtmlParseClass s_hpcOverlap =
{
    SCOPE_OVERLAP,                  // _scope
    TEXTTYPE_QUERY,                 // _texttype
    s_atagOverlapBoundary,          // _atagEndContainers           ; don't match end tags beyond TD-like boundaries
    s_atagOverlapBoundary,          // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    NULL,                           // _atagProhibitedContainers
    s_atagOverlapRequired,          // _atagRequiredContainers      ; must appear inside a BODY or TD-like container
    ETAG_BODY,                      // _etagDefaultContainer        ; if none is present, queue for a BODY
    TRUE,                           // _fQueueForRequired           ; queue
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};


// MAP: map can overlap tags which can even overlap <TD>s etc

// MAP

static const CHtmlParseClass s_hpcMap =
{
    SCOPE_OVERLAP,                  // _scope
    TEXTTYPE_QUERY,                 // _texttype                    ; map is text-like when pasting
    s_atagNull,                     // _atagEndContainers
    s_atagHtml,                     // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    NULL,                           // _atagProhibitedContainers
    s_atagBodyHead,                 // _atagRequiredContainers      ; must appear inside a BODY or HEAD
    ETAG_HEAD,                      // _etagDefaultContainer        ; if neither is present, imply a HEAD
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};


// overlapping tags which can even overlap <TD>s etc

// BASE, NOEMBED_OFF, NOFRAMES_OFF, NOSCRIPT_OFF

static const CHtmlParseClass s_hpcUnderlap =
{
    SCOPE_OVERLAP,                  // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagNull,                     // _atagEndContainers
    s_atagHtml,                     // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    NULL,                           // _atagProhibitedContainers
    s_atagBodyHead,                 // _atagRequiredContainers      ; must appear inside a BODY or HEAD
    ETAG_HEAD,                      // _etagDefaultContainer        ; if neither is present, imply a HEAD
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};


// FORM:
// FORMs can overlap anything, but they mask themselves

static const CHtmlParseClass s_hpcForm =
{
    SCOPE_OVERLAP,                  // _scope
    TEXTTYPE_QUERY,                 // _texttype                    ; forms are text-like when pasting
    s_atagNull,                     // _atagEndContainers
    s_atagHtml,                     // _atagBeginContainers
    s_atagForm,                     // _atagMaskingContainers
    NULL,                           // _atagProhibitedContainers
    s_atagBodyHead,                 // _atagRequiredContainers      ; must appear inside a BODY or HEAD
    ETAG_HEAD,                      // _etagDefaultContainer        ; if neither is present, imply a HEAD
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// GENERIC

static const CHtmlParseClass s_hpcGeneric =
{
    SCOPE_OVERLAP,                  // _scope
    TEXTTYPE_QUERY,                 // _texttype                    ; text-like when pasting.  What a hack!  (anandra)
    s_atagNull,                     // _atagEndContainers
    s_atagHtml,                     // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    NULL,                           // _atagProhibitedContainers
    s_atagBodyHead,                 // _atagRequiredContainers      ; must appear inside a BODY or HEAD, or TD-like container
    ETAG_HEAD,                      // _etagDefaultContainer        ; if none is present, imply a HEAD
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_INCLUDE,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};


// GENERIC_LITERAL

static const CHtmlParseClass s_hpcGenericLiteral =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_QUERY,                 // _texttype                    ; text-like when pasting
    s_atagNull,                     // _atagEndContainers           ; don't match end tags beyond TD-like boundaries
    s_atagHtml,                     // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    NULL,                           // _atagProhibitedContainers
    s_atagBodyHead,                 // _atagRequiredContainers      ; must appear inside a BODY or HEAD, or TD-like container
    ETAG_HEAD,                      // _etagDefaultContainer        ; if none is present, imply a HEAD
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_INCLUDE,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    CreateHtmGenericParseCtx,       // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// DEFAULT:

static const CHtmlParseClass s_hpcDefault =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagNull,                     // _atagEndContainers
    s_atagNull,                     // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    NULL,                           // _atagProhibitedContainers
    NULL,                           // _atagRequiredContainers
    ETAG_NULL,                      // _etagDefaultContainer
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_EXCLUDE,              // _textscope
    ETAG_BODY,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// COMMENT:
// COMMENTs are literal, and specify a COMMENT context.

static const CHtmlParseClass s_hpcComment =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagNull,                     // _atagEndContainers
    s_atagHtml,                     // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    NULL,                           // _atagProhibitedContainers
    s_atagBodyHead,                 // _atagRequiredContainers      ; must appear inside a BODY or HEAD
    ETAG_HEAD,                      // _etagDefaultContainer        ; if neither is present, imply a HEAD
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_INCLUDE,              // _textscope                   ; able to contain text
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    CreateHtmCommentParseCtx,       // _pfnHpxCreator               ; create a CommentParseCtx
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};


// TITLE:
// TITLEs are literal, and specify a TITLE context.

// The first parse context is used to parse a title tag; note that the title tag is unique in that
// it is able to be parsed being entered in the tree; it is released as soon as it is finished
// being parsed

static const CHtmlParseClass s_hpcTitleTag =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagNull,                     // _atagEndContainers
    s_atagHtml,                     // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    NULL,                           // _atagProhibitedContainers
    s_atagBodyHead,                 // _atagRequiredContainers      ; must appear inside a BODY or HEAD
    ETAG_HEAD,                      // _etagDefaultContainer        ; if neither is present, imply a HEAD
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_INCLUDE,              // _textscope                   ; able to contain text
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    CreateHtmTitleParseCtx,         // _pfnHpxCreator               ; create a TitleParseCtx
    TRUE,                           // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// The title element is automatically placed at the beginning of the <HEAD> by the parser
// Should have identical rules as TitleTag except that it doesn't have a context

static const CHtmlParseClass s_hpcTitleElement =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagNull,                     // _atagEndContainers
    s_atagHtml,                     // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    NULL,                           // _atagProhibitedContainers
    s_atagBodyHead,                 // _atagRequiredContainers      ; must appear inside a BODY or HEAD
    ETAG_HEAD,                      // _etagDefaultContainer        ; if neither is present, imply a HEAD
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_INCLUDE,              // _textscope                   ; able to contain text
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator               ; create a TitleParseCtx
    TRUE,                           // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// SCRIPT:
// SCRIPTs are literal, and specify a SCRIPT context.

static const CHtmlParseClass s_hpcScript =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagNull,                     // _atagEndContainers
    s_atagHtml,                     // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    NULL,                           // _atagProhibitedContainers
    s_atagBodyHead,                 // _atagRequiredContainers      ; must appear inside a BODY or HEAD
    ETAG_HEAD,                      // _etagDefaultContainer        ; if neither is present, imply a HEAD
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_INCLUDE,              // _textscope                   ; able to contain text
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    CreateHtmScriptParseCtx,        // _pfnHpxCreator               ; create a ScriptParseCtx
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};


// STYLE:
// STYLEs are literal, and specify a STYLE context

static const CHtmlParseClass s_hpcStyle =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagNull,                     // _atagEndContainers
    s_atagHtml,                     // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    NULL,                           // _atagProhibitedContainers
    s_atagBodyHead,                 // _atagRequiredContainers      ; must appear inside a BODY or HEAD
    ETAG_HEAD,                      // _etagDefaultContainer        ; if neither is present, imply a HEAD
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_INCLUDE,              // _textscope                   ; able to contain text
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    CreateHtmStyleParseCtx,         // _pfnHpxCreator               ; create a StyleParseCtx
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};


// TEXTAREA:
// TEXTAREAs are literal, and specify a TEXTAREA context

static const CHtmlParseClass s_hpcTextarea =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_ALWAYS,                // _texttype                    ; textlike; force BODY etc
    s_atagNull,                     // _atagEndContainers
    s_atagHtml,                     // _atagBeginContainers
    s_atagButton,                   // _atagMaskingContainers       ; hidden by BUTTON container
    s_atagSelect,                   // _atagProhibitedContainers    ; close previously open SELECT
    s_atagBodyHead,                 // _atagRequiredContainers      ; must appear inside a BODY or HEAD
    ETAG_BODY,                      // _etagDefaultContainer        ; if neither is present, imply a BODY
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_INCLUDE,              // _textscope                   ; able to contain text
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    CreateHtmPreParseCtx,           // _pfnHpxCreator               ; create a StyleParseCtx
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// Raw whitsepace - raw text that can be queued

static CHtmlParseClass s_hpcRawWhitespace =
{
    SCOPE_EMPTY,                    // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagNull,                     // _atagEndContainers           ; end tags are irrelevant
    s_atagHtml,                     // _atagBeginContainers         ; when requiring BODY/HEAD, stop searching at HTML
    NULL,                           // _atagMaskingContainers
    NULL,                           // _atagProhibitedContainers
    s_atagBodyHead,                 // _atagRequiredContainers      ; must appear inside a BODY or HEAD
    ETAG_BODY,                      // _etagDefaultContainer        ; if neither is present, imply a HEAD
    TRUE,                           // _fQueueForRequired
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};


// NOEMBED, NOFRAMES, NOSCRIPT
// These tag define a context that turns all their contents into unknown tags

static const CHtmlParseClass s_hpcNoShow =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagNull,                     // _atagEndContainers
    s_atagHtml,                     // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    s_atagNoShow,                   // _atagProhibitedContainers
    s_atagBodyHeadFrameSet,         // _atagRequiredContainers      ; must appear inside a BODY or HEAD or FRAMESET
    ETAG_HEAD,                      // _etagDefaultContainer        ; if neither is present, imply a HEAD
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_INCLUDE,              // _textscope                   ; able to contain text
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    CreateHtmNoShowParseCtx,        // _pfnHpxCreator               ; create a NoshowParseCtx
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// IFRAME:
// IFRAMEs have their own context which hides contents

static const CHtmlParseClass s_hpcIframe =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_ALWAYS,                // _texttype                    ; textlike; force BODY etc
    s_atagNull,                     // _atagEndContainers
    s_atagHtml,                     // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    s_atagIframe,                   // _atagProhibitedContainers    ; close a previously open IFRAME
    s_atagBody,                     // _atagRequiredContainers      ; must appear inside a BODY
    ETAG_BODY,                      // _etagDefaultContainer        ; if not present, imply a BODY
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_INCLUDE,              // _textscope                   ; able to contain text
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    CreateHtmIframeParseCtx,        // _pfnHpxCreator               ; create an IframeParseCtx
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};


// BASEFONT

static const CHtmlParseClass s_hpcBasefont =
{
    SCOPE_OVERLAP,                  // _scope
    TEXTTYPE_QUERY,                 // _texttype                    ; basefont is text-like when pasting
    s_atagOverlapBoundary,          // _atagEndContainers           ; close at TD-like boundaries
    s_atagHtml,                     // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    s_atagBasefont,                 // _atagProhibitedContainers    ; close any previously open BASEFONT
    s_atagBodyHead,                 // _atagRequiredContainers      ; must appear inside a BODY or HEAD
    ETAG_HEAD,                      // _etagDefaultContainer        ; if neither is present, imply a HEAD
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};


// HYPERLINKS:
// A tags end <A> tags

static const CHtmlParseClass s_hpcAnchor =
{
    SCOPE_OVERLAP,                  // _scope
    TEXTTYPE_QUERY,                 // _texttype
    s_atagOverlapBoundary,          // _atagEndContainers           ; close at TD-like boundaries
    s_atagOverlapBoundary,          // _atagBeginContainers
    s_atagButton,                   // _atagMaskingContainers       ; hide when inside BUTTON
    s_atagA,                        // _atagProhibitedContainers    ; close any previously open A
    s_atagOverlapRequired,          // _atagRequiredContainers      ; must appear inside a BODY or HEAD
    ETAG_BODY,                      // _etagDefaultContainer        ; if neither is present, queue for a BODY
    TRUE,                           // _fQueueForRequired           ; queue
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};


// NOBR:
// NOBR tags end <NOBR> tags

static const CHtmlParseClass s_hpcNobr =
{
    SCOPE_OVERLAP,                  // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagOverlapBoundary,          // _atagEndContainers           ; close at TD-like boundaries
    s_atagHtml,                     // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    s_atagNobr,                     // _atagProhibitedContainers    ; close any previously open NOBR
    s_atagBodyGeneric,              // _atagRequiredContainers      ; must appear inside a BODY or GENERIC
    ETAG_BODY,                      // _etagDefaultContainer        ; if neither is present, imply a BODY
    TRUE,                           // _fQueueForRequired
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// BR:
// end-BR tags become BR tags

static const CHtmlParseClass s_hpcBr =
{
    SCOPE_EMPTY,                    // _scope
    TEXTTYPE_ALWAYS,                // _texttype                    ; textlike; force BODY etc
    s_atagNull,                     // _atagEndContainers
    s_atagHtml,                     // _atagBeginContainers         ; when requiring BODY/HEAD, stop searching at HTML
    NULL,                           // _atagMaskingContainers
    NULL,                           // _atagProhibitedContainers
    s_atagBodyHead,                 // _atagRequiredContainers      ; must appear inside a BODY or HEAD (note that "textlike" will normally ensure BODY already)
    ETAG_BODY,                      // _etagDefaultContainer        ; if neither is present, imply a BODY
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_IMPLICIT_BEGIN,            // _etagUnmatchedSubstitute     ; </BR> becomes <BR>
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};


// PARAGRAPHS:
// Paragraph tags (P, ADDRESS,...) end <P>s unless nested inside <UL>s etc
// An unmatched close tag implies a begin tag right before it


// ADDRESS, BLOCKQUOTE, DIR, FIELDSET, P, FIELDSET

static const CHtmlParseClass s_hpcParagraph =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_QUERY,                 // _texttype                    ; textlike; force BODY etc (now forced by _atagRequired
    s_atagNestBoundary,             // _atagEndContainers           ; close at TABLE-like boundaries
    s_atagPBoundary,                // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    s_atagP,                        // _atagProhibitedContainers    ; close any previously open P
    s_atagPBoundaryGeneric,         // _atagRequiredContainers      ; must appear inside a BODY or P boundary container
    ETAG_BODY,                      // _etagDefaultContainer        ; if none is present, imply a BODY
    TRUE,                           // _fQueueForRequired           ; yes, queue when in HEAD
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_IMPLICIT_BEGIN,            // _etagUnmatchedSubstitute     ; if only the end tag appears, imply the begin tag
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

#if NEVER

// DL, MENU, OL, UL // replaced by hpcParagraph to be compat with IE4 and fix IE5 bug 39509

static const CHtmlParseClass s_hpcList =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_ALWAYS,                // _texttype                    ; textlike; force BODY etc
    s_atagNestBoundary,             // _atagEndContainers           ; close at TABLE-like boundaries
    s_atagPBoundary,                // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    s_atagListCloses,               // _atagProhibitedContainers    ; close any previously open P
    s_atagPBoundaryGeneric,         // _atagRequiredContainers      ; must appear inside a BODY or P boundary container
    ETAG_BODY,                      // _etagDefaultContainer        ; if none is present, imply a BODY
    TRUE,                           // _fQueueForRequired           ; yes, queue when in HEAD
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_IMPLICIT_BEGIN,            // _etagUnmatchedSubstitute     ; if only the end tag appears, imply the begin tag
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

#endif

// LISTING, PLAINTEXT, PRE, XMP

static const CHtmlParseClass s_hpcPre =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_ALWAYS,                // _texttype                    ; textlike; force BODY etc
    s_atagNestBoundary,             // _atagEndContainers           ; close at TABLE-like boundaries
    s_atagPBoundary,                // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    s_atagP,                        // _atagProhibitedContainers    ; close any previously open P
    s_atagPBoundary,                // _atagRequiredContainers      ; must appear inside a BODY or P boundary container
    ETAG_BODY,                      // _etagDefaultContainer        ; if none is present, imply a BODY
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_IMPLICIT_BEGIN,            // _etagUnmatchedSubstitute     ; if only the end tag appears, imply the begin tag
    CreateHtmPreParseCtx,           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// LEGEND

static const CHtmlParseClass s_hpcLegend =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_ALWAYS,                // _texttype                    ; textlike; force BODY etc
    s_atagNestBoundary,             // _atagEndContainers           ; close at TABLE-like boundaries
    s_atagHtml,                     // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    NULL,                           // _atagProhibitedContainers
    s_atagFieldset,                 // _atagRequiredContainers      ; must appear inside a FIELDSET
    ETAG_NULL,                      // _etagDefaultContainer        ; if neither is present, unknownify
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};


// CENTER tag:
// Closes paragraphs (see IE4 bug 29566) been requested that it shouldn't (IE5 bug 1379) but we haven't changed the behavior
// if we have an unmatched end CENTER, add an implicit begin CENTER
static const CHtmlParseClass s_hpcCenter =
{
    SCOPE_OVERLAP,                  // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagOverlapBoundary,          // _atagEndContainers           ; close at TD-like boundaries
    s_atagPBoundary,                // _atagBeginContainers         ; prohibited+required container is P-like
    NULL,                           // _atagMaskingContainers
    s_atagP,                        // _atagProhibitedContainers    ; closes P
    s_atagPBoundaryGeneric,         // _atagRequiredContainers      ; match _atagBeginContainers
    ETAG_BODY,                      // _etagDefaultContainer        ; if none is present, queue for BODY
    TRUE,                           // _fQueueForRequired           ; yes, queue
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_IMPLICIT_BEGIN,            // _etagUnmatchedSubstitute     ; if only the end tag appears, imply the begin tag
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// Hx:
// Header tags are similar to paragraph tags, but they have overlapping scope.

// H1, H2, H3, H4, H5, H6

const ELEMENT_TAG s_atagHeaders[] = {ETAG_H1, ETAG_H2, ETAG_H3, ETAG_H4, ETAG_H5, ETAG_H6, ETAG_NULL};

static const CHtmlParseClass s_hpcHeader =
{
    SCOPE_OVERLAP,                  // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagOverlapBoundary,          // _atagEndContainers           ; close at TD-like boundaries
    s_atagPBoundary,                // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    s_atagP,                        // _atagProhibitedContainers    ; close any previously open P
    s_atagPBoundaryGeneric,         // _atagRequiredContainers      ; must appear inside a BODY or P boundary container
    ETAG_BODY,                      // _etagDefaultContainer        ; if none is present, queue for a BODY
    TRUE,                           // _fQueueForRequired           ; yes, queue
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    s_atagHeaders,                  // _atagMatch                   ; any </Hx> can match any other <Hy>
    ETAG_IMPLICIT_BEGIN,            // _etagUnmatchedSubstitute     ; if only the end tag appears, imply the begin tag
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// HR:
// HRs close the preceding paragraph.

static const CHtmlParseClass s_hpcHr =
{
    SCOPE_EMPTY,                    // _scope
    TEXTTYPE_ALWAYS,                // _texttype                    ; textlike; force BODY etc
    s_atagNull,                     // _atagEndContainers           ; end tags are irrelevant
    s_atagPBoundary,                // _atagBeginContainers         ; when closing Ps stop searching at TABLE-like boundaries
    NULL,                           // _atagMaskingContainers
    s_atagP,                        // _atagProhibitedContainers    ; closes P
    s_atagPBoundary,                // _atagRequiredContainers      ; must appear inside a BODY or TABLE-like container
    ETAG_BODY,                      // _etagDefaultContainer        ; if none is present, imply a BODY
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};



// LISTS:
// LIs close LIs; DDs and DTs close DDs and DTs

// LI

static const CHtmlParseClass s_hpcLI =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_ALWAYS,                // _texttype                    ; textlike; force BODY etc
    s_atagNestBoundary,             // _atagEndContainers           ; close at TABLE-like boundaries
    s_atagPBoundary,                // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    s_atagLiP,                      // _atagProhibitedContainers    ; close any previously open LI or P
    s_atagPBoundary,                // _atagRequiredContainers      ; must appear inside a BODY or P-boundary container
    ETAG_BODY,                      // _etagDefaultContainer        ; if none is present, imply a BODY
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};


// DD, DT

static const CHtmlParseClass s_hpcDDDT =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_ALWAYS,                // _texttype                    ; textlike; force BODY etc
    s_atagNestBoundary,             // _atagEndContainers           ; close at TABLE-like boundaries
    s_atagPBoundary,                // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    s_atagDdDtP,                    // _atagProhibitedContainers    ; close any previously open DD, DT, or P
    s_atagPBoundary,                // _atagRequiredContainers      ; must appear inside a BODY or P-boundary container
    ETAG_BODY,                      // _etagDefaultContainer        ; if none is present, imply a BODY
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// SELECT:
// SELECTs specify a SELECT context

static const CHtmlParseClass s_hpcSelect =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_ALWAYS,                // _texttype                    ; textlike; force BODY etc
    s_atagNull,                     // _atagEndContainers           ; irrelevant
    s_atagHtml,                     // _atagBeginContainers
    s_atagButton,                   // _atagMaskingContainers
    s_atagSelect,                   // _atagProhibitedContainers    ; close any previously open SELECT
    s_atagBody,                     // _atagRequiredContainers      ; must appear inside a BODY
    ETAG_BODY,                      // _etagDefaultContainer        ; if none is present, imply a BODY
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_INCLUDE,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    CreateHtmSelectParseCtx,        // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// OPTGROUP:
// OPTGROUPs do not accept text, and should only appear inside a SELECT

static const CHtmlParseClass s_hpcOptgroup =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagSelect,                   // _atagEndContainers           ; if a SELECT container ends, the OPTGROUP ends
    s_atagSelect,                   // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    s_atagOptgroup,                 // _atagProhibitedContainers    ; close any previously open OPTGROUP
    s_atagSelect,                   // _atagRequiredContainers      ; must appear inside a SELECT
    ETAG_NULL,                      // _etagDefaultContainer        ; if none is present, unknownify
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_INCLUDE,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// OPTION:
// OPTIONs accept text, and should only appear inside a SELECT

static const CHtmlParseClass s_hpcOption =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagSelect,                   // _atagEndContainers           ; if a SELECT container ends, the OPTION ends
    s_atagSelect,                   // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    s_atagOption,                   // _atagProhibitedContainers    ; close any previously open SELECT
    s_atagSelect,                   // _atagRequiredContainers      ; must appear inside a SELECT
    ETAG_NULL,                      // _etagDefaultContainer        ; if none is present, unknownify
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_INCLUDE,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// OBJECT/APPLET:
// OBJECTs and APPLETs have their own context which accepts params

static const CHtmlParseClass s_hpcObjectApplet =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_QUERY,                 // _texttype                    ; textlike unless in HEAD in cases; see CHtmHeadParseCtx
    s_atagHtml,                     // _atagEndContainers
    s_atagHtml,                     // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    s_atagAppletObject,             // _atagProhibitedContainers    ; close any previously open APPLET or OBJECT
    s_atagBodyHead,                 // _atagRequiredContainers      ; must appear inside a BODY or HEAD (note textlike will usually imply BODY)
    ETAG_HEAD,                      // _etagDefaultContainer        ; if none is present, imply HEAD
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_INCLUDE,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    CreateHtmObjectParseCtx,        // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// HTMLAREA:
// HTMLAREA have their own context for storing text

#ifdef  NEVER
static const CHtmlParseClass s_hpcRichtext =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_ALWAYS,                // _texttype                    ; textlike; force BODY etc
    s_atagNull,                     // _atagEndContainers
    s_atagHtml,                     // _atagBeginContainers
    s_atagButton,                   // _atagMaskingContainers       ; hidden by BUTTON container
    s_atagSelect,                   // _atagProhibitedContainers    ; close previously open SELECT
    s_atagBodyHead,                 // _atagRequiredContainers      ; must appear inside a BODY or HEAD
    ETAG_BODY,                      // _etagDefaultContainer        ; if neither is present, imply a BODY
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_INCLUDE,              // _textscope                   ; able to contain text
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};
#endif


// MARQUEE:

static const CHtmlParseClass s_hpcMarquee =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_ALWAYS,                // _texttype                    ; textlike; force BODY etc
    s_atagHtml,                     // _atagEndContainers
    s_atagHtml,                     // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    NULL,                           // _atagProhibitedContainers
    s_atagBody,                     // _atagRequiredContainers      ; must appear inside a BODY
    ETAG_BODY,                      // _etagDefaultContainer        ; if none is present, imply BODY
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_INCLUDE,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// TABLES:
// Tables contain sections, which contain rows, which contain cells.
// <TR>s and <TBODY>s are implied where needed, but <TABLE>s are not implied.
// Cells, rows, and sections are implicitly closed by their peers
// <COLGROUP> is similar to a section, but is implicitly closed by cells and rows

const ELEMENT_TAG s_atagTableEndRootContainers[] = {ETAG_TABLE, ETAG_NULL};
const ELEMENT_TAG s_atagTableBeginRootContainers[] = {ETAG_BODY, ETAG_TC, ETAG_TD, ETAG_TH, ETAG_CAPTION, ETAG_TABLE, ETAG_NULL};
const ELEMENT_TAG s_atagTableProhibitedContainers[] = {ETAG_TABLE, ETAG_TC, ETAG_SELECT, ETAG_OPTGROUP, ETAG_OPTION, ETAG_NULL};

const ELEMENT_TAG s_atagTCellRootContainers[] = {ETAG_TR, ETAG_TABLE, ETAG_NULL};
const ELEMENT_TAG s_atagTCellProhibitedContainers[] = {ETAG_TC, ETAG_TD, ETAG_TH, ETAG_CAPTION, ETAG_COLGROUP, ETAG_SELECT, ETAG_OPTGROUP, ETAG_OPTION, ETAG_NULL};
const ELEMENT_TAG s_atagTCellRequiredContainers[] = {ETAG_TR, ETAG_NULL};

const ELEMENT_TAG s_atagTRowBeginContainers[] = {ETAG_THEAD, ETAG_TBODY, ETAG_TFOOT, ETAG_TABLE, ETAG_NULL};
const ELEMENT_TAG s_atagTRowEndContainers[] = {ETAG_THEAD, ETAG_TBODY, ETAG_TFOOT, ETAG_TABLE, ETAG_TD, ETAG_TH, ETAG_CAPTION, ETAG_NULL}; // NS compat: Bug 21464
const ELEMENT_TAG s_atagTRowProhibitedContainers[] = {ETAG_TR, ETAG_CAPTION, ETAG_COLGROUP, ETAG_TC, ETAG_SELECT, ETAG_OPTGROUP, ETAG_OPTION, ETAG_NULL};
const ELEMENT_TAG s_atagTRowRequiredContainers[] = {ETAG_THEAD, ETAG_TBODY, ETAG_TFOOT, ETAG_NULL};

const ELEMENT_TAG s_atagTSectionBeginContainers[] = {ETAG_TABLE, ETAG_NULL};
const ELEMENT_TAG s_atagTSectionEndContainers[] = {ETAG_TABLE, /* ETAG_TD, ETAG_TH, ETAG_CAPTION,*/ ETAG_NULL}; // see bugs 22924, 21464
const ELEMENT_TAG s_atagTSectionProhibitedContainers[] = {ETAG_THEAD, ETAG_TBODY, ETAG_TFOOT, ETAG_COLGROUP, ETAG_CAPTION, ETAG_TC, ETAG_SELECT, ETAG_OPTGROUP, ETAG_OPTION, ETAG_NULL};
const ELEMENT_TAG s_atagTSectionRequiredContainers[] = {ETAG_TABLE, ETAG_NULL};

const ELEMENT_TAG s_atagTColRootContainers[] = {ETAG_COLGROUP, ETAG_TABLE, ETAG_NULL};
const ELEMENT_TAG s_atagTColProhibitedContainers[] = {ETAG_THEAD, ETAG_TBODY, ETAG_TFOOT, ETAG_CAPTION, ETAG_TC, ETAG_SELECT, ETAG_OPTGROUP, ETAG_OPTION, ETAG_NULL};
const ELEMENT_TAG s_atagTColRequiredContainers[] = {ETAG_COLGROUP, ETAG_NULL};

const ELEMENT_TAG s_atagTCRootContainers[] = {ETAG_TABLE, ETAG_NULL};
const ELEMENT_TAG s_atagTCProhibitedContainers[] = {ETAG_TC, ETAG_TD, ETAG_TH, ETAG_CAPTION, ETAG_COLGROUP, ETAG_SELECT, ETAG_OPTGROUP, ETAG_OPTION, ETAG_NULL};
const ELEMENT_TAG s_atagTCRequiredContainers[] = {ETAG_TABLE, ETAG_NULL};

// TD, TH

static const CHtmlParseClass s_hpcTCell =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagTableTr,                  // _atagEndContainers           ; end when container TR ends; nested TABLE hides end TDs
    s_atagTable,                    // _atagBeginContainers         ; don't search beyond container TABLE
    NULL,                           // _atagMaskingContainers
    s_atagTdCloses,                 // _atagProhibitedContainers
    s_atagTr,                       // _atagRequiredContainers      ; must appear inside a TR
    ETAG_TR,                        // _etagDefaultContainer        ; if none is present, imply TR
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_INCLUDE,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    CreateHtmTextParseCtx,          // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// TC

// table compatibility cell - used to wrap text when it appears inside a disallowed table context

static const CHtmlParseClass s_hpcTC =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagTable,                    // _atagEndContainers           ; nested TABLE hides end TCs
    s_atagTable,                    // _atagBeginContainers         ; don't search beyond container TABLE
    NULL,                           // _atagMaskingContainers
    s_atagTdCloses,                 // _atagProhibitedContainers    ; same as TD
    s_atagTable,                    // _atagRequiredContainers      ; must appear inside a table
    ETAG_NULL,                      // _etagDefaultContainer
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_INCLUDE,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};


// TR


static const CHtmlParseClass s_hpcTRow =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagEndTr,                    // _atagEndContainers           ; * Nested TABLE, TD hides /TR; end when container TBODY ends
    s_atagTable,                    // _atagBeginContainers         ; don't search beyond container TABLE
    NULL,                           // _atagMaskingContainers
    s_atagTrCloses,                 // _atagProhibitedContainers
    s_atagTbodyTfootThead,          // _atagRequiredContainers      ; must appear inside a TBODY, TFOOt, THEAD
    ETAG_TBODY,                     // _etagDefaultContainer        ; if none is present, imply TBODY
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_EXCLUDE,              // _textscope                   ; don't accept text directly
    ETAG_TC,                        // _etagTextSubcontainer        ; if text appears, wrap it in a TC
    NULL,                           // _atagMatch
    ETAG_TD,                        // _etagUnmatchedSubstitute     ; NS compat bug 22985/56944: /TR ends TD but does not end table row
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// * Note that NS compat: Bug 21464 forces us to include TD and TH in the list of containers that end TR.
// This is because in the sequence <TABLE><TR><TD></TR>, the </TR> does not match the <TR>, because it
// is apparently hidden by the <TD>.



// COL

static const CHtmlParseClass s_hpcTCol =
{
    SCOPE_EMPTY,                    // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagNull,                     // _atagEndContainers           ; irrelevant
    s_atagColgroupTable,            // _atagBeginContainers         ; don't search beyond container COLGROUP, TABLE
    NULL,                           // _atagMaskingContainers
    s_atagColCloses,                // _atagProhibitedContainers
    s_atagColgroup,                 // _atagRequiredContainers      ; must appear inside a COLGROUP
    ETAG_COLGROUP,                  // _etagDefaultContainer        ; if none is present, imply COLGROUP
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// COLGROUP, TBODY, TFOOT, THEAD

static const CHtmlParseClass s_hpcTSection =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagTable,                    // _atagEndContainers           ; see bugs 22924, 21464
    s_atagTable,                    // _atagEndcontainers
    NULL,                           // _atagMaskingContainers
    s_atagTbodyCloses,              // _atagProhibitedContainers
    s_atagTable,                    // _atagRequiredContainers      ; requires a TABLE
    ETAG_NULL,                      // _etagDefaultContainer        ; none present, unknownify
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_EXCLUDE,              // _textscope
    ETAG_TC,                        // _etagTextSubcontainer        ; wrap disallowed text inside a TC
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// CAPTION

// same as TBODY, but can contain text

static const CHtmlParseClass s_hpcCaption =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagTable,                    // _atagEndContainers
    s_atagTable,                    // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    s_atagTbodyCloses,              // _atagProhibitedContainers
    s_atagTable,                    // _atagRequiredContainers      ; requires a TABLE
    ETAG_NULL,                      // _etagDefaultContainer        ; none present, unknownify
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_INCLUDE,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// TABLE

static const CHtmlParseClass s_hpcTable =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_ALWAYS,                // _texttype                    ; textlike; force BODY etc
    s_atagTable,                    // _atagEndContainers
    s_atagTableCellCaption,         // _atagBeginContainers         ; allow nesting inside TD, CAPTION, TABLE
    NULL,                           // _atagMaskingContainers
    s_atagTableCloses,              // _atagProhibitedContainers    ; close prevous TABLE, TC, SELECT, OPTION
    NULL,                           // _atagRequiredContainers
    ETAG_NULL,                      // _etagDefaultContainer
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_EXCLUDE,              // _textscope                   ; exclude text
    ETAG_TC,                        // _etagTextSubcontainer        ; wrap contained text in a TC
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};



// BUTTON:
// BUTTONs are text edits...
const ELEMENT_TAG s_atagButtonProhibitedContainers[] = {ETAG_BUTTON, ETAG_NULL};

static const CHtmlParseClass s_hpcButton =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_ALWAYS,                // _texttype                    ; textlike; force BODY etc
    s_atagNestBoundary,             // _atagEndContainers
    s_atagNestBoundary,             // _atagBeginContainers         ; TABLE-like container boundaries
    NULL,                           // _atagMaskingContainers
    s_atagButton,                   // _atagProhibitedContainers    ; close previously open BUTTON
    NULL,                           // _atagRequiredContainers
    ETAG_NULL,                      // _etagDefaultContainer
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_INCLUDE,              // _textscope                   ; exclude text
    ETAG_NULL,                      // _etagTextSubcontainer        ; wrap contained text in a TC
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// INPUT:
// INPUTs are textbox, buttons, checkbox ...
static const CHtmlParseClass s_hpcInput =
{
    SCOPE_EMPTY,                    // _scope
    TEXTTYPE_QUERY,                 // _texttype                    ; textlike only if not hidden; see CHtmTopParseCtx::QueryTextlike
    s_atagNull,                     // _atagEndContainers
    s_atagHtml,                     // _atagBeginContainers         ; when requiring BODY/HEAD, stop searching at HTML
    s_atagButton,                   // _atagMaskingContainers       ; hidden by BUTTON
    s_atagSelect,                   // _atagProhibitedContainers    ; close previously open SELECT
    s_atagBodyHead,                 // _atagRequiredContainers      ; must appear inside a BODY or HEAD (note that "textlike" will normally ensure BODY already)
    ETAG_HEAD,                      // _etagDefaultContainer        ; if neither is present, imply a HEAD
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};


// Frame and frameset have special classes for bug 54592:
// A <FORM> must be closed before they begin

// FRAME

static const CHtmlParseClass s_hpcFrame =
{
    SCOPE_EMPTY,                    // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagNull,                     // _atagEndContainers
    s_atagNull,                     // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    s_atagForm,                     // _atagProhibitedContainers
    s_atagFrameset,                 // _atagRequiredContainers
    ETAG_NULL,                      // _etagDefaultContainer
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    CreateHtmFrameParseCtx,         // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// FRAMESET

static const CHtmlParseClass s_hpcFrameset =
{
    SCOPE_NESTED,                   // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagHtml,                     // _atagEndContainers               // End HTML will end a frameset
    s_atagHtml,                     // _atagBeginContainers             // Don't look beyond an HTML for anything
    NULL,                           // _atagMaskingContainers
    s_atagFormHead,                 // _atagProhibitedContainers        // Close any open FORMs or HEADs
    s_atagHtml,                     // _atagRequiredContainers          // Require an HTML
    ETAG_HTML,                      // _etagDefaultContainer            // Imply one if there isn't one there.
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_INCLUDE,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    CreateHtmFramesetParseCtx,      // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// RAW_COMMENT

static const CHtmlParseClass s_hpcRawComment =
{
    SCOPE_EMPTY,                    // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagNull,                     // _atagEndContainers           ; end tags are irrelevant
    s_atagNull,                     // _atagBeginContainers         ; begin tags are irrelevant
    NULL,                           // _atagMaskingContainers
    NULL,                           // _atagProhibitedContainers
    NULL,                           // _atagRequiredContainers
    ETAG_NULL,                      // _etagDefaultContainer
    FALSE,                          // _fQueueForRequired
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};


// RUBY ADDITIONS

// RUBY tag
const ELEMENT_TAG s_atagRubyProhibited[] = {ETAG_RUBY, ETAG_RT, ETAG_NULL};

static const CHtmlParseClass s_hpcRuby =
{
    SCOPE_OVERLAP,                  // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagOverlapBoundary,          // _atagEndContainers           ; don't match end tags beyond TD-like boundaries
    s_atagOverlapBoundary,          // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    s_atagRubyProhibited,           // _atagProhibitedContainers
    s_atagOverlapRequired,          // _atagRequiredContainers      ; must appear inside a BODY or TD-like container
    ETAG_BODY,                      // _etagDefaultContainer        ; if none is present, queue for a BODY
    TRUE,                           // _fQueueForRequired           ; queue
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// RT tag
const ELEMENT_TAG s_atagRTBoundary[] = {ETAG_BUTTON, ETAG_CAPTION, ETAG_HTML, ETAG_MARQUEE, /* ETAG_HTMLAREA, */ ETAG_TD, ETAG_TH, ETAG_RUBY, ETAG_NULL};
const ELEMENT_TAG s_atagRTRequired[] = {ETAG_RUBY, ETAG_NULL};
const ELEMENT_TAG s_atagRTProhibited[]  = {ETAG_RT, ETAG_RP, ETAG_NULL};

static const CHtmlParseClass s_hpcRubyText =
{
    SCOPE_OVERLAP,                  // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagRTBoundary,	            // _atagEndContainers           ; don't match end tags beyond RUBY boundary
    s_atagRTBoundary,               // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    s_atagRTProhibited,             // _atagProhibitedContainers
    s_atagRTRequired,               // _atagRequiredContainers      ; must appear inside a RUBY container
    ETAG_NULL,                      // _etagDefaultContainer        
    FALSE,                          // _fQueueForRequired           ; queue
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// RP tag
const ELEMENT_TAG s_atagRPBoundary[] = {ETAG_BUTTON, ETAG_CAPTION, ETAG_HTML, ETAG_MARQUEE, /* ETAG_HTMLAREA, */ ETAG_TD, ETAG_TH, ETAG_RUBY, ETAG_RT, ETAG_NULL};
const ELEMENT_TAG s_atagRPProhibited[]  = {ETAG_RP, ETAG_NULL};

static const CHtmlParseClass s_hpcRubyParen =
{
    SCOPE_OVERLAP,                  // _scope
    TEXTTYPE_NEVER,                 // _texttype
    s_atagRPBoundary,	            // _atagEndContainers           ; don't match end tags beyond RUBY boundary
    s_atagRTBoundary,               // _atagBeginContainers
    NULL,                           // _atagMaskingContainers
    s_atagRPProhibited,             // _atagProhibitedContainers
    s_atagRTRequired,               // _atagRequiredContainers      ; must appear inside a RUBY container
    ETAG_NULL,                      // _etagDefaultContainer        
    FALSE,                          // _fQueueForRequired           ; queue
    TEXTSCOPE_NEUTRAL,              // _textscope
    ETAG_NULL,                      // _etagTextSubcontainer
    NULL,                           // _atagMatch
    ETAG_NULL,                      // _etagUnmatchedSubstitute
    NULL,                           // _pfnHpxCreator
    FALSE,                          // _fMerge
    ETAG_NULL,                      // _etagImplicitChild
    FALSE,                          // _fCloseImplicitChild
};

// the hash table of tag names

CPtrBagCi<ELEMENT_TAG> g_bKnownTags(&g_tagasc);

// the tagdescs

const CTagDesc g_atagdesc[] =
{
    { _T(""),               &s_hpcEmpty,                    CTextElement::CreateElement,
                            TAGDESC_TEXTLESS                },
    { _T(""),               &s_hpcUnknown,                  CUnknownElement::CreateElement,
                            TAGDESC_TEXTLESS                |
                            TAGDESC_SLOWPROCESS             },
    { SZTAG_A,              &s_hpcAnchor,                   CAnchorElement::CreateElement,
                            0                               },
    { SZTAG_ACRONYM,        &s_hpcOverlap,                  CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_ADDRESS,        &s_hpcParagraph,                CBlockElement::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_BLKSTYLEDD              },
    { SZTAG_APPLET,         &s_hpcObjectApplet,             CObjectElement::CreateElement,
                            TAGDESC_TEXTLESS                |
                            TAGDESC_WAITATEND               |
                            TAGDESC_SPECIALTOKEN            },
    { SZTAG_AREA,           &s_hpcArea,                     CAreaElement::CreateElement,
                            TAGDESC_TEXTLESS                },
    { SZTAG_B,              &s_hpcOverlap,                  CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_BASE,           &s_hpcUnderlap,                 CBaseElement::CreateElement,
                            TAGDESC_SPECIALTOKEN            |
                            TAGDESC_NEVERSAVEEND            },
    { SZTAG_BASEFONT,       &s_hpcBasefont,                 CBaseFontElement::CreateElement,
                            0                               },
    { SZTAG_BDO,            &s_hpcOverlap,                  CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_BGSOUND,        &s_hpcEmpty,                    CBGsound::CreateElement,
                            TAGDESC_SPECIALTOKEN            |
                            TAGDESC_TEXTLESS                },
    { SZTAG_BIG,            &s_hpcOverlap,                  CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_BLINK,          &s_hpcOverlap,                  CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_BLOCKQUOTE,     &s_hpcParagraph,                CBlockElement::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_SAVEINDENT              |
                            TAGDESC_SPLITBLOCKINLIST        |
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_BODY,           &s_hpcBody,                     CBodyElement::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_SAVEALWAYSEND           |
                            TAGDESC_ACCEPTHTML              |
                            TAGDESC_SPECIALTOKEN            |
                            TAGDESC_CONTAINER               |
                            TAGDESC_CONTAINSSELECTION       |
                            TAGDESC_SLOWPROCESS             },
    { SZTAG_BR,             &s_hpcBr,                       CBRElement::CreateElement,
                            TAGDESC_TEXTLESS                },
    { SZTAG_BUTTON,         &s_hpcButton,                   CButton::CreateElement,
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_ACCEPTHTML              |
                            TAGDESC_CONTAINSSELECTION       |
                            TAGDESC_CONTAINER               },
    { SZTAG_CAPTION,        &s_hpcCaption,                  CTableCaption::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_ACCEPTHTML              |
                            TAGDESC_SAVENBSPIFEMPTY         },
    { SZTAG_CENTER,         &s_hpcCenter,                   CBlockElement::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         },
    { SZTAG_CITE,           &s_hpcOverlap,                  CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_CODE,           &s_hpcOverlap,                  CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_COL,            &s_hpcTCol,                     CTableCol::CreateElement,
                            TAGDESC_TEXTLESS                |
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         },
    { SZTAG_COLGROUP,       &s_hpcTSection,                 CTableCol::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         },
    { SZTAG_COMMENT,        &s_hpcComment,                  CCommentElement::CreateElement,
                            TAGDESC_TEXTLESS                |
                            TAGDESC_LITERALTAG              |
                            TAGDESC_LITERALENT              },
    { SZTAG_DD,             &s_hpcDDDT,                     CDDElement::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_LISTITEM                |
                            TAGDESC_BLKSTYLEDD              },
    { _T(""),               &s_hpcDefault,                  CTextElement::CreateElement,
                            TAGDESC_TEXTLESS                },
    { SZTAG_DEL,            &s_hpcOverlap,                  CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_DFN,            &s_hpcOverlap,                  CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_DIR,            &s_hpcParagraph,                CUListElement::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_LIST                    |
                            TAGDESC_BLKSTYLEDD              },
    { SZTAG_DIV,            &s_hpcParagraph,                CDivElement::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_ALIGN                   |
                            TAGDESC_SPLITBLOCKINLIST        },
    { SZTAG_DL,             &s_hpcParagraph,                CDListElement::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_LIST                    |
                            TAGDESC_BLKSTYLEDD              |
                            TAGDESC_SAVEINDENT              },
    { SZTAG_DT,             &s_hpcDDDT,                     CDTElement::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_LISTITEM                |
                            TAGDESC_BLKSTYLEDD              },
    { SZTAG_EM,             &s_hpcOverlap,                  CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_EMBED,          &s_hpcEmptyText,                CPluginSite::CreateElement,
                            TAGDESC_TEXTLESS                },
    { SZTAG_FIELDSET,       &s_hpcParagraph,                CFieldSetElement::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_ALIGN                   |
                            TAGDESC_SPLITBLOCKINLIST        |
                            TAGDESC_ACCEPTHTML              },
    { SZTAG_FONT,           &s_hpcOverlap,                  CFontElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_FORM,           &s_hpcForm,                     CFormElement::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_SLOWPROCESS             },
    { SZTAG_FRAME,          &s_hpcFrame,                    CFrameElement::CreateElement,
                            TAGDESC_TEXTLESS                |
                            TAGDESC_CONTAINER               |
                            TAGDESC_SPECIALTOKEN            },
    { SZTAG_FRAMESET,       &s_hpcFrameset,                 CFrameSetSite::CreateElement,
                            TAGDESC_SPECIALTOKEN            |
                            TAGDESC_SLOWPROCESS             },
    { SZTAG_H1,             &s_hpcHeader,                   CHeaderElement::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_HEADER                  |
                            TAGDESC_BLKSTYLEDD              |
                            TAGDESC_ALIGN                   |
                            TAGDESC_SPLITBLOCKINLIST        },
    { SZTAG_H2,             &s_hpcHeader,                   CHeaderElement::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_HEADER                  |
                            TAGDESC_BLKSTYLEDD              |
                            TAGDESC_ALIGN                   |
                            TAGDESC_SPLITBLOCKINLIST        },
    { SZTAG_H3,             &s_hpcHeader,                   CHeaderElement::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_HEADER                  |
                            TAGDESC_BLKSTYLEDD              |
                            TAGDESC_ALIGN                   |
                            TAGDESC_SPLITBLOCKINLIST        },
    { SZTAG_H4,             &s_hpcHeader,                   CHeaderElement::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_HEADER                  |
                            TAGDESC_BLKSTYLEDD              |
                            TAGDESC_ALIGN                   |
                            TAGDESC_SPLITBLOCKINLIST        },
    { SZTAG_H5,             &s_hpcHeader,                   CHeaderElement::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_HEADER                  |
                            TAGDESC_BLKSTYLEDD              |
                            TAGDESC_ALIGN                   |
                            TAGDESC_SPLITBLOCKINLIST        },
    { SZTAG_H6,             &s_hpcHeader,                   CHeaderElement::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_HEADER                  |
                            TAGDESC_BLKSTYLEDD              |
                            TAGDESC_ALIGN                   |
                            TAGDESC_SPLITBLOCKINLIST        },
    { SZTAG_HEAD,           &s_hpcHead,                     CHeadElement::CreateElement,
                            TAGDESC_SAVEALWAYSEND           },
    { SZTAG_HR,             &s_hpcHr,                       CHRElement::CreateElement,
                            TAGDESC_TEXTLESS                |
                            TAGDESC_OWNLINE                 },
    { SZTAG_HTML,           &s_hpcHtml,                     CHtmlElement::CreateElement,
                            TAGDESC_SAVEALWAYSEND           |
                            TAGDESC_ENTER_TREE_IMMEDIATELY  |
                            TAGDESC_SPECIALTOKEN            |
                            TAGDESC_SLOWPROCESS             },
    { SZTAG_I,              &s_hpcOverlap,                  CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_IFRAME,         &s_hpcIframe,                   CIFrameElement::CreateElement,
                            TAGDESC_TEXTLESS                |
                            TAGDESC_SAVEALWAYSEND           |
                            TAGDESC_SPECIALTOKEN            },
    { SZTAG_IMG,            &s_hpcEmptyText,                CImgElement::CreateElement,
                            TAGDESC_TEXTLESS                |
                            TAGDESC_SPECIALTOKEN            },
    { SZTAG_INPUT,          &s_hpcInput,                    CreateInputElement,
                            TAGDESC_TEXTLESS                |
                            TAGDESC_CONTAINER               |
                            TAGDESC_CONTAINSSELECTION       |
                            TAGDESC_SPECIALTOKEN            |
                            TAGDESC_LOGICALINVISUAL         },
    { SZTAG_INS,            &s_hpcOverlap,                  CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_ISINDEX,        &s_hpcEmptyText,                CIsIndexElement::CreateElement,
                            TAGDESC_TEXTLESS                |
                            TAGDESC_SLOWPROCESS             },
    { SZTAG_KBD,            &s_hpcOverlap,                  CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_LABEL,          &s_hpcOverlap,                  CLabelElement::CreateElement,
                            0                               },
    { SZTAG_LEGEND,         &s_hpcLegend,                   CLegendElement::CreateElement,
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_OWNLINE                 |
                            TAGDESC_ACCEPTHTML              |
                            TAGDESC_CONTAINER               },
    { SZTAG_LI,             &s_hpcLI,                       CLIElement::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_LISTITEM                },
    { SZTAG_LINK,           &s_hpcEmpty,                    CLinkElement::CreateElement,
                            TAGDESC_TEXTLESS                |
                            TAGDESC_SPECIALTOKEN            |
                            TAGDESC_WAITATSTART             |
                            TAGDESC_DONTWAITFORINPLACE      },
    { SZTAG_LISTING,        &s_hpcPre,                      CBlockElement::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVEALWAYSEND           |
                            TAGDESC_SAVENBSPIFEMPTY         },
    { SZTAG_MAP,            &s_hpcMap,                      CMapElement::CreateElement,
                            TAGDESC_SAVEINDENT              },
    { SZTAG_MARQUEE,        &s_hpcMarquee,                  CMarquee::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_ACCEPTHTML              |
                            TAGDESC_CONTAINER               },
    { SZTAG_MENU,           &s_hpcParagraph,                CUListElement::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_LIST                    |
                            TAGDESC_BLKSTYLEDD              |
                            TAGDESC_SAVEINDENT              },
    { SZTAG_META,           &s_hpcEmpty,                    CMetaElement::CreateElement,
                            TAGDESC_TEXTLESS                |
                            TAGDESC_SPECIALTOKEN            |
                            TAGDESC_SAVETAGOWNLINE          },
    { SZTAG_NEXTID,         &s_hpcEmpty,                    CNextIdElement::CreateElement,
                            TAGDESC_TEXTLESS                },
    { SZTAG_NOBR,           &s_hpcNobr,                     CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_NOEMBED,        &s_hpcNoShow,                   CNoShowElement::CreateElement,
                            TAGDESC_TEXTLESS                |
                            TAGDESC_SLOWPROCESS             |
                            TAGDESC_SPECIALTOKEN            },
    { SZTAG_NOEMBED, /*OFF*/&s_hpcUnderlap,                 CNoShowElement::CreateElement,
                            0                               },
    { SZTAG_NOFRAMES,       &s_hpcNoShow,                   CNoShowElement::CreateElement,
                            TAGDESC_TEXTLESS                |
                            TAGDESC_SPECIALTOKEN            },
    { SZTAG_NOFRAMES,/*OFF*/&s_hpcUnderlap,                 CNoShowElement::CreateElement,
                            0                               },
    { SZTAG_NOSCRIPT,       &s_hpcNoShow,                   CNoShowElement::CreateElement,
                            TAGDESC_TEXTLESS                |
                            TAGDESC_SLOWPROCESS             |
                            TAGDESC_SPECIALTOKEN            },
    { SZTAG_NOSCRIPT,/*OFF*/&s_hpcUnderlap,                 CNoShowElement::CreateElement,
                            0                               },
    { SZTAG_OBJECT,         &s_hpcObjectApplet,             CObjectElement::CreateElement,
                            TAGDESC_TEXTLESS                |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_LOGICALINVISUAL         |
                            TAGDESC_WAITATEND               |
                            TAGDESC_SPECIALTOKEN            },
    { SZTAG_OL,             &s_hpcParagraph,                COListElement::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_LIST                    |
                            TAGDESC_BLKSTYLEDD              |
                            TAGDESC_SAVEINDENT              },
    { SZTAG_OPTION,         &s_hpcOption,                   COptionElement::CreateElement,
                            0                               },
    { SZTAG_P,              &s_hpcParagraph,                CParaElement::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_BLKSTYLEDD              |
                            TAGDESC_ALIGN                   |
                            TAGDESC_SAVENBSPIFEMPTY         },
    { SZTAG_PARAM,          &s_hpcParam,                    CParamElement::CreateElement,
                            TAGDESC_TEXTLESS                },
    { SZTAG_PLAINTEXT,      &s_hpcPre,                      CBlockElement::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_DONTSAVEAFTERIMPEND     |
                            TAGDESC_LITERALTAG              |
                            TAGDESC_LITERALENT              |
                            TAGDESC_SPECIALTOKEN            },
    { SZTAG_PRE,            &s_hpcPre,                      CBlockElement::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_SAVEALWAYSEND           |
                            TAGDESC_BLKSTYLEDD              },
    { SZTAG_Q,              &s_hpcOverlap,                  CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
#ifdef  NEVER
    { SZTAG_HTMLAREA,       &s_hpcRichtext,                 CRichtext::CreateElement,
                            TAGDESC_SAVEINDENT              |
                            TAGDESC_SAVEALWAYSEND           |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_ACCEPTHTML              |
                            TAGDESC_CONTAINER               },
#endif
    { _T(""),               &s_hpcRoot,                     CTextElement::CreateElement,
                            TAGDESC_ACCEPTHTML              |
// Do NOT make the root a container
//               BAD  --->    TAGDESC_CONTAINER             |
                            TAGDESC_BLOCKELEMENT            },
    { SZTAG_RP,             &s_hpcRubyParen,                CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_RT,             &s_hpcRubyText,                 CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_RUBY,           &s_hpcRuby,                     CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_S,              &s_hpcOverlap,                  CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_SAMP,           &s_hpcOverlap,                  CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_SCRIPT,         &s_hpcScript,                   CScriptElement::CreateElement,
                            TAGDESC_TEXTLESS                |
                            TAGDESC_SAVEALWAYSEND           |
                            TAGDESC_LITERALTAG              |
                            TAGDESC_LITERALENT              |
                            TAGDESC_SPECIALTOKEN            |
                            TAGDESC_WAITATEND               },
    { SZTAG_SELECT,         &s_hpcSelect,                   CSelectElement::CreateElement,
                            TAGDESC_SAVEINDENT              |
                            TAGDESC_LOGICALINVISUAL         },
    { SZTAG_SMALL,          &s_hpcOverlap,                  CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_SPAN,           &s_hpcOverlap,                  CSpanElement::CreateElement,
                            0                               },
    { SZTAG_STRIKE,         &s_hpcOverlap,                  CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_STRONG,         &s_hpcOverlap,                  CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_STYLE,          &s_hpcStyle,                    CStyleElement::CreateElement,
                            TAGDESC_TEXTLESS                |
                            TAGDESC_SAVEALWAYSEND           |
                            TAGDESC_LITERALTAG              |
                            TAGDESC_LITERALENT              },
    { SZTAG_SUB,            &s_hpcOverlap,                  CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_SUP,            &s_hpcOverlap,                  CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_TABLE,          &s_hpcTable,                    CTable::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_WONTBREAKLINE           |
                            TAGDESC_SPECIALTOKEN            |
                            TAGDESC_SAVEINDENT              },
    { SZTAG_TBODY,          &s_hpcTSection,                 CTableSection::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         },
    { _T(""),/*TC*/         &s_hpcTC,                       CTableCaption::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_ACCEPTHTML              },
    { SZTAG_TD,             &s_hpcTCell,                    CTableCell::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_ACCEPTHTML              |
                            TAGDESC_SAVEINDENT              },
    { SZTAG_TEXTAREA,       &s_hpcTextarea,                 CTextArea::CreateElement,
                            TAGDESC_LITERALTAG              |
                            TAGDESC_SAVEALWAYSEND           |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_SAVEINDENT              |
                            TAGDESC_LOGICALINVISUAL         |
                            TAGDESC_CONTAINSSELECTION       |
                            TAGDESC_CONTAINER               },
    { SZTAG_TFOOT,          &s_hpcTSection,                 CTableSection::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         },
    { SZTAG_TH,             &s_hpcTCell,                    CTableCell::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_ACCEPTHTML              |
                            TAGDESC_SAVEINDENT              },
    { SZTAG_THEAD,          &s_hpcTSection,                 CTableSection::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         },
    { SZTAG_TITLE,          &s_hpcTitleTag,                 CTextElement::CreateElement,
                            TAGDESC_LITERALTAG              |
                            TAGDESC_SAVEALWAYSEND           |
                            TAGDESC_LITCTX                  },
    { SZTAG_TR,             &s_hpcTRow,                     CTableRow::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_SAVEINDENT              },
    { SZTAG_TT,             &s_hpcOverlap,                  CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_U,              &s_hpcOverlap,                  CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_UL,             &s_hpcParagraph,                CUListElement::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_LIST                    |
                            TAGDESC_BLKSTYLEDD              |
                            TAGDESC_SAVEINDENT              },
    { SZTAG_VAR,            &s_hpcOverlap,                  CPhraseElement::CreateElement,
                            TAGDESC_EDITREMOVABLE           },
    { SZTAG_WBR,            &s_hpcEmptyText,                CTextElement::CreateElement,
                            TAGDESC_TEXTLESS                },
    { SZTAG_XMP,            &s_hpcPre,                      CBlockElement::CreateElement,
                            TAGDESC_BLOCKELEMENT            |
                            TAGDESC_SAVEALWAYSEND           |
                            TAGDESC_SAVENBSPIFEMPTY         |
                            TAGDESC_LITERALTAG              |
                            TAGDESC_LITERALENT              },
    // ETAG_GENERIC
    { _T(""),               &s_hpcGeneric,                  CGenericElement::CreateElement,
                            0                               },
    // ETAG_GENERIC_LITERAL
    { _T(""),               &s_hpcGenericLiteral,           CGenericElement::CreateElement,
                            TAGDESC_TEXTLESS                |
                            TAGDESC_LITERALTAG              |
                            TAGDESC_LITERALENT              },
    // ETAG_GENERIC_NESTED_LITERAL
    { _T(""),               &s_hpcGenericLiteral,           CGenericElement::CreateElement,
                            TAGDESC_TEXTLESS                |
                            TAGDESC_LITERALTAG              |
                            TAGDESC_LITERALENT              },
    // ETAG_GENERIC_BUILTIN
    { _T(""),               &s_hpcGeneric,                  CGenericElement::CreateElement,
                            0                               },
    // ETAG_TITLE_ELEMENT
    { SZTAG_TITLE,          &s_hpcTitleElement,             CTitleElement::CreateElement,
                            TAGDESC_LITERALTAG              |
                            TAGDESC_TEXTLESS                |
                            TAGDESC_SAVEALWAYSEND           },
    { SZTAG_OPTGROUP,       &s_hpcOptgroup,                 COptionElement::CreateElement,
                            TAGDESC_SAVEINDENT              },
    { SZTAG_RAW_COMMENT,    &s_hpcRawComment,               CCommentElement::CreateElement,
                            TAGDESC_TEXTLESS                },
    // ETAG_RAW_SOURCE
    { _T(""),               &s_hpcEmpty,                    CTextElement::CreateElement,
                            TAGDESC_TEXTLESS                },
    // ETAG_RAW_TEXT
    { _T(""),               &s_hpcEmpty,                    CTextElement::CreateElement,
                            TAGDESC_TEXTLESS                },
    // ETAG_RAW_EOF
    { _T(""),               &s_hpcEmpty,                    CTextElement::CreateElement,
                            TAGDESC_TEXTLESS                },
    // ETAG_RAW_CODEPAGE
    { _T(""),               &s_hpcEmpty,                    CTextElement::CreateElement,
                            TAGDESC_TEXTLESS                |
                            TAGDESC_WAITATEND               | // WAITATEND: blocks when _fRestart==TRUE
                            TAGDESC_SLOWPROCESS             },
    // ETAG_RAW_DOCSIZE
    { _T(""),               &s_hpcEmpty,                    CTextElement::CreateElement,
                            TAGDESC_TEXTLESS                |
                            TAGDESC_SLOWPROCESS             },
    // ETAG_RAW_BEGINFRAG
    { _T(""),               &s_hpcEmpty,                    CTextElement::CreateElement,
                            TAGDESC_TEXTLESS                |
                            TAGDESC_SLOWPROCESS             },
    // ETAG_RAW_ENDFRAG
    { _T(""),               &s_hpcEmpty,                    CTextElement::CreateElement,
                            TAGDESC_TEXTLESS                |
                            TAGDESC_SLOWPROCESS             },
    // ETAG_RAW_BEGINSEL
    { _T(""),               &s_hpcEmpty,                    CTextElement::CreateElement,
                            TAGDESC_TEXTLESS                |
                            TAGDESC_SLOWPROCESS             },
    // ETAG_RAW_ENDSEL
    { _T(""),               &s_hpcEmpty,                    CTextElement::CreateElement,
                            TAGDESC_TEXTLESS                |
                            TAGDESC_SLOWPROCESS             },
    //ETAG_RAW_EXTENDEDTAG
    { _T(""),               &s_hpcEmpty,                    CTextElement::CreateElement,
                            TAGDESC_SLOWPROCESS             |
                            TAGDESC_TEXTLESS                |
                            TAGDESC_SPECIALTOKEN            },
    //ETAG_RAW_XMLNAMESPACE
    { _T(""),               &s_hpcEmpty,                    CTextElement::CreateElement,
                            TAGDESC_SLOWPROCESS             |
                            TAGDESC_TEXTLESS                |
                            TAGDESC_SPECIALTOKEN            },
    // ETAG_RAW_TEXTFRAG
    { _T(""),               &s_hpcEmpty,                    CTextElement::CreateElement,
                            0                               },
                            
    // ETAG_RAW_INCLUDE
    { _T(""),               &s_hpcEmpty,                    CTextElement::CreateElement,
                            TAGDESC_WAITATSTART             |
                            TAGDESC_TEXTLESS                |
                            TAGDESC_SLOWPROCESS             |
                            TAGDESC_SPECIALTOKEN            },

    // ETAG_RAW_RESOLVE
    { _T(""),               &s_hpcEmpty,                    CTextElement::CreateElement,
                            TAGDESC_SLOWPROCESS             |
                            TAGDESC_TEXTLESS                |
                            TAGDESC_SPECIALTOKEN            },
    // ETAG_RAW_REJECT
    { _T(""),               &s_hpcEmpty,                    CTextElement::CreateElement,
                            TAGDESC_SLOWPROCESS             |
                            TAGDESC_TEXTLESS                |
                            TAGDESC_SPECIALTOKEN            },
    // ETAG_RAW_COLLAPSED_WHITESPACE
    { _T(""),               &s_hpcRawWhitespace,            CTextElement::CreateElement,
                            TAGDESC_TEXTLESS                },
    // ETAG_RAW_POSTSTART
    { _T(""),               &s_hpcEmpty,                    CTextElement::CreateElement,
                            TAGDESC_SLOWPROCESS             |
                            TAGDESC_TEXTLESS                |
                            TAGDESC_SPECIALTOKEN            },
                            
};

//+------------------------------------------------------------------------
//
//  Member:     HpcFromEtag
//
//  Synopsis:   returns the parse class for the etag
//
//  Arguments:  tag (ELEMENT_TAG)
//
//  Returns:    CHtmlParseClass *
//
//-------------------------------------------------------------------------
const CHtmlParseClass *
HpcFromEtag(const ELEMENT_TAG tag)
{
    const CTagDesc *ptd = TagDescFromEtag(tag);

    Assert(ptd);

    return ptd ? ptd->_pParseClass : 0;
}

//+------------------------------------------------------------------------
//
//  Member:     TagProhibitedContainer(ELEMENT_TAG tag1, tag2)
//
//  Synopsis:   returns TRUE if tag2 is a prohibited container of tag1.
//
//  Arguments:  tag1, tag2 (ELEMENT_TAG)
//
//  Returns:    BOOL
//
//-------------------------------------------------------------------------

BOOL
TagProhibitedContainer(const ELEMENT_TAG tag1, const ELEMENT_TAG tag2)
{
    const CHtmlParseClass * phpc1 = HpcFromEtag(tag1);

    return phpc1 && phpc1->_atagProhibitedContainers &&
        IsEtagInSet(tag2, phpc1->_atagProhibitedContainers);
}

//+------------------------------------------------------------------------
//
//  Member:     TagProhibitedContainer(ELEMENT_TAG tag1, tag2)
//
//  Synopsis:   returns TRUE if tag1 is an end container of tag2.
//
//  Arguments:  tag1, tag2 (ELEMENT_TAG)
//
//  Returns:    BOOL
//
//-------------------------------------------------------------------------

BOOL
TagEndContainer(const ELEMENT_TAG tag1, const ELEMENT_TAG tag2)
{
    const CHtmlParseClass * phpc1 = HpcFromEtag(tag1);

    return phpc1 && phpc1->_atagEndContainers &&
        IsEtagInSet(tag2, phpc1->_atagEndContainers);
}

//+------------------------------------------------------------------------
//
//  Member:     TagHasNoEndTag(ELEMENT_TAG tag)
//
//  Synopsis:   returns TRUE if tag should not have an end tag
//
//  Arguments:  tag (ELEMENT_TAG)
//
//  Returns:    BOOL
//
//-------------------------------------------------------------------------

BOOL
TagHasNoEndTag(const ELEMENT_TAG tag)
{
    const CHtmlParseClass * phpc = HpcFromEtag(tag);
    const CTagDesc *ptd = TagDescFromEtag(tag);

    return  !phpc || phpc->_scope == SCOPE_EMPTY 
        ||  !ptd || ptd->HasFlag( TAGDESC_NEVERSAVEEND );
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\download\dwndoc.cxx ===
//+ ---------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1992 - 1997.
//
//  File:       dwndoc.cxx
//
//  Contents:   CDwnDoc
//
// ----------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_DWN_HXX_
#define X_DWN_HXX_
#include "dwn.hxx"
#endif

#ifndef X_DWNNOT_H_
#define X_DWNNOT_H_
#include <dwnnot.h>
#endif

// Debugging ------------------------------------------------------------------

PerfDbgTag(tagDwnDoc, "Dwn", "Trace CDwnDoc")
ExternTag(tagPalette);

MtDefine(CDwnDoc, Dwn, "CDwnDoc")
MtDefine(CDwnDocApe, CDwnDoc, "CDwnDoc::_ape")
MtDefine(CDwnDoc_aryDwnDocInfo_pv, CDwnDoc, "CDwnDoc::_aryDwnDocInfo::_pv")
MtDefine(CDwnDoc_pbSID, CDwnDoc, "CDwnDoc::_pbSID")

    
// CDwnDoc --------------------------------------------------------------------

CDwnDoc::CDwnDoc()
{
    PerfDbgLog(tagDwnDoc, this, "+CDwnDoc::CDwnDoc");

    _uSchemeDocReferer = URL_SCHEME_UNKNOWN;
    _uSchemeSubReferer = URL_SCHEME_UNKNOWN;

    PerfDbgLog(tagDwnDoc, this, "-CDwnDoc::CDwnDoc");
}

CDwnDoc::~CDwnDoc()
{
    PerfDbgLog(tagDwnDoc, this, "+CDwnDoc::~CDwnDoc");

    Assert(_pDoc == NULL);

    if (_aryDwnDocInfo.Size())
    {
        OnDocThreadCallback();
    }

    delete [] _ape;
    delete [] _pbRequestHeaders;
    delete [] _pbSID;
    
    ReleaseInterface(_pDownloadNotify);
    
    PerfDbgLog(tagDwnDoc, this, "-CDwnDoc::~CDwnDoc");
}

void
CDwnDoc::SetDocAndMarkup(CDoc * pDoc, CMarkup * pMarkup)
{
    PerfDbgLog2(tagDwnDoc, this, "+CDwnDoc::SetDoc [%lX] %ls",
        pDoc, pDoc->GetPrimaryUrl() ? pDoc->GetPrimaryUrl() : g_Zero.ach);

    Assert(_pDoc == NULL);
    Assert(_pMarkup == NULL);
    Assert(pDoc->_dwTID == GetCurrentThreadId());

    SetCallback(OnDocThreadCallback, this);

    _fCallbacks  = TRUE;
    _dwThreadId  = GetCurrentThreadId();
    _pDoc        = pDoc;
    _pDoc->SubAddRef();
    _pMarkup     = pMarkup;
    _pMarkup->SubAddRef();

    _fTrustAPPCache = _pDoc->_fTrustAPPCache;

    OnDocThreadCallback();

    PerfDbgLog(tagDwnDoc, this, "-CDwnDoc::SetDoc");
}

void
CDwnDoc::Disconnect()
{
    PerfDbgLog2(tagDwnDoc, this, "+CDwnDoc::Disconnect [%lX] %ls",
        _pDoc, (_pDoc && _pDoc->GetPrimaryUrl()) ? _pDoc->GetPrimaryUrl() : g_Zero.ach);

    CDoc * pDoc = _pDoc;
    CMarkup * pMarkup = _pMarkup;

    if (pDoc)
    {
        Assert(IsDocThread());
        super::Disconnect();

        g_csDwnDoc.Enter();

        _pDoc = NULL;
        _pMarkup = NULL;
        _fCallbacks = FALSE;

        g_csDwnDoc.Leave();

        if (_aryDwnDocInfo.Size())
        {
            OnDocThreadCallback();
            _aryDwnDocInfo.DeleteAll();
        }

        pDoc->SubRelease();
        Assert(pMarkup);
        pMarkup->SubRelease();
    }

    PerfDbgLog(tagDwnDoc, this, "-CDwnDoc::Disconnect");
}

HRESULT
CDwnDoc::AddDocThreadCallback(CDwnBindData * pDwnBindData, void * pvArg)
{
    PerfDbgLog1(tagDwnDoc, this, "-CDwnDoc::AddDocThreadCallback [%lX]",
        pDwnBindData);

    HRESULT hr = S_OK;

    if (IsDocThread())
    {
        pDwnBindData->OnDwnDocCallback(pvArg);
    }
    else
    {
        BOOL fSignal = FALSE;

        g_csDwnDoc.Enter();

        if (_fCallbacks)
        {
            // this was initialized as ddi = { pDwnBindData, pvArg }; 
            // that produces some bogus code for win16 and it generates an
            // extra data segment. so changed to the below - vreddy -7/30/97.
            DWNDOCINFO ddi;
            ddi.pDwnBindData = pDwnBindData;
            ddi.pvArg = pvArg;

            hr = THR(_aryDwnDocInfo.AppendIndirect(&ddi));

            if (hr == S_OK)
            {
                pDwnBindData->SubAddRef();
                fSignal = TRUE;
            }
        }

        g_csDwnDoc.Leave();

        if (fSignal)
        {
            super::Signal();
        }
    }

    PerfDbgLog1(tagDwnDoc, this, "-CDwnDoc::AddDocThreadCallback (hr=%lX)", hr);
    RRETURN(hr);
}

void
CDwnDoc::OnDocThreadCallback()
{
    PerfDbgLog(tagDwnDoc, this, "+CDwnDoc::OnDocThreadCallback");

    DWNDOCINFO ddi;

    while (_aryDwnDocInfo.Size() > 0)
    {
        ddi.pDwnBindData = NULL;
        ddi.pvArg = NULL;

        g_csDwnDoc.Enter();

        if (_aryDwnDocInfo.Size() > 0)
        {
            ddi = _aryDwnDocInfo[0];
            _aryDwnDocInfo.Delete(0);
        }

        g_csDwnDoc.Leave();

        if (ddi.pDwnBindData)
        {
            ddi.pDwnBindData->OnDwnDocCallback(ddi.pvArg);
            ddi.pDwnBindData->SubRelease();
        }
    }

    PerfDbgLog(tagDwnDoc, this, "-CDwnDoc::OnDocThreadCallback");
}

// CDwnDoc (QueryService) -----------------------------------------------------

HRESULT
CDwnDoc::QueryService(BOOL fBindOnApt, REFGUID rguid, REFIID riid, void ** ppvObj)
{
    PerfDbgLog2(tagDwnDoc, this, "+CDwnDoc::QueryService (fBindOnApt=%s,IsDocThread=%s)",
        fBindOnApt ? "TRUE" : "FALSE", IsDocThread() ? "TRUE" : "FALSE");

    HRESULT hr;

    if ((rguid == IID_IAuthenticate || rguid == IID_IWindowForBindingUI) && (rguid == riid))
        hr = QueryInterface(rguid, ppvObj);
    else if (fBindOnApt && IsDocThread() && _pDoc)
    {
        if (rguid == IID_IHTMLWindow2 && riid == IID_IHTMLWindow2 && _pMarkup && _pMarkup->HasWindowPending())
        {
            *ppvObj = (IHTMLWindow2 *) _pMarkup->GetWindowPending()->Window();
            ((IUnknown *) *ppvObj)->AddRef();
            hr = S_OK;
        }
        else
            hr = _pDoc->QueryService(rguid, riid, ppvObj);
    }
    else
    {
        *ppvObj = NULL;
        hr = E_NOINTERFACE;
    }

    PerfDbgLog1(tagDwnDoc, this, "-CDwnDoc::QueryService (hr=%lX)", hr);
    return(hr);
}

// CDwnDoc (Load/Save) --------------------------------------------------------

HRESULT
CDwnDoc::Load(IStream * pstm, CDwnDoc ** ppDwnDoc)
{
    PerfDbgLog(tagDwnDoc, NULL, "+CDwnDoc::Load");

    CDwnDoc *   pDwnDoc = NULL;
    BYTE        bIsNull;
    HRESULT     hr;

    hr = THR(pstm->Read(&bIsNull, sizeof(BYTE), NULL));

    if (hr || bIsNull)
        goto Cleanup;

    pDwnDoc = new CDwnDoc;

    if (pDwnDoc == NULL)
    {
        hr = E_OUTOFMEMORY;
        goto Cleanup;
    }

    hr = THR(pstm->Read(&pDwnDoc->_dwBindf, 5 * sizeof(DWORD), NULL));
    if (hr)
        goto Cleanup;

    hr = THR(pDwnDoc->_cstrDocReferer.Load(pstm));
    if (hr)
        goto Cleanup;

    hr = THR(pDwnDoc->_cstrSubReferer.Load(pstm));
    if (hr)
        goto Cleanup;

    hr = THR(pDwnDoc->_cstrAcceptLang.Load(pstm));
    if (hr)
        goto Cleanup;
        
    hr = THR(pDwnDoc->_cstrUserAgent.Load(pstm));
    if (hr)
        goto Cleanup;

    pDwnDoc->_uSchemeDocReferer = pDwnDoc->_cstrDocReferer ?
        GetUrlScheme(pDwnDoc->_cstrDocReferer) : URL_SCHEME_UNKNOWN;
    pDwnDoc->_uSchemeSubReferer = pDwnDoc->_cstrSubReferer ?
        GetUrlScheme(pDwnDoc->_cstrSubReferer) : URL_SCHEME_UNKNOWN;

Cleanup:
    if (hr && pDwnDoc)
    {
        pDwnDoc->Release();
        *ppDwnDoc = NULL;
    }
    else
    {
        *ppDwnDoc = pDwnDoc;
    }

    PerfDbgLog1(tagDwnDoc, NULL, "-CDwnDoc::Load (hr=%lX)", hr);
    RRETURN(hr);
}

HRESULT
CDwnDoc::Save(CDwnDoc * pDwnDoc, IStream * pstm)
{
    PerfDbgLog(tagDwnDoc, pDwnDoc, "+CDwnDoc::Save");

    BOOL    bIsNull = pDwnDoc == NULL;
    HRESULT hr;

    hr = THR(pstm->Write(&bIsNull, sizeof(BYTE), NULL));
    if (hr)
        goto Cleanup;

    if (pDwnDoc)
    {
        hr = THR(pstm->Write(&pDwnDoc->_dwBindf, 5 * sizeof(DWORD), NULL));
        if (hr)
            goto Cleanup;

        hr = THR(pDwnDoc->_cstrDocReferer.Save(pstm));
        if (hr)
            goto Cleanup;

        hr = THR(pDwnDoc->_cstrSubReferer.Save(pstm));
        if (hr)
            goto Cleanup;

        hr = THR(pDwnDoc->_cstrAcceptLang.Save(pstm));
        if (hr)
            goto Cleanup;

        hr = THR(pDwnDoc->_cstrUserAgent.Save(pstm));
        if (hr)
            goto Cleanup;
    }

Cleanup:
    PerfDbgLog1(tagDwnDoc, pDwnDoc, "-CDwnDoc::Save (hr=%lX)", hr);
    RRETURN(hr);
}

ULONG
CDwnDoc::GetSaveSize(CDwnDoc * pDwnDoc)
{
    PerfDbgLog(tagDwnDoc, pDwnDoc, "+CDwnDoc::GetSaveSize");

    ULONG cb = sizeof(BYTE);

    if (pDwnDoc)
    {
        cb += 5 * sizeof(DWORD);
        cb += pDwnDoc->_cstrDocReferer.GetSaveSize();
        cb += pDwnDoc->_cstrSubReferer.GetSaveSize();
        cb += pDwnDoc->_cstrAcceptLang.GetSaveSize();
        cb += pDwnDoc->_cstrUserAgent.GetSaveSize();
    }

    PerfDbgLog(tagDwnDoc, pDwnDoc, "-CDwnDoc::GetSaveSize");

    return(cb);
}

// CDwnDoc (Internal) ---------------------------------------------------------

HRESULT
CDwnDoc::SetString(CStr * pcstr, LPCTSTR psz)
{
    if (psz && *psz)
        RRETURN(pcstr->Set(psz));
    else
    {
        pcstr->Free();
        return(S_OK);
    }
}

HRESULT
CDwnDoc::SetDocReferer(LPCTSTR psz)
{
    HRESULT hr;

    hr = THR(SetString(&_cstrDocReferer, psz));

    if (hr == S_OK)
    {
        _uSchemeDocReferer = psz ? GetUrlScheme(psz) : URL_SCHEME_UNKNOWN;
    }

    RRETURN(hr);
}

HRESULT
CDwnDoc::SetSubReferer(LPCTSTR psz)
{
    HRESULT hr;

    hr = THR(SetString(&_cstrSubReferer, psz));

    if (hr == S_OK)
    {
        _uSchemeSubReferer = psz ? GetUrlScheme(psz) : URL_SCHEME_UNKNOWN;
    }

    RRETURN(hr);
}

void
CDwnDoc::TakeRequestHeaders(BYTE **ppb, ULONG *pcb)
{
    Assert(!_pbRequestHeaders);

    _pbRequestHeaders = *ppb;
    _cbRequestHeaders = *pcb;
    
    *ppb = NULL;
    *pcb = 0;
}

void
CDwnDoc::SetDownloadNotify(IDownloadNotify *pDownloadNotify)
{
    Assert(_dwThreadId == GetCurrentThreadId());
    Assert(!_pDownloadNotify);

    if (pDownloadNotify)
        pDownloadNotify->AddRef();
    _pDownloadNotify = pDownloadNotify;
}


HRESULT
CDwnDoc::SetAuthorColors(LPCTSTR pchColors, int cchColors)
{
    if (_fGotAuthorPalette)
    {
        TraceTag((tagPalette, "Ignoring author palette"));
        RRETURN(S_OK);
    }

    TraceTag((tagPalette, "Setting author colors"));

    HRESULT hr = S_OK;
    if (cchColors == -1)
        cchColors = _tcslen(pchColors);

    LPCTSTR pch = pchColors;
    LPCTSTR pchTok = pchColors;
    LPCTSTR pchEnd = pchColors + cchColors;

    PALETTEENTRY ape[256];

    unsigned cpe = 0;
    CColorValue cv;

    while ((pch < pchEnd) && (cpe < 256))
    {
        while (*pch && isspace(*pch))
            pch++;

        pchTok = pch;
        BOOL fParen = FALSE;

        while (pch < pchEnd && (fParen || !isspace(*pch)))
        {
            if (*pch == _T('('))
            {
                if (fParen)
                {
                    hr = E_INVALIDARG;
                    goto Cleanup;
                }
                else
                {
                    fParen = TRUE;
                }
            }
            else if (*pch == _T(')'))
            {
                if (fParen)
                {
                    fParen = FALSE;
                }
                else
                {
                    hr = E_INVALIDARG;
                    goto Cleanup;
                }
            }
            pch++;
        }

        int iStrLen = pch - pchTok;

        if (iStrLen > 0)
        {
            hr = cv.FromString(pchTok, FALSE, FALSE, iStrLen);

            if (FAILED(hr))
                goto Cleanup;

            COLORREF cr = cv.GetColorRef();
            ape[cpe].peRed = GetRValue(cr);
            ape[cpe].peGreen = GetGValue(cr);
            ape[cpe].peBlue = GetBValue(cr);
            ape[cpe].peFlags = 0;

            cpe++;
        }
    }

    if (cpe)
    {
        Assert(!_ape);

        _ape = (PALETTEENTRY *)MemAlloc(Mt(CDwnDocApe), cpe * sizeof(PALETTEENTRY));

        if (!_ape)
        {
            hr = E_OUTOFMEMORY;
            goto Cleanup;
        }

        memcpy(_ape, ape, cpe * sizeof(PALETTEENTRY));

        _cpe = cpe;
    }

Cleanup:

    TraceTag((tagPalette, SUCCEEDED(hr) ? "Author palette: %d colors" : "Author palette failed", _cpe));
    // No matter what happened, we are no longer interested in getting the palette
    PreventAuthorPalette();

    RRETURN(hr);
}

HRESULT
CDwnDoc::GetColors(CColorInfo *pCI)
{
    HRESULT hr = S_FALSE;

    // This is thread safe because by the time _cpe is set, _ape has already been allocated.
    // If for some reason we arrive a bit too soon, we'll get it next time.
    if (_cpe)
    {
        Assert(_ape);

        hr = THR(pCI->AddColors(_cpe, _ape));
    }

    RRETURN1(hr, S_FALSE);
}

HRESULT
CDwnDoc::SetSecurityID(BYTE * pbSID, DWORD cbSID)
{
    HRESULT hr = S_OK;
    
    Assert(pbSID && cbSID);

    delete [] _pbSID;
    
    _pbSID = new(Mt(CDwnDoc_pbSID)) BYTE[cbSID];
    if (!_pbSID)
    {
        hr = E_OUTOFMEMORY;
        goto Cleanup;
    }

    _cbSID = cbSID;
    memcpy(_pbSID, pbSID, cbSID);

Cleanup:
    RRETURN(hr);
}

HRESULT
CDwnDoc::SetSecurityID(CMarkup * pMarkup, BOOL fUseNested)
{
    CMarkup     * pRootMarkup;
    BYTE          abSID[MAX_SIZE_SECURITY_ID];
    DWORD         cbSID = ARRAY_SIZE(abSID);
    HRESULT       hr = S_OK;

    pRootMarkup = pMarkup->GetRootMarkup(fUseNested);
    if (pRootMarkup)
    {
        hr = pRootMarkup->GetSecurityID(abSID, &cbSID);
        if (hr)
            goto Cleanup;

        hr = SetSecurityID(abSID, cbSID);
    }

Cleanup:
    RRETURN(hr);
}

HRESULT
CDwnDoc::GetSecurityID(BYTE * pbSID, DWORD * pcbSID)
{
    HRESULT hr = E_FAIL;

    if (_cbSID && *pcbSID >= _cbSID)
    {
        memcpy(pbSID, _pbSID, _cbSID);
        *pcbSID = _cbSID;
        hr = S_OK;
    }

    RRETURN(hr);
}

//
//  The pchUrlContext is the script we sould not 
//  allow access if the script
//

void CDwnDoc::SetCallerUrl(LPCTSTR pchUrlContext)
{
    if (pchUrlContext == NULL)
    {
        pchUrlContext = _cstrDocReferer;
    }

    cstrCallerUrl.Set(pchUrlContext);
}

// CDwnDoc (IAuthenticate) ----------------------------------------------------

STDMETHODIMP
CDwnDoc::Authenticate(HWND * phwnd, LPWSTR * ppszUsername, LPWSTR * ppszPassword)
{
    PerfDbgLog(tagDwnDoc, this, "+CDwnDoc::Authenticate");

    HRESULT hr;

    *phwnd = NULL;
    *ppszUsername = NULL;
    *ppszPassword = NULL;
    
    if (IsDocThread() && _pDoc)
    {
        IAuthenticate * pAuth;

        hr = THR(_pDoc->QueryService(IID_IAuthenticate, IID_IAuthenticate, (void **)&pAuth));

        if (hr == S_OK)
        {
            hr = THR(pAuth->Authenticate(phwnd, ppszUsername, ppszPassword));
            pAuth->Release();
        }
    }
    else
    {
        // Either we are on the wrong thread or the document has disconnected.  In either case,
        // we can no longer provide this service.
        hr = E_FAIL;
    }

    PerfDbgLog1(tagDwnDoc, this, "-CDwnDoc::Authenticate (hr=%lX)", hr);
    RRETURN(hr);
}

// CDwnDoc (IWindowForBindingUI) ----------------------------------------------

STDMETHODIMP
CDwnDoc::GetWindow(REFGUID rguidReason, HWND * phwnd)
{
    PerfDbgLog(tagDwnDoc, this, "+CDwnDoc::GetWindow");

    HRESULT hr;

    *phwnd = NULL;

    if (IsDocThread() && _pDoc)
    {
        IWindowForBindingUI * pwfbu;

        hr = THR(_pDoc->QueryService(IID_IWindowForBindingUI, IID_IWindowForBindingUI, (void **)&pwfbu));

        if (hr == S_OK)
        {
            IGNORE_HR(pwfbu->GetWindow(rguidReason, phwnd));
            pwfbu->Release();
        }
    }
    else
    {
        // Either we are on the wrong thread or the document has disconnected.  In either case,
        // we can no longer provide this service.
        hr = E_FAIL;
    }

    PerfDbgLog1(tagDwnDoc, this, "-CDwnDoc::GetWindow (hr=%lX)", hr);
    RRETURN(hr);
}

// CDwnDoc (IUnknown) ---------------------------------------------------------

STDMETHODIMP
CDwnDoc::QueryInterface(REFIID iid, LPVOID * ppv)
{
    PerfDbgLog(tagDwnDoc, this, "CDwnDoc::QueryInterface");

    if (iid == IID_IUnknown || iid == IID_IAuthenticate)
        *ppv = (IAuthenticate *)this;
    else if (iid == IID_IWindowForBindingUI)
        *ppv = (IWindowForBindingUI *)this;
    else
    {
        *ppv = NULL;
        return(E_NOINTERFACE);
    }

    ((IUnknown *)*ppv)->AddRef();
    return S_OK;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\download\dwnpost.cxx ===
//+------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1992 - 1996.
//
//  File:       dwnpost.cxx
//
//  Contents:   CDwnPost
//              CDwnPostStm
//
//-------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_DWN_HXX_
#define X_DWN_HXX_
#include "dwn.hxx"
#endif

#ifndef X_POSTDATA_HXX_
#define X_POSTDATA_HXX_
#include "postdata.hxx"
#endif

#define _hxx_
#include "element.hdl"

#ifdef WIN16
#define MB_PRECOMPOSED 0
#endif

// Debugging ------------------------------------------------------------------

PerfDbgTag(tagDwnPost,       "Dwn", "Trace CDwnPost")
PerfDbgTag(tagDwnPostStm,    "Dwn", "Trace CDwnPostStm")
PerfDbgTag(tagDwnPostAsStm,  "Dwn", "! Force posting via IStream")
PerfDbgTag(tagDwnPostNoRefs, "Dwn", "! One-shot HGLOBALS for posting");
MtDefine(CDwnPost, Dwn, "CDwnPost")
MtDefine(CDwnPostStm, Dwn, "CDwnPostStm")

// CDwnPost (IUnknown) --------------------------------------------------------

STDMETHODIMP
CDwnPost::QueryInterface(REFIID riid, void ** ppv)
{
    PerfDbgLog(tagDwnPost, this, "+CDwnPost::QueryInterface");

    HRESULT hr;

    if (riid == IID_IUnknown)
    {
        *ppv = (IUnknown *)this;
        AddRef();
        hr = S_OK;
    }
    else
    {
        *ppv = NULL;
        hr = E_NOINTERFACE;
    }

    PerfDbgLog1(tagDwnPost, this, "-CDwnPost::QueryInterface (hr=%lX)", hr);
    return(hr);
}

STDMETHODIMP_(ULONG)
CDwnPost::AddRef()
{
    PerfDbgLog(tagDwnPost, this, "+CDwnPost::AddRef");

    ULONG ulRefs = super::AddRef();

    PerfDbgLog1(tagDwnPost, this, "-CDwnPost::AddRef (cRefs=%ld)", ulRefs);
    return(ulRefs);
}

STDMETHODIMP_(ULONG)
CDwnPost::Release()
{
    PerfDbgLog(tagDwnPost, this, "+CDwnPost::Release");

    ULONG ulRefs = super::Release();

    PerfDbgLog1(tagDwnPost, this, "-CDwnPost::Release (cRefs=%ld)", ulRefs);
    return(ulRefs);
}

//+--------------------------------------------------------------------------//
//
//  Method:     CDwnPost::~CDwnPost
//
//  Synopsis:   frees the strings and the descriptor list
//              
//---------------------------------------------------------------------------//

CDwnPost::~CDwnPost()
{
    PerfDbgLog(tagDwnPost, this, "+CDwnPost::~CDwnPost");

    CPostItem * pItem;

    if (_pItems)
    {
        UINT i;
        for (pItem = _pItems, i = _cItems; i > 0; i--, pItem++)
        {
            switch (pItem->_ePostDataType)
            {
                case POSTDATA_LITERAL:
                    delete [] pItem->_pszAnsi;
                    break;

                case POSTDATA_FILENAME:
                    delete [] pItem->_pszWide;
                    break;
            }
        }
        delete [] _pItems;
    }

    if (_hGlobal)
    {
        GlobalFree(_hGlobal);
    }

    PerfDbgLog(tagDwnPost, this, "-CDwnPost::~CDwnPost");
}

//+--------------------------------------------------------------------------//
//
//  Method:     CDwnPost::Create, static
//
//  Arguments:  cItems    - number of items for descriptor array allocation
//              ppDwnPost - return the object here
//
//  Synopsis:   Create a skeleton CDwnPost object
//              having cItems sections
//
//---------------------------------------------------------------------------//
HRESULT
CDwnPost::Create(UINT cItems, CDwnPost ** ppDwnPost)
{
    PerfDbgLog1(tagDwnPost, NULL, "CDwnPost::Create (cItems=%ld)", cItems);

    CDwnPost * pDwnPost = new CDwnPost;
    HRESULT hr;

    if (pDwnPost == NULL)
    {
        hr = E_OUTOFMEMORY;
        goto Cleanup;
    }

    if (cItems > 0)
    {
        pDwnPost->_pItems = new(Mt(CPostItem)) CPostItem[cItems];

        if (pDwnPost->_pItems == NULL)
        {
            hr = E_OUTOFMEMORY;
            goto Cleanup;
        }

        memset(pDwnPost->_pItems, 0, cItems * sizeof(CPostItem));

        pDwnPost->_cItems = cItems;
    }

    hr = THR(CoFileTimeNow(&pDwnPost->_ftCreated));
    if (hr)
        goto Cleanup;

Cleanup:

    if (hr && pDwnPost)
    {
        pDwnPost->Release();
        *ppDwnPost = NULL;
    }
    else
    {
        *ppDwnPost = pDwnPost;
    }

    PerfDbgLog1(tagDwnPost, NULL, "CDwnPost::Create (hr=%lX)", hr);
    RRETURN(hr);
}

HRESULT
CDwnPost::Create(DWORD cbPostData, BYTE * pPostData, BOOL fDontSave, CDwnPost ** ppDwnPost)
{
    HRESULT hr;
    char * pszAnsi;

    hr = THR(Create(1, ppDwnPost));
    if (hr)
        goto Cleanup;

    pszAnsi = new(Mt(CPostItem_psz)) char[cbPostData + 1];
    if (!pszAnsi)
    {
        hr = E_OUTOFMEMORY;
        goto Cleanup;
    }

    memcpy(pszAnsi, pPostData, cbPostData);
    pszAnsi[cbPostData] = '\0';

    (*ppDwnPost)->_pItems->_pszAnsi = pszAnsi;
    (*ppDwnPost)->_pItems->_ePostDataType = POSTDATA_LITERAL;
    (*ppDwnPost)->_pItems->_dwSize = cbPostData;

    (*ppDwnPost)->_fDontSave = fDontSave;

Cleanup:
    RRETURN(hr);    
}

//+--------------------------------------------------------------------------//
//
//  Method:     CDwnPost::Create, static
//
//  Synopsis:   Create a DownPost object from a SubmitData object
//              
//  Arguments:  pSubmitData - the object to init from
//              ppDwnPost   - return the object here
//
//  Note::      DownPost takes ownership of the strings passed
//              in in SubmitData
//
//---------------------------------------------------------------------------//

HRESULT
CDwnPost::Create(CPostData * pSubmitData, CDwnPost ** ppDwnPost)
{
    PerfDbgLog1(tagDwnPost, NULL, "CDwnPost::Create (pSubmitData=%lx)", pSubmitData);

    HRESULT hr;

    hr = THR(Create((UINT)0, ppDwnPost));

    if (hr == S_OK)
    {
        TCHAR achEncoding[ENCODING_SIZE];

        achEncoding[0] = 0;

        MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED,
            pSubmitData->GetEncodingString(), -1,
            achEncoding, ARRAY_SIZE(achEncoding));

        // copy the string and remove the CRLF
        hr = THR((*ppDwnPost)->_cstrEncoding.Set(achEncoding, _tcslen(achEncoding) - 2));

        if (hr)
        {
            (*ppDwnPost)->Release();
            *ppDwnPost = NULL;
            goto Cleanup;
        }

        // Take ownership of the string list
        (*ppDwnPost)->_cItems  = pSubmitData->_cItems;
        (*ppDwnPost)->_pItems  = pSubmitData->_pItems;

        //  Clear the SubmitData object
        pSubmitData->_cItems = 0;
        pSubmitData->_pItems = 0;
    }

    #if DBG==1
    (*ppDwnPost)->VerifySaveLoad();
    #endif

Cleanup:
    PerfDbgLog1(tagDwnPost, NULL, "CDwnPost::Create (hr=%lX)", hr);
    RRETURN(hr);
}

//+--------------------------------------------------------------------------//
//
//  Method:     CDwnPost::Save, static
//
//  Arguments:  pstm - the stream
//              pDwnPost - the object to save. Can be NULL.
//
//  Synopsis:   Save private format into a stream
//              
//---------------------------------------------------------------------------//

HRESULT
CDwnPost::Save(CDwnPost * pDwnPost, IStream * pstm)
{
    PerfDbgLog(tagDwnPost, pDwnPost, "+CDwnPost::Save");

    DWORD   cItems = pDwnPost ? pDwnPost->_cItems : 0xFFFFFFFF;
    HRESULT hr;

    hr = THR(pstm->Write(&cItems, sizeof(DWORD), NULL));
    if (hr)
        goto Cleanup;

    if (pDwnPost && cItems)
    {
        CPostItem * pItem;

        hr = THR(pstm->Write(&pDwnPost->_ftCreated, sizeof(FILETIME), NULL));
        if (hr)
            goto Cleanup;

        hr = THR(pDwnPost->_cstrEncoding.Save(pstm));
        if (hr)
            goto Cleanup;

        for ( pItem = pDwnPost->_pItems, cItems = pDwnPost->_cItems;
              cItems > 0;
              cItems--, pItem++ )
        {
            hr = THR(pstm->Write(&pItem->_ePostDataType,
                        sizeof(POSTDATA_KIND), NULL));

            switch (pItem->_ePostDataType)
            {
                case POSTDATA_LITERAL:
                {
                    char * psz = pItem->_pszAnsi;
                    ULONG cb = psz ? pItem->_dwSize + 1: 0;

                    hr = THR(pstm->Write(&cb, sizeof(ULONG), NULL));
                    if (hr)
                        goto Cleanup;

                    if (cb)
                    {
                        hr = THR(pstm->Write(psz, cb, NULL));
                        if (hr)
                            goto Cleanup;
                    }
                }
                break;

                case POSTDATA_FILENAME:
                {
                    TCHAR * psz = pItem->_pszWide;
                    ULONG cb = psz ? sizeof (TCHAR) * (1 + _tcslen(psz)) : 0;

                    hr = THR(pstm->Write(&cb, sizeof(ULONG), NULL));
                    if (hr)
                        goto Cleanup;

                    if (cb)
                    {
                        hr = THR(pstm->Write(psz, cb, NULL));
                        if (hr)
                            goto Cleanup;
                    }
                }
                break;
            }
        }
    }

Cleanup:
    PerfDbgLog1(tagDwnPost, pDwnPost, "-CDwnPost::Save (hr=%lX)", hr);
    RRETURN(hr);
}

//+--------------------------------------------------------------------------//
//
//  Method:     CDwnPost::Load, static
//
//  Arguments:  pstm - the stream
//              ppDwnPost - return the DownPost object here. Can become NULL.
//
//  Synopsis:   Load private format from a stream
//              
//---------------------------------------------------------------------------//

HRESULT
CDwnPost::Load(IStream * pstm, CDwnPost ** ppDwnPost)
{
    PerfDbgLog(tagDwnPost, NULL, "+CDwnPost::Load");

    CDwnPost *  pDwnPost = NULL;
    CPostItem * pItem;
    DWORD       cItems;
    ULONG       cb;
    HRESULT     hr;

    hr = THR(pstm->Read(&cItems, sizeof(DWORD), NULL));
    if (hr)
        goto Cleanup;
    
    if (cItems != 0xFFFFFFFF)
    {
        hr = THR(Create(cItems, &pDwnPost));
        if (hr)
            goto Cleanup;

        hr = THR(pstm->Read(&pDwnPost->_ftCreated, sizeof(FILETIME), NULL));
        if (hr)
            goto Cleanup;

        hr = THR(pDwnPost->_cstrEncoding.Load(pstm));
        if (hr)
            goto Cleanup;

        if (cItems == 0)
            goto Cleanup;

        for ( pItem = pDwnPost->_pItems;
              cItems > 0;
              cItems--, pItem++ )
        {
            hr = THR(pstm->Read(&pItem->_ePostDataType, sizeof(POSTDATA_KIND), NULL));
            if (hr)
                goto Cleanup;

            switch (pItem->_ePostDataType)
            {
                case POSTDATA_LITERAL:
                case POSTDATA_FILENAME:
                {
                    hr = THR(pstm->Read(&cb, sizeof(cb), NULL));
                    if (hr)
                        goto Cleanup;

                    if (cb)
                    {
                        pItem->_pszAnsi = (char *)MemAlloc(Mt(CPostItem_psz), cb);

                        if (!pItem->_pszAnsi)
                        {
                            hr = E_OUTOFMEMORY;
                            goto Cleanup;
                        }

                        hr = THR(pstm->Read(pItem->_pszAnsi, cb, NULL));
                        if (hr)
                            goto Cleanup;

                        pItem->_dwSize = cb - 1;
                    }
                    break;
                }

                default:
                    AssertSz(FALSE, "Unrecognized POSTDATA type");
                    hr = E_FAIL;
                    goto Cleanup;
            }
        }
    }

Cleanup:
    if (hr && pDwnPost)
    {
        pDwnPost->Release();
        *ppDwnPost = NULL;
    }
    else
    {
        *ppDwnPost = pDwnPost;
    }

    PerfDbgLog1(tagDwnPost, NULL, "-CDwnPost::Load (hr=%lX)", hr);
    RRETURN(hr);
}

//+--------------------------------------------------------------------------//
//
//  Method:     CDwnPost::GetSaveSize, static
//
//  Arguments:  pDwnPost
//
//  Synopsis:   Computes the maximum size needed by CDwnPost::Save
//
//---------------------------------------------------------------------------//

ULONG
CDwnPost::GetSaveSize(CDwnPost * pDwnPost)
{
    PerfDbgLog(tagDwnPost, pDwnPost, "+CDwnPost::GetSaveSize");

    ULONG cb = sizeof(DWORD);

    if (pDwnPost)
    {
        cb += sizeof(FILETIME) + pDwnPost->_cstrEncoding.GetSaveSize();

        CPostItem * pItem = pDwnPost->_pItems;
        ULONG       cItem = pDwnPost->_cItems;

        for (; cItem > 0; --cItem, ++pItem)
        {
            cb += sizeof(POSTDATA_KIND);

            switch (pItem->_ePostDataType)
            {
                case POSTDATA_LITERAL:
                    cb += sizeof(ULONG);
                    if (pItem->_pszAnsi)
                        cb += pItem->_dwSize + 1;
                    break;
                case POSTDATA_FILENAME:
                    cb += sizeof(ULONG);
                    if (pItem->_pszWide)
                        cb += (_tcslen(pItem->_pszWide) + 1) * sizeof(TCHAR);
                    break;
            }
        }
    }

    PerfDbgLog1(tagDwnPost, pDwnPost, "-CDwnPost::GetSaveSize (cb=%ld)", cb);
    return(cb);
}

//+--------------------------------------------------------------------------//
//
//  Method:     CDwnPost::VerifySaveLoad
//
//  Arguments:  
//
//  Synopsis:   Debugging checks to make sure save/load sequence works
//
//---------------------------------------------------------------------------//

#if DBG==1

void
CDwnPost::VerifySaveLoad()
{
    IStream * pstm = NULL;
    CDwnPost * pDwnPost = NULL;
    LARGE_INTEGER li = { 0 };
    ULARGE_INTEGER uli;
    ULONG cbSave;
    CPostItem * pItemSrc, * pItemDst;
    ULONG cItem;
    HRESULT hr;

    cbSave = GetSaveSize(this);

    hr = THR(CreateStreamOnHGlobal(NULL, TRUE, &pstm));
    if (hr)
        goto Cleanup;

    hr = THR(Save(this, pstm));
    if (hr)
        goto Cleanup;

    hr = THR(pstm->Seek(li, STREAM_SEEK_CUR, &uli));
    if (hr)
        goto Cleanup;
    
    Assert(uli.LowPart == cbSave && uli.HighPart == 0);

    hr = THR(pstm->Seek(li, STREAM_SEEK_SET, &uli));
    if (hr)
        goto Cleanup;

    Assert(uli.LowPart == 0 && uli.HighPart == 0);

    hr = THR(Load(pstm, &pDwnPost));
    if (hr)
        goto Cleanup;

    Assert(GetItemCount() == pDwnPost->GetItemCount());

    Assert(!!_cstrEncoding == !!pDwnPost->_cstrEncoding);

    Assert(!_cstrEncoding || StrCmpC(_cstrEncoding, pDwnPost->_cstrEncoding) == 0);

    Assert(memcmp(&_ftCreated, &pDwnPost->_ftCreated, sizeof(FILETIME)) == 0);

    pItemSrc = GetItems();
    pItemDst = pDwnPost->GetItems();
    cItem    = GetItemCount();

    for (; cItem > 0; --cItem, ++pItemSrc, ++pItemDst)
    {
        Assert(pItemSrc->_ePostDataType == pItemDst->_ePostDataType);

        if (pItemSrc->_ePostDataType == POSTDATA_LITERAL)
        {
            Assert(pItemSrc->_dwSize == pItemDst->_dwSize);            
            Assert(strncmp(pItemSrc->_pszAnsi, pItemDst->_pszAnsi, pItemDst->_dwSize) == 0);
        }
        else if (pItemSrc->_ePostDataType == POSTDATA_FILENAME)
        {
            Assert(StrCmpC(pItemSrc->_pszWide, pItemDst->_pszWide) == 0);
        }
    }

Cleanup:
    if (pDwnPost)
        pDwnPost->Release();
    ReleaseInterface(pstm);
}

#endif

DWORD HashBytes(void *pb, DWORD cb, DWORD hash)
{
    while (cb)
    {
        hash = (hash >> 7) | (hash << (32-7));
        hash += *(BYTE*)pb; // Case-sensitive hash
        pb = (BYTE*)pb+1;
        cb--;
    }

    return hash;
}

//+--------------------------------------------------------------------------//
//
//  Method:     CDwnPost::GetBindInfo
//
//  Arguments:  
//
//  Synopsis:   Fills out a STGMEDIUM structure for accessing the post data
//
//---------------------------------------------------------------------------//

HRESULT
CDwnPost::GetBindInfo(BINDINFO * pbindinfo)
{
    PerfDbgLog(tagDwnPost, this, "+CDwnPost::GetBindInfo");

    HGLOBAL hGlobal = _hGlobal;
    ULONG   cb      = _cbGlobal;
    HRESULT hr      = S_OK;

    if (    hGlobal == NULL
        &&  (   _cItems == 0
            ||  (_cItems == 1 && _pItems->_ePostDataType == POSTDATA_LITERAL)) )
    {
        cb      = _cItems ? _pItems->_dwSize : 0;
        hGlobal = GlobalAlloc(GMEM_FIXED, cb);

        if (hGlobal == NULL)
        {
            hr = E_OUTOFMEMORY;
            goto Cleanup;
        }

        if (cb)
        {
            memcpy((void *)hGlobal, _pItems->_pszAnsi, cb);
        }

        // It is possible that two threads just did the same allocation, so
        // we enter a critical section and pick the first one.

        g_csDwnPost.Enter();

        if (_hGlobal == NULL)
        {
            _hGlobal  = hGlobal;
            _cbGlobal = cb;
        }
        else
        {
            GlobalFree(hGlobal);
            hGlobal = _hGlobal;
        }

        g_csDwnPost.Leave();

        Assert(_hGlobal != NULL);
        Assert(hGlobal == _hGlobal);
    }

    #if DBG==1
    if (IsPerfDbgEnabled(tagDwnPostAsStm))
        hGlobal = NULL;
    #endif

    if (hGlobal)
    {
        pbindinfo->stgmedData.tymed = TYMED_HGLOBAL;
        pbindinfo->stgmedData.hGlobal = _hGlobal;
        pbindinfo->cbstgmedData = cb;

    #if DBG==1
        if (IsPerfDbgEnabled(tagDwnPostNoRefs))
        {
            // This is not a thread-safe thing to do, but it is only used
            // for debugging when we suspect that the caller of GetBindInfo
            // is not properly releasing the STGMEDIUM and therefore leaking
            // the CDwnPost.  Turning this tag on allows us to isolate this
            // condition.

            _hGlobal = NULL;
        }
        else
    #endif
        {
            pbindinfo->stgmedData.pUnkForRelease = this;
            AddRef();
        }
    }
    else
    {
        CDwnPostStm * pDwnPostStm = new CDwnPostStm(this);

        if (pDwnPostStm == NULL)
        {
            hr = E_OUTOFMEMORY;
            goto Cleanup;
        }

        if (_cbGlobal == 0)
        {
            hr = THR(pDwnPostStm->ComputeSize(&_cbGlobal));

            if (hr)
            {
                pDwnPostStm->Release();
                goto Cleanup;
            }
        }

        pbindinfo->stgmedData.tymed = TYMED_ISTREAM;
        pbindinfo->stgmedData.pUnkForRelease = NULL;    //Release will be handled by pstm
        pbindinfo->stgmedData.pstm = pDwnPostStm;
        pbindinfo->cbstgmedData = _cbGlobal;
    }


Cleanup:
    PerfDbgLog(tagDwnPost, this, "-CDwnPost::GetBindInfo");
    RRETURN(hr);
}

HRESULT
CDwnPost::GetHashString(LPOLESTR *ppchHashString)
{
    TCHAR achBuf[9];
    HRESULT hr;
    
    hr = THR(Format(0, achBuf, ARRAY_SIZE(achBuf), _T("<0x>"), ComputeHash()));
    if (hr)
        goto Cleanup;

    hr = TaskAllocString(achBuf, ppchHashString);
    if (hr)
        goto Cleanup;
        
Cleanup:
    RRETURN(hr);
}

DWORD
CDwnPost::ComputeHash()
{
    PerfDbgLog(tagDwnPost, this, "+CDwnPostStm::ComputeHash");

    ULONG i;
    CPostItem * pItem;
    DWORD dwHash = 0;

    for (i = _cItems, pItem = _pItems; i>0; i--, pItem++)
    {
        //  Iterate
        Assert(pItem);
        switch ( pItem->_ePostDataType )
        {
        case POSTDATA_LITERAL:
            dwHash = HashBytes(pItem->_pszAnsi, pItem->_dwSize, dwHash);
            break;

        case POSTDATA_FILENAME:
            dwHash = HashBytes(pItem->_pszWide, _tcslen(pItem->_pszWide), dwHash);
            break;
        }
    }


    PerfDbgLog1(tagDwnPost, this, "-CDwnPostStm::ComputeHash (dw=%ld)", dwHash);
    
    return(dwHash);
}

//+--------------------------------------------------------------------------//
//
//  Class:  CDwnPostStm
//
//---------------------------------------------------------------------------//

CDwnPostStm::CDwnPostStm(CDwnPost * pDwnPost)
{
    PerfDbgLog(tagDwnPostStm, this, "+CDwnPostStm::CDwnPostStm");

    _pDwnPost = pDwnPost;
    _pDwnPost->AddRef();
    _hFile = INVALID_HANDLE_VALUE;

    PerfDbgLog(tagDwnPostStm, this, "-CDwnPostStm::CDwnPostStm");
}

//+--------------------------------------------------------------------------//
//
//  Method:     CDwnPostStm::Passivate, protected
//
//  Synopsis:   clean up the stream provider
//
//---------------------------------------------------------------------------//

void
CDwnPostStm::Passivate(void)
{
    PerfDbgLog(tagDwnPostStm, this, "+CDwnPostStm::Passivate");

    if ( _hFile != INVALID_HANDLE_VALUE )
    {
        Verify(CloseHandle(_hFile));
    }

    ReleaseInterface(_pDwnPost);

    super::Passivate();

    PerfDbgLog(tagDwnPostStm, this, "-CDwnPostStm::Passivate");
}

// CDwnPostStm (IUnknown) -----------------------------------------------------

STDMETHODIMP
CDwnPostStm::QueryInterface(REFIID iid, void ** ppv)
{
    PerfDbgLog(tagDwnPostStm, this, "+CDwnPostStm::QueryInterface");

    HRESULT hr;

    if (iid == IID_IUnknown || iid == IID_IStream)
    {
        *ppv = (IStream *)this;
        AddRef();
        hr = S_OK;
    }
    else
    {
        *ppv = NULL;
        hr = E_NOINTERFACE;
    }

    PerfDbgLog1(tagDwnPostStm, this, "-CDwnPostStm::QueryInterface (hr=%lX)", hr);
    return(hr);
}

STDMETHODIMP_(ULONG)
CDwnPostStm::AddRef()
{
    PerfDbgLog(tagDwnPostStm, this, "+CDwnPostStm::AddRef");

    ULONG ulRefs = super::AddRef();

    PerfDbgLog1(tagDwnPostStm, this, "-CDwnPostStm::AddRef (cRefs=%ld)", ulRefs);
    return(ulRefs);
}

STDMETHODIMP_(ULONG)
CDwnPostStm::Release()
{
    PerfDbgLog(tagDwnPostStm, this, "+CDwnPostStm::Release");

    ULONG ulRefs = super::Release();

    PerfDbgLog1(tagDwnPostStm, this, "-CDwnPostStm::Release (cRefs=%ld)", ulRefs);
    return(ulRefs);
}

// CDwnPostStm (IStream) ------------------------------------------------------

STDMETHODIMP CDwnPostStm::Clone(IStream ** ppStream)
{
    PerfDbgLog(tagDwnPostStm, this, "+CDwnPostStm::Clone");

    HRESULT hr = E_NOTIMPL;
    *ppStream = NULL;

    PerfDbgLog1(tagDwnPostStm, this, "-CDwnPostStm::Clone (hr=%lX)", hr);
    RRETURN(hr);
}

STDMETHODIMP CDwnPostStm::Commit(DWORD dwFlags)
{
    PerfDbgLog(tagDwnPostStm, this, "+CDwnPostStm::Commit");

    HRESULT hr = S_OK;

    PerfDbgLog1(tagDwnPostStm, this, "-CDwnPostStm::Commit (hr=%lX)", hr);
    RRETURN(hr);
}

STDMETHODIMP CDwnPostStm::CopyTo(IStream* pStream, ULARGE_INTEGER nBytes,
    ULARGE_INTEGER* pnBytesRead, ULARGE_INTEGER* pnBytesWritten)
{
    PerfDbgLog(tagDwnPostStm, this, "+CDwnPostStm::CopyTo");

    HRESULT hr = E_NOTIMPL;

    PerfDbgLog1(tagDwnPostStm, this, "-CDwnPostStm::CopyTo (hr=%lX)", hr);
    RRETURN(hr);
}

STDMETHODIMP CDwnPostStm::LockRegion(ULARGE_INTEGER iOffset, 
    ULARGE_INTEGER nBytes, DWORD dwLockType)
{
    PerfDbgLog(tagDwnPostStm, this, "+CDwnPostStm::LockRegion");

    HRESULT hr = E_NOTIMPL;

    PerfDbgLog1(tagDwnPostStm, this, "-CDwnPostStm::LockRegion (hr=%lX)", hr);
    RRETURN(hr);
}

STDMETHODIMP CDwnPostStm::Read(void HUGEP * pBuffer, ULONG nBytes, ULONG* pnBytesRead)
{
    PerfDbgLog1(tagDwnPostStm, this, "+CDwnPostStm::Read (cbReq=%ld)", nBytes);

    HRESULT hr = S_OK;
    BYTE * pbBuffer = (BYTE *)pBuffer;
    ULONG cbWritten = 0;

    if (pnBytesRead)
    {
        *pnBytesRead = 0;
    }

    if (pBuffer == NULL)
    {
        hr = E_POINTER;
        goto Cleanup;
    }

    if (nBytes == 0)
    {
        hr = E_INVALIDARG;
        goto Cleanup;
    }

    while ( _uItem < _pDwnPost->_cItems && cbWritten < nBytes)
    {
        CPostItem * pItem;
        ULONG cb;
        ULONG cbStrLen;
        BOOL f;

        pItem = _pDwnPost->_pItems + _uItem;

        switch ( pItem->_ePostDataType )
        {
        case POSTDATA_LITERAL:
            cbStrLen = pItem->_dwSize - _ulOffset;
            cb = min(cbStrLen, nBytes - cbWritten);
            memcpy(pbBuffer+cbWritten, pItem->_pszAnsi + _ulOffset, cb);

            cbWritten += cb;
            _ulOffset += cb;

            if ( cb == cbStrLen ) // or _ulOffset == strlen(pItem->_pszAnsi) ??
            {
                //  We consumed this section, switch to the next
                _ulOffset = 0;
                _uItem++;
            }
            break;

        case POSTDATA_FILENAME:

            cb = 0;

            //  Note: NetScape 3 doesn't mime64 encode the
            //        uploaded file, even if it is NOT text
            
            if ( _hFile == INVALID_HANDLE_VALUE )
            {
                DWORD dw;

                //  Open the file and get its size.
                //  If it fails, bail out of this section
                _hFile = CreateFile(pItem->_pszWide,
                                    GENERIC_READ,
                                    FILE_SHARE_READ | FILE_SHARE_WRITE, 
                                    NULL,
                                    OPEN_EXISTING,
                                    FILE_ATTRIBUTE_NORMAL,
                                    NULL);

                if ( _hFile == INVALID_HANDLE_VALUE )
                    goto FileError;

#ifndef WIN16
                dw = GetFileType(_hFile);
                if ( dw != FILE_TYPE_DISK )
                    goto FileError;
#endif // ndef WIN16

                cb = GetFileSize(_hFile, NULL);  //  Don't care about high DWORD, we don't handle
                                                //  that large files anyway.
                if ( cb == 0xFFFFFFFF )
                    goto FileError;
            }

            //  Here the file should be open and ripe for consumption
            f = ReadFile(_hFile, pbBuffer+cbWritten, nBytes - cbWritten, &cb, NULL);
            if ( !f )
                goto Win32Error;

            if ( cb < nBytes - cbWritten )
            {
                goto FileError;
            }

FinishSection:
            cbWritten += cb;
            break;

Win32Error:
            hr = GetLastWin32Error();
            //  Fall through

FileError:
            if ( _hFile != INVALID_HANDLE_VALUE )
            {
                Verify(CloseHandle(_hFile));
            }
            _hFile = INVALID_HANDLE_VALUE;
            _ulOffset = 0;
            _uItem++;

            goto FinishSection;
        }
    }

    Assert(cbWritten <= nBytes);

    if (pnBytesRead)
    {
        *pnBytesRead = cbWritten;
    }

    if (SUCCEEDED(hr) && cbWritten == 0)
    {
        hr = S_FALSE;
        goto Cleanup;
    }

Cleanup:
    PerfDbgLog2(tagDwnPostStm, this, "-CDwnPostStm::Read (cbRead=%ld,hr=%lX)", cbWritten, hr);
    RRETURN1(hr, S_FALSE);
}


STDMETHODIMP CDwnPostStm::Revert()
{
    PerfDbgLog(tagDwnPostStm, this, "+CDwnPostStm::Revert");

    HRESULT hr = E_NOTIMPL;

    PerfDbgLog1(tagDwnPostStm, this, "-CDwnPostStm::Revert (hr=%lX)", hr);
    RRETURN(hr);
}

STDMETHODIMP CDwnPostStm::Seek(LARGE_INTEGER nDisplacement, DWORD dwOrigin,
    ULARGE_INTEGER* piNewPosition)
{
    PerfDbgLog(tagDwnPostStm, this, "+CDwnPostStm::Seek");

    HRESULT hr = E_FAIL;

    // We can only seek back to the beginning of the stream.
    if ( nDisplacement.LowPart == 0 && nDisplacement.HighPart == 0 && 
        dwOrigin == STREAM_SEEK_SET )
    {
        hr = S_OK;
        
        if ( _hFile != INVALID_HANDLE_VALUE )
        {
            Verify(CloseHandle(_hFile));
            _hFile = INVALID_HANDLE_VALUE;
        }

        _uItem = 0;
        _ulOffset = 0;
    }

    PerfDbgLog1(tagDwnPostStm, this, "-CDwnPostStm::Seek (hr=%lX)", hr);
    RRETURN(hr);
}

STDMETHODIMP CDwnPostStm::SetSize(ULARGE_INTEGER nNewSize)
{
    PerfDbgLog(tagDwnPostStm, this, "+CDwnPostStm::SetSize");

    HRESULT hr = E_NOTIMPL;

    PerfDbgLog1(tagDwnPostStm, this, "-CDwnPostStm::SetSize (hr=%lX)", hr);
    RRETURN(hr);
}

STDMETHODIMP
CDwnPostStm::Stat(STATSTG * pStatStg, DWORD dwFlags)
{
    PerfDbgLog(tagDwnPostStm, this, "+CDwnPostStm::Stat");

    memset(pStatStg, 0, sizeof(STATSTG));

    pStatStg->type           = STGTY_STREAM;
    pStatStg->mtime          =
    pStatStg->ctime          =
    pStatStg->atime          = _pDwnPost->_ftCreated;
    pStatStg->grfMode        = STGM_READ;
    pStatStg->cbSize.LowPart = _pDwnPost->_cbGlobal;

    PerfDbgLog(tagDwnPostStm, this, "-CDwnPostStm::Stat (hr=0)");
    return(S_OK);
}

STDMETHODIMP CDwnPostStm::UnlockRegion(ULARGE_INTEGER iOffset, 
    ULARGE_INTEGER nBytes, DWORD dwLockType)
{
    PerfDbgLog(tagDwnPostStm, this, "+CDwnPostStm::UnlockRegion");

    HRESULT hr = E_NOTIMPL;

    PerfDbgLog1(tagDwnPostStm, this, "-CDwnPostStm::UnlockRegion (hr=%lX)", hr);
    RRETURN(hr);
}

STDMETHODIMP CDwnPostStm::Write(const void HUGEP * pBuffer, ULONG nBytes, 
    ULONG* pnBytesWritten)
{
    PerfDbgLog(tagDwnPostStm, this, "+CDwnPostStm::Write");

    HRESULT hr = E_NOTIMPL;

    PerfDbgLog1(tagDwnPostStm, this, "-CDwnPostStm::Write (hr=%lX)", hr);
    RRETURN(hr);
}

// CDwnPostStm (Internal) -----------------------------------------------------

HRESULT
CDwnPostStm::ComputeSize(ULONG * pcb)
{
    PerfDbgLog(tagDwnPostStm, this, "+CDwnPostStm::ComputeSize");

    HRESULT hr = S_OK;
    ULONG i;
    CPostItem * pItem;
    ULONG cbSize = 0;

    Assert(_pDwnPost);

    for ( i = _pDwnPost->_cItems, pItem = _pDwnPost->_pItems;
          i > 0;
          i--, pItem++ )
    {
        //  Iterate
        Assert(pItem);
        switch ( pItem->_ePostDataType )
        {
        case POSTDATA_LITERAL:
            cbSize += pItem->_dwSize;
            break;

        case POSTDATA_FILENAME:
            {
                HANDLE hFile;
                DWORD dw;

                hFile = CreateFile( pItem->_pszWide,
                                    GENERIC_READ,
                                    FILE_SHARE_READ | FILE_SHARE_WRITE, 
                                    NULL,
                                    OPEN_EXISTING,
                                    FILE_ATTRIBUTE_NORMAL,
                                    NULL);

                if ( hFile == INVALID_HANDLE_VALUE )
                    goto CloseFile;

#ifndef WIN16
                dw = GetFileType(hFile);
                if ( dw != FILE_TYPE_DISK )
                    goto CloseFile;
#endif // ndef WIN16

                dw = GetFileSize(hFile, NULL);  //  Don't care about high DWORD, we don't handle
                                                //  that large files anyway.
                if ( dw != 0xFFFFFFFF )
                {
#if NEVER
                    //  This is the way to compute the MIME64 encoded file size
                    //  We don't encode on fil eupload, so don't fudge the size either
                    DWORDLONG dwl = dw + 2;     //  padding
                    dwl /= 3;
                    dwl *= 4;
                    dwlSize += dwl;             //  TODO(laszlog):This doesn't count the newlines!
#else
                    cbSize += dw;
#endif
                }
CloseFile:
                if ( hFile != INVALID_HANDLE_VALUE )
                {
                    Verify(CloseHandle(hFile));
                }
            }
            break;
        }
    }

    *pcb = cbSize;

    PerfDbgLog2(tagDwnPostStm, this, "-CDwnPostStm::ComputeSize (cb=%ld,hr=%lX)", cbSize, hr);
    RRETURN(hr);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\download\htmver.cxx ===
//+------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1992 - 1995.
//
//  File:       htmver.cxx
//
//  Contents:   HTML conditional expression evaluator
//
//              CVersions
//              CVerTok
//              CVerStack
//
//-------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)
 
#ifndef X_HTM_HXX
#define X_HTM_HXX
#include "htm.hxx"
#endif

#ifndef X_HTMVER_HXX_
#define X_HTMVER_HXX_
#include "htmver.hxx"
#endif

#ifndef X_VERVEC_H_
#define X_VERVEC_H_
#include "vervec.h"
#endif

MtDefine(CVersions, Dwn, "CVersions"); 
MtDefine(CVerStackAry, Dwn, "CVerStackAry");
MtDefine(CIVerVector, Dwn, "CIVerVector");

DeclareTag(tagHtmVer, "Dwn", "Trace conditional version evaluation");

//+------------------------------------------------------------------------
//
//  Overview:   Conditional HTML expressions
//
//  Synopsis:   This file parses and evaluations expressions inside
//              conditional HTML tags such as
//
//              <!#if IE 4 & (ge IE 4.0sr2 | gt JVM 3) #>
//
//              The main class is CVersions.
//
//              CVersions can create an IVersionVector object which can
//              accept component/version pairs such as "IE"/"4.0sr2"
//              via GetIVersionVector(). Trident's host will feed
//              version information to IVersionVector at SetClientSite
//              time.
//
//              It can then take a string such as
//
//              "if IE 4 & (ge IE 4.0sr2 | gt JVM 3)"
//              
//              and produce TRUE or FALSE (or ENDIF or syntax error)
//              via EvaluateConditional().
//
//              The implementation is a flattened recursive-descent
//              parser on top of a case-insensitive hashing tokenizer.
//
//-------------------------------------------------------------------------



//+------------------------------------------------------------------------
//
//  Overview:   Comparing version numbers
//
//  Synopsis:   Version ordering rules:
//
//              A version has releases separated by dots, with the most
//              significant release first:
//
//              4.010beta.3032 separates into ("4", "010beta", "3032")
//              4.999.a separates into ("4","999", "a")
//
//              Comparing from left to right, since "4" = "4" and
//              "010beta" < "999", 4.010beta.3032 precedes 4.999.a.
//
//              When comparing versions exactly, a version is assumed to
//              have infinite precision in the sense that an specified
//              version string of "4.2b" is interpreted to mean
//              "4.2b.0.0.0.0.0.0...".
//
//              Each release string is compared by splitting it into
//              parts consisting of just numbers or words. Again, the
//              the most significant part is on the left.
//
//              10alpha2 separates into  ("10", "alpha", "2")
//              010beta separates into   ("010", "beta")
//
//              Comparing from left to right, since "10" = "010" and
//              "alpha" < "beta", 10alpha2 precedes 010beta.
//
//              Individual parts of a release are compared as follows:
//
//              * Words precede numbers.
//              * Words are ordered in lexical order using unicode
//                values except for A-Z, which are lowercased
//                (best < bet = Bet < beta)
//              * Numbers are ordered in integer numerical order
//                (1 < 0024 = 24 < 100)
//
//              More examples comparing version strings:
//
//              4.a < 4.a0 < 4.aa < 4 = 4.0 < 4.0a < 4.1 < 4.5 < 4.010
//
//              CompareVersion reports:
//              
//              -1 if the actual version comes before the requested one
//              0 if the actual version is equal to the requested one
//              1 if the actual version comes after the requsted one
//
//
//  Synposis:   Version containment rules:
//
//              ContainVersion() compares a requested set of releases to
//              an actual version.
//
//              The "requested" version specifies a release set, so "4.2b"
//              specifies all versions in the release "4.2b", including
//              "4.2b.1" and "4.2b.alpha" but not including "4.2b1".
//
//              ContainVersion reports:
//              
//              -1 if the actual version comes before the requested set
//              0 if the actual version is in the requested set
//              1 if the actual version comes after the requsted set
//
//-------------------------------------------------------------------------


//+------------------------------------------------------------------------
//
//  Overview:   CompareNumber
//
//  Synopsis:   Compares two number strings
//
//-------------------------------------------------------------------------
LONG
CompareNumber(const TCHAR *pchAct, ULONG cchAct, const TCHAR *pchReq, ULONG cchReq)
{
    Assert(cchReq && ISDIGIT(*pchReq) && cchAct && ISDIGIT(*pchAct));
    
    while (cchReq && *pchReq == _T('0'))
    {
        pchReq++;
        cchReq--;
    }
    
    while (cchAct && *pchAct == _T('0'))
    {
        pchAct++;
        cchAct--;
    }
    
    if (cchReq != cchAct)
        return (cchReq > cchAct ? -1 : 1);

    while (cchReq)
    {
        Assert(ISDIGIT(*pchReq) && ISDIGIT(*pchAct));
        
        if (*pchReq != *pchAct)
            return (*pchReq > *pchAct ? -1 : 1);
        cchReq--;
        pchReq++;
        pchAct++;
    }

    return 0;
}

//+------------------------------------------------------------------------
//
//  Overview:   CompareWord
//
//  Synopsis:   Compares two word strings
//
//-------------------------------------------------------------------------
LONG
CompareWord(const TCHAR *pchAct, ULONG cchAct, const TCHAR *pchReq, ULONG cchReq)
{
    TCHAR chReq, chAct;
    
    Assert(cchReq && !ISDIGIT(*pchReq) && cchAct && !ISDIGIT(*pchAct));
    
    if (cchReq != cchAct)
        return (cchReq > cchAct ? -1 : 1);

    while (cchReq)
    {
        Assert(!ISDIGIT(*pchReq) && !ISDIGIT(*pchAct));

        chReq = *pchReq;
        chAct = *pchAct;

        if (ISUPPER(chReq))
            chAct += _T('a') - _T('A');
            
        if (ISUPPER(chReq))
            chAct += _T('a') - _T('A');
        
        if (chReq != chAct)
            return (chReq > chAct ? -1 : 1);
            
        cchReq--;
        pchReq++;
        pchAct++;
    }

    return 0;
}

//+------------------------------------------------------------------------
//
//  Overview:   CompareRelease
//
//  Synopsis:   Breaks up release strings into words and numbers and
//              compares them from left to right.
//
//-------------------------------------------------------------------------
LONG
CompareRelease(const TCHAR *pchAct, ULONG cchAct, const TCHAR *pchReq, ULONG cchReq)
{
    const TCHAR *pchReqPart;
    const TCHAR *pchActPart;
    LONG lCmp;

    if (!pchAct)
    {
        if (!cchReq || !ISDIGIT(*pchReq))
            return 1;

        while (cchReq && *pchReq == _T('0'))
        {
            pchReq++;
            cchReq--;
        }

        return (cchReq ? -1 : 0);
    }

    if (!pchReq)
    {
        if (!cchAct || !ISDIGIT(*pchAct))
            return 1;

        while (cchAct && *pchAct == _T('0'))
        {
            pchAct++;
            cchAct--;
        }

        return (cchAct ? -1 : 0);
    }
    
    if (!cchReq || !cchAct)
        return (cchReq ? -1 : cchAct ? 1 : 0);

    if (ISDIGIT(*pchAct))
    {
        if (!ISDIGIT(*pchReq))
            return -1;
            
        goto Number;
    }
    else
    {
        if (ISDIGIT(*pchReq))
            return 1;
    }

    for (;;)
    {
        Assert(cchAct && !ISDIGIT(*pchAct) && cchReq && !ISDIGIT(*pchReq));
        
        pchReqPart = pchReq;
        do
        {
            pchReq++;
            cchReq--;
        } while (cchReq && !ISDIGIT(*pchReq));

        pchActPart = pchAct;
        do
        {
            pchAct++;
            cchAct--;
        } while (cchAct && !ISDIGIT(*pchAct));

        lCmp = CompareWord(pchActPart, pchAct - pchActPart, pchReqPart, pchReq - pchReqPart);
        if (lCmp)
            return lCmp;

        if (!cchReq || !cchAct)
            break;

    Number:
        Assert(cchAct && ISDIGIT(*pchAct) && cchReq && ISDIGIT(*pchReq));
        
        pchReqPart = pchReq;
        do
        {
            pchReq++;
            cchReq--;
        } while (cchReq && ISDIGIT(*pchReq));

        pchActPart = pchAct;
        do
        {
            pchAct++;
            cchAct--;
        } while (cchAct && ISDIGIT(*pchAct));

        lCmp = CompareNumber(pchActPart, pchAct - pchActPart, pchReqPart, pchReq - pchReqPart);
        if (lCmp)
            return lCmp;

        if (!cchReq || !cchAct)
            break;
    }
    return (cchReq ? -1 : cchAct ? 1 : 0);
}

//+------------------------------------------------------------------------
//
//  Overview:   CompareVersion
//
//  Synopsis:   Breaks up version strings into '.' delimited release
//              strings and compares them from left to right.
//
//-------------------------------------------------------------------------
LONG
CompareVersion(const TCHAR *pchAct, ULONG cchAct, const TCHAR *pchReq, ULONG cchReq)
{
    const TCHAR *pchReqRel;
    const TCHAR *pchActRel;
    LONG lCmp;

    for (;;)
    {
        pchReqRel = pchReq;
        pchActRel = pchAct;
            
        while (cchReq && *pchReq != _T('.'))
        {
            pchReq++;
            cchReq--;
        }

        while (cchAct && *pchAct != _T('.'))
        {
            pchAct++;
            cchAct--;
        }

        if (pchAct == pchActRel && !cchAct)
            pchAct = pchActRel = NULL;
            
        if (pchReq == pchReqRel && !cchReq)
            pchReq = pchReqRel = NULL;

        lCmp = CompareRelease(pchActRel, pchAct - pchActRel, pchReqRel, pchReq - pchReqRel);

        if (lCmp || (!cchReq && !cchAct))
            return(lCmp);

        if (cchReq)
        {
            Assert(*pchReq == _T('.'));
            pchReq++;
            cchReq--;
        }
        
        if (cchAct)
        {
            Assert(*pchAct == _T('.'));
            pchAct++;
            cchAct--;
        }
    }
}

//+------------------------------------------------------------------------
//
//  Overview:   ContainVersion
//
//  Synopsis:   Like compare version, but checks if pchAct is
//              contained in the set specified by pchReq.
//
//-------------------------------------------------------------------------
LONG
ContainVersion(const TCHAR *pchAct, ULONG cchAct, const TCHAR *pchReq, ULONG cchReq)
{
    const TCHAR *pchReqRel;
    const TCHAR *pchActRel;
    LONG lCmp;

    for (;;)
    {
        pchReqRel = pchReq;
        pchActRel = pchAct;
            
        while (cchReq && *pchReq != _T('.'))
        {
            pchReq++;
            cchReq--;
        }

        while (cchAct && *pchAct != _T('.'))
        {
            pchAct++;
            cchAct--;
        }

        if (pchAct == pchActRel && !cchAct)
            pchAct = pchActRel = NULL;

        lCmp = CompareRelease(pchActRel, pchAct - pchActRel, pchReqRel, pchReq - pchReqRel);

        if (lCmp || !cchReq)
            return(lCmp);

        Assert(*pchReq == _T('.'));
        pchReq++;
        cchReq--;
        
        if (cchAct)
        {
            Assert(*pchAct == _T('.'));
            pchAct++;
            cchAct--;
        }
    }
}


//+------------------------------------------------------------------------
//
//  Class:      CIVersionVectorThunk
//
//  Synopsis:   OLE object that serves as interface to CVersions
//
//-------------------------------------------------------------------------
class CIVersionVectorThunk : public IVersionVector
{
public:
    DECLARE_MEMCLEAR_NEW_DELETE(Mt(CIVerVector));
    CIVersionVectorThunk()       { _ulRefs = 1; }
    ~CIVersionVectorThunk()      { Detach(); }
    
    // IUnknown methods

    STDMETHOD(QueryInterface)(REFIID iid, LPVOID * ppv);
    STDMETHOD_(ULONG, AddRef)()  { Assert(_ulRefs); _ulRefs++; return 0; }
    STDMETHOD_(ULONG, Release)() { _ulRefs--; if (!_ulRefs) { delete this; return 0; } return _ulRefs; }

    // IVersionVector methods

    STDMETHOD(SetVersion)(const TCHAR *pch, const TCHAR *pchVal);
    STDMETHOD(GetVersion)(const TCHAR *pch, TCHAR *pchVal, ULONG *pcchVal);

    // Internal
    CIVersionVectorThunk(CVersions *pValues)
                    { _pVersions = pValues; _fDetached = FALSE; _ulRefs = 1; }
    void Detach()   { if (_pVersions) _pVersions->RemoveVersionVector(); _pVersions = NULL; }

    ULONG _ulRefs;
    BOOL _fDetached;
    CVersions *_pVersions;
};


//+------------------------------------------------------------------------
//
//  Member:     CIVersionVectorThunk
//
//  Synopsis:   Simple QI Impl
//
//-------------------------------------------------------------------------
STDMETHODIMP
CIVersionVectorThunk::QueryInterface(REFIID iid, void **ppv)
{
    if (iid == IID_IUnknown || iid == IID_IVersionVector)
        *ppv = (IVersionVector*)this;
    else
    {
        *ppv = NULL;
        return(E_NOINTERFACE);
    }
    
    AddRef();
    return S_OK;
}

//+------------------------------------------------------------------------
//
//  Member:     CIVersionVectorThunk::SetVersion
//
//  Synopsis:   Passthrough, fail when detached
//
//-------------------------------------------------------------------------
HRESULT
CIVersionVectorThunk::SetVersion(const TCHAR *pch, const TCHAR *pchVal)
{
    if (!_pVersions)
        return E_FAIL;

    RRETURN(_pVersions->SetVersion(
        pch, pch ? _tcslen(pch) : 0, pchVal, pchVal ? _tcslen(pchVal) : 0));
}

//+------------------------------------------------------------------------
//
//  Member:     CIVersionVectorThunk::GetVersion
//
//  Synopsis:   Passthrough, fail when detached
//
//-------------------------------------------------------------------------
HRESULT
CIVersionVectorThunk::GetVersion(const TCHAR *pch, TCHAR *pchVal, ULONG *pcchVal)
{
    if (!_pVersions)
        return E_FAIL;

    RRETURN(_pVersions->GetVersion(pch, _tcslen(pch), pchVal, pcchVal));
}



//+------------------------------------------------------------------------
//
//  Class:      CVersions
//
//-------------------------------------------------------------------------

//+------------------------------------------------------------------------
//
//  Member:     CVersions::Init
//
//  Synopsis:   Set up reserved string values
//
//-------------------------------------------------------------------------
HRESULT
CVersions::Init()
{
    HRESULT hr;
    
    hr = THR(InitAssoc(&_pAssocIf, _T("if"), 2));
    if (hr)
        goto Cleanup;
        
    hr = THR(InitAssoc(&_pAssocEndif, _T("endif"), 5));
    if (hr)
        goto Cleanup;
        
    hr = THR(InitAssoc(&_pAssocTrue, _T("true"), 4));
    if (hr)
        goto Cleanup;
        
    hr = THR(InitAssoc(&_pAssocFalse, _T("false"), 5));
    if (hr)
        goto Cleanup;
        
    hr = THR(InitAssoc(&_pAssocLt, _T("lt"), 2));
    if (hr)
        goto Cleanup;
        
    hr = THR(InitAssoc(&_pAssocLte, _T("lte"), 3));
    if (hr)
        goto Cleanup;
        
    hr = THR(InitAssoc(&_pAssocGt, _T("gt"), 2));
    if (hr)
        goto Cleanup;
        
    hr = THR(InitAssoc(&_pAssocGte, _T("gte"), 3));
    if (hr)
        goto Cleanup;

#ifdef CLIENT_SIDE_INCLUDE_FEATURE
    hr = THR(InitAssoc(&_pAssocInclude, _T("include"), 7));
    if (hr)
        goto Cleanup;
#endif

Cleanup:
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CVersions::~CVersions
//
//  Synopsis:   Free all the strings stored in the CAssocArray
//
//-------------------------------------------------------------------------
CVersions::~CVersions()
{
    Commit(); // detach any IVersionVector thunk

    Assert(!_asaValues._fStatic); // can't free stuff if this is false!
    
    CAssoc **ppAssoc = _asaValues.VolatileHashTablePtr();

    for (DWORD c = _asaValues._mHash; c; c--, ppAssoc++)
    {
        if (*ppAssoc && (*ppAssoc)->_number)
        {
            ((CStr *)&((*ppAssoc)->_number))->Free();
        }
    }

    _asaValues.Deinit();
}

//+------------------------------------------------------------------------
//
//  Member:     CVersions::InitAssoc
//
//  Synopsis:   Set up reserved string values
//
//-------------------------------------------------------------------------
HRESULT
CVersions::InitAssoc(const CAssoc **ppAssoc, const TCHAR *pch, ULONG cch)
{
    *ppAssoc = _asaValues.AddAssoc(0, pch, cch, HashStringCiDetectW(pch, cch, 0));
    if (!*ppAssoc)
        RRETURN(E_OUTOFMEMORY);

    return S_OK;
}

//+------------------------------------------------------------------------
//
//  Member:     CVersions::GetIVersionVector
//
//  Synopsis:   Create or retrieve IVersionVector object
//
//-------------------------------------------------------------------------
HRESULT
CVersions::GetVersionVector(IVersionVector **ppIVersionVector)
{
    if (_fCommitted)
    {
        Assert(!_pThunk);
        RRETURN(E_FAIL);
    }
    
    if (_pThunk)
        RRETURN(_pThunk->QueryInterface(IID_IVersionVector, (void**)ppIVersionVector));
        
    CIVersionVectorThunk *pThunk = new CIVersionVectorThunk(this);
    if (!pThunk)
        RRETURN(E_OUTOFMEMORY);

    _pThunk = pThunk;

    *ppIVersionVector = (IVersionVector*)pThunk;
    
    return S_OK;
}

//+------------------------------------------------------------------------
//
//  Member:     CVersions::Commit
//
//  Synopsis:   Become read-only.
//
//              Detach IVersionVector object and prevent IVersionVector objects
//              from being created in the future.
//
//-------------------------------------------------------------------------
void
CVersions::Commit()
{
    if (_pThunk)
        _pThunk->Detach();

    Assert(!_pThunk);
    _fCommitted = TRUE;
}

//+------------------------------------------------------------------------
//
//  Member:     CVersions::IsReserved
//
//  Synopsis:   Returns TRUE for pAssocs that match a reserved value
//
//-------------------------------------------------------------------------
BOOL
CVersions::IsReserved(const CAssoc *pAssoc) const
{
    return (pAssoc && !pAssoc->_number &&
            (pAssoc == _pAssocIf ||
             pAssoc == _pAssocEndif ||
             pAssoc == _pAssocTrue ||
             pAssoc == _pAssocFalse ||
             pAssoc == _pAssocLt ||
             pAssoc == _pAssocLte ||
             pAssoc == _pAssocGt ||
             pAssoc == _pAssocGte
#ifdef CLIENT_SIDE_INCLUDE_FEATURE
             || pAssoc == _pAssocInclude
#endif             
            ));
}

//+------------------------------------------------------------------------
//
//  Member:     CVersions::SetVersion
//
//  Synopsis:   Sets the version value corresponding to the given string
//
//-------------------------------------------------------------------------
HRESULT
CVersions::SetVersion(const TCHAR *pch, ULONG cch, const TCHAR *pchVal, ULONG cchVal)
{
    HRESULT hr = S_OK;
    DWORD hash;
    const CAssoc *pAssoc;
    DWORD_PTR val;

    Assert(sizeof(CStr) == sizeof(val));
    
    val = 0;
    
    if (pchVal)
    {
        hr = THR(((CStr *)&val)->Set(pchVal, cchVal));
        if (hr)
            goto Cleanup;
    }

    hash = HashStringCiDetectW(pch, cch, 0);
    
    pAssoc = _asaValues.AssocFromStringCi(pch, cch, hash);
    
    if (pAssoc)
    {
        // precaution: not allowed to set reserved values
        if (IsReserved(pAssoc))
        {
            hr = E_FAIL;
            goto Cleanup;
        }

        if (pAssoc->_number)
        {
            ((CStr *)&(pAssoc->_number))->Free();
        }
            
        Assert(!_asaValues._fStatic);
        const_cast<CAssoc *>(pAssoc)->_number = val;
    }
    else if (val) // don't bother adding zero - equivalent to undefined
    {
        pAssoc = _asaValues.AddAssoc(val, pch, cch, hash);
        if (!pAssoc)
        {
            hr = E_OUTOFMEMORY;
            goto Cleanup;
        }
    }

    val = 0;

Cleanup:

    if (val)
    {
        ((CStr *)&val)->Free();
    }

    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CVersions::GetVersion
//
//  Synopsis:   Gets the version value corresponding to the given string
//
//              If insufficient buffer size, *pcch returns required
//              buffer size.
//
//              If successful, *pcch returns string length of version
//              value, or (ULONG)-1 if there is no version value.
//
//-------------------------------------------------------------------------
HRESULT
CVersions::GetVersion(const TCHAR *pch, ULONG cch, TCHAR *pchVer, ULONG *pcchVer)
{
    const CAssoc *pAssoc;
    DWORD_PTR val;
    ULONG cchVer;
    
    pAssoc = GetAssoc(pch, cch);
    val = pAssoc ? pAssoc->Number() : 0;

    cchVer = val ? ((CStr *)&val)->Length() + 1 : 0;

    if (!*pcchVer)
    {
        *pcchVer = cchVer;
        return S_OK;
    }

    if (*pcchVer < cchVer)
    {
        *pcchVer = cchVer;
        return E_FAIL;
    }

    if (cch)
    {
        memcpy(pchVer, (void*)val, cchVer * sizeof(TCHAR));
    }

    *pcchVer = cchVer - 1;

    return S_OK;
}



//+------------------------------------------------------------------------
//
//  Member:     CVerTok
//
//  Synopsis:   The tokenizer for version expressions
//
//              The tokenizer recognizes the following expressions:
//
//              Word    = ([a-z] | [A-Z]) ([0-9] | [a-z] | [A-Z])* (space)*
//              Version = [0-9] ([0-9] | [a-z] | [A-Z] | '.')* (space)*
//              Char    = (non-[a-z][A-Z][0-9]) (space)*
//
//-------------------------------------------------------------------------

//+------------------------------------------------------------------------
//
//  Class:      CVerTok
//
//  Synopsis:   Tokenizer for the CVersions evaluator
//
//-------------------------------------------------------------------------
class CVerTok
{
public:
    enum CT
    {
        CT_NULL = 0,
        CT_WORD = 1,
        CT_VERS = 2,
        CT_CHAR = 3,
    };

    void Init(CVersions *pValues, const TCHAR *pch, ULONG cch);
    void Advance();

    BOOL IsIf()     { return(_ct == CT_WORD && _pVersions->IsIf(_pAssoc)); }
    BOOL IsEndif()  { return(_ct == CT_WORD && _pVersions->IsEndif(_pAssoc)); }
    BOOL IsTrue()   { return(_ct == CT_WORD && _pVersions->IsTrue(_pAssoc)); }
    BOOL IsFalse()  { return(_ct == CT_WORD && _pVersions->IsFalse(_pAssoc)); }
    BOOL IsLt()     { return(_ct == CT_WORD && _pVersions->IsLt(_pAssoc)); }
    BOOL IsLte()    { return(_ct == CT_WORD && _pVersions->IsLte(_pAssoc)); }
    BOOL IsGt()     { return(_ct == CT_WORD && _pVersions->IsGt(_pAssoc)); }
    BOOL IsGte()    { return(_ct == CT_WORD && _pVersions->IsGte(_pAssoc)); }
#ifdef CLIENT_SIDE_INCLUDE_FEATURE
    BOOL IsInclude(){ return(_ct == CT_WORD && _pVersions->IsInclude(_pAssoc)); }
#endif
    BOOL IsOr()     { return(_ct == CT_CHAR && _ch == _T('|')); }
    BOOL IsAnd()    { return(_ct == CT_CHAR && _ch == _T('&')); }
    BOOL IsNot()    { return(_ct == CT_CHAR && _ch == _T('!')); }
    BOOL IsLParen() { return(_ct == CT_CHAR && _ch == _T('(')); }
    BOOL IsRParen() { return(_ct == CT_CHAR && _ch == _T(')')); }
    BOOL IsWord()   { return(_ct == CT_WORD); }
    BOOL IsVersion(){ return(_ct == CT_VERS); }
    BOOL IsNull()   { return(_ct == CT_NULL); }

    LONG Ch()        { Assert(_ct == CT_CHAR); return _ch; }
    const TCHAR *Pch() { return _pch; }
    ULONG CchRemaining() { return _cch; }
    
    void ActVer(const TCHAR **ppch, ULONG *pcch);
    void ReqVer(const TCHAR **ppch, ULONG *pcch) { Assert(_ct == CT_VERS); *ppch = _pchVer; *pcch = _cchVer; }

private:
    CVersions *_pVersions;
    const TCHAR *_pch;
    ULONG _cch;
    
    CT _ct;
    
    const CAssoc *_pAssoc;
    const TCHAR *_pchVer;
    ULONG _cchVer;
    TCHAR _ch;
};

//+------------------------------------------------------------------------
//
//  Member:     CVerTok::Init
//
//  Synopsis:   Attaches a string to be tokenized,
//              and an instance of CVersions for identifier lookups
//
//-------------------------------------------------------------------------
void
CVerTok::Init(CVersions *pValues, const TCHAR *pch, ULONG cch)
{
    _pVersions = pValues;
    _pch = pch;
    _cch = cch;
}

//+------------------------------------------------------------------------
//
//  Member:     CVerTok::Advance
//
//  Synopsis:   Scans characters and loads value of next token
//
//-------------------------------------------------------------------------
void
CVerTok::Advance()
{
    if (!_cch)
    {
        _ct = CT_NULL;
        return;
    }

    const TCHAR *pch = _pch;
    const TCHAR *pchStart = pch;
    ULONG cch = _cch;
    
    if (ISALPHA(*pch))
    {
        // Scan word
        do
        {
            cch--;
            pch++;
        } while (cch && (ISALPHA(*pch) || ISDIGIT(*pch) || *pch == _T('_')));
        
        _pAssoc = _pVersions->GetAssoc(pchStart, pch - pchStart);

        _ct = CT_WORD;
    }
    else if (ISDIGIT(*pch))
    {
        _ct = CT_VERS;
        _pchVer = pch;

        while (ISALPHA(*pch) || ISDIGIT(*pch) || *pch == _T('.'))
        {
            pch++;
            cch--;
        }
        
        _cchVer = pch - _pchVer;
    }
    else if (!ISSPACE(*pch))
    {
        // Scan one symbol
        _ct = CT_CHAR;
        _ch = *pch;
        cch--;
        pch++;
    }

    // skip space
    while (cch && ISSPACE(*pch))
    {
        cch--;
        pch++;
    }

    _cch = cch;
    _pch = pch;
}

//+------------------------------------------------------------------------
//
//  Member:     CVerTok::ActVer
//
//  Synopsis:   Looks up the actual version for the specified component
//
//-------------------------------------------------------------------------
void
CVerTok::ActVer(const TCHAR **ppchVer, ULONG *pcchVer)
{
    Assert(_ct == CT_WORD);

    if (_pAssoc)
    {
        *pcchVer = ((CStr *)&(_pAssoc->_number))->Length();
        *ppchVer = *((CStr *)&(_pAssoc->_number));
    }
    else
    {
        *pcchVer = 0;
        *ppchVer = NULL;
    }
}


//+------------------------------------------------------------------------
//
//  Class:      CVerState
//
//  Synopsis:   Unit of state for the parser for CVersions evaluator
//
//              Consists of a state and a single current value
//
//-------------------------------------------------------------------------
enum VSTATE
{
    VSTATE_NULL = 0,
    VSTATE_OR,          // OR
    VSTATE_ORLOOP,
    VSTATE_AND,         // AND
    VSTATE_ANDLOOP,
    VSTATE_NOT,         // NOT
    VSTATE_NOTNOT,
    VSTATE_TERM,        // TERM
    VSTATE_TERMNOT,
    VSTATE_TERMPAREN,
    VSTATE_CMP,         // CMP
};

class CVerState
{
public:
    VSTATE  _cs  : 7;
    ULONG   _val : 1;
};



//+------------------------------------------------------------------------
//
//  Class:      CVerStack
//
//  Synopsis:   Stack of state for the parser for CVersions evaluator
//
//              Allows recursive-descent on a compressed-storage stack.
//
//-------------------------------------------------------------------------
#define MAX_VER_STACK_DEPTH 128 // Each paren counts for two in depth

class CVerStack : public CVerState
{
public:
    CVerStack() : _ary(Mt(CVerStackAry))  { _cs = VSTATE_NULL; _val = _valRet = 0; }
    ULONG _valRet : 1;
    
    CStackDataAry<CVerState, MAX_VER_STACK_DEPTH> _ary;

    HRESULT Call(VSTATE csNew, VSTATE csRet);
    void Ret(ULONG val);
    
    HRESULT Call(VSTATE csNew, ULONG valNew, VSTATE csRet)
                                            { HRESULT hr = Call(csNew, csRet); _val = valNew; return(hr); }
    void Go(VSTATE csNew)                   { _cs = csNew; }
    void Go(VSTATE csNew, ULONG valNew)     { _cs = csNew; _val = valNew; }

    ULONG Depth()                           { return _ary.Size(); }
};

//+------------------------------------------------------------------------
//
//  Member:     CVerStack::Call
//
//  Synopsis:   Pushes a return state and current value on the stack,
//              then jumps to a specified new state.
//
//-------------------------------------------------------------------------
HRESULT
CVerStack::Call(VSTATE csNew, VSTATE csRet)
{
    HRESULT hr;
    
    _cs = csRet;
    
    hr = THR(_ary.AppendIndirect((CVerState *)this));
    
    _cs = csNew;
    
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CVerStack::Ret
//
//  Synopsis:   Pops a return state and value from the stack, and
//              sets _valRet as specified.
//
//-------------------------------------------------------------------------
void
CVerStack::Ret(ULONG val)
{
    Assert(_ary.Size());
    
    CVerState *pState = _ary + _ary.Size() - 1;
    _valRet = val;
    _cs = pState->_cs;
    _val = pState->_val;
    _ary.Delete(pState - _ary);
}




//+------------------------------------------------------------------------
//
//  Member:     CVersions::Evaluate
//
//  Synopsis:   The recursive-descent parser to evaluate version
//              expressions.
//
//              The grammar is implemented as follows
//
//              Expression -> OR
//
//              OR   -> AND | AND '|' OR
//                      returns TRUE/FALSE
//              AND  -> NOT | NOT '&' AND
//                      returns TRUE/FALSE
//              NOT  -> TERM | '!' TERM
//                      returns TRUE/FALSE
//              TERM -> CMP | '(' OR ')'
//                      returns TRUE/FALSE
//              CMP  -> 'lt' word version |
//                      'gt' word version |
//                      'lte' word version |
//                      'gte' word version |
//                      word version |
//                      word |
//                      'true' |
//                      'false'
//                      returns TRUE/FALSE
//
//-------------------------------------------------------------------------

HRESULT
CVersions::Evaluate(LONG *pRetval, const TCHAR *pch, ULONG cch)
{
    HRESULT hr;
    CVerTok tok;
    CVerStack s;

    tok.Init(this, pch, cch);
    tok.Advance();

    hr = THR(s.Call(VSTATE_OR, VSTATE_NULL));
    if (hr)
        goto Cleanup;
    
    for (;;)
    {
        if (s.Depth() >= MAX_VER_STACK_DEPTH)
            goto Syntax;
            
        switch (s._cs)
        {
        case VSTATE_NULL:
            goto Done;

        // OR   -> AND | AND '|' OR
        //          returns TRUE/FALSE
        
        case VSTATE_OR:
            hr = THR(s.Call(VSTATE_AND, 1, VSTATE_ORLOOP));
            if (hr)
                goto Cleanup;
            break;

        case VSTATE_ORLOOP:
            s._val |= s._valRet;
                
            if (tok.IsOr())
            {
                tok.Advance();
                s.Go(VSTATE_OR);
                break;
            }

            s.Ret(s._val);
            break;

        // AND  -> NOT | NOT '&' AND
        //          returns TRUE/FALSE
        
        case VSTATE_AND:
            hr = THR(s.Call(VSTATE_NOT, VSTATE_ANDLOOP));
            if (hr)
                goto Cleanup;
            break;

        case VSTATE_ANDLOOP:
            s._val &= s._valRet;
                
            if (tok.IsAnd())
            {
                tok.Advance();
                s.Go(VSTATE_AND);
                break;
            }

            s.Ret(s._val);
            break;

        // NOT  -> TERM | '!' NOT
        //          returns TRUE/FALSE

        case VSTATE_NOT:
            if (!tok.IsNot())
            {
                s.Go(VSTATE_TERM);
                break;
            }

            tok.Advance();

            // rather than calling, loop so as not to stack with (!!!!!foo)
            
            if (!tok.IsNot())
            {
                hr = THR(s.Call(VSTATE_TERM, VSTATE_NOTNOT));
                if (hr)
                    goto Cleanup;
                break;
            }

            tok.Advance();
            break;

        case VSTATE_NOTNOT:
        
            s.Ret(!s._valRet);
            break;

        // TERM -> CMP | '(' OR ')'
        //          returns TRUE/FALSE

        case VSTATE_TERM:
        
            if (tok.IsLParen())
            {
                tok.Advance();
                hr = THR(s.Call(VSTATE_OR, 0, VSTATE_TERMPAREN));
                if (hr)
                    goto Cleanup;
                break;
            }

            s.Go(VSTATE_CMP);
            break;
            
        case VSTATE_TERMPAREN:

            if (!tok.IsRParen())
                goto Syntax;
                
            tok.Advance();
            s.Ret(s._valRet);
            break;

        // CMP  -> word |
        //         word version |
        //         'lt' word version |
        //         'gt' word version |
        //         'lte' word version |
        //         'gte' word version |
        //         'true' |
        //         'false'
        //          returns TRUE/FALSE
        
        case VSTATE_CMP:

            {
                enum { LT, LTE, X, GTE, GT, T, F } comp;
                LONG lRes;
                const TCHAR *pchActVer;
                ULONG cchActVer;
                const TCHAR *pchReqVer;
                ULONG cchReqVer;
                
                if (tok.IsTrue())
                    comp = T;
                else if (tok.IsFalse())
                    comp = F;
                else if (tok.IsLt())
                    comp = LT;
                else if (tok.IsLte())
                    comp = LTE;
                else if (tok.IsGt())
                    comp = GT;
                else if (tok.IsGte())
                    comp = GTE;
                else
                    comp = X;

                if (comp != X)
                    tok.Advance();

                if (comp == T || comp == F)
                {
                    s.Ret(comp == T);
                    break;
                }
                
                if (!tok.IsWord())
                    goto Syntax;

                tok.ActVer(&pchActVer, &cchActVer);
                
                tok.Advance();

                if (!tok.IsVersion())
                {
                    if (comp != X)
                        goto Syntax;

                    s.Ret(!!pchActVer);
                    break;
                }

                if (!pchActVer)
                {
                    tok.Advance();
                    s.Ret(!!(comp == LT || comp == LTE));
                    break;
                }

                tok.ReqVer(&pchReqVer, &cchReqVer);

                Assert(cchReqVer && cchActVer);

                lRes = ContainVersion(pchActVer, cchActVer, pchReqVer, cchReqVer);

                tok.Advance();
                
                if (lRes < 0 && (comp == LT || comp == LTE) ||
                    !lRes && (comp == LTE || comp == X || comp == GTE) ||
                    lRes > 0 && (comp == GT || comp == GTE))
                    s.Ret(1);
                else
                    s.Ret(0);

                break;
            }
        }
    }

Syntax:

    // syntax error
    *pRetval = -1;
    RRETURN(hr);
    
Done:

    Assert( s._valRet == 1 ||
            s._valRet == 0);
    Assert(!hr);
            
    if (!tok.IsNull())
        *pRetval = -1;
    else
        *pRetval = (s._valRet == 0 ? 0 : 1);
    
    return(S_OK);

Cleanup:

    goto Syntax;
}

//+------------------------------------------------------------------------
//
//  Member:     CVersions::EvaluateConditional
//
//  Synopsis:   Parses "if (Expression)" or "endif" and returns
//
//              COND_NULL       - syntax error
//              COND_IF_TRUE    - if TRUE
//              COND_IF_FALSE   - if FALSE
//              COND_ENDIF      - endif
//
//-------------------------------------------------------------------------

HRESULT
CVersions::EvaluateConditional(CONDVAL *pRetval, const TCHAR *pch, ULONG cch)
{
    HRESULT hr = S_OK;
    CVerTok tok;
    LONG lBool;
    CONDVAL retval = COND_NULL;

    tok.Init(this, pch, cch);
    tok.Advance();

    if (tok.IsIf())
    {
        hr = THR(Evaluate(&lBool, tok.Pch(), tok.CchRemaining()));
        if (hr)
            goto Cleanup;

#if DBG == 1
        {
            TCHAR ach[64];
            ULONG cch = min(tok.CchRemaining(), (ULONG)63);
            memcpy(ach, tok.Pch(), cch * sizeof(TCHAR));
            ach[cch] = 0;
            
            TraceTag((tagHtmVer, "\"%ls\" evaluated to %d", ach, lBool));
        }
#endif

        retval = (lBool < 0 ? COND_SYNTAX : lBool ? COND_IF_TRUE : COND_IF_FALSE);
        goto Cleanup;
    }
    
    if (tok.IsEndif())
    {
        // CONSIDER: is it a syntax error to have tokens after "endif"?
        retval = COND_ENDIF;
        goto Cleanup;
    }

#ifdef CLIENT_SIDE_INCLUDE_FEATURE
    if (tok.IsInclude())
    {
        retval = COND_INCLUDE;
        goto Cleanup;
    }
#endif

    retval = COND_NULL;

Cleanup:
    *pRetval = retval;
    
    RRETURN(hr);
}


//+------------------------------------------------------------------------
//
//  Global:     g_pVersions
//
//  Synposis:   Process cache for versions cache
//
//-------------------------------------------------------------------------
CVersions * g_pVersions = NULL;

CVersions *
GetGlobalVersions()
{   
    // Take it local to avoid a race
    CVersions *pVersions = g_pVersions;
    
    if (pVersions)
        pVersions->AddRef();
        
    return pVersions;
}

BOOL
SuggestGlobalVersions(CVersions *pVersions)
{
    LOCK_GLOBALS;
    Assert(pVersions);
    if (!g_pVersions)
    {
        // Force CVersions object to become read-only before dropping it in global
        pVersions->Commit();
        pVersions->AddRef();
        g_pVersions = pVersions;
        return TRUE;
    }

    return FALSE;
}

void
DeinitGlobalVersions()
{
    if (g_pVersions)
    {
        g_pVersions->Release();
        g_pVersions = NULL;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\download\htmtok.cxx ===
//+------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1992 - 1995.
//
//  File:       htmtok.cxx
//
//  Contents:   CHtmPre::Tokenize
//
//              Split out from htmpre.cxx for better code generation
//
//-------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_HTM_HXX_
#define X_HTM_HXX_
#include "htm.hxx"
#endif

#ifndef X_WCHDEFS_H_
#define X_WCHDEFS_H_
#include "wchdefs.h"
#endif

#ifndef X_INTL_HXX_
#define X_INTL_HXX_
#include "intl.hxx"
#endif

#ifndef X_HEDELEMS_HXX_
#define X_HEDELEMS_HXX_
#include "hedelems.hxx"
#endif

#ifndef X_ASSOC_HXX_
#define X_ASSOC_HXX_
#include "assoc.hxx"
#endif

#ifndef X_ENTITY_H_
#define X_ENTITY_H_
#include "entity.h"
#endif

#ifndef X_HTMVER_HXX_
#define X_HTMVER_HXX_
#include "htmver.hxx"
#endif

#ifdef WIN16
#ifndef X_URLMKI_H_
#define X_URLMKI_H_
#include "urlmki.h"
#endif
#endif

#ifndef X_SWITCHES_HXX_
#define X_SWITCHES_HXX_
#include "switches.hxx"
#endif

#ifndef X_HTMTOK_HXX_
#define X_HTMTOK_HXX_
#include "htmtok.hxx"
#endif

#define HTMPRE_BLOCK_SIZE      4096 // assumed to be power of 2

#define CCH_LARGE_TOKEN       16384 // after text buf grows to 16K, use exponential allocation
#define CCH_OVERFLOW_TOKEN  1048576 // stop growing after a megabyte
#define MAX_ATTR_COUNT        16383 // Allow at most 16K-1 attribute-value pairs

ExternTag(tagPalette);
ExternTag(tagToken);

PerfDbgExtern(tagHtmPre);
PerfDbgExtern(tagHtmPreOneCharText);
PerfDbgExtern(tagPerfWatch);

DWORD HashString(const TCHAR *pch, DWORD len, DWORD hash);
extern HRESULT SetUrlDefaultScheme(const TCHAR *pchHref, CStr *pStr);
extern BOOL _7csnziequal(const TCHAR *string1, DWORD cch, const TCHAR *string2);

#if DBG != 1
#pragma optimize(SPEED_OPTIMIZE_FLAGS, on)
#endif

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::Tokenize
//
//  Synopsis:   The main method of the tokenizer.
//
//              Advances _pch up to _pchEnd, producing tag/text output
//              and saving state as required.
//
//-------------------------------------------------------------------------
//
// Description:
//
// The tokenizer is designed to mimic Netscape 3.0 parsing rules.
//
// * space is ascii 9-13 and 32.
// * markup begins with < and &
// * there are three quote chars, ' " and `, and they only self-match
// * tags begin with <alpha, <!, <?, or </
// * tags end with a > which does not lie inside a quote
// * tag names can contain any char except a space or a >
// * attribute names can be quoted (closing quote does not terminate name)
// * unquoted attribute names contain any char (incl quote) except sp, >, or =
// * attribute values can be quoted (closing quote does terminate value)
// * unquoted values contain any char (incl quote) except sp or >
// * EOF in the middle of a tag causes initial < to be treated as text
// * comments begin with <!-- and close with -->
// * in addition, comments can have fewer than 4 dashes, e.g., <!-->
// * EOF in the middle of a comment causes comment to be treated as <! tag
// * all markup in a comment is ignored, even inside literal tags
// * comments inside literal tags are treated as text
// * literal tags can suppress either entities or tags or both
// * plain text mode ignores all markup, including </PLAINTEXT>
// * numbered entities can have an arbitrary number of digits
// * &#0 is not a legal numbered entity (treated as text)
// * a semicolon after an entity is eaten, but a space is not
// * CRLF collapses to CR, but LFCR does not (it becomes CRCR)
// * document.write output appears directly after </SCRIPT>
//
// Following are regular expressions representing the tokenizer:
// (n = not, s = space, q = quote, a = alphabetic, d = digit)
//
// Comment:
// <!--((-)*|(.)*--)>
//
// Begin tag:
// <(a)(ns>)*((s)*[(q)(nq)*(q)][(ns=>)*][=][(q)(nq)*(q)|(nsq>)(ns>)*])*(s)*>
//
// End tag:
// </(s)*[(q)(nq)*(q)](ns>)*((s)*[(q)(nq)*(q)][(ns=>)*][=][(q)(nq)*(q)|(nsq>)(ns>)*])*(s)*>
//
// Decl tag:
// <!(ns>)*((s)*[(q)(nq)*(q)][(ns=>)*][=][(q)(nq)*(q)|(nsq>)(ns>)*])*(s)*>
//
// Entity:
// &(entity|(#d(d)*))[;]
//
// Everything else is text.
//
//-------------------------------------------------------------------------

#if DBG == 1
#define TraceState(state) if (IsTagEnabled(tagToken)) {TraceStateImpl(#state, pchStart, pch, pchEnd);}

#define PRETTY_CHAR(ch) ((ch) < 32 ? _T('~') : (ch) > 127 ? _T('@') : (ch))


void TraceStateImpl(char *state, TCHAR *pchStart, TCHAR *pchAt, TCHAR *pchEnd)
{
    TCHAR achBefore[12 + 1];
    TCHAR achAfter[48 + 1];
    TCHAR *pch;
    TCHAR *pchTo;
    static c=0;

    achBefore[ARRAY_SIZE(achBefore) - 1] = _T('\0');
    achAfter[ARRAY_SIZE(achAfter) - 1] = _T('\0');

    pch = pchAt - (ARRAY_SIZE(achBefore) - 1);
    pchTo = achBefore;

    while (pch < pchStart)
    {
        *pchTo++ = _T('*');
        pch++;
    }

    while (pch < pchAt)
    {
        *pchTo = PRETTY_CHAR(*pch);
        pchTo++;
        pch++;
    }

    pchTo = achAfter + (ARRAY_SIZE(achAfter) - 1) - 1;
    pch = pchAt + (ARRAY_SIZE(achAfter) - 1);

    while (pch >= pchEnd && pch > pchAt)
    {
        *pchTo-- = _T('*');
        pch--;
    }

    while (pch > pchAt)
    {
        *pchTo = PRETTY_CHAR(*pch);
        pchTo--;
        pch--;
    }

    TraceTag((tagToken, "%8d %14s:  %ls{%lc}%ls", c++, state, achBefore, PRETTY_CHAR(*pchAt), achAfter));
}

#undef PRETTY_CHAR

#else
#define TraceState(state)
#endif

// CHtmPre keeps copies of a bunch of the instance variables on the stack to allow for
// compiler optimizations.  These macros save all the local variables back to the instance
// variables before calling functions that might rely / alter the instance variables.
#define SAVE_STACKVAR_STATE()  { _pch = pch;  _pchEnd = pchEnd;  _pchStart = pchStart;  _state = state; }
#define RESTORE_STACKVAR_STATE()  { pch = _pch; ch = *pch; pchEnd = _pchEnd; pchStart = _pchStart; state = _state; }

HRESULT
CHtmPre::Tokenize()
{
    // nothing to tokenize
    if (!_pch)
        return S_OK;

    PerfDbgLog(tagHtmPre, this, "+CHtmPre::Tokenize");

    static const TCHAR achPIXmlNs[]       = PI_XMLNS;  // _T("XML:NAMESPACE");
    static const TCHAR achPIExtendedTag[] = PI_EXTENDEDTAG; // _T("?IMPORT");
    static const TCHAR achPIPXml[]        = PI_PRINTXML; // _T("PXML");

    TCHAR * pch        = _pch;
    TCHAR * pchEnd     = _pchEnd;
    TCHAR * pchStart   = _pchStart;
    TCHAR * pchWord    = _pchWord;
    ULONG   state      = _state;
    TCHAR   chQuote    = _chQuote;
    TCHAR   ch         = *pch;
    XCHAR   chEnt;
    HRESULT hr;

    if (_fTopLevelRedirect && !_fPostStarted)
    {
        // Note: Posting this token will kickstarted the post which sets the security ID 
        // on CDwndoc and CMarkup in OnPostStart so that any subsequent downloads will use 
        // the correct redirected security ID from CDwnDoc and CMarkup instead of the old
        // pre-redirect one

        CHtmTag *pht = NULL;
        
        hr = THR(_pHtmTagStm->WriteTagBeg(ETAG_RAW_POSTSTART, &pht));
        if (hr)
            goto Error;

        _fPostStarted = TRUE;

        // This will cause the PreParser thread to be suspended and the post to start
        hr = E_PENDING;
        goto Cleanup;
    }

    //Straight assignments are faster than branching decisions
    _fPostStarted = TRUE;

    // scan every avaliable character
    while (ch)
    {
        Assert(     ( _cLiteral > 0 && _etagLiteral )
               ||   ( _cLiteral == 0 && !_etagLiteral ) );
        Assert(pch < pchEnd);
        Assert(ch == *pch);

        switch (state)
        {

        case TS_PLAINTEXT:

            TraceState(PLAINTEXT);

            // pchStart: first text char not yet output

            // In plaintext, everything is text
            pch = pchEnd;
            ch  = *pch;

            // fallthrough

        case TS_TEXT:
        TEXT:

            if (_cOutputInsert)
            {
                hr = THR(OutputInserts());
                if (hr)
                    goto Cleanup;
            }

            // Optimization: deal with leading CRLF/LF
            if (ch == _T('\r'))
            {
                _nLine += _fCount;
                ch = *(++pch);
                
                if (ch == _T('\n'))
                    ch = *(++pch);
            }
            else if (ch == _T('\n') && pch == pchStart)
            {
                if (!_fEndCR)
                    _nLine += _fCount;
                    
                ch = *(++pch);
            }

        QUICKTEXT:

            TraceState(TEXT);

            // pchStart: first text char not yet output
            // pch:      first char not yet known to be text

            // skip to first special char
            while (ISTXTCH(ch))
                ch = *(++pch);

            // count line  (count \r or \n, but not \n immediately following \r)
            if (ch == _T('\r'))
            {
                _nLine += _fCount;
                ch = *(++pch);
                
                if (ch == _T('\n'))
                    ch = *(++pch);
                    
                goto QUICKTEXT;
            }

            if (ch == _T('\n'))
            {
                if (*(pch-1) != _T('\r'))
                    _nLine += _fCount;
                ch = *(++pch);
                goto QUICKTEXT;
            }

            if (pch > pchStart && !_fSuppressLeadingText)
            {
                BOOL fAscii = _pchAscii <= _pchStart;

                if (_etagEchoSourceEnd)
                {
                    hr = THR(SaveSource(pchStart, PTR_DIFF(pch, pchStart)));
                    if (hr)
                        goto Cleanup;
                }

                #if DBG==1 || defined(PERFTAGS)
                if (IsPerfDbgEnabled(tagHtmPreOneCharText))
                {
                    for (TCHAR * pchT = pchStart; pchT < pch; ++pchT)
                    {
                        hr = THR(_pHtmTagStm->WriteTag(ETAG_RAW_TEXT, pchT, 1, fAscii));
                        if (hr)
                            goto Error;
                    }
                }
                else
                #endif
                {
                    TraceTag((tagToken, "   OutputText %d", PTR_DIFF(pch, pchStart)));
                    hr = THR(_pHtmTagStm->WriteTag(ETAG_RAW_TEXT, pchStart, PTR_DIFF(pch, pchStart), fAscii));
                    if (hr)
                        goto Error;
                }
            }

            _nLineStart = _nLine;
            _fCountStart = _fCount;
            if (pch > pchStart)
                _fEndCR = (*(pch-1) == _T('\r'));
            pchStart = pch;

            // end of available buffer
            if (!ch)
                break;

            // possible entity
            if (ch == _T('&'))
            {
                state = _fLiteralEnt ? TS_TEXT : TS_ENTOPEN;
                ch = *(++pch);      // at '&'+1
                break;
            }

            Assert(ch == _T('<'));

            // possible tag/comment/decl
            state = TS_TAGOPEN;
            ch = *(++pch);      // at '<'+1

            // end of available buffer
            if (!ch)
                break;

            // fallthrough

        case TS_TAGOPEN:

            TraceState(TAGOPEN);

            // pchStart: at '<'
            // pch:      at '<'+1

            // possibly not a tag
            if ((!ISALPHA(ch) || ( _etagLiteral && _etagLiteral != ETAG_GENERIC_NESTED_LITERAL ) ) && ch != _T('/'))
            {
                // unusual markup: <!, <%, <?

                if (ch == _T('!'))
                {
                    state = TS_TAGBANG;
                    ch = *(++pch);
                    goto TAGBANG; // withstands \0
                }
                else if (ch == _T('%'))
                {
                    state = TS_TAGASP;
                    ch = *(++pch);
                    goto TAGASP;
                }
                else if (ch == _T('?'))
                {
                    state = TS_TAGSCAN;
                    ch = *(++pch);
                    goto TAGSCAN;
                }

                // not markup
                state = TS_TEXT;
                goto TEXT;
            }

            state = TS_TAGSCAN;
            ch = *(++pch);

            // fallthrough

        // For Netscape compatibility: when parsing a tag, begin by finding the
        // ending '>'. Any > hidden by quotes don't count so must match quotes
        // according to Netscape rules.

        // In this phase, Netscape defines a matchable quote as ', ", or `
        // preceded by a space or an =.

        TAGSCAN:
        case TS_TAGSCAN:
            // pchStart: at '<'
            // pch:      at next char in tag not in quote

            TraceState(TAGSCAN);

            while (ISTAGCH(ch))
                ch = *(++pch);

            // found a tag!
            if (ch == _T('>'))
            {
                ULONG ulChars;
                DWORD otCode;

                // consume >
                ch = *(++pch);

                // Treat <!...> and <?...> tags as comments, except <?XML:namespace > and <?IMPORT>
                if (!_etagLiteral &&
                    (*(pchStart+1) == _T('!') ||
                    (*(pchStart+1) == _T('?')) &&
                        0 != _tcsnicmp(achPIXmlNs,  -1, pchStart+2, ARRAY_SIZE(achPIXmlNs) - 1) &&
                        0 != _tcsnicmp(achPIExtendedTag, -1, pchStart+2, ARRAY_SIZE(achPIExtendedTag) - 1) &&
                        0 != _tcsnicmp(achPIPXml, -1, pchStart+2, ARRAY_SIZE(achPIPXml) - 1)))
                {
                    hr = THR(OutputComment(pchStart, PTR_DIFF(pch, pchStart)));
                    if (hr)
                        goto Cleanup;
                        
                    _nLineStart = _nLine;
                    _fCountStart = _fCount;
                    if (pch > pchStart)
                        _fEndCR = (*(pch-1) == _T('\r'));
                    pchStart = pch;
                    state = TS_TEXT;
                    break;
                }

                // compute offset of start of tag
                if ((unsigned)(pchEnd - pchStart) > _ulCharsUncounted)
                    ulChars = _ulCharsEnd + _ulCharsUncounted - (pchEnd - pchStart);
                else
                    ulChars = _ulCharsEnd;

                SAVE_STACKVAR_STATE();
 
                // Tokenize the tag
                hr = THR(OutputTag(_nLineStart, ulChars, _fCountStart && _fCount, &otCode));
                if (hr)
                    goto Cleanup;
                    
                RESTORE_STACKVAR_STATE();

                if (otCode == OT_REJECT)
                {
                    // ROLLBACK for literal
                    _nLine = _nLineStart;
                    ch = *(pch = pchStart+1);
                    Assert(ch);
                    state = TS_TEXT;
                    goto TEXT;
                }
                Assert( ! otCode );

                TraceState(TAGOUT);

                state = _state;

                // We did output, so advance
                _nLineStart = _nLine;
                _fCountStart = _fCount;
                if (pch > pchStart)
                    _fEndCR = (*(pch-1) == _T('\r'));
                pchStart = pch;

                // after script tags we must suspend
                if (state == TS_SUSPEND)
                {
                    state = TS_TEXT;
                    hr = E_PENDING;
                    goto Cleanup;
                }

                else if (state == TS_NEWCODEPAGE)
                {
                    goto NEWCODEPAGE;
                }

                break;
            }

            // count line
            if (ch == _T('\r'))
            {
                _nLine += _fCount;
                ch = *(++pch);

                if (ch == _T('\n'))
                    ch = *(++pch);
                
                goto TAGSCAN;
            }

            if (ch == _T('\n'))
            {
                Assert(pch > pchStart); // Can back up by one
                
                if (*(pch-1) != _T('\r'))
                    _nLine += _fCount;
                    
                ch = *(++pch);
                goto TAGSCAN;
            }

            if (!ch)
                break;

            Assert(ISQUOTE(ch));

            // Netscape's rule: quote counts only if preceded by space or =
            ch = *(pch-1);

            if (ISNONSP(ch) && ch != _T('='))
            {
                ch = *(++pch);
                goto TAGSCAN;
            }

            chQuote = *pch;
            ch = *(++pch);
            state = TS_TAGSCANQ;
            goto TAGSCANQ;

        TAGSCANQ:
        case TS_TAGSCANQ:

            TraceState(TAGSCANQ);

            while (ch)
            {

                if (ch == chQuote)
                {
                    state = TS_TAGSCAN;
                    ch = *(++pch);
                    goto TAGSCAN;
                }
                ch = *(++pch);
            }

            // end of available buffer
            break;

        TAGASP:
        case TS_TAGASP:

            // pchStart: at '<%'
            // pch:      at next char inside <% ...

            TraceState(TAGASP);

            while (ISMRKCH(ch))
                ch = *(++pch);

            // count line
            if (ch == _T('\r') || (ch == _T('\n')))
            {
                if (ch == _T('\r') || !(pch == pchStart ? _fEndCR : *(pch-1) == _T('\r')))
                    _nLine += _fCount;
                ch = *(++pch);
                goto TAGASP;
            }

            if (!ch)
                break;

            Assert(ch == _T('>'));

            ch = *(++pch);  // past '>'

            if (pch[-2] != _T('%'))
                goto TAGASP;

            if (!_etagLiteral)
            {
                hr = THR(OutputComment(pchStart, PTR_DIFF(pch, pchStart)));
                if (hr)
                    goto Cleanup;

                _nLineStart = _nLine;
                _fCountStart = _fCount;
                if (pch > pchStart)
                    _fEndCR = (*(pch-1) == _T('\r'));
                pchStart = pch;
            }

            // literal comment output as text
            state = TS_TEXT;
            break;

        TAGBANG:
        case TS_TAGBANG:

            TraceState(TAGBANG);

            // pchStart: at '<'
            // pch:      at '<!'+1

            // skip to nondash
            while (ISDASHC(ch))
                ch = *(++pch);

            // end of available buffer
            if (!ch)
                break;

            // detect conditional idioms
            if (ch == _T('[') && !_etagLiteral)
            {
                if (pch - pchStart == 2) // <![
                {
                    ch = *(++pch);
                    pchWord = pch;
                    _fCondComment = FALSE;
                    state = TS_CONDSCAN;
                    goto CONDSCAN; // withstands \0
                }

                if (pch - pchStart == 4) // <!--[
                {
                    ch = *(++pch);
                    pchWord = pch;
                    _fCondComment = TRUE;
                    state = TS_CONDSCAN;
                    goto CONDSCAN; // withstands \0
                }
            }

            // two or more dashes: comment
            if ( PTR_DIFF(pch, pchStart) >= 4 )
            {
                // NS: handle short comments
                pchWord = pch-2; // at '--'
                state = TS_TAGCOMDASH;
                break;
            }

            // literal: output noncomment as text
            if (_etagLiteral)
            {
                _nLine = _nLineStart;
                ch = *(pch = pchStart+1);
                state = TS_TEXT;
                goto TEXT; // break;
            }

            // open tag: tagname begins with '!'
            _nLine = _nLineStart;
            ch = *(pch = pchStart+1);
            state = TS_TAGSCAN;
            goto TAGSCAN;

        TAGCOMMENT:
        case TS_TAGCOMMENT:

            TraceState(TAGCOMMENT);

            // pchStart: at '<'
            // pch:      at first possible dash

            // skip to first dash
            while (ISNDASH(ch))
                ch = *(++pch);

            // end of available buffer
            if (!ch)
                break;

            // count line
            if (ch == _T('\r') || (ch == _T('\n')))
            {
                if (ch == _T('\r') || !(pch == pchStart ? _fEndCR : *(pch-1) == _T('\r')))
                    _nLine += _fCount;
                ch = *(++pch);
                goto TAGCOMMENT;
            }

            // possible end of comment
            pchWord = pch;      // at '-'
            state = TS_TAGCOMDASH;

            // fallthrough

        case TS_TAGCOMDASH:

            TraceState(TAGCOMDASH);

            // pchStart: at '<'
            // pchWord:  at first '-'
            // pch:      at first possible nondash

            // skip to first nondash
            while (ISDASHC(ch))
            {
                ch = *(++pch);
            }

            // end of available buffer
            if (!ch)
                break;

            // two dashes and a > end comment
            if (ch == _T('>') && (PTR_DIFF(pch, pchWord) >= 2))
            {
                ch = *(++pch); // past '>'

                if (!_etagLiteral)
                {
                    long cch = PTR_DIFF(pch, pchStart);

                    hr = THR(OutputComment(pchStart, cch));
                    if (hr)
                        goto Cleanup;

                    _nLineStart = _nLine;
                     _fCountStart = _fCount;
                    if (pch > pchStart)
                        _fEndCR = (*(pch-1) == _T('\r'));
                    pchStart = pch;
                    state = TS_TEXT;
                }
                else
                {
                    // literal comment output as text
                    state = TS_TEXT;
                }
                break;
            }

            // comment did not end
            state = TS_TAGCOMMENT;
            goto TAGCOMMENT; // break;

        case TS_ENTOPEN:

            // pchStart: at '&'
            // pch:      at '&'+1

            // looks like a number or hex entity
            if (ch == _T('#'))
            {
                ch = *(++pch);
                // looks like a hex entity
                if ((ch == _T('X')) || (ch == _T('x')))
                {
                    ch = *(++pch);
                    pchWord = pch; // at '&#X'+1
                    state = TS_ENTHEX;
                    break;
                }
                else
                {
                    // looks like a number entity
                    pchWord = pch; // at '&#'+1
                    state = TS_ENTNUMBER;
                    break;
                }
            }

            // looks like a named entity
            pchWord = pch; // at '&'+1
            _hash = 0;
            _chEnt = 0;
            state = TS_ENTMATCH;

            // fallthrough

        ENTMATCH:
        case TS_ENTMATCH:

            TraceState(ENTMATCH);

            // pchStart: at '&'
            // pchWord:  beyond last matched entity
            // pch       at first possible last-char-of-entity

            // NOTE: In IE5, unlike IE4, we no longer allow entities like &ltfoo to match.
            // The entity must end on a non-alphanumeric char, like &lt,foo
            // (This follows Nav 4.04+ etc.) - dbau

            // ANOTHER NOTE: in IE5, we decided to act like IE4 after all, so that
            // entities like &ltfoo _do_ match like &lt;foo.
            
            while (ISENTYC(ch) && (PTR_DIFF(pch + 1, pchStart + 1) <= MAXENTYLEN))
            {
                // grab extra char into hash
                _hash = HashString(pch, 1, _hash);

                // advance pch beyond extra char
                ch = *(++pch);

                // lookup HTML 1.0 entity (';' optional)
                chEnt = EntityChFromName(pchStart + 1, PTR_DIFF(pch, pchStart + 1), _hash);
                if (chEnt && IS_HTML1_ENTITY_CHAR(chEnt))
                {
                    _chEnt = chEnt;
                    pchWord = pch;
                }
            }

            // end of available buffer (and not EOF)
            if (!ch && !_fEOF)
                break;

            // lookup HTML 3.x entity (';' required)
            if (ch == _T(';'))
            {
                chEnt = EntityChFromName(pchStart + 1, PTR_DIFF(pch, pchStart + 1), _hash);
                if (chEnt)
                {
                    _chEnt = chEnt;
                    pchWord = pch;
                }
            }

            // not entity char give up and roll back to start
            if (!_chEnt)
            {
                _nLine = _nLineStart;
                ch = *(pch = pchStart+1);
                state = TS_TEXT;
                goto TEXT; // break;
            }

            // complete entity; rollback to word
            ch = *(pch = pchWord);
            
            // output the thing
            hr = THR(OutputEntity(pchStart, PTR_DIFF(pch, pchStart), _chEnt));
            if (hr)
                goto Error;

            if (pch > pchStart)
                _fEndCR = (*(pch-1) == _T('\r'));
            pchStart = pch;
            state = TS_ENTCLOSE;
            break;

        case TS_ENTCLOSE:

            TraceState(ENTCLOSE);

            // pchStart: at '&'
            // pch:      at possible ';'

            if (ch == _T(';'))
            {
                ch = *(++pch);
            }

            _nLineStart = _nLine;
            _fCountStart = _fCount;
            if (pch > pchStart)
                _fEndCR = (*(pch-1) == _T('\r'));
            pchStart = pch;
            state = TS_TEXT;
            break;

        ENTNUMBER:
        case TS_ENTNUMBER:

            TraceState(ENTNUMBER);

            // pchStart: at '&'
            // pchWord:  at '&#'+1
            // pch:      at first possible nondigit

            // skip to first nondigit
            while (ISDIGIT(ch))
            {
                ch = *(++pch);
            }

            // end of available buffer (and not EOF)
            if (!ch && !_fEOF)
                break;

            // EOF or nondigit ; end of number entity
            chEnt = EntityChFromNumber(pchWord, PTR_DIFF(pch, pchWord));
            if (chEnt)
            {
                hr = THR(OutputEntity(pchStart, PTR_DIFF(pch, pchStart), chEnt));
                if (hr)
                    goto Error;

                Assert(pch > pchStart && *(pch-1) != _T('\r'));
                _fEndCR = FALSE;
                pchStart = pch;
                state = TS_ENTCLOSE;
                break;
            }

            // zero entity: output as text
            state = TS_TEXT;
            break;

        ENTHEX:
        case TS_ENTHEX:

            TraceState(ENTHEX);

            // pchStart: at '&'
            // pchWord:  at "&#X + 1
            // pch:      at first possible nonhex

            // skip to first nonhex
            while (ISHEX(ch))
            {
                ch = *(++pch);
            }

            // end of available buffer (and not EOF)
            if (!ch && !_fEOF)
                break;

            // EOF or nonhex ; end of hex entity
            if (ch == _T(';'))
            {
                chEnt = EntityChFromHex(pchWord, PTR_DIFF(pch, pchWord));
                if (chEnt)
                {
                    hr = THR(OutputEntity(pchStart, PTR_DIFF(pch, pchStart), chEnt));
                    if (hr)
                        goto Error;

                    Assert(pch > pchStart && *(pch-1) != _T('\r'));
                    _fEndCR = FALSE;
                    pchStart = pch;
                    state = TS_ENTCLOSE;
                    break;
                }
            }

            // zero entity or missing ';': output as text
            state = TS_TEXT;
            break;

    CONDSCAN:
        case TS_CONDSCAN:

            TraceState(CONDSCAN);

            // pchStart: at '<'
            // pchWord:  at '<!['+1     !_fCondComment
            // pchWord:  at '<!--]'+1   _fCondComment
            // pch:      at first possible '>'

            while (ISMRKCH(ch))
                ch = *(++pch);

            // count line
            if (ch == _T('\r') || (ch == _T('\n')))
            {
                if (ch == _T('\r') || !(pch == pchStart ? _fEndCR : *(pch-1) == _T('\r')))
                    _nLine += _fCount;
                ch = *(++pch);
                goto CONDSCAN;
            }

            if (!ch)
                break;

            Assert(ch == _T('>'));

            ch = *(++pch);  // past '>'

            {
                CONDVAL result;
                BOOL fComment;
                fComment = (pch[-2] == _T('-'));

                if (!_pVersions ||
                    fComment ?
                    pch < pchWord + 4 || pch[-2] != _T('-') || pch[-3] != _T('-') || pch[-4] != _T(']'):
                    pch < pchWord + 2 || pch[-2] != _T(']'))
                {
                    // was not well-formed ']>' or ']-->': treat as ordinary tag or comment
                    _nLine = _nLineStart;
                    if (_fCondComment)
                    {
                        ch = *(pch = pchStart+4); // at [ past <!--
                        state = TS_TAGCOMMENT;
                        goto TAGCOMMENT;
                    }
                    else
                    {
                        ch = *(pch = pchStart+1);
                        state = TS_TAGSCAN;
                        goto TAGSCAN;
                    }
                }

                hr = THR(_pVersions->EvaluateConditional(&result, pchWord, pch - (fComment ? 4 : 2) - pchWord));
                if (hr)
                    goto Cleanup;

                if (result == COND_SYNTAX ||
                    _fCondComment && result != COND_IF_TRUE && result != COND_IF_FALSE ||
                    fComment && result != COND_ENDIF ||
                    !_cCondNestTrue && result == COND_ENDIF)
                {
                    if (_fCondComment && result == COND_NULL)
                    {
                        // ordinary comment if unrecognized construct
                        _nLine = _nLineWord;
                        ch = *(pch = pchWord);
                        state = TS_TAGCOMMENT;
                        goto TAGCOMMENT;
                    }
                    else
                    {
                        // textify illegal constructs
                        _nLine = _nLineStart;
                        ch = *(pch = pchStart+1);
                        state = TS_TEXT;
                        goto TEXT;
                    }
                }

                if (result == COND_ENDIF)
                {
                    _cCondNestTrue--;
                }

                if (result == COND_IF_TRUE)
                {
                    _cCondNestTrue++;
                }

                if (result == COND_IF_FALSE)
                {
                    state = TS_CONDITIONAL;
                    break;
                }
    
                // Only suppress contents if condition evaluated to FALSE
                // if condition was unrecognized, TRUE cond, or matched ENDIF,
                // treat it as a comment

                hr = THR(OutputConditional(pchStart, PTR_DIFF(pch, pchStart), result));
                if (hr)
                    goto Cleanup;
    
                _nLineStart = _nLine;
                _fCountStart = _fCount;
                if (pch > pchStart)
                    _fEndCR = (*(pch-1) == _T('\r'));
                pchStart = pch;
                state = TS_TEXT;

#ifdef CLIENT_SIDE_INCLUDE_FEATURE
                // for include case, make sure preprocessor suspends correctly

                if (result == COND_INCLUDE) 
                {
                    hr = E_PENDING;
                    goto Cleanup;
                }
#endif
            }

            break;


    CONDITIONAL:
        case TS_CONDITIONAL:

            TraceState(CONDITIONAL);

            // pchStart: at start of '<![if ...]>...'
            // pch at first possible '<' for <![endif]>

            // skip to first special char
            while (ISTXTCH(ch))
                ch = *(++pch);

            // count line  (count \r or \n, but not \n immediately following \r)
            if (ch == _T('\r') || (ch == _T('\n')))
            {
                if (ch == _T('\r') || !(pch == pchStart ? _fEndCR : *(pch-1) == _T('\r')))
                    _nLine += _fCount;
                ch = *(++pch);
                goto CONDITIONAL;
            }

            if (!ch)
                break;

            if (ch != _T('<'))
            {
                ch = *(++pch);
                goto CONDITIONAL;
            }

            ch = *(++pch);

            state = TS_ENDCOND;
            if (!ch)
                break;

            // fallthrough

        case TS_ENDCOND:

            TraceState(ENDCOND);

            // pch:     at '<'+1

            if (ch != _T('!'))
            {
                state = TS_CONDITIONAL;
                goto CONDITIONAL;
            }

            ch = *(++pch);

            state = TS_ENDCONDBANG;
            if (!ch)
                break;

            // fallthrough

       case TS_ENDCONDBANG:

            // pch:     at '<!'+1

            if (ch !=_T('['))
            {
                state = TS_CONDITIONAL;
                goto CONDITIONAL;
            }

            ch = *(++pch);
            pchWord = pch;
            _nLineWord = _nLine;

            state = TS_ENDCONDSCAN;
            if (!ch)
                break;

            // fallthrough

   ENDCONDSCAN:

       case TS_ENDCONDSCAN:

            // pchWord: at '<!['+1
            // pch:     at first possible '>'

            while (ISMRKCH(ch))
                ch = *(++pch);

            // count line
            if (ch == _T('\r') || (ch == _T('\n')))
            {
                if (ch == _T('\r') || !(pch == pchStart ? _fEndCR : *(pch-1) == _T('\r')))
                    _nLine += _fCount;
                ch = *(++pch);
                goto ENDCONDSCAN;
            }

            if (!ch)
                break;

            Assert(ch == _T('>'));

            ch = *(++pch);  // past '>'

            Assert(_pVersions);

            if (_fCondComment ?
                 pch < pchWord + 4 || pch[-2] != _T('-') || pch[-3] != _T('-') || pch[-4] != _T(']'):
                 pch < pchWord + 2 || pch[-2] != _T(']'))
            {
                // Not well-formed <![ .... ]> or <![ .... ]-->: rollback
                _nLine = _nLineWord;
                ch = *(pch = pchWord); // at '<!['+1
                state = TS_CONDITIONAL;
                goto CONDITIONAL;
            }

            {

                CONDVAL result;
                hr = THR(_pVersions->EvaluateConditional(&result, pchWord, pch - (_fCondComment ? 4 : 2) - pchWord));
                if (hr)
                    goto Cleanup;

                // gibberish: rollback
                if (result == COND_NULL || result == COND_SYNTAX)
                {
                    _nLine = _nLineWord;
                    ch = *(pch = pchWord); // at '<!['+1
                    state = TS_CONDITIONAL;
                    goto CONDITIONAL;
                }

                // handle nested <![if]> : treat as gibberish inside condstyle; otherwise nest
                if (result == COND_IF_TRUE || result == COND_IF_FALSE)
                {
                    if (_fCondComment)
                    {
                        _nLine = _nLineWord;
                        ch = *(pch = pchWord); // at '<!['+1
                    }
                    else
                    {
                        _cCondNest++;
                    }
                    state = TS_CONDITIONAL;
                    goto CONDITIONAL;
                }

#ifdef CLIENT_SIDE_INCLUDE_FEATURE
                // <![include]> in an off conditional gets ignored
                if (result == COND_INCLUDE) 
                {
                    state = TS_CONDITIONAL;
                    goto CONDITIONAL;
                }
#endif

                Assert(result == COND_ENDIF);
                
                // <![endif]-->

                if (_fCondComment)
                    _fCondComment = FALSE;

                // nested <![endif]>

                if (_cCondNest)
                {
                    Assert(!_fCondComment);
                    _cCondNest--;
                    state = TS_CONDITIONAL;
                    goto CONDITIONAL;
                }

                // if last endif, output the whole conditional area as a single comment
                hr = THR(OutputConditional(pchStart, PTR_DIFF(pch, pchStart), result));
                if (hr)
                    goto Cleanup;

                _nLineStart = _nLine;
                _fCountStart = _fCount;
                if (pch > pchStart)
                    _fEndCR = (*(pch-1) == _T('\r'));
                pchStart = pch;
                state = TS_TEXT;
            }

            break;

    NEWCODEPAGE:
        case TS_NEWCODEPAGE:

            TraceState(NEWCODEPAGE);

            // pchStart: at '>'+1
            // pch:      at '>'+1

            _pch      = pch;
            _pchEnd   = pchEnd;
            _pchStart = pchStart;

            // cannot switch codepage inside script or if we've already switched once
            if (!_cSuspended && !_fRestarted && !_fMetaCharsetOverride)
            {
                BOOL fNeedRestart;
                
                // after switching codepage we must suspend
                if (DoSwitchCodePage(_cpNew, &fNeedRestart, TRUE) && fNeedRestart)
                {
                    state = TS_TEXT;
                    hr = E_PENDING;
                    goto Cleanup;
                }
            }

            state = TS_TEXT;
            pch = _pch;
            pchStart = _pchStart;
            pchEnd = _pchEnd;
            break;

        default:
            AssertSz(0,"Unknown state in tokenizer");
            _nLine = _nLineStart;
            pch = pchStart+1;
            state = TS_TEXT;
        }
    }

    // we have examined every avaliable character
    Assert(!ch && pch == pchEnd);


    if (_fEOF && !_cSuspended && pchStart != pchEnd)
    {
        // EOF in unmatched false conditional: commentize up to EOF
        if (state == TS_CONDITIONAL || state == TS_ENDCONDSCAN)
        {
            hr = THR(OutputComment(pchStart, PTR_DIFF(pch, pchStart)));
            if (hr)
                goto Cleanup;

            _nLineStart = _nLine;
            _fCountStart = _fCount;
            if (pch > pchStart)
                _fEndCR = (*(pch-1) == _T('\r'));
            pchStart = pch;
            state = TS_TEXT;
        }
        // EOF in incomplete comment or conditional: turn to tag
        else if (state == TS_TAGCOMMENT || state == TS_CONDSCAN)
        {
            _nLine = _nLineStart;
            ch = *(pch = pchStart+1);
            state = TS_TAGSCAN;
            goto TAGSCAN; // withstands ch=='\0'
        }
        else if (state == TS_ENTMATCH)
        {
            // withstands ch=='\0', knows how to roll back
            goto ENTMATCH;
        }
        else if (state == TS_ENTNUMBER)
        {
            // withstands ch=='\0', knows how to roll back
            goto ENTNUMBER;
        }
        else if (state == TS_ENTHEX)
        {
            // withstands ch=='\0', knows how to roll back
            goto ENTHEX;
        }
        // EOF in incomplete tag: turn < or & to text
        else
        {
            _nLine = _nLineStart;
            ch = *(pch = pchStart+1);
            state = TS_TEXT; // withstands ch=='\0'
            goto TEXT;
        }
    }

    hr = S_OK;

Cleanup:

    // suspend comes here

    // save state
    _pch        = pch;
    _pchEnd     = pchEnd;
    _pchStart   = pchStart;
    _pchWord    = pchWord;
    _state      = state;
    _chQuote    = chQuote;

    if (hr == E_PENDING)
    {
        Suspend();
    }

    goto Leave;

Error:

    // on error, behave like EOF
    _fEOF = TRUE;
    _pchStart = _pchEnd;

Leave:

    _pHtmTagStm->Signal();

    PerfDbgLog1(tagHtmPre, this, "-CHtmPre::Tokenize (hr=%lX)", hr);
    RRETURN1(hr, E_PENDING);
}

#if DBG != 1
#pragma optimize("", on)
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\download\htmload.cxx ===
//+------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1992 - 1995.
//
//  File:       htmload.cxx
//
//  Contents:   CHtmCtx
//              CHtmInfo
//              CHtmLoad
//
//-------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_HTM_HXX_
#define X_HTM_HXX_
#include "htm.hxx"
#endif

#ifndef X_FORMKRNL_HXX_
#define X_FORMKRNL_HXX_
#include "formkrnl.hxx"
#endif

#ifndef X_PEERXTAG_HXX_
#define X_PEERXTAG_HXX_
#include "peerxtag.hxx"
#endif

#ifndef X_MSHTMLRC_H_
#define X_MSHTMLRC_H_
#include "mshtmlrc.h"
#endif

#ifndef X_PRGSNK_H_
#define X_PRGSNK_H_
#include <prgsnk.h>
#endif

#ifdef WIN16
#define MB_PRECOMPOSED   0
#endif

BOOL IsSpecialUrl(LPCTSTR pchURL);

// Debugging ------------------------------------------------------------------

PerfDbgTag(tagHtmInfo,   "Dwn", "Trace CHtmInfo")
PerfDbgTag(tagHtmLoad,   "Dwn", "Trace CHtmLoad");

MtDefine(CHtmCtx, Dwn, "CHtmCtx")
MtDefine(CHtmInfo, Dwn, "CHtmInfo")
MtDefine(CHtmInfoGetFile, CHtmInfo, "CHtmInfo::GetFile")
MtDefine(CHtmInfoGetPretransformedFile, CHtmInfo, "CHtmInfo::GetPretransformedFile")
MtDefine(CHtmLoad, Dwn, "CHtmLoad")
MtDefine(CHtmLoad_aryDwnCtx_pv, CHtmLoad, "CHtmLoad::_aryDwnCtx::_pv")

// CHtmCtx --------------------------------------------------------------------

void
CHtmCtx::SetLoad(BOOL fLoad, DWNLOADINFO * pdli, BOOL fReload)
{
    HTMLOADINFO * phli = (HTMLOADINFO *)pdli;

    super::SetLoad(fLoad, pdli, fReload);

    // Handle synchronous IStream load case (bug 35102)

    if (    fLoad
        &&  !phli->phpi
        &&  phli->fParseSync)
    {
        CHtmLoad *pHtmLoad = GetHtmInfo()->GetHtmLoad();

        if (pHtmLoad)
        {
            pHtmLoad->FinishSyncLoad();
        }
    }
}

BOOL
CHtmCtx::IsLoading()
{
    return(GetHtmInfo()->IsLoading());
}

BOOL
CHtmCtx::IsOpened()
{
    return(GetHtmInfo()->IsOpened());
}

BOOL
CHtmCtx::WasOpened()
{
    return(GetHtmInfo()->WasOpened());
}

BOOL
CHtmCtx::IsSyncParsing()
{
    return(GetHtmInfo()->IsSyncParsing());
}

CMarkup *
CHtmCtx::GetContextMarkup()
{
    return(GetHtmInfo()->GetContextMarkup());
}

BOOL
CHtmCtx::IsHttp449()
{
    return(GetHtmInfo()->IsHttp449());
}

BOOL
CHtmCtx::IsNoProgressUI()
{
    return(GetHtmInfo()->IsNoProgressUI());
}

BOOL
CHtmCtx::FromMimeFilter()
{
    return(GetHtmInfo()->FromMimeFilter());
}

HRESULT
CHtmCtx::GetBindResult()
{
    return(GetHtmInfo()->GetBindResult());
}

HRESULT
CHtmCtx::GetDwnBindDataResult()
{ 
    return ( GetHtmInfo() ? GetHtmInfo()->GetDwnBindDataResult() : E_FAIL ) ;
}

IBindCtx*
CHtmCtx::GetBindCtx()
{ 
    CHtmInfo * pHtmInfo = GetHtmInfo();
    if(pHtmInfo)
    {
        CHtmLoad * pHtmLoad = pHtmInfo->GetHtmLoad();
        if(pHtmLoad)
        {
            CDwnBindData* pBindData =pHtmLoad->GetDwnBindData();
            if(pBindData)
            {
                return pBindData->GetBindCtx();
            }
        }
    }

    return NULL;
}

HRESULT
CHtmCtx::Write(LPCTSTR pch, BOOL fParseNow)
{
    HRESULT                     hr;
    CHtmInfo *                  pHtmInfo = GetHtmInfo();
    CHtmInfo::CSyncParsingLock  lock(pHtmInfo);

    hr = THR(pHtmInfo->Write(pch, fParseNow));
    
    RRETURN (hr);
}

HRESULT
CHtmCtx::WriteUnicodeSignature()
{
    // This should take care both 2/4 bytes wchar
    WCHAR abUnicodeSignature = NATIVE_UNICODE_SIGNATURE;
    return(GetHtmInfo()->OnSource((BYTE*)&abUnicodeSignature, sizeof(WCHAR)));
}

void
CHtmCtx::Close()
{
    GetHtmInfo()->Close();
}

void
CHtmCtx::Sleep(BOOL fSleep, BOOL fExecute)
{
    GetHtmInfo()->Sleep(fSleep, fExecute);
}

void
CHtmCtx::ResumeAfterImportPI()
{
    GetHtmInfo()->ResumeAfterImportPI();
};

void
CHtmCtx::SetCodePage(CODEPAGE cp)
{
    GetHtmInfo()->SetDocCodePage(cp);
}

CDwnCtx *
CHtmCtx::GetDwnCtx(UINT dt, LPCTSTR pch)
{
    return(GetHtmInfo()->GetDwnCtx(dt, pch));
}

BOOL
CHtmCtx::IsKeepRefresh()
{
    return(GetHtmInfo()->IsKeepRefresh());
}

IStream *
CHtmCtx::GetRefreshStream()
{
    return(GetHtmInfo()->GetRefreshStream());
}

TCHAR *
CHtmCtx::GetFailureUrl()
{
    return(GetHtmInfo()->GetFailureUrl());
}

void
CHtmCtx::DoStop()
{
    GetHtmInfo()->DoStop();
}

TCHAR *
CHtmCtx::GetErrorString()
{
    return(GetHtmInfo()->GetErrorString());
}

void
CHtmCtx::GetRawEcho(BYTE **ppb, ULONG *pcb)
{
    GetHtmInfo()->GetRawEcho(ppb, pcb);
}

void
CHtmCtx::GetSecConInfo(INTERNET_SECURITY_CONNECTION_INFO **ppsci)
{
    GetHtmInfo()->GetSecConInfo(ppsci);
}

void
CHtmCtx::ResumeAfterScan()
{
    GetHtmInfo()->ResumeAfterScan();
}

// CHtmInfo -------------------------------------------------------------------

ULONG
CHtmInfo::Release()
{
    // Skip over the caching logic of CDwnInfo::Release.  CHtmInfo does not
    // get cached.

    return(CBaseFT::Release());
}

CHtmInfo::~CHtmInfo()
{
    // Frees any resources that can be used on both HtmPre and HtmPost (Subaddref and addref) threads

    if (_pstmSrc)
    {
        _pstmSrc->Release();
        _pstmSrc = NULL;
    }

    MemFree(_pbSrc);
}

void
CHtmInfo::Passivate()
{
    // Frees only those resources used only on the HtmPost (addref) thread

    UnlockFile();

    ReleaseInterface(_pUnkLock);

    _cstrFailureUrl.Free();

    ClearInterface(&_pstmFile);
    ClearInterface(&_pstmRefresh);

    MemFree(_pchDecoded);
    _pchDecoded = NULL;

    MemFree(_pchError);
    _pchError = NULL;

    MemFree(_pbRawEcho);
    _pbRawEcho = NULL;
    _cbRawEcho = 0;

    MemFree(_pSecConInfo);
    _pSecConInfo = NULL;

    EnterCriticalSection();

    if (_pExtendedTagTable)
    {
        _pExtendedTagTable->Release();
        _pExtendedTagTable = NULL;
    }
    if( _pExtendedTagTableHost )
    {
        _pExtendedTagTableHost->Release();
        _pExtendedTagTableHost = NULL;
    }

    LeaveCriticalSection();

    super::Passivate();
}

HRESULT
CHtmInfo::Init(DWNLOADINFO * pdli)
{
    HTMLOADINFO * phli = (HTMLOADINFO *)pdli;
    CDwnDoc * pDwnDoc = pdli->pDwnDoc;
    HRESULT hr;

    _fOpened = _fWasOpened = pdli->fClientData;
    _fSyncParsing = phli->fParseSync;
    _cpDoc   = pDwnDoc->GetDocCodePage();
    _pmi     = phli->pmi;
    _fKeepRefresh = phli->fKeepRefresh;

    _fNoProgressUI = phli->fNoProgressUI;

    _dwClass = pdli->fClientData ? PROGSINK_CLASS_HTML | PROGSINK_CLASS_NOSPIN : PROGSINK_CLASS_HTML;

    hr = THR(_cstrFailureUrl.Set(phli->pchFailureUrl));
    if (hr)
        goto Cleanup;

    ReplaceInterface(&_pstmRefresh, phli->pstmRefresh);

    hr = THR(super::Init(pdli));
    if (hr)
        goto Cleanup;

    if (!_cstrUrl && phli->pchBase)
    {
        hr = THR(_cstrUrl.Set(phli->pchBase));
        if (hr)
            goto Cleanup;
    }

    // We need to cache this tag table on the info so that we can
    // have a copy protected by critical section.  We had a race
    // condition where the tokenizer could grab the ETTHost off 
    // the CDoc right before the CDoc passivated and cleared it.
    _pExtendedTagTableHost = phli->pDoc->_pExtendedTagTableHost;
    if( _pExtendedTagTableHost )
        _pExtendedTagTableHost->AddRef();

Cleanup:
    RRETURN(hr);
}

HRESULT
CHtmInfo::NewDwnCtx(CDwnCtx ** ppDwnCtx)
{
    *ppDwnCtx = new CHtmCtx;
    RRETURN(*ppDwnCtx ? S_OK : E_OUTOFMEMORY);
}

HRESULT
CHtmInfo::NewDwnLoad(CDwnLoad ** ppDwnLoad)
{
    *ppDwnLoad = new CHtmLoad;
    RRETURN(*ppDwnLoad ? S_OK : E_OUTOFMEMORY);
}

void
CHtmInfo::SetDocCodePage(CODEPAGE cp)
{
    if (_cpDoc != cp)
    {
        _cpDoc      = cp;
        _cbDecoded  = 0;
        _cchDecoded = 0;

        MemFree(_pchDecoded);
        _pchDecoded = NULL;
    }
}

CDwnCtx *
CHtmInfo::GetDwnCtx(UINT dt, LPCTSTR pch)
{
    CHtmLoad * pHtmLoad = GetHtmLoad();
    return(pHtmLoad ? pHtmLoad->GetDwnCtx(dt, pch) : NULL);
}

void
CHtmInfo::DoStop()
{
    CHtmLoad * pHtmLoad = GetHtmLoad();

    if (TstFlags(DWNLOAD_LOADING))
    {
        UpdFlags(DWNLOAD_MASK, DWNLOAD_STOPPED);
    }

    if (pHtmLoad)
        pHtmLoad->DoStop();
}

void
CHtmInfo::TakeErrorString(TCHAR **ppchError)
{
    Assert(!_pchError);

    delete _pchError; // defensive

    _pchError = *ppchError;

    *ppchError = NULL;
}

void
CHtmInfo::TakeRawEcho(BYTE **ppb, ULONG *pcb)
{
    Assert(!_pbRawEcho);

    delete _pbRawEcho; // defensive

    _pbRawEcho = *ppb;
    _cbRawEcho = *pcb;
    *ppb = NULL;
    *pcb = 0;
}

void
CHtmInfo::GetRawEcho(BYTE **ppb, ULONG *pcb)
{
    *ppb = _pbRawEcho;
    *pcb = _cbRawEcho;
}

void
CHtmInfo::TakeSecConInfo(INTERNET_SECURITY_CONNECTION_INFO **ppsci)
{
    Assert(!_pSecConInfo);

    delete _pSecConInfo; // defensive

    _pSecConInfo = *ppsci;
    *ppsci = NULL;
}

void
CHtmInfo::GetSecConInfo(INTERNET_SECURITY_CONNECTION_INFO **ppsi)
{
    *ppsi = _pSecConInfo;
}

void
CHtmInfo::ResumeAfterScan()
{
    CHtmLoad * pHtmLoad = GetHtmLoad();

    if (pHtmLoad)
        pHtmLoad->ResumeAfterScan();
}

HRESULT
CHtmInfo::OnLoadFile(LPCTSTR pszFile, HANDLE * phLock, BOOL fPretransform)
{
    PerfDbgLog2(tagHtmInfo, this, "+CHtmInfo::OnLoadFile (psz=%ls,hLock=%lX)",
        pszFile, *phLock);

    HRESULT hr = fPretransform 
                     ? THR(_cstrPretransformedFile.Set(pszFile))
                     : THR(_cstrFile.Set(pszFile));

    if (hr == S_OK)
    {
        _hLock = *phLock;
        *phLock = NULL;
    }

    PerfDbgLog1(tagHtmInfo, this, "-CHtmInfo::OnLoadFile (hr=%lX)", hr);
    RRETURN(hr);
}

inline
void
CHtmInfo::UnlockFile()
{
    if (_hLock)
    {
        InternetUnlockRequestFile(_hLock);
        _hLock = NULL;
    }
}

void
CHtmInfo::OnLoadDone(HRESULT hrErr)
{
    if (!_hrBind && hrErr)
        _hrBind = hrErr;

    // on success, we can release failure information
    if (!_hrBind)
    {
        _cstrFailureUrl.Free();
        if (!_fKeepRefresh)
            ClearInterface(&_pstmRefresh);
    }

    if (TstFlags(DWNLOAD_LOADING))
    {
        UpdFlags(DWNLOAD_MASK, _hrBind ? DWNLOAD_ERROR : DWNLOAD_COMPLETE);
    }

    // NOTE:

    // Other DwnCtxs now require an explcit SetProgSink(NULL) to detach the progsink.
    // However, this is not true for HtmCtx's: an HtmCtx disconnects itself from its
    // progsink automatically when it's done loading. We could fix this, but it would
    // add an extra layer of signalling; no reason to (dbau)

    DelProgSinks();
}

void
CHtmInfo::OnBindResult(HRESULT hr)
{
    _hrBind = hr;
}

HRESULT
CHtmInfo::GetFile(LPTSTR * ppch)
{
    RRETURN(_cstrFile ? MemAllocString(Mt(CHtmInfoGetFile), _cstrFile, ppch) : E_FAIL);
}


HRESULT
CHtmInfo::GetPretransformedFile(LPTSTR * ppch)
{
    RRETURN(_cstrPretransformedFile ? MemAllocString(Mt(CHtmInfoGetPretransformedFile), _cstrPretransformedFile, ppch) : E_FAIL);
}

//+---------------------------------------------------------------------------
//
//  Member:     CHtmInfo::EnsureExtendedTagTableHelper
//
//----------------------------------------------------------------------------

HRESULT
CHtmInfo::EnsureExtendedTagTableHelper()
{
    HRESULT     hr = S_OK;

    Assert (EnteredCriticalSection());

    if (!_pExtendedTagTable)
    {
        if (!GetHtmLoad())
        {
            hr = E_FAIL; // TODO (alexz) work this out; the only reason we need HtmLoad is to access _pDoc and _pMarkup
            goto Cleanup;// This also has caused some nasty workarounds on the behavior context (JHarding)
            // Actually, for the moment, this is good.  If the Info passivates while the tokenizer is in the middle of 
            // running, we could try and ensure a tag table on a passivated info.  If that happened, we'd leak it, but
            // as things are right now, we won't be able to ensure a new one, which is good.
        }

#if 0
        // TODO (JHarding): Fix this - BehaviorContext() hits the lookaside hash table from the wrong thread.
        // Verify that we're not ensuring one here if we already have one on the markup's behavior context
        Assert( !GetHtmLoad()->_pMarkup->HasBehaviorContext() || !GetHtmLoad()->_pMarkup->BehaviorContext()->_pExtendedTagTable );
#endif // 0

        _pExtendedTagTable = new CExtendedTagTable(GetHtmLoad()->_pDoc, GetHtmLoad()->_pMarkup, /* fShareBooster = */FALSE);
        if (!_pExtendedTagTable)
            hr = E_OUTOFMEMORY;
    }

Cleanup:
    RRETURN (hr);
}

//+---------------------------------------------------------------------------
//
//  Member:     CHtmInfo::EnsureExtendedTagTable
//
//----------------------------------------------------------------------------

HRESULT
CHtmInfo::EnsureExtendedTagTable()
{
    HRESULT     hr;

    EnterCriticalSection();

    hr = THR(EnsureExtendedTagTableHelper());

    LeaveCriticalSection();

    RRETURN (hr);
}

//+---------------------------------------------------------------------------
//
//  Member:     CHtmInfo::RegisterNamespace
//
//----------------------------------------------------------------------------

HRESULT
CHtmInfo::RegisterNamespace(LPTSTR pchNamespace, LPTSTR pchUrn, DWORD dwDeclStyle)
{
    HRESULT hr;

    EnterCriticalSection();

    hr = THR(EnsureExtendedTagTableHelper());
    if (hr)
        goto Cleanup;

    hr = THR_NOTRACE(_pExtendedTagTable->EnsureNamespace(
        pchNamespace, pchUrn, /* pchFactoryUrl = */ NULL));

Cleanup:
    LeaveCriticalSection();
    
    RRETURN (hr);
}

//+---------------------------------------------------------------------------
//
//  Member:     CHtmInfo::ImportNamespaceImplementation
//
//----------------------------------------------------------------------------

HRESULT
CHtmInfo::ImportNamespaceImplementation(
    LPTSTR              pchNamespace,
    LPTSTR              pchUrn,
    LPTSTR              pchFactoryUrl,
    BOOL                fSynchronize,
    BOOL                fEnsureNamespace,
    LPTSTR              pchTagName,
    LPTSTR              pchBaseTagName,
    CExtendedTagDesc ** ppDesc)
{
    HRESULT                     hr = S_OK;
    CHtmLoad *                  pHtmLoad = GetHtmLoad();
    CExtendedTagNamespace *     pNamespace;
    CExtendedTagDesc *          pDesc;
    BOOL                        fSyncParsing = IsSyncParsing();


    EnterCriticalSection();

    Assert (pHtmLoad);

    if (!ppDesc)
        ppDesc = &pDesc;

    *ppDesc = NULL;

    hr = THR(EnsureExtendedTagTableHelper());
    if (hr)
        goto Cleanup;

    fEnsureNamespace |= fSyncParsing;

    if (fEnsureNamespace)
    {
        hr = THR(_pExtendedTagTable->EnsureNamespace(pchNamespace, pchUrn, &pNamespace));
        if (hr)
            goto Cleanup;
    }
    else
    {
        pNamespace = _pExtendedTagTable->FindNamespace(pchNamespace, pchUrn);
    }

    if (pNamespace)
    {
        if (pchFactoryUrl)
        {
            IGNORE_HR(pNamespace->SetFactory(
                pHtmLoad->_pContextMarkup ?
                    pHtmLoad->_pContextMarkup :
                    pHtmLoad->_pMarkup,
                pchFactoryUrl));
        }

        if (pchTagName && pchTagName[0])
        {
            // (this needs to be done even if pchFactoryUrl is NULL)
            hr = THR(pNamespace->AddTagDesc(pchTagName, /* fOverride = */TRUE, pchBaseTagName, 0, ppDesc));
            if (hr)
                goto Cleanup;
        }

        if (pchFactoryUrl && fSynchronize)
        {
            IGNORE_HR(_pExtendedTagTable->Sync1(/* fSynchronous = */fSyncParsing));
            goto Cleanup; // done
        }
    }

    if (fSynchronize)
    {
        hr = THR(ResumeAfterImportPI());
        if (hr)
            goto Cleanup;
    }

Cleanup:

    LeaveCriticalSection();
    
    RRETURN (hr);
}

#ifdef GETDHELPER
//+---------------------------------------------------------------------------
//
//  Member:     CHtmInfo::GetExtendedTagDesc
//
//----------------------------------------------------------------------------
CExtendedTagDesc *
CHtmInfo::GetExtendedTagDesc(LPTSTR pchNamespace, LPTSTR pchTagName, BOOL fEnsureTagDesc, BOOL * pfQuery /* = NULL */)
{
    HRESULT             hr;
    CHtmLoad *          pHtmLoad = GetHtmLoad();
    CMarkup *           pContextMarkup = NULL;
    CExtendedTagTable * pExtendedTagTableHost = NULL;
    CExtendedTagDesc *  pDesc = NULL;

    EnterCriticalSection();

    hr = THR(EnsureExtendedTagTable());
    if (hr)
        goto Cleanup;

    Assert (_pExtendedTagTable);

    if (pHtmLoad)
    {
        pContextMarkup = pHtmLoad->_pContextMarkup;
        pExtendedTagTableHost = pHtmLoad->_pDoc->_pExtendedTagTableHost;
    }

    pDesc = CExtendedTagTable::GetExtendedTagDesc( _pExtendedTagTable, 
                                                   pContextMarkup, 
                                                   pExtendedTagTableHost,
                                                   pchNamespace, 
                                                   pchTagName,
                                                   fEnsureTagDesc,
                                                   /* fEnsureNamespace = */IsSyncParsing(),
                                                   pfQuery );

Cleanup:
    LeaveCriticalSection();

    return pDesc;
}
#else
//+---------------------------------------------------------------------------
//
//  Member:     CHtmInfo::GetExtendedTagDesc
//
//----------------------------------------------------------------------------

CExtendedTagDesc *
CHtmInfo::GetExtendedTagDesc(LPTSTR pchNamespace, LPTSTR pchTagName, BOOL fEnsureTagDesc, BOOL *pfQueryHost)
{
    HRESULT             hr;
    CExtendedTagDesc *  pDesc;
    CHtmLoad *          pHtmLoad = GetHtmLoad();
    CMarkup *           pContextMarkup;

    if( pfQueryHost )
        *pfQueryHost = FALSE;

    EnterCriticalSection();

    pDesc = NULL;

    hr = THR(EnsureExtendedTagTable());
    if (hr)
        goto Cleanup;

    Assert (_pExtendedTagTable);

    // check our own table first, but don't ensure the item there just yet

    // ( normally, this is where the tag is getting resolved )
    pDesc = _pExtendedTagTable->FindTagDesc(pchNamespace, pchTagName);
    if (pDesc)
        goto Cleanup; // done (this the most typical codepath - when the tag is properly declared)

    if (pHtmLoad)
    {
        // check in context markup

        pContextMarkup = pHtmLoad->_pContextMarkup;
        if (pContextMarkup)
        {
            pDesc = pContextMarkup->GetExtendedTagDesc(pchNamespace, pchTagName, /*fEnsure =*/FALSE);
            if (pDesc)
                goto Cleanup; // done
        }

        // check in the host
        // NOTE: check in the host should be after check in the target markup, just like it is after check in the current markup.

        if (_pExtendedTagTableHost)
        {
            pDesc = _pExtendedTagTableHost->FindTagDesc(pchNamespace, pchTagName, pfQueryHost);
            if (pDesc)
                goto Cleanup; // done
        }
    }

    // now ensure it in our table (if we can)

    if (fEnsureTagDesc && (!pfQueryHost || FALSE == *pfQueryHost))
    {
        pDesc = _pExtendedTagTable->EnsureTagDesc(
            pchNamespace, pchTagName, /* fEnsureNamespace = */IsSyncParsing());
        if (pDesc)
            goto Cleanup; // done
    }

Cleanup:
    LeaveCriticalSection();
    
    return pDesc;
}
#endif // GETDHELPER

//+---------------------------------------------------------------------------
//
//  Member:     CHtmInfo::GetExtendedTagTable
//
//----------------------------------------------------------------------------

CExtendedTagTable *
CHtmInfo::GetExtendedTagTable()
{
    CExtendedTagTable * pExtendedTagTable;

    EnterCriticalSection();

    pExtendedTagTable = _pExtendedTagTable;

    LeaveCriticalSection();
    
    return pExtendedTagTable;
}

//+---------------------------------------------------------------------------
//
//  Member:     CHtmInfo::TransferExtendedTagTable
//
//----------------------------------------------------------------------------

HRESULT
CHtmInfo::TransferExtendedTagTable(CMarkup * pMarkup)
{
    HRESULT                     hr = S_OK;
    CMarkupBehaviorContext *    pContext;

    Assert (pMarkup);
    Assert (pMarkup->Doc()->_dwTID == GetCurrentThreadId());

    EnterCriticalSection();

    if (!_pExtendedTagTable)
        goto Cleanup;

    hr = THR(pMarkup->EnsureBehaviorContext(&pContext));
    if (hr)
        goto Cleanup;

    _pExtendedTagTable->ClearBooster();
    _pExtendedTagTable->_fShareBooster = TRUE;

    pContext->_pExtendedTagTable = _pExtendedTagTable;
    _pExtendedTagTable = NULL;

Cleanup:
    LeaveCriticalSection();
    
    RRETURN (hr);
}

//+---------------------------------------------------------------------------
//
//  Member:     CHtmInfo::SaveXmlNamespaceStdPIs
//
//----------------------------------------------------------------------------

HRESULT
CHtmInfo::SaveXmlNamespaceStdPIs(CStreamWriteBuff * pStreamWriteBuff)
{
    HRESULT             hr = S_OK;

    EnterCriticalSection();

    if (_pExtendedTagTable)
    {
        hr = THR(_pExtendedTagTable->SaveXmlNamespaceStdPIs(pStreamWriteBuff));
    }

    LeaveCriticalSection();
    
    RRETURN (hr);
}

// CHtmLoad ----------------------------------------------------------------

HRESULT
CHtmLoad::Init(DWNLOADINFO * pdli, CDwnInfo * pDwnInfo)
{
    PerfDbgLog1(tagHtmLoad, this, "+CHtmLoad::Init %ls",
        pdli->pchUrl ? pdli->pchUrl : g_Zero.ach);

    HTMLOADINFO *   phli    = (HTMLOADINFO *)pdli;
    CDoc *          pDoc    = phli->pDoc;
    CMarkup *       pMarkup = phli->pMarkup;
    CDwnDoc *       pDwnDoc = pdli->pDwnDoc;
    CHtmTagStm *    pHtmTagStm = NULL;
    BOOL            fSync;
    CWindow *       pWindow = NULL;
    HRESULT         hr;

    // Protect against 'this' or pDoc being destroyed while inside this
    // function.

    AddRef();
    CDoc::CLock Lock(pDoc);

    // Memorize binding information for sub-downloads

    _pDoc = pDoc;
    _pDoc->SubAddRef();
    _pMarkup = pMarkup;
    _pMarkup->SubAddRef();
    _pContextMarkup = phli->pContextMarkup;
    if (_pContextMarkup)
    {
        _pContextMarkup->SubAddRef();
    }

    _fPasting = phli->phpi != NULL;

    fSync = _fPasting || phli->fParseSync;

    hr = THR(_cstrUrlDef.Set(phli->pchBase));
    if (hr)
        goto Cleanup;

    _ftHistory = phli->ftHistory;

    // Prepare document root for pasting

    if (_fPasting)
    {
        hr = THR( pDoc->_cstrPasteUrl.Set( phli->phpi->cstrSourceUrl ) );
        if (hr)
            goto Cleanup;
    }

    // Create the postparser and the input stream to the postparser

    _pHtmPost = new CHtmPost;

    if (_pHtmPost == NULL)
    {
        hr = E_OUTOFMEMORY;
        goto Cleanup;
    }

    pHtmTagStm = new CHtmTagStm;

    if (pHtmTagStm == NULL)
    {
        hr = E_OUTOFMEMORY;
        goto Cleanup;
    }

    hr = THR(_pHtmPost->Init(this, pHtmTagStm, _pDoc, _pMarkup, phli->phpi, fSync || pdli->fClientData));
    if (hr)
        goto Cleanup;

    // Call our superclass to initialize and start binding.

    hr = THR(super::Init(pdli, pDwnInfo,
            pdli->fClientData ? IDS_BINDSTATUS_GENERATINGDATA_TEXT : IDS_BINDSTATUS_DOWNLOADINGDATA_TEXT,
            DWNF_ISDOCBIND | DWNF_GETCONTENTTYPE | DWNF_GETREFRESH | DWNF_GETMODTIME |
            DWNF_GETFILELOCK | DWNF_GETFLAGS | DWNF_GETSTATUSCODE | DWNF_HANDLEECHO | DWNF_GETSECCONINFO |
            (_pMarkup->_fPicsProcessPending ? DWNF_GETPICS : 0) |
            (phli->fDownloadHtc ? DWNF_HTCDOWNLOAD : 0) |
            (((_pMarkup->IsPrimaryMarkup() || _pMarkup->IsPendingPrimaryMarkup()) && 
               !(_pDoc->_fViewLinkedInWebOC || _pDoc->_fScriptletDoc) ? DWNF_ISROOTMARKUP : 0)) ));

    if (hr)
        goto Cleanup;

    // Create and initialize the preparser

    _pHtmPre = new CHtmPre(phli->phpi ? phli->phpi->cp : pDwnDoc->GetDocCodePage());

    if (_pHtmPre == NULL)
    {
        hr = E_OUTOFMEMORY;
        goto Cleanup;
    }

    hr = THR(_pHtmPre->Init(this, pDwnDoc, pdli->pInetSess, phli->pstmLeader,
                _pDwnBindData, pHtmTagStm, phli->phpi, _cstrUrlDef, phli->pVersions,
                _pMarkup->IsXML(), phli->pfnTokenizerFilterOutputToken));
    if (hr)
        goto Cleanup;

    if (phli->pmi == g_pmiTextPlain)
    {
        hr = THR(_pHtmPre->GoIntoPlaintextMode());
        if (hr)
            goto Cleanup;
    }

    // If we are loading synchronously, the caller expects the entire tree
    // to be built before this function returns, so we enter a loop calling
    // the preparser and postparser until they are done.

    if (fSync)
    {
        HRESULT hr2;
        CHtmInfo::CSyncParsingLock Lock( GetHtmInfo() );

        Assert(phli->pstm);

        if (pMarkup->_fWindowPending)
        {                            
            hr = THR(pMarkup->GetWindowPending()->SwitchMarkup(pMarkup));
            if (hr)
                goto Cleanup;

            // Switch markup can push a message loop so protect here
            if (!_pHtmPost)
                goto Cleanup;
        }

        // don't wait for the message loop; execute syncrhonously as if
        // we're inside an inline script
        hr = THR(pMarkup->EnterScriptExecution(&pWindow));
        if (hr)
            goto Cleanup;

        while (!_pHtmPost->IsDone())
        {
            hr = THR(_pHtmPre->Exec()); // runs up to first </SCRIPT>
            if (hr)
                goto CleanupSync;

            hr = THR(_pHtmPost->Exec(INFINITE));
            if (hr)
                goto CleanupSync;

            // Exec can push a message loop, during which CHtmLoad::Close can be called,
            // so protect against _pHtmPost going NULL

            if (!_pHtmPost)
                goto CleanupSync;
        }

    CleanupSync:
        hr2 = THR(pMarkup->LeaveScriptExecution(pWindow));
        if (!hr)
            hr = hr2;

        goto Cleanup;
    }

    // If we are keeping the document open, then just return without launching
    // the preparser.  All interactions with it will come via script writes.
    // In this case, the post is driven manually via PostManRunNested.

    if (pdli->fClientData)
    {
        _pHtmPre->Suspend();
        goto Cleanup;
    }

    // We are going to be running the postparser asynchronously as a task
    // on this thread.  Start the task now.  It will not actually run until
    // it is unblocked.

    PostManEnqueue(_pHtmPost);

    // We are going to be running the preparser asynchronously as a task
    // on the download thread.  Start the task now.  It will not actually
    // run until it is unblocked.

    hr = THR(StartDwnTask(_pHtmPre));
    if (hr)
        goto Cleanup;

Cleanup:

    if (pHtmTagStm)
        pHtmTagStm->Release();

    Release();

    PerfDbgLog1(tagHtmLoad, this, "-CHtmLoad::Init (hr=%lX)", hr);
    RRETURN(hr);
}

HRESULT
CHtmLoad::OnBindRedirect(LPCTSTR pchRedirect, LPCTSTR pchMethod)
{
    PerfDbgLog1(tagHtmLoad, this, "+CHtmLoad::OnBindRedirect %ls", pchRedirect);

    CHtmPre *pHtmPre = NULL;
    HRESULT hr;

    hr = THR(_cstrRedirect.Set(pchRedirect));
    if (hr)
        goto Cleanup;

    hr = THR(_cstrMethod.Set(pchMethod));
    if (hr)
        goto Cleanup;

    pHtmPre = GetHtmPreAsync();

    if (pHtmPre)
    {
        hr = THR(pHtmPre->OnRedirect(pchRedirect));

        pHtmPre->SubRelease();
    }

Cleanup:
    PerfDbgLog1(tagHtmLoad, this, "-CHtmLoad::OnBindRecirect (hr=%lX)", hr);
    RRETURN(hr);
}

HRESULT
CHtmLoad::OnBindHeaders()
{
    PerfDbgLog(tagHtmLoad, this, "+CHtmLoad::OnBindHeaders");

    LPCTSTR     pch;
    HANDLE      hLock        = NULL;
    CHtmPre *   pHtmPre      = GetHtmPreAsync();
    HRESULT     hr           = S_OK;
    FILETIME    ftLastMod;
    BOOL        fPretransform;
    
    _dwPrivacyFlags = _pDwnBindData->GetPrivacyFlags();  
    // CDwnBindData will give up ownership of the memory so CHtmLoad
    // will now own it and pass it on to the CPrivacyInfo lookaside
    // Incase the load goes away before the post starts, we have to 
    // delete this memory
    _pchP3PHeader = _pDwnBindData->GetP3PHeader();
    
    pch = _pDwnBindData->GetFileLock(&hLock, &fPretransform);

    if (pch)
    {
        hr = THR(GetHtmInfo()->OnLoadFile(pch, &hLock, fPretransform));
        if (hr)
            goto Cleanup;
    }

    pch = _pDwnBindData->GetContentType();

    if (pch && pHtmPre)
    {
        hr = THR(pHtmPre->SetContentTypeFromHeader(pch));
        if (hr)
            goto Cleanup;
    }

    pch = _pDwnBindData->GetRefresh();

    if (pch)
    {
        hr = THR(_cstrRefresh.Set(pch));
        if (hr)
            goto Cleanup;
    }

    pch = _pDwnBindData->GetPics();

    if (pch)
    {
        hr = THR(_cstrPics.Set(pch));
        if (hr)
            goto Cleanup;
    }

    ftLastMod = _pDwnBindData->GetLastMod();

    // Enable history if:
    //  (1) loading from cache or file, and
    //  (2) mod-dates match

    if (    (   (_pDwnBindData->GetScheme() == URL_SCHEME_FILE)
            ||  (_pDwnBindData->GetReqFlags() & INTERNET_REQFLAG_FROM_CACHE))
        &&  (   ftLastMod.dwLowDateTime == _ftHistory.dwLowDateTime
            &&  ftLastMod.dwHighDateTime == _ftHistory.dwHighDateTime))
    {
        _fLoadHistory = TRUE;
    }

    // Enable 449 echo if
    // (1) We got a 449 response
    // (2) We have echo-headers to use

    if (_pDwnBindData->GetStatusCode() == 449)
    {
        Assert(!_pbRawEcho);

        _pDwnBindData->GiveRawEcho(&_pbRawEcho, &_cbRawEcho);
    }

    _pDwnBindData->GiveSecConInfo(&_pSecConInfo);

    _pDwnInfo->SetLastMod(ftLastMod);
    _pDwnInfo->SetSecFlags(_pDwnBindData->GetSecFlags());

    GetHtmInfo()->SetMimeFilter(_pDwnBindData->FromMimeFilter());

Cleanup:
    if (hLock)
        InternetUnlockRequestFile(hLock);
    if (pHtmPre)
        pHtmPre->SubRelease();
    PerfDbgLog1(tagHtmLoad, this, "-CHtmLoad::OnBindHeaders (hr=%lX)", hr);
    RRETURN(hr);
}

HRESULT
CHtmLoad::OnBindMime(const MIMEINFO * pmi)
{
    PerfDbgLog1(tagHtmLoad, this, "+CHtmLoad::OnBindMime %ls",
        pmi ? pmi->pch : g_Zero.ach);

    CHtmPre *   pHtmPre = GetHtmPreAsync();
    HRESULT     hr      = S_OK;

    if (pmi && pHtmPre && !_pDwnInfo->GetMimeInfo())
    {
        if (pmi->pfnImg)
        {
            _pDwnInfo->SetMimeInfo(pmi);
            _pmi = pmi;

            // The caller didn't specify a mime type and it looks like
            // we've got an image.

            _fDwnBindTerm = TRUE;
            _pDwnBindData->Disconnect();

            _fImageFile = TRUE;

            hr = THR(pHtmPre->InsertImage(GetUrl(), _pDwnBindData));
            if (hr)
            {
                _pDwnBindData->Terminate(E_ABORT);
                goto Cleanup;
            }

            // Returing S_FALSE tells the callback dispatcher to forget
            // about calling us anymore.  We don't care what happens to
            // the binding in progress ... it belongs to the image loader
            // now.

            hr = S_FALSE;
        }
        else if (pmi == g_pmiTextPlain || pmi == g_pmiTextHtml || pmi == g_pmiTextComponent)
        {
            _pDwnInfo->SetMimeInfo(pmi);
            _pmi = pmi;

            if (pmi == g_pmiTextPlain)
            {
                hr = THR(pHtmPre->GoIntoPlaintextMode());
                if (hr)
                    goto Cleanup;
            }
        }
    }

Cleanup:
    if (pHtmPre)
        pHtmPre->SubRelease();
    PerfDbgLog1(tagHtmLoad, this, "-CHtmLoad::OnBindMime (hr=%lX)", hr);
    RRETURN1(hr, S_FALSE);
}

HRESULT
CHtmLoad::OnBindData()
{
    PerfDbgLog(tagHtmLoad, this, "+CHtmLoad::OnBindData");

    HRESULT hr = S_OK;
    CHtmPre * pHtmPre;

    if (!_pmi)
    {
        BYTE  ab[200];
        ULONG cb;

        hr = THR(_pDwnBindData->Peek(ab, ARRAY_SIZE(ab), &cb, GetHtmInfo()->IsSyncParsing()));
        if (hr)
            goto Cleanup;

        if (cb < ARRAY_SIZE(ab) && _pDwnBindData->IsPending())
            goto Cleanup;

#if !defined(WINCE) && !defined(WIN16)
        _pmi = GetMimeInfoFromData(ab, cb, _pDwnBindData->GetContentType());

        if (    _pmi == NULL
            &&  (_pDoc->_fScriptletDoc || _pDoc->_fInObjectTag || _pDoc->_fInHTMLDlg)
            &&  (_pMarkup->IsPrimaryMarkup() || _pMarkup->IsPendingPrimaryMarkup()))
        {
            hr = E_ABORT;
            if (GetHtmInfo())
                GetHtmInfo()->DoStop();
            goto Cleanup;
        }

        if (_pmi == NULL || _pmi != g_pmiTextPlain && !_pmi->pfnImg) // non-image/plaintext -> assume HTML
#endif
        {
            _pmi = g_pmiTextHtml;
        }

        _pDwnBindData->SetMimeInfo(_pmi);

        hr = THR(OnBindMime(_pmi));
        if (hr)
            goto Cleanup;
    }

    pHtmPre = GetHtmPreAsync();

    if (pHtmPre)
    {
        pHtmPre->SetBlocked(FALSE);
        pHtmPre->SubRelease();
    }

Cleanup:
    PerfDbgLog(tagHtmLoad, this, "-CHtmLoad::OnBindData (hr=0)");
    RRETURN1(hr, S_FALSE);
}

void
CHtmLoad::OnBindDone(HRESULT hrErr)
{
    PerfDbgLog1(tagHtmLoad, this, "+CHtmLoad::OnBindDone (hrErr=%lX)", hrErr);

    CHtmPre * pHtmPre = GetHtmPreAsync();

    if (pHtmPre)
    {
        pHtmPre->SetBlocked(FALSE);
        pHtmPre->SubRelease();
    }

    if( hrErr == INET_E_TERMINATED_BIND )
    {
        GetHtmInfo()->UnlockFile();
    }

    PerfDbgLog(tagHtmLoad, this, "-CHtmLoad::OnBindDone");
}

void
CHtmLoad::GiveRawEcho(BYTE **ppb, ULONG *pcb)
{
    Assert(!*ppb);

    *ppb = _pbRawEcho;
    *pcb = _cbRawEcho;
    _pbRawEcho = NULL;
    _cbRawEcho = 0;
}

void
CHtmLoad::GiveSecConInfo(INTERNET_SECURITY_CONNECTION_INFO **ppsci)
{
    Assert(!*ppsci);

    *ppsci = _pSecConInfo;
    _pSecConInfo = NULL;
}

void
CHtmLoad::FinishSyncLoad()
{
    if (_pHtmPost)
    {
        OnPostDone(S_OK);
    }
}

void
CHtmLoad::Passivate()
{
    PerfDbgLog(tagHtmLoad, this, "+CHtmLoad::Passivate");

    super::Passivate();

    if (_pHtmPre)
    {
        _pHtmPre->Release();
        _pHtmPre = NULL;
    }

    if (_pHtmPost)
    {
        _pHtmPost->Die();
        _pHtmPost->Release();
        _pHtmPost = NULL;
    }

    if (_pDoc)
    {
        _pDoc->_cstrPasteUrl.Free();

        _pDoc->SubRelease();
        _pDoc = NULL;
    }

    if (_pMarkup)
    {
        _pMarkup->SubRelease();
        _pMarkup = NULL;
    }

    if (_pContextMarkup)
    {
        _pContextMarkup->SubRelease();
        _pContextMarkup = NULL;
    }

    MemFree(_pbRawEcho);
    _pbRawEcho = NULL;

    MemFree(_pSecConInfo);
    _pSecConInfo = NULL;

    for (int i = 0; i < DWNCTX_MAX; i++)
    {
        UINT        cEnt     = _aryDwnCtx[i].Size();
        CDwnCtx **  ppDwnCtx = _aryDwnCtx[i];

        for (; cEnt > 0; --cEnt, ++ppDwnCtx)
        {
            if (*ppDwnCtx)
            {
#ifndef WIN16
                PerfDbgLog3(tagHtmLoad, this,
                    "CHtmLoad::Passivate Release unclaimed CDwnCtx %lX #%d %ls",
                    *ppDwnCtx, ppDwnCtx - (CDwnCtx **)_aryDwnCtx[i], (*ppDwnCtx)->GetUrl());
#endif //ndef WIN16

                (*ppDwnCtx)->Release();
            }
        }
    }

    PerfDbgLog(tagHtmLoad, this, "-CHtmLoad::Passivate");
}

#if 0
void
CHtmLoad::UpdateLGT()
{
    if (_pHtmPre)
    {
        _pHtmPre->UpdateLGT(_pDoc);
    }
}
#endif

void
CHtmLoad::ResumeHtmPre()
{
    PerfDbgLog(tagHtmLoad, this, "+CHtmLoad::OnPostFinishScript");

    //
    // It's possible to get here without a _pHtmPre if we were
    // given an ExecStop in the middle of script execution.
    //

    if (_pHtmPre && !_pHtmPre->Resume())
    {
        _pHtmPre->SetBlocked(FALSE);
    }

    PerfDbgLog(tagHtmLoad, this, "-CHtmLoad::OnPostFinishScript");
}

void
CHtmLoad::ResumeAfterTagResolution( ELEMENT_TAG etag, TCHAR * pchTagName, ULONG cchTagName )
{
    Assert( _pHtmPre );
    Assert(     (   ( etag == ETAG_GENERIC_LITERAL || etag == ETAG_GENERIC_NESTED_LITERAL ) 
                 && pchTagName && cchTagName )                              // Setting up literal-ness
           ||   etag == ETAG_GENERIC ||                                     // Non-literal
                etag == ETAG_UNKNOWN ||                                     // No tag found
                etag == ETAG_NULL );                                        // Tag was an end tag

    // Ajdust the Pre's state if we got a literal
    if( etag == ETAG_GENERIC_LITERAL || etag == ETAG_GENERIC_NESTED_LITERAL )
    {
        _pHtmPre->SetLiteralState( etag, pchTagName, cchTagName );
    }

    ResumeHtmPre();
}


void
CHtmLoad::DoStop()
{
    // Abort the binding
    if (_pDwnBindData)
        _pDwnBindData->Terminate(E_ABORT);

    // Tell htmpost to stop processing tokens
    if (_pHtmPost)
        _pHtmPost->DoStop();

}

void
CHtmLoad::ResumeAfterScan()
{
    // Tell htmpost to stop processing tokens
    if (_pHtmPost)
    {
        _pHtmPost->ResumeAfterScan();
    }

}

HRESULT
CHtmLoad::OnPostRestart(CODEPAGE codepage)
{
    HRESULT hr;
    IStream        * pstm           = NULL;
    COmWindowProxy * pWindowProxy   = NULL;
    CMarkup        * pMarkupPending = NULL;
    CDwnBindData   * pDwnBindData   = NULL;   

    PerfDbgLog(tagHtmLoad, this, "+CHtmLoad::OnPostFinishScript");   

    hr = THR(CreateStreamOnHGlobal(NULL, TRUE, &pstm));
    if (hr)
        goto Cleanup;

    hr = THR(GetHtmInfo()->CopyOriginalSource(pstm, 0));
    if (hr)
        goto Cleanup;

    hr = THR(pstm->Seek(LI_ZERO.li, STREAM_SEEK_SET, NULL));
    if (hr)
        goto Cleanup;

    pDwnBindData = _pDwnBindData;
    pDwnBindData->AddRef();

    _fDwnBindTerm = TRUE;
    _pDwnBindData->Disconnect();

    pWindowProxy   = _pMarkup->GetWindowPending();

    //Windows NT9 database, bug# 499597. SwitchMarkup can cause re-entrancy and passivate
    //this CHtmLoad and the windowproxy can also get deleted. We need to addref and check
    //if it is passivating before restarting the load
    pWindowProxy->SubAddRef();

    pMarkupPending = pWindowProxy->Window()->_pMarkupPending;

    if (pMarkupPending)
    {
        IGNORE_HR(pWindowProxy->SwitchMarkup(pMarkupPending,
                                             FALSE,
                                             COmWindowProxy::TLF_UPDATETRAVELLOG));
    }

    if (pWindowProxy->IsShuttingDown())
    {
        hr = E_FAIL;
        goto Cleanup;
    }

    hr = THR(pWindowProxy->RestartLoad(pstm, pDwnBindData, codepage));
    if (hr)
    {
        pDwnBindData->Terminate(E_ABORT);
        if (_pHtmPre && !_pHtmPre->Resume())
        {
            _pHtmPre->SetBlocked(FALSE);
        }

        goto Cleanup;
    }

Cleanup:
    if (pWindowProxy)
        pWindowProxy->SubRelease();

    ReleaseInterface(pstm);

    if (pDwnBindData)
        pDwnBindData->Release();

    PerfDbgLog(tagHtmLoad, this, "-CHtmLoad::OnPostFinishScript");

    RRETURN(hr);
}

HRESULT
CHtmLoad::OnPostStart()
{
    HRESULT  hr = S_OK;
    IMoniker *pmk = NULL;

    Assert(_pDoc->_dwTID == GetCurrentThreadId());

    // Set the _fImageFile flag on the document based on the media
    // type of the load context.

    _pMarkup->SetImageFile(_fImageFile);

    // We pass ownership of the p3p header to the markup here. Incase there was 
    // an error setting the privacy info, the markup will delete the header, so
    // null it out at our end to avoid the CHtmLoad destructor from deleting the
    // same memory
    IGNORE_HR(_pMarkup->SetPrivacyInfo(&_pchP3PHeader));

    // If we were redirected, adjust the base URL of the document
    // and discard original post data if any, and clear 449 echo

    if (_cstrRedirect)
    {
        LPTSTR pchHash;
        BOOL fKeepPost;
        fKeepPost = (_cstrMethod && _tcsequal(_cstrMethod, _T("POST")));

        if( _pMarkup->Document())
        {
            _pMarkup->Document()->ResetSecurityThunk();
            _pMarkup->Window()->ResetSecurityThunk();
        }

        if (    _pMarkup->IsPrimaryMarkup()
            ||  _pMarkup->IsPendingPrimaryMarkup())
        {
            BYTE abSID[MAX_SIZE_SECURITY_ID];
            DWORD cbSID = ARRAY_SIZE(abSID);

            hr = _pMarkup->GetSecurityID(abSID, &cbSID, _cstrRedirect);
            if (hr)
                goto Cleanup;

            hr = _pHtmPre->_pDwnDoc->SetSecurityID(abSID, cbSID);
            if (hr)
                goto Cleanup;
        }

        pchHash = (LPTSTR)UrlGetLocation(_cstrRedirect);
        if (pchHash)
        {
            hr = THR(_pMarkup->StartBookmarkTask(pchHash, 0));
            if (hr)
                goto Cleanup;
        }
    
        hr = THR(CMarkup::SetUrl(_pMarkup, _cstrRedirect));
        if (hr)
            goto Cleanup;

        _pMarkup->UpdateSecurityID();

        hr = THR(CreateURLMoniker(NULL, _cstrRedirect, &pmk));
        if (hr)
            goto Cleanup;
            
        hr = THR(_pMarkup->ReplaceMonikerPtr(pmk));
        if (hr)
            goto Cleanup;

        // The redirect URL is not encoded.
        //
        hr = THR(CMarkup::SetUrlOriginal(_pMarkup, _cstrRedirect));
        if (hr)
            goto Cleanup;

        if (_pMarkup->_fNewWindowLoading)
        {
            _pMarkup->_pDoc->_webOCEvents.NavigateComplete2(_pMarkup->GetWindowPending());
        }

        if( !_pMarkup )
        {
            // Got a case from IE Watson where the above event killed the load
            hr = E_ABORT;
            goto Cleanup;
        }

        if (!fKeepPost)
            _pMarkup->ClearDwnPost();

        // BUGFIX 20348: don't discard 449 echo information on redirect
        // MemFree(_pbRawEcho);
        // _pbRawEcho = NULL;
        // _cbRawEcho = 0;
    }

    if (_cstrRefresh)
    {
        _pMarkup->ProcessHttpEquiv(_T("Refresh"), _cstrRefresh);
    }

    if (_cstrPics)
    {
        _pMarkup->ProcessMetaPics(_cstrPics, TRUE);
    }

    // block history if needed

    if (!_fLoadHistory)
    {
        _pMarkup->ClearLoadHistoryStreams();
    }

    // notify doc about security if the URL is not a js, vbscript or about: url or if we are not in an object tag (IE6 bug 28338)
    if (!_fPasting && !IsSpecialUrl(CMarkup::GetUrl(_pMarkup)) && !_pDoc->_fInObjectTag)
    {
        _pDoc->OnHtmDownloadSecFlags(_pMarkup->IsPendingRoot(), GetSecFlags(), _pMarkup);
    }

    // grab the raw header data
    GetHtmInfo()->TakeRawEcho(&_pbRawEcho, &_cbRawEcho);

    // grab the security info structure
    GetHtmInfo()->TakeSecConInfo(&_pSecConInfo);

Cleanup:
    ClearInterface(&pmk);
    RRETURN(hr);
}

void
CHtmLoad::OnPostDone(HRESULT hrErr)
{
    //
    // If CHtmLoad::Close has been called before CHtmPost has finished,
    // we may have already released and NULL'ed this pointer
    //

    if (_pHtmPost)
    {
        if (_pHtmPost->_pchError)
        {
            GetHtmInfo()->TakeErrorString(&(_pHtmPost->_pchError));
        }

        PostManDequeue(_pHtmPost);
        _pHtmPost->Release();
        _pHtmPost = NULL;
    }

    OnDone(hrErr);
}


HRESULT
CHtmLoad::Write(LPCTSTR pch, BOOL fParseNow)
{
    PerfDbgLog(tagHtmLoad, this, "+CHtmLoad::Write");

    BOOL    fExhausted;
    ULONG   cch = _tcslen(pch);
    CWindow *pWindow = NULL;
    HRESULT hr;

    //$ Note that if this is an image we might be in pass-thru mode ...
    //$ only write to the CDwnBindData but don't tokenize or post-parse.

    AssertSz(_pHtmPre, "document.write called and preparser is gone");

    // InsertText pushes the specified text into the preparser's buffer (stacking when needed)
    // It also counts and adds the source to the HtmInfo if appropriate
    hr = THR(_pHtmPre->InsertText(pch, cch));
    if (hr)
        goto Cleanup;

    if (fParseNow)
    {
        // An extra EnterInline / LeaveInline is needed around Write so we treat the parser
        // as synchronous in the case of a cross-window or C-code write (not initiated by script)

        // These guys shouldn't have a pointer until we've switched windows so assert here
        Assert( !_pMarkup->_fWindowPending );
        
        hr = THR(_pMarkup->EnterScriptExecution(&pWindow));
        if (hr) 
            goto Cleanup;
        
        for (;;)
        {
            // TokenizeText runs the preparser as far as possible (stopping at scripts when needed)
            hr = THR(_pHtmPre->TokenizeText(&fExhausted));
            if (hr)
                goto Cleanup;

            if (fExhausted)
                break;

            hr = THR(_pHtmPost->RunNested());
            if (hr)
                goto Cleanup;
        }
        
        hr = THR(_pMarkup->LeaveScriptExecution(pWindow));
        if (hr) 
            goto Cleanup;
    }

Cleanup:
    PerfDbgLog1(tagHtmLoad, this, "-CHtmLoad::OnScriptWrite (hr=%lX)", hr);
    RRETURN(hr);
}

HRESULT
CHtmLoad::Close()
{
    PerfDbgLog(tagHtmLoad, this, "+CHtmLoad::OnClose");

    HRESULT hr;
    HRESULT hr2;
    CWindow *pWindow = NULL;

    //$ Don't run tokenizer if we are in pass-thru mode to an image.

    Verify(!_pHtmPre->Resume());

    // We should have already switched by this point
    Assert( !_pMarkup->_fWindowPending );

    // don't wait for the message loop; execute syncrhonously as if
    // we're inside an inline script
    hr = THR(_pMarkup->EnterScriptExecution(&pWindow));
    if (hr)
        goto Cleanup;

    while (!_pHtmPost->IsDone())
    {
        hr = THR(_pHtmPre->Exec()); // runs up to first </SCRIPT>
        if (hr)
            goto CleanupSync;

        hr = THR(_pHtmPost->Exec(INFINITE));
        if (hr)
            goto CleanupSync;
    }

CleanupSync:
    hr2 = THR(_pMarkup->LeaveScriptExecution(pWindow));
    if (!hr)
        hr = hr2;

    if (hr)
        goto Cleanup;

    if (_pHtmPost)
    {
        OnPostDone(S_OK);
    }

Cleanup:
    PerfDbgLog1(tagHtmLoad, this, "-CHtmLoad::OnClose (hr=%lX)", hr);
    RRETURN(hr);
}

void
CHtmLoad::Sleep(BOOL fSleep, BOOL fExecute)
{
    PerfDbgLog(tagHtmLoad, this, "+CHtmLoad::Sleep");

    if (_pHtmPost)
    {
        if (fSleep)
        {
            _pHtmPost->_dwFlags |= POSTF_SLEEP;
            PostManSuspend(_pHtmPost);
        }
        else
        {
            _pHtmPost->_dwFlags &= ~POSTF_SLEEP;
            PostManResume(_pHtmPost, fExecute);
        }
    }

    PerfDbgLog(tagHtmLoad, this, "-CHtmLoad::Sleep");
}

HRESULT
CHtmLoad::AddDwnCtx(UINT dt, CDwnCtx * pDwnCtx)
{
    PerfDbgLog(tagHtmLoad, this, "+CHtmLoad::AddDwnCtx");

    HRESULT hr;

    EnterCriticalSection();

    if (_fPassive)
        hr = E_ABORT;
    else
    {
        hr = THR(_aryDwnCtx[dt].Append(pDwnCtx));

        if (hr == S_OK)
        {
            PerfDbgLog3(tagHtmLoad, this, "CHtmLoad::AddDwnCtx %lX #%d %ls",
                pDwnCtx, _aryDwnCtx[dt].Size() - 1, pDwnCtx->GetUrl());

            pDwnCtx->AddRef();
        }
    }

    LeaveCriticalSection();

    PerfDbgLog(tagHtmLoad, this, "-CHtmLoad::AddDwnCtx");
    RRETURN(hr);
}

CDwnCtx *
CHtmLoad::GetDwnCtx(UINT dt, LPCTSTR pch)
{
    PerfDbgLog(tagHtmLoad, this, "+CHtmLoad::GetDwnCtx");

    CDwnCtx * pDwnCtx = NULL;
    int i, iLast;

    EnterCriticalSection();

    // loop order: check _iDwnCtxFirst first, then the rest

    if (_aryDwnCtx[dt].Size())
    {
        iLast = _iDwnCtxFirst[dt];
        Assert(iLast <= _aryDwnCtx[dt].Size());

        if (iLast == _aryDwnCtx[dt].Size())
            iLast = 0;

        i = iLast;

        do
        {
            Assert(i < _aryDwnCtx[dt].Size());

            pDwnCtx = _aryDwnCtx[dt][i];

            if (pDwnCtx && !StrCmpC(pDwnCtx->GetUrl(), pch))
            {
                PerfDbgLog3(tagHtmLoad, this, "CHtmLoad::GetDwnCtx %lX #%d %ls",
                    pDwnCtx, i, pch);

                _aryDwnCtx[dt][i] = NULL;

                #if DBG==1
                if (i != _iDwnCtxFirst[dt])
                {
                    TraceTag((tagError, "CHtmLoad DwnCtx vector %d out of order", dt));
                }
                #endif

                _iDwnCtxFirst[dt] = i + 1; // this may == _aryDwnCtx[dt].Size()
                break;
            }

            pDwnCtx = NULL;

            if (++i == _aryDwnCtx[dt].Size())
                i = 0;

        }
        while (i != iLast);
    }

    #if DBG==1 || defined(PERFTAGS)
    if (pDwnCtx == NULL)
        PerfDbgLog1(tagHtmLoad, this, "CHtmLoad::GetDwnCtx failed %ls", pch);
    #endif

    LeaveCriticalSection();

    PerfDbgLog1(tagHtmLoad, this, "-CHtmLoad::GetDwnCtx (pDwnCtx=%lX)", pDwnCtx);
    return(pDwnCtx);
}

CHtmPre *
CHtmLoad::GetHtmPreAsync()
{
    EnterCriticalSection();

    CHtmPre * pHtmPre = _fPassive ? NULL : _pHtmPre;

    if (pHtmPre)
        pHtmPre->SubAddRef();

    LeaveCriticalSection();

    return(pHtmPre);
}

void
CHtmLoad::SetGenericParse(BOOL fDoGeneric)
{
    if (_pHtmPre)
        _pHtmPre->SetGenericParse(fDoGeneric);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\download\htmpre.cxx ===
//+------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1992 - 1995.
//
//  File:       htmpre.cxx
//
//  Contents:   Support for HTML preparsing, including
//
//              CAttrWatchDesc
//              CTagWatchDesc
//              CValueBuffer
//              CTagWatch
//              CHtmPre
//
//-------------------------------------------------------------------------

// KNOWN areas this tokenizer differs from NS:
// (1) embedded \0 handling. NS leaves them in until after
//     tokenizing, and we now strip out embedded \0 chars
//     before tokenizing. I've tried NS's approach, and
//     found that it adds unneeded complexity.
// (2) NS treats an initial unknown tag at the very beginning
//     of the file as an overlaped scope tag which hides text.
//     We do not treat this tag specially.
// (3) NS matches entities in a case-sensitive manner. We should
//     do the same.
// (4) NS does not resolve named or numeric entities which end
//     at the EOF without a semicolon. We do.
// TO DO:
// (1) Feed line/char count to special tags that need them (<SCRIPT>)
// (2) Saver must save entity-like chars in literals correctly.
// (dbau 12/16/96)

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_HTM_HXX_
#define X_HTM_HXX_
#include "htm.hxx"
#endif

#ifndef X_OTHRGUID_H_
#define X_OTHRGUID_H_
#include "othrguid.h"
#endif

#ifndef X_WCHDEFS_H_
#define X_WCHDEFS_H_
#include "wchdefs.h"
#endif

#ifndef X_INTL_HXX_
#define X_INTL_HXX_
#include "intl.hxx"
#endif

#ifndef X_HEDELEMS_HXX_
#define X_HEDELEMS_HXX_
#include "hedelems.hxx"
#endif

#ifndef X_ASSOC_HXX_
#define X_ASSOC_HXX_
#include "assoc.hxx"
#endif

#ifndef X_ENTITY_H_
#define X_ENTITY_H_
#include "entity.h"
#endif

#ifndef X_HTMVER_HXX_
#define X_HTMVER_HXX_
#include "htmver.hxx"
#endif

#ifdef WIN16
#ifndef X_URLMKI_H_
#define X_URLMKI_H_
#include "urlmki.h"
#endif
#endif

#ifndef X_SWITCHES_HXX_
#define X_SWITCHES_HXX_
#include "switches.hxx"
#endif

#ifndef X_HTMTOK_HXX_
#define X_HTMTOK_HXX_
#include "htmtok.hxx"
#endif

#ifndef X_PRGSNK_H_
#define X_PRGSNK_H_
#include "prgsnk.h"
#endif

#ifndef X_PEERXTAG_HXX_
#define X_PEERXTAG_HXX_
#include "peerxtag.hxx"
#endif


#define _cxx_
#include "entity.h"

#define HTMPRE_BLOCK_SIZE      4096 // assumed to be power of 2

#define CCH_LARGE_TOKEN       16384 // after text buf grows to 16K, use exponential allocation
#define CCH_OVERFLOW_TOKEN  1048576 // stop growing after a megabyte
#define MAX_ATTR_COUNT        16383 // Allow at most 16K-1 attribute-value pairs

#define CONDITIONAL_FEATURE

ExternTag(tagPalette);

DeclareTag(tagNoValues,             "Dwn", "HtmPre: Treat all values as absent");
DeclareTag(tagEmptyValues,          "Dwn", "HtmPre: Treat all values as empty strings");
DeclareTag(tagHtmPreNoAutoLoad,     "Dwn", "HtmPre: Inhibit auto-download");
DeclareTag(tagToken,                "Dwn", "HtmPre: Detailed tokenizer trace");
PerfDbgTag(tagHtmPre,               "Dwn", "Trace CHtmPre")
PerfDbgTag(tagForceSwitchToRestart, "Dwn", "! Force SwitchCodePage to restart")
PerfDbgTag(tagHtmPreOneCharText,    "Dwn", "! HtmPre slow one char per text tag")

PerfDbgExtern(tagPerfWatch)
PerfDbgExtern(tagDwnBindSlow)

MtDefine(CHtmPre, Dwn, "CHtmPre")
MtDefine(CHtmPreBuffer, CHtmPre, "CHtmPre::_pchBuffer")
MtDefine(CHtmPre_aryInsert_pv, CHtmPre, "CHtmPre::_aryInsert::_pv")
MtDefine(CHtmPre_aryCchSaved_pv, CHtmPre, "CHtmPre::_aryCchSaved::_pv")
MtDefine(CHtmPre_aryCchAsciiSaved_pv, CHtmPre, "CHtmPre::_aryCchAsciiSaved::_pv")
MtDefine(SetCookie, CMarkup, "SetCookieOnUIThread strings")


DWORD HashString(const TCHAR *pch, DWORD len, DWORD hash);
extern HRESULT SetUrlDefaultScheme(const TCHAR *pchHref, CStr *pStr);
extern BOOL _7csnziequal(const TCHAR *string1, DWORD cch, const TCHAR *string2);

#if DBG != 1
#pragma optimize(SPEED_OPTIMIZE_FLAGS, on)
#endif

const BYTE g_charclass[64] = {
// CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH

0,                                                                                                 // 0
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 1
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 2
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 3
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 4
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 5
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 6
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 7
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 8
   CCF_TXTCH |                                                 CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 9  \t
0,                                                                                                 // 10 \n
   CCF_TXTCH |                                                 CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 11
   CCF_TXTCH |                                                 CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 12
0,                                                                                                 // 13 \r
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 14
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 15
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 16
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 17
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 18
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 19
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 20
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 21
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 22
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 23
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 24
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 25
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 26
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 27
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 28
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 29
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 30
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 31
   CCF_TXTCH |                                                 CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 32 ' '
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 33 '!'
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH |             CCF_VALCH | CCF_NDASH             | CCF_MRKCH , // 34 '"'
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 35 '#'
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 36 '$'
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 37 '%'
               CCF_NONSP | CCF_NAMCH | CCF_ATTCH |             CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 38 '&'
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH |             CCF_VALCH | CCF_NDASH             | CCF_MRKCH , // 39 '''
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 40 '('
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 41 ')'
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 42 '*'
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 43 '+'
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 44 ','
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH |             CCF_TAGCH | CCF_MRKCH , // 45 '-'
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 46 '.'
   CCF_TXTCH | CCF_NONSP |                         CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 47 '/'
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 48 '0'
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 49 '1'
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 50 '2'
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 51 '3'
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 52 '4'
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 53 '5'
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 54 '6'
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 55 '7'
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 56 '8'
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 57 '9'
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 58 ':'
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 59 ';'
               CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 60 '<'
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH |             CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 61 '='
   CCF_TXTCH | CCF_NONSP |                                     CCF_NDASH                         , // 62 '>'
   CCF_TXTCH | CCF_NONSP | CCF_NAMCH | CCF_ATTCH | CCF_VALCH | CCF_NDASH | CCF_TAGCH | CCF_MRKCH , // 63 '?'
};

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::~CHtmPre
//
//-------------------------------------------------------------------------
CHtmPre::~CHtmPre()
{
    PerfDbgLog(tagHtmPre, this, "+CHtmPre::~CHtmPre");

    if (_pHtmLoad)
        _pHtmLoad->SubRelease();

    if (_pHtmInfo)
        _pHtmInfo->SubRelease();

    if (_pHtmTagStm)
        _pHtmTagStm->Release();

    if (_pDwnBindData)
        _pDwnBindData->Release();

    if (_pDwnDoc)
        _pDwnDoc->Release();

    if (_pVersions)
        _pVersions->Release();

    ReleaseInterface(_pInetSess);

    // Don't let CEncoderReader free this pointer.  It doesn't belong to it.

    _pchBuffer = NULL;

    PerfDbgLog(tagHtmPre, this, "-CHtmPre::~CHtmPre");
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::Passivate
//
//-------------------------------------------------------------------------
void
CHtmPre::Passivate()
{
    PerfDbgLog(tagHtmPre, this, "+CHtmPre::Terminate");

    _fDone = TRUE;
    _cSuspended = 0;

    super::Passivate();

    PerfDbgLog(tagHtmPre, this, "-CHtmPre::Terminate");
}

//+------------------------------------------------------------------------
//
//  Function:   CanPrefetchWithScheme
//
//  Synopsis:   Checks if the scheme is one of the "big-3"
//
//-------------------------------------------------------------------------

BOOL
CanPrefetchWithScheme(TCHAR * pchUrl)
{
    // Combining URLs requires that CoInitialize is called because
    // it might try to load the protocol handler objects for random
    // protocols.  But this thread never called CoInitialize (and
    // it doesn't want to because we don't have a message loop), we
    // punt prefetching on anything but the big-3 internal protocols.

    UINT uScheme = GetUrlScheme(pchUrl);

    return( uScheme == URL_SCHEME_FILE
        ||  uScheme == URL_SCHEME_HTTP
        ||  uScheme == URL_SCHEME_HTTPS);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::OnRedirect
//
//-------------------------------------------------------------------------
HRESULT
CHtmPre::OnRedirect(LPCTSTR pchUrl)
{
    PerfDbgLog1(tagHtmPre, this, "+CHtmPre::OnRedirect %ls",
        pchUrl ? pchUrl : g_Zero.ach);

    HRESULT hr;

    hr = THR(_cstrDocUrl.Set(pchUrl));
    if (hr)
        goto Cleanup;

    if (_pDwnBindData && _pDwnBindData->GetIsRootMarkup())
        _fTopLevelRedirect = TRUE;

    if (_pInetSess && !CanPrefetchWithScheme(_cstrDocUrl))
    {
        ClearInterface(&_pInetSess);
    }

    hr = THR(_pDwnDoc->SetSubReferer(pchUrl));
    if (hr)
        goto Cleanup;

Cleanup:
    PerfDbgLog1(tagHtmPre, this, "-CHtmPre::OnRedirect (hr=%lX)", hr);
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::Init
//
//-------------------------------------------------------------------------
HRESULT
CHtmPre::Init(CHtmLoad * pHtmLoad, CDwnDoc * pDwnDoc,
    IInternetSession * pInetSess, IStream *pstmLeader, CDwnBindData * pDwnBindData,
    CHtmTagStm * pHtmTagStm, HTMPASTEINFO * phpi, LPCTSTR pchUrl, CVersions *pVersions,
    BOOL fXML, FUNC_TOKENIZER_FILTEROUTPUTTOKEN * pfnFilterOutputToken)
{
    PerfDbgLog1(tagHtmPre, this, "+CHtmPre::Init %ls",
        pchUrl ? pchUrl : g_Zero.ach);

    HRESULT hr = S_OK;
    BOOL fEof = FALSE;

    _pHtmLoad = pHtmLoad;
    _pHtmLoad->SubAddRef();

    _pHtmInfo = pHtmLoad->GetHtmInfo();
    _pHtmInfo->SubAddRef();

    _pDwnDoc = pDwnDoc;
    _pDwnDoc->AddRef();

    _fMetaCharsetOverride = (_pDwnDoc->GetLoadf() & DLCTL_NO_METACHARSET ? TRUE : FALSE);

    ReplaceInterface(&_pInetSess, pInetSess);

    _pDwnBindData = pDwnBindData;
    _pDwnBindData->AddRef();

    _pHtmTagStm = pHtmTagStm;
    _pHtmTagStm->AddRef();

    if (pVersions)
        pVersions->AddRef();
    _pVersions = pVersions;

    Assert(!_fEndCR);

    _pfnFilterOutputToken = pfnFilterOutputToken;

    _cbNextInsert = -1;

    _state = TS_TEXT;

    _cpNew = CP_UNDEFINED;
    _fPasting = phpi != NULL;

    _fXML = fXML;

    _cDownloadSupression = 0;

    if (phpi)
    {
        if (phpi->cbSelBegin >= 0)
        {
            hr = THR(AddInsert(phpi->cbSelBegin, TIC_BEGINSEL));

            if (hr)
                goto Cleanup;
        }

        if (phpi->cbSelEnd >= 0)
        {
            hr = THR(AddInsert(phpi->cbSelEnd, TIC_ENDSEL));

            if (hr)
                goto Cleanup;
        }
    }

    hr = THR(_cstrDocUrl.Set(pchUrl));
    if (hr)
        goto Cleanup;

    if (_pInetSess && (!CanPrefetchWithScheme(_cstrDocUrl) || _fPasting))
    {
        ClearInterface(&_pInetSess);
    }

    // Start buffer with contents of pstmLeader

    if (pstmLeader)
    {
        _fRestarted = TRUE; // Set so we don't restart a second time

        while (!fEof)
        {
            hr = THR(PrepareToEncode());
            if (hr)
                goto Cleanup;

            hr = THR(ReadStream(pstmLeader, &fEof));
            if (hr)
                goto Cleanup;

            // (dmitryt) if fEof is true - it means ReadStream read 0 bytes.
            // Either we are at the end, or we already
            // tried conversion but don't have enough bytes to form valid
            // multibyte character. And we don't have any more bytes in pstmLeader.
            // Bail out and continue to download into the buffer...

            if (_cbBuffer && !fEof)
            {
                int cch;

                hr = THR(WideCharFromMultiByte(fEof && _pDwnBindData->IsEof(), &cch));
                if (hr)
                    goto Cleanup;

                cch -= PreprocessBuffer(cch);
                _ulCharsEnd += cch;
            }

        }
    }

Cleanup:
    PerfDbgLog1(tagHtmPre, this, "-CHtmPre::Init (hr=%lX)", hr);
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::Run, CDwnTask
//
//  Synopsis:   Runs the tokenizer and adjusts the task
//
//-------------------------------------------------------------------------

void
CHtmPre::Run()
{
    PerfDbgLog(tagPerfWatch, this, "+CHtmPre::Run");
    PerfDbgLog(tagHtmPre, this, "+CHtmPre::Run");

    SwitchesBegTimer(SWITCHES_TIMER_TOKENIZER);

    BOOL    fDataPend;
    HRESULT hr;

    if (!_fDone)
    {
        hr = THR(Exec());

        if (hr)
        {
            _fDone = TRUE;
            IGNORE_HR(OutputDocSize());
            OutputEof(hr);
        }
    }

    fDataPend = _pDwnBindData->IsPending();

    if (_fDone || _cSuspended || (_pch == _pchEnd && fDataPend))
    {
        PerfDbgLog4(tagHtmPre, this, "CHtmPre::Run blocking "
            "(_fDone: %s, _cSuspended: %d, fBufPend: %s, fDataPend: %s)",
            _fDone ? "T" : "F", _cSuspended, (_pch == _pchEnd) ? "T" : "F",
            fDataPend ? "T" : "F");

        SetBlocked(TRUE);
    }

    SwitchesEndTimer(SWITCHES_TIMER_TOKENIZER);

    PerfDbgLog(tagHtmPre, this, "-CHtmPre::Run");
    PerfDbgLog(tagPerfWatch, this, "-CHtmPre::Run");
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::Exec
//
//  Synopsis:   Runs the tokenizer
//
//-------------------------------------------------------------------------

HRESULT
CHtmPre::Exec()
{
    PerfDbgLog(tagPerfWatch, this, "+CHtmPre::Exec");
    PerfDbgLog(tagHtmPre, this, "+CHtmPre::Exec");

    BOOL fAtInsert;
    HRESULT hr = S_OK;

    if (_cSuspended)
        goto Leave;

    for (;;)
    {
        hr = THR(PrepareToEncode());
        if (hr)
            goto Cleanup;

        hr = THR(Read());
        if (hr)
            goto Cleanup;

        do
        {
            if (_cbBuffer)
            {
                int cch;

                hr = THR(WideCharFromMultiByte(_pDwnBindData->IsEof(), &cch));
                if (hr)
                    goto Cleanup;

                // WideCharFromMultiByte may have caused us to suspend.
                if( _cSuspended )
                {
                    goto Cleanup;
                }

                cch -= PreprocessBuffer(cch);

                if (cch)
                {
                    _ulCharsEnd += cch;
                }
            }

            _ulCharsUncounted = 0;
            _fCount = 1;

            fAtInsert = AtInsert();

            hr = THR_NOTRACE(Tokenize());
            if (hr)
                goto Cleanup;

            if (fAtInsert)
            {
                QueueInserts();
                
                if (_state == TS_TEXT)
                {
                    hr = THR( OutputInserts() );

                    if (hr)
                        goto Cleanup;
                }
            }

        } while (!Exhausted() && !fAtInsert);

        if (_pDwnBindData->IsEof())
        {
            _fEOF  = TRUE;

            hr = THR_NOTRACE(Tokenize());
            if (hr)
                goto Cleanup;

            Assert(_state == TS_TEXT || _state == TS_PLAINTEXT || _state == TS_ENTCLOSE); // should finish file in a clean state

            _fDone = TRUE;

            // If after reading the entire document our codepage is still
            // autodetect, we've encountered a pure-ASCII page.  We can therefore
            // treat the document as if it were in CP_ACP without risk.

            if (IsAutodetectCodePage(_cp))
            {
                DoSwitchCodePage(g_cpDefault, NULL, FALSE);
            }

            hr = THR(OutputDocSize());
            if (hr)
                goto Cleanup;

            hr = THR(OutputInserts());
            if (hr)
                goto Cleanup;

            OutputEof(S_OK);
            break;

        }

        if (_pDwnBindData->IsPending() || IsTimeout())
            break;
    }

Cleanup:

    if (hr == E_PENDING)
    {
        // Flush the constructed but not signalled tag now that the state machine is in a clean
        // state and can tolerate being re-entered.

        _pHtmTagStm->WriteTagEnd();
        _pHtmTagStm->Signal();
        hr = S_OK;
    }

Leave:
    PerfDbgLog1(tagHtmPre, this, "-CHtmPre::Exec (hr=%lX)", hr);
    PerfDbgLog(tagPerfWatch, this, "-CHtmPre::Exec");
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::PreprocessBuffer
//
//  Synopsis:   Advances _pchEnd by cch (assuming cch chars have been put
//              in place already), but first removes embedded \0 chars
//              and does NS-compatable CRLF handling.
//
//              CR   -> CR
//              LF   -> CR
//              CRLF -> CR
//              LFCR -> CRCR
//
//  Returns:    Number of chars by which the buffer was reduced.
//
//-------------------------------------------------------------------------

int
CHtmPre::PreprocessBuffer(int cch)
{
    BOOL fAscii;

    if (!cch)
        return 0;

    // Special handling for files beginning with \0
    if (!_fCheckedForLeadingNull)
    {
        if (!*_pchEnd)
            _fSuppressLeadingText = TRUE;

        _fCheckedForLeadingNull = TRUE;
    }

    TCHAR *pchEnd = _pchEnd + cch;

    int cNukedChars = NormalizerChar(_pchEnd, &pchEnd, &fAscii);

    _pchEnd = pchEnd;

    if (!fAscii)
        _pchAscii = pchEnd;

    return cNukedChars;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::MakeRoomForChars
//
//  Synopsis:   Opens up space in buffer, allocating and moving memory
//              if needed.
//
//  Memory layout:
//
//            Previous text<a href = "zee.htm">Future Text0    Saved text
//            +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//   pchBuffer^    pchStart^  pchWord^  pch^        pchEnd^    ^pchTop   ^
//                                                    pchBuffer+cchBuffer^
//
//-------------------------------------------------------------------------

HRESULT
CHtmPre::MakeRoomForChars(int cch)
{
    HRESULT hr = S_OK;

    Assert(!_cchSaved || _cSuspended);

    if (!_pchBuffer)
    {
        Assert(!_cchSaved);

        _cchBuffer = cch + 1;

        hr = THR(_pHtmTagStm->AllocTextBuffer(_cchBuffer, &_pchBuffer));
        if (hr)
            goto Cleanup;

        _pchStart = _pch = _pchEnd = _pchAscii = _pchBuffer;
        _pchTop = _pchBuffer + _cchBuffer;

        *_pchEnd = _T('\0');
    }
    else if (cch > PTR_DIFF(_pchTop, _pchEnd + 1))
    {
        long cchUsed = PTR_DIFF(_pchStart, _pchBuffer);
        long cchData = PTR_DIFF(_pchEnd + 1, _pchStart);
        long cchNeed = cchData + cch + _cchSaved;
        // Bug 9535: exponential reallocation after a certain size is reached
        long cchWant = cchNeed <= CCH_LARGE_TOKEN ? cchNeed : cchNeed + cchData / 2;
        long cchDiff;
        TCHAR * pchNewBuffer;

        if (cchUsed == 0)
            hr = THR(_pHtmTagStm->GrowTextBuffer(cchWant, &pchNewBuffer));
        else
            hr = THR(_pHtmTagStm->AllocTextBuffer(cchWant, &pchNewBuffer));
        if (hr)
            goto Cleanup;

        if (cchData && cchUsed)
        {
            memmove(pchNewBuffer, _pchStart, cchData * sizeof(TCHAR));
        }

        if (_cchSaved)
        {
            memmove(pchNewBuffer + cchWant - _cchSaved,
                    cchUsed ? _pchTop : pchNewBuffer + PTR_DIFF(_pchTop, _pchBuffer),
                    _cchSaved * sizeof(TCHAR));
        }

        if (_pchStart > _pchAscii)
            _pchAscii = _pchStart;

        cchDiff    = PTR_DIFF(pchNewBuffer, _pchStart);
        _pchTop    = pchNewBuffer + cchWant - _cchSaved;
        _pchBuffer = pchNewBuffer;
        _cchBuffer = cchWant;

        if (cchDiff)
        {
            _pchStart += cchDiff;
            _pchWord  += cchDiff;
            _pch      += cchDiff;
            _pchEnd   += cchDiff;
            _pchAscii += cchDiff;
        }

    }
    Assert((PTR_DIFF(_pchTop, _pchEnd + 1)) >= cch);

    CEncodeReader::MakeRoomForChars(cch);

Cleanup:
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::Suspend
//
//  Synopsis:   Sets appropriate state for suspending the preparser
//
//  Threading:  Called on the preparser thread.
//
//              The _cSuspended++ closes the gate on the preparser thread
//              so that Tokenize() isn't called by Run.
//
//              After Suspend, Tokenize() can safely be called from the
//              script thread (via InsertText).
//
//-------------------------------------------------------------------------
HRESULT
CHtmPre::Suspend()
{
    PerfDbgLog(tagPerfWatch, this, "+CHtmPre::Suspend");
    PerfDbgLog(tagHtmPre, this, "+CHtmPre::Suspend");

    HRESULT hr = S_OK;
    AssertSz(!_fSuspend, "Recursive suspend without InsertText");

    // Make sure a buffer is available so that SaveBuffer works
    if (!_pchEnd)
    {
        hr = THR(MakeRoomForChars(1));
        if (hr)
            goto Error;
    }

    // exercised only when nested InsertText did not SaveBuffer
    if (_fSuspend)
    {
        hr = THR(SaveBuffer());
        if (hr)
            goto Error;
        _fSuspend = FALSE;
    }

    // optimization: don't SaveBuffer; just note that SaveBuffer is needed
    _fSuspend = TRUE;
    _cSuspended++;

Error:
    PerfDbgLog1(tagHtmPre, this, "-CHtmPre::Suspend (hr=%lX)", hr);
    PerfDbgLog(tagPerfWatch, this, "-CHtmPre::Suspend");
    RRETURN(hr);
}


//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::SaveBuffer
//
//  Synopsis:   Saves any chars in buffer which haven't been processed yet.
//              RestoreBuffer brings the chars back. Can be nested.
//
//              Only works when tokenizer is suspended and in TS_TEXT
//              state.
//
//-------------------------------------------------------------------------
HRESULT
CHtmPre::SaveBuffer() 
{
    PerfDbgLog(tagHtmPre, this, "+CHtmPre::SaveBuffer");

    // state needs to be pushed
    int     cch;
    int     cchAscii;
    HRESULT hr;

    Assert(_fSuspend);
    Assert(_state == TS_TEXT);
    Assert(_pchEnd + 1 <= _pchTop);
    Assert(_pch == _pchStart);
    Assert(_pchEnd >= _pchStart);

    hr = THR(_aryCchSaved.EnsureSize(_aryCchSaved.Size()+1));
    if (hr)
        goto Cleanup;

    hr = THR(_aryCchAsciiSaved.EnsureSize(_aryCchAsciiSaved.Size()+1));
    if (hr)
        goto Cleanup;

    cch = PTR_DIFF(_pchEnd, _pch);
    cchAscii = PTR_DIFF(_pchEnd, _pchAscii);
    if (cchAscii > cch)
        cchAscii = cch;

    _cchSaved += cch;
    _pchTop   -= cch;

    memmove(_pchTop, _pch, cch * sizeof(TCHAR));
    _pchEnd = _pch;
    *_pchEnd   = _T('\0');

    Verify(!_aryCchSaved.AppendIndirect(&cch));
    Verify(!_aryCchAsciiSaved.AppendIndirect(&cchAscii));

Cleanup:
    PerfDbgLog1(tagHtmPre, this, "-CHtmPre::SaveBuffer (hr=%lX)", hr);
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::RestoreBuffer
//
//  Synopsis:   Restores chars previously saved by SaveBuffer.
//              Should be called same number of times as SaveBuffer.
//
//              Works in any state.
//
//-------------------------------------------------------------------------
void
CHtmPre::RestoreBuffer()
{
    PerfDbgLog(tagHtmPre, this, "+CHtmPre::RestoreBuffer");

    int cch = _aryCchSaved[_aryCchSaved.Size()-1];
    int cchAscii = _aryCchAsciiSaved[_aryCchAsciiSaved.Size()-1];
    
    _aryCchSaved.Delete(_aryCchSaved.Size()-1);
    _aryCchAsciiSaved.Delete(_aryCchAsciiSaved.Size()-1);

    Assert(_cchSaved >= cch);

    memmove(_pchEnd, _pchTop, cch * sizeof(TCHAR));
    _pchTop   += cch;
    _cchSaved -= cch;
    _pchEnd   += cch;

    if (cchAscii < cch)
        _pchAscii = _pchEnd - cchAscii;
        
    *(_pchEnd) = _T('\0');

    PerfDbgLog(tagHtmPre, this, "-CHtmPre::RestoreBuffer");
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::Resume
//
//  Synopsis:   The inverse of Suspend
//
//  Threading:  Called on the script thread.
//
//              The _cSuspended-- at the end opens the gate for the
//              preparser thread to continue calling Tokenize().
//
//  Returns:    _cSuspended
//
//-------------------------------------------------------------------------
ULONG
CHtmPre::Resume()
{
    PerfDbgLog(tagPerfWatch, this, "+CHtmPre::Resume");
    PerfDbgLog(tagHtmPre, this, "+CHtmPre::Resume");

    AssertSz(_cSuspended, "Resume called while not suspended");

    if (_fSuspend)
    {
        // state was never pushed on the stack
        _fSuspend = FALSE;
    }
    else
    {
        // restore saved chars
        RestoreBuffer();
    }
    // now everything is done except for csuspended

    // note that _cSuspended==0 opens the gate for the preparser thread

    ULONG cSuspended = _cSuspended-1;
    _cSuspended = cSuspended;

    PerfDbgLog1(tagHtmPre, this, "-CHtmPre::Resume (cSuspended=%ld)", cSuspended);
    PerfDbgLog(tagPerfWatch, this, "-CHtmPre::Resume");
    return(cSuspended);
}


//+----------------------------------------------------------------------------
//  
//  Method:     CHtmPre::SetLiteralState
//  
//  Synopsis:   Sets the literal state for the tokenizer.  Meant to be used
//              after tag resolution by CHtmPost.
//  
//  Returns:    void
//  
//  Arguments:
//          ETAG etag - ETAG to be looking for
//          TCHAR * pchTagName - Tag name to look for
//          ULONG cchTagName - Length of tag name
//  
//+----------------------------------------------------------------------------

void
CHtmPre::SetLiteralState( ELEMENT_TAG etag, TCHAR * pchTagName, ULONG cchTagName )
{
    Assert( !_fLiteralEnt && !_cstrLiteral && _etagLiteral == ETAG_NULL );
    Assert( etag == ETAG_GENERIC_LITERAL || etag == ETAG_GENERIC_NESTED_LITERAL );

    _fLiteralEnt = TRUE; 
    _cstrLiteral.Set( pchTagName, cchTagName ); 
    _etagLiteral = etag;
    _cLiteral = 1;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::IsExtendedTag
//
//-------------------------------------------------------------------------

ELEMENT_TAG
CHtmPre::IsExtendedTag(LPTSTR pch, int cch, BOOL fEnd, BOOL * pfDerived)
{
    ELEMENT_TAG             etag;
    LPTSTR                  pchPI;
    int                     cchPI;
    CExtendedTagDesc *      pExtendedTagDesc;
    CStringNullTerminator   term(pch + cch);    // null terminate the string temporary
    BOOL                    fQuestion = FALSE;

    Assert (pfDerived);

    *pfDerived = FALSE;

    etag = ETAG_UNKNOWN;

    if (!pch || !pch[0])
        goto Cleanup; // legal input stream: "<span>foo</ span>"

    pchPI = pch;
    cchPI = cch;
    if (_T('?') == pchPI[0]) // skip possible '?' mark
    {
        fQuestion = TRUE;

        pchPI++;
        cchPI--;
    }

    if (PI_EXTENDEDTAG_LEN == cchPI && 0 == StrCmpIC(pchPI, PI_EXTENDEDTAG))
    {
        etag = ETAG_RAW_EXTENDEDTAG;
    }
    else if (PI_XMLNS_LEN  == cchPI && 0 == StrCmpIC(pchPI, PI_XMLNS))
    {
        etag = ETAG_RAW_XMLNAMESPACE;
    }
    else if (PI_PRINTXML_LEN == cchPI && 0 == StrCmpIC(pchPI, PI_PRINTXML))
    {
        if( _pHtmTagStm->TagsWritten() <= 2 )
        {
            _pHtmLoad->_pMarkup->SetXML(TRUE);
            _fXML = TRUE;
        }
        etag = ETAG_RAW_REJECT;
    }
    else if (!fQuestion)
    {
        CTagNameCracker tagNameCracker(pch);
        BOOL            fQueryHost;

        if ((!tagNameCracker._pchNamespace || tagNameCracker._pchNamespace[0]) &&   // if either no namespace, or non-null namespace
            tagNameCracker._pchTagName && tagNameCracker._pchTagName[0])            // and if non-null tag name
        {
            pExtendedTagDesc = _pHtmInfo->GetExtendedTagDesc(
                tagNameCracker._pchNamespace,
                tagNameCracker._pchTagName,
                /* fEnsureTag = */ (NULL != tagNameCracker._pchNamespace),
                &fQueryHost);

            // Don't bother querying the host for an end tag -- what are we going to do?
            if( !fEnd && fQueryHost )
            {
                // This means we need to query our host.

                Assert( !pExtendedTagDesc );
                etag = ETAG_RAW_RESOLVE;
            }
            else if (pExtendedTagDesc)
            {
                Assert (pExtendedTagDesc->IsValid());

                etag = pExtendedTagDesc->_etagBase;

                *pfDerived = TRUE;
            }
        }
    }

Cleanup:
    return etag;
}

//+------------------------------------------------------------------------
//
//  Member:   CHtmPre::RegisterHtmlTagNamespaces
//
//-------------------------------------------------------------------------

void
CHtmPre::RegisterHtmlTagNamespaces(CHtmTag * pht)
{
    int                 idx;
    LPTSTR              pchNamespace;
    CHtmTag::CAttr *    pAttr;

    for (idx = 0;; idx++)
    {
        pchNamespace = pht->GetXmlNamespace(&idx);
        if (!pchNamespace)
            break;

        pAttr = pht->GetAttr(idx);

        IGNORE_HR(_pHtmInfo->RegisterNamespace(pchNamespace, /* pchUrn = */pAttr->_pchVal, XMLNAMESPACEDECL_STD));

        pAttr->_pchName = NULL;
        pAttr->_cchName = 0;
    }

    return;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::InsertText
//
//  Synopsis:   Inserts text directly into the preparser, used by
//              implementation of document.write.
//              New text is inserted at _pch, which needs to be at the
//              same place as _pchStart.
//
//  Threading:  Called on the script thread.
//
//              Must be called between Suspend() and Resume().
//
//-------------------------------------------------------------------------
HRESULT
CHtmPre::InsertText(LPCTSTR pchInsert, ULONG cchInsert)
{
    PerfDbgLog1(tagHtmPre, this, "+CHtmPre::InsertText (cch=%ld)", cchInsert);

    HRESULT hr;
    BOOL fCountSrc = FALSE;

    Assert(_cSuspended); // must be called between Suspend and Resume

    // Capture the source only if this document was created with
    // document.open() and the write occurs at the top level.
    // We don't want to capture the source generated as
    // a product of running inline scripts.

    if (_pHtmInfo->IsOpened() && _cSuspended == 1)
    {
        hr = THR(_pHtmInfo->OnSource((BYTE*)pchInsert, cchInsert * sizeof(TCHAR)));
        if (hr)
            goto Cleanup;

        fCountSrc = TRUE;
    }

    // push buffer
    if (_fSuspend)
    {
        hr = THR(SaveBuffer());
        if (hr)
            goto Cleanup;
        _fSuspend = FALSE;
    }

    hr = THR(MakeRoomForChars(cchInsert));
    if (hr)
        goto Cleanup;

    memcpy(_pchEnd, pchInsert, cchInsert * sizeof(TCHAR));

    cchInsert -= PreprocessBuffer(cchInsert);

    if (fCountSrc)
    {
        _ulCharsEnd += cchInsert;
        _ulCharsUncounted = 0;
        _fCount = 1;
        if (cchInsert)
            IGNORE_HR(OutputDocSize());
    }
    else
    {
        _ulCharsUncounted += cchInsert;
        _fCount = 0;
    }

Cleanup:
    PerfDbgLog1(tagHtmPre, this, "-CHtmPre::InsertText (hr=%lX)", hr);
    RRETURN(hr);

}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::DuplicateTextAtStart
//
//  Synopsis:   Inserts text directly into the preparser.  
//              Similar in concept to InsertText, but with some
//              key differences.  This function must be called from the preparse.
//              The text it inserts into the stream is always the text
//              starting at _pchStart.  This is also where the text
//              is inserted.  e.g.
//              if _pchStart points to "<b>foo bar baz", and
//              DuplicateTextAtStart is called with cch of 3, then
//              the stream will then look like "<b><b>foo bar baz"
//              with _pchStart pointing at the second <b>, having been
//              advanced 3, as will all the other stream pointers.
//
//              ** NOTE ** that since this involves copying
//              of buffers around, _pchStart and _pch and such
//              might get changed by this command.  
//          
//-------------------------------------------------------------------------
HRESULT
CHtmPre::DuplicateTextAtStart(ULONG cchInsert)
{
    HRESULT hr;

    PerfDbgLog1(tagHtmPre, this, "+CHtmPre::InsertText (cch=%ld)", cchInsert);

    Assert( cchInsert );

    hr = THR(MakeRoomForChars(cchInsert));
    if (hr)
        goto Cleanup;

    // Move the old stuff forward to make room.  The stuff left behind
    // is exactly what we wanted to copy.
    memmove(_pchStart + cchInsert, _pchStart, (_pchEnd - _pchStart) * sizeof(TCHAR) );

    _pch        += cchInsert;
    _pchStart   += cchInsert;
    _pchAscii   += cchInsert;
    _pchWord    += cchInsert;
    _pchEnd     += cchInsert;
    *_pchEnd    = _T('\0');

Cleanup:
    PerfDbgLog1(tagHtmPre, this, "-CHtmPre::InsertText (hr=%lX)", hr);
    RRETURN(hr);

}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::TokenizeText
//
//  Synopsis:   Tokenizes text previously inserted by InsertText, used
//              by implementation of document.write
//
//  Threading:  Called on the script thread.
//
//              Must be called between Suspend() and Resume(), after
//              InsertText().
//
//-------------------------------------------------------------------------
HRESULT
CHtmPre::TokenizeText(BOOL *pfEmpty)
{
    PerfDbgLog(tagHtmPre, this, "+CHtmPre::TokenizeText");

    HRESULT hr;

    Assert(_cSuspended);// Must be called between Suspend and Resume
    Assert(!_fSuspend); // InsertText should have cleared _fSuspend

    *pfEmpty = (_pch == _pchEnd);

    if (*pfEmpty)
        return(S_OK);

    hr = THR_NOTRACE(Tokenize());

    if (hr == E_PENDING)
    {
        Assert(_fSuspend);
        hr = S_OK;

        // Flush the constructed but not signalled tag now that the state machine is in a clean
        // state and can tolerate being re-entered.

        _pHtmTagStm->WriteTagEnd();
        _pHtmTagStm->Signal();
    }
    else
    {
        Assert(hr || _pch == _pchEnd);

        if (_pch != _pchEnd)
            *pfEmpty = TRUE;    // Defensive: break infinite loop
    }

    if (hr)
        goto Cleanup;

Cleanup:
    PerfDbgLog2(tagHtmPre, this, "-CHtmPre::TokenizeText (*pfEmpty=%s,hr=%lX)",
        *pfEmpty, hr);
    RRETURN(hr);
}


//+------------------------------------------------------------------------
//
//  Function:   ProcessValueEntities
//
//  Synopsis:   Used to process a value string in place (may shrink).
//              Turns entities into unicode chars, and truncates on \0.
//
//  Arguments:  pchValue = the beginning of the value string (not incl ")
//              pcch[in] = the initial size of the value string
//                  [out]= the final size
//
//-------------------------------------------------------------------------

#ifndef NO_UTF16
TCHAR *
WriteNonBMPXChar(TCHAR * p, XCHAR ch)
{
    *p++ = HighSurrogateCharFromUcs4(ch);
    *p++ = LowSurrogateCharFromUcs4(ch);

    return p;
}

inline TCHAR *
WriteXChar(TCHAR * p, XCHAR ch)
{
    if (ch < 0x10000)
    {
        *p++ = ch;
    }
    else
    {
        p = WriteNonBMPXChar(p,ch);
    }

    return p;
}
#else
inline TCHAR *
WriteXChar(TCHAR * p, XCHAR ch)
{
    *p++ = ch;
    return p;
}
#endif

void
ProcessValueEntities(TCHAR *pchValue, ULONG *pcch)
{
    TCHAR *pch      = pchValue;
    TCHAR *pchEnd   = pchValue + *pcch;
    TCHAR *pchTo;
    TCHAR *pchWord;
    TCHAR ch        = _T(' ');
    XCHAR chEnt;

    // fast scan to do nothing if there are no special chars
    while (pch < pchEnd)
    {
        ch = *pch;
        if (!ch || ch=='&')
            break;
        pch++;
    }

    pchTo = pch;

    // mini entity scanner (could be leaner)
    while (ch && pch < pchEnd)
    {
        // entity; copy &
        *(pchTo++) = ch;

        ch = *(++pch);

        chEnt = 0;

        // numbered or hex entity
        if (ch == '#')
        {
            *(pchTo++) = ch;
            ch = *(++pch);

            // hex entity
            if(ch == 'X' || ch == 'x')
            {
                ch = *(++pch);
                pchWord = pch;
                while (pch < pchEnd && ISHEX(ch))
                    ch = *(++pch);
                chEnt = EntityChFromHex(pchWord, PTR_DIFF(pch, pchWord));
                if (chEnt)
                {
                    pchTo = WriteXChar(pchTo-2, chEnt);
                }
                else
                {
                    ch = *(pch = pchWord);
                }
            }
            // numbered entity
            else
            {
                pchWord = pch;
                while (pch < pchEnd && ISDIGIT(ch))
                    ch = *(++pch);
                chEnt = EntityChFromNumber(pchWord, PTR_DIFF(pch, pchWord));
                if (chEnt)
                {
                    pchTo = WriteXChar(pchTo-2, chEnt);
                }
                else
                {
                    ch = *(pch = pchWord);
                }
            }
        }

        // named entity
        else
        {
            pchWord = pch;

            do
            {
                pch++;
            } while (pch <= pchEnd && PTR_DIFF(pch, pchWord) < MAXENTYLEN && ISENTYC(*pch));

            // Fix for IE5 10370: require non-alphanum or end-of-value to terminate all named entities
            if (pch == pchEnd || !ISENTYC(*pch))
            {
                chEnt = EntityChFromName(pchWord, PTR_DIFF(pch, pchWord), HashString(pchWord, PTR_DIFF(pch, pchWord), 0));

#ifndef NO_UTF16
                AssertSz(chEnt < 0x10000, "Should be no non-BMP named entities.");
#endif

                // Fix for BUG 31357: require ';' for named entities not in the HTML1 set
                if (!IS_HTML1_ENTITY_CHAR(chEnt) && (pch > pchEnd || *pch != _T(';')))
                {
                    chEnt = 0;
                }
            }

            if (chEnt)
            {
                *(pchTo-1) = chEnt;
            }
            else
            {
                pch = pchWord;
            }

            ch = *pch;
        }

        // semicolon
        if (chEnt && pch < pchEnd && ch==';')
            pch++;

        // copy chars up to next special char
        while (pch < pchEnd)
        {
            ch = *pch;
            if (!ch || ch=='&')
                break;
            pch++;
            *(pchTo++) = ch;
        }
    }

    *pcch = PTR_DIFF(pchTo, pchValue);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::GoIntoPlaintextMode
//
//  Synopsis:   Insert an XMP into the stream and go into plaintext mode.
//
//-------------------------------------------------------------------------
HRESULT
CHtmPre::GoIntoPlaintextMode()
{
    PerfDbgLog(tagHtmPre, this, "+CHtmPre::GoIntoPlaintextMode");

    HRESULT hr;

    // Dump out an <XMP> tag

    hr = THR(_pHtmTagStm->WriteTag(ETAG_PRE));
    if (hr)
        goto Cleanup;

    // Tell the tokenizer we are in a plaintext mode that will never end
    _state = TS_PLAINTEXT;

    _pHtmTagStm->Signal();

Cleanup:
    PerfDbgLog(tagHtmPre, this, "-CHtmPre::GoIntoPlaintextMode");
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::DoTokenizeOneTag (OutputTag)
//
//  Synopsis:   Tokenizes a single tag, then if successful, processes
//              name and attribute strings in place, then sends
//              then downstream.
//
//              Tag starts at _pchStart and runs to _pch.
//
//              Returns S_FALSE if tag could not be processed as markup
//              so that the tokenizer can roll back and reprocess as text.
//
//-------------------------------------------------------------------------
HRESULT
CHtmPre::DoTokenizeOneTag(TCHAR *pchStart, ULONG cch, CHtmTagStm *pHts, CHtmPre *pHtmPre, ULONG ulLine, ULONG ulOff, ULONG fCount, DWORD *potCode)
{
    //
    // ** NOTE ** if you make any local variables which point into the
    // data stream here (like pch, pchLimit, pchTagName), you'll
    // have to update them after the call to SaveSource further down.
    //

    TCHAR *pch = pchStart;
    TCHAR *pchLimit = pch + cch - 1;
    TCHAR ch;
    CHtmTag * pht;
    CHtmTag::CAttr *pAttr;
    BOOL fEnd = FALSE;
    TCHAR * pchTagName;
    UINT cchTagName;
    ELEMENT_TAG etag;
    int c;
    HRESULT hr = S_OK;
    BOOL fSlowProcess;
    BOOL fDerived = FALSE;

    BOOL fNSQualified = FALSE;
    TCHAR * pchTagNameUnqualified = NULL;
    BOOL fXML = pHtmPre ? pHtmPre->_fXML : FALSE;
    BOOL fSkip;

    BOOL fDelayedRejectNestedLiteral = FALSE;
    TCHAR * pchBuff = NULL;
    TCHAR * pchForDRNL = NULL;
    
    Assert(cch >= 2);
    Assert(*pch == _T('<'));
    Assert(*pchLimit == _T('>'));
    Assert(!!pHtmPre == !!potCode);

    // '<'
    ch = *(++pch);

    // tag name, possible /
    if (ch == _T('/'))
    {
        fEnd = TRUE;
        ch = *(++pch);
    }

    pchTagName = pch;

    // scan to end of tag name (allow ':'-s in the name)
    while (ISNAMCH(ch))
    {
        ch = *(++pch);
        if (fXML && ch == _T(':') && !fNSQualified)
        {
            pchTagNameUnqualified = pch + 1;
            fNSQualified = TRUE;
        }   
    }

    cchTagName = pch - pchTagName;

    if (fXML && !fNSQualified)
        etag = ETAG_GENERIC;
    else
    {
        if (fXML && fNSQualified && 0 == StrCmpNIC(pchTagName, _T("html:"), 5))
        {
            pchTagName = pchTagNameUnqualified;
            cchTagName = pch - pchTagNameUnqualified;
        }
        etag = EtagFromName(pchTagName, cchTagName);
    }
    
    if (pHtmPre)
    {
        BOOL fLiteralMatch = FALSE;

        // check if the tag is known to be generic
        if (!etag)
        {
            if (    (   ETAG_GENERIC_LITERAL == pHtmPre->_etagLiteral 
                     || ETAG_GENERIC_NESTED_LITERAL == pHtmPre->_etagLiteral ) 
                 && pHtmPre->_cstrLiteral.Length() == cchTagName
                 && 0 == StrCmpNIC(pHtmPre->_cstrLiteral, pchTagName, cchTagName ) )
            {
                etag = pHtmPre->_etagLiteral;
                fLiteralMatch = TRUE;   // Generic etag matched & so did tag name
            }
            else
            {
                etag = pHtmPre->IsExtendedTag(pchTagName, cchTagName, fEnd, &fDerived);
            }
        }
        else fLiteralMatch = ( etag == pHtmPre->_etagLiteral ); // Known etag match

        // hack for literals: return with OT_REJECT without initializing if etag doesn't match
        if ( pHtmPre->_etagLiteral )
        {
            if( fLiteralMatch )
            {
                if( fEnd )
                    --pHtmPre->_cLiteral;
                else
                {
                    Assert( pHtmPre->_etagLiteral == ETAG_GENERIC_NESTED_LITERAL );

                    ++pHtmPre->_cLiteral;
                    fDelayedRejectNestedLiteral = TRUE;

                    // In order to not slow down the normal tokenizer with a bunch of if's,
                    // we're copying a buffer to tokenize
                    pchForDRNL = pch;
                    pch = (TCHAR *)MemAlloc( Mt(Mem), cch * sizeof( TCHAR ) );
                    if( !pch )
                    {
                        hr = E_OUTOFMEMORY;
                        goto Cleanup;
                    }
                    pchBuff = pch;
                    memcpy( pch, pchForDRNL, cch * sizeof( TCHAR ) );

                    goto ScanTag;
                }
            }

            // Only thing we care about is the last closing tag ( _cLiteral == 0 )
            if( pHtmPre->_cLiteral != 0 )
            {
                *potCode = OT_REJECT;
                return S_OK;
            }
        }

        // hack for object/applet: echo source if needed, before outputting tag
        if (pHtmPre->_etagEchoSourceEnd)
        {
            if (fEnd ? etag == pHtmPre->_etagEchoSourceEnd : pHtmPre->_atagEchoSourceBegin && IsEtagInSet(etag, pHtmPre->_atagEchoSourceBegin))
            {
                // turn off echoing here, and continue...
                pHtmPre->_atagEchoSourceBegin = NULL;
                pHtmPre->_etagEchoSourceEnd = ETAG_NULL;
            }
            else
            {
                // Save source before overwriting it with \0's
                hr = THR(pHtmPre->SaveSource(pchStart, cch));
                if (hr)
                    goto Cleanup;

                Assert(*pchTagName); // Make sure we don't AV.
            }
        }
        *potCode = OT_NORMAL;
    }

    TraceTag((tagToken, "   OutputTag"));

ScanTag:
    hr = THR(pHts->WriteTagBeg(etag, &pht));
    if (hr)
        goto Cleanup;

    if (fEnd)
        pht->SetEnd();

    if (fDerived)
        pht->SetExtendedTag();

    fSlowProcess = FALSE;

    goto VALSPACE;

    // for each attribute-value pair
    while (ch != _T('>') && pht->GetAttrCount() < MAX_ATTR_COUNT)
    {
        Assert(ISATTCH(ch) || ISQUOTE(ch) || ch == _T('='));

        hr = THR(pHts->WriteTagGrow(&pht, &pAttr));
        if (hr)
            goto Cleanup;

        pAttr->_pchName = pch;

    ATTLOOP:
        while (ISATTCH(ch))
            ch = *(++pch);

        if (ISQUOTE(ch))
        {
            // Fix for IE4 bug 44892: replace leading quotes in attribute name with '?'
            // Fix for IE5 bug 26884: replace all quotes in attribute name with '?'
            
            *pch = _T('?');
            ch = *(++pch);
            goto ATTLOOP;
        }

        pAttr->_cchName = pch - pAttr->_pchName;

        // null-terminate attribute name

        *pch = '\0';

        // a=b without spaces is quick

        if (ch == _T('='))
        {
            ch = *(++pch);
            if (ISNONSP(ch))
                goto VALSTART;
            else
                goto EQSPACE;
        }
        
    ATTSPACE:
        while (ISSPACR(ch))
            ch = *(++pch);

        // count line

        Assert(ch != _T('\n') || pch > pchStart);

        if (ch == _T('\r') || ch == _T('\n'))
        {
            if (ch == _T('\r') || *(pch-1) != _T('\r'))
                ulLine += fCount;
            ch = *(++pch);
            goto ATTSPACE;
        }

        // if no = look for next attr
        if (ch != _T('='))
        {
            pAttr->_pchVal  = NULL;
            pAttr->_cchVal  = 0;
            goto ENDATT;
        }

        // eat equals sign
        ch = *(++pch);

        // skip space after equals sign

    EQSPACE:
        while (ISSPACR(ch))
            ch = *(++pch);

        // count line
        Assert(ch != _T('\n') || pch > pchStart);

        if (ch == _T('\r') || ch == _T('\n'))
        {
            if (ch == _T('\r') || *(pch-1) != _T('\r'))
                ulLine += fCount;
            ch = *(++pch);
            goto EQSPACE;
        }

    VALSTART:
    
        // eat quoted value
        if (ISQUOTE(ch))
        {
            TCHAR chQuote = ch;

            // eat leading quote
            ch = *(++pch);

            pAttr->_pchVal = pch;
            pAttr->_ulOffset = ulOff + pch - pchStart;
            pAttr->_ulLine = ulLine;

            // eat quoted value, paying attention to tag limit
            while (pch < pchLimit && ch != chQuote)
            {
                if (ch == _T('&'))
                    fSlowProcess = TRUE;
                ch = *(++pch);
            }

            pAttr->_cchVal = pch - pAttr->_pchVal;

            // null-terminate
            *pch = _T('\0');

            // eat trailing quote
            if (pch < pchLimit)
                ch = *(++pch);
        }

        // eat unquoted value
        else
        {
            pAttr->_pchVal = pch;
            pAttr->_ulOffset = ulOff + (fCount ? pch - pchStart : 0);
            pAttr->_ulLine = ulLine;

        VALLOOP:
            while (ISVALCH(ch))
                ch = *(++pch);

            if (ch == '&')
            {
                fSlowProcess = TRUE;
                ch = *(++pch);
                goto VALLOOP;
            }

            pAttr->_cchVal = pch - pAttr->_pchVal;

            // null-terminate
            *pch = _T('\0');
        }

#if DBG==1
        if (IsTagEnabled(tagNoValues))
        {
            pAttr->_pchVal = NULL;
            pAttr->_cchVal = 0;
            pAttr->_ulOffset = 0;
            pAttr->_ulLine = 0;
        }
        if (IsTagEnabled(tagEmptyValues))
        {
            pAttr->_cchVal = 0;
        }
#endif

        // skip space after value
    VALSPACE:
        while (ISSPACR(ch))
            ch = *(++pch);

        // count line
        Assert(ch != _T('\n') || pch > pchStart);

        if (ch == _T('\r') || ch == _T('\n'))
        {
            if (ch == _T('\r') || *(pch-1) != _T('\r'))
                ulLine += fCount;
            ch = *(++pch);
            goto VALSPACE;
        }

    ENDATT:
        // trailing '/'
        if (ch == _T('/'))
        {
            ch = *(++pch);

            if (ch != _T('>'))
                goto VALSPACE;

            pht->SetEmpty();
        }
    }

    Assert(ch == _T('>') || ch == _T('\0') || pht->GetAttrCount() == MAX_ATTR_COUNT);

    // If we saw a nested begin tag of a nested literal, we need to check if it was empty
    if( fDelayedRejectNestedLiteral )
    {
        Assert( etag == ETAG_GENERIC_NESTED_LITERAL && pHtmPre && pchForDRNL && pchBuff );

        if( pht->IsEmpty() )
            pHtmPre->_cLiteral--;

        pHts->WriteTagAbort();
        MemFree( pchBuff );
        pch = pchForDRNL;

        Assert( pHtmPre->_cLiteral > 0 );
        *potCode = OT_REJECT;
        return S_OK;
    }

    // since we are matching a Netscape quote bug,
    // we may not have consumed all the characters, so count lines
    while (pch < pchLimit)
    {
        if (ch == _T('\r') || (ch == _T('\n') && *(pch-1) != _T('\r')))
            ulLine += fCount;
        ch = *(++pch);
    }

    if (etag == ETAG_SCRIPT && !fEnd)
    {
        // CONSIDER: (alexz) allow derivation from <SCRIPT> tag.
        // Currently this is not possible because of optimizations with CHtmTag:
        // if it has line and offset set, then it can't have pch set.
        Assert(!fDerived);
        pht->SetOffset(ulOff + cch);
        pht->SetLine(ulLine);
    }
    else if (!fDerived && (etag > ETAG_UNKNOWN && etag < ETAG_GENERIC))
    {
        if (pht->GetAttrCount() == 0)
        {
            pht->SetTiny();
        }
        else
        {
            pht->SetPch(NULL);
            pht->SetCch(0);
        }
    }
    else
    {
        pchTagName[cchTagName] = 0;
        pht->SetPch(pchTagName);
        pht->SetCch(cchTagName);
    }

    if (fSlowProcess)
    {
        // flag set means that we possibly have entities in values
        
        c = pht->GetAttrCount();
        
        Assert(c);
        
        // collapse entities and re-null-terminate strings
        for (pAttr = pht->GetAttr(0); c; pAttr++, c--)
        {
            Assert(pAttr->_pchName[pAttr->_cchName] == _T('\0'));

            if (pAttr->_pchVal)
            {
                ProcessValueEntities(pAttr->_pchVal, &(pAttr->_cchVal));
                pAttr->_pchVal[pAttr->_cchVal] = _T('\0');
            }
        }
    }

    // NOTE: (103078) - Calling SpecialToken can do quite a lot of
    // things.  Most of them, we don't want to do if we're filtering out the
    // token (eg, speculative download, ?Imports, etc.).  Only thing right now
    // that we should do is honor the PLAINTEXT tag.
    fSkip = FALSE;
    if (pHtmPre && pHtmPre->_pfnFilterOutputToken != NULL)
    {
        CStringNullTerminator   term(pchTagName + cchTagName);
        CTagNameCracker         c(pchTagName);

        if (!((*pHtmPre->_pfnFilterOutputToken)(c._pchNamespace, c._pchTagName, pht)))
        {
            fSkip = TRUE;
        }
    }
    const CTagDesc *ptd;

    // We shouldn't have been able to get a nested literal w/out a pre.  If we did, we won't convert below
    Assert( pHtmPre || pht->GetTag() != ETAG_GENERIC_NESTED_LITERAL );

    // default next state is TS_TEXT; can be changed by SpecialToken
    if (pHtmPre)
    {
        pHtmPre->_state = TS_TEXT;

        ptd = TagDescFromEtag(etag);

        // Process special tags
        if (ptd)
        {
            // handle ClarisWorks header - end on a recognized tag only
            pHtmPre->_fSuppressLeadingText = FALSE;

            // literal HTML tags
            if (ptd->HasFlag(TAGDESC_LITERALTAG))
            {
                // Only the tokenizer should ever see Nested_Literal
                if( pht->GetTag() == ETAG_GENERIC_NESTED_LITERAL )
                {
                    pht->SetTag( ETAG_GENERIC_LITERAL );
                }

                // NOTE: We only respect literalness and atomic tags with generic tags.  IE6 Bug #22727
                pHtmPre->_etagLiteral = ( fEnd || (pht->IsEmpty() && pht->GetTag() == ETAG_GENERIC_LITERAL) ) ? ETAG_NULL : etag;
                pHtmPre->_cLiteral = pHtmPre->_etagLiteral != ETAG_NULL;
                if (ptd->HasFlag(TAGDESC_LITERALENT))
                {
                    pHtmPre->_fLiteralEnt = !( fEnd || pht->IsEmpty() );
                    if (fEnd || pht->IsEmpty() )
                        pHtmPre->_cstrLiteral.Free();
                    else
                        pHtmPre->_cstrLiteral.Set(pchTagName, cchTagName);
                }
            }

            // other special tags
            if (ptd->HasFlag(TAGDESC_SPECIALTOKEN))
            {
                if( !fSkip || ( pht->GetTag() == ETAG_PLAINTEXT && !pht->IsEnd() ) )
                {
                    hr = THR(pHtmPre->SpecialToken(pht));
                    if (S_FALSE == hr)  // S_FALSE indiciates request to abort emitting the token
                    {
                        pHts->WriteTagAbort();
                        hr = S_OK;      // we are ok now 
                        goto Cleanup;
                    }
                    if (hr)
                        goto Cleanup;
                }
            }
        }

        if (pHtmPre->_state == TS_SUSPEND)
        {
            // We are going to be suspending and returning E_PENDING to the toplevel function
            // (either Exec() or TokenizeText()).  They will take responsibility for calling
            // WriteTagEnd() and signalling.

            goto Cleanup;
        }
    }

    if( !fSkip )
    {
        pHts->WriteTagEnd();
    }
    else
    {
        pHts->WriteTagAbort();
    }


Cleanup:

    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::OutputDocSize
//
//  Synopsis:   Outputs the number of character parsed
//
//-------------------------------------------------------------------------
HRESULT
CHtmPre::OutputDocSize( )
{
    Assert(_ulLastCharsSeen <= _ulCharsEnd);

    //
    // If we perform a document.write immediately followed by a
    // document.close, we'll end up calling OutputDocSize twice.
    // In this case, don't send the second ETAG_RAW_DOCSIZE
    // token. (t-chrisr)
    //

    if (_ulLastCharsSeen != _ulCharsEnd)
    {
        _ulLastCharsSeen = _ulCharsEnd;

        TraceTag((tagToken, "   OutputDocSize"));
        RRETURN(THR(_pHtmTagStm->WriteTag(ETAG_RAW_DOCSIZE, _ulCharsEnd, 0)));
    }

    return(S_OK);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::OutputEntity
//
//  Synopsis:   Outputs one-char entity, from _pchStart to _pch.
//
//-------------------------------------------------------------------------
HRESULT
CHtmPre::OutputEntity(TCHAR *pchStart, ULONG cch, XCHAR chEnt)
{
    HRESULT hr;
    
    TraceTag((tagToken, "   OutputEntity"));
    
    if (_etagEchoSourceEnd)
    {
        // Save entity before overwriting it with chEnt
        hr = THR(SaveSource(pchStart, cch));
        if (hr)
            goto Cleanup;
    }

#ifndef NO_UTF16
    if (chEnt < 0x10000)
    {
        // overwrite '&'
        *pchStart = chEnt;

        hr = THR(_pHtmTagStm->WriteTag(ETAG_RAW_TEXT, pchStart, 1, !!(chEnt < 0x80) ));
    }
    else
    {
        Assert(cch >= 2);

        // convert non-BMP char in to surrogate pair

        pchStart[0] = HighSurrogateCharFromUcs4(chEnt);
        pchStart[1] = LowSurrogateCharFromUcs4(chEnt);

        hr = THR(_pHtmTagStm->WriteTag(ETAG_RAW_TEXT, pchStart, 2, FALSE ));
    }
#else
    // overwrite '&'
    *pchStart = chEnt;

    hr = THR(_pHtmTagStm->WriteTag(ETAG_RAW_TEXT, pchStart, 1, !!(chEnt < 0x80) ));
#endif

Cleanup:
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::EntityChFromNumber
//
//  Synopsis:   Digits->tchar, or '?' if too many digits
//
//-------------------------------------------------------------------------
XCHAR
EntityChFromNumber(TCHAR *pchWord, ULONG cch)
{
    XCHAR ch = XCHAR('?');

#ifndef NO_UTF16
    if (cch <= 7)
#else
    if (cch <= 5)
#endif
    {
        TCHAR   ach[8];
        int     i;

        // The W3C spec has declared that all numerically encoded entities
        // should be treated as Unicode.  For the range 160-255, this is
        // exactly the same as Latin-1 (Windows-1252).  Unicode, however,
        // does not define glyphs for the range 128-159 (they are control
        // characters.)  For maximum compatibility, we will treat those
        // characters also as Latin-1.

        _tcsncpy(ach, pchWord, cch);
        ach[cch]=_T('\0');
        i = StrToInt(ach);

#ifndef NO_UTF16
        if (i < 0x10000)
        {
#endif
            if (InRange(TCHAR(i), 0x80, 0x9f))
            {
                ch = g_achLatin1MappingInUnicodeControlArea[i-0x80];
            }
            else if (IsValidWideChar(TCHAR(i)))
            {
                // Exclude the Private Use Area, so as to not confuse
                // the post-parser.

                ch = XCHAR(i);
            }
#ifndef NO_UTF16
        }
        else if (i < 0x110000)
        {
            ch = XCHAR(i);
        }
#endif
    }
    return ch;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::EntityChFromHex
//
//  Synopsis:   Hex->tchar, or '?' if too many digits
//
//-------------------------------------------------------------------------
XCHAR
EntityChFromHex(TCHAR *pchWord, ULONG cch)
{
    XCHAR ch = XCHAR('?');

#ifndef NO_UTF16
    if (cch <= 6)
#else
    if (cch <= 4)
#endif
    {
        // initialize the string so hex value can be evaluated by wcstol()
        TCHAR   ach[9] = _T("0x");
        TCHAR*  pEnd;
        int     i;

        // The W3C spec has declared that all hex encoded entities
        // should be treated as Unicode.  For the range 0xA0-0xFF, this is
        // exactly the same as Latin-1 (Windows-1252).  Unicode, however,
        // does not define glyphs for the range 0x80-0x9F (they are control
        // characters.)  For maximum compatibility, we will also treat those
        // characters as Latin-1.

        _tcsncpy(ach+2, pchWord, cch);
        ach[cch+2]=_T('\0');
        // convert the hex string (base 16)
        i=(int) wcstol(ach, &pEnd, 16);

#ifndef NO_UTF16
        if (i < 0x10000)
        {
#endif
            if (InRange(TCHAR(i), 0x80, 0x9f))
            {
                ch = g_achLatin1MappingInUnicodeControlArea[i-0x80];
            }
            else if (IsValidWideChar(TCHAR(i)))
            {
                // Exclude the Private Use Area, so as to not confuse
                // the post-parser.
                ch = XCHAR(i);
            }
#ifndef NO_UTF16
        }
        else if (i < 0x110000)
        {
            ch = XCHAR(i);
        }
#endif
    }
    return ch;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::OutputComment
//
//  Synopsis:   Outputs a comment.  The comment lies between _pchStart and _pch.
//
//-------------------------------------------------------------------------
HRESULT
CHtmPre::OutputComment(TCHAR *pch, ULONG cch)
{
    HRESULT hr;
    
    // Handle ClarisWorks header
    _fSuppressLeadingText = FALSE;

    TraceTag((tagToken, "   OutputComment"));
    
    if (_etagEchoSourceEnd)
    {
        // Save comment text if needed
        hr = THR(SaveSource(pch, cch));
        if (hr)
            goto Cleanup;
    }

    hr = THR(_pHtmTagStm->WriteTag(ETAG_RAW_COMMENT, pch, cch, FALSE));

Cleanup:
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::OutputConditional
//
//  Synopsis:   Outputs a conditional comment.  The current behavior is
//              to throw away the text and output nothing.
//
//-------------------------------------------------------------------------
HRESULT
CHtmPre::OutputConditional(TCHAR *pch, ULONG cch, CONDVAL val)
{
    HRESULT hr = S_OK;
    
    // Handle ClarisWorks header
    _fSuppressLeadingText = FALSE;

    TraceTag((tagToken, "   OutputConditional"));
    
    if (_etagEchoSourceEnd)
    {
        // Save comment text if needed
        hr = THR(SaveSource(pch, cch));
        if (hr)
            goto Cleanup;
    }

#ifdef CLIENT_SIDE_INCLUDE_FEATURE
    if (val == COND_INCLUDE) 
    {
        // the case for <![include "http://foobar/..."]>
        CHtmTag * pht;

        hr = THR(_pHtmTagStm->WriteTagBeg(ETAG_RAW_INCLUDE, &pht));

        pht->SetPch(pch);
        pht->SetCch(cch);
    }
    else 
#endif
    {
        hr = THR(_pHtmTagStm->WriteTag(ETAG_RAW_TEXTFRAG, pch, cch, FALSE));
    }

Cleanup:
    RRETURN(hr);
}
//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::OutputEof
//
//  Synopsis:   Outputs an EOF into the stmchan
//
//-------------------------------------------------------------------------
void
CHtmPre::OutputEof(HRESULT hr)
{
    TraceTag((tagToken, "   OutputEof"));
    _pHtmInfo->OnBindResult(_pDwnBindData->GetBindResult());
    _pHtmTagStm->WriteEof(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::SaveSource
//
//  Synopsis:   Sends a token containing the original source.
//              This token exists from _pchStart to _pch.
//
//              ** NOTE ** that since this involves copying
//              of buffers around, _pchStart and _pch and such
//              might get changed by this command.  Any local
//              copies of these variables will have to be re-synced
//              after this call.  pdpchShift returns the amount
//              that the buffer got moved.  You'll have to add this
//              value to all your local pointers after the call to save source.
//              pdpchShift can be NULL.
//
//-------------------------------------------------------------------------
HRESULT
CHtmPre::SaveSource(TCHAR *pch, ULONG cch)
{
    HRESULT hr = S_OK;
    CHtmTag *pht;

    hr = THR(_pHtmTagStm->WriteSource(pch, cch));
    if (hr) 
        goto Cleanup;

    hr = THR(_pHtmTagStm->WriteTagBeg(ETAG_RAW_SOURCE, &pht));
    if (hr)
        goto Cleanup;

    pht->SetHtmTagStm(_pHtmTagStm);
    pht->SetSourceCch(cch);

    _pHtmTagStm->WriteTagEnd();

Cleanup:
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::SpecialToken
//
//  Synopsis:   Used to do special things like kick off downloads,
//              track the base tag, suspend on script tags, etc.
//
//              Called only on tags with the TAGDESC_SPECIALTOKEN flag.
//
//              Called right before CMD_ENDTOKEN is written by OutputTag.
//              _aAttr holds all the attributes and values, and
//              _fEndTag indicates an end tag.
//
//              May write hidden values to the postchan and change _state.
//
//  Arguments:  etag     = the tag
//
//-------------------------------------------------------------------------
extern const ELEMENT_TAG s_atagAppletObject[];
extern const ELEMENT_TAG s_atagIframe[];

HRESULT
CHtmPre::SpecialToken(CHtmTag *pht)
{
    PerfDbgLog2(tagHtmPre, this, "+CHtmPre::SpecialToken <%s%ls>",
        pht->IsEnd() ? "/" : "", NameFromEtag(pht->GetTag()));

    HRESULT hr = S_OK;
    CHtmTag::CAttr *pAttr;

    if (pht->IsEnd())
    {
        switch (pht->GetTag())
        {
        case ETAG_SCRIPT:
            if (_fScriptDefer)
            {
                // if DEFER attribute present, set a bit and don't suspend the preparser
                pht->SetDefer();
            }
            else
            {
                // otherwise, suspend preparser
                _state = TS_SUSPEND;
            }
            break;

        case ETAG_OBJECT:
        case ETAG_APPLET:
        case ETAG_IFRAME:
        case ETAG_NOFRAMES:
        case ETAG_NOSCRIPT:
        case ETAG_NOEMBED:

            // When we see the end tag for any of these, we'll start speculative download again
            
            if (0 != _cDownloadSupression)
                _cDownloadSupression--;

            break;

#if DBG==1
        case ETAG_RAW_RESOLVE:
            AssertSz(0, "ETAG_RAW_RESOLVE should never be end tag");
            break;
#endif
        }
    }
    else
    {
        switch (pht->GetTag())
        {
        case ETAG_HTML:
            RegisterHtmlTagNamespaces(pht);
            break;

        case ETAG_RAW_XMLNAMESPACE:
        case ETAG_RAW_EXTENDEDTAG:
        case ETAG_RAW_RESOLVE:
            _state = TS_SUSPEND;
            break;

        case ETAG_SCRIPT:

            pAttr = pht->AttrFromName(_T("DEFER"));
            _fScriptDefer = (pAttr && !pAttr->_cchVal);

            // grab SRC bits for downloaded script
            pAttr = pht->AttrFromName(_T("SRC"));
            if (!pAttr)
                break;
            hr = THR(AddDwnCtx(DWNCTX_BITS, pAttr->_pchVal, pAttr->_cchVal, NULL, PROGSINK_CLASS_CONTROL));
            if (hr)
                goto Cleanup;

            break;

        case ETAG_PLAINTEXT:
            _state = TS_PLAINTEXT;
            break;

        case ETAG_BASE:
            // deal with base href change

            pAttr = pht->AttrFromName(_T("HREF"));
            if (!pAttr)
                break;

            hr = SetUrlDefaultScheme(pAttr->_pchVal, &_cstrBase);
            if (hr)
                goto Cleanup;

            if (_pInetSess && !CanPrefetchWithScheme(_cstrBase))
            {
                ClearInterface(&_pInetSess);
            }

            break;

        case ETAG_BODY:
        case ETAG_TABLE:
            // Prevent any palette info from sneaking in once an image is found.
            // This ensures that all images for this DwnDoc will get the same palette
            TraceTag((tagPalette, "Found an image tag, palette meta will no longer be accepted"));
            _pDwnDoc->PreventAuthorPalette();

            if (!(_pDwnDoc->GetLoadf() & DLCTL_DLIMAGES))
                break;

            pAttr = pht->AttrFromName(_T("BACKGROUND"));
            if (!pAttr)
                break;
            hr = THR(AddDwnCtx(DWNCTX_IMG, pAttr->_pchVal, pAttr->_cchVal));
            if (hr)
                goto Cleanup;
            break;

        case ETAG_INPUT:

            // nothing special if type!=image
            pAttr = pht->AttrFromName(_T("TYPE"));
            if (!pAttr)
                break;
            if (_tcsnicmp(_T("IMAGE"),-1, pAttr->_pchVal, pAttr->_cchVal))
                break;

            // fallthrough to ETAG_IMG ...

        case ETAG_IMG:

            // Prevent any palette info from sneaking in once an image is found.
            // This ensures that all images for this DwnDoc will get the same palette
            TraceTag((tagPalette, "Found an image tag, palette meta will no longer be accepted"));
            _pDwnDoc->PreventAuthorPalette();

            if (!(_pDwnDoc->GetLoadf() & DLCTL_DLIMAGES))
                break;

            // Supress speculative downloads if special-context count is nonzero
            
            if (_cDownloadSupression != 0)
                break;

            pAttr = pht->AttrFromName(_T("SRC"));
            if (!pAttr)
            {
                pAttr = pht->AttrFromName(_T("LOWSRC"));
                if (!pAttr)
                    break;
            }
            hr = THR(AddDwnCtx(DWNCTX_IMG, pAttr->_pchVal, pAttr->_cchVal));
            if (hr)
                goto Cleanup;
            break;

        case ETAG_BGSOUND:

            // Supress speculative downloads if special-context count is nonzero
            
            if (_cDownloadSupression != 0)
                break;

            if (!(_pDwnDoc->GetLoadf() & DLCTL_BGSOUNDS))
                break;

            pAttr = pht->AttrFromName(_T("SRC"));
            if (!pAttr)
                break;
            hr = THR(AddDwnCtx(DWNCTX_FILE, pAttr->_pchVal, pAttr->_cchVal));
            if (hr)
                goto Cleanup;
            break;

        case ETAG_LINK:

            // Supress speculative downloads if special-context count is nonzero
            
            if (_cDownloadSupression != 0)
                break;

            pAttr = pht->AttrFromName(_T("REL"));
            if (!pAttr)
                break;

            // if stylesheet
            if (0 == _tcsnicmp(pAttr->_pchVal, pAttr->_cchVal, _T("STYLESHEET"), 10))
            {
                //
                // try to launch download
                //

                pAttr = pht->AttrFromName(_T("HREF"));
                if (!pAttr)
                    break;

                hr = THR(AddDwnCtx(DWNCTX_CSS, pAttr->_pchVal, pAttr->_cchVal));
                if (hr)
                    goto Cleanup;
            }

            break;

        case ETAG_META:

            // handle cookies
            hr = THR(HandleMETA(pht));
            if (hr)
                goto Cleanup;
            break;

#ifdef NEVER
        case ETAG_FRAME:
            if (_pDwnDoc->GetLoadf() & DLCTL_NO_FRAMEDOWNLOAD)
                break;

            // Supress speculative downloads if special-context count is nonzero
            
            if (_cDownloadSupression != 0)
                break;

            pAttr = pht->AttrFromName(_T("SRC"));
            if (!pAttr)
                break;

            hr = THR(AddDwnCtx(DWNCTX_HTM, pAttr->_pchVal, pAttr->_cchVal));
            if (hr)
                goto Cleanup;
            break;
#endif

        case ETAG_FRAMESET:

            // Supress all speculative downloads after the first FRAMESET tag is seen
            
            ClearInterface(&_pInetSess);
            break;

        case ETAG_OBJECT:
        case ETAG_APPLET:
        case ETAG_IFRAME:
        
            // EchoSource mode starts now, and will stop if we see a begin <OBJECT> or <APPLET>
            // (after which it will start again)
            
            if (!_etagEchoSourceEnd)
                _atagEchoSourceBegin = (pht->GetTag() == ETAG_IFRAME ? s_atagIframe : s_atagAppletObject);

            // fall through
            
        case ETAG_NOEMBED:
        case ETAG_NOFRAMES:
        case ETAG_NOSCRIPT:
        
            // EchoSource mode starts now, and will stop if we see a end tag corresponding to the begin tag
            
            if (!_etagEchoSourceEnd)
                _etagEchoSourceEnd = pht->GetTag();

            // fall through some more

        
            // Inside these tags we supress speculative download.
            // Note that even if we guess wrong and supress download when we shouldn't, the
            // download will be kicked off again on the UI thread. (And if we don't supress
            // download when we should have, the UI thread will kill the extra download.)
            
            _cDownloadSupression++;
            
            break;
        }
    }
Cleanup:
    PerfDbgLog1(tagHtmPre, this, "-CHtmPre::SpecialToken (hr=%lX)", hr);
    RRETURN1(hr, S_FALSE);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::AddDwnCtx
//
//  Synopsis:   Downloads a specific type of URL, stores the load ctx
//              in a slot, and writes a hidden attribute with the slot
//              number into the stream.
//
//-------------------------------------------------------------------------
HRESULT
CHtmPre::AddDwnCtx(UINT dt, LPCTSTR pchUrl, int cchUrl,
    CDwnBindData * pDwnBindData, DWORD dwProgClass)
{
    TCHAR       ach[pdlUrlLen];
    ULONG       cch;
    TCHAR *     pchUrlCombined = ach;
    CDwnCtx *   pDwnCtx = NULL;
    BOOL        fLoad   = TRUE;
    DWNLOADINFO dli     = { 0 };
    HRESULT     hr      = S_OK;

    Assert(dt == DWNCTX_IMG || dt == DWNCTX_BITS || dt == DWNCTX_FILE || dt == DWNCTX_CSS);

    if (!pDwnBindData && !_pInetSess)
        goto Cleanup;

    #if DBG==1
    if (IsTagEnabled(tagHtmPreNoAutoLoad))
        goto Cleanup;
    #endif

    #if DBG==1 || defined(PERFTAGS)
    if (IsPerfDbgEnabled(tagDwnBindSlow))
        goto Cleanup;
    #endif

    #if DBG==1 || defined(PERFTAGS)
    {
        TCHAR chT = cchUrl ? pchUrl[cchUrl] : 0;
        if (cchUrl) *(TCHAR *)(pchUrl + cchUrl) = 0;
        PerfDbgLog3(tagHtmPre, this, "CHtmPre::AddDwnCtx %s %ls %s",
            dt == DWNCTX_IMG ? "DWNCTX_IMG" :
            dt == DWNCTX_BITS ? "DWNCTX_BITS" :
            dt == DWNCTX_CSS ? "DWNCTX_CSS" :
            dt == DWNCTX_FILE ? "DWNCTX_FILE" : "DWNCTX_???",
            cchUrl ? pchUrl : g_Zero.ach,
            pDwnBindData ? "(via CDwnBindData)" : "");
        if (cchUrl) *(TCHAR *)(pchUrl + cchUrl) = chT;
    }
    #endif

    // Temporarily terminate the URL (guaranteed to have enough space)

    if (cchUrl == 0)
    {
        ach[0] = 0;
    }
    else if (pDwnBindData)
    {
        if (cchUrl > ARRAY_SIZE(ach) - 1)
            cchUrl = ARRAY_SIZE(ach) - 1;
        memcpy(ach, pchUrl, cchUrl * sizeof(TCHAR));
        ach[cchUrl] = 0;
    }
    else
    {
        TCHAR * pchBase = _cstrBase ? _cstrBase : _cstrDocUrl;

        Assert(CanPrefetchWithScheme(pchBase));

        TCHAR ch = pchUrl[cchUrl];
        *(TCHAR *)(pchUrl + cchUrl) = 0;

        hr = THR(CoInternetCombineUrl(pchBase, pchUrl,
            URL_ESCAPE_SPACES_ONLY | URL_BROWSER_MODE,
            ach, ARRAY_SIZE(ach), &cch, 0));

        *(TCHAR *)(pchUrl + cchUrl) = ch;

        if (hr || !CanPrefetchWithScheme(ach))
            goto Cleanup;
    }

    dli.pDwnBindData    = pDwnBindData;
    dli.pDwnDoc         = _pDwnDoc;
    dli.pInetSess       = _pInetSess;
    dli.pchUrl          = pchUrlCombined;
    dli.fForceInet      = TRUE;
    dli.dwProgClass     = dwProgClass;
    
    // Since we are in the pre-parser, it's safe to assume that we are in the pending world
    // if we don't have a CDwnBindData
    dli.fPendingRoot    = _pDwnBindData ? _pDwnBindData->GetStartedInPending() : TRUE;

    hr = THR(NewDwnCtx(dt, fLoad, &dli, &pDwnCtx));
    if (hr)
        goto Cleanup;

    if( !( pDwnCtx->GetState() & DWNLOAD_ERROR ) )
    {
        hr = THR(_pHtmLoad->AddDwnCtx(dt, pDwnCtx));
        if (hr)
            goto Cleanup;
    }

    // We suppress errors because we don't want parsing to stop just
    // because we couldn't kick off a speculative download.  Also, we
    // expect some attempts to use InetSess to fail if, for example, it
    // determines that it needs to remap the namespace.  This download
    // will be retried on the UI thread later.

Cleanup:
    if (pDwnCtx)
        pDwnCtx->Release();
    return(S_OK);
}
#ifdef WIN16
#pragma code_seg("htmpre3_TEXT")
#endif

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::HandleMETA
//
//  Synopsis:   META tag handling. This should only process values that
//              affect the current download, like "HTTP-EQUIV=Set-Cookie"
//              and "HTTP-EQUIV=Content-type".  Meta information that does
//              not affect the current download will be processed
//              after the download is complete...
//
//              Added support for the palette tag here so we have the
//              information in time for image decoding (michaelw)
//
//-------------------------------------------------------------------------
HRESULT
CHtmPre::HandleMETA(CHtmTag *pht)
{
    PerfDbgLog(tagHtmPre, this, "+CHtmPre::HandleMETA");

    HRESULT hr = S_OK;
    LPCTSTR pchActualURL;
    CHtmTag::CAttr *pAttrHttpEquiv;
    CHtmTag::CAttr *pAttrName;
    CHtmTag::CAttr *pAttrContent;

    // If the HTTP-EQUIV val is "Set-Cookie", then we want to tell
    // Wininet about the CONTENT val. If the content value contains
    // an equal-sign, it is interpreted as a name-value pair; i.e.,
    // it splits the string at that point and hands the two pieces to
    // InternetSetCookie() distinctly.

    pAttrHttpEquiv = pht->AttrFromName(_T("HTTP-EQUIV"));
    pAttrName      = pht->AttrFromName(_T("NAME"));
    pAttrContent   = pht->AttrFromName(_T("CONTENT"));

    if (pAttrHttpEquiv && pAttrContent &&
        !_tcsnicmp(pAttrHttpEquiv->_pchVal, pAttrHttpEquiv->_cchVal, _T("Set-Cookie"), -1))
    {
        pchActualURL = _pHtmLoad->GetUrl();
        // If there's no URL for this doc, there will be no cache
        // entry to tweak (?)
        if (pchActualURL && *pchActualURL)
        {
            CStr cstrCookie;
            hr = cstrCookie.Set(pAttrContent->_pchVal, pAttrContent->_cchVal);
            if (hr)
                goto Cleanup;

            // note that "name=value" is sent as third argument, and second arg is NULL
            CMarkup::MarkupCookieStruct * pmcs = new CMarkup::MarkupCookieStruct;            
            MemAllocString(Mt(SetCookie), pchActualURL, &(pmcs->lpszUrl));
            pmcs->lpszCookieName = NULL;
            MemAllocString(Mt(SetCookie), cstrCookie, &(pmcs->lpszCookieData));
            pmcs->lpszP3PHeader = NULL;

            // [kusumav] See IE 6 bug 37229 for more details
            // Typically the ownership of the p3pheader is transferred (from CDwnBinddata to CHtmLoad to CMarkup) 
            // so we don't have to copy the same string over and over in memory at each step of the process. By the 
            // time we get to the meta processing in the pre-parser, the ownership has been passed to CHtmLoad.  
            // So the pre-parser (CHtmPre) needs to get it from the CHtmLoad. If the pre-parser takes ownership 
            // of the memory, posts the call to the UI thread and we don't set it in CHtmPost::OnPostStart we could 
            // set script cookies without using a P3P policy. Hence we make a copy here of the header here
            
            // Retrieved the P3P header? Need to do this only once per html markup though we see multiple meta cookie tags
            if (!_fRetrievedP3PHeader)
            {
                if (_pHtmLoad)
                {
                    TCHAR * pchP3PHeader = _pHtmLoad->GetP3PHeader();
                    if (pchP3PHeader && *pchP3PHeader)
                    {
                        MemAllocString(Mt(SetCookie), pchP3PHeader, &(pmcs->lpszP3PHeader));
                    }
                }
                _fRetrievedP3PHeader = TRUE;
            }

            GWPostMethodCallEx(_pHtmLoad->_pMarkup->Doc()->_pts, (void*)_pHtmLoad->_pMarkup, 
                               ONCALL_METHOD(CMarkup, SetCookieOnUIThread, setcookieonuithread),
                               ((DWORD_PTR)pmcs), TRUE, "CMarkup::SetCookieUI");
            goto Cleanup;  // make sure label is referenced
        }
    }
    else if (pAttrHttpEquiv && pAttrContent && !_tcsnicmp(pAttrHttpEquiv->_pchVal, pAttrHttpEquiv->_cchVal, _T("palette"), -1) && _pDwnDoc->WantAuthorPalette())
    {
        TraceTag((tagPalette, "Found a palette meta"));
        _pDwnDoc->SetAuthorColors(pAttrContent->_pchVal, pAttrContent->_cchVal);
    }
    else if (!_fMetaCharsetOverride)
    {
        // Per IE spec, only the first charset setting META tag counts.

        // CONSIDER (johnv) May need Big Endian Unicode support

        if (CP_UNDEFINED == _cpNew && _cp != CP_UCS_2)
        {
            // Per IE spec, handle the following cases:
            //
            // <META CHARSET=XXX>
            // <META HTTP-EQUIV CHARSET=XXX>
            // <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=XXX">
            // <META HTTP-EQUIV="Charset" CONTENT="text/html; charset=XXX"> // IE5 bug 52716

            CHtmTag::CAttr *pAttrCharset = pht->AttrFromName(_T("CHARSET"));

            if (pAttrCharset ||
                (pAttrContent && pAttrHttpEquiv &&
                 (!_tcsnicmp(pAttrHttpEquiv->_pchVal, pAttrHttpEquiv->_cchVal, _T("Content-Type"), -1) ||
                  !_tcsnicmp(pAttrHttpEquiv->_pchVal, pAttrHttpEquiv->_cchVal, _T("Charset"), -1))))
            {
                CHtmTag::CAttr *pAttrArg = pAttrCharset ? pAttrCharset : pAttrContent;
                CODEPAGE cp;
                CStr cstrArg;

                hr = cstrArg.Set(pAttrArg->_pchVal, pAttrArg->_cchVal);
                if (hr)
                    goto Cleanup;

                cp = CodePageFromString( cstrArg, pAttrArg == pAttrContent );

                if (cp != CP_UNDEFINED && cp != _cp)
                {
                    // We shall reencode the buffer when we return to Tokenize().
                    _state = TS_NEWCODEPAGE;
                }

                #if DBG==1 || defined(PERFTAGS)
                if (    cp != CP_UNDEFINED
                    &&  IsPerfDbgEnabled(tagForceSwitchToRestart))
                {
                    _state = TS_NEWCODEPAGE;
                }
                #endif

                // If cp == CP_UNDEFINED, we want to process the next meta tag.
                // Otherwise, skip subsequent tags.
                _cpNew = cp;
            }
        }
    }

    // Add other HTTP-EQUIV value handling here (make sure iHttpEquiv >= 0)

Cleanup:
    PerfDbgLog(tagHtmPre, this, "-CHtmPre::HandleMETA");
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     SetContentTypeFromHeader
//
//  Synopsis:   Found "Content-type:" in the HTTP headers, set prelim
//              codepage for download (may be overridden by META tag in
//              doc)
//
//-------------------------------------------------------------------------

HRESULT
CHtmPre::SetContentTypeFromHeader(LPCTSTR pch)
{
    PerfDbgLog1(tagHtmPre, this, "+CHtmPre::SetContentTypeFromHeader %ls", pch);

    TCHAR       ach[128];
    CStr        cstr;
    TCHAR *     pchT;
    UINT        cch;
    CODEPAGE    cp;
    HRESULT     hr = S_OK;

    // Unfortunately, the charset code needs a writeable string.

    cch = _tcslen(pch);

    if (cch < ARRAY_SIZE(ach) - 1)
    {
        memcpy(ach, pch, (cch + 1) * sizeof(TCHAR));
        pchT = ach;
    }
    else
    {
        hr = THR(cstr.Set(pch));
        if (hr)
            goto Cleanup;

        pchT = cstr;
    }

    cp = CodePageFromString(pchT, TRUE);

    if (cp != CP_UNDEFINED && !_fMetaCharsetOverride)
    {
        // We should be able to just switch now, before the Pre
        //  gets to run.  Make sure to set _cpNew to _cp, not cp,
        //  in case we couldn't handle cp.  _cpNew needs to get set
        //  so that we ignore meta charset tags later on.

        // The FALSE argment means: don't restart, don't suspend
        DoSwitchCodePage(cp, NULL, FALSE);
        _cpNew = _cp;
    }

Cleanup:
    PerfDbgLog1(tagHtmPre, this, "-CHtmPre::SetContentTypeFromHeader (hr=%lX)", hr);
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::SwitchCodePage
//
//  Synopsis:   Switch the current codepage.  Stuffs a CMD_NEWCODEPAGE
//              token into the stream.
//
//-------------------------------------------------------------------------

BOOL
CHtmPre::DoSwitchCodePage(CODEPAGE cp, BOOL *pfNeedRestart, BOOL fRestart)
{
    PerfDbgLog1(tagHtmPre, this, "+CHtmPre::DoSwitchCodePage (cp=%d)", cp);

    // Note that this call is no longer used for really switching the code page
    // because if we switch, we will shut down and reparse. We just use the call
    // to determine if it is possible+necessary to switch (dbau)

    BOOL fSwitched;
    HRESULT hr;

    // cannot switch codepage in mid-fragment when pasting
    if (_fPasting && fRestart)
    {
        if (pfNeedRestart)
            *pfNeedRestart = FALSE;
            
        return FALSE;
    }

    fSwitched = CEncodeReader::ForceSwitchCodePage(cp, pfNeedRestart);

    #if DBG==1 || defined(PERFTAGS)
    if (fRestart && IsPerfDbgEnabled(tagForceSwitchToRestart))
        fSwitched = TRUE;
    else
    #endif
    if (pfNeedRestart)
        fRestart = fRestart && *pfNeedRestart;

    // bugfix: don't propagate switched codepage to document if pasting
    if (_fPasting)
        fSwitched = FALSE;

    // N.B. (johnv) Make sure not to throw a new codepage token into the stream if
    //  we are pasting.
    if (fSwitched)
    {
        // Convert our codepage into a token
        // and then hand it off to the post-processor.
        // N.B. (johnv) _cp can change to something other than cp if
        //  cp is not supported on the system, so be careful to use
        //  that instead.

        CHtmTag * pht;

        hr = THR(_pHtmTagStm->WriteTagBeg(ETAG_RAW_CODEPAGE, &pht));
        if (hr)
            goto Cleanup;

        if (fRestart)
            pht->SetRestart();

        pht->SetCodepage(cp);

        if (!fRestart)
        {
            // If we are not restarting, then this is informational only to the postparser.
            // Otherwise, we are going to be suspending and returning E_PENDING to the
            // toplevel function (either Exec() or TokenizeText()).  They will take responsibility
            // for calling WriteTagEnd() and signalling.

            _pHtmTagStm->WriteTagEnd();
        }


        // Codepage of CDwnDoc need to be updated if codepage of the document is being switched.
        if (_pDwnDoc)
            _pDwnDoc->SetDocCodePage(NavigatableCodePage(cp));
    }

Cleanup:

    // TODO: no error handling!!

    PerfDbgLog1(tagHtmPre, this, "-CHtmPre::DoSwitchCodePage (fSwitched=%s)",
        fSwitched ? "TRUE" : "FALSE");

    return fSwitched;
}
//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::SwitchCodePage (CEncode override)
//
//  Synopsis:   This function overrides the default CEncode implementation.
//              Called from CEncode when it autodetects a codepage change
//              (e.g. when we find a unicode signature in the stream).
//              fDetected -
//              when mlang gets us detection result, unlike a unicode signature, 
//              it is not guaranteed that mlang can detect the codepage at the 
//              beginning of stream so we have to reload the document when the 
//              detected codepage is different from current.
//
//-------------------------------------------------------------------------

BOOL
CHtmPre::SwitchCodePage(CODEPAGE cp, BOOL *pfDifferentEncoding, BOOL fAutoDetected)
{
    BOOL fSwitched  = DoSwitchCodePage(cp, pfDifferentEncoding, fAutoDetected);
    if (fAutoDetected && fSwitched)
    {
       // if this switching is happening because of codepage
       // detection, we need to write out the end tag
       // so we can process codepage tag at the post parser
       _pHtmTagStm->WriteTagEnd();
       _pHtmTagStm->Signal();
       Suspend();
    }
    return fSwitched;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::Read
//
//  Synopsis:   Read from _pDwnBindData
//
//-------------------------------------------------------------------------

HRESULT
CHtmPre::Read()
{
    PerfDbgLog(tagHtmPre, this, "+CHtmPre::Read");

    HRESULT hr;
    unsigned long cbRead;
    unsigned long cbRequest;
    BYTE *pbRead = _pbBufferPtr;

    Assert( _cbBuffer + HTMPRE_BLOCK_SIZE <= _cbBufferMax );
    Assert( _cbNextInsert < 0 || _cbNextInsert >= _cbReadTotal);

    if (_cbNextInsert >= 0)
        cbRequest = min(_cbNextInsert - _cbReadTotal, HTMPRE_BLOCK_SIZE);
    else
        cbRequest = HTMPRE_BLOCK_SIZE;

    hr = THR(_pDwnBindData->Read(pbRead, cbRequest, &cbRead));
    if (hr)
        goto Cleanup;

    hr = THR(_pHtmInfo->OnSource(pbRead, cbRead));
    if (hr)
        goto Cleanup;

    _cbBuffer += cbRead;
    _cbReadTotal += cbRead;
    _pbBufferPtr = _pbBuffer;

    Assert( _cbNextInsert < 0 || _cbNextInsert >= _cbReadTotal);

Cleanup:
    PerfDbgLog4(tagHtmPre, this, "-CHtmPre::Read (cbRead=%ld,cbTotal=%ld,cbBuffer=%ld,hr=%lX)",
        cbRead, _cbReadTotal, _cbBuffer, hr);
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::ReadStream
//
//  Synopsis:   Read from passed in stream
//
//-------------------------------------------------------------------------

HRESULT
CHtmPre::ReadStream(IStream *pstm, BOOL *pfEof)
{
    PerfDbgLog(tagHtmPre, this, "+CHtmPre::Read");

    HRESULT hr;
    unsigned long cbRead;
    unsigned long cbRequest;
    BYTE *pbRead = _pbBufferPtr;

    Assert( _cbBuffer + HTMPRE_BLOCK_SIZE <= _cbBufferMax );
    Assert( _cbNextInsert < 0 || _cbNextInsert >= _cbReadTotal);

    if (_cbNextInsert >= 0)
        cbRequest = min(_cbNextInsert - _cbReadTotal, HTMPRE_BLOCK_SIZE);
    else
        cbRequest = HTMPRE_BLOCK_SIZE;

    hr = THR(pstm->Read(pbRead, cbRequest, &cbRead));
    if (hr)
        goto Cleanup;

    *pfEof = (!cbRead);

    hr = THR(_pHtmInfo->OnSource(pbRead, cbRead));
    if (hr)
        goto Cleanup;

    _cbBuffer += cbRead;
    _cbReadTotal += cbRead;
    _pbBufferPtr = _pbBuffer;

    Assert( _cbNextInsert < 0 || _cbNextInsert >= _cbReadTotal);

Cleanup:
    PerfDbgLog4(tagHtmPre, this, "-CHtmPre::Read (cbRead=%ld,cbTotal=%ld,cbBuffer=%ld,hr=%lX)",
        cbRead, _cbReadTotal, _cbBuffer, hr);
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::AddInsert
//
//  Synopsis:   Adds a token which must be inserted into the token stream
//              before processing beyond the given cb of the input stream
//
//-------------------------------------------------------------------------
HRESULT
CHtmPre::AddInsert(int cb, TOKENINSERTCODE icode)
{
    PerfDbgLog1(tagHtmPre, this, "+CHtmPre::AddInsert %d", icode);

    HRESULT hr = S_OK;

    CInsertMap imap;
    int i;

    Assert(cb >= _cbReadTotal);

    for (i = 0; i < _aryInsert.Size(); i++)
    {
        if (_aryInsert[i]._cb > cb)
            break;
    }

    imap._cb = cb;
    imap._icode = icode;

    hr = THR(_aryInsert.InsertIndirect(i, &imap));
    if (hr)
        goto Cleanup;

    _cbNextInsert = _aryInsert[0]._cb;

Cleanup:
    PerfDbgLog1(tagHtmPre, this, "-CHtmPre::AddInsert (hr=%lX)", hr);
    RRETURN(hr);
}


//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::QueueInserts
//
//  Synopsis:   Notes and queues up insert codes to be inserted after
//              next token
//
//-------------------------------------------------------------------------
void
CHtmPre::QueueInserts()
{
    CInsertMap *pins;
    long c;
    long cbNext = -1;
    
    for (c = _aryInsert.Size(), pins = _aryInsert; c; c -= 1, pins += 1)
    {
        if (pins->_cb > _cbReadTotal)
        {
            cbNext = pins->_cb;
            break;
        }
    }
    
    _cOutputInsert = pins - _aryInsert;
    _cbNextInsert = cbNext;
}


//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::OutputInserts
//
//  Synopsis:   Sends a special token into the token stream, based on
//              the insert code
//
//-------------------------------------------------------------------------
HRESULT
CHtmPre::OutputInserts()
{
    HRESULT hr = S_OK;
    ELEMENT_TAG etag;
    TOKENINSERTCODE icode;
    CHtmTag * pht;
    long i;

    Assert( _cOutputInsert >= 0 );

    if (!_cOutputInsert)
        goto Cleanup;
    
    for ( i = 0 ; i < _cOutputInsert ; i++ )
    {
        icode = _aryInsert[i]._icode;

        switch (icode)
        {
        case TIC_BEGINSEL  : etag = ETAG_RAW_BEGINSEL;  goto DoIt;
        case TIC_ENDSEL    : etag = ETAG_RAW_ENDSEL;

        DoIt:

            hr = THR( _pHtmTagStm->WriteTagBeg( etag, & pht ) );
            
            if (hr)
                goto Cleanup;

            pht->SetTiny();

            _pHtmTagStm->WriteTagEnd();

            break;

        default:
            Assert(0);
        }
    }

    _aryInsert.DeleteMultiple(0, _cOutputInsert - 1);

    _cOutputInsert = 0;

Cleanup:
    RRETURN(hr);
}


//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::InsertImage, public
//
//  Synopsis:   Writes the tokens for a standalone <IMG> tag
//
//-------------------------------------------------------------------------

HRESULT
CHtmPre::InsertImage(LPCTSTR pchUrl, CDwnBindData * pDwnBindData)
{
    PerfDbgLog1(tagHtmPre, this, "+CHtmPre::InsertImage %ls", pchUrl);

    CHtmTag * pht;
    CHtmTag::CAttr * pattr;
    TCHAR * pchBuffer;
    UINT cchUrl = _tcslen(pchUrl);
    HRESULT hr;

    hr = THR(AddDwnCtx(DWNCTX_IMG, pchUrl, cchUrl, pDwnBindData));
    if (hr)
        goto Cleanup;

    hr = THR(_pHtmTagStm->AllocTextBuffer(cchUrl + 1, &pchBuffer));
    if (hr)
        goto Cleanup;

    memcpy(pchBuffer, pchUrl, (cchUrl + 1) * sizeof(TCHAR));

    hr = THR(_pHtmTagStm->WriteTagBeg(ETAG_IMG, &pht));
    if (hr)
        goto Cleanup;

    hr = THR(_pHtmTagStm->WriteTagGrow(&pht, &pattr));
    if (hr)
        goto Cleanup;

    pattr->_pchName = _T("SRC");
    pattr->_cchName = 3;
    pattr->_pchVal = pchBuffer;
    pattr->_cchVal = cchUrl;
    pattr->_ulOffset = 0;
    pattr->_ulLine = 0;

    if( _pDwnDoc->GetCDoc()->_pOptionSettings->fEnableImageResize   // Is option turned on
        && !_pDwnDoc->GetMarkup()->IsPrintMedia()                   // AND we're not printing
        && (_pDwnDoc->GetMarkup() == _pDwnDoc->GetCDoc()->PrimaryMarkup() // AND the markup for which we're downloading is either the doc's primary markup
            || _pDwnDoc->GetMarkup() == _pDwnDoc->GetCDoc()->PendingPrimaryMarkup() // OR the pending primary markup
            )
        && (GetModuleHandle(TEXT("EXPLORER.EXE")) || GetModuleHandle(TEXT("IEXPLORE.EXE"))) // AND we're not some wierd WebOC host
        )
    {

        // set a flag so we know to turn this on later...
         _pDwnDoc->GetCDoc()->_fShouldEnableAutoImageResize = TRUE;
           
    }

    _pHtmTagStm->WriteTagEnd();

    hr = THR(OutputDocSize());
    if (hr)
        goto Cleanup;

    OutputEof(S_OK);

Cleanup:
    PerfDbgLog1(tagHtmPre, this, "-CHtmPre::InsertImage (hr=%lX)", hr);
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPre::SetGenericParse, public
//
//  Synopsis:   Throws the parser into a mode where unqualified tags are considered
//              external
//
//-------------------------------------------------------------------------
void
CHtmPre::SetGenericParse(BOOL fDoGeneric)
{
    if (_pHtmTagStm->TagsWritten() == 0)
        _fXML = fDoGeneric;
}

//+------------------------------------------------------------------------
//
//  Member:
//  [in,out]    fEndCR  Caller state value to indicated if the last character
//                      of previous buffer was a carriage return. On return
//                      set to TRUE if current buffer ends in CR otherwise
//                      set to FALSE.
//  [in]        pch     Pointer to first character of buffer to normalize
//  [in,out]    pchEnd  Pointer to pointer to one past the last character in
//                      the buffer to be normalized. This MUST be a writeable
//                      memory location (for example a string's NULL terminator).
//                      *ppchEnd is assigned to the last character of the
//                      normalized buffer upon return.
//
//  Synopsis:   Advances _pchEnd by cch (assuming cch chars have been put
//              in place already), but first removes embedded \0 chars
//              and does NS-compatable CRLF handling.
//
//              CR   -> CR
//              LF   -> CR
//              CRLF -> CR
//              LFCR -> CRCR
//
//  Returns:    Number of chars by which the buffer was reduced.
//
//
//  NOTE:       **ppchEnd MUST be a writeable memory location (for example a
//              string's NULL terminator).
//
//-------------------------------------------------------------------------

#if DBG != 1
#pragma optimize(SPEED_OPTIMIZE_FLAGS, on)
#endif

int
NormalizerChar(LPTSTR pchStart, LPTSTR * ppchEnd, BOOL *pfAscii)
{
    if (pfAscii)
        *pfAscii = TRUE;

    if (!pchStart || !ppchEnd || !*ppchEnd )
        return 0;

    TCHAR *pch      = pchStart;
    TCHAR *pchLast  = *ppchEnd;
    TCHAR  ch;
    TCHAR *pchTo;

    // null terminate for speed when nothing needs to be done
    *pchLast = _T('\0');

fastscan:

    // Fast scan without copying to find first potentially invalid character.
    // Note that the NULL terminator will stop this loop.

    while (((WORD)(*pch++ - 1)) < 0x007F) ;

    if (pch > pchLast)
        return(0);

    // Nonascii character encountered.
    if (pfAscii)
        *pfAscii = FALSE;

    // Verify that the character really is invalid and not just out-of-range of
    // the fast scanner.

    ch = pch[-1];

    if (ch && IsValidWideChar(ch))
        goto fastscan;

    // Aw nuts, time to start squeezing out the invalid characters

    pchTo = --pch;

    while (pch < pchLast)
    {
        if (ch && IsValidWideChar(ch))
            *pchTo++ = ch;

        ch = *(++pch);
    }

    // null terminate for tokenizer
    *pchTo = _T('\0');

    // advance *ppchEnd
    *ppchEnd = pchTo;

    // return the number of chars by which we shrunk.
    return pchLast - pchTo;
}


//+------------------------------------------------------------------------
//
//  Member:
//  [in,out]    fEndCR  Caller state value to indicated if the last character
//                      of previous buffer was a carriage return. On return
//                      set to TRUE if current buffer ends in CR otherwise
//                      set to FALSE.
//  [in]        pch     Pointer to first character of buffer to normalize
//  [in,out]    pchEnd  Pointer to pointer to one past the last character in
//                      the buffer to be normalized. This MUST be a writeable
//                      memory location (for example a string's NULL terminator).
//                      *ppchEnd is assigned to the last character of the
//                      normalized buffer upon return.
//
//  Synopsis:   Advances _pchEnd by cch (assuming cch chars have been put
//              in place already), but first removes embedded \0 chars
//              and does NS-compatable CRLF handling.
//
//              CR   -> CR
//              LF   -> CR
//              CRLF -> CR
//              LFCR -> CRCR
//
//  Returns:    Number of chars by which the buffer was reduced.
//
//
//  NOTE:       **ppchEnd MUST be a writeable memory location (for example a
//              string's NULL terminator).
//
//-------------------------------------------------------------------------

int
NormalizerCR(BOOL * pfEndCR, LPTSTR pchStart, LPTSTR * ppchEnd)
{
    if (!pchStart || !ppchEnd || !*ppchEnd )
        return 0;

    TCHAR ch;
    TCHAR *pchTo;
    TCHAR *pch              = pchStart;
    TCHAR *const pchLast    = *ppchEnd;
    BOOL  fCR               = pfEndCR && *pfEndCR;

    // null terminate for speed
    **ppchEnd = _T('\0');

    // Assign after null termination in case pchStart == *ppchEnd
    ch = *pch;

    // Trim LF if preceded by CR from previous run
    if (fCR && ch == _T('\n'))
    {
        pchTo = pch;
        ch = *(++pch);
    }
    else
    {
        while (ch == _T('\n'))
        {
            *pch = _T('\r');
            ch = *(++pch);
        }

        while (ch && ch != _T('\n') && IsValidWideChar(ch))
            ch = *(++pch);

        pchTo = pch;
    }

    // Assert(pch > pchStart || !ch);

    // mini CRLF and internal \0 handler
    while (pch < *ppchEnd)
    {
        if (!ch || !IsValidWideChar(ch))
            ch = *(++pch);
        else
        {
            do
            {
                // Assert(ch != _T('\0'));
                if (ch == _T('\n'))
                {
                    if (*(pch-1) == _T('\r'))
                        ch = *(++pch);

                    while (ch == _T('\n'))
                    {
                        *(pchTo++) = _T('\r');
                        ch = *(++pch);
                    }

                    if (!ch)
                        break;
                }

                // Assert(ch != _T('\0') && ch !=_T('\n'))
                if (IsValidWideChar(ch))
                    *(pchTo++) = ch;
                ch = *(++pch);

            } while (ch);
        }
    }

    // null terminate for tokenizer
    *pchTo = _T('\0');

    // advance *ppchEnd
    *ppchEnd = pchTo;

    // note trailing CR
    if (pfEndCR && (pch > pchStart))
        *pfEndCR = (*(pch-1) == _T('\r'));

    // return the number of chars by which we shrunk.
    return pchLast - pchTo;
}

#if DBG != 1
#pragma optimize("", on)
#endif


//+------------------------------------------------------------------------
//
//  Section:    Entities
//
//  Synopsis:   Translates entity names to/from unicode
//
//-------------------------------------------------------------------------

CPtrBag<ELEMENT_TAG> g_bEntities(&g_entasc);

//+------------------------------------------------------------------------
//
//  Function:   LookUpErTable
//
//  Synopsis:   Unicode->Entity name string, if any.
//
//              If no match, NULL is returned.
//
//  BSearch is too poor to handle arrays of pointers to objects, hence the
//  inline routine.
//
//-------------------------------------------------------------------------
const TCHAR*
LookUpErTable(TCHAR ch, BOOL fIsCp1252)
{
    const CAssoc * pEntry;
    int      iLow, iMiddle, iHigh;

    iHigh = sizeof(g_entasc_RevSearch)
           / sizeof(g_entasc_RevSearch[0]) - 1;
    iLow = 0;

#ifndef UNICODE
    // (cthrash) This is necessary for the multibyte build because entities
    // not in Windows-1252 map to '?', but we don't want to persist '?' as
    // named entities.  Yes, this means we won't roundtrip.  The Win16 folks
    // know this, and are happy to live with this limitation.
    if (ch == L'?')
    {
        return NULL;
    }
#endif

    // binary search
    while (iHigh != iLow)
    {
        Assert(iHigh > iLow);

        iMiddle = (iHigh + iLow) / 2;

        if (ch > g_entasc_RevSearch[iMiddle]->Number())
        {
            iLow = iMiddle + 1;
            if (ch < g_entasc_RevSearch[iLow]->Number())
            {
                // ch isn't in the array:
                // ch > val(iMiddle) && ch < val(iMiddle + 1)
                return NULL;
            }
        }
        else
        {
            iHigh = iMiddle;
        }
    }

    pEntry = g_entasc_RevSearch[iLow];

    if (ch == pEntry->Number() &&
        (!fIsCp1252 ||
         pEntry != &g_entasctrade &&
#ifdef UNICODE
         pEntry != &g_entascTRADE8482
#else
         pEntry != &g_entascTRADE153
#endif
        ))
    {
        return pEntry->String();
    }

    return NULL;
}

//+------------------------------------------------------------------------
//
//  Function:   EntityChFromName
//
//  Synopsis:   Entity name string->Unicode
//
//              If no match, \00 is returned.
//
//-------------------------------------------------------------------------
XCHAR
EntityChFromName(TCHAR *pchText, ULONG cchText, DWORD hash)
{
    return (XCHAR)g_bEntities.Get(pchText, cchText, hash);
}



#if DBG != 1
#pragma optimize("", on)
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\download\htmsrc.cxx ===
//+------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1992 - 1995.
//
//  File:       htmsrc.cxx
//
//  Contents:   CHtmSrc - saves source HTML verbatim
//
//-------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_HTM_HXX_
#define X_HTM_HXX_
#include "htm.hxx"
#endif

#ifndef X_FATSTG_HXX_
#define X_FATSTG_HXX_
#include "fatstg.hxx"
#endif

#ifndef X_INTL_HXX_
#define X_INTL_HXX_
#include "intl.hxx"
#endif

// Debugging ------------------------------------------------------------------

PerfDbgTag(tagHtmSrc,   "Dwn", "Trace CHtmInfo Source Access")

MtDefine(CHtmInfoSrcBuf, CHtmInfo, "CHtmInfo::_pbSrc")
MtDefine(CHtmInfoSrcDecodeBuf, CHtmInfo, "CHtmInfo::_pchDecoded")

// Internal -------------------------------------------------------------------

BYTE * 
FirstCRorLF(BYTE * pb, long length)
{
    Assert(pb);

    for (long i = 0; i < length; i++)
    {
        if (*pb == '\r' || *pb == '\n')
            return pb;
        pb++;
    }
    return NULL;
}

// CHtmCtx --------------------------------------------------------------------

BOOL
CHtmCtx::IsSourceAvailable()
{
    return(GetHtmInfo()->_cbSrc > 0);
}

BOOL
CHtmCtx::HasCachedFile()
{
    return(!GetHtmInfo()->_cstrFile.IsNull());
}

HRESULT
CHtmCtx::CopyOriginalSource(IStream * pstm, DWORD dwFlags)
{
    RRETURN(GetHtmInfo()->CopyOriginalSource(pstm, dwFlags));
}

HRESULT
CHtmCtx::GetStream(IStream ** ppStream)
{
    RRETURN(GetHtmInfo()->GetStream(ppStream));
}

HRESULT
CHtmCtx::ReadUnicodeSource(TCHAR * pch, ULONG ich, ULONG cch, ULONG * pcch)
{
    RRETURN(GetHtmInfo()->ReadUnicodeSource(pch, ich, cch, pcch));
}

HRESULT
CHtmCtx::GetPretransformedFile(LPTSTR *ppch)
{
    RRETURN(GetHtmInfo()->GetPretransformedFile(ppch));
}

CExtendedTagDesc * 
CHtmCtx::GetExtendedTagDesc(LPTSTR pchNamespace, LPTSTR pchTagName, BOOL fEnsure)
{
    return GetHtmInfo() ? GetHtmInfo()->GetExtendedTagDesc(pchNamespace, pchTagName, fEnsure) : NULL;
};

CExtendedTagTable *
CHtmCtx::GetExtendedTagTable()
{
    return GetHtmInfo() ? GetHtmInfo()->GetExtendedTagTable() : NULL;
}

BOOL
CHtmCtx::HasLoad()
{
     return GetHtmInfo() ? !!GetHtmInfo()->GetHtmLoad() : FALSE;
}

HRESULT
CHtmCtx::TransferExtendedTagTable(CMarkup * pMarkup)
{
    HRESULT     hr = S_OK;
    CHtmInfo *  pHtmInfo = GetHtmInfo();

    if (!pHtmInfo)
        goto Cleanup;

    hr = THR(pHtmInfo->TransferExtendedTagTable(pMarkup));

Cleanup:
    RRETURN (hr);
}

HRESULT
CHtmCtx::EnsureExtendedTagTable(CExtendedTagTable ** ppTable)
{
    HRESULT     hr;
    CHtmInfo *  pHtmInfo = GetHtmInfo();

    Assert (ppTable);

    if (pHtmInfo)
    {
        hr = THR(pHtmInfo->EnsureExtendedTagTable());
        if (hr)
            goto Cleanup;

        *ppTable = pHtmInfo->_pExtendedTagTable;
    }
    else
    {
        hr = E_FAIL;
    }

Cleanup:
    RRETURN (hr);
}

HRESULT
CHtmCtx::SaveXmlNamespaceStdPIs(CStreamWriteBuff * pStreamWriteBuff)
{
    return GetHtmInfo() ? GetHtmInfo()->SaveXmlNamespaceStdPIs(pStreamWriteBuff) : S_OK;
}

void
CHtmCtx::SetGenericParse(BOOL bDoGeneric)
{
    CHtmInfo *pHtmInfo = GetHtmInfo();
    if (pHtmInfo)
        pHtmInfo->SetGenericParse(bDoGeneric);
}

// CHtmInfo (Internal) --------------------------------------------------------

HRESULT
CHtmInfo::ResumeAfterImportPI()
{
    HRESULT     hr = S_OK;

    if (GetHtmLoad())
        GetHtmLoad()->ResumeHtmPre();
    else
        hr = E_FAIL;

    return hr;
}

HRESULT
CHtmInfo::OnSource(BYTE * pb, ULONG cb)
{
    PerfDbgLog1(tagHtmSrc, this, "+CHtmInfo::OnSource (cb=%ld)", cb);

    HRESULT hr = S_OK;

    if (cb == 0)
        goto Cleanup;

    if (!_cstrFile)
    {
        ULONG cbBuf = _cbSrc + cb;

        if (cbBuf < 4096)
        {
            if (cbBuf > 1024)
                cbBuf = (cbBuf + 1023) & ~1023;
            else if (cbBuf > 256)
                cbBuf = (cbBuf + 255) & ~255;

            if (cbBuf > _cbBuf)
            {
                if (IsOpened())
                {
                    _fUniSrc = TRUE;
                }
                
                g_csHtmSrc.Enter();

                hr = THR(MemRealloc(Mt(CHtmInfoSrcBuf), (void **)&_pbSrc, cbBuf));

                if (hr == S_OK)
                {
                    _cbBuf = cbBuf;
                }

                g_csHtmSrc.Leave();
            }

            if (hr == S_OK)
            {
                memcpy(_pbSrc + _cbSrc, pb, cb);
            }
        }
        else
        {
            if (_pstmSrc == NULL)
            {
                g_csHtmSrc.Enter();

                _pstmSrc = new CDwnStm;

                if (_pstmSrc == NULL)
                    hr = E_OUTOFMEMORY;
                else
                {
                    _pstmSrc->SetSeekable();

                    if (IsOpened())
                    {
                        _fUniSrc = TRUE;
                    }

                    if (_pbSrc)
                    {
                        hr = THR(_pstmSrc->Write(_pbSrc, _cbSrc));

                        MemFree(_pbSrc);
                        _pbSrc = NULL;
                        _cbBuf = 0;
                    }
                }

                g_csHtmSrc.Leave();

                if (hr)
                    goto Cleanup;
            }

            hr = THR(_pstmSrc->Write(pb, cb));
            if (hr)
                goto Cleanup;
        }
    }

    // Update _cbSrc only after the data has actually been written

    _cbSrc += cb;

Cleanup:
    PerfDbgLog2(tagHtmSrc, this, "-CHtmInfo::OnSource (cbSrc=%ld,hr=%lX)", _cbSrc, hr);
    RRETURN(hr);
}

HRESULT
CHtmInfo::OpenSource(DWORD dwFlags)
{
    PerfDbgLog(tagHtmSrc, this, "+CHtmInfo::OpenSource");
    CStr *pFile = &_cstrFile;

    HRESULT hr = S_OK;
    if (dwFlags & HTMSRC_PRETRANSFORM)
    {
        if (_cstrPretransformedFile)
            pFile = &_cstrPretransformedFile;
        else
        {
            // we can't get to the original mime src, so return failure
            hr = E_FAIL;
            goto Cleanup;
        }
    }

    if (*pFile)
    {
        ClearInterface(&_pstmFile);

        hr = THR(CreateStreamOnFile(*pFile,
                    STGM_READ | STGM_SHARE_DENY_NONE, &_pstmFile));
    }

Cleanup:
    PerfDbgLog1(tagHtmSrc, this, "-CHtmInfo::OpenSource (hr=%lX)", hr);
    RRETURN(hr);
}

HRESULT
CHtmInfo::ReadSource(BYTE * pb, ULONG ib, ULONG cb, ULONG * pcb, DWORD dwFlags)
{
    PerfDbgLog2(tagHtmSrc, this, "+CHtmInfo::ReadSource (ib=%ld,cb=%ld)", ib, cb);

    HRESULT hr = S_OK;
    ULONG   cbSrc = (dwFlags & HTMSRC_PRETRANSFORM) ? MAXLONG : _cbSrc;  // make sure we read the entire file if its pretransform

    *pcb = 0;

    if (ib > cbSrc)
        cb = 0;
    else if (cb > cbSrc - ib)
        cb = cbSrc - ib;

    if (cb > 0)
    {
        if (_pstmFile)
        {
            LARGE_INTEGER li;
            ULARGE_INTEGER uli;

            li.LowPart  = ib;
            li.HighPart = 0;

            hr = THR(_pstmFile->Seek(li, STREAM_SEEK_SET, &uli));

            if (hr == S_OK)
                hr = THR(_pstmFile->Read(pb, cb, pcb));
        }
        else if (_pbSrc || _pstmSrc)
        {
            g_csHtmSrc.Enter();

            if (_pbSrc)
            {
                memcpy(pb, _pbSrc + ib, cb);
                *pcb = cb;
            }
            else if (_pstmSrc)
            {
                hr = THR(_pstmSrc->Seek(ib));

                if (hr == S_OK)
                    hr = THR(_pstmSrc->Read(pb, cb, pcb));
            }

            g_csHtmSrc.Leave();
        }
    }

    PerfDbgLog2(tagHtmSrc, this, "-CHtmInfo::ReadSource (*pcb=%ld,hr=%lX)", *pcb, hr);
    RRETURN(hr);
}

void
CHtmInfo::CloseSource()
{
    ClearInterface(&_pstmFile);
}

HRESULT
CHtmInfo::DecodeSource()
{
    PerfDbgLog(tagHtmSrc, this, "+CHtmInfo::DecodeSource");

    int     cchEncoded;
    LONG    cbToDecode = (LONG)_cbSrc;
    LONG    cbDecoded;
    LONG    cchDecoded;
    TCHAR * pchDecoded = NULL;
    TCHAR * pchEnd;
    BOOL    fOpened    = FALSE;
    HRESULT hr;

    hr = THR(OpenSource());
    if (hr)
        goto Cleanup;

    fOpened = TRUE;

    // Step 1: convert src to unicode and copy into pchDecoded
    if (_fUniSrc)
    {
        // already unicode
        ULONG ib = 0;

        if (cbToDecode >= sizeof(WCHAR))
        {
            WCHAR chTemp = NULL;
            hr = THR(ReadSource((BYTE *)&chTemp, 0, sizeof(WCHAR), (ULONG *)&cbDecoded));
            if (hr)
                goto Cleanup;

            // CONSIDER (davidd) support sizeof(WCHAR) of 2 and 4?  (NON/NATIVE_UNICODE_CODEPAGE)
            // CONSIDER (johnv) Support NONNATIVE_UNICODE_SIGNATURE?
            if (NATIVE_UNICODE_SIGNATURE == chTemp)
            {
                ib += sizeof(WCHAR);
                cbToDecode -= ib;
            }
        }

        pchDecoded = (TCHAR *)MemAlloc(Mt(CHtmInfoSrcDecodeBuf), (cbToDecode + sizeof(TCHAR)));
        if (!pchDecoded)
        {
            hr = E_OUTOFMEMORY;
            goto Cleanup;
        }
        
        hr = THR(ReadSource((BYTE *)pchDecoded, ib, cbToDecode, (ULONG *)&cbDecoded));
        if (hr)
            goto Cleanup;

        cchEncoded = cbDecoded / sizeof(TCHAR);
    }
    else
    {
        // needs conversion
        
        CEncodeReader encoder(_cpDoc, cbToDecode);

        hr = THR(encoder.PrepareToEncode());
        if (hr)
            goto Cleanup;

        Assert((LONG)encoder._cbBufferMax >= cbToDecode);

        hr = THR(ReadSource(encoder._pbBufferPtr, 0, cbToDecode, (ULONG *)&cbDecoded));
        if (hr)
            goto Cleanup;

        Assert(cbDecoded == cbToDecode);

        encoder._cbBuffer += cbDecoded;

        // The file will contain primarily single byte characters, so
        // ensure we have enough space. Add 1 for NormalizerCR function.
        pchDecoded = (TCHAR *)MemAlloc(Mt(CHtmInfoSrcDecodeBuf), (cbDecoded + 1) * sizeof(TCHAR));
        if (!pchDecoded)
        {
            hr = E_OUTOFMEMORY;
            goto Cleanup;
        }

        // Number of wide character
        encoder._cchBuffer = cbDecoded;
        encoder._pchEnd = encoder._pchBuffer = pchDecoded;

        // Convert to unicode.
        hr = THR(encoder.WideCharFromMultiByte(TRUE, &cchEncoded));

        // It just get uglier and uglier...
        encoder._cchBuffer = 0;
        encoder._pchEnd = encoder._pchBuffer = NULL;

        if (hr)
            goto Cleanup;

        Assert(cchEncoded <= cbDecoded);
    }

    // Step 2: call NormalizeCR (it also writes a NULL into pchEnd)
    pchEnd = pchDecoded + cchEncoded;
    cchDecoded = cchEncoded - NormalizerChar(pchDecoded, &pchEnd);

    // commit:
    _cbDecoded  = cbDecoded;
    _cchDecoded = cchDecoded;
    MemFree(_pchDecoded);
    _pchDecoded = pchDecoded;
    pchDecoded  = NULL;

Cleanup:

    MemFree(pchDecoded);

    if (fOpened)
    {
        CloseSource();
    }

    PerfDbgLog2(tagHtmSrc, this, "-CHtmInfo::DecodeSource (cch=%ld,hr=%lX)", _cchDecoded, hr);
    RRETURN(hr);
}


// CHtmInfo (External) --------------------------------------------------------

HRESULT
CHtmInfo::GetStream(IStream ** ppStream)
{
    HRESULT     hr = S_OK;

    Assert (ppStream);

    hr = THR(OpenSource());
    if (hr)
        goto Cleanup;

    *ppStream = _pstmFile;
    (*ppStream)->AddRef();

Cleanup:
    RRETURN (hr);
}

// CHtmInfo (External) --------------------------------------------------------

HRESULT
CHtmInfo::CopyOriginalSource(IStream * pstm, DWORD dwFlags)
{
#ifdef UNIX
//Align abBuf so that it is on 4 ByteBoundary so as to avoid alignment faults  later on access to  encoder._pchBuffer 
    typedef union
    {
        DWORD   dwDummy;
        BYTE    _abBuf[4096 + 2];
    } uABBUF;
    uABBUF uabBuf;
#define abBuf (uabBuf._abBuf)

#else
    BYTE    abBuf[4096 + 2];
#endif
    BYTE *  pbCopy;
    BYTE *  pbBuf;
    BYTE *  pbCRorLF;
    BYTE    bLast         = 0;
    LONG    cbCopied      = 0;
    LONG    cbToCopy;
    LONG    cbToWrite;
    LONG    cbSrc         = (dwFlags & HTMSRC_PRETRANSFORM) ? (LONG)MAXLONG : (LONG)_cbSrc;  // make sure we read the entire file if its pretransform
    LONG    ibSrc         = 0;
    int     cch;
    BOOL    fOpened       = FALSE;
    BOOL    fUniSrc       = _fUniSrc;
    HRESULT hr;

    CEncodeWriter encoder(g_cpDefault, 1024);

    encoder._fEntitizeUnknownChars = FALSE;

    hr = THR(OpenSource(dwFlags));
    if (hr)
        goto Cleanup;

    fOpened = TRUE;

    while (ibSrc < cbSrc)
    {
        cbToCopy = cbSrc - ibSrc;

        if (cbToCopy > ARRAY_SIZE(abBuf) - 2)
            cbToCopy = ARRAY_SIZE(abBuf) - 2;

        hr = THR(ReadSource(abBuf, ibSrc, cbToCopy, (ULONG *)&cbToCopy, dwFlags));
        if (hr)
            goto Cleanup;

        if (cbToCopy == 0)
        {
            // File does not appear to be as long as we thought.  We'll be
            // happy with what we got.

            break;
        }

        abBuf[cbToCopy] = 0;
        abBuf[cbToCopy+1] = 0;
        pbCopy = abBuf;

        ibSrc += cbToCopy;

        if (dwFlags & HTMSRC_MULTIBYTE)
        {
            if (    (ibSrc == cbToCopy && cbToCopy >= 2)
                &&  (abBuf[0] == 0xFF && abBuf[1] == 0xFE))
            {
                // Skip over Unicode byte-order marker. 2 bytes or 4 bytes ?

                cbToCopy    -= 2;
                pbCopy      += sizeof(WCHAR);
                fUniSrc      = TRUE;

                if (cbToCopy == 0)
                    continue;
            }

            if (fUniSrc)
            {
                // Convert the Unicode source to MultiByte for the caller

                Assert(encoder._pchBuffer == NULL);
                encoder._pchBuffer = (TCHAR *)pbCopy;
                encoder._cchBuffer = cbToCopy / sizeof(TCHAR);
                encoder._cbBuffer  = 0;

                hr = THR(encoder.MultiByteFromWideChar(ibSrc == cbSrc, &cch));

                encoder._pchBuffer = NULL;
                encoder._cchBuffer = 0;

                if (hr)
                    goto Cleanup;

                pbCopy   = encoder._pbBuffer;
                cbToCopy = encoder._cbBuffer;

                if (cbToCopy == 0)
                    continue;
            }
        }

        pbBuf    = pbCopy;
        cbCopied = 0;

        for (;;)
        {
            pbCRorLF  = NULL;
            cbToWrite = 0;
            
            if (dwFlags & HTMSRC_FIXCRLF)
                pbCRorLF = FirstCRorLF(pbBuf, cbToCopy - cbCopied);
            
            if (pbCRorLF)
                cbToWrite = PTR_DIFF(pbCRorLF, pbBuf);
            else
                cbToWrite = cbToCopy - cbCopied;

            hr = THR(pstm->Write(pbBuf, cbToWrite, NULL));
            if (hr)
                goto Cleanup;

            cbCopied += cbToWrite;

            if (cbCopied >= cbToCopy)
                break;

            if (cbToWrite)
            {
                bLast = *(pbBuf + cbToWrite - 1);
                pbBuf += cbToWrite;
            }

            if (pbCRorLF)
            {
                // If LF is found and previous char is CR, 
                // then we don't write, Otherwise, write CR & LF to temp file.

                if (!(*pbCRorLF == '\n' && bLast == '\r')) 
                {
                    hr = THR(pstm->Write("\r\n", 2, NULL));
                    if (hr)
                        goto Cleanup;

                }

                bLast = *pbCRorLF;
                pbBuf = pbCRorLF + 1;
                cbCopied++;
            }
        }

        bLast = pbCopy[cbToCopy - 1];
    }

Cleanup:

    if (fOpened)
    {
        CloseSource();
    }

    PerfDbgLog1(tagHtmSrc, this, "-CHtmInfo::CopyOriginalSource (hr=%lX)", hr);
    RRETURN(hr);
}

HRESULT
CHtmInfo::ReadUnicodeSource(TCHAR * pch, ULONG ich, ULONG cch, ULONG * pcch)
{
    PerfDbgLog2(tagHtmSrc, this, "+CHtmInfo::ReadUnicodeSource (ich=%ld,cch=%ld)", ich, cch);

    HRESULT hr = S_OK;

    if (_cbDecoded != _cbSrc)
    {
        hr = THR(DecodeSource());
    }

    if (hr == S_OK)
    {
        if (ich > _cchDecoded)
            cch = 0;
        else if (cch > _cchDecoded - ich)
            cch = _cchDecoded - ich;

        if (cch > 0)
        {
            CopyMemory(pch, _pchDecoded + ich, cch * sizeof(TCHAR));
        }

        *pcch = cch;
    }
    else
    {
        *pcch = 0;
    }

    PerfDbgLog2(tagHtmSrc, this, "-CHtmInfo::ReadUnicodeSource (*pcch=%ld,hr=%lX)", *pcch, hr);
    RRETURN(hr);
}

void
CHtmInfo::SetGenericParse(BOOL bDoGeneric)
{
    CHtmLoad *pHtmLoad = GetHtmLoad();
    if (pHtmLoad)
        pHtmLoad->SetGenericParse(bDoGeneric);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\download\htmtag.cxx ===
//+---------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1994-1996
//
//  File:       htmltag.cxx
//
//  Contents:   CHtmTag
//
//----------------------------------------------------------------------------


#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_HTM_HXX_
#define X_HTM_HXX_
#include "htm.hxx"
#endif

#ifndef X_INTL_HXX_
#define X_INTL_HXX_
#include "intl.hxx"
#endif

#ifndef X_CBUFSTR_HXX_
#define X_CBUFSTR_HXX_
#include "cbufstr.hxx"
#endif

#ifndef X_BUFFER_HXX_
#define X_BUFFER_HXX_
#include "buffer.hxx"
#endif

#ifndef X_PEERXTAG_HXX_
#define X_PEERXTAG_HXX_
#include "peerxtag.hxx"
#endif

// Debugging ------------------------------------------------------------------

PerfDbgTag(tagHtmTagStm, "Dwn", "Trace CHtmTagStm")

// Performance Meters ---------------------------------------------------------

MtDefine(CHtmTagStm, Dwn, "CHtmTagStm")
MtDefine(CHtmTagStm_ptextbuf, CHtmTagStm, "CHtmTagStm::_ptextbuf")
MtDefine(CHtmTagStm_ptagbuf, CHtmTagStm, "CHtmTagStm::_ptagbuf")
MtDefine(CHtmTagQueue, Dwn, "CHtmTagQueue")

//+------------------------------------------------------------------------
//
//  Member:     CHtmTag::AttrFromName
//
//  Synopsis:   name->CAttr*
//
//-------------------------------------------------------------------------

CHtmTag::CAttr *
CHtmTag::AttrFromName(const TCHAR * pchName)
{
    Assert(pchName);

    int i = _cAttr;

    // optimize for zero attrs
    if (i && pchName)
    {
        CAttr *pattr = _aAttr;
        for (; i--; pattr++)
        {
            if (!StrCmpIC(pattr->_pchName, pchName))
            {
                return pattr;
            }
        }
    }
    return NULL;
}

#ifdef V4FRAMEWORK

HRESULT CHtmTag::ToBSTR ( BSTR *pBstr )
{
    // Organize the tags into a binary buffer made up of an array of bytes organized as
    //<[4BYTE]NAMELENGTH,nl><[nlBYTEs]NAME><[4BYTE]VALUELENGTH,vl><[vlBYTEs]VALUE>
    ULONG i,j,nLength;
    HRESULT hr;
    BYTE *pBuffer;

    // Figure out the max length needed
    for ( i = 0,nLength = 0 ; i < _cAttr ; i++ )
    {
        nLength += (sizeof(ULONG)*2)/sizeof(TCHAR); // name count + value count
        nLength += _aAttr [ i ]._cchVal;
        nLength += _aAttr [ i ]._cchName;
    }

    nLength += sizeof(ULONG)/sizeof(TCHAR); // preceding count

    hr = FormsAllocStringLen (NULL, nLength, pBstr );
    if ( hr )
        goto Cleanup;

    pBuffer = (BYTE *)*pBstr;
    *(ULONG*)pBuffer = (ULONG)_cAttr;
    pBuffer += sizeof(ULONG);

    // Fill the buffer
    for ( i = 0 ; i < _cAttr ; i++ )
    {
        *(ULONG*)pBuffer = _aAttr [ i ]._cchName;
        pBuffer += sizeof(ULONG);
        for ( j = 0 ; j < _aAttr [ i ]._cchName ; j++ )
        {
            *((TCHAR*)pBuffer) = _aAttr [ i ]._pchName [ j ];
            pBuffer += sizeof(TCHAR);
        }
        *(ULONG*)pBuffer = _aAttr [ i ]._cchVal;
        pBuffer += sizeof(ULONG);
        for ( j = 0 ; j < _aAttr [ i ]._cchVal ; j++ )
        {
            *((TCHAR*)pBuffer) = _aAttr [ i ]._pchVal [ j ];
            pBuffer += sizeof(TCHAR);
        }
    }
Cleanup:
    RRETURN(hr);
}

#endif

//+------------------------------------------------------------------------
//
//  Member:     CHtmTag::ValFromName
//
//  Synopsis:   name->val
//              Returns TRUE if attribute named by pchName is present.
//              Returns pointer to value string in *ppchVal (NULL if no
//              value is present)
//
//-------------------------------------------------------------------------
BOOL
CHtmTag::ValFromName(const TCHAR * pchName, TCHAR **ppchVal)
{
    CAttr * pattr = AttrFromName(pchName);
    if (pattr)
    {
        *ppchVal = pattr->_pchVal;
        return TRUE;
    }
    else
    {
        *ppchVal = NULL;
        return FALSE;
    }
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmTag::GetXmlNamespace
//
//  Synopsis:   enumerator of "xmlns:foo" declarations
//
//-------------------------------------------------------------------------

LPTSTR
CHtmTag::GetXmlNamespace(int * pIdx)
{
    Assert (pIdx);

    if (_cAttr)
    {
        CAttr * pAttr;

        for (pAttr = &(_aAttr[*pIdx]); (*pIdx) < _cAttr; (*pIdx)++, pAttr++)
        {
            if (_tcsnipre(_T("xmlns:"), 6, pAttr->_pchName, -1))
                return pAttr->_pchName + 6;
        }
    }
    return NULL;
}

#if 0

//+------------------------------------------------------------------------
//
//  Member:     CHtmTag::SaveAsText
//
//  Synopsis:   Creates a string containing the HTML of the tag.
//
//              The tag is recreated
//
//-------------------------------------------------------------------------
HRESULT
CHtmTag::SaveAsText(CBufferedStr *pbufstrOut)
{
    HRESULT hr;
    int     i;
    CAttr   * pattr;

    if (_etag == ETAG_RAW_COMMENT)
    {
        hr = THR(pbufstrOut->QuickAppend(_pch));
        goto Cleanup;
    }

    // In 5.0 the "/" does not exist in the _pch of an unknown tag

    if (IsEnd())
        hr = THR(pbufstrOut->QuickAppend(_T("</")));
    else
        hr = THR(pbufstrOut->QuickAppend(_T("<")));

    if (hr)
        goto Cleanup;

    Assert( _etag != ETAG_GENERIC_NESTED_LITERAL );
    if (_etag == ETAG_UNKNOWN || _etag == ETAG_GENERIC || _etag == ETAG_GENERIC_LITERAL )
        hr = THR(pbufstrOut->QuickAppend(_pch));
    else
        hr = THR(pbufstrOut->QuickAppend(NameFromEtag((ELEMENT_TAG)_etag)));

    if (hr)
        goto Cleanup;

    for (i = _cAttr, pattr = _aAttr; i--; ++pattr)
    {
        hr = THR(pbufstrOut->QuickAppend(_T(" ")));
        if (hr)
            goto Cleanup;

        hr = THR(pbufstrOut->QuickAppend(pattr->_pchName));
        if (hr)
            goto Cleanup;

        if (pattr->_pchVal)
        {
            hr = THR(pbufstrOut->QuickAppend(_T("=\"")));
            if (hr)
                goto Cleanup;

            hr = THR(pbufstrOut->QuickAppend(pattr->_pchVal));
            if (hr)
                goto Cleanup;

            hr = THR(pbufstrOut->QuickAppend(_T("\"")));
            if (hr)
                goto Cleanup;
        }
    }

    if (IsEmpty())
        hr = THR(pbufstrOut->QuickAppend(_T(" />")));
    else
        hr = THR(pbufstrOut->QuickAppend(_T(">")));

Cleanup:
    RRETURN(hr);
}

#endif

// CHtmTagStm -----------------------------------------------------------------

CHtmTagStm::~CHtmTagStm()
{
    TEXTBUF *   ptextbuf;
    TAGBUF *    ptagbuf;

    while ((ptextbuf = _ptextbufHead) != NULL)
    {
        _ptextbufHead = ptextbuf->ptextbufNext;
        MemFree(ptextbuf);
    }

    while ((ptagbuf = _ptagbufHead) != NULL)
    {
        _ptagbufHead = ptagbuf->ptagbufNext;
        MemFree(ptagbuf);
    }

    if (_pdsSource)
    {
        _pdsSource->Release();
    }

    MemFree(_ptextbufWrite);
}

HRESULT
CHtmTagStm::AllocTextBuffer(UINT cch, TCHAR ** ppch)
{
    PerfDbgLog1(tagHtmTagStm, this, "CHtmTagStm::AllocBuffer (cch=%ld)", cch);

    TEXTBUF * ptextbuf = (TEXTBUF *)MemAlloc(Mt(CHtmTagStm_ptextbuf), offsetof(TEXTBUF, ach) + cch * sizeof(TCHAR));
    HRESULT hr;

    if (ptextbuf == NULL)
    {
        *ppch = NULL;
        hr = E_OUTOFMEMORY;
        goto Cleanup;
    }

    if (_ptextbufWrite)
    {
        _ptextbufWrite->ptextbufNext = NULL;

        g_csDwnStm.Enter();

        if (_ptextbufTail == NULL)
        {
            _ptextbufHead = _ptextbufWrite;
            _ptextbufTail = _ptextbufWrite;
        }
        else
        {
            _ptextbufTail->ptextbufNext = _ptextbufWrite;
            _ptextbufTail = _ptextbufWrite;
        }

        _ptextbufWrite = NULL;

        g_csDwnStm.Leave();

        _fNextBuffer = TRUE;
    }

    _ptextbufWrite = ptextbuf;

    *ppch = ptextbuf->ach;
    hr = S_OK;

Cleanup:
    PerfDbgLog1(tagHtmTagStm, this, "CHtmTagStm::AllocBuffer (hr=%lX)", hr);
    RRETURN(hr);
}

HRESULT
CHtmTagStm::GrowTextBuffer(UINT cch, TCHAR ** ppch)
{
    PerfDbgLog1(tagHtmTagStm, this, "CHtmTagStm::GrowBuffer (cch=%ld)", cch);

    Assert(_ptextbufWrite != NULL);

    HRESULT hr;

    hr = MemRealloc(Mt(CHtmTagStm_ptextbuf), (void **)&_ptextbufWrite, offsetof(TEXTBUF, ach) + cch * sizeof(TCHAR));

    if (hr == S_OK)
    {
        *ppch = _ptextbufWrite->ach;
    }

    PerfDbgLog1(tagHtmTagStm, this, "CHtmTagStm::GrowBuffer (hr=%lX)", hr);
    RRETURN(hr);
}

void
CHtmTagStm::DequeueTextBuffer()
{
    TEXTBUF * ptextbuf = _ptextbufHead;

    g_csDwnStm.Enter();

    _ptextbufHead = ptextbuf->ptextbufNext;

    if (_ptextbufHead == NULL)
        _ptextbufTail = NULL;

    g_csDwnStm.Leave();

    MemFree(ptextbuf);
}

HRESULT
CHtmTagStm::AllocTagBuffer(UINT cbNeed, void * pvCopy, UINT cbCopy)
{
    PerfDbgLog2(tagHtmTagStm, this, "+CHtmTagStm::AllocTagBuffer (cbNeed=%ld,cbCopy=%ld)", cbNeed, cbCopy);

    TAGBUF *    ptagbuf = _ptagbufTail;
    TAGBUF **   pptagbuf;
    HRESULT     hr = S_OK;

    if (_cbTagBuffer == 0)
        _cbTagBuffer = 256;
    else if (_cbTagBuffer < 4096)
        _cbTagBuffer <<= 1;

    cbNeed = (cbNeed + (_cbTagBuffer - 1)) & ~(_cbTagBuffer - 1);

    if (ptagbuf && ptagbuf->phtWrite == (CHtmTag *)ptagbuf->ab)
    {
        // Realloc the current buffer to make the entire tag fit

        hr = THR(MemRealloc(Mt(CHtmTagStm_ptagbuf), (void **)&ptagbuf, offsetof(TAGBUF, ab) + cbNeed));
        if (hr)
            goto Cleanup;

        // Update the queue pointers to point at the new tag buffer if it moved

        if (ptagbuf != _ptagbufTail)
        {
            g_csDwnStm.Enter();

            for (pptagbuf = &_ptagbufHead; *pptagbuf != _ptagbufTail; pptagbuf = &(*pptagbuf)->ptagbufNext) ;
            *pptagbuf = ptagbuf;

            _ptagbufTail = ptagbuf;

            g_csDwnStm.Leave();
        }
    }
    else
    {
        ptagbuf = (TAGBUF *)MemAlloc(Mt(CHtmTagStm_ptagbuf), offsetof(TAGBUF, ab) + cbNeed);

        if (ptagbuf == NULL)
        {
            hr = E_OUTOFMEMORY;
            goto Cleanup;
        }

        ptagbuf->ptagbufNext = NULL;

        if (cbCopy)
        {
            memcpy(ptagbuf->ab, pvCopy, cbCopy);
        }

        g_csDwnStm.Enter();

        if (_ptagbufTail == NULL)
            _ptagbufHead = ptagbuf;
        else
            _ptagbufTail->ptagbufNext = ptagbuf;

        _ptagbufTail = ptagbuf;

        g_csDwnStm.Leave();
    }

    ptagbuf->phtWrite = (CHtmTag *)ptagbuf->ab;
    _cbLeft = cbNeed;

Cleanup:
    PerfDbgLog1(tagHtmTagStm, this, "-CHtmTagStm::AllocTagBuffer (hr=%lX)", hr);
    RRETURN(hr);
}

CHtmTag *
CHtmTagStm::DequeueTagBuffer()
{
    TAGBUF * ptagbuf = _ptagbufHead;

    g_csDwnStm.Enter();

    _ptagbufHead = ptagbuf->ptagbufNext;

    Assert(_ptagbufHead);

    g_csDwnStm.Leave();

    MemFree(ptagbuf);

    return((CHtmTag *)_ptagbufHead->ab);
}

#if DBG!=1
#pragma optimize(SPEED_OPTIMIZE_FLAGS, on)
#endif

HRESULT
CHtmTagStm::WriteTag(ELEMENT_TAG etag, TCHAR * pch, ULONG cch, BOOL fAscii)
{
    if (_cbLeft < CHtmTag::ComputeSize(FALSE, 0))
    {
        HRESULT hr = THR(AllocTagBuffer(CHtmTag::ComputeSize(FALSE, 0), NULL, 0));
        if (hr)
            RRETURN(hr);
    }

    CHtmTag * pht = _ptagbufTail->phtWrite;
    _ptagbufTail->phtWrite = (CHtmTag *)((BYTE *)pht + CHtmTag::ComputeSize(FALSE, 0));
    _cbLeft -= CHtmTag::ComputeSize(FALSE, 0);

    pht->Reset();
    pht->SetTag(etag);
    pht->SetPch(pch);
    pht->SetCch(cch);

    if (fAscii)
        pht->SetAscii();

    if (_fNextBuffer)
    {
        _fNextBuffer = FALSE;
        pht->SetNextBuf();
    }

    _chtWrite += 1;
    _fSignal = TRUE;

    return(S_OK);
}

HRESULT
CHtmTagStm::WriteTag(ELEMENT_TAG etag, ULONG ul1, ULONG ul2)
{
    if (_cbLeft < CHtmTag::ComputeSize(FALSE, 0))
    {
        HRESULT hr = THR(AllocTagBuffer(CHtmTag::ComputeSize(FALSE, 0), NULL, 0));
        if (hr)
            RRETURN(hr);
    }

    CHtmTag * pht = _ptagbufTail->phtWrite;
    _ptagbufTail->phtWrite = (CHtmTag *)((BYTE *)pht + CHtmTag::ComputeSize(FALSE, 0));
    _cbLeft -= CHtmTag::ComputeSize(FALSE, 0);

    pht->Reset();
    pht->SetTag(etag);
    pht->SetLine(ul1);
    pht->SetOffset(ul2);

    if (_fNextBuffer)
    {
        _fNextBuffer = FALSE;
        pht->SetNextBuf();
    }

    _chtWrite += 1;
    _fSignal = TRUE;

    return(S_OK);
}

HRESULT
CHtmTagStm::WriteTagBeg(ELEMENT_TAG etag, CHtmTag ** ppht)
{
    AssertSz (!_fWritingDbg, "Disbalance of WriteTagBeg and WriteTagEnd/WriteTagAbort");

#if DBG == 1
    _fWritingDbg = TRUE;
#endif

    if (_cbLeft < CHtmTag::ComputeSize(FALSE, 0))
    {
        HRESULT hr = THR(AllocTagBuffer(CHtmTag::ComputeSize(FALSE, 0), NULL, 0));
        if (hr)
            RRETURN(hr);
    }

    CHtmTag * pht = _ptagbufTail->phtWrite;

    pht->Reset();
    pht->SetTag(etag);

    *ppht = pht;

    return(S_OK);
}

HRESULT
CHtmTagStm::WriteTagGrow(CHtmTag ** ppht, CHtmTag::CAttr ** ppAttr)
{
    CHtmTag *   pht     = *ppht;
    UINT        cAttr   = pht->GetAttrCount();
    UINT        cbGrow  = CHtmTag::ComputeSize(FALSE, cAttr + 1);

    Assert(_ptagbufTail);
    Assert(_ptagbufTail->phtWrite == pht);
    Assert(!pht->IsTiny());

    if (_cbLeft < cbGrow)
    {
        HRESULT hr = THR(AllocTagBuffer(cbGrow, pht, cbGrow - sizeof(CHtmTag::CAttr)));
        if (hr)
            RRETURN(hr);

        *ppht = pht = _ptagbufTail->phtWrite;
    }

    pht->SetAttrCount(cAttr + 1);

    *ppAttr = pht->GetAttr(cAttr);

    return(S_OK);
}

void
CHtmTagStm::WriteTagEnd()
{
    Assert(_ptagbufTail);

    CHtmTag *   pht     = _ptagbufTail->phtWrite;
    UINT        cbTag   = pht->ComputeSize();

    Assert(_cbLeft >= cbTag);

    _ptagbufTail->phtWrite = (CHtmTag *)((BYTE *)pht + cbTag);
    _cbLeft -= cbTag;

    if (_fNextBuffer)
    {
        _fNextBuffer = FALSE;
        pht->SetNextBuf();
    }

    _chtWrite += 1;
    _fSignal = TRUE;

#if DBG == 1
    _fWritingDbg = FALSE;
#endif
}

void
CHtmTagStm::WriteEof(HRESULT hrEof)
{
    PerfDbgLog1(tagHtmTagStm, this, "+CHtmTagStm::WriteEof (hrEof=%lX)", hrEof);

    if (!_fEof || hrEof)
    {
        _hrEof   = hrEof;
        _fEof    = TRUE;
        _fSignal = TRUE;
        Signal();
    }

    PerfDbgLog(tagHtmTagStm, this, "-CHtmTagStm::WriteEof");
}

HRESULT
CHtmTagStm::WriteSource(TCHAR *pch, ULONG cch)
{
    HRESULT hr = S_OK;
    void *pvTo;
    ULONG cbTo;
    ULONG cchCopy;

    if (!_pdsSource)
    {
        _pdsSource = new CDwnStm();
        if (!_pdsSource)
        {
            hr = E_OUTOFMEMORY;
            goto Cleanup;
        }
    }

    while (cch)
    {
        hr = THR(_pdsSource->WriteBeg(&pvTo, &cbTo));
        if (hr)
            goto Cleanup;

        cchCopy = min(cch, (ULONG)(cbTo / sizeof(TCHAR)));

        Assert(cchCopy);
        if (!cchCopy)
            return E_FAIL;

        memcpy(pvTo, pch, cchCopy * sizeof(TCHAR));

        _pdsSource->WriteEnd(cchCopy * sizeof(TCHAR));

        cch -= cchCopy;
        pch += cchCopy;
    }

Cleanup:
    RRETURN(hr);
}

HRESULT
CHtmTagStm::ReadSource(CBuffer2 *pBuffer, ULONG cch)
{
    HRESULT hr = S_OK;
    void *pvFrom;
    ULONG cbFrom;
    ULONG cchCopy;

    Assert(!cch || _pdsSource);
    if (cch && !_pdsSource)
        return E_FAIL;

    while (cch)
    {
        hr = THR(_pdsSource->ReadBeg(&pvFrom, &cbFrom));
        if (hr)
            goto Cleanup;

        cchCopy = min(cch, (ULONG)(cbFrom / sizeof(TCHAR)));

        Assert(cchCopy);
        if (!cchCopy)
            return E_FAIL;

        hr = THR(pBuffer->Append((TCHAR *)pvFrom, cchCopy));
        if (hr)
            goto Cleanup;

        _pdsSource->ReadEnd(cchCopy * sizeof(TCHAR));

        cch -= cchCopy;
    }

Cleanup:
    RRETURN(hr);
}

HRESULT
CHtmTagStm::SkipSource(ULONG cch)
{
    HRESULT hr = S_OK;
    void *pvFrom;
    ULONG cbFrom;
    ULONG cchCopy;

    Assert(!cch || _pdsSource);
    if (cch && !_pdsSource)
        return E_FAIL;

    while (cch)
    {
        hr = THR(_pdsSource->ReadBeg(&pvFrom, &cbFrom));
        if (hr)
            goto Cleanup;

        cchCopy = min(cch, (ULONG)(cbFrom / sizeof(TCHAR)));

        Assert(cchCopy);
        if (!cchCopy)
            return E_FAIL;

        _pdsSource->ReadEnd(cchCopy * sizeof(TCHAR));

        cch -= cchCopy;
    }

Cleanup:
    RRETURN(hr);
}

void
CHtmTagStm::Signal()
{
    if (_fSignal)
    {
        _fSignal = FALSE;
        super::Signal();
    }
}

CHtmTag *
CHtmTagStm::ReadTag(CHtmTag * pht)
{
    Assert(_chtRead <= _chtWrite);

    if (_hrEof || _chtRead == _chtWrite)
    {
        return(NULL);
    }

    Assert(_ptagbufHead);

    if (pht == NULL)
    {
        pht = _phtRead;

        if (pht == NULL)
        {
            pht = (CHtmTag *)_ptagbufHead->ab;
            goto gottag;
        }
    }

    Assert(pht);
    Assert(pht == _phtRead);
    Assert(pht >= (CHtmTag *)_ptagbufHead->ab);
    Assert(pht < _ptagbufHead->phtWrite);

    pht = (CHtmTag *)((BYTE *)pht + pht->ComputeSize());

    Assert(pht <= _ptagbufHead->phtWrite);

    if (pht == _ptagbufHead->phtWrite)
    {
        pht = DequeueTagBuffer();
    }

    if (pht->IsNextBuf())
    {
        DequeueTextBuffer();
    }

gottag:

    _phtRead = pht;
    _chtRead += 1;

    return(pht);
}

CHtmTag *
CHtmTagStm::ScanTag(CHtmTag * pht)
{
    Assert(_chtScan <= _chtWrite);

    if( _hrEof || _chtScan == _chtWrite )
    {
        return NULL;
    }

    if( !pht )
    {
        // Start from the beginning
        pht = (CHtmTag *)_ptagbufHead->ab;
        _ptagbufScan = _ptagbufHead;
        _chtScan = 0;
    }
    else
    {
        // Continue on to the next tag
        pht = (CHtmTag *)((BYTE *)pht + pht->ComputeSize());
    }

    Assert( _ptagbufScan &&
            pht >= (CHtmTag *)_ptagbufScan->ab &&
            pht <=  _ptagbufScan->phtWrite );
    Assert( pht );

    // If we've gone past the end of this buffer, advance to the next
    if( pht == _ptagbufScan->phtWrite)
    {
        _ptagbufScan = _ptagbufScan->ptagbufNext;

        Assert( _ptagbufScan );

        pht = (CHtmTag *)_ptagbufScan->ab;
    }

    _chtScan += 1;
    return pht;
}

HRESULT
CHtmTagQueue::EnqueueTag(CHtmTag *pht)
{
    TCHAR *pch;
    ULONG cch;
    ULONG c;
    CHtmTag *phtTo = NULL;
    CHtmTag::CAttr *pAttr;
    CHtmTag::CAttr *pAttrTo = NULL;
    HRESULT hr = S_OK;

    Assert(!pht->IsSource()); // not needed, not handled

    // Step 1: compute the amount of text needed to copy tag

    cch = 0;

    Assert( !pht->Is(ETAG_GENERIC_NESTED_LITERAL) );
    if (pht->Is(ETAG_RAW_TEXT) ||
        pht->Is(ETAG_RAW_COLLAPSED_WHITESPACE) ||
        pht->Is(ETAG_UNKNOWN) ||
        pht->Is(ETAG_GENERIC) ||
        pht->Is(ETAG_GENERIC_LITERAL) ||
        pht->Is(ETAG_GENERIC_BUILTIN))
    {
        cch += pht->GetCch() + 1;
    }

    c = pht->GetAttrCount();

    if (c)
    {
        for (pAttr = pht->GetAttr(0); c; c--, pAttr++)
        {
            cch += pAttr->_cchName + 1;

            if (pAttr->_pchVal)
                cch += pAttr->_cchVal + 1;
        }
    }

    // Step 2: allocate tag, copy static data

    hr = THR(WriteTagBeg(pht->GetTag(), &phtTo));
    if (hr)
        goto Cleanup;

    phtTo->SetPch(NULL);  // will be fixed up in step 3
    phtTo->SetCch(0);

    if (pht->Is(ETAG_SCRIPT) ||
        pht->Is(ETAG_RAW_CODEPAGE) ||
        pht->Is(ETAG_RAW_DOCSIZE))
    {
        phtTo->SetLine(pht->GetLine()); // also copies codepage, docsize
        phtTo->SetOffset(pht->GetOffset());
    }

    if (pht->IsTiny())
    {
        Assert(pht->GetTag() > ETAG_UNKNOWN && pht->GetTag() < ETAG_GENERIC
            || pht->Is(ETAG_RAW_BEGINSEL) || pht->Is(ETAG_RAW_ENDSEL));
        Assert(pht->GetAttrCount() == 0);
        Assert(!cch);
        phtTo->SetTiny();
    }

    if (pht->IsRestart())
        phtTo->SetRestart();

    if (pht->IsEmpty())
        phtTo->SetEmpty();

    if (pht->IsEnd())
        phtTo->SetEnd();

    if (pht->IsAscii())
        phtTo->SetAscii();

    // Step 3: allocate and copy text/attr/val

    if (cch)
    {
        hr = THR(AllocTextBuffer(cch, &pch));
        if (hr)
            goto Cleanup;

        if (pht->Is(ETAG_RAW_TEXT) ||
            pht->Is(ETAG_RAW_COLLAPSED_WHITESPACE) ||
            pht->Is(ETAG_UNKNOWN) ||
            pht->Is(ETAG_GENERIC) ||
            pht->Is(ETAG_GENERIC_LITERAL) ||
            pht->Is(ETAG_GENERIC_BUILTIN))
        {
            phtTo->SetPch(pch);
            memcpy(pch, pht->GetPch(), pht->GetCch() * sizeof(TCHAR));
            pch += pht->GetCch();
            *pch = _T('\0');
            pch++;

            if (pht->Is(ETAG_RAW_COLLAPSED_WHITESPACE))
            {
                phtTo->SetCch(pht->GetCch());
            }
        }

        c = pht->GetAttrCount();

        if (c)
        {
            for (pAttr = pht->GetAttr(0); c; c--, pAttr++)
            {
                hr = THR(WriteTagGrow(&phtTo, &pAttrTo));
                if (hr)
                    goto Cleanup;

                // Copy all fields
                *pAttrTo = *pAttr;

                // Fixup pointers
                pAttrTo->_pchName = pch;
                memcpy(pch, pAttr->_pchName, pAttr->_cchName * sizeof(TCHAR));
                pch += pAttr->_cchName;
                *pch = _T('\0');
                pch++;

                if (pAttr->_pchVal)
                {
                    pAttrTo->_pchVal = pch;
                    memcpy(pch, pAttr->_pchVal, pAttr->_cchVal * sizeof(TCHAR));
                    pch += pAttr->_cchVal;
                    *pch = _T('\0');
                    pch++;
                }
            }
        }
    }

    WriteTagEnd();

    _cEnqueued++;

Cleanup:
    RRETURN(hr);
}

CHtmTag *
CHtmTagQueue::DequeueTag()
{
    CHtmTag *pht;

    Assert(_cEnqueued);

    _cEnqueued--;

    pht = ReadTag(NULL);

    Assert(pht);

    return pht;
}

HRESULT
CHtmTagQueue::ParseAndEnqueueTag(TCHAR *pch, ULONG cch)
{
    TCHAR *pchCopy;
    TCHAR ch;
    HRESULT hr;

    if (cch < 2)
        return E_FAIL;

    if (*pch != _T('<') || *(pch + cch - 1) != _T('>'))
        return E_FAIL;

    // Don't deal with end-tags, etc for now

    ch = *(pch + 1);

    if (!ISNAMCH(ch))
        return E_FAIL;

    hr = THR(AllocTextBuffer(cch, &pchCopy));
    if (hr)
        goto Cleanup;

    memcpy(pchCopy, pch, cch * sizeof(TCHAR));

    hr = THR(CHtmPre::DoTokenizeOneTag(pchCopy, cch, this, NULL, 0, 0, FALSE, NULL));
    if (hr)
        goto Cleanup;

    _cEnqueued += 1;

Cleanup:
    RRETURN(hr);
}

//+---------------------------------------------------------------------------
//
//  Member:     CreateElement
//
//  Note:       If the etag is ETAG_NULL, the the string contains the name
//              of the tag to create (like "h1") or it can contain an
//              actual tag (like "<h1 foo=bar>").
//
//              If etag is not ETAG_NULL, then the string contains the
//              arguments for the new element.
//
//----------------------------------------------------------------------------

HRESULT
CMarkup::CreateElement (
    ELEMENT_TAG etag, CElement * * ppElementNew, TCHAR * pch, long cch )
{
    HRESULT hr = S_OK;
    CHtmTag ht, * pht = NULL;
    TCHAR * pchTag = NULL;
    long    cchTag = 0;
    CStr    strTag;     // In case we have to build "<name attrs>"
    CHtmTagQueue * phtq = NULL;

    ht.Reset();

    Assert( ppElementNew );
    Assert( etag != ETAG_ROOT );

    *ppElementNew = NULL;

    //
    // Here we check for the various kinds of input to this function.
    //
    // After this checking, we will either have pht != NULL which is
    // ready for use to pass to create element, or we will have a string
    // (pchTag, cchTag) which is appropriate for passing to the 'parser'
    // for creating an element.
    //

    if (etag != ETAG_NULL)
    {
        if (!pch || cch <= 0)
        {
            pht = & ht;
        }
        else
        {
            const TCHAR * pchName = NameFromEtag( etag );

            if (!pchName || !*pchName)
            {
                pht = & ht;
            }
            else
            {
                hr = THR( strTag.Append( _T("<"), 1 ) );

                if (hr)
                    goto Cleanup;

                hr = THR( strTag.Append( pchName ) );

                if (hr)
                    goto Cleanup;

                hr = THR( strTag.Append( _T(" "), 1 ) );

                if (hr)
                    goto Cleanup;

                hr = THR( strTag.Append( pch, cch ) );

                if (hr)
                    goto Cleanup;

                hr = THR( strTag.Append( _T(">"), 1 ) );

                if (hr)
                    goto Cleanup;

                pchTag = strTag;
                cchTag = strTag.Length();
            }
        }

        if (pht)
        {
            Assert( pht == & ht );
            ht.Reset();
            ht.SetTag( etag );
        }
    }
    else
    {
        if (pch && cch > 2 && *pch == _T('<'))
        {
            pchTag = pch;
            cchTag = cch;
        }
        else
        {
            pht = & ht;
            pht->Reset();
            pht->SetPch(pch);
            pht->SetCch(cch);
            ht.SetTag( EtagFromName( pch, cch ) );
        }
    }

    //
    //
    //

    if (!pht && pchTag && cchTag)
    {
        Assert( *pchTag == _T('<') );

        phtq = new CHtmTagQueue;

        if (!phtq)
        {
            hr = E_OUTOFMEMORY;
            goto Cleanup;
        }

        hr = THR( phtq->ParseAndEnqueueTag( pchTag, cchTag ) );

        if (hr)
            goto Cleanup;

        pht = phtq->DequeueTag();
    }

    if (!pht)
    {
        hr = E_FAIL;
        goto Cleanup;
    }

    if (pht->GetTag() == ETAG_NULL)
    {
        BOOL                fQueryHost;
        CExtendedTagDesc *  pDesc;

        {
            CTagNameCracker     c(pht->GetPch());
            
            pDesc = GetExtendedTagDesc(c._pchNamespace, c._pchTagName, /* fEnsure = */TRUE, &fQueryHost);
        }

        // If we're supposed to query, then give them a chance to add the tag.
        if( !pht->IsEnd() && fQueryHost )
        {
            pht->SetTag(ETAG_RAW_RESOLVE);
            Assert( _pDoc->_pExtendedTagTableHost );

            IGNORE_HR( _pDoc->_pExtendedTagTableHost->ResolveUnknownTag( pht ) );

            {
                CTagNameCracker     c(pht->GetPch());
            
                pDesc = GetExtendedTagDesc(c._pchNamespace, c._pchTagName, TRUE);
            }

        }
        if (pDesc)
        {
            // Normally the tokenizer would do this conversion, but we don't have one.
            if( pDesc->_etagBase == ETAG_GENERIC_NESTED_LITERAL )
            {
                pht->SetTag( ETAG_GENERIC_LITERAL );
            }
            else
            {
                pht->SetTag(pDesc->_etagBase);
            }
            pht->SetExtendedTag();
        }
        else
            pht->SetTag( ETAG_UNKNOWN );


        ht.SetPch( pch );
        ht.SetCch( cch );
    }

    pht->SetDynamic();

    hr = THR(::CreateElement(pht, ppElementNew, Doc(), this, NULL, INIT2FLAG_EXECUTE));
    if (hr)
        goto Cleanup;

    // For anyone that actually HAS an end tag, make it look like we saw one.
    if ( HpcFromEtag((*ppElementNew)->Tag())->_scope != SCOPE_EMPTY )
        (*ppElementNew)->_fExplicitEndTag = TRUE;

Cleanup:

    if (phtq)
        phtq->Release();

    RRETURN( hr );
}


#if DBG!=1
#pragma optimize("", on)
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\download\htmpost.cxx ===
//+------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1992 - 1995.
//
//  File:       htmpost.cxx
//
//  Contents:   Implementation of CHtmPost class
//
//-------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_HTM_HXX_
#define X_HTM_HXX_
#include "htm.hxx"
#endif

#ifndef X_FORMKRNL_HXX_
#define X_FORMKRNL_HXX_
#include "formkrnl.hxx"
#endif

#ifndef X_DOCGLBS_HXX_
#define X_DOCGLBS_HXX_
#include "docglbs.hxx"
#endif

#ifndef X_ESCRIPT_HXX_
#define X_ESCRIPT_HXX_
#include "escript.hxx"
#endif

#ifndef X_EBODY_HXX_
#define X_EBODY_HXX_
#include "ebody.hxx"
#endif

#ifndef X_FRAMESET_HXX_
#define X_FRAMESET_HXX_
#include "frameset.hxx"
#endif

#ifndef X_DIV_HXX_
#define X_DIV_HXX_
#include "div.hxx"
#endif

#ifndef X_URLCOMP_HXX_
#define X_URLCOMP_HXX_
#include "urlcomp.hxx"
#endif

#ifndef X_ROOTELEM_HXX
#define X_ROOTELEM_HXX
#include "rootelem.hxx"
#endif

#ifndef X_INTL_HXX_
#define X_INTL_HXX_
#include "intl.hxx"
#endif

#ifndef X_VMEM_HXX_
#define X_VMEM_HXX_
#include "vmem.hxx"
#endif

#ifndef X_SWITCHES_HXX_
#define X_SWITCHES_HXX_
#include "switches.hxx"
#endif

#ifndef X_XMLNS_HXX_
#define X_XMLNS_HXX_
#include "xmlns.hxx"
#endif

#ifndef X_DEBUGGER_HXX_
#define X_DEBUGGER_HXX_
#include "debugger.hxx"
#endif

#ifndef X_PRGSNK_H_
#define X_PRGSNK_H_
#include "prgsnk.h"
#endif

#ifndef X_PEER_HXX_
#define X_PEER_HXX_
#include "peer.hxx"
#endif

#ifndef X_PEERXTAG_HXX_
#define X_PEERXTAG_HXX_
#include "peerxtag.hxx"
#endif


#define HTMPOST_BUFFER_SIZE     4096
#define HTMPOST_BUFFER_GROW     2048
#define POSTMAN_TIMESLICE       200

PerfDbgTag(tagHtmPost,      "Dwn", "Trace CHtmPost")
PerfDbgTag(tagOneToken,     "Dwn", "! HtmPost one token at a time");
PerfDbgTag(tagAllTokens,    "Dwn", "! HtmPost all available tokens at once");
PerfDbgTag(tagToken2,       "Dwn", "! HtmPost detailed token trace");
PerfDbgTag(tagParseSlowly,  "Dwn", "! HtmPost parse slowly")
PerfDbgTag(tagStrictPch,    "Dwn", "! HtmPost strict unterminated strings")
PerfDbgTag(tagPostExec,     "Dwn", "Trace CHtmPost::Exec")
ExternTag(tagPalette);

PerfDbgExtern(tagPerfWatch)

MtDefine(CHtmPost, Dwn, "CHtmPost")
MtDefine(CHtmPost_aryphtSaved_pv, CHtmPost, "CHtmPost::_aryphtSaved::_pv")
MtDefine(CHtmPost_IsIndexHack_phtInput, Locals, "CHtmPost::IsIndexHack phtInput")
MtDefine(CHtmPost_ProcessIncludeToken_pchUrl, Locals, "CHtmPost::ProcessIncludeToken pchUrl")
MtDefine(CHtmPost_OnIncludeDwnChan_pbBuffer, Locals, "CHtmPost::OnIncludeDwnChan pbbuffer")
MtDefine(CHtmPost_OnIncludeDwnChan_pchSrcCode, Locals, "CHtmPost::OnIncludeDwnChan pchSrcCode")

DeclareTag(tagPeerCHtmPostRegisterXmlNamespace,  "Peer", "trace CHtmPost::RegisterXmlNamespace")

#if DBG != 1
#pragma optimize(SPEED_OPTIMIZE_FLAGS, on)
#endif

// Forward Declarations -------------------------------------------------------

void CALLBACK   PostManOnTimer(HWND hwnd, UINT umsg, UINT_PTR idevent, DWORD dwTime);
void            PostManSetTimer(THREADSTATE * pts);
void            PostManExecute(THREADSTATE * pts, DWORD dwTimeout, CHtmPost * pHtmPost);
HRESULT         PostManRunNested(THREADSTATE *pts, CHtmPost *pHtmPost);
void            PostManValidate();

//+------------------------------------------------------------------------
//
//  Member:     TraceToken
//
//-------------------------------------------------------------------------

#if DBG==1

#define PRETTY_CHAR(ch) ((ch) < 32 ? _T('~') : (ch) > 127 ? _T('@') : (ch))

void
TraceToken(CHtmPost *pHtmPost, CHtmTag *pht)
{
    if (pht)
    {
        if (pht->Is(ETAG_RAW_TEXT) || pht->Is(ETAG_RAW_COMMENT) || pht->Is(ETAG_RAW_TEXTFRAG))
        {
            TCHAR ach[128];
            char *pchTagName;
            UINT cch = min((UINT) ARRAY_SIZE(ach) - 1, (UINT)pht->GetCch());

            memcpy(ach, pht->GetPch(), cch * sizeof(TCHAR));
            ach[cch] = 0;
            for (TCHAR * pchT = ach; cch; --cch, ++pchT)
                *pchT = PRETTY_CHAR(*pchT);

            pchTagName = pht->Is(ETAG_RAW_TEXT) ? "TEXT" :
                         pht->Is(ETAG_RAW_COMMENT) ? "COMMENT" :
                         pht->Is(ETAG_RAW_SOURCE) ? "SOURCE" :
                         "TEXTFRAG";

            PerfDbgLog4(tagToken2, pHtmPost, "etag = %3ld %s cch=%ld \"%ls\"", pht->GetTag(),
                        pchTagName, pht->GetCch(), ach);
        }
        else if (pht->Is(ETAG_RAW_SOURCE))
        {
            PerfDbgLog2(tagToken2, pHtmPost, "etag = %3ld SOURCE cch=%ld",
                        pht->GetTag(), pht->GetSourceCch());
        }
        else if (pht->Is(ETAG_RAW_CODEPAGE))
        {
            PerfDbgLog3(tagToken2, pHtmPost, "etag = %3ld CODEPAGE cp=%ld fRestart=%ld",
                        pht->GetTag(), pht->GetCodepage(), pht->IsRestart());
        }
        else if (pht->Is(ETAG_RAW_DOCSIZE))
        {
            PerfDbgLog2(tagToken2, pHtmPost, "etag = %3ld DOCSIZE ulSize=%ld",
                        pht->GetTag(), pht->GetDocSize());
        }
        else if (pht->Is(ETAG_RAW_EOF))
        {
            PerfDbgLog1(tagToken2, pHtmPost, "etag = %3ld EOF", pht->GetTag());
        }
        else if (pht->Is(ETAG_SCRIPT) && !pht->IsEnd())
        {
            PerfDbgLog5(tagToken2, pHtmPost, "etag = %3ld <%lsSCRIPT%ls> ulLine=%ld ulOffset=%ld",
                        pht->GetTag(), pht->IsEnd() ? _T("/") : _T(""),
                        pht->IsEmpty() ? _T(" /") : _T(""), pht->GetLine(), pht->GetOffset());
        }
        else if (pht->GetTag() > ETAG_NULL && pht->GetTag() < ETAG_GENERIC)
        {
            PerfDbgLog4(tagToken2, pHtmPost, "etag = %3ld <%ls%ls%ls>",
                        pht->GetTag(), pht->IsEnd() ? _T("/") : _T(""),
                        NameFromEtag(pht->GetTag()), pht->IsEmpty() ? _T(" /") : _T(""));
        }
        else if (pht->Is(ETAG_RAW_BEGINSEL) || pht->Is(ETAG_RAW_ENDSEL))
        {
            PerfDbgLog2(tagToken2, pHtmPost, "etag = %3ld %ls",
                pht->GetTag(), pht->Is(ETAG_RAW_BEGINSEL) ? _T("BEGINSEL") : _T("ENDSEL"));
        }
        else if (pht->Is(ETAG_RAW_RESOLVE))
        {
            PerfDbgLog2(tagToken2, pHtmPost, "etag = %3ld RESOLVE %ls",
                pht->GetTag(), pht->GetPch() );
        }
        else
        {
            Assert(!pht->IsTiny());
            PerfDbgLog4(tagToken2, pHtmPost, "etag = %3ld <%ls%ls%ls>",
                        pht->GetTag(), pht->IsEnd() ? _T("/") : _T(""),
                        (!pht->IsTiny() && pht->GetPch()) ? pht->GetPch() : _T("(nil)"),
                        pht->IsEmpty() ? _T(" /") : _T(""));
        }

        CHtmTag::CAttr *pattr;
        int i = pht->GetAttrCount();

        if (i > 0)
        {
            for (pattr = pht->GetAttr(0); i; i--, pattr++)
            {
                PerfDbgLog2(tagToken2, pHtmPost, "       attr  %ls = %ls", pattr->_pchName, !pattr->_pchVal ? _T("NULL") : pattr->_pchVal);
            }
        }
    }
}

#else

#define TraceToken(post, pht)

#endif

//+------------------------------------------------------------------------
//
//  Member:     CHtmPost::Init
//
//  Synopsis:   Hooks up the post parser to the doc (for output),
//              post channel  (for input), and load ctx (for notification)
//
//-------------------------------------------------------------------------
HRESULT
CHtmPost::Init(CHtmLoad * pHtmLoad, CHtmTagStm * pHtmTagStm,
    CDoc * pDoc, CMarkup * pMarkup, HTMPASTEINFO * phpi, BOOL fSync)
{
    HRESULT hr;

    _dwFlags    = POSTF_ONETIME | (phpi ? POSTF_PASTING : 0);
    _pDoc       = pDoc;
    _pMarkup    = pMarkup;
    _pHtmLoad   = pHtmLoad;
    _pHtmTagStm = pHtmTagStm;
    _pMarkup    = pMarkup;
    _pNodeRoot  = _pMarkup->Root()->GetFirstBranch();
    _phpi       = phpi;

#ifdef CLIENT_SIDE_INCLUDE_FEATURE
    _dwIncludeDownloadCookie = NULL;
#endif

    _pDoc->SubAddRef();
    _pMarkup->SubAddRef();
    _pHtmLoad->SubAddRef();
    _pHtmTagStm->AddRef();

    _pHtmParse  = new CHtmParse;

    if (!_pHtmParse)
    {
        hr = E_OUTOFMEMORY;
        goto Cleanup;
    }

    hr = THR(_pHtmParse->Init(_pDoc, _pMarkup, _pNodeRoot));
    if (hr)
        goto Cleanup;

    if (_dwFlags & POSTF_DIE)
    {
        hr = E_ABORT;
        goto Cleanup;
    }

    // hook up async notification if not parsing synchronously

    if (!fSync)
    {
        _pHtmTagStm->SetCallback(OnDwnChanCallback, this);
    }

    if (_pMarkup->GetPicsTarget() && _pMarkup->_fPicsProcessPending)
    {
        _fScanMode = TRUE;
    }

Cleanup:
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPost::OnDwnChanCallback
//
//  Synopsis:   Callback when post stream has more data
//
//-------------------------------------------------------------------------
void CALLBACK
CHtmPost::OnDwnChanCallback(void * pvObj, void * pvArg)
{
    PerfDbgLog(tagPerfWatch, pvObj, "+CHtmPost::OnDwnChanCallback");
    PerfDbgLog(tagHtmPost, pvObj, "+CHtmPost::OnDwnChanCallback");

#ifdef SWITCHES_ENABLED
    if (    !IsSwitchSerialize()
        ||  ((CHtmPost *)pvArg)->_pHtmTagStm->IsEofWritten()
        ||  ((CHtmPost *)pvArg)->_pHtmLoad->_pHtmPre->IsSuspended())
        PostManResume((CHtmPost *)pvArg, TRUE);
#else
    PostManResume((CHtmPost *)pvArg, TRUE);
#endif

    PerfDbgLog(tagHtmPost, pvObj, "-CHtmPost::OnDwnChanCallback");
    PerfDbgLog(tagPerfWatch, pvObj, "-CHtmPost::OnDwnChanCallback");
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPost::RunNested
//
//  Synopsis:   Runs the parser for script, in a nested context.
//
//              Allowed to be called recursively (unlike ::Exec)
//
//-------------------------------------------------------------------------
HRESULT
CHtmPost::RunNested()
{
    PerfDbgLog(tagPerfWatch, this, "+CHtmPost::RunNested");

    DWORD   dwFlagsSav;
    HRESULT hr;

    // save nested state
    dwFlagsSav = (_dwFlags & (POSTF_RESUME_PREPARSER | POSTF_NESTED));

    // set initial nested state
    Assert(!(_dwFlags & POSTF_NEED_EXECUTE)); // does not need saving

    _dwFlags &= ~POSTF_RESUME_PREPARSER;
    _dwFlags |= POSTF_NESTED;

    // stop this post from running on message loop; and run to exhaustion
    hr = THR(Exec(INFINITE));

    // restore nested state
    _dwFlags = (_dwFlags & ~(POSTF_RESUME_PREPARSER | POSTF_NESTED)) | dwFlagsSav;

    PerfDbgLog(tagPerfWatch, this, "-CHtmPost::RunNested");

    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     TagIsHiddenInput
//
//  Synopsis:   TRUE if tag is <INPUT TYPE=HIDDEN>
//
//-------------------------------------------------------------------------
BOOL
TagIsHiddenInput(CHtmTag * pht)
{
    TCHAR *pchType;
    long iType;

    if (pht->GetTag() != ETAG_INPUT)
        return FALSE;

    if (!pht->ValFromName(_T("type"), &pchType) ||
            FAILED(s_enumdeschtmlInput.EnumFromString(pchType, &iType, FALSE)))
    {
        iType = htmlInputText;
    }

    return (iType == htmlInputHidden);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPost::Exec
//
//  Synopsis:   Runs the parser
//
//-------------------------------------------------------------------------
HRESULT
CHtmPost::Exec(DWORD dwTimeout)
{
    PerfDbgLog(tagPerfWatch, this, "+CHtmPost::Exec");
    PerfDbgLog(tagPostExec, this, "+CHtmPost::Exec");

    HRESULT hr = S_OK;

#if DBG==1 || defined(PERFTAGS)
    if (IsPerfDbgEnabled(tagAllTokens))
        dwTimeout = INFINITE;
#endif

#ifdef SWITCHES_ENABLED
    if (IsSwitchSerialize())
        dwTimeout = INFINITE;
#endif

    if (_dwFlags & (POSTF_SLEEP | POSTF_DIE | POSTF_ONETIME))
    {
        if (_dwFlags & (POSTF_SLEEP | POSTF_DIE))
        {
            // This can happen because CHtmPostTask can get awakened by a call
            // to OnChan which happened some time ago.  It will unlock and run
            // itself once and we'll end up getting called.  But we really don't
            // want to do anything, so we just return.  It will then call our
            // IsPending method and put the task back to sleep.
            goto Cleanup;
        }

        PerfDbgLog1(tagToken2, this, "Beginning CHtmPost processing of %ls ----------------------------------------",
                    _pDoc->GetPrimaryUrl());

        hr = THR(_pHtmLoad->OnPostStart());
        if (hr)
            goto Cleanup;

        _dwFlags &= ~POSTF_ONETIME;
    }

    do
    {
        if (!_fScanMode)
        {
            if (!(_dwFlags & (POSTF_NEED_EXECUTE | POSTF_RESUME_PREPARSER)))
            {
                // prepare parsers for a run of tokens

                hr = THR(Broadcast(CHtmParse::Prepare));
                if (hr)
                    goto Cleanup;

                // read tokens until out of time or out of tokens (try at least once)

                if (!IsAtEof())
                {
                    hr = THR(ProcessTokens(dwTimeout));
                    if (hr)
                        goto Cleanup;

                    if (_dwFlags & POSTF_DIE)
                    {
                        hr = E_ABORT;
                        goto Cleanup;
                    }
                }

                if (!IsAtEof() && !(_dwFlags & POSTF_RESTART))
                {
                    // commit parsers

                    hr = THR(Broadcast(CHtmParse::Commit));
                    if (hr)
                        goto Cleanup;
                }
                else
                {
                    // flush through EOF text token to create <BODY> etc
                    CNotification   nf;

                    CHtmTag ht;

                    ht.Reset();
                    ht.SetTag(ETAG_RAW_EOF);
                    ht.SetPch(NULL);
                    ht.SetCch(0);

                    TraceToken(this, &ht);

                    hr = THR(_pHtmParse->ParseToken(&ht));
                    if (hr)
                        goto Cleanup;

                    hr = THR(Broadcast(CHtmParse::Finish));
                    if (hr)
                        goto Cleanup;

                    // CONSIDER (EricVas) Note to DBau - work this into the parser scheme

                    nf.EndParse(_pMarkup->Root());
                    _pMarkup->Root()->Notify(&nf);

                    // Grab the left and right selection pos'es
                    if (_phpi)
                    {
                        _pHtmParse->GetPointers(&(_phpi->ptpSelBegin), &(_phpi->ptpSelEnd));
                    }

                    if (!(_dwFlags & POSTF_RESTART))
                    {
                        // Wait for inplace activation after processing EOF.  Pretend we need execution to
                        // keep IsDone from going TRUE while we wait.

                        _dwFlags |= POSTF_WAIT | POSTF_NEED_EXECUTE;
                    }
                }
            }

            //
            // Block the parser if we need to (our execute will happen
            // after we unblock)
            //

            if (_dwFlags & POSTF_WAIT)
            {
                if (!(_dwFlags & POSTF_DONTWAITFORINPLACE))
                {
                    _pDoc->_fNeedInPlaceActivation = TRUE;
                }

                if (!_pMarkup->AllowScriptExecution())
                {
                    // This will put the htmpost to sleep until the script
                    // can be executed.

                    _pMarkup->BlockScriptExecutionHelper();
                    if (_dwFlags & POSTF_SLEEP)
                        goto Cleanup;

                    Assert(_pMarkup->AllowScriptExecution());
                }

                // (alexz, jbeda)
                // in the following calls do the "if" here not relying on the same "if" in CDoc code so
                // to avoid touching that code if it is not necessary. This approach yields a few percent points
                // on some perf cases (e.g. xltypical)
                //

                // If we got here, we are allowed to do script execution so
                // make sure that any identity peer is processed
                if (_pMarkup->GetFrameOrPrimaryMarkup()->HasIdentityPeerTask())
                {
                    // NB (jbeda)
                    // Don't let processing peer tasks add to the amount of time the parser
                    // spends parsing.  This will actually cause us to thrash in some cases and 
                    // take longer.  The real solution is to make our time slice much more dynamic
                    DWORD dwTimeBefore = GetTickCount();
                    _pMarkup->GetFrameOrPrimaryMarkup()->ProcessIdentityPeerTask();
                    if (dwTimeout != INFINITE)
                        dwTimeout += GetTickCount() - dwTimeBefore;
                }

                _dwFlags &= ~(POSTF_WAIT | POSTF_DONTWAITFORINPLACE);
            }

            // launching processing the task queue here is very usefull to avoid reentrancy scenarios from within GetDispID
            if (_pMarkup->GetFrameOrPrimaryMarkup()->HasPeerTasks())
            {
                // NB (jbeda) same note as above - don't count time spent on peers
                DWORD dwTimeBefore = GetTickCount();
                _pMarkup->GetFrameOrPrimaryMarkup()->ProcessPeerTasks(0);
                if (dwTimeout != INFINITE)
                    dwTimeout += GetTickCount() - dwTimeBefore;
            }

            if (_dwFlags & POSTF_NEED_EXECUTE)
            {           
                //
                // The parser is now in a clean state, we can execute
                //

                _dwFlags &= ~POSTF_NEED_EXECUTE;
                              
                // execute
                hr = THR(Broadcast(&CHtmParse::Execute));
                if (hr || (_dwFlags & (POSTF_SLEEP | POSTF_DIE)))
                    goto Cleanup;
            }

            // If the preparser needs to be resumed, we must have exhausted all tokens
            Assert(!(_dwFlags & POSTF_RESUME_PREPARSER) || IsPending());
        }
        else if(!(_dwFlags & POSTF_RESUME_PREPARSER))
        {
            hr = THR(ScanTokens(dwTimeout));
            if (hr)
                goto Cleanup;
        }

#if DBG==1 || defined(PERFTAGS)
        if (dwTimeout != INFINITE && IsPerfDbgEnabled(tagOneToken))
            break;
#endif

        if (GetTickCount() > dwTimeout)
            break;

        if (_dwFlags & POSTF_RESTART)
            break;

    } while (!IsPending() && !IsAtEof());


    // Check to see if we found an author palette (or if it's too late)
    if (!_pDoc->_fGotAuthorPalette)
    {
        if (    _pDoc->PrimaryMarkup()
            &&  _pDoc->PrimaryMarkup()->GetDwnDoc()
            && _pDoc->PrimaryMarkup()->GetDwnDoc()->GotAuthorPalette())
        {
            TraceTag((tagPalette, "Checking for author palette in pDwnDoc %08x %d", _pDoc, _pDoc->PrimaryMarkup()->GetDwnDoc()->GotAuthorPalette()));
            _pDoc->_fGotAuthorPalette = TRUE;
            _pDoc->InvalidateColors();
        }
    }

    // launching processing the task queue here is very usefull to avoid reentrancy scenarios from within GetDispID
    _pMarkup->GetFrameOrPrimaryMarkup()->ProcessPeerTasks(0);

    // resume the preparser after recursive invokation of scripts

    if (_dwFlags & POSTF_RESUME_PREPARSER)
    {
        _dwFlags &= ~POSTF_RESUME_PREPARSER;
        _pHtmLoad->ResumeHtmPre();
    }

    // If the parse needs to be restarted do it now.

    if ( ( _dwFlags & POSTF_RESTART ) && 
        !( _dwFlags & POSTF_DIE ) )
    {
        hr = THR(_pHtmLoad->OnPostRestart(_cpRestart));
        goto Cleanup;
    }

Cleanup:
    PerfDbgLog(tagPostExec, this, "-CHtmPost::Exec");
    PerfDbgLog(tagPerfWatch, this, "-CHtmPost::Exec");
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPost::Broadcast
//
//  Synopsis:   Prepares each context for possible parsing
//
//-------------------------------------------------------------------------
HRESULT CHtmPost::Broadcast(HRESULT (BUGCALL CHtmParse::*pfnAction)())
{
    HRESULT hr;

    hr = THR(CALL_METHOD(_pHtmParse, pfnAction, ()));
    if (hr)
    {
        _dwFlags |= POSTF_DIE;
        goto Cleanup;
    }

    if (_dwFlags & POSTF_DIE)
    {
        hr = E_ABORT;
        goto Cleanup;
    }

    if (_pHtmParse->NeedExecute())
    {
        _dwFlags |= POSTF_NEED_EXECUTE;
    }

Cleanup:
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPost::IsPending
//
//  Synopsis:   TRUE if blocked, but expecting to become unblocked
//
//-------------------------------------------------------------------------
BOOL CHtmPost::IsPending()
{
    BOOL fDataPend = _fScanMode ? _pHtmTagStm->IsScanPending() : _pHtmTagStm->IsPending();
    BOOL fPostPend = (_dwFlags & POSTF_SLEEP) || fDataPend;

    PerfDbgLog3(tagHtmPost, this, "CHtmPost::IsPending "
        "(fSleep: %s, fDataPend: %s) --> %s",
        (_dwFlags & POSTF_SLEEP) ? "T" : "F", fDataPend ? "T" : "F",
        fPostPend ? "TRUE" : "FALSE");

    return(fPostPend);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPost::IsAtEof
//
//  Synopsis:   TRUE if there will never be any more data to process.
//
//              Always false when inside RunNested (EOF must only be
//              processed at the top level).
//
//-------------------------------------------------------------------------
BOOL CHtmPost::IsAtEof()
{
    BOOL fDataEof = _pHtmTagStm->IsEof();
    BOOL fPostEof = !(_dwFlags & POSTF_NESTED) && ((_dwFlags & POSTF_STOP) || fDataEof);

    PerfDbgLog3(tagHtmPost, this, "CHtmPost::IsAtEof "
        "(fDataEof: %s, fStop: %s) --> %s",
        fDataEof ? "T" : "F", (_dwFlags & POSTF_STOP) ? "T" : "F",
        fPostEof ? "TRUE" : "FALSE");

    return(fPostEof);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPost::IsDone
//
//  Synopsis:   TRUE if done.
//
//-------------------------------------------------------------------------
BOOL CHtmPost::IsDone()
{
    BOOL fAtEof = IsAtEof();
    BOOL fPostDone = fAtEof && !(_dwFlags & (POSTF_NEED_EXECUTE | POSTF_RESUME_PREPARSER)) && !_fScanMode;

    PerfDbgLog5(tagHtmPost, this, "CHtmPost::IsDone "
        "(IsAtEof: %s, fNeedExecute: %s, fResumePreparser: %s, _fScanMode: %s) --> %s",
        fAtEof ? "T" : "F", (_dwFlags & POSTF_NEED_EXECUTE) ? "T" : "F",
        (_dwFlags & POSTF_RESUME_PREPARSER) ? "T" : "F",
        _fScanMode ? "T" : "F",
        fPostDone ? "TRUE" : "FALSE");

    return(fPostDone);
}

//+------------------------------------------------------------------------
//
//  Function:   IsDiscardableFramesetTag
//
//  Synopsis:   Determines if pht is a <FRAMESET> tag that NS 3.0
//              discards.
//
//-------------------------------------------------------------------------
BOOL IsDiscardableFramesetTag(CHtmTag *pht)
{
    TCHAR *pchR;
    TCHAR *pchC;
    return ((pht->IsBegin(ETAG_FRAMESET) &&
        (!pht->ValFromName(_T("ROWS"), &pchR) || !pchR || !_tcschr(pchR, _T(','))) &&
        (!pht->ValFromName(_T("COLS"), &pchC) || !pchC || ! _tcschr(pchC, _T(','))))
        ||
        pht->Is(ETAG_RAW_EOF));
}


//+----------------------------------------------------------------------------
//  
//  Method:     CHtmPost::ScanTokens
//  
//  Synopsis:   [Synopsis]
//  
//  Returns:    HRESULT
//  
//  Arguments:
//          DWORD dwTimeout - 
//  
//+----------------------------------------------------------------------------

HRESULT
CHtmPost::ScanTokens(DWORD dwTimeout)
{
    CHtmTag *   pht;

NextToken:

    // If we're in scan mode, we just want to look for PICS META tags.
    pht = _pHtmTagStm->ScanTag( _phtScan );
    if( !pht )
    {
        // If we hit the end of the page, give up
        if( _pHtmTagStm->IsScanEof() ||
            _pHtmLoad->_pHtmPre->IsSuspended() )
            goto EndScan;

        goto Cleanup;
    }
    else
    {
        _phtScan = pht;

        if( pht->Is( ETAG_META ) )
        {
            CHtmTag::CAttr * pAttr;

            // TODO (JHarding): This can be faster since we know the lengths
            pAttr = pht->AttrFromName( _T("http-equiv") );
            if( pAttr )
            {
                if( pAttr->_cchVal == 10 && StrCmpIC( pAttr->_pchVal, _T("pics-label") ) == 0 )
                {
                    // This is what we're looking for.
                    pAttr = pht->AttrFromName( _T("content") );
                    if( pAttr )
                    {
                        _pMarkup->ProcessMetaPics( pAttr->_pchVal );
                    }
                }
            }
        }
        else if (pht->Is(ETAG_RAW_POSTSTART))
        {
            // (KusumaV) Since we suspended the pre-parser we need to resume it so we can 
            // continue scanning for tokens. If not we end up assuming that we are done
            // with the tokens and ignore the pics ratings in the meta tags.
            _dwFlags |= POSTF_RESUME_PREPARSER;
            _fResumedPreParserInScan = TRUE;
        }
        else if( pht->Is( ETAG_HEAD ) && pht->IsEnd() ||
                 pht->Is( ETAG_BODY ) )
        {
            goto EndScan;
        }
    }

    if (_dwFlags & (POSTF_NEED_EXECUTE | POSTF_RESUME_PREPARSER | POSTF_STOP | POSTF_WAIT))
        goto Cleanup;

    if (GetTickCount() > dwTimeout)
        goto Cleanup;

#if DBG==1 || defined(PERFTAGS)
    if (dwTimeout != INFINITE && IsPerfDbgEnabled(tagOneToken))
        goto Cleanup;
#endif

    goto NextToken;

EndScan:
    // Tell shdocvw we've hit the end of the page and suspend ourselves
    _pMarkup->ProcessMetaPicsDone();
    PostManSuspend(this);

Cleanup:
    RRETURN( S_OK );
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPost::ProcessTokens
//
//  Synopsis:   Rearranges tokens and sends them on to the head or body
//              parsers.
//
//              Contains the logic for sorting out the top-level structure
//              of a document: <!DOCTYPE>, <HTML>, <HEAD>, <BODY>, <FRAMESET>
//
//-------------------------------------------------------------------------
HRESULT CHtmPost::ProcessTokens(DWORD dwTimeout)
{
    CHtmTag *   pht = NULL;
    CHtmTag *   phtSlowProcess;
    CHtmTag     htSlowProcess;
    DWORD       dwFlags;
    HRESULT     hr = S_OK;

#if DBG==1 || defined(PERFTAGS)
    TCHAR *     pchVMem = NULL;
#endif

NextToken:

    pht = _pHtmTagStm->ReadTag(pht);
    if (pht == NULL)
        goto Cleanup;

#if DBG==1 || defined(PERFTAGS)
    if (    IsPerfDbgEnabled(tagStrictPch)
        &&  (pht->Is(ETAG_RAW_TEXT) || pht->Is(ETAG_RAW_COMMENT)))
    {
        if (pht->GetCch() == 0)
            pht->SetPch(NULL);
        else
        {
            VMemFree(pchVMem);
            pchVMem = (TCHAR *)VMemAlloc(pht->GetCch() * sizeof(TCHAR), VMEM_BACKSIDESTRICT);

            if (pchVMem)
            {
                memcpy(pchVMem, pht->GetPch(), pht->GetCch() * sizeof(TCHAR));
                pht->SetPch(pchVMem);
            }
        }
    }
#endif

    dwFlags = TagDescFromEtag(pht->GetTag())->_dwTagDescFlags;

    if(pht->IsExtendedTag())
    {
        dwFlags |= TAGDESC_ENTER_TREE_IMMEDIATELY | TAGDESC_SLOWPROCESS | TAGDESC_WAITATSTART;
    }

    if (dwFlags & TAGDESC_SLOWPROCESS)
    {
        goto SlowProcess;
    }

    TraceToken(this, pht);

    hr = THR(_pHtmParse->ParseToken(pht));
    if (hr)
        goto Cleanup;

ContinueProcess:

    if (_pHtmParse->NeedExecute())
    {
        _dwFlags |= POSTF_NEED_EXECUTE;
    }

    if (dwFlags & (TAGDESC_WAITATSTART|TAGDESC_WAITATEND))
    {
        if (pht->IsEnd())
        {
            if (dwFlags & TAGDESC_WAITATEND)
            {
                _dwFlags |= POSTF_WAIT;
            }

            if (pht->Is(ETAG_SCRIPT) && !pht->IsDefer())
            {
                _dwFlags |= POSTF_RESUME_PREPARSER;
            }
        }
        else if (dwFlags & TAGDESC_WAITATSTART)
        {
            _dwFlags |= POSTF_WAIT;
        }

        if ((_dwFlags & POSTF_WAIT) && (dwFlags & TAGDESC_DONTWAITFORINPLACE))
        {
            _dwFlags |= POSTF_DONTWAITFORINPLACE;
        }
    }

    if (_dwFlags & (POSTF_NEED_EXECUTE | POSTF_RESUME_PREPARSER | POSTF_STOP | POSTF_WAIT))
        goto Cleanup;

    if (GetTickCount() > dwTimeout)
        goto Cleanup;

#if DBG==1 || defined(PERFTAGS)
    if (dwTimeout != INFINITE && IsPerfDbgEnabled(tagOneToken))
        goto Cleanup;
#endif

    goto NextToken;

SlowProcess:
    phtSlowProcess = pht;

    // Process a codepage token, which can come anywhere
    if (pht->Is(ETAG_RAW_CODEPAGE))
    {
        TraceToken(this, pht);

        if(  _pMarkup->GetWindowedMarkupContext() == _pMarkup )
        {
            if (mlang().ValidateCodePage(g_cpDefault, pht->GetCodepage(), NULL, FALSE, _pDoc->_dwLoadf & DLCTL_SILENT) != S_OK)
            {
                // put original codepage back but we can no longer abort restarting here
                // if the original codepage was CP_AUTO, we have to use something guaranteed
                // to be valid on the system otherwise we'll get invoked again because of
                // detection.
                if (IsAutodetectCodePage(_pMarkup->GetCodePage()))
                {
                    pht->SetCodepage(g_cpDefault);
                    pht->SetRestart();
                }
                else
                    pht->SetCodepage(_pMarkup->GetCodePage());
            }

            if (pht->IsRestart())
            {
                _dwFlags |= POSTF_RESTART;
                _cpRestart = pht->GetCodepage();
            }
            else
            {

                hr = THR(_pMarkup->SwitchCodePage(pht->GetCodepage()));
                if (hr)
                    goto Cleanup;

                if (    !IsAutodetectCodePage(_pMarkup->GetCodePage())
                    ||  WindowsCodePageFromCodePage(pht->GetCodepage()) != CP_JPN_SJ)
                {
                    // Make sure the ParseCtx is in a sane state
                    // before EnsureFormatCacheChange
                    hr = THR(Broadcast(CHtmParse::Commit));
                    if (hr)
                        goto Cleanup;

                    // Do not force a relayout if we switched from Japanese
                    // autodetect to a Japanese family codepage.
                    _pMarkup->EnsureFormatCacheChange(
                        ELEMCHNG_CLEARCACHES|ELEMCHNG_REMEASURECONTENTS);

                    hr = THR(Broadcast(CHtmParse::Prepare));
                    if (hr)
                        goto Cleanup;
                }
            }

        }
        if (_pMarkup->GetDwnDoc())
            _pMarkup->GetDwnDoc()->SetLoadf(_pMarkup->GetDwnDoc()->GetLoadf() | DLCTL_NO_METACHARSET);

        goto Cleanup;
    }

    // Process a docsize token, which can come anywhere
    if (pht->Is(ETAG_RAW_DOCSIZE))
    {
        if (!(_dwFlags & POSTF_PASTING))
        {
            CMarkupScriptContext *  pScriptContext = _pMarkup->HasScriptContext() ? _pMarkup->ScriptContext() : NULL;

            TraceToken(this, pht);

            if (pScriptContext && pScriptContext->_pScriptDebugDocument)
            {
                IGNORE_HR(pScriptContext->_pScriptDebugDocument->SetDocumentSize(pht->GetDocSize()));
            }
        }
        goto Cleanup;
    }

    if (pht->Is(ETAG_RAW_EXTENDEDTAG))
    {
        if (!pht->IsEnd())
        {
            RegisterExtendedTagPI(pht);
        }
        goto ContinueProcess; // done with this token
    }

    if (pht->Is(ETAG_RAW_XMLNAMESPACE))
    {
        if(!pht->IsEnd())
        {
            RegisterXmlPI(pht);
            _pHtmLoad->ResumeHtmPre();
        }
        goto ContinueProcess; // done with this token
    }

#ifdef CLIENT_SIDE_INCLUDE_FEATURE
    if (pht->Is(ETAG_RAW_INCLUDE))
    {

        // so that people don't get the expectation that they can paste one of these
        // constructs into the middle of HTML and get it to expand;
        // instead, we should abort the paste operation

        if(_dwFlags & POSTF_PASTING)
        {
            hr = E_ABORT;
            goto Cleanup;
        }

        ProcessIncludeToken(pht);

        _dwFlags |= POSTF_RESUME_PREPARSER;

        goto ContinueProcess;
    }
#endif

    if( pht->Is(ETAG_RAW_RESOLVE) )
    {
        Assert( !pht->IsEnd() );

        // ResolveUnknownTag will convert pht into the proper tag.
        ResolveUnknownTag( pht );
        Assert( pht->Is( ETAG_UNKNOWN ) ||
                pht->Is( ETAG_GENERIC ) ||
                pht->Is( ETAG_GENERIC_LITERAL ) ||
                pht->Is( ETAG_GENERIC_NESTED_LITERAL ) );

        // If it was made an extended tag, adjust our dwFlags
        if( pht->IsExtendedTag() )
        {
            dwFlags |= TAGDESC_ENTER_TREE_IMMEDIATELY | TAGDESC_WAITATSTART;
        }
    }

    // NB (48236): some attributes on the body and frameset get delegated to the doc.  During
    // paste operations, we don't want these to clobber what the main doc already has.
    if (    _dwFlags & POSTF_PASTING
        &&  (   pht->IsBegin(ETAG_BODY)
            ||  pht->IsBegin(ETAG_FRAMESET)))
    {
        // Initialize htSlowProcess to empty tag
        phtSlowProcess = &htSlowProcess;
        htSlowProcess.Reset();
        htSlowProcess.SetTag( pht->GetTag() );
    }

    if ( pht->Is(ETAG_RAW_POSTSTART) )
    {
        // (KusumaV) Note: Posting this token would have kickstarted the post which sets the security ID 
        // on CDwndoc and CMarkup(for privacy implementation) which was the aim , so there's no need 
        // to do anything else here

        // We have to resume the preparser though if we haven't already done so in ScanTokens.
        if (!_fResumedPreParserInScan)
            _dwFlags |= POSTF_RESUME_PREPARSER;

        _fResumedPreParserInScan = FALSE;

        goto ContinueProcess;
    }

    hr = THR(ParseToken(phtSlowProcess));
    if (hr)
        goto Cleanup;

    if (dwFlags & TAGDESC_ENTER_TREE_IMMEDIATELY)
    {
        hr = THR(Broadcast(CHtmParse::Commit));
        if (hr)
            goto Cleanup;

        hr = THR(Broadcast(CHtmParse::Prepare));
        if (hr)
            goto Cleanup;
    }

    goto ContinueProcess;

Cleanup:

#if DBG==1 || defined(PERFTAGS)
    VMemFree(pchVMem);
#endif
    RRETURN(hr);
}

#ifdef CLIENT_SIDE_INCLUDE_FEATURE

//+------------------------------------------------------------------------
//
//  Member:     CHtmPost::ProcessIncludeToken
//
//  Synopsis:    Starts download of referenced url in include token
//
//-------------------------------------------------------------------------
HRESULT
CHtmPost::ProcessIncludeToken(CHtmTag *pht)
{
    Assert(pht->Is(ETAG_RAW_INCLUDE));

    HRESULT    hr;
    CBitsCtx *      pBitsCtx = NULL;
    TCHAR *pchUrl = NULL;
    TCHAR *pchData;
    ULONG ulCount;
    ULONG ulUrlSize;

    ULONG pos1, pos4;
    TCHAR *pchnonwhitespace = NULL, *pchbeg = NULL, *pchend = NULL, *pchInfo = NULL;
    TCHAR *pchInclude = _T("include");
    int   cchInclude = _tcslen(pchInclude);
    TCHAR chQuote = _T('\0');

    CElement *pCurrentElement = NULL;

    pchData = pht->GetPch();
    ulCount = pht->GetCch();

    //
    // skip passed the "include" string then begin parsing
    //

    for (pos4 = 0; pos4 < ulCount - cchInclude; pos4++)
    {
        if (_tcsnicmp(pchData + pos4, cchInclude, pchInclude, cchInclude) == 0)
        {
            pchInfo = pchData + pos4 + cchInclude;
            ulCount = ulCount - pos4 - cchInclude;
            break;
        }
    }

    // if "include" string not found, something tragic has occured so exit

    if (!pchInfo)
    {
        hr = E_INVALIDARG;
        goto Cleanup;
    }

    // Back up within the ']>' to delimit parsing
    while (ulCount && pchInfo[ulCount - 1] != _T(']'))
        ulCount -= 1;

    // if "]" string not found, something tragic has occured so exit

    if (ulCount <= 1)
    {
        hr = E_INVALIDARG;
        goto Cleanup;
    }

    // chop off ']'

    ulCount -= 1;


    // get the fist nonwhitespace character

    for (pos1 = 0; pos1 < ulCount; pos1++)
    {
        TCHAR *pchcurrent = pchInfo + pos1;

        if (!ISSPACE(*pchcurrent))
        {
            pchnonwhitespace = pchcurrent;
            break;
        }
    }

    // if no non-whitespace chars encountered we must have run off
    // the end, so leave

    if (!pchnonwhitespace)
        goto Cleanup;

    // try to match quotes etc

    if (ISQUOTE(*pchnonwhitespace))
    {
        chQuote = *pchnonwhitespace;
        pchbeg = pchnonwhitespace + 1;
        for (pchend = pchbeg; (unsigned)(pchend - pchInfo) < ulCount; pchend += 1)
        {
            if (*pchend == chQuote)
                break;
        }
    }
    else
    {
        pchbeg = pchnonwhitespace;
        for (pchend = pchbeg; (unsigned)(pchend - pchInfo) < ulCount; pchend += 1)
        {
            if (ISSPACE(*pchend))
                break;
        }
    }

    // create a new string and copy characters from the established
    // url beginning and end

    ulUrlSize = pchend - pchbeg;

    if (!ulUrlSize)
    {
        hr = E_INVALIDARG;
        goto Cleanup;
    }

    // Limit number of includes

    #define MAX_INCLUDES 1024

    if (_ulIncludes >= MAX_INCLUDES)
        goto Cleanup;

    _ulIncludes += 1;

    hr = THR(MemAllocStringBuffer(Mt(CHtmPost_ProcessIncludeToken_pchUrl), ulUrlSize, pchbeg, &pchUrl));
    if (hr)
        goto Cleanup;

    ProcessValueEntities(pchUrl, &ulUrlSize);

    pCurrentElement = _pHtmParse->GetCurrentElement();

    // Security check: access allowed?
    {
        TCHAR   cBuf[pdlUrlLen];
        hr = THR(_pDoc->ExpandUrl(pchUrl, ARRAY_SIZE(cBuf), cBuf, pCurrentElement));
        if (hr)
            goto Cleanup;

        // Access not allowed: do nothing
        if (!_pDoc->AccessAllowed(cBuf))
            goto Cleanup;
    }

    hr = THR(_pDoc->NewDwnCtx(DWNCTX_BITS, pchUrl, pCurrentElement, (CDwnCtx **) &pBitsCtx, FALSE, PROGSINK_CLASS_CONTROL));
    if (hr)
        goto Cleanup;

    if (_pBitsCtxInclude)
        _pBitsCtxInclude->Release();

    pBitsCtx->AddRef();
    _pBitsCtxInclude = pBitsCtx;

    _pMarkup->EnterScriptDownload(&_dwIncludeDownloadCookie);

    if (pBitsCtx->GetState() & (DWNLOAD_COMPLETE | DWNLOAD_ERROR | DWNLOAD_STOPPED))
    {
        OnIncludeDwnChan(pBitsCtx);
    }
    else
    {
        pBitsCtx->SetProgSink(_pDoc->GetProgSink());
        pBitsCtx->SetCallback(OnIncludeDwnChanCallback, this);
        pBitsCtx->SelectChanges(DWNCHG_COMPLETE, 0, TRUE);
    }

Cleanup:

    if (pBitsCtx)
        pBitsCtx->Release();

    if (pchUrl)
        delete pchUrl;

    return S_OK;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmPost::OnIncludeDwnChanCallback
//
//  Synopsis:   Callback when post stream for !INCLUDE token has more data
//
//-------------------------------------------------------------------------
void
CHtmPost::OnIncludeDwnChan(CBitsCtx * pBitsCtx)
{
    PerfDbgLog(tagPerfWatch, pBitsCtx, "+CHtmPost::OnIncludeDwnChanCallback");
    PerfDbgLog(tagHtmPost, pBitsCtx, "+CHtmPost::OnIncludeDwnChanCallback");

    HRESULT         hr;
    ULONG           ulState;
    char *          pbBuffer = NULL;
    IStream *       pStream = NULL;
    STATSTG         statstg;
    ULONG           cbLen;
    ULONG           cchLen;
    BOOL            fEndCR;
    ULONG           cbRead;
    TCHAR *         pchEnd;
    TCHAR *         pchUrl;
    TCHAR *         pchSrcCode = NULL;

    if (pBitsCtx != _pBitsCtxInclude)
        return;

    ulState = pBitsCtx->GetState();

    hr = THR(_pMarkup->EnterInline());
    if (hr)
        goto Cleanup;

    if (ulState & DWNLOAD_COMPLETE)
    {
        pchUrl = (LPTSTR) pBitsCtx->GetUrl();

        // If unsecure download, may need to remove lock icon on Doc
        _pDoc->OnSubDownloadSecFlags(pchUrl, pBitsCtx->GetSecFlags());

        // if load completed OK, load file and convert to unicode

        hr = THR(pBitsCtx->GetStream(&pStream));
        if (hr)
            goto Cleanup;

        hr = THR(pStream->Stat(&statstg, STATFLAG_NONAME));
        if (hr)
            goto Cleanup;

        cbLen = statstg.cbSize.LowPart;
        if (statstg.cbSize.HighPart || cbLen == 0xFFFFFFFF)
            goto Cleanup;

        pbBuffer = (char *)MemAlloc(Mt(CHtmPost_OnIncludeDwnChan_pbBuffer), cbLen);
        if (!pbBuffer)
        {
            hr = E_OUTOFMEMORY;
            goto Cleanup;
        }

        hr = THR(pStream->Read(pbBuffer, cbLen, &cbRead));

        if (hr == S_FALSE)
            hr = S_OK;
        else if (hr || cbRead != cbLen)
            goto Cleanup;

        cchLen = MultiByteToWideChar(CP_ACP, 0, pbBuffer, cbLen, NULL, 0);

        pchSrcCode = (TCHAR *)MemAlloc(Mt(CHtmPost_OnIncludeDwnChan_pchSrcCode), (cchLen+1) * sizeof(TCHAR));
        if (!pchSrcCode)
        {
            hr = E_OUTOFMEMORY;
            goto Cleanup;
        }

        Verify(cchLen == (unsigned)MultiByteToWideChar(CP_ACP, 0, pbBuffer, cbLen, pchSrcCode, cchLen));

        fEndCR = FALSE;
        pchEnd = pchSrcCode + cchLen;
        cchLen -= NormalizerChar(pchSrcCode, &pchEnd);
        pchSrcCode[cchLen] = _T('\0');

        hr = THR(_pDoc->HtmCtx()->Write(pchSrcCode, FALSE));
        if (hr)
            goto Cleanup;
    }

    hr = THR(_pMarkup->LeaveInline());
    if (hr)
        goto Cleanup;

Cleanup:

    // even if download failed, tell the cdoc that it's done
    if (ulState & (DWNLOAD_COMPLETE | DWNLOAD_ERROR | DWNLOAD_STOPPED))
    {
        if (_dwIncludeDownloadCookie)
        {
            _pMarkup->LeaveScriptDownload(&_dwIncludeDownloadCookie);
            _dwIncludeDownloadCookie = NULL;
        }

        pBitsCtx->SetProgSink(NULL); // detach download from document's load progress
        _pBitsCtxInclude->Release();
        _pBitsCtxInclude = NULL;
    }

    MemFree(pbBuffer);
    MemFree(pchSrcCode);

    ReleaseInterface(pStream);

    PerfDbgLog(tagHtmPost, pBitsCtx, "-CHtmPost::OnIncludeDwnChanCallback");
    PerfDbgLog(tagPerfWatch, pBitsCtx, "-CHtmPost::OnIncludeDwnChanCallback");

}

#endif // CLIENT_SIDE_INCLUDE_FEATURE



//-------------------------------------------------------------------------
//
//  Member:     CHtmPost::IsIndexHack
//
//  Synopsis:   For Netscape as well as pre-HTML 4.0 specs, we change
//              the <ISINDEX> tag into a mini-form by creating and
//              pushing the appropriate tags.
//
//-------------------------------------------------------------------------
HRESULT
CHtmPost::IsIndexHack(CHtmTag *pht)
{
    CHtmTag ht;
    CHtmTag * phtInput = NULL;
    CHtmTag::CAttr *pAttr;
    TCHAR ach[100];
    UINT c;
    HRESULT hr;

    ht.Reset();
    ht.SetTag(ETAG_FORM);

    pAttr = pht->AttrFromName(_T("action"));
    if (pAttr)
    {
        ht.SetAttrCount(1);
        *ht.GetAttr(0) = *pAttr;
    }

    hr = THR(ParseToken(&ht));
    if (hr)
        goto Cleanup;

    ht.Reset();
    ht.SetTag(ETAG_HR);

    hr = THR(ParseToken(&ht));
    if (hr)
        goto Cleanup;

    // add text "prompt"
    ht.Reset();
    ht.SetTag(ETAG_RAW_TEXT);

    pAttr = pht->AttrFromName(_T("prompt"));
    if (pAttr)
    {
        ht.SetPch(pAttr->_pchVal);
        ht.SetCch(pAttr->_cchVal);
    }
    else // attribute not found so add a default prompt from IE3
    {
        ht.SetPch(ach);
        ht.SetCch(LoadString(GetResourceHInst(), IDS_DEFAULT_ISINDEX_PROMPT, ach, ARRAY_SIZE(ach) - 1));
        // if it fails we won't display anything.
    }

    if (ht.GetCch())
    {
        hr = THR(ParseToken(&ht));
        if (hr)
            goto Cleanup;
    }

    phtInput = (CHtmTag *)MemAlloc(Mt(CHtmPost_IsIndexHack_phtInput), CHtmTag::ComputeSize(FALSE, pht->GetAttrCount() + 1));
    if (phtInput == NULL)
    {
        hr = E_OUTOFMEMORY;
        goto Cleanup;
    }

    phtInput->Reset();
    phtInput->SetTag(ETAG_INPUT);
    phtInput->SetAttrCount(1);
    pAttr = phtInput->GetAttr(0);
    pAttr->_pchName = _T("name");
    pAttr->_cchName = 4;
    pAttr->_pchVal = _T("isindex");
    pAttr->_cchVal = 7;
    pAttr->_ulLine = 0;
    pAttr->_ulOffset = 0;

    if (pht->GetAttrCount())
    {
        for (pAttr = pht->GetAttr(0), c = pht->GetAttrCount(); c; pAttr++, c--)
        {
            // Everything that is not an "action" or a "prompt" gets applied
            // to the input tag.
            if ( _tcsicmp(pAttr->_pchName, _T("action")) &&
                 _tcsicmp(pAttr->_pchName, _T("prompt")) )
            {
                phtInput->SetAttrCount(phtInput->GetAttrCount() + 1);
                *phtInput->GetAttr(phtInput->GetAttrCount() - 1) = *pAttr;
            }
        }
    }

    hr = THR(ParseToken(phtInput));
    if (hr)
        goto Cleanup;

    ht.Reset();
    ht.SetTag(ETAG_HR);

    hr = THR(ParseToken(&ht));
    if (hr)
        goto Cleanup;

    ht.Reset();
    ht.SetTag(ETAG_FORM);
    ht.SetEnd();

    hr = THR(ParseToken(&ht));
    if (hr)
        goto Cleanup;

Cleanup:
    MemFree(phtInput);
    RRETURN(hr);
}

// CHtmPost -------------------------------------------------------------------

void
CHtmPost::Run(DWORD dwTimeout)
{
    PerfDbgLog(tagPerfWatch, this, "+CHtmPost::Run");
    PerfDbgLog1(tagHtmPost, this, "+CHtmPost::Run %ls", GetUrl());

    SwitchesBegTimer(SWITCHES_TIMER_PARSER);

    HRESULT hr;

    for (;;)
    {
        hr = THR(Exec(dwTimeout));
        if (hr)
            goto Error;

        if (IsDone())
        {
            _pHtmLoad->OnPostDone(S_OK);
            break;
        }

        if (IsPending())
        {
            // Give the tokenizer a chance to run if it wants to.  We may end up
            // not having to suspend after all.

            Sleep(0);

            if (IsPending())
            {
                PerfDbgLog(tagHtmPost, this, "CHtmPost::Run (blocking)");
                PostManSuspend(this);
                break;
            }
        }

        if (GetTickCount() > dwTimeout)
            break;

#if DBG==1 || defined(PERFTAGS)
        if (IsPerfDbgEnabled(tagOneToken))
            break;
#endif
    }

Cleanup:

    SwitchesEndTimer(SWITCHES_TIMER_PARSER);

    PerfDbgLog(tagHtmPost, this, "-CHtmPost::Run");
    PerfDbgLog(tagPerfWatch, this, "-CHtmPost::Run");
    return;

Error:
    _pHtmLoad->OnPostDone(hr);
    goto Cleanup;
}

void CHtmPost::Passivate()
{
    PerfDbgLog1(tagHtmPost, this, "+CHtmPost::Passivate %ls", GetUrl());

    PostManDequeue(this);

    if (_pHtmLoad)
    {
        _pHtmLoad->SubRelease();
        _pHtmLoad = NULL;
    }

    if (_pHtmTagStm)
    {
        _pHtmTagStm->Disconnect();
        _pHtmTagStm->Release();
        _pHtmTagStm = NULL;
    }

    if (_pDoc)
    {
        _pDoc->SubRelease();
        _pDoc = NULL;
    }

    if (_pMarkup)
    {
        _pMarkup->SubRelease();
        _pMarkup = NULL;
    }

    if (_pHtmParse)
    {
        delete _pHtmParse;
        _pHtmParse = NULL;
    }

#ifdef CLIENT_SIDE_INCLUDE_FEATURE
    if (_pBitsCtxInclude)
    {
        _pBitsCtxInclude->Release();
        _pBitsCtxInclude = NULL;
    }
#endif

    if (_pchError)
    {
        delete _pchError;
        _pchError = NULL;
    }

    PerfDbgLog(tagHtmPost, this, "-CHtmPost::Passivate");
}

void CHtmPost::Die()
{
    Verify(!(Broadcast(&CHtmParse::Die)));
    _dwFlags |= POSTF_DIE;
}

void CHtmPost::DoStop()
{
    _dwFlags |= POSTF_STOP;
    PostManResume(this, FALSE);
}

void CHtmPost::ResumeAfterScan()
{
    _fScanMode = FALSE;
    PostManResume(this, FALSE);
}

HRESULT CHtmPost::ParseToken(CHtmTag * pht)
{
    BOOL fAllowed;
    HRESULT hr;

    TraceToken(this, pht);

    switch (pht->GetTag())
    {
    case ETAG_NOEMBED:
        hr = THR(_pMarkup->ProcessURLAction(URLACTION_SCRIPT_RUN, &fAllowed, 0, NULL, NULL, NULL, 0, PUA_DisableNoShowElements));
        if (hr)
            goto Cleanup;

        if (!fAllowed)
            pht->SetTag(ETAG_NOEMBED_OFF);
        break;

    case ETAG_NOSCRIPT:
        hr = THR(_pMarkup->ProcessURLAction(URLACTION_SCRIPT_RUN, &fAllowed, 0, NULL, NULL, NULL, 0, PUA_DisableNoShowElements));
        if (hr)
            goto Cleanup;

        if (!fAllowed)
            pht->SetTag(ETAG_NOSCRIPT_OFF);
        break;

    // Next two cases (ETAG_FORM & ETAG_ISINDEX) are the hack to get ISINDEX
    // to work correctly.
    case ETAG_FORM:
        if (pht->IsEnd())
            _dwFlags &= ~POSTF_IN_FORM;
        else
            _dwFlags |=  POSTF_IN_FORM;
        break;

    case ETAG_ISINDEX:
        // ISINDEX cannot live inside a form and should be ignored.
        if (!pht->IsEnd() && !(_dwFlags & POSTF_IN_FORM))
        {
            hr = THR(IsIndexHack(pht));
            goto Cleanup;
        }
        break;

    case ETAG_FRAMESET:

        // Drop begin <FRAMESET> tags with no ROWS, COLS

        if (!pht->IsEnd())
        {
            // But don't drop the first one seen (partial IE3 compat)

            if (!(_dwFlags & POSTF_SEENFRAMESET))
            {
                _dwFlags |= POSTF_SEENFRAMESET;
            }
            else
            {
                if (IsDiscardableFramesetTag(pht))
                {
                    hr = S_OK;
                    goto Cleanup;
                }
            }
        }
    }

    hr = THR(_pHtmParse->ParseToken(pht));
    if (hr)
        goto Cleanup;

    if (_pHtmParse->NeedExecute())
    {
        _dwFlags |= POSTF_NEED_EXECUTE;
    }

Cleanup:
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:   CHtmPost::RegisterExtendedTagPI
//
//-------------------------------------------------------------------------

void
CHtmPost::RegisterExtendedTagPI(CHtmTag * pht)
{
    LPTSTR      pchNamespace;
    LPTSTR      pchFactoryUrl;
    LPTSTR      pch;
    BOOL        fEnsureNamespace;

    LPTSTR      pchTagName = NULL;
    LPTSTR      pchBaseTagName = NULL;
    LPTSTR      pchUrn = NULL;

    // namespace is required
    if (!pht->ValFromName(_T("namespace"), &pchNamespace) ||
        !pchNamespace ||
        !pchNamespace[0])
    {
        // no namespace specified: ignore the PI, and wake up preparser now
        _pHtmLoad->ResumeAfterImportPI();
        goto Cleanup;
    }

    pht->ValFromName(_T("implementation"), &pchFactoryUrl);

    fEnsureNamespace = pht->ValFromName(_T("declareNamespace"), &pch);

#if 0 // these two are temporary until proper COM+ wiring is in place
    pht->ValFromName(_T("__MS__tagName"),     &pchTagName);
    pht->ValFromName(_T("__MS__baseTagName"), &pchBaseTagName);
#endif

    // If we're doing a declareNamespace, we need to use the URN on the ?IMPORT as well
    if( fEnsureNamespace )
        pht->ValFromName(_T("urn"), &pchUrn);

    IGNORE_HR(_pHtmLoad->GetHtmInfo()->ImportNamespaceImplementation( pchNamespace, 
                                                                      pchUrn, 
                                                                      pchFactoryUrl, 
                                                                      /* fSynchronize = */ TRUE, 
                                                                      fEnsureNamespace, 
                                                                      pchTagName, 
                                                                      pchBaseTagName));

Cleanup:
    return;
}

//+------------------------------------------------------------------------
//
//  Member:   CHtmPost::RegisterXmlPI
//
//-------------------------------------------------------------------------

void
CHtmPost::RegisterXmlPI(CHtmTag * pht)
{
    LPTSTR pchNamespace;
    LPTSTR pchUrn;

    if (!pht->IsEnd())
    {
        pht->ValFromName(_T("PREFIX"), &pchNamespace);
        if (pchNamespace && pchNamespace[0])
        {
            pht->ValFromName(_T("NS"), &pchUrn);

            IGNORE_HR(_pHtmLoad->GetHtmInfo()->RegisterNamespace(pchNamespace, pchUrn, XMLNAMESPACEDECL_IMPORT));
        }
    }
}


//+----------------------------------------------------------------------------
//  
//  Method:     CHtmPost::ResolveUnknownTag
//  
//  Synopsis:   Queries our host to resolve an unknown tag
//  
//  Returns:    void
//  
//  Arguments:
//          CHtmTag *pht - the HtmTag to resolve
//  
//+----------------------------------------------------------------------------

void
CHtmPost::ResolveUnknownTag( CHtmTag *pht )
{
    Assert( _pDoc->_pExtendedTagTableHost );

    THR_NOTRACE( _pDoc->_pExtendedTagTableHost->ResolveUnknownTag( pht ) );

    ELEMENT_TAG etag = pht->GetTag();
        
    // Only the tokenizer should ever see Nested_Literal
    if ( etag == ETAG_GENERIC_NESTED_LITERAL )
        pht->SetTag( ETAG_GENERIC_LITERAL );

    _pHtmLoad->ResumeAfterTagResolution((pht->IsEnd() || pht->IsEmpty()) ? ETAG_NULL : etag, 
                                         pht->GetPch(), 
                                         pht->GetCch() );
}


// PostMan --------------------------------------------------------------------

void CALLBACK
PostManOnTimer(HWND hwnd, UINT umsg, UINT_PTR idevent, DWORD dwTime)
{
    PerfDbgLog(tagPerfWatch, NULL, "+PostManOnTimer");
    PerfDbgLog(tagHtmPost, 0, "+PostManOnTimer");

    THREADSTATE *   pts         = GetThreadState();
    DWORD           dwTick      = GetTickCount();
    DWORD           dwTimeout   = dwTick + POSTMAN_TIMESLICE;
    CHtmPost *      pHtmPost;

    #if DBG==1
    PostManValidate();
    #endif

    while (pts->post.cRunable)
    {
        pHtmPost = NULL;

        for (;;)
        {
            if (pts->post.pHtmPostNext == NULL)
                pts->post.pHtmPostNext = pts->post.pHtmPostHead;

            pHtmPost = pts->post.pHtmPostNext;
            pts->post.pHtmPostNext = pHtmPost->_pHtmPostNext;

            if (!(pHtmPost->_dwFlags & (POSTF_BLOCKED | POSTF_RUNNING)))
                break;
        }

        Assert(pHtmPost);

        PostManExecute(pts, dwTimeout, pHtmPost);

        if (GetTickCount() - dwTick > POSTMAN_TIMESLICE)
            break;

#if DBG==1 || defined(PERFTAGS)
        if (IsPerfDbgEnabled(tagParseSlowly))
            break;
#endif
    }

    #if DBG==1
    PostManValidate();
    #endif

    PerfDbgLog(tagHtmPost, 0, "-PostManOnTimer");
    PerfDbgLog(tagPerfWatch, NULL, "-PostManOnTimer");
}

void
PostManSetTimer(THREADSTATE * pts)
{
    if (!!pts->post.fTimer != (!!pts->post.cRunable && !pts->post.cLock))
    {
        if (pts->post.fTimer)
        {
            PerfDbgLog(tagHtmPost, 0, "PostManSetTimer KillTimer");
            PerfDbgLog(tagPerfWatch, 0, "PostManSetTimer KillTimer");
            KillTimer(pts->gwnd.hwndGlobalWindow, TIMER_POSTMAN);
            pts->post.fTimer = FALSE;
        }
        else
        {
            PerfDbgLog(tagHtmPost, 0, "PostManSetTimer SetTimer");
            PerfDbgLog(tagPerfWatch, 0, "PostManSetTimer SetTimer");
            SetTimer(pts->gwnd.hwndGlobalWindow, TIMER_POSTMAN,
                #if DBG==1 || defined(PERFTAGS)
                    IsPerfDbgEnabled(tagParseSlowly) ? 10 : 0,
                #else
                    0,
                #endif
                PostManOnTimer);
            pts->post.fTimer = TRUE;
        }

        #if DBG==1
        PostManValidate();
        #endif
    }
}

void
PostManExecute(THREADSTATE * pts, DWORD dwTimeout, CHtmPost * pHtmPost)
{
    PerfDbgLog(tagPerfWatch, pHtmPost, "+PostManExecute");
    PerfDbgLog(tagHtmPost, pHtmPost, "+PostManExecute");

    if(!pHtmPost)
        return;

    Assert(  pHtmPost->_dwFlags & POSTF_ENQUEUED);
    Assert(!(pHtmPost->_dwFlags & POSTF_BLOCKED));
    Assert(!(pHtmPost->_dwFlags & POSTF_RUNNING));

    pHtmPost->AddRef();
    pHtmPost->_dwFlags |= POSTF_RUNNING;
    pts->post.cRunable -= 1;
    pts->post.cRunning += 1;

    PostManSetTimer(pts);

    #if DBG==1
    PostManValidate();
    #endif

    pHtmPost->Run(dwTimeout);

    if (pHtmPost->_dwFlags & POSTF_RUNNING)
    {
        Assert(pHtmPost->_dwFlags & POSTF_ENQUEUED);

        pHtmPost->_dwFlags &= ~POSTF_RUNNING;
        pts->post.cRunable += !(pHtmPost->_dwFlags & POSTF_BLOCKED);
        pts->post.cRunning -= 1;

        PostManSetTimer(pts);
    }

    pHtmPost->Release();

    #if DBG==1
    PostManValidate();
    #endif

    PerfDbgLog(tagHtmPost, pHtmPost, "-PostManExecute");
    PerfDbgLog(tagPerfWatch, pHtmPost, "-PostManExecute");
}

void
PostManEnqueue(CHtmPost * pHtmPost)
{
    if (!(pHtmPost->_dwFlags & POSTF_ENQUEUED))
    {
        PerfDbgLog(tagHtmPost, pHtmPost, "+PostManEnqueue");

        THREADSTATE *   pts         = GetThreadState();
        CHtmPost **     ppHtmPost   = &pts->post.pHtmPostHead;
        CHtmPost *      pHtmPostT;

        for (; (pHtmPostT = *ppHtmPost) != NULL;
                ppHtmPost = &pHtmPostT->_pHtmPostNext)
            ;

        *ppHtmPost              = pHtmPost;
        pHtmPost->_pHtmPostNext = NULL;
        pHtmPost->_dwFlags     |= POSTF_BLOCKED | POSTF_ENQUEUED;
        pHtmPost->_dwFlags     &= ~POSTF_RUNNING;
        pHtmPost->SubAddRef();

        #if DBG==1
        PostManValidate();
        #endif

        PerfDbgLog(tagHtmPost, pHtmPost, "-PostManEnqueue");
    }
}

void
PostManDequeue(CHtmPost * pHtmPost)
{
    if (pHtmPost->_dwFlags & POSTF_ENQUEUED)
    {
        PerfDbgLog(tagHtmPost, pHtmPost, "+PostManDequeue");

        THREADSTATE *   pts         = GetThreadState();
        CHtmPost **     ppHtmPost   = &pts->post.pHtmPostHead;
        CHtmPost *      pHtmPostT;

        for (; (pHtmPostT = *ppHtmPost) != NULL; ppHtmPost = &pHtmPostT->_pHtmPostNext)
        {
            if (pHtmPostT == pHtmPost)
            {
                if (!(pHtmPost->_dwFlags & (POSTF_BLOCKED | POSTF_RUNNING)))
                {
                    pts->post.cRunable -= 1;
                }

                if (pHtmPost->_dwFlags & POSTF_RUNNING)
                {
                    pts->post.cRunning -= 1;
                }

                if (pts->post.pHtmPostNext == pHtmPost)
                {
                    pts->post.pHtmPostNext = pHtmPost->_pHtmPostNext;
                }

                *ppHtmPost = pHtmPost->_pHtmPostNext;

                pHtmPost->_dwFlags &= ~(POSTF_ENQUEUED | POSTF_BLOCKED | POSTF_RUNNING);
                pHtmPost->SubRelease();

                PostManSetTimer(pts);

                #if DBG==1
                PostManValidate();
                #endif

                break;
            }
        }

        PerfDbgLog(tagHtmPost, pHtmPost, "-PostManDequeue");
    }
}

void
PostManLock()
{
    THREADSTATE *   pts         = GetThreadState();
    pts->post.cLock += 1;
    PostManSetTimer(pts);
}

void
PostManUnlock()
{
    THREADSTATE *   pts         = GetThreadState();
    Assert(pts->post.cLock);
    pts->post.cLock -= 1;
    PostManSetTimer(pts);
}

void
PostManSuspend(CHtmPost * pHtmPost)
{
    if (     (pHtmPost->_dwFlags & POSTF_ENQUEUED)
       &&   !(pHtmPost->_dwFlags & POSTF_BLOCKED))
    {
        PerfDbgLog(tagPerfWatch, pHtmPost, "+PostManSuspend");
        PerfDbgLog(tagHtmPost, pHtmPost, "+PostManSuspend");

        THREADSTATE * pts = GetThreadState();

        pHtmPost->_dwFlags |= POSTF_BLOCKED;

        if (!(pHtmPost->_dwFlags & POSTF_RUNNING))
        {
            pts->post.cRunable -= 1;

            PostManSetTimer(pts);
        }

        #if DBG==1
        PostManValidate();
        #endif

        PerfDbgLog(tagHtmPost, pHtmPost, "-PostManSuspend");
        PerfDbgLog(tagPerfWatch, pHtmPost, "-PostManSuspend");
    }
}

void
PostManResume(CHtmPost * pHtmPost, BOOL fExecute)
{
    if (    (pHtmPost->_dwFlags & POSTF_ENQUEUED)
        &&  (pHtmPost->_dwFlags & POSTF_BLOCKED))
    {
        PerfDbgLog(tagPerfWatch, pHtmPost, "+PostManResume");
        PerfDbgLog(tagHtmPost, pHtmPost, "+PostManResume");

        THREADSTATE * pts = GetThreadState();

        pHtmPost->_dwFlags &= ~POSTF_BLOCKED;

        if (!(pHtmPost->_dwFlags & POSTF_RUNNING))
        {
            pts->post.cRunable += 1;
        }

        if (fExecute && pts->post.cRunning == 0)
            PostManExecute(pts, GetTickCount() + POSTMAN_TIMESLICE, pHtmPost);
        else
            PostManSetTimer(pts);

        #if DBG==1
        PostManValidate();
        #endif

        PerfDbgLog(tagHtmPost, pHtmPost, "-PostManResume");
        PerfDbgLog(tagPerfWatch, pHtmPost, "-PostManResume");
    }
}

void
DeinitPostMan(THREADSTATE * pts)
{
    PerfDbgLog(tagHtmPost, 0, "DeinitPostMan");

    Assert(pts->post.pHtmPostHead == NULL &&
        "Active post tasks remain at thread shutdown");

    pts->post.cRunable = 0;
    PostManSetTimer(pts);
}

#if DBG==1
void
PostManValidate()
{
    THREADSTATE *   pts        = GetThreadState();
    DWORD           cRunning   = 0;
    DWORD           cRunable   = 0;
    BOOL            fFoundNext = !pts->post.pHtmPostNext;
    CHtmPost *      pHtmPost   = pts->post.pHtmPostHead;

    for (; pHtmPost; pHtmPost = pHtmPost->_pHtmPostNext)
    {
        if (pHtmPost == pts->post.pHtmPostNext)
        {
            fFoundNext = TRUE;
        }

        Assert(pHtmPost->_dwFlags & POSTF_ENQUEUED);

        if (pHtmPost->_dwFlags & POSTF_RUNNING)
        {
            cRunning += 1;
        }
        else if (!(pHtmPost->_dwFlags & POSTF_BLOCKED))
        {
            cRunable += 1;
        }
    }

    Assert(fFoundNext);
    Assert(cRunning == pts->post.cRunning);
    Assert(cRunable == pts->post.cRunable);
}
#endif

#if DBG != 1
#pragma optimize("", on)
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\download\htmparse.cxx ===
//+---------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1994-1996
//
//  File:       htmparse.cxx
//
//  Contents:   Support for HTML parsing:  including
//
//              CElement
//              CParser
//              CHTMLParser
//              CLex
//
//----------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_ELEMENT_HXX_
#define X_ELEMENT_HXX_
#include "element.hxx"
#endif

#ifndef X_FORMKRNL_HXX_
#define X_FORMKRNL_HXX_
#include "formkrnl.hxx"
#endif

#ifndef X_HTM_HXX_
#define X_HTM_HXX_
#include "htm.hxx"
#endif

#ifndef X_EBODY_HXX_
#define X_EBODY_HXX_
#include "ebody.hxx"
#endif

#ifndef X_TREEPOS_HXX_
#define X_TREEPOS_HXX_
#include "treepos.hxx"
#endif

#ifndef X_ROOTCTX_HXX_
#define X_ROOTCTX_HXX_
#include "rootctx.hxx"
#endif

#ifndef X_ROOTELEM_HXX_
#define X_ROOTELEM_HXX_
#include "rootelem.hxx"
#endif

// Trace tags
DeclareTag(tagParse,            "Dwn", "HtmParse: Detailed parsing trace");
MtDefine(CHtmParse, Dwn, "CHtmParse")
MtDefine(CHtmParse_aryContextStack_pv, CHtmParse, "CHtmParse::_aryContxtStack::_pv")
MtDefine(CHtmParse_aryPelEndParse_pv, CHtmParse, "CHtmParse::_aryPelEndParse::_pv")
MtDefine(CHtmParse_aryPelFrontier_pv, CHtmParse, "CHtmParse::_aryPelFrontier::_pv")
MtDefine(CHtmParse_aryFccl_pv, CHtmParse, "CHtmParse::_aryPelFrontier::_pv")
MtDefine(CHtmParsePrepareContainer_aetagStack_pv, Dwn, "CHtmParse::PrepareContainer aetagStack::_pv")
MtDefine(CHtmParseOpenContainer_aetagStack_pv, Dwn, "CHtmParse::OpenContainer aetagStack::_pv")
MtDefine(CHtmParseCloseContainer_apNodeStack_pv, Dwn, "CHtmParse::CloseContainer apNodeStack::_pv")
MtDefine(CHtmParseCloseContainer_apNodeClose_pv, Dwn, "CHtmParse::CloseContainer apNodeClose::_pv")

// Asserts specific to CHtmParse
#if DBG == 1
#define AssertNoneProhibited(etag) AssertNoneProhibitedImpl(etag)
#define AssertAllRequired(etag) AssertAllRequiredImpl(etag)
#define AssertNoEndContainees(element) AssertNoEndContaineesImpl(element)
#define AssertOnStack(element) AssertOnStackImpl(element)
#define AssertInsideContext(element) AssertInsideContextImpl(element)
#else
#define AssertNoneProhibited(etag)
#define AssertAllRequired(etag)
#define AssertNoEndContainees(element)
#define AssertOnStack(element)
#define AssertInsideContext(element)
#endif

#if DBG != 1
#pragma optimize(SPEED_OPTIMIZE_FLAGS, on)
#endif

extern const ELEMENT_TAG s_atagNull[];
extern const ELEMENT_TAG s_atagEOFProhibited[];
// Global variable determining if we are in winhelp.
extern BOOL g_fInHtmlHelp;
extern BOOL g_fInIBMSoftwareSelection;
extern BOOL g_fInMoney2001;

HRESULT CreateHtmRootParseCtx(CHtmParseCtx **pphpxRoot, CMarkup *pMarkup);
HRESULT CreateHtmTopParseCtx(CHtmParseCtx **pphpx, CHtmParseCtx *phpxParent);
 
HRESULT CreateElement (
              ELEMENT_TAG   etag,
              CElement * *  ppElementResult,
              CDoc *        pDoc,
              CMarkup *     pMarkup,
              BOOL          fCreateAttrBag,
              BOOL *        pfDie );

//+------------------------------------------------------------------------
//
//  Member:     CreateElement
//
//  Synopsis:   Creates an element of type etag parented to pElementParent
//
//              Inits an empty AttrBag if asked to.
//
//-------------------------------------------------------------------------

HRESULT
CreateElement(ELEMENT_TAG   etag,
              CElement **   ppElementResult,
              CDoc *        pDoc,
              CMarkup *     pMarkup,
              BOOL          fCreateAttrBag,
              BOOL *        pfDie)
{
    CElement       *            pElement = NULL;
    const CTagDesc *            ptd;
    CHtmTag                     ht;
    HRESULT                     hr;

    if (!pfDie)
        pfDie = (BOOL*)&g_Zero;

    ptd = TagDescFromEtag(etag);
    if (!ptd)
        return E_FAIL;

    ht.Reset();
    ht.SetTag(etag);
    
    hr = ptd->_pfnElementCreator(&ht, pDoc, &pElement);
    if (hr)
        goto Cleanup;

    if (*pfDie)
        goto Die;

    hr = THR(pElement->Init());
    if (hr)
        goto Cleanup;

    if (*pfDie)
        goto Die;

    if (fCreateAttrBag)
    {
        hr = THR(pElement->InitAttrBag(&ht, pMarkup));
        if (hr)
            goto Cleanup;

        if (*pfDie)
            goto Die;

    }

    {
        CElement::CInit2Context   context (&ht, pMarkup);

        hr = THR(pElement->Init2(&context));
        if (hr)
            goto Cleanup;
    }

    if (*pfDie)
        goto Die;

Cleanup:

    if (hr && pElement)
    {
        CElement::ClearPtr(&pElement);
    }
    
    *ppElementResult = pElement;

    RRETURN(hr);

Die:

    hr = E_ABORT;
    goto Cleanup;
}


//+------------------------------------------------------------------------
//
//  Member:     CreateElement
//
//  Synopsis:   Creates an element of type etag parented to pElementParent
//
//              Inits an empty AttrBag if asked to.
//
//-------------------------------------------------------------------------
HRESULT
CreateElement(CHtmTag *     pht,
              CElement **   ppElementResult,
              CDoc *        pDoc,
              CMarkup *     pMarkup,
              BOOL *        pfDie,
              DWORD         dwFlags)
{
    CElement       *pElement = NULL;
    const CTagDesc *ptd;
    HRESULT         hr;

    if (!pfDie)
        pfDie = (BOOL*)&g_Zero;

    ptd = TagDescFromEtag(pht->GetTag());
    if (!ptd)
        return E_FAIL;

    hr = ptd->_pfnElementCreator(pht, pDoc, &pElement);
    if (hr)
        goto Cleanup;
    
    if (*pfDie)
        goto Die;

    hr = THR(pElement->Init());
    if (hr)
        goto Cleanup;

    if (*pfDie)
        goto Die;

    hr = THR(pElement->InitAttrBag(pht, pMarkup));
    if (hr)
        goto Cleanup;

    if (*pfDie)
        goto Die;

    {
        CElement::CInit2Context   context(pht, pMarkup, dwFlags);

        hr = THR(pElement->Init2(&context));
        if (hr)
            goto Cleanup;
    }

    if (*pfDie)
        goto Die;

Cleanup:

    if (hr && pElement)
    {
        CElement::ClearPtr(&pElement);
    }
    
    *ppElementResult = pElement;
    RRETURN(hr);

Die:

    hr = E_ABORT;
    goto Cleanup;
}


//+------------------------------------------------------------------------
//
//  Member:     CreateUnknownElement
//
//  Synopsis:   Creates an unknown element of type etag parented to
//              pElementParent
//
//              Inits an empty AttrBag if asked to.
//
//-------------------------------------------------------------------------

#ifdef _M_IA64
//$ WIN64: Why is there unreachable code in the retail build of this next function for IA64?
#pragma warning(disable:4702) /* unreachable code */
#endif

HRESULT
CreateUnknownElement(CHtmTag *pht,
              CElement **ppElementResult,
              CDoc *pDoc,
              CMarkup *pMarkup,
              BOOL *pfDie)
{
    CElement       *pElement = NULL;
    const CTagDesc *ptd;
    HRESULT         hr;

    ptd = TagDescFromEtag(ETAG_UNKNOWN);
    if (!ptd)
        return E_FAIL;

    hr = ptd->_pfnElementCreator(pht, pDoc, &pElement);
    if (hr)
        goto Cleanup;

    if (*pfDie)
        goto Die;

    hr = THR(pElement->Init());
    if (hr)
        goto Cleanup;

    if (*pfDie)
        goto Die;

    hr = THR(pElement->InitAttrBag(pht, pMarkup));
    if (hr)
        goto Cleanup;

    if (*pfDie)
        goto Die;

    {
        CElement::CInit2Context   context (pht, pMarkup);

        hr = THR(pElement->Init2(&context));
        if (hr)
            goto Cleanup;
    }

    if (*pfDie)
        goto Die;

Cleanup:

    if (hr && pElement)
        CElement::ClearPtr(&pElement);

    *ppElementResult = pElement;
    
    RRETURN(hr);

Die:

    hr = E_ABORT;
    goto Cleanup;
}

#ifdef _M_IA64
#pragma warning(default:4702) /* unreachable code */
#endif

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::dtor
//
//  Synopsis:   destructor
//
//-------------------------------------------------------------------------
CHtmParse::~CHtmParse()
{
    int i;

    delete _phpxExecute;

    delete _ctx._phpx;

    for (i = _aryContextStack.Size(); i;)
    {
        delete _aryContextStack[--i]._phpx;
    }

    _aryContextStack.DeleteAll();
    
    _aryPelFrontier.ReleaseAll();

    if (_pTagQueue)
        _pTagQueue->Release();
    
    if (_pelMerge)
        _pelMerge->Release();

    if (_pMergeTagQueue)
        _pMergeTagQueue->Release();

    _aryPelEndParse.ReleaseAll();
    
    if (_pMarkup)
        _pMarkup->Release();

#ifdef NOPARSEADDREF
    CTreeNode::ReleasePtr(_pNode);
#endif
}


//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::Init
//
//  Synopsis:   Sets up parsing (and does the first Prepare).
//
//-------------------------------------------------------------------------

HRESULT
CHtmParse::Init(CDoc *pDoc, CMarkup *pMarkup, CTreeNode *pNode)
{
    HRESULT   hr;
    CHtmParseCtx *phpxRoot;
    CHtmParseCtx *phpxTop;
    
    Assert(pMarkup);

    Assert(!_pMarkup);
    
    if (pMarkup)
    {
        _pMarkup = pMarkup;
        _pMarkup->AddRef();
    }

    Assert(pDoc);
    _pDoc = pDoc;

    // Create and push the root context

    hr = THR(CreateHtmRootParseCtx(&phpxRoot, pMarkup));
    if (hr)
        goto Cleanup;

    _ctx._phpx = phpxRoot;
    _ctx._pelTop = NULL;

    hr = THR(_ctx._phpx->Init());
    if (hr)
        goto Cleanup;

    hr = THR(_ctx._phpx->Prepare());
    if (hr)
        goto Cleanup;
        
    // Set up the frontier pointer, AddRef the root element
    
    hr = THR(_aryPelFrontier.Append(pNode->Element()));
    if (hr)
        goto Cleanup;
        
    pNode->Element()->AddRef();

    _pNode = NULL;
    _cDepth = 1;

    hr = THR(_aryContextStack.AppendIndirect(&_ctx));
    if (hr)
        goto Cleanup;

    _ctx._phpx = NULL;
    _ctx._pelTop = NULL;

    // Create and push the top context

    hr = THR(CreateHtmTopParseCtx(&phpxTop, phpxRoot));
    if (hr)
        goto Cleanup;
        
    _ctx._phpx = phpxTop;
    _ctx._pelTop = pMarkup->Root();

    hr = THR(_ctx._phpx->Init());
    if (hr)
        goto Cleanup;

    hr = THR(_ctx._phpx->Prepare());
    if (hr)
        goto Cleanup;

    _fLookingForDOCTYPE = TRUE;

Cleanup:
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::Prepare
//
//  Synopsis:   Prepares each context for possible parsing
//
//-------------------------------------------------------------------------
HRESULT CHtmParse::Prepare()
{
    int       c;
    CContext *pctx;
    HRESULT   hr = S_OK;

    Assert(_aryPelFrontier.Size());
    Assert(!_pNode);

    // Watson bug IE6 #24291.  If we catch the assert above, we 
    // should try and figure this out.
    if (!_aryPelFrontier.Size())
    {
        hr = E_ABORT;
        goto Cleanup;
    }

    _pNode = _aryPelFrontier[_aryPelFrontier.Size() - 1]->ParanoidGetLastBranch();
    if (!_pNode)
    {
        hr = E_ABORT;
        goto Cleanup;
    }

    if (!_pMarkup)
        goto Cleanup;

    if (_lVersionSafe != _pMarkup->GetMarkupTreeVersion())
    {
        // If the tree has been changed, we need to drop the entire FindContainer cache
        // (For coherency it depends on nodes never being recycled because they're never
        // released during, which may not be true if tree versions don't match.)
        _aryFccl.DeleteAll();
        
        CElement **ppel;
        CTreePos *ptpRight;

        for (ptpRight = _pNode->GetEndPos(), c = _aryPelFrontier.Size(), ppel = _aryPelFrontier + c - 1;
             c;
             ptpRight = ptpRight->NextTreePos())
        {
            // To ensure that everything beyond the frontier is totally locked down, verify:

            // 1. The right number of treeposes follow the frontier
            // 2. All the treeposes after the frontier are end edges
            // 3. Nothing on the frontier is dead
            // 4. The nodes belong to the elements that were recorded and refed
            // 5. The nodes form a parent chain above the current node to the root

            // Any failures -> the frontier has changed, so abort the parse

            if (!ptpRight)
                break;

            //
            // It's okay to have pointers in the frontier
            //
            
            if (ptpRight->IsPointer())
                continue;

            //
            // It's okay to have empty, text id-less chunks-o-text
            //

            if (ptpRight->IsText() && ptpRight->Cch() == 0 && ptpRight->Sid() == 0)
                continue;
            
            if (!ptpRight->IsEndElementScope()                   ||
                ptpRight->Branch()->IsDead()                     ||
                ptpRight->Branch()->Element() != (*ppel)         ||
                (c == 1 ? ptpRight->Branch()->Parent() != NULL :
                          ptpRight->Branch()->Parent()->Element() != *(ppel - 1)))
            {
                break;
            }

            ppel -= 1, c -= 1;
        }

        if (c)
            hr = E_ABORT;

        // ... and verify 6. that there are no extra treeposes at the very end
        if (ptpRight)
            hr = E_ABORT;

        if (hr)
            goto Cleanup;
    }

    for (pctx = _aryContextStack, c = _aryContextStack.Size(); c; pctx++, c--)
    {
        Assert(pctx->_phpx);
        hr = THR(pctx->_phpx->Prepare());
        if (hr)
            goto Cleanup;
    }

    if (_ctx._phpx)
    {
        hr = THR(_ctx._phpx->Prepare());
        if (hr)
            goto Cleanup;
    }

Cleanup:
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::Commit
//
//  Synopsis:   Commits each context for possible return to message loop
//
//-------------------------------------------------------------------------
HRESULT CHtmParse::Commit()
{
    int       c, size;
    CContext *pctx;
    HRESULT   hr = S_OK;
    CElement **ppel;

    if (_ctx._phpx)
    {
        hr = THR(_ctx._phpx->Commit());
        if (hr)
            goto Cleanup;

        for (c = _aryContextStack.Size(), pctx = (CContext *)_aryContextStack + c; c; c--)
        {
            pctx--;
            Assert(pctx->_phpx);
            hr = THR(pctx->_phpx->Commit());
            if (hr)
                goto Cleanup;
        }
    }

    CTreeNode *pNode;

    // Update the frontier

    size = _aryPelFrontier.Size();
    pNode = _pNode;

    if (size < _cDepth)
    {
        // Grow the frontier
        
        _aryPelFrontier.Grow(_cDepth);
        for (ppel = _aryPelFrontier + _cDepth - 1, c = _cDepth - size; c; ppel -= 1, c -= 1)
        {
            *ppel = pNode->Element();
            (*ppel)->AddRef();
            pNode = pNode->Parent();
        }
    }
    else if (size > _cDepth)
    {
        // Shrink the frontier
        
        for (ppel = _aryPelFrontier + size - 1, c = size - _cDepth; c; ppel -= 1, c -= 1)
        {
            (*ppel)->Release();
        }
        _aryPelFrontier.SetSize(_cDepth);
    }
    else
    {
        ppel = _aryPelFrontier + size - 1;
    }

    // Update the frontier from the end forward, stopping where it's already OK
    // (to avoid quadratric behavior, never iterate more than # of elementbegin/end)
    
    while (pNode)
    {
        Assert(ppel >= (CElement **)_aryPelFrontier);
        
        if (pNode->Element() == *ppel)
            break;
            
        (*ppel)->Release();
        *ppel = pNode->Element();
        (*ppel)->AddRef();

        ppel -= 1;
        pNode = pNode->Parent();
    }

    if (_pMarkup)
        _lVersionSafe = _pMarkup->GetMarkupTreeVersion();
    _pNode = NULL;

Cleanup:
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::Finish
//
//  Synopsis:   Finish each context for final return from parser
//
//-------------------------------------------------------------------------
HRESULT CHtmParse::Finish()
{
    HRESULT    hr = S_OK;

    if (!_fDone)
    {
        // Implicit children
        hr = THR(AddImplicitChildren(ETAG_NULL));
        if (hr)
            goto Cleanup;

        // Litctx
        if (_etagLitCtx)
        {
            hr = THR(PopHpx());
            if (hr)
                goto Cleanup;
                
            _etagLitCtx = ETAG_NULL;
        }
        
        while (_pNode)
        {
            hr = THR(EndElement(_pNode));
            if (hr)
                goto Cleanup;

            if (_phpxExecute && !_phpxExecute->_fExecuteOnEof)
            {
                delete _phpxExecute;
                _phpxExecute = NULL;
            }
        }

        _fDone = TRUE;
        _fIgnoreInput = TRUE;
    }

    Assert(!_aryContextStack.Size());
    
    // Frontier be gone

    _aryPelFrontier.ReleaseAll();
    
    // Finish and delete the root context

    hr = THR(_ctx._phpx->Finish());
    if (hr)
        goto Cleanup;
        
    delete _ctx._phpx;
    _ctx._phpx = NULL;
    Assert(!_pNode);

    if (_pMarkup)
    {
        _pMarkup->Release();
        _pMarkup = NULL;
    }

Cleanup:
    
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::Execute
//
//  Synopsis:   Executes the context which needs to be executed.
//
//-------------------------------------------------------------------------
HRESULT CHtmParse::Execute()
{
    HRESULT hr = S_OK;
    CElement **ppel;
    long c;

    if (_pMergeTagQueue)
    {
        Assert(!_pMergeTagQueue->IsEmpty());

        hr = THR(MergeTags());
        if (hr)
            goto Cleanup;
    }
    
    if (_phpxExecute)
    {
        CHtmParseCtx *phpx = _phpxExecute;
        _phpxExecute = NULL;
        Verify(!THR(phpx->Execute()));

        delete phpx;
    }

    for (ppel = _aryPelEndParse, c = _aryPelEndParse.Size(); c; ppel++, c--)
    {
        CNotification   nf;

        nf.EndParse(*ppel);
        (*ppel)->Notify(&nf);

        (*ppel)->Release();
    }
    
    _aryPelEndParse.DeleteAll();

Cleanup:

    RRETURN(hr);
}



//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::GetCurrentElement
//
//  Synopsis:   Obtains the current element
//
//-------------------------------------------------------------------------

CElement*
CHtmParse::GetCurrentElement()
{
    CElement *pElement;
        
    if (_pNode)
    {
        pElement = _pNode->Element();
    }
    else if (_aryPelFrontier.Size())
    {
        pElement = _aryPelFrontier[_aryPelFrontier.Size() - 1];
    }
    else
    {
        pElement = NULL;
    }

    return pElement;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::ParseToken
//
//  Synopsis:   Dispatches a token to the appropriate method based on etag
//
//-------------------------------------------------------------------------
HRESULT
CHtmParse::ParseToken(CHtmTag *pht)
{
    HRESULT hr;

    if (_fIgnoreInput)
        return S_OK;

    // Dispatch depending on token type:

    // TEXT

    if (pht->Is(ETAG_RAW_TEXT)
        || pht->Is(ETAG_RAW_COLLAPSED_WHITESPACE))
    {
        Assert(pht->GetCch());

        hr = THR(ParseText(pht->GetPch(), pht->GetCch(), pht->IsAscii()));
    }

    // TAGS

    else if (pht->GetTag() < ETAG_RAW_COMMENT)
    {
        if ((_ctx._phpx->_atagReject && !IsEtagInSet(pht->GetTag(), _ctx._phpx->_atagReject))
            || (_ctx._phpx->_atagAccept && IsEtagInSet(pht->GetTag(), _ctx._phpx->_atagAccept)) )
        {
            if (!pht->IsEnd())
            {
                hr = THR(ParseBeginTag(pht));
            }
            else
            {
                if (_ctx._phpx->_atagIgnoreEnd && IsEtagInSet(pht->GetTag(), _ctx._phpx->_atagIgnoreEnd))
                {
                    hr = THR(ParseIgnoredTag(pht));
                }
                else
                {
                    hr = THR(ParseEndTag(pht));
                }
            }
        }
        else
        {
            if (_ctx._phpx->_atagTag && IsEtagInSet(pht->GetTag(), _ctx._phpx->_atagTag))
            {
                hr = THR(_ctx._phpx->AddTag(pht));
            }
            else if (_ctx._phpx->_atagAlwaysEnd && IsEtagInSet(pht->GetTag(), _ctx._phpx->_atagAlwaysEnd))
            {
                hr = THR(ParseEndTag(pht));
            }
            else if (_ctx._phpx->_atagIgnoreEnd && pht->IsEnd() && IsEtagInSet(pht->GetTag(), _ctx._phpx->_atagIgnoreEnd))
            {
                hr = THR(ParseIgnoredTag(pht));
            }
            else
            {
                hr = THR(ParseUnknownTag(pht));
            }
        }
    }

    // COMMENTS

    else if (pht->Is(ETAG_RAW_COMMENT))
    {
        hr = THR(ParseComment(pht));
    }

    // RAW SOURCE
    
    else if (pht->Is(ETAG_RAW_SOURCE))
    {
        hr = THR(ParseSource(pht));
    }

    // PASTE MARKER
    
    else if (pht->Is(ETAG_RAW_BEGINSEL) || pht->Is(ETAG_RAW_ENDSEL))
    {
        hr = THR(ParseMarker(pht));
    }

    // TEXT FRAG

    else if (pht->Is(ETAG_RAW_TEXTFRAG))
    {
        hr = THR(ParseTextFrag(pht));
    }

    // EOF
    
    else if (pht->GetTag() == ETAG_RAW_EOF)
    {
        hr = THR(ParseEof());
    }
    
    else if (pht->GetTag() == ETAG_RAW_REJECT)
    {
        // Just ignore this guy.
        hr = S_OK;
    }

    else
    {
        AssertSz(0, "Parser was given an unrecognized token");
        hr = S_OK;
    }

    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::ParseMarker
//
//  Synopsis:   Process a marker. Markers get queued if there is a queue.
//
//-------------------------------------------------------------------------
HRESULT
CHtmParse::ParseMarker(CHtmTag *pht)
{
    HRESULT hr;
    
    if (_pTagQueue)
    {
        Assert(_etagReplay);
        hr = THR(QueueTag(pht));
        goto Cleanup;
    }
    
    switch (pht->GetTag())
    {
    case ETAG_RAW_BEGINSEL:
        hr = THR(InsertLPointer());
        break;
        
    case ETAG_RAW_ENDSEL:
        hr = THR(InsertRPointer());
        break;

    default:
        hr = S_OK;
        Assert(0);
    }

Cleanup:
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::ParseTextFrag
//
//  Synopsis:   Process a text frag.  Right now only conditional comments
//              generate text frags.
//
//-------------------------------------------------------------------------
HRESULT
CHtmParse::ParseTextFrag(CHtmTag *pht)
{
    HRESULT hr;
    
    hr =  ((CHtmRootParseCtx *) _aryContextStack[0]._phpx)->InsertTextFrag(pht->GetPch(), pht->GetCch(), _pNode);

    RRETURN(hr);
}


//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::ParseText
//
//  Synopsis:   Process the text in pht.
//
//-------------------------------------------------------------------------
HRESULT
CHtmParse::ParseText(TCHAR * pch, ULONG cch, BOOL fAscii)
{
    ELEMENT_TAG etag = ETAG_NULL;
    HRESULT hr = S_OK;

    // Step 1: Insert required container if any

    if (!_etagLitCtx)
    {
        etag = _fValidRTC ? _etagRTC : RequiredTextContainer();

        if (etag)
        {
            if (cch && ISSPACE(*pch))
            {
                TCHAR * pchScan = pch + 1;
                TCHAR * pchLast = pch + cch;
                while (pchScan < pchLast && ISSPACE(*pchScan))
                    ++pchScan;
                cch -= (LONG)(pchScan - pch);

                //
                // We can't collapse whitespace here because we may
                // have a white-space:pre attribute enabled at some later
                // point in time.
                //
                // So, the whitespace needs to get to the parser which will
                // add it to the tree.
                //

                if (_pMarkup->SupportsCollapsedWhitespace())
                {
                    if (_pTagQueue && !_pTagQueue->IsEmpty())
                    {
                        LONG    cchWhitespace = LONG(pchScan - pch);
                        CHtmTag ht;
                        TCHAR   *pchWhitespace = new TCHAR[cchWhitespace];

                        if (!pchWhitespace)
                        {
                            hr = E_OUTOFMEMORY;
                            goto Cleanup;
                        }   

                        memcpy(pchWhitespace, pch, cchWhitespace*sizeof(TCHAR));                        
                        
                        ht.Reset();
                        ht.SetTag(ETAG_RAW_COLLAPSED_WHITESPACE);
                        ht.SetCch(cchWhitespace);
                        ht.SetPch(pchWhitespace);
                        ht.SetAscii();
                                                
                        hr = THR(QueueTag(&ht));

                        delete [] pchWhitespace;
                        
                        if (FAILED(hr))
                            goto Cleanup;
                    }
                }

                if (cch == 0)
                {
                    // Entire text was spaces, just eat it.
                    return(S_OK);
                }

                pch  = pchScan;
            }

            const CHtmlParseClass *phpc;

            phpc = HpcFromEtag(etag);
            
            if (phpc->_atagProhibitedContainers)
            {
                hr = THR(CloseAllContainers(phpc->_atagProhibitedContainers, phpc->_atagBeginContainers));
                if (hr)
                    goto Cleanup;
            }

            hr = THR(OpenContainer(etag));
            if (hr == S_FALSE)
            {
                AssertSz(0,"Required text container could not be inserted (DTD error)");
                hr = S_OK;
                goto Cleanup;
            }
            else if (hr)
                goto Cleanup;

            etag = ETAG_NULL;
        }

        // Before actually inserting any text, add any tags that have been queued
        
        if (_fImplicitChild || _etagReplay)
        {
            hr = THR(AddImplicitChildren(ETAG_NULL));
            if (hr)
                goto Cleanup;
        }
        
    }

    // Step 2: Insert deferred paste pointer
    
    Assert(!etag);

    if (_fDelayPointer)
    {
        hr = InsertLPointerNow();
        if (hr)
            goto Cleanup;
    }
        
    // Step 3: Send text to context (cch == 0 only for EOF)

    if (cch)
    {
        hr = THR(_ctx._phpx->AddText(_pNode, pch, cch, fAscii));
    }

Cleanup:

    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::ParseEof
//
//  Synopsis:   Process EOF
//
//-------------------------------------------------------------------------
HRESULT
CHtmParse::ParseEof()
{
    HRESULT hr;
    
    // Close literal context (TITLE)

    if (_etagLitCtx)
    {
        hr = THR(PopHpx());
        if (hr)
            goto Cleanup;
            
        _etagLitCtx = ETAG_NULL;
    }

    // Close any element that needs to be closed before processing EOF
    
    hr = THR(CloseAllContainers(s_atagEOFProhibited, s_atagNull));
    if (hr)
        goto Cleanup;

    // Feed a zero-length string through (may imply a BODY etc).
    
    hr = THR(ParseText(NULL, 0, TRUE));
    if (hr)
        goto Cleanup;

Cleanup:
    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::ParseBeginTag
//
//  Synopsis:   Process the begin tag in pht.
//
//-------------------------------------------------------------------------
HRESULT
CHtmParse::ParseBeginTag(CHtmTag *pht)
{
    CElement *pel = NULL;
    const CTagDesc *ptd;
    HRESULT hr;
    PREPARE_CODE code;

    // Step 1: do all the implicit begin/end parsing

    hr = THR(PrepareContainer(pht->GetTag(), pht, &code));
    if (hr)
        goto Cleanup;
    if (code != PREPARE_NORMAL)
        goto Special;

    // Step 2: add implicit children
    hr = THR(AddImplicitChildren(pht->GetTag()));
    if (hr)
        goto Cleanup;

    // Step 3: Detect litctx tags (just TITLE) that must not be in the tree
    
    ptd = TagDescFromEtag(pht->GetTag());
    
    if (ptd->_dwTagDescFlags & TAGDESC_LITCTX)
    {
        Assert(ptd->_pParseClass->_pfnHpxCreator);
        _etagLitCtx = pht->GetTag();
        hr = THR(PushHpx(ptd->_pParseClass->_pfnHpxCreator, _pMarkup->Root(), _pNode));
        if (hr)
            goto Cleanup;

        // merge the tag into the element, if any
        if (HpcFromEtag(pht->GetTag())->_fMerge)
        {
            code = PREPARE_MERGE;
            goto Special;
        }
        
        goto Cleanup;
    }

    // Step 4: Make element

    hr = THR(CreateElement(pht, &pel, _pDoc, _pMarkup, &_fDie));
    if (hr)
        goto Cleanup;

    // Step 5: Put it into the tree
    hr = THR(BeginElement(pel, TRUE, pht->IsEmpty()));
    if (hr)
        goto Cleanup;

Cleanup:

    CElement::ReleasePtr(pel);
        
    RRETURN(hr);

Special:

    switch (code)
    {
    case PREPARE_UNKNOWN:
        hr = THR(ParseUnknownTag(pht));
        goto Cleanup;
    case PREPARE_MERGE:
        hr = THR(RequestMergeTag(pht));
        goto Cleanup;
    case PREPARE_QUEUE:
        hr = THR(QueueTag(pht));
        goto Cleanup;
    default:
        Assert(0);
        goto Cleanup;
    }
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::RequestMergeTag
//
//  Synopsis:   Merge the begin tag in pht.
//
//-------------------------------------------------------------------------
HRESULT
CHtmParse::RequestMergeTag(CHtmTag *pht)
{
    HRESULT hr = S_OK;
    
    if (_pelMerge)
    {
        if (!MergableTags(_pelMerge->Tag(), pht->GetTag()))
            goto Cleanup;
    }
    else
    {
        CTreeNode *pNode = FindContainer(pht->GetTag(), HpcFromEtag(pht->GetTag())->_atagEndContainers);
        if (pNode)
        {
            _pelMerge = pNode->Element();
            _pelMerge->AddRef();
        }
    }
    
    if (!_pMergeTagQueue)
    {
        _pMergeTagQueue = new CHtmTagQueue();
        if (!_pMergeTagQueue)
            goto OutOfMemory;
    }

    hr = THR(_pMergeTagQueue->EnqueueTag(pht));
    if (hr)
        goto Cleanup;

Cleanup:
    RRETURN(hr);

OutOfMemory:
    hr = E_OUTOFMEMORY;
    goto Cleanup;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::MergeTags
//
//  Synopsis:   Merge the begin tag in pht.
//
//-------------------------------------------------------------------------
HRESULT
CHtmParse::MergeTags()
{
    HRESULT hr = S_OK;
    CElement *pelMerge;
    CHtmTagQueue *pTagQueue = NULL;

    if (_pelMerge)
    {
        pelMerge = _pelMerge;
    }
    else
    {
        pelMerge = _ctx._phpx->GetMergeElement();
    }

    if (pelMerge)
    {
        pTagQueue = _pMergeTagQueue;
        _pMergeTagQueue = NULL;
        
        while (!pTagQueue->IsEmpty())
        {
            CHtmTag *pht;
            pht = pTagQueue->DequeueTag();
            
            Assert(pht);
            Assert(HpcFromEtag(pht->GetTag())->_fMerge || (TagDescFromEtag(pht->GetTag())->_dwTagDescFlags & TAGDESC_LITCTX));
            Assert(MergableTags(pelMerge->Tag(), pht->GetTag()));

        
            pelMerge->_fSynthesized = FALSE;
            
            hr = THR(pelMerge->MergeAttrBag(pht));
            if (hr)
                goto Cleanup;
        }

        if (_pelMerge)
        {
            _pelMerge->Release();
            _pelMerge = NULL;
        }
    }

Cleanup:
    if (pTagQueue)
        pTagQueue->Release();

    RRETURN(hr);
}


//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::StopLookingForDOCTYPE
//
//  Synopsis:   sets _fLookingForDOCTYPE to FALSE and also
//              reacts to a registry key to set CSS-compat to 'always true'
//              This is equivalent to simulated strict DOCTYPE.
//
//-------------------------------------------------------------------------
void 
CHtmParse::StopLookingForDOCTYPE()
{
    // if registry key says always use Strict - then do it.
    if (_fLookingForDOCTYPE)
    {
        Assert(_pDoc && _pMarkup);
        _pDoc->UpdateFromRegistry();

        OPTIONSETTINGS *pos = _pDoc->_pOptionSettings;
        if(pos && pos->nStrictCSSInterpretation == STRICT_CSS_ALWAYS)
            _pMarkup->SetStrictCSS1Document(TRUE);
    }

    _fLookingForDOCTYPE = FALSE;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::QueueTag
//
//  Synopsis:   Queue the tag in pht.
//
//-------------------------------------------------------------------------
HRESULT
CHtmParse::QueueTag(CHtmTag *pht)
{
    const CHtmlParseClass *phpc;
    HRESULT hr;

    // any DOCTYPE after first element doesn't count.
    StopLookingForDOCTYPE();

    if (pht->Is(ETAG_RAW_BEGINSEL) || pht->Is(ETAG_RAW_ENDSEL))
    {
        Assert(_etagReplay && _pTagQueue);
    }
    else
    {
        phpc = HpcFromEtag(pht->GetTag());

        Assert(phpc->_fQueueForRequired);

        // If queuing in hope of a different tag than we're keeping track of
        // for replay, Assert, give up, and drop tag
        if (_etagReplay && phpc->_etagDefaultContainer != _etagReplay)
        {
            Assert(0);
            return S_OK;
        }

        _etagReplay = phpc->_etagDefaultContainer;

        if (!_pTagQueue)
        {
            _pTagQueue = new CHtmTagQueue;
            if (!_pTagQueue)
            {
                hr = E_OUTOFMEMORY;
                goto Cleanup;
            }
        }
    }

    hr = THR(_pTagQueue->EnqueueTag(pht));
    if (hr)
        goto Cleanup;

Cleanup:
    RRETURN(hr);
}


//+------------------------------------------------------------------------
//
//  Function:   GenericTagMatch
//
//  Synopsis:   Determines if a closing generic tag matches the given one
//
//-------------------------------------------------------------------------

BOOL
GenericTagMatch(CHtmTag * pht, CTreeNode * pNode)
{
    LPTSTR          pchColon;
    const TCHAR *   pchTagName   = pNode->Element()->TagName();
    const TCHAR *   pchScopeName = pNode->Element()->Namespace();

    Assert(IsGenericTag(pht->GetTag()));
    Assert(pht->IsEnd());

    if (!pht->GetCch())
        return FALSE;
    
    pchColon = StrChr(pht->GetPch(), _T(':'));

    if (pchColon)
    {
        // (JHarding) 102765 - New tag has a scope, since it has a colon, but
        // old one didn't, so no match.
        if( !pchScopeName )
            return FALSE;

        if (0 != StrCmpNIC(pchTagName, pchColon + 1, pht->GetCch() - PTR_DIFF(pchColon, pht->GetPch()) - 1))
            return FALSE;

        if (0 != StrCmpNIC(pchScopeName, pht->GetPch(), PTR_DIFF(pchColon, pht->GetPch())))
            return FALSE;
    }
    else
    {
        if (0 != StrCmpNIC(pchTagName, pht->GetPch(), pht->GetCch()))
            return FALSE;
        
        if (pchScopeName)
            return FALSE;
    }

    return TRUE;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::ParseEndTag
//
//  Synopsis:   Processes the end tag in pht.
//
//-------------------------------------------------------------------------
HRESULT
CHtmParse::ParseEndTag(CHtmTag *pht)
{
    CTreeNode * pNode;
    const CHtmlParseClass *phpc;
    PREPARE_CODE code;
    ELEMENT_TAG etag;
    HRESULT hr = S_OK;

    phpc = HpcFromEtag(pht->GetTag());

    // Step 1: End litctx if any (for TITLE)

    if (_etagLitCtx)
    {
        BOOL fMatch;
        
        hr = THR(PopHpx());
        if (hr)
            goto Cleanup;
            
        fMatch = (pht->GetTag() == _etagLitCtx);
        
        _etagLitCtx = ETAG_NULL;
        
        if (fMatch)
            RRETURN(hr);
    }

    // Step 2: Find matching container

    if (phpc->_atagMatch) // NS compat: bug 24945 - some end tags match several begin tags
    {
        pNode = FindContainer(phpc->_atagMatch, phpc->_atagEndContainers);
    }
    else if (pht->Is(ETAG_GENERIC))
    {
        pNode = FindGenericContainer(pht, phpc->_atagEndContainers);
    }
    else
    {
        pNode = FindContainer(pht->GetTag(), phpc->_atagEndContainers);
    }

    // Step 3: if tag is XML or generic, verify that the name matches; throw an error if it does not
    if (IsGenericTag(pht->GetTag()))
    {
        if (pNode)
        {
            if (!GenericTagMatch(pht, pNode))
            {
                goto Unknown;
            }
        }
        else
            goto Unknown;
    }

    // Step 4: imply begin tags for compat
    // NS compat bug 15597 (new fix) Some unmatched end tags imply a begin tag
    // other unmatched end tags are replaced by a different end tag
    if (!pNode)
    {
        if (phpc->_fQueueForRequired)
        {
            // If required container is not present and _fQueueForRequired is set, queue up end tag
            
            if (!FindContainer(phpc->_atagRequiredContainers, phpc->_atagBeginContainers))
            {
                hr = THR(QueueTag(pht));
                goto Cleanup;
            }
        }
        
        etag = phpc->_etagUnmatchedSubstitute;
        
        if (!etag)
            goto Unknown;
            
        // open a container to be closed immediately
        if (etag == ETAG_IMPLICIT_BEGIN)
        {
            etag = pht->GetTag();
                
            hr = THR(PrepareContainer(etag, NULL, &code));
            if (hr)
                goto Cleanup;

            if (code != PREPARE_NORMAL)
            {
                if (code == PREPARE_UNKNOWN)
                    goto Unknown;
                else
                    goto Cleanup; // drop end w/ implicit begin in merge or queue situations
            }
                
            hr = THR(OpenContainer(etag));
            if (hr == S_FALSE)
                goto Unknown;
            if (hr)
                goto Cleanup;

            if (phpc->_scope == SCOPE_EMPTY)
                goto Cleanup;
            
            Assert(_pNode->Tag() == etag);
            pNode = _pNode;
        }
        else
        {
            // search for the alternate match
            phpc = HpcFromEtag(etag);
            
            pNode = FindContainer(etag, phpc->_atagEndContainers);
            if (!pNode)
                goto Unknown;
        }
    }

    // Step 5: Close the container

    pNode->Element()->_fExplicitEndTag = TRUE;

    hr = THR(CloseContainer(pNode, TRUE));
    
Cleanup:
    RRETURN(hr);

Unknown:
    hr = THR(ParseUnknownTag(pht));
    goto Cleanup;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::ParseIgnoredTag
//
//  Synopsis:   Processes the ignored tag in pht.
//
//-------------------------------------------------------------------------
HRESULT
CHtmParse::ParseIgnoredTag(CHtmTag *pht)
{
    const CHtmlParseClass *phpc;
    CTreeNode *pNode;
    
    if (!pht->IsEnd())
        return S_OK;

    phpc = HpcFromEtag(pht->GetTag());

    if (phpc && phpc->_fMerge)
    {
        pNode = FindContainer(pht->GetTag(), phpc->_atagEndContainers);
        if (pNode)
        {
            pNode->Element()->_fExplicitEndTag = TRUE;
        }
    }

    return S_OK;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::ParseUnknownTag
//
//  Synopsis:   Processes the unknown tag in pht.
//
//-------------------------------------------------------------------------
HRESULT
CHtmParse::ParseUnknownTag(CHtmTag *pht)
{
    CElement *pel = NULL;
    const TCHAR *pchName;
    HRESULT hr;

    // Would the context prefer pht's or unknown elements?
    if (_ctx._phpx->_fDropUnknownTags)
    {
        hr = S_OK;
        goto Cleanup;
    }

    // If the tag has no name (e.g. ETAG_FRAG), drop it
    if( pht->GetTag() != ETAG_UNKNOWN )
    {
        pchName = NameFromEtag(pht->GetTag());
        if (!pchName || !*pchName)
            return S_OK;
    }

    TraceTag((tagParse, "Unknown tag <%s%ls>", pht->IsEnd() ? "/" : "", NameFromEtag(pht->GetTag())));

    // Implicit children
    hr = THR(AddImplicitChildren(pht->GetTag()));
    if (hr)
        goto Cleanup;

    // Make element and put in the tree

    hr = THR(CreateUnknownElement(pht, &pel, _pDoc, _pMarkup, &_fDie));
    if (hr)
        goto Cleanup;
        
    hr = THR(BeginElement(pel, TRUE, pht->IsEmpty()));
    if (hr)
        goto Cleanup;

Cleanup:
    CElement::ReleasePtr(pel);

    RRETURN(hr);
}

//+-----------------------------------------------------------
//
//  IsStrictCSS1Doctype - determine if DOCTYPE tag contains something that
//  makes us strictly CSS1 compatible. IE5.5 and before were DOCTYPE-unaware.
//  Now we start to treat HTML 4.x without "Transitional" or "Frameset" specifiers
//  as strict CSS1. Other HTML types that we explicitly know about are treated
//  as before for backward-compatibility. All unrecognized HTML and non-HTML types
//  are treated as strict CSS1 because they can be new HTML versions that we don't know
//  about yet.
//
//------------------------------------------------------------

static BOOL IsStrictCSS1Doctype(const CStr &pDoctype)
{
    // just in case
    if(pDoctype.IsNull()) 
        return FALSE;

    // if it's not a DOCTYPE, we are not interested
    if(pDoctype.Length() < 9 || StrCmpNIC(pDoctype, _T("<!DOCTYPE"), 9))
        return FALSE;
    
    // APPHACK (gschneid) Windows 2000 help files contain a standard compliant doctype switch. Because the pages look 
    // ugly in standard compliance mode and Windows 2000 is already shipped we apphack html help with the doctype switch
    // used in the compiled html files. 
    // The doctype switch is: <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"  "http://www.w3.org/TR/REC-html40/strict.dtd">
    // Hence <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"  "http://www.w3.org/TR/REC-html40/strict.dtd"> in chm will result
    // in legacy mode.
    //
    // <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0//EN"  "http://www.w3.org/TR/REC-html40/strict.dtd"> in CHM *not strict!
    if (   StrStrI(pDoctype, _T("DTD HTML 4.0"))
        && StrStrI(pDoctype, _T("http://www.w3.org/TR/REC-html40/strict.dtd"))
        && g_fInHtmlHelp)
        return FALSE;

    // APPHACK (gschneid) IBM's recovery CDs are shipped with a program ssstart.exe that hosts trident. The doctype switch in the
    // documents forces us to be standard compliant. Therefore the content is totally screwed up. To fix that we go back in legacy
    // mode if we are hosted by IBM's program.

    if (g_fInIBMSoftwareSelection)
        return FALSE;

    // APPHACK (fmunoz) Money 2001 help files have a <!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Strict//EN"> declaration that 
    // basically turns behaviors off because they are not using strict syntax to define them, and their collapsible 
    // paragraphs doen work.
    if (g_fInMoney2001)
        return FALSE;

    // XHTML is always strictly CSS1-compatible
    if(StrStrI(pDoctype,_T("DTD XHTML")))
        return TRUE; 

    // HTML 4[.x] with a DTD referred to by url - must be a seriously strict author.
    if(   StrStrI(pDoctype,_T("DTD HTML 4"))
       && StrStrI(pDoctype,_T("http://")))
        return TRUE; 

    // Treat 4.x as backward-compat if it has Transitional or Frameset, otherwise strict
    if(StrStrI(pDoctype,_T("DTD HTML 4.")))
    {
        return (!StrStrI(pDoctype,_T(" Transitional//")) && !StrStrI(pDoctype,_T(" Frameset//")));
    }

    // traditional HTML plain, HTML 2, HTML 3.2, HTML 4 - IE4, IE5.x compat
    if(   StrStrI(pDoctype,_T(" HTML 2")) 
       || StrStrI(pDoctype,_T(" HTML 3")) 
       || StrStrI(pDoctype,_T(" HTML 4")) 
       || StrStrI(pDoctype,_T("DTD HTML//")) 
       || StrStrI(pDoctype,_T("DTD W3 HTML//")) 
       || StrStrI(pDoctype,_T("DTD HTML EXP")) // experimental HTML. seen from Adobe FrameMaker 5.5/HTML Export Filter output.
       || StrStrI(pDoctype,_T(" HTML plus")) ||  // HTML plus Tables.  seen on http://iwin.nws.noaa.gov/iwin/iwdspg1.html
          StrStrI(pDoctype,_T("DOCTYPE NETSC"))  // Netscrape bookmark file
      )
        return FALSE; 

    // new document type, treated as strict
    // In subsequent versions of IE, we will be able to recognize all
    // HTML versions that will be out by that time and make proper decisions
    return TRUE;
}



//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::ParseComment
//
//  Synopsis:   Processes the comment in pht.
//
//-------------------------------------------------------------------------
HRESULT
CHtmParse::ParseComment(CHtmTag *pht)
{
    CElement *pel = NULL;

    TraceTag((tagParse, "Comment <%ls> %ls", NameFromEtag(pht->GetTag()), pht->GetPch()));

    HRESULT hr;

    //check if it's a <!DOCTYPE..> thing. We treat this effectively as a processing 
    //instruction, removing it from the input flow. We also use _fLookingForDOCTYPE
    //flag to start ignorig <!DOCTYPE...> when anything has been parsed in.
    // Note: because _fLookingForDOCTYPE becomes TRUE after first tag parsed, there
    // is no perf implications because of this check.
    if(    _fLookingForDOCTYPE
        && pht->Is(ETAG_RAW_COMMENT)
        && pht->GetCch() > 9 
        && !StrCmpNIC(pht->GetPch(), _T("<!DOCTYPE"), 9)
      )
    {
        CStr    cstrText;
        hr = cstrText.Set(pht->GetPch(), pht->GetCch());

        if(hr)
            goto Cleanup;

        Assert(_pMarkup);

        if(IsStrictCSS1Doctype(cstrText)) 
        {
            _pMarkup->SetStrictCSS1Document(TRUE);   
        }
    }
    
    // Comments should be dropped by the context if _fDropUnknownTags
    if (_ctx._phpx->_fDropUnknownTags)
    {
        hr = S_OK;
        goto Cleanup;
    }

    // Implicit children
    hr = THR(AddImplicitChildren(ETAG_NULL));
    if (hr)
        goto Cleanup;

    // Make element and put in the tree

    hr = THR(CreateElement(pht, &pel, _pDoc, _pMarkup, &_fDie));
    if (hr)
        goto Cleanup;

    hr = THR(BeginElement(pel, TRUE));
    if (hr)
        goto Cleanup;

Cleanup:
    CElement::ReleasePtr(pel);

    RRETURN(hr); // discard for now
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::ParseSource
//
//  Synopsis:   Processes the original source annotation in pht.
//
//-------------------------------------------------------------------------
HRESULT
CHtmParse::ParseSource(CHtmTag *pht)
{
    TraceTag((tagParse, "Original source %d", NameFromEtag(pht->GetTag()), pht->GetSourceCch()));

    HRESULT hr;

    hr = THR(_ctx._phpx->AddSource(pht));
    if (hr)
        goto Cleanup;

Cleanup:
    RRETURN(hr);
}


//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::FindContainer (singleton version)
//
//  Synopsis:   Finds an element matching exactly stopping at set Stop
//
//-------------------------------------------------------------------------
CTreeNode *
CHtmParse::FindContainer(ELEMENT_TAG etagMatch, const ELEMENT_TAG *pSetStop)
{
    CTreeNode * pNode;

    pNode = _pNode;

    while (pNode && pNode->Tag() != etagMatch)
    {
        if (IsEtagInSet(pNode->Tag(), pSetStop))
            return NULL;

        pNode = pNode->Parent();
    }

    return pNode;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::FindContainer (set version)
//
//  Synopsis:   Finds an element in set Match stopping at set Stop
//
//-------------------------------------------------------------------------

#define FCC_MIN_DEPTH 16

CTreeNode *
CHtmParse::FindContainer(const ELEMENT_TAG *pSetMatch, const ELEMENT_TAG *pSetStop)
{
    CTreeNode * pNode;
    ULONG cDepth;

    pNode = _pNode;
    
    if (_cDepth >= FCC_MIN_DEPTH)
    {
        cDepth = _cDepth;

        while (cDepth < FCC_MIN_DEPTH || !FindContainerCache(cDepth - FCC_MIN_DEPTH, pNode, pSetMatch, pSetStop, &pNode))
        {
            if (!pNode || IsEtagInSet(pNode->Tag(), pSetMatch))
                break;
                
            if (IsEtagInSet(pNode->Tag(), pSetStop))
            {
                pNode = NULL;
                break;
            }
            
            pNode = pNode->Parent();
            cDepth -= 1;
        }
        
        SetContainerCache(_cDepth - FCC_MIN_DEPTH, _pNode, pSetMatch, pSetStop, pNode);

        return pNode;
    }
    else
    {
        while (pNode && !IsEtagInSet(pNode->Tag(), pSetMatch))
        {
            if (IsEtagInSet(pNode->Tag(), pSetStop))
                return NULL;

            pNode = pNode->Parent();
        }

        return pNode;
    }
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::FindContainerCache
//
//  Synopsis:   Speeds FindContainer by using cached results
//
//-------------------------------------------------------------------------
BOOL
CHtmParse::FindContainerCache(ULONG iCache, CTreeNode *pNodeCheck, const ELEMENT_TAG *pset1, const ELEMENT_TAG *pset2, CTreeNode **ppNodeOut)
{
    CFccLine *pfccl;
    CFccItem *pfcci;
    ULONG c;
    ULONG cDbg = 0;

    if ((ULONG)_aryFccl.Size() < iCache + 1)
        return FALSE;

    pfccl = _aryFccl + iCache;

    if (pfccl->_pNodeCheck != pNodeCheck)
        return FALSE;

    c = pfccl->_iFirst;
    pfcci = pfccl->_afcci + c;
    c += 1;

    if (c > pfccl->_cCached)
        c = pfccl->_cCached;
        
Reloop:
    while (c)
    {
        cDbg += 1;
        
        if (pfcci->_pset1 == pset1 && pfcci->_pset2 == pset2)
        {
            *ppNodeOut = pfcci->_pNodeOut;
            return TRUE;
        }
            
        pfcci -= 1;
        c -= 1;
    }

    if (pfcci < pfccl->_afcci)
    {
        c = pfccl->_cCached - pfccl->_iFirst - 1;
        pfcci = pfccl->_afcci + FCC_WIDTH - 1;
        goto Reloop;
    }

    return FALSE;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::SetContainerCache
//
//  Synopsis:   Speeds FindContainer by caching results
//
//-------------------------------------------------------------------------
void
CHtmParse::SetContainerCache(ULONG iCache, CTreeNode *pNodeCheck, const ELEMENT_TAG *pset1, const ELEMENT_TAG *pset2, CTreeNode *pNodeOut)
{
    CFccLine *pfccl;
    CFccItem *pfcci;
    ULONG c;

    if ((ULONG)_aryFccl.Size() < iCache + 1)
    {
        c = _aryFccl.Size();

        if (!!_aryFccl.Grow(iCache + 1 + iCache / 8)) // 1.125 times the size we need for exponential growth
            return; // OOM

        pfccl = _aryFccl + c;
        c = _aryFccl.Size() - c;
        
        while (c)
        {
            pfccl->_pNodeCheck = NULL;
            pfccl += 1;
            c -= 1;
        }
    }

    pfccl = _aryFccl + iCache;

    if (pfccl->_pNodeCheck != pNodeCheck)
    {
        pfccl->_pNodeCheck = pNodeCheck;
        pfccl->_iFirst = 0;
        pfccl->_cCached = 1;
        pfcci = pfccl->_afcci;
    }
    else
    {
        pfccl->_iFirst += 1;
        if (pfccl->_iFirst >= FCC_WIDTH)
            pfccl->_iFirst = 0;
            
        if (pfccl->_cCached < FCC_WIDTH)
            pfccl->_cCached += 1;
            
        pfcci = pfccl->_afcci + pfccl->_iFirst;
    }
    
    pfcci->_pset1 = pset1;
    pfcci->_pset2 = pset2;
    pfcci->_pNodeOut = pNodeOut;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::FindGenericContainer
//
//  Synopsis:   same as FindContainer, but also matches scope/name of generic
//              tags
//
//-------------------------------------------------------------------------
CTreeNode *
CHtmParse::FindGenericContainer(CHtmTag *pht, const ELEMENT_TAG *pSetStop)
{
    CTreeNode * pNode;
    ELEMENT_TAG etagMatch = pht->GetTag();

    pNode = _pNode;

    while (pNode &&
           !(pNode->Tag() == etagMatch && GenericTagMatch(pht, pNode)))
    {
        if (IsEtagInSet(pNode->Tag(), pSetStop))
            return NULL;

        pNode = pNode->Parent();
    }

    return pNode;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::RequiredTextContainer
//
//  Synopsis:   Computes the etag of the required text container, if any.
//
//-------------------------------------------------------------------------
ELEMENT_TAG
CHtmParse::RequiredTextContainer()
{
    CTreeNode * pNode;
    const CHtmlParseClass *phpc;

    // optimization: cached required text container

    Assert(!_fValidRTC);

    _fValidRTC = TRUE;

    // find first element with _textscope != TEXTSCOPE_NEUTRAL

    for (pNode = _pNode; pNode; pNode = pNode->Parent())
    {
        phpc = HpcFromEtag(pNode->Tag());

        if (phpc->_textscope == TEXTSCOPE_INCLUDE)
            return (_etagRTC = ETAG_NULL);

        if (phpc->_textscope == TEXTSCOPE_EXCLUDE)
        {
            Assert(HpcFromEtag(phpc->_etagTextSubcontainer)->_textscope == TEXTSCOPE_INCLUDE);
            return (_etagRTC = phpc->_etagTextSubcontainer);
        }
    }

    Assert(0);

    return (_etagRTC = ETAG_NULL);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::PrepareContainer
//
//  Synopsis:   Do all the implicit opening and closing before
//              beginning the specified container
//
//-------------------------------------------------------------------------
HRESULT
CHtmParse::PrepareContainer(ELEMENT_TAG etag, CHtmTag *pht, PREPARE_CODE *pCode)
{
    CTreeNode *pNode;
    const CHtmlParseClass *phpc;
    ELEMENT_TAG etag2;
    HRESULT hr = S_OK;

    Assert(!pht || pht->Is(etag));

    phpc = HpcFromEtag(etag);

    // Step 0: Check for masking container
    
    if (phpc->_atagMaskingContainers)
    {
        pNode = FindContainer(phpc->_atagMaskingContainers, phpc->_atagBeginContainers);
        if (pNode)
        {
            if (phpc->_fMerge)
                goto Merge;
            else
                goto Unknown;
        }
    }

    // Step 1: Close all prohibited containers (implied end tags)

    if (phpc->_atagProhibitedContainers)
    {
        hr = THR(CloseAllContainers(phpc->_atagProhibitedContainers, phpc->_atagBeginContainers));
        if (hr)
            goto Cleanup;
    }

    // Step 2: If textlike, ensure text container (implied begin tags depend on nearest text-excluder)
    if ((phpc->_texttype == TEXTTYPE_ALWAYS ||
         phpc->_texttype == TEXTTYPE_QUERY && _ctx._phpx->QueryTextlike(_pMarkup, etag, pht)) &&
        (ETAG_NULL != (etag2 = (_fValidRTC ? _etagRTC : RequiredTextContainer()))) )
    {
        phpc = HpcFromEtag(etag2);
        if (phpc->_atagProhibitedContainers)
        {
            hr = THR(CloseAllContainers(phpc->_atagProhibitedContainers, phpc->_atagBeginContainers));
            if (hr)
                goto Cleanup;
        }

        hr = THR(OpenContainer(etag2));
        if (hr == S_FALSE)
        {
            AssertSz(0,"Required text container could not be inserted (DTD error)");
            goto Unknown;
        }
        else if (hr)
            goto Cleanup;
    }

    // Step 3: Otherwise, ensure any required containers (implied begin tags depend on tag itself)

    else
    if (phpc->_atagRequiredContainers)
    {
        pNode = FindContainer(phpc->_atagRequiredContainers, phpc->_atagBeginContainers);
        if (!pNode)
        {
            if (phpc->_fQueueForRequired)
                goto Queue;
                
            hr = THR(OpenContainer(phpc->_etagDefaultContainer));
            if (hr == S_FALSE)
                goto Unknown;
            else if (hr)
                goto Cleanup;
        }
    }

    *pCode = PREPARE_NORMAL;

Cleanup:
    RRETURN(hr);

Unknown:
    *pCode = PREPARE_UNKNOWN;
    hr = S_OK;
    goto Cleanup;

Queue:
    *pCode = PREPARE_QUEUE;
    hr = S_OK;
    goto Cleanup;

Merge:
    *pCode = PREPARE_MERGE;
    hr = S_OK;
    goto Cleanup;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::OpenContainer
//
//  Synopsis:   Opens a default container (by etag) and any outer
//              containers which are required.
//
//  Returns:    S_OK    if the etag was opened sucessfully
//              S_FALSE if the etag is not allowed in the current context
//              E_*     on error
//
//-------------------------------------------------------------------------
HRESULT
CHtmParse::OpenContainer(ELEMENT_TAG etag)
{
    CTreeNode *pNode;
    CElement *pel = NULL;
    const CHtmlParseClass *phpc;
    CStackPtrAry<INT_PTR, 8> aetagStack(Mt(CHtmParseOpenContainer_aetagStack_pv));
    INT_PTR * petagPtr;
    int i;
    HRESULT hr = S_OK;

    // Step 1: Compute all required containers (implied begin tags)

    while (etag)
    {
        aetagStack.Append(etag);

        phpc = HpcFromEtag(etag);
        if (!phpc)
            break;

        if (!phpc->_atagRequiredContainers)
            break;

        pNode = FindContainer(phpc->_atagRequiredContainers, phpc->_atagBeginContainers);
        if (pNode)
            break;

        Assert(!phpc->_fQueueForRequired);
        etag = phpc->_etagDefaultContainer;
    }

    // If unable to insert required containers, return false

    if (!etag)
        return S_FALSE;

    // Step 2: Insert all needed containers in order

    for (i=aetagStack.Size(), petagPtr = (INT_PTR *)aetagStack+i; i; i--)
    {
        ELEMENT_TAG etagItem = (ELEMENT_TAG)*--petagPtr;

        // Implicit children
        hr = THR(AddImplicitChildren(etagItem));
        if (hr)
            goto Cleanup;

        AssertNoneProhibited(etagItem);
        AssertAllRequired(etagItem);
        
        hr = THR(CreateElement(etagItem, &pel, _pDoc, _pMarkup, TRUE, &_fDie));
        if (hr)
            goto Cleanup;

        pel->_fSynthesized = TRUE;
        
        hr = THR(BeginElement(pel, FALSE));
        if (hr)
            goto Cleanup;

        CElement::ClearPtr(&pel);

        aetagStack.Delete(aetagStack.Size()-1);
    }

Cleanup:
    CElement::ReleasePtr(pel);

    RRETURN(hr);
}


//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::AddImplicitChildren
//
//  Synopsis:   Adds any implicit children required under the current
//              node, given that "etagNext" is the next element that is
//              going to be created.
//
//-------------------------------------------------------------------------
HRESULT
CHtmParse::AddImplicitChildren(ELEMENT_TAG etagNext)
{
    ELEMENT_TAG etagChild;
    CTreeNode *pNodeStart = NULL;
    CTreeNode *pNodeClose = NULL;
    CHtmTagQueue *pTagQueue = NULL;
    CElement *pel = NULL;
    const CHtmlParseClass *phpc;
    HRESULT hr = S_OK;

    if (!_fImplicitChild && !_etagReplay)
        return S_OK;

#ifdef NOPARSEADDREF
    CTreeNode::ReplacePtr(&pNodeStart, _pNode);
#else
    pNodeStart = _pNode;
#endif
    
    // Step 1: add implicit children

    while (_fImplicitChild)
    {
        phpc = HpcFromEtag(_pNode->Tag());
        if (!phpc)
            break; // Assert below
            
        etagChild = phpc->_etagImplicitChild;
        if (!etagChild)
            break; // Assert below
            
        _fImplicitChild = FALSE;

        if (!pNodeClose)
        {
            // Close this element if _fCloseImplicitChild is set
            if (phpc->_fCloseImplicitChild)
#ifdef NOPARSEADDREF
                CTreeNode::ReplacePtr(&pNodeClose, _pNode);
#else
                pNodeClose = _pNode;
#endif
                
            // break out if the required child == etagNext
            if (etagChild == etagNext)
                goto Replay;
        }
          
        AssertNoneProhibited(etagChild);
        AssertAllRequired(etagChild);
        
        hr = THR(CreateElement(etagChild, &pel, _pDoc, _pMarkup, TRUE, &_fDie));
        if (hr)
            goto Cleanup;

        pel->_fSynthesized = TRUE;

        hr = THR(BeginElement(pel, FALSE));
        if (hr)
            goto Cleanup;
        
        CElement::ClearPtr(&pel);
    }

    AssertSz(!_fImplicitChild,"_fImplicitChild set when current element doesn't require implicit children");
    _fImplicitChild = FALSE;
    
    // Step 2: close all the implicit children that need to be closed

    if (etagNext || !pNodeClose)
    {
#ifdef NOPARSEADDREF
        CTreeNode::ReplacePtr(&pNodeClose, pNodeStart);
#else
        pNodeClose = pNodeStart;
#endif
    }

    AssertOnStack(pNodeClose);

    while (_pNode != pNodeClose)
    {
        hr = THR(EndElement(_pNode));
        if (hr)
            goto Cleanup;
    }

Replay:

    // If the current node matches the _etagReplay tag, implicitly
    // replay all the queued begin tags.
    
    // The problem with this approach is that there's no guarantee that
    // after parsing all the queued tags, the frontier is in the state
    // that's required for the caller of OpenContainer on the stack.
    // Nevertheless, since all queued tags are fairly inert for the
    // parser (A, P, CENTER, etc), it _should_ work (dbau 5/3/98)
    
    if (_etagReplay)
    {
        if (_pNode->Tag() == _etagReplay)
        {
            if (_pTagQueue)
            {
                pTagQueue = _pTagQueue;
                _pTagQueue = NULL;
                while (!pTagQueue->IsEmpty())
                {
                    CHtmTag *pht;
                    pht = pTagQueue->DequeueTag();
                    Assert(pht);
                    Assert(FindContainer(_etagReplay, s_atagNull));

                    hr = THR(ParseToken(pht));
                    if (hr)
                        goto Cleanup;

                    Assert(!_pTagQueue);
                }
                _etagReplay = ETAG_NULL;
            }
        }
        else
        {
            Assert(!_pTagQueue || !FindContainer(_etagReplay, s_atagNull));
        }
    }
    
Cleanup:
#ifdef NOPARSEADDREF
    CTreeNode::ReleasePtr(pNodeStart);
    CTreeNode::ReleasePtr(pNodeClose);
#endif
    CElement::ReleasePtr(pel);

    if (pTagQueue)
        pTagQueue->Release();

    RRETURN(hr);
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::CloseContainer
//
//  Synopsis:   Closes pelContainer and any elements between peInner and
//              peContainer which are closed when peContainer closes.
//
//              Creates proxies as needed.
//
//-------------------------------------------------------------------------
HRESULT
CHtmParse::CloseContainer(CTreeNode *pNodeContainer, BOOL fExplicit)
{
    CTreeNode *pNode = NULL;
    CTreeNode **ppNode;
    CTreeNode **ppNode2;
    const CHtmlParseClass *phpc;
    CStackPtrAry<CTreeNode*,8> apNodeStack(Mt(CHtmParseCloseContainer_apNodeStack_pv));
    CStackPtrAry<CTreeNode*,8> apNodeClose(Mt(CHtmParseCloseContainer_apNodeClose_pv));
    int c, c2;
    enum { CLOSE_NESTED, CLOSE_NORMAL } closeWhich;
    HRESULT hr;

    // Implicit children
    hr = THR(AddImplicitChildren(ETAG_NULL));
    if (hr)
        goto Cleanup;

    // optimization: do nested close computation only if closing node is not current
    
    if (pNodeContainer != _pNode)
    {
        AssertOnStack(pNodeContainer);

        // step 1: create stack of nested elements to reverse order
        
        for (pNode = _pNode; pNode != pNodeContainer; pNode = pNode->Parent())
        {
            hr = THR(apNodeStack.Append(pNode));
            if (hr)
                goto Cleanup;
        }

        // step 2: create stack of elements to close
        
        hr = THR(apNodeClose.Append(pNodeContainer));
        if (hr)
            goto Cleanup;

        if (HpcFromEtag(pNodeContainer->Tag())->_scope == SCOPE_NESTED)
            closeWhich = CLOSE_NESTED;
        else
            closeWhich = CLOSE_NORMAL;
            
        for (c = apNodeStack.Size(), ppNode = (CTreeNode**)apNodeStack + c - 1; c; c--, ppNode--)
        {
            phpc = HpcFromEtag((*ppNode)->Tag());
            
            if (closeWhich == CLOSE_NESTED && phpc->_scope == SCOPE_NESTED)
            {
                hr = THR(apNodeClose.Append(*ppNode));
                if (hr)
                    goto Cleanup;

                goto Closed;
            }

            for (c2 = apNodeClose.Size(), ppNode2 = apNodeClose; c2; c2--, ppNode2++)
            {
                if (IsEtagInSet((*ppNode2)->Tag(), phpc->_atagEndContainers))
                {
                    hr = THR(apNodeClose.Append(*ppNode));
                    if (hr)
                        goto Cleanup;
                        
                    if (closeWhich == CLOSE_NORMAL && HpcFromEtag((*ppNode)->Tag())->_scope == SCOPE_NESTED)
                        closeWhich = CLOSE_NESTED;
                        
                    goto Closed;
                }
            }

        Closed:
            ;
        }
        
        // step 3: Close nested elements
        
        Assert(apNodeClose.Size());

        for (c = apNodeClose.Size() - 1, ppNode = (CTreeNode**)apNodeClose + c; c; c--, ppNode--)
        {
            AssertOnStack(*ppNode);
            AssertNoEndContainees(*ppNode);
            hr = THR(EndElement(*ppNode));
            if (hr)
                goto Cleanup;
        }

        Assert(*ppNode == pNodeContainer);
    }

    // Step 4: Close requested element itself
    
    AssertOnStack(pNodeContainer);
    AssertNoEndContainees(pNodeContainer);
    
    if (fExplicit && _fDelayPointer)
    {
        hr = InsertLPointerNow();
        if (hr)
            goto Cleanup;
    }
    
    hr = THR(EndElement(pNodeContainer));
    if (hr)
        goto Cleanup;

Cleanup:
    RRETURN(hr);
}


//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::CloseAllContainers
//
//  Synopsis:   Closes every container which matches atagClose up to
//              and (possibly) including the first match in atagBegin
//
//-------------------------------------------------------------------------
HRESULT
CHtmParse::CloseAllContainers(const ELEMENT_TAG *atagClose, const ELEMENT_TAG *atagBegin)
{
    CTreeNode *pNode;
    HRESULT hr = S_OK;

    for (;;)
    {
        pNode = FindContainer(atagClose, atagBegin);
        if (!pNode)
            break;

        hr = THR(CloseContainer(pNode, FALSE));
        if (hr)
            goto Cleanup;

    }

Cleanup:
    RRETURN(hr);
}


//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::BeginElement
//
//  Synopsis:   Notifies context of the beginning of an element, and
//              advances _pel as needed.
//
//              Also handles creating a new context if needed.
//
//-------------------------------------------------------------------------
HRESULT
CHtmParse::BeginElement(CElement *pel, BOOL fExplicit, BOOL fEndTag)
{
    const CHtmlParseClass *phpc;
    CTreeNode       *pNode = NULL;
    HRESULT          hr = S_OK;
    PARSESCOPE       parsescope;
    
    TraceTag((tagParse, "Begin element <%ls>", NameFromEtag(pel->Tag())));

    // any DOCTYPE after first element doesn't count.
    StopLookingForDOCTYPE();

    phpc = HpcFromEtag(pel->Tag());
    parsescope = phpc->_scope;
    if (fEndTag && (pel->Tag() >= ETAG_GENERIC && pel->Tag() <= ETAG_GENERIC_BUILTIN))
    {
        parsescope = SCOPE_EMPTY;
        pel->_fExplicitEndTag = TRUE;
    }
    
    // optimization: invalidate cached RequiredTextContainer

    if (phpc->_textscope != TEXTSCOPE_NEUTRAL)
        _fValidRTC = FALSE;

    // handle delay-pointer insert
    if (fExplicit && _fDelayPointer)
    {
        hr = InsertLPointerNow();
        if (hr)
            goto Cleanup;
    }
        
    // step 1: notify context

    hr = THR(_ctx._phpx->BeginElement(&pNode, pel, _pNode, (parsescope == SCOPE_EMPTY)));
    if (hr)
        goto Cleanup;
        
    if (_fDie)
        goto Die;

    // step 2: advance _pNode

    if (parsescope != SCOPE_EMPTY)
    {
        Assert(pNode);
#ifdef NOPARSEADDREF
        CTreeNode::ReplacePtr(&_pNode, pNode);
#else
        _pNode = pNode;
#endif
        _cDepth += 1;
    }
        

    // step 3: notify empty element
    else
    {
        if (pel->WantEndParseNotification())
        {
            hr = THR(_aryPelEndParse.Append(pel));
            if (hr)
                goto Cleanup;

            pel->AddRef();
        }
    }
    

    // step 3: deal with pushing context stack

    if (phpc->_pfnHpxCreator)
    {
        hr = THR(PushHpx(phpc->_pfnHpxCreator, pel, pNode));
        if (hr)
            goto Cleanup;
            
        if (parsescope == SCOPE_EMPTY)
        {
            hr = THR(PopHpx());
            if (hr)
                goto Cleanup;
        }
    }

    // step 4: call EndElement for SCOPE_EMPTY elements
    // NOTE: this is needed so that the parse context can
    // advance any cached pointers

    if (parsescope == SCOPE_EMPTY)
    {
        CTreeNode * pNodeNew;

        hr = THR(_ctx._phpx->EndElement(&pNodeNew, pNode, pNode));
        if (hr)
            goto Cleanup;

        Assert( pNodeNew == _pNode );

#ifdef NOPARSEADDREF
        pNodeNew->NodeRelease();
#endif
    }

    // make a note if implicit children are needed
    if (phpc->_etagImplicitChild)
        _fImplicitChild = TRUE;


Cleanup:
#ifdef NOPARSEADDREF
    CTreeNode::ReleasePtr(pNode);
#endif
    
    RRETURN(hr);

Die:
    hr = E_ABORT;
    goto Cleanup;
}


//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::EndElement
//
//  Synopsis:   Closes pelEnd, notifies context if needed,
//              creates proxy chain below, and advances _pel
//
//-------------------------------------------------------------------------
HRESULT
CHtmParse::EndElement(CTreeNode *pNodeEnd)
{
    CTreeNode *pNodeNew = NULL;
    HRESULT hr = S_OK;

    TraceTag((tagParse, "End element   <%ls>", NameFromEtag(pNodeEnd->Tag())));

    // optimization: invalidate cached RequiredTextContainer

    if (HpcFromEtag(pNodeEnd->Tag())->_textscope != TEXTSCOPE_NEUTRAL)
        _fValidRTC = FALSE;

    // step 1: deal with popping the context stack

    if (pNodeEnd->Element() == _ctx._pelTop)
    {
        hr = THR(PopHpx());
        if (hr)
            goto Cleanup;
    }

    // Step 1: notify the owning context that the element is ending

    // Ending within a context: our node should now be under the current context
#if DBG == 1 && 0
    if (_ctx._phpx->IsLeaf())
        AssertInsideContext(pNodeEnd);
#endif
    Assert(_pNode);

    // the context is now responsible for proxying
    hr = THR(_ctx._phpx->EndElement(&pNodeNew, _pNode, pNodeEnd));
    if (hr)
        goto Cleanup;
        
    if (_fDie)
        goto Die;

    _cDepth -= 1;

    // step 3: notify the element itself that it is ending (defered until we can execute).

    if (pNodeEnd->Element()->WantEndParseNotification())
    {
        hr = THR(_aryPelEndParse.Append(pNodeEnd->Element()));
        if (hr)
            goto Cleanup;

        pNodeEnd->Element()->AddRef();
    }

    // step 4: update _pNode

#ifdef NOPARSEADDREF
    _pNode->NodeRelease();
#endif
    _pNode = pNodeNew; // take ref
    pNodeNew = NULL;

Cleanup:

#ifdef NOPARSEADDREF
    CTreeNode::ReleasePtr(pNodeNew);
#endif
    RRETURN(hr);

Die:

    hr = E_ABORT;
    goto Cleanup;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::InsertLPointer
//
//  Synopsis:   Sets a flag so that the L pointer will be inserted
//              right before the next explicit end/begin/text
//
//-------------------------------------------------------------------------

HRESULT
CHtmParse::InsertLPointer()
{
    _fDelayPointer = TRUE;

    return S_OK;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::InsertRPointer
//
//  Synopsis:   Immediately inserts a pointer
//
//-------------------------------------------------------------------------

HRESULT
CHtmParse::InsertLPointerNow()
{
    Assert(_fDelayPointer);
    Assert(!_ptpL);
    Assert( _aryContextStack[0]._phpx );

    _fDelayPointer = FALSE;

    RRETURN(_ctx._phpx->InsertLPointer(&_ptpL, _pNode));
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::InsertRPointer
//
//  Synopsis:   Immediately inserts a pointer
//
//-------------------------------------------------------------------------

HRESULT
CHtmParse::InsertRPointer()
{
    Assert(!_ptpR);
    Assert( _aryContextStack[0]._phpx );

    RRETURN(_ctx._phpx->InsertRPointer(&_ptpR, _pNode));
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::GetPointers
//
//  Synopsis:   Gets CTreePos'es for the L and R pointers
//
//-------------------------------------------------------------------------
void
CHtmParse::GetPointers(CTreePos **pptpL, CTreePos **pptpR)
{
    (*pptpL) = _ptpL;
    (*pptpR) = _ptpR;
}


//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::PushHpx
//
//  Synopsis:   Constructs and pushes a context
//
//-------------------------------------------------------------------------

HRESULT
CHtmParse::PushHpx(HRESULT (*pfnHpxCreator)(CHtmParseCtx **pphpx, CElement *pelTop, CHtmParseCtx *phpxParent, CHtmParse *pHtmParse), CElement *pel, CTreeNode *pNode)
{
    HRESULT hr;
    CHtmParseCtx *phpxNew = NULL;
    
    TraceTag((tagParse, "Push Hpx for <%ls>", pel ? NameFromEtag(pel->Tag()) : _T("NULL") ));
    
    hr = THR((pfnHpxCreator)(&phpxNew, pel, _ctx._phpx, this));
    if (hr)
        goto Cleanup;

    hr = THR(phpxNew->Init());
    if (hr)
        goto Cleanup;

    if (_fDie)
        goto Die;

    hr = THR(phpxNew->Prepare());
    if (hr)
        goto Cleanup;

    if (_fDie)
        goto Die;

    hr = THR(_aryContextStack.AppendIndirect(&_ctx));
    if (hr)
        goto Cleanup;

    _ctx._phpx   = phpxNew;
    _ctx._pelTop = pel;

    phpxNew = NULL;
    
Cleanup:
    delete phpxNew; // Expected to be NULL
    RRETURN(hr);
    
Die:
    hr = E_ABORT;
    goto Cleanup;
}


//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::PopHpx
//
//  Synopsis:   pops and destroys a context
//
//-------------------------------------------------------------------------

HRESULT
CHtmParse::PopHpx()
{
    HRESULT hr = S_OK;
    
    TraceTag((tagParse, "Pop Hpx for <%ls>", NameFromEtag(_etagLitCtx ? _etagLitCtx : _ctx._pelTop->Tag())));
    
    hr = THR(_ctx._phpx->Finish());
    if (hr)
        goto Cleanup;

    if (_fDie)
        goto Die;

    if (_ctx._phpx->_fIgnoreSubsequent)
    {
        _fIgnoreInput = TRUE;
    }

    if (!_ctx._phpx->_fNeedExecute)
        delete _ctx._phpx;
    else
    {
        // processing one token should not cause multiple scripts to commit (even EOF)
        // Assert(!_phpxExecute); - no longer true with nested OBJECT tags
        
        delete _phpxExecute;
        _phpxExecute = _ctx._phpx;
    }

    _ctx = _aryContextStack[_aryContextStack.Size()-1];
    _aryContextStack.Delete(_aryContextStack.Size()-1);
    
Cleanup:
    RRETURN(hr);
    
Die:
    hr = E_ABORT;
    goto Cleanup;
}

//+------------------------------------------------------------------------
//
//  Member:     CHtmParse::Die
//
//  Synopsis:   Sets _fDie; next time we look, we'll return E_ABORT.
//
//-------------------------------------------------------------------------
HRESULT
CHtmParse::Die()
{
    _fDie = TRUE;
    return(S_OK);
}


#if DBG == 1

//+------------------------------------------------------------------------
//
//  DEBUG ONLY: CHtmParse::AssertNoneProhibitedImpl
//
//  Synopsis:   Asserts that no elements on the stack are prohibited
//              containers for the proposed etag.
//
//-------------------------------------------------------------------------
void
CHtmParse::AssertNoneProhibitedImpl(ELEMENT_TAG etag)
{
    CTreeNode *pNode;
    const CHtmlParseClass *phpc;

    phpc = HpcFromEtag(etag);

    if (phpc->_atagProhibitedContainers)
    {
        pNode = FindContainer(phpc->_atagProhibitedContainers, phpc->_atagBeginContainers);
        AssertSz(!pNode, "Encountered prohibited container (DTD error)");
    }
}

//+------------------------------------------------------------------------
//
//  DEBUG ONLY: CHtmParse::AssertAllRequiredImpl
//
//  Synopsis:   Asserts that all required elements are on the stack
//              for inserting the proposed etag.
//
//-------------------------------------------------------------------------
void
CHtmParse::AssertAllRequiredImpl(ELEMENT_TAG etag)
{
    CTreeNode *pNode;
    const CHtmlParseClass *phpc;

    phpc = HpcFromEtag(etag);

    if (phpc->_atagRequiredContainers)
    {
        pNode = FindContainer(phpc->_atagRequiredContainers, phpc->_atagBeginContainers);
        AssertSz(pNode, "Missing required container (DTD error)");
    }
}

//+------------------------------------------------------------------------
//
//  DEBUG ONLY: CHtmParse::AssertNoEndContainteesImpl
//
//  Synopsis:   Asserts that all the specified element is not the end
//              container for any elements on the stack.
//
//-------------------------------------------------------------------------
void
CHtmParse::AssertNoEndContaineesImpl(CTreeNode *pNode)
{
    ELEMENT_TAG etag;
    BOOL fNested;
    CTreeNode *pNodeScan;
    const CHtmlParseClass *phpc;

    etag = pNode->Tag();
    fNested = (HpcFromEtag(etag)->_scope == SCOPE_NESTED);

    for (pNodeScan = _pNode; pNodeScan; pNodeScan = pNodeScan->Parent())
    {
        if (pNodeScan == pNode)
            return;

        phpc = HpcFromEtag(pNodeScan->Tag());

        AssertSz(
            (ETAG_GENERIC != etag && etag != pNodeScan->Tag()) ||
            (ETAG_GENERIC == etag &&
                ((0 != StrCmpI(pNode->_pElement->TagName(),   pNodeScan->_pElement->TagName())) ||
                 (0 != StrCmpI(pNode->_pElement->NamespaceHtml(), pNodeScan->_pElement->NamespaceHtml())))),
            "Element cannot be closed: same tag below on stack");

        AssertSz(!IsEtagInSet(etag, phpc->_atagEndContainers),
            "Element cannot be closed: end containee below on stack");
        AssertSz(!fNested || phpc->_scope != SCOPE_NESTED,
            "Element cannot be closed: nested element below on stack");
    }

    AssertSz(0, "Element cannot be closed: element not on stack");
}


//+------------------------------------------------------------------------
//
//  DEBUG ONLY: CHtmParse::AssertOnStackImpl
//
//  Synopsis:   Asserts that
//              1. the specified element is above _pel.
//              2. the specified element is not a proxy of elts above _pel
//
//-------------------------------------------------------------------------
void
CHtmParse::AssertOnStackImpl(CTreeNode *pNode)
{
    CTreeNode *pNodeScan;

    for (pNodeScan = _pNode; pNodeScan; pNodeScan = pNodeScan->Parent())
    {
        if (pNodeScan == pNode)
            return;
        AssertSz(DifferentScope(pNodeScan, pNode), "Non first context node on parser stack");
    }

    AssertSz(0, "Node not on parser stack");
}

//+------------------------------------------------------------------------
//
//  DEBUG ONLY: CHtmParse::AssertInsideContextImpl
//
//  Synopsis:   Asserts that
//              1. the specified element is under _pelTop.
//              2. the specified element is not under a proxy of _pelTop
//
//-------------------------------------------------------------------------
void
CHtmParse::AssertInsideContextImpl(CTreeNode *pNode)
{
    CTreeNode *pNodeScan;

    if (!_ctx._pelTop)
        return;

    for (pNodeScan = pNode; pNodeScan; pNodeScan = pNodeScan->Parent())
    {
        if (pNodeScan->Element() == _ctx._pelTop)
            return;
    }

    AssertSz(0, "Node not inside context");
}

#endif // DBG

//+------------------------------------------------------------------------
//
//  Function:   ScanNodeList
//
//  Synopsis:   Like FindContainer; used by the ValidateNodeList function
//
//-------------------------------------------------------------------------

CTreeNode **
ScanNodeList(CTreeNode **apNodeStack, long cNodeStack,
                const ELEMENT_TAG *pSetMatch, const ELEMENT_TAG *pSetStop)
{
    CTreeNode **ppNode;
    long c;

    for (ppNode = apNodeStack + cNodeStack - 1, c = cNodeStack; c; ppNode -= 1, c -= 1)
    {
        if (IsEtagInSet((*ppNode)->Tag(), pSetMatch))
            return ppNode;

        if (IsEtagInSet((*ppNode)->Tag(), pSetStop))
            return NULL;
    }

    return NULL;
}

//+------------------------------------------------------------------------
//
//  Function:   ValidateNodeList
//
//  Synopsis:   Used by the paster to recognize if two element chains
//              can be spliced together (and if not, which two elements
//              conflict with each other.)
//
//              If there is a conflict, returns the two indices to
//              conflicting members in the array.
//
//-------------------------------------------------------------------------

static inline BOOL
RequiresFirstContextContainers ( ELEMENT_TAG etag )
{
    switch ( etag )
    {
    case ETAG_BASE :
    case ETAG_MAP :
    case ETAG_FORM :
    case ETAG_NOEMBED_OFF :
    case ETAG_NOFRAMES_OFF :
    case ETAG_NOSCRIPT_OFF :
        return TRUE;
        
    default:
        return FALSE;
    }
}

HRESULT
ValidateNodeList(
    CTreeNode ** apNode,    // array of tree Nodes
    long         cNode,     // length of apNode array
    long         cNodeOk,   // number of elts of apElement array already okayed
    BOOL         fContain,  // should we validate required containers or not
    long *       piT,       // index of top-conflicting elt
    long *       piB)       // index of bottom-conflicting elt (> top index)
{
    CTreeNode **ppNodeT = NULL, **ppNodeB = NULL;
    const CHtmlParseClass *phpc;
    long c;

    // First check for a container that has literal tokenizing rules
    // (<XMP>, <SCRIPT>, <TITLE>, <TEXTAREA>)

    ppNodeB = apNode + cNode - 2;
    ppNodeT = apNode + max( (LONG)(cNodeOk - 1), 0L );

    for ( ; ppNodeB >= ppNodeT ; --ppNodeB )
    {
        if (TagDescFromEtag((*ppNodeB)->Tag())->HasFlag(TAGDESC_LITERALTAG))
        {
            ppNodeT = ppNodeB;
            ppNodeB++;
            goto Conflict;
        }
    }

    // Then check for parsing rules
    
    for (ppNodeB = apNode + cNodeOk, c = cNode - cNodeOk; c; c -= 1, ppNodeB += 1)
    {
        phpc = HpcFromEtag((*ppNodeB)->Tag());

        if (phpc->_atagMaskingContainers)
        {
            ppNodeT = ScanNodeList(apNode, ppNodeB - apNode, phpc->_atagMaskingContainers, phpc->_atagBeginContainers);
            if (ppNodeT)
                goto Conflict;
        }
        
        if (phpc->_atagProhibitedContainers)
        {
            ppNodeT = ScanNodeList(apNode, ppNodeB - apNode, phpc->_atagProhibitedContainers, phpc->_atagBeginContainers);
            if (ppNodeT)
                goto Conflict;
        }

#if 0 // Commented out to fix 58326.
      // Don't check TEXTSCOPE because it's only used to generate TCs around
      // textlike tags in tables in the parser; these are actually optional
      // and shouldn't be needed during paste.
      
        if (phpc->_fTextlike)
        {
            for (ppNodeT = ppNodeB - 1, c2 = ppNodeB - apNode; c2; c2 -= 1, ppNodeT -= 1)
            {
                phpc2 = HpcFromEtag((*pNodeT)->Tag());

                if (phpc2->_textscope == TEXTSCOPE_INCLUDE)
                    break;

                if (phpc2->_textscope == TEXTSCOPE_EXCLUDE)
                    goto Conflict;
            }
        }
#endif

        //
        // If desired, validate required containers.
        //
        
        if (fContain && phpc->_atagRequiredContainers &&
            ((*ppNodeB)->IsFirstBranch() || !RequiresFirstContextContainers( (*ppNodeB)->Tag() )))
        {
            ppNodeT =
                ScanNodeList(
                    apNode, ppNodeB - apNode, phpc->_atagRequiredContainers,
                    phpc->_atagBeginContainers );
            
            if (!ppNodeT)
                goto Conflict;
        }
    }

    *piT = *piB = 0;

    return S_OK;

Conflict:

    *piT = ppNodeT ? ppNodeT - apNode : 0;
    *piB = ppNodeB ? ppNodeB - apNode : 0;

    return S_FALSE;
}


#if DBG != 1
#pragma optimize("", on)
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\download\imgart.cxx ===
//+------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1992 - 1996.
//
//  File:       imgart.cxx
//
//  Contents:   Image filter for .art files
//
//-------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_IMG_HXX_
#define X_IMG_HXX_
#include "img.hxx"
#endif

#ifndef X_JGPLAY_H_
#define X_JGPLAY_H_
#include "jgplay.h"
#endif

MtDefine(CImgTaskArt, Dwn, "CImgTaskArt")
MtDefine(CArtPlayer, Dwn, "CArtPlayer")

/* ----------------------------- Defines --------------------------------*/
#define XX_DMsg(x, y)

/* Size of the buffer passed to JgpQueryStream */
#define JG_SIZE_INFO_BUFFER      1024
#define SIZE_DATA_BUFFER         512
   
/*
 * Offsets used to determine the start of the image data from
 * the pointer returned by the decompression library. The
 * pointer returned is a pointer to a BITMAPINFO structure.
 */

#define JG_COLORMAP_SIZE8  (sizeof(RGBQUAD) * 256)
#define JG_COLORMAP_SIZE4  (sizeof(RGBQUAD) * 16)
#define JG_COLORMAP_SIZE1  (sizeof(RGBQUAD) * 2)
#define JG_BMI_SIZE_1      (sizeof(BITMAPINFOHEADER) + JG_COLORMAP_SIZE1)
#define JG_BMI_SIZE_4      (sizeof(BITMAPINFOHEADER) + JG_COLORMAP_SIZE4)
#define JG_BMI_SIZE_8      (sizeof(BITMAPINFOHEADER) + JG_COLORMAP_SIZE8)
#define JG_BMI_SIZE_24     (sizeof(BITMAPINFOHEADER))

/* -----------------------------------------------------------------
 * Dynamic loading of DLL
 * ----------------------------------------------------------------- */

/* Name of decompression library */
#define JG_MODULE_NAME "JGPL400.DLL"

/* Function Names */

#define strJgpHeartBeat		"JgpHeartBeat"
#define strJgpQueryStream	"JgpQueryStream"
#define strJgpDoTest		"JgpDoTest"
#define strJgpOpen			"JgpOpen"
#define strJgpClose			"JgpClose"
#define strJgpSetEOFMark	"JgpSetEOFMark"
#define strJgpInputStream	"JgpInputStream"
#define strJgpStartPlay		"JgpStartPlay"
#define strJgpResumePlay	"JgpResumePlay"
#define strJgpPausePlay		"JgpPausePlay"
#define strJgpStopPlay		"JgpStopPlay"
#define strJgpReleaseSound	"JgpReleaseSound"
#define strJgpResumeSound	"JgpResumeSound"
#define strJgpSetPosition	"JgpSetPosition"
#define strJgpGetPosition	"JgpGetPosition"
#define strJgpGetImage		"JgpGetImage"
#define strJgpGetMask		"JgpGetMask"
#define strJgpGetReport		"JgpGetReport"

/* -----------------------------------------------------------------
 *  Function Pointers
 * ----------------------------------------------------------------- */

typedef JGERR (JGFFUNC *pfnJgpHeartBeatProto)(
		JGHANDLE SHandle);				// In: Show handle

typedef JGERR (JGFFUNC *pfnJgpQueryStreamProto)(
		UINT8 JGHUGE *pARTStream,		// In: ART Stream
		UINT32 nARTStreamBytes,			// In: Size of ARTStream in Bytes
		JGP_STREAM JGFAR *pInfo); 		// Out: Info structure

typedef JGERR (JGFFUNC *pfnJgpDoTestProto)(
		JGP_TEST JGFAR *pInfo);			// In: Info struct to be filled

typedef JGERR (JGFFUNC *pfnJgpOpenProto)(
		JGHANDLE JGFAR *pSHandle,		// Out: Place to receive handle   
		JGP_SETUP JGFAR *pSetup);		// In: The setup structure

typedef JGERR (JGFFUNC *pfnJgpCloseProto)(
		JGHANDLE SHandle);				// In: Show handle

typedef JGERR (JGFFUNC *pfnJgpSetEOFMarkProto)(
		JGHANDLE SHandle);				// In: Show handle

typedef JGERR (JGFFUNC *pfnJgpInputStreamProto)(
		JGHANDLE SHandle,				// In: Show Handle
		UINT8  JGHUGE *pARTStream,		// In: Pointer to the ART Stream
		UINT32 nBytes);					// In: Number of bytes being input

typedef JGERR (JGFFUNC *pfnJgpStartPlayProto)(
		JGHANDLE SHandle);				// In: Show Handle

typedef UINTW (JGFFUNC *pfnJgpResumePlayProto)(
		JGHANDLE SHandle);				// In: Show Handle

typedef UINTW (JGFFUNC *pfnJgpPausePlayProto)(
		JGHANDLE SHandle);				// In: Show Handle

typedef JGERR (JGFFUNC *pfnJgpStopPlayProto)(
		JGHANDLE SHandle);				// In: Show Handle

typedef JGERR (JGFFUNC *pfnJgpReleaseSoundProto)(
		JGHANDLE SHandle);				// In: Show Handle	

typedef JGERR (JGFFUNC *pfnJgpResumeSoundProto)(
		JGHANDLE SHandle);				// In: Show Handle	

typedef JGERR (JGFFUNC *pfnJgpSetPositionProto)(
		JGHANDLE SHandle,				// In: Show Handle
		UINT32 nPosition);				// In: Position

typedef JGERR (JGFFUNC *pfnJgpGetPositionProto)(
		JGHANDLE SHandle,				// In: Show Handle
		UINT32 JGFAR *pPosition);		// Out: Position

typedef JGERR (JGFFUNC *pfnJgpGetImageProto)(
		JGHANDLE SHandle,				// In: Show handle            
		JGP_IMAGE_REF JGFAR *phImg);	// Out: Handle to Image memory

typedef JGERR (JGFFUNC *pfnJgpGetMaskProto)(
		JGHANDLE SHandle,				// In: Show handle
		JGP_IMAGE_REF JGFAR *phImg);	// Out: Handle to Image memory

typedef JGERR (JGFFUNC *pfnJgpGetReportProto)(
		JGHANDLE SHandle,				// In:  Show Handle
		JGP_REPORT JGFAR *pReport);		// Out: Structure to receive the report

/* Function table.
 * This function table is used to access the functions exported by
 * the decompression library. The values are set by calls to
 * GetProcAddress.
 */
typedef struct tagJGFuncs {
	pfnJgpHeartBeatProto		pfnJgpHeartBeat;
	pfnJgpQueryStreamProto		pfnJgpQueryStream;
	pfnJgpDoTestProto			pfnJgpDoTest;
	pfnJgpOpenProto				pfnJgpOpen;
	pfnJgpCloseProto			pfnJgpClose;
	pfnJgpSetEOFMarkProto		pfnJgpSetEOFMark;
	pfnJgpInputStreamProto		pfnJgpInputStream;
	pfnJgpStartPlayProto		pfnJgpStartPlay;
	pfnJgpResumePlayProto		pfnJgpResumePlay;
	pfnJgpPausePlayProto		pfnJgpPausePlay;
	pfnJgpStopPlayProto			pfnJgpStopPlay;
	pfnJgpReleaseSoundProto		pfnJgpReleaseSound;
	pfnJgpResumeSoundProto		pfnJgpResumeSound;
	pfnJgpSetPositionProto		pfnJgpSetPosition;
	pfnJgpGetPositionProto		pfnJgpGetPosition;
	pfnJgpGetImageProto			pfnJgpGetImage;
	pfnJgpGetMaskProto			pfnJgpGetMask;
	pfnJgpGetReportProto		pfnJgpGetReport;
} JGFuncTable;

extern BYTE g_bJGJitState;

/* -----------------------------------------------------------------
 * Forward declarations
 * ----------------------------------------------------------------- */

static BOOL JGGetFunctionTable();

/* -----------------------------------------------------------------
 * Static declarations
 * ----------------------------------------------------------------- */

static JGFuncTable      ftJGDLL;
static HINSTANCE        hJGDLLModule        = NULL;
static JGHANDLE	        hLowColorContext    = NULL;
static JGHANDLE	        hMedColorContext    = NULL;
static JGHANDLE	        hHiColorContext     = NULL;
static JGHANDLE	        g_hActiveShowHandle = NULL;

static CGlobalCriticalSection g_csArt;

/* ------------------------------------------------------------
 * JGGetFunctionTable
 *
 * Loads the JG DLL if not already loaded and returns a
 * pointer to a function table with the accessible
 * functions.
 * ------------------------------------------------------------ */

static BOOL JGGetFunctionTable()
{
    BOOL fRetVal;
    
    g_csArt.Enter();

    fRetVal = FALSE;

    if (hJGDLLModule)
        fRetVal = TRUE;
    else if (g_bJGJitState == JIT_OK)
    {
        hJGDLLModule = LoadLibraryEx(_T(JG_MODULE_NAME), NULL, 0);
        if (hJGDLLModule)
        {
            ftJGDLL.pfnJgpHeartBeat =
                (pfnJgpHeartBeatProto) GetProcAddress(hJGDLLModule, strJgpHeartBeat);
            ftJGDLL.pfnJgpQueryStream =
                (pfnJgpQueryStreamProto) GetProcAddress(hJGDLLModule, strJgpQueryStream);
            ftJGDLL.pfnJgpDoTest =
                (pfnJgpDoTestProto) GetProcAddress(hJGDLLModule, strJgpDoTest);
            ftJGDLL.pfnJgpOpen =
                (pfnJgpOpenProto) GetProcAddress(hJGDLLModule, strJgpOpen);
            ftJGDLL.pfnJgpClose =
                (pfnJgpCloseProto) GetProcAddress(hJGDLLModule, strJgpClose);
            ftJGDLL.pfnJgpSetEOFMark =
                (pfnJgpSetEOFMarkProto) GetProcAddress(hJGDLLModule, strJgpSetEOFMark);
            ftJGDLL.pfnJgpInputStream =
                (pfnJgpInputStreamProto) GetProcAddress(hJGDLLModule, strJgpInputStream);
            ftJGDLL.pfnJgpStartPlay =
                (pfnJgpStartPlayProto) GetProcAddress(hJGDLLModule, strJgpStartPlay);
            ftJGDLL.pfnJgpResumePlay =
                (pfnJgpResumePlayProto) GetProcAddress(hJGDLLModule, strJgpResumePlay);
            ftJGDLL.pfnJgpPausePlay =
                (pfnJgpPausePlayProto) GetProcAddress(hJGDLLModule, strJgpPausePlay);
            ftJGDLL.pfnJgpStopPlay =
                (pfnJgpStopPlayProto) GetProcAddress(hJGDLLModule, strJgpStopPlay);
            ftJGDLL.pfnJgpReleaseSound =
                (pfnJgpReleaseSoundProto) GetProcAddress(hJGDLLModule, strJgpReleaseSound);
            ftJGDLL.pfnJgpResumeSound =
                (pfnJgpResumeSoundProto) GetProcAddress(hJGDLLModule, strJgpResumeSound);
            ftJGDLL.pfnJgpSetPosition =
                (pfnJgpSetPositionProto) GetProcAddress(hJGDLLModule, strJgpSetPosition);          
			ftJGDLL.pfnJgpGetPosition =
                (pfnJgpGetPositionProto) GetProcAddress(hJGDLLModule, strJgpGetPosition);
            ftJGDLL.pfnJgpGetImage =
                (pfnJgpGetImageProto) GetProcAddress(hJGDLLModule, strJgpGetImage);
			ftJGDLL.pfnJgpGetMask =
                (pfnJgpGetMaskProto) GetProcAddress(hJGDLLModule, strJgpGetMask);
			ftJGDLL.pfnJgpGetReport =
                (pfnJgpGetReportProto) GetProcAddress(hJGDLLModule, strJgpGetReport);

            if (ftJGDLL.pfnJgpHeartBeat &&
				ftJGDLL.pfnJgpQueryStream &&
				ftJGDLL.pfnJgpDoTest &&
                ftJGDLL.pfnJgpOpen &&
                ftJGDLL.pfnJgpClose &&
                ftJGDLL.pfnJgpSetEOFMark &&
                ftJGDLL.pfnJgpInputStream &&
                ftJGDLL.pfnJgpStartPlay &&
                ftJGDLL.pfnJgpResumePlay &&				
				ftJGDLL.pfnJgpPausePlay &&
                ftJGDLL.pfnJgpStopPlay &&
                ftJGDLL.pfnJgpReleaseSound &&
                ftJGDLL.pfnJgpResumeSound &&
                ftJGDLL.pfnJgpSetPosition &&
                ftJGDLL.pfnJgpGetPosition &&
                ftJGDLL.pfnJgpGetImage &&
                ftJGDLL.pfnJgpGetMask &&
                ftJGDLL.pfnJgpGetReport)
            {
                fRetVal = TRUE;
            }
            else
            {
                memset((BYTE *)&ftJGDLL, 0, sizeof(ftJGDLL));
                FreeLibrary(hJGDLLModule);
                hJGDLLModule = NULL;
            }

            g_bJGJitState = JIT_DONT_ASK;
        }
        else
        {
            g_bJGJitState = JIT_NEED_JIT;
        }
    }

    g_csArt.Leave();

    return fRetVal;
}

/* -----------------------------------------------------------
 * BuildContext
 *
 * Build the decompression context for specified color depth.
 * ----------------------------------------------------------- */

static void BuildContext(int ColorDepth, JGHANDLE JGFAR *hShowHandle)
{
    JGP_SETUP			jgInit;
	static JGP_TEST		jgTest;
#ifdef BIG_ENDIAN
    JG_RGBX				palBG = {0, 255, 255, 255};
#else
    JG_RGBX				palBG = {255, 255, 255, 0};
#endif
    JGHANDLE *          pTheContext = NULL;
    PALETTEENTRY JGPTR	pPal;
	HGLOBAL				hPal = NULL;
	int					cPalColors, i;
	static BOOL			fDoneTest = FALSE;

    *hShowHandle = NULL;

	if (!fDoneTest)
	{
		memset(&jgTest, 0, sizeof(JGP_TEST));
		jgTest.Size = sizeof(jgTest);

		ftJGDLL.pfnJgpDoTest(&jgTest);
		fDoneTest = TRUE;
	}

    switch(ColorDepth)
    {
        case 4:
            pTheContext = &hLowColorContext;
            break;
        case 8:
            pTheContext = &hMedColorContext;
            break;
        default:
            pTheContext = &hHiColorContext;
            break;
    }

    memset(&jgInit, 0, sizeof(JGP_SETUP));
    jgInit.Size = sizeof(jgInit);

    /* Set up the JG initialization structure for this environment */
	jgInit.ColorDepth		= ColorDepth;
	jgInit.InhibitImage		= FALSE;
	jgInit.InhibitAudio		= jgTest.CanDoAudio ? FALSE : TRUE; 
	jgInit.InhibitMIDI		= jgTest.CanDoMIDI ? FALSE : TRUE;
	jgInit.InhibitDither	= FALSE;
	jgInit.InhibitSplash	= FALSE;
	jgInit.AudioMode		= JGP_AUDIO_DEFAULT;
	jgInit.CreateMask		= TRUE;
	jgInit.ScaleImage		= JGP_SCALE_NONE;
	jgInit.GammaAdjust		= JGP_GAMMA_NONE;
	jgInit.PaletteMode		= JGP_PALETTE_INPUT;
	jgInit.IndexOverride	= JGP_OVERRIDE_NONE;		

	/* If there is an existing handle, reuse it */
	if (!(*pTheContext))
		jgInit.OldHandle = NULL;
	else
		jgInit.OldHandle = *pTheContext;

	/* Set the background color to white for use with the mask */
    jgInit.BackgroundColor = palBG;

    switch(ColorDepth)
    {
        case 4:
            cPalColors = 16;
            
			hPal = GlobalAlloc(GMEM_MOVEABLE | GMEM_SHARE, cPalColors * 4);
		    if (!hPal)
            {
                return;
            }

			pPal = (PALETTEENTRY JGPTR) GlobalLock(hPal);	
		    if (!pPal)
		    {
                GlobalFree(hPal);
				return;
			}
				
			for (i = 0; i < cPalColors; i++)
		    {
				pPal[i] = g_peVga[i];
		    }			                

            jgInit.DefaultPalette = hPal;
            jgInit.PaletteSize = cPalColors;
            break;
        case 8:
 			cPalColors = g_lpHalftone.wCnt;
			
			hPal = GlobalAlloc(GMEM_MOVEABLE | GMEM_SHARE, cPalColors * 4);
		    if (!hPal)
            {
                return;
            }

            pPal = (PALETTEENTRY JGPTR) GlobalLock(hPal);	
		    if (!pPal)
		    {
				GlobalFree(hPal);
                return;
			}
				
			for (i = 0; i < cPalColors; i++)
		    {
				pPal[i] = g_lpHalftone.ape[i];
		    }			                

			jgInit.DefaultPalette = hPal;
            jgInit.PaletteSize = cPalColors;        
            break;
        default:
            jgInit.ColorDepth = 24;
            jgInit.DefaultPalette = NULL;
            jgInit.PaletteSize = 0;
            break;
    }
		
    if (ftJGDLL.pfnJgpOpen(hShowHandle, &jgInit) != JGP_SUCCESS)
    {
        *hShowHandle = NULL;
    }

	if (hPal)
    {
		GlobalUnlock(hPal);
		GlobalFree(hPal);
    }

    return;
}

/* ------------------------------------------------------------
 * _GetImageandMask
 *
 * Get new pixels and copy them to the displayed bitmap. If the  
 * bitmap does not yet exist, we'll create it.
 * ------------------------------------------------------------ */

void _GetImageandMask(JGHANDLE hJGInstance, CImgBitsDIB **ppibd,
                     LONG _yHei, LONG _colorMode)      
{
    BITMAPINFO *    pbmi;
    HGLOBAL         hDib;
    HGLOBAL         hMask;
    BYTE *          pbSrcDib;
    BYTE *          pbDstDib;
    BYTE *          pbSrcMask;
    BYTE *          pbDstMask;

    // Get the handle to the image dib
    if ((ftJGDLL.pfnJgpGetImage(hJGInstance, &hDib) == 0) && (hDib != NULL))
    {
        pbmi = (BITMAPINFO *)GlobalLock(hDib);
        if (!pbmi)
        {
            Assert("hDib is non-null, yet GlobalLock failed " && pbmi);
            return;
        }

        switch (_colorMode)
        {
            case 4:
                pbSrcDib = (BYTE *)pbmi + JG_BMI_SIZE_4;
                break;
            case 8:
                pbSrcDib = (BYTE *)pbmi + JG_BMI_SIZE_8;
                break;
            default:
                pbSrcDib = (BYTE *)pbmi + JG_BMI_SIZE_24;
                break;
        }

        // If we already have an image bitmap, just update it with the new pixels
        if (*ppibd)
        {
            pbDstDib = (BYTE *)(*ppibd)->GetBits();
            if (pbSrcDib && pbDstDib)
            {
                Assert(_yHei <= (*ppibd)->Height());
                memcpy(pbDstDib, pbSrcDib, (*ppibd)->CbLine() * min(_yHei, (*ppibd)->Height()));
            }
        }
        else // Create new image bitmap and copy pixels into it
        {
            (*ppibd) = new CImgBitsDIB();
            if (*ppibd &&
                !!(*ppibd)->AllocDIB((_colorMode <= 8) ? _colorMode : 24, pbmi->bmiHeader.biWidth, pbmi->bmiHeader.biHeight, NULL, 0, -1, FALSE))
            {
                delete (*ppibd); // out of memory
                *ppibd = NULL;
            }
            
            if (*ppibd)
            {
                pbDstDib = (BYTE *)(*ppibd)->GetBits();
                if (pbSrcDib && pbDstDib)
                {
                    Assert(_yHei <= (*ppibd)->Height());
                    memcpy(pbDstDib, pbSrcDib, (*ppibd)->CbLine() * min(_yHei, (*ppibd)->Height()));
                }
            }
        }
        
        // Get the handle to the mask dib (if there is a mask)
        if ((ftJGDLL.pfnJgpGetMask(hJGInstance, &hMask) == 0) && (hMask != NULL))
        {
            pbmi = (BITMAPINFO *)GlobalLock(hMask);
            pbSrcMask = (BYTE *)pbmi + JG_BMI_SIZE_1;
            if (!pbmi)
            {
                Assert("hMask is non-null, yet GlobalLock failed " && pbmi);
                return;
            }

            // Ensure mask and update it with the new pixels
            if (*ppibd && pbSrcMask)
            {
                if (!(*ppibd)->GetMaskBits())
                {
                    (*ppibd)->AllocMask();
                }

                pbDstMask = (BYTE *)(*ppibd)->GetMaskBits();
                
                if (pbDstMask)
                {
                    Assert(_yHei <= (*ppibd)->Height());
                    memcpy(pbDstMask, pbSrcMask, (*ppibd)->CbLineMask() * min(_yHei, (*ppibd)->Height()));
                }
            }
        }
    }
}

/* ------------------------------------------------------------
 * GetArtReport
 *
 * Come here on timer message.  Trigger a heartbeat and get a 
 * report to see if we need to update the image.
 * ------------------------------------------------------------ */

BOOL CArtPlayer::GetArtReport(CImgBitsDIB **ppibd, LONG _yHei, LONG _colorMode)
{
    JGP_REPORT  jgUpdateInfo;
    JGHANDLE    hShowHandle;
    JGERR       iResult;

    if (!_dwShowHandle)
        return FALSE;

    if (!_fInPlayer)
    {
        _fInPlayer = TRUE;

        memset(&jgUpdateInfo, 0, sizeof(JGP_REPORT));
        jgUpdateInfo.Size = sizeof(jgUpdateInfo);

        hShowHandle = (JGHANDLE) _dwShowHandle;

        iResult = ftJGDLL.pfnJgpHeartBeat(hShowHandle);
        iResult = ftJGDLL.pfnJgpGetReport(hShowHandle, &jgUpdateInfo);

        // Update our report flags
   	    _fPlaying = jgUpdateInfo.IsPlaying;
	    _fPaused = jgUpdateInfo.IsPaused;
        _fIsDone = jgUpdateInfo.IsDone;
        _ulCurrentTime = jgUpdateInfo.CurrentTime;
        _ulAvailPlayTime = jgUpdateInfo.AvailPlayTime;

        _fUpdateImage = jgUpdateInfo.UpdateImage;
        _rcUpdateRect.top = jgUpdateInfo.UpdateRect.top;
        _rcUpdateRect.left = jgUpdateInfo.UpdateRect.left;
        _rcUpdateRect.bottom = jgUpdateInfo.UpdateRect.bottom;
        _rcUpdateRect.right = jgUpdateInfo.UpdateRect.right;

        // If there are new pixels available, get them into the displayed dib
        if (jgUpdateInfo.UpdateImage)
        {
            _GetImageandMask(hShowHandle, ppibd, _yHei, _colorMode);
        }

        _fInPlayer = FALSE;

        return (_fUpdateImage);
    }    

    return (FALSE);
}

/* ------------------------------------------------------------
 * QueryPlayState
 *
 * Check the play state to enable/disable menu options. 
 * ------------------------------------------------------------ */

BOOL CArtPlayer::QueryPlayState(int iCommand)
{
    BOOL bReturn = FALSE;

    switch (iCommand)
    {
        case IDM_IMGARTPLAY:
            if ((!_fPlaying) || _fPaused)
                bReturn = TRUE;  
            break;
        case IDM_IMGARTSTOP:
            if (_fPlaying && (!_fPaused))
                bReturn = TRUE;  
            break;
        case IDM_IMGARTREWIND:
            if (_ulCurrentTime > 0L)
                bReturn = TRUE;  
            break;
    }
    return (bReturn);
}

/* ------------------------------------------------------------
 * DoPlayCommand
 *
 * Execute a play command. 
 * ------------------------------------------------------------ */

void CArtPlayer::DoPlayCommand(int iCommand)
{
    JGERR iResult;

    if (_fInPlayer)
        return;

    switch (iCommand)
    {
        case IDM_IMGARTPLAY:
            if (_dwShowHandle)
            {
                _fInPlayer = TRUE;
                
                // We only need to worry about ART with sound
                if (_fHasSound)
                {
                    // Release sound hardware from the active handle
                    if ((g_hActiveShowHandle != NULL) &&
                        (g_hActiveShowHandle != (JGHANDLE) _dwShowHandle))
                    {
                        if (_fDynamicImages)
                        {
                            iResult = ftJGDLL.pfnJgpReleaseSound(g_hActiveShowHandle);
                            if (iResult == JGP_SUCCESS)
                                g_hActiveShowHandle = NULL;

                            // Assign sound hardware to the new active handle
                            iResult = ftJGDLL.pfnJgpResumeSound((JGHANDLE) _dwShowHandle);
                            if (iResult == JGP_SUCCESS)
                                g_hActiveShowHandle = (JGHANDLE) _dwShowHandle;
                        }
                        else
                        {   // Stop the previous if it is sound and picture
                            iResult = ftJGDLL.pfnJgpStopPlay(g_hActiveShowHandle);
                            if (iResult == JGP_SUCCESS)
                            {
                                g_hActiveShowHandle = NULL;
                            }
                        }
                    }
                }	
                // Start the playback    
                iResult = ftJGDLL.pfnJgpStartPlay((JGHANDLE) _dwShowHandle);
                if (iResult == JGP_SUCCESS)
                {
                    _fPlaying = TRUE;
                    _fPaused = FALSE;

                    if ((g_hActiveShowHandle == NULL) && _fHasSound)
                        g_hActiveShowHandle = (JGHANDLE) _dwShowHandle;
                }

                _fInPlayer = FALSE;
            }
            break;
        case IDM_IMGARTSTOP:
            if (_dwShowHandle)
            {
                iResult = ftJGDLL.pfnJgpStopPlay((JGHANDLE) _dwShowHandle);
                if (iResult == JGP_SUCCESS)
                {
                    _fPlaying = FALSE;
                    _fPaused = FALSE;
                }
            }
            break;
        case IDM_IMGARTREWIND:
            if (_dwShowHandle)
            {
                ftJGDLL.pfnJgpSetPosition((JGHANDLE) _dwShowHandle, 0L);
                _ulCurrentTime = 0L;
            }
            break;
    }
}

/* ------------------------------------------------------------
 * ~CArtPlayer
 *
 * Stop the Show, close the handle and clean-up our data 
 * structure.
 * ------------------------------------------------------------ */

CArtPlayer::~CArtPlayer()
{
    JGERR           iResult;
    JGHANDLE        hShowHandle;
    JGP_IMAGE_REF   hDib;
    JGP_IMAGE_REF   hMask;

    if (_dwShowHandle)
    {
        hShowHandle = (JGHANDLE) _dwShowHandle;

        // Stop playback
        iResult = ftJGDLL.pfnJgpStopPlay(hShowHandle);

        // Remove the active handle tag
        if (g_hActiveShowHandle == hShowHandle)
            g_hActiveShowHandle = NULL;

        // Free up the dib memory allocated by the player
        if (ftJGDLL.pfnJgpGetImage(hShowHandle, &hDib) == 0)
        {
            if ((ftJGDLL.pfnJgpGetMask(hShowHandle, &hMask) == 0) && (hMask != NULL))
                GlobalFree(hMask);
            
            GlobalFree(hDib);
        }

        // Close the show handle
        iResult = ftJGDLL.pfnJgpClose(hShowHandle);
        _dwShowHandle = 0;
    }
}

/* -----------------------------------------------------------
 * CImgTaskArt
 * ----------------------------------------------------------- */

class CImgTaskArt : public CImgTask
{
    typedef CImgTask super;

public:

    DECLARE_MEMCLEAR_NEW_DELETE(Mt(CImgTaskArt))

    ~CImgTaskArt();

    // CImgTask methods

    virtual void Decode(BOOL *pfNonProgressive);

    // CImgTaskArt methods

    BOOL            FindImageHeightWidth(BYTE *buf, BYTE *sizeInfoBuffer, long cBufBytes,
                                        long *lBufferSize, int  *height, int  *width);
    BOOL            DecompressArtImage();
    virtual void    BltDib(XHDC hdc, RECT * prcDst, RECT * prcSrc, DWORD dwRop, DWORD dwFlags);

    // Data members

    UINT            _ulCoversImg;
    HANDLE          _hDib;
    HANDLE          _hMask;
};

CImgTaskArt::~CImgTaskArt()
{
    if (!_pArtPlayer)
    {
        if (_hDib)
        {
            GlobalUnlock(_hDib);
            GlobalFree(_hDib);
        }

        if (_hMask)
        {
            GlobalUnlock(_hMask);
            GlobalFree(_hMask);
        }
    }
}

/* ------------------------------------------------------------
 * FindImageHeightWidth
 *
 * From the JG Stream find the Height and Width of the original
 * Image. Return TRUE if Height And Width found.
 * ------------------------------------------------------------ */

BOOL
CImgTaskArt::FindImageHeightWidth(BYTE *buf,
								  BYTE *sizeInfoBuffer,
								  long cBufBytes,
								  long *lBufferSize,
								  int  *height,
								  int  *width)
{
    JGP_STREAM      jgStreamInfo;
    CArtPlayer *    pArtPlayerNew;
    long            lBytesToCopy;

    memset(&jgStreamInfo, 0, sizeof(JGP_STREAM));
    jgStreamInfo.Size = sizeof(jgStreamInfo);

    lBytesToCopy = cBufBytes;
    if (((*lBufferSize) + lBytesToCopy) > JG_SIZE_INFO_BUFFER)
        lBytesToCopy = JG_SIZE_INFO_BUFFER - (*lBufferSize);

    if (lBytesToCopy > 0L)
    {
        memcpy(&sizeInfoBuffer[(*lBufferSize)], buf, cBufBytes);
        *lBufferSize += lBytesToCopy;
    }

    if (ftJGDLL.pfnJgpQueryStream(sizeInfoBuffer, *(lBufferSize), &jgStreamInfo) == JGP_SUCCESS)
    {
	    ////////////////////////////////////////////////////
		// Get the image height and width
		*height = jgStreamInfo.Dimensions.bottom;
        *width  = jgStreamInfo.Dimensions.right;

	    ////////////////////////////////////////////////////
		// See if this stream requires a heartbeat  
	    if (jgStreamInfo.Attributes & JGP_ISTEMPORAL)
		{
            // We need to store Show info, so clear some space
            pArtPlayerNew = new CArtPlayer;
            if (pArtPlayerNew == NULL)
            {
                XX_DMsg(DBG_IMAGE, ("not enough memory for ART Show data\n"));
            }
            else
            {
                _pArtPlayer = pArtPlayerNew;
                _pArtPlayer->_fInPlayer = FALSE; 
                _pArtPlayer->_fTemporalART = TRUE;
    	        _pArtPlayer->_fDynamicImages = (jgStreamInfo.Attributes & JGP_HASDYNAMICIMAGES);
                _pArtPlayer->_uiUpdateRate = jgStreamInfo.UpdateRate;

                ////////////////////////////////////////////////////
		        // See if this stream has sound  
	            if ((jgStreamInfo.Attributes & JGP_HASAUDIO) ||
	    	        (jgStreamInfo.Attributes & JGP_HASMIDI))
		        {
	    	        _pArtPlayer->_fHasSound = TRUE;
	            }
	        }
        }

        XX_DMsg(DBG_IMAGE, ("ART: Image size found h=%d w=%d\n", *height, *width));
        return TRUE;
    }
    
    return FALSE;
}

void
CImgTaskArt::Decode(BOOL *pfNonProgressive)
{
    DecompressArtImage();
}

/* --------------------------------------------------------------------------------------
 * DecompressArtImage
 *
 * This function does the actual decompression of the image
 * stream.
 *
 * The function returns TRUE if an image was succesfully
 * decoded otherwise FALSE.
 *
 * unsigned char **image,          out - Image data
 * unsigned char **mask,           out - pointer to BITMAPINFO structure & DIB for mask
 * HGLOBAL       *hDIB,            out - Handle to memory allocated for image
 * HGLOBAL       *hMask,           out - Handle to memory allocated for mask
 * int           ColorDepth        in  - Color depth to decompress image at.
 * ------------------------------------------------------------------------------------ */

BOOL CImgTaskArt::DecompressArtImage()
{
    CArtPlayer *        pStaticArtPlayer = NULL;
    CArtPlayer *        pArtPlayer = NULL;
    JGP_REPORT			jgUpdateInfo;
    JGHANDLE			hJGInstance;
    JGERR               iResult;
    unsigned char		buf[SIZE_DATA_BUFFER];
    unsigned long		cBufBytes;
    int					height, width;
    BOOL				fNewPixelsReady = FALSE;
    BOOL				fGotSizeInfo = FALSE;
    BYTE				sizeInfoBuffer[JG_SIZE_INFO_BUFFER];
    long				lBufferSize = 0L;
    int					yBottom;

    _ulCoversImg = IMGBITS_PARTIAL;

    /* STEP 1 - INIT */
    /* ------------- */

    /* Build a context for the JG Library to use for decompression */
    hJGInstance = NULL;
    BuildContext(_colorMode, &hJGInstance);
    if (!hJGInstance)
        return FALSE;

    /* Image Size Info */
    lBufferSize = 0L;
    memset(sizeInfoBuffer, 0, JG_SIZE_INFO_BUFFER);

    /* Used for progressive draw */
    memset(&jgUpdateInfo, 0, sizeof(JGP_REPORT));
    jgUpdateInfo.Size = sizeof(jgUpdateInfo);


    /* STEP 2 - DECOMPRESS */
    /* ------------------- */

    for(;;)
    {
        if (pArtPlayer)
        {
            if (pArtPlayer->_fInPlayer)
                continue;
            else
            {
                pArtPlayer->_fInPlayer = TRUE;
            }

            Read(buf, SIZE_DATA_BUFFER, &cBufBytes);
            if (cBufBytes == 0)
            {
                pArtPlayer->_fInPlayer = FALSE;
                break;
            }

            if (ftJGDLL.pfnJgpInputStream(hJGInstance, buf, cBufBytes) != JGP_SUCCESS)
            {
                pArtPlayer->_fInPlayer = FALSE;
                break;
            }

            pArtPlayer->_fInPlayer = FALSE;
        }
        else
        {
            Read(buf, SIZE_DATA_BUFFER, &cBufBytes);
            if (cBufBytes == 0)
                break;

            if (ftJGDLL.pfnJgpInputStream(hJGInstance, buf, cBufBytes) != JGP_SUCCESS)
                break;
        }

        /* ---- Find image Height and Width ---- */
        if (!fGotSizeInfo)
        {
            fGotSizeInfo = FindImageHeightWidth(buf, sizeInfoBuffer,
                                                cBufBytes, &lBufferSize,
                                                &height, &width);
            if (fGotSizeInfo)
            {
                _xWid = width;
                _yHei = height;
                OnSize(_xWid, _yHei, _lTrans);

                /* ---- Save temporal Show handle ---- */     
                /* ---- Start the timer and playback ---- */     
                if (_pArtPlayer)
                {
                    _pArtPlayer->_dwShowHandle = (DWORD_PTR) hJGInstance;
                    pArtPlayer = _pArtPlayer;

                    OnAnim();
                    _pArtPlayer->DoPlayCommand(IDM_IMGARTPLAY);
                }
                else // Must be a static ART image
                {
                    pStaticArtPlayer = new CArtPlayer;
                    if (pStaticArtPlayer == NULL)
                        break;                   
                    pStaticArtPlayer->_dwShowHandle = (DWORD_PTR) hJGInstance;
                    pStaticArtPlayer->_fInPlayer = FALSE;
                    pArtPlayer = pStaticArtPlayer;
                }
            }
        }

        /* ---- See if we have new pixels ---- */
        if (fGotSizeInfo)
        {
            fNewPixelsReady = pArtPlayer->GetArtReport(
                    (CImgBitsDIB **)&_pImgBits, _yHei, _colorMode);
        }

        /* ---- Progressive draw ---- */
        if (fNewPixelsReady)
        {
            yBottom = pArtPlayer->_rcUpdateRect.bottom;

            if (yBottom == _yHei - 1)
                yBottom++;

            if ((_ulCoversImg == IMGBITS_PARTIAL) &&
                ((yBottom < _yBot) || (yBottom == _yHei)))
                _ulCoversImg = IMGBITS_TOTAL;

            _yBot = yBottom;
            OnProg(FALSE, _ulCoversImg, FALSE, _yBot);
        }

    } /* endfor */

    OnProg(TRUE, _ulCoversImg, FALSE, _yBot);

    if (_ulCoversImg == IMGBITS_TOTAL || _yBot + 1 >= _yHei)
        _ySrcBot = -1;
    else if (_yBot >= 31)
        _ySrcBot = _yBot + 1;

    /* STEP 3 - CLEANUP */
    /* ---------------- */

	// There is no more data, set the EOF mark
    if (pArtPlayer && !pArtPlayer->_fInPlayer)
    {
        pArtPlayer->_fInPlayer = TRUE;

	    ftJGDLL.pfnJgpSetEOFMark(hJGInstance);

        pArtPlayer->_fInPlayer = FALSE;
    }

    // Close the show handle if it is not needed (i.e. static ART). 
    if (!_pArtPlayer)
    {
        // Get the image dib(s) before we close
        // the show so they can be destroyed
        if (ftJGDLL.pfnJgpGetImage(hJGInstance, &_hDib) == 0)
            if (ftJGDLL.pfnJgpGetMask(hJGInstance, &_hMask))
                iResult = ftJGDLL.pfnJgpClose(hJGInstance);

        hJGInstance = NULL;
        delete pStaticArtPlayer;
    }

    return TRUE; 
}

CImgTask * NewImgTaskArt()
{
    return(JGGetFunctionTable() ? new CImgTaskArt : NULL);
}

/* ------------------------------------------------------------
 *
 * Render the specified part of the ART image to the specified
 * location at the specified size.
 *
 * ------------------------------------------------------------ */
void
CImgTaskArt::BltDib(XHDC hdc, RECT * prcDst, RECT * prcSrc, DWORD dwRop, DWORD dwFlags)
{
    int ySrcBot = (_ulCoversImg == IMGBITS_TOTAL) ? _yHei : _yBot + 1;

    if (_pImgBits)
    {
        ((CImgBitsDIB *)_pImgBits)->SetValidLines(ySrcBot);

        _pImgBits->StretchBlt(hdc, prcDst, prcSrc, dwRop, dwFlags);
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\download\imggif.cxx ===
#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_IMG_HXX_
#define X_IMG_HXX_
#include "img.hxx"
#endif

extern void x_DitherRow (BYTE HUGEP * from, BYTE HUGEP * to, PALETTEENTRY *pcolors,
                long row, long ncols, int transparent);

//+------------------------------------------------------------------------
//  Tags
//-------------------------------------------------------------------------

PerfDbgExtern(tagImgTaskIO);

DeclareTag(tagImgTaskGif,           "Dwn",          "Img: Trace Gif optimizations")
PerfDbgTag(tagImgTaskGifAbort,      "Dwn",          "Img: Zap invalid Gif scanlines")
MtDefine(CImgTaskGif, Dwn, "CImgTaskGif")
MtDefine(CImgTaskGifStack, CImgTaskGif, "CImgTaskGif Decode Stack")
MtDefine(CImgTaskGifTable0, CImgTaskGif, "CImgTaskGif Decode Table 0")
MtDefine(CImgTaskGifTable1, CImgTaskGif, "CImgTaskGif Decode Table 1")
MtDefine(CImgTaskGifBits, CImgTaskGif, "CImgTaskGif Decode Image")
MtDefine(CImgTaskGifFrame, CImgInfo, "CImgTaskGif GIFFRAME")

#define XX_DMsg(x, y)

#define PROG_INTERVAL   0x3

#define NUM_IMPORTANT_COLORS 256

#define MAXCOLORMAPSIZE     256

#define TRUE    1
#define FALSE   0

#define MAX_LWZ_BITS        12

#define INTERLACE       0x40
#define LOCALCOLORMAP   0x80
#define BitSet(byte, bit)   (((byte) & (bit)) == (bit))

#define LM_to_uint(a,b)         ((((unsigned int) b)<<8)|((unsigned int)a))

#define dwIndefiniteGIFThreshold 300    // 300 seconds == 5 minutes
                                        // If the GIF runs longer than
                                        // this, we will assume the author
                                        // intended an indefinite run.
#define dwMaxGIFBits 13107200           // keep corrupted GIFs from causing
                                        // us to allocate _too_ big a buffer.
                                        // This one is 1280 X 1024 X 10.
typedef struct _GIFSCREEN
{
    unsigned long Width;
    unsigned long Height;
    unsigned long BitPixel;
    unsigned long ColorResolution;
    unsigned long Background;
    unsigned long AspectRatio;
}
GIFSCREEN;

typedef struct _GIF89
{
    long transparent;
    long delayTime;
    long inputFlag;
    long disposal;
}
GIF89;

#define MAX_STACK_SIZE  ((1 << (MAX_LWZ_BITS)) * 2)
#define MAX_TABLE_SIZE  (1 << MAX_LWZ_BITS)
typedef struct _GIFINFO
{
    unsigned char *src;
    GIF89 Gif89;
    long lGifLoc;
    long ZeroDataBlock;

/*
 **  Pulled out of nextCode
 */
    long curbit, lastbit, get_done;
    long last_byte;
    long return_clear;
/*
 **  Out of nextLWZ
 */
    unsigned short *pstack, *sp;
    long stacksize;
    long code_size, set_code_size;
    long max_code, max_code_size;
    long clear_code, end_code;

/*
 *   Were statics in procedures
 */
    unsigned char buf[280];
    unsigned short *table[2];
    long tablesize;
    long firstcode, oldcode;

} GIFINFO;

class CImgTaskGif : public CImgTask
{
    typedef CImgTask super;

public:

    DECLARE_MEMCLEAR_NEW_DELETE(Mt(CImgTaskGif))

    CImgTaskGif();
    virtual ~CImgTaskGif();

    // CImgTask methods

    virtual void Decode(BOOL *pfNonProgressive);

    // CImgTaskGif methods

    void OnProg(BOOL fLast, ULONG ulCoversImg);
    BOOL Read(void * pv, ULONG cb);
    BOOL ReadByte(BYTE * pb);
    void ReadGIFMaster();
    BOOL ReadColorMap(long number, PALETTEENTRY * ppe);
    long DoExtension(long label);
    long GetDataBlock(unsigned char *buf);
    BOOL initLWZ(long input_code_size);
    long nextCode(long code_size);
    unsigned short * growStack();
    BOOL growTables();
    long readLWZ();
    long nextLWZ();
    BOOL ReadScanline(unsigned char *pb, int cb);
    void CalculateUpdateRect(int logicalRow0, int logicalRowN, BOOL *pfInvalidateAll, LONG *pyBottom);
    void ProgressiveDithering(int logicalFill, int logicalRow);

    typedef BYTE HUGEP * HLPBYTE;
    CImgBitsDIB *ReadImage(long len, long height, BOOL fInterlace, BOOL fGIFFrame,
        int cpeColors, PALETTEENTRY * ppeColors, HLPBYTE * ppbBits, LONG lTrans);
    virtual void BltDib(XHDC hdc, RECT * prcDst, RECT * prcSrc, DWORD dwRop, DWORD dwFlags);

    // Data members

    LONG                _cbBuf;
    BYTE *              _pbBuf;
    BYTE                _abBuf[512];
    BOOL                _fEof;
    BOOL                _fMustBeTransparent;
    BOOL                _fDither;
    DWORD               _cbImage;
    BOOL                _fInterleaved;
    LONG                _yLogRow;
    LONG                _yLogRowDraw;
    LONG                _yDithRow;
    void *              _pvDithData;
    GIFINFO             _gifinfo;
    PALETTEENTRY        _apeFirst[256];
    int                 _mapConstrained[256];
    HLPBYTE             _pbSrcAlloc;
    HLPBYTE             _pbSrc;
    HLPBYTE             _pbDst;

};

CImgTaskGif::CImgTaskGif()
{
    _yLogRow = -1;
    _yLogRowDraw = -1;
}

CImgTaskGif::~CImgTaskGif()
{
    MemFree(_pbSrcAlloc);
    MemFree(_pvDithData);
    MemFree(_gifinfo.pstack);
    MemFree(_gifinfo.table[0]);
    MemFree(_gifinfo.table[1]);
}

void CImgTaskGif::Decode(BOOL *pfNonProgressive)
{
    ReadGIFMaster();

    if (_pImgBits && _gad.pgf && _yLogRowDraw >= 0)
    {
        if (_yLogRowDraw + 1 >= _gad.pgf->height)
        {
            _ySrcBot = -1;
        }
        else if (_fInterleaved)
        {
            _ySrcBot = (long)min((long)((_yLogRowDraw + 1) * 8), (long)_gad.pgf->height);

            if (_ySrcBot == _gad.pgf->height)
                _ySrcBot = -1;
        }
        else
        {
            _ySrcBot = _yLogRowDraw + 1;
        }

        _gad.pgf->pibd->SetValidLines(_ySrcBot);
    }
}

BOOL IsGifHdr(BYTE * pb)
{
    return(pb[0] == 'G' && pb[1] == 'I' && pb[2] == 'F'
        && pb[3] == '8' && (pb[4] == '7' || pb[4] == '9') && pb[5] == 'a');
}

CImgTask * NewImgTaskGif()
{
    return(new CImgTaskGif);
}

BOOL
CImgTaskGif::Read(void * pv, ULONG cb)
{
    PerfDbgLog1(tagImgTaskIO, this, "+CImgTaskGif::Read (req %ld)", cb);

    LONG cbReq = (LONG)cb, cbGot, cbTot = 0;

    while (cbReq > 0)
    {
        cbGot = cbReq < _cbBuf ? cbReq : _cbBuf;

        if (cbGot > 0)
        {
            memcpy(pv, _pbBuf, cbGot);
            _pbBuf += cbGot;
            _cbBuf -= cbGot;
            cbTot  += cbGot;

            if (cbTot == (LONG)cb)
                break;
        }

        if (_pDwnBindData->IsEof() || _fTerminate)
            break;

        if (cbGot > 0)
        {
            pv     = (BYTE *)pv + cbGot;
            cbReq -= cbGot;
        }

        cbGot  = 0;
        super::Read(_abBuf, ARRAY_SIZE(_abBuf), (ULONG *)&cbGot, cbReq);
        _pbBuf = _abBuf;
        _cbBuf = cbGot;
    }

    PerfDbgLog3(tagImgTaskIO, this, "-CImgTaskGif::Read (got %ld) %c%c",
        cbTot, _pDwnBindData->IsEof() ? 'E' : ' ',
        cbTot > 0 ? 'T' : 'F');

    return(cbTot > 0);
}

inline BOOL
CImgTaskGif::ReadByte(BYTE * pb)
{
    if (--_cbBuf >= 0)
    {
        *pb = *_pbBuf++;
        return(TRUE);
    }
    else
    {
        return(Read(pb, 1));
    }
}

void
CImgTaskGif::ReadGIFMaster()
{
    unsigned char buf[16];
    unsigned char c;
    long useGlobalColormap;
    long imageCount = 0;
    long imageNumber = 1;
    GIFSCREEN GifScreen;
    long bitPixel;
    GIFFRAME * pgfLast = NULL;
    GIFFRAME * pgfNew = NULL;
    HLPBYTE pbBits;
    PALETTEENTRY apeLocal[MAXCOLORMAPSIZE];
    PALETTEENTRY * ppeColors;
    int cpeColors;
    CImgBitsDIB *pibd = NULL;

    _gifinfo.ZeroDataBlock = 0;

    /*
     * Initialize GIF89 extensions
     */
    _gifinfo.Gif89.transparent = -1;
    _gifinfo.Gif89.delayTime = 5;
    _gifinfo.Gif89.inputFlag = -1;

    // initialize our animation fields
    _gad.dwGIFVer = dwGIFVerUnknown;

    if (!Read(buf, 6))
    {
        XX_DMsg(DBG_IMAGE, ("GIF: error reading magic number\n"));
        goto exitPoint;
    }

    if (!IsGifHdr(buf))
        goto exitPoint;

    _gad.dwGIFVer = (buf[4] == '7') ? dwGIFVer87a : dwGIFVer89a;

    if (!Read(buf, 7))
    {
        XX_DMsg(DBG_IMAGE, ("GIF: failed to read screen descriptor\n"));
        goto exitPoint;
    }

    GifScreen.Width = LM_to_uint(buf[0], buf[1]);
    GifScreen.Height = LM_to_uint(buf[2], buf[3]);
    GifScreen.BitPixel = 2 << (buf[4] & 0x07);
    GifScreen.ColorResolution = (((buf[4] & 0x70) >> 3) + 1);
    GifScreen.Background = buf[5];
    GifScreen.AspectRatio = buf[6];

    if (BitSet(buf[4], LOCALCOLORMAP))
    {                           /* Global Colormap */
        if (!ReadColorMap(GifScreen.BitPixel, _ape))
        {
            XX_DMsg(DBG_IMAGE, ("error reading global colormap\n"));
            goto exitPoint;
        }
    }

    if (GifScreen.AspectRatio != 0 && GifScreen.AspectRatio != 49)
    {
        float r;
        r = ((float) (GifScreen.AspectRatio) + (float) 15.0) / (float) 64.0;
        XX_DMsg(DBG_IMAGE, ("Warning: non-square pixels!\n"));
    }

    for (;; ) // our appetite now knows no bounds save termination or error
    {
        if (!ReadByte(&c))
        {
            XX_DMsg(DBG_IMAGE, ("EOF / read error on image data\n"));
            goto exitPoint;
        }

        if (c == ';')
        {                       /* GIF terminator */
            if (imageCount < imageNumber)
            {
                XX_DMsg(DBG_IMAGE, ("No images found in file\n"));
                goto exitPoint;
            }
            break;
        }

        if (c == '!')
        {                       /* Extension */
            if (!ReadByte(&c))
            {
                XX_DMsg(DBG_IMAGE, ("EOF / read error on extension function code\n"));
                goto exitPoint;
            }
            DoExtension(c);
            continue;
        }

        if (c != ',')
        {                       /* Not a valid start character */
            break;
        }

        ++imageCount;

        if (!Read(buf, 9))
        {
            XX_DMsg(DBG_IMAGE, ("couldn't read left/top/width/height\n"));
            goto exitPoint;
        }

        useGlobalColormap = !BitSet(buf[8], LOCALCOLORMAP);

        bitPixel = 1 << ((buf[8] & 0x07) + 1);

        /*
         * We only want to set width and height for the imageNumber
         * we are requesting.
         */
        if (imageCount == imageNumber)
        {
            // Replicate some of Netscape's special cases:
            // Don't use the logical screen if it's a GIF87a and the topLeft of the first image is at the origin.
            // Don't use the logical screen if the first image spills out of the logical screen.
            // These are artifacts of primitive authoring tools falling into the hands of hapless users.
            RECT    rectImage;  // rect defining bounds of GIF
            RECT    rectLS;     // rect defining bounds of GIF logical screen.
            RECT    rectSect;   // intersection of image an logical screen
            BOOL    fNoSpill;   // True if the image doesn't spill out of the logical screen
            BOOL    fGoofy87a;  // TRUE if its one of the 87a pathologies that Netscape special cases

            rectImage.left = LM_to_uint(buf[0], buf[1]);
            rectImage.top = LM_to_uint(buf[2], buf[3]);
            rectImage.right = rectImage.left + LM_to_uint(buf[4], buf[5]);
            rectImage.bottom = rectImage.top + LM_to_uint(buf[6], buf[7]);
            rectLS.left = rectLS.top = 0;
            rectLS.right = GifScreen.Width;
            rectLS.bottom = GifScreen.Height;
            IntersectRect( &rectSect, &rectImage, &rectLS );
            fNoSpill = EqualRect( &rectImage, &rectSect );
            fGoofy87a = FALSE;
            if (_gad.dwGIFVer == dwGIFVer87a)
            {
                // netscape ignores the logical screen if the image is flush against
                // either the upper left or lower right corner
                fGoofy87a = (rectImage.top == 0 && rectImage.left == 0) ||
                            (rectImage.bottom == rectLS.bottom &&
                             rectImage.right == rectLS.right);
            }

            if (!fGoofy87a && fNoSpill)
            {
                _xWid = GifScreen.Width;
                _yHei = GifScreen.Height;
            }
            else
            {
                // Something is amiss. Fall back to the image's dimensions.

                // If the sizes match, but the image is offset, or we're ignoring
                // the logical screen cuz it's a goofy 87a, then pull it back to
                // to the origin
                if ((LM_to_uint(buf[4], buf[5]) == GifScreen.Width &&
                      LM_to_uint(buf[6], buf[7]) == GifScreen.Height) ||
                     fGoofy87a)
                {
                    buf[0] = buf[1] = 0; // left corner to zero
                    buf[2] = buf[3] = 0; // top to zero.
                }

                _xWid = LM_to_uint(buf[4], buf[5]);
                _yHei = LM_to_uint(buf[6], buf[7]);
            }

            _lTrans = _gifinfo.Gif89.transparent;
            TraceTag((tagImgTrans, "CImgTaskGif %x  frame %d  set _lTrans to %d",
                        this, imageCount, _lTrans));

            // Post WHKNOWN
            OnSize(_xWid, _yHei, _lTrans);
        }

        if (!useGlobalColormap)
        {
            if (!ReadColorMap(bitPixel, apeLocal))
            {
                XX_DMsg(DBG_IMAGE, ("error reading local colormap\n"));
                goto exitPoint;
            }
        }

        // We allocate a frame record for each imag in the GIF stream, including
        // the first/primary image.
        pgfNew = (GIFFRAME *) MemAllocClear(Mt(CImgTaskGifFrame), sizeof(GIFFRAME));

        if ( pgfNew == NULL )
        {
            XX_DMsg(DBG_IMAGE, ("not enough memory for GIF frame\n"));
            goto exitPoint;
        }

        if ( _gifinfo.Gif89.delayTime != -1 )
        {
            // we have a fresh control extension for this block

            // convert to milliseconds
            pgfNew->uiDelayTime = _gifinfo.Gif89.delayTime * 10;


            //REVIEW(seanf): workaround to cope with 'degenerate animations' whose timing is set to some
            //               small value becaue of the delays imposed by Netscape's animation process
            if ( pgfNew->uiDelayTime <= 50 ) // assume these small values imply Netscape encoding delay
                pgfNew->uiDelayTime = 100;   // pick a larger value s.t. the frame will be visible

            pgfNew->bDisposalMethod =  _gifinfo.Gif89.disposal;

            if (_gifinfo.Gif89.transparent != -1)
                pgfNew->bTransFlags |= TRANSF_TRANSPARENT;
        }
        else
        {   // fake one up s.t. GIFs that rely solely on Netscape's delay to time their animations will play
            // The spec says that the scope of one of these blocks is the image after the block.
            // Netscape says 'until further notice'. So we play it their way up to a point. We
            // propagate the disposal method and transparency. Since Netscape doesn't honor the timing
            // we use our default timing for these images.
            pgfNew->uiDelayTime = 100;
            pgfNew->bDisposalMethod =  _gifinfo.Gif89.disposal;
        }

        pgfNew->top = LM_to_uint(buf[2], buf[3]);       // bounds relative to the GIF logical screen
        pgfNew->left = LM_to_uint(buf[0], buf[1]);
        pgfNew->width = LM_to_uint(buf[4], buf[5]);
        pgfNew->height = LM_to_uint(buf[6], buf[7]);

        if (_gifinfo.Gif89.transparent != -1)
            pgfNew->bTransFlags |= TRANSF_TRANSPARENT;
            
        // Images that are offset, or do not cover the full logical screen are 'transparent' in the
        // sense that they require us to matte the frame onto the background.

        if (!_gad.fHasTransparency)
        {
                if (pgfNew->top != 0 ||
                    pgfNew->left != 0 ||
                    (UINT)pgfNew->width != (UINT)GifScreen.Width ||
                    (UINT)pgfNew->height != (UINT)GifScreen.Height)
                    _fMustBeTransparent = TRUE;

            if ((pgfNew->bTransFlags & TRANSF_TRANSPARENT) || _fMustBeTransparent)
            {
                TraceTag((tagImgTrans, "ImgTaskGif %x frame %d  _lTrans: %d  bTrans: %x  _fMust: %d",
                                this, imageCount, _lTrans, pgfNew->bTransFlags, _fMustBeTransparent));

                _gad.fHasTransparency = TRUE;
                if (_lTrans == -1)
                {
                    _lTrans = 0;
                    TraceTag((tagImgTrans, "CImgTaskGif %x  frame %d  set _lTrans to %d",
                                this, imageCount, _lTrans));
                    OnTrans(_lTrans);
                }
            }
        }

        // We don't need to allocate a handle for the simple region case.
        // FrancisH says Windows is too much of a cheapskate to allow us the simplicity
        // of allocating the region once and modifying as needed. Well, okay, he didn't
        // put it that way...
        pgfNew->hrgnVis = NULL;
        pgfNew->bRgnKind = NULLREGION;

        if (!useGlobalColormap)
        {
            cpeColors = bitPixel;
            ppeColors = apeLocal;
        }
        else
        {
            cpeColors = GifScreen.BitPixel;
            ppeColors = _ape;
        }

        // First frame: must be able to progressively render, so stick it in _gad now.
        if (_gad.pgf == NULL)
        {
            _gad.pgf = pgfNew;

            // Remember the color table for the first frame so that
            // progressive dithering can be done on it.

            memcpy(_apeFirst, ppeColors, cpeColors * sizeof(PALETTEENTRY));
        }

        pibd = ReadImage(LM_to_uint(buf[4], buf[5]), // width
                            LM_to_uint(buf[6], buf[7]), // height
                            BitSet(buf[8], INTERLACE),
                            imageCount != imageNumber,
                            cpeColors, ppeColors, &pbBits,
                            _gifinfo.Gif89.transparent);

        if (pibd != NULL)
        {
            if (pgfLast != NULL)
            {
                // Set up pgfNew if not the first frame
                
                int transparent = (pgfNew->bTransFlags & TRANSF_TRANSPARENT) ? _gifinfo.Gif89.transparent : -1;

                _gad.fAnimated = TRUE; // say multi-image == animated

#ifdef _MAC
                pibd->ComputeTransMask(0, pgfNew->height, transparent, transparent);
#else
                if (_colorMode == 8 && !_pImgInfo->TstFlags(DWNF_RAWIMAGE)) // palettized, use DIB_PAL_COLORS
                {   // This will also dither the bits to the screen palette

                    if (x_Dither(pbBits, ppeColors, pgfNew->width, pgfNew->height, transparent))
                        goto exitPoint;
                        
                    pibd->ComputeTransMask(0, pgfNew->height, g_wIdxTrans, 255);
                }
#endif

                pgfNew->pibd = pibd;
                pibd = NULL;

                pgfLast->pgfNext = pgfNew;

                OnAnim();
            }
            else
            {
                // first frame: already been set up
                
                Assert(_gad.pgf == pgfNew);
                Assert(_gad.pgf->pibd == pibd);
                
                pibd = NULL;

            }
            pgfLast = pgfNew;
            pgfNew = NULL;
        }

        // make the _gifinfo.Gif89.delayTime stale, so we know if we got a new
        // GCE for the next image
        _gifinfo.Gif89.delayTime = -1;
    }

    if ( imageCount > imageNumber )
        _gad.fAnimated = TRUE; // say multi-image == animated

exitPoint:
    if (pibd)
        delete pibd;
    if (pgfNew && _gad.pgf != pgfNew)
        MemFree(pgfNew);
    return;
}

BOOL CImgTaskGif::ReadColorMap(long number, PALETTEENTRY * ppe)
{
    if (!Read(ppe, number * 3))
        return(FALSE);

    if (number)
    {
#ifdef _MAC
        DWORD UNALIGNED * pdwSrc = (DWORD *)((BYTE *)ppe + (number - 1) * 3);
 
        DWORD * pdwDst = (DWORD *)&ppe[number - 1];

        for (; number > 0; --number)
        {
            *pdwDst-- = (*pdwSrc & 0xFFFFFF00);
            pdwSrc = (DWORD *)((BYTE *)pdwSrc - 3);
        }
#else
#ifndef UNIX
        DWORD UNALIGNED * pdwSrc = (DWORD *)((BYTE *)ppe + (number - 1) * 3);
 
        DWORD * pdwDst = (DWORD *)&ppe[number - 1];

        for (; number > 0; --number)
        {
            *pdwDst-- = (*pdwSrc & 0xFFFFFF);
            pdwSrc = (DWORD *)((BYTE *)pdwSrc - 3);
        }
#else
        BYTE * pdwSrc = (BYTE *)ppe + (number - 1) * 3;
        DWORD * pdwDst = (DWORD *)&ppe[number - 1];

        for (; number > 0; --number)
        {
            *pdwDst-- = ((((DWORD)pdwSrc[2] << 8) | pdwSrc[1]) << 8) | pdwSrc[0];
            pdwSrc -= 3;
        }
#endif
#endif // _MAC
    }

    return(TRUE);
}

long CImgTaskGif::DoExtension(long label)
{
    unsigned char buf[256];
    int count;

    switch (label)
    {
        case 0x01:              /* Plain Text Extension */
            break;
        case 0xff:              /* Application Extension */
            // Is it the Netscape looping extension
            count = GetDataBlock((unsigned char *) buf);
            if (count >= 11)
            {
                char *szNSExt = "NETSCAPE2.0";

                if ( memcmp( buf, szNSExt, strlen( szNSExt ) ) == 0 )
                { // if it has their signature, get the data subblock with the iter count
                    count = GetDataBlock((unsigned char *) buf);
                    if ( count >= 3 )
                    {
                        _gad.fLooped = TRUE;
                        _gad.cLoops = (buf[2] << 8) | buf[1];
                    }
                }
            }
            while (GetDataBlock((unsigned char *) buf) > 0)
                ;
            return FALSE;
            break;
        case 0xfe:              /* Comment Extension */
            while (GetDataBlock((unsigned char *) buf) > 0)
            {
                XX_DMsg(DBG_IMAGE, ("GIF comment: %s\n", buf));
            }
            return FALSE;
        case 0xf9:              /* Graphic Control Extension */
            count = GetDataBlock((unsigned char *) buf);
            if (count >= 3)
            {
                _gifinfo.Gif89.disposal = (buf[0] >> 2) & 0x7;
                _gifinfo.Gif89.inputFlag = (buf[0] >> 1) & 0x1;
                _gifinfo.Gif89.delayTime = LM_to_uint(buf[1], buf[2]);
                if ((buf[0] & 0x1) != 0)
                    _gifinfo.Gif89.transparent = buf[3];
                else
                    _gifinfo.Gif89.transparent = -1;
            }
            while (GetDataBlock((unsigned char *) buf) > 0)
                ;
            return FALSE;
        default:
            break;
    }

    while (GetDataBlock((unsigned char *) buf) > 0)
        ;

    return FALSE;
}


long CImgTaskGif::GetDataBlock(unsigned char *buf)
{
    unsigned char count;

    count = 0;

    if (!ReadByte(&count))
    {
        return -1;
    }

    _gifinfo.ZeroDataBlock = count == 0;

    if ((count != 0) && (!Read(buf, count)))
    {
        return -1;
    }

    return ((long) count);
}

#define MIN_CODE_BITS 5
#define MIN_STACK_SIZE 64
#define MINIMUM_CODE_SIZE 2

BOOL CImgTaskGif::initLWZ(long input_code_size)
{
    if (input_code_size < MINIMUM_CODE_SIZE)
        return FALSE;

    _gifinfo.set_code_size = input_code_size;
    _gifinfo.code_size = _gifinfo.set_code_size + 1;
    _gifinfo.clear_code = 1 << _gifinfo.set_code_size;
    _gifinfo.end_code = _gifinfo.clear_code + 1;
    _gifinfo.max_code_size = 2 * _gifinfo.clear_code;
    _gifinfo.max_code = _gifinfo.clear_code + 2;

    _gifinfo.curbit = _gifinfo.lastbit = 0;
    _gifinfo.last_byte = 2;
    _gifinfo.get_done = FALSE;

    _gifinfo.return_clear = TRUE;

    if(input_code_size >= MIN_CODE_BITS)
        _gifinfo.stacksize = ((1 << (input_code_size)) * 2);
    else
        _gifinfo.stacksize = MIN_STACK_SIZE;

    if ( _gifinfo.pstack != NULL )
        MemFree( _gifinfo.pstack );
    if ( _gifinfo.table[0] != NULL  )
        MemFree( _gifinfo.table[0] );
    if ( _gifinfo.table[1] != NULL  )
        MemFree( _gifinfo.table[1] );

    _gifinfo.table[0] = 0;
    _gifinfo.table[1] = 0;
    _gifinfo.pstack = 0;

    _gifinfo.pstack = (unsigned short *)MemAlloc(Mt(CImgTaskGifStack), (_gifinfo.stacksize)*sizeof(unsigned short));
    if(_gifinfo.pstack == 0){
        goto ErrorExit;
    }
    _gifinfo.sp = _gifinfo.pstack;

    // Initialize the two tables.
    _gifinfo.tablesize = (_gifinfo.max_code_size);
    _gifinfo.table[0] = (unsigned short *)MemAlloc(Mt(CImgTaskGifTable0), (_gifinfo.tablesize)*sizeof(unsigned short));
    _gifinfo.table[1] = (unsigned short *)MemAlloc(Mt(CImgTaskGifTable1), (_gifinfo.tablesize)*sizeof(unsigned short));
    if((_gifinfo.table[0] == 0) || (_gifinfo.table[1] == 0)){
        Assert(0);
        goto ErrorExit;
    }

    return TRUE;

ErrorExit:
    if(_gifinfo.pstack){
        MemFree(_gifinfo.pstack);
        _gifinfo.pstack = 0;
    }

    if(_gifinfo.table[0]){
        MemFree(_gifinfo.table[0]);
        _gifinfo.table[0] = 0;
    }

    if(_gifinfo.table[1]){
        MemFree(_gifinfo.table[1]);
        _gifinfo.table[1] = 0;
    }

    return FALSE;

}

long CImgTaskGif::nextCode(long code_size)
{
    static const long maskTbl[16] =
    {
        0x0000, 0x0001, 0x0003, 0x0007,
        0x000f, 0x001f, 0x003f, 0x007f,
        0x00ff, 0x01ff, 0x03ff, 0x07ff,
        0x0fff, 0x1fff, 0x3fff, 0x7fff,
    };
    long i, j, ret, end;
    unsigned char *buf = &_gifinfo.buf[0];

    if (_gifinfo.return_clear)
    {
        _gifinfo.return_clear = FALSE;
        return _gifinfo.clear_code;
    }

    end = _gifinfo.curbit + code_size;

    if (end >= _gifinfo.lastbit)
    {
        long count;

        if (_gifinfo.get_done)
        {
            return -1;
        }
        buf[0] = buf[_gifinfo.last_byte - 2];
        buf[1] = buf[_gifinfo.last_byte - 1];

        if ((count = GetDataBlock(&buf[2])) == 0)
            _gifinfo.get_done = TRUE;
        if (count < 0)
        {
            return -1;
        }
        _gifinfo.last_byte = 2 + count;
        _gifinfo.curbit = (_gifinfo.curbit - _gifinfo.lastbit) + 16;
        _gifinfo.lastbit = (2 + count) * 8;

        end = _gifinfo.curbit + code_size;

        // Okay, bug 30784 time. It's possible that we only got 1
        // measly byte in the last data block. Rare, but it does happen.
        // In that case, the additional byte may still not supply us with
        // enough bits for the next code, so, as Mars Needs Women, IE
        // Needs Data.
        if (end >= _gifinfo.lastbit && !_gifinfo.get_done)
        {
            // protect ourselve from the ( theoretically impossible )
            // case where between the last data block, the 2 bytes from
            // the block preceding that, and the potential 0xFF bytes in
            // the next block, we overflow the buffer.
            // Since count should always be 1,
            Assert(count == 1);
            // there should be enough room in the buffer, so long as someone
            // doesn't shrink it.
            if (count + 0x101 >= sizeof(_gifinfo.buf))
            {
                Assert(FALSE);
                return -1;
            }

            if ((count = GetDataBlock(&buf[2 + count])) == 0)
                _gifinfo.get_done = TRUE;
            if (count < 0)
            {
                return -1;
            }
            _gifinfo.last_byte += count;
            _gifinfo.lastbit = _gifinfo.last_byte * 8;

            end = _gifinfo.curbit + code_size;
        }
    }

    j = end / 8;
    i = _gifinfo.curbit / 8;

    if (i == j)
        ret = buf[i];
    else if (i + 1 == j)
        ret = buf[i] | (((long) buf[i + 1]) << 8);
    else
        ret = buf[i] | (((long) buf[i + 1]) << 8) | (((long) buf[i + 2]) << 16);

    ret = (ret >> (_gifinfo.curbit % 8)) & maskTbl[code_size];

    _gifinfo.curbit += code_size;

    return ret;
}

// Grows the stack and returns the top of the stack.
unsigned short *
CImgTaskGif::growStack()
{
    long index;
    unsigned short *lp;

    if (_gifinfo.stacksize >= MAX_STACK_SIZE)
        return 0;

    index = (_gifinfo.sp - _gifinfo.pstack);
    if (MemRealloc(Mt(CImgTaskGifStack), (void **)&_gifinfo.pstack, (_gifinfo.stacksize)*2*sizeof(unsigned short)))
        return 0;

    _gifinfo.sp = &(_gifinfo.pstack[index]);
    _gifinfo.stacksize = (_gifinfo.stacksize)*2;
    lp = &(_gifinfo.pstack[_gifinfo.stacksize]);
    return lp;
}

BOOL
CImgTaskGif::growTables()
{
    if (MemRealloc(Mt(CImgTaskGifTable0), (void **)&_gifinfo.table[0], (_gifinfo.max_code_size)*sizeof(unsigned short)))
        return FALSE;

    if (MemRealloc(Mt(CImgTaskGifTable1), (void **)&_gifinfo.table[1], (_gifinfo.max_code_size)*sizeof(unsigned short)))
        return FALSE;

    return TRUE;
}

inline
long CImgTaskGif::readLWZ()
{
    return((_gifinfo.sp > _gifinfo.pstack) ? *--(_gifinfo.sp) : nextLWZ());
}

#define CODE_MASK 0xffff

long CImgTaskGif::nextLWZ()
{
    long code, incode;
    unsigned short usi;
    unsigned short *table0 = _gifinfo.table[0];
    unsigned short *table1 = _gifinfo.table[1];
    unsigned short *pstacktop = &(_gifinfo.pstack[_gifinfo.stacksize]);

    while ((code = nextCode(_gifinfo.code_size)) >= 0)
    {
        if (code == _gifinfo.clear_code)
        {

            /* corrupt GIFs can make this happen */
            if (_gifinfo.clear_code >= (1 << MAX_LWZ_BITS))
            {
                return -2;
            }


            _gifinfo.code_size = _gifinfo.set_code_size + 1;
            _gifinfo.max_code_size = 2 * _gifinfo.clear_code;
            _gifinfo.max_code = _gifinfo.clear_code + 2;

            if(!growTables())
                return -2;

            table0 = _gifinfo.table[0];
            table1 = _gifinfo.table[1];

            _gifinfo.tablesize = _gifinfo.max_code_size;


            for (usi = 0; usi < _gifinfo.clear_code; ++usi)
            {
                table1[usi] = usi;
            }
            memset(table0,0,sizeof(unsigned short )*(_gifinfo.tablesize));
            memset(&table1[_gifinfo.clear_code],0,sizeof(unsigned short)*((_gifinfo.tablesize)-_gifinfo.clear_code));
            _gifinfo.sp = _gifinfo.pstack;
            do
            {
                _gifinfo.firstcode = _gifinfo.oldcode = nextCode(_gifinfo.code_size);
            }
            while (_gifinfo.firstcode == _gifinfo.clear_code);

            return _gifinfo.firstcode;
        }
        if (code == _gifinfo.end_code)
        {
            long count;
            unsigned char buf[260];

            if (_gifinfo.ZeroDataBlock)
            {
                return -2;
            }

            while ((count = GetDataBlock(buf)) > 0)
                ;

            if (count != 0)
            return -2;
        }

        incode = code;

        if (code >= MAX_TABLE_SIZE)
            return -2;
        
        if (code >= _gifinfo.max_code)
        {
            if (_gifinfo.sp >= pstacktop){
                pstacktop = growStack();
                if(pstacktop == 0)
                    return -2;
            }
            *(_gifinfo.sp)++ = (unsigned short)((CODE_MASK ) & (_gifinfo.firstcode));
            code = _gifinfo.oldcode;
        }

        while (code >= _gifinfo.clear_code)
        {
            if (_gifinfo.sp >= pstacktop){
                pstacktop = growStack();
                if(pstacktop == 0)
                    return -2;
            }
            *(_gifinfo.sp)++ = table1[code];
            if (code == (long)(table0[code]))
            {
                return (code);
            }
            code = (long)(table0[code]);
        }

        if (_gifinfo.sp >= pstacktop){
            pstacktop = growStack();
            if(pstacktop == 0)
                return -2;
        }
        _gifinfo.firstcode = (long)table1[code];
        *(_gifinfo.sp)++ = table1[code];

        if ((code = _gifinfo.max_code) < (1 << MAX_LWZ_BITS))
        {
            table0[code] = (_gifinfo.oldcode) & CODE_MASK;
            table1[code] = (_gifinfo.firstcode) & CODE_MASK;
            ++_gifinfo.max_code;
            if ((_gifinfo.max_code >= _gifinfo.max_code_size) && (_gifinfo.max_code_size < ((1 << MAX_LWZ_BITS))))
            {
                _gifinfo.max_code_size *= 2;
                ++_gifinfo.code_size;
                if(!growTables())
                    return -2;

                table0 = _gifinfo.table[0];
                table1 = _gifinfo.table[1];

                // Tables have been reallocated to the correct size but initialization
                // still remains to be done. This initialization is different from
                // the first time initialization of these tables.
                memset(&(table0[_gifinfo.tablesize]),0,
                        sizeof(unsigned short )*(_gifinfo.max_code_size - _gifinfo.tablesize));

                memset(&(table1[_gifinfo.tablesize]),0,
                        sizeof(unsigned short )*(_gifinfo.max_code_size - _gifinfo.tablesize));

                _gifinfo.tablesize = (_gifinfo.max_code_size);


            }
        }

        _gifinfo.oldcode = incode;

        if (_gifinfo.sp > _gifinfo.pstack)
            return ((long)(*--(_gifinfo.sp)));
    }
    return code;
}

void
CImgTaskGif::OnProg(BOOL fLast, ULONG ulCoversImg)
{
    BOOL fInvalAll;

    CalculateUpdateRect(_yLogRow - PROG_INTERVAL + 1, _yLogRow, &fInvalAll, &_yBot);

    if (fLast || (GetTickCount() - _dwTickProg > 1000))
    {
#ifndef _MAC
        ProgressiveDithering(_yLogRowDraw, _yLogRow);
#endif
        _yLogRowDraw = _yLogRow;
    }

    super::OnProg(fLast, ulCoversImg, fInvalAll, _yBot);
}


#if DBG!=1
#pragma optimize(SPEED_OPTIMIZE_FLAGS, on)
#endif

BOOL
CImgTaskGif::ReadScanline(unsigned char *pb, int cb)
{
    int i;
    long b;

    for (i = cb; --i >= 0;)
    {
        b = readLWZ();
        if (b < 0)
            return FALSE;
        *pb++ = (unsigned char)b;
    }
    return TRUE;
}

#pragma optimize("", on)

#ifdef WIN16
#undef FillMemory
#define FillMemory( _pv, _cb, ch) hmemset( (_pv), ch, (_cb) )
#endif

CImgBitsDIB *
CImgTaskGif::ReadImage(long len, long height, BOOL fInterlace, BOOL fGIFFrame,
    int cpeColors, PALETTEENTRY * ppeColors, HLPBYTE * ppbBits, long lTrans)
{
    unsigned char c;
    long ypos = 0;
    long padlen = ((len + 3) / 4) * 4;
    char buf[256]; // need a buffer to read trailing blocks ( up to terminator ) into
    ULONG ulCoversImg = IMGBITS_PARTIAL;
    HLPBYTE pbBits;
    BOOL fAbort = FALSE;
    HRESULT hr;
    CImgBitsDIB *pibd = NULL;
    BOOL fColorTable;
    

    /*
       **  Initialize the Compression routines
     */
    if (!ReadByte(&c))
    {
        goto abort;
    }

    _cbImage = padlen * height * sizeof(char);

    if (_cbImage > dwMaxGIFBits)
       goto abort;

    pibd = new CImgBitsDIB();
    if (!pibd)
        goto abort;

    // don't bother with allocating a color table if we're going to dither
    // to our standard palette
    
    fColorTable = (_colorMode != 8 || _pImgInfo->TstFlags(DWNF_RAWIMAGE));

    if (!fColorTable)
    {
        hr = THR(pibd->AllocDIB(8, len, height, NULL, 0, -1, lTrans == -1));
        if (hr)
            goto abort;
    }
    else
    {
        RGBQUAD argbTable[256];

        if (cpeColors > 256)
            cpeColors = 256;
            
        CopyColorsFromPaletteEntries(argbTable, ppeColors, cpeColors);
        
        hr = THR(pibd->AllocDIB(8, len, height, argbTable, cpeColors, lTrans, lTrans == -1));
        if (hr)
            goto abort;
    }

    pbBits = (BYTE *)pibd->GetBits();

    if (!fGIFFrame)
    {
        _pImgBits = pibd;
        _gad.pgf->pibd = pibd;
        _pbDst = pbBits;

        if (fInterlace && _colorMode == 8 && !_pImgInfo->TstFlags(DWNF_RAWIMAGE))
        {
            _pbSrcAlloc = (HLPBYTE) MemAlloc(Mt(CImgTaskGifBits), _cbImage);
            if (_pbSrcAlloc == NULL)
                goto abort;
            _pbSrc = _pbSrcAlloc;
            pbBits = _pbSrc;
        }
        else
        {
            _pbSrc = pbBits;
        }
    }

 #ifndef _MAC
   if (_colorMode == 8 && !_pImgInfo->TstFlags(DWNF_RAWIMAGE))
    {
        int nDifferent;

        nDifferent = x_ComputeConstrainMap(cpeColors, ppeColors, lTrans, _mapConstrained);

        if (_pImgInfo->TstFlags(DWNF_FORCEDITHER)
            ||  (cpeColors > 16 && nDifferent > 15))
            _fDither = TRUE;
        else
            TraceTag((tagImgTaskGif, "No dithering needed for '%ls'", GetUrl()));
    }
#endif // _MAC

    if (c == 1)
    {
        // Netscape seems to field these bogus GIFs by filling treating them
        // as transparent. While not the optimal way to simulate this effect,
        // we'll fake it by pushing the initial code size up to a safe value,
        // consuming the input, and returning a buffer full of the transparent
        // color or zero, if no transparency is indicated.
        if (initLWZ(MINIMUM_CODE_SIZE))
            while (readLWZ() >= 0);

        if (lTrans != -1)
            FillMemory(_pbSrc, _cbImage, lTrans);
        else // fall back on the background color
            FillMemory(_pbSrc, _cbImage, 0);

        if (!fGIFFrame)
        {
            _yLogRow = height - 1;
            OnProg(TRUE, IMGBITS_TOTAL);
        }

        goto done;
    }


    if (initLWZ(c) == FALSE)
        goto abort;

    if (fInterlace)
    {
        long i;
        long pass = 0, step = 8;

        if (!fGIFFrame && (height > 4))
            _fInterleaved = TRUE;

        for (i = 0; i < height; i++)
        {
//          XX_DMsg(DBG_IMAGE, ("readimage, logical=%d, offset=%d\n", i, padlen * ((height-1) - ypos)));
            if (    fAbort
#ifdef _MAC
                ||  !ReadScanline(&pbBits[padlen * ypos], len))
#else
                ||  !ReadScanline(&pbBits[padlen * ((height-1) - ypos)], len))
#endif
            {
            #if DBG==1 || defined(PERFTAGS)
                if (IsPerfDbgEnabled(tagImgTaskGifAbort))
                {
                    fAbort = TRUE;
                    memset(&pbBits[padlen * ((height-1) - ypos)], 0, len);
                }
                else
            #endif
                    break;
            }

            ypos += step;
            while (ypos >= height)
            {
                if (pass++ > 0)
                    step /= 2;
                ypos = step / 2;
                if (!fGIFFrame && pass == 1)
                {
                    ulCoversImg = IMGBITS_TOTAL;
                }
            }
            if (!fGIFFrame)
            {
                _yLogRow = i;

                if ((i & PROG_INTERVAL) == 0)
                {
                    // Post ProgDraw (IE code has delay-logic)
                    OnProg(FALSE, ulCoversImg);
                }
            }
        }

        if (!fGIFFrame)
        {
            OnProg(TRUE, IMGBITS_TOTAL);
        }
    }
    else
    {
#ifdef _MAC
        for (ypos = 0; ypos < height; ypos++)
#else
        for (ypos = height-1; ypos >= 0; ypos--)
#endif
        {
            if (!ReadScanline(&pbBits[padlen * ypos], len))
                break;

            if (!fGIFFrame)
            {
                _yLogRow++;
//              XX_DMsg(DBG_IMAGE, ("readimage, logical=%d, offset=%d\n", _yLogRow, padlen * ypos));
                if ((_yLogRow & PROG_INTERVAL) == 0)
                {
                    // Post ProgDraw (IE code has delay-logic)
                    OnProg(FALSE, IMGBITS_PARTIAL);
                }
            }
        }

        if (!fGIFFrame)
        {
            OnProg(TRUE, IMGBITS_TOTAL);
        }
    }

    // consume blocks up to image block terminator so we can proceed to the next image
    while (GetDataBlock((unsigned char *) buf) > 0)
                ;

done:
    *ppbBits = pbBits;

    return (pibd);

abort:
    delete pibd;
    
    return NULL;
}


void
CImgTaskGif::ProgressiveDithering(int logicalFill, int logicalRow)
{
    BOOL bitbltNeeded = TRUE;
    int i;
    // Note: We only show the primary frame during prog draw, so we use the first GIFFRAME
    int padXSize;
    int row = logicalRow;
    int pass;
    int band;
    int band2;
    long offset;
    int passFill;
    int rowFill;
    int bandFill;
    int step;
    int j;

    if (logicalFill < 0)
        logicalFill = 0;

    if (_fDither && _pvDithData == NULL)
    {
        _pvDithData = pCreateDitherData(_gad.pgf->width);
        if (_pvDithData == NULL)
            return;
    }

    padXSize = ((_gad.pgf->width + 3) / 4) * 4;

    if (_fInterleaved)
    {
        getPassInfo(logicalFill,_gad.pgf->height,&passFill,&rowFill,&bandFill);
        getPassInfo(logicalRow,_gad.pgf->height,&pass,&row,&band);
        step = passFill == 0 ? 8 : bandFill*2;
        for (i = logicalFill; i <= logicalRow;i++)
        {
            offset = (long)padXSize*(long)(_gad.pgf->height - rowFill - 1) ;    /* the DIB is stored upside down */

            band2 = rowFill <= row ? band : band*2;
            if (band2 != 1)
            {
                if (_colorMode == 8 && !_pImgInfo->TstFlags(DWNF_RAWIMAGE))
                {
                    x_ColorConstrain(_pbSrc+offset,
                                     _pbDst+offset,
                                     _mapConstrained,
                                     _gad.pgf->width);
                }
                else
                    hmemcpy(_pbDst+offset,_pbSrc+offset,padXSize);
                if (rowFill+band2 > _gad.pgf->height)
                    band2 = _gad.pgf->height-rowFill;

                for (j = 1; j < band2; j++)
                    hmemcpy(_pbDst+(offset-j*padXSize),_pbDst+offset,padXSize);

                if (_colorMode == 8 && !_pImgInfo->TstFlags(DWNF_RAWIMAGE))
                {
                    _gad.pgf->pibd->ComputeTransMask(rowFill, band2, g_wIdxTrans, 255);
                }
            }

            if ((rowFill += step) >= _gad.pgf->height)
            {
                if (passFill++ > 0)
                    step /= 2;
                rowFill = step / 2;
            }

        }
        switch (pass)
        {
            case 0:
                band += row;
                break;
            case 3:
                band = _gad.pgf->height-row-1;
                break;
            default:
                band = _gad.pgf->height;
                break;
        }
        if (band > _gad.pgf->height)
            band = _gad.pgf->height;

        if (band > 0)
        {
            bitbltNeeded = (pass == 3);
        }
        if (bitbltNeeded)
        {
            if ((row >= _gad.pgf->height) ||
                (logicalRow == _gad.pgf->height - 1))
                row = _gad.pgf->height - 1;
        }
    }

    if (bitbltNeeded)
    {
        band = row + 1;
        if (_colorMode == 8 && !_pImgInfo->TstFlags(DWNF_RAWIMAGE))
        {
            if (_yDithRow <= row)
            {
                if (_fDither)
                {
                    x_DitherRelative(_pbSrc,
                                     _pbDst,
                                     _apeFirst,
                                     _gad.pgf->width,
                                     _gad.pgf->height,
                                     (_gad.pgf->bTransFlags & TRANSF_TRANSPARENT) ? _gifinfo.Gif89.transparent : -1,
                                     (int *)_pvDithData,
                                     _yDithRow,
                                     row);
                }
                else
                {
                    ULONG cb = (long)padXSize * (long)(_gad.pgf->height - row - 1);
                    x_ColorConstrain(_pbSrc + cb, _pbDst + cb, _mapConstrained,
                        padXSize * (row - _yDithRow + 1));
                }

                _gad.pgf->pibd->ComputeTransMask(_yDithRow, row - _yDithRow + 1, g_wIdxTrans, 255);
                _yDithRow = band;
            }
        }
    }
}

void CImgTaskGif::BltDib(XHDC hdc, RECT * prcDst, RECT * prcSrc, DWORD dwRop, DWORD dwFlags)
{
    int ySrcBot;

    if (_yLogRowDraw < 0 || _gad.pgf == NULL)
        return;

    if (_fInterleaved)
        ySrcBot = min(_yHei, (_yLogRowDraw + 1L) * 8L);
    else
        ySrcBot = _yLogRowDraw + 1;

    if (_gad.pgf->pibd)
    {
        _gad.pgf->pibd->SetValidLines(ySrcBot);

        _gad.pgf->pibd->StretchBltOffset(hdc, prcDst, prcSrc, _gad.pgf->left, _gad.pgf->top, dwRop, dwFlags);
    }
}

void
CImgTaskGif::CalculateUpdateRect(int logicalRow0, int logicalRowN, BOOL *pfInvalidateAll, LONG *pyBottom)
{
    *pfInvalidateAll = FALSE;

    if (logicalRowN == 0)
    {
        *pyBottom = 0;
        return;
    }

    if (_gad.pgf)
    {
        logicalRow0 += _gad.pgf->top;
        logicalRowN += _gad.pgf->top;
    }

    if (_fInterleaved)
    {
        int pass0, passN;
        int row0, rowN;
        int band0, bandN;

        getPassInfo(logicalRow0, _yHei, &pass0, &row0, &band0);
        getPassInfo(logicalRowN, _yHei, &passN, &rowN, &bandN);

        if (passN > pass0 + 1)
            *pfInvalidateAll = TRUE;

        *pyBottom = rowN + bandN;

        // We must special case the last row of last pass to deal with dithering
        // the possibly even numbered last row
        if (logicalRowN == _yHei - 1)
            *pyBottom = _yHei;
    }
    else
        *pyBottom = logicalRowN + 1;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\download\imgico.cxx ===
//+------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1992 - 1996.
//
//  File:       imgico.cxx
//
//  Contents:   Image filter for .ico files
//
//  Created by: dli on 06/12/98
//
//-------------------------------------------------------------------------
#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_IMG_HXX_
#define X_IMG_HXX_
#include "img.hxx"
#endif

MtDefine(CImgTaskIcon, Dwn, "CImgTaskIcon")
MtDefine(CImgTaskIconBmih, CImgTaskIcon, "CImgTaskIcon::_pbmih")
MtDefine(CImgTaskIconJunk, CImgTaskIcon, "CImgTaskIcon::bJunk")

// The following data structures are standard icon file structures
typedef struct tagICONDIRENTRY
{
    BYTE    cx;
    BYTE    cy;
    BYTE    nColors;
    BYTE    iUnused;
    WORD    xHotSpot;
    WORD    yHotSpot;
    DWORD   cbDIB;
    DWORD   offsetDIB;
} ICONDIRENTRY;

typedef struct tagICONDIR
{
    WORD iReserved;
    WORD iResourceType;
    WORD cresIcons;
} ICONDIR;

// decoder for icons
class CImgTaskIcon : public CImgTask
{
    typedef CImgTask super;

public:

    DECLARE_MEMCLEAR_NEW_DELETE(Mt(CImgTaskIcon))

    // CImgTask methods

    virtual void Decode(BOOL *pfNonProgressive);

    // Data members
    RGBQUAD          *  _pargb;
    BYTE *              _pbBitsXOR;
    BYTE *              _pbBitsAND;
    UINT                _ncolors;
    BITMAPINFOHEADER *  _pbmih;
};

void CImgTaskIcon::Decode(BOOL *pfNonProgressive)
{
    ICONDIR icondir = {0};
    ICONDIRENTRY icoentry = {0};
    BOOL    fDither = FALSE;
    BOOL    fSuccess = FALSE;
    HDC     hdcDib = NULL;
    HDC     hdcMask = NULL;
    int     iIco = 0;
    CImgBitsDIB *pibd = NULL;
    HRESULT hr;

    *pfNonProgressive = TRUE;

    // Read in the icon file header (ICONDIR)
#ifndef UNIX
    if (!Read((BYTE *)&icondir, sizeof(icondir)))
#else
    // IEUNIX: Because of alignment problem, we need to read as following.
    if(!Read((BYTE *)&icondir.iReserved, 3 * sizeof(WORD)))
#endif
        goto Cleanup;

    // If this is not a standard icon, bail
    if ((icondir.iReserved !=0) || (icondir.iResourceType != IMAGE_ICON) || (icondir.cresIcons < 1))
        goto Cleanup;

    // TODO: add logic here to figure out which icon we should load, Trident
    // needs to communicate with us on the size and color depth of the icon intended
    // For now, load the first icon in the .ico file.
    
    //for (iIco = 0; iIco < icondir.cresIcons; iIco++)
    //{           
    if (!Read((BYTE *)&icoentry, sizeof(icoentry)))
        goto Cleanup;
    //if (iIco == 5)
    //break;
    //}
    
    // if ((icoentry.bWidth == width_we_want) && (icoentry.bColorCount == color_count_we_want))
    //     break;
    //}
    // if (iIco == icondir.cresIcons)
    //    goto Cleanup;


    _xWid = icoentry.cx;
    _yHei = icoentry.cy;

    // Post WHKNOWN
    OnSize(_xWid, _yHei, -1 /* lTrans */);

    // NOTE: This is just doing a seek. There is got to be a better way!!!!! 
    if (sizeof(icondir) + sizeof(icoentry) * (iIco+1) < icoentry.offsetDIB)
    {
        BOOL fReadSuccess = FALSE;
        DWORD cbJunkSize = icoentry.offsetDIB - sizeof(icondir) - sizeof(icoentry) * (iIco+1);
        BYTE * bJunk = (BYTE *) MemAlloc(Mt(CImgTaskIconJunk), cbJunkSize);
        if (NULL == bJunk)
            goto Cleanup;
        fReadSuccess = Read(bJunk, cbJunkSize);
        MemFree(bJunk);
        if (!fReadSuccess)
            goto Cleanup;
    }

    // allocate BITMAPINFO header and color table 
    _pbmih = (BITMAPINFOHEADER *)MemAlloc(Mt(CImgTaskIconBmih), sizeof(BITMAPINFOHEADER) + 256 * sizeof(RGBQUAD));
    if (!_pbmih)
        goto Cleanup;

    // point to the color table
    _pargb = (RGBQUAD *)((BYTE *)_pbmih + sizeof(BITMAPINFOHEADER));

    // read BITMAPINFOHEADER and make sure the size is correct
    if (!Read((BYTE *)_pbmih, sizeof(BITMAPINFOHEADER)) || (_pbmih->biSize != sizeof(BITMAPINFOHEADER)))
        goto Cleanup;

    // bail if it's not 1 plane
    if (_pbmih->biPlanes != 1)
        goto Cleanup;

    // check possible bit counts 
    if (    _pbmih->biBitCount != 1
        &&  _pbmih->biBitCount != 4
        &&  _pbmih->biBitCount != 8
        &&  _pbmih->biBitCount != 16
        &&  _pbmih->biBitCount != 24
        &&  _pbmih->biBitCount != 32)
        goto Cleanup;

    // number of colors
    _ncolors = 0;
    if (_pbmih->biBitCount <= 8)        
        _ncolors = 1 << _pbmih->biBitCount;

    if ((_ncolors > 0) && !Read((BYTE *)_pargb, _ncolors * sizeof(RGBQUAD)))
        goto Cleanup;

    if (_ncolors > 0)
        CopyPaletteEntriesFromColors(_ape, _pargb, _ncolors);
    
    if (_colorMode == 8 && _pbmih->biBitCount == 8 && !_pImgInfo->TstFlags(DWNF_RAWIMAGE))
        fDither = TRUE;

    // _pbmih->biHeight is the sum of heights of the two bitmaps
    // and in an ICO file the two bitmaps namely the color and mask
    // must have the same dimension so
    // _pbmih->biHeight must be twice of _yHei
    Assert(_pbmih->biHeight == 2 * _yHei);
    _pbmih->biHeight = _yHei;

    // create the CImgBitDib Object
    pibd = new CImgBitsDIB();
    if (!pibd)
        goto Cleanup;

    _pImgBits = pibd;
    hr = THR(pibd->AllocDIBSectionFromInfo((BITMAPINFO *)_pbmih, fDither));
    if (hr)
        goto Cleanup;

    _pbBitsXOR = (BYTE *)pibd->GetBits();
    
    // read in the XOR bitmap bits
    if (!Read(_pbBitsXOR, pibd->CbLine() * _yHei))
        goto Cleanup;

    hr = THR(pibd->AllocMask());
    if (hr)
        goto Cleanup;

    _pbBitsAND = (BYTE *)pibd->GetMaskBits();
    // read in the AND bits
    if (!Read(_pbBitsAND, pibd->CbLineMask() * _yHei))
        goto Cleanup;

    // make sure  the total bits we read in is the same as the total size
    // of this icon resource
    // TODO: somehow the icoentry.cbDIB is always bigger ???
    // Assert((DWORD)((cbRowXOR+cbRowAND) * _yHei + sizeof(ICONDIRENTRY) +
    //               _ncolors * sizeof(RGBQUAD)) == icoentry.cbDIB);
    
    // Convert hbmXOR and hbmAND to format Trident recognize 
    hdcDib = CreateCompatibleDC(NULL);
    if (hdcDib)
    {
        hdcMask = CreateCompatibleDC(NULL);
        if (hdcMask)
        {
            HBITMAP hDibOld = SelectBitmap(hdcDib, pibd->GetHbm());
            HBITMAP hMaskOld = SelectBitmap(hdcMask, pibd->GetHbmMask());
            
            // OR _hbmMask onto _hbmDib.  This will make the transparent pixels white.
            BitBlt(hdcDib, 0, 0, _xWid, _yHei, hdcMask, 0, 0, SRCPAINT);

            // invert _hbmMask (0->1, 1->0) so that 0 pixels are transparent and 1 pixels are opaque
            BitBlt(hdcMask, 0, 0, _xWid, _yHei, hdcMask, 0, 0, DSTINVERT);
            
            SelectBitmap(hdcDib, hDibOld);
            SelectBitmap(hdcMask, hMaskOld);
        }
    }

    if (fDither)
    {
        HDC hdcMem;
        HBITMAP hbmSav;
        
        if (x_Dither(_pbBitsXOR, _ape, _xWid, _yHei, _lTrans))
            goto Cleanup;

        hdcMem = GetMemoryDC();

        if (hdcMem == NULL)
            goto Cleanup;

        hbmSav = SelectBitmap(hdcMem, pibd->GetHbm());

        SetDIBColorTable(hdcMem, 0, 256, g_rgbHalftone);

        SelectObject(hdcMem, hbmSav);

        ReleaseMemoryDC(hdcMem);
    }

    _ySrcBot = -1;

    fSuccess = TRUE;

Cleanup:
    if (hdcDib)
        DeleteDC(hdcDib);

    if (hdcMask)
        DeleteDC(hdcMask);

    MemFree(_pbmih);
    
    if (!fSuccess)
    {
        delete _pImgBits;
        _pImgBits = NULL;
        _pbBitsXOR = NULL;
        _pbBitsAND = NULL;
    }

}

CImgTask * NewImgTaskIco()
{
    return(new CImgTaskIcon);
}

#if DBG!=1
#pragma optimize(SPEED_OPTIMIZE_FLAGS, on)
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\download\imgemf.cxx ===
//+------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1992 - 1996.
//
//  File:       imgwmf.cxx
//
//  Contents:   Image filter for .wmf files
//
//-------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_IMG_HXX_
#define X_IMG_HXX_
#include "img.hxx"
#endif

#ifndef X_IMGBITS_HXX_
#define X_IMGBITS_HXX_
#include "imgbits.hxx"
#endif

MtDefine(CImgTaskEmf, Dwn, "CImgTaskEmf")
MtDefine(CImgTaskEmfBuf, CImgTaskEmf, "CImgTaskEmf Decode Buffer")

class CImgTaskEmf : public CImgTask
{
    typedef CImgTask super;

public:

    DECLARE_MEMCLEAR_NEW_DELETE(Mt(CImgTaskEmf))

    virtual void Decode(BOOL *pfNonProgressive);
};

void CImgTaskEmf::Decode(BOOL *pfNonProgressive)
{
    ULONG ulSize;
    LPBYTE pbBuf = NULL;
    HENHMETAFILE hmf = NULL;
    CImgBitsDIB *pibd = NULL;
    HDC hdcDst = NULL;
    HBITMAP hbmSav = NULL;
    ENHMETAHEADER    emh;
    UINT nColors;
    HRESULT hr;
    RGBQUAD argb[256];
    CRect rcPlay;

    *pfNonProgressive = TRUE;

    // read in the header
    if (!Read(&emh, sizeof(emh)))
       return;

    //The header contains a size field for the entire file.  
    //If this size is less than the header length (which we've just
    //successfully read in), then the field is clearly bogus.
    //Catch this now.
    if (emh.nBytes < sizeof(emh))
        return;

    // Create a screen-compatible DC for rendering
    hdcDst = GetMemoryDC();
    if (!hdcDst)
        goto Cleanup;

    // get measurements
    _xWid = emh.rclBounds.right - emh.rclBounds.left + 1;
    _yHei = emh.rclBounds.bottom - emh.rclBounds.top + 1;

    // get image size in logical pixels, with aspect adjustment
    rcPlay = ComputeEnhMetaFileBounds(&emh);

    // Try fixing bogus bounds
    if (_xWid <= 0 || _yHei <= 0)
    {
        // Unfortunately, to restore bounds we need to guess 
        // target device resolution. 
        // Device size/Millimeter size are not useful for that purpose
        // (see comments to ComputeEnhMetaFileBounds).

        // Here is how we are going to guess:
        //
        // 1) figure out current display's Device/MM ratio. 
        //    If it matches the metafile, use current display resolution.
        if (   GetDeviceCaps(hdcDst, HORZRES) == emh.szlDevice.cx
            && GetDeviceCaps(hdcDst, VERTRES) == emh.szlDevice.cy
            && GetDeviceCaps(hdcDst, HORZSIZE) == emh.szlMillimeters.cx
            && GetDeviceCaps(hdcDst, VERTSIZE) == emh.szlMillimeters.cy)
        {
            int cxInch = GetDeviceCaps(hdcDst, LOGPIXELSX);
            int cyInch = GetDeviceCaps(hdcDst, LOGPIXELSY);
            
            _xWid = MulDiv(emh.rclFrame.right  - emh.rclFrame.left, cxInch, 2540);
            _yHei = MulDiv(emh.rclFrame.bottom - emh.rclFrame.top,  cyInch, 2540);
        }
        // 2) Otherwise, use rcPlay. It will be probably wrong, but at least
        //    in the same ballpark, so we'll see something.
        else
        {
            _xWid = rcPlay.Width();
            _yHei = rcPlay.Height();
        }
    }
    else
    {
        // NOTE (alexmog): if we cared, we would check if this is a printer-
        //                 targeted metafile. In that case, rclBounds may be
        //                 huge, and we should scale that to screen resolution
        //                 (or whatever our target is here)
    }

    //A negative height will at best cause failure later on, and might very well cause
    //us to trash the heap.  Catch dimension problems here.
    if ((_xWid < 0) || (_yHei < 0))
        goto Cleanup;

    // Post WHKNOWN
    OnSize(_xWid, _yHei, _lTrans);

    // allocate a buffer to hold metafile
    ulSize = emh.nBytes;
    pbBuf = (LPBYTE)MemAlloc(Mt(CImgTaskEmfBuf), ulSize);
    if (!pbBuf)
        goto Cleanup;

    // copy the header into the buffer
    // Note that we've checked above that nBytes is at least sizeof(emf), so
    // this memcpy is fine.
    memcpy(pbBuf, &emh, sizeof(emh));

    // read the metafile into memory after the header
    if (!Read(pbBuf + sizeof(emh), ulSize - sizeof(emh)))
        goto Cleanup;

    // convert the buffer into a metafile handle
    hmf = SetEnhMetaFileBits(ulSize, pbBuf);
    if (!hmf)
        goto Cleanup;

    // Free the metafile buffer
    MemFree(pbBuf);
    pbBuf = NULL;

    // Get the palette from the metafile if there is one, otherwise use the 
    // halftone palette.
    nColors = GetEnhMetaFilePaletteEntries(hmf, 256, _ape);
    if (nColors == GDI_ERROR)
        goto Cleanup;

    if (nColors == 0)
    {
        memcpy(_ape, g_lpHalftone.ape, sizeof(_ape));
        nColors = 256;        
    }

    CopyColorsFromPaletteEntries(argb, _ape, nColors);

    pibd = new CImgBitsDIB();
    if (!pibd)
        goto Cleanup;

    hr = pibd->AllocDIBSection(8, _xWid, _yHei, argb, nColors, 255);
    if (hr)
        goto Cleanup;

    _lTrans = 255;

    Assert(pibd->GetBits() && pibd->GetHbm());

    memset(pibd->GetBits(), (BYTE)_lTrans, pibd->CbLine() * _yHei);

    // get image size in logical pixels, with aspect adjustment
    rcPlay = ComputeEnhMetaFileBounds(&emh);

    // Render the metafile into the bitmap
    
    hbmSav = (HBITMAP)SelectObject(hdcDst, pibd->GetHbm());
    SetWindowOrgEx(hdcDst, emh.rclBounds.left,emh.rclBounds.top, NULL);    
    PlayEnhMetaFile(hdcDst, hmf, &rcPlay);

    _ySrcBot = -1;
    
    _pImgBits = pibd;
    pibd = NULL;

Cleanup:
    if (hbmSav)
        SelectObject(hdcDst, hbmSav);
    if (hdcDst)
        ReleaseMemoryDC(hdcDst);
    if (pibd)
        delete pibd;
    if (hmf)        
        DeleteEnhMetaFile(hmf);
    if (pbBuf)
        MemFree(pbBuf);
    return;
}

CImgTask * NewImgTaskEmf()
{
    return(new CImgTaskEmf);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\download\imgbmp.cxx ===
//+------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1992 - 1996.
//
//  File:       imgbmp.cxx
//
//  Contents:   Image filter for .bmp files
//
//-------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_IMG_HXX_
#define X_IMG_HXX_
#include "img.hxx"
#endif

#ifdef UNIX
#ifndef X_DDRAW_H_
#define X_DDRAW_H_
#include "ddraw.h"
#endif
#endif

#ifndef WIN16
#ifndef X_IMGUTIL_H_
#define X_IMGUTIL_H_
#include "imgutil.h"
#endif
#endif

MtDefine(CImgTaskBmp, Dwn, "CImgTaskBmp")
MtDefine(CImgTaskBmpBmih, CImgTaskBmp, "CImgTaskBmp::_pbmih")
MtDefine(CImgTaskBmpRleBits, CImgTaskBmp, "CImgTaskBmp RLE Bits")

#ifdef BIG_ENDIAN
inline WORD READWINTELWORD(WORD w)
{
  return ( w << 8 | w >> 8 );
}

inline DWORD READWINTELDWORD(DWORD dw)
{
  return READWINTELWORD( (WORD)(dw >> 16 )) | ((DWORD)READWINTELWORD( dw & 0xffff)) << 16;
}
#endif

class CImgTaskBmp : public CImgTask
{
    typedef CImgTask super;

public:

    DECLARE_MEMCLEAR_NEW_DELETE(Mt(CImgTaskBmp))

    virtual void        Decode(BOOL *pfNonProgressive);

    // Data members

    BITMAPFILEHEADER    _bmfh;
    BITMAPINFOHEADER *  _pbmih;
    RGBQUAD          *  _pargb;
    UINT                _ncolors;
    BYTE *              _pbBits;

};

void CImgTaskBmp::Decode(BOOL *pfNonProgressive)
{
    BYTE    *pbCompressedBits = NULL;
    HDC     hdcMem;
    HBITMAP hbmSav;
    HBITMAP hbm = NULL;
    BOOL    fCompatibleFormat = TRUE;
    BOOL    fSuccess = FALSE;
    DWORD   dwHeaderSize;
    BOOL    fDither = FALSE;
    BOOL    fCoreHeader = FALSE;
    CImgBitsDIB *pibd = NULL;
    ULONG    cbRead = 0;
    HRESULT hr;
    
    *pfNonProgressive = TRUE;

#if !defined(UNIX) && !defined(_MAC)
    if (!Read((BYTE *)&_bmfh, sizeof(BITMAPFILEHEADER)))
#else
    // IEUNIX: Because of alignment problem, we need to read as following.
    if(!Read((BYTE *)&_bmfh.bfType, sizeof(WORD)) ||
        !Read((BYTE *)&_bmfh.bfSize, 3 * sizeof(DWORD)))
#endif
        goto Cleanup;

    cbRead += sizeof(BITMAPFILEHEADER);

#ifdef BIG_ENDIAN
    _bmfh.bfType = READWINTELWORD(_bmfh.bfType);
    _bmfh.bfSize = READWINTELDWORD(_bmfh.bfSize);
    _bmfh.bfReserved1 = READWINTELWORD(_bmfh.bfReserved1);
    _bmfh.bfReserved2 = READWINTELWORD(_bmfh.bfReserved2);
    _bmfh.bfOffBits = READWINTELDWORD(_bmfh.bfOffBits);
#endif

    // BITMAPINFOHEADER is a variable-length structure where the 
    // first field is the header size.  By reading this header and 
    // dynamically allocating the structure we will be compatible
    // with all forms of the header.  

    if (!Read((BYTE *)&dwHeaderSize, sizeof(DWORD)))
        goto Cleanup;

    cbRead += sizeof(DWORD);

#if defined(UNIX) || defined(_MAC)
    dwHeaderSize = READWINTELDWORD(dwHeaderSize);
#endif

    // Validate the header size

    if (dwHeaderSize < sizeof(BITMAPCOREHEADER))
        goto Cleanup;
    else if (dwHeaderSize == sizeof(BITMAPCOREHEADER))
    {
        fCoreHeader = TRUE;
        dwHeaderSize = sizeof(BITMAPINFOHEADER);
    }
    else if (dwHeaderSize < sizeof(BITMAPINFOHEADER))
        goto Cleanup;
    else if (dwHeaderSize > 4096) //arbitrary limit to guard bogus file
        goto Cleanup;
        
    _pbmih = (BITMAPINFOHEADER *)MemAlloc(Mt(CImgTaskBmpBmih), dwHeaderSize + 256 * sizeof(RGBQUAD));
    if (!_pbmih)
        goto Cleanup;
    _pargb = (RGBQUAD *)((BYTE *)_pbmih + dwHeaderSize);
    
    _pbmih->biSize = dwHeaderSize;

    if (!fCoreHeader)
    {
        if (!Read((BYTE *)_pbmih + sizeof(DWORD), dwHeaderSize - sizeof(DWORD)))
            goto Cleanup;
            
        cbRead += dwHeaderSize - sizeof(DWORD);
    }
    else
    {
        BITMAPCOREHEADER bcHeader;

        if (!Read((BYTE *)&bcHeader.bcWidth, sizeof(BITMAPCOREHEADER) - sizeof(DWORD)))
            goto Cleanup;
            
        cbRead += sizeof(BITMAPCOREHEADER) - sizeof(DWORD);

        _pbmih->biWidth = (LONG)bcHeader.bcWidth;
        _pbmih->biHeight = (LONG)bcHeader.bcHeight;
        _pbmih->biPlanes = bcHeader.bcPlanes;
        _pbmih->biBitCount = bcHeader.bcBitCount;
        _pbmih->biCompression = BI_RGB;
        _pbmih->biSizeImage = 0;
        _pbmih->biXPelsPerMeter = 0;
        _pbmih->biYPelsPerMeter = 0;
        _pbmih->biClrUsed = 0;
        _pbmih->biClrImportant = 0;
    }

#ifdef BIG_ENDIAN
    _pbmih->biWidth = (LONG)READWINTELDWORD(_pbmih->biWidth);
    _pbmih->biHeight = (LONG)READWINTELDWORD(_pbmih->biHeight);
    _pbmih->biPlanes = READWINTELWORD(_pbmih->biPlanes);
    _pbmih->biBitCount = READWINTELWORD(_pbmih->biBitCount);
    _pbmih->biCompression = READWINTELDWORD(_pbmih->biCompression);
    _pbmih->biSizeImage = READWINTELDWORD(_pbmih->biSizeImage);
    _pbmih->biXPelsPerMeter = (LONG)READWINTELDWORD(_pbmih->biXPelsPerMeter);
    _pbmih->biYPelsPerMeter = (LONG)READWINTELDWORD(_pbmih->biYPelsPerMeter);
    _pbmih->biClrUsed = READWINTELDWORD(_pbmih->biClrUsed);
    _pbmih->biClrImportant = READWINTELDWORD(_pbmih->biClrImportant);
#endif

    //Check for valid parameters
    if (_pbmih->biPlanes != 1)
        goto Cleanup;

    if (    _pbmih->biBitCount != 1
        &&  _pbmih->biBitCount != 4
        &&  _pbmih->biBitCount != 8
        &&  _pbmih->biBitCount != 16
        &&  _pbmih->biBitCount != 24
        &&  _pbmih->biBitCount != 32)
        goto Cleanup;

    if ((_pbmih->biWidth < 0) ||
        (_pbmih->biHeight < 0))
        goto Cleanup;

    if (_pbmih->biClrUsed && _pbmih->biClrUsed <= 256)
    {
        _ncolors = _pbmih->biClrUsed;
    }
    else if (_pbmih->biBitCount <= 8)
    {
        _ncolors = 1 << _pbmih->biBitCount;
    }
    else if (_pbmih->biCompression == BI_BITFIELDS)
    {
        _ncolors = 3;       // RGB masks
    }

    if (_ncolors)
    {
        if (!fCoreHeader)
        {
            if (!Read((BYTE *)_pargb, _ncolors * sizeof(RGBQUAD)))
                goto Cleanup;
                
            cbRead += _ncolors * sizeof(RGBQUAD);
        }
        else
        {
            RGBTRIPLE   argbT[256];
            UINT i;

            if (!Read((BYTE *)argbT, _ncolors * sizeof(RGBTRIPLE)))
                goto Cleanup;
                
            cbRead += _ncolors * sizeof(RGBTRIPLE);
    
            for (i = 0; i < _ncolors; ++i)
            {
                _pargb[i].rgbRed = argbT[i].rgbtRed;
                _pargb[i].rgbGreen = argbT[i].rgbtGreen;
                _pargb[i].rgbBlue = argbT[i].rgbtBlue;
                _pargb[i].rgbReserved = 0;
            }
        }

        if (_pbmih->biCompression != BI_BITFIELDS)
            CopyPaletteEntriesFromColors(_ape, _pargb, _ncolors);
    }

    _xWid  = _pbmih->biWidth;
    _yHei = _pbmih->biHeight;

    // Post WHKNOWN
    OnSize(_xWid, _yHei, -1 /* lTrans */);

    // Determine if we are reading a format compatible with the rest
    // of Trident.  
    
    if (_colorMode == 8 && _pbmih->biBitCount == 8 && !_pImgInfo->TstFlags(DWNF_RAWIMAGE))
        fDither = TRUE;
    
    if (_pbmih->biCompression != BI_RGB 
        && _pbmih->biCompression != BI_BITFIELDS)
        fCompatibleFormat = FALSE;

    pibd = new CImgBitsDIB();
    if (!pibd)
        goto Cleanup;

    _pImgBits = pibd;

    if (fCompatibleFormat)
    {
        // for compatible formats: if there are extra fields we do not understand, chop them off.
        // n.b. NT5's BITMAPV5HEADERs point to extra "profile" data past the bitmap that we do not read.
        
        if (_pbmih->biSize > sizeof(BITMAPV4HEADER))
            _pbmih->biSize = sizeof(BITMAPV4HEADER);
        
        hr = THR(pibd->AllocDIBSectionFromInfo((BITMAPINFO *)_pbmih, fDither));
        if (hr)
            goto Cleanup;
    }
    else
    {
        hr = THR(pibd->AllocDIBSection((_pbmih->biBitCount == 16) ? 15 : _pbmih->biBitCount,
                                _xWid, _yHei, _pargb, _ncolors, -1));
        if (hr)
            goto Cleanup;
    }

    hbm = pibd->GetHbm();
    _pbBits = (BYTE *)pibd->GetBits();

    // Before we read the bits, seek to the correct location in the file
    while (_bmfh.bfOffBits > cbRead)
    {
        BYTE abDummy[1024];
        ULONG cbSkip;

        cbSkip = _bmfh.bfOffBits - cbRead;
        
        if (cbSkip > 1024)
            cbSkip = 1024;

        if (!Read(abDummy, cbSkip))
            goto Cleanup;
            
        cbRead += cbSkip;
    }

    if (fCompatibleFormat)
    {
 #ifdef _MAC
        long    row;
        BYTE*   rowStart;
        int     cbRow = pibd->CbLine();

        for (row = _yHei - 1; row >= 0; row--)
        {
            rowStart = _pbBits + (cbRow * row);
            if (!Read(rowStart, cbRow))
                goto Cleanup;
        }
        pibd->ReleaseBits();
        _pbBits = nil;
        pibd->MapBits();
#else
        if (!Read(_pbBits, pibd->CbLine() * _yHei))
            goto Cleanup;
#endif
    }
    else
    {
        DIBSECTION  ds;
        LONG cbNeeded;

        cbNeeded = _pbmih->biSizeImage;

        // If the file continues beyond the end of the bitmap, read extra data in as well.
        
        if ((unsigned)cbNeeded < _bmfh.bfSize - cbRead)
            cbNeeded = _bmfh.bfSize - cbRead;

        Assert(_pbmih->biSizeImage > 0);
        if (_pbmih->biSizeImage == 0)
            goto Cleanup;
            
        pbCompressedBits = (BYTE *)MemAlloc(Mt(CImgTaskBmpRleBits), cbNeeded);
        if (!pbCompressedBits)
            goto Cleanup;

        if (!Read(pbCompressedBits, cbNeeded))
            goto Cleanup;
        
        hdcMem = GetMemoryDC();

        if (hdcMem == NULL)
            goto Cleanup;

        hbmSav = (HBITMAP)SelectObject(hdcMem, hbm);

        // TODO - need to fill image with transparent info so that
        //          RLE jumps are handled correctly.
        
        SetDIBitsToDevice(hdcMem, 0, 0, _xWid, _yHei, 0, 0,
            0, _yHei, pbCompressedBits, (BITMAPINFO *)_pbmih, 
            DIB_RGB_COLORS);

        SelectObject(hdcMem, hbmSav);

        ReleaseMemoryDC(hdcMem);

        // Update the info header to be the uncompressed format
        // in hbm.  Update the color table to the halftone
        // entries (ImgCreateDib caused the color table to be
        // set to our halftone palette.)

        GetObject(hbm, sizeof(DIBSECTION), &ds);
        memcpy(_pbmih, &ds.dsBmih, sizeof(BITMAPINFOHEADER));

        // TODO: Why is this not GetDibColorTable() ??????
        
        memcpy(_ape, g_lpHalftone.ape, _ncolors * sizeof(PALETTEENTRY));
    }

#ifndef _MAC
    if (fDither)
    {
        if (x_Dither(_pbBits, _ape, _xWid, _yHei, _lTrans))
            goto Cleanup;

        hdcMem = GetMemoryDC();

        if (hdcMem == NULL)
            goto Cleanup;

        hbmSav = (HBITMAP)SelectObject(hdcMem, hbm);

        SetDIBColorTable(hdcMem, 0, 256, g_rgbHalftone);

        SelectObject(hdcMem, hbmSav);

        ReleaseMemoryDC(hdcMem);
    }
#endif

    _ySrcBot = -1;
    _yBot = _yHei;
    
    fSuccess = TRUE;
    
Cleanup:
    MemFree(pbCompressedBits);
    MemFree(_pbmih);
    
    if (!fSuccess)
    {
        delete _pImgBits;
        _pImgBits = NULL;
        _pbBits = NULL;
    }
}

CImgTask * NewImgTaskBmp()
{
    return(new CImgTaskBmp);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\download\imgbits.cxx ===
//+------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1992 - 1998
//
//  File:       imgbits.cxx
//
//  Contents:   CImbBits, CImgBitsDIB
//
//-------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_IMG_HXX_
#define X_IMG_HXX_
#include "img.hxx"
#endif

#ifndef X_DITHERS_H_
#define X_DITHERS_H_
#include "dithers.h"
#endif

#ifndef X_IMGBITS_HXX_
#define X_IMGBITS_HXx_
#include "imgbits.hxx"
#endif

MtDefine(CImgBitsDIB, DIBSection, "Bitmaps - CImgBitsDIB")
MtDefine(CImgBitsDIB_pvImg, DIBSection, "Bitmaps - bits")
MtDefine(CImgBitsDIB_pbmih, DIBSection, "Bitmaps - headers")
MtExtern(DIBSection)

#ifdef _WIN64
DeclareTag(tagUseMaskBlt,    "Dwn", "Img: Use MaskBlt on Win64");
#endif

DeclareTag(tagNoTransMask,   "Dwn", "Img: Don't compute TransMask");
DeclareTag(tagForceRawDIB,   "Dwn", "Img: Force use of raw DIB");
DeclareTag(tagIgnorePalette, "Dwn", "Img: Ignore nonhalftone palette");
DeclareTag(tagAssertRgbBlt,  "Dwn", "Img: Assert on RGB mode palette blt");

DeclareTag(tagForceRgbBlt,   "Dwn", "Img: Force RGB mode palette plt");

#define MASK565_0   0x0000F800
#define MASK565_1   0x000007E0
#define MASK565_2   0x0000001F

void
CImgBitsDIB::FreeMemoryNoClear()
{
    if (_hbmImg)
    {
        #ifdef PERFMETER
        MtAdd(Mt(DIBSection), -1, -(CbLine() * _yHeight));
        #endif

        Verify(DeleteObject(_hbmImg));
        _pvImgBits = NULL;
    }
    
    if (_hbmMask)
    {
        #ifdef PERFMETER
        MtAdd(Mt(DIBSection), -1, -(CbLineMask() * _yHeight));
        #endif

        Verify(DeleteObject(_hbmMask));
        _pvMaskBits = NULL;
    }

    MemFree(_pvImgBits);
    MemFree(_pvMaskBits);
    MemFree(_pbmih);
}

void
CImgBitsDIB::FreeMemory()
{
    FreeMemoryNoClear();
    _hbmImg = NULL;
    _hbmMask = NULL;
    _pvImgBits = NULL;
    _pvMaskBits = NULL;
    _pbmih = NULL;
    _cColors = 0;
}

static const RGBQUAD g_rgbWhite = { 255, 255, 255, 0 };
static const RGBQUAD g_rgbBlack = { 0, 0, 0, 0 };

CImgBitsDIB::CImgBitsDIB(float f)
{
    memset(this, 0, sizeof(CImgBitsDIB));
}

HRESULT
CImgBitsDIB::AllocCopyBitmap(HBITMAP hbm, BOOL fPalColors, LONG lTrans)
{
    HRESULT hr;
    
    LONG iBitCount;
    struct {
        BITMAPINFOHEADER bmih;
        union {
            RGBQUAD rgb[256];
            WORD windex[256];
            DWORD dwbc[3];
        };
    } header;

    HDC hdc;

    hdc = GetMemoryDC();
    if (!hdc)
        return E_OUTOFMEMORY;
                
    memset(&header, 0, sizeof(BITMAPINFOHEADER) + sizeof(RGBQUAD) * 256);
    header.bmih.biSize = sizeof(BITMAPINFOHEADER);
    
    GetDIBits(hdc, hbm, 0, 0, NULL, (BITMAPINFO *)&header, fPalColors ? DIB_PAL_COLORS : DIB_RGB_COLORS);
    
    // GetDIBits(hdc, hbm, 0, 0, NULL, (BITMAPINFO *)&header, fPalColors ? DIB_PAL_COLORS : DIB_RGB_COLORS);
    // A second call to GetDIBits should get the color table if any, but it doesn't work on Win95, so we use
    // GetDIBColorTable instead (dbau)

    if (header.bmih.biBitCount <= 8)
    {
        HBITMAP hbmSav;
        hbmSav = (HBITMAP)SelectObject(hdc, hbm);
        GetDIBColorTable(hdc, 0, 1 << header.bmih.biBitCount, header.rgb);
        SelectObject(hdc, hbmSav);
    }
    
    iBitCount = header.bmih.biBitCount;
    if (iBitCount == 16)
    {
        if (header.bmih.biCompression != BI_BITFIELDS ||
            header.dwbc[0] != MASK565_0 || header.dwbc[1] != MASK565_1 || header.dwbc[2] != MASK565_2)
        {
            iBitCount = 15;
        }
    }

    BOOL fColorTable = (!fPalColors && iBitCount <= 8);
    if (fColorTable)
    {
        hr = THR(AllocDIB(iBitCount, header.bmih.biWidth, header.bmih.biHeight, header.rgb, 1 << iBitCount, lTrans, lTrans == -1));
    }
    else
    {
        hr = THR(AllocDIB(iBitCount, header.bmih.biWidth, header.bmih.biHeight, NULL, 0, -1, TRUE));
    }
    
    GetDIBits(hdc, hbm, 0, header.bmih.biHeight, GetBits(), (BITMAPINFO *)&header, fPalColors ? DIB_PAL_COLORS : DIB_RGB_COLORS);

    ReleaseMemoryDC(hdc);

    return S_OK;
}

HRESULT
CImgBitsDIB::AllocMaskSection()
{
    HRESULT hr = S_OK;
    HDC hdcMem;
    
    struct {
        BITMAPINFOHEADER bmih;
        union {
            RGBQUAD argb[2];
        } u;
    } bmi;
    
    memset(&bmi, 0, sizeof(bmi));

    bmi.bmih.biSize          = sizeof(BITMAPINFOHEADER);
    bmi.bmih.biWidth         = _xWidth;
    bmi.bmih.biHeight        = _yHeight;
    bmi.bmih.biPlanes        = 1;
    bmi.bmih.biBitCount      = 1;
    bmi.u.argb[1] = g_rgbWhite;
    
    hdcMem = GetMemoryDC();

    if (hdcMem == NULL)
        goto OutOfMemory;

    _hbmMask = CreateDIBSection(hdcMem, (BITMAPINFO *)&bmi, DIB_RGB_COLORS, &_pvMaskBits, NULL, 0);
    if (!_hbmMask || !_pvMaskBits)
        goto OutOfMemory;
        
    #ifdef PERFMETER
    MtAdd(Mt(DIBSection), +1, CbLineMask() * _yHeight);
    #endif


Cleanup:
    if (hdcMem)
        ReleaseMemoryDC(hdcMem);

    RRETURN(hr);

OutOfMemory:
    hr = E_OUTOFMEMORY;
    goto Cleanup;
}

HRESULT
CImgBitsDIB::AllocDIBSection(LONG iBitCount, LONG xWidth, LONG yHeight, RGBQUAD *argbTable, LONG cTable, LONG lTrans)
{
    HRESULT hr;
    struct {
        BITMAPINFOHEADER bmih;
        union {
            RGBQUAD argb[256];
            WORD aw[256];
            DWORD adw[3];
        } u;
    } bmi;
    int i;
    BOOL fPal;
    LONG cTableAlloc;

    fPal = (iBitCount == 8 && !argbTable);
    
    if ((iBitCount > 8 && lTrans > 0) || (lTrans > (1 << iBitCount)))
    {
        lTrans = -1;
    }

    bmi.bmih.biSize          = sizeof(BITMAPINFOHEADER);
    bmi.bmih.biWidth         = xWidth;
    bmi.bmih.biHeight        = yHeight;
    bmi.bmih.biPlanes        = 1;
    bmi.bmih.biBitCount      = (iBitCount == 15) ? 16 : iBitCount;
    bmi.bmih.biCompression   = (iBitCount == 16) ? BI_BITFIELDS : BI_RGB;
    bmi.bmih.biSizeImage     = 0;
    bmi.bmih.biXPelsPerMeter = 0;
    bmi.bmih.biYPelsPerMeter = 0;
    bmi.bmih.biClrUsed       = 0;
    bmi.bmih.biClrImportant  = 0;

    cTableAlloc = cTable;
    if (lTrans >= cTable)
        cTableAlloc = lTrans + 1;

    if (iBitCount == 1)
    {
        bmi.bmih.biClrUsed = 2;

        if (cTable > 2)
            cTable = 2;

        if (cTable > 0)
        {
            bmi.bmih.biClrImportant = cTableAlloc;
            memcpy(bmi.u.argb, argbTable, cTable * sizeof(RGBQUAD));
        }
        else
        {
            bmi.u.argb[0] = g_rgbBlack;
            bmi.u.argb[1] = g_rgbWhite;
        }
    }
    else if (iBitCount == 4)
    {
        bmi.bmih.biClrUsed = 16;

        if (cTable > 16)
            cTable = 16;

        if (cTable > 0)
        {
            bmi.bmih.biClrImportant = cTableAlloc;
            memcpy(bmi.u.argb, argbTable, cTable * sizeof(RGBQUAD));
        }
        else
        {
            bmi.bmih.biClrImportant = 16;
            CopyColorsFromPaletteEntries(bmi.u.argb, g_peVga, 16);
        }
    }
    else if (iBitCount == 8)
    {
        if (fPal)
        {
            bmi.bmih.biClrUsed = 256;

            for (i = 0; i < 256; ++i)
                bmi.u.aw[i] = (WORD)i;
        }
        else
        {
            if (cTable > 256)
                cTable = 256;
                
            if (cTable > 0)
            {
                bmi.bmih.biClrUsed = cTableAlloc;
                bmi.bmih.biClrImportant = bmi.bmih.biClrUsed;
                memcpy(bmi.u.argb, argbTable, cTable * sizeof(RGBQUAD));

                if (lTrans >= 0)
                {
                    bmi.u.argb[lTrans] = g_rgbWhite;
                }
            }
            else
            {
                bmi.bmih.biClrUsed = 256;
                _fPalColors = TRUE;
            }
        }
    }
    else if (iBitCount == 16)
    {
        bmi.u.adw[0] = MASK565_0;
        bmi.u.adw[1] = MASK565_1;
        bmi.u.adw[2] = MASK565_2;
    }

    hr = THR(AllocDIBSectionFromInfo((BITMAPINFO *)&bmi, fPal));
    
    _iTrans = lTrans;

    TraceTag((tagImgTrans, "CImgBitsDIB %x AllocDIBSection _iTrans = %d", this, _iTrans));

    RRETURN(hr);
}

HRESULT
CImgBitsDIB::AllocDIBSectionFromInfo(BITMAPINFO * pbmi, BOOL fPal)
{
    HDC     hdcMem = NULL;
    HRESULT hr = S_OK;

    Assert(!_pvImgBits);
    Assert(!_hbmImg);

    _xWidth = pbmi->bmiHeader.biWidth;
    _yHeight = pbmi->bmiHeader.biHeight;
    _iBitCount = pbmi->bmiHeader.biBitCount;
    _yHeightValid = _yHeight;
    _iTrans = -1;
    _cColors = pbmi->bmiHeader.biClrUsed;

    TraceTag((tagImgTrans, "CImgBitsDIB %x AllocDIBSectionFromInfo _iTrans = %d", this, _iTrans));

    if (_iBitCount == 16 &&
        (pbmi->bmiHeader.biCompression != BI_BITFIELDS ||
            ((DWORD*)(pbmi->bmiColors))[0] != MASK565_0 ||
            ((DWORD*)(pbmi->bmiColors))[1] != MASK565_1 ||
            ((DWORD*)(pbmi->bmiColors))[2] != MASK565_2))
    {
        _iBitCount = 15;
    }
    
    if (!(_iBitCount == 1 || _iBitCount == 4 || _iBitCount == 8 ||
          _iBitCount == 15 || _iBitCount == 16 || _iBitCount == 24 || _iBitCount == 32) ||
        !(_xWidth > 0 && _yHeight > 0))
    {
        hr = E_INVALIDARG;
        goto Cleanup;
    }

    hdcMem = GetMemoryDC();

    if (hdcMem == NULL)
        goto OutOfMemory;

    _hbmImg = CreateDIBSection(hdcMem, pbmi, fPal ? DIB_PAL_COLORS : DIB_RGB_COLORS, &_pvImgBits, NULL, 0);

    if (!_hbmImg || !_pvImgBits)
        goto OutOfMemory;

    #ifdef PERFMETER
    MtAdd(Mt(DIBSection), +1, CbLine() * _yHeight);
    #endif

    // Fill the bits with garbage so that the client doesn't assume that
    // the DIB gets created cleared (on WinNT it does, on Win95 it doesn't).

    #if DBG==1 && !defined(WIN16)
    int c;
    for (c = CbLine() * _yHeight; --c >= 0; ) ((BYTE *)_pvImgBits)[c] = (BYTE)c;
    #endif

Cleanup:
    if (hdcMem)
        ReleaseMemoryDC(hdcMem);

    RRETURN(hr);

OutOfMemory:
    hr = E_OUTOFMEMORY;
    goto Cleanup;
}

HRESULT
CImgBitsDIB::AllocDIB(LONG iBitCount, LONG xWidth, LONG yHeight, RGBQUAD *argbTable, LONG cTable, LONG lTrans, BOOL fOpaque)
{
    Assert(!_pvImgBits);
    Assert(!_pvMaskBits);
    Assert(iBitCount == 1 || iBitCount == 4 || iBitCount == 8 || iBitCount == 15 || iBitCount == 16 || iBitCount == 24 || iBitCount == 32);
    Assert(!!argbTable == !!cTable);
    Assert(!argbTable || iBitCount <= 8);
    Assert(xWidth >= 0 && yHeight >= 0);

#if DBG == 1
    if (!IsTagEnabled(tagForceRawDIB))
#endif
    if (g_dwPlatformID == VER_PLATFORM_WIN32_NT
#ifdef UNIX
        || g_dwPlatformID == VER_PLATFORM_WIN32_UNIX
#endif
        )
    {
        LONG cbImgSize = xWidth * yHeight * iBitCount / 8;

        // On NT, we'd rather use HBITMAPs for big images and transparent images
        // (raw DIBs are for small opaque images)


#ifndef UNIX // This is a hack for Unix, before we fix BitBlt api        
        if (cbImgSize > 10240 || !fOpaque)
#endif
            RRETURN(AllocDIBSection(iBitCount, xWidth, yHeight, argbTable, cTable, lTrans));
    }
    
    _xWidth = xWidth;
    _yHeight = yHeight;
    _iBitCount = iBitCount;
    _yHeightValid = _yHeight;

    if ((iBitCount > 8 && lTrans > 0) || (lTrans > (1 << iBitCount)))
    {
        lTrans = -1;
    }

    _iTrans = lTrans;

    TraceTag((tagImgTrans, "CImgBitsDIB %x AllocDIB _iTrans = %d", this, _iTrans));

    if (iBitCount == 15)
        iBitCount = 16;

    _pvImgBits = MemAlloc(Mt(CImgBitsDIB_pvImg), CbLine() * yHeight);
    if (!_pvImgBits)
        goto OutOfMemory;
    
    // need a header only with color table; otherwise, one is cobbled up while blitting
    if (argbTable)
    {
        // size of the color table or masks: depends on bit count

        LONG cTableCopy;
        LONG cTableAlloc;

        cTableCopy = cTable;
        
        if (cTableCopy > (1 << iBitCount))
            cTableCopy = (1 << iBitCount);

        cTableAlloc = (lTrans >= cTableCopy) ? lTrans + 1 : cTableCopy;

        _cColors = cTableAlloc;

        // Dang it.  Some popular display drivers ignore the biClrUsed field and assume 4bpp
        // bitmaps have 16 color entries and 8bpp have 256 color entries.  If we don't give them
        // what they expect it can lead to random faults / hangs when accessing beyond our 
        // shortened color table touches non-present memory.
        //
        // lTrans could by 16 or 256, requiring 17 or 257 entries so watch out for that...

        if (iBitCount == 4)
            cTableAlloc = (lTrans >= 16) ? lTrans + 1 : 16;
        else if (iBitCount == 8)
            cTableAlloc = (lTrans >= 256) ? lTrans + 1 : 256;

        _pbmih = (BITMAPINFOHEADER *)MemAllocClear(Mt(CImgBitsDIB_pbmih), sizeof(BITMAPINFOHEADER) + cTableAlloc * sizeof(RGBQUAD));
        if (!_pbmih)
            goto OutOfMemory;
            
        _pbmih->biSize = sizeof(BITMAPINFOHEADER);
        _pbmih->biWidth = xWidth;
        _pbmih->biHeight = yHeight;
        _pbmih->biPlanes = 1;
        _pbmih->biBitCount = iBitCount;
        _pbmih->biClrUsed = cTableCopy;
        _pbmih->biClrImportant = cTableCopy;

        memcpy(_pbmih + 1, argbTable, cTableCopy * sizeof(RGBQUAD));

        if (lTrans >= 0)
            ((RGBQUAD *)(_pbmih + 1))[lTrans] = g_rgbWhite;
    }
    else
    {
        if (iBitCount <= 8)
            _fPalColors = TRUE;

        _cColors = 1 << iBitCount;
    }
    
    return S_OK;

OutOfMemory:
    MemFree(_pvImgBits);
    _pvImgBits = NULL;

    MemFree(_pbmih);
    _pbmih = NULL;
    
    return E_OUTOFMEMORY;
}

HRESULT
CImgBitsDIB::AllocMask()
{
    Assert(_pvImgBits);
    Assert(!_pvMaskBits);

    // if a DIBSection is being used, use the same for the mask
    if (_hbmImg)
        return AllocMaskSection();
    
    _pvMaskBits = MemAlloc(Mt(CImgBitsDIB_pvImg), CbLineMask() * _yHeight);
    if (!_pvMaskBits)
        goto OutOfMemory;

    return S_OK;

OutOfMemory:
    return E_OUTOFMEMORY;
}

HRESULT
CImgBitsDIB::AllocMaskOnly(LONG xWidth, LONG yHeight)
{
    Assert(!_pvImgBits);
    Assert(!_pvMaskBits);
    
    _xWidth = xWidth;
    _yHeight = yHeight;
    _yHeightValid = yHeight;
    
    _pvMaskBits = MemAlloc(Mt(CImgBitsDIB_pvImg), CbLineMask() * yHeight);
    if (!_pvMaskBits)
        goto OutOfMemory;

    return S_OK;

OutOfMemory:
    return E_OUTOFMEMORY;
}

void
CImgBitsDIB::GetColors(long iFirst, long cColors, RGBQUAD *prgb)
{
    if (_hbmImg)
    {
        HDC hdcMem;
        HBITMAP hbmSav;
        hdcMem = GetMemoryDC();
        hbmSav = (HBITMAP)SelectObject(hdcMem, _hbmImg);
        GetDIBColorTable(hdcMem, iFirst, cColors, prgb);
        SelectObject(hdcMem, hbmSav);
        ReleaseMemoryDC(hdcMem);
    }
    else
    {
        if (iFirst < 0)
        {
            memset(prgb, 0, sizeof(RGBQUAD) * -iFirst);
            prgb -= iFirst;
            cColors += iFirst;
            iFirst = 0;
        }
        
        if (iFirst + cColors > _cColors)
        {
            memset(prgb + _cColors, 0, sizeof(RGBQUAD) * (iFirst + cColors - _cColors));
            cColors = _cColors - iFirst;
        }
        
        if (_fPalColors)
        {
            memcpy(prgb, g_rgbHalftone + iFirst, sizeof(RGBQUAD) * cColors);
        }
        else
        {
            memcpy(prgb, (RGBQUAD *)(_pbmih + 1) + iFirst, sizeof(RGBQUAD) * cColors);
        }
    }
}
    
void
CImgBitsDIB::SetTransIndex(LONG lIndex)
{
    Assert(_iBitCount <= 8);
    Assert(lIndex >= -1 && lIndex < (1 << _iBitCount));
    
    _iTrans = lIndex;

    TraceTag((tagImgTrans, "CImgBitsDIB %x SetTransIndex _iTrans = %d", this, _iTrans));

    if (lIndex >= 0)
    {
        if (_hbmImg)
        {
            HDC hdcMem;
            HBITMAP hbmSav;

            hdcMem = GetMemoryDC();
            if (!hdcMem)
                return;

            hbmSav = (HBITMAP)SelectObject(hdcMem, _hbmImg);
            SetDIBColorTable(hdcMem, lIndex, 1, &g_rgbWhite);
            SelectObject(hdcMem, hbmSav);
            ReleaseMemoryDC(hdcMem);
        }
        else if (_pbmih)
        {
            ((RGBQUAD *)(_pbmih + 1))[_iTrans] = g_rgbWhite;
        }
    }
}

void
CImgBitsDIB::SetValidLines(LONG yLines)
{
    if (yLines >= 0)
        _yHeightValid = yLines;
    else
        _yHeightValid = _yHeight;
}



// Used to StretchBlt an image whose bits are offset from the coordinates by the given amount

void
CImgBits::StretchBltOffset(const XHDC& hdc, RECT * prcDst, RECT * prcSrc, LONG xOffset, LONG yOffset, DWORD dwRop, DWORD dwFlags)
{
    RECT rcSrcOffset;

    rcSrcOffset.left    = prcSrc->left    - xOffset;
    rcSrcOffset.top     = prcSrc->top     - yOffset;
    rcSrcOffset.right   = prcSrc->right   - xOffset;
    rcSrcOffset.bottom  = prcSrc->bottom  - yOffset;

    StretchBlt(hdc, prcDst, &rcSrcOffset, dwRop, dwFlags);
}

// Draw the src rect of the specified image into the dest rect of the hdc

void
CImgBitsDIB::StretchBlt(const XHDC& hdc, RECT * prcDst, RECT * prcSrc, DWORD dwRop, DWORD dwFlags)
{
    HDC         hdcDib = NULL;
    HBITMAP     hbmSav = NULL;
    int         xDst            = prcDst->left;
    int         yDst            = prcDst->top;
    int         xDstWid         = prcDst->right - xDst;
    int         yDstHei         = prcDst->bottom - yDst;
    int         xSrc            = prcSrc->left;
    int         ySrc            = prcSrc->top;
    int         xSrcWid         = prcSrc->right - xSrc;
    int         ySrcHei         = prcSrc->bottom - ySrc;
    int         yUseHei         = _yHeight;

#if DBG == 1
    if (IsTagEnabled(tagIgnorePalette))
    {
        dwFlags &= ~DRAWIMAGE_NHPALETTE;
    }
    
    if (!IsTagEnabled(tagForceRgbBlt))
    {
        dwFlags |= DRAWIMAGE_NHPALETTE;
    }
#endif

    // Cases in which there is nothing to draw

    if ((!_pvImgBits && !_pvMaskBits && !_fSolid) || _yHeightValid == 0)
        return;
        
    if (    xDstWid <= 0 || xSrcWid <= 0 || _xWidth <= 0
        ||  yDstHei <= 0 || ySrcHei <= 0 || _yHeight <= 0)
        return;

    if (dwRop != SRCCOPY && (_pvMaskBits || _iTrans >= 0))
        return;

    // Step 1: Limit the source and dest rectangles to the visible area only.

    if (_yHeightValid > 0 && _yHeightValid < _yHeight)
        yUseHei = _yHeightValid;

    if (xSrc < 0)
    {
        xDst += MulDivQuick(-xSrc, xDstWid, xSrcWid);
        xDstWid = prcDst->right - xDst;
        xSrcWid += xSrc;
        xSrc = 0;        
        if (xDstWid <=0 || xSrcWid <= 0)
            return;
    }
    if (ySrc < 0)
    {
        yDst += MulDivQuick(-ySrc, yDstHei, ySrcHei);
        yDstHei = prcDst->bottom - yDst;
        ySrcHei += ySrc;
        ySrc = 0;
        if (yDstHei <=0 || ySrcHei <= 0)
            return;
    }
    if (xSrc + xSrcWid > _xWidth)
    {
        xDstWid = MulDivQuick(xDstWid, _xWidth - xSrc, xSrcWid);
        xSrcWid = _xWidth - xSrc;
        if (xDstWid <= 0 || xSrcWid <= 0)
            return;
    }
    if (ySrc + ySrcHei > yUseHei)
    {
        yDstHei = MulDivQuick(yDstHei, yUseHei - ySrc, ySrcHei);
        ySrcHei = yUseHei - ySrc;
        if (yDstHei <= 0 || ySrcHei <= 0)
            return;
    }
    // For the mirrored case, we need flip then offset.
    if(_fNeedMirroring)
    {
        // We need to handle clipping correctly and give a right-to-left tiling effect.
        // Let's take the "opposite" slice of the source.
        // The maximum will be the whole image.
        xSrc = - xSrc +_xWidth - xSrcWid;
        xDst += xDstWid - 1;
        xDstWid = - xDstWid;

    }    
    // Optimization: if solid, just patblt the color
    
    if (_fSolid)
    {
        // Turn on the palette relative bit for palettized devices in order to ensure that dithering
        // doesn't happen here.  The main reason is that is looks ugly, but more importantly we aren't
        // prepared to seam multiple copies of the image so that the dithering looks smooth.

        extern COLORREF g_crPaletteRelative;
        PatBltBrush(hdc, xDst, yDst, xDstWid, yDstHei, PATCOPY, _crSolid | g_crPaletteRelative);
        return;
    }

    SetStretchBltMode(hdc, COLORONCOLOR);

    // Step 2: For tranparent images, use mask to whiten drawing area

    if (_pvMaskBits || _iTrans >= 0)
    {
        if (dwFlags & DRAWIMAGE_NOTRANS)
            goto NoTransparency;
            
        if (GetDeviceCaps(hdc, TECHNOLOGY) == DT_RASPRINTER)
        {
            // No transparency for printers that we know lie about their support for transparency.
            
            int iEscapeFunction = POSTSCRIPT_PASSTHROUGH;

            // Print Driver Hack:
            // Some print drivers are angered by transparency but don't let us know.
            // In fact, some print drivers (<cough> WinFax <cough>) can bluescreen Whistler.
            // The TLS variable below restores a printing hack from IE5 for such printers.
            // It would be better to make this hack whenever drawing on print media with a bad driver.
            // While this is possible (add an XHDC member/method), it doesn't fit cleanly into our
            // architecture... so we restore the hack here.
            // Consequence: Image will appear trasnparent in PPV, even if it will not be printed as such.
            if (    TLS(fPrintWithNoTransparency)
                ||  Escape(hdc, QUERYESCSUPPORT, sizeof(int), (LPCSTR) &iEscapeFunction, NULL))
            {
                // Skip transparency unless we are a mask-only image
                if (_pvImgBits || !_pvMaskBits)
                    goto NoTransparency;
            }
        }
    
        if (_pvMaskBits)
        {
            // 1-bit mask case

            if (_hbmMask)
            {
                // We have an HBITMAP, not just bits
                
                Assert(!hdcDib && !hbmSav);
                
                hdcDib = GetMemoryDC();
                if (!hdcDib)
                    goto Cleanup;

#ifdef _WIN64
//$ WIN64: MaskBlt is broken in build 2019.  Remove this when its working again.
#if DBG==1
                if (!IsTagEnabled(tagUseMaskBlt)) ; else
#else
                if (g_Zero.ach[0] == 0) ; else
#endif
#endif

                // Special case: use MaskBlt for the whole thing on NT
                if (hdc.CanMaskBlt() && 
                    xSrcWid == xDstWid && ySrcHei == yDstHei && _hbmImg)
                {
                    hbmSav = (HBITMAP)SelectObject(hdcDib, _hbmImg);

                    MaskBlt(hdc, xDst, yDst, xDstWid, yDstHei,
                         XHDC(hdcDib, NULL), xSrc, ySrc, _hbmMask, xSrc, ySrc, 0xAACC0020);

                    goto Cleanup;
                }

                hbmSav = (HBITMAP)SelectObject(hdcDib, _hbmMask);
                
                if (!_pvImgBits)
                {
                    // a mask-only one-bit image: just draw the "1" bits as black
                    ::StretchBlt(hdc, xDst, yDst, xDstWid, yDstHei,
                            XHDC(hdcDib, NULL), xSrc, ySrc, xSrcWid, ySrcHei, MERGEPAINT);
                }
                else
                {
                    // transparent mask: draw the "1" bits as white
                    ::StretchBlt(hdc, xDst, yDst, xDstWid, yDstHei,
                            XHDC(hdcDib, NULL), xSrc, ySrc, xSrcWid, ySrcHei, SRCPAINT);
                }
            }
            else
            {
                // We have just bits, not an HBITMAP
                
                struct
                {
                    BITMAPINFOHEADER bmih;
                    union
                    {
                        RGBQUAD         rgb[2];
                        WORD            windex[2];
                    };
                } bmiMask;

                // construct mask header
                memset(&bmiMask, 0, sizeof(BITMAPINFOHEADER) + sizeof(RGBQUAD) * 2);
                bmiMask.bmih.biSize = sizeof(BITMAPINFOHEADER);
                bmiMask.bmih.biWidth = _xWidth;
                bmiMask.bmih.biHeight = _yHeight;
                bmiMask.bmih.biPlanes = 1;
                bmiMask.bmih.biBitCount = 1;

                if (!_pvImgBits)
                {
                    // a mask-only one-bit image: just draw the "1" bits as black
                    bmiMask.rgb[0] = g_rgbWhite;
                    StretchDIBits(hdc, xDst, yDst, xDstWid, yDstHei,
                                       xSrc, _yHeight - ySrc - ySrcHei, xSrcWid, ySrcHei, _pvMaskBits, (BITMAPINFO *)&bmiMask, DIB_RGB_COLORS, SRCAND);
                }
                else if (_iBitCount <= 8 && _fPalColors && !(dwFlags & DRAWIMAGE_NHPALETTE))
                {
                    // this setup only occurs on an 8-bit palettized display; we can use DIB_PAL_COLORS
                    bmiMask.windex[1] = 255;
                    StretchDIBits(hdc, xDst, yDst, xDstWid, yDstHei,
                                       xSrc, _yHeight - ySrc - ySrcHei, xSrcWid, ySrcHei, _pvMaskBits, (BITMAPINFO *)&bmiMask, DIB_PAL_COLORS, SRCPAINT);
                }
                else
                {
#if DBG == 1
                    if (IsTagEnabled(tagAssertRgbBlt))
                    {
                        AssertSz(_iBitCount > 8 || !_fPalColors, "Using DIB_RGB_COLORS for mask on image dithered to halftone palette");
                    }
#endif

                    bmiMask.rgb[1] = g_rgbWhite;
                    StretchDIBits(hdc, xDst, yDst, xDstWid, yDstHei,
                                       xSrc, _yHeight - ySrc - ySrcHei, xSrcWid, ySrcHei, _pvMaskBits, (BITMAPINFO *)&bmiMask, DIB_RGB_COLORS, SRCPAINT);
                }
            }
        }
        else
        {
            // 1- 4- or 8-bit mask case (with _iTrans)
            long cTable = 1 << _iBitCount;
            
            Assert(_iTrans >= 0);
            Assert(_iTrans < cTable);
            Assert(_iBitCount <= 8);

            if (_hbmImg)
            {
                // We have an HBITMAP, not just bits
                
                RGBQUAD argbOld[256];
                RGBQUAD argbNew[256];
                
                memset(argbNew, 0, sizeof(RGBQUAD) * cTable);
                argbNew[_iTrans] = g_rgbWhite;
                
                Assert(!hdcDib && !hbmSav);

                hdcDib = GetMemoryDC();
                if (!hdcDib)
                    goto Cleanup;

                hbmSav = (HBITMAP)SelectObject(hdcDib, _hbmImg);

                // HBM case: we need to change the color table, which can only be done one-at-a time
                g_csImgTransBlt.Enter();

                Verify(GetDIBColorTable(hdcDib, 0, cTable, argbOld) > 0);
                Verify(SetDIBColorTable(hdcDib, 0, cTable, argbNew) == (unsigned)cTable);

                ::StretchBlt(hdc, xDst, yDst, xDstWid, yDstHei,
                        XHDC(hdcDib, NULL), xSrc, ySrc, xSrcWid, ySrcHei, MERGEPAINT);
                        
                Verify(SetDIBColorTable(hdcDib, 0, cTable, argbOld) == (unsigned)cTable);

                g_csImgTransBlt.Leave();
            }
            else
            {
                // We have just bits, not an HBITMAP
                
                struct
                {
                    BITMAPINFOHEADER bmih;
                    RGBQUAD          rgb[256];
                } bmiMask;

                // construct mask header
                memset(&bmiMask, 0, sizeof(BITMAPINFOHEADER) + (sizeof(RGBQUAD) * cTable));
                bmiMask.bmih.biSize = sizeof(BITMAPINFOHEADER);
                bmiMask.bmih.biWidth = _xWidth;
                bmiMask.bmih.biHeight = _yHeight;
                bmiMask.bmih.biPlanes = 1;
                bmiMask.bmih.biBitCount = _iBitCount;
                bmiMask.rgb[_iTrans] = g_rgbWhite;

                StretchDIBits(hdc, xDst, yDst, xDstWid, yDstHei,
                                   xSrc, _yHeight - ySrc - ySrcHei, xSrcWid, ySrcHei, _pvImgBits, (BITMAPINFO *)&bmiMask, DIB_RGB_COLORS, MERGEPAINT);
            }
        }
        
        // prepare for transparent blt: area to be painted is now whitened, so AND-blt on top of it
        dwRop = SRCAND;
    }

NoTransparency:

    // Step 3: Draw the image bits
    
    if (_pvImgBits)
    {
        if (dwFlags & DRAWIMAGE_MASKONLY)
            goto Cleanup;

        if (_hbmImg)
        {
            // We have an HBITMAP, not just bits
            
            if (!hdcDib)
            {
                hdcDib = GetMemoryDC();
                if (!hdcDib)
                    goto Cleanup;
            }

            HBITMAP hbmOld;
            
            hbmOld = (HBITMAP)SelectObject(hdcDib, _hbmImg);
            if (!hbmSav)
                hbmSav = hbmOld;

            if (g_dwPlatformID != VER_PLATFORM_WIN32_WINDOWS
                 || GetDeviceCaps(hdc, TECHNOLOGY) != DT_RASPRINTER)
            {
                // The normal case (not to a Win95 printer): call StretchBlt
                
                ::StretchBlt(hdc, xDst, yDst, xDstWid, yDstHei,
                        XHDC(hdcDib, NULL), xSrc, ySrc, xSrcWid, ySrcHei, dwRop);
            }
            else
            {
                // On a Win95 printer, we need to use StretchDIBits, so extract the bits
                
                DIBSECTION dsPrint;

                if (GetObject(_hbmImg, sizeof(DIBSECTION), &dsPrint))
                {
                    struct
                    {
                        BITMAPINFOHEADER bmih;
                        RGBQUAD argb[256];
                    } bmi;

                    bmi.bmih = dsPrint.dsBmih;
                    Verify(GetDIBColorTable(hdcDib, 0, 256, bmi.argb));

                    Assert(bmi.bmih.biHeight > 0);

                    StretchDIBits(hdc, xDst, yDst, xDstWid, yDstHei,
                                  xSrc, _yHeight - ySrc - ySrcHei, xSrcWid, ySrcHei,
                                  dsPrint.dsBm.bmBits, (BITMAPINFO *) &bmi, DIB_RGB_COLORS, dwRop);
                }
            }
        }
        else
        {
            // We have just bits, not an HBITMAP
            
            if (!_pbmih)
            {
                // No color table header: cobble up a standard header [perhaps these should just be globally cached?]
                struct
                {
                    BITMAPINFOHEADER bmih;
                    union
                    {
                        WORD             windex[256];
                        RGBQUAD          rgb[256];
                        DWORD            bfmask[3];
                    };
                } bmi;

                DWORD dwDibMode = DIB_RGB_COLORS;

                // construct mask header
                memset(&bmi, 0, sizeof(BITMAPINFOHEADER) + (_iBitCount > 8 ? sizeof(DWORD) * 3 : sizeof(WORD) * (_iBitCount << 1)));
                bmi.bmih.biSize = sizeof(BITMAPINFOHEADER);
                bmi.bmih.biWidth = _xWidth;
                bmi.bmih.biHeight = _yHeight;
                bmi.bmih.biPlanes = 1;
                bmi.bmih.biBitCount = _iBitCount + (_iBitCount == 15);
                
                if (_iBitCount == 4)
                {
                    // Thanks to Steve Palmer: fix VGA color rendering
                    
                    bmi.bmih.biClrUsed = 16;
                    bmi.bmih.biClrImportant = 16;
                    CopyColorsFromPaletteEntries(bmi.rgb, g_peVga, 16);
                }
                else if (_iBitCount <= 8)
                {
                    if (dwFlags & DRAWIMAGE_NHPALETTE)
                    {
                        // If being drawn on an <= 8-bit surface from a filter, we can make no assumptions about
                        // the selected palette, so use RGB_COLORS
#if DBG == 1
                        if (IsTagEnabled(tagAssertRgbBlt))
                        {
                            AssertSz(0, "Using DIB_RGB_COLORS for image dithered to halftone palette");
                        }
#endif
                        LONG c;

                        c = (1 << (_iBitCount - 1));
                        
                        memcpy(bmi.rgb, g_rgbHalftone, c * sizeof(RGBQUAD));
                        memcpy(bmi.rgb + c, g_rgbHalftone + 256 - c, c * sizeof(RGBQUAD));
                    }
                    else
                    {
                        // internal draw, no color table with _iBitCount <= 8 means that the palette selected into hdc
                        // is our standard 8-bit halftone palette and we can use DIB_PAL_COLORS
                        
                        LONG c;
                        LONG d;
                        WORD *pwi;

                        dwDibMode = DIB_PAL_COLORS;
                        
                        for (c = (1 << (_iBitCount - 1)), pwi = bmi.windex + c; c; *(--pwi) = (--c));
                        for (c = (1 << (_iBitCount - 1)), pwi = bmi.windex + c * 2, d = 256; c; --c, *(--pwi) = (--d));
                    }
                }
                else if (_iBitCount == 16)
                {
                    // sixteen-bit case: fill in the bitfields mask for 565
                    
                    bmi.bmih.biCompression = BI_BITFIELDS;
                    bmi.bfmask[0] = MASK565_0;
                    bmi.bfmask[1] = MASK565_1;
                    bmi.bfmask[2] = MASK565_2;
                }

                StretchDIBits(hdc, xDst, yDst, xDstWid, yDstHei,
                              xSrc, _yHeight - ySrc - ySrcHei, xSrcWid, ySrcHei, _pvImgBits, (BITMAPINFO *)&bmi, dwDibMode, dwRop);
            }
            else
            {
                StretchDIBits(hdc, xDst, yDst, xDstWid, yDstHei,
                              xSrc, _yHeight - ySrc - ySrcHei, xSrcWid, ySrcHei, _pvImgBits, (BITMAPINFO *)_pbmih, DIB_RGB_COLORS, dwRop);
            }
        }
    }

Cleanup:
    if (hbmSav)
        SelectObject(hdcDib, hbmSav);
    if (hdcDib)
        ReleaseMemoryDC(hdcDib);
}

void
CImgBitsDIB::Optimize()
{
    RGBQUAD rgbSolid;
    
    if (_iTrans >= 0 && !_pvMaskBits)
    {
        if (!!ComputeTransMask(0, _yHeightValid, _iTrans, _iTrans))
            return;
    }

    if (!_pvMaskBits)
    {
        // If we still don't have a mask, it means there were no transparent bits, so dump _iTrans

        _iTrans = -1;

        TraceTag((tagImgTrans, "CImgBitsDIB %x Optimize _iTrans = %d", this, _iTrans));

        // check 8-bit images to see if they're solid

        if (_iBitCount == 8 && _pvImgBits)
        {
            DWORD dwTest;
            DWORD *pdw;
            int cdw;
            int cLines;

            dwTest = *(BYTE *)_pvImgBits;
            dwTest = dwTest | dwTest << 8;
            dwTest = dwTest | dwTest << 16;

            pdw = (DWORD *)_pvImgBits;
            
            for (cLines = _yHeight; cLines; cLines -= 1)
            {
                cdw = CbLine() / 4;

                for (;;)
                {
                    if (cdw == 1)
                    {
                        // Assumes little endian; shift in other direction for big endian

#ifndef BIG_ENDIAN                        
                        if ((dwTest ^ *pdw) << (8 * (3 - (0x3 & (_xWidth - 1)))))
#else
                        if ((dwTest ^ *pdw) >> (8 * (3 - (0x3 & (_xWidth - 1)))))
#endif
                            goto NotSolid;

                        pdw += 1;
                        break;
                    }
                    else if (*pdw != dwTest)
                        goto NotSolid;
                        
                    cdw -= 1;
                    pdw += 1;
                }
            }

            // It's solid! So extract the color
            dwTest &= 0xFF;
            
            if (_pbmih)
            {
                rgbSolid = ((RGBQUAD *)(_pbmih + 1))[dwTest];
            }
            else if (_fPalColors)
            {
                rgbSolid = g_rgbHalftone[dwTest];
            }
            else if (_hbmImg)
            {
                HDC hdcMem;
                HBITMAP hbmSav;
                
                hdcMem = GetMemoryDC();
                if (!hdcMem)
                    goto NotSolid;

                hbmSav = (HBITMAP) SelectObject(hdcMem, _hbmImg);
                GetDIBColorTable(hdcMem, dwTest, 1, &rgbSolid);
                SelectObject(hdcMem, hbmSav);
                ReleaseMemoryDC(hdcMem);
            }
            else
            {
                goto NotSolid;
            }

            // And set up the data

            _fSolid = TRUE;
            _crSolid = (rgbSolid.rgbRed) | (rgbSolid.rgbGreen << 8) | (rgbSolid.rgbBlue << 16);
            
            FreeMemory();
        }

        // BUG 90575: On Win98, StretchDIBits runs out of gas trying to stretch a
        // 1-pixel image across a large background.  Here we allow a 24-bpp
        // image to take advantage of our solid-color optimization and we use
        // PatBlt instead of StretchDIBits.  We don't have optimizations for bit
        // depths other than 8 and 24, but these are the common ones.  We can add
        // others here later if we need them.
        else if (_iBitCount == 24 && _xWidth == 1 && _yHeight == 1)
        {
            BYTE* pb = (BYTE*) _pvImgBits;
            _crSolid = (pb[0] << 16) | (pb[1] << 8) | pb[2];
            _fSolid = TRUE;
            FreeMemory();
        }
    }
    else
    {
        // If we have a mask, check to see if the entire image is transparent; if so, dump the data
        
        int cdw;
        int cLines;
        DWORD *pdw;
        DWORD dwLast;
        BYTE bLast;

        Assert(!(CbLineMask() & 0x3));

        bLast = (0xFF << (7 - (0x7 & (_xWidth - 1))));

        // Assumes little endian; shift in other direction for big endian
#ifndef BIG_ENDIAN
        dwLast = (unsigned)(0x00FFFFFF | (bLast << 24)) >> (8 * (3 - (0x3 & (((7 + _xWidth) >> 3) - 1))));
#else
        dwLast = (unsigned)(0x00FFFFFF | (bLast << 24)) << (8 * (3 - (0x3 & (((7 + _xWidth) >> 3) - 1))));
#endif
        
        pdw = (DWORD *)_pvMaskBits;

        for (cLines = _yHeight; cLines; cLines -= 1)
        {
            cdw = CbLineMask() / 4;

            for (;;)
            {
                if (cdw == 1)
                {
                    // Assumes little endian; shift in other direction for big endian
                    
                    if (*pdw & dwLast)
                        goto NotAllTransparent;

                    pdw += 1;
                    break;
                }
                else if (*pdw)
                    goto NotAllTransparent;
                    
                cdw -= 1;
                pdw += 1;
            }
        }
        
        FreeMemory();
        return;
    }

NotSolid:
NotAllTransparent:
    ;    
}

HRESULT
CImgBitsDIB::ComputeTransMask(LONG yFirst, LONG cLines, LONG lTrans, LONG lReplace)
{
    DWORD *         pdw;
    DWORD           dwBits;
    BYTE *          pb;
    int             cb;
    int             cbPad;
    int             x, y, b;
    BYTE            bTrans;

    Assert(_iBitCount == 8);

    #if DBG==1
    if (IsTagEnabled(tagNoTransMask))
        return S_OK;
    #endif

    if (lTrans < 0)
    {
        Assert(!_pvMaskBits);
        return S_OK;
    }

    // negate coordinate system for DIBs

    yFirst = _yHeight - cLines - yFirst;
    
    // Step 1: scan for transparent bits: if none, there's nothing to do (yet)

    bTrans = lTrans;

    if (!_pvMaskBits)
    {
        pb    = (BYTE *)GetBits() + CbLine() * yFirst;
        cbPad = CbLine() - _xWidth;

        for (y = cLines; y-- > 0; pb += cbPad)
            for (x = _xWidth; x-- > 0; )
                if (*pb++ == bTrans)
                {
                    HRESULT hr = AllocMask();
                    if (hr)
                        RRETURN(hr);
                    goto trans;
                }

        return S_OK;
    }

trans:

    // Step 2: allocate and fill in the one-bit mask

    pdw   = (DWORD *)((BYTE *)GetBits() + CbLine() * yFirst);

    pb = (BYTE *)GetMaskBits() + CbLineMask() * yFirst;
    cbPad = CbLineMask() - (_xWidth + 7) / 8;

    for (y = cLines; y-- > 0; pb += cbPad)
    {
        for (x = _xWidth; x > 0; x -= 8)
        {
            dwBits = *pdw++; b = 0;
#ifdef UNIX
            b |= ((BYTE)(dwBits >> 24) != bTrans); b <<=1;
            b |= ((BYTE)(dwBits >> 16) != bTrans); b <<=1;
            b |= ((BYTE)(dwBits >> 8) != bTrans); b <<=1;
            b |= ((BYTE)dwBits != bTrans); b <<= 1;
#else
            b |= ((BYTE)dwBits != bTrans); b <<= 1; dwBits >>= 8;
            b |= ((BYTE)dwBits != bTrans); b <<= 1; dwBits >>= 8;
            b |= ((BYTE)dwBits != bTrans); b <<= 1; dwBits >>= 8;
            b |= ((BYTE)dwBits != bTrans); b <<= 1;
#endif
            if (x <= 4)
                b = (b << 3) | 0xF;
            else
            {
                dwBits = *pdw++;
#ifdef UNIX
                b |= ((BYTE)(dwBits >> 24) != bTrans); b <<= 1;
                b |= ((BYTE)(dwBits >> 16) != bTrans); b <<= 1;
                b |= ((BYTE)(dwBits >> 8 ) != bTrans); b <<= 1;
                b |= ((BYTE)dwBits != bTrans);
#else
                b |= ((BYTE)dwBits != bTrans); b <<= 1; dwBits >>= 8;
                b |= ((BYTE)dwBits != bTrans); b <<= 1; dwBits >>= 8;
                b |= ((BYTE)dwBits != bTrans); b <<= 1; dwBits >>= 8;
                b |= ((BYTE)dwBits != bTrans);
#endif
            }

            *pb++ = (BYTE)b;
        }
    }

    // Step 3: replace the transparent color

    if (lTrans != lReplace)
    {
        for (pb = (BYTE *)GetBits() + CbLine() * yFirst, cb = CbLine() * cLines; cb; pb += 1, cb -= 1)
        {
            if (*pb == bTrans)
                *pb = lReplace;
        }
    }

    return S_OK;
}

LONG CImgBitsDIB::CbTotal()
{
    LONG cb = sizeof(CImgBitsDIB);
    
    if (_pvImgBits)
        cb += CbLine() * _yHeight;
    if (_pvMaskBits)
        cb += CbLineMask() * _yHeight;

    if (cb < sizeof(CImgBitsDIB))
        return sizeof(CImgBitsDIB);

    return cb;
}



HRESULT CImgBitsDIB::SaveAsBmp(IStream * pStm, BOOL fFileHeader)
{
    HRESULT hr = S_OK;

    HBITMAP hbmSavDst = NULL;
    HDC hdcDibDst = NULL;
    int adjustedwidth;
    DIBSECTION ds;
    DWORD dw;
    int nColors;
    DWORD dwColors;
    DWORD dwImage;
    int cBitsPerPix;
    CImgBitsDIB *pibd = NULL;
    HBITMAP hbm;

    // 1. Get a DIBSECTION structure even if it means allocating another CImgBitsDIB

    hbm = _hbmImg;

    if (!hbm || 
        (g_dwPlatformID == VER_PLATFORM_WIN32_WINDOWS && (_iBitCount == 15 || _iBitCount == 16)) ||
        !GetObject(_hbmImg, sizeof(DIBSECTION), &ds))
    {
        RECT rc;
        int iBitCount;
        RGBQUAD *prgb;
        int nColors;

        if (g_dwPlatformID == VER_PLATFORM_WIN32_WINDOWS && (_iBitCount == 15 || _iBitCount == 16))
        {
            // On Win95, we always convert 15- and 16- bpp to 24-bpp because wallpaper can't handle 15/16.
            iBitCount = 24;
            prgb = NULL;
            nColors = 0;
        }
        else
        {
            // Otherwise, duplicate what we have.
            iBitCount = _iBitCount;
            if (_pbmih && iBitCount <= 8)
            {
                prgb = (RGBQUAD *)(_pbmih + 1);
                nColors = _pbmih->biClrUsed ? _pbmih->biClrUsed : (1 << iBitCount);
            }
            else if (iBitCount == 8)
            {
                prgb = g_rgbHalftone;
                nColors = 256;
            }
            else
            {
                prgb = NULL;
                nColors = 0;
            }
        }
        
        pibd = new CImgBitsDIB();
        if (!pibd)
            goto OutOfMemory;

        hr = THR(pibd->AllocDIBSection(iBitCount, _xWidth, _yHeight, prgb, nColors, _iTrans));
        if (hr)
            goto Cleanup;

        hbm = pibd->GetHbm();

        Assert(hbm);
        
        hdcDibDst = GetMemoryDC();
        if (!hdcDibDst)
            goto OutOfMemory;
            
        rc.left = 0;
        rc.top = 0;
        rc.right = _xWidth;
        rc.bottom = _yHeight;
        
        hbmSavDst = (HBITMAP) SelectObject(hdcDibDst, hbm);

        StretchBlt(XHDC(hdcDibDst, NULL), &rc, &rc, SRCCOPY, DRAWIMAGE_NHPALETTE | DRAWIMAGE_NOTRANS);

        if (!GetObject(hbm, sizeof(DIBSECTION), &ds))
            goto OutOfMemory;
    }


    // 2. Save it out
    
    cBitsPerPix = ds.dsBmih.biBitCount;

    Assert(cBitsPerPix == 1 || cBitsPerPix == 4 ||
        cBitsPerPix == 8 || cBitsPerPix == 16 || cBitsPerPix == 24 || cBitsPerPix == 32);

    adjustedwidth = ((ds.dsBmih.biWidth * cBitsPerPix + 31) & ~31) / 8;

#ifdef UNIX
    // TODO - this should be done in mainwin
    if ( ds.dsBmih.biClrUsed > 256 ) 
    {
        ds.dsBmih.biClrUsed = 0;
    }
#endif

    nColors = ds.dsBmih.biClrUsed;
    if ((nColors == 0) && (cBitsPerPix <= 8))
        nColors = 1 << cBitsPerPix;
    
    Assert(ds.dsBmih.biCompression != BI_BITFIELDS || nColors == 0);
    
    dwColors = nColors * sizeof(RGBQUAD) + (ds.dsBmih.biCompression == BI_BITFIELDS ? 3 * sizeof(DWORD) : 0);

    dwImage = ds.dsBmih.biHeight * adjustedwidth;

    if (fFileHeader)
    {
        BITMAPFILEHEADER bf;

        bf.bfType = 0x4D42; // "BM"
        bf.bfOffBits = sizeof(BITMAPFILEHEADER) + sizeof(BITMAPINFOHEADER) + dwColors;
        bf.bfSize = bf.bfOffBits + dwImage;
        bf.bfReserved1 = 0;
        bf.bfReserved2 = 0;

        hr = pStm->Write(&bf, sizeof(bf), &dw);
        if (hr)
            goto Cleanup;
    }

    hr = pStm->Write(&(ds.dsBmih), sizeof(BITMAPINFOHEADER), &dw);
    if (hr)
        goto Cleanup;

    if (nColors > 0)
    {
        RGBQUAD argb[256];

        if (!hdcDibDst)
        {
            hdcDibDst = GetMemoryDC();
            if (!hdcDibDst)
                goto OutOfMemory;
                
            hbmSavDst = (HBITMAP) SelectObject(hdcDibDst, hbm);
        }

        GetDIBColorTable(hdcDibDst, 0, min(256, nColors), argb);

        hr = pStm->Write(argb, dwColors, &dw);
        if (hr)
            goto Cleanup;
    }
    else if (ds.dsBmih.biCompression == BI_BITFIELDS)
    {
        hr = pStm->Write(ds.dsBitfields, dwColors, &dw);
        if (hr)
            goto Cleanup;
    }

    hr = pStm->Write(ds.dsBm.bmBits, dwImage, &dw);

Cleanup:
    if (hbmSavDst)
        SelectObject(hdcDibDst, hbmSavDst);
    if (hdcDibDst)
        ReleaseMemoryDC(hdcDibDst);
    if (pibd)
        delete pibd;

    RRETURN(hr);

OutOfMemory:
    hr = E_OUTOFMEMORY;
    goto Cleanup;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\download\imginfo.cxx ===
//+------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1992 - 1995.
//
//  File:       imginfo.cxx
//
//  Contents:   Implementation of CImgInfo class
//
//-------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_FORMKRNL_HXX_
#define X_FORMKRNL_HXX_
#include "formkrnl.hxx"
#endif

#ifndef X_IMG_HXX_
#define X_IMG_HXX_
#include "img.hxx"
#endif

#ifndef X_DWN_HXX_
#define X_DWN_HXX_
#include "dwn.hxx"
#endif

#ifndef X_IMGBITS_HXX_
#define X_IMGBITS_HXX_
#include "imgbits.hxx"
#endif

#ifdef _MAC
class CICCProfile;
#define LPPROFILE CICCProfile*
typedef void*       CMProfileRef;
typedef void*       CMWorldRef;
#include "CColorSync.h"
#endif

// Globals --------------------------------------------------------------------

DeclareTag(tagNoClipForAnim, "Dwn", "Img: Don't clip img anim frames");
ExternTag(tagTimeTransMask);
MtDefine(CImgInfo, Dwn, "CImgInfo")

CImgBits *g_pImgBitsNotLoaded = NULL;
CImgBits *g_pImgBitsMissing = NULL;

// CImgInfo -------------------------------------------------------------------

HRESULT
CImgInfo::Init(DWNLOADINFO * pdli)
{
    HRESULT hr;

    hr = THR(super::Init(pdli));
    if (hr)
        goto Cleanup;

    _fNoOptimize = pdli->pDwnDoc->GetDownf() & DWNF_NOOPTIMIZE;
    SetFlags(IMGBITS_NONE);

Cleanup:
    RRETURN(hr);
}

CImgInfo::~CImgInfo()
{
    Assert(_pImgTask == NULL);
    Assert(_cLoad == 0);

    if (GetDwnInfoLock() == NULL)
    {
        FreeGifAnimData(&_gad, (CImgBitsDIB *)_pImgBits);
#ifndef NO_ART
        if (_pArtPlayer)
            delete _pArtPlayer;
#endif
#ifdef _MAC
        if(_Profile)
            _Profile->Release();
#endif
        if (_pImgBits)
            delete _pImgBits;
    }
}

void CImgInfo::Passivate()
{
    CImgTask * pImgTask;

    super::Passivate();

    pImgTask = (CImgTask *)InterlockedExchangePointer((void **)&_pImgTask, NULL);

    if (pImgTask)
    {
        pImgTask->Terminate();
        pImgTask->Release();
    }
}

HRESULT
CImgInfo::NewDwnCtx(CDwnCtx ** ppDwnCtx)
{
    *ppDwnCtx = new CImgCtx;
    RRETURN(*ppDwnCtx ? S_OK : E_OUTOFMEMORY);
}

HRESULT
CImgInfo::NewDwnLoad(CDwnLoad ** ppDwnLoad)
{
    *ppDwnLoad = new CImgLoad;
    RRETURN(*ppDwnLoad ? S_OK : E_OUTOFMEMORY);
}

#ifndef NO_ART
CArtPlayer *
CImgInfo::GetArtPlayer()
{
    CArtPlayer * pArtPlayer = NULL;

    EnterCriticalSection();

    if (_pArtPlayer)
        pArtPlayer = _pArtPlayer;
    else if (_pImgTask)
    {
        pArtPlayer = _pImgTask->GetArtPlayer();
    }
        
    LeaveCriticalSection();

    return(pArtPlayer);
}
#endif // ndef NO_ART

void
CImgInfo::Signal(WORD wChg, BOOL fInvalAll, int yBot)
{
    if (_pDwnCtxHead)
    {
        EnterCriticalSection();

        for (CDwnCtx * pDwnCtx = _pDwnCtxHead; pDwnCtx;
                pDwnCtx = pDwnCtx->GetDwnCtxNext())
        {
            ((CImgCtx *)pDwnCtx)->Signal(wChg, fInvalAll, yBot);
        }

        LeaveCriticalSection();
    }
}

void
CImgInfo::Reset()
{
    Assert(EnteredCriticalSection());

    _ySrcBot = 0;

    Signal(IMGCHG_VIEW, TRUE, 0);

    if (_gad.pgf)
    {
        FreeGifAnimData(&_gad, (CImgBitsDIB *)_pImgBits);
        memset(&_gad, 0, sizeof(GIFANIMDATA));

        //TODO (lmollico): we should free the pImgAnimState list

        ClrFlags(IMGANIM_ANIMATED);
    }

#ifndef NO_ART
    if (_pArtPlayer)
    {
        delete _pArtPlayer;
        _pArtPlayer = NULL;

        // TODO (lmollico): we should free the pImgAnimState list

        ClrFlags(IMGANIM_ANIMATED);
    }
#endif // ndef NO_ART

#ifdef _MAC
    if(_Profile)
    {
        _Profile->Release();
        _Profile = NULL;
    }
#endif

    if (_pImgBits)
    {
        delete _pImgBits;
        _pImgBits = NULL;
    }
}

void
CImgInfo::Abort(HRESULT hrErr, CDwnLoad ** ppDwnLoad)
{
    Assert(EnteredCriticalSection());

    if (TstFlags(DWNLOAD_LOADING))
    {
        Signal(IMGCHG_VIEW, TRUE, 0);
    }

    if (_pImgTask)
        _pImgTask->Terminate();

    super::Abort(hrErr, ppDwnLoad);
}

void
CImgInfo::DrawFrame(XHDC hdc, IMGANIMSTATE *pImgAnimState, RECT *prcDst,
    RECT *prcSrc, RECT *prcDstFull, DWORD dwFlags)
{
    GIFFRAME * pgf;
    GIFFRAME * pgfDraw;
    GIFFRAME * pgfDrawNext;
    POINT pt;
    HRGN hrgnClipOld = NULL;
    int iOldClipKind = -1;
    RECT rcSrc;
    LONG xDstWid;
    LONG yDstHei;
    
    pt = g_Zero.pt;

    Assert(!prcSrc || prcDstFull);

    if (prcSrc == NULL)
    {
        rcSrc.left   = 0;
        rcSrc.top    = 0;
        rcSrc.right  = _xWid;
        rcSrc.bottom = _yHei;
        prcSrc       = &rcSrc;

        if (!prcDstFull)
            prcDstFull = prcDst;
    }

    Assert(pImgAnimState != NULL);

    EnterCriticalSection();

#ifndef NO_ART
    if (GetArtPlayer())
    {
        DrawImage(hdc, prcDst, prcSrc, SRCCOPY, dwFlags);
    }
    else
#endif // ndef NO_ART
    {
        // 2001/04/02 mcalkins: Added check and goto Cleanup as a fix for IE6
        //            bug #30000

        Check(pImgAnimState->pgfFirst && pImgAnimState->pgfDraw);

        if (   (NULL == pImgAnimState->pgfFirst)
            || (NULL == pImgAnimState->pgfDraw))
        {
            goto Cleanup;
        }

        xDstWid = prcDstFull->right - prcDstFull->left;
        yDstHei = prcDstFull->bottom - prcDstFull->top;
                
        ComputeFrameVisibility(pImgAnimState, _xWid, _yHei, xDstWid, yDstHei);

        pgfDraw = pImgAnimState->pgfDraw;
        pgfDrawNext = pgfDraw->pgfNext;
        
        #if DBG==1
        if (!IsTagEnabled(tagNoClipForAnim))
        #endif
        {
            hrgnClipOld = CreateRectRgnIndirect(prcDst);
            if (hrgnClipOld == NULL)
                goto Cleanup;

            iOldClipKind = GetClipRgn(hdc, hrgnClipOld);
            if (iOldClipKind == -1)
                goto Cleanup;

            GetViewportOrgEx(hdc, &pt);
            pt.x += prcDstFull->left;
            pt.y += prcDstFull->top;
        }

        // Now, draw the frames from this iteration
        for (pgf = pImgAnimState->pgfFirst; pgf != pgfDrawNext; pgf = pgf->pgfNext)
        {
            if (pgf->bRgnKind != NULLREGION)
            {
                #if DBG==1
                if (!IsTagEnabled(tagNoClipForAnim))
                #endif
                {
                    OffsetRgn(pgf->hrgnVis, pt.x, pt.y);
                    //BUGWIN16: We don't have ExtSelectClipRgn - sure to cause some bugs here !!
#ifndef WIN16
                    if (iOldClipKind == 1)
                        ExtSelectClipRgn(hdc, pgf->hrgnVis, RGN_AND);
                    else
#endif
                        SelectClipRgn(hdc, pgf->hrgnVis);
                }

                pgf->pibd->StretchBltOffset(hdc, prcDst, prcSrc, pgf->left, pgf->top, SRCCOPY, dwFlags);

                #if DBG==1
                if (!IsTagEnabled(tagNoClipForAnim))
                #endif
                {
                    if (iOldClipKind == 1)
                        SelectClipRgn(hdc, hrgnClipOld);
                    else
                        SelectClipRgn(hdc, NULL);
                }
            }
            if (pgf->hrgnVis != NULL)
            {
                DeleteRgn(pgf->hrgnVis);
                pgf->hrgnVis = NULL;
                pgf->bRgnKind = NULLREGION;
            }
        } // for each frame in the preceding iteration
    }

Cleanup:
    if (hrgnClipOld)
        DeleteRgn(hrgnClipOld);

    LeaveCriticalSection();
}

//+------------------------------------------------------------------------
//
//  Member:     CImgInfo::NextFrame
//
//  Synopsis:   returns TRUE if there is a Frame to Draw
//
//-------------------------------------------------------------------------

BOOL
CImgInfo::NextFrame(IMGANIMSTATE *pImgAnimState, DWORD dwCurTimeMS, DWORD *pdwFrameTimeMS)
{
    int iLateTimeMS;
    BOOL fResult = TRUE;

    *pdwFrameTimeMS = 0xFFFFFFFF;
    BOOL fCritical = FALSE;

    if (pImgAnimState == NULL)
        return FALSE;

    pImgAnimState->fLoop = FALSE;
    pImgAnimState->fStop = FALSE;

    // if it still isn't our time, update our countdown and return
    if (dwCurTimeMS < pImgAnimState->dwNextTimeMS)
    {
        *pdwFrameTimeMS = pImgAnimState->dwNextTimeMS - dwCurTimeMS;
        return FALSE;
    }

    iLateTimeMS = dwCurTimeMS - pImgAnimState->dwNextTimeMS;

#ifndef NO_ART
    // See if this is an ART SlideShow    
    CArtPlayer * pArtPlayer = GetArtPlayer();

    if ((!TstFlags(DWNLOAD_COMPLETE|DWNLOAD_STOPPED)) || (pArtPlayer))
#else
    if (!TstFlags(DWNLOAD_COMPLETE|DWNLOAD_STOPPED))
#endif
    {
        EnterCriticalSection();
        fCritical = TRUE;
    }

#ifndef NO_ART
    if (pArtPlayer)
    {
        if (_pImgBits)
            fResult = pArtPlayer->GetArtReport((CImgBitsDIB **)&_pImgBits, _yHei, GetColorMode());
        else if (_pImgTask)
            fResult = _pImgTask->DoTaskGetReport(pArtPlayer);
        else
            fResult = FALSE;

        // catch the case where we're even late for the next frame
        if (iLateTimeMS > (int) pArtPlayer->_uiUpdateRate)
            *pdwFrameTimeMS = 1;
        else
            *pdwFrameTimeMS = pArtPlayer->_uiUpdateRate - iLateTimeMS;

        pImgAnimState->dwNextTimeMS = dwCurTimeMS + *pdwFrameTimeMS;

        // If the show has been stopped and rewound, stop the timer
        if(pArtPlayer->_fRewind && !pArtPlayer->_fPlaying)
        {
            pArtPlayer->_fRewind = FALSE;
            pImgAnimState->fStop = TRUE;
        }

        // If the show is done, rewind it and stop the timer
        if(pArtPlayer->_fIsDone &&
          (pArtPlayer->_ulCurrentTime == pArtPlayer->_ulAvailPlayTime))
        {
            pArtPlayer->DoPlayCommand(IDM_IMGARTREWIND);
            pImgAnimState->fStop = TRUE;
        }
    }
    else
#endif
    {
        // okay, its time to move on to the next frame
        if (pImgAnimState->pgfDraw->pgfNext != NULL)
        {
            pImgAnimState->pgfDraw = pImgAnimState->pgfDraw->pgfNext;

            // catch the case where we're even late for the next frame
            if (iLateTimeMS > (int) pImgAnimState->pgfDraw->uiDelayTime)
                *pdwFrameTimeMS = 1;
            else
                *pdwFrameTimeMS = pImgAnimState->pgfDraw->uiDelayTime - iLateTimeMS;

            pImgAnimState->dwNextTimeMS = dwCurTimeMS + *pdwFrameTimeMS;
        }
        else if (!TstFlags(IMGLOAD_COMPLETE))
        {
            fResult = FALSE;
        }
        else if (_gad.fLooped &&
                (_gad.cLoops == 0 || pImgAnimState->dwLoopIter < _gad.cLoops))
        {
            // we're looped...
            pImgAnimState->fLoop = TRUE;
            pImgAnimState->dwLoopIter++;
            pImgAnimState->pgfDraw = pImgAnimState->pgfFirst;

            // catch the case where we're even late for the next frame
            if (iLateTimeMS > (int) pImgAnimState->pgfDraw->uiDelayTime)
                *pdwFrameTimeMS = 1;
            else
                *pdwFrameTimeMS = pImgAnimState->pgfDraw->uiDelayTime - iLateTimeMS;

            pImgAnimState->dwNextTimeMS = dwCurTimeMS + *pdwFrameTimeMS;
        }
        else
        {
            pImgAnimState->fStop = TRUE;
            fResult = FALSE;
        }
    }

    if (fCritical)
    {
        LeaveCriticalSection();
    }

    return(fResult);
}

void CImgInfo::InitImgAnimState(IMGANIMSTATE * pImgAnimState)
{
    Assert(pImgAnimState);

    EnterCriticalSection();

    memset(pImgAnimState, 0, sizeof(IMGANIMSTATE));

#ifndef NO_ART
    // See if this is an ART SlideShow    
    CArtPlayer * pArtPlayer = GetArtPlayer();

    if (pArtPlayer)
    {
        pImgAnimState->dwNextTimeMS = GetTickCount() + pArtPlayer->_uiUpdateRate;
    }
    else
#endif // ndef NO_ART
    {
        pImgAnimState->dwLoopIter = 0;
        pImgAnimState->fLoop = FALSE;

        if (_gad.pgf)
        {
            pImgAnimState->pgfFirst = _gad.pgf; // the first image is there
            pImgAnimState->pgfDraw = _gad.pgf;
        }
        else if (_pImgTask)
        {
            pImgAnimState->pgfFirst = _pImgTask->GetPgf();  // the first image is there
            pImgAnimState->pgfDraw = _pImgTask->GetPgf();
        }

        if (pImgAnimState->pgfDraw)
            pImgAnimState->dwNextTimeMS = GetTickCount() + pImgAnimState->pgfDraw->uiDelayTime;
        else
            pImgAnimState->dwNextTimeMS = (DWORD) -1;
    }

    LeaveCriticalSection();
}

// Callbacks ------------------------------------------------------------------

void
CImgInfo::OnLoadTask(CImgLoad * pImgLoad, CImgTask * pImgTask)
{
    CImgTask * pImgTaskOld = NULL;
    
    EnterCriticalSection();

    if (pImgLoad == _pDwnLoad)
    {
        Assert(!TstFlags(IMGLOAD_COMPLETE));

        if (_pImgTask)
            pImgTaskOld = _pImgTask;

        _pImgTask = pImgTask;
        _pImgTask->AddRef();
    }

    LeaveCriticalSection();

    if (pImgTaskOld)
    {
        Assert(pImgTaskOld->IsTerminated());
        pImgTaskOld->Release();
    }
}

void
CImgInfo::OnLoadDone(HRESULT hrErr)
{
    Assert(EnteredCriticalSection());

    if (!_pImgTask && TstFlags(DWNLOAD_LOADING))
    {
        UpdFlags(DWNLOAD_MASK, TstFlags(DWNF_DOWNLOADONLY) ?
            DWNLOAD_COMPLETE : DWNLOAD_ERROR);
        Signal(IMGCHG_VIEW | IMGCHG_COMPLETE, TRUE, 0);
    }
}

void
CImgInfo::OnTaskSize(CImgTask * pImgTask, LONG xWid, LONG yHei,
    long lTrans, const MIMEINFO * pmi)
{
    EnterCriticalSection();

    if (pImgTask == _pImgTask)
    {
        if (xWid != _xWid || yHei != _yHei || lTrans != _lTrans)
        {
            _xWid   = xWid;
            _yHei   = yHei;
            _lTrans = lTrans;
            _pmi    = pmi;
            TraceTag((tagImgTrans, "CImgInfo %x OnTaskSize (task %x) set _lTrans to %d",
                        this, pImgTask, _lTrans));
            Signal(IMGCHG_SIZE, FALSE, 0);
        }
    }

    LeaveCriticalSection();
}

void
CImgInfo::OnTaskTrans(CImgTask * pImgTask, long lTrans)
{
    EnterCriticalSection();

    if (pImgTask == _pImgTask)
    {
        if (lTrans != _lTrans)
        {
            _lTrans = lTrans;
            TraceTag((tagImgTrans, "CImgInfo %x OnTaskTrans (task %x) set _lTrans to %d",
                        this, pImgTask, _lTrans));
            Signal(IMGCHG_VIEW, FALSE, 0);
        }
    }

    LeaveCriticalSection();
}

void
CImgInfo::OnTaskProg(CImgTask * pImgTask, ULONG ulBits, BOOL fAll, LONG yBot)
{
    EnterCriticalSection();

    if (pImgTask == _pImgTask)
    {
        UpdFlags(IMGBITS_MASK, ulBits);
        Signal(IMGCHG_VIEW, fAll, yBot);
    }

    LeaveCriticalSection();
}

void
CImgInfo::OnTaskAnim(CImgTask * pImgTask)
{
    EnterCriticalSection();

    if (pImgTask == _pImgTask)
    {
        SetFlags(IMGANIM_ANIMATED);
        super::Signal(IMGCHG_ANIMATE);
    }

    LeaveCriticalSection();
}

#ifdef _MAC
BOOL
CImgInfo::OnTaskBits(CImgTask * pImgTask, CImgBits *pImgBits,
    GIFANIMDATA * pgad, CArtPlayer * pArtPlayer, LONG lTrans, LONG ySrcBot, BOOL fNonProgressive, LPPROFILE Profile)
#else
BOOL
CImgInfo::OnTaskBits(CImgTask * pImgTask, CImgBits *pImgBits,
    GIFANIMDATA * pgad, CArtPlayer * pArtPlayer, LONG lTrans, LONG ySrcBot, BOOL fNonProgressive)
#endif
{
    BOOL fResult = FALSE;

    EnterCriticalSection();

    if (pImgTask == _pImgTask)
    {
        if (TstFlags(IMGLOAD_LOADING))
        {
            WORD wSig = IMGCHG_COMPLETE | (TstFlags(IMGANIM_ANIMATED) ? IMGCHG_ANIMATE : 0);

            UpdFlags(IMGLOAD_MASK|IMGBITS_MASK, IMGLOAD_COMPLETE|IMGBITS_TOTAL);
            Signal(wSig | (fNonProgressive ? IMGCHG_VIEW : 0), FALSE, 0);
        }

        if (pgad)
        {
            _gad = *pgad;
        }

#ifndef NO_ART
        if (pArtPlayer)
        {
            _pArtPlayer = pArtPlayer;

            // Keep dynamic art out of cache
            memset(&_ftLastMod, 0, sizeof(_ftLastMod));
        }
#endif // ndef NO_ART

#ifdef _MAC
        if(Profile)
        {
            _Profile    = Profile;
            _Profile->AddRef();
            ((CImgBitsDIB*)_pImgBits)->ApplyProfile(Profile);
        }
#endif   // _MAC

        _ySrcBot    = ySrcBot;
        _lTrans     = lTrans;
        _pImgBits   = pImgBits;
        fResult     = TRUE;

#if DBG == 1
        TraceTag((tagImgTrans, "CImgInfo %x OnTaskBits (task %x bits %x) %ldx%ld set _lTrans to %d",
                    this, pImgTask, pImgBits, _xWid, _yHei, _lTrans));

        if (_gad.pgf)
        {
            GIFFRAME *pgf;
            for (pgf = _gad.pgf;  pgf;  pgf = pgf->pgfNext)
            {
                TraceTag((tagImgTrans, "  ImgBitsDIB %x %ldx%ld+%ld,%ld  trans %d",
                            pgf->pibd,
                            pgf->width, pgf->height, pgf->left, pgf->top,
                            (int)pgf->bTransFlags));
            }
        }
#endif

        if (_ySrcBot == -1 && !pImgBits->IsTransparent() &&
            _xWid == pImgBits->Width() && _yHei == pImgBits->Height())
        {
            TraceTag((tagImgTrans, "CImgInfo %x OnTaskBits (task %x bits %x) set opaque",
                    this, pImgTask, pImgBits));
            UpdFlags(IMGTRANS_MASK, IMGTRANS_OPAQUE);
        }

        if (!_fNoOptimize)
        {
            _pImgBits->Optimize();
        }
    }

    LeaveCriticalSection();

    return(fResult);
}

void
CImgInfo::OnTaskDone(CImgTask * pImgTask)
{
    CDwnLoad * pDwnLoad = NULL;

    EnterCriticalSection();

    if (pImgTask == _pImgTask)
    {
        if (TstFlags(IMGLOAD_LOADING))
        {
            UpdFlags(IMGLOAD_MASK, IMGLOAD_ERROR);
            Signal(IMGCHG_VIEW | IMGCHG_COMPLETE, TRUE, 0);
        }

        _pImgTask = NULL;
        if (_pDwnLoad)
        {
            pDwnLoad  = _pDwnLoad;
            pDwnLoad->AddRef();
        }
    }
    else
    {
        pImgTask = NULL;
    }

    LeaveCriticalSection();

    if (pImgTask)
        pImgTask->Release();

    if (pDwnLoad)
    {
        pDwnLoad->OnDone(S_OK);
        pDwnLoad->Release();
    }
}

HRESULT
CImgInfo::DrawImage(XHDC hdc, RECT * prcDst, RECT * prcSrc, DWORD dwRop, DWORD dwFlags)
{
    RECT rcSrc;
    BOOL fCritical = FALSE;

#if DBG==1
    if (!(dwFlags & DRAWIMAGE_NHPALETTE) && GetDeviceCaps(hdc, RASTERCAPS) & RC_PALETTE)
    {
        HPALETTE hpal = (HPALETTE)GetCurrentObject(hdc, OBJ_PAL);

        if (hpal && hpal != g_hpalHalftone)
        {
            PALETTEENTRY ape1[256], ape2[256];
            UINT cpe1, cpe2;

            cpe1 = GetPaletteEntries(g_hpalHalftone, 0, 256, ape1);
            cpe2 = GetPaletteEntries(hpal, 0, 256, ape2);

            // TODO (michaelw)
            // The following if statement used to be Asserts and should be as soon as 5.0 ships.
            if (cpe1 != cpe2)
                TraceTag((tagError, "Drawing image to device which doesn't have the correct number of palette entries"));
            else if (memcmp(ape1, ape2, cpe1 * sizeof(PALETTEENTRY)))
                TraceTag((tagError, "Drawing image to device with non-halftone palette selected"));
        }
    }
#endif

    if (!TstFlags(DWNLOAD_COMPLETE|DWNLOAD_STOPPED))
    {
        EnterCriticalSection();
        fCritical = TRUE;
    }

    if (prcSrc == NULL)
    {
        rcSrc.left   = 0;
        rcSrc.top    = 0;
        rcSrc.right  = _xWid;
        rcSrc.bottom = _yHei;
        prcSrc       = &rcSrc;
    }

    if (_pImgBits)
    {
        if (_gad.pgf)
        {
            _gad.pgf->pibd->StretchBltOffset(hdc, prcDst, prcSrc, _gad.pgf->left, _gad.pgf->top, dwRop, dwFlags);
        }
        else
        {
            _pImgBits->StretchBlt(hdc, prcDst, prcSrc, dwRop, dwFlags);
        }
    }
    else if (_pImgTask)
    {
        CImgTask * pImgTask = _pImgTask;
        pImgTask->SubAddRef();

        if (fCritical)
        {
            LeaveCriticalSection();
            fCritical = FALSE;
        }

        pImgTask->BltDib(hdc, prcDst, prcSrc, dwRop, dwFlags);
        pImgTask->SubRelease();
    }

    if (fCritical)
    {
        LeaveCriticalSection();
    }

    return(S_OK);
}

HRESULT
CImgInfo::SaveAsBmp(IStream * pStm, BOOL fFileHeader)
{
    HRESULT hr = S_OK;

    EnterCriticalSection();
    
    if (_pImgBits)
        hr = THR(_pImgBits->SaveAsBmp(pStm, fFileHeader));

    LeaveCriticalSection();
    
    RRETURN(hr);
}

// Caching --------------------------------------------------------------------

ULONG
CImgInfo::ComputeCacheSize()
{
    ULONG cb = 0;

    if (_gad.pgf)
    {
        GIFFRAME * pgf = _gad.pgf;

        for (; pgf; pgf = pgf->pgfNext)
        {
            cb += pgf->pibd->CbTotal();
        }
    }
    else if (_pImgBits)
    {
        cb = _pImgBits->CbTotal();
    }

    return(cb);
}

BOOL
CImgInfo::AttachEarly(UINT dt, DWORD dwRefresh, DWORD dwFlags, DWORD dwBindf)
{
    // In order to attach to an existing CImgInfo, the following must match:
    //      _cstrUrl            (Already checked by caller)
    //      _dwRefresh
    //      DWNF_COLORMODE
    //      DWNF_DOWNLOADONLY
    //      DWNF_FORCEDITHER
    //      BINDF_OFFLINEOPERATION
    
    Assert(dt == DWNCTX_IMG);

    return( GetRefresh() == dwRefresh
        &&  GetFlags(DWNF_COLORMODE|DWNF_DOWNLOADONLY|DWNF_FORCEDITHER) ==
                (dwFlags & (DWNF_COLORMODE|DWNF_DOWNLOADONLY|DWNF_FORCEDITHER))
        &&  (GetBindf() & BINDF_OFFLINEOPERATION) == (dwBindf & BINDF_OFFLINEOPERATION));
}

BOOL
CImgInfo::CanAttachLate(CDwnInfo * pDwnInfo)
{
    CImgInfo * pImgInfo = (CImgInfo *)pDwnInfo;

    return(pImgInfo->GetFlags(DWNF_COLORMODE|DWNF_DOWNLOADONLY|DWNF_FORCEDITHER) ==
                     GetFlags(DWNF_COLORMODE|DWNF_DOWNLOADONLY|DWNF_FORCEDITHER));
}

void
CImgInfo::AttachLate(CDwnInfo * pDwnInfo)
{
    CImgInfo * pImgInfo = (CImgInfo *)pDwnInfo;

    Assert(_pDwnInfoLock == NULL);

    _xWid         = pImgInfo->_xWid;
    _yHei         = pImgInfo->_yHei;
    _ySrcBot      = pImgInfo->_ySrcBot;
    _pImgBits     = pImgInfo->_pImgBits;
    _lTrans       = pImgInfo->_lTrans;
    _gad          = pImgInfo->_gad;
#ifndef NO_ART
    _pArtPlayer   = pImgInfo->_pArtPlayer;
#endif
    _pmi          = pImgInfo->_pmi;
    _dwSecFlags   = pImgInfo->_dwSecFlags;
    _dwPrivacyFlags = pImgInfo->_dwPrivacyFlags;
    SetPolicyRef(pImgInfo->GetPolicyRef());

    _pDwnInfoLock   = pDwnInfo;
    _pDwnInfoLock->SubAddRef();

    TraceTag((tagImgTrans, "CImgInfo %x AttachLate (info %x bits %x) set _lTrans to %d",
                this, pDwnInfo, _pImgBits, _lTrans));

    UpdFlags(IMGLOAD_MASK|IMGBITS_MASK|IMGTRANS_MASK|IMGANIM_MASK,
        pDwnInfo->GetFlags(IMGLOAD_MASK|IMGBITS_MASK|IMGTRANS_MASK|IMGANIM_MASK));

    Signal(TstFlags(IMGANIM_ANIMATED) ? IMGCHG_SIZE|IMGCHG_VIEW|IMGCHG_ANIMATE|IMGCHG_COMPLETE : 
        IMGCHG_SIZE|IMGCHG_VIEW|IMGCHG_COMPLETE, TRUE, 0);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\download\imgctx.cxx ===
//+------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1992 - 1997.
//
//  File:       imgctx.cxx
//
//  Contents:   CImgCtx
//
//-------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_IMG_HXX_
#define X_IMG_HXX_
#include "img.hxx"
#endif

// Debugging ------------------------------------------------------------------

DeclareTag(tagNoPreTile, "DocBack", "No Pre-Tile");
MtDefine(CImgCtx, Dwn, "CImgCtx")

// Definitions ----------------------------------------------------------------

#define PRETILE_AREA      (16 * 1024)

// CImgCtx --------------------------------------------------------------------

CImgCtx::CImgCtx()
{
    _yTop = -1;
}

// CImgCtx (IUnknown) ---------------------------------------------------------

STDMETHODIMP
CImgCtx::QueryInterface(REFIID riid, void ** ppv)
{
    if (riid == IID_IImgCtx || riid == IID_IUnknown)
    {
        *ppv = (IUnknown *)this;
        ((LPUNKNOWN)*ppv)->AddRef();
        return(S_OK);
    }
    else
    {
        *ppv = NULL;
        return(E_NOINTERFACE);
    }
}

STDMETHODIMP_(ULONG)
CImgCtx::AddRef()
{
    return(super::AddRef());
}

STDMETHODIMP_(ULONG)
CImgCtx::Release()
{
    return(super::Release());
}

// CImgCtx (IImgCtx) ----------------------------------------------------------

STDMETHODIMP
CImgCtx::Load(LPCWSTR pszUrl, DWORD dwFlags)
{
    CDwnDoc *   pDwnDoc  = NULL;
    CDwnInfo *  pDwnInfo = NULL;
    DWORD       dwBindf  = 0;
    DWNLOADINFO dli      = { 0 };
    HRESULT     hr;

    pDwnDoc = new CDwnDoc;

    if (pDwnDoc == NULL)
    {
        hr = E_OUTOFMEMORY;
        goto Cleanup;
    }

    if ((dwFlags & DWNF_COLORMODE) == 0)
    {
        dwFlags |= GetDefaultColorMode();
    }

    dli.pDwnDoc   = pDwnDoc;
    dli.pInetSess = TlsGetInternetSession();
    dli.pchUrl    = pszUrl;

    pDwnDoc->SetRefresh(IncrementLcl());

    // This is a bit of a hack to allow our performance measurements to
    // be able to disable WinInet write caching when using IImgCtx.  We
    // don't expect anyone to really do this in the real world, but it
    // doesn't do any harm if they do.

    if (dwFlags & 0x80000000)
    {
        dwBindf |= BINDF_NOWRITECACHE;
    }

    if (dwFlags & 0x40000000)
    {
        dwBindf |= BINDF_GETNEWESTVERSION;
    }

    pDwnDoc->SetBindf(dwBindf);
    pDwnDoc->SetDocBindf(dwBindf); // (should be irrelevant)
    pDwnDoc->SetDownf(dwFlags & ~DWNF_STATE | DWNF_NOOPTIMIZE);

    hr = THR(CDwnInfo::Create(DWNCTX_IMG, &dli, &pDwnInfo));
    if (hr)
        goto Cleanup;

    pDwnInfo->AddDwnCtx(this);

    SetLoad(TRUE, &dli, FALSE);

Cleanup:
    if (pDwnInfo)
        pDwnInfo->Release();
    if (pDwnDoc)
        pDwnDoc->Release();

    RRETURN(hr);
}

STDMETHODIMP
CImgCtx::SelectChanges(ULONG ulChgOn, ULONG ulChgOff, BOOL fSignal)
{
    WORD wNewChg = 0;

    EnterCriticalSection();

    _wChgReq &= (WORD)~ulChgOff;

    if (fSignal)
    {
        DWORD dwState = GetImgInfo()->GetFlags(DWNF_STATE);

        if (    (GetImgInfo()->_xWid || GetImgInfo()->_yHei)
            &&  !(_wChgReq & IMGCHG_SIZE)
            &&  (ulChgOn & IMGCHG_SIZE))
        {
            wNewChg |= IMGCHG_SIZE;
        }

        if (    (dwState & (IMGLOAD_COMPLETE | IMGLOAD_ERROR | IMGLOAD_STOPPED))
            &&  !(_wChgReq & IMGCHG_COMPLETE)
            &&  (ulChgOn & IMGCHG_COMPLETE))
        {
            wNewChg |= IMGCHG_COMPLETE;
        }

        if (    (dwState & IMGLOAD_COMPLETE)
            &&  !(_wChgReq & IMGCHG_VIEW)
            &&  (ulChgOn & IMGCHG_VIEW))
        {
            wNewChg |= IMGCHG_VIEW;
        }

        if (    (dwState & IMGANIM_ANIMATED)
            &&  !(_wChgReq & IMGCHG_ANIMATE)
            &&  (ulChgOn & IMGCHG_ANIMATE))
        {
            wNewChg |= IMGCHG_ANIMATE;
        }
    }

    _wChgReq |= (WORD)ulChgOn;
    
    if (wNewChg)
    {
        super::Signal(wNewChg);
    }

    LeaveCriticalSection();

    return(S_OK);
}

STDMETHODIMP
CImgCtx::SetCallback(PFNIMGCTXCALLBACK pfn, void * pvPrivateData)
{
    super::SetCallback(pfn, pvPrivateData);
    return(S_OK);
}

STDMETHODIMP
CImgCtx::Disconnect()
{
    super::Disconnect();
    return(S_OK);
}

STDMETHODIMP
CImgCtx::GetUpdateRects(RECT *prc, RECT *prectImg, LONG *pcrc)
{
    int logicalRow0;
    int logicalRowN;
    RECT updateRect;
    int nDestLogicalRow0, nDestLogicalRowN;
    int nDestHeight = prectImg->bottom - prectImg->top;
    int height = GetImgInfo()->_yHei;
    int nrc = 0;

    if (_yTop == -1)
    {
        prc[nrc++] = *prectImg;
        goto exit;
    }
    else
    {
        logicalRow0 = _yTop;
        logicalRowN = _yBot;
    }

    if ((_yTop == _yBot) || (height == 0)) {
        *pcrc = 0;
        return S_OK;
    }

    nDestLogicalRow0 = (int) (((long) logicalRow0 * nDestHeight) / height);
    nDestLogicalRowN = (int) (((long) logicalRowN * nDestHeight) / height);
    if (nDestLogicalRow0 != 0 && (((long) logicalRow0 * nDestHeight) % height) )
        nDestLogicalRow0--;
    if ((((long) logicalRowN * nDestHeight) % height))
        nDestLogicalRowN++;
    updateRect.left = prectImg->left;
    updateRect.right = prectImg->right;

    if (_yBot > _yTop)
    {
        updateRect.top  = prectImg->top + nDestLogicalRow0;
        updateRect.bottom = prectImg->top + nDestLogicalRowN + 1; 
        if (updateRect.bottom > prectImg->bottom)
            updateRect.bottom = prectImg->bottom;
        prc[nrc++] = updateRect;
    }
    else
    {
        updateRect.top = prectImg->top + nDestLogicalRow0;
        updateRect.bottom = prectImg->bottom;
        prc[nrc++] = updateRect;

        updateRect.top = prectImg->top;
        updateRect.bottom = prectImg->top + nDestLogicalRowN + 1;
        prc[nrc++] = updateRect;
    }

exit:
    _yTop = _yBot;
    *pcrc = nrc;
    return S_OK;
}


STDMETHODIMP
CImgCtx::GetStateInfo(ULONG *pulState, SIZE *psize, BOOL fClear)
{
    *pulState = GetState(fClear, psize);
    return(S_OK);
}

STDMETHODIMP
CImgCtx::GetPalette(HPALETTE *phpal)
{
    if (phpal == NULL)
    {
        return(E_INVALIDARG);
    }

    *phpal = g_hpalHalftone;
    return(S_OK);
}

STDMETHODIMP
CImgCtx::Draw(const XHDC& hdc, RECT * prcDst)
{
    GetImgInfo()->DrawImage(hdc, prcDst, NULL, SRCCOPY, DRAWIMAGE_NHPALETTE);
    return(S_OK);
}

STDMETHODIMP
CImgCtx::Tile(const XHDC& hdc, POINT * pptOrg, RECT * prc, SIZE * psizePrint)
{
    Tile(hdc, pptOrg, prc, psizePrint, COLORREF_NONE, NULL, DRAWIMAGE_NHPALETTE);
    return(S_OK);
}

STDMETHODIMP
CImgCtx::StretchBlt(const XHDC& hdc, int dstX, int dstY, int dstXE, int dstYE, int srcX, int srcY, int srcXE, int srcYE, DWORD dwROP)
{
    RECT rcSrc, rcDest;

    if (dstXE < 0 || dstYE < 0)
        return E_FAIL;
        
    rcSrc.left = srcX;
    rcSrc.top = srcY;
    rcSrc.right = srcX + srcXE;
    rcSrc.bottom = srcY + srcYE;

    rcDest.left = dstX;
    rcDest.top = dstY;
    rcDest.right = dstX + dstXE;
    rcDest.bottom = dstY + dstYE;

    return GetImgInfo()->DrawImage(hdc, &rcDest, &rcSrc, dwROP, DRAWIMAGE_NHPALETTE);
}

HRESULT
CImgCtx::DrawEx(const XHDC& hdc, RECT * prcDst, DWORD dwFlags)
{
    GetImgInfo()->DrawImage(hdc, prcDst, NULL, SRCCOPY, dwFlags);
    return(S_OK);
}


// CImgCtx (Animation) --------------------------------------------------------

//+------------------------------------------------------------------------
//
//  Member:     CImgCtx::InitImgAnimState
//
//-------------------------------------------------------------------------
void CImgCtx::InitImgAnimState(IMGANIMSTATE * pImgAnimState)
{
    GetImgInfo()->InitImgAnimState(pImgAnimState);
}

BOOL CImgCtx::NextFrame(IMGANIMSTATE *pImgAnimState, DWORD dwCurTimeMS, DWORD *pdwFrameTimeMS)
{
    return GetImgInfo()->NextFrame(pImgAnimState, dwCurTimeMS, pdwFrameTimeMS);
}

//+------------------------------------------------------------------------
//
//  Member:     CImgCtx::DrawFrame
//
//  Synopsis:   
//
//-------------------------------------------------------------------------

void CImgCtx::DrawFrame(const XHDC& hdc, IMGANIMSTATE * pImgAnimState, RECT * prcDst,
    RECT * prcSrc, RECT *prcDstFull, DWORD dwFlags)
{
    GetImgInfo()->DrawFrame(hdc, pImgAnimState, prcDst, prcSrc, prcDstFull, dwFlags);
}

// CImgCtx (Public) -----------------------------------------------------------

void
CImgCtx::TileEx(const XHDC& hdc, POINT * pptOrg, RECT * prc, SIZE * psizePrint,
    COLORREF crBack, IMGANIMSTATE * pImgAnimState, DWORD dwFlags, BOOL fForVertical, 
    const CSize & sizeLayout, const CSize & sizeImg, XHDC * phdcInfo)
{
    if (fForVertical)
    {
        Assert(hdc.pSurface());

        // Transform origin point and cliping rectangele from logical
        // coordinate system to physical coordinate system
        CPoint ptOrg(sizeLayout.cy - pptOrg->y - sizeImg.cx, 
                     pptOrg->x);
        CRect rc;
        rc.left   = sizeLayout.cy - prc->bottom;
        rc.right  = rc.left + ((CRect *)prc)->Height();
        rc.top    = prc->left;
        rc.bottom = rc.top + ((CRect *)prc)->Width();

        // We don't rotate background images, so undo HDC transformations
        // related to vertical layoutness.
        CSize size(0, sizeLayout.cy);
        CDispClipTransform transformRestore;
        transformRestore.SetHugeClip();
        transformRestore.GetWorldTransform()->AddRotation(900);
        transformRestore.GetWorldTransform()->AddPostTranslation(size);

        CDispClipTransform transform(*((CDispSurface *)hdc.pSurface())->GetTransform());
        transform.AddPreTransform(transformRestore);

        CDispSurface * pSurface;
        pSurface = new CDispSurface(hdc.pSurface()->GetRawDC());
        if(pSurface)
        {
            pSurface->PrepareClientSurface(&transform);

            XHDC hdcImg(pSurface);

            Tile(hdcImg, &ptOrg, &rc, psizePrint, crBack, pImgAnimState, dwFlags, phdcInfo);
            delete pSurface;
        }
    }
    else
    {
        Tile(hdc, pptOrg, prc, psizePrint, crBack, pImgAnimState, dwFlags, phdcInfo);
    }
}

void
CImgCtx::Tile(const XHDC& hdc, POINT * pptOrg, RECT * prc, SIZE * psizePrint,
    COLORREF crBack, IMGANIMSTATE * pImgAnimState, DWORD dwFlags,  XHDC * phdcInfo)
{
    BOOL fOpaque = !!(GetState() & IMGTRANS_OPAQUE);

    // If the source image is 1x1 just let the normal StretchBlt mechanism
    // fill up the destination.

    if (GetImgInfo()->_xWid == 1 && GetImgInfo()->_yHei == 1)
    {
        if (crBack != COLORREF_NONE)
        {
            PatBltBrush(hdc, prc, PATCOPY, crBack);
        }

        if (pImgAnimState)
        {
            GetImgInfo()->DrawFrame(hdc, pImgAnimState, prc, NULL, NULL, dwFlags);
        }
        else
        {
            GetImgInfo()->DrawImage(hdc, prc, NULL, SRCCOPY, dwFlags);
        }

        goto Cleanup;
    }

    // If the image is opaque and we are writing into an offscreen bitmap
    // which is not clipped, just tile directly into it.

    if (    psizePrint == NULL
        &&  (fOpaque || crBack != COLORREF_NONE)
        &&  GetObjectType(hdc) == OBJ_MEMDC
        &&  hdc.IsOffsetOnly())
    {
        GDIRECT rcBox;
        int iRgn = GetClipBox(hdc, &rcBox);

        if (    iRgn == NULLREGION
            ||  (   iRgn == SIMPLEREGION
                &&  prc->left >= rcBox.left
                &&  prc->top >= rcBox.top
                &&  prc->right <= rcBox.right
                &&  prc->bottom <= rcBox.bottom))
        {
            TileFast(hdc, prc, pptOrg->x, pptOrg->y, fOpaque, crBack, pImgAnimState, dwFlags);
            goto Cleanup;
        }
    }

    // Otherwise just tile the slow way (it may still decide to pretile)

    TileSlow(hdc, prc, pptOrg->x, pptOrg->y, psizePrint, fOpaque, crBack, pImgAnimState, dwFlags, phdcInfo);

Cleanup:
    ;
}

void
CImgCtx::TileFast(const XHDC& hdc, RECT * prc, LONG xDstOrg, LONG yDstOrg,
    BOOL fOpaque, COLORREF crBack, IMGANIMSTATE * pImgAnimState, DWORD dwFlags)
{
    LONG xDst    = prc->left;
    LONG yDst    = prc->top;
    LONG xDstWid = prc->right - xDst;
    LONG yDstHei = prc->bottom - yDst;
    LONG xSrcWid = GetImgInfo()->_xWid;
    LONG ySrcHei = GetImgInfo()->_yHei;
    LONG xWid, yHei, xSrcOrg, ySrcOrg;
    LONG xBltSrc, xBltSrcWid, xBltDst, xBltDstWid, xBltWid;
    LONG yBltSrc, yBltSrcHei, yBltDst, yBltDstHei, yBltHei;
    RECT rcSrc, rcDst, rcDstFull;
    HRESULT hr = S_OK;

    if (xSrcWid == 0 || ySrcHei == 0 || xDstWid == 0 || yDstHei == 0)
        return;

    if (!fOpaque && crBack != COLORREF_NONE)
    {
        PatBltBrush(hdc, prc, PATCOPY, crBack);
    }

    // Currently (xDstOrg,yDstOrg) define a point on the infinite plane of 
    // the hdc where the upper-left corner of the image should be aligned.
    // Here we convert this point into offsets from the upper-left corner
    // of the image where the first pixel will be drawn as defined by prc.
    // That is, what is the coordinate of the pixel in the image which
    // will be drawn at the location (xDst,yDst).

    xSrcOrg = abs(xDst - xDstOrg) % xSrcWid;
    if (xDst < xDstOrg && xSrcOrg > 0)
        xSrcOrg = xSrcWid - xSrcOrg;

    ySrcOrg = abs(yDst - yDstOrg) % ySrcHei;
    if (yDst < yDstOrg && ySrcOrg > 0)
        ySrcOrg = ySrcHei - ySrcOrg;

    // Now that we know how the tiling is going to start, we need to draw
    // the image onto the hdc up to four times in order to get a prototypical
    // image of size (xSrcWid,ySrcHei) which is rotated in both x and y
    // dimensions to the desired tiling alignment.  If either xOrg or yOrg is
    // zero, no rotation is necessary in that dimension.

    // The first block to draw starts at (xSrcOrg,ySrcOrg) inside the image.
    // Draw it at (xDst,yDst).

    xWid = min(xSrcWid - xSrcOrg, xDstWid);
    yHei = min(ySrcHei - ySrcOrg, yDstHei);

    if (xWid > 0 && yHei > 0)
    {
        rcSrc.left       = xSrcOrg;
        rcSrc.top        = ySrcOrg;
        rcDst.left       = xDst;
        rcDst.top        = yDst;
        rcDstFull.left   = xDst - xSrcOrg;
        rcDstFull.top    = yDst - ySrcOrg;
        rcSrc.right      = rcSrc.left + xWid;
        rcSrc.bottom     = rcSrc.top  + yHei;
        rcDst.right      = rcDst.left + xWid;
        rcDst.bottom     = rcDst.top  + yHei;
        rcDstFull.right  = rcDstFull.left + xSrcWid;
        rcDstFull.bottom = rcDstFull.top  + ySrcHei;

        if (pImgAnimState)
        {
            GetImgInfo()->DrawFrame(hdc, pImgAnimState, &rcDst, &rcSrc, &rcDstFull, dwFlags);
        }
        else
        {
            hr = THR(GetImgInfo()->DrawImage(hdc, &rcDst, &rcSrc, SRCCOPY, dwFlags));
            if (hr)
                goto Cleanup;
        }
        
    }

    // The second block has the same width, but is drawn directly below
    // the first and starts at (xSrcOrg,0) in the image.

    xWid = min(xSrcWid - xSrcOrg, xDstWid);
    yHei = min(ySrcOrg, yDstHei - (ySrcHei - ySrcOrg));

    if (xWid > 0 && yHei > 0)
    {
        rcSrc.left   = xSrcOrg;
        rcSrc.top    = 0;
        rcDst.left   = xDst;
        rcDst.top    = yDst + (ySrcHei - ySrcOrg);
        rcDstFull.left   = xDst - xSrcOrg;
        rcDstFull.top    = rcDst.top;
        rcSrc.right  = rcSrc.left + xWid;
        rcSrc.bottom = rcSrc.top + yHei;
        rcDst.right  = rcDst.left + xWid;
        rcDst.bottom = rcDst.top + yHei;
        rcDstFull.right  = rcDstFull.left + xSrcWid;
        rcDstFull.bottom = rcDstFull.top  + ySrcHei;

        if (pImgAnimState)
        {
            GetImgInfo()->DrawFrame(hdc, pImgAnimState, &rcDst, &rcSrc, &rcDstFull, dwFlags);
        }
        else
        {
            hr = THR(GetImgInfo()->DrawImage(hdc, &rcDst, &rcSrc, SRCCOPY, dwFlags));
            if (hr)
                goto Cleanup;
        }
    }
    
    // The third block has the same height as the first, but is draw directly
    // to the right of the first and starts at (0,ySrcOrg) inside the image.

    xWid = min(xSrcOrg, xDstWid - (xSrcWid - xSrcOrg));
    yHei = min(ySrcHei - ySrcOrg, yDstHei);

    if (xWid > 0 && yHei > 0)
    {
        rcSrc.left   = 0;
        rcSrc.top    = ySrcOrg;
        rcDst.left   = xDst + (xSrcWid - xSrcOrg);
        rcDst.top    = yDst;
        rcDstFull.left   = rcDst.left;
        rcDstFull.top    = yDst - ySrcOrg;
        rcSrc.right  = rcSrc.left + xWid;
        rcSrc.bottom = rcSrc.top + yHei;
        rcDst.right  = rcDst.left + xWid;
        rcDst.bottom = rcDst.top + yHei;
        rcDstFull.right  = rcDstFull.left + xSrcWid;
        rcDstFull.bottom = rcDstFull.top  + ySrcHei;

        if (pImgAnimState)
        {
            GetImgInfo()->DrawFrame(hdc, pImgAnimState, &rcDst, &rcSrc, &rcDstFull, dwFlags);
        }
        else
        {
            hr = THR(GetImgInfo()->DrawImage(hdc, &rcDst, &rcSrc, SRCCOPY, dwFlags));
            if (hr)
                goto Cleanup;
        }
    }

    // The fourth block has the same width as the third and the same height
    // as the second and starts at (0,0) inside the image.

    xWid = min(xSrcOrg, xDstWid - (xSrcWid - xSrcOrg));
    yHei = min(ySrcOrg, yDstHei - (ySrcHei - ySrcOrg));

    if (xWid > 0 && yHei > 0)
    {
        rcSrc.left   = 0;
        rcSrc.top    = 0;
        rcDst.left   = xDst + (xSrcWid - xSrcOrg);
        rcDst.top    = yDst + (ySrcHei - ySrcOrg);
        rcDstFull.left   = rcDst.left;
        rcDstFull.top    = rcDst.top;
        rcSrc.right  = rcSrc.left + xWid;
        rcSrc.bottom = rcSrc.top + yHei;
        rcDst.right  = rcDst.left + xWid;
        rcDst.bottom = rcDst.top + yHei;
        rcDstFull.right  = rcDstFull.left + xSrcWid;
        rcDstFull.bottom = rcDstFull.top  + ySrcHei;

        if (pImgAnimState)
        {
            GetImgInfo()->DrawFrame(hdc, pImgAnimState, &rcDst, &rcSrc, &rcDstFull, dwFlags);
        }
        else
        {
            hr = THR(GetImgInfo()->DrawImage(hdc, &rcDst, &rcSrc, SRCCOPY, dwFlags));
            if (hr)
                goto Cleanup;
        }
    }

    // At this point we've draw the entire source image into the destination
    // at the correct tiling alignment.  Now we want to duplicate this
    // copy horizontally to fill the entire xDstWid.

    yHei = min(ySrcHei, yDstHei);

    if (xDstWid > xSrcWid)
    {
        xBltSrc    = xDst;
        xBltSrcWid = xSrcWid;
        xBltDst    = xDst + xSrcWid;
        xBltDstWid = xDstWid - xSrcWid;

        while (xBltDstWid)
        {
            xBltWid     = min(xBltSrcWid, xBltDstWid);

            BitBlt(hdc, xBltDst, yDst, xBltWid, yHei,
                   hdc, xBltSrc, yDst, SRCCOPY);

            xBltDst    += xBltWid;
            xBltDstWid -= xBltWid;
            xBltSrcWid *= 2;
        }
    }

    // The last step is to copy the fully tiled horizontal scanlines
    // vertically to fill the desitination.
    
    if (yDstHei > ySrcHei)
    {
        yBltSrc    = yDst;
        yBltSrcHei = ySrcHei;
        yBltDst    = yDst + ySrcHei;
        yBltDstHei = yDstHei - ySrcHei;

        while (yBltDstHei)
        {
            yBltHei    = min(yBltSrcHei, yBltDstHei);

            BitBlt(hdc, xDst, yBltDst, xDstWid, yBltHei,
                   hdc, xDst, yBltSrc, SRCCOPY);

            yBltDst    += yBltHei;
            yBltDstHei -= yBltHei;
            yBltSrcHei *= 2;
        }
    }

Cleanup: ;
} 

void
CImgCtx::TileSlow(const XHDC& hdc, RECT * prc, LONG xDstOrg, LONG yDstOrg,
    SIZE * psizePrint, BOOL fOpaque, COLORREF crBack,
    IMGANIMSTATE * pImgAnimState, DWORD dwFlags, XHDC * phdcInfo)
{
    LONG    xDst    = prc->left;
    LONG    yDst    = prc->top;
    LONG    xDstWid = prc->right - xDst;
    LONG    yDstHei = prc->bottom - yDst;
    LONG    xFullWid= GetImgInfo()->_xWid;
    LONG    yFullHei= GetImgInfo()->_yHei;
    LONG    xSrcWid = psizePrint ? psizePrint->cx : xFullWid;
    LONG    ySrcHei = psizePrint ? psizePrint->cy : yFullHei;
    LONG    xPreWid, yPreHei, xSrcOrg, ySrcOrg;
    LONG    xBltSrc, xBltDst, xBltDstWid, xBltWid, xBltSrcOrg;
    LONG    yBltSrc, yBltDst, yBltDstHei, yBltHei, yBltSrcOrg;
    RECT    rcSrc, rcDst;
    HDC     hdcMem = NULL;
    HBITMAP hbmMem = NULL;
    HBITMAP hbmSav = NULL;
    HRESULT hr = S_OK;

    if (xSrcWid == 0 || ySrcHei == 0 || xDstWid == 0 || yDstHei == 0)
        return;

    // Currently (xSrcOrg,ySrcOrg) define a point on the infinite plane of 
    // the hdc where the upper-left corner of the image should be aligned.
    // Here we convert this point into offsets from the upper-left corner
    // of the image where the first pixel will be drawn as defined by prc.
    // That is, what is the coordinate of the pixel in the image which
    // will be drawn at the location (xDst,yDst).

    xSrcOrg = abs(xDst - xDstOrg) % xSrcWid;
    if (xDst < xDstOrg && xSrcOrg > 0)
        xSrcOrg = xSrcWid - xSrcOrg;

    ySrcOrg = abs(yDst - yDstOrg) % ySrcHei;
    if (yDst < yDstOrg && ySrcOrg > 0)
        ySrcOrg = ySrcHei - ySrcOrg;

    // If the source image is very small, it makes sense to pre-tile it
    // into an offscreen bitmap.  The area of the destination needs to
    // be at least four times the area of the source.

    #if DBG==1
    xPreWid = 0;
    yPreHei = 0;
    if (IsTagEnabled(tagNoPreTile))
        goto nopretile;
    #endif

    xPreWid = min(xSrcWid, xDstWid);
    yPreHei = min(ySrcHei, yDstHei);

    if (    psizePrint
        ||  xPreWid * yPreHei >= PRETILE_AREA
        ||  xPreWid * yPreHei * 4 > xDstWid * yDstHei
        ||  (!fOpaque && crBack == COLORREF_NONE))
    {
        if (!psizePrint && !fOpaque && crBack != COLORREF_NONE)
        {
            PatBltBrush(hdc, prc, PATCOPY, crBack);
        }
        goto nopretile;
    }

    // Increase the dimensions of the pretile area as far as possible

    xPreWid = max(xPreWid, min(xDstWid, (PRETILE_AREA / (yPreHei * xSrcWid)) * xSrcWid));
    yPreHei = max(yPreHei, min(yDstHei, (PRETILE_AREA / (xPreWid * ySrcHei)) * ySrcHei));

    Assert(xPreWid * yPreHei <= PRETILE_AREA);
    Assert(xPreWid > 0 && xPreWid <= xDstWid);
    Assert(yPreHei > 0 && yPreHei <= yDstHei);

    hdcMem = GetMemoryDC();

    if (hdcMem == NULL)
        goto Cleanup;

    //  We need to use the original non-memory DC for creating the compatible bitmap
    // because on W2K and Whistler multimonitor setups CreateCompatibleBitmap 
    // retuns a "zombie" bitmap, that quietly fails all the BitBlt operations,
    // if the dc is a memory DC and if the hardware acceleration of the primary
    // display card is set to maximum.
    hbmMem = CreateCompatibleBitmap(phdcInfo ? *phdcInfo : hdc, xPreWid, yPreHei);

    if (hbmMem == NULL)
        goto Cleanup;

    hbmSav = (HBITMAP)SelectObject(hdcMem, hbmMem);

    rcDst.left   = 0;
    rcDst.top    = 0;
    rcDst.right  = xPreWid;
    rcDst.bottom = yPreHei;

    TileFast(XHDC(hdcMem, NULL), &rcDst, xSrcWid - xSrcOrg, ySrcHei - ySrcOrg,
        fOpaque, crBack, pImgAnimState, dwFlags);

    xSrcOrg = 0;
    ySrcOrg = 0;
    xSrcWid = xPreWid;
    ySrcHei = yPreHei;

nopretile:

    if (psizePrint)
    {
        // Remember the original image source sizes in xPreWid/yPreHei in
        // order to compute the rcSrc in pixels below.

        xPreWid = GetImgInfo()->_xWid;
        yPreHei = GetImgInfo()->_yHei;

        if (xPreWid == 0 || yPreHei == 0)
            return;
    }

    yBltDst    = yDst;
    yBltDstHei = yDstHei;
    yBltSrcOrg = ySrcOrg;

    while (yBltDstHei)
    {
        yBltSrc     = yBltSrcOrg;
        yBltHei     = min(ySrcHei - yBltSrcOrg, yBltDstHei);
        xBltDst     = xDst;
        xBltDstWid  = xDstWid;
        xBltSrcOrg  = xSrcOrg;

        while (xBltDstWid)
        {
            xBltSrc = xBltSrcOrg;
            xBltWid = min(xSrcWid - xBltSrcOrg, xBltDstWid);

            if (hdcMem)
            {
                BitBlt(hdc, xBltDst, yBltDst, xBltWid, yBltHei,
                    XHDC(hdcMem, NULL), xBltSrc, yBltSrc, SRCCOPY);
            }
            else
            {
                if (psizePrint)
                {
                    rcSrc.left   = MulDivQuick(xBltSrc, xPreWid, xSrcWid);
                    rcSrc.top    = MulDivQuick(yBltSrc, yPreHei, ySrcHei);
                    rcSrc.right  = MulDivQuick(xBltSrc + xBltWid, xPreWid, xSrcWid);
                    rcSrc.bottom = MulDivQuick(yBltSrc + yBltHei, yPreHei, ySrcHei);
                }
                else
                {
                    rcSrc.left   = xBltSrc;
                    rcSrc.top    = yBltSrc;
                    rcSrc.right  = xBltSrc + xBltWid;
                    rcSrc.bottom = yBltSrc + yBltHei;
                }

                rcDst.left   = xBltDst;
                rcDst.top    = yBltDst;
                rcDst.right  = xBltDst + xBltWid;
                rcDst.bottom = yBltDst + yBltHei;

                if (pImgAnimState)
                {
                    RECT rcDstFull;

                    rcDstFull.left   = xBltDst - xBltSrc;
                    rcDstFull.top    = yBltDst - yBltSrc;
                    rcDstFull.right  = xBltDst - xBltSrc;
                    rcDstFull.bottom = yBltDst - yBltSrc;

                    if (psizePrint)
                    {
                        rcDstFull.right  += psizePrint->cx;
                        rcDstFull.bottom += psizePrint->cy;
                    }
                    else 
                    {
                        rcDstFull.right  += xFullWid;
                        rcDstFull.bottom += yFullHei;
                    }

                    GetImgInfo()->DrawFrame(hdc, pImgAnimState, &rcDst, &rcSrc, &rcDstFull, dwFlags);
                }
                else
                {
                    hr = THR(GetImgInfo()->DrawImage(hdc, &rcDst, &rcSrc, SRCCOPY, dwFlags));
                    if (hr)
                        goto Cleanup;
                }
            }

            xBltDst    += xBltWid;
            xBltDstWid -= xBltWid;
            xBltSrcOrg  = 0;
        }

        yBltDst    += yBltHei;
        yBltDstHei -= yBltHei;
        yBltSrcOrg  = 0;
    }

Cleanup:

    if (hbmSav)
        SelectObject(hdcMem, hbmSav);
    if (hbmMem)
        DeleteObject(hbmMem);
    if (hdcMem)
        ReleaseMemoryDC(hdcMem);
}

ULONG
CImgCtx::GetState(BOOL fClear, SIZE *psize)
{
    if (psize == NULL)
    {
        return(super::GetState(fClear));
    }
    else
    {
        EnterCriticalSection();

        CImgInfo * pImgInfo = GetImgInfo();

        psize->cx = pImgInfo->_xWid;
        psize->cy = pImgInfo->_yHei;

        ULONG ulState = super::GetState(fClear);

        LeaveCriticalSection();

        return(ulState);
    }
}

void
CImgCtx::Signal(WORD wChg, BOOL fInvalAll, int yBot)
{
    _yTop = Union(_yTop, _yBot, fInvalAll, yBot);
    _yBot = yBot;
    super::Signal(wChg);
}

HRESULT
CImgCtx::SaveAsBmp(IStream * pStm, BOOL fFileHeader)
{
    return GetImgInfo()->SaveAsBmp(pStm, fFileHeader);
}

#ifndef NO_ART
CArtPlayer *
CImgCtx::GetArtPlayer()
{
    return GetImgInfo()->GetArtPlayer();
}
#endif // ndef NO_ART

// Internal Functions ---------------------------------------------------------

void CALLBACK
ImgCtxNullCallback(void *, void *)
{
}

// Public Functions -----------------------------------------------------------

HRESULT
CreateIImgCtx(IUnknown * pUnkOuter, IUnknown **ppUnk)
{
    if (pUnkOuter != NULL)
    {
        *ppUnk = NULL;
        return(CLASS_E_NOAGGREGATION);
    }

    CImgCtx * pImgCtx = new CImgCtx;

    if (pImgCtx)
    {
        // The purpose of setting a NULL callback is to AddRef the current
        // THREADSTATE, which is a side-effect of setting a synchronous
        // callback.  This prevents the thread from passivating between the
        // time the user calls CoCreateInstance and sets a different callback
        // function and/or releases this object.

        pImgCtx->SetCallback(ImgCtxNullCallback, 0);
    }

    *ppUnk = pImgCtx;

    RRETURN(pImgCtx ? S_OK : E_OUTOFMEMORY);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\download\imgjpg.cxx ===
#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_IMG_HXX_
#define X_IMG_HXX_
#include "img.hxx"
#endif

#ifndef X_DITHERS_H_
#define X_DITHERS_H_
#include "dithers.h"
#endif

#ifdef _MAC
#define XMD_H
#endif


extern "C" {
#include "jinclude.h"
#define JPEG_INTERNALS
#include "jpeglib.h"
#include "jerror.h"
}

#ifdef _MAC
typedef void*       CMProfileRef;
typedef void*       CMWorldRef;
#include "CColorSync.h"
#endif

#ifdef UNIX
#  undef EXTERN_C
#  define EXTERN_C
#else
#  ifndef EXTERN_C
#    define EXTERN_C EXTERN_C "C"
#  endif
#endif

#define EXCEPTION_JPGLIB    0x1

#ifdef _MAC
#define ICC_MARKER  (JPEG_APP0 + 2) /* JPEG marker code for ICC */
#define ICC_OVERHEAD_LEN  14        /* size of non-profile data in APP2 */

static
void setup_read_icc_profile JPP((j_decompress_ptr cinfo));

static
boolean read_icc_profile JPP((j_decompress_ptr cinfo,
                     JOCTET **icc_data_ptr,
                     unsigned int *_icc_data_len));
#endif

MtDefine(CImgTaskJpg, Dwn, "CImgTaskJpg")

class CImgTaskJpg : public CImgTask
{

public:

    DECLARE_MEMCLEAR_NEW_DELETE(Mt(CImgTaskJpg))

    virtual void Decode(BOOL *pfNonProgressive);
    virtual void BltDib(XHDC hdc, RECT * prcDst, RECT * prcSrc, DWORD dwRop, DWORD dwFlags);

};

/*
 * Error exit handler: must not return to caller.
 *
 * Applications may override this if they want to get control back after
 * an error.  Typically one would longjmp somewhere instead of exiting.
 * The setjmp buffer can be made a private field within an expanded error
 * handler object.  Note that the info needed to generate an error message
 * is stored in the error object, so you can generate the message now or
 * later, at your convenience.
 * You should make sure that the JPEG object is cleaned up (with jpeg_abort
 * or jpeg_destroy) at some point.
 */

EXTERN_C
METHODDEF(void)
error_exit (j_common_ptr cinfo)
{
  /* Let the memory manager delete any temp files before we die */
  jpeg_destroy(cinfo);
}

/*
 * Actual output of an error or trace message.
 * Applications may override this method to send JPEG messages somewhere
 * other than stderr.
 */

EXTERN_C
METHODDEF(void)
output_message (j_common_ptr cinfo)
{
}


/*
 * Decide whether to emit a trace or warning message.
 * msg_level is one of:
 *   -1: recoverable corrupt-data warning, may want to abort.
 *    0: important advisory messages (always display to user).
 *    1: first level of tracing detail.
 *    2,3,...: successively more detailed tracing messages.
 * An application might override this method if it wanted to abort on warnings
 * or change the policy about which messages to display.
 */

EXTERN_C
METHODDEF(void)
emit_message (j_common_ptr cinfo, int msg_level)
{
}


/*
 * Format a message string for the most recent JPEG error or message.
 * The message is stored into buffer, which should be at least JMSG_LENGTH_MAX
 * characters.  Note that no '\n' character is added to the string.
 * Few applications should need to override this method.
 */

EXTERN_C
METHODDEF(void)
format_message (j_common_ptr cinfo, char * buffer)
{
}


/*
 * Reset error state variables at start of a new image.
 * This is called during compression startup to reset trace/error
 * processing to default state, without losing any application-specific
 * method pointers.  An application might possibly want to override
 * this method if it has additional error processing state.
 */

EXTERN_C
METHODDEF(void)
reset_error_mgr (j_common_ptr cinfo)
{
  cinfo->err->num_warnings = 0;
  /* trace_level is not reset since it is an application-supplied parameter */
  cinfo->err->msg_code = 0; /* may be useful as a flag for "no error" */
}


/*
 * Fill in the standard error-handling methods in a jpeg_error_mgr object.
 * Typical call is:
 *  struct jpeg_compress_struct cinfo;
 *  struct jpeg_error_mgr err;
 *
 *  cinfo.err = jpeg_std_error(&err);
 * after which the application may override some of the methods.
 */

EXTERN_C GLOBAL(struct jpeg_error_mgr *)
jpeg_std_error (struct jpeg_error_mgr * err)
{
  err->error_exit = error_exit;
  err->emit_message = emit_message;
  err->output_message = output_message;
  err->format_message = format_message;
  err->reset_error_mgr = reset_error_mgr;

  err->trace_level = 0;     /* default = no tracing */
  err->num_warnings = 0;    /* no warnings emitted yet */
  err->msg_code = 0;        /* may be useful as a flag for "no error" */

  /* Initialize message table pointers */
  err->jpeg_message_table = NULL;
  err->last_jpeg_message = (int) JMSG_LASTMSGCODE - 1;

  err->addon_message_table = NULL;
  err->first_addon_message = 0; /* for safety */
  err->last_addon_message = 0;

  return err;
}

/* Expanded data source object for stdio input */

typedef struct {
  struct jpeg_source_mgr pub;   /* public fields */

  CImgTask * pImgTask;
  FILE * infile;        /* source stream */
  JOCTET * buffer;      /* start of buffer */
  boolean start_of_file;    /* have we gotten any data yet? */
} my_source_mgr;

typedef my_source_mgr * my_src_ptr;

#define INPUT_BUF_SIZE  4096    /* choose an efficiently fread'able size */
#define ImgTask_BUF_SIZE  512   /* choose a size to allow overlap */

/*
 * Initialize source --- called by jpeg_read_header
 * before any data is actually read.
 */

EXTERN_C
METHODDEF(void)
init_source (j_decompress_ptr cinfo)
{
  my_src_ptr src = (my_src_ptr) cinfo->src;

  /* We reset the empty-input-file flag for each image,
   * but we don't clear the input buffer.
   * This is correct behavior for reading a series of images from one source.
   */
  src->start_of_file = TRUE;
}


/*
 * Fill the input buffer --- called whenever buffer is emptied.
 *
 * In typical applications, this should read fresh data into the buffer
 * (ignoring the current state of next_input_byte & bytes_in_buffer),
 * reset the pointer & count to the start of the buffer, and return TRUE
 * indicating that the buffer has been reloaded.  It is not necessary to
 * fill the buffer entirely, only to obtain at least one more byte.
 *
 * There is no such thing as an EOF return.  If the end of the file has been
 * reached, the routine has a choice of ERREXIT() or inserting fake data into
 * the buffer.  In most cases, generating a warning message and inserting a
 * fake EOI marker is the best course of action --- this will allow the
 * decompressor to output however much of the image is there.  However,
 * the resulting error message is misleading if the real problem is an empty
 * input file, so we handle that case specially.
 *
 * In applications that need to be able to suspend compression due to input
 * not being available yet, a FALSE return indicates that no more data can be
 * obtained right now, but more may be forthcoming later.  In this situation,
 * the decompressor will return to its caller (with an indication of the
 * number of scanlines it has read, if any).  The application should resume
 * decompression after it has loaded more data into the input buffer.  Note
 * that there are substantial restrictions on the use of suspension --- see
 * the documentation.
 *
 * When suspending, the decompressor will back up to a convenient restart point
 * (typically the start of the current MCU). next_input_byte & bytes_in_buffer
 * indicate where the restart point will be if the current call returns FALSE.
 * Data beyond this point must be rescanned after resumption, so move it to
 * the front of the buffer rather than discarding it.
 */

EXTERN_C
METHODDEF(boolean)
fill_input_buffer (j_decompress_ptr cinfo)
{
    my_src_ptr src = (my_src_ptr) cinfo->src;
    ULONG nbytes;

    if (!src->pImgTask->Read(src->buffer, ImgTask_BUF_SIZE, &nbytes))
    {
        if (src->start_of_file) /* Treat empty input file as fatal error */
            ERREXIT(cinfo, JERR_INPUT_EMPTY);

        WARNMS(cinfo, JWRN_JPEG_EOF);
        /* Insert a fake EOI marker */
        src->buffer[0] = (JOCTET) 0xFF;
        src->buffer[1] = (JOCTET) JPEG_EOI;
        nbytes = 2;

        src->pub.next_input_byte = src->buffer;
        src->pub.bytes_in_buffer = nbytes;
        src->start_of_file = FALSE;

        return FALSE;
    }

    src->pub.next_input_byte = src->buffer;
    src->pub.bytes_in_buffer = nbytes;
    src->start_of_file = FALSE;

    return TRUE;
}


/*
 * Skip data --- used to skip over a potentially large amount of
 * uninteresting data (such as an APPn marker).
 *
 * Writers of suspendable-input applications must note that skip_input_data
 * is not granted the right to give a suspension return.  If the skip extends
 * beyond the data currently in the buffer, the buffer can be marked empty so
 * that the next read will cause a fill_input_buffer call that can suspend.
 * Arranging for additional bytes to be discarded before reloading the input
 * buffer is the application writer's problem.
 */

EXTERN_C
METHODDEF(void)
skip_input_data (j_decompress_ptr cinfo, long num_bytes)
{
  my_src_ptr src = (my_src_ptr) cinfo->src;

  /* Just a dumb implementation for now.  Could use fseek() except
   * it doesn't work on pipes.  Not clear that being smart is worth
   * any trouble anyway --- large skips are infrequent.
   */
  if (num_bytes > 0) {
    while (num_bytes > (long) src->pub.bytes_in_buffer) {
      num_bytes -= (long) src->pub.bytes_in_buffer;
      (void) fill_input_buffer(cinfo);
    }
    src->pub.next_input_byte += (size_t) num_bytes;
    src->pub.bytes_in_buffer -= (size_t) num_bytes;
  }
}


/*
 * An additional method that can be provided by data source modules is the
 * resync_to_restart method for error recovery in the presence of RST markers.
 * For the moment, this source module just uses the default resync method
 * provided by the JPEG library.  That method assumes that no backtracking
 * is possible.
 */


/*
 * Terminate source --- called by jpeg_finish_decompress
 * after all data has been read.  Often a no-op.
 *
 * NB: *not* called by jpeg_abort or jpeg_destroy; surrounding
 * application must deal with any cleanup that should happen even
 * for error exit.
 */

EXTERN_C
METHODDEF(void)
term_source (j_decompress_ptr cinfo)
{
  /* no work necessary here */
}
EXTERN_C GLOBAL(void)
jpeg_ImgTask_src (j_decompress_ptr cinfo, CImgTask * pImgTask)
{
  my_src_ptr src;

  /* The source object and input buffer are made permanent so that a series
   * of JPEG images can be read from the same file by calling jpeg_stdio_src
   * only before the first one.  (If we discarded the buffer at the end of
   * one image, we'd likely lose the start of the next one.)
   * This makes it unsafe to use this manager and a different source
   * manager serially with the same JPEG object.  Caveat programmer.
   */
  if (cinfo->src == NULL) { /* first time for this JPEG object? */
    cinfo->src = (struct jpeg_source_mgr *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
                  SIZEOF(my_source_mgr));
    src = (my_src_ptr) cinfo->src;
    src->buffer = (JOCTET *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
                  ImgTask_BUF_SIZE * J_SIZEOF(JOCTET));
  }

  src = (my_src_ptr) cinfo->src;
  src->pub.init_source = init_source;
  src->pub.fill_input_buffer = fill_input_buffer;
  src->pub.skip_input_data = skip_input_data;
  src->pub.resync_to_restart = jpeg_resync_to_restart; /* use default method */
  src->pub.term_source = term_source;
  src->infile = NULL;
  src->pImgTask = pImgTask;
  src->pub.bytes_in_buffer = 0; /* forces fill_input_buffer on first read */
  src->pub.next_input_byte = NULL; /* until buffer loaded */
}

/*
 * ERROR HANDLING:
 *
 * The JPEG library's standard error handler (jerror.c) is divided into
 * several "methods" which you can override individually.  This lets you
 * adjust the behavior without duplicating a lot of code, which you might
 * have to update with each future release.
 *
 * Our example here shows how to override the "error_exit" method so that
 * control is returned to the library's caller when a fatal error occurs,
 * rather than calling exit() as the standard error_exit method does.
 *
 * We use C's setjmp/longjmp facility to return control.  This means that the
 * routine which calls the JPEG library must first execute a setjmp() call to
 * establish the return point.  We want the replacement error_exit to do a
 * longjmp().  But we need to make the setjmp buffer accessible to the
 * error_exit routine.  To do this, we make a private extension of the
 * standard JPEG error handler object.  (If we were using C++, we'd say we
 * were making a subclass of the regular error handler.)
 *
 * Here's the extended error handler struct:
 */

struct my_error_mgr {
  struct jpeg_error_mgr pub;    /* "public" fields */
};

typedef struct my_error_mgr * my_error_ptr;

const int x_MapGraysToVGAPalette[3] = {
    0,
    7,
    15
};


/*
 * Here's the routine that will replace the standard error_exit method:
 */

EXTERN_C
METHODDEF(void)
my_error_exit (j_common_ptr cinfo)
{
  /* Always display the message. */
  /* We could postpone this until after returning, if we chose. */
  (*cinfo->err->output_message) (cinfo);

  /* Return control to the setjmp point */
#ifdef WIN16
//  longjmp(myerr->setjmp_buffer, 1);
#else
    RaiseException(EXCEPTION_JPGLIB, EXCEPTION_NONCONTINUABLE, 0, NULL);
#endif
}

/*
 * Sample routine for JPEG decompression.  We assume that the JPEG file image
 * is passed in.  We want to return a pointer on success, NULL on error.
 */
/* This version of the routine uses the IJG dithering code to dither into our 6x6x6 cube */
void
CImgTaskJpg::Decode(BOOL *pfNonProgressive)
{
  /* This struct contains the JPEG decompression parameters and pointers to
   * working space (which is allocated as needed by the JPEG library).
   */
  struct jpeg_decompress_struct cinfo;
  /* We use our private extension JPEG error handler. */
  struct my_error_mgr jerr;
  /* More stuff */
  JSAMPARRAY buffer;        /* Output row buffer */
  int row_stride;       /* physical row width in output buffer */

  unsigned char HUGEP *pCurRow;

    int xsize, ysize;
    int irow;
    int x;
    int y;
    int num_rows_read;
    int notifyRow = 0;
    BYTE HUGEP * pbBits;
    int cbRow;
    BYTE xPixel;

    ERRBUF *pErrBuf1 = NULL, *pErrBuf2 = NULL;

  /* Step 1: allocate and initialize JPEG decompression object */

  /* We set up the normal JPEG error routines, then override error_exit. */
  cinfo.err = jpeg_std_error(&jerr.pub);
  jerr.pub.error_exit = my_error_exit;

  /* Establish the setjmp return context for my_error_exit to use. */
#ifndef WIN16
  __try
#endif // ndef WIN16
  {
      /* Now we can initialize the JPEG decompression object. */
      jpeg_create_decompress(&cinfo);

#ifdef _MAC
      setup_read_icc_profile(&cinfo);
#endif

      /* Step 2: specify data source (eg, a file, or a memory buffer) */


      jpeg_ImgTask_src(&cinfo, this);

      /* Step 3: read file parameters with jpeg_read_header() */

      (void) jpeg_read_header(&cinfo, TRUE);

#ifdef _MAC
      // colorsync
      JOCTET *      icc_data_ptr;
      unsigned int  icc_data_len;
      if (read_icc_profile(&cinfo, &icc_data_ptr, &icc_data_len) == TRUE)
      {
           _Profile = new CICCProfile(icc_data_ptr, icc_data_len);
           _MemFree(icc_data_ptr);
      }
#endif

      /* We can ignore the return value from jpeg_read_header since
       *   (a) suspension is not possible with the stdio data source, and
       *   (b) we passed TRUE to reject a tables-only JPEG file as an error.
       * See libjpeg.doc for more info.
       */

      /* Step 4: set parameters for decompression */

        cinfo.dct_method = JDCT_ISLOW;

        switch (cinfo.jpeg_color_space)
        {
            case JCS_GRAYSCALE:

                if (_colorMode == 4)
                {
                    cinfo.out_color_space = JCS_GRAYSCALE;
                    cinfo.quantize_colors = TRUE;
                    cinfo.desired_number_of_colors = 3;
                    cinfo.two_pass_quantize = FALSE;
                    cinfo.dither_mode = JDITHER_FS;
                }
                else
                {
                    cinfo.out_color_space = JCS_GRAYSCALE;
                    /* We want the actual RGB data here */
                    cinfo.quantize_colors = FALSE;
                }
                break;

            default:
                if (_colorMode == 4)
                {
                    cinfo.out_color_space = JCS_RGB;
                    cinfo.quantize_colors = TRUE;
                    cinfo.desired_number_of_colors = 16;
                    cinfo.two_pass_quantize = FALSE;
                    cinfo.dither_mode = JDITHER_FS;
                    cinfo.colormap = (*cinfo.mem->alloc_sarray)
                        ((j_common_ptr) &cinfo, JPOOL_IMAGE, 16, 3);
                    {
                        int i;

                        for (i=0; i<16; i++)
                        {
                            cinfo.colormap[RGB_RED][i]   = g_peVga[i].peRed;
                            cinfo.colormap[RGB_GREEN][i] = g_peVga[i].peGreen;
                            cinfo.colormap[RGB_BLUE][i]  = g_peVga[i].peBlue;
                        }
                    }
                    cinfo.actual_number_of_colors = 16;
                }
                else
                {
                    cinfo.out_color_space = JCS_RGB;
                    /* We want the actual RGB data here */
                    cinfo.quantize_colors = FALSE;
                }
                break;
        }


      /* Step 5: Start decompressor */

      jpeg_start_decompress(&cinfo);

      /* We may need to do some setup of our own at this point before reading
       * the data.  After jpeg_start_decompress() we have the correct scaled
       * output image dimensions available, as well as the output colormap
       * if we asked for color quantization.
       * In this example, we need to make an output work buffer of the right size.
       */

       _xWid = xsize = cinfo.output_width;
       _yHei = ysize = cinfo.output_height;
       OnSize(_xWid, _yHei, -1);

        {
            CImgBitsDIB *pibd;

            _pImgBits = pibd = new CImgBitsDIB();
            if (!pibd)
            {
                my_error_exit((j_common_ptr) &cinfo);
            }

#ifdef _MAC
            HRESULT hr = THR(pibd->AllocDIB(32, _xWid, _yHei, NULL, 0, -1, TRUE));
#else
            HRESULT hr = THR(pibd->AllocDIB((_colorMode > 24) ? 24 : _colorMode, _xWid, _yHei, NULL, 0, -1, TRUE));
#endif
            if (hr)
            {
                my_error_exit((j_common_ptr) &cinfo);
            }

            pbBits = (BYTE *)pibd->GetBits();
            cbRow = pibd->CbLine();
            pibd->SetValidLines(0);
        }
        
        // Prepare for dithering, if necessary
        
        if (_colorMode < 24 && _colorMode != 4)
        {
            if (FAILED(AllocDitherBuffers(_xWid, &pErrBuf1, &pErrBuf2)))
                my_error_exit((j_common_ptr) &cinfo);
        }
        
        /* JSAMPLEs per row in output buffer */
        row_stride = cinfo.output_width * cinfo.output_components;
        /* Make a sample array that will go away when done with image */
        buffer = (*cinfo.mem->alloc_sarray)
              ((j_common_ptr) &cinfo, JPOOL_IMAGE, row_stride, 8);

      /* Step 6: while (scan lines remain to be read) */
      /*           jpeg_read_scanlines(...); */


      y = 0;
      while (y < ysize) {
        num_rows_read = jpeg_read_scanlines(&cinfo, buffer, 8);

        if (!num_rows_read)
            goto abort;
#ifdef _MAC
        if (cinfo.out_color_space == JCS_RGB)
        {
            for (irow = 0; irow < num_rows_read; irow++)
            {
                pCurRow = pbBits + (long) cbRow * (long) y; /* the DIB is stored upside down */

                for (x=0; x < xsize; x++)
                {
                    /*
                        DIB's are stored blue-green-red (backwards)
                    */
                    *pCurRow++;
                    *pCurRow++ = buffer[irow][x*3+RGB_RED];
                    *pCurRow++ = buffer[irow][x*3+RGB_GREEN];
                    *pCurRow++ = buffer[irow][x*3+RGB_BLUE];
                }
                y++;
            }
        }
        else
        {
            AssertSz((cinfo.out_color_space == JCS_GRAYSCALE), "Illegal color space");
            for (irow = 0; irow < num_rows_read; irow++)
            {
                pCurRow = pbBits + (long) cbRow * (long) y;  /* the DIB is stored upside down */

                for (x=0; x < xsize; x++)
                {
                    xPixel = buffer[irow][x];
                    *pCurRow++;
                    *pCurRow++ = xPixel;
                    *pCurRow++ = xPixel;
                    *pCurRow++ = xPixel;
                }
                y++;
            }
        }
#else  // _MAC
#ifdef UNIX
        if (_colorMode == 1)
        {
            pCurRow = pbBits + (long) cbRow * (long) (ysize - y - 1);   /* the DIB is stored upside down */
            
            if (cinfo.out_color_space == JCS_RGB)
            {
                Dith24rto1(pCurRow, &buffer[0][0], -cbRow, row_stride, pErrBuf1, pErrBuf2, 0, xsize, y, num_rows_read);
            }
            else
            {
                DithGray8to1(pCurRow, &buffer[0][0], -cbRow, row_stride, pErrBuf1, pErrBuf2, 0, xsize, y, num_rows_read );
            }
            
            y += num_rows_read;
        }
        else
#endif
        if (_colorMode == 4)
        {
            if (cinfo.out_color_space == JCS_RGB)
            {
                for (irow = 0; irow < num_rows_read; irow++)
                {
                    pCurRow = pbBits + (long) cbRow * (long) (ysize - y - 1);   /* the DIB is stored upside down */

                    for (x = 0; x < xsize; x += 2)
                    {
                        *pCurRow++ = (buffer[irow][x] << 4) | (buffer[irow][x+1]);
                    }
                    y++;
                }
            }
            else
            {
                AssertSz((cinfo.out_color_space == JCS_GRAYSCALE), "Illegal color space");
                for (irow = 0; irow < num_rows_read; irow++)
                {
                    pCurRow = pbBits + (long) cbRow * (long) (ysize - y - 1); /* the DIB is stored upside down */

                    for (x = 0; x < xsize; x += 2)
                    {
                        *pCurRow++ = (x_MapGraysToVGAPalette[buffer[irow][x]] << 4)
                                    | x_MapGraysToVGAPalette[buffer[irow][x+1]];
                    }
                    y++;
                }
            }
        }
        else if (_colorMode == 8)
        {
            pCurRow = pbBits + (long) cbRow * (long) (ysize - y - 1);   /* the DIB is stored upside down */
            
            if (cinfo.out_color_space == JCS_RGB)
            {
                Dith24rto8(pCurRow, &buffer[0][0], -cbRow, row_stride,  g_rgbHalftone, g_pInvCMAP, 
                                pErrBuf1, pErrBuf2, 0, xsize, y, num_rows_read);
            }
            else
            {
                DithGray8to8(pCurRow, &buffer[0][0], -cbRow, row_stride, g_rgbHalftone, g_pInvCMAP, 
                                pErrBuf1, pErrBuf2, 0, xsize, y, num_rows_read );
            }
            
            y += num_rows_read;
        }
        else if (_colorMode == 15 || _colorMode == 16)
        {
            pCurRow = pbBits + (long) cbRow * (long) (ysize - y - 1);   /* the DIB is stored upside down */
            
            if (cinfo.out_color_space == JCS_RGB)
            {
                if (_colorMode == 15)                
                    Convert24rto15((WORD *)pCurRow, &buffer[0][0], -cbRow, row_stride, 
                                    0, xsize, y, num_rows_read);
                else
                    Convert24rto16((WORD *)pCurRow, &buffer[0][0], -cbRow, row_stride,  
                                    0, xsize, y, num_rows_read);
            }
            else
            {
                if (_colorMode == 15)
                    DithGray8to15((WORD *)pCurRow, &buffer[0][0], -cbRow, row_stride, pErrBuf1, pErrBuf2, 
                                    0, xsize, y, num_rows_read );
                else
                DithGray8to16((WORD *)pCurRow, &buffer[0][0], -cbRow, row_stride, pErrBuf1, pErrBuf2, 
                                0, xsize, y, num_rows_read );
            }
            
            y += num_rows_read;
        }
        else
        {
            if (cinfo.out_color_space == JCS_RGB)
            {
                for (irow = 0; irow < num_rows_read; irow++)
                {
                    pCurRow = pbBits + (long) cbRow * (long) (ysize - y - 1); /* the DIB is stored upside down */

                    for (x=0; x < xsize; x++)
                    {
                        /*
                            DIB's are stored blue-green-red (backwards)
                        */
                        *pCurRow++ = buffer[irow][x*3+RGB_BLUE];
                        *pCurRow++ = buffer[irow][x*3+RGB_GREEN];
                        *pCurRow++ = buffer[irow][x*3+RGB_RED];
                    }
                    y++;
                }
            }
            else
            {
                AssertSz((cinfo.out_color_space == JCS_GRAYSCALE), "Illegal color space");
                for (irow = 0; irow < num_rows_read; irow++)
                {
                    pCurRow = pbBits + (long) cbRow * (long) (ysize - y - 1);  /* the DIB is stored upside down */

                    for (x=0; x < xsize; x++)
                    {
                        xPixel = buffer[irow][x];
                        *pCurRow++ = xPixel;
                        *pCurRow++ = xPixel;
                        *pCurRow++ = xPixel;
                    }
                    y++;
                }
            }
        }

#endif  // _MAC
        _yBot = y - 1;
        
        ((CImgBitsDIB *)_pImgBits)->SetValidLines(y);
        
        if (_yBot - notifyRow >= 4)
        {
            notifyRow = _yBot;
            OnProg(FALSE, IMGBITS_PARTIAL, FALSE, _yBot);
        }
      }

#ifdef _MAC
      ((CImgBitsDIB *)_pImgBits)->ReleaseBits();
#endif

      _ySrcBot = -1;
      OnProg(TRUE, IMGBITS_TOTAL, FALSE, _yBot);

      /* Step 7: Finish decompression */

      (void) jpeg_finish_decompress(&cinfo);
      /* We can ignore the return value since suspension is not possible
       * with the stdio data source.
       */

      /* Step 8: Release JPEG decompression object */

      /* This is an important step since it will release a good deal of memory. */
      jpeg_destroy_decompress(&cinfo);

      /* After finish_decompress, we can close the input file.
       * Here we postpone it until after no more JPEG errors are possible,
       * so as to simplify the setjmp error logic above.  (Actually, I don't
       * think that jpeg_destroy can do an error exit, but why assume anything...)
       */

      /* At this point you may want to check to see whether any corrupt-data
       * warnings occurred (test whether jerr.pub.num_warnings is nonzero).
       */

      ((CImgBitsDIB *)_pImgBits)->SetValidLines(_yHei);
      
      if (pErrBuf1)
        FreeDitherBuffers(pErrBuf1, pErrBuf2);
        
      /* And we're done! */

      return;

    abort:
      jpeg_destroy_decompress(&cinfo);

      if (pErrBuf1)
        FreeDitherBuffers(pErrBuf1, pErrBuf2);
        
      if (_yBot > 31)
        _ySrcBot = _yBot + 1;
      return;
    }
#ifndef WIN16
    __except (GetExceptionCode() == EXCEPTION_JPGLIB ? EXCEPTION_EXECUTE_HANDLER : EXCEPTION_CONTINUE_SEARCH)
    {
        /* If we get here, the JPEG code has signaled an error.
         * We need to clean up the JPEG object, close the input file, and return.
         */

        /*
            TODO call WAIT_Pop ?
        */
        jpeg_destroy_decompress(&cinfo);

        if (pErrBuf1)
            FreeDitherBuffers(pErrBuf1, pErrBuf2);
        
        return;
    }
    __endexcept
#endif
}

/*
 * SOME FINE POINTS:
 *
 * We cheated a bit by calling alloc_sarray() after jpeg_start_decompress();
 * we should have done it beforehand to ensure that the space would be
 * counted against the JPEG max_memory setting.  In some systems the above
 * code would risk an out-of-memory error.  However, in general we don't
 * know the output image dimensions before jpeg_start_decompress(), unless we
 * call jpeg_calc_output_dimensions().  See libjpeg.doc for more about this.
 *
 * Scanlines are returned in the same order as they appear in the JPEG file,
 * which is standardly top-to-bottom.  If you must emit data bottom-to-top,
 * you can use one of the virtual arrays provided by the JPEG memory manager
 * to invert the data.  See wrbmp.c for an example.
 *
 * As with compression, some operating modes may require temporary files.
 * On some systems you may need to set up a signal handler to ensure that
 * temporary files are deleted if the program is interrupted.  See libjpeg.doc.
 */

//  Performs a StretchDIBits for progressive draw (deals with
//  only some of the data being available etc
void CImgTaskJpg::BltDib(XHDC hdc, RECT * prcDst, RECT * prcSrc, DWORD dwRop, DWORD dwFlags)
{
    if (_pImgBits)
    {
        _pImgBits->StretchBlt(hdc, prcDst, prcSrc, dwRop, dwFlags);
    }
}

CImgTask * NewImgTaskJpg()
{
    return(new CImgTaskJpg);
}

// Detecting MMX --------------------------------------------------------------

#if defined(_X86_) && !defined(WIN16)

extern "C" int IsMMX()     // does the processor I'm running have MMX(tm) technology?
{
    extern DWORD g_dwPlatformID;
    volatile int iResult;
    HKEY    hkey = NULL;
    BOOL    fRet = TRUE;
    BOOL    fDefaultOverridden = FALSE;

    if (RegOpenKeyEx(HKEY_LOCAL_MACHINE, TEXT("Software\\Microsoft\\Internet Explorer"), 0, KEY_QUERY_VALUE, &hkey) == ERROR_SUCCESS)
    {
        BYTE        szData[5];
        DWORD       dwSize = sizeof(szData);
        DWORD       dwType;

        if (RegQueryValueEx(hkey, TEXT("UseMMX"), NULL, &dwType, szData, &dwSize) == ERROR_SUCCESS)
        {
            if (*szData)
            {
                fRet = (*szData != '0');
                fDefaultOverridden = TRUE;
            }
        }

        CloseHandle(hkey);
    }

    if (fDefaultOverridden && !fRet)
        return fRet;

    if (g_dwPlatformID == VER_PLATFORM_WIN32_NT)
    {
        typedef BOOL (WINAPI *PFNPFP)(DWORD dw);
        PFNPFP pfnIsPFP = (PFNPFP)GetProcAddress(GetModuleHandleA("kernel32"), "IsProcessorFeaturePresent");

        // On NT, we can just ask the OS if MMX instructions are available

        if (pfnIsPFP && !pfnIsPFP(PF_MMX_INSTRUCTIONS_AVAILABLE))
        {
            return(FALSE);
        }
    }
    else
    {
        // On non-NT platform, do it the old fashioned way

        __asm {     push        ebx
                    pushfd
                    pop         edx
                    mov         eax,edx
                    xor         edx,200000h
                    push        edx
                    popfd
                    pushfd
                    pop         edx
                    xor         edx,eax 
                    je          no_cpuid
                    mov         eax,1
                    _emit       0x0f     //CPUID magic incantation
                    _emit       0xa2
                    and         edx,000800000h
                    shr         edx,23
        no_cpuid:   mov         iResult,edx
                    pop         ebx
        }

        if (!iResult)
        {
            return(FALSE);
        }
    }

    // Just to be sure, try executing an MMX instruction and see if it barfs

    iResult = 1;

    __try
    {
        _asm    punpckldq   mm7,mm2
        _asm    emms
    }
    __except (EXCEPTION_EXECUTE_HANDLER)
    {
        iResult = 0;
    }

    // If the processor is a Pentium 3, disable MMX usage, unless the default action has been
    // overridden by the registry
    // Checkout: http://developer.intel.com/design/pentiumii/applnots/241618.htm
    if (!fDefaultOverridden && iResult)
    {
// Bit masks for the CPUID information
#define CPU_TYPE        0x00003000
#define CPU_FAMILY      0x00000F00
#define CPU_MODEL       0x000000F0
#define CPU_STEPPING    0x0000000F

#define CPU_PENTIUM3    0x00000670      // Family = 6, Model = 7, Stepping doesn't matter
#define CPUID           {   __asm _emit 0x0f    __asm _emit 0xa2  }

        DWORD   dwCPUInfo;

        __asm   mov     eax, 1
        CPUID
        __asm   mov     dwCPUInfo, eax

        if ((dwCPUInfo & CPU_PENTIUM3) == CPU_PENTIUM3)
        {
            iResult = 0;
        }

    }

    return(iResult);
}

#else

extern "C" int IsMMX()     // does the processor I'm running have MMX(tm) technology?
{
    return 0;
}

#endif

#ifdef _MAC
/*
 * Prepare for reading an ICC profile
 */

void
setup_read_icc_profile (j_decompress_ptr cinfo)
{
  /* Tell the library to keep any APP2 data it may find */
  jpeg_save_markers(cinfo, ICC_MARKER, 0xFFFF);
}


/*
 * Handy subroutine to test whether a saved marker is an ICC profile marker.
 */

static boolean
marker_is_icc (jpeg_saved_marker_ptr marker)
{
  return
    marker->marker == ICC_MARKER &&
    marker->data_length >= ICC_OVERHEAD_LEN &&
    /* verify the identifying string */
    GETJOCTET(marker->data[0]) == 0x49 &&
    GETJOCTET(marker->data[1]) == 0x43 &&
    GETJOCTET(marker->data[2]) == 0x43 &&
    GETJOCTET(marker->data[3]) == 0x5F &&
    GETJOCTET(marker->data[4]) == 0x50 &&
    GETJOCTET(marker->data[5]) == 0x52 &&
    GETJOCTET(marker->data[6]) == 0x4F &&
    GETJOCTET(marker->data[7]) == 0x46 &&
    GETJOCTET(marker->data[8]) == 0x49 &&
    GETJOCTET(marker->data[9]) == 0x4C &&
    GETJOCTET(marker->data[10]) == 0x45 &&
    GETJOCTET(marker->data[11]) == 0x0;
}
 /*
 * See if there was an ICC profile in the JPEG file being read;
 * if so, reassemble and return the profile data.
 *
 * TRUE is returned if an ICC profile was found, FALSE if not.
 * If TRUE is returned, *icc_data_ptr is set to point to the
 * returned data, and *icc_data_len is set to its length.
 *
 * IMPORTANT: the data at **icc_data_ptr has been allocated with malloc()
 * and must be freed by the caller with free() when the caller no longer
 * needs it.  (Alternatively, we could write this routine to use the
 * IJG library's memory allocator, so that the data would be freed implicitly
 * at jpeg_finish_decompress() time.  But it seems likely that many apps
 * will prefer to have the data stick around after decompression finishes.)
 *
 * NOTE: if the file contains invalid ICC APP2 markers, we just silently
 * return FALSE.  You might want to issue an error message instead.
 */

boolean
read_icc_profile (j_decompress_ptr cinfo,
          JOCTET **icc_data_ptr,
          unsigned int *icc_data_len)
{
  jpeg_saved_marker_ptr marker;
  int num_markers = 0;
  int seq_no;
  JOCTET *icc_data;
  unsigned int total_length;
#define MAX_SEQ_NO  255        /* sufficient since marker numbers are bytes */
  char marker_present[MAX_SEQ_NO+1];      /* 1 if marker found */
  unsigned int data_length[MAX_SEQ_NO+1]; /* size of profile data in marker */
  unsigned int data_offset[MAX_SEQ_NO+1]; /* offset for data in marker */

  *icc_data_ptr = NULL;   /* avoid confusion if FALSE return */
  *icc_data_len = 0;

  /* This first pass over the saved markers discovers whether there are
   * any ICC markers and verifies the consistency of the marker numbering.
   */

  for (seq_no = 1; seq_no <= MAX_SEQ_NO; seq_no++)
    marker_present[seq_no] = 0;

  for (marker = cinfo->marker_list; marker != NULL; marker = marker->next) {
    if (marker_is_icc(marker)) {
      if (num_markers == 0)
    num_markers = GETJOCTET(marker->data[13]);
      else if (num_markers != GETJOCTET(marker->data[13]))
    return FALSE;       /* inconsistent num_markers fields */
      seq_no = GETJOCTET(marker->data[12]);
      if (seq_no <= 0 || seq_no > num_markers)
    return FALSE;       /* bogus sequence number */
      if (marker_present[seq_no])
    return FALSE;       /* duplicate sequence numbers */
      marker_present[seq_no] = 1;
      data_length[seq_no] = marker->data_length - ICC_OVERHEAD_LEN;
    }
  }

  if (num_markers == 0)
    return FALSE;

  /* Check for missing markers, count total space needed,
   * compute offset of each marker's part of the data.
   */

  total_length = 0;
  for (seq_no = 1; seq_no <= num_markers; seq_no++) {
    if (marker_present[seq_no] == 0)
      return FALSE;     /* missing sequence number */
    data_offset[seq_no] = total_length;
    total_length += data_length[seq_no];
  }

  if (total_length <= 0)
    return FALSE;       /* found only empty markers? */

  /* Allocate space for assembled data */
  icc_data = (JOCTET *) MemAlloc(Mt(CImgTaskGifStack),total_length * sizeof(JOCTET));
  if (icc_data == NULL)
    return FALSE;       /* oops, out of memory */

  /* and fill it in */
  for (marker = cinfo->marker_list; marker != NULL; marker = marker->next) {
    if (marker_is_icc(marker)) {
      JOCTET FAR *src_ptr;
      JOCTET *dst_ptr;
      unsigned int length;
      seq_no = GETJOCTET(marker->data[12]);
      dst_ptr = icc_data + data_offset[seq_no];
      src_ptr = marker->data + ICC_OVERHEAD_LEN;
      length = data_length[seq_no];
      while (length--) {
    *dst_ptr++ = *src_ptr++;
      }
    }
  }

  *icc_data_ptr = icc_data;
  *icc_data_len = total_length;

  return TRUE;
}

#endif // _MAC
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\download\imgpng.cxx ===
#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_IMG_HXX_
#define X_IMG_HXX_
#include "img.hxx"
#endif

#if 0

#ifndef X_PNG_H_
#define X_PNG_H_
#include "png.h"
#endif

// Urk! no verify!
#if DBG==1
#define VERIFY( exp ) if ( !exp ) AssertSz( FALSE, "Verify failed." )
#define DBTRACE( x ) OutputDebugStringA( x "\n" );
#else
#define VERIFY( exp ) ( exp )
#define DBTRACE( x ) 
#endif

typedef unsigned char PNGSIG[8];

#define cyReadRows 8;

static BOOL ProcessImage(png_structp ppng_struct,
						 png_infop ppng_info,
						 BITMAPINFOHEADER* pBMI,
						 IMGLOADNOTIFYFN* pNotifyFn,
						 IMPFLTSTATUS* pStatus)
{
	int iBitsSize, iPass, cPass;
	int iY, iStorageWidth;
	RGBQUAD *argbPNG = NULL;	// GIF color table
	RGBQUAD *argbButch = NULL;	// color table specified by our client, Butch
	ULONG cbCtabSize = 0;
	unsigned char **ppchRows;			// vector of pointers to row starts

	DBTRACE( "PNG ProcessImage" );

  	// we can't handle 16 bits/channel, so get LibPNG to downsample for us
	if ( ppng_info->bit_depth == 16 )
		png_set_strip_16( ppng_struct );

	// prep the library for interlace mode, if needed.
	
	if ( ppng_info->interlace_type != 0 )
		cPass = png_set_interlace_handling( ppng_struct );
	else
		cPass =  1;
	

	if ( ppng_info->valid & PNG_INFO_bKGD )
		png_set_background( ppng_struct, &(ppng_info->background),
							PNG_BACKGROUND_GAMMA_FILE, 1, 1.0 );
	else
	{
	// Fake the background for now
	png_color_16 pngc16;

	// I see a red pel and I want to paint it black...
	pngc16.index = 0;
	pngc16.red = 0;
	pngc16.blue = 0;
	pngc16.green = 0;
	pngc16.gray = 0;

	png_set_background( ppng_struct, &pngc16,
						PNG_BACKGROUND_GAMMA_SCREEN, 0, 1.0 );
	}


	// Make the image header callback with the bmi data we read earlier
	pStatus->iState = ImgFltImpImgHdr;
	if (!pNotifyFn(pStatus)) goto $abort;

	// make a local copy so we can assert it prior to dithering
	// Or, as Bill Fernandez once said, "Note the colors..."
	cbCtabSize = pStatus->dwClrTabSize * sizeof(RGBQUAD);
	argbPNG = (RGBQUAD *)GlobalAlloc( GMEM_FIXED, cbCtabSize );
	if ( argbPNG == NULL )
		goto $abort;
	else
		CopyMemory( argbPNG, pStatus->pClrTab, cbCtabSize ); 


	// compute the image size
	iBitsSize = pBMI->biHeight * DIBStorageWidth(pBMI);

     // Make the bits allocation callback
	pStatus->iState = ImgFltImpAllocBits;
	pStatus->dwBitsSize = iBitsSize;
	pStatus->dwFlags |= ImgFltColorsNegotiable;
	if (!pNotifyFn(pStatus)) goto $abort;
    AssertSz(pStatus->pBits, "ImportPng - client didn't allocate bits!" );

	// It was very nice of Butch to tell us about the colors he wanted, but seeing as
	// we aren't prepared to dither one scanline at a time, let's do something slimey.
	// Let's slam our colors onto the bitmap so that it looks right during the progressive
	// phase, then switch 'em back just prior to dithering after the last pass...

	argbButch = (RGBQUAD *)GlobalAlloc( GMEM_FIXED, cbCtabSize );
	if ( argbButch != NULL )
		GetDIBColorTable( pStatus->hdcTarget, 0, pStatus->dwClrTabSize, argbButch ); 
	else
		goto $abort;

	if ( pStatus->hdcTarget != NULL )
	{
		SetDIBColorTable( pStatus->hdcTarget, 0, pStatus->dwClrTabSize, argbPNG );	
	}
	CopyMemory( pStatus->pClrTab, argbPNG, cbCtabSize );

	// Now, allocate a vector of pointers into the destination bits
	ppchRows = (unsigned char **)GlobalAlloc( GMEM_FIXED, ppng_info->height * sizeof(LPVOID) );
	if ( ppchRows == NULL )
		goto $abort;

	iStorageWidth = DIBStorageWidth(pBMI);

	AssertSz( pBMI->biHeight >= 0, "IportPng - can't handle top-down destination." );
	for ( iY = pBMI->biHeight - 1; iY >= 0; iY-- )
		ppchRows[iY] = pStatus->pBits + (pBMI->biHeight - iY - 1) * iStorageWidth;

	// now read the pixels in cyReadRows at a time for each pass

	for ( iPass = cPass; iPass > 0; iPass-- )
	{
		int cyRead;

		for ( iY = 0; iY < pBMI->biHeight; iY += cyRead )
		{
			cyRead = cyReadRows;
					
			if ( iY + cyRead >= pBMI->biHeight )
				cyRead = pBMI->biHeight - iY;

			png_read_rows( ppng_struct, NULL, &ppchRows[iY], cyRead );

			// make a data callback
			pStatus->iState = ImgFltImpImgData;
			pStatus->dwBandLineFirst = iY;
			pStatus->dwBandSize = cyRead;
			if (!pNotifyFn(pStatus)) goto $abort;
		}
	}

//	png_read_image( ppng_struct, ppchRows );

	if ( pStatus->hdcTarget != NULL )
	{
		// now do an IN-PLACE dither on the image
		ColorMap cmap;
 
		cmap.SetColors( argbButch, pStatus->dwClrTabSize, NULL );

		Ditherer ditherer( &cmap );

		// Set the source, which has the bitmap, but with our color table
		ditherer.SetSource( pStatus->hdcTarget );

		struct  {
			// keep together (as a BITMAPINFO struct)
			BITMAPINFOHEADER bmi;
			RGBQUAD clrs[256];
		} pngbitmap;             // bitmap header

		pngbitmap.bmi = *pBMI;
		CopyMemory( pngbitmap.clrs, argbButch, cbCtabSize );

		// Set the dest to the same bits, but with Butch's color table
		ditherer.SetDestination( (BITMAPINFO *)&pngbitmap, pStatus->pBits );

		ditherer.Dither( 0, pngbitmap.bmi.biHeight );

		// Restore the proper color table.
		// TODO: must wait for last update to be drawn on main UI thread before playing
		// this game
		CopyMemory( pStatus->pClrTab, argbButch, cbCtabSize );
		SetDIBColorTable( pStatus->hdcTarget, 0, pStatus->dwClrTabSize, pStatus->pClrTab );	

		// make a data callback
		pStatus->iState = ImgFltImpImgData;
		pStatus->dwBandLineFirst = 0;
		pStatus->dwBandSize = pngbitmap.bmi.biHeight;
		if (!pNotifyFn(pStatus)) goto $abort;
	}

	// make the image complete callback
	pStatus->iState = ImgFltImpImgComplete;
	if (!pNotifyFn(pStatus)) goto $abort;

	return TRUE;

$abort:

	if ( argbPNG != NULL )
		GlobalFree( argbPNG );

	if ( argbButch != NULL )
		GlobalFree( argbButch );

	if ( ppchRows != NULL )
		GlobalFree( ppchRows );

	return FALSE;
}


// Import a GIF file
BOOL ImportPng
(
    LPSTREAM			pstream,
    BITMAPINFOHEADER*   pBMI,
    IMGLOADNOTIFYFN*    pNotifyFn,
    IMPFLTSTATUS*       pStatus
)
{
	BOOL bResult = FALSE;
	png_structp	ppng_struct = NULL;
	png_infop	ppng_info = NULL;

	// make the inital callback
    AssertSz(pNotifyFn, "ImportPng - no callback" );
    AssertSz(pStatus, "ImportPng - no status struct" );
	pStatus->iState = ImgFltImpBegin;
	if (!pNotifyFn(pStatus)) goto $abort;

    // get the current file position
	// (we might not be at the start)

	LARGE_INTEGER liSeek;
	ULARGE_INTEGER uliPos;
	liSeek.LowPart = 0;
	liSeek.HighPart = 0;
	// don't move, but do get the pos
	VERIFY( SUCCEEDED(pstream->Seek( liSeek, STREAM_SEEK_CUR, &uliPos )) );
	AssertSz( uliPos.HighPart == 0, "Too far out into stream." );

	// check it's a PNG file
	// LibPng does this, and since we can't seek backwards, we must skip this check
	/*
    PNGSIG pngsig;
    ULONG ulBytes;
	VERIFY( SUCCEEDED( pstream->Read( pngsig, sizeof(pngsig), &ulBytes ) ) );
    if (ulBytes != sizeof(pngsig)) {
        // too small for a GIF file
        goto $abort;
    }
	pStatus->dwFileBytesRead +=	ulBytes;

    // check we have the magic id at the start
    if ( !png_check_sig(pngsig, sizeof(pngsig)) ) {
        // not a PNG file
        goto $abort;
    }
	*/

	ppng_struct = (png_struct *)GlobalAlloc( GMEM_FIXED, sizeof(png_struct) );
	if ( ppng_struct == NULL )
		goto $abort;

	ppng_info = (png_info *)GlobalAlloc( GMEM_FIXED, sizeof(png_info) );
	if ( ppng_info == NULL )
		goto $abort;

	if ( setjmp( ppng_struct->jmpbuf ) )
		goto $abort;

	png_info_init( ppng_info );
	png_read_init( ppng_struct );
	png_init_io( ppng_struct, pstream );
	png_read_info( ppng_struct, ppng_info );

	// copy the size info
	pBMI->biWidth = ppng_info->width;
	pBMI->biHeight = ppng_info->height;

	switch ( ppng_info->color_type )
	{
	case 0: // pure grayscale
		pBMI->biBitCount = ppng_info->bit_depth;
		break;

	case 2: // rgb triples
		pBMI->biBitCount = 24; // we'll have to get LibPNG to downsample 48 bpp.
		break;

	case 3: // indexed colors
		pBMI->biBitCount = ppng_info->bit_depth;
		break;

	case 4: // grayscale/alpha pairs
		pBMI->biBitCount = ppng_info->bit_depth;
		break;

	case 6: // rgba quads
		pBMI->biBitCount = 24; // we'll have to get LibPNG to downsample 48 bpp.
		break;

	default:
		break;
	}

	pBMI->biPlanes = 1;
	pBMI->biCompression = BI_RGB;

	// make the file header callback
	pStatus->iState = ImgFltImpFileHdr;
	
	STATSTG statstg;
	VERIFY( SUCCEEDED( pstream->Stat( &statstg, STATFLAG_NONAME ) ) );
	AssertSz( (statstg.cbSize.HighPart == 0), "File too big." );

	pStatus->dwFileSize = statstg.cbSize.LowPart - uliPos.LowPart;
	pStatus->dwImageCount = 1;
	pStatus->dwMaxImageWidth = pBMI->biWidth;
	pStatus->dwMaxImageHeight = pBMI->biHeight;
	pStatus->dwImageBitCount = pBMI->biBitCount;
	if (!pNotifyFn(pStatus)) goto $abort;

	// see if there is a color table associated with the image
	if ( (ppng_info->color_type & 0x01) && ppng_info->valid & PNG_INFO_PLTE )
	{ 
		// get the size of the table
		int iClrTabSize = ppng_info->num_palette;
		png_colorp ppng_color ;
		RGBQUAD	*prgbq;

        AssertSz(iClrTabSize <= 256, "ImportPng - too many colors in palette." );
		pBMI->biClrUsed = iClrTabSize;

		 // Make the color table alloc callback
		pStatus->iState = ImgFltImpAllocClrTab;
		pStatus->dwImageCount = 1;
		pStatus->dwImageWidth = pBMI->biWidth;
		pStatus->dwImageHeight = pBMI->biHeight;
		pStatus->dwImageBytesRead = 0;
		pStatus->dwImageBitCount = pBMI->biBitCount;
		pStatus->dwClrTabSize = pBMI->biClrUsed;
		if (!pNotifyFn(pStatus)) goto $abort;
        AssertSz(pStatus->pClrTab, "ImportPng - client failed color table allocation." );
		
		for ( ppng_color = ppng_info->palette, prgbq = pStatus->pClrTab;
			  iClrTabSize > 0;
			  iClrTabSize--, ppng_color++, prgbq++ )
		{
			prgbq->rgbRed = ppng_color->red;
			prgbq->rgbGreen = ppng_color->green;
			prgbq->rgbBlue = ppng_color->blue;
		}

		// make a color table callback
		pStatus->iState = ImgFltImpClrTab;
		if (!pNotifyFn(pStatus)) goto $abort;
	}

	// process the data blocks

	// if we get here, it's all done
	bResult = ProcessImage( ppng_struct, ppng_info, pBMI, pNotifyFn, pStatus );

$abort:
	// clean up after abort
	if (!bResult) {
		LARGE_INTEGER liSeek;
		liSeek.LowPart = liSeek.HighPart = 0;

		// restore the file position
		pstream->Seek( liSeek, STREAM_SEEK_SET, NULL );
	}
  
	if ( ppng_struct != NULL )
		GlobalFree( ppng_struct );

	if ( ppng_info != NULL )
		GlobalFree( ppng_info );

	// make the file complete callback
	pStatus->iState = ImgFltImpFileComplete;
	pNotifyFn(pStatus);

	return bResult;
}

#endif

CImgFilt * ImgFiltCreatePng(CRITICAL_SECTION * pcs)
{
    return(NULL);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\download\imgplug.cxx ===
#if defined(UNIX) && defined(_HPUX_SOURCE)
#  define _MODULE_IS_NOT_DEFINED
#endif // UNIX
#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_IMG_HXX_
#define X_IMG_HXX_
#include "img.hxx"
#endif

#ifdef UNIX
#ifndef X_DDRAW_H_
#define X_DDRAW_H_
#include "ddraw.h"
#endif
#endif

#ifndef X_IMGUTIL_H_
#define X_IMGUTIL_H_
#include "imgutil.h"
#endif

#ifndef X_DDRAW_H_
#define X_DDRAW_H_
#include "ddraw.h"
#endif

MtDefine(CImgTaskPlug, Dwn, "CImgTaskPlug")
MtDefine(CPlugStream, CImgTaskPlug, "CPlugStream")
MtDefine(CImageDecodeFilter, CImgTaskPlug, "CImageDecodeFilter")
MtDefine(CImageDecodeEventSink, CImgTaskPlug, "CImageDecodeEventSink")

#undef  DEFINE_GUID
#define DEFINE_GUID(name, l, w1, w2, b1, b2, b3, b4, b5, b6, b7, b8) \
	EXTERN_C const GUID name \
		= { l, w1, w2, { b1, b2,  b3,  b4,  b5,  b6,  b7,  b8 } }

//
// Using ATL is a pain in the butt.  It likes to reference malloc.  We don't want to use the CRT malloc
// so don't use ATL.  Copy CComPtr stuff here since this code already uses it.
//

template <class T>
class _NoAddRefReleaseOnCComPtr : public T
{
	private:
		STDMETHOD_(ULONG, AddRef)()=0;
		STDMETHOD_(ULONG, Release)()=0;
};

template <class T>
class CComPtr
{
public:
	typedef T _PtrClass;
	CComPtr()
	{
		p=NULL;
	}
	CComPtr(T* lp)
	{
		if ((p = lp) != NULL)
			p->AddRef();
	}
	CComPtr(const CComPtr<T>& lp)
	{
		if ((p = lp.p) != NULL)
			p->AddRef();
	}
	~CComPtr()
	{
		if (p)
			p->Release();
	}
	void Release()
	{
		IUnknown* pTemp = p;
		if (pTemp)
		{
			p = NULL;
			pTemp->Release();
		}
	}
	operator T*() const
	{
		return (T*)p;
	}
	T& operator*() const
	{
		Assert(p!=NULL);
		return *p;
	}
	//The assert on operator& usually indicates a bug.  If this is really
	//what is needed, however, take the address of the p member explicitly.
	T** operator&()
	{
		Assert(p==NULL);
		return &p;
	}
	_NoAddRefReleaseOnCComPtr<T>* operator->() const
	{
		Assert(p!=NULL);
		return (_NoAddRefReleaseOnCComPtr<T>*)p;
	}
	T* operator=(T* lp)
	{
		return (T*)MyComPtrAssign((IUnknown**)&p, lp);
	}
	T* operator=(const CComPtr<T>& lp)
	{
		return (T*)MyComPtrAssign((IUnknown**)&p, lp.p);
	}
	bool operator!() const
	{
		return (p == NULL);
	}
	bool operator<(T* pT) const
	{
		return p < pT;
	}
	bool operator==(T* pT) const
	{
		return p == pT;
	}
	// Compare two objects for equivalence
	bool IsEqualObject(IUnknown* pOther)
	{
		if (p == NULL && pOther == NULL)
			return true; // They are both NULL objects

		if (p == NULL || pOther == NULL)
			return false; // One is NULL the other is not

		CComPtr<IUnknown> punk1;
		CComPtr<IUnknown> punk2;
		p->QueryInterface(IID_IUnknown, (void**)&punk1);
		pOther->QueryInterface(IID_IUnknown, (void**)&punk2);
		return punk1 == punk2;
	}
	void Attach(T* p2)
	{
		if (p)
			p->Release();
		p = p2;
	}
	T* Detach()
	{
		T* pt = p;
		p = NULL;
		return pt;
	}
	HRESULT CopyTo(T** ppT)
	{
		Assert(ppT != NULL);
		if (ppT == NULL)
			return E_POINTER;
		*ppT = p;
		if (p)
			p->AddRef();
		return S_OK;
	}
	template <class Q>
	HRESULT QueryInterface(Q** pp) const
	{
		Assert(pp != NULL && *pp == NULL);
		return p->QueryInterface(__uuidof(Q), (void**)pp);
	}
	T* p;
};

IUnknown* WINAPI MyComPtrAssign(IUnknown** pp, IUnknown* lp)
{
    if (lp != NULL)
	lp->AddRef();
    if (*pp)
	(*pp)->Release();
    *pp = lp;
    return lp;
}

class CImgTaskPlug : public CImgTask
{
    typedef CImgTask super;
    friend class CImageDecodeEventSink;
    friend class CPlugStream;

public:
    
    DECLARE_MEMCLEAR_NEW_DELETE(Mt(CImgTaskPlug))

    virtual void Decode(BOOL *pfNonProgressive);
    virtual void BltDib(XHDC hdc, RECT * prcDst, RECT * prcSrc, DWORD dwRop, DWORD dwFlags);

protected:
    HRESULT SetColorTable(IDithererImpl* pDitherer);
    HRESULT GetTransIndex();
    
// Data members
public:
    UINT                                _nColors;
    CComPtr< IImageDecodeFilter >       m_pFilter;
    CComPtr< IImageDecodeEventSink >    m_pEventSink;
    CComPtr< IStream >                  m_pStream;
    CComPtr< IDirectDrawSurface >       m_pSurface;
    LONG                                m_nPitch;
    ULONG                               m_nBytesPerPixel;
    BYTE*                               m_pbFirstScanLine;
    BYTE*                               m_pbBits;
    BOOL                                m_bGotTrans;
};

class CPlugStream :
    public IStream
{

public:

    DECLARE_MEMALLOC_NEW_DELETE(Mt(CPlugStream))

    CPlugStream(CImgTaskPlug* pFilter);
    ~CPlugStream();

    ULONG STDMETHODCALLTYPE AddRef();
    ULONG STDMETHODCALLTYPE Release();
    STDMETHOD(QueryInterface)(REFIID iid, void** ppInterface);

// IStream
public:
    STDMETHOD(Clone)(IStream** ppStream);
    STDMETHOD(Commit)(DWORD dwFlags);
    STDMETHOD(CopyTo)(IStream* pStream, ULARGE_INTEGER nBytes, 
	ULARGE_INTEGER* pnBytesRead, ULARGE_INTEGER* pnBytesWritten);
    STDMETHOD(LockRegion)(ULARGE_INTEGER iOffset, ULARGE_INTEGER nBytes,
	DWORD dwLockType);
    STDMETHOD(Read)(void* pBuffer, ULONG nBytes, ULONG* pnBytesRead);
    STDMETHOD(Revert)();
    STDMETHOD(Seek)(LARGE_INTEGER nDisplacement, DWORD dwOrigin, 
	ULARGE_INTEGER* piNewPosition);
    STDMETHOD(SetSize)(ULARGE_INTEGER nNewSize);
    STDMETHOD(Stat)(STATSTG* pStatStg, DWORD dwFlags);
    STDMETHOD(UnlockRegion)(ULARGE_INTEGER iOffset, ULARGE_INTEGER nBytes,
	DWORD dwLockType);
    STDMETHOD(Write)(const void* pBuffer, ULONG nBytes, 
	ULONG* pnBytesWritten);

protected:
    LONG            m_nRefCount;
    CImgTaskPlug*   m_pFilter;
};


// CImageDecodeEventSink (Private) -----------------------------------------------------------

class CImageDecodeEventSink :
    public IImageDecodeEventSink
{

public:

    DECLARE_MEMALLOC_NEW_DELETE(Mt(CImageDecodeEventSink))

    CImageDecodeEventSink( CImgTaskPlug* pFilter );
    ~CImageDecodeEventSink();

    ULONG STDMETHODCALLTYPE AddRef();
    ULONG STDMETHODCALLTYPE Release();
    STDMETHOD(QueryInterface)(REFIID iid, void** ppInterface);

    STDMETHOD(GetSurface)(LONG nWidth, LONG nHeight, REFGUID bfid, 
	ULONG nPasses, DWORD dwHints, IUnknown** ppSurface);
    STDMETHOD(OnBeginDecode)(DWORD* pdwEvents, ULONG* pnFormats, 
	GUID** ppFormats);
    STDMETHOD(OnBitsComplete)();
    STDMETHOD(OnDecodeComplete)(HRESULT hrStatus);
    STDMETHOD(OnPalette)();
    STDMETHOD(OnProgress)(RECT* pBounds, BOOL bFinal);

protected:
    ULONG                       m_nRefCount;
    CImgTaskPlug*               m_pFilter;
    CComPtr< IDirectDrawSurface > m_pSurface;
};

CImageDecodeEventSink::CImageDecodeEventSink(CImgTaskPlug* pFilter) :
    m_nRefCount(0),
    m_pFilter(pFilter),
    m_pSurface(NULL)
{
}

CImageDecodeEventSink::~CImageDecodeEventSink()
{
}

ULONG CImageDecodeEventSink::AddRef()
{
    m_nRefCount++;

    return (m_nRefCount);
}

ULONG CImageDecodeEventSink::Release()
{
    m_nRefCount--;
    if (m_nRefCount == 0)
    {
	delete this;
	return (0);
    }

    return (m_nRefCount);
}

STDMETHODIMP CImageDecodeEventSink::QueryInterface(REFIID iid, 
   void** ppInterface)
{
    if (ppInterface == NULL)
    {
	return (E_POINTER);
    }

    *ppInterface = NULL;

    if (IsEqualGUID(iid, IID_IUnknown))
    {
	*ppInterface = (IUnknown*)this;
    }
    else if (IsEqualGUID(iid, IID_IImageDecodeEventSink))
    {
	*ppInterface = (IImageDecodeEventSink*)this;
    }
    else
    {
	return (E_NOINTERFACE);
    }

    //  If we're going to return an interface, AddRef it first
    if (*ppInterface)
    {
	((LPUNKNOWN)*ppInterface)->AddRef();
	return S_OK;
    }

    return (S_OK);
}

STDMETHODIMP CImageDecodeEventSink::OnBeginDecode(DWORD* pdwEvents, 
   ULONG* pnFormats, GUID** ppFormats)
{
    GUID* pFormats;

    if (pdwEvents != NULL)
    {
	*pdwEvents = 0;
    }
    if (pnFormats != NULL)
    {
	*pnFormats = 0;
    }
    if (ppFormats != NULL)
    {
	*ppFormats = NULL;
    }
    if (pdwEvents == NULL)
    {
	return (E_POINTER);
    }
    if (pnFormats == NULL)
    {
	return (E_POINTER);
    }
    if (ppFormats == NULL)
    {
	return (E_POINTER);
    }

    if (m_pFilter->_colorMode == 8)
    {
	pFormats = (GUID*)CoTaskMemAlloc(1*sizeof(GUID));
	if(pFormats == NULL)
	{
	    return (E_OUTOFMEMORY);
	}
	
	pFormats[0] = BFID_INDEXED_RGB_8;
	*pnFormats = 1;
    }
    else
    {
	pFormats = (GUID*)CoTaskMemAlloc(2*sizeof(GUID));
	if(pFormats == NULL)
	{
	    return (E_OUTOFMEMORY);
	}
	
	pFormats[0] = BFID_INDEXED_RGB_8;
	pFormats[1] = BFID_RGB_24;
	*pnFormats = 2;
    }

    *ppFormats = pFormats;
    *pdwEvents = IMGDECODE_EVENT_PALETTE|IMGDECODE_EVENT_BITSCOMPLETE
		    |IMGDECODE_EVENT_PROGRESS|IMGDECODE_EVENT_USEDDRAW;

    return (S_OK);
}

STDMETHODIMP CImageDecodeEventSink::OnBitsComplete()
{
    return (S_OK);
}

STDMETHODIMP CImageDecodeEventSink::OnDecodeComplete(HRESULT hrStatus)
{
    return (S_OK);
}

#define LINEBYTES(_wid,_bits) ((((_wid)*(_bits) + 31) / 32) * 4)

STDMETHODIMP CImageDecodeEventSink::GetSurface(LONG nWidth, LONG nHeight, 
    REFGUID bfid, ULONG nPasses, DWORD dwHints, IUnknown** ppSurface)
{
    HRESULT hResult;
    ULONG nBufferSize;
    CImgBitsDIB *pibd;

    (void)nPasses;
    (void)dwHints;
    
    if (ppSurface != NULL)
    {
	*ppSurface = NULL;
    }
    if (ppSurface == NULL)
    {
	return (E_POINTER);
    }

    if (IsEqualGUID(bfid, BFID_INDEXED_RGB_8))
    {
	m_pFilter->m_nBytesPerPixel = 1;
    }
    else if (IsEqualGUID(bfid, BFID_RGB_24))
    {
	m_pFilter->m_nBytesPerPixel = 3;
    }
    else
    {
	return (E_NOINTERFACE);
    }

    m_pFilter->_xWid = nWidth;
    m_pFilter->_yHei = nHeight;
    m_pFilter->m_nPitch = -LONG( LINEBYTES( m_pFilter->_xWid, 
	m_pFilter->m_nBytesPerPixel*8 ) );
    nBufferSize = -(m_pFilter->m_nPitch*(m_pFilter->_yHei));

    pibd = new CImgBitsDIB();
    if (!pibd)
        return E_OUTOFMEMORY;
        
    m_pFilter->_pImgBits = pibd;

    hResult = pibd->AllocDIBSection(m_pFilter->_colorMode == 8 ? 8 : (m_pFilter->m_nBytesPerPixel == 3 ? 24 : 8),
            m_pFilter->_xWid, m_pFilter->_yHei, NULL, 0, -1);

    if (hResult)
        return(hResult);
        
	m_pFilter->m_pbBits = (BYTE *)pibd->GetBits();;

    if (!m_pFilter->m_pbBits)
    {
	return (E_OUTOFMEMORY);
    }

    m_pFilter->m_pbFirstScanLine = m_pFilter->m_pbBits+nBufferSize+
	m_pFilter->m_nPitch;

    hResult = CreateDDrawSurfaceOnDIB(pibd->GetHbm(), &m_pSurface);
    if (FAILED(hResult))
    {
	return( hResult );
    }

    *ppSurface = (IUnknown *)m_pSurface;
    (*ppSurface)->AddRef();

    m_pFilter->m_pSurface = m_pSurface;
    
    m_pFilter->OnSize(nWidth, nHeight, -1);

    if (m_pFilter->_colorMode == 8 && m_pFilter->m_nBytesPerPixel == 1)
    {
	DDCOLORKEY  ddKey;

	ddKey.dwColorSpaceLowValue = ddKey.dwColorSpaceHighValue = g_wIdxTrans;

	m_pSurface->SetColorKey(DDCKEY_SRCBLT, &ddKey);
    }

    return (S_OK);
}

STDMETHODIMP CImageDecodeEventSink::OnPalette()
{
    return (S_OK);
}

STDMETHODIMP CImageDecodeEventSink::OnProgress(RECT* pBounds, BOOL bComplete)
{
    if (pBounds == NULL)
    {
	return (E_INVALIDARG);
    }

    m_pFilter->_yBot = pBounds->bottom-1;
    m_pFilter->OnProg(FALSE,
	m_pFilter->_yBot == m_pFilter->_yHei ? IMGBITS_TOTAL : IMGBITS_PARTIAL,
	FALSE, m_pFilter->_yBot);

    return (S_OK);
}

// CImgTaskPlug (Private) -----------------------------------------------------------

void CImgTaskPlug::Decode(BOOL *pfNonProgressive)
{
    HRESULT hResult;
    CComPtr< IImageDecodeEventSink > pDitherer;
    CComPtr< IDithererImpl > pDithererImpl;
    CComPtr< IStream > pStream;
    CComPtr< IStream > pOutStream;
    CComPtr< IMapMIMEToCLSID > pMap;
    CComPtr< IImageDecodeEventSink > pEventSink;

    m_pEventSink = (IImageDecodeEventSink*)new CImageDecodeEventSink(this);
    if (m_pEventSink == NULL)
 
    {
	goto Cleanup;
    }

    pStream = (IStream*)new CPlugStream(this);
    if (pStream == NULL)
    {
	goto Cleanup;
    }

    hResult = GetImgTaskExec()->RequestCoInit();
    if (FAILED(hResult))
    {
	goto Cleanup;
    }

    if (_colorMode == 8)
    {
	hResult = CoCreateInstance(CLSID_CoDitherToRGB8, NULL, 
	    CLSCTX_INPROC_SERVER, IID_IDithererImpl, (void**)&pDithererImpl);
	if (FAILED(hResult))
	{
	    goto Cleanup;
	}

	pDithererImpl->SetEventSink(m_pEventSink);

	hResult = SetColorTable(pDithererImpl);
	if (FAILED(hResult))
	{
	    goto Cleanup;
	}

	pDithererImpl->QueryInterface(IID_IImageDecodeEventSink, 
	    (void**)&pEventSink);
    }
    else
    {
	pEventSink = m_pEventSink;
    }

    hResult = DecodeImage(pStream, NULL, pEventSink);
    if (FAILED(hResult))
    {
	goto Cleanup;
    }

    _yBot = _yHei;
    _ySrcBot = -1;

    GetTransIndex();

    OnProg(TRUE, IMGBITS_TOTAL, FALSE, _yBot);

Cleanup:
    return;
}

void
CImgTaskPlug::BltDib(XHDC hdc, RECT * prcDst, RECT * prcSrc, DWORD dwRop, DWORD dwFlags)
{
    if (_pImgBits)
    {
        if (!m_bGotTrans)
            GetTransIndex();

        _pImgBits->StretchBlt(hdc, prcDst, prcSrc, dwRop, dwFlags);
    }
}

HRESULT CImgTaskPlug::GetTransIndex()
{
    // If we dithered the image the transparent index has changed to
    // match our destination palette.  Otherwise it is still the 
    // transparent index in the surface.  If the surface is not 8bpp
    // don't bother asking for the transparent index - ImgBltDib() doesn't
    // handle that case.

    if (m_bGotTrans)
        return S_OK;

    m_bGotTrans = TRUE;
    
    if (_colorMode == 8)
    {
        _lTrans = g_wIdxTrans;

        TraceTag((tagImgTrans, "CImgTaskPlug %x  _lTrans = %d", this, _lTrans));

        ((CImgBitsDIB *)_pImgBits)->SetTransIndex(_lTrans);
    }
    else if (m_nBytesPerPixel == 1 && m_pSurface)
    {
        DDCOLORKEY ddKey;

        m_pSurface->GetColorKey(DDCKEY_SRCBLT, &ddKey);
        _lTrans = (LONG)ddKey.dwColorSpaceLowValue;

        TraceTag((tagImgTrans, "CImgTaskPlug %x  _lTrans = %d", this, _lTrans));

        ((CImgBitsDIB *)_pImgBits)->SetTransIndex(_lTrans);
    }

    return S_OK;
}

BOOL
IsPluginImgFormat(BYTE * pb, UINT cb)
{
    UINT nFormat;
    return(IdentifyMIMEType(pb, cb, &nFormat) == S_OK);
}

CImgTask* NewImgTaskPlug()
{
    return(new CImgTaskPlug);
}

HRESULT CImgTaskPlug::SetColorTable(IDithererImpl* pDitherer)
{
    HRESULT hResult;

    _nColors = g_lpHalftone.wCnt;
    memcpy(_ape, g_lpHalftone.ape, _nColors * sizeof(PALETTEENTRY));

    hResult = pDitherer->SetDestColorTable(_nColors, g_rgbHalftone);
    if (FAILED(hResult))
    {
	return (hResult);
    }

    return (S_OK);
}

// CPlugStream (Private) -----------------------------------------------------------

CPlugStream::CPlugStream(CImgTaskPlug* pFilter) :
    m_pFilter(pFilter),
    m_nRefCount(0)
{
}

CPlugStream::~CPlugStream()
{
}

ULONG CPlugStream::AddRef()
{
    m_nRefCount++;

    return (m_nRefCount);
}

ULONG CPlugStream::Release()
{
    m_nRefCount--;
    if (m_nRefCount == 0)
    {
	delete this;
	return (0);
    }

    return (m_nRefCount);
}

STDMETHODIMP CPlugStream::QueryInterface(REFIID iid, void** ppInterface)
{
    if (ppInterface == NULL)
    {
	return (E_POINTER);
    }

    *ppInterface = NULL;

    if (IsEqualGUID(iid, IID_IUnknown))
    {
	*ppInterface = (IUnknown*)this;
    }
    else if (IsEqualGUID(iid, IID_IStream))
    {
	*ppInterface = (IStream*)this;
    }
    else
    {
	return (E_NOINTERFACE);
    }

    ((LPUNKNOWN)*ppInterface)->AddRef();
    return (S_OK);
}

STDMETHODIMP CPlugStream::Clone(IStream** ppStream)
{
    if (ppStream == NULL)
    {
	return (E_POINTER);
    }

    *ppStream = NULL;

    return (E_NOTIMPL);
}

STDMETHODIMP CPlugStream::Commit(DWORD dwFlags)
{
    return (E_NOTIMPL);
}

STDMETHODIMP CPlugStream::CopyTo(IStream* pStream, ULARGE_INTEGER nBytes,
    ULARGE_INTEGER* pnBytesRead, ULARGE_INTEGER* pnBytesWritten)
{
    return (E_NOTIMPL);
}

STDMETHODIMP CPlugStream::LockRegion(ULARGE_INTEGER iOffset, 
    ULARGE_INTEGER nBytes, DWORD dwLockType)
{
    return (E_NOTIMPL);
}

STDMETHODIMP CPlugStream::Read(void* pBuffer, ULONG nBytes, 
   ULONG* pnBytesRead)
{
    HRESULT hResult;

    if (pnBytesRead != NULL)
    {
	*pnBytesRead = 0;
    }
    if (pBuffer == NULL)
    {
	return (E_POINTER);
    }
    if (nBytes == 0)
    {
	return (E_INVALIDARG);
    }

    hResult = m_pFilter->Read(pBuffer, nBytes, pnBytesRead);
    if (FAILED(hResult))
    {
	return (hResult);
    }

    if (*pnBytesRead < nBytes)
    {
	return (S_FALSE);
    }

    return (S_OK);
}

STDMETHODIMP CPlugStream::Revert()
{
    return (E_NOTIMPL);
}

STDMETHODIMP CPlugStream::Seek(LARGE_INTEGER nDisplacement, DWORD dwOrigin,
    ULARGE_INTEGER* piNewPosition)
{
    return (E_NOTIMPL);
}

STDMETHODIMP CPlugStream::SetSize(ULARGE_INTEGER nNewSize)
{
    return (E_NOTIMPL);
}

STDMETHODIMP CPlugStream::Stat(STATSTG* pStatStg, DWORD dwFlags)
{
    return (E_NOTIMPL);
}

STDMETHODIMP CPlugStream::UnlockRegion(ULARGE_INTEGER iOffset, 
    ULARGE_INTEGER nBytes, DWORD dwLockType)
{
    return (E_NOTIMPL);
}

STDMETHODIMP CPlugStream::Write(const void* pBuffer, ULONG nBytes, 
    ULONG* pnBytesWritten)
{
    return (E_NOTIMPL);
}

// IImageDecodeFilter support -----------------------------------------------------

struct BFID_ENTRY {
    int bpp;
    const GUID *pBFID;
};

const BFID_ENTRY  BFIDInfo[] =
{
    { 1, &BFID_MONOCHROME },
    { 4, &BFID_RGB_4 },
    { 8, &BFID_RGB_8 },
    { 15, &BFID_RGB_555 },
    { 16, &BFID_RGB_565 },
    { 24, &BFID_RGB_24 },
    { 32, &BFID_RGB_32 }
};

class CImageDecodeFilter : public CBaseFT, public IImageDecodeFilter
{
    typedef CBaseFT super;
    
public:

    DECLARE_MEMCLEAR_NEW_DELETE(Mt(CImageDecodeFilter))

    // IUnknown members

    STDMETHOD(QueryInterface)(REFIID, void **);
    STDMETHOD_(ULONG,AddRef)();
    STDMETHOD_(ULONG,Release)();
    
    // IImageDecodeFilter methods
    STDMETHOD( Initialize )( IImageDecodeEventSink* pEventSink );
    STDMETHOD( Process )( IStream* pStream );
    STDMETHOD( Terminate )( HRESULT hrStatus );

    // Worker methods

    const BFID_ENTRY * MatchBFID(int bpp);
    const BFID_ENTRY * MatchBFIDtoBFID(GUID *pBFID);
    HRESULT LockBits(RECT *prcBounds, DWORD dwLockFlags, void **ppBits, long *pPitch);
    HRESULT UnlockBits(RECT *prcBounds, void *pBits);
    HRESULT EnsureSurface();
    HRESULT CopyRect(RECT *prcBounds);
    void OnComplete(HRESULT hr);
    void ImageCallback();

    // Worker thread methods
    
    static DWORD WINAPI ThreadProc(LPVOID lpData);
    STDMETHOD( ProcessOnThread )( );
        
    CComPtr < IImageDecodeEventSink > m_pEventSink;
    DWORD                   m_dwEvents;
    ULONG                   m_nFormats;
    GUID *                  m_pFormats;
    ULONG                   m_ulState;
    CComPtr < IDirectDrawSurface >    m_pSurface;
    CImgCtx *               m_pImgCtx;
    LONG                    m_xWidth;
    LONG                    m_yHeight;
    LONG                    m_iBitCount;
    void *                  m_pvBits;
    RECT                    m_rcUpdate;
    HANDLE                  m_hMainEvent;
    HANDLE                  m_hWorkerEvent;
    enum { Ready, Callback, Done } m_State;
};

const BFID_ENTRY * CImageDecodeFilter::MatchBFID(int bpp)
{
    const BFID_ENTRY *pBFIDEntry = NULL;
    ULONG i;

    for (i = 0; i < ARRAY_SIZE(BFIDInfo); ++i)
    {
        if (BFIDInfo[i].bpp == bpp)
        {
            pBFIDEntry = BFIDInfo + i;
            break;
        }
    }

    if (pBFIDEntry)
    {
        for (i = 0; i < m_nFormats; ++i)
        {
            if (IsEqualGUID(*pBFIDEntry->pBFID, m_pFormats[i]))
            return pBFIDEntry;
        }
    }
    
    return NULL;
}

const BFID_ENTRY * CImageDecodeFilter::MatchBFIDtoBFID(GUID *pBFID)
{
    ULONG i;

    for (i = 0; i < ARRAY_SIZE(BFIDInfo); ++i)
    {
        if (IsEqualGUID(*BFIDInfo[i].pBFID, *pBFID))
            return BFIDInfo + i;
    }

    return NULL;
}

HRESULT CImageDecodeFilter::LockBits(RECT *prcBounds, DWORD dwLockFlags, void **ppBits
, long *pPitch)
{
    HRESULT hResult;
    
    DDSURFACEDESC   ddsd;

    ddsd.dwSize = sizeof(ddsd);
    hResult = m_pSurface->Lock(prcBounds, &ddsd, DDLOCK_WAIT | DDLOCK_SURFACEMEMORYPTR, NULL);
    if (FAILED(hResult))
        return hResult;

    *ppBits = ddsd.lpSurface;
    *pPitch = ddsd.lPitch;

    return S_OK;
}

HRESULT CImageDecodeFilter::UnlockBits(RECT *prcBounds, void *pBits)
{
    return m_pSurface->Unlock(pBits);
}


HRESULT CImageDecodeFilter::EnsureSurface()
{
    HRESULT hr;
    LPDIRECTDRAWPALETTE pDDPalette;
    HRESULT             hResult;
    CImgBits *pImgBits;
    
    if (m_pSurface == NULL)
    {
        CImgInfo *pImgInfo = (CImgInfo *)m_pImgCtx->GetImgId();

        if(pImgInfo == NULL)
            return E_FAIL;

        pImgInfo->GetImageAndMask(&pImgBits);

        const BFID_ENTRY  *pBFIDEntry;

        // we can only create a surface if we have DIB-formatted bits
        m_pvBits = pImgBits->GetBits();
        if (!m_pvBits)
            return E_FAIL;
            
        IUnknown *pUnk;
        DDCOLORKEY ddkey;
    
        pBFIDEntry = MatchBFID(pImgBits->Depth());
        if (pBFIDEntry == NULL)
            return E_FAIL;

        m_iBitCount = pImgBits->Depth();
        if (m_iBitCount == 15)
            m_iBitCount = 16;

        m_xWidth = pImgBits->Width();
        m_yHeight = pImgBits->Height();
    
        hr = m_pEventSink->GetSurface(m_xWidth, 
                m_yHeight, *pBFIDEntry->pBFID,
                1, IMGDECODE_HINT_TOPDOWN | IMGDECODE_HINT_FULLWIDTH,
                &pUnk);
        if (FAILED(hr))
            return hr;
    
        pUnk->QueryInterface(IID_IDirectDrawSurface, (void **)&m_pSurface);
        pUnk->Release();

        if (m_pSurface == NULL)
            return E_FAIL;

        // Start the transparent index out of range (opaque)
        ddkey.dwColorSpaceLowValue = 0xffffffff;
        ddkey.dwColorSpaceHighValue = 0xffffffff;
        m_pSurface->SetColorKey(DDCKEY_SRCBLT, &ddkey);
    
        // Set the palette if there is one
        hResult = m_pSurface->GetPalette(&pDDPalette);
        if (SUCCEEDED(hResult))
        {
            RGBQUAD             argb[256];
            PALETTEENTRY        ape[256];
            LONG                cColors;

            cColors = pImgBits->Colors();
            if (cColors > 0)
            {
                if (cColors > 256)
                    cColors = 256;

                pImgBits->GetColors(0, cColors, argb);
                CopyPaletteEntriesFromColors(ape, argb, cColors);
                pDDPalette->SetEntries(0, 0, cColors, ape);
                pDDPalette->Release();
            }
        }

        // Notify the caller if necessary
        
        if (m_dwEvents & IMGDECODE_EVENT_PALETTE)
            m_pEventSink->OnPalette();
    }

    return S_OK;
}

void CImageDecodeFilter::OnComplete(HRESULT hr)
{
    if (SUCCEEDED(hr) && (m_dwEvents & IMGDECODE_EVENT_BITSCOMPLETE))
        m_pEventSink->OnBitsComplete();

    m_pEventSink->OnDecodeComplete(hr);
    SetEvent(m_hWorkerEvent);
}

HRESULT CImageDecodeFilter::CopyRect(RECT *prcBounds)
{
    BYTE    *pbBits = NULL, *pbSrc, *pbDst;
    long     cbRowDst = 0, cbRowSrc, i, y1, y2;
    HRESULT hr;

    hr = EnsureSurface();
    if (FAILED(hr))
        return hr;

    hr = LockBits(prcBounds, 0, (void **)&pbBits, &cbRowDst);
    if (FAILED(hr))
        return hr;

    y1 = prcBounds->top;
    y2 = prcBounds->bottom;
    if (y1 > y2)
    {
        long t;

        t = y1;
        y1 = y2 + 1;        // maintain inclusive/exclusive relationship
        y2 = t + 1;
    }

    cbRowSrc = -(((m_xWidth * m_iBitCount + 31) & ~31) / 8);
    pbSrc = (BYTE *)m_pvBits - cbRowSrc * (m_yHeight - y1 - 1);
    
    pbDst = pbBits;
    if (cbRowDst < 0)
        pbDst -= cbRowDst * (m_yHeight - y1 - 1);

    for (i = y1; i < y2; ++i)
    {
        memcpy(pbDst, pbSrc, -cbRowSrc);    
        pbSrc += cbRowSrc;
        pbDst += cbRowDst;
    }
    
    UnlockBits(prcBounds, pbBits);

    return S_OK;
}

void IImageDecodeFilter_CallbackOnThread(void *pv1, void *pv2)
{
    CImageDecodeFilter *pImgFilter = (CImageDecodeFilter *)pv2;

    pImgFilter->m_State = CImageDecodeFilter::Callback;
    SetEvent(pImgFilter->m_hMainEvent);
}

void CImageDecodeFilter::ImageCallback()
{
    RECT    rcBounds;
    HRESULT hr;
    DDCOLORKEY ddKey;

    m_pImgCtx->GetStateInfo(&m_ulState, NULL, TRUE);

    // First see if there is an error or the image is done decoding.
    
    if (m_ulState & IMGLOAD_COMPLETE)
    {
        CImgInfo *pImgInfo = (CImgInfo *)m_pImgCtx->GetImgId();
	
        // Transfer remaining data to buffer since last view change
        hr = EnsureSurface();
        if (SUCCEEDED(hr))
        {
            rcBounds.left = 0;
            rcBounds.top = 0;
            rcBounds.right = m_xWidth;
            rcBounds.bottom = m_yHeight;
            SubtractRect(&rcBounds, &rcBounds, &m_rcUpdate);

            hr = CopyRect(&rcBounds);

            if (pImgInfo->GetTrans())
            {
                ddKey.dwColorSpaceLowValue = ddKey.dwColorSpaceHighValue = pImgInfo->GetTrans();
                m_pSurface->SetColorKey(DDCKEY_SRCBLT, &ddKey);
            }
        }

        OnComplete(hr);
        return;
    }
    else if (m_ulState & IMGLOAD_ERROR)
    {
        OnComplete(E_FAIL);
        return;
    }

    // If we haven't made the surface yet do it now (responding to IMGCHG_VIEW)

    if (FAILED(EnsureSurface()))
    {
        OnComplete(E_FAIL);
        return;
    }
    
    // Transfer image data and send progress event 

    if ((m_dwEvents & IMGDECODE_EVENT_PROGRESS) && m_pSurface)
    {
        RECT    rcBounds[2], rcImg;
        LONG    nRects, i;

        rcImg.left = 0;
        rcImg.top = 0;
        rcImg.right = m_xWidth;
        rcImg.bottom = m_yHeight;

        m_pImgCtx->GetUpdateRects(rcBounds, &rcImg, &nRects);

        // If we call GetUpdateRects before the decoder has filled anything in
        // (_yTop == -1) the function returns the entire image rectangle.  We 
        // need to detect this case and skip over this notification.
	
        if (IsRectEmpty(&m_rcUpdate) 
            && nRects > 0 
            && EqualRect(&rcImg, rcBounds))
            return;
	    
        for (i = 0; i < nRects; ++i)
        {
            hr = CopyRect(&rcBounds[i]);
            if (FAILED(hr))
            {
                OnComplete(hr);
                return;
            }
            
            m_pEventSink->OnProgress(&rcBounds[i], TRUE);
            UnionRect(&m_rcUpdate, &m_rcUpdate, &rcBounds[i]);
        }
    }
}

STDMETHODIMP
CImageDecodeFilter::QueryInterface(REFIID riid, void ** ppv)
{
    if (riid == IID_IImageDecodeFilter || riid == IID_IUnknown)
    {
        *ppv = (IUnknown *)this;
        ((LPUNKNOWN)*ppv)->AddRef();
        return(S_OK);
    }
    else
    {
        *ppv = NULL;
        return(E_NOINTERFACE);
    }
}

STDMETHODIMP_(ULONG)
CImageDecodeFilter::AddRef()
{
    return(super::AddRef());
}

STDMETHODIMP_(ULONG)
CImageDecodeFilter::Release()
{
    return(super::Release());
}

STDMETHODIMP
CImageDecodeFilter::Initialize(IImageDecodeEventSink* pEventSink)
{
    HRESULT hr;
    
    if (pEventSink == NULL)
        return E_INVALIDARG;

    m_pEventSink = pEventSink;

    hr = pEventSink->OnBeginDecode(&m_dwEvents, &m_nFormats, &m_pFormats);

    return hr;
}

STDMETHODIMP
CImageDecodeFilter::Process(IStream* pStream)
{
    DWORD dwTID;
    HRESULT hr = E_FAIL;
    HANDLE hThread;
    CDwnDoc *pDwnDoc;
    CDwnCtx *pDwnCtx;
    CDwnLoad *pDwnLoad;
    const BFID_ENTRY  *pBFIDEntry = NULL;
    DWNLOADINFO dwnInfo;
    ULONG i;

    ZeroMemory(&dwnInfo, sizeof(dwnInfo));
    dwnInfo.pstm = pStream;

    pDwnDoc = new CDwnDoc;
    if (pDwnDoc == NULL)
    {
        hr = E_OUTOFMEMORY;
        goto cleanup1;
    }

    dwnInfo.pDwnDoc = pDwnDoc;
    dwnInfo.pchUrl = TEXT("");

    for (i = 0; i < m_nFormats; ++i)
    {
        pBFIDEntry = MatchBFIDtoBFID(&m_pFormats[i]);
        if (pBFIDEntry)
            break;
    }
    if (pBFIDEntry == NULL)
    {
        hr = E_FAIL;
        goto cleanup2;
    }
	
    pDwnDoc->SetDownf(pBFIDEntry->bpp | DWNF_RAWIMAGE | DWNF_NOOPTIMIZE);

    hr = NewDwnCtx(DWNCTX_IMG, TRUE, &dwnInfo, &pDwnCtx);
    if (FAILED(hr))
        goto cleanup2;

    m_pImgCtx = (CImgCtx *)pDwnCtx;
    
    // Keep the CDwnLoad around so it can passivate on this
    // thread.  If you don't, it has to post a message to
    // get back to this thread and we don't work well in
    // console mode apps

    // Returns addref'd CDwnLoad
    pDwnLoad = m_pImgCtx->GetDwnLoad();

    m_hMainEvent = CreateEvent(NULL, FALSE, FALSE, NULL);
    if (!m_hMainEvent)
        goto cleanup3;

    m_hWorkerEvent = CreateEvent(NULL, FALSE, FALSE, NULL);
    if (!m_hWorkerEvent)
        goto cleanup4;
        
    m_State = Ready;
    
    hThread = CreateThread(NULL, 0, ThreadProc, this, 0, &dwTID);
    if (hThread == NULL)
        goto cleanup5;

    while (m_State != Done)
    {
        WaitForSingleObject(m_hMainEvent, INFINITE);

        while (m_State == Callback)
        {
            m_State = Ready;
            ImageCallback();
        }
    }
    
    GetExitCodeThread(hThread, (DWORD *)&hr);
    
    CloseHandle(hThread);

cleanup5:
    CloseHandle(m_hWorkerEvent);

cleanup4:
    CloseHandle(m_hMainEvent);

cleanup3:    
    if (pDwnLoad)
    {
        pDwnLoad->Release();
    }
    if (pDwnCtx)
    {
        pDwnCtx->Release();
    }
    
cleanup2:    
    pDwnDoc->Release();
    
cleanup1:
    return hr;
}

DWORD WINAPI CImageDecodeFilter::ThreadProc(LPVOID lpData)
{
    DWORD dwReturn;
    CImageDecodeFilter *pFilter = (CImageDecodeFilter *)lpData;

    dwReturn = CoInitialize(NULL);
    if (SUCCEEDED(dwReturn))
    {    
        dwReturn = pFilter->ProcessOnThread();
        CoUninitialize();
    }

    return dwReturn;
}

STDMETHODIMP
CImageDecodeFilter::ProcessOnThread()
{
    DWORD   dwResult;
    BOOL    fActive = TRUE;
    
    m_pImgCtx->SetCallback(IImageDecodeFilter_CallbackOnThread, this);
    m_pImgCtx->SelectChanges(IMGCHG_VIEW | IMGCHG_COMPLETE, 0, TRUE);

    while (fActive)
    {
        dwResult = MsgWaitForMultipleObjects(1, &m_hWorkerEvent, FALSE, INFINITE, 
                        QS_ALLINPUT);
        if (dwResult == WAIT_OBJECT_0 + 1)
        {
            MSG msg;

            while (PeekMessage(&msg, NULL, 0, 0, PM_REMOVE))
            {
                if (msg.message == WM_QUIT)
                {
                    fActive = FALSE;
                    break;
                }
                else
                    DispatchMessage(&msg);
            }
        }
        else
        {
            fActive = FALSE;
        }
    }

    m_pImgCtx->Disconnect();
    
    m_State = Done;
    SetEvent(m_hMainEvent);
    
    return S_OK;
}

STDMETHODIMP
CImageDecodeFilter::Terminate(HRESULT hrStatus)
{
	if (m_pFormats)
		CoTaskMemFree(m_pFormats);

    return S_OK;
}

STDMETHODIMP
CreateIImageDecodeFilter(IUnknown * pUnkOuter, IUnknown **ppUnk)
{
    if (pUnkOuter != NULL)
    {
        *ppUnk = NULL;
        return(CLASS_E_NOAGGREGATION);
    }

    CImageDecodeFilter * pImgFilter = new CImageDecodeFilter;

    *ppUnk = pImgFilter;

    RRETURN(pImgFilter ? S_OK : E_OUTOFMEMORY);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\download\imgutil.cxx ===
//+------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1992 - 1997
//
//  File:       imgutil.cxx
//
//  Contents:   Utilities for imaging code
//
//-------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_IMG_HXX_
#define X_IMG_HXX_
#include "img.hxx"
#endif

#ifndef X_INTL_HXX_
#define X_INTL_HXX_
#include "intl.hxx"
#endif

#ifndef X_DITHERS_H_
#define X_DITHERS_H_
#include "dithers.h"
#endif

#ifndef X_OCMM_H_
#define X_OCMM_H_
#include "ocmm.h"
#endif

#ifndef X_IMGBITS_HXX_
#define X_IMGBITS_HXx_
#include "imgbits.hxx"
#endif

#ifndef X_TXTDEFS_H_
#define X_TXTDEFS_H_
#include "txtdefs.h"
#endif


#undef NEW_DITHERER
#define whSlop   1      // amount of difference between element width or height and image
                        // width or height within which we will blt the image in its native
                        // proportions. For now, this applies only to GIF images.

DeclareTag(tagForce4BPP,     "Dwn", "Img: Force 4-bit-per-pixel color mode");

MtDefine(ImgDithData, Dwn, "CreateDitherData")
MtDefine(DIBSection, WorkingSet, "Bitmaps")

int         g_colorModeDefault = 0;

WORD        g_wIdxTrans;
WORD        g_wIdxBgColor;
WORD        g_wIdxFgColor;
COLORREF    g_crBgColor;
COLORREF    g_crFgColor;
RGBQUAD     g_rgbBgColor;
RGBQUAD     g_rgbFgColor;

// NOTE: this is not CONST because the palettes are tweaked by VgaPenCallback
#ifdef UNIX
PALETTEENTRY g_peVga[16] =
{
    { 0x00, 0x00, 0x00, 0x00 }, // Black
    { 0x00, 0x00, 0x00, 0x80 }, // Dark red
    { 0x00, 0x00, 0x80, 0x00 }, // Dark green
    { 0x00, 0x00, 0x80, 0x80 }, // Dark yellow
    { 0x00, 0x80, 0x00, 0x00 }, // Dark blue
    { 0x00, 0x80, 0x00, 0x80 }, // Dark purple
    { 0x00, 0x80, 0x80, 0x00 }, // Dark aqua
    { 0x00, 0xC0, 0xC0, 0xC0 }, // Light grey
    { 0x00, 0x80, 0x80, 0x80 }, // Dark grey
    { 0x00, 0x00, 0x00, 0xFF }, // Light red
    { 0x00, 0x00, 0xFF, 0x00 }, // Light green
    { 0x00, 0x00, 0xFF, 0xFF }, // Light yellow
    { 0x00, 0xFF, 0x00, 0x00 }, // Light blue
    { 0x00, 0xFF, 0x00, 0xFF }, // Light purple
    { 0x00, 0xFF, 0xFF, 0x00 }, // Light aqua
    { 0x00, 0xFF, 0xFF, 0xFF }  // White
};
#else
PALETTEENTRY g_peVga[16] =
{
    { 0x00, 0x00, 0x00, 0x00 }, // Black
    { 0x80, 0x00, 0x00, 0x00 }, // Dark red
    { 0x00, 0x80, 0x00, 0x00 }, // Dark green
    { 0x80, 0x80, 0x00, 0x00 }, // Dark yellow
    { 0x00, 0x00, 0x80, 0x00 }, // Dark blue
    { 0x80, 0x00, 0x80, 0x00 }, // Dark purple
    { 0x00, 0x80, 0x80, 0x00 }, // Dark aqua
    { 0xC0, 0xC0, 0xC0, 0x00 }, // Light grey
    { 0x80, 0x80, 0x80, 0x00 }, // Dark grey
    { 0xFF, 0x00, 0x00, 0x00 }, // Light red
    { 0x00, 0xFF, 0x00, 0x00 }, // Light green
    { 0xFF, 0xFF, 0x00, 0x00 }, // Light yellow
    { 0x00, 0x00, 0xFF, 0x00 }, // Light blue
    { 0xFF, 0x00, 0xFF, 0x00 }, // Light purple
    { 0x00, 0xFF, 0xFF, 0x00 }, // Light aqua
    { 0xFF, 0xFF, 0xFF, 0x00 }  // White
};
#endif

#define MASK565_0   0x0000F800
#define MASK565_1   0x000007E0
#define MASK565_2   0x0000001F



void *pCreateDitherData(int xsize)
{
    UINT    cdw = (xsize + 1);
    DWORD * pdw = (DWORD *)MemAlloc(Mt(ImgDithData), cdw * sizeof(DWORD));

    if (pdw)
    {
        pdw += cdw;
        while (cdw-- > 0) *--pdw = 0x909090;
    }

    return(pdw);
}

// Mask off the high byte for comparing PALETTEENTRIES, RGBQUADS, etc.
#define RGBMASK(pe)    (*((DWORD *)&(pe)) & 0x00FFFFFF)

int x_ComputeConstrainMap(int cEntries, PALETTEENTRY *pcolors, int transparent, int *pmapconstrained)
{
    int i;
    int nDifferent = 0;

    for (i = 0; i < cEntries; i++)
    {
        if (i != transparent)
        {
            pmapconstrained[i] = RGB2Index(pcolors[i].peRed, pcolors[i].peGreen, pcolors[i].peBlue);
            
            if (RGBMASK(pcolors[i]) != RGBMASK(g_lpHalftone.ape[pmapconstrained[i]]))
                ++nDifferent;
        }
    }

    // Turns out the transparent index can be outside the color set.  In this
    // case we still want to map the transparent index correctly.

    if (transparent >= 0 && transparent <= 255)
    {
        pmapconstrained[transparent] = g_wIdxTrans;
    }

    return nDifferent;
}

/*
    constrains colors to 6X6X6 cube we use
*/
void x_ColorConstrain(unsigned char HUGEP *psrc, unsigned char HUGEP *pdst, int *pmapconstrained, long xsize)
{
    int x;

    for (x = 0; x < xsize; x++)
    {
        *pdst++ = (BYTE)pmapconstrained[*psrc++];
    }
}

void x_DitherRelative(BYTE *pbSrc, BYTE * pbDst, PALETTEENTRY *pe,
    int xsize, int ysize, int transparent, int *v_rgb_mem,
    int yfirst, int ylast)
{
    RGBQUAD argb[256];
    int cbScan;

    cbScan = (xsize + 3) & ~3;
    pbSrc  = pbSrc + cbScan * (ysize - yfirst - 1);
    pbDst  = pbDst + cbScan * (ysize - yfirst - 1);

    CopyColorsFromPaletteEntries(argb, pe, 256);
    
    DitherTo8( pbDst, -cbScan, 
                   pbSrc, -cbScan, BFID_RGB_8, 
                   g_rgbHalftone, argb,
                   g_pInvCMAP,
                   0, yfirst, xsize, ylast - yfirst + 1,
                   g_wIdxTrans, transparent);
}

HRESULT x_Dither(unsigned char *pdata, PALETTEENTRY *pe, int xsize, int ysize, int transparent)
{
    x_DitherRelative(pdata, pdata, pe, xsize, ysize, transparent, NULL, 
                        0, ysize - 1);
    
    return S_OK;
}

#ifdef OLDIMAGECODE // replaced by CImgBitsDIB::StretchBlt

DeclareTag(tagNoMaskBlt,     "Dwn", "Img: Don't use MaskBlt");
DeclareTag(tagTimeBltDib,    "Dwn", "Img: Measure BltDib (hold shift key down)");

void ImgBltDib(XHDC hdc, HBITMAP hbmDib, HBITMAP hbmMask, LONG lTrans,
    RECT * prcDst, RECT * prcSrc, LONG yDibBot, LONG xDibWid, LONG yDibHei, DWORD dwRop)
{
    int         xDst            = prcDst->left;
    int         yDst            = prcDst->top;
    int         xDstWid         = prcDst->right - xDst;
    int         yDstHei         = prcDst->bottom - yDst;
    int         xSrc            = prcSrc->left;
    int         ySrc            = prcSrc->top;
    int         xSrcWid         = prcSrc->right - xSrc;
    int         ySrcHei         = prcSrc->bottom - ySrc;
    RGBQUAD     rgbBlack        = { 0, 0, 0, 0};
    RGBQUAD     rgbWhite        = { 255, 255, 255, 0 };
    HDC         hdcDib          = NULL;
    HBITMAP     hbmSav          = NULL;
    int         cSetColors      = 0;
    void *      pvSav           = NULL;
    UINT        cbSav           = 0;
    BOOL        fCritical       = FALSE;
    BYTE        abSav[sizeof(RGBQUAD)*2];
    RGBQUAD     argbOld[256];
    RGBQUAD     argbNew[256];
    BOOL        fPrinter = (GetDeviceCaps(hdc, TECHNOLOGY) == DT_RASPRINTER);
    BOOL        fTrans = TRUE;

    if (    yDibBot == 0
        ||  xDstWid <= 0 || xSrcWid <= 0 || xDibWid <= 0
        ||  yDstHei <= 0 || ySrcHei <= 0 || yDibHei <= 0)
        return;

    #if DBG==1
    __int64     t1, t2, t3, t4, tfrq;
    BOOL        fTransBlt = 0;
    DIBSECTION  ds;
    Verify(GetObject(hbmDib, sizeof(DIBSECTION), &ds));
    Assert(xDibWid == ds.dsBmih.biWidth && yDibHei == ds.dsBmih.biHeight);
    QueryPerformanceFrequency((LARGE_INTEGER *)&tfrq);
    #endif

    // If the caller is attempting to show the bits which have not yet
    // been decoded, limit the source and dest rectangles to the visible
    // area only.

    if (yDibBot > 0 && yDibBot < yDibHei)
        yDibHei = yDibBot;

    if (xSrc < 0)
    {
        xDst += MulDivQuick(-xSrc, xDstWid, xSrcWid);
        xDstWid = prcDst->right - xDst;
        xSrcWid += xSrc;
        xSrc = 0;
        if (xDstWid <=0 || xSrcWid <= 0)
            return;
    }
    if (ySrc < 0)
    {
        yDst += MulDivQuick(-ySrc, yDstHei, ySrcHei);
        yDstHei = prcDst->bottom - yDst;
        ySrcHei += ySrc;
        ySrc = 0;
        if (yDstHei <=0 || ySrcHei <= 0)
            return;
    }

    if (xSrc + xSrcWid > xDibWid)
    {
        xDstWid = MulDivQuick(xDstWid, xDibWid - xSrc, xSrcWid);
        xSrcWid = xDibWid - xSrc;
        if (xDstWid <= 0 || xSrcWid <= 0)
            return;
    }
    if (ySrc + ySrcHei > yDibHei)
    {
        yDstHei = MulDivQuick(yDstHei, yDibHei - ySrc, ySrcHei);
        ySrcHei = yDibHei - ySrc;
        if (yDstHei <= 0 || ySrcHei <= 0)
            return;
    }

    hdcDib = GetMemoryDC();

    if (hdcDib == NULL)
        return;

    hbmSav = (HBITMAP)SelectObject(hdcDib, hbmDib);

    if (hbmSav == NULL)
        goto Cleanup;

    SetStretchBltMode(hdc, COLORONCOLOR);

#ifndef WIN16
    if (fPrinter)
    {
        int iEscapeFunction = POSTSCRIPT_PASSTHROUGH;
        THREADSTATE *   pts = GetThreadState();

        // Filter out printers that we know lie about their support for transparency.
        fTrans = (!pts || !(pts->dwPrintMode & PRINTMODE_NO_TRANSPARENCY))
            && !Escape(hdc, QUERYESCSUPPORT, sizeof(int), (LPCSTR) &iEscapeFunction, NULL);
        // fTrans = FALSE for a postscript driver
    }
#endif // ndef WIN16

    if (hbmMask)
    {
        if (fTrans)
        {
            #if DBG==1
            if (IsTagEnabled(tagNoMaskBlt)) ; else
            #endif

#ifndef WIN16
            if (    hdc.CanMaskBlt()
                &&  xSrcWid == xDstWid && ySrcHei == yDstHei)
            {
                #if DBG==1
                QueryPerformanceCounter((LARGE_INTEGER *)&t1);
                #endif

                MaskBlt(hdc, xDst, yDst, xDstWid, yDstHei,
                     hdcDib, xSrc, ySrc, hbmMask, xSrc, ySrc, 0xAACC0020);

                #if DBG==1 && !defined(WIN16)
                QueryPerformanceCounter((LARGE_INTEGER *)&t2);
                if (GetAsyncKeyState(VK_SHIFT) & 0x8000)
                    TraceTag((tagTimeBltDib, "MaskBlt (%ldx%ld) took %ld us",
                        xDstWid, yDstHei, ((LONG)(((t2 - t1) * 1000000) / tfrq))));
                #endif

                goto Cleanup;
            }
#endif //ndef WIN16

            if (!SelectObject(hdcDib, hbmMask))
                goto Cleanup;

            #if DBG==1
            QueryPerformanceCounter((LARGE_INTEGER *)&t1);
            #endif

            StretchBlt(hdc, xDst, yDst, xDstWid, yDstHei,
                    hdcDib, xSrc, ySrc, xSrcWid, ySrcHei, SRCPAINT);
            dwRop = SRCAND;

            #if DBG==1
            QueryPerformanceCounter((LARGE_INTEGER *)&t2);
            fTransBlt = 1;
            #endif

            if (SelectObject(hdcDib, hbmDib) != hbmMask)
                goto Cleanup;
        }
    }
    else if (lTrans >= 0)
    {
        // WINCE - handled with TransparentImage, below.
        #if !defined(WINCE) || defined(WINCE_NT)
        g_csImgTransBlt.Enter();
        fCritical = TRUE;

        Verify(GetDIBColorTable(hdcDib, 0, 256, argbOld) > 0);

        RGBQUAD * prgb = argbNew;
        for (int c = 256; c-- > 0; )
            *prgb++ = rgbWhite;
        argbNew[lTrans] = rgbBlack;

        pvSav = &argbOld[lTrans];
        cbSav = sizeof(RGBQUAD);
        *(RGBQUAD *)abSav = *(RGBQUAD *)pvSav;
        *(RGBQUAD *)pvSav = rgbWhite;

        if (fTrans)
        {
            Verify(SetDIBColorTable(hdcDib, 0, 256, argbNew) == 256);

            cSetColors = 256;

            #if DBG==1
            QueryPerformanceCounter((LARGE_INTEGER *)&t1);
            #endif

            StretchBlt(hdc, xDst, yDst, xDstWid, yDstHei,
                    hdcDib, xSrc, ySrc, xSrcWid, ySrcHei, SRCPAINT);
            dwRop = SRCAND;

            #if DBG==1
            QueryPerformanceCounter((LARGE_INTEGER *)&t2);
            fTransBlt = 2;
            #endif

            Verify(SetDIBColorTable(hdcDib, 0, 256, argbOld) == 256);
        }
        #else
            TransparentImage(hdc, xDst, yDst, xDstWid, yDstHei,
                             hdcDib, xSrc, ySrc, xSrcWid, ySrcHei, PALETTEINDEX(lTrans));
        #endif
    }

    #if DBG==1 && !defined(WIN16) && !defined(NO_PERFDBG)
    if (hbmMask || lTrans < 0)
        IsIdentityBlt(hdc, hdcDib, ds.dsBmih.biWidth);
    QueryPerformanceCounter((LARGE_INTEGER *)&t3);
    #endif

    if (fPrinter && ((g_dwPlatformID == VER_PLATFORM_WIN32_WINDOWS)
#ifdef UNIX
                  || (g_dwPlatformID == VER_PLATFORM_WIN32_UNIX)
#endif
        ))
    {
        DIBSECTION dsPrint;

        if (GetObject(hbmDib, sizeof(DIBSECTION), &dsPrint))
        {
            struct
            {
                BITMAPINFOHEADER bmih;
                RGBQUAD argb[256];
            } bmi;

            bmi.bmih = dsPrint.dsBmih;
            GetDIBColorTable(hdcDib, 0, 256, bmi.argb);

            Assert(bmi.bmih.biHeight > 0);

            StretchDIBits(hdc, xDst, yDst, xDstWid, yDstHei,
                          xSrc, bmi.bmih.biHeight - prcSrc->bottom, xSrcWid, ySrcHei,
                          dsPrint.dsBm.bmBits, (BITMAPINFO *) &bmi, DIB_RGB_COLORS, dwRop);
        }
    }
    else
    // WINCE - Transparent images were handled above with the new TransparentImage() api,
    //         so we don't have to do the second Blt with the SRCAND rop here.
    #if defined(WINCE) && !defined(WINCE_NT)
        if (lTrans < 0)
    #endif
        {
            StretchBlt(hdc, xDst, yDst, xDstWid, yDstHei,
                       hdcDib, xSrc, ySrc, xSrcWid, ySrcHei, dwRop);
        }

    #if DBG==1 && !defined(WIN16)
    QueryPerformanceCounter((LARGE_INTEGER *)&t4);

    if (IsTagEnabled(tagTimeBltDib) && (GetAsyncKeyState(VK_SHIFT) & 0x8000))
    {
        if (fTransBlt)
            TraceTag((tagTimeBltDib, "TransBlt (%s) (%ldx%ld) took %ld+%ld=%ld us",
                fTransBlt == 1 ? "fast" : "slow", xDstWid, yDstHei,
                ((LONG)(((t2 - t1) * 1000000) / tfrq)),
                ((LONG)(((t4 - t3) * 1000000) / tfrq)),
                ((LONG)(((t2 - t1 + t4 - t3) * 1000000) / tfrq))));
        else
            TraceTag((tagTimeBltDib, "DibBlt (%ldx%ld) took %ld us",
                xDstWid, yDstHei, ((LONG)(((t4 - t3) * 1000000) / tfrq))));
    }
    #endif

Cleanup:
    if (cbSav)
    {
        memcpy(pvSav, abSav, cbSav);
    }

    if (cSetColors)
    {
        Verify(SetDIBColorTable(hdcDib, 0, cSetColors, argbOld) == (UINT)cSetColors);
    }

    if (hbmSav)
        SelectObject(hdcDib, hbmSav);
    if (hdcDib)
        ReleaseMemoryDC(hdcDib);

    if (fCritical)
        g_csImgTransBlt.Leave();
}

#endif

/*****************************************************************/
/*****************************************************************/
/*****************************************************************/

static int CALLBACK VgaPenCallback(void * pvLogPen, LPARAM lParam)
{
    LOGPEN * pLogPen = (LOGPEN *)pvLogPen;

    if (pLogPen->lopnStyle == PS_SOLID)
    {
        PALETTEENTRY ** pppe = (PALETTEENTRY **)lParam;
        PALETTEENTRY * ppe = (*pppe)++;
        COLORREF cr = pLogPen->lopnColor;

        if (cr != *(DWORD *)ppe)
        {
            TraceTag((tagPerf, "Updating VGA color %d to %08lX",
                ppe - g_peVga, cr));
            *(DWORD *)ppe = cr;
        }

        return(ppe < &g_peVga[15]);
    }

    return(1);
}

// This function differentiates between "555" and "565" 16bpp color modes, returning 15 and 16, resp.

int GetRealColorMode(HDC hdc)
{
    struct {
        BITMAPINFOHEADER bmih;
        union {
            RGBQUAD argb[256];
            DWORD   dwMasks[3];
        } u;
    } bmi;
    HBITMAP hbm;

    hbm = CreateCompatibleBitmap(hdc, 1, 1);
    if (hbm == NULL)
        return 0;

    // NOTE: The two calls to GetDIBits are INTENTIONAL.  Don't muck with this!
    bmi.bmih.biSize = sizeof(BITMAPINFOHEADER);
    bmi.bmih.biBitCount = 0;
    GetDIBits(hdc, hbm, 0, 1, NULL, (BITMAPINFO *)&bmi, DIB_RGB_COLORS);
    GetDIBits(hdc, hbm, 0, 1, NULL, (BITMAPINFO *)&bmi, DIB_RGB_COLORS);

    DeleteObject(hbm);

    if (bmi.bmih.biBitCount != 16)
        return bmi.bmih.biBitCount;

    if (bmi.bmih.biCompression != BI_BITFIELDS)
        return 15;
    
    if (bmi.u.dwMasks[0] == MASK565_0 
        && bmi.u.dwMasks[1] == MASK565_1 
        && bmi.u.dwMasks[2] == MASK565_2)
        return 16;
    else
        return 15;
}

BOOL InitImageUtil()
{
    /* Snoop around system and determine its capabilities.
     * Initialize data structures accordingly.
     */
    HDC hdc;

    HPALETTE hPal;

    hdc = GetDC(NULL);

    g_colorModeDefault = GetRealColorMode(hdc);

#ifndef UNIX
    g_crBgColor = GetSysColorQuick(COLOR_WINDOW) & 0xFFFFFF;
    g_crFgColor = GetSysColorQuick(COLOR_WINDOWTEXT) & 0xFFFFFF;
#else
    g_crBgColor = GetSysColorQuick(COLOR_WINDOW);
    g_crFgColor = GetSysColorQuick(COLOR_WINDOWTEXT);
#endif
    g_rgbBgColor.rgbRed   = GetRValue(g_crBgColor);
    g_rgbBgColor.rgbGreen = GetGValue(g_crBgColor);
    g_rgbBgColor.rgbBlue  = GetBValue(g_crBgColor);
    g_rgbFgColor.rgbRed   = GetRValue(g_crFgColor);
    g_rgbFgColor.rgbGreen = GetGValue(g_crFgColor);
    g_rgbFgColor.rgbBlue  = GetBValue(g_crFgColor);
    
#ifdef UNIX
    // For Motif colors which have a special flag in high byte
    g_rgbBgColor.rgbReserved = ((BYTE)(( g_crBgColor )>>24));
    g_rgbFgColor.rgbReserved = ((BYTE)(( g_crFgColor )>>24));
#endif

    if (GetDeviceCaps(hdc, RASTERCAPS) & RC_PALETTE)
    {
        hPal = g_hpalHalftone;

        /*
            Now the extra colors
        */

        g_wIdxBgColor = (WORD)GetNearestPaletteIndex(hPal, g_crBgColor);
        g_wIdxFgColor = (WORD)GetNearestPaletteIndex(hPal, g_crFgColor);

        /*
            Choose a transparent color that lies outside of 6x6x6 cube - we will
            replace the actual color for this right before drawing.  We are going
            to use one of the "magic colors" in the static 20 for the transparent
            color. 
        */
        g_wIdxTrans = 246;  
    }

    if (g_colorModeDefault == 4)
    {
        PALETTEENTRY * ppe = g_peVga;
        EnumObjects(hdc, OBJ_PEN, VgaPenCallback, (LONG_PTR)&ppe);
        Assert(ppe == &g_peVga[16]);
    }

    ReleaseDC(NULL, hdc);

    return TRUE;
}

/*
    Some of the extra colors in our palette may deliberately be set to
    windows system colors, so we can simulate things like transparent
    bitmaps.  If the windows system colors change, then we made need to
    fix the corresponding palette entries.
*/
#if 0
//$TODO (dinartem) Need call when fg/bg colors change
void GTR_FixExtraPaletteColors(void)
{
    COLORREF color;
    HDC hDC = GetDC(NULL);
    HPALETTE hPal = CreateHalftonePalette(hDC);

    color = PREF_GetBackgroundColor();
    colorIdxBg = GetNearestPaletteIndex(hPal,color);
    color = PREF_GetForegroundColor();
    colorIdxFg = GetNearestPaletteIndex(hPal,color);

    DeleteObject(hPal);
    ReleaseDC(NULL, hDC);
}
#endif

int GetDefaultColorMode()
{
    if (g_colorModeDefault == 0)
    {
        InitImageUtil();
    }

    #if DBG==1
    if (IsTagEnabled(tagForce4BPP))
        return(4);
    #endif

    return(g_colorModeDefault);
}

void FreeGifAnimData(GIFANIMDATA * pgad, CImgBitsDIB *pibd)
{
    GIFFRAME * pgf, * pgfNext;

    if (pgad == NULL)
        return;

    for (pgf = pgad->pgf; pgf != NULL; pgf = pgfNext)
    {
        if (pgf->pibd != pibd)
            delete pgf->pibd;
        if (pgf->hrgnVis)
            Verify(DeleteRgn(pgf->hrgnVis));
        pgfNext = pgf->pgfNext;
        MemFree(pgf);
    }
    pgad->pgf = NULL;
}

void CalcStretchRect(RECT * prectStretch, LONG wImage, LONG hImage, LONG wDisplayedImage, LONG hDisplayedImage, GIFFRAME * pgf)
{
    // set ourselves up for a stretch if the element width doesn't match that of the image

    if ((wDisplayedImage >= pgf->width - whSlop) &&
        (wDisplayedImage <= pgf->width + whSlop))
    {
        wDisplayedImage = pgf->width;
    }

    if ((hDisplayedImage >= pgf->height - whSlop) &&
        (hDisplayedImage <= pgf->height + whSlop))
    {
        hDisplayedImage = pgf->height;
    }

    if (wImage != 0)
    {
        prectStretch->left = MulDivQuick(pgf->left, wDisplayedImage, wImage);
        prectStretch->right = prectStretch->left +
                              MulDivQuick(pgf->width, wDisplayedImage, wImage);
    }
    else
    {
        prectStretch->left = prectStretch->right = pgf->left;
    }

    if (hImage != 0)
    {
        prectStretch->top = MulDivQuick(pgf->top, hDisplayedImage, hImage);
        prectStretch->bottom = prectStretch->top +
                               MulDivQuick(pgf->height, hDisplayedImage, hImage);
    }
    else
    {
        prectStretch->top = prectStretch->bottom = pgf->top;
    }
}

void getPassInfo(int logicalRowX, int height, int *pPassX, int *pRowX, int *pBandX)
{
    int passLow, passHigh, passBand;
    int pass = 0;
    int step = 8;
    int ypos = 0;

    if (logicalRowX >= height)
        logicalRowX = height - 1;
    passBand = 8;
    passLow = 0;
    while (step > 1)
    {
        if (pass == 3)
            passHigh = height - 1;
        else
            passHigh = (height - 1 - ypos) / step + passLow;
        if (logicalRowX >= passLow && logicalRowX <= passHigh)
        {
            *pPassX = pass;
            *pRowX = ypos + (logicalRowX - passLow) * step;
            *pBandX = passBand;
            return;
        }
        if (pass++ > 0)
            step /= 2;
        ypos = step / 2;
        passBand /= 2;
        passLow = passHigh + 1;
    }

    //(dmitryt) Fixing PREFIX bug, it seems we can't go here in a real life, 
    //but better put zeroes then garbage..
    *pPassX = *pRowX = *pBandX = 0;
}

CImgBits *GetPlaceHolderBitmap(BOOL fMissing)
{
    CImgBits **ppImgBits;
    CImgBitsDIB *pibd = NULL;
    HBITMAP hbm = NULL;

    ppImgBits = fMissing ? &g_pImgBitsMissing : &g_pImgBitsNotLoaded;

    if (*ppImgBits == NULL)
    {
        LOCK_GLOBALS;

        if (*ppImgBits == NULL)
        {
#ifdef WIN16
            HRSRC               hRes;
            HGLOBAL             hBmpFile;

            BYTE                *pbBits;
            int                 cbRow;

            BITMAPINFOHEADER    *lpbmih;

            UINT                ncolors;
            RGBQUAD             *lprgb;
            LONG                xWidth;
            LONG                yHeight;
            BYTE                *lpCurrent;

            // Find the Bitmap
            hRes = FindResource(g_hInstCore,(LPCWSTR)(fMissing ? IDB_MISSING : IDB_NOTLOADED), RT_BITMAP);
            if (hRes)
            {
                // Load the BMP from the resource file.
                hBmpFile = LoadResource(g_hInstCore, hRes);
                if ((hBmpFile))
                {
                    // copy out the appropriate info from the bitmap
                    lpCurrent = (BYTE *)LockResource(hBmpFile);
                    // The BITMAPFILEHEADER is striped for us, so we just start with a BITMAPINFOHEADER
                    lpbmih = (BITMAPINFOHEADER *)lpCurrent;
                    lpCurrent += sizeof(BITMAPINFOHEADER);

                    // Compute some usefull information from the bitmap
                    if (lpbmih->biPlanes != 1)
                        goto Cleanup;

                    if (    lpbmih->biBitCount != 1
                        &&  lpbmih->biBitCount != 4
                        &&  lpbmih->biBitCount != 8
                        &&  lpbmih->biBitCount != 16
                        &&  lpbmih->biBitCount != 24
                        &&  lpbmih->biBitCount != 32)
                        goto Cleanup;

                    if (lpbmih->biBitCount <= 8)
                    {
                        ncolors = 1 << lpbmih->biBitCount;

                        if (lpbmih->biClrUsed > 0 && lpbmih->biClrUsed < ncolors)
                        {
                            ncolors = lpbmih->biClrUsed;
                        }
                    }

                    if (ncolors)
                    {
                        lprgb = (RGBQUAD *)lpCurrent;
                        lpCurrent += ncolors * sizeof(RGBQUAD);
                    }

                    xWidth  = lpbmih->biWidth;
                    yHeight = lpbmih->biHeight;

                    pibd = new CImgBitsDIB();
                    if (!pibd)
                        goto Cleanup;

                    hr = THR(pibd->AllocDIB(lpbmih->biBitCount, xWidth, yHeight, lprgb, nColors, -1, TRUE));
                    if (hr)
                        goto Cleanup;

                    // Get the actual Bitmap bits
                    memcpy(pibd->GetBits(), lpCurrent, pibd->CbLine() * yHeight);

                    Cleanup:
                        UnlockResource(hBmpFile);
                        FreeResource(hBmpFile);
                }
            }

#else
            hbm = (HBITMAP) LoadImage(g_hInstCore, (LPCWSTR)(DWORD_PTR)(fMissing ? IDB_MISSING : IDB_NOTLOADED),
                                      IMAGE_BITMAP, 0, 0, LR_CREATEDIBSECTION);
            // NOTE (lmollico): bitmaps are in mshtml.dll

            pibd = new CImgBitsDIB();
            if (!pibd)
                goto Cleanup;

            Verify(!pibd->AllocCopyBitmap(hbm, FALSE, -1));

            Verify(DeleteObject(hbm));
#endif
            *ppImgBits = pibd;
            pibd = NULL;
            
Cleanup:
            if (pibd)
                delete pibd;
        }

    }

    return *ppImgBits;
}

void GetPlaceHolderBitmapSize(BOOL fMissing, SIZE * pSize)
{
    CImgBits *pib;

    pib = GetPlaceHolderBitmap(fMissing);

    pSize->cx = pib->Width();
    pSize->cy = pib->Height();
}

//+---------------------------------------------------------------------------
//
//  DrawPlaceHolder
//
//  Synopsis:   Draw the Place holder, the ALT string and the bitmap
//
//----------------------------------------------------------------------------

void DrawPlaceHolder(const CDocInfo * pdci,
                    const XHDC& hdc,
#ifdef WIN16
                    RECTL rectlImg,
#else
                    RECT rectImg,
#endif
                     TCHAR * lpString, CODEPAGE codepage, LCID lcid, SHORT sBaselineFont,
                     SIZE * psizeGrab, BOOL fMissing,
                     COLORREF fgColor, COLORREF bgColor, SIZE * psizePrint,
                     BOOL fRTL, DWORD dwFlags)
{
    LONG     xDstWid;
    LONG     yDstHei;
    LONG     xSrcWid;
    LONG     ySrcHei;
    CImgBits  *pib;
    RECT rcDst;
    RECT rcSrc; 
#ifdef WIN16
    GDIRECT  rectImg = { rectlImg.left, rectlImg.top, rectlImg.right, rectlImg.bottom };
#endif
    BOOL fDrawBlackRectForPrinting = psizePrint != NULL;

    bgColor &= 0x00FFFFFF;

    pib = GetPlaceHolderBitmap(fMissing);

    xDstWid = psizePrint ? psizePrint->cx : pib->Width();
    yDstHei = psizePrint ? psizePrint->cy : pib->Height();
    xSrcWid = pib->Width();
    ySrcHei = pib->Height();

    if ((rectImg.right - rectImg.left >= 10) &&
        (rectImg.bottom - rectImg.top >= 10))
    {
        if (fDrawBlackRectForPrinting)
        {
            COLORREF crBlack = 0;  // zero is black
            HBRUSH   hBrush = 0;

            hBrush = CreateSolidBrush(crBlack);
            if (hBrush)
            {
                FrameRect(hdc, &rectImg, hBrush);
                DeleteObject(hBrush);
            }
            else
                fDrawBlackRectForPrinting = FALSE;
        }

        if (!fDrawBlackRectForPrinting)
        {
            if ((bgColor == 0x00ffffff) || (bgColor == 0x00000000))
            {
                DrawEdge(hdc, &rectImg, BDR_SUNKENOUTER, BF_TOPLEFT);
                DrawEdge(hdc, &rectImg, BDR_SUNKENINNER, BF_BOTTOMRIGHT);
            }
            else
            {
                DrawEdge(hdc, &rectImg, BDR_SUNKENOUTER, BF_RECT);
            }
        }
    }

    if (lpString != NULL)
    {
        RECT rc;
        BOOL fGlyph = FALSE;
        UINT cch = _tcslen(lpString);

        rc.left = rectImg.left + xDstWid + 2 * psizeGrab->cx;
        rc.right = rectImg.right - psizeGrab->cx;
        rc.top = rectImg.top + psizeGrab->cy;
        rc.bottom = rectImg.bottom - psizeGrab->cy;

        CIntlFont intlFont(pdci, hdc, codepage, lcid, sBaselineFont, lpString);
        SetTextColor(hdc, fgColor);

        if(!fRTL)
        {
            for(UINT i = 0; i < cch; i++)
            {
                WCHAR ch = lpString[i];
                if(ch >= 0x300 && IsGlyphableChar(ch))
                {
                    fGlyph = TRUE;
                    break;
                }
            }
        }

        // send complex text or text layed out right-to-left
        // to be drawn through Uniscribe
        if(fGlyph || fRTL)
        {
            HRESULT hr;
            UINT taOld = 0;
            UINT fuOptions = ETO_CLIPPED;

            if(fRTL)
            {
                taOld = GetTextAlign(hdc);
                SetTextAlign(hdc, TA_RTLREADING | TA_RIGHT);
                fuOptions |= ETO_RTLREADING;
            }

            extern HRESULT LSUniscribeTextOut(const XHDC& hdc, 
                                           int iX, 
                                           int iY, 
                                           UINT uOptions, 
                                           CONST RECT *prc, 
                                           LPCTSTR pString, 
                                           UINT cch,
                                           int *piDx); 

            hr = LSUniscribeTextOut(hdc,
                                    !fRTL ? rc.left : rc.right, 
                                    rc.top,
                                    fuOptions,
                                    &rc,
                                    lpString,
                                    cch,
                                    NULL);

            if(fRTL)
                SetTextAlign(hdc, taOld);
        }
        else
        {
            DrawTextInCodePage(WindowsCodePageFromCodePage(codepage),
                hdc, lpString, -1, &rc, DT_LEFT | DT_WORDBREAK | DT_NOPREFIX);
        }
    }

    if (((rectImg.right - rectImg.left) <= 2 * psizeGrab->cx) ||
        ((rectImg.bottom - rectImg.top) <= 2 * psizeGrab->cy))
        return;

    InflateRect(&rectImg, -psizeGrab->cx, -psizeGrab->cy);

    if (xDstWid > rectImg.right - rectImg.left)
    {
        xSrcWid = MulDivQuick(xSrcWid, rectImg.right - rectImg.left, xDstWid);
        xDstWid = rectImg.right - rectImg.left;
    }
    if (yDstHei > rectImg.bottom - rectImg.top)
    {
        ySrcHei = MulDivQuick(ySrcHei, rectImg.bottom - rectImg.top, yDstHei);
        yDstHei = rectImg.bottom - rectImg.top;
    }

    rcDst.left = rectImg.left;
    rcDst.top = rectImg.top;
    rcDst.right = rcDst.left + xDstWid;
    rcDst.bottom = rcDst.top + yDstHei;

    rcSrc.left = 0;
    rcSrc.top = 0;
    rcSrc.right = xSrcWid;
    rcSrc.bottom = ySrcHei;

    pib->StretchBlt(hdc, &rcDst, &rcSrc, SRCCOPY, dwFlags);
}

int Union(int _yTop, int _yBottom, BOOL fInvalidateAll, int yBottom)
{
    if (    (_yTop != -1)
        &&  (   fInvalidateAll
            ||  (   (_yBottom >= _yTop)
                &&  (yBottom >= _yTop)
                &&  (yBottom <= _yBottom))
            ||  (   (_yBottom < _yTop)
                &&  (   (yBottom >= _yTop)
                     || (yBottom <= _yBottom))
                )))
    {
        return -1;
    }
    return _yTop;
}

#ifdef OLDIMAGECODE // now replaced by CImgBitsDIB

ULONG ImgDibSize(HBITMAP hbm)
{
    DIBSECTION ds;

    if (hbm && GetObject(hbm, sizeof(DIBSECTION), &ds))
        return(ds.dsBmih.biWidth * ds.dsBmih.biHeight *
            ds.dsBmih.biBitCount / 8);
    else
        return(0);
}

HBITMAP ImgCreateDib(LONG xWid, LONG yHei, BOOL fPal, int cBitsPerPix,
    int cEnt, PALETTEENTRY * ppe, BYTE ** ppbBits, int * pcbRow, BOOL fMono)
{
    struct {
        BITMAPINFOHEADER bmih;
        union {
            RGBQUAD argb[256];
            WORD aw[256];
            DWORD adw[3];
        } u;
    } bmi;
    int i;

    if (cBitsPerPix != 8)
        fPal = FALSE;

    bmi.bmih.biSize          = sizeof(BITMAPINFOHEADER);
    bmi.bmih.biWidth         = xWid;
    bmi.bmih.biHeight        = yHei;
    bmi.bmih.biPlanes        = 1;
    bmi.bmih.biBitCount      = (cBitsPerPix == 15) ? 16 : cBitsPerPix;
    bmi.bmih.biCompression   = (cBitsPerPix == 16) ? BI_BITFIELDS : BI_RGB;
    bmi.bmih.biSizeImage     = 0;
    bmi.bmih.biXPelsPerMeter = 0;
    bmi.bmih.biYPelsPerMeter = 0;
    bmi.bmih.biClrUsed       = 0;
    bmi.bmih.biClrImportant  = 0;

    if (cBitsPerPix == 1)
    {
        bmi.bmih.biClrUsed = 2;

        if (cEnt > 2)
            cEnt = 2;

        if (cEnt > 0)
        {
            bmi.bmih.biClrImportant = cEnt;
            CopyColorsFromPaletteEntries(bmi.u.argb, ppe, cEnt);
        }
        else
        {
            if (fMono)  //IEUNIX monochrome.
            {
                bmi.u.argb[0].rgbBlue = 0; //foreground color
#ifdef BIG_ENDIAN
                *((DWORD*)&bmi.u.argb[1]) = 0xffffff00;
#else
                *((DWORD*)&bmi.u.argb[1]) = 0x00ffffff;
#endif
            }
            else
            {
                bmi.u.argb[0] = g_rgbBgColor;
                bmi.u.argb[1] = g_rgbFgColor;
            }
        }
    }
    else if (cBitsPerPix == 4)
    {
        bmi.bmih.biClrUsed = 16;

        if (cEnt > 16)
            cEnt = 16;

        if (cEnt > 0)
        {
            bmi.bmih.biClrImportant = cEnt;
            CopyColorsFromPaletteEntries(bmi.u.argb, ppe, cEnt);
        }
        else
        {
            bmi.bmih.biClrImportant = 16;
            CopyColorsFromPaletteEntries(bmi.u.argb, g_peVga, 16);
        }
    }
    else if (cBitsPerPix == 8)
    {
        if (fPal)
        {
            bmi.bmih.biClrUsed = 256;

            for (i = 0; i < 256; ++i)
                bmi.u.aw[i] = i;
        }
        else
        {
            if (cEnt > 0 && cEnt < 256)
            {
                bmi.bmih.biClrUsed = cEnt;
                bmi.bmih.biClrImportant = cEnt;
            }
            else
                bmi.bmih.biClrUsed = 256;

            if (cEnt && ppe)
            {
                CopyColorsFromPaletteEntries(bmi.u.argb, ppe, cEnt);
            }
        }
    }
    else if (cBitsPerPix == 16)
    {
        bmi.u.adw[0] = MASK565_0;
        bmi.u.adw[1] = MASK565_1;
        bmi.u.adw[2] = MASK565_2;
    }

    return ImgCreateDibFromInfo((BITMAPINFO *)&bmi, fPal ? DIB_PAL_COLORS : DIB_RGB_COLORS, ppbBits, pcbRow);
}

HBITMAP ImgCreateDibFromInfo(BITMAPINFO * pbmi, UINT wUsage, BYTE ** ppbBits, int * pcbRow)
{
    HDC 	hdcMem = NULL;
    HBITMAP	hbm = NULL;
    BYTE * 	pbBits;
    int 	cbRow;
    LONG    xWid, yHei;
    int 	cBitsPerPix;

    xWid = pbmi->bmiHeader.biWidth;
    yHei = pbmi->bmiHeader.biHeight;
    cBitsPerPix = pbmi->bmiHeader.biBitCount;
    
    Assert(cBitsPerPix == 1 || cBitsPerPix == 4 ||
        cBitsPerPix == 8 || cBitsPerPix == 16 || cBitsPerPix == 24 || cBitsPerPix == 32);
    Assert(xWid > 0 && yHei > 0);

	cbRow = ((xWid * cBitsPerPix + 31) & ~31) / 8;

    if (pcbRow)
    {
        *pcbRow = cbRow;
    }

    hdcMem = GetMemoryDC();

    if (hdcMem == NULL)
        goto Cleanup;

    hbm = CreateDIBSection(hdcMem, pbmi, wUsage, (void **)&pbBits, NULL, 0);

    if (hbm && ppbBits)
    {
        *ppbBits = pbBits;
    }

    #ifdef PERFMETER
    if (hbm)
    {
        MtAdd(Mt(DIBSection), +1, ImgDibSize(hbm));
    }
    #endif

    // Fill the bits with garbage so that the client doesn't assume that
    // the DIB gets created cleared (on WinNT it does, on Win95 it doesn't).

    #if DBG==1 && !defined(WIN16)
    if (hbm && pbBits)
        for (int c = cbRow * yHei; --c >= 0; ) pbBits[c] = (BYTE)c;
    #endif

Cleanup:
    if (hdcMem)
        ReleaseMemoryDC(hdcMem);

    return(hbm);
}

void ImgDeleteDib(HBITMAP hbm)
{
    if (hbm)
    {
        #ifdef PERFMETER
        MtAdd(Mt(DIBSection), -1, -(LONG)ImgDibSize(hbm));
        #endif

        Verify(DeleteObject(hbm));
    }
}

HBITMAP ComputeTransMask(HBITMAP hbmDib, BOOL fPal, BYTE bTrans)
{
    DIBSECTION      ds;
    HBITMAP         hbmMask;
    DWORD *         pdw;
    DWORD           dwBits;
    BYTE *          pb;
    int             cb;
    int             cbPad;
    int             x, y, b;
#ifdef UNIX
    PALETTEENTRY    ape[2] = { { 0, 0, 0, 0 }, 
                               { 0, 255, 255, 255 } };
#else
    PALETTEENTRY    ape[2] = { { 0, 0, 0, 0 }, 
                               { 255, 255, 255, 0 } };
#endif
    BOOL            fTrans = FALSE;

    if (    !GetObject(hbmDib, sizeof(DIBSECTION), &ds)
        ||  ds.dsBmih.biBitCount != 8)
        return(NULL);

    pb    = (BYTE *)ds.dsBm.bmBits;
    cbPad = ((ds.dsBmih.biWidth + 3) & ~3) - ds.dsBmih.biWidth;

    if (fPal)
    {
        bTrans = (BYTE)g_wIdxTrans;
    }

    for (y = ds.dsBmih.biHeight; y-- > 0; pb += cbPad)
        for (x = ds.dsBmih.biWidth; x-- > 0; )
            if (*pb++ == bTrans)
                goto trans;

    return((HBITMAP)0xFFFFFFFF);

trans:

    hbmMask = ImgCreateDib(ds.dsBmih.biWidth, ds.dsBmih.biHeight, FALSE, 1,
        2, ape, &pb, &cb);

    if (hbmMask == NULL)
        return(NULL);

    pdw   = (DWORD *)ds.dsBm.bmBits;
    cbPad = cb - (ds.dsBmih.biWidth + 7) / 8;

    for (y = ds.dsBmih.biHeight; y-- > 0; pb += cbPad)
    {
        for (x = ds.dsBmih.biWidth; x > 0; x -= 8)
        {
            dwBits = *pdw++; b = 0;
#ifdef UNIX
            b |= ((BYTE)(dwBits >> 24) != bTrans); b <<=1;
            b |= ((BYTE)(dwBits >> 16) != bTrans); b <<=1;
            b |= ((BYTE)(dwBits >> 8) != bTrans); b <<=1;
            b |= ((BYTE)dwBits != bTrans); b <<= 1;
#else
            b |= ((BYTE)dwBits != bTrans); b <<= 1; dwBits >>= 8;
            b |= ((BYTE)dwBits != bTrans); b <<= 1; dwBits >>= 8;
            b |= ((BYTE)dwBits != bTrans); b <<= 1; dwBits >>= 8;
            b |= ((BYTE)dwBits != bTrans); b <<= 1;
#endif
            if (x <= 4)
                b = (b << 3) | 0xF;
            else
            {
                dwBits = *pdw++;
#ifdef UNIX
                b |= ((BYTE)(dwBits >> 24) != bTrans); b <<= 1;
                b |= ((BYTE)(dwBits >> 16) != bTrans); b <<= 1;
                b |= ((BYTE)(dwBits >> 8 ) != bTrans); b <<= 1;
                b |= ((BYTE)dwBits != bTrans);
#else
                b |= ((BYTE)dwBits != bTrans); b <<= 1; dwBits >>= 8;
                b |= ((BYTE)dwBits != bTrans); b <<= 1; dwBits >>= 8;
                b |= ((BYTE)dwBits != bTrans); b <<= 1; dwBits >>= 8;
                b |= ((BYTE)dwBits != bTrans);
#endif
            }

            *pb++ = (BYTE)b;
        }
    }

    if (fPal)
    {
        pb = (BYTE *)ds.dsBm.bmBits - 1;
        cb = ((ds.dsBmih.biWidth + 3) & ~3) * ds.dsBmih.biHeight;
        b = 255;        // want white index

        while (--cb >= 0)
            if (*++pb == bTrans)
                *pb = b;
    }
    else
    {
        HDC hdcMem = GetMemoryDC();

        if (hdcMem == NULL)
        {
            ImgDeleteDib(hbmMask);
            return(NULL);
        }

        HBITMAP hbmSav = (HBITMAP)SelectObject(hdcMem, hbmDib);
        RGBQUAD rgbWhite = { 255, 255, 255, 0 };
        Verify(SetDIBColorTable(hdcMem, bTrans, 1, &rgbWhite) == 1);
        SelectObject(hdcMem, hbmSav);
        ReleaseMemoryDC(hdcMem);
    }

    return(hbmMask);
}

#endif

void ComputeFrameVisibility(IMGANIMSTATE *pImgAnimState, LONG xWidth, LONG yHeight, LONG xDispWid, LONG yDispHei)
{
    GIFFRAME *  pgf;
    GIFFRAME *  pgfClip;
    GIFFRAME *  pgfDraw = pImgAnimState->pgfDraw;
    GIFFRAME *  pgfDrawNext = pgfDraw->pgfNext;
    RECT        rectCur;

    // determine which frames are visible or partially visible at this time

    for (pgf = pImgAnimState->pgfFirst; pgf != pgfDrawNext; pgf = pgf->pgfNext)
    {
        if (pgf->hrgnVis != NULL)
        {
            DeleteRgn( pgf->hrgnVis );
            pgf->hrgnVis = NULL;
            pgf->bRgnKind = NULLREGION;
        }

        // This is kinda complicated.
        // We only want to subtract out this frame from its predecessors under certain
        // conditions.
        // If it's the current frame, then all we care about is transparency.
        // If its a preceding frame, then any bits from frames that preceded should
        // be clipped out if it wasn't transparent, but also wasn't to be replaced by
        // previous pixels.
        if (((pgf == pgfDraw) && !pgf->bTransFlags) ||
            ((pgf != pgfDraw) && !pgf->bTransFlags && (pgf->bDisposalMethod != gifRestorePrev)) ||
            ((pgf != pgfDraw) && (pgf->bDisposalMethod == gifRestoreBkgnd)))
        {
            // clip this rgn out of those that came before us if it's not trasparent,
            // or if it leaves a background-colored hole and is not the current frame.
            // The current frame, being current, hasn't left a background-colored hole yet.
            for (pgfClip = pImgAnimState->pgfFirst; pgfClip != pgf; pgfClip = pgfClip->pgfNext)
            {
                if (pgfClip->hrgnVis != NULL)
                {
                    if (pgf->hrgnVis == NULL)
                    {
                        // Since we'll use these regions to clip when drawing, we need them mapped
                        // for destination stretching.
                        CalcStretchRect(&rectCur, xWidth, yHeight, xDispWid, yDispHei, pgf);

                        pgf->hrgnVis = CreateRectRgnIndirect(&rectCur);
                        pgf->bRgnKind = SIMPLEREGION;
                    }

                    pgfClip->bRgnKind = (BYTE)CombineRgn(pgfClip->hrgnVis, pgfClip->hrgnVis, pgf->hrgnVis, RGN_DIFF);
                }
            }
        } // if we need to clip this frame out of its predecessor(s)

        // If this is a replace with background frame preceding the current draw frame,
        // then it is not visible at all, so set the visibility traits so it won't be drawn.
        if ((pgf != pgfDraw) && (pgf->bDisposalMethod >= gifRestoreBkgnd))
        {
            if (pgf->hrgnVis != NULL)
            {
                DeleteRgn(pgf->hrgnVis);
                pgf->hrgnVis = NULL;
                pgf->bRgnKind = NULLREGION;
            }
        }
        else if (pgf->hrgnVis == NULL)
        {
            // Since we'll use these regions to clip when drawing, we need them mapped
            // for destination stretching.
            CalcStretchRect(&rectCur, xWidth, yHeight, xDispWid, yDispHei, pgf);

            pgf->hrgnVis = CreateRectRgnIndirect(&rectCur);
            pgf->bRgnKind = SIMPLEREGION;
        }

    } // for check each frame's visibility
}

//
// Compute bounds of metafile content for PlayEnhMetaFile().
//
// Q: Why call this? Why can't I just use rclBounds?
// 
// A: Any code dealing with metafiles need to account for aspect ratio adjustment.
//    For a 1280x1024 monitor, ratio is set to 4x4.27. If no adjustment is made for a
//    metafile created for screen, its proportions are wrong when displayed.
//
CRect ComputeEnhMetaFileBounds(HENHMETAFILE hemf)
{
    ENHMETAHEADER emfh = {EMR_HEADER, sizeof(emfh)};
    if (GetEnhMetaFileHeader(hemf, sizeof(emfh), &emfh))
    {
        return ComputeEnhMetaFileBounds(&emfh);
    }
    return CRect(CRect::CRECT_EMPTY);
}

CRect ComputeEnhMetaFileBounds(ENHMETAHEADER *pemh)
{
    CRect rcBounds(*(RECT *)&pemh->rclFrame);

    // Calculate bounds from rclFrame using device aspect ratio
    rcBounds.left   = MulDiv(pemh->rclFrame.left,   pemh->szlDevice.cx, pemh->szlMillimeters.cx * 100);
    rcBounds.top    = MulDiv(pemh->rclFrame.top,    pemh->szlDevice.cy, pemh->szlMillimeters.cy * 100);
    rcBounds.right  = MulDiv(pemh->rclFrame.right,  pemh->szlDevice.cx, pemh->szlMillimeters.cx * 100);
    rcBounds.bottom = MulDiv(pemh->rclFrame.bottom, pemh->szlDevice.cy, pemh->szlMillimeters.cy * 100);

    return rcBounds;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\download\imgpeg.cxx ===
#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)
#include "img.hxx"

#if 0

extern "C" {
#include "pic.h"
#include "errors.h"
}

typedef struct tagBITMAPINFO_256 {
	BITMAPINFOHEADER	bmiHeader;
	RGBQUAD				bmiColors[256];
} BITMAPINFO_256;

class CImgFiltPeg : public CImgFilt
{
public:
    typedef CImgFilt super;

    CImgFiltPeg(CRITICAL_SECTION * pcs) : CImgFilt(pcs) {}

    // CImgFilt methods

    virtual BITMAPINFO * Decode();

    // CImgFiltPeg methods

	void GetColors();
    BITMAPINFO * FinishDithering();
	void ReadImage();
	void MakePalette();
	
    virtual void VStretchDIBits(
        HDC  hdc,           // handle of device context
        int  XDest,         // x-coordinate of upper-left corner of dest. rect.
        int  YDest,         // y-coordinate of upper-left corner of dest. rect.
        int  nDestWidth,    // width of destination rectangle
        int  nDestHeight,   // height of destination rectangle
        int  XSrc,          // x-coordinate of upper-left corner of source rect.
        int  YSrc,          // y-coordinate of upper-left corner of source rect.
        int  nSrcWidth,     // width of source rectangle
        int  nSrcHeight,    // height of source rectangle
        UINT  iUsage,       // usage
        DWORD  dwRop        // raster operation code
        );

    // Data members

    UINT _nColors;
    UINT _nPasses;

	BITMAPINFO *_pbmi;

	PIC_PARM pic;
};

void CImgFiltPeg::GetColors()
{
		_nColors = g_cHalftoneEntries;
		memcpy(_ape, g_peHalftone, sizeof(_ape));
}

#define LINEBYTES(_wid,_bits) ((((_wid)*(_bits) + 31) / 32) * 4)

void CImgFiltPeg::ReadImage()
{
	// assume the worst for now...
	_pbBits = NULL;
}

BITMAPINFO * CImgFiltPeg::Decode()
{
	BYTE byBuf[4096];
	ULONG ulSize, cbRead, ulLine;
	int i;
	
	// setup to read JPEG
	memset(&pic, 0, sizeof(pic));
	pic.ParmSize = sizeof(pic);
	pic.ParmVer = CURRENT_PARMVER;
	pic.ParmVerMinor = 1;

	// fill in Get queue

	pic.Get.Start = pic.Get.Front = byBuf;
	pic.Get.End = pic.Get.Rear = byBuf + sizeof(byBuf);
	if (!Read((unsigned char *)&byBuf, sizeof(byBuf), &cbRead))
		return NULL;
	
	pic.u.QRY.BitFlagsReq = QBIT_BIWIDTH | QBIT_BIHEIGHT;
	
	if (!PegasusQuery(&pic)) 
		return NULL;

	_xWidth = pic.Head.biWidth;
	_yHeight = abs(pic.Head.biHeight);
	_lTrans = -1;

    // Post WHKNOWN
    OnSize(_xWidth, _yHeight, -1 /* lTrans */);

    // Do the color stuff
	GetColors();
	MakePalette();

	// allocate space for the bitmap
	ulLine = LINEBYTES(_xWidth, _pbmi->bmiHeader.biBitCount);
	ulSize = ulLine * _yHeight;
	_pbBits = (BYTE *)MemAlloc(ulSize);
	if (!_pbBits)
		return NULL;

	// setup for the decode phase
	memset(&pic, 0, sizeof(pic));
	pic.ParmSize = sizeof(pic);
	pic.ParmVer = CURRENT_PARMVER;
	pic.ParmVerMinor = 1;
	pic.Get.Start = pic.Get.Front = byBuf;
	pic.Get.End = pic.Get.Rear = byBuf + cbRead;
	pic.Put.QFlags = Q_REVERSE;
	pic.Put.Start = _pbBits;
	pic.Put.End = _pbBits + ulSize;
	pic.Put.Front = pic.Put.Rear = pic.Put.End - 1;
	pic.Op = OP_EXPJ;
	pic.u.S2D.DibSize = _pbmi->bmiHeader.biBitCount;
    pic.u.S2D.PicFlags = PF_Dither | PF_NoCrossBlockSmoothing;
//    pic.u.S2D.PicFlags = PF_Dither;
	pic.Head.biClrUsed = _nColors;
	pic.Head.biClrImportant = 0;
	for (i = 0; i < (int)_nColors; ++i) {
		pic.ColorTable[i].rgbRed = _ape[i].peRed;
		pic.ColorTable[i].rgbGreen = _ape[i].peGreen;
		pic.ColorTable[i].rgbBlue = _ape[i].peBlue;
		pic.ColorTable[i].rgbReserved = 0;
	}
	
	// do the decode loop
	RESPONSE Response;
	LONG lStatus = ERR_NONE;
	
	Response = Pegasus(&pic, REQ_INIT);
	if (Response != RES_DONE) {
		DebugBreak();
		MemFree(_pbBits);
		_pbBits = NULL;
		return NULL;
	}

	Response = Pegasus(&pic, REQ_EXEC);

	while ((lStatus == ERR_NONE) && (Response != RES_DONE))
	{
		switch (Response) 
		{
			case RES_ERR:
				lStatus = pic.Status;
				break;

			case RES_GET_NEED_DATA:
				if (pic.Get.Rear == pic.Get.End
					&& pic.Get.Front > pic.Get.Start) 
				{
					if (!Read((unsigned char *)pic.Get.Start,
								pic.Get.Front - pic.Get.Start - 1)) 
						lStatus = ERR_BAD_READ;

					pic.Get.Rear = pic.Get.Front - 1;
				} 
				else if (pic.Get.Rear < pic.Get.End)
				{
					if (!Read((unsigned char *)pic.Get.Rear,
						pic.Get.End - pic.Get.Rear))
						lStatus = ERR_BAD_READ;

					pic.Get.Rear = pic.Get.End;

					if (pic.Get.Start != pic.Get.Front)
					{
						if (!Read((unsigned char *)pic.Get.Start,
								pic.Get.Front - pic.Get.Start - 1))
							lStatus = ERR_BAD_READ;

						pic.Get.Rear = pic.Get.Front - 1;
					}
				}
				break;
				
			default:
				DebugBreak();
				break;
		}

		// send a progressive render message
		_yBottom = (pic.Put.End - pic.Put.Rear) / ulLine;
		OnProg(FALSE, IMGBITS_PARTIAL);

		if (lStatus == ERR_NONE)
			Response = Pegasus(&pic, REQ_CONT);
	}


	if (lStatus != ERR_NONE) 
	{
		MemFree(_pbBits);
		_pbBits = NULL;
		return NULL;
	}

	OnProg(TRUE, IMGBITS_TOTAL);

	// return the info ptr
    return _pbmi;
}

CImgFilt * ImgFiltCreatePeg(CRITICAL_SECTION * pcs)
{
    return(new CImgFiltPeg(pcs));
}

BITMAPINFO *
CImgFiltPeg::FinishDithering()
{
#if 0
    if (GetColorMode() == 8)
    {
        if (x_Dither(_pbBits, _ape, _xWidth, _yHeight, _lTrans))
            return NULL;
    }
#endif
    return _pbmi;
}

void
CImgFiltPeg::MakePalette()
{
    if (GetColorMode() == 8)
    {
    	_pbmi = BIT_Make_DIB_PAL_Header(_xWidth, _yHeight);
    }
    else
    {
        if (GetColorMode() == 4)
        {
            _pbmi = BIT_Make_DIB_RGB_Header_VGA(_xWidth, _yHeight);
        }
        else
        {
        /* true color display */
            _pbmi = BIT_Make_DIB_RGB_Header_24BIT(_xWidth, _yHeight);
        }
    }
}

void
CImgFiltPeg::VStretchDIBits(
    HDC  hdc,   // handle of device context
    int  XDest, // x-coordinate of upper-left corner of dest. rect.
    int  YDest, // y-coordinate of upper-left corner of dest. rect.
    int  nDestWidth,    // width of destination rectangle
    int  nDestHeight,   // height of destination rectangle
    int  XSrc,  // x-coordinate of upper-left corner of source rect.
    int  YSrc,  // y-coordinate of upper-left corner of source rect.
    int  nSrcWidth, // width of source rectangle
    int  nSrcHeight,    // height of source rectangle
    UINT  iUsage,   // usage
    DWORD  dwRop    // raster operation code
   )
{
    if ((nSrcWidth == 0) || (nSrcHeight == 0))
        return;

    ImgBlt(hdc, XDest, YDest, nDestWidth, nDestHeight, 0, 0,
        _xWidth, _yHeight, _pbBits, _pbmi, NULL, -1, iUsage, dwRop, FALSE);
}

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\download\imgxbm.cxx ===
//+------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1992 - 1996.
//
//  File:       imgxbm.cxx
//
//  Contents:   Image filter for .xbm files
//
//-------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_IMG_HXX_
#define X_IMG_HXX_
#include "img.hxx"
#endif

#ifndef X_IMGBITS_HXX_
#define X_IMGBITS_HXX_
#include "imgbits.hxx"
#endif

#define XX_DMsg(x, y)

#define MAX_LINE 512

unsigned const char nibMask[8] =
{
    1, 2, 4, 8, 16, 32, 64, 128
};

MtDefine(CImgTaskXbm, Dwn, "CImgTaskXbm")

class CImgTaskXbm : public CImgTask
{

public:

    DECLARE_MEMCLEAR_NEW_DELETE(Mt(CImgTaskXbm))

    typedef CImgTask super;
    virtual void Decode(BOOL *pfNonProgressive);
};

static
char * next_token(char ** ppsz)
{
    char * pszBeg = *ppsz;
    char * pszEnd;

    // Skip leading whitespace, if any

    while (*pszBeg == ' ' || *pszBeg == '\t')
        ++pszBeg;

    if (*pszBeg == 0)
    {
        *ppsz = NULL;
        return(NULL);
    }

    // Find end of token
    
    pszEnd = pszBeg;

    while (*pszEnd && *pszEnd != ' ' && *pszEnd != '\t')
        ++pszEnd;

    if (*pszEnd)
        *pszEnd++ = 0;
        
    *ppsz = pszEnd;

    return(pszBeg);
}

void CImgTaskXbm::Decode(BOOL *pfNonProgressive)
{
    char line[MAX_LINE+2], *name_and_type;
    char *t;
    unsigned char *ptr;
    long bytes_per_line, version10p, raster_length, padding, win_extra_bytes_per_line;
    int bytes, temp = 0, value;
    int Ncolors, charspp, xpmformat;
    int line_idx = 0;
    char lookahead = 0;
    int n;
    char *tok;
    char *end;
    char *pszTok;
    CImgBitsDIB *pibd;

    *pfNonProgressive = TRUE;

    _xWid = 0;
    _yHei = 0;
    Ncolors = 0;
    charspp = 0;
    xpmformat = 0;
    for (;;)
    {
        line_idx = 0;
        if (lookahead)
        {
            line[0] = lookahead;
            lookahead = 0;
            line_idx = 1;
        }

        for (; line_idx < MAX_LINE; line_idx++)
        {
            if (!Read(&line[line_idx], 1))
                return;
            if (line[line_idx] == '\n' || line[line_idx] == '\r' || line[line_idx] == '{')
            {
                if (!Read(&line[line_idx], 1))
                    return;
                if (line[line_idx] != '\n' && line[line_idx] != '\r')
                    lookahead = line[line_idx];
                break;
            }
        }
        line[line_idx] = '\0';

        pszTok = line;
        tok = next_token(&pszTok);
        if (!tok)
            return;
        if (!strcmp(tok, "#define"))
        {
            name_and_type = next_token(&pszTok);
            if (!name_and_type)
                continue;
            if (NULL == (t = strrchr(name_and_type, '_')))
                t = name_and_type;
            else
                t++;

            tok = next_token(&pszTok);
            if (!tok)
                continue;
            value = strtol(tok, &end, 10);

            if (!strcmp("width", t))
                _xWid = value;
            else if (!strcmp("height", t))
                _yHei = value;
            else if (!strcmp("ncolors", t))
                Ncolors = value;
            else if (!strcmp("pixel", t))
                charspp = value;
            continue;
        }
        if (!strcmp(tok, "static"))
        {
            t = next_token(&pszTok);
            if (!t)
                continue;
            if (!strcmp(t, "unsigned"))
            {
                t = next_token(&pszTok);
                if (!t)
                    continue;
            }
            if (!strcmp(t, "short"))
            {
                version10p = 1;
                break;
            }
            else if (!strcmp(t, "char"))
            {
                version10p = 0;
                t = next_token(&pszTok);
                if (*t == '*')
                    xpmformat = 1;
                break;
            }
        }
        else
            continue;
    }
    if (version10p)
    {
        XX_DMsg(DBG_IMAGE, ("Don't do old version 10p xbm images!\n"));
        return;
    }
    if (xpmformat)
    {
        XX_DMsg(DBG_IMAGE, ("Can't Handle XPM format inlined images!\n"));
        return;
    }
    if (_xWid <= 0 || _xWid > 0x7FFF)
    {
        XX_DMsg(DBG_IMAGE, ("Can't read image w <= 0 or > 0x7FFF !\n"));
        return;
    }
    if (_yHei <= 0 || _yHei > 0x7FFF)
    {
        XX_DMsg(DBG_IMAGE, ("Can't read image h <= 0 or > 0x7FFF !\n"));
        return;
    }
    padding = 0;
    if (((_xWid % 16) >= 1) && ((_xWid % 16) <= 8) && version10p)
    {
        padding = 1;
    }
    bytes_per_line = ((_xWid + 7) / 8) + padding;
    if (bytes_per_line % 4)
        win_extra_bytes_per_line = (4 - (bytes_per_line % 4)) % 4;    // 0-3, extra padding for long boundaries.

    else
        win_extra_bytes_per_line = 0;
    raster_length = bytes_per_line * _yHei;

    pibd = new CImgBitsDIB();
    if (!pibd)
        return;

    if (pibd->AllocMaskOnly(_xWid, _yHei))
    {
        goto abort;
    }

    OnSize(_xWid, _yHei, -1);

    line_idx = 0;
    if (lookahead)
    {
        line_idx = 1;
        line[0] = lookahead;
    }

    ptr = (BYTE *)pibd->GetMaskBits();
    
    {
        /* TODO UNIX  gui/x_xbm.c has some bReverseBitmap stuff in it 
        **  that might have to be moved in here.  It only affects code 
        ** in this block.
        */
        long cnt = 0;
#ifndef _MAC
        ptr += (_yHei - 1) * (bytes_per_line + win_extra_bytes_per_line);
#endif
        for (bytes = 0; bytes < raster_length; bytes++)
        {
            if (line_idx == 0)
            {
                for (;;)
                {
                    if (!Read(&line[0], 1))
                        goto abort;
                    if (line[0] != '\r' && line[0] != '\n')
                    {
                        line_idx = 1;
                        break;
                    }
                }
            }
            for (;;)
            {
                if (!Read(&line[line_idx], 1))
                {
                    if (line_idx == 0)
                        goto abort;
                    break;
                }
                if (line[line_idx] == ',' || line[line_idx] == '}')
                {
                    break;
                }
                if (line_idx < MAX_LINE) line_idx++;
            }
            line[line_idx] = '\0';
            value = strtol(line, &end, 16);
            line_idx = 0;

            for (n = 0, temp = 0; n < 8; n++)
            {
                temp += (value & 0x01) << (7 - n);
                value = value >> 1;
            }
            value = temp & 0xff;
            *ptr++ = (unsigned char) value;
            if (++cnt == bytes_per_line)
            {
                for (cnt = 0; cnt < win_extra_bytes_per_line; cnt++)
                    *ptr++ = (unsigned char) 0;
#ifndef _MAC
                ptr -= 2 * (bytes_per_line + win_extra_bytes_per_line);
#endif
                cnt = 0;
            }
        }
    }

#ifdef _MAC
    pibd->ReleaseMaskBits();
#endif

    _ySrcBot = -1;
    _pImgBits = pibd;
    return;

abort:
    delete pibd;
    return;
}

CImgTask * NewImgTaskXbm()
{
    return(new CImgTaskXbm);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\inetcore\mshtml\src\site\download\imgload.cxx ===
//+------------------------------------------------------------------------
//
//  Microsoft Forms
//  Copyright (C) Microsoft Corporation, 1992 - 1997.
//
//  File:       imgload.cxx
//
//  Contents:   CImgLoad
//              CImgTask
//              CImgTaskExec
//
//-------------------------------------------------------------------------

#include "headers.hxx"

#pragma MARK_DATA(__FILE__)
#pragma MARK_CODE(__FILE__)
#pragma MARK_CONST(__FILE__)

#ifndef X_IMG_HXX_
#define X_IMG_HXX_
#include "img.hxx"
#endif

#ifndef X_MSHTMLRC_H_
#define X_MSHTMLRC_H_
#include "mshtmlrc.h"
#endif

#ifndef X_W95FIBER_H_
#define X_W95FIBER_H_
#include "w95fiber.h"
#endif

#ifndef X_PRGSNK_H_
#define X_PRGSNK_H_
#include <prgsnk.h>
#endif

#ifndef X_SWITCHES_HXX_
#define X_SWITCHES_HXX_
#include "switches.hxx"
#endif

// Debugging ------------------------------------------------------------------

PerfDbgTag(tagImgLoad,      "Dwn", "Trace CImgLoad")
PerfDbgTag(tagImgTask,      "Dwn", "Trace CImgTask")
PerfDbgTag(tagImgTaskIO,    "Dwn", "Trace CImgTask I/O")
PerfDbgTag(tagImgProgSlow,  "Dwn", "! Slow progressive rendering")
PerfDbgTag(tagImgAnimSlow,  "Dwn", "! Slow progressive animation")

DeclareTag(tagImgTrans,     "Img", "trace img transparency");

MtDefine(CImgLoad, Dwn, "CImgLoad")
MtDefine(CImgTaskExec, Dwn, "CImgTaskExec")

// Globals --------------------------------------------------------------------

CImgTaskExec *   g_pImgTaskExec;
extern BOOL      g_fWhistlerOS;

// CImgLoad ----------------------------------------------------------------

CImgLoad::~CImgLoad()
{
    if (_pImgTask)
        _pImgTask->SubRelease();
}

void
CImgLoad::Passivate()
{
    super::Passivate();

    if (_pImgTask)
    {
        // The task is needed by the asynchronous callback methods, but here
        // we want to passivate it by releasing the last reference but
        // maintaining a secondary reference which will be released by the
        // destructor.

        _pImgTask->SubAddRef();
        _pImgTask->Release();
    }
}

HRESULT
CImgLoad::Init(DWNLOADINFO * pdli, CDwnInfo * pDwnInfo)
{
    PerfDbgLog(tagImgLoad, this, "+CImgLoad::Init");

    HRESULT hr = E_FAIL;

    DWORD dwFlags = 0, dwZone = URLZONE_INTERNET;
    
    LPCTSTR pchReferrer = pdli->pDwnDoc->GetSubReferer();

    // ideally we'd like to call the security manager on the pDoc but
    // the markup is not available on this thread so for the meantime
    // shuffle unknown/invalid urls into restricted zone for good measure
    if (GetModuleHandle(TEXT("OUTLOOK.EXE")) || GetModuleHandle(TEXT("MSIMN.EXE")))
    {
        UINT uProt = GetUrlScheme(pchReferrer);
        if ((uProt == URL_SCHEME_INVALID) || (uProt == URL_SCHEME_UNKNOWN))
        {
            dwZone = URLZONE_UNTRUSTED;
            hr = S_OK;
        }
    }

    if (hr == E_FAIL)
    {
        IInternetSecurityManager* pISM = NULL; 

        hr = CoInternetCreateSecurityManager(NULL, &pISM, 0);
        if (SUCCEEDED(hr))
        {
            hr = pISM->MapUrlToZone(pchReferrer,&dwZone,0);
            ClearInterface(&pISM);
        }
    }

    if(SUCCEEDED(hr) && URLZONE_UNTRUSTED == dwZone)
    {
        dwFlags |= DWNF_ENFORCERESTRICTED;
    }

    hr = THR(super::Init(pdli, pDwnInfo, 
                IDS_BINDSTATUS_DOWNLOADINGDATA_PICTURE,
                DWNF_GETMODTIME | DWNF_GETFLAGS | DWNF_IMGLOAD | dwFlags));
    if (hr)
        goto Cleanup;

Cleanup:
    PerfDbgLog1(tagImgLoad, this, "-CImgLoad::Init (hr=%lX)", hr);
    RRETURN(hr);
}

HRESULT
CImgLoad::OnBindHeaders()
{
    PerfDbgLog(tagImgLoad, this, "+CImgLoad::OnBindHeaders");
    FILETIME ft;
    HRESULT hr = S_OK;

    // (jbeda) If we got a redirect, don't bother trying the cache.  
    // Perhaps the right thing to do here is to key the cache
    // off of the redirected URL.  This will at least make sure
    // we are correct for now.
    if (    !_pDwnInfo->TstFlags(DWNF_DOWNLOADONLY) 
        &&  !_pDwnBindData->GetRedirect())
    {
        ft = _pDwnBindData->GetLastMod();

        if (ft.dwLowDateTime || ft.dwHighDateTime)
        {
            if (_pDwnInfo->AttachByLastMod(this, &ft, _pDwnBindData->IsFullyAvail()))
          