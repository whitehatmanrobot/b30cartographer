e-001f,
  4.449394e-003f, -2.601352e-002f, 3.786130e-002f, 2.284194e-001f, -6.911167e-001f, 0.000000e+000f, -1.495813e-002f, 4.088204e-002f, 0.000000e+000f, -2.734412e-001f,
  4.879553e-003f, -2.719976e-002f, 3.789019e-002f, 2.304017e-001f, -6.947414e-001f, 0.000000e+000f, -1.525806e-002f, 4.170179e-002f, 0.000000e+000f, -2.734412e-001f,
  4.611888e-003f, -2.711912e-002f, 3.966923e-002f, 2.259557e-001f, -6.866118e-001f, 0.000000e+000f, -1.570868e-002f, 4.293335e-002f, 0.000000e+000f, -2.734412e-001f,
  3.169175e-003f, -2.495280e-002f, 4.452527e-002f, 2.104080e-001f, -6.581821e-001f, 0.000000e+000f, -1.649662e-002f, 4.508688e-002f, 0.000000e+000f, -2.734412e-001f,
  1.701585e-003f, -2.250612e-002f, 4.880088e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -1.121122e-002f, 3.064137e-002f, 0.000000e+000f, -2.734412e-001f,
  1.701585e-003f, -2.250612e-002f, 4.880088e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -1.060286e-002f, 2.897866e-002f, 0.000000e+000f, -2.734412e-001f,
  1.701585e-003f, -2.250612e-002f, 4.880088e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -1.013162e-002f, 2.769072e-002f, 0.000000e+000f, -2.734412e-001f,
  1.701585e-003f, -2.250612e-002f, 4.880088e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -9.700491e-003f, 2.651239e-002f, 0.000000e+000f, -2.734412e-001f,
  1.701585e-003f, -2.250612e-002f, 4.880088e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -9.241684e-003f, 2.525843e-002f, 0.000000e+000f, -2.734412e-001f,
  1.701585e-003f, -2.250612e-002f, 4.880088e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -8.881618e-003f, 2.427433e-002f, 0.000000e+000f, -2.734412e-001f,
  -6.508273e-003f, 6.946580e-002f, -1.229298e-002f, 6.442423e-002f, -4.479124e-001f, 0.000000e+000f, -2.931460e-002f, 4.223591e-002f, 0.000000e+000f, -3.745480e-001f,
  -6.508273e-003f, 7.063729e-002f, -2.458595e-002f, 1.288485e-001f, -5.379124e-001f, 0.000000e+000f, -2.116778e-002f, 3.362485e-002f, 0.000000e+000f, -3.745480e-001f,
  -6.508273e-003f, 7.415176e-002f, -6.146488e-002f, 3.221211e-001f, -8.079124e-001f, 0.000000e+000f, -1.490823e-002f, 2.686416e-002f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -7.986612e-002f, 1.926052e-001f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -4.118912e-002f, 9.933173e-002f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, -6.842553e-002f, 1.650151e-001f, 0.000000e+000f, -2.734412e-001f,
  -5.775803e-003f, -4.238371e-002f, 1.358036e-001f, -3.523806e-003f, -2.669977e-001f, 0.000000e+000f, -7.679490e-002f, 1.851987e-001f, 0.000000e+000f, -2.734412e-001f,
  -1.187757e-002f, -2.478592e-002f, 1.288515e-001f, 1.696054e-002f, -3.044543e-001f, 0.000000e+000f, -5.868825e-002f, 1.415326e-001f, 0.000000e+000f, -2.734412e-001f,
  -1.548984e-002f, -1.281856e-002f, 1.209994e-001f, 2.899399e-002f, -3.264580e-001f, 0.000000e+000f, -4.703840e-002f, 1.134379e-001f, 0.000000e+000f, -2.734412e-001f,
  -1.714259e-002f, -5.859406e-003f, 1.138288e-001f, 4.023965e-002f, -3.470212e-001f, 0.000000e+000f, -3.930302e-002f, 9.478320e-002f, 0.000000e+000f, -2.734412e-001f,
  -1.785082e-002f, -1.594844e-003f, 1.076633e-001f, 5.033332e-002f, -3.654780e-001f, 0.000000e+000f, -3.394182e-002f, 8.185413e-002f, 0.000000e+000f, -2.734412e-001f,
  -1.670620e-002f, -1.389521e-003f, 1.005112e-001f, 6.692646e-002f, -3.958193e-001f, 0.000000e+000f, -3.009264e-002f, 7.257145e-002f, 0.000000e+000f, -2.734412e-001f,
  -1.348275e-002f, -5.321255e-003f, 9.124599e-002f, 9.300500e-002f, -4.435052e-001f, 0.000000e+000f, -2.725880e-002f, 6.573735e-002f, 0.000000e+000f, -2.734412e-001f,
  -9.788796e-003f, -1.032048e-002f, 8.181876e-002f, 1.203600e-001f, -4.935251e-001f, 0.000000e+000f, -2.514119e-002f, 6.063053e-002f, 0.000000e+000f, -2.734412e-001f,
  -5.596538e-003f, -1.638854e-002f, 7.207108e-002f, 1.495429e-001f, -5.468874e-001f, 0.000000e+000f, -2.355234e-002f, 5.679884e-002f, 0.000000e+000f, -2.734412e-001f,
  -1.805404e-004f, -2.475137e-002f, 6.074043e-002f, 1.850349e-001f, -6.117862e-001f, 0.000000e+000f, -2.237106e-002f, 5.395007e-002f, 0.000000e+000f, -2.734412e-001f,
  3.721810e-003f, -3.066366e-002f, 5.230315e-002f, 2.109121e-001f, -6.591039e-001f, 0.000000e+000f, -2.151774e-002f, 5.189221e-002f, 0.000000e+000f, -2.734412e-001f,
  4.386863e-003f, -3.122622e-002f, 4.979199e-002f, 2.169006e-001f, -6.700542e-001f, 0.000000e+000f, -2.094024e-002f, 5.049951e-002f, 0.000000e+000f, -2.734412e-001f,
  4.546011e-003f, -3.115897e-002f, 4.870422e-002f, 2.190497e-001f, -6.739837e-001f, 0.000000e+000f, -2.060575e-002f, 4.969286e-002f, 0.000000e+000f, -2.734412e-001f,
  5.263459e-003f, -3.227230e-002f, 4.721658e-002f, 2.236952e-001f, -6.824783e-001f, 0.000000e+000f, -2.049619e-002f, 4.942862e-002f, 0.000000e+000f, -2.734412e-001f,
  6.129316e-003f, -3.386468e-002f, 4.602109e-002f, 2.284194e-001f, -6.911167e-001f, 0.000000e+000f, -2.060575e-002f, 4.969286e-002f, 0.000000e+000f, -2.734412e-001f,
  6.690442e-003f, -3.517255e-002f, 4.591175e-002f, 2.305057e-001f, -6.949317e-001f, 0.000000e+000f, -2.094024e-002f, 5.049951e-002f, 0.000000e+000f, -2.734412e-001f,
  6.490257e-003f, -3.542647e-002f, 4.768835e-002f, 2.272072e-001f, -6.889002e-001f, 0.000000e+000f, -2.151774e-002f, 5.189221e-002f, 0.000000e+000f, -2.734412e-001f,
  5.128367e-003f, -3.394132e-002f, 5.202728e-002f, 2.161282e-001f, -6.686418e-001f, 0.000000e+000f, -2.237106e-002f, 5.395007e-002f, 0.000000e+000f, -2.734412e-001f,
  2.344039e-003f, -3.024997e-002f, 5.931835e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -2.355234e-002f, 5.679884e-002f, 0.000000e+000f, -2.734412e-001f,
  2.344039e-003f, -3.024997e-002f, 5.931835e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -1.495386e-002f, 3.606275e-002f, 0.000000e+000f, -2.734412e-001f,
  2.344039e-003f, -3.024997e-002f, 5.931835e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -1.427414e-002f, 3.442354e-002f, 0.000000e+000f, -2.734412e-001f,
  2.344039e-003f, -3.024997e-002f, 5.931835e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -1.365353e-002f, 3.292686e-002f, 0.000000e+000f, -2.734412e-001f,
  2.344039e-003f, -3.024997e-002f, 5.931835e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -1.308463e-002f, 3.155491e-002f, 0.000000e+000f, -2.734412e-001f,
  2.344039e-003f, -3.024997e-002f, 5.931835e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -1.256125e-002f, 3.029271e-002f, 0.000000e+000f, -2.734412e-001f,
  2.344039e-003f, -3.024997e-002f, 5.931835e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -1.207812e-002f, 2.912761e-002f, 0.000000e+000f, -2.734412e-001f,
  -7.302402e-003f, 7.794191e-002f, -1.379295e-002f, 6.442423e-002f, -4.479124e-001f, 0.000000e+000f, -2.913364e-002f, 4.197519e-002f, 0.000000e+000f, -3.745480e-001f,
  -7.302402e-003f, 7.925635e-002f, -2.758589e-002f, 1.288485e-001f, -5.379124e-001f, 0.000000e+000f, -2.104178e-002f, 3.342470e-002f, 0.000000e+000f, -3.745480e-001f,
  -7.302402e-003f, 8.319964e-002f, -6.896473e-002f, 3.221211e-001f, -8.079124e-001f, 0.000000e+000f, -1.490823e-002f, 2.686416e-002f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -1.082629e-001f, 2.347582e-001f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -4.856441e-002f, 1.053075e-001f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, -9.675922e-002f, 2.098136e-001f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -7.655341e-002f, 1.659991e-001f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, -7.655341e-002f, 1.659991e-001f, 0.000000e+000f, -2.734412e-001f,
  -1.229015e-002f, -4.796777e-002f, 1.618020e-001f, 9.109571e-003f, -2.900984e-001f, 0.000000e+000f, -9.047733e-002f, 1.961919e-001f, 0.000000e+000f, -2.734412e-001f,
  -1.817190e-002f, -3.154343e-002f, 1.538433e-001f, 2.100132e-002f, -3.118431e-001f, 0.000000e+000f, -7.351708e-002f, 1.594151e-001f, 0.000000e+000f, -2.734412e-001f,
  -2.149348e-002f, -2.069417e-002f, 1.459357e-001f, 3.097857e-002f, -3.300869e-001f, 0.000000e+000f, -6.171880e-002f, 1.338316e-001f, 0.000000e+000f, -2.734412e-001f,
  -2.323771e-002f, -1.359396e-002f, 1.387410e-001f, 4.023965e-002f, -3.470212e-001f, 0.000000e+000f, -5.327738e-002f, 1.155272e-001f, 0.000000e+000f, -2.734412e-001f,
  -2.416153e-002f, -8.699528e-003f, 1.324716e-001f, 4.846444e-002f, -3.620607e-001f, 0.000000e+000f, -4.705513e-002f, 1.020348e-001f, 0.000000e+000f, -2.734412e-001f,
  -2.355159e-002f, -6.922926e-003f, 1.257513e-001f, 6.010119e-002f, -3.833390e-001f, 0.000000e+000f, -4.235236e-002f, 9.183726e-002f, 0.000000e+000f, -2.734412e-001f,
  -2.068231e-002f, -9.137251e-003f, 1.170615e-001f, 7.924948e-002f, -4.183526e-001f, 0.000000e+000f, -3.872934e-002f, 8.398107e-002f, 0.000000e+000f, -2.734412e-001f,
  -1.659023e-002f, -1.350665e-002f, 1.072952e-001f, 1.023302e-001f, -4.605567e-001f, 0.000000e+000f, -3.590098e-002f, 7.784801e-002f, 0.000000e+000f, -2.734412e-001f,
  -1.241688e-002f, -1.819706e-002f, 9.784285e-002f, 1.248850e-001f, -5.017993e-001f, 0.000000e+000f, -3.367684e-002f, 7.302517e-002f, 0.000000e+000f, -2.734412e-001f,
  -7.586411e-003f, -2.406051e-002f, 8.784434e-002f, 1.495429e-001f, -5.468874e-001f, 0.000000e+000f, -3.192647e-002f, 6.922966e-002f, 0.000000e+000f, -2.734412e-001f,
  -1.474145e-003f, -3.199715e-002f, 7.631434e-002f, 1.791440e-001f, -6.010144e-001f, 0.000000e+000f, -3.055882e-002f, 6.626403e-002f, 0.000000e+000f, -2.734412e-001f,
  3.849396e-003f, -3.890779e-002f, 6.626816e-002f, 2.048337e-001f, -6.479892e-001f, 0.000000e+000f, -2.950963e-002f, 6.398896e-002f, 0.000000e+000f, -2.734412e-001f,
  5.846134e-003f, -4.108594e-002f, 6.160261e-002f, 2.155399e-001f, -6.675660e-001f, 0.000000e+000f, -2.873362e-002f, 6.230625e-002f, 0.000000e+000f, -2.734412e-001f,
  5.916987e-003f, -4.065064e-002f, 6.032556e-002f, 2.172665e-001f, -6.707231e-001f, 0.000000e+000f, -2.819948e-002f, 6.114801e-002f, 0.000000e+000f, -2.734412e-001f,
  6.285298e-003f, -4.087278e-002f, 5.907546e-002f, 2.197081e-001f, -6.751877e-001f, 0.000000e+000f, -2.788670e-002f, 6.046978e-002f, 0.000000e+000f, -2.734412e-001f,
  7.134905e-003f, -4.201170e-002f, 5.755026e-002f, 2.236952e-001f, -6.824783e-001f, 0.000000e+000f, -2.778370e-002f, 6.024643e-002f, 0.000000e+000f, -2.734412e-001f,
  8.124773e-003f, -4.356813e-002f, 5.627088e-002f, 2.277401e-001f, -6.898746e-001f, 0.000000e+000f, -2.788670e-002f, 6.046978e-002f, 0.000000e+000f, -2.734412e-001f,
  8.900368e-003f, -4.503084e-002f, 5.579578e-002f, 2.302755e-001f, -6.945107e-001f, 0.000000e+000f, -2.819948e-002f, 6.114801e-002f, 0.000000e+000f, -2.734412e-001f,
  9.099586e-003f, -4.587882e-002f, 5.669782e-002f, 2.296935e-001f, -6.934465e-001f, 0.000000e+000f, -2.873362e-002f, 6.230625e-002f, 0.000000e+000f, -2.734412e-001f,
  8.379907e-003f, -4.561453e-002f, 5.950867e-002f, 2.244768e-001f, -6.839076e-001f, 0.000000e+000f, -2.950963e-002f, 6.398896e-002f, 0.000000e+000f, -2.734412e-001f,
  6.462458e-003f, -4.382263e-002f, 6.463893e-002f, 2.134009e-001f, -6.636547e-001f, 0.000000e+000f, -3.055882e-002f, 6.626403e-002f, 0.000000e+000f, -2.734412e-001f,
  3.177472e-003f, -4.023274e-002f, 7.230058e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -3.192647e-002f, 6.922966e-002f, 0.000000e+000f, -2.734412e-001f,
  3.177472e-003f, -4.023274e-002f, 7.230058e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -2.043294e-002f, 4.430698e-002f, 0.000000e+000f, -2.734412e-001f,
  3.177472e-003f, -4.023274e-002f, 7.230058e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -1.964706e-002f, 4.260287e-002f, 0.000000e+000f, -2.734412e-001f,
  3.177472e-003f, -4.023274e-002f, 7.230058e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -1.891939e-002f, 4.102499e-002f, 0.000000e+000f, -2.734412e-001f,
  3.177472e-003f, -4.023274e-002f, 7.230058e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -1.824370e-002f, 3.955981e-002f, 0.000000e+000f, -2.734412e-001f,
  3.177472e-003f, -4.023274e-002f, 7.230058e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -1.761461e-002f, 3.819568e-002f, 0.000000e+000f, -2.734412e-001f,
  3.177472e-003f, -4.023274e-002f, 7.230058e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -1.702745e-002f, 3.692249e-002f, 0.000000e+000f, -2.734412e-001f,
  3.177472e-003f, -4.023274e-002f, 7.230058e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -1.647818e-002f, 3.573144e-002f, 0.000000e+000f, -2.734412e-001f,
  -8.193430e-003f, 8.745227e-002f, -1.547594e-002f, 6.442423e-002f, -4.479124e-001f, 0.000000e+000f, -2.949781e-002f, 4.249988e-002f, 0.000000e+000f, -3.745480e-001f,
  -8.193430e-003f, 8.892708e-002f, -3.095188e-002f, 1.288485e-001f, -5.379124e-001f, 0.000000e+000f, -2.142436e-002f, 3.403242e-002f, 0.000000e+000f, -3.745480e-001f,
  -8.193430e-003f, 9.040190e-002f, -4.642782e-002f, 1.932727e-001f, -6.279124e-001f, 0.000000e+000f, -1.525901e-002f, 2.749626e-002f, 0.000000e+000f, -3.745480e-001f,
  -8.193430e-003f, 9.335153e-002f, -7.737970e-002f, 3.221211e-001f, -8.079124e-001f, 0.000000e+000f, -1.055189e-002f, 2.243950e-002f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -1.449539e-001f, 2.868840e-001f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -6.502324e-002f, 1.286901e-001f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, -1.295516e-001f, 2.564007e-001f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -1.024979e-001f, 2.028577e-001f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, -1.024979e-001f, 2.028577e-001f, 0.000000e+000f, -2.734412e-001f,
  -1.645536e-002f, -6.733889e-002f, 1.977286e-001f, 9.109571e-003f, -2.900984e-001f, 0.000000e+000f, -1.211407e-001f, 2.397544e-001f, 0.000000e+000f, -2.734412e-001f,
  -2.433048e-002f, -4.683875e-002f, 1.880028e-001f, 2.100132e-002f, -3.118431e-001f, 0.000000e+000f, -9.843254e-002f, 1.948117e-001f, 0.000000e+000f, -2.734412e-001f,
  -2.877777e-002f, -3.315433e-002f, 1.783394e-001f, 3.097857e-002f, -3.300869e-001f, 0.000000e+000f, -8.263575e-002f, 1.635477e-001f, 0.000000e+000f, -2.734412e-001f,
  -3.111314e-002f, -2.408983e-002f, 1.695471e-001f, 4.023965e-002f, -3.470212e-001f, 0.000000e+000f, -7.133346e-002f, 1.411789e-001f, 0.000000e+000f, -2.734412e-001f,
  -3.235005e-002f, -1.777075e-002f, 1.618857e-001f, 4.846444e-002f, -3.620607e-001f, 0.000000e+000f, -6.300244e-002f, 1.246906e-001f, 0.000000e+000f, -2.734412e-001f,
  -3.153339e-002f, -1.523747e-002f, 1.536732e-001f, 6.010119e-002f, -3.833390e-001f, 0.000000e+000f, -5.670588e-002f, 1.122289e-001f, 0.000000e+000f, -2.734412e-001f,
  -2.769170e-002f, -1.747513e-002f, 1.430539e-001f, 7.924948e-002f, -4.183526e-001f, 0.000000e+000f, -5.185499e-002f, 1.026283e-001f, 0.000000e+000f, -2.734412e-001f,
  -2.221277e-002f, -2.228836e-002f, 1.311190e-001f, 1.023302e-001f, -4.605567e-001f, 0.000000e+000f, -4.806807e-002f, 9.513342e-002f, 0.000000e+000f, -2.734412e-001f,
  -1.662505e-002f, -2.751080e-002f, 1.195679e-001f, 1.248850e-001f, -5.017993e-001f, 0.000000e+000f, -4.509016e-002f, 8.923971e-002f, 0.000000e+000f, -2.734412e-001f,
  -1.015750e-002f, -3.413730e-002f, 1.073493e-001f, 1.495429e-001f, -5.468874e-001f, 0.000000e+000f, -4.274658e-002f, 8.460145e-002f, 0.000000e+000f, -2.734412e-001f,
  -1.973744e-003f, -4.321478e-002f, 9.325921e-002f, 1.791440e-001f, -6.010144e-001f, 0.000000e+000f, -4.091542e-002f, 8.097733e-002f, 0.000000e+000f, -2.734412e-001f,
  5.153984e-003f, -5.111843e-002f, 8.098238e-002f, 2.048337e-001f, -6.479892e-001f, 0.000000e+000f, -3.951066e-002f, 7.819710e-002f, 0.000000e+000f, -2.734412e-001f,
  7.827431e-003f, -5.352876e-002f, 7.528089e-002f, 2.155399e-001f, -6.675660e-001f, 0.000000e+000f, -3.847165e-002f, 7.614076e-002f, 0.000000e+000f, -2.734412e-001f,
  7.922295e-003f, -5.292798e-002f, 7.372027e-002f, 2.172665e-001f, -6.707231e-001f, 0.000000e+000f, -3.775648e-002f, 7.472534e-002f, 0.000000e+000f, -2.734412e-001f,
  8.415430e-003f, -5.313207e-002f, 7.219260e-002f, 2.197081e-001f, -6.751877e-001f, 0.000000e+000f, -3.733770e-002f, 7.389652e-002f, 0.000000e+000f, -2.734412e-001f,
  9.552974e-003f, -5.444168e-002f, 7.032874e-002f, 2.236952e-001f, -6.824783e-001f, 0.000000e+000f, -3.719979e-002f, 7.362357e-002f, 0.000000e+000f, -2.734412e-001f,
  1.087832e-002f, -5.627475e-002f, 6.876529e-002f, 2.277401e-001f, -6.898746e-001f, 0.000000e+000f, -3.733770e-002f, 7.389652e-002f, 0.000000e+000f, -2.734412e-001f,
  1.191677e-002f, -5.803663e-002f, 6.818470e-002f, 2.302755e-001f, -6.945107e-001f, 0.000000e+000f, -3.775648e-002f, 7.472534e-002f, 0.000000e+000f, -2.734412e-001f,
  1.218350e-002f, -5.912151e-002f, 6.928703e-002f, 2.296935e-001f, -6.934465e-001f, 0.000000e+000f, -3.847165e-002f, 7.614076e-002f, 0.000000e+000f, -2.734412e-001f,
  1.121992e-002f, -5.895003e-002f, 7.272200e-002f, 2.244768e-001f, -6.839076e-001f, 0.000000e+000f, -3.951066e-002f, 7.819710e-002f, 0.000000e+000f, -2.734412e-001f,
  8.652630e-003f, -5.703675e-002f, 7.899139e-002f, 2.134009e-001f, -6.636547e-001f, 0.000000e+000f, -4.091542e-002f, 8.097733e-002f, 0.000000e+000f, -2.734412e-001f,
  4.254340e-003f, -5.306269e-002f, 8.835424e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -4.274658e-002f, 8.460145e-002f, 0.000000e+000f, -2.734412e-001f,
  4.254340e-003f, -5.306269e-002f, 8.835424e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -2.735781e-002f, 5.414493e-002f, 0.000000e+000f, -2.734412e-001f,
  4.254340e-003f, -5.306269e-002f, 8.835424e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -2.630559e-002f, 5.206243e-002f, 0.000000e+000f, -2.734412e-001f,
  4.254340e-003f, -5.306269e-002f, 8.835424e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -2.533131e-002f, 5.013419e-002f, 0.000000e+000f, -2.734412e-001f,
  4.254340e-003f, -5.306269e-002f, 8.835424e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -2.442662e-002f, 4.834368e-002f, 0.000000e+000f, -2.734412e-001f,
  4.254340e-003f, -5.306269e-002f, 8.835424e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -2.358432e-002f, 4.667666e-002f, 0.000000e+000f, -2.734412e-001f,
  4.254340e-003f, -5.306269e-002f, 8.835424e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -2.279818e-002f, 4.512077e-002f, 0.000000e+000f, -2.734412e-001f,
  4.254340e-003f, -5.306269e-002f, 8.835424e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -2.206275e-002f, 4.366526e-002f, 0.000000e+000f, -2.734412e-001f,
  -9.193180e-003f, 9.812306e-002f, -1.736429e-002f, 6.442423e-002f, -4.479124e-001f, 0.000000e+000f, -2.949781e-002f, 4.249988e-002f, 0.000000e+000f, -3.745480e-001f,
  -9.193180e-003f, 9.977783e-002f, -3.472858e-002f, 1.288485e-001f, -5.379124e-001f, 0.000000e+000f, -2.142436e-002f, 3.403242e-002f, 0.000000e+000f, -3.745480e-001f,
  -9.193180e-003f, 1.014326e-001f, -5.209287e-002f, 1.932727e-001f, -6.279124e-001f, 0.000000e+000f, -1.525901e-002f, 2.749626e-002f, 0.000000e+000f, -3.745480e-001f,
  -9.193180e-003f, 1.047421e-001f, -8.682145e-002f, 3.221211e-001f, -8.079124e-001f, 0.000000e+000f, -1.055189e-002f, 2.243950e-002f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, 0.000000e+000f, 3.514500e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 0.000000e+000f, 1.576530e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 3.141061e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 0.000000e+000f, 2.485127e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 2.485127e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 3.989708e-002f, 2.422293e-001f, 0.000000e+000f, -1.665728e-002f, 0.000000e+000f, 0.000000e+000f, 2.937134e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 5.899079e-002f, 2.303145e-001f, 0.000000e+000f, -3.840190e-002f, 0.000000e+000f, 0.000000e+000f, 2.386559e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 6.977353e-002f, 2.184763e-001f, 0.000000e+000f, -5.664578e-002f, 0.000000e+000f, 0.000000e+000f, 2.003556e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 7.543579e-002f, 2.077053e-001f, 0.000000e+000f, -7.358009e-002f, 0.000000e+000f, 0.000000e+000f, 1.729525e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 7.843475e-002f, 1.983196e-001f, 0.000000e+000f, -8.861951e-002f, 0.000000e+000f, 0.000000e+000f, 1.527534e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 7.645471e-002f, 1.882587e-001f, 0.000000e+000f, -1.098979e-001f, 0.000000e+000f, 0.000000e+000f, 1.374870e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 6.714028e-002f, 1.752495e-001f, 0.000000e+000f, -1.449114e-001f, 0.000000e+000f, 0.000000e+000f, 1.257257e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 5.385628e-002f, 1.606286e-001f, 0.000000e+000f, -1.871156e-001f, 0.000000e+000f, 0.000000e+000f, 1.165441e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 4.030849e-002f, 1.464778e-001f, 0.000000e+000f, -2.283581e-001f, 0.000000e+000f, 0.000000e+000f, 1.093239e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 2.462750e-002f, 1.315093e-001f, 0.000000e+000f, -2.734463e-001f, 0.000000e+000f, 0.000000e+000f, 1.036418e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 4.785467e-003f, 1.142481e-001f, 0.000000e+000f, -3.275733e-001f, 0.000000e+000f, 0.000000e+000f, 9.920204e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.249616e-002f, 9.920823e-002f, 0.000000e+000f, -3.745481e-001f, 0.000000e+000f, 0.000000e+000f, 9.579610e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.897810e-002f, 9.222356e-002f, 0.000000e+000f, -3.941249e-001f, 0.000000e+000f, 0.000000e+000f, 9.327696e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.920811e-002f, 9.031171e-002f, 0.000000e+000f, -3.972820e-001f, 0.000000e+000f, 0.000000e+000f, 9.154298e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.040374e-002f, 8.844022e-002f, 0.000000e+000f, -4.017465e-001f, 0.000000e+000f, 0.000000e+000f, 9.052763e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.316179e-002f, 8.615689e-002f, 0.000000e+000f, -4.090371e-001f, 0.000000e+000f, 0.000000e+000f, 9.019325e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.637517e-002f, 8.424156e-002f, 0.000000e+000f, -4.164334e-001f, 0.000000e+000f, 0.000000e+000f, 9.052763e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.889296e-002f, 8.353031e-002f, 0.000000e+000f, -4.210695e-001f, 0.000000e+000f, 0.000000e+000f, 9.154298e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.953967e-002f, 8.488073e-002f, 0.000000e+000f, -4.200054e-001f, 0.000000e+000f, 0.000000e+000f, 9.327696e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.720340e-002f, 8.908877e-002f, 0.000000e+000f, -4.104664e-001f, 0.000000e+000f, 0.000000e+000f, 9.579610e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.097885e-002f, 9.676915e-002f, 0.000000e+000f, -3.902135e-001f, 0.000000e+000f, 0.000000e+000f, 9.920204e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.031492e-002f, 1.082392e-001f, 0.000000e+000f, -3.579124e-001f, 0.000000e+000f, 0.000000e+000f, 1.036418e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.031492e-002f, 1.082392e-001f, 0.000000e+000f, -3.579124e-001f, 0.000000e+000f, 0.000000e+000f, 6.633075e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.031492e-002f, 1.082392e-001f, 0.000000e+000f, -3.579124e-001f, 0.000000e+000f, 0.000000e+000f, 6.377957e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.031492e-002f, 1.082392e-001f, 0.000000e+000f, -3.579124e-001f, 0.000000e+000f, 0.000000e+000f, 6.141736e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.031492e-002f, 1.082392e-001f, 0.000000e+000f, -3.579124e-001f, 0.000000e+000f, 0.000000e+000f, 5.922389e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.031492e-002f, 1.082392e-001f, 0.000000e+000f, -3.579124e-001f, 0.000000e+000f, 0.000000e+000f, 5.718168e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.031492e-002f, 1.082392e-001f, 0.000000e+000f, -3.579124e-001f, 0.000000e+000f, 0.000000e+000f, 5.527563e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.031492e-002f, 1.082392e-001f, 0.000000e+000f, -3.579124e-001f, 0.000000e+000f, 0.000000e+000f, 5.349254e-002f, 0.000000e+000f, 0.000000e+000f,
  -1.031492e-002f, 1.100959e-001f, -1.948305e-002f, 6.442423e-002f, -4.479124e-001f, -3.163088e-002f, 4.463295e-002f, 0.000000e+000f, 0.000000e+000f, -3.745480e-001f,
  -1.031492e-002f, 1.119526e-001f, -3.896611e-002f, 1.288485e-001f, -5.379124e-001f, -2.480773e-002f, 3.741580e-002f, 0.000000e+000f, 0.000000e+000f, -3.745480e-001f,
  -1.031492e-002f, 1.138092e-001f, -5.844916e-002f, 1.932727e-001f, -6.279124e-001f, -1.928875e-002f, 3.152599e-002f, 0.000000e+000f, 0.000000e+000f, -3.745480e-001f,
  -1.031492e-002f, 1.175226e-001f, -9.741527e-002f, 3.221211e-001f, -8.079124e-001f, -1.482304e-002f, 2.671065e-002f, 0.000000e+000f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -1.790174e-001f, 3.055128e-001f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -8.030339e-002f, 1.370465e-001f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, -1.599956e-001f, 2.730500e-001f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -1.265844e-001f, 2.160301e-001f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, -1.265844e-001f, 2.160301e-001f, 0.000000e+000f, -2.734412e-001f,
  -2.032230e-002f, -8.870166e-002f, 2.105681e-001f, 9.109571e-003f, -2.900984e-001f, 0.000000e+000f, -1.496082e-001f, 2.553228e-001f, 0.000000e+000f, -2.734412e-001f,
  -3.004803e-002f, -6.603464e-002f, 2.002106e-001f, 2.100132e-002f, -3.118431e-001f, 0.000000e+000f, -1.215637e-001f, 2.074618e-001f, 0.000000e+000f, -2.734412e-001f,
  -3.554041e-002f, -5.063128e-002f, 1.899198e-001f, 3.097857e-002f, -3.300869e-001f, 0.000000e+000f, -1.020548e-001f, 1.741676e-001f, 0.000000e+000f, -2.734412e-001f,
  -3.842458e-002f, -4.022269e-002f, 1.805566e-001f, 4.023965e-002f, -3.470212e-001f, 0.000000e+000f, -8.809649e-002f, 1.503463e-001f, 0.000000e+000f, -2.734412e-001f,
  -3.995216e-002f, -3.283496e-002f, 1.723977e-001f, 4.846444e-002f, -3.620607e-001f, 0.000000e+000f, -7.780772e-002f, 1.327874e-001f, 0.000000e+000f, -2.734412e-001f,
  -3.894359e-002f, -2.943151e-002f, 1.636519e-001f, 6.010119e-002f, -3.833390e-001f, 0.000000e+000f, -7.003149e-002f, 1.195164e-001f, 0.000000e+000f, -2.734412e-001f,
  -3.419911e-002f, -3.090200e-002f, 1.523431e-001f, 7.924948e-002f, -4.183526e-001f, 0.000000e+000f, -6.404067e-002f, 1.092924e-001f, 0.000000e+000f, -2.734412e-001f,
  -2.743267e-002f, -3.500225e-002f, 1.396332e-001f, 1.023302e-001f, -4.605567e-001f, 0.000000e+000f, -5.936384e-002f, 1.013109e-001f, 0.000000e+000f, -2.734412e-001f,
  -2.053186e-002f, -3.957126e-002f, 1.273320e-001f, 1.248850e-001f, -5.017993e-001f, 0.000000e+000f, -5.568613e-002f, 9.503446e-002f, 0.000000e+000f, -2.734412e-001f,
  -1.254446e-002f, -4.557815e-002f, 1.143200e-001f, 1.495429e-001f, -5.468874e-001f, 0.000000e+000f, -5.279183e-002f, 9.009501e-002f, 0.000000e+000f, -2.734412e-001f,
  -2.437564e-003f, -5.403435e-002f, 9.931497e-002f, 1.791440e-001f, -6.010144e-001f, 0.000000e+000f, -5.053035e-002f, 8.623556e-002f, 0.000000e+000f, -2.734412e-001f,
  6.365145e-003f, -6.139632e-002f, 8.624094e-002f, 2.048337e-001f, -6.479892e-001f, 0.000000e+000f, -4.879547e-002f, 8.327480e-002f, 0.000000e+000f, -2.734412e-001f,
  9.666840e-003f, -6.347325e-002f, 8.016922e-002f, 2.155399e-001f, -6.675660e-001f, 0.000000e+000f, -4.751230e-002f, 8.108494e-002f, 0.000000e+000f, -2.734412e-001f,
  9.783997e-003f, -6.269936e-002f, 7.850727e-002f, 2.172665e-001f, -6.707231e-001f, 0.000000e+000f, -4.662907e-002f, 7.957760e-002f, 0.000000e+000f, -2.734412e-001f,
  1.039302e-002f, -6.278544e-002f, 7.688040e-002f, 2.197081e-001f, -6.751877e-001f, 0.000000e+000f, -4.611189e-002f, 7.869497e-002f, 0.000000e+000f, -2.734412e-001f,
  1.179788e-002f, -6.401994e-002f, 7.489551e-002f, 2.236952e-001f, -6.824783e-001f, 0.000000e+000f, -4.594156e-002f, 7.840429e-002f, 0.000000e+000f, -2.734412e-001f,
  1.343467e-002f, -6.583769e-002f, 7.323054e-002f, 2.277401e-001f, -6.898746e-001f, 0.000000e+000f, -4.611189e-002f, 7.869497e-002f, 0.000000e+000f, -2.734412e-001f,
  1.471715e-002f, -6.766409e-002f, 7.261225e-002f, 2.302755e-001f, -6.945107e-001f, 0.000000e+000f, -4.662907e-002f, 7.957760e-002f, 0.000000e+000f, -2.734412e-001f,
  1.504656e-002f, -6.891414e-002f, 7.378616e-002f, 2.296935e-001f, -6.934465e-001f, 0.000000e+000f, -4.751230e-002f, 8.108494e-002f, 0.000000e+000f, -2.734412e-001f,
  1.385654e-002f, -6.902668e-002f, 7.744418e-002f, 2.244768e-001f, -6.839076e-001f, 0.000000e+000f, -4.879547e-002f, 8.327480e-002f, 0.000000e+000f, -2.734412e-001f,
  1.068596e-002f, -6.752787e-002f, 8.412067e-002f, 2.134009e-001f, -6.636547e-001f, 0.000000e+000f, -5.053035e-002f, 8.623556e-002f, 0.000000e+000f, -2.734412e-001f,
  5.254090e-003f, -6.410027e-002f, 9.409149e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -5.279183e-002f, 9.009501e-002f, 0.000000e+000f, -2.734412e-001f,
  5.254090e-003f, -6.410027e-002f, 9.409149e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -3.378677e-002f, 5.766081e-002f, 0.000000e+000f, -2.734412e-001f,
  5.254090e-003f, -6.410027e-002f, 9.409149e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -3.248728e-002f, 5.544309e-002f, 0.000000e+000f, -2.734412e-001f,
  5.254090e-003f, -6.410027e-002f, 9.409149e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -3.128404e-002f, 5.338964e-002f, 0.000000e+000f, -2.734412e-001f,
  5.254090e-003f, -6.410027e-002f, 9.409149e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -3.016676e-002f, 5.148287e-002f, 0.000000e+000f, -2.734412e-001f,
  5.254090e-003f, -6.410027e-002f, 9.409149e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -2.912652e-002f, 4.970759e-002f, 0.000000e+000f, -2.734412e-001f,
  5.254090e-003f, -6.410027e-002f, 9.409149e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -2.815564e-002f, 4.805067e-002f, 0.000000e+000f, -2.734412e-001f,
  5.254090e-003f, -6.410027e-002f, 9.409149e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -2.724739e-002f, 4.650065e-002f, 0.000000e+000f, -2.734412e-001f,
  -6.499578e-003f, 6.937300e-002f, -1.227655e-002f, 6.442423e-002f, -4.479124e-001f, 0.000000e+000f, -2.949781e-002f, 4.249988e-002f, 0.000000e+000f, -3.745480e-001f,
  -6.499578e-003f, 7.054292e-002f, -2.455311e-002f, 1.288485e-001f, -5.379124e-001f, 0.000000e+000f, -2.142436e-002f, 3.403242e-002f, 0.000000e+000f, -3.745480e-001f,
  -6.499578e-003f, 7.171285e-002f, -3.682966e-002f, 1.932727e-001f, -6.279124e-001f, 0.000000e+000f, -1.525901e-002f, 2.749626e-002f, 0.000000e+000f, -3.745480e-001f,
  -6.499578e-003f, 7.405270e-002f, -6.138277e-002f, 3.221211e-001f, -8.079124e-001f, 0.000000e+000f, -1.055189e-002f, 2.243950e-002f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -1.656796e-001f, 2.661584e-001f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -7.432032e-002f, 1.193930e-001f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, -1.480750e-001f, 2.378773e-001f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -1.171531e-001f, 1.882024e-001f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, -1.171531e-001f, 1.882024e-001f, 0.000000e+000f, -2.734412e-001f,
  -1.880817e-002f, -8.397640e-002f, 1.834439e-001f, 9.109571e-003f, -2.900984e-001f, 0.000000e+000f, -1.384616e-001f, 2.224336e-001f, 0.000000e+000f, -2.734412e-001f,
  -2.780927e-002f, -6.389962e-002f, 1.744207e-001f, 2.100132e-002f, -3.118431e-001f, 0.000000e+000f, -1.125065e-001f, 1.807378e-001f, 0.000000e+000f, -2.734412e-001f,
  -3.289244e-002f, -5.015295e-002f, 1.654554e-001f, 3.097857e-002f, -3.300869e-001f, 0.000000e+000f, -9.445108e-002f, 1.517323e-001f, 0.000000e+000f, -2.734412e-001f,
  -3.556173e-002f, -4.078717e-002f, 1.572983e-001f, 4.023965e-002f, -3.470212e-001f, 0.000000e+000f, -8.153278e-002f, 1.309795e-001f, 0.000000e+000f, -2.734412e-001f,
  -3.697549e-002f, -3.409145e-002f, 1.501904e-001f, 4.846444e-002f, -3.620607e-001f, 0.000000e+000f, -7.201059e-002f, 1.156825e-001f, 0.000000e+000f, -2.734412e-001f,
  -3.604206e-002f, -3.084811e-002f, 1.425712e-001f, 6.010119e-002f, -3.833390e-001f, 0.000000e+000f, -6.481374e-002f, 1.041210e-001f, 0.000000e+000f, -2.734412e-001f,
  -3.165108e-002f, -3.176930e-002f, 1.327191e-001f, 7.924948e-002f, -4.183526e-001f, 0.000000e+000f, -5.926927e-002f, 9.521399e-002f, 0.000000e+000f, -2.734412e-001f,
  -2.538877e-002f, -3.493692e-002f, 1.216465e-001f, 1.023302e-001f, -4.605567e-001f, 0.000000e+000f, -5.494089e-002f, 8.826061e-002f, 0.000000e+000f, -2.734412e-001f,
  -1.900212e-002f, -3.852593e-002f, 1.109299e-001f, 1.248850e-001f, -5.017993e-001f, 0.000000e+000f, -5.153719e-002f, 8.279268e-002f, 0.000000e+000f, -2.734412e-001f,
  -1.160983e-002f, -4.334497e-002f, 9.959400e-002f, 1.495429e-001f, -5.468874e-001f, 0.000000e+000f, -4.885853e-002f, 7.848950e-002f, 0.000000e+000f, -2.734412e-001f,
  -2.255951e-003f, -5.023440e-002f, 8.652180e-002f, 1.791440e-001f, -6.010144e-001f, 0.000000e+000f, -4.676555e-002f, 7.512720e-002f, 0.000000e+000f, -2.734412e-001f,
  5.890905e-003f, -5.623199e-002f, 7.513189e-002f, 2.048337e-001f, -6.479892e-001f, 0.000000e+000f, -4.515993e-002f, 7.254783e-002f, 0.000000e+000f, -2.734412e-001f,
  8.946604e-003f, -5.784818e-002f, 6.984230e-002f, 2.155399e-001f, -6.675660e-001f, 0.000000e+000f, -4.397236e-002f, 7.064005e-002f, 0.000000e+000f, -2.734412e-001f,
  9.055032e-003f, -5.712108e-002f, 6.839442e-002f, 2.172665e-001f, -6.707231e-001f, 0.000000e+000f, -4.315493e-002f, 6.932688e-002f, 0.000000e+000f, -2.734412e-001f,
  9.618675e-003f, -5.714430e-002f, 6.697712e-002f, 2.197081e-001f, -6.751877e-001f, 0.000000e+000f, -4.267628e-002f, 6.855794e-002f, 0.000000e+000f, -2.734412e-001f,
  1.091887e-002f, -5.815661e-002f, 6.524791e-002f, 2.236952e-001f, -6.824783e-001f, 0.000000e+000f, -4.251865e-002f, 6.830471e-002f, 0.000000e+000f, -2.734412e-001f,
  1.243371e-002f, -5.968723e-002f, 6.379741e-002f, 2.277401e-001f, -6.898746e-001f, 0.000000e+000f, -4.267628e-002f, 6.855794e-002f, 0.000000e+000f, -2.734412e-001f,
  1.362064e-002f, -6.125870e-002f, 6.325877e-002f, 2.302755e-001f, -6.945107e-001f, 0.000000e+000f, -4.315493e-002f, 6.932688e-002f, 0.000000e+000f, -2.734412e-001f,
  1.392551e-002f, -6.238508e-002f, 6.428146e-002f, 2.296935e-001f, -6.934465e-001f, 0.000000e+000f, -4.397236e-002f, 7.064005e-002f, 0.000000e+000f, -2.734412e-001f,
  1.282415e-002f, -6.259953e-002f, 6.746827e-002f, 2.244768e-001f, -6.839076e-001f, 0.000000e+000f, -4.515993e-002f, 7.254783e-002f, 0.000000e+000f, -2.734412e-001f,
  9.889791e-003f, -6.150624e-002f, 7.328474e-002f, 2.134009e-001f, -6.636547e-001f, 0.000000e+000f, -4.676555e-002f, 7.512720e-002f, 0.000000e+000f, -2.734412e-001f,
  4.862629e-003f, -5.883746e-002f, 8.197118e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -4.885853e-002f, 7.848950e-002f, 0.000000e+000f, -2.734412e-001f,
  4.862629e-003f, -5.883746e-002f, 8.197118e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -3.126946e-002f, 5.023328e-002f, 0.000000e+000f, -2.734412e-001f,
  4.862629e-003f, -5.883746e-002f, 8.197118e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -3.006679e-002f, 4.830123e-002f, 0.000000e+000f, -2.734412e-001f,
  4.862629e-003f, -5.883746e-002f, 8.197118e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -2.895320e-002f, 4.651230e-002f, 0.000000e+000f, -2.734412e-001f,
  4.862629e-003f, -5.883746e-002f, 8.197118e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -2.791916e-002f, 4.485114e-002f, 0.000000e+000f, -2.734412e-001f,
  4.862629e-003f, -5.883746e-002f, 8.197118e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -2.695643e-002f, 4.330455e-002f, 0.000000e+000f, -2.734412e-001f,
  4.862629e-003f, -5.883746e-002f, 8.197118e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -2.605788e-002f, 4.186107e-002f, 0.000000e+000f, -2.734412e-001f,
  4.862629e-003f, -5.883746e-002f, 8.197118e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -2.521730e-002f, 4.051071e-002f, 0.000000e+000f, -2.734412e-001f,
  -5.792755e-003f, 6.182875e-002f, -1.094149e-002f, 6.442423e-002f, -4.479124e-001f, 0.000000e+000f, -2.949781e-002f, 4.249988e-002f, 0.000000e+000f, -3.745480e-001f,
  -5.792755e-003f, 6.287145e-002f, -2.188298e-002f, 1.288485e-001f, -5.379124e-001f, 0.000000e+000f, -2.142436e-002f, 3.403242e-002f, 0.000000e+000f, -3.745480e-001f,
  -5.792755e-003f, 6.391414e-002f, -3.282447e-002f, 1.932727e-001f, -6.279124e-001f, 0.000000e+000f, -1.525901e-002f, 2.749626e-002f, 0.000000e+000f, -3.745480e-001f,
  -5.792755e-003f, 6.599954e-002f, -5.470745e-002f, 3.221211e-001f, -8.079124e-001f, 0.000000e+000f, -1.055189e-002f, 2.243950e-002f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -1.590647e-001f, 2.486166e-001f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -8.203399e-002f, 1.282183e-001f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, -1.362792e-001f, 2.130030e-001f, 0.000000e+000f, -2.734412e-001f,
  -1.150333e-002f, -9.417504e-002f, 1.752966e-001f, -3.523806e-003f, -2.669977e-001f, 0.000000e+000f, -1.529480e-001f, 2.390561e-001f, 0.000000e+000f, -2.734412e-001f,
  -2.365587e-002f, -6.943932e-002f, 1.663228e-001f, 1.696054e-002f, -3.044543e-001f, 0.000000e+000f, -1.168860e-001f, 1.826916e-001f, 0.000000e+000f, -2.734412e-001f,
  -3.085022e-002f, -5.170983e-002f, 1.561871e-001f, 2.899399e-002f, -3.264580e-001f, 0.000000e+000f, -9.368367e-002f, 1.464266e-001f, 0.000000e+000f, -2.734412e-001f,
  -3.414191e-002f, -4.064304e-002f, 1.469312e-001f, 4.023965e-002f, -3.470212e-001f, 0.000000e+000f, -7.827755e-002f, 1.223470e-001f, 0.000000e+000f, -2.734412e-001f,
  -3.555245e-002f, -3.334656e-002f, 1.389727e-001f, 5.033332e-002f, -3.654780e-001f, 0.000000e+000f, -6.759997e-002f, 1.056581e-001f, 0.000000e+000f, -2.734412e-001f,
  -3.327277e-002f, -3.100307e-002f, 1.297408e-001f, 6.692646e-002f, -3.958193e-001f, 0.000000e+000f, -5.993378e-002f, 9.367590e-002f, 0.000000e+000f, -2.734412e-001f,
  -2.685282e-002f, -3.338563e-002f, 1.177812e-001f, 9.300500e-002f, -4.435052e-001f, 0.000000e+000f, -5.428978e-002f, 8.485437e-002f, 0.000000e+000f, -2.734412e-001f,
  -1.949578e-002f, -3.709905e-002f, 1.056124e-001f, 1.203600e-001f, -4.935251e-001f, 0.000000e+000f, -5.007227e-002f, 7.826245e-002f, 0.000000e+000f, -2.734412e-001f,
  -1.114630e-002f, -4.209899e-002f, 9.303002e-002f, 1.495429e-001f, -5.468874e-001f, 0.000000e+000f, -4.690783e-002f, 7.331646e-002f, 0.000000e+000f, -2.734412e-001f,
  -3.595718e-004f, -4.960102e-002f, 7.840430e-002f, 1.850349e-001f, -6.117862e-001f, 0.000000e+000f, -4.455515e-002f, 6.963925e-002f, 0.000000e+000f, -2.734412e-001f,
  7.412514e-003f, -5.478071e-002f, 6.751338e-002f, 2.109121e-001f, -6.591039e-001f, 0.000000e+000f, -4.285565e-002f, 6.698295e-002f, 0.000000e+000f, -2.734412e-001f,
  8.737062e-003f, -5.477710e-002f, 6.427196e-002f, 2.169006e-001f, -6.700542e-001f, 0.000000e+000f, -4.170547e-002f, 6.518523e-002f, 0.000000e+000f, -2.734412e-001f,
  9.054027e-003f, -5.437416e-002f, 6.286785e-002f, 2.190497e-001f, -6.739837e-001f, 0.000000e+000f, -4.103929e-002f, 6.414400e-002f, 0.000000e+000f, -2.734412e-001f,
  1.048293e-002f, -5.537894e-002f, 6.094759e-002f, 2.236952e-001f, -6.824783e-001f, 0.000000e+000f, -4.082107e-002f, 6.380292e-002f, 0.000000e+000f, -2.734412e-001f,
  1.220740e-002f, -5.708698e-002f, 5.940445e-002f, 2.284194e-001f, -6.911167e-001f, 0.000000e+000f, -4.103929e-002f, 6.414400e-002f, 0.000000e+000f, -2.734412e-001f,
  1.332497e-002f, -5.874342e-002f, 5.926331e-002f, 2.305057e-001f, -6.949317e-001f, 0.000000e+000f, -4.170547e-002f, 6.518523e-002f, 0.000000e+000f, -2.734412e-001f,
  1.292627e-002f, -5.958748e-002f, 6.155656e-002f, 2.272072e-001f, -6.889002e-001f, 0.000000e+000f, -4.285565e-002f, 6.698295e-002f, 0.000000e+000f, -2.734412e-001f,
  1.021387e-002f, -5.893137e-002f, 6.715729e-002f, 2.161282e-001f, -6.686418e-001f, 0.000000e+000f, -4.455515e-002f, 6.963925e-002f, 0.000000e+000f, -2.734412e-001f,
  4.668487e-003f, -5.628539e-002f, 7.656867e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -4.690783e-002f, 7.331646e-002f, 0.000000e+000f, -2.734412e-001f,
  4.668487e-003f, -5.628539e-002f, 7.656867e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -2.978275e-002f, 4.655014e-002f, 0.000000e+000f, -2.734412e-001f,
  4.668487e-003f, -5.628539e-002f, 7.656867e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -2.842899e-002f, 4.443422e-002f, 0.000000e+000f, -2.734412e-001f,
  4.668487e-003f, -5.628539e-002f, 7.656867e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -2.719294e-002f, 4.250230e-002f, 0.000000e+000f, -2.734412e-001f,
  4.668487e-003f, -5.628539e-002f, 7.656867e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -2.605990e-002f, 4.073137e-002f, 0.000000e+000f, -2.734412e-001f,
  4.668487e-003f, -5.628539e-002f, 7.656867e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -2.501751e-002f, 3.910211e-002f, 0.000000e+000f, -2.734412e-001f,
  4.668487e-003f, -5.628539e-002f, 7.656867e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -2.405530e-002f, 3.759819e-002f, 0.000000e+000f, -2.734412e-001f,
  -5.468713e-003f, 5.837011e-002f, -1.032943e-002f, 6.442423e-002f, -4.479124e-001f, 0.000000e+000f, -2.913364e-002f, 4.197519e-002f, 0.000000e+000f, -3.745480e-001f,
  -5.468713e-003f, 5.935447e-002f, -2.065887e-002f, 1.288485e-001f, -5.379124e-001f, 0.000000e+000f, -2.104178e-002f, 3.342470e-002f, 0.000000e+000f, -3.745480e-001f,
  -5.468713e-003f, 6.230758e-002f, -5.164716e-002f, 3.221211e-001f, -8.079124e-001f, 0.000000e+000f, -1.490823e-002f, 2.686416e-002f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -1.525314e-001f, 2.323446e-001f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -7.866458e-002f, 1.198264e-001f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, -1.306817e-001f, 1.990619e-001f, 0.000000e+000f, -2.734412e-001f,
  -1.322315e-002f, -8.676115e-002f, 1.628414e-001f, 1.393603e-003f, -2.759894e-001f, 0.000000e+000f, -1.398079e-001f, 2.129633e-001f, 0.000000e+000f, -2.734412e-001f,
  -2.422161e-002f, -6.410347e-002f, 1.538478e-001f, 1.902461e-002f, -3.082286e-001f, 0.000000e+000f, -1.076749e-001f, 1.640166e-001f, 0.000000e+000f, -2.734412e-001f,
  -3.089502e-002f, -4.677416e-002f, 1.429352e-001f, 3.293479e-002f, -3.336640e-001f, 0.000000e+000f, -8.426139e-002f, 1.283518e-001f, 0.000000e+000f, -2.734412e-001f,
  -3.342260e-002f, -3.756258e-002f, 1.347684e-001f, 4.348571e-002f, -3.529568e-001f, 0.000000e+000f, -7.124639e-002f, 1.085266e-001f, 0.000000e+000f, -2.734412e-001f,
  -3.360357e-002f, -3.147824e-002f, 1.259202e-001f, 5.721852e-002f, -3.780679e-001f, 0.000000e+000f, -6.085765e-002f, 9.270185e-002f, 0.000000e+000f, -2.734412e-001f,
  -2.913928e-002f, -3.167273e-002f, 1.158580e-001f, 7.924948e-002f, -4.183526e-001f, 0.000000e+000f, -5.456572e-002f, 8.311763e-002f, 0.000000e+000f, -2.734412e-001f,
  -2.220091e-002f, -3.464816e-002f, 1.042911e-001f, 1.068959e-001f, -4.689053e-001f, 0.000000e+000f, -4.989289e-002f, 7.599970e-002f, 0.000000e+000f, -2.734412e-001f,
  -1.362556e-002f, -3.903347e-002f, 9.107358e-002f, 1.391016e-001f, -5.277950e-001f, 0.000000e+000f, -4.589671e-002f, 6.991249e-002f, 0.000000e+000f, -2.734412e-001f,
  -3.848484e-003f, -4.523842e-002f, 7.783943e-002f, 1.731129e-001f, -5.899863e-001f, 0.000000e+000f, -4.340131e-002f, 6.611136e-002f, 0.000000e+000f, -2.734412e-001f,
  6.376310e-003f, -5.186960e-002f, 6.421571e-002f, 2.082251e-001f, -6.541905e-001f, 0.000000e+000f, -4.132829e-002f, 6.295361e-002f, 0.000000e+000f, -2.734412e-001f,
  8.389618e-003f, -5.235569e-002f, 6.028464e-002f, 2.166526e-001f, -6.696006e-001f, 0.000000e+000f, -4.014277e-002f, 6.114776e-002f, 0.000000e+000f, -2.734412e-001f,
  8.682147e-003f, -5.179587e-002f, 5.875314e-002f, 2.190497e-001f, -6.739837e-001f, 0.000000e+000f, -3.935367e-002f, 5.994576e-002f, 0.000000e+000f, -2.734412e-001f,
  1.005236e-002f, -5.270493e-002f, 5.695856e-002f, 2.236952e-001f, -6.824783e-001f, 0.000000e+000f, -3.914441e-002f, 5.962701e-002f, 0.000000e+000f, -2.734412e-001f,
  1.170600e-002f, -5.427711e-002f, 5.551642e-002f, 2.284194e-001f, -6.911167e-001f, 0.000000e+000f, -3.935367e-002f, 5.994576e-002f, 0.000000e+000f, -2.734412e-001f,
  1.283772e-002f, -5.602882e-002f, 5.555878e-002f, 2.304017e-001f, -6.947414e-001f, 0.000000e+000f, -4.014277e-002f, 6.114776e-002f, 0.000000e+000f, -2.734412e-001f,
  1.213351e-002f, -5.666866e-002f, 5.816740e-002f, 2.259557e-001f, -6.866118e-001f, 0.000000e+000f, -4.132829e-002f, 6.295361e-002f, 0.000000e+000f, -2.734412e-001f,
  8.337851e-003f, -5.556139e-002f, 6.528787e-002f, 2.104080e-001f, -6.581821e-001f, 0.000000e+000f, -4.340131e-002f, 6.611136e-002f, 0.000000e+000f, -2.734412e-001f,
  4.476736e-003f, -5.379568e-002f, 7.155723e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -2.949585e-002f, 4.492976e-002f, 0.000000e+000f, -2.734412e-001f,
  4.476736e-003f, -5.379568e-002f, 7.155723e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -2.789530e-002f, 4.249171e-002f, 0.000000e+000f, -2.734412e-001f,
  4.476736e-003f, -5.379568e-002f, 7.155723e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -2.665551e-002f, 4.060319e-002f, 0.000000e+000f, -2.734412e-001f,
  4.476736e-003f, -5.379568e-002f, 7.155723e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -2.552123e-002f, 3.887540e-002f, 0.000000e+000f, -2.734412e-001f,
  4.476736e-003f, -5.379568e-002f, 7.155723e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -2.431414e-002f, 3.703670e-002f, 0.000000e+000f, -2.734412e-001f,
  4.476736e-003f, -5.379568e-002f, 7.155723e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -2.336684e-002f, 3.559371e-002f, 0.000000e+000f, -2.734412e-001f,
  -5.162798e-003f, 5.510493e-002f, -9.751613e-003f, 6.442423e-002f, -4.479124e-001f, 0.000000e+000f, -2.931460e-002f, 4.223591e-002f, 0.000000e+000f, -3.745480e-001f,
  -5.162798e-003f, 5.603424e-002f, -1.950323e-002f, 1.288485e-001f, -5.379124e-001f, 0.000000e+000f, -2.116778e-002f, 3.362485e-002f, 0.000000e+000f, -3.745480e-001f,
  -5.162798e-003f, 5.882215e-002f, -4.875807e-002f, 3.221211e-001f, -8.079124e-001f, 0.000000e+000f, -1.490823e-002f, 2.686416e-002f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -1.493039e-001f, 2.246524e-001f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -9.337350e-002f, 1.404959e-001f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, -1.165034e-001f, 1.752986e-001f, 0.000000e+000f, -2.734412e-001f,
  -1.880960e-002f, -7.361687e-002f, 1.533540e-001f, 1.211475e-002f, -2.955936e-001f, 0.000000e+000f, -1.193752e-001f, 1.796198e-001f, 0.000000e+000f, -2.734412e-001f,
  -2.895713e-002f, -5.022563e-002f, 1.411322e-001f, 2.899399e-002f, -3.264580e-001f, 0.000000e+000f, -8.793486e-002f, 1.323125e-001f, 0.000000e+000f, -2.734412e-001f,
  -3.271539e-002f, -3.737601e-002f, 1.303066e-001f, 4.348571e-002f, -3.529568e-001f, 0.000000e+000f, -6.973883e-002f, 1.049336e-001f, 0.000000e+000f, -2.734412e-001f,
  -3.247968e-002f, -3.110551e-002f, 1.203380e-001f, 6.010119e-002f, -3.833390e-001f, 0.000000e+000f, -5.840759e-002f, 8.788387e-002f, 0.000000e+000f, -2.734412e-001f,
  -2.520502e-002f, -3.280703e-002f, 1.064282e-001f, 9.300500e-002f, -4.435052e-001f, 0.000000e+000f, -5.095834e-002f, 7.667524e-002f, 0.000000e+000f, -2.734412e-001f,
  -1.591348e-002f, -3.707254e-002f, 9.181017e-002f, 1.294901e-001f, -5.102198e-001f, 0.000000e+000f, -4.591290e-002f, 6.908354e-002f, 0.000000e+000f, -2.734412e-001f,
  -3.767051e-003f, -4.435122e-002f, 7.526242e-002f, 1.731129e-001f, -5.899863e-001f, 0.000000e+000f, -4.248295e-002f, 6.392262e-002f, 0.000000e+000f, -2.734412e-001f,
  6.957653e-003f, -5.101334e-002f, 6.100575e-002f, 2.109121e-001f, -6.591039e-001f, 0.000000e+000f, -4.022585e-002f, 6.052645e-002f, 0.000000e+000f, -2.734412e-001f,
  8.160038e-003f, -5.064458e-002f, 5.772867e-002f, 2.172665e-001f, -6.707231e-001f, 0.000000e+000f, -3.888952e-002f, 5.851572e-002f, 0.000000e+000f, -2.734412e-001f,
  9.321097e-003f, -5.101489e-002f, 5.565721e-002f, 2.220084e-001f, -6.793940e-001f, 0.000000e+000f, -3.833880e-002f, 5.768706e-002f, 0.000000e+000f, -2.734412e-001f,
  1.145831e-002f, -5.291559e-002f, 5.367844e-002f, 2.284194e-001f, -6.911167e-001f, 0.000000e+000f, -3.852096e-002f, 5.796114e-002f, 0.000000e+000f, -2.734412e-001f,
  1.258127e-002f, -5.478805e-002f, 5.395347e-002f, 2.301349e-001f, -6.942537e-001f, 0.000000e+000f, -3.945324e-002f, 5.936393e-002f, 0.000000e+000f, -2.734412e-001f,
  1.071415e-002f, -5.508543e-002f, 5.862810e-002f, 2.208033e-001f, -6.771903e-001f, 0.000000e+000f, -4.122690e-002f, 6.203268e-002f, 0.000000e+000f, -2.734412e-001f,
  4.382010e-003f, -5.257591e-002f, 6.918820e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -4.402938e-002f, 6.624947e-002f, 0.000000e+000f, -2.734412e-001f,
  4.382010e-003f, -5.257591e-002f, 6.918820e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -2.751836e-002f, 4.140592e-002f, 0.000000e+000f, -2.734412e-001f,
  4.382010e-003f, -5.257591e-002f, 6.918820e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -2.589963e-002f, 3.897028e-002f, 0.000000e+000f, -2.734412e-001f,
  4.382010e-003f, -5.257591e-002f, 6.918820e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -2.446076e-002f, 3.680526e-002f, 0.000000e+000f, -2.734412e-001f,
  4.382010e-003f, -5.257591e-002f, 6.918820e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -2.317336e-002f, 3.486814e-002f, 0.000000e+000f, -2.734412e-001f,
  -5.016319e-003f, 5.354149e-002f, -9.474940e-003f, 6.442423e-002f, -4.479124e-001f, 0.000000e+000f, -2.949781e-002f, 4.249988e-002f, 0.000000e+000f, -3.745480e-001f,
  -5.016319e-003f, 5.715324e-002f, -4.737470e-002f, 3.221211e-001f, -8.079124e-001f, 0.000000e+000f, -2.104178e-002f, 3.342470e-002f, 0.000000e+000f, -3.745480e-001f,
  -5.016319e-003f, 5.489590e-002f, -2.368735e-002f, 1.610606e-001f, -5.829124e-001f, 0.000000e+000f, -1.473882e-002f, 2.655888e-002f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -1.461064e-001f, 2.172400e-001f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -1.033128e-001f, 1.536119e-001f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, -1.033128e-001f, 1.536119e-001f, 0.000000e+000f, -2.734412e-001f,
  -2.452392e-002f, -5.928374e-002f, 1.423631e-001f, 2.100132e-002f, -3.118431e-001f, 0.000000e+000f, -9.921514e-002f, 1.475192e-001f, 0.000000e+000f, -2.734412e-001f,
  -3.136051e-002f, -3.971946e-002f, 1.283878e-001f, 4.023965e-002f, -3.470212e-001f, 0.000000e+000f, -7.190061e-002f, 1.069062e-001f, 0.000000e+000f, -2.734412e-001f,
  -3.178410e-002f, -3.100524e-002f, 1.163674e-001f, 6.010119e-002f, -3.833390e-001f, 0.000000e+000f, -5.715673e-002f, 8.498413e-002f, 0.000000e+000f, -2.734412e-001f,
  -2.238938e-002f, -3.348737e-002f, 9.928854e-002f, 1.023302e-001f, -4.605567e-001f, 0.000000e+000f, -4.845025e-002f, 7.203880e-002f, 0.000000e+000f, -2.734412e-001f,
  -1.023826e-002f, -3.944879e-002f, 8.128917e-002f, 1.495429e-001f, -5.468874e-001f, 0.000000e+000f, -4.308644e-002f, 6.406357e-002f, 0.000000e+000f, -2.734412e-001f,
  5.194961e-003f, -4.896748e-002f, 6.132307e-002f, 2.048337e-001f, -6.479892e-001f, 0.000000e+000f, -3.982479e-002f, 5.921394e-002f, 0.000000e+000f, -2.734412e-001f,
  7.985283e-003f, -4.941781e-002f, 5.582391e-002f, 2.172665e-001f, -6.707231e-001f, 0.000000e+000f, -3.805667e-002f, 5.658499e-002f, 0.000000e+000f, -2.734412e-001f,
  9.628927e-003f, -5.013441e-002f, 5.325571e-002f, 2.236952e-001f, -6.824783e-001f, 0.000000e+000f, -3.749555e-002f, 5.575068e-002f, 0.000000e+000f, -2.734412e-001f,
  1.201151e-002f, -5.258506e-002f, 5.163216e-002f, 2.302755e-001f, -6.945107e-001f, 0.000000e+000f, -3.805667e-002f, 5.658499e-002f, 0.000000e+000f, -2.734412e-001f,
  1.130912e-002f, -5.385149e-002f, 5.506798e-002f, 2.244768e-001f, -6.839076e-001f, 0.000000e+000f, -3.982479e-002f, 5.921394e-002f, 0.000000e+000f, -2.734412e-001f,
  4.288165e-003f, -5.137360e-002f, 6.690533e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -4.308644e-002f, 6.406357e-002f, 0.000000e+000f, -2.734412e-001f,
  4.288165e-003f, -5.137360e-002f, 6.690533e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -2.651473e-002f, 3.942373e-002f, 0.000000e+000f, -2.734412e-001f,
  4.288165e-003f, -5.137360e-002f, 6.690533e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -2.462083e-002f, 3.660775e-002f, 0.000000e+000f, -2.734412e-001f,
  4.288165e-003f, -5.137360e-002f, 6.690533e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -2.297944e-002f, 3.416724e-002f, 0.000000e+000f, -2.734412e-001f,
  -4.873996e-003f, 5.202241e-002f, -9.206117e-003f, 6.442423e-002f, -4.479124e-001f, 0.000000e+000f, -2.949781e-002f, 4.249988e-002f, 0.000000e+000f, -3.745480e-001f,
  -4.873996e-003f, 5.553169e-002f, -4.603058e-002f, 3.221211e-001f, -8.079124e-001f, 0.000000e+000f, -2.079423e-002f, 3.303147e-002f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -1.429415e-001f, 2.100960e-001f, 0.000000e+000f, -2.734412e-001f,
  -1.622692e-002f, -7.466899e-002f, 1.448041e-001f, 9.109571e-003f, -2.900984e-001f, 0.000000e+000f, -1.194589e-001f, 1.755812e-001f, 0.000000e+000f, -2.734412e-001f,
  -3.068120e-002f, -3.938244e-002f, 1.241657e-001f, 4.023965e-002f, -3.470212e-001f, 0.000000e+000f, -7.034314e-002f, 1.033906e-001f, 0.000000e+000f, -2.734412e-001f,
  -2.730725e-002f, -3.114110e-002f, 1.047638e-001f, 7.924948e-002f, -4.183526e-001f, 0.000000e+000f, -5.113509e-002f, 7.515853e-002f, 0.000000e+000f, -2.734412e-001f,
  -1.001648e-002f, -3.876513e-002f, 7.861595e-002f, 1.495429e-001f, -5.468874e-001f, 0.000000e+000f, -4.215313e-002f, 6.195682e-002f, 0.000000e+000f, -2.734412e-001f,
  7.718763e-003f, -4.885418e-002f, 5.513102e-002f, 2.155399e-001f, -6.675660e-001f, 0.000000e+000f, -3.793755e-002f, 5.576074e-002f, 0.000000e+000f, -2.734412e-001f,
  9.420351e-003f, -4.888774e-002f, 5.150438e-002f, 2.236952e-001f, -6.824783e-001f, 0.000000e+000f, -3.668334e-002f, 5.391730e-002f, 0.000000e+000f, -2.734412e-001f,
  1.201436e-002f, -5.218138e-002f, 5.074150e-002f, 2.296935e-001f, -6.934465e-001f, 0.000000e+000f, -3.793755e-002f, 5.576074e-002f, 0.000000e+000f, -2.734412e-001f,
  4.195277e-003f, -5.018921e-002f, 6.470513e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -4.215313e-002f, 6.195682e-002f, 0.000000e+000f, -2.734412e-001f,
  4.195277e-003f, -5.018921e-002f, 6.470513e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -2.497963e-002f, 3.671515e-002f, 0.000000e+000f, -2.734412e-001f,
  4.195277e-003f, -5.018921e-002f, 6.470513e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -2.248167e-002f, 3.304363e-002f, 0.000000e+000f, -2.734412e-001f,
  -4.735711e-003f, 5.395614e-002f, -4.472460e-002f, 3.221211e-001f, -8.079124e-001f, 0.000000e+000f, -2.860394e-002f, 4.121201e-002f, 0.000000e+000f, -3.745480e-001f,
  -1.083495e-001f, 1.528872e-001f, 0.000000e+000f, 0.000000e+000f, -3.745480e-001f,
  4.759676e-002f, 1.224857e-001f, -2.358957e-002f, 1.324442e-002f, -1.635801e-001f, -6.098807e-002f, 9.198412e-002f, 0.000000e+000f, 0.000000e+000f, -3.745480e-001f,
  4.236265e-002f, 9.532443e-002f, -3.980700e-002f, 5.216810e-002f, -3.249114e-001f, -4.972240e-002f, 8.126749e-002f, 0.000000e+000f, 0.000000e+000f, -3.745480e-001f,
  1.553890e-002f, 7.458576e-002f, -4.480746e-002f, 1.476610e-001f, -5.434463e-001f, -3.242541e-002f, 5.842955e-002f, 0.000000e+000f, 0.000000e+000f, -3.745480e-001f,
  -1.197437e-002f, 6.681068e-002f, -4.189618e-002f, 2.837699e-001f, -7.541249e-001f, -2.269819e-002f, 4.610175e-002f, 0.000000e+000f, 0.000000e+000f, -3.745480e-001f,
  -1.461410e-002f, 6.751401e-002f, -4.892519e-002f, 3.681334e-001f, -8.590371e-001f, -1.667216e-002f, 3.930201e-002f, 0.000000e+000f, 0.000000e+000f, -3.745480e-001f,
  // Total number of coefficients: 3485
  // Maximum number of elevation coefficients: 5



 // Lite coefficients
 // 10 degrees loudspeakers
 // 32000 Hz sample rate
    // Coefficients
  // Generated by HRTFConv V5.90d on Wed Mar 10 11:21:49 1999
  0.000000e+000f, -7.991072e-002f, 1.534921e-001f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -4.121212e-002f, 7.916003e-002f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, -6.846375e-002f, 1.315048e-001f, 0.000000e+000f, -3.340893e-001f,
  6.720357e-003f, -6.715819e-002f, 1.042027e-001f, 8.306194e-002f, -4.584003e-001f, 0.000000e+000f, -7.324490e-002f, 1.406884e-001f, 0.000000e+000f, -3.340893e-001f,
  -3.343100e-004f, -4.851110e-002f, 9.441328e-002f, 9.960292e-002f, -4.831556e-001f, 0.000000e+000f, -5.641056e-002f, 1.083531e-001f, 0.000000e+000f, -3.340893e-001f,
  -4.937335e-003f, -3.481096e-002f, 8.508076e-002f, 1.127012e-001f, -5.027586e-001f, 0.000000e+000f, -4.414428e-002f, 8.479209e-002f, 0.000000e+000f, -3.340893e-001f,
  -7.017617e-003f, -2.755863e-002f, 7.882564e-002f, 1.226673e-001f, -5.176739e-001f, 0.000000e+000f, -3.732576e-002f, 7.169512e-002f, 0.000000e+000f, -3.340893e-001f,
  -7.930620e-003f, -2.258495e-002f, 7.264070e-002f, 1.356765e-001f, -5.371435e-001f, 0.000000e+000f, -3.188313e-002f, 6.124095e-002f, 0.000000e+000f, -3.340893e-001f,
  -6.616855e-003f, -2.189901e-002f, 6.647607e-002f, 1.566135e-001f, -5.684780e-001f, 0.000000e+000f, -2.858681e-002f, 5.490939e-002f, 0.000000e+000f, -3.340893e-001f,
  -4.160582e-003f, -2.313573e-002f, 5.978926e-002f, 1.829201e-001f, -6.078486e-001f, 0.000000e+000f, -2.613873e-002f, 5.020713e-002f, 0.000000e+000f, -3.340893e-001f,
  -1.003175e-003f, -2.534650e-002f, 5.238658e-002f, 2.134183e-001f, -6.534924e-001f, 0.000000e+000f, -2.404514e-002f, 4.618578e-002f, 0.000000e+000f, -3.340893e-001f,
  2.702305e-003f, -2.877156e-002f, 4.529423e-002f, 2.451859e-001f, -7.010360e-001f, 0.000000e+000f, -2.273781e-002f, 4.367466e-002f, 0.000000e+000f, -3.340893e-001f,
  6.518830e-003f, -3.241515e-002f, 3.821193e-002f, 2.772362e-001f, -7.490027e-001f, 0.000000e+000f, -2.165176e-002f, 4.158859e-002f, 0.000000e+000f, -3.340893e-001f,
  7.181664e-003f, -3.258488e-002f, 3.609245e-002f, 2.847911e-001f, -7.603094e-001f, 0.000000e+000f, -2.103067e-002f, 4.039560e-002f, 0.000000e+000f, -3.340893e-001f,
  7.218714e-003f, -3.219642e-002f, 3.520962e-002f, 2.869295e-001f, -7.635096e-001f, 0.000000e+000f, -2.061726e-002f, 3.960153e-002f, 0.000000e+000f, -3.340893e-001f,
  7.721092e-003f, -3.269218e-002f, 3.430837e-002f, 2.910598e-001f, -7.696912e-001f, 0.000000e+000f, -2.050763e-002f, 3.939095e-002f, 0.000000e+000f, -3.340893e-001f,
  8.368954e-003f, -3.359752e-002f, 3.365709e-002f, 2.952414e-001f, -7.759494e-001f, 0.000000e+000f, -2.061726e-002f, 3.960153e-002f, 0.000000e+000f, -3.340893e-001f,
  8.873978e-003f, -3.465510e-002f, 3.382522e-002f, 2.969904e-001f, -7.785668e-001f, 0.000000e+000f, -2.103067e-002f, 4.039560e-002f, 0.000000e+000f, -3.340893e-001f,
  8.722420e-003f, -3.512801e-002f, 3.529275e-002f, 2.930632e-001f, -7.726893e-001f, 0.000000e+000f, -2.165176e-002f, 4.158859e-002f, 0.000000e+000f, -3.340893e-001f,
  7.467814e-003f, -3.470286e-002f, 3.910493e-002f, 2.791986e-001f, -7.519396e-001f, 0.000000e+000f, -2.273781e-002f, 4.367466e-002f, 0.000000e+000f, -3.340893e-001f,
  6.116424e-003f, -3.384784e-002f, 4.244850e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -1.545278e-002f, 2.968162e-002f, 0.000000e+000f, -3.340893e-001f,
  6.116424e-003f, -3.384784e-002f, 4.244850e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -1.461426e-002f, 2.807099e-002f, 0.000000e+000f, -3.340893e-001f,
  6.116424e-003f, -3.384784e-002f, 4.244850e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -1.396473e-002f, 2.682339e-002f, 0.000000e+000f, -3.340893e-001f,
  6.116424e-003f, -3.384784e-002f, 4.244850e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -1.337049e-002f, 2.568197e-002f, 0.000000e+000f, -3.340893e-001f,
  6.116424e-003f, -3.384784e-002f, 4.244850e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -1.273810e-002f, 2.446728e-002f, 0.000000e+000f, -3.340893e-001f,
  6.116424e-003f, -3.384784e-002f, 4.244850e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -1.224181e-002f, 2.351401e-002f, 0.000000e+000f, -3.340893e-001f,
  -1.697290e-002f, 6.397310e-002f, -9.566751e-003f, 6.208862e-002f, -4.760040e-001f, 0.000000e+000f, -3.262194e-002f, 4.185681e-002f, 0.000000e+000f, -4.103394e-001f,
  -1.697290e-002f, 6.662087e-002f, -1.913350e-002f, 1.241772e-001f, -5.540040e-001f, 0.000000e+000f, -2.406598e-002f, 3.296906e-002f, 0.000000e+000f, -4.103394e-001f,
  -1.697290e-002f, 7.456419e-002f, -4.783376e-002f, 3.104431e-001f, -7.880040e-001f, 0.000000e+000f, -1.746852e-002f, 2.601343e-002f, 0.000000e+000f, -4.103394e-001f,
  0.000000e+000f, -1.056385e-001f, 1.881982e-001f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -5.448066e-002f, 9.705891e-002f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, -9.050613e-002f, 1.612394e-001f, 0.000000e+000f, -3.340893e-001f,
  1.079096e-002f, -9.205384e-002f, 1.297478e-001f, 7.845804e-002f, -4.515101e-001f, 0.000000e+000f, -1.015763e-001f, 1.809611e-001f, 0.000000e+000f, -3.340893e-001f,
  8.533907e-004f, -6.754629e-002f, 1.176272e-001f, 9.766317e-002f, -4.802526e-001f, 0.000000e+000f, -7.762667e-002f, 1.382942e-001f, 0.000000e+000f, -3.340893e-001f,
  -5.225977e-003f, -5.092500e-002f, 1.073109e-001f, 1.089857e-001f, -4.971980e-001f, 0.000000e+000f, -6.221747e-002f, 1.108423e-001f, 0.000000e+000f, -3.340893e-001f,
  -8.501960e-003f, -4.041947e-002f, 9.899241e-002f, 1.195984e-001f, -5.130809e-001f, 0.000000e+000f, -5.198592e-002f, 9.261446e-002f, 0.000000e+000f, -3.340893e-001f,
  -1.032337e-002f, -3.343175e-002f, 9.232446e-002f, 1.291491e-001f, -5.273746e-001f, 0.000000e+000f, -4.489469e-002f, 7.998122e-002f, 0.000000e+000f, -3.340893e-001f,
  -9.930477e-003f, -3.028312e-002f, 8.546810e-002f, 1.448944e-001f, -5.509392e-001f, 0.000000e+000f, -3.980340e-002f, 7.091094e-002f, 0.000000e+000f, -3.340893e-001f,
  -7.183961e-003f, -3.063206e-002f, 7.737272e-002f, 1.697056e-001f, -5.880718e-001f, 0.000000e+000f, -3.605509e-002f, 6.423321e-002f, 0.000000e+000f, -3.340893e-001f,
  -3.813627e-003f, -3.217538e-002f, 6.942528e-002f, 1.957031e-001f, -6.269796e-001f, 0.000000e+000f, -3.325414e-002f, 5.924324e-002f, 0.000000e+000f, -3.340893e-001f,
  1.382187e-004f, -3.475340e-002f, 6.147553e-002f, 2.232316e-001f, -6.681791e-001f, 0.000000e+000f, -3.115256e-002f, 5.549922e-002f, 0.000000e+000f, -3.340893e-001f,
  5.323140e-003f, -3.901253e-002f, 5.260714e-002f, 2.561653e-001f, -7.174677e-001f, 0.000000e+000f, -2.959010e-002f, 5.271564e-002f, 0.000000e+000f, -3.340893e-001f,
  8.961754e-003f, -4.186068e-002f, 4.613280e-002f, 2.796513e-001f, -7.526170e-001f, 0.000000e+000f, -2.846142e-002f, 5.070486e-002f, 0.000000e+000f, -3.340893e-001f,
  9.469276e-003f, -4.161814e-002f, 4.408991e-002f, 2.850126e-001f, -7.606409e-001f, 0.000000e+000f, -2.769756e-002f, 4.934402e-002f, 0.000000e+000f, -3.340893e-001f,
  9.542829e-003f, -4.123330e-002f, 4.317086e-002f, 2.869295e-001f, -7.635096e-001f, 0.000000e+000f, -2.725513e-002f, 4.855583e-002f, 0.000000e+000f, -3.340893e-001f,
  1.020695e-002f, -4.179619e-002f, 4.206583e-002f, 2.910598e-001f, -7.696912e-001f, 0.000000e+000f, -2.711021e-002f, 4.829764e-002f, 0.000000e+000f, -3.340893e-001f,
  1.106340e-002f, -4.287374e-002f, 4.126729e-002f, 2.952414e-001f, -7.759494e-001f, 0.000000e+000f, -2.725513e-002f, 4.855583e-002f, 0.000000e+000f, -3.340893e-001f,
  1.168161e-002f, -4.401422e-002f, 4.133699e-002f, 2.970821e-001f, -7.787041e-001f, 0.000000e+000f, -2.769756e-002f, 4.934402e-002f, 0.000000e+000f, -3.340893e-001f,
  1.163218e-002f, -4.477229e-002f, 4.284440e-002f, 2.941703e-001f, -7.743463e-001f, 0.000000e+000f, -2.846142e-002f, 5.070486e-002f, 0.000000e+000f, -3.340893e-001f,
  1.052781e-002f, -4.474273e-002f, 4.629683e-002f, 2.843228e-001f, -7.596084e-001f, 0.000000e+000f, -2.959010e-002f, 5.271564e-002f, 0.000000e+000f, -3.340893e-001f,
  8.085649e-003f, -4.361934e-002f, 5.204653e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -3.115256e-002f, 5.549922e-002f, 0.000000e+000f, -3.340893e-001f,
  8.085649e-003f, -4.361934e-002f, 5.204653e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -1.977941e-002f, 3.523760e-002f, 0.000000e+000f, -3.340893e-001f,
  8.085649e-003f, -4.361934e-002f, 5.204653e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -1.888034e-002f, 3.363589e-002f, 0.000000e+000f, -3.340893e-001f,
  8.085649e-003f, -4.361934e-002f, 5.204653e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -1.805946e-002f, 3.217346e-002f, 0.000000e+000f, -3.340893e-001f,
  8.085649e-003f, -4.361934e-002f, 5.204653e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -1.730698e-002f, 3.083290e-002f, 0.000000e+000f, -3.340893e-001f,
  8.085649e-003f, -4.361934e-002f, 5.204653e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -1.661470e-002f, 2.959958e-002f, 0.000000e+000f, -3.340893e-001f,
  8.085649e-003f, -4.361934e-002f, 5.204653e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -1.597567e-002f, 2.846114e-002f, 0.000000e+000f, -3.340893e-001f,
  -1.904391e-002f, 7.177900e-002f, -1.073407e-002f, 6.208862e-002f, -4.760040e-001f, 0.000000e+000f, -3.242057e-002f, 4.159844e-002f, 0.000000e+000f, -4.103394e-001f,
  -1.904391e-002f, 7.474985e-002f, -2.146814e-002f, 1.241772e-001f, -5.540040e-001f, 0.000000e+000f, -2.392274e-002f, 3.277282e-002f, 0.000000e+000f, -4.103394e-001f,
  -1.904391e-002f, 8.366240e-002f, -5.367036e-002f, 3.104431e-001f, -7.880040e-001f, 0.000000e+000f, -1.746852e-002f, 2.601343e-002f, 0.000000e+000f, -4.103394e-001f,
  0.000000e+000f, -1.386425e-001f, 2.312760e-001f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -6.219209e-002f, 1.037455e-001f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, -1.239109e-001f, 2.067014e-001f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -9.803508e-002f, 1.635368e-001f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, -9.803508e-002f, 1.635368e-001f, 0.000000e+000f, -3.340893e-001f,
  7.053010e-003f, -1.028331e-001f, 1.519142e-001f, 9.029347e-002f, -4.692230e-001f, 0.000000e+000f, -1.158662e-001f, 1.932817e-001f, 0.000000e+000f, -3.340893e-001f,
  -2.126343e-003f, -8.040507e-002f, 1.400444e-001f, 1.014615e-001f, -4.859371e-001f, 0.000000e+000f, -9.414672e-002f, 1.570505e-001f, 0.000000e+000f, -3.340893e-001f,
  -7.755779e-003f, -6.499385e-002f, 1.300013e-001f, 1.108564e-001f, -4.999976e-001f, 0.000000e+000f, -7.903773e-002f, 1.318465e-001f, 0.000000e+000f, -3.340893e-001f,
  -1.115817e-002f, -5.431263e-002f, 1.216514e-001f, 1.195984e-001f, -5.130809e-001f, 0.000000e+000f, -6.822756e-002f, 1.138135e-001f, 0.000000e+000f, -3.340893e-001f,
  -1.330612e-002f, -4.659922e-002f, 1.147614e-001f, 1.273791e-001f, -5.247256e-001f, 0.000000e+000f, -6.025928e-002f, 1.005213e-001f, 0.000000e+000f, -3.340893e-001f,
  -1.362760e-002f, -4.203278e-002f, 1.080385e-001f, 1.384120e-001f, -5.412376e-001f, 0.000000e+000f, -5.423687e-002f, 9.047502e-002f, 0.000000e+000f, -3.340893e-001f,
  -1.148003e-002f, -4.089449e-002f, 1.001636e-001f, 1.566135e-001f, -5.684780e-001f, 0.000000e+000f, -4.959719e-002f, 8.273536e-002f, 0.000000e+000f, -3.340893e-001f,
  -7.952361e-003f, -4.171998e-002f, 9.172414e-002f, 1.785787e-001f, -6.013512e-001f, 0.000000e+000f, -4.597516e-002f, 7.669328e-002f, 0.000000e+000f, -3.340893e-001f,
  -4.238726e-003f, -4.313006e-002f, 8.374238e-002f, 1.999901e-001f, -6.333957e-001f, 0.000000e+000f, -4.312690e-002f, 7.194197e-002f, 0.000000e+000f, -3.340893e-001f,
  1.814015e-004f, -4.559063e-002f, 7.554703e-002f, 2.232316e-001f, -6.681791e-001f, 0.000000e+000f, -4.088537e-002f, 6.820276e-002f, 0.000000e+000f, -3.340893e-001f,
  5.852281e-003f, -4.958087e-002f, 6.642292e-002f, 2.507517e-001f, -7.093658e-001f, 0.000000e+000f, -3.913394e-002f, 6.528112e-002f, 0.000000e+000f, -3.340893e-001f,
  1.071087e-002f, -5.302581e-002f, 5.864952e-002f, 2.741800e-001f, -7.444287e-001f, 0.000000e+000f, -3.779034e-002f, 6.303980e-002f, 0.000000e+000f, -3.340893e-001f,
  1.241398e-002f, -5.366365e-002f, 5.497429e-002f, 2.837970e-001f, -7.588215e-001f, 0.000000e+000f, -3.679657e-002f, 6.138205e-002f, 0.000000e+000f, -3.340893e-001f,
  1.235688e-002f, -5.289324e-002f, 5.384802e-002f, 2.853392e-001f, -7.611297e-001f, 0.000000e+000f, -3.611254e-002f, 6.024098e-002f, 0.000000e+000f, -3.340893e-001f,
  1.262842e-002f, -5.273470e-002f, 5.282792e-002f, 2.875160e-001f, -7.643874e-001f, 0.000000e+000f, -3.571200e-002f, 5.957282e-002f, 0.000000e+000f, -3.340893e-001f,
  1.339585e-002f, -5.333544e-002f, 5.169453e-002f, 2.910598e-001f, -7.696912e-001f, 0.000000e+000f, -3.558009e-002f, 5.935278e-002f, 0.000000e+000f, -3.340893e-001f,
  1.433883e-002f, -5.438527e-002f, 5.082176e-002f, 2.946414e-001f, -7.750513e-001f, 0.000000e+000f, -3.571200e-002f, 5.957282e-002f, 0.000000e+000f, -3.340893e-001f,
  1.513075e-002f, -5.557818e-002f, 5.060800e-002f, 2.968792e-001f, -7.784004e-001f, 0.000000e+000f, -3.611254e-002f, 6.024098e-002f, 0.000000e+000f, -3.340893e-001f,
  1.544226e-002f, -5.660988e-002f, 5.146220e-002f, 2.963660e-001f, -7.776324e-001f, 0.000000e+000f, -3.679657e-002f, 6.138205e-002f, 0.000000e+000f, -3.340893e-001f,
  1.495904e-002f, -5.718938e-002f, 5.377354e-002f, 2.917531e-001f, -7.707286e-001f, 0.000000e+000f, -3.779034e-002f, 6.303980e-002f, 0.000000e+000f, -3.340893e-001f,
  1.341192e-002f, -5.706287e-002f, 5.786770e-002f, 2.818829e-001f, -7.559569e-001f, 0.000000e+000f, -3.913394e-002f, 6.528112e-002f, 0.000000e+000f, -3.340893e-001f,
  1.061180e-002f, -5.604386e-002f, 6.395977e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -4.088537e-002f, 6.820276e-002f, 0.000000e+000f, -3.340893e-001f,
  1.061180e-002f, -5.604386e-002f, 6.395977e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -2.616664e-002f, 4.364977e-002f, 0.000000e+000f, -3.340893e-001f,
  1.061180e-002f, -5.604386e-002f, 6.395977e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -2.516023e-002f, 4.197093e-002f, 0.000000e+000f, -3.340893e-001f,
  1.061180e-002f, -5.604386e-002f, 6.395977e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -2.422837e-002f, 4.041645e-002f, 0.000000e+000f, -3.340893e-001f,
  1.061180e-002f, -5.604386e-002f, 6.395977e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -2.336307e-002f, 3.897301e-002f, 0.000000e+000f, -3.340893e-001f,
  1.061180e-002f, -5.604386e-002f, 6.395977e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -2.255744e-002f, 3.762911e-002f, 0.000000e+000f, -3.340893e-001f,
  1.061180e-002f, -5.604386e-002f, 6.395977e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -2.180553e-002f, 3.637481e-002f, 0.000000e+000f, -3.340893e-001f,
  1.061180e-002f, -5.604386e-002f, 6.395977e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -2.110213e-002f, 3.520143e-002f, 0.000000e+000f, -3.340893e-001f,
  -2.136761e-002f, 8.053736e-002f, -1.204383e-002f, 6.208862e-002f, -4.760040e-001f, 0.000000e+000f, -3.282583e-002f, 4.211842e-002f, 0.000000e+000f, -4.103394e-001f,
  -2.136761e-002f, 8.387071e-002f, -2.408765e-002f, 1.241772e-001f, -5.540040e-001f, 0.000000e+000f, -2.435769e-002f, 3.336869e-002f, 0.000000e+000f, -4.103394e-001f,
  -2.136761e-002f, 8.720406e-002f, -3.613148e-002f, 1.862659e-001f, -6.320040e-001f, 0.000000e+000f, -1.787955e-002f, 2.662551e-002f, 0.000000e+000f, -4.103394e-001f,
  -2.136761e-002f, 9.387076e-002f, -6.021913e-002f, 3.104431e-001f, -7.880040e-001f, 0.000000e+000f, -1.292275e-002f, 2.141883e-002f, 0.000000e+000f, -4.103394e-001f,
  0.000000e+000f, -1.808817e-001f, 2.848182e-001f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -8.113967e-002f, 1.277633e-001f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, -1.616618e-001f, 2.545543e-001f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -1.279027e-001f, 2.013968e-001f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, -1.279027e-001f, 2.013968e-001f, 0.000000e+000f, -3.340893e-001f,
  9.201796e-003f, -1.333018e-001f, 1.870835e-001f, 9.029347e-002f, -4.692230e-001f, 0.000000e+000f, -1.511663e-001f, 2.380279e-001f, 0.000000e+000f, -3.340893e-001f,
  -2.774160e-003f, -1.051610e-001f, 1.724657e-001f, 1.014615e-001f, -4.859371e-001f, 0.000000e+000f, -1.228297e-001f, 1.934089e-001f, 0.000000e+000f, -3.340893e-001f,
  -1.011867e-002f, -8.574148e-002f, 1.600976e-001f, 1.108564e-001f, -4.999976e-001f, 0.000000e+000f, -1.031176e-001f, 1.623699e-001f, 0.000000e+000f, -3.340893e-001f,
  -1.455765e-002f, -7.222130e-002f, 1.498146e-001f, 1.195984e-001f, -5.130809e-001f, 0.000000e+000f, -8.901392e-002f, 1.401622e-001f, 0.000000e+000f, -3.340893e-001f,
  -1.735999e-002f, -6.242003e-002f, 1.413295e-001f, 1.273791e-001f, -5.247256e-001f, 0.000000e+000f, -7.861801e-002f, 1.237927e-001f, 0.000000e+000f, -3.340893e-001f,
  -1.777942e-002f, -5.650160e-002f, 1.330502e-001f, 1.384120e-001f, -5.412376e-001f, 0.000000e+000f, -7.076080e-002f, 1.114207e-001f, 0.000000e+000f, -3.340893e-001f,
  -1.497756e-002f, -5.475444e-002f, 1.233522e-001f, 1.566135e-001f, -5.684780e-001f, 0.000000e+000f, -6.470759e-002f, 1.018892e-001f, 0.000000e+000f, -3.340893e-001f,
  -1.037515e-002f, -5.540093e-002f, 1.129590e-001f, 1.785787e-001f, -6.013512e-001f, 0.000000e+000f, -5.998206e-002f, 9.444835e-002f, 0.000000e+000f, -3.340893e-001f,
  -5.530106e-003f, -5.678742e-002f, 1.031294e-001f, 1.999901e-001f, -6.333957e-001f, 0.000000e+000f, -5.626605e-002f, 8.859708e-002f, 0.000000e+000f, -3.340893e-001f,
  2.366678e-004f, -5.945823e-002f, 9.303674e-002f, 2.232316e-001f, -6.681791e-001f, 0.000000e+000f, -5.334160e-002f, 8.399222e-002f, 0.000000e+000f, -3.340893e-001f,
  7.635251e-003f, -6.397212e-002f, 8.180033e-002f, 2.507517e-001f, -7.093658e-001f, 0.000000e+000f, -5.105658e-002f, 8.039420e-002f, 0.000000e+000f, -3.340893e-001f,
  1.397407e-002f, -6.787369e-002f, 7.222733e-002f, 2.741800e-001f, -7.444287e-001f, 0.000000e+000f, -4.930363e-002f, 7.763399e-002f, 0.000000e+000f, -3.340893e-001f,
  1.619605e-002f, -6.849803e-002f, 6.770125e-002f, 2.837970e-001f, -7.588215e-001f, 0.000000e+000f, -4.800710e-002f, 7.559246e-002f, 0.000000e+000f, -3.340893e-001f,
  1.612156e-002f, -6.749987e-002f, 6.631424e-002f, 2.853392e-001f, -7.611297e-001f, 0.000000e+000f, -4.711467e-002f, 7.418723e-002f, 0.000000e+000f, -3.340893e-001f,
  1.647583e-002f, -6.725989e-002f, 6.505798e-002f, 2.875160e-001f, -7.643874e-001f, 0.000000e+000f, -4.659210e-002f, 7.336438e-002f, 0.000000e+000f, -3.340893e-001f,
  1.747706e-002f, -6.795001e-002f, 6.366221e-002f, 2.910598e-001f, -7.696912e-001f, 0.000000e+000f, -4.642000e-002f, 7.309340e-002f, 0.000000e+000f, -3.340893e-001f,
  1.870733e-002f, -6.920460e-002f, 6.258738e-002f, 2.946414e-001f, -7.750513e-001f, 0.000000e+000f, -4.659210e-002f, 7.336438e-002f, 0.000000e+000f, -3.340893e-001f,
  1.974052e-002f, -7.066431e-002f, 6.232413e-002f, 2.968792e-001f, -7.784004e-001f, 0.000000e+000f, -4.711467e-002f, 7.418723e-002f, 0.000000e+000f, -3.340893e-001f,
  2.014694e-002f, -7.197232e-002f, 6.337609e-002f, 2.963660e-001f, -7.776324e-001f, 0.000000e+000f, -4.800710e-002f, 7.559246e-002f, 0.000000e+000f, -3.340893e-001f,
  1.951650e-002f, -7.278733e-002f, 6.622253e-002f, 2.917531e-001f, -7.707286e-001f, 0.000000e+000f, -4.930363e-002f, 7.763399e-002f, 0.000000e+000f, -3.340893e-001f,
  1.749803e-002f, -7.281108e-002f, 7.126451e-002f, 2.818829e-001f, -7.559569e-001f, 0.000000e+000f, -5.105658e-002f, 8.039420e-002f, 0.000000e+000f, -3.340893e-001f,
  1.384481e-002f, -7.182333e-002f, 7.876695e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -5.334160e-002f, 8.399222e-002f, 0.000000e+000f, -3.340893e-001f,
  1.384481e-002f, -7.182333e-002f, 7.876695e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -3.413862e-002f, 5.375502e-002f, 0.000000e+000f, -3.340893e-001f,
  1.384481e-002f, -7.182333e-002f, 7.876695e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -3.282560e-002f, 5.168752e-002f, 0.000000e+000f, -3.340893e-001f,
  1.384481e-002f, -7.182333e-002f, 7.876695e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -3.160984e-002f, 4.977317e-002f, 0.000000e+000f, -3.340893e-001f,
  1.384481e-002f, -7.182333e-002f, 7.876695e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -3.048091e-002f, 4.799556e-002f, 0.000000e+000f, -3.340893e-001f,
  1.384481e-002f, -7.182333e-002f, 7.876695e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -2.942985e-002f, 4.634054e-002f, 0.000000e+000f, -3.340893e-001f,
  1.384481e-002f, -7.182333e-002f, 7.876695e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -2.844885e-002f, 4.479585e-002f, 0.000000e+000f, -3.340893e-001f,
  1.384481e-002f, -7.182333e-002f, 7.876695e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -2.753115e-002f, 4.335082e-002f, 0.000000e+000f, -3.340893e-001f,
  -2.397486e-002f, 9.036441e-002f, -1.351340e-002f, 6.208862e-002f, -4.760040e-001f, 0.000000e+000f, -3.282583e-002f, 4.211842e-002f, 0.000000e+000f, -4.103394e-001f,
  -2.397486e-002f, 9.410449e-002f, -2.702679e-002f, 1.241772e-001f, -5.540040e-001f, 0.000000e+000f, -2.435769e-002f, 3.336869e-002f, 0.000000e+000f, -4.103394e-001f,
  -2.397486e-002f, 9.784456e-002f, -4.054019e-002f, 1.862659e-001f, -6.320040e-001f, 0.000000e+000f, -1.787955e-002f, 2.662551e-002f, 0.000000e+000f, -4.103394e-001f,
  -2.397486e-002f, 1.053247e-001f, -6.756698e-002f, 3.104431e-001f, -7.880040e-001f, 0.000000e+000f, -1.292275e-002f, 2.141883e-002f, 0.000000e+000f, -4.103394e-001f,
  0.000000e+000f, 0.000000e+000f, 3.514500e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 0.000000e+000f, 1.576530e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 3.141061e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 0.000000e+000f, 2.485127e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 2.485127e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.787893e-002f, 2.308508e-001f, 0.000000e+000f, -1.351337e-001f, 0.000000e+000f, 0.000000e+000f, 2.937134e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 5.390145e-003f, 2.128133e-001f, 0.000000e+000f, -1.518478e-001f, 0.000000e+000f, 0.000000e+000f, 2.386559e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 1.966041e-002f, 1.975517e-001f, 0.000000e+000f, -1.659083e-001f, 0.000000e+000f, 0.000000e+000f, 2.003556e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 2.828526e-002f, 1.848630e-001f, 0.000000e+000f, -1.789916e-001f, 0.000000e+000f, 0.000000e+000f, 1.729525e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 3.373016e-002f, 1.743929e-001f, 0.000000e+000f, -1.906362e-001f, 0.000000e+000f, 0.000000e+000f, 1.527534e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 3.454510e-002f, 1.641767e-001f, 0.000000e+000f, -2.071482e-001f, 0.000000e+000f, 0.000000e+000f, 1.374870e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 2.910115e-002f, 1.522099e-001f, 0.000000e+000f, -2.343887e-001f, 0.000000e+000f, 0.000000e+000f, 1.257257e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 2.015873e-002f, 1.393852e-001f, 0.000000e+000f, -2.672619e-001f, 0.000000e+000f, 0.000000e+000f, 1.165441e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 1.074490e-002f, 1.272560e-001f, 0.000000e+000f, -2.993064e-001f, 0.000000e+000f, 0.000000e+000f, 1.093239e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -4.598413e-004f, 1.148022e-001f, 0.000000e+000f, -3.340897e-001f, 0.000000e+000f, 0.000000e+000f, 1.036418e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.483516e-002f, 1.009371e-001f, 0.000000e+000f, -3.752765e-001f, 0.000000e+000f, 0.000000e+000f, 9.920204e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.715138e-002f, 8.912456e-002f, 0.000000e+000f, -4.103394e-001f, 0.000000e+000f, 0.000000e+000f, 9.579610e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -3.146864e-002f, 8.353964e-002f, 0.000000e+000f, -4.247322e-001f, 0.000000e+000f, 0.000000e+000f, 9.327696e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -3.132391e-002f, 8.182814e-002f, 0.000000e+000f, -4.270403e-001f, 0.000000e+000f, 0.000000e+000f, 9.154298e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -3.201225e-002f, 8.027799e-002f, 0.000000e+000f, -4.302980e-001f, 0.000000e+000f, 0.000000e+000f, 9.052763e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -3.395762e-002f, 7.855568e-002f, 0.000000e+000f, -4.356018e-001f, 0.000000e+000f, 0.000000e+000f, 9.019325e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -3.634801e-002f, 7.722940e-002f, 0.000000e+000f, -4.409620e-001f, 0.000000e+000f, 0.000000e+000f, 9.052763e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -3.835550e-002f, 7.690457e-002f, 0.000000e+000f, -4.443111e-001f, 0.000000e+000f, 0.000000e+000f, 9.154298e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -3.914515e-002f, 7.820262e-002f, 0.000000e+000f, -4.435430e-001f, 0.000000e+000f, 0.000000e+000f, 9.327696e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -3.792021e-002f, 8.171497e-002f, 0.000000e+000f, -4.366393e-001f, 0.000000e+000f, 0.000000e+000f, 9.579610e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -3.399836e-002f, 8.793650e-002f, 0.000000e+000f, -4.218676e-001f, 0.000000e+000f, 0.000000e+000f, 9.920204e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.690023e-002f, 9.719410e-002f, 0.000000e+000f, -3.980040e-001f, 0.000000e+000f, 0.000000e+000f, 1.036418e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.690023e-002f, 9.719410e-002f, 0.000000e+000f, -3.980040e-001f, 0.000000e+000f, 0.000000e+000f, 6.633075e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.690023e-002f, 9.719410e-002f, 0.000000e+000f, -3.980040e-001f, 0.000000e+000f, 0.000000e+000f, 6.377957e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.690023e-002f, 9.719410e-002f, 0.000000e+000f, -3.980040e-001f, 0.000000e+000f, 0.000000e+000f, 6.141736e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.690023e-002f, 9.719410e-002f, 0.000000e+000f, -3.980040e-001f, 0.000000e+000f, 0.000000e+000f, 5.922389e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.690023e-002f, 9.719410e-002f, 0.000000e+000f, -3.980040e-001f, 0.000000e+000f, 0.000000e+000f, 5.718168e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.690023e-002f, 9.719410e-002f, 0.000000e+000f, -3.980040e-001f, 0.000000e+000f, 0.000000e+000f, 5.527563e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.690023e-002f, 9.719410e-002f, 0.000000e+000f, -3.980040e-001f, 0.000000e+000f, 0.000000e+000f, 5.349254e-002f, 0.000000e+000f, 0.000000e+000f,
  -2.690023e-002f, 1.013905e-001f, -1.516228e-002f, 6.208862e-002f, -4.760040e-001f, -3.504619e-002f, 4.433878e-002f, 0.000000e+000f, 0.000000e+000f, -4.103394e-001f,
  -2.690023e-002f, 1.055870e-001f, -3.032456e-002f, 1.241772e-001f, -5.540040e-001f, -2.787954e-002f, 3.689053e-002f, 0.000000e+000f, 0.000000e+000f, -4.103394e-001f,
  -2.690023e-002f, 1.097834e-001f, -4.548684e-002f, 1.862659e-001f, -6.320040e-001f, -2.207420e-002f, 3.082016e-002f, 0.000000e+000f, 0.000000e+000f, -4.103394e-001f,
  -2.690023e-002f, 1.181763e-001f, -7.581140e-002f, 3.104431e-001f, -7.880040e-001f, -1.736870e-002f, 2.586478e-002f, 0.000000e+000f, 0.000000e+000f, -4.103394e-001f,
  0.000000e+000f, -2.149452e-001f, 3.075786e-001f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -9.641982e-002f, 1.379732e-001f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, -1.921058e-001f, 2.748964e-001f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -1.519892e-001f, 2.174909e-001f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, -1.519892e-001f, 2.174909e-001f, 0.000000e+000f, -3.340893e-001f,
  1.093467e-002f, -1.568344e-001f, 2.020338e-001f, 9.029347e-002f, -4.692230e-001f, 0.000000e+000f, -1.796338e-001f, 2.570493e-001f, 0.000000e+000f, -3.340893e-001f,
  -3.296587e-003f, -1.254383e-001f, 1.862479e-001f, 1.014615e-001f, -4.859371e-001f, 0.000000e+000f, -1.459609e-001f, 2.088646e-001f, 0.000000e+000f, -3.340893e-001f,
  -1.202421e-002f, -1.036155e-001f, 1.728914e-001f, 1.108564e-001f, -4.999976e-001f, 0.000000e+000f, -1.225366e-001f, 1.753453e-001f, 0.000000e+000f, -3.340893e-001f,
  -1.729913e-002f, -8.830692e-002f, 1.617866e-001f, 1.195984e-001f, -5.130809e-001f, 0.000000e+000f, -1.057769e-001f, 1.513629e-001f, 0.000000e+000f, -3.340893e-001f,
  -2.062921e-002f, -7.713824e-002f, 1.526235e-001f, 1.273791e-001f, -5.247256e-001f, 0.000000e+000f, -9.342329e-002f, 1.336853e-001f, 0.000000e+000f, -3.340893e-001f,
  -2.112762e-002f, -7.017685e-002f, 1.436826e-001f, 1.384120e-001f, -5.412376e-001f, 0.000000e+000f, -8.408642e-002f, 1.203246e-001f, 0.000000e+000f, -3.340893e-001f,
  -1.779813e-002f, -6.762239e-002f, 1.332096e-001f, 1.566135e-001f, -5.684780e-001f, 0.000000e+000f, -7.689327e-002f, 1.100314e-001f, 0.000000e+000f, -3.340893e-001f,
  -1.232898e-002f, -6.760501e-002f, 1.219858e-001f, 1.785787e-001f, -6.013512e-001f, 0.000000e+000f, -7.127783e-002f, 1.019959e-001f, 0.000000e+000f, -3.340893e-001f,
  -6.571530e-003f, -6.842556e-002f, 1.113707e-001f, 1.999901e-001f, -6.333957e-001f, 0.000000e+000f, -6.686202e-002f, 9.567709e-002f, 0.000000e+000f, -3.340893e-001f,
  2.812368e-004f, -7.061496e-002f, 1.004715e-001f, 2.232316e-001f, -6.681791e-001f, 0.000000e+000f, -6.338684e-002f, 9.070424e-002f, 0.000000e+000f, -3.340893e-001f,
  9.073115e-003f, -7.471597e-002f, 8.833719e-002f, 2.507517e-001f, -7.093658e-001f, 0.000000e+000f, -6.067151e-002f, 8.681869e-002f, 0.000000e+000f, -3.340893e-001f,
  1.660566e-002f, -7.827026e-002f, 7.799918e-002f, 2.741800e-001f, -7.444287e-001f, 0.000000e+000f, -5.858845e-002f, 8.383791e-002f, 0.000000e+000f, -3.340893e-001f,
  1.924607e-002f, -7.863287e-002f, 7.311142e-002f, 2.837970e-001f, -7.588215e-001f, 0.000000e+000f, -5.704775e-002f, 8.163324e-002f, 0.000000e+000f, -3.340893e-001f,
  1.915756e-002f, -7.745947e-002f, 7.161357e-002f, 2.853392e-001f, -7.611297e-001f, 0.000000e+000f, -5.598726e-002f, 8.011571e-002f, 0.000000e+000f, -3.340893e-001f,
  1.957854e-002f, -7.711382e-002f, 7.025692e-002f, 2.875160e-001f, -7.643874e-001f, 0.000000e+000f, -5.536628e-002f, 7.922711e-002f, 0.000000e+000f, -3.340893e-001f,
  2.076832e-002f, -7.776299e-002f, 6.874960e-002f, 2.910598e-001f, -7.696912e-001f, 0.000000e+000f, -5.516177e-002f, 7.893446e-002f, 0.000000e+000f, -3.340893e-001f,
  2.223027e-002f, -7.904385e-002f, 6.758889e-002f, 2.946414e-001f, -7.750513e-001f, 0.000000e+000f, -5.536628e-002f, 7.922711e-002f, 0.000000e+000f, -3.340893e-001f,
  2.345804e-002f, -8.060207e-002f, 6.730460e-002f, 2.968792e-001f, -7.784004e-001f, 0.000000e+000f, -5.598726e-002f, 8.011571e-002f, 0.000000e+000f, -3.340893e-001f,
  2.394099e-002f, -8.208704e-002f, 6.844062e-002f, 2.963660e-001f, -7.776324e-001f, 0.000000e+000f, -5.704775e-002f, 8.163324e-002f, 0.000000e+000f, -3.340893e-001f,
  2.319183e-002f, -8.316315e-002f, 7.151453e-002f, 2.917531e-001f, -7.707286e-001f, 0.000000e+000f, -5.858845e-002f, 8.383791e-002f, 0.000000e+000f, -3.340893e-001f,
  2.079324e-002f, -8.353592e-002f, 7.695942e-002f, 2.818829e-001f, -7.559569e-001f, 0.000000e+000f, -6.067151e-002f, 8.681869e-002f, 0.000000e+000f, -3.340893e-001f,
  1.645206e-002f, -8.298575e-002f, 8.506140e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -6.338684e-002f, 9.070424e-002f, 0.000000e+000f, -3.340893e-001f,
  1.645206e-002f, -8.298575e-002f, 8.506140e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -4.056758e-002f, 5.805071e-002f, 0.000000e+000f, -3.340893e-001f,
  1.645206e-002f, -8.298575e-002f, 8.506140e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -3.900729e-002f, 5.581799e-002f, 0.000000e+000f, -3.340893e-001f,
  1.645206e-002f, -8.298575e-002f, 8.506140e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -3.756257e-002f, 5.375066e-002f, 0.000000e+000f, -3.340893e-001f,
  1.645206e-002f, -8.298575e-002f, 8.506140e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -3.622105e-002f, 5.183099e-002f, 0.000000e+000f, -3.340893e-001f,
  1.645206e-002f, -8.298575e-002f, 8.506140e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -3.497205e-002f, 5.004372e-002f, 0.000000e+000f, -3.340893e-001f,
  1.645206e-002f, -8.298575e-002f, 8.506140e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -3.380632e-002f, 4.837559e-002f, 0.000000e+000f, -3.340893e-001f,
  1.645206e-002f, -8.298575e-002f, 8.506140e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -3.271579e-002f, 4.681509e-002f, 0.000000e+000f, -3.340893e-001f,
  -1.695022e-002f, 6.388764e-002f, -9.553971e-003f, 6.208862e-002f, -4.760040e-001f, 0.000000e+000f, -3.282583e-002f, 4.211842e-002f, 0.000000e+000f, -4.103394e-001f,
  -1.695022e-002f, 6.653187e-002f, -1.910794e-002f, 1.241772e-001f, -5.540040e-001f, 0.000000e+000f, -2.435769e-002f, 3.336869e-002f, 0.000000e+000f, -4.103394e-001f,
  -1.695022e-002f, 6.917611e-002f, -2.866191e-002f, 1.862659e-001f, -6.320040e-001f, 0.000000e+000f, -1.787955e-002f, 2.662551e-002f, 0.000000e+000f, -4.103394e-001f,
  -1.695022e-002f, 7.446458e-002f, -4.776985e-002f, 3.104431e-001f, -7.880040e-001f, 0.000000e+000f, -1.292275e-002f, 2.141883e-002f, 0.000000e+000f, -4.103394e-001f,
  0.000000e+000f, -1.960592e-001f, 2.696406e-001f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -8.794799e-002f, 1.209550e-001f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, -1.752266e-001f, 2.409895e-001f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -1.386348e-001f, 1.906647e-001f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, -1.386348e-001f, 1.906647e-001f, 0.000000e+000f, -3.340893e-001f,
  9.973906e-003f, -1.424991e-001f, 1.771141e-001f, 9.029347e-002f, -4.692230e-001f, 0.000000e+000f, -1.638504e-001f, 2.253438e-001f, 0.000000e+000f, -3.340893e-001f,
  -3.006936e-003f, -1.145842e-001f, 1.632753e-001f, 1.014615e-001f, -4.859371e-001f, 0.000000e+000f, -1.331362e-001f, 1.831024e-001f, 0.000000e+000f, -3.340893e-001f,
  -1.096772e-002f, -9.512189e-002f, 1.515662e-001f, 1.108564e-001f, -4.999976e-001f, 0.000000e+000f, -1.117700e-001f, 1.537175e-001f, 0.000000e+000f, -3.340893e-001f,
  -1.577916e-002f, -8.142621e-002f, 1.418312e-001f, 1.195984e-001f, -5.130809e-001f, 0.000000e+000f, -9.648296e-002f, 1.326932e-001f, 0.000000e+000f, -3.340893e-001f,
  -1.881665e-002f, -7.140793e-002f, 1.337983e-001f, 1.273791e-001f, -5.247256e-001f, 0.000000e+000f, -8.521474e-002f, 1.171960e-001f, 0.000000e+000f, -3.340893e-001f,
  -1.927127e-002f, -6.508350e-002f, 1.259602e-001f, 1.384120e-001f, -5.412376e-001f, 0.000000e+000f, -7.669825e-002f, 1.054832e-001f, 0.000000e+000f, -3.340893e-001f,
  -1.623431e-002f, -6.258444e-002f, 1.167790e-001f, 1.566135e-001f, -5.684780e-001f, 0.000000e+000f, -7.013712e-002f, 9.645970e-002f, 0.000000e+000f, -3.340893e-001f,
  -1.124571e-002f, -6.229092e-002f, 1.069396e-001f, 1.785787e-001f, -6.013512e-001f, 0.000000e+000f, -6.501507e-002f, 8.941534e-002f, 0.000000e+000f, -3.340893e-001f,
  -5.994129e-003f, -6.274706e-002f, 9.763377e-002f, 1.999901e-001f, -6.333957e-001f, 0.000000e+000f, -6.098725e-002f, 8.387588e-002f, 0.000000e+000f, -3.340893e-001f,
  2.565262e-004f, -6.439617e-002f, 8.807895e-002f, 2.232316e-001f, -6.681791e-001f, 0.000000e+000f, -5.781742e-002f, 7.951640e-002f, 0.000000e+000f, -3.340893e-001f,
  8.275914e-003f, -6.769048e-002f, 7.744131e-002f, 2.507517e-001f, -7.093658e-001f, 0.000000e+000f, -5.534066e-002f, 7.611011e-002f, 0.000000e+000f, -3.340893e-001f,
  1.514662e-002f, -7.055004e-002f, 6.837844e-002f, 2.741800e-001f, -7.444287e-001f, 0.000000e+000f, -5.344063e-002f, 7.349699e-002f, 0.000000e+000f, -3.340893e-001f,
  1.755504e-002f, -7.074674e-002f, 6.409355e-002f, 2.837970e-001f, -7.588215e-001f, 0.000000e+000f, -5.203531e-002f, 7.156425e-002f, 0.000000e+000f, -3.340893e-001f,
  1.747430e-002f, -6.968092e-002f, 6.278045e-002f, 2.853392e-001f, -7.611297e-001f, 0.000000e+000f, -5.106799e-002f, 7.023390e-002f, 0.000000e+000f, -3.340893e-001f,
  1.785829e-002f, -6.934427e-002f, 6.159114e-002f, 2.875160e-001f, -7.643874e-001f, 0.000000e+000f, -5.050158e-002f, 6.945490e-002f, 0.000000e+000f, -3.340893e-001f,
  1.894353e-002f, -6.987600e-002f, 6.026974e-002f, 2.910598e-001f, -7.696912e-001f, 0.000000e+000f, -5.031504e-002f, 6.919836e-002f, 0.000000e+000f, -3.340893e-001f,
  2.027703e-002f, -7.097009e-002f, 5.925219e-002f, 2.946414e-001f, -7.750513e-001f, 0.000000e+000f, -5.050158e-002f, 6.945490e-002f, 0.000000e+000f, -3.340893e-001f,
  2.139692e-002f, -7.232907e-002f, 5.900297e-002f, 2.968792e-001f, -7.784004e-001f, 0.000000e+000f, -5.106799e-002f, 7.023390e-002f, 0.000000e+000f, -3.340893e-001f,
  2.183744e-002f, -7.365904e-002f, 5.999887e-002f, 2.963660e-001f, -7.776324e-001f, 0.000000e+000f, -5.203531e-002f, 7.156425e-002f, 0.000000e+000f, -3.340893e-001f,
  2.115410e-002f, -7.467863e-002f, 6.269363e-002f, 2.917531e-001f, -7.707286e-001f, 0.000000e+000f, -5.344063e-002f, 7.349699e-002f, 0.000000e+000f, -3.340893e-001f,
  1.896626e-002f, -7.514043e-002f, 6.746693e-002f, 2.818829e-001f, -7.559569e-001f, 0.000000e+000f, -5.534066e-002f, 7.611011e-002f, 0.000000e+000f, -3.340893e-001f,
  1.500651e-002f, -7.485900e-002f, 7.456957e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -5.781742e-002f, 7.951640e-002f, 0.000000e+000f, -3.340893e-001f,
  1.500651e-002f, -7.485900e-002f, 7.456957e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -3.700315e-002f, 5.089050e-002f, 0.000000e+000f, -3.340893e-001f,
  1.500651e-002f, -7.485900e-002f, 7.456957e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -3.557995e-002f, 4.893317e-002f, 0.000000e+000f, -3.340893e-001f,
  1.500651e-002f, -7.485900e-002f, 7.456957e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -3.426218e-002f, 4.712083e-002f, 0.000000e+000f, -3.340893e-001f,
  1.500651e-002f, -7.485900e-002f, 7.456957e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -3.303853e-002f, 4.543794e-002f, 0.000000e+000f, -3.340893e-001f,
  1.500651e-002f, -7.485900e-002f, 7.456957e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -3.189927e-002f, 4.387112e-002f, 0.000000e+000f, -3.340893e-001f,
  1.500651e-002f, -7.485900e-002f, 7.456957e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -3.083596e-002f, 4.240875e-002f, 0.000000e+000f, -3.340893e-001f,
  1.500651e-002f, -7.485900e-002f, 7.456957e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -2.984125e-002f, 4.104072e-002f, 0.000000e+000f, -3.340893e-001f,
  -1.510690e-002f, 5.693992e-002f, -8.514985e-003f, 6.208862e-002f, -4.760040e-001f, 0.000000e+000f, -3.282583e-002f, 4.211842e-002f, 0.000000e+000f, -4.103394e-001f,
  -1.510690e-002f, 5.929659e-002f, -1.702997e-002f, 1.241772e-001f, -5.540040e-001f, 0.000000e+000f, -2.435769e-002f, 3.336869e-002f, 0.000000e+000f, -4.103394e-001f,
  -1.510690e-002f, 6.165327e-002f, -2.554496e-002f, 1.862659e-001f, -6.320040e-001f, 0.000000e+000f, -1.787955e-002f, 2.662551e-002f, 0.000000e+000f, -4.103394e-001f,
  -1.510690e-002f, 6.636662e-002f, -4.257493e-002f, 3.104431e-001f, -7.880040e-001f, 0.000000e+000f, -1.292275e-002f, 2.141883e-002f, 0.000000e+000f, -4.103394e-001f,
  0.000000e+000f, -1.870348e-001f, 2.526142e-001f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -9.645890e-002f, 1.302800e-001f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, -1.602426e-001f, 2.164280e-001f, 0.000000e+000f, -3.340893e-001f,
  1.910558e-002f, -1.547502e-001f, 1.741575e-001f, 7.845804e-002f, -4.515101e-001f, 0.000000e+000f, -1.798424e-001f, 2.429001e-001f, 0.000000e+000f, -3.340893e-001f,
  1.510942e-003f, -1.189407e-001f, 1.578883e-001f, 9.766317e-002f, -4.802526e-001f, 0.000000e+000f, -1.374393e-001f, 1.856292e-001f, 0.000000e+000f, -3.340893e-001f,
  -9.252677e-003f, -9.415055e-002f, 1.440410e-001f, 1.089857e-001f, -4.971980e-001f, 0.000000e+000f, -1.101571e-001f, 1.487811e-001f, 0.000000e+000f, -3.340893e-001f,
  -1.505286e-002f, -7.804965e-002f, 1.328753e-001f, 1.195984e-001f, -5.130809e-001f, 0.000000e+000f, -9.204192e-002f, 1.243143e-001f, 0.000000e+000f, -3.340893e-001f,
  -1.827769e-002f, -6.706737e-002f, 1.239251e-001f, 1.291491e-001f, -5.273746e-001f, 0.000000e+000f, -7.948678e-002f, 1.073570e-001f, 0.000000e+000f, -3.340893e-001f,
  -1.758207e-002f, -6.119292e-002f, 1.147219e-001f, 1.448944e-001f, -5.509392e-001f, 0.000000e+000f, -7.047257e-002f, 9.518217e-002f, 0.000000e+000f, -3.340893e-001f,
  -1.271932e-002f, -5.971535e-002f, 1.038557e-001f, 1.697056e-001f, -5.880718e-001f, 0.000000e+000f, -6.383612e-002f, 8.621880e-002f, 0.000000e+000f, -3.340893e-001f,
  -6.752090e-003f, -5.987654e-002f, 9.318800e-002f, 1.957031e-001f, -6.269796e-001f, 0.000000e+000f, -5.887700e-002f, 7.952087e-002f, 0.000000e+000f, -3.340893e-001f,
  2.447185e-004f, -6.142602e-002f, 8.251723e-002f, 2.232316e-001f, -6.681791e-001f, 0.000000e+000f, -5.515613e-002f, 7.449536e-002f, 0.000000e+000f, -3.340893e-001f,
  9.424706e-003f, -6.501119e-002f, 7.061339e-002f, 2.561653e-001f, -7.174677e-001f, 0.000000e+000f, -5.238975e-002f, 7.075902e-002f, 0.000000e+000f, -3.340893e-001f,
  1.586693e-002f, -6.727792e-002f, 6.192302e-002f, 2.796513e-001f, -7.526170e-001f, 0.000000e+000f, -5.039141e-002f, 6.806001e-002f, 0.000000e+000f, -3.340893e-001f,
  1.676551e-002f, -6.646131e-002f, 5.918091e-002f, 2.850126e-001f, -7.606409e-001f, 0.000000e+000f, -4.903898e-002f, 6.623338e-002f, 0.000000e+000f, -3.340893e-001f,
  1.689574e-002f, -6.572382e-002f, 5.794729e-002f, 2.869295e-001f, -7.635096e-001f, 0.000000e+000f, -4.825566e-002f, 6.517541e-002f, 0.000000e+000f, -3.340893e-001f,
  1.807157e-002f, -6.621374e-002f, 5.646403e-002f, 2.910598e-001f, -7.696912e-001f, 0.000000e+000f, -4.799907e-002f, 6.482885e-002f, 0.000000e+000f, -3.340893e-001f,
  1.958793e-002f, -6.746817e-002f, 5.539217e-002f, 2.952414e-001f, -7.759494e-001f, 0.000000e+000f, -4.825566e-002f, 6.517541e-002f, 0.000000e+000f, -3.340893e-001f,
  2.068248e-002f, -6.901577e-002f, 5.548572e-002f, 2.970821e-001f, -7.787041e-001f, 0.000000e+000f, -4.903898e-002f, 6.623338e-002f, 0.000000e+000f, -3.340893e-001f,
  2.059496e-002f, -7.039565e-002f, 5.750909e-002f, 2.941703e-001f, -7.743463e-001f, 0.000000e+000f, -5.039141e-002f, 6.806001e-002f, 0.000000e+000f, -3.340893e-001f,
  1.863966e-002f, -7.118586e-002f, 6.214320e-002f, 2.843228e-001f, -7.596084e-001f, 0.000000e+000f, -5.238975e-002f, 7.075902e-002f, 0.000000e+000f, -3.340893e-001f,
  1.431577e-002f, -7.106006e-002f, 6.986090e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -5.515613e-002f, 7.449536e-002f, 0.000000e+000f, -3.340893e-001f,
  1.431577e-002f, -7.106006e-002f, 6.986090e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -3.501976e-002f, 4.729864e-002f, 0.000000e+000f, -3.340893e-001f,
  1.431577e-002f, -7.106006e-002f, 6.986090e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -3.342796e-002f, 4.514870e-002f, 0.000000e+000f, -3.340893e-001f,
  1.431577e-002f, -7.106006e-002f, 6.986090e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -3.197457e-002f, 4.318572e-002f, 0.000000e+000f, -3.340893e-001f,
  1.431577e-002f, -7.106006e-002f, 6.986090e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -3.064229e-002f, 4.138631e-002f, 0.000000e+000f, -3.340893e-001f,
  1.431577e-002f, -7.106006e-002f, 6.986090e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -2.941660e-002f, 3.973086e-002f, 0.000000e+000f, -3.340893e-001f,
  1.431577e-002f, -7.106006e-002f, 6.986090e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -2.828519e-002f, 3.820275e-002f, 0.000000e+000f, -3.340893e-001f,
  -1.426184e-002f, 5.375475e-002f, -8.038664e-003f, 6.208862e-002f, -4.760040e-001f, 0.000000e+000f, -3.242057e-002f, 4.159844e-002f, 0.000000e+000f, -4.103394e-001f,
  -1.426184e-002f, 5.597959e-002f, -1.607733e-002f, 1.241772e-001f, -5.540040e-001f, 0.000000e+000f, -2.392274e-002f, 3.277282e-002f, 0.000000e+000f, -4.103394e-001f,
  -1.426184e-002f, 6.265413e-002f, -4.019332e-002f, 3.104431e-001f, -7.880040e-001f, 0.000000e+000f, -1.746852e-002f, 2.601343e-002f, 0.000000e+000f, -4.103394e-001f,
  0.000000e+000f, -1.783038e-001f, 2.367516e-001f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -9.195612e-002f, 1.220992e-001f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, -1.527623e-001f, 2.028376e-001f, 0.000000e+000f, -3.340893e-001f,
  1.499505e-002f, -1.409573e-001f, 1.607258e-001f, 8.306194e-002f, -4.584003e-001f, 0.000000e+000f, -1.634305e-001f, 2.170027e-001f, 0.000000e+000f, -3.340893e-001f,
  -7.459420e-004f, -1.086846e-001f, 1.456264e-001f, 9.960292e-002f, -4.831556e-001f, 0.000000e+000f, -1.258682e-001f, 1.671276e-001f, 0.000000e+000f, -3.340893e-001f,
  -1.101662e-002f, -8.420608e-002f, 1.312316e-001f, 1.127012e-001f, -5.027586e-001f, 0.000000e+000f, -9.849859e-002f, 1.307863e-001f, 0.000000e+000f, -3.340893e-001f,
  -1.565832e-002f, -7.077657e-002f, 1.215834e-001f, 1.226673e-001f, -5.176739e-001f, 0.000000e+000f, -8.328451e-002f, 1.105851e-001f, 0.000000e+000f, -3.340893e-001f,
  -1.769550e-002f, -6.088689e-002f, 1.120436e-001f, 1.356765e-001f, -5.371435e-001f, 0.000000e+000f, -7.114044e-002f, 9.446018e-002f, 0.000000e+000f, -3.340893e-001f,
  -1.476411e-002f, -5.761805e-002f, 1.025350e-001f, 1.566135e-001f, -5.684780e-001f, 0.000000e+000f, -6.378540e-002f, 8.469417e-002f, 0.000000e+000f, -3.340893e-001f,
  -9.283456e-003f, -5.712754e-002f, 9.222106e-002f, 1.829201e-001f, -6.078486e-001f, 0.000000e+000f, -5.832302e-002f, 7.744123e-002f, 0.000000e+000f, -3.340893e-001f,
  -2.238373e-003f, -5.788268e-002f, 8.080291e-002f, 2.134183e-001f, -6.534924e-001f, 0.000000e+000f, -5.365163e-002f, 7.123857e-002f, 0.000000e+000f, -3.340893e-001f,
  6.029621e-003f, -6.062209e-002f, 6.986341e-002f, 2.451859e-001f, -7.010360e-001f, 0.000000e+000f, -5.073460e-002f, 6.736533e-002f, 0.000000e+000f, -3.340893e-001f,
  1.454539e-002f, -6.370217e-002f, 5.893943e-002f, 2.772362e-001f, -7.490027e-001f, 0.000000e+000f, -4.831131e-002f, 6.414769e-002f, 0.000000e+000f, -3.340893e-001f,
  1.602436e-002f, -6.320386e-002f, 5.567026e-002f, 2.847911e-001f, -7.603094e-001f, 0.000000e+000f, -4.692548e-002f, 6.230759e-002f, 0.000000e+000f, -3.340893e-001f,
  1.610703e-002f, -6.228808e-002f, 5.430855e-002f, 2.869295e-001f, -7.635096e-001f, 0.000000e+000f, -4.600305e-002f, 6.108279e-002f, 0.000000e+000f, -3.340893e-001f,
  1.722798e-002f, -6.272954e-002f, 5.291843e-002f, 2.910598e-001f, -7.696912e-001f, 0.000000e+000f, -4.575844e-002f, 6.075799e-002f, 0.000000e+000f, -3.340893e-001f,
  1.867354e-002f, -6.389241e-002f, 5.191387e-002f, 2.952414e-001f, -7.759494e-001f, 0.000000e+000f, -4.600305e-002f, 6.108279e-002f, 0.000000e+000f, -3.340893e-001f,
  1.980040e-002f, -6.558396e-002f, 5.217321e-002f, 2.969904e-001f, -7.785668e-001f, 0.000000e+000f, -4.692548e-002f, 6.230759e-002f, 0.000000e+000f, -3.340893e-001f,
  1.946223e-002f, -6.683969e-002f, 5.443678e-002f, 2.930632e-001f, -7.726893e-001f, 0.000000e+000f, -4.831131e-002f, 6.414769e-002f, 0.000000e+000f, -3.340893e-001f,
  1.666284e-002f, -6.755107e-002f, 6.031681e-002f, 2.791986e-001f, -7.519396e-001f, 0.000000e+000f, -5.073460e-002f, 6.736533e-002f, 0.000000e+000f, -3.340893e-001f,
  1.364750e-002f, -6.743137e-002f, 6.547406e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -3.447960e-002f, 4.578197e-002f, 0.000000e+000f, -3.340893e-001f,
  1.364750e-002f, -6.743137e-002f, 6.547406e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -3.260862e-002f, 4.329768e-002f, 0.000000e+000f, -3.340893e-001f,
  1.364750e-002f, -6.743137e-002f, 6.547406e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -3.115934e-002f, 4.137334e-002f, 0.000000e+000f, -3.340893e-001f,
  1.364750e-002f, -6.743137e-002f, 6.547406e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -2.983341e-002f, 3.961277e-002f, 0.000000e+000f, -3.340893e-001f,
  1.364750e-002f, -6.743137e-002f, 6.547406e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -2.842237e-002f, 3.773919e-002f, 0.000000e+000f, -3.340893e-001f,
  1.364750e-002f, -6.743137e-002f, 6.547406e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -2.731501e-002f, 3.626883e-002f, 0.000000e+000f, -3.340893e-001f,
  -1.346404e-002f, 5.074775e-002f, -7.588989e-003f, 6.208862e-002f, -4.760040e-001f, 0.000000e+000f, -3.262194e-002f, 4.185681e-002f, 0.000000e+000f, -4.103394e-001f,
  -1.346404e-002f, 5.284814e-002f, -1.517798e-002f, 1.241772e-001f, -5.540040e-001f, 0.000000e+000f, -2.406598e-002f, 3.296906e-002f, 0.000000e+000f, -4.103394e-001f,
  -1.346404e-002f, 5.914932e-002f, -3.794494e-002f, 3.104431e-001f, -7.880040e-001f, 0.000000e+000f, -1.746852e-002f, 2.601343e-002f, 0.000000e+000f, -4.103394e-001f,
  0.000000e+000f, -1.740506e-001f, 2.292289e-001f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -1.088499e-001f, 1.433580e-001f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, -1.358135e-001f, 1.788697e-001f, 0.000000e+000f, -3.340893e-001f,
  6.205416e-003f, -1.205983e-001f, 1.480673e-001f, 9.311293e-002f, -4.734427e-001f, 0.000000e+000f, -1.391614e-001f, 1.832789e-001f, 0.000000e+000f, -3.340893e-001f,
  -8.610346e-003f, -8.790385e-002f, 1.307066e-001f, 1.089857e-001f, -4.971980e-001f, 0.000000e+000f, -1.025098e-001f, 1.350079e-001f, 0.000000e+000f, -3.340893e-001f,
  -1.528481e-002f, -6.925296e-002f, 1.177201e-001f, 1.226673e-001f, -5.176739e-001f, 0.000000e+000f, -8.129786e-002f, 1.070712e-001f, 0.000000e+000f, -3.340893e-001f,
  -1.710797e-002f, -5.877456e-002f, 1.070822e-001f, 1.384120e-001f, -5.412376e-001f, 0.000000e+000f, -6.808848e-002f, 8.967418e-002f, 0.000000e+000f, -3.340893e-001f,
  -1.183633e-002f, -5.596758e-002f, 9.424139e-002f, 1.697056e-001f, -5.880718e-001f, 0.000000e+000f, -5.940454e-002f, 7.823722e-002f, 0.000000e+000f, -3.340893e-001f,
  -4.324679e-003f, -5.613583e-002f, 8.143363e-002f, 2.043471e-001f, -6.399163e-001f, 0.000000e+000f, -5.352283e-002f, 7.049086e-002f, 0.000000e+000f, -3.340893e-001f,
  5.885792e-003f, -5.911260e-002f, 6.764351e-002f, 2.451859e-001f, -7.010360e-001f, 0.000000e+000f, -4.952438e-002f, 6.522481e-002f, 0.000000e+000f, -3.340893e-001f,
  1.476543e-002f, -6.211125e-002f, 5.619059e-002f, 2.796513e-001f, -7.526170e-001f, 0.000000e+000f, -4.689318e-002f, 6.175945e-002f, 0.000000e+000f, -3.340893e-001f,
  1.551272e-002f, -6.095485e-002f, 5.337138e-002f, 2.853392e-001f, -7.611297e-001f, 0.000000e+000f, -4.533536e-002f, 5.970776e-002f, 0.000000e+000f, -3.340893e-001f,
  1.638258e-002f, -6.081368e-002f, 5.167665e-002f, 2.895622e-001f, -7.674498e-001f, 0.000000e+000f, -4.469335e-002f, 5.886222e-002f, 0.000000e+000f, -3.340893e-001f,
  1.822811e-002f, -6.217193e-002f, 5.026432e-002f, 2.952414e-001f, -7.759494e-001f, 0.000000e+000f, -4.490570e-002f, 5.914189e-002f, 0.000000e+000f, -3.340893e-001f,
  1.937560e-002f, -6.403948e-002f, 5.073355e-002f, 2.967552e-001f, -7.782149e-001f, 0.000000e+000f, -4.599251e-002f, 6.057325e-002f, 0.000000e+000f, -3.340893e-001f,
  1.817882e-002f, -6.547029e-002f, 5.469383e-002f, 2.884908e-001f, -7.658462e-001f, 0.000000e+000f, -4.806014e-002f, 6.329637e-002f, 0.000000e+000f, -3.340893e-001f,
  1.332196e-002f, -6.567933e-002f, 6.339363e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -5.132713e-002f, 6.759906e-002f, 0.000000e+000f, -3.340893e-001f,
  1.332196e-002f, -6.567933e-002f, 6.339363e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -3.207945e-002f, 4.224942e-002f, 0.000000e+000f, -3.340893e-001f,
  1.332196e-002f, -6.567933e-002f, 6.339363e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -3.019243e-002f, 3.976416e-002f, 0.000000e+000f, -3.340893e-001f,
  1.332196e-002f, -6.567933e-002f, 6.339363e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -2.851507e-002f, 3.755504e-002f, 0.000000e+000f, -3.340893e-001f,
  1.332196e-002f, -6.567933e-002f, 6.339363e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -2.701428e-002f, 3.557846e-002f, 0.000000e+000f, -3.340893e-001f,
  -1.308204e-002f, 4.930794e-002f, -7.373673e-003f, 6.208862e-002f, -4.760040e-001f, 0.000000e+000f, -3.282583e-002f, 4.211842e-002f, 0.000000e+000f, -4.103394e-001f,
  -1.308204e-002f, 5.747113e-002f, -3.686837e-002f, 3.104431e-001f, -7.880040e-001f, 0.000000e+000f, -2.392274e-002f, 3.277282e-002f, 0.000000e+000f, -4.103394e-001f,
  -1.308204e-002f, 5.338953e-002f, -2.212102e-002f, 1.862659e-001f, -6.320040e-001f, 0.000000e+000f, -1.727002e-002f, 2.571782e-002f, 0.000000e+000f, -4.103394e-001f,
  0.000000e+000f, -1.698730e-001f, 2.219646e-001f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -1.201183e-001f, 1.569527e-001f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, -1.201183e-001f, 1.569527e-001f, 0.000000e+000f, -3.340893e-001f,
  -2.605321e-003f, -9.945883e-002f, 1.344061e-001f, 1.014615e-001f, -4.859371e-001f, 0.000000e+000f, -1.153541e-001f, 1.507275e-001f, 0.000000e+000f, -3.340893e-001f,
  -1.367165e-002f, -7.148926e-002f, 1.167536e-001f, 1.195984e-001f, -5.130809e-001f, 0.000000e+000f, -8.359641e-002f, 1.092313e-001f, 0.000000e+000f, -3.340893e-001f,
  -1.669734e-002f, -5.753705e-002f, 1.036888e-001f, 1.384120e-001f, -5.412376e-001f, 0.000000e+000f, -6.645420e-002f, 8.683241e-002f, 0.000000e+000f, -3.340893e-001f,
  -9.743699e-003f, -5.464007e-002f, 8.803124e-002f, 1.785787e-001f, -6.013512e-001f, 0.000000e+000f, -5.633147e-002f, 7.360553e-002f, 0.000000e+000f, -3.340893e-001f,
  2.222638e-004f, -5.577996e-002f, 7.250544e-002f, 2.232316e-001f, -6.681791e-001f, 0.000000e+000f, -5.009516e-002f, 6.545686e-002f, 0.000000e+000f, -3.340893e-001f,
  1.312359e-002f, -6.022621e-002f, 5.628823e-002f, 2.741800e-001f, -7.444287e-001f, 0.000000e+000f, -4.630294e-002f, 6.050176e-002f, 0.000000e+000f, -3.340893e-001f,
  1.514038e-002f, -5.933472e-002f, 5.168004e-002f, 2.853392e-001f, -7.611297e-001f, 0.000000e+000f, -4.424720e-002f, 5.781562e-002f, 0.000000e+000f, -3.340893e-001f,
  1.641338e-002f, -5.941635e-002f, 4.961326e-002f, 2.910598e-001f, -7.696912e-001f, 0.000000e+000f, -4.359481e-002f, 5.696318e-002f, 0.000000e+000f, -3.340893e-001f,
  1.853909e-002f, -6.139585e-002f, 4.857047e-002f, 2.968792e-001f, -7.784004e-001f, 0.000000e+000f, -4.424720e-002f, 5.781562e-002f, 0.000000e+000f, -3.340893e-001f,
  1.832870e-002f, -6.344604e-002f, 5.160857e-002f, 2.917531e-001f, -7.707286e-001f, 0.000000e+000f, -4.630294e-002f, 6.050176e-002f, 0.000000e+000f, -3.340893e-001f,
  1.300220e-002f, -6.396799e-002f, 6.138469e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -5.009516e-002f, 6.545686e-002f, 0.000000e+000f, -3.340893e-001f,
  1.300220e-002f, -6.396799e-002f, 6.138469e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -3.082779e-002f, 4.028114e-002f, 0.000000e+000f, -3.340893e-001f,
  1.300220e-002f, -6.396799e-002f, 6.138469e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -2.862580e-002f, 3.740392e-002f, 0.000000e+000f, -3.340893e-001f,
  1.300220e-002f, -6.396799e-002f, 6.138469e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -2.671742e-002f, 3.491032e-002f, 0.000000e+000f, -3.340893e-001f,
  -1.271088e-002f, 4.790897e-002f, -7.164467e-003f, 6.208862e-002f, -4.760040e-001f, 0.000000e+000f, -3.282583e-002f, 4.211842e-002f, 0.000000e+000f, -4.103394e-001f,
  -1.271088e-002f, 5.584055e-002f, -3.582234e-002f, 3.104431e-001f, -7.880040e-001f, 0.000000e+000f, -2.364129e-002f, 3.238725e-002f, 0.000000e+000f, -4.103394e-001f,
  0.000000e+000f, -1.657713e-001f, 2.149490e-001f, 0.000000e+000f, -3.340893e-001f,
  8.433104e-003f, -1.198222e-001f, 1.411898e-001f, 9.029347e-002f, -4.692230e-001f, 0.000000e+000f, -1.385383e-001f, 1.796370e-001f, 0.000000e+000f, -3.340893e-001f,
  -1.334154e-002f, -6.989643e-002f, 1.130634e-001f, 1.195984e-001f, -5.130809e-001f, 0.000000e+000f, -8.157795e-002f, 1.057788e-001f, 0.000000e+000f, -3.340893e-001f,
  -1.372638e-002f, -5.399566e-002f, 9.309251e-002f, 1.566135e-001f, -5.684780e-001f, 0.000000e+000f, -5.930210e-002f, 7.689464e-002f, 0.000000e+000f, -3.340893e-001f,
  2.168972e-004f, -5.443097e-002f, 7.021377e-002f, 2.232316e-001f, -6.681791e-001f, 0.000000e+000f, -4.888559e-002f, 6.338797e-002f, 0.000000e+000f, -3.340893e-001f,
  1.484307e-002f, -5.865025e-002f, 5.109336e-002f, 2.837970e-001f, -7.588215e-001f, 0.000000e+000f, -4.399672e-002f, 5.704877e-002f, 0.000000e+000f, -3.340893e-001f,
  1.601707e-002f, -5.782170e-002f, 4.804514e-002f, 2.910598e-001f, -7.696912e-001f, 0.000000e+000f, -4.254220e-002f, 5.516275e-002f, 0.000000e+000f, -3.340893e-001f,
  1.846392e-002f, -6.082790e-002f, 4.782921e-002f, 2.963660e-001f, -7.776324e-001f, 0.000000e+000f, -4.399672e-002f, 5.704877e-002f, 0.000000e+000f, -3.340893e-001f,
  1.268826e-002f, -6.229670e-002f, 5.944452e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -4.888559e-002f, 6.338797e-002f, 0.000000e+000f, -3.340893e-001f,
  1.268826e-002f, -6.229670e-002f, 5.944452e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -2.896924e-002f, 3.756324e-002f, 0.000000e+000f, -3.340893e-001f,
  1.268826e-002f, -6.229670e-002f, 5.944452e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -2.607232e-002f, 3.380692e-002f, 0.000000e+000f, -3.340893e-001f,
  -1.235024e-002f, 5.425624e-002f, -3.480598e-002f, 3.104431e-001f, -7.880040e-001f, 0.000000e+000f, -3.183111e-002f, 4.084210e-002f, 0.000000e+000f, -4.103394e-001f,
  -1.200484e-001f, 1.518795e-001f, 0.000000e+000f, 0.000000e+000f, -4.103394e-001f,
  1.784679e-002f, 1.138566e-001f, -1.819594e-002f, 2.792269e-002f, -2.569916e-001f, -6.853988e-002f, 9.069278e-002f, 0.000000e+000f, 0.000000e+000f, -4.103394e-001f,
  1.836158e-002f, 9.030913e-002f, -2.996384e-002f, 7.312927e-002f, -3.903887e-001f, -5.690272e-002f, 7.944801e-002f, 0.000000e+000f, 0.000000e+000f, -4.103394e-001f,
  -2.901403e-004f, 7.257110e-002f, -3.389973e-002f, 1.563540e-001f, -5.680897e-001f, -3.799404e-002f, 5.657921e-002f, 0.000000e+000f, 0.000000e+000f, -4.103394e-001f,
  -1.985537e-002f, 6.509970e-002f, -3.289101e-002f, 2.650329e-001f, -7.367322e-001f, -2.744454e-002f, 4.417107e-002f, 0.000000e+000f, 0.000000e+000f, -4.103394e-001f,
  -2.142581e-002f, 6.627741e-002f, -3.866092e-002f, 3.397694e-001f, -8.256018e-001f, -2.104569e-002f, 3.721925e-002f, 0.000000e+000f, 0.000000e+000f, -4.103394e-001f,
  // Total number of coefficients: 3485
  // Maximum number of elevation coefficients: 5


 // Lite coefficients
 // 10 degrees loudspeakers
 // 44100 Hz sample rate
    // Coefficients
  // Generated by HRTFConv V5.90d on Wed Mar 10 11:22:29 1999
  0.000000e+000f, -9.454320e-002f, 1.501812e-001f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -4.875849e-002f, 7.745249e-002f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, -8.100017e-002f, 1.286681e-001f, 0.000000e+000f, -3.745480e-001f,
  1.887134e-002f, -9.275489e-002f, 9.972224e-002f, 1.548086e-001f, -5.812086e-001f, 0.000000e+000f, -8.665679e-002f, 1.376537e-001f, 0.000000e+000f, -3.745480e-001f,
  9.523354e-003f, -7.026299e-002f, 8.758187e-002f, 1.697531e-001f, -6.011586e-001f, 0.000000e+000f, -6.673992e-002f, 1.060158e-001f, 0.000000e+000f, -3.745480e-001f,
  3.209308e-003f, -5.358852e-002f, 7.702688e-002f, 1.815976e-001f, -6.169703e-001f, 0.000000e+000f, -5.222755e-002f, 8.296306e-002f, 0.000000e+000f, -3.745480e-001f,
  1.508176e-004f, -4.451146e-002f, 7.032556e-002f, 1.906100e-001f, -6.290014e-001f, 0.000000e+000f, -4.416049e-002f, 7.014860e-002f, 0.000000e+000f, -3.745480e-001f,
  -1.580757e-003f, -3.780436e-002f, 6.404067e-002f, 2.023671e-001f, -6.446964e-001f, 0.000000e+000f, -3.772126e-002f, 5.991993e-002f, 0.000000e+000f, -3.745480e-001f,
  -8.562725e-004f, -3.536270e-002f, 5.833401e-002f, 2.212488e-001f, -6.699023e-001f, 0.000000e+000f, -3.382135e-002f, 5.372495e-002f, 0.000000e+000f, -3.745480e-001f,
  1.071431e-003f, -3.472457e-002f, 5.245617e-002f, 2.448469e-001f, -7.014045e-001f, 0.000000e+000f, -3.092500e-002f, 4.912412e-002f, 0.000000e+000f, -3.745480e-001f,
  3.679921e-003f, -3.490049e-002f, 4.615359e-002f, 2.719349e-001f, -7.375654e-001f, 0.000000e+000f, -2.844805e-002f, 4.518951e-002f, 0.000000e+000f, -3.745480e-001f,
  6.872254e-003f, -3.633044e-002f, 4.036981e-002f, 2.997339e-001f, -7.746754e-001f, 0.000000e+000f, -2.690134e-002f, 4.273256e-002f, 0.000000e+000f, -3.745480e-001f,
  1.012849e-002f, -3.795934e-002f, 3.474081e-002f, 3.272530e-001f, -8.114118e-001f, 0.000000e+000f, -2.561642e-002f, 4.069149e-002f, 0.000000e+000f, -3.745480e-001f,
  1.060104e-002f, -3.760302e-002f, 3.298241e-002f, 3.336541e-001f, -8.199570e-001f, 0.000000e+000f, -2.488160e-002f, 3.952423e-002f, 0.000000e+000f, -3.745480e-001f,
  1.055331e-002f, -3.703678e-002f, 3.220339e-002f, 3.354596e-001f, -8.223673e-001f, 0.000000e+000f, -2.439250e-002f, 3.874729e-002f, 0.000000e+000f, -3.745480e-001f,
  1.097840e-002f, -3.727330e-002f, 3.150647e-002f, 3.389393e-001f, -8.270125e-001f, 0.000000e+000f, -2.426279e-002f, 3.854126e-002f, 0.000000e+000f, -3.745480e-001f,
  1.157438e-002f, -3.794124e-002f, 3.106363e-002f, 3.424515e-001f, -8.317010e-001f, 0.000000e+000f, -2.439250e-002f, 3.874729e-002f, 0.000000e+000f, -3.745480e-001f,
  1.210352e-002f, -3.894175e-002f, 3.131775e-002f, 3.439172e-001f, -8.336577e-001f, 0.000000e+000f, -2.488160e-002f, 3.952423e-002f, 0.000000e+000f, -3.745480e-001f,
  1.209301e-002f, -3.972507e-002f, 3.258857e-002f, 3.406233e-001f, -8.292605e-001f, 0.000000e+000f, -2.561642e-002f, 4.069149e-002f, 0.000000e+000f, -3.745480e-001f,
  1.118754e-002f, -4.026740e-002f, 3.573486e-002f, 3.289189e-001f, -8.136358e-001f, 0.000000e+000f, -2.690134e-002f, 4.273256e-002f, 0.000000e+000f, -3.745480e-001f,
  1.012948e-002f, -4.031003e-002f, 3.847236e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -1.828234e-002f, 2.904136e-002f, 0.000000e+000f, -3.745480e-001f,
  1.012948e-002f, -4.031003e-002f, 3.847236e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -1.729028e-002f, 2.746548e-002f, 0.000000e+000f, -3.745480e-001f,
  1.012948e-002f, -4.031003e-002f, 3.847236e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -1.652182e-002f, 2.624479e-002f, 0.000000e+000f, -3.745480e-001f,
  1.012948e-002f, -4.031003e-002f, 3.847236e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -1.581877e-002f, 2.512799e-002f, 0.000000e+000f, -3.745480e-001f,
  1.012948e-002f, -4.031003e-002f, 3.847236e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -1.507058e-002f, 2.393950e-002f, 0.000000e+000f, -3.745480e-001f,
  1.012948e-002f, -4.031003e-002f, 3.847236e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -1.448342e-002f, 2.300679e-002f, 0.000000e+000f, -3.745480e-001f,
  -2.375858e-002f, 6.089284e-002f, -9.770694e-003f, 7.292816e-002f, -5.100009e-001f, 0.000000e+000f, -3.475235e-002f, 4.161262e-002f, 0.000000e+000f, -4.333942e-001f,
  -2.375858e-002f, 6.497931e-002f, -1.954139e-002f, 1.458563e-001f, -5.960009e-001f, 0.000000e+000f, -2.593285e-002f, 3.254664e-002f, 0.000000e+000f, -4.333942e-001f,
  -2.375858e-002f, 7.723874e-002f, -4.885347e-002f, 3.646408e-001f, -8.540009e-001f, 0.000000e+000f, -1.911772e-002f, 2.546544e-002f, 0.000000e+000f, -4.333942e-001f,
  0.000000e+000f, -1.228315e-001f, 1.852583e-001f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -6.334751e-002f, 9.554270e-002f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, -1.052362e-001f, 1.587206e-001f, 0.000000e+000f, -3.745480e-001f,
  2.702728e-002f, -1.241457e-001f, 1.257598e-001f, 1.506536e-001f, -5.756619e-001f, 0.000000e+000f, -1.181080e-001f, 1.781342e-001f, 0.000000e+000f, -3.745480e-001f,
  1.405608e-002f, -9.430775e-002f, 1.102637e-001f, 1.679995e-001f, -5.988177e-001f, 0.000000e+000f, -9.026058e-002f, 1.361339e-001f, 0.000000e+000f, -3.745480e-001f,
  5.985448e-003f, -7.422189e-002f, 9.832831e-002f, 1.782374e-001f, -6.124846e-001f, 0.000000e+000f, -7.234351e-002f, 1.091107e-001f, 0.000000e+000f, -3.745480e-001f,
  1.332204e-003f, -6.118417e-002f, 8.924944e-002f, 1.878350e-001f, -6.252969e-001f, 0.000000e+000f, -6.044674e-002f, 9.116768e-002f, 0.000000e+000f, -3.745480e-001f,
  -1.475669e-003f, -5.230582e-002f, 8.224607e-002f, 1.964695e-001f, -6.368235e-001f, 0.000000e+000f, -5.220140e-002f, 7.873179e-002f, 0.000000e+000f, -3.745480e-001f,
  -1.901970e-003f, -4.724364e-002f, 7.558087e-002f, 2.106880e-001f, -6.558044e-001f, 0.000000e+000f, -4.628149e-002f, 6.980320e-002f, 0.000000e+000f, -3.745480e-001f,
  6.928997e-005f, -4.537152e-002f, 6.827314e-002f, 2.330148e-001f, -6.856093e-001f, 0.000000e+000f, -4.192313e-002f, 6.322978e-002f, 0.000000e+000f, -3.745480e-001f,
  2.739408e-003f, -4.480515e-002f, 6.134503e-002f, 2.562417e-001f, -7.166159e-001f, 0.000000e+000f, -3.866633e-002f, 5.831777e-002f, 0.000000e+000f, -3.745480e-001f,
  6.010288e-003f, -4.529262e-002f, 5.463978e-002f, 2.805725e-001f, -7.490961e-001f, 0.000000e+000f, -3.622271e-002f, 5.463224e-002f, 0.000000e+000f, -3.745480e-001f,
  1.041429e-002f, -4.716708e-002f, 4.744885e-002f, 3.092248e-001f, -7.873453e-001f, 0.000000e+000f, -3.440595e-002f, 5.189214e-002f, 0.000000e+000f, -3.745480e-001f,
  1.343150e-002f, -4.828596e-002f, 4.227293e-002f, 3.293029e-001f, -8.141484e-001f, 0.000000e+000f, -3.309358e-002f, 4.991278e-002f, 0.000000e+000f, -3.745480e-001f,
  1.373150e-002f, -4.758588e-002f, 4.053461e-002f, 3.338413e-001f, -8.202068e-001f, 0.000000e+000f, -3.220540e-002f, 4.857320e-002f, 0.000000e+000f, -3.745480e-001f,
  1.371096e-002f, -4.701809e-002f, 3.972499e-002f, 3.354596e-001f, -8.223673e-001f, 0.000000e+000f, -3.169097e-002f, 4.779732e-002f, 0.000000e+000f, -3.745480e-001f,
  1.426325e-002f, -4.728106e-002f, 3.886529e-002f, 3.389393e-001f, -8.270125e-001f, 0.000000e+000f, -3.152246e-002f, 4.754316e-002f, 0.000000e+000f, -3.745480e-001f,
  1.503755e-002f, -4.808670e-002f, 3.831902e-002f, 3.424515e-001f, -8.317010e-001f, 0.000000e+000f, -3.169097e-002f, 4.779732e-002f, 0.000000e+000f, -3.745480e-001f,
  1.566165e-002f, -4.914883e-002f, 3.850128e-002f, 3.439941e-001f, -8.337602e-001f, 0.000000e+000f, -3.220540e-002f, 4.857320e-002f, 0.000000e+000f, -3.745480e-001f,
  1.576830e-002f, -5.019517e-002f, 3.983681e-002f, 3.415529e-001f, -8.305014e-001f, 0.000000e+000f, -3.309358e-002f, 4.991278e-002f, 0.000000e+000f, -3.745480e-001f,
  1.502170e-002f, -5.098052e-002f, 4.271963e-002f, 3.332582e-001f, -8.194285e-001f, 0.000000e+000f, -3.440595e-002f, 5.189214e-002f, 0.000000e+000f, -3.745480e-001f,
  1.316032e-002f, -5.131492e-002f, 4.745817e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -3.622271e-002f, 5.463224e-002f, 0.000000e+000f, -3.745480e-001f,
  1.316032e-002f, -5.131492e-002f, 4.745817e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -2.299855e-002f, 3.468713e-002f, 0.000000e+000f, -3.745480e-001f,
  1.316032e-002f, -5.131492e-002f, 4.745817e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -2.195316e-002f, 3.311045e-002f, 0.000000e+000f, -3.745480e-001f,
  1.316032e-002f, -5.131492e-002f, 4.745817e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -2.099868e-002f, 3.167086e-002f, 0.000000e+000f, -3.745480e-001f,
  1.316032e-002f, -5.131492e-002f, 4.745817e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -2.012373e-002f, 3.035124e-002f, 0.000000e+000f, -3.745480e-001f,
  1.316032e-002f, -5.131492e-002f, 4.745817e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -1.931878e-002f, 2.913719e-002f, 0.000000e+000f, -3.745480e-001f,
  1.316032e-002f, -5.131492e-002f, 4.745817e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -1.857575e-002f, 2.801653e-002f, 0.000000e+000f, -3.745480e-001f,
  -2.665757e-002f, 6.832289e-002f, -1.096290e-002f, 7.292816e-002f, -5.100009e-001f, 0.000000e+000f, -3.453783e-002f, 4.135575e-002f, 0.000000e+000f, -4.333942e-001f,
  -2.665757e-002f, 7.290799e-002f, -2.192580e-002f, 1.458563e-001f, -5.960009e-001f, 0.000000e+000f, -2.577849e-002f, 3.235291e-002f, 0.000000e+000f, -4.333942e-001f,
  -2.665757e-002f, 8.666329e-002f, -5.481450e-002f, 3.646408e-001f, -8.540009e-001f, 0.000000e+000f, -1.911772e-002f, 2.546544e-002f, 0.000000e+000f, -4.333942e-001f,
  0.000000e+000f, -1.589090e-001f, 2.289530e-001f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -7.128317e-002f, 1.027034e-001f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, -1.420238e-001f, 2.046252e-001f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -1.123656e-001f, 1.618942e-001f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, -1.123656e-001f, 1.618942e-001f, 0.000000e+000f, -3.745480e-001f,
  2.577772e-002f, -1.380352e-001f, 1.453677e-001f, 1.613394e-001f, -5.899269e-001f, 0.000000e+000f, -1.328032e-001f, 1.913404e-001f, 0.000000e+000f, -3.745480e-001f,
  1.401374e-002f, -1.110434e-001f, 1.308987e-001f, 1.714334e-001f, -6.034017e-001f, 0.000000e+000f, -1.079089e-001f, 1.554730e-001f, 0.000000e+000f, -3.745480e-001f,
  6.516028e-003f, -9.227909e-002f, 1.194277e-001f, 1.799291e-001f, -6.147430e-001f, 0.000000e+000f, -9.059128e-002f, 1.305222e-001f, 0.000000e+000f, -3.745480e-001f,
  1.723494e-003f, -7.903867e-002f, 1.102997e-001f, 1.878350e-001f, -6.252969e-001f, 0.000000e+000f, -7.820090e-002f, 1.126704e-001f, 0.000000e+000f, -3.745480e-001f,
  -1.479963e-003f, -6.934927e-002f, 1.029893e-001f, 1.948696e-001f, -6.346877e-001f, 0.000000e+000f, -6.906783e-002f, 9.951161e-002f, 0.000000e+000f, -3.745480e-001f,
  -2.701285e-003f, -6.291780e-002f, 9.625821e-002f, 2.048375e-001f, -6.479943e-001f, 0.000000e+000f, -6.216509e-002f, 8.956626e-002f, 0.000000e+000f, -3.745480e-001f,
  -1.439230e-003f, -5.965049e-002f, 8.893091e-002f, 2.212488e-001f, -6.699023e-001f, 0.000000e+000f, -5.684719e-002f, 8.190434e-002f, 0.000000e+000f, -3.745480e-001f,
  1.229434e-003f, -5.827352e-002f, 8.140726e-002f, 2.409651e-001f, -6.962225e-001f, 0.000000e+000f, -5.269570e-002f, 7.592295e-002f, 0.000000e+000f, -3.745480e-001f,
  4.156274e-003f, -5.766623e-002f, 7.445660e-002f, 2.600505e-001f, -7.217004e-001f, 0.000000e+000f, -4.943109e-002f, 7.121936e-002f, 0.000000e+000f, -3.745480e-001f,
  7.775604e-003f, -5.807131e-002f, 6.752704e-002f, 2.805725e-001f, -7.490961e-001f, 0.000000e+000f, -4.686189e-002f, 6.751772e-002f, 0.000000e+000f, -3.745480e-001f,
  1.252581e-002f, -5.973885e-002f, 6.006889e-002f, 3.045532e-001f, -7.811089e-001f, 0.000000e+000f, -4.485444e-002f, 6.462542e-002f, 0.000000e+000f, -3.745480e-001f,
  1.654492e-002f, -6.119861e-002f, 5.382902e-002f, 3.246539e-001f, -8.079422e-001f, 0.000000e+000f, -4.331444e-002f, 6.240661e-002f, 0.000000e+000f, -3.745480e-001f,
  1.783687e-002f, -6.096307e-002f, 5.080777e-002f, 3.328137e-001f, -8.188351e-001f, 0.000000e+000f, -4.217540e-002f, 6.076551e-002f, 0.000000e+000f, -3.745480e-001f,
  1.765844e-002f, -5.999333e-002f, 4.978097e-002f, 3.341172e-001f, -8.205751e-001f, 0.000000e+000f, -4.139138e-002f, 5.963591e-002f, 0.000000e+000f, -3.745480e-001f,
  1.781688e-002f, -5.961793e-002f, 4.891122e-002f, 3.359544e-001f, -8.230277e-001f, 0.000000e+000f, -4.093229e-002f, 5.897446e-002f, 0.000000e+000f, -3.745480e-001f,
  1.845258e-002f, -5.992361e-002f, 4.803200e-002f, 3.389393e-001f, -8.270125e-001f, 0.000000e+000f, -4.078110e-002f, 5.875662e-002f, 0.000000e+000f, -3.745480e-001f,
  1.928782e-002f, -6.070298e-002f, 4.742108e-002f, 3.419482e-001f, -8.310291e-001f, 0.000000e+000f, -4.093229e-002f, 5.897446e-002f, 0.000000e+000f, -3.745480e-001f,
  2.004390e-002f, -6.175994e-002f, 4.737441e-002f, 3.438241e-001f, -8.335333e-001f, 0.000000e+000f, -4.139138e-002f, 5.963591e-002f, 0.000000e+000f, -3.745480e-001f,
  2.044307e-002f, -6.290610e-002f, 4.819717e-002f, 3.433942e-001f, -8.329594e-001f, 0.000000e+000f, -4.217540e-002f, 6.076551e-002f, 0.000000e+000f, -3.745480e-001f,
  2.021967e-002f, -6.396467e-002f, 5.018609e-002f, 3.395223e-001f, -8.277907e-001f, 0.000000e+000f, -4.331444e-002f, 6.240661e-002f, 0.000000e+000f, -3.745480e-001f,
  1.913977e-002f, -6.478110e-002f, 5.360409e-002f, 3.311941e-001f, -8.166730e-001f, 0.000000e+000f, -4.485444e-002f, 6.462542e-002f, 0.000000e+000f, -3.745480e-001f,
  1.702572e-002f, -6.523852e-002f, 5.865159e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -4.686189e-002f, 6.751772e-002f, 0.000000e+000f, -3.745480e-001f,
  1.702572e-002f, -6.523852e-002f, 5.865159e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -2.999161e-002f, 4.321134e-002f, 0.000000e+000f, -3.745480e-001f,
  1.702572e-002f, -6.523852e-002f, 5.865159e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -2.883809e-002f, 4.154936e-002f, 0.000000e+000f, -3.745480e-001f,
  1.702572e-002f, -6.523852e-002f, 5.865159e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -2.777001e-002f, 4.001050e-002f, 0.000000e+000f, -3.745480e-001f,
  1.702572e-002f, -6.523852e-002f, 5.865159e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -2.677822e-002f, 3.858155e-002f, 0.000000e+000f, -3.745480e-001f,
  1.702572e-002f, -6.523852e-002f, 5.865159e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -2.585484e-002f, 3.725115e-002f, 0.000000e+000f, -3.745480e-001f,
  1.702572e-002f, -6.523852e-002f, 5.865159e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -2.499301e-002f, 3.600945e-002f, 0.000000e+000f, -3.745480e-001f,
  1.702572e-002f, -6.523852e-002f, 5.865159e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -2.418678e-002f, 3.484785e-002f, 0.000000e+000f, -3.745480e-001f,
  -2.991028e-002f, 7.665954e-002f, -1.230058e-002f, 7.292816e-002f, -5.100009e-001f, 0.000000e+000f, -3.496955e-002f, 4.187270e-002f, 0.000000e+000f, -4.333942e-001f,
  -2.991028e-002f, 8.180411e-002f, -2.460115e-002f, 1.458563e-001f, -5.960009e-001f, 0.000000e+000f, -2.624719e-002f, 3.294114e-002f, 0.000000e+000f, -4.333942e-001f,
  -2.991028e-002f, 8.694868e-002f, -3.690173e-002f, 2.187845e-001f, -6.820009e-001f, 0.000000e+000f, -1.956755e-002f, 2.606462e-002f, 0.000000e+000f, -4.333942e-001f,
  -2.991028e-002f, 9.723781e-002f, -6.150288e-002f, 3.646408e-001f, -8.540009e-001f, 0.000000e+000f, -1.444992e-002f, 2.076137e-002f, 0.000000e+000f, -4.333942e-001f,
  0.000000e+000f, -2.048493e-001f, 2.834400e-001f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -9.189102e-002f, 1.271451e-001f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, -1.830827e-001f, 2.533226e-001f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -1.448503e-001f, 2.004223e-001f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, -1.448503e-001f, 2.004223e-001f, 0.000000e+000f, -3.745480e-001f,
  3.323001e-002f, -1.760425e-001f, 1.799628e-001f, 1.613394e-001f, -5.899269e-001f, 0.000000e+000f, -1.711964e-001f, 2.368762e-001f, 0.000000e+000f, -3.745480e-001f,
  1.806510e-002f, -1.421138e-001f, 1.620504e-001f, 1.714334e-001f, -6.034017e-001f, 0.000000e+000f, -1.391051e-001f, 1.924730e-001f, 0.000000e+000f, -3.745480e-001f,
  8.399801e-003f, -1.184769e-001f, 1.478494e-001f, 1.799291e-001f, -6.147430e-001f, 0.000000e+000f, -1.167811e-001f, 1.615843e-001f, 0.000000e+000f, -3.745480e-001f,
  2.221753e-003f, -1.017617e-001f, 1.365492e-001f, 1.878350e-001f, -6.252969e-001f, 0.000000e+000f, -1.008086e-001f, 1.394840e-001f, 0.000000e+000f, -3.745480e-001f,
  -1.907819e-003f, -8.950702e-002f, 1.274990e-001f, 1.948696e-001f, -6.346877e-001f, 0.000000e+000f, -8.903523e-002f, 1.231937e-001f, 0.000000e+000f, -3.745480e-001f,
  -3.482222e-003f, -8.130617e-002f, 1.191661e-001f, 2.048375e-001f, -6.479943e-001f, 0.000000e+000f, -8.013691e-002f, 1.108815e-001f, 0.000000e+000f, -3.745480e-001f,
  -1.855309e-003f, -7.700135e-002f, 1.100950e-001f, 2.212488e-001f, -6.699023e-001f, 0.000000e+000f, -7.328162e-002f, 1.013962e-001f, 0.000000e+000f, -3.745480e-001f,
  1.584861e-003f, -7.502976e-002f, 1.007808e-001f, 2.409651e-001f, -6.962225e-001f, 0.000000e+000f, -6.792994e-002f, 9.399134e-002f, 0.000000e+000f, -3.745480e-001f,
  5.357847e-003f, -7.403135e-002f, 9.217602e-002f, 2.600505e-001f, -7.217004e-001f, 0.000000e+000f, -6.372154e-002f, 8.816838e-002f, 0.000000e+000f, -3.745480e-001f,
  1.002352e-002f, -7.428699e-002f, 8.359735e-002f, 2.805725e-001f, -7.490961e-001f, 0.000000e+000f, -6.040959e-002f, 8.358581e-002f, 0.000000e+000f, -3.745480e-001f,
  1.614701e-002f, -7.608679e-002f, 7.436428e-002f, 3.045532e-001f, -7.811089e-001f, 0.000000e+000f, -5.782179e-002f, 8.000519e-002f, 0.000000e+000f, -3.745480e-001f,
  2.132804e-002f, -7.767257e-002f, 6.663942e-002f, 3.246539e-001f, -8.079422e-001f, 0.000000e+000f, -5.583657e-002f, 7.725834e-002f, 0.000000e+000f, -3.745480e-001f,
  2.299348e-002f, -7.727379e-002f, 6.289917e-002f, 3.328137e-001f, -8.188351e-001f, 0.000000e+000f, -5.436824e-002f, 7.522669e-002f, 0.000000e+000f, -3.745480e-001f,
  2.276347e-002f, -7.603684e-002f, 6.162801e-002f, 3.341172e-001f, -8.205751e-001f, 0.000000e+000f, -5.335756e-002f, 7.382826e-002f, 0.000000e+000f, -3.745480e-001f,
  2.296771e-002f, -7.554124e-002f, 6.055127e-002f, 3.359544e-001f, -8.230277e-001f, 0.000000e+000f, -5.276575e-002f, 7.300939e-002f, 0.000000e+000f, -3.745480e-001f,
  2.378720e-002f, -7.588847e-002f, 5.946281e-002f, 3.389393e-001f, -8.270125e-001f, 0.000000e+000f, -5.257085e-002f, 7.273972e-002f, 0.000000e+000f, -3.745480e-001f,
  2.486390e-002f, -7.683165e-002f, 5.870650e-002f, 3.419482e-001f, -8.310291e-001f, 0.000000e+000f, -5.276575e-002f, 7.300939e-002f, 0.000000e+000f, -3.745480e-001f,
  2.583856e-002f, -7.813849e-002f, 5.864873e-002f, 3.438241e-001f, -8.335333e-001f, 0.000000e+000f, -5.335756e-002f, 7.382826e-002f, 0.000000e+000f, -3.745480e-001f,
  2.635313e-002f, -7.958661e-002f, 5.966729e-002f, 3.433942e-001f, -8.329594e-001f, 0.000000e+000f, -5.436824e-002f, 7.522669e-002f, 0.000000e+000f, -3.745480e-001f,
  2.606514e-002f, -8.096766e-002f, 6.212954e-002f, 3.395223e-001f, -8.277907e-001f, 0.000000e+000f, -5.583657e-002f, 7.725834e-002f, 0.000000e+000f, -3.745480e-001f,
  2.467304e-002f, -8.209965e-002f, 6.636097e-002f, 3.311941e-001f, -8.166730e-001f, 0.000000e+000f, -5.782179e-002f, 8.000519e-002f, 0.000000e+000f, -3.745480e-001f,
  2.194782e-002f, -8.284500e-002f, 7.260969e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -6.040959e-002f, 8.358581e-002f, 0.000000e+000f, -3.745480e-001f,
  2.194782e-002f, -8.284500e-002f, 7.260969e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -3.866214e-002f, 5.349492e-002f, 0.000000e+000f, -3.745480e-001f,
  2.194782e-002f, -8.284500e-002f, 7.260969e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -3.717513e-002f, 5.143742e-002f, 0.000000e+000f, -3.745480e-001f,
  2.194782e-002f, -8.284500e-002f, 7.260969e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -3.579828e-002f, 4.953233e-002f, 0.000000e+000f, -3.745480e-001f,
  2.194782e-002f, -8.284500e-002f, 7.260969e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -3.451977e-002f, 4.776332e-002f, 0.000000e+000f, -3.745480e-001f,
  2.194782e-002f, -8.284500e-002f, 7.260969e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -3.332943e-002f, 4.611631e-002f, 0.000000e+000f, -3.745480e-001f,
  2.194782e-002f, -8.284500e-002f, 7.260969e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -3.221845e-002f, 4.457910e-002f, 0.000000e+000f, -3.745480e-001f,
  2.194782e-002f, -8.284500e-002f, 7.260969e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -3.117914e-002f, 4.314106e-002f, 0.000000e+000f, -3.745480e-001f,
  -3.355989e-002f, 8.601342e-002f, -1.380147e-002f, 7.292816e-002f, -5.100009e-001f, 0.000000e+000f, -3.496955e-002f, 4.187270e-002f, 0.000000e+000f, -4.333942e-001f,
  -3.355989e-002f, 9.178572e-002f, -2.760294e-002f, 1.458563e-001f, -5.960009e-001f, 0.000000e+000f, -2.624719e-002f, 3.294114e-002f, 0.000000e+000f, -4.333942e-001f,
  -3.355989e-002f, 9.755802e-002f, -4.140442e-002f, 2.187845e-001f, -6.820009e-001f, 0.000000e+000f, -1.956755e-002f, 2.606462e-002f, 0.000000e+000f, -4.333942e-001f,
  -3.355989e-002f, 1.091026e-001f, -6.900736e-002f, 3.646408e-001f, -8.540009e-001f, 0.000000e+000f, -1.444992e-002f, 2.076137e-002f, 0.000000e+000f, -4.333942e-001f,
  0.000000e+000f, 0.000000e+000f, 3.514500e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 0.000000e+000f, 1.576530e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 3.141061e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 0.000000e+000f, 2.485127e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 2.485127e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -5.701112e-002f, 2.231440e-001f, 0.000000e+000f, -2.153789e-001f, 0.000000e+000f, 0.000000e+000f, 2.937134e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -3.099341e-002f, 2.009336e-001f, 0.000000e+000f, -2.288537e-001f, 0.000000e+000f, 0.000000e+000f, 2.386559e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.441113e-002f, 1.833252e-001f, 0.000000e+000f, -2.401950e-001f, 0.000000e+000f, 0.000000e+000f, 2.003556e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -3.811754e-003f, 1.693135e-001f, 0.000000e+000f, -2.507489e-001f, 0.000000e+000f, 0.000000e+000f, 1.729525e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 3.273152e-003f, 1.580918e-001f, 0.000000e+000f, -2.601397e-001f, 0.000000e+000f, 0.000000e+000f, 1.527534e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 5.974280e-003f, 1.477594e-001f, 0.000000e+000f, -2.734463e-001f, 0.000000e+000f, 0.000000e+000f, 1.374870e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 3.183063e-003f, 1.365117e-001f, 0.000000e+000f, -2.953543e-001f, 0.000000e+000f, 0.000000e+000f, 1.257257e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.719069e-003f, 1.249627e-001f, 0.000000e+000f, -3.216745e-001f, 0.000000e+000f, 0.000000e+000f, 1.165441e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -9.192197e-003f, 1.142932e-001f, 0.000000e+000f, -3.471524e-001f, 0.000000e+000f, 0.000000e+000f, 1.093239e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.719686e-002f, 1.036561e-001f, 0.000000e+000f, -3.745481e-001f, 0.000000e+000f, 0.000000e+000f, 1.036418e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.770264e-002f, 9.220762e-002f, 0.000000e+000f, -4.065609e-001f, 0.000000e+000f, 0.000000e+000f, 9.920204e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -3.659148e-002f, 8.262922e-002f, 0.000000e+000f, -4.333942e-001f, 0.000000e+000f, 0.000000e+000f, 9.579610e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -3.944880e-002f, 7.799151e-002f, 0.000000e+000f, -4.442871e-001f, 0.000000e+000f, 0.000000e+000f, 9.327696e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -3.905418e-002f, 7.641534e-002f, 0.000000e+000f, -4.460271e-001f, 0.000000e+000f, 0.000000e+000f, 9.154298e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -3.940458e-002f, 7.508025e-002f, 0.000000e+000f, -4.484797e-001f, 0.000000e+000f, 0.000000e+000f, 9.052763e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -4.081054e-002f, 7.373061e-002f, 0.000000e+000f, -4.524645e-001f, 0.000000e+000f, 0.000000e+000f, 9.019325e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -4.265779e-002f, 7.279284e-002f, 0.000000e+000f, -4.564811e-001f, 0.000000e+000f, 0.000000e+000f, 9.052763e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -4.432997e-002f, 7.272119e-002f, 0.000000e+000f, -4.589853e-001f, 0.000000e+000f, 0.000000e+000f, 9.154298e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -4.521278e-002f, 7.398416e-002f, 0.000000e+000f, -4.584114e-001f, 0.000000e+000f, 0.000000e+000f, 9.327696e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -4.471870e-002f, 7.703721e-002f, 0.000000e+000f, -4.532427e-001f, 0.000000e+000f, 0.000000e+000f, 9.579610e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -4.233034e-002f, 8.228395e-002f, 0.000000e+000f, -4.421250e-001f, 0.000000e+000f, 0.000000e+000f, 9.920204e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -3.765481e-002f, 9.003202e-002f, 0.000000e+000f, -4.240009e-001f, 0.000000e+000f, 0.000000e+000f, 1.036418e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -3.765481e-002f, 9.003202e-002f, 0.000000e+000f, -4.240009e-001f, 0.000000e+000f, 0.000000e+000f, 6.633075e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -3.765481e-002f, 9.003202e-002f, 0.000000e+000f, -4.240009e-001f, 0.000000e+000f, 0.000000e+000f, 6.377957e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -3.765481e-002f, 9.003202e-002f, 0.000000e+000f, -4.240009e-001f, 0.000000e+000f, 0.000000e+000f, 6.141736e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -3.765481e-002f, 9.003202e-002f, 0.000000e+000f, -4.240009e-001f, 0.000000e+000f, 0.000000e+000f, 5.922389e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -3.765481e-002f, 9.003202e-002f, 0.000000e+000f, -4.240009e-001f, 0.000000e+000f, 0.000000e+000f, 5.718168e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -3.765481e-002f, 9.003202e-002f, 0.000000e+000f, -4.240009e-001f, 0.000000e+000f, 0.000000e+000f, 5.527563e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -3.765481e-002f, 9.003202e-002f, 0.000000e+000f, -4.240009e-001f, 0.000000e+000f, 0.000000e+000f, 5.349254e-002f, 0.000000e+000f, 0.000000e+000f,
  -3.765481e-002f, 9.650864e-002f, -1.548551e-002f, 7.292816e-002f, -5.100009e-001f, -3.724615e-002f, 4.414929e-002f, 0.000000e+000f, 0.000000e+000f, -4.333942e-001f,
  -3.765481e-002f, 1.029853e-001f, -3.097101e-002f, 1.458563e-001f, -5.960009e-001f, -2.985822e-002f, 3.655218e-002f, 0.000000e+000f, 0.000000e+000f, -4.333942e-001f,
  -3.765481e-002f, 1.094619e-001f, -4.645652e-002f, 2.187845e-001f, -6.820009e-001f, -2.386843e-002f, 3.036551e-002f, 0.000000e+000f, 0.000000e+000f, -4.333942e-001f,
  -3.765481e-002f, 1.224152e-001f, -7.742753e-002f, 3.646408e-001f, -8.540009e-001f, -1.900847e-002f, 2.531992e-002f, 0.000000e+000f, 0.000000e+000f, -4.333942e-001f,
  0.000000e+000f, -2.389128e-001f, 3.089568e-001f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -1.071712e-001f, 1.385914e-001f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, -2.135267e-001f, 2.761281e-001f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -1.689368e-001f, 2.184655e-001f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, -1.689368e-001f, 2.184655e-001f, 0.000000e+000f, -3.745480e-001f,
  3.875569e-002f, -2.018095e-001f, 1.961641e-001f, 1.613394e-001f, -5.899269e-001f, 0.000000e+000f, -1.996639e-001f, 2.582011e-001f, 0.000000e+000f, -3.745480e-001f,
  2.106906e-002f, -1.638390e-001f, 1.766391e-001f, 1.714334e-001f, -6.034017e-001f, 0.000000e+000f, -1.622363e-001f, 2.098005e-001f, 0.000000e+000f, -3.745480e-001f,
  9.796567e-003f, -1.372916e-001f, 1.611597e-001f, 1.799291e-001f, -6.147430e-001f, 0.000000e+000f, -1.362001e-001f, 1.761310e-001f, 0.000000e+000f, -3.745480e-001f,
  2.591198e-003f, -1.184488e-001f, 1.488421e-001f, 1.878350e-001f, -6.252969e-001f, 0.000000e+000f, -1.175717e-001f, 1.520411e-001f, 0.000000e+000f, -3.745480e-001f,
  -2.225061e-003f, -1.045921e-001f, 1.389772e-001f, 1.948696e-001f, -6.346877e-001f, 0.000000e+000f, -1.038405e-001f, 1.342843e-001f, 0.000000e+000f, -3.745480e-001f,
  -4.061266e-003f, -9.519365e-002f, 1.298940e-001f, 2.048375e-001f, -6.479943e-001f, 0.000000e+000f, -9.346253e-002f, 1.208637e-001f, 0.000000e+000f, -3.745480e-001f,
  -2.163820e-003f, -9.000133e-002f, 1.200063e-001f, 2.212488e-001f, -6.699023e-001f, 0.000000e+000f, -8.546730e-002f, 1.105245e-001f, 0.000000e+000f, -3.745480e-001f,
  1.848401e-003f, -8.733890e-002f, 1.098537e-001f, 2.409651e-001f, -6.962225e-001f, 0.000000e+000f, -7.922571e-002f, 1.024530e-001f, 0.000000e+000f, -3.745480e-001f,
  6.248779e-003f, -8.577635e-002f, 1.004742e-001f, 2.600505e-001f, -7.217004e-001f, 0.000000e+000f, -7.431751e-002f, 9.610579e-002f, 0.000000e+000f, -3.745480e-001f,
  1.169028e-002f, -8.558219e-002f, 9.112324e-002f, 2.805725e-001f, -7.490961e-001f, 0.000000e+000f, -7.045483e-002f, 9.111066e-002f, 0.000000e+000f, -3.745480e-001f,
  1.883202e-002f, -8.703513e-002f, 8.105896e-002f, 3.045532e-001f, -7.811089e-001f, 0.000000e+000f, -6.743672e-002f, 8.720770e-002f, 0.000000e+000f, -3.745480e-001f,
  2.487458e-002f, -8.833792e-002f, 7.263867e-002f, 3.246539e-001f, -8.079422e-001f, 0.000000e+000f, -6.512139e-002f, 8.421356e-002f, 0.000000e+000f, -3.745480e-001f,
  2.681697e-002f, -8.769709e-002f, 6.856170e-002f, 3.328137e-001f, -8.188351e-001f, 0.000000e+000f, -6.340890e-002f, 8.199901e-002f, 0.000000e+000f, -3.745480e-001f,
  2.654871e-002f, -8.627872e-002f, 6.717610e-002f, 3.341172e-001f, -8.205751e-001f, 0.000000e+000f, -6.223015e-002f, 8.047468e-002f, 0.000000e+000f, -3.745480e-001f,
  2.678690e-002f, -8.567917e-002f, 6.600243e-002f, 3.359544e-001f, -8.230277e-001f, 0.000000e+000f, -6.153993e-002f, 7.958210e-002f, 0.000000e+000f, -3.745480e-001f,
  2.774266e-002f, -8.599767e-002f, 6.481598e-002f, 3.389393e-001f, -8.270125e-001f, 0.000000e+000f, -6.131262e-002f, 7.928814e-002f, 0.000000e+000f, -3.745480e-001f,
  2.899841e-002f, -8.698407e-002f, 6.399158e-002f, 3.419482e-001f, -8.310291e-001f, 0.000000e+000f, -6.153993e-002f, 7.958210e-002f, 0.000000e+000f, -3.745480e-001f,
  3.013515e-002f, -8.840538e-002f, 6.392860e-002f, 3.438241e-001f, -8.335333e-001f, 0.000000e+000f, -6.223015e-002f, 8.047468e-002f, 0.000000e+000f, -3.745480e-001f,
  3.073527e-002f, -9.004000e-002f, 6.503886e-002f, 3.433942e-001f, -8.329594e-001f, 0.000000e+000f, -6.340890e-002f, 8.199901e-002f, 0.000000e+000f, -3.745480e-001f,
  3.039940e-002f, -9.168109e-002f, 6.772278e-002f, 3.395223e-001f, -8.277907e-001f, 0.000000e+000f, -6.512139e-002f, 8.421356e-002f, 0.000000e+000f, -3.745480e-001f,
  2.877581e-002f, -9.314820e-002f, 7.233514e-002f, 3.311941e-001f, -8.166730e-001f, 0.000000e+000f, -6.743672e-002f, 8.720770e-002f, 0.000000e+000f, -3.745480e-001f,
  2.559743e-002f, -9.430505e-002f, 7.914641e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -7.045483e-002f, 9.111066e-002f, 0.000000e+000f, -3.745480e-001f,
  2.559743e-002f, -9.430505e-002f, 7.914641e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -4.509109e-002f, 5.831082e-002f, 0.000000e+000f, -3.745480e-001f,
  2.559743e-002f, -9.430505e-002f, 7.914641e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -4.335682e-002f, 5.606810e-002f, 0.000000e+000f, -3.745480e-001f,
  2.559743e-002f, -9.430505e-002f, 7.914641e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -4.175101e-002f, 5.399150e-002f, 0.000000e+000f, -3.745480e-001f,
  2.559743e-002f, -9.430505e-002f, 7.914641e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -4.025990e-002f, 5.206323e-002f, 0.000000e+000f, -3.745480e-001f,
  2.559743e-002f, -9.430505e-002f, 7.914641e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -3.887163e-002f, 5.026795e-002f, 0.000000e+000f, -3.745480e-001f,
  2.559743e-002f, -9.430505e-002f, 7.914641e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -3.757591e-002f, 4.859235e-002f, 0.000000e+000f, -3.745480e-001f,
  2.559743e-002f, -9.430505e-002f, 7.914641e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -3.636378e-002f, 4.702486e-002f, 0.000000e+000f, -3.745480e-001f,
  -2.372684e-002f, 6.081149e-002f, -9.757641e-003f, 7.292816e-002f, -5.100009e-001f, 0.000000e+000f, -3.496955e-002f, 4.187270e-002f, 0.000000e+000f, -4.333942e-001f,
  -2.372684e-002f, 6.489250e-002f, -1.951528e-002f, 1.458563e-001f, -5.960009e-001f, 0.000000e+000f, -2.624719e-002f, 3.294114e-002f, 0.000000e+000f, -4.333942e-001f,
  -2.372684e-002f, 6.897352e-002f, -2.927292e-002f, 2.187845e-001f, -6.820009e-001f, 0.000000e+000f, -1.956755e-002f, 2.606462e-002f, 0.000000e+000f, -4.333942e-001f,
  -2.372684e-002f, 7.713555e-002f, -4.878821e-002f, 3.646408e-001f, -8.540009e-001f, 0.000000e+000f, -1.444992e-002f, 2.076137e-002f, 0.000000e+000f, -4.333942e-001f,
  0.000000e+000f, -2.163257e-001f, 2.719636e-001f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -9.703908e-002f, 1.219971e-001f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, -1.933396e-001f, 2.430657e-001f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -1.529653e-001f, 1.923073e-001f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, -1.529653e-001f, 1.923073e-001f, 0.000000e+000f, -3.745480e-001f,
  3.509167e-002f, -1.814674e-001f, 1.726762e-001f, 1.613394e-001f, -5.899269e-001f, 0.000000e+000f, -1.807875e-001f, 2.272851e-001f, 0.000000e+000f, -3.745480e-001f,
  1.907716e-002f, -1.476630e-001f, 1.554891e-001f, 1.714334e-001f, -6.034017e-001f, 0.000000e+000f, -1.468983e-001f, 1.846799e-001f, 0.000000e+000f, -3.745480e-001f,
  8.870387e-003f, -1.239927e-001f, 1.418631e-001f, 1.799291e-001f, -6.147430e-001f, 0.000000e+000f, -1.233236e-001f, 1.550418e-001f, 0.000000e+000f, -3.745480e-001f,
  2.346223e-003f, -1.071660e-001f, 1.310203e-001f, 1.878350e-001f, -6.252969e-001f, 0.000000e+000f, -1.064563e-001f, 1.338364e-001f, 0.000000e+000f, -3.745480e-001f,
  -2.014701e-003f, -9.477629e-002f, 1.223366e-001f, 1.948696e-001f, -6.346877e-001f, 0.000000e+000f, -9.402330e-002f, 1.182056e-001f, 0.000000e+000f, -3.745480e-001f,
  -3.677309e-003f, -8.632624e-002f, 1.143411e-001f, 2.048375e-001f, -6.479943e-001f, 0.000000e+000f, -8.462646e-002f, 1.063920e-001f, 0.000000e+000f, -3.745480e-001f,
  -1.959249e-003f, -8.156299e-002f, 1.056373e-001f, 2.212488e-001f, -6.699023e-001f, 0.000000e+000f, -7.738711e-002f, 9.729072e-002f, 0.000000e+000f, -3.745480e-001f,
  1.673651e-003f, -7.902155e-002f, 9.670025e-002f, 2.409651e-001f, -6.962225e-001f, 0.000000e+000f, -7.173561e-002f, 9.018567e-002f, 0.000000e+000f, -3.745480e-001f,
  5.658012e-003f, -7.746336e-002f, 8.844385e-002f, 2.600505e-001f, -7.217004e-001f, 0.000000e+000f, -6.729144e-002f, 8.459848e-002f, 0.000000e+000f, -3.745480e-001f,
  1.058507e-002f, -7.711026e-002f, 8.021253e-002f, 2.805725e-001f, -7.490961e-001f, 0.000000e+000f, -6.379395e-002f, 8.020145e-002f, 0.000000e+000f, -3.745480e-001f,
  1.705162e-002f, -7.819316e-002f, 7.135330e-002f, 3.045532e-001f, -7.811089e-001f, 0.000000e+000f, -6.106117e-002f, 7.676581e-002f, 0.000000e+000f, -3.745480e-001f,
  2.252291e-002f, -7.917591e-002f, 6.394122e-002f, 3.246539e-001f, -8.079422e-001f, 0.000000e+000f, -5.896473e-002f, 7.413018e-002f, 0.000000e+000f, -3.745480e-001f,
  2.428166e-002f, -7.853238e-002f, 6.035241e-002f, 3.328137e-001f, -8.188351e-001f, 0.000000e+000f, -5.741414e-002f, 7.218079e-002f, 0.000000e+000f, -3.745480e-001f,
  2.403876e-002f, -7.725684e-002f, 5.913272e-002f, 3.341172e-001f, -8.205751e-001f, 0.000000e+000f, -5.634684e-002f, 7.083898e-002f, 0.000000e+000f, -3.745480e-001f,
  2.425444e-002f, -7.670621e-002f, 5.809958e-002f, 3.359544e-001f, -8.230277e-001f, 0.000000e+000f, -5.572187e-002f, 7.005327e-002f, 0.000000e+000f, -3.745480e-001f,
  2.511984e-002f, -7.696345e-002f, 5.705518e-002f, 3.389393e-001f, -8.270125e-001f, 0.000000e+000f, -5.551605e-002f, 6.979451e-002f, 0.000000e+000f, -3.745480e-001f,
  2.625686e-002f, -7.781569e-002f, 5.632950e-002f, 3.419482e-001f, -8.310291e-001f, 0.000000e+000f, -5.572187e-002f, 7.005327e-002f, 0.000000e+000f, -3.745480e-001f,
  2.728613e-002f, -7.906559e-002f, 5.627406e-002f, 3.438241e-001f, -8.335333e-001f, 0.000000e+000f, -5.634684e-002f, 7.083898e-002f, 0.000000e+000f, -3.745480e-001f,
  2.782952e-002f, -8.052612e-002f, 5.725138e-002f, 3.433942e-001f, -8.329594e-001f, 0.000000e+000f, -5.741414e-002f, 7.218079e-002f, 0.000000e+000f, -3.745480e-001f,
  2.752540e-002f, -8.202300e-002f, 5.961394e-002f, 3.395223e-001f, -8.277907e-001f, 0.000000e+000f, -5.896473e-002f, 7.413018e-002f, 0.000000e+000f, -3.745480e-001f,
  2.605531e-002f, -8.340431e-002f, 6.367404e-002f, 3.311941e-001f, -8.166730e-001f, 0.000000e+000f, -6.106117e-002f, 7.676581e-002f, 0.000000e+000f, -3.745480e-001f,
  2.317742e-002f, -8.455534e-002f, 6.966975e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -6.379395e-002f, 8.020145e-002f, 0.000000e+000f, -3.745480e-001f,
  2.317742e-002f, -8.455534e-002f, 6.966975e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -4.082813e-002f, 5.132893e-002f, 0.000000e+000f, -3.745480e-001f,
  2.317742e-002f, -8.455534e-002f, 6.966975e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -3.925781e-002f, 4.935474e-002f, 0.000000e+000f, -3.745480e-001f,
  2.317742e-002f, -8.455534e-002f, 6.966975e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -3.780382e-002f, 4.752678e-002f, 0.000000e+000f, -3.745480e-001f,
  2.317742e-002f, -8.455534e-002f, 6.966975e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -3.645368e-002f, 4.582940e-002f, 0.000000e+000f, -3.745480e-001f,
  2.317742e-002f, -8.455534e-002f, 6.966975e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -3.519666e-002f, 4.424908e-002f, 0.000000e+000f, -3.745480e-001f,
  2.317742e-002f, -8.455534e-002f, 6.966975e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -3.402344e-002f, 4.277411e-002f, 0.000000e+000f, -3.745480e-001f,
  2.317742e-002f, -8.455534e-002f, 6.966975e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -3.292591e-002f, 4.139430e-002f, 0.000000e+000f, -3.745480e-001f,
  -2.114657e-002f, 5.419830e-002f, -8.696507e-003f, 7.292816e-002f, -5.100009e-001f, 0.000000e+000f, -3.496955e-002f, 4.187270e-002f, 0.000000e+000f, -4.333942e-001f,
  -2.114657e-002f, 5.783551e-002f, -1.739301e-002f, 1.458563e-001f, -5.960009e-001f, 0.000000e+000f, -2.624719e-002f, 3.294114e-002f, 0.000000e+000f, -4.333942e-001f,
  -2.114657e-002f, 6.147272e-002f, -2.608952e-002f, 2.187845e-001f, -6.820009e-001f, 0.000000e+000f, -1.956755e-002f, 2.606462e-002f, 0.000000e+000f, -4.333942e-001f,
  -2.114657e-002f, 6.874713e-002f, -4.348253e-002f, 3.646408e-001f, -8.540009e-001f, 0.000000e+000f, -1.444992e-002f, 2.076137e-002f, 0.000000e+000f, -4.333942e-001f,
  0.000000e+000f, -2.056937e-001f, 2.552811e-001f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -1.060818e-001f, 1.316554e-001f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, -1.762287e-001f, 2.187128e-001f, 0.000000e+000f, -3.745480e-001f,
  4.525992e-002f, -1.958030e-001f, 1.732937e-001f, 1.506536e-001f, -5.756619e-001f, 0.000000e+000f, -1.977838e-001f, 2.454644e-001f, 0.000000e+000f, -3.745480e-001f,
  2.353832e-002f, -1.516394e-001f, 1.519405e-001f, 1.679995e-001f, -5.988177e-001f, 0.000000e+000f, -1.511505e-001f, 1.875889e-001f, 0.000000e+000f, -3.745480e-001f,
  1.002324e-002f, -1.216143e-001f, 1.354939e-001f, 1.782374e-001f, -6.124846e-001f, 0.000000e+000f, -1.211465e-001f, 1.503518e-001f, 0.000000e+000f, -3.745480e-001f,
  2.230911e-003f, -1.018631e-001f, 1.229834e-001f, 1.878350e-001f, -6.252969e-001f, 0.000000e+000f, -1.012242e-001f, 1.256267e-001f, 0.000000e+000f, -3.745480e-001f,
  -2.471158e-003f, -8.825158e-002f, 1.133330e-001f, 1.964695e-001f, -6.368235e-001f, 0.000000e+000f, -8.741654e-002f, 1.084904e-001f, 0.000000e+000f, -3.745480e-001f,
  -3.185041e-003f, -7.996518e-002f, 1.041485e-001f, 2.106880e-001f, -6.558044e-001f, 0.000000e+000f, -7.750305e-002f, 9.618701e-002f, 0.000000e+000f, -3.745480e-001f,
  1.160331e-004f, -7.594821e-002f, 9.407862e-002f, 2.330148e-001f, -6.856093e-001f, 0.000000e+000f, -7.020453e-002f, 8.712901e-002f, 0.000000e+000f, -3.745480e-001f,
  4.587417e-003f, -7.380520e-002f, 8.453187e-002f, 2.562417e-001f, -7.166159e-001f, 0.000000e+000f, -6.475068e-002f, 8.036038e-002f, 0.000000e+000f, -3.745480e-001f,
  1.006484e-002f, -7.315819e-002f, 7.529221e-002f, 2.805725e-001f, -7.490961e-001f, 0.000000e+000f, -6.065861e-002f, 7.528181e-002f, 0.000000e+000f, -3.745480e-001f,
  1.743978e-002f, -7.432689e-002f, 6.538329e-002f, 3.092248e-001f, -7.873453e-001f, 0.000000e+000f, -5.761625e-002f, 7.150603e-002f, 0.000000e+000f, -3.745480e-001f,
  2.249241e-002f, -7.485072e-002f, 5.825101e-002f, 3.293029e-001f, -8.141484e-001f, 0.000000e+000f, -5.541855e-002f, 6.877852e-002f, 0.000000e+000f, -3.745480e-001f,
  2.299479e-002f, -7.354414e-002f, 5.585565e-002f, 3.338413e-001f, -8.202068e-001f, 0.000000e+000f, -5.393121e-002f, 6.693261e-002f, 0.000000e+000f, -3.745480e-001f,
  2.296039e-002f, -7.260251e-002f, 5.474000e-002f, 3.354596e-001f, -8.223673e-001f, 0.000000e+000f, -5.306974e-002f, 6.586347e-002f, 0.000000e+000f, -3.745480e-001f,
  2.388525e-002f, -7.279580e-002f, 5.355536e-002f, 3.389393e-001f, -8.270125e-001f, 0.000000e+000f, -5.278755e-002f, 6.551325e-002f, 0.000000e+000f, -3.745480e-001f,
  2.518190e-002f, -7.379851e-002f, 5.280262e-002f, 3.424515e-001f, -8.317010e-001f, 0.000000e+000f, -5.306974e-002f, 6.586347e-002f, 0.000000e+000f, -3.745480e-001f,
  2.622702e-002f, -7.529795e-002f, 5.305376e-002f, 3.439941e-001f, -8.337602e-001f, 0.000000e+000f, -5.393121e-002f, 6.693261e-002f, 0.000000e+000f, -3.745480e-001f,
  2.640561e-002f, -7.700244e-002f, 5.489410e-002f, 3.415529e-001f, -8.305014e-001f, 0.000000e+000f, -5.541855e-002f, 6.877852e-002f, 0.000000e+000f, -3.745480e-001f,
  2.515536e-002f, -7.865160e-002f, 5.886655e-002f, 3.332582e-001f, -8.194285e-001f, 0.000000e+000f, -5.761625e-002f, 7.150603e-002f, 0.000000e+000f, -3.745480e-001f,
  2.203829e-002f, -8.004434e-002f, 6.539613e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -6.065861e-002f, 7.528181e-002f, 0.000000e+000f, -3.745480e-001f,
  2.203829e-002f, -8.004434e-002f, 6.539613e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -3.851340e-002f, 4.779798e-002f, 0.000000e+000f, -3.745480e-001f,
  2.203829e-002f, -8.004434e-002f, 6.539613e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -3.676279e-002f, 4.562534e-002f, 0.000000e+000f, -3.745480e-001f,
  2.203829e-002f, -8.004434e-002f, 6.539613e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -3.516441e-002f, 4.364163e-002f, 0.000000e+000f, -3.745480e-001f,
  2.203829e-002f, -8.004434e-002f, 6.539613e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -3.369923e-002f, 4.182323e-002f, 0.000000e+000f, -3.745480e-001f,
  2.203829e-002f, -8.004434e-002f, 6.539613e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -3.235126e-002f, 4.015030e-002f, 0.000000e+000f, -3.745480e-001f,
  2.203829e-002f, -8.004434e-002f, 6.539613e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -3.110698e-002f, 3.860606e-002f, 0.000000e+000f, -3.745480e-001f,
  -1.996365e-002f, 5.116649e-002f, -8.210032e-003f, 7.292816e-002f, -5.100009e-001f, 0.000000e+000f, -3.453783e-002f, 4.135575e-002f, 0.000000e+000f, -4.333942e-001f,
  -1.996365e-002f, 5.460024e-002f, -1.642006e-002f, 1.458563e-001f, -5.960009e-001f, 0.000000e+000f, -2.577849e-002f, 3.235291e-002f, 0.000000e+000f, -4.333942e-001f,
  -1.996365e-002f, 6.490148e-002f, -4.105016e-002f, 3.646408e-001f, -8.540009e-001f, 0.000000e+000f, -1.911772e-002f, 2.546544e-002f, 0.000000e+000f, -4.333942e-001f,
  0.000000e+000f, -1.954967e-001f, 2.396915e-001f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -1.008230e-001f, 1.236154e-001f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, -1.674924e-001f, 2.053564e-001f, 0.000000e+000f, -3.745480e-001f,
  3.902221e-002f, -1.776561e-001f, 1.591583e-001f, 1.548086e-001f, -5.812086e-001f, 0.000000e+000f, -1.791892e-001f, 2.196974e-001f, 0.000000e+000f, -3.745480e-001f,
  1.969242e-002f, -1.381530e-001f, 1.397821e-001f, 1.697531e-001f, -6.011586e-001f, 0.000000e+000f, -1.380050e-001f, 1.692030e-001f, 0.000000e+000f, -3.745480e-001f,
  6.636218e-003f, -1.084054e-001f, 1.229361e-001f, 1.815976e-001f, -6.169703e-001f, 0.000000e+000f, -1.079963e-001f, 1.324104e-001f, 0.000000e+000f, -3.745480e-001f,
  3.118611e-004f, -9.192792e-002f, 1.122407e-001f, 1.906100e-001f, -6.290014e-001f, 0.000000e+000f, -9.131520e-002f, 1.119583e-001f, 0.000000e+000f, -3.745480e-001f,
  -3.268695e-003f, -7.935665e-002f, 1.022099e-001f, 2.023671e-001f, -6.446964e-001f, 0.000000e+000f, -7.800014e-002f, 9.563317e-002f, 0.000000e+000f, -3.745480e-001f,
  -1.770603e-003f, -7.376482e-002f, 9.310202e-002f, 2.212488e-001f, -6.699023e-001f, 0.000000e+000f, -6.993589e-002f, 8.574589e-002f, 0.000000e+000f, -3.745480e-001f,
  2.215508e-003f, -7.100063e-002f, 8.372089e-002f, 2.448469e-001f, -7.014045e-001f, 0.000000e+000f, -6.394681e-002f, 7.840289e-002f, 0.000000e+000f, -3.745480e-001f,
  7.609352e-003f, -6.940951e-002f, 7.366188e-002f, 2.719349e-001f, -7.375654e-001f, 0.000000e+000f, -5.882498e-002f, 7.212319e-002f, 0.000000e+000f, -3.745480e-001f,
  1.421047e-002f, -6.997393e-002f, 6.443087e-002f, 2.997339e-001f, -7.746754e-001f, 0.000000e+000f, -5.562667e-002f, 6.820186e-002f, 0.000000e+000f, -3.745480e-001f,
  2.094373e-002f, -7.090184e-002f, 5.544690e-002f, 3.272530e-001f, -8.114118e-001f, 0.000000e+000f, -5.296972e-002f, 6.494427e-002f, 0.000000e+000f, -3.745480e-001f,
  2.192087e-002f, -6.981090e-002f, 5.264046e-002f, 3.336541e-001f, -8.199570e-001f, 0.000000e+000f, -5.145026e-002f, 6.308131e-002f, 0.000000e+000f, -3.745480e-001f,
  2.182217e-002f, -6.867580e-002f, 5.139713e-002f, 3.354596e-001f, -8.223673e-001f, 0.000000e+000f, -5.043888e-002f, 6.184130e-002f, 0.000000e+000f, -3.745480e-001f,
  2.270117e-002f, -6.884631e-002f, 5.028483e-002f, 3.389393e-001f, -8.270125e-001f, 0.000000e+000f, -5.017068e-002f, 6.151247e-002f, 0.000000e+000f, -3.745480e-001f,
  2.393355e-002f, -6.978082e-002f, 4.957806e-002f, 3.424515e-001f, -8.317010e-001f, 0.000000e+000f, -5.043888e-002f, 6.184130e-002f, 0.000000e+000f, -3.745480e-001f,
  2.502771e-002f, -7.145312e-002f, 4.998363e-002f, 3.439172e-001f, -8.336577e-001f, 0.000000e+000f, -5.145026e-002f, 6.308131e-002f, 0.000000e+000f, -3.745480e-001f,
  2.500597e-002f, -7.308075e-002f, 5.201188e-002f, 3.406233e-001f, -8.292605e-001f, 0.000000e+000f, -5.296972e-002f, 6.494427e-002f, 0.000000e+000f, -3.745480e-001f,
  2.313363e-002f, -7.488078e-002f, 5.703341e-002f, 3.289189e-001f, -8.136358e-001f, 0.000000e+000f, -5.562667e-002f, 6.820186e-002f, 0.000000e+000f, -3.745480e-001f,
  2.094578e-002f, -7.576186e-002f, 6.140251e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -3.780429e-002f, 4.635048e-002f, 0.000000e+000f, -3.745480e-001f,
  2.094578e-002f, -7.576186e-002f, 6.140251e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -3.575290e-002f, 4.383534e-002f, 0.000000e+000f, -3.745480e-001f,
  2.094578e-002f, -7.576186e-002f, 6.140251e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -3.416388e-002f, 4.188710e-002f, 0.000000e+000f, -3.745480e-001f,
  2.094578e-002f, -7.576186e-002f, 6.140251e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -3.271010e-002f, 4.010467e-002f, 0.000000e+000f, -3.745480e-001f,
  2.094578e-002f, -7.576186e-002f, 6.140251e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -3.116300e-002f, 3.820783e-002f, 0.000000e+000f, -3.745480e-001f,
  2.094578e-002f, -7.576186e-002f, 6.140251e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -2.994885e-002f, 3.671921e-002f, 0.000000e+000f, -3.745480e-001f,
  -1.884690e-002f, 4.830428e-002f, -7.750770e-003f, 7.292816e-002f, -5.100009e-001f, 0.000000e+000f, -3.475235e-002f, 4.161262e-002f, 0.000000e+000f, -4.333942e-001f,
  -1.884690e-002f, 5.154595e-002f, -1.550154e-002f, 1.458563e-001f, -5.960009e-001f, 0.000000e+000f, -2.593285e-002f, 3.254664e-002f, 0.000000e+000f, -4.333942e-001f,
  -1.884690e-002f, 6.127095e-002f, -3.875385e-002f, 3.646408e-001f, -8.540009e-001f, 0.000000e+000f, -1.911772e-002f, 2.546544e-002f, 0.000000e+000f, -4.333942e-001f,
  0.000000e+000f, -1.905593e-001f, 2.322818e-001f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -1.191743e-001f, 1.452673e-001f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, -1.486954e-001f, 1.812520e-001f, 0.000000e+000f, -3.745480e-001f,
  2.766765e-002f, -1.520762e-001f, 1.442635e-001f, 1.638870e-001f, -5.933276e-001f, 0.000000e+000f, -1.523608e-001f, 1.857199e-001f, 0.000000e+000f, -3.745480e-001f,
  9.285753e-003f, -1.124607e-001f, 1.232867e-001f, 1.782374e-001f, -6.124846e-001f, 0.000000e+000f, -1.122329e-001f, 1.368060e-001f, 0.000000e+000f, -3.745480e-001f,
  3.039848e-004f, -8.960402e-002f, 1.087710e-001f, 1.906100e-001f, -6.290014e-001f, 0.000000e+000f, -8.900894e-002f, 1.084973e-001f, 0.000000e+000f, -3.745480e-001f,
  -3.239307e-003f, -7.616787e-002f, 9.765775e-002f, 2.048375e-001f, -6.479943e-001f, 0.000000e+000f, -7.454666e-002f, 9.086850e-002f, 0.000000e+000f, -3.745480e-001f,
  1.074956e-004f, -7.035775e-002f, 8.560271e-002f, 2.330148e-001f, -6.856093e-001f, 0.000000e+000f, -6.503905e-002f, 7.927922e-002f, 0.000000e+000f, -3.745480e-001f,
  5.750780e-003f, -6.785237e-002f, 7.416380e-002f, 2.639144e-001f, -7.268585e-001f, 0.000000e+000f, -5.859946e-002f, 7.142970e-002f, 0.000000e+000f, -3.745480e-001f,
  1.385157e-002f, -6.810809e-002f, 6.243909e-002f, 2.997339e-001f, -7.746754e-001f, 0.000000e+000f, -5.422176e-002f, 6.609350e-002f, 0.000000e+000f, -3.745480e-001f,
  2.083748e-002f, -6.888234e-002f, 5.300295e-002f, 3.293029e-001f, -8.141484e-001f, 0.000000e+000f, -5.134099e-002f, 6.258200e-002f, 0.000000e+000f, -3.745480e-001f,
  2.117552e-002f, -6.724492e-002f, 5.050476e-002f, 3.341172e-001f, -8.205751e-001f, 0.000000e+000f, -4.963540e-002f, 6.050298e-002f, 0.000000e+000f, -3.745480e-001f,
  2.177556e-002f, -6.679989e-002f, 4.907073e-002f, 3.376788e-001f, -8.253298e-001f, 0.000000e+000f, -4.893250e-002f, 5.964618e-002f, 0.000000e+000f, -3.745480e-001f,
  2.332908e-002f, -6.785242e-002f, 4.804543e-002f, 3.424515e-001f, -8.317010e-001f, 0.000000e+000f, -4.916499e-002f, 5.992957e-002f, 0.000000e+000f, -3.745480e-001f,
  2.446894e-002f, -6.973426e-002f, 4.864565e-002f, 3.437203e-001f, -8.333948e-001f, 0.000000e+000f, -5.035489e-002f, 6.138000e-002f, 0.000000e+000f, -3.745480e-001f,
  2.386589e-002f, -7.184597e-002f, 5.211575e-002f, 3.367762e-001f, -8.241248e-001f, 0.000000e+000f, -5.261864e-002f, 6.413938e-002f, 0.000000e+000f, -3.745480e-001f,
  2.041677e-002f, -7.370313e-002f, 5.950435e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -5.619549e-002f, 6.849938e-002f, 0.000000e+000f, -3.745480e-001f,
  2.041677e-002f, -7.370313e-002f, 5.950435e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -3.512218e-002f, 4.281211e-002f, 0.000000e+000f, -3.745480e-001f,
  2.041677e-002f, -7.370313e-002f, 5.950435e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -3.305617e-002f, 4.029375e-002f, 0.000000e+000f, -3.745480e-001f,
  2.041677e-002f, -7.370313e-002f, 5.950435e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -3.121972e-002f, 3.805521e-002f, 0.000000e+000f, -3.745480e-001f,
  2.041677e-002f, -7.370313e-002f, 5.950435e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -2.957657e-002f, 3.605231e-002f, 0.000000e+000f, -3.745480e-001f,
  -1.831217e-002f, 4.693379e-002f, -7.530865e-003f, 7.292816e-002f, -5.100009e-001f, 0.000000e+000f, -3.496955e-002f, 4.187270e-002f, 0.000000e+000f, -4.333942e-001f,
  -1.831217e-002f, 5.953257e-002f, -3.765432e-002f, 3.646408e-001f, -8.540009e-001f, 0.000000e+000f, -2.577849e-002f, 3.235291e-002f, 0.000000e+000f, -4.333942e-001f,
  -1.831217e-002f, 5.323318e-002f, -2.259259e-002f, 2.187845e-001f, -6.820009e-001f, 0.000000e+000f, -1.890047e-002f, 2.517606e-002f, 0.000000e+000f, -4.333942e-001f,
  0.000000e+000f, -1.857278e-001f, 2.251164e-001f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -1.313294e-001f, 1.591814e-001f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, -1.313294e-001f, 1.591814e-001f, 0.000000e+000f, -3.745480e-001f,
  1.637882e-002f, -1.260381e-001f, 1.287053e-001f, 1.714334e-001f, -6.034017e-001f, 0.000000e+000f, -1.261205e-001f, 1.528678e-001f, 0.000000e+000f, -3.745480e-001f,
  2.014365e-003f, -9.191721e-002f, 1.084514e-001f, 1.878350e-001f, -6.252969e-001f, 0.000000e+000f, -9.139874e-002f, 1.107823e-001f, 0.000000e+000f, -3.745480e-001f,
  -3.157177e-003f, -7.425839e-002f, 9.464522e-002f, 2.048375e-001f, -6.479943e-001f, 0.000000e+000f, -7.265659e-002f, 8.806541e-002f, 0.000000e+000f, -3.745480e-001f,
  1.436923e-003f, -6.777963e-002f, 8.004312e-002f, 2.409651e-001f, -6.962225e-001f, 0.000000e+000f, -6.158907e-002f, 7.465071e-002f, 0.000000e+000f, -3.745480e-001f,
  9.087880e-003f, -6.579348e-002f, 6.639549e-002f, 2.805725e-001f, -7.490961e-001f, 0.000000e+000f, -5.477070e-002f, 6.638632e-002f, 0.000000e+000f, -3.745480e-001f,
  1.933719e-002f, -6.710453e-002f, 5.292701e-002f, 3.246539e-001f, -8.079422e-001f, 0.000000e+000f, -5.062455e-002f, 6.136087e-002f, 0.000000e+000f, -3.745480e-001f,
  2.063863e-002f, -6.539818e-002f, 4.894679e-002f, 3.341172e-001f, -8.205751e-001f, 0.000000e+000f, -4.837694e-002f, 5.863659e-002f, 0.000000e+000f, -3.745480e-001f,
  2.156680e-002f, -6.510442e-002f, 4.722713e-002f, 3.389393e-001f, -8.270125e-001f, 0.000000e+000f, -4.766366e-002f, 5.777204e-002f, 0.000000e+000f, -3.745480e-001f,
  2.342668e-002f, -6.682530e-002f, 4.658056e-002f, 3.438241e-001f, -8.335333e-001f, 0.000000e+000f, -4.837694e-002f, 5.863659e-002f, 0.000000e+000f, -3.745480e-001f,
  2.363211e-002f, -6.935514e-002f, 4.934512e-002f, 3.395223e-001f, -8.277907e-001f, 0.000000e+000f, -5.062455e-002f, 6.136087e-002f, 0.000000e+000f, -3.745480e-001f,
  1.989912e-002f, -7.169772e-002f, 5.766876e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -5.477070e-002f, 6.638632e-002f, 0.000000e+000f, -3.745480e-001f,
  1.989912e-002f, -7.169772e-002f, 5.766876e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -3.370505e-002f, 4.085312e-002f, 0.000000e+000f, -3.745480e-001f,
  1.989912e-002f, -7.169772e-002f, 5.766876e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -3.129754e-002f, 3.793504e-002f, 0.000000e+000f, -3.745480e-001f,
  1.989912e-002f, -7.169772e-002f, 5.766876e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -2.921104e-002f, 3.540604e-002f, 0.000000e+000f, -3.745480e-001f,
  -1.779262e-002f, 4.560218e-002f, -7.317199e-003f, 7.292816e-002f, -5.100009e-001f, 0.000000e+000f, -3.496955e-002f, 4.187270e-002f, 0.000000e+000f, -4.333942e-001f,
  -1.779262e-002f, 5.784351e-002f, -3.658599e-002f, 3.646408e-001f, -8.540009e-001f, 0.000000e+000f, -2.547521e-002f, 3.197229e-002f, 0.000000e+000f, -4.333942e-001f,
  0.000000e+000f, -1.810012e-001f, 2.181865e-001f, 0.000000e+000f, -3.745480e-001f,
  2.936145e-002f, -1.503156e-001f, 1.385318e-001f, 1.613394e-001f, -5.899269e-001f, 0.000000e+000f, -1.512662e-001f, 1.823426e-001f, 0.000000e+000f, -3.745480e-001f,
  1.963102e-003f, -8.956499e-002f, 1.051129e-001f, 1.878350e-001f, -6.252969e-001f, 0.000000e+000f, -8.907275e-002f, 1.073720e-001f, 0.000000e+000f, -3.745480e-001f,
  -1.639318e-003f, -6.832918e-002f, 8.474895e-002f, 2.212488e-001f, -6.699023e-001f, 0.000000e+000f, -6.475035e-002f, 7.805280e-002f, 0.000000e+000f, -3.745480e-001f,
  8.856604e-003f, -6.406035e-002f, 6.435159e-002f, 2.805725e-001f, -7.490961e-001f, 0.000000e+000f, -5.337685e-002f, 6.434270e-002f, 0.000000e+000f, -3.745480e-001f,
  2.031663e-002f, -6.465715e-002f, 4.841854e-002f, 3.328137e-001f, -8.188351e-001f, 0.000000e+000f, -4.803882e-002f, 5.790802e-002f, 0.000000e+000f, -3.745480e-001f,
  2.101795e-002f, -6.330813e-002f, 4.577330e-002f, 3.389393e-001f, -8.270125e-001f, 0.000000e+000f, -4.645067e-002f, 5.599360e-002f, 0.000000e+000f, -3.745480e-001f,
  2.328516e-002f, -6.617170e-002f, 4.593070e-002f, 3.433942e-001f, -8.329594e-001f, 0.000000e+000f, -4.803882e-002f, 5.790802e-002f, 0.000000e+000f, -3.745480e-001f,
  1.939271e-002f, -6.974442e-002f, 5.589350e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -5.337685e-002f, 6.434270e-002f, 0.000000e+000f, -3.745480e-001f,
  1.939271e-002f, -6.974442e-002f, 5.589350e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -3.163073e-002f, 3.812901e-002f, 0.000000e+000f, -3.745480e-001f,
  1.939271e-002f, -6.974442e-002f, 5.589350e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -2.846765e-002f, 3.431611e-002f, 0.000000e+000f, -3.745480e-001f,
  -1.728781e-002f, 5.620237e-002f, -3.554797e-002f, 3.646408e-001f, -8.540009e-001f, 0.000000e+000f, -3.390987e-002f, 4.060383e-002f, 0.000000e+000f, -4.333942e-001f,
  -1.275842e-001f, 1.512305e-001f, 0.000000e+000f, 0.000000e+000f, -4.333942e-001f,
  -2.405054e-003f, 1.072432e-001f, -1.837469e-002f, 4.312881e-002f, -3.367489e-001f, -7.340435e-002f, 8.986097e-002f, 0.000000e+000f, 0.000000e+000f, -4.333942e-001f,
  2.008377e-003f, 8.544220e-002f, -2.962978e-002f, 1.016019e-001f, -4.673543e-001f, -6.152788e-002f, 7.827600e-002f, 0.000000e+000f, 0.000000e+000f, -4.333942e-001f,
  -1.085049e-002f, 7.100144e-002f, -3.374774e-002f, 1.932668e-001f, -6.325481e-001f, -4.158104e-002f, 5.538732e-002f, 0.000000e+000f, 0.000000e+000f, -4.333942e-001f,
  -2.489051e-002f, 6.633399e-002f, -3.385601e-002f, 3.056695e-001f, -7.882871e-001f, -3.050187e-002f, 4.292744e-002f, 0.000000e+000f, 0.000000e+000f, -4.333942e-001f,
  -2.574971e-002f, 6.866562e-002f, -4.000795e-002f, 3.891194e-001f, -8.824645e-001f, -2.386288e-002f, 3.587766e-002f, 0.000000e+000f, 0.000000e+000f, -4.333942e-001f,
  // Total number of coefficients: 3485
  // Maximum number of elevation coefficients: 5

     
 // Lite coefficients
 // 10 degrees loudspeakers
 // 48000 Hz sample rate
   // Coefficients
  // Generated by HRTFConv V5.90d on Wed Mar 10 11:23:07 1999
  0.000000e+000f, -9.783995e-002f, 1.494352e-001f, 0.000000e+000f, -3.836635e-001f,
  0.000000e+000f, -5.045871e-002f, 7.706777e-002f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, -8.382467e-002f, 1.280290e-001f, 0.000000e+000f, -3.836635e-001f,
  2.213090e-002f, -9.843365e-002f, 9.871549e-002f, 1.731222e-001f, -6.092808e-001f, 0.000000e+000f, -8.967854e-002f, 1.369699e-001f, 0.000000e+000f, -3.836635e-001f,
  1.221906e-002f, -7.500121e-002f, 8.604824e-002f, 1.875857e-001f, -6.281299e-001f, 0.000000e+000f, -6.906716e-002f, 1.054893e-001f, 0.000000e+000f, -3.836635e-001f,
  5.477360e-003f, -5.761463e-002f, 7.521985e-002f, 1.990449e-001f, -6.430639e-001f, 0.000000e+000f, -5.404874e-002f, 8.255097e-002f, 0.000000e+000f, -3.836635e-001f,
  2.168844e-003f, -4.810901e-002f, 6.841954e-002f, 2.077605e-001f, -6.544222e-001f, 0.000000e+000f, -4.570038e-002f, 6.980016e-002f, 0.000000e+000f, -3.836635e-001f,
  2.196841e-004f, -4.100372e-002f, 6.211428e-002f, 2.191239e-001f, -6.692313e-001f, 0.000000e+000f, -3.903661e-002f, 5.962230e-002f, 0.000000e+000f, -3.836635e-001f,
  7.673310e-004f, -3.817392e-002f, 5.651467e-002f, 2.373536e-001f, -6.929887e-001f, 0.000000e+000f, -3.500071e-002f, 5.345809e-002f, 0.000000e+000f, -3.836635e-001f,
  2.522658e-003f, -3.712967e-002f, 5.082494e-002f, 2.600927e-001f, -7.226228e-001f, 0.000000e+000f, -3.200336e-002f, 4.888011e-002f, 0.000000e+000f, -3.836635e-001f,
  4.946599e-003f, -3.687187e-002f, 4.477669e-002f, 2.861172e-001f, -7.565387e-001f, 0.000000e+000f, -2.944005e-002f, 4.496505e-002f, 0.000000e+000f, -3.836635e-001f,
  7.962109e-003f, -3.788610e-002f, 3.929125e-002f, 3.127202e-001f, -7.912084e-001f, 0.000000e+000f, -2.783939e-002f, 4.252031e-002f, 0.000000e+000f, -3.836635e-001f,
  1.103339e-002f, -3.910419e-002f, 3.398709e-002f, 3.389341e-001f, -8.253710e-001f, 0.000000e+000f, -2.650967e-002f, 4.048937e-002f, 0.000000e+000f, -3.836635e-001f,
  1.144967e-002f, -3.864087e-002f, 3.230835e-002f, 3.450127e-001f, -8.332928e-001f, 0.000000e+000f, -2.574923e-002f, 3.932791e-002f, 0.000000e+000f, -3.836635e-001f,
  1.137899e-002f, -3.803786e-002f, 3.155222e-002f, 3.467259e-001f, -8.355255e-001f, 0.000000e+000f, -2.524307e-002f, 3.855483e-002f, 0.000000e+000f, -3.836635e-001f,
  1.177964e-002f, -3.822277e-002f, 3.090001e-002f, 3.500260e-001f, -8.398263e-001f, 0.000000e+000f, -2.510884e-002f, 3.834982e-002f, 0.000000e+000f, -3.836635e-001f,
  1.235699e-002f, -3.884436e-002f, 3.050257e-002f, 3.533547e-001f, -8.441643e-001f, 0.000000e+000f, -2.524307e-002f, 3.855483e-002f, 0.000000e+000f, -3.836635e-001f,
  1.288880e-002f, -3.983515e-002f, 3.077525e-002f, 3.547431e-001f, -8.459737e-001f, 0.000000e+000f, -2.574923e-002f, 3.932791e-002f, 0.000000e+000f, -3.836635e-001f,
  1.291685e-002f, -4.068189e-002f, 3.200308e-002f, 3.516223e-001f, -8.419066e-001f, 0.000000e+000f, -2.650967e-002f, 4.048937e-002f, 0.000000e+000f, -3.836635e-001f,
  1.211436e-002f, -4.142041e-002f, 3.500308e-002f, 3.405168e-001f, -8.274337e-001f, 0.000000e+000f, -2.783939e-002f, 4.252031e-002f, 0.000000e+000f, -3.836635e-001f,
  1.114652e-002f, -4.164644e-002f, 3.760607e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -1.891986e-002f, 2.889711e-002f, 0.000000e+000f, -3.836635e-001f,
  1.114652e-002f, -4.164644e-002f, 3.760607e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -1.789320e-002f, 2.732905e-002f, 0.000000e+000f, -3.836635e-001f,
  1.114652e-002f, -4.164644e-002f, 3.760607e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -1.709794e-002f, 2.611443e-002f, 0.000000e+000f, -3.836635e-001f,
  1.114652e-002f, -4.164644e-002f, 3.760607e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -1.637037e-002f, 2.500317e-002f, 0.000000e+000f, -3.836635e-001f,
  1.114652e-002f, -4.164644e-002f, 3.760607e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -1.559610e-002f, 2.382059e-002f, 0.000000e+000f, -3.836635e-001f,
  1.114652e-002f, -4.164644e-002f, 3.760607e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -1.498846e-002f, 2.289252e-002f, 0.000000e+000f, -3.836635e-001f,
  -2.526309e-002f, 6.014968e-002f, -9.598361e-003f, 7.391957e-002f, -5.157650e-001f, 0.000000e+000f, -3.522307e-002f, 4.155866e-002f, 0.000000e+000f, -4.384882e-001f,
  -2.526309e-002f, 6.449493e-002f, -1.919672e-002f, 1.478391e-001f, -6.017650e-001f, 0.000000e+000f, -2.634534e-002f, 3.245330e-002f, 0.000000e+000f, -4.384882e-001f,
  -2.526309e-002f, 7.753068e-002f, -4.799180e-002f, 3.695979e-001f, -8.597650e-001f, 0.000000e+000f, -1.948211e-002f, 2.534436e-002f, 0.000000e+000f, -4.384882e-001f,
  0.000000e+000f, -1.267051e-001f, 1.845959e-001f, 0.000000e+000f, -3.836635e-001f,
  0.000000e+000f, -6.534524e-002f, 9.520109e-002f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, -1.085549e-001f, 1.581531e-001f, 0.000000e+000f, -3.836635e-001f,
  3.131732e-002f, -1.313292e-001f, 1.248604e-001f, 1.691005e-001f, -6.040395e-001f, 0.000000e+000f, -1.218327e-001f, 1.774973e-001f, 0.000000e+000f, -3.836635e-001f,
  1.760237e-002f, -1.001880e-001f, 1.086015e-001f, 1.858888e-001f, -6.259185e-001f, 0.000000e+000f, -9.310705e-002f, 1.356471e-001f, 0.000000e+000f, -3.836635e-001f,
  9.038822e-003f, -7.926857e-002f, 9.630065e-002f, 1.957945e-001f, -6.388278e-001f, 0.000000e+000f, -7.462494e-002f, 1.087206e-001f, 0.000000e+000f, -3.836635e-001f,
  4.037117e-003f, -6.563264e-002f, 8.705086e-002f, 2.050773e-001f, -6.509254e-001f, 0.000000e+000f, -6.235300e-002f, 9.084171e-002f, 0.000000e+000f, -3.836635e-001f,
  9.751461e-004f, -5.631357e-002f, 7.997312e-002f, 2.134248e-001f, -6.618041e-001f, 0.000000e+000f, -5.384763e-002f, 7.845029e-002f, 0.000000e+000f, -3.836635e-001f,
  3.219443e-004f, -5.081890e-002f, 7.335442e-002f, 2.271608e-001f, -6.797053e-001f, 0.000000e+000f, -4.774103e-002f, 6.955362e-002f, 0.000000e+000f, -3.836635e-001f,
  2.057610e-003f, -4.845853e-002f, 6.623158e-002f, 2.486982e-001f, -7.077733e-001f, 0.000000e+000f, -4.324522e-002f, 6.300371e-002f, 0.000000e+000f, -3.836635e-001f,
  4.507033e-003f, -4.743539e-002f, 5.954198e-002f, 2.710512e-001f, -7.369043e-001f, 0.000000e+000f, -3.988571e-002f, 5.810926e-002f, 0.000000e+000f, -3.836635e-001f,
  7.559331e-003f, -4.747797e-002f, 5.312540e-002f, 2.943954e-001f, -7.673270e-001f, 0.000000e+000f, -3.736504e-002f, 5.443690e-002f, 0.000000e+000f, -3.836635e-001f,
  1.171280e-002f, -4.885616e-002f, 4.631735e-002f, 3.217754e-001f, -8.030094e-001f, 0.000000e+000f, -3.549098e-002f, 5.170660e-002f, 0.000000e+000f, -3.836635e-001f,
  1.453978e-002f, -4.962169e-002f, 4.143228e-002f, 3.408815e-001f, -8.279089e-001f, 0.000000e+000f, -3.413722e-002f, 4.973432e-002f, 0.000000e+000f, -3.836635e-001f,
  1.478182e-002f, -4.882753e-002f, 3.976154e-002f, 3.451903e-001f, -8.335243e-001f, 0.000000e+000f, -3.322103e-002f, 4.839953e-002f, 0.000000e+000f, -3.836635e-001f,
  1.473606e-002f, -4.822179e-002f, 3.897616e-002f, 3.467259e-001f, -8.355255e-001f, 0.000000e+000f, -3.269038e-002f, 4.762642e-002f, 0.000000e+000f, -3.836635e-001f,
  1.525492e-002f, -4.842471e-002f, 3.817049e-002f, 3.500260e-001f, -8.398263e-001f, 0.000000e+000f, -3.251655e-002f, 4.737317e-002f, 0.000000e+000f, -3.836635e-001f,
  1.600259e-002f, -4.917700e-002f, 3.767954e-002f, 3.533547e-001f, -8.441643e-001f, 0.000000e+000f, -3.269038e-002f, 4.762642e-002f, 0.000000e+000f, -3.836635e-001f,
  1.662459e-002f, -5.022513e-002f, 3.788633e-002f, 3.548159e-001f, -8.460685e-001f, 0.000000e+000f, -3.322103e-002f, 4.839953e-002f, 0.000000e+000f, -3.836635e-001f,
  1.677230e-002f, -5.133110e-002f, 3.918409e-002f, 3.525032e-001f, -8.430547e-001f, 0.000000e+000f, -3.413722e-002f, 4.973432e-002f, 0.000000e+000f, -3.836635e-001f,
  1.612637e-002f, -5.228258e-002f, 4.194131e-002f, 3.446370e-001f, -8.328032e-001f, 0.000000e+000f, -3.549098e-002f, 5.170660e-002f, 0.000000e+000f, -3.836635e-001f,
  1.443501e-002f, -5.291621e-002f, 4.645442e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -3.736504e-002f, 5.443690e-002f, 0.000000e+000f, -3.836635e-001f,
  1.443501e-002f, -5.291621e-002f, 4.645442e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -2.372383e-002f, 3.456311e-002f, 0.000000e+000f, -3.836635e-001f,
  1.443501e-002f, -5.291621e-002f, 4.645442e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -2.264548e-002f, 3.299206e-002f, 0.000000e+000f, -3.836635e-001f,
  1.443501e-002f, -5.291621e-002f, 4.645442e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -2.166089e-002f, 3.155762e-002f, 0.000000e+000f, -3.836635e-001f,
  1.443501e-002f, -5.291621e-002f, 4.645442e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -2.075835e-002f, 3.024272e-002f, 0.000000e+000f, -3.836635e-001f,
  1.443501e-002f, -5.291621e-002f, 4.645442e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -1.992802e-002f, 2.903301e-002f, 0.000000e+000f, -3.836635e-001f,
  1.443501e-002f, -5.291621e-002f, 4.645442e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -1.916156e-002f, 2.791636e-002f, 0.000000e+000f, -3.836635e-001f,
  -2.834565e-002f, 6.748905e-002f, -1.076954e-002f, 7.391957e-002f, -5.157650e-001f, 0.000000e+000f, -3.500564e-002f, 4.130213e-002f, 0.000000e+000f, -4.384882e-001f,
  -2.834565e-002f, 7.236450e-002f, -2.153908e-002f, 1.478391e-001f, -6.017650e-001f, 0.000000e+000f, -2.618852e-002f, 3.226013e-002f, 0.000000e+000f, -4.384882e-001f,
  -2.834565e-002f, 8.699086e-002f, -5.384769e-002f, 3.695979e-001f, -8.597650e-001f, 0.000000e+000f, -1.948211e-002f, 2.534436e-002f, 0.000000e+000f, -4.384882e-001f,
  0.000000e+000f, -1.634751e-001f, 2.284296e-001f, 0.000000e+000f, -3.836635e-001f,
  0.000000e+000f, -7.333143e-002f, 1.024687e-001f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, -1.461048e-001f, 2.041575e-001f, 0.000000e+000f, -3.836635e-001f,
  0.000000e+000f, -1.155943e-001f, 1.615241e-001f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, -1.155943e-001f, 1.615241e-001f, 0.000000e+000f, -3.836635e-001f,
  3.070941e-002f, -1.458802e-001f, 1.438821e-001f, 1.794433e-001f, -6.175186e-001f, 0.000000e+000f, -1.366192e-001f, 1.909030e-001f, 0.000000e+000f, -3.836635e-001f,
  1.831331e-002f, -1.177807e-001f, 1.288215e-001f, 1.892116e-001f, -6.302488e-001f, 0.000000e+000f, -1.110095e-001f, 1.551176e-001f, 0.000000e+000f, -3.836635e-001f,
  1.035179e-002f, -9.821420e-002f, 1.170259e-001f, 1.974310e-001f, -6.409606e-001f, 0.000000e+000f, -9.319433e-002f, 1.302238e-001f, 0.000000e+000f, -3.836635e-001f,
  5.208694e-003f, -8.436911e-002f, 1.077218e-001f, 2.050773e-001f, -6.509254e-001f, 0.000000e+000f, -8.044793e-002f, 1.124128e-001f, 0.000000e+000f, -3.836635e-001f,
  1.735848e-003f, -7.421717e-002f, 1.003170e-001f, 2.118784e-001f, -6.597888e-001f, 0.000000e+000f, -7.105243e-002f, 9.928413e-002f, 0.000000e+000f, -3.836635e-001f,
  2.743377e-004f, -6.735836e-002f, 9.358661e-002f, 2.215105e-001f, -6.723415e-001f, 0.000000e+000f, -6.395134e-002f, 8.936152e-002f, 0.000000e+000f, -3.836635e-001f,
  1.282089e-003f, -6.361590e-002f, 8.638945e-002f, 2.373536e-001f, -6.929887e-001f, 0.000000e+000f, -5.848064e-002f, 8.171711e-002f, 0.000000e+000f, -3.836635e-001f,
  3.692810e-003f, -6.175513e-002f, 7.908229e-002f, 2.563561e-001f, -7.177532e-001f, 0.000000e+000f, -5.420986e-002f, 7.574939e-002f, 0.000000e+000f, -3.836635e-001f,
  6.380134e-003f, -6.070979e-002f, 7.237446e-002f, 2.747107e-001f, -7.416735e-001f, 0.000000e+000f, -5.085144e-002f, 7.105656e-002f, 0.000000e+000f, -3.836635e-001f,
  9.753059e-003f, -6.067528e-002f, 6.574044e-002f, 2.943954e-001f, -7.673270e-001f, 0.000000e+000f, -4.820842e-002f, 6.736337e-002f, 0.000000e+000f, -3.836635e-001f,
  1.422087e-002f, -6.185544e-002f, 5.866589e-002f, 3.173201e-001f, -7.972031e-001f, 0.000000e+000f, -4.614329e-002f, 6.447769e-002f, 0.000000e+000f, -3.836635e-001f,
  1.799053e-002f, -6.290580e-002f, 5.277316e-002f, 3.364639e-001f, -8.221517e-001f, 0.000000e+000f, -4.455904e-002f, 6.226395e-002f, 0.000000e+000f, -3.836635e-001f,
  1.916614e-002f, -6.249104e-002f, 4.989817e-002f, 3.442151e-001f, -8.322533e-001f, 0.000000e+000f, -4.338727e-002f, 6.062660e-002f, 0.000000e+000f, -3.836635e-001f,
  1.895647e-002f, -6.147914e-002f, 4.889360e-002f, 3.454522e-001f, -8.338655e-001f, 0.000000e+000f, -4.258072e-002f, 5.949958e-002f, 0.000000e+000f, -3.836635e-001f,
  1.908417e-002f, -6.105907e-002f, 4.805729e-002f, 3.471953e-001f, -8.361372e-001f, 0.000000e+000f, -4.210844e-002f, 5.883964e-002f, 0.000000e+000f, -3.836635e-001f,
  1.968191e-002f, -6.130541e-002f, 4.723438e-002f, 3.500260e-001f, -8.398263e-001f, 0.000000e+000f, -4.195290e-002f, 5.862230e-002f, 0.000000e+000f, -3.836635e-001f,
  2.048470e-002f, -6.203133e-002f, 4.668126e-002f, 3.528778e-001f, -8.435428e-001f, 0.000000e+000f, -4.210844e-002f, 5.883964e-002f, 0.000000e+000f, -3.836635e-001f,
  2.122773e-002f, -6.306250e-002f, 4.667134e-002f, 3.546549e-001f, -8.458587e-001f, 0.000000e+000f, -4.258072e-002f, 5.949958e-002f, 0.000000e+000f, -3.836635e-001f,
  2.164799e-002f, -6.423353e-002f, 4.748709e-002f, 3.542477e-001f, -8.453281e-001f, 0.000000e+000f, -4.338727e-002f, 6.062660e-002f, 0.000000e+000f, -3.836635e-001f,
  2.149400e-002f, -6.539073e-002f, 4.940475e-002f, 3.505787e-001f, -8.405466e-001f, 0.000000e+000f, -4.455904e-002f, 6.226395e-002f, 0.000000e+000f, -3.836635e-001f,
  2.054320e-002f, -6.640068e-002f, 5.267248e-002f, 3.426775e-001f, -8.302495e-001f, 0.000000e+000f, -4.614329e-002f, 6.447769e-002f, 0.000000e+000f, -3.836635e-001f,
  1.862406e-002f, -6.716335e-002f, 5.748539e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -4.820842e-002f, 6.736337e-002f, 0.000000e+000f, -3.836635e-001f,
  1.862406e-002f, -6.716335e-002f, 5.748539e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -3.085339e-002f, 4.311256e-002f, 0.000000e+000f, -3.836635e-001f,
  1.862406e-002f, -6.716335e-002f, 5.748539e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -2.966672e-002f, 4.145438e-002f, 0.000000e+000f, -3.836635e-001f,
  1.862406e-002f, -6.716335e-002f, 5.748539e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -2.856796e-002f, 3.991904e-002f, 0.000000e+000f, -3.836635e-001f,
  1.862406e-002f, -6.716335e-002f, 5.748539e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -2.754767e-002f, 3.849336e-002f, 0.000000e+000f, -3.836635e-001f,
  1.862406e-002f, -6.716335e-002f, 5.748539e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -2.659775e-002f, 3.716600e-002f, 0.000000e+000f, -3.836635e-001f,
  1.862406e-002f, -6.716335e-002f, 5.748539e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -2.571116e-002f, 3.592713e-002f, 0.000000e+000f, -3.836635e-001f,
  1.862406e-002f, -6.716335e-002f, 5.748539e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -2.488177e-002f, 3.476819e-002f, 0.000000e+000f, -3.836635e-001f,
  -3.180435e-002f, 7.572395e-002f, -1.208362e-002f, 7.391957e-002f, -5.157650e-001f, 0.000000e+000f, -3.544321e-002f, 4.181840e-002f, 0.000000e+000f, -4.384882e-001f,
  -3.180435e-002f, 8.119430e-002f, -2.416724e-002f, 1.478391e-001f, -6.017650e-001f, 0.000000e+000f, -2.666467e-002f, 3.284668e-002f, 0.000000e+000f, -4.384882e-001f,
  -3.180435e-002f, 8.666465e-002f, -3.625086e-002f, 2.217587e-001f, -6.877650e-001f, 0.000000e+000f, -1.994051e-002f, 2.594069e-002f, 0.000000e+000f, -4.384882e-001f,
  -3.180435e-002f, 9.760535e-002f, -6.041810e-002f, 3.695979e-001f, -8.597650e-001f, 0.000000e+000f, -1.478736e-002f, 2.061610e-002f, 0.000000e+000f, -4.384882e-001f,
  0.000000e+000f, -2.102493e-001f, 2.831295e-001f, 0.000000e+000f, -3.836635e-001f,
  0.000000e+000f, -9.431334e-002f, 1.270058e-001f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, -1.879089e-001f, 2.530451e-001f, 0.000000e+000f, -3.836635e-001f,
  0.000000e+000f, -1.486687e-001f, 2.002028e-001f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, -1.486687e-001f, 2.002028e-001f, 0.000000e+000f, -3.836635e-001f,
  3.949612e-002f, -1.856177e-001f, 1.783362e-001f, 1.794433e-001f, -6.175186e-001f, 0.000000e+000f, -1.757093e-001f, 2.366167e-001f, 0.000000e+000f, -3.836635e-001f,
  2.355320e-002f, -1.502865e-001f, 1.596692e-001f, 1.892116e-001f, -6.302488e-001f, 0.000000e+000f, -1.427721e-001f, 1.922622e-001f, 0.000000e+000f, -3.836635e-001f,
  1.331369e-002f, -1.256407e-001f, 1.450490e-001f, 1.974310e-001f, -6.409606e-001f, 0.000000e+000f, -1.198595e-001f, 1.614073e-001f, 0.000000e+000f, -3.836635e-001f,
  6.699029e-003f, -1.081695e-001f, 1.335169e-001f, 2.050773e-001f, -6.509254e-001f, 0.000000e+000f, -1.034660e-001f, 1.393312e-001f, 0.000000e+000f, -3.836635e-001f,
  2.232517e-003f, -9.533933e-002f, 1.243390e-001f, 2.118784e-001f, -6.597888e-001f, 0.000000e+000f, -9.138227e-002f, 1.230588e-001f, 0.000000e+000f, -3.836635e-001f,
  3.528325e-004f, -8.661335e-002f, 1.159969e-001f, 2.215105e-001f, -6.723415e-001f, 0.000000e+000f, -8.224938e-002f, 1.107601e-001f, 0.000000e+000f, -3.836635e-001f,
  1.648926e-003f, -8.173436e-002f, 1.070763e-001f, 2.373536e-001f, -6.929887e-001f, 0.000000e+000f, -7.521338e-002f, 1.012851e-001f, 0.000000e+000f, -3.836635e-001f,
  4.749414e-003f, -7.918400e-002f, 9.801937e-002f, 2.563561e-001f, -7.177532e-001f, 0.000000e+000f, -6.972062e-002f, 9.388838e-002f, 0.000000e+000f, -3.836635e-001f,
  8.205646e-003f, -7.766432e-002f, 8.970528e-002f, 2.747107e-001f, -7.416735e-001f, 0.000000e+000f, -6.540129e-002f, 8.807180e-002f, 0.000000e+000f, -3.836635e-001f,
  1.254365e-002f, -7.740001e-002f, 8.148267e-002f, 2.943954e-001f, -7.673270e-001f, 0.000000e+000f, -6.200203e-002f, 8.349424e-002f, 0.000000e+000f, -3.836635e-001f,
  1.828981e-002f, -7.862651e-002f, 7.271406e-002f, 3.173201e-001f, -7.972031e-001f, 0.000000e+000f, -5.934602e-002f, 7.991755e-002f, 0.000000e+000f, -3.836635e-001f,
  2.313806e-002f, -7.973161e-002f, 6.541025e-002f, 3.364639e-001f, -8.221517e-001f, 0.000000e+000f, -5.730847e-002f, 7.717371e-002f, 0.000000e+000f, -3.836635e-001f,
  2.465004e-002f, -7.912152e-002f, 6.184680e-002f, 3.442151e-001f, -8.322533e-001f, 0.000000e+000f, -5.580143e-002f, 7.514428e-002f, 0.000000e+000f, -3.836635e-001f,
  2.438038e-002f, -7.783377e-002f, 6.060168e-002f, 3.454522e-001f, -8.338655e-001f, 0.000000e+000f, -5.476411e-002f, 7.374738e-002f, 0.000000e+000f, -3.836635e-001f,
  2.454461e-002f, -7.728517e-002f, 5.956511e-002f, 3.471953e-001f, -8.361372e-001f, 0.000000e+000f, -5.415669e-002f, 7.292941e-002f, 0.000000e+000f, -3.836635e-001f,
  2.531339e-002f, -7.756302e-002f, 5.854514e-002f, 3.500260e-001f, -8.398263e-001f, 0.000000e+000f, -5.395665e-002f, 7.266003e-002f, 0.000000e+000f, -3.836635e-001f,
  2.634587e-002f, -7.844430e-002f, 5.785958e-002f, 3.528778e-001f, -8.435428e-001f, 0.000000e+000f, -5.415669e-002f, 7.292941e-002f, 0.000000e+000f, -3.836635e-001f,
  2.730151e-002f, -7.972207e-002f, 5.784728e-002f, 3.546549e-001f, -8.458587e-001f, 0.000000e+000f, -5.476411e-002f, 7.374738e-002f, 0.000000e+000f, -3.836635e-001f,
  2.784201e-002f, -8.120076e-002f, 5.885837e-002f, 3.542477e-001f, -8.453281e-001f, 0.000000e+000f, -5.580143e-002f, 7.514428e-002f, 0.000000e+000f, -3.836635e-001f,
  2.764396e-002f, -8.269909e-002f, 6.123524e-002f, 3.505787e-001f, -8.405466e-001f, 0.000000e+000f, -5.730847e-002f, 7.717371e-002f, 0.000000e+000f, -3.836635e-001f,
  2.642111e-002f, -8.406002e-002f, 6.528546e-002f, 3.426775e-001f, -8.302495e-001f, 0.000000e+000f, -5.934602e-002f, 7.991755e-002f, 0.000000e+000f, -3.836635e-001f,
  2.395287e-002f, -8.516604e-002f, 7.125087e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -6.200203e-002f, 8.349424e-002f, 0.000000e+000f, -3.836635e-001f,
  2.395287e-002f, -8.516604e-002f, 7.125087e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -3.968130e-002f, 5.343631e-002f, 0.000000e+000f, -3.836635e-001f,
  2.395287e-002f, -8.516604e-002f, 7.125087e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -3.815510e-002f, 5.138107e-002f, 0.000000e+000f, -3.836635e-001f,
  2.395287e-002f, -8.516604e-002f, 7.125087e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -3.674195e-002f, 4.947807e-002f, 0.000000e+000f, -3.836635e-001f,
  2.395287e-002f, -8.516604e-002f, 7.125087e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -3.542973e-002f, 4.771099e-002f, 0.000000e+000f, -3.836635e-001f,
  2.395287e-002f, -8.516604e-002f, 7.125087e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -3.420802e-002f, 4.606579e-002f, 0.000000e+000f, -3.836635e-001f,
  2.395287e-002f, -8.516604e-002f, 7.125087e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -3.306775e-002f, 4.453026e-002f, 0.000000e+000f, -3.836635e-001f,
  2.395287e-002f, -8.516604e-002f, 7.125087e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -3.200105e-002f, 4.309380e-002f, 0.000000e+000f, -3.836635e-001f,
  -3.568506e-002f, 8.496367e-002f, -1.355805e-002f, 7.391957e-002f, -5.157650e-001f, 0.000000e+000f, -3.544321e-002f, 4.181840e-002f, 0.000000e+000f, -4.384882e-001f,
  -3.568506e-002f, 9.110151e-002f, -2.711609e-002f, 1.478391e-001f, -6.017650e-001f, 0.000000e+000f, -2.666467e-002f, 3.284668e-002f, 0.000000e+000f, -4.384882e-001f,
  -3.568506e-002f, 9.723934e-002f, -4.067414e-002f, 2.217587e-001f, -6.877650e-001f, 0.000000e+000f, -1.994051e-002f, 2.594069e-002f, 0.000000e+000f, -4.384882e-001f,
  -3.568506e-002f, 1.095150e-001f, -6.779023e-002f, 3.695979e-001f, -8.597650e-001f, 0.000000e+000f, -1.478736e-002f, 2.061610e-002f, 0.000000e+000f, -4.384882e-001f,
  0.000000e+000f, 0.000000e+000f, 3.514500e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 0.000000e+000f, 1.576530e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 3.141061e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 0.000000e+000f, 2.485127e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 2.485127e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -6.602121e-002f, 2.213696e-001f, 0.000000e+000f, -2.338551e-001f, 0.000000e+000f, 0.000000e+000f, 2.937134e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -3.937122e-002f, 1.981982e-001f, 0.000000e+000f, -2.465854e-001f, 0.000000e+000f, 0.000000e+000f, 2.386559e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.225499e-002f, 1.800500e-001f, 0.000000e+000f, -2.572971e-001f, 0.000000e+000f, 0.000000e+000f, 2.003556e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.119801e-002f, 1.657351e-001f, 0.000000e+000f, -2.672619e-001f, 0.000000e+000f, 0.000000e+000f, 1.729525e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -3.731847e-003f, 1.543425e-001f, 0.000000e+000f, -2.761253e-001f, 0.000000e+000f, 0.000000e+000f, 1.527534e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -5.897902e-004f, 1.439875e-001f, 0.000000e+000f, -2.886780e-001f, 0.000000e+000f, 0.000000e+000f, 1.374870e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.756323e-003f, 1.329143e-001f, 0.000000e+000f, -3.093252e-001f, 0.000000e+000f, 0.000000e+000f, 1.257257e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -7.939059e-003f, 1.216719e-001f, 0.000000e+000f, -3.340897e-001f, 0.000000e+000f, 0.000000e+000f, 1.165441e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.371645e-002f, 1.113516e-001f, 0.000000e+000f, -3.580100e-001f, 0.000000e+000f, 0.000000e+000f, 1.093239e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.096780e-002f, 1.011448e-001f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, 0.000000e+000f, 1.036418e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -3.057302e-002f, 9.026031e-002f, 0.000000e+000f, -4.135396e-001f, 0.000000e+000f, 0.000000e+000f, 9.920204e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -3.867728e-002f, 8.119406e-002f, 0.000000e+000f, -4.384882e-001f, 0.000000e+000f, 0.000000e+000f, 9.579610e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -4.120470e-002f, 7.677074e-002f, 0.000000e+000f, -4.485899e-001f, 0.000000e+000f, 0.000000e+000f, 9.327696e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -4.075394e-002f, 7.522516e-002f, 0.000000e+000f, -4.502020e-001f, 0.000000e+000f, 0.000000e+000f, 9.154298e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -4.102846e-002f, 7.393846e-002f, 0.000000e+000f, -4.524737e-001f, 0.000000e+000f, 0.000000e+000f, 9.052763e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -4.231354e-002f, 7.267237e-002f, 0.000000e+000f, -4.561628e-001f, 0.000000e+000f, 0.000000e+000f, 9.019325e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -4.403942e-002f, 7.182137e-002f, 0.000000e+000f, -4.598793e-001f, 0.000000e+000f, 0.000000e+000f, 9.052763e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -4.563685e-002f, 7.180611e-002f, 0.000000e+000f, -4.621952e-001f, 0.000000e+000f, 0.000000e+000f, 9.154298e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -4.654035e-002f, 7.306118e-002f, 0.000000e+000f, -4.616646e-001f, 0.000000e+000f, 0.000000e+000f, 9.327696e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -4.620929e-002f, 7.601160e-002f, 0.000000e+000f, -4.568831e-001f, 0.000000e+000f, 0.000000e+000f, 9.579610e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -4.416519e-002f, 8.103916e-002f, 0.000000e+000f, -4.465860e-001f, 0.000000e+000f, 0.000000e+000f, 9.920204e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -4.003930e-002f, 8.844405e-002f, 0.000000e+000f, -4.297650e-001f, 0.000000e+000f, 0.000000e+000f, 1.036418e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -4.003930e-002f, 8.844405e-002f, 0.000000e+000f, -4.297650e-001f, 0.000000e+000f, 0.000000e+000f, 6.633075e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -4.003930e-002f, 8.844405e-002f, 0.000000e+000f, -4.297650e-001f, 0.000000e+000f, 0.000000e+000f, 6.377957e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -4.003930e-002f, 8.844405e-002f, 0.000000e+000f, -4.297650e-001f, 0.000000e+000f, 0.000000e+000f, 6.141736e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -4.003930e-002f, 8.844405e-002f, 0.000000e+000f, -4.297650e-001f, 0.000000e+000f, 0.000000e+000f, 5.922389e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -4.003930e-002f, 8.844405e-002f, 0.000000e+000f, -4.297650e-001f, 0.000000e+000f, 0.000000e+000f, 5.718168e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -4.003930e-002f, 8.844405e-002f, 0.000000e+000f, -4.297650e-001f, 0.000000e+000f, 0.000000e+000f, 5.527563e-002f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -4.003930e-002f, 8.844405e-002f, 0.000000e+000f, -4.297650e-001f, 0.000000e+000f, 0.000000e+000f, 5.349254e-002f, 0.000000e+000f, 0.000000e+000f,
  -4.003930e-002f, 9.533081e-002f, -1.521238e-002f, 7.391957e-002f, -5.157650e-001f, -3.773223e-002f, 4.410742e-002f, 0.000000e+000f, 0.000000e+000f, -4.384882e-001f,
  -4.003930e-002f, 1.022176e-001f, -3.042475e-002f, 1.478391e-001f, -6.017650e-001f, -3.029542e-002f, 3.647742e-002f, 0.000000e+000f, 0.000000e+000f, -4.384882e-001f,
  -4.003930e-002f, 1.091043e-001f, -4.563713e-002f, 2.217587e-001f, -6.877650e-001f, -2.426487e-002f, 3.026505e-002f, 0.000000e+000f, 0.000000e+000f, -4.384882e-001f,
  -4.003930e-002f, 1.228779e-001f, -7.606188e-002f, 3.695979e-001f, -8.597650e-001f, -1.937079e-002f, 2.519953e-002f, 0.000000e+000f, 0.000000e+000f, -4.384882e-001f,
  0.000000e+000f, -2.443128e-001f, 3.092673e-001f, 0.000000e+000f, -3.836635e-001f,
  0.000000e+000f, -1.095935e-001f, 1.387307e-001f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, -2.183529e-001f, 2.764056e-001f, 0.000000e+000f, -3.836635e-001f,
  0.000000e+000f, -1.727552e-001f, 2.186850e-001f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, -1.727552e-001f, 2.186850e-001f, 0.000000e+000f, -3.836635e-001f,
  4.589508e-002f, -2.119835e-001f, 1.947998e-001f, 1.794433e-001f, -6.175186e-001f, 0.000000e+000f, -2.041768e-001f, 2.584605e-001f, 0.000000e+000f, -3.836635e-001f,
  2.736916e-002f, -1.724244e-001f, 1.744095e-001f, 1.892116e-001f, -6.302488e-001f, 0.000000e+000f, -1.659032e-001f, 2.100113e-001f, 0.000000e+000f, -3.836635e-001f,
  1.547070e-002f, -1.447468e-001f, 1.584395e-001f, 1.974310e-001f, -6.409606e-001f, 0.000000e+000f, -1.392785e-001f, 1.763080e-001f, 0.000000e+000f, -3.836635e-001f,
  7.784371e-003f, -1.250658e-001f, 1.458428e-001f, 2.050773e-001f, -6.509254e-001f, 0.000000e+000f, -1.202291e-001f, 1.521939e-001f, 0.000000e+000f, -3.836635e-001f,
  2.594218e-003f, -1.105762e-001f, 1.358176e-001f, 2.118784e-001f, -6.597888e-001f, 0.000000e+000f, -1.061875e-001f, 1.344192e-001f, 0.000000e+000f, -3.836635e-001f,
  4.099965e-004f, -1.006129e-001f, 1.267055e-001f, 2.215105e-001f, -6.723415e-001f, 0.000000e+000f, -9.557500e-002f, 1.209852e-001f, 0.000000e+000f, -3.836635e-001f,
  1.916076e-003f, -9.482177e-002f, 1.169613e-001f, 2.373536e-001f, -6.929887e-001f, 0.000000e+000f, -8.739906e-002f, 1.106355e-001f, 0.000000e+000f, -3.836635e-001f,
  5.518889e-003f, -9.156721e-002f, 1.070683e-001f, 2.563561e-001f, -7.177532e-001f, 0.000000e+000f, -8.101639e-002f, 1.025559e-001f, 0.000000e+000f, -3.836635e-001f,
  9.535081e-003f, -8.947693e-002f, 9.798665e-002f, 2.747107e-001f, -7.416735e-001f, 0.000000e+000f, -7.599726e-002f, 9.620237e-002f, 0.000000e+000f, -3.836635e-001f,
  1.457590e-002f, -8.876264e-002f, 8.900496e-002f, 2.943954e-001f, -7.673270e-001f, 0.000000e+000f, -7.204728e-002f, 9.120222e-002f, 0.000000e+000f, -3.836635e-001f,
  2.125303e-002f, -8.964854e-002f, 7.942684e-002f, 3.173201e-001f, -7.972031e-001f, 0.000000e+000f, -6.896095e-002f, 8.729534e-002f, 0.000000e+000f, -3.836635e-001f,
  2.688677e-002f, -9.047764e-002f, 7.144877e-002f, 3.364639e-001f, -8.221517e-001f, 0.000000e+000f, -6.659328e-002f, 8.429820e-002f, 0.000000e+000f, -3.836635e-001f,
  2.864372e-002f, -8.962680e-002f, 6.755635e-002f, 3.442151e-001f, -8.322533e-001f, 0.000000e+000f, -6.484209e-002f, 8.208142e-002f, 0.000000e+000f, -3.836635e-001f,
  2.833037e-002f, -8.815572e-002f, 6.619628e-002f, 3.454522e-001f, -8.338655e-001f, 0.000000e+000f, -6.363670e-002f, 8.055556e-002f, 0.000000e+000f, -3.836635e-001f,
  2.852120e-002f, -8.750283e-002f, 6.506402e-002f, 3.471953e-001f, -8.361372e-001f, 0.000000e+000f, -6.293088e-002f, 7.966208e-002f, 0.000000e+000f, -3.836635e-001f,
  2.941453e-002f, -8.775354e-002f, 6.394989e-002f, 3.500260e-001f, -8.398263e-001f, 0.000000e+000f, -6.269843e-002f, 7.936783e-002f, 0.000000e+000f, -3.836635e-001f,
  3.061429e-002f, -8.868070e-002f, 6.320103e-002f, 3.528778e-001f, -8.435428e-001f, 0.000000e+000f, -6.293088e-002f, 7.966208e-002f, 0.000000e+000f, -3.836635e-001f,
  3.172475e-002f, -9.007579e-002f, 6.318760e-002f, 3.546549e-001f, -8.458587e-001f, 0.000000e+000f, -6.363670e-002f, 8.055556e-002f, 0.000000e+000f, -3.836635e-001f,
  3.235283e-002f, -9.174331e-002f, 6.429203e-002f, 3.542477e-001f, -8.453281e-001f, 0.000000e+000f, -6.484209e-002f, 8.208142e-002f, 0.000000e+000f, -3.836635e-001f,
  3.212269e-002f, -9.350299e-002f, 6.688833e-002f, 3.505787e-001f, -8.405466e-001f, 0.000000e+000f, -6.659328e-002f, 8.429820e-002f, 0.000000e+000f, -3.836635e-001f,
  3.070172e-002f, -9.519918e-002f, 7.131246e-002f, 3.426775e-001f, -8.302495e-001f, 0.000000e+000f, -6.896095e-002f, 8.729534e-002f, 0.000000e+000f, -3.836635e-001f,
  2.783358e-002f, -9.671606e-002f, 7.782858e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -7.204728e-002f, 9.120222e-002f, 0.000000e+000f, -3.836635e-001f,
  2.783358e-002f, -9.671606e-002f, 7.782858e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -4.611026e-002f, 5.836942e-002f, 0.000000e+000f, -3.836635e-001f,
  2.783358e-002f, -9.671606e-002f, 7.782858e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -4.433679e-002f, 5.612445e-002f, 0.000000e+000f, -3.836635e-001f,
  2.783358e-002f, -9.671606e-002f, 7.782858e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -4.269468e-002f, 5.404576e-002f, 0.000000e+000f, -3.836635e-001f,
  2.783358e-002f, -9.671606e-002f, 7.782858e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -4.116987e-002f, 5.211556e-002f, 0.000000e+000f, -3.836635e-001f,
  2.783358e-002f, -9.671606e-002f, 7.782858e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -3.975022e-002f, 5.031847e-002f, 0.000000e+000f, -3.836635e-001f,
  2.783358e-002f, -9.671606e-002f, 7.782858e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -3.842521e-002f, 4.864119e-002f, 0.000000e+000f, -3.836635e-001f,
  2.783358e-002f, -9.671606e-002f, 7.782858e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -3.718569e-002f, 4.707212e-002f, 0.000000e+000f, -3.836635e-001f,
  -2.522934e-002f, 6.006932e-002f, -9.585538e-003f, 7.391957e-002f, -5.157650e-001f, 0.000000e+000f, -3.544321e-002f, 4.181840e-002f, 0.000000e+000f, -4.384882e-001f,
  -2.522934e-002f, 6.440876e-002f, -1.917108e-002f, 1.478391e-001f, -6.017650e-001f, 0.000000e+000f, -2.666467e-002f, 3.284668e-002f, 0.000000e+000f, -4.384882e-001f,
  -2.522934e-002f, 6.874821e-002f, -2.875661e-002f, 2.217587e-001f, -6.877650e-001f, 0.000000e+000f, -1.994051e-002f, 2.594069e-002f, 0.000000e+000f, -4.384882e-001f,
  -2.522934e-002f, 7.742710e-002f, -4.792769e-002f, 3.695979e-001f, -8.597650e-001f, 0.000000e+000f, -1.478736e-002f, 2.061610e-002f, 0.000000e+000f, -4.384882e-001f,
  0.000000e+000f, -2.208918e-001f, 2.724870e-001f, 0.000000e+000f, -3.836635e-001f,
  0.000000e+000f, -9.908733e-002f, 1.222319e-001f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, -1.974206e-001f, 2.435334e-001f, 0.000000e+000f, -3.836635e-001f,
  0.000000e+000f, -1.561941e-001f, 1.926774e-001f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, -1.561941e-001f, 1.926774e-001f, 0.000000e+000f, -3.836635e-001f,
  4.149535e-002f, -1.903219e-001f, 1.716327e-001f, 1.794433e-001f, -6.175186e-001f, 0.000000e+000f, -1.846034e-001f, 2.277225e-001f, 0.000000e+000f, -3.836635e-001f,
  2.474542e-002f, -1.550960e-001f, 1.536674e-001f, 1.892116e-001f, -6.302488e-001f, 0.000000e+000f, -1.499990e-001f, 1.850353e-001f, 0.000000e+000f, -3.836635e-001f,
  1.398761e-002f, -1.304190e-001f, 1.395968e-001f, 1.974310e-001f, -6.409606e-001f, 0.000000e+000f, -1.259266e-001f, 1.553402e-001f, 0.000000e+000f, -3.836635e-001f,
  7.038123e-003f, -1.128492e-001f, 1.284981e-001f, 2.050773e-001f, -6.509254e-001f, 0.000000e+000f, -1.087033e-001f, 1.340939e-001f, 0.000000e+000f, -3.836635e-001f,
  2.345524e-003f, -9.990007e-002f, 1.196652e-001f, 2.118784e-001f, -6.597888e-001f, 0.000000e+000f, -9.600789e-002f, 1.184331e-001f, 0.000000e+000f, -3.836635e-001f,
  3.706923e-004f, -9.095567e-002f, 1.116367e-001f, 2.215105e-001f, -6.723415e-001f, 0.000000e+000f, -8.641272e-002f, 1.065967e-001f, 0.000000e+000f, -3.836635e-001f,
  1.732392e-003f, -8.567576e-002f, 1.030514e-001f, 2.373536e-001f, -6.929887e-001f, 0.000000e+000f, -7.902056e-002f, 9.747795e-002f, 0.000000e+000f, -3.836635e-001f,
  4.989821e-003f, -8.262802e-002f, 9.433495e-002f, 2.563561e-001f, -7.177532e-001f, 0.000000e+000f, -7.324977e-002f, 9.035923e-002f, 0.000000e+000f, -3.836635e-001f,
  8.621003e-003f, -8.062087e-002f, 8.633337e-002f, 2.747107e-001f, -7.416735e-001f, 0.000000e+000f, -6.871179e-002f, 8.476129e-002f, 0.000000e+000f, -3.836635e-001f,
  1.317859e-002f, -7.982790e-002f, 7.841984e-002f, 2.943954e-001f, -7.673270e-001f, 0.000000e+000f, -6.514048e-002f, 8.035579e-002f, 0.000000e+000f, -3.836635e-001f,
  1.921561e-002f, -8.043394e-002f, 6.998083e-002f, 3.173201e-001f, -7.972031e-001f, 0.000000e+000f, -6.235002e-002f, 7.691355e-002f, 0.000000e+000f, -3.836635e-001f,
  2.430927e-002f, -8.101908e-002f, 6.295156e-002f, 3.364639e-001f, -8.221517e-001f, 0.000000e+000f, -6.020933e-002f, 7.427284e-002f, 0.000000e+000f, -3.836635e-001f,
  2.589779e-002f, -8.019852e-002f, 5.952206e-002f, 3.442151e-001f, -8.322533e-001f, 0.000000e+000f, -5.862601e-002f, 7.231970e-002f, 0.000000e+000f, -3.836635e-001f,
  2.561448e-002f, -7.887761e-002f, 5.832374e-002f, 3.454522e-001f, -8.338655e-001f, 0.000000e+000f, -5.753618e-002f, 7.097531e-002f, 0.000000e+000f, -3.836635e-001f,
  2.578702e-002f, -7.828174e-002f, 5.732613e-002f, 3.471953e-001f, -8.361372e-001f, 0.000000e+000f, -5.689802e-002f, 7.018808e-002f, 0.000000e+000f, -3.836635e-001f,
  2.659471e-002f, -7.848234e-002f, 5.634450e-002f, 3.500260e-001f, -8.398263e-001f, 0.000000e+000f, -5.668785e-002f, 6.992883e-002f, 0.000000e+000f, -3.836635e-001f,
  2.767946e-002f, -7.928559e-002f, 5.568471e-002f, 3.528778e-001f, -8.435428e-001f, 0.000000e+000f, -5.689802e-002f, 7.018808e-002f, 0.000000e+000f, -3.836635e-001f,
  2.868347e-002f, -8.051452e-002f, 5.567287e-002f, 3.546549e-001f, -8.458587e-001f, 0.000000e+000f, -5.753618e-002f, 7.097531e-002f, 0.000000e+000f, -3.836635e-001f,
  2.925133e-002f, -8.200385e-002f, 5.664596e-002f, 3.542477e-001f, -8.453281e-001f, 0.000000e+000f, -5.862601e-002f, 7.231970e-002f, 0.000000e+000f, -3.836635e-001f,
  2.904325e-002f, -8.360155e-002f, 5.893348e-002f, 3.505787e-001f, -8.405466e-001f, 0.000000e+000f, -6.020933e-002f, 7.427284e-002f, 0.000000e+000f, -3.836635e-001f,
  2.775851e-002f, -8.517662e-002f, 6.283146e-002f, 3.426775e-001f, -8.302495e-001f, 0.000000e+000f, -6.235002e-002f, 7.691355e-002f, 0.000000e+000f, -3.836635e-001f,
  2.516532e-002f, -8.663182e-002f, 6.857264e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -6.514048e-002f, 8.035579e-002f, 0.000000e+000f, -3.836635e-001f,
  2.516532e-002f, -8.663182e-002f, 6.857264e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -4.168991e-002f, 5.142771e-002f, 0.000000e+000f, -3.836635e-001f,
  2.516532e-002f, -8.663182e-002f, 6.857264e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -4.008645e-002f, 4.944972e-002f, 0.000000e+000f, -3.836635e-001f,
  2.516532e-002f, -8.663182e-002f, 6.857264e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -3.860176e-002f, 4.761825e-002f, 0.000000e+000f, -3.836635e-001f,
  2.516532e-002f, -8.663182e-002f, 6.857264e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -3.722313e-002f, 4.591760e-002f, 0.000000e+000f, -3.836635e-001f,
  2.516532e-002f, -8.663182e-002f, 6.857264e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -3.593957e-002f, 4.433423e-002f, 0.000000e+000f, -3.836635e-001f,
  2.516532e-002f, -8.663182e-002f, 6.857264e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -3.474159e-002f, 4.285642e-002f, 0.000000e+000f, -3.836635e-001f,
  2.516532e-002f, -8.663182e-002f, 6.857264e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -3.362089e-002f, 4.147396e-002f, 0.000000e+000f, -3.836635e-001f,
  -2.248567e-002f, 5.353684e-002f, -8.543120e-003f, 7.391957e-002f, -5.157650e-001f, 0.000000e+000f, -3.544321e-002f, 4.181840e-002f, 0.000000e+000f, -4.384882e-001f,
  -2.248567e-002f, 5.740437e-002f, -1.708624e-002f, 1.478391e-001f, -6.017650e-001f, 0.000000e+000f, -2.666467e-002f, 3.284668e-002f, 0.000000e+000f, -4.384882e-001f,
  -2.248567e-002f, 6.127191e-002f, -2.562936e-002f, 2.217587e-001f, -6.877650e-001f, 0.000000e+000f, -1.994051e-002f, 2.594069e-002f, 0.000000e+000f, -4.384882e-001f,
  -2.248567e-002f, 6.900698e-002f, -4.271560e-002f, 3.695979e-001f, -8.597650e-001f, 0.000000e+000f, -1.478736e-002f, 2.061610e-002f, 0.000000e+000f, -4.384882e-001f,
  0.000000e+000f, -2.098976e-001f, 2.558819e-001f, 0.000000e+000f, -3.836635e-001f,
  0.000000e+000f, -1.082499e-001f, 1.319652e-001f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, -1.798304e-001f, 2.192276e-001f, 0.000000e+000f, -3.836635e-001f,
  5.187979e-002f, -2.052201e-001f, 1.730782e-001f, 1.691005e-001f, -6.040395e-001f, 0.000000e+000f, -2.018261e-001f, 2.460421e-001f, 0.000000e+000f, -3.836635e-001f,
  2.915981e-002f, -1.590352e-001f, 1.505406e-001f, 1.858888e-001f, -6.259185e-001f, 0.000000e+000f, -1.542397e-001f, 1.880305e-001f, 0.000000e+000f, -3.836635e-001f,
  1.497357e-002f, -1.277541e-001f, 1.334894e-001f, 1.957945e-001f, -6.388278e-001f, 0.000000e+000f, -1.236225e-001f, 1.507057e-001f, 0.000000e+000f, -3.836635e-001f,
  6.687825e-003f, -1.071355e-001f, 1.206676e-001f, 2.050773e-001f, -6.509254e-001f, 0.000000e+000f, -1.032930e-001f, 1.259224e-001f, 0.000000e+000f, -3.836635e-001f,
  1.615412e-003f, -9.290401e-002f, 1.108566e-001f, 2.134248e-001f, -6.618041e-001f, 0.000000e+000f, -8.920314e-002f, 1.087457e-001f, 0.000000e+000f, -3.836635e-001f,
  5.333279e-004f, -8.405896e-002f, 1.016820e-001f, 2.271608e-001f, -6.797053e-001f, 0.000000e+000f, -7.908704e-002f, 9.641340e-002f, 0.000000e+000f, -3.836635e-001f,
  3.408605e-003f, -7.946502e-002f, 9.180847e-002f, 2.486982e-001f, -7.077733e-001f, 0.000000e+000f, -7.163936e-002f, 8.733408e-002f, 0.000000e+000f, -3.836635e-001f,
  7.466280e-003f, -7.680514e-002f, 8.253553e-002f, 2.710512e-001f, -7.369043e-001f, 0.000000e+000f, -6.607404e-002f, 8.054952e-002f, 0.000000e+000f, -3.836635e-001f,
  1.252267e-002f, -7.567320e-002f, 7.364102e-002f, 2.943954e-001f, -7.673270e-001f, 0.000000e+000f, -6.189834e-002f, 7.545900e-002f, 0.000000e+000f, -3.836635e-001f,
  1.940325e-002f, -7.631998e-002f, 6.420390e-002f, 3.217754e-001f, -8.030094e-001f, 0.000000e+000f, -5.879380e-002f, 7.167433e-002f, 0.000000e+000f, -3.836635e-001f,
  2.408637e-002f, -7.647443e-002f, 5.743234e-002f, 3.408815e-001f, -8.279089e-001f, 0.000000e+000f, -5.655119e-002f, 6.894040e-002f, 0.000000e+000f, -3.836635e-001f,
  2.448733e-002f, -7.506349e-002f, 5.511640e-002f, 3.451903e-001f, -8.335243e-001f, 0.000000e+000f, -5.503344e-002f, 6.709015e-002f, 0.000000e+000f, -3.836635e-001f,
  2.441153e-002f, -7.407805e-002f, 5.402772e-002f, 3.467259e-001f, -8.355255e-001f, 0.000000e+000f, -5.415437e-002f, 6.601849e-002f, 0.000000e+000f, -3.836635e-001f,
  2.527105e-002f, -7.420979e-002f, 5.291093e-002f, 3.500260e-001f, -8.398263e-001f, 0.000000e+000f, -5.386641e-002f, 6.566745e-002f, 0.000000e+000f, -3.836635e-001f,
  2.650964e-002f, -7.516147e-002f, 5.223038e-002f, 3.533547e-001f, -8.441643e-001f, 0.000000e+000f, -5.415437e-002f, 6.601849e-002f, 0.000000e+000f, -3.836635e-001f,
  2.754003e-002f, -7.665274e-002f, 5.251704e-002f, 3.548159e-001f, -8.460685e-001f, 0.000000e+000f, -5.503344e-002f, 6.709015e-002f, 0.000000e+000f, -3.836635e-001f,
  2.778473e-002f, -7.842668e-002f, 5.431595e-002f, 3.525032e-001f, -8.430547e-001f, 0.000000e+000f, -5.655119e-002f, 6.894040e-002f, 0.000000e+000f, -3.836635e-001f,
  2.671469e-002f, -8.025736e-002f, 5.813794e-002f, 3.446370e-001f, -8.328032e-001f, 0.000000e+000f, -5.879380e-002f, 7.167433e-002f, 0.000000e+000f, -3.836635e-001f,
  2.391280e-002f, -8.197335e-002f, 6.439390e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -6.189834e-002f, 7.545900e-002f, 0.000000e+000f, -3.836635e-001f,
  2.391280e-002f, -8.197335e-002f, 6.439390e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -3.930053e-002f, 4.791048e-002f, 0.000000e+000f, -3.836635e-001f,
  2.391280e-002f, -8.197335e-002f, 6.439390e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -3.751414e-002f, 4.573273e-002f, 0.000000e+000f, -3.836635e-001f,
  2.391280e-002f, -8.197335e-002f, 6.439390e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -3.588309e-002f, 4.374435e-002f, 0.000000e+000f, -3.836635e-001f,
  2.391280e-002f, -8.197335e-002f, 6.439390e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -3.438796e-002f, 4.192167e-002f, 0.000000e+000f, -3.836635e-001f,
  2.391280e-002f, -8.197335e-002f, 6.439390e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -3.301245e-002f, 4.024480e-002f, 0.000000e+000f, -3.836635e-001f,
  2.391280e-002f, -8.197335e-002f, 6.439390e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -3.174274e-002f, 3.869692e-002f, 0.000000e+000f, -3.836635e-001f,
  -2.122784e-002f, 5.054203e-002f, -8.065225e-003f, 7.391957e-002f, -5.157650e-001f, 0.000000e+000f, -3.500564e-002f, 4.130213e-002f, 0.000000e+000f, -4.384882e-001f,
  -2.122784e-002f, 5.419322e-002f, -1.613045e-002f, 1.478391e-001f, -6.017650e-001f, 0.000000e+000f, -2.618852e-002f, 3.226013e-002f, 0.000000e+000f, -4.384882e-001f,
  -2.122784e-002f, 6.514679e-002f, -4.032613e-002f, 3.695979e-001f, -8.597650e-001f, 0.000000e+000f, -1.948211e-002f, 2.534436e-002f, 0.000000e+000f, -4.384882e-001f,
  0.000000e+000f, -1.993704e-001f, 2.403539e-001f, 0.000000e+000f, -3.836635e-001f,
  0.000000e+000f, -1.028207e-001f, 1.239570e-001f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, -1.708111e-001f, 2.059239e-001f, 0.000000e+000f, -3.836635e-001f,
  4.509657e-002f, -1.860691e-001f, 1.587756e-001f, 1.731222e-001f, -6.092808e-001f, 0.000000e+000f, -1.827397e-001f, 2.203046e-001f, 0.000000e+000f, -3.836635e-001f,
  2.489902e-002f, -1.448195e-001f, 1.384013e-001f, 1.875857e-001f, -6.281299e-001f, 0.000000e+000f, -1.407395e-001f, 1.696706e-001f, 0.000000e+000f, -3.836635e-001f,
  1.116132e-002f, -1.138110e-001f, 1.209848e-001f, 1.990449e-001f, -6.430639e-001f, 0.000000e+000f, -1.101362e-001f, 1.327763e-001f, 0.000000e+000f, -3.836635e-001f,
  4.419496e-003f, -9.661057e-002f, 1.100471e-001f, 2.077605e-001f, -6.544222e-001f, 0.000000e+000f, -9.312455e-002f, 1.122677e-001f, 0.000000e+000f, -3.836635e-001f,
  4.476545e-004f, -8.341003e-002f, 9.990559e-002f, 2.191239e-001f, -6.692313e-001f, 0.000000e+000f, -7.954566e-002f, 9.589745e-002f, 0.000000e+000f, -3.836635e-001f,
  1.563605e-003f, -7.728460e-002f, 9.089908e-002f, 2.373536e-001f, -6.929887e-001f, 0.000000e+000f, -7.132162e-002f, 8.598284e-002f, 0.000000e+000f, -3.836635e-001f,
  5.140469e-003f, -7.400575e-002f, 8.174764e-002f, 2.600927e-001f, -7.226228e-001f, 0.000000e+000f, -6.521387e-002f, 7.861955e-002f, 0.000000e+000f, -3.836635e-001f,
  1.007978e-002f, -7.189107e-002f, 7.201953e-002f, 2.861172e-001f, -7.565387e-001f, 0.000000e+000f, -5.999055e-002f, 7.232250e-002f, 0.000000e+000f, -3.836635e-001f,
  1.622454e-002f, -7.198053e-002f, 6.319666e-002f, 3.127202e-001f, -7.912084e-001f, 0.000000e+000f, -5.672887e-002f, 6.839033e-002f, 0.000000e+000f, -3.836635e-001f,
  2.248294e-002f, -7.244884e-002f, 5.466537e-002f, 3.389341e-001f, -8.253710e-001f, 0.000000e+000f, -5.401927e-002f, 6.512374e-002f, 0.000000e+000f, -3.836635e-001f,
  2.333120e-002f, -7.123177e-002f, 5.196526e-002f, 3.450127e-001f, -8.332928e-001f, 0.000000e+000f, -5.246971e-002f, 6.325564e-002f, 0.000000e+000f, -3.836635e-001f,
  2.318719e-002f, -7.004935e-002f, 5.074908e-002f, 3.467259e-001f, -8.355255e-001f, 0.000000e+000f, -5.143829e-002f, 6.201220e-002f, 0.000000e+000f, -3.836635e-001f,
  2.400360e-002f, -7.016344e-002f, 4.970007e-002f, 3.500260e-001f, -8.398263e-001f, 0.000000e+000f, -5.116478e-002f, 6.168246e-002f, 0.000000e+000f, -3.836635e-001f,
  2.518007e-002f, -7.105150e-002f, 4.906081e-002f, 3.533547e-001f, -8.441643e-001f, 0.000000e+000f, -5.143829e-002f, 6.201220e-002f, 0.000000e+000f, -3.836635e-001f,
  2.626376e-002f, -7.272176e-002f, 4.949939e-002f, 3.547431e-001f, -8.459737e-001f, 0.000000e+000f, -5.246971e-002f, 6.325564e-002f, 0.000000e+000f, -3.836635e-001f,
  2.632091e-002f, -7.442878e-002f, 5.147426e-002f, 3.516223e-001f, -8.419066e-001f, 0.000000e+000f, -5.401927e-002f, 6.512374e-002f, 0.000000e+000f, -3.836635e-001f,
  2.468566e-002f, -7.645986e-002f, 5.629951e-002f, 3.405168e-001f, -8.274337e-001f, 0.000000e+000f, -5.672887e-002f, 6.839033e-002f, 0.000000e+000f, -3.836635e-001f,
  2.271347e-002f, -7.755506e-002f, 6.048620e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -3.855336e-002f, 4.647857e-002f, 0.000000e+000f, -3.836635e-001f,
  2.271347e-002f, -7.755506e-002f, 6.048620e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -3.646131e-002f, 4.395648e-002f, 0.000000e+000f, -3.836635e-001f,
  2.271347e-002f, -7.755506e-002f, 6.048620e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -3.484081e-002f, 4.200286e-002f, 0.000000e+000f, -3.836635e-001f,
  2.271347e-002f, -7.755506e-002f, 6.048620e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -3.335822e-002f, 4.021550e-002f, 0.000000e+000f, -3.836635e-001f,
  2.271347e-002f, -7.755506e-002f, 6.048620e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -3.178047e-002f, 3.831342e-002f, 0.000000e+000f, -3.836635e-001f,
  2.271347e-002f, -7.755506e-002f, 6.048620e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -3.054227e-002f, 3.682069e-002f, 0.000000e+000f, -3.836635e-001f,
  -2.004038e-002f, 4.771476e-002f, -7.614063e-003f, 7.391957e-002f, -5.157650e-001f, 0.000000e+000f, -3.522307e-002f, 4.155866e-002f, 0.000000e+000f, -4.384882e-001f,
  -2.004038e-002f, 5.116170e-002f, -1.522813e-002f, 1.478391e-001f, -6.017650e-001f, 0.000000e+000f, -2.634534e-002f, 3.245330e-002f, 0.000000e+000f, -4.384882e-001f,
  -2.004038e-002f, 6.150254e-002f, -3.807032e-002f, 3.695979e-001f, -8.597650e-001f, 0.000000e+000f, -1.948211e-002f, 2.534436e-002f, 0.000000e+000f, -4.384882e-001f,
  0.000000e+000f, -1.942787e-001f, 2.329697e-001f, 0.000000e+000f, -3.836635e-001f,
  0.000000e+000f, -1.215004e-001f, 1.456974e-001f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, -1.515977e-001f, 1.817887e-001f, 0.000000e+000f, -3.836635e-001f,
  3.310784e-002f, -1.592498e-001f, 1.433568e-001f, 1.819089e-001f, -6.207317e-001f, 0.000000e+000f, -1.553347e-001f, 1.862698e-001f, 0.000000e+000f, -3.836635e-001f,
  1.385936e-002f, -1.179715e-001f, 1.215365e-001f, 1.957945e-001f, -6.388278e-001f, 0.000000e+000f, -1.144235e-001f, 1.372111e-001f, 0.000000e+000f, -3.836635e-001f,
  4.306628e-003f, -9.411565e-002f, 1.066662e-001f, 2.077605e-001f, -6.544222e-001f, 0.000000e+000f, -9.074627e-002f, 1.088186e-001f, 0.000000e+000f, -3.836635e-001f,
  3.260313e-004f, -7.998610e-002f, 9.544666e-002f, 2.215105e-001f, -6.723415e-001f, 0.000000e+000f, -7.600171e-002f, 9.113759e-002f, 0.000000e+000f, -3.836635e-001f,
  3.154963e-003f, -7.348899e-002f, 8.358773e-002f, 2.486982e-001f, -7.077733e-001f, 0.000000e+000f, -6.630852e-002f, 7.951399e-002f, 0.000000e+000f, -3.836635e-001f,
  8.285914e-003f, -7.038242e-002f, 7.248435e-002f, 2.784212e-001f, -7.465091e-001f, 0.000000e+000f, -5.974324e-002f, 7.164122e-002f, 0.000000e+000f, -3.836635e-001f,
  1.581019e-002f, -7.004085e-002f, 6.125511e-002f, 3.127202e-001f, -7.912084e-001f, 0.000000e+000f, -5.528009e-002f, 6.628922e-002f, 0.000000e+000f, -3.836635e-001f,
  2.229406e-002f, -7.033954e-002f, 5.228971e-002f, 3.408815e-001f, -8.279089e-001f, 0.000000e+000f, -5.234309e-002f, 6.276732e-002f, 0.000000e+000f, -3.836635e-001f,
  2.252845e-002f, -6.859889e-002f, 4.986536e-002f, 3.454522e-001f, -8.338655e-001f, 0.000000e+000f, -5.060422e-002f, 6.068214e-002f, 0.000000e+000f, -3.836635e-001f,
  2.305960e-002f, -6.808965e-002f, 4.849093e-002f, 3.488309e-001f, -8.382687e-001f, 0.000000e+000f, -4.988760e-002f, 5.982281e-002f, 0.000000e+000f, -3.836635e-001f,
  2.453700e-002f, -6.907958e-002f, 4.755355e-002f, 3.533547e-001f, -8.441643e-001f, 0.000000e+000f, -5.012463e-002f, 6.010704e-002f, 0.000000e+000f, -3.836635e-001f,
  2.567261e-002f, -7.096656e-002f, 4.818336e-002f, 3.545566e-001f, -8.457306e-001f, 0.000000e+000f, -5.133775e-002f, 6.156176e-002f, 0.000000e+000f, -3.836635e-001f,
  2.521884e-002f, -7.322318e-002f, 5.154189e-002f, 3.479748e-001f, -8.371531e-001f, 0.000000e+000f, -5.364568e-002f, 6.432932e-002f, 0.000000e+000f, -3.836635e-001f,
  2.213340e-002f, -7.543247e-002f, 5.862792e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -5.729235e-002f, 6.870223e-002f, 0.000000e+000f, -3.836635e-001f,
  2.213340e-002f, -7.543247e-002f, 5.862792e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -3.580772e-002f, 4.293889e-002f, 0.000000e+000f, -3.836635e-001f,
  2.213340e-002f, -7.543247e-002f, 5.862792e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -3.370138e-002f, 4.041308e-002f, 0.000000e+000f, -3.836635e-001f,
  2.213340e-002f, -7.543247e-002f, 5.862792e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -3.182908e-002f, 3.816790e-002f, 0.000000e+000f, -3.836635e-001f,
  2.213340e-002f, -7.543247e-002f, 5.862792e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -3.015387e-002f, 3.615907e-002f, 0.000000e+000f, -3.836635e-001f,
  -1.947179e-002f, 4.636099e-002f, -7.398037e-003f, 7.391957e-002f, -5.157650e-001f, 0.000000e+000f, -3.544321e-002f, 4.181840e-002f, 0.000000e+000f, -4.384882e-001f,
  -1.947179e-002f, 5.975758e-002f, -3.699018e-002f, 3.695979e-001f, -8.597650e-001f, 0.000000e+000f, -2.618852e-002f, 3.226013e-002f, 0.000000e+000f, -4.384882e-001f,
  -1.947179e-002f, 5.305929e-002f, -2.219411e-002f, 2.217587e-001f, -6.877650e-001f, 0.000000e+000f, -1.926072e-002f, 2.505635e-002f, 0.000000e+000f, -4.384882e-001f,
  0.000000e+000f, -1.892999e-001f, 2.258266e-001f, 0.000000e+000f, -3.836635e-001f,
  0.000000e+000f, -1.338553e-001f, 1.596835e-001f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, -1.338553e-001f, 1.596835e-001f, 0.000000e+000f, -3.836635e-001f,
  2.120634e-002f, -1.320528e-001f, 1.273536e-001f, 1.892116e-001f, -6.302488e-001f, 0.000000e+000f, -1.285462e-001f, 1.533500e-001f, 0.000000e+000f, -3.836635e-001f,
  6.031534e-003f, -9.646454e-002f, 1.064942e-001f, 2.050773e-001f, -6.509254e-001f, 0.000000e+000f, -9.315663e-002f, 1.111318e-001f, 0.000000e+000f, -3.836635e-001f,
  3.176760e-004f, -7.793433e-002f, 9.252015e-002f, 2.215105e-001f, -6.723415e-001f, 0.000000e+000f, -7.405401e-002f, 8.834320e-002f, 0.000000e+000f, -3.836635e-001f,
  4.276180e-003f, -7.063690e-002f, 7.818111e-002f, 2.563561e-001f, -7.177532e-001f, 0.000000e+000f, -6.277362e-002f, 7.488619e-002f, 0.000000e+000f, -3.836635e-001f,
  1.129379e-002f, -6.795219e-002f, 6.499130e-002f, 2.943954e-001f, -7.673270e-001f, 0.000000e+000f, -5.582412e-002f, 6.659574e-002f, 0.000000e+000f, -3.836635e-001f,
  2.083257e-002f, -6.858554e-002f, 5.217179e-002f, 3.364639e-001f, -8.221517e-001f, 0.000000e+000f, -5.159822e-002f, 6.155443e-002f, 0.000000e+000f, -3.836635e-001f,
  2.195111e-002f, -6.670491e-002f, 4.833643e-002f, 3.454522e-001f, -8.338655e-001f, 0.000000e+000f, -4.930738e-002f, 5.882156e-002f, 0.000000e+000f, -3.836635e-001f,
  2.279115e-002f, -6.633204e-002f, 4.669612e-002f, 3.500260e-001f, -8.398263e-001f, 0.000000e+000f, -4.858038e-002f, 5.795428e-002f, 0.000000e+000f, -3.836635e-001f,
  2.458117e-002f, -6.800087e-002f, 4.613950e-002f, 3.546549e-001f, -8.458587e-001f, 0.000000e+000f, -4.930738e-002f, 5.882156e-002f, 0.000000e+000f, -3.836635e-001f,
  2.488950e-002f, -7.063387e-002f, 4.884176e-002f, 3.505787e-001f, -8.405466e-001f, 0.000000e+000f, -5.159822e-002f, 6.155443e-002f, 0.000000e+000f, -3.836635e-001f,
  2.156619e-002f, -7.336575e-002f, 5.683032e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -5.582412e-002f, 6.659574e-002f, 0.000000e+000f, -3.836635e-001f,
  2.156619e-002f, -7.336575e-002f, 5.683032e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -3.435330e-002f, 4.098199e-002f, 0.000000e+000f, -3.836635e-001f,
  2.156619e-002f, -7.336575e-002f, 5.683032e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -3.189950e-002f, 3.805471e-002f, 0.000000e+000f, -3.836635e-001f,
  2.156619e-002f, -7.336575e-002f, 5.683032e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -2.977286e-002f, 3.551773e-002f, 0.000000e+000f, -3.836635e-001f,
  -1.891934e-002f, 4.504563e-002f, -7.188139e-003f, 7.391957e-002f, -5.157650e-001f, 0.000000e+000f, -3.544321e-002f, 4.181840e-002f, 0.000000e+000f, -4.384882e-001f,
  -1.891934e-002f, 5.806214e-002f, -3.594070e-002f, 3.695979e-001f, -8.597650e-001f, 0.000000e+000f, -2.588042e-002f, 3.188060e-002f, 0.000000e+000f, -4.384882e-001f,
  0.000000e+000f, -1.844326e-001f, 2.189159e-001f, 0.000000e+000f, -3.836635e-001f,
  3.464636e-002f, -1.572937e-001f, 1.378897e-001f, 1.794433e-001f, -6.175186e-001f, 0.000000e+000f, -1.541338e-001f, 1.829522e-001f, 0.000000e+000f, -3.836635e-001f,
  5.876449e-003f, -9.394902e-002f, 1.032354e-001f, 2.050773e-001f, -6.509254e-001f, 0.000000e+000f, -9.076135e-002f, 1.077310e-001f, 0.000000e+000f, -3.836635e-001f,
  1.446452e-003f, -7.146717e-002f, 8.279148e-002f, 2.373536e-001f, -6.929887e-001f, 0.000000e+000f, -6.597786e-002f, 7.831374e-002f, 0.000000e+000f, -3.836635e-001f,
  1.100340e-002f, -6.613911e-002f, 6.300247e-002f, 2.943954e-001f, -7.673270e-001f, 0.000000e+000f, -5.438874e-002f, 6.455781e-002f, 0.000000e+000f, -3.836635e-001f,
  2.162324e-002f, -6.595359e-002f, 4.782000e-002f, 3.442151e-001f, -8.322533e-001f, 0.000000e+000f, -4.894952e-002f, 5.810161e-002f, 0.000000e+000f, -3.836635e-001f,
  2.220513e-002f, -6.449356e-002f, 4.526715e-002f, 3.500260e-001f, -8.398263e-001f, 0.000000e+000f, -4.733126e-002f, 5.618079e-002f, 0.000000e+000f, -3.836635e-001f,
  2.442326e-002f, -6.733045e-002f, 4.550934e-002f, 3.542477e-001f, -8.453281e-001f, 0.000000e+000f, -4.894952e-002f, 5.810161e-002f, 0.000000e+000f, -3.836635e-001f,
  2.101167e-002f, -7.135355e-002f, 5.509123e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -5.438874e-002f, 6.455781e-002f, 0.000000e+000f, -3.836635e-001f,
  2.101167e-002f, -7.135355e-002f, 5.509123e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -3.223037e-002f, 3.825648e-002f, 0.000000e+000f, -3.836635e-001f,
  2.101167e-002f, -7.135355e-002f, 5.509123e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -2.900733e-002f, 3.443083e-002f, 0.000000e+000f, -3.836635e-001f,
  -1.838256e-002f, 5.641480e-002f, -3.492099e-002f, 3.695979e-001f, -8.597650e-001f, 0.000000e+000f, -3.436918e-002f, 4.055118e-002f, 0.000000e+000f, -4.384882e-001f,
  -1.292493e-001f, 1.510870e-001f, 0.000000e+000f, 0.000000e+000f, -4.384882e-001f,
  -7.065467e-003f, 1.057871e-001f, -1.798635e-002f, 4.596905e-002f, -3.532619e-001f, -7.447916e-002f, 8.967718e-002f, 0.000000e+000f, 0.000000e+000f, -4.384882e-001f,
  -1.739122e-003f, 8.446154e-002f, -2.884897e-002f, 1.064079e-001f, -4.813252e-001f, -6.254982e-002f, 7.801705e-002f, 0.000000e+000f, 0.000000e+000f, -4.384882e-001f,
  -1.322979e-002f, 7.064465e-002f, -3.293013e-002f, 1.979704e-001f, -6.416635e-001f, -4.237359e-002f, 5.512397e-002f, 0.000000e+000f, 0.000000e+000f, -4.384882e-001f,
  -2.599841e-002f, 6.632596e-002f, -3.332607e-002f, 3.086298e-001f, -7.925899e-001f, -3.117740e-002f, 4.265266e-002f, 0.000000e+000f, 0.000000e+000f, -4.384882e-001f,
  -2.669804e-002f, 6.881348e-002f, -3.943372e-002f, 3.923000e-001f, -8.861628e-001f, -2.448534e-002f, 3.558123e-002f, 0.000000e+000f, 0.000000e+000f, -4.384882e-001f,
  // Total number of coefficients: 3485
  // Maximum number of elevation coefficients: 5


 // Lite coefficients
 // 20 degrees loudspeakers
 // 8000 Hz sample rate
  // Coefficients
  // Generated by HRTFConv V5.90d on Wed Mar 03 18:17:54 1999
  0.000000e+000f, 4.091760e-002f, 1.808324e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 1.195921e-002f, 5.285288e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 3.913089e-002f, 1.729362e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 2.248465e-002f, 9.936927e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 3.418611e-002f, 1.510831e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 2.821152e-002f, 1.246788e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 2.963714e-002f, 1.309792e-001f, 0.000000e+000f, 0.000000e+000f,
  2.484127e-002f, 1.411286e-001f, 1.385242e-001f, 0.000000e+000f, 3.708151e-001f, 0.000000e+000f, 3.775466e-002f, 1.668540e-001f, 0.000000e+000f, 0.000000e+000f,
  2.576636e-002f, 1.463955e-001f, 1.437327e-001f, 0.000000e+000f, 3.477485e-001f, 0.000000e+000f, 3.328319e-002f, 1.470926e-001f, 0.000000e+000f, 0.000000e+000f,
  2.558795e-002f, 1.459701e-001f, 1.453374e-001f, 0.000000e+000f, 3.132399e-001f, 0.000000e+000f, 2.930793e-002f, 1.295243e-001f, 0.000000e+000f, 0.000000e+000f,
  2.306097e-002f, 1.339580e-001f, 1.416062e-001f, 0.000000e+000f, 2.479673e-001f, 0.000000e+000f, 2.672504e-002f, 1.181094e-001f, 0.000000e+000f, 0.000000e+000f,
  1.874586e-002f, 1.130246e-001f, 1.333723e-001f, 0.000000e+000f, 1.531775e-001f, 0.000000e+000f, 2.472324e-002f, 1.092626e-001f, 0.000000e+000f, 0.000000e+000f,
  1.319216e-002f, 8.572319e-002f, 1.211869e-001f, 0.000000e+000f, 3.512590e-002f, 0.000000e+000f, 2.295660e-002f, 1.014550e-001f, 0.000000e+000f, 0.000000e+000f,
  7.107188e-003f, 5.568118e-002f, 1.072660e-001f, 0.000000e+000f, -8.973915e-002f, 0.000000e+000f, 2.182866e-002f, 9.647020e-002f, 0.000000e+000f, 0.000000e+000f,
  7.522434e-004f, 2.411937e-002f, 9.190150e-002f, 0.000000e+000f, -2.200044e-001f, 0.000000e+000f, 2.087763e-002f, 9.226716e-002f, 0.000000e+000f, 0.000000e+000f,
  -6.364994e-004f, 1.694337e-002f, 8.731170e-002f, 0.000000e+000f, -2.523861e-001f, 0.000000e+000f, 2.032816e-002f, 8.983885e-002f, 0.000000e+000f, 0.000000e+000f,
  -9.165610e-004f, 1.530508e-002f, 8.554136e-002f, 0.000000e+000f, -2.617268e-001f, 0.000000e+000f, 1.996022e-002f, 8.821276e-002f, 0.000000e+000f, 0.000000e+000f,
  -1.811865e-003f, 1.083804e-002f, 8.328610e-002f, 0.000000e+000f, -2.800175e-001f, 0.000000e+000f, 1.986236e-002f, 8.778025e-002f, 0.000000e+000f, 0.000000e+000f,
  -2.849511e-003f, 5.818876e-003f, 8.137088e-002f, 0.000000e+000f, -2.988988e-001f, 0.000000e+000f, 1.996022e-002f, 8.821276e-002f, 0.000000e+000f, 0.000000e+000f,
  -3.480675e-003f, 3.007497e-003f, 8.127367e-002f, 0.000000e+000f, -3.069137e-001f, 0.000000e+000f, 2.032816e-002f, 8.983885e-002f, 0.000000e+000f, 0.000000e+000f,
  -2.863642e-003f, 6.444379e-003f, 8.441124e-002f, 0.000000e+000f, -2.890151e-001f, 0.000000e+000f, 2.087763e-002f, 9.226716e-002f, 0.000000e+000f, 0.000000e+000f,
  -2.096407e-004f, 2.006180e-002f, 9.275626e-002f, 0.000000e+000f, -2.283292e-001f, 0.000000e+000f, 2.182866e-002f, 9.647020e-002f, 0.000000e+000f, 0.000000e+000f,
  2.326831e-003f, 3.284195e-002f, 9.969650e-002f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, 1.478357e-002f, 6.533491e-002f, 0.000000e+000f, 0.000000e+000f,
  2.326831e-003f, 3.284195e-002f, 9.969650e-002f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, 1.398136e-002f, 6.178960e-002f, 0.000000e+000f, 0.000000e+000f,
  2.326831e-003f, 3.284195e-002f, 9.969650e-002f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, 1.335996e-002f, 5.904340e-002f, 0.000000e+000f, 0.000000e+000f,
  2.326831e-003f, 3.284195e-002f, 9.969650e-002f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, 1.279146e-002f, 5.653091e-002f, 0.000000e+000f, 0.000000e+000f,
  2.326831e-003f, 3.284195e-002f, 9.969650e-002f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, 1.218645e-002f, 5.385715e-002f, 0.000000e+000f, 0.000000e+000f,
  2.326831e-003f, 3.284195e-002f, 9.969650e-002f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, 1.171166e-002f, 5.175882e-002f, 0.000000e+000f, 0.000000e+000f,
  1.261009e-002f, 1.206915e-001f, -1.515964e-002f, 2.145833e-002f, -2.350510e-001f, 0.000000e+000f, -2.586225e-002f, 8.222678e-002f, 0.000000e+000f, -2.071068e-001f,
  1.261009e-002f, 1.191279e-001f, -3.031929e-002f, 4.291666e-002f, -2.970510e-001f, 0.000000e+000f, -1.421699e-002f, 6.855645e-002f, 0.000000e+000f, -2.071068e-001f,
  1.261009e-002f, 1.144369e-001f, -7.579822e-002f, 1.072916e-001f, -4.830510e-001f, 0.000000e+000f, -5.475403e-003f, 5.762879e-002f, 0.000000e+000f, -2.071068e-001f,
  0.000000e+000f, 3.633265e-002f, 2.124749e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 1.061915e-002f, 6.210123e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 3.474615e-002f, 2.031970e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 1.887287e-002f, 1.103693e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 3.104635e-002f, 1.815604e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 2.435742e-002f, 1.424433e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 2.695881e-002f, 1.576563e-001f, 0.000000e+000f, 0.000000e+000f,
  2.159685e-002f, 1.535704e-001f, 1.594825e-001f, 0.000000e+000f, 3.786694e-001f, 0.000000e+000f, 3.507503e-002f, 2.051203e-001f, 0.000000e+000f, 0.000000e+000f,
  2.267363e-002f, 1.612120e-001f, 1.673456e-001f, 0.000000e+000f, 3.551642e-001f, 0.000000e+000f, 3.076948e-002f, 1.799412e-001f, 0.000000e+000f, 0.000000e+000f,
  2.301648e-002f, 1.637879e-001f, 1.706836e-001f, 0.000000e+000f, 3.311715e-001f, 0.000000e+000f, 2.740934e-002f, 1.602910e-001f, 0.000000e+000f, 0.000000e+000f,
  2.188384e-002f, 1.569428e-001f, 1.693895e-001f, 0.000000e+000f, 2.858841e-001f, 0.000000e+000f, 2.480424e-002f, 1.450563e-001f, 0.000000e+000f, 0.000000e+000f,
  1.864977e-002f, 1.367633e-001f, 1.619828e-001f, 0.000000e+000f, 2.021436e-001f, 0.000000e+000f, 2.278497e-002f, 1.332475e-001f, 0.000000e+000f, 0.000000e+000f,
  1.461982e-002f, 1.113165e-001f, 1.509915e-001f, 0.000000e+000f, 1.041984e-001f, 0.000000e+000f, 2.122149e-002f, 1.241042e-001f, 0.000000e+000f, 0.000000e+000f,
  1.006612e-002f, 8.236812e-002f, 1.374350e-001f, 0.000000e+000f, -3.338265e-003f, 0.000000e+000f, 2.001871e-002f, 1.170703e-001f, 0.000000e+000f, 0.000000e+000f,
  4.401695e-003f, 4.628260e-002f, 1.201264e-001f, 0.000000e+000f, -1.334733e-001f, 0.000000e+000f, 1.910846e-002f, 1.117471e-001f, 0.000000e+000f, 0.000000e+000f,
  2.436433e-004f, 1.962567e-002f, 1.064393e-001f, 0.000000e+000f, -2.302575e-001f, 0.000000e+000f, 1.844267e-002f, 1.078535e-001f, 0.000000e+000f, 0.000000e+000f,
  -5.750483e-004f, 1.413061e-002f, 1.023029e-001f, 0.000000e+000f, -2.533499e-001f, 0.000000e+000f, 1.798822e-002f, 1.051959e-001f, 0.000000e+000f, 0.000000e+000f,
  -8.138573e-004f, 1.242741e-002f, 1.005096e-001f, 0.000000e+000f, -2.617268e-001f, 0.000000e+000f, 1.772361e-002f, 1.036485e-001f, 0.000000e+000f, 0.000000e+000f,
  -1.608840e-003f, 7.325190e-003f, 9.785973e-002f, 0.000000e+000f, -2.800175e-001f, 0.000000e+000f, 1.763672e-002f, 1.031403e-001f, 0.000000e+000f, 0.000000e+000f,
  -2.530214e-003f, 1.552147e-003f, 9.560938e-002f, 0.000000e+000f, -2.988988e-001f, 0.000000e+000f, 1.772361e-002f, 1.036485e-001f, 0.000000e+000f, 0.000000e+000f,
  -3.073996e-003f, -1.687470e-003f, 9.526108e-002f, 0.000000e+000f, -3.073360e-001f, 0.000000e+000f, 1.798822e-002f, 1.051959e-001f, 0.000000e+000f, 0.000000e+000f,
  -2.720551e-003f, 8.948073e-004f, 9.827467e-002f, 0.000000e+000f, -2.940253e-001f, 0.000000e+000f, 1.844267e-002f, 1.078535e-001f, 0.000000e+000f, 0.000000e+000f,
  -1.064111e-003f, 1.183033e-002f, 1.055765e-001f, 0.000000e+000f, -2.503511e-001f, 0.000000e+000f, 1.910846e-002f, 1.117471e-001f, 0.000000e+000f, 0.000000e+000f,
  2.066102e-003f, 3.211357e-002f, 1.171417e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, 2.001871e-002f, 1.170703e-001f, 0.000000e+000f, 0.000000e+000f,
  2.066102e-003f, 3.211357e-002f, 1.171417e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, 1.271029e-002f, 7.433033e-002f, 0.000000e+000f, 0.000000e+000f,
  2.066102e-003f, 3.211357e-002f, 1.171417e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, 1.213255e-002f, 7.095167e-002f, 0.000000e+000f, 0.000000e+000f,
  2.066102e-003f, 3.211357e-002f, 1.171417e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, 1.160505e-002f, 6.786682e-002f, 0.000000e+000f, 0.000000e+000f,
  2.066102e-003f, 3.211357e-002f, 1.171417e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, 1.112150e-002f, 6.503903e-002f, 0.000000e+000f, 0.000000e+000f,
  2.066102e-003f, 3.211357e-002f, 1.171417e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, 1.067664e-002f, 6.243747e-002f, 0.000000e+000f, 0.000000e+000f,
  2.066102e-003f, 3.211357e-002f, 1.171417e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, 1.026600e-002f, 6.003603e-002f, 0.000000e+000f, 0.000000e+000f,
  1.414875e-002f, 1.354181e-001f, -1.700940e-002f, 2.145833e-002f, -2.350510e-001f, 0.000000e+000f, -2.570260e-002f, 8.171921e-002f, 0.000000e+000f, -2.071068e-001f,
  1.414875e-002f, 1.336637e-001f, -3.401880e-002f, 4.291666e-002f, -2.970510e-001f, 0.000000e+000f, -1.413237e-002f, 6.814838e-002f, 0.000000e+000f, -2.071068e-001f,
  1.414875e-002f, 1.284004e-001f, -8.504700e-002f, 1.072916e-001f, -4.830510e-001f, 0.000000e+000f, -5.475403e-003f, 5.762879e-002f, 0.000000e+000f, -2.071068e-001f,
  0.000000e+000f, 2.870835e-002f, 2.504583e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 7.089093e-003f, 6.184690e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 2.781931e-002f, 2.427021e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 1.299648e-002f, 1.133843e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 2.559806e-002f, 2.233235e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 1.732354e-002f, 1.511346e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 2.289245e-002f, 1.997190e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 2.029987e-002f, 1.771008e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 2.029987e-002f, 1.771008e-001f, 0.000000e+000f, 0.000000e+000f,
  1.725949e-002f, 1.723588e-001f, 1.900399e-001f, 0.000000e+000f, 3.747650e-001f, 0.000000e+000f, 2.709011e-002f, 2.363404e-001f, 0.000000e+000f, 0.000000e+000f,
  1.791563e-002f, 1.789109e-001f, 1.972614e-001f, 0.000000e+000f, 3.551642e-001f, 0.000000e+000f, 2.431259e-002f, 2.121087e-001f, 0.000000e+000f, 0.000000e+000f,
  1.819527e-002f, 1.817629e-001f, 2.008592e-001f, 0.000000e+000f, 3.358211e-001f, 0.000000e+000f, 2.205461e-002f, 1.924096e-001f, 0.000000e+000f, 0.000000e+000f,
  1.778643e-002f, 1.782088e-001f, 2.009701e-001f, 0.000000e+000f, 3.053644e-001f, 0.000000e+000f, 2.022788e-002f, 1.764727e-001f, 0.000000e+000f, 0.000000e+000f,
  1.617989e-002f, 1.636381e-001f, 1.961289e-001f, 0.000000e+000f, 2.479673e-001f, 0.000000e+000f, 1.875065e-002f, 1.635851e-001f, 0.000000e+000f, 0.000000e+000f,
  1.368222e-002f, 1.407855e-001f, 1.868607e-001f, 0.000000e+000f, 1.694993e-001f, 0.000000e+000f, 1.755602e-002f, 1.531628e-001f, 0.000000e+000f, 0.000000e+000f,
  1.100363e-002f, 1.161259e-001f, 1.755986e-001f, 0.000000e+000f, 8.756306e-002f, 0.000000e+000f, 1.659172e-002f, 1.447500e-001f, 0.000000e+000f, 0.000000e+000f,
  7.953773e-003f, 8.795997e-002f, 1.620038e-001f, 0.000000e+000f, -3.338265e-003f, 0.000000e+000f, 1.581784e-002f, 1.379985e-001f, 0.000000e+000f, 0.000000e+000f,
  4.224217e-003f, 5.348057e-002f, 1.450623e-001f, 0.000000e+000f, -1.118356e-001f, 0.000000e+000f, 1.520421e-002f, 1.326450e-001f, 0.000000e+000f, 0.000000e+000f,
  9.568981e-004f, 2.319184e-002f, 1.294994e-001f, 0.000000e+000f, -2.071482e-001f, 0.000000e+000f, 1.472825e-002f, 1.284927e-001f, 0.000000e+000f, 0.000000e+000f,
  -3.505170e-004f, 1.092790e-002f, 1.220161e-001f, 0.000000e+000f, -2.480713e-001f, 0.000000e+000f, 1.437337e-002f, 1.253966e-001f, 0.000000e+000f, 0.000000e+000f,
  -4.583748e-004f, 9.760257e-003f, 1.200387e-001f, 0.000000e+000f, -2.547724e-001f, 0.000000e+000f, 1.412770e-002f, 1.232534e-001f, 0.000000e+000f, 0.000000e+000f,
  -7.252313e-004f, 7.197698e-003f, 1.179934e-001f, 0.000000e+000f, -2.643037e-001f, 0.000000e+000f, 1.398333e-002f, 1.219938e-001f, 0.000000e+000f, 0.000000e+000f,
  -1.271230e-003f, 2.131724e-003f, 1.153538e-001f, 0.000000e+000f, -2.800175e-001f, 0.000000e+000f, 1.393570e-002f, 1.215783e-001f, 0.000000e+000f, 0.000000e+000f,
  -1.887380e-003f, -3.509262e-003f, 1.130371e-001f, 0.000000e+000f, -2.961653e-001f, 0.000000e+000f, 1.398333e-002f, 1.219938e-001f, 0.000000e+000f, 0.000000e+000f,
  -2.344805e-003f, -7.611284e-003f, 1.120657e-001f, 0.000000e+000f, -3.064018e-001f, 0.000000e+000f, 1.412770e-002f, 1.232534e-001f, 0.000000e+000f, 0.000000e+000f,
  -2.401590e-003f, -7.944528e-003f, 1.134805e-001f, 0.000000e+000f, -3.040440e-001f, 0.000000e+000f, 1.437337e-002f, 1.253966e-001f, 0.000000e+000f, 0.000000e+000f,
  -1.838592e-003f, -2.500219e-003f, 1.181268e-001f, 0.000000e+000f, -2.831212e-001f, 0.000000e+000f, 1.472825e-002f, 1.284927e-001f, 0.000000e+000f, 0.000000e+000f,
  -5.103338e-004f, 1.003507e-002f, 1.263909e-001f, 0.000000e+000f, -2.398119e-001f, 0.000000e+000f, 1.520421e-002f, 1.326450e-001f, 0.000000e+000f, 0.000000e+000f,
  1.632536e-003f, 3.007011e-002f, 1.380827e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, 1.581784e-002f, 1.379985e-001f, 0.000000e+000f, 0.000000e+000f,
  1.632536e-003f, 3.007011e-002f, 1.380827e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, 1.012342e-002f, 8.831905e-002f, 0.000000e+000f, 0.000000e+000f,
  1.632536e-003f, 3.007011e-002f, 1.380827e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, 9.734056e-003f, 8.492216e-002f, 0.000000e+000f, 0.000000e+000f,
  1.632536e-003f, 3.007011e-002f, 1.380827e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, 9.373535e-003f, 8.177690e-002f, 0.000000e+000f, 0.000000e+000f,
  1.632536e-003f, 3.007011e-002f, 1.380827e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, 9.038766e-003f, 7.885629e-002f, 0.000000e+000f, 0.000000e+000f,
  1.632536e-003f, 3.007011e-002f, 1.380827e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, 8.727084e-003f, 7.613711e-002f, 0.000000e+000f, 0.000000e+000f,
  1.632536e-003f, 3.007011e-002f, 1.380827e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, 8.436182e-003f, 7.359921e-002f, 0.000000e+000f, 0.000000e+000f,
  1.632536e-003f, 3.007011e-002f, 1.380827e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, 8.164047e-003f, 7.122504e-002f, 0.000000e+000f, 0.000000e+000f,
  1.587516e-002f, 1.519416e-001f, -1.908486e-002f, 2.145833e-002f, -2.350510e-001f, 0.000000e+000f, -2.602389e-002f, 8.274070e-002f, 0.000000e+000f, -2.071068e-001f,
  1.587516e-002f, 1.499731e-001f, -3.816972e-002f, 4.291666e-002f, -2.970510e-001f, 0.000000e+000f, -1.438932e-002f, 6.938744e-002f, 0.000000e+000f, -2.071068e-001f,
  1.587516e-002f, 1.480046e-001f, -5.725458e-002f, 6.437498e-002f, -3.590510e-001f, 0.000000e+000f, -5.604236e-003f, 5.898477e-002f, 0.000000e+000f, -2.071068e-001f,
  1.587516e-002f, 1.440676e-001f, -9.542430e-002f, 1.072916e-001f, -4.830510e-001f, 0.000000e+000f, 1.008179e-003f, 5.084719e-002f, 0.000000e+000f, -2.071068e-001f,
  0.000000e+000f, 1.703174e-002f, 2.961984e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 4.205732e-003f, 7.314172e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 1.650430e-002f, 2.870257e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 7.710393e-003f, 1.340912e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 1.518651e-002f, 2.641080e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 1.027750e-002f, 1.787357e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 1.358135e-002f, 2.361928e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 1.204326e-002f, 2.094439e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 1.204326e-002f, 2.094439e-001f, 0.000000e+000f, 0.000000e+000f,
  1.023950e-002f, 1.909979e-001f, 2.247461e-001f, 0.000000e+000f, 3.747650e-001f, 0.000000e+000f, 1.607169e-002f, 2.795022e-001f, 0.000000e+000f, 0.000000e+000f,
  1.062877e-002f, 1.982588e-001f, 2.332864e-001f, 0.000000e+000f, 3.551642e-001f, 0.000000e+000f, 1.442388e-002f, 2.508452e-001f, 0.000000e+000f, 0.000000e+000f,
  1.079467e-002f, 2.013886e-001f, 2.375412e-001f, 0.000000e+000f, 3.358211e-001f, 0.000000e+000f, 1.308429e-002f, 2.275485e-001f, 0.000000e+000f, 0.000000e+000f,
  1.055212e-002f, 1.971779e-001f, 2.376724e-001f, 0.000000e+000f, 3.053644e-001f, 0.000000e+000f, 1.200055e-002f, 2.087011e-001f, 0.000000e+000f, 0.000000e+000f,
  9.599011e-003f, 1.802733e-001f, 2.319470e-001f, 0.000000e+000f, 2.479673e-001f, 0.000000e+000f, 1.112416e-002f, 1.934599e-001f, 0.000000e+000f, 0.000000e+000f,
  8.117222e-003f, 1.538733e-001f, 2.209863e-001f, 0.000000e+000f, 1.694993e-001f, 0.000000e+000f, 1.041542e-002f, 1.811342e-001f, 0.000000e+000f, 0.000000e+000f,
  6.528102e-003f, 1.254711e-001f, 2.076674e-001f, 0.000000e+000f, 8.756306e-002f, 0.000000e+000f, 9.843335e-003f, 1.711851e-001f, 0.000000e+000f, 0.000000e+000f,
  4.718718e-003f, 9.307969e-002f, 1.915898e-001f, 0.000000e+000f, -3.338265e-003f, 0.000000e+000f, 9.384217e-003f, 1.632006e-001f, 0.000000e+000f, 0.000000e+000f,
  2.506093e-003f, 5.344793e-002f, 1.715544e-001f, 0.000000e+000f, -1.118356e-001f, 0.000000e+000f, 9.020167e-003f, 1.568694e-001f, 0.000000e+000f, 0.000000e+000f,
  5.676969e-004f, 1.867905e-002f, 1.531493e-001f, 0.000000e+000f, -2.071482e-001f, 0.000000e+000f, 8.737798e-003f, 1.519587e-001f, 0.000000e+000f, 0.000000e+000f,
  -2.079505e-004f, 4.680918e-003f, 1.442994e-001f, 0.000000e+000f, -2.480713e-001f, 0.000000e+000f, 8.527257e-003f, 1.482972e-001f, 0.000000e+000f, 0.000000e+000f,
  -2.719390e-004f, 3.433625e-003f, 1.419608e-001f, 0.000000e+000f, -2.547724e-001f, 0.000000e+000f, 8.381512e-003f, 1.457626e-001f, 0.000000e+000f, 0.000000e+000f,
  -4.302564e-004f, 5.412465e-004f, 1.395420e-001f, 0.000000e+000f, -2.643037e-001f, 0.000000e+000f, 8.295862e-003f, 1.442730e-001f, 0.000000e+000f, 0.000000e+000f,
  -7.541797e-004f, -5.271589e-003f, 1.364203e-001f, 0.000000e+000f, -2.800175e-001f, 0.000000e+000f, 8.267606e-003f, 1.437816e-001f, 0.000000e+000f, 0.000000e+000f,
  -1.119722e-003f, -1.178626e-002f, 1.336805e-001f, 0.000000e+000f, -2.961653e-001f, 0.000000e+000f, 8.295862e-003f, 1.442730e-001f, 0.000000e+000f, 0.000000e+000f,
  -1.391097e-003f, -1.657180e-002f, 1.325318e-001f, 0.000000e+000f, -3.064018e-001f, 0.000000e+000f, 8.381512e-003f, 1.457626e-001f, 0.000000e+000f, 0.000000e+000f,
  -1.424786e-003f, -1.706147e-002f, 1.342049e-001f, 0.000000e+000f, -3.040440e-001f, 0.000000e+000f, 8.527257e-003f, 1.482972e-001f, 0.000000e+000f, 0.000000e+000f,
  -1.090777e-003f, -1.093677e-002f, 1.396998e-001f, 0.000000e+000f, -2.831212e-001f, 0.000000e+000f, 8.737798e-003f, 1.519587e-001f, 0.000000e+000f, 0.000000e+000f,
  -3.027646e-004f, 3.329502e-003f, 1.494731e-001f, 0.000000e+000f, -2.398119e-001f, 0.000000e+000f, 9.020167e-003f, 1.568694e-001f, 0.000000e+000f, 0.000000e+000f,
  9.685314e-004f, 2.623363e-002f, 1.633001e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, 9.384217e-003f, 1.632006e-001f, 0.000000e+000f, 0.000000e+000f,
  9.685314e-004f, 2.623363e-002f, 1.633001e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, 6.005899e-003f, 1.044484e-001f, 0.000000e+000f, 0.000000e+000f,
  9.685314e-004f, 2.623363e-002f, 1.633001e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, 5.774903e-003f, 1.004311e-001f, 0.000000e+000f, 0.000000e+000f,
  9.685314e-004f, 2.623363e-002f, 1.633001e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, 5.561017e-003f, 9.671145e-002f, 0.000000e+000f, 0.000000e+000f,
  9.685314e-004f, 2.623363e-002f, 1.633001e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, 5.362410e-003f, 9.325747e-002f, 0.000000e+000f, 0.000000e+000f,
  9.685314e-004f, 2.623363e-002f, 1.633001e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, 5.177499e-003f, 9.004169e-002f, 0.000000e+000f, 0.000000e+000f,
  9.685314e-004f, 2.623363e-002f, 1.633001e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, 5.004916e-003f, 8.704030e-002f, 0.000000e+000f, 0.000000e+000f,
  9.685314e-004f, 2.623363e-002f, 1.633001e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, 4.843467e-003f, 8.423255e-002f, 0.000000e+000f, 0.000000e+000f,
  1.781223e-002f, 1.704813e-001f, -2.141357e-002f, 2.145833e-002f, -2.350510e-001f, 0.000000e+000f, -2.602389e-002f, 8.274070e-002f, 0.000000e+000f, -2.071068e-001f,
  1.781223e-002f, 1.682726e-001f, -4.282713e-002f, 4.291666e-002f, -2.970510e-001f, 0.000000e+000f, -1.438932e-002f, 6.938744e-002f, 0.000000e+000f, -2.071068e-001f,
  1.781223e-002f, 1.660639e-001f, -6.424070e-002f, 6.437498e-002f, -3.590510e-001f, 0.000000e+000f, -5.604236e-003f, 5.898477e-002f, 0.000000e+000f, -2.071068e-001f,
  1.781223e-002f, 1.616465e-001f, -1.070678e-001f, 1.072916e-001f, -4.830510e-001f, 0.000000e+000f, 1.008179e-003f, 5.084719e-002f, 0.000000e+000f, -2.071068e-001f,
  0.000000e+000f, 0.000000e+000f, 3.514500e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 0.000000e+000f, 8.678527e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 3.405663e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 0.000000e+000f, 1.591040e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 3.133736e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 0.000000e+000f, 2.120763e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 2.802512e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 0.000000e+000f, 2.485127e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 2.485127e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 2.112921e-001f, 2.666692e-001f, 0.000000e+000f, 3.747650e-001f, 0.000000e+000f, 0.000000e+000f, 3.316393e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 2.193247e-001f, 2.768027e-001f, 0.000000e+000f, 3.551642e-001f, 0.000000e+000f, 0.000000e+000f, 2.976368e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 2.227480e-001f, 2.818511e-001f, 0.000000e+000f, 3.358211e-001f, 0.000000e+000f, 0.000000e+000f, 2.699944e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 2.177430e-001f, 2.820068e-001f, 0.000000e+000f, 3.053644e-001f, 0.000000e+000f, 0.000000e+000f, 2.476313e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 1.980756e-001f, 2.752134e-001f, 0.000000e+000f, 2.479673e-001f, 0.000000e+000f, 0.000000e+000f, 2.295471e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 1.674989e-001f, 2.622081e-001f, 0.000000e+000f, 1.694993e-001f, 0.000000e+000f, 0.000000e+000f, 2.149222e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 1.347074e-001f, 2.464048e-001f, 0.000000e+000f, 8.756306e-002f, 0.000000e+000f, 0.000000e+000f, 2.031172e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 9.737075e-002f, 2.273282e-001f, 0.000000e+000f, -3.338265e-003f, 0.000000e+000f, 0.000000e+000f, 1.936433e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 5.171322e-002f, 2.035554e-001f, 0.000000e+000f, -1.118356e-001f, 0.000000e+000f, 0.000000e+000f, 1.861312e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 1.171443e-002f, 1.817171e-001f, 0.000000e+000f, -2.071482e-001f, 0.000000e+000f, 0.000000e+000f, 1.803045e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -4.291059e-003f, 1.712164e-001f, 0.000000e+000f, -2.480713e-001f, 0.000000e+000f, 0.000000e+000f, 1.759599e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -5.611462e-003f, 1.684416e-001f, 0.000000e+000f, -2.547724e-001f, 0.000000e+000f, 0.000000e+000f, 1.729525e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -8.878342e-003f, 1.655715e-001f, 0.000000e+000f, -2.643037e-001f, 0.000000e+000f, 0.000000e+000f, 1.711851e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.556250e-002f, 1.618676e-001f, 0.000000e+000f, -2.800175e-001f, 0.000000e+000f, 0.000000e+000f, 1.706020e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.310546e-002f, 1.586167e-001f, 0.000000e+000f, -2.961653e-001f, 0.000000e+000f, 0.000000e+000f, 1.711851e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.870529e-002f, 1.572537e-001f, 0.000000e+000f, -3.064018e-001f, 0.000000e+000f, 0.000000e+000f, 1.729525e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.940046e-002f, 1.592389e-001f, 0.000000e+000f, -3.040440e-001f, 0.000000e+000f, 0.000000e+000f, 1.759599e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.250819e-002f, 1.657588e-001f, 0.000000e+000f, -2.831212e-001f, 0.000000e+000f, 0.000000e+000f, 1.803045e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -6.247548e-003f, 1.773552e-001f, 0.000000e+000f, -2.398119e-001f, 0.000000e+000f, 0.000000e+000f, 1.861312e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 1.998565e-002f, 1.937614e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, 0.000000e+000f, 1.936433e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 1.998565e-002f, 1.937614e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, 0.000000e+000f, 1.239317e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 1.998565e-002f, 1.937614e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, 0.000000e+000f, 1.191651e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 1.998565e-002f, 1.937614e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, 0.000000e+000f, 1.147516e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 1.998565e-002f, 1.937614e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, 0.000000e+000f, 1.106533e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 1.998565e-002f, 1.937614e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, 0.000000e+000f, 1.068377e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 1.998565e-002f, 1.937614e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, 0.000000e+000f, 1.032764e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 1.998565e-002f, 1.937614e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, 0.000000e+000f, 9.994494e-002f, 0.000000e+000f, 0.000000e+000f,
  1.998565e-002f, 1.912832e-001f, -2.402642e-002f, 2.145833e-002f, -2.350510e-001f, -2.924624e-002f, 8.596305e-002f, 0.000000e+000f, 0.000000e+000f, -2.071068e-001f,
  1.998565e-002f, 1.888050e-001f, -4.805283e-002f, 4.291666e-002f, -2.970510e-001f, -1.950047e-002f, 7.449860e-002f, 0.000000e+000f, 0.000000e+000f, -2.071068e-001f,
  1.998565e-002f, 1.863268e-001f, -7.207925e-002f, 6.437498e-002f, -3.590510e-001f, -1.169182e-002f, 6.507235e-002f, 0.000000e+000f, 0.000000e+000f, -2.071068e-001f,
  1.998565e-002f, 1.813703e-001f, -1.201321e-001f, 1.072916e-001f, -4.830510e-001f, -5.444115e-003f, 5.729949e-002f, 0.000000e+000f, 0.000000e+000f, -2.071068e-001f,
  0.000000e+000f, -1.703174e-002f, 2.961984e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -4.205732e-003f, 7.314172e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -1.650430e-002f, 2.870257e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -7.710393e-003f, 1.340912e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -1.518651e-002f, 2.641080e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.027750e-002f, 1.787357e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -1.358135e-002f, 2.361928e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.204326e-002f, 2.094439e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -1.204326e-002f, 2.094439e-001f, 0.000000e+000f, 0.000000e+000f,
  -1.023950e-002f, 1.651516e-001f, 2.247461e-001f, 0.000000e+000f, 3.747650e-001f, 0.000000e+000f, -1.607169e-002f, 2.795022e-001f, 0.000000e+000f, 0.000000e+000f,
  -1.062877e-002f, 1.714303e-001f, 2.332864e-001f, 0.000000e+000f, 3.551642e-001f, 0.000000e+000f, -1.442388e-002f, 2.508452e-001f, 0.000000e+000f, 0.000000e+000f,
  -1.079467e-002f, 1.740708e-001f, 2.375412e-001f, 0.000000e+000f, 3.358211e-001f, 0.000000e+000f, -1.308429e-002f, 2.275485e-001f, 0.000000e+000f, 0.000000e+000f,
  -1.055212e-002f, 1.698451e-001f, 2.376724e-001f, 0.000000e+000f, 3.053644e-001f, 0.000000e+000f, -1.200055e-002f, 2.087011e-001f, 0.000000e+000f, 0.000000e+000f,
  -9.599011e-003f, 1.535988e-001f, 2.319470e-001f, 0.000000e+000f, 2.479673e-001f, 0.000000e+000f, -1.112416e-002f, 1.934599e-001f, 0.000000e+000f, 0.000000e+000f,
  -8.117222e-003f, 1.284594e-001f, 2.209863e-001f, 0.000000e+000f, 1.694993e-001f, 0.000000e+000f, -1.041542e-002f, 1.811342e-001f, 0.000000e+000f, 0.000000e+000f,
  -6.528102e-003f, 1.015889e-001f, 2.076674e-001f, 0.000000e+000f, 8.756306e-002f, 0.000000e+000f, -9.843335e-003f, 1.711851e-001f, 0.000000e+000f, 0.000000e+000f,
  -4.718718e-003f, 7.104642e-002f, 1.915898e-001f, 0.000000e+000f, -3.338265e-003f, 0.000000e+000f, -9.384217e-003f, 1.632006e-001f, 0.000000e+000f, 0.000000e+000f,
  -2.506093e-003f, 3.371879e-002f, 1.715544e-001f, 0.000000e+000f, -1.118356e-001f, 0.000000e+000f, -9.020167e-003f, 1.568694e-001f, 0.000000e+000f, 0.000000e+000f,
  -5.676969e-004f, 1.066541e-003f, 1.531493e-001f, 0.000000e+000f, -2.071482e-001f, 0.000000e+000f, -8.737798e-003f, 1.519587e-001f, 0.000000e+000f, 0.000000e+000f,
  2.079505e-004f, -1.191384e-002f, 1.442994e-001f, 0.000000e+000f, -2.480713e-001f, 0.000000e+000f, -8.527257e-003f, 1.482972e-001f, 0.000000e+000f, 0.000000e+000f,
  2.719390e-004f, -1.289219e-002f, 1.419608e-001f, 0.000000e+000f, -2.547724e-001f, 0.000000e+000f, -8.381512e-003f, 1.457626e-001f, 0.000000e+000f, 0.000000e+000f,
  4.302564e-004f, -1.550639e-002f, 1.395420e-001f, 0.000000e+000f, -2.643037e-001f, 0.000000e+000f, -8.295862e-003f, 1.442730e-001f, 0.000000e+000f, 0.000000e+000f,
  7.541797e-004f, -2.096023e-002f, 1.364203e-001f, 0.000000e+000f, -2.800175e-001f, 0.000000e+000f, -8.267606e-003f, 1.437816e-001f, 0.000000e+000f, 0.000000e+000f,
  1.119722e-003f, -2.715982e-002f, 1.336805e-001f, 0.000000e+000f, -2.961653e-001f, 0.000000e+000f, -8.295862e-003f, 1.442730e-001f, 0.000000e+000f, 0.000000e+000f,
  1.391097e-003f, -3.181325e-002f, 1.325318e-001f, 0.000000e+000f, -3.064018e-001f, 0.000000e+000f, -8.381512e-003f, 1.457626e-001f, 0.000000e+000f, 0.000000e+000f,
  1.424786e-003f, -3.249534e-002f, 1.342049e-001f, 0.000000e+000f, -3.040440e-001f, 0.000000e+000f, -8.527257e-003f, 1.482972e-001f, 0.000000e+000f, 0.000000e+000f,
  1.090777e-003f, -2.700257e-002f, 1.396998e-001f, 0.000000e+000f, -2.831212e-001f, 0.000000e+000f, -8.737798e-003f, 1.519587e-001f, 0.000000e+000f, 0.000000e+000f,
  3.027646e-004f, -1.386024e-002f, 1.494731e-001f, 0.000000e+000f, -2.398119e-001f, 0.000000e+000f, -9.020167e-003f, 1.568694e-001f, 0.000000e+000f, 0.000000e+000f,
  -9.685314e-004f, 7.453754e-003f, 1.633001e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, -9.384217e-003f, 1.632006e-001f, 0.000000e+000f, 0.000000e+000f,
  -9.685314e-004f, 7.453754e-003f, 1.633001e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, -6.005899e-003f, 1.044484e-001f, 0.000000e+000f, 0.000000e+000f,
  -9.685314e-004f, 7.453754e-003f, 1.633001e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, -5.774903e-003f, 1.004311e-001f, 0.000000e+000f, 0.000000e+000f,
  -9.685314e-004f, 7.453754e-003f, 1.633001e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, -5.561017e-003f, 9.671145e-002f, 0.000000e+000f, 0.000000e+000f,
  -9.685314e-004f, 7.453754e-003f, 1.633001e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, -5.362410e-003f, 9.325747e-002f, 0.000000e+000f, 0.000000e+000f,
  -9.685314e-004f, 7.453754e-003f, 1.633001e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, -5.177499e-003f, 9.004169e-002f, 0.000000e+000f, 0.000000e+000f,
  -9.685314e-004f, 7.453754e-003f, 1.633001e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, -5.004916e-003f, 8.704030e-002f, 0.000000e+000f, 0.000000e+000f,
  -9.685314e-004f, 7.453754e-003f, 1.633001e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, -4.843467e-003f, 8.423255e-002f, 0.000000e+000f, 0.000000e+000f,
  1.259324e-002f, 1.205303e-001f, -1.513939e-002f, 2.145833e-002f, -2.350510e-001f, 0.000000e+000f, -2.602389e-002f, 8.274070e-002f, 0.000000e+000f, -2.071068e-001f,
  1.259324e-002f, 1.189687e-001f, -3.027878e-002f, 4.291666e-002f, -2.970510e-001f, 0.000000e+000f, -1.438932e-002f, 6.938744e-002f, 0.000000e+000f, -2.071068e-001f,
  1.259324e-002f, 1.174072e-001f, -4.541817e-002f, 6.437498e-002f, -3.590510e-001f, 0.000000e+000f, -5.604236e-003f, 5.898477e-002f, 0.000000e+000f, -2.071068e-001f,
  1.259324e-002f, 1.142841e-001f, -7.569696e-002f, 1.072916e-001f, -4.830510e-001f, 0.000000e+000f, 1.008179e-003f, 5.084719e-002f, 0.000000e+000f, -2.071068e-001f,
  0.000000e+000f, -2.870835e-002f, 2.504583e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -7.089093e-003f, 6.184690e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -2.781931e-002f, 2.427021e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.299648e-002f, 1.133843e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -2.559806e-002f, 2.233235e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.732354e-002f, 1.511346e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -2.289245e-002f, 1.997190e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.029987e-002f, 1.771008e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -2.029987e-002f, 1.771008e-001f, 0.000000e+000f, 0.000000e+000f,
  -1.725949e-002f, 1.287928e-001f, 1.900399e-001f, 0.000000e+000f, 3.747650e-001f, 0.000000e+000f, -2.709011e-002f, 2.363404e-001f, 0.000000e+000f, 0.000000e+000f,
  -1.791563e-002f, 1.336894e-001f, 1.972614e-001f, 0.000000e+000f, 3.551642e-001f, 0.000000e+000f, -2.431259e-002f, 2.121087e-001f, 0.000000e+000f, 0.000000e+000f,
  -1.819527e-002f, 1.357166e-001f, 2.008592e-001f, 0.000000e+000f, 3.358211e-001f, 0.000000e+000f, -2.205461e-002f, 1.924096e-001f, 0.000000e+000f, 0.000000e+000f,
  -1.778643e-002f, 1.321371e-001f, 2.009701e-001f, 0.000000e+000f, 3.053644e-001f, 0.000000e+000f, -2.022788e-002f, 1.764727e-001f, 0.000000e+000f, 0.000000e+000f,
  -1.617989e-002f, 1.186762e-001f, 1.961289e-001f, 0.000000e+000f, 2.479673e-001f, 0.000000e+000f, -1.875065e-002f, 1.635851e-001f, 0.000000e+000f, 0.000000e+000f,
  -1.368222e-002f, 9.794828e-002f, 1.868607e-001f, 0.000000e+000f, 1.694993e-001f, 0.000000e+000f, -1.755602e-002f, 1.531628e-001f, 0.000000e+000f, 0.000000e+000f,
  -1.100363e-002f, 7.587056e-002f, 1.755986e-001f, 0.000000e+000f, 8.756306e-002f, 0.000000e+000f, -1.659172e-002f, 1.447500e-001f, 0.000000e+000f, 0.000000e+000f,
  -7.953773e-003f, 5.082116e-002f, 1.620038e-001f, 0.000000e+000f, -3.338265e-003f, 0.000000e+000f, -1.581784e-002f, 1.379985e-001f, 0.000000e+000f, 0.000000e+000f,
  -4.224217e-003f, 2.022554e-002f, 1.450623e-001f, 0.000000e+000f, -1.118356e-001f, 0.000000e+000f, -1.520421e-002f, 1.326450e-001f, 0.000000e+000f, 0.000000e+000f,
  -9.568981e-004f, -6.495439e-003f, 1.294994e-001f, 0.000000e+000f, -2.071482e-001f, 0.000000e+000f, -1.472825e-002f, 1.284927e-001f, 0.000000e+000f, 0.000000e+000f,
  3.505170e-004f, -1.704388e-002f, 1.220161e-001f, 0.000000e+000f, -2.480713e-001f, 0.000000e+000f, -1.437337e-002f, 1.253966e-001f, 0.000000e+000f, 0.000000e+000f,
  4.583748e-004f, -1.775819e-002f, 1.200387e-001f, 0.000000e+000f, -2.547724e-001f, 0.000000e+000f, -1.412770e-002f, 1.232534e-001f, 0.000000e+000f, 0.000000e+000f,
  7.252313e-004f, -1.985187e-002f, 1.179934e-001f, 0.000000e+000f, -2.643037e-001f, 0.000000e+000f, -1.398333e-002f, 1.219938e-001f, 0.000000e+000f, 0.000000e+000f,
  1.271230e-003f, -2.431273e-002f, 1.153538e-001f, 0.000000e+000f, -2.800175e-001f, 0.000000e+000f, -1.393570e-002f, 1.215783e-001f, 0.000000e+000f, 0.000000e+000f,
  1.887380e-003f, -2.942262e-002f, 1.130371e-001f, 0.000000e+000f, -2.961653e-001f, 0.000000e+000f, -1.398333e-002f, 1.219938e-001f, 0.000000e+000f, 0.000000e+000f,
  2.344805e-003f, -3.330196e-002f, 1.120657e-001f, 0.000000e+000f, -3.064018e-001f, 0.000000e+000f, -1.412770e-002f, 1.232534e-001f, 0.000000e+000f, 0.000000e+000f,
  2.401590e-003f, -3.395953e-002f, 1.134805e-001f, 0.000000e+000f, -3.040440e-001f, 0.000000e+000f, -1.437337e-002f, 1.253966e-001f, 0.000000e+000f, 0.000000e+000f,
  1.838592e-003f, -2.958038e-002f, 1.181268e-001f, 0.000000e+000f, -2.831212e-001f, 0.000000e+000f, -1.472825e-002f, 1.284927e-001f, 0.000000e+000f, 0.000000e+000f,
  5.103338e-004f, -1.893961e-002f, 1.263909e-001f, 0.000000e+000f, -2.398119e-001f, 0.000000e+000f, -1.520421e-002f, 1.326450e-001f, 0.000000e+000f, 0.000000e+000f,
  -1.632536e-003f, -1.584861e-003f, 1.380827e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, -1.581784e-002f, 1.379985e-001f, 0.000000e+000f, 0.000000e+000f,
  -1.632536e-003f, -1.584861e-003f, 1.380827e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, -1.012342e-002f, 8.831905e-002f, 0.000000e+000f, 0.000000e+000f,
  -1.632536e-003f, -1.584861e-003f, 1.380827e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, -9.734056e-003f, 8.492216e-002f, 0.000000e+000f, 0.000000e+000f,
  -1.632536e-003f, -1.584861e-003f, 1.380827e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, -9.373535e-003f, 8.177690e-002f, 0.000000e+000f, 0.000000e+000f,
  -1.632536e-003f, -1.584861e-003f, 1.380827e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, -9.038766e-003f, 7.885629e-002f, 0.000000e+000f, 0.000000e+000f,
  -1.632536e-003f, -1.584861e-003f, 1.380827e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, -8.727084e-003f, 7.613711e-002f, 0.000000e+000f, 0.000000e+000f,
  -1.632536e-003f, -1.584861e-003f, 1.380827e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, -8.436182e-003f, 7.359921e-002f, 0.000000e+000f, 0.000000e+000f,
  -1.632536e-003f, -1.584861e-003f, 1.380827e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, -8.164047e-003f, 7.122504e-002f, 0.000000e+000f, 0.000000e+000f,
  1.122374e-002f, 1.074227e-001f, -1.349300e-002f, 2.145833e-002f, -2.350510e-001f, 0.000000e+000f, -2.602389e-002f, 8.274070e-002f, 0.000000e+000f, -2.071068e-001f,
  1.122374e-002f, 1.060310e-001f, -2.698599e-002f, 4.291666e-002f, -2.970510e-001f, 0.000000e+000f, -1.438932e-002f, 6.938744e-002f, 0.000000e+000f, -2.071068e-001f,
  1.122374e-002f, 1.046393e-001f, -4.047899e-002f, 6.437498e-002f, -3.590510e-001f, 0.000000e+000f, -5.604236e-003f, 5.898477e-002f, 0.000000e+000f, -2.071068e-001f,
  1.122374e-002f, 1.018558e-001f, -6.746498e-002f, 1.072916e-001f, -4.830510e-001f, 0.000000e+000f, 1.008179e-003f, 5.084719e-002f, 0.000000e+000f, -2.071068e-001f,
  0.000000e+000f, -3.295773e-002f, 2.305926e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -9.632740e-003f, 6.739658e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -3.151860e-002f, 2.205236e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.711978e-002f, 1.197805e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -2.816248e-002f, 1.970421e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.209488e-002f, 1.545894e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -2.445462e-002f, 1.710996e-001f, 0.000000e+000f, 0.000000e+000f,
  -1.959073e-002f, 1.123309e-001f, 1.730815e-001f, 0.000000e+000f, 3.786694e-001f, 0.000000e+000f, -3.181693e-002f, 2.226109e-001f, 0.000000e+000f, 0.000000e+000f,
  -2.056749e-002f, 1.179453e-001f, 1.816151e-001f, 0.000000e+000f, 3.551642e-001f, 0.000000e+000f, -2.791132e-002f, 1.952848e-001f, 0.000000e+000f, 0.000000e+000f,
  -2.087850e-002f, 1.196035e-001f, 1.852378e-001f, 0.000000e+000f, 3.311715e-001f, 0.000000e+000f, -2.486330e-002f, 1.739590e-001f, 0.000000e+000f, 0.000000e+000f,
  -1.985106e-002f, 1.126157e-001f, 1.838333e-001f, 0.000000e+000f, 2.858841e-001f, 0.000000e+000f, -2.250019e-002f, 1.574252e-001f, 0.000000e+000f, 0.000000e+000f,
  -1.691741e-002f, 9.323888e-002f, 1.757951e-001f, 0.000000e+000f, 2.021436e-001f, 0.000000e+000f, -2.066849e-002f, 1.446095e-001f, 0.000000e+000f, 0.000000e+000f,
  -1.326179e-002f, 6.936685e-002f, 1.638665e-001f, 0.000000e+000f, 1.041984e-001f, 0.000000e+000f, -1.925024e-002f, 1.346865e-001f, 0.000000e+000f, 0.000000e+000f,
  -9.131083e-003f, 4.256865e-002f, 1.491541e-001f, 0.000000e+000f, -3.338265e-003f, 0.000000e+000f, -1.815918e-002f, 1.270528e-001f, 0.000000e+000f, 0.000000e+000f,
  -3.992825e-003f, 9.303032e-003f, 1.303696e-001f, 0.000000e+000f, -1.334733e-001f, 0.000000e+000f, -1.733349e-002f, 1.212758e-001f, 0.000000e+000f, 0.000000e+000f,
  -2.210114e-004f, -1.496384e-002f, 1.155153e-001f, 0.000000e+000f, -2.302575e-001f, 0.000000e+000f, -1.672954e-002f, 1.170502e-001f, 0.000000e+000f, 0.000000e+000f,
  5.216324e-004f, -1.951822e-002f, 1.110262e-001f, 0.000000e+000f, -2.533499e-001f, 0.000000e+000f, -1.631731e-002f, 1.141660e-001f, 0.000000e+000f, 0.000000e+000f,
  7.382587e-004f, -2.075571e-002f, 1.090801e-001f, 0.000000e+000f, -2.617268e-001f, 0.000000e+000f, -1.607728e-002f, 1.124866e-001f, 0.000000e+000f, 0.000000e+000f,
  1.459396e-003f, -2.539020e-002f, 1.062042e-001f, 0.000000e+000f, -2.800175e-001f, 0.000000e+000f, -1.599845e-002f, 1.119350e-001f, 0.000000e+000f, 0.000000e+000f,
  2.295184e-003f, -3.088883e-002f, 1.037620e-001f, 0.000000e+000f, -2.988988e-001f, 0.000000e+000f, -1.607728e-002f, 1.124866e-001f, 0.000000e+000f, 0.000000e+000f,
  2.788455e-003f, -3.428603e-002f, 1.033840e-001f, 0.000000e+000f, -3.073360e-001f, 0.000000e+000f, -1.631731e-002f, 1.141660e-001f, 0.000000e+000f, 0.000000e+000f,
  2.467841e-003f, -3.251026e-002f, 1.066545e-001f, 0.000000e+000f, -2.940253e-001f, 0.000000e+000f, -1.672954e-002f, 1.170502e-001f, 0.000000e+000f, 0.000000e+000f,
  9.652667e-004f, -2.312994e-002f, 1.145790e-001f, 0.000000e+000f, -2.503511e-001f, 0.000000e+000f, -1.733349e-002f, 1.212758e-001f, 0.000000e+000f, 0.000000e+000f,
  -1.874183e-003f, -5.057319e-003f, 1.271303e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, -1.815918e-002f, 1.270528e-001f, 0.000000e+000f, 0.000000e+000f,
  -1.874183e-003f, -5.057319e-003f, 1.271303e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, -1.152964e-002f, 8.066846e-002f, 0.000000e+000f, 0.000000e+000f,
  -1.874183e-003f, -5.057319e-003f, 1.271303e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, -1.100556e-002f, 7.700171e-002f, 0.000000e+000f, 0.000000e+000f,
  -1.874183e-003f, -5.057319e-003f, 1.271303e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, -1.052706e-002f, 7.365381e-002f, 0.000000e+000f, 0.000000e+000f,
  -1.874183e-003f, -5.057319e-003f, 1.271303e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, -1.008843e-002f, 7.058490e-002f, 0.000000e+000f, 0.000000e+000f,
  -1.874183e-003f, -5.057319e-003f, 1.271303e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, -9.684897e-003f, 6.776150e-002f, 0.000000e+000f, 0.000000e+000f,
  -1.874183e-003f, -5.057319e-003f, 1.271303e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, -9.312401e-003f, 6.515529e-002f, 0.000000e+000f, 0.000000e+000f,
  1.059589e-002f, 1.014136e-001f, -1.273821e-002f, 2.145833e-002f, -2.350510e-001f, 0.000000e+000f, -2.570260e-002f, 8.171921e-002f, 0.000000e+000f, -2.071068e-001f,
  1.059589e-002f, 1.000997e-001f, -2.547642e-002f, 4.291666e-002f, -2.970510e-001f, 0.000000e+000f, -1.413237e-002f, 6.814838e-002f, 0.000000e+000f, -2.071068e-001f,
  1.059589e-002f, 9.615805e-002f, -6.369105e-002f, 1.072916e-001f, -4.830510e-001f, 0.000000e+000f, -5.475403e-003f, 5.762879e-002f, 0.000000e+000f, -2.071068e-001f,
  0.000000e+000f, -3.633265e-002f, 2.124749e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.061915e-002f, 6.210123e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -3.474615e-002f, 2.031970e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.996517e-002f, 1.167572e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -3.035545e-002f, 1.775200e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.505033e-002f, 1.464954e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -2.631620e-002f, 1.538983e-001f, 0.000000e+000f, 0.000000e+000f,
  -2.205773e-002f, 1.011624e-001f, 1.627636e-001f, 0.000000e+000f, 3.708151e-001f, 0.000000e+000f, -3.352412e-002f, 1.960505e-001f, 0.000000e+000f, 0.000000e+000f,
  -2.287916e-002f, 1.049197e-001f, 1.688834e-001f, 0.000000e+000f, 3.477485e-001f, 0.000000e+000f, -2.955370e-002f, 1.728313e-001f, 0.000000e+000f, 0.000000e+000f,
  -2.272074e-002f, 1.036708e-001f, 1.707689e-001f, 0.000000e+000f, 3.132399e-001f, 0.000000e+000f, -2.602388e-002f, 1.521888e-001f, 0.000000e+000f, 0.000000e+000f,
  -2.047691e-002f, 9.129851e-002f, 1.663848e-001f, 0.000000e+000f, 2.479673e-001f, 0.000000e+000f, -2.373041e-002f, 1.387765e-001f, 0.000000e+000f, 0.000000e+000f,
  -1.664533e-002f, 7.054558e-002f, 1.567101e-001f, 0.000000e+000f, 1.531775e-001f, 0.000000e+000f, -2.195292e-002f, 1.283816e-001f, 0.000000e+000f, 0.000000e+000f,
  -1.171393e-002f, 4.415486e-002f, 1.423925e-001f, 0.000000e+000f, 3.512590e-002f, 0.000000e+000f, -2.038423e-002f, 1.192079e-001f, 0.000000e+000f, 0.000000e+000f,
  -6.310804e-003f, 1.535408e-002f, 1.260357e-001f, 0.000000e+000f, -8.973915e-002f, 0.000000e+000f, -1.938269e-002f, 1.133508e-001f, 0.000000e+000f, 0.000000e+000f,
  -6.679521e-004f, -1.455854e-002f, 1.079827e-001f, 0.000000e+000f, -2.200044e-001f, 0.000000e+000f, -1.853822e-002f, 1.084123e-001f, 0.000000e+000f, 0.000000e+000f,
  5.651775e-004f, -2.084776e-002f, 1.025897e-001f, 0.000000e+000f, -2.523861e-001f, 0.000000e+000f, -1.805033e-002f, 1.055591e-001f, 0.000000e+000f, 0.000000e+000f,
  8.138573e-004f, -2.194635e-002f, 1.005096e-001f, 0.000000e+000f, -2.617268e-001f, 0.000000e+000f, -1.772361e-002f, 1.036485e-001f, 0.000000e+000f, 0.000000e+000f,
  1.608840e-003f, -2.614232e-002f, 9.785973e-002f, 0.000000e+000f, -2.800175e-001f, 0.000000e+000f, -1.763672e-002f, 1.031403e-001f, 0.000000e+000f, 0.000000e+000f,
  2.530214e-003f, -3.114575e-002f, 9.560938e-002f, 0.000000e+000f, -2.988988e-001f, 0.000000e+000f, -1.772361e-002f, 1.036485e-001f, 0.000000e+000f, 0.000000e+000f,
  3.090654e-003f, -3.440370e-002f, 9.549516e-002f, 0.000000e+000f, -3.069137e-001f, 0.000000e+000f, -1.805033e-002f, 1.055591e-001f, 0.000000e+000f, 0.000000e+000f,
  2.542762e-003f, -3.183000e-002f, 9.918175e-002f, 0.000000e+000f, -2.890151e-001f, 0.000000e+000f, -1.853822e-002f, 1.084123e-001f, 0.000000e+000f, 0.000000e+000f,
  1.861498e-004f, -1.972510e-002f, 1.089870e-001f, 0.000000e+000f, -2.283292e-001f, 0.000000e+000f, -1.938269e-002f, 1.133508e-001f, 0.000000e+000f, 0.000000e+000f,
  -2.066102e-003f, -7.948263e-003f, 1.171417e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, -1.312702e-002f, 7.676739e-002f, 0.000000e+000f, 0.000000e+000f,
  -2.066102e-003f, -7.948263e-003f, 1.171417e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, -1.241470e-002f, 7.260171e-002f, 0.000000e+000f, 0.000000e+000f,
  -2.066102e-003f, -7.948263e-003f, 1.171417e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, -1.186294e-002f, 6.937497e-002f, 0.000000e+000f, 0.000000e+000f,
  -2.066102e-003f, -7.948263e-003f, 1.171417e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, -1.135813e-002f, 6.642284e-002f, 0.000000e+000f, 0.000000e+000f,
  -2.066102e-003f, -7.948263e-003f, 1.171417e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, -1.082092e-002f, 6.328122e-002f, 0.000000e+000f, 0.000000e+000f,
  -2.066102e-003f, -7.948263e-003f, 1.171417e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, -1.039933e-002f, 6.081572e-002f, 0.000000e+000f, 0.000000e+000f,
  1.000317e-002f, 9.574062e-002f, -1.202565e-002f, 2.145833e-002f, -2.350510e-001f, 0.000000e+000f, -2.586225e-002f, 8.222678e-002f, 0.000000e+000f, -2.071068e-001f,
  1.000317e-002f, 9.450023e-002f, -2.405129e-002f, 4.291666e-002f, -2.970510e-001f, 0.000000e+000f, -1.421699e-002f, 6.855645e-002f, 0.000000e+000f, -2.071068e-001f,
  1.000317e-002f, 9.077905e-002f, -6.012823e-002f, 1.072916e-001f, -4.830510e-001f, 0.000000e+000f, -5.475403e-003f, 5.762879e-002f, 0.000000e+000f, -2.071068e-001f,
  0.000000e+000f, -3.772968e-002f, 2.040187e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.422053e-002f, 7.689579e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -3.494718e-002f, 1.889726e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.367525e-002f, 1.280211e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -2.937705e-002f, 1.588529e-001f, 0.000000e+000f, 0.000000e+000f,
  -2.242727e-002f, 9.295308e-002f, 1.531353e-001f, 0.000000e+000f, 3.786694e-001f, 0.000000e+000f, -3.642370e-002f, 1.969568e-001f, 0.000000e+000f, 0.000000e+000f,
  -2.375889e-002f, 9.848429e-002f, 1.621621e-001f, 0.000000e+000f, 3.477485e-001f, 0.000000e+000f, -3.069007e-002f, 1.659529e-001f, 0.000000e+000f, 0.000000e+000f,
  -2.337565e-002f, 9.612636e-002f, 1.637065e-001f, 0.000000e+000f, 3.053644e-001f, 0.000000e+000f, -2.658430e-002f, 1.437514e-001f, 0.000000e+000f, 0.000000e+000f,
  -1.936688e-002f, 7.596038e-002f, 1.555361e-001f, 0.000000e+000f, 2.021436e-001f, 0.000000e+000f, -2.366107e-002f, 1.279444e-001f, 0.000000e+000f, 0.000000e+000f,
  -1.372240e-002f, 4.812231e-002f, 1.410241e-001f, 0.000000e+000f, 7.059133e-002f, 0.000000e+000f, -2.158351e-002f, 1.167102e-001f, 0.000000e+000f, 0.000000e+000f,
  -6.553462e-003f, 1.305658e-002f, 1.210197e-001f, 0.000000e+000f, -8.973915e-002f, 0.000000e+000f, -2.012798e-002f, 1.088396e-001f, 0.000000e+000f, 0.000000e+000f,
  -2.530117e-004f, -1.753255e-002f, 1.022032e-001f, 0.000000e+000f, -2.302575e-001f, 0.000000e+000f, -1.915181e-002f, 1.035611e-001f, 0.000000e+000f, 0.000000e+000f,
  6.024148e-004f, -2.134042e-002f, 9.778128e-002f, 0.000000e+000f, -2.547724e-001f, 0.000000e+000f, -1.856720e-002f, 1.003999e-001f, 0.000000e+000f, 0.000000e+000f,
  1.356755e-003f, -2.487502e-002f, 9.483747e-002f, 0.000000e+000f, -2.733462e-001f, 0.000000e+000f, -1.832486e-002f, 9.908948e-002f, 0.000000e+000f, 0.000000e+000f,
  2.627504e-003f, -3.118550e-002f, 9.180426e-002f, 0.000000e+000f, -2.988988e-001f, 0.000000e+000f, -1.840511e-002f, 9.952340e-002f, 0.000000e+000f, 0.000000e+000f,
  3.198272e-003f, -3.431100e-002f, 9.201591e-002f, 0.000000e+000f, -3.058319e-001f, 0.000000e+000f, -1.881441e-002f, 1.017366e-001f, 0.000000e+000f, 0.000000e+000f,
  1.845061e-003f, -2.820417e-002f, 9.856152e-002f, 0.000000e+000f, -2.686011e-001f, 0.000000e+000f, -1.958651e-002f, 1.059117e-001f, 0.000000e+000f, 0.000000e+000f,
  -2.145546e-003f, -9.199348e-003f, 1.124796e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, -2.078845e-002f, 1.124110e-001f, 0.000000e+000f, 0.000000e+000f,
  -2.145546e-003f, -9.199348e-003f, 1.124796e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, -1.299278e-002f, 7.025689e-002f, 0.000000e+000f, 0.000000e+000f,
  -2.145546e-003f, -9.199348e-003f, 1.124796e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, -1.222850e-002f, 6.612413e-002f, 0.000000e+000f, 0.000000e+000f,
  -2.145546e-003f, -9.199348e-003f, 1.124796e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, -1.154914e-002f, 6.245057e-002f, 0.000000e+000f, 0.000000e+000f,
  -2.145546e-003f, -9.199348e-003f, 1.124796e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, -1.094129e-002f, 5.916370e-002f, 0.000000e+000f, 0.000000e+000f,
  9.719359e-003f, 9.302427e-002f, -1.168445e-002f, 2.145833e-002f, -2.350510e-001f, 0.000000e+000f, -2.602389e-002f, 8.274070e-002f, 0.000000e+000f, -2.071068e-001f,
  9.719359e-003f, 8.820346e-002f, -5.842227e-002f, 1.072916e-001f, -4.830510e-001f, 0.000000e+000f, -1.413237e-002f, 6.814838e-002f, 0.000000e+000f, -2.071068e-001f,
  9.719359e-003f, 9.061386e-002f, -3.505336e-002f, 6.437498e-002f, -3.590510e-001f, 0.000000e+000f, -5.413182e-003f, 5.697392e-002f, 0.000000e+000f, -2.071068e-001f,
  0.000000e+000f, -3.895126e-002f, 1.959382e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.763352e-002f, 8.870265e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -3.473125e-002f, 1.747101e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.754270e-002f, 1.385492e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -2.754270e-002f, 1.385492e-001f, 0.000000e+000f, 0.000000e+000f,
  -2.430779e-002f, 9.159845e-002f, 1.543213e-001f, 0.000000e+000f, 3.551642e-001f, 0.000000e+000f, -3.298713e-002f, 1.659366e-001f, 0.000000e+000f, 0.000000e+000f,
  -2.413249e-002f, 9.013984e-002f, 1.572227e-001f, 0.000000e+000f, 3.053644e-001f, 0.000000e+000f, -2.744502e-002f, 1.380579e-001f, 0.000000e+000f, 0.000000e+000f,
  -1.856393e-002f, 6.432236e-002f, 1.461846e-001f, 0.000000e+000f, 1.694993e-001f, 0.000000e+000f, -2.381986e-002f, 1.198221e-001f, 0.000000e+000f, 0.000000e+000f,
  -1.079162e-002f, 2.909071e-002f, 1.267386e-001f, 0.000000e+000f, -3.338265e-003f, 0.000000e+000f, -2.146152e-002f, 1.079588e-001f, 0.000000e+000f, 0.000000e+000f,
  -1.298312e-003f, -1.360878e-002f, 1.013098e-001f, 0.000000e+000f, -2.071482e-001f, 0.000000e+000f, -1.998317e-002f, 1.005222e-001f, 0.000000e+000f, 0.000000e+000f,
  6.219193e-004f, -2.179687e-002f, 9.390850e-002f, 0.000000e+000f, -2.547724e-001f, 0.000000e+000f, -1.916835e-002f, 9.642340e-002f, 0.000000e+000f, 0.000000e+000f,
  1.724794e-003f, -2.661612e-002f, 9.024341e-002f, 0.000000e+000f, -2.800175e-001f, 0.000000e+000f, -1.890785e-002f, 9.511298e-002f, 0.000000e+000f, 0.000000e+000f,
  3.181412e-003f, -3.343204e-002f, 8.767108e-002f, 0.000000e+000f, -3.064018e-001f, 0.000000e+000f, -1.916835e-002f, 9.642340e-002f, 0.000000e+000f, 0.000000e+000f,
  2.494587e-003f, -3.091970e-002f, 9.241281e-002f, 0.000000e+000f, -2.831212e-001f, 0.000000e+000f, -1.998317e-002f, 1.005222e-001f, 0.000000e+000f, 0.000000e+000f,
  -2.215012e-003f, -1.033234e-002f, 1.080247e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, -2.146152e-002f, 1.079588e-001f, 0.000000e+000f, 0.000000e+000f,
  -2.215012e-003f, -1.033234e-002f, 1.080247e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, -1.320709e-002f, 6.643619e-002f, 0.000000e+000f, 0.000000e+000f,
  -2.215012e-003f, -1.033234e-002f, 1.080247e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, -1.226373e-002f, 6.169075e-002f, 0.000000e+000f, 0.000000e+000f,
  -2.215012e-003f, -1.033234e-002f, 1.080247e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, -1.144614e-002f, 5.757803e-002f, 0.000000e+000f, 0.000000e+000f,
  9.443600e-003f, 9.038498e-002f, -1.135294e-002f, 2.145833e-002f, -2.350510e-001f, 0.000000e+000f, -2.602389e-002f, 8.274070e-002f, 0.000000e+000f, -2.071068e-001f,
  9.443600e-003f, 8.570095e-002f, -5.676471e-002f, 1.072916e-001f, -4.830510e-001f, 0.000000e+000f, -1.396610e-002f, 6.734663e-002f, 0.000000e+000f, -2.071068e-001f,
  0.000000e+000f, -4.000997e-002f, 1.882152e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.414331e-002f, 1.135751e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, -3.190452e-002f, 1.500855e-001f, 0.000000e+000f, 0.000000e+000f,
  -2.496848e-002f, 8.594502e-002f, 1.482386e-001f, 0.000000e+000f, 3.551642e-001f, 0.000000e+000f, -3.388373e-002f, 1.593961e-001f, 0.000000e+000f, 0.000000e+000f,
  -2.254943e-002f, 7.474622e-002f, 1.473875e-001f, 0.000000e+000f, 2.479673e-001f, 0.000000e+000f, -2.613223e-002f, 1.229314e-001f, 0.000000e+000f, 0.000000e+000f,
  -1.108494e-002f, 2.626622e-002f, 1.217431e-001f, 0.000000e+000f, -3.338265e-003f, 0.000000e+000f, -2.204485e-002f, 1.037036e-001f, 0.000000e+000f, 0.000000e+000f,
  4.885051e-004f, -2.178974e-002f, 9.169307e-002f, 0.000000e+000f, -2.480713e-001f, 0.000000e+000f, -2.003173e-002f, 9.423342e-002f, 0.000000e+000f, 0.000000e+000f,
  1.771675e-003f, -2.676175e-002f, 8.668642e-002f, 0.000000e+000f, -2.800175e-001f, 0.000000e+000f, -1.942177e-002f, 9.136406e-002f, 0.000000e+000f, 0.000000e+000f,
  3.347024e-003f, -3.387326e-002f, 8.527866e-002f, 0.000000e+000f, -3.040440e-001f, 0.000000e+000f, -2.003173e-002f, 9.423342e-002f, 0.000000e+000f, 0.000000e+000f,
  -2.275217e-003f, -1.135520e-002f, 1.037668e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, -2.204485e-002f, 1.037036e-001f, 0.000000e+000f, 0.000000e+000f,
  -2.275217e-003f, -1.135520e-002f, 1.037668e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, -1.306362e-002f, 6.145396e-002f, 0.000000e+000f, 0.000000e+000f,
  -2.275217e-003f, -1.135520e-002f, 1.037668e-001f, 0.000000e+000f, -1.730510e-001f, 0.000000e+000f, -1.175725e-002f, 5.530857e-002f, 0.000000e+000f, 0.000000e+000f,
  9.175666e-003f, 8.326944e-002f, -5.515418e-002f, 1.072916e-001f, -4.830510e-001f, 0.000000e+000f, -2.523528e-002f, 8.023341e-002f, 0.000000e+000f, -2.071068e-001f,
  -6.761327e-002f, 1.987347e-001f, 0.000000e+000f, 0.000000e+000f, -2.071068e-001f,
  1.383845e-001f, 1.574910e-001f, -2.165668e-002f, -4.404036e-002f, 2.931642e-001f, -6.181917e-002f, 2.361708e-001f, 0.000000e+000f, 0.000000e+000f, -2.071068e-001f,
  1.249773e-001f, 1.426536e-001f, -4.306468e-002f, -6.149590e-002f, 1.239673e-001f, -2.945170e-002f, 1.639172e-001f, 0.000000e+000f, 0.000000e+000f, -2.071068e-001f,
  6.143679e-002f, 1.205799e-001f, -5.335760e-002f, 1.241835e-003f, -1.893383e-001f, -1.190900e-002f, 1.253426e-001f, 0.000000e+000f, 0.000000e+000f, -2.071068e-001f,
  -2.707475e-003f, 1.093731e-001f, -5.358300e-002f, 1.230434e-001f, -4.960713e-001f, -9.310460e-004f, 1.040060e-001f, 0.000000e+000f, 0.000000e+000f, -2.071068e-001f,
  -9.819273e-003f, 1.082195e-001f, -6.332156e-002f, 1.736108e-001f, -5.900175e-001f, 7.165672e-003f, 9.277069e-002f, 0.000000e+000f, 0.000000e+000f, -2.071068e-001f,
  // Total number of coefficients: 3485
  // Maximum number of elevation coefficients: 5



 
 // Lite coefficients
 // 20 degrees loudspeakers
 // 11025 Hz sample rate

  // Coefficients
  // Generated by HRTFConv V5.90d on Wed Mar 03 18:25:02 1999
  0.000000e+000f, 1.334551e-003f, 1.718758e-001f, 0.000000e+000f, -1.094468e-001f,
  0.000000e+000f, 3.900566e-004f, 5.023509e-002f, 0.000000e+000f, -1.094468e-001f, 0.000000e+000f, 1.276277e-003f, 1.643707e-001f, 0.000000e+000f, -1.094468e-001f,
  0.000000e+000f, 7.333496e-004f, 9.444753e-002f, 0.000000e+000f, -1.094468e-001f, 0.000000e+000f, 1.115000e-003f, 1.435999e-001f, 0.000000e+000f, -1.094468e-001f,
  0.000000e+000f, 9.201349e-004f, 1.185035e-001f, 0.000000e+000f, -1.094468e-001f, 0.000000e+000f, 9.666322e-004f, 1.244918e-001f, 0.000000e+000f, -1.094468e-001f,
  5.456449e-004f, 7.126283e-002f, 1.274563e-001f, -5.025153e-002f, 1.201238e-001f, 0.000000e+000f, 1.231390e-003f, 1.585897e-001f, 0.000000e+000f, -1.094468e-001f,
  5.696450e-004f, 7.436655e-002f, 1.290997e-001f, -4.399872e-002f, 9.155827e-002f, 0.000000e+000f, 1.085550e-003f, 1.398072e-001f, 0.000000e+000f, -1.094468e-001f,
  5.613403e-004f, 7.328636e-002f, 1.277309e-001f, -3.552046e-002f, 5.282594e-002f, 0.000000e+000f, 9.558948e-004f, 1.231089e-001f, 0.000000e+000f, -1.094468e-001f,
  4.845074e-004f, 6.335126e-002f, 1.225975e-001f, -2.141188e-002f, -1.162811e-002f, 0.000000e+000f, 8.716523e-004f, 1.122594e-001f, 0.000000e+000f, -1.094468e-001f,
  3.694229e-004f, 4.846790e-002f, 1.146496e-001f, -3.417701e-003f, -9.383327e-002f, 0.000000e+000f, 8.063627e-004f, 1.038508e-001f, 0.000000e+000f, -1.094468e-001f,
  2.314319e-004f, 3.061574e-002f, 1.042957e-001f, 1.737058e-002f, -1.888031e-001f, 0.000000e+000f, 7.487425e-004f, 9.642997e-002f, 0.000000e+000f, -1.094468e-001f,
  7.833239e-005f, 1.081113e-002f, 9.308401e-002f, 3.915291e-002f, -2.883141e-001f, 0.000000e+000f, 7.119544e-004f, 9.169205e-002f, 0.000000e+000f, -1.094468e-001f,
  -8.447736e-005f, -1.025263e-002f, 8.076895e-002f, 6.212075e-002f, -3.932411e-001f, 0.000000e+000f, 6.809357e-004f, 8.769718e-002f, 0.000000e+000f, -1.094468e-001f,
  -1.184066e-004f, -1.465203e-002f, 7.694614e-002f, 6.780964e-002f, -4.192304e-001f, 0.000000e+000f, 6.630147e-004f, 8.538914e-002f, 0.000000e+000f, -1.094468e-001f,
  -1.240696e-004f, -1.539350e-002f, 7.538322e-002f, 6.944492e-002f, -4.267010e-001f, 0.000000e+000f, 6.510141e-004f, 8.384359e-002f, 0.000000e+000f, -1.094468e-001f,
  -1.469151e-004f, -1.834949e-002f, 7.361563e-002f, 7.263774e-002f, -4.412872e-001f, 0.000000e+000f, 6.478222e-004f, 8.343251e-002f, 0.000000e+000f, -1.094468e-001f,
  -1.742301e-004f, -2.187812e-002f, 7.222938e-002f, 7.591880e-002f, -4.562765e-001f, 0.000000e+000f, 6.510141e-004f, 8.384359e-002f, 0.000000e+000f, -1.094468e-001f,
  -1.922157e-004f, -2.419330e-002f, 7.237987e-002f, 7.730646e-002f, -4.626159e-001f, 0.000000e+000f, 6.630147e-004f, 8.538914e-002f, 0.000000e+000f, -1.094468e-001f,
  -1.788072e-004f, -2.244552e-002f, 7.507460e-002f, 7.420330e-002f, -4.484394e-001f, 0.000000e+000f, 6.809357e-004f, 8.769718e-002f, 0.000000e+000f, -1.094468e-001f,
  -1.138694e-004f, -1.402863e-002f, 8.197670e-002f, 6.358578e-002f, -3.999340e-001f, 0.000000e+000f, 7.119544e-004f, 9.169205e-002f, 0.000000e+000f, -1.094468e-001f,
  -5.034344e-005f, -5.802684e-003f, 8.770660e-002f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, 4.821745e-004f, 6.209888e-002f, 0.000000e+000f, -1.094468e-001f,
  -5.034344e-005f, -5.802684e-003f, 8.770660e-002f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, 4.560100e-004f, 5.872917e-002f, 0.000000e+000f, -1.094468e-001f,
  -5.034344e-005f, -5.802684e-003f, 8.770660e-002f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, 4.357429e-004f, 5.611899e-002f, 0.000000e+000f, -1.094468e-001f,
  -5.034344e-005f, -5.802684e-003f, 8.770660e-002f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, 4.172006e-004f, 5.373094e-002f, 0.000000e+000f, -1.094468e-001f,
  -5.034344e-005f, -5.802684e-003f, 8.770660e-002f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, 3.974682e-004f, 5.118962e-002f, 0.000000e+000f, -1.094468e-001f,
  -5.034344e-005f, -5.802684e-003f, 8.770660e-002f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, 3.819824e-004f, 4.919522e-002f, 0.000000e+000f, -1.094468e-001f,
  -8.365104e-003f, 1.142946e-001f, -1.538934e-002f, 3.345015e-002f, -3.139570e-001f, 0.000000e+000f, -3.731493e-002f, 8.091404e-002f, 0.000000e+000f, -2.734412e-001f,
  -8.365104e-003f, 1.154322e-001f, -3.077869e-002f, 6.690030e-002f, -3.819570e-001f, 0.000000e+000f, -2.425291e-002f, 6.628559e-002f, 0.000000e+000f, -2.734412e-001f,
  -8.365104e-003f, 1.188452e-001f, -7.694671e-002f, 1.672508e-001f, -5.859570e-001f, 0.000000e+000f, -1.434118e-002f, 5.468288e-002f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -1.017675e-002f, 2.045219e-001f, 0.000000e+000f, -1.094468e-001f,
  0.000000e+000f, -2.974415e-003f, 5.977676e-002f, 0.000000e+000f, -1.094468e-001f, 0.000000e+000f, -9.732372e-003f, 1.955913e-001f, 0.000000e+000f, -1.094468e-001f,
  0.000000e+000f, -5.286276e-003f, 1.062382e-001f, 0.000000e+000f, -1.094468e-001f, 0.000000e+000f, -8.696062e-003f, 1.747646e-001f, 0.000000e+000f, -1.094468e-001f,
  0.000000e+000f, -6.822497e-003f, 1.371116e-001f, 0.000000e+000f, -1.094468e-001f, 0.000000e+000f, -7.551142e-003f, 1.517552e-001f, 0.000000e+000f, -1.094468e-001f,
  -4.059720e-003f, 7.412146e-002f, 1.500571e-001f, -5.251597e-002f, 1.304687e-001f, 0.000000e+000f, -9.824491e-003f, 1.974426e-001f, 0.000000e+000f, -1.094468e-001f,
  -4.296329e-003f, 7.871349e-002f, 1.533350e-001f, -4.594986e-002f, 1.004719e-001f, 0.000000e+000f, -8.618508e-003f, 1.732060e-001f, 0.000000e+000f, -1.094468e-001f,
  -4.369631e-003f, 8.019035e-002f, 1.532604e-001f, -3.981251e-002f, 7.243387e-002f, 0.000000e+000f, -7.677336e-003f, 1.542913e-001f, 0.000000e+000f, -1.094468e-001f,
  -4.051520e-003f, 7.398248e-002f, 1.495383e-001f, -2.935859e-002f, 2.467583e-002f, 0.000000e+000f, -6.947649e-003f, 1.396268e-001f, 0.000000e+000f, -1.094468e-001f,
  -3.263545e-003f, 5.855362e-002f, 1.413577e-001f, -1.246238e-002f, -5.251329e-002f, 0.000000e+000f, -6.382053e-003f, 1.282600e-001f, 0.000000e+000f, -1.094468e-001f,
  -2.381865e-003f, 4.133142e-002f, 1.313715e-001f, 5.310047e-003f, -1.337054e-001f, 0.000000e+000f, -5.944124e-003f, 1.194590e-001f, 0.000000e+000f, -1.094468e-001f,
  -1.412555e-003f, 2.241576e-002f, 1.200259e-001f, 2.405594e-002f, -2.193447e-001f, 0.000000e+000f, -5.607225e-003f, 1.126883e-001f, 0.000000e+000f, -1.094468e-001f,
  -1.775666e-004f, -1.704664e-003f, 1.059757e-001f, 4.685218e-002f, -3.234877e-001f, 0.000000e+000f, -5.352267e-003f, 1.075644e-001f, 0.000000e+000f, -1.094468e-001f,
  7.361294e-004f, -1.951316e-002f, 9.484134e-002f, 6.392492e-002f, -4.014833e-001f, 0.000000e+000f, -5.165778e-003f, 1.038165e-001f, 0.000000e+000f, -1.094468e-001f,
  9.027596e-004f, -2.268528e-002f, 9.129128e-002f, 6.797851e-002f, -4.200018e-001f, 0.000000e+000f, -5.038489e-003f, 1.012584e-001f, 0.000000e+000f, -1.094468e-001f,
  9.461048e-004f, -2.347728e-002f, 8.970154e-002f, 6.944492e-002f, -4.267010e-001f, 0.000000e+000f, -4.964372e-003f, 9.976888e-002f, 0.000000e+000f, -1.094468e-001f,
  1.120316e-003f, -2.687374e-002f, 8.759821e-002f, 7.263774e-002f, -4.412872e-001f, 0.000000e+000f, -4.940032e-003f, 9.927972e-002f, 0.000000e+000f, -1.094468e-001f,
  1.328608e-003f, -3.097771e-002f, 8.594865e-002f, 7.591880e-002f, -4.562765e-001f, 0.000000e+000f, -4.964372e-003f, 9.976888e-002f, 0.000000e+000f, -1.094468e-001f,
  1.459595e-003f, -3.360768e-002f, 8.589899e-002f, 7.737949e-002f, -4.629496e-001f, 0.000000e+000f, -5.038489e-003f, 1.012584e-001f, 0.000000e+000f, -1.094468e-001f,
  1.399267e-003f, -3.252788e-002f, 8.856432e-002f, 7.507350e-002f, -4.524148e-001f, 0.000000e+000f, -5.165778e-003f, 1.038165e-001f, 0.000000e+000f, -1.094468e-001f,
  1.055214e-003f, -2.591867e-002f, 9.469824e-002f, 6.745300e-002f, -4.176011e-001f, 0.000000e+000f, -5.352267e-003f, 1.075644e-001f, 0.000000e+000f, -1.094468e-001f,
  3.838989e-004f, -1.290831e-002f, 1.043656e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -5.607225e-003f, 1.126883e-001f, 0.000000e+000f, -1.094468e-001f,
  3.838989e-004f, -1.290831e-002f, 1.043656e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -3.560143e-003f, 7.154812e-002f, 0.000000e+000f, -1.094468e-001f,
  3.838989e-004f, -1.290831e-002f, 1.043656e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -3.398318e-003f, 6.829594e-002f, 0.000000e+000f, -1.094468e-001f,
  3.838989e-004f, -1.290831e-002f, 1.043656e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -3.250565e-003f, 6.532655e-002f, 0.000000e+000f, -1.094468e-001f,
  3.838989e-004f, -1.290831e-002f, 1.043656e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -3.115125e-003f, 6.260461e-002f, 0.000000e+000f, -1.094468e-001f,
  3.838989e-004f, -1.290831e-002f, 1.043656e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -2.990520e-003f, 6.010042e-002f, 0.000000e+000f, -1.094468e-001f,
  3.838989e-004f, -1.290831e-002f, 1.043656e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -2.875500e-003f, 5.778887e-002f, 0.000000e+000f, -1.094468e-001f,
  -9.385801e-003f, 1.282406e-001f, -1.726713e-002f, 3.345015e-002f, -3.139570e-001f, 0.000000e+000f, -3.708459e-002f, 8.041457e-002f, 0.000000e+000f, -2.734412e-001f,
  -9.385801e-003f, 1.295171e-001f, -3.453425e-002f, 6.690030e-002f, -3.819570e-001f, 0.000000e+000f, -2.410855e-002f, 6.589103e-002f, 0.000000e+000f, -2.734412e-001f,
  -9.385801e-003f, 1.333465e-001f, -8.633563e-002f, 1.672508e-001f, -5.859570e-001f, 0.000000e+000f, -1.434118e-002f, 5.468288e-002f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -2.611537e-002f, 2.441742e-001f, 0.000000e+000f, -1.094468e-001f,
  0.000000e+000f, -6.448796e-003f, 6.029514e-002f, 0.000000e+000f, -1.094468e-001f, 0.000000e+000f, -2.530663e-002f, 2.366127e-001f, 0.000000e+000f, -1.094468e-001f,
  0.000000e+000f, -1.182262e-002f, 1.105394e-001f, 0.000000e+000f, -1.094468e-001f, 0.000000e+000f, -2.328601e-002f, 2.177202e-001f, 0.000000e+000f, -1.094468e-001f,
  0.000000e+000f, -1.575886e-002f, 1.473426e-001f, 0.000000e+000f, -1.094468e-001f, 0.000000e+000f, -2.082477e-002f, 1.947080e-001f, 0.000000e+000f, -1.094468e-001f,
  0.000000e+000f, -1.846636e-002f, 1.726573e-001f, 0.000000e+000f, -1.094468e-001f, 0.000000e+000f, -1.846636e-002f, 1.726573e-001f, 0.000000e+000f, -1.094468e-001f,
  -1.055719e-002f, 7.943456e-002f, 1.802027e-001f, -5.138079e-002f, 1.252827e-001f, 0.000000e+000f, -2.464329e-002f, 2.304105e-001f, 0.000000e+000f, -1.094468e-001f,
  -1.102515e-002f, 8.350398e-002f, 1.830633e-001f, -4.594986e-002f, 1.004719e-001f, 0.000000e+000f, -2.211664e-002f, 2.067868e-001f, 0.000000e+000f, -1.094468e-001f,
  -1.122827e-002f, 8.538512e-002f, 1.832315e-001f, -4.096386e-002f, 7.769370e-002f, 0.000000e+000f, -2.006261e-002f, 1.875820e-001f, 0.000000e+000f, -1.094468e-001f,
  -1.083230e-002f, 8.195816e-002f, 1.806575e-001f, -3.370267e-002f, 4.452148e-002f, 0.000000e+000f, -1.840086e-002f, 1.720449e-001f, 0.000000e+000f, -1.094468e-001f,
  -9.481161e-003f, 7.001935e-002f, 1.741674e-001f, -2.141188e-002f, -1.162811e-002f, 0.000000e+000f, -1.705707e-002f, 1.594807e-001f, 0.000000e+000f, -1.094468e-001f,
  -7.606387e-003f, 5.348653e-002f, 1.648551e-001f, -6.387663e-003f, -8.026521e-002f, 0.000000e+000f, -1.597033e-002f, 1.493199e-001f, 0.000000e+000f, -1.094468e-001f,
  -5.733926e-003f, 3.705847e-002f, 1.547654e-001f, 8.231182e-003f, -1.470504e-001f, 0.000000e+000f, -1.509313e-002f, 1.411182e-001f, 0.000000e+000f, -1.094468e-001f,
  -3.624871e-003f, 1.856584e-002f, 1.432963e-001f, 2.405594e-002f, -2.193447e-001f, 0.000000e+000f, -1.438915e-002f, 1.345361e-001f, 0.000000e+000f, -1.094468e-001f,
  -9.893309e-004f, -4.585808e-003f, 1.293631e-001f, 4.303893e-002f, -3.060671e-001f, 0.000000e+000f, -1.383094e-002f, 1.293169e-001f, 0.000000e+000f, -1.094468e-001f,
  1.348684e-003f, -2.507810e-002f, 1.165749e-001f, 5.985563e-002f, -3.828931e-001f, 0.000000e+000f, -1.339797e-002f, 1.252688e-001f, 0.000000e+000f, -1.094468e-001f,
  2.260821e-003f, -3.293461e-002f, 1.102936e-001f, 6.705329e-002f, -4.157750e-001f, 0.000000e+000f, -1.307514e-002f, 1.222503e-001f, 0.000000e+000f, -1.094468e-001f,
  2.308899e-003f, -3.318773e-002f, 1.084573e-001f, 6.822770e-002f, -4.211402e-001f, 0.000000e+000f, -1.285167e-002f, 1.201609e-001f, 0.000000e+000f, -1.094468e-001f,
  2.484950e-003f, -3.464482e-002f, 1.066905e-001f, 6.989551e-002f, -4.287595e-001f, 0.000000e+000f, -1.272034e-002f, 1.189330e-001f, 0.000000e+000f, -1.094468e-001f,
  2.874932e-003f, -3.806552e-002f, 1.045816e-001f, 7.263774e-002f, -4.412872e-001f, 0.000000e+000f, -1.267701e-002f, 1.185279e-001f, 0.000000e+000f, -1.094468e-001f,
  3.326126e-003f, -4.209847e-002f, 1.028459e-001f, 7.544481e-002f, -4.541111e-001f, 0.000000e+000f, -1.272034e-002f, 1.189330e-001f, 0.000000e+000f, -1.094468e-001f,
  3.674014e-003f, -4.528999e-002f, 1.022739e-001f, 7.721794e-002f, -4.622115e-001f, 0.000000e+000f, -1.285167e-002f, 1.201609e-001f, 0.000000e+000f, -1.094468e-001f,
  3.746628e-003f, -4.611791e-002f, 1.036669e-001f, 7.680998e-002f, -4.603478e-001f, 0.000000e+000f, -1.307514e-002f, 1.222503e-001f, 0.000000e+000f, -1.094468e-001f,
  3.385919e-003f, -4.317591e-002f, 1.076928e-001f, 7.317818e-002f, -4.437562e-001f, 0.000000e+000f, -1.339797e-002f, 1.252688e-001f, 0.000000e+000f, -1.094468e-001f,
  2.479946e-003f, -3.545472e-002f, 1.147004e-001f, 6.560389e-002f, -4.091535e-001f, 0.000000e+000f, -1.383094e-002f, 1.293169e-001f, 0.000000e+000f, -1.094468e-001f,
  9.851537e-004f, -2.253745e-002f, 1.245998e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -1.438915e-002f, 1.345361e-001f, 0.000000e+000f, -1.094468e-001f,
  9.851537e-004f, -2.253745e-002f, 1.245998e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -9.209056e-003f, 8.610310e-002f, 0.000000e+000f, -1.094468e-001f,
  9.851537e-004f, -2.253745e-002f, 1.245998e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -8.854862e-003f, 8.279144e-002f, 0.000000e+000f, -1.094468e-001f,
  9.851537e-004f, -2.253745e-002f, 1.245998e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -8.526904e-003f, 7.972509e-002f, 0.000000e+000f, -1.094468e-001f,
  9.851537e-004f, -2.253745e-002f, 1.245998e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -8.222372e-003f, 7.687776e-002f, 0.000000e+000f, -1.094468e-001f,
  9.851537e-004f, -2.253745e-002f, 1.245998e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -7.938841e-003f, 7.422681e-002f, 0.000000e+000f, -1.094468e-001f,
  9.851537e-004f, -2.253745e-002f, 1.245998e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -7.674213e-003f, 7.175258e-002f, 0.000000e+000f, -1.094468e-001f,
  9.851537e-004f, -2.253745e-002f, 1.245998e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -7.426658e-003f, 6.943798e-002f, 0.000000e+000f, -1.094468e-001f,
  -1.053104e-002f, 1.438884e-001f, -1.937403e-002f, 3.345015e-002f, -3.139570e-001f, 0.000000e+000f, -3.754815e-002f, 8.141975e-002f, 0.000000e+000f, -2.734412e-001f,
  -1.053104e-002f, 1.453206e-001f, -3.874807e-002f, 6.690030e-002f, -3.819570e-001f, 0.000000e+000f, -2.454689e-002f, 6.708905e-002f, 0.000000e+000f, -2.734412e-001f,
  -1.053104e-002f, 1.467528e-001f, -5.812210e-002f, 1.003505e-001f, -4.499570e-001f, 0.000000e+000f, -1.467862e-002f, 5.596954e-002f, 0.000000e+000f, -2.734412e-001f,
  -1.053104e-002f, 1.496172e-001f, -9.687017e-002f, 1.672508e-001f, -5.859570e-001f, 0.000000e+000f, -7.201640e-003f, 4.731282e-002f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -4.780419e-002f, 2.924703e-001f, 0.000000e+000f, -1.094468e-001f,
  0.000000e+000f, -1.180452e-002f, 7.222111e-002f, 0.000000e+000f, -1.094468e-001f, 0.000000e+000f, -4.632379e-002f, 2.834131e-001f, 0.000000e+000f, -1.094468e-001f,
  0.000000e+000f, -2.164130e-002f, 1.324034e-001f, 0.000000e+000f, -1.094468e-001f, 0.000000e+000f, -4.262505e-002f, 2.607838e-001f, 0.000000e+000f, -1.094468e-001f,
  0.000000e+000f, -2.884659e-002f, 1.764860e-001f, 0.000000e+000f, -1.094468e-001f, 0.000000e+000f, -3.811974e-002f, 2.332200e-001f, 0.000000e+000f, -1.094468e-001f,
  0.000000e+000f, -3.380267e-002f, 2.068077e-001f, 0.000000e+000f, -1.094468e-001f, 0.000000e+000f, -3.380267e-002f, 2.068077e-001f, 0.000000e+000f, -1.094468e-001f,
  -1.932494e-002f, 8.295179e-002f, 2.158456e-001f, -5.138079e-002f, 1.252827e-001f, 0.000000e+000f, -4.510955e-002f, 2.759842e-001f, 0.000000e+000f, -1.094468e-001f,
  -2.018155e-002f, 8.763254e-002f, 2.192720e-001f, -4.594986e-002f, 1.004719e-001f, 0.000000e+000f, -4.048452e-002f, 2.476879e-001f, 0.000000e+000f, -1.094468e-001f,
  -2.055336e-002f, 8.987437e-002f, 2.194735e-001f, -4.096386e-002f, 7.769370e-002f, 0.000000e+000f, -3.672461e-002f, 2.246844e-001f, 0.000000e+000f, -1.094468e-001f,
  -1.982853e-002f, 8.594376e-002f, 2.163904e-001f, -3.370267e-002f, 4.452148e-002f, 0.000000e+000f, -3.368279e-002f, 2.060743e-001f, 0.000000e+000f, -1.094468e-001f,
  -1.735527e-002f, 7.208273e-002f, 2.086166e-001f, -2.141188e-002f, -1.162811e-002f, 0.000000e+000f, -3.122297e-002f, 1.910249e-001f, 0.000000e+000f, -1.094468e-001f,
  -1.392349e-002f, 5.290998e-002f, 1.974624e-001f, -6.387663e-003f, -8.026521e-002f, 0.000000e+000f, -2.923369e-002f, 1.788543e-001f, 0.000000e+000f, -1.094468e-001f,
  -1.049595e-002f, 3.391535e-002f, 1.853770e-001f, 8.231182e-003f, -1.470504e-001f, 0.000000e+000f, -2.762798e-002f, 1.690304e-001f, 0.000000e+000f, -1.094468e-001f,
  -6.635328e-003f, 1.254111e-002f, 1.716393e-001f, 2.405594e-002f, -2.193447e-001f, 0.000000e+000f, -2.633934e-002f, 1.611464e-001f, 0.000000e+000f, -1.094468e-001f,
  -1.810970e-003f, -1.424691e-002f, 1.549503e-001f, 4.303893e-002f, -3.060671e-001f, 0.000000e+000f, -2.531754e-002f, 1.548949e-001f, 0.000000e+000f, -1.094468e-001f,
  2.468767e-003f, -3.792705e-002f, 1.396326e-001f, 5.985563e-002f, -3.828931e-001f, 0.000000e+000f, -2.452499e-002f, 1.500461e-001f, 0.000000e+000f, -1.094468e-001f,
  4.138433e-003f, -4.691247e-002f, 1.321089e-001f, 6.705329e-002f, -4.157750e-001f, 0.000000e+000f, -2.393405e-002f, 1.464306e-001f, 0.000000e+000f, -1.094468e-001f,
  4.226440e-003f, -4.709139e-002f, 1.299094e-001f, 6.822770e-002f, -4.211402e-001f, 0.000000e+000f, -2.352498e-002f, 1.439279e-001f, 0.000000e+000f, -1.094468e-001f,
  4.548701e-003f, -4.871713e-002f, 1.277932e-001f, 6.989551e-002f, -4.287595e-001f, 0.000000e+000f, -2.328458e-002f, 1.424571e-001f, 0.000000e+000f, -1.094468e-001f,
  5.262563e-003f, -5.267171e-002f, 1.252671e-001f, 7.263774e-002f, -4.412872e-001f, 0.000000e+000f, -2.320527e-002f, 1.419719e-001f, 0.000000e+000f, -1.094468e-001f,
  6.088475e-003f, -5.738489e-002f, 1.231881e-001f, 7.544481e-002f, -4.541111e-001f, 0.000000e+000f, -2.328458e-002f, 1.424571e-001f, 0.000000e+000f, -1.094468e-001f,
  6.725284e-003f, -6.116896e-002f, 1.225030e-001f, 7.721794e-002f, -4.622115e-001f, 0.000000e+000f, -2.352498e-002f, 1.439279e-001f, 0.000000e+000f, -1.094468e-001f,
  6.858204e-003f, -6.225490e-002f, 1.241715e-001f, 7.680998e-002f, -4.603478e-001f, 0.000000e+000f, -2.393405e-002f, 1.464306e-001f, 0.000000e+000f, -1.094468e-001f,
  6.197925e-003f, -5.900344e-002f, 1.289937e-001f, 7.317818e-002f, -4.437562e-001f, 0.000000e+000f, -2.452499e-002f, 1.500461e-001f, 0.000000e+000f, -1.094468e-001f,
  4.539541e-003f, -5.022925e-002f, 1.373874e-001f, 6.560389e-002f, -4.091535e-001f, 0.000000e+000f, -2.531754e-002f, 1.548949e-001f, 0.000000e+000f, -1.094468e-001f,
  1.803324e-003f, -3.542693e-002f, 1.492448e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -2.633934e-002f, 1.611464e-001f, 0.000000e+000f, -1.094468e-001f,
  1.803324e-003f, -3.542693e-002f, 1.492448e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -1.685718e-002f, 1.031337e-001f, 0.000000e+000f, -1.094468e-001f,
  1.803324e-003f, -3.542693e-002f, 1.492448e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -1.620883e-002f, 9.916703e-002f, 0.000000e+000f, -1.094468e-001f,
  1.803324e-003f, -3.542693e-002f, 1.492448e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -1.560850e-002f, 9.549418e-002f, 0.000000e+000f, -1.094468e-001f,
  1.803324e-003f, -3.542693e-002f, 1.492448e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -1.505105e-002f, 9.208367e-002f, 0.000000e+000f, -1.094468e-001f,
  1.803324e-003f, -3.542693e-002f, 1.492448e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -1.453205e-002f, 8.890837e-002f, 0.000000e+000f, -1.094468e-001f,
  1.803324e-003f, -3.542693e-002f, 1.492448e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -1.404765e-002f, 8.594476e-002f, 0.000000e+000f, -1.094468e-001f,
  1.803324e-003f, -3.542693e-002f, 1.492448e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -1.359450e-002f, 8.317235e-002f, 0.000000e+000f, -1.094468e-001f,
  -1.181602e-002f, 1.614454e-001f, -2.173802e-002f, 3.345015e-002f, -3.139570e-001f, 0.000000e+000f, -3.754815e-002f, 8.141975e-002f, 0.000000e+000f, -2.734412e-001f,
  -1.181602e-002f, 1.630524e-001f, -4.347605e-002f, 6.690030e-002f, -3.819570e-001f, 0.000000e+000f, -2.454689e-002f, 6.708905e-002f, 0.000000e+000f, -2.734412e-001f,
  -1.181602e-002f, 1.646594e-001f, -6.521407e-002f, 1.003505e-001f, -4.499570e-001f, 0.000000e+000f, -1.467862e-002f, 5.596954e-002f, 0.000000e+000f, -2.734412e-001f,
  -1.181602e-002f, 1.678733e-001f, -1.086901e-001f, 1.672508e-001f, -5.859570e-001f, 0.000000e+000f, -7.201640e-003f, 4.731282e-002f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, 0.000000e+000f, 3.514500e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 0.000000e+000f, 8.678527e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 3.405663e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 0.000000e+000f, 1.591040e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 3.133736e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 0.000000e+000f, 2.120763e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 2.802512e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 0.000000e+000f, 2.485127e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 2.485127e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 1.420744e-001f, 2.593732e-001f, 0.000000e+000f, 2.347295e-001f, 0.000000e+000f, 0.000000e+000f, 3.316393e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 1.483720e-001f, 2.634905e-001f, 0.000000e+000f, 2.099187e-001f, 0.000000e+000f, 0.000000e+000f, 2.976368e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 1.511055e-001f, 2.637326e-001f, 0.000000e+000f, 1.871405e-001f, 0.000000e+000f, 0.000000e+000f, 2.699944e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 1.457767e-001f, 2.600278e-001f, 0.000000e+000f, 1.539683e-001f, 0.000000e+000f, 0.000000e+000f, 2.476313e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 1.275936e-001f, 2.506863e-001f, 0.000000e+000f, 9.781868e-002f, 0.000000e+000f, 0.000000e+000f, 2.295471e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 1.023637e-001f, 2.372828e-001f, 0.000000e+000f, 2.918159e-002f, 0.000000e+000f, 0.000000e+000f, 2.149222e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 7.716484e-002f, 2.227602e-001f, 0.000000e+000f, -3.760358e-002f, 0.000000e+000f, 0.000000e+000f, 2.031172e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 4.878204e-002f, 2.062522e-001f, 0.000000e+000f, -1.098979e-001f, 0.000000e+000f, 0.000000e+000f, 1.936433e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 1.331401e-002f, 1.861977e-001f, 0.000000e+000f, -1.966203e-001f, 0.000000e+000f, 0.000000e+000f, 1.861312e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.815004e-002f, 1.677910e-001f, 0.000000e+000f, -2.734463e-001f, 0.000000e+000f, 0.000000e+000f, 1.803045e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -3.042520e-002f, 1.587501e-001f, 0.000000e+000f, -3.063283e-001f, 0.000000e+000f, 0.000000e+000f, 1.759599e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -3.107222e-002f, 1.561070e-001f, 0.000000e+000f, -3.116934e-001f, 0.000000e+000f, 0.000000e+000f, 1.729525e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -3.344144e-002f, 1.535641e-001f, 0.000000e+000f, -3.193127e-001f, 0.000000e+000f, 0.000000e+000f, 1.711851e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -3.868966e-002f, 1.505286e-001f, 0.000000e+000f, -3.318404e-001f, 0.000000e+000f, 0.000000e+000f, 1.706020e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -4.476165e-002f, 1.480303e-001f, 0.000000e+000f, -3.446643e-001f, 0.000000e+000f, 0.000000e+000f, 1.711851e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -4.944339e-002f, 1.472070e-001f, 0.000000e+000f, -3.527647e-001f, 0.000000e+000f, 0.000000e+000f, 1.729525e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -5.042060e-002f, 1.492121e-001f, 0.000000e+000f, -3.509010e-001f, 0.000000e+000f, 0.000000e+000f, 1.759599e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -4.556631e-002f, 1.550066e-001f, 0.000000e+000f, -3.343094e-001f, 0.000000e+000f, 0.000000e+000f, 1.803045e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -3.337410e-002f, 1.650930e-001f, 0.000000e+000f, -2.997067e-001f, 0.000000e+000f, 0.000000e+000f, 1.861312e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.325780e-002f, 1.793417e-001f, 0.000000e+000f, -2.459570e-001f, 0.000000e+000f, 0.000000e+000f, 1.936433e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.325780e-002f, 1.793417e-001f, 0.000000e+000f, -2.459570e-001f, 0.000000e+000f, 0.000000e+000f, 1.239317e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.325780e-002f, 1.793417e-001f, 0.000000e+000f, -2.459570e-001f, 0.000000e+000f, 0.000000e+000f, 1.191651e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.325780e-002f, 1.793417e-001f, 0.000000e+000f, -2.459570e-001f, 0.000000e+000f, 0.000000e+000f, 1.147516e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.325780e-002f, 1.793417e-001f, 0.000000e+000f, -2.459570e-001f, 0.000000e+000f, 0.000000e+000f, 1.106533e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.325780e-002f, 1.793417e-001f, 0.000000e+000f, -2.459570e-001f, 0.000000e+000f, 0.000000e+000f, 1.068377e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.325780e-002f, 1.793417e-001f, 0.000000e+000f, -2.459570e-001f, 0.000000e+000f, 0.000000e+000f, 1.032764e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.325780e-002f, 1.793417e-001f, 0.000000e+000f, -2.459570e-001f, 0.000000e+000f, 0.000000e+000f, 9.994494e-002f, 0.000000e+000f, 0.000000e+000f,
  -1.325780e-002f, 1.811447e-001f, -2.439046e-002f, 3.345015e-002f, -3.139570e-001f, -4.107279e-002f, 8.494440e-002f, 0.000000e+000f, 0.000000e+000f, -2.734412e-001f,
  -1.325780e-002f, 1.829478e-001f, -4.878093e-002f, 6.690030e-002f, -3.819570e-001f, -3.013753e-002f, 7.267969e-002f, 0.000000e+000f, 0.000000e+000f, -2.734412e-001f,
  -1.325780e-002f, 1.847508e-001f, -7.317139e-002f, 1.003505e-001f, -4.499570e-001f, -2.133729e-002f, 6.262821e-002f, 0.000000e+000f, 0.000000e+000f, -2.734412e-001f,
  -1.325780e-002f, 1.883570e-001f, -1.219523e-001f, 1.672508e-001f, -5.859570e-001f, -1.425923e-002f, 5.437041e-002f, 0.000000e+000f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -8.186768e-002f, 2.999265e-001f, 0.000000e+000f, -1.094468e-001f,
  0.000000e+000f, -2.021599e-002f, 7.406233e-002f, 0.000000e+000f, -1.094468e-001f, 0.000000e+000f, -7.933240e-002f, 2.906384e-001f, 0.000000e+000f, -1.094468e-001f,
  0.000000e+000f, -3.706209e-002f, 1.357789e-001f, 0.000000e+000f, -1.094468e-001f, 0.000000e+000f, -7.299807e-002f, 2.674323e-001f, 0.000000e+000f, -1.094468e-001f,
  0.000000e+000f, -4.940160e-002f, 1.809854e-001f, 0.000000e+000f, -1.094468e-001f, 0.000000e+000f, -6.528245e-002f, 2.391657e-001f, 0.000000e+000f, -1.094468e-001f,
  0.000000e+000f, -5.788919e-002f, 2.120801e-001f, 0.000000e+000f, -1.094468e-001f, 0.000000e+000f, -5.788919e-002f, 2.120801e-001f, 0.000000e+000f, -1.094468e-001f,
  -3.309518e-002f, 6.082685e-002f, 2.213484e-001f, -5.138079e-002f, 1.252827e-001f, 0.000000e+000f, -7.725293e-002f, 2.830202e-001f, 0.000000e+000f, -1.094468e-001f,
  -3.456216e-002f, 6.524215e-002f, 2.248621e-001f, -4.594986e-002f, 1.004719e-001f, 0.000000e+000f, -6.933229e-002f, 2.540025e-001f, 0.000000e+000f, -1.094468e-001f,
  -3.519891e-002f, 6.751851e-002f, 2.250687e-001f, -4.096386e-002f, 7.769370e-002f, 0.000000e+000f, -6.289320e-002f, 2.304126e-001f, 0.000000e+000f, -1.094468e-001f,
  -3.395760e-002f, 6.383393e-002f, 2.219070e-001f, -3.370267e-002f, 4.452148e-002f, 0.000000e+000f, -5.768389e-002f, 2.113280e-001f, 0.000000e+000f, -1.094468e-001f,
  -2.972198e-002f, 5.049253e-002f, 2.139351e-001f, -2.141188e-002f, -1.162811e-002f, 0.000000e+000f, -5.347129e-002f, 1.958949e-001f, 0.000000e+000f, -1.094468e-001f,
  -2.384485e-002f, 3.208362e-002f, 2.024965e-001f, -6.387663e-003f, -8.026521e-002f, 0.000000e+000f, -5.006454e-002f, 1.834141e-001f, 0.000000e+000f, -1.094468e-001f,
  -1.797498e-002f, 1.396193e-002f, 1.901030e-001f, 8.231182e-003f, -1.470504e-001f, 0.000000e+000f, -4.731465e-002f, 1.733397e-001f, 0.000000e+000f, -1.094468e-001f,
  -1.136341e-002f, -6.414461e-003f, 1.760151e-001f, 2.405594e-002f, -2.193447e-001f, 0.000000e+000f, -4.510778e-002f, 1.652547e-001f, 0.000000e+000f, -1.094468e-001f,
  -3.101401e-003f, -3.201122e-002f, 1.589006e-001f, 4.303893e-002f, -3.060671e-001f, 0.000000e+000f, -4.335787e-002f, 1.588439e-001f, 0.000000e+000f, -1.094468e-001f,
  4.227918e-003f, -5.457488e-002f, 1.431925e-001f, 5.985563e-002f, -3.828931e-001f, 0.000000e+000f, -4.200059e-002f, 1.538714e-001f, 0.000000e+000f, -1.094468e-001f,
  7.087325e-003f, -6.294445e-002f, 1.354769e-001f, 6.705329e-002f, -4.157750e-001f, 0.000000e+000f, -4.098857e-002f, 1.501638e-001f, 0.000000e+000f, -1.094468e-001f,
  7.238043e-003f, -6.288092e-002f, 1.332213e-001f, 6.822770e-002f, -4.211402e-001f, 0.000000e+000f, -4.028801e-002f, 1.475972e-001f, 0.000000e+000f, -1.094468e-001f,
  7.789936e-003f, -6.431046e-002f, 1.310512e-001f, 6.989551e-002f, -4.287595e-001f, 0.000000e+000f, -3.987631e-002f, 1.460889e-001f, 0.000000e+000f, -1.094468e-001f,
  9.012470e-003f, -6.808217e-002f, 1.284607e-001f, 7.263774e-002f, -4.412872e-001f, 0.000000e+000f, -3.974048e-002f, 1.455914e-001f, 0.000000e+000f, -1.094468e-001f,
  1.042690e-002f, -7.268204e-002f, 1.263287e-001f, 7.544481e-002f, -4.541111e-001f, 0.000000e+000f, -3.987631e-002f, 1.460889e-001f, 0.000000e+000f, -1.094468e-001f,
  1.151747e-002f, -7.648564e-002f, 1.256261e-001f, 7.721794e-002f, -4.622115e-001f, 0.000000e+000f, -4.028801e-002f, 1.475972e-001f, 0.000000e+000f, -1.094468e-001f,
  1.174510e-002f, -7.778665e-002f, 1.273372e-001f, 7.680998e-002f, -4.603478e-001f, 0.000000e+000f, -4.098857e-002f, 1.501638e-001f, 0.000000e+000f, -1.094468e-001f,
  1.061434e-002f, -7.499382e-002f, 1.322823e-001f, 7.317818e-002f, -4.437562e-001f, 0.000000e+000f, -4.200059e-002f, 1.538714e-001f, 0.000000e+000f, -1.094468e-001f,
  7.774249e-003f, -6.693857e-002f, 1.408900e-001f, 6.560389e-002f, -4.091535e-001f, 0.000000e+000f, -4.335787e-002f, 1.588439e-001f, 0.000000e+000f, -1.094468e-001f,
  3.088305e-003f, -5.309048e-002f, 1.530497e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -4.510778e-002f, 1.652547e-001f, 0.000000e+000f, -1.094468e-001f,
  3.088305e-003f, -5.309048e-002f, 1.530497e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -2.886898e-002f, 1.057630e-001f, 0.000000e+000f, -1.094468e-001f,
  3.088305e-003f, -5.309048e-002f, 1.530497e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -2.775863e-002f, 1.016952e-001f, 0.000000e+000f, -1.094468e-001f,
  3.088305e-003f, -5.309048e-002f, 1.530497e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -2.673053e-002f, 9.792872e-002f, 0.000000e+000f, -1.094468e-001f,
  3.088305e-003f, -5.309048e-002f, 1.530497e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -2.577587e-002f, 9.443127e-002f, 0.000000e+000f, -1.094468e-001f,
  3.088305e-003f, -5.309048e-002f, 1.530497e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -2.488705e-002f, 9.117501e-002f, 0.000000e+000f, -1.094468e-001f,
  3.088305e-003f, -5.309048e-002f, 1.530497e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -2.405748e-002f, 8.813585e-002f, 0.000000e+000f, -1.094468e-001f,
  3.088305e-003f, -5.309048e-002f, 1.530497e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -2.328143e-002f, 8.529276e-002f, 0.000000e+000f, -1.094468e-001f,
  -8.353929e-003f, 1.141419e-001f, -1.536878e-002f, 3.345015e-002f, -3.139570e-001f, 0.000000e+000f, -3.754815e-002f, 8.141975e-002f, 0.000000e+000f, -2.734412e-001f,
  -8.353929e-003f, 1.152780e-001f, -3.073757e-002f, 6.690030e-002f, -3.819570e-001f, 0.000000e+000f, -2.454689e-002f, 6.708905e-002f, 0.000000e+000f, -2.734412e-001f,
  -8.353929e-003f, 1.164142e-001f, -4.610635e-002f, 1.003505e-001f, -4.499570e-001f, 0.000000e+000f, -1.467862e-002f, 5.596954e-002f, 0.000000e+000f, -2.734412e-001f,
  -8.353929e-003f, 1.186864e-001f, -7.684392e-002f, 1.672508e-001f, -5.859570e-001f, 0.000000e+000f, -7.201640e-003f, 4.731282e-002f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -8.353207e-002f, 2.567424e-001f, 0.000000e+000f, -1.094468e-001f,
  0.000000e+000f, -2.062698e-002f, 6.339865e-002f, 0.000000e+000f, -1.094468e-001f, 0.000000e+000f, -8.094525e-002f, 2.487916e-001f, 0.000000e+000f, -1.094468e-001f,
  0.000000e+000f, -3.781557e-002f, 1.162291e-001f, 0.000000e+000f, -1.094468e-001f, 0.000000e+000f, -7.448214e-002f, 2.289267e-001f, 0.000000e+000f, -1.094468e-001f,
  0.000000e+000f, -5.040595e-002f, 1.549266e-001f, 0.000000e+000f, -1.094468e-001f, 0.000000e+000f, -6.660966e-002f, 2.047300e-001f, 0.000000e+000f, -1.094468e-001f,
  0.000000e+000f, -5.906609e-002f, 1.815443e-001f, 0.000000e+000f, -1.094468e-001f, 0.000000e+000f, -5.906609e-002f, 1.815443e-001f, 0.000000e+000f, -1.094468e-001f,
  -3.376801e-002f, 4.214123e-002f, 1.894782e-001f, -5.138079e-002f, 1.252827e-001f, 0.000000e+000f, -7.882351e-002f, 2.422702e-001f, 0.000000e+000f, -1.094468e-001f,
  -3.526482e-002f, 4.576321e-002f, 1.924859e-001f, -4.594986e-002f, 1.004719e-001f, 0.000000e+000f, -7.074183e-002f, 2.174306e-001f, 0.000000e+000f, -1.094468e-001f,
  -3.591452e-002f, 4.770255e-002f, 1.926628e-001f, -4.096386e-002f, 7.769370e-002f, 0.000000e+000f, -6.417184e-002f, 1.972372e-001f, 0.000000e+000f, -1.094468e-001f,
  -3.464797e-002f, 4.469029e-002f, 1.899563e-001f, -3.370267e-002f, 4.452148e-002f, 0.000000e+000f, -5.885662e-002f, 1.809004e-001f, 0.000000e+000f, -1.094468e-001f,
  -3.032624e-002f, 3.362736e-002f, 1.831322e-001f, -2.141188e-002f, -1.162811e-002f, 0.000000e+000f, -5.455837e-002f, 1.676895e-001f, 0.000000e+000f, -1.094468e-001f,
  -2.432963e-002f, 1.838204e-002f, 1.733406e-001f, -6.387663e-003f, -8.026521e-002f, 0.000000e+000f, -5.108236e-002f, 1.570057e-001f, 0.000000e+000f, -1.094468e-001f,
  -1.834042e-002f, 3.425415e-003f, 1.627315e-001f, 8.231182e-003f, -1.470504e-001f, 0.000000e+000f, -4.827657e-002f, 1.483818e-001f, 0.000000e+000f, -1.094468e-001f,
  -1.159444e-002f, -1.338529e-002f, 1.506720e-001f, 2.405594e-002f, -2.193447e-001f, 0.000000e+000f, -4.602483e-002f, 1.414609e-001f, 0.000000e+000f, -1.094468e-001f,
  -3.164453e-003f, -3.452897e-002f, 1.360217e-001f, 4.303893e-002f, -3.060671e-001f, 0.000000e+000f, -4.423935e-002f, 1.359731e-001f, 0.000000e+000f, -1.094468e-001f,
  4.313873e-003f, -5.313933e-002f, 1.225753e-001f, 5.985563e-002f, -3.828931e-001f, 0.000000e+000f, -4.285448e-002f, 1.317166e-001f, 0.000000e+000f, -1.094468e-001f,
  7.231413e-003f, -5.995778e-002f, 1.159706e-001f, 6.705329e-002f, -4.157750e-001f, 0.000000e+000f, -4.182188e-002f, 1.285428e-001f, 0.000000e+000f, -1.094468e-001f,
  7.385195e-003f, -5.980224e-002f, 1.140398e-001f, 6.822770e-002f, -4.211402e-001f, 0.000000e+000f, -4.110707e-002f, 1.263458e-001f, 0.000000e+000f, -1.094468e-001f,
  7.948308e-003f, -6.092861e-002f, 1.121821e-001f, 6.989551e-002f, -4.287595e-001f, 0.000000e+000f, -4.068700e-002f, 1.250547e-001f, 0.000000e+000f, -1.094468e-001f,
  9.195696e-003f, -6.404108e-002f, 1.099646e-001f, 7.263774e-002f, -4.412872e-001f, 0.000000e+000f, -4.054842e-002f, 1.246288e-001f, 0.000000e+000f, -1.094468e-001f,
  1.063888e-002f, -6.788303e-002f, 1.081396e-001f, 7.544481e-002f, -4.541111e-001f, 0.000000e+000f, -4.068700e-002f, 1.250547e-001f, 0.000000e+000f, -1.094468e-001f,
  1.175162e-002f, -7.110747e-002f, 1.075381e-001f, 7.721794e-002f, -4.622115e-001f, 0.000000e+000f, -4.110707e-002f, 1.263458e-001f, 0.000000e+000f, -1.094468e-001f,
  1.198389e-002f, -7.229790e-002f, 1.090029e-001f, 7.680998e-002f, -4.603478e-001f, 0.000000e+000f, -4.182188e-002f, 1.285428e-001f, 0.000000e+000f, -1.094468e-001f,
  1.083013e-002f, -7.012898e-002f, 1.132359e-001f, 7.317818e-002f, -4.437562e-001f, 0.000000e+000f, -4.285448e-002f, 1.317166e-001f, 0.000000e+000f, -1.094468e-001f,
  7.932302e-003f, -6.361960e-002f, 1.206043e-001f, 6.560389e-002f, -4.091535e-001f, 0.000000e+000f, -4.423935e-002f, 1.359731e-001f, 0.000000e+000f, -1.094468e-001f,
  3.151092e-003f, -5.231076e-002f, 1.310132e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -4.602483e-002f, 1.414609e-001f, 0.000000e+000f, -1.094468e-001f,
  3.151092e-003f, -5.231076e-002f, 1.310132e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -2.945589e-002f, 9.053500e-002f, 0.000000e+000f, -1.094468e-001f,
  3.151092e-003f, -5.231076e-002f, 1.310132e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -2.832297e-002f, 8.705288e-002f, 0.000000e+000f, -1.094468e-001f,
  3.151092e-003f, -5.231076e-002f, 1.310132e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -2.727397e-002f, 8.382870e-002f, 0.000000e+000f, -1.094468e-001f,
  3.151092e-003f, -5.231076e-002f, 1.310132e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -2.629990e-002f, 8.083482e-002f, 0.000000e+000f, -1.094468e-001f,
  3.151092e-003f, -5.231076e-002f, 1.310132e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -2.539301e-002f, 7.804741e-002f, 0.000000e+000f, -1.094468e-001f,
  3.151092e-003f, -5.231076e-002f, 1.310132e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -2.454658e-002f, 7.544583e-002f, 0.000000e+000f, -1.094468e-001f,
  3.151092e-003f, -5.231076e-002f, 1.310132e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -2.375475e-002f, 7.301210e-002f, 0.000000e+000f, -1.094468e-001f,
  -7.445447e-003f, 1.017291e-001f, -1.369744e-002f, 3.345015e-002f, -3.139570e-001f, 0.000000e+000f, -3.754815e-002f, 8.141975e-002f, 0.000000e+000f, -2.734412e-001f,
  -7.445447e-003f, 1.027417e-001f, -2.739489e-002f, 6.690030e-002f, -3.819570e-001f, 0.000000e+000f, -2.454689e-002f, 6.708905e-002f, 0.000000e+000f, -2.734412e-001f,
  -7.445447e-003f, 1.037542e-001f, -4.109233e-002f, 1.003505e-001f, -4.499570e-001f, 0.000000e+000f, -1.467862e-002f, 5.596954e-002f, 0.000000e+000f, -2.734412e-001f,
  -7.445447e-003f, 1.057794e-001f, -6.848721e-002f, 1.672508e-001f, -5.859570e-001f, 0.000000e+000f, -7.201640e-003f, 4.731282e-002f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -8.343297e-002f, 2.378068e-001f, 0.000000e+000f, -1.094468e-001f,
  0.000000e+000f, -2.438542e-002f, 6.950513e-002f, 0.000000e+000f, -1.094468e-001f, 0.000000e+000f, -7.978980e-002f, 2.274228e-001f, 0.000000e+000f, -1.094468e-001f,
  0.000000e+000f, -4.333896e-002f, 1.235279e-001f, 0.000000e+000f, -1.094468e-001f, 0.000000e+000f, -7.129372e-002f, 2.032066e-001f, 0.000000e+000f, -1.094468e-001f,
  0.000000e+000f, -5.593350e-002f, 1.594258e-001f, 0.000000e+000f, -1.094468e-001f, 0.000000e+000f, -6.190722e-002f, 1.764525e-001f, 0.000000e+000f, -1.094468e-001f,
  -3.328317e-002f, 3.365165e-002f, 1.744782e-001f, -5.251597e-002f, 1.304687e-001f, 0.000000e+000f, -8.054502e-002f, 2.295754e-001f, 0.000000e+000f, -1.094468e-001f,
  -3.522299e-002f, 3.784346e-002f, 1.782895e-001f, -4.594986e-002f, 1.004719e-001f, 0.000000e+000f, -7.065791e-002f, 2.013944e-001f, 0.000000e+000f, -1.094468e-001f,
  -3.582395e-002f, 3.958678e-002f, 1.782028e-001f, -3.981251e-002f, 7.243387e-002f, 0.000000e+000f, -6.294181e-002f, 1.794014e-001f, 0.000000e+000f, -1.094468e-001f,
  -3.321595e-002f, 3.367165e-002f, 1.738750e-001f, -2.935859e-002f, 2.467583e-002f, 0.000000e+000f, -5.695955e-002f, 1.623503e-001f, 0.000000e+000f, -1.094468e-001f,
  -2.675582e-002f, 1.859575e-002f, 1.643629e-001f, -1.246238e-002f, -5.251329e-002f, 0.000000e+000f, -5.232257e-002f, 1.491337e-001f, 0.000000e+000f, -1.094468e-001f,
  -1.952746e-002f, 2.066748e-003f, 1.527515e-001f, 5.310047e-003f, -1.337054e-001f, 0.000000e+000f, -4.873226e-002f, 1.389003e-001f, 0.000000e+000f, -1.094468e-001f,
  -1.158068e-002f, -1.595543e-002f, 1.395595e-001f, 2.405594e-002f, -2.193447e-001f, 0.000000e+000f, -4.597023e-002f, 1.310277e-001f, 0.000000e+000f, -1.094468e-001f,
  -1.455761e-003f, -3.908258e-002f, 1.232227e-001f, 4.685218e-002f, -3.234877e-001f, 0.000000e+000f, -4.387998e-002f, 1.250700e-001f, 0.000000e+000f, -1.094468e-001f,
  6.035077e-003f, -5.589134e-002f, 1.102763e-001f, 6.392492e-002f, -4.014833e-001f, 0.000000e+000f, -4.235107e-002f, 1.207122e-001f, 0.000000e+000f, -1.094468e-001f,
  7.401177e-003f, -5.833688e-002f, 1.061485e-001f, 6.797851e-002f, -4.200018e-001f, 0.000000e+000f, -4.130751e-002f, 1.177377e-001f, 0.000000e+000f, -1.094468e-001f,
  7.756538e-003f, -5.870124e-002f, 1.043000e-001f, 6.944492e-002f, -4.267010e-001f, 0.000000e+000f, -4.069986e-002f, 1.160058e-001f, 0.000000e+000f, -1.094468e-001f,
  9.184787e-003f, -6.191410e-002f, 1.018544e-001f, 7.263774e-002f, -4.412872e-001f, 0.000000e+000f, -4.050031e-002f, 1.154370e-001f, 0.000000e+000f, -1.094468e-001f,
  1.089245e-002f, -6.610849e-002f, 9.993636e-002f, 7.591880e-002f, -4.562765e-001f, 0.000000e+000f, -4.069986e-002f, 1.160058e-001f, 0.000000e+000f, -1.094468e-001f,
  1.196633e-002f, -6.914909e-002f, 9.987862e-002f, 7.737949e-002f, -4.629496e-001f, 0.000000e+000f, -4.130751e-002f, 1.177377e-001f, 0.000000e+000f, -1.094468e-001f,
  1.147174e-002f, -6.882665e-002f, 1.029777e-001f, 7.507350e-002f, -4.524148e-001f, 0.000000e+000f, -4.235107e-002f, 1.207122e-001f, 0.000000e+000f, -1.094468e-001f,
  8.651056e-003f, -6.328922e-002f, 1.101099e-001f, 6.745300e-002f, -4.176011e-001f, 0.000000e+000f, -4.387998e-002f, 1.250700e-001f, 0.000000e+000f, -1.094468e-001f,
  3.147353e-003f, -5.154589e-002f, 1.213506e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -4.597023e-002f, 1.310277e-001f, 0.000000e+000f, -1.094468e-001f,
  3.147353e-003f, -5.154589e-002f, 1.213506e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -2.918745e-002f, 8.319222e-002f, 0.000000e+000f, -1.094468e-001f,
  3.147353e-003f, -5.154589e-002f, 1.213506e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -2.786075e-002f, 7.941076e-002f, 0.000000e+000f, -1.094468e-001f,
  3.147353e-003f, -5.154589e-002f, 1.213506e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -2.664941e-002f, 7.595811e-002f, 0.000000e+000f, -1.094468e-001f,
  3.147353e-003f, -5.154589e-002f, 1.213506e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -2.553902e-002f, 7.279319e-002f, 0.000000e+000f, -1.094468e-001f,
  3.147353e-003f, -5.154589e-002f, 1.213506e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -2.451746e-002f, 6.988147e-002f, 0.000000e+000f, -1.094468e-001f,
  3.147353e-003f, -5.154589e-002f, 1.213506e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -2.357448e-002f, 6.719372e-002f, 0.000000e+000f, -1.094468e-001f,
  -7.028955e-003f, 9.603844e-002f, -1.293122e-002f, 3.345015e-002f, -3.139570e-001f, 0.000000e+000f, -3.708459e-002f, 8.041457e-002f, 0.000000e+000f, -2.734412e-001f,
  -7.028955e-003f, 9.699437e-002f, -2.586244e-002f, 6.690030e-002f, -3.819570e-001f, 0.000000e+000f, -2.410855e-002f, 6.589103e-002f, 0.000000e+000f, -2.734412e-001f,
  -7.028955e-003f, 9.986219e-002f, -6.465610e-002f, 1.672508e-001f, -5.859570e-001f, 0.000000e+000f, -1.434118e-002f, 5.468288e-002f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -8.284204e-002f, 2.204279e-001f, 0.000000e+000f, -1.094468e-001f,
  0.000000e+000f, -2.421271e-002f, 6.442569e-002f, 0.000000e+000f, -1.094468e-001f, 0.000000e+000f, -7.922467e-002f, 2.108027e-001f, 0.000000e+000f, -1.094468e-001f,
  0.000000e+000f, -4.552257e-002f, 1.211274e-001f, 0.000000e+000f, -1.094468e-001f, 0.000000e+000f, -6.921344e-002f, 1.841646e-001f, 0.000000e+000f, -1.094468e-001f,
  0.000000e+000f, -5.711723e-002f, 1.519788e-001f, 0.000000e+000f, -1.094468e-001f, 0.000000e+000f, -6.000355e-002f, 1.596587e-001f, 0.000000e+000f, -1.094468e-001f,
  -3.387082e-002f, 2.869183e-002f, 1.634606e-001f, -5.025153e-002f, 1.201238e-001f, 0.000000e+000f, -7.643833e-002f, 2.033887e-001f, 0.000000e+000f, -1.094468e-001f,
  -3.536063e-002f, 3.186385e-002f, 1.655682e-001f, -4.399872e-002f, 9.155827e-002f, 0.000000e+000f, -6.738537e-002f, 1.793004e-001f, 0.000000e+000f, -1.094468e-001f,
  -3.484512e-002f, 3.115188e-002f, 1.638128e-001f, -3.552046e-002f, 5.282594e-002f, 0.000000e+000f, -5.933703e-002f, 1.578852e-001f, 0.000000e+000f, -1.094468e-001f,
  -3.007573e-002f, 2.093561e-002f, 1.572293e-001f, -2.141188e-002f, -1.162811e-002f, 0.000000e+000f, -5.410769e-002f, 1.439709e-001f, 0.000000e+000f, -1.094468e-001f,
  -2.293187e-002f, 5.757890e-003f, 1.470363e-001f, -3.417701e-003f, -9.383327e-002f, 0.000000e+000f, -5.005484e-002f, 1.331870e-001f, 0.000000e+000f, -1.094468e-001f,
  -1.436610e-002f, -1.204363e-002f, 1.337575e-001f, 1.737058e-002f, -1.888031e-001f, 0.000000e+000f, -4.647808e-002f, 1.236699e-001f, 0.000000e+000f, -1.094468e-001f,
  -4.862471e-003f, -3.192720e-002f, 1.193787e-001f, 3.915291e-002f, -2.883141e-001f, 0.000000e+000f, -4.419446e-002f, 1.175936e-001f, 0.000000e+000f, -1.094468e-001f,
  5.243920e-003f, -5.288279e-002f, 1.035849e-001f, 6.212075e-002f, -3.932411e-001f, 0.000000e+000f, -4.226898e-002f, 1.124702e-001f, 0.000000e+000f, -1.094468e-001f,
  7.350070e-003f, -5.664434e-002f, 9.868218e-002f, 6.780964e-002f, -4.192304e-001f, 0.000000e+000f, -4.115653e-002f, 1.095102e-001f, 0.000000e+000f, -1.094468e-001f,
  7.701600e-003f, -5.682639e-002f, 9.667776e-002f, 6.944492e-002f, -4.267010e-001f, 0.000000e+000f, -4.041160e-002f, 1.075281e-001f, 0.000000e+000f, -1.094468e-001f,
  9.119734e-003f, -5.974783e-002f, 9.441085e-002f, 7.263774e-002f, -4.412872e-001f, 0.000000e+000f, -4.021346e-002f, 1.070008e-001f, 0.000000e+000f, -1.094468e-001f,
  1.081530e-002f, -6.359128e-002f, 9.263301e-002f, 7.591880e-002f, -4.562765e-001f, 0.000000e+000f, -4.041160e-002f, 1.075281e-001f, 0.000000e+000f, -1.094468e-001f,
  1.193176e-002f, -6.663450e-002f, 9.282601e-002f, 7.730646e-002f, -4.626159e-001f, 0.000000e+000f, -4.115653e-002f, 1.095102e-001f, 0.000000e+000f, -1.094468e-001f,
  1.109943e-002f, -6.571865e-002f, 9.628196e-002f, 7.420330e-002f, -4.484394e-001f, 0.000000e+000f, -4.226898e-002f, 1.124702e-001f, 0.000000e+000f, -1.094468e-001f,
  7.068426e-003f, -5.831960e-002f, 1.051338e-001f, 6.358578e-002f, -3.999340e-001f, 0.000000e+000f, -4.419446e-002f, 1.175936e-001f, 0.000000e+000f, -1.094468e-001f,
  3.125062e-003f, -5.058875e-002f, 1.124823e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -2.993091e-002f, 7.964081e-002f, 0.000000e+000f, -1.094468e-001f,
  3.125062e-003f, -5.058875e-002f, 1.124823e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -2.830675e-002f, 7.531921e-002f, 0.000000e+000f, -1.094468e-001f,
  3.125062e-003f, -5.058875e-002f, 1.124823e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -2.704867e-002f, 7.197169e-002f, 0.000000e+000f, -1.094468e-001f,
  3.125062e-003f, -5.058875e-002f, 1.124823e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -2.589767e-002f, 6.890907e-002f, 0.000000e+000f, -1.094468e-001f,
  3.125062e-003f, -5.058875e-002f, 1.124823e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -2.467278e-002f, 6.564985e-002f, 0.000000e+000f, -1.094468e-001f,
  3.125062e-003f, -5.058875e-002f, 1.124823e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -2.371150e-002f, 6.309207e-002f, 0.000000e+000f, -1.094468e-001f,
  -6.635761e-003f, 9.066613e-002f, -1.220786e-002f, 3.345015e-002f, -3.139570e-001f, 0.000000e+000f, -3.731493e-002f, 8.091404e-002f, 0.000000e+000f, -2.734412e-001f,
  -6.635761e-003f, 9.156859e-002f, -2.441572e-002f, 6.690030e-002f, -3.819570e-001f, 0.000000e+000f, -2.425291e-002f, 6.628559e-002f, 0.000000e+000f, -2.734412e-001f,
  -6.635761e-003f, 9.427598e-002f, -6.103929e-002f, 1.672508e-001f, -5.859570e-001f, 0.000000e+000f, -1.434118e-002f, 5.468288e-002f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -8.238806e-002f, 2.122775e-001f, 0.000000e+000f, -1.094468e-001f,
  0.000000e+000f, -3.105252e-002f, 8.000857e-002f, 0.000000e+000f, -1.094468e-001f, 0.000000e+000f, -7.631208e-002f, 1.966224e-001f, 0.000000e+000f, -1.094468e-001f,
  0.000000e+000f, -5.169824e-002f, 1.332034e-001f, 0.000000e+000f, -1.094468e-001f, 0.000000e+000f, -6.414893e-002f, 1.652833e-001f, 0.000000e+000f, -1.094468e-001f,
  -3.286634e-002f, 2.423409e-002f, 1.557473e-001f, -5.251597e-002f, 1.304687e-001f, 0.000000e+000f, -7.953628e-002f, 2.049297e-001f, 0.000000e+000f, -1.094468e-001f,
  -3.516685e-002f, 2.872589e-002f, 1.594463e-001f, -4.399872e-002f, 9.155827e-002f, 0.000000e+000f, -6.701609e-002f, 1.726707e-001f, 0.000000e+000f, -1.094468e-001f,
  -3.417345e-002f, 2.709326e-002f, 1.570580e-001f, -3.370267e-002f, 4.452148e-002f, 0.000000e+000f, -5.805055e-002f, 1.495705e-001f, 0.000000e+000f, -1.094468e-001f,
  -2.642073e-002f, 1.113104e-002f, 1.467180e-001f, -1.246238e-002f, -5.251329e-002f, 0.000000e+000f, -5.166728e-002f, 1.331237e-001f, 0.000000e+000f, -1.094468e-001f,
  -1.686706e-002f, -8.043214e-003f, 1.326982e-001f, 1.119761e-002f, -1.606023e-001f, 0.000000e+000f, -4.713064e-002f, 1.214347e-001f, 0.000000e+000f, -1.094468e-001f,
  -4.835824e-003f, -3.215973e-002f, 1.149647e-001f, 3.915291e-002f, -2.883141e-001f, 0.000000e+000f, -4.395227e-002f, 1.132455e-001f, 0.000000e+000f, -1.094468e-001f,
  5.959494e-003f, -5.356014e-002f, 9.843776e-002f, 6.392492e-002f, -4.014833e-001f, 0.000000e+000f, -4.182067e-002f, 1.077533e-001f, 0.000000e+000f, -1.094468e-001f,
  7.284051e-003f, -5.536288e-002f, 9.428937e-002f, 6.822770e-002f, -4.211402e-001f, 0.000000e+000f, -4.054409e-002f, 1.044641e-001f, 0.000000e+000f, -1.094468e-001f,
  8.526803e-003f, -5.754087e-002f, 9.165090e-002f, 7.147473e-002f, -4.359741e-001f, 0.000000e+000f, -4.001491e-002f, 1.031007e-001f, 0.000000e+000f, -1.094468e-001f,
  1.075604e-002f, -6.233644e-002f, 8.920786e-002f, 7.591880e-002f, -4.562765e-001f, 0.000000e+000f, -4.019014e-002f, 1.035522e-001f, 0.000000e+000f, -1.094468e-001f,
  1.186878e-002f, -6.540034e-002f, 8.971506e-002f, 7.711936e-002f, -4.617612e-001f, 0.000000e+000f, -4.108391e-002f, 1.058550e-001f, 0.000000e+000f, -1.094468e-001f,
  9.757726e-003f, -6.230180e-002f, 9.574604e-002f, 7.064642e-002f, -4.321900e-001f, 0.000000e+000f, -4.276990e-002f, 1.101991e-001f, 0.000000e+000f, -1.094468e-001f,
  3.107936e-003f, -5.004963e-002f, 1.083232e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -4.539450e-002f, 1.169615e-001f, 0.000000e+000f, -1.094468e-001f,
  3.107936e-003f, -5.004963e-002f, 1.083232e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -2.837156e-002f, 7.310093e-002f, 0.000000e+000f, -1.094468e-001f,
  3.107936e-003f, -5.004963e-002f, 1.083232e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -2.670265e-002f, 6.880087e-002f, 0.000000e+000f, -1.094468e-001f,
  3.107936e-003f, -5.004963e-002f, 1.083232e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -2.521917e-002f, 6.497860e-002f, 0.000000e+000f, -1.094468e-001f,
  3.107936e-003f, -5.004963e-002f, 1.083232e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -2.389184e-002f, 6.155868e-002f, 0.000000e+000f, -1.094468e-001f,
  -6.447491e-003f, 8.809375e-002f, -1.186150e-002f, 3.345015e-002f, -3.139570e-001f, 0.000000e+000f, -3.754815e-002f, 8.141975e-002f, 0.000000e+000f, -2.734412e-001f,
  -6.447491e-003f, 9.160118e-002f, -5.930748e-002f, 1.672508e-001f, -5.859570e-001f, 0.000000e+000f, -2.410855e-002f, 6.589103e-002f, 0.000000e+000f, -2.734412e-001f,
  -6.447491e-003f, 8.984746e-002f, -3.558449e-002f, 1.003505e-001f, -4.499570e-001f, 0.000000e+000f, -1.417821e-002f, 5.406149e-002f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -8.184088e-002f, 2.044644e-001f, 0.000000e+000f, -1.094468e-001f,
  0.000000e+000f, -3.704996e-002f, 9.256251e-002f, 0.000000e+000f, -1.094468e-001f, 0.000000e+000f, -7.297417e-002f, 1.823126e-001f, 0.000000e+000f, -1.094468e-001f,
  0.000000e+000f, -5.787024e-002f, 1.445782e-001f, 0.000000e+000f, -1.094468e-001f, 0.000000e+000f, -5.787024e-002f, 1.445782e-001f, 0.000000e+000f, -1.094468e-001f,
  -3.455085e-002f, 2.496088e-002f, 1.532919e-001f, -4.594986e-002f, 1.004719e-001f, 0.000000e+000f, -6.930959e-002f, 1.731573e-001f, 0.000000e+000f, -1.094468e-001f,
  -3.394649e-002f, 2.425734e-002f, 1.512773e-001f, -3.370267e-002f, 4.452148e-002f, 0.000000e+000f, -5.766501e-002f, 1.440654e-001f, 0.000000e+000f, -1.094468e-001f,
  -2.383705e-002f, 4.297317e-003f, 1.380449e-001f, -6.387663e-003f, -8.026521e-002f, 0.000000e+000f, -5.004815e-002f, 1.250361e-001f, 0.000000e+000f, -1.094468e-001f,
  -1.135970e-002f, -1.964909e-002f, 1.199921e-001f, 2.405594e-002f, -2.193447e-001f, 0.000000e+000f, -4.509301e-002f, 1.126566e-001f, 0.000000e+000f, -1.094468e-001f,
  4.226534e-003f, -4.963211e-002f, 9.761643e-002f, 5.985563e-002f, -3.828931e-001f, 0.000000e+000f, -4.198684e-002f, 1.048964e-001f, 0.000000e+000f, -1.094468e-001f,
  7.235674e-003f, -5.442907e-002f, 9.081896e-002f, 6.822770e-002f, -4.211402e-001f, 0.000000e+000f, -4.027482e-002f, 1.006192e-001f, 0.000000e+000f, -1.094468e-001f,
  9.009520e-003f, -5.756167e-002f, 8.757357e-002f, 7.263774e-002f, -4.412872e-001f, 0.000000e+000f, -3.972748e-002f, 9.925179e-002f, 0.000000e+000f, -1.094468e-001f,
  1.151370e-002f, -6.304442e-002f, 8.564118e-002f, 7.721794e-002f, -4.622115e-001f, 0.000000e+000f, -4.027482e-002f, 1.006192e-001f, 0.000000e+000f, -1.094468e-001f,
  1.061086e-002f, -6.260511e-002f, 9.017879e-002f, 7.317818e-002f, -4.437562e-001f, 0.000000e+000f, -4.198684e-002f, 1.048964e-001f, 0.000000e+000f, -1.094468e-001f,
  3.087295e-003f, -4.947567e-002f, 1.043363e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -4.509301e-002f, 1.126566e-001f, 0.000000e+000f, -1.094468e-001f,
  3.087295e-003f, -4.947567e-002f, 1.043363e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -2.774955e-002f, 6.932714e-002f, 0.000000e+000f, -1.094468e-001f,
  3.087295e-003f, -4.947567e-002f, 1.043363e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -2.576744e-002f, 6.437520e-002f, 0.000000e+000f, -1.094468e-001f,
  3.087295e-003f, -4.947567e-002f, 1.043363e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -2.404961e-002f, 6.008352e-002f, 0.000000e+000f, -1.094468e-001f,
  -6.264563e-003f, 8.559435e-002f, -1.152496e-002f, 3.345015e-002f, -3.139570e-001f, 0.000000e+000f, -3.754815e-002f, 8.141975e-002f, 0.000000e+000f, -2.734412e-001f,
  -6.264563e-003f, 8.900227e-002f, -5.762481e-002f, 1.672508e-001f, -5.859570e-001f, 0.000000e+000f, -2.382492e-002f, 6.511584e-002f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -8.120907e-002f, 1.969731e-001f, 0.000000e+000f, -1.094468e-001f,
  0.000000e+000f, -4.900418e-002f, 1.188599e-001f, 0.000000e+000f, -1.094468e-001f, 0.000000e+000f, -6.475727e-002f, 1.570692e-001f, 0.000000e+000f, -1.094468e-001f,
  -3.428412e-002f, 2.227197e-002f, 1.476755e-001f, -4.594986e-002f, 1.004719e-001f, 0.000000e+000f, -6.877453e-002f, 1.668131e-001f, 0.000000e+000f, -1.094468e-001f,
  -2.948288e-002f, 1.358517e-002f, 1.404993e-001f, -2.141188e-002f, -1.162811e-002f, 0.000000e+000f, -5.304113e-002f, 1.286516e-001f, 0.000000e+000f, -1.094468e-001f,
  -1.127200e-002f, -2.031811e-002f, 1.155958e-001f, 2.405594e-002f, -2.193447e-001f, 0.000000e+000f, -4.474490e-002f, 1.085290e-001f, 0.000000e+000f, -1.094468e-001f,
  7.030310e-003f, -5.373423e-002f, 8.897284e-002f, 6.705329e-002f, -4.157750e-001f, 0.000000e+000f, -4.065882e-002f, 9.861824e-002f, 0.000000e+000f, -1.094468e-001f,
  8.939967e-003f, -5.646638e-002f, 8.436501e-002f, 7.263774e-002f, -4.412872e-001f, 0.000000e+000f, -3.942078e-002f, 9.561536e-002f, 0.000000e+000f, -1.094468e-001f,
  1.165062e-002f, -6.273688e-002f, 8.362716e-002f, 7.680998e-002f, -4.603478e-001f, 0.000000e+000f, -4.065882e-002f, 9.861824e-002f, 0.000000e+000f, -1.094468e-001f,
  3.063461e-003f, -4.887068e-002f, 1.005135e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -4.474490e-002f, 1.085290e-001f, 0.000000e+000f, -1.094468e-001f,
  3.063461e-003f, -4.887068e-002f, 1.005135e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -2.651549e-002f, 6.431350e-002f, 0.000000e+000f, -1.094468e-001f,
  3.063461e-003f, -4.887068e-002f, 1.005135e-001f, 5.383841e-002f, -3.554038e-001f, 0.000000e+000f, -2.386394e-002f, 5.788215e-002f, 0.000000e+000f, -1.094468e-001f,
  -6.086824e-003f, 8.647709e-002f, -5.598987e-002f, 1.672508e-001f, -5.859570e-001f, 0.000000e+000f, -3.641032e-002f, 7.895249e-002f, 0.000000e+000f, -2.734412e-001f,
  -9.495463e-002f, 1.963797e-001f, 0.000000e+000f, 0.000000e+000f, -2.734412e-001f,
  9.361642e-002f, 1.535194e-001f, -2.261017e-002f, -2.854894e-002f, 1.419187e-001f, -6.824292e-002f, 1.645747e-001f, 0.000000e+000f, 0.000000e+000f, -2.734412e-001f,
  8.050611e-002f, 1.362747e-001f, -4.302288e-002f, -2.660668e-002f, -3.818132e-002f, -5.374862e-002f, 1.577605e-001f, 0.000000e+000f, 0.000000e+000f, -2.734412e-001f,
  3.077939e-002f, 1.175784e-001f, -5.309563e-002f, 4.483832e-002f, -3.138979e-001f, -3.119206e-002f, 1.189353e-001f, 0.000000e+000f, 0.000000e+000f, -2.734412e-001f,
  -1.919700e-002f, 1.106077e-001f, -5.448951e-002f, 1.666426e-001f, -5.783283e-001f, -1.752536e-002f, 9.725592e-002f, 0.000000e+000f, 0.000000e+000f, -2.734412e-001f,
  -2.441153e-002f, 1.115769e-001f, -6.458443e-002f, 2.256515e-001f, -6.718404e-001f, -8.166454e-003f, 8.546925e-002f, 0.000000e+000f, 0.000000e+000f, -2.734412e-001f,
  // Total number of coefficients: 3485
  // Maximum number of elevation coefficients: 5


   //Lite coefficients
   // 20 degrees loudspeakers
   // 16000 Hz sample rate
     // Coefficients
  // Generated by HRTFConv V5.90d on Wed Mar 03 18:29:42 1999
  0.000000e+000f, -3.398562e-002f, 1.638837e-001f, 0.000000e+000f, -2.071068e-001f,
  0.000000e+000f, -9.933167e-003f, 4.789922e-002f, 0.000000e+000f, -2.071068e-001f, 0.000000e+000f, -3.250161e-002f, 1.567276e-001f, 0.000000e+000f, -2.071068e-001f,
  0.000000e+000f, -1.867545e-002f, 9.005583e-002f, 0.000000e+000f, -2.071068e-001f, 0.000000e+000f, -2.839454e-002f, 1.369227e-001f, 0.000000e+000f, -2.071068e-001f,
  0.000000e+000f, -2.343212e-002f, 1.129932e-001f, 0.000000e+000f, -2.071068e-001f, 0.000000e+000f, -2.461622e-002f, 1.187031e-001f, 0.000000e+000f, -2.071068e-001f,
  -5.768769e-003f, 3.618822e-003f, 1.166914e-001f, -2.452318e-002f, -1.479026e-001f, 0.000000e+000f, -3.135852e-002f, 1.512155e-001f, 0.000000e+000f, -2.071068e-001f,
  -6.703400e-003f, 8.478997e-003f, 1.149880e-001f, -1.446648e-002f, -1.721816e-001f, 0.000000e+000f, -2.764458e-002f, 1.333063e-001f, 0.000000e+000f, -2.071068e-001f,
  -6.968001e-003f, 1.051122e-002f, 1.113411e-001f, -1.365548e-003f, -2.038101e-001f, 0.000000e+000f, -2.434278e-002f, 1.173845e-001f, 0.000000e+000f, -2.071068e-001f,
  -5.750538e-003f, 5.780830e-003f, 1.058419e-001f, 1.959726e-002f, -2.544188e-001f, 0.000000e+000f, -2.219746e-002f, 1.070395e-001f, 0.000000e+000f, -2.071068e-001f,
  -3.762854e-003f, -2.330349e-003f, 9.873540e-002f, 4.572840e-002f, -3.175049e-001f, 0.000000e+000f, -2.053480e-002f, 9.902188e-002f, 0.000000e+000f, -2.071068e-001f,
  -1.289025e-003f, -1.244897e-002f, 9.000465e-002f, 7.599213e-002f, -3.905680e-001f, 0.000000e+000f, -1.906745e-002f, 9.194608e-002f, 0.000000e+000f, -2.071068e-001f,
  1.599721e-003f, -2.450701e-002f, 8.097795e-002f, 1.080432e-001f, -4.679462e-001f, 0.000000e+000f, -1.813060e-002f, 8.742847e-002f, 0.000000e+000f, -2.071068e-001f,
  4.685204e-003f, -3.737579e-002f, 7.128603e-002f, 1.416689e-001f, -5.491257e-001f, 0.000000e+000f, -1.734068e-002f, 8.361936e-002f, 0.000000e+000f, -2.071068e-001f,
  5.269866e-003f, -3.954392e-002f, 6.814585e-002f, 1.498719e-001f, -5.689296e-001f, 0.000000e+000f, -1.688431e-002f, 8.141864e-002f, 0.000000e+000f, -2.071068e-001f,
  5.328981e-003f, -3.954382e-002f, 6.677076e-002f, 1.522166e-001f, -5.745901e-001f, 0.000000e+000f, -1.657870e-002f, 7.994496e-002f, 0.000000e+000f, -2.071068e-001f,
  5.754508e-003f, -4.131834e-002f, 6.543293e-002f, 1.567757e-001f, -5.855969e-001f, 0.000000e+000f, -1.649741e-002f, 7.955300e-002f, 0.000000e+000f, -2.071068e-001f,
  6.290053e-003f, -4.370906e-002f, 6.450822e-002f, 1.614336e-001f, -5.968420e-001f, 0.000000e+000f, -1.657870e-002f, 7.994496e-002f, 0.000000e+000f, -2.071068e-001f,
  6.684256e-003f, -4.568489e-002f, 6.486956e-002f, 1.633948e-001f, -6.015767e-001f, 0.000000e+000f, -1.688431e-002f, 8.141864e-002f, 0.000000e+000f, -2.071068e-001f,
  6.506292e-003f, -4.530377e-002f, 6.716991e-002f, 1.590018e-001f, -5.909711e-001f, 0.000000e+000f, -1.734068e-002f, 8.361936e-002f, 0.000000e+000f, -2.071068e-001f,
  5.383823e-003f, -4.105652e-002f, 7.278999e-002f, 1.437879e-001f, -5.542414e-001f, 0.000000e+000f, -1.813060e-002f, 8.742847e-002f, 0.000000e+000f, -2.071068e-001f,
  4.234807e-003f, -3.648262e-002f, 7.745214e-002f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -1.227904e-002f, 5.921135e-002f, 0.000000e+000f, -2.071068e-001f,
  4.234807e-003f, -3.648262e-002f, 7.745214e-002f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -1.161273e-002f, 5.599833e-002f, 0.000000e+000f, -2.071068e-001f,
  4.234807e-003f, -3.648262e-002f, 7.745214e-002f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -1.109661e-002f, 5.350952e-002f, 0.000000e+000f, -2.071068e-001f,
  4.234807e-003f, -3.648262e-002f, 7.745214e-002f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -1.062442e-002f, 5.123252e-002f, 0.000000e+000f, -2.071068e-001f,
  4.234807e-003f, -3.648262e-002f, 7.745214e-002f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -1.012191e-002f, 4.880936e-002f, 0.000000e+000f, -2.071068e-001f,
  4.234807e-003f, -3.648262e-002f, 7.745214e-002f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -9.727549e-003f, 4.690769e-002f, 0.000000e+000f, -2.071068e-001f,
  -2.763134e-002f, 1.086683e-001f, -1.467199e-002f, 4.380921e-002f, -3.829230e-001f, 0.000000e+000f, -4.778588e-002f, 7.971382e-002f, 0.000000e+000f, -3.340893e-001f,
  -2.763134e-002f, 1.125367e-001f, -2.934399e-002f, 8.761843e-002f, -4.529230e-001f, 0.000000e+000f, -3.342855e-002f, 6.420938e-002f, 0.000000e+000f, -3.340893e-001f,
  -2.763134e-002f, 1.241419e-001f, -7.335997e-002f, 2.190461e-001f, -6.629230e-001f, 0.000000e+000f, -2.244698e-002f, 5.198950e-002f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -5.167734e-002f, 1.974254e-001f, 0.000000e+000f, -2.071068e-001f,
  0.000000e+000f, -1.510402e-002f, 5.770263e-002f, 0.000000e+000f, -2.071068e-001f, 0.000000e+000f, -4.942080e-002f, 1.888047e-001f, 0.000000e+000f, -2.071068e-001f,
  0.000000e+000f, -2.684361e-002f, 1.025519e-001f, 0.000000e+000f, -2.071068e-001f, 0.000000e+000f, -4.415844e-002f, 1.687006e-001f, 0.000000e+000f, -2.071068e-001f,
  0.000000e+000f, -3.464451e-002f, 1.323541e-001f, 0.000000e+000f, -2.071068e-001f, 0.000000e+000f, -3.834456e-002f, 1.464896e-001f, 0.000000e+000f, -2.071068e-001f,
  -8.116385e-003f, -5.827797e-003f, 1.407233e-001f, -2.827235e-002f, -1.388513e-001f, 0.000000e+000f, -4.988858e-002f, 1.905917e-001f, 0.000000e+000f, -2.071068e-001f,
  -9.783866e-003f, 8.916294e-004f, 1.393898e-001f, -1.756249e-002f, -1.647072e-001f, 0.000000e+000f, -4.376462e-002f, 1.671961e-001f, 0.000000e+000f, -2.071068e-001f,
  -1.069115e-002f, 5.158080e-003f, 1.363323e-001f, -7.933287e-003f, -1.879541e-001f, 0.000000e+000f, -3.898537e-002f, 1.489377e-001f, 0.000000e+000f, -2.071068e-001f,
  -9.923778e-003f, 3.573090e-003f, 1.311877e-001f, 7.884464e-003f, -2.261416e-001f, 0.000000e+000f, -3.528003e-002f, 1.347820e-001f, 0.000000e+000f, -2.071068e-001f,
  -7.270406e-003f, -4.503544e-003f, 1.233171e-001f, 3.262401e-002f, -2.858681e-001f, 0.000000e+000f, -3.240794e-002f, 1.238096e-001f, 0.000000e+000f, -2.071068e-001f,
  -4.191122e-003f, -1.397581e-002f, 1.145621e-001f, 5.839226e-002f, -3.480782e-001f, 0.000000e+000f, -3.018415e-002f, 1.153140e-001f, 0.000000e+000f, -2.071068e-001f,
  -6.525808e-004f, -2.500603e-002f, 1.050562e-001f, 8.580361e-002f, -4.142550e-001f, 0.000000e+000f, -2.847339e-002f, 1.087782e-001f, 0.000000e+000f, -2.071068e-001f,
  4.031052e-003f, -3.993197e-002f, 9.372058e-002f, 1.193762e-001f, -4.953064e-001f, 0.000000e+000f, -2.717871e-002f, 1.038321e-001f, 0.000000e+000f, -2.071068e-001f,
  7.459132e-003f, -5.070778e-002f, 8.485491e-002f, 1.442778e-001f, -5.554242e-001f, 0.000000e+000f, -2.623172e-002f, 1.002143e-001f, 0.000000e+000f, -2.071068e-001f,
  7.998103e-003f, -5.197745e-002f, 8.183917e-002f, 1.501143e-001f, -5.695148e-001f, 0.000000e+000f, -2.558535e-002f, 9.774495e-002f, 0.000000e+000f, -2.071068e-001f,
  8.103061e-003f, -5.201129e-002f, 8.043657e-002f, 1.522166e-001f, -5.745901e-001f, 0.000000e+000f, -2.520899e-002f, 9.630711e-002f, 0.000000e+000f, -2.071068e-001f,
  8.750102e-003f, -5.406135e-002f, 7.882493e-002f, 1.567757e-001f, -5.855969e-001f, 0.000000e+000f, -2.508539e-002f, 9.583491e-002f, 0.000000e+000f, -2.071068e-001f,
  9.564433e-003f, -5.688079e-002f, 7.771096e-002f, 1.614336e-001f, -5.968420e-001f, 0.000000e+000f, -2.520899e-002f, 9.630711e-002f, 0.000000e+000f, -2.071068e-001f,
  1.012538e-002f, -5.907935e-002f, 7.792318e-002f, 1.634978e-001f, -6.018255e-001f, 0.000000e+000f, -2.558535e-002f, 9.774495e-002f, 0.000000e+000f, -2.071068e-001f,
  1.000642e-002f, -5.923953e-002f, 8.027139e-002f, 1.602363e-001f, -5.939515e-001f, 0.000000e+000f, -2.623172e-002f, 1.002143e-001f, 0.000000e+000f, -2.071068e-001f,
  8.845918e-003f, -5.613474e-002f, 8.534754e-002f, 1.493597e-001f, -5.676931e-001f, 0.000000e+000f, -2.717871e-002f, 1.038321e-001f, 0.000000e+000f, -2.071068e-001f,
  6.439299e-003f, -4.902329e-002f, 9.330408e-002f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -2.847339e-002f, 1.087782e-001f, 0.000000e+000f, -2.071068e-001f,
  6.439299e-003f, -4.902329e-002f, 9.330408e-002f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -1.807834e-002f, 6.906555e-002f, 0.000000e+000f, -2.071068e-001f,
  6.439299e-003f, -4.902329e-002f, 9.330408e-002f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -1.725660e-002f, 6.592621e-002f, 0.000000e+000f, -2.071068e-001f,
  6.439299e-003f, -4.902329e-002f, 9.330408e-002f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -1.650631e-002f, 6.305985e-002f, 0.000000e+000f, -2.071068e-001f,
  6.439299e-003f, -4.902329e-002f, 9.330408e-002f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -1.581855e-002f, 6.043236e-002f, 0.000000e+000f, -2.071068e-001f,
  6.439299e-003f, -4.902329e-002f, 9.330408e-002f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -1.518581e-002f, 5.801506e-002f, 0.000000e+000f, -2.071068e-001f,
  6.439299e-003f, -4.902329e-002f, 9.330408e-002f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -1.460174e-002f, 5.578371e-002f, 0.000000e+000f, -2.071068e-001f,
  -3.100288e-002f, 1.219279e-001f, -1.646225e-002f, 4.380921e-002f, -3.829230e-001f, 0.000000e+000f, -4.749090e-002f, 7.922176e-002f, 0.000000e+000f, -3.340893e-001f,
  -3.100288e-002f, 1.262683e-001f, -3.292449e-002f, 8.761843e-002f, -4.529230e-001f, 0.000000e+000f, -3.322957e-002f, 6.382718e-002f, 0.000000e+000f, -3.340893e-001f,
  -3.100288e-002f, 1.392895e-001f, -8.231124e-002f, 2.190461e-001f, -6.629230e-001f, 0.000000e+000f, -2.244698e-002f, 5.198950e-002f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -7.503488e-002f, 2.385669e-001f, 0.000000e+000f, -2.071068e-001f,
  0.000000e+000f, -1.852873e-002f, 5.891050e-002f, 0.000000e+000f, -2.071068e-001f, 0.000000e+000f, -7.271120e-002f, 2.311790e-001f, 0.000000e+000f, -2.071068e-001f,
  0.000000e+000f, -3.396883e-002f, 1.080010e-001f, 0.000000e+000f, -2.071068e-001f, 0.000000e+000f, -6.690554e-002f, 2.127204e-001f, 0.000000e+000f, -2.071068e-001f,
  0.000000e+000f, -4.527847e-002f, 1.439590e-001f, 0.000000e+000f, -2.071068e-001f, 0.000000e+000f, -5.983388e-002f, 1.902367e-001f, 0.000000e+000f, -2.071068e-001f,
  0.000000e+000f, -5.305767e-002f, 1.686923e-001f, 0.000000e+000f, -2.071068e-001f, 0.000000e+000f, -5.305767e-002f, 1.686923e-001f, 0.000000e+000f, -2.071068e-001f,
  -1.228401e-002f, -1.441796e-002f, 1.700157e-001f, -2.638492e-002f, -1.434080e-001f, 0.000000e+000f, -7.080529e-002f, 2.251193e-001f, 0.000000e+000f, -2.071068e-001f,
  -1.420606e-002f, -7.810516e-003f, 1.684372e-001f, -1.756249e-002f, -1.647072e-001f, 0.000000e+000f, -6.354571e-002f, 2.020381e-001f, 0.000000e+000f, -2.071068e-001f,
  -1.542205e-002f, -3.015421e-003f, 1.654837e-001f, -9.716421e-003f, -1.836493e-001f, 0.000000e+000f, -5.764404e-002f, 1.832743e-001f, 0.000000e+000f, -2.071068e-001f,
  -1.515876e-002f, -2.444448e-003f, 1.610068e-001f, 1.382755e-003f, -2.104450e-001f, 0.000000e+000f, -5.286950e-002f, 1.680940e-001f, 0.000000e+000f, -2.071068e-001f,
  -1.269628e-002f, -8.093472e-003f, 1.540750e-001f, 1.959726e-002f, -2.544188e-001f, 0.000000e+000f, -4.900849e-002f, 1.558183e-001f, 0.000000e+000f, -2.071068e-001f,
  -9.050778e-003f, -1.698421e-002f, 1.454912e-001f, 4.142632e-002f, -3.071188e-001f, 0.000000e+000f, -4.588608e-002f, 1.458908e-001f, 0.000000e+000f, -2.071068e-001f,
  -5.321748e-003f, -2.605663e-002f, 1.366406e-001f, 6.264291e-002f, -3.583401e-001f, 0.000000e+000f, -4.336570e-002f, 1.378775e-001f, 0.000000e+000f, -2.071068e-001f,
  -9.475395e-004f, -3.691577e-002f, 1.269489e-001f, 8.580361e-002f, -4.142550e-001f, 0.000000e+000f, -4.134301e-002f, 1.314465e-001f, 0.000000e+000f, -2.071068e-001f,
  4.703383e-003f, -5.129634e-002f, 1.155473e-001f, 1.137674e-001f, -4.817656e-001f, 0.000000e+000f, -3.973916e-002f, 1.263472e-001f, 0.000000e+000f, -2.071068e-001f,
  9.707326e-003f, -6.396750e-002f, 1.052510e-001f, 1.383845e-001f, -5.411965e-001f, 0.000000e+000f, -3.849516e-002f, 1.223920e-001f, 0.000000e+000f, -2.071068e-001f,
  1.155966e-002f, -6.823071e-002f, 1.000808e-001f, 1.487854e-001f, -5.663064e-001f, 0.000000e+000f, -3.756760e-002f, 1.194429e-001f, 0.000000e+000f, -2.071068e-001f,
  1.155958e-002f, -6.769542e-002f, 9.837976e-002f, 1.504719e-001f, -5.703781e-001f, 0.000000e+000f, -3.692551e-002f, 1.174015e-001f, 0.000000e+000f, -2.071068e-001f,
  1.188052e-002f, -6.824168e-002f, 9.687226e-002f, 1.528615e-001f, -5.761471e-001f, 0.000000e+000f, -3.654817e-002f, 1.162018e-001f, 0.000000e+000f, -2.071068e-001f,
  1.270504e-002f, -7.035334e-002f, 9.525127e-002f, 1.567757e-001f, -5.855969e-001f, 0.000000e+000f, -3.642368e-002f, 1.158060e-001f, 0.000000e+000f, -2.071068e-001f,
  1.369898e-002f, -7.313439e-002f, 9.404595e-002f, 1.607625e-001f, -5.952218e-001f, 0.000000e+000f, -3.654817e-002f, 1.162018e-001f, 0.000000e+000f, -2.071068e-001f,
  1.451019e-002f, -7.564721e-002f, 9.383498e-002f, 1.632698e-001f, -6.012750e-001f, 0.000000e+000f, -3.692551e-002f, 1.174015e-001f, 0.000000e+000f, -2.071068e-001f,
  1.477563e-002f, -7.692154e-002f, 9.520344e-002f, 1.626937e-001f, -5.998841e-001f, 0.000000e+000f, -3.756760e-002f, 1.194429e-001f, 0.000000e+000f, -2.071068e-001f,
  1.415604e-002f, -7.603733e-002f, 9.865539e-002f, 1.575449e-001f, -5.874539e-001f, 0.000000e+000f, -3.849516e-002f, 1.223920e-001f, 0.000000e+000f, -2.071068e-001f,
  1.239116e-002f, -7.226383e-002f, 1.044984e-001f, 1.466996e-001f, -5.612709e-001f, 0.000000e+000f, -3.973916e-002f, 1.263472e-001f, 0.000000e+000f, -2.071068e-001f,
  9.349786e-003f, -6.518863e-002f, 1.127477e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -4.134301e-002f, 1.314465e-001f, 0.000000e+000f, -2.071068e-001f,
  9.349786e-003f, -6.518863e-002f, 1.127477e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -2.645953e-002f, 8.412579e-002f, 0.000000e+000f, -2.071068e-001f,
  9.349786e-003f, -6.518863e-002f, 1.127477e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -2.544186e-002f, 8.089018e-002f, 0.000000e+000f, -2.071068e-001f,
  9.349786e-003f, -6.518863e-002f, 1.127477e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -2.449956e-002f, 7.789425e-002f, 0.000000e+000f, -2.071068e-001f,
  9.349786e-003f, -6.518863e-002f, 1.127477e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -2.362458e-002f, 7.511231e-002f, 0.000000e+000f, -2.071068e-001f,
  9.349786e-003f, -6.518863e-002f, 1.127477e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -2.280994e-002f, 7.252223e-002f, 0.000000e+000f, -2.071068e-001f,
  9.349786e-003f, -6.518863e-002f, 1.127477e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -2.204961e-002f, 7.010483e-002f, 0.000000e+000f, -2.071068e-001f,
  9.349786e-003f, -6.518863e-002f, 1.127477e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -2.133833e-002f, 6.784338e-002f, 0.000000e+000f, -2.071068e-001f,
  -3.478580e-002f, 1.368053e-001f, -1.847095e-002f, 4.380921e-002f, -3.829230e-001f, 0.000000e+000f, -4.808454e-002f, 8.021204e-002f, 0.000000e+000f, -3.340893e-001f,
  -3.478580e-002f, 1.416753e-001f, -3.694189e-002f, 8.761843e-002f, -4.529230e-001f, 0.000000e+000f, -3.383374e-002f, 6.498768e-002f, 0.000000e+000f, -3.340893e-001f,
  -3.478580e-002f, 1.465454e-001f, -5.541284e-002f, 1.314276e-001f, -5.229230e-001f, 0.000000e+000f, -2.297514e-002f, 5.321278e-002f, 0.000000e+000f, -3.340893e-001f,
  -3.478580e-002f, 1.562854e-001f, -9.235473e-002f, 2.190461e-001f, -6.629230e-001f, 0.000000e+000f, -1.470771e-002f, 4.408142e-002f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -1.056577e-001f, 2.891436e-001f, 0.000000e+000f, -2.071068e-001f,
  0.000000e+000f, -2.609056e-002f, 7.139965e-002f, 0.000000e+000f, -2.071068e-001f, 0.000000e+000f, -1.023857e-001f, 2.801894e-001f, 0.000000e+000f, -2.071068e-001f,
  0.000000e+000f, -4.783198e-002f, 1.308974e-001f, 0.000000e+000f, -2.071068e-001f, 0.000000e+000f, -9.421062e-002f, 2.578176e-001f, 0.000000e+000f, -2.071068e-001f,
  0.000000e+000f, -6.375724e-002f, 1.744786e-001f, 0.000000e+000f, -2.071068e-001f, 0.000000e+000f, -8.425292e-002f, 2.305672e-001f, 0.000000e+000f, -2.071068e-001f,
  0.000000e+000f, -7.471124e-002f, 2.044554e-001f, 0.000000e+000f, -2.071068e-001f, 0.000000e+000f, -7.471124e-002f, 2.044554e-001f, 0.000000e+000f, -2.071068e-001f,
  -1.729729e-002f, -2.796146e-002f, 2.060594e-001f, -2.638492e-002f, -1.434080e-001f, 0.000000e+000f, -9.970191e-002f, 2.728451e-001f, 0.000000e+000f, -2.071068e-001f,
  -2.000375e-002f, -1.985586e-002f, 2.041463e-001f, -1.756249e-002f, -1.647072e-001f, 0.000000e+000f, -8.947960e-002f, 2.448706e-001f, 0.000000e+000f, -2.071068e-001f,
  -2.171600e-002f, -1.386202e-002f, 2.005666e-001f, -9.716421e-003f, -1.836493e-001f, 0.000000e+000f, -8.116937e-002f, 2.221288e-001f, 0.000000e+000f, -2.071068e-001f,
  -2.134526e-002f, -1.289386e-002f, 1.951406e-001f, 1.382755e-003f, -2.104450e-001f, 0.000000e+000f, -7.444628e-002f, 2.037303e-001f, 0.000000e+000f, -2.071068e-001f,
  -1.787781e-002f, -1.931292e-002f, 1.867392e-001f, 1.959726e-002f, -2.544188e-001f, 0.000000e+000f, -6.900954e-002f, 1.888521e-001f, 0.000000e+000f, -2.071068e-001f,
  -1.274453e-002f, -2.955904e-002f, 1.763356e-001f, 4.142632e-002f, -3.071188e-001f, 0.000000e+000f, -6.461282e-002f, 1.768200e-001f, 0.000000e+000f, -2.071068e-001f,
  -7.493627e-003f, -4.000892e-002f, 1.656087e-001f, 6.264291e-002f, -3.583401e-001f, 0.000000e+000f, -6.106384e-002f, 1.671078e-001f, 0.000000e+000f, -2.071068e-001f,
  -1.334243e-003f, -5.257242e-002f, 1.538623e-001f, 8.580361e-002f, -4.142550e-001f, 0.000000e+000f, -5.821567e-002f, 1.593135e-001f, 0.000000e+000f, -2.071068e-001f,
  6.622899e-003f, -6.929843e-002f, 1.400436e-001f, 1.137674e-001f, -4.817656e-001f, 0.000000e+000f, -5.595726e-002f, 1.531331e-001f, 0.000000e+000f, -2.071068e-001f,
  1.366902e-002f, -8.402082e-002f, 1.275644e-001f, 1.383845e-001f, -5.411965e-001f, 0.000000e+000f, -5.420557e-002f, 1.483394e-001f, 0.000000e+000f, -2.071068e-001f,
  1.627732e-002f, -8.886892e-002f, 1.212982e-001f, 1.487854e-001f, -5.663064e-001f, 0.000000e+000f, -5.289946e-002f, 1.447651e-001f, 0.000000e+000f, -2.071068e-001f,
  1.627720e-002f, -8.811522e-002f, 1.192365e-001f, 1.504719e-001f, -5.703781e-001f, 0.000000e+000f, -5.199532e-002f, 1.422908e-001f, 0.000000e+000f, -2.071068e-001f,
  1.672912e-002f, -8.868431e-002f, 1.174094e-001f, 1.528615e-001f, -5.761471e-001f, 0.000000e+000f, -5.146398e-002f, 1.408368e-001f, 0.000000e+000f, -2.071068e-001f,
  1.789015e-002f, -9.114366e-002f, 1.154447e-001f, 1.567757e-001f, -5.855969e-001f, 0.000000e+000f, -5.128869e-002f, 1.403571e-001f, 0.000000e+000f, -2.071068e-001f,
  1.928973e-002f, -9.443996e-002f, 1.139839e-001f, 1.607625e-001f, -5.952218e-001f, 0.000000e+000f, -5.146398e-002f, 1.408368e-001f, 0.000000e+000f, -2.071068e-001f,
  2.043201e-002f, -9.747248e-002f, 1.137282e-001f, 1.632698e-001f, -6.012750e-001f, 0.000000e+000f, -5.199532e-002f, 1.422908e-001f, 0.000000e+000f, -2.071068e-001f,
  2.080576e-002f, -9.910138e-002f, 1.153868e-001f, 1.626937e-001f, -5.998841e-001f, 0.000000e+000f, -5.289946e-002f, 1.447651e-001f, 0.000000e+000f, -2.071068e-001f,
  1.993332e-002f, -9.824265e-002f, 1.195705e-001f, 1.575449e-001f, -5.874539e-001f, 0.000000e+000f, -5.420557e-002f, 1.483394e-001f, 0.000000e+000f, -2.071068e-001f,
  1.744817e-002f, -9.402956e-002f, 1.266523e-001f, 1.466996e-001f, -5.612709e-001f, 0.000000e+000f, -5.595726e-002f, 1.531331e-001f, 0.000000e+000f, -2.071068e-001f,
  1.316556e-002f, -8.596324e-002f, 1.366505e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -5.821567e-002f, 1.593135e-001f, 0.000000e+000f, -2.071068e-001f,
  1.316556e-002f, -8.596324e-002f, 1.366505e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -3.725803e-002f, 1.019606e-001f, 0.000000e+000f, -2.071068e-001f,
  1.316556e-002f, -8.596324e-002f, 1.366505e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -3.582503e-002f, 9.803908e-002f, 0.000000e+000f, -2.071068e-001f,
  1.316556e-002f, -8.596324e-002f, 1.366505e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -3.449818e-002f, 9.440800e-002f, 0.000000e+000f, -2.071068e-001f,
  1.316556e-002f, -8.596324e-002f, 1.366505e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -3.326610e-002f, 9.103629e-002f, 0.000000e+000f, -2.071068e-001f,
  1.316556e-002f, -8.596324e-002f, 1.366505e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -3.211899e-002f, 8.789710e-002f, 0.000000e+000f, -2.071068e-001f,
  1.316556e-002f, -8.596324e-002f, 1.366505e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -3.104836e-002f, 8.496720e-002f, 0.000000e+000f, -2.071068e-001f,
  1.316556e-002f, -8.596324e-002f, 1.366505e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -3.004680e-002f, 8.222632e-002f, 0.000000e+000f, -2.071068e-001f,
  -3.903031e-002f, 1.534981e-001f, -2.072474e-002f, 4.380921e-002f, -3.829230e-001f, 0.000000e+000f, -4.808454e-002f, 8.021204e-002f, 0.000000e+000f, -3.340893e-001f,
  -3.903031e-002f, 1.589624e-001f, -4.144948e-002f, 8.761843e-002f, -4.529230e-001f, 0.000000e+000f, -3.383374e-002f, 6.498768e-002f, 0.000000e+000f, -3.340893e-001f,
  -3.903031e-002f, 1.644266e-001f, -6.217423e-002f, 1.314276e-001f, -5.229230e-001f, 0.000000e+000f, -2.297514e-002f, 5.321278e-002f, 0.000000e+000f, -3.340893e-001f,
  -3.903031e-002f, 1.753551e-001f, -1.036237e-001f, 2.190461e-001f, -6.629230e-001f, 0.000000e+000f, -1.470771e-002f, 4.408142e-002f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, 0.000000e+000f, 3.514500e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 0.000000e+000f, 8.678527e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 3.405663e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 0.000000e+000f, 1.591040e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 3.133736e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 0.000000e+000f, 2.120763e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 2.802512e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 0.000000e+000f, 2.485127e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 2.485127e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 5.753612e-002f, 2.504623e-001f, 0.000000e+000f, 6.369883e-002f, 0.000000e+000f, 0.000000e+000f, 3.316393e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 6.653864e-002f, 2.481369e-001f, 0.000000e+000f, 4.239959e-002f, 0.000000e+000f, 0.000000e+000f, 2.976368e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 7.223413e-002f, 2.437859e-001f, 0.000000e+000f, 2.345752e-002f, 0.000000e+000f, 0.000000e+000f, 2.699944e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 7.100093e-002f, 2.371907e-001f, 0.000000e+000f, -3.338265e-003f, 0.000000e+000f, 0.000000e+000f, 2.476313e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 5.946711e-002f, 2.269789e-001f, 0.000000e+000f, -4.731198e-002f, 0.000000e+000f, 0.000000e+000f, 2.295471e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 4.239223e-002f, 2.143334e-001f, 0.000000e+000f, -1.000120e-001f, 0.000000e+000f, 0.000000e+000f, 2.149222e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 2.492612e-002f, 2.012951e-001f, 0.000000e+000f, -1.512334e-001f, 0.000000e+000f, 0.000000e+000f, 2.031172e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 4.438106e-003f, 1.870175e-001f, 0.000000e+000f, -2.071482e-001f, 0.000000e+000f, 0.000000e+000f, 1.936433e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.202981e-002f, 1.702210e-001f, 0.000000e+000f, -2.746588e-001f, 0.000000e+000f, 0.000000e+000f, 1.861312e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -4.546739e-002f, 1.550528e-001f, 0.000000e+000f, -3.340897e-001f, 0.000000e+000f, 0.000000e+000f, 1.803045e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -5.414339e-002f, 1.474362e-001f, 0.000000e+000f, -3.591997e-001f, 0.000000e+000f, 0.000000e+000f, 1.759599e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -5.414301e-002f, 1.449303e-001f, 0.000000e+000f, -3.632714e-001f, 0.000000e+000f, 0.000000e+000f, 1.729525e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -5.564624e-002f, 1.427095e-001f, 0.000000e+000f, -3.690404e-001f, 0.000000e+000f, 0.000000e+000f, 1.711851e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -5.950816e-002f, 1.403215e-001f, 0.000000e+000f, -3.784901e-001f, 0.000000e+000f, 0.000000e+000f, 1.706020e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -6.416360e-002f, 1.385458e-001f, 0.000000e+000f, -3.881150e-001f, 0.000000e+000f, 0.000000e+000f, 1.711851e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -6.796316e-002f, 1.382350e-001f, 0.000000e+000f, -3.941682e-001f, 0.000000e+000f, 0.000000e+000f, 1.729525e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -6.920640e-002f, 1.402510e-001f, 0.000000e+000f, -3.927774e-001f, 0.000000e+000f, 0.000000e+000f, 1.759599e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -6.630437e-002f, 1.453363e-001f, 0.000000e+000f, -3.803471e-001f, 0.000000e+000f, 0.000000e+000f, 1.803045e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -5.803800e-002f, 1.539441e-001f, 0.000000e+000f, -3.541642e-001f, 0.000000e+000f, 0.000000e+000f, 1.861312e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -4.379273e-002f, 1.660967e-001f, 0.000000e+000f, -3.129230e-001f, 0.000000e+000f, 0.000000e+000f, 1.936433e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -4.379273e-002f, 1.660967e-001f, 0.000000e+000f, -3.129230e-001f, 0.000000e+000f, 0.000000e+000f, 1.239317e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -4.379273e-002f, 1.660967e-001f, 0.000000e+000f, -3.129230e-001f, 0.000000e+000f, 0.000000e+000f, 1.191651e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -4.379273e-002f, 1.660967e-001f, 0.000000e+000f, -3.129230e-001f, 0.000000e+000f, 0.000000e+000f, 1.147516e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -4.379273e-002f, 1.660967e-001f, 0.000000e+000f, -3.129230e-001f, 0.000000e+000f, 0.000000e+000f, 1.106533e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -4.379273e-002f, 1.660967e-001f, 0.000000e+000f, -3.129230e-001f, 0.000000e+000f, 0.000000e+000f, 1.068377e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -4.379273e-002f, 1.660967e-001f, 0.000000e+000f, -3.129230e-001f, 0.000000e+000f, 0.000000e+000f, 1.032764e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -4.379273e-002f, 1.660967e-001f, 0.000000e+000f, -3.129230e-001f, 0.000000e+000f, 0.000000e+000f, 9.994494e-002f, 0.000000e+000f, 0.000000e+000f,
  -4.379273e-002f, 1.722277e-001f, -2.325354e-002f, 4.380921e-002f, -3.829230e-001f, -5.188557e-002f, 8.401306e-002f, 0.000000e+000f, 0.000000e+000f, -3.340893e-001f,
  -4.379273e-002f, 1.783587e-001f, -4.650709e-002f, 8.761843e-002f, -4.529230e-001f, -3.986276e-002f, 7.101670e-002f, 0.000000e+000f, 0.000000e+000f, -3.340893e-001f,
  -4.379273e-002f, 1.844897e-001f, -6.976063e-002f, 1.314276e-001f, -5.229230e-001f, -3.015594e-002f, 6.039358e-002f, 0.000000e+000f, 0.000000e+000f, -3.340893e-001f,
  -4.379273e-002f, 1.967516e-001f, -1.162677e-001f, 2.190461e-001f, -6.629230e-001f, -2.231871e-002f, 5.169242e-002f, 0.000000e+000f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -1.397211e-001f, 3.032532e-001f, 0.000000e+000f, -2.071068e-001f,
  0.000000e+000f, -3.450202e-002f, 7.488379e-002f, 0.000000e+000f, -2.071068e-001f, 0.000000e+000f, -1.353943e-001f, 2.938621e-001f, 0.000000e+000f, -2.071068e-001f,
  0.000000e+000f, -6.325277e-002f, 1.372849e-001f, 0.000000e+000f, -2.071068e-001f, 0.000000e+000f, -1.245836e-001f, 2.703985e-001f, 0.000000e+000f, -2.071068e-001f,
  0.000000e+000f, -8.431224e-002f, 1.829928e-001f, 0.000000e+000f, -2.071068e-001f, 0.000000e+000f, -1.114156e-001f, 2.418184e-001f, 0.000000e+000f, -2.071068e-001f,
  0.000000e+000f, -9.879776e-002f, 2.144324e-001f, 0.000000e+000f, -2.071068e-001f, 0.000000e+000f, -9.879776e-002f, 2.144324e-001f, 0.000000e+000f, -2.071068e-001f,
  -2.287384e-002f, -4.992706e-002f, 2.161146e-001f, -2.638492e-002f, -1.434080e-001f, 0.000000e+000f, -1.318453e-001f, 2.861593e-001f, 0.000000e+000f, -2.071068e-001f,
  -2.645285e-002f, -4.123465e-002f, 2.141082e-001f, -1.756249e-002f, -1.647072e-001f, 0.000000e+000f, -1.183274e-001f, 2.568198e-001f, 0.000000e+000f, -2.071068e-001f,
  -2.871713e-002f, -3.459044e-002f, 2.103538e-001f, -9.716421e-003f, -1.836493e-001f, 0.000000e+000f, -1.073380e-001f, 2.329682e-001f, 0.000000e+000f, -2.071068e-001f,
  -2.822686e-002f, -3.303257e-002f, 2.046631e-001f, 1.382755e-003f, -2.104450e-001f, 0.000000e+000f, -9.844738e-002f, 2.136719e-001f, 0.000000e+000f, -2.071068e-001f,
  -2.364152e-002f, -3.892492e-002f, 1.958517e-001f, 1.959726e-002f, -2.544188e-001f, 0.000000e+000f, -9.125786e-002f, 1.980676e-001f, 0.000000e+000f, -2.071068e-001f,
  -1.685330e-002f, -4.863091e-002f, 1.849404e-001f, 4.142632e-002f, -3.071188e-001f, 0.000000e+000f, -8.544366e-002f, 1.854484e-001f, 0.000000e+000f, -2.071068e-001f,
  -9.909533e-003f, -5.851828e-002f, 1.736900e-001f, 6.264291e-002f, -3.583401e-001f, 0.000000e+000f, -8.075051e-002f, 1.752623e-001f, 0.000000e+000f, -2.071068e-001f,
  -1.764397e-003f, -7.052049e-002f, 1.613704e-001f, 8.580361e-002f, -4.142550e-001f, 0.000000e+000f, -7.698411e-002f, 1.670876e-001f, 0.000000e+000f, -2.071068e-001f,
  8.758088e-003f, -8.668114e-002f, 1.468774e-001f, 1.137674e-001f, -4.817656e-001f, 0.000000e+000f, -7.399760e-002f, 1.606057e-001f, 0.000000e+000f, -2.071068e-001f,
  1.807584e-002f, -1.008743e-001f, 1.337893e-001f, 1.383845e-001f, -5.411965e-001f, 0.000000e+000f, -7.168116e-002f, 1.555780e-001f, 0.000000e+000f, -2.071068e-001f,
  2.152504e-002f, -1.053325e-001f, 1.272173e-001f, 1.487854e-001f, -5.663064e-001f, 0.000000e+000f, -6.995397e-002f, 1.518293e-001f, 0.000000e+000f, -2.071068e-001f,
  2.152489e-002f, -1.043359e-001f, 1.250549e-001f, 1.504719e-001f, -5.703781e-001f, 0.000000e+000f, -6.875835e-002f, 1.492343e-001f, 0.000000e+000f, -2.071068e-001f,
  2.212251e-002f, -1.047501e-001f, 1.231387e-001f, 1.528615e-001f, -5.761471e-001f, 0.000000e+000f, -6.805571e-002f, 1.477093e-001f, 0.000000e+000f, -2.071068e-001f,
  2.365784e-002f, -1.071331e-001f, 1.210782e-001f, 1.567757e-001f, -5.855969e-001f, 0.000000e+000f, -6.782390e-002f, 1.472062e-001f, 0.000000e+000f, -2.071068e-001f,
  2.550864e-002f, -1.104441e-001f, 1.195461e-001f, 1.607625e-001f, -5.952218e-001f, 0.000000e+000f, -6.805571e-002f, 1.477093e-001f, 0.000000e+000f, -2.071068e-001f,
  2.701918e-002f, -1.135991e-001f, 1.192779e-001f, 1.632698e-001f, -6.012750e-001f, 0.000000e+000f, -6.875835e-002f, 1.492343e-001f, 0.000000e+000f, -2.071068e-001f,
  2.751344e-002f, -1.154733e-001f, 1.210174e-001f, 1.626937e-001f, -5.998841e-001f, 0.000000e+000f, -6.995397e-002f, 1.518293e-001f, 0.000000e+000f, -2.071068e-001f,
  2.635971e-002f, -1.149909e-001f, 1.254053e-001f, 1.575449e-001f, -5.874539e-001f, 0.000000e+000f, -7.168116e-002f, 1.555780e-001f, 0.000000e+000f, -2.071068e-001f,
  2.307337e-002f, -1.112803e-001f, 1.328326e-001f, 1.466996e-001f, -5.612709e-001f, 0.000000e+000f, -7.399760e-002f, 1.606057e-001f, 0.000000e+000f, -2.071068e-001f,
  1.741007e-002f, -1.038199e-001f, 1.433187e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -7.698411e-002f, 1.670876e-001f, 0.000000e+000f, -2.071068e-001f,
  1.741007e-002f, -1.038199e-001f, 1.433187e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -4.926983e-002f, 1.069361e-001f, 0.000000e+000f, -2.071068e-001f,
  1.741007e-002f, -1.038199e-001f, 1.433187e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -4.737483e-002f, 1.028232e-001f, 0.000000e+000f, -2.071068e-001f,
  1.741007e-002f, -1.038199e-001f, 1.433187e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -4.562021e-002f, 9.901490e-002f, 0.000000e+000f, -2.071068e-001f,
  1.741007e-002f, -1.038199e-001f, 1.433187e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -4.399092e-002f, 9.547865e-002f, 0.000000e+000f, -2.071068e-001f,
  1.741007e-002f, -1.038199e-001f, 1.433187e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -4.247399e-002f, 9.218628e-002f, 0.000000e+000f, -2.071068e-001f,
  1.741007e-002f, -1.038199e-001f, 1.433187e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -4.105819e-002f, 8.911341e-002f, 0.000000e+000f, -2.071068e-001f,
  1.741007e-002f, -1.038199e-001f, 1.433187e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -3.973373e-002f, 8.623878e-002f, 0.000000e+000f, -2.071068e-001f,
  -2.759443e-002f, 1.085232e-001f, -1.465239e-002f, 4.380921e-002f, -3.829230e-001f, 0.000000e+000f, -4.808454e-002f, 8.021204e-002f, 0.000000e+000f, -3.340893e-001f,
  -2.759443e-002f, 1.123864e-001f, -2.930478e-002f, 8.761843e-002f, -4.529230e-001f, 0.000000e+000f, -3.383374e-002f, 6.498768e-002f, 0.000000e+000f, -3.340893e-001f,
  -2.759443e-002f, 1.162496e-001f, -4.395718e-002f, 1.314276e-001f, -5.229230e-001f, 0.000000e+000f, -2.297514e-002f, 5.321278e-002f, 0.000000e+000f, -3.340893e-001f,
  -2.759443e-002f, 1.239760e-001f, -7.326196e-002f, 2.190461e-001f, -6.629230e-001f, 0.000000e+000f, -1.470771e-002f, 4.408142e-002f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -1.324516e-001f, 2.623497e-001f, 0.000000e+000f, -2.071068e-001f,
  0.000000e+000f, -3.270692e-002f, 6.478330e-002f, 0.000000e+000f, -2.071068e-001f, 0.000000e+000f, -1.283498e-001f, 2.542253e-001f, 0.000000e+000f, -2.071068e-001f,
  0.000000e+000f, -5.996179e-002f, 1.187676e-001f, 0.000000e+000f, -2.071068e-001f, 0.000000e+000f, -1.181017e-001f, 2.339265e-001f, 0.000000e+000f, -2.071068e-001f,
  0.000000e+000f, -7.992556e-002f, 1.583103e-001f, 0.000000e+000f, -2.071068e-001f, 0.000000e+000f, -1.056188e-001f, 2.092014e-001f, 0.000000e+000f, -2.071068e-001f,
  0.000000e+000f, -9.365741e-002f, 1.855092e-001f, 0.000000e+000f, -2.071068e-001f, 0.000000e+000f, -9.365741e-002f, 1.855092e-001f, 0.000000e+000f, -2.071068e-001f,
  -2.168374e-002f, -5.144272e-002f, 1.869646e-001f, -2.638492e-002f, -1.434080e-001f, 0.000000e+000f, -1.249855e-001f, 2.475615e-001f, 0.000000e+000f, -2.071068e-001f,
  -2.507653e-002f, -4.384617e-002f, 1.852288e-001f, -1.756249e-002f, -1.647072e-001f, 0.000000e+000f, -1.121709e-001f, 2.221793e-001f, 0.000000e+000f, -2.071068e-001f,
  -2.722300e-002f, -3.795482e-002f, 1.819808e-001f, -9.716421e-003f, -1.836493e-001f, 0.000000e+000f, -1.017533e-001f, 2.015449e-001f, 0.000000e+000f, -2.071068e-001f,
  -2.675825e-002f, -3.638984e-002f, 1.770576e-001f, 1.382755e-003f, -2.104450e-001f, 0.000000e+000f, -9.332526e-002f, 1.848513e-001f, 0.000000e+000f, -2.071068e-001f,
  -2.241147e-002f, -4.115105e-002f, 1.694348e-001f, 1.959726e-002f, -2.544188e-001f, 0.000000e+000f, -8.650980e-002f, 1.713518e-001f, 0.000000e+000f, -2.071068e-001f,
  -1.597643e-002f, -4.913135e-002f, 1.599952e-001f, 4.142632e-002f, -3.071188e-001f, 0.000000e+000f, -8.099811e-002f, 1.604347e-001f, 0.000000e+000f, -2.071068e-001f,
  -9.393950e-003f, -5.725562e-002f, 1.502623e-001f, 6.264291e-002f, -3.583401e-001f, 0.000000e+000f, -7.654914e-002f, 1.516225e-001f, 0.000000e+000f, -2.071068e-001f,
  -1.672597e-003f, -6.716866e-002f, 1.396044e-001f, 8.580361e-002f, -4.142550e-001f, 0.000000e+000f, -7.297870e-002f, 1.445505e-001f, 0.000000e+000f, -2.071068e-001f,
  8.302412e-003f, -8.059627e-002f, 1.270663e-001f, 1.137674e-001f, -4.817656e-001f, 0.000000e+000f, -7.014757e-002f, 1.389428e-001f, 0.000000e+000f, -2.071068e-001f,
  1.713537e-002f, -9.237541e-002f, 1.157435e-001f, 1.383845e-001f, -5.411965e-001f, 0.000000e+000f, -6.795166e-002f, 1.345933e-001f, 0.000000e+000f, -2.071068e-001f,
  2.040511e-002f, -9.598140e-002f, 1.100579e-001f, 1.487854e-001f, -5.663064e-001f, 0.000000e+000f, -6.631433e-002f, 1.313502e-001f, 0.000000e+000f, -2.071068e-001f,
  2.040497e-002f, -9.503668e-002f, 1.081872e-001f, 1.504719e-001f, -5.703781e-001f, 0.000000e+000f, -6.518091e-002f, 1.291052e-001f, 0.000000e+000f, -2.071068e-001f,
  2.097150e-002f, -9.532186e-002f, 1.065295e-001f, 1.528615e-001f, -5.761471e-001f, 0.000000e+000f, -6.451483e-002f, 1.277859e-001f, 0.000000e+000f, -2.071068e-001f,
  2.242694e-002f, -9.730473e-002f, 1.047469e-001f, 1.567757e-001f, -5.855969e-001f, 0.000000e+000f, -6.429509e-002f, 1.273507e-001f, 0.000000e+000f, -2.071068e-001f,
  2.418145e-002f, -1.001107e-001f, 1.034214e-001f, 1.607625e-001f, -5.952218e-001f, 0.000000e+000f, -6.451483e-002f, 1.277859e-001f, 0.000000e+000f, -2.071068e-001f,
  2.561340e-002f, -1.028299e-001f, 1.031894e-001f, 1.632698e-001f, -6.012750e-001f, 0.000000e+000f, -6.518091e-002f, 1.291052e-001f, 0.000000e+000f, -2.071068e-001f,
  2.608194e-002f, -1.045177e-001f, 1.046943e-001f, 1.626937e-001f, -5.998841e-001f, 0.000000e+000f, -6.631433e-002f, 1.313502e-001f, 0.000000e+000f, -2.071068e-001f,
  2.498824e-002f, -1.042679e-001f, 1.084904e-001f, 1.575449e-001f, -5.874539e-001f, 0.000000e+000f, -6.795166e-002f, 1.345933e-001f, 0.000000e+000f, -2.071068e-001f,
  2.187288e-002f, -1.013413e-001f, 1.149159e-001f, 1.466996e-001f, -5.612709e-001f, 0.000000e+000f, -7.014757e-002f, 1.389428e-001f, 0.000000e+000f, -2.071068e-001f,
  1.650424e-002f, -9.528748e-002f, 1.239876e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -7.297870e-002f, 1.445505e-001f, 0.000000e+000f, -2.071068e-001f,
  1.650424e-002f, -9.528748e-002f, 1.239876e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -4.670637e-002f, 9.251230e-002f, 0.000000e+000f, -2.071068e-001f,
  1.650424e-002f, -9.528748e-002f, 1.239876e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -4.490997e-002f, 8.895414e-002f, 0.000000e+000f, -2.071068e-001f,
  1.650424e-002f, -9.528748e-002f, 1.239876e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -4.324663e-002f, 8.565954e-002f, 0.000000e+000f, -2.071068e-001f,
  1.650424e-002f, -9.528748e-002f, 1.239876e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -4.170211e-002f, 8.260027e-002f, 0.000000e+000f, -2.071068e-001f,
  1.650424e-002f, -9.528748e-002f, 1.239876e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -4.026411e-002f, 7.975199e-002f, 0.000000e+000f, -2.071068e-001f,
  1.650424e-002f, -9.528748e-002f, 1.239876e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -3.892197e-002f, 7.709359e-002f, 0.000000e+000f, -2.071068e-001f,
  1.650424e-002f, -9.528748e-002f, 1.239876e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -3.766642e-002f, 7.460670e-002f, 0.000000e+000f, -2.071068e-001f,
  -2.459356e-002f, 9.672137e-002f, -1.305896e-002f, 4.380921e-002f, -3.829230e-001f, 0.000000e+000f, -4.808454e-002f, 8.021204e-002f, 0.000000e+000f, -3.340893e-001f,
  -2.459356e-002f, 1.001645e-001f, -2.611792e-002f, 8.761843e-002f, -4.529230e-001f, 0.000000e+000f, -3.383374e-002f, 6.498768e-002f, 0.000000e+000f, -3.340893e-001f,
  -2.459356e-002f, 1.036076e-001f, -3.917688e-002f, 1.314276e-001f, -5.229230e-001f, 0.000000e+000f, -2.297514e-002f, 5.321278e-002f, 0.000000e+000f, -3.340893e-001f,
  -2.459356e-002f, 1.104938e-001f, -6.529479e-002f, 2.190461e-001f, -6.629230e-001f, 0.000000e+000f, -1.470771e-002f, 4.408142e-002f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -1.284723e-001f, 2.442441e-001f, 0.000000e+000f, -2.071068e-001f,
  0.000000e+000f, -3.754932e-002f, 7.138660e-002f, 0.000000e+000f, -2.071068e-001f, 0.000000e+000f, -1.228625e-001f, 2.335790e-001f, 0.000000e+000f, -2.071068e-001f,
  0.000000e+000f, -6.673449e-002f, 1.268718e-001f, 0.000000e+000f, -2.071068e-001f, 0.000000e+000f, -1.097800e-001f, 2.087073e-001f, 0.000000e+000f, -2.071068e-001f,
  0.000000e+000f, -8.612789e-002f, 1.637414e-001f, 0.000000e+000f, -2.071068e-001f, 0.000000e+000f, -9.532639e-002f, 1.812290e-001f, 0.000000e+000f, -2.071068e-001f,
  -2.017772e-002f, -5.321337e-002f, 1.740954e-001f, -2.827235e-002f, -1.388513e-001f, 0.000000e+000f, -1.240254e-001f, 2.357899e-001f, 0.000000e+000f, -2.071068e-001f,
  -2.432315e-002f, -4.446451e-002f, 1.724455e-001f, -1.756249e-002f, -1.647072e-001f, 0.000000e+000f, -1.088009e-001f, 2.068460e-001f, 0.000000e+000f, -2.071068e-001f,
  -2.657870e-002f, -3.818677e-002f, 1.686630e-001f, -7.933287e-003f, -1.879541e-001f, 0.000000e+000f, -9.691947e-002f, 1.842577e-001f, 0.000000e+000f, -2.071068e-001f,
  -2.467098e-002f, -3.846582e-002f, 1.622984e-001f, 7.884464e-003f, -2.261416e-001f, 0.000000e+000f, -8.770783e-002f, 1.667451e-001f, 0.000000e+000f, -2.071068e-001f,
  -1.807457e-002f, -4.588485e-002f, 1.525613e-001f, 3.262401e-002f, -2.858681e-001f, 0.000000e+000f, -8.056768e-002f, 1.531706e-001f, 0.000000e+000f, -2.071068e-001f,
  -1.041933e-002f, -5.474137e-002f, 1.417301e-001f, 5.839226e-002f, -3.480782e-001f, 0.000000e+000f, -7.503923e-002f, 1.426602e-001f, 0.000000e+000f, -2.071068e-001f,
  -1.622347e-003f, -6.527980e-002f, 1.299699e-001f, 8.580361e-002f, -4.142550e-001f, 0.000000e+000f, -7.078618e-002f, 1.345746e-001f, 0.000000e+000f, -2.071068e-001f,
  1.002138e-002f, -8.003966e-002f, 1.159461e-001f, 1.193762e-001f, -4.953064e-001f, 0.000000e+000f, -6.756756e-002f, 1.284555e-001f, 0.000000e+000f, -2.071068e-001f,
  1.854375e-002f, -9.047267e-002f, 1.049779e-001f, 1.442778e-001f, -5.554242e-001f, 0.000000e+000f, -6.521330e-002f, 1.239798e-001f, 0.000000e+000f, -2.071068e-001f,
  1.988366e-002f, -9.105756e-002f, 1.012470e-001f, 1.501143e-001f, -5.695148e-001f, 0.000000e+000f, -6.360639e-002f, 1.209248e-001f, 0.000000e+000f, -2.071068e-001f,
  2.014459e-002f, -9.064090e-002f, 9.951180e-002f, 1.522166e-001f, -5.745901e-001f, 0.000000e+000f, -6.267073e-002f, 1.191460e-001f, 0.000000e+000f, -2.071068e-001f,
  2.175317e-002f, -9.265028e-002f, 9.751797e-002f, 1.567757e-001f, -5.855969e-001f, 0.000000e+000f, -6.236346e-002f, 1.185618e-001f, 0.000000e+000f, -2.071068e-001f,
  2.377763e-002f, -9.577417e-002f, 9.613983e-002f, 1.614336e-001f, -5.968420e-001f, 0.000000e+000f, -6.267073e-002f, 1.191460e-001f, 0.000000e+000f, -2.071068e-001f,
  2.517217e-002f, -9.856348e-002f, 9.640238e-002f, 1.634978e-001f, -6.018255e-001f, 0.000000e+000f, -6.360639e-002f, 1.209248e-001f, 0.000000e+000f, -2.071068e-001f,
  2.487642e-002f, -9.952930e-002f, 9.930745e-002f, 1.602363e-001f, -5.939515e-001f, 0.000000e+000f, -6.521330e-002f, 1.239798e-001f, 0.000000e+000f, -2.071068e-001f,
  2.199137e-002f, -9.734764e-002f, 1.055874e-001f, 1.493597e-001f, -5.676931e-001f, 0.000000e+000f, -6.756756e-002f, 1.284555e-001f, 0.000000e+000f, -2.071068e-001f,
  1.600840e-002f, -9.115080e-002f, 1.154308e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -7.078618e-002f, 1.345746e-001f, 0.000000e+000f, -2.071068e-001f,
  1.600840e-002f, -9.115080e-002f, 1.154308e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -4.494361e-002f, 8.544419e-002f, 0.000000e+000f, -2.071068e-001f,
  1.600840e-002f, -9.115080e-002f, 1.154308e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -4.290072e-002f, 8.156036e-002f, 0.000000e+000f, -2.071068e-001f,
  1.600840e-002f, -9.115080e-002f, 1.154308e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -4.103547e-002f, 7.801426e-002f, 0.000000e+000f, -2.071068e-001f,
  1.600840e-002f, -9.115080e-002f, 1.154308e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -3.932566e-002f, 7.476367e-002f, 0.000000e+000f, -2.071068e-001f,
  1.600840e-002f, -9.115080e-002f, 1.154308e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -3.775263e-002f, 7.177312e-002f, 0.000000e+000f, -2.071068e-001f,
  1.600840e-002f, -9.115080e-002f, 1.154308e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -3.630061e-002f, 6.901261e-002f, 0.000000e+000f, -2.071068e-001f,
  -2.321782e-002f, 9.131086e-002f, -1.232845e-002f, 4.380921e-002f, -3.829230e-001f, 0.000000e+000f, -4.749090e-002f, 7.922176e-002f, 0.000000e+000f, -3.340893e-001f,
  -2.321782e-002f, 9.456136e-002f, -2.465690e-002f, 8.761843e-002f, -4.529230e-001f, 0.000000e+000f, -3.322957e-002f, 6.382718e-002f, 0.000000e+000f, -3.340893e-001f,
  -2.321782e-002f, 1.043128e-001f, -6.164226e-002f, 2.190461e-001f, -6.629230e-001f, 0.000000e+000f, -2.244698e-002f, 5.198950e-002f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -1.243426e-001f, 2.275244e-001f, 0.000000e+000f, -2.071068e-001f,
  0.000000e+000f, -3.634232e-002f, 6.649982e-002f, 0.000000e+000f, -2.071068e-001f, 0.000000e+000f, -1.189131e-001f, 2.175893e-001f, 0.000000e+000f, -2.071068e-001f,
  0.000000e+000f, -6.832758e-002f, 1.250270e-001f, 0.000000e+000f, -2.071068e-001f, 0.000000e+000f, -1.038866e-001f, 1.900936e-001f, 0.000000e+000f, -2.071068e-001f,
  0.000000e+000f, -8.573071e-002f, 1.568716e-001f, 0.000000e+000f, -2.071068e-001f, 0.000000e+000f, -9.006295e-002f, 1.647988e-001f, 0.000000e+000f, -2.071068e-001f,
  -2.110610e-002f, -4.991632e-002f, 1.620059e-001f, -2.452318e-002f, -1.479026e-001f, 0.000000e+000f, -1.147309e-001f, 2.099367e-001f, 0.000000e+000f, -2.071068e-001f,
  -2.452562e-002f, -4.236681e-002f, 1.596411e-001f, -1.446648e-002f, -1.721816e-001f, 0.000000e+000f, -1.011428e-001f, 1.850729e-001f, 0.000000e+000f, -2.071068e-001f,
  -2.549371e-002f, -3.782840e-002f, 1.545780e-001f, -1.365548e-003f, -2.038101e-001f, 0.000000e+000f, -8.906253e-002f, 1.629682e-001f, 0.000000e+000f, -2.071068e-001f,
  -2.103940e-002f, -4.180663e-002f, 1.469433e-001f, 1.959726e-002f, -2.544188e-001f, 0.000000e+000f, -8.121350e-002f, 1.486059e-001f, 0.000000e+000f, -2.071068e-001f,
  -1.376709e-002f, -4.972171e-002f, 1.370771e-001f, 4.572840e-002f, -3.175049e-001f, 0.000000e+000f, -7.513034e-002f, 1.374748e-001f, 0.000000e+000f, -2.071068e-001f,
  -4.716134e-003f, -5.965908e-002f, 1.249560e-001f, 7.599213e-002f, -3.905680e-001f, 0.000000e+000f, -6.976176e-002f, 1.276513e-001f, 0.000000e+000f, -2.071068e-001f,
  5.852872e-003f, -7.214965e-002f, 1.124239e-001f, 1.080432e-001f, -4.679462e-001f, 0.000000e+000f, -6.633414e-002f, 1.213794e-001f, 0.000000e+000f, -2.071068e-001f,
  1.714168e-002f, -8.545262e-002f, 9.896838e-002f, 1.416689e-001f, -5.491257e-001f, 0.000000e+000f, -6.344407e-002f, 1.160911e-001f, 0.000000e+000f, -2.071068e-001f,
  1.928077e-002f, -8.698424e-002f, 9.460878e-002f, 1.498719e-001f, -5.689296e-001f, 0.000000e+000f, -6.177433e-002f, 1.130358e-001f, 0.000000e+000f, -2.071068e-001f,
  1.949705e-002f, -8.633668e-002f, 9.269971e-002f, 1.522166e-001f, -5.745901e-001f, 0.000000e+000f, -6.065622e-002f, 1.109898e-001f, 0.000000e+000f, -2.071068e-001f,
  2.105392e-002f, -8.817042e-002f, 9.084237e-002f, 1.567757e-001f, -5.855969e-001f, 0.000000e+000f, -6.035882e-002f, 1.104456e-001f, 0.000000e+000f, -2.071068e-001f,
  2.301331e-002f, -9.105415e-002f, 8.955857e-002f, 1.614336e-001f, -5.968420e-001f, 0.000000e+000f, -6.065622e-002f, 1.109898e-001f, 0.000000e+000f, -2.071068e-001f,
  2.445558e-002f, -9.396738e-002f, 9.006022e-002f, 1.633948e-001f, -6.015767e-001f, 0.000000e+000f, -6.177433e-002f, 1.130358e-001f, 0.000000e+000f, -2.071068e-001f,
  2.380447e-002f, -9.452131e-002f, 9.325387e-002f, 1.590018e-001f, -5.909711e-001f, 0.000000e+000f, -6.344407e-002f, 1.160911e-001f, 0.000000e+000f, -2.071068e-001f,
  1.969770e-002f, -9.127077e-002f, 1.010564e-001f, 1.437879e-001f, -5.542414e-001f, 0.000000e+000f, -6.633414e-002f, 1.213794e-001f, 0.000000e+000f, -2.071068e-001f,
  1.549382e-002f, -8.711572e-002f, 1.075290e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -4.492511e-002f, 8.220478e-002f, 0.000000e+000f, -2.071068e-001f,
  1.549382e-002f, -8.711572e-002f, 1.075290e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -4.248732e-002f, 7.774405e-002f, 0.000000e+000f, -2.071068e-001f,
  1.549382e-002f, -8.711572e-002f, 1.075290e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -4.059899e-002f, 7.428876e-002f, 0.000000e+000f, -2.071068e-001f,
  1.549382e-002f, -8.711572e-002f, 1.075290e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -3.887137e-002f, 7.112754e-002f, 0.000000e+000f, -2.071068e-001f,
  1.549382e-002f, -8.711572e-002f, 1.075290e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -3.703286e-002f, 6.776340e-002f, 0.000000e+000f, -2.071068e-001f,
  1.549382e-002f, -8.711572e-002f, 1.075290e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -3.559002e-002f, 6.512326e-002f, 0.000000e+000f, -2.071068e-001f,
  -2.191904e-002f, 8.620301e-002f, -1.163881e-002f, 4.380921e-002f, -3.829230e-001f, 0.000000e+000f, -4.778588e-002f, 7.971382e-002f, 0.000000e+000f, -3.340893e-001f,
  -2.191904e-002f, 8.927168e-002f, -2.327762e-002f, 8.761843e-002f, -4.529230e-001f, 0.000000e+000f, -3.342855e-002f, 6.420938e-002f, 0.000000e+000f, -3.340893e-001f,
  -2.191904e-002f, 9.847767e-002f, -5.819404e-002f, 2.190461e-001f, -6.629230e-001f, 0.000000e+000f, -2.244698e-002f, 5.198950e-002f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -1.222370e-001f, 2.196468e-001f, 0.000000e+000f, -2.071068e-001f,
  0.000000e+000f, -4.607181e-002f, 8.278613e-002f, 0.000000e+000f, -2.071068e-001f, 0.000000e+000f, -1.132222e-001f, 2.034482e-001f, 0.000000e+000f, -2.071068e-001f,
  0.000000e+000f, -7.670331e-002f, 1.378277e-001f, 0.000000e+000f, -2.071068e-001f, 0.000000e+000f, -9.517606e-002f, 1.710212e-001f, 0.000000e+000f, -2.071068e-001f,
  -1.919840e-002f, -5.263211e-002f, 1.565626e-001f, -2.827235e-002f, -1.388513e-001f, 0.000000e+000f, -1.180059e-001f, 2.120440e-001f, 0.000000e+000f, -2.071068e-001f,
  -2.411030e-002f, -4.244318e-002f, 1.541138e-001f, -1.446648e-002f, -1.721816e-001f, 0.000000e+000f, -9.943000e-002f, 1.786651e-001f, 0.000000e+000f, -2.071068e-001f,
  -2.469467e-002f, -3.812305e-002f, 1.482378e-001f, 1.382755e-003f, -2.104450e-001f, 0.000000e+000f, -8.612806e-002f, 1.547629e-001f, 0.000000e+000f, -2.071068e-001f,
  -1.719733e-002f, -4.545066e-002f, 1.371972e-001f, 3.262401e-002f, -2.858681e-001f, 0.000000e+000f, -7.665738e-002f, 1.377451e-001f, 0.000000e+000f, -2.071068e-001f,
  -7.384793e-003f, -5.580641e-002f, 1.241224e-001f, 6.696723e-002f, -3.687800e-001f, 0.000000e+000f, -6.992648e-002f, 1.256504e-001f, 0.000000e+000f, -2.071068e-001f,
  5.753758e-003f, -7.073841e-002f, 1.085315e-001f, 1.080432e-001f, -4.679462e-001f, 0.000000e+000f, -6.521082e-002f, 1.171769e-001f, 0.000000e+000f, -2.071068e-001f,
  1.764374e-002f, -8.424229e-002f, 9.440584e-002f, 1.442778e-001f, -5.554242e-001f, 0.000000e+000f, -6.204822e-002f, 1.114940e-001f, 0.000000e+000f, -2.071068e-001f,
  1.883135e-002f, -8.424577e-002f, 9.057753e-002f, 1.504719e-001f, -5.703781e-001f, 0.000000e+000f, -6.015420e-002f, 1.080907e-001f, 0.000000e+000f, -2.071068e-001f,
  2.009598e-002f, -8.523773e-002f, 8.827669e-002f, 1.551180e-001f, -5.815947e-001f, 0.000000e+000f, -5.936907e-002f, 1.066799e-001f, 0.000000e+000f, -2.071068e-001f,
  2.262360e-002f, -8.876735e-002f, 8.645780e-002f, 1.614336e-001f, -5.968420e-001f, 0.000000e+000f, -5.962905e-002f, 1.071470e-001f, 0.000000e+000f, -2.071068e-001f,
  2.408292e-002f, -9.183637e-002f, 8.726061e-002f, 1.631307e-001f, -6.009390e-001f, 0.000000e+000f, -6.095510e-002f, 1.095298e-001f, 0.000000e+000f, -2.071068e-001f,
  2.215229e-002f, -9.140076e-002f, 9.271154e-002f, 1.539352e-001f, -5.787393e-001f, 0.000000e+000f, -6.345657e-002f, 1.140247e-001f, 0.000000e+000f, -2.071068e-001f,
  1.523144e-002f, -8.513899e-002f, 1.038060e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -6.735062e-002f, 1.210219e-001f, 0.000000e+000f, -2.071068e-001f,
  1.523144e-002f, -8.513899e-002f, 1.038060e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -4.209414e-002f, 7.563868e-002f, 0.000000e+000f, -2.071068e-001f,
  1.523144e-002f, -8.513899e-002f, 1.038060e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -3.961801e-002f, 7.118934e-002f, 0.000000e+000f, -2.071068e-001f,
  1.523144e-002f, -8.513899e-002f, 1.038060e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -3.741701e-002f, 6.723438e-002f, 0.000000e+000f, -2.071068e-001f,
  1.523144e-002f, -8.513899e-002f, 1.038060e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -3.544769e-002f, 6.369573e-002f, 0.000000e+000f, -2.071068e-001f,
  -2.129715e-002f, 8.375726e-002f, -1.130859e-002f, 4.380921e-002f, -3.829230e-001f, 0.000000e+000f, -4.808454e-002f, 8.021204e-002f, 0.000000e+000f, -3.340893e-001f,
  -2.129715e-002f, 9.568366e-002f, -5.654296e-002f, 2.190461e-001f, -6.629230e-001f, 0.000000e+000f, -3.322957e-002f, 6.382718e-002f, 0.000000e+000f, -3.340893e-001f,
  -2.129715e-002f, 8.972046e-002f, -3.392578e-002f, 1.314276e-001f, -5.229230e-001f, 0.000000e+000f, -2.219190e-002f, 5.139871e-002f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -1.201115e-001f, 2.120723e-001f, 0.000000e+000f, -2.071068e-001f,
  0.000000e+000f, -5.437536e-002f, 9.600669e-002f, 0.000000e+000f, -2.071068e-001f, 0.000000e+000f, -1.070985e-001f, 1.890963e-001f, 0.000000e+000f, -2.071068e-001f,
  0.000000e+000f, -8.493167e-002f, 1.499578e-001f, 0.000000e+000f, -2.071068e-001f, 0.000000e+000f, -8.493167e-002f, 1.499578e-001f, 0.000000e+000f, -2.071068e-001f,
  -2.274024e-002f, -4.465244e-002f, 1.497311e-001f, -1.756249e-002f, -1.647072e-001f, 0.000000e+000f, -1.017203e-001f, 1.796003e-001f, 0.000000e+000f, -2.071068e-001f,
  -2.426527e-002f, -3.821881e-002f, 1.431259e-001f, 1.382755e-003f, -2.104450e-001f, 0.000000e+000f, -8.463047e-002f, 1.494260e-001f, 0.000000e+000f, -2.071068e-001f,
  -1.448797e-002f, -4.767021e-002f, 1.293333e-001f, 4.142632e-002f, -3.071188e-001f, 0.000000e+000f, -7.345180e-002f, 1.296886e-001f, 0.000000e+000f, -2.071068e-001f,
  -1.516767e-003f, -6.123703e-002f, 1.128503e-001f, 8.580361e-002f, -4.142550e-001f, 0.000000e+000f, -6.617952e-002f, 1.168485e-001f, 0.000000e+000f, -2.071068e-001f,
  1.553893e-002f, -8.042680e-002f, 9.356211e-002f, 1.383845e-001f, -5.411965e-001f, 0.000000e+000f, -6.162084e-002f, 1.087995e-001f, 0.000000e+000f, -2.071068e-001f,
  1.850391e-002f, -8.220239e-002f, 8.745398e-002f, 1.504719e-001f, -5.703781e-001f, 0.000000e+000f, -5.910824e-002f, 1.043632e-001f, 0.000000e+000f, -2.071068e-001f,
  2.033750e-002f, -8.386473e-002f, 8.467293e-002f, 1.567757e-001f, -5.855969e-001f, 0.000000e+000f, -5.830494e-002f, 1.029449e-001f, 0.000000e+000f, -2.071068e-001f,
  2.322709e-002f, -8.825360e-002f, 8.341393e-002f, 1.632698e-001f, -6.012750e-001f, 0.000000e+000f, -5.910824e-002f, 1.043632e-001f, 0.000000e+000f, -2.071068e-001f,
  2.266018e-002f, -8.967958e-002f, 8.769900e-002f, 1.575449e-001f, -5.874539e-001f, 0.000000e+000f, -6.162084e-002f, 1.087995e-001f, 0.000000e+000f, -2.071068e-001f,
  1.496660e-002f, -8.319066e-002f, 1.002263e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -6.617952e-002f, 1.168485e-001f, 0.000000e+000f, -2.071068e-001f,
  1.496660e-002f, -8.319066e-002f, 1.002263e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -4.072586e-002f, 7.190675e-002f, 0.000000e+000f, -2.071068e-001f,
  1.496660e-002f, -8.319066e-002f, 1.002263e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -3.781687e-002f, 6.677055e-002f, 0.000000e+000f, -2.071068e-001f,
  1.496660e-002f, -8.319066e-002f, 1.002263e-001f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -3.529575e-002f, 6.231918e-002f, 0.000000e+000f, -2.071068e-001f,
  -2.069290e-002f, 8.138089e-002f, -1.098774e-002f, 4.380921e-002f, -3.829230e-001f, 0.000000e+000f, -4.808454e-002f, 8.021204e-002f, 0.000000e+000f, -3.340893e-001f,
  -2.069290e-002f, 9.296892e-002f, -5.493872e-002f, 2.190461e-001f, -6.629230e-001f, 0.000000e+000f, -3.283863e-002f, 6.307628e-002f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -1.179713e-001f, 2.047879e-001f, 0.000000e+000f, -2.071068e-001f,
  0.000000e+000f, -7.118767e-002f, 1.235756e-001f, 0.000000e+000f, -2.071068e-001f, 0.000000e+000f, -9.407196e-002f, 1.633008e-001f, 0.000000e+000f, -2.071068e-001f,
  -2.233503e-002f, -4.452047e-002f, 1.445879e-001f, -1.756249e-002f, -1.647072e-001f, 0.000000e+000f, -9.990777e-002f, 1.734312e-001f, 0.000000e+000f, -2.071068e-001f,
  -1.996133e-002f, -4.153890e-002f, 1.322593e-001f, 1.959726e-002f, -2.544188e-001f, 0.000000e+000f, -7.705209e-002f, 1.337557e-001f, 0.000000e+000f, -2.071068e-001f,
  -1.489740e-003f, -6.019012e-002f, 1.089740e-001f, 8.580361e-002f, -4.142550e-001f, 0.000000e+000f, -6.500027e-002f, 1.128348e-001f, 0.000000e+000f, -2.071068e-001f,
  1.817432e-002f, -8.103898e-002f, 8.591024e-002f, 1.487854e-001f, -5.663064e-001f, 0.000000e+000f, -5.906449e-002f, 1.025308e-001f, 0.000000e+000f, -2.071068e-001f,
  1.997511e-002f, -8.177678e-002f, 8.176450e-002f, 1.567757e-001f, -5.855969e-001f, 0.000000e+000f, -5.726601e-002f, 9.940882e-002f, 0.000000e+000f, -2.071068e-001f,
  2.323052e-002f, -8.740424e-002f, 8.172345e-002f, 1.626937e-001f, -5.998841e-001f, 0.000000e+000f, -5.906449e-002f, 1.025308e-001f, 0.000000e+000f, -2.071068e-001f,
  1.469991e-002f, -8.127148e-002f, 9.678360e-002f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -6.500027e-002f, 1.128348e-001f, 0.000000e+000f, -2.071068e-001f,
  1.469991e-002f, -8.127148e-002f, 9.678360e-002f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -3.851868e-002f, 6.686509e-002f, 0.000000e+000f, -2.071068e-001f,
  1.469991e-002f, -8.127148e-002f, 9.678360e-002f, 1.296169e-001f, -5.200297e-001f, 0.000000e+000f, -3.466681e-002f, 6.017858e-002f, 0.000000e+000f, -2.071068e-001f,
  -2.010580e-002f, 9.033120e-002f, -5.338000e-002f, 2.190461e-001f, -6.629230e-001f, 0.000000e+000f, -4.662743e-002f, 7.778137e-002f, 0.000000e+000f, -3.340893e-001f,
  -1.199523e-001f, 1.942266e-001f, 0.000000e+000f, 0.000000e+000f, -3.340893e-001f,
  4.198304e-002f, 1.506862e-001f, -2.191893e-002f, -5.935943e-003f, -2.760041e-002f, -1.263704e-001f, 2.251327e-001f, 0.000000e+000f, 0.000000e+000f, -3.340893e-001f,
  3.752121e-002f, 1.327081e-001f, -4.009992e-002f, 1.324735e-002f, -1.873120e-001f, -7.596280e-002f, 1.521314e-001f, 0.000000e+000f, 0.000000e+000f, -3.340893e-001f,
  2.800256e-003f, 1.168239e-001f, -4.956002e-002f, 8.700226e-002f, -4.171482e-001f, -4.882217e-002f, 1.130772e-001f, 0.000000e+000f, 0.000000e+000f, -3.340893e-001f,
  -3.416217e-002f, 1.121568e-001f, -5.209455e-002f, 2.011518e-001f, -6.391997e-001f, -3.269721e-002f, 9.108447e-002f, 0.000000e+000f, 0.000000e+000f, -3.340893e-001f,
  -3.754711e-002f, 1.148198e-001f, -6.197580e-002f, 2.649431e-001f, -7.284901e-001f, -2.218430e-002f, 7.879370e-002f, 0.000000e+000f, 0.000000e+000f, -3.340893e-001f,
  // Total number of coefficients: 3485
  // Maximum number of elevation coefficients: 5



 	// Lite coefficients
	// 20 degrees loudspeakers
	// 22050 Hz sample rate
  // Coefficients
  // Generated by HRTFConv V5.90d on Wed Mar 03 18:32:45 1999
  0.000000e+000f, -5.797642e-002f, 1.584553e-001f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -1.694509e-002f, 4.631260e-002f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, -5.544483e-002f, 1.515362e-001f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -3.185865e-002f, 8.707282e-002f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, -4.843854e-002f, 1.323873e-001f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -3.997310e-002f, 1.092504e-001f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, -4.199306e-002f, 1.147712e-001f, 0.000000e+000f, -2.734412e-001f,
  -1.228483e-004f, -3.974579e-002f, 1.095468e-001f, 3.293479e-002f, -3.336640e-001f, 0.000000e+000f, -5.349483e-002f, 1.462066e-001f, 0.000000e+000f, -2.734412e-001f,
  -2.262839e-003f, -3.251759e-002f, 1.057768e-001f, 4.348571e-002f, -3.529568e-001f, 0.000000e+000f, -4.715918e-002f, 1.288907e-001f, 0.000000e+000f, -2.734412e-001f,
  -3.401413e-003f, -2.758248e-002f, 1.007936e-001f, 5.721852e-002f, -3.780679e-001f, 0.000000e+000f, -4.152660e-002f, 1.134963e-001f, 0.000000e+000f, -2.734412e-001f,
  -2.252163e-003f, -2.865783e-002f, 9.514792e-002f, 7.924948e-002f, -4.183526e-001f, 0.000000e+000f, -3.786689e-002f, 1.034939e-001f, 0.000000e+000f, -2.734412e-001f,
  8.152290e-005f, -3.262459e-002f, 8.855725e-002f, 1.068959e-001f, -4.689053e-001f, 0.000000e+000f, -3.503053e-002f, 9.574188e-002f, 0.000000e+000f, -2.734412e-001f,
  3.150118e-003f, -3.817565e-002f, 8.080696e-002f, 1.391016e-001f, -5.277950e-001f, 0.000000e+000f, -3.252736e-002f, 8.890046e-002f, 0.000000e+000f, -2.734412e-001f,
  6.896060e-003f, -4.562498e-002f, 7.318518e-002f, 1.731129e-001f, -5.899863e-001f, 0.000000e+000f, -3.092918e-002f, 8.453249e-002f, 0.000000e+000f, -2.734412e-001f,
  1.086790e-002f, -5.357382e-002f, 6.524123e-002f, 2.082251e-001f, -6.541905e-001f, 0.000000e+000f, -2.958165e-002f, 8.084955e-002f, 0.000000e+000f, -2.734412e-001f,
  1.152761e-002f, -5.439471e-002f, 6.255688e-002f, 2.166526e-001f, -6.696006e-001f, 0.000000e+000f, -2.880311e-002f, 7.872173e-002f, 0.000000e+000f, -2.734412e-001f,
  1.152655e-002f, -5.393523e-002f, 6.130897e-002f, 2.190497e-001f, -6.739837e-001f, 0.000000e+000f, -2.828178e-002f, 7.729687e-002f, 0.000000e+000f, -2.734412e-001f,
  1.206550e-002f, -5.502155e-002f, 6.025207e-002f, 2.236952e-001f, -6.824783e-001f, 0.000000e+000f, -2.814311e-002f, 7.691788e-002f, 0.000000e+000f, -2.734412e-001f,
  1.278889e-002f, -5.676907e-002f, 5.962462e-002f, 2.284194e-001f, -6.911167e-001f, 0.000000e+000f, -2.828178e-002f, 7.729687e-002f, 0.000000e+000f, -2.734412e-001f,
  1.338567e-002f, -5.858044e-002f, 6.011745e-002f, 2.304017e-001f, -6.947414e-001f, 0.000000e+000f, -2.880311e-002f, 7.872173e-002f, 0.000000e+000f, -2.734412e-001f,
  1.327486e-002f, -5.902410e-002f, 6.215775e-002f, 2.259557e-001f, -6.866118e-001f, 0.000000e+000f, -2.958165e-002f, 8.084955e-002f, 0.000000e+000f, -2.734412e-001f,
  1.199747e-002f, -5.727854e-002f, 6.692888e-002f, 2.104080e-001f, -6.581821e-001f, 0.000000e+000f, -3.092918e-002f, 8.453249e-002f, 0.000000e+000f, -2.734412e-001f,
  1.060829e-002f, -5.492549e-002f, 7.087473e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -2.094694e-002f, 5.725003e-002f, 0.000000e+000f, -2.734412e-001f,
  1.060829e-002f, -5.492549e-002f, 7.087473e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -1.981028e-002f, 5.414344e-002f, 0.000000e+000f, -2.734412e-001f,
  1.060829e-002f, -5.492549e-002f, 7.087473e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -1.892983e-002f, 5.173707e-002f, 0.000000e+000f, -2.734412e-001f,
  1.060829e-002f, -5.492549e-002f, 7.087473e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -1.812430e-002f, 4.953549e-002f, 0.000000e+000f, -2.734412e-001f,
  1.060829e-002f, -5.492549e-002f, 7.087473e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -1.726707e-002f, 4.719260e-002f, 0.000000e+000f, -2.734412e-001f,
  1.060829e-002f, -5.492549e-002f, 7.087473e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -1.659433e-002f, 4.535392e-002f, 0.000000e+000f, -2.734412e-001f,
  -4.057489e-002f, 1.064890e-001f, -1.785339e-002f, 6.442423e-002f, -4.479124e-001f, 0.000000e+000f, -5.477110e-002f, 7.891315e-002f, 0.000000e+000f, -3.745480e-001f,
  -4.057489e-002f, 1.137925e-001f, -3.570679e-002f, 1.288485e-001f, -5.379124e-001f, 0.000000e+000f, -3.954966e-002f, 6.282434e-002f, 0.000000e+000f, -3.745480e-001f,
  -4.057489e-002f, 1.357029e-001f, -8.926697e-002f, 3.221211e-001f, -8.079124e-001f, 0.000000e+000f, -2.785439e-002f, 5.019273e-002f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -7.986612e-002f, 1.926052e-001f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -2.334292e-002f, 5.629380e-002f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, -7.637870e-002f, 1.841949e-001f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -4.148618e-002f, 1.000481e-001f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, -6.824584e-002f, 1.645817e-001f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -5.354228e-002f, 1.291226e-001f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, -5.926062e-002f, 1.429130e-001f, 0.000000e+000f, -2.734412e-001f,
  1.102878e-003f, -5.840816e-002f, 1.344430e-001f, 2.899399e-002f, -3.264580e-001f, 0.000000e+000f, -7.710164e-002f, 1.859384e-001f, 0.000000e+000f, -2.734412e-001f,
  -2.245741e-003f, -4.855705e-002f, 1.301611e-001f, 4.023965e-002f, -3.470212e-001f, 0.000000e+000f, -6.763720e-002f, 1.631140e-001f, 0.000000e+000f, -2.734412e-001f,
  -4.381293e-003f, -4.137642e-002f, 1.252642e-001f, 5.033332e-002f, -3.654780e-001f, 0.000000e+000f, -6.025098e-002f, 1.453013e-001f, 0.000000e+000f, -2.734412e-001f,
  -4.231237e-003f, -3.927363e-002f, 1.193204e-001f, 6.692646e-002f, -3.958193e-001f, 0.000000e+000f, -5.452447e-002f, 1.314913e-001f, 0.000000e+000f, -2.734412e-001f,
  -1.563484e-003f, -4.254050e-002f, 1.116837e-001f, 9.300500e-002f, -4.435052e-001f, 0.000000e+000f, -5.008572e-002f, 1.207868e-001f, 0.000000e+000f, -2.734412e-001f,
  1.802771e-003f, -4.733296e-002f, 1.036636e-001f, 1.203600e-001f, -4.935251e-001f, 0.000000e+000f, -4.664890e-002f, 1.124985e-001f, 0.000000e+000f, -2.734412e-001f,
  5.861226e-003f, -5.365433e-002f, 9.530501e-002f, 1.495429e-001f, -5.468874e-001f, 0.000000e+000f, -4.400495e-002f, 1.061224e-001f, 0.000000e+000f, -2.734412e-001f,
  1.138478e-002f, -6.302263e-002f, 8.577361e-002f, 1.850349e-001f, -6.117862e-001f, 0.000000e+000f, -4.200406e-002f, 1.012970e-001f, 0.000000e+000f, -2.734412e-001f,
  1.534390e-002f, -6.953310e-002f, 7.844873e-002f, 2.109121e-001f, -6.591039e-001f, 0.000000e+000f, -4.054052e-002f, 9.776755e-002f, 0.000000e+000f, -2.734412e-001f,
  1.584128e-002f, -6.963288e-002f, 7.579668e-002f, 2.169006e-001f, -6.700542e-001f, 0.000000e+000f, -3.954156e-002f, 9.535848e-002f, 0.000000e+000f, -2.734412e-001f,
  1.587854e-002f, -6.919423e-002f, 7.452216e-002f, 2.190497e-001f, -6.739837e-001f, 0.000000e+000f, -3.895990e-002f, 9.395574e-002f, 0.000000e+000f, -2.734412e-001f,
  1.662098e-002f, -7.045200e-002f, 7.323748e-002f, 2.236952e-001f, -6.824783e-001f, 0.000000e+000f, -3.876888e-002f, 9.349507e-002f, 0.000000e+000f, -2.734412e-001f,
  1.761750e-002f, -7.253894e-002f, 7.247480e-002f, 2.284194e-001f, -6.911167e-001f, 0.000000e+000f, -3.895990e-002f, 9.395574e-002f, 0.000000e+000f, -2.734412e-001f,
  1.837260e-002f, -7.451769e-002f, 7.285519e-002f, 2.305057e-001f, -6.949317e-001f, 0.000000e+000f, -3.954156e-002f, 9.535848e-002f, 0.000000e+000f, -2.734412e-001f,
  1.838852e-002f, -7.544149e-002f, 7.499047e-002f, 2.272072e-001f, -6.889002e-001f, 0.000000e+000f, -4.054052e-002f, 9.776755e-002f, 0.000000e+000f, -2.734412e-001f,
  1.722946e-002f, -7.445721e-002f, 7.935764e-002f, 2.161282e-001f, -6.686418e-001f, 0.000000e+000f, -4.200406e-002f, 1.012970e-001f, 0.000000e+000f, -2.734412e-001f,
  1.461357e-002f, -7.096505e-002f, 8.614951e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -4.400495e-002f, 1.061224e-001f, 0.000000e+000f, -2.734412e-001f,
  1.461357e-002f, -7.096505e-002f, 8.614951e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -2.793965e-002f, 6.737929e-002f, 0.000000e+000f, -2.734412e-001f,
  1.461357e-002f, -7.096505e-002f, 8.614951e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -2.666967e-002f, 6.431660e-002f, 0.000000e+000f, -2.734412e-001f,
  1.461357e-002f, -7.096505e-002f, 8.614951e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -2.551012e-002f, 6.152022e-002f, 0.000000e+000f, -2.734412e-001f,
  1.461357e-002f, -7.096505e-002f, 8.614951e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -2.444720e-002f, 5.895688e-002f, 0.000000e+000f, -2.734412e-001f,
  1.461357e-002f, -7.096505e-002f, 8.614951e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -2.346931e-002f, 5.659861e-002f, 0.000000e+000f, -2.734412e-001f,
  1.461357e-002f, -7.096505e-002f, 8.614951e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -2.256664e-002f, 5.442174e-002f, 0.000000e+000f, -2.734412e-001f,
  -4.552577e-002f, 1.194826e-001f, -2.003184e-002f, 6.442423e-002f, -4.479124e-001f, 0.000000e+000f, -5.443301e-002f, 7.842604e-002f, 0.000000e+000f, -3.745480e-001f,
  -4.552577e-002f, 1.276773e-001f, -4.006368e-002f, 1.288485e-001f, -5.379124e-001f, 0.000000e+000f, -3.931425e-002f, 6.245038e-002f, 0.000000e+000f, -3.745480e-001f,
  -4.552577e-002f, 1.522612e-001f, -1.001592e-001f, 3.221211e-001f, -8.079124e-001f, 0.000000e+000f, -2.785439e-002f, 5.019273e-002f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -1.082629e-001f, 2.347582e-001f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -2.673388e-002f, 5.797000e-002f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, -1.049102e-001f, 2.274882e-001f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -4.901139e-002f, 1.062767e-001f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, -9.653359e-002f, 2.093243e-001f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -6.532931e-002f, 1.416607e-001f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, -8.633036e-002f, 1.871995e-001f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -7.655341e-002f, 1.659991e-001f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, -7.655341e-002f, 1.659991e-001f, 0.000000e+000f, -2.734412e-001f,
  6.002764e-004f, -7.652415e-002f, 1.631132e-001f, 3.097857e-002f, -3.300869e-001f, 0.000000e+000f, -1.021603e-001f, 2.215253e-001f, 0.000000e+000f, -2.734412e-001f,
  -3.044224e-003f, -6.656205e-002f, 1.586477e-001f, 4.023965e-002f, -3.470212e-001f, 0.000000e+000f, -9.168591e-002f, 1.988126e-001f, 0.000000e+000f, -2.734412e-001f,
  -5.615469e-003f, -5.871343e-002f, 1.537187e-001f, 4.846444e-002f, -3.620607e-001f, 0.000000e+000f, -8.317078e-002f, 1.803483e-001f, 0.000000e+000f, -2.734412e-001f,
  -6.268053e-003f, -5.470858e-002f, 1.481030e-001f, 6.010119e-002f, -3.833390e-001f, 0.000000e+000f, -7.628192e-002f, 1.654104e-001f, 0.000000e+000f, -2.734412e-001f,
  -4.205599e-003f, -5.588935e-002f, 1.409657e-001f, 7.924948e-002f, -4.183526e-001f, 0.000000e+000f, -7.071112e-002f, 1.533307e-001f, 0.000000e+000f, -2.734412e-001f,
  -6.034366e-004f, -5.994983e-002f, 1.328331e-001f, 1.023302e-001f, -4.605567e-001f, 0.000000e+000f, -6.620599e-002f, 1.435617e-001f, 0.000000e+000f, -2.734412e-001f,
  3.243809e-003f, -6.455411e-002f, 1.247273e-001f, 1.248850e-001f, -5.017993e-001f, 0.000000e+000f, -6.256951e-002f, 1.356763e-001f, 0.000000e+000f, -2.734412e-001f,
  7.945210e-003f, -7.079916e-002f, 1.161632e-001f, 1.495429e-001f, -5.468874e-001f, 0.000000e+000f, -5.965111e-002f, 1.293480e-001f, 0.000000e+000f, -2.734412e-001f,
  1.416857e-002f, -7.982213e-002f, 1.064665e-001f, 1.791440e-001f, -6.010144e-001f, 0.000000e+000f, -5.733701e-002f, 1.243301e-001f, 0.000000e+000f, -2.734412e-001f,
  1.962013e-002f, -8.769002e-002f, 9.789402e-002f, 2.048337e-001f, -6.479892e-001f, 0.000000e+000f, -5.554212e-002f, 1.204381e-001f, 0.000000e+000f, -2.734412e-001f,
  2.150498e-002f, -8.974659e-002f, 9.349092e-002f, 2.155399e-001f, -6.675660e-001f, 0.000000e+000f, -5.420381e-002f, 1.175360e-001f, 0.000000e+000f, -2.734412e-001f,
  2.136484e-002f, -8.870266e-002f, 9.188620e-002f, 2.172665e-001f, -6.707231e-001f, 0.000000e+000f, -5.327738e-002f, 1.155272e-001f, 0.000000e+000f, -2.734412e-001f,
  2.164039e-002f, -8.868717e-002f, 9.055697e-002f, 2.197081e-001f, -6.751877e-001f, 0.000000e+000f, -5.273294e-002f, 1.143466e-001f, 0.000000e+000f, -2.734412e-001f,
  2.253064e-002f, -9.002225e-002f, 8.926602e-002f, 2.236952e-001f, -6.824783e-001f, 0.000000e+000f, -5.255333e-002f, 1.139571e-001f, 0.000000e+000f, -2.734412e-001f,
  2.366060e-002f, -9.208024e-002f, 8.841553e-002f, 2.277401e-001f, -6.898746e-001f, 0.000000e+000f, -5.273294e-002f, 1.143466e-001f, 0.000000e+000f, -2.734412e-001f,
  2.464250e-002f, -9.422209e-002f, 8.844304e-002f, 2.302755e-001f, -6.945107e-001f, 0.000000e+000f, -5.327738e-002f, 1.155272e-001f, 0.000000e+000f, -2.734412e-001f,
  2.508141e-002f, -9.579575e-002f, 8.979162e-002f, 2.296935e-001f, -6.934465e-001f, 0.000000e+000f, -5.420381e-002f, 1.175360e-001f, 0.000000e+000f, -2.734412e-001f,
  2.460423e-002f, -9.617347e-002f, 9.285436e-002f, 2.244768e-001f, -6.839076e-001f, 0.000000e+000f, -5.554212e-002f, 1.204381e-001f, 0.000000e+000f, -2.734412e-001f,
  2.290782e-002f, -9.482196e-002f, 9.790027e-002f, 2.134009e-001f, -6.636547e-001f, 0.000000e+000f, -5.733701e-002f, 1.243301e-001f, 0.000000e+000f, -2.734412e-001f,
  1.980949e-002f, -9.137949e-002f, 1.050039e-001f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -5.965111e-002f, 1.293480e-001f, 0.000000e+000f, -2.734412e-001f,
  1.980949e-002f, -9.137949e-002f, 1.050039e-001f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -3.817671e-002f, 8.278273e-002f, 0.000000e+000f, -2.734412e-001f,
  1.980949e-002f, -9.137949e-002f, 1.050039e-001f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -3.670837e-002f, 7.959878e-002f, 0.000000e+000f, -2.734412e-001f,
  1.980949e-002f, -9.137949e-002f, 1.050039e-001f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -3.534880e-002f, 7.665068e-002f, 0.000000e+000f, -2.734412e-001f,
  1.980949e-002f, -9.137949e-002f, 1.050039e-001f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -3.408635e-002f, 7.391315e-002f, 0.000000e+000f, -2.734412e-001f,
  1.980949e-002f, -9.137949e-002f, 1.050039e-001f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -3.291096e-002f, 7.136442e-002f, 0.000000e+000f, -2.734412e-001f,
  1.980949e-002f, -9.137949e-002f, 1.050039e-001f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -3.181392e-002f, 6.898561e-002f, 0.000000e+000f, -2.734412e-001f,
  1.980949e-002f, -9.137949e-002f, 1.050039e-001f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -3.078767e-002f, 6.676027e-002f, 0.000000e+000f, -2.734412e-001f,
  -5.108075e-002f, 1.340617e-001f, -2.247609e-002f, 6.442423e-002f, -4.479124e-001f, 0.000000e+000f, -5.511342e-002f, 7.940636e-002f, 0.000000e+000f, -3.745480e-001f,
  -5.108075e-002f, 1.432563e-001f, -4.495218e-002f, 1.288485e-001f, -5.379124e-001f, 0.000000e+000f, -4.002905e-002f, 6.358584e-002f, 0.000000e+000f, -3.745480e-001f,
  -5.108075e-002f, 1.524508e-001f, -6.742828e-002f, 1.932727e-001f, -6.279124e-001f, 0.000000e+000f, -2.850979e-002f, 5.137373e-002f, 0.000000e+000f, -3.745480e-001f,
  -5.108075e-002f, 1.708399e-001f, -1.123805e-001f, 3.221211e-001f, -8.079124e-001f, 0.000000e+000f, -1.971504e-002f, 4.192573e-002f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -1.449539e-001f, 2.868840e-001f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -3.579418e-002f, 7.084168e-002f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, -1.404650e-001f, 2.779998e-001f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -6.562169e-002f, 1.298745e-001f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, -1.292495e-001f, 2.558028e-001f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -8.746988e-002f, 1.731151e-001f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, -1.155883e-001f, 2.287654e-001f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -1.024979e-001f, 2.028577e-001f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, -1.024979e-001f, 2.028577e-001f, 0.000000e+000f, -2.734412e-001f,
  8.037143e-004f, -1.023066e-001f, 1.993309e-001f, 3.097857e-002f, -3.300869e-001f, 0.000000e+000f, -1.367831e-001f, 2.707129e-001f, 0.000000e+000f, -2.734412e-001f,
  -4.075933e-003f, -8.989185e-002f, 1.938739e-001f, 4.023965e-002f, -3.470212e-001f, 0.000000e+000f, -1.227589e-001f, 2.429570e-001f, 0.000000e+000f, -2.734412e-001f,
  -7.518591e-003f, -8.003487e-002f, 1.878504e-001f, 4.846444e-002f, -3.620607e-001f, 0.000000e+000f, -1.113579e-001f, 2.203929e-001f, 0.000000e+000f, -2.734412e-001f,
  -8.392340e-003f, -7.483813e-002f, 1.809878e-001f, 6.010119e-002f, -3.833390e-001f, 0.000000e+000f, -1.021344e-001f, 2.021382e-001f, 0.000000e+000f, -2.734412e-001f,
  -5.630907e-003f, -7.589641e-002f, 1.722658e-001f, 7.924948e-002f, -4.183526e-001f, 0.000000e+000f, -9.467562e-002f, 1.873763e-001f, 0.000000e+000f, -2.734412e-001f,
  -8.079456e-004f, -8.042017e-002f, 1.623274e-001f, 1.023302e-001f, -4.605567e-001f, 0.000000e+000f, -8.864367e-002f, 1.754382e-001f, 0.000000e+000f, -2.734412e-001f,
  4.343159e-003f, -8.560993e-002f, 1.524219e-001f, 1.248850e-001f, -5.017993e-001f, 0.000000e+000f, -8.377476e-002f, 1.658019e-001f, 0.000000e+000f, -2.734412e-001f,
  1.063790e-002f, -9.278006e-002f, 1.419561e-001f, 1.495429e-001f, -5.468874e-001f, 0.000000e+000f, -7.986729e-002f, 1.580685e-001f, 0.000000e+000f, -2.734412e-001f,
  1.897040e-002f, -1.032839e-001f, 1.301063e-001f, 1.791440e-001f, -6.010144e-001f, 0.000000e+000f, -7.676893e-002f, 1.519364e-001f, 0.000000e+000f, -2.734412e-001f,
  2.626953e-002f, -1.124368e-001f, 1.196304e-001f, 2.048337e-001f, -6.479892e-001f, 0.000000e+000f, -7.436574e-002f, 1.471802e-001f, 0.000000e+000f, -2.734412e-001f,
  2.879318e-002f, -1.147127e-001f, 1.142497e-001f, 2.155399e-001f, -6.675660e-001f, 0.000000e+000f, -7.257386e-002f, 1.436338e-001f, 0.000000e+000f, -2.734412e-001f,
  2.860554e-002f, -1.133505e-001f, 1.122887e-001f, 2.172665e-001f, -6.707231e-001f, 0.000000e+000f, -7.133346e-002f, 1.411789e-001f, 0.000000e+000f, -2.734412e-001f,
  2.897448e-002f, -1.132599e-001f, 1.106643e-001f, 2.197081e-001f, -6.751877e-001f, 0.000000e+000f, -7.060451e-002f, 1.397362e-001f, 0.000000e+000f, -2.734412e-001f,
  3.016644e-002f, -1.148218e-001f, 1.090867e-001f, 2.236952e-001f, -6.824783e-001f, 0.000000e+000f, -7.036402e-002f, 1.392602e-001f, 0.000000e+000f, -2.734412e-001f,
  3.167934e-002f, -1.172909e-001f, 1.080474e-001f, 2.277401e-001f, -6.898746e-001f, 0.000000e+000f, -7.060451e-002f, 1.397362e-001f, 0.000000e+000f, -2.734412e-001f,
  3.299402e-002f, -1.199099e-001f, 1.080810e-001f, 2.302755e-001f, -6.945107e-001f, 0.000000e+000f, -7.133346e-002f, 1.411789e-001f, 0.000000e+000f, -2.734412e-001f,
  3.358168e-002f, -1.219056e-001f, 1.097290e-001f, 2.296935e-001f, -6.934465e-001f, 0.000000e+000f, -7.257386e-002f, 1.436338e-001f, 0.000000e+000f, -2.734412e-001f,
  3.294278e-002f, -1.225323e-001f, 1.134718e-001f, 2.244768e-001f, -6.839076e-001f, 0.000000e+000f, -7.436574e-002f, 1.471802e-001f, 0.000000e+000f, -2.734412e-001f,
  3.067144e-002f, -1.211526e-001f, 1.196381e-001f, 2.134009e-001f, -6.636547e-001f, 0.000000e+000f, -7.676893e-002f, 1.519364e-001f, 0.000000e+000f, -2.734412e-001f,
  2.652307e-002f, -1.173286e-001f, 1.283191e-001f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -7.986729e-002f, 1.580685e-001f, 0.000000e+000f, -2.734412e-001f,
  2.652307e-002f, -1.173286e-001f, 1.283191e-001f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -5.111507e-002f, 1.011638e-001f, 0.000000e+000f, -2.734412e-001f,
  2.652307e-002f, -1.173286e-001f, 1.283191e-001f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -4.914910e-002f, 9.727293e-002f, 0.000000e+000f, -2.734412e-001f,
  2.652307e-002f, -1.173286e-001f, 1.283191e-001f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -4.732876e-002f, 9.367023e-002f, 0.000000e+000f, -2.734412e-001f,
  2.652307e-002f, -1.173286e-001f, 1.283191e-001f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -4.563845e-002f, 9.032486e-002f, 0.000000e+000f, -2.734412e-001f,
  2.652307e-002f, -1.173286e-001f, 1.283191e-001f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -4.406471e-002f, 8.721021e-002f, 0.000000e+000f, -2.734412e-001f,
  2.652307e-002f, -1.173286e-001f, 1.283191e-001f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -4.259589e-002f, 8.430320e-002f, 0.000000e+000f, -2.734412e-001f,
  2.652307e-002f, -1.173286e-001f, 1.283191e-001f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -4.122183e-002f, 8.158375e-002f, 0.000000e+000f, -2.734412e-001f,
  -5.731355e-002f, 1.504197e-001f, -2.521859e-002f, 6.442423e-002f, -4.479124e-001f, 0.000000e+000f, -5.511342e-002f, 7.940636e-002f, 0.000000e+000f, -3.745480e-001f,
  -5.731355e-002f, 1.607362e-001f, -5.043718e-002f, 1.288485e-001f, -5.379124e-001f, 0.000000e+000f, -4.002905e-002f, 6.358584e-002f, 0.000000e+000f, -3.745480e-001f,
  -5.731355e-002f, 1.710526e-001f, -7.565577e-002f, 1.932727e-001f, -6.279124e-001f, 0.000000e+000f, -2.850979e-002f, 5.137373e-002f, 0.000000e+000f, -3.745480e-001f,
  -5.731355e-002f, 1.916855e-001f, -1.260930e-001f, 3.221211e-001f, -8.079124e-001f, 0.000000e+000f, -1.971504e-002f, 4.192573e-002f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, 0.000000e+000f, 3.514500e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 0.000000e+000f, 8.678527e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 3.405663e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 0.000000e+000f, 1.591040e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 3.133736e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 0.000000e+000f, 2.120763e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 2.802512e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 0.000000e+000f, 2.485127e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 2.485127e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.948656e-003f, 2.441922e-001f, 0.000000e+000f, -5.664578e-002f, 0.000000e+000f, 0.000000e+000f, 3.316393e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 9.882359e-003f, 2.375071e-001f, 0.000000e+000f, -7.358009e-002f, 0.000000e+000f, 0.000000e+000f, 2.976368e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 1.822930e-002f, 2.301279e-001f, 0.000000e+000f, -8.861951e-002f, 0.000000e+000f, 0.000000e+000f, 2.699944e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 2.034776e-002f, 2.217209e-001f, 0.000000e+000f, -1.098979e-001f, 0.000000e+000f, 0.000000e+000f, 2.476313e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 1.365249e-002f, 2.110358e-001f, 0.000000e+000f, -1.449114e-001f, 0.000000e+000f, 0.000000e+000f, 2.295471e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 1.958915e-003f, 1.988608e-001f, 0.000000e+000f, -1.871156e-001f, 0.000000e+000f, 0.000000e+000f, 2.149222e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.053027e-002f, 1.867258e-001f, 0.000000e+000f, -2.283581e-001f, 0.000000e+000f, 0.000000e+000f, 2.031172e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.579226e-002f, 1.739047e-001f, 0.000000e+000f, -2.734463e-001f, 0.000000e+000f, 0.000000e+000f, 1.936433e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -4.599493e-002f, 1.593880e-001f, 0.000000e+000f, -3.275733e-001f, 0.000000e+000f, 0.000000e+000f, 1.861312e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -6.369215e-002f, 1.465544e-001f, 0.000000e+000f, -3.745481e-001f, 0.000000e+000f, 0.000000e+000f, 1.803045e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -6.981088e-002f, 1.399627e-001f, 0.000000e+000f, -3.941249e-001f, 0.000000e+000f, 0.000000e+000f, 1.759599e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -6.935595e-002f, 1.375603e-001f, 0.000000e+000f, -3.972820e-001f, 0.000000e+000f, 0.000000e+000f, 1.729525e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -7.025046e-002f, 1.355703e-001f, 0.000000e+000f, -4.017465e-001f, 0.000000e+000f, 0.000000e+000f, 1.711851e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -7.314045e-002f, 1.336377e-001f, 0.000000e+000f, -4.090371e-001f, 0.000000e+000f, 0.000000e+000f, 1.706020e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -7.680858e-002f, 1.323644e-001f, 0.000000e+000f, -4.164334e-001f, 0.000000e+000f, 0.000000e+000f, 1.711851e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -7.999611e-002f, 1.324056e-001f, 0.000000e+000f, -4.210695e-001f, 0.000000e+000f, 0.000000e+000f, 1.729525e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -8.142092e-002f, 1.344245e-001f, 0.000000e+000f, -4.200054e-001f, 0.000000e+000f, 0.000000e+000f, 1.759599e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -7.987187e-002f, 1.390097e-001f, 0.000000e+000f, -4.104664e-001f, 0.000000e+000f, 0.000000e+000f, 1.803045e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -7.436486e-002f, 1.465638e-001f, 0.000000e+000f, -3.902135e-001f, 0.000000e+000f, 0.000000e+000f, 1.861312e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -6.430686e-002f, 1.571985e-001f, 0.000000e+000f, -3.579124e-001f, 0.000000e+000f, 0.000000e+000f, 1.936433e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -6.430686e-002f, 1.571985e-001f, 0.000000e+000f, -3.579124e-001f, 0.000000e+000f, 0.000000e+000f, 1.239317e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -6.430686e-002f, 1.571985e-001f, 0.000000e+000f, -3.579124e-001f, 0.000000e+000f, 0.000000e+000f, 1.191651e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -6.430686e-002f, 1.571985e-001f, 0.000000e+000f, -3.579124e-001f, 0.000000e+000f, 0.000000e+000f, 1.147516e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -6.430686e-002f, 1.571985e-001f, 0.000000e+000f, -3.579124e-001f, 0.000000e+000f, 0.000000e+000f, 1.106533e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -6.430686e-002f, 1.571985e-001f, 0.000000e+000f, -3.579124e-001f, 0.000000e+000f, 0.000000e+000f, 1.068377e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -6.430686e-002f, 1.571985e-001f, 0.000000e+000f, -3.579124e-001f, 0.000000e+000f, 0.000000e+000f, 1.032764e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -6.430686e-002f, 1.571985e-001f, 0.000000e+000f, -3.579124e-001f, 0.000000e+000f, 0.000000e+000f, 9.994494e-002f, 0.000000e+000f, 0.000000e+000f,
  -6.430686e-002f, 1.687737e-001f, -2.829572e-002f, 6.442423e-002f, -4.479124e-001f, -5.909882e-002f, 8.339176e-002f, 0.000000e+000f, 0.000000e+000f, -3.745480e-001f,
  -6.430686e-002f, 1.803489e-001f, -5.659145e-002f, 1.288485e-001f, -5.379124e-001f, -4.635052e-002f, 6.990731e-002f, 0.000000e+000f, 0.000000e+000f, -3.745480e-001f,
  -6.430686e-002f, 1.919242e-001f, -8.488717e-002f, 1.932727e-001f, -6.279124e-001f, -3.603890e-002f, 5.890285e-002f, 0.000000e+000f, 0.000000e+000f, -3.745480e-001f,
  -6.430686e-002f, 2.150746e-001f, -1.414786e-001f, 3.221211e-001f, -8.079124e-001f, -2.769523e-002f, 4.990591e-002f, 0.000000e+000f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -1.790174e-001f, 3.055128e-001f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -4.420565e-002f, 7.544176e-002f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, -1.734736e-001f, 2.960517e-001f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -8.104248e-002f, 1.383078e-001f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, -1.596225e-001f, 2.724133e-001f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -1.080249e-001f, 1.843563e-001f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, -1.427510e-001f, 2.436202e-001f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -1.265844e-001f, 2.160301e-001f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, -1.265844e-001f, 2.160301e-001f, 0.000000e+000f, -2.734412e-001f,
  9.925833e-004f, -1.260777e-001f, 2.122744e-001f, 3.097857e-002f, -3.300869e-001f, 0.000000e+000f, -1.689265e-001f, 2.882915e-001f, 0.000000e+000f, -2.734412e-001f,
  -5.033758e-003f, -1.123879e-001f, 2.064631e-001f, 4.023965e-002f, -3.470212e-001f, 0.000000e+000f, -1.516067e-001f, 2.587334e-001f, 0.000000e+000f, -2.734412e-001f,
  -9.285424e-003f, -1.013732e-001f, 2.000484e-001f, 4.846444e-002f, -3.620607e-001f, 0.000000e+000f, -1.375265e-001f, 2.347041e-001f, 0.000000e+000f, -2.734412e-001f,
  -1.036450e-002f, -9.524937e-002f, 1.927402e-001f, 6.010119e-002f, -3.833390e-001f, 0.000000e+000f, -1.261355e-001f, 2.152640e-001f, 0.000000e+000f, -2.734412e-001f,
  -6.954143e-003f, -9.562692e-002f, 1.834518e-001f, 7.924948e-002f, -4.183526e-001f, 0.000000e+000f, -1.169239e-001f, 1.995435e-001f, 0.000000e+000f, -2.734412e-001f,
  -9.978090e-004f, -9.959046e-002f, 1.728681e-001f, 1.023302e-001f, -4.605567e-001f, 0.000000e+000f, -1.094745e-001f, 1.868302e-001f, 0.000000e+000f, -2.734412e-001f,
  5.363781e-003f, -1.042661e-001f, 1.623193e-001f, 1.248850e-001f, -5.017993e-001f, 0.000000e+000f, -1.034614e-001f, 1.765682e-001f, 0.000000e+000f, -2.734412e-001f,
  1.313775e-002f, -1.110025e-001f, 1.511740e-001f, 1.495429e-001f, -5.468874e-001f, 0.000000e+000f, -9.863572e-002f, 1.683326e-001f, 0.000000e+000f, -2.734412e-001f,
  2.342835e-002f, -1.211702e-001f, 1.385547e-001f, 1.791440e-001f, -6.010144e-001f, 0.000000e+000f, -9.480927e-002f, 1.618024e-001f, 0.000000e+000f, -2.734412e-001f,
  3.244275e-002f, -1.300172e-001f, 1.273986e-001f, 2.048337e-001f, -6.479892e-001f, 0.000000e+000f, -9.184134e-002f, 1.567373e-001f, 0.000000e+000f, -2.734412e-001f,
  3.555944e-002f, -1.319786e-001f, 1.216685e-001f, 2.155399e-001f, -6.675660e-001f, 0.000000e+000f, -8.962838e-002f, 1.529606e-001f, 0.000000e+000f, -2.734412e-001f,
  3.532770e-002f, -1.303594e-001f, 1.195801e-001f, 2.172665e-001f, -6.707231e-001f, 0.000000e+000f, -8.809649e-002f, 1.503463e-001f, 0.000000e+000f, -2.734412e-001f,
  3.578334e-002f, -1.301234e-001f, 1.178502e-001f, 2.197081e-001f, -6.751877e-001f, 0.000000e+000f, -8.719623e-002f, 1.488099e-001f, 0.000000e+000f, -2.734412e-001f,
  3.725541e-002f, -1.316512e-001f, 1.161702e-001f, 2.236952e-001f, -6.824783e-001f, 0.000000e+000f, -8.689923e-002f, 1.483030e-001f, 0.000000e+000f, -2.734412e-001f,
  3.912384e-002f, -1.341913e-001f, 1.150634e-001f, 2.277401e-001f, -6.898746e-001f, 0.000000e+000f, -8.719623e-002f, 1.488099e-001f, 0.000000e+000f, -2.734412e-001f,
  4.074746e-002f, -1.369832e-001f, 1.150992e-001f, 2.302755e-001f, -6.945107e-001f, 0.000000e+000f, -8.809649e-002f, 1.503463e-001f, 0.000000e+000f, -2.734412e-001f,
  4.147322e-002f, -1.392501e-001f, 1.168542e-001f, 2.296935e-001f, -6.934465e-001f, 0.000000e+000f, -8.962838e-002f, 1.529606e-001f, 0.000000e+000f, -2.734412e-001f,
  4.068418e-002f, -1.402391e-001f, 1.208400e-001f, 2.244768e-001f, -6.839076e-001f, 0.000000e+000f, -9.184134e-002f, 1.567373e-001f, 0.000000e+000f, -2.734412e-001f,
  3.787909e-002f, -1.392997e-001f, 1.274067e-001f, 2.134009e-001f, -6.636547e-001f, 0.000000e+000f, -9.480927e-002f, 1.618024e-001f, 0.000000e+000f, -2.734412e-001f,
  3.275586e-002f, -1.359733e-001f, 1.366514e-001f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -9.863572e-002f, 1.683326e-001f, 0.000000e+000f, -2.734412e-001f,
  3.275586e-002f, -1.359733e-001f, 1.366514e-001f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -6.312686e-002f, 1.077329e-001f, 0.000000e+000f, -2.734412e-001f,
  3.275586e-002f, -1.359733e-001f, 1.366514e-001f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -6.069891e-002f, 1.035893e-001f, 0.000000e+000f, -2.734412e-001f,
  3.275586e-002f, -1.359733e-001f, 1.366514e-001f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -5.845080e-002f, 9.975267e-002f, 0.000000e+000f, -2.734412e-001f,
  3.275586e-002f, -1.359733e-001f, 1.366514e-001f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -5.636327e-002f, 9.619008e-002f, 0.000000e+000f, -2.734412e-001f,
  3.275586e-002f, -1.359733e-001f, 1.366514e-001f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -5.441971e-002f, 9.287318e-002f, 0.000000e+000f, -2.734412e-001f,
  3.275586e-002f, -1.359733e-001f, 1.366514e-001f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -5.260572e-002f, 8.977740e-002f, 0.000000e+000f, -2.734412e-001f,
  3.275586e-002f, -1.359733e-001f, 1.366514e-001f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -5.090876e-002f, 8.688136e-002f, 0.000000e+000f, -2.734412e-001f,
  -4.052068e-002f, 1.063467e-001f, -1.782954e-002f, 6.442423e-002f, -4.479124e-001f, 0.000000e+000f, -5.511342e-002f, 7.940636e-002f, 0.000000e+000f, -3.745480e-001f,
  -4.052068e-002f, 1.136405e-001f, -3.565909e-002f, 1.288485e-001f, -5.379124e-001f, 0.000000e+000f, -4.002905e-002f, 6.358584e-002f, 0.000000e+000f, -3.745480e-001f,
  -4.052068e-002f, 1.209342e-001f, -5.348863e-002f, 1.932727e-001f, -6.279124e-001f, 0.000000e+000f, -2.850979e-002f, 5.137373e-002f, 0.000000e+000f, -3.745480e-001f,
  -4.052068e-002f, 1.355216e-001f, -8.914772e-002f, 3.221211e-001f, -8.079124e-001f, 0.000000e+000f, -1.971504e-002f, 4.192573e-002f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -1.656796e-001f, 2.661584e-001f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -4.091207e-002f, 6.572380e-002f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, -1.605488e-001f, 2.579160e-001f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -7.500434e-002f, 1.204918e-001f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, -1.477297e-001f, 2.373226e-001f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -9.997640e-002f, 1.606086e-001f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, -1.321153e-001f, 2.122385e-001f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -1.171531e-001f, 1.882024e-001f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, -1.171531e-001f, 1.882024e-001f, 0.000000e+000f, -2.734412e-001f,
  9.186301e-004f, -1.165921e-001f, 1.849304e-001f, 3.097857e-002f, -3.300869e-001f, 0.000000e+000f, -1.563405e-001f, 2.511555e-001f, 0.000000e+000f, -2.734412e-001f,
  -4.658714e-003f, -1.044809e-001f, 1.798677e-001f, 4.023965e-002f, -3.470212e-001f, 0.000000e+000f, -1.403111e-001f, 2.254048e-001f, 0.000000e+000f, -2.734412e-001f,
  -8.593606e-003f, -9.468094e-002f, 1.742794e-001f, 4.846444e-002f, -3.620607e-001f, 0.000000e+000f, -1.272800e-001f, 2.044709e-001f, 0.000000e+000f, -2.734412e-001f,
  -9.592285e-003f, -8.911335e-002f, 1.679126e-001f, 6.010119e-002f, -3.833390e-001f, 0.000000e+000f, -1.167377e-001f, 1.875350e-001f, 0.000000e+000f, -2.734412e-001f,
  -6.436019e-003f, -8.914669e-002f, 1.598206e-001f, 7.924948e-002f, -4.183526e-001f, 0.000000e+000f, -1.082124e-001f, 1.738395e-001f, 0.000000e+000f, -2.734412e-001f,
  -9.234664e-004f, -9.226287e-002f, 1.506003e-001f, 1.023302e-001f, -4.605567e-001f, 0.000000e+000f, -1.013180e-001f, 1.627638e-001f, 0.000000e+000f, -2.734412e-001f,
  4.964148e-003f, -9.600050e-002f, 1.414103e-001f, 1.248850e-001f, -5.017993e-001f, 0.000000e+000f, -9.575295e-002f, 1.538237e-001f, 0.000000e+000f, -2.734412e-001f,
  1.215891e-002f, -1.015145e-001f, 1.317006e-001f, 1.495429e-001f, -5.468874e-001f, 0.000000e+000f, -9.128679e-002f, 1.466490e-001f, 0.000000e+000f, -2.734412e-001f,
  2.168280e-002f, -1.099709e-001f, 1.207069e-001f, 1.791440e-001f, -6.010144e-001f, 0.000000e+000f, -8.774542e-002f, 1.409599e-001f, 0.000000e+000f, -2.734412e-001f,
  3.002558e-002f, -1.173233e-001f, 1.109879e-001f, 2.048337e-001f, -6.479892e-001f, 0.000000e+000f, -8.499863e-002f, 1.365473e-001f, 0.000000e+000f, -2.734412e-001f,
  3.291005e-002f, -1.188496e-001f, 1.059958e-001f, 2.155399e-001f, -6.675660e-001f, 0.000000e+000f, -8.295054e-002f, 1.332571e-001f, 0.000000e+000f, -2.734412e-001f,
  3.269558e-002f, -1.173726e-001f, 1.041765e-001f, 2.172665e-001f, -6.707231e-001f, 0.000000e+000f, -8.153278e-002f, 1.309795e-001f, 0.000000e+000f, -2.734412e-001f,
  3.311727e-002f, -1.171119e-001f, 1.026695e-001f, 2.197081e-001f, -6.751877e-001f, 0.000000e+000f, -8.069961e-002f, 1.296411e-001f, 0.000000e+000f, -2.734412e-001f,
  3.447966e-002f, -1.183895e-001f, 1.012058e-001f, 2.236952e-001f, -6.824783e-001f, 0.000000e+000f, -8.042473e-002f, 1.291995e-001f, 0.000000e+000f, -2.734412e-001f,
  3.620889e-002f, -1.205672e-001f, 1.002416e-001f, 2.277401e-001f, -6.898746e-001f, 0.000000e+000f, -8.069961e-002f, 1.296411e-001f, 0.000000e+000f, -2.734412e-001f,
  3.771154e-002f, -1.230005e-001f, 1.002728e-001f, 2.302755e-001f, -6.945107e-001f, 0.000000e+000f, -8.153278e-002f, 1.309795e-001f, 0.000000e+000f, -2.734412e-001f,
  3.838322e-002f, -1.250313e-001f, 1.018017e-001f, 2.296935e-001f, -6.934465e-001f, 0.000000e+000f, -8.295054e-002f, 1.332571e-001f, 0.000000e+000f, -2.734412e-001f,
  3.765297e-002f, -1.260197e-001f, 1.052741e-001f, 2.244768e-001f, -6.839076e-001f, 0.000000e+000f, -8.499863e-002f, 1.365473e-001f, 0.000000e+000f, -2.734412e-001f,
  3.505687e-002f, -1.254103e-001f, 1.109950e-001f, 2.134009e-001f, -6.636547e-001f, 0.000000e+000f, -8.774542e-002f, 1.409599e-001f, 0.000000e+000f, -2.734412e-001f,
  3.031536e-002f, -1.228066e-001f, 1.190488e-001f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -9.128679e-002f, 1.466490e-001f, 0.000000e+000f, -2.734412e-001f,
  3.031536e-002f, -1.228066e-001f, 1.190488e-001f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -5.842354e-002f, 9.385537e-002f, 0.000000e+000f, -2.734412e-001f,
  3.031536e-002f, -1.228066e-001f, 1.190488e-001f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -5.617648e-002f, 9.024554e-002f, 0.000000e+000f, -2.734412e-001f,
  3.031536e-002f, -1.228066e-001f, 1.190488e-001f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -5.409587e-002f, 8.690312e-002f, 0.000000e+000f, -2.734412e-001f,
  3.031536e-002f, -1.228066e-001f, 1.190488e-001f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -5.216388e-002f, 8.379943e-002f, 0.000000e+000f, -2.734412e-001f,
  3.031536e-002f, -1.228066e-001f, 1.190488e-001f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -5.036512e-002f, 8.090980e-002f, 0.000000e+000f, -2.734412e-001f,
  3.031536e-002f, -1.228066e-001f, 1.190488e-001f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -4.868629e-002f, 7.821280e-002f, 0.000000e+000f, -2.734412e-001f,
  3.031536e-002f, -1.228066e-001f, 1.190488e-001f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -4.711576e-002f, 7.568981e-002f, 0.000000e+000f, -2.734412e-001f,
  -3.611409e-002f, 9.478163e-002f, -1.589060e-002f, 6.442423e-002f, -4.479124e-001f, 0.000000e+000f, -5.511342e-002f, 7.940636e-002f, 0.000000e+000f, -3.745480e-001f,
  -3.611409e-002f, 1.012822e-001f, -3.178119e-002f, 1.288485e-001f, -5.379124e-001f, 0.000000e+000f, -4.002905e-002f, 6.358584e-002f, 0.000000e+000f, -3.745480e-001f,
  -3.611409e-002f, 1.077827e-001f, -4.767179e-002f, 1.932727e-001f, -6.279124e-001f, 0.000000e+000f, -2.850979e-002f, 5.137373e-002f, 0.000000e+000f, -3.745480e-001f,
  -3.611409e-002f, 1.207838e-001f, -7.945299e-002f, 3.221211e-001f, -8.079124e-001f, 0.000000e+000f, -1.971504e-002f, 4.192573e-002f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -1.590647e-001f, 2.486166e-001f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -4.649074e-002f, 7.266456e-002f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, -1.521190e-001f, 2.377605e-001f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -8.262562e-002f, 1.291430e-001f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, -1.359213e-001f, 2.124436e-001f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -1.066371e-001f, 1.666727e-001f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, -1.180260e-001f, 1.844734e-001f, 0.000000e+000f, -2.734412e-001f,
  2.196538e-003f, -1.144642e-001f, 1.735403e-001f, 2.899399e-002f, -3.264580e-001f, 0.000000e+000f, -1.535589e-001f, 2.400110e-001f, 0.000000e+000f, -2.734412e-001f,
  -4.472713e-003f, -1.005039e-001f, 1.680131e-001f, 4.023965e-002f, -3.470212e-001f, 0.000000e+000f, -1.347091e-001f, 2.105490e-001f, 0.000000e+000f, -2.734412e-001f,
  -8.725968e-003f, -8.981199e-002f, 1.616922e-001f, 5.033332e-002f, -3.654780e-001f, 0.000000e+000f, -1.199984e-001f, 1.875563e-001f, 0.000000e+000f, -2.734412e-001f,
  -8.427110e-003f, -8.537037e-002f, 1.540199e-001f, 6.692646e-002f, -3.958193e-001f, 0.000000e+000f, -1.085932e-001f, 1.697301e-001f, 0.000000e+000f, -2.734412e-001f,
  -3.113900e-003f, -8.736796e-002f, 1.441623e-001f, 9.300500e-002f, -4.435052e-001f, 0.000000e+000f, -9.975284e-002f, 1.559127e-001f, 0.000000e+000f, -2.734412e-001f,
  3.590475e-003f, -9.122340e-002f, 1.338100e-001f, 1.203600e-001f, -4.935251e-001f, 0.000000e+000f, -9.290793e-002f, 1.452142e-001f, 0.000000e+000f, -2.734412e-001f,
  1.167346e-002f, -9.695400e-002f, 1.230206e-001f, 1.495429e-001f, -5.468874e-001f, 0.000000e+000f, -8.764212e-002f, 1.369838e-001f, 0.000000e+000f, -2.734412e-001f,
  2.267441e-002f, -1.062768e-001f, 1.107174e-001f, 1.850349e-001f, -6.117862e-001f, 0.000000e+000f, -8.365707e-002f, 1.307552e-001f, 0.000000e+000f, -2.734412e-001f,
  3.055956e-002f, -1.125519e-001f, 1.012623e-001f, 2.109121e-001f, -6.591039e-001f, 0.000000e+000f, -8.074220e-002f, 1.261993e-001f, 0.000000e+000f, -2.734412e-001f,
  3.155016e-002f, -1.119100e-001f, 9.783906e-002f, 2.169006e-001f, -6.700542e-001f, 0.000000e+000f, -7.875265e-002f, 1.230896e-001f, 0.000000e+000f, -2.734412e-001f,
  3.162437e-002f, -1.109734e-001f, 9.619389e-002f, 2.190497e-001f, -6.739837e-001f, 0.000000e+000f, -7.759419e-002f, 1.212789e-001f, 0.000000e+000f, -2.734412e-001f,
  3.310305e-002f, -1.122236e-001f, 9.453562e-002f, 2.236952e-001f, -6.824783e-001f, 0.000000e+000f, -7.721374e-002f, 1.206843e-001f, 0.000000e+000f, -2.734412e-001f,
  3.508775e-002f, -1.146958e-001f, 9.355114e-002f, 2.284194e-001f, -6.911167e-001f, 0.000000e+000f, -7.759419e-002f, 1.212789e-001f, 0.000000e+000f, -2.734412e-001f,
  3.659165e-002f, -1.173605e-001f, 9.404215e-002f, 2.305057e-001f, -6.949317e-001f, 0.000000e+000f, -7.875265e-002f, 1.230896e-001f, 0.000000e+000f, -2.734412e-001f,
  3.662335e-002f, -1.191735e-001f, 9.679839e-002f, 2.272072e-001f, -6.889002e-001f, 0.000000e+000f, -8.074220e-002f, 1.261993e-001f, 0.000000e+000f, -2.734412e-001f,
  3.431493e-002f, -1.191721e-001f, 1.024356e-001f, 2.161282e-001f, -6.686418e-001f, 0.000000e+000f, -8.365707e-002f, 1.307552e-001f, 0.000000e+000f, -2.734412e-001f,
  2.910501e-002f, -1.166382e-001f, 1.112026e-001f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -8.764212e-002f, 1.369838e-001f, 0.000000e+000f, -2.734412e-001f,
  2.910501e-002f, -1.166382e-001f, 1.112026e-001f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -5.564579e-002f, 8.697381e-002f, 0.000000e+000f, -2.734412e-001f,
  2.910501e-002f, -1.166382e-001f, 1.112026e-001f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -5.311644e-002f, 8.302046e-002f, 0.000000e+000f, -2.734412e-001f,
  2.910501e-002f, -1.166382e-001f, 1.112026e-001f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -5.080703e-002f, 7.941087e-002f, 0.000000e+000f, -2.734412e-001f,
  2.910501e-002f, -1.166382e-001f, 1.112026e-001f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -4.869007e-002f, 7.610209e-002f, 0.000000e+000f, -2.734412e-001f,
  2.910501e-002f, -1.166382e-001f, 1.112026e-001f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -4.674246e-002f, 7.305800e-002f, 0.000000e+000f, -2.734412e-001f,
  2.910501e-002f, -1.166382e-001f, 1.112026e-001f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -4.494468e-002f, 7.024808e-002f, 0.000000e+000f, -2.734412e-001f,
  -3.409390e-002f, 8.947963e-002f, -1.500169e-002f, 6.442423e-002f, -4.479124e-001f, 0.000000e+000f, -5.443301e-002f, 7.842604e-002f, 0.000000e+000f, -3.745480e-001f,
  -3.409390e-002f, 9.561653e-002f, -3.000338e-002f, 1.288485e-001f, -5.379124e-001f, 0.000000e+000f, -3.931425e-002f, 6.245038e-002f, 0.000000e+000f, -3.745480e-001f,
  -3.409390e-002f, 1.140272e-001f, -7.500846e-002f, 3.221211e-001f, -8.079124e-001f, 0.000000e+000f, -2.785439e-002f, 5.019273e-002f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -1.525314e-001f, 2.323446e-001f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -4.458121e-002f, 6.790865e-002f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, -1.458710e-001f, 2.221991e-001f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -8.381761e-002f, 1.276758e-001f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, -1.274380e-001f, 1.941208e-001f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -1.051661e-001f, 1.601950e-001f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, -1.104804e-001f, 1.682901e-001f, 0.000000e+000f, -2.734412e-001f,
  -3.232042e-004f, -1.049591e-001f, 1.606296e-001f, 3.293479e-002f, -3.336640e-001f, 0.000000e+000f, -1.407407e-001f, 2.143843e-001f, 0.000000e+000f, -2.734412e-001f,
  -5.953350e-003f, -9.275383e-002f, 1.551016e-001f, 4.348571e-002f, -3.529568e-001f, 0.000000e+000f, -1.240721e-001f, 1.889937e-001f, 0.000000e+000f, -2.734412e-001f,
  -8.948849e-003f, -8.339401e-002f, 1.477947e-001f, 5.721852e-002f, -3.780679e-001f, 0.000000e+000f, -1.092532e-001f, 1.664208e-001f, 0.000000e+000f, -2.734412e-001f,
  -5.925263e-003f, -8.256512e-002f, 1.395164e-001f, 7.924948e-002f, -4.183526e-001f, 0.000000e+000f, -9.962480e-002f, 1.517542e-001f, 0.000000e+000f, -2.734412e-001f,
  2.144803e-004f, -8.557325e-002f, 1.298524e-001f, 1.068959e-001f, -4.689053e-001f, 0.000000e+000f, -9.216257e-002f, 1.403873e-001f, 0.000000e+000f, -2.734412e-001f,
  8.287711e-003f, -9.041032e-002f, 1.184881e-001f, 1.391016e-001f, -5.277950e-001f, 0.000000e+000f, -8.557692e-002f, 1.303557e-001f, 0.000000e+000f, -2.734412e-001f,
  1.814299e-002f, -9.808560e-002f, 1.073122e-001f, 1.731129e-001f, -5.899863e-001f, 0.000000e+000f, -8.137225e-002f, 1.239509e-001f, 0.000000e+000f, -2.734412e-001f,
  2.859258e-002f, -1.063560e-001f, 9.566389e-002f, 2.082251e-001f, -6.541905e-001f, 0.000000e+000f, -7.782700e-002f, 1.185505e-001f, 0.000000e+000f, -2.734412e-001f,
  3.032823e-002f, -1.064159e-001f, 9.172781e-002f, 2.166526e-001f, -6.696006e-001f, 0.000000e+000f, -7.577873e-002f, 1.154305e-001f, 0.000000e+000f, -2.734412e-001f,
  3.032545e-002f, -1.052104e-001f, 8.989798e-002f, 2.190497e-001f, -6.739837e-001f, 0.000000e+000f, -7.440713e-002f, 1.133412e-001f, 0.000000e+000f, -2.734412e-001f,
  3.174339e-002f, -1.063529e-001f, 8.834824e-002f, 2.236952e-001f, -6.824783e-001f, 0.000000e+000f, -7.404231e-002f, 1.127855e-001f, 0.000000e+000f, -2.734412e-001f,
  3.364658e-002f, -1.086479e-001f, 8.742820e-002f, 2.284194e-001f, -6.911167e-001f, 0.000000e+000f, -7.440713e-002f, 1.133412e-001f, 0.000000e+000f, -2.734412e-001f,
  3.521665e-002f, -1.115140e-001f, 8.815084e-002f, 2.304017e-001f, -6.947414e-001f, 0.000000e+000f, -7.577873e-002f, 1.154305e-001f, 0.000000e+000f, -2.734412e-001f,
  3.492513e-002f, -1.130339e-001f, 9.114255e-002f, 2.259557e-001f, -6.866118e-001f, 0.000000e+000f, -7.782700e-002f, 1.185505e-001f, 0.000000e+000f, -2.734412e-001f,
  3.156440e-002f, -1.125074e-001f, 9.813852e-002f, 2.104080e-001f, -6.581821e-001f, 0.000000e+000f, -8.137225e-002f, 1.239509e-001f, 0.000000e+000f, -2.734412e-001f,
  2.790956e-002f, -1.107385e-001f, 1.039243e-001f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -5.510975e-002f, 8.394632e-002f, 0.000000e+000f, -2.734412e-001f,
  2.790956e-002f, -1.107385e-001f, 1.039243e-001f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -5.211929e-002f, 7.939109e-002f, 0.000000e+000f, -2.734412e-001f,
  2.790956e-002f, -1.107385e-001f, 1.039243e-001f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -4.980288e-002f, 7.586260e-002f, 0.000000e+000f, -2.734412e-001f,
  2.790956e-002f, -1.107385e-001f, 1.039243e-001f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -4.768361e-002f, 7.263441e-002f, 0.000000e+000f, -2.734412e-001f,
  2.790956e-002f, -1.107385e-001f, 1.039243e-001f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -4.542830e-002f, 6.919899e-002f, 0.000000e+000f, -2.734412e-001f,
  2.790956e-002f, -1.107385e-001f, 1.039243e-001f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -4.365837e-002f, 6.650293e-002f, 0.000000e+000f, -2.734412e-001f,
  -3.218672e-002f, 8.447422e-002f, -1.416251e-002f, 6.442423e-002f, -4.479124e-001f, 0.000000e+000f, -5.477110e-002f, 7.891315e-002f, 0.000000e+000f, -3.745480e-001f,
  -3.218672e-002f, 9.026783e-002f, -2.832502e-002f, 1.288485e-001f, -5.379124e-001f, 0.000000e+000f, -3.954966e-002f, 6.282434e-002f, 0.000000e+000f, -3.745480e-001f,
  -3.218672e-002f, 1.076487e-001f, -7.081255e-002f, 3.221211e-001f, -8.079124e-001f, 0.000000e+000f, -2.785439e-002f, 5.019273e-002f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -1.493039e-001f, 2.246524e-001f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -5.627348e-002f, 8.467275e-002f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, -1.382930e-001f, 2.080846e-001f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -9.368771e-002f, 1.409686e-001f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, -1.162509e-001f, 1.749187e-001f, 0.000000e+000f, -2.734412e-001f,
  2.061750e-003f, -1.073199e-001f, 1.568127e-001f, 2.899399e-002f, -3.264580e-001f, 0.000000e+000f, -1.441359e-001f, 2.168763e-001f, 0.000000e+000f, -2.734412e-001f,
  -5.827379e-003f, -9.089952e-002f, 1.499666e-001f, 4.348571e-002f, -3.529568e-001f, 0.000000e+000f, -1.214468e-001f, 1.827367e-001f, 0.000000e+000f, -2.734412e-001f,
  -8.644189e-003f, -8.118541e-002f, 1.417275e-001f, 6.010119e-002f, -3.833390e-001f, 0.000000e+000f, -1.051994e-001f, 1.582899e-001f, 0.000000e+000f, -2.734412e-001f,
  -2.922819e-003f, -8.217718e-002f, 1.302665e-001f, 9.300500e-002f, -4.435052e-001f, 0.000000e+000f, -9.363161e-002f, 1.408842e-001f, 0.000000e+000f, -2.734412e-001f,
  5.622558e-003f, -8.674214e-002f, 1.177883e-001f, 1.294901e-001f, -5.102198e-001f, 0.000000e+000f, -8.541028e-002f, 1.285139e-001f, 0.000000e+000f, -2.734412e-001f,
  1.775909e-002f, -9.567996e-002f, 1.037594e-001f, 1.731129e-001f, -5.899863e-001f, 0.000000e+000f, -7.965044e-002f, 1.198472e-001f, 0.000000e+000f, -2.734412e-001f,
  2.868430e-002f, -1.039722e-001f, 9.150164e-002f, 2.109121e-001f, -6.591039e-001f, 0.000000e+000f, -7.578754e-002f, 1.140349e-001f, 0.000000e+000f, -2.734412e-001f,
  2.946397e-002f, -1.027721e-001f, 8.793070e-002f, 2.172665e-001f, -6.707231e-001f, 0.000000e+000f, -7.347413e-002f, 1.105540e-001f, 0.000000e+000f, -2.734412e-001f,
  3.051170e-002f, -1.029919e-001f, 8.588935e-002f, 2.220084e-001f, -6.793940e-001f, 0.000000e+000f, -7.251514e-002f, 1.091110e-001f, 0.000000e+000f, -2.734412e-001f,
  3.293462e-002f, -1.057367e-001f, 8.453373e-002f, 2.284194e-001f, -6.911167e-001f, 0.000000e+000f, -7.283270e-002f, 1.095888e-001f, 0.000000e+000f, -2.734412e-001f,
  3.455391e-002f, -1.088471e-001f, 8.554775e-002f, 2.301349e-001f, -6.942537e-001f, 0.000000e+000f, -7.445238e-002f, 1.120259e-001f, 0.000000e+000f, -2.734412e-001f,
  3.321581e-002f, -1.101596e-001f, 9.055217e-002f, 2.208033e-001f, -6.771903e-001f, 0.000000e+000f, -7.750775e-002f, 1.166232e-001f, 0.000000e+000f, -2.734412e-001f,
  2.731901e-002f, -1.078874e-001f, 1.004837e-001f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -8.226405e-002f, 1.237799e-001f, 0.000000e+000f, -2.734412e-001f,
  2.731901e-002f, -1.078874e-001f, 1.004837e-001f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -5.141503e-002f, 7.736241e-002f, 0.000000e+000f, -2.734412e-001f,
  2.731901e-002f, -1.078874e-001f, 1.004837e-001f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -4.839062e-002f, 7.281168e-002f, 0.000000e+000f, -2.734412e-001f,
  2.731901e-002f, -1.078874e-001f, 1.004837e-001f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -4.570225e-002f, 6.876659e-002f, 0.000000e+000f, -2.734412e-001f,
  2.731901e-002f, -1.078874e-001f, 1.004837e-001f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -4.329687e-002f, 6.514729e-002f, 0.000000e+000f, -2.734412e-001f,
  -3.127352e-002f, 8.207751e-002f, -1.376069e-002f, 6.442423e-002f, -4.479124e-001f, 0.000000e+000f, -5.511342e-002f, 7.940636e-002f, 0.000000e+000f, -3.745480e-001f,
  -3.127352e-002f, 1.045944e-001f, -6.880345e-002f, 3.221211e-001f, -8.079124e-001f, 0.000000e+000f, -3.931425e-002f, 6.245038e-002f, 0.000000e+000f, -3.745480e-001f,
  -3.127352e-002f, 9.052136e-002f, -3.440173e-002f, 1.610606e-001f, -5.829124e-001f, 0.000000e+000f, -2.753787e-002f, 4.962236e-002f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -1.461064e-001f, 2.172400e-001f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -6.614343e-002f, 9.834611e-002f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, -1.302771e-001f, 1.937040e-001f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -1.033128e-001f, 1.536119e-001f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, -1.033128e-001f, 1.536119e-001f, 0.000000e+000f, -2.734412e-001f,
  -4.108340e-003f, -9.262900e-002f, 1.468090e-001f, 4.023965e-002f, -3.470212e-001f, 0.000000e+000f, -1.237349e-001f, 1.839767e-001f, 0.000000e+000f, -2.734412e-001f,
  -8.459065e-003f, -7.959735e-002f, 1.370512e-001f, 6.010119e-002f, -3.833390e-001f, 0.000000e+000f, -1.029464e-001f, 1.530671e-001f, 0.000000e+000f, -2.734412e-001f,
  -8.143693e-004f, -8.146045e-002f, 1.229208e-001f, 1.023302e-001f, -4.605567e-001f, 0.000000e+000f, -8.934844e-002f, 1.328487e-001f, 0.000000e+000f, -2.734412e-001f,
  1.072248e-002f, -8.823928e-002f, 1.074948e-001f, 1.495429e-001f, -5.468874e-001f, 0.000000e+000f, -8.050229e-002f, 1.196957e-001f, 0.000000e+000f, -2.734412e-001f,
  2.647839e-002f, -1.002960e-001f, 9.058892e-002f, 2.048337e-001f, -6.479892e-001f, 0.000000e+000f, -7.495700e-002f, 1.114507e-001f, 0.000000e+000f, -2.734412e-001f,
  2.883297e-002f, -1.000578e-001f, 8.502942e-002f, 2.172665e-001f, -6.707231e-001f, 0.000000e+000f, -7.190061e-002f, 1.069062e-001f, 0.000000e+000f, -2.734412e-001f,
  3.040628e-002f, -1.007664e-001f, 8.260476e-002f, 2.236952e-001f, -6.824783e-001f, 0.000000e+000f, -7.092346e-002f, 1.054534e-001f, 0.000000e+000f, -2.734412e-001f,
  3.325635e-002f, -1.044918e-001f, 8.184319e-002f, 2.302755e-001f, -6.945107e-001f, 0.000000e+000f, -7.190061e-002f, 1.069062e-001f, 0.000000e+000f, -2.734412e-001f,
  3.320470e-002f, -1.071605e-001f, 8.592533e-002f, 2.244768e-001f, -6.839076e-001f, 0.000000e+000f, -7.495700e-002f, 1.114507e-001f, 0.000000e+000f, -2.734412e-001f,
  2.673394e-002f, -1.051009e-001f, 9.716827e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -8.050229e-002f, 1.196957e-001f, 0.000000e+000f, -2.734412e-001f,
  2.673394e-002f, -1.051009e-001f, 9.716827e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -4.953987e-002f, 7.365892e-002f, 0.000000e+000f, -2.734412e-001f,
  2.673394e-002f, -1.051009e-001f, 9.716827e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -4.600131e-002f, 6.839756e-002f, 0.000000e+000f, -2.734412e-001f,
  2.673394e-002f, -1.051009e-001f, 9.716827e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -4.293455e-002f, 6.383773e-002f, 0.000000e+000f, -2.734412e-001f,
  -3.038622e-002f, 7.974881e-002f, -1.337027e-002f, 6.442423e-002f, -4.479124e-001f, 0.000000e+000f, -5.511342e-002f, 7.940636e-002f, 0.000000e+000f, -3.745480e-001f,
  -3.038622e-002f, 1.016269e-001f, -6.685136e-002f, 3.221211e-001f, -8.079124e-001f, 0.000000e+000f, -3.885173e-002f, 6.171567e-002f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -1.429415e-001f, 2.100960e-001f, 0.000000e+000f, -2.734412e-001f,
  0.000000e+000f, -8.625554e-002f, 1.267787e-001f, 0.000000e+000f, -2.734412e-001f, 0.000000e+000f, -1.139836e-001f, 1.675335e-001f, 0.000000e+000f, -2.734412e-001f,
  -4.019347e-003f, -9.069109e-002f, 1.419811e-001f, 4.023965e-002f, -3.470212e-001f, 0.000000e+000f, -1.210547e-001f, 1.779265e-001f, 0.000000e+000f, -2.734412e-001f,
  -5.552733e-003f, -7.767095e-002f, 1.261567e-001f, 7.924948e-002f, -4.183526e-001f, 0.000000e+000f, -9.336124e-002f, 1.372227e-001f, 0.000000e+000f, -2.734412e-001f,
  1.049021e-002f, -8.614895e-002f, 1.039598e-001f, 1.495429e-001f, -5.468874e-001f, 0.000000e+000f, -7.875850e-002f, 1.157595e-001f, 0.000000e+000f, -2.734412e-001f,
  2.839344e-002f, -9.865831e-002f, 8.366934e-002f, 2.155399e-001f, -6.675660e-001f, 0.000000e+000f, -7.156632e-002f, 1.051884e-001f, 0.000000e+000f, -2.734412e-001f,
  2.974764e-002f, -9.807622e-002f, 7.988827e-002f, 2.236952e-001f, -6.824783e-001f, 0.000000e+000f, -6.938716e-002f, 1.019855e-001f, 0.000000e+000f, -2.734412e-001f,
  3.311547e-002f, -1.033463e-001f, 8.035866e-002f, 2.296935e-001f, -6.934465e-001f, 0.000000e+000f, -7.156632e-002f, 1.051884e-001f, 0.000000e+000f, -2.734412e-001f,
  2.615485e-002f, -1.023782e-001f, 9.397286e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -7.875850e-002f, 1.157595e-001f, 0.000000e+000f, -2.734412e-001f,
  2.615485e-002f, -1.023782e-001f, 9.397286e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -4.667170e-002f, 6.859822e-002f, 0.000000e+000f, -2.734412e-001f,
  2.615485e-002f, -1.023782e-001f, 9.397286e-002f, 1.957359e-001f, -6.313535e-001f, 0.000000e+000f, -4.200453e-002f, 6.173840e-002f, 0.000000e+000f, -2.734412e-001f,
  -2.952410e-002f, 9.874352e-002f, -6.495465e-002f, 3.221211e-001f, -8.079124e-001f, 0.000000e+000f, -5.344332e-002f, 7.700011e-002f, 0.000000e+000f, -3.745480e-001f,
  -1.366283e-001f, 1.927902e-001f, 0.000000e+000f, 0.000000e+000f, -3.745480e-001f,
  6.235347e-003f, 1.487345e-001f, -2.697423e-002f, 1.324442e-002f, -1.635801e-001f, -1.049554e-001f, 1.582970e-001f, 0.000000e+000f, 0.000000e+000f, -3.745480e-001f,
  8.614139e-003f, 1.300535e-001f, -4.793566e-002f, 5.216810e-002f, -3.249114e-001f, -9.078199e-002f, 1.483763e-001f, 0.000000e+000f, 0.000000e+000f, -3.745480e-001f,
  -1.627382e-002f, 1.185143e-001f, -5.925227e-002f, 1.476610e-001f, -5.434463e-001f, -6.058331e-002f, 1.091692e-001f, 0.000000e+000f, 0.000000e+000f, -3.745480e-001f,
  -4.404769e-002f, 1.200248e-001f, -6.358354e-002f, 2.837699e-001f, -7.541249e-001f, -4.281842e-002f, 8.696747e-002f, 0.000000e+000f, 0.000000e+000f, -3.745480e-001f,
  -4.614850e-002f, 1.258533e-001f, -7.588770e-002f, 3.681334e-001f, -8.590371e-001f, -3.153568e-002f, 7.434041e-002f, 0.000000e+000f, 0.000000e+000f, -3.745480e-001f,
  // Total number of coefficients: 3485
  // Maximum number of elevation coefficients: 5

   // Lite coefficients
   // 20 degrees loudspeakers
   // 32000 Hz sample rate
   // Coefficients
  // Generated by HRTFConv V5.90d on Wed Mar 03 18:38:51 1999
  0.000000e+000f, -7.991072e-002f, 1.534921e-001f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -2.335595e-002f, 4.486199e-002f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, -7.642135e-002f, 1.467897e-001f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -4.391178e-002f, 8.434551e-002f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, -6.676436e-002f, 1.282406e-001f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -5.509617e-002f, 1.058284e-001f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, -5.788036e-002f, 1.111763e-001f, 0.000000e+000f, -3.340893e-001f,
  1.199394e-002f, -7.678182e-002f, 1.032310e-001f, 1.127012e-001f, -5.027586e-001f, 0.000000e+000f, -7.373360e-002f, 1.416271e-001f, 0.000000e+000f, -3.340893e-001f,
  8.378054e-003f, -6.695936e-002f, 9.770475e-002f, 1.226673e-001f, -5.176739e-001f, 0.000000e+000f, -6.500098e-002f, 1.248535e-001f, 0.000000e+000f, -3.340893e-001f,
  5.978299e-003f, -5.915946e-002f, 9.157654e-002f, 1.356765e-001f, -5.371435e-001f, 0.000000e+000f, -5.723742e-002f, 1.099413e-001f, 0.000000e+000f, -3.340893e-001f,
  6.445945e-003f, -5.704211e-002f, 8.578417e-002f, 1.566135e-001f, -5.684780e-001f, 0.000000e+000f, -5.219312e-002f, 1.002523e-001f, 0.000000e+000f, -3.340893e-001f,
  8.359191e-003f, -5.751036e-002f, 7.962476e-002f, 1.829201e-001f, -6.078486e-001f, 0.000000e+000f, -4.828368e-002f, 9.274304e-002f, 0.000000e+000f, -3.340893e-001f,
  1.110699e-002f, -5.920951e-002f, 7.275061e-002f, 2.134183e-001f, -6.534924e-001f, 0.000000e+000f, -4.483348e-002f, 8.611591e-002f, 0.000000e+000f, -3.340893e-001f,
  1.470178e-002f, -6.281534e-002f, 6.641384e-002f, 2.451859e-001f, -7.010360e-001f, 0.000000e+000f, -4.263066e-002f, 8.188476e-002f, 0.000000e+000f, -3.340893e-001f,
  1.847549e-002f, -6.675087e-002f, 6.005029e-002f, 2.772362e-001f, -7.490027e-001f, 0.000000e+000f, -4.077332e-002f, 7.831717e-002f, 0.000000e+000f, -3.340893e-001f,
  1.895106e-002f, -6.647824e-002f, 5.777202e-002f, 2.847911e-001f, -7.603094e-001f, 0.000000e+000f, -3.970023e-002f, 7.625600e-002f, 0.000000e+000f, -3.340893e-001f,
  1.882007e-002f, -6.563655e-002f, 5.663858e-002f, 2.869295e-001f, -7.635096e-001f, 0.000000e+000f, -3.898166e-002f, 7.487577e-002f, 0.000000e+000f, -3.340893e-001f,
  1.932581e-002f, -6.618510e-002f, 5.582632e-002f, 2.910598e-001f, -7.696912e-001f, 0.000000e+000f, -3.879053e-002f, 7.450865e-002f, 0.000000e+000f, -3.340893e-001f,
  2.008339e-002f, -6.744637e-002f, 5.545392e-002f, 2.952414e-001f, -7.759494e-001f, 0.000000e+000f, -3.898166e-002f, 7.487577e-002f, 0.000000e+000f, -3.340893e-001f,
  2.081090e-002f, -6.915720e-002f, 5.605598e-002f, 2.969904e-001f, -7.785668e-001f, 0.000000e+000f, -3.970023e-002f, 7.625600e-002f, 0.000000e+000f, -3.340893e-001f,
  2.089929e-002f, -7.027040e-002f, 5.786809e-002f, 2.930632e-001f, -7.726893e-001f, 0.000000e+000f, -4.077332e-002f, 7.831717e-002f, 0.000000e+000f, -3.340893e-001f,
  1.995027e-002f, -7.054153e-002f, 6.189021e-002f, 2.791986e-001f, -7.519396e-001f, 0.000000e+000f, -4.263066e-002f, 8.188476e-002f, 0.000000e+000f, -3.340893e-001f,
  1.877833e-002f, -7.000924e-002f, 6.519163e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -2.887182e-002f, 5.545684e-002f, 0.000000e+000f, -3.340893e-001f,
  1.877833e-002f, -7.000924e-002f, 6.519163e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -2.730513e-002f, 5.244756e-002f, 0.000000e+000f, -3.340893e-001f,
  1.877833e-002f, -7.000924e-002f, 6.519163e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -2.609157e-002f, 5.011655e-002f, 0.000000e+000f, -3.340893e-001f,
  1.877833e-002f, -7.000924e-002f, 6.519163e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -2.498129e-002f, 4.798393e-002f, 0.000000e+000f, -3.340893e-001f,
  1.877833e-002f, -7.000924e-002f, 6.519163e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -2.379974e-002f, 4.571442e-002f, 0.000000e+000f, -3.340893e-001f,
  1.877833e-002f, -7.000924e-002f, 6.519163e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -2.287248e-002f, 4.393334e-002f, 0.000000e+000f, -3.340893e-001f,
  -5.210932e-002f, 1.023114e-001f, -1.469244e-002f, 6.208862e-002f, -4.760040e-001f, 0.000000e+000f, -6.095051e-002f, 7.820485e-002f, 0.000000e+000f, -4.103394e-001f,
  -5.210932e-002f, 1.104404e-001f, -2.938488e-002f, 1.241772e-001f, -5.540040e-001f, 0.000000e+000f, -4.496465e-002f, 6.159907e-002f, 0.000000e+000f, -4.103394e-001f,
  -5.210932e-002f, 1.348276e-001f, -7.346221e-002f, 3.104431e-001f, -7.880040e-001f, 0.000000e+000f, -3.263801e-002f, 4.860323e-002f, 0.000000e+000f, -4.103394e-001f,
  0.000000e+000f, -1.056385e-001f, 1.881982e-001f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -3.087557e-002f, 5.500574e-002f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, -1.010257e-001f, 1.799804e-001f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -5.487357e-002f, 9.775889e-002f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, -9.026845e-002f, 1.608159e-001f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -7.082013e-002f, 1.261682e-001f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, -7.838375e-002f, 1.396430e-001f, 0.000000e+000f, -3.340893e-001f,
  1.784489e-002f, -1.041131e-001f, 1.288437e-001f, 1.089857e-001f, -4.971980e-001f, 0.000000e+000f, -1.019820e-001f, 1.816839e-001f, 0.000000e+000f, -3.340893e-001f,
  1.250750e-002f, -9.076819e-002f, 1.220093e-001f, 1.195984e-001f, -5.130809e-001f, 0.000000e+000f, -8.946341e-002f, 1.593817e-001f, 0.000000e+000f, -3.340893e-001f,
  8.828729e-003f, -8.056720e-002f, 1.155118e-001f, 1.291491e-001f, -5.273746e-001f, 0.000000e+000f, -7.969368e-002f, 1.419767e-001f, 0.000000e+000f, -3.340893e-001f,
  7.831812e-003f, -7.505237e-002f, 1.088510e-001f, 1.448944e-001f, -5.509392e-001f, 0.000000e+000f, -7.211926e-002f, 1.284826e-001f, 0.000000e+000f, -3.340893e-001f,
  9.691354e-003f, -7.417400e-002f, 1.013843e-001f, 1.697056e-001f, -5.880718e-001f, 0.000000e+000f, -6.624815e-002f, 1.180230e-001f, 0.000000e+000f, -3.340893e-001f,
  1.246351e-002f, -7.497146e-002f, 9.400659e-002f, 1.957031e-001f, -6.269796e-001f, 0.000000e+000f, -6.170228e-002f, 1.099245e-001f, 0.000000e+000f, -3.340893e-001f,
  1.606424e-002f, -7.728577e-002f, 8.670143e-002f, 2.232316e-001f, -6.681791e-001f, 0.000000e+000f, -5.820514e-002f, 1.036942e-001f, 0.000000e+000f, -3.340893e-001f,
  2.118185e-002f, -8.199324e-002f, 7.884542e-002f, 2.561653e-001f, -7.174677e-001f, 0.000000e+000f, -5.555858e-002f, 9.897926e-002f, 0.000000e+000f, -3.340893e-001f,
  2.473715e-002f, -8.500479e-002f, 7.292660e-002f, 2.796513e-001f, -7.526170e-001f, 0.000000e+000f, -5.362275e-002f, 9.553052e-002f, 0.000000e+000f, -3.340893e-001f,
  2.498250e-002f, -8.413787e-002f, 7.060347e-002f, 2.850126e-001f, -7.606409e-001f, 0.000000e+000f, -5.230144e-002f, 9.317657e-002f, 0.000000e+000f, -3.340893e-001f,
  2.487932e-002f, -8.330387e-002f, 6.944513e-002f, 2.869295e-001f, -7.635096e-001f, 0.000000e+000f, -5.153208e-002f, 9.180593e-002f, 0.000000e+000f, -3.340893e-001f,
  2.554789e-002f, -8.393593e-002f, 6.844922e-002f, 2.910598e-001f, -7.696912e-001f, 0.000000e+000f, -5.127942e-002f, 9.135580e-002f, 0.000000e+000f, -3.340893e-001f,
  2.654938e-002f, -8.546380e-002f, 6.799261e-002f, 2.952414e-001f, -7.759494e-001f, 0.000000e+000f, -5.153208e-002f, 9.180593e-002f, 0.000000e+000f, -3.340893e-001f,
  2.741355e-002f, -8.729746e-002f, 6.851656e-002f, 2.970821e-001f, -7.787041e-001f, 0.000000e+000f, -5.230144e-002f, 9.317657e-002f, 0.000000e+000f, -3.340893e-001f,
  2.767397e-002f, -8.885358e-002f, 7.046233e-002f, 2.941703e-001f, -7.743463e-001f, 0.000000e+000f, -5.362275e-002f, 9.553052e-002f, 0.000000e+000f, -3.340893e-001f,
  2.691178e-002f, -8.959305e-002f, 7.419879e-002f, 2.843228e-001f, -7.596084e-001f, 0.000000e+000f, -5.555858e-002f, 9.897926e-002f, 0.000000e+000f, -3.340893e-001f,
  2.482414e-002f, -8.909207e-002f, 7.993211e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -5.820514e-002f, 1.036942e-001f, 0.000000e+000f, -3.340893e-001f,
  2.482414e-002f, -8.909207e-002f, 7.993211e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -3.695565e-002f, 6.583758e-002f, 0.000000e+000f, -3.340893e-001f,
  2.482414e-002f, -8.909207e-002f, 7.993211e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -3.527584e-002f, 6.284496e-002f, 0.000000e+000f, -3.340893e-001f,
  2.482414e-002f, -8.909207e-002f, 7.993211e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -3.374211e-002f, 6.011257e-002f, 0.000000e+000f, -3.340893e-001f,
  2.482414e-002f, -8.909207e-002f, 7.993211e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -3.233619e-002f, 5.760788e-002f, 0.000000e+000f, -3.340893e-001f,
  2.482414e-002f, -8.909207e-002f, 7.993211e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -3.104274e-002f, 5.530357e-002f, 0.000000e+000f, -3.340893e-001f,
  2.482414e-002f, -8.909207e-002f, 7.993211e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -2.984879e-002f, 5.317651e-002f, 0.000000e+000f, -3.340893e-001f,
  -5.846761e-002f, 1.147952e-001f, -1.648519e-002f, 6.208862e-002f, -4.760040e-001f, 0.000000e+000f, -6.057428e-002f, 7.772210e-002f, 0.000000e+000f, -4.103394e-001f,
  -5.846761e-002f, 1.239162e-001f, -3.297038e-002f, 1.241772e-001f, -5.540040e-001f, 0.000000e+000f, -4.469700e-002f, 6.123241e-002f, 0.000000e+000f, -4.103394e-001f,
  -5.846761e-002f, 1.512790e-001f, -8.242595e-002f, 3.104431e-001f, -7.880040e-001f, 0.000000e+000f, -3.263801e-002f, 4.860323e-002f, 0.000000e+000f, -4.103394e-001f,
  0.000000e+000f, -1.386425e-001f, 2.312760e-001f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -3.423568e-002f, 5.711012e-002f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, -1.343491e-001f, 2.241139e-001f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -6.276448e-002f, 1.047003e-001f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, -1.236219e-001f, 2.062194e-001f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -8.366138e-002f, 1.395594e-001f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, -1.105555e-001f, 1.844228e-001f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -9.803508e-002f, 1.635368e-001f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, -9.803508e-002f, 1.635368e-001f, 0.000000e+000f, -3.340893e-001f,
  2.207381e-002f, -1.309073e-001f, 1.569475e-001f, 1.108564e-001f, -4.999976e-001f, 0.000000e+000f, -1.308275e-001f, 2.182394e-001f, 0.000000e+000f, -3.340893e-001f,
  1.641515e-002f, -1.172651e-001f, 1.499367e-001f, 1.195984e-001f, -5.130809e-001f, 0.000000e+000f, -1.174139e-001f, 1.958636e-001f, 0.000000e+000f, -3.340893e-001f,
  1.220067e-002f, -1.062308e-001f, 1.432575e-001f, 1.273791e-001f, -5.247256e-001f, 0.000000e+000f, -1.065094e-001f, 1.776732e-001f, 0.000000e+000f, -3.340893e-001f,
  1.020944e-002f, -9.892736e-002f, 1.366154e-001f, 1.384120e-001f, -5.412376e-001f, 0.000000e+000f, -9.768740e-002f, 1.629569e-001f, 0.000000e+000f, -3.340893e-001f,
  1.118351e-002f, -9.614073e-002f, 1.292563e-001f, 1.566135e-001f, -5.684780e-001f, 0.000000e+000f, -9.055339e-002f, 1.510563e-001f, 0.000000e+000f, -3.340893e-001f,
  1.390365e-002f, -9.602512e-002f, 1.214941e-001f, 1.785787e-001f, -6.013512e-001f, 0.000000e+000f, -8.478407e-002f, 1.414322e-001f, 0.000000e+000f, -3.340893e-001f,
  1.702098e-002f, -9.676736e-002f, 1.140576e-001f, 1.999901e-001f, -6.333957e-001f, 0.000000e+000f, -8.012715e-002f, 1.336638e-001f, 0.000000e+000f, -3.340893e-001f,
  2.108309e-002f, -9.904120e-002f, 1.065470e-001f, 2.232316e-001f, -6.681791e-001f, 0.000000e+000f, -7.638982e-002f, 1.274294e-001f, 0.000000e+000f, -3.340893e-001f,
  2.666728e-002f, -1.035088e-001f, 9.846046e-002f, 2.507517e-001f, -7.093658e-001f, 0.000000e+000f, -7.342637e-002f, 1.224859e-001f, 0.000000e+000f, -3.340893e-001f,
  3.148586e-002f, -1.073711e-001f, 9.149459e-002f, 2.741800e-001f, -7.444287e-001f, 0.000000e+000f, -7.112781e-002f, 1.186516e-001f, 0.000000e+000f, -3.340893e-001f,
  3.295601e-002f, -1.076052e-001f, 8.779410e-002f, 2.837970e-001f, -7.588215e-001f, 0.000000e+000f, -6.941395e-002f, 1.157926e-001f, 0.000000e+000f, -3.340893e-001f,
  3.261102e-002f, -1.061219e-001f, 8.627971e-002f, 2.853392e-001f, -7.611297e-001f, 0.000000e+000f, -6.822756e-002f, 1.138135e-001f, 0.000000e+000f, -3.340893e-001f,
  3.274225e-002f, -1.056411e-001f, 8.511250e-002f, 2.875160e-001f, -7.643874e-001f, 0.000000e+000f, -6.753034e-002f, 1.126505e-001f, 0.000000e+000f, -3.340893e-001f,
  3.352966e-002f, -1.063578e-001f, 8.411696e-002f, 2.910598e-001f, -7.696912e-001f, 0.000000e+000f, -6.730033e-002f, 1.122668e-001f, 0.000000e+000f, -3.340893e-001f,
  3.462070e-002f, -1.078563e-001f, 8.358070e-002f, 2.946414e-001f, -7.750513e-001f, 0.000000e+000f, -6.753034e-002f, 1.126505e-001f, 0.000000e+000f, -3.340893e-001f,
  3.565850e-002f, -1.097291e-001f, 8.381691e-002f, 2.968792e-001f, -7.784004e-001f, 0.000000e+000f, -6.822756e-002f, 1.138135e-001f, 0.000000e+000f, -3.340893e-001f,
  3.628492e-002f, -1.115704e-001f, 8.514520e-002f, 2.963660e-001f, -7.776324e-001f, 0.000000e+000f, -6.941395e-002f, 1.157926e-001f, 0.000000e+000f, -3.340893e-001f,
  3.615935e-002f, -1.129879e-001f, 8.785923e-002f, 2.917531e-001f, -7.707286e-001f, 0.000000e+000f, -7.112781e-002f, 1.186516e-001f, 0.000000e+000f, -3.340893e-001f,
  3.499144e-002f, -1.136319e-001f, 9.218354e-002f, 2.818829e-001f, -7.559569e-001f, 0.000000e+000f, -7.342637e-002f, 1.224859e-001f, 0.000000e+000f, -3.340893e-001f,
  3.257979e-002f, -1.132325e-001f, 9.822825e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -7.638982e-002f, 1.274294e-001f, 0.000000e+000f, -3.340893e-001f,
  3.257979e-002f, -1.132325e-001f, 9.822825e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -4.888948e-002f, 8.155480e-002f, 0.000000e+000f, -3.340893e-001f,
  3.257979e-002f, -1.132325e-001f, 9.822825e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -4.700912e-002f, 7.841807e-002f, 0.000000e+000f, -3.340893e-001f,
  3.257979e-002f, -1.132325e-001f, 9.822825e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -4.526804e-002f, 7.551370e-002f, 0.000000e+000f, -3.340893e-001f,
  3.257979e-002f, -1.132325e-001f, 9.822825e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -4.365132e-002f, 7.281678e-002f, 0.000000e+000f, -3.340893e-001f,
  3.257979e-002f, -1.132325e-001f, 9.822825e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -4.214611e-002f, 7.030586e-002f, 0.000000e+000f, -3.340893e-001f,
  3.257979e-002f, -1.132325e-001f, 9.822825e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -4.074124e-002f, 6.796233e-002f, 0.000000e+000f, -3.340893e-001f,
  3.257979e-002f, -1.132325e-001f, 9.822825e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -3.942700e-002f, 6.577000e-002f, 0.000000e+000f, -3.340893e-001f,
  -6.560174e-002f, 1.288024e-001f, -1.849669e-002f, 6.208862e-002f, -4.760040e-001f, 0.000000e+000f, -6.133145e-002f, 7.869363e-002f, 0.000000e+000f, -4.103394e-001f,
  -6.560174e-002f, 1.390363e-001f, -3.699338e-002f, 1.241772e-001f, -5.540040e-001f, 0.000000e+000f, -4.550967e-002f, 6.234572e-002f, 0.000000e+000f, -4.103394e-001f,
  -6.560174e-002f, 1.492701e-001f, -5.549007e-002f, 1.862659e-001f, -6.320040e-001f, 0.000000e+000f, -3.340597e-002f, 4.974684e-002f, 0.000000e+000f, -4.103394e-001f,
  -6.560174e-002f, 1.697379e-001f, -9.248344e-002f, 3.104431e-001f, -7.880040e-001f, 0.000000e+000f, -2.414474e-002f, 4.001873e-002f, 0.000000e+000f, -4.103394e-001f,
  0.000000e+000f, -1.808817e-001f, 2.848182e-001f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -4.466600e-002f, 7.033154e-002f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, -1.752802e-001f, 2.759979e-001f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -8.188646e-002f, 1.289392e-001f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, -1.612848e-001f, 2.539607e-001f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -1.091499e-001f, 1.718685e-001f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, -1.442376e-001f, 2.271181e-001f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -1.279027e-001f, 2.013968e-001f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, -1.279027e-001f, 2.013968e-001f, 0.000000e+000f, -3.340893e-001f,
  2.879886e-002f, -1.680961e-001f, 1.932821e-001f, 1.108564e-001f, -4.999976e-001f, 0.000000e+000f, -1.706857e-001f, 2.687634e-001f, 0.000000e+000f, -3.340893e-001f,
  2.141622e-002f, -1.509882e-001f, 1.846482e-001f, 1.195984e-001f, -5.130809e-001f, 0.000000e+000f, -1.531855e-001f, 2.412075e-001f, 0.000000e+000f, -3.340893e-001f,
  1.591776e-002f, -1.371064e-001f, 1.764227e-001f, 1.273791e-001f, -5.247256e-001f, 0.000000e+000f, -1.389587e-001f, 2.188058e-001f, 0.000000e+000f, -3.340893e-001f,
  1.331987e-002f, -1.278209e-001f, 1.682429e-001f, 1.384120e-001f, -5.412376e-001f, 0.000000e+000f, -1.274491e-001f, 2.006826e-001f, 0.000000e+000f, -3.340893e-001f,
  1.459070e-002f, -1.240664e-001f, 1.591801e-001f, 1.566135e-001f, -5.684780e-001f, 0.000000e+000f, -1.181416e-001f, 1.860269e-001f, 0.000000e+000f, -3.340893e-001f,
  1.813957e-002f, -1.235836e-001f, 1.496209e-001f, 1.785787e-001f, -6.013512e-001f, 0.000000e+000f, -1.106146e-001f, 1.741748e-001f, 0.000000e+000f, -3.340893e-001f,
  2.220664e-002f, -1.241716e-001f, 1.404628e-001f, 1.999901e-001f, -6.333957e-001f, 0.000000e+000f, -1.045389e-001f, 1.646080e-001f, 0.000000e+000f, -3.340893e-001f,
  2.750632e-002f, -1.266425e-001f, 1.312135e-001f, 2.232316e-001f, -6.681791e-001f, 0.000000e+000f, -9.966292e-002f, 1.569302e-001f, 0.000000e+000f, -3.340893e-001f,
  3.479179e-002f, -1.317897e-001f, 1.212548e-001f, 2.507517e-001f, -7.093658e-001f, 0.000000e+000f, -9.579661e-002f, 1.508423e-001f, 0.000000e+000f, -3.340893e-001f,
  4.107842e-002f, -1.362407e-001f, 1.126763e-001f, 2.741800e-001f, -7.444287e-001f, 0.000000e+000f, -9.279778e-002f, 1.461203e-001f, 0.000000e+000f, -3.340893e-001f,
  4.299646e-002f, -1.363667e-001f, 1.081191e-001f, 2.837970e-001f, -7.588215e-001f, 0.000000e+000f, -9.056177e-002f, 1.425995e-001f, 0.000000e+000f, -3.340893e-001f,
  4.254636e-002f, -1.344736e-001f, 1.062541e-001f, 2.853392e-001f, -7.611297e-001f, 0.000000e+000f, -8.901392e-002f, 1.401622e-001f, 0.000000e+000f, -3.340893e-001f,
  4.271758e-002f, -1.338303e-001f, 1.048167e-001f, 2.875160e-001f, -7.643874e-001f, 0.000000e+000f, -8.810430e-002f, 1.387299e-001f, 0.000000e+000f, -3.340893e-001f,
  4.374489e-002f, -1.346693e-001f, 1.035907e-001f, 2.910598e-001f, -7.696912e-001f, 0.000000e+000f, -8.780420e-002f, 1.382574e-001f, 0.000000e+000f, -3.340893e-001f,
  4.516832e-002f, -1.364912e-001f, 1.029303e-001f, 2.946414e-001f, -7.750513e-001f, 0.000000e+000f, -8.810430e-002f, 1.387299e-001f, 0.000000e+000f, -3.340893e-001f,
  4.652231e-002f, -1.388080e-001f, 1.032212e-001f, 2.968792e-001f, -7.784004e-001f, 0.000000e+000f, -8.901392e-002f, 1.401622e-001f, 0.000000e+000f, -3.340893e-001f,
  4.733957e-002f, -1.411337e-001f, 1.048570e-001f, 2.963660e-001f, -7.776324e-001f, 0.000000e+000f, -9.056177e-002f, 1.425995e-001f, 0.000000e+000f, -3.340893e-001f,
  4.717574e-002f, -1.429984e-001f, 1.081993e-001f, 2.917531e-001f, -7.707286e-001f, 0.000000e+000f, -9.279778e-002f, 1.461203e-001f, 0.000000e+000f, -3.340893e-001f,
  4.565202e-002f, -1.439812e-001f, 1.135247e-001f, 2.818829e-001f, -7.559569e-001f, 0.000000e+000f, -9.579661e-002f, 1.508423e-001f, 0.000000e+000f, -3.340893e-001f,
  4.250563e-002f, -1.437544e-001f, 1.209688e-001f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -9.966292e-002f, 1.569302e-001f, 0.000000e+000f, -3.340893e-001f,
  4.250563e-002f, -1.437544e-001f, 1.209688e-001f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -6.378427e-002f, 1.004354e-001f, 0.000000e+000f, -3.340893e-001f,
  4.250563e-002f, -1.437544e-001f, 1.209688e-001f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -6.133103e-002f, 9.657245e-002f, 0.000000e+000f, -3.340893e-001f,
  4.250563e-002f, -1.437544e-001f, 1.209688e-001f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -5.905951e-002f, 9.299570e-002f, 0.000000e+000f, -3.340893e-001f,
  4.250563e-002f, -1.437544e-001f, 1.209688e-001f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -5.695024e-002f, 8.967442e-002f, 0.000000e+000f, -3.340893e-001f,
  4.250563e-002f, -1.437544e-001f, 1.209688e-001f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -5.498644e-002f, 8.658220e-002f, 0.000000e+000f, -3.340893e-001f,
  4.250563e-002f, -1.437544e-001f, 1.209688e-001f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -5.315356e-002f, 8.369613e-002f, 0.000000e+000f, -3.340893e-001f,
  4.250563e-002f, -1.437544e-001f, 1.209688e-001f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -5.143893e-002f, 8.099625e-002f, 0.000000e+000f, -3.340893e-001f,
  -7.360636e-002f, 1.445187e-001f, -2.075363e-002f, 6.208862e-002f, -4.760040e-001f, 0.000000e+000f, -6.133145e-002f, 7.869363e-002f, 0.000000e+000f, -4.103394e-001f,
  -7.360636e-002f, 1.560012e-001f, -4.150725e-002f, 1.241772e-001f, -5.540040e-001f, 0.000000e+000f, -4.550967e-002f, 6.234572e-002f, 0.000000e+000f, -4.103394e-001f,
  -7.360636e-002f, 1.674838e-001f, -6.226088e-002f, 1.862659e-001f, -6.320040e-001f, 0.000000e+000f, -3.340597e-002f, 4.974684e-002f, 0.000000e+000f, -4.103394e-001f,
  -7.360636e-002f, 1.904490e-001f, -1.037681e-001f, 3.104431e-001f, -7.880040e-001f, 0.000000e+000f, -2.414474e-002f, 4.001873e-002f, 0.000000e+000f, -4.103394e-001f,
  0.000000e+000f, 0.000000e+000f, 3.514500e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 0.000000e+000f, 8.678527e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 3.405663e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 0.000000e+000f, 1.591040e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 3.133736e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 0.000000e+000f, 2.120763e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 2.802512e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 0.000000e+000f, 2.485127e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 2.485127e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -5.595569e-002f, 2.384995e-001f, 0.000000e+000f, -1.659083e-001f, 0.000000e+000f, 0.000000e+000f, 3.316393e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -4.161135e-002f, 2.278458e-001f, 0.000000e+000f, -1.789916e-001f, 0.000000e+000f, 0.000000e+000f, 2.976368e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -3.092793e-002f, 2.176960e-001f, 0.000000e+000f, -1.906362e-001f, 0.000000e+000f, 0.000000e+000f, 2.699944e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.588027e-002f, 2.076025e-001f, 0.000000e+000f, -2.071482e-001f, 0.000000e+000f, 0.000000e+000f, 2.476313e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.834948e-002f, 1.964195e-001f, 0.000000e+000f, -2.343887e-001f, 0.000000e+000f, 0.000000e+000f, 2.295471e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -3.524487e-002f, 1.846240e-001f, 0.000000e+000f, -2.672619e-001f, 0.000000e+000f, 0.000000e+000f, 2.149222e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -4.314711e-002f, 1.733234e-001f, 0.000000e+000f, -2.993064e-001f, 0.000000e+000f, 0.000000e+000f, 2.031172e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -5.344430e-002f, 1.619102e-001f, 0.000000e+000f, -3.340897e-001f, 0.000000e+000f, 0.000000e+000f, 1.936433e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -6.759984e-002f, 1.496218e-001f, 0.000000e+000f, -3.752765e-001f, 0.000000e+000f, 0.000000e+000f, 1.861312e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -7.981465e-002f, 1.390364e-001f, 0.000000e+000f, -4.103394e-001f, 0.000000e+000f, 0.000000e+000f, 1.803045e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -8.354138e-002f, 1.334130e-001f, 0.000000e+000f, -4.247322e-001f, 0.000000e+000f, 0.000000e+000f, 1.759599e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -8.266685e-002f, 1.311118e-001f, 0.000000e+000f, -4.270403e-001f, 0.000000e+000f, 0.000000e+000f, 1.729525e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -8.299952e-002f, 1.293381e-001f, 0.000000e+000f, -4.302980e-001f, 0.000000e+000f, 0.000000e+000f, 1.711851e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -8.499556e-002f, 1.278252e-001f, 0.000000e+000f, -4.356018e-001f, 0.000000e+000f, 0.000000e+000f, 1.706020e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -8.776127e-002f, 1.270103e-001f, 0.000000e+000f, -4.409620e-001f, 0.000000e+000f, 0.000000e+000f, 1.711851e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -9.039203e-002f, 1.273693e-001f, 0.000000e+000f, -4.443111e-001f, 0.000000e+000f, 0.000000e+000f, 1.729525e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -9.197996e-002f, 1.293877e-001f, 0.000000e+000f, -4.435430e-001f, 0.000000e+000f, 0.000000e+000f, 1.759599e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -9.166165e-002f, 1.335120e-001f, 0.000000e+000f, -4.366393e-001f, 0.000000e+000f, 0.000000e+000f, 1.803045e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -8.870107e-002f, 1.400833e-001f, 0.000000e+000f, -4.218676e-001f, 0.000000e+000f, 0.000000e+000f, 1.861312e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -8.258770e-002f, 1.492689e-001f, 0.000000e+000f, -3.980040e-001f, 0.000000e+000f, 0.000000e+000f, 1.936433e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -8.258770e-002f, 1.492689e-001f, 0.000000e+000f, -3.980040e-001f, 0.000000e+000f, 0.000000e+000f, 1.239317e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -8.258770e-002f, 1.492689e-001f, 0.000000e+000f, -3.980040e-001f, 0.000000e+000f, 0.000000e+000f, 1.191651e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -8.258770e-002f, 1.492689e-001f, 0.000000e+000f, -3.980040e-001f, 0.000000e+000f, 0.000000e+000f, 1.147516e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -8.258770e-002f, 1.492689e-001f, 0.000000e+000f, -3.980040e-001f, 0.000000e+000f, 0.000000e+000f, 1.106533e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -8.258770e-002f, 1.492689e-001f, 0.000000e+000f, -3.980040e-001f, 0.000000e+000f, 0.000000e+000f, 1.068377e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -8.258770e-002f, 1.492689e-001f, 0.000000e+000f, -3.980040e-001f, 0.000000e+000f, 0.000000e+000f, 1.032764e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -8.258770e-002f, 1.492689e-001f, 0.000000e+000f, -3.980040e-001f, 0.000000e+000f, 0.000000e+000f, 9.994494e-002f, 0.000000e+000f, 0.000000e+000f,
  -8.258770e-002f, 1.621526e-001f, -2.328595e-002f, 6.208862e-002f, -4.760040e-001f, -6.547996e-002f, 8.284213e-002f, 0.000000e+000f, 0.000000e+000f, -4.103394e-001f,
  -8.258770e-002f, 1.750363e-001f, -4.657190e-002f, 1.241772e-001f, -5.540040e-001f, -5.208985e-002f, 6.892590e-002f, 0.000000e+000f, 0.000000e+000f, -4.103394e-001f,
  -8.258770e-002f, 1.879200e-001f, -6.985785e-002f, 1.862659e-001f, -6.320040e-001f, -4.124321e-002f, 5.758408e-002f, 0.000000e+000f, 0.000000e+000f, -4.103394e-001f,
  -8.258770e-002f, 2.136873e-001f, -1.164298e-001f, 3.104431e-001f, -7.880040e-001f, -3.245151e-002f, 4.832550e-002f, 0.000000e+000f, 0.000000e+000f, -4.103394e-001f,
  0.000000e+000f, -2.149452e-001f, 3.075786e-001f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -5.307747e-002f, 7.595190e-002f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, -2.082888e-001f, 2.980536e-001f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -9.730724e-002f, 1.392431e-001f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, -1.916579e-001f, 2.742553e-001f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -1.297049e-001f, 1.856029e-001f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, -1.714004e-001f, 2.452676e-001f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -1.519892e-001f, 2.174909e-001f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, -1.519892e-001f, 2.174909e-001f, 0.000000e+000f, -3.340893e-001f,
  3.422224e-002f, -1.948359e-001f, 2.087277e-001f, 1.108564e-001f, -4.999976e-001f, 0.000000e+000f, -2.028291e-001f, 2.902409e-001f, 0.000000e+000f, -3.340893e-001f,
  2.544931e-002f, -1.757665e-001f, 1.994039e-001f, 1.195984e-001f, -5.130809e-001f, 0.000000e+000f, -1.820333e-001f, 2.604829e-001f, 0.000000e+000f, -3.340893e-001f,
  1.891538e-002f, -1.602091e-001f, 1.905211e-001f, 1.273791e-001f, -5.247256e-001f, 0.000000e+000f, -1.651273e-001f, 2.362911e-001f, 0.000000e+000f, -3.340893e-001f,
  1.582825e-002f, -1.496184e-001f, 1.816875e-001f, 1.384120e-001f, -5.412376e-001f, 0.000000e+000f, -1.514502e-001f, 2.167196e-001f, 0.000000e+000f, -3.340893e-001f,
  1.733841e-002f, -1.449399e-001f, 1.719006e-001f, 1.566135e-001f, -5.684780e-001f, 0.000000e+000f, -1.403899e-001f, 2.008928e-001f, 0.000000e+000f, -3.340893e-001f,
  2.155560e-002f, -1.437604e-001f, 1.615774e-001f, 1.785787e-001f, -6.013512e-001f, 0.000000e+000f, -1.314454e-001f, 1.880936e-001f, 0.000000e+000f, -3.340893e-001f,
  2.638857e-002f, -1.437649e-001f, 1.516875e-001f, 1.999901e-001f, -6.333957e-001f, 0.000000e+000f, -1.242255e-001f, 1.777622e-001f, 0.000000e+000f, -3.340893e-001f,
  3.268628e-002f, -1.457964e-001f, 1.416991e-001f, 2.232316e-001f, -6.681791e-001f, 0.000000e+000f, -1.184314e-001f, 1.694709e-001f, 0.000000e+000f, -3.340893e-001f,
  4.134375e-002f, -1.506694e-001f, 1.309446e-001f, 2.507517e-001f, -7.093658e-001f, 0.000000e+000f, -1.138369e-001f, 1.628965e-001f, 0.000000e+000f, -3.340893e-001f,
  4.881427e-002f, -1.548854e-001f, 1.216805e-001f, 2.741800e-001f, -7.444287e-001f, 0.000000e+000f, -1.102734e-001f, 1.577971e-001f, 0.000000e+000f, -3.340893e-001f,
  5.109352e-002f, -1.547077e-001f, 1.167592e-001f, 2.837970e-001f, -7.588215e-001f, 0.000000e+000f, -1.076163e-001f, 1.539949e-001f, 0.000000e+000f, -3.340893e-001f,
  5.055866e-002f, -1.525349e-001f, 1.147451e-001f, 2.853392e-001f, -7.611297e-001f, 0.000000e+000f, -1.057769e-001f, 1.513629e-001f, 0.000000e+000f, -3.340893e-001f,
  5.076212e-002f, -1.517413e-001f, 1.131928e-001f, 2.875160e-001f, -7.643874e-001f, 0.000000e+000f, -1.046960e-001f, 1.498162e-001f, 0.000000e+000f, -3.340893e-001f,
  5.198289e-002f, -1.525629e-001f, 1.118689e-001f, 2.910598e-001f, -7.696912e-001f, 0.000000e+000f, -1.043394e-001f, 1.493059e-001f, 0.000000e+000f, -3.340893e-001f,
  5.367438e-002f, -1.544850e-001f, 1.111557e-001f, 2.946414e-001f, -7.750513e-001f, 0.000000e+000f, -1.046960e-001f, 1.498162e-001f, 0.000000e+000f, -3.340893e-001f,
  5.528335e-002f, -1.570069e-001f, 1.114698e-001f, 2.968792e-001f, -7.784004e-001f, 0.000000e+000f, -1.057769e-001f, 1.513629e-001f, 0.000000e+000f, -3.340893e-001f,
  5.625451e-002f, -1.596311e-001f, 1.132363e-001f, 2.963660e-001f, -7.776324e-001f, 0.000000e+000f, -1.076163e-001f, 1.539949e-001f, 0.000000e+000f, -3.340893e-001f,
  5.605984e-002f, -1.618749e-001f, 1.168458e-001f, 2.917531e-001f, -7.707286e-001f, 0.000000e+000f, -1.102734e-001f, 1.577971e-001f, 0.000000e+000f, -3.340893e-001f,
  5.424916e-002f, -1.633029e-001f, 1.225968e-001f, 2.818829e-001f, -7.559569e-001f, 0.000000e+000f, -1.138369e-001f, 1.628965e-001f, 0.000000e+000f, -3.340893e-001f,
  5.051025e-002f, -1.635705e-001f, 1.306357e-001f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -1.184314e-001f, 1.694709e-001f, 0.000000e+000f, -3.340893e-001f,
  5.051025e-002f, -1.635705e-001f, 1.306357e-001f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -7.579606e-002f, 1.084614e-001f, 0.000000e+000f, -3.340893e-001f,
  5.051025e-002f, -1.635705e-001f, 1.306357e-001f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -7.288083e-002f, 1.042898e-001f, 0.000000e+000f, -3.340893e-001f,
  5.051025e-002f, -1.635705e-001f, 1.306357e-001f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -7.018154e-002f, 1.004272e-001f, 0.000000e+000f, -3.340893e-001f,
  5.051025e-002f, -1.635705e-001f, 1.306357e-001f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -6.767506e-002f, 9.684052e-002f, 0.000000e+000f, -3.340893e-001f,
  5.051025e-002f, -1.635705e-001f, 1.306357e-001f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -6.534143e-002f, 9.350119e-002f, 0.000000e+000f, -3.340893e-001f,
  5.051025e-002f, -1.635705e-001f, 1.306357e-001f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -6.316339e-002f, 9.038448e-002f, 0.000000e+000f, -3.340893e-001f,
  5.051025e-002f, -1.635705e-001f, 1.306357e-001f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -6.112586e-002f, 8.746885e-002f, 0.000000e+000f, -3.340893e-001f,
  -5.203970e-002f, 1.021747e-001f, -1.467281e-002f, 6.208862e-002f, -4.760040e-001f, 0.000000e+000f, -6.133145e-002f, 7.869363e-002f, 0.000000e+000f, -4.103394e-001f,
  -5.203970e-002f, 1.102929e-001f, -2.934563e-002f, 1.241772e-001f, -5.540040e-001f, 0.000000e+000f, -4.550967e-002f, 6.234572e-002f, 0.000000e+000f, -4.103394e-001f,
  -5.203970e-002f, 1.184111e-001f, -4.401844e-002f, 1.862659e-001f, -6.320040e-001f, 0.000000e+000f, -3.340597e-002f, 4.974684e-002f, 0.000000e+000f, -4.103394e-001f,
  -5.203970e-002f, 1.346475e-001f, -7.336407e-002f, 3.104431e-001f, -7.880040e-001f, 0.000000e+000f, -2.414474e-002f, 4.001873e-002f, 0.000000e+000f, -4.103394e-001f,
  0.000000e+000f, -1.960592e-001f, 2.696406e-001f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -4.841387e-002f, 6.658368e-002f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, -1.899877e-001f, 2.612904e-001f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -8.875744e-002f, 1.220683e-001f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, -1.748180e-001f, 2.404275e-001f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -1.183085e-001f, 1.627099e-001f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, -1.563404e-001f, 2.150153e-001f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -1.386348e-001f, 1.906647e-001f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, -1.386348e-001f, 1.906647e-001f, 0.000000e+000f, -3.340893e-001f,
  3.121534e-002f, -1.759794e-001f, 1.829824e-001f, 1.108564e-001f, -4.999976e-001f, 0.000000e+000f, -1.850077e-001f, 2.544414e-001f, 0.000000e+000f, -3.340893e-001f,
  2.321323e-002f, -1.590308e-001f, 1.748086e-001f, 1.195984e-001f, -5.130809e-001f, 0.000000e+000f, -1.660391e-001f, 2.283539e-001f, 0.000000e+000f, -3.340893e-001f,
  1.725340e-002f, -1.451721e-001f, 1.670214e-001f, 1.273791e-001f, -5.247256e-001f, 0.000000e+000f, -1.506186e-001f, 2.071460e-001f, 0.000000e+000f, -3.340893e-001f,
  1.443752e-002f, -1.356687e-001f, 1.592774e-001f, 1.384120e-001f, -5.412376e-001f, 0.000000e+000f, -1.381432e-001f, 1.899885e-001f, 0.000000e+000f, -3.340893e-001f,
  1.581499e-002f, -1.313246e-001f, 1.506976e-001f, 1.566135e-001f, -5.684780e-001f, 0.000000e+000f, -1.280547e-001f, 1.761138e-001f, 0.000000e+000f, -3.340893e-001f,
  1.966164e-002f, -1.300347e-001f, 1.416478e-001f, 1.785787e-001f, -6.013512e-001f, 0.000000e+000f, -1.198961e-001f, 1.648933e-001f, 0.000000e+000f, -3.340893e-001f,
  2.406997e-002f, -1.297933e-001f, 1.329777e-001f, 1.999901e-001f, -6.333957e-001f, 0.000000e+000f, -1.133106e-001f, 1.558363e-001f, 0.000000e+000f, -3.340893e-001f,
  2.981433e-002f, -1.313267e-001f, 1.242213e-001f, 2.232316e-001f, -6.681791e-001f, 0.000000e+000f, -1.080255e-001f, 1.485677e-001f, 0.000000e+000f, -3.340893e-001f,
  3.771112e-002f, -1.353319e-001f, 1.147933e-001f, 2.507517e-001f, -7.093658e-001f, 0.000000e+000f, -1.038348e-001f, 1.428041e-001f, 0.000000e+000f, -3.340893e-001f,
  4.452525e-002f, -1.387982e-001f, 1.066719e-001f, 2.741800e-001f, -7.444287e-001f, 0.000000e+000f, -1.005843e-001f, 1.383338e-001f, 0.000000e+000f, -3.340893e-001f,
  4.660424e-002f, -1.385204e-001f, 1.023576e-001f, 2.837970e-001f, -7.588215e-001f, 0.000000e+000f, -9.816068e-002f, 1.350006e-001f, 0.000000e+000f, -3.340893e-001f,
  4.611637e-002f, -1.365657e-001f, 1.005920e-001f, 2.853392e-001f, -7.611297e-001f, 0.000000e+000f, -9.648296e-002f, 1.326932e-001f, 0.000000e+000f, -3.340893e-001f,
  4.630195e-002f, -1.358314e-001f, 9.923116e-002f, 2.875160e-001f, -7.643874e-001f, 0.000000e+000f, -9.549701e-002f, 1.313372e-001f, 0.000000e+000f, -3.340893e-001f,
  4.741546e-002f, -1.365189e-001f, 9.807049e-002f, 2.910598e-001f, -7.696912e-001f, 0.000000e+000f, -9.517174e-002f, 1.308899e-001f, 0.000000e+000f, -3.340893e-001f,
  4.895834e-002f, -1.381862e-001f, 9.744527e-002f, 2.946414e-001f, -7.750513e-001f, 0.000000e+000f, -9.549701e-002f, 1.313372e-001f, 0.000000e+000f, -3.340893e-001f,
  5.042593e-002f, -1.404048e-001f, 9.772066e-002f, 2.968792e-001f, -7.784004e-001f, 0.000000e+000f, -9.648296e-002f, 1.326932e-001f, 0.000000e+000f, -3.340893e-001f,
  5.131177e-002f, -1.427492e-001f, 9.926929e-002f, 2.963660e-001f, -7.776324e-001f, 0.000000e+000f, -9.816068e-002f, 1.350006e-001f, 0.000000e+000f, -3.340893e-001f,
  5.113420e-002f, -1.448057e-001f, 1.024335e-001f, 2.917531e-001f, -7.707286e-001f, 0.000000e+000f, -1.005843e-001f, 1.383338e-001f, 0.000000e+000f, -3.340893e-001f,
  4.948262e-002f, -1.462001e-001f, 1.074752e-001f, 2.818829e-001f, -7.559569e-001f, 0.000000e+000f, -1.038348e-001f, 1.428041e-001f, 0.000000e+000f, -3.340893e-001f,
  4.607222e-002f, -1.466341e-001f, 1.145226e-001f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -1.080255e-001f, 1.485677e-001f, 0.000000e+000f, -3.340893e-001f,
  4.607222e-002f, -1.466341e-001f, 1.145226e-001f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -6.913632e-002f, 9.508330e-002f, 0.000000e+000f, -3.340893e-001f,
  4.607222e-002f, -1.466341e-001f, 1.145226e-001f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -6.647723e-002f, 9.142625e-002f, 0.000000e+000f, -3.340893e-001f,
  4.607222e-002f, -1.466341e-001f, 1.145226e-001f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -6.401511e-002f, 8.804009e-002f, 0.000000e+000f, -3.340893e-001f,
  4.607222e-002f, -1.466341e-001f, 1.145226e-001f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -6.172886e-002f, 8.489580e-002f, 0.000000e+000f, -3.340893e-001f,
  4.607222e-002f, -1.466341e-001f, 1.145226e-001f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -5.960027e-002f, 8.196836e-002f, 0.000000e+000f, -3.340893e-001f,
  4.607222e-002f, -1.466341e-001f, 1.145226e-001f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -5.761360e-002f, 7.923608e-002f, 0.000000e+000f, -3.340893e-001f,
  4.607222e-002f, -1.466341e-001f, 1.145226e-001f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -5.575510e-002f, 7.668008e-002f, 0.000000e+000f, -3.340893e-001f,
  -4.638043e-002f, 9.106329e-002f, -1.307716e-002f, 6.208862e-002f, -4.760040e-001f, 0.000000e+000f, -6.133145e-002f, 7.869363e-002f, 0.000000e+000f, -4.103394e-001f,
  -4.638043e-002f, 9.829864e-002f, -2.615432e-002f, 1.241772e-001f, -5.540040e-001f, 0.000000e+000f, -4.550967e-002f, 6.234572e-002f, 0.000000e+000f, -4.103394e-001f,
  -4.638043e-002f, 1.055340e-001f, -3.923148e-002f, 1.862659e-001f, -6.320040e-001f, 0.000000e+000f, -3.340597e-002f, 4.974684e-002f, 0.000000e+000f, -4.103394e-001f,
  -4.638043e-002f, 1.200047e-001f, -6.538579e-002f, 3.104431e-001f, -7.880040e-001f, 0.000000e+000f, -2.414474e-002f, 4.001873e-002f, 0.000000e+000f, -4.103394e-001f,
  0.000000e+000f, -1.870348e-001f, 2.526142e-001f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -5.466570e-002f, 7.383298e-002f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, -1.788677e-001f, 2.415836e-001f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -9.715455e-002f, 1.312196e-001f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, -1.598218e-001f, 2.158596e-001f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -1.253882e-001f, 1.693527e-001f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, -1.387797e-001f, 1.874396e-001f, 0.000000e+000f, -3.340893e-001f,
  3.159467e-002f, -1.707198e-001f, 1.729440e-001f, 1.089857e-001f, -4.971980e-001f, 0.000000e+000f, -1.805608e-001f, 2.438703e-001f, 0.000000e+000f, -3.340893e-001f,
  2.214474e-002f, -1.511643e-001f, 1.637704e-001f, 1.195984e-001f, -5.130809e-001f, 0.000000e+000f, -1.583964e-001f, 2.139345e-001f, 0.000000e+000f, -3.340893e-001f,
  1.563141e-002f, -1.359099e-001f, 1.550489e-001f, 1.291491e-001f, -5.273746e-001f, 0.000000e+000f, -1.410990e-001f, 1.905721e-001f, 0.000000e+000f, -3.340893e-001f,
  1.386635e-002f, -1.269064e-001f, 1.461083e-001f, 1.448944e-001f, -5.509392e-001f, 0.000000e+000f, -1.276883e-001f, 1.724593e-001f, 0.000000e+000f, -3.340893e-001f,
  1.715870e-002f, -1.239326e-001f, 1.360859e-001f, 1.697056e-001f, -5.880718e-001f, 0.000000e+000f, -1.172934e-001f, 1.584197e-001f, 0.000000e+000f, -3.340893e-001f,
  2.206685e-002f, -1.232295e-001f, 1.261829e-001f, 1.957031e-001f, -6.269796e-001f, 0.000000e+000f, -1.092449e-001f, 1.475491e-001f, 0.000000e+000f, -3.340893e-001f,
  2.844200e-002f, -1.245800e-001f, 1.163774e-001f, 2.232316e-001f, -6.681791e-001f, 0.000000e+000f, -1.030532e-001f, 1.391864e-001f, 0.000000e+000f, -3.340893e-001f,
  3.750281e-002f, -1.290103e-001f, 1.058324e-001f, 2.561653e-001f, -7.174677e-001f, 0.000000e+000f, -9.836737e-002f, 1.328576e-001f, 0.000000e+000f, -3.340893e-001f,
  4.379753e-002f, -1.316299e-001f, 9.788774e-002f, 2.796513e-001f, -7.526170e-001f, 0.000000e+000f, -9.493996e-002f, 1.282285e-001f, 0.000000e+000f, -3.340893e-001f,
  4.423192e-002f, -1.299078e-001f, 9.476946e-002f, 2.850126e-001f, -7.606409e-001f, 0.000000e+000f, -9.260056e-002f, 1.250688e-001f, 0.000000e+000f, -3.340893e-001f,
  4.404925e-002f, -1.285099e-001f, 9.321465e-002f, 2.869295e-001f, -7.635096e-001f, 0.000000e+000f, -9.123839e-002f, 1.232290e-001f, 0.000000e+000f, -3.340893e-001f,
  4.523296e-002f, -1.291189e-001f, 9.187785e-002f, 2.910598e-001f, -7.696912e-001f, 0.000000e+000f, -9.079105e-002f, 1.226249e-001f, 0.000000e+000f, -3.340893e-001f,
  4.700611e-002f, -1.310600e-001f, 9.126496e-002f, 2.952414e-001f, -7.759494e-001f, 0.000000e+000f, -9.123839e-002f, 1.232290e-001f, 0.000000e+000f, -3.340893e-001f,
  4.853615e-002f, -1.336472e-001f, 9.196825e-002f, 2.970821e-001f, -7.787041e-001f, 0.000000e+000f, -9.260056e-002f, 1.250688e-001f, 0.000000e+000f, -3.340893e-001f,
  4.899721e-002f, -1.362037e-001f, 9.458001e-002f, 2.941703e-001f, -7.743463e-001f, 0.000000e+000f, -9.493996e-002f, 1.282285e-001f, 0.000000e+000f, -3.340893e-001f,
  4.764774e-002f, -1.380944e-001f, 9.959538e-002f, 2.843228e-001f, -7.596084e-001f, 0.000000e+000f, -9.836737e-002f, 1.328576e-001f, 0.000000e+000f, -3.340893e-001f,
  4.395155e-002f, -1.388001e-001f, 1.072911e-001f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -1.030532e-001f, 1.391864e-001f, 0.000000e+000f, -3.340893e-001f,
  4.395155e-002f, -1.388001e-001f, 1.072911e-001f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -6.543058e-002f, 8.837232e-002f, 0.000000e+000f, -3.340893e-001f,
  4.395155e-002f, -1.388001e-001f, 1.072911e-001f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -6.245646e-002f, 8.435539e-002f, 0.000000e+000f, -3.340893e-001f,
  4.395155e-002f, -1.388001e-001f, 1.072911e-001f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -5.974096e-002f, 8.068777e-002f, 0.000000e+000f, -3.340893e-001f,
  4.395155e-002f, -1.388001e-001f, 1.072911e-001f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -5.725176e-002f, 7.732578e-002f, 0.000000e+000f, -3.340893e-001f,
  4.395155e-002f, -1.388001e-001f, 1.072911e-001f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -5.496169e-002f, 7.423274e-002f, 0.000000e+000f, -3.340893e-001f,
  4.395155e-002f, -1.388001e-001f, 1.072911e-001f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -5.284777e-002f, 7.137764e-002f, 0.000000e+000f, -3.340893e-001f,
  -4.378595e-002f, 8.596929e-002f, -1.234563e-002f, 6.208862e-002f, -4.760040e-001f, 0.000000e+000f, -6.057428e-002f, 7.772210e-002f, 0.000000e+000f, -4.103394e-001f,
  -4.378595e-002f, 9.279990e-002f, -2.469127e-002f, 1.241772e-001f, -5.540040e-001f, 0.000000e+000f, -4.469700e-002f, 6.123241e-002f, 0.000000e+000f, -4.103394e-001f,
  -4.378595e-002f, 1.132917e-001f, -6.172817e-002f, 3.104431e-001f, -7.880040e-001f, 0.000000e+000f, -3.263801e-002f, 4.860323e-002f, 0.000000e+000f, -4.103394e-001f,
  0.000000e+000f, -1.783038e-001f, 2.367516e-001f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -5.211386e-002f, 6.919671e-002f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, -1.705180e-001f, 2.264136e-001f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -9.797982e-002f, 1.300975e-001f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, -1.489705e-001f, 1.978028e-001f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -1.229354e-001f, 1.632335e-001f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, -1.291477e-001f, 1.714822e-001f, 0.000000e+000f, -3.340893e-001f,
  2.676194e-002f, -1.554526e-001f, 1.592272e-001f, 1.127012e-001f, -5.027586e-001f, 0.000000e+000f, -1.645209e-001f, 2.184506e-001f, 0.000000e+000f, -3.340893e-001f,
  1.869385e-002f, -1.383202e-001f, 1.507032e-001f, 1.226673e-001f, -5.176739e-001f, 0.000000e+000f, -1.450359e-001f, 1.925785e-001f, 0.000000e+000f, -3.340893e-001f,
  1.333931e-002f, -1.240916e-001f, 1.412509e-001f, 1.356765e-001f, -5.371435e-001f, 0.000000e+000f, -1.277132e-001f, 1.695774e-001f, 0.000000e+000f, -3.340893e-001f,
  1.438276e-002f, -1.187484e-001f, 1.323165e-001f, 1.566135e-001f, -5.684780e-001f, 0.000000e+000f, -1.164579e-001f, 1.546326e-001f, 0.000000e+000f, -3.340893e-001f,
  1.865176e-002f, -1.172618e-001f, 1.228160e-001f, 1.829201e-001f, -6.078486e-001f, 0.000000e+000f, -1.077348e-001f, 1.430501e-001f, 0.000000e+000f, -3.340893e-001f,
  2.478290e-002f, -1.174173e-001f, 1.122131e-001f, 2.134183e-001f, -6.534924e-001f, 0.000000e+000f, -1.000364e-001f, 1.328282e-001f, 0.000000e+000f, -3.340893e-001f,
  3.280392e-002f, -1.207065e-001f, 1.024390e-001f, 2.451859e-001f, -7.010360e-001f, 0.000000e+000f, -9.512129e-002f, 1.263019e-001f, 0.000000e+000f, -3.340893e-001f,
  4.122413e-002f, -1.244947e-001f, 9.262367e-002f, 2.772362e-001f, -7.490027e-001f, 0.000000e+000f, -9.097701e-002f, 1.207992e-001f, 0.000000e+000f, -3.340893e-001f,
  4.228527e-002f, -1.232571e-001f, 8.910959e-002f, 2.847911e-001f, -7.603094e-001f, 0.000000e+000f, -8.858265e-002f, 1.176199e-001f, 0.000000e+000f, -3.340893e-001f,
  4.199300e-002f, -1.215524e-001f, 8.736133e-002f, 2.869295e-001f, -7.635096e-001f, 0.000000e+000f, -8.697931e-002f, 1.154910e-001f, 0.000000e+000f, -3.340893e-001f,
  4.312145e-002f, -1.221072e-001f, 8.610848e-002f, 2.910598e-001f, -7.696912e-001f, 0.000000e+000f, -8.655285e-002f, 1.149248e-001f, 0.000000e+000f, -3.340893e-001f,
  4.481182e-002f, -1.239190e-001f, 8.553408e-002f, 2.952414e-001f, -7.759494e-001f, 0.000000e+000f, -8.697931e-002f, 1.154910e-001f, 0.000000e+000f, -3.340893e-001f,
  4.643511e-002f, -1.267738e-001f, 8.646270e-002f, 2.969904e-001f, -7.785668e-001f, 0.000000e+000f, -8.858265e-002f, 1.176199e-001f, 0.000000e+000f, -3.340893e-001f,
  4.663233e-002f, -1.291407e-001f, 8.925777e-002f, 2.930632e-001f, -7.726893e-001f, 0.000000e+000f, -9.097701e-002f, 1.207992e-001f, 0.000000e+000f, -3.340893e-001f,
  4.451480e-002f, -1.310014e-001f, 9.546164e-002f, 2.791986e-001f, -7.519396e-001f, 0.000000e+000f, -9.512129e-002f, 1.263019e-001f, 0.000000e+000f, -3.340893e-001f,
  4.189985e-002f, -1.313643e-001f, 1.005539e-001f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -6.442135e-002f, 8.553858e-002f, 0.000000e+000f, -3.340893e-001f,
  4.189985e-002f, -1.313643e-001f, 1.005539e-001f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -6.092562e-002f, 8.089695e-002f, 0.000000e+000f, -3.340893e-001f,
  4.189985e-002f, -1.313643e-001f, 1.005539e-001f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -5.821781e-002f, 7.730153e-002f, 0.000000e+000f, -3.340893e-001f,
  4.189985e-002f, -1.313643e-001f, 1.005539e-001f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -5.574046e-002f, 7.401210e-002f, 0.000000e+000f, -3.340893e-001f,
  4.189985e-002f, -1.313643e-001f, 1.005539e-001f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -5.310408e-002f, 7.051153e-002f, 0.000000e+000f, -3.340893e-001f,
  4.189985e-002f, -1.313643e-001f, 1.005539e-001f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -5.103509e-002f, 6.776433e-002f, 0.000000e+000f, -3.340893e-001f,
  -4.133660e-002f, 8.116024e-002f, -1.165503e-002f, 6.208862e-002f, -4.760040e-001f, 0.000000e+000f, -6.095051e-002f, 7.820485e-002f, 0.000000e+000f, -4.103394e-001f,
  -4.133660e-002f, 8.760875e-002f, -2.331006e-002f, 1.241772e-001f, -5.540040e-001f, 0.000000e+000f, -4.496465e-002f, 6.159907e-002f, 0.000000e+000f, -4.103394e-001f,
  -4.133660e-002f, 1.069543e-001f, -5.827515e-002f, 3.104431e-001f, -7.880040e-001f, 0.000000e+000f, -3.263801e-002f, 4.860323e-002f, 0.000000e+000f, -4.103394e-001f,
  0.000000e+000f, -1.740506e-001f, 2.292289e-001f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -6.560065e-002f, 8.639764e-002f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, -1.612147e-001f, 2.123236e-001f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -1.092162e-001f, 1.438404e-001f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, -1.355191e-001f, 1.784820e-001f, 0.000000e+000f, -3.340893e-001f,
  2.940133e-002f, -1.578803e-001f, 1.569340e-001f, 1.089857e-001f, -4.971980e-001f, 0.000000e+000f, -1.680260e-001f, 2.212943e-001f, 0.000000e+000f, -3.340893e-001f,
  1.824793e-002f, -1.348241e-001f, 1.459147e-001f, 1.226673e-001f, -5.176739e-001f, 0.000000e+000f, -1.415762e-001f, 1.864593e-001f, 0.000000e+000f, -3.340893e-001f,
  1.281684e-002f, -1.196923e-001f, 1.354061e-001f, 1.384120e-001f, -5.412376e-001f, 0.000000e+000f, -1.226359e-001f, 1.615144e-001f, 0.000000e+000f, -3.340893e-001f,
  1.596753e-002f, -1.147925e-001f, 1.234879e-001f, 1.697056e-001f, -5.880718e-001f, 0.000000e+000f, -1.091508e-001f, 1.437542e-001f, 0.000000e+000f, -3.340893e-001f,
  2.224738e-002f, -1.140311e-001f, 1.115925e-001f, 2.043471e-001f, -6.399163e-001f, 0.000000e+000f, -9.956680e-002f, 1.311319e-001f, 0.000000e+000f, -3.340893e-001f,
  3.202142e-002f, -1.174822e-001f, 9.918406e-002f, 2.451859e-001f, -7.010360e-001f, 0.000000e+000f, -9.285228e-002f, 1.222887e-001f, 0.000000e+000f, -3.340893e-001f,
  4.075706e-002f, -1.211225e-001f, 8.882593e-002f, 2.796513e-001f, -7.526170e-001f, 0.000000e+000f, -8.834912e-002f, 1.163579e-001f, 0.000000e+000f, -3.340893e-001f,
  4.093958e-002f, -1.188496e-001f, 8.551600e-002f, 2.853392e-001f, -7.611297e-001f, 0.000000e+000f, -8.565227e-002f, 1.128061e-001f, 0.000000e+000f, -3.340893e-001f,
  4.162686e-002f, -1.183981e-001f, 8.372912e-002f, 2.895622e-001f, -7.674498e-001f, 0.000000e+000f, -8.453433e-002f, 1.113338e-001f, 0.000000e+000f, -3.340893e-001f,
  4.374289e-002f, -1.204918e-001f, 8.281625e-002f, 2.952414e-001f, -7.759494e-001f, 0.000000e+000f, -8.490452e-002f, 1.118213e-001f, 0.000000e+000f, -3.340893e-001f,
  4.545693e-002f, -1.236685e-001f, 8.402697e-002f, 2.967552e-001f, -7.782149e-001f, 0.000000e+000f, -8.679266e-002f, 1.143080e-001f, 0.000000e+000f, -3.340893e-001f,
  4.498185e-002f, -1.265115e-001f, 8.859533e-002f, 2.884908e-001f, -7.658462e-001f, 0.000000e+000f, -9.035445e-002f, 1.189990e-001f, 0.000000e+000f, -3.340893e-001f,
  4.090038e-002f, -1.277901e-001f, 9.735878e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -9.589909e-002f, 1.263014e-001f, 0.000000e+000f, -3.340893e-001f,
  4.090038e-002f, -1.277901e-001f, 9.735878e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -5.993693e-002f, 7.893839e-002f, 0.000000e+000f, -3.340893e-001f,
  4.090038e-002f, -1.277901e-001f, 9.735878e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -5.641123e-002f, 7.429495e-002f, 0.000000e+000f, -3.340893e-001f,
  4.090038e-002f, -1.277901e-001f, 9.735878e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -5.327727e-002f, 7.016746e-002f, 0.000000e+000f, -3.340893e-001f,
  4.090038e-002f, -1.277901e-001f, 9.735878e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -5.047321e-002f, 6.647443e-002f, 0.000000e+000f, -3.340893e-001f,
  -4.016380e-002f, 7.885756e-002f, -1.132435e-002f, 6.208862e-002f, -4.760040e-001f, 0.000000e+000f, -6.133145e-002f, 7.869363e-002f, 0.000000e+000f, -4.103394e-001f,
  -4.016380e-002f, 1.039198e-001f, -5.662176e-002f, 3.104431e-001f, -7.880040e-001f, 0.000000e+000f, -4.469700e-002f, 6.123241e-002f, 0.000000e+000f, -4.103394e-001f,
  -4.016380e-002f, 9.138866e-002f, -3.397306e-002f, 1.862659e-001f, -6.320040e-001f, 0.000000e+000f, -3.226713e-002f, 4.805092e-002f, 0.000000e+000f, -4.103394e-001f,
  0.000000e+000f, -1.698730e-001f, 2.219646e-001f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -7.690273e-002f, 1.004850e-001f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, -1.514688e-001f, 1.979168e-001f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -1.201183e-001f, 1.569527e-001f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, -1.201183e-001f, 1.569527e-001f, 0.000000e+000f, -3.340893e-001f,
  2.011280e-002f, -1.364094e-001f, 1.439002e-001f, 1.195984e-001f, -5.130809e-001f, 0.000000e+000f, -1.438624e-001f, 1.879779e-001f, 0.000000e+000f, -3.340893e-001f,
  1.250920e-002f, -1.166896e-001f, 1.311151e-001f, 1.384120e-001f, -5.412376e-001f, 0.000000e+000f, -1.196923e-001f, 1.563961e-001f, 0.000000e+000f, -3.340893e-001f,
  1.703557e-002f, -1.114973e-001f, 1.166026e-001f, 1.785787e-001f, -6.013512e-001f, 0.000000e+000f, -1.038824e-001f, 1.357380e-001f, 0.000000e+000f, -3.340893e-001f,
  2.583224e-002f, -1.120129e-001f, 1.022573e-001f, 2.232316e-001f, -6.681791e-001f, 0.000000e+000f, -9.359729e-002f, 1.222989e-001f, 0.000000e+000f, -3.340893e-001f,
  3.857833e-002f, -1.176115e-001f, 8.781093e-002f, 2.741800e-001f, -7.444287e-001f, 0.000000e+000f, -8.714997e-002f, 1.138746e-001f, 0.000000e+000f, -3.340893e-001f,
  3.995693e-002f, -1.155825e-001f, 8.280600e-002f, 2.853392e-001f, -7.611297e-001f, 0.000000e+000f, -8.359641e-002f, 1.092313e-001f, 0.000000e+000f, -3.340893e-001f,
  4.108251e-002f, -1.154647e-001f, 8.073033e-002f, 2.910598e-001f, -7.696912e-001f, 0.000000e+000f, -8.246032e-002f, 1.077468e-001f, 0.000000e+000f, -3.340893e-001f,
  4.369089e-002f, -1.186525e-001f, 8.044236e-002f, 2.968792e-001f, -7.784004e-001f, 0.000000e+000f, -8.359641e-002f, 1.092313e-001f, 0.000000e+000f, -3.340893e-001f,
  4.430456e-002f, -1.224235e-001f, 8.432193e-002f, 2.917531e-001f, -7.707286e-001f, 0.000000e+000f, -8.714997e-002f, 1.138746e-001f, 0.000000e+000f, -3.340893e-001f,
  3.991868e-002f, -1.243087e-001f, 9.427349e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -9.359729e-002f, 1.222989e-001f, 0.000000e+000f, -3.340893e-001f,
  3.991868e-002f, -1.243087e-001f, 9.427349e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -5.759833e-002f, 7.526089e-002f, 0.000000e+000f, -3.340893e-001f,
  3.991868e-002f, -1.243087e-001f, 9.427349e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -5.348417e-002f, 6.988511e-002f, 0.000000e+000f, -3.340893e-001f,
  3.991868e-002f, -1.243087e-001f, 9.427349e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -4.991856e-002f, 6.522610e-002f, 0.000000e+000f, -3.340893e-001f,
  -3.902427e-002f, 7.662021e-002f, -1.100306e-002f, 6.208862e-002f, -4.760040e-001f, 0.000000e+000f, -6.133145e-002f, 7.869363e-002f, 0.000000e+000f, -4.103394e-001f,
  -3.902427e-002f, 1.009714e-001f, -5.501529e-002f, 3.104431e-001f, -7.880040e-001f, 0.000000e+000f, -4.417115e-002f, 6.051203e-002f, 0.000000e+000f, -4.103394e-001f,
  0.000000e+000f, -1.657713e-001f, 2.149490e-001f, 0.000000e+000f, -3.340893e-001f,
  0.000000e+000f, -1.000318e-001f, 1.297072e-001f, 0.000000e+000f, -3.340893e-001f, 0.000000e+000f, -1.321884e-001f, 1.714034e-001f, 0.000000e+000f, -3.340893e-001f,
  1.962717e-002f, -1.329197e-001f, 1.393519e-001f, 1.195984e-001f, -5.130809e-001f, 0.000000e+000f, -1.403888e-001f, 1.820365e-001f, 0.000000e+000f, -3.340893e-001f,
  1.337184e-002f, -1.099856e-001f, 1.201314e-001f, 1.566135e-001f, -5.684780e-001f, 0.000000e+000f, -1.082724e-001f, 1.403924e-001f, 0.000000e+000f, -3.340893e-001f,
  2.520852e-002f, -1.090564e-001f, 9.902531e-002f, 2.232316e-001f, -6.681791e-001f, 0.000000e+000f, -9.133736e-002f, 1.184335e-001f, 0.000000e+000f, -3.340893e-001f,
  3.940466e-002f, -1.140225e-001f, 8.159625e-002f, 2.837970e-001f, -7.588215e-001f, 0.000000e+000f, -8.299649e-002f, 1.076182e-001f, 0.000000e+000f, -3.340893e-001f,
  4.009056e-002f, -1.122762e-001f, 7.817870e-002f, 2.910598e-001f, -7.696912e-001f, 0.000000e+000f, -8.046929e-002f, 1.043413e-001f, 0.000000e+000f, -3.340893e-001f,
  4.338495e-002f, -1.172849e-001f, 7.913435e-002f, 2.963660e-001f, -7.776324e-001f, 0.000000e+000f, -8.299649e-002f, 1.076182e-001f, 0.000000e+000f, -3.340893e-001f,
  3.895483e-002f, -1.209181e-001f, 9.129380e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -9.133736e-002f, 1.184335e-001f, 0.000000e+000f, -3.340893e-001f,
  3.895483e-002f, -1.209181e-001f, 9.129380e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -5.412584e-002f, 7.018279e-002f, 0.000000e+000f, -3.340893e-001f,
  3.895483e-002f, -1.209181e-001f, 9.129380e-002f, 2.659377e-001f, -7.320933e-001f, 0.000000e+000f, -4.871326e-002f, 6.316451e-002f, 0.000000e+000f, -3.340893e-001f,
  -3.791707e-002f, 9.810659e-002f, -5.345439e-002f, 3.104431e-001f, -7.880040e-001f, 0.000000e+000f, -5.947293e-002f, 7.630898e-002f, 0.000000e+000f, -4.103394e-001f,
  -1.513806e-001f, 1.915196e-001f, 0.000000e+000f, 0.000000e+000f, -4.103394e-001f,
  -2.625499e-002f, 1.478568e-001f, -2.242671e-002f, 2.792269e-002f, -2.569916e-001f, -1.651320e-001f, 2.185046e-001f, 0.000000e+000f, 0.000000e+000f, -4.103394e-001f,
  -1.788731e-002f, 1.295132e-001f, -3.866689e-002f, 7.312927e-002f, -3.903887e-001f, -1.038916e-001f, 1.450543e-001f, 0.000000e+000f, 0.000000e+000f, -4.103394e-001f,
  -3.372107e-002f, 1.179399e-001f, -4.781016e-002f, 1.563540e-001f, -5.680897e-001f, -7.098768e-002f, 1.057120e-001f, 0.000000e+000f, 0.000000e+000f, -4.103394e-001f,
  -5.271105e-002f, 1.170696e-001f, -5.252704e-002f, 2.650329e-001f, -7.367322e-001f, -5.177205e-002f, 8.332540e-002f, 0.000000e+000f, 0.000000e+000f, -4.103394e-001f,
  -5.362857e-002f, 1.224825e-001f, -6.290877e-002f, 3.397694e-001f, -8.256018e-001f, -3.980828e-002f, 7.040085e-002f, 0.000000e+000f, 0.000000e+000f, -4.103394e-001f,
  // Total number of coefficients: 3485
  // Maximum number of elevation coefficients: 5


	// Lite coefficients
	// 20 degrees loudspeakers
	// 44100 Hz sample rate
    // Coefficients
  // Generated by HRTFConv V5.90d on Wed Mar 03 18:42:26 1999
  0.000000e+000f, -9.454320e-002f, 1.501812e-001f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -2.763267e-002f, 4.389428e-002f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, -9.041489e-002f, 1.436234e-001f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -5.195248e-002f, 8.252611e-002f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, -7.898960e-002f, 1.254744e-001f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -6.518485e-002f, 1.035456e-001f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, -6.847885e-002f, 1.087781e-001f, 0.000000e+000f, -3.745480e-001f,
  2.397694e-002f, -1.004639e-001f, 9.908484e-002f, 1.815976e-001f, -6.169703e-001f, 0.000000e+000f, -8.723499e-002f, 1.385721e-001f, 0.000000e+000f, -3.745480e-001f,
  1.917499e-002f, -8.864430e-002f, 9.242639e-002f, 1.906100e-001f, -6.290014e-001f, 0.000000e+000f, -7.690333e-002f, 1.221603e-001f, 0.000000e+000f, -3.745480e-001f,
  1.567537e-002f, -7.876224e-002f, 8.555942e-002f, 2.023671e-001f, -6.446964e-001f, 0.000000e+000f, -6.771818e-002f, 1.075698e-001f, 0.000000e+000f, -3.745480e-001f,
  1.532481e-002f, -7.450294e-002f, 7.967813e-002f, 2.212488e-001f, -6.699023e-001f, 0.000000e+000f, -6.175022e-002f, 9.808975e-002f, 0.000000e+000f, -3.745480e-001f,
  1.650666e-002f, -7.269286e-002f, 7.382066e-002f, 2.448469e-001f, -7.014045e-001f, 0.000000e+000f, -5.712492e-002f, 9.074250e-002f, 0.000000e+000f, -3.745480e-001f,
  1.850723e-002f, -7.192736e-002f, 6.755660e-002f, 2.719349e-001f, -7.375654e-001f, 0.000000e+000f, -5.304295e-002f, 8.425832e-002f, 0.000000e+000f, -3.745480e-001f,
  2.144143e-002f, -7.315082e-002f, 6.209619e-002f, 2.997339e-001f, -7.746754e-001f, 0.000000e+000f, -5.043678e-002f, 8.011844e-002f, 0.000000e+000f, -3.745480e-001f,
  2.451598e-002f, -7.468571e-002f, 5.677633e-002f, 3.272530e-001f, -8.114118e-001f, 0.000000e+000f, -4.823933e-002f, 7.662781e-002f, 0.000000e+000f, -3.745480e-001f,
  2.473385e-002f, -7.376319e-002f, 5.476114e-002f, 3.336541e-001f, -8.199570e-001f, 0.000000e+000f, -4.696976e-002f, 7.461110e-002f, 0.000000e+000f, -3.745480e-001f,
  2.447687e-002f, -7.268851e-002f, 5.370248e-002f, 3.354596e-001f, -8.223673e-001f, 0.000000e+000f, -4.611960e-002f, 7.326064e-002f, 0.000000e+000f, -3.745480e-001f,
  2.488895e-002f, -7.292950e-002f, 5.304547e-002f, 3.389393e-001f, -8.270125e-001f, 0.000000e+000f, -4.589348e-002f, 7.290144e-002f, 0.000000e+000f, -3.745480e-001f,
  2.559832e-002f, -7.392244e-002f, 5.283278e-002f, 3.424515e-001f, -8.317010e-001f, 0.000000e+000f, -4.611960e-002f, 7.326064e-002f, 0.000000e+000f, -3.745480e-001f,
  2.638506e-002f, -7.559294e-002f, 5.350117e-002f, 3.439172e-001f, -8.336577e-001f, 0.000000e+000f, -4.696976e-002f, 7.461110e-002f, 0.000000e+000f, -3.745480e-001f,
  2.667682e-002f, -7.710536e-002f, 5.516745e-002f, 3.406233e-001f, -8.292605e-001f, 0.000000e+000f, -4.823933e-002f, 7.662781e-002f, 0.000000e+000f, -3.745480e-001f,
  2.619406e-002f, -7.856776e-002f, 5.870859e-002f, 3.289189e-001f, -8.136358e-001f, 0.000000e+000f, -5.043678e-002f, 8.011844e-002f, 0.000000e+000f, -3.745480e-001f,
  2.540567e-002f, -7.912819e-002f, 6.158820e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -3.415855e-002f, 5.426060e-002f, 0.000000e+000f, -3.745480e-001f,
  2.540567e-002f, -7.912819e-002f, 6.158820e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -3.230499e-002f, 5.131622e-002f, 0.000000e+000f, -3.745480e-001f,
  2.540567e-002f, -7.912819e-002f, 6.158820e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -3.086921e-002f, 4.903550e-002f, 0.000000e+000f, -3.745480e-001f,
  2.540567e-002f, -7.912819e-002f, 6.158820e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -2.955563e-002f, 4.694888e-002f, 0.000000e+000f, -3.745480e-001f,
  2.540567e-002f, -7.912819e-002f, 6.158820e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -2.815772e-002f, 4.472833e-002f, 0.000000e+000f, -3.745480e-001f,
  2.540567e-002f, -7.912819e-002f, 6.158820e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -2.706067e-002f, 4.298567e-002f, 0.000000e+000f, -3.745480e-001f,
  -5.958870e-002f, 1.011873e-001f, -1.564134e-002f, 7.292816e-002f, -5.100009e-001f, 0.000000e+000f, -6.493095e-002f, 7.774860e-002f, 0.000000e+000f, -4.333942e-001f,
  -5.958870e-002f, 1.114366e-001f, -3.128269e-002f, 1.458563e-001f, -5.960009e-001f, 0.000000e+000f, -4.845268e-002f, 6.080982e-002f, 0.000000e+000f, -4.333942e-001f,
  -5.958870e-002f, 1.421843e-001f, -7.820671e-002f, 3.646408e-001f, -8.540009e-001f, 0.000000e+000f, -3.571936e-002f, 4.757937e-002f, 0.000000e+000f, -4.333942e-001f,
  0.000000e+000f, -1.228315e-001f, 1.852583e-001f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -3.590064e-002f, 5.414647e-002f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, -1.174679e-001f, 1.771688e-001f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -6.380437e-002f, 9.623175e-002f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, -1.049598e-001f, 1.583037e-001f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -8.234626e-002f, 1.241972e-001f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, -9.114088e-002f, 1.374615e-001f, 0.000000e+000f, -3.745480e-001f,
  3.369926e-002f, -1.337995e-001f, 1.251428e-001f, 1.782374e-001f, -6.124846e-001f, 0.000000e+000f, -1.185798e-001f, 1.788457e-001f, 0.000000e+000f, -3.745480e-001f,
  2.679432e-002f, -1.177454e-001f, 1.166366e-001f, 1.878350e-001f, -6.252969e-001f, 0.000000e+000f, -1.040238e-001f, 1.568919e-001f, 0.000000e+000f, -3.745480e-001f,
  2.185199e-002f, -1.052865e-001f, 1.090884e-001f, 1.964695e-001f, -6.368235e-001f, 0.000000e+000f, -9.266401e-002f, 1.397588e-001f, 0.000000e+000f, -3.745480e-001f,
  1.975135e-002f, -9.738984e-002f, 1.019568e-001f, 2.106880e-001f, -6.558044e-001f, 0.000000e+000f, -8.385683e-002f, 1.264755e-001f, 0.000000e+000f, -3.745480e-001f,
  2.056877e-002f, -9.375530e-002f, 9.461562e-002f, 2.330148e-001f, -6.856093e-001f, 0.000000e+000f, -7.703018e-002f, 1.161793e-001f, 0.000000e+000f, -3.745480e-001f,
  2.240791e-002f, -9.194002e-002f, 8.769418e-002f, 2.562417e-001f, -7.166159e-001f, 0.000000e+000f, -7.174447e-002f, 1.082073e-001f, 0.000000e+000f, -3.745480e-001f,
  2.512631e-002f, -9.168705e-002f, 8.112892e-002f, 2.805725e-001f, -7.490961e-001f, 0.000000e+000f, -6.767816e-002f, 1.020743e-001f, 0.000000e+000f, -3.745480e-001f,
  2.928040e-002f, -9.350454e-002f, 7.442054e-002f, 3.092248e-001f, -7.873453e-001f, 0.000000e+000f, -6.460086e-002f, 9.743305e-002f, 0.000000e+000f, -3.745480e-001f,
  3.207477e-002f, -9.441348e-002f, 6.943491e-002f, 3.293029e-001f, -8.141484e-001f, 0.000000e+000f, -6.234997e-002f, 9.403819e-002f, 0.000000e+000f, -3.745480e-001f,
  3.203856e-002f, -9.296158e-002f, 6.732749e-002f, 3.338413e-001f, -8.202068e-001f, 0.000000e+000f, -6.081362e-002f, 9.172101e-002f, 0.000000e+000f, -3.745480e-001f,
  3.180058e-002f, -9.188528e-002f, 6.624551e-002f, 3.354596e-001f, -8.223673e-001f, 0.000000e+000f, -5.991904e-002f, 9.037178e-002f, 0.000000e+000f, -3.745480e-001f,
  3.233597e-002f, -9.215541e-002f, 6.543505e-002f, 3.389393e-001f, -8.270125e-001f, 0.000000e+000f, -5.962526e-002f, 8.992869e-002f, 0.000000e+000f, -3.745480e-001f,
  3.325759e-002f, -9.337147e-002f, 6.517269e-002f, 3.424515e-001f, -8.317010e-001f, 0.000000e+000f, -5.991904e-002f, 9.037178e-002f, 0.000000e+000f, -3.745480e-001f,
  3.415953e-002f, -9.513850e-002f, 6.578608e-002f, 3.439941e-001f, -8.337602e-001f, 0.000000e+000f, -6.081362e-002f, 9.172101e-002f, 0.000000e+000f, -3.745480e-001f,
  3.464468e-002f, -9.707908e-002f, 6.760931e-002f, 3.415529e-001f, -8.305014e-001f, 0.000000e+000f, -6.234997e-002f, 9.403819e-002f, 0.000000e+000f, -3.745480e-001f,
  3.435280e-002f, -9.884597e-002f, 7.093816e-002f, 3.332582e-001f, -8.194285e-001f, 0.000000e+000f, -6.460086e-002f, 9.743305e-002f, 0.000000e+000f, -3.745480e-001f,
  3.300730e-002f, -1.001549e-001f, 7.597306e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -6.767816e-002f, 1.020743e-001f, 0.000000e+000f, -3.745480e-001f,
  3.300730e-002f, -1.001549e-001f, 7.597306e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -4.297026e-002f, 6.480910e-002f, 0.000000e+000f, -3.745480e-001f,
  3.300730e-002f, -1.001549e-001f, 7.597306e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -4.101707e-002f, 6.186323e-002f, 0.000000e+000f, -3.745480e-001f,
  3.300730e-002f, -1.001549e-001f, 7.597306e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -3.923372e-002f, 5.917352e-002f, 0.000000e+000f, -3.745480e-001f,
  3.300730e-002f, -1.001549e-001f, 7.597306e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -3.759898e-002f, 5.670796e-002f, 0.000000e+000f, -3.745480e-001f,
  3.300730e-002f, -1.001549e-001f, 7.597306e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -3.609502e-002f, 5.443964e-002f, 0.000000e+000f, -3.745480e-001f,
  3.300730e-002f, -1.001549e-001f, 7.597306e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -3.470675e-002f, 5.234581e-002f, 0.000000e+000f, -3.745480e-001f,
  -6.685962e-002f, 1.135340e-001f, -1.754988e-002f, 7.292816e-002f, -5.100009e-001f, 0.000000e+000f, -6.453014e-002f, 7.726867e-002f, 0.000000e+000f, -4.333942e-001f,
  -6.685962e-002f, 1.250339e-001f, -3.509975e-002f, 1.458563e-001f, -5.960009e-001f, 0.000000e+000f, -4.816427e-002f, 6.044786e-002f, 0.000000e+000f, -4.333942e-001f,
  -6.685962e-002f, 1.595334e-001f, -8.774938e-002f, 3.646408e-001f, -8.540009e-001f, 0.000000e+000f, -3.571936e-002f, 4.757937e-002f, 0.000000e+000f, -4.333942e-001f,
  0.000000e+000f, -1.589090e-001f, 2.289530e-001f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -3.924017e-002f, 5.653649e-002f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, -1.539879e-001f, 2.218628e-001f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -7.193924e-002f, 1.036487e-001f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, -1.416926e-001f, 2.041480e-001f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -9.589080e-002f, 1.381576e-001f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, -1.267163e-001f, 1.825704e-001f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -1.123656e-001f, 1.618942e-001f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, -1.123656e-001f, 1.618942e-001f, 0.000000e+000f, -3.745480e-001f,
  4.190307e-002f, -1.664612e-001f, 1.528497e-001f, 1.799291e-001f, -6.147430e-001f, 0.000000e+000f, -1.499515e-001f, 2.160473e-001f, 0.000000e+000f, -3.745480e-001f,
  3.466423e-002f, -1.499909e-001f, 1.441463e-001f, 1.878350e-001f, -6.252969e-001f, 0.000000e+000f, -1.345772e-001f, 1.938962e-001f, 0.000000e+000f, -3.745480e-001f,
  2.912698e-002f, -1.365677e-001f, 1.363009e-001f, 1.948696e-001f, -6.346877e-001f, 0.000000e+000f, -1.220786e-001f, 1.758886e-001f, 0.000000e+000f, -3.745480e-001f,
  2.595132e-002f, -1.269062e-001f, 1.289730e-001f, 2.048375e-001f, -6.479943e-001f, 0.000000e+000f, -1.119671e-001f, 1.613201e-001f, 0.000000e+000f, -3.745480e-001f,
  2.575806e-002f, -1.214204e-001f, 1.214703e-001f, 2.212488e-001f, -6.699023e-001f, 0.000000e+000f, -1.037903e-001f, 1.495390e-001f, 0.000000e+000f, -3.745480e-001f,
  2.735663e-002f, -1.185227e-001f, 1.139771e-001f, 2.409651e-001f, -6.962225e-001f, 0.000000e+000f, -9.717760e-002f, 1.400116e-001f, 0.000000e+000f, -3.745480e-001f,
  2.945468e-002f, -1.167196e-001f, 1.070239e-001f, 2.600505e-001f, -7.217004e-001f, 0.000000e+000f, -9.183994e-002f, 1.323212e-001f, 0.000000e+000f, -3.745480e-001f,
  3.250630e-002f, -1.164244e-001f, 1.002639e-001f, 2.805725e-001f, -7.490961e-001f, 0.000000e+000f, -8.755629e-002f, 1.261494e-001f, 0.000000e+000f, -3.745480e-001f,
  3.697189e-002f, -1.180243e-001f, 9.329908e-002f, 3.045532e-001f, -7.811089e-001f, 0.000000e+000f, -8.415965e-002f, 1.212556e-001f, 0.000000e+000f, -3.745480e-001f,
  4.078409e-002f, -1.194369e-001f, 8.742080e-002f, 3.246539e-001f, -8.079422e-001f, 0.000000e+000f, -8.152510e-002f, 1.174598e-001f, 0.000000e+000f, -3.745480e-001f,
  4.173989e-002f, -1.185690e-001f, 8.418625e-002f, 3.328137e-001f, -8.188351e-001f, 0.000000e+000f, -7.956071e-002f, 1.146296e-001f, 0.000000e+000f, -3.745480e-001f,
  4.121805e-002f, -1.168084e-001f, 8.273277e-002f, 3.341172e-001f, -8.205751e-001f, 0.000000e+000f, -7.820090e-002f, 1.126704e-001f, 0.000000e+000f, -3.745480e-001f,
  4.119929e-002f, -1.160452e-001f, 8.167217e-002f, 3.359544e-001f, -8.230277e-001f, 0.000000e+000f, -7.740177e-002f, 1.115190e-001f, 0.000000e+000f, -3.745480e-001f,
  4.183354e-002f, -1.164012e-001f, 8.086847e-002f, 3.389393e-001f, -8.270125e-001f, 0.000000e+000f, -7.713813e-002f, 1.111391e-001f, 0.000000e+000f, -3.745480e-001f,
  4.281476e-002f, -1.175830e-001f, 8.053437e-002f, 3.419482e-001f, -8.310291e-001f, 0.000000e+000f, -7.740177e-002f, 1.115190e-001f, 0.000000e+000f, -3.745480e-001f,
  4.383881e-002f, -1.193147e-001f, 8.090350e-002f, 3.438241e-001f, -8.335333e-001f, 0.000000e+000f, -7.820090e-002f, 1.126704e-001f, 0.000000e+000f, -3.745480e-001f,
  4.460481e-002f, -1.213301e-001f, 8.221728e-002f, 3.433942e-001f, -8.329594e-001f, 0.000000e+000f, -7.956071e-002f, 1.146296e-001f, 0.000000e+000f, -3.745480e-001f,
  4.482675e-002f, -1.233764e-001f, 8.470475e-002f, 3.395223e-001f, -8.277907e-001f, 0.000000e+000f, -8.152510e-002f, 1.174598e-001f, 0.000000e+000f, -3.745480e-001f,
  4.425473e-002f, -1.252252e-001f, 8.855589e-002f, 3.311941e-001f, -8.166730e-001f, 0.000000e+000f, -8.415965e-002f, 1.212556e-001f, 0.000000e+000f, -3.745480e-001f,
  4.270206e-002f, -1.266917e-001f, 9.389195e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -8.755629e-002f, 1.261494e-001f, 0.000000e+000f, -3.745480e-001f,
  4.270206e-002f, -1.266917e-001f, 9.389195e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -5.603603e-002f, 8.073564e-002f, 0.000000e+000f, -3.745480e-001f,
  4.270206e-002f, -1.266917e-001f, 9.389195e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -5.388080e-002f, 7.763042e-002f, 0.000000e+000f, -3.745480e-001f,
  4.270206e-002f, -1.266917e-001f, 9.389195e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -5.188521e-002f, 7.475522e-002f, 0.000000e+000f, -3.745480e-001f,
  4.270206e-002f, -1.266917e-001f, 9.389195e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -5.003217e-002f, 7.208539e-002f, 0.000000e+000f, -3.745480e-001f,
  4.270206e-002f, -1.266917e-001f, 9.389195e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -4.830692e-002f, 6.959969e-002f, 0.000000e+000f, -3.745480e-001f,
  4.270206e-002f, -1.266917e-001f, 9.389195e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -4.669669e-002f, 6.727970e-002f, 0.000000e+000f, -3.745480e-001f,
  4.270206e-002f, -1.266917e-001f, 9.389195e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -4.519035e-002f, 6.510938e-002f, 0.000000e+000f, -3.745480e-001f,
  -7.501773e-002f, 1.273873e-001f, -1.969128e-002f, 7.292816e-002f, -5.100009e-001f, 0.000000e+000f, -6.533677e-002f, 7.823453e-002f, 0.000000e+000f, -4.333942e-001f,
  -7.501773e-002f, 1.402903e-001f, -3.938257e-002f, 1.458563e-001f, -5.960009e-001f, 0.000000e+000f, -4.903998e-002f, 6.154691e-002f, 0.000000e+000f, -4.333942e-001f,
  -7.501773e-002f, 1.531934e-001f, -5.907385e-002f, 2.187845e-001f, -6.820009e-001f, 0.000000e+000f, -3.655981e-002f, 4.869888e-002f, 0.000000e+000f, -4.333942e-001f,
  -7.501773e-002f, 1.789995e-001f, -9.845642e-002f, 3.646408e-001f, -8.540009e-001f, 0.000000e+000f, -2.699810e-002f, 3.879034e-002f, 0.000000e+000f, -4.333942e-001f,
  0.000000e+000f, -2.048493e-001f, 2.834400e-001f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -5.058444e-002f, 6.999123e-002f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, -1.985055e-001f, 2.746624e-001f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -9.273676e-002f, 1.283153e-001f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, -1.826558e-001f, 2.527319e-001f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -1.236127e-001f, 1.710368e-001f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, -1.633497e-001f, 2.260191e-001f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -1.448503e-001f, 2.004223e-001f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, -1.448503e-001f, 2.004223e-001f, 0.000000e+000f, -3.745480e-001f,
  5.401719e-002f, -2.114989e-001f, 1.892254e-001f, 1.799291e-001f, -6.147430e-001f, 0.000000e+000f, -1.933023e-001f, 2.674629e-001f, 0.000000e+000f, -3.745480e-001f,
  4.468560e-002f, -1.908002e-001f, 1.784507e-001f, 1.878350e-001f, -6.252969e-001f, 0.000000e+000f, -1.734832e-001f, 2.400403e-001f, 0.000000e+000f, -3.745480e-001f,
  3.754755e-002f, -1.739041e-001f, 1.687382e-001f, 1.948696e-001f, -6.346877e-001f, 0.000000e+000f, -1.573714e-001f, 2.177471e-001f, 0.000000e+000f, -3.745480e-001f,
  3.345381e-002f, -1.616834e-001f, 1.596665e-001f, 2.048375e-001f, -6.479943e-001f, 0.000000e+000f, -1.443366e-001f, 1.997115e-001f, 0.000000e+000f, -3.745480e-001f,
  3.320468e-002f, -1.546258e-001f, 1.503782e-001f, 2.212488e-001f, -6.699023e-001f, 0.000000e+000f, -1.337959e-001f, 1.851268e-001f, 0.000000e+000f, -3.745480e-001f,
  3.526538e-002f, -1.507728e-001f, 1.411017e-001f, 2.409651e-001f, -6.962225e-001f, 0.000000e+000f, -1.252715e-001f, 1.733320e-001f, 0.000000e+000f, -3.745480e-001f,
  3.796998e-002f, -1.482939e-001f, 1.324938e-001f, 2.600505e-001f, -7.217004e-001f, 0.000000e+000f, -1.183907e-001f, 1.638115e-001f, 0.000000e+000f, -3.745480e-001f,
  4.190382e-002f, -1.476886e-001f, 1.241250e-001f, 2.805725e-001f, -7.490961e-001f, 0.000000e+000f, -1.128687e-001f, 1.561709e-001f, 0.000000e+000f, -3.745480e-001f,
  4.766040e-002f, -1.494221e-001f, 1.155027e-001f, 3.045532e-001f, -7.811089e-001f, 0.000000e+000f, -1.084901e-001f, 1.501124e-001f, 0.000000e+000f, -3.745480e-001f,
  5.257471e-002f, -1.509624e-001f, 1.082255e-001f, 3.246539e-001f, -8.079422e-001f, 0.000000e+000f, -1.050939e-001f, 1.454133e-001f, 0.000000e+000f, -3.745480e-001f,
  5.380682e-002f, -1.497732e-001f, 1.042212e-001f, 3.328137e-001f, -8.188351e-001f, 0.000000e+000f, -1.025616e-001f, 1.419095e-001f, 0.000000e+000f, -3.745480e-001f,
  5.313412e-002f, -1.475419e-001f, 1.024218e-001f, 3.341172e-001f, -8.205751e-001f, 0.000000e+000f, -1.008086e-001f, 1.394840e-001f, 0.000000e+000f, -3.745480e-001f,
  5.310994e-002f, -1.465595e-001f, 1.011088e-001f, 3.359544e-001f, -8.230277e-001f, 0.000000e+000f, -9.977849e-002f, 1.380586e-001f, 0.000000e+000f, -3.745480e-001f,
  5.392755e-002f, -1.469717e-001f, 1.001138e-001f, 3.389393e-001f, -8.270125e-001f, 0.000000e+000f, -9.943864e-002f, 1.375884e-001f, 0.000000e+000f, -3.745480e-001f,
  5.519244e-002f, -1.484230e-001f, 9.970021e-002f, 3.419482e-001f, -8.310291e-001f, 0.000000e+000f, -9.977849e-002f, 1.380586e-001f, 0.000000e+000f, -3.745480e-001f,
  5.651255e-002f, -1.505798e-001f, 1.001572e-001f, 3.438241e-001f, -8.335333e-001f, 0.000000e+000f, -1.008086e-001f, 1.394840e-001f, 0.000000e+000f, -3.745480e-001f,
  5.749999e-002f, -1.531215e-001f, 1.017836e-001f, 3.433942e-001f, -8.329594e-001f, 0.000000e+000f, -1.025616e-001f, 1.419095e-001f, 0.000000e+000f, -3.745480e-001f,
  5.778609e-002f, -1.557430e-001f, 1.048631e-001f, 3.395223e-001f, -8.277907e-001f, 0.000000e+000f, -1.050939e-001f, 1.454133e-001f, 0.000000e+000f, -3.745480e-001f,
  5.704870e-002f, -1.581684e-001f, 1.096307e-001f, 3.311941e-001f, -8.166730e-001f, 0.000000e+000f, -1.084901e-001f, 1.501124e-001f, 0.000000e+000f, -3.745480e-001f,
  5.504715e-002f, -1.601733e-001f, 1.162367e-001f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -1.128687e-001f, 1.561709e-001f, 0.000000e+000f, -3.745480e-001f,
  5.504715e-002f, -1.601733e-001f, 1.162367e-001f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -7.223595e-002f, 9.994937e-002f, 0.000000e+000f, -3.745480e-001f,
  5.504715e-002f, -1.601733e-001f, 1.162367e-001f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -6.945765e-002f, 9.610516e-002f, 0.000000e+000f, -3.745480e-001f,
  5.504715e-002f, -1.601733e-001f, 1.162367e-001f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -6.688514e-002f, 9.254571e-002f, 0.000000e+000f, -3.745480e-001f,
  5.504715e-002f, -1.601733e-001f, 1.162367e-001f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -6.449639e-002f, 8.924051e-002f, 0.000000e+000f, -3.745480e-001f,
  5.504715e-002f, -1.601733e-001f, 1.162367e-001f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -6.227237e-002f, 8.616325e-002f, 0.000000e+000f, -3.745480e-001f,
  5.504715e-002f, -1.601733e-001f, 1.162367e-001f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -6.019663e-002f, 8.329114e-002f, 0.000000e+000f, -3.745480e-001f,
  5.504715e-002f, -1.601733e-001f, 1.162367e-001f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -5.825480e-002f, 8.060433e-002f, 0.000000e+000f, -3.745480e-001f,
  -8.417128e-002f, 1.429309e-001f, -2.209398e-002f, 7.292816e-002f, -5.100009e-001f, 0.000000e+000f, -6.533677e-002f, 7.823453e-002f, 0.000000e+000f, -4.333942e-001f,
  -8.417128e-002f, 1.574083e-001f, -4.418797e-002f, 1.458563e-001f, -5.960009e-001f, 0.000000e+000f, -4.903998e-002f, 6.154691e-002f, 0.000000e+000f, -4.333942e-001f,
  -8.417128e-002f, 1.718858e-001f, -6.628195e-002f, 2.187845e-001f, -6.820009e-001f, 0.000000e+000f, -3.655981e-002f, 4.869888e-002f, 0.000000e+000f, -4.333942e-001f,
  -8.417128e-002f, 2.008407e-001f, -1.104699e-001f, 3.646408e-001f, -8.540009e-001f, 0.000000e+000f, -2.699810e-002f, 3.879034e-002f, 0.000000e+000f, -4.333942e-001f,
  0.000000e+000f, 0.000000e+000f, 3.514500e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 0.000000e+000f, 8.678527e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 3.405663e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 0.000000e+000f, 1.591040e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 3.133736e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 0.000000e+000f, 2.120763e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 2.802512e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 0.000000e+000f, 2.485127e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 2.485127e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -9.267467e-002f, 2.346291e-001f, 0.000000e+000f, -2.401950e-001f, 0.000000e+000f, 0.000000e+000f, 3.316393e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -7.666492e-002f, 2.212691e-001f, 0.000000e+000f, -2.507489e-001f, 0.000000e+000f, 0.000000e+000f, 2.976368e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -6.441851e-002f, 2.092261e-001f, 0.000000e+000f, -2.601397e-001f, 0.000000e+000f, 0.000000e+000f, 2.699944e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -5.739508e-002f, 1.979776e-001f, 0.000000e+000f, -2.734463e-001f, 0.000000e+000f, 0.000000e+000f, 2.476313e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -5.696766e-002f, 1.864607e-001f, 0.000000e+000f, -2.953543e-001f, 0.000000e+000f, 0.000000e+000f, 2.295471e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -6.050310e-002f, 1.749584e-001f, 0.000000e+000f, -3.216745e-001f, 0.000000e+000f, 0.000000e+000f, 2.149222e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -6.514326e-002f, 1.642851e-001f, 0.000000e+000f, -3.471524e-001f, 0.000000e+000f, 0.000000e+000f, 2.031172e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -7.189235e-002f, 1.539082e-001f, 0.000000e+000f, -3.745481e-001f, 0.000000e+000f, 0.000000e+000f, 1.936433e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -8.176864e-002f, 1.432170e-001f, 0.000000e+000f, -4.065609e-001f, 0.000000e+000f, 0.000000e+000f, 1.861312e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -9.019988e-002f, 1.341937e-001f, 0.000000e+000f, -4.333942e-001f, 0.000000e+000f, 0.000000e+000f, 1.803045e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -9.231375e-002f, 1.292285e-001f, 0.000000e+000f, -4.442871e-001f, 0.000000e+000f, 0.000000e+000f, 1.759599e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -9.115963e-002f, 1.269974e-001f, 0.000000e+000f, -4.460271e-001f, 0.000000e+000f, 0.000000e+000f, 1.729525e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -9.111815e-002f, 1.253693e-001f, 0.000000e+000f, -4.484797e-001f, 0.000000e+000f, 0.000000e+000f, 1.711851e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -9.252089e-002f, 1.241356e-001f, 0.000000e+000f, -4.524645e-001f, 0.000000e+000f, 0.000000e+000f, 1.706020e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -9.469099e-002f, 1.236228e-001f, 0.000000e+000f, -4.564811e-001f, 0.000000e+000f, 0.000000e+000f, 1.711851e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -9.695583e-002f, 1.241894e-001f, 0.000000e+000f, -4.589853e-001f, 0.000000e+000f, 0.000000e+000f, 1.729525e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -9.864994e-002f, 1.262061e-001f, 0.000000e+000f, -4.584114e-001f, 0.000000e+000f, 0.000000e+000f, 1.759599e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -9.914079e-002f, 1.300244e-001f, 0.000000e+000f, -4.532427e-001f, 0.000000e+000f, 0.000000e+000f, 1.803045e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -9.787569e-002f, 1.359361e-001f, 0.000000e+000f, -4.421250e-001f, 0.000000e+000f, 0.000000e+000f, 1.861312e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -9.444173e-002f, 1.441271e-001f, 0.000000e+000f, -4.240009e-001f, 0.000000e+000f, 0.000000e+000f, 1.936433e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -9.444173e-002f, 1.441271e-001f, 0.000000e+000f, -4.240009e-001f, 0.000000e+000f, 0.000000e+000f, 1.239317e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -9.444173e-002f, 1.441271e-001f, 0.000000e+000f, -4.240009e-001f, 0.000000e+000f, 0.000000e+000f, 1.191651e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -9.444173e-002f, 1.441271e-001f, 0.000000e+000f, -4.240009e-001f, 0.000000e+000f, 0.000000e+000f, 1.147516e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -9.444173e-002f, 1.441271e-001f, 0.000000e+000f, -4.240009e-001f, 0.000000e+000f, 0.000000e+000f, 1.106533e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -9.444173e-002f, 1.441271e-001f, 0.000000e+000f, -4.240009e-001f, 0.000000e+000f, 0.000000e+000f, 1.068377e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -9.444173e-002f, 1.441271e-001f, 0.000000e+000f, -4.240009e-001f, 0.000000e+000f, 0.000000e+000f, 1.032764e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -9.444173e-002f, 1.441271e-001f, 0.000000e+000f, -4.240009e-001f, 0.000000e+000f, 0.000000e+000f, 9.994494e-002f, 0.000000e+000f, 0.000000e+000f,
  -9.444173e-002f, 1.603711e-001f, -2.478986e-002f, 7.292816e-002f, -5.100009e-001f, -6.959033e-002f, 8.248810e-002f, 0.000000e+000f, 0.000000e+000f, -4.333942e-001f,
  -9.444173e-002f, 1.766150e-001f, -4.957972e-002f, 1.458563e-001f, -5.960009e-001f, -5.578681e-002f, 6.829373e-002f, 0.000000e+000f, 0.000000e+000f, -4.333942e-001f,
  -9.444173e-002f, 1.928590e-001f, -7.436957e-002f, 2.187845e-001f, -6.820009e-001f, -4.459554e-002f, 5.673461e-002f, 0.000000e+000f, 0.000000e+000f, -4.333942e-001f,
  -9.444173e-002f, 2.253470e-001f, -1.239493e-001f, 3.646408e-001f, -8.540009e-001f, -3.551525e-002f, 4.730749e-002f, 0.000000e+000f, 0.000000e+000f, -4.333942e-001f,
  0.000000e+000f, -2.389128e-001f, 3.089568e-001f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -5.899590e-002f, 7.629222e-002f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, -2.315141e-001f, 2.993891e-001f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -1.081575e-001f, 1.398670e-001f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, -2.130288e-001f, 2.754842e-001f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -1.441677e-001f, 1.864345e-001f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, -1.905125e-001f, 2.463666e-001f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -1.689368e-001f, 2.184655e-001f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, -1.689368e-001f, 2.184655e-001f, 0.000000e+000f, -3.745480e-001f,
  6.299947e-002f, -2.409684e-001f, 2.062605e-001f, 1.799291e-001f, -6.147430e-001f, 0.000000e+000f, -2.254457e-001f, 2.915414e-001f, 0.000000e+000f, -3.745480e-001f,
  5.211617e-002f, -2.178124e-001f, 1.945158e-001f, 1.878350e-001f, -6.252969e-001f, 0.000000e+000f, -2.023310e-001f, 2.616501e-001f, 0.000000e+000f, -3.745480e-001f,
  4.379117e-002f, -1.988600e-001f, 1.839290e-001f, 1.948696e-001f, -6.346877e-001f, 0.000000e+000f, -1.835400e-001f, 2.373499e-001f, 0.000000e+000f, -3.745480e-001f,
  3.901670e-002f, -1.850391e-001f, 1.740405e-001f, 2.048375e-001f, -6.479943e-001f, 0.000000e+000f, -1.683377e-001f, 2.176907e-001f, 0.000000e+000f, -3.745480e-001f,
  3.872614e-002f, -1.768342e-001f, 1.639160e-001f, 2.212488e-001f, -6.699023e-001f, 0.000000e+000f, -1.560442e-001f, 2.017929e-001f, 0.000000e+000f, -3.745480e-001f,
  4.112951e-002f, -1.721230e-001f, 1.538045e-001f, 2.409651e-001f, -6.962225e-001f, 0.000000e+000f, -1.461023e-001f, 1.889363e-001f, 0.000000e+000f, -3.745480e-001f,
  4.428384e-002f, -1.689465e-001f, 1.444217e-001f, 2.600505e-001f, -7.217004e-001f, 0.000000e+000f, -1.380774e-001f, 1.785587e-001f, 0.000000e+000f, -3.745480e-001f,
  4.887182e-002f, -1.678255e-001f, 1.352994e-001f, 2.805725e-001f, -7.490961e-001f, 0.000000e+000f, -1.316371e-001f, 1.702302e-001f, 0.000000e+000f, -3.745480e-001f,
  5.558564e-002f, -1.692399e-001f, 1.259009e-001f, 3.045532e-001f, -7.811089e-001f, 0.000000e+000f, -1.265304e-001f, 1.636264e-001f, 0.000000e+000f, -3.745480e-001f,
  6.131712e-002f, -1.705177e-001f, 1.179685e-001f, 3.246539e-001f, -8.079422e-001f, 0.000000e+000f, -1.225695e-001f, 1.585042e-001f, 0.000000e+000f, -3.745480e-001f,
  6.275412e-002f, -1.690007e-001f, 1.136037e-001f, 3.328137e-001f, -8.188351e-001f, 0.000000e+000f, -1.196161e-001f, 1.546849e-001f, 0.000000e+000f, -3.745480e-001f,
  6.196956e-002f, -1.664695e-001f, 1.116424e-001f, 3.341172e-001f, -8.205751e-001f, 0.000000e+000f, -1.175717e-001f, 1.520411e-001f, 0.000000e+000f, -3.745480e-001f,
  6.194136e-002f, -1.653262e-001f, 1.102111e-001f, 3.359544e-001f, -8.230277e-001f, 0.000000e+000f, -1.163702e-001f, 1.504874e-001f, 0.000000e+000f, -3.745480e-001f,
  6.289493e-002f, -1.657207e-001f, 1.091266e-001f, 3.389393e-001f, -8.270125e-001f, 0.000000e+000f, -1.159738e-001f, 1.499749e-001f, 0.000000e+000f, -3.745480e-001f,
  6.437015e-002f, -1.672798e-001f, 1.086758e-001f, 3.419482e-001f, -8.310291e-001f, 0.000000e+000f, -1.163702e-001f, 1.504874e-001f, 0.000000e+000f, -3.745480e-001f,
  6.590977e-002f, -1.696560e-001f, 1.091739e-001f, 3.438241e-001f, -8.335333e-001f, 0.000000e+000f, -1.175717e-001f, 1.520411e-001f, 0.000000e+000f, -3.745480e-001f,
  6.706141e-002f, -1.725162e-001f, 1.109467e-001f, 3.433942e-001f, -8.329594e-001f, 0.000000e+000f, -1.196161e-001f, 1.546849e-001f, 0.000000e+000f, -3.745480e-001f,
  6.739508e-002f, -1.755434e-001f, 1.143034e-001f, 3.395223e-001f, -8.277907e-001f, 0.000000e+000f, -1.225695e-001f, 1.585042e-001f, 0.000000e+000f, -3.745480e-001f,
  6.653508e-002f, -1.784499e-001f, 1.195003e-001f, 3.311941e-001f, -8.166730e-001f, 0.000000e+000f, -1.265304e-001f, 1.636264e-001f, 0.000000e+000f, -3.745480e-001f,
  6.420070e-002f, -1.809993e-001f, 1.267009e-001f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -1.316371e-001f, 1.702302e-001f, 0.000000e+000f, -3.745480e-001f,
  6.420070e-002f, -1.809993e-001f, 1.267009e-001f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -8.424775e-002f, 1.089474e-001f, 0.000000e+000f, -3.745480e-001f,
  6.420070e-002f, -1.809993e-001f, 1.267009e-001f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -8.100745e-002f, 1.047571e-001f, 0.000000e+000f, -3.745480e-001f,
  6.420070e-002f, -1.809993e-001f, 1.267009e-001f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -7.800718e-002f, 1.008772e-001f, 0.000000e+000f, -3.745480e-001f,
  6.420070e-002f, -1.809993e-001f, 1.267009e-001f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -7.522121e-002f, 9.727443e-002f, 0.000000e+000f, -3.745480e-001f,
  6.420070e-002f, -1.809993e-001f, 1.267009e-001f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -7.262737e-002f, 9.392014e-002f, 0.000000e+000f, -3.745480e-001f,
  6.420070e-002f, -1.809993e-001f, 1.267009e-001f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -7.020646e-002f, 9.078947e-002f, 0.000000e+000f, -3.745480e-001f,
  6.420070e-002f, -1.809993e-001f, 1.267009e-001f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -6.794174e-002f, 8.786077e-002f, 0.000000e+000f, -3.745480e-001f,
  -5.950909e-002f, 1.010521e-001f, -1.562045e-002f, 7.292816e-002f, -5.100009e-001f, 0.000000e+000f, -6.533677e-002f, 7.823453e-002f, 0.000000e+000f, -4.333942e-001f,
  -5.950909e-002f, 1.112877e-001f, -3.124089e-002f, 1.458563e-001f, -5.960009e-001f, 0.000000e+000f, -4.903998e-002f, 6.154691e-002f, 0.000000e+000f, -4.333942e-001f,
  -5.950909e-002f, 1.215232e-001f, -4.686134e-002f, 2.187845e-001f, -6.820009e-001f, 0.000000e+000f, -3.655981e-002f, 4.869888e-002f, 0.000000e+000f, -4.333942e-001f,
  -5.950909e-002f, 1.419944e-001f, -7.810223e-002f, 3.646408e-001f, -8.540009e-001f, 0.000000e+000f, -2.699810e-002f, 3.879034e-002f, 0.000000e+000f, -4.333942e-001f,
  0.000000e+000f, -2.163257e-001f, 2.719636e-001f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -5.341836e-002f, 6.715731e-002f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, -2.096265e-001f, 2.635415e-001f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -9.793220e-002f, 1.231199e-001f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, -1.928888e-001f, 2.424989e-001f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -1.305379e-001f, 1.641116e-001f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, -1.725012e-001f, 2.168677e-001f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -1.529653e-001f, 1.923073e-001f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, -1.529653e-001f, 1.923073e-001f, 0.000000e+000f, -3.745480e-001f,
  5.704342e-002f, -2.161344e-001f, 1.815637e-001f, 1.799291e-001f, -6.147430e-001f, 0.000000e+000f, -2.041318e-001f, 2.566335e-001f, 0.000000e+000f, -3.745480e-001f,
  4.718905e-002f, -1.955221e-001f, 1.712253e-001f, 1.878350e-001f, -6.252969e-001f, 0.000000e+000f, -1.832024e-001f, 2.303212e-001f, 0.000000e+000f, -3.745480e-001f,
  3.965109e-002f, -1.786327e-001f, 1.619061e-001f, 1.948696e-001f, -6.346877e-001f, 0.000000e+000f, -1.661879e-001f, 2.089306e-001f, 0.000000e+000f, -3.745480e-001f,
  3.532801e-002f, -1.662741e-001f, 1.532016e-001f, 2.048375e-001f, -6.479943e-001f, 0.000000e+000f, -1.524229e-001f, 1.916253e-001f, 0.000000e+000f, -3.745480e-001f,
  3.506492e-002f, -1.588543e-001f, 1.442894e-001f, 2.212488e-001f, -6.699023e-001f, 0.000000e+000f, -1.412916e-001f, 1.776311e-001f, 0.000000e+000f, -3.745480e-001f,
  3.724107e-002f, -1.545102e-001f, 1.353886e-001f, 2.409651e-001f, -6.962225e-001f, 0.000000e+000f, -1.322896e-001f, 1.663139e-001f, 0.000000e+000f, -3.745480e-001f,
  4.009719e-002f, -1.515313e-001f, 1.271292e-001f, 2.600505e-001f, -7.217004e-001f, 0.000000e+000f, -1.250234e-001f, 1.571788e-001f, 0.000000e+000f, -3.745480e-001f,
  4.425142e-002f, -1.503667e-001f, 1.190992e-001f, 2.805725e-001f, -7.490961e-001f, 0.000000e+000f, -1.191920e-001f, 1.498476e-001f, 0.000000e+000f, -3.745480e-001f,
  5.033051e-002f, -1.514287e-001f, 1.108260e-001f, 3.045532e-001f, -7.811089e-001f, 0.000000e+000f, -1.145681e-001f, 1.440344e-001f, 0.000000e+000f, -3.745480e-001f,
  5.552013e-002f, -1.523990e-001f, 1.038435e-001f, 3.246539e-001f, -8.079422e-001f, 0.000000e+000f, -1.109816e-001f, 1.395256e-001f, 0.000000e+000f, -3.745480e-001f,
  5.682127e-002f, -1.509786e-001f, 1.000013e-001f, 3.328137e-001f, -8.188351e-001f, 0.000000e+000f, -1.083074e-001f, 1.361636e-001f, 0.000000e+000f, -3.745480e-001f,
  5.611088e-002f, -1.487122e-001f, 9.827477e-002f, 3.341172e-001f, -8.205751e-001f, 0.000000e+000f, -1.064563e-001f, 1.338364e-001f, 0.000000e+000f, -3.745480e-001f,
  5.608535e-002f, -1.476780e-001f, 9.701493e-002f, 3.359544e-001f, -8.230277e-001f, 0.000000e+000f, -1.053684e-001f, 1.324687e-001f, 0.000000e+000f, -3.745480e-001f,
  5.694876e-002f, -1.480041e-001f, 9.606025e-002f, 3.389393e-001f, -8.270125e-001f, 0.000000e+000f, -1.050095e-001f, 1.320175e-001f, 0.000000e+000f, -3.745480e-001f,
  5.828451e-002f, -1.493677e-001f, 9.566339e-002f, 3.419482e-001f, -8.310291e-001f, 0.000000e+000f, -1.053684e-001f, 1.324687e-001f, 0.000000e+000f, -3.745480e-001f,
  5.967858e-002f, -1.514691e-001f, 9.610186e-002f, 3.438241e-001f, -8.335333e-001f, 0.000000e+000f, -1.064563e-001f, 1.338364e-001f, 0.000000e+000f, -3.745480e-001f,
  6.072134e-002f, -1.540214e-001f, 9.766244e-002f, 3.433942e-001f, -8.329594e-001f, 0.000000e+000f, -1.083074e-001f, 1.361636e-001f, 0.000000e+000f, -3.745480e-001f,
  6.102347e-002f, -1.567515e-001f, 1.006172e-001f, 3.395223e-001f, -8.277907e-001f, 0.000000e+000f, -1.109816e-001f, 1.395256e-001f, 0.000000e+000f, -3.745480e-001f,
  6.024477e-002f, -1.594113e-001f, 1.051918e-001f, 3.311941e-001f, -8.166730e-001f, 0.000000e+000f, -1.145681e-001f, 1.440344e-001f, 0.000000e+000f, -3.745480e-001f,
  5.813108e-002f, -1.617957e-001f, 1.115303e-001f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -1.191920e-001f, 1.498476e-001f, 0.000000e+000f, -3.745480e-001f,
  5.813108e-002f, -1.617957e-001f, 1.115303e-001f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -7.628286e-002f, 9.590246e-002f, 0.000000e+000f, -3.745480e-001f,
  5.813108e-002f, -1.617957e-001f, 1.115303e-001f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -7.334891e-002f, 9.221390e-002f, 0.000000e+000f, -3.745480e-001f,
  5.813108e-002f, -1.617957e-001f, 1.115303e-001f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -7.063228e-002f, 8.879857e-002f, 0.000000e+000f, -3.745480e-001f,
  5.813108e-002f, -1.617957e-001f, 1.115303e-001f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -6.810970e-002f, 8.562720e-002f, 0.000000e+000f, -3.745480e-001f,
  5.813108e-002f, -1.617957e-001f, 1.115303e-001f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -6.576109e-002f, 8.267453e-002f, 0.000000e+000f, -3.745480e-001f,
  5.813108e-002f, -1.617957e-001f, 1.115303e-001f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -6.356905e-002f, 7.991872e-002f, 0.000000e+000f, -3.745480e-001f,
  5.813108e-002f, -1.617957e-001f, 1.115303e-001f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -6.151844e-002f, 7.734069e-002f, 0.000000e+000f, -3.745480e-001f,
  -5.303753e-002f, 9.006279e-002f, -1.392174e-002f, 7.292816e-002f, -5.100009e-001f, 0.000000e+000f, -6.533677e-002f, 7.823453e-002f, 0.000000e+000f, -4.333942e-001f,
  -5.303753e-002f, 9.918525e-002f, -2.784348e-002f, 1.458563e-001f, -5.960009e-001f, 0.000000e+000f, -4.903998e-002f, 6.154691e-002f, 0.000000e+000f, -4.333942e-001f,
  -5.303753e-002f, 1.083077e-001f, -4.176521e-002f, 2.187845e-001f, -6.820009e-001f, 0.000000e+000f, -3.655981e-002f, 4.869888e-002f, 0.000000e+000f, -4.333942e-001f,
  -5.303753e-002f, 1.265526e-001f, -6.960869e-002f, 3.646408e-001f, -8.540009e-001f, 0.000000e+000f, -2.699810e-002f, 3.879034e-002f, 0.000000e+000f, -4.333942e-001f,
  0.000000e+000f, -2.056937e-001f, 2.552811e-001f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -6.011925e-002f, 7.461243e-002f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, -1.967119e-001f, 2.441340e-001f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -1.068469e-001f, 1.326049e-001f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, -1.757659e-001f, 2.181385e-001f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -1.378972e-001f, 1.711406e-001f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, -1.526246e-001f, 1.894184e-001f, 0.000000e+000f, -3.745480e-001f,
  5.643283e-002f, -2.089844e-001f, 1.724435e-001f, 1.782374e-001f, -6.124846e-001f, 0.000000e+000f, -1.985738e-001f, 2.464448e-001f, 0.000000e+000f, -3.745480e-001f,
  4.486980e-002f, -1.851893e-001f, 1.607222e-001f, 1.878350e-001f, -6.252969e-001f, 0.000000e+000f, -1.741984e-001f, 2.161930e-001f, 0.000000e+000f, -3.745480e-001f,
  3.659337e-002f, -1.665368e-001f, 1.503210e-001f, 1.964695e-001f, -6.368235e-001f, 0.000000e+000f, -1.551753e-001f, 1.925840e-001f, 0.000000e+000f, -3.745480e-001f,
  3.307564e-002f, -1.542527e-001f, 1.404938e-001f, 2.106880e-001f, -6.558044e-001f, 0.000000e+000f, -1.404268e-001f, 1.742800e-001f, 0.000000e+000f, -3.745480e-001f,
  3.444450e-002f, -1.478006e-001f, 1.303779e-001f, 2.330148e-001f, -6.856093e-001f, 0.000000e+000f, -1.289949e-001f, 1.600921e-001f, 0.000000e+000f, -3.745480e-001f,
  3.752431e-002f, -1.439380e-001f, 1.208403e-001f, 2.562417e-001f, -7.166159e-001f, 0.000000e+000f, -1.201434e-001f, 1.491068e-001f, 0.000000e+000f, -3.745480e-001f,
  4.207655e-002f, -1.422982e-001f, 1.117936e-001f, 2.805725e-001f, -7.490961e-001f, 0.000000e+000f, -1.133339e-001f, 1.406558e-001f, 0.000000e+000f, -3.745480e-001f,
  4.903300e-002f, -1.434833e-001f, 1.025496e-001f, 3.092248e-001f, -7.873453e-001f, 0.000000e+000f, -1.081807e-001f, 1.342602e-001f, 0.000000e+000f, -3.745480e-001f,
  5.371246e-002f, -1.437553e-001f, 9.567951e-002f, 3.293029e-001f, -8.141484e-001f, 0.000000e+000f, -1.044113e-001f, 1.295822e-001f, 0.000000e+000f, -3.745480e-001f,
  5.365181e-002f, -1.413401e-001f, 9.277554e-002f, 3.338413e-001f, -8.202068e-001f, 0.000000e+000f, -1.018386e-001f, 1.263892e-001f, 0.000000e+000f, -3.745480e-001f,
  5.325330e-002f, -1.396442e-001f, 9.128460e-002f, 3.354596e-001f, -8.223673e-001f, 0.000000e+000f, -1.003405e-001f, 1.245300e-001f, 0.000000e+000f, -3.745480e-001f,
  5.414985e-002f, -1.398570e-001f, 9.016781e-002f, 3.389393e-001f, -8.270125e-001f, 0.000000e+000f, -9.984854e-002f, 1.239194e-001f, 0.000000e+000f, -3.745480e-001f,
  5.569320e-002f, -1.414811e-001f, 8.980628e-002f, 3.424515e-001f, -8.317010e-001f, 0.000000e+000f, -1.003405e-001f, 1.245300e-001f, 0.000000e+000f, -3.745480e-001f,
  5.720359e-002f, -1.440367e-001f, 9.065152e-002f, 3.439941e-001f, -8.337602e-001f, 0.000000e+000f, -1.018386e-001f, 1.263892e-001f, 0.000000e+000f, -3.745480e-001f,
  5.801603e-002f, -1.470693e-001f, 9.316388e-002f, 3.415529e-001f, -8.305014e-001f, 0.000000e+000f, -1.044113e-001f, 1.295822e-001f, 0.000000e+000f, -3.745480e-001f,
  5.752724e-002f, -1.501588e-001f, 9.775095e-002f, 3.332582e-001f, -8.194285e-001f, 0.000000e+000f, -1.081807e-001f, 1.342602e-001f, 0.000000e+000f, -3.745480e-001f,
  5.527406e-002f, -1.529527e-001f, 1.046889e-001f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -1.133339e-001f, 1.406558e-001f, 0.000000e+000f, -3.745480e-001f,
  5.527406e-002f, -1.529527e-001f, 1.046889e-001f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -7.195806e-002f, 8.930526e-002f, 0.000000e+000f, -3.745480e-001f,
  5.527406e-002f, -1.529527e-001f, 1.046889e-001f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -6.868724e-002f, 8.524593e-002f, 0.000000e+000f, -3.745480e-001f,
  5.527406e-002f, -1.529527e-001f, 1.046889e-001f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -6.570084e-002f, 8.153959e-002f, 0.000000e+000f, -3.745480e-001f,
  5.527406e-002f, -1.529527e-001f, 1.046889e-001f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -6.296330e-002f, 7.814211e-002f, 0.000000e+000f, -3.745480e-001f,
  5.527406e-002f, -1.529527e-001f, 1.046889e-001f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -6.044477e-002f, 7.501642e-002f, 0.000000e+000f, -3.745480e-001f,
  5.527406e-002f, -1.529527e-001f, 1.046889e-001f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -5.811997e-002f, 7.213117e-002f, 0.000000e+000f, -3.745480e-001f,
  -5.007066e-002f, 8.502476e-002f, -1.314297e-002f, 7.292816e-002f, -5.100009e-001f, 0.000000e+000f, -6.453014e-002f, 7.726867e-002f, 0.000000e+000f, -4.333942e-001f,
  -5.007066e-002f, 9.363691e-002f, -2.628594e-002f, 1.458563e-001f, -5.960009e-001f, 0.000000e+000f, -4.816427e-002f, 6.044786e-002f, 0.000000e+000f, -4.333942e-001f,
  -5.007066e-002f, 1.194734e-001f, -6.571484e-002f, 3.646408e-001f, -8.540009e-001f, 0.000000e+000f, -3.571936e-002f, 4.757937e-002f, 0.000000e+000f, -4.333942e-001f,
  0.000000e+000f, -1.954967e-001f, 2.396915e-001f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -5.713893e-002f, 7.005599e-002f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, -1.869602e-001f, 2.292252e-001f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -1.074275e-001f, 1.317130e-001f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, -1.633350e-001f, 2.002591e-001f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -1.347894e-001f, 1.652605e-001f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, -1.416008e-001f, 1.736116e-001f, 0.000000e+000f, -3.745480e-001f,
  4.957960e-002f, -1.897704e-001f, 1.581410e-001f, 1.815976e-001f, -6.169703e-001f, 0.000000e+000f, -1.803848e-001f, 2.211633e-001f, 0.000000e+000f, -3.745480e-001f,
  3.965010e-002f, -1.689287e-001f, 1.475140e-001f, 1.906100e-001f, -6.290014e-001f, 0.000000e+000f, -1.590209e-001f, 1.949699e-001f, 0.000000e+000f, -3.745480e-001f,
  3.241358e-002f, -1.511172e-001f, 1.365542e-001f, 2.023671e-001f, -6.446964e-001f, 0.000000e+000f, -1.400279e-001f, 1.716832e-001f, 0.000000e+000f, -3.745480e-001f,
  3.168869e-002f, -1.425725e-001f, 1.271676e-001f, 2.212488e-001f, -6.699023e-001f, 0.000000e+000f, -1.276873e-001f, 1.565528e-001f, 0.000000e+000f, -3.745480e-001f,
  3.413253e-002f, -1.379439e-001f, 1.178190e-001f, 2.448469e-001f, -7.014045e-001f, 0.000000e+000f, -1.181231e-001f, 1.448265e-001f, 0.000000e+000f, -3.745480e-001f,
  3.826932e-002f, -1.348617e-001f, 1.078214e-001f, 2.719349e-001f, -7.375654e-001f, 0.000000e+000f, -1.096824e-001f, 1.344776e-001f, 0.000000e+000f, -3.745480e-001f,
  4.433666e-002f, -1.351927e-001f, 9.910651e-002f, 2.997339e-001f, -7.746754e-001f, 0.000000e+000f, -1.042933e-001f, 1.278703e-001f, 0.000000e+000f, -3.745480e-001f,
  5.069421e-002f, -1.360623e-001f, 9.061593e-002f, 3.272530e-001f, -8.114118e-001f, 0.000000e+000f, -9.974945e-002f, 1.222992e-001f, 0.000000e+000f, -3.745480e-001f,
  5.114473e-002f, -1.339915e-001f, 8.739967e-002f, 3.336541e-001f, -8.199570e-001f, 0.000000e+000f, -9.712422e-002f, 1.190805e-001f, 0.000000e+000f, -3.745480e-001f,
  5.061334e-002f, -1.319618e-001f, 8.571002e-002f, 3.354596e-001f, -8.223673e-001f, 0.000000e+000f, -9.536627e-002f, 1.169252e-001f, 0.000000e+000f, -3.745480e-001f,
  5.146545e-002f, -1.321513e-001f, 8.466143e-002f, 3.389393e-001f, -8.270125e-001f, 0.000000e+000f, -9.489869e-002f, 1.163519e-001f, 0.000000e+000f, -3.745480e-001f,
  5.293229e-002f, -1.336729e-001f, 8.432197e-002f, 3.424515e-001f, -8.317010e-001f, 0.000000e+000f, -9.536627e-002f, 1.169252e-001f, 0.000000e+000f, -3.745480e-001f,
  5.455912e-002f, -1.365376e-001f, 8.538873e-002f, 3.439172e-001f, -8.336577e-001f, 0.000000e+000f, -9.712422e-002f, 1.190805e-001f, 0.000000e+000f, -3.745480e-001f,
  5.516241e-002f, -1.394463e-001f, 8.804813e-002f, 3.406233e-001f, -8.292605e-001f, 0.000000e+000f, -9.974945e-002f, 1.222992e-001f, 0.000000e+000f, -3.745480e-001f,
  5.416417e-002f, -1.428320e-001f, 9.369986e-002f, 3.289189e-001f, -8.136358e-001f, 0.000000e+000f, -1.042933e-001f, 1.278703e-001f, 0.000000e+000f, -3.745480e-001f,
  5.253393e-002f, -1.445818e-001f, 9.829575e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -7.063316e-002f, 8.660078e-002f, 0.000000e+000f, -3.745480e-001f,
  5.253393e-002f, -1.445818e-001f, 9.829575e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -6.680036e-002f, 8.190152e-002f, 0.000000e+000f, -3.745480e-001f,
  5.253393e-002f, -1.445818e-001f, 9.829575e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -6.383145e-002f, 7.826145e-002f, 0.000000e+000f, -3.745480e-001f,
  5.253393e-002f, -1.445818e-001f, 9.829575e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -6.111522e-002f, 7.493117e-002f, 0.000000e+000f, -3.745480e-001f,
  5.253393e-002f, -1.445818e-001f, 9.829575e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -5.822463e-002f, 7.138713e-002f, 0.000000e+000f, -3.745480e-001f,
  5.253393e-002f, -1.445818e-001f, 9.829575e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -5.595614e-002f, 6.860582e-002f, 0.000000e+000f, -3.745480e-001f,
  -4.726975e-002f, 8.026855e-002f, -1.240776e-002f, 7.292816e-002f, -5.100009e-001f, 0.000000e+000f, -6.493095e-002f, 7.774860e-002f, 0.000000e+000f, -4.333942e-001f,
  -4.726975e-002f, 8.839895e-002f, -2.481552e-002f, 1.458563e-001f, -5.960009e-001f, 0.000000e+000f, -4.845268e-002f, 6.080982e-002f, 0.000000e+000f, -4.333942e-001f,
  -4.726975e-002f, 1.127901e-001f, -6.203881e-002f, 3.646408e-001f, -8.540009e-001f, 0.000000e+000f, -3.571936e-002f, 4.757937e-002f, 0.000000e+000f, -4.333942e-001f,
  0.000000e+000f, -1.905593e-001f, 2.322818e-001f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -7.182286e-002f, 8.754833e-002f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, -1.765058e-001f, 2.151514e-001f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -1.195753e-001f, 1.457561e-001f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, -1.483731e-001f, 1.808591e-001f, 0.000000e+000f, -3.745480e-001f,
  5.228064e-002f, -1.924510e-001f, 1.569074e-001f, 1.782374e-001f, -6.124846e-001f, 0.000000e+000f, -1.839632e-001f, 2.242416e-001f, 0.000000e+000f, -3.745480e-001f,
  3.864870e-002f, -1.643872e-001f, 1.429538e-001f, 1.906100e-001f, -6.290014e-001f, 0.000000e+000f, -1.550047e-001f, 1.889427e-001f, 0.000000e+000f, -3.745480e-001f,
  3.112011e-002f, -1.452790e-001f, 1.308482e-001f, 2.048375e-001f, -6.479943e-001f, 0.000000e+000f, -1.342679e-001f, 1.636656e-001f, 0.000000e+000f, -3.745480e-001f,
  3.191015e-002f, -1.362198e-001f, 1.186316e-001f, 2.330148e-001f, -6.856093e-001f, 0.000000e+000f, -1.195037e-001f, 1.456688e-001f, 0.000000e+000f, -3.745480e-001f,
  3.592406e-002f, -1.317468e-001f, 1.072153e-001f, 2.639144e-001f, -7.268585e-001f, 0.000000e+000f, -1.090107e-001f, 1.328784e-001f, 0.000000e+000f, -3.745480e-001f,
  4.321689e-002f, -1.314707e-001f, 9.604279e-002f, 2.997339e-001f, -7.746754e-001f, 0.000000e+000f, -1.016593e-001f, 1.239174e-001f, 0.000000e+000f, -3.745480e-001f,
  4.976042e-002f, -1.320771e-001f, 8.705937e-002f, 3.293029e-001f, -8.141484e-001f, 0.000000e+000f, -9.672901e-002f, 1.179076e-001f, 0.000000e+000f, -3.745480e-001f,
  4.942755e-002f, -1.291087e-001f, 8.393566e-002f, 3.341172e-001f, -8.205751e-001f, 0.000000e+000f, -9.377636e-002f, 1.143085e-001f, 0.000000e+000f, -3.745480e-001f,
  4.979103e-002f, -1.282312e-001f, 8.232589e-002f, 3.376788e-001f, -8.253298e-001f, 0.000000e+000f, -9.255239e-002f, 1.128166e-001f, 0.000000e+000f, -3.745480e-001f,
  5.159543e-002f, -1.299297e-001f, 8.171529e-002f, 3.424515e-001f, -8.317010e-001f, 0.000000e+000f, -9.295769e-002f, 1.133106e-001f, 0.000000e+000f, -3.745480e-001f,
  5.334680e-002f, -1.331660e-001f, 8.305788e-002f, 3.437203e-001f, -8.333948e-001f, 0.000000e+000f, -9.502492e-002f, 1.158304e-001f, 0.000000e+000f, -3.745480e-001f,
  5.360948e-002f, -1.369863e-001f, 8.732437e-002f, 3.367762e-001f, -8.241248e-001f, 0.000000e+000f, -9.892454e-002f, 1.205839e-001f, 0.000000e+000f, -3.745480e-001f,
  5.120713e-002f, -1.405658e-001f, 9.525709e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -1.049951e-001f, 1.279836e-001f, 0.000000e+000f, -3.745480e-001f,
  5.120713e-002f, -1.405658e-001f, 9.525709e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -6.562194e-002f, 7.998973e-002f, 0.000000e+000f, -3.745480e-001f,
  5.120713e-002f, -1.405658e-001f, 9.525709e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -6.176182e-002f, 7.528445e-002f, 0.000000e+000f, -3.745480e-001f,
  5.120713e-002f, -1.405658e-001f, 9.525709e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -5.833061e-002f, 7.110198e-002f, 0.000000e+000f, -3.745480e-001f,
  5.120713e-002f, -1.405658e-001f, 9.525709e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -5.526058e-002f, 6.735977e-002f, 0.000000e+000f, -3.745480e-001f,
  -4.592861e-002f, 7.799117e-002f, -1.205573e-002f, 7.292816e-002f, -5.100009e-001f, 0.000000e+000f, -6.533677e-002f, 7.823453e-002f, 0.000000e+000f, -4.333942e-001f,
  -4.592861e-002f, 1.095901e-001f, -6.027864e-002f, 3.646408e-001f, -8.540009e-001f, 0.000000e+000f, -4.816427e-002f, 6.044786e-002f, 0.000000e+000f, -4.333942e-001f,
  -4.592861e-002f, 9.379061e-002f, -3.616718e-002f, 2.187845e-001f, -6.820009e-001f, 0.000000e+000f, -3.531345e-002f, 4.703869e-002f, 0.000000e+000f, -4.333942e-001f,
  0.000000e+000f, -1.857278e-001f, 2.251164e-001f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -8.408032e-002f, 1.019118e-001f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, -1.656059e-001f, 2.007272e-001f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -1.313294e-001f, 1.591814e-001f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, -1.313294e-001f, 1.591814e-001f, 0.000000e+000f, -3.745480e-001f,
  4.051446e-002f, -1.660388e-001f, 1.417308e-001f, 1.878350e-001f, -6.252969e-001f, 0.000000e+000f, -1.572896e-001f, 1.906471e-001f, 0.000000e+000f, -3.745480e-001f,
  3.033109e-002f, -1.413872e-001f, 1.268118e-001f, 2.048375e-001f, -6.479943e-001f, 0.000000e+000f, -1.308636e-001f, 1.586168e-001f, 0.000000e+000f, -3.745480e-001f,
  3.197356e-002f, -1.312132e-001f, 1.120672e-001f, 2.409651e-001f, -6.962225e-001f, 0.000000e+000f, -1.135781e-001f, 1.376654e-001f, 0.000000e+000f, -3.745480e-001f,
  3.799234e-002f, -1.273842e-001f, 9.858375e-002f, 2.805725e-001f, -7.490961e-001f, 0.000000e+000f, -1.023330e-001f, 1.240356e-001f, 0.000000e+000f, -3.745480e-001f,
  4.766716e-002f, -1.286925e-001f, 8.595589e-002f, 3.246539e-001f, -8.079422e-001f, 0.000000e+000f, -9.528397e-002f, 1.154915e-001f, 0.000000e+000f, -3.745480e-001f,
  4.817436e-002f, -1.255043e-001f, 8.134642e-002f, 3.341172e-001f, -8.205751e-001f, 0.000000e+000f, -9.139874e-002f, 1.107823e-001f, 0.000000e+000f, -3.745480e-001f,
  4.889373e-002f, -1.248639e-001f, 7.951336e-002f, 3.389393e-001f, -8.270125e-001f, 0.000000e+000f, -9.015661e-002f, 1.092768e-001f, 0.000000e+000f, -3.745480e-001f,
  5.123742e-002f, -1.277330e-001f, 7.954780e-002f, 3.438241e-001f, -8.335333e-001f, 0.000000e+000f, -9.139874e-002f, 1.107823e-001f, 0.000000e+000f, -3.745480e-001f,
  5.239209e-002f, -1.322162e-001f, 8.328536e-002f, 3.395223e-001f, -8.277907e-001f, 0.000000e+000f, -9.528397e-002f, 1.154915e-001f, 0.000000e+000f, -3.745480e-001f,
  4.990882e-002f, -1.366590e-001f, 9.231861e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -1.023330e-001f, 1.240356e-001f, 0.000000e+000f, -3.745480e-001f,
  4.990882e-002f, -1.366590e-001f, 9.231861e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -6.297418e-002f, 7.632957e-002f, 0.000000e+000f, -3.745480e-001f,
  4.990882e-002f, -1.366590e-001f, 9.231861e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -5.847602e-002f, 7.087746e-002f, 0.000000e+000f, -3.745480e-001f,
  4.990882e-002f, -1.366590e-001f, 9.231861e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -5.457762e-002f, 6.615229e-002f, 0.000000e+000f, -3.745480e-001f,
  -4.462552e-002f, 7.577840e-002f, -1.171368e-002f, 7.292816e-002f, -5.100009e-001f, 0.000000e+000f, -6.533677e-002f, 7.823453e-002f, 0.000000e+000f, -4.333942e-001f,
  -4.462552e-002f, 1.064808e-001f, -5.856841e-002f, 3.646408e-001f, -8.540009e-001f, 0.000000e+000f, -4.759763e-002f, 5.973670e-002f, 0.000000e+000f, -4.333942e-001f,
  0.000000e+000f, -1.810012e-001f, 2.181865e-001f, 0.000000e+000f, -3.745480e-001f,
  0.000000e+000f, -1.092220e-001f, 1.316608e-001f, 0.000000e+000f, -3.745480e-001f, 0.000000e+000f, -1.443330e-001f, 1.739850e-001f, 0.000000e+000f, -3.745480e-001f,
  3.948341e-002f, -1.615514e-001f, 1.373678e-001f, 1.878350e-001f, -6.252969e-001f, 0.000000e+000f, -1.532867e-001f, 1.847783e-001f, 0.000000e+000f, -3.745480e-001f,
  2.933907e-002f, -1.313962e-001f, 1.157582e-001f, 2.212488e-001f, -6.699023e-001f, 0.000000e+000f, -1.182197e-001f, 1.425070e-001f, 0.000000e+000f, -3.745480e-001f,
  3.702548e-002f, -1.238967e-001f, 9.554897e-002f, 2.805725e-001f, -7.490961e-001f, 0.000000e+000f, -9.972877e-002f, 1.202173e-001f, 0.000000e+000f, -3.745480e-001f,
  4.754276e-002f, -1.238644e-001f, 8.022741e-002f, 3.328137e-001f, -8.188351e-001f, 0.000000e+000f, -9.062161e-002f, 1.092391e-001f, 0.000000e+000f, -3.745480e-001f,
  4.764944e-002f, -1.213701e-001f, 7.706564e-002f, 3.389393e-001f, -8.270125e-001f, 0.000000e+000f, -8.786223e-002f, 1.059128e-001f, 0.000000e+000f, -3.745480e-001f,
  5.080597e-002f, -1.262414e-001f, 7.835102e-002f, 3.433942e-001f, -8.329594e-001f, 0.000000e+000f, -9.062161e-002f, 1.092391e-001f, 0.000000e+000f, -3.745480e-001f,
  4.863869e-002f, -1.328584e-001f, 8.947670e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -9.972877e-002f, 1.202173e-001f, 0.000000e+000f, -3.745480e-001f,
  4.863869e-002f, -1.328584e-001f, 8.947670e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -5.909853e-002f, 7.123986e-002f, 0.000000e+000f, -3.745480e-001f,
  4.863869e-002f, -1.328584e-001f, 8.947670e-002f, 3.176174e-001f, -7.985489e-001f, 0.000000e+000f, -5.318868e-002f, 6.411588e-002f, 0.000000e+000f, -3.745480e-001f,
  -4.335941e-002f, 1.034597e-001f, -5.690671e-002f, 3.646408e-001f, -8.540009e-001f, 0.000000e+000f, -6.335686e-002f, 7.586379e-002f, 0.000000e+000f, -4.333942e-001f,
  -1.608832e-001f, 1.907011e-001f, 0.000000e+000f, 0.000000e+000f, -4.333942e-001f,
  -4.837229e-002f, 1.479314e-001f, -2.401315e-002f, 4.312881e-002f, -3.367489e-001f, -1.263227e-001f, 1.546432e-001f, 0.000000e+000f, 0.000000e+000f, -4.333942e-001f,
  -3.594416e-002f, 1.300135e-001f, -4.047116e-002f, 1.016019e-001f, -4.673543e-001f, -1.123362e-001f, 1.429145e-001f, 0.000000e+000f, 0.000000e+000f, -4.333942e-001f,
  -4.536101e-002f, 1.205158e-001f, -5.010849e-002f, 1.932668e-001f, -6.325481e-001f, -7.768960e-002f, 1.034851e-001f, 0.000000e+000f, 0.000000e+000f, -4.333942e-001f,
  -5.824604e-002f, 1.216110e-001f, -5.609793e-002f, 3.056695e-001f, -7.882871e-001f, -5.753948e-002f, 8.097938e-002f, 0.000000e+000f, 0.000000e+000f, -4.333942e-001f,
  -5.837673e-002f, 1.285283e-001f, -6.735888e-002f, 3.891194e-001f, -8.824645e-001f, -4.513703e-002f, 6.786320e-002f, 0.000000e+000f, 0.000000e+000f, -4.333942e-001f,
  // Total number of coefficients: 3485
  // Maximum number of elevation coefficients: 5
	
	// Lite coefficients
	// 20 degrees loudspeakers
	// 48000 Hz sample rate
   // Coefficients
  // Generated by HRTFConv V5.90d on Wed Mar 03 18:45:39 1999
   0.000000e+000f, -9.783995e-002f, 1.494352e-001f, 0.000000e+000f, -3.836635e-001f,
  0.000000e+000f, -2.859623e-002f, 4.367626e-002f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, -9.356769e-002f, 1.429100e-001f, 0.000000e+000f, -3.836635e-001f,
  0.000000e+000f, -5.376408e-002f, 8.211620e-002f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, -8.174399e-002f, 1.248511e-001f, 0.000000e+000f, -3.836635e-001f,
  0.000000e+000f, -6.745787e-002f, 1.030313e-001f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, -7.086673e-002f, 1.082378e-001f, 0.000000e+000f, -3.836635e-001f,
  2.714452e-002f, -1.057229e-001f, 9.815302e-002f, 1.990449e-001f, -6.430639e-001f, 0.000000e+000f, -9.027690e-002f, 1.378838e-001f, 0.000000e+000f, -3.836635e-001f,
  2.204911e-002f, -9.341519e-002f, 9.124139e-002f, 2.077605e-001f, -6.544222e-001f, 0.000000e+000f, -7.958497e-002f, 1.215536e-001f, 0.000000e+000f, -3.836635e-001f,
  1.826789e-002f, -8.303641e-002f, 8.421019e-002f, 2.191239e-001f, -6.692313e-001f, 0.000000e+000f, -7.007954e-002f, 1.070355e-001f, 0.000000e+000f, -3.836635e-001f,
  1.768491e-002f, -7.828427e-002f, 7.831199e-002f, 2.373536e-001f, -6.929887e-001f, 0.000000e+000f, -6.390347e-002f, 9.760252e-002f, 0.000000e+000f, -3.836635e-001f,
  1.864307e-002f, -7.596018e-002f, 7.252714e-002f, 2.600927e-001f, -7.226228e-001f, 0.000000e+000f, -5.911689e-002f, 9.029177e-002f, 0.000000e+000f, -3.836635e-001f,
  2.040782e-002f, -7.464775e-002f, 6.640585e-002f, 2.861172e-001f, -7.565387e-001f, 0.000000e+000f, -5.489258e-002f, 8.383980e-002f, 0.000000e+000f, -3.836635e-001f,
  2.312549e-002f, -7.535478e-002f, 6.114600e-002f, 3.127202e-001f, -7.912084e-001f, 0.000000e+000f, -5.219553e-002f, 7.972048e-002f, 0.000000e+000f, -3.836635e-001f,
  2.597770e-002f, -7.638104e-002f, 5.605987e-002f, 3.389341e-001f, -8.253710e-001f, 0.000000e+000f, -4.992145e-002f, 7.624719e-002f, 0.000000e+000f, -3.836635e-001f,
  2.612270e-002f, -7.532124e-002f, 5.410295e-002f, 3.450127e-001f, -8.332928e-001f, 0.000000e+000f, -4.860761e-002f, 7.424050e-002f, 0.000000e+000f, -3.836635e-001f,
  2.583306e-002f, -7.419661e-002f, 5.306091e-002f, 3.467259e-001f, -8.355255e-001f, 0.000000e+000f, -4.772781e-002f, 7.289674e-002f, 0.000000e+000f, -3.836635e-001f,
  2.621631e-002f, -7.437407e-002f, 5.243792e-002f, 3.500260e-001f, -8.398263e-001f, 0.000000e+000f, -4.749380e-002f, 7.253933e-002f, 0.000000e+000f, -3.836635e-001f,
  2.690720e-002f, -7.531279e-002f, 5.225997e-002f, 3.533547e-001f, -8.441643e-001f, 0.000000e+000f, -4.772781e-002f, 7.289674e-002f, 0.000000e+000f, -3.836635e-001f,
  2.770430e-002f, -7.697714e-002f, 5.294255e-002f, 3.547431e-001f, -8.459737e-001f, 0.000000e+000f, -4.860761e-002f, 7.424050e-002f, 0.000000e+000f, -3.836635e-001f,
  2.804939e-002f, -7.857417e-002f, 5.457675e-002f, 3.516223e-001f, -8.419066e-001f, 0.000000e+000f, -4.992145e-002f, 7.624719e-002f, 0.000000e+000f, -3.836635e-001f,
  2.769856e-002f, -8.028742e-002f, 5.801187e-002f, 3.405168e-001f, -8.274337e-001f, 0.000000e+000f, -5.219553e-002f, 7.972048e-002f, 0.000000e+000f, -3.836635e-001f,
  2.702325e-002f, -8.107986e-002f, 6.079754e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -3.534967e-002f, 5.399108e-002f, 0.000000e+000f, -3.836635e-001f,
  2.702325e-002f, -8.107986e-002f, 6.079754e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -3.343147e-002f, 5.106133e-002f, 0.000000e+000f, -3.836635e-001f,
  2.702325e-002f, -8.107986e-002f, 6.079754e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -3.194563e-002f, 4.879194e-002f, 0.000000e+000f, -3.836635e-001f,
  2.702325e-002f, -8.107986e-002f, 6.079754e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -3.058624e-002f, 4.671568e-002f, 0.000000e+000f, -3.836635e-001f,
  2.702325e-002f, -8.107986e-002f, 6.079754e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -2.913959e-002f, 4.450616e-002f, 0.000000e+000f, -3.836635e-001f,
  2.702325e-002f, -8.107986e-002f, 6.079754e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -2.800428e-002f, 4.277215e-002f, 0.000000e+000f, -3.836635e-001f,
  -6.124702e-002f, 1.007532e-001f, -1.551762e-002f, 7.391957e-002f, -5.157650e-001f, 0.000000e+000f, -6.581043e-002f, 7.764779e-002f, 0.000000e+000f, -4.384882e-001f,
  -6.124702e-002f, 1.112877e-001f, -3.103524e-002f, 1.478391e-001f, -6.017650e-001f, 0.000000e+000f, -4.922337e-002f, 6.063543e-002f, 0.000000e+000f, -4.384882e-001f,
  -6.124702e-002f, 1.428912e-001f, -7.758810e-002f, 3.695979e-001f, -8.597650e-001f, 0.000000e+000f, -3.640018e-002f, 4.735314e-002f, 0.000000e+000f, -4.384882e-001f,
  0.000000e+000f, -1.267051e-001f, 1.845959e-001f, 0.000000e+000f, -3.836635e-001f,
  0.000000e+000f, -3.703280e-002f, 5.395287e-002f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, -1.211724e-001f, 1.765353e-001f, 0.000000e+000f, -3.836635e-001f,
  0.000000e+000f, -6.581651e-002f, 9.588768e-002f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, -1.082699e-001f, 1.577377e-001f, 0.000000e+000f, -3.836635e-001f,
  0.000000e+000f, -8.494314e-002f, 1.237532e-001f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, -9.401510e-002f, 1.369700e-001f, 0.000000e+000f, -3.836635e-001f,
  3.783754e-002f, -1.404493e-001f, 1.243081e-001f, 1.957945e-001f, -6.388278e-001f, 0.000000e+000f, -1.223193e-001f, 1.782063e-001f, 0.000000e+000f, -3.836635e-001f,
  3.054750e-002f, -1.237310e-001f, 1.154246e-001f, 2.050773e-001f, -6.509254e-001f, 0.000000e+000f, -1.073043e-001f, 1.563310e-001f, 0.000000e+000f, -3.836635e-001f,
  2.528956e-002f, -1.107274e-001f, 1.076400e-001f, 2.134248e-001f, -6.618041e-001f, 0.000000e+000f, -9.558627e-002f, 1.392591e-001f, 0.000000e+000f, -3.836635e-001f,
  2.289497e-002f, -1.022722e-001f, 1.004042e-001f, 2.271608e-001f, -6.797053e-001f, 0.000000e+000f, -8.650135e-002f, 1.260233e-001f, 0.000000e+000f, -3.836635e-001f,
  2.341054e-002f, -9.800718e-002f, 9.309627e-002f, 2.486982e-001f, -7.077733e-001f, 0.000000e+000f, -7.945942e-002f, 1.157640e-001f, 0.000000e+000f, -3.836635e-001f,
  2.496974e-002f, -9.560293e-002f, 8.628405e-002f, 2.710512e-001f, -7.369043e-001f, 0.000000e+000f, -7.400701e-002f, 1.078204e-001f, 0.000000e+000f, -3.836635e-001f,
  2.741718e-002f, -9.478105e-002f, 7.989188e-002f, 2.943954e-001f, -7.673270e-001f, 0.000000e+000f, -6.981247e-002f, 1.017094e-001f, 0.000000e+000f, -3.836635e-001f,
  3.127179e-002f, -9.597254e-002f, 7.344620e-002f, 3.217754e-001f, -8.030094e-001f, 0.000000e+000f, -6.663812e-002f, 9.708468e-002f, 0.000000e+000f, -3.836635e-001f,
  3.383929e-002f, -9.643474e-002f, 6.866994e-002f, 3.408815e-001f, -8.279089e-001f, 0.000000e+000f, -6.431625e-002f, 9.370196e-002f, 0.000000e+000f, -3.836635e-001f,
  3.372723e-002f, -9.485796e-002f, 6.661059e-002f, 3.451903e-001f, -8.335243e-001f, 0.000000e+000f, -6.273144e-002f, 9.139307e-002f, 0.000000e+000f, -3.836635e-001f,
  3.345443e-002f, -9.372955e-002f, 6.554564e-002f, 3.467259e-001f, -8.355255e-001f, 0.000000e+000f, -6.180865e-002f, 9.004866e-002f, 0.000000e+000f, -3.836635e-001f,
  3.395075e-002f, -9.392439e-002f, 6.477606e-002f, 3.500260e-001f, -8.398263e-001f, 0.000000e+000f, -6.150561e-002f, 8.960715e-002f, 0.000000e+000f, -3.836635e-001f,
  3.484547e-002f, -9.507703e-002f, 6.455625e-002f, 3.533547e-001f, -8.441643e-001f, 0.000000e+000f, -6.180865e-002f, 9.004866e-002f, 0.000000e+000f, -3.836635e-001f,
  3.575219e-002f, -9.683237e-002f, 6.518905e-002f, 3.548159e-001f, -8.460685e-001f, 0.000000e+000f, -6.273144e-002f, 9.139307e-002f, 0.000000e+000f, -3.836635e-001f,
  3.629452e-002f, -9.885534e-002f, 6.698518e-002f, 3.525032e-001f, -8.430547e-001f, 0.000000e+000f, -6.431625e-002f, 9.370196e-002f, 0.000000e+000f, -3.836635e-001f,
  3.613076e-002f, -1.008398e-001f, 7.022387e-002f, 3.446370e-001f, -8.328032e-001f, 0.000000e+000f, -6.663812e-002f, 9.708468e-002f, 0.000000e+000f, -3.836635e-001f,
  3.499576e-002f, -1.025349e-001f, 7.510263e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -6.981247e-002f, 1.017094e-001f, 0.000000e+000f, -3.836635e-001f,
  3.499576e-002f, -1.025349e-001f, 7.510263e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -4.432538e-002f, 6.457738e-002f, 0.000000e+000f, -3.836635e-001f,
  3.499576e-002f, -1.025349e-001f, 7.510263e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -4.231059e-002f, 6.164204e-002f, 0.000000e+000f, -3.836635e-001f,
  3.499576e-002f, -1.025349e-001f, 7.510263e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -4.047100e-002f, 5.896195e-002f, 0.000000e+000f, -3.836635e-001f,
  3.499576e-002f, -1.025349e-001f, 7.510263e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -3.878470e-002f, 5.650521e-002f, 0.000000e+000f, -3.836635e-001f,
  3.499576e-002f, -1.025349e-001f, 7.510263e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -3.723332e-002f, 5.424500e-002f, 0.000000e+000f, -3.836635e-001f,
  3.499576e-002f, -1.025349e-001f, 7.510263e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -3.580126e-002f, 5.215865e-002f, 0.000000e+000f, -3.836635e-001f,
  -6.872028e-002f, 1.130470e-001f, -1.741106e-002f, 7.391957e-002f, -5.157650e-001f, 0.000000e+000f, -6.540419e-002f, 7.716848e-002f, 0.000000e+000f, -4.384882e-001f,
  -6.872028e-002f, 1.248669e-001f, -3.482211e-002f, 1.478391e-001f, -6.017650e-001f, 0.000000e+000f, -4.893037e-002f, 6.027451e-002f, 0.000000e+000f, -4.384882e-001f,
  -6.872028e-002f, 1.603265e-001f, -8.705528e-002f, 3.695979e-001f, -8.597650e-001f, 0.000000e+000f, -3.640018e-002f, 4.735314e-002f, 0.000000e+000f, -4.384882e-001f,
  0.000000e+000f, -1.634751e-001f, 2.284296e-001f, 0.000000e+000f, -3.836635e-001f,
  0.000000e+000f, -4.036770e-002f, 5.640724e-002f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, -1.584126e-001f, 2.213556e-001f, 0.000000e+000f, -3.836635e-001f,
  0.000000e+000f, -7.400635e-002f, 1.034117e-001f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, -1.457641e-001f, 2.036814e-001f, 0.000000e+000f, -3.836635e-001f,
  0.000000e+000f, -9.864613e-002f, 1.378418e-001f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, -1.303573e-001f, 1.821530e-001f, 0.000000e+000f, -3.836635e-001f,
  0.000000e+000f, -1.155943e-001f, 1.615241e-001f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, -1.155943e-001f, 1.615241e-001f, 0.000000e+000f, -3.836635e-001f,
  4.703915e-002f, -1.744515e-001f, 1.519211e-001f, 1.974310e-001f, -6.409606e-001f, 0.000000e+000f, -1.542603e-001f, 2.155534e-001f, 0.000000e+000f, -3.836635e-001f,
  3.941242e-002f, -1.572905e-001f, 1.428331e-001f, 2.050773e-001f, -6.509254e-001f, 0.000000e+000f, -1.384441e-001f, 1.934530e-001f, 0.000000e+000f, -3.836635e-001f,
  3.354679e-002f, -1.432904e-001f, 1.347232e-001f, 2.118784e-001f, -6.597888e-001f, 0.000000e+000f, -1.255864e-001f, 1.754865e-001f, 0.000000e+000f, -3.836635e-001f,
  3.006486e-002f, -1.330704e-001f, 1.272409e-001f, 2.215105e-001f, -6.723415e-001f, 0.000000e+000f, -1.151844e-001f, 1.609513e-001f, 0.000000e+000f, -3.836635e-001f,
  2.954868e-002f, -1.269591e-001f, 1.197093e-001f, 2.373536e-001f, -6.929887e-001f, 0.000000e+000f, -1.067726e-001f, 1.491972e-001f, 0.000000e+000f, -3.836635e-001f,
  3.082338e-002f, -1.234257e-001f, 1.122831e-001f, 2.563561e-001f, -7.177532e-001f, 0.000000e+000f, -9.996990e-002f, 1.396916e-001f, 0.000000e+000f, -3.836635e-001f,
  3.262281e-002f, -1.210473e-001f, 1.054462e-001f, 2.747107e-001f, -7.416735e-001f, 0.000000e+000f, -9.447888e-002f, 1.320187e-001f, 0.000000e+000f, -3.836635e-001f,
  3.537369e-002f, -1.201799e-001f, 9.886284e-002f, 2.943954e-001f, -7.673270e-001f, 0.000000e+000f, -9.007214e-002f, 1.258611e-001f, 0.000000e+000f, -3.836635e-001f,
  3.950441e-002f, -1.211530e-001f, 9.215718e-002f, 3.173201e-001f, -7.972031e-001f, 0.000000e+000f, -8.657790e-002f, 1.209784e-001f, 0.000000e+000f, -3.836635e-001f,
  4.302332e-002f, -1.220398e-001f, 8.652549e-002f, 3.364639e-001f, -8.221517e-001f, 0.000000e+000f, -8.386765e-002f, 1.171913e-001f, 0.000000e+000f, -3.836635e-001f,
  4.383707e-002f, -1.209368e-001f, 8.339536e-002f, 3.442151e-001f, -8.322533e-001f, 0.000000e+000f, -8.184682e-002f, 1.143675e-001f, 0.000000e+000f, -3.836635e-001f,
  4.327103e-002f, -1.191155e-001f, 8.195564e-002f, 3.454522e-001f, -8.338655e-001f, 0.000000e+000f, -8.044793e-002f, 1.124128e-001f, 0.000000e+000f, -3.836635e-001f,
  4.321267e-002f, -1.182920e-001f, 8.091882e-002f, 3.471953e-001f, -8.361372e-001f, 0.000000e+000f, -7.962583e-002f, 1.112641e-001f, 0.000000e+000f, -3.836635e-001f,
  4.380330e-002f, -1.185725e-001f, 8.015765e-002f, 3.500260e-001f, -8.398263e-001f, 0.000000e+000f, -7.935462e-002f, 1.108851e-001f, 0.000000e+000f, -3.836635e-001f,
  4.475080e-002f, -1.196894e-001f, 7.986816e-002f, 3.528778e-001f, -8.435428e-001f, 0.000000e+000f, -7.962583e-002f, 1.112641e-001f, 0.000000e+000f, -3.836635e-001f,
  4.576633e-002f, -1.213934e-001f, 8.026646e-002f, 3.546549e-001f, -8.458587e-001f, 0.000000e+000f, -8.044793e-002f, 1.124128e-001f, 0.000000e+000f, -3.836635e-001f,
  4.656530e-002f, -1.234477e-001f, 8.157687e-002f, 3.542477e-001f, -8.453281e-001f, 0.000000e+000f, -8.184682e-002f, 1.143675e-001f, 0.000000e+000f, -3.836635e-001f,
  4.687756e-002f, -1.256282e-001f, 8.401412e-002f, 3.505787e-001f, -8.405466e-001f, 0.000000e+000f, -8.386765e-002f, 1.171913e-001f, 0.000000e+000f, -3.836635e-001f,
  4.646613e-002f, -1.277339e-001f, 8.775984e-002f, 3.426775e-001f, -8.302495e-001f, 0.000000e+000f, -8.657790e-002f, 1.209784e-001f, 0.000000e+000f, -3.836635e-001f,
  4.515158e-002f, -1.296016e-001f, 9.293634e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -9.007214e-002f, 1.258611e-001f, 0.000000e+000f, -3.836635e-001f,
  4.515158e-002f, -1.296016e-001f, 9.293634e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -5.764617e-002f, 8.055108e-002f, 0.000000e+000f, -3.836635e-001f,
  4.515158e-002f, -1.296016e-001f, 9.293634e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -5.542901e-002f, 7.745296e-002f, 0.000000e+000f, -3.836635e-001f,
  4.515158e-002f, -1.296016e-001f, 9.293634e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -5.337608e-002f, 7.458433e-002f, 0.000000e+000f, -3.836635e-001f,
  4.515158e-002f, -1.296016e-001f, 9.293634e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -5.146980e-002f, 7.192060e-002f, 0.000000e+000f, -3.836635e-001f,
  4.515158e-002f, -1.296016e-001f, 9.293634e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -4.969498e-002f, 6.944058e-002f, 0.000000e+000f, -3.836635e-001f,
  4.515158e-002f, -1.296016e-001f, 9.293634e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -4.803848e-002f, 6.712590e-002f, 0.000000e+000f, -3.836635e-001f,
  4.515158e-002f, -1.296016e-001f, 9.293634e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -4.648885e-002f, 6.496055e-002f, 0.000000e+000f, -3.836635e-001f,
  -7.710543e-002f, 1.268408e-001f, -1.953553e-002f, 7.391957e-002f, -5.157650e-001f, 0.000000e+000f, -6.622175e-002f, 7.813309e-002f, 0.000000e+000f, -4.384882e-001f,
  -7.710543e-002f, 1.401029e-001f, -3.907105e-002f, 1.478391e-001f, -6.017650e-001f, 0.000000e+000f, -4.982001e-002f, 6.137041e-002f, 0.000000e+000f, -4.384882e-001f,
  -7.710543e-002f, 1.533650e-001f, -5.860658e-002f, 2.217587e-001f, -6.877650e-001f, 0.000000e+000f, -3.725666e-002f, 4.846734e-002f, 0.000000e+000f, -4.384882e-001f,
  -7.710543e-002f, 1.798893e-001f, -9.767763e-002f, 3.695979e-001f, -8.597650e-001f, 0.000000e+000f, -2.762855e-002f, 3.851892e-002f, 0.000000e+000f, -4.384882e-001f,
  0.000000e+000f, -2.102493e-001f, 2.831295e-001f, 0.000000e+000f, -3.836635e-001f,
  0.000000e+000f, -5.191789e-002f, 6.991455e-002f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, -2.037383e-001f, 2.743616e-001f, 0.000000e+000f, -3.836635e-001f,
  0.000000e+000f, -9.518137e-002f, 1.281748e-001f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, -1.874707e-001f, 2.524550e-001f, 0.000000e+000f, -3.836635e-001f,
  0.000000e+000f, -1.268712e-001f, 1.708495e-001f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, -1.676558e-001f, 2.257715e-001f, 0.000000e+000f, -3.836635e-001f,
  0.000000e+000f, -1.486687e-001f, 2.002028e-001f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, -1.486687e-001f, 2.002028e-001f, 0.000000e+000f, -3.836635e-001f,
  6.049820e-002f, -2.212991e-001f, 1.883003e-001f, 1.974310e-001f, -6.409606e-001f, 0.000000e+000f, -1.983979e-001f, 2.671699e-001f, 0.000000e+000f, -3.836635e-001f,
  5.068928e-002f, -1.997253e-001f, 1.770360e-001f, 2.050773e-001f, -6.509254e-001f, 0.000000e+000f, -1.780564e-001f, 2.397774e-001f, 0.000000e+000f, -3.836635e-001f,
  4.314535e-002f, -1.821019e-001f, 1.669840e-001f, 2.118784e-001f, -6.597888e-001f, 0.000000e+000f, -1.615198e-001f, 2.175086e-001f, 0.000000e+000f, -3.836635e-001f,
  3.866716e-002f, -1.691847e-001f, 1.577101e-001f, 2.215105e-001f, -6.723415e-001f, 0.000000e+000f, -1.481414e-001f, 1.994928e-001f, 0.000000e+000f, -3.836635e-001f,
  3.800328e-002f, -1.613584e-001f, 1.483749e-001f, 2.373536e-001f, -6.929887e-001f, 0.000000e+000f, -1.373228e-001f, 1.849240e-001f, 0.000000e+000f, -3.836635e-001f,
  3.964270e-002f, -1.567310e-001f, 1.391705e-001f, 2.563561e-001f, -7.177532e-001f, 0.000000e+000f, -1.285737e-001f, 1.731422e-001f, 0.000000e+000f, -3.836635e-001f,
  4.195699e-002f, -1.535547e-001f, 1.306964e-001f, 2.747107e-001f, -7.416735e-001f, 0.000000e+000f, -1.215116e-001f, 1.636320e-001f, 0.000000e+000f, -3.836635e-001f,
  4.549496e-002f, -1.522597e-001f, 1.225366e-001f, 2.943954e-001f, -7.673270e-001f, 0.000000e+000f, -1.158440e-001f, 1.559998e-001f, 0.000000e+000f, -3.836635e-001f,
  5.080759e-002f, -1.532419e-001f, 1.142252e-001f, 3.173201e-001f, -7.972031e-001f, 0.000000e+000f, -1.113500e-001f, 1.499480e-001f, 0.000000e+000f, -3.836635e-001f,
  5.533335e-002f, -1.541530e-001f, 1.072449e-001f, 3.364639e-001f, -8.221517e-001f, 0.000000e+000f, -1.078642e-001f, 1.452540e-001f, 0.000000e+000f, -3.836635e-001f,
  5.637993e-002f, -1.526814e-001f, 1.033653e-001f, 3.442151e-001f, -8.322533e-001f, 0.000000e+000f, -1.052652e-001f, 1.417540e-001f, 0.000000e+000f, -3.836635e-001f,
  5.565193e-002f, -1.503759e-001f, 1.015808e-001f, 3.454522e-001f, -8.338655e-001f, 0.000000e+000f, -1.034660e-001f, 1.393312e-001f, 0.000000e+000f, -3.836635e-001f,
  5.557687e-002f, -1.493205e-001f, 1.002957e-001f, 3.471953e-001f, -8.361372e-001f, 0.000000e+000f, -1.024087e-001f, 1.379074e-001f, 0.000000e+000f, -3.836635e-001f,
  5.633650e-002f, -1.496428e-001f, 9.935224e-002f, 3.500260e-001f, -8.398263e-001f, 0.000000e+000f, -1.020599e-001f, 1.374377e-001f, 0.000000e+000f, -3.836635e-001f,
  5.755510e-002f, -1.510174e-001f, 9.899343e-002f, 3.528778e-001f, -8.435428e-001f, 0.000000e+000f, -1.024087e-001f, 1.379074e-001f, 0.000000e+000f, -3.836635e-001f,
  5.886120e-002f, -1.531429e-001f, 9.948710e-002f, 3.546549e-001f, -8.458587e-001f, 0.000000e+000f, -1.034660e-001f, 1.393312e-001f, 0.000000e+000f, -3.836635e-001f,
  5.988877e-002f, -1.557327e-001f, 1.011113e-001f, 3.542477e-001f, -8.453281e-001f, 0.000000e+000f, -1.052652e-001f, 1.417540e-001f, 0.000000e+000f, -3.836635e-001f,
  6.029038e-002f, -1.585168e-001f, 1.041322e-001f, 3.505787e-001f, -8.405466e-001f, 0.000000e+000f, -1.078642e-001f, 1.452540e-001f, 0.000000e+000f, -3.836635e-001f,
  5.976123e-002f, -1.612519e-001f, 1.087749e-001f, 3.426775e-001f, -8.302495e-001f, 0.000000e+000f, -1.113500e-001f, 1.499480e-001f, 0.000000e+000f, -3.836635e-001f,
  5.807055e-002f, -1.637396e-001f, 1.151909e-001f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -1.158440e-001f, 1.559998e-001f, 0.000000e+000f, -3.836635e-001f,
  5.807055e-002f, -1.637396e-001f, 1.151909e-001f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -7.414015e-002f, 9.983988e-002f, 0.000000e+000f, -3.836635e-001f,
  5.807055e-002f, -1.637396e-001f, 1.151909e-001f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -7.128861e-002f, 9.599988e-002f, 0.000000e+000f, -3.836635e-001f,
  5.807055e-002f, -1.637396e-001f, 1.151909e-001f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -6.864829e-002f, 9.244433e-002f, 0.000000e+000f, -3.836635e-001f,
  5.807055e-002f, -1.637396e-001f, 1.151909e-001f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -6.619656e-002f, 8.914275e-002f, 0.000000e+000f, -3.836635e-001f,
  5.807055e-002f, -1.637396e-001f, 1.151909e-001f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -6.391392e-002f, 8.606886e-002f, 0.000000e+000f, -3.836635e-001f,
  5.807055e-002f, -1.637396e-001f, 1.151909e-001f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -6.178346e-002f, 8.319990e-002f, 0.000000e+000f, -3.836635e-001f,
  5.807055e-002f, -1.637396e-001f, 1.151909e-001f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -5.979044e-002f, 8.051603e-002f, 0.000000e+000f, -3.836635e-001f,
  -8.651371e-002f, 1.423177e-001f, -2.191922e-002f, 7.391957e-002f, -5.157650e-001f, 0.000000e+000f, -6.622175e-002f, 7.813309e-002f, 0.000000e+000f, -4.384882e-001f,
  -8.651371e-002f, 1.571981e-001f, -4.383844e-002f, 1.478391e-001f, -6.017650e-001f, 0.000000e+000f, -4.982001e-002f, 6.137041e-002f, 0.000000e+000f, -4.384882e-001f,
  -8.651371e-002f, 1.720784e-001f, -6.575766e-002f, 2.217587e-001f, -6.877650e-001f, 0.000000e+000f, -3.725666e-002f, 4.846734e-002f, 0.000000e+000f, -4.384882e-001f,
  -8.651371e-002f, 2.018391e-001f, -1.095961e-001f, 3.695979e-001f, -8.597650e-001f, 0.000000e+000f, -2.762855e-002f, 3.851892e-002f, 0.000000e+000f, -4.384882e-001f,
  0.000000e+000f, 0.000000e+000f, 3.514500e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 0.000000e+000f, 8.678527e-002f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 3.405663e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 0.000000e+000f, 1.591040e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 3.133736e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 0.000000e+000f, 2.120763e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 2.802512e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, 0.000000e+000f, 2.485127e-001f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 0.000000e+000f, 2.485127e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.011280e-001f, 2.337380e-001f, 0.000000e+000f, -2.572971e-001f, 0.000000e+000f, 0.000000e+000f, 3.316393e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -8.473155e-002f, 2.197556e-001f, 0.000000e+000f, -2.672619e-001f, 0.000000e+000f, 0.000000e+000f, 2.976368e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -7.212122e-002f, 2.072781e-001f, 0.000000e+000f, -2.761253e-001f, 0.000000e+000f, 0.000000e+000f, 2.699944e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -6.463552e-002f, 1.957663e-001f, 0.000000e+000f, -2.886780e-001f, 0.000000e+000f, 0.000000e+000f, 2.476313e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -6.352580e-002f, 1.841785e-001f, 0.000000e+000f, -3.093252e-001f, 0.000000e+000f, 0.000000e+000f, 2.295471e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -6.626624e-002f, 1.727530e-001f, 0.000000e+000f, -3.340897e-001f, 0.000000e+000f, 0.000000e+000f, 2.149222e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -7.013477e-002f, 1.622340e-001f, 0.000000e+000f, -3.580100e-001f, 0.000000e+000f, 0.000000e+000f, 2.031172e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -7.604879e-002f, 1.521053e-001f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, 0.000000e+000f, 1.936433e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -8.492931e-002f, 1.417883e-001f, 0.000000e+000f, -4.135396e-001f, 0.000000e+000f, 0.000000e+000f, 1.861312e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -9.249451e-002f, 1.331236e-001f, 0.000000e+000f, -4.384882e-001f, 0.000000e+000f, 0.000000e+000f, 1.803045e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -9.424396e-002f, 1.283078e-001f, 0.000000e+000f, -4.485899e-001f, 0.000000e+000f, 0.000000e+000f, 1.759599e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -9.302706e-002f, 1.260927e-001f, 0.000000e+000f, -4.502020e-001f, 0.000000e+000f, 0.000000e+000f, 1.729525e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -9.290158e-002f, 1.244975e-001f, 0.000000e+000f, -4.524737e-001f, 0.000000e+000f, 0.000000e+000f, 1.711851e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -9.417136e-002f, 1.233264e-001f, 0.000000e+000f, -4.561628e-001f, 0.000000e+000f, 0.000000e+000f, 1.706020e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -9.620837e-002f, 1.228810e-001f, 0.000000e+000f, -4.598793e-001f, 0.000000e+000f, 0.000000e+000f, 1.711851e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -9.839162e-002f, 1.234938e-001f, 0.000000e+000f, -4.621952e-001f, 0.000000e+000f, 0.000000e+000f, 1.729525e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.001093e-001f, 1.255100e-001f, 0.000000e+000f, -4.616646e-001f, 0.000000e+000f, 0.000000e+000f, 1.759599e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.007806e-001f, 1.292598e-001f, 0.000000e+000f, -4.568831e-001f, 0.000000e+000f, 0.000000e+000f, 1.803045e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -9.989610e-002f, 1.350228e-001f, 0.000000e+000f, -4.465860e-001f, 0.000000e+000f, 0.000000e+000f, 1.861312e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -9.706998e-002f, 1.429870e-001f, 0.000000e+000f, -4.297650e-001f, 0.000000e+000f, 0.000000e+000f, 1.936433e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -9.706998e-002f, 1.429870e-001f, 0.000000e+000f, -4.297650e-001f, 0.000000e+000f, 0.000000e+000f, 1.239317e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -9.706998e-002f, 1.429870e-001f, 0.000000e+000f, -4.297650e-001f, 0.000000e+000f, 0.000000e+000f, 1.191651e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -9.706998e-002f, 1.429870e-001f, 0.000000e+000f, -4.297650e-001f, 0.000000e+000f, 0.000000e+000f, 1.147516e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -9.706998e-002f, 1.429870e-001f, 0.000000e+000f, -4.297650e-001f, 0.000000e+000f, 0.000000e+000f, 1.106533e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -9.706998e-002f, 1.429870e-001f, 0.000000e+000f, -4.297650e-001f, 0.000000e+000f, 0.000000e+000f, 1.068377e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -9.706998e-002f, 1.429870e-001f, 0.000000e+000f, -4.297650e-001f, 0.000000e+000f, 0.000000e+000f, 1.032764e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -9.706998e-002f, 1.429870e-001f, 0.000000e+000f, -4.297650e-001f, 0.000000e+000f, 0.000000e+000f, 9.994494e-002f, 0.000000e+000f, 0.000000e+000f,
  -9.706998e-002f, 1.596831e-001f, -2.459377e-002f, 7.391957e-002f, -5.157650e-001f, -7.049853e-002f, 8.240987e-002f, 0.000000e+000f, 0.000000e+000f, -4.384882e-001f,
  -9.706998e-002f, 1.763791e-001f, -4.918754e-002f, 1.478391e-001f, -6.017650e-001f, -5.660366e-002f, 6.815405e-002f, 0.000000e+000f, 0.000000e+000f, -4.384882e-001f,
  -9.706998e-002f, 1.930752e-001f, -7.378131e-002f, 2.217587e-001f, -6.877650e-001f, -4.533624e-002f, 5.654692e-002f, 0.000000e+000f, 0.000000e+000f, -4.384882e-001f,
  -9.706998e-002f, 2.264672e-001f, -1.229689e-001f, 3.695979e-001f, -8.597650e-001f, -3.619218e-002f, 4.708255e-002f, 0.000000e+000f, 0.000000e+000f, -4.384882e-001f,
  0.000000e+000f, -2.443128e-001f, 3.092673e-001f, 0.000000e+000f, -3.836635e-001f,
  0.000000e+000f, -6.032935e-002f, 7.636889e-002f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, -2.367469e-001f, 2.996899e-001f, 0.000000e+000f, -3.836635e-001f,
  0.000000e+000f, -1.106022e-001f, 1.400076e-001f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, -2.178437e-001f, 2.757611e-001f, 0.000000e+000f, -3.836635e-001f,
  0.000000e+000f, -1.474262e-001f, 1.866219e-001f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, -1.948185e-001f, 2.466142e-001f, 0.000000e+000f, -3.836635e-001f,
  0.000000e+000f, -1.727552e-001f, 2.186850e-001f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, -1.727552e-001f, 2.186850e-001f, 0.000000e+000f, -3.836635e-001f,
  7.029980e-002f, -2.514747e-001f, 2.056837e-001f, 1.974310e-001f, -6.409606e-001f, 0.000000e+000f, -2.305413e-001f, 2.918344e-001f, 0.000000e+000f, -3.836635e-001f,
  5.890169e-002f, -2.273262e-001f, 1.933795e-001f, 2.050773e-001f, -6.509254e-001f, 0.000000e+000f, -2.069042e-001f, 2.619130e-001f, 0.000000e+000f, -3.836635e-001f,
  5.013554e-002f, -2.075556e-001f, 1.823996e-001f, 2.118784e-001f, -6.597888e-001f, 0.000000e+000f, -1.876884e-001f, 2.375884e-001f, 0.000000e+000f, -3.836635e-001f,
  4.493181e-002f, -1.929659e-001f, 1.722695e-001f, 2.215105e-001f, -6.723415e-001f, 0.000000e+000f, -1.721425e-001f, 2.179095e-001f, 0.000000e+000f, -3.836635e-001f,
  4.416037e-002f, -1.839340e-001f, 1.620725e-001f, 2.373536e-001f, -6.929887e-001f, 0.000000e+000f, -1.595711e-001f, 2.019957e-001f, 0.000000e+000f, -3.836635e-001f,
  4.606541e-002f, -1.784030e-001f, 1.520183e-001f, 2.563561e-001f, -7.177532e-001f, 0.000000e+000f, -1.494046e-001f, 1.891262e-001f, 0.000000e+000f, -3.836635e-001f,
  4.875464e-002f, -1.744949e-001f, 1.427619e-001f, 2.747107e-001f, -7.416735e-001f, 0.000000e+000f, -1.411983e-001f, 1.787381e-001f, 0.000000e+000f, -3.836635e-001f,
  5.286582e-002f, -1.726580e-001f, 1.338489e-001f, 2.943954e-001f, -7.673270e-001f, 0.000000e+000f, -1.346124e-001f, 1.704013e-001f, 0.000000e+000f, -3.836635e-001f,
  5.903917e-002f, -1.733007e-001f, 1.247702e-001f, 3.173201e-001f, -7.972031e-001f, 0.000000e+000f, -1.293903e-001f, 1.637908e-001f, 0.000000e+000f, -3.836635e-001f,
  6.429817e-002f, -1.739347e-001f, 1.171455e-001f, 3.364639e-001f, -8.221517e-001f, 0.000000e+000f, -1.253398e-001f, 1.586635e-001f, 0.000000e+000f, -3.836635e-001f,
  6.551431e-002f, -1.721264e-001f, 1.129077e-001f, 3.442151e-001f, -8.322533e-001f, 0.000000e+000f, -1.223197e-001f, 1.548404e-001f, 0.000000e+000f, -3.836635e-001f,
  6.466837e-002f, -1.695157e-001f, 1.109585e-001f, 3.454522e-001f, -8.338655e-001f, 0.000000e+000f, -1.202291e-001f, 1.521939e-001f, 0.000000e+000f, -3.836635e-001f,
  6.458114e-002f, -1.682964e-001f, 1.095547e-001f, 3.471953e-001f, -8.361372e-001f, 0.000000e+000f, -1.190005e-001f, 1.506387e-001f, 0.000000e+000f, -3.836635e-001f,
  6.546384e-002f, -1.685996e-001f, 1.085242e-001f, 3.500260e-001f, -8.398263e-001f, 0.000000e+000f, -1.185951e-001f, 1.501256e-001f, 0.000000e+000f, -3.836635e-001f,
  6.687988e-002f, -1.700825e-001f, 1.081323e-001f, 3.528778e-001f, -8.435428e-001f, 0.000000e+000f, -1.190005e-001f, 1.506387e-001f, 0.000000e+000f, -3.836635e-001f,
  6.839758e-002f, -1.724297e-001f, 1.086715e-001f, 3.546549e-001f, -8.458587e-001f, 0.000000e+000f, -1.202291e-001f, 1.521939e-001f, 0.000000e+000f, -3.836635e-001f,
  6.959163e-002f, -1.753428e-001f, 1.104457e-001f, 3.542477e-001f, -8.453281e-001f, 0.000000e+000f, -1.223197e-001f, 1.548404e-001f, 0.000000e+000f, -3.836635e-001f,
  7.005831e-002f, -1.785402e-001f, 1.137454e-001f, 3.505787e-001f, -8.405466e-001f, 0.000000e+000f, -1.253398e-001f, 1.586635e-001f, 0.000000e+000f, -3.836635e-001f,
  6.944343e-002f, -1.817681e-001f, 1.188167e-001f, 3.426775e-001f, -8.302495e-001f, 0.000000e+000f, -1.293903e-001f, 1.637908e-001f, 0.000000e+000f, -3.836635e-001f,
  6.747883e-002f, -1.848176e-001f, 1.258251e-001f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -1.346124e-001f, 1.704013e-001f, 0.000000e+000f, -3.836635e-001f,
  6.747883e-002f, -1.848176e-001f, 1.258251e-001f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -8.615195e-002f, 1.090569e-001f, 0.000000e+000f, -3.836635e-001f,
  6.747883e-002f, -1.848176e-001f, 1.258251e-001f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -8.283841e-002f, 1.048624e-001f, 0.000000e+000f, -3.836635e-001f,
  6.747883e-002f, -1.848176e-001f, 1.258251e-001f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -7.977032e-002f, 1.009786e-001f, 0.000000e+000f, -3.836635e-001f,
  6.747883e-002f, -1.848176e-001f, 1.258251e-001f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -7.692138e-002f, 9.737219e-002f, 0.000000e+000f, -3.836635e-001f,
  6.747883e-002f, -1.848176e-001f, 1.258251e-001f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -7.426892e-002f, 9.401453e-002f, 0.000000e+000f, -3.836635e-001f,
  6.747883e-002f, -1.848176e-001f, 1.258251e-001f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -7.179329e-002f, 9.088071e-002f, 0.000000e+000f, -3.836635e-001f,
  6.747883e-002f, -1.848176e-001f, 1.258251e-001f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -6.947738e-002f, 8.794907e-002f, 0.000000e+000f, -3.836635e-001f,
  -6.116519e-002f, 1.006186e-001f, -1.549689e-002f, 7.391957e-002f, -5.157650e-001f, 0.000000e+000f, -6.622175e-002f, 7.813309e-002f, 0.000000e+000f, -4.384882e-001f,
  -6.116519e-002f, 1.111390e-001f, -3.099378e-002f, 1.478391e-001f, -6.017650e-001f, 0.000000e+000f, -4.982001e-002f, 6.137041e-002f, 0.000000e+000f, -4.384882e-001f,
  -6.116519e-002f, 1.216594e-001f, -4.649067e-002f, 2.217587e-001f, -6.877650e-001f, 0.000000e+000f, -3.725666e-002f, 4.846734e-002f, 0.000000e+000f, -4.384882e-001f,
  -6.116519e-002f, 1.427003e-001f, -7.748445e-002f, 3.695979e-001f, -8.597650e-001f, 0.000000e+000f, -2.762855e-002f, 3.851892e-002f, 0.000000e+000f, -4.384882e-001f,
  0.000000e+000f, -2.208918e-001f, 2.724870e-001f, 0.000000e+000f, -3.836635e-001f,
  0.000000e+000f, -5.454589e-002f, 6.728655e-002f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, -2.140512e-001f, 2.640486e-001f, 0.000000e+000f, -3.836635e-001f,
  0.000000e+000f, -9.999930e-002f, 1.233568e-001f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, -1.969602e-001f, 2.429655e-001f, 0.000000e+000f, -3.836635e-001f,
  0.000000e+000f, -1.332932e-001f, 1.644275e-001f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, -1.761422e-001f, 2.172850e-001f, 0.000000e+000f, -3.836635e-001f,
  0.000000e+000f, -1.561941e-001f, 1.926774e-001f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, -1.561941e-001f, 1.926774e-001f, 0.000000e+000f, -3.836635e-001f,
  6.356052e-002f, -2.253148e-001f, 1.812223e-001f, 1.974310e-001f, -6.409606e-001f, 0.000000e+000f, -2.084405e-001f, 2.571274e-001f, 0.000000e+000f, -3.836635e-001f,
  5.325509e-002f, -2.038141e-001f, 1.703814e-001f, 2.050773e-001f, -6.509254e-001f, 0.000000e+000f, -1.870693e-001f, 2.307644e-001f, 0.000000e+000f, -3.836635e-001f,
  4.532930e-002f, -1.861947e-001f, 1.607073e-001f, 2.118784e-001f, -6.597888e-001f, 0.000000e+000f, -1.696957e-001f, 2.093327e-001f, 0.000000e+000f, -3.836635e-001f,
  4.062443e-002f, -1.731555e-001f, 1.517820e-001f, 2.215105e-001f, -6.723415e-001f, 0.000000e+000f, -1.556401e-001f, 1.919941e-001f, 0.000000e+000f, -3.836635e-001f,
  3.992695e-002f, -1.650120e-001f, 1.427977e-001f, 2.373536e-001f, -6.929887e-001f, 0.000000e+000f, -1.442739e-001f, 1.779729e-001f, 0.000000e+000f, -3.836635e-001f,
  4.164936e-002f, -1.599556e-001f, 1.339392e-001f, 2.563561e-001f, -7.177532e-001f, 0.000000e+000f, -1.350819e-001f, 1.666340e-001f, 0.000000e+000f, -3.836635e-001f,
  4.408079e-002f, -1.563436e-001f, 1.257836e-001f, 2.747107e-001f, -7.416735e-001f, 0.000000e+000f, -1.276623e-001f, 1.574813e-001f, 0.000000e+000f, -3.836635e-001f,
  4.779784e-002f, -1.545628e-001f, 1.179306e-001f, 2.943954e-001f, -7.673270e-001f, 0.000000e+000f, -1.217078e-001f, 1.501360e-001f, 0.000000e+000f, -3.836635e-001f,
  5.337939e-002f, -1.549637e-001f, 1.099316e-001f, 3.173201e-001f, -7.972031e-001f, 0.000000e+000f, -1.169863e-001f, 1.443116e-001f, 0.000000e+000f, -3.836635e-001f,
  5.813424e-002f, -1.553833e-001f, 1.032137e-001f, 3.364639e-001f, -8.221517e-001f, 0.000000e+000f, -1.133242e-001f, 1.397941e-001f, 0.000000e+000f, -3.836635e-001f,
  5.923379e-002f, -1.537129e-001f, 9.947988e-002f, 3.442151e-001f, -8.322533e-001f, 0.000000e+000f, -1.105935e-001f, 1.364257e-001f, 0.000000e+000f, -3.836635e-001f,
  5.846895e-002f, -1.513772e-001f, 9.776248e-002f, 3.454522e-001f, -8.338655e-001f, 0.000000e+000f, -1.087033e-001f, 1.340939e-001f, 0.000000e+000f, -3.836635e-001f,
  5.839008e-002f, -1.502773e-001f, 9.652569e-002f, 3.471953e-001f, -8.361372e-001f, 0.000000e+000f, -1.075925e-001f, 1.327236e-001f, 0.000000e+000f, -3.836635e-001f,
  5.918816e-002f, -1.505257e-001f, 9.561771e-002f, 3.500260e-001f, -8.398263e-001f, 0.000000e+000f, -1.072260e-001f, 1.322716e-001f, 0.000000e+000f, -3.836635e-001f,
  6.046845e-002f, -1.518251e-001f, 9.527239e-002f, 3.528778e-001f, -8.435428e-001f, 0.000000e+000f, -1.075925e-001f, 1.327236e-001f, 0.000000e+000f, -3.836635e-001f,
  6.184066e-002f, -1.539030e-001f, 9.574751e-002f, 3.546549e-001f, -8.458587e-001f, 0.000000e+000f, -1.087033e-001f, 1.340939e-001f, 0.000000e+000f, -3.836635e-001f,
  6.292024e-002f, -1.565019e-001f, 9.731066e-002f, 3.542477e-001f, -8.453281e-001f, 0.000000e+000f, -1.105935e-001f, 1.364257e-001f, 0.000000e+000f, -3.836635e-001f,
  6.334218e-002f, -1.593792e-001f, 1.002180e-001f, 3.505787e-001f, -8.405466e-001f, 0.000000e+000f, -1.133242e-001f, 1.397941e-001f, 0.000000e+000f, -3.836635e-001f,
  6.278625e-002f, -1.623156e-001f, 1.046861e-001f, 3.426775e-001f, -8.302495e-001f, 0.000000e+000f, -1.169863e-001f, 1.443116e-001f, 0.000000e+000f, -3.836635e-001f,
  6.100999e-002f, -1.651301e-001f, 1.108610e-001f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -1.217078e-001f, 1.501360e-001f, 0.000000e+000f, -3.836635e-001f,
  6.100999e-002f, -1.651301e-001f, 1.108610e-001f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -7.789301e-002f, 9.608702e-002f, 0.000000e+000f, -3.836635e-001f,
  6.100999e-002f, -1.651301e-001f, 1.108610e-001f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -7.489712e-002f, 9.239136e-002f, 0.000000e+000f, -3.836635e-001f,
  6.100999e-002f, -1.651301e-001f, 1.108610e-001f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -7.212315e-002f, 8.896946e-002f, 0.000000e+000f, -3.836635e-001f,
  6.100999e-002f, -1.651301e-001f, 1.108610e-001f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -6.954733e-002f, 8.579198e-002f, 0.000000e+000f, -3.836635e-001f,
  6.100999e-002f, -1.651301e-001f, 1.108610e-001f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -6.714914e-002f, 8.283364e-002f, 0.000000e+000f, -3.836635e-001f,
  6.100999e-002f, -1.651301e-001f, 1.108610e-001f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -6.491084e-002f, 8.007252e-002f, 0.000000e+000f, -3.836635e-001f,
  6.100999e-002f, -1.651301e-001f, 1.108610e-001f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -6.281694e-002f, 7.748953e-002f, 0.000000e+000f, -3.836635e-001f,
  -5.451354e-002f, 8.967643e-002f, -1.381162e-002f, 7.391957e-002f, -5.157650e-001f, 0.000000e+000f, -6.622175e-002f, 7.813309e-002f, 0.000000e+000f, -4.384882e-001f,
  -5.451354e-002f, 9.905276e-002f, -2.762323e-002f, 1.478391e-001f, -6.017650e-001f, 0.000000e+000f, -4.982001e-002f, 6.137041e-002f, 0.000000e+000f, -4.384882e-001f,
  -5.451354e-002f, 1.084291e-001f, -4.143485e-002f, 2.217587e-001f, -6.877650e-001f, 0.000000e+000f, -3.725666e-002f, 4.846734e-002f, 0.000000e+000f, -4.384882e-001f,
  -5.451354e-002f, 1.271817e-001f, -6.905809e-002f, 3.695979e-001f, -8.597650e-001f, 0.000000e+000f, -2.762855e-002f, 3.851892e-002f, 0.000000e+000f, -4.384882e-001f,
  0.000000e+000f, -2.098976e-001f, 2.558819e-001f, 0.000000e+000f, -3.836635e-001f,
  0.000000e+000f, -6.134796e-002f, 7.478805e-002f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, -2.007323e-001f, 2.447086e-001f, 0.000000e+000f, -3.836635e-001f,
  0.000000e+000f, -1.090306e-001f, 1.329170e-001f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, -1.793582e-001f, 2.186519e-001f, 0.000000e+000f, -3.836635e-001f,
  0.000000e+000f, -1.407155e-001f, 1.715434e-001f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, -1.557439e-001f, 1.898643e-001f, 0.000000e+000f, -3.836635e-001f,
  6.268108e-002f, -2.177597e-001f, 1.723126e-001f, 1.957945e-001f, -6.388278e-001f, 0.000000e+000f, -2.026323e-001f, 2.470249e-001f, 0.000000e+000f, -3.836635e-001f,
  5.060450e-002f, -1.929363e-001f, 1.599986e-001f, 2.050773e-001f, -6.509254e-001f, 0.000000e+000f, -1.777586e-001f, 2.167019e-001f, 0.000000e+000f, -3.836635e-001f,
  4.189430e-002f, -1.734662e-001f, 1.492077e-001f, 2.134248e-001f, -6.618041e-001f, 0.000000e+000f, -1.583467e-001f, 1.930373e-001f, 0.000000e+000f, -3.836635e-001f,
  3.792745e-002f, -1.604028e-001f, 1.391777e-001f, 2.271608e-001f, -6.797053e-001f, 0.000000e+000f, -1.432968e-001f, 1.746902e-001f, 0.000000e+000f, -3.836635e-001f,
  3.878153e-002f, -1.531344e-001f, 1.290476e-001f, 2.486982e-001f, -7.077733e-001f, 0.000000e+000f, -1.316312e-001f, 1.604689e-001f, 0.000000e+000f, -3.836635e-001f,
  4.136448e-002f, -1.485372e-001f, 1.196047e-001f, 2.710512e-001f, -7.369043e-001f, 0.000000e+000f, -1.225989e-001f, 1.494578e-001f, 0.000000e+000f, -3.836635e-001f,
  4.541887e-002f, -1.462115e-001f, 1.107440e-001f, 2.943954e-001f, -7.673270e-001f, 0.000000e+000f, -1.156502e-001f, 1.409868e-001f, 0.000000e+000f, -3.836635e-001f,
  5.180435e-002f, -1.466668e-001f, 1.018092e-001f, 3.217754e-001f, -8.030094e-001f, 0.000000e+000f, -1.103917e-001f, 1.345762e-001f, 0.000000e+000f, -3.836635e-001f,
  5.605764e-002f, -1.464210e-001f, 9.518846e-002f, 3.408815e-001f, -8.279089e-001f, 0.000000e+000f, -1.065453e-001f, 1.298872e-001f, 0.000000e+000f, -3.836635e-001f,
  5.587200e-002f, -1.438530e-001f, 9.233384e-002f, 3.451903e-001f, -8.335243e-001f, 0.000000e+000f, -1.039199e-001f, 1.266867e-001f, 0.000000e+000f, -3.836635e-001f,
  5.542009e-002f, -1.420912e-001f, 9.085764e-002f, 3.467259e-001f, -8.355255e-001f, 0.000000e+000f, -1.023912e-001f, 1.248231e-001f, 0.000000e+000f, -3.836635e-001f,
  5.624227e-002f, -1.422185e-001f, 8.979087e-002f, 3.500260e-001f, -8.398263e-001f, 0.000000e+000f, -1.018892e-001f, 1.242111e-001f, 0.000000e+000f, -3.836635e-001f,
  5.772446e-002f, -1.437754e-001f, 8.948618e-002f, 3.533547e-001f, -8.441643e-001f, 0.000000e+000f, -1.023912e-001f, 1.248231e-001f, 0.000000e+000f, -3.836635e-001f,
  5.922651e-002f, -1.463261e-001f, 9.036334e-002f, 3.548159e-001f, -8.460685e-001f, 0.000000e+000f, -1.039199e-001f, 1.266867e-001f, 0.000000e+000f, -3.836635e-001f,
  6.012493e-002f, -1.494636e-001f, 9.285309e-002f, 3.525032e-001f, -8.430547e-001f, 0.000000e+000f, -1.065453e-001f, 1.298872e-001f, 0.000000e+000f, -3.836635e-001f,
  5.985366e-002f, -1.528155e-001f, 9.734248e-002f, 3.446370e-001f, -8.328032e-001f, 0.000000e+000f, -1.103917e-001f, 1.345762e-001f, 0.000000e+000f, -3.836635e-001f,
  5.797343e-002f, -1.560708e-001f, 1.041053e-001f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -1.156502e-001f, 1.409868e-001f, 0.000000e+000f, -3.836635e-001f,
  5.797343e-002f, -1.560708e-001f, 1.041053e-001f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -7.342872e-002f, 8.951546e-002f, 0.000000e+000f, -3.836635e-001f,
  5.797343e-002f, -1.560708e-001f, 1.041053e-001f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -7.009105e-002f, 8.544658e-002f, 0.000000e+000f, -3.836635e-001f,
  5.797343e-002f, -1.560708e-001f, 1.041053e-001f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -6.704362e-002f, 8.173151e-002f, 0.000000e+000f, -3.836635e-001f,
  5.797343e-002f, -1.560708e-001f, 1.041053e-001f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -6.425013e-002f, 7.832603e-002f, 0.000000e+000f, -3.836635e-001f,
  5.797343e-002f, -1.560708e-001f, 1.041053e-001f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -6.168013e-002f, 7.519299e-002f, 0.000000e+000f, -3.836635e-001f,
  5.797343e-002f, -1.560708e-001f, 1.041053e-001f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -5.930781e-002f, 7.230095e-002f, 0.000000e+000f, -3.836635e-001f,
  -5.146410e-002f, 8.466001e-002f, -1.303901e-002f, 7.391957e-002f, -5.157650e-001f, 0.000000e+000f, -6.540419e-002f, 7.716848e-002f, 0.000000e+000f, -4.384882e-001f,
  -5.146410e-002f, 9.351183e-002f, -2.607802e-002f, 1.478391e-001f, -6.017650e-001f, 0.000000e+000f, -4.893037e-002f, 6.027451e-002f, 0.000000e+000f, -4.384882e-001f,
  -5.146410e-002f, 1.200673e-001f, -6.519504e-002f, 3.695979e-001f, -8.597650e-001f, 0.000000e+000f, -3.640018e-002f, 4.735314e-002f, 0.000000e+000f, -4.384882e-001f,
  0.000000e+000f, -1.993704e-001f, 2.403539e-001f, 0.000000e+000f, -3.836635e-001f,
  0.000000e+000f, -5.827109e-002f, 7.024958e-002f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, -1.906647e-001f, 2.298587e-001f, 0.000000e+000f, -3.836635e-001f,
  0.000000e+000f, -1.095561e-001f, 1.320770e-001f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, -1.665713e-001f, 2.008125e-001f, 0.000000e+000f, -3.836635e-001f,
  0.000000e+000f, -1.374602e-001f, 1.657172e-001f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, -1.444065e-001f, 1.740914e-001f, 0.000000e+000f, -3.836635e-001f,
  5.531292e-002f, -1.976351e-001f, 1.578709e-001f, 1.990449e-001f, -6.430639e-001f, 0.000000e+000f, -1.839590e-001f, 2.217745e-001f, 0.000000e+000f, -3.836635e-001f,
  4.492990e-002f, -1.758965e-001f, 1.467541e-001f, 2.077605e-001f, -6.544222e-001f, 0.000000e+000f, -1.621718e-001f, 1.955087e-001f, 0.000000e+000f, -3.836635e-001f,
  3.722482e-002f, -1.572268e-001f, 1.354450e-001f, 2.191239e-001f, -6.692313e-001f, 0.000000e+000f, -1.428024e-001f, 1.721576e-001f, 0.000000e+000f, -3.836635e-001f,
  3.603688e-002f, -1.479255e-001f, 1.259582e-001f, 2.373536e-001f, -6.929887e-001f, 0.000000e+000f, -1.302173e-001f, 1.569854e-001f, 0.000000e+000f, -3.836635e-001f,
  3.798934e-002f, -1.425614e-001f, 1.166538e-001f, 2.600927e-001f, -7.226228e-001f, 0.000000e+000f, -1.204636e-001f, 1.452267e-001f, 0.000000e+000f, -3.836635e-001f,
  4.158540e-002f, -1.387299e-001f, 1.068082e-001f, 2.861172e-001f, -7.565387e-001f, 0.000000e+000f, -1.118557e-001f, 1.348493e-001f, 0.000000e+000f, -3.836635e-001f,
  4.712325e-002f, -1.383887e-001f, 9.834820e-002f, 3.127202e-001f, -7.912084e-001f, 0.000000e+000f, -1.063598e-001f, 1.282237e-001f, 0.000000e+000f, -3.836635e-001f,
  5.293526e-002f, -1.386097e-001f, 9.016759e-002f, 3.389341e-001f, -8.253710e-001f, 0.000000e+000f, -1.017259e-001f, 1.226372e-001f, 0.000000e+000f, -3.836635e-001f,
  5.323073e-002f, -1.363551e-001f, 8.702004e-002f, 3.450127e-001f, -8.332928e-001f, 0.000000e+000f, -9.904866e-002f, 1.194096e-001f, 0.000000e+000f, -3.836635e-001f,
  5.264053e-002f, -1.342533e-001f, 8.534400e-002f, 3.467259e-001f, -8.355255e-001f, 0.000000e+000f, -9.725588e-002f, 1.172483e-001f, 0.000000e+000f, -3.836635e-001f,
  5.342148e-002f, -1.343636e-001f, 8.434197e-002f, 3.500260e-001f, -8.398263e-001f, 0.000000e+000f, -9.677904e-002f, 1.166734e-001f, 0.000000e+000f, -3.836635e-001f,
  5.482933e-002f, -1.358234e-001f, 8.405577e-002f, 3.533547e-001f, -8.441643e-001f, 0.000000e+000f, -9.725588e-002f, 1.172483e-001f, 0.000000e+000f, -3.836635e-001f,
  5.645358e-002f, -1.386923e-001f, 8.515364e-002f, 3.547431e-001f, -8.459737e-001f, 0.000000e+000f, -9.904866e-002f, 1.194096e-001f, 0.000000e+000f, -3.836635e-001f,
  5.715678e-002f, -1.417203e-001f, 8.778211e-002f, 3.516223e-001f, -8.419066e-001f, 0.000000e+000f, -1.017259e-001f, 1.226372e-001f, 0.000000e+000f, -3.836635e-001f,
  5.644189e-002f, -1.454415e-001f, 9.330721e-002f, 3.405168e-001f, -8.274337e-001f, 0.000000e+000f, -1.063598e-001f, 1.282237e-001f, 0.000000e+000f, -3.836635e-001f,
  5.506581e-002f, -1.474990e-001f, 9.778773e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -7.203271e-002f, 8.684010e-002f, 0.000000e+000f, -3.836635e-001f,
  5.506581e-002f, -1.474990e-001f, 9.778773e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -6.812396e-002f, 8.212785e-002f, 0.000000e+000f, -3.836635e-001f,
  5.506581e-002f, -1.474990e-001f, 9.778773e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -6.509622e-002f, 7.847772e-002f, 0.000000e+000f, -3.836635e-001f,
  5.506581e-002f, -1.474990e-001f, 9.778773e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -6.232617e-002f, 7.513824e-002f, 0.000000e+000f, -3.836635e-001f,
  5.506581e-002f, -1.474990e-001f, 9.778773e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -5.937831e-002f, 7.158441e-002f, 0.000000e+000f, -3.836635e-001f,
  5.506581e-002f, -1.474990e-001f, 9.778773e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -5.706487e-002f, 6.879541e-002f, 0.000000e+000f, -3.836635e-001f,
  -4.858524e-002f, 7.992420e-002f, -1.230962e-002f, 7.391957e-002f, -5.157650e-001f, 0.000000e+000f, -6.581043e-002f, 7.764779e-002f, 0.000000e+000f, -4.384882e-001f,
  -4.858524e-002f, 8.828086e-002f, -2.461923e-002f, 1.478391e-001f, -6.017650e-001f, 0.000000e+000f, -4.922337e-002f, 6.063543e-002f, 0.000000e+000f, -4.384882e-001f,
  -4.858524e-002f, 1.133508e-001f, -6.154809e-002f, 3.695979e-001f, -8.597650e-001f, 0.000000e+000f, -3.640018e-002f, 4.735314e-002f, 0.000000e+000f, -4.384882e-001f,
  0.000000e+000f, -1.942787e-001f, 2.329697e-001f, 0.000000e+000f, -3.836635e-001f,
  0.000000e+000f, -7.322474e-002f, 8.780759e-002f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, -1.799510e-001f, 2.157886e-001f, 0.000000e+000f, -3.836635e-001f,
  0.000000e+000f, -1.219093e-001f, 1.461877e-001f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, -1.512691e-001f, 1.813947e-001f, 0.000000e+000f, -3.836635e-001f,
  5.801685e-002f, -2.003996e-001f, 1.568833e-001f, 1.957945e-001f, -6.388278e-001f, 0.000000e+000f, -1.875540e-001f, 2.249057e-001f, 0.000000e+000f, -3.836635e-001f,
  4.378245e-002f, -1.711235e-001f, 1.422455e-001f, 2.077605e-001f, -6.544222e-001f, 0.000000e+000f, -1.580302e-001f, 1.895022e-001f, 0.000000e+000f, -3.836635e-001f,
  3.573000e-002f, -1.510637e-001f, 1.297699e-001f, 2.215105e-001f, -6.723415e-001f, 0.000000e+000f, -1.368886e-001f, 1.641502e-001f, 0.000000e+000f, -3.836635e-001f,
  3.589571e-002f, -1.410240e-001f, 1.174924e-001f, 2.486982e-001f, -7.077733e-001f, 0.000000e+000f, -1.218363e-001f, 1.461002e-001f, 0.000000e+000f, -3.836635e-001f,
  3.929789e-002f, -1.356867e-001f, 1.061999e-001f, 2.784212e-001f, -7.465091e-001f, 0.000000e+000f, -1.111384e-001f, 1.332719e-001f, 0.000000e+000f, -3.836635e-001f,
  4.591979e-002f, -1.345599e-001f, 9.532671e-002f, 3.127202e-001f, -7.912084e-001f, 0.000000e+000f, -1.036435e-001f, 1.242844e-001f, 0.000000e+000f, -3.836635e-001f,
  5.188627e-002f, -1.344915e-001f, 8.666507e-002f, 3.408815e-001f, -8.279089e-001f, 0.000000e+000f, -9.861703e-002f, 1.182568e-001f, 0.000000e+000f, -3.836635e-001f,
  5.142461e-002f, -1.313689e-001f, 8.358452e-002f, 3.454522e-001f, -8.338655e-001f, 0.000000e+000f, -9.560675e-002f, 1.146470e-001f, 0.000000e+000f, -3.836635e-001f,
  5.170620e-002f, -1.303980e-001f, 8.201534e-002f, 3.488309e-001f, -8.382687e-001f, 0.000000e+000f, -9.435889e-002f, 1.131506e-001f, 0.000000e+000f, -3.836635e-001f,
  5.342906e-002f, -1.320121e-001f, 8.147338e-002f, 3.533547e-001f, -8.441643e-001f, 0.000000e+000f, -9.477210e-002f, 1.136461e-001f, 0.000000e+000f, -3.836635e-001f,
  5.518611e-002f, -1.352634e-001f, 8.284568e-002f, 3.545566e-001f, -8.457306e-001f, 0.000000e+000f, -9.687968e-002f, 1.161734e-001f, 0.000000e+000f, -3.836635e-001f,
  5.563214e-002f, -1.392987e-001f, 8.704321e-002f, 3.479748e-001f, -8.371531e-001f, 0.000000e+000f, -1.008554e-001f, 1.209410e-001f, 0.000000e+000f, -3.836635e-001f,
  5.365950e-002f, -1.433880e-001f, 9.478346e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -1.070445e-001f, 1.283626e-001f, 0.000000e+000f, -3.836635e-001f,
  5.365950e-002f, -1.433880e-001f, 9.478346e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -6.690279e-002f, 8.022660e-002f, 0.000000e+000f, -3.836635e-001f,
  5.365950e-002f, -1.433880e-001f, 9.478346e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -6.296733e-002f, 7.550739e-002f, 0.000000e+000f, -3.836635e-001f,
  5.365950e-002f, -1.433880e-001f, 9.478346e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -5.946915e-002f, 7.131253e-002f, 0.000000e+000f, -3.836635e-001f,
  5.365950e-002f, -1.433880e-001f, 9.478346e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -5.633919e-002f, 6.755924e-002f, 0.000000e+000f, -3.836635e-001f,
  -4.720678e-002f, 7.765659e-002f, -1.196037e-002f, 7.391957e-002f, -5.157650e-001f, 0.000000e+000f, -6.622175e-002f, 7.813309e-002f, 0.000000e+000f, -4.384882e-001f,
  -4.720678e-002f, 1.101349e-001f, -5.980184e-002f, 3.695979e-001f, -8.597650e-001f, 0.000000e+000f, -4.893037e-002f, 6.027451e-002f, 0.000000e+000f, -4.384882e-001f,
  -4.720678e-002f, 9.389572e-002f, -3.588110e-002f, 2.217587e-001f, -6.877650e-001f, 0.000000e+000f, -3.598655e-002f, 4.681504e-002f, 0.000000e+000f, -4.384882e-001f,
  0.000000e+000f, -1.892999e-001f, 2.258266e-001f, 0.000000e+000f, -3.836635e-001f,
  0.000000e+000f, -8.569745e-002f, 1.022333e-001f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, -1.687910e-001f, 2.013603e-001f, 0.000000e+000f, -3.836635e-001f,
  0.000000e+000f, -1.338553e-001f, 1.596835e-001f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, -1.338553e-001f, 1.596835e-001f, 0.000000e+000f, -3.836635e-001f,
  4.563857e-002f, -1.728108e-001f, 1.412054e-001f, 2.050773e-001f, -6.509254e-001f, 0.000000e+000f, -1.603148e-001f, 1.912485e-001f, 0.000000e+000f, -3.836635e-001f,
  3.481434e-002f, -1.469767e-001f, 1.257910e-001f, 2.215105e-001f, -6.723415e-001f, 0.000000e+000f, -1.333806e-001f, 1.591172e-001f, 0.000000e+000f, -3.836635e-001f,
  3.569268e-002f, -1.356290e-001f, 1.110036e-001f, 2.563561e-001f, -7.177532e-001f, 0.000000e+000f, -1.157626e-001f, 1.380997e-001f, 0.000000e+000f, -3.836635e-001f,
  4.096182e-002f, -1.307934e-001f, 9.773625e-002f, 2.943954e-001f, -7.673270e-001f, 0.000000e+000f, -1.043012e-001f, 1.244268e-001f, 0.000000e+000f, -3.836635e-001f,
  4.981991e-002f, -1.311368e-001f, 8.553950e-002f, 3.364639e-001f, -8.221517e-001f, 0.000000e+000f, -9.711659e-002f, 1.158559e-001f, 0.000000e+000f, -3.836635e-001f,
  5.010675e-002f, -1.276919e-001f, 8.102172e-002f, 3.454522e-001f, -8.338655e-001f, 0.000000e+000f, -9.315663e-002f, 1.111318e-001f, 0.000000e+000f, -3.836635e-001f,
  5.072310e-002f, -1.269372e-001f, 7.924422e-002f, 3.500260e-001f, -8.398263e-001f, 0.000000e+000f, -9.189061e-002f, 1.096215e-001f, 0.000000e+000f, -3.836635e-001f,
  5.299624e-002f, -1.297391e-001f, 7.935179e-002f, 3.546549e-001f, -8.458587e-001f, 0.000000e+000f, -9.315663e-002f, 1.111318e-001f, 0.000000e+000f, -3.836635e-001f,
  5.428301e-002f, -1.343799e-001f, 8.305674e-002f, 3.505787e-001f, -8.405466e-001f, 0.000000e+000f, -9.711659e-002f, 1.158559e-001f, 0.000000e+000f, -3.836635e-001f,
  5.228437e-002f, -1.393894e-001f, 9.187729e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -1.043012e-001f, 1.244268e-001f, 0.000000e+000f, -3.836635e-001f,
  5.228437e-002f, -1.393894e-001f, 9.187729e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -6.418537e-002f, 7.657035e-002f, 0.000000e+000f, -3.836635e-001f,
  5.228437e-002f, -1.393894e-001f, 9.187729e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -5.960070e-002f, 7.110104e-002f, 0.000000e+000f, -3.836635e-001f,
  5.228437e-002f, -1.393894e-001f, 9.187729e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -5.562732e-002f, 6.636097e-002f, 0.000000e+000f, -3.836635e-001f,
  -4.586742e-002f, 7.545331e-002f, -1.162103e-002f, 7.391957e-002f, -5.157650e-001f, 0.000000e+000f, -6.622175e-002f, 7.813309e-002f, 0.000000e+000f, -4.384882e-001f,
  -4.586742e-002f, 1.070101e-001f, -5.810514e-002f, 3.695979e-001f, -8.597650e-001f, 0.000000e+000f, -4.835472e-002f, 5.956540e-002f, 0.000000e+000f, -4.384882e-001f,
  0.000000e+000f, -1.844326e-001f, 2.189159e-001f, 0.000000e+000f, -3.836635e-001f,
  0.000000e+000f, -1.112926e-001f, 1.321009e-001f, 0.000000e+000f, -3.836635e-001f, 0.000000e+000f, -1.470692e-001f, 1.745667e-001f, 0.000000e+000f, -3.836635e-001f,
  4.446510e-002f, -1.681012e-001f, 1.368843e-001f, 2.050773e-001f, -6.509254e-001f, 0.000000e+000f, -1.561927e-001f, 1.853960e-001f, 0.000000e+000f, -3.836635e-001f,
  3.333682e-002f, -1.362223e-001f, 1.147236e-001f, 2.373536e-001f, -6.929887e-001f, 0.000000e+000f, -1.204608e-001f, 1.429834e-001f, 0.000000e+000f, -3.836635e-001f,
  3.990859e-002f, -1.271915e-001f, 9.474538e-002f, 2.943954e-001f, -7.673270e-001f, 0.000000e+000f, -1.016194e-001f, 1.206192e-001f, 0.000000e+000f, -3.836635e-001f,
  4.945698e-002f, -1.260368e-001f, 7.992209e-002f, 3.442151e-001f, -8.322533e-001f, 0.000000e+000f, -9.233958e-002f, 1.096043e-001f, 0.000000e+000f, -3.836635e-001f,
  4.941888e-002f, -1.233775e-001f, 7.681923e-002f, 3.500260e-001f, -8.398263e-001f, 0.000000e+000f, -8.952788e-002f, 1.062669e-001f, 0.000000e+000f, -3.836635e-001f,
  5.253497e-002f, -1.282221e-001f, 7.817934e-002f, 3.542477e-001f, -8.453281e-001f, 0.000000e+000f, -9.233958e-002f, 1.096043e-001f, 0.000000e+000f, -3.836635e-001f,
  5.094001e-002f, -1.355005e-001f, 8.906570e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -1.016194e-001f, 1.206192e-001f, 0.000000e+000f, -3.836635e-001f,
  5.094001e-002f, -1.355005e-001f, 8.906570e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -6.021890e-002f, 7.147803e-002f, 0.000000e+000f, -3.836635e-001f,
  5.094001e-002f, -1.355005e-001f, 8.906570e-002f, 3.297702e-001f, -8.134284e-001f, 0.000000e+000f, -5.419701e-002f, 6.433022e-002f, 0.000000e+000f, -3.836635e-001f,
  -4.456607e-002f, 1.039740e-001f, -5.645658e-002f, 3.695979e-001f, -8.597650e-001f, 0.000000e+000f, -6.421503e-002f, 7.576542e-002f, 0.000000e+000f, -4.384882e-001f,
  -1.629829e-001f, 1.905202e-001f, 0.000000e+000f, 0.000000e+000f, -4.384882e-001f,
  -5.346199e-002f, 1.478519e-001f, -2.384890e-002f, 4.596905e-002f, -3.532619e-001f, -1.281724e-001f, 1.543269e-001f, 0.000000e+000f, 0.000000e+000f, -4.384882e-001f,
  -4.008207e-002f, 1.299970e-001f, -3.997582e-002f, 1.064079e-001f, -4.813252e-001f, -1.142020e-001f, 1.424417e-001f, 0.000000e+000f, 0.000000e+000f, -4.384882e-001f,
  -4.798354e-002f, 1.207314e-001f, -4.952151e-002f, 1.979704e-001f, -6.416635e-001f, -7.917040e-002f, 1.029931e-001f, 0.000000e+000f, 0.000000e+000f, -4.384882e-001f,
  -5.946392e-002f, 1.218679e-001f, -5.569824e-002f, 3.086298e-001f, -7.925899e-001f, -5.881381e-002f, 8.046102e-002f, 0.000000e+000f, 0.000000e+000f, -4.384882e-001f,
  -5.941811e-002f, 1.289133e-001f, -6.691979e-002f, 3.923000e-001f, -8.861628e-001f, -4.631443e-002f, 6.730250e-002f, 0.000000e+000f, 0.000000e+000f, -4.384882e-001f,
  // Total number of coefficients: 3485
  // Maximum number of elevation coefficients: 5


    // Lite coefficients
	// Headphones
	// 8000 Hz sample rate

	 // Coefficients
  // Generated by HRTFConv V5.90d on Wed Feb 10 10:58:10 1999
  0.000000e+000f, 2.852415e-002f, 1.260604e-001f, 0.000000e+000f, 0.000000e+000f,
  -8.407843e-003f, -2.727528e-002f, 4.367533e-002f, 0.000000e+000f, 1.857993e-001f, 2.013962e-002f, 1.134734e-001f, 1.081336e-001f, 0.000000e+000f, 2.662850e-001f,
  -1.313236e-002f, -4.367451e-002f, 6.347624e-002f, 0.000000e+000f, 2.767298e-002f, 4.056763e-003f, 3.442746e-002f, 7.291564e-002f, 0.000000e+000f, -1.468862e-001f,
  -1.781637e-002f, -5.990562e-002f, 8.322912e-002f, 0.000000e+000f, -1.295710e-001f, 3.893626e-004f, 1.672477e-002f, 6.630913e-002f, 0.000000e+000f, -2.355661e-001f,
  -2.058775e-002f, -6.948032e-002f, 9.504307e-002f, 0.000000e+000f, -2.231000e-001f, -2.653673e-003f, 2.242589e-003f, 6.174076e-002f, 0.000000e+000f, -3.055980e-001f,
  -2.238957e-002f, -7.571612e-002f, 1.026764e-001f, 0.000000e+000f, -2.837232e-001f, -4.315000e-003f, -5.468725e-003f, 6.010910e-002f, 0.000000e+000f, -3.404793e-001f,
  -2.345825e-002f, -7.936779e-002f, 1.074109e-001f, 0.000000e+000f, -3.204845e-001f, -5.964793e-003f, -1.299945e-002f, 5.905026e-002f, 0.000000e+000f, -3.729359e-001f,
  -2.375413e-002f, -8.029483e-002f, 1.090928e-001f, 0.000000e+000f, -3.321049e-001f, -6.305722e-003f, -1.419690e-002f, 6.041703e-002f, 0.000000e+000f, -3.734799e-001f,
  -2.476236e-002f, -8.379800e-002f, 1.133028e-001f, 0.000000e+000f, -3.657894e-001f, -8.240732e-003f, -2.309744e-002f, 5.887506e-002f, 0.000000e+000f, -4.127140e-001f,
  -2.484070e-002f, -8.392386e-002f, 1.142768e-001f, 0.000000e+000f, -3.709210e-001f, -9.040503e-003f, -2.637187e-002f, 6.002457e-002f, 0.000000e+000f, -4.219846e-001f,
  -2.518113e-002f, -8.502682e-002f, 1.160514e-001f, 0.000000e+000f, -3.836672e-001f, -9.540046e-003f, -2.825597e-002f, 6.145466e-002f, 0.000000e+000f, -4.250072e-001f,
  -2.520072e-002f, -8.491157e-002f, 1.169433e-001f, 0.000000e+000f, -3.874705e-001f, -1.006183e-002f, -3.013552e-002f, 6.333925e-002f, 0.000000e+000f, -4.266451e-001f,
  -2.540514e-002f, -8.550487e-002f, 1.183139e-001f, 0.000000e+000f, -3.963095e-001f, -1.062792e-002f, -3.229425e-002f, 6.485542e-002f, 0.000000e+000f, -4.304763e-001f,
  -2.506830e-002f, -8.398470e-002f, 1.184532e-001f, 0.000000e+000f, -3.910648e-001f, -1.122126e-002f, -3.446443e-002f, 6.685310e-002f, 0.000000e+000f, -4.329038e-001f,
  -2.499813e-002f, -8.347928e-002f, 1.193163e-001f, 0.000000e+000f, -3.932140e-001f, -1.165799e-002f, -3.596045e-002f, 6.877147e-002f, 0.000000e+000f, -4.329494e-001f,
  -2.541739e-002f, -8.492692e-002f, 1.211073e-001f, 0.000000e+000f, -4.073781e-001f, -9.444476e-003f, -2.781904e-002f, 6.151905e-002f, 0.000000e+000f, -4.102171e-001f,
  -2.541739e-002f, -8.492692e-002f, 1.211073e-001f, 0.000000e+000f, -4.073781e-001f, -9.007196e-003f, -2.653102e-002f, 5.867071e-002f, 0.000000e+000f, -4.102171e-001f,
  -2.541739e-002f, -8.492692e-002f, 1.211073e-001f, 0.000000e+000f, -4.073781e-001f, -8.648535e-003f, -2.547457e-002f, 5.633448e-002f, 0.000000e+000f, -4.102171e-001f,
  -2.541739e-002f, -8.492692e-002f, 1.211073e-001f, 0.000000e+000f, -4.073781e-001f, -8.248108e-003f, -2.429510e-002f, 5.372619e-002f, 0.000000e+000f, -4.102171e-001f,
  -2.541739e-002f, -8.492692e-002f, 1.211073e-001f, 0.000000e+000f, -4.073781e-001f, -7.919673e-003f, -2.332768e-002f, 5.158685e-002f, 0.000000e+000f, -4.102171e-001f,
  -2.541739e-002f, -8.492692e-002f, 1.211073e-001f, 0.000000e+000f, -4.073781e-001f, -7.552992e-003f, -2.224761e-002f, 4.919838e-002f, 0.000000e+000f, -4.102171e-001f,
  -2.541739e-002f, -8.492692e-002f, 1.211073e-001f, 0.000000e+000f, -4.073781e-001f, -7.252237e-003f, -2.136172e-002f, 4.723933e-002f, 0.000000e+000f, -4.102171e-001f,
  -2.541739e-002f, -8.492692e-002f, 1.211073e-001f, 0.000000e+000f, -4.073781e-001f, -6.963457e-003f, -2.051111e-002f, 4.535829e-002f, 0.000000e+000f, -4.102171e-001f,
  -2.541739e-002f, -8.492692e-002f, 1.211073e-001f, 0.000000e+000f, -4.073781e-001f, -6.641049e-003f, -1.956145e-002f, 4.325820e-002f, 0.000000e+000f, -4.102171e-001f,
  -2.541739e-002f, -8.492692e-002f, 1.211073e-001f, 0.000000e+000f, -4.073781e-001f, -6.551705e-003f, -1.929828e-002f, 4.267623e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.377477e-001f, 1.655914e-001f, -1.841533e-002f, 5.051488e-002f, -4.693781e-001f, 0.000000e+000f, -3.550649e-002f, 5.233274e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.377477e-001f, 1.826722e-001f, -3.683066e-002f, 1.010298e-001f, -5.313781e-001f, 0.000000e+000f, -3.550649e-002f, 5.233274e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.377477e-001f, 1.997529e-001f, -5.524599e-002f, 1.515446e-001f, -5.933781e-001f, 0.000000e+000f, -3.550649e-002f, 5.233274e-002f, 0.000000e+000f, -4.102171e-001f,
  0.000000e+000f, 2.532792e-002f, 1.481188e-001f, 0.000000e+000f, 0.000000e+000f,
  -7.465717e-003f, -3.488463e-002f, 5.131776e-002f, 0.000000e+000f, 1.857993e-001f, 1.788291e-002f, 1.263061e-001f, 1.270551e-001f, 0.000000e+000f, 2.662850e-001f,
  -1.059557e-002f, -5.022313e-002f, 6.865718e-002f, 0.000000e+000f, 6.788703e-002f, 4.317418e-003f, 4.021512e-002f, 8.752577e-002f, 0.000000e+000f, -1.269254e-001f,
  -1.526691e-002f, -7.308683e-002f, 9.470734e-002f, 0.000000e+000f, -1.086638e-001f, 9.057413e-004f, 1.884345e-002f, 7.922131e-002f, 0.000000e+000f, -2.204009e-001f,
  -1.769312e-002f, -8.494247e-002f, 1.083507e-001f, 0.000000e+000f, -2.007363e-001f, -1.795398e-003f, 2.057345e-003f, 7.343337e-002f, 0.000000e+000f, -2.918052e-001f,
  -1.944785e-002f, -9.352059e-002f, 1.181966e-001f, 0.000000e+000f, -2.672556e-001f, -3.302175e-003f, -7.112099e-003f, 7.134124e-002f, 0.000000e+000f, -3.278768e-001f,
  -2.049697e-002f, -9.862728e-002f, 1.242118e-001f, 0.000000e+000f, -3.074513e-001f, -4.843658e-003f, -1.645650e-002f, 6.941288e-002f, 0.000000e+000f, -3.640780e-001f,
  -2.094534e-002f, -1.007530e-001f, 1.271146e-001f, 0.000000e+000f, -3.257283e-001f, -5.389655e-003f, -1.949332e-002f, 7.032633e-002f, 0.000000e+000f, -3.716191e-001f,
  -2.159328e-002f, -1.038892e-001f, 1.309332e-001f, 0.000000e+000f, -3.508961e-001f, -6.464191e-003f, -2.582784e-002f, 7.003051e-002f, 0.000000e+000f, -3.933860e-001f,
  -2.199639e-002f, -1.058057e-001f, 1.335115e-001f, 0.000000e+000f, -3.672242e-001f, -7.669067e-003f, -3.294439e-002f, 6.961892e-002f, 0.000000e+000f, -4.180574e-001f,
  -2.216473e-002f, -1.065354e-001f, 1.350017e-001f, 0.000000e+000f, -3.754106e-001f, -8.213295e-003f, -3.589314e-002f, 7.098684e-002f, 0.000000e+000f, -4.240608e-001f,
  -2.237633e-002f, -1.074833e-001f, 1.366950e-001f, 0.000000e+000f, -3.851061e-001f, -8.574093e-003f, -3.767703e-002f, 7.289377e-002f, 0.000000e+000f, -4.247325e-001f,
  -2.242520e-002f, -1.075895e-001f, 1.377455e-001f, 0.000000e+000f, -3.895268e-001f, -9.036735e-003f, -4.007875e-002f, 7.467057e-002f, 0.000000e+000f, -4.278050e-001f,
  -2.252784e-002f, -1.079643e-001f, 1.390633e-001f, 0.000000e+000f, -3.958718e-001f, -9.483776e-003f, -4.236478e-002f, 7.659042e-002f, 0.000000e+000f, -4.301024e-001f,
  -2.225932e-002f, -1.063740e-001f, 1.391805e-001f, 0.000000e+000f, -3.910648e-001f, -9.963877e-003f, -4.483714e-002f, 7.855124e-002f, 0.000000e+000f, -4.329038e-001f,
  -2.219700e-002f, -1.058361e-001f, 1.401946e-001f, 0.000000e+000f, -3.932140e-001f, -1.035167e-002f, -4.671953e-002f, 8.080529e-002f, 0.000000e+000f, -4.329494e-001f,
  -2.256929e-002f, -1.076534e-001f, 1.422990e-001f, 0.000000e+000f, -4.073781e-001f, -8.386192e-003f, -3.668247e-002f, 7.228382e-002f, 0.000000e+000f, -4.102171e-001f,
  -2.256929e-002f, -1.076534e-001f, 1.422990e-001f, 0.000000e+000f, -4.073781e-001f, -8.052259e-003f, -3.522180e-002f, 6.940552e-002f, 0.000000e+000f, -4.102171e-001f,
  -2.256929e-002f, -1.076534e-001f, 1.422990e-001f, 0.000000e+000f, -4.073781e-001f, -7.731623e-003f, -3.381929e-002f, 6.664184e-002f, 0.000000e+000f, -4.102171e-001f,
  -2.256929e-002f, -1.076534e-001f, 1.422990e-001f, 0.000000e+000f, -4.073781e-001f, -7.423755e-003f, -3.247263e-002f, 6.398820e-002f, 0.000000e+000f, -4.102171e-001f,
  -2.256929e-002f, -1.076534e-001f, 1.422990e-001f, 0.000000e+000f, -4.073781e-001f, -7.128145e-003f, -3.117959e-002f, 6.144023e-002f, 0.000000e+000f, -4.102171e-001f,
  -2.256929e-002f, -1.076534e-001f, 1.422990e-001f, 0.000000e+000f, -4.073781e-001f, -6.844307e-003f, -2.993804e-002f, 5.899372e-002f, 0.000000e+000f, -4.102171e-001f,
  -2.256929e-002f, -1.076534e-001f, 1.422990e-001f, 0.000000e+000f, -4.073781e-001f, -6.571771e-003f, -2.874592e-002f, 5.664463e-002f, 0.000000e+000f, -4.102171e-001f,
  -2.256929e-002f, -1.076534e-001f, 1.422990e-001f, 0.000000e+000f, -4.073781e-001f, -6.310087e-003f, -2.760128e-002f, 5.438907e-002f, 0.000000e+000f, -4.102171e-001f,
  -2.256929e-002f, -1.076534e-001f, 1.422990e-001f, 0.000000e+000f, -4.073781e-001f, -6.058824e-003f, -2.650221e-002f, 5.222333e-002f, 0.000000e+000f, -4.102171e-001f,
  -2.256929e-002f, -1.076534e-001f, 1.422990e-001f, 0.000000e+000f, -4.073781e-001f, -5.817565e-003f, -2.544691e-002f, 5.014383e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.545555e-001f, 1.857966e-001f, -2.066234e-002f, 5.051488e-002f, -4.693781e-001f, 0.000000e+000f, -3.983894e-002f, 5.871830e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.545555e-001f, 2.049615e-001f, -4.132468e-002f, 1.010298e-001f, -5.313781e-001f, 0.000000e+000f, -3.983894e-002f, 5.871830e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.545555e-001f, 2.241264e-001f, -6.198702e-002f, 1.515446e-001f, -5.933781e-001f, 0.000000e+000f, -3.983894e-002f, 5.871830e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.545555e-001f, 2.432913e-001f, -8.264936e-002f, 2.020595e-001f, -6.553781e-001f, 0.000000e+000f, -3.983894e-002f, 5.871830e-002f, 0.000000e+000f, -4.102171e-001f,
  0.000000e+000f, 2.001293e-002f, 1.745975e-001f, 0.000000e+000f, 0.000000e+000f,
  -5.899058e-003f, -4.453100e-002f, 6.049166e-002f, 0.000000e+000f, 1.857993e-001f, 1.953786e-002f, 1.904154e-001f, 1.741581e-001f, 0.000000e+000f, 4.671353e-001f,
  -5.899058e-003f, -4.453100e-002f, 6.049166e-002f, 0.000000e+000f, 1.857993e-001f, 5.211218e-003f, 5.813818e-002f, 1.105736e-001f, 0.000000e+000f, -6.208777e-002f,
  -1.050299e-002f, -8.032267e-002f, 9.865250e-002f, 0.000000e+000f, -3.402083e-002f, 2.016904e-003f, 2.882893e-002f, 9.799917e-002f, 0.000000e+000f, -1.755875e-001f,
  -1.288576e-002f, -9.883663e-002f, 1.184905e-001f, 0.000000e+000f, -1.480356e-001f, -1.446970e-004f, 9.101716e-003f, 9.041870e-002f, 0.000000e+000f, -2.497868e-001f,
  -1.420802e-002f, -1.090934e-001f, 1.296479e-001f, 0.000000e+000f, -2.117226e-001f, -1.652415e-003f, -4.560579e-003f, 8.598144e-002f, 0.000000e+000f, -2.991549e-001f,
  -1.536678e-002f, -1.180933e-001f, 1.393262e-001f, 0.000000e+000f, -2.672556e-001f, -2.609223e-003f, -1.312427e-002f, 8.409466e-002f, 0.000000e+000f, -3.278768e-001f,
  -1.608626e-002f, -1.236668e-001f, 1.454635e-001f, 0.000000e+000f, -3.020956e-001f, -3.651771e-003f, -2.245190e-002f, 8.206886e-002f, 0.000000e+000f, -3.590880e-001f,
  -1.650888e-002f, -1.269175e-001f, 1.492695e-001f, 0.000000e+000f, -3.231242e-001f, -4.237122e-003f, -2.756109e-002f, 8.204747e-002f, 0.000000e+000f, -3.734799e-001f,
  -1.666622e-002f, -1.280808e-001f, 1.510968e-001f, 0.000000e+000f, -3.321049e-001f, -4.424182e-003f, -2.900598e-002f, 8.367942e-002f, 0.000000e+000f, -3.734799e-001f,
  -1.731119e-002f, -1.331042e-001f, 1.563615e-001f, 0.000000e+000f, -3.626716e-001f, -5.606204e-003f, -3.954657e-002f, 8.168722e-002f, 0.000000e+000f, -4.080117e-001f,
  -1.737060e-002f, -1.334975e-001f, 1.574517e-001f, 0.000000e+000f, -3.671858e-001f, -6.120879e-003f, -4.395945e-002f, 8.236126e-002f, 0.000000e+000f, -4.187214e-001f,
  -1.751353e-002f, -1.345514e-001f, 1.591355e-001f, 0.000000e+000f, -3.754106e-001f, -6.489760e-003f, -4.702685e-002f, 8.367692e-002f, 0.000000e+000f, -4.240608e-001f,
  -1.768170e-002f, -1.358072e-001f, 1.609798e-001f, 0.000000e+000f, -3.847044e-001f, -6.734077e-003f, -4.894713e-002f, 8.551947e-002f, 0.000000e+000f, -4.248717e-001f,
  -1.765626e-002f, -1.355087e-001f, 1.616478e-001f, 0.000000e+000f, -3.859563e-001f, -6.984877e-003f, -5.091754e-002f, 8.741813e-002f, 0.000000e+000f, -4.256839e-001f,
  -1.782836e-002f, -1.367948e-001f, 1.635269e-001f, 0.000000e+000f, -3.954433e-001f, -7.364377e-003f, -5.404903e-002f, 8.898282e-002f, 0.000000e+000f, -4.305843e-001f,
  -1.772961e-002f, -1.358866e-001f, 1.639340e-001f, 0.000000e+000f, -3.941682e-001f, -7.580521e-003f, -5.568509e-002f, 9.116072e-002f, 0.000000e+000f, -4.297643e-001f,
  -1.756146e-002f, -1.343940e-001f, 1.641574e-001f, 0.000000e+000f, -3.906779e-001f, -7.952734e-003f, -5.872816e-002f, 9.294222e-002f, 0.000000e+000f, -4.338779e-001f,
  -1.753903e-002f, -1.340723e-001f, 1.652567e-001f, 0.000000e+000f, -3.932140e-001f, -8.179403e-003f, -6.044108e-002f, 9.525057e-002f, 0.000000e+000f, -4.329494e-001f,
  -1.783319e-002f, -1.363543e-001f, 1.677373e-001f, 0.000000e+000f, -4.073781e-001f, -7.738003e-003f, -5.610316e-002f, 9.949971e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.783319e-002f, -1.363543e-001f, 1.677373e-001f, 0.000000e+000f, -4.073781e-001f, -6.449281e-003f, -4.675948e-002f, 8.292857e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.783319e-002f, -1.363543e-001f, 1.677373e-001f, 0.000000e+000f, -4.073781e-001f, -6.234554e-003f, -4.520264e-002f, 8.016749e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.783319e-002f, -1.363543e-001f, 1.677373e-001f, 0.000000e+000f, -4.073781e-001f, -6.026977e-003f, -4.369763e-002f, 7.749834e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.783319e-002f, -1.363543e-001f, 1.677373e-001f, 0.000000e+000f, -4.073781e-001f, -5.826310e-003f, -4.224273e-002f, 7.491806e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.783319e-002f, -1.363543e-001f, 1.677373e-001f, 0.000000e+000f, -4.073781e-001f, -5.632325e-003f, -4.083627e-002f, 7.242369e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.783319e-002f, -1.363543e-001f, 1.677373e-001f, 0.000000e+000f, -4.073781e-001f, -5.444799e-003f, -3.947664e-002f, 7.001237e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.783319e-002f, -1.363543e-001f, 1.677373e-001f, 0.000000e+000f, -4.073781e-001f, -5.263516e-003f, -3.816228e-002f, 6.768133e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.783319e-002f, -1.363543e-001f, 1.677373e-001f, 0.000000e+000f, -4.073781e-001f, -5.088269e-003f, -3.689168e-002f, 6.542790e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.783319e-002f, -1.363543e-001f, 1.677373e-001f, 0.000000e+000f, -4.073781e-001f, -4.918857e-003f, -3.566339e-002f, 6.324950e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.783319e-002f, -1.363543e-001f, 1.677373e-001f, 0.000000e+000f, -4.073781e-001f, -4.755085e-003f, -3.447599e-002f, 6.114363e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.783319e-002f, -1.363543e-001f, 1.677373e-001f, 0.000000e+000f, -4.073781e-001f, -4.596767e-003f, -3.332812e-002f, 5.910788e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.734141e-001f, 2.084673e-001f, -2.318353e-002f, 5.051488e-002f, -4.693781e-001f, 0.000000e+000f, -4.470002e-002f, 6.588301e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.734141e-001f, 2.299706e-001f, -4.636705e-002f, 1.010298e-001f, -5.313781e-001f, 0.000000e+000f, -4.470002e-002f, 6.588301e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.734141e-001f, 2.514740e-001f, -6.955058e-002f, 1.515446e-001f, -5.933781e-001f, 0.000000e+000f, -4.470002e-002f, 6.588301e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.734141e-001f, 2.729773e-001f, -9.273410e-002f, 2.020595e-001f, -6.553781e-001f, 0.000000e+000f, -4.470002e-002f, 6.588301e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.734141e-001f, 2.944807e-001f, -1.159176e-001f, 2.525744e-001f, -7.173781e-001f, 0.000000e+000f, -4.470002e-002f, 6.588301e-002f, 0.000000e+000f, -4.102171e-001f,
  0.000000e+000f, 1.187303e-002f, 2.064834e-001f, 0.000000e+000f, 0.000000e+000f,
  -3.499722e-003f, -5.674996e-002f, 7.153899e-002f, 0.000000e+000f, 1.857993e-001f, 1.159119e-002f, 2.134250e-001f, 2.059639e-001f, 0.000000e+000f, 4.671353e-001f,
  -3.499722e-003f, -5.674996e-002f, 7.153899e-002f, 0.000000e+000f, 1.857993e-001f, 3.091648e-003f, 6.128600e-002f, 1.307672e-001f, 0.000000e+000f, -6.208777e-002f,
  -6.231088e-003f, -1.016560e-001f, 1.166690e-001f, 0.000000e+000f, -3.402083e-002f, 1.196565e-003f, 2.747358e-002f, 1.158963e-001f, 0.000000e+000f, -1.755875e-001f,
  -7.644711e-003f, -1.248913e-001f, 1.401299e-001f, 0.000000e+000f, -1.480356e-001f, -8.584410e-005f, 4.655768e-003f, 1.069315e-001f, 0.000000e+000f, -2.497868e-001f,
  -8.429165e-003f, -1.377749e-001f, 1.533249e-001f, 0.000000e+000f, -2.117226e-001f, -9.803248e-004f, -1.120186e-002f, 1.016839e-001f, 0.000000e+000f, -2.991549e-001f,
  -9.116617e-003f, -1.490723e-001f, 1.647707e-001f, 0.000000e+000f, -2.672556e-001f, -1.547968e-003f, -2.120203e-002f, 9.945250e-002f, 0.000000e+000f, -3.278768e-001f,
  -9.543462e-003f, -1.560781e-001f, 1.720289e-001f, 0.000000e+000f, -3.020956e-001f, -2.166478e-003f, -3.209628e-002f, 9.705673e-002f, 0.000000e+000f, -3.590880e-001f,
  -9.794188e-003f, -1.601797e-001f, 1.765299e-001f, 0.000000e+000f, -3.231242e-001f, -2.513749e-003f, -3.813709e-002f, 9.703144e-002f, 0.000000e+000f, -3.734799e-001f,
  -9.887534e-003f, -1.616788e-001f, 1.786909e-001f, 0.000000e+000f, -3.321049e-001f, -2.624725e-003f, -3.995610e-002f, 9.896142e-002f, 0.000000e+000f, -3.734799e-001f,
  -1.027018e-002f, -1.679753e-001f, 1.849171e-001f, 0.000000e+000f, -3.626716e-001f, -3.325981e-003f, -5.228709e-002f, 9.660540e-002f, 0.000000e+000f, -4.080117e-001f,
  -1.030542e-002f, -1.685141e-001f, 1.862064e-001f, 0.000000e+000f, -3.671858e-001f, -3.631321e-003f, -5.755141e-002f, 9.740253e-002f, 0.000000e+000f, -4.187214e-001f,
  -1.039021e-002f, -1.698742e-001f, 1.881977e-001f, 0.000000e+000f, -3.754106e-001f, -3.850166e-003f, -6.126787e-002f, 9.895846e-002f, 0.000000e+000f, -4.240608e-001f,
  -1.048999e-002f, -1.714840e-001f, 1.903789e-001f, 0.000000e+000f, -3.847044e-001f, -3.995112e-003f, -6.366332e-002f, 1.011375e-001f, 0.000000e+000f, -4.248717e-001f,
  -1.047489e-002f, -1.711761e-001f, 1.911689e-001f, 0.000000e+000f, -3.859563e-001f, -4.143904e-003f, -6.612184e-002f, 1.033829e-001f, 0.000000e+000f, -4.256839e-001f,
  -1.057699e-002f, -1.728239e-001f, 1.933910e-001f, 0.000000e+000f, -3.954433e-001f, -4.369048e-003f, -6.993092e-002f, 1.052334e-001f, 0.000000e+000f, -4.305843e-001f,
  -1.051841e-002f, -1.717774e-001f, 1.938725e-001f, 0.000000e+000f, -3.941682e-001f, -4.497280e-003f, -7.201289e-002f, 1.078090e-001f, 0.000000e+000f, -4.297643e-001f,
  -1.041865e-002f, -1.700273e-001f, 1.941367e-001f, 0.000000e+000f, -3.906779e-001f, -4.718102e-003f, -7.573205e-002f, 1.099158e-001f, 0.000000e+000f, -4.338779e-001f,
  -1.040534e-002f, -1.697211e-001f, 1.954368e-001f, 0.000000e+000f, -3.932140e-001f, -4.852577e-003f, -7.791374e-002f, 1.126458e-001f, 0.000000e+000f, -4.329494e-001f,
  -1.057986e-002f, -1.725874e-001f, 1.983704e-001f, 0.000000e+000f, -4.073781e-001f, -4.590709e-003f, -7.307064e-002f, 1.176709e-001f, 0.000000e+000f, -4.102171e-001f,
  -1.057986e-002f, -1.725874e-001f, 1.983704e-001f, 0.000000e+000f, -4.073781e-001f, -3.826151e-003f, -6.090112e-002f, 9.807345e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.057986e-002f, -1.725874e-001f, 1.983704e-001f, 0.000000e+000f, -4.073781e-001f, -3.698761e-003f, -5.887344e-002f, 9.480812e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.057986e-002f, -1.725874e-001f, 1.983704e-001f, 0.000000e+000f, -4.073781e-001f, -3.575612e-003f, -5.691327e-002f, 9.165152e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.057986e-002f, -1.725874e-001f, 1.983704e-001f, 0.000000e+000f, -4.073781e-001f, -3.456563e-003f, -5.501836e-002f, 8.860001e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.057986e-002f, -1.725874e-001f, 1.983704e-001f, 0.000000e+000f, -4.073781e-001f, -3.341478e-003f, -5.318654e-002f, 8.565011e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.057986e-002f, -1.725874e-001f, 1.983704e-001f, 0.000000e+000f, -4.073781e-001f, -3.230224e-003f, -5.141571e-002f, 8.279842e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.057986e-002f, -1.725874e-001f, 1.983704e-001f, 0.000000e+000f, -4.073781e-001f, -3.122675e-003f, -4.970384e-002f, 8.004167e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.057986e-002f, -1.725874e-001f, 1.983704e-001f, 0.000000e+000f, -4.073781e-001f, -3.018707e-003f, -4.804897e-002f, 7.737671e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.057986e-002f, -1.725874e-001f, 1.983704e-001f, 0.000000e+000f, -4.073781e-001f, -2.918200e-003f, -4.644920e-002f, 7.480048e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.057986e-002f, -1.725874e-001f, 1.983704e-001f, 0.000000e+000f, -4.073781e-001f, -2.821040e-003f, -4.490269e-002f, 7.231002e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.057986e-002f, -1.725874e-001f, 1.983704e-001f, 0.000000e+000f, -4.073781e-001f, -2.727114e-003f, -4.340767e-002f, 6.990248e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.945738e-001f, 2.339041e-001f, -2.601234e-002f, 5.051488e-002f, -4.693781e-001f, 0.000000e+000f, -5.015425e-002f, 7.392196e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.945738e-001f, 2.580313e-001f, -5.202469e-002f, 1.010298e-001f, -5.313781e-001f, 0.000000e+000f, -5.015425e-002f, 7.392196e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.945738e-001f, 2.821584e-001f, -7.803703e-002f, 1.515446e-001f, -5.933781e-001f, 0.000000e+000f, -5.015425e-002f, 7.392196e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.945738e-001f, 3.062856e-001f, -1.040494e-001f, 2.020595e-001f, -6.553781e-001f, 0.000000e+000f, -5.015425e-002f, 7.392196e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.945738e-001f, 3.304127e-001f, -1.300617e-001f, 2.525744e-001f, -7.173781e-001f, 0.000000e+000f, -5.015425e-002f, 7.392196e-002f, 0.000000e+000f, -4.102171e-001f,
  0.000000e+000f, 0.000000e+000f, 2.450000e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -7.221676e-002f, 8.488357e-002f, 0.000000e+000f, 1.857993e-001f, 0.000000e+000f, 2.391841e-001f, 2.443835e-001f, 0.000000e+000f, 4.671353e-001f,
  0.000000e+000f, -7.221676e-002f, 8.488357e-002f, 0.000000e+000f, 1.857993e-001f, 0.000000e+000f, 6.379616e-002f, 1.551600e-001f, 0.000000e+000f, -6.208777e-002f,
  0.000000e+000f, -1.285785e-001f, 1.384319e-001f, 0.000000e+000f, -3.402083e-002f, 0.000000e+000f, 2.469111e-002f, 1.375151e-001f, 0.000000e+000f, -1.755875e-001f,
  0.000000e+000f, -1.577486e-001f, 1.662692e-001f, 0.000000e+000f, -1.480356e-001f, 0.000000e+000f, -1.771393e-003f, 1.268780e-001f, 0.000000e+000f, -2.497868e-001f,
  0.000000e+000f, -1.739358e-001f, 1.819255e-001f, 0.000000e+000f, -2.117226e-001f, 0.000000e+000f, -2.022900e-002f, 1.206515e-001f, 0.000000e+000f, -2.991549e-001f,
  0.000000e+000f, -1.881214e-001f, 1.955064e-001f, 0.000000e+000f, -2.672556e-001f, 0.000000e+000f, -3.194233e-002f, 1.180040e-001f, 0.000000e+000f, -3.278768e-001f,
  0.000000e+000f, -1.969293e-001f, 2.041185e-001f, 0.000000e+000f, -3.020956e-001f, 0.000000e+000f, -4.470528e-002f, 1.151613e-001f, 0.000000e+000f, -3.590880e-001f,
  0.000000e+000f, -2.021031e-001f, 2.094590e-001f, 0.000000e+000f, -3.231242e-001f, 0.000000e+000f, -5.187120e-002f, 1.151313e-001f, 0.000000e+000f, -3.734799e-001f,
  0.000000e+000f, -2.040293e-001f, 2.120232e-001f, 0.000000e+000f, -3.321049e-001f, 0.000000e+000f, -5.416120e-002f, 1.174213e-001f, 0.000000e+000f, -3.734799e-001f,
  0.000000e+000f, -2.119251e-001f, 2.194107e-001f, 0.000000e+000f, -3.626716e-001f, 0.000000e+000f, -6.863161e-002f, 1.146258e-001f, 0.000000e+000f, -4.080117e-001f,
  0.000000e+000f, -2.126523e-001f, 2.209406e-001f, 0.000000e+000f, -3.671858e-001f, 0.000000e+000f, -7.493230e-002f, 1.155716e-001f, 0.000000e+000f, -4.187214e-001f,
  0.000000e+000f, -2.144020e-001f, 2.233033e-001f, 0.000000e+000f, -3.754106e-001f, 0.000000e+000f, -7.944818e-002f, 1.174178e-001f, 0.000000e+000f, -4.240608e-001f,
  0.000000e+000f, -2.164609e-001f, 2.258913e-001f, 0.000000e+000f, -3.847044e-001f, 0.000000e+000f, -8.243913e-002f, 1.200033e-001f, 0.000000e+000f, -4.248717e-001f,
  0.000000e+000f, -2.161494e-001f, 2.268287e-001f, 0.000000e+000f, -3.859563e-001f, 0.000000e+000f, -8.550945e-002f, 1.226675e-001f, 0.000000e+000f, -4.256839e-001f,
  0.000000e+000f, -2.182563e-001f, 2.294654e-001f, 0.000000e+000f, -3.954433e-001f, 0.000000e+000f, -9.015531e-002f, 1.248631e-001f, 0.000000e+000f, -4.305843e-001f,
  0.000000e+000f, -2.170474e-001f, 2.300367e-001f, 0.000000e+000f, -3.941682e-001f, 0.000000e+000f, -9.280137e-002f, 1.279192e-001f, 0.000000e+000f, -4.297643e-001f,
  0.000000e+000f, -2.149888e-001f, 2.303501e-001f, 0.000000e+000f, -3.906779e-001f, 0.000000e+000f, -9.735804e-002f, 1.304191e-001f, 0.000000e+000f, -4.338779e-001f,
  0.000000e+000f, -2.147143e-001f, 2.318927e-001f, 0.000000e+000f, -3.932140e-001f, 0.000000e+000f, -1.001329e-001f, 1.336582e-001f, 0.000000e+000f, -4.329494e-001f,
  0.000000e+000f, -2.183154e-001f, 2.353736e-001f, 0.000000e+000f, -4.073781e-001f, 0.000000e+000f, -9.472928e-002f, 1.396207e-001f, 0.000000e+000f, -4.102171e-001f,
  0.000000e+000f, -2.183154e-001f, 2.353736e-001f, 0.000000e+000f, -4.073781e-001f, 0.000000e+000f, -7.895263e-002f, 1.163677e-001f, 0.000000e+000f, -4.102171e-001f,
  0.000000e+000f, -2.183154e-001f, 2.353736e-001f, 0.000000e+000f, -4.073781e-001f, 0.000000e+000f, -7.632393e-002f, 1.124932e-001f, 0.000000e+000f, -4.102171e-001f,
  0.000000e+000f, -2.183154e-001f, 2.353736e-001f, 0.000000e+000f, -4.073781e-001f, 0.000000e+000f, -7.378275e-002f, 1.087478e-001f, 0.000000e+000f, -4.102171e-001f,
  0.000000e+000f, -2.183154e-001f, 2.353736e-001f, 0.000000e+000f, -4.073781e-001f, 0.000000e+000f, -7.132618e-002f, 1.051271e-001f, 0.000000e+000f, -4.102171e-001f,
  0.000000e+000f, -2.183154e-001f, 2.353736e-001f, 0.000000e+000f, -4.073781e-001f, 0.000000e+000f, -6.895140e-002f, 1.016269e-001f, 0.000000e+000f, -4.102171e-001f,
  0.000000e+000f, -2.183154e-001f, 2.353736e-001f, 0.000000e+000f, -4.073781e-001f, 0.000000e+000f, -6.665568e-002f, 9.824328e-002f, 0.000000e+000f, -4.102171e-001f,
  0.000000e+000f, -2.183154e-001f, 2.353736e-001f, 0.000000e+000f, -4.073781e-001f, 0.000000e+000f, -6.443640e-002f, 9.497231e-002f, 0.000000e+000f, -4.102171e-001f,
  0.000000e+000f, -2.183154e-001f, 2.353736e-001f, 0.000000e+000f, -4.073781e-001f, 0.000000e+000f, -6.229102e-002f, 9.181024e-002f, 0.000000e+000f, -4.102171e-001f,
  0.000000e+000f, -2.183154e-001f, 2.353736e-001f, 0.000000e+000f, -4.073781e-001f, 0.000000e+000f, -6.021706e-002f, 8.875344e-002f, 0.000000e+000f, -4.102171e-001f,
  0.000000e+000f, -2.183154e-001f, 2.353736e-001f, 0.000000e+000f, -4.073781e-001f, 0.000000e+000f, -5.821215e-002f, 8.579843e-002f, 0.000000e+000f, -4.102171e-001f,
  0.000000e+000f, -2.183154e-001f, 2.353736e-001f, 0.000000e+000f, -4.073781e-001f, 0.000000e+000f, -5.627400e-002f, 8.294180e-002f, 0.000000e+000f, -4.102171e-001f,
  -2.183154e-001f, 2.624447e-001f, -2.918633e-002f, 5.051488e-002f, -4.693781e-001f, 0.000000e+000f, -5.627400e-002f, 8.294180e-002f, 0.000000e+000f, -4.102171e-001f,
  -2.183154e-001f, 2.895158e-001f, -5.837266e-002f, 1.010298e-001f, -5.313781e-001f, 0.000000e+000f, -5.627400e-002f, 8.294180e-002f, 0.000000e+000f, -4.102171e-001f,
  -2.183154e-001f, 3.165870e-001f, -8.755899e-002f, 1.515446e-001f, -5.933781e-001f, 0.000000e+000f, -5.627400e-002f, 8.294180e-002f, 0.000000e+000f, -4.102171e-001f,
  -2.183154e-001f, 3.436581e-001f, -1.167453e-001f, 2.020595e-001f, -6.553781e-001f, 0.000000e+000f, -5.627400e-002f, 8.294180e-002f, 0.000000e+000f, -4.102171e-001f,
  -2.183154e-001f, 3.707292e-001f, -1.459316e-001f, 2.525744e-001f, -7.173781e-001f, 0.000000e+000f, -5.627400e-002f, 8.294180e-002f, 0.000000e+000f, -4.102171e-001f,
  0.000000e+000f, -1.187303e-002f, 2.064834e-001f, 0.000000e+000f, 0.000000e+000f,
  3.499722e-003f, -6.497711e-002f, 7.153899e-002f, 0.000000e+000f, 1.857993e-001f, -1.159119e-002f, 1.897387e-001f, 2.059639e-001f, 0.000000e+000f, 4.671353e-001f,
  3.499722e-003f, -6.497711e-002f, 7.153899e-002f, 0.000000e+000f, 1.857993e-001f, -3.091648e-003f, 4.624748e-002f, 1.307672e-001f, 0.000000e+000f, -6.208777e-002f,
  6.231088e-003f, -1.150732e-001f, 1.166690e-001f, 0.000000e+000f, -3.402083e-002f, -1.196565e-003f, 1.414524e-002f, 1.158963e-001f, 0.000000e+000f, -1.755875e-001f,
  7.644711e-003f, -1.410065e-001f, 1.401299e-001f, 0.000000e+000f, -1.480356e-001f, 8.584410e-005f, -7.641591e-003f, 1.069315e-001f, 0.000000e+000f, -2.497868e-001f,
  8.429165e-003f, -1.554076e-001f, 1.533249e-001f, 0.000000e+000f, -2.117226e-001f, 9.803248e-004f, -2.289573e-002f, 1.016839e-001f, 0.000000e+000f, -2.991549e-001f,
  9.116617e-003f, -1.680213e-001f, 1.647707e-001f, 0.000000e+000f, -2.672556e-001f, 1.547968e-003f, -3.263929e-002f, 9.945250e-002f, 0.000000e+000f, -3.278768e-001f,
  9.543462e-003f, -1.758618e-001f, 1.720289e-001f, 0.000000e+000f, -3.020956e-001f, 2.166478e-003f, -4.325802e-002f, 9.705673e-002f, 0.000000e+000f, -3.590880e-001f,
  9.794188e-003f, -1.804810e-001f, 1.765299e-001f, 0.000000e+000f, -3.231242e-001f, 2.513749e-003f, -4.929593e-002f, 9.703144e-002f, 0.000000e+000f, -3.734799e-001f,
  9.887534e-003f, -1.822287e-001f, 1.786909e-001f, 0.000000e+000f, -3.321049e-001f, 2.624725e-003f, -5.133689e-002f, 9.896142e-002f, 0.000000e+000f, -3.734799e-001f,
  1.027018e-002f, -1.892412e-001f, 1.849171e-001f, 0.000000e+000f, -3.626716e-001f, 3.325981e-003f, -6.339693e-002f, 9.660540e-002f, 0.000000e+000f, -4.080117e-001f,
  1.030542e-002f, -1.899282e-001f, 1.862064e-001f, 0.000000e+000f, -3.671858e-001f, 3.631321e-003f, -6.875292e-002f, 9.740253e-002f, 0.000000e+000f, -4.187214e-001f,
  1.039021e-002f, -1.915174e-001f, 1.881977e-001f, 0.000000e+000f, -3.754106e-001f, 3.850166e-003f, -7.264832e-002f, 9.895846e-002f, 0.000000e+000f, -4.240608e-001f,
  1.048999e-002f, -1.933780e-001f, 1.903789e-001f, 0.000000e+000f, -3.847044e-001f, 3.995112e-003f, -7.529436e-002f, 1.011375e-001f, 0.000000e+000f, -4.248717e-001f,
  1.047489e-002f, -1.931609e-001f, 1.911689e-001f, 0.000000e+000f, -3.859563e-001f, 4.143904e-003f, -7.801111e-002f, 1.033829e-001f, 0.000000e+000f, -4.256839e-001f,
  1.057699e-002f, -1.950643e-001f, 1.933910e-001f, 0.000000e+000f, -3.954433e-001f, 4.369048e-003f, -8.203299e-002f, 1.052334e-001f, 0.000000e+000f, -4.305843e-001f,
  1.051841e-002f, -1.940732e-001f, 1.938725e-001f, 0.000000e+000f, -3.941682e-001f, 4.497280e-003f, -8.441117e-002f, 1.078090e-001f, 0.000000e+000f, -4.297643e-001f,
  1.041865e-002f, -1.923534e-001f, 1.941367e-001f, 0.000000e+000f, -3.906779e-001f, 4.718102e-003f, -8.837262e-002f, 1.099158e-001f, 0.000000e+000f, -4.338779e-001f,
  1.040534e-002f, -1.921968e-001f, 1.954368e-001f, 0.000000e+000f, -3.932140e-001f, 4.852577e-003f, -9.086825e-002f, 1.126458e-001f, 0.000000e+000f, -4.329494e-001f,
  1.057986e-002f, -1.954005e-001f, 1.983704e-001f, 0.000000e+000f, -4.073781e-001f, 4.590709e-003f, -8.660306e-002f, 1.176709e-001f, 0.000000e+000f, -4.102171e-001f,
  1.057986e-002f, -1.954005e-001f, 1.983704e-001f, 0.000000e+000f, -4.073781e-001f, 3.826151e-003f, -7.217979e-002f, 9.807345e-002f, 0.000000e+000f, -4.102171e-001f,
  1.057986e-002f, -1.954005e-001f, 1.983704e-001f, 0.000000e+000f, -4.073781e-001f, 3.698761e-003f, -6.977658e-002f, 9.480812e-002f, 0.000000e+000f, -4.102171e-001f,
  1.057986e-002f, -1.954005e-001f, 1.983704e-001f, 0.000000e+000f, -4.073781e-001f, 3.575612e-003f, -6.745340e-002f, 9.165152e-002f, 0.000000e+000f, -4.102171e-001f,
  1.057986e-002f, -1.954005e-001f, 1.983704e-001f, 0.000000e+000f, -4.073781e-001f, 3.456563e-003f, -6.520756e-002f, 8.860001e-002f, 0.000000e+000f, -4.102171e-001f,
  1.057986e-002f, -1.954005e-001f, 1.983704e-001f, 0.000000e+000f, -4.073781e-001f, 3.341478e-003f, -6.303650e-002f, 8.565011e-002f, 0.000000e+000f, -4.102171e-001f,
  1.057986e-002f, -1.954005e-001f, 1.983704e-001f, 0.000000e+000f, -4.073781e-001f, 3.230224e-003f, -6.093772e-002f, 8.279842e-002f, 0.000000e+000f, -4.102171e-001f,
  1.057986e-002f, -1.954005e-001f, 1.983704e-001f, 0.000000e+000f, -4.073781e-001f, 3.122675e-003f, -5.890882e-002f, 8.004167e-002f, 0.000000e+000f, -4.102171e-001f,
  1.057986e-002f, -1.954005e-001f, 1.983704e-001f, 0.000000e+000f, -4.073781e-001f, 3.018707e-003f, -5.694747e-002f, 7.737671e-002f, 0.000000e+000f, -4.102171e-001f,
  1.057986e-002f, -1.954005e-001f, 1.983704e-001f, 0.000000e+000f, -4.073781e-001f, 2.918200e-003f, -5.505142e-002f, 7.480048e-002f, 0.000000e+000f, -4.102171e-001f,
  1.057986e-002f, -1.954005e-001f, 1.983704e-001f, 0.000000e+000f, -4.073781e-001f, 2.821040e-003f, -5.321850e-002f, 7.231002e-002f, 0.000000e+000f, -4.102171e-001f,
  1.057986e-002f, -1.954005e-001f, 1.983704e-001f, 0.000000e+000f, -4.073781e-001f, 2.727114e-003f, -5.144661e-002f, 6.990248e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.375637e-001f, 1.653702e-001f, -1.839073e-002f, 5.051488e-002f, -4.693781e-001f, 0.000000e+000f, -3.545906e-002f, 5.226282e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.375637e-001f, 1.824281e-001f, -3.678145e-002f, 1.010298e-001f, -5.313781e-001f, 0.000000e+000f, -3.545906e-002f, 5.226282e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.375637e-001f, 1.994860e-001f, -5.517218e-002f, 1.515446e-001f, -5.933781e-001f, 0.000000e+000f, -3.545906e-002f, 5.226282e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.375637e-001f, 2.165439e-001f, -7.356291e-002f, 2.020595e-001f, -6.553781e-001f, 0.000000e+000f, -3.545906e-002f, 5.226282e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.375637e-001f, 2.336018e-001f, -9.195364e-002f, 2.525744e-001f, -7.173781e-001f, 0.000000e+000f, -3.545906e-002f, 5.226282e-002f, 0.000000e+000f, -4.102171e-001f,
  0.000000e+000f, -2.001293e-002f, 1.745975e-001f, 0.000000e+000f, 0.000000e+000f,
  5.899058e-003f, -5.839851e-002f, 6.049166e-002f, 0.000000e+000f, 1.857993e-001f, -1.953786e-002f, 1.504903e-001f, 1.741581e-001f, 0.000000e+000f, 4.671353e-001f,
  5.899058e-003f, -5.839851e-002f, 6.049166e-002f, 0.000000e+000f, 1.857993e-001f, -5.211218e-003f, 3.278956e-002f, 1.105736e-001f, 0.000000e+000f, -6.208777e-002f,
  1.050299e-002f, -1.029384e-001f, 9.865250e-002f, 0.000000e+000f, -3.402083e-002f, -2.016904e-003f, 6.362955e-003f, 9.799917e-002f, 0.000000e+000f, -1.755875e-001f,
  1.288576e-002f, -1.260002e-001f, 1.184905e-001f, 0.000000e+000f, -1.480356e-001f, 1.446970e-004f, -1.162646e-002f, 9.041870e-002f, 0.000000e+000f, -2.497868e-001f,
  1.420802e-002f, -1.388148e-001f, 1.296479e-001f, 0.000000e+000f, -2.117226e-001f, 1.652415e-003f, -2.427153e-002f, 8.598144e-002f, 0.000000e+000f, -2.991549e-001f,
  1.536678e-002f, -1.500334e-001f, 1.393262e-001f, 0.000000e+000f, -2.672556e-001f, 2.609223e-003f, -3.240268e-002f, 8.409466e-002f, 0.000000e+000f, -3.278768e-001f,
  1.608626e-002f, -1.570138e-001f, 1.454635e-001f, 0.000000e+000f, -3.020956e-001f, 3.651771e-003f, -4.126590e-002f, 8.206886e-002f, 0.000000e+000f, -3.590880e-001f,
  1.650888e-002f, -1.611371e-001f, 1.492695e-001f, 0.000000e+000f, -3.231242e-001f, 4.237122e-003f, -4.637019e-002f, 8.204747e-002f, 0.000000e+000f, -3.734799e-001f,
  1.666622e-002f, -1.627192e-001f, 1.510968e-001f, 0.000000e+000f, -3.321049e-001f, 4.424182e-003f, -4.818920e-002f, 8.367942e-002f, 0.000000e+000f, -3.734799e-001f,
  1.731119e-002f, -1.689495e-001f, 1.563615e-001f, 0.000000e+000f, -3.626716e-001f, 5.606204e-003f, -5.827308e-002f, 8.168722e-002f, 0.000000e+000f, -4.080117e-001f,
  1.737060e-002f, -1.695928e-001f, 1.574517e-001f, 0.000000e+000f, -3.671858e-001f, 6.120879e-003f, -6.284048e-002f, 8.236126e-002f, 0.000000e+000f, -4.187214e-001f,
  1.751353e-002f, -1.710327e-001f, 1.591355e-001f, 0.000000e+000f, -3.754106e-001f, 6.489760e-003f, -6.620949e-002f, 8.367692e-002f, 0.000000e+000f, -4.240608e-001f,
  1.768170e-002f, -1.727113e-001f, 1.609798e-001f, 0.000000e+000f, -3.847044e-001f, 6.734077e-003f, -6.855217e-002f, 8.551947e-002f, 0.000000e+000f, -4.248717e-001f,
  1.765626e-002f, -1.725659e-001f, 1.616478e-001f, 0.000000e+000f, -3.859563e-001f, 6.984877e-003f, -7.095784e-002f, 8.741813e-002f, 0.000000e+000f, -4.256839e-001f,
  1.782836e-002f, -1.742827e-001f, 1.635269e-001f, 0.000000e+000f, -3.954433e-001f, 7.364377e-003f, -7.444803e-002f, 8.898282e-002f, 0.000000e+000f, -4.305843e-001f,
  1.772961e-002f, -1.734679e-001f, 1.639340e-001f, 0.000000e+000f, -3.941682e-001f, 7.580521e-003f, -7.658337e-002f, 9.116072e-002f, 0.000000e+000f, -4.297643e-001f,
  1.756146e-002f, -1.720265e-001f, 1.641574e-001f, 0.000000e+000f, -3.906779e-001f, 7.952734e-003f, -8.003484e-002f, 9.294222e-002f, 0.000000e+000f, -4.338779e-001f,
  1.753903e-002f, -1.719568e-001f, 1.652567e-001f, 0.000000e+000f, -3.932140e-001f, 8.179403e-003f, -8.227695e-002f, 9.525057e-002f, 0.000000e+000f, -4.329494e-001f,
  1.783319e-002f, -1.748075e-001f, 1.677373e-001f, 0.000000e+000f, -4.073781e-001f, 7.738003e-003f, -7.891312e-002f, 9.949971e-002f, 0.000000e+000f, -4.102171e-001f,
  1.783319e-002f, -1.748075e-001f, 1.677373e-001f, 0.000000e+000f, -4.073781e-001f, 6.449281e-003f, -6.577056e-002f, 8.292857e-002f, 0.000000e+000f, -4.102171e-001f,
  1.783319e-002f, -1.748075e-001f, 1.677373e-001f, 0.000000e+000f, -4.073781e-001f, 6.234554e-003f, -6.358076e-002f, 8.016749e-002f, 0.000000e+000f, -4.102171e-001f,
  1.783319e-002f, -1.748075e-001f, 1.677373e-001f, 0.000000e+000f, -4.073781e-001f, 6.026977e-003f, -6.146386e-002f, 7.749834e-002f, 0.000000e+000f, -4.102171e-001f,
  1.783319e-002f, -1.748075e-001f, 1.677373e-001f, 0.000000e+000f, -4.073781e-001f, 5.826310e-003f, -5.941744e-002f, 7.491806e-002f, 0.000000e+000f, -4.102171e-001f,
  1.783319e-002f, -1.748075e-001f, 1.677373e-001f, 0.000000e+000f, -4.073781e-001f, 5.632325e-003f, -5.743915e-002f, 7.242369e-002f, 0.000000e+000f, -4.102171e-001f,
  1.783319e-002f, -1.748075e-001f, 1.677373e-001f, 0.000000e+000f, -4.073781e-001f, 5.444799e-003f, -5.552674e-002f, 7.001237e-002f, 0.000000e+000f, -4.102171e-001f,
  1.783319e-002f, -1.748075e-001f, 1.677373e-001f, 0.000000e+000f, -4.073781e-001f, 5.263516e-003f, -5.367799e-002f, 6.768133e-002f, 0.000000e+000f, -4.102171e-001f,
  1.783319e-002f, -1.748075e-001f, 1.677373e-001f, 0.000000e+000f, -4.073781e-001f, 5.088269e-003f, -5.189080e-002f, 6.542790e-002f, 0.000000e+000f, -4.102171e-001f,
  1.783319e-002f, -1.748075e-001f, 1.677373e-001f, 0.000000e+000f, -4.073781e-001f, 4.918857e-003f, -5.016312e-002f, 6.324950e-002f, 0.000000e+000f, -4.102171e-001f,
  1.783319e-002f, -1.748075e-001f, 1.677373e-001f, 0.000000e+000f, -4.073781e-001f, 4.755085e-003f, -4.849295e-002f, 6.114363e-002f, 0.000000e+000f, -4.102171e-001f,
  1.783319e-002f, -1.748075e-001f, 1.677373e-001f, 0.000000e+000f, -4.073781e-001f, 4.596767e-003f, -4.687840e-002f, 5.910788e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.226038e-001f, 1.473864e-001f, -1.639075e-002f, 5.051488e-002f, -4.693781e-001f, 0.000000e+000f, -3.160292e-002f, 4.657929e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.226038e-001f, 1.625892e-001f, -3.278151e-002f, 1.010298e-001f, -5.313781e-001f, 0.000000e+000f, -3.160292e-002f, 4.657929e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.226038e-001f, 1.777921e-001f, -4.917226e-002f, 1.515446e-001f, -5.933781e-001f, 0.000000e+000f, -3.160292e-002f, 4.657929e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.226038e-001f, 1.929950e-001f, -6.556301e-002f, 2.020595e-001f, -6.553781e-001f, 0.000000e+000f, -3.160292e-002f, 4.657929e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.226038e-001f, 2.081978e-001f, -8.195376e-002f, 2.525744e-001f, -7.173781e-001f, 0.000000e+000f, -3.160292e-002f, 4.657929e-002f, 0.000000e+000f, -4.102171e-001f,
  0.000000e+000f, -2.297523e-002f, 1.607489e-001f, 0.000000e+000f, 0.000000e+000f,
  6.772231e-003f, -5.534278e-002f, 5.569362e-002f, 0.000000e+000f, 1.857993e-001f, -1.622178e-002f, 9.378959e-002f, 1.378890e-001f, 0.000000e+000f, 2.662850e-001f,
  9.611351e-003f, -7.789659e-002f, 7.451157e-002f, 0.000000e+000f, 6.788703e-002f, -3.916376e-003f, 1.382495e-002f, 9.498907e-002f, 0.000000e+000f, -1.269254e-001f,
  1.384877e-002f, -1.115849e-001f, 1.027830e-001f, 0.000000e+000f, -1.086638e-001f, -8.216075e-004f, -6.539823e-003f, 8.597649e-002f, 0.000000e+000f, -2.204009e-001f,
  1.604962e-002f, -1.290997e-001f, 1.175897e-001f, 0.000000e+000f, -2.007363e-001f, 1.628625e-003f, -2.278537e-002f, 7.969502e-002f, 0.000000e+000f, -2.918052e-001f,
  1.764136e-002f, -1.417637e-001f, 1.282752e-001f, 0.000000e+000f, -2.672556e-001f, 2.995438e-003f, -3.202392e-002f, 7.742449e-002f, 0.000000e+000f, -3.278768e-001f,
  1.859302e-002f, -1.493552e-001f, 1.348033e-001f, 0.000000e+000f, -3.074513e-001f, 4.393734e-003f, -4.150815e-002f, 7.533170e-002f, 0.000000e+000f, -3.640780e-001f,
  1.899974e-002f, -1.526511e-001f, 1.379536e-001f, 0.000000e+000f, -3.257283e-001f, 4.889014e-003f, -4.511512e-002f, 7.632304e-002f, 0.000000e+000f, -3.716191e-001f,
  1.958749e-002f, -1.573557e-001f, 1.420979e-001f, 0.000000e+000f, -3.508961e-001f, 5.863737e-003f, -5.188900e-002f, 7.600199e-002f, 0.000000e+000f, -3.933860e-001f,
  1.995316e-002f, -1.603140e-001f, 1.448960e-001f, 0.000000e+000f, -3.672242e-001f, 6.956692e-003f, -5.947214e-002f, 7.555531e-002f, 0.000000e+000f, -4.180574e-001f,
  2.010586e-002f, -1.616136e-001f, 1.465132e-001f, 0.000000e+000f, -3.754106e-001f, 7.450367e-003f, -6.313838e-002f, 7.703988e-002f, 0.000000e+000f, -4.240608e-001f,
  2.029781e-002f, -1.632192e-001f, 1.483510e-001f, 0.000000e+000f, -3.851061e-001f, 7.777651e-003f, -6.572405e-002f, 7.910940e-002f, 0.000000e+000f, -4.247325e-001f,
  2.034214e-002f, -1.636923e-001f, 1.494910e-001f, 0.000000e+000f, -3.895268e-001f, 8.197319e-003f, -6.893591e-002f, 8.103771e-002f, 0.000000e+000f, -4.278050e-001f,
  2.043524e-002f, -1.645481e-001f, 1.509212e-001f, 0.000000e+000f, -3.958718e-001f, 8.602835e-003f, -7.207094e-002f, 8.312127e-002f, 0.000000e+000f, -4.301024e-001f,
  2.019166e-002f, -1.628621e-001f, 1.510484e-001f, 0.000000e+000f, -3.910648e-001f, 9.038339e-003f, -7.542215e-002f, 8.524929e-002f, 0.000000e+000f, -4.329038e-001f,
  2.013514e-002f, -1.626239e-001f, 1.521489e-001f, 0.000000e+000f, -3.932140e-001f, 9.390110e-003f, -7.823299e-002f, 8.769554e-002f, 0.000000e+000f, -4.329494e-001f,
  2.047284e-002f, -1.653131e-001f, 1.544328e-001f, 0.000000e+000f, -4.073781e-001f, 7.607204e-003f, -6.443688e-002f, 7.844744e-002f, 0.000000e+000f, -4.102171e-001f,
  2.047284e-002f, -1.653131e-001f, 1.544328e-001f, 0.000000e+000f, -4.073781e-001f, 7.304290e-003f, -6.187105e-002f, 7.532371e-002f, 0.000000e+000f, -4.102171e-001f,
  2.047284e-002f, -1.653131e-001f, 1.544328e-001f, 0.000000e+000f, -4.073781e-001f, 7.013437e-003f, -5.940738e-002f, 7.232437e-002f, 0.000000e+000f, -4.102171e-001f,
  2.047284e-002f, -1.653131e-001f, 1.544328e-001f, 0.000000e+000f, -4.073781e-001f, 6.734167e-003f, -5.704182e-002f, 6.944446e-002f, 0.000000e+000f, -4.102171e-001f,
  2.047284e-002f, -1.653131e-001f, 1.544328e-001f, 0.000000e+000f, -4.073781e-001f, 6.466017e-003f, -5.477045e-002f, 6.667923e-002f, 0.000000e+000f, -4.102171e-001f,
  2.047284e-002f, -1.653131e-001f, 1.544328e-001f, 0.000000e+000f, -4.073781e-001f, 6.208544e-003f, -5.258952e-002f, 6.402410e-002f, 0.000000e+000f, -4.102171e-001f,
  2.047284e-002f, -1.653131e-001f, 1.544328e-001f, 0.000000e+000f, -4.073781e-001f, 5.961324e-003f, -5.049544e-002f, 6.147470e-002f, 0.000000e+000f, -4.102171e-001f,
  2.047284e-002f, -1.653131e-001f, 1.544328e-001f, 0.000000e+000f, -4.073781e-001f, 5.723947e-003f, -4.848474e-002f, 5.902682e-002f, 0.000000e+000f, -4.102171e-001f,
  2.047284e-002f, -1.653131e-001f, 1.544328e-001f, 0.000000e+000f, -4.073781e-001f, 5.496023e-003f, -4.655411e-002f, 5.667641e-002f, 0.000000e+000f, -4.102171e-001f,
  2.047284e-002f, -1.653131e-001f, 1.544328e-001f, 0.000000e+000f, -4.073781e-001f, 5.277175e-003f, -4.470036e-002f, 5.441959e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.157454e-001f, 1.391417e-001f, -1.547387e-002f, 5.051488e-002f, -4.693781e-001f, 0.000000e+000f, -2.983508e-002f, 4.397369e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.157454e-001f, 1.534941e-001f, -3.094774e-002f, 1.010298e-001f, -5.313781e-001f, 0.000000e+000f, -2.983508e-002f, 4.397369e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.157454e-001f, 1.678466e-001f, -4.642161e-002f, 1.515446e-001f, -5.933781e-001f, 0.000000e+000f, -2.983508e-002f, 4.397369e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.157454e-001f, 1.821990e-001f, -6.189547e-002f, 2.020595e-001f, -6.553781e-001f, 0.000000e+000f, -2.983508e-002f, 4.397369e-002f, 0.000000e+000f, -4.102171e-001f,
  0.000000e+000f, -2.532792e-002f, 1.481188e-001f, 0.000000e+000f, 0.000000e+000f,
  7.465717e-003f, -5.243504e-002f, 5.131776e-002f, 0.000000e+000f, 1.857993e-001f, -1.788291e-002f, 8.285395e-002f, 1.270551e-001f, 0.000000e+000f, 2.662850e-001f,
  1.166083e-002f, -8.094665e-002f, 7.458348e-002f, 0.000000e+000f, 2.767298e-002f, -3.602190e-003f, 6.415630e-003f, 8.567461e-002f, 0.000000e+000f, -1.468862e-001f,
  1.581999e-002f, -1.092383e-001f, 9.779278e-002f, 0.000000e+000f, -1.295710e-001f, -3.457332e-004f, -1.130090e-002f, 7.791208e-002f, 0.000000e+000f, -2.355661e-001f,
  1.828082e-002f, -1.260030e-001f, 1.116740e-001f, 0.000000e+000f, -2.231000e-001f, 2.356320e-003f, -2.618475e-002f, 7.254432e-002f, 0.000000e+000f, -3.055980e-001f,
  1.988074e-002f, -1.368931e-001f, 1.206429e-001f, 0.000000e+000f, -2.837232e-001f, 3.831490e-003f, -3.448378e-002f, 7.062716e-002f, 0.000000e+000f, -3.404793e-001f,
  2.082967e-002f, -1.433937e-001f, 1.262059e-001f, 0.000000e+000f, -3.204845e-001f, 5.296418e-003f, -4.283800e-002f, 6.938303e-002f, 0.000000e+000f, -3.729359e-001f,
  2.109240e-002f, -1.452681e-001f, 1.281821e-001f, 0.000000e+000f, -3.321049e-001f, 5.599145e-003f, -4.488297e-002f, 7.098897e-002f, 0.000000e+000f, -3.734799e-001f,
  2.198765e-002f, -1.513494e-001f, 1.331289e-001f, 0.000000e+000f, -3.657894e-001f, 7.317331e-003f, -5.462119e-002f, 6.917718e-002f, 0.000000e+000f, -4.127140e-001f,
  2.205722e-002f, -1.519520e-001f, 1.342732e-001f, 0.000000e+000f, -3.709210e-001f, 8.027485e-003f, -5.900516e-002f, 7.052783e-002f, 0.000000e+000f, -4.219846e-001f,
  2.235951e-002f, -1.540763e-001f, 1.363584e-001f, 0.000000e+000f, -3.836672e-001f, 8.471053e-003f, -6.188649e-002f, 7.220817e-002f, 0.000000e+000f, -4.250072e-001f,
  2.237690e-002f, -1.543572e-001f, 1.374064e-001f, 0.000000e+000f, -3.874705e-001f, 8.934367e-003f, -6.497462e-002f, 7.442253e-002f, 0.000000e+000f, -4.266451e-001f,
  2.255841e-002f, -1.556941e-001f, 1.390168e-001f, 0.000000e+000f, -3.963095e-001f, 9.437027e-003f, -6.821883e-002f, 7.620400e-002f, 0.000000e+000f, -4.304763e-001f,
  2.225932e-002f, -1.539730e-001f, 1.391805e-001f, 0.000000e+000f, -3.910648e-001f, 9.963877e-003f, -7.170124e-002f, 7.855124e-002f, 0.000000e+000f, -4.329038e-001f,
  2.219700e-002f, -1.537820e-001f, 1.401946e-001f, 0.000000e+000f, -3.932140e-001f, 1.035167e-002f, -7.435451e-002f, 8.080529e-002f, 0.000000e+000f, -4.329494e-001f,
  2.256929e-002f, -1.563189e-001f, 1.422990e-001f, 0.000000e+000f, -4.073781e-001f, 8.386192e-003f, -6.140316e-002f, 7.228382e-002f, 0.000000e+000f, -4.102171e-001f,
  2.256929e-002f, -1.563189e-001f, 1.422990e-001f, 0.000000e+000f, -4.073781e-001f, 7.997911e-003f, -5.856019e-002f, 6.893707e-002f, 0.000000e+000f, -4.102171e-001f,
  2.256929e-002f, -1.563189e-001f, 1.422990e-001f, 0.000000e+000f, -4.073781e-001f, 7.679439e-003f, -5.622836e-002f, 6.619204e-002f, 0.000000e+000f, -4.102171e-001f,
  2.256929e-002f, -1.563189e-001f, 1.422990e-001f, 0.000000e+000f, -4.073781e-001f, 7.323880e-003f, -5.362498e-002f, 6.312735e-002f, 0.000000e+000f, -4.102171e-001f,
  2.256929e-002f, -1.563189e-001f, 1.422990e-001f, 0.000000e+000f, -4.073781e-001f, 7.032248e-003f, -5.148967e-002f, 6.061366e-002f, 0.000000e+000f, -4.102171e-001f,
  2.256929e-002f, -1.563189e-001f, 1.422990e-001f, 0.000000e+000f, -4.073781e-001f, 6.706655e-003f, -4.910570e-002f, 5.780724e-002f, 0.000000e+000f, -4.102171e-001f,
  2.256929e-002f, -1.563189e-001f, 1.422990e-001f, 0.000000e+000f, -4.073781e-001f, 6.439600e-003f, -4.715034e-002f, 5.550539e-002f, 0.000000e+000f, -4.102171e-001f,
  2.256929e-002f, -1.563189e-001f, 1.422990e-001f, 0.000000e+000f, -4.073781e-001f, 6.183179e-003f, -4.527284e-002f, 5.329520e-002f, 0.000000e+000f, -4.102171e-001f,
  2.256929e-002f, -1.563189e-001f, 1.422990e-001f, 0.000000e+000f, -4.073781e-001f, 5.896898e-003f, -4.317671e-002f, 5.082763e-002f, 0.000000e+000f, -4.102171e-001f,
  2.256929e-002f, -1.563189e-001f, 1.422990e-001f, 0.000000e+000f, -4.073781e-001f, 5.817565e-003f, -4.259584e-002f, 5.014383e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.092707e-001f, 1.313582e-001f, -1.460827e-002f, 5.051488e-002f, -4.693781e-001f, 0.000000e+000f, -2.816613e-002f, 4.151384e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.092707e-001f, 1.449078e-001f, -2.921655e-002f, 1.010298e-001f, -5.313781e-001f, 0.000000e+000f, -2.816613e-002f, 4.151384e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.092707e-001f, 1.584574e-001f, -4.382482e-002f, 1.515446e-001f, -5.933781e-001f, 0.000000e+000f, -2.816613e-002f, 4.151384e-002f, 0.000000e+000f, -4.102171e-001f,
  0.000000e+000f, -2.630181e-002f, 1.422239e-001f, 0.000000e+000f, 0.000000e+000f,
  7.752782e-003f, -5.103485e-002f, 4.927538e-002f, 0.000000e+000f, 1.857993e-001f, -1.101302e-002f, 4.083673e-002f, 1.011982e-001f, 0.000000e+000f, 5.382674e-002f,
  1.453533e-002f, -9.415805e-002f, 8.413876e-002f, 0.000000e+000f, -6.067269e-002f, -2.107150e-003f, -3.147625e-003f, 7.863294e-002f, 0.000000e+000f, -1.898321e-001f,
  1.837344e-002f, -1.185923e-001f, 1.040385e-001f, 0.000000e+000f, -2.007363e-001f, 1.864433e-003f, -2.312144e-002f, 7.051082e-002f, 0.000000e+000f, -2.918052e-001f,
  2.064518e-002f, -1.330592e-001f, 1.158415e-001f, 0.000000e+000f, -2.837232e-001f, 3.978815e-003f, -3.405640e-002f, 6.781629e-002f, 0.000000e+000f, -3.404793e-001f,
  2.169664e-002f, -1.398083e-001f, 1.215921e-001f, 0.000000e+000f, -3.231242e-001f, 5.568598e-003f, -4.247136e-002f, 6.683435e-002f, 0.000000e+000f, -3.734799e-001f,
  2.242356e-002f, -1.445028e-001f, 1.257223e-001f, 0.000000e+000f, -3.508961e-001f, 6.712747e-003f, -4.873386e-002f, 6.724339e-002f, 0.000000e+000f, -3.933860e-001f,
  2.283632e-002f, -1.472307e-001f, 1.284042e-001f, 0.000000e+000f, -3.678255e-001f, 8.134525e-003f, -5.643476e-002f, 6.731268e-002f, 0.000000e+000f, -4.196348e-001f,
  2.321925e-002f, -1.497688e-001f, 1.309316e-001f, 0.000000e+000f, -3.836672e-001f, 8.796775e-003f, -6.038968e-002f, 6.933438e-002f, 0.000000e+000f, -4.250072e-001f,
  2.328748e-002f, -1.503840e-001f, 1.322634e-001f, 0.000000e+000f, -3.895268e-001f, 9.384208e-003f, -6.400341e-002f, 7.169878e-002f, 0.000000e+000f, -4.278050e-001f,
  2.330098e-002f, -1.506927e-001f, 1.335376e-001f, 0.000000e+000f, -3.941682e-001f, 9.962628e-003f, -6.760440e-002f, 7.425783e-002f, 0.000000e+000f, -4.297643e-001f,
  2.302616e-002f, -1.493184e-001f, 1.341423e-001f, 0.000000e+000f, -3.911318e-001f, 1.069840e-002f, -7.203579e-002f, 7.670623e-002f, 0.000000e+000f, -4.350362e-001f,
  2.343710e-002f, -1.520017e-001f, 1.366357e-001f, 0.000000e+000f, -4.073781e-001f, 8.708650e-003f, -5.992659e-002f, 6.940702e-002f, 0.000000e+000f, -4.102171e-001f,
  2.343710e-002f, -1.520017e-001f, 1.366357e-001f, 0.000000e+000f, -4.073781e-001f, 8.249382e-003f, -5.676624e-002f, 6.574670e-002f, 0.000000e+000f, -4.102171e-001f,
  2.343710e-002f, -1.520017e-001f, 1.366357e-001f, 0.000000e+000f, -4.073781e-001f, 7.814335e-003f, -5.377256e-002f, 6.227942e-002f, 0.000000e+000f, -4.102171e-001f,
  2.343710e-002f, -1.520017e-001f, 1.366357e-001f, 0.000000e+000f, -4.073781e-001f, 7.402231e-003f, -5.093676e-002f, 5.899499e-002f, 0.000000e+000f, -4.102171e-001f,
  2.343710e-002f, -1.520017e-001f, 1.366357e-001f, 0.000000e+000f, -4.073781e-001f, 7.011859e-003f, -4.825051e-002f, 5.588378e-002f, 0.000000e+000f, -4.102171e-001f,
  2.343710e-002f, -1.520017e-001f, 1.366357e-001f, 0.000000e+000f, -4.073781e-001f, 6.642075e-003f, -4.570592e-002f, 5.293663e-002f, 0.000000e+000f, -4.102171e-001f,
  2.343710e-002f, -1.520017e-001f, 1.366357e-001f, 0.000000e+000f, -4.073781e-001f, 6.291792e-003f, -4.329553e-002f, 5.014492e-002f, 0.000000e+000f, -4.102171e-001f,
  2.343710e-002f, -1.520017e-001f, 1.366357e-001f, 0.000000e+000f, -4.073781e-001f, 6.041257e-003f, -4.157153e-002f, 4.814818e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.061705e-001f, 1.276313e-001f, -1.419381e-002f, 5.051488e-002f, -4.693781e-001f, 0.000000e+000f, -2.736700e-002f, 4.033600e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.061705e-001f, 1.407965e-001f, -2.838761e-002f, 1.010298e-001f, -5.313781e-001f, 0.000000e+000f, -2.736700e-002f, 4.033600e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.061705e-001f, 1.539616e-001f, -4.258142e-002f, 1.515446e-001f, -5.933781e-001f, 0.000000e+000f, -2.736700e-002f, 4.033600e-002f, 0.000000e+000f, -4.102171e-001f,
  0.000000e+000f, -2.715339e-002f, 1.365909e-001f, 0.000000e+000f, 0.000000e+000f,
  8.003795e-003f, -4.966950e-002f, 4.732376e-002f, 0.000000e+000f, 1.857993e-001f, -7.070539e-003f, 1.837083e-002f, 8.650381e-002f, 0.000000e+000f, -6.208777e-002f,
  1.748330e-002f, -1.063747e-001f, 9.269735e-002f, 0.000000e+000f, -1.480356e-001f, 1.963238e-004f, -1.504949e-002f, 7.073624e-002f, 0.000000e+000f, -2.497868e-001f,
  2.084953e-002f, -1.265483e-001f, 1.089975e-001f, 0.000000e+000f, -2.672556e-001f, 3.540174e-003f, -3.088668e-002f, 6.578883e-002f, 0.000000e+000f, -3.278768e-001f,
  2.239912e-002f, -1.358896e-001f, 1.167763e-001f, 0.000000e+000f, -3.231242e-001f, 5.748894e-003f, -4.167893e-002f, 6.418727e-002f, 0.000000e+000f, -3.734799e-001f,
  2.348769e-002f, -1.424685e-001f, 1.223245e-001f, 0.000000e+000f, -3.626716e-001f, 7.606453e-003f, -5.096706e-002f, 6.390544e-002f, 0.000000e+000f, -4.080117e-001f,
  2.376221e-002f, -1.442808e-001f, 1.244947e-001f, 0.000000e+000f, -3.754106e-001f, 8.805254e-003f, -5.730688e-002f, 6.546201e-002f, 0.000000e+000f, -4.240608e-001f,
  2.395588e-002f, -1.456457e-001f, 1.264601e-001f, 0.000000e+000f, -3.859563e-001f, 9.477026e-003f, -6.126796e-002f, 6.838883e-002f, 0.000000e+000f, -4.256839e-001f,
  2.405540e-002f, -1.465019e-001f, 1.282486e-001f, 0.000000e+000f, -3.941682e-001f, 1.028519e-002f, -6.591535e-002f, 7.131673e-002f, 0.000000e+000f, -4.297643e-001f,
  2.379682e-002f, -1.454069e-001f, 1.292834e-001f, 0.000000e+000f, -3.932140e-001f, 1.109775e-002f, -7.063885e-002f, 7.451630e-002f, 0.000000e+000f, -4.329494e-001f,
  2.419593e-002f, -1.478003e-001f, 1.312240e-001f, 0.000000e+000f, -4.073781e-001f, 8.750333e-003f, -5.691422e-002f, 6.487657e-002f, 0.000000e+000f, -4.102171e-001f,
  2.419593e-002f, -1.478003e-001f, 1.312240e-001f, 0.000000e+000f, -4.073781e-001f, 8.177354e-003f, -5.318743e-002f, 6.062840e-002f, 0.000000e+000f, -4.102171e-001f,
  2.419593e-002f, -1.478003e-001f, 1.312240e-001f, 0.000000e+000f, -4.073781e-001f, 7.641894e-003f, -4.970468e-002f, 5.665840e-002f, 0.000000e+000f, -4.102171e-001f,
  2.419593e-002f, -1.478003e-001f, 1.312240e-001f, 0.000000e+000f, -4.073781e-001f, 7.141497e-003f, -4.644998e-002f, 5.294837e-002f, 0.000000e+000f, -4.102171e-001f,
  2.419593e-002f, -1.478003e-001f, 1.312240e-001f, 0.000000e+000f, -4.073781e-001f, 6.673866e-003f, -4.340840e-002f, 4.948127e-002f, 0.000000e+000f, -4.102171e-001f,
  2.419593e-002f, -1.478003e-001f, 1.312240e-001f, 0.000000e+000f, -4.073781e-001f, 6.236856e-003f, -4.056598e-002f, 4.624119e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.031582e-001f, 1.240102e-001f, -1.379110e-002f, 5.051488e-002f, -4.693781e-001f, 0.000000e+000f, -2.659054e-002f, 3.919159e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.031582e-001f, 1.368018e-001f, -2.758220e-002f, 1.010298e-001f, -5.313781e-001f, 0.000000e+000f, -2.659054e-002f, 3.919159e-002f, 0.000000e+000f, -4.102171e-001f,
  0.000000e+000f, -2.789143e-002f, 1.312071e-001f, 0.000000e+000f, 0.000000e+000f,
  8.221341e-003f, -4.833826e-002f, 4.545847e-002f, 0.000000e+000f, 1.857993e-001f, -2.810899e-003f, -2.432023e-003f, 7.364473e-002f, 0.000000e+000f, -1.755875e-001f,
  2.141622e-002f, -1.230033e-001f, 1.047013e-001f, 0.000000e+000f, -2.672556e-001f, 3.636397e-003f, -3.054024e-002f, 6.319573e-002f, 0.000000e+000f, -3.278768e-001f,
  2.322722e-002f, -1.334029e-001f, 1.135467e-001f, 0.000000e+000f, -3.321049e-001f, 6.165850e-003f, -4.237298e-002f, 6.288368e-002f, 0.000000e+000f, -3.734799e-001f,
  2.440808e-002f, -1.402421e-001f, 1.195876e-001f, 0.000000e+000f, -3.754106e-001f, 9.044584e-003f, -5.591474e-002f, 6.288180e-002f, 0.000000e+000f, -4.240608e-001f,
  2.484685e-002f, -1.430077e-001f, 1.228877e-001f, 0.000000e+000f, -3.954433e-001f, 1.026351e-002f, -6.249643e-002f, 6.686909e-002f, 0.000000e+000f, -4.305843e-001f,
  2.444362e-002f, -1.413871e-001f, 1.241876e-001f, 0.000000e+000f, -3.932140e-001f, 1.139939e-002f, -6.884109e-002f, 7.157920e-002f, 0.000000e+000f, -4.329494e-001f,
  2.485359e-002f, -1.437120e-001f, 1.260518e-001f, 0.000000e+000f, -4.073781e-001f, 8.688912e-003f, -5.368096e-002f, 6.024452e-002f, 0.000000e+000f, -4.102171e-001f,
  2.485359e-002f, -1.437120e-001f, 1.260518e-001f, 0.000000e+000f, -4.073781e-001f, 7.849604e-003f, -4.849563e-002f, 5.442518e-002f, 0.000000e+000f, -4.102171e-001f,
  2.485359e-002f, -1.437120e-001f, 1.260518e-001f, 0.000000e+000f, -4.073781e-001f, 7.091369e-003f, -4.381119e-002f, 4.916797e-002f, 0.000000e+000f, -4.102171e-001f,
  2.485359e-002f, -1.437120e-001f, 1.260518e-001f, 0.000000e+000f, -4.073781e-001f, 6.406376e-003f, -3.957923e-002f, 4.441857e-002f, 0.000000e+000f, -4.102171e-001f,
  -1.002314e-001f, 1.204917e-001f, -1.339982e-002f, 5.051488e-002f, -4.693781e-001f, 0.000000e+000f, -2.583611e-002f, 3.807964e-002f, 0.000000e+000f, -4.102171e-001f,
  0.000000e+000f, -2.852415e-002f, 1.260604e-001f, 0.000000e+000f, 0.000000e+000f,
  8.407843e-003f, -4.704043e-002f, 4.367533e-002f, 0.000000e+000f, 1.857993e-001f, 3.718888e-003f, -3.017398e-002f, 6.071684e-002f, 0.000000e+000f, -3.278768e-001f,
  2.496177e-002f, -1.363149e-001f, 1.148967e-001f, 0.000000e+000f, -3.754106e-001f, 9.249761e-003f, -5.454902e-002f, 6.041522e-002f, 0.000000e+000f, -4.240608e-001f,
  2.499813e-002f, -1.374755e-001f, 1.193163e-001f, 0.000000e+000f, -3.932140e-001f, 1.165799e-002f, -6.708280e-002f, 6.877147e-002f, 0.000000e+000f, -4.329494e-001f,
  2.541739e-002f, -1.397337e-001f, 1.211073e-001f, 0.000000e+000f, -4.073781e-001f, 8.027672e-003f, -4.730964e-002f, 5.229033e-002f, 0.000000e+000f, -4.102171e-001f,
  2.541739e-002f, -1.397337e-001f, 1.211073e-001f, 0.000000e+000f, -4.073781e-001f, 6.551705e-003f, -3.861129e-002f, 4.267623e-002f, 0.000000e+000f, -4.102171e-001f,
  // Total number of coefficients: 3485
  // Maximum number of elevation coefficients: 5


  // Lite coefficients
  // Headphones
  // 11025 Hz sample rate
  // Generated by HRTFConv V5.90d on Mon Feb 08 11:07:39 1999
  0.000000e+000f, 9.303313e-004f, 1.198167e-001f, 0.000000e+000f, -1.094468e-001f,
  -4.361095e-004f, -5.569352e-002f, 6.087542e-002f, -4.673098e-003f, -8.809808e-002f, 4.115703e-004f, 5.367696e-002f, 8.643538e-002f, -1.537864e-002f, -3.919058e-002f,
  -5.431195e-004f, -6.937352e-002f, 7.397824e-002f, 1.939350e-002f, -1.980447e-001f, 3.367585e-005f, 4.825563e-003f, 6.291049e-002f, 4.924789e-002f, -3.344323e-001f,
  -6.621298e-004f, -8.458720e-002f, 8.860428e-002f, 4.620719e-002f, -3.205411e-001f, -6.465000e-005f, -7.874843e-003f, 5.813284e-002f, 6.486075e-002f, -4.057586e-001f,
  -7.348966e-004f, -9.388875e-002f, 9.762268e-002f, 6.266959e-002f, -3.957484e-001f, -1.463843e-004f, -1.842559e-002f, 5.501032e-002f, 7.707912e-002f, -4.615773e-001f,
  -7.819751e-004f, -9.990697e-002f, 1.034161e-001f, 7.328348e-002f, -4.442372e-001f, -1.914045e-004f, -2.423073e-002f, 5.410451e-002f, 8.308036e-002f, -4.889936e-001f,
  -8.096240e-004f, -1.034403e-001f, 1.069657e-001f, 7.964858e-002f, -4.733157e-001f, -2.362402e-004f, -3.000812e-002f, 5.371476e-002f, 8.859837e-002f, -5.142022e-001f,
  -8.172668e-004f, -1.044149e-001f, 1.082125e-001f, 8.164586e-002f, -4.824401e-001f, -2.475747e-004f, -3.145734e-002f, 5.507188e-002f, 8.869025e-002f, -5.146220e-001f,
  -8.429420e-004f, -1.076975e-001f, 1.113218e-001f, 8.738933e-002f, -5.086788e-001f, -2.987809e-004f, -3.805794e-002f, 5.432578e-002f, 9.526170e-002f, -5.446432e-001f,
  -8.449844e-004f, -1.079550e-001f, 1.120289e-001f, 8.825783e-002f, -5.126465e-001f, -3.221590e-004f, -4.105873e-002f, 5.562082e-002f, 9.679767e-002f, -5.516601e-001f,
  -8.535981e-004f, -1.090543e-001f, 1.133207e-001f, 9.040727e-002f, -5.224660e-001f, -3.377087e-004f, -4.305015e-002f, 5.706566e-002f, 9.729700e-002f, -5.539413e-001f,
  -8.541620e-004f, -1.091220e-001f, 1.139620e-001f, 9.104640e-002f, -5.253859e-001f, -3.544821e-004f, -4.519595e-002f, 5.892395e-002f, 9.756729e-002f, -5.551761e-001f,
  -8.593342e-004f, -1.097804e-001f, 1.149507e-001f, 9.252777e-002f, -5.321534e-001f, -3.718974e-004f, -4.742691e-002f, 6.046152e-002f, 9.819869e-002f, -5.580606e-001f,
  -8.510204e-004f, -1.087090e-001f, 1.150403e-001f, 9.164947e-002f, -5.281410e-001f, -3.907102e-004f, -4.983446e-002f, 6.243818e-002f, 9.859815e-002f, -5.598855e-001f,
  -8.493639e-004f, -1.084909e-001f, 1.156560e-001f, 9.200963e-002f, -5.297863e-001f, -4.052048e-004f, -5.168677e-002f, 6.429654e-002f, 9.860565e-002f, -5.599198e-001f,
  -8.598744e-004f, -1.098345e-001f, 1.169443e-001f, 9.437466e-002f, -5.405908e-001f, -3.364664e-004f, -4.288833e-002f, 5.729967e-002f, 9.484689e-002f, -5.427481e-001f,
  -8.598744e-004f, -1.098345e-001f, 1.169443e-001f, 9.437466e-002f, -5.405908e-001f, -3.208880e-004f, -4.090260e-002f, 5.464669e-002f, 9.484689e-002f, -5.427481e-001f,
  -8.598744e-004f, -1.098345e-001f, 1.169443e-001f, 9.437466e-002f, -5.405908e-001f, -3.081104e-004f, -3.927389e-002f, 5.247070e-002f, 9.484689e-002f, -5.427481e-001f,
  -8.598744e-004f, -1.098345e-001f, 1.169443e-001f, 9.437466e-002f, -5.405908e-001f, -2.938449e-004f, -3.745550e-002f, 5.004130e-002f, 9.484689e-002f, -5.427481e-001f,
  -8.598744e-004f, -1.098345e-001f, 1.169443e-001f, 9.437466e-002f, -5.405908e-001f, -2.821442e-004f, -3.596405e-002f, 4.804869e-002f, 9.484689e-002f, -5.427481e-001f,
  -8.598744e-004f, -1.098345e-001f, 1.169443e-001f, 9.437466e-002f, -5.405908e-001f, -2.690809e-004f, -3.429891e-002f, 4.582403e-002f, 9.484689e-002f, -5.427481e-001f,
  -8.598744e-004f, -1.098345e-001f, 1.169443e-001f, 9.437466e-002f, -5.405908e-001f, -2.583663e-004f, -3.293315e-002f, 4.399935e-002f, 9.484689e-002f, -5.427481e-001f,
  -8.598744e-004f, -1.098345e-001f, 1.169443e-001f, 9.437466e-002f, -5.405908e-001f, -2.480783e-004f, -3.162177e-002f, 4.224732e-002f, 9.484689e-002f, -5.427481e-001f,
  -8.598744e-004f, -1.098345e-001f, 1.169443e-001f, 9.437466e-002f, -5.405908e-001f, -2.365922e-004f, -3.015768e-002f, 4.029127e-002f, 9.484689e-002f, -5.427481e-001f,
  -8.598744e-004f, -1.098345e-001f, 1.169443e-001f, 9.437466e-002f, -5.405908e-001f, -2.334093e-004f, -2.975196e-002f, 3.974922e-002f, 9.484689e-002f, -5.427481e-001f,
  -1.428774e-001f, 1.703100e-001f, -2.051950e-002f, 5.863558e-002f, -4.991440e-001f, 0.000000e+000f, -3.878346e-002f, 5.128348e-002f, 0.000000e+000f, -4.333013e-001f,
  -1.428774e-001f, 1.897413e-001f, -4.103901e-002f, 1.172712e-001f, -5.671440e-001f, 0.000000e+000f, -3.878346e-002f, 5.128348e-002f, 0.000000e+000f, -4.333013e-001f,
  -1.428774e-001f, 2.091727e-001f, -6.155851e-002f, 1.759067e-001f, -6.351440e-001f, 0.000000e+000f, -3.878346e-002f, 5.128348e-002f, 0.000000e+000f, -4.333013e-001f,
  0.000000e+000f, -7.094333e-003f, 1.425747e-001f, 0.000000e+000f, -1.094468e-001f,
  3.325596e-003f, -7.043886e-002f, 7.243812e-002f, -4.673098e-003f, -8.809808e-002f, -3.138470e-003f, 5.795594e-002f, 1.028530e-001f, -1.537864e-002f, -3.919058e-002f,
  3.922620e-003f, -8.300438e-002f, 8.383578e-002f, 1.292757e-002f, -1.685055e-001f, -4.201449e-004f, 4.650264e-003f, 7.623547e-002f, 4.574333e-002f, -3.184220e-001f,
  4.925215e-003f, -1.041101e-001f, 1.030607e-001f, 4.254838e-002f, -3.038261e-001f, 3.642802e-004f, -1.081059e-002f, 7.013162e-002f, 6.219478e-002f, -3.935793e-001f,
  5.471432e-003f, -1.156117e-001f, 1.135963e-001f, 5.873235e-002f, -3.777614e-001f, 9.859418e-004f, -2.309941e-002f, 6.601772e-002f, 7.468842e-002f, -4.506556e-001f,
  5.866269e-003f, -1.239244e-001f, 1.211871e-001f, 7.041233e-002f, -4.311206e-001f, 1.337152e-003f, -3.009670e-002f, 6.479250e-002f, 8.092003e-002f, -4.791243e-001f,
  6.100159e-003f, -1.288532e-001f, 1.257746e-001f, 7.739962e-002f, -4.630415e-001f, 1.693234e-003f, -3.720026e-002f, 6.373480e-002f, 8.709927e-002f, -5.073537e-001f,
  6.199580e-003f, -1.309602e-001f, 1.279653e-001f, 8.055082e-002f, -4.774376e-001f, 1.832036e-003f, -4.004412e-002f, 6.482737e-002f, 8.837586e-002f, -5.131857e-001f,
  6.341974e-003f, -1.339645e-001f, 1.308300e-001f, 8.485875e-002f, -4.971180e-001f, 2.084980e-003f, -4.513821e-002f, 6.504222e-002f, 9.203843e-002f, -5.299179e-001f,
  6.430042e-003f, -1.358297e-001f, 1.327470e-001f, 8.763233e-002f, -5.097890e-001f, 2.364741e-003f, -5.076852e-002f, 6.520209e-002f, 9.614782e-002f, -5.486913e-001f,
  6.466902e-003f, -1.366252e-001f, 1.338458e-001f, 8.901623e-002f, -5.161112e-001f, 2.504118e-003f, -5.364329e-002f, 6.668328e-002f, 9.714074e-002f, -5.532275e-001f,
  6.512968e-003f, -1.376129e-001f, 1.350907e-001f, 9.064920e-002f, -5.235713e-001f, 2.605465e-003f, -5.577406e-002f, 6.857260e-002f, 9.725166e-002f, -5.537342e-001f,
  6.523956e-003f, -1.378719e-001f, 1.358566e-001f, 9.139155e-002f, -5.269626e-001f, 2.729138e-003f, -5.834967e-002f, 7.038425e-002f, 9.775857e-002f, -5.560499e-001f,
  6.546480e-003f, -1.383723e-001f, 1.368170e-001f, 9.245455e-002f, -5.318189e-001f, 2.850353e-003f, -6.088189e-002f, 7.231710e-002f, 9.813712e-002f, -5.577793e-001f,
  6.489540e-003f, -1.372317e-001f, 1.368911e-001f, 9.164947e-002f, -5.281410e-001f, 2.979399e-003f, -6.357389e-002f, 7.429771e-002f, 9.859815e-002f, -5.598855e-001f,
  6.476908e-003f, -1.370143e-001f, 1.376237e-001f, 9.200963e-002f, -5.297863e-001f, 3.089929e-003f, -6.590523e-002f, 7.650905e-002f, 9.860565e-002f, -5.599198e-001f,
  6.557057e-003f, -1.387013e-001f, 1.391567e-001f, 9.437466e-002f, -5.405908e-001f, 2.565757e-003f, -5.495669e-002f, 6.818319e-002f, 9.484689e-002f, -5.427481e-001f,
  6.557057e-003f, -1.387013e-001f, 1.391567e-001f, 9.437466e-002f, -5.405908e-001f, 2.463591e-003f, -5.276835e-002f, 6.546818e-002f, 9.484689e-002f, -5.427481e-001f,
  6.557057e-003f, -1.387013e-001f, 1.391567e-001f, 9.437466e-002f, -5.405908e-001f, 2.365492e-003f, -5.066714e-002f, 6.286128e-002f, 9.484689e-002f, -5.427481e-001f,
  6.557057e-003f, -1.387013e-001f, 1.391567e-001f, 9.437466e-002f, -5.405908e-001f, 2.271300e-003f, -4.864961e-002f, 6.035818e-002f, 9.484689e-002f, -5.427481e-001f,
  6.557057e-003f, -1.387013e-001f, 1.391567e-001f, 9.437466e-002f, -5.405908e-001f, 2.180858e-003f, -4.671241e-002f, 5.795476e-002f, 9.484689e-002f, -5.427481e-001f,
  6.557057e-003f, -1.387013e-001f, 1.391567e-001f, 9.437466e-002f, -5.405908e-001f, 2.094018e-003f, -4.485235e-002f, 5.564704e-002f, 9.484689e-002f, -5.427481e-001f,
  6.557057e-003f, -1.387013e-001f, 1.391567e-001f, 9.437466e-002f, -5.405908e-001f, 2.010635e-003f, -4.306636e-002f, 5.343121e-002f, 9.484689e-002f, -5.427481e-001f,
  6.557057e-003f, -1.387013e-001f, 1.391567e-001f, 9.437466e-002f, -5.405908e-001f, 1.930573e-003f, -4.135149e-002f, 5.130361e-002f, 9.484689e-002f, -5.427481e-001f,
  6.557057e-003f, -1.387013e-001f, 1.391567e-001f, 9.437466e-002f, -5.405908e-001f, 1.853699e-003f, -3.970490e-002f, 4.926073e-002f, 9.484689e-002f, -5.427481e-001f,
  6.557057e-003f, -1.387013e-001f, 1.391567e-001f, 9.437466e-002f, -5.405908e-001f, 1.779886e-003f, -3.812387e-002f, 4.729920e-002f, 9.484689e-002f, -5.427481e-001f,
  -1.603110e-001f, 1.910910e-001f, -2.302326e-002f, 5.863558e-002f, -4.991440e-001f, 0.000000e+000f, -4.351576e-002f, 5.754101e-002f, 0.000000e+000f, -4.333013e-001f,
  -1.603110e-001f, 2.128933e-001f, -4.604652e-002f, 1.172712e-001f, -5.671440e-001f, 0.000000e+000f, -4.351576e-002f, 5.754101e-002f, 0.000000e+000f, -4.333013e-001f,
  -1.603110e-001f, 2.346956e-001f, -6.906978e-002f, 1.759067e-001f, -6.351440e-001f, 0.000000e+000f, -4.351576e-002f, 5.754101e-002f, 0.000000e+000f, -4.333013e-001f,
  -1.603110e-001f, 2.564979e-001f, -9.209304e-002f, 2.345423e-001f, -7.031440e-001f, 0.000000e+000f, -4.351576e-002f, 5.754101e-002f, 0.000000e+000f, -4.333013e-001f,
  0.000000e+000f, -1.820534e-002f, 1.702168e-001f, 0.000000e+000f, -1.094468e-001f,
  8.534077e-003f, -8.904177e-002f, 8.648229e-002f, -4.673098e-003f, -8.809808e-002f, -1.053440e-002f, 8.409425e-002f, 1.346426e-001f, -3.745895e-002f, 6.168178e-002f,
  8.534077e-003f, -8.904177e-002f, 8.648229e-002f, -4.673098e-003f, -8.809808e-002f, -2.392142e-003f, 1.203268e-002f, 9.661581e-002f, 3.447330e-002f, -2.669357e-001f,
  1.152077e-002f, -1.198106e-001f, 1.130710e-001f, 2.967744e-002f, -2.450261e-001f, -3.852744e-005f, -8.961429e-003f, 8.715587e-002f, 5.430071e-002f, -3.575158e-001f,
  1.323859e-002f, -1.375102e-001f, 1.283885e-001f, 4.944998e-002f, -3.353556e-001f, 1.576917e-003f, -2.346511e-002f, 8.154180e-002f, 6.735577e-002f, -4.171569e-001f,
  1.420763e-002f, -1.475055e-001f, 1.371299e-001f, 6.066735e-002f, -3.866013e-001f, 2.706200e-003f, -3.369198e-002f, 7.844007e-002f, 7.596349e-002f, -4.564806e-001f,
  1.505390e-002f, -1.562258e-001f, 1.446826e-001f, 7.041233e-002f, -4.311206e-001f, 3.431372e-003f, -4.035608e-002f, 7.735434e-002f, 8.092003e-002f, -4.791243e-001f,
  1.557516e-002f, -1.616069e-001f, 1.494270e-001f, 7.647291e-002f, -4.588079e-001f, 4.212847e-003f, -4.753912e-002f, 7.619851e-002f, 8.625246e-002f, -5.034851e-001f,
  1.587941e-002f, -1.647634e-001f, 1.523431e-001f, 8.010295e-002f, -4.753915e-001f, 4.668367e-003f, -5.183990e-002f, 7.658879e-002f, 8.869025e-002f, -5.146220e-001f,
  1.599282e-002f, -1.659722e-001f, 1.537314e-001f, 8.164586e-002f, -4.824401e-001f, 4.844705e-003f, -5.366497e-002f, 7.823752e-002f, 8.869025e-002f, -5.146220e-001f,
  1.645110e-002f, -1.706840e-001f, 1.577225e-001f, 8.686077e-002f, -5.062641e-001f, 5.715587e-003f, -6.169571e-002f, 7.719170e-002f, 9.448011e-002f, -5.410725e-001f,
  1.649386e-002f, -1.711709e-001f, 1.585369e-001f, 8.762583e-002f, -5.097592e-001f, 6.120602e-003f, -6.558581e-002f, 7.815737e-002f, 9.625778e-002f, -5.491937e-001f,
  1.659524e-002f, -1.722534e-001f, 1.597955e-001f, 8.901623e-002f, -5.161112e-001f, 6.426018e-003f, -6.859694e-002f, 7.961171e-002f, 9.714074e-002f, -5.532275e-001f,
  1.671394e-002f, -1.735102e-001f, 1.611700e-001f, 9.058167e-002f, -5.232628e-001f, 6.647229e-003f, -7.086371e-002f, 8.146751e-002f, 9.727464e-002f, -5.538391e-001f,
  1.669720e-002f, -1.734061e-001f, 1.616604e-001f, 9.079207e-002f, -5.242240e-001f, 6.874352e-003f, -7.319164e-002f, 8.337832e-002f, 9.740869e-002f, -5.544516e-001f,
  1.681820e-002f, -1.746865e-001f, 1.630536e-001f, 9.238285e-002f, -5.314913e-001f, 7.191131e-003f, -7.633314e-002f, 8.505821e-002f, 9.821648e-002f, -5.581419e-001f,
  1.675066e-002f, -1.740864e-001f, 1.633464e-001f, 9.216942e-002f, -5.305163e-001f, 7.397581e-003f, -7.849279e-002f, 8.720280e-002f, 9.808143e-002f, -5.575249e-001f,
  1.663495e-002f, -1.730209e-001f, 1.635002e-001f, 9.158461e-002f, -5.278447e-001f, 7.712377e-003f, -8.163598e-002f, 8.907189e-002f, 9.875831e-002f, -5.606172e-001f,
  1.662091e-002f, -1.729758e-001f, 1.643059e-001f, 9.200963e-002f, -5.297863e-001f, 7.929314e-003f, -8.390716e-002f, 9.134248e-002f, 9.860565e-002f, -5.599198e-001f,
  1.682659e-002f, -1.750946e-001f, 1.661362e-001f, 9.437466e-002f, -5.405908e-001f, 7.688749e-003f, -8.205534e-002f, 9.505835e-002f, 9.484689e-002f, -5.427481e-001f,
  1.682659e-002f, -1.750946e-001f, 1.661362e-001f, 9.437466e-002f, -5.405908e-001f, 6.408229e-003f, -6.838946e-002f, 7.922689e-002f, 9.484689e-002f, -5.427481e-001f,
  1.682659e-002f, -1.750946e-001f, 1.661362e-001f, 9.437466e-002f, -5.405908e-001f, 6.194869e-003f, -6.611246e-002f, 7.658906e-002f, 9.484689e-002f, -5.427481e-001f,
  1.682659e-002f, -1.750946e-001f, 1.661362e-001f, 9.437466e-002f, -5.405908e-001f, 5.988613e-003f, -6.391127e-002f, 7.403905e-002f, 9.484689e-002f, -5.427481e-001f,
  1.682659e-002f, -1.750946e-001f, 1.661362e-001f, 9.437466e-002f, -5.405908e-001f, 5.789225e-003f, -6.178336e-002f, 7.157395e-002f, 9.484689e-002f, -5.427481e-001f,
  1.682659e-002f, -1.750946e-001f, 1.661362e-001f, 9.437466e-002f, -5.405908e-001f, 5.596474e-003f, -5.972631e-002f, 6.919092e-002f, 9.484689e-002f, -5.427481e-001f,
  1.682659e-002f, -1.750946e-001f, 1.661362e-001f, 9.437466e-002f, -5.405908e-001f, 5.410142e-003f, -5.773774e-002f, 6.688723e-002f, 9.484689e-002f, -5.427481e-001f,
  1.682659e-002f, -1.750946e-001f, 1.661362e-001f, 9.437466e-002f, -5.405908e-001f, 5.230013e-003f, -5.581538e-002f, 6.466024e-002f, 9.484689e-002f, -5.427481e-001f,
  1.682659e-002f, -1.750946e-001f, 1.661362e-001f, 9.437466e-002f, -5.405908e-001f, 5.055881e-003f, -5.395703e-002f, 6.250740e-002f, 9.484689e-002f, -5.427481e-001f,
  1.682659e-002f, -1.750946e-001f, 1.661362e-001f, 9.437466e-002f, -5.405908e-001f, 4.887547e-003f, -5.216055e-002f, 6.042624e-002f, 9.484689e-002f, -5.427481e-001f,
  1.682659e-002f, -1.750946e-001f, 1.661362e-001f, 9.437466e-002f, -5.405908e-001f, 4.724818e-003f, -5.042388e-002f, 5.841437e-002f, 9.484689e-002f, -5.427481e-001f,
  1.682659e-002f, -1.750946e-001f, 1.661362e-001f, 9.437466e-002f, -5.405908e-001f, 4.567507e-003f, -4.874503e-002f, 5.646948e-002f, 9.484689e-002f, -5.427481e-001f,
  -1.798720e-001f, 2.144076e-001f, -2.583252e-002f, 5.863558e-002f, -4.991440e-001f, 0.000000e+000f, -4.882549e-002f, 6.456208e-002f, 0.000000e+000f, -4.333013e-001f,
  -1.798720e-001f, 2.388702e-001f, -5.166505e-002f, 1.172712e-001f, -5.671440e-001f, 0.000000e+000f, -4.882549e-002f, 6.456208e-002f, 0.000000e+000f, -4.333013e-001f,
  -1.798720e-001f, 2.633328e-001f, -7.749757e-002f, 1.759067e-001f, -6.351440e-001f, 0.000000e+000f, -4.882549e-002f, 6.456208e-002f, 0.000000e+000f, -4.333013e-001f,
  -1.798720e-001f, 2.877954e-001f, -1.033301e-001f, 2.345423e-001f, -7.031440e-001f, 0.000000e+000f, -4.882549e-002f, 6.456208e-002f, 0.000000e+000f, -4.333013e-001f,
  -1.798720e-001f, 3.122580e-001f, -1.291626e-001f, 2.931779e-001f, -7.711440e-001f, 0.000000e+000f, -4.882549e-002f, 6.456208e-002f, 0.000000e+000f, -4.333013e-001f,
  0.000000e+000f, -3.332487e-002f, 2.038845e-001f, 0.000000e+000f, -1.094468e-001f,
  1.562163e-002f, -1.125059e-001f, 1.035879e-001f, -4.673098e-003f, -8.809808e-002f, -1.928321e-002f, 9.161620e-002f, 1.612741e-001f, -3.745895e-002f, 6.168178e-002f,
  1.562163e-002f, -1.125059e-001f, 1.035879e-001f, -4.673098e-003f, -8.809808e-002f, -4.378816e-003f, 7.874635e-003f, 1.157258e-001f, 3.447330e-002f, -2.669357e-001f,
  2.108878e-002f, -1.511599e-001f, 1.354357e-001f, 2.967744e-002f, -2.450261e-001f, -7.052448e-005f, -1.663182e-002f, 1.043947e-001f, 5.430071e-002f, -3.575158e-001f,
  2.423324e-002f, -1.733969e-001f, 1.537829e-001f, 4.944998e-002f, -3.353556e-001f, 2.886546e-003f, -3.362432e-002f, 9.767022e-002f, 6.735577e-002f, -4.171569e-001f,
  2.600707e-002f, -1.859607e-001f, 1.642533e-001f, 6.066735e-002f, -3.866013e-001f, 4.953700e-003f, -4.566410e-002f, 9.395499e-002f, 7.596349e-002f, -4.564806e-001f,
  2.755617e-002f, -1.969169e-001f, 1.732998e-001f, 7.041233e-002f, -4.311206e-001f, 6.281127e-003f, -5.357285e-002f, 9.265451e-002f, 8.092003e-002f, -4.791243e-001f,
  2.851034e-002f, -2.036835e-001f, 1.789826e-001f, 7.647291e-002f, -4.588079e-001f, 7.711618e-003f, -6.209843e-002f, 9.127006e-002f, 8.625246e-002f, -5.034851e-001f,
  2.906726e-002f, -2.076617e-001f, 1.824756e-001f, 8.010295e-002f, -4.753915e-001f, 8.545447e-003f, -6.727628e-002f, 9.173754e-002f, 8.869025e-002f, -5.146220e-001f,
  2.927485e-002f, -2.092035e-001f, 1.841384e-001f, 8.164586e-002f, -4.824401e-001f, 8.868234e-003f, -6.957391e-002f, 9.371238e-002f, 8.869025e-002f, -5.146220e-001f,
  3.011373e-002f, -2.151172e-001f, 1.889190e-001f, 8.686077e-002f, -5.062641e-001f, 1.046238e-002f, -7.912230e-002f, 9.245970e-002f, 9.448011e-002f, -5.410725e-001f,
  3.019201e-002f, -2.157556e-001f, 1.898944e-001f, 8.762583e-002f, -5.097592e-001f, 1.120376e-002f, -8.384719e-002f, 9.361638e-002f, 9.625778e-002f, -5.491937e-001f,
  3.037758e-002f, -2.171374e-001f, 1.914020e-001f, 8.901623e-002f, -5.161112e-001f, 1.176283e-002f, -8.755232e-002f, 9.535837e-002f, 9.714074e-002f, -5.532275e-001f,
  3.059486e-002f, -2.187358e-001f, 1.930484e-001f, 9.058167e-002f, -5.232628e-001f, 1.216775e-002f, -9.039302e-002f, 9.758123e-002f, 9.727464e-002f, -5.538391e-001f,
  3.056422e-002f, -2.186443e-001f, 1.936358e-001f, 9.079207e-002f, -5.242240e-001f, 1.258350e-002f, -9.331070e-002f, 9.986999e-002f, 9.740869e-002f, -5.544516e-001f,
  3.078572e-002f, -2.202722e-001f, 1.953046e-001f, 9.238285e-002f, -5.314913e-001f, 1.316337e-002f, -9.718725e-002f, 1.018822e-001f, 9.821648e-002f, -5.581419e-001f,
  3.066209e-002f, -2.195732e-001f, 1.956552e-001f, 9.216942e-002f, -5.305163e-001f, 1.354127e-002f, -9.991919e-002f, 1.044509e-001f, 9.808143e-002f, -5.575249e-001f,
  3.045028e-002f, -2.183074e-001f, 1.958395e-001f, 9.158461e-002f, -5.278447e-001f, 1.411751e-002f, -1.038106e-001f, 1.066897e-001f, 9.875831e-002f, -5.606172e-001f,
  3.042458e-002f, -2.183079e-001f, 1.968046e-001f, 9.200963e-002f, -5.297863e-001f, 1.451461e-002f, -1.066846e-001f, 1.094094e-001f, 9.860565e-002f, -5.599198e-001f,
  3.080107e-002f, -2.209697e-001f, 1.989968e-001f, 9.437466e-002f, -5.405908e-001f, 1.407426e-002f, -1.047180e-001f, 1.138602e-001f, 9.484689e-002f, -5.427481e-001f,
  3.080107e-002f, -2.209697e-001f, 1.989968e-001f, 9.437466e-002f, -5.405908e-001f, 1.173027e-002f, -8.727776e-002f, 9.489744e-002f, 9.484689e-002f, -5.427481e-001f,
  3.080107e-002f, -2.209697e-001f, 1.989968e-001f, 9.437466e-002f, -5.405908e-001f, 1.133971e-002f, -8.437188e-002f, 9.173786e-002f, 9.484689e-002f, -5.427481e-001f,
  3.080107e-002f, -2.209697e-001f, 1.989968e-001f, 9.437466e-002f, -5.405908e-001f, 1.096216e-002f, -8.156274e-002f, 8.868348e-002f, 9.484689e-002f, -5.427481e-001f,
  3.080107e-002f, -2.209697e-001f, 1.989968e-001f, 9.437466e-002f, -5.405908e-001f, 1.059718e-002f, -7.884714e-002f, 8.573079e-002f, 9.484689e-002f, -5.427481e-001f,
  3.080107e-002f, -2.209697e-001f, 1.989968e-001f, 9.437466e-002f, -5.405908e-001f, 1.024435e-002f, -7.622195e-002f, 8.287641e-002f, 9.484689e-002f, -5.427481e-001f,
  3.080107e-002f, -2.209697e-001f, 1.989968e-001f, 9.437466e-002f, -5.405908e-001f, 9.903265e-003f, -7.368417e-002f, 8.011707e-002f, 9.484689e-002f, -5.427481e-001f,
  3.080107e-002f, -2.209697e-001f, 1.989968e-001f, 9.437466e-002f, -5.405908e-001f, 9.573540e-003f, -7.123088e-002f, 7.744960e-002f, 9.484689e-002f, -5.427481e-001f,
  3.080107e-002f, -2.209697e-001f, 1.989968e-001f, 9.437466e-002f, -5.405908e-001f, 9.254792e-003f, -6.885927e-002f, 7.487094e-002f, 9.484689e-002f, -5.427481e-001f,
  3.080107e-002f, -2.209697e-001f, 1.989968e-001f, 9.437466e-002f, -5.405908e-001f, 8.946657e-003f, -6.656662e-002f, 7.237814e-002f, 9.484689e-002f, -5.427481e-001f,
  3.080107e-002f, -2.209697e-001f, 1.989968e-001f, 9.437466e-002f, -5.405908e-001f, 8.648781e-003f, -6.435031e-002f, 6.996834e-002f, 9.484689e-002f, -5.427481e-001f,
  3.080107e-002f, -2.209697e-001f, 1.989968e-001f, 9.437466e-002f, -5.405908e-001f, 8.360823e-003f, -6.220779e-002f, 6.763876e-002f, 9.484689e-002f, -5.427481e-001f,
  -2.018196e-001f, 2.405693e-001f, -2.898457e-002f, 5.863558e-002f, -4.991440e-001f, 0.000000e+000f, -5.478310e-002f, 7.243984e-002f, 0.000000e+000f, -4.333013e-001f,
  -2.018196e-001f, 2.680168e-001f, -5.796914e-002f, 1.172712e-001f, -5.671440e-001f, 0.000000e+000f, -5.478310e-002f, 7.243984e-002f, 0.000000e+000f, -4.333013e-001f,
  -2.018196e-001f, 2.954642e-001f, -8.695370e-002f, 1.759067e-001f, -6.351440e-001f, 0.000000e+000f, -5.478310e-002f, 7.243984e-002f, 0.000000e+000f, -4.333013e-001f,
  -2.018196e-001f, 3.229117e-001f, -1.159383e-001f, 2.345423e-001f, -7.031440e-001f, 0.000000e+000f, -5.478310e-002f, 7.243984e-002f, 0.000000e+000f, -4.333013e-001f,
  -2.018196e-001f, 3.503592e-001f, -1.449228e-001f, 2.931779e-001f, -7.711440e-001f, 0.000000e+000f, -5.478310e-002f, 7.243984e-002f, 0.000000e+000f, -4.333013e-001f,
  0.000000e+000f, 0.000000e+000f, 2.450000e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.148481e-001f, 1.244775e-001f, 0.000000e+000f, 2.134872e-002f, 0.000000e+000f, 1.417676e-001f, 1.937967e-001f, 0.000000e+000f, 1.711286e-001f,
  0.000000e+000f, -1.148481e-001f, 1.244775e-001f, 0.000000e+000f, 2.134872e-002f, 0.000000e+000f, 3.219247e-002f, 1.390631e-001f, 0.000000e+000f, -1.574889e-001f,
  0.000000e+000f, -1.550419e-001f, 1.627478e-001f, 0.000000e+000f, -1.355793e-001f, 0.000000e+000f, 5.184865e-004f, 1.254470e-001f, 0.000000e+000f, -2.480690e-001f,
  0.000000e+000f, -1.781595e-001f, 1.847949e-001f, 0.000000e+000f, -2.259088e-001f, 0.000000e+000f, -2.122150e-002f, 1.173665e-001f, 0.000000e+000f, -3.077101e-001f,
  0.000000e+000f, -1.912005e-001f, 1.973767e-001f, 0.000000e+000f, -2.771545e-001f, 0.000000e+000f, -3.641894e-002f, 1.129020e-001f, 0.000000e+000f, -3.470338e-001f,
  0.000000e+000f, -2.025893e-001f, 2.082476e-001f, 0.000000e+000f, -3.216738e-001f, 0.000000e+000f, -4.617801e-002f, 1.113393e-001f, 0.000000e+000f, -3.696775e-001f,
  0.000000e+000f, -2.096042e-001f, 2.150764e-001f, 0.000000e+000f, -3.493611e-001f, 0.000000e+000f, -5.669478e-002f, 1.096756e-001f, 0.000000e+000f, -3.940383e-001f,
  0.000000e+000f, -2.136986e-001f, 2.192737e-001f, 0.000000e+000f, -3.659447e-001f, 0.000000e+000f, -6.282498e-002f, 1.102374e-001f, 0.000000e+000f, -4.051752e-001f,
  0.000000e+000f, -2.152248e-001f, 2.212719e-001f, 0.000000e+000f, -3.729933e-001f, 0.000000e+000f, -6.519807e-002f, 1.126105e-001f, 0.000000e+000f, -4.051752e-001f,
  0.000000e+000f, -2.213921e-001f, 2.270165e-001f, 0.000000e+000f, -3.968173e-001f, 0.000000e+000f, -7.691804e-002f, 1.111052e-001f, 0.000000e+000f, -4.316257e-001f,
  0.000000e+000f, -2.219676e-001f, 2.281886e-001f, 0.000000e+000f, -4.003124e-001f, 0.000000e+000f, -8.236857e-002f, 1.124951e-001f, 0.000000e+000f, -4.397469e-001f,
  0.000000e+000f, -2.233319e-001f, 2.300003e-001f, 0.000000e+000f, -4.066644e-001f, 0.000000e+000f, -8.647873e-002f, 1.145884e-001f, 0.000000e+000f, -4.437807e-001f,
  0.000000e+000f, -2.249293e-001f, 2.319787e-001f, 0.000000e+000f, -4.138160e-001f, 0.000000e+000f, -8.945570e-002f, 1.172595e-001f, 0.000000e+000f, -4.443923e-001f,
  0.000000e+000f, -2.247041e-001f, 2.326845e-001f, 0.000000e+000f, -4.147772e-001f, 0.000000e+000f, -9.251222e-002f, 1.200098e-001f, 0.000000e+000f, -4.450048e-001f,
  0.000000e+000f, -2.263325e-001f, 2.346898e-001f, 0.000000e+000f, -4.220445e-001f, 0.000000e+000f, -9.677531e-002f, 1.224278e-001f, 0.000000e+000f, -4.486951e-001f,
  0.000000e+000f, -2.254236e-001f, 2.351112e-001f, 0.000000e+000f, -4.210695e-001f, 0.000000e+000f, -9.955363e-002f, 1.255146e-001f, 0.000000e+000f, -4.480781e-001f,
  0.000000e+000f, -2.238663e-001f, 2.353326e-001f, 0.000000e+000f, -4.183979e-001f, 0.000000e+000f, -1.037900e-001f, 1.282048e-001f, 0.000000e+000f, -4.511704e-001f,
  0.000000e+000f, -2.236775e-001f, 2.364923e-001f, 0.000000e+000f, -4.203395e-001f, 0.000000e+000f, -1.067095e-001f, 1.314730e-001f, 0.000000e+000f, -4.504730e-001f,
  0.000000e+000f, -2.264454e-001f, 2.391266e-001f, 0.000000e+000f, -4.311440e-001f, 0.000000e+000f, -1.034720e-001f, 1.368214e-001f, 0.000000e+000f, -4.333013e-001f,
  0.000000e+000f, -2.264454e-001f, 2.391266e-001f, 0.000000e+000f, -4.311440e-001f, 0.000000e+000f, -8.623934e-002f, 1.140345e-001f, 0.000000e+000f, -4.333013e-001f,
  0.000000e+000f, -2.264454e-001f, 2.391266e-001f, 0.000000e+000f, -4.311440e-001f, 0.000000e+000f, -8.336803e-002f, 1.102378e-001f, 0.000000e+000f, -4.333013e-001f,
  0.000000e+000f, -2.264454e-001f, 2.391266e-001f, 0.000000e+000f, -4.311440e-001f, 0.000000e+000f, -8.059232e-002f, 1.065674e-001f, 0.000000e+000f, -4.333013e-001f,
  0.000000e+000f, -2.264454e-001f, 2.391266e-001f, 0.000000e+000f, -4.311440e-001f, 0.000000e+000f, -7.790902e-002f, 1.030193e-001f, 0.000000e+000f, -4.333013e-001f,
  0.000000e+000f, -2.264454e-001f, 2.391266e-001f, 0.000000e+000f, -4.311440e-001f, 0.000000e+000f, -7.531507e-002f, 9.958932e-002f, 0.000000e+000f, -4.333013e-001f,
  0.000000e+000f, -2.264454e-001f, 2.391266e-001f, 0.000000e+000f, -4.311440e-001f, 0.000000e+000f, -7.280748e-002f, 9.627353e-002f, 0.000000e+000f, -4.333013e-001f,
  0.000000e+000f, -2.264454e-001f, 2.391266e-001f, 0.000000e+000f, -4.311440e-001f, 0.000000e+000f, -7.038338e-002f, 9.306814e-002f, 0.000000e+000f, -4.333013e-001f,
  0.000000e+000f, -2.264454e-001f, 2.391266e-001f, 0.000000e+000f, -4.311440e-001f, 0.000000e+000f, -6.803999e-002f, 8.996947e-002f, 0.000000e+000f, -4.333013e-001f,
  0.000000e+000f, -2.264454e-001f, 2.391266e-001f, 0.000000e+000f, -4.311440e-001f, 0.000000e+000f, -6.577462e-002f, 8.697396e-002f, 0.000000e+000f, -4.333013e-001f,
  0.000000e+000f, -2.264454e-001f, 2.391266e-001f, 0.000000e+000f, -4.311440e-001f, 0.000000e+000f, -6.358468e-002f, 8.407819e-002f, 0.000000e+000f, -4.333013e-001f,
  0.000000e+000f, -2.264454e-001f, 2.391266e-001f, 0.000000e+000f, -4.311440e-001f, 0.000000e+000f, -6.146765e-002f, 8.127884e-002f, 0.000000e+000f, -4.333013e-001f,
  -2.264454e-001f, 2.699232e-001f, -3.252122e-002f, 5.863558e-002f, -4.991440e-001f, 0.000000e+000f, -6.146765e-002f, 8.127884e-002f, 0.000000e+000f, -4.333013e-001f,
  -2.264454e-001f, 3.007198e-001f, -6.504244e-002f, 1.172712e-001f, -5.671440e-001f, 0.000000e+000f, -6.146765e-002f, 8.127884e-002f, 0.000000e+000f, -4.333013e-001f,
  -2.264454e-001f, 3.315163e-001f, -9.756366e-002f, 1.759067e-001f, -6.351440e-001f, 0.000000e+000f, -6.146765e-002f, 8.127884e-002f, 0.000000e+000f, -4.333013e-001f,
  -2.264454e-001f, 3.623129e-001f, -1.300849e-001f, 2.345423e-001f, -7.031440e-001f, 0.000000e+000f, -6.146765e-002f, 8.127884e-002f, 0.000000e+000f, -4.333013e-001f,
  -2.264454e-001f, 3.931095e-001f, -1.626061e-001f, 2.931779e-001f, -7.711440e-001f, 0.000000e+000f, -6.146765e-002f, 8.127884e-002f, 0.000000e+000f, -4.333013e-001f,
  0.000000e+000f, -5.707094e-002f, 2.090824e-001f, 0.000000e+000f, -1.094468e-001f,
  2.675302e-002f, -1.270072e-001f, 1.062288e-001f, -4.673098e-003f, -8.809808e-002f, -3.302371e-002f, 7.584061e-002f, 1.653856e-001f, -3.745895e-002f, 6.168178e-002f,
  2.675302e-002f, -1.270072e-001f, 1.062288e-001f, -4.673098e-003f, -8.809808e-002f, -7.498997e-003f, -4.920750e-003f, 1.186761e-001f, 3.447330e-002f, -2.669357e-001f,
  3.611586e-002f, -1.702232e-001f, 1.388885e-001f, 2.967744e-002f, -2.450261e-001f, -1.207776e-004f, -2.877948e-002f, 1.070562e-001f, 5.430071e-002f, -3.575158e-001f,
  4.150094e-002f, -1.950875e-001f, 1.577035e-001f, 4.944998e-002f, -3.353556e-001f, 4.943392e-003f, -4.545002e-002f, 1.001602e-001f, 6.735577e-002f, -4.171569e-001f,
  4.453874e-002f, -2.091475e-001f, 1.684408e-001f, 6.066735e-002f, -3.866013e-001f, 8.483522e-003f, -5.737952e-002f, 9.635030e-002f, 7.596349e-002f, -4.564806e-001f,
  4.719168e-002f, -2.213989e-001f, 1.777180e-001f, 7.041233e-002f, -4.311206e-001f, 1.075682e-002f, -6.534385e-002f, 9.501666e-002f, 8.092003e-002f, -4.791243e-001f,
  4.882575e-002f, -2.289761e-001f, 1.835456e-001f, 7.647291e-002f, -4.588079e-001f, 1.320663e-002f, -7.393131e-002f, 9.359691e-002f, 8.625246e-002f, -5.034851e-001f,
  4.977951e-002f, -2.334480e-001f, 1.871276e-001f, 8.010295e-002f, -4.753915e-001f, 1.463461e-002f, -7.929366e-002f, 9.407631e-002f, 8.869025e-002f, -5.146220e-001f,
  5.013502e-002f, -2.352159e-001f, 1.888329e-001f, 8.164586e-002f, -4.824401e-001f, 1.518741e-002f, -8.187165e-002f, 9.610150e-002f, 8.869025e-002f, -5.146220e-001f,
  5.157166e-002f, -2.418173e-001f, 1.937353e-001f, 8.686077e-002f, -5.062641e-001f, 1.791749e-002f, -9.152279e-002f, 9.481688e-002f, 9.448011e-002f, -5.410725e-001f,
  5.170571e-002f, -2.425814e-001f, 1.947356e-001f, 8.762583e-002f, -5.097592e-001f, 1.918715e-002f, -9.649803e-002f, 9.600305e-002f, 9.625778e-002f, -5.491937e-001f,
  5.202352e-002f, -2.441678e-001f, 1.962816e-001f, 8.901623e-002f, -5.161112e-001f, 2.014458e-002f, -1.004932e-001f, 9.778945e-002f, 9.714074e-002f, -5.532275e-001f,
  5.239562e-002f, -2.459918e-001f, 1.979700e-001f, 9.058167e-002f, -5.232628e-001f, 2.083804e-002f, -1.036560e-001f, 1.000690e-001f, 9.727464e-002f, -5.538391e-001f,
  5.234315e-002f, -2.459640e-001f, 1.985724e-001f, 9.079207e-002f, -5.242240e-001f, 2.155004e-002f, -1.069051e-001f, 1.024161e-001f, 9.740869e-002f, -5.544516e-001f,
  5.272248e-002f, -2.478208e-001f, 2.002837e-001f, 9.238285e-002f, -5.314913e-001f, 2.254309e-002f, -1.111064e-001f, 1.044795e-001f, 9.821648e-002f, -5.581419e-001f,
  5.251076e-002f, -2.471433e-001f, 2.006433e-001f, 9.216942e-002f, -5.305163e-001f, 2.319028e-002f, -1.141965e-001f, 1.071138e-001f, 9.808143e-002f, -5.575249e-001f,
  5.214801e-002f, -2.458660e-001f, 2.008322e-001f, 9.158461e-002f, -5.278447e-001f, 2.417712e-002f, -1.184385e-001f, 1.094097e-001f, 9.875831e-002f, -5.606172e-001f,
  5.210401e-002f, -2.459749e-001f, 2.018219e-001f, 9.200963e-002f, -5.297863e-001f, 2.485718e-002f, -1.216913e-001f, 1.121987e-001f, 9.860565e-002f, -5.599198e-001f,
  5.274877e-002f, -2.489507e-001f, 2.040700e-001f, 9.437466e-002f, -5.405908e-001f, 2.410305e-002f, -1.201743e-001f, 1.167630e-001f, 9.484689e-002f, -5.427481e-001f,
  5.274877e-002f, -2.489507e-001f, 2.040700e-001f, 9.437466e-002f, -5.405908e-001f, 2.008881e-002f, -1.001599e-001f, 9.731677e-002f, 9.484689e-002f, -5.427481e-001f,
  5.274877e-002f, -2.489507e-001f, 2.040700e-001f, 9.437466e-002f, -5.405908e-001f, 1.941996e-002f, -9.682514e-002f, 9.407664e-002f, 9.484689e-002f, -5.427481e-001f,
  5.274877e-002f, -2.489507e-001f, 2.040700e-001f, 9.437466e-002f, -5.405908e-001f, 1.877338e-002f, -9.360138e-002f, 9.094439e-002f, 9.484689e-002f, -5.427481e-001f,
  5.274877e-002f, -2.489507e-001f, 2.040700e-001f, 9.437466e-002f, -5.405908e-001f, 1.814833e-002f, -9.048495e-002f, 8.791642e-002f, 9.484689e-002f, -5.427481e-001f,
  5.274877e-002f, -2.489507e-001f, 2.040700e-001f, 9.437466e-002f, -5.405908e-001f, 1.754409e-002f, -8.747228e-002f, 8.498928e-002f, 9.484689e-002f, -5.427481e-001f,
  5.274877e-002f, -2.489507e-001f, 2.040700e-001f, 9.437466e-002f, -5.405908e-001f, 1.695996e-002f, -8.455992e-002f, 8.215959e-002f, 9.484689e-002f, -5.427481e-001f,
  5.274877e-002f, -2.489507e-001f, 2.040700e-001f, 9.437466e-002f, -5.405908e-001f, 1.639529e-002f, -8.174453e-002f, 7.942411e-002f, 9.484689e-002f, -5.427481e-001f,
  5.274877e-002f, -2.489507e-001f, 2.040700e-001f, 9.437466e-002f, -5.405908e-001f, 1.584941e-002f, -7.902287e-002f, 7.677971e-002f, 9.484689e-002f, -5.427481e-001f,
  5.274877e-002f, -2.489507e-001f, 2.040700e-001f, 9.437466e-002f, -5.405908e-001f, 1.532171e-002f, -7.639183e-002f, 7.422336e-002f, 9.484689e-002f, -5.427481e-001f,
  5.274877e-002f, -2.489507e-001f, 2.040700e-001f, 9.437466e-002f, -5.405908e-001f, 1.481158e-002f, -7.384839e-002f, 7.175212e-002f, 9.484689e-002f, -5.427481e-001f,
  5.274877e-002f, -2.489507e-001f, 2.040700e-001f, 9.437466e-002f, -5.405908e-001f, 1.431843e-002f, -7.138964e-002f, 6.936316e-002f, 9.484689e-002f, -5.427481e-001f,
  -1.426865e-001f, 1.700825e-001f, -2.049209e-002f, 5.863558e-002f, -4.991440e-001f, 0.000000e+000f, -3.873165e-002f, 5.121497e-002f, 0.000000e+000f, -4.333013e-001f,
  -1.426865e-001f, 1.894879e-001f, -4.098418e-002f, 1.172712e-001f, -5.671440e-001f, 0.000000e+000f, -3.873165e-002f, 5.121497e-002f, 0.000000e+000f, -4.333013e-001f,
  -1.426865e-001f, 2.088932e-001f, -6.147627e-002f, 1.759067e-001f, -6.351440e-001f, 0.000000e+000f, -3.873165e-002f, 5.121497e-002f, 0.000000e+000f, -4.333013e-001f,
  -1.426865e-001f, 2.282986e-001f, -8.196836e-002f, 2.345423e-001f, -7.031440e-001f, 0.000000e+000f, -3.873165e-002f, 5.121497e-002f, 0.000000e+000f, -4.333013e-001f,
  -1.426865e-001f, 2.477039e-001f, -1.024604e-001f, 2.931779e-001f, -7.711440e-001f, 0.000000e+000f, -3.873165e-002f, 5.121497e-002f, 0.000000e+000f, -4.333013e-001f,
  0.000000e+000f, -5.823121e-002f, 1.789782e-001f, 0.000000e+000f, -1.094468e-001f,
  2.729692e-002f, -1.134848e-001f, 9.093371e-002f, -4.673098e-003f, -8.809808e-002f, -3.369510e-002f, 5.750324e-002f, 1.415730e-001f, -3.745895e-002f, 6.168178e-002f,
  2.729692e-002f, -1.134848e-001f, 9.093371e-002f, -4.673098e-003f, -8.809808e-002f, -7.651454e-003f, -9.534950e-003f, 1.015888e-001f, 3.447330e-002f, -2.669357e-001f,
  3.685010e-002f, -1.519433e-001f, 1.188910e-001f, 2.967744e-002f, -2.450261e-001f, -1.232330e-004f, -2.943728e-002f, 9.164196e-002f, 5.430071e-002f, -3.575158e-001f,
  4.234466e-002f, -1.740714e-001f, 1.349969e-001f, 4.944998e-002f, -3.353556e-001f, 5.043892e-003f, -4.339827e-002f, 8.573892e-002f, 6.735577e-002f, -4.171569e-001f,
  4.544423e-002f, -1.865886e-001f, 1.441883e-001f, 6.066735e-002f, -3.866013e-001f, 8.655995e-003f, -5.343925e-002f, 8.247754e-002f, 7.596349e-002f, -4.564806e-001f,
  4.815110e-002f, -1.974921e-001f, 1.521297e-001f, 7.041233e-002f, -4.311206e-001f, 1.097551e-002f, -6.019705e-002f, 8.133593e-002f, 8.092003e-002f, -4.791243e-001f,
  4.981839e-002f, -2.042397e-001f, 1.571183e-001f, 7.647291e-002f, -4.588079e-001f, 1.347512e-002f, -6.748438e-002f, 8.012060e-002f, 8.625246e-002f, -5.034851e-001f,
  5.079154e-002f, -2.082284e-001f, 1.601845e-001f, 8.010295e-002f, -4.753915e-001f, 1.493214e-002f, -7.209615e-002f, 8.053097e-002f, 8.869025e-002f, -5.146220e-001f,
  5.115428e-002f, -2.098183e-001f, 1.616442e-001f, 8.164586e-002f, -4.824401e-001f, 1.549617e-002f, -7.439378e-002f, 8.226457e-002f, 8.869025e-002f, -5.146220e-001f,
  5.262012e-002f, -2.156890e-001f, 1.658408e-001f, 8.686077e-002f, -5.062641e-001f, 1.828176e-002f, -8.259771e-002f, 8.116491e-002f, 9.448011e-002f, -5.410725e-001f,
  5.275690e-002f, -2.163880e-001f, 1.666971e-001f, 8.762583e-002f, -5.097592e-001f, 1.957723e-002f, -8.690981e-002f, 8.218029e-002f, 9.625778e-002f, -5.491937e-001f,
  5.308117e-002f, -2.178152e-001f, 1.680205e-001f, 8.901623e-002f, -5.161112e-001f, 2.055413e-002f, -9.040991e-002f, 8.370949e-002f, 9.714074e-002f, -5.532275e-001f,
  5.346084e-002f, -2.194524e-001f, 1.694658e-001f, 9.058167e-002f, -5.232628e-001f, 2.126169e-002f, -9.321952e-002f, 8.566081e-002f, 9.727464e-002f, -5.538391e-001f,
  5.340730e-002f, -2.194556e-001f, 1.699814e-001f, 9.079207e-002f, -5.242240e-001f, 2.198816e-002f, -9.610607e-002f, 8.766997e-002f, 9.740869e-002f, -5.544516e-001f,
  5.379434e-002f, -2.211218e-001f, 1.714463e-001f, 9.238285e-002f, -5.314913e-001f, 2.300140e-002f, -9.979504e-002f, 8.943633e-002f, 9.821648e-002f, -5.581419e-001f,
  5.357832e-002f, -2.205580e-001f, 1.717542e-001f, 9.216942e-002f, -5.305163e-001f, 2.366175e-002f, -1.025583e-001f, 9.169130e-002f, 9.808143e-002f, -5.575249e-001f,
  5.320819e-002f, -2.194730e-001f, 1.719159e-001f, 9.158461e-002f, -5.278447e-001f, 2.466864e-002f, -1.062925e-001f, 9.365660e-002f, 9.875831e-002f, -5.606172e-001f,
  5.316330e-002f, -2.196107e-001f, 1.727631e-001f, 9.200963e-002f, -5.297863e-001f, 2.536254e-002f, -1.092020e-001f, 9.604407e-002f, 9.860565e-002f, -5.599198e-001f,
  5.382117e-002f, -2.222588e-001f, 1.746875e-001f, 9.437466e-002f, -5.405908e-001f, 2.459307e-002f, -1.081082e-001f, 9.995119e-002f, 9.484689e-002f, -5.427481e-001f,
  5.382117e-002f, -2.222588e-001f, 1.746875e-001f, 9.437466e-002f, -5.405908e-001f, 2.049723e-002f, -9.010338e-002f, 8.330486e-002f, 9.484689e-002f, -5.427481e-001f,
  5.382117e-002f, -2.222588e-001f, 1.746875e-001f, 9.437466e-002f, -5.405908e-001f, 1.981478e-002f, -8.710341e-002f, 8.053125e-002f, 9.484689e-002f, -5.427481e-001f,
  5.382117e-002f, -2.222588e-001f, 1.746875e-001f, 9.437466e-002f, -5.405908e-001f, 1.915505e-002f, -8.420334e-002f, 7.784999e-002f, 9.484689e-002f, -5.427481e-001f,
  5.382117e-002f, -2.222588e-001f, 1.746875e-001f, 9.437466e-002f, -5.405908e-001f, 1.851729e-002f, -8.139981e-002f, 7.525800e-002f, 9.484689e-002f, -5.427481e-001f,
  5.382117e-002f, -2.222588e-001f, 1.746875e-001f, 9.437466e-002f, -5.405908e-001f, 1.790076e-002f, -7.868964e-002f, 7.275231e-002f, 9.484689e-002f, -5.427481e-001f,
  5.382117e-002f, -2.222588e-001f, 1.746875e-001f, 9.437466e-002f, -5.405908e-001f, 1.730476e-002f, -7.606969e-002f, 7.033005e-002f, 9.484689e-002f, -5.427481e-001f,
  5.382117e-002f, -2.222588e-001f, 1.746875e-001f, 9.437466e-002f, -5.405908e-001f, 1.672861e-002f, -7.353698e-002f, 6.798843e-002f, 9.484689e-002f, -5.427481e-001f,
  5.382117e-002f, -2.222588e-001f, 1.746875e-001f, 9.437466e-002f, -5.405908e-001f, 1.617163e-002f, -7.108859e-002f, 6.572478e-002f, 9.484689e-002f, -5.427481e-001f,
  5.382117e-002f, -2.222588e-001f, 1.746875e-001f, 9.437466e-002f, -5.405908e-001f, 1.563321e-002f, -6.872172e-002f, 6.353650e-002f, 9.484689e-002f, -5.427481e-001f,
  5.382117e-002f, -2.222588e-001f, 1.746875e-001f, 9.437466e-002f, -5.405908e-001f, 1.511270e-002f, -6.643365e-002f, 6.142107e-002f, 9.484689e-002f, -5.427481e-001f,
  5.382117e-002f, -2.222588e-001f, 1.746875e-001f, 9.437466e-002f, -5.405908e-001f, 1.460953e-002f, -6.422177e-002f, 5.937608e-002f, 9.484689e-002f, -5.427481e-001f,
  -1.271695e-001f, 1.515862e-001f, -1.826359e-002f, 5.863558e-002f, -4.991440e-001f, 0.000000e+000f, -3.451962e-002f, 4.564539e-002f, 0.000000e+000f, -4.333013e-001f,
  -1.271695e-001f, 1.688812e-001f, -3.652719e-002f, 1.172712e-001f, -5.671440e-001f, 0.000000e+000f, -3.451962e-002f, 4.564539e-002f, 0.000000e+000f, -4.333013e-001f,
  -1.271695e-001f, 1.861763e-001f, -5.479078e-002f, 1.759067e-001f, -6.351440e-001f, 0.000000e+000f, -3.451962e-002f, 4.564539e-002f, 0.000000e+000f, -4.333013e-001f,
  -1.271695e-001f, 2.034713e-001f, -7.305438e-002f, 2.345423e-001f, -7.031440e-001f, 0.000000e+000f, -3.451962e-002f, 4.564539e-002f, 0.000000e+000f, -4.333013e-001f,
  -1.271695e-001f, 2.207664e-001f, -9.131797e-002f, 2.931779e-001f, -7.711440e-001f, 0.000000e+000f, -3.451962e-002f, 4.564539e-002f, 0.000000e+000f, -4.333013e-001f,
  0.000000e+000f, -5.816212e-002f, 1.657780e-001f, 0.000000e+000f, -1.094468e-001f,
  2.726453e-002f, -1.072619e-001f, 8.422706e-002f, -4.673098e-003f, -8.809808e-002f, -2.573041e-002f, 3.138072e-002f, 1.195918e-001f, -1.537864e-002f, -3.919058e-002f,
  3.215918e-002f, -1.258626e-001f, 9.747963e-002f, 1.292757e-002f, -1.685055e-001f, -3.444512e-003f, -2.128181e-002f, 8.864241e-002f, 4.574333e-002f, -3.184220e-001f,
  4.037884e-002f, -1.571335e-001f, 1.198333e-001f, 4.254838e-002f, -3.038261e-001f, 2.986512e-003f, -3.712198e-002f, 8.154519e-002f, 6.219478e-002f, -3.935793e-001f,
  4.485694e-002f, -1.741952e-001f, 1.320835e-001f, 5.873235e-002f, -3.777614e-001f, 8.083137e-003f, -4.997052e-002f, 7.676177e-002f, 7.468842e-002f, -4.506556e-001f,
  4.809397e-002f, -1.865182e-001f, 1.409097e-001f, 7.041233e-002f, -4.311206e-001f, 1.096249e-002f, -5.767766e-002f, 7.533715e-002f, 8.092003e-002f, -4.791243e-001f,
  5.001149e-002f, -1.938551e-001f, 1.462438e-001f, 7.739962e-002f, -4.630415e-001f, 1.388180e-002f, -6.556699e-002f, 7.410732e-002f, 8.709927e-002f, -5.073537e-001f,
  5.082659e-002f, -1.970721e-001f, 1.487910e-001f, 8.055082e-002f, -4.774376e-001f, 1.501975e-002f, -6.925618e-002f, 7.537769e-002f, 8.837586e-002f, -5.131857e-001f,
  5.199399e-002f, -2.015681e-001f, 1.521220e-001f, 8.485875e-002f, -4.971180e-001f, 1.709348e-002f, -7.525452e-002f, 7.562751e-002f, 9.203843e-002f, -5.299179e-001f,
  5.271600e-002f, -2.044080e-001f, 1.543509e-001f, 8.763233e-002f, -5.097890e-001f, 1.938707e-002f, -8.185709e-002f, 7.581340e-002f, 9.614782e-002f, -5.486913e-001f,
  5.301820e-002f, -2.057176e-001f, 1.556285e-001f, 8.901623e-002f, -5.161112e-001f, 2.052974e-002f, -8.571826e-002f, 7.753565e-002f, 9.714074e-002f, -5.532275e-001f,
  5.339586e-002f, -2.073019e-001f, 1.570760e-001f, 9.064920e-002f, -5.235713e-001f, 2.136062e-002f, -8.885723e-002f, 7.973245e-002f, 9.725166e-002f, -5.537342e-001f,
  5.348595e-002f, -2.078711e-001f, 1.579666e-001f, 9.139155e-002f, -5.269626e-001f, 2.237455e-002f, -9.248624e-002f, 8.183894e-002f, 9.775857e-002f, -5.560499e-001f,
  5.367061e-002f, -2.087892e-001f, 1.590832e-001f, 9.245455e-002f, -5.318189e-001f, 2.336831e-002f, -9.610722e-002f, 8.408634e-002f, 9.813712e-002f, -5.577793e-001f,
  5.320379e-002f, -2.074889e-001f, 1.591694e-001f, 9.164947e-002f, -5.281410e-001f, 2.442628e-002f, -9.993071e-002f, 8.638929e-002f, 9.859815e-002f, -5.598855e-001f,
  5.310023e-002f, -2.074926e-001f, 1.600213e-001f, 9.200963e-002f, -5.297863e-001f, 2.533245e-002f, -1.034156e-001f, 8.896052e-002f, 9.860565e-002f, -5.599198e-001f,
  5.375732e-002f, -2.099909e-001f, 1.618038e-001f, 9.437466e-002f, -5.405908e-001f, 2.103509e-002f, -8.777051e-002f, 7.927966e-002f, 9.484689e-002f, -5.427481e-001f,
  5.375732e-002f, -2.099909e-001f, 1.618038e-001f, 9.437466e-002f, -5.405908e-001f, 2.019748e-002f, -8.427554e-002f, 7.612280e-002f, 9.484689e-002f, -5.427481e-001f,
  5.375732e-002f, -2.099909e-001f, 1.618038e-001f, 9.437466e-002f, -5.405908e-001f, 1.939323e-002f, -8.091974e-002f, 7.309163e-002f, 9.484689e-002f, -5.427481e-001f,
  5.375732e-002f, -2.099909e-001f, 1.618038e-001f, 9.437466e-002f, -5.405908e-001f, 1.862100e-002f, -7.769757e-002f, 7.018117e-002f, 9.484689e-002f, -5.427481e-001f,
  5.375732e-002f, -2.099909e-001f, 1.618038e-001f, 9.437466e-002f, -5.405908e-001f, 1.787953e-002f, -7.460370e-002f, 6.738660e-002f, 9.484689e-002f, -5.427481e-001f,
  5.375732e-002f, -2.099909e-001f, 1.618038e-001f, 9.437466e-002f, -5.405908e-001f, 1.716758e-002f, -7.163303e-002f, 6.470331e-002f, 9.484689e-002f, -5.427481e-001f,
  5.375732e-002f, -2.099909e-001f, 1.618038e-001f, 9.437466e-002f, -5.405908e-001f, 1.648397e-002f, -6.878065e-002f, 6.212686e-002f, 9.484689e-002f, -5.427481e-001f,
  5.375732e-002f, -2.099909e-001f, 1.618038e-001f, 9.437466e-002f, -5.405908e-001f, 1.582759e-002f, -6.604184e-002f, 5.965301e-002f, 9.484689e-002f, -5.427481e-001f,
  5.375732e-002f, -2.099909e-001f, 1.618038e-001f, 9.437466e-002f, -5.405908e-001f, 1.519735e-002f, -6.341210e-002f, 5.727767e-002f, 9.484689e-002f, -5.427481e-001f,
  5.375732e-002f, -2.099909e-001f, 1.618038e-001f, 9.437466e-002f, -5.405908e-001f, 1.459220e-002f, -6.088707e-002f, 5.499691e-002f, 9.484689e-002f, -5.427481e-001f,
  -1.200557e-001f, 1.431066e-001f, -1.724194e-002f, 5.863558e-002f, -4.991440e-001f, 0.000000e+000f, -3.258862e-002f, 4.309203e-002f, 0.000000e+000f, -4.333013e-001f,
  -1.200557e-001f, 1.594342e-001f, -3.448389e-002f, 1.172712e-001f, -5.671440e-001f, 0.000000e+000f, -3.258862e-002f, 4.309203e-002f, 0.000000e+000f, -4.333013e-001f,
  -1.200557e-001f, 1.757617e-001f, -5.172583e-002f, 1.759067e-001f, -6.351440e-001f, 0.000000e+000f, -3.258862e-002f, 4.309203e-002f, 0.000000e+000f, -4.333013e-001f,
  -1.200557e-001f, 1.920893e-001f, -6.896778e-002f, 2.345423e-001f, -7.031440e-001f, 0.000000e+000f, -3.258862e-002f, 4.309203e-002f, 0.000000e+000f, -4.333013e-001f,
  0.000000e+000f, -5.775018e-002f, 1.536629e-001f, 0.000000e+000f, -1.094468e-001f,
  2.707143e-002f, -1.013735e-001f, 7.807174e-002f, -4.673098e-003f, -8.809808e-002f, -2.554816e-002f, 2.631830e-002f, 1.108520e-001f, -1.537864e-002f, -3.919058e-002f,
  3.371406e-002f, -1.253637e-001f, 9.487589e-002f, 1.939350e-002f, -1.980447e-001f, -2.090424e-003f, -2.475985e-002f, 8.068168e-002f, 4.924789e-002f, -3.344323e-001f,
  4.110161e-002f, -1.520702e-001f, 1.136336e-001f, 4.620719e-002f, -3.205411e-001f, 4.013139e-003f, -3.869757e-002f, 7.455443e-002f, 6.486075e-002f, -4.057586e-001f,
  4.561859e-002f, -1.684359e-001f, 1.251995e-001f, 6.266959e-002f, -3.957484e-001f, 9.086784e-003f, -5.069262e-002f, 7.054985e-002f, 7.707912e-002f, -4.615773e-001f,
  4.854099e-002f, -1.790042e-001f, 1.326295e-001f, 7.328348e-002f, -4.442372e-001f, 1.188140e-002f, -5.769202e-002f, 6.938816e-002f, 8.308036e-002f, -4.889936e-001f,
  5.025729e-002f, -1.852818e-001f, 1.371817e-001f, 7.964858e-002f, -4.733157e-001f, 1.466458e-002f, -6.490969e-002f, 6.888831e-002f, 8.859837e-002f, -5.142022e-001f,
  5.073171e-002f, -1.871451e-001f, 1.387807e-001f, 8.164586e-002f, -4.824401e-001f, 1.536816e-002f, -6.743592e-002f, 7.062879e-002f, 8.869025e-002f, -5.146220e-001f,
  5.232550e-002f, -1.928846e-001f, 1.427683e-001f, 8.738933e-002f, -5.086788e-001f, 1.854678e-002f, -7.553404e-002f, 6.967194e-002f, 9.526170e-002f, -5.446432e-001f,
  5.245228e-002f, -1.935627e-001f, 1.436753e-001f, 8.825783e-002f, -5.126465e-001f, 1.999797e-002f, -8.001959e-002f, 7.133280e-002f, 9.679767e-002f, -5.516601e-001f,
  5.298697e-002f, -1.956081e-001f, 1.453319e-001f, 9.040727e-002f, -5.224660e-001f, 2.096322e-002f, -8.328434e-002f, 7.318578e-002f, 9.729700e-002f, -5.539413e-001f,
  5.302198e-002f, -1.960103e-001f, 1.461545e-001f, 9.104640e-002f, -5.253859e-001f, 2.200442e-002f, -8.695048e-002f, 7.556901e-002f, 9.756729e-002f, -5.551761e-001f,
  5.334304e-002f, -1.973412e-001f, 1.474224e-001f, 9.252777e-002f, -5.321534e-001f, 2.308547e-002f, -9.056804e-002f, 7.754092e-002f, 9.819869e-002f, -5.580606e-001f,
  5.282696e-002f, -1.960112e-001f, 1.475373e-001f, 9.164947e-002f, -5.281410e-001f, 2.425328e-002f, -9.462809e-002f, 8.007595e-002f, 9.859815e-002f, -5.598855e-001f,
  5.272413e-002f, -1.960343e-001f, 1.483269e-001f, 9.200963e-002f, -5.297863e-001f, 2.515303e-002f, -9.791787e-002f, 8.245927e-002f, 9.860565e-002f, -5.599198e-001f,
  5.337657e-002f, -1.983913e-001f, 1.499792e-001f, 9.437466e-002f, -5.405908e-001f, 2.088610e-002f, -8.319193e-002f, 7.348590e-002f, 9.484689e-002f, -5.427481e-001f,
  5.337657e-002f, -1.983913e-001f, 1.499792e-001f, 9.437466e-002f, -5.405908e-001f, 1.991907e-002f, -7.934014e-002f, 7.008350e-002f, 9.484689e-002f, -5.427481e-001f,
  5.337657e-002f, -1.983913e-001f, 1.499792e-001f, 9.437466e-002f, -5.405908e-001f, 1.912591e-002f, -7.618087e-002f, 6.729282e-002f, 9.484689e-002f, -5.427481e-001f,
  5.337657e-002f, -1.983913e-001f, 1.499792e-001f, 9.437466e-002f, -5.405908e-001f, 1.824038e-002f, -7.265369e-002f, 6.417716e-002f, 9.484689e-002f, -5.427481e-001f,
  5.337657e-002f, -1.983913e-001f, 1.499792e-001f, 9.437466e-002f, -5.405908e-001f, 1.751406e-002f, -6.976067e-002f, 6.162166e-002f, 9.484689e-002f, -5.427481e-001f,
  5.337657e-002f, -1.983913e-001f, 1.499792e-001f, 9.437466e-002f, -5.405908e-001f, 1.670316e-002f, -6.653074e-002f, 5.876858e-002f, 9.484689e-002f, -5.427481e-001f,
  5.337657e-002f, -1.983913e-001f, 1.499792e-001f, 9.437466e-002f, -5.405908e-001f, 1.603805e-002f, -6.388153e-002f, 5.642845e-002f, 9.484689e-002f, -5.427481e-001f,
  5.337657e-002f, -1.983913e-001f, 1.499792e-001f, 9.437466e-002f, -5.405908e-001f, 1.539942e-002f, -6.133781e-002f, 5.418150e-002f, 9.484689e-002f, -5.427481e-001f,
  5.337657e-002f, -1.983913e-001f, 1.499792e-001f, 9.437466e-002f, -5.405908e-001f, 1.468643e-002f, -5.849787e-002f, 5.167290e-002f, 9.484689e-002f, -5.427481e-001f,
  5.337657e-002f, -1.983913e-001f, 1.499792e-001f, 9.437466e-002f, -5.405908e-001f, 1.448885e-002f, -5.771088e-002f, 5.097773e-002f, 9.484689e-002f, -5.427481e-001f,
  -1.133399e-001f, 1.351013e-001f, -1.627745e-002f, 5.863558e-002f, -4.991440e-001f, 0.000000e+000f, -3.076564e-002f, 4.068150e-002f, 0.000000e+000f, -4.333013e-001f,
  -1.133399e-001f, 1.505156e-001f, -3.255489e-002f, 1.172712e-001f, -5.671440e-001f, 0.000000e+000f, -3.076564e-002f, 4.068150e-002f, 0.000000e+000f, -4.333013e-001f,
  -1.133399e-001f, 1.659298e-001f, -4.883234e-002f, 1.759067e-001f, -6.351440e-001f, 0.000000e+000f, -3.076564e-002f, 4.068150e-002f, 0.000000e+000f, -4.333013e-001f,
  0.000000e+000f, -5.743370e-002f, 1.479812e-001f, 0.000000e+000f, -1.094468e-001f,
  2.692308e-002f, -9.854924e-002f, 7.518501e-002f, -4.673098e-003f, -8.809808e-002f, -1.451371e-002f, 1.423398e-003f, 9.268383e-002f, 1.516441e-002f, -1.787243e-001f,
  3.759252e-002f, -1.362018e-001f, 1.013684e-001f, 3.423006e-002f, -2.658244e-001f, 8.556827e-004f, -3.124548e-002f, 7.482516e-002f, 5.681095e-002f, -3.689836e-001f,
  4.429515e-002f, -1.598892e-001f, 1.179039e-001f, 5.873235e-002f, -3.777614e-001f, 7.981904e-003f, -4.715991e-002f, 6.852114e-002f, 7.468842e-002f, -4.506556e-001f,
  4.827498e-002f, -1.739554e-001f, 1.277255e-001f, 7.328348e-002f, -4.442372e-001f, 1.181629e-002f, -5.638016e-002f, 6.682250e-002f, 8.308036e-002f, -4.889936e-001f,
  5.009593e-002f, -1.804778e-001f, 1.324424e-001f, 8.010295e-002f, -4.753915e-001f, 1.472764e-002f, -6.378880e-002f, 6.658391e-002f, 8.869025e-002f, -5.146220e-001f,
  5.134282e-002f, -1.849902e-001f, 1.357912e-001f, 8.485875e-002f, -4.971180e-001f, 1.687940e-002f, -6.969184e-002f, 6.750864e-002f, 9.203843e-002f, -5.299179e-001f,
  5.204710e-002f, -1.876403e-001f, 1.379437e-001f, 8.773415e-002f, -5.102541e-001f, 1.949040e-002f, -7.668990e-002f, 6.820607e-002f, 9.640899e-002f, -5.498845e-001f,
  5.269660e-002f, -1.900956e-001f, 1.399582e-001f, 9.040727e-002f, -5.224660e-001f, 2.084834e-002f, -8.107115e-002f, 7.047971e-002f, 9.729700e-002f, -5.539413e-001f,
  5.281609e-002f, -1.908111e-001f, 1.410083e-001f, 9.139155e-002f, -5.269626e-001f, 2.209433e-002f, -8.528034e-002f, 7.305325e-002f, 9.775857e-002f, -5.560499e-001f,
  5.284454e-002f, -1.912725e-001f, 1.420083e-001f, 9.216942e-002f, -5.305163e-001f, 2.333769e-002f, -8.955441e-002f, 7.581139e-002f, 9.808143e-002f, -5.575249e-001f,
  5.239243e-002f, -1.902873e-001f, 1.424713e-001f, 9.166070e-002f, -5.281923e-001f, 2.485205e-002f, -9.450624e-002f, 7.851674e-002f, 9.894867e-002f, -5.614868e-001f,
  5.308407e-002f, -1.928309e-001f, 1.444336e-001f, 9.437466e-002f, -5.405908e-001f, 2.077164e-002f, -8.098571e-002f, 7.076873e-002f, 9.484689e-002f, -5.427481e-001f,
  5.308407e-002f, -1.928309e-001f, 1.444336e-001f, 9.437466e-002f, -5.405908e-001f, 1.967621e-002f, -7.671477e-002f, 6.703660e-002f, 9.484689e-002f, -5.427481e-001f,
  5.308407e-002f, -1.928309e-001f, 1.444336e-001f, 9.437466e-002f, -5.405908e-001f, 1.863855e-002f, -7.266906e-002f, 6.350129e-002f, 9.484689e-002f, -5.427481e-001f,
  5.308407e-002f, -1.928309e-001f, 1.444336e-001f, 9.437466e-002f, -5.405908e-001f, 1.765561e-002f, -6.883672e-002f, 6.015243e-002f, 9.484689e-002f, -5.427481e-001f,
  5.308407e-002f, -1.928309e-001f, 1.444336e-001f, 9.437466e-002f, -5.405908e-001f, 1.672450e-002f, -6.520648e-002f, 5.698017e-002f, 9.484689e-002f, -5.427481e-001f,
  5.308407e-002f, -1.928309e-001f, 1.444336e-001f, 9.437466e-002f, -5.405908e-001f, 1.584250e-002f, -6.176768e-002f, 5.397521e-002f, 9.484689e-002f, -5.427481e-001f,
  5.308407e-002f, -1.928309e-001f, 1.444336e-001f, 9.437466e-002f, -5.405908e-001f, 1.500702e-002f, -5.851024e-002f, 5.112872e-002f, 9.484689e-002f, -5.427481e-001f,
  5.308407e-002f, -1.928309e-001f, 1.444336e-001f, 9.437466e-002f, -5.405908e-001f, 1.440945e-002f, -5.618040e-002f, 4.909281e-002f, 9.484689e-002f, -5.427481e-001f,
  -1.101242e-001f, 1.312682e-001f, -1.581562e-002f, 5.863558e-002f, -4.991440e-001f, 0.000000e+000f, -2.989276e-002f, 3.952728e-002f, 0.000000e+000f, -4.333013e-001f,
  -1.101242e-001f, 1.462451e-001f, -3.163124e-002f, 1.172712e-001f, -5.671440e-001f, 0.000000e+000f, -2.989276e-002f, 3.952728e-002f, 0.000000e+000f, -4.333013e-001f,
  -1.101242e-001f, 1.612220e-001f, -4.744686e-002f, 1.759067e-001f, -6.351440e-001f, 0.000000e+000f, -2.989276e-002f, 3.952728e-002f, 0.000000e+000f, -4.333013e-001f,
  0.000000e+000f, -5.705226e-002f, 1.425346e-001f, 0.000000e+000f, -1.094468e-001f,
  2.674427e-002f, -9.580225e-002f, 7.241775e-002f, -4.673098e-003f, -8.809808e-002f, -7.496543e-003f, -1.365438e-002f, 8.090327e-002f, 3.447330e-002f, -2.669357e-001f,
  4.148735e-002f, -1.466810e-001f, 1.075088e-001f, 4.944998e-002f, -3.353556e-001f, 4.941774e-003f, -3.967681e-002f, 6.828073e-002f, 6.735577e-002f, -4.171569e-001f,
  4.717623e-002f, -1.663550e-001f, 1.211530e-001f, 7.041233e-002f, -4.311206e-001f, 1.075330e-002f, -5.279232e-002f, 6.477427e-002f, 8.092003e-002f, -4.791243e-001f,
  4.976322e-002f, -1.753857e-001f, 1.275677e-001f, 8.010295e-002f, -4.753915e-001f, 1.462982e-002f, -6.222050e-002f, 6.413322e-002f, 8.869025e-002f, -5.146220e-001f,
  5.155478e-002f, -1.816646e-001f, 1.320723e-001f, 8.686077e-002f, -5.062641e-001f, 1.791162e-002f, -7.062155e-002f, 6.463808e-002f, 9.448011e-002f, -5.410725e-001f,
  5.200649e-002f, -1.834880e-001f, 1.338081e-001f, 8.901623e-002f, -5.161112e-001f, 2.013799e-002f, -7.699484e-002f, 6.666452e-002f, 9.714074e-002f, -5.532275e-001f,
  5.232602e-002f, -1.849113e-001f, 1.353697e-001f, 9.079207e-002f, -5.242240e-001f, 2.154298e-002f, -8.176744e-002f, 6.981857e-002f, 9.740869e-002f, -5.544516e-001f,
  5.249357e-002f, -1.858950e-001f, 1.367815e-001f, 9.216942e-002f, -5.305163e-001f, 2.318269e-002f, -8.714581e-002f, 7.302108e-002f, 9.808143e-002f, -5.575249e-001f,
  5.208695e-002f, -1.852008e-001f, 1.375850e-001f, 9.200963e-002f, -5.297863e-001f, 2.484905e-002f, -9.269641e-002f, 7.648753e-002f, 9.860565e-002f, -5.599198e-001f,
  5.273151e-002f, -1.874245e-001f, 1.391176e-001f, 9.437466e-002f, -5.405908e-001f, 2.008224e-002f, -7.672658e-002f, 6.634229e-002f, 9.484689e-002f, -5.427481e-001f,
  5.273151e-002f, -1.874245e-001f, 1.391176e-001f, 9.437466e-002f, -5.405908e-001f, 1.876724e-002f, -7.170247e-002f, 6.199814e-002f, 9.484689e-002f, -5.427481e-001f,
  5.273151e-002f, -1.874245e-001f, 1.391176e-001f, 9.437466e-002f, -5.405908e-001f, 1.753835e-002f, -6.700733e-002f, 5.793846e-002f, 9.484689e-002f, -5.427481e-001f,
  5.273151e-002f, -1.874245e-001f, 1.391176e-001f, 9.437466e-002f, -5.405908e-001f, 1.638992e-002f, -6.261964e-002f, 5.414460e-002f, 9.484689e-002f, -5.427481e-001f,
  5.273151e-002f, -1.874245e-001f, 1.391176e-001f, 9.437466e-002f, -5.405908e-001f, 1.531670e-002f, -5.851926e-002f, 5.059917e-002f, 9.484689e-002f, -5.427481e-001f,
  5.273151e-002f, -1.874245e-001f, 1.391176e-001f, 9.437466e-002f, -5.405908e-001f, 1.431375e-002f, -5.468737e-002f, 4.728590e-002f, 9.484689e-002f, -5.427481e-001f,
  -1.069998e-001f, 1.275439e-001f, -1.536690e-002f, 5.863558e-002f, -4.991440e-001f, 0.000000e+000f, -2.904464e-002f, 3.840581e-002f, 0.000000e+000f, -4.333013e-001f,
  -1.069998e-001f, 1.420958e-001f, -3.073380e-002f, 1.172712e-001f, -5.671440e-001f, 0.000000e+000f, -2.904464e-002f, 3.840581e-002f, 0.000000e+000f, -4.333013e-001f,
  0.000000e+000f, -5.661182e-002f, 1.373123e-001f, 0.000000e+000f, -1.094468e-001f,
  2.653780e-002f, -9.313046e-002f, 6.976448e-002f, -4.673098e-003f, -8.809808e-002f, -1.198060e-004f, -2.869628e-002f, 7.030785e-002f, 5.430071e-002f, -3.575158e-001f,
  4.681203e-002f, -1.616624e-001f, 1.167141e-001f, 7.041233e-002f, -4.311206e-001f, 1.067029e-002f, -5.160787e-002f, 6.240104e-002f, 8.092003e-002f, -4.791243e-001f,
  4.973170e-002f, -1.717536e-001f, 1.240137e-001f, 8.164586e-002f, -4.824401e-001f, 1.506523e-002f, -6.256156e-002f, 6.311350e-002f, 8.869025e-002f, -5.146220e-001f,
  5.160500e-002f, -1.783141e-001f, 1.289056e-001f, 8.901623e-002f, -5.161112e-001f, 1.998252e-002f, -7.494552e-002f, 6.422204e-002f, 9.714074e-002f, -5.532275e-001f,
  5.229834e-002f, -1.810794e-001f, 1.315339e-001f, 9.238285e-002f, -5.314913e-001f, 2.236174e-002f, -8.252776e-002f, 6.861568e-002f, 9.821648e-002f, -5.581419e-001f,
  5.168485e-002f, -1.800079e-001f, 1.325441e-001f, 9.200963e-002f, -5.297863e-001f, 2.465721e-002f, -9.018551e-002f, 7.368515e-002f, 9.860565e-002f, -5.599198e-001f,
  5.232442e-002f, -1.821679e-001f, 1.340205e-001f, 9.437466e-002f, -5.405908e-001f, 1.926374e-002f, -7.219681e-002f, 6.178369e-002f, 9.484689e-002f, -5.427481e-001f,
  5.232442e-002f, -1.821679e-001f, 1.340205e-001f, 9.437466e-002f, -5.405908e-001f, 1.740295e-002f, -6.522294e-002f, 5.581568e-002f, 9.484689e-002f, -5.427481e-001f,
  5.232442e-002f, -1.821679e-001f, 1.340205e-001f, 9.437466e-002f, -5.405908e-001f, 1.572191e-002f, -5.892271e-002f, 5.042415e-002f, 9.484689e-002f, -5.427481e-001f,
  5.232442e-002f, -1.821679e-001f, 1.340205e-001f, 9.437466e-002f, -5.405908e-001f, 1.420325e-002f, -5.323105e-002f, 4.555341e-002f, 9.484689e-002f, -5.427481e-001f,
  -1.039640e-001f, 1.239252e-001f, -1.493091e-002f, 5.863558e-002f, -4.991440e-001f, 0.000000e+000f, -2.822058e-002f, 3.731616e-002f, 0.000000e+000f, -4.333013e-001f,
  0.000000e+000f, -5.611796e-002f, 1.323042e-001f, 0.000000e+000f, -1.094468e-001f,
  2.630630e-002f, -9.053187e-002f, 6.721997e-002f, -4.673098e-003f, -8.809808e-002f, 1.057721e-002f, -5.043949e-002f, 6.012510e-002f, 8.092003e-002f, -4.791243e-001f,
  5.115483e-002f, -1.732853e-001f, 1.242040e-001f, 8.901623e-002f, -5.161112e-001f, 1.980820e-002f, -7.294679e-002f, 6.187968e-002f, 9.714074e-002f, -5.532275e-001f,
  5.123397e-002f, -1.749589e-001f, 1.277098e-001f, 9.200963e-002f, -5.297863e-001f, 2.444212e-002f, -8.773920e-002f, 7.099764e-002f, 9.860565e-002f, -5.599198e-001f,
  5.186797e-002f, -1.770570e-001f, 1.291324e-001f, 9.437466e-002f, -5.405908e-001f, 1.725114e-002f, -6.348264e-002f, 5.377992e-002f, 9.484689e-002f, -5.427481e-001f,
  5.186797e-002f, -1.770570e-001f, 1.291324e-001f, 9.437466e-002f, -5.405908e-001f, 1.407934e-002f, -5.181073e-002f, 4.389195e-002f, 9.484689e-002f, -5.427481e-001f,
  // Total number of coefficients: 3485
  // Maximum number of elevation coefficients: 5


  //Lite coefficients
  // Headphones
  // 16000 Hz sample rates

    // Coefficients
  // Generated by HRTFConv V5.90d on Wed Feb 10 11:00:01 1999
  0.000000e+000f, -2.369178e-002f, 1.142453e-001f, 0.000000e+000f, -2.071068e-001f,
  1.437573e-002f, -8.439586e-002f, 7.268877e-002f, 4.518498e-002f, -3.161930e-001f, -5.866495e-003f, 1.358506e-002f, 7.090517e-002f, 3.088132e-002f, -2.816609e-001f,
  1.640816e-002f, -9.612914e-002f, 8.200810e-002f, 7.915296e-002f, -3.981989e-001f, 1.449257e-003f, -1.826702e-002f, 5.438655e-002f, 1.229010e-001f, -5.038159e-001f,
  1.875637e-002f, -1.096901e-001f, 9.279801e-002f, 1.184388e-001f, -4.930434e-001f, 3.438519e-003f, -2.719579e-002f, 5.118583e-002f, 1.456290e-001f, -5.586863e-001f,
  2.018760e-002f, -1.179649e-001f, 9.941984e-002f, 1.424641e-001f, -5.510456e-001f, 5.088857e-003f, -3.476798e-002f, 4.932459e-002f, 1.630739e-001f, -6.008020e-001f,
  2.109820e-002f, -1.232233e-001f, 1.036019e-001f, 1.576948e-001f, -5.878157e-001f, 6.013123e-003f, -3.916612e-002f, 4.904100e-002f, 1.714958e-001f, -6.211342e-001f,
  2.162559e-002f, -1.262893e-001f, 1.061234e-001f, 1.666926e-001f, -6.095384e-001f, 6.941558e-003f, -4.367896e-002f, 4.921358e-002f, 1.791430e-001f, -6.395962e-001f,
  2.177089e-002f, -1.271715e-001f, 1.069987e-001f, 1.694923e-001f, -6.162974e-001f, 7.234767e-003f, -4.537130e-002f, 5.055626e-002f, 1.792695e-001f, -6.399016e-001f,
  2.225218e-002f, -1.299429e-001f, 1.091715e-001f, 1.774757e-001f, -6.355709e-001f, 8.263597e-003f, -5.031357e-002f, 5.046508e-002f, 1.882454e-001f, -6.615713e-001f,
  2.229119e-002f, -1.302319e-001f, 1.096578e-001f, 1.786738e-001f, -6.384636e-001f, 8.797407e-003f, -5.317906e-002f, 5.187017e-002f, 1.903222e-001f, -6.665852e-001f,
  2.245151e-002f, -1.311896e-001f, 1.105480e-001f, 1.816286e-001f, -6.455971e-001f, 9.176457e-003f, -5.530734e-002f, 5.331896e-002f, 1.909956e-001f, -6.682109e-001f,
  2.246308e-002f, -1.313360e-001f, 1.109850e-001f, 1.825043e-001f, -6.477112e-001f, 9.597870e-003f, -5.771836e-002f, 5.514610e-002f, 1.913597e-001f, -6.690901e-001f,
  2.255928e-002f, -1.319400e-001f, 1.116607e-001f, 1.845287e-001f, -6.525985e-001f, 1.001768e-002f, -6.006336e-002f, 5.669221e-002f, 1.922094e-001f, -6.711413e-001f,
  2.240795e-002f, -1.312216e-001f, 1.117153e-001f, 1.833293e-001f, -6.497029e-001f, 1.048450e-002f, -6.271860e-002f, 5.864112e-002f, 1.927462e-001f, -6.724374e-001f,
  2.237901e-002f, -1.311684e-001f, 1.121319e-001f, 1.838215e-001f, -6.508910e-001f, 1.085902e-002f, -6.489794e-002f, 6.044144e-002f, 1.927563e-001f, -6.724617e-001f,
  2.257289e-002f, -1.322854e-001f, 1.130099e-001f, 1.870422e-001f, -6.586667e-001f, 9.189597e-003f, -5.544479e-002f, 5.367623e-002f, 1.876831e-001f, -6.602138e-001f,
  2.257289e-002f, -1.322854e-001f, 1.130099e-001f, 1.870422e-001f, -6.586667e-001f, 8.764119e-003f, -5.287770e-002f, 5.119102e-002f, 1.876831e-001f, -6.602138e-001f,
  2.257289e-002f, -1.322854e-001f, 1.130099e-001f, 1.870422e-001f, -6.586667e-001f, 8.415137e-003f, -5.077214e-002f, 4.915262e-002f, 1.876831e-001f, -6.602138e-001f,
  2.257289e-002f, -1.322854e-001f, 1.130099e-001f, 1.870422e-001f, -6.586667e-001f, 8.025516e-003f, -4.842139e-002f, 4.687685e-002f, 1.876831e-001f, -6.602138e-001f,
  2.257289e-002f, -1.322854e-001f, 1.130099e-001f, 1.870422e-001f, -6.586667e-001f, 7.705945e-003f, -4.649328e-002f, 4.501025e-002f, 1.876831e-001f, -6.602138e-001f,
  2.257289e-002f, -1.322854e-001f, 1.130099e-001f, 1.870422e-001f, -6.586667e-001f, 7.349159e-003f, -4.434064e-002f, 4.292627e-002f, 1.876831e-001f, -6.602138e-001f,
  2.257289e-002f, -1.322854e-001f, 1.130099e-001f, 1.870422e-001f, -6.586667e-001f, 7.056520e-003f, -4.257502e-002f, 4.121697e-002f, 1.876831e-001f, -6.602138e-001f,
  2.257289e-002f, -1.322854e-001f, 1.130099e-001f, 1.870422e-001f, -6.586667e-001f, 6.775534e-003f, -4.087971e-002f, 3.957574e-002f, 1.876831e-001f, -6.602138e-001f,
  2.257289e-002f, -1.322854e-001f, 1.130099e-001f, 1.870422e-001f, -6.586667e-001f, 6.461827e-003f, -3.898698e-002f, 3.774338e-002f, 1.876831e-001f, -6.602138e-001f,
  2.257289e-002f, -1.322854e-001f, 1.130099e-001f, 1.870422e-001f, -6.586667e-001f, 6.374894e-003f, -3.846248e-002f, 3.723561e-002f, 1.876831e-001f, -6.602138e-001f,
  -1.472840e-001f, 1.735326e-001f, -2.140780e-002f, 6.321839e-002f, -5.215599e-001f, 0.000000e+000f, -4.159502e-002f, 5.038325e-002f, 0.000000e+000f, -4.531070e-001f,
  -1.472840e-001f, 1.941524e-001f, -4.281561e-002f, 1.264368e-001f, -5.915599e-001f, 0.000000e+000f, -4.159502e-002f, 5.038325e-002f, 0.000000e+000f, -4.531070e-001f,
  -1.472840e-001f, 2.147722e-001f, -6.422341e-002f, 1.896552e-001f, -6.615599e-001f, 0.000000e+000f, -4.159502e-002f, 5.038325e-002f, 0.000000e+000f, -4.531070e-001f,
  0.000000e+000f, -3.602489e-002f, 1.376276e-001f, 0.000000e+000f, -2.071068e-001f,
  2.185923e-002f, -1.064308e-001f, 8.756581e-002f, 4.518498e-002f, -3.161930e-001f, -8.920386e-003f, 1.172050e-002f, 8.541716e-002f, 3.088132e-002f, -2.816609e-001f,
  2.410272e-002f, -1.171336e-001f, 9.571042e-002f, 6.983598e-002f, -3.757057e-001f, 1.545004e-003f, -2.330636e-002f, 6.648899e-002f, 1.177575e-001f, -4.913986e-001f,
  2.803112e-002f, -1.358854e-001f, 1.100136e-001f, 1.130620e-001f, -4.800627e-001f, 4.712937e-003f, -3.431359e-002f, 6.230428e-002f, 1.417770e-001f, -5.493869e-001f,
  3.017967e-002f, -1.461502e-001f, 1.178706e-001f, 1.367540e-001f, -5.372602e-001f, 7.207011e-003f, -4.315640e-002f, 5.968573e-002f, 1.596904e-001f, -5.926334e-001f,
  3.171028e-002f, -1.534573e-001f, 1.234467e-001f, 1.536009e-001f, -5.779321e-001f, 8.645862e-003f, -4.853273e-002f, 5.922506e-002f, 1.684762e-001f, -6.138444e-001f,
  3.260377e-002f, -1.577389e-001f, 1.267636e-001f, 1.635263e-001f, -6.018942e-001f, 1.009296e-002f, -5.398204e-002f, 5.892281e-002f, 1.770750e-001f, -6.346035e-001f,
  3.298079e-002f, -1.595890e-001f, 1.283289e-001f, 1.679588e-001f, -6.125952e-001f, 1.073073e-002f, -5.674365e-002f, 6.016484e-002f, 1.788365e-001f, -6.388562e-001f,
  3.351568e-002f, -1.621647e-001f, 1.303621e-001f, 1.739708e-001f, -6.271095e-001f, 1.179156e-002f, -6.096546e-002f, 6.081067e-002f, 1.838608e-001f, -6.509860e-001f,
  3.384437e-002f, -1.637733e-001f, 1.317105e-001f, 1.778112e-001f, -6.363809e-001f, 1.294869e-002f, -6.555212e-002f, 6.144505e-002f, 1.894445e-001f, -6.644662e-001f,
  3.398212e-002f, -1.645003e-001f, 1.324773e-001f, 1.797181e-001f, -6.409847e-001f, 1.359736e-002f, -6.844102e-002f, 6.301425e-002f, 1.907850e-001f, -6.677024e-001f,
  3.415334e-002f, -1.653811e-001f, 1.333435e-001f, 1.819603e-001f, -6.463977e-001f, 1.411297e-002f, -7.089991e-002f, 6.488268e-002f, 1.909345e-001f, -6.680634e-001f,
  3.419526e-002f, -1.656798e-001f, 1.338726e-001f, 1.829766e-001f, -6.488514e-001f, 1.471420e-002f, -7.367684e-002f, 6.671658e-002f, 1.916173e-001f, -6.697118e-001f,
  3.427949e-002f, -1.661751e-001f, 1.345355e-001f, 1.844288e-001f, -6.523573e-001f, 1.531155e-002f, -7.646588e-002f, 6.865330e-002f, 1.921266e-001f, -6.709415e-001f,
  3.407273e-002f, -1.653968e-001f, 1.345798e-001f, 1.833293e-001f, -6.497029e-001f, 1.594236e-002f, -7.939662e-002f, 7.064305e-002f, 1.927462e-001f, -6.724374e-001f,
  3.402873e-002f, -1.653601e-001f, 1.350816e-001f, 1.838215e-001f, -6.508910e-001f, 1.651184e-002f, -8.213994e-002f, 7.281185e-002f, 1.927563e-001f, -6.724617e-001f,
  3.432354e-002f, -1.667632e-001f, 1.361393e-001f, 1.870422e-001f, -6.586667e-001f, 1.397338e-002f, -7.030886e-002f, 6.466201e-002f, 1.876831e-001f, -6.602138e-001f,
  3.432354e-002f, -1.667632e-001f, 1.361393e-001f, 1.870422e-001f, -6.586667e-001f, 1.341697e-002f, -6.750920e-002f, 6.208721e-002f, 1.876831e-001f, -6.602138e-001f,
  3.432354e-002f, -1.667632e-001f, 1.361393e-001f, 1.870422e-001f, -6.586667e-001f, 1.288271e-002f, -6.482103e-002f, 5.961494e-002f, 1.876831e-001f, -6.602138e-001f,
  3.432354e-002f, -1.667632e-001f, 1.361393e-001f, 1.870422e-001f, -6.586667e-001f, 1.236973e-002f, -6.223990e-002f, 5.724111e-002f, 1.876831e-001f, -6.602138e-001f,
  3.432354e-002f, -1.667632e-001f, 1.361393e-001f, 1.870422e-001f, -6.586667e-001f, 1.187718e-002f, -5.976154e-002f, 5.496180e-002f, 1.876831e-001f, -6.602138e-001f,
  3.432354e-002f, -1.667632e-001f, 1.361393e-001f, 1.870422e-001f, -6.586667e-001f, 1.140423e-002f, -5.738188e-002f, 5.277326e-002f, 1.876831e-001f, -6.602138e-001f,
  3.432354e-002f, -1.667632e-001f, 1.361393e-001f, 1.870422e-001f, -6.586667e-001f, 1.095012e-002f, -5.509697e-002f, 5.067186e-002f, 1.876831e-001f, -6.602138e-001f,
  3.432354e-002f, -1.667632e-001f, 1.361393e-001f, 1.870422e-001f, -6.586667e-001f, 1.051410e-002f, -5.290304e-002f, 4.865414e-002f, 1.876831e-001f, -6.602138e-001f,
  3.432354e-002f, -1.667632e-001f, 1.361393e-001f, 1.870422e-001f, -6.586667e-001f, 1.009543e-002f, -5.079647e-002f, 4.671676e-002f, 1.876831e-001f, -6.602138e-001f,
  3.432354e-002f, -1.667632e-001f, 1.361393e-001f, 1.870422e-001f, -6.586667e-001f, 9.693439e-003f, -4.877379e-002f, 4.485653e-002f, 1.876831e-001f, -6.602138e-001f,
  -1.652553e-001f, 1.947068e-001f, -2.401995e-002f, 6.321839e-002f, -5.215599e-001f, 0.000000e+000f, -4.667038e-002f, 5.653093e-002f, 0.000000e+000f, -4.531070e-001f,
  -1.652553e-001f, 2.178426e-001f, -4.803990e-002f, 1.264368e-001f, -5.915599e-001f, 0.000000e+000f, -4.667038e-002f, 5.653093e-002f, 0.000000e+000f, -4.531070e-001f,
  -1.652553e-001f, 2.409783e-001f, -7.205985e-002f, 1.896552e-001f, -6.615599e-001f, 0.000000e+000f, -4.667038e-002f, 5.653093e-002f, 0.000000e+000f, -4.531070e-001f,
  -1.652553e-001f, 2.641141e-001f, -9.607981e-002f, 2.528736e-001f, -7.315599e-001f, 0.000000e+000f, -4.667038e-002f, 5.653093e-002f, 0.000000e+000f, -4.531070e-001f,
  0.000000e+000f, -5.230771e-002f, 1.663079e-001f, 0.000000e+000f, -2.071068e-001f,
  3.173934e-002f, -1.341934e-001f, 1.058137e-001f, 4.518498e-002f, -3.161930e-001f, -1.764664e-002f, 2.128402e-002f, 1.107134e-001f, 3.517889e-003f, -2.155997e-001f,
  3.173934e-002f, -1.341934e-001f, 1.058137e-001f, 4.518498e-002f, -3.161930e-001f, -7.339197e-004f, -2.422975e-002f, 8.445536e-002f, 1.011884e-001f, -4.513972e-001f,
  3.820406e-002f, -1.609017e-001f, 1.253808e-001f, 9.414946e-002f, -4.344037e-001f, 4.623799e-003f, -3.912033e-002f, 7.763926e-002f, 1.302959e-001f, -5.216690e-001f,
  4.203919e-002f, -1.767462e-001f, 1.369889e-001f, 1.231972e-001f, -5.045312e-001f, 8.297480e-003f, -4.959697e-002f, 7.381280e-002f, 1.492204e-001f, -5.673568e-001f,
  4.418925e-002f, -1.856500e-001f, 1.435637e-001f, 1.395638e-001f, -5.440437e-001f, 1.086928e-002f, -5.718174e-002f, 7.193038e-002f, 1.614969e-001f, -5.969948e-001f,
  4.604295e-002f, -1.933076e-001f, 1.491718e-001f, 1.536009e-001f, -5.779321e-001f, 1.255369e-002f, -6.242286e-002f, 7.156698e-002f, 1.684762e-001f, -6.138444e-001f,
  4.717056e-002f, -1.979858e-001f, 1.526470e-001f, 1.622174e-001f, -5.987343e-001f, 1.434778e-002f, -6.800693e-002f, 7.118519e-002f, 1.759036e-001f, -6.317756e-001f,
  4.782336e-002f, -2.007263e-001f, 1.547612e-001f, 1.673306e-001f, -6.110785e-001f, 1.545110e-002f, -7.175074e-002f, 7.193514e-002f, 1.792695e-001f, -6.399016e-001f,
  4.806669e-002f, -2.018137e-001f, 1.557588e-001f, 1.694923e-001f, -6.162974e-001f, 1.597322e-002f, -7.393288e-002f, 7.359517e-002f, 1.792695e-001f, -6.399016e-001f,
  4.903634e-002f, -2.057962e-001f, 1.586190e-001f, 1.767453e-001f, -6.338077e-001f, 1.794143e-002f, -8.011876e-002f, 7.336667e-002f, 1.871854e-001f, -6.590123e-001f,
  4.912774e-002f, -2.062678e-001f, 1.591944e-001f, 1.778022e-001f, -6.363592e-001f, 1.894279e-002f, -8.368336e-002f, 7.457755e-002f, 1.895931e-001f, -6.648251e-001f,
  4.934164e-002f, -2.072277e-001f, 1.600842e-001f, 1.797181e-001f, -6.409847e-001f, 1.974320e-002f, -8.672144e-002f, 7.614580e-002f, 1.907850e-001f, -6.677024e-001f,
  4.959090e-002f, -2.083249e-001f, 1.610531e-001f, 1.818677e-001f, -6.461743e-001f, 2.037577e-002f, -8.931870e-002f, 7.800911e-002f, 1.909655e-001f, -6.681382e-001f,
  4.955794e-002f, -2.083274e-001f, 1.613941e-001f, 1.821560e-001f, -6.468703e-001f, 2.102536e-002f, -9.198705e-002f, 7.992640e-002f, 1.911461e-001f, -6.685743e-001f,
  4.981107e-002f, -2.094396e-001f, 1.623714e-001f, 1.843310e-001f, -6.521211e-001f, 2.186322e-002f, -9.520861e-002f, 8.169944e-002f, 1.922333e-001f, -6.711991e-001f,
  4.967317e-002f, -2.090640e-001f, 1.625712e-001f, 1.840397e-001f, -6.514178e-001f, 2.248087e-002f, -9.783680e-002f, 8.381198e-002f, 1.920517e-001f, -6.707607e-001f,
  4.943558e-002f, -2.083403e-001f, 1.626719e-001f, 1.832407e-001f, -6.494889e-001f, 2.332498e-002f, -1.011303e-001f, 8.575047e-002f, 1.929613e-001f, -6.729566e-001f,
  4.940931e-002f, -2.084327e-001f, 1.632313e-001f, 1.838215e-001f, -6.508910e-001f, 2.397500e-002f, -1.038998e-001f, 8.798511e-002f, 1.927563e-001f, -6.724617e-001f,
  4.983737e-002f, -2.101957e-001f, 1.645094e-001f, 1.870422e-001f, -6.586667e-001f, 2.369286e-002f, -1.040281e-001f, 9.124505e-002f, 1.876831e-001f, -6.602138e-001f,
  4.983737e-002f, -2.101957e-001f, 1.645094e-001f, 1.870422e-001f, -6.586667e-001f, 1.974694e-002f, -8.670277e-002f, 7.604867e-002f, 1.876831e-001f, -6.602138e-001f,
  4.983737e-002f, -2.101957e-001f, 1.645094e-001f, 1.870422e-001f, -6.586667e-001f, 1.908947e-002f, -8.381603e-002f, 7.351666e-002f, 1.876831e-001f, -6.602138e-001f,
  4.983737e-002f, -2.101957e-001f, 1.645094e-001f, 1.870422e-001f, -6.586667e-001f, 1.845389e-002f, -8.102541e-002f, 7.106895e-002f, 1.876831e-001f, -6.602138e-001f,
  4.983737e-002f, -2.101957e-001f, 1.645094e-001f, 1.870422e-001f, -6.586667e-001f, 1.783948e-002f, -7.832769e-002f, 6.870273e-002f, 1.876831e-001f, -6.602138e-001f,
  4.983737e-002f, -2.101957e-001f, 1.645094e-001f, 1.870422e-001f, -6.586667e-001f, 1.724552e-002f, -7.571980e-002f, 6.641530e-002f, 1.876831e-001f, -6.602138e-001f,
  4.983737e-002f, -2.101957e-001f, 1.645094e-001f, 1.870422e-001f, -6.586667e-001f, 1.667133e-002f, -7.319873e-002f, 6.420402e-002f, 1.876831e-001f, -6.602138e-001f,
  4.983737e-002f, -2.101957e-001f, 1.645094e-001f, 1.870422e-001f, -6.586667e-001f, 1.611627e-002f, -7.076161e-002f, 6.206637e-002f, 1.876831e-001f, -6.602138e-001f,
  4.983737e-002f, -2.101957e-001f, 1.645094e-001f, 1.870422e-001f, -6.586667e-001f, 1.557968e-002f, -6.840562e-002f, 5.999989e-002f, 1.876831e-001f, -6.602138e-001f,
  4.983737e-002f, -2.101957e-001f, 1.645094e-001f, 1.870422e-001f, -6.586667e-001f, 1.506096e-002f, -6.612808e-002f, 5.800222e-002f, 1.876831e-001f, -6.602138e-001f,
  4.983737e-002f, -2.101957e-001f, 1.645094e-001f, 1.870422e-001f, -6.586667e-001f, 1.455951e-002f, -6.392637e-002f, 5.607105e-002f, 1.876831e-001f, -6.602138e-001f,
  4.983737e-002f, -2.101957e-001f, 1.645094e-001f, 1.870422e-001f, -6.586667e-001f, 1.407476e-002f, -6.179796e-002f, 5.420419e-002f, 1.876831e-001f, -6.602138e-001f,
  -1.854195e-001f, 2.184647e-001f, -2.695083e-002f, 6.321839e-002f, -5.215599e-001f, 0.000000e+000f, -5.236502e-002f, 6.342875e-002f, 0.000000e+000f, -4.531070e-001f,
  -1.854195e-001f, 2.444234e-001f, -5.390166e-002f, 1.264368e-001f, -5.915599e-001f, 0.000000e+000f, -5.236502e-002f, 6.342875e-002f, 0.000000e+000f, -4.531070e-001f,
  -1.854195e-001f, 2.703821e-001f, -8.085249e-002f, 1.896552e-001f, -6.615599e-001f, 0.000000e+000f, -5.236502e-002f, 6.342875e-002f, 0.000000e+000f, -4.531070e-001f,
  -1.854195e-001f, 2.963409e-001f, -1.078033e-001f, 2.528736e-001f, -7.315599e-001f, 0.000000e+000f, -5.236502e-002f, 6.342875e-002f, 0.000000e+000f, -4.531070e-001f,
  -1.854195e-001f, 3.222996e-001f, -1.347541e-001f, 3.160919e-001f, -8.015599e-001f, 0.000000e+000f, -5.236502e-002f, 6.342875e-002f, 0.000000e+000f, -4.531070e-001f,
  0.000000e+000f, -7.365521e-002f, 2.015655e-001f, 0.000000e+000f, -2.071068e-001f,
  4.469261e-002f, -1.691694e-001f, 1.282464e-001f, 4.518498e-002f, -3.161930e-001f, -2.484848e-002f, 1.896729e-002f, 1.341849e-001f, 3.517889e-003f, -2.155997e-001f,
  4.469261e-002f, -1.691694e-001f, 1.282464e-001f, 4.518498e-002f, -3.161930e-001f, -1.033443e-003f, -3.457586e-002f, 1.023601e-001f, 1.011884e-001f, -4.513972e-001f,
  5.379566e-002f, -2.027469e-001f, 1.519618e-001f, 9.414946e-002f, -4.344037e-001f, 6.510835e-003f, -5.220285e-002f, 9.409895e-002f, 1.302959e-001f, -5.216690e-001f,
  5.919597e-002f, -2.226665e-001f, 1.660308e-001f, 1.231972e-001f, -5.045312e-001f, 1.168380e-002f, -6.466454e-002f, 8.946127e-002f, 1.492204e-001f, -5.673568e-001f,
  6.222349e-002f, -2.338635e-001f, 1.739995e-001f, 1.395638e-001f, -5.440437e-001f, 1.530519e-002f, -7.374118e-002f, 8.717978e-002f, 1.614969e-001f, -5.969948e-001f,
  6.483371e-002f, -2.434904e-001f, 1.807966e-001f, 1.536009e-001f, -5.779321e-001f, 1.767702e-002f, -8.007101e-002f, 8.673933e-002f, 1.684762e-001f, -6.138444e-001f,
  6.642152e-002f, -2.493747e-001f, 1.850085e-001f, 1.622174e-001f, -5.987343e-001f, 2.020330e-002f, -8.681537e-002f, 8.627660e-002f, 1.759036e-001f, -6.317756e-001f,
  6.734074e-002f, -2.528266e-001f, 1.875709e-001f, 1.673306e-001f, -6.110785e-001f, 2.175691e-002f, -9.139913e-002f, 8.718555e-002f, 1.792695e-001f, -6.399016e-001f,
  6.768338e-002f, -2.542061e-001f, 1.887800e-001f, 1.694923e-001f, -6.162974e-001f, 2.249211e-002f, -9.414629e-002f, 8.919750e-002f, 1.792695e-001f, -6.399016e-001f,
  6.904875e-002f, -2.592093e-001f, 1.922465e-001f, 1.767453e-001f, -6.338077e-001f, 2.526358e-002f, -1.016295e-001f, 8.892056e-002f, 1.871854e-001f, -6.590123e-001f,
  6.917746e-002f, -2.598164e-001f, 1.929439e-001f, 1.778022e-001f, -6.363592e-001f, 2.667361e-002f, -1.060245e-001f, 9.038815e-002f, 1.895931e-001f, -6.648251e-001f,
  6.947864e-002f, -2.610347e-001f, 1.940224e-001f, 1.797181e-001f, -6.409847e-001f, 2.780068e-002f, -1.098034e-001f, 9.228887e-002f, 1.907850e-001f, -6.677024e-001f,
  6.982963e-002f, -2.624243e-001f, 1.951967e-001f, 1.818677e-001f, -6.461743e-001f, 2.869141e-002f, -1.130662e-001f, 9.454721e-002f, 1.909655e-001f, -6.681382e-001f,
  6.978322e-002f, -2.624483e-001f, 1.956100e-001f, 1.821560e-001f, -6.468703e-001f, 2.960611e-002f, -1.164185e-001f, 9.687097e-002f, 1.911461e-001f, -6.685743e-001f,
  7.013966e-002f, -2.638566e-001f, 1.967945e-001f, 1.843310e-001f, -6.521211e-001f, 3.078591e-002f, -1.204324e-001f, 9.901989e-002f, 1.922333e-001f, -6.711991e-001f,
  6.994547e-002f, -2.634137e-001f, 1.970366e-001f, 1.840397e-001f, -6.514178e-001f, 3.165562e-002f, -1.237481e-001f, 1.015803e-001f, 1.920517e-001f, -6.707607e-001f,
  6.961093e-002f, -2.625427e-001f, 1.971587e-001f, 1.832407e-001f, -6.494889e-001f, 3.284423e-002f, -1.278594e-001f, 1.039298e-001f, 1.929613e-001f, -6.729566e-001f,
  6.957393e-002f, -2.626893e-001f, 1.978367e-001f, 1.838215e-001f, -6.508910e-001f, 3.375953e-002f, -1.313539e-001f, 1.066381e-001f, 1.927563e-001f, -6.724617e-001f,
  7.017669e-002f, -2.649048e-001f, 1.993858e-001f, 1.870422e-001f, -6.586667e-001f, 3.336224e-002f, -1.317104e-001f, 1.105892e-001f, 1.876831e-001f, -6.602138e-001f,
  7.017669e-002f, -2.649048e-001f, 1.993858e-001f, 1.870422e-001f, -6.586667e-001f, 2.780594e-002f, -1.097748e-001f, 9.217116e-002f, 1.876831e-001f, -6.602138e-001f,
  7.017669e-002f, -2.649048e-001f, 1.993858e-001f, 1.870422e-001f, -6.586667e-001f, 2.688015e-002f, -1.061198e-001f, 8.910235e-002f, 1.876831e-001f, -6.602138e-001f,
  7.017669e-002f, -2.649048e-001f, 1.993858e-001f, 1.870422e-001f, -6.586667e-001f, 2.598518e-002f, -1.025866e-001f, 8.613572e-002f, 1.876831e-001f, -6.602138e-001f,
  7.017669e-002f, -2.649048e-001f, 1.993858e-001f, 1.870422e-001f, -6.586667e-001f, 2.512001e-002f, -9.917104e-002f, 8.326786e-002f, 1.876831e-001f, -6.602138e-001f,
  7.017669e-002f, -2.649048e-001f, 1.993858e-001f, 1.870422e-001f, -6.586667e-001f, 2.428365e-002f, -9.586917e-002f, 8.049548e-002f, 1.876831e-001f, -6.602138e-001f,
  7.017669e-002f, -2.649048e-001f, 1.993858e-001f, 1.870422e-001f, -6.586667e-001f, 2.347514e-002f, -9.267724e-002f, 7.781541e-002f, 1.876831e-001f, -6.602138e-001f,
  7.017669e-002f, -2.649048e-001f, 1.993858e-001f, 1.870422e-001f, -6.586667e-001f, 2.269354e-002f, -8.959158e-002f, 7.522457e-002f, 1.876831e-001f, -6.602138e-001f,
  7.017669e-002f, -2.649048e-001f, 1.993858e-001f, 1.870422e-001f, -6.586667e-001f, 2.193797e-002f, -8.660866e-002f, 7.272000e-002f, 1.876831e-001f, -6.602138e-001f,
  7.017669e-002f, -2.649048e-001f, 1.993858e-001f, 1.870422e-001f, -6.586667e-001f, 2.120755e-002f, -8.372505e-002f, 7.029881e-002f, 1.876831e-001f, -6.602138e-001f,
  7.017669e-002f, -2.649048e-001f, 1.993858e-001f, 1.870422e-001f, -6.586667e-001f, 2.050145e-002f, -8.093746e-002f, 6.795824e-002f, 1.876831e-001f, -6.602138e-001f,
  7.017669e-002f, -2.649048e-001f, 1.993858e-001f, 1.870422e-001f, -6.586667e-001f, 1.981886e-002f, -7.824267e-002f, 6.569559e-002f, 1.876831e-001f, -6.602138e-001f,
  -2.080441e-001f, 2.451214e-001f, -3.023933e-002f, 6.321839e-002f, -5.215599e-001f, 0.000000e+000f, -5.875452e-002f, 7.116823e-002f, 0.000000e+000f, -4.531070e-001f,
  -2.080441e-001f, 2.742476e-001f, -6.047866e-002f, 1.264368e-001f, -5.915599e-001f, 0.000000e+000f, -5.875452e-002f, 7.116823e-002f, 0.000000e+000f, -4.531070e-001f,
  -2.080441e-001f, 3.033737e-001f, -9.071798e-002f, 1.896552e-001f, -6.615599e-001f, 0.000000e+000f, -5.875452e-002f, 7.116823e-002f, 0.000000e+000f, -4.531070e-001f,
  -2.080441e-001f, 3.324999e-001f, -1.209573e-001f, 2.528736e-001f, -7.315599e-001f, 0.000000e+000f, -5.875452e-002f, 7.116823e-002f, 0.000000e+000f, -4.531070e-001f,
  -2.080441e-001f, 3.616261e-001f, -1.511966e-001f, 3.160919e-001f, -8.015599e-001f, 0.000000e+000f, -5.875452e-002f, 7.116823e-002f, 0.000000e+000f, -4.531070e-001f,
  0.000000e+000f, 0.000000e+000f, 2.450000e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.486614e-001f, 1.558817e-001f, 0.000000e+000f, -1.090862e-001f, 0.000000e+000f, 8.265372e-002f, 1.630998e-001f, 0.000000e+000f, -8.492934e-003f,
  0.000000e+000f, -1.486614e-001f, 1.558817e-001f, 0.000000e+000f, -1.090862e-001f, 0.000000e+000f, 3.437549e-003f, 1.244172e-001f, 0.000000e+000f, -2.442904e-001f,
  0.000000e+000f, -1.789410e-001f, 1.847075e-001f, 0.000000e+000f, -2.272969e-001f, 0.000000e+000f, -2.165705e-002f, 1.143759e-001f, 0.000000e+000f, -3.145622e-001f,
  0.000000e+000f, -1.969041e-001f, 2.018081e-001f, 0.000000e+000f, -2.974244e-001f, 0.000000e+000f, -3.886392e-002f, 1.087389e-001f, 0.000000e+000f, -3.602500e-001f,
  0.000000e+000f, -2.069746e-001f, 2.114939e-001f, 0.000000e+000f, -3.369369e-001f, 0.000000e+000f, -5.090979e-002f, 1.059658e-001f, 0.000000e+000f, -3.898880e-001f,
  0.000000e+000f, -2.156570e-001f, 2.197557e-001f, 0.000000e+000f, -3.708253e-001f, 0.000000e+000f, -5.879924e-002f, 1.054304e-001f, 0.000000e+000f, -4.067376e-001f,
  0.000000e+000f, -2.209385e-001f, 2.248753e-001f, 0.000000e+000f, -3.916275e-001f, 0.000000e+000f, -6.720243e-002f, 1.048680e-001f, 0.000000e+000f, -4.246689e-001f,
  0.000000e+000f, -2.239961e-001f, 2.279897e-001f, 0.000000e+000f, -4.039717e-001f, 0.000000e+000f, -7.237022e-002f, 1.059728e-001f, 0.000000e+000f, -4.327948e-001f,
  0.000000e+000f, -2.251358e-001f, 2.294595e-001f, 0.000000e+000f, -4.091906e-001f, 0.000000e+000f, -7.481572e-002f, 1.084183e-001f, 0.000000e+000f, -4.327948e-001f,
  0.000000e+000f, -2.296775e-001f, 2.336730e-001f, 0.000000e+000f, -4.267009e-001f, 0.000000e+000f, -8.403446e-002f, 1.080817e-001f, 0.000000e+000f, -4.519056e-001f,
  0.000000e+000f, -2.301056e-001f, 2.345206e-001f, 0.000000e+000f, -4.292524e-001f, 0.000000e+000f, -8.872466e-002f, 1.098655e-001f, 0.000000e+000f, -4.577183e-001f,
  0.000000e+000f, -2.311074e-001f, 2.358315e-001f, 0.000000e+000f, -4.338779e-001f, 0.000000e+000f, -9.247364e-002f, 1.121758e-001f, 0.000000e+000f, -4.605956e-001f,
  0.000000e+000f, -2.322749e-001f, 2.372588e-001f, 0.000000e+000f, -4.390675e-001f, 0.000000e+000f, -9.543649e-002f, 1.149208e-001f, 0.000000e+000f, -4.610314e-001f,
  0.000000e+000f, -2.321205e-001f, 2.377612e-001f, 0.000000e+000f, -4.397635e-001f, 0.000000e+000f, -9.847906e-002f, 1.177453e-001f, 0.000000e+000f, -4.614675e-001f,
  0.000000e+000f, -2.333062e-001f, 2.392010e-001f, 0.000000e+000f, -4.450143e-001f, 0.000000e+000f, -1.024034e-001f, 1.203573e-001f, 0.000000e+000f, -4.640923e-001f,
  0.000000e+000f, -2.326603e-001f, 2.394953e-001f, 0.000000e+000f, -4.443111e-001f, 0.000000e+000f, -1.052964e-001f, 1.234694e-001f, 0.000000e+000f, -4.636539e-001f,
  0.000000e+000f, -2.315475e-001f, 2.396436e-001f, 0.000000e+000f, -4.423821e-001f, 0.000000e+000f, -1.092501e-001f, 1.263252e-001f, 0.000000e+000f, -4.658498e-001f,
  0.000000e+000f, -2.314244e-001f, 2.404677e-001f, 0.000000e+000f, -4.437842e-001f, 0.000000e+000f, -1.122946e-001f, 1.296172e-001f, 0.000000e+000f, -4.653549e-001f,
  0.000000e+000f, -2.334294e-001f, 2.423506e-001f, 0.000000e+000f, -4.515599e-001f, 0.000000e+000f, -1.109731e-001f, 1.344196e-001f, 0.000000e+000f, -4.531070e-001f,
  0.000000e+000f, -2.334294e-001f, 2.423506e-001f, 0.000000e+000f, -4.515599e-001f, 0.000000e+000f, -9.249114e-002f, 1.120327e-001f, 0.000000e+000f, -4.531070e-001f,
  0.000000e+000f, -2.334294e-001f, 2.423506e-001f, 0.000000e+000f, -4.515599e-001f, 0.000000e+000f, -8.941168e-002f, 1.083027e-001f, 0.000000e+000f, -4.531070e-001f,
  0.000000e+000f, -2.334294e-001f, 2.423506e-001f, 0.000000e+000f, -4.515599e-001f, 0.000000e+000f, -8.643475e-002f, 1.046968e-001f, 0.000000e+000f, -4.531070e-001f,
  0.000000e+000f, -2.334294e-001f, 2.423506e-001f, 0.000000e+000f, -4.515599e-001f, 0.000000e+000f, -8.355693e-002f, 1.012109e-001f, 0.000000e+000f, -4.531070e-001f,
  0.000000e+000f, -2.334294e-001f, 2.423506e-001f, 0.000000e+000f, -4.515599e-001f, 0.000000e+000f, -8.077493e-002f, 9.784112e-002f, 0.000000e+000f, -4.531070e-001f,
  0.000000e+000f, -2.334294e-001f, 2.423506e-001f, 0.000000e+000f, -4.515599e-001f, 0.000000e+000f, -7.808556e-002f, 9.458354e-002f, 0.000000e+000f, -4.531070e-001f,
  0.000000e+000f, -2.334294e-001f, 2.423506e-001f, 0.000000e+000f, -4.515599e-001f, 0.000000e+000f, -7.548573e-002f, 9.143441e-002f, 0.000000e+000f, -4.531070e-001f,
  0.000000e+000f, -2.334294e-001f, 2.423506e-001f, 0.000000e+000f, -4.515599e-001f, 0.000000e+000f, -7.297245e-002f, 8.839013e-002f, 0.000000e+000f, -4.531070e-001f,
  0.000000e+000f, -2.334294e-001f, 2.423506e-001f, 0.000000e+000f, -4.515599e-001f, 0.000000e+000f, -7.054286e-002f, 8.544721e-002f, 0.000000e+000f, -4.531070e-001f,
  0.000000e+000f, -2.334294e-001f, 2.423506e-001f, 0.000000e+000f, -4.515599e-001f, 0.000000e+000f, -6.819416e-002f, 8.260228e-002f, 0.000000e+000f, -4.531070e-001f,
  0.000000e+000f, -2.334294e-001f, 2.423506e-001f, 0.000000e+000f, -4.515599e-001f, 0.000000e+000f, -6.592366e-002f, 7.985206e-002f, 0.000000e+000f, -4.531070e-001f,
  -2.334294e-001f, 2.750307e-001f, -3.392908e-002f, 6.321839e-002f, -5.215599e-001f, 0.000000e+000f, -6.592366e-002f, 7.985206e-002f, 0.000000e+000f, -4.531070e-001f,
  -2.334294e-001f, 3.077108e-001f, -6.785817e-002f, 1.264368e-001f, -5.915599e-001f, 0.000000e+000f, -6.592366e-002f, 7.985206e-002f, 0.000000e+000f, -4.531070e-001f,
  -2.334294e-001f, 3.403909e-001f, -1.017873e-001f, 1.896552e-001f, -6.615599e-001f, 0.000000e+000f, -6.592366e-002f, 7.985206e-002f, 0.000000e+000f, -4.531070e-001f,
  -2.334294e-001f, 3.730710e-001f, -1.357163e-001f, 2.528736e-001f, -7.315599e-001f, 0.000000e+000f, -6.592366e-002f, 7.985206e-002f, 0.000000e+000f, -4.531070e-001f,
  -2.334294e-001f, 4.057512e-001f, -1.696454e-001f, 3.160919e-001f, -8.015599e-001f, 0.000000e+000f, -6.592366e-002f, 7.985206e-002f, 0.000000e+000f, -4.531070e-001f,
  0.000000e+000f, -9.740128e-002f, 2.114014e-001f, 0.000000e+000f, -2.071068e-001f,
  5.910128e-002f, -1.902462e-001f, 1.345045e-001f, 4.518498e-002f, -3.161930e-001f, -3.285950e-002f, 6.477488e-003f, 1.407328e-001f, 3.517889e-003f, -2.155997e-001f,
  5.910128e-002f, -1.902462e-001f, 1.345045e-001f, 4.518498e-002f, -3.161930e-001f, -1.366619e-003f, -4.649671e-002f, 1.073550e-001f, 1.011884e-001f, -4.513972e-001f,
  7.113910e-002f, -2.278331e-001f, 1.593772e-001f, 9.414946e-002f, -4.344037e-001f, 8.609895e-003f, -6.415793e-002f, 9.869076e-002f, 1.302959e-001f, -5.216690e-001f,
  7.828044e-002f, -2.501313e-001f, 1.741328e-001f, 1.231972e-001f, -5.045312e-001f, 1.545059e-002f, -7.676407e-002f, 9.382678e-002f, 1.492204e-001f, -5.673568e-001f,
  8.228403e-002f, -2.626714e-001f, 1.824903e-001f, 1.395638e-001f, -5.440437e-001f, 2.023950e-002f, -8.605553e-002f, 9.143396e-002f, 1.614969e-001f, -5.969948e-001f,
  8.573577e-002f, -2.734476e-001f, 1.896190e-001f, 1.536009e-001f, -5.779321e-001f, 2.337600e-002f, -9.265021e-002f, 9.097201e-002f, 1.684762e-001f, -6.138444e-001f,
  8.783547e-002f, -2.800402e-001f, 1.940365e-001f, 1.622174e-001f, -5.987343e-001f, 2.671674e-002f, -9.967741e-002f, 9.048671e-002f, 1.759036e-001f, -6.317756e-001f,
  8.905105e-002f, -2.839167e-001f, 1.967239e-001f, 1.673306e-001f, -6.110785e-001f, 2.877123e-002f, -1.045757e-001f, 9.144001e-002f, 1.792695e-001f, -6.399016e-001f,
  8.950415e-002f, -2.854844e-001f, 1.979921e-001f, 1.694923e-001f, -6.162974e-001f, 2.974346e-002f, -1.076581e-001f, 9.355014e-002f, 1.792695e-001f, -6.399016e-001f,
  9.130971e-002f, -2.910783e-001f, 2.016277e-001f, 1.767453e-001f, -6.338077e-001f, 3.340842e-002f, -1.154788e-001f, 9.325968e-002f, 1.871854e-001f, -6.590123e-001f,
  9.147992e-002f, -2.917847e-001f, 2.023591e-001f, 1.778022e-001f, -6.363592e-001f, 3.527304e-002f, -1.202349e-001f, 9.479889e-002f, 1.895931e-001f, -6.648251e-001f,
  9.187820e-002f, -2.931703e-001f, 2.034903e-001f, 1.797181e-001f, -6.409847e-001f, 3.676347e-002f, -1.243883e-001f, 9.679236e-002f, 1.907850e-001f, -6.677024e-001f,
  9.234234e-002f, -2.947451e-001f, 2.047218e-001f, 1.818677e-001f, -6.461743e-001f, 3.794137e-002f, -1.280361e-001f, 9.916090e-002f, 1.909655e-001f, -6.681382e-001f,
  9.228097e-002f, -2.948117e-001f, 2.051553e-001f, 1.821560e-001f, -6.468703e-001f, 3.915096e-002f, -1.317843e-001f, 1.015981e-001f, 1.911461e-001f, -6.685743e-001f,
  9.275233e-002f, -2.964071e-001f, 2.063977e-001f, 1.843310e-001f, -6.521211e-001f, 4.071112e-002f, -1.362089e-001f, 1.038518e-001f, 1.922333e-001f, -6.711991e-001f,
  9.249554e-002f, -2.959668e-001f, 2.066516e-001f, 1.840397e-001f, -6.514178e-001f, 4.186123e-002f, -1.399424e-001f, 1.065372e-001f, 1.920517e-001f, -6.707607e-001f,
  9.205313e-002f, -2.950655e-001f, 2.067796e-001f, 1.832407e-001f, -6.494889e-001f, 4.343305e-002f, -1.444892e-001f, 1.090013e-001f, 1.929613e-001f, -6.729566e-001f,
  9.200421e-002f, -2.952870e-001f, 2.074907e-001f, 1.838215e-001f, -6.508910e-001f, 4.464342e-002f, -1.484250e-001f, 1.118418e-001f, 1.927563e-001f, -6.724617e-001f,
  9.280130e-002f, -2.977655e-001f, 2.091153e-001f, 1.870422e-001f, -6.586667e-001f, 4.411805e-002f, -1.491939e-001f, 1.159857e-001f, 1.876831e-001f, -6.602138e-001f,
  9.280130e-002f, -2.977655e-001f, 2.091153e-001f, 1.870422e-001f, -6.586667e-001f, 3.677043e-002f, -1.243465e-001f, 9.666890e-002f, 1.876831e-001f, -6.602138e-001f,
  9.280130e-002f, -2.977655e-001f, 2.091153e-001f, 1.870422e-001f, -6.586667e-001f, 3.554617e-002f, -1.202064e-001f, 9.345034e-002f, 1.876831e-001f, -6.602138e-001f,
  9.280130e-002f, -2.977655e-001f, 2.091153e-001f, 1.870422e-001f, -6.586667e-001f, 3.436267e-002f, -1.162042e-001f, 9.033895e-002f, 1.876831e-001f, -6.602138e-001f,
  9.280130e-002f, -2.977655e-001f, 2.091153e-001f, 1.870422e-001f, -6.586667e-001f, 3.321858e-002f, -1.123352e-001f, 8.733114e-002f, 1.876831e-001f, -6.602138e-001f,
  9.280130e-002f, -2.977655e-001f, 2.091153e-001f, 1.870422e-001f, -6.586667e-001f, 3.211258e-002f, -1.085950e-001f, 8.442348e-002f, 1.876831e-001f, -6.602138e-001f,
  9.280130e-002f, -2.977655e-001f, 2.091153e-001f, 1.870422e-001f, -6.586667e-001f, 3.104340e-002f, -1.049794e-001f, 8.161263e-002f, 1.876831e-001f, -6.602138e-001f,
  9.280130e-002f, -2.977655e-001f, 2.091153e-001f, 1.870422e-001f, -6.586667e-001f, 3.000982e-002f, -1.014842e-001f, 7.889536e-002f, 1.876831e-001f, -6.602138e-001f,
  9.280130e-002f, -2.977655e-001f, 2.091153e-001f, 1.870422e-001f, -6.586667e-001f, 2.901065e-002f, -9.810527e-002f, 7.626857e-002f, 1.876831e-001f, -6.602138e-001f,
  9.280130e-002f, -2.977655e-001f, 2.091153e-001f, 1.870422e-001f, -6.586667e-001f, 2.804475e-002f, -9.483889e-002f, 7.372923e-002f, 1.876831e-001f, -6.602138e-001f,
  9.280130e-002f, -2.977655e-001f, 2.091153e-001f, 1.870422e-001f, -6.586667e-001f, 2.711101e-002f, -9.168126e-002f, 7.127444e-002f, 1.876831e-001f, -6.602138e-001f,
  9.280130e-002f, -2.977655e-001f, 2.091153e-001f, 1.870422e-001f, -6.586667e-001f, 2.620836e-002f, -8.862877e-002f, 6.890139e-002f, 1.876831e-001f, -6.602138e-001f,
  -1.470872e-001f, 1.733008e-001f, -2.137920e-002f, 6.321839e-002f, -5.215599e-001f, 0.000000e+000f, -4.153945e-002f, 5.031594e-002f, 0.000000e+000f, -4.531070e-001f,
  -1.470872e-001f, 1.938930e-001f, -4.275841e-002f, 1.264368e-001f, -5.915599e-001f, 0.000000e+000f, -4.153945e-002f, 5.031594e-002f, 0.000000e+000f, -4.531070e-001f,
  -1.470872e-001f, 2.144852e-001f, -6.413761e-002f, 1.896552e-001f, -6.615599e-001f, 0.000000e+000f, -4.153945e-002f, 5.031594e-002f, 0.000000e+000f, -4.531070e-001f,
  -1.470872e-001f, 2.350774e-001f, -8.551682e-002f, 2.528736e-001f, -7.315599e-001f, 0.000000e+000f, -4.153945e-002f, 5.031594e-002f, 0.000000e+000f, -4.531070e-001f,
  -1.470872e-001f, 2.556696e-001f, -1.068960e-001f, 3.160919e-001f, -8.015599e-001f, 0.000000e+000f, -4.153945e-002f, 5.031594e-002f, 0.000000e+000f, -4.531070e-001f,
  0.000000e+000f, -9.233358e-002f, 1.828871e-001f, 0.000000e+000f, -2.071068e-001f,
  5.602630e-002f, -1.697199e-001f, 1.163622e-001f, 4.518498e-002f, -3.161930e-001f, -3.114985e-002f, 2.314748e-004f, 1.217504e-001f, 3.517889e-003f, -2.155997e-001f,
  5.602630e-002f, -1.697199e-001f, 1.163622e-001f, 4.518498e-002f, -3.161930e-001f, -1.295515e-003f, -4.432329e-002f, 9.287473e-002f, 1.011884e-001f, -4.513972e-001f,
  6.743780e-002f, -2.031865e-001f, 1.378801e-001f, 9.414946e-002f, -4.344037e-001f, 8.161930e-003f, -5.927157e-002f, 8.537913e-002f, 1.302959e-001f, -5.216690e-001f,
  7.420758e-002f, -2.230403e-001f, 1.506453e-001f, 1.231972e-001f, -5.045312e-001f, 1.464671e-002f, -6.999168e-002f, 8.117121e-002f, 1.492204e-001f, -5.673568e-001f,
  7.800286e-002f, -2.342080e-001f, 1.578755e-001f, 1.395638e-001f, -5.440437e-001f, 1.918646e-002f, -7.793855e-002f, 7.910113e-002f, 1.614969e-001f, -5.969948e-001f,
  8.127502e-002f, -2.438029e-001f, 1.640428e-001f, 1.536009e-001f, -5.779321e-001f, 2.215977e-002f, -8.362609e-002f, 7.870150e-002f, 1.684762e-001f, -6.138444e-001f,
  8.326548e-002f, -2.496749e-001f, 1.678644e-001f, 1.622174e-001f, -5.987343e-001f, 2.532670e-002f, -8.968692e-002f, 7.828165e-002f, 1.759036e-001f, -6.317756e-001f,
  8.441781e-002f, -2.531311e-001f, 1.701893e-001f, 1.673306e-001f, -6.110785e-001f, 2.727429e-002f, -9.396094e-002f, 7.910637e-002f, 1.792695e-001f, -6.399016e-001f,
  8.484733e-002f, -2.545357e-001f, 1.712865e-001f, 1.694923e-001f, -6.162974e-001f, 2.819593e-002f, -9.670809e-002f, 8.093188e-002f, 1.792695e-001f, -6.399016e-001f,
  8.655895e-002f, -2.595139e-001f, 1.744317e-001f, 1.767453e-001f, -6.338077e-001f, 3.167021e-002f, -1.034628e-001f, 8.068060e-002f, 1.871854e-001f, -6.590123e-001f,
  8.672030e-002f, -2.601530e-001f, 1.750645e-001f, 1.778022e-001f, -6.363592e-001f, 3.343782e-002f, -1.076362e-001f, 8.201220e-002f, 1.895931e-001f, -6.648251e-001f,
  8.709787e-002f, -2.613949e-001f, 1.760430e-001f, 1.797181e-001f, -6.409847e-001f, 3.485070e-002f, -1.113054e-001f, 8.373679e-002f, 1.907850e-001f, -6.677024e-001f,
  8.753786e-002f, -2.628043e-001f, 1.771085e-001f, 1.818677e-001f, -6.461743e-001f, 3.596732e-002f, -1.145516e-001f, 8.578585e-002f, 1.909655e-001f, -6.681382e-001f,
  8.747968e-002f, -2.628784e-001f, 1.774835e-001f, 1.821560e-001f, -6.468703e-001f, 3.711398e-002f, -1.178873e-001f, 8.789428e-002f, 1.911461e-001f, -6.685743e-001f,
  8.792651e-002f, -2.643060e-001f, 1.785583e-001f, 1.843310e-001f, -6.521211e-001f, 3.859296e-002f, -1.218012e-001f, 8.984407e-002f, 1.922333e-001f, -6.711991e-001f,
  8.768308e-002f, -2.639348e-001f, 1.787780e-001f, 1.840397e-001f, -6.514178e-001f, 3.968323e-002f, -1.251336e-001f, 9.216721e-002f, 1.920517e-001f, -6.707607e-001f,
  8.726369e-002f, -2.631600e-001f, 1.788887e-001f, 1.832407e-001f, -6.494889e-001f, 4.117327e-002f, -1.291612e-001f, 9.429895e-002f, 1.929613e-001f, -6.729566e-001f,
  8.721732e-002f, -2.633787e-001f, 1.795039e-001f, 1.838215e-001f, -6.508910e-001f, 4.232067e-002f, -1.326745e-001f, 9.675636e-002f, 1.927563e-001f, -6.724617e-001f,
  8.797293e-002f, -2.655850e-001f, 1.809094e-001f, 1.870422e-001f, -6.586667e-001f, 4.182263e-002f, -1.334979e-001f, 1.003413e-001f, 1.876831e-001f, -6.602138e-001f,
  8.797293e-002f, -2.655850e-001f, 1.809094e-001f, 1.870422e-001f, -6.586667e-001f, 3.485730e-002f, -1.112646e-001f, 8.362998e-002f, 1.876831e-001f, -6.602138e-001f,
  8.797293e-002f, -2.655850e-001f, 1.809094e-001f, 1.870422e-001f, -6.586667e-001f, 3.369674e-002f, -1.075601e-001f, 8.084555e-002f, 1.876831e-001f, -6.602138e-001f,
  8.797293e-002f, -2.655850e-001f, 1.809094e-001f, 1.870422e-001f, -6.586667e-001f, 3.257481e-002f, -1.039789e-001f, 7.815382e-002f, 1.876831e-001f, -6.602138e-001f,
  8.797293e-002f, -2.655850e-001f, 1.809094e-001f, 1.870422e-001f, -6.586667e-001f, 3.149025e-002f, -1.005169e-001f, 7.555172e-002f, 1.876831e-001f, -6.602138e-001f,
  8.797293e-002f, -2.655850e-001f, 1.809094e-001f, 1.870422e-001f, -6.586667e-001f, 3.044179e-002f, -9.717027e-002f, 7.303625e-002f, 1.876831e-001f, -6.602138e-001f,
  8.797293e-002f, -2.655850e-001f, 1.809094e-001f, 1.870422e-001f, -6.586667e-001f, 2.942824e-002f, -9.393502e-002f, 7.060453e-002f, 1.876831e-001f, -6.602138e-001f,
  8.797293e-002f, -2.655850e-001f, 1.809094e-001f, 1.870422e-001f, -6.586667e-001f, 2.844844e-002f, -9.080748e-002f, 6.825378e-002f, 1.876831e-001f, -6.602138e-001f,
  8.797293e-002f, -2.655850e-001f, 1.809094e-001f, 1.870422e-001f, -6.586667e-001f, 2.750126e-002f, -8.778408e-002f, 6.598129e-002f, 1.876831e-001f, -6.602138e-001f,
  8.797293e-002f, -2.655850e-001f, 1.809094e-001f, 1.870422e-001f, -6.586667e-001f, 2.658561e-002f, -8.486134e-002f, 6.378447e-002f, 1.876831e-001f, -6.602138e-001f,
  8.797293e-002f, -2.655850e-001f, 1.809094e-001f, 1.870422e-001f, -6.586667e-001f, 2.570045e-002f, -8.203591e-002f, 6.166078e-002f, 1.876831e-001f, -6.602138e-001f,
  8.797293e-002f, -2.655850e-001f, 1.809094e-001f, 1.870422e-001f, -6.586667e-001f, 2.484476e-002f, -7.930455e-002f, 5.960781e-002f, 1.876831e-001f, -6.602138e-001f,
  -1.310916e-001f, 1.544545e-001f, -1.905424e-002f, 6.321839e-002f, -5.215599e-001f, 0.000000e+000f, -3.702207e-002f, 4.484413e-002f, 0.000000e+000f, -4.531070e-001f,
  -1.310916e-001f, 1.728073e-001f, -3.810847e-002f, 1.264368e-001f, -5.915599e-001f, 0.000000e+000f, -3.702207e-002f, 4.484413e-002f, 0.000000e+000f, -4.531070e-001f,
  -1.310916e-001f, 1.911602e-001f, -5.716271e-002f, 1.896552e-001f, -6.615599e-001f, 0.000000e+000f, -3.702207e-002f, 4.484413e-002f, 0.000000e+000f, -4.531070e-001f,
  -1.310916e-001f, 2.095130e-001f, -7.621694e-002f, 2.528736e-001f, -7.315599e-001f, 0.000000e+000f, -3.702207e-002f, 4.484413e-002f, 0.000000e+000f, -4.531070e-001f,
  -1.310916e-001f, 2.278658e-001f, -9.527118e-002f, 3.160919e-001f, -8.015599e-001f, 0.000000e+000f, -3.702207e-002f, 4.484413e-002f, 0.000000e+000f, -4.531070e-001f,
  0.000000e+000f, -8.955958e-002f, 1.702655e-001f, 0.000000e+000f, -2.071068e-001f,
  5.434309e-002f, -1.602964e-001f, 1.083317e-001f, 4.518498e-002f, -3.161930e-001f, -2.217650e-002f, -1.342354e-002f, 1.056735e-001f, 3.088132e-002f, -2.816609e-001f,
  5.992050e-002f, -1.761998e-001f, 1.184078e-001f, 6.983598e-002f, -3.757057e-001f, 3.840953e-003f, -5.056914e-002f, 8.225661e-002f, 1.177575e-001f, -4.913986e-001f,
  6.968668e-002f, -2.040744e-001f, 1.361029e-001f, 1.130620e-001f, -4.800627e-001f, 1.171658e-002f, -6.281868e-002f, 7.707951e-002f, 1.417770e-001f, -5.493869e-001f,
  7.502808e-002f, -2.193420e-001f, 1.458232e-001f, 1.367540e-001f, -5.372602e-001f, 1.791697e-002f, -7.290250e-002f, 7.383997e-002f, 1.596904e-001f, -5.926334e-001f,
  7.883326e-002f, -2.302048e-001f, 1.527217e-001f, 1.536009e-001f, -5.779321e-001f, 2.149402e-002f, -7.940322e-002f, 7.327007e-002f, 1.684762e-001f, -6.138444e-001f,
  8.105451e-002f, -2.365861e-001f, 1.568251e-001f, 1.635263e-001f, -6.018942e-001f, 2.509158e-002f, -8.604600e-002f, 7.289614e-002f, 1.770750e-001f, -6.346035e-001f,
  8.199181e-002f, -2.393866e-001f, 1.587616e-001f, 1.679588e-001f, -6.125952e-001f, 2.667710e-002f, -8.986854e-002f, 7.443271e-002f, 1.788365e-001f, -6.388562e-001f,
  8.332157e-002f, -2.432378e-001f, 1.612770e-001f, 1.739708e-001f, -6.271095e-001f, 2.931439e-002f, -9.530266e-002f, 7.523170e-002f, 1.838608e-001f, -6.509860e-001f,
  8.413871e-002f, -2.456687e-001f, 1.629451e-001f, 1.778112e-001f, -6.363809e-001f, 3.219105e-002f, -1.011844e-001f, 7.601652e-002f, 1.894445e-001f, -6.644662e-001f,
  8.448117e-002f, -2.468188e-001f, 1.638938e-001f, 1.797181e-001f, -6.409847e-001f, 3.380368e-002f, -1.052714e-001f, 7.795785e-002f, 1.907850e-001f, -6.677024e-001f,
  8.490681e-002f, -2.481917e-001f, 1.649655e-001f, 1.819603e-001f, -6.463977e-001f, 3.508551e-002f, -1.089242e-001f, 8.026937e-002f, 1.909345e-001f, -6.680634e-001f,
  8.501103e-002f, -2.487341e-001f, 1.656200e-001f, 1.829766e-001f, -6.488514e-001f, 3.658019e-002f, -1.129592e-001f, 8.253817e-002f, 1.916173e-001f, -6.697118e-001f,
  8.522042e-002f, -2.495636e-001f, 1.664401e-001f, 1.844288e-001f, -6.523573e-001f, 3.806524e-002f, -1.170428e-001f, 8.493417e-002f, 1.921266e-001f, -6.709415e-001f,
  8.470643e-002f, -2.486152e-001f, 1.664949e-001f, 1.833293e-001f, -6.497029e-001f, 3.963346e-002f, -1.213190e-001f, 8.739579e-002f, 1.927462e-001f, -6.724374e-001f,
  8.459703e-002f, -2.487338e-001f, 1.671157e-001f, 1.838215e-001f, -6.508910e-001f, 4.104922e-002f, -1.254219e-001f, 9.007890e-002f, 1.927563e-001f, -6.724617e-001f,
  8.532995e-002f, -2.508155e-001f, 1.684243e-001f, 1.870422e-001f, -6.586667e-001f, 3.473848e-002f, -1.081208e-001f, 7.999637e-002f, 1.876831e-001f, -6.602138e-001f,
  8.532995e-002f, -2.508155e-001f, 1.684243e-001f, 1.870422e-001f, -6.586667e-001f, 3.335522e-002f, -1.038155e-001f, 7.681096e-002f, 1.876831e-001f, -6.602138e-001f,
  8.532995e-002f, -2.508155e-001f, 1.684243e-001f, 1.870422e-001f, -6.586667e-001f, 3.202703e-002f, -9.968167e-002f, 7.375240e-002f, 1.876831e-001f, -6.602138e-001f,
  8.532995e-002f, -2.508155e-001f, 1.684243e-001f, 1.870422e-001f, -6.586667e-001f, 3.075174e-002f, -9.571241e-002f, 7.081562e-002f, 1.876831e-001f, -6.602138e-001f,
  8.532995e-002f, -2.508155e-001f, 1.684243e-001f, 1.870422e-001f, -6.586667e-001f, 2.952722e-002f, -9.190120e-002f, 6.799579e-002f, 1.876831e-001f, -6.602138e-001f,
  8.532995e-002f, -2.508155e-001f, 1.684243e-001f, 1.870422e-001f, -6.586667e-001f, 2.835147e-002f, -8.824176e-002f, 6.528824e-002f, 1.876831e-001f, -6.602138e-001f,
  8.532995e-002f, -2.508155e-001f, 1.684243e-001f, 1.870422e-001f, -6.586667e-001f, 2.722253e-002f, -8.472802e-002f, 6.268850e-002f, 1.876831e-001f, -6.602138e-001f,
  8.532995e-002f, -2.508155e-001f, 1.684243e-001f, 1.870422e-001f, -6.586667e-001f, 2.613854e-002f, -8.135421e-002f, 6.019229e-002f, 1.876831e-001f, -6.602138e-001f,
  8.532995e-002f, -2.508155e-001f, 1.684243e-001f, 1.870422e-001f, -6.586667e-001f, 2.509772e-002f, -7.811473e-002f, 5.779547e-002f, 1.876831e-001f, -6.602138e-001f,
  8.532995e-002f, -2.508155e-001f, 1.684243e-001f, 1.870422e-001f, -6.586667e-001f, 2.409835e-002f, -7.500426e-002f, 5.549409e-002f, 1.876831e-001f, -6.602138e-001f,
  -1.237585e-001f, 1.458145e-001f, -1.798836e-002f, 6.321839e-002f, -5.215599e-001f, 0.000000e+000f, -3.495109e-002f, 4.233558e-002f, 0.000000e+000f, -4.531070e-001f,
  -1.237585e-001f, 1.631406e-001f, -3.597672e-002f, 1.264368e-001f, -5.915599e-001f, 0.000000e+000f, -3.495109e-002f, 4.233558e-002f, 0.000000e+000f, -4.531070e-001f,
  -1.237585e-001f, 1.804668e-001f, -5.396508e-002f, 1.896552e-001f, -6.615599e-001f, 0.000000e+000f, -3.495109e-002f, 4.233558e-002f, 0.000000e+000f, -4.531070e-001f,
  -1.237585e-001f, 1.977930e-001f, -7.195344e-002f, 2.528736e-001f, -7.315599e-001f, 0.000000e+000f, -3.495109e-002f, 4.233558e-002f, 0.000000e+000f, -4.531070e-001f,
  0.000000e+000f, -8.668074e-002f, 1.586100e-001f, 0.000000e+000f, -2.071068e-001f,
  5.259626e-002f, -1.513923e-001f, 1.009159e-001f, 4.518498e-002f, -3.161930e-001f, -2.146365e-002f, -1.452293e-002f, 9.843963e-002f, 3.088132e-002f, -2.816609e-001f,
  6.003226e-002f, -1.720697e-001f, 1.138541e-001f, 7.915296e-002f, -3.981989e-001f, 5.302374e-003f, -5.096680e-002f, 7.550637e-002f, 1.229010e-001f, -5.038159e-001f,
  6.862363e-002f, -1.959769e-001f, 1.288341e-001f, 1.184388e-001f, -4.930434e-001f, 1.258045e-002f, -6.185589e-002f, 7.106272e-002f, 1.456290e-001f, -5.586863e-001f,
  7.386004e-002f, -2.105827e-001f, 1.380273e-001f, 1.424641e-001f, -5.510456e-001f, 1.861852e-002f, -7.149228e-002f, 6.847870e-002f, 1.630739e-001f, -6.008020e-001f,
  7.719166e-002f, -2.198520e-001f, 1.438334e-001f, 1.576948e-001f, -5.878157e-001f, 2.200011e-002f, -7.746482e-002f, 6.808499e-002f, 1.714958e-001f, -6.211342e-001f,
  7.912119e-002f, -2.252958e-001f, 1.473341e-001f, 1.666926e-001f, -6.095384e-001f, 2.539696e-002f, -8.381137e-002f, 6.832459e-002f, 1.791430e-001f, -6.395962e-001f,
  7.965281e-002f, -2.269327e-001f, 1.485492e-001f, 1.694923e-001f, -6.162974e-001f, 2.646972e-002f, -8.679305e-002f, 7.018867e-002f, 1.792695e-001f, -6.399016e-001f,
  8.141369e-002f, -2.318033e-001f, 1.515659e-001f, 1.774757e-001f, -6.355709e-001f, 3.023389e-002f, -9.361161e-002f, 7.006208e-002f, 1.882454e-001f, -6.615713e-001f,
  8.155640e-002f, -2.324335e-001f, 1.522411e-001f, 1.786738e-001f, -6.384636e-001f, 3.218693e-002f, -9.825139e-002f, 7.201281e-002f, 1.903222e-001f, -6.665852e-001f,
  8.214297e-002f, -2.341821e-001f, 1.534768e-001f, 1.816286e-001f, -6.455971e-001f, 3.357375e-002f, -1.018883e-001f, 7.402420e-002f, 1.909956e-001f, -6.682109e-001f,
  8.218532e-002f, -2.345913e-001f, 1.540836e-001f, 1.825043e-001f, -6.477112e-001f, 3.511557e-002f, -1.060958e-001f, 7.656087e-002f, 1.913597e-001f, -6.690901e-001f,
  8.253727e-002f, -2.357479e-001f, 1.550216e-001f, 1.845287e-001f, -6.525985e-001f, 3.665151e-002f, -1.100794e-001f, 7.870738e-002f, 1.922094e-001f, -6.711413e-001f,
  8.198358e-002f, -2.347762e-001f, 1.550975e-001f, 1.833293e-001f, -6.497029e-001f, 3.835946e-002f, -1.146833e-001f, 8.141310e-002f, 1.927462e-001f, -6.724374e-001f,
  8.187770e-002f, -2.348985e-001f, 1.556758e-001f, 1.838215e-001f, -6.508910e-001f, 3.972971e-002f, -1.185566e-001f, 8.391254e-002f, 1.927563e-001f, -6.724617e-001f,
  8.258706e-002f, -2.368627e-001f, 1.568948e-001f, 1.870422e-001f, -6.586667e-001f, 3.362183e-002f, -1.022473e-001f, 7.452021e-002f, 1.876831e-001f, -6.602138e-001f,
  8.258706e-002f, -2.368627e-001f, 1.568948e-001f, 1.870422e-001f, -6.586667e-001f, 3.206514e-002f, -9.751325e-002f, 7.106992e-002f, 1.876831e-001f, -6.602138e-001f,
  8.258706e-002f, -2.368627e-001f, 1.568948e-001f, 1.870422e-001f, -6.586667e-001f, 3.078832e-002f, -9.363033e-002f, 6.823996e-002f, 1.876831e-001f, -6.602138e-001f,
  8.258706e-002f, -2.368627e-001f, 1.568948e-001f, 1.870422e-001f, -6.586667e-001f, 2.936282e-002f, -8.929524e-002f, 6.508045e-002f, 1.876831e-001f, -6.602138e-001f,
  8.258706e-002f, -2.368627e-001f, 1.568948e-001f, 1.870422e-001f, -6.586667e-001f, 2.819361e-002f, -8.573956e-002f, 6.248898e-002f, 1.876831e-001f, -6.602138e-001f,
  8.258706e-002f, -2.368627e-001f, 1.568948e-001f, 1.870422e-001f, -6.586667e-001f, 2.688825e-002f, -8.176982e-002f, 5.959574e-002f, 1.876831e-001f, -6.602138e-001f,
  8.258706e-002f, -2.368627e-001f, 1.568948e-001f, 1.870422e-001f, -6.586667e-001f, 2.581758e-002f, -7.851380e-002f, 5.722268e-002f, 1.876831e-001f, -6.602138e-001f,
  8.258706e-002f, -2.368627e-001f, 1.568948e-001f, 1.870422e-001f, -6.586667e-001f, 2.478954e-002f, -7.538743e-002f, 5.494411e-002f, 1.876831e-001f, -6.602138e-001f,
  8.258706e-002f, -2.368627e-001f, 1.568948e-001f, 1.870422e-001f, -6.586667e-001f, 2.364178e-002f, -7.189699e-002f, 5.240019e-002f, 1.876831e-001f, -6.602138e-001f,
  8.258706e-002f, -2.368627e-001f, 1.568948e-001f, 1.870422e-001f, -6.586667e-001f, 2.332372e-002f, -7.092973e-002f, 5.169524e-002f, 1.876831e-001f, -6.602138e-001f,
  -1.168355e-001f, 1.376577e-001f, -1.698211e-002f, 6.321839e-002f, -5.215599e-001f, 0.000000e+000f, -3.299596e-002f, 3.996737e-002f, 0.000000e+000f, -4.531070e-001f,
  -1.168355e-001f, 1.540147e-001f, -3.396421e-002f, 1.264368e-001f, -5.915599e-001f, 0.000000e+000f, -3.299596e-002f, 3.996737e-002f, 0.000000e+000f, -4.531070e-001f,
  -1.168355e-001f, 1.703717e-001f, -5.094632e-002f, 1.896552e-001f, -6.615599e-001f, 0.000000e+000f, -3.299596e-002f, 3.996737e-002f, 0.000000e+000f, -4.531070e-001f,
  0.000000e+000f, -8.521287e-002f, 1.531184e-001f, 0.000000e+000f, -2.071068e-001f,
  5.170558e-002f, -1.471262e-001f, 9.742186e-002f, 4.518498e-002f, -3.161930e-001f, -9.229366e-003f, -3.047034e-002f, 8.455198e-002f, 7.304673e-002f, -3.834572e-001f,
  6.367308e-002f, -1.800255e-001f, 1.178974e-001f, 1.008310e-001f, -4.505344e-001f, 8.687654e-003f, -5.500942e-002f, 7.079515e-002f, 1.339577e-001f, -5.305093e-001f,
  7.138664e-002f, -2.012544e-001f, 1.311376e-001f, 1.367540e-001f, -5.372602e-001f, 1.704738e-002f, -6.758706e-002f, 6.640371e-002f, 1.596904e-001f, -5.926334e-001f,
  7.588448e-002f, -2.136305e-001f, 1.388534e-001f, 1.576948e-001f, -5.878157e-001f, 2.162756e-002f, -7.544094e-002f, 6.572769e-002f, 1.714958e-001f, -6.211342e-001f,
  7.790755e-002f, -2.192881e-001f, 1.424875e-001f, 1.673306e-001f, -6.110785e-001f, 2.517091e-002f, -8.208760e-002f, 6.623016e-002f, 1.792695e-001f, -6.399016e-001f,
  7.927761e-002f, -2.231678e-001f, 1.450351e-001f, 1.739708e-001f, -6.271095e-001f, 2.789163e-002f, -8.776954e-002f, 6.765528e-002f, 1.838608e-001f, -6.509860e-001f,
  8.004683e-002f, -2.254521e-001f, 1.466561e-001f, 1.779517e-001f, -6.367201e-001f, 3.110726e-002f, -9.427087e-002f, 6.895478e-002f, 1.897974e-001f, -6.653183e-001f,
  8.075194e-002f, -2.275577e-001f, 1.481630e-001f, 1.816286e-001f, -6.455971e-001f, 3.300521e-002f, -9.907618e-002f, 7.146127e-002f, 1.909956e-001f, -6.682109e-001f,
  8.088507e-002f, -2.282298e-001f, 1.489407e-001f, 1.829766e-001f, -6.488514e-001f, 3.480480e-002f, -1.038484e-001f, 7.422593e-002f, 1.916173e-001f, -6.697118e-001f,
  8.092101e-002f, -2.287047e-001f, 1.496781e-001f, 1.840397e-001f, -6.514178e-001f, 3.662288e-002f, -1.087510e-001f, 7.716508e-002f, 1.920517e-001f, -6.707607e-001f,
  8.044342e-002f, -2.280323e-001f, 1.500120e-001f, 1.833447e-001f, -6.497400e-001f, 3.874870e-002f, -1.142075e-001f, 8.010599e-002f, 1.932168e-001f, -6.735735e-001f,
  8.118851e-002f, -2.301785e-001f, 1.514626e-001f, 1.870422e-001f, -6.586667e-001f, 3.305247e-002f, -9.942759e-002f, 7.194011e-002f, 1.876831e-001f, -6.602138e-001f,
  8.118851e-002f, -2.301785e-001f, 1.514626e-001f, 1.870422e-001f, -6.586667e-001f, 3.130938e-002f, -9.418408e-002f, 6.814620e-002f, 1.876831e-001f, -6.602138e-001f,
  8.118851e-002f, -2.301785e-001f, 1.514626e-001f, 1.870422e-001f, -6.586667e-001f, 2.965822e-002f, -8.921709e-002f, 6.455238e-002f, 1.876831e-001f, -6.602138e-001f,
  8.118851e-002f, -2.301785e-001f, 1.514626e-001f, 1.870422e-001f, -6.586667e-001f, 2.809414e-002f, -8.451206e-002f, 6.114808e-002f, 1.876831e-001f, -6.602138e-001f,
  8.118851e-002f, -2.301785e-001f, 1.514626e-001f, 1.870422e-001f, -6.586667e-001f, 2.661254e-002f, -8.005515e-002f, 5.792332e-002f, 1.876831e-001f, -6.602138e-001f,
  8.118851e-002f, -2.301785e-001f, 1.514626e-001f, 1.870422e-001f, -6.586667e-001f, 2.520907e-002f, -7.583328e-002f, 5.486862e-002f, 1.876831e-001f, -6.602138e-001f,
  8.118851e-002f, -2.301785e-001f, 1.514626e-001f, 1.870422e-001f, -6.586667e-001f, 2.387962e-002f, -7.183406e-002f, 5.197501e-002f, 1.876831e-001f, -6.602138e-001f,
  8.118851e-002f, -2.301785e-001f, 1.514626e-001f, 1.870422e-001f, -6.586667e-001f, 2.292875e-002f, -6.897368e-002f, 4.990540e-002f, 1.876831e-001f, -6.602138e-001f,
  -1.135207e-001f, 1.337521e-001f, -1.650029e-002f, 6.321839e-002f, -5.215599e-001f, 0.000000e+000f, -3.205979e-002f, 3.883341e-002f, 0.000000e+000f, -4.531070e-001f,
  -1.135207e-001f, 1.496450e-001f, -3.300058e-002f, 1.264368e-001f, -5.915599e-001f, 0.000000e+000f, -3.205979e-002f, 3.883341e-002f, 0.000000e+000f, -4.531070e-001f,
  -1.135207e-001f, 1.655379e-001f, -4.950087e-002f, 1.896552e-001f, -6.615599e-001f, 0.000000e+000f, -3.205979e-002f, 3.883341e-002f, 0.000000e+000f, -4.531070e-001f,
  0.000000e+000f, -8.373118e-002f, 1.478382e-001f, 0.000000e+000f, -2.071068e-001f,
  5.080652e-002f, -1.429796e-001f, 9.406229e-002f, 4.518498e-002f, -3.161930e-001f, -1.174817e-003f, -4.044653e-002f, 7.507598e-002f, 1.011884e-001f, -4.513972e-001f,
  6.729392e-002f, -1.877860e-001f, 1.217753e-001f, 1.231972e-001f, -5.045312e-001f, 1.328213e-002f, -6.061391e-002f, 6.561536e-002f, 1.492204e-001f, -5.673568e-001f,
  7.370291e-002f, -2.052356e-001f, 1.326052e-001f, 1.536009e-001f, -5.779321e-001f, 2.009522e-002f, -7.151260e-002f, 6.361895e-002f, 1.684762e-001f, -6.138444e-001f,
  7.655289e-002f, -2.130817e-001f, 1.375738e-001f, 1.673306e-001f, -6.110785e-001f, 2.473324e-002f, -7.988698e-002f, 6.394623e-002f, 1.792695e-001f, -6.399016e-001f,
  7.849456e-002f, -2.184523e-001f, 1.410032e-001f, 1.767453e-001f, -6.338077e-001f, 2.871961e-002f, -8.764616e-002f, 6.521877e-002f, 1.871854e-001f, -6.590123e-001f,
  7.898326e-002f, -2.200529e-001f, 1.423057e-001f, 1.797181e-001f, -6.409847e-001f, 3.160378e-002f, -9.413775e-002f, 6.768926e-002f, 1.907850e-001f, -6.677024e-001f,
  7.932950e-002f, -2.213237e-001f, 1.434701e-001f, 1.821560e-001f, -6.468703e-001f, 3.365620e-002f, -9.966497e-002f, 7.105000e-002f, 1.911461e-001f, -6.685743e-001f,
  7.951395e-002f, -2.222420e-001f, 1.445165e-001f, 1.840397e-001f, -6.514178e-001f, 3.598608e-002f, -1.057350e-001f, 7.450406e-002f, 1.920517e-001f, -6.707607e-001f,
  7.909158e-002f, -2.218286e-001f, 1.451033e-001f, 1.838215e-001f, -6.508910e-001f, 3.837780e-002f, -1.120589e-001f, 7.821373e-002f, 1.927563e-001f, -6.724617e-001f,
  7.977680e-002f, -2.236819e-001f, 1.462395e-001f, 1.870422e-001f, -6.586667e-001f, 3.160976e-002f, -9.409941e-002f, 6.760292e-002f, 1.876831e-001f, -6.602138e-001f,
  7.977680e-002f, -2.236819e-001f, 1.462395e-001f, 1.870422e-001f, -6.586667e-001f, 2.953993e-002f, -8.793770e-002f, 6.317623e-002f, 1.876831e-001f, -6.602138e-001f,
  7.977680e-002f, -2.236819e-001f, 1.462395e-001f, 1.870422e-001f, -6.586667e-001f, 2.760563e-002f, -8.217947e-002f, 5.903940e-002f, 1.876831e-001f, -6.602138e-001f,
  7.977680e-002f, -2.236819e-001f, 1.462395e-001f, 1.870422e-001f, -6.586667e-001f, 2.579800e-002f, -7.679830e-002f, 5.517345e-002f, 1.876831e-001f, -6.602138e-001f,
  7.977680e-002f, -2.236819e-001f, 1.462395e-001f, 1.870422e-001f, -6.586667e-001f, 2.410872e-002f, -7.176948e-002f, 5.156065e-002f, 1.876831e-001f, -6.602138e-001f,
  7.977680e-002f, -2.236819e-001f, 1.462395e-001f, 1.870422e-001f, -6.586667e-001f, 2.253006e-002f, -6.706996e-002f, 4.818442e-002f, 1.876831e-001f, -6.602138e-001f,
  -1.102998e-001f, 1.299573e-001f, -1.603214e-002f, 6.321839e-002f, -5.215599e-001f, 0.000000e+000f, -3.115019e-002f, 3.773163e-002f, 0.000000e+000f, -4.531070e-001f,
  -1.102998e-001f, 1.453993e-001f, -3.206428e-002f, 1.264368e-001f, -5.915599e-001f, 0.000000e+000f, -3.115019e-002f, 3.773163e-002f, 0.000000e+000f, -4.531070e-001f,
  0.000000e+000f, -8.223918e-002f, 1.427601e-001f, 0.000000e+000f, -2.071068e-001f,
  4.990120e-002f, -1.389490e-001f, 9.083134e-002f, 4.518498e-002f, -3.161930e-001f, 7.269624e-003f, -5.101202e-002f, 6.664620e-002f, 1.302959e-001f, -5.216690e-001f,
  7.238960e-002f, -1.994275e-001f, 1.280504e-001f, 1.536009e-001f, -5.779321e-001f, 1.973715e-002f, -6.965182e-002f, 6.143370e-002f, 1.684762e-001f, -6.138444e-001f,
  7.557137e-002f, -2.082080e-001f, 1.337047e-001f, 1.694923e-001f, -6.162974e-001f, 2.511340e-002f, -7.998747e-002f, 6.317472e-002f, 1.792695e-001f, -6.399016e-001f,
  7.757586e-002f, -2.138266e-001f, 1.374177e-001f, 1.797181e-001f, -6.409847e-001f, 3.104064e-002f, -9.153792e-002f, 6.536420e-002f, 1.907850e-001f, -6.677024e-001f,
  7.831391e-002f, -2.162388e-001f, 1.393810e-001f, 1.843310e-001f, -6.521211e-001f, 3.437377e-002f, -1.000702e-001f, 7.013149e-002f, 1.922333e-001f, -6.711991e-001f,
  7.768225e-002f, -2.155675e-001f, 1.401191e-001f, 1.838215e-001f, -6.508910e-001f, 3.769395e-002f, -1.089420e-001f, 7.552717e-002f, 1.927563e-001f, -6.724617e-001f,
  7.835526e-002f, -2.173678e-001f, 1.412163e-001f, 1.870422e-001f, -6.586667e-001f, 3.001283e-002f, -8.845363e-002f, 6.310733e-002f, 1.876831e-001f, -6.602138e-001f,
  7.835526e-002f, -2.173678e-001f, 1.412163e-001f, 1.870422e-001f, -6.586667e-001f, 2.711373e-002f, -7.990943e-002f, 5.701146e-002f, 1.876831e-001f, -6.602138e-001f,
  7.835526e-002f, -2.173678e-001f, 1.412163e-001f, 1.870422e-001f, -6.586667e-001f, 2.449467e-002f, -7.219055e-002f, 5.150442e-002f, 1.876831e-001f, -6.602138e-001f,
  7.835526e-002f, -2.173678e-001f, 1.412163e-001f, 1.870422e-001f, -6.586667e-001f, 2.212860e-002f, -6.521728e-002f, 4.652933e-002f, 1.876831e-001f, -6.602138e-001f,
  -1.071704e-001f, 1.262701e-001f, -1.557728e-002f, 6.321839e-002f, -5.215599e-001f, 0.000000e+000f, -3.026640e-002f, 3.666111e-002f, 0.000000e+000f, -4.531070e-001f,
  0.000000e+000f, -8.074007e-002f, 1.378755e-001f, 0.000000e+000f, -2.071068e-001f,
  4.899157e-002f, -1.350313e-001f, 8.772351e-002f, 4.518498e-002f, -3.161930e-001f, 1.937737e-002f, -6.783443e-002f, 5.933173e-002f, 1.684762e-001f, -6.138444e-001f,
  7.616176e-002f, -2.077759e-001f, 1.327159e-001f, 1.797181e-001f, -6.409847e-001f, 3.047481e-002f, -8.900789e-002f, 6.312774e-002f, 1.907850e-001f, -6.677024e-001f,
  7.626622e-002f, -2.094822e-001f, 1.353249e-001f, 1.838215e-001f, -6.508910e-001f, 3.700684e-002f, -1.059101e-001f, 7.294298e-002f, 1.927563e-001f, -6.724617e-001f,
  7.692696e-002f, -2.112310e-001f, 1.363845e-001f, 1.870422e-001f, -6.586667e-001f, 2.661949e-002f, -7.770034e-002f, 5.506079e-002f, 1.876831e-001f, -6.602138e-001f,
  7.692696e-002f, -2.112310e-001f, 1.363845e-001f, 1.870422e-001f, -6.586667e-001f, 2.172523e-002f, -6.341436e-002f, 4.493732e-002f, 1.876831e-001f, -6.602138e-001f,
  // Total number of coefficients: 3485
  // Maximum number of elevation coefficients: 5


  // Lite coefficients
  // Headphones
  // 22050 Hz sample rate
  // Generated by HRTFConv V5.90d on Mon Feb 08 11:11:49 1999
  0.000000e+000f, -4.041606e-002f, 1.104611e-001f, 0.000000e+000f, -2.734412e-001f,
  2.818562e-002f, -1.061499e-001f, 7.957631e-002f, 1.064869e-001f, -4.681574e-001f, -4.965690e-003f, -8.903827e-003f, 6.142786e-002f, 9.149637e-002f, -4.407466e-001f,
  3.097017e-002f, -1.164059e-001f, 8.680711e-002f, 1.424909e-001f, -5.339924e-001f, 5.127193e-003f, -3.191701e-002f, 4.893308e-002f, 1.887273e-001f, -6.185379e-001f,
  3.418237e-002f, -1.282415e-001f, 9.516018e-002f, 1.840530e-001f, -6.099907e-001f, 7.891708e-003f, -3.868172e-002f, 4.677126e-002f, 2.123014e-001f, -6.616443e-001f,
  3.610813e-002f, -1.353483e-001f, 1.001988e-001f, 2.090449e-001f, -6.556895e-001f, 1.019006e-002f, -4.458065e-002f, 4.572535e-002f, 2.300776e-001f, -6.941488e-001f,
  3.731334e-002f, -1.397875e-001f, 1.033289e-001f, 2.246291e-001f, -6.841860e-001f, 1.150668e-002f, -4.821854e-002f, 4.583308e-002f, 2.385459e-001f, -7.096336e-001f,
  3.800344e-002f, -1.423555e-001f, 1.051925e-001f, 2.337258e-001f, -7.008197e-001f, 1.284573e-002f, -5.206794e-002f, 4.635146e-002f, 2.461667e-001f, -7.235685e-001f,
  3.819301e-002f, -1.431083e-001f, 1.058338e-001f, 2.365384e-001f, -7.059628e-001f, 1.335068e-002f, -5.393406e-002f, 4.767982e-002f, 2.462922e-001f, -7.237980e-001f,
  3.881485e-002f, -1.453884e-001f, 1.074205e-001f, 2.445108e-001f, -7.205407e-001f, 1.479776e-002f, -5.800035e-002f, 4.798396e-002f, 2.551490e-001f, -7.399931e-001f,
  3.886581e-002f, -1.456562e-001f, 1.077719e-001f, 2.457011e-001f, -7.227171e-001f, 1.564048e-002f, -6.083927e-002f, 4.944808e-002f, 2.571846e-001f, -7.437153e-001f,
  3.907187e-002f, -1.464550e-001f, 1.084157e-001f, 2.486292e-001f, -7.280714e-001f, 1.626838e-002f, -6.308392e-002f, 5.089259e-002f, 2.578435e-001f, -7.449201e-001f,
  3.908761e-002f, -1.466128e-001f, 1.087296e-001f, 2.494951e-001f, -7.296546e-001f, 1.698081e-002f, -6.568978e-002f, 5.269294e-002f, 2.581996e-001f, -7.455712e-001f,
  3.921115e-002f, -1.471283e-001f, 1.092156e-001f, 2.514932e-001f, -7.333083e-001f, 1.767094e-002f, -6.814091e-002f, 5.423693e-002f, 2.590298e-001f, -7.470893e-001f,
  3.901941e-002f, -1.466175e-001f, 1.092519e-001f, 2.503100e-001f, -7.311447e-001f, 1.845376e-002f, -7.098421e-002f, 5.616042e-002f, 2.595539e-001f, -7.480477e-001f,
  3.898373e-002f, -1.466289e-001f, 1.095497e-001f, 2.507957e-001f, -7.320329e-001f, 1.909839e-002f, -7.338920e-002f, 5.791821e-002f, 2.595637e-001f, -7.480656e-001f,
  3.923142e-002f, -1.475366e-001f, 1.101801e-001f, 2.539674e-001f, -7.378325e-001f, 1.634195e-002f, -6.343993e-002f, 5.131602e-002f, 2.545970e-001f, -7.389837e-001f,
  3.923142e-002f, -1.475366e-001f, 1.101801e-001f, 2.539674e-001f, -7.378325e-001f, 1.558532e-002f, -6.050266e-002f, 4.894009e-002f, 2.545970e-001f, -7.389837e-001f,
  3.923142e-002f, -1.475366e-001f, 1.101801e-001f, 2.539674e-001f, -7.378325e-001f, 1.496472e-002f, -5.809348e-002f, 4.699133e-002f, 2.545970e-001f, -7.389837e-001f,
  3.923142e-002f, -1.475366e-001f, 1.101801e-001f, 2.539674e-001f, -7.378325e-001f, 1.427186e-002f, -5.540375e-002f, 4.481563e-002f, 2.545970e-001f, -7.389837e-001f,
  3.923142e-002f, -1.475366e-001f, 1.101801e-001f, 2.539674e-001f, -7.378325e-001f, 1.370356e-002f, -5.319761e-002f, 4.303110e-002f, 2.545970e-001f, -7.389837e-001f,
  3.923142e-002f, -1.475366e-001f, 1.101801e-001f, 2.539674e-001f, -7.378325e-001f, 1.306908e-002f, -5.073456e-002f, 4.103875e-002f, 2.545970e-001f, -7.389837e-001f,
  3.923142e-002f, -1.475366e-001f, 1.101801e-001f, 2.539674e-001f, -7.378325e-001f, 1.254868e-002f, -4.871434e-002f, 3.940462e-002f, 2.545970e-001f, -7.389837e-001f,
  3.923142e-002f, -1.475366e-001f, 1.101801e-001f, 2.539674e-001f, -7.378325e-001f, 1.204900e-002f, -4.677456e-002f, 3.783555e-002f, 2.545970e-001f, -7.389837e-001f,
  3.923142e-002f, -1.475366e-001f, 1.101801e-001f, 2.539674e-001f, -7.378325e-001f, 1.149113e-002f, -4.460890e-002f, 3.608376e-002f, 2.545970e-001f, -7.389837e-001f,
  3.923142e-002f, -1.475366e-001f, 1.101801e-001f, 2.539674e-001f, -7.378325e-001f, 1.133654e-002f, -4.400876e-002f, 3.559832e-002f, 2.545970e-001f, -7.389837e-001f,
  -1.500535e-001f, 1.766994e-001f, -2.312871e-002f, 6.965870e-002f, -5.393913e-001f, 0.000000e+000f, -4.336033e-002f, 4.981801e-002f, 0.000000e+000f, -4.655425e-001f,
  -1.500535e-001f, 1.992074e-001f, -4.625741e-002f, 1.393174e-001f, -6.143913e-001f, 0.000000e+000f, -4.336033e-002f, 4.981801e-002f, 0.000000e+000f, -4.655425e-001f,
  -1.500535e-001f, 2.217155e-001f, -6.938612e-002f, 2.089761e-001f, -6.893913e-001f, 0.000000e+000f, -4.336033e-002f, 4.981801e-002f, 0.000000e+000f, -4.655425e-001f,
  0.000000e+000f, -5.567563e-002f, 1.342674e-001f, 0.000000e+000f, -2.734412e-001f,
  3.882744e-002f, -1.337451e-001f, 9.672644e-002f, 1.064869e-001f, -4.681574e-001f, -6.840546e-003f, -1.446479e-002f, 7.466668e-002f, 9.149637e-002f, -4.407466e-001f,
  4.160907e-002f, -1.430947e-001f, 1.030965e-001f, 1.325884e-001f, -5.158854e-001f, 6.233602e-003f, -3.998693e-002f, 6.017902e-002f, 1.833382e-001f, -6.086836e-001f,
  4.648625e-002f, -1.594982e-001f, 1.142904e-001f, 1.784038e-001f, -5.996608e-001f, 1.022669e-002f, -4.841590e-002f, 5.728325e-002f, 2.083367e-001f, -6.543946e-001f,
  4.911549e-002f, -1.683504e-001f, 1.203472e-001f, 2.031468e-001f, -6.449047e-001f, 1.335747e-002f, -5.529118e-002f, 5.565561e-002f, 2.266539e-001f, -6.878885e-001f,
  5.095900e-002f, -1.745503e-001f, 1.245773e-001f, 2.204624e-001f, -6.765669e-001f, 1.521313e-002f, -5.978015e-002f, 5.568905e-002f, 2.355187e-001f, -7.040981e-001f,
  5.202187e-002f, -1.781433e-001f, 1.270607e-001f, 2.305345e-001f, -6.949842e-001f, 1.707196e-002f, -6.433625e-002f, 5.586592e-002f, 2.441124e-001f, -7.198122e-001f,
  5.246772e-002f, -1.797002e-001f, 1.282224e-001f, 2.349989e-001f, -7.031476e-001f, 1.798795e-002f, -6.709762e-002f, 5.719802e-002f, 2.458625e-001f, -7.230123e-001f,
  5.309598e-002f, -1.818380e-001f, 1.297240e-001f, 2.410197e-001f, -7.141570e-001f, 1.939883e-002f, -7.087795e-002f, 5.810928e-002f, 2.508345e-001f, -7.321038e-001f,
  5.348025e-002f, -1.831750e-001f, 1.307136e-001f, 2.448443e-001f, -7.211504e-001f, 2.092210e-002f, -7.493402e-002f, 5.903181e-002f, 2.563250e-001f, -7.421434e-001f,
  5.364137e-002f, -1.837957e-001f, 1.312735e-001f, 2.467371e-001f, -7.246116e-001f, 2.186563e-002f, -7.788028e-002f, 6.064961e-002f, 2.576375e-001f, -7.445434e-001f,
  5.384091e-002f, -1.845387e-001f, 1.319047e-001f, 2.489573e-001f, -7.286712e-001f, 2.266324e-002f, -8.057101e-002f, 6.249983e-002f, 2.577837e-001f, -7.448108e-001f,
  5.389054e-002f, -1.848174e-001f, 1.322883e-001f, 2.499617e-001f, -7.305079e-001f, 2.356567e-002f, -8.351103e-002f, 6.434163e-002f, 2.584513e-001f, -7.460316e-001f,
  5.398904e-002f, -1.852542e-001f, 1.327687e-001f, 2.513947e-001f, -7.331282e-001f, 2.447067e-002f, -8.649517e-002f, 6.627482e-002f, 2.589489e-001f, -7.469415e-001f,
  5.375166e-002f, -1.846937e-001f, 1.327977e-001f, 2.503100e-001f, -7.311447e-001f, 2.542120e-002f, -8.961231e-002f, 6.826400e-002f, 2.595539e-001f, -7.480477e-001f,
  5.370250e-002f, -1.847253e-001f, 1.331596e-001f, 2.507957e-001f, -7.320329e-001f, 2.630922e-002f, -9.263983e-002f, 7.040063e-002f, 2.595637e-001f, -7.480656e-001f,
  5.404372e-002f, -1.858659e-001f, 1.339259e-001f, 2.539674e-001f, -7.378325e-001f, 2.251205e-002f, -8.015488e-002f, 6.237555e-002f, 2.545970e-001f, -7.389837e-001f,
  5.404372e-002f, -1.858659e-001f, 1.339259e-001f, 2.539674e-001f, -7.378325e-001f, 2.161564e-002f, -7.696316e-002f, 5.989180e-002f, 2.545970e-001f, -7.389837e-001f,
  5.404372e-002f, -1.858659e-001f, 1.339259e-001f, 2.539674e-001f, -7.378325e-001f, 2.075492e-002f, -7.389854e-002f, 5.750694e-002f, 2.545970e-001f, -7.389837e-001f,
  5.404372e-002f, -1.858659e-001f, 1.339259e-001f, 2.539674e-001f, -7.378325e-001f, 1.992847e-002f, -7.095595e-002f, 5.521705e-002f, 2.545970e-001f, -7.389837e-001f,
  5.404372e-002f, -1.858659e-001f, 1.339259e-001f, 2.539674e-001f, -7.378325e-001f, 1.913493e-002f, -6.813052e-002f, 5.301834e-002f, 2.545970e-001f, -7.389837e-001f,
  5.404372e-002f, -1.858659e-001f, 1.339259e-001f, 2.539674e-001f, -7.378325e-001f, 1.837299e-002f, -6.541761e-002f, 5.090719e-002f, 2.545970e-001f, -7.389837e-001f,
  5.404372e-002f, -1.858659e-001f, 1.339259e-001f, 2.539674e-001f, -7.378325e-001f, 1.764139e-002f, -6.281272e-002f, 4.888010e-002f, 2.545970e-001f, -7.389837e-001f,
  5.404372e-002f, -1.858659e-001f, 1.339259e-001f, 2.539674e-001f, -7.378325e-001f, 1.693892e-002f, -6.031156e-002f, 4.693372e-002f, 2.545970e-001f, -7.389837e-001f,
  5.404372e-002f, -1.858659e-001f, 1.339259e-001f, 2.539674e-001f, -7.378325e-001f, 1.626442e-002f, -5.790999e-002f, 4.506485e-002f, 2.545970e-001f, -7.389837e-001f,
  5.404372e-002f, -1.858659e-001f, 1.339259e-001f, 2.539674e-001f, -7.378325e-001f, 1.561678e-002f, -5.560405e-002f, 4.327040e-002f, 2.545970e-001f, -7.389837e-001f,
  -1.683628e-001f, 1.982600e-001f, -2.595084e-002f, 6.965870e-002f, -5.393913e-001f, 0.000000e+000f, -4.865109e-002f, 5.589673e-002f, 0.000000e+000f, -4.655425e-001f,
  -1.683628e-001f, 2.235144e-001f, -5.190167e-002f, 1.393174e-001f, -6.143913e-001f, 0.000000e+000f, -4.865109e-002f, 5.589673e-002f, 0.000000e+000f, -4.655425e-001f,
  -1.683628e-001f, 2.487688e-001f, -7.785251e-002f, 2.089761e-001f, -6.893913e-001f, 0.000000e+000f, -4.865109e-002f, 5.589673e-002f, 0.000000e+000f, -4.655425e-001f,
  -1.683628e-001f, 2.740233e-001f, -1.038033e-001f, 2.786348e-001f, -7.643913e-001f, 0.000000e+000f, -4.865109e-002f, 5.589673e-002f, 0.000000e+000f, -4.655425e-001f,
  0.000000e+000f, -7.547134e-002f, 1.636528e-001f, 0.000000e+000f, -2.734412e-001f,
  5.263271e-002f, -1.684989e-001f, 1.178957e-001f, 1.064869e-001f, -4.681574e-001f, -1.457015e-002f, -1.299271e-002f, 9.668235e-002f, 6.339565e-002f, -3.893631e-001f,
  5.263271e-002f, -1.684989e-001f, 1.178957e-001f, 1.064869e-001f, -4.681574e-001f, 4.963599e-003f, -4.602190e-002f, 7.645549e-002f, 1.658735e-001f, -5.767487e-001f,
  6.012897e-002f, -1.918832e-001f, 1.333550e-001f, 1.584172e-001f, -5.631145e-001f, 1.125774e-002f, -5.735474e-002f, 7.143468e-002f, 1.964431e-001f, -6.326466e-001f,
  6.455040e-002f, -2.056730e-001f, 1.424674e-001f, 1.890372e-001f, -6.191045e-001f, 1.556017e-002f, -6.548268e-002f, 6.882936e-002f, 2.159856e-001f, -6.683810e-001f,
  6.699596e-002f, -2.133227e-001f, 1.475559e-001f, 2.060527e-001f, -6.502182e-001f, 1.858923e-002f, -7.156011e-002f, 6.776510e-002f, 2.284834e-001f, -6.912338e-001f,
  6.907770e-002f, -2.198133e-001f, 1.518419e-001f, 2.204624e-001f, -6.765669e-001f, 2.062223e-002f, -7.602009e-002f, 6.787699e-002f, 2.355187e-001f, -7.040981e-001f,
  7.033077e-002f, -2.237417e-001f, 1.544683e-001f, 2.292121e-001f, -6.925663e-001f, 2.276954e-002f, -8.073166e-002f, 6.799692e-002f, 2.429466e-001f, -7.176805e-001f,
  7.105157e-002f, -2.260358e-001f, 1.560537e-001f, 2.343674e-001f, -7.019930e-001f, 2.416302e-002f, -8.420454e-002f, 6.897541e-002f, 2.462922e-001f, -7.237980e-001f,
  7.132011e-002f, -2.269610e-001f, 1.567973e-001f, 2.365384e-001f, -7.059628e-001f, 2.493053e-002f, -8.663633e-002f, 7.063968e-002f, 2.462922e-001f, -7.237980e-001f,
  7.238005e-002f, -2.302402e-001f, 1.589241e-001f, 2.437845e-001f, -7.192125e-001f, 2.726399e-002f, -9.182841e-002f, 7.092633e-002f, 2.541081e-001f, -7.380897e-001f,
  7.248056e-002f, -2.306536e-001f, 1.593479e-001f, 2.448354e-001f, -7.211341e-001f, 2.855701e-002f, -9.525987e-002f, 7.228735e-002f, 2.564706e-001f, -7.424097e-001f,
  7.271380e-002f, -2.314617e-001f, 1.600036e-001f, 2.467371e-001f, -7.246116e-001f, 2.964005e-002f, -9.836274e-002f, 7.392320e-002f, 2.576375e-001f, -7.445434e-001f,
  7.298475e-002f, -2.323778e-001f, 1.607160e-001f, 2.488657e-001f, -7.285038e-001f, 3.054970e-002f, -1.011952e-001f, 7.578786e-002f, 2.578140e-001f, -7.448662e-001f,
  7.295041e-002f, -2.324180e-001f, 1.609646e-001f, 2.491508e-001f, -7.290251e-001f, 3.148394e-002f, -1.041054e-001f, 7.770577e-002f, 2.579907e-001f, -7.451893e-001f,
  7.322486e-002f, -2.333435e-001f, 1.616809e-001f, 2.512983e-001f, -7.329518e-001f, 3.262580e-002f, -1.074241e-001f, 7.953294e-002f, 2.590532e-001f, -7.471320e-001f,
  7.307763e-002f, -2.330905e-001f, 1.618247e-001f, 2.510110e-001f, -7.324265e-001f, 3.353928e-002f, -1.103683e-001f, 8.162206e-002f, 2.588758e-001f, -7.468077e-001f,
  7.282307e-002f, -2.325710e-001f, 1.618952e-001f, 2.502224e-001f, -7.309846e-001f, 3.470138e-002f, -1.138002e-001f, 8.359967e-002f, 2.597638e-001f, -7.484314e-001f,
  7.279666e-002f, -2.327016e-001f, 1.623025e-001f, 2.507957e-001f, -7.320329e-001f, 3.566358e-002f, -1.169052e-001f, 8.580830e-002f, 2.595637e-001f, -7.480656e-001f,
  7.325920e-002f, -2.341353e-001f, 1.632365e-001f, 2.539674e-001f, -7.378325e-001f, 3.563568e-002f, -1.182157e-001f, 8.878101e-002f, 2.545970e-001f, -7.389837e-001f,
  7.325920e-002f, -2.341353e-001f, 1.632365e-001f, 2.539674e-001f, -7.378325e-001f, 2.970075e-002f, -9.852747e-002f, 7.399501e-002f, 2.545970e-001f, -7.389837e-001f,
  7.325920e-002f, -2.341353e-001f, 1.632365e-001f, 2.539674e-001f, -7.378325e-001f, 2.871187e-002f, -9.524703e-002f, 7.153137e-002f, 2.545970e-001f, -7.389837e-001f,
  7.325920e-002f, -2.341353e-001f, 1.632365e-001f, 2.539674e-001f, -7.378325e-001f, 2.775592e-002f, -9.207582e-002f, 6.914976e-002f, 2.545970e-001f, -7.389837e-001f,
  7.325920e-002f, -2.341353e-001f, 1.632365e-001f, 2.539674e-001f, -7.378325e-001f, 2.683179e-002f, -8.901018e-002f, 6.684744e-002f, 2.545970e-001f, -7.389837e-001f,
  7.325920e-002f, -2.341353e-001f, 1.632365e-001f, 2.539674e-001f, -7.378325e-001f, 2.593844e-002f, -8.604662e-002f, 6.462178e-002f, 2.545970e-001f, -7.389837e-001f,
  7.325920e-002f, -2.341353e-001f, 1.632365e-001f, 2.539674e-001f, -7.378325e-001f, 2.507483e-002f, -8.318173e-002f, 6.247022e-002f, 2.545970e-001f, -7.389837e-001f,
  7.325920e-002f, -2.341353e-001f, 1.632365e-001f, 2.539674e-001f, -7.378325e-001f, 2.423997e-002f, -8.041222e-002f, 6.039030e-002f, 2.545970e-001f, -7.389837e-001f,
  7.325920e-002f, -2.341353e-001f, 1.632365e-001f, 2.539674e-001f, -7.378325e-001f, 2.343291e-002f, -7.773492e-002f, 5.837962e-002f, 2.545970e-001f, -7.389837e-001f,
  7.325920e-002f, -2.341353e-001f, 1.632365e-001f, 2.539674e-001f, -7.378325e-001f, 2.265272e-002f, -7.514676e-002f, 5.643589e-002f, 2.545970e-001f, -7.389837e-001f,
  7.325920e-002f, -2.341353e-001f, 1.632365e-001f, 2.539674e-001f, -7.378325e-001f, 2.189850e-002f, -7.264478e-002f, 5.455688e-002f, 2.545970e-001f, -7.389837e-001f,
  7.325920e-002f, -2.341353e-001f, 1.632365e-001f, 2.539674e-001f, -7.378325e-001f, 2.116940e-002f, -7.022610e-002f, 5.274043e-002f, 2.545970e-001f, -7.389837e-001f,
  -1.889062e-001f, 2.224514e-001f, -2.911732e-002f, 6.965870e-002f, -5.393913e-001f, 0.000000e+000f, -5.458742e-002f, 6.271716e-002f, 0.000000e+000f, -4.655425e-001f,
  -1.889062e-001f, 2.507873e-001f, -5.823463e-002f, 1.393174e-001f, -6.143913e-001f, 0.000000e+000f, -5.458742e-002f, 6.271716e-002f, 0.000000e+000f, -4.655425e-001f,
  -1.889062e-001f, 2.791232e-001f, -8.735195e-002f, 2.089761e-001f, -6.893913e-001f, 0.000000e+000f, -5.458742e-002f, 6.271716e-002f, 0.000000e+000f, -4.655425e-001f,
  -1.889062e-001f, 3.074592e-001f, -1.164693e-001f, 2.786348e-001f, -7.643913e-001f, 0.000000e+000f, -5.458742e-002f, 6.271716e-002f, 0.000000e+000f, -4.655425e-001f,
  -1.889062e-001f, 3.357951e-001f, -1.455866e-001f, 3.482935e-001f, -8.393913e-001f, 0.000000e+000f, -5.458742e-002f, 6.271716e-002f, 0.000000e+000f, -4.655425e-001f,
  0.000000e+000f, -1.010491e-001f, 1.999903e-001f, 0.000000e+000f, -2.734412e-001f,
  7.047031e-002f, -2.122665e-001f, 1.440733e-001f, 1.064869e-001f, -4.681574e-001f, -1.950808e-002f, -2.108832e-002f, 1.181497e-001f, 6.339565e-002f, -3.893631e-001f,
  7.047031e-002f, -2.122665e-001f, 1.440733e-001f, 1.064869e-001f, -4.681574e-001f, 6.645797e-003f, -6.036120e-002f, 9.343170e-002f, 1.658735e-001f, -5.767487e-001f,
  8.050711e-002f, -2.416762e-001f, 1.629652e-001f, 1.584172e-001f, -5.631145e-001f, 1.507306e-002f, -7.393979e-002f, 8.729607e-002f, 1.964431e-001f, -6.326466e-001f,
  8.642698e-002f, -2.590190e-001f, 1.741009e-001f, 1.890372e-001f, -6.191045e-001f, 2.083362e-002f, -8.373205e-002f, 8.411226e-002f, 2.159856e-001f, -6.683810e-001f,
  8.970137e-002f, -2.686415e-001f, 1.803193e-001f, 2.060527e-001f, -6.502182e-001f, 2.488925e-002f, -9.110156e-002f, 8.281169e-002f, 2.284834e-001f, -6.912338e-001f,
  9.248862e-002f, -2.768043e-001f, 1.855570e-001f, 2.204624e-001f, -6.765669e-001f, 2.761124e-002f, -9.655787e-002f, 8.294843e-002f, 2.355187e-001f, -7.040981e-001f,
  9.416637e-002f, -2.817465e-001f, 1.887665e-001f, 2.292121e-001f, -6.925663e-001f, 3.048630e-002f, -1.023221e-001f, 8.309499e-002f, 2.429466e-001f, -7.176805e-001f,
  9.513146e-002f, -2.846354e-001f, 1.907039e-001f, 2.343674e-001f, -7.019930e-001f, 3.235204e-002f, -1.066188e-001f, 8.429074e-002f, 2.462922e-001f, -7.237980e-001f,
  9.549101e-002f, -2.858061e-001f, 1.916126e-001f, 2.365384e-001f, -7.059628e-001f, 3.337967e-002f, -1.096802e-001f, 8.632455e-002f, 2.462922e-001f, -7.237980e-001f,
  9.691017e-002f, -2.899281e-001f, 1.942117e-001f, 2.437845e-001f, -7.192125e-001f, 3.650395e-002f, -1.160406e-001f, 8.667485e-002f, 2.541081e-001f, -7.380897e-001f,
  9.704473e-002f, -2.904561e-001f, 1.947296e-001f, 2.448354e-001f, -7.211341e-001f, 3.823519e-002f, -1.203073e-001f, 8.833806e-002f, 2.564706e-001f, -7.424097e-001f,
  9.735703e-002f, -2.914790e-001f, 1.955308e-001f, 2.467371e-001f, -7.246116e-001f, 3.968527e-002f, -1.241873e-001f, 9.033714e-002f, 2.576375e-001f, -7.445434e-001f,
  9.771980e-002f, -2.926369e-001f, 1.964015e-001f, 2.488657e-001f, -7.285038e-001f, 4.090321e-002f, -1.277492e-001f, 9.261584e-002f, 2.578140e-001f, -7.448662e-001f,
  9.767382e-002f, -2.926994e-001f, 1.967052e-001f, 2.491508e-001f, -7.290251e-001f, 4.215407e-002f, -1.314090e-001f, 9.495960e-002f, 2.579907e-001f, -7.451893e-001f,
  9.804128e-002f, -2.938690e-001f, 1.975806e-001f, 2.512983e-001f, -7.329518e-001f, 4.368291e-002f, -1.355630e-001f, 9.719247e-002f, 2.590532e-001f, -7.471320e-001f,
  9.784415e-002f, -2.935676e-001f, 1.977564e-001f, 2.510110e-001f, -7.324265e-001f, 4.490598e-002f, -1.392736e-001f, 9.974546e-002f, 2.588758e-001f, -7.468077e-001f,
  9.750332e-002f, -2.929365e-001f, 1.978424e-001f, 2.502224e-001f, -7.309846e-001f, 4.646192e-002f, -1.435741e-001f, 1.021622e-001f, 2.597638e-001f, -7.484314e-001f,
  9.746797e-002f, -2.931181e-001f, 1.983402e-001f, 2.507957e-001f, -7.320329e-001f, 4.775022e-002f, -1.474876e-001f, 1.048612e-001f, 2.595637e-001f, -7.480656e-001f,
  9.808726e-002f, -2.949205e-001f, 1.994816e-001f, 2.539674e-001f, -7.378325e-001f, 4.771286e-002f, -1.492492e-001f, 1.084940e-001f, 2.545970e-001f, -7.389837e-001f,
  9.808726e-002f, -2.949205e-001f, 1.994816e-001f, 2.539674e-001f, -7.378325e-001f, 3.976654e-002f, -1.243925e-001f, 9.042490e-002f, 2.545970e-001f, -7.389837e-001f,
  9.808726e-002f, -2.949205e-001f, 1.994816e-001f, 2.539674e-001f, -7.378325e-001f, 3.844253e-002f, -1.202509e-001f, 8.741423e-002f, 2.545970e-001f, -7.389837e-001f,
  9.808726e-002f, -2.949205e-001f, 1.994816e-001f, 2.539674e-001f, -7.378325e-001f, 3.716260e-002f, -1.162472e-001f, 8.450381e-002f, 2.545970e-001f, -7.389837e-001f,
  9.808726e-002f, -2.949205e-001f, 1.994816e-001f, 2.539674e-001f, -7.378325e-001f, 3.592528e-002f, -1.123768e-001f, 8.169028e-002f, 2.545970e-001f, -7.389837e-001f,
  9.808726e-002f, -2.949205e-001f, 1.994816e-001f, 2.539674e-001f, -7.378325e-001f, 3.472916e-002f, -1.086352e-001f, 7.897043e-002f, 2.545970e-001f, -7.389837e-001f,
  9.808726e-002f, -2.949205e-001f, 1.994816e-001f, 2.539674e-001f, -7.378325e-001f, 3.357286e-002f, -1.050183e-001f, 7.634114e-002f, 2.545970e-001f, -7.389837e-001f,
  9.808726e-002f, -2.949205e-001f, 1.994816e-001f, 2.539674e-001f, -7.378325e-001f, 3.245507e-002f, -1.015217e-001f, 7.379938e-002f, 2.545970e-001f, -7.389837e-001f,
  9.808726e-002f, -2.949205e-001f, 1.994816e-001f, 2.539674e-001f, -7.378325e-001f, 3.137449e-002f, -9.814160e-002f, 7.134226e-002f, 2.545970e-001f, -7.389837e-001f,
  9.808726e-002f, -2.949205e-001f, 1.994816e-001f, 2.539674e-001f, -7.378325e-001f, 3.032988e-002f, -9.487400e-002f, 6.896694e-002f, 2.545970e-001f, -7.389837e-001f,
  9.808726e-002f, -2.949205e-001f, 1.994816e-001f, 2.539674e-001f, -7.378325e-001f, 2.932006e-002f, -9.171521e-002f, 6.667071e-002f, 2.545970e-001f, -7.389837e-001f,
  9.808726e-002f, -2.949205e-001f, 1.994816e-001f, 2.539674e-001f, -7.378325e-001f, 2.834386e-002f, -8.866158e-002f, 6.445093e-002f, 2.545970e-001f, -7.389837e-001f,
  -2.119562e-001f, 2.495945e-001f, -3.267017e-002f, 6.965870e-002f, -5.393913e-001f, 0.000000e+000f, -6.124809e-002f, 7.036981e-002f, 0.000000e+000f, -4.655425e-001f,
  -2.119562e-001f, 2.813880e-001f, -6.534033e-002f, 1.393174e-001f, -6.143913e-001f, 0.000000e+000f, -6.124809e-002f, 7.036981e-002f, 0.000000e+000f, -4.655425e-001f,
  -2.119562e-001f, 3.131814e-001f, -9.801050e-002f, 2.089761e-001f, -6.893913e-001f, 0.000000e+000f, -6.124809e-002f, 7.036981e-002f, 0.000000e+000f, -4.655425e-001f,
  -2.119562e-001f, 3.449748e-001f, -1.306807e-001f, 2.786348e-001f, -7.643913e-001f, 0.000000e+000f, -6.124809e-002f, 7.036981e-002f, 0.000000e+000f, -4.655425e-001f,
  -2.119562e-001f, 3.767683e-001f, -1.633508e-001f, 3.482935e-001f, -8.393913e-001f, 0.000000e+000f, -6.124809e-002f, 7.036981e-002f, 0.000000e+000f, -4.655425e-001f,
  0.000000e+000f, 0.000000e+000f, 2.450000e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.708597e-001f, 1.764984e-001f, 0.000000e+000f, -1.947162e-001f, 0.000000e+000f, 4.729858e-002f, 1.447405e-001f, 0.000000e+000f, -1.159219e-001f,
  0.000000e+000f, -1.708597e-001f, 1.764984e-001f, 0.000000e+000f, -1.947162e-001f, 0.000000e+000f, -1.611316e-002f, 1.144594e-001f, 0.000000e+000f, -3.033076e-001f,
  0.000000e+000f, -1.951946e-001f, 1.996421e-001f, 0.000000e+000f, -2.896733e-001f, 0.000000e+000f, -3.654560e-002f, 1.069429e-001f, 0.000000e+000f, -3.592054e-001f,
  0.000000e+000f, -2.095477e-001f, 2.132840e-001f, 0.000000e+000f, -3.456634e-001f, 0.000000e+000f, -5.051244e-002f, 1.030425e-001f, 0.000000e+000f, -3.949398e-001f,
  0.000000e+000f, -2.174867e-001f, 2.209018e-001f, 0.000000e+000f, -3.767770e-001f, 0.000000e+000f, -6.034556e-002f, 1.014492e-001f, 0.000000e+000f, -4.177926e-001f,
  0.000000e+000f, -2.242445e-001f, 2.273184e-001f, 0.000000e+000f, -4.031258e-001f, 0.000000e+000f, -6.694522e-002f, 1.016168e-001f, 0.000000e+000f, -4.306569e-001f,
  0.000000e+000f, -2.283123e-001f, 2.312502e-001f, 0.000000e+000f, -4.191251e-001f, 0.000000e+000f, -7.391598e-002f, 1.017963e-001f, 0.000000e+000f, -4.442394e-001f,
  0.000000e+000f, -2.306523e-001f, 2.336237e-001f, 0.000000e+000f, -4.285518e-001f, 0.000000e+000f, -7.843958e-002f, 1.032612e-001f, 0.000000e+000f, -4.503568e-001f,
  0.000000e+000f, -2.315240e-001f, 2.347368e-001f, 0.000000e+000f, -4.325216e-001f, 0.000000e+000f, -8.093113e-002f, 1.057527e-001f, 0.000000e+000f, -4.503568e-001f,
  0.000000e+000f, -2.349649e-001f, 2.379208e-001f, 0.000000e+000f, -4.457714e-001f, 0.000000e+000f, -8.850614e-002f, 1.061818e-001f, 0.000000e+000f, -4.646486e-001f,
  0.000000e+000f, -2.352911e-001f, 2.385553e-001f, 0.000000e+000f, -4.476929e-001f, 0.000000e+000f, -9.270364e-002f, 1.082194e-001f, 0.000000e+000f, -4.689685e-001f,
  0.000000e+000f, -2.360483e-001f, 2.395369e-001f, 0.000000e+000f, -4.511704e-001f, 0.000000e+000f, -9.621946e-002f, 1.106684e-001f, 0.000000e+000f, -4.711022e-001f,
  0.000000e+000f, -2.369279e-001f, 2.406035e-001f, 0.000000e+000f, -4.550627e-001f, 0.000000e+000f, -9.917243e-002f, 1.134599e-001f, 0.000000e+000f, -4.714250e-001f,
  0.000000e+000f, -2.368164e-001f, 2.409756e-001f, 0.000000e+000f, -4.555839e-001f, 0.000000e+000f, -1.022052e-001f, 1.163312e-001f, 0.000000e+000f, -4.717481e-001f,
  0.000000e+000f, -2.377073e-001f, 2.420480e-001f, 0.000000e+000f, -4.595107e-001f, 0.000000e+000f, -1.059120e-001f, 1.190666e-001f, 0.000000e+000f, -4.736909e-001f,
  0.000000e+000f, -2.372294e-001f, 2.422633e-001f, 0.000000e+000f, -4.589853e-001f, 0.000000e+000f, -1.088774e-001f, 1.221941e-001f, 0.000000e+000f, -4.733666e-001f,
  0.000000e+000f, -2.364030e-001f, 2.423687e-001f, 0.000000e+000f, -4.575435e-001f, 0.000000e+000f, -1.126499e-001f, 1.251547e-001f, 0.000000e+000f, -4.749903e-001f,
  0.000000e+000f, -2.363173e-001f, 2.429786e-001f, 0.000000e+000f, -4.585917e-001f, 0.000000e+000f, -1.157735e-001f, 1.284612e-001f, 0.000000e+000f, -4.746245e-001f,
  0.000000e+000f, -2.378188e-001f, 2.443769e-001f, 0.000000e+000f, -4.643913e-001f, 0.000000e+000f, -1.156829e-001f, 1.329116e-001f, 0.000000e+000f, -4.655425e-001f,
  0.000000e+000f, -2.378188e-001f, 2.443769e-001f, 0.000000e+000f, -4.643913e-001f, 0.000000e+000f, -9.641650e-002f, 1.107759e-001f, 0.000000e+000f, -4.655425e-001f,
  0.000000e+000f, -2.378188e-001f, 2.443769e-001f, 0.000000e+000f, -4.643913e-001f, 0.000000e+000f, -9.320635e-002f, 1.070876e-001f, 0.000000e+000f, -4.655425e-001f,
  0.000000e+000f, -2.378188e-001f, 2.443769e-001f, 0.000000e+000f, -4.643913e-001f, 0.000000e+000f, -9.010307e-002f, 1.035222e-001f, 0.000000e+000f, -4.655425e-001f,
  0.000000e+000f, -2.378188e-001f, 2.443769e-001f, 0.000000e+000f, -4.643913e-001f, 0.000000e+000f, -8.710312e-002f, 1.000754e-001f, 0.000000e+000f, -4.655425e-001f,
  0.000000e+000f, -2.378188e-001f, 2.443769e-001f, 0.000000e+000f, -4.643913e-001f, 0.000000e+000f, -8.420305e-002f, 9.674347e-002f, 0.000000e+000f, -4.655425e-001f,
  0.000000e+000f, -2.378188e-001f, 2.443769e-001f, 0.000000e+000f, -4.643913e-001f, 0.000000e+000f, -8.139954e-002f, 9.352243e-002f, 0.000000e+000f, -4.655425e-001f,
  0.000000e+000f, -2.378188e-001f, 2.443769e-001f, 0.000000e+000f, -4.643913e-001f, 0.000000e+000f, -7.868937e-002f, 9.040863e-002f, 0.000000e+000f, -4.655425e-001f,
  0.000000e+000f, -2.378188e-001f, 2.443769e-001f, 0.000000e+000f, -4.643913e-001f, 0.000000e+000f, -7.606943e-002f, 8.739851e-002f, 0.000000e+000f, -4.655425e-001f,
  0.000000e+000f, -2.378188e-001f, 2.443769e-001f, 0.000000e+000f, -4.643913e-001f, 0.000000e+000f, -7.353673e-002f, 8.448860e-002f, 0.000000e+000f, -4.655425e-001f,
  0.000000e+000f, -2.378188e-001f, 2.443769e-001f, 0.000000e+000f, -4.643913e-001f, 0.000000e+000f, -7.108835e-002f, 8.167558e-002f, 0.000000e+000f, -4.655425e-001f,
  0.000000e+000f, -2.378188e-001f, 2.443769e-001f, 0.000000e+000f, -4.643913e-001f, 0.000000e+000f, -6.872149e-002f, 7.895622e-002f, 0.000000e+000f, -4.655425e-001f,
  -2.378188e-001f, 2.800497e-001f, -3.665653e-002f, 6.965870e-002f, -5.393913e-001f, 0.000000e+000f, -6.872149e-002f, 7.895622e-002f, 0.000000e+000f, -4.655425e-001f,
  -2.378188e-001f, 3.157225e-001f, -7.331306e-002f, 1.393174e-001f, -6.143913e-001f, 0.000000e+000f, -6.872149e-002f, 7.895622e-002f, 0.000000e+000f, -4.655425e-001f,
  -2.378188e-001f, 3.513953e-001f, -1.099696e-001f, 2.089761e-001f, -6.893913e-001f, 0.000000e+000f, -6.872149e-002f, 7.895622e-002f, 0.000000e+000f, -4.655425e-001f,
  -2.378188e-001f, 3.870681e-001f, -1.466261e-001f, 2.786348e-001f, -7.643913e-001f, 0.000000e+000f, -6.872149e-002f, 7.895622e-002f, 0.000000e+000f, -4.655425e-001f,
  -2.378188e-001f, 4.227410e-001f, -1.832826e-001f, 3.482935e-001f, -8.393913e-001f, 0.000000e+000f, -6.872149e-002f, 7.895622e-002f, 0.000000e+000f, -4.655425e-001f,
  0.000000e+000f, -1.247952e-001f, 2.129766e-001f, 0.000000e+000f, -2.734412e-001f,
  8.703049e-002f, -2.384297e-001f, 1.534287e-001f, 1.064869e-001f, -4.681574e-001f, -2.409238e-002f, -3.260988e-002f, 1.258218e-001f, 6.339565e-002f, -3.893631e-001f,
  8.703049e-002f, -2.384297e-001f, 1.534287e-001f, 1.064869e-001f, -4.681574e-001f, 8.207528e-003f, -7.230900e-002f, 9.949865e-002f, 1.658735e-001f, -5.767487e-001f,
  9.942589e-002f, -2.713724e-001f, 1.735473e-001f, 1.584172e-001f, -5.631145e-001f, 1.861516e-002f, -8.624209e-002f, 9.296461e-002f, 1.964431e-001f, -6.326466e-001f,
  1.067369e-001f, -2.907982e-001f, 1.854061e-001f, 1.890372e-001f, -6.191045e-001f, 2.572942e-002f, -9.639664e-002f, 8.957406e-002f, 2.159856e-001f, -6.683810e-001f,
  1.107808e-001f, -3.015798e-001f, 1.920283e-001f, 2.060527e-001f, -6.502182e-001f, 3.073810e-002f, -1.041329e-001f, 8.818904e-002f, 2.284834e-001f, -6.912338e-001f,
  1.142230e-001f, -3.107228e-001f, 1.976061e-001f, 2.204624e-001f, -6.765669e-001f, 3.409976e-002f, -1.099553e-001f, 8.833466e-002f, 2.355187e-001f, -7.040981e-001f,
  1.162950e-001f, -3.162616e-001f, 2.010240e-001f, 2.292121e-001f, -6.925663e-001f, 3.765044e-002f, -1.161064e-001f, 8.849073e-002f, 2.429466e-001f, -7.176805e-001f,
  1.174869e-001f, -3.195047e-001f, 2.030872e-001f, 2.343674e-001f, -7.019930e-001f, 3.995462e-002f, -1.207849e-001f, 8.976413e-002f, 2.462922e-001f, -7.237980e-001f,
  1.179309e-001f, -3.208295e-001f, 2.040549e-001f, 2.365384e-001f, -7.059628e-001f, 4.122373e-002f, -1.242199e-001f, 9.193001e-002f, 2.462922e-001f, -7.237980e-001f,
  1.196836e-001f, -3.254424e-001f, 2.068227e-001f, 2.437845e-001f, -7.192125e-001f, 4.508220e-002f, -1.310233e-001f, 9.230305e-002f, 2.541081e-001f, -7.380897e-001f,
  1.198498e-001f, -3.260492e-001f, 2.073743e-001f, 2.448354e-001f, -7.211341e-001f, 4.722027e-002f, -1.357100e-001f, 9.407426e-002f, 2.564706e-001f, -7.424097e-001f,
  1.202355e-001f, -3.272074e-001f, 2.082276e-001f, 2.467371e-001f, -7.246116e-001f, 4.901112e-002f, -1.400138e-001f, 9.620315e-002f, 2.576375e-001f, -7.445434e-001f,
  1.206835e-001f, -3.285153e-001f, 2.091547e-001f, 2.488657e-001f, -7.285038e-001f, 5.051527e-002f, -1.440027e-001f, 9.862981e-002f, 2.578140e-001f, -7.448662e-001f,
  1.206267e-001f, -3.286079e-001f, 2.094782e-001f, 2.491508e-001f, -7.290251e-001f, 5.206007e-002f, -1.481016e-001f, 1.011258e-001f, 2.579907e-001f, -7.451893e-001f,
  1.210805e-001f, -3.299287e-001f, 2.104105e-001f, 2.512983e-001f, -7.329518e-001f, 5.394819e-002f, -1.527172e-001f, 1.035036e-001f, 2.590532e-001f, -7.471320e-001f,
  1.208371e-001f, -3.296228e-001f, 2.105976e-001f, 2.510110e-001f, -7.324265e-001f, 5.545867e-002f, -1.568881e-001f, 1.062224e-001f, 2.588758e-001f, -7.468077e-001f,
  1.204161e-001f, -3.289582e-001f, 2.106893e-001f, 2.502224e-001f, -7.309846e-001f, 5.738025e-002f, -1.616755e-001f, 1.087960e-001f, 2.597638e-001f, -7.484314e-001f,
  1.203725e-001f, -3.291943e-001f, 2.112194e-001f, 2.507957e-001f, -7.320329e-001f, 5.897130e-002f, -1.660750e-001f, 1.116703e-001f, 2.595637e-001f, -7.480656e-001f,
  1.211373e-001f, -3.312118e-001f, 2.124349e-001f, 2.539674e-001f, -7.378325e-001f, 5.892516e-002f, -1.682631e-001f, 1.155390e-001f, 2.545970e-001f, -7.389837e-001f,
  1.211373e-001f, -3.312118e-001f, 2.124349e-001f, 2.539674e-001f, -7.378325e-001f, 4.911149e-002f, -1.402398e-001f, 9.629661e-002f, 2.545970e-001f, -7.389837e-001f,
  1.211373e-001f, -3.312118e-001f, 2.124349e-001f, 2.539674e-001f, -7.378325e-001f, 4.747634e-002f, -1.355706e-001f, 9.309045e-002f, 2.545970e-001f, -7.389837e-001f,
  1.211373e-001f, -3.312118e-001f, 2.124349e-001f, 2.539674e-001f, -7.378325e-001f, 4.589563e-002f, -1.310568e-001f, 8.999103e-002f, 2.545970e-001f, -7.389837e-001f,
  1.211373e-001f, -3.312118e-001f, 2.124349e-001f, 2.539674e-001f, -7.378325e-001f, 4.436755e-002f, -1.266933e-001f, 8.699481e-002f, 2.545970e-001f, -7.389837e-001f,
  1.211373e-001f, -3.312118e-001f, 2.124349e-001f, 2.539674e-001f, -7.378325e-001f, 4.289035e-002f, -1.224751e-001f, 8.409835e-002f, 2.545970e-001f, -7.389837e-001f,
  1.211373e-001f, -3.312118e-001f, 2.124349e-001f, 2.539674e-001f, -7.378325e-001f, 4.146233e-002f, -1.183973e-001f, 8.129832e-002f, 2.545970e-001f, -7.389837e-001f,
  1.211373e-001f, -3.312118e-001f, 2.124349e-001f, 2.539674e-001f, -7.378325e-001f, 4.008185e-002f, -1.144553e-001f, 7.859152e-002f, 2.545970e-001f, -7.389837e-001f,
  1.211373e-001f, -3.312118e-001f, 2.124349e-001f, 2.539674e-001f, -7.378325e-001f, 3.874734e-002f, -1.106446e-001f, 7.597484e-002f, 2.545970e-001f, -7.389837e-001f,
  1.211373e-001f, -3.312118e-001f, 2.124349e-001f, 2.539674e-001f, -7.378325e-001f, 3.745726e-002f, -1.069607e-001f, 7.344529e-002f, 2.545970e-001f, -7.389837e-001f,
  1.211373e-001f, -3.312118e-001f, 2.124349e-001f, 2.539674e-001f, -7.378325e-001f, 3.621014e-002f, -1.033995e-001f, 7.099995e-002f, 2.545970e-001f, -7.389837e-001f,
  1.211373e-001f, -3.312118e-001f, 2.124349e-001f, 2.539674e-001f, -7.378325e-001f, 3.500453e-002f, -9.995683e-002f, 6.863603e-002f, 2.545970e-001f, -7.389837e-001f,
  -1.498531e-001f, 1.764633e-001f, -2.309781e-002f, 6.965870e-002f, -5.393913e-001f, 0.000000e+000f, -4.330240e-002f, 4.975145e-002f, 0.000000e+000f, -4.655425e-001f,
  -1.498531e-001f, 1.989413e-001f, -4.619562e-002f, 1.393174e-001f, -6.143913e-001f, 0.000000e+000f, -4.330240e-002f, 4.975145e-002f, 0.000000e+000f, -4.655425e-001f,
  -1.498531e-001f, 2.214193e-001f, -6.929342e-002f, 2.089761e-001f, -6.893913e-001f, 0.000000e+000f, -4.330240e-002f, 4.975145e-002f, 0.000000e+000f, -4.655425e-001f,
  -1.498531e-001f, 2.438972e-001f, -9.239123e-002f, 2.786348e-001f, -7.643913e-001f, 0.000000e+000f, -4.330240e-002f, 4.975145e-002f, 0.000000e+000f, -4.655425e-001f,
  -1.498531e-001f, 2.663752e-001f, -1.154890e-001f, 3.482935e-001f, -8.393913e-001f, 0.000000e+000f, -4.330240e-002f, 4.975145e-002f, 0.000000e+000f, -4.655425e-001f,
  0.000000e+000f, -1.154972e-001f, 1.855422e-001f, 0.000000e+000f, -2.734412e-001f,
  8.054622e-002f, -2.125990e-001f, 1.336649e-001f, 1.064869e-001f, -4.681574e-001f, -2.229736e-002f, -3.241321e-002f, 1.096141e-001f, 6.339565e-002f, -3.893631e-001f,
  8.054622e-002f, -2.125990e-001f, 1.336649e-001f, 1.064869e-001f, -4.681574e-001f, 7.596020e-003f, -6.616086e-002f, 8.668182e-002f, 1.658735e-001f, -5.767487e-001f,
  9.201808e-002f, -2.419385e-001f, 1.511920e-001f, 1.584172e-001f, -5.631145e-001f, 1.722822e-002f, -7.809124e-002f, 8.098946e-002f, 1.964431e-001f, -6.326466e-001f,
  9.878439e-002f, -2.592394e-001f, 1.615232e-001f, 1.890372e-001f, -6.191045e-001f, 2.381243e-002f, -8.682985e-002f, 7.803566e-002f, 2.159856e-001f, -6.683810e-001f,
  1.025270e-001f, -2.688429e-001f, 1.672923e-001f, 2.060527e-001f, -6.502182e-001f, 2.844793e-002f, -9.352552e-002f, 7.682905e-002f, 2.284834e-001f, -6.912338e-001f,
  1.057127e-001f, -2.769856e-001f, 1.721516e-001f, 2.204624e-001f, -6.765669e-001f, 3.155913e-002f, -9.860251e-002f, 7.695591e-002f, 2.355187e-001f, -7.040981e-001f,
  1.076304e-001f, -2.819197e-001f, 1.751293e-001f, 2.292121e-001f, -6.925663e-001f, 3.484526e-002f, -1.039662e-001f, 7.709188e-002f, 2.429466e-001f, -7.176805e-001f,
  1.087334e-001f, -2.848106e-001f, 1.769267e-001f, 2.343674e-001f, -7.019930e-001f, 3.697777e-002f, -1.080826e-001f, 7.820124e-002f, 2.462922e-001f, -7.237980e-001f,
  1.091444e-001f, -2.859956e-001f, 1.777697e-001f, 2.365384e-001f, -7.059628e-001f, 3.815232e-002f, -1.111440e-001f, 8.008812e-002f, 2.462922e-001f, -7.237980e-001f,
  1.107665e-001f, -2.901024e-001f, 1.801810e-001f, 2.437845e-001f, -7.192125e-001f, 4.172331e-002f, -1.170830e-001f, 8.041311e-002f, 2.541081e-001f, -7.380897e-001f,
  1.109203e-001f, -2.906486e-001f, 1.806616e-001f, 2.448354e-001f, -7.211341e-001f, 4.370209e-002f, -1.212223e-001f, 8.195617e-002f, 2.564706e-001f, -7.424097e-001f,
  1.112772e-001f, -2.916848e-001f, 1.814049e-001f, 2.467371e-001f, -7.246116e-001f, 4.535951e-002f, -1.250394e-001f, 8.381083e-002f, 2.576375e-001f, -7.445434e-001f,
  1.116919e-001f, -2.928537e-001f, 1.822126e-001f, 2.488657e-001f, -7.285038e-001f, 4.675159e-002f, -1.285917e-001f, 8.592490e-002f, 2.578140e-001f, -7.448662e-001f,
  1.116393e-001f, -2.929447e-001f, 1.824945e-001f, 2.491508e-001f, -7.290251e-001f, 4.818129e-002f, -1.322421e-001f, 8.809934e-002f, 2.579907e-001f, -7.451893e-001f,
  1.120593e-001f, -2.941249e-001f, 1.833066e-001f, 2.512983e-001f, -7.329518e-001f, 4.992873e-002f, -1.363388e-001f, 9.017090e-002f, 2.590532e-001f, -7.471320e-001f,
  1.118340e-001f, -2.938645e-001f, 1.834697e-001f, 2.510110e-001f, -7.324265e-001f, 5.132668e-002f, -1.400589e-001f, 9.253946e-002f, 2.588758e-001f, -7.468077e-001f,
  1.114444e-001f, -2.932884e-001f, 1.835495e-001f, 2.502224e-001f, -7.309846e-001f, 5.310509e-002f, -1.443115e-001f, 9.478158e-002f, 2.597638e-001f, -7.484314e-001f,
  1.114040e-001f, -2.935109e-001f, 1.840113e-001f, 2.507957e-001f, -7.320329e-001f, 5.457759e-002f, -1.482358e-001f, 9.728562e-002f, 2.595637e-001f, -7.480656e-001f,
  1.121119e-001f, -2.953072e-001f, 1.850703e-001f, 2.539674e-001f, -7.378325e-001f, 5.453489e-002f, -1.502652e-001f, 1.006560e-001f, 2.545970e-001f, -7.389837e-001f,
  1.121119e-001f, -2.953072e-001f, 1.850703e-001f, 2.539674e-001f, -7.378325e-001f, 4.545240e-002f, -1.252393e-001f, 8.389225e-002f, 2.545970e-001f, -7.389837e-001f,
  1.121119e-001f, -2.953072e-001f, 1.850703e-001f, 2.539674e-001f, -7.378325e-001f, 4.393907e-002f, -1.210695e-001f, 8.109908e-002f, 2.545970e-001f, -7.389837e-001f,
  1.121119e-001f, -2.953072e-001f, 1.850703e-001f, 2.539674e-001f, -7.378325e-001f, 4.247614e-002f, -1.170386e-001f, 7.839892e-002f, 2.545970e-001f, -7.389837e-001f,
  1.121119e-001f, -2.953072e-001f, 1.850703e-001f, 2.539674e-001f, -7.378325e-001f, 4.106191e-002f, -1.131418e-001f, 7.578865e-002f, 2.545970e-001f, -7.389837e-001f,
  1.121119e-001f, -2.953072e-001f, 1.850703e-001f, 2.539674e-001f, -7.378325e-001f, 3.969477e-002f, -1.093748e-001f, 7.326529e-002f, 2.545970e-001f, -7.389837e-001f,
  1.121119e-001f, -2.953072e-001f, 1.850703e-001f, 2.539674e-001f, -7.378325e-001f, 3.837314e-002f, -1.057332e-001f, 7.082595e-002f, 2.545970e-001f, -7.389837e-001f,
  1.121119e-001f, -2.953072e-001f, 1.850703e-001f, 2.539674e-001f, -7.378325e-001f, 3.709552e-002f, -1.022128e-001f, 6.846782e-002f, 2.545970e-001f, -7.389837e-001f,
  1.121119e-001f, -2.953072e-001f, 1.850703e-001f, 2.539674e-001f, -7.378325e-001f, 3.586044e-002f, -9.880969e-002f, 6.618821e-002f, 2.545970e-001f, -7.389837e-001f,
  1.121119e-001f, -2.953072e-001f, 1.850703e-001f, 2.539674e-001f, -7.378325e-001f, 3.466648e-002f, -9.551986e-002f, 6.398450e-002f, 2.545970e-001f, -7.389837e-001f,
  1.121119e-001f, -2.953072e-001f, 1.850703e-001f, 2.539674e-001f, -7.378325e-001f, 3.351227e-002f, -9.233956e-002f, 6.185415e-002f, 2.545970e-001f, -7.389837e-001f,
  1.121119e-001f, -2.953072e-001f, 1.850703e-001f, 2.539674e-001f, -7.378325e-001f, 3.239649e-002f, -8.926514e-002f, 5.979474e-002f, 2.545970e-001f, -7.389837e-001f,
  -1.335567e-001f, 1.572731e-001f, -2.058594e-002f, 6.965870e-002f, -5.393913e-001f, 0.000000e+000f, -3.859330e-002f, 4.434103e-002f, 0.000000e+000f, -4.655425e-001f,
  -1.335567e-001f, 1.773066e-001f, -4.117189e-002f, 1.393174e-001f, -6.143913e-001f, 0.000000e+000f, -3.859330e-002f, 4.434103e-002f, 0.000000e+000f, -4.655425e-001f,
  -1.335567e-001f, 1.973401e-001f, -6.175783e-002f, 2.089761e-001f, -6.893913e-001f, 0.000000e+000f, -3.859330e-002f, 4.434103e-002f, 0.000000e+000f, -4.655425e-001f,
  -1.335567e-001f, 2.173736e-001f, -8.234377e-002f, 2.786348e-001f, -7.643913e-001f, 0.000000e+000f, -3.859330e-002f, 4.434103e-002f, 0.000000e+000f, -4.655425e-001f,
  -1.335567e-001f, 2.374071e-001f, -1.029297e-001f, 3.482935e-001f, -8.393913e-001f, 0.000000e+000f, -3.859330e-002f, 4.434103e-002f, 0.000000e+000f, -4.655425e-001f,
  0.000000e+000f, -1.108859e-001f, 1.733136e-001f, 0.000000e+000f, -2.734412e-001f,
  7.733037e-002f, -2.007490e-001f, 1.248554e-001f, 1.064869e-001f, -4.681574e-001f, -1.362392e-002f, -4.037009e-002f, 9.638044e-002f, 9.149637e-002f, -4.407466e-001f,
  8.287038e-002f, -2.146687e-001f, 1.330779e-001f, 1.325884e-001f, -5.158854e-001f, 1.241510e-002f, -6.910407e-002f, 7.767964e-002f, 1.833382e-001f, -6.086836e-001f,
  9.258397e-002f, -2.390956e-001f, 1.475271e-001f, 1.784038e-001f, -5.996608e-001f, 2.036791e-002f, -7.914272e-002f, 7.394174e-002f, 2.083367e-001f, -6.543946e-001f,
  9.782050e-002f, -2.522822e-001f, 1.553453e-001f, 2.031468e-001f, -6.449047e-001f, 2.660331e-002f, -8.754438e-002f, 7.184077e-002f, 2.266539e-001f, -6.878885e-001f,
  1.014921e-001f, -2.615144e-001f, 1.608056e-001f, 2.204624e-001f, -6.765669e-001f, 3.029911e-002f, -9.334851e-002f, 7.188394e-002f, 2.355187e-001f, -7.040981e-001f,
  1.036090e-001f, -2.668740e-001f, 1.640112e-001f, 2.305345e-001f, -6.949842e-001f, 3.400124e-002f, -9.928097e-002f, 7.211224e-002f, 2.441124e-001f, -7.198122e-001f,
  1.044969e-001f, -2.692213e-001f, 1.655107e-001f, 2.349989e-001f, -7.031476e-001f, 3.582556e-002f, -1.032325e-001f, 7.383173e-002f, 2.458625e-001f, -7.230123e-001f,
  1.057482e-001f, -2.724171e-001f, 1.674490e-001f, 2.410197e-001f, -7.141570e-001f, 3.863552e-002f, -1.083770e-001f, 7.500799e-002f, 2.508345e-001f, -7.321038e-001f,
  1.065135e-001f, -2.744306e-001f, 1.687264e-001f, 2.448443e-001f, -7.211504e-001f, 4.166933e-002f, -1.138807e-001f, 7.619881e-002f, 2.563250e-001f, -7.421434e-001f,
  1.068344e-001f, -2.753945e-001f, 1.694490e-001f, 2.467371e-001f, -7.246116e-001f, 4.354851e-002f, -1.181539e-001f, 7.828707e-002f, 2.576375e-001f, -7.445434e-001f,
  1.072318e-001f, -2.765369e-001f, 1.702638e-001f, 2.489573e-001f, -7.286712e-001f, 4.513706e-002f, -1.221648e-001f, 8.067536e-002f, 2.577837e-001f, -7.448108e-001f,
  1.073307e-001f, -2.770082e-001f, 1.707589e-001f, 2.499617e-001f, -7.305079e-001f, 4.693438e-002f, -1.264951e-001f, 8.305277e-002f, 2.584513e-001f, -7.460316e-001f,
  1.075268e-001f, -2.777116e-001f, 1.713791e-001f, 2.513947e-001f, -7.331282e-001f, 4.873683e-002f, -1.309088e-001f, 8.554815e-002f, 2.589489e-001f, -7.469415e-001f,
  1.070541e-001f, -2.769966e-001f, 1.714165e-001f, 2.503100e-001f, -7.311447e-001f, 5.062994e-002f, -1.355105e-001f, 8.811581e-002f, 2.595539e-001f, -7.480477e-001f,
  1.069562e-001f, -2.771425e-001f, 1.718836e-001f, 2.507957e-001f, -7.320329e-001f, 5.239856e-002f, -1.400394e-001f, 9.087378e-002f, 2.595637e-001f, -7.480656e-001f,
  1.076358e-001f, -2.788375e-001f, 1.728728e-001f, 2.539674e-001f, -7.378325e-001f, 4.483596e-002f, -1.215916e-001f, 8.051494e-002f, 2.545970e-001f, -7.389837e-001f,
  1.076358e-001f, -2.788375e-001f, 1.728728e-001f, 2.539674e-001f, -7.378325e-001f, 4.305062e-002f, -1.167499e-001f, 7.730888e-002f, 2.545970e-001f, -7.389837e-001f,
  1.076358e-001f, -2.788375e-001f, 1.728728e-001f, 2.539674e-001f, -7.378325e-001f, 4.133637e-002f, -1.121010e-001f, 7.423049e-002f, 2.545970e-001f, -7.389837e-001f,
  1.076358e-001f, -2.788375e-001f, 1.728728e-001f, 2.539674e-001f, -7.378325e-001f, 3.969038e-002f, -1.076372e-001f, 7.127468e-002f, 2.545970e-001f, -7.389837e-001f,
  1.076358e-001f, -2.788375e-001f, 1.728728e-001f, 2.539674e-001f, -7.378325e-001f, 3.810994e-002f, -1.033511e-001f, 6.843657e-002f, 2.545970e-001f, -7.389837e-001f,
  1.076358e-001f, -2.788375e-001f, 1.728728e-001f, 2.539674e-001f, -7.378325e-001f, 3.659242e-002f, -9.923574e-002f, 6.571147e-002f, 2.545970e-001f, -7.389837e-001f,
  1.076358e-001f, -2.788375e-001f, 1.728728e-001f, 2.539674e-001f, -7.378325e-001f, 3.513533e-002f, -9.528424e-002f, 6.309488e-002f, 2.545970e-001f, -7.389837e-001f,
  1.076358e-001f, -2.788375e-001f, 1.728728e-001f, 2.539674e-001f, -7.378325e-001f, 3.373627e-002f, -9.149008e-002f, 6.058248e-002f, 2.545970e-001f, -7.389837e-001f,
  1.076358e-001f, -2.788375e-001f, 1.728728e-001f, 2.539674e-001f, -7.378325e-001f, 3.239291e-002f, -8.784700e-002f, 5.817012e-002f, 2.545970e-001f, -7.389837e-001f,
  1.076358e-001f, -2.788375e-001f, 1.728728e-001f, 2.539674e-001f, -7.378325e-001f, 3.110305e-002f, -8.434899e-002f, 5.585383e-002f, 2.545970e-001f, -7.389837e-001f,
  -1.260856e-001f, 1.484754e-001f, -1.943438e-002f, 6.965870e-002f, -5.393913e-001f, 0.000000e+000f, -3.643443e-002f, 4.186063e-002f, 0.000000e+000f, -4.655425e-001f,
  -1.260856e-001f, 1.673882e-001f, -3.886877e-002f, 1.393174e-001f, -6.143913e-001f, 0.000000e+000f, -3.643443e-002f, 4.186063e-002f, 0.000000e+000f, -4.655425e-001f,
  -1.260856e-001f, 1.863011e-001f, -5.830315e-002f, 2.089761e-001f, -6.893913e-001f, 0.000000e+000f, -3.643443e-002f, 4.186063e-002f, 0.000000e+000f, -4.655425e-001f,
  -1.260856e-001f, 2.052139e-001f, -7.773753e-002f, 2.786348e-001f, -7.643913e-001f, 0.000000e+000f, -3.643443e-002f, 4.186063e-002f, 0.000000e+000f, -4.655425e-001f,
  0.000000e+000f, -1.063315e-001f, 1.619702e-001f, 0.000000e+000f, -2.734412e-001f,
  7.415415e-002f, -1.895572e-001f, 1.166836e-001f, 1.064869e-001f, -4.681574e-001f, -1.306434e-002f, -3.923104e-002f, 9.007232e-002f, 9.149637e-002f, -4.407466e-001f,
  8.148008e-002f, -2.076770e-001f, 1.272862e-001f, 1.424909e-001f, -5.339924e-001f, 1.348924e-002f, -6.765130e-002f, 7.175108e-002f, 1.887273e-001f, -6.185379e-001f,
  8.993114e-002f, -2.285909e-001f, 1.395344e-001f, 1.840530e-001f, -6.099907e-001f, 2.076246e-002f, -7.664929e-002f, 6.858118e-002f, 2.123014e-001f, -6.616443e-001f,
  9.499766e-002f, -2.411588e-001f, 1.469226e-001f, 2.090449e-001f, -6.556895e-001f, 2.680924e-002f, -8.485328e-002f, 6.704756e-002f, 2.300776e-001f, -6.941488e-001f,
  9.816845e-002f, -2.490017e-001f, 1.515122e-001f, 2.246291e-001f, -6.841860e-001f, 3.027318e-002f, -9.023345e-002f, 6.720553e-002f, 2.385459e-001f, -7.096336e-001f,
  9.998407e-002f, -2.535613e-001f, 1.542448e-001f, 2.337258e-001f, -7.008197e-001f, 3.379610e-002f, -9.609877e-002f, 6.796563e-002f, 2.461667e-001f, -7.235685e-001f,
  1.004828e-001f, -2.549384e-001f, 1.551852e-001f, 2.365384e-001f, -7.059628e-001f, 3.512459e-002f, -9.940110e-002f, 6.991341e-002f, 2.462922e-001f, -7.237980e-001f,
  1.021188e-001f, -2.589579e-001f, 1.575118e-001f, 2.445108e-001f, -7.205407e-001f, 3.893175e-002f, -1.054931e-001f, 7.035938e-002f, 2.551490e-001f, -7.399931e-001f,
  1.022529e-001f, -2.595003e-001f, 1.580271e-001f, 2.457011e-001f, -7.227171e-001f, 4.114886e-002f, -1.102798e-001f, 7.250624e-002f, 2.571846e-001f, -7.437153e-001f,
  1.027950e-001f, -2.609459e-001f, 1.589711e-001f, 2.486292e-001f, -7.280714e-001f, 4.280082e-002f, -1.141866e-001f, 7.462434e-002f, 2.578435e-001f, -7.449201e-001f,
  1.028364e-001f, -2.613111e-001f, 1.594314e-001f, 2.494951e-001f, -7.296546e-001f, 4.467517e-002f, -1.187748e-001f, 7.726421e-002f, 2.581996e-001f, -7.455712e-001f,
  1.031615e-001f, -2.622740e-001f, 1.601440e-001f, 2.514932e-001f, -7.333083e-001f, 4.649086e-002f, -1.230268e-001f, 7.952818e-002f, 2.590298e-001f, -7.470893e-001f,
  1.026570e-001f, -2.615406e-001f, 1.601972e-001f, 2.503100e-001f, -7.311447e-001f, 4.855040e-002f, -1.280156e-001f, 8.234861e-002f, 2.595539e-001f, -7.480477e-001f,
  1.025631e-001f, -2.616842e-001f, 1.606338e-001f, 2.507957e-001f, -7.320329e-001f, 5.024637e-002f, -1.322911e-001f, 8.492607e-002f, 2.595637e-001f, -7.480656e-001f,
  1.032148e-001f, -2.632837e-001f, 1.615582e-001f, 2.539674e-001f, -7.378325e-001f, 4.299439e-002f, -1.148891e-001f, 7.524522e-002f, 2.545970e-001f, -7.389837e-001f,
  1.032148e-001f, -2.632837e-001f, 1.615582e-001f, 2.539674e-001f, -7.378325e-001f, 4.100375e-002f, -1.095697e-001f, 7.176136e-002f, 2.545970e-001f, -7.389837e-001f,
  1.032148e-001f, -2.632837e-001f, 1.615582e-001f, 2.539674e-001f, -7.378325e-001f, 3.937101e-002f, -1.052067e-001f, 6.890387e-002f, 2.545970e-001f, -7.389837e-001f,
  1.032148e-001f, -2.632837e-001f, 1.615582e-001f, 2.539674e-001f, -7.378325e-001f, 3.754813e-002f, -1.003357e-001f, 6.571362e-002f, 2.545970e-001f, -7.389837e-001f,
  1.032148e-001f, -2.632837e-001f, 1.615582e-001f, 2.539674e-001f, -7.378325e-001f, 3.605299e-002f, -9.634035e-002f, 6.309694e-002f, 2.545970e-001f, -7.389837e-001f,
  1.032148e-001f, -2.632837e-001f, 1.615582e-001f, 2.539674e-001f, -7.378325e-001f, 3.438373e-002f, -9.187979e-002f, 6.017555e-002f, 2.545970e-001f, -7.389837e-001f,
  1.032148e-001f, -2.632837e-001f, 1.615582e-001f, 2.539674e-001f, -7.378325e-001f, 3.301459e-002f, -8.822119e-002f, 5.777940e-002f, 2.545970e-001f, -7.389837e-001f,
  1.032148e-001f, -2.632837e-001f, 1.615582e-001f, 2.539674e-001f, -7.378325e-001f, 3.169997e-002f, -8.470828e-002f, 5.547866e-002f, 2.545970e-001f, -7.389837e-001f,
  1.032148e-001f, -2.632837e-001f, 1.615582e-001f, 2.539674e-001f, -7.378325e-001f, 3.023226e-002f, -8.078629e-002f, 5.291000e-002f, 2.545970e-001f, -7.389837e-001f,
  1.032148e-001f, -2.632837e-001f, 1.615582e-001f, 2.539674e-001f, -7.378325e-001f, 2.982554e-002f, -7.969944e-002f, 5.219818e-002f, 2.545970e-001f, -7.389837e-001f,
  -1.190325e-001f, 1.401698e-001f, -1.834724e-002f, 6.965870e-002f, -5.393913e-001f, 0.000000e+000f, -3.439632e-002f, 3.951899e-002f, 0.000000e+000f, -4.655425e-001f,
  -1.190325e-001f, 1.580247e-001f, -3.669448e-002f, 1.393174e-001f, -6.143913e-001f, 0.000000e+000f, -3.439632e-002f, 3.951899e-002f, 0.000000e+000f, -4.655425e-001f,
  -1.190325e-001f, 1.758796e-001f, -5.504172e-002f, 2.089761e-001f, -6.893913e-001f, 0.000000e+000f, -3.439632e-002f, 3.951899e-002f, 0.000000e+000f, -4.655425e-001f,
  0.000000e+000f, -1.040815e-001f, 1.566079e-001f, 0.000000e+000f, -2.734412e-001f,
  7.258507e-002f, -1.841967e-001f, 1.128205e-001f, 1.064869e-001f, -4.681574e-001f, -1.120397e-003f, -5.057633e-002f, 7.863704e-002f, 1.360004e-001f, -5.221243e-001f,
  8.433148e-002f, -2.130439e-001f, 1.296318e-001f, 1.654954e-001f, -5.760572e-001f, 1.667790e-002f, -7.020096e-002f, 6.786988e-002f, 2.002483e-001f, -6.396046e-001f,
  9.181784e-002f, -2.314460e-001f, 1.403715e-001f, 2.031468e-001f, -6.449047e-001f, 2.497082e-002f, -8.071590e-002f, 6.491602e-002f, 2.266539e-001f, -6.878885e-001f,
  9.609123e-002f, -2.419464e-001f, 1.464961e-001f, 2.246291e-001f, -6.841860e-001f, 2.963260e-002f, -8.777321e-002f, 6.498056e-002f, 2.385459e-001f, -7.096336e-001f,
  9.798628e-002f, -2.466852e-001f, 1.493359e-001f, 2.343674e-001f, -7.019930e-001f, 3.332290e-002f, -9.400749e-002f, 6.600616e-002f, 2.462922e-001f, -7.237980e-001f,
  9.925907e-002f, -2.499113e-001f, 1.513085e-001f, 2.410197e-001f, -7.141570e-001f, 3.626469e-002f, -9.961143e-002f, 6.777796e-002f, 2.508345e-001f, -7.321038e-001f,
  9.997051e-002f, -2.518100e-001f, 1.525548e-001f, 2.449839e-001f, -7.214057e-001f, 3.966923e-002f, -1.058718e-001f, 6.948986e-002f, 2.566707e-001f, -7.427756e-001f,
  1.006199e-001f, -2.535536e-001f, 1.537081e-001f, 2.486292e-001f, -7.280714e-001f, 4.189517e-002f, -1.109916e-001f, 7.215376e-002f, 2.578435e-001f, -7.449201e-001f,
  1.007444e-001f, -2.541340e-001f, 1.542994e-001f, 2.499617e-001f, -7.305079e-001f, 4.405430e-002f, -1.161634e-001f, 7.504729e-002f, 2.584513e-001f, -7.460316e-001f,
  1.007804e-001f, -2.545597e-001f, 1.548585e-001f, 2.510110e-001f, -7.324265e-001f, 4.625358e-002f, -1.215070e-001f, 7.810841e-002f, 2.588758e-001f, -7.468077e-001f,
  1.003482e-001f, -2.540752e-001f, 1.551080e-001f, 2.503251e-001f, -7.311724e-001f, 4.875528e-002f, -1.273312e-001f, 8.120802e-002f, 2.600130e-001f, -7.488872e-001f,
  1.010308e-001f, -2.558343e-001f, 1.562095e-001f, 2.539674e-001f, -7.378325e-001f, 4.208464e-002f, -1.116756e-001f, 7.275408e-002f, 2.545970e-001f, -7.389837e-001f,
  1.010308e-001f, -2.558343e-001f, 1.562095e-001f, 2.539674e-001f, -7.378325e-001f, 3.986523e-002f, -1.057862e-001f, 6.891725e-002f, 2.545970e-001f, -7.389837e-001f,
  1.010308e-001f, -2.558343e-001f, 1.562095e-001f, 2.539674e-001f, -7.378325e-001f, 3.776286e-002f, -1.002074e-001f, 6.528277e-002f, 2.545970e-001f, -7.389837e-001f,
  1.010308e-001f, -2.558343e-001f, 1.562095e-001f, 2.539674e-001f, -7.378325e-001f, 3.577136e-002f, -9.492273e-002f, 6.183995e-002f, 2.545970e-001f, -7.389837e-001f,
  1.010308e-001f, -2.558343e-001f, 1.562095e-001f, 2.539674e-001f, -7.378325e-001f, 3.388488e-002f, -8.991679e-002f, 5.857870e-002f, 2.545970e-001f, -7.389837e-001f,
  1.010308e-001f, -2.558343e-001f, 1.562095e-001f, 2.539674e-001f, -7.378325e-001f, 3.209790e-002f, -8.517485e-002f, 5.548944e-002f, 2.545970e-001f, -7.389837e-001f,
  1.010308e-001f, -2.558343e-001f, 1.562095e-001f, 2.539674e-001f, -7.378325e-001f, 3.040515e-002f, -8.068299e-002f, 5.256309e-002f, 2.545970e-001f, -7.389837e-001f,
  1.010308e-001f, -2.558343e-001f, 1.562095e-001f, 2.539674e-001f, -7.378325e-001f, 2.919444e-002f, -7.747024e-002f, 5.047006e-002f, 2.545970e-001f, -7.389837e-001f,
  -1.156553e-001f, 1.361929e-001f, -1.782669e-002f, 6.965870e-002f, -5.393913e-001f, 0.000000e+000f, -3.342042e-002f, 3.839775e-002f, 0.000000e+000f, -4.655425e-001f,
  -1.156553e-001f, 1.535412e-001f, -3.565338e-002f, 1.393174e-001f, -6.143913e-001f, 0.000000e+000f, -3.342042e-002f, 3.839775e-002f, 0.000000e+000f, -4.655425e-001f,
  -1.156553e-001f, 1.708895e-001f, -5.348008e-002f, 2.089761e-001f, -6.893913e-001f, 0.000000e+000f, -3.342042e-002f, 3.839775e-002f, 0.000000e+000f, -4.655425e-001f,
  0.000000e+000f, -1.018525e-001f, 1.514406e-001f, 0.000000e+000f, -2.734412e-001f,
  7.103059e-002f, -1.789874e-001f, 1.090980e-001f, 1.064869e-001f, -4.681574e-001f, 6.698636e-003f, -5.754352e-002f, 7.075018e-002f, 1.658735e-001f, -5.767487e-001f,
  8.711413e-002f, -2.181940e-001f, 1.318361e-001f, 1.890372e-001f, -6.191045e-001f, 2.099926e-002f, -7.406030e-002f, 6.369314e-002f, 2.159856e-001f, -6.683810e-001f,
  9.322397e-002f, -2.331129e-001f, 1.405111e-001f, 2.204624e-001f, -6.765669e-001f, 2.783077e-002f, -8.362508e-002f, 6.281184e-002f, 2.355187e-001f, -7.040981e-001f,
  9.588781e-002f, -2.396950e-001f, 1.444086e-001f, 2.343674e-001f, -7.019930e-001f, 3.260926e-002f, -9.141366e-002f, 6.382829e-002f, 2.462922e-001f, -7.237980e-001f,
  9.768067e-002f, -2.441471e-001f, 1.470648e-001f, 2.437845e-001f, -7.192125e-001f, 3.679418e-002f, -9.885024e-002f, 6.563363e-002f, 2.541081e-001f, -7.380897e-001f,
  9.813108e-002f, -2.454887e-001f, 1.480637e-001f, 2.467371e-001f, -7.246116e-001f, 4.000080e-002f, -1.054832e-001f, 6.840686e-002f, 2.576375e-001f, -7.445434e-001f,
  9.845039e-002f, -2.465616e-001f, 1.489530e-001f, 2.491508e-001f, -7.290251e-001f, 4.248922e-002f, -1.115373e-001f, 7.190717e-002f, 2.579907e-001f, -7.451893e-001f,
  9.862208e-002f, -2.473522e-001f, 1.497490e-001f, 2.510110e-001f, -7.324265e-001f, 4.526301e-002f, -1.180989e-001f, 7.553122e-002f, 2.588758e-001f, -7.468077e-001f,
  9.824290e-002f, -2.470857e-001f, 1.501911e-001f, 2.507957e-001f, -7.320329e-001f, 4.812987e-002f, -1.249669e-001f, 7.940507e-002f, 2.595637e-001f, -7.480656e-001f,
  9.886712e-002f, -2.485952e-001f, 1.510554e-001f, 2.539674e-001f, -7.378325e-001f, 4.008271e-002f, -1.056497e-001f, 6.847332e-002f, 2.545970e-001f, -7.389837e-001f,
  9.886712e-002f, -2.485952e-001f, 1.510554e-001f, 2.539674e-001f, -7.378325e-001f, 3.745806e-002f, -9.873166e-002f, 6.398963e-002f, 2.545970e-001f, -7.389837e-001f,
  9.886712e-002f, -2.485952e-001f, 1.510554e-001f, 2.539674e-001f, -7.378325e-001f, 3.500528e-002f, -9.226663e-002f, 5.979954e-002f, 2.545970e-001f, -7.389837e-001f,
  9.886712e-002f, -2.485952e-001f, 1.510554e-001f, 2.539674e-001f, -7.378325e-001f, 3.271311e-002f, -8.622494e-002f, 5.588382e-002f, 2.545970e-001f, -7.389837e-001f,
  9.886712e-002f, -2.485952e-001f, 1.510554e-001f, 2.539674e-001f, -7.378325e-001f, 3.057103e-002f, -8.057887e-002f, 5.222450e-002f, 2.545970e-001f, -7.389837e-001f,
  9.886712e-002f, -2.485952e-001f, 1.510554e-001f, 2.539674e-001f, -7.378325e-001f, 2.856921e-002f, -7.530250e-002f, 4.880480e-002f, 2.545970e-001f, -7.389837e-001f,
  -1.123739e-001f, 1.323288e-001f, -1.732091e-002f, 6.965870e-002f, -5.393913e-001f, 0.000000e+000f, -3.247222e-002f, 3.730833e-002f, 0.000000e+000f, -4.655425e-001f,
  -1.123739e-001f, 1.491849e-001f, -3.464182e-002f, 1.393174e-001f, -6.143913e-001f, 0.000000e+000f, -3.247222e-002f, 3.730833e-002f, 0.000000e+000f, -4.655425e-001f,
  0.000000e+000f, -9.964626e-002f, 1.464604e-001f, 0.000000e+000f, -2.734412e-001f,
  6.949197e-002f, -1.739248e-001f, 1.055103e-001f, 1.064869e-001f, -4.681574e-001f, 1.486380e-002f, -6.534261e-002f, 6.393019e-002f, 1.964431e-001f, -6.326466e-001f,
  9.120461e-002f, -2.265076e-001f, 1.358904e-001f, 2.204624e-001f, -6.765669e-001f, 2.722792e-002f, -8.134920e-002f, 6.074625e-002f, 2.355187e-001f, -7.040981e-001f,
  9.416531e-002f, -2.338765e-001f, 1.403251e-001f, 2.365384e-001f, -7.059628e-001f, 3.291626e-002f, -9.139211e-002f, 6.321871e-002f, 2.462922e-001f, -7.237980e-001f,
  9.600542e-002f, -2.385334e-001f, 1.431946e-001f, 2.467371e-001f, -7.246116e-001f, 3.913432e-002f, -1.025307e-001f, 6.615728e-002f, 2.576375e-001f, -7.445434e-001f,
  9.668018e-002f, -2.405465e-001f, 1.446957e-001f, 2.512983e-001f, -7.329518e-001f, 4.307646e-002f, -1.117406e-001f, 7.117769e-002f, 2.590532e-001f, -7.471320e-001f,
  9.611483e-002f, -2.400940e-001f, 1.452520e-001f, 2.507957e-001f, -7.320329e-001f, 4.708731e-002f, -1.214568e-001f, 7.679380e-002f, 2.595637e-001f, -7.480656e-001f,
  9.672552e-002f, -2.415603e-001f, 1.460879e-001f, 2.539674e-001f, -7.378325e-001f, 3.790883e-002f, -9.927314e-002f, 6.401672e-002f, 2.545970e-001f, -7.389837e-001f,
  9.672552e-002f, -2.415603e-001f, 1.460879e-001f, 2.539674e-001f, -7.378325e-001f, 3.424702e-002f, -8.968383e-002f, 5.783301e-002f, 2.545970e-001f, -7.389837e-001f,
  9.672552e-002f, -2.415603e-001f, 1.460879e-001f, 2.539674e-001f, -7.378325e-001f, 3.093892e-002f, -8.102079e-002f, 5.224661e-002f, 2.545970e-001f, -7.389837e-001f,
  9.672552e-002f, -2.415603e-001f, 1.460879e-001f, 2.539674e-001f, -7.378325e-001f, 2.795036e-002f, -7.319457e-002f, 4.719984e-002f, 2.545970e-001f, -7.389837e-001f,
  -1.091857e-001f, 1.285744e-001f, -1.682948e-002f, 6.965870e-002f, -5.393913e-001f, 0.000000e+000f, -3.155091e-002f, 3.624981e-002f, 0.000000e+000f, -4.655425e-001f,
  0.000000e+000f, -9.746435e-002f, 1.416598e-001f, 0.000000e+000f, -2.734412e-001f,
  6.797034e-002f, -1.690051e-001f, 1.020519e-001f, 1.064869e-001f, -4.681574e-001f, 2.663172e-002f, -7.913247e-002f, 5.875512e-002f, 2.355187e-001f, -7.040981e-001f,
  9.390324e-002f, -2.317749e-001f, 1.385010e-001f, 2.467371e-001f, -7.246116e-001f, 3.827742e-002f, -9.965978e-002f, 6.398879e-002f, 2.576375e-001f, -7.445434e-001f,
  9.401025e-002f, -2.332996e-001f, 1.404910e-001f, 2.507957e-001f, -7.320329e-001f, 4.605626e-002f, -1.180442e-001f, 7.427667e-002f, 2.595637e-001f, -7.480656e-001f,
  9.460757e-002f, -2.347240e-001f, 1.412995e-001f, 2.539674e-001f, -7.378325e-001f, 3.349713e-002f, -8.717234e-002f, 5.593737e-002f, 2.545970e-001f, -7.389837e-001f,
  9.460757e-002f, -2.347240e-001f, 1.412995e-001f, 2.539674e-001f, -7.378325e-001f, 2.733835e-002f, -7.114484e-002f, 4.565273e-002f, 2.545970e-001f, -7.389837e-001f,
  // Total number of coefficients: 3485
  // Maximum number of elevation coefficients: 5

  //Lite coefficients
  // Headphones
  // 32000 Hz sample rate

    // Coefficients
  // Generated by HRTFConv V5.90d on Wed Feb 10 11:00:45 1999
  0.000000e+000f, -5.570672e-002f, 1.070012e-001f, 0.000000e+000f, -3.340893e-001f,
  4.347627e-002f, -1.279377e-001f, 8.533836e-002f, 1.825582e-001f, -6.073070e-001f, -5.047713e-004f, -2.672968e-002f, 5.320456e-002f, 1.683246e-001f, -5.860049e-001f,
  4.644915e-002f, -1.364692e-001f, 9.075744e-002f, 2.166124e-001f, -6.582727e-001f, 1.034472e-002f, -4.289789e-002f, 4.423168e-002f, 2.595465e-001f, -7.225281e-001f,
  4.982178e-002f, -1.461512e-001f, 9.691139e-002f, 2.552647e-001f, -7.161199e-001f, 1.333171e-002f, -4.798947e-002f, 4.299122e-002f, 2.808977e-001f, -7.544824e-001f,
  5.179782e-002f, -1.518346e-001f, 1.005374e-001f, 2.779737e-001f, -7.501063e-001f, 1.584249e-002f, -5.263346e-002f, 4.264797e-002f, 2.967047e-001f, -7.781393e-001f,
  5.301293e-002f, -1.553209e-001f, 1.027509e-001f, 2.918880e-001f, -7.709306e-001f, 1.733437e-002f, -5.572590e-002f, 4.308368e-002f, 3.041398e-001f, -7.892667e-001f,
  5.370098e-002f, -1.573203e-001f, 1.040527e-001f, 2.999155e-001f, -7.829445e-001f, 1.888121e-002f, -5.911473e-002f, 4.388595e-002f, 3.107763e-001f, -7.991989e-001f,
  5.388940e-002f, -1.579136e-001f, 1.044972e-001f, 3.023830e-001f, -7.866374e-001f, 1.958262e-002f, -6.114489e-002f, 4.519764e-002f, 3.108851e-001f, -7.993618e-001f,
  5.450216e-002f, -1.596613e-001f, 1.055935e-001f, 3.093387e-001f, -7.970474e-001f, 2.120836e-002f, -6.459249e-002f, 4.582170e-002f, 3.185306e-001f, -8.108040e-001f,
  5.455281e-002f, -1.598838e-001f, 1.058340e-001f, 3.103723e-001f, -7.985943e-001f, 2.228944e-002f, -6.745289e-002f, 4.732731e-002f, 3.202776e-001f, -8.134185e-001f,
  5.475489e-002f, -1.605016e-001f, 1.062750e-001f, 3.129095e-001f, -8.023915e-001f, 2.313270e-002f, -6.981981e-002f, 4.876251e-002f, 3.208422e-001f, -8.142636e-001f,
  5.477102e-002f, -1.606438e-001f, 1.064887e-001f, 3.136583e-001f, -8.035121e-001f, 2.410690e-002f, -7.261335e-002f, 5.053407e-002f, 3.211472e-001f, -8.147201e-001f,
  5.489207e-002f, -1.610488e-001f, 1.068201e-001f, 3.153835e-001f, -8.060941e-001f, 2.502744e-002f, -7.518114e-002f, 5.207000e-002f, 3.218578e-001f, -8.157836e-001f,
  5.470633e-002f, -1.607040e-001f, 1.068431e-001f, 3.143623e-001f, -8.045658e-001f, 2.609040e-002f, -7.820957e-002f, 5.396524e-002f, 3.223060e-001f, -8.164544e-001f,
  5.467258e-002f, -1.607443e-001f, 1.070450e-001f, 3.147817e-001f, -8.051934e-001f, 2.698552e-002f, -8.082260e-002f, 5.568183e-002f, 3.223144e-001f, -8.164670e-001f,
  5.491418e-002f, -1.614318e-001f, 1.074741e-001f, 3.175148e-001f, -8.092838e-001f, 2.329614e-002f, -7.037931e-002f, 4.923420e-002f, 3.180562e-001f, -8.100941e-001f,
  5.491418e-002f, -1.614318e-001f, 1.074741e-001f, 3.175148e-001f, -8.092838e-001f, 2.221753e-002f, -6.712074e-002f, 4.695465e-002f, 3.180562e-001f, -8.100941e-001f,
  5.491418e-002f, -1.614318e-001f, 1.074741e-001f, 3.175148e-001f, -8.092838e-001f, 2.133284e-002f, -6.444804e-002f, 4.508495e-002f, 3.180562e-001f, -8.100941e-001f,
  5.491418e-002f, -1.614318e-001f, 1.074741e-001f, 3.175148e-001f, -8.092838e-001f, 2.034513e-002f, -6.146409e-002f, 4.299751e-002f, 3.180562e-001f, -8.100941e-001f,
  5.491418e-002f, -1.614318e-001f, 1.074741e-001f, 3.175148e-001f, -8.092838e-001f, 1.953500e-002f, -5.901663e-002f, 4.128538e-002f, 3.180562e-001f, -8.100941e-001f,
  5.491418e-002f, -1.614318e-001f, 1.074741e-001f, 3.175148e-001f, -8.092838e-001f, 1.863053e-002f, -5.628416e-002f, 3.937386e-002f, 3.180562e-001f, -8.100941e-001f,
  5.491418e-002f, -1.614318e-001f, 1.074741e-001f, 3.175148e-001f, -8.092838e-001f, 1.788867e-002f, -5.404296e-002f, 3.780602e-002f, 3.180562e-001f, -8.100941e-001f,
  5.491418e-002f, -1.614318e-001f, 1.074741e-001f, 3.175148e-001f, -8.092838e-001f, 1.717636e-002f, -5.189100e-002f, 3.630061e-002f, 3.180562e-001f, -8.100941e-001f,
  5.491418e-002f, -1.614318e-001f, 1.074741e-001f, 3.175148e-001f, -8.092838e-001f, 1.638109e-002f, -4.948845e-002f, 3.461989e-002f, 3.180562e-001f, -8.100941e-001f,
  5.491418e-002f, -1.614318e-001f, 1.074741e-001f, 3.175148e-001f, -8.092838e-001f, 1.616071e-002f, -4.882266e-002f, 3.415414e-002f, 3.180562e-001f, -8.100941e-001f,
  -1.523853e-001f, 1.790399e-001f, -2.422177e-002f, 7.413033e-002f, -5.531945e-001f, 0.000000e+000f, -4.484551e-002f, 4.934247e-002f, 0.000000e+000f, -4.760047e-001f,
  -1.523853e-001f, 2.028120e-001f, -4.844355e-002f, 1.482607e-001f, -6.311945e-001f, 0.000000e+000f, -4.484551e-002f, 4.934247e-002f, 0.000000e+000f, -4.760047e-001f,
  -1.523853e-001f, 2.265841e-001f, -7.266532e-002f, 2.223910e-001f, -7.091945e-001f, 0.000000e+000f, -4.484551e-002f, 4.934247e-002f, 0.000000e+000f, -4.760047e-001f,
  0.000000e+000f, -7.364189e-002f, 1.311952e-001f, 0.000000e+000f, -3.340893e-001f,
  5.747376e-002f, -1.611240e-001f, 1.046342e-001f, 1.825582e-001f, -6.073070e-001f, -6.672859e-004f, -3.542842e-002f, 6.523465e-002f, 1.683246e-001f, -5.860049e-001f,
  6.032760e-002f, -1.689152e-001f, 1.094568e-001f, 2.072814e-001f, -6.443079e-001f, 1.281841e-002f, -5.353194e-002f, 5.468505e-002f, 2.546086e-001f, -7.151380e-001f,
  6.526241e-002f, -1.823961e-001f, 1.178111e-001f, 2.500701e-001f, -7.083457e-001f, 1.696013e-002f, -5.994015e-002f, 5.295628e-002f, 2.773367e-001f, -7.491530e-001f,
  6.786319e-002f, -1.895089e-001f, 1.222284e-001f, 2.726565e-001f, -7.421487e-001f, 2.021312e-002f, -6.531218e-002f, 5.220224e-002f, 2.936810e-001f, -7.736141e-001f,
  6.965497e-002f, -1.944026e-001f, 1.252596e-001f, 2.881874e-001f, -7.653923e-001f, 2.222630e-002f, -6.915569e-002f, 5.266001e-002f, 3.014891e-001f, -7.852997e-001f,
  7.067527e-002f, -1.972063e-001f, 1.270163e-001f, 2.971074e-001f, -7.787420e-001f, 2.424034e-002f, -7.307012e-002f, 5.324142e-002f, 3.089925e-001f, -7.965292e-001f,
  7.110082e-002f, -1.984219e-001f, 1.278312e-001f, 3.010332e-001f, -7.846174e-001f, 2.537040e-002f, -7.587154e-002f, 5.464561e-002f, 3.105124e-001f, -7.988040e-001f,
  7.169675e-002f, -2.000722e-001f, 1.288799e-001f, 3.062998e-001f, -7.924993e-001f, 2.697222e-002f, -7.935926e-002f, 5.577514e-002f, 3.148152e-001f, -8.052436e-001f,
  7.205968e-002f, -2.011045e-001f, 1.295672e-001f, 3.096284e-001f, -7.974810e-001f, 2.868440e-002f, -8.305894e-002f, 5.693204e-002f, 3.195403e-001f, -8.123152e-001f,
  7.221190e-002f, -2.015929e-001f, 1.299542e-001f, 3.112709e-001f, -7.999391e-001f, 2.986545e-002f, -8.609093e-002f, 5.858516e-002f, 3.206657e-001f, -8.139994e-001f,
  7.239980e-002f, -2.021721e-001f, 1.303897e-001f, 3.131933e-001f, -8.028161e-001f, 3.092110e-002f, -8.899907e-002f, 6.041561e-002f, 3.207910e-001f, -8.141870e-001f,
  7.244713e-002f, -2.024044e-001f, 1.306533e-001f, 3.140615e-001f, -8.041156e-001f, 3.208436e-002f, -9.210611e-002f, 6.225889e-002f, 3.213627e-001f, -8.150426e-001f,
  7.254013e-002f, -2.027554e-001f, 1.309833e-001f, 3.152986e-001f, -8.059670e-001f, 3.326074e-002f, -9.528246e-002f, 6.418400e-002f, 3.217886e-001f, -8.156800e-001f,
  7.231942e-002f, -2.023723e-001f, 1.310014e-001f, 3.143623e-001f, -8.045658e-001f, 3.449039e-002f, -9.858639e-002f, 6.616732e-002f, 3.223060e-001f, -8.164544e-001f,
  7.227480e-002f, -2.024317e-001f, 1.312489e-001f, 3.147817e-001f, -8.051934e-001f, 3.567370e-002f, -1.018759e-001f, 6.827205e-002f, 3.223144e-001f, -8.164670e-001f,
  7.259419e-002f, -2.032961e-001f, 1.317751e-001f, 3.175148e-001f, -8.092838e-001f, 3.079650e-002f, -8.874954e-002f, 6.036654e-002f, 3.180562e-001f, -8.100941e-001f,
  7.259419e-002f, -2.032961e-001f, 1.317751e-001f, 3.175148e-001f, -8.092838e-001f, 2.957020e-002f, -8.521559e-002f, 5.796279e-002f, 3.180562e-001f, -8.100941e-001f,
  7.259419e-002f, -2.032961e-001f, 1.317751e-001f, 3.175148e-001f, -8.092838e-001f, 2.839273e-002f, -8.182236e-002f, 5.565474e-002f, 3.180562e-001f, -8.100941e-001f,
  7.259419e-002f, -2.032961e-001f, 1.317751e-001f, 3.175148e-001f, -8.092838e-001f, 2.726215e-002f, -7.856425e-002f, 5.343861e-002f, 3.180562e-001f, -8.100941e-001f,
  7.259419e-002f, -2.032961e-001f, 1.317751e-001f, 3.175148e-001f, -8.092838e-001f, 2.617659e-002f, -7.543587e-002f, 5.131072e-002f, 3.180562e-001f, -8.100941e-001f,
  7.259419e-002f, -2.032961e-001f, 1.317751e-001f, 3.175148e-001f, -8.092838e-001f, 2.513426e-002f, -7.243206e-002f, 4.926756e-002f, 3.180562e-001f, -8.100941e-001f,
  7.259419e-002f, -2.032961e-001f, 1.317751e-001f, 3.175148e-001f, -8.092838e-001f, 2.413343e-002f, -6.954786e-002f, 4.730575e-002f, 3.180562e-001f, -8.100941e-001f,
  7.259419e-002f, -2.032961e-001f, 1.317751e-001f, 3.175148e-001f, -8.092838e-001f, 2.317245e-002f, -6.677851e-002f, 4.542207e-002f, 3.180562e-001f, -8.100941e-001f,
  7.259419e-002f, -2.032961e-001f, 1.317751e-001f, 3.175148e-001f, -8.092838e-001f, 2.224974e-002f, -6.411943e-002f, 4.361339e-002f, 3.180562e-001f, -8.100941e-001f,
  7.259419e-002f, -2.032961e-001f, 1.317751e-001f, 3.175148e-001f, -8.092838e-001f, 2.136377e-002f, -6.156624e-002f, 4.187673e-002f, 3.180562e-001f, -8.100941e-001f,
  -1.709791e-001f, 2.008860e-001f, -2.717728e-002f, 7.413033e-002f, -5.531945e-001f, 0.000000e+000f, -5.031749e-002f, 5.536316e-002f, 0.000000e+000f, -4.760047e-001f,
  -1.709791e-001f, 2.275588e-001f, -5.435455e-002f, 1.482607e-001f, -6.311945e-001f, 0.000000e+000f, -5.031749e-002f, 5.536316e-002f, 0.000000e+000f, -4.760047e-001f,
  -1.709791e-001f, 2.542315e-001f, -8.153183e-002f, 2.223910e-001f, -7.091945e-001f, 0.000000e+000f, -5.031749e-002f, 5.536316e-002f, 0.000000e+000f, -4.760047e-001f,
  -1.709791e-001f, 2.809043e-001f, -1.087091e-001f, 2.965213e-001f, -7.871945e-001f, 0.000000e+000f, -5.031749e-002f, 5.536316e-002f, 0.000000e+000f, -4.760047e-001f,
  0.000000e+000f, -9.664937e-002f, 1.612253e-001f, 0.000000e+000f, -3.340893e-001f,
  7.542993e-002f, -2.029105e-001f, 1.285846e-001f, 1.825582e-001f, -6.073070e-001f, -6.172327e-003f, -4.031796e-002f, 8.443205e-002f, 1.417200e-001f, -5.461883e-001f,
  7.542993e-002f, -2.029105e-001f, 1.285846e-001f, 1.825582e-001f, -6.073070e-001f, 1.336068e-002f, -6.387283e-002f, 6.937029e-002f, 2.384763e-001f, -6.909943e-001f,
  8.284469e-002f, -2.223220e-001f, 1.403328e-001f, 2.315340e-001f, -6.806044e-001f, 1.964777e-002f, -7.235138e-002f, 6.601862e-002f, 2.665807e-001f, -7.330555e-001f,
  8.713059e-002f, -2.335385e-001f, 1.471170e-001f, 2.598299e-001f, -7.229522e-001f, 2.395193e-002f, -7.863576e-002f, 6.452462e-002f, 2.841953e-001f, -7.594177e-001f,
  8.946046e-002f, -2.396559e-001f, 1.508384e-001f, 2.752796e-001f, -7.460743e-001f, 2.702728e-002f, -8.356376e-002f, 6.418745e-002f, 2.952980e-001f, -7.760340e-001f,
  9.141684e-002f, -2.447734e-001f, 1.539311e-001f, 2.881874e-001f, -7.653923e-001f, 2.917033e-002f, -8.745414e-002f, 6.471367e-002f, 3.014891e-001f, -7.852997e-001f,
  9.258216e-002f, -2.478409e-001f, 1.558054e-001f, 2.959413e-001f, -7.769968e-001f, 3.141657e-002f, -9.153180e-002f, 6.526517e-002f, 3.079785e-001f, -7.950117e-001f,
  9.324837e-002f, -2.496255e-001f, 1.569285e-001f, 3.004790e-001f, -7.837879e-001f, 3.297691e-002f, -9.483700e-002f, 6.643674e-002f, 3.108851e-001f, -7.993618e-001f,
  9.349639e-002f, -2.503533e-001f, 1.574524e-001f, 3.023830e-001f, -7.866374e-001f, 3.397522e-002f, -9.750063e-002f, 6.810207e-002f, 3.108851e-001f, -7.993618e-001f,
  9.446707e-002f, -2.528688e-001f, 1.589475e-001f, 3.087074e-001f, -7.961025e-001f, 3.639948e-002f, -1.019761e-001f, 6.882185e-002f, 3.176358e-001f, -8.094649e-001f,
  9.455953e-002f, -2.532001e-001f, 1.592430e-001f, 3.096207e-001f, -7.974694e-001f, 3.788809e-002f, -1.053489e-001f, 7.030571e-002f, 3.196652e-001f, -8.125022e-001f,
  9.477261e-002f, -2.538297e-001f, 1.597001e-001f, 3.112709e-001f, -7.999391e-001f, 3.919613e-002f, -1.085436e-001f, 7.199506e-002f, 3.206657e-001f, -8.139994e-001f,
  9.501946e-002f, -2.545387e-001f, 1.601960e-001f, 3.131141e-001f, -8.026977e-001f, 4.035751e-002f, -1.115977e-001f, 7.385792e-002f, 3.208170e-001f, -8.142258e-001f,
  9.498930e-002f, -2.545913e-001f, 1.603677e-001f, 3.133606e-001f, -8.030666e-001f, 4.155041e-002f, -1.147358e-001f, 7.577333e-002f, 3.209683e-001f, -8.144523e-001f,
  9.523876e-002f, -2.553055e-001f, 1.608649e-001f, 3.152154e-001f, -8.058425e-001f, 4.293930e-002f, -1.181731e-001f, 7.764235e-002f, 3.218778e-001f, -8.158135e-001f,
  9.510666e-002f, -2.551441e-001f, 1.609632e-001f, 3.149675e-001f, -8.054715e-001f, 4.413329e-002f, -1.214037e-001f, 7.970883e-002f, 3.217260e-001f, -8.155863e-001f,
  9.487759e-002f, -2.547901e-001f, 1.610101e-001f, 3.142867e-001f, -8.044526e-001f, 4.556045e-002f, -1.249873e-001f, 8.171557e-002f, 3.224855e-001f, -8.167229e-001f,
  9.485517e-002f, -2.549212e-001f, 1.612912e-001f, 3.147817e-001f, -8.051934e-001f, 4.681901e-002f, -1.283958e-001f, 8.389924e-002f, 3.223144e-001f, -8.164670e-001f,
  9.527435e-002f, -2.560081e-001f, 1.619378e-001f, 3.175148e-001f, -8.092838e-001f, 4.719852e-002f, -1.306655e-001f, 8.662921e-002f, 3.180562e-001f, -8.100941e-001f,
  9.527435e-002f, -2.560081e-001f, 1.619378e-001f, 3.175148e-001f, -8.092838e-001f, 3.933786e-002f, -1.089038e-001f, 7.220158e-002f, 3.180562e-001f, -8.100941e-001f,
  9.527435e-002f, -2.560081e-001f, 1.619378e-001f, 3.175148e-001f, -8.092838e-001f, 3.802812e-002f, -1.052779e-001f, 6.979765e-002f, 3.180562e-001f, -8.100941e-001f,
  9.527435e-002f, -2.560081e-001f, 1.619378e-001f, 3.175148e-001f, -8.092838e-001f, 3.676199e-002f, -1.017727e-001f, 6.747377e-002f, 3.180562e-001f, -8.100941e-001f,
  9.527435e-002f, -2.560081e-001f, 1.619378e-001f, 3.175148e-001f, -8.092838e-001f, 3.553801e-002f, -9.838423e-002f, 6.522725e-002f, 3.180562e-001f, -8.100941e-001f,
  9.527435e-002f, -2.560081e-001f, 1.619378e-001f, 3.175148e-001f, -8.092838e-001f, 3.435478e-002f, -9.510856e-002f, 6.305553e-002f, 3.180562e-001f, -8.100941e-001f,
  9.527435e-002f, -2.560081e-001f, 1.619378e-001f, 3.175148e-001f, -8.092838e-001f, 3.321095e-002f, -9.194195e-002f, 6.095612e-002f, 3.180562e-001f, -8.100941e-001f,
  9.527435e-002f, -2.560081e-001f, 1.619378e-001f, 3.175148e-001f, -8.092838e-001f, 3.210520e-002f, -8.888078e-002f, 5.892660e-002f, 3.180562e-001f, -8.100941e-001f,
  9.527435e-002f, -2.560081e-001f, 1.619378e-001f, 3.175148e-001f, -8.092838e-001f, 3.103627e-002f, -8.592152e-002f, 5.696466e-002f, 3.180562e-001f, -8.100941e-001f,
  9.527435e-002f, -2.560081e-001f, 1.619378e-001f, 3.175148e-001f, -8.092838e-001f, 3.000293e-002f, -8.306079e-002f, 5.506804e-002f, 3.180562e-001f, -8.100941e-001f,
  9.527435e-002f, -2.560081e-001f, 1.619378e-001f, 3.175148e-001f, -8.092838e-001f, 2.900399e-002f, -8.029531e-002f, 5.323457e-002f, 3.180562e-001f, -8.100941e-001f,
  9.527435e-002f, -2.560081e-001f, 1.619378e-001f, 3.175148e-001f, -8.092838e-001f, 2.803831e-002f, -7.762191e-002f, 5.146215e-002f, 3.180562e-001f, -8.100941e-001f,
  -1.918417e-001f, 2.253979e-001f, -3.049341e-002f, 7.413033e-002f, -5.531945e-001f, 0.000000e+000f, -5.645715e-002f, 6.211849e-002f, 0.000000e+000f, -4.760047e-001f,
  -1.918417e-001f, 2.553252e-001f, -6.098681e-002f, 1.482607e-001f, -6.311945e-001f, 0.000000e+000f, -5.645715e-002f, 6.211849e-002f, 0.000000e+000f, -4.760047e-001f,
  -1.918417e-001f, 2.852525e-001f, -9.148022e-002f, 2.223910e-001f, -7.091945e-001f, 0.000000e+000f, -5.645715e-002f, 6.211849e-002f, 0.000000e+000f, -4.760047e-001f,
  -1.918417e-001f, 3.151798e-001f, -1.219736e-001f, 2.965213e-001f, -7.871945e-001f, 0.000000e+000f, -5.645715e-002f, 6.211849e-002f, 0.000000e+000f, -4.760047e-001f,
  -1.918417e-001f, 3.451071e-001f, -1.524670e-001f, 3.706517e-001f, -8.651945e-001f, 0.000000e+000f, -5.645715e-002f, 6.211849e-002f, 0.000000e+000f, -4.760047e-001f,
  0.000000e+000f, -1.260948e-001f, 1.985501e-001f, 0.000000e+000f, -3.340893e-001f,
  9.841059e-002f, -2.555247e-001f, 1.583529e-001f, 1.825582e-001f, -6.073070e-001f, -8.052803e-003f, -5.335455e-002f, 1.039787e-001f, 1.417200e-001f, -5.461883e-001f,
  9.841059e-002f, -2.555247e-001f, 1.583529e-001f, 1.825582e-001f, -6.073070e-001f, 1.743118e-002f, -8.170204e-002f, 8.543004e-002f, 2.384763e-001f, -6.909943e-001f,
  1.080843e-001f, -2.799454e-001f, 1.728209e-001f, 2.315340e-001f, -6.806044e-001f, 2.563370e-002f, -9.199645e-002f, 8.130243e-002f, 2.665807e-001f, -7.330555e-001f,
  1.136760e-001f, -2.940561e-001f, 1.811758e-001f, 2.598299e-001f, -7.229522e-001f, 3.124919e-002f, -9.967019e-002f, 7.946255e-002f, 2.841953e-001f, -7.594177e-001f,
  1.167157e-001f, -3.017529e-001f, 1.857586e-001f, 2.752796e-001f, -7.460743e-001f, 3.526147e-002f, -1.057243e-001f, 7.904733e-002f, 2.952980e-001f, -7.760340e-001f,
  1.192681e-001f, -3.081907e-001f, 1.895673e-001f, 2.881874e-001f, -7.653923e-001f, 3.805743e-002f, -1.105384e-001f, 7.969538e-002f, 3.014891e-001f, -7.852997e-001f,
  1.207885e-001f, -3.120506e-001f, 1.918755e-001f, 2.959413e-001f, -7.769968e-001f, 4.098802e-002f, -1.155842e-001f, 8.037456e-002f, 3.079785e-001f, -7.950117e-001f,
  1.216576e-001f, -3.142977e-001f, 1.932587e-001f, 3.004790e-001f, -7.837879e-001f, 4.302373e-002f, -1.197060e-001f, 8.181735e-002f, 3.108851e-001f, -7.993618e-001f,
  1.219812e-001f, -3.152169e-001f, 1.939038e-001f, 3.023830e-001f, -7.866374e-001f, 4.432619e-002f, -1.230593e-001f, 8.386821e-002f, 3.108851e-001f, -7.993618e-001f,
  1.232476e-001f, -3.183803e-001f, 1.957450e-001f, 3.087074e-001f, -7.961025e-001f, 4.748903e-002f, -1.286025e-001f, 8.475463e-002f, 3.176358e-001f, -8.094649e-001f,
  1.233683e-001f, -3.188013e-001f, 1.961089e-001f, 3.096207e-001f, -7.974694e-001f, 4.943116e-002f, -1.328211e-001f, 8.658202e-002f, 3.196652e-001f, -8.125022e-001f,
  1.236463e-001f, -3.195966e-001f, 1.966719e-001f, 3.112709e-001f, -7.999391e-001f, 5.113771e-002f, -1.368295e-001f, 8.866246e-002f, 3.206657e-001f, -8.139994e-001f,
  1.239683e-001f, -3.204916e-001f, 1.972826e-001f, 3.131141e-001f, -8.026977e-001f, 5.265292e-002f, -1.406723e-001f, 9.095659e-002f, 3.208170e-001f, -8.142258e-001f,
  1.239290e-001f, -3.205639e-001f, 1.974940e-001f, 3.133606e-001f, -8.030666e-001f, 5.420925e-002f, -1.446210e-001f, 9.331543e-002f, 3.209683e-001f, -8.144523e-001f,
  1.242544e-001f, -3.214652e-001f, 1.981064e-001f, 3.152154e-001f, -8.058425e-001f, 5.602128e-002f, -1.489360e-001f, 9.561714e-002f, 3.218778e-001f, -8.158135e-001f,
  1.240821e-001f, -3.212707e-001f, 1.982274e-001f, 3.149675e-001f, -8.054715e-001f, 5.757904e-002f, -1.530051e-001f, 9.816203e-002f, 3.217260e-001f, -8.155863e-001f,
  1.237832e-001f, -3.208368e-001f, 1.982852e-001f, 3.142867e-001f, -8.044526e-001f, 5.944101e-002f, -1.575064e-001f, 1.006333e-001f, 3.224855e-001f, -8.167229e-001f,
  1.237540e-001f, -3.210106e-001f, 1.986314e-001f, 3.147817e-001f, -8.051934e-001f, 6.108300e-002f, -1.617998e-001f, 1.033226e-001f, 3.223144e-001f, -8.164670e-001f,
  1.243008e-001f, -3.223775e-001f, 1.994277e-001f, 3.175148e-001f, -8.092838e-001f, 6.157813e-002f, -1.647145e-001f, 1.066845e-001f, 3.180562e-001f, -8.100941e-001f,
  1.243008e-001f, -3.223775e-001f, 1.994277e-001f, 3.175148e-001f, -8.092838e-001f, 5.132262e-002f, -1.372822e-001f, 8.891680e-002f, 3.180562e-001f, -8.100941e-001f,
  1.243008e-001f, -3.223775e-001f, 1.994277e-001f, 3.175148e-001f, -8.092838e-001f, 4.961385e-002f, -1.327114e-001f, 8.595634e-002f, 3.180562e-001f, -8.100941e-001f,
  1.243008e-001f, -3.223775e-001f, 1.994277e-001f, 3.175148e-001f, -8.092838e-001f, 4.796198e-002f, -1.282929e-001f, 8.309445e-002f, 3.180562e-001f, -8.100941e-001f,
  1.243008e-001f, -3.223775e-001f, 1.994277e-001f, 3.175148e-001f, -8.092838e-001f, 4.636510e-002f, -1.240214e-001f, 8.032785e-002f, 3.180562e-001f, -8.100941e-001f,
  1.243008e-001f, -3.223775e-001f, 1.994277e-001f, 3.175148e-001f, -8.092838e-001f, 4.482139e-002f, -1.198921e-001f, 7.765336e-002f, 3.180562e-001f, -8.100941e-001f,
  1.243008e-001f, -3.223775e-001f, 1.994277e-001f, 3.175148e-001f, -8.092838e-001f, 4.332908e-002f, -1.159004e-001f, 7.506792e-002f, 3.180562e-001f, -8.100941e-001f,
  1.243008e-001f, -3.223775e-001f, 1.994277e-001f, 3.175148e-001f, -8.092838e-001f, 4.188645e-002f, -1.120415e-001f, 7.256856e-002f, 3.180562e-001f, -8.100941e-001f,
  1.243008e-001f, -3.223775e-001f, 1.994277e-001f, 3.175148e-001f, -8.092838e-001f, 4.049186e-002f, -1.083111e-001f, 7.015242e-002f, 3.180562e-001f, -8.100941e-001f,
  1.243008e-001f, -3.223775e-001f, 1.994277e-001f, 3.175148e-001f, -8.092838e-001f, 3.914369e-002f, -1.047049e-001f, 6.781671e-002f, 3.180562e-001f, -8.100941e-001f,
  1.243008e-001f, -3.223775e-001f, 1.994277e-001f, 3.175148e-001f, -8.092838e-001f, 3.784042e-002f, -1.012188e-001f, 6.555878e-002f, 3.180562e-001f, -8.100941e-001f,
  1.243008e-001f, -3.223775e-001f, 1.994277e-001f, 3.175148e-001f, -8.092838e-001f, 3.658053e-002f, -9.784879e-002f, 6.337602e-002f, 3.180562e-001f, -8.100941e-001f,
  -2.152499e-001f, 2.529005e-001f, -3.421416e-002f, 7.413033e-002f, -5.531945e-001f, 0.000000e+000f, -6.334596e-002f, 6.969809e-002f, 0.000000e+000f, -4.760047e-001f,
  -2.152499e-001f, 2.864795e-001f, -6.842833e-002f, 1.482607e-001f, -6.311945e-001f, 0.000000e+000f, -6.334596e-002f, 6.969809e-002f, 0.000000e+000f, -4.760047e-001f,
  -2.152499e-001f, 3.200585e-001f, -1.026425e-001f, 2.223910e-001f, -7.091945e-001f, 0.000000e+000f, -6.334596e-002f, 6.969809e-002f, 0.000000e+000f, -4.760047e-001f,
  -2.152499e-001f, 3.536375e-001f, -1.368567e-001f, 2.965213e-001f, -7.871945e-001f, 0.000000e+000f, -6.334596e-002f, 6.969809e-002f, 0.000000e+000f, -4.760047e-001f,
  -2.152499e-001f, 3.872165e-001f, -1.710708e-001f, 3.706517e-001f, -8.651945e-001f, 0.000000e+000f, -6.334596e-002f, 6.969809e-002f, 0.000000e+000f, -4.760047e-001f,
  0.000000e+000f, 0.000000e+000f, 2.450000e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -1.912101e-001f, 1.953988e-001f, 0.000000e+000f, -2.732177e-001f, 0.000000e+000f, 1.564646e-002f, 1.283040e-001f, 0.000000e+000f, -2.120990e-001f,
  0.000000e+000f, -1.912101e-001f, 1.953988e-001f, 0.000000e+000f, -2.732177e-001f, 0.000000e+000f, -3.386848e-002f, 1.054160e-001f, 0.000000e+000f, -3.569050e-001f,
  0.000000e+000f, -2.100060e-001f, 2.132515e-001f, 0.000000e+000f, -3.465151e-001f, 0.000000e+000f, -4.980583e-002f, 1.003227e-001f, 0.000000e+000f, -3.989662e-001f,
  0.000000e+000f, -2.208705e-001f, 2.235610e-001f, 0.000000e+000f, -3.888629e-001f, 0.000000e+000f, -6.071663e-002f, 9.805244e-002f, 0.000000e+000f, -4.253284e-001f,
  0.000000e+000f, -2.267766e-001f, 2.292159e-001f, 0.000000e+000f, -4.119850e-001f, 0.000000e+000f, -6.851242e-002f, 9.754007e-002f, 0.000000e+000f, -4.419447e-001f,
  0.000000e+000f, -2.317359e-001f, 2.339156e-001f, 0.000000e+000f, -4.313030e-001f, 0.000000e+000f, -7.394492e-002f, 9.833973e-002f, 0.000000e+000f, -4.512104e-001f,
  0.000000e+000f, -2.346899e-001f, 2.367638e-001f, 0.000000e+000f, -4.429074e-001f, 0.000000e+000f, -7.963900e-002f, 9.917780e-002f, 0.000000e+000f, -4.609224e-001f,
  0.000000e+000f, -2.363787e-001f, 2.384706e-001f, 0.000000e+000f, -4.496986e-001f, 0.000000e+000f, -8.359436e-002f, 1.009581e-001f, 0.000000e+000f, -4.652725e-001f,
  0.000000e+000f, -2.370074e-001f, 2.392667e-001f, 0.000000e+000f, -4.525481e-001f, 0.000000e+000f, -8.612501e-002f, 1.034888e-001f, 0.000000e+000f, -4.652725e-001f,
  0.000000e+000f, -2.394680e-001f, 2.415386e-001f, 0.000000e+000f, -4.620132e-001f, 0.000000e+000f, -9.227036e-002f, 1.045826e-001f, 0.000000e+000f, -4.753756e-001f,
  0.000000e+000f, -2.397024e-001f, 2.419877e-001f, 0.000000e+000f, -4.633801e-001f, 0.000000e+000f, -9.604389e-002f, 1.068375e-001f, 0.000000e+000f, -4.784128e-001f,
  0.000000e+000f, -2.402425e-001f, 2.426824e-001f, 0.000000e+000f, -4.658498e-001f, 0.000000e+000f, -9.935968e-002f, 1.094046e-001f, 0.000000e+000f, -4.799101e-001f,
  0.000000e+000f, -2.408683e-001f, 2.434359e-001f, 0.000000e+000f, -4.686084e-001f, 0.000000e+000f, -1.023037e-001f, 1.122355e-001f, 0.000000e+000f, -4.801365e-001f,
  0.000000e+000f, -2.407918e-001f, 2.436968e-001f, 0.000000e+000f, -4.689773e-001f, 0.000000e+000f, -1.053276e-001f, 1.151461e-001f, 0.000000e+000f, -4.803630e-001f,
  0.000000e+000f, -2.414242e-001f, 2.444524e-001f, 0.000000e+000f, -4.717532e-001f, 0.000000e+000f, -1.088484e-001f, 1.179863e-001f, 0.000000e+000f, -4.817241e-001f,
  0.000000e+000f, -2.410893e-001f, 2.446018e-001f, 0.000000e+000f, -4.713822e-001f, 0.000000e+000f, -1.118751e-001f, 1.211266e-001f, 0.000000e+000f, -4.814970e-001f,
  0.000000e+000f, -2.405086e-001f, 2.446730e-001f, 0.000000e+000f, -4.703633e-001f, 0.000000e+000f, -1.154928e-001f, 1.241760e-001f, 0.000000e+000f, -4.826336e-001f,
  0.000000e+000f, -2.404518e-001f, 2.451002e-001f, 0.000000e+000f, -4.711041e-001f, 0.000000e+000f, -1.186832e-001f, 1.274944e-001f, 0.000000e+000f, -4.823777e-001f,
  0.000000e+000f, -2.415144e-001f, 2.460828e-001f, 0.000000e+000f, -4.751945e-001f, 0.000000e+000f, -1.196452e-001f, 1.316429e-001f, 0.000000e+000f, -4.760047e-001f,
  0.000000e+000f, -2.415144e-001f, 2.460828e-001f, 0.000000e+000f, -4.751945e-001f, 0.000000e+000f, -9.971897e-002f, 1.097185e-001f, 0.000000e+000f, -4.760047e-001f,
  0.000000e+000f, -2.415144e-001f, 2.460828e-001f, 0.000000e+000f, -4.751945e-001f, 0.000000e+000f, -9.639886e-002f, 1.060654e-001f, 0.000000e+000f, -4.760047e-001f,
  0.000000e+000f, -2.415144e-001f, 2.460828e-001f, 0.000000e+000f, -4.751945e-001f, 0.000000e+000f, -9.318929e-002f, 1.025340e-001f, 0.000000e+000f, -4.760047e-001f,
  0.000000e+000f, -2.415144e-001f, 2.460828e-001f, 0.000000e+000f, -4.751945e-001f, 0.000000e+000f, -9.008658e-002f, 9.912017e-002f, 0.000000e+000f, -4.760047e-001f,
  0.000000e+000f, -2.415144e-001f, 2.460828e-001f, 0.000000e+000f, -4.751945e-001f, 0.000000e+000f, -8.708718e-002f, 9.582000e-002f, 0.000000e+000f, -4.760047e-001f,
  0.000000e+000f, -2.415144e-001f, 2.460828e-001f, 0.000000e+000f, -4.751945e-001f, 0.000000e+000f, -8.418764e-002f, 9.262970e-002f, 0.000000e+000f, -4.760047e-001f,
  0.000000e+000f, -2.415144e-001f, 2.460828e-001f, 0.000000e+000f, -4.751945e-001f, 0.000000e+000f, -8.138464e-002f, 8.954563e-002f, 0.000000e+000f, -4.760047e-001f,
  0.000000e+000f, -2.415144e-001f, 2.460828e-001f, 0.000000e+000f, -4.751945e-001f, 0.000000e+000f, -7.867497e-002f, 8.656424e-002f, 0.000000e+000f, -4.760047e-001f,
  0.000000e+000f, -2.415144e-001f, 2.460828e-001f, 0.000000e+000f, -4.751945e-001f, 0.000000e+000f, -7.605551e-002f, 8.368211e-002f, 0.000000e+000f, -4.760047e-001f,
  0.000000e+000f, -2.415144e-001f, 2.460828e-001f, 0.000000e+000f, -4.751945e-001f, 0.000000e+000f, -7.352327e-002f, 8.089594e-002f, 0.000000e+000f, -4.760047e-001f,
  0.000000e+000f, -2.415144e-001f, 2.460828e-001f, 0.000000e+000f, -4.751945e-001f, 0.000000e+000f, -7.107534e-002f, 7.820254e-002f, 0.000000e+000f, -4.760047e-001f,
  -2.415144e-001f, 2.837591e-001f, -3.838892e-002f, 7.413033e-002f, -5.531945e-001f, 0.000000e+000f, -7.107534e-002f, 7.820254e-002f, 0.000000e+000f, -4.760047e-001f,
  -2.415144e-001f, 3.214353e-001f, -7.677785e-002f, 1.482607e-001f, -6.311945e-001f, 0.000000e+000f, -7.107534e-002f, 7.820254e-002f, 0.000000e+000f, -4.760047e-001f,
  -2.415144e-001f, 3.591116e-001f, -1.151668e-001f, 2.223910e-001f, -7.091945e-001f, 0.000000e+000f, -7.107534e-002f, 7.820254e-002f, 0.000000e+000f, -4.760047e-001f,
  -2.415144e-001f, 3.967878e-001f, -1.535557e-001f, 2.965213e-001f, -7.871945e-001f, 0.000000e+000f, -7.107534e-002f, 7.820254e-002f, 0.000000e+000f, -4.760047e-001f,
  -2.415144e-001f, 4.344641e-001f, -1.919446e-001f, 3.706517e-001f, -8.651945e-001f, 0.000000e+000f, -7.107534e-002f, 7.820254e-002f, 0.000000e+000f, -4.760047e-001f,
  0.000000e+000f, -1.498409e-001f, 2.144168e-001f, 0.000000e+000f, -3.340893e-001f,
  1.169432e-001f, -2.868464e-001f, 1.710072e-001f, 1.825582e-001f, -6.073070e-001f, -9.569299e-003f, -6.477683e-002f, 1.122879e-001f, 1.417200e-001f, -5.461883e-001f,
  1.169432e-001f, -2.868464e-001f, 1.710072e-001f, 1.825582e-001f, -6.073070e-001f, 2.071380e-002f, -9.411262e-002f, 9.225695e-002f, 2.384763e-001f, -6.909943e-001f,
  1.284387e-001f, -3.142147e-001f, 1.866314e-001f, 2.315340e-001f, -6.806044e-001f, 3.046102e-002f, -1.049455e-001f, 8.779950e-002f, 2.665807e-001f, -7.330555e-001f,
  1.350834e-001f, -3.300281e-001f, 1.956539e-001f, 2.598299e-001f, -7.229522e-001f, 3.713401e-002f, -1.131058e-001f, 8.581259e-002f, 2.841953e-001f, -7.594177e-001f,
  1.386955e-001f, -3.386556e-001f, 2.006030e-001f, 2.752796e-001f, -7.460743e-001f, 4.190188e-002f, -1.196151e-001f, 8.536419e-002f, 2.952980e-001f, -7.760340e-001f,
  1.417286e-001f, -3.458701e-001f, 2.047160e-001f, 2.881874e-001f, -7.653923e-001f, 4.522437e-002f, -1.248585e-001f, 8.606402e-002f, 3.014891e-001f, -7.852997e-001f,
  1.435352e-001f, -3.501973e-001f, 2.072087e-001f, 2.959413e-001f, -7.769968e-001f, 4.870684e-002f, -1.303544e-001f, 8.679748e-002f, 3.079785e-001f, -7.950117e-001f,
  1.445681e-001f, -3.527192e-001f, 2.087024e-001f, 3.004790e-001f, -7.837879e-001f, 5.112592e-002f, -1.349048e-001f, 8.835557e-002f, 3.108851e-001f, -7.993618e-001f,
  1.449526e-001f, -3.537562e-001f, 2.093991e-001f, 3.023830e-001f, -7.866374e-001f, 5.267366e-002f, -1.386673e-001f, 9.057032e-002f, 3.108851e-001f, -7.993618e-001f,
  1.464575e-001f, -3.572992e-001f, 2.113875e-001f, 3.087074e-001f, -7.961025e-001f, 5.643212e-002f, -1.447145e-001f, 9.152757e-002f, 3.176358e-001f, -8.094649e-001f,
  1.466009e-001f, -3.577790e-001f, 2.117804e-001f, 3.096207e-001f, -7.974694e-001f, 5.874000e-002f, -1.493961e-001f, 9.350099e-002f, 3.196652e-001f, -8.125022e-001f,
  1.469312e-001f, -3.586766e-001f, 2.123884e-001f, 3.112709e-001f, -7.999391e-001f, 6.076792e-002f, -1.538680e-001f, 9.574769e-002f, 3.206657e-001f, -8.139994e-001f,
  1.473139e-001f, -3.596851e-001f, 2.130479e-001f, 3.131141e-001f, -8.026977e-001f, 6.256847e-002f, -1.581759e-001f, 9.822515e-002f, 3.208170e-001f, -8.142258e-001f,
  1.472672e-001f, -3.597777e-001f, 2.132763e-001f, 3.133606e-001f, -8.030666e-001f, 6.441789e-002f, -1.626025e-001f, 1.007725e-001f, 3.209683e-001f, -8.144523e-001f,
  1.476539e-001f, -3.607933e-001f, 2.139375e-001f, 3.152154e-001f, -8.058425e-001f, 6.657116e-002f, -1.674208e-001f, 1.032581e-001f, 3.218778e-001f, -8.158135e-001f,
  1.474491e-001f, -3.605915e-001f, 2.140682e-001f, 3.149675e-001f, -8.054715e-001f, 6.842228e-002f, -1.719902e-001f, 1.060064e-001f, 3.217260e-001f, -8.155863e-001f,
  1.470940e-001f, -3.601269e-001f, 2.141306e-001f, 3.142867e-001f, -8.044526e-001f, 7.063488e-002f, -1.770214e-001f, 1.086752e-001f, 3.224855e-001f, -8.167229e-001f,
  1.470592e-001f, -3.603385e-001f, 2.145045e-001f, 3.147817e-001f, -8.051934e-001f, 7.258609e-002f, -1.818430e-001f, 1.115793e-001f, 3.223144e-001f, -8.164670e-001f,
  1.477091e-001f, -3.618694e-001f, 2.153644e-001f, 3.175148e-001f, -8.092838e-001f, 7.317447e-002f, -1.852221e-001f, 1.152099e-001f, 3.180562e-001f, -8.100941e-001f,
  1.477091e-001f, -3.618694e-001f, 2.153644e-001f, 3.175148e-001f, -8.092838e-001f, 6.098766e-002f, -1.543744e-001f, 9.602235e-002f, 3.180562e-001f, -8.100941e-001f,
  1.477091e-001f, -3.618694e-001f, 2.153644e-001f, 3.175148e-001f, -8.092838e-001f, 5.895709e-002f, -1.492345e-001f, 9.282532e-002f, 3.180562e-001f, -8.100941e-001f,
  1.477091e-001f, -3.618694e-001f, 2.153644e-001f, 3.175148e-001f, -8.092838e-001f, 5.699414e-002f, -1.442658e-001f, 8.973473e-002f, 3.180562e-001f, -8.100941e-001f,
  1.477091e-001f, -3.618694e-001f, 2.153644e-001f, 3.175148e-001f, -8.092838e-001f, 5.509654e-002f, -1.394625e-001f, 8.674704e-002f, 3.180562e-001f, -8.100941e-001f,
  1.477091e-001f, -3.618694e-001f, 2.153644e-001f, 3.175148e-001f, -8.092838e-001f, 5.326212e-002f, -1.348192e-001f, 8.385883e-002f, 3.180562e-001f, -8.100941e-001f,
  1.477091e-001f, -3.618694e-001f, 2.153644e-001f, 3.175148e-001f, -8.092838e-001f, 5.148877e-002f, -1.303304e-001f, 8.106678e-002f, 3.180562e-001f, -8.100941e-001f,
  1.477091e-001f, -3.618694e-001f, 2.153644e-001f, 3.175148e-001f, -8.092838e-001f, 4.977447e-002f, -1.259911e-001f, 7.836769e-002f, 3.180562e-001f, -8.100941e-001f,
  1.477091e-001f, -3.618694e-001f, 2.153644e-001f, 3.175148e-001f, -8.092838e-001f, 4.811725e-002f, -1.217963e-001f, 7.575846e-002f, 3.180562e-001f, -8.100941e-001f,
  1.477091e-001f, -3.618694e-001f, 2.153644e-001f, 3.175148e-001f, -8.092838e-001f, 4.651520e-002f, -1.177411e-001f, 7.323611e-002f, 3.180562e-001f, -8.100941e-001f,
  1.477091e-001f, -3.618694e-001f, 2.153644e-001f, 3.175148e-001f, -8.092838e-001f, 4.496649e-002f, -1.138210e-001f, 7.079774e-002f, 3.180562e-001f, -8.100941e-001f,
  1.477091e-001f, -3.618694e-001f, 2.153644e-001f, 3.175148e-001f, -8.092838e-001f, 4.346935e-002f, -1.100313e-001f, 6.844055e-002f, 3.180562e-001f, -8.100941e-001f,
  -1.521817e-001f, 1.788007e-001f, -2.418941e-002f, 7.413033e-002f, -5.531945e-001f, 0.000000e+000f, -4.478560e-002f, 4.927655e-002f, 0.000000e+000f, -4.760047e-001f,
  -1.521817e-001f, 2.025410e-001f, -4.837883e-002f, 1.482607e-001f, -6.311945e-001f, 0.000000e+000f, -4.478560e-002f, 4.927655e-002f, 0.000000e+000f, -4.760047e-001f,
  -1.521817e-001f, 2.262814e-001f, -7.256824e-002f, 2.223910e-001f, -7.091945e-001f, 0.000000e+000f, -4.478560e-002f, 4.927655e-002f, 0.000000e+000f, -4.760047e-001f,
  -1.521817e-001f, 2.500217e-001f, -9.675765e-002f, 2.965213e-001f, -7.871945e-001f, 0.000000e+000f, -4.478560e-002f, 4.927655e-002f, 0.000000e+000f, -4.760047e-001f,
  -1.521817e-001f, 2.737621e-001f, -1.209471e-001f, 3.706517e-001f, -8.651945e-001f, 0.000000e+000f, -4.478560e-002f, 4.927655e-002f, 0.000000e+000f, -4.760047e-001f,
  0.000000e+000f, -1.366752e-001f, 1.879697e-001f, 0.000000e+000f, -3.340893e-001f,
  1.066681e-001f, -2.557056e-001f, 1.499145e-001f, 1.825582e-001f, -6.073070e-001f, -8.728502e-003f, -5.957112e-002f, 9.843784e-002f, 1.417200e-001f, -5.461883e-001f,
  1.066681e-001f, -2.557056e-001f, 1.499145e-001f, 1.825582e-001f, -6.073070e-001f, 1.889381e-002f, -8.479185e-002f, 8.087759e-002f, 2.384763e-001f, -6.909943e-001f,
  1.171536e-001f, -2.800856e-001f, 1.636115e-001f, 2.315340e-001f, -6.806044e-001f, 2.778459e-002f, -9.417805e-002f, 7.696994e-002f, 2.665807e-001f, -7.330555e-001f,
  1.232144e-001f, -2.941723e-001f, 1.715212e-001f, 2.598299e-001f, -7.229522e-001f, 3.387126e-002f, -1.012826e-001f, 7.522811e-002f, 2.841953e-001f, -7.594177e-001f,
  1.265092e-001f, -3.018582e-001f, 1.758598e-001f, 2.752796e-001f, -7.460743e-001f, 3.822021e-002f, -1.069778e-001f, 7.483501e-002f, 2.952980e-001f, -7.760340e-001f,
  1.292757e-001f, -3.082849e-001f, 1.794655e-001f, 2.881874e-001f, -7.653923e-001f, 4.125078e-002f, -1.115919e-001f, 7.544853e-002f, 3.014891e-001f, -7.852997e-001f,
  1.309237e-001f, -3.121402e-001f, 1.816507e-001f, 2.959413e-001f, -7.769968e-001f, 4.442727e-002f, -1.164280e-001f, 7.609151e-002f, 3.079785e-001f, -7.950117e-001f,
  1.318658e-001f, -3.143880e-001f, 1.829602e-001f, 3.004790e-001f, -7.837879e-001f, 4.663380e-002f, -1.204559e-001f, 7.745743e-002f, 3.108851e-001f, -7.993618e-001f,
  1.322165e-001f, -3.153144e-001f, 1.835710e-001f, 3.023830e-001f, -7.866374e-001f, 4.804554e-002f, -1.238092e-001f, 7.939900e-002f, 3.108851e-001f, -7.993618e-001f,
  1.335892e-001f, -3.184697e-001f, 1.853140e-001f, 3.087074e-001f, -7.961025e-001f, 5.147377e-002f, -1.291342e-001f, 8.023818e-002f, 3.176358e-001f, -8.094649e-001f,
  1.337199e-001f, -3.189000e-001f, 1.856586e-001f, 3.096207e-001f, -7.974694e-001f, 5.357886e-002f, -1.332873e-001f, 8.196819e-002f, 3.196652e-001f, -8.125022e-001f,
  1.340213e-001f, -3.197020e-001f, 1.861916e-001f, 3.112709e-001f, -7.999391e-001f, 5.542861e-002f, -1.372633e-001f, 8.393777e-002f, 3.206657e-001f, -8.139994e-001f,
  1.343703e-001f, -3.206024e-001f, 1.867697e-001f, 3.131141e-001f, -8.026977e-001f, 5.707095e-002f, -1.411012e-001f, 8.610965e-002f, 3.208170e-001f, -8.142258e-001f,
  1.343277e-001f, -3.206893e-001f, 1.869699e-001f, 3.133606e-001f, -8.030666e-001f, 5.875788e-002f, -1.450450e-001f, 8.834279e-002f, 3.209683e-001f, -8.144523e-001f,
  1.346804e-001f, -3.215960e-001f, 1.875496e-001f, 3.152154e-001f, -8.058425e-001f, 6.072195e-002f, -1.493306e-001f, 9.052184e-002f, 3.218778e-001f, -8.158135e-001f,
  1.344936e-001f, -3.214224e-001f, 1.876642e-001f, 3.149675e-001f, -8.054715e-001f, 6.241042e-002f, -1.534046e-001f, 9.293112e-002f, 3.217260e-001f, -8.155863e-001f,
  1.341697e-001f, -3.210167e-001f, 1.877188e-001f, 3.142867e-001f, -8.044526e-001f, 6.442862e-002f, -1.578814e-001f, 9.527074e-002f, 3.224855e-001f, -8.167229e-001f,
  1.341380e-001f, -3.212114e-001f, 1.880466e-001f, 3.147817e-001f, -8.051934e-001f, 6.620839e-002f, -1.621803e-001f, 9.781665e-002f, 3.223144e-001f, -8.164670e-001f,
  1.347308e-001f, -3.225748e-001f, 1.888005e-001f, 3.175148e-001f, -8.092838e-001f, 6.674507e-002f, -1.652327e-001f, 1.009995e-001f, 3.180562e-001f, -8.100941e-001f,
  1.347308e-001f, -3.225748e-001f, 1.888005e-001f, 3.175148e-001f, -8.092838e-001f, 5.562904e-002f, -1.377140e-001f, 8.417855e-002f, 3.180562e-001f, -8.100941e-001f,
  1.347308e-001f, -3.225748e-001f, 1.888005e-001f, 3.175148e-001f, -8.092838e-001f, 5.377689e-002f, -1.331289e-001f, 8.137586e-002f, 3.180562e-001f, -8.100941e-001f,
  1.347308e-001f, -3.225748e-001f, 1.888005e-001f, 3.175148e-001f, -8.092838e-001f, 5.198640e-002f, -1.286964e-001f, 7.866647e-002f, 3.180562e-001f, -8.100941e-001f,
  1.347308e-001f, -3.225748e-001f, 1.888005e-001f, 3.175148e-001f, -8.092838e-001f, 5.025553e-002f, -1.244115e-001f, 7.604730e-002f, 3.180562e-001f, -8.100941e-001f,
  1.347308e-001f, -3.225748e-001f, 1.888005e-001f, 3.175148e-001f, -8.092838e-001f, 4.858229e-002f, -1.202693e-001f, 7.351533e-002f, 3.180562e-001f, -8.100941e-001f,
  1.347308e-001f, -3.225748e-001f, 1.888005e-001f, 3.175148e-001f, -8.092838e-001f, 4.696476e-002f, -1.162650e-001f, 7.106766e-002f, 3.180562e-001f, -8.100941e-001f,
  1.347308e-001f, -3.225748e-001f, 1.888005e-001f, 3.175148e-001f, -8.092838e-001f, 4.540109e-002f, -1.123939e-001f, 6.870149e-002f, 3.180562e-001f, -8.100941e-001f,
  1.347308e-001f, -3.225748e-001f, 1.888005e-001f, 3.175148e-001f, -8.092838e-001f, 4.388947e-002f, -1.086518e-001f, 6.641410e-002f, 3.180562e-001f, -8.100941e-001f,
  1.347308e-001f, -3.225748e-001f, 1.888005e-001f, 3.175148e-001f, -8.092838e-001f, 4.242819e-002f, -1.050343e-001f, 6.420286e-002f, 3.180562e-001f, -8.100941e-001f,
  1.347308e-001f, -3.225748e-001f, 1.888005e-001f, 3.175148e-001f, -8.092838e-001f, 4.101556e-002f, -1.015372e-001f, 6.206525e-002f, 3.180562e-001f, -8.100941e-001f,
  1.347308e-001f, -3.225748e-001f, 1.888005e-001f, 3.175148e-001f, -8.092838e-001f, 3.964996e-002f, -9.815658e-002f, 5.999881e-002f, 3.180562e-001f, -8.100941e-001f,
  -1.356321e-001f, 1.593563e-001f, -2.155884e-002f, 7.413033e-002f, -5.531945e-001f, 0.000000e+000f, -3.991520e-002f, 4.391777e-002f, 0.000000e+000f, -4.760047e-001f,
  -1.356321e-001f, 1.805149e-001f, -4.311767e-002f, 1.482607e-001f, -6.311945e-001f, 0.000000e+000f, -3.991520e-002f, 4.391777e-002f, 0.000000e+000f, -4.760047e-001f,
  -1.356321e-001f, 2.016735e-001f, -6.467651e-002f, 2.223910e-001f, -7.091945e-001f, 0.000000e+000f, -3.991520e-002f, 4.391777e-002f, 0.000000e+000f, -4.760047e-001f,
  -1.356321e-001f, 2.228321e-001f, -8.623535e-002f, 2.965213e-001f, -7.871945e-001f, 0.000000e+000f, -3.991520e-002f, 4.391777e-002f, 0.000000e+000f, -4.760047e-001f,
  -1.356321e-001f, 2.439907e-001f, -1.077942e-001f, 3.706517e-001f, -8.651945e-001f, 0.000000e+000f, -3.991520e-002f, 4.391777e-002f, 0.000000e+000f, -4.760047e-001f,
  0.000000e+000f, -1.303842e-001f, 1.761004e-001f, 0.000000e+000f, -3.340893e-001f,
  1.017582e-001f, -2.414248e-001f, 1.404482e-001f, 1.825582e-001f, -6.073070e-001f, -1.181441e-003f, -6.323568e-002f, 8.756301e-002f, 1.683246e-001f, -5.860049e-001f,
  1.068110e-001f, -2.530420e-001f, 1.469215e-001f, 2.072814e-001f, -6.443079e-001f, 2.269521e-002f, -8.499976e-002f, 7.340253e-002f, 2.546086e-001f, -7.151380e-001f,
  1.155482e-001f, -2.731453e-001f, 1.581353e-001f, 2.500701e-001f, -7.083457e-001f, 3.002819e-002f, -9.318579e-002f, 7.108203e-002f, 2.773367e-001f, -7.491530e-001f,
  1.201529e-001f, -2.837545e-001f, 1.640644e-001f, 2.726565e-001f, -7.421487e-001f, 3.578765e-002f, -1.002153e-001f, 7.006990e-002f, 2.936810e-001f, -7.736141e-001f,
  1.233253e-001f, -2.910517e-001f, 1.681332e-001f, 2.881874e-001f, -7.653923e-001f, 3.935203e-002f, -1.054844e-001f, 7.068435e-002f, 3.014891e-001f, -7.852997e-001f,
  1.251317e-001f, -2.952374e-001f, 1.704911e-001f, 2.971074e-001f, -7.787420e-001f, 4.291792e-002f, -1.108784e-001f, 7.146478e-002f, 3.089925e-001f, -7.965292e-001f,
  1.258852e-001f, -2.970649e-001f, 1.715850e-001f, 3.010332e-001f, -7.846174e-001f, 4.491871e-002f, -1.149762e-001f, 7.334958e-002f, 3.105124e-001f, -7.988040e-001f,
  1.269403e-001f, -2.995322e-001f, 1.729926e-001f, 3.062998e-001f, -7.924993e-001f, 4.775477e-002f, -1.199292e-001f, 7.486572e-002f, 3.148152e-001f, -8.052436e-001f,
  1.275829e-001f, -3.010831e-001f, 1.739151e-001f, 3.096284e-001f, -7.974810e-001f, 5.078620e-002f, -1.251733e-001f, 7.641861e-002f, 3.195403e-001f, -8.123152e-001f,
  1.278523e-001f, -3.018316e-001f, 1.744346e-001f, 3.112709e-001f, -7.999391e-001f, 5.287727e-002f, -1.296405e-001f, 7.863755e-002f, 3.206657e-001f, -8.139994e-001f,
  1.281850e-001f, -3.027138e-001f, 1.750192e-001f, 3.131933e-001f, -8.028161e-001f, 5.474632e-002f, -1.339840e-001f, 8.109453e-002f, 3.207910e-001f, -8.141870e-001f,
  1.282688e-001f, -3.030890e-001f, 1.753730e-001f, 3.140615e-001f, -8.041156e-001f, 5.680588e-002f, -1.385976e-001f, 8.356872e-002f, 3.213627e-001f, -8.150426e-001f,
  1.284335e-001f, -3.036394e-001f, 1.758160e-001f, 3.152986e-001f, -8.059670e-001f, 5.888868e-002f, -1.433239e-001f, 8.615275e-002f, 3.217886e-001f, -8.156800e-001f,
  1.280427e-001f, -3.031295e-001f, 1.758402e-001f, 3.143623e-001f, -8.045658e-001f, 6.106580e-002f, -1.482354e-001f, 8.881492e-002f, 3.223060e-001f, -8.164544e-001f,
  1.279637e-001f, -3.032688e-001f, 1.761725e-001f, 3.147817e-001f, -8.051934e-001f, 6.316086e-002f, -1.531568e-001f, 9.164004e-002f, 3.223144e-001f, -8.164670e-001f,
  1.285292e-001f, -3.045555e-001f, 1.768787e-001f, 3.175148e-001f, -8.092838e-001f, 5.452570e-002f, -1.336373e-001f, 8.102866e-002f, 3.180562e-001f, -8.100941e-001f,
  1.285292e-001f, -3.045555e-001f, 1.768787e-001f, 3.175148e-001f, -8.092838e-001f, 5.235452e-002f, -1.283159e-001f, 7.780215e-002f, 3.180562e-001f, -8.100941e-001f,
  1.285292e-001f, -3.045555e-001f, 1.768787e-001f, 3.175148e-001f, -8.092838e-001f, 5.026980e-002f, -1.232064e-001f, 7.470412e-002f, 3.180562e-001f, -8.100941e-001f,
  1.285292e-001f, -3.045555e-001f, 1.768787e-001f, 3.175148e-001f, -8.092838e-001f, 4.826809e-002f, -1.183004e-001f, 7.172945e-002f, 3.180562e-001f, -8.100941e-001f,
  1.285292e-001f, -3.045555e-001f, 1.768787e-001f, 3.175148e-001f, -8.092838e-001f, 4.634608e-002f, -1.135898e-001f, 6.887323e-002f, 3.180562e-001f, -8.100941e-001f,
  1.285292e-001f, -3.045555e-001f, 1.768787e-001f, 3.175148e-001f, -8.092838e-001f, 4.450061e-002f, -1.090667e-001f, 6.613074e-002f, 3.180562e-001f, -8.100941e-001f,
  1.285292e-001f, -3.045555e-001f, 1.768787e-001f, 3.175148e-001f, -8.092838e-001f, 4.272863e-002f, -1.047238e-001f, 6.349746e-002f, 3.180562e-001f, -8.100941e-001f,
  1.285292e-001f, -3.045555e-001f, 1.768787e-001f, 3.175148e-001f, -8.092838e-001f, 4.102720e-002f, -1.005537e-001f, 6.096903e-002f, 3.180562e-001f, -8.100941e-001f,
  1.285292e-001f, -3.045555e-001f, 1.768787e-001f, 3.175148e-001f, -8.092838e-001f, 3.939352e-002f, -9.654973e-002f, 5.854128e-002f, 3.180562e-001f, -8.100941e-001f,
  1.285292e-001f, -3.045555e-001f, 1.768787e-001f, 3.175148e-001f, -8.092838e-001f, 3.782490e-002f, -9.270519e-002f, 5.621020e-002f, 3.180562e-001f, -8.100941e-001f,
  -1.280449e-001f, 1.504420e-001f, -2.035285e-002f, 7.413033e-002f, -5.531945e-001f, 0.000000e+000f, -3.768238e-002f, 4.146105e-002f, 0.000000e+000f, -4.760047e-001f,
  -1.280449e-001f, 1.704170e-001f, -4.070571e-002f, 1.482607e-001f, -6.311945e-001f, 0.000000e+000f, -3.768238e-002f, 4.146105e-002f, 0.000000e+000f, -4.760047e-001f,
  -1.280449e-001f, 1.903921e-001f, -6.105856e-002f, 2.223910e-001f, -7.091945e-001f, 0.000000e+000f, -3.768238e-002f, 4.146105e-002f, 0.000000e+000f, -4.760047e-001f,
  -1.280449e-001f, 2.103671e-001f, -8.141142e-002f, 2.965213e-001f, -7.871945e-001f, 0.000000e+000f, -3.768238e-002f, 4.146105e-002f, 0.000000e+000f, -4.760047e-001f,
  0.000000e+000f, -1.242977e-001f, 1.650424e-001f, 0.000000e+000f, -3.340893e-001f,
  9.700807e-002f, -2.279404e-001f, 1.316289e-001f, 1.825582e-001f, -6.073070e-001f, -1.126290e-003f, -6.030950e-002f, 8.206458e-002f, 1.683246e-001f, -5.860049e-001f,
  1.036414e-001f, -2.430432e-001f, 1.399875e-001f, 2.166124e-001f, -6.582727e-001f, 2.308206e-002f, -8.202998e-002f, 6.822449e-002f, 2.595465e-001f, -7.225281e-001f,
  1.111667e-001f, -2.601840e-001f, 1.494795e-001f, 2.552647e-001f, -7.161199e-001f, 2.974688e-002f, -8.943854e-002f, 6.631116e-002f, 2.808977e-001f, -7.544824e-001f,
  1.155759e-001f, -2.702506e-001f, 1.550724e-001f, 2.779737e-001f, -7.501063e-001f, 3.534916e-002f, -9.647850e-002f, 6.578172e-002f, 2.967047e-001f, -7.781393e-001f,
  1.182871e-001f, -2.764218e-001f, 1.584865e-001f, 2.918880e-001f, -7.709306e-001f, 3.867798e-002f, -1.014046e-001f, 6.645377e-002f, 3.041398e-001f, -7.892667e-001f,
  1.198224e-001f, -2.799726e-001f, 1.604946e-001f, 2.999155e-001f, -7.829445e-001f, 4.212941e-002f, -1.069194e-001f, 6.769122e-002f, 3.107763e-001f, -7.991989e-001f,
  1.202428e-001f, -2.810472e-001f, 1.611802e-001f, 3.023830e-001f, -7.866374e-001f, 4.369447e-002f, -1.105212e-001f, 6.971442e-002f, 3.108851e-001f, -7.993618e-001f,
  1.216100e-001f, -2.841361e-001f, 1.628711e-001f, 3.093387e-001f, -7.970474e-001f, 4.732195e-002f, -1.160627e-001f, 7.067700e-002f, 3.185306e-001f, -8.108040e-001f,
  1.217230e-001f, -2.845655e-001f, 1.632420e-001f, 3.103723e-001f, -7.985943e-001f, 4.973416e-002f, -1.210146e-001f, 7.299931e-002f, 3.202776e-001f, -8.134185e-001f,
  1.221739e-001f, -2.856766e-001f, 1.639223e-001f, 3.129095e-001f, -8.023915e-001f, 5.161572e-002f, -1.251802e-001f, 7.521300e-002f, 3.208422e-001f, -8.142636e-001f,
  1.222099e-001f, -2.859726e-001f, 1.642519e-001f, 3.136583e-001f, -8.035121e-001f, 5.378944e-002f, -1.301244e-001f, 7.794553e-002f, 3.211472e-001f, -8.147201e-001f,
  1.224800e-001f, -2.867161e-001f, 1.647630e-001f, 3.153835e-001f, -8.060941e-001f, 5.584342e-002f, -1.346358e-001f, 8.031459e-002f, 3.218578e-001f, -8.157836e-001f,
  1.220656e-001f, -2.861926e-001f, 1.647985e-001f, 3.143623e-001f, -8.045658e-001f, 5.821520e-002f, -1.399867e-001f, 8.323788e-002f, 3.223060e-001f, -8.164544e-001f,
  1.219903e-001f, -2.863271e-001f, 1.651099e-001f, 3.147817e-001f, -8.051934e-001f, 6.021246e-002f, -1.446327e-001f, 8.588560e-002f, 3.223144e-001f, -8.164670e-001f,
  1.225294e-001f, -2.875414e-001f, 1.657718e-001f, 3.175148e-001f, -8.092838e-001f, 5.198040e-002f, -1.262123e-001f, 7.594055e-002f, 3.180562e-001f, -8.100941e-001f,
  1.225294e-001f, -2.875414e-001f, 1.657718e-001f, 3.175148e-001f, -8.092838e-001f, 4.957370e-002f, -1.203687e-001f, 7.242450e-002f, 3.180562e-001f, -8.100941e-001f,
  1.225294e-001f, -2.875414e-001f, 1.657718e-001f, 3.175148e-001f, -8.092838e-001f, 4.759971e-002f, -1.155757e-001f, 6.954061e-002f, 3.180562e-001f, -8.100941e-001f,
  1.225294e-001f, -2.875414e-001f, 1.657718e-001f, 3.175148e-001f, -8.092838e-001f, 4.539584e-002f, -1.102245e-001f, 6.632087e-002f, 3.180562e-001f, -8.100941e-001f,
  1.225294e-001f, -2.875414e-001f, 1.657718e-001f, 3.175148e-001f, -8.092838e-001f, 4.358821e-002f, -1.058355e-001f, 6.368002e-002f, 3.180562e-001f, -8.100941e-001f,
  1.225294e-001f, -2.875414e-001f, 1.657718e-001f, 3.175148e-001f, -8.092838e-001f, 4.157007e-002f, -1.009353e-001f, 6.073163e-002f, 3.180562e-001f, -8.100941e-001f,
  1.225294e-001f, -2.875414e-001f, 1.657718e-001f, 3.175148e-001f, -8.092838e-001f, 3.991478e-002f, -9.691609e-002f, 5.831334e-002f, 3.180562e-001f, -8.100941e-001f,
  1.225294e-001f, -2.875414e-001f, 1.657718e-001f, 3.175148e-001f, -8.092838e-001f, 3.832540e-002f, -9.305695e-002f, 5.599134e-002f, 3.180562e-001f, -8.100941e-001f,
  1.225294e-001f, -2.875414e-001f, 1.657718e-001f, 3.175148e-001f, -8.092838e-001f, 3.655093e-002f, -8.874841e-002f, 5.339893e-002f, 3.180562e-001f, -8.100941e-001f,
  1.225294e-001f, -2.875414e-001f, 1.657718e-001f, 3.175148e-001f, -8.092838e-001f, 3.605920e-002f, -8.755445e-002f, 5.268054e-002f, 3.180562e-001f, -8.100941e-001f,
  -1.208822e-001f, 1.420264e-001f, -1.921433e-002f, 7.413033e-002f, -5.531945e-001f, 0.000000e+000f, -3.557446e-002f, 3.914175e-002f, 0.000000e+000f, -4.760047e-001f,
  -1.208822e-001f, 1.608841e-001f, -3.842867e-002f, 1.482607e-001f, -6.311945e-001f, 0.000000e+000f, -3.557446e-002f, 3.914175e-002f, 0.000000e+000f, -4.760047e-001f,
  -1.208822e-001f, 1.797417e-001f, -5.764300e-002f, 2.223910e-001f, -7.091945e-001f, 0.000000e+000f, -3.557446e-002f, 3.914175e-002f, 0.000000e+000f, -4.760047e-001f,
  0.000000e+000f, -1.213328e-001f, 1.597982e-001f, 0.000000e+000f, -3.340893e-001f,
  9.469406e-002f, -2.214828e-001f, 1.274464e-001f, 1.825582e-001f, -6.073070e-001f, 9.550882e-003f, -6.792998e-002f, 7.289892e-002f, 2.105004e-001f, -6.491255e-001f,
  1.052548e-001f, -2.454231e-001f, 1.406582e-001f, 2.381249e-001f, -6.904685e-001f, 2.572200e-002f, -8.333665e-002f, 6.514022e-002f, 2.700337e-001f, -7.382232e-001f,
  1.118117e-001f, -2.602987e-001f, 1.488764e-001f, 2.726565e-001f, -7.421487e-001f, 3.330323e-002f, -9.213915e-002f, 6.358328e-002f, 2.936810e-001f, -7.736141e-001f,
  1.154655e-001f, -2.685840e-001f, 1.534506e-001f, 2.918880e-001f, -7.709306e-001f, 3.775536e-002f, -9.857896e-002f, 6.434222e-002f, 3.041398e-001f, -7.892667e-001f,
  1.170632e-001f, -2.722742e-001f, 1.555395e-001f, 3.004790e-001f, -7.837879e-001f, 4.139892e-002f, -1.045215e-001f, 6.584867e-002f, 3.108851e-001f, -7.993618e-001f,
  1.181279e-001f, -2.747689e-001f, 1.569781e-001f, 3.062998e-001f, -7.924993e-001f, 4.443958e-002f, -1.101103e-001f, 6.793514e-002f, 3.148152e-001f, -8.052436e-001f,
  1.187206e-001f, -2.762352e-001f, 1.578813e-001f, 3.097497e-001f, -7.976625e-001f, 4.788202e-002f, -1.162255e-001f, 7.001796e-002f, 3.198369e-001f, -8.127591e-001f,
  1.192596e-001f, -2.775771e-001f, 1.587137e-001f, 3.129095e-001f, -8.023915e-001f, 5.038449e-002f, -1.216513e-001f, 7.282312e-002f, 3.208422e-001f, -8.142636e-001f,
  1.193643e-001f, -2.780372e-001f, 1.591381e-001f, 3.140615e-001f, -8.041156e-001f, 5.286235e-002f, -1.271996e-001f, 7.583247e-002f, 3.213627e-001f, -8.150426e-001f,
  1.193961e-001f, -2.783830e-001f, 1.595384e-001f, 3.149675e-001f, -8.054715e-001f, 5.540454e-002f, -1.329553e-001f, 7.900328e-002f, 3.217260e-001f, -8.155863e-001f,
  1.190427e-001f, -2.780516e-001f, 1.597148e-001f, 3.143754e-001f, -8.045854e-001f, 5.822648e-002f, -1.391334e-001f, 8.224519e-002f, 3.226985e-001f, -8.170418e-001f,
  1.196066e-001f, -2.793938e-001f, 1.605044e-001f, 3.175148e-001f, -8.092838e-001f, 5.074047e-002f, -1.226550e-001f, 7.352756e-002f, 3.180562e-001f, -8.100941e-001f,
  1.196066e-001f, -2.793938e-001f, 1.605044e-001f, 3.175148e-001f, -8.092838e-001f, 4.806457e-002f, -1.161865e-001f, 6.964994e-002f, 3.180562e-001f, -8.100941e-001f,
  1.196066e-001f, -2.793938e-001f, 1.605044e-001f, 3.175148e-001f, -8.092838e-001f, 4.552979e-002f, -1.100592e-001f, 6.597681e-002f, 3.180562e-001f, -8.100941e-001f,
  1.196066e-001f, -2.793938e-001f, 1.605044e-001f, 3.175148e-001f, -8.092838e-001f, 4.312869e-002f, -1.042550e-001f, 6.249739e-002f, 3.180562e-001f, -8.100941e-001f,
  1.196066e-001f, -2.793938e-001f, 1.605044e-001f, 3.175148e-001f, -8.092838e-001f, 4.085421e-002f, -9.875692e-002f, 5.920147e-002f, 3.180562e-001f, -8.100941e-001f,
  1.196066e-001f, -2.793938e-001f, 1.605044e-001f, 3.175148e-001f, -8.092838e-001f, 3.869968e-002f, -9.354878e-002f, 5.607936e-002f, 3.180562e-001f, -8.100941e-001f,
  1.196066e-001f, -2.793938e-001f, 1.605044e-001f, 3.175148e-001f, -8.092838e-001f, 3.665878e-002f, -8.861530e-002f, 5.312191e-002f, 3.180562e-001f, -8.100941e-001f,
  1.196066e-001f, -2.793938e-001f, 1.605044e-001f, 3.175148e-001f, -8.092838e-001f, 3.519905e-002f, -8.508669e-002f, 5.100663e-002f, 3.180562e-001f, -8.100941e-001f,
  -1.174525e-001f, 1.379969e-001f, -1.866918e-002f, 7.413033e-002f, -5.531945e-001f, 0.000000e+000f, -3.456514e-002f, 3.803122e-002f, 0.000000e+000f, -4.760047e-001f,
  -1.174525e-001f, 1.563195e-001f, -3.733837e-002f, 1.482607e-001f, -6.311945e-001f, 0.000000e+000f, -3.456514e-002f, 3.803122e-002f, 0.000000e+000f, -4.760047e-001f,
  -1.174525e-001f, 1.746420e-001f, -5.600755e-002f, 2.223910e-001f, -7.091945e-001f, 0.000000e+000f, -3.456514e-002f, 3.803122e-002f, 0.000000e+000f, -4.760047e-001f,
  0.000000e+000f, -1.184205e-001f, 1.547342e-001f, 0.000000e+000f, -3.340893e-001f,
  9.242118e-002f, -2.152080e-001f, 1.234076e-001f, 1.825582e-001f, -6.073070e-001f, 1.637029e-002f, -7.234296e-002f, 6.657737e-002f, 2.384763e-001f, -6.909943e-001f,
  1.067575e-001f, -2.475527e-001f, 1.411940e-001f, 2.598299e-001f, -7.229522e-001f, 2.934732e-002f, -8.574023e-002f, 6.192679e-002f, 2.841953e-001f, -7.594177e-001f,
  1.120093e-001f, -2.594198e-001f, 1.477336e-001f, 2.881874e-001f, -7.653923e-001f, 3.574120e-002f, -9.423366e-002f, 6.210824e-002f, 3.014891e-001f, -7.852997e-001f,
  1.142534e-001f, -2.645538e-001f, 1.506104e-001f, 3.004790e-001f, -7.837879e-001f, 4.040525e-002f, -1.015935e-001f, 6.376194e-002f, 3.108851e-001f, -7.993618e-001f,
  1.157466e-001f, -2.679878e-001f, 1.525481e-001f, 3.087074e-001f, -7.961025e-001f, 4.459878e-002f, -1.088249e-001f, 6.605102e-002f, 3.176358e-001f, -8.094649e-001f,
  1.161210e-001f, -2.690298e-001f, 1.532705e-001f, 3.112709e-001f, -7.999391e-001f, 4.802540e-002f, -1.156330e-001f, 6.909647e-002f, 3.206657e-001f, -8.139994e-001f,
  1.163865e-001f, -2.698670e-001f, 1.539112e-001f, 3.133606e-001f, -8.030666e-001f, 5.091000e-002f, -1.221773e-001f, 7.272262e-002f, 3.209683e-001f, -8.144523e-001f,
  1.165303e-001f, -2.704923e-001f, 1.544827e-001f, 3.149675e-001f, -8.054715e-001f, 5.407470e-002f, -1.292031e-001f, 7.649968e-002f, 3.217260e-001f, -8.155863e-001f,
  1.162221e-001f, -2.703306e-001f, 1.547975e-001f, 3.147817e-001f, -8.051934e-001f, 5.736540e-002f, -1.365808e-001f, 8.052138e-002f, 3.223144e-001f, -8.164670e-001f,
  1.167357e-001f, -2.714767e-001f, 1.554181e-001f, 3.175148e-001f, -8.092838e-001f, 4.819906e-002f, -1.160116e-001f, 6.929468e-002f, 3.180562e-001f, -8.100941e-001f,
  1.167357e-001f, -2.714767e-001f, 1.554181e-001f, 3.175148e-001f, -8.092838e-001f, 4.504294e-002f, -1.084151e-001f, 6.475721e-002f, 3.180562e-001f, -8.100941e-001f,
  1.167357e-001f, -2.714767e-001f, 1.554181e-001f, 3.175148e-001f, -8.092838e-001f, 4.209350e-002f, -1.013160e-001f, 6.051685e-002f, 3.180562e-001f, -8.100941e-001f,
  1.167357e-001f, -2.714767e-001f, 1.554181e-001f, 3.175148e-001f, -8.092838e-001f, 3.933718e-002f, -9.468173e-002f, 5.655416e-002f, 3.180562e-001f, -8.100941e-001f,
  1.167357e-001f, -2.714767e-001f, 1.554181e-001f, 3.175148e-001f, -8.092838e-001f, 3.676135e-002f, -8.848190e-002f, 5.285095e-002f, 3.180562e-001f, -8.100941e-001f,
  1.167357e-001f, -2.714767e-001f, 1.554181e-001f, 3.175148e-001f, -8.092838e-001f, 3.435419e-002f, -8.268803e-002f, 4.939023e-002f, 3.180562e-001f, -8.100941e-001f,
  -1.141202e-001f, 1.340816e-001f, -1.813950e-002f, 7.413033e-002f, -5.531945e-001f, 0.000000e+000f, -3.358446e-002f, 3.695220e-002f, 0.000000e+000f, -4.760047e-001f,
  -1.141202e-001f, 1.518843e-001f, -3.627900e-002f, 1.482607e-001f, -6.311945e-001f, 0.000000e+000f, -3.358446e-002f, 3.695220e-002f, 0.000000e+000f, -4.760047e-001f,
  0.000000e+000f, -1.155612e-001f, 1.498435e-001f, 0.000000e+000f, -3.340893e-001f,
  9.018964e-002f, -2.091106e-001f, 1.195071e-001f, 1.825582e-001f, -6.073070e-001f, 2.349233e-002f, -7.778162e-002f, 6.135801e-002f, 2.665807e-001f, -7.330555e-001f,
  1.093048e-001f, -2.520640e-001f, 1.430643e-001f, 2.881874e-001f, -7.653923e-001f, 3.487822e-002f, -9.160989e-002f, 6.014519e-002f, 3.014891e-001f, -7.852997e-001f,
  1.117912e-001f, -2.578121e-001f, 1.463370e-001f, 3.023830e-001f, -7.866374e-001f, 4.062330e-002f, -1.014880e-001f, 6.329438e-002f, 3.108851e-001f, -7.993618e-001f,
  1.133172e-001f, -2.614019e-001f, 1.484261e-001f, 3.112709e-001f, -7.999391e-001f, 4.686581e-002f, -1.123728e-001f, 6.691255e-002f, 3.206657e-001f, -8.139994e-001f,
  1.138745e-001f, -2.629594e-001f, 1.495086e-001f, 3.152154e-001f, -8.058425e-001f, 5.134142e-002f, -1.222239e-001f, 7.216116e-002f, 3.218778e-001f, -8.158135e-001f,
  1.134159e-001f, -2.626703e-001f, 1.499048e-001f, 3.147817e-001f, -8.051934e-001f, 5.598029e-002f, -1.327237e-001f, 7.797635e-002f, 3.223144e-001f, -8.164670e-001f,
  1.139171e-001f, -2.637836e-001f, 1.505058e-001f, 3.175148e-001f, -8.092838e-001f, 4.546925e-002f, -1.089869e-001f, 6.487027e-002f, 3.180562e-001f, -8.100941e-001f,
  1.139171e-001f, -2.637836e-001f, 1.505058e-001f, 3.175148e-001f, -8.092838e-001f, 4.107714e-002f, -9.845928e-002f, 5.860411e-002f, 3.180562e-001f, -8.100941e-001f,
  1.139171e-001f, -2.637836e-001f, 1.505058e-001f, 3.175148e-001f, -8.092838e-001f, 3.710928e-002f, -8.894858e-002f, 5.294323e-002f, 3.180562e-001f, -8.100941e-001f,
  1.139171e-001f, -2.637836e-001f, 1.505058e-001f, 3.175148e-001f, -8.092838e-001f, 3.352470e-002f, -8.035656e-002f, 4.782916e-002f, 3.180562e-001f, -8.100941e-001f,
  -1.108824e-001f, 1.302774e-001f, -1.762485e-002f, 7.413033e-002f, -5.531945e-001f, 0.000000e+000f, -3.263160e-002f, 3.590379e-002f, 0.000000e+000f, -4.760047e-001f,
  0.000000e+000f, -1.127550e-001f, 1.451196e-001f, 0.000000e+000f, -3.340893e-001f,
  8.799957e-002f, -2.031858e-001f, 1.157396e-001f, 1.825582e-001f, -6.073070e-001f, 3.403127e-002f, -8.905778e-002f, 5.824908e-002f, 3.014891e-001f, -7.852997e-001f,
  1.105655e-001f, -2.539901e-001f, 1.437468e-001f, 3.112709e-001f, -7.999391e-001f, 4.572776e-002f, -1.092039e-001f, 6.480310e-002f, 3.206657e-001f, -8.139994e-001f,
  1.106618e-001f, -2.552268e-001f, 1.451790e-001f, 3.147817e-001f, -8.051934e-001f, 5.462092e-002f, -1.289751e-001f, 7.551810e-002f, 3.223144e-001f, -8.164670e-001f,
  1.111509e-001f, -2.563084e-001f, 1.457610e-001f, 3.175148e-001f, -8.092838e-001f, 4.007966e-002f, -9.568263e-002f, 5.675658e-002f, 3.180562e-001f, -8.100941e-001f,
  1.111509e-001f, -2.563084e-001f, 1.457610e-001f, 3.175148e-001f, -8.092838e-001f, 3.271062e-002f, -7.809043e-002f, 4.632132e-002f, 3.180562e-001f, -8.100941e-001f,
  // Total number of coefficients: 3485
  // Maximum number of elevation coefficients: 5

	// Lite coefficients
	// Headphones
	// 44100 Hz sample rate
  // Generated by HRTFConv V5.90d on Mon Feb 08 11:13:18 1999
  0.000000e+000f, -6.590720e-002f, 1.046931e-001f, 0.000000e+000f, -3.745480e-001f,
  5.514795e-002f, -1.436125e-001f, 8.897203e-002f, 2.445261e-001f, -7.009763e-001f, 4.499875e-003f, -3.728254e-002f, 4.786845e-002f, 2.317809e-001f, -6.839622e-001f,
  5.793375e-002f, -1.506790e-001f, 9.316771e-002f, 2.747513e-001f, -7.413251e-001f, 1.476593e-002f, -4.942817e-002f, 4.125728e-002f, 3.121346e-001f, -7.912298e-001f,
  6.103834e-002f, -1.585566e-001f, 9.784739e-002f, 3.084488e-001f, -7.863093e-001f, 1.763273e-002f, -5.357650e-002f, 4.061304e-002f, 3.303595e-001f, -8.155589e-001f,
  6.282381e-002f, -1.630962e-001f, 1.005532e-001f, 3.278793e-001f, -8.122479e-001f, 2.008614e-002f, -5.753571e-002f, 4.071153e-002f, 3.436780e-001f, -8.333383e-001f,
  6.390793e-002f, -1.658451e-001f, 1.021843e-001f, 3.396358e-001f, -8.279422e-001f, 2.160223e-002f, -6.034487e-002f, 4.134828e-002f, 3.498891e-001f, -8.416297e-001f,
  6.451714e-002f, -1.674118e-001f, 1.031358e-001f, 3.463644e-001f, -8.369245e-001f, 2.320498e-002f, -6.350344e-002f, 4.232141e-002f, 3.554034e-001f, -8.489911e-001f,
  6.468361e-002f, -1.678797e-001f, 1.034589e-001f, 3.484246e-001f, -8.396748e-001f, 2.403873e-002f, -6.564539e-002f, 4.362008e-002f, 3.554936e-001f, -8.491115e-001f,
  6.522196e-002f, -1.692355e-001f, 1.042543e-001f, 3.542113e-001f, -8.473997e-001f, 2.568574e-002f, -6.877439e-002f, 4.443456e-002f, 3.618108e-001f, -8.575445e-001f,
  6.526670e-002f, -1.694158e-001f, 1.044277e-001f, 3.550686e-001f, -8.485441e-001f, 2.690499e-002f, -7.167218e-002f, 4.596114e-002f, 3.632489e-001f, -8.594643e-001f,
  6.544367e-002f, -1.698973e-001f, 1.047460e-001f, 3.571700e-001f, -8.513494e-001f, 2.788615e-002f, -7.412853e-002f, 4.738726e-002f, 3.637133e-001f, -8.600842e-001f,
  6.545818e-002f, -1.700170e-001f, 1.048996e-001f, 3.577893e-001f, -8.521761e-001f, 2.903291e-002f, -7.705189e-002f, 4.913736e-002f, 3.639640e-001f, -8.604190e-001f,
  6.556412e-002f, -1.703354e-001f, 1.051379e-001f, 3.592151e-001f, -8.540794e-001f, 3.009926e-002f, -7.970725e-002f, 5.066467e-002f, 3.645480e-001f, -8.611986e-001f,
  6.540270e-002f, -1.700889e-001f, 1.051537e-001f, 3.583714e-001f, -8.529532e-001f, 3.134496e-002f, -8.286564e-002f, 5.253844e-002f, 3.649162e-001f, -8.616901e-001f,
  6.537381e-002f, -1.701341e-001f, 1.052985e-001f, 3.587179e-001f, -8.534158e-001f, 3.240879e-002f, -8.561810e-002f, 5.422635e-002f, 3.649231e-001f, -8.616993e-001f,
  6.558468e-002f, -1.706632e-001f, 1.056069e-001f, 3.609736e-001f, -8.564270e-001f, 2.812639e-002f, -7.482353e-002f, 4.788507e-002f, 3.614199e-001f, -8.570227e-001f,
  6.558468e-002f, -1.706632e-001f, 1.056069e-001f, 3.609736e-001f, -8.564270e-001f, 2.682413e-002f, -7.135920e-002f, 4.566799e-002f, 3.614199e-001f, -8.570227e-001f,
  6.558468e-002f, -1.706632e-001f, 1.056069e-001f, 3.609736e-001f, -8.564270e-001f, 2.575601e-002f, -6.851772e-002f, 4.384952e-002f, 3.614199e-001f, -8.570227e-001f,
  6.558468e-002f, -1.706632e-001f, 1.056069e-001f, 3.609736e-001f, -8.564270e-001f, 2.456351e-002f, -6.534535e-002f, 4.181928e-002f, 3.614199e-001f, -8.570227e-001f,
  6.558468e-002f, -1.706632e-001f, 1.056069e-001f, 3.609736e-001f, -8.564270e-001f, 2.358541e-002f, -6.274334e-002f, 4.015407e-002f, 3.614199e-001f, -8.570227e-001f,
  6.558468e-002f, -1.706632e-001f, 1.056069e-001f, 3.609736e-001f, -8.564270e-001f, 2.249340e-002f, -5.983832e-002f, 3.829493e-002f, 3.614199e-001f, -8.570227e-001f,
  6.558468e-002f, -1.706632e-001f, 1.056069e-001f, 3.609736e-001f, -8.564270e-001f, 2.159773e-002f, -5.745559e-002f, 3.677005e-002f, 3.614199e-001f, -8.570227e-001f,
  6.558468e-002f, -1.706632e-001f, 1.056069e-001f, 3.609736e-001f, -8.564270e-001f, 2.073772e-002f, -5.516775e-002f, 3.530589e-002f, 3.614199e-001f, -8.570227e-001f,
  6.558468e-002f, -1.706632e-001f, 1.056069e-001f, 3.609736e-001f, -8.564270e-001f, 1.977756e-002f, -5.261348e-002f, 3.367123e-002f, 3.614199e-001f, -8.570227e-001f,
  6.558468e-002f, -1.706632e-001f, 1.056069e-001f, 3.609736e-001f, -8.564270e-001f, 1.951149e-002f, -5.190565e-002f, 3.321824e-002f, 3.614199e-001f, -8.570227e-001f,
  -1.538281e-001f, 1.823922e-001f, -2.682061e-002f, 8.288318e-002f, -5.678790e-001f, 0.000000e+000f, -4.576397e-002f, 4.904839e-002f, 0.000000e+000f, -4.824747e-001f,
  -1.538281e-001f, 2.088507e-001f, -5.364123e-002f, 1.657664e-001f, -6.538790e-001f, 0.000000e+000f, -4.576397e-002f, 4.904839e-002f, 0.000000e+000f, -4.824747e-001f,
  -1.538281e-001f, 2.353091e-001f, -8.046184e-002f, 2.486496e-001f, -7.398790e-001f, 0.000000e+000f, -4.576397e-002f, 4.904839e-002f, 0.000000e+000f, -4.824747e-001f,
  0.000000e+000f, -8.562728e-002f, 1.291457e-001f, 0.000000e+000f, -3.745480e-001f,
  7.164875e-002f, -1.808321e-001f, 1.097528e-001f, 2.445261e-001f, -7.009763e-001f, 5.846281e-003f, -4.796861e-002f, 5.904886e-002f, 2.317809e-001f, -6.839622e-001f,
  7.428217e-002f, -1.872996e-001f, 1.135169e-001f, 2.665131e-001f, -7.303276e-001f, 1.838236e-002f, -6.165883e-002f, 5.118030e-002f, 3.078831e-001f, -7.855542e-001f,
  7.876420e-002f, -1.983141e-001f, 1.199337e-001f, 3.039639e-001f, -7.803223e-001f, 2.228516e-002f, -6.690945e-002f, 5.022149e-002f, 3.273383e-001f, -8.115258e-001f,
  8.108161e-002f, -2.040157e-001f, 1.232616e-001f, 3.233562e-001f, -8.062099e-001f, 2.537696e-002f, -7.144423e-002f, 5.002788e-002f, 3.411422e-001f, -8.299531e-001f,
  8.265776e-002f, -2.078877e-001f, 1.255161e-001f, 3.365205e-001f, -8.237835e-001f, 2.738158e-002f, -7.494741e-002f, 5.075147e-002f, 3.476788e-001f, -8.386791e-001f,
  8.354759e-002f, -2.100884e-001f, 1.268110e-001f, 3.440153e-001f, -8.337886e-001f, 2.938960e-002f, -7.852710e-002f, 5.158269e-002f, 3.539240e-001f, -8.470162e-001f,
  8.391727e-002f, -2.110421e-001f, 1.274085e-001f, 3.472981e-001f, -8.381710e-001f, 3.064271e-002f, -8.137609e-002f, 5.302910e-002f, 3.551847e-001f, -8.486991e-001f,
  8.443286e-002f, -2.123279e-001f, 1.281750e-001f, 3.516869e-001f, -8.440298e-001f, 3.230962e-002f, -8.472639e-002f, 5.429031e-002f, 3.587456e-001f, -8.534527e-001f,
  8.474598e-002f, -2.131320e-001f, 1.286755e-001f, 3.544517e-001f, -8.477206e-001f, 3.407860e-002f, -8.825441e-002f, 5.558737e-002f, 3.626422e-001f, -8.586544e-001f,
  8.487731e-002f, -2.135164e-001f, 1.289565e-001f, 3.558133e-001f, -8.495383e-001f, 3.540301e-002f, -9.136034e-002f, 5.725911e-002f, 3.635681e-001f, -8.598905e-001f,
  8.503910e-002f, -2.139699e-001f, 1.292724e-001f, 3.574047e-001f, -8.516627e-001f, 3.663086e-002f, -9.441602e-002f, 5.907473e-002f, 3.636712e-001f, -8.600280e-001f,
  8.508017e-002f, -2.141583e-001f, 1.294631e-001f, 3.581227e-001f, -8.526212e-001f, 3.796126e-002f, -9.764334e-002f, 6.091592e-002f, 3.641412e-001f, -8.606555e-001f,
  8.516036e-002f, -2.144375e-001f, 1.297018e-001f, 3.591449e-001f, -8.539858e-001f, 3.931401e-002f, -1.009547e-001f, 6.283303e-002f, 3.644912e-001f, -8.611227e-001f,
  8.497182e-002f, -2.141612e-001f, 1.297140e-001f, 3.583714e-001f, -8.529532e-001f, 4.072368e-002f, -1.043913e-001f, 6.480959e-002f, 3.649162e-001f, -8.616901e-001f,
  8.493429e-002f, -2.142230e-001f, 1.298925e-001f, 3.587179e-001f, -8.534158e-001f, 4.210581e-002f, -1.078564e-001f, 6.689174e-002f, 3.649231e-001f, -8.616993e-001f,
  8.520825e-002f, -2.148884e-001f, 1.302730e-001f, 3.609736e-001f, -8.564270e-001f, 3.654208e-002f, -9.427856e-002f, 5.906936e-002f, 3.614199e-001f, -8.570227e-001f,
  8.520825e-002f, -2.148884e-001f, 1.302730e-001f, 3.609736e-001f, -8.564270e-001f, 3.508700e-002f, -9.052445e-002f, 5.671726e-002f, 3.614199e-001f, -8.570227e-001f,
  8.520825e-002f, -2.148884e-001f, 1.302730e-001f, 3.609736e-001f, -8.564270e-001f, 3.368985e-002f, -8.691982e-002f, 5.445881e-002f, 3.614199e-001f, -8.570227e-001f,
  8.520825e-002f, -2.148884e-001f, 1.302730e-001f, 3.609736e-001f, -8.564270e-001f, 3.234834e-002f, -8.345873e-002f, 5.229030e-002f, 3.614199e-001f, -8.570227e-001f,
  8.520825e-002f, -2.148884e-001f, 1.302730e-001f, 3.609736e-001f, -8.564270e-001f, 3.106025e-002f, -8.013546e-002f, 5.020813e-002f, 3.614199e-001f, -8.570227e-001f,
  8.520825e-002f, -2.148884e-001f, 1.302730e-001f, 3.609736e-001f, -8.564270e-001f, 2.982345e-002f, -7.694451e-002f, 4.820887e-002f, 3.614199e-001f, -8.570227e-001f,
  8.520825e-002f, -2.148884e-001f, 1.302730e-001f, 3.609736e-001f, -8.564270e-001f, 2.863590e-002f, -7.388063e-002f, 4.628923e-002f, 3.614199e-001f, -8.570227e-001f,
  8.520825e-002f, -2.148884e-001f, 1.302730e-001f, 3.609736e-001f, -8.564270e-001f, 2.749564e-002f, -7.093875e-002f, 4.444602e-002f, 3.614199e-001f, -8.570227e-001f,
  8.520825e-002f, -2.148884e-001f, 1.302730e-001f, 3.609736e-001f, -8.564270e-001f, 2.640078e-002f, -6.811402e-002f, 4.267621e-002f, 3.614199e-001f, -8.570227e-001f,
  8.520825e-002f, -2.148884e-001f, 1.302730e-001f, 3.609736e-001f, -8.564270e-001f, 2.534952e-002f, -6.540176e-002f, 4.097687e-002f, 3.614199e-001f, -8.570227e-001f,
  -1.725979e-001f, 2.046475e-001f, -3.009322e-002f, 8.288318e-002f, -5.678790e-001f, 0.000000e+000f, -5.134802e-002f, 5.503319e-002f, 0.000000e+000f, -4.824747e-001f,
  -1.725979e-001f, 2.343343e-001f, -6.018645e-002f, 1.657664e-001f, -6.538790e-001f, 0.000000e+000f, -5.134802e-002f, 5.503319e-002f, 0.000000e+000f, -4.824747e-001f,
  -1.725979e-001f, 2.640211e-001f, -9.027967e-002f, 2.486496e-001f, -7.398790e-001f, 0.000000e+000f, -5.134802e-002f, 5.503319e-002f, 0.000000e+000f, -4.824747e-001f,
  -1.725979e-001f, 2.937080e-001f, -1.203729e-001f, 3.315327e-001f, -8.258790e-001f, 0.000000e+000f, -5.134802e-002f, 5.503319e-002f, 0.000000e+000f, -4.824747e-001f,
  0.000000e+000f, -1.107773e-001f, 1.596059e-001f, 0.000000e+000f, -3.745480e-001f,
  9.269311e-002f, -2.276931e-001f, 1.356389e-001f, 2.445261e-001f, -7.009763e-001f, 2.651015e-003f, -5.678217e-002f, 7.630755e-002f, 2.078421e-001f, -6.520053e-001f,
  9.269311e-002f, -2.276931e-001f, 1.356389e-001f, 2.445261e-001f, -7.009763e-001f, 2.062189e-002f, -7.467208e-002f, 6.477817e-002f, 2.939030e-001f, -7.668915e-001f,
  9.940155e-002f, -2.437240e-001f, 1.448102e-001f, 2.878462e-001f, -7.588060e-001f, 2.640567e-002f, -8.146596e-002f, 6.256040e-002f, 3.181677e-001f, -7.992836e-001f,
  1.032025e-001f, -2.528031e-001f, 1.500011e-001f, 3.123782e-001f, -7.915549e-001f, 3.039991e-002f, -8.669324e-002f, 6.180031e-002f, 3.331505e-001f, -8.192847e-001f,
  1.052408e-001f, -2.576888e-001f, 1.528090e-001f, 3.255896e-001f, -8.091914e-001f, 3.331298e-002f, -9.098204e-002f, 6.193246e-002f, 3.424989e-001f, -8.317644e-001f,
  1.069356e-001f, -2.617347e-001f, 1.551201e-001f, 3.365205e-001f, -8.237835e-001f, 3.542398e-002f, -9.457127e-002f, 6.272163e-002f, 3.476788e-001f, -8.386791e-001f,
  1.079379e-001f, -2.641435e-001f, 1.565102e-001f, 3.430383e-001f, -8.324843e-001f, 3.762549e-002f, -9.831395e-002f, 6.354400e-002f, 3.530821e-001f, -8.458923e-001f,
  1.085084e-001f, -2.655410e-001f, 1.573392e-001f, 3.468353e-001f, -8.375531e-001f, 3.924923e-002f, -1.015494e-001f, 6.483487e-002f, 3.554936e-001f, -8.491115e-001f,
  1.087207e-001f, -2.661142e-001f, 1.577244e-001f, 3.484246e-001f, -8.396748e-001f, 4.040449e-002f, -1.043691e-001f, 6.649934e-002f, 3.554936e-001f, -8.491115e-001f,
  1.095471e-001f, -2.680667e-001f, 1.588222e-001f, 3.536874e-001f, -8.467002e-001f, 4.277326e-002f, -1.084668e-001f, 6.748601e-002f, 3.610734e-001f, -8.565602e-001f,
  1.096260e-001f, -2.683303e-001f, 1.590380e-001f, 3.544452e-001f, -8.477120e-001f, 4.435893e-002f, -1.118326e-001f, 6.904374e-002f, 3.627450e-001f, -8.587917e-001f,
  1.098071e-001f, -2.688230e-001f, 1.593720e-001f, 3.558133e-001f, -8.495383e-001f, 4.580143e-002f, -1.151050e-001f, 7.076416e-002f, 3.635681e-001f, -8.598905e-001f,
  1.100165e-001f, -2.693758e-001f, 1.597338e-001f, 3.573393e-001f, -8.515753e-001f, 4.712995e-002f, -1.183100e-001f, 7.262418e-002f, 3.636925e-001f, -8.600565e-001f,
  1.099915e-001f, -2.694263e-001f, 1.598585e-001f, 3.575432e-001f, -8.518475e-001f, 4.849462e-002f, -1.216034e-001f, 7.453626e-002f, 3.638169e-001f, -8.602226e-001f,
  1.102028e-001f, -2.699821e-001f, 1.602206e-001f, 3.590762e-001f, -8.538940e-001f, 5.003390e-002f, -1.251348e-001f, 7.642900e-002f, 3.645644e-001f, -8.612205e-001f,
  1.100918e-001f, -2.698714e-001f, 1.602915e-001f, 3.588714e-001f, -8.536207e-001f, 5.141963e-002f, -1.285547e-001f, 7.847975e-002f, 3.644397e-001f, -8.610540e-001f,
  1.098990e-001f, -2.696166e-001f, 1.603247e-001f, 3.583089e-001f, -8.528697e-001f, 5.301169e-002f, -1.322523e-001f, 8.050230e-002f, 3.650636e-001f, -8.618868e-001f,
  1.098808e-001f, -2.697321e-001f, 1.605288e-001f, 3.587179e-001f, -8.534158e-001f, 5.447295e-002f, -1.358613e-001f, 8.266873e-002f, 3.649231e-001f, -8.616993e-001f,
  1.102352e-001f, -2.705691e-001f, 1.609990e-001f, 3.609736e-001f, -8.564270e-001f, 5.520584e-002f, -1.387074e-001f, 8.524796e-002f, 3.614199e-001f, -8.570227e-001f,
  1.102352e-001f, -2.705691e-001f, 1.609990e-001f, 3.609736e-001f, -8.564270e-001f, 4.601160e-002f, -1.156064e-001f, 7.105037e-002f, 3.614199e-001f, -8.570227e-001f,
  1.102352e-001f, -2.705691e-001f, 1.609990e-001f, 3.609736e-001f, -8.564270e-001f, 4.447966e-002f, -1.117573e-001f, 6.868477e-002f, 3.614199e-001f, -8.570227e-001f,
  1.102352e-001f, -2.705691e-001f, 1.609990e-001f, 3.609736e-001f, -8.564270e-001f, 4.299873e-002f, -1.080364e-001f, 6.639793e-002f, 3.614199e-001f, -8.570227e-001f,
  1.102352e-001f, -2.705691e-001f, 1.609990e-001f, 3.609736e-001f, -8.564270e-001f, 4.156710e-002f, -1.044394e-001f, 6.418724e-002f, 3.614199e-001f, -8.570227e-001f,
  1.102352e-001f, -2.705691e-001f, 1.609990e-001f, 3.609736e-001f, -8.564270e-001f, 4.018314e-002f, -1.009621e-001f, 6.205014e-002f, 3.614199e-001f, -8.570227e-001f,
  1.102352e-001f, -2.705691e-001f, 1.609990e-001f, 3.609736e-001f, -8.564270e-001f, 3.884525e-002f, -9.760062e-002f, 5.998421e-002f, 3.614199e-001f, -8.570227e-001f,
  1.102352e-001f, -2.705691e-001f, 1.609990e-001f, 3.609736e-001f, -8.564270e-001f, 3.755191e-002f, -9.435104e-002f, 5.798705e-002f, 3.614199e-001f, -8.570227e-001f,
  1.102352e-001f, -2.705691e-001f, 1.609990e-001f, 3.609736e-001f, -8.564270e-001f, 3.630163e-002f, -9.120965e-002f, 5.605639e-002f, 3.614199e-001f, -8.570227e-001f,
  1.102352e-001f, -2.705691e-001f, 1.609990e-001f, 3.609736e-001f, -8.564270e-001f, 3.509298e-002f, -8.817286e-002f, 5.419001e-002f, 3.614199e-001f, -8.570227e-001f,
  1.102352e-001f, -2.705691e-001f, 1.609990e-001f, 3.609736e-001f, -8.564270e-001f, 3.392457e-002f, -8.523717e-002f, 5.238578e-002f, 3.614199e-001f, -8.570227e-001f,
  1.102352e-001f, -2.705691e-001f, 1.609990e-001f, 3.609736e-001f, -8.564270e-001f, 3.279507e-002f, -8.239923e-002f, 5.064161e-002f, 3.614199e-001f, -8.570227e-001f,
  -1.936581e-001f, 2.296182e-001f, -3.376515e-002f, 8.288318e-002f, -5.678790e-001f, 0.000000e+000f, -5.761342e-002f, 6.174826e-002f, 0.000000e+000f, -4.824747e-001f,
  -1.936581e-001f, 2.629274e-001f, -6.753031e-002f, 1.657664e-001f, -6.538790e-001f, 0.000000e+000f, -5.761342e-002f, 6.174826e-002f, 0.000000e+000f, -4.824747e-001f,
  -1.936581e-001f, 2.962366e-001f, -1.012955e-001f, 2.486496e-001f, -7.398790e-001f, 0.000000e+000f, -5.761342e-002f, 6.174826e-002f, 0.000000e+000f, -4.824747e-001f,
  -1.936581e-001f, 3.295458e-001f, -1.350606e-001f, 3.315327e-001f, -8.258790e-001f, 0.000000e+000f, -5.761342e-002f, 6.174826e-002f, 0.000000e+000f, -4.824747e-001f,
  -1.936581e-001f, 3.628550e-001f, -1.688258e-001f, 4.144159e-001f, -9.118790e-001f, 0.000000e+000f, -5.761342e-002f, 6.174826e-002f, 0.000000e+000f, -4.824747e-001f,
  0.000000e+000f, -1.428029e-001f, 1.975894e-001f, 0.000000e+000f, -3.745480e-001f,
  1.194905e-001f, -2.866924e-001f, 1.679188e-001f, 2.445261e-001f, -7.009763e-001f, 3.417420e-003f, -7.300256e-002f, 9.446747e-002f, 2.078421e-001f, -6.520053e-001f,
  1.194905e-001f, -2.866924e-001f, 1.679188e-001f, 2.445261e-001f, -7.009763e-001f, 2.658364e-002f, -9.474094e-002f, 8.019429e-002f, 2.939030e-001f, -7.668915e-001f,
  1.281384e-001f, -3.068637e-001f, 1.792727e-001f, 2.878462e-001f, -7.588060e-001f, 3.403951e-002f, -1.030730e-001f, 7.744873e-002f, 3.181677e-001f, -7.992836e-001f,
  1.330382e-001f, -3.182877e-001f, 1.856988e-001f, 3.123782e-001f, -7.915549e-001f, 3.918848e-002f, -1.095173e-001f, 7.650775e-002f, 3.331505e-001f, -8.192847e-001f,
  1.356658e-001f, -3.244356e-001f, 1.891749e-001f, 3.255896e-001f, -8.091914e-001f, 4.294370e-002f, -1.148314e-001f, 7.667135e-002f, 3.424989e-001f, -8.317644e-001f,
  1.378505e-001f, -3.295265e-001f, 1.920361e-001f, 3.365205e-001f, -8.237835e-001f, 4.566499e-002f, -1.193028e-001f, 7.764833e-002f, 3.476788e-001f, -8.386791e-001f,
  1.391425e-001f, -3.325579e-001f, 1.937570e-001f, 3.430383e-001f, -8.324843e-001f, 4.850296e-002f, -1.239654e-001f, 7.866641e-002f, 3.530821e-001f, -8.458923e-001f,
  1.398781e-001f, -3.343173e-001f, 1.947833e-001f, 3.468353e-001f, -8.375531e-001f, 5.059613e-002f, -1.280166e-001f, 8.026449e-002f, 3.554936e-001f, -8.491115e-001f,
  1.401517e-001f, -3.350406e-001f, 1.952602e-001f, 3.484246e-001f, -8.396748e-001f, 5.208536e-002f, -1.315664e-001f, 8.232507e-002f, 3.554936e-001f, -8.491115e-001f,
  1.412170e-001f, -3.374967e-001f, 1.966192e-001f, 3.536874e-001f, -8.467002e-001f, 5.513895e-002f, -1.366743e-001f, 8.354655e-002f, 3.610734e-001f, -8.565602e-001f,
  1.413187e-001f, -3.378306e-001f, 1.968864e-001f, 3.544452e-001f, -8.477120e-001f, 5.718303e-002f, -1.408963e-001f, 8.547499e-002f, 3.627450e-001f, -8.587917e-001f,
  1.415522e-001f, -3.384524e-001f, 1.972999e-001f, 3.558133e-001f, -8.495383e-001f, 5.904255e-002f, -1.450086e-001f, 8.760486e-002f, 3.635681e-001f, -8.598905e-001f,
  1.418221e-001f, -3.391497e-001f, 1.977478e-001f, 3.573393e-001f, -8.515753e-001f, 6.075514e-002f, -1.490424e-001f, 8.990752e-002f, 3.636925e-001f, -8.600565e-001f,
  1.417899e-001f, -3.392167e-001f, 1.979021e-001f, 3.575432e-001f, -8.518475e-001f, 6.251433e-002f, -1.531873e-001f, 9.227465e-002f, 3.638169e-001f, -8.602226e-001f,
  1.420623e-001f, -3.399176e-001f, 1.983504e-001f, 3.590762e-001f, -8.538940e-001f, 6.449862e-002f, -1.576263e-001f, 9.461783e-002f, 3.645644e-001f, -8.612205e-001f,
  1.419192e-001f, -3.397830e-001f, 1.984382e-001f, 3.588714e-001f, -8.536207e-001f, 6.628496e-002f, -1.619328e-001f, 9.715662e-002f, 3.644397e-001f, -8.610540e-001f,
  1.416706e-001f, -3.394688e-001f, 1.984794e-001f, 3.583089e-001f, -8.528697e-001f, 6.833728e-002f, -1.665821e-001f, 9.966050e-002f, 3.650636e-001f, -8.618868e-001f,
  1.416472e-001f, -3.396189e-001f, 1.987320e-001f, 3.587179e-001f, -8.534158e-001f, 7.022099e-002f, -1.711269e-001f, 1.023425e-001f, 3.649231e-001f, -8.616993e-001f,
  1.421041e-001f, -3.406718e-001f, 1.993140e-001f, 3.609736e-001f, -8.564270e-001f, 7.116576e-002f, -1.747418e-001f, 1.055355e-001f, 3.614199e-001f, -8.570227e-001f,
  1.421041e-001f, -3.406718e-001f, 1.993140e-001f, 3.609736e-001f, -8.564270e-001f, 5.931348e-002f, -1.456395e-001f, 8.795917e-002f, 3.614199e-001f, -8.570227e-001f,
  1.421041e-001f, -3.406718e-001f, 1.993140e-001f, 3.609736e-001f, -8.564270e-001f, 5.733866e-002f, -1.407905e-001f, 8.503060e-002f, 3.614199e-001f, -8.570227e-001f,
  1.421041e-001f, -3.406718e-001f, 1.993140e-001f, 3.609736e-001f, -8.564270e-001f, 5.542959e-002f, -1.361029e-001f, 8.219953e-002f, 3.614199e-001f, -8.570227e-001f,
  1.421041e-001f, -3.406718e-001f, 1.993140e-001f, 3.609736e-001f, -8.564270e-001f, 5.358408e-002f, -1.315714e-001f, 7.946273e-002f, 3.614199e-001f, -8.570227e-001f,
  1.421041e-001f, -3.406718e-001f, 1.993140e-001f, 3.609736e-001f, -8.564270e-001f, 5.180002e-002f, -1.271908e-001f, 7.681704e-002f, 3.614199e-001f, -8.570227e-001f,
  1.421041e-001f, -3.406718e-001f, 1.993140e-001f, 3.609736e-001f, -8.564270e-001f, 5.007535e-002f, -1.229560e-001f, 7.425945e-002f, 3.614199e-001f, -8.570227e-001f,
  1.421041e-001f, -3.406718e-001f, 1.993140e-001f, 3.609736e-001f, -8.564270e-001f, 4.840811e-002f, -1.188622e-001f, 7.178700e-002f, 3.614199e-001f, -8.570227e-001f,
  1.421041e-001f, -3.406718e-001f, 1.993140e-001f, 3.609736e-001f, -8.564270e-001f, 4.679638e-002f, -1.149048e-001f, 6.939688e-002f, 3.614199e-001f, -8.570227e-001f,
  1.421041e-001f, -3.406718e-001f, 1.993140e-001f, 3.609736e-001f, -8.564270e-001f, 4.523831e-002f, -1.110790e-001f, 6.708633e-002f, 3.614199e-001f, -8.570227e-001f,
  1.421041e-001f, -3.406718e-001f, 1.993140e-001f, 3.609736e-001f, -8.564270e-001f, 4.373211e-002f, -1.073807e-001f, 6.485272e-002f, 3.614199e-001f, -8.570227e-001f,
  1.421041e-001f, -3.406718e-001f, 1.993140e-001f, 3.609736e-001f, -8.564270e-001f, 4.227607e-002f, -1.038055e-001f, 6.269347e-002f, 3.614199e-001f, -8.570227e-001f,
  -2.172879e-001f, 2.576359e-001f, -3.788512e-002f, 8.288318e-002f, -5.678790e-001f, 0.000000e+000f, -6.464332e-002f, 6.928269e-002f, 0.000000e+000f, -4.824747e-001f,
  -2.172879e-001f, 2.950094e-001f, -7.577025e-002f, 1.657664e-001f, -6.538790e-001f, 0.000000e+000f, -6.464332e-002f, 6.928269e-002f, 0.000000e+000f, -4.824747e-001f,
  -2.172879e-001f, 3.323829e-001f, -1.136554e-001f, 2.486496e-001f, -7.398790e-001f, 0.000000e+000f, -6.464332e-002f, 6.928269e-002f, 0.000000e+000f, -4.824747e-001f,
  -2.172879e-001f, 3.697564e-001f, -1.515405e-001f, 3.315327e-001f, -8.258790e-001f, 0.000000e+000f, -6.464332e-002f, 6.928269e-002f, 0.000000e+000f, -4.824747e-001f,
  -2.172879e-001f, 4.071300e-001f, -1.894256e-001f, 4.144159e-001f, -9.118790e-001f, 0.000000e+000f, -6.464332e-002f, 6.928269e-002f, 0.000000e+000f, -4.824747e-001f,
  0.000000e+000f, 0.000000e+000f, 2.450000e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.050041e-001f, 2.082100e-001f, 0.000000e+000f, -3.264283e-001f, 0.000000e+000f, -5.863101e-003f, 1.171345e-001f, 0.000000e+000f, -2.774573e-001f,
  0.000000e+000f, -2.050041e-001f, 2.082100e-001f, 0.000000e+000f, -3.264283e-001f, 0.000000e+000f, -4.560826e-002f, 9.943651e-002f, 0.000000e+000f, -3.923435e-001f,
  0.000000e+000f, -2.198408e-001f, 2.222882e-001f, 0.000000e+000f, -3.842580e-001f, 0.000000e+000f, -5.839993e-002f, 9.603216e-002f, 0.000000e+000f, -4.247355e-001f,
  0.000000e+000f, -2.282471e-001f, 2.302563e-001f, 0.000000e+000f, -4.170069e-001f, 0.000000e+000f, -6.723377e-002f, 9.486540e-002f, 0.000000e+000f, -4.447367e-001f,
  0.000000e+000f, -2.327552e-001f, 2.345665e-001f, 0.000000e+000f, -4.346434e-001f, 0.000000e+000f, -7.367643e-002f, 9.506826e-002f, 0.000000e+000f, -4.572163e-001f,
  0.000000e+000f, -2.365035e-001f, 2.381143e-001f, 0.000000e+000f, -4.492355e-001f, 0.000000e+000f, -7.834521e-002f, 9.627966e-002f, 0.000000e+000f, -4.641311e-001f,
  0.000000e+000f, -2.387201e-001f, 2.402481e-001f, 0.000000e+000f, -4.579363e-001f, 0.000000e+000f, -8.321418e-002f, 9.754202e-002f, 0.000000e+000f, -4.713443e-001f,
  0.000000e+000f, -2.399820e-001f, 2.415205e-001f, 0.000000e+000f, -4.630051e-001f, 0.000000e+000f, -8.680532e-002f, 9.952356e-002f, 0.000000e+000f, -4.745635e-001f,
  0.000000e+000f, -2.404515e-001f, 2.421119e-001f, 0.000000e+000f, -4.651267e-001f, 0.000000e+000f, -8.936032e-002f, 1.020786e-001f, 0.000000e+000f, -4.745635e-001f,
  0.000000e+000f, -2.422791e-001f, 2.437970e-001f, 0.000000e+000f, -4.721522e-001f, 0.000000e+000f, -9.459921e-002f, 1.035931e-001f, 0.000000e+000f, -4.820122e-001f,
  0.000000e+000f, -2.424536e-001f, 2.441283e-001f, 0.000000e+000f, -4.731640e-001f, 0.000000e+000f, -9.810614e-002f, 1.059843e-001f, 0.000000e+000f, -4.842437e-001f,
  0.000000e+000f, -2.428542e-001f, 2.446410e-001f, 0.000000e+000f, -4.749903e-001f, 0.000000e+000f, -1.012964e-001f, 1.086252e-001f, 0.000000e+000f, -4.853425e-001f,
  0.000000e+000f, -2.433173e-001f, 2.451963e-001f, 0.000000e+000f, -4.770273e-001f, 0.000000e+000f, -1.042346e-001f, 1.114804e-001f, 0.000000e+000f, -4.855085e-001f,
  0.000000e+000f, -2.432620e-001f, 2.453877e-001f, 0.000000e+000f, -4.772995e-001f, 0.000000e+000f, -1.072528e-001f, 1.144155e-001f, 0.000000e+000f, -4.856746e-001f,
  0.000000e+000f, -2.437294e-001f, 2.459436e-001f, 0.000000e+000f, -4.793460e-001f, 0.000000e+000f, -1.106571e-001f, 1.173209e-001f, 0.000000e+000f, -4.866725e-001f,
  0.000000e+000f, -2.434839e-001f, 2.460524e-001f, 0.000000e+000f, -4.790727e-001f, 0.000000e+000f, -1.137219e-001f, 1.204689e-001f, 0.000000e+000f, -4.865060e-001f,
  0.000000e+000f, -2.430574e-001f, 2.461035e-001f, 0.000000e+000f, -4.783217e-001f, 0.000000e+000f, -1.172430e-001f, 1.235735e-001f, 0.000000e+000f, -4.873388e-001f,
  0.000000e+000f, -2.430172e-001f, 2.464167e-001f, 0.000000e+000f, -4.788678e-001f, 0.000000e+000f, -1.204747e-001f, 1.268991e-001f, 0.000000e+000f, -4.871513e-001f,
  0.000000e+000f, -2.438011e-001f, 2.471384e-001f, 0.000000e+000f, -4.818790e-001f, 0.000000e+000f, -1.220956e-001f, 1.308583e-001f, 0.000000e+000f, -4.824747e-001f,
  0.000000e+000f, -2.438011e-001f, 2.471384e-001f, 0.000000e+000f, -4.818790e-001f, 0.000000e+000f, -1.017613e-001f, 1.090645e-001f, 0.000000e+000f, -4.824747e-001f,
  0.000000e+000f, -2.438011e-001f, 2.471384e-001f, 0.000000e+000f, -4.818790e-001f, 0.000000e+000f, -9.837316e-002f, 1.054333e-001f, 0.000000e+000f, -4.824747e-001f,
  0.000000e+000f, -2.438011e-001f, 2.471384e-001f, 0.000000e+000f, -4.818790e-001f, 0.000000e+000f, -9.509785e-002f, 1.019229e-001f, 0.000000e+000f, -4.824747e-001f,
  0.000000e+000f, -2.438011e-001f, 2.471384e-001f, 0.000000e+000f, -4.818790e-001f, 0.000000e+000f, -9.193160e-002f, 9.852941e-002f, 0.000000e+000f, -4.824747e-001f,
  0.000000e+000f, -2.438011e-001f, 2.471384e-001f, 0.000000e+000f, -4.818790e-001f, 0.000000e+000f, -8.887077e-002f, 9.524891e-002f, 0.000000e+000f, -4.824747e-001f,
  0.000000e+000f, -2.438011e-001f, 2.471384e-001f, 0.000000e+000f, -4.818790e-001f, 0.000000e+000f, -8.591185e-002f, 9.207763e-002f, 0.000000e+000f, -4.824747e-001f,
  0.000000e+000f, -2.438011e-001f, 2.471384e-001f, 0.000000e+000f, -4.818790e-001f, 0.000000e+000f, -8.305144e-002f, 8.901193e-002f, 0.000000e+000f, -4.824747e-001f,
  0.000000e+000f, -2.438011e-001f, 2.471384e-001f, 0.000000e+000f, -4.818790e-001f, 0.000000e+000f, -8.028627e-002f, 8.604831e-002f, 0.000000e+000f, -4.824747e-001f,
  0.000000e+000f, -2.438011e-001f, 2.471384e-001f, 0.000000e+000f, -4.818790e-001f, 0.000000e+000f, -7.761317e-002f, 8.318336e-002f, 0.000000e+000f, -4.824747e-001f,
  0.000000e+000f, -2.438011e-001f, 2.471384e-001f, 0.000000e+000f, -4.818790e-001f, 0.000000e+000f, -7.502907e-002f, 8.041380e-002f, 0.000000e+000f, -4.824747e-001f,
  0.000000e+000f, -2.438011e-001f, 2.471384e-001f, 0.000000e+000f, -4.818790e-001f, 0.000000e+000f, -7.253100e-002f, 7.773645e-002f, 0.000000e+000f, -4.824747e-001f,
  -2.438011e-001f, 2.890722e-001f, -4.250781e-002f, 8.288318e-002f, -5.678790e-001f, 0.000000e+000f, -7.253100e-002f, 7.773645e-002f, 0.000000e+000f, -4.824747e-001f,
  -2.438011e-001f, 3.310060e-001f, -8.501562e-002f, 1.657664e-001f, -6.538790e-001f, 0.000000e+000f, -7.253100e-002f, 7.773645e-002f, 0.000000e+000f, -4.824747e-001f,
  -2.438011e-001f, 3.729398e-001f, -1.275234e-001f, 2.486496e-001f, -7.398790e-001f, 0.000000e+000f, -7.253100e-002f, 7.773645e-002f, 0.000000e+000f, -4.824747e-001f,
  -2.438011e-001f, 4.148736e-001f, -1.700312e-001f, 3.315327e-001f, -8.258790e-001f, 0.000000e+000f, -7.253100e-002f, 7.773645e-002f, 0.000000e+000f, -4.824747e-001f,
  -2.438011e-001f, 4.568073e-001f, -2.125390e-001f, 4.144159e-001f, -9.118790e-001f, 0.000000e+000f, -7.253100e-002f, 7.773645e-002f, 0.000000e+000f, -4.824747e-001f,
  0.000000e+000f, -1.665490e-001f, 2.153775e-001f, 0.000000e+000f, -3.745480e-001f,
  1.393601e-001f, -3.217569e-001f, 1.830357e-001f, 2.445261e-001f, -7.009763e-001f, 3.985687e-003f, -8.478124e-002f, 1.029720e-001f, 2.078421e-001f, -6.520053e-001f,
  1.393601e-001f, -3.217569e-001f, 1.830357e-001f, 2.445261e-001f, -7.009763e-001f, 3.100412e-002f, -1.076900e-001f, 8.741382e-002f, 2.939030e-001f, -7.668915e-001f,
  1.494459e-001f, -3.443699e-001f, 1.954118e-001f, 2.878462e-001f, -7.588060e-001f, 3.969979e-002f, -1.166208e-001f, 8.442108e-002f, 3.181677e-001f, -7.992836e-001f,
  1.551605e-001f, -3.571765e-001f, 2.024164e-001f, 3.123782e-001f, -7.915549e-001f, 4.570496e-002f, -1.235934e-001f, 8.339540e-002f, 3.331505e-001f, -8.192847e-001f,
  1.582250e-001f, -3.640695e-001f, 2.062055e-001f, 3.255896e-001f, -8.091914e-001f, 5.008462e-002f, -1.293950e-001f, 8.357372e-002f, 3.424989e-001f, -8.317644e-001f,
  1.607731e-001f, -3.697764e-001f, 2.093243e-001f, 3.365205e-001f, -8.237835e-001f, 5.325842e-002f, -1.343227e-001f, 8.463866e-002f, 3.476788e-001f, -8.386791e-001f,
  1.622799e-001f, -3.731755e-001f, 2.112001e-001f, 3.430383e-001f, -8.324843e-001f, 5.656831e-002f, -1.394612e-001f, 8.574839e-002f, 3.530821e-001f, -8.458923e-001f,
  1.631378e-001f, -3.751499e-001f, 2.123187e-001f, 3.468353e-001f, -8.375531e-001f, 5.900953e-002f, -1.439651e-001f, 8.749034e-002f, 3.554936e-001f, -8.491115e-001f,
  1.634569e-001f, -3.759646e-001f, 2.128386e-001f, 3.484246e-001f, -8.396748e-001f, 6.074640e-002f, -1.479481e-001f, 8.973643e-002f, 3.554936e-001f, -8.491115e-001f,
  1.646993e-001f, -3.787167e-001f, 2.143200e-001f, 3.536874e-001f, -8.467002e-001f, 6.430776e-002f, -1.535831e-001f, 9.106787e-002f, 3.610734e-001f, -8.565602e-001f,
  1.648180e-001f, -3.790954e-001f, 2.146112e-001f, 3.544452e-001f, -8.477120e-001f, 6.669174e-002f, -1.582915e-001f, 9.316992e-002f, 3.627450e-001f, -8.587917e-001f,
  1.650902e-001f, -3.797960e-001f, 2.150619e-001f, 3.558133e-001f, -8.495383e-001f, 6.886047e-002f, -1.628914e-001f, 9.549152e-002f, 3.635681e-001f, -8.598905e-001f,
  1.654051e-001f, -3.805807e-001f, 2.155501e-001f, 3.573393e-001f, -8.515753e-001f, 7.085784e-002f, -1.674153e-001f, 9.800149e-002f, 3.636925e-001f, -8.600565e-001f,
  1.653675e-001f, -3.806622e-001f, 2.157183e-001f, 3.575432e-001f, -8.518475e-001f, 7.290957e-002f, -1.720638e-001f, 1.005817e-001f, 3.638169e-001f, -8.602226e-001f,
  1.656852e-001f, -3.814509e-001f, 2.162070e-001f, 3.590762e-001f, -8.538940e-001f, 7.522381e-002f, -1.770316e-001f, 1.031358e-001f, 3.645644e-001f, -8.612205e-001f,
  1.655183e-001f, -3.813091e-001f, 2.163027e-001f, 3.588714e-001f, -8.536207e-001f, 7.730719e-002f, -1.818657e-001f, 1.059032e-001f, 3.644397e-001f, -8.610540e-001f,
  1.652284e-001f, -3.809689e-001f, 2.163476e-001f, 3.583089e-001f, -8.528697e-001f, 7.970078e-002f, -1.870716e-001f, 1.086325e-001f, 3.650636e-001f, -8.618868e-001f,
  1.652011e-001f, -3.811464e-001f, 2.166229e-001f, 3.587179e-001f, -8.534158e-001f, 8.189773e-002f, -1.921733e-001f, 1.115559e-001f, 3.649231e-001f, -8.616993e-001f,
  1.657339e-001f, -3.823262e-001f, 2.172574e-001f, 3.609736e-001f, -8.564270e-001f, 8.299959e-002f, -1.962896e-001f, 1.150364e-001f, 3.614199e-001f, -8.570227e-001f,
  1.657339e-001f, -3.823262e-001f, 2.172574e-001f, 3.609736e-001f, -8.564270e-001f, 6.917646e-002f, -1.635986e-001f, 9.587773e-002f, 3.614199e-001f, -8.570227e-001f,
  1.657339e-001f, -3.823262e-001f, 2.172574e-001f, 3.609736e-001f, -8.564270e-001f, 6.687325e-002f, -1.581517e-001f, 9.268552e-002f, 3.614199e-001f, -8.570227e-001f,
  1.657339e-001f, -3.823262e-001f, 2.172574e-001f, 3.609736e-001f, -8.564270e-001f, 6.464673e-002f, -1.528861e-001f, 8.959958e-002f, 3.614199e-001f, -8.570227e-001f,
  1.657339e-001f, -3.823262e-001f, 2.172574e-001f, 3.609736e-001f, -8.564270e-001f, 6.249434e-002f, -1.477958e-001f, 8.661640e-002f, 3.614199e-001f, -8.570227e-001f,
  1.657339e-001f, -3.823262e-001f, 2.172574e-001f, 3.609736e-001f, -8.564270e-001f, 6.041361e-002f, -1.428750e-001f, 8.373253e-002f, 3.614199e-001f, -8.570227e-001f,
  1.657339e-001f, -3.823262e-001f, 2.172574e-001f, 3.609736e-001f, -8.564270e-001f, 5.840216e-002f, -1.381180e-001f, 8.094469e-002f, 3.614199e-001f, -8.570227e-001f,
  1.657339e-001f, -3.823262e-001f, 2.172574e-001f, 3.609736e-001f, -8.564270e-001f, 5.645768e-002f, -1.335194e-001f, 7.824966e-002f, 3.614199e-001f, -8.570227e-001f,
  1.657339e-001f, -3.823262e-001f, 2.172574e-001f, 3.609736e-001f, -8.564270e-001f, 5.457794e-002f, -1.290739e-001f, 7.564437e-002f, 3.614199e-001f, -8.570227e-001f,
  1.657339e-001f, -3.823262e-001f, 2.172574e-001f, 3.609736e-001f, -8.564270e-001f, 5.276079e-002f, -1.247765e-001f, 7.312581e-002f, 3.614199e-001f, -8.570227e-001f,
  1.657339e-001f, -3.823262e-001f, 2.172574e-001f, 3.609736e-001f, -8.564270e-001f, 5.100413e-002f, -1.206221e-001f, 7.069111e-002f, 3.614199e-001f, -8.570227e-001f,
  1.657339e-001f, -3.823262e-001f, 2.172574e-001f, 3.609736e-001f, -8.564270e-001f, 4.930597e-002f, -1.166060e-001f, 6.833748e-002f, 3.614199e-001f, -8.570227e-001f,
  -1.536226e-001f, 1.821486e-001f, -2.678478e-002f, 8.288318e-002f, -5.678790e-001f, 0.000000e+000f, -4.570283e-002f, 4.898286e-002f, 0.000000e+000f, -4.824747e-001f,
  -1.536226e-001f, 2.085716e-001f, -5.356957e-002f, 1.657664e-001f, -6.538790e-001f, 0.000000e+000f, -4.570283e-002f, 4.898286e-002f, 0.000000e+000f, -4.824747e-001f,
  -1.536226e-001f, 2.349947e-001f, -8.035435e-002f, 2.486496e-001f, -7.398790e-001f, 0.000000e+000f, -4.570283e-002f, 4.898286e-002f, 0.000000e+000f, -4.824747e-001f,
  -1.536226e-001f, 2.614178e-001f, -1.071391e-001f, 3.315327e-001f, -8.258790e-001f, 0.000000e+000f, -4.570283e-002f, 4.898286e-002f, 0.000000e+000f, -4.824747e-001f,
  -1.536226e-001f, 2.878409e-001f, -1.339239e-001f, 4.144159e-001f, -9.118790e-001f, 0.000000e+000f, -4.570283e-002f, 4.898286e-002f, 0.000000e+000f, -4.824747e-001f,
  0.000000e+000f, -1.508032e-001f, 1.895891e-001f, 0.000000e+000f, -3.745480e-001f,
  1.261848e-001f, -2.867971e-001f, 1.611198e-001f, 2.445261e-001f, -7.009763e-001f, 3.608875e-003f, -7.663606e-002f, 9.064252e-002f, 2.078421e-001f, -6.520053e-001f,
  1.261848e-001f, -2.867971e-001f, 1.611198e-001f, 2.445261e-001f, -7.009763e-001f, 2.807295e-002f, -9.649867e-002f, 7.694725e-002f, 2.939030e-001f, -7.668915e-001f,
  1.353171e-001f, -3.069437e-001f, 1.720140e-001f, 2.878462e-001f, -7.588060e-001f, 3.594652e-002f, -1.043018e-001f, 7.431286e-002f, 3.181677e-001f, -7.992836e-001f,
  1.404914e-001f, -3.183533e-001f, 1.781799e-001f, 3.123782e-001f, -7.915549e-001f, 4.138396e-002f, -1.104196e-001f, 7.340998e-002f, 3.331505e-001f, -8.192847e-001f,
  1.432662e-001f, -3.244948e-001f, 1.815153e-001f, 3.255896e-001f, -8.091914e-001f, 4.534956e-002f, -1.155300e-001f, 7.356696e-002f, 3.424989e-001f, -8.317644e-001f,
  1.455734e-001f, -3.295791e-001f, 1.842607e-001f, 3.365205e-001f, -8.237835e-001f, 4.822330e-002f, -1.198885e-001f, 7.450438e-002f, 3.476788e-001f, -8.386791e-001f,
  1.469378e-001f, -3.326078e-001f, 1.859119e-001f, 3.430383e-001f, -8.324843e-001f, 5.122027e-002f, -1.244333e-001f, 7.548124e-002f, 3.530821e-001f, -8.458923e-001f,
  1.477145e-001f, -3.343675e-001f, 1.868966e-001f, 3.468353e-001f, -8.375531e-001f, 5.343070e-002f, -1.284319e-001f, 7.701461e-002f, 3.554936e-001f, -8.491115e-001f,
  1.480035e-001f, -3.350948e-001f, 1.873542e-001f, 3.484246e-001f, -8.396748e-001f, 5.500336e-002f, -1.319817e-001f, 7.899176e-002f, 3.554936e-001f, -8.491115e-001f,
  1.491284e-001f, -3.375463e-001f, 1.886582e-001f, 3.536874e-001f, -8.467002e-001f, 5.822802e-002f, -1.369680e-001f, 8.016379e-002f, 3.610734e-001f, -8.565602e-001f,
  1.492359e-001f, -3.378853e-001f, 1.889146e-001f, 3.544452e-001f, -8.477120e-001f, 6.038662e-002f, -1.411536e-001f, 8.201415e-002f, 3.627450e-001f, -8.587917e-001f,
  1.494824e-001f, -3.385108e-001f, 1.893113e-001f, 3.558133e-001f, -8.495383e-001f, 6.235032e-002f, -1.452479e-001f, 8.405777e-002f, 3.635681e-001f, -8.598905e-001f,
  1.497675e-001f, -3.392110e-001f, 1.897410e-001f, 3.573393e-001f, -8.515753e-001f, 6.415885e-002f, -1.492790e-001f, 8.626720e-002f, 3.636925e-001f, -8.600565e-001f,
  1.497335e-001f, -3.392861e-001f, 1.898891e-001f, 3.575432e-001f, -8.518475e-001f, 6.601660e-002f, -1.534212e-001f, 8.853848e-002f, 3.638169e-001f, -8.602226e-001f,
  1.500211e-001f, -3.399899e-001f, 1.903193e-001f, 3.590762e-001f, -8.538940e-001f, 6.811205e-002f, -1.578439e-001f, 9.078679e-002f, 3.645644e-001f, -8.612205e-001f,
  1.498700e-001f, -3.398669e-001f, 1.904035e-001f, 3.588714e-001f, -8.536207e-001f, 6.999848e-002f, -1.621532e-001f, 9.322279e-002f, 3.644397e-001f, -8.610540e-001f,
  1.496075e-001f, -3.395683e-001f, 1.904430e-001f, 3.583089e-001f, -8.528697e-001f, 7.216577e-002f, -1.667889e-001f, 9.562528e-002f, 3.650636e-001f, -8.618868e-001f,
  1.495827e-001f, -3.397299e-001f, 1.906854e-001f, 3.587179e-001f, -8.534158e-001f, 7.415501e-002f, -1.713367e-001f, 9.819870e-002f, 3.649231e-001f, -8.616993e-001f,
  1.500652e-001f, -3.407808e-001f, 1.912439e-001f, 3.609736e-001f, -8.564270e-001f, 7.515271e-002f, -1.750280e-001f, 1.012625e-001f, 3.614199e-001f, -8.570227e-001f,
  1.500652e-001f, -3.407808e-001f, 1.912439e-001f, 3.609736e-001f, -8.564270e-001f, 6.263643e-002f, -1.458780e-001f, 8.439774e-002f, 3.614199e-001f, -8.570227e-001f,
  1.500652e-001f, -3.407808e-001f, 1.912439e-001f, 3.609736e-001f, -8.564270e-001f, 6.055097e-002f, -1.410210e-001f, 8.158774e-002f, 3.614199e-001f, -8.570227e-001f,
  1.500652e-001f, -3.407808e-001f, 1.912439e-001f, 3.609736e-001f, -8.564270e-001f, 5.853495e-002f, -1.363258e-001f, 7.887131e-002f, 3.614199e-001f, -8.570227e-001f,
  1.500652e-001f, -3.407808e-001f, 1.912439e-001f, 3.609736e-001f, -8.564270e-001f, 5.658605e-002f, -1.317869e-001f, 7.624531e-002f, 3.614199e-001f, -8.570227e-001f,
  1.500652e-001f, -3.407808e-001f, 1.912439e-001f, 3.609736e-001f, -8.564270e-001f, 5.470203e-002f, -1.273991e-001f, 7.370675e-002f, 3.614199e-001f, -8.570227e-001f,
  1.500652e-001f, -3.407808e-001f, 1.912439e-001f, 3.609736e-001f, -8.564270e-001f, 5.288075e-002f, -1.231574e-001f, 7.125271e-002f, 3.614199e-001f, -8.570227e-001f,
  1.500652e-001f, -3.407808e-001f, 1.912439e-001f, 3.609736e-001f, -8.564270e-001f, 5.112010e-002f, -1.190569e-001f, 6.888038e-002f, 3.614199e-001f, -8.570227e-001f,
  1.500652e-001f, -3.407808e-001f, 1.912439e-001f, 3.609736e-001f, -8.564270e-001f, 4.941807e-002f, -1.150929e-001f, 6.658703e-002f, 3.614199e-001f, -8.570227e-001f,
  1.500652e-001f, -3.407808e-001f, 1.912439e-001f, 3.609736e-001f, -8.564270e-001f, 4.777272e-002f, -1.112609e-001f, 6.437003e-002f, 3.614199e-001f, -8.570227e-001f,
  1.500652e-001f, -3.407808e-001f, 1.912439e-001f, 3.609736e-001f, -8.564270e-001f, 4.618214e-002f, -1.075565e-001f, 6.222686e-002f, 3.614199e-001f, -8.570227e-001f,
  1.500652e-001f, -3.407808e-001f, 1.912439e-001f, 3.609736e-001f, -8.564270e-001f, 4.464452e-002f, -1.039755e-001f, 6.015503e-002f, 3.614199e-001f, -8.570227e-001f,
  -1.369163e-001f, 1.623401e-001f, -2.387196e-002f, 8.288318e-002f, -5.678790e-001f, 0.000000e+000f, -4.073269e-002f, 4.365602e-002f, 0.000000e+000f, -4.824747e-001f,
  -1.369163e-001f, 1.858897e-001f, -4.774393e-002f, 1.657664e-001f, -6.538790e-001f, 0.000000e+000f, -4.073269e-002f, 4.365602e-002f, 0.000000e+000f, -4.824747e-001f,
  -1.369163e-001f, 2.094393e-001f, -7.161589e-002f, 2.486496e-001f, -7.398790e-001f, 0.000000e+000f, -4.073269e-002f, 4.365602e-002f, 0.000000e+000f, -4.824747e-001f,
  -1.369163e-001f, 2.329889e-001f, -9.548785e-002f, 3.315327e-001f, -8.258790e-001f, 0.000000e+000f, -4.073269e-002f, 4.365602e-002f, 0.000000e+000f, -4.824747e-001f,
  -1.369163e-001f, 2.565385e-001f, -1.193598e-001f, 4.144159e-001f, -9.118790e-001f, 0.000000e+000f, -4.073269e-002f, 4.365602e-002f, 0.000000e+000f, -4.824747e-001f,
  0.000000e+000f, -1.433916e-001f, 1.779595e-001f, 0.000000e+000f, -3.745480e-001f,
  1.199831e-001f, -2.707673e-001f, 1.512365e-001f, 2.445261e-001f, -7.009763e-001f, 9.790190e-003f, -7.771277e-002f, 8.136781e-002f, 2.317809e-001f, -6.839622e-001f,
  1.243930e-001f, -2.804197e-001f, 1.564234e-001f, 2.665131e-001f, -7.303276e-001f, 3.078312e-002f, -9.503002e-002f, 7.052514e-002f, 3.078831e-001f, -7.855542e-001f,
  1.318986e-001f, -2.968593e-001f, 1.652656e-001f, 3.039639e-001f, -7.803223e-001f, 3.731876e-002f, -1.020767e-001f, 6.920392e-002f, 3.273383e-001f, -8.115258e-001f,
  1.357794e-001f, -3.053705e-001f, 1.698512e-001f, 3.233562e-001f, -8.062099e-001f, 4.249630e-002f, -1.082874e-001f, 6.893713e-002f, 3.411422e-001f, -8.299531e-001f,
  1.384188e-001f, -3.111495e-001f, 1.729579e-001f, 3.365205e-001f, -8.237835e-001f, 4.585323e-002f, -1.132570e-001f, 6.993421e-002f, 3.476788e-001f, -8.386791e-001f,
  1.399089e-001f, -3.144365e-001f, 1.747423e-001f, 3.440153e-001f, -8.337886e-001f, 4.921587e-002f, -1.183532e-001f, 7.107962e-002f, 3.539240e-001f, -8.470162e-001f,
  1.405280e-001f, -3.158682e-001f, 1.755656e-001f, 3.472981e-001f, -8.381710e-001f, 5.131432e-002f, -1.225635e-001f, 7.307273e-002f, 3.551847e-001f, -8.486991e-001f,
  1.413914e-001f, -3.177909e-001f, 1.766218e-001f, 3.516869e-001f, -8.440298e-001f, 5.410573e-002f, -1.274282e-001f, 7.481064e-002f, 3.587456e-001f, -8.534527e-001f,
  1.419157e-001f, -3.189973e-001f, 1.773115e-001f, 3.544517e-001f, -8.477206e-001f, 5.706807e-002f, -1.325448e-001f, 7.659796e-002f, 3.626422e-001f, -8.586544e-001f,
  1.421357e-001f, -3.195823e-001f, 1.776987e-001f, 3.558133e-001f, -8.495383e-001f, 5.928593e-002f, -1.371535e-001f, 7.890158e-002f, 3.635681e-001f, -8.598905e-001f,
  1.424066e-001f, -3.202693e-001f, 1.781340e-001f, 3.574047e-001f, -8.516627e-001f, 6.134208e-002f, -1.417212e-001f, 8.140345e-002f, 3.636712e-001f, -8.600280e-001f,
  1.424754e-001f, -3.205663e-001f, 1.783968e-001f, 3.581227e-001f, -8.526212e-001f, 6.356998e-002f, -1.465305e-001f, 8.394056e-002f, 3.641412e-001f, -8.606555e-001f,
  1.426097e-001f, -3.209980e-001f, 1.787257e-001f, 3.591449e-001f, -8.539858e-001f, 6.583529e-002f, -1.514705e-001f, 8.658229e-002f, 3.644912e-001f, -8.611227e-001f,
  1.422939e-001f, -3.206197e-001f, 1.787425e-001f, 3.583714e-001f, -8.529532e-001f, 6.819593e-002f, -1.565948e-001f, 8.930595e-002f, 3.649162e-001f, -8.616901e-001f,
  1.422311e-001f, -3.207400e-001f, 1.789885e-001f, 3.587179e-001f, -8.534158e-001f, 7.051045e-002f, -1.617791e-001f, 9.217509e-002f, 3.649231e-001f, -8.616993e-001f,
  1.426899e-001f, -3.217318e-001f, 1.795128e-001f, 3.609736e-001f, -8.564270e-001f, 6.119341e-002f, -1.415307e-001f, 8.139605e-002f, 3.614199e-001f, -8.570227e-001f,
  1.426899e-001f, -3.217318e-001f, 1.795128e-001f, 3.609736e-001f, -8.564270e-001f, 5.875673e-002f, -1.358951e-001f, 7.815491e-002f, 3.614199e-001f, -8.570227e-001f,
  1.426899e-001f, -3.217318e-001f, 1.795128e-001f, 3.609736e-001f, -8.564270e-001f, 5.641707e-002f, -1.304838e-001f, 7.504283e-002f, 3.614199e-001f, -8.570227e-001f,
  1.426899e-001f, -3.217318e-001f, 1.795128e-001f, 3.609736e-001f, -8.564270e-001f, 5.417058e-002f, -1.252880e-001f, 7.205468e-002f, 3.614199e-001f, -8.570227e-001f,
  1.426899e-001f, -3.217318e-001f, 1.795128e-001f, 3.609736e-001f, -8.564270e-001f, 5.201354e-002f, -1.202991e-001f, 6.918550e-002f, 3.614199e-001f, -8.570227e-001f,
  1.426899e-001f, -3.217318e-001f, 1.795128e-001f, 3.609736e-001f, -8.564270e-001f, 4.994240e-002f, -1.155089e-001f, 6.643058e-002f, 3.614199e-001f, -8.570227e-001f,
  1.426899e-001f, -3.217318e-001f, 1.795128e-001f, 3.609736e-001f, -8.564270e-001f, 4.795372e-002f, -1.109094e-001f, 6.378536e-002f, 3.614199e-001f, -8.570227e-001f,
  1.426899e-001f, -3.217318e-001f, 1.795128e-001f, 3.609736e-001f, -8.564270e-001f, 4.604424e-002f, -1.064931e-001f, 6.124546e-002f, 3.614199e-001f, -8.570227e-001f,
  1.426899e-001f, -3.217318e-001f, 1.795128e-001f, 3.609736e-001f, -8.564270e-001f, 4.421078e-002f, -1.022526e-001f, 5.880671e-002f, 3.614199e-001f, -8.570227e-001f,
  1.426899e-001f, -3.217318e-001f, 1.795128e-001f, 3.609736e-001f, -8.564270e-001f, 4.245034e-002f, -9.818094e-002f, 5.646506e-002f, 3.614199e-001f, -8.570227e-001f,
  -1.292573e-001f, 1.532589e-001f, -2.253659e-002f, 8.288318e-002f, -5.678790e-001f, 0.000000e+000f, -3.845414e-002f, 4.121394e-002f, 0.000000e+000f, -4.824747e-001f,
  -1.292573e-001f, 1.754912e-001f, -4.507317e-002f, 1.657664e-001f, -6.538790e-001f, 0.000000e+000f, -3.845414e-002f, 4.121394e-002f, 0.000000e+000f, -4.824747e-001f,
  -1.292573e-001f, 1.977234e-001f, -6.760976e-002f, 2.486496e-001f, -7.398790e-001f, 0.000000e+000f, -3.845414e-002f, 4.121394e-002f, 0.000000e+000f, -4.824747e-001f,
  -1.292573e-001f, 2.199557e-001f, -9.014635e-002f, 3.315327e-001f, -8.258790e-001f, 0.000000e+000f, -3.845414e-002f, 4.121394e-002f, 0.000000e+000f, -4.824747e-001f,
  0.000000e+000f, -1.362831e-001f, 1.670918e-001f, 0.000000e+000f, -3.745480e-001f,
  1.140351e-001f, -2.556328e-001f, 1.420008e-001f, 2.445261e-001f, -7.009763e-001f, 9.304856e-003f, -7.372061e-002f, 7.639882e-002f, 2.317809e-001f, -6.839622e-001f,
  1.197956e-001f, -2.681572e-001f, 1.486972e-001f, 2.747513e-001f, -7.413251e-001f, 3.053303e-002f, -9.114169e-002f, 6.584729e-002f, 3.121346e-001f, -7.912298e-001f,
  1.262153e-001f, -2.821198e-001f, 1.561660e-001f, 3.084488e-001f, -7.863093e-001f, 3.646102e-002f, -9.757115e-002f, 6.481906e-002f, 3.303595e-001f, -8.155589e-001f,
  1.299073e-001f, -2.901687e-001f, 1.604845e-001f, 3.278793e-001f, -8.122479e-001f, 4.153419e-002f, -1.039194e-001f, 6.497625e-002f, 3.436780e-001f, -8.333383e-001f,
  1.321490e-001f, -2.950406e-001f, 1.630878e-001f, 3.396358e-001f, -8.279422e-001f, 4.466917e-002f, -1.085920e-001f, 6.599252e-002f, 3.498891e-001f, -8.416297e-001f,
  1.334088e-001f, -2.978236e-001f, 1.646063e-001f, 3.463644e-001f, -8.369245e-001f, 4.798334e-002f, -1.139221e-001f, 6.754565e-002f, 3.554034e-001f, -8.489911e-001f,
  1.337530e-001f, -2.986663e-001f, 1.651221e-001f, 3.484246e-001f, -8.396748e-001f, 4.970736e-002f, -1.177264e-001f, 6.961835e-002f, 3.554936e-001f, -8.491115e-001f,
  1.348662e-001f, -3.010665e-001f, 1.663915e-001f, 3.542113e-001f, -8.473997e-001f, 5.311306e-002f, -1.229622e-001f, 7.091827e-002f, 3.618108e-001f, -8.575445e-001f,
  1.349587e-001f, -3.014057e-001f, 1.666683e-001f, 3.550686e-001f, -8.485441e-001f, 5.563422e-002f, -1.280406e-001f, 7.335472e-002f, 3.632489e-001f, -8.594643e-001f,
  1.353246e-001f, -3.022687e-001f, 1.671763e-001f, 3.571700e-001f, -8.513494e-001f, 5.766308e-002f, -1.323845e-001f, 7.563083e-002f, 3.637133e-001f, -8.600842e-001f,
  1.353546e-001f, -3.025054e-001f, 1.674214e-001f, 3.577893e-001f, -8.521761e-001f, 6.003435e-002f, -1.375700e-001f, 7.842402e-002f, 3.639640e-001f, -8.604190e-001f,
  1.355737e-001f, -3.030843e-001f, 1.678018e-001f, 3.592151e-001f, -8.540794e-001f, 6.223934e-002f, -1.422616e-001f, 8.086162e-002f, 3.645480e-001f, -8.611986e-001f,
  1.352399e-001f, -3.026956e-001f, 1.678270e-001f, 3.583714e-001f, -8.529532e-001f, 6.481522e-002f, -1.478590e-001f, 8.385219e-002f, 3.649162e-001f, -8.616901e-001f,
  1.351802e-001f, -3.028107e-001f, 1.680580e-001f, 3.587179e-001f, -8.534158e-001f, 6.701500e-002f, -1.527533e-001f, 8.654612e-002f, 3.649231e-001f, -8.616993e-001f,
  1.356162e-001f, -3.037468e-001f, 1.685503e-001f, 3.609736e-001f, -8.564270e-001f, 5.815984e-002f, -1.336416e-001f, 7.642534e-002f, 3.614199e-001f, -8.570227e-001f,
  1.356162e-001f, -3.037468e-001f, 1.685503e-001f, 3.609736e-001f, -8.564270e-001f, 5.546703e-002f, -1.274540e-001f, 7.288685e-002f, 3.614199e-001f, -8.570227e-001f,
  1.356162e-001f, -3.037468e-001f, 1.685503e-001f, 3.609736e-001f, -8.564270e-001f, 5.325837e-002f, -1.223788e-001f, 6.998454e-002f, 3.614199e-001f, -8.570227e-001f,
  1.356162e-001f, -3.037468e-001f, 1.685503e-001f, 3.609736e-001f, -8.564270e-001f, 5.079251e-002f, -1.167127e-001f, 6.674425e-002f, 3.614199e-001f, -8.570227e-001f,
  1.356162e-001f, -3.037468e-001f, 1.685503e-001f, 3.609736e-001f, -8.564270e-001f, 4.876998e-002f, -1.120653e-001f, 6.408654e-002f, 3.614199e-001f, -8.570227e-001f,
  1.356162e-001f, -3.037468e-001f, 1.685503e-001f, 3.609736e-001f, -8.564270e-001f, 4.651193e-002f, -1.068766e-001f, 6.111933e-002f, 3.614199e-001f, -8.570227e-001f,
  1.356162e-001f, -3.037468e-001f, 1.685503e-001f, 3.609736e-001f, -8.564270e-001f, 4.465985e-002f, -1.026209e-001f, 5.868560e-002f, 3.614199e-001f, -8.570227e-001f,
  1.356162e-001f, -3.037468e-001f, 1.685503e-001f, 3.609736e-001f, -8.564270e-001f, 4.288153e-002f, -9.853458e-002f, 5.634877e-002f, 3.614199e-001f, -8.570227e-001f,
  1.356162e-001f, -3.037468e-001f, 1.685503e-001f, 3.609736e-001f, -8.564270e-001f, 4.089611e-002f, -9.397242e-002f, 5.373982e-002f, 3.614199e-001f, -8.570227e-001f,
  1.356162e-001f, -3.037468e-001f, 1.685503e-001f, 3.609736e-001f, -8.564270e-001f, 4.034592e-002f, -9.270818e-002f, 5.301684e-002f, 3.614199e-001f, -8.570227e-001f,
  -1.220267e-001f, 1.446857e-001f, -2.127591e-002f, 8.288318e-002f, -5.678790e-001f, 0.000000e+000f, -3.630305e-002f, 3.890847e-002f, 0.000000e+000f, -4.824747e-001f,
  -1.220267e-001f, 1.656743e-001f, -4.255182e-002f, 1.657664e-001f, -6.538790e-001f, 0.000000e+000f, -3.630305e-002f, 3.890847e-002f, 0.000000e+000f, -4.824747e-001f,
  -1.220267e-001f, 1.866629e-001f, -6.382773e-002f, 2.486496e-001f, -7.398790e-001f, 0.000000e+000f, -3.630305e-002f, 3.890847e-002f, 0.000000e+000f, -4.824747e-001f,
  0.000000e+000f, -1.328411e-001f, 1.619264e-001f, 0.000000e+000f, -3.745480e-001f,
  1.111550e-001f, -2.483855e-001f, 1.376111e-001f, 2.445261e-001f, -7.009763e-001f, 1.843636e-002f, -7.897809e-002f, 6.887681e-002f, 2.693592e-001f, -7.341270e-001f,
  1.202673e-001f, -2.681398e-001f, 1.481512e-001f, 2.935970e-001f, -7.664831e-001f, 3.260551e-002f, -9.168635e-002f, 6.331451e-002f, 3.211190e-001f, -8.032234e-001f,
  1.257890e-001f, -2.801189e-001f, 1.545487e-001f, 3.233562e-001f, -8.062099e-001f, 3.936952e-002f, -9.944879e-002f, 6.272632e-002f, 3.411422e-001f, -8.299531e-001f,
  1.288115e-001f, -2.866724e-001f, 1.580462e-001f, 3.396358e-001f, -8.279422e-001f, 4.354100e-002f, -1.055395e-001f, 6.395246e-002f, 3.498891e-001f, -8.416297e-001f,
  1.301203e-001f, -2.895645e-001f, 1.596268e-001f, 3.468353e-001f, -8.375531e-001f, 4.706660e-002f, -1.113343e-001f, 6.577753e-002f, 3.554936e-001f, -8.491115e-001f,
  1.309881e-001f, -2.915103e-001f, 1.607093e-001f, 3.516869e-001f, -8.440298e-001f, 5.012476e-002f, -1.169433e-001f, 6.807067e-002f, 3.587456e-001f, -8.534527e-001f,
  1.314699e-001f, -2.926528e-001f, 1.613861e-001f, 3.545523e-001f, -8.478548e-001f, 5.353044e-002f, -1.230017e-001f, 7.039536e-002f, 3.628863e-001f, -8.589803e-001f,
  1.319069e-001f, -2.936959e-001f, 1.620083e-001f, 3.571700e-001f, -8.513494e-001f, 5.620674e-002f, -1.286410e-001f, 7.329281e-002f, 3.637133e-001f, -8.600842e-001f,
  1.319924e-001f, -2.940594e-001f, 1.623243e-001f, 3.581227e-001f, -8.526212e-001f, 5.889265e-002f, -1.344461e-001f, 7.637803e-002f, 3.641412e-001f, -8.606555e-001f,
  1.320191e-001f, -2.943362e-001f, 1.626220e-001f, 3.588714e-001f, -8.536207e-001f, 6.166100e-002f, -1.404808e-001f, 7.962080e-002f, 3.644397e-001f, -8.610540e-001f,
  1.317353e-001f, -2.940970e-001f, 1.627521e-001f, 3.583822e-001f, -8.529676e-001f, 6.468596e-002f, -1.469040e-001f, 8.295569e-002f, 3.652385e-001f, -8.621204e-001f,
  1.321911e-001f, -2.951347e-001f, 1.633398e-001f, 3.609736e-001f, -8.564270e-001f, 5.669095e-002f, -1.298629e-001f, 7.406277e-002f, 3.614199e-001f, -8.570227e-001f,
  1.321911e-001f, -2.951347e-001f, 1.633398e-001f, 3.609736e-001f, -8.564270e-001f, 5.370124e-002f, -1.230143e-001f, 7.015692e-002f, 3.614199e-001f, -8.570227e-001f,
  1.321911e-001f, -2.951347e-001f, 1.633398e-001f, 3.609736e-001f, -8.564270e-001f, 5.086920e-002f, -1.165269e-001f, 6.645706e-002f, 3.614199e-001f, -8.570227e-001f,
  1.321911e-001f, -2.951347e-001f, 1.633398e-001f, 3.609736e-001f, -8.564270e-001f, 4.818651e-002f, -1.103816e-001f, 6.295232e-002f, 3.614199e-001f, -8.570227e-001f,
  1.321911e-001f, -2.951347e-001f, 1.633398e-001f, 3.609736e-001f, -8.564270e-001f, 4.564530e-002f, -1.045604e-001f, 5.963240e-002f, 3.614199e-001f, -8.570227e-001f,
  1.321911e-001f, -2.951347e-001f, 1.633398e-001f, 3.609736e-001f, -8.564270e-001f, 4.323810e-002f, -9.904625e-002f, 5.648757e-002f, 3.614199e-001f, -8.570227e-001f,
  1.321911e-001f, -2.951347e-001f, 1.633398e-001f, 3.609736e-001f, -8.564270e-001f, 4.095786e-002f, -9.382285e-002f, 5.350859e-002f, 3.614199e-001f, -8.570227e-001f,
  1.321911e-001f, -2.951347e-001f, 1.633398e-001f, 3.609736e-001f, -8.564270e-001f, 3.932694e-002f, -9.008688e-002f, 5.137791e-002f, 3.614199e-001f, -8.570227e-001f,
  -1.185646e-001f, 1.405807e-001f, -2.067227e-002f, 8.288318e-002f, -5.678790e-001f, 0.000000e+000f, -3.527305e-002f, 3.780455e-002f, 0.000000e+000f, -4.824747e-001f,
  -1.185646e-001f, 1.609738e-001f, -4.134454e-002f, 1.657664e-001f, -6.538790e-001f, 0.000000e+000f, -3.527305e-002f, 3.780455e-002f, 0.000000e+000f, -4.824747e-001f,
  -1.185646e-001f, 1.813669e-001f, -6.201680e-002f, 2.486496e-001f, -7.398790e-001f, 0.000000e+000f, -3.527305e-002f, 3.780455e-002f, 0.000000e+000f, -4.824747e-001f,
  0.000000e+000f, -1.294731e-001f, 1.569314e-001f, 0.000000e+000f, -3.745480e-001f,
  1.083368e-001f, -2.413435e-001f, 1.333661e-001f, 2.445261e-001f, -7.009763e-001f, 2.410221e-002f, -8.176211e-002f, 6.369268e-002f, 2.939030e-001f, -7.668915e-001f,
  1.206198e-001f, -2.678821e-001f, 1.474875e-001f, 3.123782e-001f, -7.915549e-001f, 3.553046e-002f, -9.319838e-002f, 6.076472e-002f, 3.331505e-001f, -8.192847e-001f,
  1.249830e-001f, -2.773233e-001f, 1.525208e-001f, 3.365205e-001f, -8.237835e-001f, 4.140243e-002f, -1.010630e-001f, 6.167061e-002f, 3.476788e-001f, -8.386791e-001f,
  1.268212e-001f, -2.813515e-001f, 1.547026e-001f, 3.468353e-001f, -8.375531e-001f, 4.587327e-002f, -1.081963e-001f, 6.374844e-002f, 3.554936e-001f, -8.491115e-001f,
  1.280352e-001f, -2.840259e-001f, 1.561608e-001f, 3.536874e-001f, -8.467002e-001f, 4.999204e-002f, -1.153392e-001f, 6.635515e-002f, 3.610734e-001f, -8.565602e-001f,
  1.283391e-001f, -2.848402e-001f, 1.567014e-001f, 3.558133e-001f, -8.495383e-001f, 5.353126e-002f, -1.222883e-001f, 6.957837e-002f, 3.635681e-001f, -8.598905e-001f,
  1.285546e-001f, -2.854961e-001f, 1.571797e-001f, 3.575432e-001f, -8.518475e-001f, 5.667898e-002f, -1.291635e-001f, 7.328726e-002f, 3.638169e-001f, -8.602226e-001f,
  1.286719e-001f, -2.859895e-001f, 1.576055e-001f, 3.588714e-001f, -8.536207e-001f, 6.009764e-002f, -1.365061e-001f, 7.716467e-002f, 3.644397e-001f, -8.610540e-001f,
  1.284252e-001f, -2.858830e-001f, 1.578388e-001f, 3.587179e-001f, -8.534158e-001f, 6.366626e-002f, -1.442297e-001f, 8.128345e-002f, 3.649231e-001f, -8.616993e-001f,
  1.288395e-001f, -2.867665e-001f, 1.583011e-001f, 3.609736e-001f, -8.564270e-001f, 5.377691e-002f, -1.228182e-001f, 6.985978e-002f, 3.614199e-001f, -8.570227e-001f,
  1.288395e-001f, -2.867665e-001f, 1.583011e-001f, 3.609736e-001f, -8.564270e-001f, 5.025555e-002f, -1.147759e-001f, 6.528531e-002f, 3.614199e-001f, -8.570227e-001f,
  1.288395e-001f, -2.867665e-001f, 1.583011e-001f, 3.609736e-001f, -8.564270e-001f, 4.696478e-002f, -1.072603e-001f, 6.101037e-002f, 3.614199e-001f, -8.570227e-001f,
  1.288395e-001f, -2.867665e-001f, 1.583011e-001f, 3.609736e-001f, -8.564270e-001f, 4.388949e-002f, -1.002368e-001f, 5.701537e-002f, 3.614199e-001f, -8.570227e-001f,
  1.288395e-001f, -2.867665e-001f, 1.583011e-001f, 3.609736e-001f, -8.564270e-001f, 4.101557e-002f, -9.367325e-002f, 5.328195e-002f, 3.614199e-001f, -8.570227e-001f,
  1.288395e-001f, -2.867665e-001f, 1.583011e-001f, 3.609736e-001f, -8.564270e-001f, 3.832984e-002f, -8.753945e-002f, 4.979301e-002f, 3.614199e-001f, -8.570227e-001f,
  -1.152007e-001f, 1.365922e-001f, -2.008575e-002f, 8.288318e-002f, -5.678790e-001f, 0.000000e+000f, -3.427229e-002f, 3.673196e-002f, 0.000000e+000f, -4.824747e-001f,
  -1.152007e-001f, 1.564067e-001f, -4.017151e-002f, 1.657664e-001f, -6.538790e-001f, 0.000000e+000f, -3.427229e-002f, 3.673196e-002f, 0.000000e+000f, -4.824747e-001f,
  0.000000e+000f, -1.261781e-001f, 1.521004e-001f, 0.000000e+000f, -3.745480e-001f,
  1.055797e-001f, -2.345011e-001f, 1.292605e-001f, 2.445261e-001f, -7.009763e-001f, 3.007671e-002f, -8.571352e-002f, 5.961850e-002f, 3.181677e-001f, -7.992836e-001f,
  1.218023e-001f, -2.694575e-001f, 1.478256e-001f, 3.365205e-001f, -8.237835e-001f, 4.034878e-002f, -9.822337e-002f, 5.977215e-002f, 3.476788e-001f, -8.386791e-001f,
  1.238356e-001f, -2.739673e-001f, 1.503074e-001f, 3.484246e-001f, -8.396748e-001f, 4.602171e-002f, -1.080483e-001f, 6.337222e-002f, 3.554936e-001f, -8.491115e-001f,
  1.250730e-001f, -2.767615e-001f, 1.518775e-001f, 3.558133e-001f, -8.495383e-001f, 5.216895e-002f, -1.188300e-001f, 6.743649e-002f, 3.635681e-001f, -8.598905e-001f,
  1.255237e-001f, -2.779757e-001f, 1.526862e-001f, 3.590762e-001f, -8.538940e-001f, 5.698984e-002f, -1.291197e-001f, 7.283494e-002f, 3.645644e-001f, -8.612205e-001f,
  1.251570e-001f, -2.777772e-001f, 1.529799e-001f, 3.587179e-001f, -8.534158e-001f, 6.204603e-002f, -1.401475e-001f, 7.878124e-002f, 3.649231e-001f, -8.616993e-001f,
  1.255607e-001f, -2.786355e-001f, 1.534280e-001f, 3.609736e-001f, -8.564270e-001f, 5.066343e-002f, -1.153713e-001f, 6.545488e-002f, 3.614199e-001f, -8.570227e-001f,
  1.255607e-001f, -2.786355e-001f, 1.534280e-001f, 3.609736e-001f, -8.564270e-001f, 4.576958e-002f, -1.042270e-001f, 5.913224e-002f, 3.614199e-001f, -8.570227e-001f,
  1.255607e-001f, -2.786355e-001f, 1.534280e-001f, 3.609736e-001f, -8.564270e-001f, 4.134845e-002f, -9.415915e-002f, 5.342035e-002f, 3.614199e-001f, -8.570227e-001f,
  1.255607e-001f, -2.786355e-001f, 1.534280e-001f, 3.609736e-001f, -8.564270e-001f, 3.735439e-002f, -8.506382e-002f, 4.826019e-002f, 3.614199e-001f, -8.570227e-001f,
  -1.119322e-001f, 1.327168e-001f, -1.951588e-002f, 8.288318e-002f, -5.678790e-001f, 0.000000e+000f, -3.329991e-002f, 3.568980e-002f, 0.000000e+000f, -4.824747e-001f,
  0.000000e+000f, -1.229555e-001f, 1.474277e-001f, 0.000000e+000f, -3.745480e-001f,
  1.028832e-001f, -2.278525e-001f, 1.252895e-001f, 2.445261e-001f, -7.009763e-001f, 3.931826e-002f, -9.546273e-002f, 5.793588e-002f, 3.476788e-001f, -8.386791e-001f,
  1.218786e-001f, -2.689118e-001f, 1.472117e-001f, 3.558133e-001f, -8.495383e-001f, 5.083654e-002f, -1.154693e-001f, 6.536476e-002f, 3.635681e-001f, -8.598905e-001f,
  1.219604e-001f, -2.699011e-001f, 1.482802e-001f, 3.587179e-001f, -8.534158e-001f, 6.046135e-002f, -1.361806e-001f, 7.636099e-002f, 3.649231e-001f, -8.616993e-001f,
  1.223538e-001f, -2.707350e-001f, 1.487145e-001f, 3.609736e-001f, -8.564270e-001f, 4.460061e-002f, -1.012792e-001f, 5.731563e-002f, 3.614199e-001f, -8.570227e-001f,
  1.223538e-001f, -2.707350e-001f, 1.487145e-001f, 3.609736e-001f, -8.564270e-001f, 3.640035e-002f, -8.265798e-002f, 4.677759e-002f, 3.614199e-001f, -8.570227e-001f,
  // Total number of coefficients: 3485
  // Maximum number of elevation coefficients: 5
	
	// Lite coefficients
	// Headphones
	// 48000 Hz sample rate
  // Generated by HRTFConv V5.90d on Mon Feb 08 11:13:30 1999
  0.000000e+000f, -6.820540e-002f, 1.041731e-001f, 0.000000e+000f, -3.836635e-001f,
  5.794630e-002f, -1.472803e-001f, 8.977177e-002f, 2.597841e-001f, -7.222208e-001f, 5.862823e-003f, -3.951597e-002f, 4.667779e-002f, 2.475095e-001f, -7.062242e-001f,
  6.065008e-002f, -1.539729e-001f, 9.368628e-002f, 2.888176e-001f, -7.600579e-001f, 1.586215e-002f, -5.081264e-002f, 4.060548e-002f, 3.245487e-001f, -8.066236e-001f,
  6.364925e-002f, -1.613989e-001f, 9.803194e-002f, 3.210356e-001f, -8.020452e-001f, 1.867163e-002f, -5.476832e-002f, 4.009326e-002f, 3.418850e-001f, -8.292167e-001f,
  6.536634e-002f, -1.656591e-001f, 1.005332e-001f, 3.395292e-001f, -8.261465e-001f, 2.109053e-002f, -5.859033e-002f, 4.028804e-002f, 3.545165e-001f, -8.456784e-001f,
  6.640592e-002f, -1.682313e-001f, 1.020367e-001f, 3.506863e-001f, -8.406868e-001f, 2.260228e-002f, -6.134451e-002f, 4.096804e-002f, 3.603958e-001f, -8.533405e-001f,
  6.698908e-002f, -1.696951e-001f, 1.029120e-001f, 3.570604e-001f, -8.489936e-001f, 2.420901e-002f, -6.445952e-002f, 4.197758e-002f, 3.656095e-001f, -8.601350e-001f,
  6.714835e-002f, -1.701328e-001f, 1.032090e-001f, 3.590102e-001f, -8.515348e-001f, 2.507270e-002f, -6.662689e-002f, 4.327310e-002f, 3.656947e-001f, -8.602461e-001f,
  6.766279e-002f, -1.713968e-001f, 1.039395e-001f, 3.644829e-001f, -8.586669e-001f, 2.671449e-002f, -6.969416e-002f, 4.412794e-002f, 3.716599e-001f, -8.680202e-001f,
  6.770559e-002f, -1.715663e-001f, 1.040986e-001f, 3.652931e-001f, -8.597227e-001f, 2.796275e-002f, -7.260280e-002f, 4.565852e-002f, 3.730168e-001f, -8.697885e-001f,
  6.787459e-002f, -1.720156e-001f, 1.043906e-001f, 3.672785e-001f, -8.623101e-001f, 2.897441e-002f, -7.508012e-002f, 4.708228e-002f, 3.734549e-001f, -8.703594e-001f,
  6.788852e-002f, -1.721291e-001f, 1.045314e-001f, 3.678634e-001f, -8.630725e-001f, 3.015983e-002f, -7.803320e-002f, 4.882730e-002f, 3.736914e-001f, -8.706677e-001f,
  6.798967e-002f, -1.724267e-001f, 1.047499e-001f, 3.692098e-001f, -8.648271e-001f, 3.125823e-002f, -8.070930e-002f, 5.035232e-002f, 3.742423e-001f, -8.713855e-001f,
  6.783578e-002f, -1.722010e-001f, 1.047642e-001f, 3.684131e-001f, -8.637889e-001f, 3.254469e-002f, -8.389764e-002f, 5.222097e-002f, 3.745895e-001f, -8.718381e-001f,
  6.780833e-002f, -1.722459e-001f, 1.048968e-001f, 3.687404e-001f, -8.642153e-001f, 3.364668e-002f, -8.668157e-002f, 5.390229e-002f, 3.745960e-001f, -8.718465e-001f,
  6.800954e-002f, -1.727383e-001f, 1.051795e-001f, 3.708699e-001f, -8.669905e-001f, 2.923368e-002f, -7.580550e-002f, 4.758535e-002f, 3.712911e-001f, -8.675394e-001f,
  6.800954e-002f, -1.727383e-001f, 1.051795e-001f, 3.708699e-001f, -8.669905e-001f, 2.788016e-002f, -7.229570e-002f, 4.538214e-002f, 3.712911e-001f, -8.675394e-001f,
  6.800954e-002f, -1.727383e-001f, 1.051795e-001f, 3.708699e-001f, -8.669905e-001f, 2.676999e-002f, -6.941693e-002f, 4.357506e-002f, 3.712911e-001f, -8.675394e-001f,
  6.800954e-002f, -1.727383e-001f, 1.051795e-001f, 3.708699e-001f, -8.669905e-001f, 2.553054e-002f, -6.620292e-002f, 4.155753e-002f, 3.712911e-001f, -8.675394e-001f,
  6.800954e-002f, -1.727383e-001f, 1.051795e-001f, 3.708699e-001f, -8.669905e-001f, 2.451393e-002f, -6.356676e-002f, 3.990273e-002f, 3.712911e-001f, -8.675394e-001f,
  6.800954e-002f, -1.727383e-001f, 1.051795e-001f, 3.708699e-001f, -8.669905e-001f, 2.337893e-002f, -6.062362e-002f, 3.805524e-002f, 3.712911e-001f, -8.675394e-001f,
  6.800954e-002f, -1.727383e-001f, 1.051795e-001f, 3.708699e-001f, -8.669905e-001f, 2.244800e-002f, -5.820963e-002f, 3.653990e-002f, 3.712911e-001f, -8.675394e-001f,
  6.800954e-002f, -1.727383e-001f, 1.051795e-001f, 3.708699e-001f, -8.669905e-001f, 2.155413e-002f, -5.589176e-002f, 3.508491e-002f, 3.712911e-001f, -8.675394e-001f,
  6.800954e-002f, -1.727383e-001f, 1.051795e-001f, 3.708699e-001f, -8.669905e-001f, 2.055617e-002f, -5.330397e-002f, 3.346047e-002f, 3.712911e-001f, -8.675394e-001f,
  6.800954e-002f, -1.727383e-001f, 1.051795e-001f, 3.708699e-001f, -8.669905e-001f, 2.027963e-002f, -5.258685e-002f, 3.301032e-002f, 3.712911e-001f, -8.675394e-001f,
  -1.541406e-001f, 1.825903e-001f, -2.684543e-002f, 8.313225e-002f, -5.693271e-001f, 0.000000e+000f, -4.596288e-002f, 4.898469e-002f, 0.000000e+000f, -4.838760e-001f,
  -1.541406e-001f, 2.091025e-001f, -5.369086e-002f, 1.662645e-001f, -6.553271e-001f, 0.000000e+000f, -4.596288e-002f, 4.898469e-002f, 0.000000e+000f, -4.838760e-001f,
  -1.541406e-001f, 2.356146e-001f, -8.053629e-002f, 2.493968e-001f, -7.413271e-001f, 0.000000e+000f, -4.596288e-002f, 4.898469e-002f, 0.000000e+000f, -4.838760e-001f,
  0.000000e+000f, -8.832763e-002f, 1.286840e-001f, 0.000000e+000f, -3.836635e-001f,
  7.504185e-002f, -1.854449e-001f, 1.108942e-001f, 2.597841e-001f, -7.222208e-001f, 7.592496e-003f, -5.063925e-002f, 5.766064e-002f, 2.475095e-001f, -7.062242e-001f,
  7.759087e-002f, -1.915738e-001f, 1.144129e-001f, 2.809158e-001f, -7.497601e-001f, 1.976110e-002f, -6.339020e-002f, 5.040906e-002f, 3.204962e-001f, -8.013423e-001f,
  8.191104e-002f, -2.019677e-001f, 1.203860e-001f, 3.167578e-001f, -7.964704e-001f, 2.357171e-002f, -6.840198e-002f, 4.962253e-002f, 3.390152e-001f, -8.254767e-001f,
  8.413432e-002f, -2.073230e-001f, 1.234691e-001f, 3.352301e-001f, -8.205438e-001f, 2.660075e-002f, -7.276683e-002f, 4.955240e-002f, 3.521140e-001f, -8.425474e-001f,
  8.564192e-002f, -2.109488e-001f, 1.255516e-001f, 3.477323e-001f, -8.368371e-001f, 2.859136e-002f, -7.620331e-002f, 5.033382e-002f, 3.583044e-001f, -8.506149e-001f,
  8.649139e-002f, -2.130057e-001f, 1.267453e-001f, 3.548360e-001f, -8.460947e-001f, 3.058660e-002f, -7.971775e-002f, 5.121902e-002f, 3.642113e-001f, -8.583129e-001f,
  8.684399e-002f, -2.138970e-001f, 1.272954e-001f, 3.579442e-001f, -8.501454e-001f, 3.186538e-002f, -8.257968e-002f, 5.267428e-002f, 3.654028e-001f, -8.598657e-001f,
  8.733532e-002f, -2.150969e-001f, 1.280006e-001f, 3.620963e-001f, -8.555566e-001f, 3.354057e-002f, -8.590521e-002f, 5.396359e-002f, 3.687665e-001f, -8.642494e-001f,
  8.763351e-002f, -2.158472e-001f, 1.284608e-001f, 3.647100e-001f, -8.589629e-001f, 3.531533e-002f, -8.940159e-002f, 5.529044e-002f, 3.724445e-001f, -8.690426e-001f,
  8.775858e-002f, -2.162066e-001f, 1.287189e-001f, 3.659968e-001f, -8.606398e-001f, 3.667051e-002f, -9.252593e-002f, 5.696584e-002f, 3.733180e-001f, -8.701810e-001f,
  8.791259e-002f, -2.166301e-001f, 1.290091e-001f, 3.675002e-001f, -8.625991e-001f, 3.793716e-002f, -9.561510e-002f, 5.877793e-002f, 3.734152e-001f, -8.703077e-001f,
  8.795175e-002f, -2.168073e-001f, 1.291842e-001f, 3.681783e-001f, -8.634828e-001f, 3.930453e-002f, -9.887045e-002f, 6.061831e-002f, 3.738586e-001f, -8.708855e-001f,
  8.802812e-002f, -2.170690e-001f, 1.294033e-001f, 3.691436e-001f, -8.647408e-001f, 4.069654e-002f, -1.022129e-001f, 6.253335e-002f, 3.741887e-001f, -8.713156e-001f,
  8.784895e-002f, -2.168155e-001f, 1.294143e-001f, 3.684131e-001f, -8.637889e-001f, 4.214615e-002f, -1.056803e-001f, 6.450808e-002f, 3.745895e-001f, -8.718381e-001f,
  8.781340e-002f, -2.168761e-001f, 1.295781e-001f, 3.687404e-001f, -8.642153e-001f, 4.357326e-002f, -1.091850e-001f, 6.658500e-002f, 3.745960e-001f, -8.718465e-001f,
  8.807398e-002f, -2.174955e-001f, 1.299273e-001f, 3.708699e-001f, -8.669905e-001f, 3.785831e-002f, -9.550284e-002f, 5.878173e-002f, 3.712911e-001f, -8.675394e-001f,
  8.807398e-002f, -2.174955e-001f, 1.299273e-001f, 3.708699e-001f, -8.669905e-001f, 3.635082e-002f, -9.169998e-002f, 5.644108e-002f, 3.712911e-001f, -8.675394e-001f,
  8.807398e-002f, -2.174955e-001f, 1.299273e-001f, 3.708699e-001f, -8.669905e-001f, 3.490335e-002f, -8.804855e-002f, 5.419363e-002f, 3.712911e-001f, -8.675394e-001f,
  8.807398e-002f, -2.174955e-001f, 1.299273e-001f, 3.708699e-001f, -8.669905e-001f, 3.351352e-002f, -8.454251e-002f, 5.203568e-002f, 3.712911e-001f, -8.675394e-001f,
  8.807398e-002f, -2.174955e-001f, 1.299273e-001f, 3.708699e-001f, -8.669905e-001f, 3.217903e-002f, -8.117608e-002f, 4.996365e-002f, 3.712911e-001f, -8.675394e-001f,
  8.807398e-002f, -2.174955e-001f, 1.299273e-001f, 3.708699e-001f, -8.669905e-001f, 3.089769e-002f, -7.794370e-002f, 4.797413e-002f, 3.712911e-001f, -8.675394e-001f,
  8.807398e-002f, -2.174955e-001f, 1.299273e-001f, 3.708699e-001f, -8.669905e-001f, 2.966736e-002f, -7.484003e-002f, 4.606383e-002f, 3.712911e-001f, -8.675394e-001f,
  8.807398e-002f, -2.174955e-001f, 1.299273e-001f, 3.708699e-001f, -8.669905e-001f, 2.848602e-002f, -7.185995e-002f, 4.422960e-002f, 3.712911e-001f, -8.675394e-001f,
  8.807398e-002f, -2.174955e-001f, 1.299273e-001f, 3.708699e-001f, -8.669905e-001f, 2.735173e-002f, -6.899853e-002f, 4.246840e-002f, 3.712911e-001f, -8.675394e-001f,
  8.807398e-002f, -2.174955e-001f, 1.299273e-001f, 3.708699e-001f, -8.669905e-001f, 2.626260e-002f, -6.625105e-002f, 4.077734e-002f, 3.712911e-001f, -8.675394e-001f,
  -1.729486e-001f, 2.048697e-001f, -3.012107e-002f, 8.313225e-002f, -5.693271e-001f, 0.000000e+000f, -5.157120e-002f, 5.496173e-002f, 0.000000e+000f, -4.838760e-001f,
  -1.729486e-001f, 2.346168e-001f, -6.024214e-002f, 1.662645e-001f, -6.553271e-001f, 0.000000e+000f, -5.157120e-002f, 5.496173e-002f, 0.000000e+000f, -4.838760e-001f,
  -1.729486e-001f, 2.643640e-001f, -9.036321e-002f, 2.493968e-001f, -7.413271e-001f, 0.000000e+000f, -5.157120e-002f, 5.496173e-002f, 0.000000e+000f, -4.838760e-001f,
  -1.729486e-001f, 2.941111e-001f, -1.204843e-001f, 3.325290e-001f, -8.273271e-001f, 0.000000e+000f, -5.157120e-002f, 5.496173e-002f, 0.000000e+000f, -4.838760e-001f,
  0.000000e+000f, -1.139604e-001f, 1.592410e-001f, 0.000000e+000f, -3.836635e-001f,
  9.681910e-002f, -2.334949e-001f, 1.372269e-001f, 2.597841e-001f, -7.222208e-001f, 5.024092e-003f, -6.031207e-002f, 7.446645e-002f, 2.244139e-001f, -6.761253e-001f,
  9.681910e-002f, -2.334949e-001f, 1.372269e-001f, 2.597841e-001f, -7.222208e-001f, 2.243821e-002f, -7.698277e-002f, 6.375911e-002f, 3.071499e-001f, -7.839490e-001f,
  1.032855e-001f, -2.486651e-001f, 1.457988e-001f, 3.013581e-001f, -7.764010e-001f, 2.805050e-002f, -8.342244e-002f, 6.179924e-002f, 3.302940e-001f, -8.141111e-001f,
  1.069306e-001f, -2.572127e-001f, 1.506254e-001f, 3.247808e-001f, -8.069260e-001f, 3.194032e-002f, -8.843137e-002f, 6.120333e-002f, 3.445348e-001f, -8.326700e-001f,
  1.088790e-001f, -2.617975e-001f, 1.532277e-001f, 3.373533e-001f, -8.233109e-001f, 3.479600e-002f, -9.259051e-002f, 6.143920e-002f, 3.533996e-001f, -8.442228e-001f,
  1.104953e-001f, -2.655856e-001f, 1.553648e-001f, 3.477323e-001f, -8.368371e-001f, 3.688862e-002f, -9.612060e-002f, 6.228598e-002f, 3.583044e-001f, -8.506149e-001f,
  1.114496e-001f, -2.678373e-001f, 1.566480e-001f, 3.539105e-001f, -8.448887e-001f, 3.906852e-002f, -9.979742e-002f, 6.316737e-002f, 3.634155e-001f, -8.572758e-001f,
  1.119923e-001f, -2.691427e-001f, 1.574124e-001f, 3.575061e-001f, -8.495745e-001f, 4.070160e-002f, -1.030217e-001f, 6.448403e-002f, 3.656947e-001f, -8.602461e-001f,
  1.121943e-001f, -2.696789e-001f, 1.577673e-001f, 3.590102e-001f, -8.515348e-001f, 4.189251e-002f, -1.058767e-001f, 6.614813e-002f, 3.656947e-001f, -8.602461e-001f,
  1.129793e-001f, -2.714994e-001f, 1.587785e-001f, 3.639876e-001f, -8.580214e-001f, 4.423697e-002f, -1.099000e-001f, 6.719243e-002f, 3.709641e-001f, -8.671133e-001f,
  1.130543e-001f, -2.717463e-001f, 1.589770e-001f, 3.647040e-001f, -8.589550e-001f, 4.584113e-002f, -1.132676e-001f, 6.876590e-002f, 3.725415e-001f, -8.691690e-001f,
  1.132262e-001f, -2.722065e-001f, 1.592843e-001f, 3.659968e-001f, -8.606398e-001f, 4.731235e-002f, -1.165593e-001f, 7.049282e-002f, 3.733180e-001f, -8.701810e-001f,
  1.134250e-001f, -2.727224e-001f, 1.596170e-001f, 3.674383e-001f, -8.625185e-001f, 4.867844e-002f, -1.197987e-001f, 7.235201e-002f, 3.734353e-001f, -8.703339e-001f,
  1.134014e-001f, -2.727714e-001f, 1.597316e-001f, 3.676310e-001f, -8.627695e-001f, 5.008173e-002f, -1.231273e-001f, 7.426317e-002f, 3.735527e-001f, -8.704869e-001f,
  1.136020e-001f, -2.732899e-001f, 1.600645e-001f, 3.690787e-001f, -8.646562e-001f, 5.165345e-002f, -1.266815e-001f, 7.616079e-002f, 3.742577e-001f, -8.714057e-001f,
  1.134968e-001f, -2.731895e-001f, 1.601296e-001f, 3.688853e-001f, -8.644042e-001f, 5.308284e-002f, -1.301439e-001f, 7.820793e-002f, 3.741402e-001f, -8.712524e-001f,
  1.133141e-001f, -2.729559e-001f, 1.601600e-001f, 3.683541e-001f, -8.637119e-001f, 5.471085e-002f, -1.338684e-001f, 8.023364e-002f, 3.747285e-001f, -8.720192e-001f,
  1.132970e-001f, -2.730662e-001f, 1.603474e-001f, 3.687404e-001f, -8.642153e-001f, 5.621828e-002f, -1.375224e-001f, 8.239613e-002f, 3.745960e-001f, -8.718465e-001f,
  1.136332e-001f, -2.738452e-001f, 1.607795e-001f, 3.708699e-001f, -8.669905e-001f, 5.703897e-002f, -1.404916e-001f, 8.494264e-002f, 3.712911e-001f, -8.675394e-001f,
  1.136332e-001f, -2.738452e-001f, 1.607795e-001f, 3.708699e-001f, -8.669905e-001f, 4.753944e-002f, -1.170935e-001f, 7.079590e-002f, 3.712911e-001f, -8.675394e-001f,
  1.136332e-001f, -2.738452e-001f, 1.607795e-001f, 3.708699e-001f, -8.669905e-001f, 4.595663e-002f, -1.131949e-001f, 6.843877e-002f, 3.712911e-001f, -8.675394e-001f,
  1.136332e-001f, -2.738452e-001f, 1.607795e-001f, 3.708699e-001f, -8.669905e-001f, 4.442652e-002f, -1.094261e-001f, 6.616013e-002f, 3.712911e-001f, -8.675394e-001f,
  1.136332e-001f, -2.738452e-001f, 1.607795e-001f, 3.708699e-001f, -8.669905e-001f, 4.294735e-002f, -1.057828e-001f, 6.395735e-002f, 3.712911e-001f, -8.675394e-001f,
  1.136332e-001f, -2.738452e-001f, 1.607795e-001f, 3.708699e-001f, -8.669905e-001f, 4.151744e-002f, -1.022608e-001f, 6.182791e-002f, 3.712911e-001f, -8.675394e-001f,
  1.136332e-001f, -2.738452e-001f, 1.607795e-001f, 3.708699e-001f, -8.669905e-001f, 4.013513e-002f, -9.885606e-002f, 5.976937e-002f, 3.712911e-001f, -8.675394e-001f,
  1.136332e-001f, -2.738452e-001f, 1.607795e-001f, 3.708699e-001f, -8.669905e-001f, 3.879884e-002f, -9.556468e-002f, 5.777937e-002f, 3.712911e-001f, -8.675394e-001f,
  1.136332e-001f, -2.738452e-001f, 1.607795e-001f, 3.708699e-001f, -8.669905e-001f, 3.750705e-002f, -9.238289e-002f, 5.585562e-002f, 3.712911e-001f, -8.675394e-001f,
  1.136332e-001f, -2.738452e-001f, 1.607795e-001f, 3.708699e-001f, -8.669905e-001f, 3.625826e-002f, -8.930703e-002f, 5.399593e-002f, 3.712911e-001f, -8.675394e-001f,
  1.136332e-001f, -2.738452e-001f, 1.607795e-001f, 3.708699e-001f, -8.669905e-001f, 3.505106e-002f, -8.633358e-002f, 5.219815e-002f, 3.712911e-001f, -8.675394e-001f,
  1.136332e-001f, -2.738452e-001f, 1.607795e-001f, 3.708699e-001f, -8.669905e-001f, 3.388404e-002f, -8.345913e-002f, 5.046023e-002f, 3.712911e-001f, -8.675394e-001f,
  -1.940516e-001f, 2.298675e-001f, -3.379639e-002f, 8.313225e-002f, -5.693271e-001f, 0.000000e+000f, -5.786384e-002f, 6.166808e-002f, 0.000000e+000f, -4.838760e-001f,
  -1.940516e-001f, 2.632444e-001f, -6.759279e-002f, 1.662645e-001f, -6.553271e-001f, 0.000000e+000f, -5.786384e-002f, 6.166808e-002f, 0.000000e+000f, -4.838760e-001f,
  -1.940516e-001f, 2.966213e-001f, -1.013892e-001f, 2.493968e-001f, -7.413271e-001f, 0.000000e+000f, -5.786384e-002f, 6.166808e-002f, 0.000000e+000f, -4.838760e-001f,
  -1.940516e-001f, 3.299981e-001f, -1.351856e-001f, 3.325290e-001f, -8.273271e-001f, 0.000000e+000f, -5.786384e-002f, 6.166808e-002f, 0.000000e+000f, -4.838760e-001f,
  -1.940516e-001f, 3.633750e-001f, -1.689820e-001f, 4.156613e-001f, -9.133271e-001f, 0.000000e+000f, -5.786384e-002f, 6.166808e-002f, 0.000000e+000f, -4.838760e-001f,
  0.000000e+000f, -1.465673e-001f, 1.973730e-001f, 0.000000e+000f, -3.836635e-001f,
  1.245214e-001f, -2.939904e-001f, 1.700874e-001f, 2.597841e-001f, -7.222208e-001f, 6.461607e-003f, -7.724123e-002f, 9.229822e-002f, 2.244139e-001f, -6.761253e-001f,
  1.245214e-001f, -2.939904e-001f, 1.700874e-001f, 2.597841e-001f, -7.222208e-001f, 2.885833e-002f, -9.754633e-002f, 7.902690e-002f, 3.071499e-001f, -7.839490e-001f,
  1.328380e-001f, -3.130795e-001f, 1.807118e-001f, 3.013581e-001f, -7.764010e-001f, 3.607643e-002f, -1.054626e-001f, 7.659771e-002f, 3.302940e-001f, -8.141111e-001f,
  1.375260e-001f, -3.238351e-001f, 1.866943e-001f, 3.247808e-001f, -8.069260e-001f, 4.107923e-002f, -1.116511e-001f, 7.585910e-002f, 3.445348e-001f, -8.326700e-001f,
  1.400319e-001f, -3.296047e-001f, 1.899197e-001f, 3.373533e-001f, -8.233109e-001f, 4.475198e-002f, -1.168140e-001f, 7.615146e-002f, 3.533996e-001f, -8.442228e-001f,
  1.421107e-001f, -3.343712e-001f, 1.925686e-001f, 3.477323e-001f, -8.368371e-001f, 4.744335e-002f, -1.212177e-001f, 7.720101e-002f, 3.583044e-001f, -8.506149e-001f,
  1.433380e-001f, -3.372050e-001f, 1.941590e-001f, 3.539105e-001f, -8.448887e-001f, 5.024698e-002f, -1.258044e-001f, 7.829346e-002f, 3.634155e-001f, -8.572758e-001f,
  1.440361e-001f, -3.388486e-001f, 1.951065e-001f, 3.575061e-001f, -8.495745e-001f, 5.234733e-002f, -1.298447e-001f, 7.992541e-002f, 3.656947e-001f, -8.602461e-001f,
  1.442958e-001f, -3.395249e-001f, 1.955464e-001f, 3.590102e-001f, -8.515348e-001f, 5.387899e-002f, -1.334390e-001f, 8.198799e-002f, 3.656947e-001f, -8.602461e-001f,
  1.453054e-001f, -3.418152e-001f, 1.967996e-001f, 3.639876e-001f, -8.580214e-001f, 5.689424e-002f, -1.384606e-001f, 8.328236e-002f, 3.709641e-001f, -8.671133e-001f,
  1.454019e-001f, -3.421279e-001f, 1.970457e-001f, 3.647040e-001f, -8.589550e-001f, 5.895740e-002f, -1.426872e-001f, 8.523262e-002f, 3.725415e-001f, -8.691690e-001f,
  1.456230e-001f, -3.427085e-001f, 1.974265e-001f, 3.659968e-001f, -8.606398e-001f, 6.084957e-002f, -1.468247e-001f, 8.737307e-002f, 3.733180e-001f, -8.701810e-001f,
  1.458787e-001f, -3.433591e-001f, 1.978390e-001f, 3.674383e-001f, -8.625185e-001f, 6.260653e-002f, -1.509019e-001f, 8.967746e-002f, 3.734353e-001f, -8.703339e-001f,
  1.458483e-001f, -3.434236e-001f, 1.979810e-001f, 3.676310e-001f, -8.627695e-001f, 6.441134e-002f, -1.550914e-001f, 9.204626e-002f, 3.735527e-001f, -8.704869e-001f,
  1.461062e-001f, -3.440774e-001f, 1.983937e-001f, 3.690787e-001f, -8.646562e-001f, 6.643276e-002f, -1.595601e-001f, 9.439829e-002f, 3.742577e-001f, -8.714057e-001f,
  1.459710e-001f, -3.439551e-001f, 1.984743e-001f, 3.688853e-001f, -8.644042e-001f, 6.827113e-002f, -1.639199e-001f, 9.693564e-002f, 3.741402e-001f, -8.712524e-001f,
  1.457360e-001f, -3.436666e-001f, 1.985120e-001f, 3.683541e-001f, -8.637119e-001f, 7.036496e-002f, -1.686040e-001f, 9.944643e-002f, 3.747285e-001f, -8.720192e-001f,
  1.457140e-001f, -3.438095e-001f, 1.987443e-001f, 3.687404e-001f, -8.642153e-001f, 7.230371e-002f, -1.732052e-001f, 1.021267e-001f, 3.745960e-001f, -8.718465e-001f,
  1.461464e-001f, -3.447895e-001f, 1.992799e-001f, 3.708699e-001f, -8.669905e-001f, 7.335922e-002f, -1.769704e-001f, 1.052830e-001f, 3.712911e-001f, -8.675394e-001f,
  1.461464e-001f, -3.447895e-001f, 1.992799e-001f, 3.708699e-001f, -8.669905e-001f, 6.114163e-002f, -1.474970e-001f, 8.774872e-002f, 3.712911e-001f, -8.675394e-001f,
  1.461464e-001f, -3.447895e-001f, 1.992799e-001f, 3.708699e-001f, -8.669905e-001f, 5.910594e-002f, -1.425861e-001f, 8.482715e-002f, 3.712911e-001f, -8.675394e-001f,
  1.461464e-001f, -3.447895e-001f, 1.992799e-001f, 3.708699e-001f, -8.669905e-001f, 5.713803e-002f, -1.378387e-001f, 8.200286e-002f, 3.712911e-001f, -8.675394e-001f,
  1.461464e-001f, -3.447895e-001f, 1.992799e-001f, 3.708699e-001f, -8.669905e-001f, 5.523564e-002f, -1.332495e-001f, 7.927261e-002f, 3.712911e-001f, -8.675394e-001f,
  1.461464e-001f, -3.447895e-001f, 1.992799e-001f, 3.708699e-001f, -8.669905e-001f, 5.339659e-002f, -1.288130e-001f, 7.663325e-002f, 3.712911e-001f, -8.675394e-001f,
  1.461464e-001f, -3.447895e-001f, 1.992799e-001f, 3.708699e-001f, -8.669905e-001f, 5.161877e-002f, -1.245242e-001f, 7.408177e-002f, 3.712911e-001f, -8.675394e-001f,
  1.461464e-001f, -3.447895e-001f, 1.992799e-001f, 3.708699e-001f, -8.669905e-001f, 4.990014e-002f, -1.203782e-001f, 7.161525e-002f, 3.712911e-001f, -8.675394e-001f,
  1.461464e-001f, -3.447895e-001f, 1.992799e-001f, 3.708699e-001f, -8.669905e-001f, 4.823873e-002f, -1.163702e-001f, 6.923084e-002f, 3.712911e-001f, -8.675394e-001f,
  1.461464e-001f, -3.447895e-001f, 1.992799e-001f, 3.708699e-001f, -8.669905e-001f, 4.663264e-002f, -1.124957e-001f, 6.692582e-002f, 3.712911e-001f, -8.675394e-001f,
  1.461464e-001f, -3.447895e-001f, 1.992799e-001f, 3.708699e-001f, -8.669905e-001f, 4.508002e-002f, -1.087502e-001f, 6.469755e-002f, 3.712911e-001f, -8.675394e-001f,
  1.461464e-001f, -3.447895e-001f, 1.992799e-001f, 3.708699e-001f, -8.669905e-001f, 4.357910e-002f, -1.051294e-001f, 6.254347e-002f, 3.712911e-001f, -8.675394e-001f,
  -2.177294e-001f, 2.579156e-001f, -3.792018e-002f, 8.313225e-002f, -5.693271e-001f, 0.000000e+000f, -6.492430e-002f, 6.919272e-002f, 0.000000e+000f, -4.838760e-001f,
  -2.177294e-001f, 2.953651e-001f, -7.584036e-002f, 1.662645e-001f, -6.553271e-001f, 0.000000e+000f, -6.492430e-002f, 6.919272e-002f, 0.000000e+000f, -4.838760e-001f,
  -2.177294e-001f, 3.328145e-001f, -1.137605e-001f, 2.493968e-001f, -7.413271e-001f, 0.000000e+000f, -6.492430e-002f, 6.919272e-002f, 0.000000e+000f, -4.838760e-001f,
  -2.177294e-001f, 3.702640e-001f, -1.516807e-001f, 3.325290e-001f, -8.273271e-001f, 0.000000e+000f, -6.492430e-002f, 6.919272e-002f, 0.000000e+000f, -4.838760e-001f,
  -2.177294e-001f, 4.077135e-001f, -1.896009e-001f, 4.156613e-001f, -9.133271e-001f, 0.000000e+000f, -6.492430e-002f, 6.919272e-002f, 0.000000e+000f, -4.838760e-001f,
  0.000000e+000f, 0.000000e+000f, 2.450000e-001f, 0.000000e+000f, 0.000000e+000f,
  0.000000e+000f, -2.081484e-001f, 2.111303e-001f, 0.000000e+000f, -3.385573e-001f, 0.000000e+000f, -1.080114e-002f, 1.145702e-001f, 0.000000e+000f, -2.924618e-001f,
  0.000000e+000f, -2.081484e-001f, 2.111303e-001f, 0.000000e+000f, -3.385573e-001f, 0.000000e+000f, -4.823921e-002f, 9.809647e-002f, 0.000000e+000f, -4.002855e-001f,
  0.000000e+000f, -2.220503e-001f, 2.243184e-001f, 0.000000e+000f, -3.927375e-001f, 0.000000e+000f, -6.030489e-002f, 9.508111e-002f, 0.000000e+000f, -4.304476e-001f,
  0.000000e+000f, -2.298868e-001f, 2.317445e-001f, 0.000000e+000f, -4.232625e-001f, 0.000000e+000f, -6.866751e-002f, 9.416427e-002f, 0.000000e+000f, -4.490065e-001f,
  0.000000e+000f, -2.340755e-001f, 2.357482e-001f, 0.000000e+000f, -4.396474e-001f, 0.000000e+000f, -7.480684e-002f, 9.452717e-002f, 0.000000e+000f, -4.605593e-001f,
  0.000000e+000f, -2.375505e-001f, 2.390363e-001f, 0.000000e+000f, -4.531736e-001f, 0.000000e+000f, -7.930570e-002f, 9.582999e-002f, 0.000000e+000f, -4.669514e-001f,
  0.000000e+000f, -2.396020e-001f, 2.410106e-001f, 0.000000e+000f, -4.612252e-001f, 0.000000e+000f, -8.399220e-002f, 9.718605e-002f, 0.000000e+000f, -4.736123e-001f,
  0.000000e+000f, -2.407689e-001f, 2.421866e-001f, 0.000000e+000f, -4.659110e-001f, 0.000000e+000f, -8.750312e-002f, 9.921179e-002f, 0.000000e+000f, -4.765826e-001f,
  0.000000e+000f, -2.412030e-001f, 2.427327e-001f, 0.000000e+000f, -4.678713e-001f, 0.000000e+000f, -9.006342e-002f, 1.017721e-001f, 0.000000e+000f, -4.765826e-001f,
  0.000000e+000f, -2.428906e-001f, 2.442883e-001f, 0.000000e+000f, -4.743579e-001f, 0.000000e+000f, -9.510369e-002f, 1.033788e-001f, 0.000000e+000f, -4.834498e-001f,
  0.000000e+000f, -2.430519e-001f, 2.445938e-001f, 0.000000e+000f, -4.752915e-001f, 0.000000e+000f, -9.855243e-002f, 1.057997e-001f, 0.000000e+000f, -4.855055e-001f,
  0.000000e+000f, -2.434216e-001f, 2.450665e-001f, 0.000000e+000f, -4.769763e-001f, 0.000000e+000f, -1.017154e-001f, 1.084566e-001f, 0.000000e+000f, -4.865175e-001f,
  0.000000e+000f, -2.438490e-001f, 2.455785e-001f, 0.000000e+000f, -4.788550e-001f, 0.000000e+000f, -1.046523e-001f, 1.113171e-001f, 0.000000e+000f, -4.866704e-001f,
  0.000000e+000f, -2.437982e-001f, 2.457548e-001f, 0.000000e+000f, -4.791060e-001f, 0.000000e+000f, -1.076692e-001f, 1.142575e-001f, 0.000000e+000f, -4.868234e-001f,
  0.000000e+000f, -2.442293e-001f, 2.462670e-001f, 0.000000e+000f, -4.809927e-001f, 0.000000e+000f, -1.110482e-001f, 1.171771e-001f, 0.000000e+000f, -4.877422e-001f,
  0.000000e+000f, -2.440033e-001f, 2.463671e-001f, 0.000000e+000f, -4.807407e-001f, 0.000000e+000f, -1.141212e-001f, 1.203267e-001f, 0.000000e+000f, -4.875889e-001f,
  0.000000e+000f, -2.436104e-001f, 2.464139e-001f, 0.000000e+000f, -4.800485e-001f, 0.000000e+000f, -1.176212e-001f, 1.234433e-001f, 0.000000e+000f, -4.883557e-001f,
  0.000000e+000f, -2.435737e-001f, 2.467023e-001f, 0.000000e+000f, -4.805518e-001f, 0.000000e+000f, -1.208619e-001f, 1.267704e-001f, 0.000000e+000f, -4.881831e-001f,
  0.000000e+000f, -2.442964e-001f, 2.473671e-001f, 0.000000e+000f, -4.833271e-001f, 0.000000e+000f, -1.226263e-001f, 1.306883e-001f, 0.000000e+000f, -4.838760e-001f,
  0.000000e+000f, -2.442964e-001f, 2.473671e-001f, 0.000000e+000f, -4.833271e-001f, 0.000000e+000f, -1.022036e-001f, 1.089229e-001f, 0.000000e+000f, -4.838760e-001f,
  0.000000e+000f, -2.442964e-001f, 2.473671e-001f, 0.000000e+000f, -4.833271e-001f, 0.000000e+000f, -9.880074e-002f, 1.052964e-001f, 0.000000e+000f, -4.838760e-001f,
  0.000000e+000f, -2.442964e-001f, 2.473671e-001f, 0.000000e+000f, -4.833271e-001f, 0.000000e+000f, -9.551120e-002f, 1.017906e-001f, 0.000000e+000f, -4.838760e-001f,
  0.000000e+000f, -2.442964e-001f, 2.473671e-001f, 0.000000e+000f, -4.833271e-001f, 0.000000e+000f, -9.233119e-002f, 9.840147e-002f, 0.000000e+000f, -4.838760e-001f,
  0.000000e+000f, -2.442964e-001f, 2.473671e-001f, 0.000000e+000f, -4.833271e-001f, 0.000000e+000f, -8.925705e-002f, 9.512522e-002f, 0.000000e+000f, -4.838760e-001f,
  0.000000e+000f, -2.442964e-001f, 2.473671e-001f, 0.000000e+000f, -4.833271e-001f, 0.000000e+000f, -8.628527e-002f, 9.195806e-002f, 0.000000e+000f, -4.838760e-001f,
  0.000000e+000f, -2.442964e-001f, 2.473671e-001f, 0.000000e+000f, -4.833271e-001f, 0.000000e+000f, -8.341243e-002f, 8.889635e-002f, 0.000000e+000f, -4.838760e-001f,
  0.000000e+000f, -2.442964e-001f, 2.473671e-001f, 0.000000e+000f, -4.833271e-001f, 0.000000e+000f, -8.063524e-002f, 8.593658e-002f, 0.000000e+000f, -4.838760e-001f,
  0.000000e+000f, -2.442964e-001f, 2.473671e-001f, 0.000000e+000f, -4.833271e-001f, 0.000000e+000f, -7.795052e-002f, 8.307535e-002f, 0.000000e+000f, -4.838760e-001f,
  0.000000e+000f, -2.442964e-001f, 2.473671e-001f, 0.000000e+000f, -4.833271e-001f, 0.000000e+000f, -7.535518e-002f, 8.030938e-002f, 0.000000e+000f, -4.838760e-001f,
  0.000000e+000f, -2.442964e-001f, 2.473671e-001f, 0.000000e+000f, -4.833271e-001f, 0.000000e+000f, -7.284626e-002f, 7.763551e-002f, 0.000000e+000f, -4.838760e-001f,
  -2.442964e-001f, 2.893861e-001f, -4.254714e-002f, 8.313225e-002f, -5.693271e-001f, 0.000000e+000f, -7.284626e-002f, 7.763551e-002f, 0.000000e+000f, -4.838760e-001f,
  -2.442964e-001f, 3.314051e-001f, -8.509428e-002f, 1.662645e-001f, -6.553271e-001f, 0.000000e+000f, -7.284626e-002f, 7.763551e-002f, 0.000000e+000f, -4.838760e-001f,
  -2.442964e-001f, 3.734241e-001f, -1.276414e-001f, 2.493968e-001f, -7.413271e-001f, 0.000000e+000f, -7.284626e-002f, 7.763551e-002f, 0.000000e+000f, -4.838760e-001f,
  -2.442964e-001f, 4.154430e-001f, -1.701886e-001f, 3.325290e-001f, -8.273271e-001f, 0.000000e+000f, -7.284626e-002f, 7.763551e-002f, 0.000000e+000f, -4.838760e-001f,
  -2.442964e-001f, 4.574620e-001f, -2.127357e-001f, 4.156613e-001f, -9.133271e-001f, 0.000000e+000f, -7.284626e-002f, 7.763551e-002f, 0.000000e+000f, -4.838760e-001f,
  0.000000e+000f, -1.703134e-001f, 2.155939e-001f, 0.000000e+000f, -3.836635e-001f,
  1.446957e-001f, -3.299340e-001f, 1.857894e-001f, 2.597841e-001f, -7.222208e-001f, 7.508483e-003f, -8.914898e-002f, 1.008190e-001f, 2.244139e-001f, -6.761253e-001f,
  1.446957e-001f, -3.299340e-001f, 1.857894e-001f, 2.597841e-001f, -7.222208e-001f, 3.353380e-002f, -1.106417e-001f, 8.632247e-002f, 3.071499e-001f, -7.839490e-001f,
  1.543597e-001f, -3.513352e-001f, 1.973947e-001f, 3.013581e-001f, -7.764010e-001f, 4.192134e-002f, -1.191631e-001f, 8.366903e-002f, 3.302940e-001f, -8.141111e-001f,
  1.598073e-001f, -3.633934e-001f, 2.039294e-001f, 3.247808e-001f, -8.069260e-001f, 4.773467e-002f, -1.258846e-001f, 8.286223e-002f, 3.445348e-001f, -8.326700e-001f,
  1.627191e-001f, -3.698626e-001f, 2.074526e-001f, 3.373533e-001f, -8.233109e-001f, 5.200246e-002f, -1.315394e-001f, 8.318158e-002f, 3.533996e-001f, -8.442228e-001f,
  1.651348e-001f, -3.752062e-001f, 2.103460e-001f, 3.477323e-001f, -8.368371e-001f, 5.512988e-002f, -1.364039e-001f, 8.432802e-002f, 3.583044e-001f, -8.506149e-001f,
  1.665609e-001f, -3.783839e-001f, 2.120833e-001f, 3.539105e-001f, -8.448887e-001f, 5.838773e-002f, -1.414706e-001f, 8.552132e-002f, 3.634155e-001f, -8.572758e-001f,
  1.673721e-001f, -3.802283e-001f, 2.131182e-001f, 3.575061e-001f, -8.495745e-001f, 6.082837e-002f, -1.459683e-001f, 8.730393e-002f, 3.656947e-001f, -8.602461e-001f,
  1.676738e-001f, -3.809898e-001f, 2.135988e-001f, 3.590102e-001f, -8.515348e-001f, 6.260818e-002f, -1.500011e-001f, 8.955693e-002f, 3.656947e-001f, -8.602461e-001f,
  1.688470e-001f, -3.835564e-001f, 2.149677e-001f, 3.639876e-001f, -8.580214e-001f, 6.611195e-002f, -1.555533e-001f, 9.097079e-002f, 3.709641e-001f, -8.671133e-001f,
  1.689591e-001f, -3.839107e-001f, 2.152365e-001f, 3.647040e-001f, -8.589550e-001f, 6.850936e-002f, -1.602710e-001f, 9.310108e-002f, 3.725415e-001f, -8.691690e-001f,
  1.692161e-001f, -3.845646e-001f, 2.156525e-001f, 3.659968e-001f, -8.606398e-001f, 7.070809e-002f, -1.649013e-001f, 9.543914e-002f, 3.733180e-001f, -8.701810e-001f,
  1.695132e-001f, -3.852966e-001f, 2.161030e-001f, 3.674383e-001f, -8.625185e-001f, 7.274971e-002f, -1.694742e-001f, 9.795627e-002f, 3.734353e-001f, -8.703339e-001f,
  1.694779e-001f, -3.853744e-001f, 2.162581e-001f, 3.676310e-001f, -8.627695e-001f, 7.484692e-002f, -1.741730e-001f, 1.005438e-001f, 3.735527e-001f, -8.704869e-001f,
  1.697776e-001f, -3.861099e-001f, 2.167089e-001f, 3.690787e-001f, -8.646562e-001f, 7.719585e-002f, -1.791760e-001f, 1.031129e-001f, 3.742577e-001f, -8.714057e-001f,
  1.696205e-001f, -3.859805e-001f, 2.167969e-001f, 3.688853e-001f, -8.644042e-001f, 7.933206e-002f, -1.840697e-001f, 1.058845e-001f, 3.741402e-001f, -8.712524e-001f,
  1.693473e-001f, -3.856673e-001f, 2.168381e-001f, 3.683541e-001f, -8.637119e-001f, 8.176513e-002f, -1.893162e-001f, 1.086271e-001f, 3.747285e-001f, -8.720192e-001f,
  1.693218e-001f, -3.858355e-001f, 2.170919e-001f, 3.687404e-001f, -8.642153e-001f, 8.401797e-002f, -1.944808e-001f, 1.115548e-001f, 3.745960e-001f, -8.718465e-001f,
  1.698243e-001f, -3.869337e-001f, 2.176769e-001f, 3.708699e-001f, -8.669905e-001f, 8.524449e-002f, -1.987570e-001f, 1.150025e-001f, 3.712911e-001f, -8.675394e-001f,
  1.698243e-001f, -3.869337e-001f, 2.176769e-001f, 3.708699e-001f, -8.669905e-001f, 7.104748e-002f, -1.656551e-001f, 9.584947e-002f, 3.712911e-001f, -8.675394e-001f,
  1.698243e-001f, -3.869337e-001f, 2.176769e-001f, 3.708699e-001f, -8.669905e-001f, 6.868198e-002f, -1.601397e-001f, 9.265819e-002f, 3.712911e-001f, -8.675394e-001f,
  1.698243e-001f, -3.869337e-001f, 2.176769e-001f, 3.708699e-001f, -8.669905e-001f, 6.639524e-002f, -1.548079e-001f, 8.957317e-002f, 3.712911e-001f, -8.675394e-001f,
  1.698243e-001f, -3.869337e-001f, 2.176769e-001f, 3.708699e-001f, -8.669905e-001f, 6.418463e-002f, -1.496536e-001f, 8.659086e-002f, 3.712911e-001f, -8.675394e-001f,
  1.698243e-001f, -3.869337e-001f, 2.176769e-001f, 3.708699e-001f, -8.669905e-001f, 6.204762e-002f, -1.446709e-001f, 8.370785e-002f, 3.712911e-001f, -8.675394e-001f,
  1.698243e-001f, -3.869337e-001f, 2.176769e-001f, 3.708699e-001f, -8.669905e-001f, 5.998177e-002f, -1.398542e-001f, 8.092082e-002f, 3.712911e-001f, -8.675394e-001f,
  1.698243e-001f, -3.869337e-001f, 2.176769e-001f, 3.708699e-001f, -8.669905e-001f, 5.798470e-002f, -1.351978e-001f, 7.822659e-002f, 3.712911e-001f, -8.675394e-001f,
  1.698243e-001f, -3.869337e-001f, 2.176769e-001f, 3.708699e-001f, -8.669905e-001f, 5.605412e-002f, -1.306964e-001f, 7.562206e-002f, 3.712911e-001f, -8.675394e-001f,
  1.698243e-001f, -3.869337e-001f, 2.176769e-001f, 3.708699e-001f, -8.669905e-001f, 5.418781e-002f, -1.263449e-001f, 7.310425e-002f, 3.712911e-001f, -8.675394e-001f,
  1.698243e-001f, -3.869337e-001f, 2.176769e-001f, 3.708699e-001f, -8.669905e-001f, 5.238365e-002f, -1.221383e-001f, 7.067027e-002f, 3.712911e-001f, -8.675394e-001f,
  1.698243e-001f, -3.869337e-001f, 2.176769e-001f, 3.708699e-001f, -8.669905e-001f, 5.063955e-002f, -1.180717e-001f, 6.831733e-002f, 3.712911e-001f, -8.675394e-001f,
  -1.539347e-001f, 1.823463e-001f, -2.680957e-002f, 8.313225e-002f, -5.693271e-001f, 0.000000e+000f, -4.590148e-002f, 4.891925e-002f, 0.000000e+000f, -4.838760e-001f,
  -1.539347e-001f, 2.088231e-001f, -5.361913e-002f, 1.662645e-001f, -6.553271e-001f, 0.000000e+000f, -4.590148e-002f, 4.891925e-002f, 0.000000e+000f, -4.838760e-001f,
  -1.539347e-001f, 2.352999e-001f, -8.042870e-002f, 2.493968e-001f, -7.413271e-001f, 0.000000e+000f, -4.590148e-002f, 4.891925e-002f, 0.000000e+000f, -4.838760e-001f,
  -1.539347e-001f, 2.617766e-001f, -1.072383e-001f, 3.325290e-001f, -8.273271e-001f, 0.000000e+000f, -4.590148e-002f, 4.891925e-002f, 0.000000e+000f, -4.838760e-001f,
  -1.539347e-001f, 2.882534e-001f, -1.340478e-001f, 4.156613e-001f, -9.133271e-001f, 0.000000e+000f, -4.590148e-002f, 4.891925e-002f, 0.000000e+000f, -4.838760e-001f,
  0.000000e+000f, -1.539863e-001f, 1.899539e-001f, 0.000000e+000f, -3.836635e-001f,
  1.308245e-001f, -2.940807e-001f, 1.636940e-001f, 2.597841e-001f, -7.222208e-001f, 6.788683e-003f, -8.038353e-002f, 8.882884e-002f, 2.244139e-001f, -6.761253e-001f,
  1.308245e-001f, -2.940807e-001f, 1.636940e-001f, 2.597841e-001f, -7.222208e-001f, 3.031909e-002f, -9.905609e-002f, 7.605638e-002f, 3.071499e-001f, -7.839490e-001f,
  1.395621e-001f, -3.131482e-001f, 1.739191e-001f, 3.013581e-001f, -7.764010e-001f, 3.790256e-002f, -1.065157e-001f, 7.371850e-002f, 3.302940e-001f, -8.141111e-001f,
  1.444874e-001f, -3.238913e-001f, 1.796767e-001f, 3.247808e-001f, -8.069260e-001f, 4.315859e-002f, -1.124232e-001f, 7.300765e-002f, 3.445348e-001f, -8.326700e-001f,
  1.471201e-001f, -3.296553e-001f, 1.827808e-001f, 3.373533e-001f, -8.233109e-001f, 4.701726e-002f, -1.174112e-001f, 7.328902e-002f, 3.533996e-001f, -8.442228e-001f,
  1.493042e-001f, -3.344162e-001f, 1.853302e-001f, 3.477323e-001f, -8.368371e-001f, 4.984486e-002f, -1.217181e-001f, 7.429912e-002f, 3.583044e-001f, -8.506149e-001f,
  1.505936e-001f, -3.372476e-001f, 1.868608e-001f, 3.539105e-001f, -8.448887e-001f, 5.279040e-002f, -1.262040e-001f, 7.535050e-002f, 3.634155e-001f, -8.572758e-001f,
  1.513270e-001f, -3.388915e-001f, 1.877726e-001f, 3.575061e-001f, -8.495745e-001f, 5.499707e-002f, -1.301993e-001f, 7.692111e-002f, 3.656947e-001f, -8.602461e-001f,
  1.515998e-001f, -3.395713e-001f, 1.881960e-001f, 3.590102e-001f, -8.515348e-001f, 5.660625e-002f, -1.337935e-001f, 7.890617e-002f, 3.656947e-001f, -8.602461e-001f,
  1.526605e-001f, -3.418575e-001f, 1.894022e-001f, 3.639876e-001f, -8.580214e-001f, 5.977414e-002f, -1.387112e-001f, 8.015188e-002f, 3.709641e-001f, -8.671133e-001f,
  1.527619e-001f, -3.421746e-001f, 1.896390e-001f, 3.647040e-001f, -8.589550e-001f, 6.194173e-002f, -1.429066e-001f, 8.202883e-002f, 3.725415e-001f, -8.691690e-001f,
  1.529943e-001f, -3.427583e-001f, 1.900055e-001f, 3.659968e-001f, -8.606398e-001f, 6.392968e-002f, -1.470288e-001f, 8.408882e-002f, 3.733180e-001f, -8.701810e-001f,
  1.532629e-001f, -3.434114e-001f, 1.904025e-001f, 3.674383e-001f, -8.625185e-001f, 6.577558e-002f, -1.511037e-001f, 8.630660e-002f, 3.734353e-001f, -8.703339e-001f,
  1.532310e-001f, -3.434829e-001f, 1.905391e-001f, 3.676310e-001f, -8.627695e-001f, 6.767174e-002f, -1.552909e-001f, 8.858636e-002f, 3.735527e-001f, -8.704869e-001f,
  1.535019e-001f, -3.441391e-001f, 1.909363e-001f, 3.690787e-001f, -8.646562e-001f, 6.979548e-002f, -1.597457e-001f, 9.084998e-002f, 3.742577e-001f, -8.714057e-001f,
  1.533598e-001f, -3.440267e-001f, 1.910139e-001f, 3.688853e-001f, -8.644042e-001f, 7.172691e-002f, -1.641078e-001f, 9.329195e-002f, 3.741402e-001f, -8.712524e-001f,
  1.531129e-001f, -3.437515e-001f, 1.910501e-001f, 3.683541e-001f, -8.637119e-001f, 7.392673e-002f, -1.687804e-001f, 9.570836e-002f, 3.747285e-001f, -8.720192e-001f,
  1.530898e-001f, -3.439043e-001f, 1.912737e-001f, 3.687404e-001f, -8.642153e-001f, 7.596361e-002f, -1.733841e-001f, 9.828793e-002f, 3.745960e-001f, -8.718465e-001f,
  1.535441e-001f, -3.448825e-001f, 1.917892e-001f, 3.708699e-001f, -8.669905e-001f, 7.707255e-002f, -1.772146e-001f, 1.013256e-001f, 3.712911e-001f, -8.675394e-001f,
  1.535441e-001f, -3.448825e-001f, 1.917892e-001f, 3.708699e-001f, -8.669905e-001f, 6.423653e-002f, -1.477004e-001f, 8.445035e-002f, 3.712911e-001f, -8.675394e-001f,
  1.535441e-001f, -3.448825e-001f, 1.917892e-001f, 3.708699e-001f, -8.669905e-001f, 6.209779e-002f, -1.427828e-001f, 8.163861e-002f, 3.712911e-001f, -8.675394e-001f,
  1.535441e-001f, -3.448825e-001f, 1.917892e-001f, 3.708699e-001f, -8.669905e-001f, 6.003027e-002f, -1.380289e-001f, 7.892048e-002f, 3.712911e-001f, -8.675394e-001f,
  1.535441e-001f, -3.448825e-001f, 1.917892e-001f, 3.708699e-001f, -8.669905e-001f, 5.803158e-002f, -1.334333e-001f, 7.629285e-002f, 3.712911e-001f, -8.675394e-001f,
  1.535441e-001f, -3.448825e-001f, 1.917892e-001f, 3.708699e-001f, -8.669905e-001f, 5.609944e-002f, -1.289907e-001f, 7.375270e-002f, 3.712911e-001f, -8.675394e-001f,
  1.535441e-001f, -3.448825e-001f, 1.917892e-001f, 3.708699e-001f, -8.669905e-001f, 5.423163e-002f, -1.246960e-001f, 7.129713e-002f, 3.712911e-001f, -8.675394e-001f,
  1.535441e-001f, -3.448825e-001f, 1.917892e-001f, 3.708699e-001f, -8.669905e-001f, 5.242600e-002f, -1.205442e-001f, 6.892332e-002f, 3.712911e-001f, -8.675394e-001f,
  1.535441e-001f, -3.448825e-001f, 1.917892e-001f, 3.708699e-001f, -8.669905e-001f, 5.068050e-002f, -1.165308e-001f, 6.662854e-002f, 3.712911e-001f, -8.675394e-001f,
  1.535441e-001f, -3.448825e-001f, 1.917892e-001f, 3.708699e-001f, -8.669905e-001f, 4.899311e-002f, -1.126509e-001f, 6.441016e-002f, 3.712911e-001f, -8.675394e-001f,
  1.535441e-001f, -3.448825e-001f, 1.917892e-001f, 3.708699e-001f, -8.669905e-001f, 4.736190e-002f, -1.089002e-001f, 6.226565e-002f, 3.712911e-001f, -8.675394e-001f,
  1.535441e-001f, -3.448825e-001f, 1.917892e-001f, 3.708699e-001f, -8.669905e-001f, 4.578500e-002f, -1.052744e-001f, 6.019254e-002f, 3.712911e-001f, -8.675394e-001f,
  -1.371944e-001f, 1.625163e-001f, -2.389405e-002f, 8.313225e-002f, -5.693271e-001f, 0.000000e+000f, -4.090973e-002f, 4.359933e-002f, 0.000000e+000f, -4.838760e-001f,
  -1.371944e-001f, 1.861138e-001f, -4.778810e-002f, 1.662645e-001f, -6.553271e-001f, 0.000000e+000f, -4.090973e-002f, 4.359933e-002f, 0.000000e+000f, -4.838760e-001f,
  -1.371944e-001f, 2.097112e-001f, -7.168215e-002f, 2.493968e-001f, -7.413271e-001f, 0.000000e+000f, -4.090973e-002f, 4.359933e-002f, 0.000000e+000f, -4.838760e-001f,
  -1.371944e-001f, 2.333087e-001f, -9.557621e-002f, 3.325290e-001f, -8.273271e-001f, 0.000000e+000f, -4.090973e-002f, 4.359933e-002f, 0.000000e+000f, -4.838760e-001f,
  -1.371944e-001f, 2.569061e-001f, -1.194703e-001f, 4.156613e-001f, -9.133271e-001f, 0.000000e+000f, -4.090973e-002f, 4.359933e-002f, 0.000000e+000f, -4.838760e-001f,
  0.000000e+000f, -1.463222e-001f, 1.783784e-001f, 0.000000e+000f, -3.836635e-001f,
  1.243131e-001f, -2.776416e-001f, 1.537186e-001f, 2.597841e-001f, -7.222208e-001f, 1.257761e-002f, -8.089704e-002f, 7.992766e-002f, 2.475095e-001f, -7.062242e-001f,
  1.285358e-001f, -2.867904e-001f, 1.585962e-001f, 2.809158e-001f, -7.497601e-001f, 3.273594e-002f, -9.722613e-002f, 6.987572e-002f, 3.204962e-001f, -8.013423e-001f,
  1.356925e-001f, -3.023068e-001f, 1.668759e-001f, 3.167578e-001f, -7.964704e-001f, 3.904853e-002f, -1.040273e-001f, 6.878545e-002f, 3.390152e-001f, -8.254767e-001f,
  1.393756e-001f, -3.103024e-001f, 1.711496e-001f, 3.352301e-001f, -8.205438e-001f, 4.406639e-002f, -1.100648e-001f, 6.868822e-002f, 3.521140e-001f, -8.425474e-001f,
  1.418731e-001f, -3.157150e-001f, 1.740363e-001f, 3.477323e-001f, -8.368371e-001f, 4.736401e-002f, -1.149734e-001f, 6.977142e-002f, 3.583044e-001f, -8.506149e-001f,
  1.432803e-001f, -3.187878e-001f, 1.756910e-001f, 3.548360e-001f, -8.460947e-001f, 5.066928e-002f, -1.200093e-001f, 7.099845e-002f, 3.642113e-001f, -8.583129e-001f,
  1.438644e-001f, -3.201254e-001f, 1.764535e-001f, 3.579442e-001f, -8.501454e-001f, 5.278770e-002f, -1.242465e-001f, 7.301569e-002f, 3.654028e-001f, -8.598657e-001f,
  1.446783e-001f, -3.219195e-001f, 1.774311e-001f, 3.620963e-001f, -8.555566e-001f, 5.556278e-002f, -1.290956e-001f, 7.480291e-002f, 3.687665e-001f, -8.642494e-001f,
  1.451723e-001f, -3.230449e-001f, 1.780689e-001f, 3.647100e-001f, -8.589629e-001f, 5.850282e-002f, -1.341885e-001f, 7.664215e-002f, 3.724445e-001f, -8.690426e-001f,
  1.453795e-001f, -3.235911e-001f, 1.784268e-001f, 3.659968e-001f, -8.606398e-001f, 6.074780e-002f, -1.388303e-001f, 7.896454e-002f, 3.733180e-001f, -8.701810e-001f,
  1.456346e-001f, -3.242320e-001f, 1.788290e-001f, 3.675002e-001f, -8.625991e-001f, 6.284610e-002f, -1.434488e-001f, 8.147642e-002f, 3.734152e-001f, -8.703077e-001f,
  1.456995e-001f, -3.245102e-001f, 1.790717e-001f, 3.681783e-001f, -8.634828e-001f, 6.511127e-002f, -1.483028e-001f, 8.402751e-002f, 3.738586e-001f, -8.708855e-001f,
  1.458260e-001f, -3.249135e-001f, 1.793754e-001f, 3.691436e-001f, -8.647408e-001f, 6.741725e-002f, -1.532915e-001f, 8.668208e-002f, 3.741887e-001f, -8.713156e-001f,
  1.455292e-001f, -3.245642e-001f, 1.793907e-001f, 3.684131e-001f, -8.637889e-001f, 6.981865e-002f, -1.584644e-001f, 8.941940e-002f, 3.745895e-001f, -8.718381e-001f,
  1.454703e-001f, -3.246787e-001f, 1.796177e-001f, 3.687404e-001f, -8.642153e-001f, 7.218278e-002f, -1.637081e-001f, 9.229837e-002f, 3.745960e-001f, -8.718465e-001f,
  1.459020e-001f, -3.256020e-001f, 1.801018e-001f, 3.708699e-001f, -8.669905e-001f, 6.271549e-002f, -1.432939e-001f, 8.148169e-002f, 3.712911e-001f, -8.675394e-001f,
  1.459020e-001f, -3.256020e-001f, 1.801018e-001f, 3.708699e-001f, -8.669905e-001f, 6.021820e-002f, -1.375880e-001f, 7.823714e-002f, 3.712911e-001f, -8.675394e-001f,
  1.459020e-001f, -3.256020e-001f, 1.801018e-001f, 3.708699e-001f, -8.669905e-001f, 5.782035e-002f, -1.321093e-001f, 7.512179e-002f, 3.712911e-001f, -8.675394e-001f,
  1.459020e-001f, -3.256020e-001f, 1.801018e-001f, 3.708699e-001f, -8.669905e-001f, 5.551798e-002f, -1.268488e-001f, 7.213048e-002f, 3.712911e-001f, -8.675394e-001f,
  1.459020e-001f, -3.256020e-001f, 1.801018e-001f, 3.708699e-001f, -8.669905e-001f, 5.330728e-002f, -1.217978e-001f, 6.925829e-002f, 3.712911e-001f, -8.675394e-001f,
  1.459020e-001f, -3.256020e-001f, 1.801018e-001f, 3.708699e-001f, -8.669905e-001f, 5.118462e-002f, -1.169479e-001f, 6.650047e-002f, 3.712911e-001f, -8.675394e-001f,
  1.459020e-001f, -3.256020e-001f, 1.801018e-001f, 3.708699e-001f, -8.669905e-001f, 4.914648e-002f, -1.122911e-001f, 6.385247e-002f, 3.712911e-001f, -8.675394e-001f,
  1.459020e-001f, -3.256020e-001f, 1.801018e-001f, 3.708699e-001f, -8.669905e-001f, 4.718950e-002f, -1.078197e-001f, 6.130990e-002f, 3.712911e-001f, -8.675394e-001f,
  1.459020e-001f, -3.256020e-001f, 1.801018e-001f, 3.708699e-001f, -8.669905e-001f, 4.531044e-002f, -1.035264e-001f, 5.886858e-002f, 3.712911e-001f, -8.675394e-001f,
  1.459020e-001f, -3.256020e-001f, 1.801018e-001f, 3.708699e-001f, -8.669905e-001f, 4.350621e-002f, -9.940405e-002f, 5.652447e-002f, 3.712911e-001f, -8.675394e-001f,
  -1.295199e-001f, 1.534253e-001f, -2.255744e-002f, 8.313225e-002f, -5.693271e-001f, 0.000000e+000f, -3.862128e-002f, 4.116042e-002f, 0.000000e+000f, -4.838760e-001f,
  -1.295199e-001f, 1.757028e-001f, -4.511488e-002f, 1.662645e-001f, -6.553271e-001f, 0.000000e+000f, -3.862128e-002f, 4.116042e-002f, 0.000000e+000f, -4.838760e-001f,
  -1.295199e-001f, 1.979802e-001f, -6.767232e-002f, 2.493968e-001f, -7.413271e-001f, 0.000000e+000f, -3.862128e-002f, 4.116042e-002f, 0.000000e+000f, -4.838760e-001f,
  -1.295199e-001f, 2.202576e-001f, -9.022976e-002f, 3.325290e-001f, -8.273271e-001f, 0.000000e+000f, -3.862128e-002f, 4.116042e-002f, 0.000000e+000f, -4.838760e-001f,
  0.000000e+000f, -1.389835e-001f, 1.675536e-001f, 0.000000e+000f, -3.836635e-001f,
  1.180783e-001f, -2.621209e-001f, 1.443903e-001f, 2.597841e-001f, -7.222208e-001f, 1.194679e-002f, -7.667825e-002f, 7.507730e-002f, 2.475095e-001f, -7.062242e-001f,
  1.235878e-001f, -2.739856e-001f, 1.506865e-001f, 2.888176e-001f, -7.600579e-001f, 3.232261e-002f, -9.314119e-002f, 6.531049e-002f, 3.245487e-001f, -8.066236e-001f,
  1.296993e-001f, -2.871512e-001f, 1.576761e-001f, 3.210356e-001f, -8.020452e-001f, 3.804754e-002f, -9.935958e-002f, 6.448664e-002f, 3.418850e-001f, -8.292167e-001f,
  1.331983e-001f, -2.947065e-001f, 1.616992e-001f, 3.395292e-001f, -8.261465e-001f, 4.297658e-002f, -1.055617e-001f, 6.479993e-002f, 3.545165e-001f, -8.456784e-001f,
  1.353166e-001f, -2.992662e-001f, 1.641174e-001f, 3.506863e-001f, -8.406868e-001f, 4.605710e-002f, -1.101827e-001f, 6.589365e-002f, 3.603958e-001f, -8.533405e-001f,
  1.365049e-001f, -3.018666e-001f, 1.655253e-001f, 3.570604e-001f, -8.489936e-001f, 4.933118e-002f, -1.154767e-001f, 6.751740e-002f, 3.656095e-001f, -8.601350e-001f,
  1.368295e-001f, -3.026541e-001f, 1.660030e-001f, 3.590102e-001f, -8.515348e-001f, 5.109113e-002f, -1.193269e-001f, 6.960114e-002f, 3.656947e-001f, -8.602461e-001f,
  1.378778e-001f, -3.048925e-001f, 1.671780e-001f, 3.644829e-001f, -8.586669e-001f, 5.443664e-002f, -1.245006e-001f, 7.097607e-002f, 3.716599e-001f, -8.680202e-001f,
  1.379650e-001f, -3.052099e-001f, 1.674339e-001f, 3.652931e-001f, -8.597227e-001f, 5.698025e-002f, -1.296091e-001f, 7.343789e-002f, 3.730168e-001f, -8.697885e-001f,
  1.383094e-001f, -3.060146e-001f, 1.679035e-001f, 3.672785e-001f, -8.623101e-001f, 5.904171e-002f, -1.339939e-001f, 7.572789e-002f, 3.734549e-001f, -8.703594e-001f,
  1.383377e-001f, -3.062367e-001f, 1.681300e-001f, 3.678634e-001f, -8.630725e-001f, 6.145728e-002f, -1.392341e-001f, 7.853461e-002f, 3.736914e-001f, -8.706677e-001f,
  1.385439e-001f, -3.067767e-001f, 1.684814e-001f, 3.692098e-001f, -8.648271e-001f, 6.369550e-002f, -1.439671e-001f, 8.098747e-002f, 3.742423e-001f, -8.713855e-001f,
  1.382303e-001f, -3.064178e-001f, 1.685045e-001f, 3.684131e-001f, -8.637889e-001f, 6.631694e-002f, -1.496205e-001f, 8.399304e-002f, 3.745895e-001f, -8.718381e-001f,
  1.381743e-001f, -3.065273e-001f, 1.687178e-001f, 3.687404e-001f, -8.642153e-001f, 6.856250e-002f, -1.545708e-001f, 8.669730e-002f, 3.745960e-001f, -8.718465e-001f,
  1.385844e-001f, -3.073987e-001f, 1.691724e-001f, 3.708699e-001f, -8.669905e-001f, 5.957003e-002f, -1.353020e-001f, 7.653703e-002f, 3.712911e-001f, -8.675394e-001f,
  1.385844e-001f, -3.073987e-001f, 1.691724e-001f, 3.708699e-001f, -8.669905e-001f, 5.681194e-002f, -1.290375e-001f, 7.299336e-002f, 3.712911e-001f, -8.675394e-001f,
  1.385844e-001f, -3.073987e-001f, 1.691724e-001f, 3.708699e-001f, -8.669905e-001f, 5.454972e-002f, -1.238993e-001f, 7.008681e-002f, 3.712911e-001f, -8.675394e-001f,
  1.385844e-001f, -3.073987e-001f, 1.691724e-001f, 3.708699e-001f, -8.669905e-001f, 5.202407e-002f, -1.181628e-001f, 6.684179e-002f, 3.712911e-001f, -8.675394e-001f,
  1.385844e-001f, -3.073987e-001f, 1.691724e-001f, 3.708699e-001f, -8.669905e-001f, 4.995250e-002f, -1.134576e-001f, 6.418019e-002f, 3.712911e-001f, -8.675394e-001f,
  1.385844e-001f, -3.073987e-001f, 1.691724e-001f, 3.708699e-001f, -8.669905e-001f, 4.763970e-002f, -1.082045e-001f, 6.120865e-002f, 3.712911e-001f, -8.675394e-001f,
  1.385844e-001f, -3.073987e-001f, 1.691724e-001f, 3.708699e-001f, -8.669905e-001f, 4.574272e-002f, -1.038959e-001f, 5.877136e-002f, 3.712911e-001f, -8.675394e-001f,
  1.385844e-001f, -3.073987e-001f, 1.691724e-001f, 3.708699e-001f, -8.669905e-001f, 4.392127e-002f, -9.975880e-002f, 5.643112e-002f, 3.712911e-001f, -8.675394e-001f,
  1.385844e-001f, -3.073987e-001f, 1.691724e-001f, 3.708699e-001f, -8.669905e-001f, 4.188771e-002f, -9.513997e-002f, 5.381835e-002f, 3.712911e-001f, -8.675394e-001f,
  1.385844e-001f, -3.073987e-001f, 1.691724e-001f, 3.708699e-001f, -8.669905e-001f, 4.132419e-002f, -9.386002e-002f, 5.309432e-002f, 3.712911e-001f, -8.675394e-001f,
  -1.222747e-001f, 1.448428e-001f, -2.129560e-002f, 8.313225e-002f, -5.693271e-001f, 0.000000e+000f, -3.646084e-002f, 3.885794e-002f, 0.000000e+000f, -4.838760e-001f,
  -1.222747e-001f, 1.658741e-001f, -4.259119e-002f, 1.662645e-001f, -6.553271e-001f, 0.000000e+000f, -3.646084e-002f, 3.885794e-002f, 0.000000e+000f, -4.838760e-001f,
  -1.222747e-001f, 1.869053e-001f, -6.388679e-002f, 2.493968e-001f, -7.413271e-001f, 0.000000e+000f, -3.646084e-002f, 3.885794e-002f, 0.000000e+000f, -4.838760e-001f,
  0.000000e+000f, -1.354340e-001f, 1.624060e-001f, 0.000000e+000f, -3.836635e-001f,
  1.150627e-001f, -2.546888e-001f, 1.399543e-001f, 2.597841e-001f, -7.222208e-001f, 2.063662e-002f, -8.140973e-002f, 6.794789e-002f, 2.836467e-001f, -7.533191e-001f,
  1.237639e-001f, -2.733777e-001f, 1.498532e-001f, 3.068574e-001f, -7.835679e-001f, 3.424471e-002f, -9.352177e-002f, 6.290411e-002f, 3.331023e-001f, -8.177709e-001f,
  1.290044e-001f, -2.846414e-001f, 1.558245e-001f, 3.352301e-001f, -8.205438e-001f, 4.078731e-002f, -1.010618e-001f, 6.253772e-002f, 3.521140e-001f, -8.425474e-001f,
  1.318608e-001f, -2.907777e-001f, 1.590753e-001f, 3.506863e-001f, -8.406868e-001f, 4.488086e-002f, -1.070810e-001f, 6.386925e-002f, 3.603958e-001f, -8.533405e-001f,
  1.330951e-001f, -2.934800e-001f, 1.605410e-001f, 3.575061e-001f, -8.495745e-001f, 4.837102e-002f, -1.128477e-001f, 6.576566e-002f, 3.656947e-001f, -8.602461e-001f,
  1.339125e-001f, -2.952962e-001f, 1.615435e-001f, 3.620963e-001f, -8.555566e-001f, 5.142823e-002f, -1.184645e-001f, 6.810488e-002f, 3.687665e-001f, -8.642494e-001f,
  1.343660e-001f, -2.963623e-001f, 1.621698e-001f, 3.648051e-001f, -8.590868e-001f, 5.481946e-002f, -1.245145e-001f, 7.048334e-002f, 3.726748e-001f, -8.693428e-001f,
  1.347771e-001f, -2.973351e-001f, 1.627451e-001f, 3.672785e-001f, -8.623101e-001f, 5.753386e-002f, -1.302029e-001f, 7.340135e-002f, 3.734549e-001f, -8.703594e-001f,
  1.348577e-001f, -2.976753e-001f, 1.630372e-001f, 3.681783e-001f, -8.634828e-001f, 6.026620e-002f, -1.360663e-001f, 7.650349e-002f, 3.738586e-001f, -8.708855e-001f,
  1.348830e-001f, -2.979350e-001f, 1.633122e-001f, 3.688853e-001f, -8.644042e-001f, 6.308525e-002f, -1.421644e-001f, 7.976233e-002f, 3.741402e-001f, -8.712524e-001f,
  1.346166e-001f, -2.977155e-001f, 1.634321e-001f, 3.684234e-001f, -8.638022e-001f, 6.615491e-002f, -1.486437e-001f, 8.311793e-002f, 3.748935e-001f, -8.722342e-001f,
  1.350451e-001f, -2.986821e-001f, 1.639751e-001f, 3.708699e-001f, -8.669905e-001f, 5.804870e-002f, -1.314743e-001f, 7.418563e-002f, 3.712911e-001f, -8.675394e-001f,
  1.350451e-001f, -2.986821e-001f, 1.639751e-001f, 3.708699e-001f, -8.669905e-001f, 5.498738e-002f, -1.245407e-001f, 7.027331e-002f, 3.712911e-001f, -8.675394e-001f,
  1.350451e-001f, -2.986821e-001f, 1.639751e-001f, 3.708699e-001f, -8.669905e-001f, 5.208752e-002f, -1.179728e-001f, 6.656731e-002f, 3.712911e-001f, -8.675394e-001f,
  1.350451e-001f, -2.986821e-001f, 1.639751e-001f, 3.708699e-001f, -8.669905e-001f, 4.934058e-002f, -1.117513e-001f, 6.305675e-002f, 3.712911e-001f, -8.675394e-001f,
  1.350451e-001f, -2.986821e-001f, 1.639751e-001f, 3.708699e-001f, -8.669905e-001f, 4.673851e-002f, -1.058579e-001f, 5.973133e-002f, 3.712911e-001f, -8.675394e-001f,
  1.350451e-001f, -2.986821e-001f, 1.639751e-001f, 3.708699e-001f, -8.669905e-001f, 4.427366e-002f, -1.002753e-001f, 5.658128e-002f, 3.712911e-001f, -8.675394e-001f,
  1.350451e-001f, -2.986821e-001f, 1.639751e-001f, 3.708699e-001f, -8.669905e-001f, 4.193880e-002f, -9.498704e-002f, 5.359735e-002f, 3.712911e-001f, -8.675394e-001f,
  1.350451e-001f, -2.986821e-001f, 1.639751e-001f, 3.708699e-001f, -8.669905e-001f, 4.026882e-002f, -9.120472e-002f, 5.146314e-002f, 3.712911e-001f, -8.675394e-001f,
  -1.188055e-001f, 1.407334e-001f, -2.069140e-002f, 8.313225e-002f, -5.693271e-001f, 0.000000e+000f, -3.542637e-002f, 3.775546e-002f, 0.000000e+000f, -4.838760e-001f,
  -1.188055e-001f, 1.611679e-001f, -4.138279e-002f, 1.662645e-001f, -6.553271e-001f, 0.000000e+000f, -3.542637e-002f, 3.775546e-002f, 0.000000e+000f, -4.838760e-001f,
  -1.188055e-001f, 1.816025e-001f, -6.207419e-002f, 2.493968e-001f, -7.413271e-001f, 0.000000e+000f, -3.542637e-002f, 3.775546e-002f, 0.000000e+000f, -4.838760e-001f,
  0.000000e+000f, -1.319633e-001f, 1.574264e-001f, 0.000000e+000f, -3.836635e-001f,
  1.121140e-001f, -2.474673e-001f, 1.356632e-001f, 2.597841e-001f, -7.222208e-001f, 2.598287e-002f, -8.383369e-002f, 6.303255e-002f, 3.071499e-001f, -7.839490e-001f,
  1.238229e-001f, -2.725388e-001f, 1.489090e-001f, 3.247808e-001f, -8.069260e-001f, 3.698607e-002f, -9.484205e-002f, 6.050589e-002f, 3.445348e-001f, -8.326700e-001f,
  1.279508e-001f, -2.813907e-001f, 1.535944e-001f, 3.477323e-001f, -8.368371e-001f, 4.271607e-002f, -1.025749e-001f, 6.157621e-002f, 3.583044e-001f, -8.506149e-001f,
  1.296843e-001f, -2.851555e-001f, 1.556186e-001f, 3.575061e-001f, -8.495745e-001f, 4.713141e-002f, -1.096637e-001f, 6.374921e-002f, 3.656947e-001f, -8.602461e-001f,
  1.308271e-001f, -2.876509e-001f, 1.569691e-001f, 3.639876e-001f, -8.580214e-001f, 5.122527e-002f, -1.167920e-001f, 6.642674e-002f, 3.709641e-001f, -8.671133e-001f,
  1.311131e-001f, -2.884113e-001f, 1.574691e-001f, 3.659968e-001f, -8.606398e-001f, 5.478649e-002f, -1.237754e-001f, 6.968953e-002f, 3.733180e-001f, -8.701810e-001f,
  1.313159e-001f, -2.890240e-001f, 1.579114e-001f, 3.676310e-001f, -8.627695e-001f, 5.799336e-002f, -1.307255e-001f, 7.341691e-002f, 3.735527e-001f, -8.704869e-001f,
  1.314264e-001f, -2.894855e-001f, 1.583048e-001f, 3.688853e-001f, -8.644042e-001f, 6.146856e-002f, -1.381403e-001f, 7.731672e-002f, 3.741402e-001f, -8.712524e-001f,
  1.311950e-001f, -2.893900e-001f, 1.585202e-001f, 3.687404e-001f, -8.642153e-001f, 6.509933e-002f, -1.459424e-001f, 8.145719e-002f, 3.745960e-001f, -8.718465e-001f,
  1.315843e-001f, -2.902125e-001f, 1.589474e-001f, 3.708699e-001f, -8.669905e-001f, 5.504945e-002f, -1.243402e-001f, 6.998915e-002f, 3.712911e-001f, -8.675394e-001f,
  1.315843e-001f, -2.902125e-001f, 1.589474e-001f, 3.708699e-001f, -8.669905e-001f, 5.144477e-002f, -1.161984e-001f, 6.540620e-002f, 3.712911e-001f, -8.675394e-001f,
  1.315843e-001f, -2.902125e-001f, 1.589474e-001f, 3.708699e-001f, -8.669905e-001f, 4.807613e-002f, -1.085896e-001f, 6.112335e-002f, 3.712911e-001f, -8.675394e-001f,
  1.315843e-001f, -2.902125e-001f, 1.589474e-001f, 3.708699e-001f, -8.669905e-001f, 4.492806e-002f, -1.014791e-001f, 5.712095e-002f, 3.712911e-001f, -8.675394e-001f,
  1.315843e-001f, -2.902125e-001f, 1.589474e-001f, 3.708699e-001f, -8.669905e-001f, 4.198614e-002f, -9.483413e-002f, 5.338062e-002f, 3.712911e-001f, -8.675394e-001f,
  1.315843e-001f, -2.902125e-001f, 1.589474e-001f, 3.708699e-001f, -8.669905e-001f, 3.923685e-002f, -8.862432e-002f, 4.988522e-002f, 3.712911e-001f, -8.675394e-001f,
  -1.154347e-001f, 1.367405e-001f, -2.010434e-002f, 8.313225e-002f, -5.693271e-001f, 0.000000e+000f, -3.442125e-002f, 3.668426e-002f, 0.000000e+000f, -4.838760e-001f,
  -1.154347e-001f, 1.565952e-001f, -4.020868e-002f, 1.662645e-001f, -6.553271e-001f, 0.000000e+000f, -3.442125e-002f, 3.668426e-002f, 0.000000e+000f, -4.838760e-001f,
  0.000000e+000f, -1.285702e-001f, 1.526089e-001f, 0.000000e+000f, -3.836635e-001f,
  1.092313e-001f, -2.404504e-001f, 1.315117e-001f, 2.597841e-001f, -7.222208e-001f, 3.164657e-002f, -8.745983e-002f, 5.922541e-002f, 3.302940e-001f, -8.141111e-001f,
  1.246608e-001f, -2.734092e-001f, 1.488942e-001f, 3.477323e-001f, -8.368371e-001f, 4.161774e-002f, -9.968830e-002f, 5.969188e-002f, 3.583044e-001f, -8.506149e-001f,
  1.265776e-001f, -2.776241e-001f, 1.511966e-001f, 3.590102e-001f, -8.515348e-001f, 4.726313e-002f, -1.095075e-001f, 6.339318e-002f, 3.656947e-001f, -8.602461e-001f,
  1.277419e-001f, -2.802308e-001f, 1.526504e-001f, 3.659968e-001f, -8.606398e-001f, 5.337779e-002f, -1.202733e-001f, 6.755692e-002f, 3.733180e-001f, -8.701810e-001f,
  1.281657e-001f, -2.813639e-001f, 1.533981e-001f, 3.690787e-001f, -8.646562e-001f, 5.827542e-002f, -1.306629e-001f, 7.298883e-002f, 3.742577e-001f, -8.714057e-001f,
  1.278216e-001f, -2.811839e-001f, 1.536692e-001f, 3.687404e-001f, -8.642153e-001f, 6.342547e-002f, -1.418102e-001f, 7.896448e-002f, 3.745960e-001f, -8.718465e-001f,
  1.282009e-001f, -2.819830e-001f, 1.540834e-001f, 3.708699e-001f, -8.669905e-001f, 5.184827e-002f, -1.167994e-001f, 6.558842e-002f, 3.712911e-001f, -8.675394e-001f,
  1.282009e-001f, -2.819830e-001f, 1.540834e-001f, 3.708699e-001f, -8.669905e-001f, 4.683997e-002f, -1.055171e-001f, 5.925289e-002f, 3.712911e-001f, -8.675394e-001f,
  1.282009e-001f, -2.819830e-001f, 1.540834e-001f, 3.708699e-001f, -8.669905e-001f, 4.231545e-002f, -9.532464e-002f, 5.352934e-002f, 3.712911e-001f, -8.675394e-001f,
  1.282009e-001f, -2.819830e-001f, 1.540834e-001f, 3.708699e-001f, -8.669905e-001f, 3.822798e-002f, -8.611673e-002f, 4.835866e-002f, 3.712911e-001f, -8.675394e-001f,
  -1.121596e-001f, 1.328609e-001f, -1.953394e-002f, 8.313225e-002f, -5.693271e-001f, 0.000000e+000f, -3.344465e-002f, 3.564346e-002f, 0.000000e+000f, -4.838760e-001f,
  0.000000e+000f, -1.252537e-001f, 1.479478e-001f, 0.000000e+000f, -3.836635e-001f,
  1.064137e-001f, -2.336324e-001f, 1.274949e-001f, 2.597841e-001f, -7.222208e-001f, 4.054421e-002f, -9.688229e-002f, 5.786870e-002f, 3.583044e-001f, -8.506149e-001f,
  1.244468e-001f, -2.722823e-001f, 1.479879e-001f, 3.659968e-001f, -8.606398e-001f, 5.200091e-002f, -1.168700e-001f, 6.549352e-002f, 3.733180e-001f, -8.701810e-001f,
  1.245245e-001f, -2.732104e-001f, 1.489757e-001f, 3.687404e-001f, -8.642153e-001f, 6.178941e-002f, -1.377948e-001f, 7.655265e-002f, 3.745960e-001f, -8.718465e-001f,
  1.248940e-001f, -2.739867e-001f, 1.493772e-001f, 3.708699e-001f, -8.669905e-001f, 4.563174e-002f, -1.025313e-001f, 5.744311e-002f, 3.712911e-001f, -8.675394e-001f,
  1.248940e-001f, -2.739867e-001f, 1.493772e-001f, 3.708699e-001f, -8.669905e-001f, 3.724189e-002f, -8.367990e-002f, 4.688163e-002f, 3.712911e-001f, -8.675394e-001f
  // Total number of coefficients: 3485
  // Maximum number of elevation coefficients: 5
};
// Total number of coefficients: 302890 == (10325 +10390+ 11065+ 11375+ 11435+ 11395+ 11395=77380)+		  // 10 degrees full
//                                         (10790 +12050+ 11550+ 11710+ 11710+ 11710+ 11755=81275)+		  // 20 degrees	full
//                                         (9900  +10200+ 10150+ 10200+ 10200+ 10200+ 10200=71050)+		  // headphones	full
//                                         (7*3485=24395)+												  // 10 degrese lite
//                                         (7*3485=24395)+												  // 20 degrees	lite
//                                         (7*3485=24395)												  // headphone lite
//											=302890
// Maximum number of lite elevation coefficients: 5
// Maximum number of full elevation coefficients: 20
// Maximum number of all (lite and full) elevation coefficients: 20

#endif // BUILD_LUT

// Floating-point biquad coefficient offset offsets
const DWORD CaadwBiquadCoeffOffsetOffset[KSDS3D_FILTER_QUALITY_COUNT][espeakerconfigCount] = {
	// Full coefficients
	{
        // 10 degrees loudspeakers
		0,
  		
		// 20 degrees loudspeakers
		15476,
			
		// Headphones
		31731
	},
	// Lite coefficients
	{
		//  10 degrees loudspeakers
        45941,

		// 20 degrees loudspeakers
		50820,			

		// Headphones
		55699
	}
};

// Floating-point biquad coefficient offsets
const WORD CaaaaawBiquadCoeffOffset[KSDS3D_FILTER_QUALITY_COUNT][espeakerconfigCount][esamplerateCount][CuiNumElevationBins][CuiMaxAzimuthBins] =
{
	// Full coefficients
	{
		// 10 degrees loudspeakers
		{
		// 8000 Hz  sample rate
		{
        // Coefficient offsets
        // Generated by HRTFConv V5.90d on Thu Mar 11 16:16:59 1999
        { 0, 2, 7, 11, 17, 23, 29, 35, 41, 47, 53, 59, 65, 71, 77, 84, 91, 98, 105, 111, 117, 123, 129, 135, 141, 147, 154, 161, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 168, 170, 175, 179, 185, 191, 197, 203, 209, 215, 221, 227, 233, 239, 245, 251, 258, 265, 272, 279, 285, 291, 297, 303, 309, 315, 321, 327, 334, 341, 0, 0, 0, 0, 0, 0 },
        { 348, 350, 355, 359, 365, 371, 377, 383, 389, 395, 401, 407, 413, 419, 425, 431, 437, 443, 450, 457, 464, 471, 478, 484, 490, 496, 502, 508, 514, 520, 526, 532, 538, 545, 552, 559 },
        { 566, 568, 573, 577, 583, 589, 595, 601, 607, 613, 619, 625, 631, 637, 643, 649, 655, 661, 668, 675, 682, 689, 696, 702, 708, 714, 720, 726, 732, 738, 744, 750, 756, 763, 770, 777 },
        { 784, 785, 788, 790, 794, 798, 802, 806, 810, 814, 818, 822, 826, 830, 834, 838, 842, 846, 851, 856, 861, 866, 871, 875, 879, 883, 887, 891, 895, 899, 903, 907, 911, 916, 921, 926 },
        { 931, 933, 938, 942, 948, 954, 960, 966, 972, 978, 984, 990, 996, 1002, 1008, 1014, 1020, 1026, 1033, 1040, 1047, 1054, 1061, 1067, 1073, 1079, 1085, 1091, 1097, 1103, 1109, 1115, 1121, 1128, 1135, 1142 },
        { 1149, 1151, 1156, 1160, 1166, 1172, 1178, 1184, 1190, 1196, 1202, 1208, 1214, 1220, 1226, 1232, 1238, 1244, 1251, 1258, 1265, 1272, 1279, 1285, 1291, 1297, 1303, 1309, 1315, 1321, 1327, 1333, 1339, 1346, 1353, 1360 },
        { 1367, 1369, 1374, 1378, 1384, 1390, 1396, 1402, 1408, 1414, 1420, 1426, 1432, 1438, 1444, 1450, 1457, 1464, 1471, 1478, 1484, 1490, 1496, 1502, 1508, 1514, 1520, 1526, 1533, 1540, 0, 0, 0, 0, 0, 0 },
        { 1547, 1549, 1554, 1558, 1564, 1570, 1576, 1582, 1588, 1594, 1600, 1606, 1612, 1618, 1624, 1631, 1638, 1645, 1652, 1658, 1664, 1670, 1676, 1682, 1688, 1694, 1701, 1708, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 1715, 1717, 1722, 1728, 1734, 1740, 1746, 1752, 1758, 1764, 1770, 1776, 1783, 1790, 1797, 1803, 1809, 1815, 1821, 1827, 1833, 1840, 1847, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 1854, 1856, 1860, 1866, 1872, 1878, 1884, 1890, 1896, 1902, 1909, 1916, 1922, 1928, 1934, 1940, 1946, 1953, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 1960, 1962, 1968, 1974, 1980, 1986, 1992, 1999, 2006, 2012, 2018, 2024, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 2031, 2033, 2039, 2045, 2052, 2058, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
         },
		// 11025 Hz sample rate
		{
        // Coefficient offsets
        // Generated by HRTFConv V5.90d on Thu Mar 11 16:40:08 1999
        { 2065, 2067, 2072, 2076, 2081, 2086, 2092, 2098, 2104, 2110, 2116, 2122, 2129, 2136, 2143, 2150, 2157, 2164, 2171, 2178, 2184, 2190, 2196, 2202, 2208, 2214, 2221, 2228, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 2235, 2237, 2242, 2246, 2251, 2256, 2262, 2268, 2274, 2280, 2286, 2292, 2297, 2304, 2311, 2318, 2325, 2332, 2339, 2346, 2353, 2359, 2365, 2371, 2377, 2383, 2389, 2395, 2402, 2409, 0, 0, 0, 0, 0, 0 },
        { 2416, 2418, 2423, 2427, 2432, 2437, 2442, 2448, 2454, 2460, 2466, 2472, 2478, 2484, 2489, 2496, 2503, 2510, 2517, 2524, 2531, 2538, 2545, 2552, 2559, 2565, 2571, 2577, 2583, 2589, 2595, 2601, 2607, 2614, 2621, 2628 },
        { 2635, 2637, 2642, 2646, 2651, 2656, 2661, 2667, 2673, 2679, 2685, 2691, 2697, 2703, 2708, 2715, 2722, 2729, 2736, 2743, 2750, 2757, 2764, 2771, 2778, 2784, 2790, 2796, 2802, 2808, 2814, 2820, 2826, 2833, 2840, 2847 },
        { 2854, 2855, 2858, 2860, 2863, 2866, 2869, 2873, 2877, 2881, 2885, 2889, 2893, 2897, 2900, 2905, 2910, 2915, 2920, 2925, 2930, 2935, 2940, 2945, 2950, 2954, 2958, 2962, 2966, 2970, 2974, 2978, 2982, 2987, 2992, 2997 },
        { 3002, 3004, 3009, 3013, 3018, 3023, 3028, 3034, 3040, 3046, 3052, 3058, 3064, 3070, 3075, 3082, 3089, 3096, 3103, 3110, 3117, 3124, 3131, 3138, 3145, 3151, 3157, 3163, 3169, 3175, 3181, 3187, 3193, 3200, 3207, 3214 },
        { 3221, 3223, 3228, 3232, 3237, 3242, 3247, 3253, 3259, 3265, 3271, 3277, 3283, 3289, 3294, 3301, 3308, 3315, 3322, 3329, 3336, 3343, 3350, 3357, 3364, 3370, 3376, 3382, 3388, 3394, 3400, 3406, 3412, 3419, 3426, 3433 },
        { 3440, 3442, 3447, 3451, 3456, 3461, 3467, 3473, 3479, 3485, 3491, 3497, 3502, 3509, 3516, 3523, 3530, 3537, 3544, 3551, 3558, 3564, 3570, 3576, 3582, 3588, 3594, 3600, 3607, 3614, 0, 0, 0, 0, 0, 0 },
        { 3621, 3623, 3628, 3632, 3637, 3642, 3648, 3654, 3660, 3666, 3672, 3678, 3685, 3692, 3699, 3706, 3713, 3720, 3727, 3734, 3740, 3746, 3752, 3758, 3764, 3770, 3777, 3784, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 3791, 3793, 3798, 3803, 3808, 3814, 3820, 3826, 3832, 3838, 3845, 3852, 3859, 3866, 3873, 3880, 3886, 3892, 3898, 3904, 3910, 3917, 3924, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 3931, 3933, 3937, 3942, 3948, 3954, 3960, 3966, 3973, 3980, 3987, 3994, 4001, 4007, 4013, 4019, 4025, 4032, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 4039, 4041, 4046, 4052, 4058, 4064, 4071, 4078, 4085, 4091, 4097, 4103, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 4110, 4112, 4117, 4123, 4130, 4136, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
		},
		
	    // 16000 Hz sample rate
	    {
	    // Coefficient offsets
        // Generated by HRTFConv V5.90d on Fri Mar 12 10:48:02 1999
        { 4143, 4145, 4151, 4155, 4161, 4167, 4173, 4179, 4185, 4192, 4199, 4206, 4213, 4220, 4227, 4234, 4241, 4248, 4255, 4262, 4269, 4276, 4283, 4290, 4296, 4302, 4309, 4316, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 4323, 4325, 4331, 4335, 4341, 4347, 4353, 4359, 4365, 4371, 4378, 4385, 4392, 4399, 4406, 4413, 4420, 4427, 4434, 4441, 4448, 4455, 4462, 4469, 4476, 4483, 4489, 4495, 4502, 4509, 0, 0, 0, 0, 0, 0 },
        { 4516, 4518, 4524, 4528, 4534, 4540, 4546, 4552, 4558, 4564, 4570, 4577, 4584, 4591, 4598, 4605, 4612, 4619, 4626, 4633, 4640, 4647, 4654, 4661, 4668, 4675, 4682, 4689, 4696, 4703, 4709, 4715, 4721, 4728, 4735, 4742 },
        { 4749, 4751, 4757, 4761, 4767, 4773, 4779, 4785, 4791, 4797, 4803, 4810, 4817, 4824, 4831, 4838, 4845, 4852, 4859, 4866, 4873, 4880, 4887, 4894, 4901, 4908, 4915, 4922, 4929, 4936, 4942, 4948, 4954, 4961, 4968, 4975 },
        { 4982, 4983, 4987, 4989, 4993, 4997, 5001, 5005, 5009, 5013, 5017, 5022, 5027, 5032, 5037, 5042, 5047, 5052, 5057, 5062, 5067, 5072, 5077, 5082, 5087, 5092, 5097, 5102, 5107, 5112, 5116, 5120, 5124, 5129, 5134, 5139 },
        { 5144, 5146, 5152, 5156, 5162, 5168, 5174, 5180, 5186, 5192, 5198, 5205, 5212, 5219, 5226, 5233, 5240, 5247, 5254, 5261, 5268, 5275, 5282, 5289, 5296, 5303, 5310, 5317, 5324, 5331, 5337, 5343, 5349, 5356, 5363, 5370 },
        { 5377, 5379, 5385, 5389, 5395, 5401, 5407, 5413, 5419, 5425, 5431, 5438, 5445, 5452, 5459, 5466, 5473, 5480, 5487, 5494, 5501, 5508, 5515, 5522, 5529, 5536, 5543, 5550, 5557, 5564, 5570, 5576, 5582, 5589, 5596, 5603 },
        { 5610, 5612, 5618, 5622, 5628, 5634, 5640, 5646, 5652, 5658, 5665, 5672, 5679, 5686, 5693, 5700, 5707, 5714, 5721, 5728, 5735, 5742, 5749, 5756, 5763, 5770, 5776, 5782, 5789, 5796, 0, 0, 0, 0, 0, 0 },
        { 5803, 5805, 5811, 5815, 5821, 5827, 5833, 5839, 5845, 5852, 5859, 5866, 5873, 5880, 5887, 5894, 5901, 5908, 5915, 5922, 5929, 5936, 5943, 5950, 5956, 5962, 5969, 5976, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 5983, 5985, 5991, 5997, 6003, 6009, 6015, 6021, 6028, 6035, 6042, 6049, 6056, 6063, 6070, 6077, 6084, 6091, 6098, 6105, 6111, 6118, 6125, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 6132, 6134, 6138, 6144, 6150, 6156, 6163, 6170, 6177, 6184, 6191, 6198, 6205, 6212, 6219, 6226, 6232, 6239, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 6246, 6248, 6254, 6260, 6266, 6273, 6280, 6287, 6294, 6301, 6308, 6314, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 6321, 6323, 6329, 6335, 6342, 6349, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }        
            },	
        // 22050 Hz sample rate
        {
         // Coefficient offsets
        // Generated by HRTFConv V5.90d on Fri Mar 12 10:51:28 1999
        { 6356, 6359, 6365, 6369, 6375, 6381, 6388, 6395, 6402, 6409, 6416, 6423, 6430, 6437, 6444, 6451, 6458, 6465, 6472, 6479, 6486, 6493, 6500, 6507, 6514, 6520, 6527, 6534, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 6541, 6544, 6550, 6554, 6560, 6566, 6573, 6580, 6587, 6594, 6601, 6608, 6615, 6622, 6629, 6636, 6643, 6650, 6657, 6664, 6671, 6678, 6685, 6692, 6699, 6706, 6712, 6718, 6725, 6732, 0, 0, 0, 0, 0, 0 },
        { 6739, 6742, 6748, 6752, 6758, 6764, 6770, 6777, 6784, 6791, 6798, 6805, 6812, 6819, 6826, 6833, 6840, 6847, 6854, 6861, 6868, 6875, 6882, 6889, 6896, 6903, 6910, 6917, 6924, 6931, 6938, 6944, 6950, 6957, 6964, 6971 },
        { 6978, 6981, 6987, 6991, 6997, 7003, 7009, 7016, 7023, 7030, 7037, 7044, 7051, 7058, 7065, 7072, 7079, 7086, 7093, 7100, 7107, 7114, 7121, 7128, 7135, 7142, 7149, 7156, 7163, 7170, 7177, 7183, 7189, 7196, 7203, 7210 },
        { 7217, 7219, 7223, 7225, 7229, 7233, 7237, 7242, 7247, 7252, 7257, 7262, 7267, 7272, 7277, 7282, 7287, 7292, 7297, 7302, 7307, 7312, 7317, 7322, 7327, 7332, 7337, 7342, 7347, 7352, 7357, 7361, 7365, 7370, 7375, 7380 },
        { 7385, 7388, 7394, 7398, 7404, 7410, 7416, 7423, 7430, 7437, 7444, 7451, 7458, 7465, 7472, 7479, 7486, 7493, 7500, 7507, 7514, 7521, 7528, 7535, 7542, 7549, 7556, 7563, 7570, 7577, 7584, 7590, 7596, 7603, 7610, 7617 },
        { 7624, 7627, 7633, 7637, 7643, 7649, 7655, 7662, 7669, 7676, 7683, 7690, 7697, 7704, 7711, 7718, 7725, 7732, 7739, 7746, 7753, 7760, 7767, 7774, 7781, 7788, 7795, 7802, 7809, 7816, 7823, 7829, 7835, 7842, 7849, 7856 },
        { 7863, 7866, 7872, 7876, 7882, 7888, 7895, 7902, 7909, 7916, 7923, 7930, 7937, 7944, 7951, 7958, 7965, 7972, 7979, 7986, 7993, 8000, 8007, 8014, 8021, 8028, 8034, 8040, 8047, 8054, 0, 0, 0, 0, 0, 0 },
        { 8061, 8064, 8070, 8074, 8080, 8086, 8093, 8100, 8107, 8114, 8121, 8128, 8135, 8142, 8149, 8156, 8163, 8170, 8177, 8184, 8191, 8198, 8205, 8212, 8219, 8225, 8232, 8239, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 8246, 8249, 8255, 8261, 8267, 8274, 8281, 8288, 8295, 8302, 8309, 8316, 8323, 8330, 8337, 8344, 8351, 8358, 8365, 8372, 8378, 8385, 8392, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 8399, 8402, 8406, 8412, 8419, 8426, 8433, 8440, 8447, 8454, 8461, 8468, 8475, 8482, 8489, 8496, 8502, 8509, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 8516, 8519, 8525, 8532, 8539, 8546, 8553, 8560, 8567, 8574, 8581, 8587, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 8594, 8597, 8603, 8610, 8617, 8624, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        },		
		// 32000 Hz sample rate
		{
	    // Coefficient offsets
        // Generated by HRTFConv V5.90d on Fri Mar 12 10:54:50 1999
        { 8631, 8634, 8640, 8644, 8650, 8656, 8663, 8670, 8677, 8684, 8691, 8698, 8705, 8712, 8719, 8726, 8733, 8740, 8747, 8754, 8761, 8768, 8775, 8782, 8789, 8796, 8803, 8810, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 8817, 8820, 8826, 8830, 8836, 8842, 8849, 8856, 8863, 8870, 8877, 8884, 8891, 8898, 8905, 8912, 8919, 8926, 8933, 8940, 8947, 8954, 8961, 8968, 8975, 8982, 8989, 8995, 9002, 9009, 0, 0, 0, 0, 0, 0 },
        { 9016, 9019, 9025, 9029, 9035, 9041, 9047, 9054, 9061, 9068, 9075, 9082, 9089, 9096, 9103, 9110, 9117, 9124, 9131, 9138, 9145, 9152, 9159, 9166, 9173, 9180, 9187, 9194, 9201, 9208, 9215, 9222, 9228, 9235, 9242, 9249 },
        { 9256, 9259, 9265, 9269, 9275, 9281, 9287, 9294, 9301, 9308, 9315, 9322, 9329, 9336, 9343, 9350, 9357, 9364, 9371, 9378, 9385, 9392, 9399, 9406, 9413, 9420, 9427, 9434, 9441, 9448, 9455, 9462, 9468, 9475, 9482, 9489 },
        { 9496, 9498, 9502, 9504, 9508, 9512, 9516, 9521, 9526, 9531, 9536, 9541, 9546, 9551, 9556, 9561, 9566, 9571, 9576, 9581, 9586, 9591, 9596, 9601, 9606, 9611, 9616, 9621, 9626, 9631, 9636, 9641, 9645, 9650, 9655, 9660 },
        { 9665, 9668, 9674, 9678, 9684, 9690, 9696, 9703, 9710, 9717, 9724, 9731, 9738, 9745, 9752, 9759, 9766, 9773, 9780, 9787, 9794, 9801, 9808, 9815, 9822, 9829, 9836, 9843, 9850, 9857, 9864, 9871, 9877, 9884, 9891, 9898 },
        { 9905, 9908, 9914, 9918, 9924, 9930, 9936, 9943, 9950, 9957, 9964, 9971, 9978, 9985, 9992, 9999, 10006, 10013, 10020, 10027, 10034, 10041, 10048, 10055, 10062, 10069, 10076, 10083, 10090, 10097, 10104, 10111, 10117, 10124, 10131, 10138 },
        { 10145, 10148, 10154, 10158, 10164, 10170, 10177, 10184, 10191, 10198, 10205, 10212, 10219, 10226, 10233, 10240, 10247, 10254, 10261, 10268, 10275, 10282, 10289, 10296, 10303, 10310, 10317, 10323, 10330, 10337, 0, 0, 0, 0, 0, 0 },
        { 10344, 10347, 10353, 10357, 10363, 10369, 10376, 10383, 10390, 10397, 10404, 10411, 10418, 10425, 10432, 10439, 10446, 10453, 10460, 10467, 10474, 10481, 10488, 10495, 10502, 10509, 10516, 10523, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 10530, 10533, 10539, 10545, 10551, 10558, 10565, 10572, 10579, 10586, 10593, 10600, 10607, 10614, 10621, 10628, 10635, 10642, 10649, 10656, 10663, 10670, 10677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 10684, 10687, 10691, 10697, 10704, 10711, 10718, 10725, 10732, 10739, 10746, 10753, 10760, 10767, 10774, 10781, 10788, 10795, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 10802, 10805, 10811, 10818, 10825, 10832, 10839, 10846, 10853, 10860, 10867, 10874, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 10881, 10884, 10890, 10897, 10904, 10911, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        },
		{
		// 44100 Hz sample rate
	   	 // Coefficient offsets
        // Generated by HRTFConv V5.90d on Fri Mar 12 10:58:17 1999
        { 10918, 10922, 10929, 10933, 10940, 10947, 10954, 10961, 10968, 10975, 10982, 10989, 10996, 11003, 11010, 11017, 11024, 11031, 11038, 11045, 11052, 11058, 11064, 11070, 11076, 11082, 11089, 11096, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 11103, 11107, 11114, 11118, 11125, 11132, 11139, 11146, 11153, 11160, 11167, 11174, 11181, 11188, 11195, 11202, 11209, 11216, 11223, 11230, 11237, 11244, 11250, 11256, 11262, 11268, 11274, 11280, 11287, 11294, 0, 0, 0, 0, 0, 0 },
        { 11301, 11305, 11312, 11316, 11323, 11330, 11337, 11344, 11351, 11358, 11365, 11372, 11379, 11386, 11393, 11400, 11407, 11414, 11421, 11428, 11435, 11442, 11449, 11456, 11463, 11470, 11476, 11482, 11488, 11494, 11500, 11506, 11512, 11519, 11526, 11533 },
        { 11540, 11544, 11551, 11555, 11562, 11569, 11576, 11583, 11590, 11597, 11604, 11611, 11618, 11625, 11632, 11639, 11646, 11653, 11660, 11667, 11674, 11681, 11688, 11695, 11702, 11709, 11715, 11721, 11727, 11733, 11739, 11745, 11751, 11758, 11765, 11772 },
        { 11779, 11782, 11787, 11789, 11794, 11799, 11804, 11809, 11814, 11819, 11824, 11829, 11834, 11839, 11844, 11849, 11854, 11859, 11864, 11869, 11874, 11879, 11884, 11889, 11894, 11899, 11903, 11907, 11911, 11915, 11919, 11923, 11927, 11932, 11937, 11942 },
        { 11947, 11951, 11958, 11962, 11969, 11976, 11983, 11990, 11997, 12004, 12011, 12018, 12025, 12032, 12039, 12046, 12053, 12060, 12067, 12074, 12081, 12088, 12095, 12102, 12109, 12116, 12122, 12128, 12134, 12140, 12146, 12152, 12158, 12165, 12172, 12179 },
        { 12186, 12190, 12197, 12201, 12208, 12215, 12222, 12229, 12236, 12243, 12250, 12257, 12264, 12271, 12278, 12285, 12292, 12299, 12306, 12313, 12320, 12327, 12334, 12341, 12348, 12355, 12361, 12367, 12373, 12379, 12385, 12391, 12397, 12404, 12411, 12418 },
        { 12425, 12429, 12436, 12440, 12447, 12454, 12461, 12468, 12475, 12482, 12489, 12496, 12503, 12510, 12517, 12524, 12531, 12538, 12545, 12552, 12559, 12566, 12572, 12578, 12584, 12590, 12596, 12602, 12609, 12616, 0, 0, 0, 0, 0, 0 },
        { 12623, 12627, 12634, 12638, 12645, 12652, 12659, 12666, 12673, 12680, 12687, 12694, 12701, 12708, 12715, 12722, 12729, 12736, 12743, 12750, 12757, 12763, 12769, 12775, 12781, 12787, 12794, 12801, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 12808, 12812, 12819, 12826, 12833, 12840, 12847, 12854, 12861, 12868, 12875, 12882, 12889, 12896, 12903, 12910, 12917, 12923, 12929, 12935, 12941, 12948, 12955, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 12962, 12966, 12970, 12977, 12984, 12991, 12998, 13005, 13012, 13019, 13026, 13033, 13040, 13047, 13053, 13059, 13065, 13072, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 13079, 13083, 13090, 13097, 13104, 13111, 13118, 13125, 13132, 13139, 13145, 13151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 13158, 13162, 13169, 13176, 13183, 13190, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
	   	},
	   	// 48000 Hz sample rate
	   	{
		  // Coefficient offsets
        // Generated by HRTFConv V5.90d on Fri Mar 12 11:00:29 1999
        { 13197, 13201, 13208, 13212, 13219, 13226, 13233, 13240, 13247, 13254, 13261, 13268, 13275, 13282, 13289, 13296, 13303, 13310, 13317, 13324, 13331, 13337, 13343, 13349, 13355, 13361, 13368, 13375, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 13382, 13386, 13393, 13397, 13404, 13411, 13418, 13425, 13432, 13439, 13446, 13453, 13460, 13467, 13474, 13481, 13488, 13495, 13502, 13509, 13516, 13523, 13529, 13535, 13541, 13547, 13553, 13559, 13566, 13573, 0, 0, 0, 0, 0, 0 },
        { 13580, 13584, 13591, 13595, 13602, 13609, 13616, 13623, 13630, 13637, 13644, 13651, 13658, 13665, 13672, 13679, 13686, 13693, 13700, 13707, 13714, 13721, 13728, 13735, 13742, 13749, 13755, 13761, 13767, 13773, 13779, 13785, 13791, 13798, 13805, 13812 },
        { 13819, 13823, 13830, 13834, 13841, 13848, 13855, 13862, 13869, 13876, 13883, 13890, 13897, 13904, 13911, 13918, 13925, 13932, 13939, 13946, 13953, 13960, 13967, 13974, 13981, 13988, 13994, 14000, 14006, 14012, 14018, 14024, 14030, 14037, 14044, 14051 },
        { 14058, 14061, 14066, 14068, 14073, 14078, 14083, 14088, 14093, 14098, 14103, 14108, 14113, 14118, 14123, 14128, 14133, 14138, 14143, 14148, 14153, 14158, 14163, 14168, 14173, 14178, 14182, 14186, 14190, 14194, 14198, 14202, 14206, 14211, 14216, 14221 },
        { 14226, 14230, 14237, 14241, 14248, 14255, 14262, 14269, 14276, 14283, 14290, 14297, 14304, 14311, 14318, 14325, 14332, 14339, 14346, 14353, 14360, 14367, 14374, 14381, 14388, 14395, 14401, 14407, 14413, 14419, 14425, 14431, 14437, 14444, 14451, 14458 },
        { 14465, 14469, 14476, 14480, 14487, 14494, 14501, 14508, 14515, 14522, 14529, 14536, 14543, 14550, 14557, 14564, 14571, 14578, 14585, 14592, 14599, 14606, 14613, 14620, 14627, 14634, 14640, 14646, 14652, 14658, 14664, 14670, 14676, 14683, 14690, 14697 },
        { 14704, 14708, 14715, 14719, 14726, 14733, 14740, 14747, 14754, 14761, 14768, 14775, 14782, 14789, 14796, 14803, 14810, 14817, 14824, 14831, 14838, 14845, 14851, 14857, 14863, 14869, 14875, 14881, 14888, 14895, 0, 0, 0, 0, 0, 0 },
        { 14902, 14906, 14913, 14917, 14924, 14931, 14938, 14945, 14952, 14959, 14966, 14973, 14980, 14987, 14994, 15001, 15008, 15015, 15022, 15029, 15036, 15042, 15048, 15054, 15060, 15066, 15073, 15080, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 15087, 15091, 15098, 15105, 15112, 15119, 15126, 15133, 15140, 15147, 15154, 15161, 15168, 15175, 15182, 15189, 15196, 15202, 15208, 15214, 15220, 15227, 15234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 15241, 15245, 15249, 15256, 15263, 15270, 15277, 15284, 15291, 15298, 15305, 15312, 15319, 15326, 15332, 15338, 15344, 15351, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 15358, 15362, 15369, 15376, 15383, 15390, 15397, 15404, 15411, 15418, 15424, 15430, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 15437, 15441, 15448, 15455, 15462, 15469, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
		}
		},
	

		// 20 degrees loudspeakers
		{
	     //8000 Hz sample rate
		 {
		  // Coefficient offsets
        // Generated by HRTFConv V5.90d on Wed Mar 03 18:18:24 1999
        { 0, 3, 8, 13, 18, 23, 28, 33, 38, 44, 50, 56, 64, 72, 80, 88, 96, 104, 112, 119, 126, 132, 138, 144, 150, 156, 163, 170, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 177, 180, 185, 190, 195, 199, 204, 209, 214, 219, 225, 231, 238, 246, 254, 262, 270, 278, 286, 294, 301, 308, 314, 320, 326, 332, 338, 344, 351, 358, 0, 0, 0, 0, 0, 0 },
        { 365, 368, 373, 378, 383, 387, 392, 397, 402, 407, 412, 418, 424, 430, 437, 445, 453, 461, 469, 477, 485, 493, 501, 508, 515, 522, 528, 534, 540, 546, 552, 558, 564, 571, 578, 585 },
        { 592, 595, 600, 605, 610, 614, 619, 624, 629, 634, 639, 645, 651, 657, 664, 672, 680, 688, 696, 704, 712, 720, 728, 735, 742, 749, 755, 761, 767, 773, 779, 785, 791, 798, 805, 812 },
        { 819, 821, 824, 827, 830, 832, 835, 838, 841, 844, 847, 851, 855, 859, 864, 870, 876, 882, 888, 894, 900, 906, 912, 917, 922, 927, 931, 935, 939, 943, 947, 951, 955, 960, 965, 970 },
        { 975, 978, 983, 988, 993, 997, 1002, 1007, 1012, 1017, 1022, 1028, 1034, 1040, 1047, 1055, 1063, 1071, 1079, 1087, 1095, 1103, 1111, 1118, 1125, 1132, 1138, 1144, 1150, 1156, 1162, 1168, 1174, 1181, 1188, 1195 },
        { 1202, 1205, 1210, 1215, 1220, 1224, 1229, 1234, 1239, 1244, 1249, 1255, 1261, 1267, 1274, 1282, 1290, 1298, 1306, 1314, 1322, 1330, 1338, 1345, 1352, 1359, 1365, 1371, 1377, 1383, 1389, 1395, 1401, 1408, 1415, 1422 },
        { 1429, 1432, 1437, 1442, 1447, 1451, 1456, 1461, 1466, 1471, 1477, 1483, 1490, 1498, 1506, 1514, 1522, 1530, 1538, 1546, 1553, 1560, 1566, 1572, 1578, 1584, 1590, 1596, 1603, 1610, 0, 0, 0, 0, 0, 0 },
        { 1617, 1620, 1625, 1630, 1635, 1640, 1645, 1650, 1655, 1661, 1667, 1673, 1681, 1689, 1697, 1705, 1713, 1721, 1729, 1736, 1743, 1749, 1755, 1761, 1767, 1773, 1780, 1787, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 1794, 1797, 1802, 1807, 1811, 1816, 1821, 1826, 1832, 1838, 1846, 1854, 1862, 1870, 1878, 1885, 1892, 1898, 1904, 1910, 1916, 1923, 1930, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 1937, 1940, 1945, 1949, 1954, 1959, 1965, 1971, 1979, 1987, 1995, 2003, 2010, 2017, 2023, 2029, 2035, 2042, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 2049, 2052, 2057, 2062, 2067, 2073, 2081, 2089, 2097, 2104, 2110, 2116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 2123, 2126, 2131, 2136, 2144, 2151, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
		 },	   	   
	   	// 11025 Hz sample rate
		{
        // Coefficient offsets
        // Generated by HRTFConv V5.90d on Fri Mar 12 11:11:28 1999
        { 2158, 2161, 2167, 2173, 2179, 2186, 2193, 2200, 2206, 2214, 2222, 2230, 2238, 2246, 2254, 2262, 2270, 2278, 2286, 2293, 2300, 2307, 2314, 2321, 2328, 2335, 2342, 2349, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 2356, 2359, 2365, 2371, 2377, 2381, 2388, 2395, 2402, 2408, 2416, 2424, 2432, 2440, 2448, 2456, 2464, 2472, 2480, 2488, 2495, 2502, 2509, 2516, 2523, 2530, 2537, 2544, 2551, 2558, 0, 0, 0, 0, 0, 0 },
        { 2565, 2568, 2574, 2580, 2586, 2590, 2597, 2604, 2611, 2618, 2624, 2632, 2640, 2648, 2656, 2664, 2672, 2680, 2688, 2696, 2704, 2712, 2720, 2727, 2734, 2741, 2748, 2755, 2762, 2769, 2776, 2783, 2790, 2797, 2804, 2811 },
        { 2818, 2821, 2827, 2833, 2839, 2843, 2850, 2857, 2864, 2871, 2877, 2885, 2893, 2901, 2909, 2917, 2925, 2933, 2941, 2949, 2957, 2965, 2973, 2980, 2987, 2994, 3001, 3008, 3015, 3022, 3029, 3036, 3043, 3050, 3057, 3064 },
        { 3071, 3073, 3077, 3081, 3085, 3087, 3092, 3097, 3102, 3107, 3111, 3117, 3123, 3129, 3135, 3141, 3147, 3153, 3159, 3165, 3171, 3177, 3183, 3188, 3193, 3198, 3203, 3208, 3213, 3218, 3223, 3228, 3233, 3238, 3243, 3248 },
        { 3253, 3256, 3262, 3268, 3274, 3278, 3285, 3292, 3299, 3306, 3312, 3320, 3328, 3336, 3344, 3352, 3360, 3368, 3376, 3384, 3392, 3400, 3408, 3415, 3422, 3429, 3436, 3443, 3450, 3457, 3464, 3471, 3478, 3485, 3492, 3499 },
        { 3506, 3509, 3515, 3521, 3527, 3531, 3538, 3545, 3552, 3559, 3565, 3573, 3581, 3589, 3597, 3605, 3613, 3621, 3629, 3637, 3645, 3653, 3661, 3668, 3675, 3682, 3689, 3696, 3703, 3710, 3717, 3724, 3731, 3738, 3745, 3752 },
        { 3759, 3762, 3768, 3774, 3780, 3784, 3791, 3798, 3805, 3811, 3819, 3827, 3835, 3843, 3851, 3859, 3867, 3875, 3883, 3891, 3898, 3905, 3912, 3919, 3926, 3933, 3940, 3947, 3954, 3961, 0, 0, 0, 0, 0, 0 },
        { 3968, 3971, 3977, 3983, 3989, 3996, 4003, 4010, 4016, 4024, 4032, 4040, 4048, 4056, 4064, 4072, 4080, 4088, 4096, 4103, 4110, 4117, 4124, 4131, 4138, 4145, 4152, 4159, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 4166, 4169, 4175, 4181, 4185, 4192, 4199, 4205, 4213, 4221, 4229, 4237, 4245, 4253, 4261, 4268, 4275, 4282, 4289, 4296, 4303, 4310, 4317, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 4324, 4327, 4333, 4337, 4344, 4351, 4359, 4367, 4375, 4383, 4391, 4399, 4406, 4413, 4420, 4427, 4434, 4441, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 4448, 4451, 4457, 4464, 4470, 4478, 4486, 4494, 4502, 4509, 4516, 4523, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 4530, 4533, 4539, 4546, 4554, 4561, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        },
		// 16000 Hz sample rate
		{
    	// Coefficient offsets
        // Generated by HRTFConv V5.90d on Fri Mar 12 11:15:09 1999
        { 4568, 4571, 4576, 4581, 4586, 4592, 4598, 4604, 4610, 4617, 4624, 4631, 4639, 4647, 4655, 4663, 4671, 4679, 4687, 4694, 4701, 4708, 4715, 4722, 4729, 4736, 4743, 4750, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 4757, 4760, 4765, 4770, 4775, 4779, 4785, 4791, 4797, 4803, 4810, 4817, 4825, 4833, 4841, 4849, 4857, 4865, 4873, 4881, 4888, 4895, 4902, 4909, 4916, 4923, 4930, 4937, 4944, 4951, 0, 0, 0, 0, 0, 0 },
        { 4958, 4961, 4966, 4971, 4976, 4980, 4986, 4992, 4998, 5004, 5010, 5017, 5024, 5031, 5039, 5047, 5055, 5063, 5071, 5079, 5087, 5095, 5103, 5110, 5117, 5124, 5131, 5138, 5145, 5152, 5159, 5166, 5173, 5180, 5187, 5194 },
        { 5201, 5204, 5209, 5214, 5219, 5223, 5229, 5235, 5241, 5247, 5253, 5260, 5267, 5274, 5282, 5290, 5298, 5306, 5314, 5322, 5330, 5338, 5346, 5353, 5360, 5367, 5374, 5381, 5388, 5395, 5402, 5409, 5416, 5423, 5430, 5437 },
        { 5444, 5446, 5449, 5452, 5455, 5457, 5461, 5465, 5469, 5473, 5477, 5482, 5487, 5492, 5498, 5504, 5510, 5516, 5522, 5528, 5534, 5540, 5546, 5551, 5556, 5561, 5566, 5571, 5576, 5581, 5586, 5591, 5596, 5601, 5606, 5611 },
        { 5616, 5619, 5624, 5629, 5634, 5638, 5644, 5650, 5656, 5662, 5668, 5675, 5682, 5689, 5697, 5705, 5713, 5721, 5729, 5737, 5745, 5753, 5761, 5768, 5775, 5782, 5789, 5796, 5803, 5810, 5817, 5824, 5831, 5838, 5845, 5852 },
        { 5859, 5862, 5867, 5872, 5877, 5881, 5887, 5893, 5899, 5905, 5911, 5918, 5925, 5932, 5940, 5948, 5956, 5964, 5972, 5980, 5988, 5996, 6004, 6011, 6018, 6025, 6032, 6039, 6046, 6053, 6060, 6067, 6074, 6081, 6088, 6095 },
        { 6102, 6105, 6110, 6115, 6120, 6124, 6130, 6136, 6142, 6148, 6155, 6162, 6170, 6178, 6186, 6194, 6202, 6210, 6218, 6226, 6233, 6240, 6247, 6254, 6261, 6268, 6275, 6282, 6289, 6296, 0, 0, 0, 0, 0, 0 },
        { 6303, 6306, 6311, 6316, 6321, 6327, 6333, 6339, 6345, 6352, 6359, 6366, 6374, 6382, 6390, 6398, 6406, 6414, 6422, 6429, 6436, 6443, 6450, 6457, 6464, 6471, 6478, 6485, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 6492, 6495, 6500, 6505, 6509, 6515, 6521, 6527, 6534, 6541, 6549, 6557, 6565, 6573, 6581, 6588, 6595, 6602, 6609, 6616, 6623, 6630, 6637, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 6644, 6647, 6652, 6656, 6662, 6668, 6675, 6682, 6690, 6698, 6706, 6714, 6721, 6728, 6735, 6742, 6749, 6756, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 6763, 6766, 6771, 6777, 6783, 6790, 6798, 6806, 6814, 6821, 6828, 6835, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 6842, 6845, 6850, 6856, 6864, 6871, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
		},
		// 22050 Hz sample rate
		{ 
		 // Coefficient offsets
        // Generated by HRTFConv V5.90d on Fri Mar 12 11:20:37 1999
        { 6878, 6881, 6887, 6893, 6899, 6905, 6911, 6917, 6923, 6930, 6937, 6944, 6952, 6960, 6968, 6976, 6984, 6992, 7000, 7007, 7014, 7021, 7028, 7035, 7042, 7049, 7056, 7063, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 7070, 7073, 7079, 7085, 7091, 7095, 7101, 7107, 7113, 7119, 7126, 7133, 7141, 7149, 7157, 7165, 7173, 7181, 7189, 7197, 7204, 7211, 7218, 7225, 7232, 7239, 7246, 7253, 7260, 7267, 0, 0, 0, 0, 0, 0 },
        { 7274, 7277, 7283, 7289, 7295, 7299, 7305, 7311, 7317, 7323, 7329, 7336, 7343, 7350, 7358, 7366, 7374, 7382, 7390, 7398, 7406, 7414, 7422, 7429, 7436, 7443, 7450, 7457, 7464, 7471, 7478, 7485, 7492, 7499, 7506, 7513 },
        { 7520, 7523, 7529, 7535, 7541, 7545, 7551, 7557, 7563, 7569, 7575, 7582, 7589, 7596, 7604, 7612, 7620, 7628, 7636, 7644, 7652, 7660, 7668, 7675, 7682, 7689, 7696, 7703, 7710, 7717, 7724, 7731, 7738, 7745, 7752, 7759 },
        { 7766, 7768, 7772, 7776, 7780, 7782, 7786, 7790, 7794, 7798, 7802, 7807, 7812, 7817, 7823, 7829, 7835, 7841, 7847, 7853, 7859, 7865, 7871, 7876, 7881, 7886, 7891, 7896, 7901, 7906, 7911, 7916, 7921, 7926, 7931, 7936 },
        { 7941, 7944, 7950, 7956, 7962, 7966, 7972, 7978, 7984, 7990, 7996, 8003, 8010, 8017, 8025, 8033, 8041, 8049, 8057, 8065, 8073, 8081, 8089, 8096, 8103, 8110, 8117, 8124, 8131, 8138, 8145, 8152, 8159, 8166, 8173, 8180 },
        { 8187, 8190, 8196, 8202, 8208, 8212, 8218, 8224, 8230, 8236, 8242, 8249, 8256, 8263, 8271, 8279, 8287, 8295, 8303, 8311, 8319, 8327, 8335, 8342, 8349, 8356, 8363, 8370, 8377, 8384, 8391, 8398, 8405, 8412, 8419, 8426 },
        { 8433, 8436, 8442, 8448, 8454, 8458, 8464, 8470, 8476, 8482, 8489, 8496, 8504, 8512, 8520, 8528, 8536, 8544, 8552, 8560, 8567, 8574, 8581, 8588, 8595, 8602, 8609, 8616, 8623, 8630, 0, 0, 0, 0, 0, 0 },
        { 8637, 8640, 8646, 8652, 8658, 8664, 8670, 8676, 8682, 8689, 8696, 8703, 8711, 8719, 8727, 8735, 8743, 8751, 8759, 8766, 8773, 8780, 8787, 8794, 8801, 8808, 8815, 8822, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 8829, 8832, 8838, 8844, 8848, 8854, 8860, 8866, 8873, 8880, 8888, 8896, 8904, 8912, 8920, 8927, 8934, 8941, 8948, 8955, 8962, 8969, 8976, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 8983, 8986, 8992, 8996, 9002, 9008, 9015, 9022, 9030, 9038, 9046, 9054, 9061, 9068, 9075, 9082, 9089, 9096, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 9103, 9106, 9112, 9118, 9124, 9131, 9139, 9147, 9155, 9162, 9169, 9176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 9183, 9186, 9192, 9198, 9206, 9213, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
      	},
		// 32000 Hz sample rate
		{
		 // Coefficient offsets
        // Generated by HRTFConv V5.90d on Fri Mar 12 11:23:29 1999
        { 9220, 9223, 9229, 9235, 9241, 9247, 9253, 9259, 9265, 9272, 9279, 9286, 9294, 9302, 9310, 9318, 9326, 9334, 9342, 9349, 9356, 9363, 9370, 9377, 9384, 9391, 9398, 9405, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 9412, 9415, 9421, 9427, 9433, 9437, 9443, 9449, 9455, 9461, 9468, 9475, 9483, 9491, 9499, 9507, 9515, 9523, 9531, 9539, 9546, 9553, 9560, 9567, 9574, 9581, 9588, 9595, 9602, 9609, 0, 0, 0, 0, 0, 0 },
        { 9616, 9619, 9625, 9631, 9637, 9641, 9647, 9653, 9659, 9665, 9671, 9678, 9685, 9692, 9700, 9708, 9716, 9724, 9732, 9740, 9748, 9756, 9764, 9771, 9778, 9785, 9792, 9799, 9806, 9813, 9820, 9827, 9834, 9841, 9848, 9855 },
        { 9862, 9865, 9871, 9877, 9883, 9887, 9893, 9899, 9905, 9911, 9917, 9924, 9931, 9938, 9946, 9954, 9962, 9970, 9978, 9986, 9994, 10002, 10010, 10017, 10024, 10031, 10038, 10045, 10052, 10059, 10066, 10073, 10080, 10087, 10094, 10101 },
        { 10108, 10110, 10114, 10118, 10122, 10124, 10128, 10132, 10136, 10140, 10144, 10149, 10154, 10159, 10165, 10171, 10177, 10183, 10189, 10195, 10201, 10207, 10213, 10218, 10223, 10228, 10233, 10238, 10243, 10248, 10253, 10258, 10263, 10268, 10273, 10278 },
        { 10283, 10286, 10292, 10298, 10304, 10308, 10314, 10320, 10326, 10332, 10338, 10345, 10352, 10359, 10367, 10375, 10383, 10391, 10399, 10407, 10415, 10423, 10431, 10438, 10445, 10452, 10459, 10466, 10473, 10480, 10487, 10494, 10501, 10508, 10515, 10522 },
        { 10529, 10532, 10538, 10544, 10550, 10554, 10560, 10566, 10572, 10578, 10584, 10591, 10598, 10605, 10613, 10621, 10629, 10637, 10645, 10653, 10661, 10669, 10677, 10684, 10691, 10698, 10705, 10712, 10719, 10726, 10733, 10740, 10747, 10754, 10761, 10768 },
        { 10775, 10778, 10784, 10790, 10796, 10800, 10806, 10812, 10818, 10824, 10831, 10838, 10846, 10854, 10862, 10870, 10878, 10886, 10894, 10902, 10909, 10916, 10923, 10930, 10937, 10944, 10951, 10958, 10965, 10972, 0, 0, 0, 0, 0, 0 },
        { 10979, 10982, 10988, 10994, 11000, 11006, 11012, 11018, 11024, 11031, 11038, 11045, 11053, 11061, 11069, 11077, 11085, 11093, 11101, 11108, 11115, 11122, 11129, 11136, 11143, 11150, 11157, 11164, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 11171, 11174, 11180, 11186, 11190, 11196, 11202, 11208, 11215, 11222, 11230, 11238, 11246, 11254, 11262, 11269, 11276, 11283, 11290, 11297, 11304, 11311, 11318, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 11325, 11328, 11334, 11338, 11344, 11350, 11357, 11364, 11372, 11380, 11388, 11396, 11403, 11410, 11417, 11424, 11431, 11438, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 11445, 11448, 11454, 11460, 11466, 11473, 11481, 11489, 11497, 11504, 11511, 11518, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 11525, 11528, 11534, 11540, 11548, 11555, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
		},
		// 44100 Hz sample rate
		{
		 // Coefficient offsets
        // Generated by HRTFConv V5.90d on Fri Mar 12 11:26:10 1999
        { 11562, 11565, 11571, 11577, 11583, 11589, 11595, 11601, 11607, 11614, 11621, 11628, 11636, 11644, 11652, 11660, 11668, 11676, 11684, 11691, 11698, 11705, 11712, 11719, 11726, 11733, 11740, 11747, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 11754, 11757, 11763, 11769, 11775, 11779, 11785, 11791, 11797, 11803, 11810, 11817, 11825, 11833, 11841, 11849, 11857, 11865, 11873, 11881, 11888, 11895, 11902, 11909, 11916, 11923, 11930, 11937, 11944, 11951, 0, 0, 0, 0, 0, 0 },
        { 11958, 11961, 11967, 11973, 11979, 11983, 11989, 11995, 12001, 12007, 12013, 12020, 12027, 12034, 12042, 12050, 12058, 12066, 12074, 12082, 12090, 12098, 12106, 12113, 12120, 12127, 12134, 12141, 12148, 12155, 12162, 12169, 12176, 12183, 12190, 12197 },
        { 12204, 12207, 12213, 12219, 12225, 12229, 12235, 12241, 12247, 12253, 12259, 12266, 12273, 12280, 12288, 12296, 12304, 12312, 12320, 12328, 12336, 12344, 12352, 12359, 12366, 12373, 12380, 12387, 12394, 12401, 12408, 12415, 12422, 12429, 12436, 12443 },
        { 12450, 12452, 12456, 12460, 12464, 12466, 12470, 12474, 12478, 12482, 12486, 12491, 12496, 12501, 12507, 12513, 12519, 12525, 12531, 12537, 12543, 12549, 12555, 12560, 12565, 12570, 12575, 12580, 12585, 12590, 12595, 12600, 12605, 12610, 12615, 12620 },
        { 12625, 12628, 12634, 12640, 12646, 12650, 12656, 12662, 12668, 12674, 12680, 12687, 12694, 12701, 12709, 12717, 12725, 12733, 12741, 12749, 12757, 12765, 12773, 12780, 12787, 12794, 12801, 12808, 12815, 12822, 12829, 12836, 12843, 12850, 12857, 12864 },
        { 12871, 12874, 12880, 12886, 12892, 12896, 12902, 12908, 12914, 12920, 12926, 12933, 12940, 12947, 12955, 12963, 12971, 12979, 12987, 12995, 13003, 13011, 13019, 13026, 13033, 13040, 13047, 13054, 13061, 13068, 13075, 13082, 13089, 13096, 13103, 13110 },
        { 13117, 13120, 13126, 13132, 13138, 13142, 13148, 13154, 13160, 13166, 13173, 13180, 13188, 13196, 13204, 13212, 13220, 13228, 13236, 13244, 13251, 13258, 13265, 13272, 13279, 13286, 13293, 13300, 13307, 13314, 0, 0, 0, 0, 0, 0 },
        { 13321, 13324, 13330, 13336, 13342, 13348, 13354, 13360, 13366, 13373, 13380, 13387, 13395, 13403, 13411, 13419, 13427, 13435, 13443, 13450, 13457, 13464, 13471, 13478, 13485, 13492, 13499, 13506, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 13513, 13516, 13522, 13528, 13532, 13538, 13544, 13550, 13557, 13564, 13572, 13580, 13588, 13596, 13604, 13611, 13618, 13625, 13632, 13639, 13646, 13653, 13660, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 13667, 13670, 13676, 13680, 13686, 13692, 13699, 13706, 13714, 13722, 13730, 13738, 13745, 13752, 13759, 13766, 13773, 13780, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 13787, 13790, 13796, 13802, 13808, 13815, 13823, 13831, 13839, 13846, 13853, 13860, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 13867, 13870, 13876, 13882, 13890, 13897, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
		},
	   	// 48000 Hz sample rate
	   	{
       	 // Coefficient offsets
        // Generated by HRTFConv V5.90d on Fri Mar 12 11:28:42 1999
        { 13904, 13907, 13913, 13919, 13925, 13931, 13937, 13943, 13949, 13956, 13963, 13970, 13978, 13986, 13994, 14002, 14010, 14018, 14026, 14033, 14040, 14047, 14054, 14061, 14068, 14075, 14082, 14089, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 14096, 14099, 14105, 14111, 14117, 14121, 14127, 14133, 14139, 14145, 14152, 14159, 14167, 14175, 14183, 14191, 14199, 14207, 14215, 14223, 14231, 14238, 14245, 14252, 14259, 14266, 14273, 14280, 14287, 14294, 0, 0, 0, 0, 0, 0 },
        { 14301, 14304, 14310, 14316, 14322, 14326, 14332, 14338, 14344, 14350, 14356, 14363, 14370, 14377, 14385, 14393, 14401, 14409, 14417, 14425, 14433, 14441, 14449, 14457, 14464, 14471, 14478, 14485, 14492, 14499, 14506, 14513, 14520, 14527, 14534, 14541 },
        { 14548, 14551, 14557, 14563, 14569, 14573, 14579, 14585, 14591, 14597, 14603, 14610, 14617, 14624, 14632, 14640, 14648, 14656, 14664, 14672, 14680, 14688, 14696, 14704, 14711, 14718, 14725, 14732, 14739, 14746, 14753, 14760, 14767, 14774, 14781, 14788 },
        { 14795, 14797, 14801, 14805, 14809, 14811, 14815, 14819, 14823, 14827, 14831, 14836, 14841, 14846, 14852, 14858, 14864, 14870, 14876, 14882, 14888, 14894, 14900, 14906, 14911, 14916, 14921, 14926, 14931, 14936, 14941, 14946, 14951, 14956, 14961, 14966 },
        { 14971, 14974, 14980, 14986, 14992, 14996, 15002, 15008, 15014, 15020, 15026, 15033, 15040, 15047, 15055, 15063, 15071, 15079, 15087, 15095, 15103, 15111, 15119, 15127, 15134, 15141, 15148, 15155, 15162, 15169, 15176, 15183, 15190, 15197, 15204, 15211 },
        { 15218, 15221, 15227, 15233, 15239, 15243, 15249, 15255, 15261, 15267, 15273, 15280, 15287, 15294, 15302, 15310, 15318, 15326, 15334, 15342, 15350, 15358, 15366, 15374, 15381, 15388, 15395, 15402, 15409, 15416, 15423, 15430, 15437, 15444, 15451, 15458 },
        { 15465, 15468, 15474, 15480, 15486, 15490, 15496, 15502, 15508, 15514, 15521, 15528, 15536, 15544, 15552, 15560, 15568, 15576, 15584, 15592, 15600, 15607, 15614, 15621, 15628, 15635, 15642, 15649, 15656, 15663, 0, 0, 0, 0, 0, 0 },
        { 15670, 15673, 15679, 15685, 15691, 15697, 15703, 15709, 15715, 15722, 15729, 15736, 15744, 15752, 15760, 15768, 15776, 15784, 15792, 15799, 15806, 15813, 15820, 15827, 15834, 15841, 15848, 15855, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 15862, 15865, 15871, 15877, 15881, 15887, 15893, 15899, 15906, 15913, 15921, 15929, 15937, 15945, 15953, 15961, 15968, 15975, 15982, 15989, 15996, 16003, 16010, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 16017, 16020, 16026, 16030, 16036, 16042, 16049, 16056, 16064, 16072, 16080, 16088, 16096, 16103, 16110, 16117, 16124, 16131, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 16138, 16141, 16147, 16153, 16159, 16166, 16174, 16182, 16190, 16197, 16204, 16211, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 16218, 16221, 16227, 16233, 16241, 16248, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        }
		},
	
	
		// Headphones
		{
		// 8000 Hz sample rate
		{
		// Coefficient offsets
        // Generated by HRTFConv V5.90d on Wed Feb 10 10:36:27 1999
        { 0, 1, 6, 11, 16, 21, 26, 32, 38, 44, 50, 56, 62, 68, 74, 80, 86, 92, 98, 104, 110, 116, 122, 128, 134, 140, 147, 154, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 161, 162, 167, 172, 177, 182, 187, 193, 199, 205, 211, 217, 223, 229, 235, 241, 247, 253, 259, 265, 271, 277, 283, 289, 295, 301, 307, 314, 321, 328, 0, 0, 0, 0, 0, 0 },
        { 335, 336, 341, 346, 351, 356, 361, 366, 372, 378, 384, 390, 396, 402, 408, 414, 420, 426, 432, 438, 444, 450, 456, 462, 468, 474, 480, 486, 492, 498, 504, 510, 517, 524, 531, 538 },
        { 545, 546, 551, 556, 561, 566, 571, 576, 582, 588, 594, 600, 606, 612, 618, 624, 630, 636, 642, 648, 654, 660, 666, 672, 678, 684, 690, 696, 702, 708, 714, 720, 727, 734, 741, 748 },
        { 755, 756, 759, 762, 765, 768, 771, 774, 778, 782, 786, 790, 794, 798, 802, 806, 810, 814, 818, 822, 826, 830, 834, 838, 842, 846, 850, 854, 858, 862, 866, 870, 875, 880, 885, 890 },
        { 895, 896, 901, 906, 911, 916, 921, 926, 932, 938, 944, 950, 956, 962, 968, 974, 980, 986, 992, 998, 1004, 1010, 1016, 1022, 1028, 1034, 1040, 1046, 1052, 1058, 1064, 1070, 1077, 1084, 1091, 1098 },
        { 1105, 1106, 1111, 1116, 1121, 1126, 1131, 1136, 1142, 1148, 1154, 1160, 1166, 1172, 1178, 1184, 1190, 1196, 1202, 1208, 1214, 1220, 1226, 1232, 1238, 1244, 1250, 1256, 1262, 1268, 1274, 1280, 1287, 1294, 1301, 1308 },
        { 1315, 1316, 1321, 1326, 1331, 1336, 1341, 1347, 1353, 1359, 1365, 1371, 1377, 1383, 1389, 1395, 1401, 1407, 1413, 1419, 1425, 1431, 1437, 1443, 1449, 1455, 1461, 1468, 1475, 1482, 0, 0, 0, 0, 0, 0 },
        { 1489, 1490, 1495, 1500, 1505, 1510, 1515, 1521, 1527, 1533, 1539, 1545, 1551, 1557, 1563, 1569, 1575, 1581, 1587, 1593, 1599, 1605, 1611, 1617, 1623, 1629, 1636, 1643, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 1650, 1651, 1656, 1661, 1666, 1671, 1677, 1683, 1689, 1695, 1701, 1707, 1713, 1719, 1725, 1731, 1737, 1743, 1749, 1755, 1761, 1768, 1775, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 1782, 1783, 1788, 1793, 1798, 1804, 1810, 1816, 1822, 1828, 1834, 1840, 1846, 1852, 1858, 1864, 1870, 1877, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 1884, 1885, 1890, 1895, 1901, 1907, 1913, 1919, 1925, 1931, 1937, 1943, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 1950, 1951, 1956, 1962, 1968, 1974, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
		},
		// 11025 Hz sample rate
		{
        // Coefficient offsets
        // Generated by HRTFConv V5.90d on Fri Mar 12 11:38:51 1999
        { 1980, 1981, 1987, 1993, 1999, 2005, 2011, 2017, 2023, 2029, 2035, 2041, 2047, 2053, 2059, 2065, 2071, 2077, 2083, 2089, 2095, 2101, 2107, 2113, 2119, 2125, 2132, 2139, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 2146, 2147, 2153, 2159, 2165, 2171, 2177, 2183, 2189, 2195, 2201, 2207, 2213, 2219, 2225, 2231, 2237, 2243, 2249, 2255, 2261, 2267, 2273, 2279, 2285, 2291, 2297, 2304, 2311, 2318, 0, 0, 0, 0, 0, 0 },
        { 2325, 2326, 2332, 2338, 2344, 2350, 2356, 2362, 2368, 2374, 2380, 2386, 2392, 2398, 2404, 2410, 2416, 2422, 2428, 2434, 2440, 2446, 2452, 2458, 2464, 2470, 2476, 2482, 2488, 2494, 2500, 2506, 2513, 2520, 2527, 2534 },
        { 2541, 2542, 2548, 2554, 2560, 2566, 2572, 2578, 2584, 2590, 2596, 2602, 2608, 2614, 2620, 2626, 2632, 2638, 2644, 2650, 2656, 2662, 2668, 2674, 2680, 2686, 2692, 2698, 2704, 2710, 2716, 2722, 2729, 2736, 2743, 2750 },
        { 2757, 2758, 2762, 2766, 2770, 2774, 2778, 2782, 2786, 2790, 2794, 2798, 2802, 2806, 2810, 2814, 2818, 2822, 2826, 2830, 2834, 2838, 2842, 2846, 2850, 2854, 2858, 2862, 2866, 2870, 2874, 2878, 2883, 2888, 2893, 2898 },
        { 2903, 2904, 2910, 2916, 2922, 2928, 2934, 2940, 2946, 2952, 2958, 2964, 2970, 2976, 2982, 2988, 2994, 3000, 3006, 3012, 3018, 3024, 3030, 3036, 3042, 3048, 3054, 3060, 3066, 3072, 3078, 3084, 3091, 3098, 3105, 3112 },
        { 3119, 3120, 3126, 3132, 3138, 3144, 3150, 3156, 3162, 3168, 3174, 3180, 3186, 3192, 3198, 3204, 3210, 3216, 3222, 3228, 3234, 3240, 3246, 3252, 3258, 3264, 3270, 3276, 3282, 3288, 3294, 3300, 3307, 3314, 3321, 3328 },
        { 3335, 3336, 3342, 3348, 3354, 3360, 3366, 3372, 3378, 3384, 3390, 3396, 3402, 3408, 3414, 3420, 3426, 3432, 3438, 3444, 3450, 3456, 3462, 3468, 3474, 3480, 3486, 3493, 3500, 3507, 0, 0, 0, 0, 0, 0 },
        { 3514, 3515, 3521, 3527, 3533, 3539, 3545, 3551, 3557, 3563, 3569, 3575, 3581, 3587, 3593, 3599, 3605, 3611, 3617, 3623, 3629, 3635, 3641, 3647, 3653, 3659, 3666, 3673, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 3680, 3681, 3687, 3693, 3699, 3705, 3711, 3717, 3723, 3729, 3735, 3741, 3747, 3753, 3759, 3765, 3771, 3777, 3783, 3789, 3795, 3802, 3809, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 3816, 3817, 3823, 3829, 3835, 3841, 3847, 3853, 3859, 3865, 3871, 3877, 3883, 3889, 3895, 3901, 3907, 3914, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 3921, 3922, 3928, 3934, 3940, 3946, 3952, 3958, 3964, 3970, 3976, 3982, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 3989, 3990, 3996, 4002, 4008, 4014, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
		},
		// 16000 Hz sample rate
		{
	    // Coefficient offsets
        // Generated by HRTFConv V5.90d on Fri Mar 12 11:40:57 1999
        { 4020, 4021, 4026, 4032, 4038, 4044, 4050, 4056, 4062, 4068, 4074, 4080, 4086, 4092, 4098, 4104, 4110, 4116, 4122, 4128, 4134, 4140, 4146, 4152, 4158, 4164, 4171, 4178, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 4185, 4186, 4191, 4197, 4203, 4209, 4215, 4221, 4227, 4233, 4239, 4245, 4251, 4257, 4263, 4269, 4275, 4281, 4287, 4293, 4299, 4305, 4311, 4317, 4323, 4329, 4335, 4342, 4349, 4356, 0, 0, 0, 0, 0, 0 },
        { 4363, 4364, 4369, 4375, 4381, 4387, 4393, 4399, 4405, 4411, 4417, 4423, 4429, 4435, 4441, 4447, 4453, 4459, 4465, 4471, 4477, 4483, 4489, 4495, 4501, 4507, 4513, 4519, 4525, 4531, 4537, 4543, 4550, 4557, 4564, 4571 },
        { 4578, 4579, 4584, 4590, 4596, 4602, 4608, 4614, 4620, 4626, 4632, 4638, 4644, 4650, 4656, 4662, 4668, 4674, 4680, 4686, 4692, 4698, 4704, 4710, 4716, 4722, 4728, 4734, 4740, 4746, 4752, 4758, 4765, 4772, 4779, 4786 },
        { 4793, 4794, 4797, 4801, 4805, 4809, 4813, 4817, 4821, 4825, 4829, 4833, 4837, 4841, 4845, 4849, 4853, 4857, 4861, 4865, 4869, 4873, 4877, 4881, 4885, 4889, 4893, 4897, 4901, 4905, 4909, 4913, 4918, 4923, 4928, 4933 },
        { 4938, 4939, 4944, 4950, 4956, 4962, 4968, 4974, 4980, 4986, 4992, 4998, 5004, 5010, 5016, 5022, 5028, 5034, 5040, 5046, 5052, 5058, 5064, 5070, 5076, 5082, 5088, 5094, 5100, 5106, 5112, 5118, 5125, 5132, 5139, 5146 },
        { 5153, 5154, 5159, 5165, 5171, 5177, 5183, 5189, 5195, 5201, 5207, 5213, 5219, 5225, 5231, 5237, 5243, 5249, 5255, 5261, 5267, 5273, 5279, 5285, 5291, 5297, 5303, 5309, 5315, 5321, 5327, 5333, 5340, 5347, 5354, 5361 },
        { 5368, 5369, 5374, 5380, 5386, 5392, 5398, 5404, 5410, 5416, 5422, 5428, 5434, 5440, 5446, 5452, 5458, 5464, 5470, 5476, 5482, 5488, 5494, 5500, 5506, 5512, 5518, 5525, 5532, 5539, 0, 0, 0, 0, 0, 0 },
        { 5546, 5547, 5552, 5558, 5564, 5570, 5576, 5582, 5588, 5594, 5600, 5606, 5612, 5618, 5624, 5630, 5636, 5642, 5648, 5654, 5660, 5666, 5672, 5678, 5684, 5690, 5697, 5704, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 5711, 5712, 5717, 5723, 5729, 5735, 5741, 5747, 5753, 5759, 5765, 5771, 5777, 5783, 5789, 5795, 5801, 5807, 5813, 5819, 5825, 5832, 5839, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 5846, 5847, 5853, 5859, 5865, 5871, 5877, 5883, 5889, 5895, 5901, 5907, 5913, 5919, 5925, 5931, 5937, 5944, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 5951, 5952, 5958, 5964, 5970, 5976, 5982, 5988, 5994, 6000, 6006, 6012, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 6019, 6020, 6026, 6032, 6038, 6044, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
		},
		// 22050 Hz sample rate
		{
		 // Coefficient offsets
        // Generated by HRTFConv V5.90d on Fri Mar 12 11:42:29 1999
        { 6050, 6051, 6057, 6063, 6069, 6075, 6081, 6087, 6093, 6099, 6105, 6111, 6117, 6123, 6129, 6135, 6141, 6147, 6153, 6159, 6165, 6171, 6177, 6183, 6189, 6195, 6202, 6209, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 6216, 6217, 6223, 6229, 6235, 6241, 6247, 6253, 6259, 6265, 6271, 6277, 6283, 6289, 6295, 6301, 6307, 6313, 6319, 6325, 6331, 6337, 6343, 6349, 6355, 6361, 6367, 6374, 6381, 6388, 0, 0, 0, 0, 0, 0 },
        { 6395, 6396, 6402, 6408, 6414, 6420, 6426, 6432, 6438, 6444, 6450, 6456, 6462, 6468, 6474, 6480, 6486, 6492, 6498, 6504, 6510, 6516, 6522, 6528, 6534, 6540, 6546, 6552, 6558, 6564, 6570, 6576, 6583, 6590, 6597, 6604 },
        { 6611, 6612, 6618, 6624, 6630, 6636, 6642, 6648, 6654, 6660, 6666, 6672, 6678, 6684, 6690, 6696, 6702, 6708, 6714, 6720, 6726, 6732, 6738, 6744, 6750, 6756, 6762, 6768, 6774, 6780, 6786, 6792, 6799, 6806, 6813, 6820 },
        { 6827, 6828, 6832, 6836, 6840, 6844, 6848, 6852, 6856, 6860, 6864, 6868, 6872, 6876, 6880, 6884, 6888, 6892, 6896, 6900, 6904, 6908, 6912, 6916, 6920, 6924, 6928, 6932, 6936, 6940, 6944, 6948, 6953, 6958, 6963, 6968 },
        { 6973, 6974, 6980, 6986, 6992, 6998, 7004, 7010, 7016, 7022, 7028, 7034, 7040, 7046, 7052, 7058, 7064, 7070, 7076, 7082, 7088, 7094, 7100, 7106, 7112, 7118, 7124, 7130, 7136, 7142, 7148, 7154, 7161, 7168, 7175, 7182 },
        { 7189, 7190, 7196, 7202, 7208, 7214, 7220, 7226, 7232, 7238, 7244, 7250, 7256, 7262, 7268, 7274, 7280, 7286, 7292, 7298, 7304, 7310, 7316, 7322, 7328, 7334, 7340, 7346, 7352, 7358, 7364, 7370, 7377, 7384, 7391, 7398 },
        { 7405, 7406, 7412, 7418, 7424, 7430, 7436, 7442, 7448, 7454, 7460, 7466, 7472, 7478, 7484, 7490, 7496, 7502, 7508, 7514, 7520, 7526, 7532, 7538, 7544, 7550, 7556, 7563, 7570, 7577, 0, 0, 0, 0, 0, 0 },
        { 7584, 7585, 7591, 7597, 7603, 7609, 7615, 7621, 7627, 7633, 7639, 7645, 7651, 7657, 7663, 7669, 7675, 7681, 7687, 7693, 7699, 7705, 7711, 7717, 7723, 7729, 7736, 7743, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 7750, 7751, 7757, 7763, 7769, 7775, 7781, 7787, 7793, 7799, 7805, 7811, 7817, 7823, 7829, 7835, 7841, 7847, 7853, 7859, 7865, 7872, 7879, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 7886, 7887, 7893, 7899, 7905, 7911, 7917, 7923, 7929, 7935, 7941, 7947, 7953, 7959, 7965, 7971, 7977, 7984, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 7991, 7992, 7998, 8004, 8010, 8016, 8022, 8028, 8034, 8040, 8046, 8052, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 8059, 8060, 8066, 8072, 8078, 8084, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
		},
		// 32000 Hz sample rate
		{
		// Coefficient offsets
        // Generated by HRTFConv V5.90d on Fri Mar 12 11:44:06 1999
        { 8090, 8091, 8097, 8103, 8109, 8115, 8121, 8127, 8133, 8139, 8145, 8151, 8157, 8163, 8169, 8175, 8181, 8187, 8193, 8199, 8205, 8211, 8217, 8223, 8229, 8235, 8242, 8249, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 8256, 8257, 8263, 8269, 8275, 8281, 8287, 8293, 8299, 8305, 8311, 8317, 8323, 8329, 8335, 8341, 8347, 8353, 8359, 8365, 8371, 8377, 8383, 8389, 8395, 8401, 8407, 8414, 8421, 8428, 0, 0, 0, 0, 0, 0 },
        { 8435, 8436, 8442, 8448, 8454, 8460, 8466, 8472, 8478, 8484, 8490, 8496, 8502, 8508, 8514, 8520, 8526, 8532, 8538, 8544, 8550, 8556, 8562, 8568, 8574, 8580, 8586, 8592, 8598, 8604, 8610, 8616, 8623, 8630, 8637, 8644 },
        { 8651, 8652, 8658, 8664, 8670, 8676, 8682, 8688, 8694, 8700, 8706, 8712, 8718, 8724, 8730, 8736, 8742, 8748, 8754, 8760, 8766, 8772, 8778, 8784, 8790, 8796, 8802, 8808, 8814, 8820, 8826, 8832, 8839, 8846, 8853, 8860 },
        { 8867, 8868, 8872, 8876, 8880, 8884, 8888, 8892, 8896, 8900, 8904, 8908, 8912, 8916, 8920, 8924, 8928, 8932, 8936, 8940, 8944, 8948, 8952, 8956, 8960, 8964, 8968, 8972, 8976, 8980, 8984, 8988, 8993, 8998, 9003, 9008 },
        { 9013, 9014, 9020, 9026, 9032, 9038, 9044, 9050, 9056, 9062, 9068, 9074, 9080, 9086, 9092, 9098, 9104, 9110, 9116, 9122, 9128, 9134, 9140, 9146, 9152, 9158, 9164, 9170, 9176, 9182, 9188, 9194, 9201, 9208, 9215, 9222 },
        { 9229, 9230, 9236, 9242, 9248, 9254, 9260, 9266, 9272, 9278, 9284, 9290, 9296, 9302, 9308, 9314, 9320, 9326, 9332, 9338, 9344, 9350, 9356, 9362, 9368, 9374, 9380, 9386, 9392, 9398, 9404, 9410, 9417, 9424, 9431, 9438 },
        { 9445, 9446, 9452, 9458, 9464, 9470, 9476, 9482, 9488, 9494, 9500, 9506, 9512, 9518, 9524, 9530, 9536, 9542, 9548, 9554, 9560, 9566, 9572, 9578, 9584, 9590, 9596, 9603, 9610, 9617, 0, 0, 0, 0, 0, 0 },
        { 9624, 9625, 9631, 9637, 9643, 9649, 9655, 9661, 9667, 9673, 9679, 9685, 9691, 9697, 9703, 9709, 9715, 9721, 9727, 9733, 9739, 9745, 9751, 9757, 9763, 9769, 9776, 9783, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 9790, 9791, 9797, 9803, 9809, 9815, 9821, 9827, 9833, 9839, 9845, 9851, 9857, 9863, 9869, 9875, 9881, 9887, 9893, 9899, 9905, 9912, 9919, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 9926, 9927, 9933, 9939, 9945, 9951, 9957, 9963, 9969, 9975, 9981, 9987, 9993, 9999, 10005, 10011, 10017, 10024, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 10031, 10032, 10038, 10044, 10050, 10056, 10062, 10068, 10074, 10080, 10086, 10092, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 10099, 10100, 10106, 10112, 10118, 10124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
		},
		// 44100 Hz sample rate
		{
	    // Coefficient offsets
        // Generated by HRTFConv V5.90d on Fri Mar 12 11:46:25 1999
        { 10130, 10131, 10137, 10143, 10149, 10155, 10161, 10167, 10173, 10179, 10185, 10191, 10197, 10203, 10209, 10215, 10221, 10227, 10233, 10239, 10245, 10251, 10257, 10263, 10269, 10275, 10282, 10289, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 10296, 10297, 10303, 10309, 10315, 10321, 10327, 10333, 10339, 10345, 10351, 10357, 10363, 10369, 10375, 10381, 10387, 10393, 10399, 10405, 10411, 10417, 10423, 10429, 10435, 10441, 10447, 10454, 10461, 10468, 0, 0, 0, 0, 0, 0 },
        { 10475, 10476, 10482, 10488, 10494, 10500, 10506, 10512, 10518, 10524, 10530, 10536, 10542, 10548, 10554, 10560, 10566, 10572, 10578, 10584, 10590, 10596, 10602, 10608, 10614, 10620, 10626, 10632, 10638, 10644, 10650, 10656, 10663, 10670, 10677, 10684 },
        { 10691, 10692, 10698, 10704, 10710, 10716, 10722, 10728, 10734, 10740, 10746, 10752, 10758, 10764, 10770, 10776, 10782, 10788, 10794, 10800, 10806, 10812, 10818, 10824, 10830, 10836, 10842, 10848, 10854, 10860, 10866, 10872, 10879, 10886, 10893, 10900 },
        { 10907, 10908, 10912, 10916, 10920, 10924, 10928, 10932, 10936, 10940, 10944, 10948, 10952, 10956, 10960, 10964, 10968, 10972, 10976, 10980, 10984, 10988, 10992, 10996, 11000, 11004, 11008, 11012, 11016, 11020, 11024, 11028, 11033, 11038, 11043, 11048 },
        { 11053, 11054, 11060, 11066, 11072, 11078, 11084, 11090, 11096, 11102, 11108, 11114, 11120, 11126, 11132, 11138, 11144, 11150, 11156, 11162, 11168, 11174, 11180, 11186, 11192, 11198, 11204, 11210, 11216, 11222, 11228, 11234, 11241, 11248, 11255, 11262 },
        { 11269, 11270, 11276, 11282, 11288, 11294, 11300, 11306, 11312, 11318, 11324, 11330, 11336, 11342, 11348, 11354, 11360, 11366, 11372, 11378, 11384, 11390, 11396, 11402, 11408, 11414, 11420, 11426, 11432, 11438, 11444, 11450, 11457, 11464, 11471, 11478 },
        { 11485, 11486, 11492, 11498, 11504, 11510, 11516, 11522, 11528, 11534, 11540, 11546, 11552, 11558, 11564, 11570, 11576, 11582, 11588, 11594, 11600, 11606, 11612, 11618, 11624, 11630, 11636, 11643, 11650, 11657, 0, 0, 0, 0, 0, 0 },
        { 11664, 11665, 11671, 11677, 11683, 11689, 11695, 11701, 11707, 11713, 11719, 11725, 11731, 11737, 11743, 11749, 11755, 11761, 11767, 11773, 11779, 11785, 11791, 11797, 11803, 11809, 11816, 11823, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 11830, 11831, 11837, 11843, 11849, 11855, 11861, 11867, 11873, 11879, 11885, 11891, 11897, 11903, 11909, 11915, 11921, 11927, 11933, 11939, 11945, 11952, 11959, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 11966, 11967, 11973, 11979, 11985, 11991, 11997, 12003, 12009, 12015, 12021, 12027, 12033, 12039, 12045, 12051, 12057, 12064, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 12071, 12072, 12078, 12084, 12090, 12096, 12102, 12108, 12114, 12120, 12126, 12132, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 12139, 12140, 12146, 12152, 12158, 12164, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
		},
		// 48000 Hz sample rate
		{
        // Coefficient offsets
        // Generated by HRTFConv V5.90d on Fri Mar 12 11:48:33 1999
        { 12170, 12171, 12177, 12183, 12189, 12195, 12201, 12207, 12213, 12219, 12225, 12231, 12237, 12243, 12249, 12255, 12261, 12267, 12273, 12279, 12285, 12291, 12297, 12303, 12309, 12315, 12322, 12329, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 12336, 12337, 12343, 12349, 12355, 12361, 12367, 12373, 12379, 12385, 12391, 12397, 12403, 12409, 12415, 12421, 12427, 12433, 12439, 12445, 12451, 12457, 12463, 12469, 12475, 12481, 12487, 12494, 12501, 12508, 0, 0, 0, 0, 0, 0 },
        { 12515, 12516, 12522, 12528, 12534, 12540, 12546, 12552, 12558, 12564, 12570, 12576, 12582, 12588, 12594, 12600, 12606, 12612, 12618, 12624, 12630, 12636, 12642, 12648, 12654, 12660, 12666, 12672, 12678, 12684, 12690, 12696, 12703, 12710, 12717, 12724 },
        { 12731, 12732, 12738, 12744, 12750, 12756, 12762, 12768, 12774, 12780, 12786, 12792, 12798, 12804, 12810, 12816, 12822, 12828, 12834, 12840, 12846, 12852, 12858, 12864, 12870, 12876, 12882, 12888, 12894, 12900, 12906, 12912, 12919, 12926, 12933, 12940 },
        { 12947, 12948, 12952, 12956, 12960, 12964, 12968, 12972, 12976, 12980, 12984, 12988, 12992, 12996, 13000, 13004, 13008, 13012, 13016, 13020, 13024, 13028, 13032, 13036, 13040, 13044, 13048, 13052, 13056, 13060, 13064, 13068, 13073, 13078, 13083, 13088 },
        { 13093, 13094, 13100, 13106, 13112, 13118, 13124, 13130, 13136, 13142, 13148, 13154, 13160, 13166, 13172, 13178, 13184, 13190, 13196, 13202, 13208, 13214, 13220, 13226, 13232, 13238, 13244, 13250, 13256, 13262, 13268, 13274, 13281, 13288, 13295, 13302 },
        { 13309, 13310, 13316, 13322, 13328, 13334, 13340, 13346, 13352, 13358, 13364, 13370, 13376, 13382, 13388, 13394, 13400, 13406, 13412, 13418, 13424, 13430, 13436, 13442, 13448, 13454, 13460, 13466, 13472, 13478, 13484, 13490, 13497, 13504, 13511, 13518 },
        { 13525, 13526, 13532, 13538, 13544, 13550, 13556, 13562, 13568, 13574, 13580, 13586, 13592, 13598, 13604, 13610, 13616, 13622, 13628, 13634, 13640, 13646, 13652, 13658, 13664, 13670, 13676, 13683, 13690, 13697, 0, 0, 0, 0, 0, 0 },
        { 13704, 13705, 13711, 13717, 13723, 13729, 13735, 13741, 13747, 13753, 13759, 13765, 13771, 13777, 13783, 13789, 13795, 13801, 13807, 13813, 13819, 13825, 13831, 13837, 13843, 13849, 13856, 13863, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 13870, 13871, 13877, 13883, 13889, 13895, 13901, 13907, 13913, 13919, 13925, 13931, 13937, 13943, 13949, 13955, 13961, 13967, 13973, 13979, 13985, 13992, 13999, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 14006, 14007, 14013, 14019, 14025, 14031, 14037, 14043, 14049, 14055, 14061, 14067, 14073, 14079, 14085, 14091, 14097, 14104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 14111, 14112, 14118, 14124, 14130, 14136, 14142, 14148, 14154, 14160, 14166, 14172, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 14179, 14180, 14186, 14192, 14198, 14204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
		}
		}
	},
	// Lite coefficients
	{
	  // 10 degrees loudspeakers
      {
		 // 8000 Hz sample rate
		{
	    // Coefficient offsets
        // Generated by HRTFConv V5.90d on Wed Mar 10 11:18:12 1999
        { 0, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 55, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 0, 0, 0, 0, 0, 0 },
        { 114, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183 },
        { 185, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254 },
        { 256, 257, 259, 261, 263, 265, 267, 269, 271, 273, 275, 277, 279, 281, 283, 285, 287, 289, 291, 293, 295, 297, 299, 301, 303, 305, 307, 309, 311, 313, 315, 317, 319, 321, 323, 325 },
        { 327, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396 },
        { 398, 399, 401, 403, 405, 407, 409, 411, 413, 415, 417, 419, 421, 423, 425, 427, 429, 431, 433, 435, 437, 439, 441, 443, 445, 447, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467 },
        { 469, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 494, 496, 498, 500, 502, 504, 506, 508, 510, 512, 514, 516, 518, 520, 522, 524, 526, 0, 0, 0, 0, 0, 0 },
        { 528, 529, 531, 533, 535, 537, 539, 541, 543, 545, 547, 549, 551, 553, 555, 557, 559, 561, 563, 565, 567, 569, 571, 573, 575, 577, 579, 581, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 583, 584, 586, 588, 590, 592, 594, 596, 598, 600, 602, 604, 606, 608, 610, 612, 614, 616, 618, 620, 622, 624, 626, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 628, 629, 631, 633, 635, 637, 639, 641, 643, 645, 647, 649, 651, 653, 655, 657, 659, 661, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 663, 664, 666, 668, 670, 672, 674, 676, 678, 680, 682, 684, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 686, 687, 689, 691, 693, 695, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
		},
		 // 11025 Hz sample rate
		{
        // Coefficient offsets
        // Generated by HRTFConv V5.90d on Fri Mar 12 13:26:54 1999
        { 697, 698, 700, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 728, 730, 732, 734, 736, 738, 740, 742, 744, 746, 748, 750, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 752, 753, 755, 757, 759, 761, 763, 765, 767, 769, 771, 773, 775, 777, 779, 781, 783, 785, 787, 789, 791, 793, 795, 797, 799, 801, 803, 805, 807, 809, 0, 0, 0, 0, 0, 0 },
        { 811, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 832, 834, 836, 838, 840, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 864, 866, 868, 870, 872, 874, 876, 878, 880 },
        { 882, 883, 885, 887, 889, 891, 893, 895, 897, 899, 901, 903, 905, 907, 909, 911, 913, 915, 917, 919, 921, 923, 925, 927, 929, 931, 933, 935, 937, 939, 941, 943, 945, 947, 949, 951 },
        { 953, 954, 956, 958, 960, 962, 964, 966, 968, 970, 972, 974, 976, 978, 980, 982, 984, 986, 988, 990, 992, 994, 996, 998, 1000, 1002, 1004, 1006, 1008, 1010, 1012, 1014, 1016, 1018, 1020, 1022 },
        { 1024, 1025, 1027, 1029, 1031, 1033, 1035, 1037, 1039, 1041, 1043, 1045, 1047, 1049, 1051, 1053, 1055, 1057, 1059, 1061, 1063, 1065, 1067, 1069, 1071, 1073, 1075, 1077, 1079, 1081, 1083, 1085, 1087, 1089, 1091, 1093 },
        { 1095, 1096, 1098, 1100, 1102, 1104, 1106, 1108, 1110, 1112, 1114, 1116, 1118, 1120, 1122, 1124, 1126, 1128, 1130, 1132, 1134, 1136, 1138, 1140, 1142, 1144, 1146, 1148, 1150, 1152, 1154, 1156, 1158, 1160, 1162, 1164 },
        { 1166, 1167, 1169, 1171, 1173, 1175, 1177, 1179, 1181, 1183, 1185, 1187, 1189, 1191, 1193, 1195, 1197, 1199, 1201, 1203, 1205, 1207, 1209, 1211, 1213, 1215, 1217, 1219, 1221, 1223, 0, 0, 0, 0, 0, 0 },
        { 1225, 1226, 1228, 1230, 1232, 1234, 1236, 1238, 1240, 1242, 1244, 1246, 1248, 1250, 1252, 1254, 1256, 1258, 1260, 1262, 1264, 1266, 1268, 1270, 1272, 1274, 1276, 1278, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 1280, 1281, 1283, 1285, 1287, 1289, 1291, 1293, 1295, 1297, 1299, 1301, 1303, 1305, 1307, 1309, 1311, 1313, 1315, 1317, 1319, 1321, 1323, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 1325, 1326, 1328, 1330, 1332, 1334, 1336, 1338, 1340, 1342, 1344, 1346, 1348, 1350, 1352, 1354, 1356, 1358, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 1360, 1361, 1363, 1365, 1367, 1369, 1371, 1373, 1375, 1377, 1379, 1381, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 1383, 1384, 1386, 1388, 1390, 1392, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        },
		// 16000 Hz sample rate
		{
	    // Coefficient offsets
        // Generated by HRTFConv V5.90d on Fri Mar 12 13:44:37 1999
        { 1394, 1395, 1397, 1399, 1401, 1403, 1405, 1407, 1409, 1411, 1413, 1415, 1417, 1419, 1421, 1423, 1425, 1427, 1429, 1431, 1433, 1435, 1437, 1439, 1441, 1443, 1445, 1447, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 1449, 1450, 1452, 1454, 1456, 1458, 1460, 1462, 1464, 1466, 1468, 1470, 1472, 1474, 1476, 1478, 1480, 1482, 1484, 1486, 1488, 1490, 1492, 1494, 1496, 1498, 1500, 1502, 1504, 1506, 0, 0, 0, 0, 0, 0 },
        { 1508, 1509, 1511, 1513, 1515, 1517, 1519, 1521, 1523, 1525, 1527, 1529, 1531, 1533, 1535, 1537, 1539, 1541, 1543, 1545, 1547, 1549, 1551, 1553, 1555, 1557, 1559, 1561, 1563, 1565, 1567, 1569, 1571, 1573, 1575, 1577 },
        { 1579, 1580, 1582, 1584, 1586, 1588, 1590, 1592, 1594, 1596, 1598, 1600, 1602, 1604, 1606, 1608, 1610, 1612, 1614, 1616, 1618, 1620, 1622, 1624, 1626, 1628, 1630, 1632, 1634, 1636, 1638, 1640, 1642, 1644, 1646, 1648 },
        { 1650, 1651, 1653, 1655, 1657, 1659, 1661, 1663, 1665, 1667, 1669, 1671, 1673, 1675, 1677, 1679, 1681, 1683, 1685, 1687, 1689, 1691, 1693, 1695, 1697, 1699, 1701, 1703, 1705, 1707, 1709, 1711, 1713, 1715, 1717, 1719 },
        { 1721, 1722, 1724, 1726, 1728, 1730, 1732, 1734, 1736, 1738, 1740, 1742, 1744, 1746, 1748, 1750, 1752, 1754, 1756, 1758, 1760, 1762, 1764, 1766, 1768, 1770, 1772, 1774, 1776, 1778, 1780, 1782, 1784, 1786, 1788, 1790 },
        { 1792, 1793, 1795, 1797, 1799, 1801, 1803, 1805, 1807, 1809, 1811, 1813, 1815, 1817, 1819, 1821, 1823, 1825, 1827, 1829, 1831, 1833, 1835, 1837, 1839, 1841, 1843, 1845, 1847, 1849, 1851, 1853, 1855, 1857, 1859, 1861 },
        { 1863, 1864, 1866, 1868, 1870, 1872, 1874, 1876, 1878, 1880, 1882, 1884, 1886, 1888, 1890, 1892, 1894, 1896, 1898, 1900, 1902, 1904, 1906, 1908, 1910, 1912, 1914, 1916, 1918, 1920, 0, 0, 0, 0, 0, 0 },
        { 1922, 1923, 1925, 1927, 1929, 1931, 1933, 1935, 1937, 1939, 1941, 1943, 1945, 1947, 1949, 1951, 1953, 1955, 1957, 1959, 1961, 1963, 1965, 1967, 1969, 1971, 1973, 1975, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 1977, 1978, 1980, 1982, 1984, 1986, 1988, 1990, 1992, 1994, 1996, 1998, 2000, 2002, 2004, 2006, 2008, 2010, 2012, 2014, 2016, 2018, 2020, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 2022, 2023, 2025, 2027, 2029, 2031, 2033, 2035, 2037, 2039, 2041, 2043, 2045, 2047, 2049, 2051, 2053, 2055, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 2057, 2058, 2060, 2062, 2064, 2066, 2068, 2070, 2072, 2074, 2076, 2078, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 2080, 2081, 2083, 2085, 2087, 2089, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
		},
		// 22050 Hz sample rate
		{
		// Coefficient offsets
        // Generated by HRTFConv V5.90d on Fri Mar 12 13:46:47 1999
        { 2091, 2092, 2094, 2096, 2098, 2100, 2102, 2104, 2106, 2108, 2110, 2112, 2114, 2116, 2118, 2120, 2122, 2124, 2126, 2128, 2130, 2132, 2134, 2136, 2138, 2140, 2142, 2144, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 2146, 2147, 2149, 2151, 2153, 2155, 2157, 2159, 2161, 2163, 2165, 2167, 2169, 2171, 2173, 2175, 2177, 2179, 2181, 2183, 2185, 2187, 2189, 2191, 2193, 2195, 2197, 2199, 2201, 2203, 0, 0, 0, 0, 0, 0 },
        { 2205, 2206, 2208, 2210, 2212, 2214, 2216, 2218, 2220, 2222, 2224, 2226, 2228, 2230, 2232, 2234, 2236, 2238, 2240, 2242, 2244, 2246, 2248, 2250, 2252, 2254, 2256, 2258, 2260, 2262, 2264, 2266, 2268, 2270, 2272, 2274 },
        { 2276, 2277, 2279, 2281, 2283, 2285, 2287, 2289, 2291, 2293, 2295, 2297, 2299, 2301, 2303, 2305, 2307, 2309, 2311, 2313, 2315, 2317, 2319, 2321, 2323, 2325, 2327, 2329, 2331, 2333, 2335, 2337, 2339, 2341, 2343, 2345 },
        { 2347, 2348, 2350, 2352, 2354, 2356, 2358, 2360, 2362, 2364, 2366, 2368, 2370, 2372, 2374, 2376, 2378, 2380, 2382, 2384, 2386, 2388, 2390, 2392, 2394, 2396, 2398, 2400, 2402, 2404, 2406, 2408, 2410, 2412, 2414, 2416 },
        { 2418, 2419, 2421, 2423, 2425, 2427, 2429, 2431, 2433, 2435, 2437, 2439, 2441, 2443, 2445, 2447, 2449, 2451, 2453, 2455, 2457, 2459, 2461, 2463, 2465, 2467, 2469, 2471, 2473, 2475, 2477, 2479, 2481, 2483, 2485, 2487 },
        { 2489, 2490, 2492, 2494, 2496, 2498, 2500, 2502, 2504, 2506, 2508, 2510, 2512, 2514, 2516, 2518, 2520, 2522, 2524, 2526, 2528, 2530, 2532, 2534, 2536, 2538, 2540, 2542, 2544, 2546, 2548, 2550, 2552, 2554, 2556, 2558 },
        { 2560, 2561, 2563, 2565, 2567, 2569, 2571, 2573, 2575, 2577, 2579, 2581, 2583, 2585, 2587, 2589, 2591, 2593, 2595, 2597, 2599, 2601, 2603, 2605, 2607, 2609, 2611, 2613, 2615, 2617, 0, 0, 0, 0, 0, 0 },
        { 2619, 2620, 2622, 2624, 2626, 2628, 2630, 2632, 2634, 2636, 2638, 2640, 2642, 2644, 2646, 2648, 2650, 2652, 2654, 2656, 2658, 2660, 2662, 2664, 2666, 2668, 2670, 2672, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 2674, 2675, 2677, 2679, 2681, 2683, 2685, 2687, 2689, 2691, 2693, 2695, 2697, 2699, 2701, 2703, 2705, 2707, 2709, 2711, 2713, 2715, 2717, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 2719, 2720, 2722, 2724, 2726, 2728, 2730, 2732, 2734, 2736, 2738, 2740, 2742, 2744, 2746, 2748, 2750, 2752, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 2754, 2755, 2757, 2759, 2761, 2763, 2765, 2767, 2769, 2771, 2773, 2775, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 2777, 2778, 2780, 2782, 2784, 2786, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
		},
		// 32000 Hz sample rate
		{
		// Coefficient offsets
        // Generated by HRTFConv V5.90d on Fri Apr 16 10:26:55 1999
        { 2788, 2789, 2791, 2793, 2795, 2797, 2799, 2801, 2803, 2805, 2807, 2809, 2811, 2813, 2815, 2817, 2819, 2821, 2823, 2825, 2827, 2829, 2831, 2833, 2835, 2837, 2839, 2841, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 2843, 2844, 2846, 2848, 2850, 2852, 2854, 2856, 2858, 2860, 2862, 2864, 2866, 2868, 2870, 2872, 2874, 2876, 2878, 2880, 2882, 2884, 2886, 2888, 2890, 2892, 2894, 2896, 2898, 2900, 0, 0, 0, 0, 0, 0 },
        { 2902, 2903, 2905, 2907, 2909, 2911, 2913, 2915, 2917, 2919, 2921, 2923, 2925, 2927, 2929, 2931, 2933, 2935, 2937, 2939, 2941, 2943, 2945, 2947, 2949, 2951, 2953, 2955, 2957, 2959, 2961, 2963, 2965, 2967, 2969, 2971 },
        { 2973, 2974, 2976, 2978, 2980, 2982, 2984, 2986, 2988, 2990, 2992, 2994, 2996, 2998, 3000, 3002, 3004, 3006, 3008, 3010, 3012, 3014, 3016, 3018, 3020, 3022, 3024, 3026, 3028, 3030, 3032, 3034, 3036, 3038, 3040, 3042 },
        { 3044, 3045, 3047, 3049, 3051, 3053, 3055, 3057, 3059, 3061, 3063, 3065, 3067, 3069, 3071, 3073, 3075, 3077, 3079, 3081, 3083, 3085, 3087, 3089, 3091, 3093, 3095, 3097, 3099, 3101, 3103, 3105, 3107, 3109, 3111, 3113 },
        { 3115, 3116, 3118, 3120, 3122, 3124, 3126, 3128, 3130, 3132, 3134, 3136, 3138, 3140, 3142, 3144, 3146, 3148, 3150, 3152, 3154, 3156, 3158, 3160, 3162, 3164, 3166, 3168, 3170, 3172, 3174, 3176, 3178, 3180, 3182, 3184 },
        { 3186, 3187, 3189, 3191, 3193, 3195, 3197, 3199, 3201, 3203, 3205, 3207, 3209, 3211, 3213, 3215, 3217, 3219, 3221, 3223, 3225, 3227, 3229, 3231, 3233, 3235, 3237, 3239, 3241, 3243, 3245, 3247, 3249, 3251, 3253, 3255 },
        { 3257, 3258, 3260, 3262, 3264, 3266, 3268, 3270, 3272, 3274, 3276, 3278, 3280, 3282, 3284, 3286, 3288, 3290, 3292, 3294, 3296, 3298, 3300, 3302, 3304, 3306, 3308, 3310, 3312, 3314, 0, 0, 0, 0, 0, 0 },
        { 3316, 3317, 3319, 3321, 3323, 3325, 3327, 3329, 3331, 3333, 3335, 3337, 3339, 3341, 3343, 3345, 3347, 3349, 3351, 3353, 3355, 3357, 3359, 3361, 3363, 3365, 3367, 3369, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 3371, 3372, 3374, 3376, 3378, 3380, 3382, 3384, 3386, 3388, 3390, 3392, 3394, 3396, 3398, 3400, 3402, 3404, 3406, 3408, 3410, 3412, 3414, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 3416, 3417, 3419, 3421, 3423, 3425, 3427, 3429, 3431, 3433, 3435, 3437, 3439, 3441, 3443, 3445, 3447, 3449, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 3451, 3452, 3454, 3456, 3458, 3460, 3462, 3464, 3466, 3468, 3470, 3472, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 3474, 3475, 3477, 3479, 3481, 3483, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }

       },
		// 44100 Hz sample rate
		{
		 // Coefficient offsets
        // Generated by HRTFConv V5.90d on Fri Apr 16 10:28:18 1999
        { 3485, 3486, 3488, 3490, 3492, 3494, 3496, 3498, 3500, 3502, 3504, 3506, 3508, 3510, 3512, 3514, 3516, 3518, 3520, 3522, 3524, 3526, 3528, 3530, 3532, 3534, 3536, 3538, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 3540, 3541, 3543, 3545, 3547, 3549, 3551, 3553, 3555, 3557, 3559, 3561, 3563, 3565, 3567, 3569, 3571, 3573, 3575, 3577, 3579, 3581, 3583, 3585, 3587, 3589, 3591, 3593, 3595, 3597, 0, 0, 0, 0, 0, 0 },
        { 3599, 3600, 3602, 3604, 3606, 3608, 3610, 3612, 3614, 3616, 3618, 3620, 3622, 3624, 3626, 3628, 3630, 3632, 3634, 3636, 3638, 3640, 3642, 3644, 3646, 3648, 3650, 3652, 3654, 3656, 3658, 3660, 3662, 3664, 3666, 3668 },
        { 3670, 3671, 3673, 3675, 3677, 3679, 3681, 3683, 3685, 3687, 3689, 3691, 3693, 3695, 3697, 3699, 3701, 3703, 3705, 3707, 3709, 3711, 3713, 3715, 3717, 3719, 3721, 3723, 3725, 3727, 3729, 3731, 3733, 3735, 3737, 3739 },
        { 3741, 3742, 3744, 3746, 3748, 3750, 3752, 3754, 3756, 3758, 3760, 3762, 3764, 3766, 3768, 3770, 3772, 3774, 3776, 3778, 3780, 3782, 3784, 3786, 3788, 3790, 3792, 3794, 3796, 3798, 3800, 3802, 3804, 3806, 3808, 3810 },
        { 3812, 3813, 3815, 3817, 3819, 3821, 3823, 3825, 3827, 3829, 3831, 3833, 3835, 3837, 3839, 3841, 3843, 3845, 3847, 3849, 3851, 3853, 3855, 3857, 3859, 3861, 3863, 3865, 3867, 3869, 3871, 3873, 3875, 3877, 3879, 3881 },
        { 3883, 3884, 3886, 3888, 3890, 3892, 3894, 3896, 3898, 3900, 3902, 3904, 3906, 3908, 3910, 3912, 3914, 3916, 3918, 3920, 3922, 3924, 3926, 3928, 3930, 3932, 3934, 3936, 3938, 3940, 3942, 3944, 3946, 3948, 3950, 3952 },
        { 3954, 3955, 3957, 3959, 3961, 3963, 3965, 3967, 3969, 3971, 3973, 3975, 3977, 3979, 3981, 3983, 3985, 3987, 3989, 3991, 3993, 3995, 3997, 3999, 4001, 4003, 4005, 4007, 4009, 4011, 0, 0, 0, 0, 0, 0 },
        { 4013, 4014, 4016, 4018, 4020, 4022, 4024, 4026, 4028, 4030, 4032, 4034, 4036, 4038, 4040, 4042, 4044, 4046, 4048, 4050, 4052, 4054, 4056, 4058, 4060, 4062, 4064, 4066, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 4068, 4069, 4071, 4073, 4075, 4077, 4079, 4081, 4083, 4085, 4087, 4089, 4091, 4093, 4095, 4097, 4099, 4101, 4103, 4105, 4107, 4109, 4111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 4113, 4114, 4116, 4118, 4120, 4122, 4124, 4126, 4128, 4130, 4132, 4134, 4136, 4138, 4140, 4142, 4144, 4146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 4148, 4149, 4151, 4153, 4155, 4157, 4159, 4161, 4163, 4165, 4167, 4169, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 4171, 4172, 4174, 4176, 4178, 4180, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
      },
		// 48000 Hz sample rate
		{
        // Coefficient offsets
        // Generated by HRTFConv V5.90d on Wed Feb 10 11:01:33 1999
        { 4182, 4183, 4185, 4187, 4189, 4191, 4193, 4195, 4197, 4199, 4201, 4203, 4205, 4207, 4209, 4211, 4213, 4215, 4217, 4219, 4221, 4223, 4225, 4227, 4229, 4231, 4233, 4235, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 4237, 4238, 4240, 4242, 4244, 4246, 4248, 4250, 4252, 4254, 4256, 4258, 4260, 4262, 4264, 4266, 4268, 4270, 4272, 4274, 4276, 4278, 4280, 4282, 4284, 4286, 4288, 4290, 4292, 4294, 0, 0, 0, 0, 0, 0 },
        { 4296, 4297, 4299, 4301, 4303, 4305, 4307, 4309, 4311, 4313, 4315, 4317, 4319, 4321, 4323, 4325, 4327, 4329, 4331, 4333, 4335, 4337, 4339, 4341, 4343, 4345, 4347, 4349, 4351, 4353, 4355, 4357, 4359, 4361, 4363, 4365 },
        { 4367, 4368, 4370, 4372, 4374, 4376, 4378, 4380, 4382, 4384, 4386, 4388, 4390, 4392, 4394, 4396, 4398, 4400, 4402, 4404, 4406, 4408, 4410, 4412, 4414, 4416, 4418, 4420, 4422, 4424, 4426, 4428, 4430, 4432, 4434, 4436 },
        { 4438, 4439, 4441, 4443, 4445, 4447, 4449, 4451, 4453, 4455, 4457, 4459, 4461, 4463, 4465, 4467, 4469, 4471, 4473, 4475, 4477, 4479, 4481, 4483, 4485, 4487, 4489, 4491, 4493, 4495, 4497, 4499, 4501, 4503, 4505, 4507 },
        { 4509, 4510, 4512, 4514, 4516, 4518, 4520, 4522, 4524, 4526, 4528, 4530, 4532, 4534, 4536, 4538, 4540, 4542, 4544, 4546, 4548, 4550, 4552, 4554, 4556, 4558, 4560, 4562, 4564, 4566, 4568, 4570, 4572, 4574, 4576, 4578 },
        { 4580, 4581, 4583, 4585, 4587, 4589, 4591, 4593, 4595, 4597, 4599, 4601, 4603, 4605, 4607, 4609, 4611, 4613, 4615, 4617, 4619, 4621, 4623, 4625, 4627, 4629, 4631, 4633, 4635, 4637, 4639, 4641, 4643, 4645, 4647, 4649 },
        { 4651, 4652, 4654, 4656, 4658, 4660, 4662, 4664, 4666, 4668, 4670, 4672, 4674, 4676, 4678, 4680, 4682, 4684, 4686, 4688, 4690, 4692, 4694, 4696, 4698, 4700, 4702, 4704, 4706, 4708, 0, 0, 0, 0, 0, 0 },
        { 4710, 4711, 4713, 4715, 4717, 4719, 4721, 4723, 4725, 4727, 4729, 4731, 4733, 4735, 4737, 4739, 4741, 4743, 4745, 4747, 4749, 4751, 4753, 4755, 4757, 4759, 4761, 4763, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 4765, 4766, 4768, 4770, 4772, 4774, 4776, 4778, 4780, 4782, 4784, 4786, 4788, 4790, 4792, 4794, 4796, 4798, 4800, 4802, 4804, 4806, 4808, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 4810, 4811, 4813, 4815, 4817, 4819, 4821, 4823, 4825, 4827, 4829, 4831, 4833, 4835, 4837, 4839, 4841, 4843, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 4845, 4846, 4848, 4850, 4852, 4854, 4856, 4858, 4860, 4862, 4864, 4866, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 4868, 4869, 4871, 4873, 4875, 4877, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        }
		},
	
		// 20 degrees loudspeakers
		{
		// 8000 Hz sample rate
		{
		 // Coefficient offsets
        // Generated by HRTFConv V5.90d on Wed Mar 03 18:17:54 1999
        { 0, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 55, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 0, 0, 0, 0, 0, 0 },
        { 114, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183 },
        { 185, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254 },
        { 256, 257, 259, 261, 263, 265, 267, 269, 271, 273, 275, 277, 279, 281, 283, 285, 287, 289, 291, 293, 295, 297, 299, 301, 303, 305, 307, 309, 311, 313, 315, 317, 319, 321, 323, 325 },
        { 327, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396 },
        { 398, 399, 401, 403, 405, 407, 409, 411, 413, 415, 417, 419, 421, 423, 425, 427, 429, 431, 433, 435, 437, 439, 441, 443, 445, 447, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467 },
        { 469, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 494, 496, 498, 500, 502, 504, 506, 508, 510, 512, 514, 516, 518, 520, 522, 524, 526, 0, 0, 0, 0, 0, 0 },
        { 528, 529, 531, 533, 535, 537, 539, 541, 543, 545, 547, 549, 551, 553, 555, 557, 559, 561, 563, 565, 567, 569, 571, 573, 575, 577, 579, 581, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 583, 584, 586, 588, 590, 592, 594, 596, 598, 600, 602, 604, 606, 608, 610, 612, 614, 616, 618, 620, 622, 624, 626, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 628, 629, 631, 633, 635, 637, 639, 641, 643, 645, 647, 649, 651, 653, 655, 657, 659, 661, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 663, 664, 666, 668, 670, 672, 674, 676, 678, 680, 682, 684, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 686, 687, 689, 691, 693, 695, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
	    },
		// 11025 Hz sample rate
		{ 
		// Coefficient offsets
        // Generated by HRTFConv V5.90d on Fri Mar 12 14:03:02 1999
        { 697, 698, 700, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 728, 730, 732, 734, 736, 738, 740, 742, 744, 746, 748, 750, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 752, 753, 755, 757, 759, 761, 763, 765, 767, 769, 771, 773, 775, 777, 779, 781, 783, 785, 787, 789, 791, 793, 795, 797, 799, 801, 803, 805, 807, 809, 0, 0, 0, 0, 0, 0 },
        { 811, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 832, 834, 836, 838, 840, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 864, 866, 868, 870, 872, 874, 876, 878, 880 },
        { 882, 883, 885, 887, 889, 891, 893, 895, 897, 899, 901, 903, 905, 907, 909, 911, 913, 915, 917, 919, 921, 923, 925, 927, 929, 931, 933, 935, 937, 939, 941, 943, 945, 947, 949, 951 },
        { 953, 954, 956, 958, 960, 962, 964, 966, 968, 970, 972, 974, 976, 978, 980, 982, 984, 986, 988, 990, 992, 994, 996, 998, 1000, 1002, 1004, 1006, 1008, 1010, 1012, 1014, 1016, 1018, 1020, 1022 },
        { 1024, 1025, 1027, 1029, 1031, 1033, 1035, 1037, 1039, 1041, 1043, 1045, 1047, 1049, 1051, 1053, 1055, 1057, 1059, 1061, 1063, 1065, 1067, 1069, 1071, 1073, 1075, 1077, 1079, 1081, 1083, 1085, 1087, 1089, 1091, 1093 },
        { 1095, 1096, 1098, 1100, 1102, 1104, 1106, 1108, 1110, 1112, 1114, 1116, 1118, 1120, 1122, 1124, 1126, 1128, 1130, 1132, 1134, 1136, 1138, 1140, 1142, 1144, 1146, 1148, 1150, 1152, 1154, 1156, 1158, 1160, 1162, 1164 },
        { 1166, 1167, 1169, 1171, 1173, 1175, 1177, 1179, 1181, 1183, 1185, 1187, 1189, 1191, 1193, 1195, 1197, 1199, 1201, 1203, 1205, 1207, 1209, 1211, 1213, 1215, 1217, 1219, 1221, 1223, 0, 0, 0, 0, 0, 0 },
        { 1225, 1226, 1228, 1230, 1232, 1234, 1236, 1238, 1240, 1242, 1244, 1246, 1248, 1250, 1252, 1254, 1256, 1258, 1260, 1262, 1264, 1266, 1268, 1270, 1272, 1274, 1276, 1278, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 1280, 1281, 1283, 1285, 1287, 1289, 1291, 1293, 1295, 1297, 1299, 1301, 1303, 1305, 1307, 1309, 1311, 1313, 1315, 1317, 1319, 1321, 1323, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 1325, 1326, 1328, 1330, 1332, 1334, 1336, 1338, 1340, 1342, 1344, 1346, 1348, 1350, 1352, 1354, 1356, 1358, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 1360, 1361, 1363, 1365, 1367, 1369, 1371, 1373, 1375, 1377, 1379, 1381, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 1383, 1384, 1386, 1388, 1390, 1392, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
       	},
        // 16000 Hz sample rate
        {
		// Coefficient offsets
        // Generated by HRTFConv V5.90d on Fri Mar 12 14:08:05 1999
        { 1394, 1395, 1397, 1399, 1401, 1403, 1405, 1407, 1409, 1411, 1413, 1415, 1417, 1419, 1421, 1423, 1425, 1427, 1429, 1431, 1433, 1435, 1437, 1439, 1441, 1443, 1445, 1447, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 1449, 1450, 1452, 1454, 1456, 1458, 1460, 1462, 1464, 1466, 1468, 1470, 1472, 1474, 1476, 1478, 1480, 1482, 1484, 1486, 1488, 1490, 1492, 1494, 1496, 1498, 1500, 1502, 1504, 1506, 0, 0, 0, 0, 0, 0 },
        { 1508, 1509, 1511, 1513, 1515, 1517, 1519, 1521, 1523, 1525, 1527, 1529, 1531, 1533, 1535, 1537, 1539, 1541, 1543, 1545, 1547, 1549, 1551, 1553, 1555, 1557, 1559, 1561, 1563, 1565, 1567, 1569, 1571, 1573, 1575, 1577 },
        { 1579, 1580, 1582, 1584, 1586, 1588, 1590, 1592, 1594, 1596, 1598, 1600, 1602, 1604, 1606, 1608, 1610, 1612, 1614, 1616, 1618, 1620, 1622, 1624, 1626, 1628, 1630, 1632, 1634, 1636, 1638, 1640, 1642, 1644, 1646, 1648 },
        { 1650, 1651, 1653, 1655, 1657, 1659, 1661, 1663, 1665, 1667, 1669, 1671, 1673, 1675, 1677, 1679, 1681, 1683, 1685, 1687, 1689, 1691, 1693, 1695, 1697, 1699, 1701, 1703, 1705, 1707, 1709, 1711, 1713, 1715, 1717, 1719 },
        { 1721, 1722, 1724, 1726, 1728, 1730, 1732, 1734, 1736, 1738, 1740, 1742, 1744, 1746, 1748, 1750, 1752, 1754, 1756, 1758, 1760, 1762, 1764, 1766, 1768, 1770, 1772, 1774, 1776, 1778, 1780, 1782, 1784, 1786, 1788, 1790 },
        { 1792, 1793, 1795, 1797, 1799, 1801, 1803, 1805, 1807, 1809, 1811, 1813, 1815, 1817, 1819, 1821, 1823, 1825, 1827, 1829, 1831, 1833, 1835, 1837, 1839, 1841, 1843, 1845, 1847, 1849, 1851, 1853, 1855, 1857, 1859, 1861 },
        { 1863, 1864, 1866, 1868, 1870, 1872, 1874, 1876, 1878, 1880, 1882, 1884, 1886, 1888, 1890, 1892, 1894, 1896, 1898, 1900, 1902, 1904, 1906, 1908, 1910, 1912, 1914, 1916, 1918, 1920, 0, 0, 0, 0, 0, 0 },
        { 1922, 1923, 1925, 1927, 1929, 1931, 1933, 1935, 1937, 1939, 1941, 1943, 1945, 1947, 1949, 1951, 1953, 1955, 1957, 1959, 1961, 1963, 1965, 1967, 1969, 1971, 1973, 1975, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 1977, 1978, 1980, 1982, 1984, 1986, 1988, 1990, 1992, 1994, 1996, 1998, 2000, 2002, 2004, 2006, 2008, 2010, 2012, 2014, 2016, 2018, 2020, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 2022, 2023, 2025, 2027, 2029, 2031, 2033, 2035, 2037, 2039, 2041, 2043, 2045, 2047, 2049, 2051, 2053, 2055, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 2057, 2058, 2060, 2062, 2064, 2066, 2068, 2070, 2072, 2074, 2076, 2078, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 2080, 2081, 2083, 2085, 2087, 2089, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        },

		// 22050 Hz sample rate
		{
	    // Coefficient offsets
        // Generated by HRTFConv V5.90d on Fri Mar 12 14:10:19 1999
        { 2091, 2092, 2094, 2096, 2098, 2100, 2102, 2104, 2106, 2108, 2110, 2112, 2114, 2116, 2118, 2120, 2122, 2124, 2126, 2128, 2130, 2132, 2134, 2136, 2138, 2140, 2142, 2144, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 2146, 2147, 2149, 2151, 2153, 2155, 2157, 2159, 2161, 2163, 2165, 2167, 2169, 2171, 2173, 2175, 2177, 2179, 2181, 2183, 2185, 2187, 2189, 2191, 2193, 2195, 2197, 2199, 2201, 2203, 0, 0, 0, 0, 0, 0 },
        { 2205, 2206, 2208, 2210, 2212, 2214, 2216, 2218, 2220, 2222, 2224, 2226, 2228, 2230, 2232, 2234, 2236, 2238, 2240, 2242, 2244, 2246, 2248, 2250, 2252, 2254, 2256, 2258, 2260, 2262, 2264, 2266, 2268, 2270, 2272, 2274 },
        { 2276, 2277, 2279, 2281, 2283, 2285, 2287, 2289, 2291, 2293, 2295, 2297, 2299, 2301, 2303, 2305, 2307, 2309, 2311, 2313, 2315, 2317, 2319, 2321, 2323, 2325, 2327, 2329, 2331, 2333, 2335, 2337, 2339, 2341, 2343, 2345 },
        { 2347, 2348, 2350, 2352, 2354, 2356, 2358, 2360, 2362, 2364, 2366, 2368, 2370, 2372, 2374, 2376, 2378, 2380, 2382, 2384, 2386, 2388, 2390, 2392, 2394, 2396, 2398, 2400, 2402, 2404, 2406, 2408, 2410, 2412, 2414, 2416 },
        { 2418, 2419, 2421, 2423, 2425, 2427, 2429, 2431, 2433, 2435, 2437, 2439, 2441, 2443, 2445, 2447, 2449, 2451, 2453, 2455, 2457, 2459, 2461, 2463, 2465, 2467, 2469, 2471, 2473, 2475, 2477, 2479, 2481, 2483, 2485, 2487 },
        { 2489, 2490, 2492, 2494, 2496, 2498, 2500, 2502, 2504, 2506, 2508, 2510, 2512, 2514, 2516, 2518, 2520, 2522, 2524, 2526, 2528, 2530, 2532, 2534, 2536, 2538, 2540, 2542, 2544, 2546, 2548, 2550, 2552, 2554, 2556, 2558 },
        { 2560, 2561, 2563, 2565, 2567, 2569, 2571, 2573, 2575, 2577, 2579, 2581, 2583, 2585, 2587, 2589, 2591, 2593, 2595, 2597, 2599, 2601, 2603, 2605, 2607, 2609, 2611, 2613, 2615, 2617, 0, 0, 0, 0, 0, 0 },
        { 2619, 2620, 2622, 2624, 2626, 2628, 2630, 2632, 2634, 2636, 2638, 2640, 2642, 2644, 2646, 2648, 2650, 2652, 2654, 2656, 2658, 2660, 2662, 2664, 2666, 2668, 2670, 2672, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 2674, 2675, 2677, 2679, 2681, 2683, 2685, 2687, 2689, 2691, 2693, 2695, 2697, 2699, 2701, 2703, 2705, 2707, 2709, 2711, 2713, 2715, 2717, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 2719, 2720, 2722, 2724, 2726, 2728, 2730, 2732, 2734, 2736, 2738, 2740, 2742, 2744, 2746, 2748, 2750, 2752, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 2754, 2755, 2757, 2759, 2761, 2763, 2765, 2767, 2769, 2771, 2773, 2775, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 2777, 2778, 2780, 2782, 2784, 2786, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
		},
		// 32000 Hz sample rate
		{
			// Coefficient offsets
        // Generated by HRTFConv V5.90d on Fri Apr 16 10:26:55 1999
        { 2788, 2789, 2791, 2793, 2795, 2797, 2799, 2801, 2803, 2805, 2807, 2809, 2811, 2813, 2815, 2817, 2819, 2821, 2823, 2825, 2827, 2829, 2831, 2833, 2835, 2837, 2839, 2841, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 2843, 2844, 2846, 2848, 2850, 2852, 2854, 2856, 2858, 2860, 2862, 2864, 2866, 2868, 2870, 2872, 2874, 2876, 2878, 2880, 2882, 2884, 2886, 2888, 2890, 2892, 2894, 2896, 2898, 2900, 0, 0, 0, 0, 0, 0 },
        { 2902, 2903, 2905, 2907, 2909, 2911, 2913, 2915, 2917, 2919, 2921, 2923, 2925, 2927, 2929, 2931, 2933, 2935, 2937, 2939, 2941, 2943, 2945, 2947, 2949, 2951, 2953, 2955, 2957, 2959, 2961, 2963, 2965, 2967, 2969, 2971 },
        { 2973, 2974, 2976, 2978, 2980, 2982, 2984, 2986, 2988, 2990, 2992, 2994, 2996, 2998, 3000, 3002, 3004, 3006, 3008, 3010, 3012, 3014, 3016, 3018, 3020, 3022, 3024, 3026, 3028, 3030, 3032, 3034, 3036, 3038, 3040, 3042 },
        { 3044, 3045, 3047, 3049, 3051, 3053, 3055, 3057, 3059, 3061, 3063, 3065, 3067, 3069, 3071, 3073, 3075, 3077, 3079, 3081, 3083, 3085, 3087, 3089, 3091, 3093, 3095, 3097, 3099, 3101, 3103, 3105, 3107, 3109, 3111, 3113 },
        { 3115, 3116, 3118, 3120, 3122, 3124, 3126, 3128, 3130, 3132, 3134, 3136, 3138, 3140, 3142, 3144, 3146, 3148, 3150, 3152, 3154, 3156, 3158, 3160, 3162, 3164, 3166, 3168, 3170, 3172, 3174, 3176, 3178, 3180, 3182, 3184 },
        { 3186, 3187, 3189, 3191, 3193, 3195, 3197, 3199, 3201, 3203, 3205, 3207, 3209, 3211, 3213, 3215, 3217, 3219, 3221, 3223, 3225, 3227, 3229, 3231, 3233, 3235, 3237, 3239, 3241, 3243, 3245, 3247, 3249, 3251, 3253, 3255 },
        { 3257, 3258, 3260, 3262, 3264, 3266, 3268, 3270, 3272, 3274, 3276, 3278, 3280, 3282, 3284, 3286, 3288, 3290, 3292, 3294, 3296, 3298, 3300, 3302, 3304, 3306, 3308, 3310, 3312, 3314, 0, 0, 0, 0, 0, 0 },
        { 3316, 3317, 3319, 3321, 3323, 3325, 3327, 3329, 3331, 3333, 3335, 3337, 3339, 3341, 3343, 3345, 3347, 3349, 3351, 3353, 3355, 3357, 3359, 3361, 3363, 3365, 3367, 3369, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 3371, 3372, 3374, 3376, 3378, 3380, 3382, 3384, 3386, 3388, 3390, 3392, 3394, 3396, 3398, 3400, 3402, 3404, 3406, 3408, 3410, 3412, 3414, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 3416, 3417, 3419, 3421, 3423, 3425, 3427, 3429, 3431, 3433, 3435, 3437, 3439, 3441, 3443, 3445, 3447, 3449, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 3451, 3452, 3454, 3456, 3458, 3460, 3462, 3464, 3466, 3468, 3470, 3472, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 3474, 3475, 3477, 3479, 3481, 3483, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
	     },
		// 44100 Hz sample rate
		{
		// Coefficient offsets
        // Generated by HRTFConv V5.90d on Fri Apr 16 10:28:18 1999
        { 3485, 3486, 3488, 3490, 3492, 3494, 3496, 3498, 3500, 3502, 3504, 3506, 3508, 3510, 3512, 3514, 3516, 3518, 3520, 3522, 3524, 3526, 3528, 3530, 3532, 3534, 3536, 3538, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 3540, 3541, 3543, 3545, 3547, 3549, 3551, 3553, 3555, 3557, 3559, 3561, 3563, 3565, 3567, 3569, 3571, 3573, 3575, 3577, 3579, 3581, 3583, 3585, 3587, 3589, 3591, 3593, 3595, 3597, 0, 0, 0, 0, 0, 0 },
        { 3599, 3600, 3602, 3604, 3606, 3608, 3610, 3612, 3614, 3616, 3618, 3620, 3622, 3624, 3626, 3628, 3630, 3632, 3634, 3636, 3638, 3640, 3642, 3644, 3646, 3648, 3650, 3652, 3654, 3656, 3658, 3660, 3662, 3664, 3666, 3668 },
        { 3670, 3671, 3673, 3675, 3677, 3679, 3681, 3683, 3685, 3687, 3689, 3691, 3693, 3695, 3697, 3699, 3701, 3703, 3705, 3707, 3709, 3711, 3713, 3715, 3717, 3719, 3721, 3723, 3725, 3727, 3729, 3731, 3733, 3735, 3737, 3739 },
        { 3741, 3742, 3744, 3746, 3748, 3750, 3752, 3754, 3756, 3758, 3760, 3762, 3764, 3766, 3768, 3770, 3772, 3774, 3776, 3778, 3780, 3782, 3784, 3786, 3788, 3790, 3792, 3794, 3796, 3798, 3800, 3802, 3804, 3806, 3808, 3810 },
        { 3812, 3813, 3815, 3817, 3819, 3821, 3823, 3825, 3827, 3829, 3831, 3833, 3835, 3837, 3839, 3841, 3843, 3845, 3847, 3849, 3851, 3853, 3855, 3857, 3859, 3861, 3863, 3865, 3867, 3869, 3871, 3873, 3875, 3877, 3879, 3881 },
        { 3883, 3884, 3886, 3888, 3890, 3892, 3894, 3896, 3898, 3900, 3902, 3904, 3906, 3908, 3910, 3912, 3914, 3916, 3918, 3920, 3922, 3924, 3926, 3928, 3930, 3932, 3934, 3936, 3938, 3940, 3942, 3944, 3946, 3948, 3950, 3952 },
        { 3954, 3955, 3957, 3959, 3961, 3963, 3965, 3967, 3969, 3971, 3973, 3975, 3977, 3979, 3981, 3983, 3985, 3987, 3989, 3991, 3993, 3995, 3997, 3999, 4001, 4003, 4005, 4007, 4009, 4011, 0, 0, 0, 0, 0, 0 },
        { 4013, 4014, 4016, 4018, 4020, 4022, 4024, 4026, 4028, 4030, 4032, 4034, 4036, 4038, 4040, 4042, 4044, 4046, 4048, 4050, 4052, 4054, 4056, 4058, 4060, 4062, 4064, 4066, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 4068, 4069, 4071, 4073, 4075, 4077, 4079, 4081, 4083, 4085, 4087, 4089, 4091, 4093, 4095, 4097, 4099, 4101, 4103, 4105, 4107, 4109, 4111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 4113, 4114, 4116, 4118, 4120, 4122, 4124, 4126, 4128, 4130, 4132, 4134, 4136, 4138, 4140, 4142, 4144, 4146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 4148, 4149, 4151, 4153, 4155, 4157, 4159, 4161, 4163, 4165, 4167, 4169, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 4171, 4172, 4174, 4176, 4178, 4180, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
  	     },
		// 48000 Hz sample rate
		{
		 // Coefficient offsets
        // Generated by HRTFConv V5.90d on Wed Feb 10 11:01:33 1999
        { 4182, 4183, 4185, 4187, 4189, 4191, 4193, 4195, 4197, 4199, 4201, 4203, 4205, 4207, 4209, 4211, 4213, 4215, 4217, 4219, 4221, 4223, 4225, 4227, 4229, 4231, 4233, 4235, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 4237, 4238, 4240, 4242, 4244, 4246, 4248, 4250, 4252, 4254, 4256, 4258, 4260, 4262, 4264, 4266, 4268, 4270, 4272, 4274, 4276, 4278, 4280, 4282, 4284, 4286, 4288, 4290, 4292, 4294, 0, 0, 0, 0, 0, 0 },
        { 4296, 4297, 4299, 4301, 4303, 4305, 4307, 4309, 4311, 4313, 4315, 4317, 4319, 4321, 4323, 4325, 4327, 4329, 4331, 4333, 4335, 4337, 4339, 4341, 4343, 4345, 4347, 4349, 4351, 4353, 4355, 4357, 4359, 4361, 4363, 4365 },
        { 4367, 4368, 4370, 4372, 4374, 4376, 4378, 4380, 4382, 4384, 4386, 4388, 4390, 4392, 4394, 4396, 4398, 4400, 4402, 4404, 4406, 4408, 4410, 4412, 4414, 4416, 4418, 4420, 4422, 4424, 4426, 4428, 4430, 4432, 4434, 4436 },
        { 4438, 4439, 4441, 4443, 4445, 4447, 4449, 4451, 4453, 4455, 4457, 4459, 4461, 4463, 4465, 4467, 4469, 4471, 4473, 4475, 4477, 4479, 4481, 4483, 4485, 4487, 4489, 4491, 4493, 4495, 4497, 4499, 4501, 4503, 4505, 4507 },
        { 4509, 4510, 4512, 4514, 4516, 4518, 4520, 4522, 4524, 4526, 4528, 4530, 4532, 4534, 4536, 4538, 4540, 4542, 4544, 4546, 4548, 4550, 4552, 4554, 4556, 4558, 4560, 4562, 4564, 4566, 4568, 4570, 4572, 4574, 4576, 4578 },
        { 4580, 4581, 4583, 4585, 4587, 4589, 4591, 4593, 4595, 4597, 4599, 4601, 4603, 4605, 4607, 4609, 4611, 4613, 4615, 4617, 4619, 4621, 4623, 4625, 4627, 4629, 4631, 4633, 4635, 4637, 4639, 4641, 4643, 4645, 4647, 4649 },
        { 4651, 4652, 4654, 4656, 4658, 4660, 4662, 4664, 4666, 4668, 4670, 4672, 4674, 4676, 4678, 4680, 4682, 4684, 4686, 4688, 4690, 4692, 4694, 4696, 4698, 4700, 4702, 4704, 4706, 4708, 0, 0, 0, 0, 0, 0 },
        { 4710, 4711, 4713, 4715, 4717, 4719, 4721, 4723, 4725, 4727, 4729, 4731, 4733, 4735, 4737, 4739, 4741, 4743, 4745, 4747, 4749, 4751, 4753, 4755, 4757, 4759, 4761, 4763, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 4765, 4766, 4768, 4770, 4772, 4774, 4776, 4778, 4780, 4782, 4784, 4786, 4788, 4790, 4792, 4794, 4796, 4798, 4800, 4802, 4804, 4806, 4808, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 4810, 4811, 4813, 4815, 4817, 4819, 4821, 4823, 4825, 4827, 4829, 4831, 4833, 4835, 4837, 4839, 4841, 4843, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 4845, 4846, 4848, 4850, 4852, 4854, 4856, 4858, 4860, 4862, 4864, 4866, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 4868, 4869, 4871, 4873, 4875, 4877, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
               }	
		},
		// Headphones
		{
	    // 8000 Hz sample  rate
		{
   		 // Coefficient offsets
        // Generated by HRTFConv V5.90d on Wed Mar 03 18:17:54 1999
        { 0, 1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 21, 23, 25, 27, 29, 31, 33, 35, 37, 39, 41, 43, 45, 47, 49, 51, 53, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 55, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 0, 0, 0, 0, 0, 0 },
        { 114, 115, 117, 119, 121, 123, 125, 127, 129, 131, 133, 135, 137, 139, 141, 143, 145, 147, 149, 151, 153, 155, 157, 159, 161, 163, 165, 167, 169, 171, 173, 175, 177, 179, 181, 183 },
        { 185, 186, 188, 190, 192, 194, 196, 198, 200, 202, 204, 206, 208, 210, 212, 214, 216, 218, 220, 222, 224, 226, 228, 230, 232, 234, 236, 238, 240, 242, 244, 246, 248, 250, 252, 254 },
        { 256, 257, 259, 261, 263, 265, 267, 269, 271, 273, 275, 277, 279, 281, 283, 285, 287, 289, 291, 293, 295, 297, 299, 301, 303, 305, 307, 309, 311, 313, 315, 317, 319, 321, 323, 325 },
        { 327, 328, 330, 332, 334, 336, 338, 340, 342, 344, 346, 348, 350, 352, 354, 356, 358, 360, 362, 364, 366, 368, 370, 372, 374, 376, 378, 380, 382, 384, 386, 388, 390, 392, 394, 396 },
        { 398, 399, 401, 403, 405, 407, 409, 411, 413, 415, 417, 419, 421, 423, 425, 427, 429, 431, 433, 435, 437, 439, 441, 443, 445, 447, 449, 451, 453, 455, 457, 459, 461, 463, 465, 467 },
        { 469, 470, 472, 474, 476, 478, 480, 482, 484, 486, 488, 490, 492, 494, 496, 498, 500, 502, 504, 506, 508, 510, 512, 514, 516, 518, 520, 522, 524, 526, 0, 0, 0, 0, 0, 0 },
        { 528, 529, 531, 533, 535, 537, 539, 541, 543, 545, 547, 549, 551, 553, 555, 557, 559, 561, 563, 565, 567, 569, 571, 573, 575, 577, 579, 581, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 583, 584, 586, 588, 590, 592, 594, 596, 598, 600, 602, 604, 606, 608, 610, 612, 614, 616, 618, 620, 622, 624, 626, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 628, 629, 631, 633, 635, 637, 639, 641, 643, 645, 647, 649, 651, 653, 655, 657, 659, 661, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 663, 664, 666, 668, 670, 672, 674, 676, 678, 680, 682, 684, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 686, 687, 689, 691, 693, 695, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
	    },
		// 11025 Hz sample rate
		{ 
		// Coefficient offsets
        // Generated by HRTFConv V5.90d on Fri Mar 12 14:03:02 1999
        { 697, 698, 700, 702, 704, 706, 708, 710, 712, 714, 716, 718, 720, 722, 724, 726, 728, 730, 732, 734, 736, 738, 740, 742, 744, 746, 748, 750, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 752, 753, 755, 757, 759, 761, 763, 765, 767, 769, 771, 773, 775, 777, 779, 781, 783, 785, 787, 789, 791, 793, 795, 797, 799, 801, 803, 805, 807, 809, 0, 0, 0, 0, 0, 0 },
        { 811, 812, 814, 816, 818, 820, 822, 824, 826, 828, 830, 832, 834, 836, 838, 840, 842, 844, 846, 848, 850, 852, 854, 856, 858, 860, 862, 864, 866, 868, 870, 872, 874, 876, 878, 880 },
        { 882, 883, 885, 887, 889, 891, 893, 895, 897, 899, 901, 903, 905, 907, 909, 911, 913, 915, 917, 919, 921, 923, 925, 927, 929, 931, 933, 935, 937, 939, 941, 943, 945, 947, 949, 951 },
        { 953, 954, 956, 958, 960, 962, 964, 966, 968, 970, 972, 974, 976, 978, 980, 982, 984, 986, 988, 990, 992, 994, 996, 998, 1000, 1002, 1004, 1006, 1008, 1010, 1012, 1014, 1016, 1018, 1020, 1022 },
        { 1024, 1025, 1027, 1029, 1031, 1033, 1035, 1037, 1039, 1041, 1043, 1045, 1047, 1049, 1051, 1053, 1055, 1057, 1059, 1061, 1063, 1065, 1067, 1069, 1071, 1073, 1075, 1077, 1079, 1081, 1083, 1085, 1087, 1089, 1091, 1093 },
        { 1095, 1096, 1098, 1100, 1102, 1104, 1106, 1108, 1110, 1112, 1114, 1116, 1118, 1120, 1122, 1124, 1126, 1128, 1130, 1132, 1134, 1136, 1138, 1140, 1142, 1144, 1146, 1148, 1150, 1152, 1154, 1156, 1158, 1160, 1162, 1164 },
        { 1166, 1167, 1169, 1171, 1173, 1175, 1177, 1179, 1181, 1183, 1185, 1187, 1189, 1191, 1193, 1195, 1197, 1199, 1201, 1203, 1205, 1207, 1209, 1211, 1213, 1215, 1217, 1219, 1221, 1223, 0, 0, 0, 0, 0, 0 },
        { 1225, 1226, 1228, 1230, 1232, 1234, 1236, 1238, 1240, 1242, 1244, 1246, 1248, 1250, 1252, 1254, 1256, 1258, 1260, 1262, 1264, 1266, 1268, 1270, 1272, 1274, 1276, 1278, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 1280, 1281, 1283, 1285, 1287, 1289, 1291, 1293, 1295, 1297, 1299, 1301, 1303, 1305, 1307, 1309, 1311, 1313, 1315, 1317, 1319, 1321, 1323, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 1325, 1326, 1328, 1330, 1332, 1334, 1336, 1338, 1340, 1342, 1344, 1346, 1348, 1350, 1352, 1354, 1356, 1358, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 1360, 1361, 1363, 1365, 1367, 1369, 1371, 1373, 1375, 1377, 1379, 1381, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 1383, 1384, 1386, 1388, 1390, 1392, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
       	},
        // 16000 Hz sample rate
        {
		// Coefficient offsets
        // Generated by HRTFConv V5.90d on Fri Mar 12 14:08:05 1999
        { 1394, 1395, 1397, 1399, 1401, 1403, 1405, 1407, 1409, 1411, 1413, 1415, 1417, 1419, 1421, 1423, 1425, 1427, 1429, 1431, 1433, 1435, 1437, 1439, 1441, 1443, 1445, 1447, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 1449, 1450, 1452, 1454, 1456, 1458, 1460, 1462, 1464, 1466, 1468, 1470, 1472, 1474, 1476, 1478, 1480, 1482, 1484, 1486, 1488, 1490, 1492, 1494, 1496, 1498, 1500, 1502, 1504, 1506, 0, 0, 0, 0, 0, 0 },
        { 1508, 1509, 1511, 1513, 1515, 1517, 1519, 1521, 1523, 1525, 1527, 1529, 1531, 1533, 1535, 1537, 1539, 1541, 1543, 1545, 1547, 1549, 1551, 1553, 1555, 1557, 1559, 1561, 1563, 1565, 1567, 1569, 1571, 1573, 1575, 1577 },
        { 1579, 1580, 1582, 1584, 1586, 1588, 1590, 1592, 1594, 1596, 1598, 1600, 1602, 1604, 1606, 1608, 1610, 1612, 1614, 1616, 1618, 1620, 1622, 1624, 1626, 1628, 1630, 1632, 1634, 1636, 1638, 1640, 1642, 1644, 1646, 1648 },
        { 1650, 1651, 1653, 1655, 1657, 1659, 1661, 1663, 1665, 1667, 1669, 1671, 1673, 1675, 1677, 1679, 1681, 1683, 1685, 1687, 1689, 1691, 1693, 1695, 1697, 1699, 1701, 1703, 1705, 1707, 1709, 1711, 1713, 1715, 1717, 1719 },
        { 1721, 1722, 1724, 1726, 1728, 1730, 1732, 1734, 1736, 1738, 1740, 1742, 1744, 1746, 1748, 1750, 1752, 1754, 1756, 1758, 1760, 1762, 1764, 1766, 1768, 1770, 1772, 1774, 1776, 1778, 1780, 1782, 1784, 1786, 1788, 1790 },
        { 1792, 1793, 1795, 1797, 1799, 1801, 1803, 1805, 1807, 1809, 1811, 1813, 1815, 1817, 1819, 1821, 1823, 1825, 1827, 1829, 1831, 1833, 1835, 1837, 1839, 1841, 1843, 1845, 1847, 1849, 1851, 1853, 1855, 1857, 1859, 1861 },
        { 1863, 1864, 1866, 1868, 1870, 1872, 1874, 1876, 1878, 1880, 1882, 1884, 1886, 1888, 1890, 1892, 1894, 1896, 1898, 1900, 1902, 1904, 1906, 1908, 1910, 1912, 1914, 1916, 1918, 1920, 0, 0, 0, 0, 0, 0 },
        { 1922, 1923, 1925, 1927, 1929, 1931, 1933, 1935, 1937, 1939, 1941, 1943, 1945, 1947, 1949, 1951, 1953, 1955, 1957, 1959, 1961, 1963, 1965, 1967, 1969, 1971, 1973, 1975, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 1977, 1978, 1980, 1982, 1984, 1986, 1988, 1990, 1992, 1994, 1996, 1998, 2000, 2002, 2004, 2006, 2008, 2010, 2012, 2014, 2016, 2018, 2020, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 2022, 2023, 2025, 2027, 2029, 2031, 2033, 2035, 2037, 2039, 2041, 2043, 2045, 2047, 2049, 2051, 2053, 2055, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 2057, 2058, 2060, 2062, 2064, 2066, 2068, 2070, 2072, 2074, 2076, 2078, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 2080, 2081, 2083, 2085, 2087, 2089, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        },

		// 22050 Hz sample rate
		{
	    // Coefficient offsets
        // Generated by HRTFConv V5.90d on Fri Mar 12 14:10:19 1999
        { 2091, 2092, 2094, 2096, 2098, 2100, 2102, 2104, 2106, 2108, 2110, 2112, 2114, 2116, 2118, 2120, 2122, 2124, 2126, 2128, 2130, 2132, 2134, 2136, 2138, 2140, 2142, 2144, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 2146, 2147, 2149, 2151, 2153, 2155, 2157, 2159, 2161, 2163, 2165, 2167, 2169, 2171, 2173, 2175, 2177, 2179, 2181, 2183, 2185, 2187, 2189, 2191, 2193, 2195, 2197, 2199, 2201, 2203, 0, 0, 0, 0, 0, 0 },
        { 2205, 2206, 2208, 2210, 2212, 2214, 2216, 2218, 2220, 2222, 2224, 2226, 2228, 2230, 2232, 2234, 2236, 2238, 2240, 2242, 2244, 2246, 2248, 2250, 2252, 2254, 2256, 2258, 2260, 2262, 2264, 2266, 2268, 2270, 2272, 2274 },
        { 2276, 2277, 2279, 2281, 2283, 2285, 2287, 2289, 2291, 2293, 2295, 2297, 2299, 2301, 2303, 2305, 2307, 2309, 2311, 2313, 2315, 2317, 2319, 2321, 2323, 2325, 2327, 2329, 2331, 2333, 2335, 2337, 2339, 2341, 2343, 2345 },
        { 2347, 2348, 2350, 2352, 2354, 2356, 2358, 2360, 2362, 2364, 2366, 2368, 2370, 2372, 2374, 2376, 2378, 2380, 2382, 2384, 2386, 2388, 2390, 2392, 2394, 2396, 2398, 2400, 2402, 2404, 2406, 2408, 2410, 2412, 2414, 2416 },
        { 2418, 2419, 2421, 2423, 2425, 2427, 2429, 2431, 2433, 2435, 2437, 2439, 2441, 2443, 2445, 2447, 2449, 2451, 2453, 2455, 2457, 2459, 2461, 2463, 2465, 2467, 2469, 2471, 2473, 2475, 2477, 2479, 2481, 2483, 2485, 2487 },
        { 2489, 2490, 2492, 2494, 2496, 2498, 2500, 2502, 2504, 2506, 2508, 2510, 2512, 2514, 2516, 2518, 2520, 2522, 2524, 2526, 2528, 2530, 2532, 2534, 2536, 2538, 2540, 2542, 2544, 2546, 2548, 2550, 2552, 2554, 2556, 2558 },
        { 2560, 2561, 2563, 2565, 2567, 2569, 2571, 2573, 2575, 2577, 2579, 2581, 2583, 2585, 2587, 2589, 2591, 2593, 2595, 2597, 2599, 2601, 2603, 2605, 2607, 2609, 2611, 2613, 2615, 2617, 0, 0, 0, 0, 0, 0 },
        { 2619, 2620, 2622, 2624, 2626, 2628, 2630, 2632, 2634, 2636, 2638, 2640, 2642, 2644, 2646, 2648, 2650, 2652, 2654, 2656, 2658, 2660, 2662, 2664, 2666, 2668, 2670, 2672, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 2674, 2675, 2677, 2679, 2681, 2683, 2685, 2687, 2689, 2691, 2693, 2695, 2697, 2699, 2701, 2703, 2705, 2707, 2709, 2711, 2713, 2715, 2717, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 2719, 2720, 2722, 2724, 2726, 2728, 2730, 2732, 2734, 2736, 2738, 2740, 2742, 2744, 2746, 2748, 2750, 2752, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 2754, 2755, 2757, 2759, 2761, 2763, 2765, 2767, 2769, 2771, 2773, 2775, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 2777, 2778, 2780, 2782, 2784, 2786, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
		},
		// 32000 Hz sample rate
		{
	 	// Coefficient offsets
        // Generated by HRTFConv V5.90d on Fri Apr 16 10:26:55 1999
        { 2788, 2789, 2791, 2793, 2795, 2797, 2799, 2801, 2803, 2805, 2807, 2809, 2811, 2813, 2815, 2817, 2819, 2821, 2823, 2825, 2827, 2829, 2831, 2833, 2835, 2837, 2839, 2841, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 2843, 2844, 2846, 2848, 2850, 2852, 2854, 2856, 2858, 2860, 2862, 2864, 2866, 2868, 2870, 2872, 2874, 2876, 2878, 2880, 2882, 2884, 2886, 2888, 2890, 2892, 2894, 2896, 2898, 2900, 0, 0, 0, 0, 0, 0 },
        { 2902, 2903, 2905, 2907, 2909, 2911, 2913, 2915, 2917, 2919, 2921, 2923, 2925, 2927, 2929, 2931, 2933, 2935, 2937, 2939, 2941, 2943, 2945, 2947, 2949, 2951, 2953, 2955, 2957, 2959, 2961, 2963, 2965, 2967, 2969, 2971 },
        { 2973, 2974, 2976, 2978, 2980, 2982, 2984, 2986, 2988, 2990, 2992, 2994, 2996, 2998, 3000, 3002, 3004, 3006, 3008, 3010, 3012, 3014, 3016, 3018, 3020, 3022, 3024, 3026, 3028, 3030, 3032, 3034, 3036, 3038, 3040, 3042 },
        { 3044, 3045, 3047, 3049, 3051, 3053, 3055, 3057, 3059, 3061, 3063, 3065, 3067, 3069, 3071, 3073, 3075, 3077, 3079, 3081, 3083, 3085, 3087, 3089, 3091, 3093, 3095, 3097, 3099, 3101, 3103, 3105, 3107, 3109, 3111, 3113 },
        { 3115, 3116, 3118, 3120, 3122, 3124, 3126, 3128, 3130, 3132, 3134, 3136, 3138, 3140, 3142, 3144, 3146, 3148, 3150, 3152, 3154, 3156, 3158, 3160, 3162, 3164, 3166, 3168, 3170, 3172, 3174, 3176, 3178, 3180, 3182, 3184 },
        { 3186, 3187, 3189, 3191, 3193, 3195, 3197, 3199, 3201, 3203, 3205, 3207, 3209, 3211, 3213, 3215, 3217, 3219, 3221, 3223, 3225, 3227, 3229, 3231, 3233, 3235, 3237, 3239, 3241, 3243, 3245, 3247, 3249, 3251, 3253, 3255 },
        { 3257, 3258, 3260, 3262, 3264, 3266, 3268, 3270, 3272, 3274, 3276, 3278, 3280, 3282, 3284, 3286, 3288, 3290, 3292, 3294, 3296, 3298, 3300, 3302, 3304, 3306, 3308, 3310, 3312, 3314, 0, 0, 0, 0, 0, 0 },
        { 3316, 3317, 3319, 3321, 3323, 3325, 3327, 3329, 3331, 3333, 3335, 3337, 3339, 3341, 3343, 3345, 3347, 3349, 3351, 3353, 3355, 3357, 3359, 3361, 3363, 3365, 3367, 3369, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 3371, 3372, 3374, 3376, 3378, 3380, 3382, 3384, 3386, 3388, 3390, 3392, 3394, 3396, 3398, 3400, 3402, 3404, 3406, 3408, 3410, 3412, 3414, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 3416, 3417, 3419, 3421, 3423, 3425, 3427, 3429, 3431, 3433, 3435, 3437, 3439, 3441, 3443, 3445, 3447, 3449, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 3451, 3452, 3454, 3456, 3458, 3460, 3462, 3464, 3466, 3468, 3470, 3472, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 3474, 3475, 3477, 3479, 3481, 3483, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
		},
		// 44100 Hz sample rate
		{
	 	// Coefficient offsets
        // Generated by HRTFConv V5.90d on Fri Apr 16 10:28:18 1999
        { 3485, 3486, 3488, 3490, 3492, 3494, 3496, 3498, 3500, 3502, 3504, 3506, 3508, 3510, 3512, 3514, 3516, 3518, 3520, 3522, 3524, 3526, 3528, 3530, 3532, 3534, 3536, 3538, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 3540, 3541, 3543, 3545, 3547, 3549, 3551, 3553, 3555, 3557, 3559, 3561, 3563, 3565, 3567, 3569, 3571, 3573, 3575, 3577, 3579, 3581, 3583, 3585, 3587, 3589, 3591, 3593, 3595, 3597, 0, 0, 0, 0, 0, 0 },
        { 3599, 3600, 3602, 3604, 3606, 3608, 3610, 3612, 3614, 3616, 3618, 3620, 3622, 3624, 3626, 3628, 3630, 3632, 3634, 3636, 3638, 3640, 3642, 3644, 3646, 3648, 3650, 3652, 3654, 3656, 3658, 3660, 3662, 3664, 3666, 3668 },
        { 3670, 3671, 3673, 3675, 3677, 3679, 3681, 3683, 3685, 3687, 3689, 3691, 3693, 3695, 3697, 3699, 3701, 3703, 3705, 3707, 3709, 3711, 3713, 3715, 3717, 3719, 3721, 3723, 3725, 3727, 3729, 3731, 3733, 3735, 3737, 3739 },
        { 3741, 3742, 3744, 3746, 3748, 3750, 3752, 3754, 3756, 3758, 3760, 3762, 3764, 3766, 3768, 3770, 3772, 3774, 3776, 3778, 3780, 3782, 3784, 3786, 3788, 3790, 3792, 3794, 3796, 3798, 3800, 3802, 3804, 3806, 3808, 3810 },
        { 3812, 3813, 3815, 3817, 3819, 3821, 3823, 3825, 3827, 3829, 3831, 3833, 3835, 3837, 3839, 3841, 3843, 3845, 3847, 3849, 3851, 3853, 3855, 3857, 3859, 3861, 3863, 3865, 3867, 3869, 3871, 3873, 3875, 3877, 3879, 3881 },
        { 3883, 3884, 3886, 3888, 3890, 3892, 3894, 3896, 3898, 3900, 3902, 3904, 3906, 3908, 3910, 3912, 3914, 3916, 3918, 3920, 3922, 3924, 3926, 3928, 3930, 3932, 3934, 3936, 3938, 3940, 3942, 3944, 3946, 3948, 3950, 3952 },
        { 3954, 3955, 3957, 3959, 3961, 3963, 3965, 3967, 3969, 3971, 3973, 3975, 3977, 3979, 3981, 3983, 3985, 3987, 3989, 3991, 3993, 3995, 3997, 3999, 4001, 4003, 4005, 4007, 4009, 4011, 0, 0, 0, 0, 0, 0 },
        { 4013, 4014, 4016, 4018, 4020, 4022, 4024, 4026, 4028, 4030, 4032, 4034, 4036, 4038, 4040, 4042, 4044, 4046, 4048, 4050, 4052, 4054, 4056, 4058, 4060, 4062, 4064, 4066, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 4068, 4069, 4071, 4073, 4075, 4077, 4079, 4081, 4083, 4085, 4087, 4089, 4091, 4093, 4095, 4097, 4099, 4101, 4103, 4105, 4107, 4109, 4111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 4113, 4114, 4116, 4118, 4120, 4122, 4124, 4126, 4128, 4130, 4132, 4134, 4136, 4138, 4140, 4142, 4144, 4146, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 4148, 4149, 4151, 4153, 4155, 4157, 4159, 4161, 4163, 4165, 4167, 4169, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 4171, 4172, 4174, 4176, 4178, 4180, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
  	},
		// 48000 Hz sample rate
		{
       // Coefficient offsets
        // Generated by HRTFConv V5.90d on Wed Feb 10 11:01:33 1999
        { 4182, 4183, 4185, 4187, 4189, 4191, 4193, 4195, 4197, 4199, 4201, 4203, 4205, 4207, 4209, 4211, 4213, 4215, 4217, 4219, 4221, 4223, 4225, 4227, 4229, 4231, 4233, 4235, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 4237, 4238, 4240, 4242, 4244, 4246, 4248, 4250, 4252, 4254, 4256, 4258, 4260, 4262, 4264, 4266, 4268, 4270, 4272, 4274, 4276, 4278, 4280, 4282, 4284, 4286, 4288, 4290, 4292, 4294, 0, 0, 0, 0, 0, 0 },
        { 4296, 4297, 4299, 4301, 4303, 4305, 4307, 4309, 4311, 4313, 4315, 4317, 4319, 4321, 4323, 4325, 4327, 4329, 4331, 4333, 4335, 4337, 4339, 4341, 4343, 4345, 4347, 4349, 4351, 4353, 4355, 4357, 4359, 4361, 4363, 4365 },
        { 4367, 4368, 4370, 4372, 4374, 4376, 4378, 4380, 4382, 4384, 4386, 4388, 4390, 4392, 4394, 4396, 4398, 4400, 4402, 4404, 4406, 4408, 4410, 4412, 4414, 4416, 4418, 4420, 4422, 4424, 4426, 4428, 4430, 4432, 4434, 4436 },
        { 4438, 4439, 4441, 4443, 4445, 4447, 4449, 4451, 4453, 4455, 4457, 4459, 4461, 4463, 4465, 4467, 4469, 4471, 4473, 4475, 4477, 4479, 4481, 4483, 4485, 4487, 4489, 4491, 4493, 4495, 4497, 4499, 4501, 4503, 4505, 4507 },
        { 4509, 4510, 4512, 4514, 4516, 4518, 4520, 4522, 4524, 4526, 4528, 4530, 4532, 4534, 4536, 4538, 4540, 4542, 4544, 4546, 4548, 4550, 4552, 4554, 4556, 4558, 4560, 4562, 4564, 4566, 4568, 4570, 4572, 4574, 4576, 4578 },
        { 4580, 4581, 4583, 4585, 4587, 4589, 4591, 4593, 4595, 4597, 4599, 4601, 4603, 4605, 4607, 4609, 4611, 4613, 4615, 4617, 4619, 4621, 4623, 4625, 4627, 4629, 4631, 4633, 4635, 4637, 4639, 4641, 4643, 4645, 4647, 4649 },
        { 4651, 4652, 4654, 4656, 4658, 4660, 4662, 4664, 4666, 4668, 4670, 4672, 4674, 4676, 4678, 4680, 4682, 4684, 4686, 4688, 4690, 4692, 4694, 4696, 4698, 4700, 4702, 4704, 4706, 4708, 0, 0, 0, 0, 0, 0 },
        { 4710, 4711, 4713, 4715, 4717, 4719, 4721, 4723, 4725, 4727, 4729, 4731, 4733, 4735, 4737, 4739, 4741, 4743, 4745, 4747, 4749, 4751, 4753, 4755, 4757, 4759, 4761, 4763, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 4765, 4766, 4768, 4770, 4772, 4774, 4776, 4778, 4780, 4782, 4784, 4786, 4788, 4790, 4792, 4794, 4796, 4798, 4800, 4802, 4804, 4806, 4808, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 4810, 4811, 4813, 4815, 4817, 4819, 4821, 4823, 4825, 4827, 4829, 4831, 4833, 4835, 4837, 4839, 4841, 4843, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 4845, 4846, 4848, 4850, 4852, 4854, 4856, 4858, 4860, 4862, 4864, 4866, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
        { 4868, 4869, 4871, 4873, 4875, 4877, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
              }


		}
	}
};

// Number of floating-point biquad coefficients
const BYTE CaaaaaabyNumBiquadCoeffs[KSDS3D_FILTER_QUALITY_COUNT][espeakerconfigCount][esamplerateCount][efilterCount][CuiNumElevationBins][CuiMaxAzimuthBins] =
{
	// Full coefficients
	{
        // 10 degrees loudspeakers
        {
		     // 8000 Hz sample rate
			 {

				{

	    // Filter lengths
        // Generated by HRTFConv V5.90d on Thu Mar 11 16:16:59 1999
          { 0, 10, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 10, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0 },
          { 0, 10, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20 },
          { 0, 10, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20 },
          { 0, 5, 5, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 15, 15, 15, 15, 15, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 15, 15, 15, 15 },
          { 0, 10, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20 },
          { 0, 10, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20 },
          { 0, 10, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0 },
          { 0, 10, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 10, 15, 15, 15, 15, 15, 15, 15, 20, 20, 15, 15, 15, 15, 15, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 20, 20, 15, 15, 15, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 20, 15, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        }, {
          { 10, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 10, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0 },
          { 10, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 10, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 5, 10, 5, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10 },
          { 10, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 10, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 10, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0 },
          { 10, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 10, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 10, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
          }
		   },
		   //11025 Hz
		   {
			{

      // Filter lengths
        // Generated by HRTFConv V5.90d on Thu Mar 11 16:40:08 1999
          { 0, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20 },
          { 0, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20 },
          { 0, 10, 5, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 5, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 15, 15, 15, 15 },
          { 0, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20 },
          { 0, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20 },
          { 0, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        }, {
          { 10, 10, 10, 10, 10, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 10, 10, 10, 10, 10, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0 },
          { 10, 10, 10, 10, 10, 10, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 10, 10, 10, 10, 10, 10, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 5, 5, 5, 5, 5, 5, 10, 10, 10, 10, 10, 10, 10, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10 },
          { 10, 10, 10, 10, 10, 10, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 10, 10, 10, 10, 10, 10, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 10, 10, 10, 10, 10, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0 },
          { 10, 10, 10, 10, 10, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 10, 10, 10, 10, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 10, 10, 10, 15, 15, 15, 15, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 10, 10, 15, 15, 15, 20, 20, 20, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 10, 10, 15, 20, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }

	    
      	 }
		  },
		  //16000 Hz
		  {
		   {
		     // Filter lengths
        // Generated by HRTFConv V5.90d on Fri Mar 12 10:48:02 1999
          { 0, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20 },
          { 0, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20 },
          { 0, 10, 5, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 15, 15, 15, 15 },
          { 0, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20 },
          { 0, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20 },
          { 0, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        }, {
          { 10, 15, 10, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 10, 15, 10, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0 },
          { 10, 15, 10, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15 },
          { 10, 15, 10, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15 },
          { 5, 10, 5, 10, 10, 10, 10, 10, 10, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 10, 10, 10, 10, 10, 10, 10 },
          { 10, 15, 10, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15 },
          { 10, 15, 10, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15 },
          { 10, 15, 10, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0 },
          { 10, 15, 10, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 10, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 10, 10, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 10, 15, 15, 15, 20, 20, 20, 20, 20, 20, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 10, 15, 15, 20, 20, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }

           }
		  },
		  // 22050 Hz
		  {	
		   {
		    // Filter lengths
        // Generated by HRTFConv V5.90d on Fri Mar 12 10:51:28 1999
          { 0, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20 },
          { 0, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20 },
          { 0, 10, 5, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 15, 15, 15, 15 },
          { 0, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20 },
          { 0, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20 },
          { 0, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        }, {
          { 15, 15, 10, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 10, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 10, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15 },
          { 15, 15, 10, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15 },
          { 10, 10, 5, 10, 10, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 10, 10, 10, 10, 10, 10 },
          { 15, 15, 10, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15 },
          { 15, 15, 10, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15 },
          { 15, 15, 10, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 10, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 15, 10, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 20, 20, 20, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }

          
            }
 		  },
		  // 32000 Hz
		  {	
		   {
		   // Filter lengths
        // Generated by HRTFConv V5.90d on Fri Mar 12 10:54:50 1999
          { 0, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20 },
          { 0, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20 },
          { 0, 10, 5, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 15, 15, 15, 15 },
          { 0, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20 },
          { 0, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20 },
          { 0, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        }, {
          { 15, 15, 10, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 10, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 10, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15 },
          { 15, 15, 10, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15 },
          { 10, 10, 5, 10, 10, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 10, 10, 10, 10, 10 },
          { 15, 15, 10, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15 },
          { 15, 15, 10, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15 },
          { 15, 15, 10, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 10, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 15, 10, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 20, 20, 20, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }

          
            }
 		  },
  	      // 44100 Hz
		  {	
		   {
	     // Filter lengths
        // Generated by HRTFConv V5.90d on Fri Mar 12 10:58:17 1999
          { 0, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20 },
          { 0, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20 },
          { 0, 10, 5, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 15, 15, 15, 15 },
          { 0, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20 },
          { 0, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20 },
          { 0, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        }, {
          { 20, 20, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 20, 20, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0 },
          { 20, 20, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 20, 20, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 15, 15, 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10 },
          { 20, 20, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 20, 20, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 20, 20, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0 },
          { 20, 20, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 20, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 20, 20, 20, 20, 20, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }

       }
 		  },
     	  // 48000 Hz
		  {	
		   {
		   // Filter lengths
        // Generated by HRTFConv V5.90d on Fri Mar 12 11:00:29 1999
          { 0, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20 },
          { 0, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20 },
          { 0, 10, 5, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 15, 15, 15, 15 },
          { 0, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20 },
          { 0, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20 },
          { 0, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        }, {
          { 20, 20, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 20, 20, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0 },
          { 20, 20, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 20, 20, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 15, 15, 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10 },
          { 20, 20, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 20, 20, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 20, 20, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0 },
          { 20, 20, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 20, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 20, 20, 20, 20, 20, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }          
            }
 		  }

		},


		// 20 degrees loudspeakers
		{
	        // 8000 Hz Sample rate
			{
			  {
	        // Filter lengths
        // Generated by HRTFConv V5.90d on Wed Mar 03 18:18:24 1999
          { 0, 10, 10, 10, 10, 10, 10, 10, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 10, 10, 10, 10, 10, 10, 10, 10, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0 },
          { 0, 10, 10, 10, 10, 10, 10, 10, 10, 10, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20 },
          { 0, 10, 10, 10, 10, 10, 10, 10, 10, 10, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 10, 10, 10, 10, 15, 15, 15, 15, 15, 15, 15, 15, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 15, 15, 15, 15 },
          { 0, 10, 10, 10, 10, 10, 10, 10, 10, 10, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20 },
          { 0, 10, 10, 10, 10, 10, 10, 10, 10, 10, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20 },
          { 0, 10, 10, 10, 10, 10, 10, 10, 10, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0 },
          { 0, 10, 10, 10, 10, 10, 10, 10, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 10, 10, 10, 10, 10, 10, 15, 15, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 10, 10, 10, 10, 15, 15, 20, 20, 20, 20, 15, 15, 15, 15, 15, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 10, 10, 10, 15, 20, 20, 20, 15, 15, 15, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 10, 10, 20, 15, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        }, {
          { 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 15, 15, 10, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 15, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 15, 15, 15, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 10, 10, 10, 10, 5, 10, 10, 10, 10, 10, 10, 10, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10 },
          { 15, 15, 15, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 15, 15, 15, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 15, 15, 15, 15, 10, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 15, 10, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 10, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 15, 15, 15, 20, 20, 20, 20, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 15, 20, 20, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }

			  }
			}, 
    			// 11025 Hz sample rate
			{      
			 {
			        // Filter lengths
        // Generated by HRTFConv V5.90d on Fri Mar 12 11:11:28 1999
          { 0, 15, 15, 15, 15, 15, 15, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 10, 15, 15, 15, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 10, 15, 15, 15, 15, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20 },
          { 0, 15, 15, 15, 10, 15, 15, 15, 15, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20 },
          { 0, 10, 10, 10, 5, 10, 10, 10, 10, 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 0, 15, 15, 15, 10, 15, 15, 15, 15, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20 },
          { 0, 15, 15, 15, 10, 15, 15, 15, 15, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20 },
          { 0, 15, 15, 15, 10, 15, 15, 15, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 10, 15, 15, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 10, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 10, 20, 20, 20, 20, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        }, {
          { 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 15, 15, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 15, 15, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 15, 15, 15, 15, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 10, 10, 10, 10, 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10 },
          { 15, 15, 15, 15, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 15, 15, 15, 15, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 15, 15, 15, 15, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 15, 10, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 10, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 20, 20, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }

        	 }
			},

           // 16000 Hz sample rate

          {
		   {
		   // Filter lengths
        // Generated by HRTFConv V5.90d on Fri Mar 12 11:15:09 1999
          { 0, 10, 10, 10, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 10, 10, 10, 10, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0 },
          { 0, 10, 10, 10, 10, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20 },
          { 0, 10, 10, 10, 10, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20 },
          { 0, 5, 5, 5, 5, 10, 10, 10, 10, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 0, 10, 10, 10, 10, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20 },
          { 0, 10, 10, 10, 10, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20 },
          { 0, 10, 10, 10, 10, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0 },
          { 0, 10, 10, 10, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 10, 10, 10, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 10, 10, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 10, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 10, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        }, {
          { 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 15, 15, 10, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 15, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 15, 15, 15, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 10, 10, 10, 10, 5, 10, 10, 10, 10, 10, 10, 10, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10 },
          { 15, 15, 15, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 15, 15, 15, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 15, 15, 15, 15, 10, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 15, 10, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 10, 15, 15, 15, 15, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 15, 15, 15, 20, 20, 20, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 15, 20, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
           }
          },
			// 22050 Hz sample rate
			{      
			 {
			 	         // Filter lengths
        // Generated by HRTFConv V5.90d on Fri Mar 12 11:20:37 1999
          { 0, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 10, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 10, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20 },
          { 0, 15, 15, 15, 10, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20 },
          { 0, 10, 10, 10, 5, 10, 10, 10, 10, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 0, 15, 15, 15, 10, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20 },
          { 0, 15, 15, 15, 10, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20 },
          { 0, 15, 15, 15, 10, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 10, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 10, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        }, {
          { 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 15, 15, 10, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 15, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 15, 15, 15, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 10, 10, 10, 10, 5, 10, 10, 10, 10, 10, 10, 10, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10 },
          { 15, 15, 15, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 15, 15, 15, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 15, 15, 15, 15, 10, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 15, 10, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 10, 15, 15, 15, 15, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 15, 15, 15, 20, 20, 20, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 15, 20, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
		   	 }
			},

            {
			 {
		      // Filter lengths
        // Generated by HRTFConv V5.90d on Fri Mar 12 11:23:29 1999
          { 0, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 10, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 10, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20 },
          { 0, 15, 15, 15, 10, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20 },
          { 0, 10, 10, 10, 5, 10, 10, 10, 10, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 0, 15, 15, 15, 10, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20 },
          { 0, 15, 15, 15, 10, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20 },
          { 0, 15, 15, 15, 10, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 10, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 10, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        }, {
          { 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 15, 15, 10, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 15, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 15, 15, 15, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 10, 10, 10, 10, 5, 10, 10, 10, 10, 10, 10, 10, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10 },
          { 15, 15, 15, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 15, 15, 15, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 15, 15, 15, 15, 10, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 15, 10, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 10, 15, 15, 15, 15, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 15, 15, 15, 20, 20, 20, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 15, 20, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
  
			 }
			},
			// 44100 Hz sample rate
			{        
			 {
		           // Filter lengths
        // Generated by HRTFConv V5.90d on Fri Mar 12 11:26:10 1999
          { 0, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 10, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 10, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20 },
          { 0, 15, 15, 15, 10, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20 },
          { 0, 10, 10, 10, 5, 10, 10, 10, 10, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 0, 15, 15, 15, 10, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20 },
          { 0, 15, 15, 15, 10, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20 },
          { 0, 15, 15, 15, 10, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 10, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 10, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        }, {
          { 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 15, 15, 10, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 15, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 15, 15, 15, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 10, 10, 10, 10, 5, 10, 10, 10, 10, 10, 10, 10, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10 },
          { 15, 15, 15, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 15, 15, 15, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 15, 15, 15, 15, 10, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 15, 10, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 10, 15, 15, 15, 15, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 15, 15, 15, 20, 20, 20, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 15, 20, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
		     }
			},
			// 48000 Hz sample rate
			{        
			 {
		// Filter lengths
        // Generated by HRTFConv V5.90d on Fri Mar 12 11:28:42 1999
          { 0, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 10, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 10, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20 },
          { 0, 15, 15, 15, 10, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20 },
          { 0, 10, 10, 10, 5, 10, 10, 10, 10, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 0, 15, 15, 15, 10, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20 },
          { 0, 15, 15, 15, 10, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20 },
          { 0, 15, 15, 15, 10, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 10, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 10, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        }, {
          { 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 15, 15, 10, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 15, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 15, 15, 15, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 10, 10, 10, 10, 5, 10, 10, 10, 10, 10, 10, 10, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10 },
          { 15, 15, 15, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 15, 15, 15, 15, 10, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 15, 15, 15, 15, 10, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 15, 10, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 10, 15, 15, 15, 15, 20, 20, 20, 20, 20, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 15, 15, 15, 20, 20, 20, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 15, 15, 15, 20, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
 		   	 }
			}
		},
		// Headphones
		{
		    // 8000 Hz sample rate
			{
   			 {
   			          // Filter lengths
        // Generated by HRTFConv V5.90d on Wed Feb 10 10:36:27 1999
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20 },
          { 0, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 15, 15, 15, 15, 15 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        }, {
          { 5, 10, 10, 10, 10, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 10, 10, 10, 10, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0 },
          { 5, 10, 10, 10, 10, 10, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 5, 10, 10, 10, 10, 10, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 5, 5, 5, 5, 5, 5, 5, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10 },
          { 5, 10, 10, 10, 10, 10, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 5, 10, 10, 10, 10, 10, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 5, 10, 10, 10, 10, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0 },
          { 5, 10, 10, 10, 10, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 10, 10, 10, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 10, 10, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 10, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 10, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
   			 }
			},	
			// 11025 Hz sample rate
			{
   			 {
   			 // Filter lengths
        // Generated by HRTFConv V5.90d on Fri Mar 12 11:38:51 1999
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20 },
          { 0, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 15, 15, 15, 15, 15 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        }, {
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0 },
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 5, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10 },
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0 },
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }

   			 }
			},
		    // 16000 Hz sample rate
			{
   			 {
   		    // Filter lengths
        // Generated by HRTFConv V5.90d on Fri Mar 12 11:40:57 1999
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20 },
          { 0, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 15, 15, 15, 15, 15 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        }, {
          { 5, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0 },
          { 5, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 5, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 5, 5, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10 },
          { 5, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 5, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 5, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0 },
          { 5, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 10, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }

   			 }
			},	
			// 22050 Hz sample rate
			{
   			 {
   			         // Filter lengths
        // Generated by HRTFConv V5.90d on Fri Mar 12 11:42:29 1999
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20 },
          { 0, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 15, 15, 15, 15, 15 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        }, {
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0 },
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 5, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10 },
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0 },
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
   			 }
			},
            // 32000 Hz sample rate
			{
   			 {
   			      // Filter lengths
        // Generated by HRTFConv V5.90d on Fri Mar 12 11:44:06 1999
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20 },
          { 0, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 15, 15, 15, 15, 15 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        }, {
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0 },
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 5, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10 },
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0 },
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }

   			 }
			},	
			// 44100 Hz sample rate
			{
   			 {
   		           // Filter lengths
        // Generated by HRTFConv V5.90d on Fri Mar 12 11:46:25 1999
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20 },
          { 0, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 15, 15, 15, 15, 15 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        }, {
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0 },
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 5, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10 },
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0 },
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }

   			 }
			},
			// 48000 Hz sample rate
			{
   			 {
			 // Filter lengths
        // Generated by HRTFConv V5.90d on Fri Mar 12 11:48:33 1999
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20 },
          { 0, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 15, 15, 15, 15, 15 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 20 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        }, {
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0 },
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 5, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10 },
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15 },
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0 },
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 15, 15, 15, 15, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }

   			 }
			}
		}
	},
	// Lite coefficients
	{
        // 10 degrees loudspeakers

		{

           // 8000 Hz sample rate
			{
   			{
   		     { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        }, {
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
			   			}
			},
			
			// 11025 Hz sample rate
			{
   			{
   		     { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        }, {
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
			   			}
			},

             // 16000 Hz sample rate
			{
   			{
   		     { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        }, {
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
			   			}
			},
			
			// 22050 Hz sample rate
			{
   			{
   		     { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        }, {
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
			   			}
			},


	    	// 32000 Hz sample rate
			{
   			{
   		     { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        }, {
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
			   			}
			},
	
			// 44100 Hz sample rate
			{
   			{
   		     { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        }, {
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
			   			}
			},
			// 48000 Hz sample rate
			{
   			{
		    { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        }, {
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
			
   			}
			}
		},


		// 20 degrees loudspeakers
		{
			// 8000 Hz sample rate
			{
        // Generated by HRTFConv V5.90d on Mon Feb 08 11:07:39 1999
				{
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        }, {
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
				}
			},

			// 11025 Hz sample rate
			{
  
				{
           // Generated by HRTFConv V5.90d on Wed Mar 03 18:25:02 1999
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        }, {
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
		}
			},

    	// 16000 Hz sample rate
			{
        // Generated by HRTFConv V5.90d on Mon Feb 08 11:07:39 1999
				{
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        }, {
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
				}
			},

			// 22050 Hz sample rate
			{
            // Generated by HRTFConv V5.90d on Wed Mar 03 18:32:45 1999
 				{
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        }, {
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
		}
			},

		 	// 32000 Hz sample rate
		{
        // Generated by HRTFConv V5.90d on Mon Feb 08 11:07:39 1999
			{
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        }, {
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
		}
			},
			// 44100 Hz sample rate
			{
        
				{
          // Generated by HRTFConv V5.90d on Wed Mar 03 18:42:26 1999
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        }, {
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
		}
			},
			// 48000 Hz sample rate
			{
       
				{
        // Generated by HRTFConv V5.90d on Wed Mar 03 18:45:39 1999
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        }, {
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
		}
			}
		},
		// Headphones
		{
		 // 8000 Hz sample rate
			{
        // Generated by HRTFConv V5.90d on Mon Feb 08 11:07:39 1999
				{
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        }, {
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
				}
			},


			// 11025 Hz sample rate
			{
        // Generated by HRTFConv V5.90d on Mon Feb 08 11:07:39 1999
				{
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        }, {
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
				}
			},

	       //16000 Hz sample rate
		 	{
        // Generated by HRTFConv V5.90d on Mon Feb 08 11:11:49 1999
				{
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        }, {
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
				}
			},      
		 // 22050 Hz sample rate
			{
        // Generated by HRTFConv V5.90d on Mon Feb 08 11:11:49 1999
				{
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        }, {
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
				}
			},

	   // 32000 Hz sample rate
			{
        // Generated by HRTFConv V5.90d on Mon Feb 08 11:13:18 1999
				{
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        }, {
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
				}
			},
				// 44100 Hz sample rate
			{
        // Generated by HRTFConv V5.90d on Mon Feb 08 11:13:18 1999
				{
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        }, {
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
				}
			},
			// 48000 Hz sample rate
			{
        // Generated by HRTFConv V5.90d on Mon Feb 08 11:13:30 1999
				{
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 0, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
        }, {
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
          { 5, 5, 5, 5, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }
				}
			}
		}
	}
};

// Filter coefficient change overlap buffer length
const size_t CaastFilterOverlapLength[KSDS3D_FILTER_QUALITY_COUNT][esamplerateCount] = {
	// Full coefficients
	{
        // 8000  Hz
     	20,

		// 11025 kHz
		25,
        
        // 16000 Hz
		37,

		// 22050 kHz
		50,

		// 32000 KHz
		75,

		// 44100 kHz
		100,

		// 48000 kHz
		109
	},
	// Lite coefficients
	{

        // 8000 Hz
		12,

		// 11025 kHz
		13,

        // 16000 Hz
		19,
        
		// 22050 kHz
		25,

        // 32000  Hz
		37,

		// 44100 kHz
		50,

		// 48000 kHz
		55
	}
};

// Filter coefficient change mute buffer length
const size_t CaastFilterMuteLength[KSDS3D_FILTER_QUALITY_COUNT][esamplerateCount] = {
	// Full coefficients
	{

        // 8000 Hz
	    12,
     
		// 11025 kHz
		13,

        // 16000 Hz
		19,

		// 22050 kHz
		25,

        // 32000 Hz
		37,

		// 44100 kHz
		50,

		// 48000 kHz
		55
	},
	// Lite coefficients
	{
		// 8000 Hz
		6,

		// 11025 kHz
		7,

        // 16000 Hz
		10,

		// 22050 kHz
		13,

        // 32000 Hz
        19,

		// 44100 kHz
		25,

		// 48000 kHz
		27
	}
};

// Zero azimuth transition (left/right hemisphere transition) cross-fade buffer length
const size_t CastOutputOverlapLength[esamplerateCount] = {
	// 8000 Hz
    20,

	// 11025 kHz
	25,

    // 16000 Hz
    37,
   
	// 22050 kHz
	50,

    // 32000 Hz
	75,

	// 44100 kHz
	100,

	// 48000 kHz
	110
};

// Number of azimuth bins
const UINT CauiNumAzimuthBins[CuiNumElevationBins] = {
  // Generated by HRTFConv V5.90a on Tue Jan 05 14:24:04 1999
  28,
  30,
  36,
  36,
  36,
  36,
  36,
  30,
  28,
  23,
  18,
  12,
  6
};
// Number of elevation bins: 13
// Maximum number of azimuth bins: 36
// Minimum elevation: -40
// Maximum elevation: 80
// Minimum azimuth: 0
// Maximum azimuth: 180

// ---------------------------------------------------------------------------
// Global helper functions

// Convert number of biquad coefficients to corresponding number of canonical coefficients
UINT NumBiquadCoeffsToNumCanonicalCoeffs(const UINT CuiNumBiquadCoeffs)
{
	if (CuiNumBiquadCoeffs == 0)
		return 0;
	else
		return NumBiquadsToNumCanonicalCoeffs(NumBiquadCoeffsToNumBiquads(CuiNumBiquadCoeffs));
}

// ---------------------------------------------------------------------------
// Include inline definitions out-of-line in debug version

#if defined(DEBUG)
#include "vmaxcoef.inl"
#endif

// End of VMAXCOEF.CPP
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\directx\dsound\dsound\daytona\makefile.inc ===
!include ..\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\directx\dsound\dsound\dsmgr\resource.h ===
//{{NO_DEPENDENCIES}}
// Microsoft Developer Studio generated include file.
// Used by DsMgr.rc
//
#define IDD_DSMGR                       101
#define IDI_DSMGR                       102
#define IDI_PLAYBACK                    103
#define IDI_RECORD                      104
#define IDC_DEVICELIST                  1005
#define IDC_MIXER_SRCQUALITY            1006
#define IDC_ACCELERATION_HARDWAREBUFFERS 1007
#define IDC_ACCELERATION_HARDWARE3D     1008
#define IDC_ACCELERATION_RING0MIX       1009
#define IDC_ACCELERATION_HARDWAREPROPERTYSETS 1010
#define IDC_DEVICEPRESENCE              1011
#define IDC_MIXER_DEFAULT3DALGORITHM    1012
#define IDC_DEBUG_PRINTFUNCTIONNAME     1014
#define IDC_DEBUG_PRINTPROCESSTHREADID  1015
#define IDC_DEBUG_PRINTFILELINE         1016
#define IDC_DEBUG_DPFLEVEL              1018
#define IDC_DEBUG_BREAKLEVEL            1019
#define IDC_DEBUG_LOGFILE               1020
#define IDC_DEBUG_LOGFILE_BROWSE        1021
#define IDC_DEBUG_DPFLEVEL_SPIN         1023
#define IDC_DEBUG_BREAKLEVEL_SPIN       1024
#define IDC_APPLY                       1028
#define IDC_RESETDEVICE                 1029
#define IDC_RESETALL                    1030

// Next default values for new objects
// 
#ifdef APSTUDIO_INVOKED
#ifndef APSTUDIO_READONLY_SYMBOLS
#define _APS_NO_MFC                     1
#define _APS_NEXT_RESOURCE_VALUE        102
#define _APS_NEXT_COMMAND_VALUE         40001
#define _APS_NEXT_CONTROL_VALUE         1031
#define _APS_NEXT_SYMED_VALUE           101
#endif
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\directx\dsound\dsound\dsmgr\dsprvobj.cpp ===
/***************************************************************************
 *
 *  Copyright (C) 1995,1996 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       dsprvobj.c
 *  Content:    DirectSound Private Object wrapper functions.
 *  History:
 *   Date       By      Reason
 *   ====       ==      ======
 *  02/12/98    dereks  Created.
 *
 ***************************************************************************/

// We'll ask for what we need, thank you.
#ifndef WIN32_LEAN_AND_MEAN
#define WIN32_LEAN_AND_MEAN
#endif // WIN32_LEAN_AND_MEAN

// Public includes
#include <windows.h>
#include <mmsystem.h>
#include <dsoundp.h>
#include <dsprv.h>

// Private includes
#include "dsprvobj.h"


/***************************************************************************
 *
 *  DirectSoundPrivateCreate
 *
 *  Description:
 *      Creates and initializes a DirectSoundPrivate object.
 *
 *  Arguments:
 *      LPKSPROPERTYSET * [out]: receives IKsPropertySet interface to the
 *                               object.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

HRESULT DirectSoundPrivateCreate
(
    LPKSPROPERTYSET *       ppKsPropertySet
)
{
    typedef HRESULT (STDAPICALLTYPE *LPFNDLLGETCLASSOBJECT)(REFCLSID, REFIID, LPVOID *);

    HINSTANCE               hLibDsound              = NULL;
    LPFNGETCLASSOBJECT      pfnDllGetClassObject    = NULL;
    LPCLASSFACTORY          pClassFactory           = NULL;
    LPKSPROPERTYSET         pKsPropertySet          = NULL;
    HRESULT                 hr                      = DS_OK;

    // Get dsound.dll's instance handle.  The dll must already be loaded at this
    // point.
    hLibDsound = 
        GetModuleHandle
        (
            TEXT("dsound.dll")
        );

    if(!hLibDsound)
    {
        hr = DSERR_GENERIC;
    }

    // Find DllGetClassObject
    if(SUCCEEDED(hr))
    {
        pfnDllGetClassObject = (LPFNDLLGETCLASSOBJECT)
            GetProcAddress
            (
                hLibDsound, 
                "DllGetClassObject"
            );

        if(!pfnDllGetClassObject)
        {
            hr = DSERR_GENERIC;
        }
    }

    // Create a class factory object    
    if(SUCCEEDED(hr))
    {
        hr = 
            pfnDllGetClassObject
            (
                CLSID_DirectSoundPrivate, 
                IID_IClassFactory, 
                (LPVOID *)&pClassFactory
            );
    }

    // Create the DirectSoundPrivate object and query for an IKsPropertySet
    // interface
    if(SUCCEEDED(hr))
    {
        hr = 
            pClassFactory->CreateInstance
            (
                NULL, 
                IID_IKsPropertySet, 
                (LPVOID *)&pKsPropertySet
            );
    }

    // Release the class factory
    if(pClassFactory)
    {
        pClassFactory->Release();
    }

    // Success
    if(SUCCEEDED(hr))
    {
        *ppKsPropertySet = pKsPropertySet;
    }

    return hr;
}


/***************************************************************************
 *
 *  PrvGetMixerSrcQuality
 *
 *  Description:
 *      Gets the mixer SRC quality for a given DirectSound device.
 *
 *  Arguments:
 *      LPKSPROPERTYSET [in]: IKsPropertySet interface to the
 *                            DirectSoundPrivate object.
 *      REFGUID [in]: DirectSound device GUID.
 *      DIRECTSOUNDMIXER_SRCQUALITY * [out]: receives mixer SRC quality.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

HRESULT PrvGetMixerSrcQuality
(
    LPKSPROPERTYSET                             pKsPropertySet,
    REFGUID                                     guidDeviceId,
    DIRECTSOUNDMIXER_SRCQUALITY *               pSrcQuality
)
{
    DSPROPERTY_DIRECTSOUNDMIXER_SRCQUALITY_DATA Data;
    HRESULT                                     hr;

    Data.DeviceId = guidDeviceId;

    hr =
        pKsPropertySet->Get
        (
            DSPROPSETID_DirectSoundMixer,
            DSPROPERTY_DIRECTSOUNDMIXER_SRCQUALITY,
            NULL,
            0,
            &Data,
            sizeof(Data),
            NULL
        );

    if(SUCCEEDED(hr))
    {
        *pSrcQuality = Data.Quality;
    }

    return hr;
}


/***************************************************************************
 *
 *  PrvSetMixerSrcQuality
 *
 *  Description:
 *      Sets the mixer SRC quality for a given DirectSound device.
 *
 *  Arguments:
 *      LPKSPROPERTYSET [in]: IKsPropertySet interface to the
 *                            DirectSoundPrivate object.
 *      REFGUID [in]: DirectSound device GUID.
 *      DIRECTSOUNDMIXER_SRCQUALITY [in]: mixer SRC quality.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

HRESULT PrvSetMixerSrcQuality
(
    LPKSPROPERTYSET                             pKsPropertySet,
    REFGUID                                     guidDeviceId,
    DIRECTSOUNDMIXER_SRCQUALITY                 SrcQuality
)
{
    DSPROPERTY_DIRECTSOUNDMIXER_SRCQUALITY_DATA Data;
    HRESULT                                     hr;

    Data.DeviceId = guidDeviceId;
    Data.Quality = SrcQuality;

    hr =
        pKsPropertySet->Set
        (
            DSPROPSETID_DirectSoundMixer,
            DSPROPERTY_DIRECTSOUNDMIXER_SRCQUALITY,
            NULL,
            0,
            &Data,
            sizeof(Data)
        );

    return hr;
}


/***************************************************************************
 *
 *  PrvGetMixerAcceleration
 *
 *  Description:
 *      Gets the mixer acceleration flags for a given DirectSound device.
 *
 *  Arguments:
 *      LPKSPROPERTYSET [in]: IKsPropertySet interface to the
 *                            DirectSoundPrivate object.
 *      REFGUID [in]: DirectSound device GUID.
 *      LPDWORD [out]: receives acceleration flags.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

HRESULT PrvGetMixerAcceleration
(
    LPKSPROPERTYSET                                 pKsPropertySet,
    REFGUID                                         guidDeviceId,
    LPDWORD                                         pdwAcceleration
)
{
    DSPROPERTY_DIRECTSOUNDMIXER_ACCELERATION_DATA   Data;
    HRESULT                                         hr;

    Data.DeviceId = guidDeviceId;

    hr =
        pKsPropertySet->Get
        (
            DSPROPSETID_DirectSoundMixer,
            DSPROPERTY_DIRECTSOUNDMIXER_ACCELERATION,
            NULL,
            0,
            &Data,
            sizeof(Data),
            NULL
        );

    if(SUCCEEDED(hr))
    {
        *pdwAcceleration = Data.Flags;
    }

    return hr;
}


/***************************************************************************
 *
 *  PrvSetMixerAcceleration
 *
 *  Description:
 *      Sets the mixer acceleration flags for a given DirectSound device.
 *
 *  Arguments:
 *      LPKSPROPERTYSET [in]: IKsPropertySet interface to the
 *                            DirectSoundPrivate object.
 *      REFGUID [in]: DirectSound device GUID.
 *      DWORD [in]: acceleration flags.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

HRESULT PrvSetMixerAcceleration
(
    LPKSPROPERTYSET                                 pKsPropertySet,
    REFGUID                                         guidDeviceId,
    DWORD                                           dwAcceleration
)
{
    DSPROPERTY_DIRECTSOUNDMIXER_ACCELERATION_DATA   Data;
    HRESULT                                         hr;

    Data.DeviceId = guidDeviceId;
    Data.Flags = dwAcceleration;

    hr =
        pKsPropertySet->Set
        (
            DSPROPSETID_DirectSoundMixer,
            DSPROPERTY_DIRECTSOUNDMIXER_ACCELERATION,
            NULL,
            0,
            &Data,
            sizeof(Data)
        );

    return hr;
}


/***************************************************************************
 *
 *  PrvGetDevicePresence
 *
 *  Description:
 *      Determines whether a device is enabled.
 *
 *  Arguments:
 *      LPKSPROPERTYSET [in]: IKsPropertySet interface to the
 *                            DirectSoundPrivate object.
 *      REFGUID [in]: DirectSound device GUID.
 *      LPBOOL [out]: receives TRUE if the device is enabled.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

HRESULT PrvGetDevicePresence
(
    LPKSPROPERTYSET                             pKsPropertySet,
    REFGUID                                     guidDeviceId,
    LPBOOL                                      pfEnabled
)
{
    DSPROPERTY_DIRECTSOUNDDEVICE_PRESENCE_DATA  Data;
    HRESULT                                     hr;

    Data.DeviceId = guidDeviceId;

    hr =
        pKsPropertySet->Get
        (
            DSPROPSETID_DirectSoundDevice,
            DSPROPERTY_DIRECTSOUNDDEVICE_PRESENCE,
            NULL,
            0,
            &Data,
            sizeof(Data),
            NULL
        );

    if(SUCCEEDED(hr))
    {
        *pfEnabled = Data.Present;
    }

    return hr;
}


/***************************************************************************
 *
 *  PrvSetDevicePresence
 *
 *  Description:
 *      Sets whether a device is enabled.
 *
 *  Arguments:
 *      LPKSPROPERTYSET [in]: IKsPropertySet interface to the
 *                            DirectSoundPrivate object.
 *      REFGUID [in]: DirectSound device GUID.
 *      BOOL [in]: TRUE if the device is enabled.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

HRESULT PrvSetDevicePresence
(
    LPKSPROPERTYSET                             pKsPropertySet,
    REFGUID                                     guidDeviceId,
    BOOL                                        fEnabled
)
{
    DSPROPERTY_DIRECTSOUNDDEVICE_PRESENCE_DATA  Data;
    HRESULT                                     hr;

    Data.DeviceId = guidDeviceId;
    Data.Present = fEnabled;

    hr =
        pKsPropertySet->Set
        (
            DSPROPSETID_DirectSoundDevice,
            DSPROPERTY_DIRECTSOUNDDEVICE_PRESENCE,
            NULL,
            0,
            &Data,
            sizeof(Data)
        );

    return hr;
}


/***************************************************************************
 *
 *  PrvGetWaveDeviceMapping
 *
 *  Description:
 *      Gets the DirectSound device id (if any) for a given waveIn or
 *      waveOut device description.  This is the description given by
 *      waveIn/OutGetDevCaps (szPname).
 *
 *  Arguments:
 *      LPKSPROPERTYSET [in]: IKsPropertySet interface to the
 *                            DirectSoundPrivate object.
 *      LPCSTR [in]: wave device description.
 *      BOOL [in]: TRUE if the device description refers to a waveIn device.
 *      LPGUID [out]: receives DirectSound device GUID.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

HRESULT PrvGetWaveDeviceMapping
(
    LPKSPROPERTYSET                                     pKsPropertySet,
    LPCTSTR                                             pszWaveDevice,
    BOOL                                                fCapture,
    LPGUID                                              pguidDeviceId
)
{
    DSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_DATA Data;
    HRESULT                                             hr;

    Data.DeviceName = (LPTSTR)pszWaveDevice;
    Data.DataFlow = fCapture ? DIRECTSOUNDDEVICE_DATAFLOW_CAPTURE : DIRECTSOUNDDEVICE_DATAFLOW_RENDER;

    hr =
        pKsPropertySet->Get
        (
            DSPROPSETID_DirectSoundDevice,
            DSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING,
            NULL,
            0,
            &Data,
            sizeof(Data),
            NULL
        );

    if(SUCCEEDED(hr))
    {
        *pguidDeviceId = Data.DeviceId;
    }

    return hr;
}


/***************************************************************************
 *
 *  PrvGetDeviceDescription
 *
 *  Description:
 *      Gets the extended description for a given DirectSound device.
 *
 *  Arguments:
 *      LPKSPROPERTYSET [in]: IKsPropertySet interface to the
 *                            DirectSoundPrivate object.
 *      REFGUID [in]: DirectSound device id.
 *      PDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_DATA [out]: receives
 *                                                            description.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

HRESULT PrvGetDeviceDescription
(
    LPKSPROPERTYSET                                 pKsPropertySet,
    REFGUID                                         guidDeviceId,
    PDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_DATA *ppData
)
{
    PDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_DATA  pData   = NULL;
    ULONG                                           cbData;
    DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_DATA   Basic;
    HRESULT                                         hr;

    Basic.DeviceId = guidDeviceId;

    hr =
        pKsPropertySet->Get
        (
            DSPROPSETID_DirectSoundDevice,
            DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION,
            NULL,
            0,
            &Basic,
            sizeof(Basic),
            &cbData
        );

    if(SUCCEEDED(hr))
    {
        pData = (PDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_DATA)new BYTE [cbData];

        if(!pData)
        {
            hr = DSERR_OUTOFMEMORY;
        }
    }

    if(SUCCEEDED(hr))
    {
        pData->DeviceId = guidDeviceId;
        
        hr =
            pKsPropertySet->Get
            (
                DSPROPSETID_DirectSoundDevice,
                DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION,
                NULL,
                0,
                pData,
                cbData,
                NULL
            );
    }

    if(SUCCEEDED(hr))
    {
        *ppData = pData;
    }
    else if(pData)
    {
        delete pData;
    }

    return hr;
}


/***************************************************************************
 *
 *  PrvEnumerateDevices
 *
 *  Description:
 *      Enumerates all DirectSound devices.
 *
 *  Arguments:
 *      LPKSPROPERTYSET [in]: IKsPropertySet interface to the
 *                            DirectSoundPrivate object.
 *      LPFNDIRECTSOUNDDEVICEENUMERATECALLBACK [in]: pointer to the callback
 *                                                   function.
 *      LPVOID [in]: context argument to pass to the callback function.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

HRESULT PrvEnumerateDevices
(
    LPKSPROPERTYSET                             pKsPropertySet,
    LPFNDIRECTSOUNDDEVICEENUMERATECALLBACK      pfnCallback,
    LPVOID                                      pvContext
)
{
    DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_DATA Data;
    HRESULT                                     hr;

    Data.Callback = pfnCallback;
    Data.Context = pvContext;

    hr =
        pKsPropertySet->Get
        (
            DSPROPSETID_DirectSoundDevice,
            DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE,
            NULL,
            0,
            &Data,
            sizeof(Data),
            NULL
        );

    return hr;
}


/***************************************************************************
 *
 *  PrvGetBasicAcceleration
 *
 *  Description:
 *      Gets basic acceleration flags for a given DirectSound device.  This
 *      is the accleration level that the multimedia control panel uses.
 *
 *  Arguments:
 *      LPKSPROPERTYSET [in]: IKsPropertySet interface to the
 *                            DirectSoundPrivate object.
 *      REFGUID [in]: DirectSound device GUID.
 *      DIRECTSOUNDBASICACCELERATION_LEVEL * [out]: receives basic 
 *                                                  acceleration level.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

HRESULT PrvGetBasicAcceleration
(
    LPKSPROPERTYSET                                             pKsPropertySet,
    REFGUID                                                     guidDeviceId,
    DIRECTSOUNDBASICACCELERATION_LEVEL *                        pLevel
)
{
    DSPROPERTY_DIRECTSOUNDBASICACCELERATION_ACCELERATION_DATA   Data;
    HRESULT                                                     hr;

    Data.DeviceId = guidDeviceId;

    hr =
        pKsPropertySet->Get
        (
            DSPROPSETID_DirectSoundBasicAcceleration,
            DSPROPERTY_DIRECTSOUNDBASICACCELERATION_ACCELERATION,
            NULL,
            0,
            &Data,
            sizeof(Data),
            NULL
        );

    if(SUCCEEDED(hr))
    {
        *pLevel = Data.Level;
    }

    return hr;
}


/***************************************************************************
 *
 *  PrvSetBasicAcceleration
 *
 *  Description:
 *      Sets basic acceleration flags for a given DirectSound device.  This
 *      is the accleration level that the multimedia control panel uses.
 *
 *  Arguments:
 *      LPKSPROPERTYSET [in]: IKsPropertySet interface to the
 *                            DirectSoundPrivate object.
 *      REFGUID [in]: DirectSound device GUID.
 *      DIRECTSOUNDBASICACCELERATION_LEVEL [in]: basic acceleration level.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

HRESULT PrvSetBasicAcceleration
(
    LPKSPROPERTYSET                                             pKsPropertySet,
    REFGUID                                                     guidDeviceId,
    DIRECTSOUNDBASICACCELERATION_LEVEL                          Level
)
{
    DSPROPERTY_DIRECTSOUNDBASICACCELERATION_ACCELERATION_DATA   Data;
    HRESULT                                                     hr;

    Data.DeviceId = guidDeviceId;
    Data.Level = Level;

    hr =
        pKsPropertySet->Set
        (
            DSPROPSETID_DirectSoundBasicAcceleration,
            DSPROPERTY_DIRECTSOUNDBASICACCELERATION_ACCELERATION,
            NULL,
            0,
            &Data,
            sizeof(Data)
        );

    return hr;
}


/***************************************************************************
 *
 *  PrvGetDebugInformation
 *
 *  Description:
 *      Gets the current DirectSound debug settings.
 *
 *  Arguments:
 *      LPKSPROPERTYSET [in]: IKsPropertySet interface to the
 *                            DirectSoundPrivate object.
 *      LPDWORD [in]: receives DPF flags.
 *      PULONG [out]: receives DPF level.
 *      PULONG [out]: receives break level.
 *      LPSTR [out]: receives log file name.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

HRESULT PrvGetDebugInformation
(
    LPKSPROPERTYSET                             pKsPropertySet,
    LPDWORD                                     pdwFlags,
    PULONG                                      pulDpfLevel,
    PULONG                                      pulBreakLevel,
    LPTSTR                                      pszLogFile
)
{
    DSPROPERTY_DIRECTSOUNDDEBUG_DPFINFO_DATA    Data;
    HRESULT                                     hr;

    hr =
        pKsPropertySet->Get
        (
            DSPROPSETID_DirectSoundDebug,
            DSPROPERTY_DIRECTSOUNDDEBUG_DPFINFO,
            NULL,
            0,
            &Data,
            sizeof(Data),
            NULL
        );

    if(SUCCEEDED(hr) && pdwFlags)
    {
        *pdwFlags = Data.Flags;
    }

    if(SUCCEEDED(hr) && pulDpfLevel)
    {
        *pulDpfLevel = Data.DpfLevel;
    }

    if(SUCCEEDED(hr) && pulBreakLevel)
    {
        *pulBreakLevel = Data.BreakLevel;
    }

    if(SUCCEEDED(hr) && pszLogFile)
    {
        lstrcpy
        (
            pszLogFile,
            Data.LogFile
        );
    }
    
    return hr;
}


/***************************************************************************
 *
 *  PrvSetDebugInformation
 *
 *  Description:
 *      Sets the current DirectSound debug settings.
 *
 *  Arguments:
 *      LPKSPROPERTYSET [in]: IKsPropertySet interface to the
 *                            DirectSoundPrivate object.
 *      DWORD [in]: DPF flags.
 *      ULONG [in]: DPF level.
 *      ULONG [in]: break level.
 *      LPCSTR [in]: log file name.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

HRESULT PrvSetDebugInformation
(
    LPKSPROPERTYSET                             pKsPropertySet,
    DWORD                                       dwFlags,
    ULONG                                       ulDpfLevel,
    ULONG                                       ulBreakLevel,
    LPCTSTR                                     pszLogFile
)
{
    DSPROPERTY_DIRECTSOUNDDEBUG_DPFINFO_DATA    Data;
    HRESULT                                     hr;

    Data.Flags = dwFlags;
    Data.DpfLevel = ulDpfLevel;
    Data.BreakLevel = ulBreakLevel;

    lstrcpy
    (
        Data.LogFile,
        pszLogFile
    );
    
    hr =
        pKsPropertySet->Set
        (
            DSPROPSETID_DirectSoundDebug,
            DSPROPERTY_DIRECTSOUNDDEBUG_DPFINFO,
            NULL,
            0,
            &Data,
            sizeof(Data)
        );

    return hr;
}


/***************************************************************************
 *
 *  PrvGetPersistentData
 *
 *  Description:
 *      Gets a registry value stored under the DirectSound subkey of a 
 *      specific hardware device.
 *
 *  Arguments:
 *      LPKSPROPERTYSET [in]: IKsPropertySet interface to the
 *                            DirectSoundPrivate object.
 *      REFGUID [in]: DirectSound device id.
 *      LPCSTR [in]: subkey path.
 *      LPCSTR [in]: value name.
 *      LPDWORD [in/out]: receives registry data type.
 *      LPVOID [out]: data buffer.
 *      LPDWORD [in/out]: size of above buffer.  On entry, this argument is
 *                        filled with the maximum size of the data buffer.
 *                        On exit, this argument is filled with the required
 *                        size.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

HRESULT PrvGetPersistentData
(
    LPKSPROPERTYSET                                         pKsPropertySet,
    REFGUID                                                 guidDeviceId,
    LPCTSTR                                                 pszSubkey,
    LPCTSTR                                                 pszValue,
    LPDWORD                                                 pdwRegType,
    LPVOID                                                  pvData,
    LPDWORD                                                 pcbData
)
{
    PDSPROPERTY_DIRECTSOUNDPERSISTENTDATA_PERSISTDATA_DATA  pPersist;
    ULONG                                                   cbPersist;
    HRESULT                                                 hr;

    cbPersist = sizeof(*pPersist) + *pcbData;
    
    pPersist = (PDSPROPERTY_DIRECTSOUNDPERSISTENTDATA_PERSISTDATA_DATA)
        LocalAlloc
        (
            LPTR,
            cbPersist
        );

    if(pPersist)
    {
        pPersist->DeviceId = guidDeviceId;
        pPersist->SubKeyName = (LPTSTR)pszSubkey;
        pPersist->ValueName = (LPTSTR)pszValue;

        if(pdwRegType)
        {
            pPersist->RegistryDataType = *pdwRegType;
        }

        hr =
            pKsPropertySet->Get
            (
                DSPROPSETID_DirectSoundPersistentData,
                DSPROPERTY_DIRECTSOUNDPERSISTENTDATA_PERSISTDATA,
                NULL,
                0,
                pPersist,
                cbPersist,
                &cbPersist
            );
    }
    else
    {
        hr = DSERR_OUTOFMEMORY;
    }

    if(SUCCEEDED(hr))
    {
        CopyMemory
        (
            pvData,
            pPersist + 1,
            *pcbData
        );
    }
    
    *pcbData = cbPersist - sizeof(*pPersist);

    if(pPersist && pdwRegType)
    {
        *pdwRegType = pPersist->RegistryDataType;
    }

    if(pPersist)
    {
        LocalFree(pPersist);
    }

    return hr;
}


/***************************************************************************
 *
 *  PrvSetPersistentData
 *
 *  Description:
 *      Sets a registry value stored under the DirectSound subkey of a 
 *      specific hardware device.
 *
 *  Arguments:
 *      LPKSPROPERTYSET [in]: IKsPropertySet interface to the
 *                            DirectSoundPrivate object.
 *      REFGUID [in]: DirectSound device id.
 *      LPCSTR [in]: subkey path.
 *      LPCSTR [in]: value name.
 *      DWORD [in]: registry data type.
 *      LPVOID [out]: data buffer.
 *      DWORD [in]: size of above buffer.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

HRESULT PrvSetPersistentData
(
    LPKSPROPERTYSET                                         pKsPropertySet,
    REFGUID                                                 guidDeviceId,
    LPCTSTR                                                 pszSubkey,
    LPCTSTR                                                 pszValue,
    DWORD                                                   dwRegType,
    LPVOID                                                  pvData,
    DWORD                                                   cbData
)
{
    PDSPROPERTY_DIRECTSOUNDPERSISTENTDATA_PERSISTDATA_DATA  pPersist;
    ULONG                                                   cbPersist;
    HRESULT                                                 hr;

    cbPersist = sizeof(*pPersist) + cbData;
    
    pPersist = (PDSPROPERTY_DIRECTSOUNDPERSISTENTDATA_PERSISTDATA_DATA)
        LocalAlloc
        (
            LPTR,
            cbPersist
        );

    if(pPersist)
    {
        pPersist->DeviceId = guidDeviceId;
        pPersist->SubKeyName = (LPTSTR)pszSubkey;
        pPersist->ValueName = (LPTSTR)pszValue;
        pPersist->RegistryDataType = dwRegType;

        CopyMemory
        (
            pPersist + 1,
            pvData,
            cbData
        );

        hr =
            pKsPropertySet->Set
            (
                DSPROPSETID_DirectSoundPersistentData,
                DSPROPERTY_DIRECTSOUNDPERSISTENTDATA_PERSISTDATA,
                NULL,
                0,
                pPersist,
                cbPersist
            );
    }
    else
    {
        hr = DSERR_OUTOFMEMORY;
    }

    if(pPersist)
    {
        LocalFree(pPersist);
    }

    return hr;
}


/***************************************************************************
 *
 *  PrvTranslateErrorCode
 *
 *  Description:
 *      Translates an error code to a string representation.
 *
 *  Arguments:
 *      LPKSPROPERTYSET [in]: IKsPropertySet interface to the
 *                            DirectSoundPrivate object.
 *      HRESULT [in]: result code.
 *      PDSPROPERTY_DIRECTSOUNDDEBUG_TRANSLATEERRORCODE_DATA * [out]:
 *          receives error code data.  The caller is responsible for freeing
 *          this buffer.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

HRESULT PrvTranslateResultCode
(
    LPKSPROPERTYSET                                         pKsPropertySet,
    HRESULT                                                 hrResult,
    PDSPROPERTY_DIRECTSOUNDDEBUG_TRANSLATERESULTCODE_DATA * ppData
)
{
    PDSPROPERTY_DIRECTSOUNDDEBUG_TRANSLATERESULTCODE_DATA   pData   = NULL;
    DSPROPERTY_DIRECTSOUNDDEBUG_TRANSLATERESULTCODE_DATA    Basic;
    ULONG                                                   cbData;
    HRESULT                                                 hr;

    Basic.ResultCode = hrResult;

    hr =
        pKsPropertySet->Get
        (
            DSPROPSETID_DirectSoundDebug,
            DSPROPERTY_DIRECTSOUNDDEBUG_TRANSLATERESULTCODE,
            NULL,
            0,
            &Basic,
            sizeof(Basic),
            &cbData
        );

    if(SUCCEEDED(hr))
    {
        pData = (PDSPROPERTY_DIRECTSOUNDDEBUG_TRANSLATERESULTCODE_DATA)
            LocalAlloc
            (
                LPTR,
                cbData
            );

        if(!pData)
        {
            hr = DSERR_OUTOFMEMORY;
        }
    }

    if(SUCCEEDED(hr))
    {
        pData->ResultCode = hrResult;
        
        hr =
            pKsPropertySet->Get
            (
                DSPROPSETID_DirectSoundDebug,
                DSPROPERTY_DIRECTSOUNDDEBUG_TRANSLATERESULTCODE,
                NULL,
                0,
                pData,
                cbData,
                NULL
            );
    }

    if(SUCCEEDED(hr))
    {
        *ppData = pData;
    }
    else if(pData)
    {
        LocalFree
        (
            pData
        );
    }

    return hr;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\directx\dsound\dsound\dsmgr\dsprvobj.h ===
/***************************************************************************
 *
 *  Copyright (C) 1995,1996 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       dsprvobj.h
 *  Content:    DirectSound Private Object wrapper functions.
 *  History:
 *   Date       By      Reason
 *   ====       ==      ======
 *  02/12/98    dereks  Created.
 *
 ***************************************************************************/

#ifndef __DSPRVOBJ_H__
#define __DSPRVOBJ_H__

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

HRESULT DirectSoundPrivateCreate
(
    LPKSPROPERTYSET *   ppKsPropertySet
);

HRESULT PrvGetMixerSrcQuality
(
    LPKSPROPERTYSET                 pKsPropertySet,
    REFGUID                         guidDeviceId,
    DIRECTSOUNDMIXER_SRCQUALITY *   pSrcQuality
);

HRESULT PrvSetMixerSrcQuality
(
    LPKSPROPERTYSET             pKsPropertySet,
    REFGUID                     guidDeviceId,
    DIRECTSOUNDMIXER_SRCQUALITY SrcQuality
);

HRESULT PrvGetMixerAcceleration
(
    LPKSPROPERTYSET pKsPropertySet,
    REFGUID         guidDeviceId,
    LPDWORD         pdwAcceleration
);

HRESULT PrvSetMixerAcceleration
(
    LPKSPROPERTYSET pKsPropertySet,
    REFGUID         guidDeviceId,
    DWORD           dwAcceleration
);

HRESULT PrvGetDevicePresence
(
    LPKSPROPERTYSET pKsPropertySet,
    REFGUID         guidDeviceId,
    LPBOOL          pfEnabled
);

HRESULT PrvSetDevicePresence
(
    LPKSPROPERTYSET pKsPropertySet,
    REFGUID         guidDeviceId,
    BOOL            fEnabled
);

HRESULT PrvGetWaveDeviceMapping
(
    LPKSPROPERTYSET pKsPropertySet,
    LPCTSTR         pszWaveDevice,
    BOOL            fCapture,
    LPGUID          pguidDeviceId
);

HRESULT PrvGetDeviceDescription
(
    LPKSPROPERTYSET                                 pKsPropertySet,
    REFGUID                                         guidDeviceId,
    PDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_DATA *ppData
);

HRESULT PrvEnumerateDevices
(
    LPKSPROPERTYSET                         pKsPropertySet,
    LPFNDIRECTSOUNDDEVICEENUMERATECALLBACK  pfnCallback,
    LPVOID                                  pvContext
);

HRESULT PrvGetBasicAcceleration
(
    LPKSPROPERTYSET                         pKsPropertySet,
    REFGUID                                 guidDeviceId,
    DIRECTSOUNDBASICACCELERATION_LEVEL *    pLevel
);

HRESULT PrvSetBasicAcceleration
(
    LPKSPROPERTYSET                     pKsPropertySet,
    REFGUID                             guidDeviceId,
    DIRECTSOUNDBASICACCELERATION_LEVEL  Level
);

HRESULT PrvGetDebugInformation
(
    LPKSPROPERTYSET pKsPropertySet,
    LPDWORD         pdwFlags,
    PULONG          pulDpfLevel,
    PULONG          pulBreakLevel,
    LPTSTR          pszLogFile
);

HRESULT PrvSetDebugInformation
(
    LPKSPROPERTYSET pKsPropertySet,
    DWORD           dwFlags,
    ULONG           ulDpfLevel,
    ULONG           ulBreakLevel,
    LPCTSTR         pszLogFile
);

HRESULT PrvGetPersistentData
(
    LPKSPROPERTYSET pKsPropertySet,
    REFGUID         guidDeviceId,
    LPCTSTR         pszSubkey,
    LPCTSTR         pszValue,
    LPDWORD         pdwRegType,
    LPVOID          pvData,
    LPDWORD         pcbData
);

HRESULT PrvSetPersistentData
(
    LPKSPROPERTYSET pKsPropertySet,
    REFGUID         guidDeviceId,
    LPCTSTR         pszSubkey,
    LPCTSTR         pszValue,
    DWORD           dwRegType,
    LPVOID          pvData,
    DWORD           cbData
);

HRESULT PrvTranslateResultCode
(
    LPKSPROPERTYSET                                         pKsPropertySet,
    HRESULT                                                 hrResult,
    PDSPROPERTY_DIRECTSOUNDDEBUG_TRANSLATERESULTCODE_DATA * ppData
);

#ifdef __cplusplus
}
#endif // __cplusplus

#endif // __DSPRVOBJ_H__
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\directx\dsound\dsound\dsmgr\dsmgr.h ===
/***************************************************************************
 *
 *  Copyright (C) 1995-1997 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       dsmgr.h
 *  Content:    Main application header.
 *  History:
 *   Date       By      Reason
 *   ====       ==      ======
 *  10/15/97    dereks  Created.
 *
 ***************************************************************************/

#ifndef __DSMGR_H__
#define __DSMGR_H__

// We'll ask for what we need, thank you.
#ifndef WIN32_LEAN_AND_MEAN
#define WIN32_LEAN_AND_MEAN
#endif // WIN32_LEAN_AND_MEAN

// Public includes
#include <windows.h>
#include <mmsystem.h>
#include <dsoundp.h>

// Private includes
#include "resource.h"

#endif // __DSMGR_H__
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\directx\dsound\dsound\win9x\makefile.inc ===
!include ..\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\directx\dsound\dsound\dsmgr\dsmgr.cpp ===
/***************************************************************************
 *
 *  Copyright (C) 1995-1997 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       dsmgr.cpp
 *  Content:    Main application source file.
 *  History:
 *   Date       By      Reason
 *   ====       ==      ======
 *  10/15/97    dereks  Created.
 *
 ***************************************************************************/

// We'll ask for what we need, thank you.
#ifndef WIN32_LEAN_AND_MEAN
#define WIN32_LEAN_AND_MEAN
#endif // WIN32_LEAN_AND_MEAN

// I need GUIDs, dammit
#ifndef INITGUID
#define INITGUID
#endif // INITGUID

// Public includes
#include <windows.h>
#include <windowsx.h>
#include <mmsystem.h>
#include <dsoundp.h>
#include <dsprv.h>
#include <commctrl.h>
#include <commdlg.h>
#include <cguid.h>

// Private includes
#include "resource.h"
#include "dsprvobj.h"

// Debug helpers
#if defined(DEBUG) || defined(_DEBUG)
#define DPF dprintf
#else // defined(DEBUG) || defined(_DEBUG)
#pragma warning(disable:4002)
#define DPF()
#endif // defined(DEBUG) || defined(_DEBUG)

// Generic helper macros
#define MAKEBOOL(a) (!!(a))

// Image list icon array
const UINT g_auDriverIcons[] = { IDI_DSMGR, IDI_PLAYBACK, IDI_RECORD };

// Device properties
typedef struct tagDIRECTSOUNDDEVICE_SHAREDDATA
{
    DIRECTSOUNDMIXER_SRCQUALITY SrcQuality;
    DWORD                       Acceleration;
} DIRECTSOUNDDEVICE_SHAREDDATA, *LPDIRECTSOUNDDEVICE_SHAREDDATA;

typedef struct tagDIRECTSOUNDDEVICEDESCRIPTION
{
    GUID                        DeviceId;
    DIRECTSOUNDDEVICE_TYPE      Type;
    DIRECTSOUNDDEVICE_DATAFLOW  DataFlow;
    CHAR                        Description[0x100];
    CHAR                        Module[MAX_PATH];
    CHAR                        Interface[MAX_PATH];
    ULONG                       WaveDeviceId;
} DIRECTSOUNDDEVICEDESCRIPTION, *PDIRECTSOUNDDEVICEDESCRIPTION;

typedef struct tagDIRECTSOUNDDEVICE
{
    DIRECTSOUNDDEVICEDESCRIPTION    Description;
    BOOL                            Presence;
    DIRECTSOUNDDEVICE_SHAREDDATA    SharedData;
    LPDIRECTSOUNDDEVICE_SHAREDDATA  pSharedData;
} DIRECTSOUNDDEVICE, *LPDIRECTSOUNDDEVICE;

typedef const DIRECTSOUNDDEVICE *LPCDIRECTSOUNDDEVICE;

// GUID string
#define MAX_GUID_STRING_LEN (8+1+4+1+4+1+2+2+2+2+2+2+2+2+1)

// Main window class declaration
class CDsMgrWindow
{
private:
    HINSTANCE                                       m_hInst;            // Application instance handle
    WNDCLASSEX                                      m_wcex;             // Application window class
    HWND                                            m_hWnd;             // Window handle
    LPKSPROPERTYSET                                 m_pDsPrivate;       // IKsPropertySet interface to the DirectSoundPrivate object
    DSPROPERTY_DIRECTSOUNDDEBUG_DPFINFO_DATA        m_DpfInfo;          // DirectSound DPF info

public:
    CDsMgrWindow(void);
    virtual ~CDsMgrWindow(void);

public:
    // Initialization
    virtual BOOL Initialize(HINSTANCE, INT);

    // General message processing
    virtual INT PumpMessages(void);
    static INT_PTR CALLBACK WindowProc(HWND, UINT, WPARAM, LPARAM);

    // Specific message processing
    virtual void OnInit(void);
    virtual void OnSize(WORD, WORD, WORD);
    virtual void OnCommand(UINT, UINT);
    virtual void OnNotify(LPNMHDR);
    virtual BOOL OnClose(void);
    virtual void OnDestroy(void);

    // Even more granular message processing
    virtual void OnCommandApply(void);
    virtual void OnCommandResetDevice(void);
    virtual void OnCommandResetAll(void);
    virtual void OnCommandBrowse(void);
    virtual void OnListViewItemChanged(NM_LISTVIEW *);

private:
    // UI helpers
    virtual void RefreshDriverList(void);
    virtual void FreeDriverList(void);
    virtual void UpdateUiFromDevice(LPCDIRECTSOUNDDEVICE);
    virtual void UpdateDeviceFromUi(LPDIRECTSOUNDDEVICE);
    virtual void UpdateUiFromDebug(const DSPROPERTY_DIRECTSOUNDDEBUG_DPFINFO_DATA *);
    virtual void UpdateDebugFromUi(PDSPROPERTY_DIRECTSOUNDDEBUG_DPFINFO_DATA);
    virtual LPDIRECTSOUNDDEVICE GetSelectedDevice(INT = -1);

    // DirectSound helpers
    virtual BOOL DirectSoundEnumerateCallback(PDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_DATA);
    static BOOL CALLBACK DirectSoundEnumerateCallbackStatic(PDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_DATA, LPVOID);
    virtual BOOL GetDeviceProperties(LPDIRECTSOUNDDEVICE);
    virtual BOOL SetDeviceProperties(LPCDIRECTSOUNDDEVICE);
    virtual BOOL GetDebugProperties(PDSPROPERTY_DIRECTSOUNDDEBUG_DPFINFO_DATA);
    virtual BOOL SetDebugProperties(const DSPROPERTY_DIRECTSOUNDDEBUG_DPFINFO_DATA *);

    // Misc
    static void GuidToString(REFGUID, LPSTR);
    static void StringToGuid(LPCSTR, LPGUID);
    static INT atoi(LPCSTR);
};


/***************************************************************************
 *
 *  dprintf
 *
 *  Description:
 *      Writes a string to the debugger.
 *
 *  Arguments:
 *      LPCSTR [in]: string.
 *      ... [in]: optional string modifiers.
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

void 
dprintf
(
    LPCSTR                  pszFormat, 
    ...
)
{
    static CHAR             szFinal[0x400];
    va_list                 va;

    // Add the library name
    lstrcpyA(szFinal, "DSMGR: ");

    // Format the string
    va_start(va, pszFormat);
    wvsprintfA(szFinal + lstrlen(szFinal), pszFormat, va);
    va_end(va);

    // Add a carriage-return since OuputDebugString doesn't
    lstrcatA(szFinal, "\r\n");

    // Output to the debugger
    OutputDebugStringA(szFinal);
}


/***************************************************************************
 *
 *  ForceDsLink
 *
 *  Description:
 *      Forces a static link to dsound.dll.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

void 
ForceDsLink
(
    void
)
{
    DirectSoundCreate(NULL, NULL, NULL);
}


/***************************************************************************
 *
 *  WinMain
 *
 *  Description:
 *      Application entry point.
 *
 *  Arguments:
 *      HINSTANCE [in]: application instance handle.
 *      HINSTANCE [in]: previous application instance handle.  Unused in
 *                      Win32.
 *      LPSTR [in]: application command line.
 *      INT [in]: application show command.
 *
 *  Returns:  
 *      INT: 0 on success.
 *
 ***************************************************************************/

INT 
WINAPI 
WinMain
(
    HINSTANCE               hInst, 
    HINSTANCE               hPrevInst, 
    LPSTR                   pszCommandLine, 
    INT                     nShowCmd
)
{
    BOOL                    fSuccess    = TRUE;
    CDsMgrWindow *          pWindow;
    INT                     nReturn;

    // Force a link to comctl32.dll
    InitCommonControls();
    
    // Create the main window
    pWindow = new CDsMgrWindow;

    if(!pWindow)
    {
        DPF("Out of memory allocating main window object");
        fSuccess = FALSE;
    }

    if(fSuccess)
    {
        fSuccess = pWindow->Initialize(hInst, nShowCmd);
    }

    // Pump messages
    if(fSuccess)
    {
        nReturn = pWindow->PumpMessages();
    }
    else
    {
        nReturn = -1;
    }

    // Free memory
    if(pWindow)
    {
        delete pWindow;
    }

    return nReturn;
}


/***************************************************************************
 *
 *  CDsMgrWindow
 *
 *  Description:
 *      Object constructor.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

CDsMgrWindow::CDsMgrWindow
(
    void
)
{
    // Initialize defaults
    m_hInst = NULL;
    m_hWnd = NULL;
    m_pDsPrivate = NULL;

    memset(&m_wcex, 0, sizeof(m_wcex));
}


/***************************************************************************
 *
 *  ~CDsMgrWindow
 *
 *  Description:
 *      Object destructor.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

CDsMgrWindow::~CDsMgrWindow
(
    void
)
{
    // Make sure the main window is closed
    if(m_hWnd)
    {
        FreeDriverList();
        DestroyWindow(m_hWnd);
    }

    // Unregister the window class
    if(m_wcex.cbSize)
    {
        UnregisterClass(m_wcex.lpszClassName, m_hInst);
    }

    // Release the DirectSoundPrivate object
    if(m_pDsPrivate)
    {
        m_pDsPrivate->Release();
    }
}


/***************************************************************************
 *
 *  Initialize
 *
 *  Description:
 *      Object initializer.
 *
 *  Arguments:
 *      HINSTANCE [in]: application instance handle.
 *      INT [in]: window show command.
 *
 *  Returns:  
 *      BOOL: TRUE on success.
 *
 ***************************************************************************/

BOOL 
CDsMgrWindow::Initialize
(
    HINSTANCE               hInst, 
    INT                     nShowCmd
)
{
    BOOL                    fSuccess    = TRUE;
    HWND                    hWnd;
    
    // Save the instance handle
    m_hInst = hInst;

    // Register the window class
    m_wcex.cbSize = sizeof(m_wcex);
    m_wcex.style = 0;
    m_wcex.lpfnWndProc = WindowProc;
    m_wcex.cbClsExtra = 0;
    m_wcex.cbWndExtra = DLGWINDOWEXTRA;
    m_wcex.hInstance = m_hInst;
    m_wcex.hIcon = (HICON)LoadImage(m_hInst, MAKEINTRESOURCE(IDI_DSMGR), IMAGE_ICON, 32, 32, 0);
    m_wcex.hCursor = LoadCursor(NULL, IDC_ARROW);
    m_wcex.hbrBackground = GetSysColorBrush(COLOR_3DFACE);
    m_wcex.lpszMenuName = NULL;
    m_wcex.lpszClassName = TEXT("dsmgr");
    m_wcex.hIconSm = (HICON)LoadImage(m_hInst, MAKEINTRESOURCE(IDI_DSMGR), IMAGE_ICON, 16, 16, 0);

    if(!RegisterClassEx(&m_wcex))
    {
        DPF("Unable to register window class");
        fSuccess = FALSE;
    }

    // Create the main window
    if(fSuccess)
    {
        hWnd = CreateDialogParam(m_hInst, MAKEINTRESOURCE(IDD_DSMGR), NULL, WindowProc, (LPARAM)this);
        fSuccess = hWnd ? TRUE : FALSE;
    }

    return fSuccess;
}


/***************************************************************************
 *
 *  PumpMessages
 *
 *  Description:
 *      Main message pump.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      INT: application return code.
 *
 ***************************************************************************/

INT 
CDsMgrWindow::PumpMessages
(
    void
)
{
    MSG                     msg;

    while(GetMessage(&msg, NULL, 0, 0) > 0)
    {
        if(!IsDialogMessage(m_hWnd, &msg))
        {
            TranslateMessage(&msg);
            DispatchMessage(&msg);
        }
    }

    return msg.wParam;
}


/***************************************************************************
 *
 *  WindowProc
 *
 *  Description:
 *      Main message handler.
 *
 *  Arguments:
 *      HWND [in]: window handle.
 *      UINT [in]: message identifier.
 *      WPARAM [in]: message 16-bit parameter.
 *      LPARAM [in]: message 32-bit parameter.
 *
 *  Returns:  
 *      LPARAM [in]: return from DefWindowProc.
 *
 ***************************************************************************/

INT_PTR 
CALLBACK 
CDsMgrWindow::WindowProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
{
    CDsMgrWindow *          pThis;
    
    if(WM_INITDIALOG == uMsg)
    {
        // Pack the this pointer into the window's 32-bit user space
        pThis = (CDsMgrWindow *)lParam;
        SetWindowLong(hWnd, DWL_USER, lParam);

        // The window handle isn't saved to a data member yet
        pThis->m_hWnd = hWnd;
    }
    else
    {
        // Get the this pointer from the window's 32-bit user space
        pThis = (CDsMgrWindow *)GetWindowLong(hWnd, DWL_USER);
    }

    // Dispatch the message
    if(pThis)
    {
        switch(uMsg)
        {
            case WM_INITDIALOG:
                pThis->OnInit();
                break;

            case WM_SIZE:
                pThis->OnSize(wParam, LOWORD(lParam), HIWORD(lParam));
                break;
        
            case WM_COMMAND:
                pThis->OnCommand(LOWORD(wParam), HIWORD(wParam));
                break;
     
            case WM_NOTIFY:
                pThis->OnNotify((LPNMHDR)lParam);
                break;

            case WM_CLOSE:
            case WM_QUERYENDSESSION:
                if(!pThis->OnClose())
                {
                    return 0;
                }

                break;
        
            case WM_DESTROY:
                pThis->OnDestroy();
                break;
        }
    }

    return DefWindowProc(hWnd, uMsg, wParam, lParam);
}


/***************************************************************************
 *
 *  OnInit
 *
 *  Description:
 *      Initialization handler.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

void 
CDsMgrWindow::OnInit
(
    void
)
{
    HWND                    hWndLv      = GetDlgItem(m_hWnd, IDC_DEVICELIST);
    HWND                    hWndSrc     = GetDlgItem(m_hWnd, IDC_MIXER_SRCQUALITY);
    HWND                    hWndDpf     = GetDlgItem(m_hWnd, IDC_DEBUG_DPFLEVEL_SPIN);
    HWND                    hWndBreak   = GetDlgItem(m_hWnd, IDC_DEBUG_BREAKLEVEL_SPIN);
    HIMAGELIST              himl;
    HICON                   hicon;
    HRESULT                 hr;
    LV_COLUMN               lvc;
    UINT                    i;

    // Create the DirectSoundPrivate object
    hr = DirectSoundPrivateCreate(&m_pDsPrivate);

    if(FAILED(hr))
    {
        DPF("Unable to create DirectSoundPrivate object");
        return;
    }

    // Initialize the device list view
    himl = ImageList_Create(16, 16, ILC_COLOR, 3, 1);

    ListView_SetImageList(hWndLv, himl, LVSIL_SMALL);
    
    for(i = 0; i < sizeof(g_auDriverIcons) / sizeof(g_auDriverIcons[0]); i++)
    {
        hicon = (HICON)LoadImage(m_hInst, MAKEINTRESOURCE(g_auDriverIcons[i]), IMAGE_ICON, 16, 16, 0);

        ImageList_AddIcon(himl, hicon);
    }

    ImageList_SetBkColor(himl, COLOR_WINDOW);
    
    lvc.mask = LVCF_FMT | LVCF_SUBITEM | LVCF_TEXT | LVCF_WIDTH;
    lvc.fmt = LVCFMT_LEFT;
    lvc.cx = 200;
    lvc.pszText = "Description";
    lvc.iSubItem = 0;

    ListView_InsertColumn(hWndLv, lvc.iSubItem, &lvc);

    lvc.cx = 100;
    lvc.pszText = "Module";

    ListView_InsertColumn(hWndLv, ++lvc.iSubItem, &lvc);

    lvc.cx = 50;
    lvc.pszText = "Type";

    ListView_InsertColumn(hWndLv, ++lvc.iSubItem, &lvc);

    lvc.pszText = "Wave Device";

    ListView_InsertColumn(hWndLv, ++lvc.iSubItem, &lvc);

    lvc.cx = 250;
    lvc.pszText = "GUID";

    ListView_InsertColumn(hWndLv, ++lvc.iSubItem, &lvc);

    lvc.cx = 250;
    lvc.pszText = "Interface";

    ListView_InsertColumn(hWndLv, ++lvc.iSubItem, &lvc);

    // Initialize SRC quality combo-box items
    ComboBox_AddString(hWndSrc, "Worst");
    ComboBox_AddString(hWndSrc, "PC");
    ComboBox_AddString(hWndSrc, "Basic");
    ComboBox_AddString(hWndSrc, "Advanced");

    // Initialize spinner ranges
    SendMessage(hWndDpf, UDM_SETRANGE, 0, MAKELONG(9, 0));
    SendMessage(hWndBreak, UDM_SETRANGE, 0, MAKELONG(9, 0));

    // Get debug settings
    GetDebugProperties(&m_DpfInfo);
    UpdateUiFromDebug(&m_DpfInfo);

    // Refresh the device list
    RefreshDriverList();
}


/***************************************************************************
 *
 *  OnSize
 *
 *  Description:
 *      Handles size and state changes.
 *
 *  Arguments:
 *      WORD [in]: resize type.
 *      WORD [in]: new width.
 *      WORD [in]: new height.
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

void 
CDsMgrWindow::OnSize
(
    WORD                    wType, 
    WORD                    wWidth, 
    WORD                    wHeight
)
{
    const HMENU             hMenu   = GetSystemMenu(m_hWnd, FALSE);
    
    // Work around a bug in the windows dialog handler
    if(SIZE_RESTORED == wType || SIZE_MINIMIZED == wType)
    {
        // Disable the maximize and size items
        EnableMenuItem(hMenu, SC_MAXIMIZE, MF_BYCOMMAND | MF_GRAYED);
        EnableMenuItem(hMenu, SC_SIZE, MF_BYCOMMAND | MF_GRAYED);

        // En/disable the minimize and restore items based on the window state
        EnableMenuItem(hMenu, SC_MINIMIZE, MF_BYCOMMAND | (SIZE_RESTORED == wType) ? MF_ENABLED : MF_GRAYED);
        EnableMenuItem(hMenu, SC_RESTORE, MF_BYCOMMAND | (SIZE_MINIMIZED == wType) ? MF_ENABLED : MF_GRAYED);
    }
}


/***************************************************************************
 *
 *  OnCommand
 *
 *  Description:
 *      Handles command messages.
 *
 *  Arguments:
 *      UINT [in]: resource identifier.
 *      UINT [in]: command.
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

void 
CDsMgrWindow::OnCommand(UINT uId, UINT uCmd)
{
    LPDIRECTSOUNDDEVICE     pDevice;
    
    switch(uId)
    {
        case IDC_APPLY:
            OnCommandApply();
            break;

        case IDC_RESETDEVICE:
            OnCommandResetDevice();
            break;

        case IDC_RESETALL:
            OnCommandResetAll();
            break;

        case IDC_ACCELERATION_HARDWAREBUFFERS:
        case IDC_ACCELERATION_HARDWARE3D:
        case IDC_ACCELERATION_RING0MIX:
        case IDC_ACCELERATION_HARDWAREPROPERTYSETS:
        case IDC_MIXER_SRCQUALITY:
        case IDC_DEVICEPRESENCE:
            if(pDevice = GetSelectedDevice())
            {
                UpdateDeviceFromUi(pDevice);
            }

            break;

        case IDC_DEBUG_LOGFILE_BROWSE:
            OnCommandBrowse();
            break;
    }
}


/***************************************************************************
 *
 *  OnCommandResetDevice
 *
 *  Description:
 *      Resets the currently selected device.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

void 
CDsMgrWindow::OnCommandResetDevice
(
    void
)
{
    LPDIRECTSOUNDDEVICE     pDevice;
    
    // Reload and update the device's settings
    if(pDevice = GetSelectedDevice())
    {
        GetDeviceProperties(pDevice);
        UpdateUiFromDevice(pDevice);
    }
}


/***************************************************************************
 *
 *  OnCommandResetAll
 *
 *  Description:
 *      Resets all settings.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

void 
CDsMgrWindow::OnCommandResetAll
(
    void
)
{
    HWND                    hWndLv  = GetDlgItem(m_hWnd, IDC_DEVICELIST);
    LPDIRECTSOUNDDEVICE     pDevice;
    LV_ITEM                 lvi;
    BOOL                    f;
    
    // Reload and update all device properties
    for(ZeroMemory(&lvi, sizeof(lvi)), lvi.mask = LVIF_PARAM; lvi.iItem < ListView_GetItemCount(hWndLv); lvi.iItem++)
    {
        pDevice = NULL;
        
        f = ListView_GetItem(hWndLv, &lvi);

        if(f)
        {
            pDevice = (LPDIRECTSOUNDDEVICE)lvi.lParam;
        }

        if(pDevice)
        {
            GetDeviceProperties(pDevice);
        }
    }
    
    if(pDevice = GetSelectedDevice())
    {
        UpdateUiFromDevice(pDevice);
    }

    // Reload and update debug properties
    GetDebugProperties(&m_DpfInfo);
    UpdateUiFromDebug(&m_DpfInfo);
}


/***************************************************************************
 *
 *  OnCommandApply
 *
 *  Description:
 *      Handles command messages.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

void 
CDsMgrWindow::OnCommandApply
(
    void
)
{
    HWND                    hWndLv  = GetDlgItem(m_hWnd, IDC_DEVICELIST);
    LPDIRECTSOUNDDEVICE     pDevice;
    LV_ITEM                 lvi;
    BOOL                    f;
    
    // Apply all device properties
    for(ZeroMemory(&lvi, sizeof(lvi)), lvi.mask = LVIF_PARAM; lvi.iItem < ListView_GetItemCount(hWndLv); lvi.iItem++)
    {
        pDevice = NULL;
        
        f = ListView_GetItem(hWndLv, &lvi);

        if(f)
        {
            pDevice = (LPDIRECTSOUNDDEVICE)lvi.lParam;
        }

        if(pDevice)
        {
            SetDeviceProperties(pDevice);
        }
    }
    
    // Set debug properties
    UpdateDebugFromUi(&m_DpfInfo);
    SetDebugProperties(&m_DpfInfo);
}


/***************************************************************************
 *
 *  OnCommandBrowse
 *
 *  Description:
 *      Handles command messages.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

void 
CDsMgrWindow::OnCommandBrowse
(   
    void
)
{
    TCHAR                   szFile[MAX_PATH];
    OPENFILENAME            ofn;
    BOOL                    f;
    
    GetDlgItemText(m_hWnd, IDC_DEBUG_LOGFILE, szFile, sizeof(szFile));

    ZeroMemory(&ofn, sizeof(ofn));

    ofn.lStructSize = sizeof(ofn);
    ofn.hwndOwner = m_hWnd;
    ofn.lpstrFilter = TEXT("Text Files (*.txt)\0*.txt\0All Files (*.*)\0*.*\0");
    ofn.nFilterIndex = 1;
    ofn.lpstrFile = szFile;
    ofn.nMaxFile = sizeof(szFile);
    ofn.Flags = OFN_EXPLORER | OFN_PATHMUSTEXIST | OFN_HIDEREADONLY;

    f = GetOpenFileName(&ofn);

    if(f)
    {
        SetDlgItemText(m_hWnd, IDC_DEBUG_LOGFILE, szFile);
    }
}


/***************************************************************************
 *
 *  OnNotify
 *
 *  Description:
 *      Handles notifications.
 *
 *  Arguments:
 *      LPNMHDR [in]: notification header.
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

void 
CDsMgrWindow::OnNotify
(
    LPNMHDR                 pnmh
)
{
    switch(pnmh->code)
    {
        case LVN_ITEMCHANGED:
            OnListViewItemChanged((NM_LISTVIEW *)pnmh);
            break;
    }
}


/***************************************************************************
 *
 *  OnListViewItemChanged
 *
 *  Description:
 *      Handles notifications.
 *
 *  Arguments:
 *      NM_LISTVIEW * [in]: notification header.
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

void 
CDsMgrWindow::OnListViewItemChanged
(
    NM_LISTVIEW *           pListView
)
{
    LPDIRECTSOUNDDEVICE     pDevice     = NULL;
    
    if(MAKEBOOL(pListView->uNewState & LVIS_SELECTED) != MAKEBOOL(pListView->uOldState & LVIS_SELECTED))
    {
        if(pListView->uNewState & LVIS_SELECTED)
        {
            pDevice = GetSelectedDevice(pListView->iItem);
        }

        UpdateUiFromDevice(pDevice);
    }
}


/***************************************************************************
 *
 *  OnClose
 *
 *  Description:
 *      Handles close requests.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      BOOL: TRUE to allow the close.
 *
 ***************************************************************************/

BOOL 
CDsMgrWindow::OnClose
(
    void
)
{
    return TRUE;
}


/***************************************************************************
 *
 *  OnDestroy
 *
 *  Description:
 *      Handles window destroy notifications.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

void 
CDsMgrWindow::OnDestroy
(
    void
)
{
    // Post the thread quit message
    PostQuitMessage(0);
}


/***************************************************************************
 *
 *  RefreshDriverList
 *
 *  Description:
 *      Refreshes the driver list window.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

void 
CDsMgrWindow::RefreshDriverList
(
    void
)
{
    HWND                    hWndLv      = GetDlgItem(m_hWnd, IDC_DEVICELIST);
    INT                     nIndex;
    
    // Free any current items
    FreeDriverList();

    // Enumerate all DirectSound devices
    PrvEnumerateDevices(m_pDsPrivate, DirectSoundEnumerateCallbackStatic, this);

    // Resize the list view columns
    for(nIndex = 0; nIndex < 7; nIndex++)
    {
        ListView_SetColumnWidth(hWndLv, nIndex, LVSCW_AUTOSIZE);
    }

    // No device is selected
    UpdateUiFromDevice(NULL);
}


/***************************************************************************
 *
 *  FreeDriverList
 *
 *  Description:
 *      Frees the driver list.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

void 
CDsMgrWindow::FreeDriverList
(
    void
)
{
    HWND                    hWndLv      = GetDlgItem(m_hWnd, IDC_DEVICELIST);
    INT                     nIndex;
    LV_ITEM                 lvi;
    LPDIRECTSOUNDDEVICE     pDevice;
    
    // Enumerate all items, freeing the lParam member
    lvi.mask = LVIF_PARAM;
    
    for(nIndex = 0; nIndex < ListView_GetItemCount(hWndLv); nIndex++)
    {
        ListView_GetItem(hWndLv, &lvi);

        if(pDevice = (LPDIRECTSOUNDDEVICE)lvi.lParam)
        {
            delete pDevice;
        }
    }

    // Free any current items
    ListView_DeleteAllItems(hWndLv);
}


/***************************************************************************
 *
 *  DirectSoundEnumerateCallback
 *
 *  Description:
 *      DirectSoundEnumerate callback function.
 *
 *  Arguments:
 *      PDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_DATA [in]: description.
 *
 *  Returns:  
 *      BOOL: TRUE to continue enumerating.
 *
 ***************************************************************************/

BOOL 
CDsMgrWindow::DirectSoundEnumerateCallback
(
    PDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_DATA  pDesc
)
{
    HWND                                            hWndLv      = GetDlgItem(m_hWnd, IDC_DEVICELIST);
    LPDIRECTSOUNDDEVICE                             pDevice;
    LPDIRECTSOUNDDEVICE                             pDevice2;
    TCHAR                                           sz[64];
    LV_ITEM                                         lvi;
    BOOL                                            f;
    
    // Create the new data structure
    pDevice = new DIRECTSOUNDDEVICE;

    if(pDevice)
    {
        pDevice->pSharedData = &pDevice->SharedData;
    }
        
    // Get device data
    if(pDevice)
    {
        pDevice->Description.DeviceId = pDesc->DeviceId;
        
        f = GetDeviceProperties(pDevice);

        if(!f)
        {
            delete pDevice;
            pDevice = NULL;
        }
    }

    // Initialize shared device settings
    if(pDevice)
    {
        lvi.mask = LVIF_PARAM;
        lvi.iItem = 0;

        while(TRUE)
        {
            f = ListView_GetItem(hWndLv, &lvi);

            if(!f)
            {
                break;
            }

            pDevice2 = (LPDIRECTSOUNDDEVICE)lvi.lParam;

            if(!lstrcmpi(pDevice->Description.Interface, pDevice2->Description.Interface))
            {
                if(pDevice->Description.DataFlow == pDevice2->Description.DataFlow)
                {
                    pDevice->pSharedData = pDevice2->pSharedData;
                    break;
                }
            }

            lvi.iItem++;
        }
    }
    
    // Add the device to the list
    if(pDevice)
    {
        // Device description
        lvi.mask = LVIF_TEXT | LVIF_IMAGE | LVIF_PARAM;
        lvi.iItem = 0x7FFFFFFF;
        lvi.iSubItem = 0;
        lvi.pszText = pDesc->Description;
    
        if(DIRECTSOUNDDEVICE_DATAFLOW_RENDER == pDesc->DataFlow)
        {
            lvi.iImage = 1;
        }
        else
        {
            lvi.iImage = 2;
        }

        lvi.lParam = (LPARAM)pDevice;
        lvi.iItem = ListView_InsertItem(hWndLv, &lvi);

        // Module name
        lvi.mask = LVIF_TEXT;
        lvi.pszText = pDesc->Module;

        lvi.iSubItem++;

        ListView_SetItem(hWndLv, &lvi);

        // Device type
        if(DIRECTSOUNDDEVICE_TYPE_EMULATED == pDesc->Type)
        {
            lvi.pszText = "Emulated";
        }
        else if(DIRECTSOUNDDEVICE_TYPE_VXD == pDesc->Type)
        {
            lvi.pszText = "VxD";
        }
        else
        {
            lvi.pszText = "WDM";
        }

        lvi.iSubItem++;

        ListView_SetItem(hWndLv, &lvi);

        // Wave device id
        wsprintf(sz, TEXT("%u"), pDesc->WaveDeviceId);
        lvi.pszText = sz;

        lvi.iSubItem++;

        ListView_SetItem(hWndLv, &lvi);

        // GUID
        wsprintf(sz, TEXT("%8.8lX-%4.4X-%4.4X-%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X"), pDesc->DeviceId.Data1, pDesc->DeviceId.Data2, pDesc->DeviceId.Data3, pDesc->DeviceId.Data4[0], pDesc->DeviceId.Data4[1], pDesc->DeviceId.Data4[2], pDesc->DeviceId.Data4[3], pDesc->DeviceId.Data4[4], pDesc->DeviceId.Data4[5], pDesc->DeviceId.Data4[6], pDesc->DeviceId.Data4[7]);
        lvi.pszText = sz;

        lvi.iSubItem++;

        ListView_SetItem(hWndLv, &lvi);

        // Interface
        lvi.pszText = pDesc->Interface;

        lvi.iSubItem++;

        ListView_SetItem(hWndLv, &lvi);
    }

    return TRUE;
}


/***************************************************************************
 *
 *  DirectSoundEnumerateCallbackStatic
 *
 *  Description:
 *      DirectSoundEnumerate callback function.
 *
 *  Arguments:
 *      PDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_DATA [in]: description.
 *      LPVOID [in]: context argument.
 *
 *  Returns:  
 *      BOOL: TRUE to continue enumerating.
 *
 ***************************************************************************/

BOOL 
CALLBACK 
CDsMgrWindow::DirectSoundEnumerateCallbackStatic
(
    PDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_DATA  pDesc,
    LPVOID                                          pvContext
)
{
    return ((CDsMgrWindow *)pvContext)->DirectSoundEnumerateCallback(pDesc);
}


/***************************************************************************
 *
 *  GetSelectedDevice
 *
 *  Description:
 *      Gets the currently selected device.
 *
 *  Arguments:
 *      (void)
 *
 *  Returns:  
 *      LPDIRECTSOUNDDEVICE: selected device, or NULL.
 *
 ***************************************************************************/

LPDIRECTSOUNDDEVICE 
CDsMgrWindow::GetSelectedDevice(INT iItem)
{
    HWND                    hWndLv  = GetDlgItem(m_hWnd, IDC_DEVICELIST);
    LPDIRECTSOUNDDEVICE     pDevice;
    LV_ITEM                 lvi;
    BOOL                    f;

    if(-1 == iItem)
    {
        iItem = ListView_GetNextItem(hWndLv, iItem, LVNI_SELECTED);
    }
    
    lvi.mask = LVIF_PARAM;
    lvi.iItem = iItem;
    
    f = ListView_GetItem(hWndLv, &lvi);

    if(f)
    {
        pDevice = (LPDIRECTSOUNDDEVICE)lvi.lParam;
    }

    return pDevice;
}


/***************************************************************************
 *
 *  GetDeviceProperties
 *
 *  Description:
 *      Gets properties for a given DirectSound device.
 *
 *  Arguments:
 *      LPDIRECTSOUNDDEVICE [in/out]: pointer to device properties.  The
 *                                    DeviceId member of the description 
 *                                    must be filled in.
 *
 *  Returns:  
 *      BOOL: TRUE on success.
 *
 ***************************************************************************/

BOOL
CDsMgrWindow::GetDeviceProperties
(
    LPDIRECTSOUNDDEVICE                             pDevice
)
{
    PDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_DATA  pDescription    = NULL;
    HRESULT                                         hr;

    // Get device description
    hr = PrvGetDeviceDescription(m_pDsPrivate, pDevice->Description.DeviceId, &pDescription);

    if(FAILED(hr))
    {
        DPF("Unable to get device description");
    }

    if(SUCCEEDED(hr))
    {
        pDevice->Description.Type = pDescription->Type;
        pDevice->Description.DataFlow = pDescription->DataFlow;
        
        lstrcpyn(pDevice->Description.Description, pDescription->Description, sizeof(pDevice->Description.Description));
        lstrcpyn(pDevice->Description.Module, pDescription->Module, sizeof(pDevice->Description.Module));
        lstrcpyn(pDevice->Description.Interface, pDescription->Interface, sizeof(pDevice->Description.Interface));

        pDevice->Description.WaveDeviceId = pDescription->WaveDeviceId;

        delete pDescription;
    }

    // Get mixer SRC quality
    if(SUCCEEDED(hr))
    {
        hr = PrvGetMixerSrcQuality(m_pDsPrivate, pDevice->Description.DeviceId, &pDevice->pSharedData->SrcQuality);
        
        if(FAILED(hr))
        {
            DPF("Can't get mixer SRC quality");
        }
    }

    // Get mixer acceleration
    if(SUCCEEDED(hr))
    {
        hr = PrvGetMixerAcceleration(m_pDsPrivate, pDevice->Description.DeviceId, &pDevice->pSharedData->Acceleration);

        if(FAILED(hr))
        {
            DPF("Can't get mixer acceleration");
        }
    }

    // Get device presence
    if(SUCCEEDED(hr))
    {
        hr = PrvGetDevicePresence(m_pDsPrivate, pDevice->Description.DeviceId, &pDevice->Presence);

        if(FAILED(hr))
        {
            DPF("Can't get device presence");
        }
    }

    return SUCCEEDED(hr);
}


/***************************************************************************
 *
 *  SetDeviceProperties
 *
 *  Description:
 *      Sets properties for a given DirectSound device.
 *
 *  Arguments:
 *      LPDIRECTSOUNDDEVICE [in]: pointer to device properties.
 *
 *  Returns:  
 *      BOOL: TRUE on success.
 *
 ***************************************************************************/

BOOL
CDsMgrWindow::SetDeviceProperties
(
    LPCDIRECTSOUNDDEVICE    pDevice
)
{
    HRESULT                 hr;

    // Set mixer SRC quality
    hr = PrvSetMixerSrcQuality(m_pDsPrivate, pDevice->Description.DeviceId, pDevice->pSharedData->SrcQuality);
    
    if(FAILED(hr))
    {
        DPF("Can't set mixer SRC quality");
    }

    // Set mixer acceleration
    if(SUCCEEDED(hr))
    {
        hr = PrvSetMixerAcceleration(m_pDsPrivate, pDevice->Description.DeviceId, pDevice->pSharedData->Acceleration);

        if(FAILED(hr))
        {
            DPF("Can't set mixer acceleration");
        }
    }

    // Set device presence
    if(SUCCEEDED(hr))
    {
        hr = PrvSetDevicePresence(m_pDsPrivate, pDevice->Description.DeviceId, pDevice->Presence);

        if(FAILED(hr))
        {
            DPF("Can't set device presence");
        }
    }

    return SUCCEEDED(hr);
}


/***************************************************************************
 *
 *  UpdateUiFromDevice
 *
 *  Description:
 *      Updates the UI from the current device settings.
 *
 *  Arguments:
 *      LPCDIRECTSOUNDDEVICE [in]: currently selected device, or NULL.
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

void 
CDsMgrWindow::UpdateUiFromDevice
(
    LPCDIRECTSOUNDDEVICE    pDevice
)
{
    const BOOL              fEnable = MAKEBOOL(pDevice);
    UINT                    i;
    
    static const UINT auCtrls[] = 
    { 
        IDC_MIXER_SRCQUALITY, 
        IDC_ACCELERATION_HARDWAREBUFFERS, 
        IDC_ACCELERATION_HARDWARE3D, 
        IDC_ACCELERATION_RING0MIX, 
        IDC_ACCELERATION_HARDWAREPROPERTYSETS, 
        IDC_DEVICEPRESENCE, 
        IDC_RESETDEVICE,
    };

    // Enable/disable controls
    for(i = 0; i < sizeof(auCtrls) / sizeof(auCtrls[0]); i++)
    {
        EnableWindow(GetDlgItem(m_hWnd, auCtrls[i]), fEnable);
    }

    // Set control values
    if(pDevice)
    {
        ComboBox_SetCurSel(GetDlgItem(m_hWnd, IDC_MIXER_SRCQUALITY), pDevice->pSharedData->SrcQuality);
        Button_SetCheck(GetDlgItem(m_hWnd, IDC_ACCELERATION_HARDWAREBUFFERS), !(pDevice->pSharedData->Acceleration & DIRECTSOUNDMIXER_ACCELERATIONF_NOHWBUFFERS));
        Button_SetCheck(GetDlgItem(m_hWnd, IDC_ACCELERATION_HARDWARE3D), !(pDevice->pSharedData->Acceleration & DIRECTSOUNDMIXER_ACCELERATIONF_NOHW3D));
        Button_SetCheck(GetDlgItem(m_hWnd, IDC_ACCELERATION_RING0MIX), !(pDevice->pSharedData->Acceleration & DIRECTSOUNDMIXER_ACCELERATIONF_NORING0MIX));
        Button_SetCheck(GetDlgItem(m_hWnd, IDC_ACCELERATION_HARDWAREPROPERTYSETS), !(pDevice->pSharedData->Acceleration & DIRECTSOUNDMIXER_ACCELERATIONF_NOHWPROPSETS));
        Button_SetCheck(GetDlgItem(m_hWnd, IDC_DEVICEPRESENCE), pDevice->Presence);
    }
}


/***************************************************************************
 *
 *  UpdateDeviceFromUi
 *
 *  Description:
 *      Updates a device's properties from the current UI settings.
 *
 *  Arguments:
 *      LPDIRECTSOUNDDEVICE [out]: currently selected device.
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

void 
CDsMgrWindow::UpdateDeviceFromUi
(
    LPDIRECTSOUNDDEVICE     pDevice
)
{
    BOOL                    f;
    
    // Get control values
    pDevice->pSharedData->SrcQuality = (DIRECTSOUNDMIXER_SRCQUALITY)ComboBox_GetCurSel(GetDlgItem(m_hWnd, IDC_MIXER_SRCQUALITY));
    pDevice->pSharedData->Acceleration = 0;

    f = Button_GetCheck(GetDlgItem(m_hWnd, IDC_ACCELERATION_HARDWAREBUFFERS));

    if(!f)
    {
        pDevice->pSharedData->Acceleration |= DIRECTSOUNDMIXER_ACCELERATIONF_NOHWBUFFERS;
    }

    f = Button_GetCheck(GetDlgItem(m_hWnd, IDC_ACCELERATION_HARDWARE3D));

    if(!f)
    {
        pDevice->pSharedData->Acceleration |= DIRECTSOUNDMIXER_ACCELERATIONF_NOHW3D;
    }

    f = Button_GetCheck(GetDlgItem(m_hWnd, IDC_ACCELERATION_RING0MIX));

    if(!f)
    {
        pDevice->pSharedData->Acceleration |= DIRECTSOUNDMIXER_ACCELERATIONF_NORING0MIX;
    }

    f = Button_GetCheck(GetDlgItem(m_hWnd, IDC_ACCELERATION_HARDWAREPROPERTYSETS));

    if(!f)
    {
        pDevice->pSharedData->Acceleration |= DIRECTSOUNDMIXER_ACCELERATIONF_NOHWPROPSETS;
    }

    pDevice->Presence = Button_GetCheck(GetDlgItem(m_hWnd, IDC_DEVICEPRESENCE));
}


/***************************************************************************
 *
 *  GetDebugProperties
 *
 *  Description:
 *      Gets debug propertes for DirectSound.
 *
 *  Arguments:
 *      PDSPROPERTY_DIRECTSOUNDDEBUG_DPFINFO_DATA [out]: receives debug
 *                                                       settings.
 *
 *  Returns:  
 *      BOOL: TRUE on success.
 *
 ***************************************************************************/

BOOL
CDsMgrWindow::GetDebugProperties
(
    PDSPROPERTY_DIRECTSOUNDDEBUG_DPFINFO_DATA   pDebug
)
{
    HRESULT                                     hr;

    hr = PrvGetDebugInformation(m_pDsPrivate, &pDebug->Flags, &pDebug->DpfLevel, &pDebug->BreakLevel, pDebug->LogFile);

    if(FAILED(hr))
    {
        DPF("Can't get debug settings");
    }

    return SUCCEEDED(hr);
}


/***************************************************************************
 *
 *  SetDebugProperties
 *
 *  Description:
 *      Sets debug properties for DirectSound.
 *
 *  Arguments:
 *      const DSPROPERTY_DIRECTSOUNDDEBUG_DPFINFO_DATA * [in]: debug 
 *                                                             settings.
 *
 *  Returns:  
 *      BOOL: TRUE on success.
 *
 ***************************************************************************/

BOOL
CDsMgrWindow::SetDebugProperties
(
    const DSPROPERTY_DIRECTSOUNDDEBUG_DPFINFO_DATA *    pDebug
)
{
    HRESULT                                     hr;

    hr = PrvSetDebugInformation(m_pDsPrivate, pDebug->Flags, pDebug->DpfLevel, pDebug->BreakLevel, pDebug->LogFile);

    if(FAILED(hr))
    {
        DPF("Can't set debug settings");
    }

    return SUCCEEDED(hr);
}


/***************************************************************************
 *
 *  UpdateUiFromDebug
 *
 *  Description:
 *      Updates the UI from the current debug settings.
 *
 *  Arguments:
 *      const DSPROPERTY_DIRECTSOUNDDEBUG_DPFINFO_DATA * [in]: current
 *                                                             debug 
 *                                                             settings.
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

void 
CDsMgrWindow::UpdateUiFromDebug
(
    const DSPROPERTY_DIRECTSOUNDDEBUG_DPFINFO_DATA *    pDebug
)
{
    Button_SetCheck(GetDlgItem(m_hWnd, IDC_DEBUG_PRINTFUNCTIONNAME), MAKEBOOL(pDebug->Flags & DIRECTSOUNDDEBUG_DPFINFOF_PRINTFUNCTIONNAME));
    Button_SetCheck(GetDlgItem(m_hWnd, IDC_DEBUG_PRINTPROCESSTHREADID), MAKEBOOL(pDebug->Flags & DIRECTSOUNDDEBUG_DPFINFOF_PRINTPROCESSTHREADID));
    Button_SetCheck(GetDlgItem(m_hWnd, IDC_DEBUG_PRINTFILELINE), MAKEBOOL(pDebug->Flags & DIRECTSOUNDDEBUG_DPFINFOF_PRINTFILELINE));

    SendMessage(GetDlgItem(m_hWnd, IDC_DEBUG_DPFLEVEL_SPIN), UDM_SETPOS, 0, MAKELONG(pDebug->DpfLevel, 0));
    SendMessage(GetDlgItem(m_hWnd, IDC_DEBUG_BREAKLEVEL_SPIN), UDM_SETPOS, 0, MAKELONG(pDebug->BreakLevel, 0));

    Edit_SetText(GetDlgItem(m_hWnd, IDC_DEBUG_LOGFILE), pDebug->LogFile);
}


/***************************************************************************
 *
 *  UpdateDebugFromUi
 *
 *  Description:
 *      Updates debug properties from the current UI settings.
 *
 *  Arguments:
 *      PDSPROPERTY_DIRECTSOUNDDEBUG_DPFINFO_DATA [out]: receives debug
 *                                                       settings.
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

void 
CDsMgrWindow::UpdateDebugFromUi
(
    PDSPROPERTY_DIRECTSOUNDDEBUG_DPFINFO_DATA   pDebug
)
{
    BOOL                                        f;

    pDebug->Flags = 0;
    
    f = Button_GetCheck(GetDlgItem(m_hWnd, IDC_DEBUG_PRINTFUNCTIONNAME));

    if(f)
    {
        pDebug->Flags |= DIRECTSOUNDDEBUG_DPFINFOF_PRINTFUNCTIONNAME;
    }

    f = Button_GetCheck(GetDlgItem(m_hWnd, IDC_DEBUG_PRINTPROCESSTHREADID));

    if(f)
    {
        pDebug->Flags |= DIRECTSOUNDDEBUG_DPFINFOF_PRINTPROCESSTHREADID;
    }

    f = Button_GetCheck(GetDlgItem(m_hWnd, IDC_DEBUG_PRINTFILELINE));

    if(f)
    {
        pDebug->Flags |= DIRECTSOUNDDEBUG_DPFINFOF_PRINTFILELINE;
    }

    pDebug->DpfLevel = SendDlgItemMessage(m_hWnd, IDC_DEBUG_DPFLEVEL_SPIN, UDM_GETPOS, 0, 0);
    pDebug->BreakLevel = SendDlgItemMessage(m_hWnd, IDC_DEBUG_BREAKLEVEL_SPIN, UDM_GETPOS, 0, 0);

    Edit_GetText(GetDlgItem(m_hWnd, IDC_DEBUG_LOGFILE), pDebug->LogFile, sizeof(pDebug->LogFile));
}


/***************************************************************************
 *
 *  GuidToString
 *
 *  Description:
 *      Converts a GUID to a string.
 *
 *  Arguments:
 *      REFGUID [in]: GUID.
 *      LPSTR [out]: receives string.
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

void 
CDsMgrWindow::GuidToString
(
    REFGUID                 guid,
    LPSTR                   pszString
)
{
    const LPCSTR            pszTemplate = "%8.8lX-%4.4X-%4.4X-%2.2X%2.2X-%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X";

    wsprintf(pszString, pszTemplate, guid.Data1, guid.Data2, guid.Data3, guid.Data4[0], guid.Data4[1], guid.Data4[2], guid.Data4[3], guid.Data4[4], guid.Data4[5], guid.Data4[6], guid.Data4[7]);
}


/***************************************************************************
 *
 *  StringToGuid
 *
 *  Description:
 *      Converts a string to a GUID.
 *
 *  Arguments:
 *      LPCSTR [in]: string.
 *      LPGUID [out]: receives GUID.
 *
 *  Returns:  
 *      (void)
 *
 ***************************************************************************/

void 
CDsMgrWindow::StringToGuid
(
    LPCSTR                  pszString,
    LPGUID                  pguid
)
{
    CHAR                    aszGuid[4][9];
    DWORD                   dwValues[4];

    CopyMemory(&aszGuid[0][0], pszString, 8);
    pszString += 9;

    CopyMemory(&aszGuid[1][0], pszString, 4);
    pszString += 5;

    CopyMemory(&aszGuid[1][4], pszString, 4);
    pszString += 5;

    CopyMemory(&aszGuid[2][0], pszString, 4);
    pszString += 5;

    CopyMemory(&aszGuid[2][4], pszString, 4);
    pszString += 4;

    CopyMemory(&aszGuid[3][0], pszString, 8);

    aszGuid[0][8] = 0;
    aszGuid[1][8] = 0;
    aszGuid[2][8] = 0;
    aszGuid[3][8] = 0;

    dwValues[0] = atoi(aszGuid[0]);
    dwValues[1] = atoi(aszGuid[1]);
    dwValues[2] = atoi(aszGuid[2]);
    dwValues[3] = atoi(aszGuid[3]);

    CopyMemory(pguid, dwValues, sizeof(GUID));
}


/***************************************************************************
 *
 *  atoi
 *
 *  Description:
 *      Converts a string to an integer.
 *
 *  Arguments:
 *      LPCSTR [in]: string.
 *
 *  Returns:  
 *      INT: integer value.
 *
 ***************************************************************************/

INT
CDsMgrWindow::atoi
(
    LPCSTR                  pszString
)
{
    INT                     nResult = 0;
    INT                     nValue;

    while(TRUE)
    {
        if(*pszString >= '0' && *pszString <= '9')
        {
            nValue = *pszString - '0';
        }
        else if(*pszString >= 'a' && *pszString <= 'f')
        {
            nValue = *pszString - 'a' + 10;
        }
        else if(*pszString >= 'A' && *pszString <= 'F')
        {
            nValue = *pszString - 'A' + 10;
        }
        else
        {
            break;
        }
        
        nResult <<= 4;
        nResult += nValue;

        pszString++;
    }

    return nResult;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\directx\dsound\dsound3d\sources.inc ===
#############################################################################
# Copyright (C) Microsoft Corporation 2000
#############################################################################

!include ..\..\dsound\sources.inc

!ifndef DSROOT
DSROOT=$(DXROOT)\dsound
!endif

TARGETNAME = dsound3d

C_DEFINES = $(C_DEFINES) -DBUILD_LUT -DNOKS

USER_C_FLAGS = $(USER_C_FLAGS) /Zm800

INCLUDES = $(INCLUDES);$(DSROOT)\dsound

SOURCES = dsound3d.rc vmaxcoef.cpp
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\directx\dsound\dsound3d\win9x\makefile.inc ===
misc: ..\vmaxcoef.cpp

..\vmaxcoef.cpp: ..\..\dsound\vmaxcoef.cpp
                 copy ..\..\dsound\vmaxcoef.cpp ..\
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\directx\dsound\dsound3d\daytona\makefile.inc ===
misc: ..\vmaxcoef.cpp

..\vmaxcoef.cpp: ..\..\dsound\vmaxcoef.cpp
                 copy ..\..\dsound\vmaxcoef.cpp ..\
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\directx\dsound\dsvxd\dsvxd.h ===
#define DSVXD_IOCTL_INITIALIZE			1
#define DSVXD_IOCTL_SHUTDOWN			2

#define DSVXD_IOCTL_DRVGETNEXTDRIVERDESC	3
#define DSVXD_IOCTL_DRVGETDESC			4
#define DSVXD_IOCTL_DRVQUERYINTERFACE		5
#define DSVXD_IOCTL_DRVOPEN			6

#define DSVXD_IOCTL_DRVCLOSE			7
#define DSVXD_IOCTL_DRVGETCAPS			8
#define DSVXD_IOCTL_DRVCREATESOUNDBUFFER	9
#define DSVXD_IOCTL_DRVDUPLICATESOUNDBUFFER	10

#define DSVXD_IOCTL_BUFFERRELEASE		11
#define DSVXD_IOCTL_BUFFERLOCK			12
#define DSVXD_IOCTL_BUFFERUNLOCK		13
#define DSVXD_IOCTL_BUFFERSETFORMAT		14
#define DSVXD_IOCTL_BUFFERSETRATE		15
#define DSVXD_IOCTL_BUFFERSETVOLUMEPAN		16
#define DSVXD_IOCTL_BUFFERSETPOSITION		17
#define DSVXD_IOCTL_BUFFERGETPOSITION		18
#define DSVXD_IOCTL_BUFFERPLAY			19 
#define DSVXD_IOCTL_BUFFERSTOP			20

#define DSVXD_IOCTL_EVENTSCHEDULEWIN32EVENT	21
#define DSVXD_IOCTL_EVENTCLOSEVXDHANDLE		22

#define DSVXD_IOCTL_MEMRESERVEALIAS		23
#define DSVXD_IOCTL_MEMCOMMITALIAS		24
#define DSVXD_IOCTL_MEMREDIRECTALIAS		25
#define DSVXD_IOCTL_MEMDECOMMITALIAS		26
#define DSVXD_IOCTL_MEMFREEALIAS		27

#define DSVXD_IOCTL_MEMPAGELOCK			28
#define DSVXD_IOCTL_MEMPAGEUNLOCK		29

#define DSVXD_IOCTL_PageFile_Get_Version	30
#define DSVXD_IOCTL_VMM_Test_Debug_Installed	31
#define DSVXD_IOCTL_VMCPD_Get_Version		32

#define DSVXD_IOCTL_GetMixerMutexPtr		33

#define DSVXD_IOCTL_Mixer_Run			34
#define DSVXD_IOCTL_Mixer_Stop			35
#define DSVXD_IOCTL_Mixer_PlayWhenIdle		36
#define DSVXD_IOCTL_Mixer_StopWhenIdle		37
#define DSVXD_IOCTL_Mixer_MixListAdd		38
#define DSVXD_IOCTL_Mixer_MixListRemove		39
#define DSVXD_IOCTL_Mixer_FilterOn		40
#define DSVXD_IOCTL_Mixer_FilterOff		41
#define DSVXD_IOCTL_Mixer_GetBytePosition	42
#define DSVXD_IOCTL_Mixer_SignalRemix		43 

#define DSVXD_IOCTL_KeDest_New			44
#define DSVXD_IOCTL_MixDest_Delete		45
#define DSVXD_IOCTL_MixDest_Initialize		46
#define DSVXD_IOCTL_MixDest_Terminate		47
#define DSVXD_IOCTL_MixDest_SetFormat		48
#define DSVXD_IOCTL_MixDest_SetFormatInfo	49
#define DSVXD_IOCTL_MixDest_AllocMixer		50
#define DSVXD_IOCTL_MixDest_FreeMixer		51
#define DSVXD_IOCTL_MixDest_Play		52
#define DSVXD_IOCTL_MixDest_Stop		53
#define DSVXD_IOCTL_MixDest_GetFrequency	54

#define DSVXD_IOCTL_MEMCOMMITPHYSALIAS          55
#define DSVXD_IOCTL_MEMREDIRECTPHYSALIAS        56


#define DSVXD_IOCTL_IUnknown_QueryInterface			57
#define DSVXD_IOCTL_IUnknown_AddRef				58
#define DSVXD_IOCTL_IUnknown_Release				59

#define DSVXD_IOCTL_IDirectSoundPropertySet_GetProperty		60
#define DSVXD_IOCTL_IDirectSoundPropertySet_SetProperty		61
#define DSVXD_IOCTL_IDirectSoundPropertySet_QuerySupport	62

#define DSVXD_IOCTL_GetInternalVersionNumber   63
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\directx\dsound\dsvxd\dev.cpp ===
//--------------------------------------------------------------------------;
//
//  File: dev.cpp
//
//  Copyright (c) 1995-1997 Microsoft Corporation.  All Rights Reserved.
//
//  Abstract:
//  Contains program related to managing the direct sound drivers and
//  driver list.
//
//  Contents:
//
//  History:
//      06/15/95    FrankYe
//
//--------------------------------------------------------------------------;
#define WANTVXDWRAPS

#include <windows.h>

extern "C"
{
    #include <vmm.h>
    #include <vxdldr.h>
    #include <vwin32.h>
    #include <vxdwraps.h>
    #include <configmg.h>
}

#define NODSOUNDWRAPS
#include <mmsystem.h>
#include <dsound.h>
#include <dsdrvi.h>
#include "dsvxd.h"
#include "dsvxdi.h"

#pragma warning(disable:4355) // 'this' : used in base member initializer list

#pragma VxD_PAGEABLE_CODE_SEG
#pragma VxD_PAGEABLE_DATA_SEG

VMMLIST gvmmlistDrivers = 0;

//==========================================================================;
//
//  guid functions
//  guidAlloc: gets guid from guid pool and returns pointer to it
//  guidFree: returns guid to guid pool
//
//==========================================================================;

//--------------------------------------------------------------------------;
//
//
//--------------------------------------------------------------------------;
// TODO need more static guids.  this is enough for now
GUID guidList[] = {
  { /* 3d0b92c0-abfc-11ce-a3b3-00aa004a9f0c */
    0x3d0b92c0,
    0xabfc,
    0x11ce,
    {0xa3, 0xb3, 0x00, 0xaa, 0x00, 0x4a, 0x9f, 0x0c}
  },
  { /* 3d0b92c1-abfc-11ce-a3b3-00aa004a9f0c */
    0x3d0b92c1,
    0xabfc,
    0x11ce,
    {0xa3, 0xb3, 0x00, 0xaa, 0x00, 0x4a, 0x9f, 0x0c}
  },
  { /* 3d0b92c2-abfc-11ce-a3b3-00aa004a9f0c */
    0x3d0b92c2,
    0xabfc,
    0x11ce,
    {0xa3, 0xb3, 0x00, 0xaa, 0x00, 0x4a, 0x9f, 0x0c}
  },
  { /* 3d0b92c3-abfc-11ce-a3b3-00aa004a9f0c */
    0x3d0b92c3,
    0xabfc,
    0x11ce,
    {0xa3, 0xb3, 0x00, 0xaa, 0x00, 0x4a, 0x9f, 0x0c}
  },
  { /* 3d0b92c4-abfc-11ce-a3b3-00aa004a9f0c */
    0x3d0b92c4,
    0xabfc,
    0x11ce,
    {0xa3, 0xb3, 0x00, 0xaa, 0x00, 0x4a, 0x9f, 0x0c}
  },
  { /* 3d0b92c5-abfc-11ce-a3b3-00aa004a9f0c */
    0x3d0b92c5,
    0xabfc,
    0x11ce,
    {0xa3, 0xb3, 0x00, 0xaa, 0x00, 0x4a, 0x9f, 0x0c}
  },
  { /* 3d0b92c6-abfc-11ce-a3b3-00aa004a9f0c */
    0x3d0b92c6,
    0xabfc,
    0x11ce,
    {0xa3, 0xb3, 0x00, 0xaa, 0x00, 0x4a, 0x9f, 0x0c}
  },
  { /* 3d0b92c7-abfc-11ce-a3b3-00aa004a9f0c */
    0x3d0b92c7,
    0xabfc,
    0x11ce,
    {0xa3, 0xb3, 0x00, 0xaa, 0x00, 0x4a, 0x9f, 0x0c}
  },
  { /* 3d0b92c8-abfc-11ce-a3b3-00aa004a9f0c */
    0x3d0b92c8,
    0xabfc,
    0x11ce,
    {0xa3, 0xb3, 0x00, 0xaa, 0x00, 0x4a, 0x9f, 0x0c}
  },
  { /* 3d0b92c9-abfc-11ce-a3b3-00aa004a9f0c */
    0x3d0b92c9,
    0xabfc,
    0x11ce,
    {0xa3, 0xb3, 0x00, 0xaa, 0x00, 0x4a, 0x9f, 0x0c}
  }
};

#define NUMGUIDS (sizeof(guidList) / sizeof(guidList[0]))
typedef struct tGUIDRECORD {
    LPCGUID pGuid;
    BOOL    fAlloc;
    UINT    uAge;
} GUIDRECORD, *PGUIDRECORD;

PGUIDRECORD gpaGuidRec;

REFGUID GuidAlloc()
{
    PGUIDRECORD pGuidRec;
    PGUIDRECORD pGuidRecOldest;
    UINT uAgeOldest;
    int i;

    pGuidRecOldest = NULL;
    uAgeOldest = 0;

    for (i=0; i<NUMGUIDS; i++) {
        pGuidRec = &gpaGuidRec[i];

        if (pGuidRec->fAlloc) continue;

        if (pGuidRec->uAge++ >= uAgeOldest) {
            pGuidRecOldest = pGuidRec;
            uAgeOldest = pGuidRec->uAge;
        }
    }

    if (NULL == pGuidRecOldest) {
        BREAK(("Ran out of guids"));
        return GUID_NULL;
    } else {
        pGuidRecOldest->fAlloc = TRUE;
        return *(pGuidRecOldest->pGuid);
    }
}

void GuidFree(REFGUID rGuid)
{
    PGUIDRECORD pGuidRecMatch;
    int i;

    pGuidRecMatch = NULL;
    for (i=0; i<NUMGUIDS; i++) {
        if (IsEqualGUID(*gpaGuidRec[i].pGuid, rGuid)) {
            //
            // For debug, we go thru all guid records and assert if
            // we match on more than just one.  For retail, we break
            // the loop as soon as we match one.
            //
#ifdef DEBUG
            if (pGuidRecMatch != NULL) ASSERT(FALSE);
            pGuidRecMatch = &gpaGuidRec[i];
#else
            pGuidRecMatch = &gpaGuidRec[i];
            break;
#endif
        }
    }

    ASSERT(NULL != pGuidRecMatch);
    if (NULL == pGuidRecMatch) return;  // defensive

    pGuidRecMatch->fAlloc = FALSE;
    pGuidRecMatch->uAge = 0;

    return;
}

//==========================================================================;
//==========================================================================;
//
//  CBuf_IDsDriverPropertySet class implementation
//
//==========================================================================;
//==========================================================================;

//--------------------------------------------------------------------------;
//
// Constructor
//
//--------------------------------------------------------------------------;
CBuf_IDsDriverPropertySet::CBuf_IDsDriverPropertySet(CBuf *pBuf)
{
    m_cRef = 0;
    m_pBuf = pBuf;
    return;
}

//--------------------------------------------------------------------------;
//
// QueryInterface - delegates to CBuf
//
//--------------------------------------------------------------------------;
STDMETHODIMP CBuf_IDsDriverPropertySet::QueryInterface(REFIID riid, PVOID *ppv)
{
    return m_pBuf->QueryInterface(riid, ppv);
}

//--------------------------------------------------------------------------;
//
// AddRef
//  Maintains interface ref count, and delegates to CBuf to maintain
// total object ref count.
//
//--------------------------------------------------------------------------;
STDMETHODIMP_(ULONG) CBuf_IDsDriverPropertySet::AddRef(void)
{
    ASSERT(m_cRef >= 0);
    m_cRef++;
    m_pBuf->AddRef();
    return m_cRef;
}

//--------------------------------------------------------------------------;
//
// Release
//  Maintains interface ref count.  When interface ref count goes to 0
// then release the real driver's IDsDriverPropertySet interface.  Also,
// delegate to CBuf in order to maintain total object ref count
//
//--------------------------------------------------------------------------;
STDMETHODIMP_(ULONG) CBuf_IDsDriverPropertySet::Release(void)
{
    ASSERT(m_cRef > 0);

    if (--m_cRef > 0) {
        m_pBuf->Release();
        return m_cRef;
    }

    m_pBuf->m_pIDsDriverPropertySet_Real->Release();
    m_pBuf->m_pIDsDriverPropertySet_Real = NULL;
    m_pBuf->Release();
    return 0;
}

//--------------------------------------------------------------------------;
//
// Get, Set, QuerySupport
//  If CBuf hasn't been deregistered, call real driver's
// IDsDriverPropertySet interface
//
//--------------------------------------------------------------------------;
STDMETHODIMP CBuf_IDsDriverPropertySet::Get(PDSPROPERTY pDsProperty,
                                            PVOID pPropertyParams,
                                            ULONG cbPropertyParams,
                                            PVOID pPropertyData,
                                            ULONG cbPropertyData,
                                            PULONG pcbReturnedData)
{
    if (m_pBuf->m_fDeregistered) return DSERR_NODRIVER;
    return m_pBuf->m_pIDsDriverPropertySet_Real->Get(pDsProperty, pPropertyParams,
        cbPropertyParams, pPropertyData, cbPropertyData, pcbReturnedData);
}

STDMETHODIMP CBuf_IDsDriverPropertySet::Set(PDSPROPERTY pDsProperty,
                                            PVOID pPropertyParams,
                                            ULONG cbPropertyParams,
                                            PVOID pPropertyData,
                                            ULONG cbPropertyData)
{
    if (m_pBuf->m_fDeregistered) return DSERR_NODRIVER;
    return m_pBuf->m_pIDsDriverPropertySet_Real->Set(pDsProperty, pPropertyParams, cbPropertyParams, pPropertyData, cbPropertyData);
}

STDMETHODIMP CBuf_IDsDriverPropertySet::QuerySupport(REFGUID PropertySetId,
                                                     ULONG PropertyId,
                                                     PULONG pSupport)
{
    if (m_pBuf->m_fDeregistered) return DSERR_NODRIVER;
    return m_pBuf->m_pIDsDriverPropertySet_Real->QuerySupport(PropertySetId, PropertyId, pSupport);
}

//==========================================================================;
//==========================================================================;
//
//  CBuf class implementation
//
//==========================================================================;
//==========================================================================;

//--------------------------------------------------------------------------;
//
// CBuf new and delete operators
//
//  We allocate these objects as nodes on a VMMLIST.  New takes a VMMLIST
// as a parameter.  We bump the size of the allocation enough to store the
// VMMLIST handle at the end of the object.  The Delete operator gets the
// VMMLIST handle from the end of the storage that was allocated for the
// object, and uses that hande to deallocate the list node.  The objects
// are also attached to and removed from the list as they are created and
// deleted.
//
//--------------------------------------------------------------------------;
//--------------------------------------------------------------------------;
//
//
//
//--------------------------------------------------------------------------;
void* CBuf::operator new(size_t size, VMMLIST list)
{
    PVOID pv;

    pv = List_Allocate(list);
    if (pv) {
        memset(pv, 0x00, size);
        *(VMMLIST*)((PBYTE)pv + size) = list;
        List_Attach_Tail(list, pv);
    }
    return pv;
}

//--------------------------------------------------------------------------;
//
//
//
//--------------------------------------------------------------------------;
void CBuf::operator delete(void * pv, size_t size)
{
    VMMLIST list;

    list = *(VMMLIST*)((PBYTE)pv + size);
    ASSERT(list);
    List_Remove(list, pv);
    List_Deallocate(list, pv);
}

//--------------------------------------------------------------------------;
//
// Constructor
//  Initializes its contained CBuf_IDsDriverPropertySet interface
// implementation.
//
//--------------------------------------------------------------------------;
CBuf::CBuf(void)
 : m_IDsDriverPropertySet(this)
{
    return;
}

//--------------------------------------------------------------------------;
//
// CreateList
//  Static class method.  It simpley creates a VMMLIST
// to be used to create/delete CBuf objects.
//
//--------------------------------------------------------------------------;
VMMLIST CBuf::CreateList(void)
{
    return List_Create(LF_ALLOC_ERROR, sizeof(CBuf) + sizeof(VMMLIST));
}

//--------------------------------------------------------------------------;
//
// DeleteList
//  Static class method.  Destroys a VMMLIST that was used to
// create/destroy CBuf objects.
//
//--------------------------------------------------------------------------;
void CBuf::DestroyList(VMMLIST list)
{
    ASSERT(!List_Get_First(list));
    List_Destroy(list);
}

//--------------------------------------------------------------------------;
//
// CreateBuf
//  Static class method.  Creates a CBuf object given the creating CDrv
// object, the VMMLIST to be used to create the CBuf, and a pointer to the
// IDsDriverBuffer interface on the real driver buffer to be contained by
// the CBuf object.
//
//--------------------------------------------------------------------------;

HRESULT CBuf::CreateBuf(CDrv *pDrv, VMMLIST list, IDsDriverBuffer *pIDsDriverBuffer_Real, IDsDriverBuffer **ppIDsDriverBuffer)
{
    CBuf *pBuf;

    *ppIDsDriverBuffer = NULL;

    pBuf = new(list) CBuf;
    if (!pBuf) return E_OUTOFMEMORY;

    pBuf->m_pDrv = pDrv;
    pBuf->m_pIDsDriverBuffer_Real = pIDsDriverBuffer_Real;
    pBuf->AddRef();

    *ppIDsDriverBuffer = (IDsDriverBuffer*)pBuf;

    return S_OK;
}

//--------------------------------------------------------------------------;
//
// DeregisterBuffers
//  Static class method.  Given a VMMLIST containing CBuf objects, this method
// walks the list marking each of the CBuf objects as deregistered.
//
//--------------------------------------------------------------------------;
void CBuf::DeregisterBuffers(VMMLIST list)
{
    CBuf *pBuf;

    for ( pBuf = (CBuf*)List_Get_First(list);
          pBuf;
          pBuf = (CBuf*)List_Get_Next(list, pBuf) )
    {
        pBuf->m_fDeregistered = TRUE;
    }

    return;
}

//--------------------------------------------------------------------------;
//
// QueryInterface
//  When querying for IUnknown or IDsDriverBuffer, just return this
// object.  If querying for IDsDriverPropertySet, then we need to query
// the real driver buffer for this interface, if we haven't already.
//
//--------------------------------------------------------------------------;
STDMETHODIMP CBuf::QueryInterface(REFIID riid, LPVOID *ppv)
{
    HRESULT hr;
    *ppv = NULL;

    if (IID_IUnknown == riid || IID_IDsDriverBuffer == riid) {

        *ppv = (IDsDriverBuffer*)this;

    } else if (IID_IDsDriverPropertySet == riid) {

        if (!m_pIDsDriverPropertySet_Real) {
            // don't have the interface from the driver so try to get it
            hr = m_pIDsDriverBuffer_Real->QueryInterface(riid, (PVOID*)&m_pIDsDriverPropertySet_Real);
            if (FAILED(hr) && m_pIDsDriverPropertySet_Real) {
                // TODO: RPF(Driver is stupic cuz it failed QI but set *ppv)
                m_pIDsDriverPropertySet_Real = NULL;
            }
        }
        if (m_pIDsDriverPropertySet_Real) {
            *ppv = &m_IDsDriverPropertySet;
        }
    }

    if (NULL == *ppv) return E_NOINTERFACE;
    ((LPUNKNOWN)*ppv)->AddRef();
    return S_OK;
}

//--------------------------------------------------------------------------;
//
// AddRef
//
//--------------------------------------------------------------------------;
STDMETHODIMP_(ULONG) CBuf::AddRef(void)
{
    m_cRef++;
    m_pDrv->AddRef();
    return m_cRef;
}

//--------------------------------------------------------------------------;
//
// Release
//  When the ref count goes to zero, then we release the real driver
// buffer's IDsDriverBuffer interface.  We always release the CDrv object
// that created this CBuf, too, since we the CDrv lifetime brackets the
// CBuf lifetime.
//
//--------------------------------------------------------------------------;
STDMETHODIMP_(ULONG) CBuf::Release(void)
{
    CDrv *pDrv;

    pDrv = m_pDrv;

    m_cRef--;
    if (0 == m_cRef) {
        DRVCALL(("IDsDriverBuffer(%008X)->Release()", m_pIDsDriverBuffer_Real));
        m_pIDsDriverBuffer_Real->Release();
        delete this;
        pDrv->Release();
        return 0;
    }

    pDrv->Release();
    return m_cRef;
}

//--------------------------------------------------------------------------;
//
// IDsDriverBuffer methods
//  Return error if the real driver has deregistered, otherwise
// call the real driver's buffer's interface
//
//--------------------------------------------------------------------------;
STDMETHODIMP CBuf::GetPosition(PDWORD pdwPlay, PDWORD pdwWrite)
{
    if (m_fDeregistered) return DSERR_NODRIVER;

    DRVCALL(("IDsDriverBuffer(%08Xh)->GetPosition(%08Xh, %08Xh)", m_pIDsDriverBuffer_Real, pdwPlay, pdwWrite));
    return m_pIDsDriverBuffer_Real->GetPosition(pdwPlay, pdwWrite);
}

STDMETHODIMP CBuf::Lock(LPVOID *ppvAudio1,
                   LPDWORD pdwLen1, LPVOID *ppvAudio2,
                   LPDWORD pdwLen2, DWORD dwWritePosition,
                   DWORD dwWriteLen, DWORD dwFlags)
{
    if (m_fDeregistered) return DSERR_NODRIVER;

    DRVCALL(("IDsDriverBuffer(%08Xh)->Lock(%08Xh, %08Xh, %08Xh, %08Xh, %08Xh, %08Xh, %08Xh)",
             m_pIDsDriverBuffer_Real, ppvAudio1, pdwLen1, ppvAudio2,
             pdwLen2,dwWritePosition, dwWriteLen, dwFlags));
    return m_pIDsDriverBuffer_Real->Lock(ppvAudio1, pdwLen1, ppvAudio2, pdwLen2,
                                         dwWritePosition, dwWriteLen, dwFlags);
}

STDMETHODIMP CBuf::Play(DWORD dw1, DWORD dw2, DWORD dwFlags)
{
    if (m_fDeregistered) return DSERR_NODRIVER;

    DRVCALL(("IDsDriverBuffer(%08Xh)->Play(%08Xh, %08Xh, %08Xh)", dw1, dw2, dwFlags));
    return m_pIDsDriverBuffer_Real->Play(dw1, dw2, dwFlags);
}

STDMETHODIMP CBuf::SetFormat(LPWAVEFORMATEX pwfx)
{
    if (m_fDeregistered) return DSERR_NODRIVER;

    DRVCALL(("IDsDriverBuffer(%08Xh)->SetFormat(%08Xh)", m_pIDsDriverBuffer_Real, pwfx));
    return m_pIDsDriverBuffer_Real->SetFormat(pwfx);
}

STDMETHODIMP CBuf::SetFrequency(DWORD dwFrequency)
{
    if (m_fDeregistered) return DSERR_NODRIVER;

    DRVCALL(("IDsDriverBuffer(%08Xh)->SetFrequency(%08Xh)", m_pIDsDriverBuffer_Real, dwFrequency));
    return m_pIDsDriverBuffer_Real->SetFrequency(dwFrequency);
}

STDMETHODIMP CBuf::SetPosition(DWORD dwPosition)
{
    if (m_fDeregistered) return DSERR_NODRIVER;

    DRVCALL(("IDsDriverBuffer(%08Xh)->SetPosition(%08Xh)", m_pIDsDriverBuffer_Real, dwPosition));
    return m_pIDsDriverBuffer_Real->SetPosition(dwPosition);
}

STDMETHODIMP CBuf::SetVolumePan(PDSVOLUMEPAN pDsVolumePan)
{
    if (m_fDeregistered) return DSERR_NODRIVER;

    DRVCALL(("IDsDriverBuffer(%08Xh)->SetVolumePan(%08Xh)", m_pIDsDriverBuffer_Real, pDsVolumePan));
    return m_pIDsDriverBuffer_Real->SetVolumePan(pDsVolumePan);
}

STDMETHODIMP CBuf::Stop(void)
{
    if (m_fDeregistered) return DSERR_NODRIVER;

    DRVCALL(("IDsDriverBuffer(%08Xh)->Stop()", m_pIDsDriverBuffer_Real));
    return m_pIDsDriverBuffer_Real->Stop();
}

STDMETHODIMP CBuf::Unlock(LPVOID pvAudio1,
                          DWORD dwLen1, LPVOID pvAudio2,
                          DWORD dwLen2)
{
    if (m_fDeregistered) return DSERR_NODRIVER;

    DRVCALL(("IDsDriverBuffer(%08Xh)->Unlock(%08Xh, %08Xh, %08Xh, %08Xh)",
             m_pIDsDriverBuffer_Real, pvAudio1, dwLen1, pvAudio2, dwLen2));
    return m_pIDsDriverBuffer_Real->Unlock(pvAudio1, dwLen1, pvAudio2, dwLen2);
}

STDMETHODIMP_(BOOL) CBuf::IsDeregistered(void)
{
    return m_fDeregistered;
}

STDMETHODIMP_(IDsDriverBuffer*) CBuf::GetRealDsDriverBuffer(void)
{
    return m_pIDsDriverBuffer_Real;
}

//==========================================================================;
//==========================================================================;
//
//  CDrv class implementation
//
//==========================================================================;
//==========================================================================;

//--------------------------------------------------------------------------;
//
// CDrv new and delete operators
//  These allocate the CDrv objects on a VMMLIST whose handle
// has gobal scope (thus we don't need to same VMMLIST handle trickery
// as we use the new/delete operators for the CBuf class).
//
//--------------------------------------------------------------------------;
void* CDrv::operator new(size_t size)
{
    PVOID pv;

    ASSERT(0 != gvmmlistDrivers);

    pv = List_Allocate(gvmmlistDrivers);
    if (NULL != pv) memset(pv, 0x00, size);
    return pv;
}

void CDrv::operator delete(void * pv)
{
    List_Deallocate(gvmmlistDrivers, pv);
}

//==========================================================================;
//
// CDrv class methods
//
//==========================================================================;

HRESULT CDrv::CreateAndRegisterDriver(IDsDriver *pIDsDriver)
{
    CDrv *pDrv;
    HRESULT hr;

    pDrv = new CDrv;
    if (pDrv) {

        pDrv->m_cRef=0;
        pDrv->m_cOpen = 0;
        pDrv->m_fDeregistered = FALSE;
        pDrv->m_pIDsDriver_Real = pIDsDriver;

        pDrv->m_listBuffers = CBuf::CreateList();
        if (pDrv->m_listBuffers) {

            pDrv->m_guidDriver = GuidAlloc();
            if (!IsEqualGUID(GUID_NULL, pDrv->m_guidDriver)) {
                List_Attach_Tail(gvmmlistDrivers, pDrv);
                pDrv->AddRef();
                hr = S_OK;
            } else {
                hr = DSERR_GENERIC;
            }

            if (FAILED(hr)) {
                CBuf::DestroyList(pDrv->m_listBuffers);
            }

        } else {
            hr = E_OUTOFMEMORY;
        }

        if (FAILED(hr)) {
            delete pDrv;
        }

    } else {
        hr = E_OUTOFMEMORY;
    }

    return hr;
}

HRESULT CDrv::DeregisterDriver(IDsDriver *pIDsDriver)
{
    CDrv *pDrv;

    ASSERT(0 != gvmmlistDrivers);

    pDrv = FindFromIDsDriver(pIDsDriver);
    if (NULL == pDrv) {
        BREAK(("Tried to deregister a driver that's not registered"));
        return DSERR_INVALIDPARAM;
    }

    if (0 != pDrv->m_cOpen) {
        DPF(("warning: driver deregistered while it was open"));
    }

    CBuf::DeregisterBuffers(pDrv->m_listBuffers);

    pDrv->m_fDeregistered = TRUE;
    pDrv->Release();
    return S_OK;
}

//--------------------------------------------------------------------------;
//
// CDrv::GetNextDescFromGuid
//
//  Gets the driver description of the next driver after the one having
//  the specified GUID
//
// Entry:
//
// Returns (HRESULT):
//
// Notes:
//
//--------------------------------------------------------------------------;
HRESULT CDrv::GetNextDescFromGuid(LPCGUID pGuidLast, LPGUID pGuid, PDSDRIVERDESC pDrvDesc)
{
    CDrv *pDrv;
    DSVAL dsv;

    ASSERT(gvmmlistDrivers);

    if ((NULL == pGuidLast) || IsEqualGUID(GUID_NULL, *pGuidLast)) {
        pDrv = (CDrv*)List_Get_First(gvmmlistDrivers);
    } else {
        pDrv = FindFromGuid(*pGuidLast);
        if (NULL != pDrv) {
            pDrv = (CDrv*)List_Get_Next(gvmmlistDrivers, pDrv);
        }
    }

    if (NULL == pDrv) return DSERR_NODRIVER;

    *pGuid = pDrv->m_guidDriver;

    dsv = pDrv->GetDriverDesc(pDrvDesc);
    return dsv;
}

HRESULT CDrv::GetDescFromGuid(REFGUID rguidDriver, PDSDRIVERDESC pDrvDesc)
{
    CDrv *pDrv;
    DSVAL dsv;

    ASSERT(gvmmlistDrivers);

    pDrv = FindFromGuid(rguidDriver);
    if (NULL == pDrv) return DSERR_NODRIVER;
    dsv = pDrv->GetDriverDesc(pDrvDesc);
    return dsv;
}

HRESULT CDrv::OpenFromGuid(REFGUID refGuid, IDsDriver **ppIDsDriver)
{
    CDrv *pDrv;
    HRESULT hr;

    *ppIDsDriver = NULL;

    pDrv = FindFromGuid(refGuid);

    if (pDrv) {
        hr = pDrv->Open();
        if (SUCCEEDED(hr)) {
            *ppIDsDriver = pDrv;
        }
    } else {
        hr = DSERR_NODRIVER;
    }

    return hr;
}

CDrv* CDrv::FindFromIDsDriver(IDsDriver *pIDsDriver)
{
    CDrv *pDrv;

    ASSERT(gvmmlistDrivers);

    pDrv = (CDrv*)List_Get_First(gvmmlistDrivers);
    while ((NULL != pDrv) && (pDrv->m_pIDsDriver_Real != pIDsDriver)) {
        pDrv = (CDrv*)List_Get_Next(gvmmlistDrivers, pDrv);
    }
    return pDrv;
}

CDrv* CDrv::FindFromGuid(REFGUID riid)
{
    CDrv *pDrv;

    ASSERT(gvmmlistDrivers);

    pDrv = (CDrv*)List_Get_First(gvmmlistDrivers);
    while ((NULL != pDrv) && (!IsEqualGUID(riid, pDrv->m_guidDriver))) {
        pDrv = (CDrv*)List_Get_Next(gvmmlistDrivers, pDrv);
    }
    return pDrv;
}

//==========================================================================;
//
// COM interface implementations
//
//==========================================================================;

STDMETHODIMP CDrv::QueryInterface(REFIID riid, PVOID* ppv)
{
    *ppv = NULL;
    if ((IID_IUnknown == riid) || (IID_IDsDriver == riid))
        *ppv = this;

    if (NULL == *ppv)
        return E_NOINTERFACE;

    ((LPUNKNOWN)*ppv)->AddRef();
    return NOERROR;
}

STDMETHODIMP_(ULONG) CDrv::AddRef(void)
{
    ASSERT(m_cRef >= 0);
    return ++m_cRef;
}

STDMETHODIMP_(ULONG) CDrv::Release(void)
{
    ASSERT(m_cRef > 0);
    if (0 >= --m_cRef) {

        ASSERT(gvmmlistDrivers);
        List_Remove(gvmmlistDrivers, this);
        GuidFree(m_guidDriver);
        ASSERT(m_listBuffers);
        ASSERT(!List_Get_First(m_listBuffers));
        CBuf::DestroyList(m_listBuffers);
        m_listBuffers = NULL;
        delete this;
        return 0;

    } else {
        return m_cRef;
    }
}

STDMETHODIMP CDrv::GetDriverDesc(PDSDRIVERDESC pDsDriverDesc)
{
    if (m_fDeregistered) return DSERR_NODRIVER;

    DRVCALL(("IDsDriver(%08Xh)->GetDriverDesc(%08Xh)", m_pIDsDriver_Real, pDsDriverDesc));
    return m_pIDsDriver_Real->GetDriverDesc(pDsDriverDesc);
}

STDMETHODIMP CDrv::Open(void)
{
    HRESULT hr;

    ASSERT(0 == m_cOpen);

    if (m_fDeregistered) return DSERR_NODRIVER;

    DRVCALL(("IDsDriver(%08Xh)->Open()", m_pIDsDriver_Real));
    hr = m_pIDsDriver_Real->Open();
    if (SUCCEEDED(hr)) {
        m_cOpen++;
        AddRef();
    }

    return hr;
}

STDMETHODIMP CDrv::Close(void)
{
    HRESULT hr;

    ASSERT(m_cOpen > 0);

    m_cOpen--;

    if (m_fDeregistered) {
        DPF(("driver must have deregistered while open"));
        Release();
        return NOERROR;
    }

    DRVCALL(("IDsDriver(%08Xh)->Close()", m_pIDsDriver_Real));
    hr = m_pIDsDriver_Real->Close();
    if (SUCCEEDED(hr)) Release();

    // Warning: _this_ object may have been destroyed by
    // the above calls to Release();

    return hr;
}

STDMETHODIMP CDrv::GetCaps(PDSDRIVERCAPS pDsDriverCaps)
{
    if (m_fDeregistered) {
        return DSERR_NODRIVER;
    } else {
        DRVCALL(("IDsDriver(%08Xh)->GetCaps(%08Xh)", m_pIDsDriver_Real, pDsDriverCaps));
        return m_pIDsDriver_Real->GetCaps(pDsDriverCaps);
    }
}

STDMETHODIMP CDrv::CreateSoundBuffer(LPWAVEFORMATEX pwfx,
                                     DWORD dwFlags,
                                     DWORD dwCardAddress,
                                     LPDWORD pdwcbBufferSize,
                                     LPBYTE *ppbBuffer,
                                     LPVOID *ppv)
{
    LPWAVEFORMATEX pwfxKernel;
    int cbwfx;
    IDsDriverBuffer *pIDsDriverBuffer_Real;
    HRESULT hr;

    *ppv = NULL;

    if (m_fDeregistered) {
        return DSERR_NODRIVER;
    }

    //
    // Note that some drivers (mwave) appear to access the WAVEFORMATEX
    // structure from another thread.  So, we must guarantee that the
    // this structure is in the global heap before passing it to the
    // driver.  As a side effect, this code also ensures that a full
    // WAVEFORMATEX structure is passed to the driver, not just a
    // PCMWAVEFORMAT.  I seem to recall some drivers always expecting
    // a full WAVEFORMATEX structure, but I'm not sure.
    //
    if (WAVE_FORMAT_PCM == pwfx->wFormatTag) {
        cbwfx = sizeof(PCMWAVEFORMAT);
    } else {
        cbwfx = sizeof(WAVEFORMATEX) + pwfx->cbSize;
    }

    pwfxKernel = (LPWAVEFORMATEX)_HeapAllocate(max(cbwfx, sizeof(WAVEFORMATEX)), HEAPZEROINIT | HEAPSWAP);
    if (pwfxKernel) {

        memcpy(pwfxKernel, pwfx, cbwfx);

        DRVCALL(("IDsDriver(%08Xh)->CreateSoundBuffer(%08X, %08X, %08X, %08X, %08X, %08X)",
                m_pIDsDriver_Real, pwfx, dwFlags, dwCardAddress, pdwcbBufferSize, ppbBuffer, &pIDsDriverBuffer_Real));
        hr = m_pIDsDriver_Real->CreateSoundBuffer(pwfxKernel, dwFlags, dwCardAddress, pdwcbBufferSize,
                                                  ppbBuffer, (PVOID*)&pIDsDriverBuffer_Real);

        if (SUCCEEDED(hr)) {
            hr = CBuf::CreateBuf(this, m_listBuffers, pIDsDriverBuffer_Real, (IDsDriverBuffer**)ppv);
            if (FAILED(hr)) {
                pIDsDriverBuffer_Real->Release();
                ASSERT(NULL == *ppv);
            }
        }

        _HeapFree(pwfxKernel, 0);

    } else {
        hr = E_OUTOFMEMORY;
    }

    return hr;
}

STDMETHODIMP CDrv::DuplicateSoundBuffer(PIDSDRIVERBUFFER pIDsDriverBuffer, LPVOID *ppv)
{
    IDsDriverBuffer *pIDsDriverBufferDup_Real;
    HRESULT hr;

    *ppv = NULL;

    if (m_fDeregistered) {
        return DSERR_NODRIVER;
    }

    DRVCALL(("IDsDriver(%08Xh)->DuplicateSoundBuffer(...)", m_pIDsDriver_Real));
    hr = m_pIDsDriver_Real->DuplicateSoundBuffer(((CBuf*)pIDsDriverBuffer)->GetRealDsDriverBuffer(), (PVOID*)&pIDsDriverBufferDup_Real);
    if (SUCCEEDED(hr)) {
        hr = CBuf::CreateBuf(this, m_listBuffers, pIDsDriverBufferDup_Real, (IDsDriverBuffer**)ppv);
        if (FAILED(hr)) {
            DRVCALL(("IDsDriver(%08Xh)->Release()", m_pIDsDriver_Real));
            pIDsDriverBufferDup_Real->Release();
            ASSERT(NULL == *ppv);
        }
    }

    return hr;
}

//==========================================================================;
//
// DSOUND_RegisterDeviceDriver
// DSOUND_DeregisterDeviceDriver
//
// These services are called by a direct sound driver when the driver
// initializes or terminates to register/deregister itself as a direct
// sound driver.  Typcially, these would be called from
// within the driver's PnP CONFIG_START and CONFIG_STOP handlers.
//
// Entry:
//  PIDSDRIVER pIDsDriver: pointer to the driver's interface
//
//  DWORD dwFlags: reserved, caller should set to 0
//
// Returns (DSVAL):
//
// Notes:
//  We maintain a list of drivers using the VMM List_* services.  Each node
//  of the list is a DSDRV structure.  During registration, a list node is
//  created and insterted into the list.  The pIDsDriver member is initialized
//  with a pointer to the driver's interface.  When deregistering, the node
//  is marked as deregistered.  If there are no open instances on the driver,
//  then the node is removed from the list.
//
//==========================================================================;

HRESULT SERVICE DSOUND_RegisterDeviceDriver(PIDSDRIVER pIDsDriver, DWORD dwFlags)
{
    DPF(("DSOUND_RegisterDeviceDriver(%08Xh, %08Xh)", pIDsDriver, dwFlags));
    return CDrv::CreateAndRegisterDriver(pIDsDriver);
}

HRESULT SERVICE DSOUND_DeregisterDeviceDriver(PIDSDRIVER pIDsDriver, DWORD dwFlags)
{
    DPF(("DSOUND_DeregisterDeviceDriver(%08Xh, %08Xh)", pIDsDriver, dwFlags));
    return CDrv::DeregisterDriver(pIDsDriver);
}

//==========================================================================;
//
// VxD CONTROL routines for drv
//
//==========================================================================;

int ctrlDrvInit()
{
    int i;

    gvmmlistDrivers = List_Create(LF_ALLOC_ERROR, sizeof(CDrv));
    if (0 == gvmmlistDrivers) return 0;

    gpaGuidRec = (PGUIDRECORD)_HeapAllocate( NUMGUIDS*sizeof(gpaGuidRec[0]), HEAPZEROINIT );
    if (NULL == gpaGuidRec) {
        List_Destroy(gvmmlistDrivers);
        gvmmlistDrivers = 0;
        return 0;
    }

    for (i=0; i<NUMGUIDS; i++)
        gpaGuidRec[i].pGuid = &guidList[i];

    return 1;
}

int ctrlDrvExit()
{
    if (NULL != gpaGuidRec) {
        _HeapFree(gpaGuidRec, 0);
        gpaGuidRec = NULL;
    }

    if (0 != gvmmlistDrivers) {
        List_Destroy(gvmmlistDrivers);
        gvmmlistDrivers = 0;
    }

    return 1;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\directx\dsound\dsvxd\kegrace.cpp ===
//--------------------------------------------------------------------------;
//
//  File: kegrace.cpp
//
//  Copyright (c) 1995 Microsoft Corporation.  All Rights Reserved.
//
//  Abstract:
//
//  Contents:
//
//  History:
//      06/29/96    FrankYe     Created
//
//--------------------------------------------------------------------------;

#define NODSOUNDSERVICETABLE
#include "dsoundi.h"

// never premix less than this
#define MIN_PREMIX        45

#pragma VxD_LOCKED_CODE_SEG
#pragma VxD_LOCKED_DATA_SEG

extern "C" void KeGrace_GlobalTimeOutProcAsm();

LONG lMixerMutex;

LONG glNum;
DWORDLONG gdwlTotalWasted;
DWORDLONG gdwlTotal;
DWORDLONG _inline GetPentiumCounter(void)
{
   _asm  _emit 0x0F
   _asm  _emit 0x31
}

ULONG VXDINLINE VMM_Get_System_Time(void)
{
    ULONG Time;

    Touch_Register(eax);
    VMMCall(Get_System_Time);
    _asm mov Time, eax;
    return Time;
}

VOID _VMCPD_Get_Thread_State(PTCB Thread, PVOID pCPState)
{
    _asm mov esi, pCPState;
    _asm mov edi, Thread;
    VxDCall(VMCPD_Get_Thread_State);
}

VOID _VMCPD_Set_Thread_State(PTCB Thread, PVOID pCPState)
{
    _asm mov esi, pCPState;
    _asm mov edi, Thread;
    VxDCall(VMCPD_Set_Thread_State);
}

LONG _InterlockedExchange(PLONG pTarget, LONG Value)
{
    LONG OldTarget;
    _asm push edi;
    _asm mov eax, Value;
    _asm mov edi, pTarget;
    _asm xchg [edi], eax;
    _asm mov OldTarget, eax;
    _asm pop edi;
    return OldTarget;
}

// Must be in locked code
LONG _InterlockedExchangeAdd(PLONG pAddend, LONG Increment)
{
    LONG OldAddend;
    _asm mov esi, pAddend;
    _asm mov ecx, Increment;
    _asm mov eax, [esi];        // Read it (possibly causing a fault in)
    _asm add ecx, eax;
    _asm mov [esi], ecx;
    _asm mov OldAddend, eax;
    return OldAddend;
}

VOID _ZeroMemory(PVOID pDestination, DWORD cbLength)
{
    _asm mov edi, pDestination ;
    _asm mov esi, cbLength ;
    _asm xor eax, eax ;
    _asm mov ecx, esi ;
    _asm shr ecx, 2 ;
    _asm rep stosd ;
    _asm mov ecx, esi ;
    _asm and ecx, 3 ;
    _asm rep stosb ;
}
    
// Override the global new and delete operators
void * ::operator new(size_t size)
{ 
    return MemAlloc(size); 
}

void ::operator delete(void * pv) 
{ 
    MemFree(pv); 
}

// Implement our own purecall
int __cdecl _purecall(void)
{
    ASSERT(FALSE);
    return 0;
}

typedef struct tEVENTPARAMS {
    HTIMEOUT                hEvent;
    class CKeGrace          *pThis;
} EVENTPARAMS, *PEVENTPARAMS;

class CKeGrace : public CGrace {
    public:
        HRESULT             Initialize(CGrDest *pGrDest);
        void                Terminate(void);
        void                SignalRemix(void);
        int                 GetMaxRemix(void);
        void                GlobalTimeOutProc(int dtimeTardiness);

    private:
        static const int    MIXER_MINPREMIX;
        static const int    MIXER_MAXPREMIX;
        LONG                m_dtimePremix;
        LONG                m_ddtimePremix;
        EVENTPARAMS         m_EventParams;
        LONG                m_timeBusyWaitForMutex;
};

const int CKeGrace::MIXER_MINPREMIX = 45;
const int CKeGrace::MIXER_MAXPREMIX = 200;

extern "C" void KeGrace_GlobalTimeOutProc(PVOID pKeGrace, int dtimeTardiness)
{
    ((CKeGrace*)pKeGrace)->GlobalTimeOutProc(dtimeTardiness);
}

void CKeGrace::SignalRemix()
{
    HTIMEOUT hEvent;

#if 0
    // If you wanna run without remixing, just enable this bit of code.  You
    // might want to lower the MIXER_MAXPREMIX constant as well.
    m_fdwMixerSignal &= DSMIXERSIGNAL_REMIX;
    return;
#endif
    
    if (!(m_fdwMixerSignal & DSMIXERSIGNAL_REMIX))
    {
        m_fdwMixerSignal |= DSMIXERSIGNAL_REMIX;

        // Set a new time out for 2ms, and then cancel any prior pending timeout.
        //
        //  Note that "2ms" is somewhat arbitrary.  It just needs to be
        //  enough time to hopefully let this thread release the mixer
        //  mutex before the event executes.

        hEvent = Set_Global_Time_Out(KeGrace_GlobalTimeOutProcAsm, 2, (ULONG)&m_EventParams);
        hEvent = _InterlockedExchange((PLONG)&m_EventParams.hEvent, hEvent);
        Cancel_Time_Out(hEvent);
    }
}

void CKeGrace::GlobalTimeOutProc(int dtimeTardiness)
{
    char        CPState[108];        // Size of fp state per Intel prog. ref.
    LONG        dtime;
    LONG        dtimeSleep;
    LONG        dtimeInvalid;
    LONG        dtimeNextNotify;
    int         cSamplesPremixMax;
    int         cSamplesPremixed;

    // DPF(("CKeGrace::GlobalTimeOutProc"));

    if (m_dtimePremix/2 < dtimeTardiness) {
        DPF(("CKeGrace_GlobalTimeOutProc : warning: %dms late", dtimeTardiness));
    }

    //
    // We busy wait on the mutex, each iteration of the wait is longer
    // than the previous.
    //
    if (_InterlockedExchange(&lMixerMutex, TRUE)) {
        HTIMEOUT hEvent;
        LONG timeOut;
        // DPF(("CKeGrace::GlobalTimeOutProc : note: mutex already owned"));
        timeOut = _InterlockedExchangeAdd(&m_timeBusyWaitForMutex, 1);
        hEvent = Set_Global_Time_Out(KeGrace_GlobalTimeOutProcAsm, timeOut,
                                     (ULONG)&m_EventParams);
        hEvent = _InterlockedExchange((PLONG)&m_EventParams.hEvent, hEvent);
        Cancel_Time_Out(hEvent);
        return;
    }
    m_timeBusyWaitForMutex = 1;
    
    // Three cases:
    //   1) mixer is stopped
    //   2) mixer running and a remix is pending
    //   3) mixer running and no remix is pending
    //
    // Around each call to Refresh we need to save and restore the thread's
    // floating point state using the VMCPD Get/Set_Thread_State services.
    //

    if (MIXERSTATE_STOPPED == m_kMixerState) {
            
        dtimeSleep = 1000;        // arbitrarily set for 1 second

    } else {

        // DWORDLONG dwlStartCycle;
        // DWORDLONG dwlT;
        // dwlStartCycle = dwlT = GetPentiumCounter();

        dtime = VMM_Get_System_Time();

        _ZeroMemory(&CPState, sizeof(CPState));
        _VMCPD_Get_Thread_State(Get_Cur_Thread_Handle(), &CPState);

        // gdwlTotalWasted += GetPentiumCounter() - dwlT;
        // glNum++;

        if (m_fdwMixerSignal & DSMIXERSIGNAL_REMIX) {

            m_dtimePremix = MIXER_MINPREMIX;        // Initial premix length
            m_ddtimePremix = 2;                     // increment

            cSamplesPremixMax = MulDivRD(m_dtimePremix, m_pDest->m_nFrequency, 1000);
            Refresh(TRUE, cSamplesPremixMax, &cSamplesPremixed, &dtimeNextNotify);
        } else {

            m_dtimePremix += m_ddtimePremix;
            if (m_dtimePremix > MIXER_MAXPREMIX) {
                m_dtimePremix = MIXER_MAXPREMIX;
            } else {
                m_ddtimePremix += 2;
            }

            cSamplesPremixMax = MulDivRD(m_dtimePremix, m_pDest->m_nFrequency, 1000);
            Refresh(FALSE, cSamplesPremixMax, &cSamplesPremixed, &dtimeNextNotify);
        }

        // dwlT = GetPentiumCounter();
        
        _VMCPD_Set_Thread_State(Get_Cur_Thread_Handle(), &CPState);

        dtimeInvalid = MulDivRD(cSamplesPremixed, 1000, m_pDest->m_nFrequency);
        dtime = VMM_Get_System_Time() - dtime;
        dtimeInvalid -= 2 * dtime;

        dtimeSleep = min(dtimeNextNotify, dtimeInvalid/2);
        dtimeSleep = max(dtimeSleep, MIXER_MINPREMIX/2);

        // gdwlTotalWasted += GetPentiumCounter() - dwlT;
        // gdwlTotal += GetPentiumCounter() - dwlStartCycle;

    }

    // DPF(("CKeGrace::GlobalTimeOutProc : note: dtimeSleep=%dms", dtimeSleep));
    ASSERT(!m_EventParams.hEvent);
    m_EventParams.hEvent = Set_Global_Time_Out(KeGrace_GlobalTimeOutProcAsm, dtimeSleep, (ULONG)&m_EventParams);
    
    _InterlockedExchange(&lMixerMutex, FALSE);
}

HRESULT CKeGrace::Initialize(CGrDest *pDest)
{
    HRESULT hr;

    hr = CGrace::Initialize(pDest);
    if (S_OK != hr) return hr;
    
    DPF(("CKeGrace::Initialize : note: Setting up first GlobalTimeOut"));

    // If we want to run the timer really fast, do this.  So far I haven't seen
    // any empirical evidence of this helping.
    VTD_Begin_Min_Int_Period(5);

    m_dtimePremix = MIXER_MINPREMIX;        // Initial premix length
    m_ddtimePremix = 2;                     // increment

    // REMIND do error check
    m_timeBusyWaitForMutex = 1;
    m_EventParams.pThis = this;
    m_EventParams.hEvent = Set_Global_Time_Out(KeGrace_GlobalTimeOutProcAsm, 1, (ULONG)&m_EventParams);

    gdwlTotal = 0;
    gdwlTotalWasted = 0;
    glNum = 0;
    
    return hr;
}

//--------------------------------------------------------------------------;
//
// Terminate
//
// This function is called to terminate the grace mixer thread for the
// specified ds object.  It returns the handle to the thread that is being
// terminated.  After releasing any critical sections that the grace mixer
// thread may be waiting on, the caller should wait for the thread handle
// to become signaled.  For Win32 beginners: the thread handle is signalled
// after the thread terminates.
//
//--------------------------------------------------------------------------;

void CKeGrace::Terminate()
{
    HTIMEOUT        hEvent;

    hEvent = _InterlockedExchange((PLONG)&m_EventParams.hEvent, 0);
    Cancel_Time_Out(hEvent);

    CGrace::Terminate();

    if (0 != glNum) {
        DPF(("Wasted time = %d cycles", (int)(gdwlTotalWasted / glNum)));
        DPF(("Total  time = %d cycles", (int)(gdwlTotal       / glNum)));
    }
}

int CKeGrace::GetMaxRemix(void)
{
    // return max number of samples we might remix
    return (MulDivRU(MIXER_MAXPREMIX, m_pDest->m_nFrequency, 1000));
}


#pragma VxD_PAGEABLE_CODE_SEG
#pragma VxD_PAGEABLE_DATA_SEG

class CKeGrDest : public CGrDest {
public:
        CKeGrDest(LPNAGRDESTDATA);
        HRESULT Initialize(void);
        void Terminate(void);
        HRESULT SetFormat(LPWAVEFORMATEX pwfx);
        HRESULT AllocMixer(CMixer **ppMixer);
        void FreeMixer(void);
        HRESULT GetSamplePosition(int *pposPlay, int *pposWrite);
        HRESULT GetSamplePositionNoWin16(int *pposPlay, int *pposWrite);
        HRESULT Lock(PVOID *ppBuffer1, int *pcbBuffer1, PVOID *ppBuffer2, int *pcbBuffer2, int ibWrite, int cbWrite);
        HRESULT Unlock(PVOID pBuffer1, int cbBuffer1, PVOID pBuffer2, int cbBuffer2);
        void Play();
        void Stop();

    private:
        CKeGrace*   m_pKeGrace;
        DWORD       m_fdwDriverDesc;
        CBuf*       m_pDrvBuf;
        // Let's only send a stop if we are currently playing
        BOOL        m_fStopped;
};

CKeGrDest::CKeGrDest(LPNAGRDESTDATA pData)
{
    m_cbBuffer = pData->cbBuffer;
    m_pBuffer = pData->pBuffer;
    m_pDrvBuf = ((CBuf*)((PIDSDRIVERBUFFER)pData->hBuffer));
    m_fdwDriverDesc = pData->fdwDriverDesc;
    m_fStopped = TRUE;
}

HRESULT CKeGrDest::Initialize(void)
{
    m_cSamples = m_cbBuffer >> m_nBlockAlignShift;
    return DS_OK;
}

void CKeGrDest::Terminate(void)
{
    return;
}

HRESULT CKeGrDest::AllocMixer(CMixer **ppMixer)
{
    HRESULT hr;
    
    ASSERT(m_pBuffer);
    
    *ppMixer = NULL;
    
    m_pKeGrace = new CKeGrace;
    if (m_pKeGrace) {
        hr = m_pKeGrace->Initialize(this);
        if (S_OK != hr) {
            delete m_pKeGrace;
            m_pKeGrace = NULL;
        }
    } else {
        hr = DSERR_OUTOFMEMORY;
    }

    if (S_OK == hr) *ppMixer = m_pKeGrace;
    return hr;
}

void CKeGrDest::FreeMixer()
{
    ASSERT(m_pKeGrace);

    m_pKeGrace->Terminate();
    delete m_pKeGrace;
    m_pKeGrace = NULL;
}

HRESULT CKeGrDest::SetFormat(LPWAVEFORMATEX pwfx)
{
    HRESULT hr;

    SetFormatInfo(pwfx);
    hr = m_pDrvBuf->SetFormat(pwfx);
    return hr;
}

void CKeGrDest::Play()
{
    HRESULT hr;
    // REMIND we're not propagating errors here!
    hr = m_pDrvBuf->Play(0, 0, DSBPLAY_LOOPING);
    if (SUCCEEDED(hr)) m_fStopped = FALSE;
}

void CKeGrDest::Stop()
{
    HRESULT hr;
    if (m_fStopped == FALSE)
    {
        hr = m_pDrvBuf->Stop();
        if (SUCCEEDED(hr)) m_fStopped = TRUE;
    }
}
    
HRESULT CKeGrDest::Lock(PVOID *ppBuffer1, int *pcbBuffer1, PVOID *ppBuffer2, int *pcbBuffer2, int ibWrite, int cbWrite)
{
    LOCKCIRCULARBUFFER lcb;
    HRESULT            hr;
    
    lcb.pHwBuffer = m_pDrvBuf;
    lcb.pvBuffer = m_pBuffer;
    lcb.cbBuffer = m_cbBuffer;
    lcb.fPrimary = TRUE;
    lcb.fdwDriverDesc = m_fdwDriverDesc;
    lcb.ibRegion = ibWrite;
    lcb.cbRegion = cbWrite;

    hr = LockCircularBuffer(&lcb);

    if(SUCCEEDED(hr))
    {
        *ppBuffer1 = lcb.pvLock[0];
        *pcbBuffer1 = lcb.cbLock[0];

        if(ppBuffer2)
        {
            *ppBuffer2 = lcb.pvLock[1];
        }
        else
        {
            ASSERT(!lcb.pvLock[1]);
        }

        if(pcbBuffer2)
        {
            *pcbBuffer2 = lcb.cbLock[1];
        }
        else
        {
            ASSERT(!lcb.cbLock[1]);
        }
    }

    return hr;
}

HRESULT CKeGrDest::Unlock(PVOID pBuffer1, int cbBuffer1, PVOID pBuffer2, int cbBuffer2)
{
    LOCKCIRCULARBUFFER lcb;

    lcb.pHwBuffer = m_pDrvBuf;
    lcb.pvBuffer = m_pBuffer;
    lcb.cbBuffer = m_cbBuffer;
    lcb.fPrimary = TRUE;
    lcb.fdwDriverDesc = m_fdwDriverDesc;
    lcb.pvLock[0] = pBuffer1;
    lcb.cbLock[0] = cbBuffer1;
    lcb.pvLock[1] = pBuffer2;
    lcb.cbLock[1] = cbBuffer2;

    return UnlockCircularBuffer(&lcb);
}

HRESULT CKeGrDest::GetSamplePosition(int *pposPlay, int *pposWrite)
{
    HRESULT hr;
    DWORD dwPlay, dwWrite;

    ASSERT(pposPlay && pposWrite);
    
    hr = m_pDrvBuf->GetPosition(&dwPlay, &dwWrite);
    if (S_OK == hr) {

        *pposPlay = dwPlay >> m_nBlockAlignShift;
        *pposWrite = dwWrite >> m_nBlockAlignShift;

        // Until we write code to actually profile the performance, we'll just
        // pad the write position with a hard coded amount
        *pposWrite += m_nFrequency * HW_WRITE_CURSOR_MSEC_PAD / 1024;
        if (*pposWrite >= m_cSamples) *pposWrite -= m_cSamples;
        ASSERT(*pposWrite < m_cSamples);

    } else {
        *pposPlay = *pposWrite = 0;
    }

    return hr;
}

inline HRESULT CKeGrDest::GetSamplePositionNoWin16(int *pposPlay, int *pposWrite)
{
    return GetSamplePosition(pposPlay, pposWrite);
}

int ioctlMixer_Run(PDIOCPARAMETERS pdiocp)
{
    CMixer *pMixer;
    HRESULT hr;

    IOSTART(1*4);

    IOINPUT(pMixer, CMixer*);

    hr = pMixer->Run();

    IOOUTPUT(hr, HRESULT);
    IORETURN;
    return 0;
}

int ioctlMixer_Stop(PDIOCPARAMETERS pdiocp)
{
    BOOL f;
    CMixer *pMixer;

    IOSTART(1*4);

    IOINPUT(pMixer, CMixer*);

    f = pMixer->Stop();

    IOOUTPUT(f, BOOL);
    IORETURN;
    return 0;
}

int ioctlMixer_PlayWhenIdle(PDIOCPARAMETERS pdiocp)
{
    CMixer *pMixer;

    IOSTART(1*4);

    IOINPUT(pMixer, CMixer*);

    pMixer->PlayWhenIdle();

    IORETURN;
    return 0;
}

int ioctlMixer_StopWhenIdle(PDIOCPARAMETERS pdiocp)
{
    CMixer *pMixer;

    IOSTART(1*4);

    IOINPUT(pMixer, CMixer*);

    pMixer->StopWhenIdle();

    IORETURN;
    return 0;
}

int ioctlMixer_MixListAdd(PDIOCPARAMETERS pdiocp)
{
    CMixer *pMixer;
    CMixSource *pSource;

    IOSTART(2*4);

    IOINPUT(pMixer, CMixer*);
    IOINPUT(pSource, CMixSource*);

    pMixer->MixListAdd(pSource);

    IORETURN;
    return 0;
}

int ioctlMixer_MixListRemove(PDIOCPARAMETERS pdiocp)
{
    CMixer *pMixer;
    CMixSource *pSource;

    IOSTART(2*4);

    IOINPUT(pMixer, CMixer*);
    IOINPUT(pSource, CMixSource*);

    pMixer->MixListRemove(pSource);

    IORETURN;
    return 0;
}

int ioctlMixer_FilterOn(PDIOCPARAMETERS pdiocp)
{
    CMixer *pMixer;
    CMixSource *pSource;

    IOSTART(2*4);

    IOINPUT(pMixer, CMixer*);
    IOINPUT(pSource, CMixSource*);

    pMixer->FilterOn(pSource);

    IORETURN;
    return 0;
}

int ioctlMixer_FilterOff(PDIOCPARAMETERS pdiocp)
{
    CMixer *pMixer;
    CMixSource *pSource;

    IOSTART(2*4);

    IOINPUT(pMixer, CMixer*);
    IOINPUT(pSource, CMixSource*);

    pMixer->FilterOff(pSource);

    IORETURN;
    return 0;
}

int ioctlMixer_GetBytePosition(PDIOCPARAMETERS pdiocp)
{
    CMixer *pMixer;
    CMixSource *pSource;
    int *pibPlay;
    int *pibWrite;

    IOSTART(4*4);

    IOINPUT(pMixer, CMixer*);
    IOINPUT(pSource, CMixSource*);
    IOINPUT(pibPlay, int*);
    IOINPUT(pibWrite, int*);

    pMixer->GetBytePosition(pSource, pibPlay, pibWrite);

    IORETURN;
    return 0;
}

int ioctlMixer_SignalRemix(PDIOCPARAMETERS pdiocp)
{
    CMixer *pMixer;

    IOSTART(1*4);

    IOINPUT(pMixer, CMixer*);

    pMixer->SignalRemix();

    IORETURN;
    return 0;
}


int ioctlKeDest_New(PDIOCPARAMETERS pdiocp)
{
    LPNAGRDESTDATA pData;
    CKeGrDest *pKeGrDest;

    IOSTART(1*4);

    IOINPUT(pData, LPNAGRDESTDATA);
    
    pKeGrDest = new CKeGrDest(pData);

    IOOUTPUT(pKeGrDest, CKeGrDest*);
    IORETURN;
    return 0;
}

int ioctlMixDest_Delete(PDIOCPARAMETERS pdiocp)
{
    CMixDest *pMixDest;

    IOSTART(1*4);

    IOINPUT(pMixDest, CMixDest*);

    delete pMixDest;

    IORETURN;
    return 0;
}

int ioctlMixDest_Initialize(PDIOCPARAMETERS pdiocp)
{
    CMixDest *pMixDest;
    HRESULT hr;

    IOSTART(1*4);

    IOINPUT(pMixDest, CMixDest*);

    hr = pMixDest->Initialize();

    IOOUTPUT(hr, HRESULT);

    IORETURN;
    return 0;
}
    
int ioctlMixDest_Terminate(PDIOCPARAMETERS pdiocp)
{
    CMixDest *pMixDest;

    IOSTART(1*4);

    IOINPUT(pMixDest, CMixDest*);

    pMixDest->Terminate();

    IORETURN;
    return 0;
}
    
int ioctlMixDest_SetFormat(PDIOCPARAMETERS pdiocp)
{
    CMixDest *pMixDest;
    LPWAVEFORMATEX pwfx;
    HRESULT hr;

    IOSTART(2*4);

    IOINPUT(pMixDest, CMixDest*);
    IOINPUT(pwfx, LPWAVEFORMATEX);

    hr = pMixDest->SetFormat(pwfx);

    IOOUTPUT(hr, HRESULT);
    
    IORETURN;
    return 0;
}

int ioctlMixDest_SetFormatInfo(PDIOCPARAMETERS pdiocp)
{
    CMixDest *pMixDest;
    LPWAVEFORMATEX pwfx;

    IOSTART(2*4);

    IOINPUT(pMixDest, CMixDest*);
    IOINPUT(pwfx, LPWAVEFORMATEX);

    pMixDest->SetFormatInfo(pwfx);

    IORETURN;
    return 0;
}

int ioctlMixDest_AllocMixer(PDIOCPARAMETERS pdiocp)
{
    CMixDest *pMixDest;
    CMixer **ppMixer;
    HRESULT hr;

    IOSTART(2*4);

    IOINPUT(pMixDest, CMixDest*);
    IOINPUT(ppMixer, CMixer**);

    hr = pMixDest->AllocMixer(ppMixer);

    IOOUTPUT(hr, HRESULT);
    IORETURN;
    return 0;
}

int ioctlMixDest_FreeMixer(PDIOCPARAMETERS pdiocp)
{
    CMixDest *pMixDest;

    IOSTART(1*4);

    IOINPUT(pMixDest, CMixDest*);

    pMixDest->FreeMixer();

    IORETURN;
    return 0;
}

int ioctlMixDest_Play(PDIOCPARAMETERS pdiocp)
{
    CMixDest *pMixDest;

    IOSTART(1*4);

    IOINPUT(pMixDest, CMixDest*);

    pMixDest->Play();

    IORETURN;
    return 0;
}

int ioctlMixDest_Stop(PDIOCPARAMETERS pdiocp)
{
    CMixDest *pMixDest;

    IOSTART(1*4);

    IOINPUT(pMixDest, CMixDest*);

    pMixDest->Stop();

    IORETURN;
    return 0;
}

int ioctlMixDest_GetFrequency(PDIOCPARAMETERS pdiocp)
{
    CMixDest *pMixDest;
    int nFrequency;

    IOSTART(1*4);

    IOINPUT(pMixDest, CMixDest*);

    nFrequency = pMixDest->GetFrequency();

    IOOUTPUT(nFrequency, int);
    IORETURN;
    return 0;
}

int ioctlDsvxd_GetMixerMutexPtr(PDIOCPARAMETERS pdiocp)
{
    IOSTART(0*4);
    IOOUTPUT(&lMixerMutex, PLONG);
    IORETURN;
    return 0;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\directx\dsound\dsvxd\dsvxdi.h ===
/*==========================================================================;
 *
 *  Copyright (C) 1995-2001 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       dsvxdi.h
 *  Content:    dsound.vxd private include file
 *
 **************************************************************************/

#ifndef __DSVXDI_INCLUDED__
#define __DSVXDI_INCLUDED__

#ifdef __cplusplus
extern "C" {
#endif

extern VMMLIST gvmmlistDrivers;

//
//
//
typedef const GUID* LPCGUID;
typedef HRESULT DSVAL;

#ifdef __cplusplus

//
//
//
class CBuf_IDsDriverPropertySet : public IDsDriverPropertySet
{
    private:
    int                     m_cRef;
    class CBuf              *m_pBuf;

    public:
    // constructor
    CBuf_IDsDriverPropertySet(class CBuf* pBuf);

    // IUnknown members
    STDMETHODIMP            QueryInterface(REFIID, PVOID*);
    STDMETHODIMP_(ULONG)    AddRef(void);
    STDMETHODIMP_(ULONG)    Release(void);

    // IDsDriverPropertySet members
    STDMETHODIMP Get(PDSPROPERTY pDsProperty,
                     PVOID pPropertyParams, ULONG cbPropertyParams,
                     PVOID pPropertyData, ULONG cbPropertyData,
                     PULONG pcbReturnedData);
    STDMETHODIMP Set(PDSPROPERTY pDsProperty,
                     PVOID pPropertyParams, ULONG cbPropertyParams,
                     PVOID pPropertyData, ULONG cbPropertyData);
    STDMETHODIMP QuerySupport(REFGUID PropertySetId, ULONG PropertyId,
                              PULONG pSupport);
};

//
//
//
class CBuf : public IDsDriverBuffer
{
    private:
    int                     m_cRef;
    class CDrv              *m_pDrv;
    BOOL                    m_fDeregistered;

    IDsDriverBuffer         *m_pIDsDriverBuffer_Real;
    IDsDriverPropertySet    *m_pIDsDriverPropertySet_Real;

    // contained interface implementations
    CBuf_IDsDriverPropertySet m_IDsDriverPropertySet;

    friend CBuf_IDsDriverPropertySet;

    public:
    // new/delete operators
    void* operator new(size_t size, VMMLIST list);
    void operator delete(void * pv, size_t size);

    // constructor
    CBuf(void);

    // class methods
    static VMMLIST          CreateList(void);
    static void             DestroyList(VMMLIST list);
    static HRESULT          CreateBuf(CDrv *pDrv, VMMLIST list, IDsDriverBuffer *pIDsDriverBuffer_Real, IDsDriverBuffer **ppIDsDriverBuffer);
    static void             DeregisterBuffers(VMMLIST list);

    // IUnknown members
    STDMETHODIMP            QueryInterface(REFIID, PVOID*);
    STDMETHODIMP_(ULONG)    AddRef(void);
    STDMETHODIMP_(ULONG)    Release(void);

    // IDsDriverBuffer members
    STDMETHODIMP        Lock(LPVOID *, LPDWORD, LPVOID *, LPDWORD, DWORD, DWORD, DWORD);
    STDMETHODIMP        Unlock(LPVOID, DWORD, LPVOID, DWORD);
    STDMETHODIMP        SetFormat(LPWAVEFORMATEX);
    STDMETHODIMP        SetFrequency(DWORD);
    STDMETHODIMP        SetVolumePan(PDSVOLUMEPAN);
    STDMETHODIMP        SetPosition(DWORD);
    STDMETHODIMP        GetPosition(LPDWORD, LPDWORD);
    STDMETHODIMP        Play(DWORD, DWORD, DWORD);
    STDMETHODIMP        Stop(void);

    // Other members
    STDMETHODIMP_(BOOL)    IsDeregistered(void);
    STDMETHODIMP_(IDsDriverBuffer*) GetRealDsDriverBuffer(void);
};

//
//
//
class CDrv : public IDsDriver
{
    private:
    int                 m_cRef;
    int                 m_cOpen;
    BOOL                m_fDeregistered;
    IDsDriver           *m_pIDsDriver_Real;
    GUID                m_guidDriver;
    VMMLIST             m_listBuffers;

    static CDrv*        FindFromIDsDriver(IDsDriver *pIDsDriver);
    static CDrv*        FindFromGuid(REFGUID riid);

    public:
    // Class methods
    static HRESULT      CreateAndRegisterDriver(IDsDriver *pIDsDriver);
    static HRESULT      DeregisterDriver(IDsDriver *pIDsDriver);
    static HRESULT      GetDescFromGuid(REFGUID rguidDriver, PDSDRIVERDESC pDrvDesc);
    static HRESULT      GetNextDescFromGuid(LPCGUID pguidLast, LPGUID pGuid, PDSDRIVERDESC pDrvDesc);
    static HRESULT      OpenFromGuid(REFGUID rguidDriver, IDsDriver **ppIDsDriver);

    // new/delete operators
    void* operator new(size_t size);
    void operator delete(void * pv);

    // IUnknown members
    STDMETHODIMP        QueryInterface(REFIID, PVOID*);
    STDMETHODIMP_(ULONG) AddRef(void);
    STDMETHODIMP_(ULONG) Release(void);


    // IDsDriver members
    STDMETHODIMP        GetDriverDesc(PDSDRIVERDESC);
    STDMETHODIMP        Open(void);
    STDMETHODIMP        Close(void);
    STDMETHODIMP        GetCaps(PDSDRIVERCAPS);
    STDMETHODIMP        CreateSoundBuffer(LPWAVEFORMATEX, DWORD, DWORD, LPDWORD, LPBYTE *, LPVOID *);
    STDMETHODIMP        DuplicateSoundBuffer(PIDSDRIVERBUFFER, LPVOID *);
};
#endif

//
//
//
int ctrlDrvInit();
int ctrlDrvExit();

int eventScheduleWin32Event(DWORD vxdh, DWORD dwDelay);

int ioctlDsvxd_GetMixerMutexPtr(PDIOCPARAMETERS pdiocp);

int ioctlMixer_Run(PDIOCPARAMETERS pdiocp);
int ioctlMixer_Stop(PDIOCPARAMETERS pdiocp);
int ioctlMixer_PlayWhenIdle(PDIOCPARAMETERS pdiocp);
int ioctlMixer_StopWhenIdle(PDIOCPARAMETERS pdiocp);
int ioctlMixer_MixListAdd(PDIOCPARAMETERS pdiocp);
int ioctlMixer_MixListRemove(PDIOCPARAMETERS pdiocp);
int ioctlMixer_FilterOn(PDIOCPARAMETERS pdiocp);
int ioctlMixer_FilterOff(PDIOCPARAMETERS pdiocp);
int ioctlMixer_GetBytePosition(PDIOCPARAMETERS pdiocp);
int ioctlMixer_SignalRemix(PDIOCPARAMETERS pdiocp);

int ioctlKeDest_New(PDIOCPARAMETERS pdiocp);
int ioctlMixDest_Delete(PDIOCPARAMETERS pdiocp);
int ioctlMixDest_Initialize(PDIOCPARAMETERS pdiocp);
int ioctlMixDest_Terminate(PDIOCPARAMETERS pdiocp);
int ioctlMixDest_SetFormat(PDIOCPARAMETERS pdiocp);
int ioctlMixDest_SetFormatInfo(PDIOCPARAMETERS pdiocp);
int ioctlMixDest_AllocMixer(PDIOCPARAMETERS pdiocp);
int ioctlMixDest_FreeMixer(PDIOCPARAMETERS pdiocp);
int ioctlMixDest_Play(PDIOCPARAMETERS pdiocp);
int ioctlMixDest_Stop(PDIOCPARAMETERS pdiocp);
int ioctlMixDest_GetFrequency(PDIOCPARAMETERS pdiocp);
int ioctlMixDest_Lock(PDIOCPARAMETERS pdiocp);
int ioctlMixDest_Unlock(PDIOCPARAMETERS pdiocp);

VOID _ZeroMemory(PVOID pDestination, DWORD cbLength);

int VXDINLINE VMM_lstrcmpi(char *pString1, char *pString2);
LPVOID VXDINLINE VMM_GetCurrentContext();
BOOL VXDINLINE VMM_PageAttach(ULONG pagesrc, LPVOID hcontextsrc, ULONG pagedst, ULONG cpages);
BOOL VXDINLINE VMM_PageFree(PVOID pPage, ULONG flags);
void VXDINLINE VMM_EnterMustComplete();
void VXDINLINE VMM_LeaveMustComplete();
BOOL VXDINLINE VWIN32_CloseVxDHandle(DWORD vxdh);

int ctrlDynamicDeviceInit(void);
int ctrlDynamicDeviceExit(void);

int ioctlDsvxdInitialize(PDIOCPARAMETERS pdiocp);
int ioctlDsvxdShutdown(PDIOCPARAMETERS pdiocp);
int ioctlDsvxd_PageFile_Get_Version(PDIOCPARAMETERS pdiocp);
int ioctlDsvxd_VMM_Test_Debug_Installed(PDIOCPARAMETERS pdiocp);
int ioctlDsvxd_VMCPD_Get_Version(PDIOCPARAMETERS pdiocp);
int ioctlDrvGetNextDescFromGuid(PDIOCPARAMETERS pdiocp);
int ioctlDrvGetDescFromGuid(PDIOCPARAMETERS pdiocp);
int ioctlDrvOpenFromGuid(PDIOCPARAMETERS pdiocp);
int ioctlIUnknown_QueryInterface(PDIOCPARAMETERS pdiocp);
int ioctlIUnknown_AddRef(PDIOCPARAMETERS pdiocp);
int ioctlIUnknown_Release(PDIOCPARAMETERS pdiocp);
int ioctlIDsDriver_QueryInterface(PDIOCPARAMETERS pdiocp);
int ioctlIDsDriver_Close(PDIOCPARAMETERS pdiocp);
int ioctlIDsDriver_GetCaps(PDIOCPARAMETERS pdiocp);
int ioctlIDsDriver_CreateSoundBuffer(PDIOCPARAMETERS pdiocp);
int ioctlIDsDriver_DuplicateSoundBuffer(PDIOCPARAMETERS pdiocp);
int ioctlBufferRelease(PDIOCPARAMETERS pdiocp);
int ioctlBufferLock(PDIOCPARAMETERS pdiocp);
int ioctlBufferUnlock(PDIOCPARAMETERS pdiocp);
int ioctlBufferSetFormat(PDIOCPARAMETERS pdiocp);
int ioctlBufferSetFrequency(PDIOCPARAMETERS pdiocp);
int ioctlBufferSetVolumePan(PDIOCPARAMETERS pdiocp);
int ioctlBufferSetPosition(PDIOCPARAMETERS pdiocp);
int ioctlBufferGetPosition(PDIOCPARAMETERS pdiocp);
int ioctlBufferPlay(PDIOCPARAMETERS pdiocp);
int ioctlBufferStop(PDIOCPARAMETERS pdiocp);
int ioctlIDirectSoundPropertySet_GetProperty(PDIOCPARAMETERS pdiocp);
int ioctlIDirectSoundPropertySet_SetProperty(PDIOCPARAMETERS pdiocp);
int ioctlIDirectSoundPropertySet_QuerySupport(PDIOCPARAMETERS pdiocp);
int ioctlEventScheduleWin32Event(PDIOCPARAMETERS pdiocp);
int ioctlEventCloseVxDHandle(PDIOCPARAMETERS pdiocp);
int ioctlMemReserveAlias(PDIOCPARAMETERS pdiocp);
int ioctlMemCommitAlias(PDIOCPARAMETERS pdiocp);
int ioctlMemDecommitAlias(PDIOCPARAMETERS pdiocp);
int ioctlMemRedirectAlias(PDIOCPARAMETERS pdiocp);
int ioctlMemFreeAlias(PDIOCPARAMETERS pdiocp);
int ioctlMemPageLock(PDIOCPARAMETERS pdiocp);
int ioctlMemPageUnlock(PDIOCPARAMETERS pdiocp);
int ioctlMemCommitPhysAlias(PDIOCPARAMETERS pdiocp);
int ioctlMemRedirectPhysAlias(PDIOCPARAMETERS pdiocp);
int ioctlGetInternalVersionNumber(PDIOCPARAMETERS pdiocp);

void Dsvxd_PageFile_Get_Version(PDWORD pVersion, PDWORD pMaxSize, PDWORD pPagerType);
BOOL Dsvxd_VMM_Test_Debug_Installed(void);
void Dsvxd_VMCPD_Get_Version(PLONG pMajorVersion, PLONG pMinorVersion, PLONG pCoprocessorLevel);

HRESULT SERVICE DSOUND_RegisterDeviceDriver(PIDSDRIVER pIDsDriver, DWORD dwFlags);
HRESULT SERVICE DSOUND_DeregisterDeviceDriver(PIDSDRIVER pIDsDriver, DWORD dwFlags);


//--------------------------------------------------------------------------;
//
//  Some useful IOCTL macros
//
//--------------------------------------------------------------------------;

// the ASSERT in IOSTART confirms that the count of
// input bytes is what we expect
#define IOSTART(cbInExpected) LPDWORD pdiocIn  = (LPDWORD)pdiocp->lpvInBuffer; \
                              LPDWORD pdiocOut = (LPDWORD)pdiocp->lpvOutBuffer; \
                              ASSERT( pdiocp->cbInBuffer == (cbInExpected) );

#define IOINPUT(x, t) x = ( *(t*)(pdiocIn++) );

#define IOOUTPUT(x, t) ( *(t*)((pdiocOut++)) ) = x;

// the ASSERT in IORETURN confirms that we read all
// of the bytes out of the input buffer
#define IORETURN (*(DWORD*)pdiocp->lpcbBytesReturned) = ((LPBYTE)pdiocOut) - ((LPBYTE)pdiocp->lpvOutBuffer); \
         ASSERT( (DWORD)(((LPBYTE)pdiocIn) - ((LPBYTE)pdiocp->lpvInBuffer)) == pdiocp->cbInBuffer );

#ifdef DEBUG
#ifndef USEASSERT
#define USEASSERT
#endif
#endif

// ASSERT macro
#undef HOLYCOW
#undef CRLF
#undef ASSERT

#define HOLYCOW "******************************************************************************"
#define CRLF "\n"

#ifdef USEASSERT
#define ASSERT(exp) if(!(exp)) _Trace_Out_Service("DSVXD: "), _Debug_Printf_Service(CRLF HOLYCOW CRLF "Assertion failed in %s, line %u: %s" CRLF HOLYCOW CRLF, __FILE__, __LINE__, #exp), _Debug_Out_Service("")
#else
// Disable empty controlled statement warning for ASSERT macro
#pragma warning(disable:4390)
#define ASSERT(exp)
#endif

// BREAK and DPF macros
#undef DPF
#undef BREAK

#define DPF_GUID_STRING             "{%8.8lX-%4.4X-%4.4X-%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X%2.2X}"
#define DPF_GUID_VAL(guid)          (guid).Data1, (guid).Data2, (guid).Data3, (guid).Data4[0], (guid).Data4[1], (guid).Data4[2], (guid).Data4[3], (guid).Data4[4], (guid).Data4[5], (guid).Data4[6], (guid).Data4[7]

// #define DEBUG_VXDDRIVERCALLS
#ifdef DEBUG_VXDDRIVERCALLS
#define DRVCALL(arg) _Trace_Out_Service("DSVXD: "), _Debug_Printf_Service##arg, _Trace_Out_Service(CRLF)
#else
#define DRVCALL(arg)
#endif

#ifdef DEBUG
#define DPF(arg) _Trace_Out_Service("DSVXD: "), _Debug_Printf_Service##arg, _Trace_Out_Service(CRLF)
#define BREAK(arg) DPF(arg), _Debug_Out_Service("")
#else
#define DPF(arg)
#define BREAK(arg)
#endif

#ifdef __cplusplus
};
#endif

#endif // __DSVXDI_INCLUDED__
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\directx\dsound\dsvxd\dsvxd.cpp ===
//--------------------------------------------------------------------------;
//
//  File: dsvxd.c
//
//  Copyright (c) 1995 Microsoft Corporation.  All Rights Reserved.
//
//  Abstract:
//
//  Contents:
//
//  History:
//      06/15/95	FrankYe
//
//--------------------------------------------------------------------------;
#define WANTVXDWRAPS

#define INITGUID
#include <windows.h>

extern "C" {
#include <vmm.h>
#include <vxdldr.h>
#include <vwin32.h>
#include <vxdwraps.h>
#include <configmg.h>
#include <verinfo.h>
}

#define NODSOUNDWRAPS
#include <mmsystem.h>
#include <dsound.h>
#include <dsdrvi.h>
#include "dsvxd.h"
#include "dsvxdi.h"

#pragma VxD_LOCKED_CODE_SEG
#pragma VxD_LOCKED_DATA_SEG

//--------------------------------------------------------------------------;
//
//  Why is there no wrapper for VMM's _lstrcmpi???  I'll make my own...
//
//--------------------------------------------------------------------------;

int VXDINLINE VMM_lstrcmpi(char *pString1, char *pString2)
{
    int iReturn;
    Touch_Register(eax);
    Touch_Register(ecx);
    Touch_Register(edx);
    _asm push pString1;
    _asm push pString2;
    VMMCall(_lstrcmpi);
    _asm add esp, 2*4;
    _asm mov iReturn, eax;
    return iReturn;
}

LPVOID VXDINLINE VMM_GetCurrentContext()
{
    LPVOID pCD;
    Touch_Register(eax);
    VMMCall(_GetCurrentContext);
    _asm mov pCD, eax;
    return pCD;
}

BOOL VXDINLINE VMM_PageAttach(ULONG pagesrc, LPVOID hcontextsrc, ULONG pagedst, ULONG cpages)
{
    int iReturn;
    Touch_Register(eax);
    Touch_Register(ecx);
    Touch_Register(edx);
    _asm push cpages;
    _asm push pagedst;
    _asm push hcontextsrc;
    _asm push pagesrc;
    VMMCall(_PageAttach);
    _asm add esp, 4*4;
    _asm mov iReturn, eax;
    return (0 != iReturn);
}

BOOL VXDINLINE VMM_PageFree(PVOID pPage, ULONG flags)
{
    return _PageFree(pPage, flags);
}

void VXDINLINE VMM_EnterMustComplete()
{
    Touch_Register(eax);
    Touch_Register(ecx);
    Touch_Register(edx);
    VMMCall(_EnterMustComplete);
    return;
}

void VXDINLINE VMM_LeaveMustComplete()
{
    Touch_Register(eax);
    Touch_Register(ecx);
    Touch_Register(edx);
    VMMCall(_LeaveMustComplete);
    return;
}

BOOL VXDINLINE VWIN32_CloseVxDHandle(DWORD vxdh)
{
    int iReturn;
    Touch_Register(ecx);
    Touch_Register(edx);
    _asm mov eax, vxdh;
    VxDCall(_VWIN32_CloseVxDHandle);
    _asm mov iReturn, eax;
    return (0 != iReturn);
}

/*
BOOL VXDINLINE VMM_PageLock(ULONG pagestrt, ULONG cpages, ULONG dwflags)
{
    int iReturn;
    Touch_Register(eax);
    Touch_Register(ecx);
    Touch_Register(edx);
    _asm push dwflags;
    _asm push cpages;
    _asm push pagestrt;
    VMMCall(_LinPageLock);
    _asm add esp, 3*4;
    _asm mov iReturn, eax;
    return (0 != iReturn);
}

BOOL VXDINLINE VMM_PageUnlock(ULONG pagestrt, ULONG cpages, ULONG dwflags)
{
    int iReturn;
    Touch_Register(eax);
    Touch_Register(ecx);
    Touch_Register(edx);
    _asm push dwflags;
    _asm push cpages;
    _asm push pagestrt;
    VMMCall(_LinPageUnlock);
    _asm add esp, 3*4;
    _asm mov iReturn, eax;
    return (0 != iReturn);
}
*/

//--------------------------------------------------------------------------;
//
//  Filescope data
//
//--------------------------------------------------------------------------;
static LPVOID gpGarbagePage = NULL;

//--------------------------------------------------------------------------;
//
// VxD Device control functions
//
//--------------------------------------------------------------------------;

int ctrlDynamicDeviceInit(void)
{
    DPF(("ctrlDynamicDeviceInit"));
    return ctrlDrvInit();
}

int ctrlDynamicDeviceExit(void)
{
    DPF(("ctrlDynamicDeviceExit"));
    return ctrlDrvExit();
}



#pragma VxD_PAGEABLE_CODE_SEG
#pragma VxD_PAGEABLE_DATA_SEG

//--------------------------------------------------------------------------;
//
// IOCTL handlers
//
//--------------------------------------------------------------------------;

int ioctlDsvxdInitialize(PDIOCPARAMETERS pdiocp)
{
    DSVAL dsv;
    
    IOSTART(0*4);

    //
    // The only thing we need to do is allocate one page of fixed
    // memory to which we will commit alias buffer pointers when
    // we don't want them to point at the real buffer anymore.
    //
    gpGarbagePage = _PageAllocate(1, PG_VM, Get_Sys_VM_Handle(), 0, 0, 0, 0, PAGEFIXED);
    if (NULL != gpGarbagePage) {
	dsv = DS_OK;
    } else {
	dsv = DSERR_OUTOFMEMORY;
    }

    IOOUTPUT(dsv, DSVAL);
    IORETURN;
    return 0;
}

int ioctlDsvxdShutdown(PDIOCPARAMETERS pdiocp)
{
    DSVAL dsv;
    
    IOSTART(0*4);

    if (NULL != gpGarbagePage) _PageFree(gpGarbagePage, 0);
    dsv = DS_OK;
    
    IOOUTPUT(dsv, DSVAL);
    IORETURN;
    return 0;
}


int ioctlDsvxd_PageFile_Get_Version(PDIOCPARAMETERS pdiocp)
{
    PDWORD pVersion;
    PDWORD pMaxSize;
    PDWORD pPagerType;

    IOSTART(3*4);

    IOINPUT(pVersion, PDWORD);
    IOINPUT(pMaxSize, PDWORD);
    IOINPUT(pPagerType, PDWORD);

    Dsvxd_PageFile_Get_Version(pVersion, pMaxSize, pPagerType);
    
    IORETURN;
    return 0;
}

int ioctlDsvxd_VMM_Test_Debug_Installed(PDIOCPARAMETERS pdiocp)
{
    BOOL fInstalled;

    IOSTART(0*4);

    fInstalled = Dsvxd_VMM_Test_Debug_Installed();

    IOOUTPUT(fInstalled, BOOL);
    
    IORETURN;
    return 0;
}

int ioctlDsvxd_VMCPD_Get_Version(PDIOCPARAMETERS pdiocp)
{
    PLONG pMajorVersion;
    PLONG pMinorVersion;
    PLONG pLevel;
    
    IOSTART(3*4);
    IOINPUT(pMajorVersion, PLONG);
    IOINPUT(pMinorVersion, PLONG);
    IOINPUT(pLevel, PLONG);

    Dsvxd_VMCPD_Get_Version(pMajorVersion, pMinorVersion, pLevel);

    IORETURN;
    return 0;
}

//--------------------------------------------------------------------------;
//
//
//
//--------------------------------------------------------------------------;

int ioctlDrvGetNextDescFromGuid(PDIOCPARAMETERS pdiocp)
{
    LPCGUID pGuidLast;
    LPGUID pGuid;
    PDSDRIVERDESC pDrvDesc;
    HRESULT hr;

    IOSTART(3*4);

    IOINPUT(pGuidLast, LPCGUID);
    IOINPUT(pGuid, LPGUID);
    IOINPUT(pDrvDesc, PDSDRIVERDESC);

    hr = CDrv::GetNextDescFromGuid(pGuidLast, pGuid, pDrvDesc);

    IOOUTPUT(hr, HRESULT);
    IORETURN;
    return 0;
}

int ioctlDrvGetDescFromGuid(PDIOCPARAMETERS pdiocp)
{
    LPCGUID pGuid;
    PDSDRIVERDESC pDrvDesc;
    DSVAL dsv;

    IOSTART(2*4);

    IOINPUT(pGuid, LPCGUID);
    IOINPUT(pDrvDesc, PDSDRIVERDESC);

    dsv = CDrv::GetDescFromGuid(*pGuid, pDrvDesc);

    IOOUTPUT(dsv, DSVAL);
    IORETURN;
    return 0;
}

int ioctlDrvOpenFromGuid(PDIOCPARAMETERS pdiocp)
{
    LPCGUID pGuid;
    IDsDriver **ppIDsDriver;
    HRESULT hr;

    IOSTART(2*4);

    IOINPUT(pGuid, LPCGUID);
    IOINPUT(ppIDsDriver, IDsDriver**);

    hr = CDrv::OpenFromGuid(*pGuid, ppIDsDriver);

    IOOUTPUT(hr, HRESULT);
    IORETURN;
    return 0;
}

//--------------------------------------------------------------------------;
//
//
//
//--------------------------------------------------------------------------;
int ioctlIUnknown_QueryInterface(PDIOCPARAMETERS pdiocp)
{
    LPUNKNOWN pIUnknown;
    LPIID riid;
    PVOID *ppv;

    HRESULT hr;

    IOSTART(3*4);

    IOINPUT(pIUnknown, LPUNKNOWN);
    IOINPUT(riid, LPIID);
    IOINPUT(ppv, PVOID*);

    hr = pIUnknown->QueryInterface((REFIID)(*riid), ppv);

    IOOUTPUT(hr, HRESULT);
    IORETURN;
    return 0;
}

//--------------------------------------------------------------------------;
//
//
//
//--------------------------------------------------------------------------;
int ioctlIUnknown_AddRef(PDIOCPARAMETERS pdiocp)
{
    LPUNKNOWN pIUnknown;
    ULONG result;

    IOSTART(1*4);

    IOINPUT(pIUnknown, LPUNKNOWN);

    result = pIUnknown->AddRef();

    IOOUTPUT(result, ULONG);
    IORETURN;
    return 0;
}

//--------------------------------------------------------------------------;
//
//
//
//--------------------------------------------------------------------------;
int ioctlIUnknown_Release(PDIOCPARAMETERS pdiocp)
{
    LPUNKNOWN pIUnknown;
    ULONG result;

    IOSTART(1*4);

    IOINPUT(pIUnknown, LPUNKNOWN);

    result = pIUnknown->Release();

    IOOUTPUT(result, ULONG);
    IORETURN;
    return 0;
}

//--------------------------------------------------------------------------;
//
//
//
//--------------------------------------------------------------------------;
//
// This should really be ioctlIUnknown_QueryInterface, if I would take the time
// to fix up the IOCTLs to DSVXD
//
int ioctlIDsDriver_QueryInterface(PDIOCPARAMETERS pdiocp)
{
    IDsDriver *pIDsDriver;
    const IID *piid;
    PVOID *ppv;
    HRESULT hr;

    IOSTART(3*4);

    IOINPUT(pIDsDriver, IDsDriver*);
    IOINPUT(piid, const IID *);
    IOINPUT(ppv,  PVOID*);

    hr = pIDsDriver->QueryInterface((REFIID)(*piid), ppv);

    IOOUTPUT(hr, HRESULT);
    IORETURN;
    return 0;
}

//--------------------------------------------------------------------------;
//
//
//
//--------------------------------------------------------------------------;

int ioctlIDsDriver_Close(PDIOCPARAMETERS pdiocp)
{
    IDsDriver *pIDsDriver;
    HRESULT hr;
	   
    IOSTART(1*4);
    
    IOINPUT(pIDsDriver, IDsDriver*);

    hr = pIDsDriver->Close();
    
    IOOUTPUT(hr, HRESULT);
    IORETURN;
    return 0;
}

//--------------------------------------------------------------------------;
//
//
//
//--------------------------------------------------------------------------;

int ioctlIDsDriver_GetCaps(PDIOCPARAMETERS pdiocp)
{
    IDsDriver *pIDsDriver;
    PDSDRIVERCAPS pDrvCaps;
    HRESULT hr;
    
    IOSTART(2*4);

    IOINPUT(pIDsDriver, IDsDriver*);
    IOINPUT(pDrvCaps, PDSDRIVERCAPS);

    hr = pIDsDriver->GetCaps(pDrvCaps);

    IOOUTPUT(hr, HRESULT);
    IORETURN;
    return 0;
}

//--------------------------------------------------------------------------;
//
//
//
//--------------------------------------------------------------------------;

int ioctlIDsDriver_CreateSoundBuffer(PDIOCPARAMETERS pdiocp)
{
    IDsDriver *pIDsDriver;
    LPWAVEFORMATEX pwfx;
    DWORD dwFlags;
    DWORD dwCardAddress;
    LPDWORD pdwcbBufferSize;
    LPBYTE *ppBuffer;
    PVOID *ppvObj;
    HRESULT hr;
    
    IOSTART(7*4);

    IOINPUT(pIDsDriver, IDsDriver*);
    IOINPUT(pwfx, LPWAVEFORMATEX);
    IOINPUT(dwFlags, DWORD);
    IOINPUT(dwCardAddress, DWORD);
    IOINPUT(pdwcbBufferSize, LPDWORD);
    IOINPUT(ppBuffer, LPBYTE*);
    IOINPUT(ppvObj, PVOID*);

    hr = pIDsDriver->CreateSoundBuffer(pwfx, dwFlags, dwCardAddress,
				       pdwcbBufferSize, ppBuffer, ppvObj);

    IOOUTPUT(hr, HRESULT);
    IORETURN;
    return 0;
}

//--------------------------------------------------------------------------;
//
//
//
//--------------------------------------------------------------------------;

int ioctlIDsDriver_DuplicateSoundBuffer(PDIOCPARAMETERS pdiocp)
{
    IDsDriver *pIDsDriver;
    IDsDriverBuffer *pIDsDriverBuffer;
    PVOID *ppv;
    HRESULT hr;
    
    IOSTART(3*4);

    IOINPUT(pIDsDriver, IDsDriver*);
    IOINPUT(pIDsDriverBuffer, IDsDriverBuffer*);
    IOINPUT(ppv, PVOID*);

    hr = pIDsDriver->DuplicateSoundBuffer(pIDsDriverBuffer, ppv);

    IOOUTPUT(hr, HRESULT);
    IORETURN;
    return 0;
}





//--------------------------------------------------------------------------;
//
//
//
//--------------------------------------------------------------------------;


//--------------------------------------------------------------------------;
//
//
//
//--------------------------------------------------------------------------;

int ioctlBufferRelease(PDIOCPARAMETERS pdiocp)
{
    PIDSDRIVERBUFFER pBuf;
    DSVAL dsv;
    
    IOSTART(1*4);

    IOINPUT(pBuf, PIDSDRIVERBUFFER);

    dsv = pBuf->Release();

    IOOUTPUT(dsv, DSVAL);
    IORETURN;
    return 0;
}

//--------------------------------------------------------------------------;
//
//
//
//--------------------------------------------------------------------------;

int ioctlBufferLock(PDIOCPARAMETERS pdiocp)
{
    PIDSDRIVERBUFFER pBuf;
    LPVOID * ppvAudio1;
    LPDWORD pdwLen1;
    LPVOID * ppvAudio2;
    LPDWORD pdwLen2;
    DWORD dwWritePosition;
    DWORD dwWriteBytes;
    DWORD dwFlags;
    DSVAL dsv;
    
    IOSTART(8*4);

    IOINPUT(pBuf, PIDSDRIVERBUFFER);
    IOINPUT(ppvAudio1, LPVOID *);
    IOINPUT(pdwLen1, LPDWORD);
    IOINPUT(ppvAudio2, LPVOID *);
    IOINPUT(pdwLen2, LPDWORD);
    IOINPUT(dwWritePosition, DWORD);
    IOINPUT(dwWriteBytes, DWORD);
    IOINPUT(dwFlags, DWORD);

    dsv = pBuf->Lock( ppvAudio1,
		      pdwLen1,
		      ppvAudio2,
		      pdwLen2,
		      dwWritePosition,
		      dwWriteBytes,
		      dwFlags );

    IOOUTPUT(dsv, DSVAL);
    IORETURN;
    return 0;
}

int ioctlBufferUnlock(PDIOCPARAMETERS pdiocp)
{
    PIDSDRIVERBUFFER pBuf;
    PVOID pvAudio1;
    DWORD dwLen1;
    PVOID pvAudio2;
    DWORD dwLen2;
    DSVAL dsv;
    
    IOSTART(5*4);

    IOINPUT(pBuf, PIDSDRIVERBUFFER);
    IOINPUT(pvAudio1, PVOID);
    IOINPUT(dwLen1, DWORD);
    IOINPUT(pvAudio2, PVOID);
    IOINPUT(dwLen2, DWORD);

    dsv = pBuf->Unlock( pvAudio1,
			dwLen1,
			pvAudio2,
			dwLen2 );

    IOOUTPUT(dsv, DSVAL);
    IORETURN;
    return 0;
}

//--------------------------------------------------------------------------;
//
//
//
//--------------------------------------------------------------------------;

int ioctlBufferSetFormat(PDIOCPARAMETERS pdiocp)
{
    PIDSDRIVERBUFFER pBuf;
    LPWAVEFORMATEX pwfxToSet;
    DSVAL dsv;
    
    IOSTART(2*4);

    IOINPUT(pBuf, PIDSDRIVERBUFFER);
    IOINPUT(pwfxToSet, LPWAVEFORMATEX);

    dsv = pBuf->SetFormat(pwfxToSet);

    IOOUTPUT(dsv, DSVAL);
    IORETURN;
    return 0;
}

//--------------------------------------------------------------------------;
//
//
//
//--------------------------------------------------------------------------;

int ioctlBufferSetFrequency(PDIOCPARAMETERS pdiocp)
{
    PIDSDRIVERBUFFER pBuf;
    DWORD dwFrequency;
    DSVAL dsv;
    
    IOSTART(2*4);

    IOINPUT(pBuf, PIDSDRIVERBUFFER);
    IOINPUT(dwFrequency, DWORD);

    dsv = pBuf->SetFrequency(dwFrequency);

    IOOUTPUT(dsv, DSVAL);
    IORETURN;
    return 0;
}

//--------------------------------------------------------------------------;
//
//
//
//--------------------------------------------------------------------------;

int ioctlBufferSetVolumePan(PDIOCPARAMETERS pdiocp)
{
    PIDSDRIVERBUFFER pBuf;
    PDSVOLUMEPAN pVolPan;
    DSVAL dsv;
    
    IOSTART(2*4);

    IOINPUT(pBuf, PIDSDRIVERBUFFER);
    IOINPUT(pVolPan, PDSVOLUMEPAN);

    dsv = pBuf->SetVolumePan(pVolPan);

    IOOUTPUT(dsv, DSVAL);
    IORETURN;
    return 0;
}

//--------------------------------------------------------------------------;
//
//
//
//--------------------------------------------------------------------------;

int ioctlBufferSetPosition(PDIOCPARAMETERS pdiocp)
{
    PIDSDRIVERBUFFER pBuf;
    DWORD dwNewPosition;
    DSVAL dsv;
    
    IOSTART(2*4);

    IOINPUT(pBuf, PIDSDRIVERBUFFER);
    IOINPUT(dwNewPosition, DWORD);

    dsv = pBuf->SetPosition(dwNewPosition);

    IOOUTPUT(dsv, DSVAL);
    IORETURN;
    return 0;
}

int ioctlBufferGetPosition(PDIOCPARAMETERS pdiocp)
{
    PIDSDRIVERBUFFER pBuf;
    LPDWORD lpdwCurrentPlayCursor;
    LPDWORD lpdwCurrentWriteCursor;
    DSVAL dsv;
    
    IOSTART(3*4);

    IOINPUT(pBuf, PIDSDRIVERBUFFER);
    IOINPUT(lpdwCurrentPlayCursor, LPDWORD);
    IOINPUT(lpdwCurrentWriteCursor, LPDWORD);

    dsv = pBuf->GetPosition( lpdwCurrentPlayCursor,
			     lpdwCurrentWriteCursor );

    IOOUTPUT(dsv, DSVAL);
    IORETURN;
    return 0;
}

//--------------------------------------------------------------------------;
//
//
//
//--------------------------------------------------------------------------;

int ioctlBufferPlay(PDIOCPARAMETERS pdiocp)
{
    PIDSDRIVERBUFFER pBuf;
    DWORD dwReserved1;
    DWORD dwReserved2;
    DWORD dwFlags;
    DSVAL dsv;
    
    IOSTART(4*4);

    IOINPUT(pBuf, PIDSDRIVERBUFFER);
    IOINPUT(dwReserved1, DWORD);
    IOINPUT(dwReserved2, DWORD);
    IOINPUT(dwFlags, DWORD);

    dsv = pBuf->Play(dwReserved1, dwReserved2, dwFlags);

    IOOUTPUT(dsv, DSVAL);
    IORETURN;
    return 0;
}

int ioctlBufferStop(PDIOCPARAMETERS pdiocp)
{
    PIDSDRIVERBUFFER pBuf;
    DSVAL dsv;
    
    IOSTART(1*4);

    IOINPUT(pBuf, PIDSDRIVERBUFFER);

    dsv = pBuf->Stop();

    IOOUTPUT(dsv, DSVAL);
    IORETURN;
    return 0;
}

//--------------------------------------------------------------------------;
//
//
//
//--------------------------------------------------------------------------;
int ioctlIDirectSoundPropertySet_GetProperty(PDIOCPARAMETERS pdiocp)
{
    PIDSDRIVERPROPERTYSET pIDsPropertySet;
    PDSPROPERTY pProperty;
    PVOID pParams;
    ULONG cbParams;
    PVOID pData;
    ULONG cbData;
    PULONG pcbReturnedData;
    HRESULT hr;

    IOSTART(7*4);

    IOINPUT(pIDsPropertySet, PIDSDRIVERPROPERTYSET);
    IOINPUT(pProperty, PDSPROPERTY);
    IOINPUT(pParams, PVOID);
    IOINPUT(cbParams, ULONG);
    IOINPUT(pData, PVOID);
    IOINPUT(cbData, ULONG);
    IOINPUT(pcbReturnedData, PULONG);

    hr = pIDsPropertySet->Get(pProperty, pParams, cbParams, pData, cbData, pcbReturnedData);

    IOOUTPUT(hr, HRESULT);
    IORETURN;
    return 0;
}

//--------------------------------------------------------------------------;
//
//
//
//--------------------------------------------------------------------------;
int ioctlIDirectSoundPropertySet_SetProperty(PDIOCPARAMETERS pdiocp)
{
    PIDSDRIVERPROPERTYSET pIDsPropertySet;
    PDSPROPERTY pProperty;
    PVOID pParams;
    ULONG cbParams;
    PVOID pData;
    ULONG cbData;
    HRESULT hr;

    IOSTART(6*4);

    IOINPUT(pIDsPropertySet, PIDSDRIVERPROPERTYSET);
    IOINPUT(pProperty, PDSPROPERTY);
    IOINPUT(pParams, PVOID);
    IOINPUT(cbParams, ULONG);
    IOINPUT(pData, PVOID);
    IOINPUT(cbData, ULONG);

    hr = pIDsPropertySet->Set(pProperty, pParams, cbParams, pData, cbData);

    IOOUTPUT(hr, HRESULT);
    IORETURN;
    return 0;
}

//--------------------------------------------------------------------------;
//
//
//
//--------------------------------------------------------------------------;
int ioctlIDirectSoundPropertySet_QuerySupport(PDIOCPARAMETERS pdiocp)
{
    PIDSDRIVERPROPERTYSET pIDsPropertySet;
    LPGUID rPropSetId;
    ULONG ulPropertyId;
    PULONG pulSupport;
    HRESULT hr;

    IOSTART(4*4);

    IOINPUT(pIDsPropertySet, PIDSDRIVERPROPERTYSET);
    IOINPUT(rPropSetId, LPGUID);
    IOINPUT(ulPropertyId, ULONG);
    IOINPUT(pulSupport, PULONG);

    hr = pIDsPropertySet->QuerySupport((REFGUID)(*rPropSetId), ulPropertyId, pulSupport);

    IOOUTPUT(hr, HRESULT);
    IORETURN;
    return 0;
}

//--------------------------------------------------------------------------;
//
//
//
//--------------------------------------------------------------------------;
int ioctlEventScheduleWin32Event(PDIOCPARAMETERS pdiocp)
{
    DWORD vxdhEvent;
    DWORD dwDelay;
    BOOL fReturn;
    
    IOSTART(2*4);

    IOINPUT(vxdhEvent, DWORD);
    IOINPUT(dwDelay, DWORD);

    fReturn = eventScheduleWin32Event(vxdhEvent, dwDelay);
    // REMIND should implement something to cancel outstanding timeouts
    // and events when we shutdown.

    IOOUTPUT(fReturn, BOOL);
    IORETURN;
    return 0;
}

int ioctlEventCloseVxDHandle(PDIOCPARAMETERS pdiocp)
{
    DWORD vxdh;
    BOOL fReturn;
    
    IOSTART(1*4);

    IOINPUT(vxdh, DWORD);

    fReturn = VWIN32_CloseVxDHandle(vxdh);

    IOOUTPUT(fReturn, BOOL);
    IORETURN;
    return 0;
}

//--------------------------------------------------------------------------;
//
// ioctlMemReserveAlias
//
//	Given a ptr to a buffer and length, this function will reserve linear
// address space to be used as an alias ptr to the same buffer.  The reserved
// linear space does not have the buffer memory committed to it.  That is done
// by ioctlMemCommitAlias.
//
//--------------------------------------------------------------------------;
int ioctlMemReserveAlias(PDIOCPARAMETERS pdiocp)
{
    LPBYTE	pBuffer;
    DWORD	cbBuffer;
    LPBYTE	pAlias;

    LPBYTE	pBufferAligned;
    DWORD	cbBufferAligned;
    int		cPages;
    LPBYTE	pAliasAligned;
    
    IOSTART(2*4);

    IOINPUT(pBuffer, LPBYTE);
    IOINPUT(cbBuffer, DWORD);

    DPF(("ioctlMemReserveAlias pBuffer=%08Xh cbBuffer=%d", pBuffer, cbBuffer));

    pBufferAligned = (LPBYTE)(((DWORD)pBuffer) & ~(P_SIZE-1));
    cPages = (pBuffer+cbBuffer - pBufferAligned+ P_SIZE-1) / P_SIZE;
    cbBufferAligned = cPages * P_SIZE;

    DPF((" pBufferAligned=%08Xh cPages=%d cbBufferAligned=%d",
	 pBufferAligned, cPages, cbBufferAligned));
    
    //
    // Reserve linear address space
    //
    pAliasAligned = (LPBYTE)_PageReserve(PR_SHARED, cPages, PR_FIXED);

    if (((LPBYTE)(-1) == pAliasAligned) || (NULL == pAliasAligned)) {
	pAlias = NULL;
    } else {
	pAlias = pAliasAligned + (pBuffer - pBufferAligned);
    }

    DPF((" pAliasAligned=%08Xh pAlias=%08Xh", pAliasAligned, pAlias));
    
    IOOUTPUT(pAlias, LPBYTE);
    IORETURN;
    return 0;
}

//--------------------------------------------------------------------------;
//
//
//
//--------------------------------------------------------------------------;
int ioctlMemCommitAlias(PDIOCPARAMETERS pdiocp)
{
    LPBYTE	pAlias;
    LPBYTE	pBuffer;
    DWORD	cbBuffer;
    BOOL	fSuccess;

    LPBYTE	pBufferAligned;
    LPBYTE	pAliasAligned;
    ULONG	nPageBuffer;
    ULONG	nPageAlias;
    int		cPages;
    
    IOSTART(3*4);

    IOINPUT(pAlias, LPBYTE);
    IOINPUT(pBuffer, LPBYTE);
    IOINPUT(cbBuffer, DWORD);

    // DPF(("ioctlMemCommitAlias pBuffer=%08Xh cbBuffer=%d pAlias=%08Xh",
    //      pBuffer, cbBuffer, pAlias));
    
    pBufferAligned = (LPBYTE)(((DWORD)pBuffer) & ~(P_SIZE-1));
    pAliasAligned  = (LPBYTE)(((DWORD)pAlias) & ~(P_SIZE-1));
    cPages = (pBuffer+cbBuffer - pBufferAligned+ P_SIZE-1) / P_SIZE;

    nPageBuffer = ((ULONG)pBufferAligned) / P_SIZE;
    nPageAlias = ((ULONG)pAliasAligned) / P_SIZE;

    // DPF((" pBufferAligned=%08Xh pAliasAligned=%08Xh cPages=%d",
    //      pBufferAligned, pAliasAligned, cPages));

    fSuccess = VMM_PageAttach(nPageBuffer, VMM_GetCurrentContext(),
			      nPageAlias, cPages);
    
    IOOUTPUT(fSuccess, BOOL);
    IORETURN;
    return 0;
}

//--------------------------------------------------------------------------;
//
//
//
//--------------------------------------------------------------------------;
int ioctlMemDecommitAlias(PDIOCPARAMETERS pdiocp)
{
    LPBYTE	pAlias;
    DWORD	cbBuffer;
    BOOL	fSuccess;

    int		cPages;
    LPBYTE	pAliasAligned;
    
    LPBYTE	pPageAlias;
    ULONG	nPageAlias;
    
    IOSTART(2*4);

    IOINPUT(pAlias, LPBYTE);
    IOINPUT(cbBuffer, DWORD);

    // DPF(("iocltMemDecommitAlias pAlias=%08Xh", pAlias));
    
    pAliasAligned  = (LPBYTE)(((DWORD)pAlias) & ~(P_SIZE-1));
    cPages = (pAlias + cbBuffer - pAliasAligned+ P_SIZE-1) / P_SIZE;

    pPageAlias = pAliasAligned;
    nPageAlias = ((ULONG)pPageAlias) / P_SIZE;

    // DPF((" nPageAlias=%08Xh nPages=%d", nPageAlias, cPages));
    
    fSuccess = (0 != _PageDecommit(nPageAlias, cPages, 0));
    ASSERT(fSuccess);
    
    IOOUTPUT(fSuccess, BOOL);
    IORETURN;
    return 0;
}

//--------------------------------------------------------------------------;
//
//
//
//--------------------------------------------------------------------------;
int ioctlMemRedirectAlias(PDIOCPARAMETERS pdiocp)
{
    LPBYTE	pAlias;
    DWORD	cbBuffer;
    BOOL	fSuccess;

    LPBYTE	pAliasAligned;
    ULONG	nPageAlias;
    ULONG       nPageGarbage;
    int		cPages;
    
    IOSTART(2*4);

    IOINPUT(pAlias, LPBYTE);
    IOINPUT(cbBuffer, DWORD);

    DPF(("ioctlMemRedirectAlias pAlias=%08Xh cbBuffer=%d", pAlias, cbBuffer));
    
    pAliasAligned  = (LPBYTE)(((DWORD)pAlias) & ~(P_SIZE-1));
    cPages = (pAlias+cbBuffer - pAliasAligned + P_SIZE-1) / P_SIZE;

    nPageAlias = ((ULONG)pAliasAligned) / P_SIZE;
    nPageGarbage = ((ULONG)gpGarbagePage) / P_SIZE;

    // DPF((" pAliasAligned=%08Xh cPages=%d pGarbagePage=%08Xh",
    //      pAliasAligned, cPages, gpGarbagePage));

    // We point every alias page at the same garbage page.  This is
    // MustComplete since the app's thread that is using the alias
    // pointer might not be this current thread and may be writing
    // thru the alias pointer.  We wouldn't want the app's thread to
    // run while the alias pages are decommitted.
    VMM_EnterMustComplete();
    fSuccess = (0 != _PageDecommit(nPageAlias, cPages, 0));
    while (fSuccess && cPages--) {
	fSuccess = VMM_PageAttach(nPageGarbage, VMM_GetCurrentContext(),
				  nPageAlias++, 1);
    }
    VMM_LeaveMustComplete();

    IOOUTPUT(fSuccess, BOOL);
    IORETURN;
    return 0;
}

//--------------------------------------------------------------------------;
//
//
//
//--------------------------------------------------------------------------;
int ioctlMemFreeAlias(PDIOCPARAMETERS pdiocp)
{
    LPBYTE	pAlias;
    DWORD	cbBuffer;
    BOOL	fSuccess;

    LPBYTE	pAliasAligned;
    LPBYTE	pPageAlias;
    
    IOSTART(2*4);

    IOINPUT(pAlias, LPBYTE);
    IOINPUT(cbBuffer, DWORD);

    DPF(("iocltMemFreeAlias pAlias=%08Xh", pAlias));
    
    pAliasAligned  = (LPBYTE)(((DWORD)pAlias) & ~(P_SIZE-1));

    pPageAlias = pAliasAligned;

    DPF((" pPageAlias=%08Xh", pPageAlias));
    
    fSuccess = VMM_PageFree(pPageAlias, 0);
    ASSERT(fSuccess);
    
    IOOUTPUT(fSuccess, BOOL);
    IORETURN;
    return 0;
}

//--------------------------------------------------------------------------;
//
//
//
//--------------------------------------------------------------------------;
int ioctlMemPageLock(PDIOCPARAMETERS pdiocp)
{
    LPBYTE	pMem;
    DWORD	cbBuffer;
    DWORD	dwFlags;
    BOOL	fSuccess;

    LPBYTE	pMemAligned;
    ULONG	nPageMem;
    int		cPages;
    LPDWORD	pdwTable;
    LPVOID	*ppTable;
    DWORD	cPagesTable;

    IOSTART(5*4);

    IOINPUT(pMem, LPBYTE);
    IOINPUT(cbBuffer, DWORD);
    IOINPUT(dwFlags, DWORD);
    IOINPUT(pdwTable, LPDWORD);
    IOINPUT(ppTable, LPVOID*);

    pMemAligned = (LPBYTE)(((DWORD)pMem) & ~(P_SIZE-1));
    cPages = (pMem+cbBuffer - pMemAligned+ P_SIZE-1) / P_SIZE;

    nPageMem = ((ULONG)pMemAligned) / P_SIZE;

    // Allocate the physical table
    cPagesTable = (cPages-1)/1024 + 1;
    *pdwTable = 0;

    // Make sure that it is contiguous (requires FIXED & USEALIGN)
    *ppTable = _PageAllocate(cPagesTable, PG_SYS, 
	    Get_Sys_VM_Handle(), 0, 0, 0xffffff, (LPVOID *) pdwTable, 
            dwFlags | PAGEUSEALIGN | PAGEFIXED | PAGECONTIG);

    if (*pdwTable == 0)
	fSuccess = 0;
    else
	fSuccess = 1;

    if (fSuccess)
    {
        /*
         * Mask off the stuff that Intel gives us in the page table's physical address
         */
        *pdwTable = (*pdwTable) & 0xfffff000;

	fSuccess = _LinPageLock(nPageMem, cPages, dwFlags);
	if (!fSuccess)
	{
	    _PageFree((LPVOID)*ppTable, 0);
	    *ppTable = 0;
	    *pdwTable = 0;
	}
    }
    
    if (fSuccess)
    {
	fSuccess = _CopyPageTable(nPageMem, cPages, (LPDWORD)*ppTable, 0);
	if (!fSuccess)
	{
	    _LinPageUnLock(nPageMem, cPages, dwFlags);
	    _PageFree((LPVOID)*ppTable, 0);
	    *ppTable = 0;
	    *pdwTable = 0;
	}
    }
    
    IOOUTPUT(fSuccess, BOOL);
    IORETURN;
    return 0;
}

//--------------------------------------------------------------------------;
//
//
//
//--------------------------------------------------------------------------;
int ioctlMemPageUnlock(PDIOCPARAMETERS pdiocp)
{
    LPBYTE	pMem;
    DWORD	cbBuffer;
    DWORD	dwFlags;
    BOOL	fSuccess;

    LPBYTE	pMemAligned;
    ULONG	nPageMem;
    int		cPages;
    LPDWORD	pTable;
    
    IOSTART(4*4);

    IOINPUT(pMem, LPBYTE);
    IOINPUT(cbBuffer, DWORD);
    IOINPUT(dwFlags, DWORD);
    IOINPUT(pTable, LPDWORD);

    pMemAligned = (LPBYTE)(((DWORD)pMem) & ~(P_SIZE-1));
    cPages = (pMem + cbBuffer - pMemAligned + P_SIZE-1) / P_SIZE;

    nPageMem = ((ULONG)pMemAligned) / P_SIZE;

    fSuccess = _LinPageUnLock(nPageMem, cPages, dwFlags);

    if (fSuccess)
    {
	_PageFree((LPVOID)pTable, 0);
    }
    IOOUTPUT(fSuccess, BOOL);
    IORETURN;
    return 0;
}

//--------------------------------------------------------------------------;
//
//
//
//--------------------------------------------------------------------------;
int ioctlMemCommitPhysAlias(PDIOCPARAMETERS pdiocp)
{
    LPBYTE	pAlias;
    LPBYTE	pBuffer;
    DWORD	cbBuffer;
    BOOL	fSuccess;

    LPBYTE	pBufferAligned;
    LPBYTE	pAliasAligned;
    LPBYTE      pEndOfBuffer;
    ULONG	nPageBuffer;
    ULONG	nPageAlias;
    ULONG       nPhysPage;
    int		cPages;
    DWORD       dwPTE;
    
    IOSTART(3*4);

    IOINPUT(pAlias, LPBYTE);
    IOINPUT(pBuffer, LPBYTE);
    IOINPUT(cbBuffer, DWORD);

    DPF(("ioctlMemCommitAlias pBuffer=%08Xh cbBuffer=%d pAlias=%08Xh",
         pBuffer, cbBuffer, pAlias));
    
    pEndOfBuffer = pBuffer + cbBuffer;
    pBufferAligned = (LPBYTE)(((DWORD)pBuffer) & ~(P_SIZE-1));
    pAliasAligned  = (LPBYTE)(((DWORD)pAlias) & ~(P_SIZE-1));
    cPages = (pEndOfBuffer - pBufferAligned + P_SIZE-1) / P_SIZE;

    nPageBuffer = ((ULONG)pBufferAligned) / P_SIZE;
    nPageAlias = ((ULONG)pAliasAligned) / P_SIZE;

    DPF((" pBufferAligned=%08Xh pAliasAligned=%08Xh cPages=%d",
         pBufferAligned, pAliasAligned, cPages));


    // ALERT: A really very nasty hack. We DO NOT want to commit the alias
    // to the given memory if the memory really is system rather than video
    // memory (the pages could change the physical pages and we will be left
    // pointing at garbage). Therefore, we need to make sure this is physical
    // memory outside the memory managers control and not system memory. The
    // problem is how to do this. Well, we really want to test the internal
    // memory manage PT_PHYS bit but this is undocumented so instead I try
    // to simply use VMM_PageAttach() as we know this will fail if you give it
    // physical pages. Hence if the PageAttach() works we have system memory
    // and we do NOT want to commit the alias. However, if it fails all should
    // be well and we can commit the memory.
    //
    // Told you it was ugly (CMcC)
    fSuccess = VMM_PageAttach(nPageBuffer, VMM_GetCurrentContext(),
			      nPageAlias, cPages);
    if (fSuccess)
    {
	DPF((" Heap memory is system memory. Not commiting the alias" ));
	_PageDecommit(nPageAlias, cPages, 0);
	IOOUTPUT(FALSE, BOOL);
	IORETURN;
	return 0;
    }

    VMM_EnterMustComplete();
    fSuccess = TRUE;
    while (fSuccess && cPages--) {
	fSuccess = _CopyPageTable(nPageBuffer++, 1UL, &dwPTE, 0UL);
	if (fSuccess) {
	    nPhysPage = (dwPTE >> 12UL) & 0x000FFFFF;
	    fSuccess = _PageCommitPhys(nPageAlias++, 1, nPhysPage, PC_USER | PC_WRITEABLE);
	}
    }
    VMM_LeaveMustComplete();
    
    IOOUTPUT(fSuccess, BOOL);
    IORETURN;
    return 0;
}

//--------------------------------------------------------------------------;
//
//
//
//--------------------------------------------------------------------------;
int ioctlMemRedirectPhysAlias(PDIOCPARAMETERS pdiocp)
{
    LPBYTE	pAlias;
    DWORD	cbBuffer;
    BOOL	fSuccess;

    LPBYTE	pAliasAligned;
    ULONG	nPageAlias;
    ULONG       nPageGarbage;
    int		cPages;
    
    IOSTART(2*4);

    IOINPUT(pAlias, LPBYTE);
    IOINPUT(cbBuffer, DWORD);

    DPF(("ioctlMemRedirectPhysAlias pAlias=%08Xh cbBuffer=%d", pAlias, cbBuffer));
    
    pAliasAligned  = (LPBYTE)(((DWORD)pAlias) & ~(P_SIZE-1));
    cPages = (pAlias+cbBuffer - pAliasAligned + P_SIZE-1) / P_SIZE;

    nPageAlias = ((ULONG)pAliasAligned) / P_SIZE;
    nPageGarbage = (ULONG)_GetNulPageHandle();

    // DPF((" pAliasAligned=%08Xh cPages=%d pGarbagePage=%08Xh",
    //      pAliasAligned, cPages, gpGarbagePage));

    // We point every alias page at the same garbage page.  This is
    // MustComplete since the app's thread that is using the alias
    // pointer might not be this current thread and may be writing
    // thru the alias pointer.  We wouldn't want the app's thread to
    // run while the alias pages are decommitted.
    VMM_EnterMustComplete();
    fSuccess = (0 != _PageDecommit(nPageAlias, cPages, 0));
    if (fSuccess)
	fSuccess = _PageCommitPhys(nPageAlias, cPages, nPageGarbage, PC_USER | PC_WRITEABLE);
    VMM_LeaveMustComplete();

    IOOUTPUT(fSuccess, BOOL);
    IORETURN;
    return 0;
}

//--------------------------------------------------------------------------;
//
//
//
//--------------------------------------------------------------------------;
int ioctlGetInternalVersionNumber(PDIOCPARAMETERS pdiocp)
{

#ifndef VER_PRODUCTVERSION_DW
#define VER_PRODUCTVERSION_DW MAKELONG(MAKEWORD(MANVERSION, MANREVISION), MAKEWORD(MANMINORREV, BUILD_NUMBER))
#endif // VER_PRODUCTVERSION_DW

    IOSTART(0*4);
    IOOUTPUT(VER_PRODUCTVERSION_DW, DWORD);
    IORETURN;
    return 0;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\directx\dxcrt\i386\ftol.asm ===
page	,132
	title	87ftol	 - truncate TOS to 32-bit integer
;*** 
;87ftol.asm - truncate TOS to 32-bit integer
;
;	Copyright (c) 1985-88, Microsoft Corporation
;
;Purpose:
;
;*******************************************************************************


.xlist
	include cruntime.inc
.list

	CODESEG

	public	_ftol
_ftol	proc

	local	oldcw:word
	local	newcw:word
	local	intval:qword

	fstcw	[oldcw] 		; get control word
	fwait				; synchronize

	mov	ax, [oldcw]		; round mode saved
	or	ah, 0ch 		; set chop rounding mode
	mov	[newcw], ax		; back to memory

	fldcw	[newcw] 		; reset rounding
	fistp	qword ptr [intval]	; store chopped integer
	fldcw	[oldcw] 		; restore rounding

	mov	eax, dword ptr [intval]
	mov	edx, dword ptr [intval+4]

	ret
_ftol	endp

	end
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\directx\dxcrt\i386\lldiv.asm ===
title   lldiv - signed long divide routine
;***
;lldiv.asm - signed long divide routine
;
;       Copyright (c) 1985-1994, Microsoft Corporation. All rights reserved.
;
;Purpose:
;       defines the signed long divide routine
;           __alldiv
;
;*******************************************************************************


.xlist
include cruntime.inc
include mm.inc
.list

;***
;lldiv - signed long divide
;
;Purpose:
;       Does a signed long divide of the arguments.  Arguments are
;       not changed.
;
;Entry:
;       Arguments are passed on the stack:
;               1st pushed: divisor (QWORD)
;               2nd pushed: dividend (QWORD)
;
;Exit:
;       EDX:EAX contains the quotient (dividend/divisor)
;       NOTE: this routine removes the parameters from the stack.
;
;Uses:
;       ECX
;
;Exceptions:
;
;*******************************************************************************

        CODESEG

_alldiv PROC NEAR

        push    edi
        push    esi
        push    ebx

; Set up the local stack and save the index registers.  When this is done
; the stack frame will look as follows (assuming that the expression a/b will
; generate a call to lldiv(a, b)):
;
;               -----------------
;               |               |
;               |---------------|
;               |               |
;               |--divisor (b)--|
;               |               |
;               |---------------|
;               |               |
;               |--dividend (a)-|
;               |               |
;               |---------------|
;               | return addr** |
;               |---------------|
;               |      EDI      |
;               |---------------|
;               |      ESI      |
;               |---------------|
;       ESP---->|      EBX      |
;               -----------------
;

DVND    equ     [esp + 16]      ; stack address of dividend (a)
DVSR    equ     [esp + 24]      ; stack address of divisor (b)


; Determine sign of the result (edi = 0 if result is positive, non-zero
; otherwise) and make operands positive.

        xor     edi,edi         ; result sign assumed positive

        mov     eax,HIWORD(DVND) ; hi word of a
        or      eax,eax         ; test to see if signed
        jge     short L1        ; skip rest if a is already positive
        inc     edi             ; complement result sign flag
        mov     edx,LOWORD(DVND) ; lo word of a
        neg     eax             ; make a positive
        neg     edx
        sbb     eax,0
        mov     HIWORD(DVND),eax ; save positive value
        mov     LOWORD(DVND),edx
L1:
        mov     eax,HIWORD(DVSR) ; hi word of b
        or      eax,eax         ; test to see if signed
        jge     short L2        ; skip rest if b is already positive
        inc     edi             ; complement the result sign flag
        mov     edx,LOWORD(DVSR) ; lo word of a
        neg     eax             ; make b positive
        neg     edx
        sbb     eax,0
        mov     HIWORD(DVSR),eax ; save positive value
        mov     LOWORD(DVSR),edx
L2:

;
; Now do the divide.  First look to see if the divisor is less than 4194304K.
; If so, then we can use a simple algorithm with word divides, otherwise
; things get a little more complex.
;
; NOTE - eax currently contains the high order word of DVSR
;

        or      eax,eax         ; check to see if divisor < 4194304K
        jnz     short L3        ; nope, gotta do this the hard way
        mov     ecx,LOWORD(DVSR) ; load divisor
        mov     eax,HIWORD(DVND) ; load high word of dividend
        xor     edx,edx
        div     ecx             ; eax <- high order bits of quotient
        mov     ebx,eax         ; save high bits of quotient
        mov     eax,LOWORD(DVND) ; edx:eax <- remainder:lo word of dividend
        div     ecx             ; eax <- low order bits of quotient
        mov     edx,ebx         ; edx:eax <- quotient
        jmp     short L4        ; set sign, restore stack and return

;
; Here we do it the hard way.  Remember, eax contains the high word of DVSR
;

L3:
        mov     ebx,eax         ; ebx:ecx <- divisor
        mov     ecx,LOWORD(DVSR)
        mov     edx,HIWORD(DVND) ; edx:eax <- dividend
        mov     eax,LOWORD(DVND)
L5:
        shr     ebx,1           ; shift divisor right one bit
        rcr     ecx,1
        shr     edx,1           ; shift dividend right one bit
        rcr     eax,1
        or      ebx,ebx
        jnz     short L5        ; loop until divisor < 4194304K
        div     ecx             ; now divide, ignore remainder
        mov     esi,eax         ; save quotient

;
; We may be off by one, so to check, we will multiply the quotient
; by the divisor and check the result against the orignal dividend
; Note that we must also check for overflow, which can occur if the
; dividend is close to 2**64 and the quotient is off by 1.
;

        mul     dword ptr HIWORD(DVSR) ; QUOT * HIWORD(DVSR)
        mov     ecx,eax
        mov     eax,LOWORD(DVSR)
        mul     esi             ; QUOT * LOWORD(DVSR)
        add     edx,ecx         ; EDX:EAX = QUOT * DVSR
        jc      short L6        ; carry means Quotient is off by 1

;
; do long compare here between original dividend and the result of the
; multiply in edx:eax.  If original is larger or equal, we are ok, otherwise
; subtract one (1) from the quotient.
;

        cmp     edx,HIWORD(DVND) ; compare hi words of result and original
        ja      short L6        ; if result > original, do subtract
        jb      short L7        ; if result < original, we are ok
        cmp     eax,LOWORD(DVND) ; hi words are equal, compare lo words
        jbe     short L7        ; if less or equal we are ok, else subtract
L6:
        dec     esi             ; subtract 1 from quotient
L7:
        xor     edx,edx         ; edx:eax <- quotient
        mov     eax,esi

;
; Just the cleanup left to do.  edx:eax contains the quotient.  Set the sign
; according to the save value, cleanup the stack, and return.
;

L4:
        dec     edi             ; check to see if result is negative
        jnz     short L8        ; if EDI == 0, result should be negative
        neg     edx             ; otherwise, negate the result
        neg     eax
        sbb     edx,0

;
; Restore the saved registers and return.
;

L8:
        pop     ebx
        pop     esi
        pop     edi

        ret     16

_alldiv ENDP

end
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\directx\dxcrt\i386\llmul.asm ===
title   llmul - long multiply routine
;***
;llmul.asm - long multiply routine
;
;       Copyright (c) 1985-1994, Microsoft Corporation. All rights reserved.
;
;Purpose:
;       Defines long multiply routine
;       Both signed and unsigned routines are the same, since multiply's
;       work out the same in 2's complement
;       creates the following routine:
;           __allmul
;
;*******************************************************************************


.xlist
include cruntime.inc
include mm.inc
.list

;***
;llmul - long multiply routine
;
;Purpose:
;       Does a long multiply (same for signed/unsigned)
;       Parameters are not changed.
;
;Entry:
;       Parameters are passed on the stack:
;               1st pushed: multiplier (QWORD)
;               2nd pushed: multiplicand (QWORD)
;
;Exit:
;       EDX:EAX - product of multiplier and multiplicand
;       NOTE: parameters are removed from the stack
;
;Uses:
;       ECX
;
;Exceptions:
;
;*******************************************************************************

        CODESEG

_allmul PROC NEAR

A       EQU     [esp + 4]       ; stack address of a
B       EQU     [esp + 12]      ; stack address of b

;
;       AHI, BHI : upper 32 bits of A and B
;       ALO, BLO : lower 32 bits of A and B
;
;             ALO * BLO
;       ALO * BHI
; +     BLO * AHI
; ---------------------
;

        mov     eax,HIWORD(A)
        mov     ecx,HIWORD(B)
        or      ecx,eax         ;test for both hiwords zero.
        mov     ecx,LOWORD(B)
        jnz     short hard      ;both are zero, just mult ALO and BLO

        mov     eax,LOWORD(A)
        mul     ecx

        ret     16              ; callee restores the stack

hard:
        push    ebx

; must redefine A and B since esp has been altered

A2      EQU     [esp + 8]       ; stack address of a
B2      EQU     [esp + 16]      ; stack address of b

        mul     ecx             ;eax has AHI, ecx has BLO, so AHI * BLO
        mov     ebx,eax         ;save result

        mov     eax,LOWORD(A2)
        mul     dword ptr HIWORD(B2) ;ALO * BHI
        add     ebx,eax         ;ebx = ((ALO * BHI) + (AHI * BLO))

        mov     eax,LOWORD(A2)  ;ecx = BLO
        mul     ecx             ;so edx:eax = ALO*BLO
        add     edx,ebx         ;now edx has all the LO*HI stuff

        pop     ebx

        ret     16              ; callee restores the stack

_allmul ENDP

        end
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\directx\dsound\dsvxd\i386\dshel.asm ===
;****************************************************************************
;**									   **
;**									   **
;**									   **
;**									   **
;**									   **
;**									   **
;**									   **
;**									   **
;****************************************************************************

	.386



	.xlist
	include vmm.inc
	include vtd.inc
	include debug.inc
;       include mmdevldr.inc
	include vwin32.inc
	include pagefile.inc
	include vmcpd.inc
;	include shell.inc
;       include debugsys.inc
	.list

Create_DSOUND_Service_Table equ 1
	include dsdriver.inc


	OPTION SCOPED

;****************************************************************************
;**									   **
;**  VxD declaration							   **
;**									   **
;****************************************************************************

DSOUND_VERSION_MAJOR  equ 4	; Version 4.02
DSOUND_VERSION_MINOR  equ 2	;

Declare_Virtual_Device DSOUND,					\
	       DSOUND_VERSION_MAJOR, DSOUND_VERSION_MINOR,	\
	       DSOUND_Control,					\
	       DSOUND_Device_ID,					\
	       UNDEFINED_INIT_ORDER,				\
	       DSOUND_API_Handler,				\
	       DSOUND_API_Handler

;****************************************************************************
;**									   **
;**  Macro, equate, and type declarations				   **
;**									   **
;****************************************************************************

LONG_MAX	   equ 7fffffffh    ;Maximum 32-bit signed value

RESAMPLING_TOLERANCE   equ 0	    ;E.g., 655=1% resampling tolerance


;****************************************************************************
;**									   **
;**  Locked data							   **
;**									   **
;****************************************************************************

VxD_LOCKED_DATA_SEG

;****************************************************************************
;**									   **
;** Primitive vectors generated at beginning of data segment		   **
;**									   **
;** 1st 32 entries:  MAKE_DC procedures for AILSSA_DMA_copy()		   **
;** 2nd 128 entries: MAKE_MERGE procedures for AILSSA_merge()		   **
;**									   **
;****************************************************************************

	;
	;First device code is duplicated since IOCTL calls with
	;function 0 always fail in Win95 for some reason
	;
	;---
        ;
        ; Read the documentation, silly.  Function 0 is DIOC_OPEN.
        ; It is the VxD version of PROCESS_ATTACH.

DSVXD_IOCTL_Table LABEL DWORD

	dd OFFSET32 _ioctlDsvxdGetVersion
	dd OFFSET32 _ioctlDsvxdInitialize
	dd OFFSET32 _ioctlDsvxdShutdown

	dd OFFSET32 _ioctlDrvGetNextDescFromGuid
	dd OFFSET32 _ioctlDrvGetDescFromGuid
	dd OFFSET32 _ioctlIDsDriver_QueryInterface
	dd OFFSET32 _ioctlDrvOpenFromGuid

	dd OFFSET32 _ioctlIDsDriver_Close
	dd OFFSET32 _ioctlIDsDriver_GetCaps
	dd OFFSET32 _ioctlIDsDriver_CreateSoundBuffer
	dd OFFSET32 _ioctlIDsDriver_DuplicateSoundBuffer

	dd OFFSET32 _ioctlBufferRelease
	dd OFFSET32 _ioctlBufferLock
	dd OFFSET32 _ioctlBufferUnlock
	dd OFFSET32 _ioctlBufferSetFormat
	dd OFFSET32 _ioctlBufferSetFrequency
	dd OFFSET32 _ioctlBufferSetVolumePan
	dd OFFSET32 _ioctlBufferSetPosition
	dd OFFSET32 _ioctlBufferGetPosition
	dd OFFSET32 _ioctlBufferPlay
	dd OFFSET32 _ioctlBufferStop

	dd OFFSET32 _ioctlEventScheduleWin32Event
	dd OFFSET32 _ioctlEventCloseVxDHandle

	dd OFFSET32 _ioctlMemReserveAlias
	dd OFFSET32 _ioctlMemCommitAlias
        dd OFFSET32 _ioctlMemRedirectAlias
	dd OFFSET32 _ioctlMemDecommitAlias
	dd OFFSET32 _ioctlMemFreeAlias
	dd OFFSET32 _ioctlMemPageLock
	dd OFFSET32 _ioctlMemPageUnlock

	dd OFFSET32 _ioctlDsvxd_PageFile_Get_Version
	dd OFFSET32 _ioctlDsvxd_VMM_Test_Debug_Installed
	dd OFFSET32 _ioctlDsvxd_VMCPD_Get_Version

	dd OFFSET32 _ioctlDsvxd_GetMixerMutexPtr

	dd OFFSET32 _ioctlMixer_Run
	dd OFFSET32 _ioctlMixer_Stop
	dd OFFSET32 _ioctlMixer_PlayWhenIdle
	dd OFFSET32 _ioctlMixer_StopWhenIdle
	dd OFFSET32 _ioctlMixer_MixListAdd
	dd OFFSET32 _ioctlMixer_MixListRemove
	dd OFFSET32 _ioctlMixer_FilterOn
	dd OFFSET32 _ioctlMixer_FilterOff
	dd OFFSET32 _ioctlMixer_GetBytePosition
	dd OFFSET32 _ioctlMixer_SignalRemix

	dd OFFSET32 _ioctlKeDest_New
	dd OFFSET32 _ioctlMixDest_Delete
	dd OFFSET32 _ioctlMixDest_Initialize
	dd OFFSET32 _ioctlMixDest_Terminate
	dd OFFSET32 _ioctlMixDest_SetFormat
	dd OFFSET32 _ioctlMixDest_SetFormatInfo
	dd OFFSET32 _ioctlMixDest_AllocMixer
	dd OFFSET32 _ioctlMixDest_FreeMixer
	dd OFFSET32 _ioctlMixDest_Play
	dd OFFSET32 _ioctlMixDest_Stop
	dd OFFSET32 _ioctlMixDest_GetFrequency

	dd OFFSET32 _ioctlMemCommitPhysAlias
	dd OFFSET32 _ioctlMemRedirectPhysAlias

	dd OFFSET32 _ioctlIUnknown_QueryInterface
	dd OFFSET32 _ioctlIUnknown_AddRef
	dd OFFSET32 _ioctlIUnknown_Release

	dd OFFSET32 _ioctlIDirectSoundPropertySet_GetProperty
	dd OFFSET32 _ioctlIDirectSoundPropertySet_SetProperty
	dd OFFSET32 _ioctlIDirectSoundPropertySet_QuerySupport

        dd OFFSET32 _ioctlGetInternalVersionNumber


DSOUND_N_IOCTLS	  EQU ($-DSVXD_IOCTL_Table) / SIZE DWORD

	;
	;Pointer to input/output parms
	;

IOCTL_parms dd ?

VxD_LOCKED_DATA_ENDS

;****************************************************************************
;**									   **
;**  Locked code							   **
;**									   **
;****************************************************************************

VxD_LOCKED_CODE_SEG

extrn _ioctlDsvxdInitialize:NEAR
extrn _ioctlDsvxdShutdown:NEAR

extrn _ioctlDrvGetNextDescFromGuid:NEAR
extrn _ioctlDrvGetDescFromGuid:NEAR
extrn _ioctlDrvOpenFromGuid:NEAR

extrn _ioctlIDsDriver_QueryInterface:NEAR
extrn _ioctlIDsDriver_Close:NEAR
extrn _ioctlIDsDriver_GetCaps:NEAR
extrn _ioctlIDsDriver_CreateSoundBuffer:NEAR
extrn _ioctlIDsDriver_DuplicateSoundBuffer:NEAR

extrn _ioctlBufferRelease:NEAR
extrn _ioctlBufferLock:NEAR
extrn _ioctlBufferUnlock:NEAR
extrn _ioctlBufferSetFormat:NEAR
extrn _ioctlBufferSetFrequency:NEAR
extrn _ioctlBufferSetVolumePan:NEAR
extrn _ioctlBufferSetPosition:NEAR
extrn _ioctlBufferGetPosition:NEAR
extrn _ioctlBufferPlay:NEAR
extrn _ioctlBufferStop:NEAR

extrn _ioctlEventScheduleWin32Event:NEAR
extrn _ioctlEventCloseVxDHandle:NEAR

extrn _ioctlMemReserveAlias:NEAR
extrn _ioctlMemCommitAlias:NEAR
extrn _ioctlMemRedirectAlias:NEAR
extrn _ioctlMemDecommitAlias:NEAR
extrn _ioctlMemFreeAlias:NEAR
extrn _ioctlMemPageLock:NEAR
extrn _ioctlMemPageUnlock:NEAR

extrn _ioctlDsvxd_PageFile_Get_Version:NEAR
extrn _ioctlDsvxd_VMM_Test_Debug_Installed:NEAR
extrn _ioctlDsvxd_VMCPD_Get_Version:NEAR

extrn _ioctlDsvxd_GetMixerMutexPtr:NEAR

extrn _ioctlMixer_Run:NEAR
extrn _ioctlMixer_Stop:NEAR
extrn _ioctlMixer_PlayWhenIdle:NEAR
extrn _ioctlMixer_StopWhenIdle:NEAR
extrn _ioctlMixer_MixListAdd:NEAR
extrn _ioctlMixer_MixListRemove:NEAR
extrn _ioctlMixer_FilterOn:NEAR
extrn _ioctlMixer_FilterOff:NEAR
extrn _ioctlMixer_GetBytePosition:NEAR
extrn _ioctlMixer_SignalRemix:NEAR

extrn _ioctlKeDest_New:NEAR
extrn _ioctlMixDest_Delete:NEAR
extrn _ioctlMixDest_Initialize:NEAR
extrn _ioctlMixDest_Terminate:NEAR
extrn _ioctlMixDest_SetFormat:NEAR
extrn _ioctlMixDest_SetFormatInfo:NEAR
extrn _ioctlMixDest_AllocMixer:NEAR
extrn _ioctlMixDest_FreeMixer:NEAR
extrn _ioctlMixDest_Play:NEAR
extrn _ioctlMixDest_Stop:NEAR
extrn _ioctlMixDest_GetFrequency:NEAR

extrn _ioctlMemCommitPhysAlias:NEAR
extrn _ioctlMemRedirectPhysAlias:NEAR

extrn _ioctlIUnknown_QueryInterface:NEAR
extrn _ioctlIUnknown_AddRef:NEAR
extrn _ioctlIUnknown_Release:NEAR

extrn _ioctlIDirectSoundPropertySet_QuerySupport:NEAR
extrn _ioctlIDirectSoundPropertySet_SetProperty:NEAR
extrn _ioctlIDirectSoundPropertySet_GetProperty:NEAR

extrn _ioctlGetInternalVersionNumber:NEAR

;****************************************************************************
;**									   **
;**  IOCTL dispatcher for VxD						   **
;**									   **
;**  Dispatch control messages to the correct handlers. Must be in	   **
;**  locked code segment. (All VxD segments are locked in 3.0/3.1)	   **
;**									   **
;**  ENTRY:								   **
;**									   **
;**  EXIT:								   **
;**  Carry clear success; Carry Set if fail.				   **
;**									   **
;****************************************************************************

BeginProc   DSOUND_Control

	Control_Dispatch Sys_Dynamic_Device_Init, ctrlDynamicDeviceInitA
	Control_Dispatch Sys_Dynamic_Device_Exit, ctrlDynamicDeviceExitA
	Control_Dispatch W32_DEVICEIOCONTROL, ctrlDeviceIOControl

;	Trace_Out "DSOUND_Control "

	clc
	ret

EndProc	    DSOUND_Control

;****************************************************************************
;**									   **
;**  API dispatcher for VxD						   **
;**									   **
;**  Dispatch control messages to the correct handlers.			   **
;**									   **
;**  ENTRY:								   **
;**									   **
;**  EXIT:								   **
;**  Carry clear success; Carry Set if fail.				   **
;**									   **
;****************************************************************************

BeginProc   DSOUND_API_Handler

	Trace_Out "DSOUND_API_Handler "
	clc
	ret

EndProc	    DSOUND_API_Handler

;---------------------------------------------------------------------------;
;
; ctrlDynamicDeviceInit and Exit
;
;---------------------------------------------------------------------------;


BeginProc ctrlDynamicDeviceInitA
	Ccall   _ctrlDynamicDeviceInit
	sub	eax, 1
	ret
EndProc ctrlDynamicDeviceInitA

BeginProc ctrlDynamicDeviceExitA
	Ccall _ctrlDynamicDeviceExit
	sub	eax, 1
	ret
EndProc ctrlDynamicDeviceExitA

;------------------------------------------------------------------------------
; FUNC	DSOUND_GetVersion	- Locked Code
;
; ENTRY
;	None
;
; EXIT
;	AH = Major version number
;	AL = Minor version number
;	Carry flag clear
;
; USES
;	EAX, Flags
;
;------------------------------------------------------------------------------
BeginProc _DSOUND_GetVersion, SERVICE
	mov eax, DSOUND_VERSION_MAJOR * 100h + DSOUND_VERSION_MINOR
	clc
	ret
EndProc _DSOUND_GetVersion

;****************************************************************************
;**									   **
;**   ctrlDeviceIOControl						   **
;**									   **
;**   DESCRIPTION: This function is called to perform Device IO		   **
;**	for a 32 bit process which has opened this device with		   **
;**	<f CreateFile>, and is performing IO using			   **
;**	<f DeviceIOControl>. Preserves the C32	calling registers	   **
;**	ESI, EDI, and EBX.						   **
;**									   **
;**   ENTRY:	   EBX	DDB						   **
;**	   ECX	dwIoControlCode						   **
;**	   ESI	ptr to DIOCParams					   **
;**									   **
;**   EXIT:  As determined by function, or 1 if invalid IOCTL		   **
;**									   **
;**   -----                                                                **
;**									   **
;**   Note: Function 0 is documented in vmm.h                              **
;**   as DIOC_OPEN.  It is your VxD's PROCESS_ATTACH call.                 **
;**									   **
;****************************************************************************

BeginProc   ctrlDeviceIOControl

	cmp ecx, DSOUND_N_IOCTLS
        jae     cDIOC_InvalidCode

	push edi
	push esi
	push ebx

	mov IOCTL_parms,esi

	push esi
	call DSVXD_IOCTL_Table[ecx*4]
	add esp, 4

	pop ebx
	pop esi
	pop edi
	ret

cDIOC_InvalidCode:
IFDEF   DEBUG
        cmp     ecx, DIOC_CLOSEHANDLE
        Debug_OutNZ "DSVXD: Invalid dwIoControlCode #ECX"
ENDIF
        mov     eax, 1                  ; ERROR_INVALID_FUNCTION
        ret

EndProc	    ctrlDeviceIOControl

;****************************************************************************
;**									   **
;**   _ioctlDsvxdGetVersion						   **
;**									   **
;**   DESCRIPTION: Get the version of DSVXD				   **
;**									   **
;**   ENTRY:								   **
;**									   **
;**   EXIT:                                                                **
;**									   **
;****************************************************************************

BeginProc _ioctlDsvxdGetVersion

	Trace_Out "DSVXD: ioctlDsvxdGetVersion"

	xor eax, eax
	mov ecx, DSOUND_VERSION_MAJOR * 100h + DSOUND_VERSION_MINOR
	ret

EndProc	_ioctlDsvxdGetVersion

;****************************************************************************
;**									   **
;**									   **
;**									   **
;****************************************************************************

;--------------------------------------------------------------------------;
;
; _Dsvxd_VMM_Test_Debug_Installed
;
; Out:
;
; Notes:
;
;--------------------------------------------------------------------------;

BeginProc _Dsvxd_VMM_Test_Debug_Installed
	EnterProc
	VMMcall Test_Debug_Installed
	mov	eax, 0
	jz	@F
	inc	eax
@@:
	LeaveProc
	Return
EndProc _Dsvxd_VMM_Test_Debug_Installed

;--------------------------------------------------------------------------;
;
; _Dsvxd_PageFile_Get_Version
;
; Out:
;
; Notes:
;
;--------------------------------------------------------------------------;

BeginProc _Dsvxd_PageFile_Get_Version
	ArgVar p_version, DWORD
	ArgVar p_maxsize, DWORD
	ArgVar p_pager_type, DWORD

	EnterProc
	pushad
	VxDcall PageFile_Get_Version
	mov	edi, p_version
	mov	[edi], eax
	mov	edi, p_maxsize
	mov	[edi], ecx
	xor	eax, eax
	mov	al, bl
	mov	edi, p_pager_type
	mov	[edi], eax
	popad
	LeaveProc
	Return
EndProc _Dsvxd_PageFile_Get_Version

;--------------------------------------------------------------------------;
;
; _Dsvxd_VMCPD_Get_Version
;
; Out:
;
; Notes:
;
;--------------------------------------------------------------------------;

BeginProc _Dsvxd_VMCPD_Get_Version
	ArgVar pMajorVersion, DWORD
	ArgVar pMinorVersion, DWORD
	ArgVar pLevel, DWORD

	EnterProc
	pushad

	VxDcall VMCPD_Get_Version
	xor	ebx, ebx

	mov	edi, pMajorVersion
	mov	bl, ah
	mov	[edi], ebx

	mov	bl, al
	mov	edi, pMinorVersion
	mov	[edi], ebx

	mov	edi, pLevel
	mov	[edi], ecx

	popad
	LeaveProc
	Return
EndProc _Dsvxd_VMCPD_Get_Version

;--------------------------------------------------------------------------;
;
; _KeGrace_GlobalTimeOutProcAsm
;
; This is the entry point for the global time out set by the
; KeGrace object.  This is just an ASM thunk to KeGrace_GlobalTimeOutProc
; "C" function.
;
; This function is called from the VMM as follows:
;
;	mov     ebx, VMHandle      ; current VM handle
;	mov     ecx, Tardiness     ; number of milliseconds since time-out
;	mov     edx, RefData       ; reference data
;	mov     ebp, OFFSET32 crs  ; points to Client_Reg_Struc
;	call    [TimeOutCallback]
;
; Out:
;
; Notes:
;
;--------------------------------------------------------------------------;

extrn _KeGrace_GlobalTimeOutProc:NEAR

BeginProc _KeGrace_GlobalTimeOutProcAsm
	; The reference data is a pointer to and EVENTPARAMS structure whose
	; first member is the event handle and second member is the "this" pointer
	; to the KeGrace object

	xor	eax, eax
	xchg	[edx], eax		; Clear the event handle

	Debug_OutEAXz "DSVXD: executing KeGrace_GlobalTimeOutProcAsm after cancelled!"
	or	eax, eax
	jz	@F

	pushad
	push	ecx			; Pass tardiness
	push	[edx + 4]		; Pass "this" to the "C" function
	Ccall	_KeGrace_GlobalTimeOutProc
	add	esp, 8
	popad

@@:
	ret

EndProc _KeGrace_GlobalTimeOutProcAsm

;--------------------------------------------------------------------------;
;
; _VMEvent_SetWin32Event
;
;	This is a VM EventCallback scheduled by _AsyncTimeOut_SetWin32Event.
;	This calls VWin32 to set a Win32 event.
;
; In:
;	ebx = vm handle
;	edi = thread handle
;	edx = refdata = vxd handle to win32 event
;	ebp = offset32 client reg struc
;
; Out:
;
; Notes:
;	See _eventScheduleWin32Event
;
;--------------------------------------------------------------------------;

BeginProc _VMEvent_SetWin32Event

	mov	eax, edx
	VxDcall	_VWIN32_SetWin32Event

	ret

EndProc _VMEvent_SetWin32Event

;--------------------------------------------------------------------------;
;
; _AsyncTimeOut_SetWin32Event
;
;	This is an async timeout callback set by _Set_SetWin32Event_TimeOut.
;	This schedules _VMEvent_SetWin32Event as a sys vm event callback.
;
; In:
;	ecx = tardiness
;	edx = reference data = vxd handle to win32 event
;
; Out:
;
; Notes:
;	See _eventScheduleWin32Event
;
;--------------------------------------------------------------------------;

BeginProc _AsyncTimeOut_SetWin32Event

	push	ebx
	push	esi

	VMMcall	Get_Sys_VM_Handle
	mov	esi, _VMEvent_SetWin32Event
	VMMcall	Schedule_VM_Event

	pop	esi
	pop	ebx
	ret

EndProc _AsyncTimeOut_SetWin32Event


;--------------------------------------------------------------------------;
;
; _EventScheduleWin32Event
;
;	This signals a win32 event after a specified delay.
;
; In:
;	vxdhEvent - vxd handle to win32 event
;	dwDelay - milliseconds delay
;
; Out(int):
;	0 if failure, non-0 otherwise
;
; Notes:
;	Use 'C' calling convention.  Sets an async timeout which in
;	turn schedules a vm event to actually signal the win32 event.
;
;--------------------------------------------------------------------------;

BeginProc _eventScheduleWin32Event

ArgVar vxdhEvent,DWORD
ArgVar dwDelay,DWORD

	EnterProc
	push	ebx
	push	esi

	mov	eax, dwDelay

	test	eax, eax
	jnz	_ESW32E_delayed

	VMMcall Get_Sys_VM_Handle
	mov	esi, _VMEvent_SetWin32Event
	mov	edx, vxdhEvent
	Vmmcall Call_VM_Event
	mov	eax, -1

	jmp	_ESW32E_exit

_ESW32E_delayed:
	Debug_Out "DSVXD: Tried to set a defered win32 event???"
	mov	edx, vxdhEvent
	mov	esi, _AsyncTimeOut_SetWin32Event
	VMMcall	Set_Async_Time_Out
	mov	eax, esi

_ESW32E_exit:
	pop	esi
	pop	ebx
	LeaveProc
	Return

EndProc _eventScheduleWin32Event

VXD_LOCKED_CODE_ENDS
	END
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\directx\dxcrt\i386\fyl2x.asm ===
title	fylog2x	 - Danny's cheapo y*log2(x)
;*** 
;fylog2x.asm - compute y * log2(x)
;
;	Copyright (c) 1996 Microsoft Corporation
;
;Purpose:
;
;*******************************************************************************


.xlist
	include cruntime.inc
.list

	CODESEG

fylog2x	proto stdcall, y:qword, x:qword

	public	fylog2x
fylog2x	proc stdcall, y:qword, x:qword

	fld	y
	fld	x
	fyl2x
	ret
fylog2x	endp
	end
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\directx\dxcrt\i386\mm.inc ===
;***
;mm.inc - macros to write memory model dependent code
;
;       Copyright (c) 1987-1994, Microsoft Corporation.  All rights reserved.
;
;Purpose:
;       This file contains definitions of a number of macros which
;       make the writing of memory model dependent code for the
;       386 a little easier and more portable.
;
;*******************************************************************************

; general code & data size constants & macros

DAT_ADDR_SZ =   4
BDAT_ADDR_SZ =  2

TXT_ADDR_SZ =   4

; Big/Little Endian Definitions for Long Integers

ifdef   bigend                  ; Big Endian (hi word at low address)
LOWORD  equ     [4]
HIWORD  equ     [0]
else                            ; Little Endian (low word at low address)
LOWORD  equ     [0]
HIWORD  equ     [4]
endif


; All Model Definitions

BPARGBAS equ    TXT_ADDR_SZ+4   ; offset from BP to first argument
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\directx\dsound\dsvxd\win9x\makefile.inc ===
#############################################################################
# Copyright (C) Microsoft Corporation 2000
#############################################################################

!include ..\..\buildmode.inc

C_DEFINES =

!if "$(NTDEBUG)" == "ntsd"

C_DEFINES = -DDBG=1

!if "$(BuildMode)" == "internal"
C_DEFINES = $(C_DEFINES) -DDEBUG
!else
C_DEFINES = $(C_DEFINES) -DRDEBUG
!endif

!endif


..\dsbnotes.cpp: ..\..\dsound\dsbnotes.cpp
    -copy $** $@

..\grace.cpp:    ..\..\dsound\grace.cpp
    -copy $** $@

..\grsource.cpp: ..\..\dsound\grsource.cpp
    -copy $** $@

..\mix.cpp:      ..\..\dsound\mix.cpp
    -copy $** $@

..\filter.c:     ..\..\dsound\filter.c
    -copy $** $@

..\dxcrt.c:      ..\..\dsound\dxcrt.c
    -copy $** $@


# Don't change the relative paths in INCLUDE below to paths based on BASEDIR
# or DXROOT. The 16-bit resource compiler doesn't handle non-8.3 names in
# the path (i.e. \nt\multimedia).
#
# set INCLUDE=..\..\..;..\..\..\public\ddk\inc;..\..\..\public\sdk\inc16;..\..\..\inc;..\..\dsound

# Note: we include ver.h below with the full pathname because the 16-bit RC
# also needs command lines under 128 bytes - and we're dangerously close.

dsound.res: ..\..\..\inc\verinfo.h
	..\..\..\public\tools\win9x\common\rc -I.. -I..\..\..\inc -I..\..\..\public\ddk\inc -I..\..\dsound -fodsound.res $(C_DEFINES) -r <<dsound.rc
#include "..\..\..\public\sdk\inc16\ver.h"
#include "verinfo.h"
#define Not_VxD
#include <vmm.h>
#include "dsdriver.h"

#define VERSIONTYPE		VFT_VXD
#define VERSIONSUBTYPE 		DSOUND_DEVICE_ID
#define VERSIONNAME		"dsound.vxd"

!if "$(NTDEBUG)" == "ntsd"
!if "$(BuildMode)" == "internal"
    #define VERSIONDESCRIPTION "DirectSound VxD (internal)"
!else
    #define VERSIONDESCRIPTION "DirectSound VxD (debug)"
!endif
!else
    #define VERSIONDESCRIPTION "DirectSound VxD"
!endif

#include "verinfo.ver"
<<NOKEEP
    
$(O)\dsound.vxd $(O)\dsvxd.sym: 

#
# VxD version stamp
#
adrc2vxd: dsound.res $(O)\dsound.vxd
    $(DXROOT)\public\tools\win9x\common\adrc2vxd $(O)\dsound.vxd dsound.res
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\directx\dxcrt\i386\cruntime.inc ===
;***
;cruntime.inc - multi-model assembly macros for interfacing to HLLs
;
;       Copyright (c) 1988-1995, Microsoft Corporation.  All rights reserved.
;
;Purpose:
;       This file defines the current memory model being used.
;
;*******************************************************************************

;==============================================================================
;
;Use the following defines to control processor/segment model
;
;   -DI86               8086/8088 processor
;   -DI286              80286 processor
;   -DI386              80386 processor with 32-bit code/data segment
;
;   -Dmem_S             Small memory model   (near code, near data)
;   -Dmem_M             Medium memory model  (far code, near data)
;   -Dmem_C             Compact memory model (near code, fat data)
;   -Dmem_L             Large memory model   (far code, far data)
;
;   -DSS_NEQ_DGROUP     SS and DS point to different segments
;
;   default is -DI86 -Dmem_S
;
;==============================================================================
;
;The following variables are defined by this file:
;   cpu                         86, 286, or 386
;   sizeC                       code distance; 1 = far code, 0 = near code
;   sizeD                       data distance; 1 = far data, 0 = near data
;   mmodel                      english name of the memory model, i.e. "Medium"
;   ISIZE, LSIZE, NSIZE         size of ints, longs, shorts
;   FLTSIZE, DBLSIZE, LDBLSIZE  size of float, double, long double
;   NPSIZE, FPSIZE              size of near/far pointers
;   CPSIZE, DPSIZE              size of code/data pointers
;   ISHIFT, LSHIFT              bits to shift to convert byte to int/long
;
;The following macros allow easy writing of combined 16/32 bit code:
;
; 16/32 bit registers:
;   rax, rbx, rcx, rdx,         expand to native registers (rax = eax or ax)
;   rsi, rdi, rsp, rbp
; 16/32 bit register instructions:
;   JRCXZ                       jump when rcx is zero
;   CBI                         convert byte to int (al to rax)
;   CAXDX                       convert rax to rax:rdx
;   ZXAL, ZXBL, ZXCL, ZXDL      zero extend al,bl,cl,dl to rax,rbx,rcx,rdx
; Pointer instructions:
;   LPDS, LPES                  load data pointer with ES or DS
;   PDS, PES                    segment overrides when pointer loaded as above
;   PCS, PSS                    segment override to get at code/stack segment
;   LFPDS, LFPES                load far pointer with ES or DS
;   FPDS, FPES                  segment overrides when pointer loaded as above
;   CPTR                        data type of code pointer
;   CPDIST                      distance of code (near/far)
;   DNPTR, DFPTR                define near/far pointer
;   DCPTR, DDPTR                define code/data pointer
;   DCPTR?, DDPTR?              define uninitialized code/data pointer
;   CPWORD, DPWORD              data type of code or data pointer
; Numeric type instructions:
;   IWORD, LWORD, SWORD         data type of int, long, short
;   DINT, DLONG, DSHORT         define int, long, short
;   DFLOAT, DDOUBLE, DLDOUBLE   define float, double, long double
; Offsets:
;   codeoffset, dataoffset      offsets from code and data segments
; API calls:
;   APIDIST                     distance of API calls (near/far)
;   APIEXT ApiName              extrn declaration for an API function
;
;The following utility macros are provided:
;   codeseg                     define/declare code segment
;   error <msg>                 stop assembly with message
;   display <msg>               display a message, unless QUIET defined
;   savelist [<reg> ...]        init list of regs to be save by 'proc uses'
;   _if cond <instruction>      assemble instruction only if cond is TRUE
;   _ife cond <instruction>     assemble instruction only if cond is FALSE
;   _ifd symbol <instruction>   assemble instruction only if symbol defined
;   _ifnd symbol <instruction>  assemble instruction only if symbol not defined
;
;   lab  LabelName              assembles to "LabelName:" If DEBUG is defined
;                               LabelName is made public
;
;   JS* (ex. JSE,JSZ,JSB ...)   assemble to "je short","jz short","jb short"
;
;   Cmacro look alikes
;   static* Name, InitialValue, Repeat   defines a static variable of type *
;   global* Name, InitialValue, Repeat   defines a global variable of type *
;   label*  Name, {PUBLIC,PASCAL,C}      defines a label of type *
;
;   PUSH16  SegmentReg          pushes 16 bits in a use32 segment
;   JMPFAR16  label             will do a far 16:16 jmp from a use32 segment
;
;==============================================================================

; error <msg>   -    Output message and generate error

error   MACRO   msg
if2                     ;; only on pass 2 can we generate errors
        %out    **********************************************************
        %out    *** E r r o r  --  msg
        %out    **********************************************************
        .err
endif
        ENDM

; display msg   -    Output message unless QUIET defined

display MACRO   msg
ifndef QUIET            ;; only when quiet flag not set
if1                     ;; and on pass 1, then display message
        %out msg
endif
endif
        ENDM

; One line conditionals:
;   here we create the capability of writing code lines like
;
; _if sizeD   <push ds>   as opposed to    if sizeD
;                                              push  ds
;                                          endif

_if     MACRO   cond,text
    if  cond
        text
    endif
        ENDM

_ife    MACRO   cond,text
    ife cond
        text
    endif
        ENDM

_ifd    MACRO   cond,text
    ifdef   cond
        text
    endif
        ENDM

_ifnd   MACRO   cond,text
    ifndef  cond
        text
    endif
        ENDM

; set windows flag to 0

        ?WIN    equ     0       ; disable windows-specific code

; check for _MT, requires 286 or greater processor

ifdef _MT
ifndef I386
ifndef I286
; _MT implies 286 processor
display <Multi-thread specified - assuming 80286 processor>
I286 equ <>
endif
endif
endif

; Process memory-model arguments

ifdef  mem_M
        ; Medium model
        sizeC   equ     1
        sizeD   equ     0
        mmodel  equ     <Medium>
elseifdef  mem_C
        ; Compact model
        sizeC   equ     0
        sizeD   equ     1
        mmodel  equ     <Compact>
elseifdef  mem_L
        ; Large model
        sizeC   equ     1
        sizeD   equ     1
        mmodel  equ     <Large>
else
        ; Small model - default
        sizeC   equ     0
        sizeD   equ     0
        mmodel  equ     <Small>
endif

; Process processor arguments

ifdef   _WIN32
        display <Processor:             486/586>
        cpu equ 586
        .586
elseifdef   I286
        display <Processor:             80286>
        cpu equ 286
        .286
elseifdef   I386
        display <Processor:             80386>
        cpu equ 386
        .386
else
        display <Processor:             8086/8088>
        cpu equ 86
        .8086
endif

;  386 32-bit checking.  Currently we are only expecting small model
;  32 bit segments, so we make a few checks to be sure nothing is
;  incorrectly being defined.

ifdef I386
    if sizeC or sizeD
        error <Must use Small memory model for 386 version.>
    endif

    ifdef _LOAD_DGROUP
        error <No loading DGROUP in 386 version.>
    endif

    ifdef SS_NEQ_DGROUP
        error <SS always equals DGROUP in 386 version.>
    endif
endif

;  Set memory model

%       display <Memory model:          mmodel>
%       .model  mmodel, C

;
; *** Temporary Workaround ***
; Currently, MASM will not recognize the 'FLAT' keyword unless it previously
; appears in an 'assume' statement.  Presumably, when the '.model FLAT' feature
; is implemented, this will go away.  [Use 'gs:' since we never use that
; segment register.
;

ifdef   I386
        ; ensure that MASM recognizes 'FLAT'
        assume  gs:FLAT
endif


; Define registers:
; Instead of using the "word" registers directly, we will use a set of
; text equates.  This will allow you to use the native word size instead of
; hard coded to 16 bit words.  We also have some instruction equates for
; instruction with the register type hard coded in.

ifdef I386

    rax equ <eax>
    rbx equ <ebx>
    rcx equ <ecx>
    rdx equ <edx>
    rdi equ <edi>
    rsi equ <esi>
    rbp equ <ebp>
    rsp equ <esp>

    JRCXZ equ <jecxz>
    CBI   equ <movsx eax, al>    ; convert byte to int (al to rax)
    CAXDX equ <cdq>              ; convert rax to rdx:rax
    ZXAL  equ <movzx eax, al>    ; zero extend al
    ZXBL  equ <movzx ebx, bl>    ; zero extend bl
    ZXCL  equ <movzx ecx, cl>    ; zero extend cl
    ZXDL  equ <movzx edx, dl>    ; zero extend dl

else

    rax equ <ax>
    rbx equ <bx>
    rcx equ <cx>
    rdx equ <dx>
    rdi equ <di>
    rsi equ <si>
    rbp equ <bp>
    rsp equ <sp>

    JRCXZ equ <jcxz>
    CBI   equ <cbw>              ; convert byte to int (al to rax)
    CAXDX equ <cwd>              ; convert rax to rdx:rax
    ZXAL  equ <xor ah, ah>       ; zero extend al
    ZXBL  equ <xor bh, bh>       ; zero extend bl
    ZXCL  equ <xor ch, ch>       ; zero extend cl
    ZXDL  equ <xor dh, dh>       ; zero extend dl

endif

; The following equates deal with the differences in near versus
; far data pointers, and segment overrides.
;
; Use LPES and PES when loading a default size pointer -- it loads
; a 16-bit pointer register in 286 Small/Medium model,
; a 16-bit pointer register and 16-bit segment register in 8086/286
; Compact/Large model, and a 32-bit pointer register in 386 mode.
;
; Use LFPES and FPES when loading an always far pointer -- it loads a
; 16-bit pointer register and 16-bit segment register in 8086/286,
; all models; a 32-bit pointer register in 386 mode.

if sizeD
    LPES equ <les>
    LPDS equ <lds>
    PDS  equ <ds:>
    PES  equ <es:>
else
    LPES equ <mov>
    LPDS equ <mov>
    PDS  equ <>
    PES  equ <>
endif

ifdef I386
    LFPES equ <mov>
    LFPDS equ <mov>
    FPES equ <>
    FPDS equ <>
else
    LFPES equ <les>
    LFPDS equ <lds>
    FPES equ <es:>
    FPDS equ <ds:>
endif

if sizeC or @WordSize eq 2
    PCS  equ <cs:>              ; large code model or non-386
else
 IF 1   ;*** TEMP 16/32 TESTBED ***
    PCS  equ <cs:>
 ELSE
    PCS  equ <>                 ; 386 small code model
 ENDIF  ;*** END TEMP CODE
endif

ifdef SS_NEQ_DGROUP
    PSS   equ <ss:>             ; SS != DS
else
    PSS   equ <>                ; SS == DS
endif

; Define offset macros:
;   The 32-bit segments will not have 'groups'

ifdef I386
    codeoffset  equ <offset FLAT:>
    dataoffset  equ <offset FLAT:>
else
    codeoffset  equ <offset @code:>
    dataoffset  equ <offset DGROUP:>
endif

; The next set of equates deals with the size of SHORTS, INTS, LONGS, and
; pointers in the 16 and 32 bit versions.

ifdef I386       ;--- 32 bit segment ---

    ; parameters and locals
    IWORD   equ <dword>
    LWORD   equ <dword>

    ; static storage
    DINT    equ <dd>
    DLONG   equ <dd>
    DSHORT  equ <dw>

    ; sizes for fixing SP, stepping through tables, etc.
    ISIZE   equ 4
    LSIZE   equ 4
    SSIZE   equ 2
    NPSIZE  equ 4
    FPSIZE  equ 4

    ; bit shift count to convert byte cnt/ptr to int/long cnt/ptr
    ISHIFT  equ 2               ; byte-to-int shift count
    LSHIFT  equ 2               ; byte-to-long shift count

    ; sizes dependent upon memory model.  dq -vs- df is not yet clear
    DNPTR equ <dd>              ; near pointer
    DFPTR equ <dd>              ; far pointer

    DCPTR   equ <dd offset FLAT:>; 32 bit offset only
    DCPTR?  equ <dd>            ; No seg override for uninitialized values
    CPSIZE  equ 4
    CPDIST  equ <near>          ; code pointers are near
    CPTR    equ <near ptr>

    DDPTR   equ <dd offset FLAT:>
    DDPTR?  equ <dd>
    DPSIZE  equ 4

    CPWORD  equ <dword>         ; code pointers are dwords
    DPWORD  equ <dword>         ; data pointers are dwords

    APIDIST equ <near>          ; all API calls are NEAR in the 32 bit model

; macro to declare API functions
EXTAPI  macro   apiname
        extrn pascal apiname:near
endm

else    ;--- 16-bit segment ---

    ; parameters and locals
    IWORD   equ <word>
    LWORD   equ <dword>

    ; static storage
    DINT    equ <dw>
    DLONG   equ <dd>
    DSHORT  equ <dw>

    ; sizes for fixing SP, stepping through tables, etc
    ISIZE   equ 2
    LSIZE   equ 4
    SSIZE   equ 2
    NPSIZE  equ 2
    FPSIZE  equ 4

    ; bit shift count to convert byte cnt/ptr to int/long cnt/ptr
    ISHIFT  equ 1               ; byte-to-int shift count
    LSHIFT  equ 2               ; byte-to-long shift count

    ; sizes dependent upon memory model
    DNPTR equ <dw>              ; near pointer
    DFPTR equ <dd>              ; far pointer

    if sizeC
        DCPTR   equ <dd>       ; 16 bit segment and 16 bit offset
        DCPTR?  equ <dd>
        CPSIZE  equ 4
        CPDIST  equ <far>      ; code pointers are far
        CPTR    equ <far ptr>
        CPWORD  equ <dword>    ; code pointers are dwords
    else
        DCPTR   equ <dw>       ; 16 bit offset only
        DCPTR?  equ <dw>
        CPSIZE  equ 2
        CPDIST  equ <near>     ; code pointers are near
        CPTR    equ <near ptr>
        CPWORD  equ <word>     ; code pointers are words
    endif

    if sizeD
        DDPTR   equ <dd>
        DDPTR?  equ <dd>
        DPSIZE  equ 4
        DPWORD  equ <dword>    ; data pointers are dwords
    else
        DDPTR   equ <dw>
        DDPTR?  equ <dw>
        DPSIZE  equ 2
        DPWORD  equ <word>     ; data pointers are words
    endif

    APIDIST equ <far>           ; API calls are FAR in 16 bit model

; macro to declare API functions
EXTAPI  macro   apiname
        extrn pascal apiname:far
endm

endif   ; --- 16/32 segment ---

; Float/double definitions
; (currently the same for 16- and 32-bit segments)

FLTSIZE  equ    4       ; float
DBLSIZE  equ    8       ; double
LDBLSIZE equ    10      ; long double

DFLOAT   equ    <dd>
DDOUBLE  equ    <dq>
DLDOUBLE equ    <dt>

;
; savelist - Generate a list of regs to be saved by the proc 'uses' option.
;
; Input:
;       reg1, reg2, reg3, reg4 = registers to be saved across function
; Output:
;       reglist = text string of registers that can be passed to the 'uses'
;       option on the 'proc' command.
;

savelist  MACRO   reg1, reg2, reg3, reg4
        local   ws, listsize
        ws      catstr  < >             ; whitespace char

        IFNDEF  I386
         rbx equ <>                     ; 8086/286 don't save rbx
        ENDIF

        IFNB        <reg4>
         reglist     catstr  reg1, ws, reg2, ws, reg3, ws, reg4
        ELSEIFNB    <reg3>
         reglist     catstr  reg1, ws, reg2, ws, reg3, ws
        ELSEIFNB    <reg2>
         reglist     catstr  reg1, ws, reg2, ws,       ws
        ELSEIFNB    <reg1>
         reglist     catstr  reg1, ws,       ws,       ws
        ELSE
         reglist     catstr  <>
        ENDIF

        listsize sizestr reglist        ; size of register list

        IF      listsize LE 3           ; if list is only the 3 ws chars...
         reglist catstr  <>
        ENDIF

        IFNDEF  I386
         rbx equ <bx>                   ; restore rbx
        ENDIF

        ENDM    ; savelist

;
; codeseg - Define/declare the standard code segment. Maps to the proper
; form of the .code directive.
;
; Input:
;
; Output:
;       .code _TEXT     ; for large code models
;       .code           ; for small code models
;       assume  cs:FLAT ; for 386
;       assume  ds:FLAT ; for 386
;       assume  es:FLAT ; for 386
;       assume  ss:FLAT ; for 386
;

codeseg MACRO

if      sizeC
        .code _TEXT
else
        .code
endif

ifdef   I386
        assume  ds:FLAT
        assume  es:FLAT
        assume  ss:FLAT
endif

        ENDM

;*========
;*
;*  Debug lab macro
;*
;*========

lab     macro name
ifdef   DEBUG
    public  pascal name     ;; define label public for Symdeb
endif
name:
        endm


;*========
;*
;*  Conditional jump short macros
;*
;*========


        irp     x,<Z,NZ,E,NE,S,NS,C,NC,P,NP,PE,PO,A,AE,B,BE,NB,G,GE,L,LE>
JS&x    equ   <j&x short>
        endm


;*========
;*
;*  Global data definition macros
;*
;*  Usage:
;*      globalI   Name, InitialValue, Repeat
;*
;*========


MakeGlobal  macro   suffix, DataType        ;; makes all of the global* macros

global&suffix  macro   name, data, rep
public  name
ifb     <rep>
    _repeat = 1
else
    _repeat = (rep)
endif

name    &DataType  _repeat dup( data )
        endm

        endm


    MakeGlobal  T, dt                   ; globalT
    MakeGlobal  Q, dq                   ; globalQ
    MakeGlobal  D, dd                   ; globalD
    MakeGlobal  W, dw                   ; globalW
    MakeGlobal  B, db                   ; globalB

%   MakeGlobal  I, <DINT>               ; globalI

%   MakeGlobal  DP, <DDPTR>             ; globalDP
%   MakeGlobal  CP, <DCPTR>             ; globalCP
%   MakeGlobal  FP, <DFPTR>             ; globalFP
%   MakeGlobal  NP, <DNPTR>             ; globalNP



;*========
;*
;*  Static data definition macros
;*
;*  Usage:
;*      staticI   Name, InitialValue, Repeat
;*
;*========


MakeStatic  macro   suffix, DataType        ;; makes all of the static* macros

static&suffix  macro   name, data, rep

ifdef  DEBUG
    public  pascal name                     ;; make statics public if DEBUG
endif

ifb     <rep>
    _repeat = 1
else
    _repeat = (rep)
endif

name    &DataType  _repeat dup( data )
        endm

        endm


    MakeStatic  T, dt                   ; staticT
    MakeStatic  Q, dq                   ; staticQ
    MakeStatic  D, dd                   ; staticD
    MakeStatic  W, dw                   ; staticW
    MakeStatic  B, db                   ; staticB

%   MakeStatic  I, <DINT>               ; staticI

%   MakeStatic  DP, <DDPTR>             ; staticDP
%   MakeStatic  CP, <DCPTR>             ; staticCP
%   MakeStatic  FP, <DFPTR>             ; staticFP
%   MakeStatic  NP, <DNPTR>             ; staticNP

;*========
;*
;*  Label definition macros
;*
;*========
;*
;*  Label definition macros
;*
;*  Usage:
;*      labelI   Name, {PUBLIC, PASCAL, C}
;*
;*========

__MakePublic    macro   name, option    ;; decides if a label should be
ifidni  <option>, <PUBLIC>              ;; made public
    public  name
elseifidni  <option>, <PASCAL>
    public  pascal name
elseifidni  <option>, <C>
    public  C name
elseifb  <option>
    ifdef  DEBUG
        public  pascal name     ;; make public if DEBUG
    endif
endif
                endm


MakeLabel   macro suffix, LabelType     ;; makes all of the label* macros

%@CatStr(<label>,<suffix>)      macro   name, option
        __MakePublic    <name>,<option>
name    label   &LabelType
        endm

        endm


        MakeLabel   T, tbyte    ; make labelT
        MakeLabel   Q, qword    ; make labelQ
        MakeLabel   D, dword    ; make labelD
        MakeLabel   W, word     ; make labelW
        MakeLabel   B, byte     ; make labelB

        MakeLabel   P, proc     ; make labelP
        MakeLabel   FP, far     ; make labelFP
        MakeLabel   NP, near    ; make labelNP

%       MakeLabel   I, IWORD    ; make labelI


labelDP macro   name, option                ;; labelDP
        __MakePublic    <name>,<option>
ifdef  I386
    if sizeD
        name    label   fword
    else
        name    label   dword
    endif
else    ;not I386
    if sizeD
        name    label   dword
    else
        name    label   word
    endif
endif   ;not I386
        endm

labelCP macro   name, option                ;; labelCP
        __MakePublic    <name>,<option>
ifdef  I386
    if sizeC
        name    label   fword
    else
        name    label   dword
    endif
else    ;not I386
    if sizeC
        name    label   dword
    else
        name    label   word
    endif
endif   ;not I386
        endm


;*
;*  PUSH16 SegReg   - pushes 16 bits in a use32 segment
;*

PUSH16  macro   SegReg

ifdef I386
        nop
        db      66h         ; operand size over-ride
endif   ; I386

        push    SegReg
        endm


;*
;*  JMPFAR16  label - jmps far from a use32 to a use16 segment
;*

JMPFAR16 macro  label

ifndef I386
        error  <JMPFAR16 can only be used in a use32 code segment>
endif   ;I386

        nop
        db      66h         ;; operand size over-ride
        db      0eah        ;; jmp far immediate op code
        dw      offset label
        dw      seg label
        endm
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\directx\dxcrt\i386\pow2.asm ===
title	pow2	 - Danny's cheapo pow function
;*** 
;pow2.asm - compute 2 to the power of something
;
;	Copyright (c) 1985-88, Microsoft Corporation
;
;Purpose:
;
;*******************************************************************************


.xlist
	include cruntime.inc
.list

	CODESEG

pow2	proto stdcall, orig:qword

	public	pow2
pow2	proc stdcall, orig:qword

	fld	orig
	fst 	st(1)			; duplicate orig
	frndint				; I don't care how it rounds
	fstp	st(2)			; st=orig st(1)=round
	fsub	st, st(1)		; st=orig-round
	f2xm1				; st=2^(orig-round)-1
	fld1
	faddp	st(1), st		; st=2^(orig-round)
	fscale				; st=2^(orig-round)*2^round=2^orig
	fstp	st(1)			; clean stack of st(1)
	ret
pow2	endp
	end
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\directx\dxdiag\dispinfo8.h ===
/****************************************************************************
 *
 *    File: dispinfo8.h
 * Project: DxDiag (DirectX Diagnostic Tool)
 *  Author: Jason Sandlin (jasonsa@microsoft.com)
 * Purpose: Gather D3D8 information 
 *
 * (C) Copyright 2000 Microsoft Corp.  All rights reserved.
 *
 ****************************************************************************/

#ifndef DISPINFO8_H
#define DISPINFO8_H

HRESULT InitD3D8();
VOID    CleanupD3D8();
HRESULT GetDX8AdapterInfo(DisplayInfo* pDisplayInfo);
BOOL    IsD3D8Working();

#endif // DISPINFO8_H
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\directx\dxdiag\dispinfo.cpp ===
/****************************************************************************
 *
 *    File: dispinfo.cpp 
 * Project: DxDiag (DirectX Diagnostic Tool)
 *  Author: Mike Anderson (manders@microsoft.com)
 * Purpose: Gather information about the display(s) on this machine
 *
 * (C) Copyright 1998-1999 Microsoft Corp.  All rights reserved.
 *
 ****************************************************************************/

#include <tchar.h>
#include <Windows.h>
#define COMPILE_MULTIMON_STUBS // for multimon.h
#include <multimon.h>
#define DIRECTDRAW_VERSION 5 // run on DX5 and later versions
#include <ddraw.h>
#include <d3d.h>
#include <stdio.h>
#include "sysinfo.h" // for BIsPlatformNT
#include "reginfo.h"
#include "dispinfo.h"
#include "dispinfo8.h"
#include "fileinfo.h" // for GetFileVersion
#include "sysinfo.h"
#include "resource.h"


// Taken from DirectDraw's ddcreate.c
// This is the first GUID of secondary display devices
static const GUID DisplayGUID =
    {0x67685559,0x3106,0x11d0,{0xb9,0x71,0x0,0xaa,0x0,0x34,0x2f,0x9f}};

typedef HRESULT (WINAPI* LPDIRECTDRAWCREATE)(GUID FAR *lpGUID,
    LPDIRECTDRAW FAR *lplpDD, IUnknown FAR *pUnkOuter);

static VOID GetRegDisplayInfo9x(DisplayInfo* pDisplayInfo);
static VOID GetRegDisplayInfoNT(DisplayInfo* pDisplayInfo);
static HRESULT GetDirectDrawInfo(LPDIRECTDRAWCREATE pDDCreate, DisplayInfo* pDisplayInfo);
static HRESULT CALLBACK EnumDevicesCallback(GUID* pGuid, LPSTR pszDesc, LPSTR pszName, 
    D3DDEVICEDESC* pd3ddevdesc1, D3DDEVICEDESC* pd3ddevdesc2, VOID* pvContext);
static BOOL FindDevice(INT iDevice, TCHAR* pszDeviceClass, TCHAR* pszDeviceClassNot, TCHAR* pszHardwareKey);
static BOOL GetDeviceValue(TCHAR* pszHardwareKey, TCHAR* pszKey, TCHAR* pszValue, BYTE *buf, DWORD cbbuf);
static HRESULT CheckRegistry(RegError** ppRegErrorFirst);
static BOOL CALLBACK MonitorEnumProc( HMONITOR hMonitor, HDC hdcMonitor, LPRECT lprcMonitor, LPARAM dwData );
static VOID GetRegDisplayInfoWhistler(DisplayInfo* pDisplayInfo, TCHAR* szKeyVideo, TCHAR* szKeyImage );
static VOID GetRegDisplayInfoWin2k(DisplayInfo* pDisplayInfo, TCHAR* szKeyVideo, TCHAR* szKeyImage );



/****************************************************************************
 *
 *  GetBasicDisplayInfo - Get minimal info on each display
 *
 ****************************************************************************/
HRESULT GetBasicDisplayInfo(DisplayInfo** ppDisplayInfoFirst)
{
    DisplayInfo* pDisplayInfo;
    DisplayInfo* pDisplayInfoNew;

    TCHAR szHardwareKey[MAX_PATH];
    TCHAR szDriver[MAX_PATH];
    
    // Check OS version.  Win95 cannot use EnumDisplayDevices; Win98/NT5 can:
    if( BIsWinNT() || BIsWin3x() )
        return S_OK; // NT4 and earlier and pre-Win95 not supported

    if( BIsWin95() )
    {
        // Win95:
        if (!FindDevice(0, TEXT("Display"), NULL, szHardwareKey))
            return E_FAIL;
        pDisplayInfoNew = new DisplayInfo;
        if (pDisplayInfoNew == NULL)
            return E_OUTOFMEMORY;
        ZeroMemory(pDisplayInfoNew, sizeof(DisplayInfo));
        *ppDisplayInfoFirst = pDisplayInfoNew;
        pDisplayInfoNew->m_bCanRenderWindow = TRUE;
        pDisplayInfoNew->m_hMonitor         = NULL; // Win95 doesn't like multimon
        lstrcpy(pDisplayInfoNew->m_szKeyDeviceID, szHardwareKey);
        if (GetDeviceValue(szHardwareKey, NULL, TEXT("Driver"), (LPBYTE)szDriver, sizeof(szDriver)))
        {
            lstrcpy(pDisplayInfoNew->m_szKeyDeviceKey, TEXT("System\\CurrentControlSet\\Services\\Class\\"));
            if( lstrlen(pDisplayInfoNew->m_szKeyDeviceKey) + lstrlen(szDriver) < 200 )
                lstrcat(pDisplayInfoNew->m_szKeyDeviceKey, szDriver);
        }
        GetDeviceValue(szHardwareKey, NULL, TEXT("DeviceDesc"), (LPBYTE)pDisplayInfoNew->m_szDescription, sizeof(pDisplayInfoNew->m_szDescription));

        HDC hdc;
        hdc = GetDC(NULL);
        if (hdc != NULL)
        {
            wsprintf(pDisplayInfoNew->m_szDisplayMode, TEXT("%d x %d (%d bit)"),
                GetDeviceCaps(hdc, HORZRES), GetDeviceCaps(hdc, VERTRES), GetDeviceCaps(hdc, BITSPIXEL));
            lstrcpy( pDisplayInfoNew->m_szDisplayModeEnglish, pDisplayInfoNew->m_szDisplayMode );
            ReleaseDC(NULL, hdc);
            pDisplayInfoNew->m_dwWidth = GetDeviceCaps(hdc, HORZRES);
            pDisplayInfoNew->m_dwHeight = GetDeviceCaps(hdc, VERTRES);
            pDisplayInfoNew->m_dwBpp = GetDeviceCaps(hdc, BITSPIXEL);
        }

        // On Win98 and NT, we get the monitor key through a call to EnumDisplayDevices.
        // On Win95, we have to use the registry to get the monitor key.
        HKEY hKey = NULL;
        DWORD cbData;
        TCHAR szKey[200];
        ULONG ulType;
        if (ERROR_SUCCESS == RegOpenKeyEx(HKEY_LOCAL_MACHINE, TEXT("Enum\\MONITOR\\DEFAULT_MONITOR\\0001"), 0, KEY_READ, &hKey))
        {
            cbData = sizeof szKey;
            
            if (ERROR_SUCCESS == RegQueryValueEx(hKey, TEXT("Driver"), 0, &ulType, (LPBYTE)szKey, &cbData)
                && szKey[0])
            {
                lstrcpy(pDisplayInfoNew->m_szMonitorKey, TEXT("System\\CurrentControlSet\\Services\\Class\\"));
                if( lstrlen(pDisplayInfoNew->m_szMonitorKey) + lstrlen(szKey) < 200 )
                    lstrcat(pDisplayInfoNew->m_szMonitorKey, szKey);
            }
            RegCloseKey(hKey);
        }
    }
    else
    {
        // Win98 / NT5: 
        LONG iDevice = 0;
        DISPLAY_DEVICE dispdev;
        DISPLAY_DEVICE dispdev2;

        ZeroMemory(&dispdev, sizeof(dispdev));
        dispdev.cb = sizeof(dispdev);

        ZeroMemory(&dispdev2, sizeof(dispdev2));
        dispdev2.cb = sizeof(dispdev2);

        while (EnumDisplayDevices(NULL, iDevice, (DISPLAY_DEVICE*)&dispdev, 0))
        {
            // Mirroring drivers are for monitors that echo another display, so
            // they should be ignored.  NT5 seems to create a mirroring driver called
            // "NetMeeting driver", and we definitely don't want that.
            if (dispdev.StateFlags & DISPLAY_DEVICE_MIRRORING_DRIVER)
            {
                iDevice++;
                continue;
            }

            // Skip devices that aren't attached since they cause problems 
            if ( (dispdev.StateFlags & DISPLAY_DEVICE_ATTACHED_TO_DESKTOP) == 0 )
            {
                iDevice++;
                continue;
            }

            pDisplayInfoNew = new DisplayInfo;
            if (pDisplayInfoNew == NULL)
                return E_OUTOFMEMORY;
            ZeroMemory(pDisplayInfoNew, sizeof(DisplayInfo));
            if (*ppDisplayInfoFirst == NULL)
            {
                *ppDisplayInfoFirst = pDisplayInfoNew;
            }
            else
            {
                for (pDisplayInfo = *ppDisplayInfoFirst; 
                    pDisplayInfo->m_pDisplayInfoNext != NULL; 
                    pDisplayInfo = pDisplayInfo->m_pDisplayInfoNext)
                    {
                    }
                pDisplayInfo->m_pDisplayInfoNext = pDisplayInfoNew;
            }
            pDisplayInfoNew->m_bCanRenderWindow = TRUE;
            pDisplayInfoNew->m_guid = DisplayGUID;
            pDisplayInfoNew->m_guid.Data1 += iDevice;
            lstrcpy(pDisplayInfoNew->m_szDeviceName, dispdev.DeviceName);
            lstrcpy(pDisplayInfoNew->m_szDescription, dispdev.DeviceString);
            lstrcpy(pDisplayInfoNew->m_szKeyDeviceID, TEXT("Enum\\"));
            lstrcat(pDisplayInfoNew->m_szKeyDeviceID, dispdev.DeviceID);
            lstrcpy(pDisplayInfoNew->m_szKeyDeviceKey, dispdev.DeviceKey);

            DEVMODE devmode;
            ZeroMemory(&devmode, sizeof(devmode));
            devmode.dmSize = sizeof(devmode);

            if (EnumDisplaySettings(dispdev.DeviceName, ENUM_CURRENT_SETTINGS, &devmode))
            {
                pDisplayInfoNew->m_dwWidth = devmode.dmPelsWidth;
                pDisplayInfoNew->m_dwHeight = devmode.dmPelsHeight;
                pDisplayInfoNew->m_dwBpp = devmode.dmBitsPerPel;
                wsprintf(pDisplayInfoNew->m_szDisplayMode, TEXT("%d x %d (%d bit)"),
                    devmode.dmPelsWidth, devmode.dmPelsHeight, devmode.dmBitsPerPel);
                lstrcpy( pDisplayInfoNew->m_szDisplayModeEnglish, pDisplayInfoNew->m_szDisplayMode );
                if (devmode.dmDisplayFrequency > 0)
                {
                    TCHAR sz[50];
                    wsprintf(sz, TEXT(" (%dHz)"), devmode.dmDisplayFrequency);
                    lstrcat(pDisplayInfoNew->m_szDisplayMode, sz);
                    lstrcat(pDisplayInfoNew->m_szDisplayModeEnglish, sz);
                    pDisplayInfoNew->m_dwRefreshRate = devmode.dmDisplayFrequency;
                }
            }

            // Call EnumDisplayDevices a second time to get monitor name and monitor key
            if (EnumDisplayDevices(dispdev.DeviceName, 0, &dispdev2, 0))
            {
                lstrcpy(pDisplayInfoNew->m_szMonitorName, dispdev2.DeviceString);
                lstrcpy(pDisplayInfoNew->m_szMonitorKey, dispdev2.DeviceKey);
            }

            // Try to figure out the m_hMonitor
            pDisplayInfoNew->m_hMonitor = NULL; 
            EnumDisplayMonitors( NULL, NULL, MonitorEnumProc, (LPARAM) pDisplayInfoNew );

            iDevice++;
        }
    }

    // Now look for non-display devices (like 3dfx Voodoo):
    HKEY hkey;
    HKEY hkey2;
    DWORD dwIndex;
    TCHAR szName[MAX_PATH+1];
    DWORD cb;
    DWORD dwType;

    if (ERROR_SUCCESS == RegOpenKeyEx(HKEY_LOCAL_MACHINE, TEXT("Hardware\\DirectDrawDrivers"), 0, KEY_READ, &hkey))
    {
        dwIndex = 0;
        while (ERROR_SUCCESS == RegEnumKey(hkey, dwIndex, szName, MAX_PATH+1))
        {
            BOOL bGoodDevice = FALSE;
            TCHAR szDriverName[200];
            HDC hdc;

            if (lstrcmp(szName, TEXT("3a0cfd01-9320-11cf-ac-a1-00-a0-24-13-c2-e2")) == 0 ||
                lstrcmp(szName, TEXT("aba52f41-f744-11cf-b4-52-00-00-1d-1b-41-26")) == 0)
            {
                // 24940: It's a Voodoo1, which will succeed GetDC (and crash later) if
                // no Voodoo1 is present but a Voodoo2 is.  So instead of the GetDC test,
                // see if a V1 is present in registry's CurrentConfig.
                INT i;
                for (i=0 ; ; i++)
                {
                    TCHAR szDevice[MAX_DDDEVICEID_STRING];
                    if (FindDevice(i, NULL, TEXT("Display"), szDevice))
                    {
                        if (_tcsstr(szDevice, TEXT("VEN_121A&DEV_0001")) != NULL)
                        {
                            bGoodDevice = TRUE;
                            break;
                        }
                    }
                    else
                    {
                        break;
                    }
                }
            }
            else
            {
                // To confirm that this is a real active DD device, create a DC with it
                if (ERROR_SUCCESS == RegOpenKeyEx(hkey, szName, 0, KEY_READ, &hkey2))
                {
                    cb = 200;
                    if (ERROR_SUCCESS == RegQueryValueEx(hkey2, TEXT("DriverName"), NULL, &dwType,
                        (CONST LPBYTE)szDriverName, &cb) && cb > 0)
                    {
                        // I think the following "if" will always fail, but we're about to ship so
                        // I'm being paranoid and doing everything that DDraw does:
                        if (szDriverName[0] == '\\' && szDriverName[1] == '\\' && szDriverName[2] == '.')
                            hdc = CreateDC( NULL, szDriverName, NULL, NULL);
                        else
                            hdc = CreateDC( szDriverName, NULL, NULL, NULL);
                        if (hdc != NULL)
                        {
                            bGoodDevice = TRUE;
                            DeleteDC(hdc);
                        }
                    }
                    RegCloseKey(hkey2);
                }
            }

            if (!bGoodDevice)
            {
                dwIndex++;
                continue;
            }

            pDisplayInfoNew = new DisplayInfo;
            if (pDisplayInfoNew == NULL)
                return E_OUTOFMEMORY;
            ZeroMemory(pDisplayInfoNew, sizeof(DisplayInfo));
            if (*ppDisplayInfoFirst == NULL)
            {
                *ppDisplayInfoFirst = pDisplayInfoNew;
            }
            else
            {
                for (pDisplayInfo = *ppDisplayInfoFirst; 
                    pDisplayInfo->m_pDisplayInfoNext != NULL; 
                    pDisplayInfo = pDisplayInfo->m_pDisplayInfoNext)
                    {
                    }
                pDisplayInfo->m_pDisplayInfoNext = pDisplayInfoNew;
            }
            pDisplayInfoNew->m_bCanRenderWindow = FALSE;
            pDisplayInfoNew->m_hMonitor         = NULL;
            if( _stscanf(szName, TEXT("%08x-%04x-%04x-%02x-%02x-%02x-%02x-%02x-%02x-%02x-%02x"),
                &pDisplayInfoNew->m_guid.Data1,
                &pDisplayInfoNew->m_guid.Data2,
                &pDisplayInfoNew->m_guid.Data3,
                &pDisplayInfoNew->m_guid.Data4[0],
                &pDisplayInfoNew->m_guid.Data4[1],
                &pDisplayInfoNew->m_guid.Data4[2],
                &pDisplayInfoNew->m_guid.Data4[3],
                &pDisplayInfoNew->m_guid.Data4[4],
                &pDisplayInfoNew->m_guid.Data4[5],
                &pDisplayInfoNew->m_guid.Data4[6],
                &pDisplayInfoNew->m_guid.Data4[7]) == 11 )
            {
                if (ERROR_SUCCESS == RegOpenKeyEx(hkey, szName, 0, KEY_READ, &hkey2))
                {
                    cb = sizeof(pDisplayInfoNew->m_szDescription);
                    RegQueryValueEx(hkey2, TEXT("Description"), NULL, &dwType, (LPBYTE)pDisplayInfoNew->m_szDescription, &cb);

                    cb = sizeof(pDisplayInfoNew->m_szDriverName);
                    RegQueryValueEx(hkey2, TEXT("DriverName"), NULL, &dwType, (LPBYTE)pDisplayInfoNew->m_szDriverName, &cb);

                    RegCloseKey(hkey2);
                }
            }

            dwIndex++;
        }
        RegCloseKey(hkey);
    }

    return S_OK;
}


/****************************************************************************
 *
 *  MonitorEnumProc
 *
 ****************************************************************************/
BOOL CALLBACK MonitorEnumProc( HMONITOR hMonitor, HDC hdcMonitor, 
                               LPRECT lprcMonitor, LPARAM dwData )
{
    DisplayInfo* pDisplayInfoNew = (DisplayInfo*) dwData;    

    // Get the MONITORINFOEX for this HMONITOR
    MONITORINFOEX monInfo;
    ZeroMemory( &monInfo, sizeof(MONITORINFOEX) );
    monInfo.cbSize = sizeof(MONITORINFOEX);
    GetMonitorInfo( hMonitor, &monInfo );

    // Compare the display device for this HMONITOR and the one 
    // we just enumed with EnumDisplayDevices
    if( lstrcmp( monInfo.szDevice, pDisplayInfoNew->m_szDeviceName ) == 0 )
    {
        // If they match, then record the HMONITOR 
        pDisplayInfoNew->m_hMonitor = hMonitor;
        return FALSE;
    }

    // Keep looking...
    return TRUE;
}


/****************************************************************************
 *
 *  GetExtraDisplayInfo
 *
 ****************************************************************************/
HRESULT GetExtraDisplayInfo(DisplayInfo* pDisplayInfoFirst)
{
    HRESULT hr;
    DisplayInfo* pDisplayInfo;
    BOOL bDDAccelEnabled;
    BOOL bD3DAccelEnabled;
    BOOL bAGPEnabled;
    BOOL bNT = BIsPlatformNT();

    bDDAccelEnabled = IsDDHWAccelEnabled();
    bD3DAccelEnabled = IsD3DHWAccelEnabled();
    bAGPEnabled = IsAGPEnabled();

    for (pDisplayInfo = pDisplayInfoFirst; pDisplayInfo != NULL; 
        pDisplayInfo = pDisplayInfo->m_pDisplayInfoNext)
    {
        if (bNT)
            GetRegDisplayInfoNT(pDisplayInfo);
        else
            GetRegDisplayInfo9x(pDisplayInfo);
        pDisplayInfo->m_bDDAccelerationEnabled = bDDAccelEnabled;
        pDisplayInfo->m_b3DAccelerationEnabled = bD3DAccelEnabled;
        pDisplayInfo->m_bAGPEnabled = bAGPEnabled;

        if (FAILED(hr = CheckRegistry(&pDisplayInfo->m_pRegErrorFirst)))
            return hr;
    }

    return S_OK;
}


/****************************************************************************
 *
 *  GetDDrawDisplayInfo
 *
 ****************************************************************************/
HRESULT GetDDrawDisplayInfo(DisplayInfo* pDisplayInfoFirst)
{
    HRESULT hr;
    HRESULT hrRet = S_OK;
    DisplayInfo* pDisplayInfo;
    TCHAR szPath[MAX_PATH];
    HINSTANCE hInstDDraw;
    LPDIRECTDRAWCREATE pDDCreate;

    GetSystemDirectory(szPath, MAX_PATH);
    lstrcat(szPath, TEXT("\\ddraw.dll"));
    hInstDDraw = LoadLibrary(szPath);
    if (hInstDDraw == NULL)
        return E_FAIL;
    pDDCreate = (LPDIRECTDRAWCREATE)GetProcAddress(hInstDDraw, "DirectDrawCreate");
    if (pDDCreate == NULL)
    {
        FreeLibrary(hInstDDraw);
        return E_FAIL;
    }
    
    // Init D3D8 so we can use GetDX8AdapterInfo()
    InitD3D8();

    for (pDisplayInfo = pDisplayInfoFirst; pDisplayInfo != NULL; 
        pDisplayInfo = pDisplayInfo->m_pDisplayInfoNext)
    {
        pDisplayInfo->m_b3DAccelerationExists = FALSE; // until proven otherwise
        if (FAILED(hr = GetDirectDrawInfo(pDDCreate, pDisplayInfo)))
            hrRet = hr; // but keep going
    }

    // Cleanup the D3D8 library
    CleanupD3D8();

    FreeLibrary(hInstDDraw);

    return hrRet;
}


/****************************************************************************
 *
 *  DestroyDisplayInfo
 *
 ****************************************************************************/
VOID DestroyDisplayInfo(DisplayInfo* pDisplayInfoFirst)
{
    DisplayInfo* pDisplayInfo;
    DisplayInfo* pDisplayInfoNext;

    for (pDisplayInfo = pDisplayInfoFirst; pDisplayInfo != NULL; 
        pDisplayInfo = pDisplayInfoNext)
    {
        DestroyReg( &pDisplayInfo->m_pRegErrorFirst );

        pDisplayInfoNext = pDisplayInfo->m_pDisplayInfoNext;
        delete pDisplayInfo;
    }
}



/****************************************************************************
 *
 *  GetRegDisplayInfo9x - Uses the registry keys to get more info about a 
 *      display adapter.
 *
 ****************************************************************************/
VOID GetRegDisplayInfo9x(DisplayInfo* pDisplayInfo)
{
    TCHAR szFullKey[200];
    HKEY hkey;
    DWORD cbData;
    DWORD dwType;

    // set to n/a by default
    _tcscpy( pDisplayInfo->m_szMiniVddDate, TEXT("n/a") );

    if (ERROR_SUCCESS == RegOpenKeyEx(HKEY_LOCAL_MACHINE, pDisplayInfo->m_szKeyDeviceID, 0, KEY_READ, &hkey))
    {
        cbData = sizeof(pDisplayInfo->m_szManufacturer);
        RegQueryValueEx(hkey, TEXT("Mfg"), 0, &dwType, (LPBYTE)pDisplayInfo->m_szManufacturer, &cbData);
    
        RegCloseKey(hkey);
    }

    if (pDisplayInfo->m_dwRefreshRate == 0)
    {
        wsprintf(szFullKey, TEXT("%s\\Modes\\%d\\%d,%d"), pDisplayInfo->m_szKeyDeviceKey,
            pDisplayInfo->m_dwBpp, pDisplayInfo->m_dwWidth, pDisplayInfo->m_dwHeight);
        if (ERROR_SUCCESS == RegOpenKeyEx(HKEY_LOCAL_MACHINE, szFullKey, 0, KEY_READ, &hkey))
        {
            TCHAR szRefresh[100];
            TCHAR szRefresh2[100];
            TCHAR szRefreshEnglish2[100];
            cbData = sizeof(szRefresh);
            if (ERROR_SUCCESS == RegQueryValueEx(hkey, TEXT("RefreshRate"), 0, &dwType, (LPBYTE)szRefresh, &cbData))
            {
                if( _stscanf(szRefresh, TEXT("%d"), &pDisplayInfo->m_dwRefreshRate) != 1 )
                    pDisplayInfo->m_dwRefreshRate = 0;
                if (lstrcmp(szRefresh, TEXT("0")) == 0)
                    LoadString(NULL, IDS_DEFAULTREFRESH, szRefresh2, 100);
                else if (lstrcmp(szRefresh, TEXT("-1")) == 0)
                    LoadString(NULL, IDS_OPTIMALREFRESH, szRefresh2, 100);
                else
                    wsprintf(szRefresh2, TEXT("(%sHz)"), szRefresh);
                lstrcat(pDisplayInfo->m_szDisplayMode, TEXT(" "));
                lstrcat(pDisplayInfo->m_szDisplayMode, szRefresh2);

                if (lstrcmp(szRefresh, TEXT("0")) == 0)
                    LoadString(NULL, IDS_DEFAULTREFRESH_ENGLISH, szRefreshEnglish2, 100);
                else if (lstrcmp(szRefresh, TEXT("-1")) == 0)
                    LoadString(NULL, IDS_OPTIMALREFRESH_ENGLISH, szRefreshEnglish2, 100);
                else
                    wsprintf(szRefreshEnglish2, TEXT("(%sHz)"), szRefresh);
                lstrcat(pDisplayInfo->m_szDisplayModeEnglish, szRefreshEnglish2);
                lstrcat(pDisplayInfo->m_szDisplayModeEnglish, TEXT(" "));

                if (pDisplayInfo->m_dwRefreshRate == 0)
                    pDisplayInfo->m_dwRefreshRate = 1; // 23399: so it doesn't check again
            }
            RegCloseKey(hkey);
        }
    }
    lstrcpy(szFullKey, pDisplayInfo->m_szKeyDeviceKey);
    lstrcat(szFullKey, TEXT("\\DEFAULT"));
    if (ERROR_SUCCESS == RegOpenKeyEx(HKEY_LOCAL_MACHINE, szFullKey, 0, KEY_READ, &hkey))
    {
        // If no specific refresh rate was listed for the current mode, report the
        // default rate.
        if (pDisplayInfo->m_dwRefreshRate == 0)
        {
            TCHAR szRefresh[100];
            TCHAR szRefresh2[100];
            TCHAR szRefreshEnglish2[100];
            cbData = sizeof(szRefresh);
            if (ERROR_SUCCESS == RegQueryValueEx(hkey, TEXT("RefreshRate"), 0, &dwType, (LPBYTE)szRefresh, &cbData))
            {
                if (lstrcmp(szRefresh, TEXT("0")) == 0)
                    LoadString(NULL, IDS_DEFAULTREFRESH, szRefresh2, 100);
                else if (lstrcmp(szRefresh, TEXT("-1")) == 0)
                    LoadString(NULL, IDS_OPTIMALREFRESH, szRefresh2, 100);
                else
                    wsprintf(szRefresh2, TEXT("(%sHz)"), szRefresh);
                lstrcat(pDisplayInfo->m_szDisplayMode, TEXT(" "));
                lstrcat(pDisplayInfo->m_szDisplayMode, szRefresh2);

                if (lstrcmp(szRefresh, TEXT("0")) == 0)
                    LoadString(NULL, IDS_DEFAULTREFRESH_ENGLISH, szRefreshEnglish2, 100);
                else if (lstrcmp(szRefresh, TEXT("-1")) == 0)
                    LoadString(NULL, IDS_OPTIMALREFRESH_ENGLISH, szRefreshEnglish2, 100);
                else
                    wsprintf(szRefreshEnglish2, TEXT("(%sHz)"), szRefresh);
                lstrcat(pDisplayInfo->m_szDisplayModeEnglish, szRefreshEnglish2);
                lstrcat(pDisplayInfo->m_szDisplayModeEnglish, TEXT(" "));

                if (pDisplayInfo->m_dwRefreshRate == 0)
                    pDisplayInfo->m_dwRefreshRate = 1; // 23399: so it doesn't check again
            }
        }

        cbData = sizeof(pDisplayInfo->m_szDriverName);
        RegQueryValueEx(hkey, TEXT("drv"), 0, &dwType, (LPBYTE)pDisplayInfo->m_szDriverName, &cbData);
        if (lstrlen(pDisplayInfo->m_szDriverName) > 0)
        {
            TCHAR szPath[MAX_PATH];
            GetSystemDirectory(szPath, MAX_PATH);
            lstrcat(szPath, TEXT("\\"));
            lstrcat(szPath, pDisplayInfo->m_szDriverName);
            GetFileVersion(szPath, pDisplayInfo->m_szDriverVersion, 
                pDisplayInfo->m_szDriverAttributes, pDisplayInfo->m_szDriverLanguageLocal, pDisplayInfo->m_szDriverLanguage,
                &pDisplayInfo->m_bDriverBeta, &pDisplayInfo->m_bDriverDebug);
            FileIsSigned(szPath, &pDisplayInfo->m_bDriverSigned, &pDisplayInfo->m_bDriverSignedValid);
            GetFileDateAndSize(szPath, pDisplayInfo->m_szDriverDateLocal, pDisplayInfo->m_szDriverDate, &pDisplayInfo->m_cbDriver);
        }
    
        cbData = sizeof(pDisplayInfo->m_szVdd);
        RegQueryValueEx(hkey, TEXT("vdd"), 0, &dwType, (LPBYTE)pDisplayInfo->m_szVdd, &cbData);
    
        cbData = sizeof(pDisplayInfo->m_szMiniVdd);
        RegQueryValueEx(hkey, TEXT("minivdd"), 0, &dwType, (LPBYTE)pDisplayInfo->m_szMiniVdd, &cbData);
        if (lstrlen(pDisplayInfo->m_szMiniVdd) > 0)
        {
            TCHAR szPath[MAX_PATH];
            GetSystemDirectory(szPath, MAX_PATH);
            lstrcat(szPath, TEXT("\\drivers\\"));
            lstrcat(szPath, pDisplayInfo->m_szMiniVdd);
            TCHAR szDateLocal[100];
            GetFileDateAndSize( szPath, szDateLocal, pDisplayInfo->m_szMiniVddDate, 
                                &pDisplayInfo->m_cbMiniVdd );
        }
   
        RegCloseKey(hkey);
    }
    lstrcpy(szFullKey, pDisplayInfo->m_szKeyDeviceKey);
    lstrcat(szFullKey, TEXT("\\INFO"));
    if (ERROR_SUCCESS == RegOpenKeyEx(HKEY_LOCAL_MACHINE, szFullKey, 0, KEY_READ, &hkey))
    {
        cbData = sizeof pDisplayInfo->m_szChipType;
        RegQueryValueEx(hkey, TEXT("ChipType"), 0, &dwType, (LPBYTE)pDisplayInfo->m_szChipType, &cbData);

        cbData = sizeof pDisplayInfo->m_szDACType;
        RegQueryValueEx(hkey, TEXT("DACType"), 0, &dwType, (LPBYTE)pDisplayInfo->m_szDACType, &cbData);

        cbData = sizeof pDisplayInfo->m_szRevision;
        RegQueryValueEx(hkey, TEXT("Revision"), 0, &dwType, (LPBYTE)pDisplayInfo->m_szRevision, &cbData);
        if (cbData > 0)
        {
            lstrcat(pDisplayInfo->m_szChipType, TEXT(" Rev "));
            lstrcat(pDisplayInfo->m_szChipType, pDisplayInfo->m_szRevision);
        }

        RegCloseKey(hkey);
    }

    if (lstrlen(pDisplayInfo->m_szDriverVersion) == 0)
    {
        TCHAR szPath[MAX_PATH];
        GetSystemDirectory(szPath, MAX_PATH);
        lstrcat(szPath, TEXT("\\"));
        lstrcat(szPath, pDisplayInfo->m_szDriverName);
        lstrcat(szPath, TEXT(".drv"));
        GetFileVersion(szPath, pDisplayInfo->m_szDriverVersion, 
            pDisplayInfo->m_szDriverAttributes, pDisplayInfo->m_szDriverLanguageLocal, pDisplayInfo->m_szDriverLanguage);
        FileIsSigned(szPath, &pDisplayInfo->m_bDriverSigned, &pDisplayInfo->m_bDriverSignedValid);
        GetFileDateAndSize(szPath, pDisplayInfo->m_szDriverDateLocal, pDisplayInfo->m_szDriverDate, &pDisplayInfo->m_cbDriver);
        if (lstrlen(pDisplayInfo->m_szDriverVersion) != 0)
        {
            lstrcat(pDisplayInfo->m_szDriverName, TEXT(".drv"));
        }
        else
        {
            GetSystemDirectory(szPath, MAX_PATH);
            lstrcat(szPath, TEXT("\\"));
            lstrcat(szPath, pDisplayInfo->m_szDriverName);
            lstrcat(szPath, TEXT("32.dll"));
            GetFileVersion(szPath, pDisplayInfo->m_szDriverVersion, 
                pDisplayInfo->m_szDriverAttributes, pDisplayInfo->m_szDriverLanguageLocal, pDisplayInfo->m_szDriverLanguage);
            FileIsSigned(szPath, &pDisplayInfo->m_bDriverSigned, &pDisplayInfo->m_bDriverSignedValid);
            GetFileDateAndSize(szPath, pDisplayInfo->m_szDriverDateLocal, pDisplayInfo->m_szDriverDate, &pDisplayInfo->m_cbDriver);
            if (lstrlen(pDisplayInfo->m_szDriverVersion) != 0)
            {
                lstrcat(pDisplayInfo->m_szDriverName, TEXT("32.dll"));
            }
            else
            {
                GetSystemDirectory(szPath, MAX_PATH);
                lstrcat(szPath, TEXT("\\"));
                lstrcat(szPath, pDisplayInfo->m_szDriverName);
                lstrcat(szPath, TEXT(".dll"));
                GetFileVersion(szPath, pDisplayInfo->m_szDriverVersion, 
                    pDisplayInfo->m_szDriverAttributes, pDisplayInfo->m_szDriverLanguageLocal, pDisplayInfo->m_szDriverLanguage);
                FileIsSigned(szPath, &pDisplayInfo->m_bDriverSigned, &pDisplayInfo->m_bDriverSignedValid);
                GetFileDateAndSize(szPath, pDisplayInfo->m_szDriverDateLocal, pDisplayInfo->m_szDriverDate, &pDisplayInfo->m_cbDriver);
                if (lstrlen(pDisplayInfo->m_szDriverVersion) != 0)
                {
                    lstrcat(pDisplayInfo->m_szDriverName, TEXT(".dll"));
                }
            }

        }
    }

    // Use monitor key to get monitor max resolution (and monitor name, if we don't have it yet)
    if (lstrlen(pDisplayInfo->m_szMonitorKey) > 0)
    {
        if (ERROR_SUCCESS == RegOpenKeyEx(HKEY_LOCAL_MACHINE, pDisplayInfo->m_szMonitorKey, 0, KEY_READ, &hkey))
        {
            cbData = sizeof(pDisplayInfo->m_szMonitorMaxRes);
            RegQueryValueEx(hkey, TEXT("MaxResolution"), 0, &dwType, (LPBYTE)pDisplayInfo->m_szMonitorMaxRes, &cbData);
            if (lstrlen(pDisplayInfo->m_szMonitorName) == 0)
            {
                cbData = sizeof(pDisplayInfo->m_szMonitorName);
                RegQueryValueEx(hkey, TEXT("DriverDesc"), 0, &dwType, (LPBYTE)pDisplayInfo->m_szMonitorName, &cbData);
            }
            RegCloseKey(hkey);
        }
    }
}




/****************************************************************************
 *
 *  GetRegDisplayInfoNT - Uses the registry keys to get more info about a 
 *      display adapter.
 *
 ****************************************************************************/
VOID GetRegDisplayInfoNT(DisplayInfo* pDisplayInfo)
{
    TCHAR* pch;
    DWORD dwType;
    DWORD cbData;
    TCHAR szKeyVideo[MAX_PATH+1];
    TCHAR szKeyImage[MAX_PATH+1];
    TCHAR szKey[MAX_PATH+1];
    TCHAR szName[MAX_PATH+1];
    HKEY hkey;
    HKEY hkeyInfo;

    // set to n/a by default
    _tcscpy( pDisplayInfo->m_szMiniVddDate, TEXT("n/a") );

    // On NT, m_szKeyDeviceID isn't quite as specific as we need--must go 
    // one level further in the registry.
    lstrcpy(szKey, TEXT("System\\CurrentControlSet\\"));
    lstrcat(szKey, pDisplayInfo->m_szKeyDeviceID);
    if (ERROR_SUCCESS == RegOpenKeyEx(HKEY_LOCAL_MACHINE, szKey, 0, KEY_READ, &hkey))
    {
        if (ERROR_SUCCESS == RegEnumKey(hkey, 0, szName, MAX_PATH+1))
        {
            if (ERROR_SUCCESS == RegOpenKeyEx(hkey, szName, 0, KEY_READ, &hkeyInfo))
            {
                cbData = sizeof(pDisplayInfo->m_szManufacturer);
                RegQueryValueEx(hkeyInfo, TEXT("Mfg"), 0, &dwType, (LPBYTE)pDisplayInfo->m_szManufacturer, &cbData);
            
                RegCloseKey(hkeyInfo);
            }
        }
        RegCloseKey(hkey);
    }

    // Forked path due to bug 182866: dispinfo.cpp makes an invalid assumption 
    // about the structure of video key.  

    // szKey will be filled with where the video info is.  
    // either "\System\ControlSet001\Services\[Service]\Device0",
    // or "\System\ControlSet001\Video\[GUID]\0000" depending on
    // pDisplayInfo->m_szKeyDeviceKey
    if( _tcsstr( pDisplayInfo->m_szKeyDeviceKey, TEXT("\\Services\\") ) != NULL )
        GetRegDisplayInfoWin2k( pDisplayInfo, szKeyVideo, szKeyImage );
    else
        GetRegDisplayInfoWhistler( pDisplayInfo, szKeyVideo, szKeyImage );

    if (ERROR_SUCCESS == RegOpenKeyEx(HKEY_LOCAL_MACHINE, szKeyVideo, 0, KEY_READ, &hkeyInfo))
    {
        WCHAR wszChipType[200];
        WCHAR wszDACType[200];
        TCHAR szDriver[200];

        cbData = 200 * sizeof(WCHAR);
        if (ERROR_SUCCESS == RegQueryValueEx(hkeyInfo, TEXT("HardwareInformation.ChipType"), 0, &dwType, (LPBYTE)wszChipType, &cbData))
        {
#ifdef UNICODE
            lstrcpy(pDisplayInfo->m_szChipType, wszChipType);
#else
            WideCharToMultiByte(CP_ACP, 0, wszChipType, -1, pDisplayInfo->m_szChipType, 200, NULL, NULL);
#endif
        }

        cbData = 200 * sizeof(WCHAR);
        if (ERROR_SUCCESS == RegQueryValueEx(hkeyInfo, TEXT("HardwareInformation.DacType"), 0, &dwType, (LPBYTE)wszDACType, &cbData))
        {
#ifdef UNICODE
            lstrcpy(pDisplayInfo->m_szDACType, wszDACType);
#else
            WideCharToMultiByte(CP_ACP, 0, wszDACType, -1, pDisplayInfo->m_szDACType, 200, NULL, NULL);
#endif
        }

        DWORD dwDisplayMemory;
        cbData = sizeof(dwDisplayMemory);
        if (ERROR_SUCCESS == RegQueryValueEx(hkeyInfo, TEXT("HardwareInformation.MemorySize"), 0, &dwType, (LPBYTE)&dwDisplayMemory, &cbData))
        {
            // Round to nearest 512K:
            dwDisplayMemory = ((dwDisplayMemory + (256 * 1024)) / (512 * 1024));
            // So dwDisplayMemory is (number of bytes / 512K), which makes the
            // following line easier.
            wsprintf(pDisplayInfo->m_szDisplayMemory, TEXT("%d.%d MB"), dwDisplayMemory / 2, 
                (dwDisplayMemory % 2) * 5);
            lstrcpy(pDisplayInfo->m_szDisplayMemoryEnglish, pDisplayInfo->m_szDisplayMemory );
        }

        cbData = 200;
        if (ERROR_SUCCESS == RegQueryValueEx(hkeyInfo, TEXT("InstalledDisplayDrivers"), 0, &dwType, (LPBYTE)szDriver, &cbData))
        {
            _tcsncpy(pDisplayInfo->m_szDriverName, szDriver, 150);
            pDisplayInfo->m_szDriverName[149] = 0;
            lstrcat(pDisplayInfo->m_szDriverName, TEXT(".dll"));
            TCHAR szPath[MAX_PATH];
            GetSystemDirectory(szPath, MAX_PATH);
            lstrcat(szPath, TEXT("\\"));
            if( lstrlen(szPath) + lstrlen(pDisplayInfo->m_szDriverName) < MAX_PATH )
                lstrcat(szPath, pDisplayInfo->m_szDriverName);

            GetFileVersion(szPath, pDisplayInfo->m_szDriverVersion, 
                pDisplayInfo->m_szDriverAttributes, pDisplayInfo->m_szDriverLanguageLocal, pDisplayInfo->m_szDriverLanguage,
                &pDisplayInfo->m_bDriverBeta, &pDisplayInfo->m_bDriverDebug);
            FileIsSigned(szPath, &pDisplayInfo->m_bDriverSigned, &pDisplayInfo->m_bDriverSignedValid);
            GetFileDateAndSize(szPath, pDisplayInfo->m_szDriverDateLocal, pDisplayInfo->m_szDriverDate, &pDisplayInfo->m_cbDriver);
        }
        RegCloseKey(hkeyInfo);
    }

    if (ERROR_SUCCESS == RegOpenKeyEx(HKEY_LOCAL_MACHINE, szKeyImage, 0, KEY_READ, &hkeyInfo))
    {
        TCHAR szImagePath[MAX_PATH];
        cbData = MAX_PATH;
        if (ERROR_SUCCESS == RegQueryValueEx(hkeyInfo, TEXT("ImagePath"), 0, &dwType, (LPBYTE)szImagePath, &cbData))
        {
            pch = _tcsrchr(szImagePath, TEXT('\\'));
            if( pch != NULL )
            {
                lstrcpy(pDisplayInfo->m_szMiniVdd, pch + 1);
                if (lstrlen(pDisplayInfo->m_szMiniVdd) > 0)
                {
                    TCHAR szPath[MAX_PATH];
                    GetSystemDirectory(szPath, MAX_PATH);
                    lstrcat(szPath, TEXT("\\drivers\\"));
                    lstrcat(szPath, pDisplayInfo->m_szMiniVdd);
                    TCHAR szDateLocal[100];
                    GetFileDateAndSize( szPath, szDateLocal, pDisplayInfo->m_szMiniVddDate, 
                                        &pDisplayInfo->m_cbMiniVdd );
                }
            }
        }
        RegCloseKey(hkeyInfo);
    }
    
    // Use monitor key to get monitor max resolution (and monitor name, if we don't have it yet)
    if (lstrlen(pDisplayInfo->m_szMonitorKey) > 18)
    {
        // Note: Have to skip first 18 characters of string because it's "Registry\Machine\"
        if (ERROR_SUCCESS == RegOpenKeyEx(HKEY_LOCAL_MACHINE, pDisplayInfo->m_szMonitorKey + 18, 0, KEY_READ, &hkeyInfo))
        {
            cbData = sizeof(pDisplayInfo->m_szMonitorMaxRes);
            RegQueryValueEx(hkeyInfo, TEXT("MaxResolution"), 0, &dwType, (LPBYTE)pDisplayInfo->m_szMonitorMaxRes, &cbData);
            if (lstrlen(pDisplayInfo->m_szMonitorName) == 0)
            {
                cbData = sizeof(pDisplayInfo->m_szMonitorName);
                RegQueryValueEx(hkeyInfo, TEXT("DriverDesc"), 0, &dwType, (LPBYTE)pDisplayInfo->m_szMonitorName, &cbData);
            }
            RegCloseKey(hkeyInfo);
        }
    }
}


/****************************************************************************
 *
 *  GetRegDisplayInfoWhistler - Returns string location of video struct and 
 *      ImageInfo info in registry
 *
 ****************************************************************************/
VOID GetRegDisplayInfoWhistler(DisplayInfo* pDisplayInfo, TCHAR* szKeyVideo, TCHAR* szKeyImage )
{
    TCHAR* pch;
    TCHAR szKey[MAX_PATH];
    DWORD dwType;
    DWORD cbData;
    HKEY hkeyService;

    // m_szKeyDeviceKey will be something like 
    // "\Registry\Machine\System\ControlSet001\Video\[GUID]\0000",
    // The "\Registry\Machine\" part is useless, so we skip past the 
    // first 18 characters in the string.
    if( lstrlen(pDisplayInfo->m_szKeyDeviceKey) <= 18 )
    {
        lstrcpy( szKeyImage, TEXT("") );
        lstrcpy( szKeyVideo, TEXT("") );
        return;
    }

    lstrcpy(szKey, pDisplayInfo->m_szKeyDeviceKey + 18);

    // Slice off the "\0000" and add "\Video" to get the service
    pch = _tcsrchr(szKey, TEXT('\\'));
    if (pch != NULL)
        *pch = 0;
    lstrcat(szKey, TEXT("\\Video\\"));

    if (ERROR_SUCCESS == RegOpenKeyEx(HKEY_LOCAL_MACHINE, szKey, 0, KEY_READ, &hkeyService))
    {
        TCHAR szService[MAX_PATH];
        cbData = MAX_PATH;
        if (ERROR_SUCCESS == RegQueryValueEx(hkeyService, TEXT("Service"), 0, &dwType, (LPBYTE)szService, &cbData))
        {
            lstrcpy(szKeyImage, TEXT("System\\CurrentControlSet\\Services\\") );
            if( lstrlen(szKeyImage) + lstrlen(szService) < MAX_PATH )
                lstrcat(szKeyImage, szService);
        }

        RegCloseKey(hkeyService);
    }

    // return something like "\System\ControlSet001\Services\atirage\Device0".  
    lstrcpy(szKeyVideo, pDisplayInfo->m_szKeyDeviceKey + 18);
}


/****************************************************************************
 *
 *  GetRegDisplayInfoWin2k - Returns string location of video struct and 
 *      ImageInfo info in registry
 *
 ****************************************************************************/
VOID GetRegDisplayInfoWin2k(DisplayInfo* pDisplayInfo, TCHAR* szKeyVideo, TCHAR* szKeyImage )
{
    TCHAR* pch;

    // m_szKeyDeviceKey will be something like 
    // "\Registry\Machine\System\ControlSet001\Services\atirage\Device0".  
    // The "\Registry\Machine\" part is useless, so we skip past the 
    // first 18 characters in the string.
    if( lstrlen(pDisplayInfo->m_szKeyDeviceKey) <= 18 )
    {
        lstrcpy( szKeyImage, TEXT("") );
        lstrcpy( szKeyVideo, TEXT("") );
        return;
    }

    lstrcpy(szKeyImage, pDisplayInfo->m_szKeyDeviceKey + 18);

    // Slice off the "\Device0" to get the miniport driver path
    pch = _tcsrchr(szKeyImage, TEXT('\\'));
    if (pch != NULL)
        *pch = 0;

    // return something like "\System\ControlSet001\Services\atirage\Device0".  
    lstrcpy(szKeyVideo, pDisplayInfo->m_szKeyDeviceKey + 18);
}


/****************************************************************************
 *
 *  GetDirectDrawInfo
 *
 ****************************************************************************/
HRESULT GetDirectDrawInfo(LPDIRECTDRAWCREATE pDDCreate, DisplayInfo* pDisplayInfo)
{
    HRESULT hr;
    LPDIRECTDRAW pdd = NULL;
    GUID* pGUID;
    DDCAPS ddcaps;
    DWORD dwDisplayMemory;

    if (pDisplayInfo->m_guid == GUID_NULL)
        pGUID = NULL;
    else
        pGUID = &pDisplayInfo->m_guid;

    if (FAILED(hr = pDDCreate(pGUID, &pdd, NULL)))
        goto LFail;

    ddcaps.dwSize = sizeof(ddcaps);
    if (FAILED(hr = pdd->GetCaps(&ddcaps, NULL)))
        goto LFail;

    // If AGP is disabled, we won't be able to tell if AGP is supported because
    // the flag will not be set.  So in that case, assume that AGP is supported.
    // If AGP is not disabled, check the existence of AGP and note that we are
    // confident in the knowledge of whether AGP exists or not.  I know, it's yucky.
    if (pDisplayInfo->m_bAGPEnabled)
    {
        pDisplayInfo->m_bAGPExistenceValid = TRUE;
        if (ddcaps.dwCaps2 & DDCAPS2_NONLOCALVIDMEM)
            pDisplayInfo->m_bAGPExists = TRUE;
    }
    
    if( ddcaps.dwCaps & DDCAPS_NOHARDWARE ) 
        pDisplayInfo->m_bNoHardware = TRUE;
    else
        pDisplayInfo->m_bNoHardware = FALSE;

    // 28873: if( DDCAPS_NOHARDWARE && m_bDDAccelerationEnabled ) then GetAvailableVidMem is wrong. 
    if( pDisplayInfo->m_bNoHardware && pDisplayInfo->m_bDDAccelerationEnabled )
    {
        LoadString(NULL, IDS_NA, pDisplayInfo->m_szDisplayMemory, 100);
        wsprintf(pDisplayInfo->m_szDisplayMemoryEnglish, TEXT("n/a") );
    }
    else
    {
        if (lstrlen(pDisplayInfo->m_szDisplayMemory) == 0)
        {
            // 26678: returns wrong vid mem for 2nd monitor, so ignore non-hardware devices
            if( (ddcaps.dwCaps & DDCAPS_NOHARDWARE) == 0 )
            {
                // 24351: ddcaps.dwVidMemTotal sometimes includes AGP-accessible memory,
                // which we don't want.  So use GetAvailableVidMem whenever we can, and
                // fall back to ddcaps.dwVidMemTotal if that's a problem.
                dwDisplayMemory = 0;
                LPDIRECTDRAW2 pdd2;
                if (SUCCEEDED(pdd->QueryInterface(IID_IDirectDraw2, (VOID**)&pdd2)))
                {
                    DDSCAPS ddscaps;
                    ddscaps.dwCaps = DDSCAPS_VIDEOMEMORY | DDSCAPS_LOCALVIDMEM;
                    pdd2->GetAvailableVidMem(&ddscaps, &dwDisplayMemory, NULL);
                    pdd2->Release();
                }
                if (dwDisplayMemory == 0)
                {
                    dwDisplayMemory = ddcaps.dwVidMemTotal;
                }
                // Add GDI memory except on no-GDI cards (Voodoo-type cards)
                if (pDisplayInfo->m_bCanRenderWindow)
                {
                    DDSURFACEDESC ddsd;
                    ddsd.dwSize = sizeof(ddsd);
                    if (FAILED(hr = pdd->GetDisplayMode(&ddsd)))
                        goto LFail;

                    dwDisplayMemory += ddsd.dwWidth * ddsd.dwHeight * 
                        (ddsd.ddpfPixelFormat.dwRGBBitCount / 8);
                }
                // Round to nearest 512K:
                dwDisplayMemory = ((dwDisplayMemory + (256 * 1024)) / (512 * 1024));
                // So dwDisplayMemory is (number of bytes / 512K), which makes the
                // following line easier.
                wsprintf(pDisplayInfo->m_szDisplayMemory, TEXT("%d.%d MB"), dwDisplayMemory / 2, 
                    (dwDisplayMemory % 2) * 5);
                lstrcpy(pDisplayInfo->m_szDisplayMemoryEnglish, pDisplayInfo->m_szDisplayMemory );
            }
        }
    }

    // 24427: Detect driver DDI version
    // 24656: Also detect D3D acceleration without DDCAPS_3D, since that flag is
    // sometimes sensitive to the current desktop color depth.

    // First, see if DD/D3D are disabled, and if so, briefly re-enable them
    BOOL bDDDisabled;
    BOOL bD3DDisabled;
    HKEY hkeyDD;
    HKEY hkeyD3D;
    DWORD dwSize;
    DWORD dwType;
    DWORD dwData;

    bDDDisabled = FALSE;
    bD3DDisabled = FALSE;
    hkeyDD = NULL;
    hkeyD3D = NULL;
    if (ERROR_SUCCESS == RegOpenKeyEx(HKEY_LOCAL_MACHINE, 
        TEXT("SOFTWARE\\Microsoft\\DirectDraw"), 0, KEY_ALL_ACCESS, &hkeyDD))
    {
        dwSize = sizeof(dwData);
        dwData = 0;
        RegQueryValueEx(hkeyDD, TEXT("EmulationOnly"), NULL, &dwType, (BYTE *)&dwData, &dwSize);
        if (dwData != 0)
        {
            bDDDisabled = TRUE;
            // Re-enable DD
            dwData = 0;
            RegSetValueEx(hkeyDD, TEXT("EmulationOnly"), 0, REG_DWORD, (BYTE*)&dwData, sizeof(dwData));
        }
        // Note: don't close key yet
    }

    if (ERROR_SUCCESS == RegOpenKeyEx(HKEY_LOCAL_MACHINE, 
        TEXT("SOFTWARE\\Microsoft\\Direct3D\\Drivers"), 0, KEY_ALL_ACCESS, &hkeyD3D))
    {
        dwSize = sizeof(dwData);
        dwData = 0;
        RegQueryValueEx(hkeyD3D, TEXT("SoftwareOnly"), NULL, &dwType, (BYTE *)&dwData, &dwSize);
        if (dwData != 0)
        {
            bD3DDisabled = TRUE;
            // Re-enable D3D
            dwData = 0;
            RegSetValueEx(hkeyD3D, TEXT("SoftwareOnly"), 0, REG_DWORD, (BYTE*)&dwData, sizeof(dwData));
        }
        // Note: don't close key yet
    }

    LPDIRECT3D pd3d;
    if (SUCCEEDED(pdd->QueryInterface(IID_IDirect3D, (VOID**)&pd3d)))
    {
        DWORD dwVersion = 0;
        if (SUCCEEDED(pd3d->EnumDevices(EnumDevicesCallback, (VOID*)&dwVersion)))
        {
            pDisplayInfo->m_dwDDIVersion = dwVersion;
        }
        pd3d->Release();
    }

    // While were in this function wrapped with crash protection try to 
    // get adapter info from D3D8, and match it up with the DisplayInfo list.
    // This will also tell us if m_dwDDIVersion==8.
    GetDX8AdapterInfo(pDisplayInfo);

    switch (pDisplayInfo->m_dwDDIVersion)
    {
    case 0:
        wsprintf(pDisplayInfo->m_szDDIVersion, TEXT("Unknown"));
        break;
    case 7:
        if( IsD3D8Working() )
            wsprintf(pDisplayInfo->m_szDDIVersion, TEXT("7"));
        else
            wsprintf(pDisplayInfo->m_szDDIVersion, TEXT("7 (or higher)"));
        break;
    case 8:
        wsprintf(pDisplayInfo->m_szDDIVersion, TEXT("8 (or higher)"));
        break;
    default:
        wsprintf(pDisplayInfo->m_szDDIVersion, TEXT("%d"), pDisplayInfo->m_dwDDIVersion);
        break;
    }

    if (pDisplayInfo->m_dwDDIVersion != 0)
        pDisplayInfo->m_b3DAccelerationExists = TRUE;

    // Re-disable DD and D3D, if necessary
    dwData = 1;
    if (bDDDisabled)
        RegSetValueEx(hkeyDD, TEXT("EmulationOnly"), 0, REG_DWORD, (BYTE*)&dwData, sizeof(dwData));
    if (bD3DDisabled)
        RegSetValueEx(hkeyD3D, TEXT("SoftwareOnly"), 0, REG_DWORD, (BYTE*)&dwData, sizeof(dwData));
    if (hkeyDD != NULL)
        RegCloseKey(hkeyDD);
    if (hkeyD3D != NULL)
        RegCloseKey(hkeyD3D);

    pdd->Release();
    return S_OK;
LFail:
    if (pdd != NULL)
        pdd->Release();
    return hr;
}


/****************************************************************************
 *
 *  EnumDevicesCallback
 *
 ****************************************************************************/
HRESULT CALLBACK EnumDevicesCallback(GUID* pGuid, LPSTR pszDesc, LPSTR pszName, 
    D3DDEVICEDESC* pd3ddevdesc1, D3DDEVICEDESC* pd3ddevdesc2, VOID* pvContext)
{
    DWORD* pdwVersion = (DWORD*)pvContext;
    DWORD dwDevCaps;
    if (pd3ddevdesc1->dcmColorModel == D3DCOLOR_RGB)
    {
        dwDevCaps = pd3ddevdesc1->dwDevCaps;
        if (dwDevCaps & D3DDEVCAPS_DRAWPRIMITIVES2EX)
            *pdwVersion = 7;
        else if (dwDevCaps & D3DDEVCAPS_DRAWPRIMITIVES2)
            *pdwVersion = 6;
        else if (dwDevCaps & D3DDEVCAPS_DRAWPRIMTLVERTEX)
            *pdwVersion = 5;
        else if (dwDevCaps & D3DDEVCAPS_FLOATTLVERTEX)
            *pdwVersion = 3;
    }
    return D3DENUMRET_OK;
}


/****************************************************************************
 *
 *  IsDDHWAccelEnabled
 *
 ****************************************************************************/
BOOL IsDDHWAccelEnabled(VOID)
{
    HKEY hkey;
    DWORD dwSize;
    DWORD dwType;
    DWORD dwData;
    BOOL bResult = TRUE;

    if (ERROR_SUCCESS == RegOpenKeyEx(HKEY_LOCAL_MACHINE, 
        TEXT("SOFTWARE\\Microsoft\\DirectDraw"), 0, KEY_READ, &hkey))
    {
        dwSize = sizeof(dwData);
        if (ERROR_SUCCESS == RegQueryValueEx(hkey, TEXT("EmulationOnly"), NULL, &dwType, (BYTE *)&dwData, &dwSize))
        {
            if (dwData != 0) 
                bResult = FALSE;
                
            RegCloseKey(hkey);
        }
    }

    return bResult;    
}


/****************************************************************************
 *
 *  IsD3DHWAccelEnabled
 *
 ****************************************************************************/
BOOL IsD3DHWAccelEnabled(VOID)
{
    HKEY hkey;
    DWORD dwSize;
    DWORD dwType;
    DWORD dwData;
    BOOL bIsD3DHWAccelEnabled = TRUE;

    if (ERROR_SUCCESS == RegOpenKeyEx(HKEY_LOCAL_MACHINE, 
        TEXT("SOFTWARE\\Microsoft\\Direct3D\\Drivers"), 0, KEY_READ, &hkey))
    {
        dwSize = sizeof(dwData);
        if (ERROR_SUCCESS == RegQueryValueEx(hkey, TEXT("SoftwareOnly"), NULL, &dwType, (BYTE *)&dwData, &dwSize))
        {
            if (dwData != 0) 
                bIsD3DHWAccelEnabled = FALSE;
                
            RegCloseKey( hkey );
        }            
    }

    return bIsD3DHWAccelEnabled;
}


/****************************************************************************
 *
 *  IsAGPEnabled
 *
 ****************************************************************************/
BOOL IsAGPEnabled(VOID)
{
    HKEY hkey;
    DWORD dwSize;
    DWORD dwType;
    DWORD dwData;
    BOOL bIsAGPEnabled = TRUE;

    if (ERROR_SUCCESS == RegOpenKeyEx(HKEY_LOCAL_MACHINE, 
        TEXT("SOFTWARE\\Microsoft\\DirectDraw"), 0, KEY_READ, &hkey))
    {
        dwSize = sizeof(dwData);
        if (ERROR_SUCCESS == RegQueryValueEx(hkey, TEXT("DisableAGPSupport"), NULL, &dwType, (BYTE *)&dwData, &dwSize))
        {
            if (dwData != 0) 
                bIsAGPEnabled = FALSE;
                
            RegCloseKey( hkey );
        }
    }

    return bIsAGPEnabled;
}


//
// GetDeviceValue
//
// read a value from the HW or SW of a PnP device
//
BOOL GetDeviceValue(TCHAR* pszHardwareKey, TCHAR* pszKey, TCHAR* pszValue, BYTE *buf, DWORD cbbuf)
{
    HKEY    hkeyHW;
    HKEY    hkeySW;
    BOOL    f = FALSE;
    DWORD   cb;
    TCHAR   szSoftwareKey[MAX_PATH];

    *(DWORD*)buf = 0;

    //
    // open the HW key
    //
    if (RegOpenKeyEx(HKEY_LOCAL_MACHINE, pszHardwareKey, 0, KEY_READ, &hkeyHW) == ERROR_SUCCESS)
    {
        //
        // try to read the value from the HW key
        //
        *buf = 0;
        cb = cbbuf;
        if (RegQueryValueEx(hkeyHW, pszValue, NULL, NULL, buf, &cb) == ERROR_SUCCESS)
        {
            f = TRUE;
        }
        else
        {
            //
            // now try the SW key
            //
            static TCHAR szSW[] = TEXT("System\\CurrentControlSet\\Services\\Class\\");

            lstrcpy(szSoftwareKey, szSW);
            cb = sizeof(szSoftwareKey) - sizeof(szSW);           
            TCHAR* sz = szSoftwareKey;
            sz += lstrlen(szSW);
            RegQueryValueEx(hkeyHW, TEXT("Driver"), NULL, NULL, (LPBYTE)sz, &cb);

            if (pszKey)
            {
                lstrcat(szSoftwareKey, TEXT("\\"));
                lstrcat(szSoftwareKey, pszKey);
            }

            if (RegOpenKeyEx(HKEY_LOCAL_MACHINE, szSoftwareKey, 0, KEY_READ, &hkeySW) == ERROR_SUCCESS)
            {
                *buf = 0;
                cb = cbbuf;
                if (RegQueryValueEx(hkeySW, pszValue, NULL, NULL, buf, &cb) == ERROR_SUCCESS)
                {
                    f = TRUE;
                }

                RegCloseKey(hkeySW);
            }
        }

        RegCloseKey(hkeyHW);
    }

    return f;
}

//
// FindDevice
//
// enum the started PnP devices looking for a device of a particular class
//
//  iDevice         what device to return (0= first device, 1=second et)
//  szDeviceClass   what class device (ie "Display") NULL will match all
//  szDeviceID      buffer to return the hardware ID (MAX_PATH bytes)
//
// return TRUE if a device was found.
//
// example:
//
//      for (int i=0; FindDevice(i, "Display", DeviceID); i++)
//      {
//      }
//
BOOL FindDevice(INT iDevice, TCHAR* pszDeviceClass, TCHAR* pszDeviceClassNot, TCHAR* pszHardwareKey)
{
    HKEY    hkeyPnP;
    HKEY    hkey;
    DWORD   n;
    DWORD   cb;
    DWORD   dw;
    TCHAR   ach[MAX_PATH+1];

    if (RegOpenKeyEx(HKEY_DYN_DATA, TEXT("Config Manager\\Enum"), 0, KEY_READ, &hkeyPnP) != ERROR_SUCCESS)
        return FALSE;

    for (n=0; RegEnumKey(hkeyPnP, n, ach, MAX_PATH+1) == 0; n++)
    {
        static TCHAR szHW[] = TEXT("Enum\\");

        if (RegOpenKey(hkeyPnP, ach, &hkey) != ERROR_SUCCESS)
            continue;

        lstrcpy(pszHardwareKey, szHW);
        cb = MAX_PATH - sizeof(szHW);
        RegQueryValueEx(hkey, TEXT("HardwareKey"), NULL, NULL, (BYTE*)pszHardwareKey + sizeof(szHW) - 1, &cb);

        dw = 0;
        cb = sizeof(dw);
        RegQueryValueEx(hkey, TEXT("Problem"), NULL, NULL, (BYTE*)&dw, &cb);
        RegCloseKey(hkey);

        if (dw != 0)        // if this device has a problem skip it
            continue;

        if (pszDeviceClass || pszDeviceClassNot)
        {
            GetDeviceValue(pszHardwareKey, NULL, TEXT("Class"), (BYTE*)ach, sizeof(ach));

            if (pszDeviceClass && DXUtil_strcmpi(pszDeviceClass, ach) != 0)
                continue;

            if (pszDeviceClassNot && DXUtil_strcmpi(pszDeviceClassNot, ach) == 0)
                continue;
        }

        //
        // we found a device, make sure it is the one the caller wants
        //
        if (iDevice-- == 0)
        {
            RegCloseKey(hkeyPnP);
            return TRUE;
        }
    }

    RegCloseKey(hkeyPnP);
    return FALSE;
}


/****************************************************************************
 *
 *  CheckRegistry
 *
 ****************************************************************************/
HRESULT CheckRegistry(RegError** ppRegErrorFirst)
{
    HRESULT hr;
    HKEY HKLM = HKEY_LOCAL_MACHINE;
    HKEY HKCR = HKEY_CLASSES_ROOT;

    TCHAR szVersion[100];
    HKEY hkey;
    DWORD cbData;
    ULONG ulType;

    DWORD dwMajor = 0;
    DWORD dwMinor = 0;
    DWORD dwRevision = 0;
    DWORD dwBuild = 0;

    if (ERROR_SUCCESS == RegOpenKeyEx(HKEY_LOCAL_MACHINE, TEXT("Software\\Microsoft\\DirectX"),
        0, KEY_READ, &hkey))
    {
        cbData = 100;
        RegQueryValueEx(hkey, TEXT("Version"), 0, &ulType, (LPBYTE)szVersion, &cbData);
        RegCloseKey(hkey);
        if (lstrlen(szVersion) > 6 && 
            lstrlen(szVersion) < 20)
        {
            if( _stscanf(szVersion, TEXT("%d.%d.%d.%d"), &dwMajor, &dwMinor, &dwRevision, &dwBuild) != 4 )
            {
                dwMajor = 0;
                dwMinor = 0;
                dwRevision = 0;
                dwBuild = 0;
            }
        }
    }

    // No registry checking on DX versions before DX7
    if (dwMinor < 7)
        return S_OK;

    // From ddraw.inf (compatibility hacks not included):
    if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKCR, TEXT("DirectDraw"), TEXT(""), TEXT("*"))))
        return hr;
    if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKCR, TEXT("DirectDraw\\CLSID"), TEXT(""), TEXT("{D7B70EE0-4340-11CF-B063-0020AFC2CD35}"))))
        return hr;
    if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKCR, TEXT("CLSID\\{D7B70EE0-4340-11CF-B063-0020AFC2CD35}"), TEXT(""), TEXT("*"))))
        return hr;
    if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKCR, TEXT("CLSID\\{D7B70EE0-4340-11CF-B063-0020AFC2CD35}\\InprocServer32"), TEXT(""), TEXT("ddraw.dll"), CRF_LEAF)))
        return hr;
    if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKCR, TEXT("CLSID\\{D7B70EE0-4340-11CF-B063-0020AFC2CD35}\\InprocServer32"), TEXT("ThreadingModel"), TEXT("Both"))))
        return hr;

    if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKCR, TEXT("DirectDrawClipper"), TEXT(""), TEXT("*"))))
        return hr;
    if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKCR, TEXT("DirectDrawClipper\\CLSID"), TEXT(""), TEXT("{593817A0-7DB3-11CF-A2DE-00AA00B93356}"))))
        return hr;
    if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKCR, TEXT("CLSID\\{593817A0-7DB3-11CF-A2DE-00AA00B93356}"), TEXT(""), TEXT("*"))))
        return hr;
    if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKCR, TEXT("CLSID\\{593817A0-7DB3-11CF-A2DE-00AA00B93356}\\InprocServer32"), TEXT(""), TEXT("ddraw.dll"), CRF_LEAF)))
        return hr;
    if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKCR, TEXT("CLSID\\{593817A0-7DB3-11CF-A2DE-00AA00B93356}\\InprocServer32"), TEXT("ThreadingModel"), TEXT("Both"))))
        return hr;

    if (!BIsPlatformNT())
    {
        // We can't check for the following entry on Win2000 because it is missing.
        if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKCR, TEXT("CLSID\\{4FD2A832-86C8-11d0-8FCA-00C04FD9189D}"), TEXT(""), TEXT("*"))))
            return hr;
    }
    if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKCR, TEXT("CLSID\\{4FD2A832-86C8-11d0-8FCA-00C04FD9189D}\\InprocServer32"), TEXT(""), TEXT("ddrawex.dll"), CRF_LEAF)))
        return hr;
    if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKCR, TEXT("CLSID\\{4FD2A832-86C8-11d0-8FCA-00C04FD9189D}\\InprocServer32"), TEXT("ThreadingModel"), TEXT("Both"))))
        return hr;


    // From d3d.inf:
    TCHAR* pszHALKey = TEXT("Software\\Microsoft\\Direct3D\\Drivers\\Direct3D HAL");
    BYTE bArrayHALGuid[] = { 0xe0, 0x3d, 0xe6, 0x84, 0xaa, 0x46, 0xcf, 0x11, 0x81, 0x6f, 0x00, 0x00, 0xc0, 0x20, 0x15, 0x6e };
    TCHAR* pszRampKey = TEXT("Software\\Microsoft\\Direct3D\\Drivers\\Ramp Emulation");
    BYTE bArrayRampGuid[] = { 0x20, 0x6b, 0x08, 0xf2, 0x9f, 0x25, 0xcf, 0x11, 0xa3, 0x1a, 0x00, 0xaa, 0x00, 0xb9, 0x33, 0x56 };
    TCHAR* pszRGBKey = TEXT("Software\\Microsoft\\Direct3D\\Drivers\\RGB Emulation");
    BYTE bArrayRGBGuid[] = { 0x60, 0x5c, 0x66, 0xa4, 0x73, 0x26, 0xcf, 0x11, 0xa3, 0x1a, 0x00, 0xaa, 0x00, 0xb9, 0x33, 0x56 };

    if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKLM, pszHALKey, TEXT("Base"), TEXT("hal"))))
        return hr;
    if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKLM, pszHALKey, TEXT("Description"), TEXT("*"))))
        return hr;
    if (FAILED(hr = CheckRegBinary(ppRegErrorFirst, HKLM, pszHALKey, TEXT("GUID"), bArrayHALGuid, sizeof(bArrayHALGuid))))
        return hr;

    if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKLM, pszRampKey, TEXT("Base"), TEXT("ramp"))))
        return hr;
    if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKLM, pszRampKey, TEXT("Description"), TEXT("*"))))
        return hr;
    if (FAILED(hr = CheckRegBinary(ppRegErrorFirst, HKLM, pszRampKey, TEXT("GUID"), bArrayRampGuid, sizeof(bArrayRampGuid))))
        return hr;

    if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKLM, pszRGBKey, TEXT("Base"), TEXT("rgb"))))
        return hr;
    if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKLM, pszRGBKey, TEXT("Description"), TEXT("*"))))
        return hr;
    if (FAILED(hr = CheckRegBinary(ppRegErrorFirst, HKLM, pszRGBKey, TEXT("GUID"), bArrayRGBGuid, sizeof(bArrayRGBGuid))))
        return hr;

    if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKLM, TEXT("Software\\Microsoft\\Direct3D\\DX6TextureEnumInclusionList\\16 bit Bump DuDv"), TEXT("ddpf"), TEXT("00080000 0 16 ff ff00 0 0"))))
        return hr;
    if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKLM, TEXT("Software\\Microsoft\\Direct3D\\DX6TextureEnumInclusionList\\16 bit BumpLum DuDv"), TEXT("ddpf"), TEXT("000C0000 0 16 1f 3e0 fc00 0"))))
        return hr;
    if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKLM, TEXT("Software\\Microsoft\\Direct3D\\DX6TextureEnumInclusionList\\16 bit Luminance Alpha"), TEXT("ddpf"), TEXT("00020001 0 16 ff 0 0 ff00"))))
        return hr;
    if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKLM, TEXT("Software\\Microsoft\\Direct3D\\DX6TextureEnumInclusionList\\24 bit BumpLum DuDv"), TEXT("ddpf"), TEXT("000C0000 0 24 ff ff00 ff0000 0"))))
        return hr;
    if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKLM, TEXT("Software\\Microsoft\\Direct3D\\DX6TextureEnumInclusionList\\8 bit Luminance"), TEXT("ddpf"), TEXT("00020000 0  8 ff 0 0 0"))))
        return hr;

    if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKCR, TEXT("Direct3DRM"), TEXT(""), TEXT("*"))))
        return hr;
    if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKCR, TEXT("Direct3DRM\\CLSID"), TEXT(""), TEXT("{4516EC41-8F20-11d0-9B6D-0000C0781BC3}"))))
        return hr;
    if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKCR, TEXT("CLSID\\{4516EC41-8F20-11d0-9B6D-0000C0781BC3}"), TEXT(""), TEXT("*"))))
        return hr;
    if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKCR, TEXT("CLSID\\{4516EC41-8F20-11d0-9B6D-0000C0781BC3}\\InprocServer32"), TEXT(""), TEXT("d3drm.dll"))))
        return hr;
    if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKCR, TEXT("CLSID\\{4516EC41-8F20-11d0-9B6D-0000C0781BC3}\\InprocServer32"), TEXT("ThreadingModel"), TEXT("Both"))))
        return hr;

    if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKCR, TEXT("DirectXFile"), TEXT(""), TEXT("*"))))
        return hr;
    if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKCR, TEXT("DirectXFile\\CLSID"), TEXT(""), TEXT("{4516EC43-8F20-11D0-9B6D-0000C0781BC3}"))))
        return hr;
    if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKCR, TEXT("CLSID\\{4516EC43-8F20-11D0-9B6D-0000C0781BC3}"), TEXT(""), TEXT("*"))))
        return hr;
    if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKCR, TEXT("CLSID\\{4516EC43-8F20-11d0-9B6D-0000C0781BC3}\\InprocServer32"), TEXT(""), TEXT("d3dxof.dll"))))
        return hr;
    if (BIsPlatformNT())
    {
        // 23342: This setting is missing on Win9x.
        if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKCR, TEXT("CLSID\\{4516EC43-8F20-11d0-9B6D-0000C0781BC3}\\InprocServer32"), TEXT("ThreadingModel"), TEXT("Both"))))
            return hr;
    }

    return S_OK;
}


/****************************************************************************
 *
 *  DiagnoseDisplay
 *
 ****************************************************************************/
VOID DiagnoseDisplay(SysInfo* pSysInfo, DisplayInfo* pDisplayInfoFirst)
{
    DisplayInfo* pDisplayInfo;
    TCHAR sz[300];
    TCHAR szEnglish[300];
    TCHAR szFmt[300];
    BOOL bShouldReinstall = FALSE;

    for (pDisplayInfo = pDisplayInfoFirst; pDisplayInfo != NULL; 
        pDisplayInfo = pDisplayInfo->m_pDisplayInfoNext)
    {
        if (pDisplayInfo->m_bDDAccelerationEnabled)
        {
            if( pDisplayInfo->m_bNoHardware )
            {
                LoadString(NULL, IDS_ACCELUNAVAIL, sz, 100);
                LoadString(NULL, IDS_ACCELUNAVAIL_ENGLISH, szEnglish, 100);
            }
            else
            {
                LoadString(NULL, IDS_ACCELENABLED, sz, 100);
                LoadString(NULL, IDS_ACCELENABLED_ENGLISH, szEnglish, 100);
            }
        }
        else
        {
            LoadString(NULL, IDS_ACCELDISABLED, sz, 100);
            LoadString(NULL, IDS_ACCELDISABLED_ENGLISH, szEnglish, 100);
        }

        _tcscpy( pDisplayInfo->m_szDDStatus, sz );
        _tcscpy( pDisplayInfo->m_szDDStatusEnglish, szEnglish );

        if (pDisplayInfo->m_b3DAccelerationExists)
        {
            if (pDisplayInfo->m_b3DAccelerationEnabled)
            {
                LoadString(NULL, IDS_ACCELENABLED, sz, 100);
                LoadString(NULL, IDS_ACCELENABLED_ENGLISH, szEnglish, 100);
            }
            else
            {
                LoadString(NULL, IDS_ACCELDISABLED, sz, 100);
                LoadString(NULL, IDS_ACCELDISABLED_ENGLISH, szEnglish, 100);
            }
        }
        else
        {
            LoadString(NULL, IDS_ACCELUNAVAIL, sz, 100);
            LoadString(NULL, IDS_ACCELUNAVAIL_ENGLISH, szEnglish, 100);
        }
        _tcscpy( pDisplayInfo->m_szD3DStatus, sz );
        _tcscpy( pDisplayInfo->m_szD3DStatusEnglish, szEnglish );

        if ( (pDisplayInfo->m_bAGPExistenceValid && !pDisplayInfo->m_bAGPExists) ||
             (!pDisplayInfo->m_bDDAccelerationEnabled) )
        {
            LoadString(NULL, IDS_ACCELUNAVAIL, sz, 100);
            LoadString(NULL, IDS_ACCELUNAVAIL_ENGLISH, szEnglish, 100);
        }
        else
        {
            if (pDisplayInfo->m_bAGPEnabled)
            {
                LoadString(NULL, IDS_ACCELENABLED, sz, 100);
                LoadString(NULL, IDS_ACCELENABLED_ENGLISH, szEnglish, 100);
            }
            else
            {
                LoadString(NULL, IDS_ACCELDISABLED, sz, 100);
                LoadString(NULL, IDS_ACCELDISABLED_ENGLISH, szEnglish, 100);
            }
        }
        _tcscpy( pDisplayInfo->m_szAGPStatus, sz );
        _tcscpy( pDisplayInfo->m_szAGPStatusEnglish, szEnglish );
       
        _tcscpy( pDisplayInfo->m_szNotes, TEXT("") );
        _tcscpy( pDisplayInfo->m_szNotesEnglish, TEXT("") );

        // Report any problems:
        BOOL bProblem = FALSE;
        if( pSysInfo->m_bNetMeetingRunning && 
            !pDisplayInfo->m_b3DAccelerationExists )
        {
            LoadString(NULL, IDS_NETMEETINGWARN, szFmt, MAX_PATH);
            wsprintf(sz, szFmt, pDisplayInfo->m_szDriverName);
            _tcscat( pDisplayInfo->m_szNotes, sz );

            LoadString(NULL, IDS_NETMEETINGWARN_ENGLISH, szFmt, MAX_PATH);
            wsprintf(sz, szFmt, pDisplayInfo->m_szDriverName);
            _tcscat( pDisplayInfo->m_szNotesEnglish, sz );

            bProblem = TRUE;
        }

        if (pDisplayInfo->m_bDriverSignedValid && !pDisplayInfo->m_bDriverSigned)
        {
            LoadString(NULL, IDS_UNSIGNEDDRIVERFMT1, szFmt, MAX_PATH);
            wsprintf(sz, szFmt, pDisplayInfo->m_szDriverName);
            _tcscat( pDisplayInfo->m_szNotes, sz );

            LoadString(NULL, IDS_UNSIGNEDDRIVERFMT1_ENGLISH, szFmt, MAX_PATH);
            wsprintf(sz, szFmt, pDisplayInfo->m_szDriverName);
            _tcscat( pDisplayInfo->m_szNotesEnglish, sz );

            bProblem = TRUE;
        }

        if (pDisplayInfo->m_pRegErrorFirst != NULL)
        {
            LoadString(NULL, IDS_REGISTRYPROBLEM, sz, MAX_PATH);
            _tcscat( pDisplayInfo->m_szNotes, sz );

            LoadString(NULL, IDS_REGISTRYPROBLEM_ENGLISH, sz, MAX_PATH);
            _tcscat( pDisplayInfo->m_szNotesEnglish, sz );

            bProblem = TRUE;
            bShouldReinstall = TRUE;
        }

        if( bShouldReinstall )
        {
            BOOL bTellUser = FALSE;

            // Figure out if the user can install DirectX
            if( BIsPlatform9x() )
                bTellUser = TRUE;
            else if( BIsWin2k() && pSysInfo->m_dwDirectXVersionMajor >= 8 )
                bTellUser = TRUE;

            if( bTellUser )
            {
                LoadString(NULL, IDS_REINSTALL_DX, sz, 300);
                _tcscat( pDisplayInfo->m_szNotes, sz);

                LoadString(NULL, IDS_REINSTALL_DX_ENGLISH, sz, 300);
                _tcscat( pDisplayInfo->m_szNotesEnglish, sz);
            }
        }

        if (!bProblem)
        {
            LoadString(NULL, IDS_NOPROBLEM, sz, MAX_PATH);
            _tcscat( pDisplayInfo->m_szNotes, sz );

            LoadString(NULL, IDS_NOPROBLEM_ENGLISH, sz, MAX_PATH);
            _tcscat( pDisplayInfo->m_szNotesEnglish, sz );
        }

        // Report any DD test results:
        if (pDisplayInfo->m_testResultDD.m_bStarted &&
            !pDisplayInfo->m_testResultDD.m_bCancelled)
        {
            LoadString(NULL, IDS_DDRESULTS, sz, MAX_PATH);
            _tcscat( pDisplayInfo->m_szNotes, sz );
            _tcscat( pDisplayInfo->m_szNotes, pDisplayInfo->m_testResultDD.m_szDescription );
            _tcscat( pDisplayInfo->m_szNotes, TEXT("\r\n") );

            LoadString(NULL, IDS_DDRESULTS_ENGLISH, sz, MAX_PATH);
            _tcscat( pDisplayInfo->m_szNotesEnglish, sz );
            _tcscat( pDisplayInfo->m_szNotesEnglish, pDisplayInfo->m_testResultDD.m_szDescription );
            _tcscat( pDisplayInfo->m_szNotesEnglish, TEXT("\r\n") );
        }
        else
        {
            LoadString(NULL, IDS_DDINSTRUCTIONS, sz, MAX_PATH);
            _tcscat( pDisplayInfo->m_szNotes, sz );

            LoadString(NULL, IDS_DDINSTRUCTIONS_ENGLISH, sz, MAX_PATH);
            _tcscat( pDisplayInfo->m_szNotesEnglish, sz );
        }

        // Report any D3D test results:
        TestResult* pTestResult;
        if( pDisplayInfo->m_dwTestToDisplayD3D == 7 )
            pTestResult = &pDisplayInfo->m_testResultD3D7;
        else
            pTestResult = &pDisplayInfo->m_testResultD3D8;

        if (pTestResult->m_bStarted &&
            !pTestResult->m_bCancelled)
        {
            LoadString(NULL, IDS_D3DRESULTS, sz, MAX_PATH);
            _tcscat( pDisplayInfo->m_szNotes, sz );
            _tcscat( pDisplayInfo->m_szNotes, pTestResult->m_szDescription );
            _tcscat( pDisplayInfo->m_szNotes, TEXT("\r\n") );

            LoadString(NULL, IDS_D3DRESULTS_ENGLISH, sz, MAX_PATH);
            _tcscat( pDisplayInfo->m_szNotesEnglish, sz );
            _tcscat( pDisplayInfo->m_szNotesEnglish, pTestResult->m_szDescription );
            _tcscat( pDisplayInfo->m_szNotesEnglish, TEXT("\r\n") );
        }
        else
        {
            if( pDisplayInfo->m_b3DAccelerationExists && 
                pDisplayInfo->m_b3DAccelerationEnabled )
            {
                LoadString(NULL, IDS_D3DINSTRUCTIONS, sz, MAX_PATH);
                _tcscat( pDisplayInfo->m_szNotes, sz );

                LoadString(NULL, IDS_D3DINSTRUCTIONS_ENGLISH, sz, MAX_PATH);
                _tcscat( pDisplayInfo->m_szNotesEnglish, sz );
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\directx\dxdiag\dispinfo.h ===
/****************************************************************************
 *
 *    File: dispinfo.h
 * Project: DxDiag (DirectX Diagnostic Tool)
 *  Author: Mike Anderson (manders@microsoft.com)
 * Purpose: Gather information about the display(s) on this machine
 *
 * (C) Copyright 1998 Microsoft Corp.  All rights reserved.
 *
 ****************************************************************************/

#ifndef DISPINFO_H
#define DISPINFO_H

// DXD_IN_DD_VALUE is the name of a value stored under the registry key 
// HKLM\DXD_IN_DD_KEY that indicates that DxDiag is using
// DirectDraw.  If DxDiag starts up and this value exists, DxDiag 
// probably crashed in DirectDraw and DxDiag should offer to run without
// using DirectDraw.
#define DXD_IN_DD_KEY TEXT("Software\\Microsoft\\DirectX Diagnostic Tool")
#define DXD_IN_DD_VALUE TEXT("DxDiag In DirectDraw")

struct TestResult
{
    BOOL m_bStarted; // has user tried to run test yet?
    BOOL m_bCancelled;
    LONG m_iStepThatFailed;
    HRESULT m_hr;
    TCHAR m_szDescription[300]; // description of test result
    TCHAR m_szDescriptionEnglish[300]; // description of test result, non-localized
};

struct DisplayInfo
{
    GUID m_guid;
    GUID m_guidDeviceIdentifier;
    TCHAR m_szKeyDeviceID[200];
    TCHAR m_szKeyDeviceKey[200];

    TCHAR m_szDeviceName[100];
    TCHAR m_szDescription[200];
    TCHAR m_szManufacturer[200];
    TCHAR m_szChipType[200];
    TCHAR m_szDACType[200];
    TCHAR m_szRevision[100];
    TCHAR m_szDisplayMemory[100];
    TCHAR m_szDisplayMemoryEnglish[100];
    TCHAR m_szDisplayMode[100];
    TCHAR m_szDisplayModeEnglish[100];
    DWORD m_dwWidth;
    DWORD m_dwHeight;
    DWORD m_dwBpp;
    DWORD m_dwRefreshRate;

    TCHAR m_szMonitorName[200];
    TCHAR m_szMonitorKey[200];
    TCHAR m_szMonitorMaxRes[100];
    HMONITOR m_hMonitor;

    TCHAR m_szDriverName[200];
    TCHAR m_szDriverVersion[100];
    TCHAR m_szDriverAttributes[100];
    TCHAR m_szDriverLanguage[100];
    TCHAR m_szDriverLanguageLocal[100];
    TCHAR m_szDriverDate[100];
    TCHAR m_szDriverDateLocal[100];
    LONG m_cbDriver;
    TCHAR m_szDrv[100];
    TCHAR m_szDrv2[100];
    TCHAR m_szMiniVdd[100];
    TCHAR m_szMiniVddDate[100];
    LONG  m_cbMiniVdd;
    TCHAR m_szVdd[100];

    BOOL m_bCanRenderWindow;
    BOOL m_bDriverBeta;
    BOOL m_bDriverDebug;
    BOOL m_bDriverSigned;
    BOOL m_bDriverSignedValid;
    DWORD m_dwDDIVersion;
    TCHAR m_szDDIVersion[100];

    DWORD m_iAdapter;
    TCHAR m_szDX8VendorId[50];
    TCHAR m_szDX8DeviceId[50];
    TCHAR m_szDX8SubSysId[50];
    TCHAR m_szDX8Revision[50];
    GUID  m_guidDX8DeviceIdentifier;
    DWORD m_dwDX8WHQLLevel;
    BOOL  m_bDX8DriverSigned;
    BOOL  m_bDX8DriverSignedValid;
    TCHAR m_szDX8DeviceIdentifier[100];
    TCHAR m_szDX8DriverSignDate[50]; // Valid only if m_bDriverSigned is TRUE

    BOOL m_bNoHardware;
    BOOL m_bDDAccelerationEnabled;
    BOOL m_b3DAccelerationExists;
    BOOL m_b3DAccelerationEnabled;
    BOOL m_bAGPEnabled;
    BOOL m_bAGPExists;
    BOOL m_bAGPExistenceValid; // TRUE if m_bAGPExists can be trusted

    TCHAR m_szDDStatus[100]; 
    TCHAR m_szDDStatusEnglish[100]; 
    TCHAR m_szD3DStatus[100]; 
    TCHAR m_szD3DStatusEnglish[100]; 
    TCHAR m_szAGPStatus[100]; 
    TCHAR m_szAGPStatusEnglish[100]; 

    RegError* m_pRegErrorFirst;
    TCHAR m_szNotes[3000]; 
    TCHAR m_szNotesEnglish[3000]; 

    TestResult m_testResultDD;  // This is filled in by testdd.cpp
    TestResult m_testResultD3D7; // This is filled in by main.cpp (testd3d.cpp)
    TestResult m_testResultD3D8; // This is filled in by main.cpp (testd3d8.cpp)
    DWORD      m_dwTestToDisplayD3D;

    DisplayInfo* m_pDisplayInfoNext;
};

HRESULT GetBasicDisplayInfo(DisplayInfo** ppDisplayInfoFirst);
HRESULT GetExtraDisplayInfo(DisplayInfo* pDisplayInfoFirst);
HRESULT GetDDrawDisplayInfo(DisplayInfo* pDisplayInfoFirst);
VOID DestroyDisplayInfo(DisplayInfo* pDisplayInfoFirst);
BOOL IsDDHWAccelEnabled(VOID);
BOOL IsD3DHWAccelEnabled(VOID);
BOOL IsAGPEnabled(VOID);
VOID DiagnoseDisplay(SysInfo* pSysInfo, DisplayInfo* pDisplayInfoFirst);

#endif // DISPINFO_H
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\directx\dxdiag\dispinfo8.cpp ===
/****************************************************************************
 *
 *    File: dispinfo8.cpp 
 * Project: DxDiag (DirectX Diagnostic Tool)
 *  Author: Jason Sandlin (jasonsa@microsoft.com)
 * Purpose: Gather D3D8 information 
 *
 * (C) Copyright 2000 Microsoft Corp.  All rights reserved.
 *
 ****************************************************************************/

#include <tchar.h>
#include <Windows.h>
#define DIRECT3D_VERSION 0x0800 // file uses DX8 
#include <d3d8.h>
#include <stdio.h>
#include "sysinfo.h" 
#include "reginfo.h"
#include "dispinfo.h"


typedef IDirect3D8* (WINAPI* LPDIRECT3DCREATE8)(UINT SDKVersion);

static BOOL IsMatchWithDisplayDevice( DisplayInfo* pDisplayInfo, HMONITOR hMonitor, BOOL bCanRenderWindow );

static HINSTANCE            s_hInstD3D8               = NULL;
static IDirect3D8*          s_pD3D8                   = NULL;
static BOOL                 s_bD3D8WrongHeaders       = FALSE;


/****************************************************************************
 *
 *  InitD3D8
 *
 ****************************************************************************/
HRESULT InitD3D8()
{
    LPDIRECT3DCREATE8 pD3DCreate8 = NULL;
    TCHAR szPath[MAX_PATH];

    GetSystemDirectory(szPath, MAX_PATH);
    lstrcat(szPath, TEXT("\\d3d8.dll"));

    // This may fail if DX8 isn't on the system
    s_hInstD3D8 = LoadLibrary(szPath);
    if (s_hInstD3D8 == NULL)
        return E_FAIL;

    pD3DCreate8 = (LPDIRECT3DCREATE8)GetProcAddress(s_hInstD3D8, "Direct3DCreate8");
    if (pD3DCreate8 == NULL)
    {
        FreeLibrary(s_hInstD3D8);
        s_hInstD3D8 = NULL;

        return E_FAIL;
    }

    s_pD3D8 = pD3DCreate8(D3D_SDK_VERSION);
    if( s_pD3D8 == NULL )
    {
        // We have the wrong headers since d3d8.dll loaded but D3DCreate8() failed.
        s_bD3D8WrongHeaders = TRUE;
    }

    return S_OK;
}


/****************************************************************************
 *
 *  CleanupD3D8
 *
 ****************************************************************************/
VOID CleanupD3D8()
{
    if( s_pD3D8 )
    {
        s_pD3D8->Release();
        s_pD3D8 = NULL;
    }

    if( s_hInstD3D8 )
    {
        FreeLibrary(s_hInstD3D8);
        s_hInstD3D8 = NULL;
    }
}


/****************************************************************************
 *
 *  IsD3D8Working
 *
 ****************************************************************************/
BOOL IsD3D8Working()
{
    if( s_pD3D8 )
        return TRUE;
    else
        return FALSE;
}


/****************************************************************************
 *
 *  GetDX8AdapterInfo
 *
 ****************************************************************************/
HRESULT GetDX8AdapterInfo(DisplayInfo* pDisplayInfo)
{
    UINT                        nAdapterCount;
    D3DADAPTER_IDENTIFIER8      d3d8Id;
    D3DCAPS8                    d3d8Caps;
    UINT                        iAdapter;
    HMONITOR                    hMonitor;
    BOOL                        bCanRenderWindow;
    BOOL                        bIsDDI8;

    // D3D8 may not exist on this system
    if( s_pD3D8 == NULL )
    {
        _tcscpy( pDisplayInfo->m_szDX8DriverSignDate, TEXT("n/a") );
        _tcscpy( pDisplayInfo->m_szDX8VendorId, TEXT("n/a") );
        _tcscpy( pDisplayInfo->m_szDX8DeviceId, TEXT("n/a") );
        _tcscpy( pDisplayInfo->m_szDX8SubSysId, TEXT("n/a") );
        _tcscpy( pDisplayInfo->m_szDX8Revision, TEXT("n/a") );

        if( s_bD3D8WrongHeaders ) 
        {
            _tcscpy( pDisplayInfo->m_szDX8DeviceIdentifier, 
                     TEXT("Could not initialize Direct3D v8. ")
                     TEXT("This program was compiled with header ")
                     TEXT("files that do not match the installed ")
                     TEXT("DirectX DLLs") );
        }
        else
        {
            _tcscpy( pDisplayInfo->m_szDX8DeviceIdentifier, TEXT("n/a") );
        }

        return S_OK;
    }

    // Get the # of adapters on the system
    nAdapterCount = s_pD3D8->GetAdapterCount();

    // For each adapter try to match it to the pDisplayInfo using the HMONTIOR
    for( iAdapter=0; iAdapter<nAdapterCount; iAdapter++ )
    {
        bCanRenderWindow = TRUE;
        bIsDDI8          = FALSE;
       
        // Get the HMONITOR for this adapter
        hMonitor = s_pD3D8->GetAdapterMonitor( iAdapter );

        // Get the caps for this adapter
        ZeroMemory( &d3d8Caps, sizeof(D3DCAPS8) );
        if( SUCCEEDED( s_pD3D8->GetDeviceCaps( iAdapter, D3DDEVTYPE_HAL, &d3d8Caps ) ) )
        {
            // Record if its a non-GDI (Voodoo1/2) card
            bCanRenderWindow = ( (d3d8Caps.Caps2 & D3DCAPS2_CANRENDERWINDOWED) != 0 );

            // Check if its a DDI v8 driver
            bIsDDI8 = ( d3d8Caps.MaxStreams > 0 );   
        }

        // Check to see if the pDisplayInfo matchs with this adapter, 
        // and if not, then keep looking
        if( !IsMatchWithDisplayDevice( pDisplayInfo, hMonitor, bCanRenderWindow ) )
            continue;

        // Record the DDI version if the caps told us 
        if( bIsDDI8 )
            pDisplayInfo->m_dwDDIVersion = 8;

        // Link this iAdapter to this pDisplayInfo
        pDisplayInfo->m_iAdapter = iAdapter;
    
        // Get the D3DADAPTER_IDENTIFIER8 for this adapter 
        ZeroMemory( &d3d8Id, sizeof(D3DADAPTER_IDENTIFIER8) );
        if( SUCCEEDED( s_pD3D8->GetAdapterIdentifier( iAdapter, 0, &d3d8Id ) ) )
        {
            // Copy various IDs
            wsprintf( pDisplayInfo->m_szDX8VendorId, TEXT("0x%04.4X"), d3d8Id.VendorId );
            wsprintf( pDisplayInfo->m_szDX8DeviceId, TEXT("0x%04.4X"), d3d8Id.DeviceId );
            wsprintf( pDisplayInfo->m_szDX8SubSysId, TEXT("0x%08.8X"), d3d8Id.SubSysId );
            wsprintf( pDisplayInfo->m_szDX8Revision, TEXT("0x%04.4X"), d3d8Id.Revision );

            // Copy device GUID
            pDisplayInfo->m_guidDX8DeviceIdentifier = d3d8Id.DeviceIdentifier;
			_stprintf( pDisplayInfo->m_szDX8DeviceIdentifier, TEXT("{%08.8X-%04.4X-%04.4X-%02.2X%02.2X-%02.2X%02.2X%02.2X%02.2X%02.2X%02.2X}"),
    		       d3d8Id.DeviceIdentifier.Data1, d3d8Id.DeviceIdentifier.Data2, d3d8Id.DeviceIdentifier.Data3,
    		       d3d8Id.DeviceIdentifier.Data4[0], d3d8Id.DeviceIdentifier.Data4[1],
    		       d3d8Id.DeviceIdentifier.Data4[2], d3d8Id.DeviceIdentifier.Data4[3],
		           d3d8Id.DeviceIdentifier.Data4[4], d3d8Id.DeviceIdentifier.Data4[5],
		           d3d8Id.DeviceIdentifier.Data4[6], d3d8Id.DeviceIdentifier.Data4[7] );			
		           
            // Copy and parse the WHQLLevel 
            // 0 == Not signed. 
            // 1 == WHQL signed, but no date information is available. 
            // >1   means signed, date bit packed
            pDisplayInfo->m_dwDX8WHQLLevel  = d3d8Id.WHQLLevel;
            if( d3d8Id.WHQLLevel == 0 )
            {
                pDisplayInfo->m_bDX8DriverSigned = FALSE;
                pDisplayInfo->m_bDX8DriverSignedValid = TRUE;
            }
            else
            {
                pDisplayInfo->m_bDX8DriverSigned = TRUE;
                pDisplayInfo->m_bDX8DriverSignedValid = TRUE;

                pDisplayInfo->m_bDriverSigned = TRUE;
                pDisplayInfo->m_bDriverSignedValid = TRUE;

                if( d3d8Id.WHQLLevel == 1 )
                {
                    lstrcpy( pDisplayInfo->m_szDX8DriverSignDate, TEXT("n/a") );
                }
                else
                {
                    // Bits encoded as:
                    // 31-16:    The year, a decimal number from 1999 upwards.
                    // 15-8:     The month, a decimal number from 1 to 12.
                    // 7-0:      The day, a decimal number from 1 to 31.

                    DWORD dwMonth, dwDay, dwYear;
                    dwYear  = (d3d8Id.WHQLLevel >> 16);
                    dwMonth = (d3d8Id.WHQLLevel >>  8) & 0x000F;
                    dwDay   = (d3d8Id.WHQLLevel >>  0) & 0x000F;

                    wsprintf( pDisplayInfo->m_szDX8DriverSignDate, 
                              TEXT("%d/%d/%d"), dwMonth, dwDay, dwYear );
                }
            }
        }

        return S_OK;
    }

    // Hmm.  This shouldn't happen since we should have found a match...        
    return E_FAIL;
}


/****************************************************************************
 *
 *  IsMatchWithDisplayDevice
 *
 ****************************************************************************/
BOOL IsMatchWithDisplayDevice( DisplayInfo* pDisplayInfo, HMONITOR hMonitor, 
                               BOOL bCanRenderWindow )
{
    // If the HMONITORs and the bCanRenderWindow match, then its good
    if( pDisplayInfo->m_hMonitor == hMonitor && 
        pDisplayInfo->m_bCanRenderWindow == bCanRenderWindow )
        return TRUE;
    else
        return FALSE;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\directx\dxcrt\i386\ulldiv.asm ===
title   ulldiv - unsigned long divide routine
;***
;ulldiv.asm - unsigned long divide routine
;
;       Copyright (c) 1985-1994, Microsoft Corporation. All rights reserved.
;
;Purpose:
;       defines the unsigned long divide routine
;           __aulldiv
;
;*******************************************************************************


.xlist
include cruntime.inc
include mm.inc
.list

;***
;ulldiv - unsigned long divide
;
;Purpose:
;       Does a unsigned long divide of the arguments.  Arguments are
;       not changed.
;
;Entry:
;       Arguments are passed on the stack:
;               1st pushed: divisor (QWORD)
;               2nd pushed: dividend (QWORD)
;
;Exit:
;       EDX:EAX contains the quotient (dividend/divisor)
;       NOTE: this routine removes the parameters from the stack.
;
;Uses:
;       ECX
;
;Exceptions:
;
;*******************************************************************************

        CODESEG

_aulldiv        PROC NEAR

        push    ebx
        push    esi

; Set up the local stack and save the index registers.  When this is done
; the stack frame will look as follows (assuming that the expression a/b will
; generate a call to uldiv(a, b)):
;
;               -----------------
;               |               |
;               |---------------|
;               |               |
;               |--divisor (b)--|
;               |               |
;               |---------------|
;               |               |
;               |--dividend (a)-|
;               |               |
;               |---------------|
;               | return addr** |
;               |---------------|
;               |      EBX      |
;               |---------------|
;       ESP---->|      ESI      |
;               -----------------
;

DVND    equ     [esp + 12]      ; stack address of dividend (a)
DVSR    equ     [esp + 20]      ; stack address of divisor (b)

;
; Now do the divide.  First look to see if the divisor is less than 4194304K.
; If so, then we can use a simple algorithm with word divides, otherwise
; things get a little more complex.
;

        mov     eax,HIWORD(DVSR) ; check to see if divisor < 4194304K
        or      eax,eax
        jnz     short L1        ; nope, gotta do this the hard way
        mov     ecx,LOWORD(DVSR) ; load divisor
        mov     eax,HIWORD(DVND) ; load high word of dividend
        xor     edx,edx
        div     ecx             ; get high order bits of quotient
        mov     ebx,eax         ; save high bits of quotient
        mov     eax,LOWORD(DVND) ; edx:eax <- remainder:lo word of dividend
        div     ecx             ; get low order bits of quotient
        mov     edx,ebx         ; edx:eax <- quotient hi:quotient lo
        jmp     short L2        ; restore stack and return

;
; Here we do it the hard way.  Remember, eax contains DVSRHI
;

L1:
        mov     ecx,eax         ; ecx:ebx <- divisor
        mov     ebx,LOWORD(DVSR)
        mov     edx,HIWORD(DVND) ; edx:eax <- dividend
        mov     eax,LOWORD(DVND)
L3:
        shr     ecx,1           ; shift divisor right one bit; hi bit <- 0
        rcr     ebx,1
        shr     edx,1           ; shift dividend right one bit; hi bit <- 0
        rcr     eax,1
        or      ecx,ecx
        jnz     short L3        ; loop until divisor < 4194304K
        div     ebx             ; now divide, ignore remainder
        mov     esi,eax         ; save quotient

;
; We may be off by one, so to check, we will multiply the quotient
; by the divisor and check the result against the orignal dividend
; Note that we must also check for overflow, which can occur if the
; dividend is close to 2**64 and the quotient is off by 1.
;

        mul     dword ptr HIWORD(DVSR) ; QUOT * HIWORD(DVSR)
        mov     ecx,eax
        mov     eax,LOWORD(DVSR)
        mul     esi             ; QUOT * LOWORD(DVSR)
        add     edx,ecx         ; EDX:EAX = QUOT * DVSR
        jc      short L4        ; carry means Quotient is off by 1

;
; do long compare here between original dividend and the result of the
; multiply in edx:eax.  If original is larger or equal, we are ok, otherwise
; subtract one (1) from the quotient.
;

        cmp     edx,HIWORD(DVND) ; compare hi words of result and original
        ja      short L4        ; if result > original, do subtract
        jb      short L5        ; if result < original, we are ok
        cmp     eax,LOWORD(DVND) ; hi words are equal, compare lo words
        jbe     short L5        ; if less or equal we are ok, else subtract
L4:
        dec     esi             ; subtract 1 from quotient
L5:
        xor     edx,edx         ; edx:eax <- quotient
        mov     eax,esi

;
; Just the cleanup left to do.  edx:eax contains the quotient.
; Restore the saved registers and return.
;

L2:

        pop     esi
        pop     ebx

        ret     16

_aulldiv        ENDP

        end
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\directx\dxdiag\dsprv.h ===
/*==========================================================================;
 *
 *  Copyright (C) 1995-1998 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       dsprv.h
 *  Content:    DirectSound include file
 *@@BEGIN_MSINTERNAL
 *  History:
 *   Date       By      Reason
 *   ====       ==      ======
 *  8/19/98     dereks  Created.
 *@@END_MSINTERNAL
 *
 **************************************************************************/

#ifndef __DSPRV_INCLUDED__
#define __DSPRV_INCLUDED__

#ifndef __DSOUND_INCLUDED__
#error dsound.h not included
#endif // __DSOUND_INCLUDED__

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

// DirectSound Private Component GUID {11AB3EC0-25EC-11d1-A4D8-00C04FC28ACA}
DEFINE_GUID(CLSID_DirectSoundPrivate, 0x11ab3ec0, 0x25ec, 0x11d1, 0xa4, 0xd8, 0x0, 0xc0, 0x4f, 0xc2, 0x8a, 0xca);

// 
// DirectSound Mixer Properties {84624F80-25EC-11d1-A4D8-00C04FC28ACA}
// 

DEFINE_GUID(DSPROPSETID_DirectSoundMixer, 0x84624f80, 0x25ec, 0x11d1, 0xa4, 0xd8, 0x0, 0xc0, 0x4f, 0xc2, 0x8a, 0xca);

typedef enum 
{
    DSPROPERTY_DIRECTSOUNDMIXER_SRCQUALITY,
    DSPROPERTY_DIRECTSOUNDMIXER_ACCELERATION,
} DSPROPERTY_DIRECTSOUNDMIXER;

typedef enum
{
    DIRECTSOUNDMIXER_SRCQUALITY_WORST,
    DIRECTSOUNDMIXER_SRCQUALITY_PC,
    DIRECTSOUNDMIXER_SRCQUALITY_BASIC,
    DIRECTSOUNDMIXER_SRCQUALITY_ADVANCED,
} DIRECTSOUNDMIXER_SRCQUALITY;

#define DIRECTSOUNDMIXER_SRCQUALITY_DEFAULT DIRECTSOUNDMIXER_SRCQUALITY_PC

typedef struct _DSPROPERTY_DIRECTSOUNDMIXER_SRCQUALITY_DATA
{
    GUID                        DeviceId;   // DirectSound device id
    DIRECTSOUNDMIXER_SRCQUALITY Quality;    // SRC quality
} DSPROPERTY_DIRECTSOUNDMIXER_SRCQUALITY_DATA, *PDSPROPERTY_DIRECTSOUNDMIXER_SRCQUALITY_DATA;

#define DIRECTSOUNDMIXER_ACCELERATIONF_NORING0MIX   0x00000001
#define DIRECTSOUNDMIXER_ACCELERATIONF_NOHWBUFFERS  0x00000002
#define DIRECTSOUNDMIXER_ACCELERATIONF_NOHW3D       0x00000004
#define DIRECTSOUNDMIXER_ACCELERATIONF_NOHWPROPSETS 0x00000008
                                                        
#define DIRECTSOUNDMIXER_ACCELERATIONF_FULL         0x00000000
#define DIRECTSOUNDMIXER_ACCELERATIONF_STANDARD     0x00000008
#define DIRECTSOUNDMIXER_ACCELERATIONF_NONE         0x0000000F

#define DIRECTSOUNDMIXER_ACCELERATIONF_DEFAULT      DIRECTSOUNDMIXER_ACCELERATIONF_STANDARD

typedef struct _DSPROPERTY_DIRECTSOUNDMIXER_ACCELERATION_DATA
{
    GUID    DeviceId;   // DirectSound device id
    ULONG   Flags;      // Acceleration flags
} DSPROPERTY_DIRECTSOUNDMIXER_ACCELERATION_DATA, *PDSPROPERTY_DIRECTSOUNDMIXER_ACCELERATION_DATA;

// 
// DirectSound Device Properties {84624F82-25EC-11d1-A4D8-00C04FC28ACA}
// 

DEFINE_GUID(DSPROPSETID_DirectSoundDevice, 0x84624f82, 0x25ec, 0x11d1, 0xa4, 0xd8, 0x0, 0xc0, 0x4f, 0xc2, 0x8a, 0xca);

typedef enum
{
    DSPROPERTY_DIRECTSOUNDDEVICE_PRESENCE,
    DSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_A,
    DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_1,
    DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_1,
    DSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_W,
    DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_A,
    DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_W,
    DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_A,
    DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_W,
} DSPROPERTY_DIRECTSOUNDDEVICE;

#if DIRECTSOUND_VERSION >= 0x0700
#ifdef UNICODE
#define DSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING DSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_W
#define DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_W
#define DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_W
#else // UNICODE
#define DSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING DSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_A
#define DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_A
#define DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_A
#endif // UNICODE
#else // DIRECTSOUND_VERSION >= 0x0700
#define DSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING DSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_A
#define DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_1
#define DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_1
#endif // DIRECTSOUND_VERSION >= 0x0700

typedef enum
{
    DIRECTSOUNDDEVICE_TYPE_EMULATED,
    DIRECTSOUNDDEVICE_TYPE_VXD,
    DIRECTSOUNDDEVICE_TYPE_WDM
} DIRECTSOUNDDEVICE_TYPE;

typedef enum
{
    DIRECTSOUNDDEVICE_DATAFLOW_RENDER,
    DIRECTSOUNDDEVICE_DATAFLOW_CAPTURE
} DIRECTSOUNDDEVICE_DATAFLOW;

typedef struct _DSPROPERTY_DIRECTSOUNDDEVICE_PRESENCE_DATA
{
    GUID    DeviceId;   // DirectSound device id
    BOOL    Present;    // Presence switch
} DSPROPERTY_DIRECTSOUNDDEVICE_PRESENCE_DATA, *PDSPROPERTY_DIRECTSOUNDDEVICE_PRESENCE_DATA;

typedef struct _DSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_A_DATA
{
    LPSTR                       DeviceName; // waveIn/waveOut device name
    DIRECTSOUNDDEVICE_DATAFLOW  DataFlow;   // Data flow (i.e. waveIn or waveOut)
    GUID                        DeviceId;   // DirectSound device id
} DSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_A_DATA, *PDSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_A_DATA;

typedef struct _DSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_W_DATA
{
    LPWSTR                      DeviceName; // waveIn/waveOut device name
    DIRECTSOUNDDEVICE_DATAFLOW  DataFlow;   // Data flow (i.e. waveIn or waveOut)
    GUID                        DeviceId;   // DirectSound device id
} DSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_W_DATA, *PDSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_W_DATA;

#ifdef UNICODE
#define DSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_DATA DSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_W_DATA
#define PDSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_DATA PDSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_W_DATA
#else // UNICODE
#define DSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_DATA DSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_A_DATA
#define PDSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_DATA PDSPROPERTY_DIRECTSOUNDDEVICE_WAVEDEVICEMAPPING_A_DATA
#endif // UNICODE

typedef struct _DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_1_DATA
{
    GUID                        DeviceId;               // DirectSound device id
    CHAR                        DescriptionA[0x100];    // Device description (ANSI)
    WCHAR                       DescriptionW[0x100];    // Device description (Unicode)
    CHAR                        ModuleA[MAX_PATH];      // Device driver module (ANSI)
    WCHAR                       ModuleW[MAX_PATH];      // Device driver module (Unicode)
    DIRECTSOUNDDEVICE_TYPE      Type;                   // Device type
    DIRECTSOUNDDEVICE_DATAFLOW  DataFlow;               // Device dataflow
    ULONG                       WaveDeviceId;           // Wave device id
    ULONG                       Devnode;                // Devnode (or DevInst)
} DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_1_DATA, *PDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_1_DATA;

typedef struct _DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_A_DATA
{
    DIRECTSOUNDDEVICE_TYPE      Type;           // Device type
    DIRECTSOUNDDEVICE_DATAFLOW  DataFlow;       // Device dataflow
    GUID                        DeviceId;       // DirectSound device id
    LPSTR                       Description;    // Device description
    LPSTR                       Module;         // Device driver module
    LPSTR                       Interface;      // Device interface
    ULONG                       WaveDeviceId;   // Wave device id
} DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_A_DATA, *PDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_A_DATA;

typedef struct _DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_W_DATA
{
    DIRECTSOUNDDEVICE_TYPE      Type;           // Device type
    DIRECTSOUNDDEVICE_DATAFLOW  DataFlow;       // Device dataflow
    GUID                        DeviceId;       // DirectSound device id
    LPWSTR                      Description;    // Device description
    LPWSTR                      Module;         // Device driver module
    LPWSTR                      Interface;      // Device interface
    ULONG                       WaveDeviceId;   // Wave device id
} DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_W_DATA, *PDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_W_DATA;

#if DIRECTSOUND_VERSION >= 0x0700
#ifdef UNICODE
#define DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_DATA DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_W_DATA
#define PDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_DATA PDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_W_DATA
#else // UNICODE
#define DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_DATA DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_A_DATA
#define PDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_DATA PDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_A_DATA
#endif // UNICODE
#else // DIRECTSOUND_VERSION >= 0x0700
#define DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_DATA DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_1_DATA
#define PDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_DATA PDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_1_DATA
#endif // DIRECTSOUND_VERSION >= 0x0700

typedef BOOL (CALLBACK *LPFNDIRECTSOUNDDEVICEENUMERATECALLBACK1)(PDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_1_DATA, LPVOID);
typedef BOOL (CALLBACK *LPFNDIRECTSOUNDDEVICEENUMERATECALLBACKA)(PDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_A_DATA, LPVOID);
typedef BOOL (CALLBACK *LPFNDIRECTSOUNDDEVICEENUMERATECALLBACKW)(PDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_W_DATA, LPVOID);

#if DIRECTSOUND_VERSION >= 0x0700
#ifdef UNICODE
#define LPFNDIRECTSOUNDDEVICEENUMERATECALLBACK LPFNDIRECTSOUNDDEVICEENUMERATECALLBACKW
#else // UNICODE
#define LPFNDIRECTSOUNDDEVICEENUMERATECALLBACK LPFNDIRECTSOUNDDEVICEENUMERATECALLBACKA
#endif // UNICODE
#else // DIRECTSOUND_VERSION >= 0x0700
#define LPFNDIRECTSOUNDDEVICEENUMERATECALLBACK LPFNDIRECTSOUNDDEVICEENUMERATECALLBACK1
#endif // DIRECTSOUND_VERSION >= 0x0700

typedef struct _DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_1_DATA
{
    LPFNDIRECTSOUNDDEVICEENUMERATECALLBACK1 Callback;   // Callback function pointer
    LPVOID                                  Context;    // Callback function context argument
} DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_1_DATA, *PDSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_1_DATA;

typedef struct _DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_A_DATA
{
    LPFNDIRECTSOUNDDEVICEENUMERATECALLBACKA Callback;   // Callback function pointer
    LPVOID                                  Context;    // Callback function context argument
} DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_A_DATA, *PDSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_A_DATA;

typedef struct _DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_W_DATA
{
    LPFNDIRECTSOUNDDEVICEENUMERATECALLBACKW Callback;   // Callback function pointer
    LPVOID                                  Context;    // Callback function context argument
} DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_W_DATA, *PDSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_W_DATA;

#if DIRECTSOUND_VERSION >= 0x0700
#ifdef UNICODE
#define DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_DATA DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_W_DATA
#define PDSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_DATA PDSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_W_DATA
#else // UNICODE
#define DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_DATA DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_A_DATA
#define PDSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_DATA PDSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_A_DATA
#endif // UNICODE
#else // DIRECTSOUND_VERSION >= 0x0700
#define DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_DATA DSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_1_DATA
#define PDSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_DATA PDSPROPERTY_DIRECTSOUNDDEVICE_ENUMERATE_1_DATA
#endif // DIRECTSOUND_VERSION >= 0x0700

// 
// Basic DirectSound Acceleration Properties {1AEAA606-35F0-11D1-B161-00C04FC28ACA}
// 

DEFINE_GUID(DSPROPSETID_DirectSoundBasicAcceleration, 0x1aeaa606, 0x35f0, 0x11d1, 0xb1, 0x61, 0x0, 0xc0, 0x4f, 0xc2, 0x8a, 0xca);

typedef enum
{
    DSPROPERTY_DIRECTSOUNDBASICACCELERATION_ACCELERATION,
} DSPROPERTY_DIRECTSOUNDBASICACCELERATION;

typedef enum
{
    DIRECTSOUNDBASICACCELERATION_NONE,
    DIRECTSOUNDBASICACCELERATION_SAFE,
    DIRECTSOUNDBASICACCELERATION_STANDARD,
    DIRECTSOUNDBASICACCELERATION_FULL,
} DIRECTSOUNDBASICACCELERATION_LEVEL;

#define DIRECTSOUNDBASICACCELERATION_DEFAULT    DIRECTSOUNDBASICACCELERATION_FULL

typedef struct _DSPROPERTY_DIRECTSOUNDBASICACCELERATION_ACCELERATION_DATA
{
    GUID                                DeviceId;   // DirectSound device id
    DIRECTSOUNDBASICACCELERATION_LEVEL  Level;      // Basic acceleration level
} DSPROPERTY_DIRECTSOUNDBASICACCELERATION_ACCELERATION_DATA, *PDSPROPERTY_DIRECTSOUNDBASICACCELERATION_ACCELERATION_DATA;

// 
// DirectSound Debug Properties {F2957840-260C-11d1-A4D8-00C04FC28ACA}
// 

DEFINE_GUID(DSPROPSETID_DirectSoundDebug, 0xf2957840, 0x260c, 0x11d1, 0xa4, 0xd8, 0x0, 0xc0, 0x4f, 0xc2, 0x8a, 0xca);

typedef enum
{
    DSPROPERTY_DIRECTSOUNDDEBUG_DPFINFO_A,
    DSPROPERTY_DIRECTSOUNDDEBUG_DPFINFO_W,
} DSPROPERTY_DIRECTSOUNDDEBUG;

#ifdef UNICODE
#define DSPROPERTY_DIRECTSOUNDDEBUG_DPFINFO DSPROPERTY_DIRECTSOUNDDEBUG_DPFINFO_W
#else // UNICODE
#define DSPROPERTY_DIRECTSOUNDDEBUG_DPFINFO DSPROPERTY_DIRECTSOUNDDEBUG_DPFINFO_A
#endif // UNICODE

#define DIRECTSOUNDDEBUG_DPFINFOF_PRINTFUNCTIONNAME     0x00000001
#define DIRECTSOUNDDEBUG_DPFINFOF_PRINTPROCESSTHREADID  0x00000002
#define DIRECTSOUNDDEBUG_DPFINFOF_PRINTFILELINE         0x00000004

#define DIRECTSOUNDDEBUG_DPFINFOF_DEFAULT               DIRECTSOUNDDEBUG_DPFINFOF_PRINTFUNCTIONNAME

typedef struct _DSPROPERTY_DIRECTSOUNDDEBUG_DPFINFO_A_DATA
{
    ULONG   Flags;              // DPF flags
    ULONG   DpfLevel;           // DPF level
    ULONG   BreakLevel;         // Break level
    CHAR    LogFile[MAX_PATH];  // Log file
} DSPROPERTY_DIRECTSOUNDDEBUG_DPFINFO_A_DATA, *PDSPROPERTY_DIRECTSOUNDDEBUG_DPFINFO_A_DATA;

typedef struct _DSPROPERTY_DIRECTSOUNDDEBUG_DPFINFO_W_DATA
{
    ULONG   Flags;              // DPF flags
    ULONG   DpfLevel;           // DPF level
    ULONG   BreakLevel;         // Break level
    WCHAR   LogFile[MAX_PATH];  // Log file
} DSPROPERTY_DIRECTSOUNDDEBUG_DPFINFO_W_DATA, *PDSPROPERTY_DIRECTSOUNDDEBUG_DPFINFO_W_DATA;

#ifdef UNICODE
#define DSPROPERTY_DIRECTSOUNDDEBUG_DPFINFO_DATA DSPROPERTY_DIRECTSOUNDDEBUG_DPFINFO_W_DATA
#define PDSPROPERTY_DIRECTSOUNDDEBUG_DPFINFO_DATA PDSPROPERTY_DIRECTSOUNDDEBUG_DPFINFO_W_DATA
#else // UNICODE
#define DSPROPERTY_DIRECTSOUNDDEBUG_DPFINFO_DATA DSPROPERTY_DIRECTSOUNDDEBUG_DPFINFO_A_DATA
#define PDSPROPERTY_DIRECTSOUNDDEBUG_DPFINFO_DATA PDSPROPERTY_DIRECTSOUNDDEBUG_DPFINFO_A_DATA
#endif // UNICODE

#define DIRECTSOUNDDEBUG_DPFLEVEL_DEFAULT   2
#define DIRECTSOUNDDEBUG_BREAKLEVEL_DEFAULT 0

// 
// DirectSound Persistent Data {1BE55C3E-36AB-11d1-B162-00C04FC28ACA}
// 

DEFINE_GUID(DSPROPSETID_DirectSoundPersistentData, 0x1be55c3e, 0x36ab, 0x11d1, 0xb1, 0x62, 0x0, 0xc0, 0x4f, 0xc2, 0x8a, 0xca);

typedef enum
{
    DSPROPERTY_DIRECTSOUNDPERSISTENTDATA_PERSISTDATA_A,
    DSPROPERTY_DIRECTSOUNDPERSISTENTDATA_PERSISTDATA_W,
} DSPROPERTY_DIRECTSOUNDPERSISTENTDATA;

#ifdef UNICODE
#define DSPROPERTY_DIRECTSOUNDPERSISTENTDATA_PERSISTDATA DSPROPERTY_DIRECTSOUNDPERSISTENTDATA_PERSISTDATA_W
#else // UNICODE
#define DSPROPERTY_DIRECTSOUNDPERSISTENTDATA_PERSISTDATA DSPROPERTY_DIRECTSOUNDPERSISTENTDATA_PERSISTDATA_A
#endif // UNICODE

typedef struct _DSPROPERTY_DIRECTSOUNDPERSISTENTDATA_PERSISTDATA_A_DATA
{
    GUID    DeviceId;           // DirectSound device id
    LPSTR   SubKeyName;         // Optional subkey name
    LPSTR   ValueName;          // Value name
    ULONG   RegistryDataType;   // Data type
    LPVOID  Data;               // Data pointer
    ULONG   DataSize;           // Size of data buffer, in bytes
} DSPROPERTY_DIRECTSOUNDPERSISTENTDATA_PERSISTDATA_A_DATA, *PDSPROPERTY_DIRECTSOUNDPERSISTENTDATA_PERSISTDATA_A_DATA;

typedef struct _DSPROPERTY_DIRECTSOUNDPERSISTENTDATA_PERSISTDATA_W_DATA
{
    GUID    DeviceId;           // DirectSound device id
    LPWSTR  SubKeyName;         // Optional subkey name
    LPWSTR  ValueName;          // Value name
    ULONG   RegistryDataType;   // Data type
    LPVOID  Data;               // Data pointer
    ULONG   DataSize;           // Size of data buffer, in bytes
} DSPROPERTY_DIRECTSOUNDPERSISTENTDATA_PERSISTDATA_W_DATA, *PDSPROPERTY_DIRECTSOUNDPERSISTENTDATA_PERSISTDATA_W_DATA;

#ifdef UNICODE
#define DSPROPERTY_DIRECTSOUNDPERSISTENTDATA_PERSISTDATA_DATA DSPROPERTY_DIRECTSOUNDPERSISTENTDATA_PERSISTDATA_W_DATA
#define PDSPROPERTY_DIRECTSOUNDPERSISTENTDATA_PERSISTDATA_DATA PDSPROPERTY_DIRECTSOUNDPERSISTENTDATA_PERSISTDATA_W_DATA
#else // UNICODE
#define DSPROPERTY_DIRECTSOUNDPERSISTENTDATA_PERSISTDATA_DATA DSPROPERTY_DIRECTSOUNDPERSISTENTDATA_PERSISTDATA_A_DATA
#define PDSPROPERTY_DIRECTSOUNDPERSISTENTDATA_PERSISTDATA_DATA PDSPROPERTY_DIRECTSOUNDPERSISTENTDATA_PERSISTDATA_A_DATA
#endif // UNICODE

// 
// DirectSound Buffer Properties {50393DEA-51AD-11d2-91B2-00C04FC28ACA}
// 

DEFINE_GUID(DSPROPSETID_DirectSoundBuffer, 0x50393dea, 0x51ad, 0x11d2, 0x91, 0xb2, 0x0, 0xc0, 0x4f, 0xc2, 0x8a, 0xca);

typedef enum 
{
    DSPROPERTY_DIRECTSOUNDBUFFER_DEVICEID,
} DSPROPERTY_DIRECTSOUNDBUFFER;

typedef struct _DSPROPERTY_DIRECTSOUNDBUFFER_DEVICEID_DATA
{
    LPDIRECTSOUNDBUFFER Buffer;     // Buffer object pointer
    GUID                DeviceId;   // DirectSound device ID
} DSPROPERTY_DIRECTSOUNDBUFFER_DEVICEID_DATA, *PDSPROPERTY_DIRECTSOUNDBUFFER_DEVICEID_DATA;

#ifdef __cplusplus
}
#endif // __cplusplus

#endif  // __DSPRV_INCLUDED__
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\directx\dxdiag\dsprvobj.cpp ===
/***************************************************************************
 *
 *  Copyright (C) 1995,1996 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       dsprvobj.c
 *  Content:    DirectSound Private Object wrapper functions.
 *  History:
 *   Date       By      Reason
 *   ====       ==      ======
 *  02/12/98    dereks  Created.
 *
 ***************************************************************************/

#define DIRECTSOUND_VERSION  0x0600

// We'll ask for what we need, thank you.
#ifndef WIN32_LEAN_AND_MEAN
#define WIN32_LEAN_AND_MEAN
#endif // WIN32_LEAN_AND_MEAN

// Public includes
#include <windows.h>
#include <mmsystem.h>
#include <dsound.h>
#include "dsprv.h"

// Private includes
#include "dsprvobj.h"


/***************************************************************************
 *
 *  DirectSoundPrivateCreate
 *
 *  Description:
 *      Creates and initializes a DirectSoundPrivate object.
 *
 *  Arguments:
 *      LPKSPROPERTYSET * [out]: receives IKsPropertySet interface to the
 *                               object.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

HRESULT DirectSoundPrivateCreate
(
    LPKSPROPERTYSET *       ppKsPropertySet
)
{
    typedef HRESULT (STDAPICALLTYPE *LPFNDLLGETCLASSOBJECT)(REFCLSID, REFIID, LPVOID *);

    HINSTANCE               hLibDsound              = NULL;
    LPFNGETCLASSOBJECT      pfnDllGetClassObject    = NULL;
    LPCLASSFACTORY          pClassFactory           = NULL;
    LPKSPROPERTYSET         pKsPropertySet          = NULL;
    HRESULT                 hr                      = DS_OK;

    // Get dsound.dll's instance handle.  The dll must already be loaded at this
    // point.
    hLibDsound = 
        GetModuleHandle
        (
            TEXT("dsound.dll")
        );

    if(!hLibDsound)
    {
        hr = DSERR_GENERIC;
    }

    // Find DllGetClassObject
    if(SUCCEEDED(hr))
    {
        pfnDllGetClassObject = (LPFNDLLGETCLASSOBJECT)
            GetProcAddress
            (
                hLibDsound, 
                "DllGetClassObject"
            );

        if(!pfnDllGetClassObject)
        {
            hr = DSERR_GENERIC;
        }
    }

    // Create a class factory object    
    if(SUCCEEDED(hr))
    {
        hr = 
            pfnDllGetClassObject
            (
                CLSID_DirectSoundPrivate, 
                IID_IClassFactory, 
                (LPVOID *)&pClassFactory
            );
    }

    // Create the DirectSoundPrivate object and query for an IKsPropertySet
    // interface
    if(SUCCEEDED(hr))
    {
        hr = 
            pClassFactory->CreateInstance
            (
                NULL, 
                IID_IKsPropertySet, 
                (LPVOID *)&pKsPropertySet
            );
    }

    // Release the class factory
    if(pClassFactory)
    {
        pClassFactory->Release();
    }

    // Success
    if(SUCCEEDED(hr))
    {
        *ppKsPropertySet = pKsPropertySet;
    }

    return hr;
}




/***************************************************************************
 *
 *  PrvGetDeviceDescription
 *
 *  Description:
 *      Gets the extended description for a given DirectSound device.
 *
 *  Arguments:
 *      LPKSPROPERTYSET [in]: IKsPropertySet interface to the
 *                            DirectSoundPrivate object.
 *      REFGUID [in]: DirectSound device id.
 *      PDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_DATA [out]: receives
 *                                                            description.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/
HRESULT PrvGetDeviceDescription
(
    LPKSPROPERTYSET                                 pKsPropertySet,
    REFGUID                                         guidDeviceId,
    PDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_DATA *ppData
)
{
    PDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_DATA  pData = NULL;
    ULONG                                           cbData;
    DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_DATA   Basic;
    HRESULT                                         hr;

    Basic.DeviceId = guidDeviceId;

    hr =
        pKsPropertySet->Get
        (
            DSPROPSETID_DirectSoundDevice,
            DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION,
            NULL,
            0,
            &Basic,
            sizeof(Basic),
            &cbData
        );

    if(SUCCEEDED(hr))
    {
        pData = (PDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_DATA)new BYTE [cbData];

        if(!pData)
        {
            hr = DSERR_OUTOFMEMORY;
        }
    }

    if(SUCCEEDED(hr))
    {
        ZeroMemory(pData, cbData);

        pData->DeviceId = guidDeviceId;
        
        hr =
            pKsPropertySet->Get
            (
                DSPROPSETID_DirectSoundDevice,
                DSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION,
                NULL,
                0,
                pData,
                cbData,
                NULL
            );
    }

    if(SUCCEEDED(hr))
    {
        *ppData = pData;
    }
    else if(pData)
    {
        delete[] pData;
    }

    return hr;
}


/***************************************************************************
 *
 *  PrvReleaseDeviceDescription
 *
 ***************************************************************************/
HRESULT PrvReleaseDeviceDescription( PDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_DATA pData )
{
    delete[] pData;
    return S_OK;
}


/***************************************************************************
 *
 *  PrvGetBasicAcceleration
 *
 *  Description:
 *      Gets basic acceleration flags for a given DirectSound device.  This
 *      is the accleration level that the multimedia control panel uses.
 *
 *  Arguments:
 *      LPKSPROPERTYSET [in]: IKsPropertySet interface to the
 *                            DirectSoundPrivate object.
 *      REFGUID [in]: DirectSound device GUID.
 *      DIRECTSOUNDBASICACCELERATION_LEVEL * [out]: receives basic 
 *                                                  acceleration level.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

HRESULT PrvGetBasicAcceleration
(
    LPKSPROPERTYSET                                             pKsPropertySet,
    REFGUID                                                     guidDeviceId,
    DIRECTSOUNDBASICACCELERATION_LEVEL *                        pLevel
)
{
    DSPROPERTY_DIRECTSOUNDBASICACCELERATION_ACCELERATION_DATA   Data;
    HRESULT                                                     hr;

    Data.DeviceId = guidDeviceId;

    hr =
        pKsPropertySet->Get
        (
            DSPROPSETID_DirectSoundBasicAcceleration,
            DSPROPERTY_DIRECTSOUNDBASICACCELERATION_ACCELERATION,
            NULL,
            0,
            &Data,
            sizeof(Data),
            NULL
        );

    if(SUCCEEDED(hr))
    {
        *pLevel = Data.Level;
    }

    return hr;
}


/***************************************************************************
 *
 *  PrvSetBasicAcceleration
 *
 *  Description:
 *      Sets basic acceleration flags for a given DirectSound device.  This
 *      is the accleration level that the multimedia control panel uses.
 *
 *  Arguments:
 *      LPKSPROPERTYSET [in]: IKsPropertySet interface to the
 *                            DirectSoundPrivate object.
 *      REFGUID [in]: DirectSound device GUID.
 *      DIRECTSOUNDBASICACCELERATION_LEVEL [in]: basic acceleration level.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

HRESULT PrvSetBasicAcceleration
(
    LPKSPROPERTYSET                                             pKsPropertySet,
    REFGUID                                                     guidDeviceId,
    DIRECTSOUNDBASICACCELERATION_LEVEL                          Level
)
{
    DSPROPERTY_DIRECTSOUNDBASICACCELERATION_ACCELERATION_DATA   Data;
    HRESULT                                                     hr;

    Data.DeviceId = guidDeviceId;
    Data.Level = Level;

    hr =
        pKsPropertySet->Set
        (
            DSPROPSETID_DirectSoundBasicAcceleration,
            DSPROPERTY_DIRECTSOUNDBASICACCELERATION_ACCELERATION,
            NULL,
            0,
            &Data,
            sizeof(Data)
        );

    return hr;
}


/***************************************************************************
 *
 *  PrvGetDebugInformation
 *
 *  Description:
 *      Gets the current DirectSound debug settings.
 *
 *  Arguments:
 *      LPKSPROPERTYSET [in]: IKsPropertySet interface to the
 *                            DirectSoundPrivate object.
 *      LPDWORD [in]: receives DPF flags.
 *      PULONG [out]: receives DPF level.
 *      PULONG [out]: receives break level.
 *      LPSTR [out]: receives log file name.
 *
 *  Returns:  
 *      HRESULT: DirectSound/COM result code.
 *
 ***************************************************************************/

HRESULT PrvGetDebugInformation
(
    LPKSPROPERTYSET                             pKsPropertySet,
    LPDWORD                                     pdwFlags,
    PULONG                                      pulDpfLevel,
    PULONG                                      pulBreakLevel,
    LPTSTR                                      pszLogFile
)
{
    DSPROPERTY_DIRECTSOUNDDEBUG_DPFINFO_DATA    Data;
    HRESULT                                     hr;

    hr =
        pKsPropertySet->Get
        (
            DSPROPSETID_DirectSoundDebug,
            DSPROPERTY_DIRECTSOUNDDEBUG_DPFINFO,
            NULL,
            0,
            &Data,
            sizeof(Data),
            NULL
        );

    if(SUCCEEDED(hr) && pdwFlags)
    {
        *pdwFlags = Data.Flags;
    }

    if(SUCCEEDED(hr) && pulDpfLevel)
    {
        *pulDpfLevel = Data.DpfLevel;
    }

    if(SUCCEEDED(hr) && pulBreakLevel)
    {
        *pulBreakLevel = Data.BreakLevel;
    }

    if(SUCCEEDED(hr) && pszLogFile)
    {
        lstrcpy
        (
            pszLogFile,
            Data.LogFile
        );
    }
    
    return hr;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\directx\dxdiag\ghost.h ===
/****************************************************************************
 *
 *    File: ghost.h
 * Project: DxDiag (DirectX Diagnostic Tool)
 *  Author: Mike Anderson (manders@microsoft.com)
 * Purpose: Allow user to remove/restore "ghost" display devices
 *
 * (C) Copyright 1998-1999 Microsoft Corp.  All rights reserved.
 *
 ****************************************************************************/

#ifndef GHOST_H
#define GHOST_H

VOID AdjustGhostDevices(HWND hwndMain, DisplayInfo* pDisplayInfoFirst);

#endif // GHOST_H
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\directx\dxdiag\guids.cpp ===
/****************************************************************************
 *
 *    File: guids.cpp 
 * Project: DxDiag (DirectX Diagnostic Tool)
 *  Author: Mike Anderson (manders@microsoft.com)
 * Purpose: Defines all GUIDs used by DxDiag.  Can't use dxguid.lib because
 *          dsprv.h GUIDs aren't in it.
 *
 * (C) Copyright 1998 Microsoft Corp.  All rights reserved.
 *
 ****************************************************************************/

#define INITGUID
#include <windows.h>
#include <mmsystem.h>
#include <ddraw.h>
#include <d3d.h>
#include <dsound.h>
#include "dsprv.h"
#include <dmusicc.h>
#include <dmusici.h>
#include <dplay.h>
#include <hidclass.h>
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\directx\dxdiag\fileinfo.h ===
/****************************************************************************
 *
 *    File: fileinfo.h
 * Project: DxDiag (DirectX Diagnostic Tool)
 *  Author: Mike Anderson (manders@microsoft.com)
 * Purpose: Gather information about files on this machine
 *
 * (C) Copyright 1998 Microsoft Corp.  All rights reserved.
 *
 ****************************************************************************/

#ifndef FILEINFO_H
#define FILEINFO_H

struct FileInfo
{
    TCHAR m_szName[60];
    TCHAR m_szVersion[50];
    TCHAR m_szLanguage[100];
    TCHAR m_szLanguageLocal[100]; // Localized m_szLanguage
    TCHAR m_szDatestamp[30];
    TCHAR m_szDatestampLocal[30]; // Localized m_szDatestamp
    TCHAR m_szAttributes[50];
    FILETIME m_FileTime;
    LONG m_numBytes;
    BOOL m_bExists;
    BOOL m_bSigned;
    BOOL m_bInUse;
    BOOL m_bBeta;
    BOOL m_bDebug;
    FLOAT m_fStartShipAt;
    FLOAT m_fStopShipAt;
    BOOL m_bOptional;
    BOOL m_bOptionalOnNT;
    BOOL m_bOptionalOnPreDX8;
    BOOL m_bIgnoreVersionInfo;
    BOOL m_bIgnoreDebug;
    BOOL m_bIgnoreBeta;
    BOOL m_bBDA;
    BOOL m_bNotIA64;
    BOOL m_bOptionalOnWOW64;
    BOOL m_bProblem;
    BOOL m_bObsolete; // Note: this is set by DiagnoseDxFiles, not anything in fileinfo
    FileInfo* m_pFileInfoNext;
};


VOID InitFileInfo(VOID);
HRESULT GetComponentFiles(TCHAR* pszFolder, FileInfo** ppFileInfoFirst, 
                          BOOL bSkipMissingFiles, LONG ids);
VOID DestroyFileList(FileInfo* pFileInfoFirst);
VOID ReleaseDigiSignData(VOID);
VOID FileIsSigned(LPTSTR lpszFile, BOOL* pbSigned, BOOL* pbIsValid);
WORD GetLanguageFromFile(const TCHAR* pszFileName, const TCHAR* pszPath);
HRESULT GetFileVersion(TCHAR* pszFile, TCHAR* pszVersion, 
    TCHAR* pszAttributes, TCHAR* pszLanguageLocal, TCHAR* pszLanguage,
    BOOL* pbBeta = NULL, BOOL* pbDebug = NULL);
HRESULT GetRiffFileVersion(TCHAR* pszFile, TCHAR* pszVersion);
BOOL GetFileDateAndSize(TCHAR* pszFile, TCHAR* pszDateLocal, TCHAR* pszDateEnglish, LONG* pnumBytes);

BOOL GetProgramFilesFolder(TCHAR* pszPath);
BOOL GetDxSetupFolder(TCHAR* pszPath);
VOID DiagnoseDxFiles(SysInfo* pSysInfo, FileInfo* pDxComponentsFileInfoFirst, FileInfo* pDxWinComponentsFileInfoFirst );

#endif // FILEINFO_H
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\directx\dxdiag\dsprvobj.h ===
/***************************************************************************
 *
 *  Copyright (C) 1995,1996 Microsoft Corporation.  All Rights Reserved.
 *
 *  File:       dsprvobj.h
 *  Content:    DirectSound Private Object wrapper functions.
 *  History:
 *   Date       By      Reason
 *   ====       ==      ======
 *  02/12/98    dereks  Created.
 *
 ***************************************************************************/

#ifndef __DSPRVOBJ_H__
#define __DSPRVOBJ_H__

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

HRESULT DirectSoundPrivateCreate
(
    LPKSPROPERTYSET *   ppKsPropertySet
);

HRESULT PrvGetMixerSrcQuality
(
    LPKSPROPERTYSET                 pKsPropertySet,
    REFGUID                         guidDeviceId,
    DIRECTSOUNDMIXER_SRCQUALITY *   pSrcQuality
);

HRESULT PrvSetMixerSrcQuality
(
    LPKSPROPERTYSET             pKsPropertySet,
    REFGUID                     guidDeviceId,
    DIRECTSOUNDMIXER_SRCQUALITY SrcQuality
);

HRESULT PrvGetMixerAcceleration
(
    LPKSPROPERTYSET pKsPropertySet,
    REFGUID         guidDeviceId,
    LPDWORD         pdwAcceleration
);

HRESULT PrvSetMixerAcceleration
(
    LPKSPROPERTYSET pKsPropertySet,
    REFGUID         guidDeviceId,
    DWORD           dwAcceleration
);

HRESULT PrvGetDevicePresence
(
    LPKSPROPERTYSET pKsPropertySet,
    REFGUID         guidDeviceId,
    LPBOOL          pfEnabled
);

HRESULT PrvSetDevicePresence
(
    LPKSPROPERTYSET pKsPropertySet,
    REFGUID         guidDeviceId,
    BOOL            fEnabled
);

HRESULT PrvGetWaveDeviceMapping
(
    LPKSPROPERTYSET pKsPropertySet,
    LPCTSTR         pszWaveDevice,
    BOOL            fCapture,
    LPGUID          pguidDeviceId
);

HRESULT PrvGetDeviceDescription
(
    LPKSPROPERTYSET                                 pKsPropertySet,
    REFGUID                                         guidDeviceId,
    PDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_DATA *ppData
);

HRESULT PrvReleaseDeviceDescription
( 
    PDSPROPERTY_DIRECTSOUNDDEVICE_DESCRIPTION_DATA pData 
);

HRESULT PrvEnumerateDevices
(
    LPKSPROPERTYSET                         pKsPropertySet,
    LPFNDIRECTSOUNDDEVICEENUMERATECALLBACK  pfnCallback,
    LPVOID                                  pvContext
);

HRESULT PrvGetBasicAcceleration
(
    LPKSPROPERTYSET                         pKsPropertySet,
    REFGUID                                 guidDeviceId,
    DIRECTSOUNDBASICACCELERATION_LEVEL *    pLevel
);

HRESULT PrvSetBasicAcceleration
(
    LPKSPROPERTYSET                     pKsPropertySet,
    REFGUID                             guidDeviceId,
    DIRECTSOUNDBASICACCELERATION_LEVEL  Level
);

HRESULT PrvGetDebugInformation
(
    LPKSPROPERTYSET pKsPropertySet,
    LPDWORD         pdwFlags,
    PULONG          pulDpfLevel,
    PULONG          pulBreakLevel,
    LPTSTR          pszLogFile
);

HRESULT PrvSetDebugInformation
(
    LPKSPROPERTYSET pKsPropertySet,
    DWORD           dwFlags,
    ULONG           ulDpfLevel,
    ULONG           ulBreakLevel,
    LPCTSTR         pszLogFile
);

HRESULT PrvGetPersistentData
(
    LPKSPROPERTYSET pKsPropertySet,
    REFGUID         guidDeviceId,
    LPCTSTR         pszSubkey,
    LPCTSTR         pszValue,
    LPDWORD         pdwRegType,
    LPVOID          pvData,
    LPDWORD         pcbData
);

HRESULT PrvSetPersistentData
(
    LPKSPROPERTYSET pKsPropertySet,
    REFGUID         guidDeviceId,
    LPCTSTR         pszSubkey,
    LPCTSTR         pszValue,
    DWORD           dwRegType,
    LPVOID          pvData,
    DWORD           cbData
);

#ifdef __cplusplus
}
#endif // __cplusplus

#endif // __DSPRVOBJ_H__
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\directx\dxdiag\ghost.cpp ===
/****************************************************************************
 *
 *    File: ghost.cpp
 * Project: DxDiag (DirectX Diagnostic Tool)
 *  Author: Mike Anderson (manders@microsoft.com)
 * Purpose: Allow user to remove/restore "ghost" display devices
 *
 * (C) Copyright 1998-1999 Microsoft Corp.  All rights reserved.
 *
 ****************************************************************************/

#include <tchar.h>
#include <Windows.h>
#include <multimon.h>
#include "reginfo.h"
#include "sysinfo.h"
#include "dispinfo.h"
#include "resource.h"

// Structure for ghost display devices
struct Ghost
{
    TCHAR m_szKey[100];
    TCHAR m_szDesc[100];
    Ghost* m_pGhostPrev;
    Ghost* m_pGhostNext;
};

static VOID BuildGhostList(BOOL bBackedUp, DisplayInfo* pDisplayInfoFirst, Ghost** ppGhostFirst);
static INT_PTR CALLBACK GhostDialogProc(HWND hwndDlg, UINT uMsg, WPARAM wParam, LPARAM lParam);
static VOID UpdateStuff(HWND hwnd);
static VOID MoveSelectedItems(HWND hwnd, BOOL bBackup);
static BOOL MoveGhost(HWND hwnd, Ghost* pGhost, BOOL bBackup);
static DWORD RegCreateTree(HKEY hTree, HKEY hReplacement);
static DWORD RegCreateValues(HKEY hReplacement, LPCTSTR lpSubKey, HKEY hNewKey);
static VOID RemoveFromListBox(Ghost* pGhost, HWND hwndList);
static VOID FreeGhostList(Ghost** ppGhostFirst);

static Ghost* s_pGhostBackedUpFirst = NULL;
static Ghost* s_pGhostRestoredFirst = NULL;



/****************************************************************************
 *
 *  AdjustGhostDevices
 *
 ****************************************************************************/
VOID AdjustGhostDevices(HWND hwndMain, DisplayInfo* pDisplayInfoFirst)
{
    HINSTANCE hinst = (HINSTANCE)GetWindowLongPtr(hwndMain, GWLP_HINSTANCE);

    BuildGhostList(TRUE, NULL, &s_pGhostBackedUpFirst);
    BuildGhostList(FALSE, pDisplayInfoFirst, &s_pGhostRestoredFirst);
    DialogBox(hinst, MAKEINTRESOURCE(IDD_GHOST), hwndMain, GhostDialogProc);
    FreeGhostList(&s_pGhostBackedUpFirst);
    FreeGhostList(&s_pGhostRestoredFirst);
}


/****************************************************************************
 *
 *  BuildGhostList
 *
 ****************************************************************************/
VOID BuildGhostList(BOOL bBackedUp, DisplayInfo* pDisplayInfoFirst, Ghost** ppGhostFirst)
{
    HKEY hkey;
    HKEY hkey2;
    DisplayInfo* pDisplayInfo;
    TCHAR* pszCompare;
    TCHAR szName[100];
    LONG iKey;
    Ghost* pGhostNew;
    DWORD cbData = 100;
    DWORD dwType;
    BOOL bActive;

    if (ERROR_SUCCESS != RegOpenKeyEx(HKEY_LOCAL_MACHINE, bBackedUp ? 
        TEXT("System\\CurrentControlSet\\Services\\Class\\DisplayBackup") : 
        TEXT("System\\CurrentControlSet\\Services\\Class\\Display"), KEY_READ, NULL, &hkey))
    {
        return;
    }

    iKey = 0;
    while (ERROR_SUCCESS == RegEnumKey(hkey, iKey, szName, 100))
    {
        bActive = FALSE; // unless found TRUE below
        for (pDisplayInfo = pDisplayInfoFirst; pDisplayInfo != NULL; pDisplayInfo = pDisplayInfo->m_pDisplayInfoNext)
        {
            pszCompare = pDisplayInfo->m_szKeyDeviceKey;
            if (lstrlen(pszCompare) > 4)
            {
                pszCompare += (lstrlen(pszCompare) - 4);
                if (lstrcmp(szName, pszCompare) == 0)
                {
                    bActive = TRUE;
                    break;
                }
            }
        }
        if (!bActive &&
            ERROR_SUCCESS == RegOpenKeyEx(hkey, szName, KEY_READ, NULL, &hkey2))
        {
            pGhostNew = new Ghost;
            if (pGhostNew != NULL)
            {
                ZeroMemory(pGhostNew, sizeof(Ghost));
                cbData = 100;
                RegQueryValueEx(hkey2, TEXT("DriverDesc"), 0, &dwType, (LPBYTE)pGhostNew->m_szDesc, &cbData);
                lstrcpy(pGhostNew->m_szKey, szName);
                pGhostNew->m_pGhostNext = *ppGhostFirst;
                if (pGhostNew->m_pGhostNext != NULL)
                    pGhostNew->m_pGhostNext->m_pGhostPrev = pGhostNew;
                *ppGhostFirst = pGhostNew;
            }
            RegCloseKey(hkey2);
        }
        iKey++;
    }

    RegCloseKey(hkey);
}


/****************************************************************************
 *
 *  GhostDialogProc
 *
 ****************************************************************************/
INT_PTR CALLBACK GhostDialogProc(HWND hwnd, UINT msg, WPARAM wparam, LPARAM lparam)
{
    HWND hwndRList = GetDlgItem(hwnd, IDC_RESTOREDLIST);
    HWND hwndBList = GetDlgItem(hwnd, IDC_BACKEDUPLIST);
    Ghost* pGhost;
    TCHAR sz[300];
    LRESULT iItem;

    switch (msg)
    {
    case WM_INITDIALOG:
        for (pGhost = s_pGhostRestoredFirst; pGhost != NULL; pGhost = pGhost->m_pGhostNext)
        {
            wsprintf(sz, TEXT("%s: %s"), pGhost->m_szKey, pGhost->m_szDesc);
            iItem = SendMessage(hwndRList, LB_ADDSTRING, 0, (LPARAM)sz);
            SendMessage(hwndRList, LB_SETITEMDATA, iItem, (LPARAM)pGhost);
        }

        for (pGhost = s_pGhostBackedUpFirst; pGhost != NULL; pGhost = pGhost->m_pGhostNext)
        {
            wsprintf(sz, TEXT("%s: %s"), pGhost->m_szKey, pGhost->m_szDesc);
            iItem = SendMessage(hwndBList, LB_ADDSTRING, 0, (LPARAM)sz);
            SendMessage(hwndBList, LB_SETITEMDATA, iItem, (LPARAM)pGhost);
        }
        UpdateStuff(hwnd);
        return TRUE;

    case WM_COMMAND:
        {
            WORD wID = LOWORD(wparam);
            switch(wID)
            {
            case IDCANCEL:
                EndDialog(hwnd, IDCANCEL);
                break;
            case IDOK:
                EndDialog(hwnd, IDOK);
                break;
            case IDC_RESTOREDLIST:
                if (HIWORD(wparam) == LBN_SELCHANGE)
                {
                    if (SendMessage(hwndRList, LB_GETSELCOUNT, 0, 0) > 0)
                        EnableWindow(GetDlgItem(hwnd, IDC_BACKUP), TRUE);
                    else
                        EnableWindow(GetDlgItem(hwnd, IDC_BACKUP), FALSE);
                }
                break;
            case IDC_BACKEDUPLIST:
                if (HIWORD(wparam) == LBN_SELCHANGE)
                {
                    if (SendMessage(hwndBList, LB_GETSELCOUNT, 0, 0) > 0)
                        EnableWindow(GetDlgItem(hwnd, IDC_RESTORE), TRUE);
                    else
                        EnableWindow(GetDlgItem(hwnd, IDC_RESTORE), FALSE);
                }
                break;
            case IDC_BACKUP:
                MoveSelectedItems(hwnd, TRUE);
                UpdateStuff(hwnd);
                break;
            case IDC_RESTORE:
                MoveSelectedItems(hwnd, FALSE);
                UpdateStuff(hwnd);
                break;
            }
        }
        return TRUE;
    }
    return FALSE;
}


/****************************************************************************
 *
 *  UpdateStuff - Update some UI details based on lists.
 *
 ****************************************************************************/
VOID UpdateStuff(HWND hwnd)
{
    HWND hwndRList = GetDlgItem(hwnd, IDC_RESTOREDLIST);
    HWND hwndBList = GetDlgItem(hwnd, IDC_BACKEDUPLIST);

    if (SendMessage(hwndRList, LB_GETCOUNT, 0, 0) > 0)
    {
        if (SendMessage(hwndRList, LB_GETSELCOUNT, 0, 0) == 0)
            SendMessage(hwndRList, LB_SETSEL, TRUE, 0); // Select first item
        EnableWindow(GetDlgItem(hwnd, IDC_BACKUP), TRUE);
    }
    else
    {
        EnableWindow(GetDlgItem(hwnd, IDC_BACKUP), FALSE);
    }

    if (SendMessage(hwndBList, LB_GETCOUNT, 0, 0) > 0)
    {
        if (SendMessage(hwndBList, LB_GETSELCOUNT, 0, 0) == 0)
            SendMessage(hwndBList, LB_SETSEL, TRUE, 0); // Select first item
        EnableWindow(GetDlgItem(hwnd, IDC_RESTORE), TRUE);
    }
    else
    {
        EnableWindow(GetDlgItem(hwnd, IDC_RESTORE), FALSE);
    }
}


/****************************************************************************
 *
 *  MoveSelectedItems
 *
 ****************************************************************************/
VOID MoveSelectedItems(HWND hwnd, BOOL bBackup)
{
    HWND hwndFromList;
    HWND hwndToList;
    Ghost** ppGhostFromFirst;
    Ghost** ppGhostToFirst;
    LONG iItemArray[100];
    LONG iItem;
    Ghost* pGhost;
    Ghost* pGhost2;
    TCHAR sz[200];

    if (bBackup)
    {
        hwndFromList = GetDlgItem(hwnd, IDC_RESTOREDLIST);
        hwndToList = GetDlgItem(hwnd, IDC_BACKEDUPLIST);
        ppGhostFromFirst = &s_pGhostRestoredFirst;
        ppGhostToFirst = &s_pGhostBackedUpFirst;
    }
    else
    {
        hwndFromList = GetDlgItem(hwnd, IDC_BACKEDUPLIST);
        hwndToList = GetDlgItem(hwnd, IDC_RESTOREDLIST);
        ppGhostFromFirst = &s_pGhostBackedUpFirst;
        ppGhostToFirst = &s_pGhostRestoredFirst;
    }
    
    SendMessage(hwndFromList, LB_GETSELITEMS, 100, (LPARAM)iItemArray);
    for (iItem = (LONG) SendMessage(hwndFromList, LB_GETSELCOUNT, 0, 0) - 1; iItem >= 0; iItem--)
    {
        pGhost = (Ghost*)SendMessage(hwndFromList, LB_GETITEMDATA, iItemArray[iItem], 0); 
        if (MoveGhost(hwnd, pGhost, bBackup))
        {
            // Remove from old list
            if (pGhost->m_pGhostNext != NULL)
                pGhost->m_pGhostNext->m_pGhostPrev = pGhost->m_pGhostPrev;
            if (pGhost->m_pGhostPrev == NULL)
                *ppGhostFromFirst = pGhost->m_pGhostNext;
            else
                pGhost->m_pGhostPrev->m_pGhostNext = pGhost->m_pGhostNext;
            
            // Add to new list
            pGhost->m_pGhostPrev = NULL;
            pGhost->m_pGhostNext = *ppGhostToFirst;
            if (pGhost->m_pGhostNext != NULL)
                pGhost->m_pGhostNext->m_pGhostPrev = pGhost;
            *ppGhostToFirst = pGhost;

            // Update list boxes:
            SendMessage(hwndFromList, LB_GETTEXT, iItemArray[iItem], (LPARAM)sz);
            SendMessage(hwndFromList, LB_DELETESTRING, iItemArray[iItem], 0);
            SendMessage(hwndToList, LB_SETITEMDATA, SendMessage(hwndToList, LB_ADDSTRING, 0, (LPARAM)sz), (LPARAM)pGhost);
            
            // If we overwrote another Ghost with the same key, remove it from dest list:
            for (pGhost2 = *ppGhostToFirst; pGhost2 != NULL; pGhost2 = pGhost2->m_pGhostNext)
            {
                if (pGhost2 != pGhost && lstrcmp(pGhost2->m_szKey, pGhost->m_szKey) == 0)
                {
                    if (pGhost2->m_pGhostNext != NULL)
                        pGhost2->m_pGhostNext->m_pGhostPrev = pGhost2->m_pGhostPrev;
                    if (pGhost2->m_pGhostPrev == NULL)
                        *ppGhostToFirst = pGhost2->m_pGhostNext;
                    else
                        pGhost2->m_pGhostPrev->m_pGhostNext = pGhost2->m_pGhostNext;
                    RemoveFromListBox(pGhost2, hwndToList);
                    delete pGhost2;
                    break;
                }
            }
        }
    }
}


/****************************************************************************
 *
 *  MoveGhost
 *
 ****************************************************************************/
BOOL MoveGhost(HWND hwnd, Ghost* pGhost, BOOL bBackup)
{
    HKEY hkeySrcParent = NULL;
    HKEY hkeySrc = NULL;
    HKEY hkeyDestParent = NULL;
    HKEY hkeyDest = NULL;
    DWORD dwDisposition;
    BOOL bRet = FALSE;

    // Open source key:
    if (ERROR_SUCCESS != RegOpenKeyEx(HKEY_LOCAL_MACHINE, bBackup ? 
        TEXT("System\\CurrentControlSet\\Services\\Class\\Display") : 
        TEXT("System\\CurrentControlSet\\Services\\Class\\DisplayBackup"), 
            KEY_ALL_ACCESS, NULL, &hkeySrcParent))
    {
        goto LEnd;
    }
    if (ERROR_SUCCESS != RegOpenKeyEx(hkeySrcParent, pGhost->m_szKey, 
        KEY_ALL_ACCESS, NULL, &hkeySrc))
    {
        goto LEnd;
    }

    // Create destination key:
    if (ERROR_SUCCESS != RegCreateKeyEx(HKEY_LOCAL_MACHINE, bBackup ? 
        TEXT("System\\CurrentControlSet\\Services\\Class\\DisplayBackup") : 
        TEXT("System\\CurrentControlSet\\Services\\Class\\Display"), 
        0, NULL, REG_OPTION_NON_VOLATILE, KEY_ALL_ACCESS, NULL, &hkeyDestParent, &dwDisposition))
    {
        goto LEnd;
    }
    // Ensure key isn't already there:
    if (ERROR_SUCCESS == RegOpenKeyEx(hkeyDestParent, pGhost->m_szKey, KEY_ALL_ACCESS, NULL, &hkeyDest))
    {
        RegCloseKey(hkeyDest);
        hkeyDest = NULL;

        TCHAR szMessage[300];
        TCHAR szTitle[100];

        LoadString(NULL, IDS_APPFULLNAME, szTitle, 100);
        LoadString(NULL, IDS_REPLACEGHOST, szMessage, 300);

        if (IDYES == MessageBox(hwnd, szMessage, szTitle, MB_YESNO))
        {
            RegDeleteKey(hkeyDestParent, pGhost->m_szKey);
        }
        else
        {
            goto LEnd;
        }
    }
    if (ERROR_SUCCESS != RegCreateKeyEx(hkeyDestParent, pGhost->m_szKey, 0, NULL, 
        REG_OPTION_NON_VOLATILE, KEY_ALL_ACCESS, NULL, &hkeyDest, &dwDisposition))
    {
        goto LEnd;
    }

    // Copy tree:
    if (ERROR_SUCCESS != RegCreateValues(hkeySrc, NULL, hkeyDest))
        goto LEnd;
    if (ERROR_SUCCESS != RegCreateTree(hkeyDest, hkeySrc))
        goto LEnd;

    // Delete old tree
    RegDeleteKey(hkeySrcParent, pGhost->m_szKey);

    bRet = TRUE; // Everything succeeded

LEnd:
    if (hkeySrcParent != NULL)
        RegCloseKey(hkeySrcParent);
    if (hkeySrc != NULL)
        RegCloseKey(hkeySrc);
    if (hkeyDestParent != NULL)
        RegCloseKey(hkeyDestParent);
    if (hkeyDest != NULL)
        RegCloseKey(hkeyDest);

    return bRet;
}


/****************************************************************************
 *
 *  RegCreateTree
 *
 ****************************************************************************/
DWORD RegCreateTree(HKEY hTree, HKEY hReplacement)
{
#define REGSTR_MAX_VALUE_LENGTH 300
    DWORD   cdwClass, dwSubKeyLength, dwDisposition, dwKeyIndex = 0;
    LPTSTR  pSubKey = NULL;
    TCHAR   szSubKey[REGSTR_MAX_VALUE_LENGTH]; // this should be dynamic.
    TCHAR   szClass[REGSTR_MAX_VALUE_LENGTH]; // this should be dynamic.
    HKEY    hNewKey, hKey;
    DWORD   lRet;

    for(;;)
    {
        dwSubKeyLength = REGSTR_MAX_VALUE_LENGTH;
        cdwClass = REGSTR_MAX_VALUE_LENGTH;
        lRet=RegEnumKeyEx(
                   hReplacement,
                   dwKeyIndex,
                   szSubKey,
                   &dwSubKeyLength,
                   NULL,
                   szClass,
                   &cdwClass,
                   NULL
                   );
        if(lRet == ERROR_NO_MORE_ITEMS)
        {
            lRet = ERROR_SUCCESS;
            break;
        }
        else if(lRet == ERROR_SUCCESS)
        {
            if ((lRet=RegCreateKeyEx(hTree, szSubKey,0, szClass,
                      REG_OPTION_NON_VOLATILE, KEY_ALL_ACCESS, NULL,
                      &hNewKey, &dwDisposition)) != ERROR_SUCCESS )
                break;
            else  // add key values and recurse
            {
                if ((lRet=RegCreateValues( hReplacement, szSubKey, hNewKey))
                        != ERROR_SUCCESS)
                {
                    CloseHandle(hNewKey);
                    break;
                }
                if ( (lRet=RegOpenKeyEx(hReplacement, szSubKey, 0,
                                  KEY_ALL_ACCESS, &hKey )) == ERROR_SUCCESS )
                {
                    lRet=RegCreateTree(hNewKey, hKey);
                    CloseHandle(hKey);
                    CloseHandle(hNewKey);
                    if ( lRet != ERROR_SUCCESS )
                            break;
                }
                else
                {
                    CloseHandle(hNewKey);
                    break;
                }
            }
        }
        else
            break;
        ++dwKeyIndex;
    } // end for loop
    return lRet;
}


/****************************************************************************
 *
 *  RegCreateValues
 *
 ****************************************************************************/
DWORD RegCreateValues(HKEY hReplacement, LPCTSTR lpSubKey, HKEY hNewKey)
{
    DWORD    cbValue, dwSubKeyIndex=0, dwType, cdwBuf;
    DWORD    dwValues, cbMaxValueData, i;
    LPTSTR   pSubKey = NULL;
    TCHAR    szValue[REGSTR_MAX_VALUE_LENGTH]; // this should be dynamic.
    HKEY     hKey;
    DWORD    lRet = ERROR_SUCCESS;
    LPBYTE   pBuf;

    if (lstrlen(lpSubKey) == 0)
    {
        hKey = hReplacement;
    }
    else
    {
        if ((lRet = RegOpenKeyEx(hReplacement, lpSubKey, 0,
                    KEY_ALL_ACCESS, &hKey )) != ERROR_SUCCESS)
        {
            return lRet;
        }
    }
    if ((lRet = RegQueryInfoKey (hKey, NULL, NULL, NULL, NULL, NULL,
                   NULL, &dwValues,NULL, &cbMaxValueData,
                   NULL, NULL)) == ERROR_SUCCESS)
    {
        if ( dwValues )
        {
            if ((pBuf = (LPBYTE)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY,
                          cbMaxValueData )))
            {
                for (i = 0; i < dwValues ; i++)
                {
                   //  get values to create
                   cbValue = REGSTR_MAX_VALUE_LENGTH;
                   cdwBuf = cbMaxValueData;
                   lRet = RegEnumValue(
                            hKey,     // handle of key to query
                            i,        // index of value to query
                            szValue,  // buffer for value string
                            &cbValue, // address for size of buffer
                            NULL,     // reserved
                            &dwType,  // buffer address for type code
                            pBuf,   // address of buffer for value data
                            &cdwBuf   // address for size of buffer
                            );

                    if ( ERROR_SUCCESS == lRet )
                    {
                        if( (lRet = RegSetValueEx(hNewKey, szValue, 0,
                                   dwType, (CONST BYTE *)pBuf,
                                   cdwBuf))!= ERROR_SUCCESS)
                            break;
                    }
                    else
                        break;

                }  // for loop
            }
            HeapFree(GetProcessHeap(), 0, pBuf);
        }
    }
    if (lstrlen(lpSubKey) != 0)
    {
        CloseHandle(hKey);
    }
    return lRet;
}


/****************************************************************************
 *
 *  RemoveFromListBox
 *
 ****************************************************************************/
VOID RemoveFromListBox(Ghost* pGhostRemove, HWND hwndList)
{
    LONG iItem;
    Ghost* pGhost;

    for (iItem = (LONG) SendMessage(hwndList, LB_GETCOUNT, 0, 0) - 1; iItem >= 0; iItem--)
    {
        pGhost = (Ghost*)SendMessage(hwndList, LB_GETITEMDATA, iItem, 0); 
        if (pGhost == pGhostRemove)
        {
            SendMessage(hwndList, LB_DELETESTRING, iItem, 0); 
            break;
        }
    }
}


/****************************************************************************
 *
 *  FreeGhostList
 *
 ****************************************************************************/
VOID FreeGhostList(Ghost** ppGhostFirst)
{
    Ghost* pGhostNext;
    while (*ppGhostFirst != NULL)
    {
        pGhostNext = (*ppGhostFirst)->m_pGhostNext;
        delete *ppGhostFirst;
        *ppGhostFirst = pGhostNext;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\directx\dxdiag\fileinfo.cpp ===
/****************************************************************************
 *
 *    File: fileinfo.cpp
 * Project: DxDiag (DirectX Diagnostic Tool)
 *  Author: Mike Anderson (manders@microsoft.com)
 * Purpose: Gather information about files on this machine
 *
 * (C) Copyright 1998 Microsoft Corp.  All rights reserved.
 *
 ****************************************************************************/

#include <tchar.h>
#include <Windows.h>
#include <mmsystem.h>
#include <stdio.h>
#include <capi.h>
#include <softpub.h>
#include <winsock.h>
#include "sysinfo.h" // for BIsPlatformNT
#include "fileinfo.h"
#include "resource.h"

// MsCat32.dll function prototypes
typedef BOOL (WINAPI* PfnCryptCATAdminAcquireContext)(OUT HCATADMIN *phCatAdmin,
                                                    IN const GUID *pgSubsystem,
                                                    IN DWORD dwFlags);
typedef BOOL (WINAPI* PfnCryptCATAdminReleaseContext)(IN HCATADMIN hCatAdmin,
                                                    IN DWORD dwFlags);
typedef BOOL (WINAPI* PfnCryptCATAdminReleaseCatalogContext)(IN HCATADMIN hCatAdmin,
                                                      IN HCATINFO hCatInfo,
                                                      IN DWORD dwFlags);
typedef BOOL (WINAPI* PfnCryptCATCatalogInfoFromContext)(IN HCATINFO hCatInfo,
                                                  IN OUT CATALOG_INFO *psCatInfo,
                                                  IN DWORD dwFlags);
typedef HCATINFO (WINAPI* PfnCryptCATAdminEnumCatalogFromHash)(IN HCATADMIN hCatAdmin,
                                                        IN BYTE *pbHash,
                                                        IN DWORD cbHash,
                                                        IN DWORD dwFlags,
                                                        IN OUT HCATINFO *phPrevCatInfo);
typedef BOOL (WINAPI* PfnIsCatalogFile)(IN OPTIONAL HANDLE hFile,
                                      IN OPTIONAL WCHAR *pwszFileName);
typedef BOOL (WINAPI* PfnCryptCATAdminCalcHashFromFileHandle)(IN HANDLE hFile,
                                                       IN OUT DWORD *pcbHash,
                                                       OUT OPTIONAL BYTE *pbHash,
                                                       IN DWORD dwFlags);

// WinTrust.dll function prototypes
typedef HRESULT (WINAPI* PfnWinVerifyTrust)(HWND hWnd,
                                            GUID *pgActionID, 
                                            WINTRUST_DATA *pWinTrustData);
 
// Crypt32.dll function prototypes
typedef BOOL (WINAPI* PfnCertFreeCertificateContext)(IN PCCERT_CONTEXT pCertContext);

struct DigiSignData
{
    BOOL bInitialized;
    BOOL bFailed;

    // Need to LoadLibrary/GetProcAddress for mscat32 APIs since they 
    // don't exist on Win95
    HINSTANCE hInstMsCat32;
    PfnCryptCATAdminAcquireContext CryptCATAdminAcquireContext;
    PfnCryptCATAdminReleaseContext CryptCATAdminReleaseContext;
    PfnCryptCATAdminReleaseCatalogContext CryptCATAdminReleaseCatalogContext;
    PfnCryptCATCatalogInfoFromContext CryptCATCatalogInfoFromContext;
    PfnCryptCATAdminEnumCatalogFromHash CryptCATAdminEnumCatalogFromHash;
    PfnIsCatalogFile IsCatalogFile;
    PfnCryptCATAdminCalcHashFromFileHandle CryptCATAdminCalcHashFromFileHandle;

    // Ditto for wintrust.dll APIs
    HINSTANCE hInstWinTrust;
    PfnWinVerifyTrust WinVerifyTrust;

    // Ditto for cypt32.dll APIs
    HINSTANCE hInstCrypt32;
    PfnCertFreeCertificateContext CertFreeCertificateContext;

    HCATADMIN hCatAdmin;
};

static DigiSignData s_dsd;

static BOOL GetMediaPlayerFolder(TCHAR* pszPath);
static BOOL VerifyFileNode(TCHAR* lpFileName, TCHAR* lpDirName);
static BOOL VerifyIsFileSigned(LPTSTR pcszMatchFile, PDRIVER_VER_INFO lpVerInfo);
static BOOL InitDigiSignData(VOID);
static BOOL IsFileDigitallySigned(TCHAR* pszFile);
static BOOL IsBadWin95Winsock( FileInfo* pFileInfo );


/****************************************************************************
 *
 *  GetProgramFilesFolder
 *
 ****************************************************************************/
VOID InitFileInfo()
{
    ZeroMemory(&s_dsd, sizeof(s_dsd));
    s_dsd.bFailed      = FALSE;
    s_dsd.bInitialized = FALSE;
}


/****************************************************************************
 *
 *  GetProgramFilesFolder
 *
 ****************************************************************************/
BOOL GetProgramFilesFolder(TCHAR* pszPath)
{
    HKEY hkey;
    DWORD dwType;
    DWORD cb;

    if (ERROR_SUCCESS != RegOpenKeyEx(HKEY_LOCAL_MACHINE, 
        TEXT("Software\\Microsoft\\Windows\\CurrentVersion"), 0, KEY_READ, &hkey))
    {
        return FALSE;
    }
    cb = MAX_PATH;
    RegQueryValueEx(hkey, TEXT("ProgramFilesDir"), NULL, &dwType, (LPBYTE)pszPath, &cb);
    RegCloseKey(hkey);
    if (cb == 0)
        return FALSE;
    return TRUE;
}


/****************************************************************************
 *
 *  FormatFileTime
 *
 ****************************************************************************/
VOID FormatFileTime(FILETIME* pUTCFileTime, TCHAR* pszDateLocal, TCHAR* pszDateEnglish)
{
    FILETIME fileTimeLocal;
    SYSTEMTIME systemTime;
    TCHAR szTime[100];

    FileTimeToLocalFileTime(pUTCFileTime, &fileTimeLocal);
    FileTimeToSystemTime(&fileTimeLocal, &systemTime);
    wsprintf(pszDateEnglish, TEXT("%d/%d/%04d %02d:%02d:%02d"),
        systemTime.wMonth, systemTime.wDay, systemTime.wYear,
        systemTime.wHour, systemTime.wMinute, systemTime.wSecond);
    GetDateFormat(LOCALE_USER_DEFAULT, DATE_SHORTDATE, &systemTime, NULL, pszDateLocal, 30);
    wsprintf(szTime, TEXT(" %02d:%02d:%02d"), systemTime.wHour, 
        systemTime.wMinute, systemTime.wSecond);
    lstrcat(pszDateLocal, szTime);
}


/****************************************************************************
 *
 *  GetMediaPlayerFolder
 *
 ****************************************************************************/
BOOL GetMediaPlayerFolder(TCHAR* pszPath)
{
    HKEY hkey;
    DWORD dwType;
    DWORD cb;

    if (ERROR_SUCCESS != RegOpenKeyEx(HKEY_LOCAL_MACHINE, 
        TEXT("Software\\Microsoft\\MediaPlayer"), 0, KEY_READ, &hkey))
    {
        return FALSE;
    }
    cb = MAX_PATH;
    RegQueryValueEx(hkey, TEXT("Installation Directory"), NULL, &dwType, (LPBYTE)pszPath, &cb);
    RegCloseKey(hkey);
    if (cb == 0)
        return FALSE;
    return TRUE;
}


/****************************************************************************
 *
 *  GetDxSetupFolder
 *
 ****************************************************************************/
BOOL GetDxSetupFolder(TCHAR* pszPath)
{
    if (!GetProgramFilesFolder(pszPath))
        return FALSE;
    lstrcat(pszPath, TEXT("\\DirectX\\Setup"));
    return TRUE;
}


/****************************************************************************
 *
 *  GetComponentFiles
 *
 ****************************************************************************/
HRESULT GetComponentFiles(TCHAR* pszFolder, FileInfo** ppFileInfoFirst,
                          BOOL bSkipMissingFiles, LONG ids)
{
    LONG cch;
    FileInfo* pFileInfo;
    FileInfo* pFileInfoNew;
    LONG iFile;
    TCHAR szFile[50];
    TCHAR szPath[MAX_PATH];
    TCHAR szComponentFiles[2048];
    TCHAR* pszFilePos;
    TCHAR* pszFilePos2;
    TCHAR* pszFirstParen;
    FLOAT fStartShipAt;
    FLOAT fStopShipAt;
    BOOL bDriversDir;
    BOOL bNTDriversDir;
    BOOL bIgnoreVersionInfo;
    BOOL bIgnoreDebug;
    BOOL bIgnoreBeta;
    BOOL bBDA;
    BOOL bNotIA64;
    BOOL bOptional;
    BOOL bOptionalOnNT;
    BOOL bOptionalOnWOW64;
    BOOL bIsNT = BIsPlatformNT();
    BOOL bIs95 = BIsWin95();

    cch = LoadString(NULL, ids, szComponentFiles, 2048);
    if (cch == 0 || cch >= 2047)
        return E_FAIL;
    pszFilePos = szComponentFiles;

    for (iFile = 0; ; iFile++)
    {
        // Stop if we've gone through the whole list
        if (pszFilePos == NULL)
            break;

        // Pull the next file out of the list
        pszFilePos2 = _tcsstr(pszFilePos, TEXT(","));
        if (pszFilePos2 == NULL)
        {
            _tcsncpy(szFile, pszFilePos, 50);
            szFile[49]=0;
            pszFilePos = NULL;
        }
        else
        {
            _tcsncpy(szFile, pszFilePos, (DWORD)(pszFilePos2 - pszFilePos));
            szFile[pszFilePos2 - pszFilePos] = '\0';
            pszFilePos = pszFilePos2 + 1;
        }

        // Clear file flags
        fStartShipAt = 0.0f;
        fStopShipAt  = 10000.0f;
        bDriversDir = FALSE;
        bNTDriversDir = FALSE;
        bIgnoreVersionInfo = FALSE;
        bIgnoreDebug = FALSE;
        bIgnoreBeta = FALSE;
        bBDA = FALSE;
        bNotIA64 = FALSE;
        bOptional = FALSE;
        bOptionalOnNT = FALSE;
        bOptionalOnWOW64 = FALSE;

        // Look at file flags, if any
        pszFirstParen = _tcsstr(szFile, TEXT("("));
        if (pszFirstParen != NULL)
        {

            // If this file does not exist on NT, and we are running NT, skip it.
            if (_tcsstr(pszFirstParen, TEXT("notNT")) != NULL && bIsNT)
                continue;

            // If this file does not exist on W95, and we are running W95, skip it.
            if (_tcsstr(pszFirstParen, TEXT("not95")) != NULL && bIs95)
                continue;

            // If this file only exists on W95, and we are not running W95, skip it.
            // Note: files like vjoyd.vxd may exist on Win98, but DX setup does not
            // install them or update them, so we ignore them.
            // Note: can't call this "95only" because it would clash with "5only"
            if (_tcsstr(pszFirstParen, TEXT("9fiveonly")) != NULL && !bIs95)
                continue;

            // Check for other flags
            if (_tcsstr(pszFirstParen, TEXT("+")) != NULL)
            {
                if (_tcsstr(pszFirstParen, TEXT("+5")) != NULL)
                    fStartShipAt = 5.0f;
                else if (_tcsstr(pszFirstParen, TEXT("+61")) != NULL)
                    fStartShipAt = 6.1f;
                else if (_tcsstr(pszFirstParen, TEXT("+6")) != NULL)
                    fStartShipAt = 6.0f;
                else if (_tcsstr(pszFirstParen, TEXT("+71")) != NULL)
                    fStartShipAt = 7.1f;
                else if (_tcsstr(pszFirstParen, TEXT("+7")) != NULL)
                    fStartShipAt = 7.0f;
                else if (_tcsstr(pszFirstParen, TEXT("+81")) != NULL)
                    fStartShipAt = 8.1f;
                else if (_tcsstr(pszFirstParen, TEXT("+8")) != NULL)
                    fStartShipAt = 8.0f;
            }

            if (_tcsstr(pszFirstParen, TEXT("-")) != NULL)
            {
                if (_tcsstr(pszFirstParen, TEXT("-5")) != NULL)
                    fStopShipAt = 5.0f;
                else if (_tcsstr(pszFirstParen, TEXT("-61")) != NULL)
                    fStopShipAt = 6.1f;
                else if (_tcsstr(pszFirstParen, TEXT("-6")) != NULL)
                    fStopShipAt = 6.0f;
                else if (_tcsstr(pszFirstParen, TEXT("-71")) != NULL)
                    fStopShipAt = 7.1f;
                else if (_tcsstr(pszFirstParen, TEXT("-7")) != NULL)
                    fStopShipAt = 7.0f;
                else if (_tcsstr(pszFirstParen, TEXT("-81")) != NULL)
                    fStopShipAt = 8.1f;
                else if (_tcsstr(pszFirstParen, TEXT("-8")) != NULL)
                    fStopShipAt = 8.0f;
            }

            // Note: can't call this "DriversDir" because it would clash with "NTDriversDir"
            if (_tcsstr(pszFirstParen, TEXT("DrivDir")) != NULL)
                bDriversDir = TRUE;
            if (_tcsstr(pszFirstParen, TEXT("NTDriversDir")) != NULL)
                bNTDriversDir = TRUE;

            if (_tcsstr(pszFirstParen, TEXT("SkipVer")) != NULL)
                bIgnoreVersionInfo = TRUE;
            if (_tcsstr(pszFirstParen, TEXT("SkipDebug")) != NULL)
                bIgnoreDebug = TRUE;
            if (_tcsstr(pszFirstParen, TEXT("SkipBeta")) != NULL)
                bIgnoreBeta = TRUE;

            if (_tcsstr(pszFirstParen, TEXT("notia64")) != NULL)
                bNotIA64 = TRUE;

            if (_tcsstr(pszFirstParen, TEXT("optnt")) != NULL)
                bOptionalOnNT = TRUE;
            else if (_tcsstr(pszFirstParen, TEXT("optwow")) != NULL)
                bOptionalOnWOW64 = TRUE;
            else if (_tcsstr(pszFirstParen, TEXT("opt")) != NULL)
                bOptional = TRUE;

            if (_tcsstr(pszFirstParen, TEXT("bda")) != NULL)
            {
                bBDA = TRUE;
                bOptional = TRUE;
                bIgnoreVersionInfo = TRUE;
            }

            // End file name at open parenthesis, if any:
            *pszFirstParen = TEXT('\0');
        }

        pFileInfoNew = new FileInfo;
        if (pFileInfoNew == NULL)
            return E_OUTOFMEMORY;
        ZeroMemory(pFileInfoNew, sizeof(FileInfo));

        pFileInfoNew->m_fStartShipAt = fStartShipAt;
        pFileInfoNew->m_fStopShipAt = fStopShipAt;
        pFileInfoNew->m_bIgnoreVersionInfo = bIgnoreVersionInfo;
        pFileInfoNew->m_bIgnoreDebug = bIgnoreDebug;
        pFileInfoNew->m_bIgnoreBeta = bIgnoreBeta;
        pFileInfoNew->m_bBDA = bBDA;
        pFileInfoNew->m_bNotIA64 = bNotIA64;
        pFileInfoNew->m_bOptional = bOptional;
        pFileInfoNew->m_bOptionalOnNT = bOptionalOnNT;
        pFileInfoNew->m_bOptionalOnWOW64 = bOptionalOnWOW64;
        lstrcpy(pFileInfoNew->m_szName, szFile);

        _tcsncpy(szPath, pszFolder,MAX_PATH);
        szPath[MAX_PATH-1]=0;
        lstrcat(szPath, TEXT("\\"));

        if (bNTDriversDir && bIsNT)
            lstrcat(szPath, TEXT("Drivers\\"));
        else if (bDriversDir)
            lstrcat(szPath, TEXT("..\\System32\\Drivers\\"));
        lstrcat(szPath, szFile);
        WIN32_FIND_DATA findFileData;
        HANDLE hFind = FindFirstFile(szPath, &findFileData);
        if (hFind == INVALID_HANDLE_VALUE)
        {
            if (bSkipMissingFiles)
            {
                delete pFileInfoNew;
                continue;
            }
        }
        else
        {
            pFileInfoNew->m_bExists = TRUE;
            FindClose(hFind);
        }
        if (pFileInfoNew->m_bExists)
        {
            pFileInfoNew->m_numBytes = findFileData.nFileSizeLow;
            pFileInfoNew->m_FileTime = findFileData.ftLastWriteTime;
            FormatFileTime(&findFileData.ftLastWriteTime, pFileInfoNew->m_szDatestampLocal, 
                pFileInfoNew->m_szDatestamp);
            GetFileVersion(szPath, pFileInfoNew->m_szVersion, pFileInfoNew->m_szAttributes,
                pFileInfoNew->m_szLanguageLocal, pFileInfoNew->m_szLanguage, &pFileInfoNew->m_bBeta, &pFileInfoNew->m_bDebug);
        }
        if (*ppFileInfoFirst == NULL)
            *ppFileInfoFirst = pFileInfoNew;
        else
        {
            for (pFileInfo = *ppFileInfoFirst; 
                pFileInfo->m_pFileInfoNext != NULL; 
                pFileInfo = pFileInfo->m_pFileInfoNext)
                {
                }
            pFileInfo->m_pFileInfoNext = pFileInfoNew;
        }
    }

    return S_OK;
}


/****************************************************************************
 *
 *  DestroyFileList
 *
 ****************************************************************************/
VOID DestroyFileList(FileInfo* pFileInfoFirst)
{
    FileInfo* pFileInfo;
    FileInfo* pFileInfoNext;

    for (pFileInfo = pFileInfoFirst; pFileInfo != NULL; pFileInfo = pFileInfoNext)
    {
        pFileInfoNext = pFileInfo->m_pFileInfoNext;
        delete pFileInfo;
    }
}


/****************************************************************************
 *
 *  GetFileDateAndSize
 *
 ****************************************************************************/
BOOL GetFileDateAndSize(TCHAR* pszFile, TCHAR* pszDateLocal, TCHAR* pszDateEnglish, 
                        LONG* pnumBytes)
{
    WIN32_FIND_DATA findFileData;
    HANDLE hFind;
    
    pszDateLocal[0] = '\0';
    pszDateEnglish[0] = '\0';
    *pnumBytes = 0;
    hFind = FindFirstFile(pszFile, &findFileData);
    if (hFind == INVALID_HANDLE_VALUE)
        return FALSE; // file not found
    FindClose(hFind);
    *pnumBytes = findFileData.nFileSizeLow;
    FormatFileTime(&findFileData.ftLastWriteTime, pszDateLocal, pszDateEnglish);
    
    return TRUE;
}


/****************************************************************************
 *
 *  GetFileVersion
 *
 ****************************************************************************/
HRESULT GetFileVersion(TCHAR* pszFile, TCHAR* pszVersion, TCHAR* pszAttributes,
    TCHAR* pszLanguageLocal, TCHAR* pszLanguage, BOOL* pbBeta, BOOL* pbDebug)
{
    UINT cb;
    DWORD dwHandle;
    BYTE FileVersionBuffer[4096];
    VS_FIXEDFILEINFO* pVersion = NULL;
    DWORD dwVersionAttribs = 0;           // DEBUG, RETAIL, etc.
    DWORD* pdwCharSet = NULL;
    WORD wLanguage;
    LCID lcid;
    TCHAR szDebug[100];
    TCHAR szRetail[100];
    TCHAR szBeta[100];
    TCHAR szFinal[100];
    TCHAR szCombineFmt[100];
    LoadString(NULL, IDS_DEBUG, szDebug, 100);
    LoadString(NULL, IDS_RETAIL, szRetail, 100);
    LoadString(NULL, IDS_BETA, szBeta, 100);
    LoadString(NULL, IDS_FINAL, szFinal, 100);
    LoadString(NULL, IDS_ATTRIBCOMBINE, szCombineFmt, 100);

    cb = GetFileVersionInfoSize(pszFile, &dwHandle/*ignored*/);
    if (cb > 0)
    {
        if (cb > sizeof(FileVersionBuffer))
            cb = sizeof(FileVersionBuffer);

        if (GetFileVersionInfo(pszFile, 0, cb, FileVersionBuffer))
        {
            pVersion = NULL;
            if (VerQueryValue(FileVersionBuffer, TEXT("\\"), (VOID**)&pVersion, &cb)
                && pVersion != NULL) 
            {
                if (pszVersion != NULL)
                {
                    wsprintf(pszVersion, TEXT("%d.%02d.%02d.%04d"), 
                        HIWORD(pVersion->dwFileVersionMS),
                        LOWORD(pVersion->dwFileVersionMS), 
                        HIWORD(pVersion->dwFileVersionLS), 
                        LOWORD(pVersion->dwFileVersionLS));
                }
                if (pszAttributes != NULL)
                {
                    dwVersionAttribs = pVersion->dwFileFlags;
                    // Bug 18892: work around DPlay 6.0a
                    if (pVersion->dwFileVersionMS == 0x00040006 &&
                        (pVersion->dwFileVersionLS == 0x0002016b || // 4.06.02.0363
                        pVersion->dwFileVersionLS == 0x00020164)) // 4.06.02.0356
                    {
                        dwVersionAttribs &= ~VS_FF_PRERELEASE;
                    }
                    if (pszVersion != NULL)
                    {
                        TCHAR* pszLeaf = _tcsrchr(pszFile, TEXT('\\'));
                        if( pszLeaf )
                        {
                            pszLeaf++;
                            
                            // Work around several DXMedia files which are incorrectly marked as beta
                            if (lstrcmp(pszLeaf, TEXT("oleaut32.dll")) == 0)
                            {
                                dwVersionAttribs &= ~VS_FF_PRERELEASE;
                            }
                            else if (lstrcmp(pszLeaf, TEXT("quartz.dll")) == 0 &&
                                lstrcmp(pszVersion, TEXT("4.00.96.0729")) == 0)
                            {
                                dwVersionAttribs &= ~VS_FF_PRERELEASE;
                            }
                            else if (lstrcmp(pszLeaf, TEXT("quartz.vxd")) == 0 &&
                                lstrcmp(pszVersion, TEXT("4.00.96.0729")) == 0)
                            {
                                dwVersionAttribs &= ~VS_FF_PRERELEASE;
                            }
                            else if (lstrcmp(pszLeaf, TEXT("mciqtz.drv")) == 0 &&
                                lstrcmp(pszVersion, TEXT("4.00.96.0729")) == 0)
                            {
                                dwVersionAttribs &= ~VS_FF_PRERELEASE;
                            }
                            else if (lstrcmp(pszLeaf, TEXT("mciqtz32.dll")) == 0 &&
                                lstrcmp(pszVersion, TEXT("4.00.96.0729")) == 0)
                            {
                                dwVersionAttribs &= ~VS_FF_PRERELEASE;
                            }
                            else if (lstrcmp(pszLeaf, TEXT("actmovie.exe")) == 0)
                            {
                                dwVersionAttribs &= ~VS_FF_PRERELEASE;
                            }
                            else if (lstrcmp(pszLeaf, TEXT("strmdll.dll")) == 0)
                            {
                                dwVersionAttribs &= ~VS_FF_PRERELEASE;
                            }
                            else if (lstrcmp(pszLeaf, TEXT("unam4ie.exe")) == 0 &&
                                lstrcmp(pszVersion, TEXT("6.00.02.0902")) == 0)
                            {
                                dwVersionAttribs &= ~VS_FF_PRERELEASE;
                            }
                            else if (lstrcmp(pszLeaf, TEXT("unam4ie.exe")) == 0 &&
                                lstrcmp(pszVersion, TEXT("5.01.18.1024")) == 0)
                            {
                                dwVersionAttribs &= ~VS_FF_PRERELEASE;
                            }
                            else if (lstrcmp(pszLeaf, TEXT("iac25_32.ax")) == 0 &&
                                lstrcmp(pszVersion, TEXT("2.00.05.0050")) == 0)
                            {
                                dwVersionAttribs &= ~VS_FF_PRERELEASE;
                            }
                            else if (lstrcmp(pszLeaf, TEXT("iac25_32.ax")) == 0 &&
                                lstrcmp(pszVersion, TEXT("2.00.05.0052")) == 0)
                            {
                                dwVersionAttribs &= ~VS_FF_PRERELEASE;
                            }
                            else if (lstrcmp(pszLeaf, TEXT("tm20dec.ax")) == 0)
                            {
                                dwVersionAttribs &= ~VS_FF_PRERELEASE;
                            }
                            else if (lstrcmp(pszLeaf, TEXT("tm20dec.ax")) == 0 &&
                                lstrcmp(pszVersion, TEXT("1.00.00.0000")) == 0)
                            {
                                dwVersionAttribs &= ~VS_FF_PRERELEASE;
                            }
                            else if (lstrcmp(pszLeaf, TEXT("msdxm.ocx")) == 0)
                            {
                                dwVersionAttribs &= ~VS_FF_PRERELEASE;
                            }
                            else if (lstrcmp(pszLeaf, TEXT("dxmasf.dll")) == 0)
                            {
                                dwVersionAttribs &= ~VS_FF_PRERELEASE;
                            }
                            else if (lstrcmp(pszLeaf, TEXT("iac25_32.ax")) == 0 &&
                                lstrcmp(pszVersion, TEXT("2.00.05.0053")) == 0)
                            {
                                dwVersionAttribs &= ~VS_FF_PRERELEASE; // Since 350883 got punted
                            }
                        }
                    }

                    wsprintf(pszAttributes, szCombineFmt,
                        (dwVersionAttribs & VS_FF_PRERELEASE ? szBeta : szFinal),
                        (dwVersionAttribs & VS_FF_DEBUG ? szDebug : szRetail));
                    if (pbBeta != NULL)
                        *pbBeta = (dwVersionAttribs & VS_FF_PRERELEASE) ? TRUE : FALSE;
                    if (pbDebug != NULL) 
                        *pbDebug = (dwVersionAttribs & VS_FF_DEBUG) ? TRUE : FALSE;
                }
            }
            if (pszLanguage != NULL)
            {
                if (VerQueryValue(FileVersionBuffer, TEXT("\\VarFileInfo\\Translation"), (VOID**)&pdwCharSet, &cb)
                    && pdwCharSet && cb) 
                {
                    wLanguage = LOWORD(*pdwCharSet);
                    lcid = MAKELCID(wLanguage, SORT_DEFAULT);
                    GetLocaleInfo(lcid, LOCALE_SENGLANGUAGE, pszLanguage, 100);
                    if (pszLanguageLocal != NULL)
                    {
                        GetLocaleInfo(lcid, LOCALE_SLANGUAGE, pszLanguageLocal, 100);
                        // Show "English", not "English (United States)".  I can't
                        // find a better way to do this (such that it localizes properly)
                        TCHAR* pszSublanguage;
                        pszSublanguage = _tcsstr(pszLanguageLocal, TEXT(" ("));
                        if (pszSublanguage != NULL)
                            *pszSublanguage = '\0';
                    }
                }
            }
        }
    }
    else
    {
        TCHAR* pszLeaf = _tcsrchr(pszFile, TEXT('\\'));
        if( pszLeaf )
        {
            pszLeaf++;
            if (DXUtil_strcmpi(pszLeaf, TEXT("vidx16.dll")) == 0)
            {
                if (pszVersion != NULL)
                    lstrcpy(pszVersion, TEXT("0.00.00.0000"));
                if (pszAttributes != NULL)
                {
                    _sntprintf(pszAttributes, 50, TEXT("%s %s"), szFinal, szRetail);
                    pszAttributes[49] = 0;
                }
                if (pszLanguage != NULL)
                {
                    wLanguage = MAKELANGID(LANG_ENGLISH, SUBLANG_ENGLISH_US);
                    lcid = MAKELCID(wLanguage, SORT_DEFAULT);
                    GetLocaleInfo(lcid,  LOCALE_SENGLANGUAGE, pszLanguage, 100);
                    if (pszLanguageLocal != NULL)
                    {
                        GetLocaleInfo(lcid, LOCALE_SLANGUAGE, pszLanguageLocal, 100);
                        // Show "English", not "English (United States)".  I can't
                        // find a better way to do this (such that it localizes properly)
                        TCHAR* pszSublanguage;
                        pszSublanguage = _tcsstr(pszLanguageLocal, TEXT(" ("));
                        if (pszSublanguage != NULL)
                            *pszSublanguage = '\0';
                    }
                }
            }
        }
    }
    
    return S_OK;
}


/****************************************************************************
 *
 *  GetLanguageFromFile
 *
 ****************************************************************************/
WORD GetLanguageFromFile(const TCHAR* pszFileName, const TCHAR* pszPath)
{
    BYTE                FileVersionBuffer[4096];
    DWORD              *pdwCharSet;
    UINT                cb;
    DWORD               dwHandle;
    TCHAR               szFileAndPath[MAX_PATH];
    WORD                wLanguage;
  
    _tcsncpy(szFileAndPath, pszPath, MAX_PATH);
    szFileAndPath[MAX_PATH-1] = 0;
    lstrcat(szFileAndPath, TEXT("\\"));
    if( lstrlen(szFileAndPath) + lstrlen(pszFileName) < MAX_PATH )
        lstrcat(szFileAndPath, pszFileName);
    memset(FileVersionBuffer, 0, sizeof FileVersionBuffer);
    wLanguage = 0;
    
    if (cb = GetFileVersionInfoSize(szFileAndPath, &dwHandle/*ignored*/))
    {
        cb = (cb <= sizeof FileVersionBuffer ? cb : sizeof FileVersionBuffer);

        if (GetFileVersionInfo(szFileAndPath, 0, cb, FileVersionBuffer))
        {
            pdwCharSet = 0;

            if (VerQueryValue(FileVersionBuffer, TEXT("\\VarFileInfo\\Translation"), (void**)&pdwCharSet, &cb)
                && pdwCharSet && cb) 
            {
                wLanguage = LOWORD(*pdwCharSet);
            }
        }
    }    
    return wLanguage;
}


struct DLSVERSION 
{
    DWORD dwVersionMS;
    DWORD dwVersionLS;
};

#define FOURCC_VERS mmioFOURCC('v','e','r','s')

/****************************************************************************
 *
 *  GetRiffFileVersion
 *
 ****************************************************************************/
HRESULT GetRiffFileVersion(TCHAR* pszFile, TCHAR* pszVersion)
{
    MMIOINFO mmio;
    MMCKINFO mmck1;
    MMCKINFO mmck2;
    DLSVERSION dlsver;
    HMMIO hDLS;

    // DLS file has different version scheme since it's a riff file.
    // So retrieve version info from 'vers' chunk.

    ZeroMemory(&mmio, sizeof(MMIOINFO));
    hDLS = mmioOpen(pszFile,&mmio,MMIO_READ);
    if (hDLS == NULL) 
    {
        return E_FAIL;
    }

    // read riff chunk
    ZeroMemory(&mmck1,sizeof(MMCKINFO));
    if (mmioDescend(hDLS,
                    &mmck1,
                    NULL,
                    MMIO_FINDRIFF) != MMSYSERR_NOERROR) 
    {
         mmioClose(hDLS,0);
         return E_FAIL;
    }
    ZeroMemory(&mmck2,sizeof(MMCKINFO));
    mmck2.ckid = FOURCC_VERS;
    if (mmioDescend(hDLS,
                    &mmck2,
                    &mmck1,
                    MMIO_FINDCHUNK) != MMSYSERR_NOERROR) 
    {
        mmioClose(hDLS,0);
        return E_FAIL;
    }
    if (mmioRead(hDLS,
                 (HPSTR)&dlsver,
                 sizeof(DLSVERSION)) != sizeof(DLSVERSION)) 
    {
        mmioClose(hDLS,0);
        return E_FAIL;
    }

    wsprintf(pszVersion, TEXT("%d.%02d.%02d.%04d"), 
        HIWORD(dlsver.dwVersionMS),
        LOWORD(dlsver.dwVersionMS), 
        HIWORD(dlsver.dwVersionLS), 
        LOWORD(dlsver.dwVersionLS));
    mmioClose(hDLS,0);

    return S_OK;
}


/****************************************************************************
 *
 *  FileIsSigned - use digital signature on all OSs  
 *
 ****************************************************************************/
VOID FileIsSigned(LPTSTR lpszFile, BOOL* pbSigned, BOOL* pbIsValid)
{
    // Look for digital sig
    if( !InitDigiSignData() )
    {
        if( pbSigned )
            *pbSigned  = FALSE;

        if( pbIsValid )
            *pbIsValid = FALSE;

        return;
    }

    if( pbSigned )
        *pbSigned  = IsFileDigitallySigned(lpszFile);
    if( pbIsValid )
        *pbIsValid = TRUE;
}


/****************************************************************************
 *
 *  InitDigiSignData
 *
 ****************************************************************************/
BOOL InitDigiSignData(VOID)
{
    TCHAR szPath[MAX_PATH];

    if( s_dsd.bInitialized )
        return TRUE;
    if( s_dsd.bFailed ) 
        return FALSE;

    ZeroMemory(&s_dsd, sizeof(s_dsd));

    GetSystemDirectory(szPath, MAX_PATH);
    lstrcat(szPath, TEXT("\\mscat32.dll"));
    s_dsd.hInstMsCat32 = LoadLibrary(szPath);
    if (s_dsd.hInstMsCat32 == NULL)
    {
        s_dsd.bFailed = TRUE;
        return FALSE;
    }

    s_dsd.CryptCATAdminAcquireContext = (PfnCryptCATAdminAcquireContext)GetProcAddress(s_dsd.hInstMsCat32, "CryptCATAdminAcquireContext");
    if (s_dsd.CryptCATAdminAcquireContext == NULL)
    {
        s_dsd.bFailed = TRUE;
        return FALSE;
    }

    s_dsd.CryptCATAdminReleaseContext = (PfnCryptCATAdminReleaseContext)GetProcAddress(s_dsd.hInstMsCat32, "CryptCATAdminReleaseContext");
    if (s_dsd.CryptCATAdminReleaseContext == NULL)
    {
        s_dsd.bFailed = TRUE;
        return FALSE;
    }

    s_dsd.CryptCATAdminReleaseCatalogContext = (PfnCryptCATAdminReleaseCatalogContext)GetProcAddress(s_dsd.hInstMsCat32, "CryptCATAdminReleaseCatalogContext");
    if (s_dsd.CryptCATAdminReleaseCatalogContext == NULL)
    {
        s_dsd.bFailed = TRUE;
        return FALSE;
    }

    s_dsd.CryptCATCatalogInfoFromContext = (PfnCryptCATCatalogInfoFromContext)GetProcAddress(s_dsd.hInstMsCat32, "CryptCATCatalogInfoFromContext");
    if (s_dsd.CryptCATCatalogInfoFromContext == NULL)
    {
        s_dsd.bFailed = TRUE;
        return FALSE;
    }

    s_dsd.CryptCATAdminEnumCatalogFromHash = (PfnCryptCATAdminEnumCatalogFromHash)GetProcAddress(s_dsd.hInstMsCat32, "CryptCATAdminEnumCatalogFromHash");
    if (s_dsd.CryptCATAdminEnumCatalogFromHash == NULL)
    {
        s_dsd.bFailed = TRUE;
        return FALSE;
    }

    s_dsd.IsCatalogFile = (PfnIsCatalogFile)GetProcAddress(s_dsd.hInstMsCat32, "IsCatalogFile");
    if (s_dsd.IsCatalogFile == NULL)
    {
        s_dsd.bFailed = TRUE;
        return FALSE;
    }

    s_dsd.CryptCATAdminCalcHashFromFileHandle = (PfnCryptCATAdminCalcHashFromFileHandle)GetProcAddress(s_dsd.hInstMsCat32, "CryptCATAdminCalcHashFromFileHandle");
    if (s_dsd.CryptCATAdminCalcHashFromFileHandle == NULL)
    {
        s_dsd.bFailed = TRUE;
        return FALSE;
    }

    if (!s_dsd.CryptCATAdminAcquireContext(&s_dsd.hCatAdmin, NULL, 0))
    {
        s_dsd.bFailed = TRUE;
        return FALSE;
    }

    GetSystemDirectory(szPath, MAX_PATH);
    lstrcat(szPath, TEXT("\\wintrust.dll"));
    s_dsd.hInstWinTrust = LoadLibrary(szPath);
    if (s_dsd.hInstWinTrust == NULL)
    {
        s_dsd.bFailed = TRUE;
        return FALSE;
    }

    s_dsd.WinVerifyTrust = (PfnWinVerifyTrust)GetProcAddress(s_dsd.hInstWinTrust, "WinVerifyTrust");
    if (s_dsd.WinVerifyTrust == NULL)
    {
        s_dsd.bFailed = TRUE;
        return FALSE;
    }

    GetSystemDirectory(szPath, MAX_PATH);
    lstrcat(szPath, TEXT("\\crypt32.dll"));
    s_dsd.hInstCrypt32 = LoadLibrary(szPath);
    if (s_dsd.hInstCrypt32 == NULL)
    {
        s_dsd.bFailed = TRUE;
        return FALSE;
    }

    s_dsd.CertFreeCertificateContext = (PfnCertFreeCertificateContext)GetProcAddress(s_dsd.hInstCrypt32, "CertFreeCertificateContext");
    if (s_dsd.CertFreeCertificateContext == NULL)
    {
        s_dsd.bFailed = TRUE;
        return FALSE;
    }

    s_dsd.bFailed      = FALSE;
    s_dsd.bInitialized = TRUE;
    return TRUE;
}


/****************************************************************************
 *
 *  ReleaseDigiSignData
 *
 ****************************************************************************/
VOID ReleaseDigiSignData(VOID)
{
    if( s_dsd.CryptCATAdminReleaseContext && s_dsd.hCatAdmin )
        s_dsd.CryptCATAdminReleaseContext(s_dsd.hCatAdmin,0);
    if (s_dsd.hInstMsCat32 != NULL)
        FreeLibrary(s_dsd.hInstMsCat32);
    if (s_dsd.hInstWinTrust != NULL)
        FreeLibrary(s_dsd.hInstWinTrust);
    if (s_dsd.hInstCrypt32 != NULL)
        FreeLibrary(s_dsd.hInstCrypt32);
    ZeroMemory(&s_dsd, sizeof(s_dsd));
}


/****************************************************************************
 *
 *  IsFileDigitallySigned
 *
 ****************************************************************************/
BOOL IsFileDigitallySigned(TCHAR* pszFile)
{
    if (!s_dsd.bInitialized)
        return FALSE;
    
    TCHAR lpFileName[MAX_PATH];
    TCHAR lpDirName[MAX_PATH];
    TCHAR* pch;
    if( lstrlen(lpDirName) + lstrlen(pszFile) < MAX_PATH )
        lstrcpy(lpDirName, pszFile);
    CharLowerBuff(lpDirName, lstrlen(lpDirName));
    pch = _tcsrchr(lpDirName, TEXT('\\'));
    // 22670: There *should* be a backslash in pszFile, but cope if it isn't
    if (pch == NULL)
    {
        lstrcpyn(lpFileName, pszFile,MAX_PATH);
        GetCurrentDirectory(MAX_PATH, lpDirName);
    }
    else
    {
        lstrcpy(lpFileName, pch + 1);
        *pch = TEXT('\0');
    }
    if (_tcsstr(lpDirName, TEXT("\\")) == NULL)
        lstrcat(lpDirName, TEXT("\\"));

    return VerifyFileNode(lpFileName, lpDirName);
}


/****************************************************************************
 *
 *  VerifyFileNode
 *
 ****************************************************************************/
BOOL VerifyFileNode(TCHAR* lpFileName, TCHAR* lpDirName)
{
    const DWORD HASH_SIZE = 100;
    HANDLE hFile;
    BOOL bRet;
    HCATINFO hCatInfo = NULL;
    HCATINFO PrevCat;
    WINTRUST_DATA WinTrustData;
    WINTRUST_CATALOG_INFO WinTrustCatalogInfo;
    DRIVER_VER_INFO VerInfo;
    GUID  guidSubSystemDriver = DRIVER_ACTION_VERIFY;
    HRESULT hRes;
    DWORD cbHash = HASH_SIZE;
    BYTE szHash[HASH_SIZE];
    LPBYTE lpHash = szHash;
    CATALOG_INFO CatInfo;
#ifndef UNICODE
    WCHAR UnicodeKey[MAX_PATH];
#endif
    BOOL bSigned = FALSE;
    TCHAR szFullPath[MAX_PATH];

    wsprintf(szFullPath, TEXT("%s\\%s"), lpDirName, lpFileName);

    //
    // Get the handle to the file, so we can call CryptCATAdminCalcHashFromFileHandle
    //
    hFile = CreateFile( szFullPath,
                        GENERIC_READ,
                        FILE_SHARE_READ | FILE_SHARE_WRITE,
                        NULL,
                        OPEN_EXISTING,
                        FILE_ATTRIBUTE_NORMAL,
                        NULL);
    if (hFile == INVALID_HANDLE_VALUE)
    {
        return FALSE;
    }

    // Initialize the hash buffer
    ZeroMemory(lpHash, HASH_SIZE);

    // Generate the hash from the file handle and store it in lpHash
    if (!s_dsd.CryptCATAdminCalcHashFromFileHandle(hFile, &cbHash, lpHash, 0))
    {
        //
        // If we couldn't generate a hash, it might be an individually signed catalog.
        // If it's a catalog, zero out lpHash and cbHash so we know there's no hash to check.
        //
        if (s_dsd.IsCatalogFile(hFile, NULL))
        {
            lpHash = NULL;
            cbHash = 0;
        } 
        else  // If it wasn't a catalog, we'll bail and this file will show up as unscanned.
        {
            CloseHandle(hFile);
            return FALSE;
        }
    }

    // Close the file handle
    CloseHandle(hFile);

    //
    // Now we have the file's hash.  Initialize the structures that
    // will be used later on in calls to WinVerifyTrust.
    //
    ZeroMemory(&WinTrustData, sizeof(WINTRUST_DATA));
    WinTrustData.cbStruct = sizeof(WINTRUST_DATA);
    WinTrustData.dwUIChoice = WTD_UI_NONE;
    WinTrustData.fdwRevocationChecks = WTD_REVOKE_NONE;
    WinTrustData.dwUnionChoice = WTD_CHOICE_CATALOG;
    WinTrustData.dwStateAction = WTD_STATEACTION_AUTO_CACHE;
    WinTrustData.pPolicyCallbackData = (LPVOID)&VerInfo;

    ZeroMemory(&VerInfo, sizeof(DRIVER_VER_INFO));
    VerInfo.cbStruct = sizeof(DRIVER_VER_INFO);

    OSVERSIONINFO osvi;
    ZeroMemory(&osvi, sizeof(osvi));
    osvi.dwOSVersionInfoSize = sizeof(osvi);
    if (GetVersionEx(&osvi))
    {
        VerInfo.dwPlatform = osvi.dwPlatformId;
        VerInfo.dwVersion = osvi.dwMajorVersion;
        VerInfo.sOSVersionLow.dwMajor = osvi.dwMajorVersion;
        VerInfo.sOSVersionLow.dwMinor = osvi.dwMinorVersion;
        VerInfo.sOSVersionHigh.dwMajor = osvi.dwMajorVersion;
        VerInfo.sOSVersionHigh.dwMinor = osvi.dwMinorVersion;
    }

    WinTrustData.pCatalog = &WinTrustCatalogInfo;
        
    ZeroMemory(&WinTrustCatalogInfo, sizeof(WINTRUST_CATALOG_INFO));
    WinTrustCatalogInfo.cbStruct = sizeof(WINTRUST_CATALOG_INFO);
    WinTrustCatalogInfo.pbCalculatedFileHash = lpHash;
    WinTrustCatalogInfo.cbCalculatedFileHash = cbHash;
#ifdef UNICODE
    WinTrustCatalogInfo.pcwszMemberTag = lpFileName;
#else
    MultiByteToWideChar(CP_ACP, 0, lpFileName, -1, UnicodeKey, MAX_PATH);
    WinTrustCatalogInfo.pcwszMemberTag = UnicodeKey;
#endif

    //
    // Now we try to find the file hash in the catalog list, via CryptCATAdminEnumCatalogFromHash
    //
    PrevCat = NULL;
    hCatInfo = s_dsd.CryptCATAdminEnumCatalogFromHash(s_dsd.hCatAdmin, lpHash, cbHash, 0, &PrevCat);

    //
    // We want to cycle through the matching catalogs until we find one that matches both hash and member tag
    //
    bRet = FALSE;
    while(hCatInfo && !bRet)
    {
        ZeroMemory(&CatInfo, sizeof(CATALOG_INFO));
        CatInfo.cbStruct = sizeof(CATALOG_INFO);
        if(s_dsd.CryptCATCatalogInfoFromContext(hCatInfo, &CatInfo, 0)) 
        {
            WinTrustCatalogInfo.pcwszCatalogFilePath = CatInfo.wszCatalogFile;

            // Now verify that the file is an actual member of the catalog.
            hRes = s_dsd.WinVerifyTrust(NULL, &guidSubSystemDriver, &WinTrustData);
            if (hRes == ERROR_SUCCESS)
            {
/*
#ifdef UNICODE
                GetFullPathName(CatInfo.wszCatalogFile, MAX_PATH, szBuffer, &lpFilePart);
#else
                WideCharToMultiByte(CP_ACP, 0, CatInfo.wszCatalogFile, -1, szBuffer, sizeof(szBuffer), NULL, NULL);
                GetFullPathName(szBuffer, MAX_PATH, szBuffer, &lpFilePart);
#endif
                lpFileNode->lpCatalog = (LPTSTR)MALLOC((lstrlen(lpFilePart) + 1) * sizeof(TCHAR));
                lstrcpy(lpFileNode->lpCatalog, lpFilePart);
*/
                if (VerInfo.pcSignerCertContext != NULL)
                {
                    s_dsd.CertFreeCertificateContext(VerInfo.pcSignerCertContext);
                    VerInfo.pcSignerCertContext = NULL;
                }
                bRet = TRUE;
            }
        }

        if (!bRet)
        {
            // The hash was in this catalog, but the file wasn't a member... so off to the next catalog
            PrevCat = hCatInfo;
            hCatInfo = s_dsd.CryptCATAdminEnumCatalogFromHash(s_dsd.hCatAdmin, lpHash, cbHash, 0, &PrevCat);
        }
    }

    if (!hCatInfo)
    {
        //
        // If it wasn't found in the catalogs, check if the file is individually signed.
        //
        bRet = VerifyIsFileSigned(lpFileName, (PDRIVER_VER_INFO) &VerInfo);
        if (bRet)
        {
            // If so, mark the file as being signed.
            bSigned = TRUE;
        }
    } 
    else 
    {
        // The file was verified in the catalogs, so mark it as signed and free the catalog context.
        bSigned = TRUE;
        s_dsd.CryptCATAdminReleaseCatalogContext(s_dsd.hCatAdmin, hCatInfo, 0);
    }
/*
    if (lpFileNode->bSigned)
    {
#ifdef UNICODE
        lpFileNode->lpVersion = MALLOC((lstrlen(VerInfo.wszVersion) + 1) * sizeof(TCHAR));
        lstrcpy(lpFileNode->lpVersion, VerInfo.wszVersion);
        lpFileNode->lpSignedBy = MALLOC((lstrlen(VerInfo.wszSignedBy) + 1) * sizeof(TCHAR));
        lstrcpy(lpFileNode->lpSignedBy, VerInfo.wszSignedBy);
#else
        WideCharToMultiByte(CP_ACP, 0, VerInfo.wszVersion, -1, szBuffer, sizeof(szBuffer), NULL, NULL);
        lpFileNode->lpVersion = (LPTSTR)MALLOC((lstrlen(szBuffer) + 1) * sizeof(TCHAR));
        lstrcpy(lpFileNode->lpVersion, szBuffer);
        WideCharToMultiByte(CP_ACP, 0, VerInfo.wszSignedBy, -1, szBuffer, sizeof(szBuffer), NULL, NULL);
        lpFileNode->lpSignedBy = (LPTSTR)MALLOC((lstrlen(szBuffer) + 1) * sizeof(TCHAR));
        lstrcpy(lpFileNode->lpSignedBy, szBuffer);
#endif
    }
*/
    return bSigned;
}


/****************************************************************************
 *
 *  VerifyIsFileSigned
 *
 ****************************************************************************/
BOOL VerifyIsFileSigned(LPTSTR pcszMatchFile, PDRIVER_VER_INFO lpVerInfo)
{
    HRESULT hRes;
    WINTRUST_DATA WinTrustData;
    WINTRUST_FILE_INFO WinTrustFile;
    GUID guidOSVerCheck = DRIVER_ACTION_VERIFY;
    GUID guidPublishedSoftware = WINTRUST_ACTION_GENERIC_VERIFY_V2;

    ZeroMemory(&WinTrustData, sizeof(WINTRUST_DATA));
    WinTrustData.cbStruct = sizeof(WINTRUST_DATA);
    WinTrustData.dwUIChoice = WTD_UI_NONE;
    WinTrustData.fdwRevocationChecks = WTD_REVOKE_NONE;
    WinTrustData.dwUnionChoice = WTD_CHOICE_FILE;
    WinTrustData.dwStateAction = WTD_STATEACTION_AUTO_CACHE;
    WinTrustData.pFile = &WinTrustFile;
    WinTrustData.pPolicyCallbackData = (LPVOID)lpVerInfo;

    ZeroMemory(lpVerInfo, sizeof(DRIVER_VER_INFO));
    lpVerInfo->cbStruct = sizeof(DRIVER_VER_INFO);

    ZeroMemory(&WinTrustFile, sizeof(WINTRUST_FILE_INFO));
    WinTrustFile.cbStruct = sizeof(WINTRUST_FILE_INFO);

#ifndef UNICODE
    WCHAR wszFileName[MAX_PATH];
    MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED, pcszMatchFile, -1, (LPWSTR)wszFileName, MAX_PATH);
    wszFileName[MAX_PATH-1] = 0;
    WinTrustFile.pcwszFilePath = wszFileName;
#else
    WinTrustFile.pcwszFilePath = pcszMatchFile;
#endif

    hRes = s_dsd.WinVerifyTrust(NULL, &guidOSVerCheck, &WinTrustData);
    if (hRes != ERROR_SUCCESS)
        hRes = s_dsd.WinVerifyTrust(NULL, &guidPublishedSoftware, &WinTrustData);

    if (lpVerInfo->pcSignerCertContext != NULL)
    {
        s_dsd.CertFreeCertificateContext(lpVerInfo->pcSignerCertContext);
        lpVerInfo->pcSignerCertContext = NULL;
    }

    return (hRes == ERROR_SUCCESS);
}


/****************************************************************************
 *
 *  DiagnoseDxFiles
 *
 ****************************************************************************/
VOID DiagnoseDxFiles(SysInfo* pSysInfo, FileInfo* pDxComponentsFileInfoFirst, 
                     FileInfo* pDxWinComponentsFileInfoFirst)
{
    FileInfo* pFileInfo;
    TCHAR szHighest[100];
    TCHAR szDXVersion[100];
    BOOL bNT = BIsPlatformNT();
    BOOL bWin2k = BIsWin2k();
    BOOL bIA64 = BIsIA64();
    FLOAT fDXVersion = 0.0f;
    BOOL bDX5 = FALSE;
    BOOL bDX6  = FALSE; // 6.x
    BOOL bDX60 = FALSE; // 6.0
    BOOL bDX61 = FALSE; // 6.1
    BOOL bDX7  = FALSE; // 7.x
    BOOL bDX70 = FALSE; // 7.0
    BOOL bDX71 = FALSE; // 7.1
    BOOL bDX8  = FALSE; // 8.x
    BOOL bDX80 = FALSE; // 8.0
    BOOL bDX81 = FALSE; // 8.1   
    BOOL b64BitDxDiag = BIsDxDiag64Bit();
    TCHAR szMissing[200];
    TCHAR szInWindows[200];
    TCHAR szOld[200];
    TCHAR szDebug[200];
    TCHAR szBeta[200];
    TCHAR szFmt[300];
    TCHAR szMessage[300];
    LONG lwNumInWindows;
    LONG lwNumMissing;
    LONG lwNumOld;
    LONG lwNumDebug;
    LONG lwNumBeta;
    TCHAR szListContinuer[30];
    TCHAR szListEtc[30];
    BOOL bVersionWarnings = TRUE;
    BOOL bWinsockWarning = FALSE;

    // Find highest version number in list
    szHighest[0] = '\0';
    for (pFileInfo = pDxComponentsFileInfoFirst; pFileInfo != NULL; 
        pFileInfo = pFileInfo->m_pFileInfoNext)
    {
        if (pFileInfo->m_bIgnoreVersionInfo)
            continue;

        // ddrawex.dll and dxapi.sys have wacky version numbers, so ignore them
        if (DXUtil_strcmpi(pFileInfo->m_szName, TEXT("ddrawex.dll")) == 0 ||
            DXUtil_strcmpi(pFileInfo->m_szName, TEXT("dxapi.sys")) == 0)
        {
            continue;
        }

        // Bug 18892: dplayx.dll and dpmodemx.dll can have wacky version numbers if
        // DPlay 6.0a is installed over DX 6.0
        if (DXUtil_strcmpi(pFileInfo->m_szName, TEXT("dplayx.dll")) == 0 &&
            DXUtil_strcmpi(pFileInfo->m_szVersion, TEXT("4.06.02.0363")) == 0)
        {
            continue;
        }
        if (DXUtil_strcmpi(pFileInfo->m_szName, TEXT("dpmodemx.dll")) == 0 &&
            DXUtil_strcmpi(pFileInfo->m_szVersion, TEXT("4.06.02.0356")) == 0)
        {
            continue;
        }

        // DPlay 6.1a: dplay files can have higher version numbers if
        // DPlay 6.1a is installed over DX 6.0 (or DX 6.1)
        if (DXUtil_strcmpi(pFileInfo->m_szVersion, TEXT("4.06.03.0518")) == 0 &&
            (DXUtil_strcmpi(pFileInfo->m_szName, TEXT("dplayx.dll")) == 0 ||
            DXUtil_strcmpi(pFileInfo->m_szName, TEXT("dpmodemx.dll")) == 0 ||
            DXUtil_strcmpi(pFileInfo->m_szName, TEXT("dpwsockx.dll")) == 0 ||
            DXUtil_strcmpi(pFileInfo->m_szName, TEXT("dplaysvr.exe")) == 0))
        {
            continue;
        }

        if (lstrcmp(pFileInfo->m_szVersion, pSysInfo->m_szDxDiagVersion) > 0)
        {
            // Bug 21291: Do not complain about file version newer than DxDiag itself
            continue;
        }

        if (lstrcmp(szHighest, pFileInfo->m_szVersion) < 0)
            lstrcpy(szHighest, pFileInfo->m_szVersion);
    }

    if (bNT)
        lstrcpy(szDXVersion, pSysInfo->m_szDirectXVersion);
    else
        lstrcpy(szDXVersion, szHighest);

    // Determine DX version 
    DWORD dwMajor;
    DWORD dwMinor;
    DWORD dwRevision;
    DWORD dwBuild;

    if( _stscanf(szDXVersion, TEXT("%d.%d.%d.%d"), &dwMajor, &dwMinor, &dwRevision, &dwBuild) != 4 )
    {
        dwMajor = 0;
        dwMinor = 0;
        dwRevision = 0;
        dwBuild = 0;
    }

    if (dwMinor < 6)
        bDX5 = TRUE;
    else if (dwMinor < 7 && dwRevision < 2)
        bDX60 = TRUE;
    else if (dwMinor < 7)
        bDX61 = TRUE;
    else if (dwMinor < 8 && dwRevision < 1)
        bDX70 = TRUE;
    else if (dwMinor < 8)
        bDX71 = TRUE;
    else if (dwMinor == 8 && dwRevision < 1)
        bDX80 = TRUE;
    else if (dwMinor >= 8)
        bDX81 = TRUE;

    // Calc DX ver
    fDXVersion = (float) dwMinor + (float) (dwRevision/10.0f);

    // Is this DX6?
    bDX6 = bDX60 || bDX61;

    // Is this DX7?
    bDX7 = bDX70 || bDX71;

    // Is this DX8?       
    bDX8 = bDX80 || bDX81;

    lwNumInWindows = 0;
    lwNumMissing = 0;
    lwNumOld = 0;
    lwNumDebug = 0;
    lwNumBeta = 0;
    LoadString(NULL, IDS_LISTCONTINUER, szListContinuer, 30);
    LoadString(NULL, IDS_LISTETC, szListEtc, 30);

    for (pFileInfo = pDxWinComponentsFileInfoFirst; pFileInfo != NULL; 
        pFileInfo = pFileInfo->m_pFileInfoNext)
    {
        pFileInfo->m_bProblem = TRUE;
        lwNumInWindows++;
        if (lwNumInWindows == 1)
        {
            lstrcpy(szInWindows, pFileInfo->m_szName);
        }
        else if (lwNumInWindows < 4)
        {
            lstrcat(szInWindows, szListContinuer);
            lstrcat(szInWindows, pFileInfo->m_szName);
        }
        else if (lwNumInWindows < 5)
        {
            lstrcat(szInWindows, szListEtc);
        }
    }

    for (pFileInfo = pDxComponentsFileInfoFirst; pFileInfo != NULL; 
        pFileInfo = pFileInfo->m_pFileInfoNext)
    {
        if (!pFileInfo->m_bExists && !pFileInfo->m_bOptional)
        {
            // A missing file is a problem unless it's optional, OR...
            // (on NT): it's optional on NT
            // (on IA64): it's not on IA64
            // (on IA64): we're running 32-bit dxdiag and its optional on WOW
            // if file hasn't shipped yet on this DX version
            // if file stopped shipping on or after this DX version
            if (bNT && pFileInfo->m_bOptionalOnNT)
            {
            }
            else if (bIA64 && pFileInfo->m_bNotIA64)
            {
            }
            else if (bIA64 && !b64BitDxDiag && pFileInfo->m_bOptionalOnWOW64)
            {
            }       
            else if (fDXVersion+0.05f < pFileInfo->m_fStartShipAt)
            {
            }       
            else if (fDXVersion+0.05f >= pFileInfo->m_fStopShipAt)
            {
            }       
            else
            {
                pFileInfo->m_bProblem = TRUE;
                LoadString(NULL, IDS_FILEMISSING, pFileInfo->m_szVersion, 50);
                lwNumMissing++;
                if (lwNumMissing == 1)
                {
                    lstrcpy(szMissing, pFileInfo->m_szName);
                }
                else if (lwNumMissing < 4)
                {
                    lstrcat(szMissing, szListContinuer);
                    lstrcat(szMissing, pFileInfo->m_szName);
                }
                else if (lwNumMissing < 5)
                {
                    lstrcat(szMissing, szListEtc);
                }
            }
        }

        if (!pFileInfo->m_bExists)
            continue;

        if( BIsWin95() ) 
        {
            if( DXUtil_strcmpi(pFileInfo->m_szName, TEXT("wsock32.dll")) )
            {
                if( IsBadWin95Winsock( pFileInfo ) )
                    bWinsockWarning = TRUE;
            }
        }

        // If DX6 or later, flag any dx5 only files as 
        // obsolete (needing to be deleted)
        // manbugs 16765: don't complain about these files, just don't list them
        if (!bDX5 && (pFileInfo->m_fStopShipAt == 6.0f))
        {
            pFileInfo->m_bProblem = TRUE;
            pFileInfo->m_bObsolete = TRUE;
            continue; // don't complain about these files for any other reason
        }

        if (bVersionWarnings && lstrcmp(szHighest, pFileInfo->m_szVersion) != 0)
        {
            if( pFileInfo->m_bIgnoreVersionInfo )
            {
                // Don't warn on files that have m_bIgnoreVersionInfo set
            }
            else if( bDX81 && ( _tcsstr(pFileInfo->m_szVersion, TEXT("4.08.00.0400")) != NULL ||
                                _tcsstr(pFileInfo->m_szVersion, TEXT("5.01.2258.0400")) != NULL ) )
            {
                // Bug 48732: If szHighest is 4.08.00.05xx and 
                // pFileInfo->m_szVersion is 4.08.00.0400 its OK 
            }
            else if( bWin2k && ( 
                     (DXUtil_strcmpi(pFileInfo->m_szName, TEXT("d3drm.dll")) == 0     && DXUtil_strcmpi(pFileInfo->m_szVersion, TEXT("5.00.2134.0001")) == 0) ||
                     (DXUtil_strcmpi(pFileInfo->m_szName, TEXT("d3dxof.dll")) == 0    && DXUtil_strcmpi(pFileInfo->m_szVersion, TEXT("5.00.2135.0001")) == 0) ||
                     (DXUtil_strcmpi(pFileInfo->m_szName, TEXT("d3dpmesh.dll")) == 0  && DXUtil_strcmpi(pFileInfo->m_szVersion, TEXT("5.00.2134.0001")) == 0) 
                               )
                   )
            {
            }
            else if( bDX71 && _tcsstr(pFileInfo->m_szVersion, TEXT("4.07.00.07")) != NULL )
            {
                // Bug 114753: If szHighest is 4.07.01.xxxx and 
                // pFileInfo->m_szVersion is 4.07.00.0700 its OK (for now). 
            }
            else if (!bNT && (bDX60 || bDX61) && CompareString(LOCALE_SYSTEM_DEFAULT, 0, 
                     pFileInfo->m_szVersion, 4, TEXT("4.05"), 4) == CSTR_EQUAL &&
                     ( DXUtil_strcmpi(pFileInfo->m_szName, TEXT("dsound.dll")) == 0 ||
                       DXUtil_strcmpi(pFileInfo->m_szName, TEXT("dsound.vxd")) == 0 ||
                       DXUtil_strcmpi(pFileInfo->m_szName, TEXT("dinput.dll")) == 0 ||
                       DXUtil_strcmpi(pFileInfo->m_szName, TEXT("dinput.vxd")) == 0 ||
                       DXUtil_strcmpi(pFileInfo->m_szName, TEXT("vjoyd.vxd")) == 0 ||
                       DXUtil_strcmpi(pFileInfo->m_szName, TEXT("msanalog.vxd")) == 0 ||
                       DXUtil_strcmpi(pFileInfo->m_szName, TEXT("joy.cpl")) == 0 ||
                       DXUtil_strcmpi(pFileInfo->m_szName, TEXT("gcdef.dll")) == 0 ||
                       DXUtil_strcmpi(pFileInfo->m_szName, TEXT("gchand.dll")) == 0))
            {
                // If Win9x DX6.x, dsound and dinput are allowed to be 4.05.xx.xxxx
                // CompareString is used rather than lstrcmp only because we
                // only want to look at the first four characters of the string

                // Don't report these as version problems
            }
            else if (!bNT && bDX7 && CompareString(LOCALE_SYSTEM_DEFAULT, 0, 
                pFileInfo->m_szVersion, 4, TEXT("4.05"), 4) == CSTR_EQUAL &&
                (DXUtil_strcmpi(pFileInfo->m_szName, TEXT("dinput.dll")) == 0 ||
                DXUtil_strcmpi(pFileInfo->m_szName, TEXT("dinput.vxd")) == 0 ||
                DXUtil_strcmpi(pFileInfo->m_szName, TEXT("joy.cpl")) == 0 ||
                DXUtil_strcmpi(pFileInfo->m_szName, TEXT("gchand.dll")) == 0 ||
                DXUtil_strcmpi(pFileInfo->m_szName, TEXT("gcdef.dll")) == 0 ||
                DXUtil_strcmpi(pFileInfo->m_szName, TEXT("vjoyd.vxd")) == 0 ||
                DXUtil_strcmpi(pFileInfo->m_szName, TEXT("msanalog.vxd")) == 0))
            {
                // 21470: On DX7, these input files still exist on Win95,
                // and they stay at DX5 level.
            }
            else if ( !bNT && 
                (DXUtil_strcmpi(pFileInfo->m_szName, TEXT("msjstick.drv")) == 0  && DXUtil_strcmpi(pFileInfo->m_szVersion, TEXT("4.00.00.0950")) == 0) ||
                (DXUtil_strcmpi(pFileInfo->m_szName, TEXT("vjoyd.vxd")) == 0     && DXUtil_strcmpi(pFileInfo->m_szVersion, TEXT("4.05.00.0155")) == 0) 
                    )
            {
                // 34687: These stays at the dx5 level.
            }
            else if (!bNT && (DXUtil_strcmpi(pFileInfo->m_szName, TEXT("ddrawex.dll")) == 0 ||
                DXUtil_strcmpi(pFileInfo->m_szName, TEXT("dxapi.sys")) == 0))
            {
                // Ignore ddrawex.dll and dxapi.sys on Win9x because they have weird version numbers:
            }
            else if (DXUtil_strcmpi(pFileInfo->m_szName, TEXT("dplayx.dll")) == 0 &&
                DXUtil_strcmpi(pFileInfo->m_szVersion, TEXT("4.06.02.0363")) == 0)
            {
                // Bug 18892: work around DPlay 6.0a
            }
            else if (DXUtil_strcmpi(pFileInfo->m_szName, TEXT("dpmodemx.dll")) == 0 &&
                DXUtil_strcmpi(pFileInfo->m_szVersion, TEXT("4.06.02.0356")) == 0)
            {
                // Bug 18892: work around DPlay 6.0a
            }
            else if (DXUtil_strcmpi(pFileInfo->m_szVersion, TEXT("4.06.03.0518")) == 0 &&
                (DXUtil_strcmpi(pFileInfo->m_szName, TEXT("dplayx.dll")) == 0 ||
                DXUtil_strcmpi(pFileInfo->m_szName, TEXT("dpmodemx.dll")) == 0 ||
                DXUtil_strcmpi(pFileInfo->m_szName, TEXT("dpwsockx.dll")) == 0 ||
                DXUtil_strcmpi(pFileInfo->m_szName, TEXT("dplaysvr.exe")) == 0))
            {
                // DPlay 6.1a: dplay files can have higher version numbers if
                // DPlay 6.1a is installed over DX 6.0 (or DX 6.1)
            }
            else if (DXUtil_strcmpi(pFileInfo->m_szName, TEXT("dxsetup.exe")) == 0 ||
                DXUtil_strcmpi(pFileInfo->m_szName, TEXT("dsetup.dll")) == 0 ||
                DXUtil_strcmpi(pFileInfo->m_szName, TEXT("dsetup16.dll")) == 0 ||
                DXUtil_strcmpi(pFileInfo->m_szName, TEXT("dsetup32.dll")) == 0 ||
                DXUtil_strcmpi(pFileInfo->m_szName, TEXT("directx.cpl")) == 0)
            {
                // Bug 18540: Don't complain if dsetup/cpl files are out of date because
                // some updates (OSR) don't update the setup/cpl files which may exist from
                // another (SDK) installation
            }
            else if (!bNT && DXUtil_strcmpi(pFileInfo->m_szVersion, TEXT("4.06.02.0436")) == 0 &&
                (DXUtil_strcmpi(pFileInfo->m_szName, TEXT("d3drm.dll")) == 0 ||
                DXUtil_strcmpi(pFileInfo->m_szName, TEXT("d3dxof.dll")) == 0 ||
                DXUtil_strcmpi(pFileInfo->m_szName, TEXT("d3dpmesh.dll")) == 0 ||
                DXUtil_strcmpi(pFileInfo->m_szName, TEXT("dplayx.dll")) == 0 ||
                DXUtil_strcmpi(pFileInfo->m_szName, TEXT("dpmodemx.dll")) == 0 ||
                DXUtil_strcmpi(pFileInfo->m_szName, TEXT("dpwsockx.dll")) == 0 ||
                DXUtil_strcmpi(pFileInfo->m_szName, TEXT("dplaysvr.exe")) == 0))
            {
                // On DX 6.1a, the RM and DPlay files stay at 4.06.02.0436.  No problemo.
            }
            else if (lstrcmp(pFileInfo->m_szVersion, pSysInfo->m_szDxDiagVersion) > 0)
            {
                // Bug 21291: Do not complain about file version newer than DxDiag itself
            }
            else
            {
                pFileInfo->m_bProblem = TRUE;
                lwNumOld++;
                if (lwNumOld == 1)
                {
                    lstrcpy(szOld, pFileInfo->m_szName);
                }
                else if (lwNumOld < 4)
                {
                    lstrcat(szOld, szListContinuer);
                    lstrcat(szOld, pFileInfo->m_szName);
                }
                else if (lwNumOld < 5)
                {
                    lstrcat(szOld, szListEtc);
                }
            }
        } // end if (bVersionWarnings && lstrcmp(szHighest, pFileInfo->m_szVersion) != 0)

        if (pFileInfo->m_bBeta && !pFileInfo->m_bIgnoreBeta)
        {
            pFileInfo->m_bProblem = TRUE;
            lwNumBeta++;
            if (lwNumBeta == 1)
            {
                lstrcpy(szBeta, pFileInfo->m_szName);
            }
            else if (lwNumBeta < 4)
            {
                lstrcat(szBeta, szListContinuer);
                lstrcat(szBeta, pFileInfo->m_szName);
            }
            else if (lwNumBeta < 5)
            {
                lstrcat(szBeta, szListEtc);
            }
        }

        if (pFileInfo->m_bDebug && !pFileInfo->m_bIgnoreDebug)
        {
            pFileInfo->m_bProblem = TRUE;
            lwNumDebug++;
            if (lwNumDebug == 1)
            {
                lstrcpy(szDebug, pFileInfo->m_szName);
            }
            else if (lwNumDebug < 4)
            {
                lstrcat(szDebug, szListContinuer);
                lstrcat(szDebug, pFileInfo->m_szName);
            }
            else if (lwNumDebug < 5)
            {
                lstrcat(szDebug, szListEtc);
            }
        }
    }

    BOOL bShouldReinstall = FALSE;

    _tcscpy(pSysInfo->m_szDXFileNotes, TEXT("") );
    _tcscpy(pSysInfo->m_szDXFileNotesEnglish, TEXT("") );

    if (lwNumInWindows > 0)
    {
        if (lwNumInWindows == 1)
            LoadString(NULL, IDS_INWINDOWSFMT1, szFmt, 300);
        else
            LoadString(NULL, IDS_INWINDOWSFMT2, szFmt, 300);
        wsprintf(szMessage, szFmt, szInWindows);
        _tcscat(pSysInfo->m_szDXFileNotes, szMessage);

        if (lwNumInWindows == 1)
            LoadString(NULL, IDS_INWINDOWSFMT1_ENGLISH, szFmt, 300);
        else
            LoadString(NULL, IDS_INWINDOWSFMT2_ENGLISH, szFmt, 300);
        wsprintf(szMessage, szFmt, szInWindows);
        _tcscat(pSysInfo->m_szDXFileNotesEnglish, szMessage);
    }

    if (lwNumMissing > 0)
    {
        if (lwNumMissing == 1)
            LoadString(NULL, IDS_MISSINGFMT1, szFmt, 300);
        else
            LoadString(NULL, IDS_MISSINGFMT2, szFmt, 300);
        wsprintf(szMessage, szFmt, szMissing);
        _tcscat(pSysInfo->m_szDXFileNotes, szMessage);

        if (lwNumMissing == 1)
            LoadString(NULL, IDS_MISSINGFMT1_ENGLISH, szFmt, 300);
        else
            LoadString(NULL, IDS_MISSINGFMT2_ENGLISH, szFmt, 300);
        wsprintf(szMessage, szFmt, szMissing);
        _tcscat(pSysInfo->m_szDXFileNotesEnglish, szMessage);

        bShouldReinstall = TRUE;
    }

    if (lwNumOld > 0)
    {
        if (lwNumOld == 1)
            LoadString(NULL, IDS_OLDFMT1, szFmt, 300);
        else
            LoadString(NULL, IDS_OLDFMT2, szFmt, 300);
        wsprintf(szMessage, szFmt, szOld);
        _tcscat(pSysInfo->m_szDXFileNotes, szMessage);

        if (lwNumOld == 1)
            LoadString(NULL, IDS_OLDFMT1_ENGLISH, szFmt, 300);
        else
            LoadString(NULL, IDS_OLDFMT2_ENGLISH, szFmt, 300);
        wsprintf(szMessage, szFmt, szOld);
        _tcscat(pSysInfo->m_szDXFileNotesEnglish, szMessage);

        bShouldReinstall = TRUE;
    }

    if (lwNumBeta > 0)
    {
        if (lwNumBeta == 1)
            LoadString(NULL, IDS_BETAFMT1, szFmt, 300);
        else
            LoadString(NULL, IDS_BETAFMT2, szFmt, 300);
        wsprintf(szMessage, szFmt, szBeta);
        _tcscat(pSysInfo->m_szDXFileNotes, szMessage);

        if (lwNumBeta == 1)
            LoadString(NULL, IDS_BETAFMT1_ENGLISH, szFmt, 300);
        else
            LoadString(NULL, IDS_BETAFMT2_ENGLISH, szFmt, 300);
        wsprintf(szMessage, szFmt, szBeta);
        _tcscat(pSysInfo->m_szDXFileNotesEnglish, szMessage);

        bShouldReinstall = TRUE;
    }

    if (lwNumDebug > 0)
    {
        if (lwNumDebug == 1)
            LoadString(NULL, IDS_DEBUGFMT1, szFmt, 300);
        else
            LoadString(NULL, IDS_DEBUGFMT2, szFmt, 300);
        wsprintf(szMessage, szFmt, szDebug);
        _tcscat( pSysInfo->m_szDXFileNotes, szMessage);

        if (lwNumDebug == 1)
            LoadString(NULL, IDS_DEBUGFMT1_ENGLISH, szFmt, 300);
        else
            LoadString(NULL, IDS_DEBUGFMT2_ENGLISH, szFmt, 300);
        wsprintf(szMessage, szFmt, szDebug);
        _tcscat( pSysInfo->m_szDXFileNotesEnglish, szMessage);

        //bShouldReinstall = TRUE;
    }

    if( bWinsockWarning )
    {
        LoadString(NULL, IDS_WINSOCK_WARN, szMessage, 300);
        _tcscat( pSysInfo->m_szDXFileNotes, szMessage);

        LoadString(NULL, IDS_WINSOCK_WARN_ENGLISH, szMessage, 300);
        _tcscat( pSysInfo->m_szDXFileNotesEnglish, szMessage);
    }

    if( bShouldReinstall )
    {
        BOOL bTellUser = FALSE;

        // Figure out if the user can install DirectX
        if( BIsPlatform9x() )
            bTellUser = TRUE;
        else if( BIsWin2k() && bDX8 )
            bTellUser = TRUE;

        if( bTellUser )
        {
            LoadString(NULL, IDS_REINSTALL_DX, szMessage, 300);
            _tcscat( pSysInfo->m_szDXFileNotes, szMessage);

            LoadString(NULL, IDS_REINSTALL_DX_ENGLISH, szMessage, 300);
            _tcscat( pSysInfo->m_szDXFileNotesEnglish, szMessage);
        }
    }

    if (lwNumMissing == 0 && lwNumOld == 0 && 
        lwNumBeta == 0 && lwNumDebug == 0 && lwNumInWindows == 0)
    {        
        LoadString(NULL, IDS_NOPROBLEM, szMessage, 300);
        _tcscat(pSysInfo->m_szDXFileNotes, szMessage);

        LoadString(NULL, IDS_NOPROBLEM_ENGLISH, szMessage, 300);
        _tcscat(pSysInfo->m_szDXFileNotesEnglish, szMessage);
    }
}


/****************************************************************************
 *
 *  IsBadWin95Winsock
 *
 ****************************************************************************/
BOOL IsBadWin95Winsock( FileInfo* pFileInfo )
{
typedef int (PASCAL* LPWSASTARTUP)(IN WORD wVersionRequired, OUT LPWSADATA lpWSAData);
typedef int (PASCAL* LPWSACLEANUP)(void);

    BOOL         bReturn = FALSE;
    TCHAR        szPath[MAX_PATH];
    HINSTANCE    hInstWSock;
    LPWSASTARTUP pWSAStartup = NULL;
    LPWSACLEANUP pWSACleanup = NULL;

    GetSystemDirectory(szPath, MAX_PATH);
    lstrcat(szPath, TEXT("\\wsock32.dll"));
    hInstWSock = LoadLibrary(szPath);
    if (hInstWSock != NULL)
    {
        pWSAStartup = (LPWSASTARTUP)GetProcAddress(hInstWSock, "WSAStartup");
        pWSACleanup = (LPWSACLEANUP)GetProcAddress(hInstWSock, "WSACleanup");
        if (pWSAStartup != NULL && pWSACleanup != NULL)
        {    
            WORD wVersionRequested;
            WSADATA wsaData;
            int err;
            wVersionRequested = MAKEWORD( 2, 2 );

            err = pWSAStartup( wVersionRequested, &wsaData );
            if ( err == 0 ) 
            {
                if ( LOBYTE( wsaData.wVersion ) == 2 && 
                     HIBYTE( wsaData.wVersion ) == 2 ) 
                {
                    FILETIME fileTimeGoodWinsock;
                    SYSTEMTIME systemTimeGoodWinsock;
                    ULARGE_INTEGER ulGoodWinsock;
                    ULARGE_INTEGER ulCurrentWinsock;

                    ZeroMemory( &systemTimeGoodWinsock, sizeof(SYSTEMTIME) );
                    systemTimeGoodWinsock.wYear   = 1998;
                    systemTimeGoodWinsock.wMonth  = 2;
                    systemTimeGoodWinsock.wDay    = 6;
                    systemTimeGoodWinsock.wHour   = 14;
                    systemTimeGoodWinsock.wMinute = 18;
                    systemTimeGoodWinsock.wSecond = 00;

                    SystemTimeToFileTime( &systemTimeGoodWinsock, &fileTimeGoodWinsock );

                    ulCurrentWinsock.LowPart = pFileInfo->m_FileTime.dwLowDateTime;
                    ulCurrentWinsock.HighPart = pFileInfo->m_FileTime.dwHighDateTime;
                    ulGoodWinsock.LowPart = fileTimeGoodWinsock.dwLowDateTime;
                    ulGoodWinsock.HighPart = fileTimeGoodWinsock.dwHighDateTime;

                    if( ulCurrentWinsock.QuadPart < ulGoodWinsock.QuadPart )
                    {
                        bReturn = TRUE;
                    }
                }

                pWSACleanup();
            }
        }
    }

    FreeLibrary(hInstWSock);

    return bReturn;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\directx\dxdiag\inptinfo.cpp ===
/****************************************************************************
 *
 *    File: inptinfo.cpp
 * Project: DxDiag (DirectX Diagnostic Tool)
 *  Author: Mike Anderson (manders@microsoft.com)
 * Purpose: Gather information about input devices on this machine
 *
 * (C) Copyright 1998 Microsoft Corp.  All rights reserved.
 *
 ****************************************************************************/

#define DIRECTINPUT_VERSION 0x0800

#include <tchar.h>
#include <Windows.h>
#include <regstr.h>
#include <mmsystem.h>
#include <stdio.h>
#include <hidclass.h>
#include <setupapi.h>
#include <cfgmgr32.h>
#include <dinput.h>
#include "mmddk.h"
#include "reginfo.h"
#include "sysinfo.h" // for BIsPlatformNT
#include "inptinfo.h"
#include "fileinfo.h"
#include "resource.h"

static HRESULT Get9xInputDeviceInfo(InputInfo* pInputInfo);
static HRESULT GetNTInputDeviceInfo(InputInfo* pInputInfo);
static VOID GetJoystickTypeDesc(DWORD dwType, TCHAR* pszDesc);
static HRESULT CheckRegistry(InputInfo* pInputInfo, RegError** ppRegErrorFirst);


/****************************************************************************
 *
 *  GetInputInfo
 *
 ****************************************************************************/
HRESULT GetInputInfo(InputInfo** ppInputInfo)
{
    HRESULT hr;

    *ppInputInfo = new InputInfo;
    if (*ppInputInfo == NULL)
        return E_OUTOFMEMORY;
    ZeroMemory(*ppInputInfo, sizeof(InputInfo));

    (*ppInputInfo)->m_bNT = BIsPlatformNT();
    if ((*ppInputInfo)->m_bNT)
    {
        if (FAILED(hr = GetNTInputDeviceInfo(*ppInputInfo)))
            return hr;
    }
    else
    {
        if (FAILED(hr = Get9xInputDeviceInfo(*ppInputInfo)))
            return hr;
    }
    if (FAILED(hr = CheckRegistry(*ppInputInfo, &(*ppInputInfo)->m_pRegErrorFirst)))
        return hr;
    return S_OK;
}


// Have to do the LoadLibrary/GetProcAddress thing for dinput.dll and setupapi.dll:
typedef HRESULT (WINAPI* PfnDirectInputCreateA)(HINSTANCE hinst, DWORD dwVersion, LPDIRECTINPUTA *ppDI, LPUNKNOWN punkOuter);
typedef HRESULT (WINAPI* PfnDirectInputCreateW)(HINSTANCE hinst, DWORD dwVersion, LPDIRECTINPUTW *ppDI, LPUNKNOWN punkOuter);

typedef WINSETUPAPI HDEVINFO (WINAPI* PfnSetupDiGetClassDevsA)(IN CONST GUID *ClassGuid, IN PCSTR Enumerator, IN HWND hwndParent, IN DWORD Flags);
typedef WINSETUPAPI HDEVINFO (WINAPI* PfnSetupDiGetClassDevsW)(IN CONST GUID *ClassGuid, IN PCWSTR Enumerator, IN HWND hwndParent, IN DWORD Flags);
typedef WINSETUPAPI BOOL (WINAPI* PfnSetupDiEnumDeviceInterfaces)(IN HDEVINFO DeviceInfoSet, IN PSP_DEVINFO_DATA DeviceInfoData, IN CONST GUID *InterfaceClassGuid, IN DWORD MemberIndex, OUT PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData);
typedef WINSETUPAPI BOOL (WINAPI* PfnSetupDiGetDeviceInterfaceDetailA)(IN HDEVINFO DeviceInfoSet, IN PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData, OUT PSP_DEVICE_INTERFACE_DETAIL_DATA_A DeviceInterfaceDetailData, IN DWORD DeviceInterfaceDetailDataSize, OUT PDWORD RequiredSize, OUT PSP_DEVINFO_DATA DeviceInfoData);
typedef WINSETUPAPI BOOL (WINAPI* PfnSetupDiGetDeviceInterfaceDetailW)(IN HDEVINFO DeviceInfoSet, IN PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData, OUT PSP_DEVICE_INTERFACE_DETAIL_DATA_W DeviceInterfaceDetailData, IN DWORD DeviceInterfaceDetailDataSize, OUT PDWORD RequiredSize, OUT PSP_DEVINFO_DATA DeviceInfoData);
typedef WINSETUPAPI BOOL (WINAPI* PfnSetupDiDestroyDeviceInfoList)(IN HDEVINFO DeviceInfoSet);
typedef CMAPI CONFIGRET (WINAPI* PfnCM_Get_Parent)(OUT PDEVINST pdnDevInst, IN DEVINST dnDevInst, IN ULONG ulFlags);
typedef CMAPI CONFIGRET (WINAPI* PfnCM_Get_DevNode_Status)(OUT PULONG pulStatus, OUT PULONG pulProblemNumber, IN DEVINST dnDevInst, IN ULONG ulFlags);
typedef CMAPI CONFIGRET (WINAPI* PfnCM_Get_DevNode_Registry_PropertyW)(IN DEVINST dnDevInst, IN  ULONG ulProperty, OUT PULONG pulRegDataType,   OPTIONAL OUT PVOID Buffer, OPTIONAL IN OUT PULONG pulLength, IN ULONG ulFlags);
typedef CMAPI CONFIGRET (WINAPI* PfnCM_Get_DevNode_Registry_PropertyA)(IN DEVINST dnDevInst, IN  ULONG ulProperty, OUT PULONG pulRegDataType,   OPTIONAL OUT PVOID Buffer, OPTIONAL IN OUT PULONG pulLength, IN ULONG ulFlags);

/****************************************************************************
 *
 *  GetNTInputDeviceInfo
 *
 ****************************************************************************/
HRESULT GetNTInputDeviceInfo(InputInfo* pInputInfo)
{
    HINSTANCE hInstDInput = NULL;
    HINSTANCE hInstSetupApi = NULL;
    LPDIRECTINPUT pDI = NULL;
    GUID guidHid;
    HDEVINFO hdev = NULL;
    SP_DEVICE_INTERFACE_DETAIL_DATA* pdidd;
    InputDeviceInfoNT* pInputDeviceInfoNTNew;
    PfnCM_Get_Parent FnCM_Get_Parent = NULL;
    PfnCM_Get_DevNode_Status FnCM_Get_DevNode_Status = NULL;
    PfnSetupDiEnumDeviceInterfaces FnSetupDiEnumDeviceInterfaces = NULL;
    PfnSetupDiDestroyDeviceInfoList FnSetupDiDestroyDeviceInfoList = NULL;
#ifdef UNICODE
    PfnDirectInputCreateW FnDirectInputCreate = NULL;
    PfnCM_Get_DevNode_Registry_PropertyW FnCM_Get_DevNode_Registry_Property = NULL;
    PfnSetupDiGetClassDevsW FnSetupDiGetClassDevs = NULL;
    PfnSetupDiGetDeviceInterfaceDetailW FnSetupDiGetDeviceInterfaceDetail = NULL;
#else
    PfnDirectInputCreateA FnDirectInputCreate = NULL;
    PfnCM_Get_DevNode_Registry_PropertyA FnCM_Get_DevNode_Registry_Property = NULL;
    PfnSetupDiGetClassDevsA FnSetupDiGetClassDevs = NULL;
    PfnSetupDiGetDeviceInterfaceDetailA FnSetupDiGetDeviceInterfaceDetail = NULL;
#endif

    // Apparently one must initialize DInput before enumerating HID devices
    hInstDInput = LoadLibrary(TEXT("dinput.dll"));
    if (hInstDInput == NULL)
        goto LEnd;
#ifdef UNICODE
    FnDirectInputCreate = (PfnDirectInputCreateW)GetProcAddress(hInstDInput, "DirectInputCreateW");
    if (FnDirectInputCreate == NULL)
        goto LEnd;
#else
    FnDirectInputCreate = (PfnDirectInputCreateA)GetProcAddress(hInstDInput, "DirectInputCreateA");
    if (FnDirectInputCreate == NULL)
        goto LEnd;
#endif
    if (SUCCEEDED(FnDirectInputCreate(NULL, 0x0300, &pDI, NULL)))
        pDI->Release(); // immediately drop DI interface; we don't actually use it

    hInstSetupApi = LoadLibrary(TEXT("setupapi.dll"));
    if (hInstSetupApi == NULL)
        goto LEnd;
    FnCM_Get_Parent = (PfnCM_Get_Parent)GetProcAddress(hInstSetupApi, "CM_Get_Parent");
    if (FnCM_Get_Parent == NULL)
        goto LEnd;
    FnCM_Get_DevNode_Status = (PfnCM_Get_DevNode_Status)GetProcAddress(hInstSetupApi, "CM_Get_DevNode_Status");
    if (FnCM_Get_DevNode_Status == NULL)
        goto LEnd;
    FnSetupDiEnumDeviceInterfaces = (PfnSetupDiEnumDeviceInterfaces)GetProcAddress(hInstSetupApi, "SetupDiEnumDeviceInterfaces");
    if (FnSetupDiEnumDeviceInterfaces == NULL)
        goto LEnd;
    FnSetupDiDestroyDeviceInfoList = (PfnSetupDiDestroyDeviceInfoList)GetProcAddress(hInstSetupApi, "SetupDiDestroyDeviceInfoList");
    if (FnSetupDiDestroyDeviceInfoList == NULL)
        goto LEnd;
#ifdef UNICODE
    FnCM_Get_DevNode_Registry_Property = (PfnCM_Get_DevNode_Registry_PropertyW)GetProcAddress(hInstSetupApi, "CM_Get_DevNode_Registry_PropertyW");
    if (FnCM_Get_DevNode_Registry_Property == NULL)
        goto LEnd;
    FnSetupDiGetClassDevs = (PfnSetupDiGetClassDevsW)GetProcAddress(hInstSetupApi, "SetupDiGetClassDevsW");
    if (FnSetupDiGetClassDevs == NULL)
        goto LEnd;
    FnSetupDiGetDeviceInterfaceDetail = (PfnSetupDiGetDeviceInterfaceDetailW)GetProcAddress(hInstSetupApi, "SetupDiGetDeviceInterfaceDetailW");
    if (FnSetupDiGetDeviceInterfaceDetail == NULL)
        goto LEnd;
#else
    FnCM_Get_DevNode_Registry_Property = (PfnCM_Get_DevNode_Registry_PropertyA)GetProcAddress(hInstSetupApi, "CM_Get_DevNode_Registry_PropertyA");
    if (FnCM_Get_DevNode_Registry_Property == NULL)
        goto LEnd;
    FnSetupDiGetClassDevs = (PfnSetupDiGetClassDevsA)GetProcAddress(hInstSetupApi, "SetupDiGetClassDevsA");
    if (FnSetupDiGetClassDevs == NULL)
        goto LEnd;
    FnSetupDiGetDeviceInterfaceDetail = (PfnSetupDiGetDeviceInterfaceDetailA)GetProcAddress(hInstSetupApi, "SetupDiGetDeviceInterfaceDetailA");
    if (FnSetupDiGetDeviceInterfaceDetail == NULL)
        goto LEnd;
#endif

    guidHid = GUID_CLASS_INPUT;
    hdev = FnSetupDiGetClassDevs(&guidHid, 0, 0, DIGCF_PRESENT | DIGCF_DEVICEINTERFACE);
    if (hdev == INVALID_HANDLE_VALUE || hdev == NULL)
        return E_FAIL;

    int idev;
    //  There is no way to query the number of devices.
    //  You just have to keep incrementing until you run out.
    //  To avoid infinite looping on internal errors, break on any
    //  error once we have tried more than chdiMax devices, since that's the most
    //  HID will ever give us.  64 is a resonable value for chidMax.  It is the 
    //  max allowed USB/HID devices.  
    for (idev = 0; idev < 64/*chdiMax*/; idev++)
    {
        SP_DEVICE_INTERFACE_DATA did;
        did.cbSize = sizeof(did);
        if (!FnSetupDiEnumDeviceInterfaces(hdev, 0, &guidHid, idev, &did))
        {
            if(GetLastError() == ERROR_NO_MORE_ITEMS)
                break;
            else
                continue;
        }

        /*
         *  Ask for the required size then allocate it then fill it.
         *
         *  Note that we don't need to free the memory on the failure
         *  path; our caller will do the necessary memory freeing.
         *
         *  Sigh.  Windows NT and Windows 98 implement
         *  SetupDiGetDeviceInterfaceDetail differently if you are
         *  querying for the buffer size.
         *
         *  Windows 98 returns FALSE, and GetLastError() returns
         *  ERROR_INSUFFICIENT_BUFFER.
         *
         *  Windows NT returns TRUE.
         *
         *  So we allow the cases either where the call succeeds or
         *  the call fails with ERROR_INSUFFICIENT_BUFFER.
         */
        SP_DEVINFO_DATA dinf;
        DWORD cbRequired;
        if (FnSetupDiGetDeviceInterfaceDetail(hdev, &did, 0, 0, &cbRequired, 0) ||
           GetLastError() == ERROR_INSUFFICIENT_BUFFER)
        {
            pdidd = (SP_DEVICE_INTERFACE_DETAIL_DATA*)(new BYTE[cbRequired]);
            if (pdidd == NULL)
                continue;

            ZeroMemory(pdidd, cbRequired);
            pdidd->cbSize = sizeof(SP_DEVICE_INTERFACE_DETAIL_DATA);

            dinf.cbSize = sizeof(dinf);

            if (!FnSetupDiGetDeviceInterfaceDetail(hdev, &did, pdidd, cbRequired, &cbRequired, &dinf))
            {
                delete[] pdidd;
                continue;
            }
            delete[] pdidd;

            DEVINST dinst;
            if (CR_SUCCESS != FnCM_Get_Parent(&dinst, dinf.DevInst, 0))
                continue;

            pInputDeviceInfoNTNew = new InputDeviceInfoNT;
            if (pInputDeviceInfoNTNew == NULL)
                return E_OUTOFMEMORY;
            ZeroMemory(pInputDeviceInfoNTNew, sizeof(InputDeviceInfoNT));
            if (pInputInfo->m_pInputDeviceInfoNTFirst == NULL)
            {
                pInputInfo->m_pInputDeviceInfoNTFirst = pInputDeviceInfoNTNew;
            }
            else
            {
                InputDeviceInfoNT* pInputDeviceInfoNT;
                for (pInputDeviceInfoNT = pInputInfo->m_pInputDeviceInfoNTFirst; 
                    pInputDeviceInfoNT->m_pInputDeviceInfoNTNext != NULL; 
                    pInputDeviceInfoNT = pInputDeviceInfoNT->m_pInputDeviceInfoNTNext)
                    {
                    }
                pInputDeviceInfoNT->m_pInputDeviceInfoNTNext = pInputDeviceInfoNTNew;
            }
            CONFIGRET cr;
            TCHAR sz[200];
            ULONG ulLength;

            ulLength = 200;
            cr = FnCM_Get_DevNode_Registry_Property(dinst, CM_DRP_DEVICEDESC, 
                NULL, (BYTE*)pInputDeviceInfoNTNew->m_szName, &ulLength, NULL);

            // Friendly name is preferably to device desc, but is often (always?) missing
            ulLength = 200;
            cr = FnCM_Get_DevNode_Registry_Property(dinst, CM_DRP_FRIENDLYNAME, 
                NULL, (BYTE*)sz, &ulLength, NULL);
            if (cr == CR_SUCCESS)
                lstrcpy(pInputDeviceInfoNTNew->m_szName, sz);

            ulLength = 200;
            cr = FnCM_Get_DevNode_Registry_Property(dinst, CM_DRP_MFG, 
                NULL, (BYTE*)pInputDeviceInfoNTNew->m_szProvider, &ulLength, NULL);

            ulLength = 200;
            cr = FnCM_Get_DevNode_Registry_Property(dinst, CM_DRP_HARDWAREID, 
                NULL, (BYTE*)pInputDeviceInfoNTNew->m_szId, &ulLength, NULL);

            cr = FnCM_Get_DevNode_Status(&pInputDeviceInfoNTNew->m_dwStatus, &pInputDeviceInfoNTNew->m_dwProblem, dinst, 0);

            
            DEVINST dinstPort;
            if (CR_SUCCESS != FnCM_Get_Parent(&dinstPort, dinst, 0))
                continue;

            ulLength = 200;
            cr = FnCM_Get_DevNode_Registry_Property(dinstPort, CM_DRP_DEVICEDESC, 
                NULL, (BYTE*)pInputDeviceInfoNTNew->m_szPortName, &ulLength, NULL);

            // Friendly name is preferably to device desc, but is often (always?) missing
            ulLength = 200;
            cr = FnCM_Get_DevNode_Registry_Property(dinstPort, CM_DRP_FRIENDLYNAME, 
                NULL, (BYTE*)sz, &ulLength, NULL);
            if (cr == CR_SUCCESS)
                lstrcpy(pInputDeviceInfoNTNew->m_szPortName, sz);

            ulLength = 200;
            cr = FnCM_Get_DevNode_Registry_Property(dinstPort, CM_DRP_MFG, 
                NULL, (BYTE*)pInputDeviceInfoNTNew->m_szPortProvider, &ulLength, NULL);

            ulLength = 200;
            cr = FnCM_Get_DevNode_Registry_Property(dinstPort, CM_DRP_HARDWAREID, 
                NULL, (BYTE*)pInputDeviceInfoNTNew->m_szPortId, &ulLength, NULL);

            cr = FnCM_Get_DevNode_Status(&pInputDeviceInfoNTNew->m_dwPortStatus, &pInputDeviceInfoNTNew->m_dwPortProblem, dinstPort, 0);
        }
    }

LEnd:
    if (hdev != NULL)
        FnSetupDiDestroyDeviceInfoList(hdev);
    if (hInstSetupApi != NULL)
        FreeLibrary(hInstSetupApi);
    if (hInstDInput != NULL)
        FreeLibrary(hInstDInput);

    return S_OK;
}


/****************************************************************************
 *
 *  Get9xInputDeviceInfo
 *
 ****************************************************************************/
HRESULT Get9xInputDeviceInfo(InputInfo* pInputInfo)
{
    DWORD dwDevNum;
    JOYCAPS jc;
    HKEY hkBase;
    HKEY hkDrv;
    HKEY hkData;
    JOYREGHWCONFIG jhwc;
    DWORD dwBufferLen;
    INT i;
    TCHAR szKey[256];
    TCHAR szOEMKey[256];
    HKEY hkOEMBase;
    HKEY hkOEMData;
    TCHAR szOEMName[256];
    TCHAR szOEMCallout[256];
    InputDeviceInfo* pInputDeviceInfoNew;
    InputDeviceInfo* pInputDeviceInfo;
    TCHAR szPath[MAX_PATH];
    TCHAR sz[200];

    dwDevNum = (DWORD)-1;
    if (JOYERR_NOERROR == joyGetDevCaps(dwDevNum, &jc, sizeof jc))
    {
        if ((ERROR_SUCCESS == RegOpenKeyEx(HKEY_LOCAL_MACHINE, REGSTR_PATH_JOYCONFIG, 0, KEY_READ, &hkBase))
            && (ERROR_SUCCESS == RegOpenKeyEx(hkBase, jc.szRegKey, 0, KEY_READ, &hkDrv))
            && (ERROR_SUCCESS == RegOpenKeyEx(hkDrv, REGSTR_KEY_JOYCURR, 0, KEY_READ, &hkData)))
        {
            for (i = 0; i < 20; i++)
            {
                wsprintf(szKey, REGSTR_VAL_JOYNCONFIG, i + 1);
                dwBufferLen = sizeof JOYREGHWCONFIG;

                if (ERROR_SUCCESS == RegQueryValueEx(hkData, szKey, 0, NULL, (LPBYTE)&jhwc, &dwBufferLen))
                {
                    // Skip devices whose type is JOY_HW_NONE.
                    if (jhwc.dwType == JOY_HW_NONE)
                        continue; 

                    pInputDeviceInfoNew = new InputDeviceInfo;
                    if (pInputDeviceInfoNew == NULL)
                        return E_OUTOFMEMORY;
                    ZeroMemory(pInputDeviceInfoNew, sizeof(InputDeviceInfo));
                    if (pInputInfo->m_pInputDeviceInfoFirst == NULL)
                    {
                        pInputInfo->m_pInputDeviceInfoFirst = pInputDeviceInfoNew;
                    }
                    else
                    {
                        for (pInputDeviceInfo = pInputInfo->m_pInputDeviceInfoFirst; 
                            pInputDeviceInfo->m_pInputDeviceInfoNext != NULL; 
                            pInputDeviceInfo = pInputDeviceInfo->m_pInputDeviceInfoNext)
                            {
                            }
                        pInputDeviceInfo->m_pInputDeviceInfoNext = pInputDeviceInfoNew;
                    }

                    pInputDeviceInfoNew->m_dwUsageSettings = jhwc.dwUsageSettings;
                    wsprintf(pInputDeviceInfoNew->m_szSettings, TEXT("0x%08x"), jhwc.dwUsageSettings);
                    if (JOY_US_PRESENT & jhwc.dwUsageSettings)
                    {
                        LoadString(NULL, IDS_JOYSTICKPRESENT, sz, 200);
                        lstrcat(pInputDeviceInfoNew->m_szSettings, sz);
                    }

                    // Try reading an OEM name
                    wsprintf(szKey, REGSTR_VAL_JOYNOEMNAME, i + 1);
                    dwBufferLen = sizeof szOEMKey;
                    szOEMKey[0] = 0;
                    szOEMName[0] = 0;
                    if (ERROR_SUCCESS == RegQueryValueEx(hkData, szKey, 0, NULL, (LPBYTE)szOEMKey, &dwBufferLen))
                    {
                        hkOEMBase = 0;
                        hkOEMData = 0;

                        // If there is an OEM name, look in the PrivateProperties to find out 
                        // the name of the device as shown in the control panel applet.
                        if((szOEMKey[0] != 0)
                            && (ERROR_SUCCESS == RegOpenKeyEx(HKEY_LOCAL_MACHINE, REGSTR_PATH_JOYOEM, 0, KEY_READ, &hkOEMBase))
                            && (ERROR_SUCCESS == RegOpenKeyEx(hkOEMBase, szOEMKey, 0, KEY_READ, &hkOEMData))
                            && (ERROR_SUCCESS == RegQueryValueEx(hkOEMData, REGSTR_VAL_JOYOEMNAME, 0, NULL, NULL, &dwBufferLen))
                            && dwBufferLen)
                        {
                            dwBufferLen = sizeof szOEMName;
                            RegQueryValueEx(hkOEMData, REGSTR_VAL_JOYOEMNAME, 0, NULL, (LPBYTE)szOEMName, &dwBufferLen);
                        }
                        if (hkOEMData)
                            RegCloseKey(hkOEMData);
                    }

                    if (hkOEMBase)
                        RegCloseKey(hkOEMBase);
                    
                    if (szOEMName[0] != 0)
                    {
                        _tcsncpy(pInputDeviceInfoNew->m_szDeviceName, szOEMName, 100);
                        pInputDeviceInfoNew->m_szDeviceName[99] = 0;
                    }
                    else
                        GetJoystickTypeDesc(jhwc.dwType, pInputDeviceInfoNew->m_szDeviceName);

                    wsprintf(szKey, REGSTR_VAL_JOYNOEMCALLOUT, i + 1);
                    dwBufferLen = sizeof szOEMCallout;

                    if (ERROR_SUCCESS == RegQueryValueEx(hkData, szKey, 0, NULL, (LPBYTE)szOEMCallout, &dwBufferLen))
                    {
                        _tcsncpy(pInputDeviceInfoNew->m_szDriverName, szOEMCallout, 100);
                        pInputDeviceInfoNew->m_szDriverName[99] = 0;

                        GetSystemDirectory(szPath, MAX_PATH);
                        lstrcat(szPath, TEXT("\\"));
                        lstrcat(szPath, szOEMCallout);
                        GetFileVersion(szPath, pInputDeviceInfoNew->m_szDriverVersion, 
                            pInputDeviceInfoNew->m_szDriverAttributes, pInputDeviceInfoNew->m_szDriverLanguageLocal, pInputDeviceInfoNew->m_szDriverLanguage,
                            &pInputDeviceInfoNew->m_bBeta, &pInputDeviceInfoNew->m_bDebug);
                        GetFileDateAndSize(szPath, pInputDeviceInfoNew->m_szDriverDateLocal, pInputDeviceInfoNew->m_szDriverDate, &pInputDeviceInfoNew->m_numBytes);
                        FileIsSigned(szPath, &pInputDeviceInfoNew->m_bDriverSigned, &pInputDeviceInfoNew->m_bDriverSignedValid);
                    }
                    else
                    {
                        LoadString(NULL, IDS_DEFAULT, pInputDeviceInfoNew->m_szDriverName, 100);
                    }
                }
            }
        }
    }

    return S_OK;
}


/****************************************************************************
 *
 *  GetJoystickTypeDesc
 *
 ****************************************************************************/
VOID GetJoystickTypeDesc(DWORD dwType, TCHAR* pszDesc)
{
    LONG ids;

    switch(dwType)
    {
        case JOY_HW_NONE:
            ids = IDS_JOY_HW_NONE;
            break;
        case JOY_HW_CUSTOM:
            ids = IDS_JOY_HW_CUSTOM;
            break;
        case JOY_HW_2A_2B_GENERIC:
            ids = IDS_JOY_HW_2A_2B_GENERIC;
            break;
        case JOY_HW_2A_4B_GENERIC:
            ids = IDS_JOY_HW_2A_4B_GENERIC;
            break;
        case JOY_HW_2B_GAMEPAD:
            ids = IDS_JOY_HW_2B_GAMEPAD;
            break;
        case JOY_HW_2B_FLIGHTYOKE:
            ids = IDS_JOY_HW_2B_FLIGHTYOKE;
            break;
        case JOY_HW_2B_FLIGHTYOKETHROTTLE:
            ids = IDS_JOY_HW_2B_FLIGHTYOKETHROTTLE;
            break;
        case JOY_HW_3A_2B_GENERIC:
            ids = IDS_JOY_HW_3A_2B_GENERIC;
            break;
        case JOY_HW_3A_4B_GENERIC:
            ids = IDS_JOY_HW_3A_4B_GENERIC;
            break;
        case JOY_HW_4B_GAMEPAD:
            ids = IDS_JOY_HW_4B_GAMEPAD;
            break;
        case JOY_HW_4B_FLIGHTYOKE:
            ids = IDS_JOY_HW_4B_FLIGHTYOKE;
            break;
        case JOY_HW_4B_FLIGHTYOKETHROTTLE:
            ids = IDS_JOY_HW_4B_FLIGHTYOKETHROTTLE;
            break;
        default:
            ids = IDS_JOY_UNKNOWN;
            break;
    }
    LoadString(NULL, ids, pszDesc, 60);
}



/****************************************************************************
 *
 *  GetInputDriverInfo
 *
 ****************************************************************************/
HRESULT GetInputDriverInfo(InputInfo* pInputInfo)
{
    HKEY hkBase;
    HKEY hkDrv;
    HKEY hkMedia;
    HKEY hkMediaDriver;
    DWORD dwIndex = 0;
    TCHAR szName[100];
    DWORD dwNameSize;
    TCHAR szClass[100];
    DWORD dwClassSize;
    InputDriverInfo* pInputDriverInfoNew;
    InputDriverInfo* pInputDriverInfo;
    DWORD dwBufferLen;
    TCHAR szActive[10];
    TCHAR szSubMediaKey[100];

    if (ERROR_SUCCESS != RegOpenKeyEx(HKEY_LOCAL_MACHINE, REGSTR_PATH_JOYCONFIG, 0, KEY_READ, &hkBase))
        return S_OK; // This key doesn't exist on NT, so exit silently for now.
    dwNameSize = 100;
    dwClassSize = 100;
    while (ERROR_SUCCESS == RegEnumKeyEx(hkBase, dwIndex, szName, 
        &dwNameSize, NULL, szClass, &dwClassSize, NULL))
    {
        if (szName[dwNameSize - 1] == '>' &&
            szName[dwNameSize - 6] == '<')
        {
            // It's a driver
            pInputDriverInfoNew = new InputDriverInfo;
            if (pInputDriverInfoNew == NULL)
                return E_OUTOFMEMORY;
            ZeroMemory(pInputDriverInfoNew, sizeof(InputDriverInfo));
            if (pInputInfo->m_pInputDriverInfoFirst == NULL)
            {
                pInputInfo->m_pInputDriverInfoFirst = pInputDriverInfoNew;
            }
            else
            {
                for (pInputDriverInfo = pInputInfo->m_pInputDriverInfoFirst; 
                    pInputDriverInfo->m_pInputDriverInfoNext != NULL; 
                    pInputDriverInfo = pInputDriverInfo->m_pInputDriverInfoNext)
                    {
                    }
                pInputDriverInfo->m_pInputDriverInfoNext = pInputDriverInfoNew;
            }
            lstrcpy(pInputDriverInfoNew->m_szRegKey, szName);

            // Read info from reg key
            if (ERROR_SUCCESS != RegOpenKeyEx(hkBase, szName, 0, KEY_READ, &hkDrv))
                return E_FAIL;
            dwBufferLen = 100;
            RegQueryValueEx(hkDrv, TEXT("DeviceID"), 0, NULL, (LPBYTE)pInputDriverInfoNew->m_szDeviceID, &dwBufferLen);
            dwBufferLen = 10;
            RegQueryValueEx(hkDrv, TEXT("Active"), 0, NULL, (LPBYTE)szActive, &dwBufferLen);
            if (lstrcmp(szActive, TEXT("1")) == 0)
                pInputDriverInfoNew->m_bActive = TRUE;
            dwBufferLen = 100;
            RegQueryValueEx(hkDrv, TEXT("Driver"), 0, NULL, (LPBYTE)pInputDriverInfoNew->m_szDriver16, &dwBufferLen);
            RegCloseKey(hkDrv);
            
            // Open corresponding key under Services\Class\Media and read more info
            szSubMediaKey[0] = 0;
            if( lstrlen(szName) > (int) (dwNameSize - 5) )
                lstrcpy(szSubMediaKey, &szName[dwNameSize - 5]);
            szSubMediaKey[4] = '\0';
            if (ERROR_SUCCESS == RegOpenKeyEx(HKEY_LOCAL_MACHINE, REGSTR_PATH_CLASS TEXT("\\") REGSTR_KEY_MEDIA_CLASS, 0, KEY_READ, &hkMedia))
            {
                if (ERROR_SUCCESS == RegOpenKeyEx(hkMedia, szSubMediaKey, 0, KEY_READ, &hkMediaDriver))
                {
                    dwBufferLen = 100;
                    RegQueryValueEx(hkMediaDriver, TEXT("MatchingDeviceId"), 0, NULL, (LPBYTE)pInputDriverInfoNew->m_szMatchingDeviceID, &dwBufferLen);
                    dwBufferLen = 100;
                    RegQueryValueEx(hkMediaDriver, TEXT("Driver"), 0, NULL, (LPBYTE)pInputDriverInfoNew->m_szDriver32, &dwBufferLen);
                    RegCloseKey(hkMediaDriver);
                }
                RegCloseKey(hkMedia);
            }
        }
        dwNameSize = 100;
        dwClassSize = 100;
        dwIndex++;
    }
    RegCloseKey(hkBase);

    return S_OK;
}


/****************************************************************************
 *
 *  CheckRegistry
 *
 ****************************************************************************/
HRESULT CheckRegistry(InputInfo* pInputInfo, RegError** ppRegErrorFirst)
{
    HRESULT hr;
    HKEY HKCR = HKEY_CLASSES_ROOT;

    TCHAR szVersion[100];
    HKEY hkey;
    DWORD cbData;
    ULONG ulType;

    DWORD dwMajor = 0;
    DWORD dwMinor = 0;
    DWORD dwRevision = 0;
    DWORD dwBuild = 0;

    if (ERROR_SUCCESS == RegOpenKeyEx(HKEY_LOCAL_MACHINE, TEXT("Software\\Microsoft\\DirectX"),
        0, KEY_READ, &hkey))
    {
        cbData = 100;
        RegQueryValueEx(hkey, TEXT("Version"), 0, &ulType, (LPBYTE)szVersion, &cbData);
        RegCloseKey(hkey);
        if (lstrlen(szVersion) > 6 && 
            lstrlen(szVersion) < 20)
        {
            if( _stscanf(szVersion, TEXT("%d.%d.%d.%d"), &dwMajor, &dwMinor, &dwRevision, &dwBuild) != 4 )
            {
                dwMajor = 0;
                dwMinor = 0;
                dwRevision = 0;
                dwBuild = 0;
            }
        }
    }

    // No registry checking on DX versions before DX7
    if (dwMinor < 7)
        return S_OK;

    // 34644: check for poll flags 
    DWORD dwData = 0;
    DWORD dwSize = sizeof(dwData);
    DWORD dwType;
    if (ERROR_SUCCESS == RegOpenKeyEx(HKEY_LOCAL_MACHINE, TEXT("System\\CurrentControlSet\\control\\MediaProperties\\PrivateProperties\\Joystick\\OEM\\Standard Gameport"),
        0, KEY_READ, &hkey))
    {
        RegQueryValueEx(hkey, TEXT("PollFlags"), NULL, &dwType, (BYTE *)&dwData, &dwSize);
        RegCloseKey(hkey);
    }
    pInputInfo->m_bPollFlags = ( dwData == 0x00000001 );

    // From dinput.inf:
    if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKCR, TEXT("CLSID\\{25E609E0-B259-11CF-BFC7-444553540000}"), TEXT(""), TEXT("*"))))
        return hr;
    if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKCR, TEXT("CLSID\\{25E609E0-B259-11CF-BFC7-444553540000}\\InProcServer32"), TEXT(""), TEXT("dinput.dll"), CRF_LEAF)))
        return hr;
    if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKCR, TEXT("CLSID\\{25E609E0-B259-11CF-BFC7-444553540000}\\InprocServer32"), TEXT("ThreadingModel"), TEXT("Both"))))
        return hr;

    if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKCR, TEXT("CLSID\\{25E609E1-B259-11CF-BFC7-444553540000}"), TEXT(""), TEXT("*"))))
        return hr;
    if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKCR, TEXT("CLSID\\{25E609E1-B259-11CF-BFC7-444553540000}\\InProcServer32"), TEXT(""), TEXT("dinput.dll"), CRF_LEAF)))
        return hr;
    if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKCR, TEXT("CLSID\\{25E609E1-B259-11CF-BFC7-444553540000}\\InprocServer32"), TEXT("ThreadingModel"), TEXT("Both"))))
        return hr;

    if (!BIsPlatformNT())
    {
        if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKCR, TEXT("CLSID\\{92187326-72B4-11d0-A1AC-0000F8026977}"), TEXT(""), TEXT("*"))))
            return hr;
        if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKCR, TEXT("CLSID\\{92187326-72B4-11d0-A1AC-0000F8026977}\\ProgID"), TEXT(""), TEXT("*"))))
            return hr;

        // Bug 119850: gchand.dll doesn't need to be on any DX7 OS.
//      if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKCR, TEXT("CLSID\\{92187326-72B4-11d0-A1AC-0000F8026977}\\InProcHandler32"), TEXT(""), TEXT("gchand.dll"), CRF_LEAF)))
//          return hr;

        if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKCR, TEXT("CLSID\\{92187326-72B4-11d0-A1AC-0000F8026977}\\InProcServer32"), TEXT(""), TEXT("gcdef.dll"), CRF_LEAF)))
            return hr;
        if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKCR, TEXT("CLSID\\{92187326-72B4-11d0-A1AC-0000F8026977}\\InprocServer32"), TEXT("ThreadingModel"), TEXT("Apartment"))))
            return hr;
    }

    return S_OK;
}


/****************************************************************************
 *
 *  DestroyInputInfo
 *
 ****************************************************************************/
VOID DestroyInputInfo(InputInfo* pInputInfo)
{
    if( pInputInfo )
    {
        DestroyReg( &pInputInfo->m_pRegErrorFirst );

        InputDeviceInfo* pInputDeviceInfo;
        InputDeviceInfo* pInputDeviceInfoNext;

        for (pInputDeviceInfo = pInputInfo->m_pInputDeviceInfoFirst; pInputDeviceInfo != NULL; 
            pInputDeviceInfo = pInputDeviceInfoNext)
        {
            pInputDeviceInfoNext = pInputDeviceInfo->m_pInputDeviceInfoNext;
            delete pInputDeviceInfo;
        }

        InputDeviceInfoNT* pInputDeviceNTInfo;
        InputDeviceInfoNT* pInputDeviceNTInfoNext;

        for (pInputDeviceNTInfo = pInputInfo->m_pInputDeviceInfoNTFirst; pInputDeviceNTInfo != NULL; 
            pInputDeviceNTInfo = pInputDeviceNTInfoNext)
        {
            pInputDeviceNTInfoNext = pInputDeviceNTInfo->m_pInputDeviceInfoNTNext;
            delete pInputDeviceNTInfo;
        }

        InputDriverInfo* pInputDriverInfo;
        InputDriverInfo* pInputDriverInfoNext;

        for (pInputDriverInfo = pInputInfo->m_pInputDriverInfoFirst; pInputDriverInfo != NULL; 
            pInputDriverInfo = pInputDriverInfoNext)
        {
            pInputDriverInfoNext = pInputDriverInfo->m_pInputDriverInfoNext;
            delete pInputDriverInfo;
        }

        delete pInputInfo;
    }
}



/****************************************************************************
 *
 *  DiagnoseInput
 *
 ****************************************************************************/
VOID DiagnoseInput(SysInfo* pSysInfo, InputInfo* pInputInfo)
{
    InputDeviceInfo* pInputDeviceInfo;
    InputDeviceInfoNT* pInputDeviceInfoNT;
    TCHAR szDebug[200];
    TCHAR szBeta[200];
    LONG lwNumDebug;
    LONG lwNumBeta;
    TCHAR szListContinuer[30];
    TCHAR szListEtc[30];
    TCHAR szFmt[300];
    TCHAR szMessage[300];
    BOOL bProblem = FALSE;

    if( pInputInfo == NULL )
        return;

    lwNumDebug = 0;
    lwNumBeta = 0;
    LoadString(NULL, IDS_LISTCONTINUER, szListContinuer, 30);
    LoadString(NULL, IDS_LISTETC, szListEtc, 30);
    for (pInputDeviceInfo = pInputInfo->m_pInputDeviceInfoFirst; pInputDeviceInfo != NULL; 
        pInputDeviceInfo = pInputDeviceInfo->m_pInputDeviceInfoNext)
    {
        if (pInputDeviceInfo->m_bBeta)
        {
            pInputDeviceInfo->m_bProblem = TRUE;
            bProblem = TRUE;
            lwNumBeta++;
            if (lwNumBeta == 1)
            {
                lstrcpy(szBeta, pInputDeviceInfo->m_szDriverName);
            }
            else if (lwNumBeta < 4)
            {
                lstrcat(szBeta, szListContinuer);
                lstrcat(szBeta, pInputDeviceInfo->m_szDriverName);
            }
            else if (lwNumBeta < 5)
            {
                lstrcat(szBeta, szListEtc);
            }
        }
        if (pInputDeviceInfo->m_bDebug)
        {
            pInputDeviceInfo->m_bProblem = TRUE;
            bProblem = TRUE;
            lwNumDebug++;
            if (lwNumDebug == 1)
            {
                lstrcpy(szDebug, pInputDeviceInfo->m_szDriverName);
            }
            else if (lwNumDebug < 4)
            {
                lstrcat(szDebug, szListContinuer);
                lstrcat(szDebug, pInputDeviceInfo->m_szDriverName);
            }
            else if (lwNumDebug < 5)
            {
                lstrcat(szDebug, szListEtc);
            }
        }
    }

    _tcscpy( pSysInfo->m_szInputNotes, TEXT("") );
    _tcscpy( pSysInfo->m_szInputNotesEnglish, TEXT("") );

    for (pInputDeviceInfoNT = pInputInfo->m_pInputDeviceInfoNTFirst; pInputDeviceInfoNT != NULL;
        pInputDeviceInfoNT = pInputDeviceInfoNT->m_pInputDeviceInfoNTNext)
    {
        if (pInputDeviceInfoNT->m_dwProblem != 0)
        {
            bProblem = TRUE;
            pInputDeviceInfoNT->m_bProblem = TRUE;

            LoadString(NULL, IDS_INPUTDEVPROBLEMFMT, szFmt, 300);
            wsprintf(szMessage, szFmt, pInputDeviceInfoNT->m_szName, pInputDeviceInfoNT->m_dwProblem);
            _tcscat( pSysInfo->m_szInputNotes, szMessage );

            LoadString(NULL, IDS_INPUTDEVPROBLEMFMT_ENGLISH, szFmt, 300);
            wsprintf(szMessage, szFmt, pInputDeviceInfoNT->m_szName, pInputDeviceInfoNT->m_dwProblem);
            _tcscat( pSysInfo->m_szInputNotesEnglish, szMessage );
        }
        if (pInputDeviceInfoNT->m_dwPortProblem != 0)
        {
            bProblem = TRUE;
            pInputDeviceInfoNT->m_bProblem = TRUE;

            LoadString(NULL, IDS_INPUTPORTPROBLEMFMT, szFmt, 300);
            wsprintf(szMessage, szFmt, pInputDeviceInfoNT->m_szPortName, pInputDeviceInfoNT->m_dwPortProblem);
            _tcscat( pSysInfo->m_szInputNotes, szMessage );

            LoadString(NULL, IDS_INPUTPORTPROBLEMFMT_ENGLISH, szFmt, 300);
            wsprintf(szMessage, szFmt, pInputDeviceInfoNT->m_szPortName, pInputDeviceInfoNT->m_dwPortProblem);
            _tcscat( pSysInfo->m_szInputNotesEnglish, szMessage );
        }
    }

    if (lwNumBeta > 0)
    {
        if (lwNumBeta == 1)
            LoadString(NULL, IDS_BETADRIVERFMT1, szFmt, 300);
        else
            LoadString(NULL, IDS_BETADRIVERFMT2, szFmt, 300);
        wsprintf(szMessage, szFmt, szBeta);
        _tcscat( pSysInfo->m_szInputNotes, szMessage );

        if (lwNumBeta == 1)
            LoadString(NULL, IDS_BETADRIVERFMT1_ENGLISH, szFmt, 300);
        else
            LoadString(NULL, IDS_BETADRIVERFMT2_ENGLISH, szFmt, 300);
        wsprintf(szMessage, szFmt, szBeta);
        _tcscat( pSysInfo->m_szInputNotesEnglish, szMessage );
    }

    if (lwNumDebug > 0)
    {
        if (lwNumDebug == 1)
            LoadString(NULL, IDS_DEBUGDRIVERFMT1, szFmt, 300);
        else
            LoadString(NULL, IDS_DEBUGDRIVERFMT2, szFmt, 300);
        wsprintf(szMessage, szFmt, szDebug);
        _tcscat( pSysInfo->m_szInputNotes, szMessage );

        if (lwNumDebug == 1)
            LoadString(NULL, IDS_DEBUGDRIVERFMT1_ENGLISH, szFmt, 300);
        else
            LoadString(NULL, IDS_DEBUGDRIVERFMT2_ENGLISH, szFmt, 300);
        wsprintf(szMessage, szFmt, szDebug);
        _tcscat( pSysInfo->m_szInputNotesEnglish, szMessage );
    }

    if (pInputInfo->m_pInputDeviceInfoFirst == NULL && 
        pInputInfo->m_pInputDeviceInfoNTFirst == NULL)
    {
        LoadString(NULL, IDS_NOINPUT, szMessage, 300);
        _tcscat( pSysInfo->m_szInputNotes, szMessage );

        LoadString(NULL, IDS_NOINPUT_ENGLISH, szMessage, 300);
        _tcscat( pSysInfo->m_szInputNotesEnglish, szMessage );
    }
    if (pInputInfo->m_pRegErrorFirst != NULL)
    {
        bProblem = TRUE;
        LoadString(NULL, IDS_REGISTRYPROBLEM, szMessage, 300);
        _tcscat( pSysInfo->m_szInputNotes, szMessage );

        LoadString(NULL, IDS_REGISTRYPROBLEM_ENGLISH, szMessage, 300);
        _tcscat( pSysInfo->m_szInputNotesEnglish, szMessage );
    }
    if (!bProblem)
    {
        LoadString(NULL, IDS_NOPROBLEM, szMessage, 300);
        _tcscat( pSysInfo->m_szInputNotes, szMessage );

        LoadString(NULL, IDS_NOPROBLEM_ENGLISH, szMessage, 300);
        _tcscat( pSysInfo->m_szInputNotesEnglish, szMessage );
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\directx\dxdiag\inptinfo.h ===
/****************************************************************************
 *
 *    File: inptinfo.h
 * Project: DxDiag (DirectX Diagnostic Tool)
 *  Author: Mike Anderson (manders@microsoft.com)
 * Purpose: Gather information about input devices on this machine
 *
 * (C) Copyright 1998 Microsoft Corp.  All rights reserved.
 *
 ****************************************************************************/

#ifndef INPUTINFO_H
#define INPUTINFO_H

// DXD_IN_DI_VALUE is the name of a value stored under the registry key 
// HKLM\DXD_IN_DI_KEY that indicates that DxDiag is using
// DirectInput.  If DxDiag starts up and this value exists, DxDiag 
// probably crashed in DirectInput and DxDiag should offer to run without
// using DirectInput.
#define DXD_IN_DI_KEY TEXT("Software\\Microsoft\\DirectX Diagnostic Tool")
#define DXD_IN_DI_VALUE TEXT("DxDiag In DirectInput")

struct InputDeviceInfo
{
    DWORD m_dwUsageSettings;
    TCHAR m_szSettings[100]; // formatted version of m_dwUsageSettings
    TCHAR m_szDeviceName[100];
    TCHAR m_szDriverName[100];
    TCHAR m_szDriverVersion[100];
    TCHAR m_szDriverLanguage[100];
    TCHAR m_szDriverLanguageLocal[100];
    TCHAR m_szDriverDate[100];
    TCHAR m_szDriverDateLocal[100];
    TCHAR m_szDriverAttributes[100];
    LONG m_numBytes;
    BOOL m_bBeta;
    BOOL m_bDebug;
    BOOL m_bDriverSigned;
    BOOL m_bDriverSignedValid;
    BOOL m_bProblem;

    InputDeviceInfo* m_pInputDeviceInfoNext;
};

struct InputDeviceInfoNT
{
    TCHAR m_szName[200];
    TCHAR m_szProvider[200];
    TCHAR m_szId[200];
    DWORD m_dwStatus;
    DWORD m_dwProblem;

    TCHAR m_szPortName[200];
    TCHAR m_szPortProvider[200];
    TCHAR m_szPortId[200];
    DWORD m_dwPortStatus;
    DWORD m_dwPortProblem;

    BOOL m_bProblem;

    InputDeviceInfoNT* m_pInputDeviceInfoNTNext;
};

struct InputDriverInfo
{
    TCHAR m_szRegKey[100];
    TCHAR m_szDeviceID[100];
    TCHAR m_szMatchingDeviceID[100];
    TCHAR m_szDriver16[100];
    TCHAR m_szDriver32[100];
    BOOL m_bActive;
    BOOL m_bProblem;

    InputDriverInfo* m_pInputDriverInfoNext;
};

struct InputInfo
{
    BOOL m_bNT;
    BOOL m_bPollFlags;
    InputDeviceInfo* m_pInputDeviceInfoFirst;
    InputDeviceInfoNT* m_pInputDeviceInfoNTFirst;
    InputDriverInfo* m_pInputDriverInfoFirst;
    RegError* m_pRegErrorFirst;
};


HRESULT GetInputInfo(InputInfo** ppInputInfo);
HRESULT GetInputDriverInfo(InputInfo* pInputInfo);
VOID    DestroyInputInfo(InputInfo* pInputInfo);
VOID    DiagnoseInput(SysInfo* pSysInfo, InputInfo* pInputInfo);


#endif // INPUTINFO_H
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\directx\dxdiag\musinfo.cpp ===
/****************************************************************************
 *
 *    File: musinfo.cpp
 * Project: DxDiag (DirectX Diagnostic Tool)
 *  Author: Mike Anderson (manders@microsoft.com)
 * Purpose: Gather information about DirectMusic
 *
 * (C) Copyright 1998 Microsoft Corp.  All rights reserved.
 *
 ****************************************************************************/

#include <tchar.h>
#include <Windows.h>
#include <multimon.h>
#include <dmusicc.h>
#include <dmusici.h>
#include <stdio.h> // for sscanf
#include "reginfo.h"
#include "sysinfo.h"
#include "dispinfo.h" // for TestResult
#include "fileinfo.h" // for GetFileVersion
#include "musinfo.h"
#include "resource.h"

static BOOL DoesDMHWAccelExist(IDirectMusic* pdm);
static BOOL IsDMHWAccelEnabled(VOID);
static HRESULT CheckRegistry(RegError** ppRegErrorFirst);

/****************************************************************************
 *
 *  GetBasicMusicInfo - Just create the MusicInfo object and note whether
 *      a valid installation of DirectMusic is present.
 *
 ****************************************************************************/
HRESULT GetBasicMusicInfo(MusicInfo** ppMusicInfo)
{
    HRESULT hr = S_OK;
    MusicInfo* pMusicInfoNew;
    TCHAR szPath[MAX_PATH];
    TCHAR szVersion[100];
    DWORD dwMajor;
    DWORD dwMinor;
    DWORD dwRevision;
    DWORD dwBuild;
    
    pMusicInfoNew = new MusicInfo;
    if (pMusicInfoNew == NULL)
        return E_OUTOFMEMORY;
    *ppMusicInfo = pMusicInfoNew;
    ZeroMemory(pMusicInfoNew, sizeof(MusicInfo));

    GetSystemDirectory(szPath, MAX_PATH);
    lstrcat(szPath, TEXT("\\dmusic.dll"));

    WIN32_FIND_DATA findFileData;
    HANDLE hFind = FindFirstFile(szPath, &findFileData);
    if (hFind != INVALID_HANDLE_VALUE)
    {
        FindClose(hFind);
        // Only accept DX 6.1 or higher, since tests fail on 6.0's DirectMusic:
        if (SUCCEEDED(hr = GetFileVersion(szPath, szVersion, NULL, NULL, NULL)))
        {
            if( _stscanf(szVersion, TEXT("%d.%d.%d.%d"), &dwMajor, &dwMinor, &dwRevision, &dwBuild) == 4 )
            {
                if (dwMajor > 4 || 
                    dwMajor >= 4 && dwMinor > 6 ||
                    dwMajor >= 4 && dwMinor >= 6 && dwRevision >= 2)
                {
                    pMusicInfoNew->m_bDMusicInstalled = TRUE;
                    return S_OK;
                }
            }
        }
    }
    return hr;
}


/****************************************************************************
 *
 *  GetExtraMusicInfo - Get details of all ports, default port, and DLS path.
 *
 ****************************************************************************/
HRESULT GetExtraMusicInfo(MusicInfo* pMusicInfo)
{
    HRESULT hr = S_OK;
    IDirectMusic* pdm = NULL;
    LONG iPort;
    DMUS_PORTCAPS portCaps;
    MusicPort* pMusicPortNew = NULL;
    MusicPort* pMusicPort = NULL;
    GUID guidDefaultPort;

    if (pMusicInfo == NULL)
        return E_FAIL;

    BOOL bWasDisabled = FALSE;
    HKEY hkey = NULL;
    DWORD dwSize;
    DWORD dwType;
    DWORD dwData;

    // See if HW is disabled in registry, and if so, re-enable it (briefly)
    if (ERROR_SUCCESS == RegOpenKeyEx(HKEY_LOCAL_MACHINE, 
                                      TEXT("SOFTWARE\\Microsoft\\DirectMusic"), 0, KEY_WRITE, &hkey))
    {
        dwSize = sizeof(dwData);
        if (ERROR_SUCCESS == RegQueryValueEx(hkey, TEXT("DisableHWAcceleration"), NULL, &dwType, (BYTE *)&dwData, &dwSize))
        {
            if (dwData != 0)
            {
                bWasDisabled = TRUE;
                dwData = FALSE; // enable (un-disable) HW
                RegSetValueEx(hkey, TEXT("DisableHWAcceleration"), NULL, 
                    REG_DWORD, (BYTE *)&dwData, sizeof(dwData));
            }
        }
        // note: don't close hkey until end of function
    }

    // Initialize COM
    if (FAILED(hr = CoInitialize(NULL)))
        return hr;

    if (FAILED(hr = CoCreateInstance(CLSID_DirectMusic, NULL, CLSCTX_INPROC, 
                                     IID_IDirectMusic, (VOID**)&pdm)))
    {
        goto LEnd;
    }

    pMusicInfo->m_bAccelerationExists = DoesDMHWAccelExist(pdm);

    if (bWasDisabled)
    {
        // re-disable HW
        dwData = TRUE; // disable HW
        RegSetValueEx(hkey, TEXT("DisableHWAcceleration"), NULL, 
                      REG_DWORD, (BYTE *)&dwData, sizeof(dwData));
    }
    if (hkey != NULL)
        RegCloseKey(hkey);

    pMusicInfo->m_bAccelerationEnabled = IsDMHWAccelEnabled();

    // Get default port
    if (FAILED(hr = pdm->GetDefaultPort(&guidDefaultPort)))
        goto LEnd;

    iPort = 0;
    portCaps.dwSize = sizeof(portCaps);
    while (TRUE)
    {
        hr = pdm->EnumPort(iPort, &portCaps);
        if (hr == S_FALSE)
            break;
        if (FAILED(hr))
            goto LEnd;

        pMusicPortNew = new MusicPort;
        if (pMusicPortNew == NULL)
        {
            hr = E_OUTOFMEMORY;
            goto LEnd;
        }
        ZeroMemory(pMusicPortNew, sizeof(MusicPort));
        if (guidDefaultPort == portCaps.guidPort)
        {
            // Special case: always put default device at head of the list.
            pMusicPortNew->m_pMusicPortNext = pMusicInfo->m_pMusicPortFirst;
            pMusicInfo->m_pMusicPortFirst = pMusicPortNew;
        }
        else if (pMusicInfo->m_pMusicPortFirst == NULL)
        {
            pMusicInfo->m_pMusicPortFirst = pMusicPortNew;
        }
        else
        {
            for (pMusicPort = pMusicInfo->m_pMusicPortFirst; 
                pMusicPort->m_pMusicPortNext != NULL; 
                pMusicPort = pMusicPort->m_pMusicPortNext)
                {
                }
            pMusicPort->m_pMusicPortNext = pMusicPortNew;
        }
        pMusicPortNew->m_guid = portCaps.guidPort;
        pMusicPortNew->m_dwMaxAudioChannels = portCaps.dwMaxAudioChannels;
        pMusicPortNew->m_dwMaxChannelGroups = portCaps.dwMaxChannelGroups;
        if (guidDefaultPort == portCaps.guidPort)
            pMusicPortNew->m_bDefaultPort = TRUE;
        pMusicPortNew->m_bSoftware = (portCaps.dwFlags & DMUS_PC_SOFTWARESYNTH ? TRUE : FALSE);
        pMusicPortNew->m_bKernelMode = (portCaps.dwType == DMUS_PORT_KERNEL_MODE ? TRUE : FALSE);
        pMusicPortNew->m_bUsesDLS = (portCaps.dwFlags & DMUS_PC_DLS ? TRUE : FALSE);
        pMusicPortNew->m_bExternal = (portCaps.dwFlags & DMUS_PC_EXTERNAL ? TRUE : FALSE);
        pMusicPortNew->m_bOutputPort = (portCaps.dwClass == DMUS_PC_OUTPUTCLASS);
#ifdef UNICODE
        _tcsncpy(pMusicPortNew->m_szDescription, portCaps.wszDescription, 300 );
        pMusicPortNew->m_szDescription[299] = 0;
#else
        WideCharToMultiByte(CP_ACP, 0, portCaps.wszDescription, -1, pMusicPortNew->m_szDescription, sizeof pMusicPortNew->m_szDescription, 0, 0);
        pMusicPortNew->m_szDescription[299] = 0;
#endif

        iPort++;
    }

    // Get General Midi DLS File Path and store it in first MusicPort
    TCHAR szGMFilePath[MAX_PATH];
    DWORD dwBufferLen;
    if (ERROR_SUCCESS == RegOpenKeyEx(HKEY_LOCAL_MACHINE, TEXT("Software\\Microsoft\\DirectMusic"), 0, KEY_READ, &hkey))
    {
        dwBufferLen = MAX_PATH;
        if (ERROR_SUCCESS == RegQueryValueEx(hkey, TEXT("GMFilePath"), 0, NULL, (LPBYTE)szGMFilePath, &dwBufferLen))
        {
            ExpandEnvironmentStrings(szGMFilePath, pMusicInfo->m_szGMFilePath, MAX_PATH);
            GetRiffFileVersion(pMusicInfo->m_szGMFilePath, pMusicInfo->m_szGMFileVersion);
        }
        RegCloseKey(hkey);
    }

LEnd:
    if (pdm != NULL)
        pdm->Release();

    // Release COM
    CoUninitialize();

    if (FAILED(hr = CheckRegistry(&pMusicInfo->m_pRegErrorFirst)))
        return hr;

    return hr;
}


/****************************************************************************
 *
 *  DoesDMHWAccelExist
 *
 ****************************************************************************/
BOOL DoesDMHWAccelExist(IDirectMusic* pdm)
{
    BOOL bHWAccel = FALSE;

    // See if default port is hardware
    GUID guidDefaultPort;
    LONG iPort;
    DMUS_PORTCAPS portCaps;
    HRESULT hr;
    if (SUCCEEDED(pdm->GetDefaultPort(&guidDefaultPort)))
    {
        iPort = 0;
        portCaps.dwSize = sizeof(portCaps);
        while (TRUE)
        {
            hr = pdm->EnumPort(iPort, &portCaps);
            if (hr == S_FALSE)
                break;
            if (FAILED(hr))
                break;
            if (guidDefaultPort == portCaps.guidPort)
            {
                if ((portCaps.dwFlags & DMUS_PC_SOFTWARESYNTH) == 0)
                    bHWAccel = TRUE;
                break;
            }
            iPort++;
        }
    }

    return bHWAccel;
}


/****************************************************************************
 *
 *  IsDMHWAccelEnabled
 *
 ****************************************************************************/
BOOL IsDMHWAccelEnabled(VOID)
{
    HKEY hkey;
    DWORD dwSize;
    DWORD dwType;
    DWORD dwData;
    BOOL bIsDMHWAccelEnabled = TRUE;

    if (ERROR_SUCCESS == RegOpenKeyEx(HKEY_LOCAL_MACHINE, 
        TEXT("SOFTWARE\\Microsoft\\DirectMusic"), 0, KEY_WRITE, &hkey))
    {
        dwSize = sizeof(dwData);
        if (ERROR_SUCCESS == RegQueryValueEx(hkey, TEXT("DisableHWAcceleration"), NULL, &dwType, (BYTE *)&dwData, &dwSize))
        {
            if (dwData != 0) 
                bIsDMHWAccelEnabled = FALSE;                
        }

        RegCloseKey( hkey );
    }

    return bIsDMHWAccelEnabled;
}


/****************************************************************************
 *
 *  CheckRegistryClass - Helper function for CheckRegistry
 *
 ****************************************************************************/
HRESULT CheckRegistryClass(RegError** ppRegErrorFirst, TCHAR* pszGuid, 
                           TCHAR* pszName, TCHAR* pszLeaf, TCHAR* pszOptLeaf2 = NULL )
{
    HRESULT hr;
    HKEY HKCR = HKEY_CLASSES_ROOT;
    TCHAR szKey[200];
    TCHAR szData[200];

    wsprintf(szKey, TEXT("CLSID\\%s"), pszGuid);
    if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKCR, szKey, TEXT(""), pszName)))
        return hr;
    wsprintf(szKey, TEXT("CLSID\\%s\\InprocServer32"), pszGuid);

    if( pszOptLeaf2 == NULL )
    {
        if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKCR, szKey, TEXT(""), pszLeaf, CRF_LEAF)))
            return hr;
    }
    else
    {
        HRESULT hrReg1, hrReg2;
        if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKCR, szKey, TEXT(""), pszLeaf, CRF_LEAF, &hrReg1 )))
            return hr;
        if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKCR, szKey, TEXT(""), pszOptLeaf2, CRF_LEAF, &hrReg2 )))
            return hr;
        if( hrReg1 == RET_NOERROR || hrReg2 == RET_NOERROR )
        {
            // If one succeeded, then the other failed, and they both can't succeed.
            // So delete the first error, since it isn't needed.
            RegError* pRegErrorDelete = *ppRegErrorFirst;
            *ppRegErrorFirst = (*ppRegErrorFirst)->m_pRegErrorNext;
            delete pRegErrorDelete;
        }
    }

    if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKCR, szKey, TEXT("ThreadingModel"), TEXT("Both"))))
        return hr;
    wsprintf(szKey, TEXT("CLSID\\%s\\ProgID"), pszGuid);
    wsprintf(szData, TEXT("Microsoft.%s.1"), pszName);
    if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKCR, szKey, TEXT(""), szData)))
        return hr;
    wsprintf(szKey, TEXT("CLSID\\%s\\VersionIndependentProgID"), pszGuid);
    wsprintf(szData, TEXT("Microsoft.%s"), pszName);
    if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKCR, szKey, TEXT(""), szData)))
        return hr;

    wsprintf(szKey, TEXT("Microsoft.%s"), pszName);
    if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKCR, szKey, TEXT(""), pszName)))
        return hr;
    wsprintf(szKey, TEXT("Microsoft.%s\\CLSID"), pszName);
    if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKCR, szKey, TEXT(""), pszGuid)))
        return hr;
    wsprintf(szKey, TEXT("Microsoft.%s\\CurVer"), pszName);
    wsprintf(szData, TEXT("Microsoft.%s.1"), pszName);
    if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKCR, szKey, TEXT(""), szData)))
        return hr;

    wsprintf(szKey, TEXT("Microsoft.%s.1"), pszName);
    if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKCR, szKey, TEXT(""), pszName)))
        return hr;
    wsprintf(szKey, TEXT("Microsoft.%s.1\\CLSID"), pszName);
    if (FAILED(hr = CheckRegString(ppRegErrorFirst, HKCR, szKey, TEXT(""), pszGuid)))
        return hr;

    return S_OK;
}

/****************************************************************************
 *
 *  CheckRegistry
 *
 ****************************************************************************/
HRESULT CheckRegistry(RegError** ppRegErrorFirst)
{
    HRESULT hr;
    HKEY HKCR = HKEY_CLASSES_ROOT;

    TCHAR szVersion[100];
    HKEY hkey;
    DWORD cbData;
    ULONG ulType;

    DWORD dwMajor = 0;
    DWORD dwMinor = 0;
    DWORD dwRevision = 0;
    DWORD dwBuild = 0;

    if (ERROR_SUCCESS == RegOpenKeyEx(HKEY_LOCAL_MACHINE, TEXT("Software\\Microsoft\\DirectX"),
        0, KEY_READ, &hkey))
    {
        cbData = 100;
        RegQueryValueEx(hkey, TEXT("Version"), 0, &ulType, (LPBYTE)szVersion, &cbData);
        RegCloseKey(hkey);
        if (lstrlen(szVersion) > 6 && 
            lstrlen(szVersion) < 20)
        {
            if( _stscanf(szVersion, TEXT("%d.%d.%d.%d"), &dwMajor, &dwMinor, &dwRevision, &dwBuild) != 4 )
            {
                dwMajor = 0;
                dwMinor = 0;
                dwRevision = 0;
                dwBuild = 0;
            }
        }
    }

    // No registry checking on DX versions before DX7
    if (dwMinor < 7)
        return S_OK;

    // DirectMusicCollection
    if (FAILED(hr = CheckRegistryClass(ppRegErrorFirst, TEXT("{480FF4B0-28B2-11D1-BEF7-00C04FBF8FEF}"), TEXT("DirectMusicCollection"), TEXT("dmusic.dll"), TEXT("dmusicd.dll") )))
        return hr;

    // DirectMusic
    if (FAILED(hr = CheckRegistryClass(ppRegErrorFirst, TEXT("{636B9F10-0C7D-11D1-95B2-0020AFDC7421}"), TEXT("DirectMusic"), TEXT("dmusic.dll"), TEXT("dmusicd.dll") )))
        return hr;

    // DirectMusicSection
    if (FAILED(hr = CheckRegistryClass(ppRegErrorFirst, TEXT("{3F037241-414E-11D1-A7CE-00A0C913F73C}"), TEXT("DirectMusicSection"), TEXT("dmstyle.dll"), TEXT("dmstyled.dll") )))
        return hr;

    // DirectMusicSynth
    if (FAILED(hr = CheckRegistryClass(ppRegErrorFirst, TEXT("{58C2B4D0-46E7-11D1-89AC-00A0C9054129}"), TEXT("DirectMusicSynth"), TEXT("dmsynth.dll"), TEXT("dmsynthd.dll") )))
        return hr;

    // DirectMusicBand
    if (FAILED(hr = CheckRegistryClass(ppRegErrorFirst, TEXT("{79BA9E00-B6EE-11D1-86BE-00C04FBF8FEF}"), TEXT("DirectMusicBand"), TEXT("dmband.dll"), TEXT("dmbandd.dll") )))
        return hr;

    // DirectMusicSynthSink
    if (FAILED(hr = CheckRegistryClass(ppRegErrorFirst, TEXT("{AEC17CE3-A514-11D1-AFA6-00AA0024D8B6}"), TEXT("DirectMusicSynthSink"), TEXT("dmsynth.dll"), TEXT("dmsynthd.dll") )))
        return hr;

    // DirectMusicPerformance
    if (FAILED(hr = CheckRegistryClass(ppRegErrorFirst, TEXT("{D2AC2881-B39B-11D1-8704-00600893B1BD}"), TEXT("DirectMusicPerformance"), TEXT("dmime.dll"), TEXT("dmimed.dll") )))
        return hr;

    // DirectMusicSegment
    if (FAILED(hr = CheckRegistryClass(ppRegErrorFirst, TEXT("{D2AC2882-B39B-11D1-8704-00600893B1BD}"), TEXT("DirectMusicSegment"), TEXT("dmime.dll"), TEXT("dmimed.dll") )))
        return hr;

    // DirectMusicSegmentState
    if (FAILED(hr = CheckRegistryClass(ppRegErrorFirst, TEXT("{D2AC2883-B39B-11D1-8704-00600893B1BD}"), TEXT("DirectMusicSegmentState"), TEXT("dmime.dll"), TEXT("dmimed.dll") )))
        return hr;

    // DirectMusicGraph
    if (FAILED(hr = CheckRegistryClass(ppRegErrorFirst, TEXT("{D2AC2884-B39B-11D1-8704-00600893B1BD}"), TEXT("DirectMusicGraph"), TEXT("dmime.dll"), TEXT("dmimed.dll") )))
        return hr;

    // DirectMusicTempoTrack
    if (FAILED(hr = CheckRegistryClass(ppRegErrorFirst, TEXT("{D2AC2885-B39B-11D1-8704-00600893B1BD}"), TEXT("DirectMusicTempoTrack"), TEXT("dmime.dll"), TEXT("dmimed.dll") )))
        return hr;

    // DirectMusicSeqTrack
    if (FAILED(hr = CheckRegistryClass(ppRegErrorFirst, TEXT("{D2AC2886-B39B-11D1-8704-00600893B1BD}"), TEXT("DirectMusicSeqTrack"), TEXT("dmime.dll"), TEXT("dmimed.dll") )))
        return hr;

    // DirectMusicSysExTrack
    if (FAILED(hr = CheckRegistryClass(ppRegErrorFirst, TEXT("{D2AC2887-B39B-11D1-8704-00600893B1BD}"), TEXT("DirectMusicSysExTrack"), TEXT("dmime.dll"), TEXT("dmimed.dll") )))
        return hr;

    // DirectMusicTimeSigTrack
    if (FAILED(hr = CheckRegistryClass(ppRegErrorFirst, TEXT("{D2AC2888-B39B-11D1-8704-00600893B1BD}"), TEXT("DirectMusicTimeSigTrack"), TEXT("dmime.dll"), TEXT("dmimed.dll") )))
        return hr;

    // DirectMusicStyle
    if (FAILED(hr = CheckRegistryClass(ppRegErrorFirst, TEXT("{D2AC288a-B39B-11D1-8704-00600893B1BD}"), TEXT("DirectMusicStyle"), TEXT("dmstyle.dll"), TEXT("dmstyled.dll") )))
        return hr;

    // DirectMusicChordTrack
    if (FAILED(hr = CheckRegistryClass(ppRegErrorFirst, TEXT("{D2AC288b-B39B-11D1-8704-00600893B1BD}"), TEXT("DirectMusicChordTrack"), TEXT("dmstyle.dll"), TEXT("dmstyled.dll") )))
        return hr;

    // DirectMusicCommandTrack
    if (FAILED(hr = CheckRegistryClass(ppRegErrorFirst, TEXT("{D2AC288c-B39B-11D1-8704-00600893B1BD}"), TEXT("DirectMusicCommandTrack"), TEXT("dmstyle.dll"), TEXT("dmstyled.dll") )))
        return hr;

    // DirectMusicStyleTrack
    if (FAILED(hr = CheckRegistryClass(ppRegErrorFirst, TEXT("{D2AC288d-B39B-11D1-8704-00600893B1BD}"), TEXT("DirectMusicStyleTrack"), TEXT("dmstyle.dll"), TEXT("dmstyled.dll") )))
        return hr;

    // DirectMusicMotifTrack
    if (FAILED(hr = CheckRegistryClass(ppRegErrorFirst, TEXT("{D2AC288e-B39B-11D1-8704-00600893B1BD}"), TEXT("DirectMusicMotifTrack"), TEXT("dmstyle.dll"), TEXT("dmstyled.dll") )))
        return hr;

    // DirectMusicChordMap
    if (FAILED(hr = CheckRegistryClass(ppRegErrorFirst, TEXT("{D2AC288f-B39B-11D1-8704-00600893B1BD}"), TEXT("DirectMusicChordMap"), TEXT("dmcompos.dll"), TEXT("dmcompod.dll") )))
        return hr;

    // DirectMusicComposer
    if (FAILED(hr = CheckRegistryClass(ppRegErrorFirst, TEXT("{D2AC2890-B39B-11D1-8704-00600893B1BD}"), TEXT("DirectMusicComposer"), TEXT("dmcompos.dll"), TEXT("dmcompod.dll") )))
        return hr;

    // DirectMusicLoader
    // This check fails when upgrading Win98SE (or possibly any system with DX 6.1 or 6.1a) to Win2000 RC2.  So skip it
//  if (FAILED(hr = CheckRegistryClass(ppRegErrorFirst, TEXT("{D2AC2892-B39B-11D1-8704-00600893B1BD}"), TEXT("DirectMusicLoader"), TEXT("dmloader.dll"))))
//      return hr;

    // DirectMusicBandTrack
    if (FAILED(hr = CheckRegistryClass(ppRegErrorFirst, TEXT("{D2AC2894-B39B-11D1-8704-00600893B1BD}"), TEXT("DirectMusicBandTrack"), TEXT("dmband.dll"), TEXT("dmbandd.dll") )))
        return hr;

    // DirectMusicChordMapTrack
    if (FAILED(hr = CheckRegistryClass(ppRegErrorFirst, TEXT("{D2AC2896-B39B-11D1-8704-00600893B1BD}"), TEXT("DirectMusicChordMapTrack"), TEXT("dmcompos.dll"), TEXT("dmcompod.dll") )))
        return hr;

    // DirectMusicAuditionTrack
    if (FAILED(hr = CheckRegistryClass(ppRegErrorFirst, TEXT("{D2AC2897-B39B-11D1-8704-00600893B1BD}"), TEXT("DirectMusicAuditionTrack"), TEXT("dmstyle.dll"), TEXT("dmstyled.dll") )))
        return hr;

    // DirectMusicMuteTrack
    if (FAILED(hr = CheckRegistryClass(ppRegErrorFirst, TEXT("{D2AC2898-B39B-11D1-8704-00600893B1BD}"), TEXT("DirectMusicMuteTrack"), TEXT("dmstyle.dll"), TEXT("dmstyled.dll") )))
        return hr;

    // DirectMusicTemplate
    if (FAILED(hr = CheckRegistryClass(ppRegErrorFirst, TEXT("{D30BCC65-60E8-11D1-A7CE-00A0C913F73C}"), TEXT("DirectMusicTemplate"), TEXT("dmcompos.dll"), TEXT("dmcompod.dll") )))
        return hr;

    // DirectMusicSignPostTrack
    if (FAILED(hr = CheckRegistryClass(ppRegErrorFirst, TEXT("{F17E8672-C3B4-11D1-870B-00600893B1BD}"), TEXT("DirectMusicSignPostTrack"), TEXT("dmcompos.dll"), TEXT("dmcompod.dll") )))
        return hr;

    return S_OK;
}


/****************************************************************************
 *
 *  DestroyMusicInfo
 *
 ****************************************************************************/
VOID DestroyMusicInfo(MusicInfo* pMusicInfo)
{
    if( pMusicInfo )
    {
        DestroyReg( &pMusicInfo->m_pRegErrorFirst );

        MusicPort* pMusicPort;
        MusicPort* pMusicPortNext;

        for (pMusicPort = pMusicInfo->m_pMusicPortFirst; pMusicPort != NULL; 
            pMusicPort = pMusicPortNext)
        {
            pMusicPortNext = pMusicPort->m_pMusicPortNext;
            delete pMusicPort;
        }

        delete pMusicInfo;
    }
}


/****************************************************************************
 *
 *  DiagnoseMusic
 *
 ****************************************************************************/
VOID DiagnoseMusic(SysInfo* pSysInfo, MusicInfo* pMusicInfo)
{
    TCHAR szMessage[500];
    BOOL bProblem = FALSE;

    _tcscpy( pSysInfo->m_szMusicNotes, TEXT("") );
    _tcscpy( pSysInfo->m_szMusicNotesEnglish, TEXT("") );

    // Report any problems
    if( pMusicInfo == NULL || !pMusicInfo->m_bDMusicInstalled )
    {
        LoadString(NULL, IDS_NO_DMUSIC, szMessage, 500);
        _tcscat( pSysInfo->m_szMusicNotes, szMessage );

        LoadString(NULL, IDS_NO_DMUSIC_ENGLISH, szMessage, 500);
        _tcscat( pSysInfo->m_szMusicNotesEnglish, szMessage );

        bProblem = TRUE;
    }
    else
    {
        if (pMusicInfo->m_pMusicPortFirst == NULL)
        {
            LoadString(NULL, IDS_NOPORTS, szMessage, 500);
            _tcscat( pSysInfo->m_szMusicNotes, szMessage );
    
            LoadString(NULL, IDS_NOPORTS_ENGLISH, szMessage, 500);
            _tcscat( pSysInfo->m_szMusicNotesEnglish, szMessage );
    
            bProblem = TRUE;
        }
        else if (lstrlen(pMusicInfo->m_szGMFilePath) == 0)
        {
            LoadString(NULL, IDS_NOGMDLS, szMessage, 500);
            _tcscat( pSysInfo->m_szMusicNotes, szMessage );
    
            LoadString(NULL, IDS_NOGMDLS_ENGLISH, szMessage, 500);
            _tcscat( pSysInfo->m_szMusicNotesEnglish, szMessage );
    
            bProblem = TRUE;
        }
        else 
        {
            WIN32_FIND_DATA findFileData;
            HANDLE hFind = FindFirstFile(pMusicInfo->m_szGMFilePath, &findFileData);
            if (hFind == INVALID_HANDLE_VALUE)
            {
                LoadString(NULL, IDS_GMDLSFILEMISSING, szMessage, 500);
                _tcscat( pSysInfo->m_szMusicNotes, szMessage );
    
                LoadString(NULL, IDS_GMDLSFILEMISSING_ENGLISH, szMessage, 500);
                _tcscat( pSysInfo->m_szMusicNotesEnglish, szMessage );
    
                bProblem = TRUE;
            }
            else
            {
                FindClose(hFind);
            }
        }
        if (pMusicInfo && pMusicInfo->m_pRegErrorFirst != NULL)
        {
            LoadString(NULL, IDS_REGISTRYPROBLEM, szMessage, 500);
            _tcscat( pSysInfo->m_szMusicNotes, szMessage );
    
            LoadString(NULL, IDS_REGISTRYPROBLEM_ENGLISH, szMessage, 500);
            _tcscat( pSysInfo->m_szMusicNotesEnglish, szMessage );
    
            bProblem = TRUE;
        }
    
        // Show test results or instructions to run test:
        if (pMusicInfo && pMusicInfo->m_testResult.m_bStarted)
        {
            LoadString(NULL, IDS_DMUSICRESULTS, szMessage, 500);
            _tcscat( pSysInfo->m_szMusicNotes, szMessage );
            _tcscat( pSysInfo->m_szMusicNotes, pMusicInfo->m_testResult.m_szDescription );
            _tcscat( pSysInfo->m_szMusicNotes, TEXT("\r\n") );
    
            LoadString(NULL, IDS_DMUSICRESULTS_ENGLISH, szMessage, 500);
            _tcscat( pSysInfo->m_szMusicNotesEnglish, szMessage );
            _tcscat( pSysInfo->m_szMusicNotesEnglish, pMusicInfo->m_testResult.m_szDescriptionEnglish );
            _tcscat( pSysInfo->m_szMusicNotesEnglish, TEXT("\r\n") );
    
            bProblem = TRUE;
        }
        else
        {
            LoadString(NULL, IDS_DMUSICINSTRUCTIONS, szMessage, 500);
            _tcscat( pSysInfo->m_szMusicNotes, szMessage );
    
            LoadString(NULL, IDS_DMUSICINSTRUCTIONS_ENGLISH, szMessage, 500);
            _tcscat( pSysInfo->m_szMusicNotesEnglish, szMessage );
        }
    }

    if (!bProblem)
    {
        LoadString(NULL, IDS_NOPROBLEM, szMessage, 500);
        _tcscat( pSysInfo->m_szMusicNotes, szMessage );

        LoadString(NULL, IDS_NOPROBLEM_ENGLISH, szMessage, 500);
        _tcscat( pSysInfo->m_szMusicNotesEnglish, szMessage );
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\directx\dxdiag\netinfo.h ===
/****************************************************************************
 *
 *    File: netinfo.h
 * Project: DxDiag (DirectX Diagnostic Tool)
 *  Author: Mike Anderson (manders@microsoft.com)
 * Purpose: Gather information about DirectPlay
 *
 * (C) Copyright 1998 Microsoft Corp.  All rights reserved.
 *
 ****************************************************************************/

#ifndef NETINFO_H
#define NETINFO_H

// DXD_IN_DP_VALUE is the name of a value stored under the registry key 
// HKLM\DXD_IN_DP_KEY that indicates that DxDiag is using
// DirectPlay.  If DxDiag starts up and this value exists, DxDiag 
// probably crashed in DirectPlay and DxDiag should offer to run without
// using DirectPlay.
#define DXD_IN_DP_KEY TEXT("Software\\Microsoft\\DirectX Diagnostic Tool")
#define DXD_IN_DP_VALUE TEXT("DxDiag In DirectPlay")

struct NetSP
{
    TCHAR m_szName[200];
    TCHAR m_szNameEnglish[200];
    TCHAR m_szGuid[100];
    TCHAR m_szFile[100];
    TCHAR m_szPath[MAX_PATH];
    TCHAR m_szVersion[50];
    TCHAR m_szVersionEnglish[50];
    BOOL m_bRegistryOK;
    BOOL m_bProblem;
    BOOL m_bFileMissing;
    BOOL m_bInstalled;
    DWORD m_dwDXVer;
    GUID m_guid;
    NetSP* m_pNetSPNext;
};

struct NetApp
{
    TCHAR m_szName[200];
    TCHAR m_szGuid[100];
    TCHAR m_szExeFile[100];
    TCHAR m_szExePath[MAX_PATH];
    TCHAR m_szExeVersion[50];
    TCHAR m_szExeVersionEnglish[50];
    TCHAR m_szLauncherFile[100];
    TCHAR m_szLauncherPath[MAX_PATH];
    TCHAR m_szLauncherVersion[50];
    TCHAR m_szLauncherVersionEnglish[50];
    BOOL m_bRegistryOK;
    BOOL m_bProblem;
    BOOL m_bFileMissing;
    DWORD m_dwDXVer;
    NetApp* m_pNetAppNext;
};

struct NetInfo
{
    NetSP* m_pNetSPFirst;
    NetApp* m_pNetAppFirst;
    TestResult m_testResult; // This is filled in by testnet.cpp
};

HRESULT GetNetInfo(SysInfo* pSysInfo, NetInfo** ppNetInfo);
VOID DestroyNetInfo(NetInfo* pNetInfo);
VOID DiagnoseNetInfo(SysInfo* pSysInfo, NetInfo* pNetInfo);

#endif // NETINFO_H
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\directx\dxdiag\musinfo.h ===
/****************************************************************************
 *
 *    File: musinfo.h
 * Project: DxDiag (DirectX Diagnostic Tool)
 *  Author: Mike Anderson (manders@microsoft.com)
 * Purpose: Gather information about DirectMusic
 *
 * (C) Copyright 1998 Microsoft Corp.  All rights reserved.
 *
 ****************************************************************************/

#ifndef MUSINFO_H
#define MUSINFO_H

// DXD_IN_DM_VALUE is the name of a value stored under the registry key 
// HKLM\DXD_IN_DM_KEY that indicates that DxDiag is using
// DirectMusic.  If DxDiag starts up and this value exists, DxDiag 
// probably crashed in DirectMusic and DxDiag should offer to run without
// using DirectMusic.
#define DXD_IN_DM_KEY TEXT("Software\\Microsoft\\DirectX Diagnostic Tool")
#define DXD_IN_DM_VALUE TEXT("DxDiag In DirectMusic")

struct MusicPort
{
    GUID m_guid;
    BOOL m_bSoftware;
    BOOL m_bKernelMode;
    BOOL m_bUsesDLS;
    BOOL m_bExternal;
    DWORD m_dwMaxAudioChannels;
    DWORD m_dwMaxChannelGroups;
    BOOL m_bDefaultPort;
    BOOL m_bOutputPort;
    TCHAR m_szDescription[300];
    MusicPort* m_pMusicPortNext;
};

struct MusicInfo
{
    BOOL m_bDMusicInstalled;
    MusicPort* m_pMusicPortFirst;
    TCHAR m_szGMFilePath[MAX_PATH]; 
    TCHAR m_szGMFileVersion[100];
    GUID m_guidMusicPortTest; // This holds the GUID of the music port selected for testing
    BOOL m_bAccelerationEnabled;
    BOOL m_bAccelerationExists;
    RegError* m_pRegErrorFirst;
    TestResult m_testResult; // This is filled in by testmus.cpp
};

HRESULT GetBasicMusicInfo(MusicInfo** ppMusicInfo);
HRESULT GetExtraMusicInfo(MusicInfo* pMusicInfo);
VOID DestroyMusicInfo(MusicInfo* pMusicInfo);
VOID DiagnoseMusic(SysInfo* pSysInfo, MusicInfo* pMusicInfo);

#endif // DISPINFO_H
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\directx\dxdiag\reginfo.cpp ===
/****************************************************************************
 *
 *    File: reginfo.cpp
 * Project: DxDiag (DirectX Diagnostic Tool)
 *  Author: Mike Anderson (manders@microsoft.com)
 * Purpose: Gather and hold registry information 
 *
 * (C) Copyright 1998 Microsoft Corp.  All rights reserved.
 *
 ****************************************************************************/

#include <Windows.h>
#include <tchar.h>
#include "sysinfo.h"
#include "reginfo.h"

static HRESULT AddError(RegError** ppRegErrorFirst, RegError* pRegErrorNew);
static BOOL EqualMemory(BYTE* pb1, BYTE* pb2, DWORD numBytes);


/****************************************************************************
 *
 *  CheckRegDword
 *
 ****************************************************************************/
HRESULT CheckRegDword(RegError** ppRegErrorFirst, HKEY hkeyRoot, TCHAR* pszKey, 
                      TCHAR* pszValue, DWORD dwExpected)
{
    HKEY hkey = NULL;
    RegError regErrorNew;

    ZeroMemory(&regErrorNew, sizeof(RegError));
    regErrorNew.m_hkeyRoot = hkeyRoot;
    lstrcpy(regErrorNew.m_szKey, pszKey);
    lstrcpy(regErrorNew.m_szValue, pszValue);
    regErrorNew.m_dwTypeExpected = REG_DWORD;
    regErrorNew.m_dwExpected = dwExpected;

    if (ERROR_SUCCESS != RegOpenKeyEx(hkeyRoot, pszKey, 0, KEY_READ, &hkey))
    {
        regErrorNew.m_ret = RET_MISSINGKEY;
    }
    else
    {
        regErrorNew.m_dwExpectedSize = sizeof(DWORD);
        regErrorNew.m_dwActualSize = regErrorNew.m_dwExpectedSize; // RegQueryValueEx will change this
        if (ERROR_SUCCESS != RegQueryValueEx(hkey, pszValue, 0, &regErrorNew.m_dwTypeActual, 
            (LPBYTE)&regErrorNew.m_dwActual, &regErrorNew.m_dwActualSize))
        {
            regErrorNew.m_ret = RET_MISSINGVALUE;
        }
        else if (regErrorNew.m_dwTypeActual != regErrorNew.m_dwTypeExpected)
        {
            regErrorNew.m_ret = RET_VALUEWRONGTYPE;
        }
        else if (regErrorNew.m_dwActual != dwExpected)
        {
            regErrorNew.m_ret = RET_VALUEWRONGDATA;
        }
        RegCloseKey(hkey);
    }

    if (regErrorNew.m_ret == RET_NOERROR)
        return S_OK;
    else
        return AddError(ppRegErrorFirst, &regErrorNew);
}


/****************************************************************************
 *
 *  CheckRegString
 *
 ****************************************************************************/
HRESULT CheckRegString(RegError** ppRegErrorFirst, HKEY hkeyRoot, TCHAR* pszKey, 
                       TCHAR* pszValue, TCHAR* pszExpected, CheckRegFlags crf,
                       HRESULT* phrError )
{
    HKEY hkey = NULL;
    RegError regErrorNew;

    ZeroMemory(&regErrorNew, sizeof(RegError));
    regErrorNew.m_hkeyRoot = hkeyRoot;
    lstrcpy(regErrorNew.m_szKey, pszKey);
    lstrcpy(regErrorNew.m_szValue, pszValue);
    regErrorNew.m_dwTypeExpected = REG_SZ;
    lstrcpy(regErrorNew.m_szExpected, pszExpected);

    if (ERROR_SUCCESS != RegOpenKeyEx(hkeyRoot, pszKey, 0, KEY_READ, &hkey))
    {
        regErrorNew.m_ret = RET_MISSINGKEY;
    }
    else
    {
        regErrorNew.m_dwExpectedSize = lstrlen(pszExpected) + 1;
        regErrorNew.m_dwActualSize = sizeof(regErrorNew.m_szActual); // RegQueryValueEx will change this
        if (ERROR_SUCCESS != RegQueryValueEx(hkey, pszValue, 0, &regErrorNew.m_dwTypeActual, 
            (LPBYTE)&regErrorNew.m_szActual, &regErrorNew.m_dwActualSize))
        {
            regErrorNew.m_ret = RET_MISSINGVALUE;
        }
        else if (regErrorNew.m_dwTypeActual != regErrorNew.m_dwTypeExpected)
        {
            regErrorNew.m_ret = RET_VALUEWRONGTYPE;
        }
        else if (lstrcmp(regErrorNew.m_szExpected, TEXT("*")) != 0)
        {
            TCHAR* pszCompare = regErrorNew.m_szActual;
            if (crf & CRF_LEAF)
            {
                pszCompare = _tcsrchr(regErrorNew.m_szActual, TEXT('\\'));
                if (pszCompare == NULL)
                    pszCompare = regErrorNew.m_szActual;
                else
                    pszCompare++; // skip past backslash
            }
            if (DXUtil_strcmpi(regErrorNew.m_szExpected, pszCompare) != 0)
            {
                regErrorNew.m_ret = RET_VALUEWRONGDATA;
            }
        }
        RegCloseKey(hkey);
    }

    if( phrError )
        *phrError = regErrorNew.m_ret;

    if (regErrorNew.m_ret == RET_NOERROR)
        return S_OK;
    else
        return AddError(ppRegErrorFirst, &regErrorNew);
}


/****************************************************************************
 *
 *  CheckRegBinary
 *
 ****************************************************************************/
HRESULT CheckRegBinary(RegError** ppRegErrorFirst, HKEY hkeyRoot, TCHAR* pszKey, 
                       TCHAR* pszValue, BYTE* pbDataExpected, DWORD dwSizeExpected)
{
    HKEY hkey = NULL;
    RegError regErrorNew;

    if (dwSizeExpected > sizeof(regErrorNew.m_bExpected))
        return E_INVALIDARG;

    ZeroMemory(&regErrorNew, sizeof(RegError));
    regErrorNew.m_hkeyRoot = hkeyRoot;
    lstrcpy(regErrorNew.m_szKey, pszKey);
    lstrcpy(regErrorNew.m_szValue, pszValue);
    regErrorNew.m_dwTypeExpected = REG_BINARY;
    CopyMemory(regErrorNew.m_bExpected, pbDataExpected, dwSizeExpected);

    if (ERROR_SUCCESS != RegOpenKeyEx(hkeyRoot, pszKey, 0, KEY_READ, &hkey))
    {
        regErrorNew.m_ret = RET_MISSINGKEY;
    }
    else
    {
        regErrorNew.m_dwExpectedSize = dwSizeExpected;
        regErrorNew.m_dwActualSize = sizeof(regErrorNew.m_bExpected); // RegQueryValueEx will change this
        if (ERROR_SUCCESS != RegQueryValueEx(hkey, pszValue, 0, &regErrorNew.m_dwTypeActual, 
            (LPBYTE)&regErrorNew.m_bActual, &regErrorNew.m_dwActualSize))
        {
            regErrorNew.m_ret = RET_MISSINGVALUE;
        }
        else if (regErrorNew.m_dwTypeActual != regErrorNew.m_dwTypeExpected)
        {
            regErrorNew.m_ret = RET_VALUEWRONGTYPE;
        }
        else if (regErrorNew.m_dwActualSize != regErrorNew.m_dwExpectedSize)
        {
            regErrorNew.m_ret = RET_VALUEWRONGDATA;
        }
        else if (!EqualMemory(regErrorNew.m_bExpected, regErrorNew.m_bActual, regErrorNew.m_dwActualSize))
        {
            regErrorNew.m_ret = RET_VALUEWRONGDATA;
        }
        RegCloseKey(hkey);
    }

    if (regErrorNew.m_ret == RET_NOERROR)
        return S_OK;
    else
        return AddError(ppRegErrorFirst, &regErrorNew);
}


/****************************************************************************
 *
 *  AddError - Allocate a RegError node, copy data from pRegErrorNew, and
 *      insert the node at the beginning of the ppRegErrorFirst linked list.
 *
 ****************************************************************************/
HRESULT AddError(RegError** ppRegErrorFirst, RegError* pRegErrorNew)
{
    RegError* pRegErrorInsert;

    pRegErrorInsert = new RegError;
    if (pRegErrorInsert == NULL)
        return E_OUTOFMEMORY;
    *pRegErrorInsert = *pRegErrorNew;
    pRegErrorInsert->m_pRegErrorNext = *ppRegErrorFirst;
    *ppRegErrorFirst = pRegErrorInsert;
    return S_OK;
}


/****************************************************************************
 *
 *  EqualMemory
 *
 ****************************************************************************/
BOOL EqualMemory(BYTE* pb1, BYTE* pb2, DWORD numBytes)
{
    while (numBytes > 0)
    {
        if (*pb1 != *pb2)
            return FALSE;
        pb1++;
        pb2++;
        numBytes--;
    }
    return TRUE;
}


/****************************************************************************
 *
 *  DestroyReg
 *
 ****************************************************************************/
VOID DestroyReg( RegError** ppRegErrorFirst )
{
    if( ppRegErrorFirst && *ppRegErrorFirst )
    {
        RegError* pRegError;
        RegError* pRegErrorNext;

        for (pRegError = *ppRegErrorFirst; pRegError != NULL; 
            pRegError = pRegErrorNext)
        {
            pRegErrorNext = pRegError->m_pRegErrorNext;
            delete pRegError;
        }

        *ppRegErrorFirst = NULL;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\directx\dxdiag\netinfo.cpp ===
/****************************************************************************
 *
 *    File: netinfo.cpp
 * Project: DxDiag (DirectX Diagnostic Tool)
 *  Author: Mike Anderson (manders@microsoft.com)
 * Purpose: Gather information about DirectPlay
 *
 * (C) Copyright 1998 Microsoft Corp.  All rights reserved.
 *
 ****************************************************************************/

#include <tchar.h>
#include <Windows.h>
#include <multimon.h>
#include <stdio.h>
#include <dplobby.h>
#include "resource.h"
#include "reginfo.h"
#include "sysinfo.h"
#include "dispinfo.h" // for TestResult
#include "fileinfo.h" // for GetFileVersion
#include "netinfo.h"
#include "sysinfo.h"

static HRESULT NewNetSP(NetInfo* pNetInfo, NetSP** ppNetSPNew);
static VOID DeleteNetSP(NetInfo* pNetInfo, NetSP* pNetSP);
static HRESULT NewNetApp(NetInfo* pNetInfo, NetApp** ppNetAppNew);
static HRESULT GetDX7ServiceProviders(NetInfo* pNetInfo);
static HRESULT GetDX8ServiceProviders(NetInfo* pNetInfo);
static HRESULT GetDX7LobbyableApps(NetInfo* pNetInfo);
static HRESULT GetDX8LobbyableApps(NetInfo* pNetInfo);
static BOOL ConvertStringToGUID(const WCHAR* strBuffer, GUID* lpguid);

/****************************************************************************
 *
 *  GetNetInfo
 *
 ****************************************************************************/
HRESULT GetNetInfo(SysInfo* pSysInfo, NetInfo** ppNetInfo)
{
    HRESULT hr = S_OK;
    NetInfo* pNetInfo;

    pNetInfo = new NetInfo;
    if (pNetInfo == NULL)
        return E_OUTOFMEMORY;
    *ppNetInfo = pNetInfo;
    ZeroMemory(pNetInfo, sizeof(NetInfo));

    if( FALSE == BIsIA64() )
    {
        if (FAILED(hr = GetDX7ServiceProviders(pNetInfo)))
            return hr;
        if (FAILED(hr = GetDX7LobbyableApps(pNetInfo)))
            return hr;
    }

    if( pSysInfo->m_dwDirectXVersionMajor >= 8 )
    {
        if (FAILED(hr = GetDX8ServiceProviders(pNetInfo)))
            return hr;
        if (FAILED(hr = GetDX8LobbyableApps(pNetInfo)))
            return hr;
    }

    return hr;
}


/****************************************************************************
 *
 *  NewNetSP
 *
 ****************************************************************************/
HRESULT NewNetSP(NetInfo* pNetInfo, NetSP** ppNetSPNew)
{
    NetSP* pNetSPNew;

    pNetSPNew = new NetSP;
    if (pNetSPNew == NULL)
        return E_OUTOFMEMORY;
    ZeroMemory(pNetSPNew, sizeof(NetSP));
    if (pNetInfo->m_pNetSPFirst == NULL)
    {
        pNetInfo->m_pNetSPFirst = pNetSPNew;
    }
    else
    {
        NetSP* pNetSP;
        for (pNetSP = pNetInfo->m_pNetSPFirst; 
            pNetSP->m_pNetSPNext != NULL; 
            pNetSP = pNetSP->m_pNetSPNext)
            {
            }
        pNetSP->m_pNetSPNext = pNetSPNew;
    }
    pNetSPNew->m_bRegistryOK = TRUE; // so far
    *ppNetSPNew = pNetSPNew;
    return S_OK;
}


/****************************************************************************
 *
 *  DeleteNetSP
 *
 ****************************************************************************/
VOID DeleteNetSP(NetInfo* pNetInfo, NetSP* pNetSP)
{
    NetSP* pNetSPPrev = NULL;
    NetSP* pNetSPCur;
    for (pNetSPCur = pNetInfo->m_pNetSPFirst; 
        pNetSPCur != NULL; 
        pNetSPCur = pNetSPCur->m_pNetSPNext)
    {
        if (pNetSPCur == pNetSP)
        {
            if (pNetSPPrev == NULL)
                pNetInfo->m_pNetSPFirst = pNetSPCur->m_pNetSPNext;
            else
                pNetSPPrev->m_pNetSPNext = pNetSPCur->m_pNetSPNext;
            delete pNetSPCur;
            return;
        }
        pNetSPPrev = pNetSPCur;
    }
}


/****************************************************************************
 *
 *  NewNetApp
 *
 ****************************************************************************/
HRESULT NewNetApp(NetInfo* pNetInfo, NetApp** ppNetAppNew)
{
    NetApp* pNetAppNew;

    pNetAppNew = new NetApp;
    if (pNetAppNew == NULL)
        return E_OUTOFMEMORY;
    ZeroMemory(pNetAppNew, sizeof(NetApp));
    if (pNetInfo->m_pNetAppFirst == NULL)
    {
        pNetInfo->m_pNetAppFirst = pNetAppNew;
    }
    else
    {
        NetApp* pNetApp;
        for (pNetApp = pNetInfo->m_pNetAppFirst; 
            pNetApp->m_pNetAppNext != NULL; 
            pNetApp = pNetApp->m_pNetAppNext)
            {
            }
        pNetApp->m_pNetAppNext = pNetAppNew;
    }
    pNetAppNew->m_bRegistryOK = TRUE; // so far
    *ppNetAppNew = pNetAppNew;
    return S_OK;
}


/****************************************************************************
 *
 *  GetDX7ServiceProviders
 *
 ****************************************************************************/
HRESULT GetDX7ServiceProviders(NetInfo* pNetInfo)
{
    HRESULT hr;
    HKEY hkey = NULL;
    HKEY hkey2 = NULL;
    DWORD dwIndex;
    DWORD dwBufferLen;
    BOOL bTCPIPFound = FALSE;
    BOOL bIPXFound = FALSE;
    BOOL bModemFound = FALSE;
    BOOL bSerialFound = FALSE;
    TCHAR szName[MAX_PATH+1];
    NetSP* pNetSPNew;

    if (ERROR_SUCCESS == RegOpenKeyEx(HKEY_LOCAL_MACHINE, TEXT("Software\\Microsoft\\DirectPlay\\Service Providers"), 0, KEY_READ, &hkey))
    {
        dwIndex = 0;
        while (ERROR_SUCCESS == RegEnumKey(hkey, dwIndex, szName, MAX_PATH+1))
        {
            // Note: I'm not putting the following keyname strings into resources because 
            // they're supposed to be in English regardless of user's system (at least on DX6
            // and higher--see another note below).  If I put them into resources, they're 
            // more likely to get inadvertently localized.
            if (DXUtil_strcmpi(szName, TEXT("Internet TCP/IP Connection For DirectPlay")) == 0)
                bTCPIPFound = TRUE;
            else if (DXUtil_strcmpi(szName, TEXT("IPX Connection For DirectPlay")) == 0)
                bIPXFound = TRUE;
            else if (DXUtil_strcmpi(szName, TEXT("Modem Connection For DirectPlay")) == 0)
                bModemFound = TRUE;
            else if (DXUtil_strcmpi(szName, TEXT("Serial Connection For DirectPlay")) == 0)
                bSerialFound = TRUE;

            if (FAILED(hr = NewNetSP(pNetInfo, &pNetSPNew)))
            {
                RegCloseKey(hkey);
                return hr;
            }
            
            pNetSPNew->m_dwDXVer = 7;

            // The following line is the right thing to do on DX5, but in DX6 the
            // name will get overwritten by the "DescriptionW" / "DescriptionA" string.
            lstrcpy(pNetSPNew->m_szName, szName);
            lstrcpy(pNetSPNew->m_szNameEnglish, szName);

            if (ERROR_SUCCESS == RegOpenKeyEx(hkey, szName, 0, KEY_READ, &hkey2))
            {
                // Get (localized) connection name, if it exists
                TCHAR szDescription[200];
                lstrcpy(szDescription, TEXT(""));
                dwBufferLen = 200;
                RegQueryValueEx(hkey2, 
                    // 25080: Always use DescriptionW because it's more localized
                    // than DescriptionA is.
                    TEXT("DescriptionW"), 
                    0, NULL, (LPBYTE)szDescription, &dwBufferLen);

                if (lstrlen(szDescription) > 0)
                {
                    _tcsncpy(pNetSPNew->m_szName, szDescription, 200 );
                    pNetSPNew->m_szName[199] = 0;
                }

                dwBufferLen = 100;
                if (ERROR_SUCCESS == RegQueryValueEx(hkey2, TEXT("Guid"), 0, NULL, (LPBYTE)pNetSPNew->m_szGuid, &dwBufferLen))
                {
                    // On DX5, the names of the registry keys for "Internet TCP/IP Connection 
                    // For DirectPlay", etc. were localized, so we need to check GUIDs to avoid
                    // incorrectly thinking that some standard service providers are missing:
                    if (!bTCPIPFound &&
                        DXUtil_strcmpi(pNetSPNew->m_szGuid, TEXT("{36E95EE0-8577-11cf-960C-0080C7534E82}")) == 0)
                    {
                        bTCPIPFound = TRUE;
                    }
                    if (!bIPXFound &&
                        DXUtil_strcmpi(pNetSPNew->m_szGuid, TEXT("{685BC400-9D2C-11cf-A9CD-00AA006886E3}")) == 0)
                    {
                        bIPXFound = TRUE;
                    }
                    if (!bModemFound &&
                        DXUtil_strcmpi(pNetSPNew->m_szGuid, TEXT("{44EAA760-CB68-11cf-9C4E-00A0C905425E}")) == 0)
                    {
                        bModemFound = TRUE;
                    }
                    if (!bSerialFound &&
                        DXUtil_strcmpi(pNetSPNew->m_szGuid, TEXT("{0F1D6860-88D9-11cf-9C4E-00A0C905425E}")) == 0)
                    {
                        bSerialFound = TRUE;
                    }

                    // If a non-English DX5 system was upgraded to DX6, it will have BOTH localized
                    // and non-localized keynames for each service provider.  The DX6 ones have
                    // "DescriptionA" and "DescriptionW" strings
                    // If a SP with this GUID has already been enumerated, replace it with the current
                    // one if the current one has a description.  Otherwise forget about the current
                    // one.
                    NetSP* pNetSPSearch;
                    BOOL bFound = FALSE;
                    for (pNetSPSearch = pNetInfo->m_pNetSPFirst; pNetSPSearch != NULL; pNetSPSearch = pNetSPSearch->m_pNetSPNext)
                    {
                        if (pNetSPSearch == pNetSPNew)
                            continue;
                        if (lstrcmp(pNetSPSearch->m_szGuid, pNetSPNew->m_szGuid) == 0)
                        {
                            bFound = TRUE;
                            break;
                        }
                    }
                    if (bFound)
                    {
                        if (lstrlen(szDescription) > 0)
                        {
                            // Current SP is better, nuke old one
                            DeleteNetSP(pNetInfo, pNetSPSearch);
                        }
                        else
                        {
                            // Old SP is (probably) better, nuke current one
                            DeleteNetSP(pNetInfo, pNetSPNew);
                            goto LDoneWithSubKey;
                        }
                    }
                }
                else
                {
                    pNetSPNew->m_bRegistryOK = FALSE;
                }
                
                TCHAR szPath[MAX_PATH];
                TCHAR* pszFile;
                dwBufferLen = MAX_PATH;
                if (ERROR_SUCCESS == RegQueryValueEx(hkey2, TEXT("Path"), 0, NULL, (LPBYTE)szPath, &dwBufferLen))
                {
                    // On Win9x, szPath is full path.  On NT, it's leaf only.
                    pszFile = _tcsrchr(szPath, TEXT('\\'));
                    if (pszFile == NULL)
                    {
                        lstrcpy(pNetSPNew->m_szFile, szPath);
                        GetSystemDirectory(pNetSPNew->m_szPath, MAX_PATH);
                        lstrcat(pNetSPNew->m_szPath, TEXT("\\"));
                        if( lstrlen(pNetSPNew->m_szPath) + lstrlen(szPath) < MAX_PATH )
                            lstrcat(pNetSPNew->m_szPath, szPath);
                    }
                    else
                    {
                        lstrcpy(pNetSPNew->m_szPath, szPath);
                        if( lstrlen(pszFile) > 1 )
                            lstrcpy(pNetSPNew->m_szFile, pszFile + 1); // skip backslash
                    }

                    WIN32_FIND_DATA findFileData;
                    HANDLE hFind = FindFirstFile(pNetSPNew->m_szPath, &findFileData);
                    if (hFind == INVALID_HANDLE_VALUE)
                    {
                        pNetSPNew->m_bFileMissing = TRUE;
                        LoadString(NULL, IDS_FILEMISSING, pNetSPNew->m_szVersion, 50);
                        LoadString(NULL, IDS_FILEMISSING_ENGLISH, pNetSPNew->m_szVersionEnglish, 50);
                    }
                    else
                    {
                        FindClose(hFind);
                        GetFileVersion(pNetSPNew->m_szPath, pNetSPNew->m_szVersion, 
                            NULL, NULL, NULL);
                        GetFileVersion(pNetSPNew->m_szPath, pNetSPNew->m_szVersionEnglish, 
                            NULL, NULL, NULL);
                    }
                }
                else
                {
                    pNetSPNew->m_bRegistryOK = FALSE;
                }
LDoneWithSubKey:                
                RegCloseKey(hkey2);
            }
            else
            {
                pNetSPNew->m_bRegistryOK = FALSE;
            }
            dwIndex++;
        }
        
        RegCloseKey(hkey);
    }

    if (!bTCPIPFound)
    {
        if (FAILED(hr = NewNetSP(pNetInfo, &pNetSPNew)))
            return hr;
        lstrcpy(pNetSPNew->m_szName, TEXT("Internet TCP/IP Connection For DirectPlay"));
        lstrcpy(pNetSPNew->m_szNameEnglish, TEXT("Internet TCP/IP Connection For DirectPlay"));
        pNetSPNew->m_bRegistryOK = FALSE;
    }
    if (!bIPXFound)
    {
        if (FAILED(hr = NewNetSP(pNetInfo, &pNetSPNew)))
            return hr;
        lstrcpy(pNetSPNew->m_szName, TEXT("IPX Connection For DirectPlay"));
        lstrcpy(pNetSPNew->m_szNameEnglish, TEXT("IPX Connection For DirectPlay"));
        pNetSPNew->m_bRegistryOK = FALSE;
    }
    if (!bModemFound)
    {
        if (FAILED(hr = NewNetSP(pNetInfo, &pNetSPNew)))
            return hr;
        lstrcpy(pNetSPNew->m_szName, TEXT("Modem Connection For DirectPlay"));
        lstrcpy(pNetSPNew->m_szNameEnglish, TEXT("Modem Connection For DirectPlay"));
        pNetSPNew->m_bRegistryOK = FALSE;
    }
    if (!bSerialFound)
    {
        if (FAILED(hr = NewNetSP(pNetInfo, &pNetSPNew)))
            return hr;
        lstrcpy(pNetSPNew->m_szName, TEXT("Serial Connection For DirectPlay"));
        lstrcpy(pNetSPNew->m_szNameEnglish, TEXT("Serial Connection For DirectPlay"));
        pNetSPNew->m_bRegistryOK = FALSE;
    }

    return S_OK;
}


/****************************************************************************
 *
 *  GetDX8ServiceProviders
 *
 ****************************************************************************/
HRESULT GetDX8ServiceProviders(NetInfo* pNetInfo)
{
    HRESULT hr;
    HKEY hkey = NULL;
    HKEY hkey2 = NULL;
    HKEY hkeyDLL = NULL;
    DWORD dwIndex;
    DWORD dwBufferLen;
    BOOL bTCPIPFound = FALSE;
    BOOL bIPXFound = FALSE;
    BOOL bModemFound = FALSE;
    BOOL bSerialFound = FALSE;
    TCHAR szName[MAX_PATH+1];
    NetSP* pNetSPNew;

    if (ERROR_SUCCESS == RegOpenKeyEx(HKEY_LOCAL_MACHINE, TEXT("Software\\Microsoft\\DirectPlay8\\Service Providers"), 0, KEY_READ, &hkey))
    {
        dwIndex = 0;
        while (ERROR_SUCCESS == RegEnumKey(hkey, dwIndex, szName, MAX_PATH+1))
        {
            if (FAILED(hr = NewNetSP(pNetInfo, &pNetSPNew)))
            {
                RegCloseKey(hkey);
                return hr;
            }
            
            pNetSPNew->m_dwDXVer = 8;

            if (ERROR_SUCCESS == RegOpenKeyEx(hkey, szName, 0, KEY_READ, &hkey2))
            {
                TCHAR szDescription[200];
                lstrcpy(szDescription, TEXT(""));
                TCHAR szEnglishDescription[200];

                dwBufferLen = 200;
                if (ERROR_SUCCESS == RegQueryValueEx( hkey2, TEXT("Friendly Name"), 0, NULL, (LPBYTE)szDescription, &dwBufferLen) )
                {
                }
                else
                {
                    pNetSPNew->m_bRegistryOK = FALSE;
                }

                lstrcpy(szEnglishDescription, szDescription);

                dwBufferLen = 100;
                if (ERROR_SUCCESS == RegQueryValueEx(hkey2, TEXT("GUID"), 0, NULL, (LPBYTE)pNetSPNew->m_szGuid, &dwBufferLen))
                {
                    WCHAR strBuffer[MAX_PATH];
#ifdef _UNICODE
                    wcscpy( strBuffer, pNetSPNew->m_szGuid );
#else
                    MultiByteToWideChar( CP_ACP, 0, pNetSPNew->m_szGuid, -1, 
                                         strBuffer, _tcslen(pNetSPNew->m_szGuid) );
#endif
                    ConvertStringToGUID( strBuffer, &pNetSPNew->m_guid );
                }
                else
                {
                    pNetSPNew->m_bRegistryOK = FALSE;
                }

                TCHAR szRegKey[200];
                wsprintf( szRegKey, TEXT("CLSID\\%s\\InprocServer32"), pNetSPNew->m_szGuid );
                if (ERROR_SUCCESS == RegOpenKeyEx(HKEY_CLASSES_ROOT, szRegKey, 0, KEY_READ, &hkeyDLL))
                {
                    if (ERROR_SUCCESS == RegQueryValueEx(hkeyDLL, NULL, 0, NULL, (LPBYTE)pNetSPNew->m_szFile, &dwBufferLen))
                    {
                        GetSystemDirectory(pNetSPNew->m_szPath, MAX_PATH);
                        lstrcat(pNetSPNew->m_szPath, TEXT("\\"));
                        if( lstrlen(pNetSPNew->m_szPath) + lstrlen(pNetSPNew->m_szFile) < MAX_PATH )
                            lstrcat(pNetSPNew->m_szPath, pNetSPNew->m_szFile);

                        WIN32_FIND_DATA findFileData;
                        HANDLE hFind = FindFirstFile(pNetSPNew->m_szPath, &findFileData);
                        if (hFind == INVALID_HANDLE_VALUE)
                        {
                            pNetSPNew->m_bFileMissing = TRUE;
                            LoadString(NULL, IDS_FILEMISSING, pNetSPNew->m_szVersion, 50);
                            LoadString(NULL, IDS_FILEMISSING_ENGLISH, pNetSPNew->m_szVersionEnglish, 50);
                        }
                        else
                        {
                            FindClose(hFind);
                            GetFileVersion(pNetSPNew->m_szPath, pNetSPNew->m_szVersion, 
                                NULL, NULL, NULL);
                            GetFileVersion(pNetSPNew->m_szPath, pNetSPNew->m_szVersionEnglish, 
                                NULL, NULL, NULL);
                        }
                    }
                    else
                    {
                        pNetSPNew->m_bRegistryOK = FALSE;
                    }

                    RegCloseKey(hkeyDLL);
                }
                else
                {
                    pNetSPNew->m_bRegistryOK = FALSE;
                }

                
                if (!bTCPIPFound &&
                    DXUtil_strcmpi(pNetSPNew->m_szGuid, TEXT("{EBFE7BA0-628D-11D2-AE0F-006097B01411}")) == 0)
                {
                    if( DXUtil_strcmpi(pNetSPNew->m_szFile, TEXT("dpnet.dll") ) != 0)
                        pNetSPNew->m_bRegistryOK = FALSE;

                    lstrcpy( szEnglishDescription, TEXT("DirectPlay8 TCP/IP Service Provider") );
                    bTCPIPFound = TRUE;
                }

                if (!bIPXFound &&
                    DXUtil_strcmpi(pNetSPNew->m_szGuid, TEXT("{53934290-628D-11D2-AE0F-006097B01411}")) == 0)
                {
                    if( DXUtil_strcmpi(pNetSPNew->m_szFile, TEXT("dpnet.dll") ) != 0)
                        pNetSPNew->m_bRegistryOK = FALSE;

                    lstrcpy( szEnglishDescription, TEXT("DirectPlay8 IPX Service Provider") );
                    bIPXFound = TRUE;
                }
                if (!bModemFound &&
                    DXUtil_strcmpi(pNetSPNew->m_szGuid, TEXT("{6D4A3650-628D-11D2-AE0F-006097B01411}")) == 0)
                {
                    if( DXUtil_strcmpi(pNetSPNew->m_szFile, TEXT("dpnet.dll") ) != 0)
                        pNetSPNew->m_bRegistryOK = FALSE;

                    lstrcpy( szEnglishDescription, TEXT("DirectPlay8 Modem Service Provider") );
                    bModemFound = TRUE;
                }
                if (!bSerialFound &&
                    DXUtil_strcmpi(pNetSPNew->m_szGuid, TEXT("{743B5D60-628D-11D2-AE0F-006097B01411}")) == 0)
                {
                    if( DXUtil_strcmpi(pNetSPNew->m_szFile, TEXT("dpnet.dll") ) != 0)
                        pNetSPNew->m_bRegistryOK = FALSE;

                    lstrcpy( szEnglishDescription, TEXT("DirectPlay8 Serial Service Provider") );
                    bSerialFound = TRUE;
                }

                lstrcpy(pNetSPNew->m_szName, szDescription);
                lstrcpy(pNetSPNew->m_szNameEnglish, szEnglishDescription);

                RegCloseKey(hkey2);
            }
            else
            {
                pNetSPNew->m_bRegistryOK = FALSE;
            }
            dwIndex++;
        }
        
        RegCloseKey(hkey);
    }

    if (!bTCPIPFound)
    {
        if (FAILED(hr = NewNetSP(pNetInfo, &pNetSPNew)))
            return hr;
        lstrcpy(pNetSPNew->m_szName, TEXT("DirectPlay8 TCP/IP Service Provider"));
        lstrcpy(pNetSPNew->m_szNameEnglish, TEXT("DirectPlay8 TCP/IP Service Provider"));
        pNetSPNew->m_bRegistryOK = FALSE;
    }
    if (!bIPXFound)
    {
        if (FAILED(hr = NewNetSP(pNetInfo, &pNetSPNew)))
            return hr;
        lstrcpy(pNetSPNew->m_szName, TEXT("DirectPlay8 IPX Service Provider"));
        lstrcpy(pNetSPNew->m_szNameEnglish, TEXT("DirectPlay8 IPX Service Provider"));
        pNetSPNew->m_bRegistryOK = FALSE;
    }
    if (!bModemFound)
    {
        if (FAILED(hr = NewNetSP(pNetInfo, &pNetSPNew)))
            return hr;
        lstrcpy(pNetSPNew->m_szName, TEXT("DirectPlay8 Modem Service Provider"));
        lstrcpy(pNetSPNew->m_szNameEnglish, TEXT("DirectPlay8 Modem Service Provider"));
        pNetSPNew->m_bRegistryOK = FALSE;
    }
    if (!bSerialFound)
    {
        if (FAILED(hr = NewNetSP(pNetInfo, &pNetSPNew)))
            return hr;
        lstrcpy(pNetSPNew->m_szName, TEXT("DirectPlay8 Serial Service Provider"));
        lstrcpy(pNetSPNew->m_szNameEnglish, TEXT("DirectPlay8 Serial Service Provider"));
        pNetSPNew->m_bRegistryOK = FALSE;
    }

    return S_OK;
}


/****************************************************************************
 *
 *  GetDX7LobbyableApps
 *
 ****************************************************************************/
HRESULT GetDX7LobbyableApps(NetInfo* pNetInfo)
{
    HRESULT hr;
    HKEY hkey = NULL;
    HKEY hkey2 = NULL;
    DWORD dwIndex;
    DWORD dwBufferLen;
    TCHAR szName[MAX_PATH+1];
    NetApp* pNetAppNew;

    if (ERROR_SUCCESS == RegOpenKeyEx(HKEY_LOCAL_MACHINE, TEXT("Software\\Microsoft\\DirectPlay\\Applications"), 0, KEY_READ, &hkey))
    {
        dwIndex = 0;
        while (ERROR_SUCCESS == RegEnumKey(hkey, dwIndex, szName, MAX_PATH+1))
        {
            BOOL bSkip = FALSE;

            // Bug 37989: skip any dplay app that has the DPLAPP_NOENUM flag set.
            if (ERROR_SUCCESS == RegOpenKeyEx(hkey, szName, 0, KEY_READ, &hkey2))
            {
                dwBufferLen = MAX_PATH;
                DWORD dwFlags = 0;
                dwBufferLen = sizeof(DWORD);
                DWORD dwType = 0;
                RegQueryValueEx(hkey2, TEXT("dwFlags"), 0, &dwType, (LPBYTE)&dwFlags, &dwBufferLen);
                if( (dwFlags & DPLAPP_NOENUM) != 0 )
                    bSkip = TRUE;
                RegCloseKey(hkey2);
            }

            if( bSkip )
            {
                dwIndex++;
                continue;
            }

            if (FAILED(hr = NewNetApp(pNetInfo, &pNetAppNew)))
            {
                RegCloseKey(hkey);
                return hr;
            }
            lstrcpy(pNetAppNew->m_szName, szName);
            pNetAppNew->m_dwDXVer = 7;
            
            if (ERROR_SUCCESS == RegOpenKeyEx(hkey, szName, 0, KEY_READ, &hkey2))
            {
                dwBufferLen = MAX_PATH;
                if (ERROR_SUCCESS == RegQueryValueEx(hkey2, TEXT("Path"), 0, NULL, (LPBYTE)pNetAppNew->m_szExePath, &dwBufferLen))
                {
                }
                else
                {
                    pNetAppNew->m_bRegistryOK = FALSE;
                }
                dwBufferLen = 100;
                if (ERROR_SUCCESS == RegQueryValueEx(hkey2, TEXT("File"), 0, NULL, (LPBYTE)pNetAppNew->m_szExeFile, &dwBufferLen))
                {
                    lstrcat(pNetAppNew->m_szExePath, TEXT("\\"));
                    if( lstrlen(pNetAppNew->m_szExePath) + lstrlen(pNetAppNew->m_szExeFile) < MAX_PATH )
                        lstrcat(pNetAppNew->m_szExePath, pNetAppNew->m_szExeFile);

                    WIN32_FIND_DATA findFileData;
                    HANDLE hFind = FindFirstFile(pNetAppNew->m_szExePath, &findFileData);
                    if (hFind == INVALID_HANDLE_VALUE)
                    {
                        pNetAppNew->m_bFileMissing = TRUE;
                        LoadString(NULL, IDS_FILEMISSING, pNetAppNew->m_szExeVersion, 50);
                        LoadString(NULL, IDS_FILEMISSING, pNetAppNew->m_szExeVersionEnglish, 50);
                    }
                    else
                    {
                        FindClose(hFind);
                        GetFileVersion(pNetAppNew->m_szExePath, pNetAppNew->m_szExeVersion, 
                            NULL, NULL, NULL);
                        GetFileVersion(pNetAppNew->m_szExePath, pNetAppNew->m_szExeVersionEnglish, 
                            NULL, NULL, NULL);
                    }
                }
                else
                {
                    pNetAppNew->m_bRegistryOK = FALSE;
                }
                dwBufferLen = 100;
                if (ERROR_SUCCESS == RegQueryValueEx(hkey2, TEXT("Guid"), 0, NULL, (LPBYTE)pNetAppNew->m_szGuid, &dwBufferLen))
                {
                }
                else
                {
                    pNetAppNew->m_bRegistryOK = FALSE;
                }

                RegCloseKey(hkey2);
            }
            else
            {
                pNetAppNew->m_bRegistryOK = FALSE;
            }
            dwIndex++;
        }
        
        RegCloseKey(hkey);
    }

    return S_OK;
}


/****************************************************************************
 *
 *  GetDX8LobbyableApps
 *
 ****************************************************************************/
HRESULT GetDX8LobbyableApps(NetInfo* pNetInfo)
{
    HRESULT hr;
    HKEY hkey = NULL;
    HKEY hkey2 = NULL;
    DWORD dwIndex;
    DWORD dwBufferLen;
    TCHAR szGuid[MAX_PATH+1];
    NetApp* pNetAppNew;

    if (ERROR_SUCCESS == RegOpenKeyEx(HKEY_LOCAL_MACHINE, TEXT("Software\\Microsoft\\DirectPlay8\\Applications"), 0, KEY_READ, &hkey))
    {
        dwIndex = 0;
        while (ERROR_SUCCESS == RegEnumKey(hkey, dwIndex, szGuid, MAX_PATH+1))
        {
            if (FAILED(hr = NewNetApp(pNetInfo, &pNetAppNew)))
            {
                RegCloseKey(hkey);
                return hr;
            }
            lstrcpy(pNetAppNew->m_szGuid, szGuid);
            pNetAppNew->m_dwDXVer = 8;
            
            if (ERROR_SUCCESS == RegOpenKeyEx(hkey, szGuid, 0, KEY_READ, &hkey2))
            {
                dwBufferLen = MAX_PATH;
                if (ERROR_SUCCESS == RegQueryValueEx(hkey2, TEXT("ExecutablePath"), 0, NULL, (LPBYTE)pNetAppNew->m_szExePath, &dwBufferLen))
                {
                }
                else
                {
                    pNetAppNew->m_bRegistryOK = FALSE;
                }
                dwBufferLen = 100;
                if (ERROR_SUCCESS == RegQueryValueEx(hkey2, TEXT("ExecutableFilename"), 0, NULL, (LPBYTE)pNetAppNew->m_szExeFile, &dwBufferLen))
                {
                    lstrcat(pNetAppNew->m_szExePath, TEXT("\\"));
                    if( lstrlen(pNetAppNew->m_szExePath) + lstrlen(pNetAppNew->m_szExeFile) < MAX_PATH )
                        lstrcat(pNetAppNew->m_szExePath, pNetAppNew->m_szExeFile);

                    WIN32_FIND_DATA findFileData;
                    HANDLE hFind = FindFirstFile(pNetAppNew->m_szExePath, &findFileData);
                    if (hFind == INVALID_HANDLE_VALUE)
                    {
                        pNetAppNew->m_bFileMissing = TRUE;
                        LoadString(NULL, IDS_FILEMISSING, pNetAppNew->m_szExeVersion, 50);
                        LoadString(NULL, IDS_FILEMISSING, pNetAppNew->m_szExeVersionEnglish, 50);
                    }
                    else
                    {
                        FindClose(hFind);
                        GetFileVersion(pNetAppNew->m_szExePath, pNetAppNew->m_szExeVersion, 
                            NULL, NULL, NULL);
                        GetFileVersion(pNetAppNew->m_szExePath, pNetAppNew->m_szExeVersionEnglish, 
                            NULL, NULL, NULL);
                    }
                }
                else
                {
                    pNetAppNew->m_bRegistryOK = FALSE;
                }


                dwBufferLen = MAX_PATH;
                if (ERROR_SUCCESS == RegQueryValueEx(hkey2, TEXT("LauncherPath"), 0, NULL, (LPBYTE)pNetAppNew->m_szLauncherPath, &dwBufferLen))
                {
                }
                else
                {
                    pNetAppNew->m_bRegistryOK = FALSE;
                }
                dwBufferLen = 100;
                if (ERROR_SUCCESS == RegQueryValueEx(hkey2, TEXT("LauncherFilename"), 0, NULL, (LPBYTE)pNetAppNew->m_szLauncherFile, &dwBufferLen))
                {
                    lstrcat(pNetAppNew->m_szLauncherPath, TEXT("\\"));
                    if( lstrlen(pNetAppNew->m_szLauncherPath) + lstrlen(pNetAppNew->m_szLauncherFile) < MAX_PATH )
                        lstrcat(pNetAppNew->m_szLauncherPath, pNetAppNew->m_szLauncherFile);

                    WIN32_FIND_DATA findFileData;
                    HANDLE hFind = FindFirstFile(pNetAppNew->m_szLauncherPath, &findFileData);
                    if (hFind == INVALID_HANDLE_VALUE)
                    {
                        pNetAppNew->m_bFileMissing = TRUE;
                        LoadString(NULL, IDS_FILEMISSING, pNetAppNew->m_szLauncherVersion, 50);
                        LoadString(NULL, IDS_FILEMISSING, pNetAppNew->m_szLauncherVersionEnglish, 50);
                    }
                    else
                    {
                        FindClose(hFind);
                        GetFileVersion(pNetAppNew->m_szExePath, pNetAppNew->m_szLauncherVersion, 
                            NULL, NULL, NULL);
                        GetFileVersion(pNetAppNew->m_szExePath, pNetAppNew->m_szLauncherVersionEnglish, 
                            NULL, NULL, NULL);
                    }
                }
                else
                {
                    pNetAppNew->m_bRegistryOK = FALSE;
                }


                dwBufferLen = 100;
                if (ERROR_SUCCESS == RegQueryValueEx(hkey2, TEXT("ApplicationName"), 0, NULL, (LPBYTE)pNetAppNew->m_szName, &dwBufferLen))
                {
                }
                else
                {
                    pNetAppNew->m_bRegistryOK = FALSE;
                }

                RegCloseKey(hkey2);
            }
            else
            {
                pNetAppNew->m_bRegistryOK = FALSE;
            }
            dwIndex++;
        }
        
        RegCloseKey(hkey);
    }

    return S_OK;
}


/****************************************************************************
 *
 *  DestroyNetInfo
 *
 ****************************************************************************/
VOID DestroyNetInfo(NetInfo* pNetInfo)
{
    if( pNetInfo )
    {
        NetSP* pNetSP;
        NetSP* pNetSPNext;

        for (pNetSP = pNetInfo->m_pNetSPFirst; pNetSP != NULL; 
            pNetSP = pNetSPNext)
        {
            pNetSPNext = pNetSP->m_pNetSPNext;
            delete pNetSP;
        }

        NetApp* pNetApp;
        NetApp* pNetAppNext;

        for (pNetApp = pNetInfo->m_pNetAppFirst; pNetApp != NULL; 
            pNetApp = pNetAppNext)
        {
            pNetAppNext = pNetApp->m_pNetAppNext;
            delete pNetApp;
        }

        delete pNetInfo;
    }
}


/****************************************************************************
 *
 *  DiagnoseNetInfo
 *
 ****************************************************************************/
VOID DiagnoseNetInfo(SysInfo* pSysInfo, NetInfo* pNetInfo)
{
    NetSP* pNetSP;
    NetApp* pNetApp;
    TCHAR szMessage[500];
    TCHAR szFmt[500];
    BOOL bProblem = FALSE;
    BOOL bShouldReinstall = FALSE;

    _tcscpy( pSysInfo->m_szNetworkNotes, TEXT("") );
    _tcscpy( pSysInfo->m_szNetworkNotesEnglish, TEXT("") );

    // Report any problems
    if( pNetInfo != NULL )
    {
        for (pNetSP = pNetInfo->m_pNetSPFirst; pNetSP != NULL; pNetSP = pNetSP->m_pNetSPNext)
        {
            if (!pNetSP->m_bRegistryOK)
            {
                LoadString(NULL, IDS_SPREGISTRYERRORFMT, szFmt, 500);
                wsprintf(szMessage, szFmt, pNetSP->m_szName);
                _tcscat(pSysInfo->m_szNetworkNotes, szMessage);

                LoadString(NULL, IDS_SPREGISTRYERRORFMT_ENGLISH, szFmt, 500);
                wsprintf(szMessage, szFmt, pNetSP->m_szName);
                _tcscat(pSysInfo->m_szNetworkNotesEnglish, szMessage);

                pNetSP->m_bProblem = TRUE;
                bProblem = TRUE;
                bShouldReinstall = TRUE;
            }
            else if (pNetSP->m_bFileMissing)
            {
                LoadString(NULL, IDS_FILEMISSING, pNetSP->m_szVersion, 50);
                LoadString(NULL, IDS_SPFILEMISSINGFMT, szFmt, 500);
                wsprintf(szMessage, szFmt, pNetSP->m_szFile, pNetSP->m_szName);
                _tcscat(pSysInfo->m_szNetworkNotes, szMessage);

                LoadString(NULL, IDS_FILEMISSING_ENGLISH, pNetSP->m_szVersion, 50);
                LoadString(NULL, IDS_SPFILEMISSINGFMT_ENGLISH, szFmt, 500);
                wsprintf(szMessage, szFmt, pNetSP->m_szFile, pNetSP->m_szName);
                _tcscat(pSysInfo->m_szNetworkNotesEnglish, szMessage);

                pNetSP->m_bProblem = TRUE;
                bShouldReinstall = TRUE;
                bProblem = TRUE;
            }
        }
        for (pNetApp = pNetInfo->m_pNetAppFirst; pNetApp != NULL; pNetApp = pNetApp->m_pNetAppNext)
        {
            if (!pNetApp->m_bRegistryOK)
            {
                LoadString(NULL, IDS_APPREGISTRYERRORFMT, szFmt, 500);
                wsprintf(szMessage, szFmt, pNetApp->m_szName);
                _tcscat(pSysInfo->m_szNetworkNotes, szMessage);

                LoadString(NULL, IDS_APPREGISTRYERRORFMT_ENGLISH, szFmt, 500);
                wsprintf(szMessage, szFmt, pNetApp->m_szName);
                _tcscat(pSysInfo->m_szNetworkNotesEnglish, szMessage);

                pNetApp->m_bProblem = TRUE;
                bProblem = TRUE;
            }
    /* 26298: Don't scare users with this warning...it's usually harmless:
            else if (pNetApp->m_bFileMissing)
            {
                LoadString(NULL, IDS_FILEMISSING, pNetApp->m_szVersion, 50);
                LoadString(NULL, IDS_APPFILEMISSINGFMT, szFmt, 500);
                wsprintf(szMessage, szFmt, pNetApp->m_szFile, pNetApp->m_szName);
                _tcscat(pSysInfo->m_szNetworkNotes, szMessage);
                pNetApp->m_bProblem = TRUE;
                bProblem = TRUE;
            }
    */
        }
    }
    else
    {
        bProblem = TRUE;
        bShouldReinstall = TRUE;
    }

    if( bShouldReinstall )
    {
        BOOL bTellUser = FALSE;

        // Figure out if the user can install DirectX
        if( BIsPlatform9x() )
            bTellUser = TRUE;
        else if( BIsWin2k() && pSysInfo->m_dwDirectXVersionMajor >= 8 )
            bTellUser = TRUE;

        if( bTellUser )
        {
            LoadString(NULL, IDS_REINSTALL_DX, szMessage, 500);
            _tcscat( pSysInfo->m_szNetworkNotes, szMessage);

            LoadString(NULL, IDS_REINSTALL_DX_ENGLISH, szMessage, 500);
            _tcscat( pSysInfo->m_szNetworkNotesEnglish, szMessage);
        }
    }

    if (!bProblem)
    {
        LoadString(NULL, IDS_NOPROBLEM, szMessage, 500);
        _tcscat(pSysInfo->m_szNetworkNotes, szMessage);

        LoadString(NULL, IDS_NOPROBLEM_ENGLISH, szMessage, 500);
        _tcscat(pSysInfo->m_szNetworkNotesEnglish, szMessage);
    }

    // Show test results or instructions to run test:
    if (pNetInfo && pNetInfo->m_testResult.m_bStarted)
    {
        LoadString(NULL, IDS_DPLAYRESULTS, szMessage, 500);
        _tcscat( pSysInfo->m_szNetworkNotes, szMessage );
        _tcscat( pSysInfo->m_szNetworkNotes, pNetInfo->m_testResult.m_szDescription );
        _tcscat( pSysInfo->m_szNetworkNotes, TEXT("\r\n") );

        LoadString(NULL, IDS_DPLAYRESULTS_ENGLISH, szMessage, 500);
        _tcscat( pSysInfo->m_szNetworkNotesEnglish, szMessage );
        _tcscat( pSysInfo->m_szNetworkNotesEnglish, pNetInfo->m_testResult.m_szDescriptionEnglish );
        _tcscat( pSysInfo->m_szNetworkNotesEnglish, TEXT("\r\n") );
    }
    else
    {
        LoadString(NULL, IDS_DPLAYINSTRUCTIONS, szMessage, 500);
        _tcscat(pSysInfo->m_szNetworkNotes, szMessage);

        LoadString(NULL, IDS_DPLAYINSTRUCTIONS_ENGLISH, szMessage, 500);
        _tcscat(pSysInfo->m_szNetworkNotesEnglish, szMessage);
    }
}


/****************************************************************************
 *
 *  ConvertStringToGUID
 *
 ****************************************************************************/
BOOL ConvertStringToGUID(const WCHAR* strBuffer, GUID* lpguid)
{
    UINT aiTmp[10];

    if( swscanf( strBuffer, L"{%8X-%4X-%4X-%2X%2X-%2X%2X%2X%2X%2X%2X}",
                    &lpguid->Data1, 
                    &aiTmp[0], &aiTmp[1], 
                    &aiTmp[2], &aiTmp[3],
                    &aiTmp[4], &aiTmp[5],
                    &aiTmp[6], &aiTmp[7],
                    &aiTmp[8], &aiTmp[9] ) != 11 )
    {
    	ZeroMemory(lpguid, sizeof(GUID));
        return FALSE;
    }
    else
    {
        lpguid->Data2       = (USHORT) aiTmp[0];
        lpguid->Data3       = (USHORT) aiTmp[1];
        lpguid->Data4[0]    = (BYTE) aiTmp[2];
        lpguid->Data4[1]    = (BYTE) aiTmp[3];
        lpguid->Data4[2]    = (BYTE) aiTmp[4];
        lpguid->Data4[3]    = (BYTE) aiTmp[5];
        lpguid->Data4[4]    = (BYTE) aiTmp[6];
        lpguid->Data4[5]    = (BYTE) aiTmp[7];
        lpguid->Data4[6]    = (BYTE) aiTmp[8];
        lpguid->Data4[7]    = (BYTE) aiTmp[9];
        return TRUE;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\multimedia\directx\dxdiag\main.cpp ===
/****************************************************************************
 *
 *    File: main.cpp 
 * Project: DxDiag (DirectX Diagnostic Tool)
 *  Author: Mike Anderson (manders@microsoft.com)
 * Purpose: Main file for DxDiag.
 *
 * (C) Copyright 1998 Microsoft Corp.  All rights reserved.
 *
 * DxDiag Command-line options:
 *      <none> : Run with graphical user interface
 *      -ghost : Show Ghost Display Devices option (this flag must come next)
 *   -saveonly : GUI, just choose where to save text file, save, then exit
 *          -d : No GUI, generate comma-separated-values (csv) file
 *          -p : No GUI, generate text file named dxdiag.txt
 *      <path> : No GUI, generate text file named <path>
 *
 ****************************************************************************/

#define STRICT
#include <tchar.h>
#include <Windows.h>
#include <basetsd.h>
#include <process.h>
#include <commctrl.h>
#include <richedit.h>
#include <commdlg.h>
#include <stdio.h>
#include <shellapi.h>
#include <mmsystem.h>
#include <wbemidl.h>
#include <objbase.h>
#include <d3d.h>
#include <dsound.h>
#include <dmerror.h>
#include <dplay.h>
#include <shlobj.h>
#include <shfolder.h>
#include "resource.h"
#include "reginfo.h"
#include "sysinfo.h"
#include "fileinfo.h"
#include "dispinfo.h"
#include "sndinfo.h"
#include "musinfo.h"
#include "showinfo.h"
#include "inptinfo.h"
#include "netinfo.h"
#include "testdd.h"
#include "testagp.h"
#include "testd3d8.h"
#include "testsnd.h"
#include "testmus.h"
#include "testnet.h"
#include "save.h"
#include "ghost.h"

#define WM_COMMAND_REAL             (WM_APP+2)
#define WM_QUERYSKIP                (WM_APP+3)
#define WM_QUERYSKIP_REAL           (WM_APP+4)
#define WM_NETMEETINGWARN           (WM_APP+5)
#define WM_NETMEETINGWARN_REAL      (WM_APP+6)
#define WM_REPORTERROR              (WM_APP+7)
#define WM_REPORTERROR_REAL         (WM_APP+8)
#define WM_APP_PROGRESS             (WM_APP+10)

struct UI_MSG_NODE
{
    UINT         message;
    WPARAM       wparam;
    LPARAM       lparam;
    UI_MSG_NODE* pNext;
};

struct DXFILE_SORT_INFO
{
    LONG nSortDirection;
    DWORD dwColumnToSort;
};

// This is the only global function in this file:
BOOL BTranslateError(HRESULT hr, TCHAR* psz, BOOL bEnglish = FALSE);

static BOOL OldWindowsVersion(VOID);
static VOID ReportError(LONG idsDescription, HRESULT hr = S_OK);
static VOID ReportErrorReal(LONG idsDescription, HRESULT hr);
static INT_PTR CALLBACK DialogProc(HWND hwndDlg, UINT uMsg, WPARAM wParam, LPARAM lParam);
static INT_PTR CALLBACK PageDialogProc(HWND hwndDlg, UINT uMsg, WPARAM wParam, LPARAM lParam);
static HRESULT CreateTabs(HWND hwndTabs);
static HRESULT CleanupPage(HWND hwndTabs, INT iPage);
static HRESULT SetupPage(HWND hwndTabs, INT iPage);
static HRESULT SetupHelpPage(HWND hwndTabs);
static VOID ShowBullets(VOID);
static VOID HideBullets(VOID);
static HRESULT SetupDxFilesPage(VOID);
static HRESULT SetupDisplayPage(LONG iDisplay);
static HRESULT SetupSoundPage(LONG iSound);
static HRESULT SetupMusicPage(VOID);
static HRESULT SetupInputPage(VOID);
static HRESULT SetupInputDevices9x(VOID);
static HRESULT SetupInputDevicesNT(VOID);
static HRESULT SetupNetworkPage(VOID);
static HRESULT SetupStillStuckPage(VOID);
static HRESULT CreateFileInfoColumns(HWND hwndList, BOOL bDrivers);
static HRESULT CreateMusicColumns(HWND hwndList);
static HRESULT AddFileInfo(HWND hwndList, FileInfo* pFileInfoFirst, BOOL bDrivers = FALSE);
static HRESULT AddMusicPortInfo(HWND hwndList, MusicInfo* pMusicInfo);
static HRESULT ScanSystem(VOID);
static VOID SaveInfo(VOID);
static VOID ToggleDDAccel(VOID);
static VOID ToggleD3DAccel(VOID);
static VOID ToggleAGPSupport(VOID);
static VOID ToggleDMAccel(VOID);
static VOID SaveAndSendBug(TCHAR* szPath);
static VOID OverrideDDRefresh(VOID);
static INT_PTR CALLBACK OverrideRefreshDialogProc(HWND hwndDlg, UINT uMsg, WPARAM wParam, LPARAM lParam);
static VOID ShowHelp(VOID);
static VOID RestoreDrivers(VOID);
static BOOL BCanRestoreDrivers(VOID);
static VOID HandleSndSliderChange(INT nScrollCode, INT nPos);
static VOID TroubleShoot( BOOL bTroubleShootSound );
static BOOL QueryCrashProtection( TCHAR* strKey, TCHAR* strValue, int nSkipQuestionID, DWORD dwCurrentStep );
static VOID EnterCrashProtection( TCHAR* strKey, TCHAR* strValue, DWORD dwCurrentStep );
static VOID LeaveCrashProtection( TCHAR* strKey, TCHAR* strValue, DWORD dwCurrentStep );
static VOID TestD3D(HWND hwndMain, DisplayInfo* pDisplayInfo);
static BOOL GetTxtPath( TCHAR* strTxtPath );
static VOID SetTxtPath( TCHAR* strTxtPath );
static UINT WINAPI UIThreadProc( LPVOID lpParameter );

static BOOL s_bGUI = FALSE;
static BOOL s_bGhost = FALSE;
static BOOL s_bSaveOnly = FALSE;
static HWND s_hwndMain = NULL;
static HWND s_hwndCurPage = NULL;
static HHOOK s_hHook = NULL;
static LONG s_lwCurPage = -1;
static LONG s_iPageDisplayFirst = -1;
static LONG s_iPageSoundFirst = -1;
static LONG s_iPageMusic = -1;
static LONG s_iPageInput = -1;
static LONG s_iPageNetwork = -1;
static LONG s_iPageStillStuck = -1;
static HIMAGELIST s_himgList = NULL;
static SysInfo s_sysInfo;
static FileInfo* s_pDxWinComponentsFileInfoFirst = NULL;
static FileInfo* s_pDxComponentsFileInfoFirst = NULL;
static DisplayInfo* s_pDisplayInfoFirst = NULL;
static LONG s_numDisplayInfo = 0;
static SoundInfo* s_pSoundInfoFirst = NULL;
static LONG s_numSoundInfo = 0;
static MusicInfo* s_pMusicInfo = NULL;
static InputInfo* s_pInputInfo = NULL;
static NetInfo* s_pNetInfo = NULL;
static ShowInfo* s_pShowInfo = NULL;

static CRITICAL_SECTION s_cs;
static DWORD  s_dwMainThreadID      = 0;
static HANDLE s_hUIThread           = NULL;
static HANDLE s_hQuerySkipEvent     = NULL;
static DWORD  s_nSkipComponent      = 0;
static BOOL   s_bQuerySkipAllow     = FALSE;
static UI_MSG_NODE* s_pUIMsgHead    = NULL;
static HANDLE s_hUIMsgEvent         = NULL;
static BOOL   s_bScanDone           = FALSE;

static DXFILE_SORT_INFO s_sortInfo;
static HINSTANCE g_hInst = NULL;
static BOOL s_bUseSystemInfo = TRUE;
static BOOL s_bUseDisplay    = TRUE;
static BOOL s_bUseDSound     = TRUE;
static BOOL s_bUseDMusic     = TRUE;
static BOOL s_bUseDInput     = TRUE;
static BOOL s_bUseDPlay      = TRUE;
static BOOL s_bUseDShow      = TRUE;

class CWMIHelper
{
public:
    CWMIHelper();
    ~CWMIHelper();
};

CWMIHelper     g_WMIHelper;
IWbemServices* g_pIWbemServices;




/****************************************************************************
 *
 *  WinMain - Entry point for DxDiag program
 *
 *  Command-line options:
 *      <none> : Run with graphical user interface
 *      -ghost : Show Ghost Display Devices option (this flag must come next)
 *   -saveonly : GUI, just choose where to save text file, save, then exit
 *          -l : No GUI, generate shortcut to DxDiag, then exit
 *          -d : No GUI, generate comma-separated-values (csv) file
 *          -p : No GUI, generate text file named dxdiag.txt
 *      <path> : No GUI, generate text file named <path>
 *
 ****************************************************************************/
INT WINAPI WinMain(HINSTANCE hinstance, HINSTANCE hPrevInstance, 
                   LPSTR lpCmdLine, INT nCmdShow)
{
    HRESULT hr;
    HINSTANCE hinstRichEdit = NULL;

    g_hInst = hinstance;
    s_hQuerySkipEvent = CreateEvent( NULL, FALSE, FALSE, NULL );
    s_hUIMsgEvent = CreateEvent( NULL, FALSE, FALSE, NULL );
    InitializeCriticalSection( &s_cs );

#ifdef UNICODE
    if (!BIsPlatformNT())
    {
        // Unicode version only runs on WinNT.
        // Can't use ReportError because it calls Unicode APIs
        CHAR szDescription[MAX_PATH];
        CHAR szMessage[MAX_PATH];
        CHAR szFmt2[MAX_PATH];
        CHAR szTitle[MAX_PATH];

        LoadStringA(NULL, IDS_UNICODEREQUIRESNT, szDescription, MAX_PATH);
        LoadStringA(NULL, IDS_ERRORFMT2, szFmt2, MAX_PATH);
        LoadStringA(NULL, IDS_ERRORTITLE, szTitle, MAX_PATH);
        wsprintfA(szMessage, szFmt2, szDescription);
        MessageBoxA(s_hwndMain, szMessage, szTitle, MB_OK);
        return 1;
    }
#endif
    TCHAR* pszCmdLine = GetCommandLine();

    if( pszCmdLine )
    {
        // Skip past program name (first token in command line).
        if (*pszCmdLine == TEXT('"'))  // Check for and handle quoted program name
        {
            pszCmdLine++;
            // Scan, and skip over, subsequent characters until  another
            // double-quote or a null is encountered
            while (*pszCmdLine && (*pszCmdLine != TEXT('"')))
                pszCmdLine++;
            // If we stopped on a double-quote (usual case), skip over it.
            if (*pszCmdLine == TEXT('"'))            
                pszCmdLine++;    
        }
        else    // First token wasn't a quote
        {
            while (*pszCmdLine > TEXT(' '))
                pszCmdLine++;
        }
        // Skip past any white space preceeding the second token.
        while (*pszCmdLine && (*pszCmdLine <= TEXT(' ')))
            pszCmdLine++;
    
        // Check for ghost flag (which must appear before any 
        // other flags except -media due to this implementation)
        if (_tcsstr(pszCmdLine, TEXT("-ghost")) != NULL)
        {
            s_bGhost = TRUE;
            pszCmdLine += lstrlen(TEXT("-ghost"));
    
            // Skip past any white space
            while (*pszCmdLine && (*pszCmdLine <= TEXT(' ')))
                pszCmdLine++;
        }
    
        // Check command line to determine whether to run in GUI mode
        if (lstrcmp(pszCmdLine, TEXT("")) == 0) 
            s_bGUI = TRUE;
    
        if (lstrcmp(pszCmdLine, TEXT("-saveonly")) == 0)
        {
            s_bGUI = TRUE;
            s_bSaveOnly = TRUE;
        }
    }

    // Check for pre-Win95 or pre-NT5
    if (OldWindowsVersion())
    {
        ReportError(IDS_OLDWINDOWSVERSION);
        return 1;
    }

    if (s_bSaveOnly)
    {
        // Save a text file using GUI and exit

        // ******* GetSystemInfo (SI:1) ********
        if( s_bUseSystemInfo )
        {
            s_bUseSystemInfo = QueryCrashProtection( DXD_IN_SI_KEY, DXD_IN_SI_VALUE, IDS_SI, 1 );
            if( s_bUseSystemInfo )
            {
                EnterCrashProtection( DXD_IN_SI_KEY, DXD_IN_SI_VALUE, 1 );
                GetSystemInfo(&s_sysInfo);
                LeaveCrashProtection( DXD_IN_SI_KEY, DXD_IN_SI_VALUE, 1 );
            }
        }

        // ******* GetBasicDisplayInfo (DD:1) ********
        if( s_bUseDisplay )
        {
            s_bUseDisplay = QueryCrashProtection( DXD_IN_DD_KEY, DXD_IN_DD_VALUE, IDS_DD, 1 );
            if( s_bUseDisplay )
            {
                EnterCrashProtection( DXD_IN_DD_KEY, DXD_IN_DD_VALUE, 1 );
                if (FAILED(hr = GetBasicDisplayInfo(&s_pDisplayInfoFirst)))
                    ReportError(IDS_NOBASICDISPLAYINFO, hr);
                LeaveCrashProtection( DXD_IN_DD_KEY, DXD_IN_DD_VALUE, 1 );
            }
        }

        // ******* GetBasicSoundInfo (DS:1) ********
        if( s_bUseDSound )
        {
            s_bUseDSound = QueryCrashProtection( DXD_IN_DS_KEY, DXD_IN_DS_VALUE, IDS_DS, 1 );
            if( s_bUseDSound )
            {
                EnterCrashProtection( DXD_IN_DS_KEY, DXD_IN_DS_VALUE, 1 );
                if (FAILED(hr = GetBasicSoundInfo(&s_pSoundInfoFirst)))
                    ReportError(IDS_NOBASICSOUNDINFO, hr);  // (but keep running)
                LeaveCrashProtection( DXD_IN_DS_KEY, DXD_IN_DS_VALUE, 1 );
            }
        }

        // ******* GetBasicMusicInfo (DM:1)  ********
        if( s_bUseDMusic )
        {
            s_bUseDMusic = QueryCrashProtection( DXD_IN_DM_KEY, DXD_IN_DM_VALUE, IDS_DM, 1 );
            if( s_bUseDMusic )
            {
                EnterCrashProtection( DXD_IN_DM_KEY, DXD_IN_DM_VALUE, 1 );
                if (FAILED(hr = GetBasicMusicInfo(&s_pMusicInfo)))
                    ReportError(IDS_NOBASICMUSICINFO, hr);  // (but keep running)
                LeaveCrashProtection( DXD_IN_DM_KEY, DXD_IN_DM_VALUE, 1 );
            }
        }

        // ******* ScanSystem ********
        ScanSystem();

        SaveInfo();
        TCHAR szTitle[MAX_PATH];
        TCHAR szMessage[MAX_PATH];
        LoadString(NULL, IDS_APPFULLNAME, szTitle, MAX_PATH);
        LoadString(NULL, IDS_SAVEDONE, szMessage, MAX_PATH);
        MessageBox(NULL, szMessage, szTitle, MB_OK);
    }
    else if (!s_bGUI) 
    {
        // Save a text file with no GUI and exit
        TCHAR szPath[MAX_PATH];

        // ******* GetSystemInfo (SI:1) ********
        if( s_bUseSystemInfo )
        {
            s_bUseSystemInfo = QueryCrashProtection( DXD_IN_SI_KEY, DXD_IN_SI_VALUE, IDS_SI, 1 );
            if( s_bUseSystemInfo )
            {
                EnterCrashProtection( DXD_IN_SI_KEY, DXD_IN_SI_VALUE, 1 );
                GetSystemInfo(&s_sysInfo);
                LeaveCrashProtection( DXD_IN_SI_KEY, DXD_IN_SI_VALUE, 1 );
            }
        }

        // ******* GetBasicDisplayInfo (DD:1) ********
        if( s_bUseDisplay )
        {
            s_bUseDisplay = QueryCrashProtection( DXD_IN_DD_KEY, DXD_IN_DD_VALUE, IDS_DD, 1 );
            if( s_bUseDisplay )
            {
                EnterCrashProtection( DXD_IN_DD_KEY, DXD_IN_DD_VALUE, 1 );
                if (FAILED(hr = GetBasicDisplayInfo(&s_pDisplayInfoFirst)))
                    ReportError(IDS_NOBASICDISPLAYINFO, hr);
                LeaveCrashProtection( DXD_IN_DD_KEY, DXD_IN_DD_VALUE, 1 );
            }
        }

        // ******* GetBasicSoundInfo (DS:1) ********
        if( s_bUseDSound )
        {
            s_bUseDSound = QueryCrashProtection( DXD_IN_DS_KEY, DXD_IN_DS_VALUE, IDS_DS, 1 );
            if( s_bUseDSound )
            {
                EnterCrashProtection( DXD_IN_DS_KEY, DXD_IN_DS_VALUE, 1 );
                if (FAILED(hr = GetBasicSoundInfo(&s_pSoundInfoFirst)))
                    ReportError(IDS_NOBASICSOUNDINFO, hr);  // (but keep running)
                LeaveCrashProtection( DXD_IN_DS_KEY, DXD_IN_DS_VALUE, 1 );
            }
        }

        // ******* GetBasicMusicInfo (DM:1)  ********
        if( s_bUseDMusic )
        {
            s_bUseDMusic = QueryCrashProtection( DXD_IN_DM_KEY, DXD_IN_DM_VALUE, IDS_DM, 1 );
            if( s_bUseDMusic )
            {
                EnterCrashProtection( DXD_IN_DM_KEY, DXD_IN_DM_VALUE, 1 );
                if (FAILED(hr = GetBasicMusicInfo(&s_pMusicInfo)))
                    ReportError(IDS_NOBASICMUSICINFO, hr);  // (but keep running)
                LeaveCrashProtection( DXD_IN_DM_KEY, DXD_IN_DM_VALUE, 1 );
            }
        }

        // ******* ScanSystem ********
        ScanSystem();

        if( pszCmdLine )
        {
            if (_tcsicmp(pszCmdLine, TEXT("-d")) == 0)
            {
                wsprintf(szPath, TEXT("%s_%02d%02d%d_%02d%02d_Config.csv"),
                    s_sysInfo.m_szMachine, s_sysInfo.m_time.wMonth, 
                    s_sysInfo.m_time.wDay, s_sysInfo.m_time.wYear,  
                    s_sysInfo.m_time.wHour, s_sysInfo.m_time.wMinute);
                if (FAILED(hr = SaveAllInfoCsv(szPath, &s_sysInfo, 
                    s_pDxComponentsFileInfoFirst, 
                    s_pDisplayInfoFirst, s_pSoundInfoFirst, s_pInputInfo)))
                {
                    ReportError(IDS_PROBLEMSAVING, hr);
                    goto LCleanup;
                }
            }
            else
            {
                if (_tcsicmp(pszCmdLine, TEXT("-p")) == 0)
                    lstrcpy(szPath, TEXT("DxDiag.txt"));
                else
                    lstrcpyn(szPath, pszCmdLine, MAX_PATH);
                szPath[MAX_PATH-1] = 0;
                if (FAILED(hr = SaveAllInfo(szPath, &s_sysInfo, 
                    s_pDxWinComponentsFileInfoFirst, s_pDxComponentsFileInfoFirst, 
                    s_pDisplayInfoFirst, s_pSoundInfoFirst, s_pMusicInfo,
                    s_pInputInfo, s_pNetInfo, s_pShowInfo )))
                {
                    ReportError(IDS_PROBLEMSAVING, hr);
                    goto LCleanup;
                }
            }
        }
    }
    else
    {
        // Do full Windows GUI
        UINT dwUIThreadID;
        s_dwMainThreadID = GetCurrentThreadId();

        // Do scanning that must be done before the main dialog comes up:
        // ******* GetSystemInfo (SI:1) ********
        if( s_bUseSystemInfo )
        {
            s_bUseSystemInfo = QueryCrashProtection( DXD_IN_SI_KEY, DXD_IN_SI_VALUE, IDS_SI, 1 );
            if( s_bUseSystemInfo )
            {
                EnterCrashProtection( DXD_IN_SI_KEY, DXD_IN_SI_VALUE, 1 );
                GetSystemInfo(&s_sysInfo);
                LeaveCrashProtection( DXD_IN_SI_KEY, DXD_IN_SI_VALUE, 1 );
            }
        }

        // ******* GetBasicDisplayInfo (DD:1) ********
        if( s_bUseDisplay )
        {
            s_bUseDisplay = QueryCrashProtection( DXD_IN_DD_KEY, DXD_IN_DD_VALUE, IDS_DD, 1 );
            if( s_bUseDisplay )
            {
                EnterCrashProtection( DXD_IN_DD_KEY, DXD_IN_DD_VALUE, 1 );
                if (FAILED(hr = GetBasicDisplayInfo(&s_pDisplayInfoFirst)))
                    ReportError(IDS_NOBASICDISPLAYINFO, hr);
                LeaveCrashProtection( DXD_IN_DD_KEY, DXD_IN_DD_VALUE, 1 );
            }
        }

        // ******* GetBasicSoundInfo (DS:1) ********
        if( s_bUseDSound )
        {
            s_bUseDSound = QueryCrashProtection( DXD_IN_DS_KEY, DXD_IN_DS_VALUE, IDS_DS, 1 );
            if( s_bUseDSound )
            {
                EnterCrashProtection( DXD_IN_DS_KEY, DXD_IN_DS_VALUE, 1 );
                if (FAILED(hr = GetBasicSoundInfo(&s_pSoundInfoFirst)))
                    ReportError(IDS_NOBASICSOUNDINFO, hr);  // (but keep running)
                LeaveCrashProtection( DXD_IN_DS_KEY, DXD_IN_DS_VALUE, 1 );
            }
        }

        // ******* GetBasicMusicInfo (DM:1)  ********
        if( s_bUseDMusic )
        {
            s_bUseDMusic = QueryCrashProtection( DXD_IN_DM_KEY, DXD_IN_DM_VALUE, IDS_DM, 1 );
            if( s_bUseDMusic )
            {
                EnterCrashProtection( DXD_IN_DM_KEY, DXD_IN_DM_VALUE, 1 );
                if (FAILED(hr = GetBasicMusicInfo(&s_pMusicInfo)))
                    ReportError(IDS_NOBASICMUSICINFO, hr);  // (but keep running)
                LeaveCrashProtection( DXD_IN_DM_KEY, DXD_IN_DM_VALUE, 1 );
            }
        }

        if( NULL == s_hUIThread )
        {
            // Create the UI thread
            s_hUIThread = (HANDLE) _beginthreadex( NULL, 0, UIThreadProc, NULL, 0, &dwUIThreadID );

            // Wait for either s_hwndMain is set or the UI thread to exit
            for(;;)
            {
                // Stop of the s_hwndMain is set
                if( s_hwndMain )
                    break;
                // Stop if the UI thread is gone 
                if( WAIT_TIMEOUT != WaitForSingleObject( s_hUIThread, 0 ) )
                    break;
                Sleep(50);
            }
        }

        if( WAIT_TIMEOUT == WaitForSingleObject( s_hUIThread, 0 ) )
        {
            ScanSystem();

            s_bScanDone = TRUE;
            SendMessage( s_hwndMain, WM_APP_PROGRESS, 0, 0 );        

            // Done scaning, so wait for the UI thread to exit
            WaitForSingleObject( s_hUIThread, INFINITE );
        }

        CloseHandle( s_hUIThread );
    }

LCleanup:
    CloseHandle( s_hQuerySkipEvent );
    CloseHandle( s_hUIMsgEvent );
    DeleteCriticalSection( &s_cs );

    // Clean up:
    if (s_pDxComponentsFileInfoFirst != NULL)
        DestroyFileList(s_pDxComponentsFileInfoFirst);
    if (s_pDisplayInfoFirst != NULL)
        DestroyDisplayInfo(s_pDisplayInfoFirst);
    if (s_pSoundInfoFirst != NULL)
        DestroySoundInfo(s_pSoundInfoFirst);
    if (s_pMusicInfo != NULL)
        DestroyMusicInfo(s_pMusicInfo);
    if (s_pNetInfo != NULL)
        DestroyNetInfo(s_pNetInfo);
    if (s_pInputInfo != NULL)
        DestroyInputInfo(s_pInputInfo);
    if (s_pShowInfo != NULL)
        DestroyShowInfo(s_pShowInfo);
    ReleaseDigiSignData();

    return 0;
}





//-----------------------------------------------------------------------------
// Name: UIThreadProc
// Desc: 
//-----------------------------------------------------------------------------
UINT WINAPI UIThreadProc( LPVOID lpParameter )
{
    UNREFERENCED_PARAMETER( lpParameter );
    
    HICON hicon;
    HINSTANCE hinstRichEdit = NULL;
    HWND hMainDlg;
    MSG msg;

    hinstRichEdit = LoadLibrary(TEXT("RICHED20.DLL"));
    if (hinstRichEdit == NULL)
    {
        ReportError(IDS_NORICHED32);
        goto LCleanup;
    }
    InitCommonControls();

    s_himgList = ImageList_Create(16, 16, ILC_COLOR4 | ILC_MASK, 1, 0);
    if (s_himgList == NULL)
    {
        ReportError(IDS_NOIMAGELIST);
        goto LCleanup;
    }
    hicon = LoadIcon(g_hInst, MAKEINTRESOURCE(IDI_CAUTION)); 
    if (hicon == NULL)
    {
        ReportError(IDS_NOICON);
        goto LCleanup;
    }
    ImageList_AddIcon(s_himgList, hicon); 

    {
        // BUG 21632: Warn user if DirectX version is newer than DxDiag version
        // (Note: don't check down to the build number, just major.minor.revision)
        if( !BIsWinNT() )
        {
            DWORD dwMajorDX = 0, dwMinorDX = 0, dwRevisionDX = 0, dwBuildDX = 0;
            DWORD dwMajorDXD = 0, dwMinorDXD = 0, dwRevisionDXD = 0, dwBuildDXD = 0;
            if( _stscanf(s_sysInfo.m_szDirectXVersion, TEXT("%d.%d.%d.%d"), &dwMajorDX, &dwMinorDX, &dwRevisionDX, &dwBuildDX) != 4 )
            {
                dwMajorDX = 0;
                dwMinorDX = 0;
                dwRevisionDX = 0;
                dwBuildDX = 0;
            }
            if( _stscanf(s_sysInfo.m_szDxDiagVersion, TEXT("%d.%d.%d.%d"), &dwMajorDXD, &dwMinorDXD, &dwRevisionDXD, &dwBuildDXD) != 4 )
            {
                dwMajorDXD = 0;
                dwMinorDXD = 0;
                dwRevisionDXD = 0;
                dwBuildDXD = 0;
            }

            if (dwMajorDX > dwMajorDXD ||
                dwMajorDX == dwMajorDXD && dwMinorDX > dwMinorDXD ||
                dwMajorDX == dwMajorDXD && dwMinorDX == dwMinorDXD && dwRevisionDX > dwRevisionDXD)
            {
                TCHAR szFmt[MAX_PATH];
                TCHAR szMessage[MAX_PATH];
                TCHAR szTitle[MAX_PATH];
                LoadString(NULL, IDS_DXDIAGISOLDFMT, szFmt, MAX_PATH);
                wsprintf(szMessage, szFmt, s_sysInfo.m_szDirectXVersion, s_sysInfo.m_szDxDiagVersion);
                LoadString(NULL, IDS_APPFULLNAME, szTitle, MAX_PATH);
                MessageBox(NULL, szMessage, szTitle, MB_OK);
            }
        }
    }

    // Display the main dialog box.
    hMainDlg = CreateDialog( g_hInst, MAKEINTRESOURCE(IDD_MAINDIALOG), 
                             NULL, DialogProc );

     // Windows messages are available   
    DWORD dwResult;
    BOOL bDone;
    bDone = FALSE;
    for(;;)
    {
        dwResult = MsgWaitForMultipleObjects( 1, &s_hUIMsgEvent, FALSE, 
                                              INFINITE, QS_ALLEVENTS | QS_ALLINPUT | QS_ALLPOSTMESSAGE );
        switch( dwResult )
        {
            case WAIT_OBJECT_0:
            {
                if( s_pUIMsgHead )
                {
                    UI_MSG_NODE* pCurNode = s_pUIMsgHead;
                    UINT         message    = pCurNode->message;
                    WPARAM       wparam     = pCurNode->wparam;
                    LPARAM       lparam     = pCurNode->lparam;;

                    s_pUIMsgHead = s_pUIMsgHead->pNext;

                    delete pCurNode;
                    if( s_pUIMsgHead )
                        SetEvent( s_hUIMsgEvent );

                    switch( message )
                    {
                    case WM_QUERYSKIP:
                        message = WM_QUERYSKIP_REAL;
                        break;
                    case WM_NETMEETINGWARN:
                        message = WM_NETMEETINGWARN_REAL;
                        break;
                    case WM_COMMAND:
                        message = WM_COMMAND_REAL;
                        break;
                    case WM_REPORTERROR:
                        message = WM_REPORTERROR_REAL;
                        break;
                    }

                    SendMessage( hMainDlg, message, wparam, lparam );
                }

                break;
            }

            case WAIT_OBJECT_0 + 1:
            {
                while( PeekMessage( &msg, NULL, 0, 0, PM_REMOVE ) ) 
                { 
                    if( msg.message == WM_QUIT )
                        bDone = TRUE;

                    if( !IsDialogMessage( hMainDlg, &msg ) )  
                    {
                        TranslateMessage( &msg ); 
                        DispatchMessage( &msg ); 
                    }
                }
                break;
            }
        }

        if( bDone )
            break;
    }

    DestroyWindow( hMainDlg );
    
LCleanup:
    while( s_pUIMsgHead )
    {
        UI_MSG_NODE* pDelete = s_pUIMsgHead;
        s_pUIMsgHead = s_pUIMsgHead->pNext;
        delete pDelete;
    }

    // Clean up:
    if (s_himgList != NULL)
        ImageList_Destroy(s_himgList);
    if (hinstRichEdit != NULL)
        FreeLibrary(hinstRichEdit);

    return 0;
}




/****************************************************************************
 *
 *  OldWindowsVersion - Returns TRUE if running NT before NT5 or pre-Win95.
 *
 ****************************************************************************/
BOOL OldWindowsVersion(VOID)
{
    OSVERSIONINFO OSVersionInfo;
    OSVersionInfo.dwOSVersionInfoSize = sizeof OSVersionInfo;
    GetVersionEx(&OSVersionInfo);
    if (OSVersionInfo.dwPlatformId == VER_PLATFORM_WIN32_NT)
    {
        if (OSVersionInfo.dwMajorVersion == 4)
        {
            if (s_bSaveOnly)
                return FALSE; // NT4 supported if "-saveonly" specified
            // Ask if user wants to run in saveonly mode:
            TCHAR szTitle[MAX_PATH];
            TCHAR szMessage[MAX_PATH];
            LoadString(NULL, IDS_APPFULLNAME, szTitle, MAX_PATH);
            LoadString(NULL, IDS_NT4SAVEONLY, szMessage, MAX_PATH);
            if (IDYES == MessageBox(NULL, szMessage, szTitle, MB_YESNO))
            {
                s_bSaveOnly = TRUE;
                s_bGUI = TRUE;
                return FALSE;
            }
        }
        if (OSVersionInfo.dwMajorVersion < 5)
            return TRUE; // NT4 and earlier not supported
    }
    else
    {
        if (OSVersionInfo.dwMajorVersion < 4)
            return TRUE; // Pre-Win95 not supported
    }
    return FALSE; // Win95 or later, or NT5 or later
}



//-----------------------------------------------------------------------------
// Name: ReportError
// Desc: 
//-----------------------------------------------------------------------------
VOID ReportError(LONG idsDescription, HRESULT hr)
{
    if( s_hwndMain )
        PostMessage( s_hwndMain, WM_REPORTERROR, (WPARAM) idsDescription, (LPARAM) hr );
    else
        ReportErrorReal( idsDescription, hr );
}




//-----------------------------------------------------------------------------
// Name: ReportErrorReal
// Desc: 
//-----------------------------------------------------------------------------
VOID ReportErrorReal(LONG idsDescription, HRESULT hr)
{
    TCHAR szDescription[MAX_PATH];
    TCHAR szMessage[MAX_PATH];
    TCHAR szFmt1[MAX_PATH];
    TCHAR szFmt2[MAX_PATH];
    TCHAR szTitle[MAX_PATH];
    TCHAR szErrorDesc[MAX_PATH];

    LoadString(NULL, idsDescription, szDescription, MAX_PATH);
    LoadString(NULL, IDS_ERRORFMT1, szFmt1, MAX_PATH);
    LoadString(NULL, IDS_ERRORFMT2, szFmt2, MAX_PATH);
    LoadString(NULL, IDS_ERRORTITLE, szTitle, MAX_PATH);

    if (FAILED(hr))
    {
        BTranslateError(hr, szErrorDesc);
        wsprintf(szMessage, szFmt1, szDescription, hr, szErrorDesc);
    }
    else
    {
        wsprintf(szMessage, szFmt2, szDescription);
    }
    
    if (s_bGUI)
        MessageBox(s_hwndMain, szMessage, szTitle, MB_OK);
    else
        _tprintf(szMessage);
}


typedef BOOL (WINAPI* PfnCoSetProxyBlanket)(
                                    IUnknown                 *pProxy,
                                    DWORD                     dwAuthnSvc,
                                    DWORD                     dwAuthzSvc,
                                    OLECHAR                  *pServerPrincName,
                                    DWORD                     dwAuthnLevel,
                                    DWORD                     dwImpLevel,
                                    RPC_AUTH_IDENTITY_HANDLE  pAuthInfo,
                                    DWORD                     dwCapabilities );

/****************************************************************************
 *
 *  CWMIHelper - Inits DCOM and g_pIWbemServices
 *
 ****************************************************************************/
CWMIHelper::CWMIHelper(VOID)
{
    HRESULT       hr;
    IWbemLocator* pIWbemLocator = NULL;
    BSTR          pNamespace    = NULL;
    HINSTANCE     hinstOle32 = NULL;

    CoInitialize( 0 );
    hr = CoCreateInstance( CLSID_WbemLocator,
                           NULL,
                           CLSCTX_INPROC_SERVER,
                           IID_IWbemLocator,
                           (LPVOID*) &pIWbemLocator);
    if( FAILED(hr) || pIWbemLocator == NULL )
        goto LCleanup;

    // Using the locator, connect to WMI in the given namespace.
    pNamespace = SysAllocString( L"\\\\.\\root\\cimv2" );

    hr = pIWbemLocator->ConnectServer( pNamespace, NULL, NULL, 0L, 
                                       0L, NULL, NULL, &g_pIWbemServices );
    if( FAILED(hr) || g_pIWbemServices == NULL )
        goto LCleanup;

    hinstOle32 = LoadLibrary( TEXT("ole32.dll") );
    if( hinstOle32 )
    {
        PfnCoSetProxyBlanket pfnCoSetProxyBlanket = NULL;

        pfnCoSetProxyBlanket = (PfnCoSetProxyBlanket)GetProcAddress( hinstOle32, "CoSetProxyBlanket" );
        if (pfnCoSetProxyBlanket != NULL)
        {

            // Switch security level to IMPERSONATE. 
            pfnCoSetProxyBlanket( g_pIWbemServices,               // proxy
                                    RPC_C_AUTHN_WINNT,              // authentication service
                                    RPC_C_AUTHZ_NONE,               // authorization service
                                    NULL,                           // server principle name
                                    RPC_C_AUTHN_LEVEL_CALL,         // authentication level
                                    RPC_C_IMP_LEVEL_IMPERSONATE,    // impersonation level
                                    NULL,                           // identity of the client
                                    EOAC_NONE );                    // capability flags
            // If CoSetProxyBlanket, just leave it be and see if it works.
        }

    }

LCleanup:
    if( hinstOle32 )
        FreeLibrary(hinstOle32);
    if(pNamespace)
        SysFreeString(pNamespace);
    if(pIWbemLocator)
        pIWbemLocator->Release(); 
}


/****************************************************************************
 *
 *  ~CWMIHelper - Cleanup WMI
 *
 ****************************************************************************/
CWMIHelper::~CWMIHelper(VOID)
{
    if(g_pIWbemServices)
        g_pIWbemServices->Release(); 

    CoUninitialize();
}


/****************************************************************************
 *
 *  DXFilesCompareFunc - Compares items on DirectX files pages
 *
 ****************************************************************************/
int CALLBACK DXFilesCompareFunc(LPARAM lParam1, LPARAM lParam2, LPARAM lSortMethod)
{
    FileInfo* pFileInfo1 = (FileInfo*) lParam1;
    FileInfo* pFileInfo2 = (FileInfo*) lParam2;

    switch( s_sortInfo.dwColumnToSort )
    {
    case 0:
        return (s_sortInfo.nSortDirection * (_tcscmp( pFileInfo1->m_szName, 
                                                      pFileInfo2->m_szName )));

    case 1:
        return (s_sortInfo.nSortDirection * (_tcscmp( pFileInfo1->m_szVersion, 
                                                      pFileInfo2->m_szVersion )));

    case 2:
        return (s_sortInfo.nSortDirection * (_tcscmp( pFileInfo1->m_szAttributes, 
                                                      pFileInfo2->m_szAttributes )));

    case 3:
        return (s_sortInfo.nSortDirection * (_tcscmp( pFileInfo1->m_szLanguageLocal, 
                                                      pFileInfo2->m_szLanguageLocal )));

    case 4:
        return ( s_sortInfo.nSortDirection * CompareFileTime( &pFileInfo1->m_FileTime, 
                                                              &pFileInfo2->m_FileTime ) );

    case 5:
        if( pFileInfo1->m_numBytes > pFileInfo2->m_numBytes )
            return (s_sortInfo.nSortDirection * 1);
        if( pFileInfo1->m_numBytes < pFileInfo2->m_numBytes )
            return (s_sortInfo.nSortDirection * -1);
        return 0;
    }

    return 0;
}


/****************************************************************************
 *
 *  MsgHook
 *
 ****************************************************************************/
LRESULT FAR PASCAL MsgHook(int nCode, WPARAM wParam, LPARAM lParam)
{
   LPMSG pMsg = (LPMSG) lParam;

    if( pMsg && 
        pMsg->message == WM_KEYDOWN &&
        pMsg->wParam  == VK_TAB &&
        GetKeyState(VK_CONTROL) < 0) 
    {
        // Handle a ctrl-tab or ctrl-shift-tab
        if( GetKeyState(VK_SHIFT) < 0 ) 
            PostMessage( s_hwndMain, WM_COMMAND, IDC_PREV_TAB, 0 );
        else
            PostMessage( s_hwndMain, WM_COMMAND, IDC_NEXT_TAB, 0 );

        // Stop further processing, otherwise it will also be handled 
        // as a plain tab key pressed by the internal IsDialogBox() call.
        pMsg->message = WM_NULL;
        pMsg->lParam  = 0;
        pMsg->wParam  = 0;     
    }

    return CallNextHookEx( s_hHook, nCode, wParam, lParam);
} 


/****************************************************************************
 *
 *  DialogProc
 *
 ****************************************************************************/
INT_PTR CALLBACK DialogProc(HWND hwnd, UINT msg, WPARAM wparam, LPARAM lparam)
{
    HWND hwndTabs = GetDlgItem(hwnd, IDC_TAB);

    switch (msg)
    {
    case WM_INITDIALOG:
        {
            SetForegroundWindow( hwnd );

            s_hwndMain = hwnd;
            s_hHook = SetWindowsHookEx( WH_GETMESSAGE, MsgHook,
                                        NULL, GetCurrentThreadId() );         
            HINSTANCE hinst = (HINSTANCE)GetWindowLongPtr(hwnd, GWLP_HINSTANCE);
            HICON hicon = LoadIcon(hinst, MAKEINTRESOURCE(IDI_APP)); 
            SendMessage(hwnd, WM_SETICON, TRUE, (LPARAM)hicon);
            SendMessage(hwnd, WM_SETICON, FALSE, (LPARAM)hicon);

            CreateTabs(hwndTabs);
            SetupPage(hwndTabs, 0);
            SendMessage( s_hwndMain, WM_APP_PROGRESS, 0, 0 );        

            if( s_sysInfo.m_bNetMeetingRunning )
                PostMessage( s_hwndMain, WM_NETMEETINGWARN, 0, 0 );
            
            s_sortInfo.nSortDirection = 1;
            s_sortInfo.dwColumnToSort = -1;
        }
        return TRUE;

        case WM_APP_PROGRESS:
            {
                if( s_lwCurPage == 0 )
                {
                    HWND hProgress = GetDlgItem( s_hwndCurPage, IDC_LOAD_PROGRESS );

                    if( !s_bScanDone )
                    {
                        ShowWindow( hProgress, SW_SHOW );
                        SendMessage( hProgress, PBM_DELTAPOS, 10, 0 );
                        UpdateWindow( s_hwndMain );
                        UpdateWindow( s_hwndCurPage );
                    }
                    else
                    {
                        ShowWindow( hProgress, SW_HIDE );
                        EnableWindow( GetDlgItem(hwnd, IDNEXT), TRUE );
                        EnableWindow( GetDlgItem(hwnd, IDSAVE), TRUE );
                    }
                }
            }
            break;

        case WM_REPORTERROR:
        case WM_NETMEETINGWARN:
        case WM_COMMAND:
        case WM_QUERYSKIP:
        {
            UI_MSG_NODE* pMsg = new UI_MSG_NODE;
            if( NULL == pMsg )
                return TRUE;
            ZeroMemory( pMsg, sizeof(UI_MSG_NODE) );
            pMsg->message = msg;
            pMsg->lparam  = lparam;
            pMsg->wparam  = wparam;

            UI_MSG_NODE* pEnum = s_pUIMsgHead;
            UI_MSG_NODE* pPrev = NULL;
            while( pEnum )
            {
                pPrev = pEnum;
                pEnum = pEnum->pNext;
            }
            if( pPrev )
                pPrev->pNext = pMsg;
            else
                s_pUIMsgHead = pMsg;

            SetEvent( s_hUIMsgEvent );
            return TRUE;
        }

        case WM_REPORTERROR_REAL:
        {
            ReportErrorReal( (LONG) wparam, (HRESULT) lparam );
            return TRUE;
        }

        case WM_NETMEETINGWARN_REAL:
        {
            TCHAR strMessage[MAX_PATH];
            TCHAR strTitle[MAX_PATH];

            LoadString(NULL, IDS_APPFULLNAME, strTitle, MAX_PATH);
            LoadString(NULL, IDS_NETMEETINGWARN, strMessage, MAX_PATH);
            MessageBox( s_hwndMain, strMessage, strTitle, MB_OK|MB_ICONWARNING );
            return TRUE;
        }

        case WM_QUERYSKIP_REAL:
        {
            EnableWindow( s_hwndMain, FALSE );
            TCHAR szTitle[MAX_PATH];
            TCHAR szMessage[MAX_PATH];
            TCHAR szFmt[MAX_PATH];
            TCHAR szMessageComponent[MAX_PATH];
            LoadString(0, IDS_APPFULLNAME, szTitle, MAX_PATH);
            LoadString(0, IDS_SKIP, szFmt, MAX_PATH);
            LoadString(0, s_nSkipComponent, szMessageComponent, MAX_PATH);
            wsprintf( szMessage, szFmt, szMessageComponent, szMessageComponent );

            // Ask the user and store result it s_bQuerySkipAllow
            if( IDYES == MessageBox( s_hwndMain, szMessage, szTitle, MB_YESNO) )
                s_bQuerySkipAllow = FALSE;
            else
                s_bQuerySkipAllow = TRUE;

            EnableWindow( s_hwndMain, TRUE );

            // Set the event, triggering the main thread to wake up 
            SetEvent( s_hQuerySkipEvent );
        }
        return TRUE;

        case WM_COMMAND_REAL:
        {
            WORD wID = LOWORD(wparam);
            INT numTabs;
            INT iTabCur;
            DisplayInfo* pDisplayInfo = NULL;
            SoundInfo* pSoundInfo = NULL;
            switch(wID)
            {
            case IDEXIT:
                PostQuitMessage( 0 );
                break;
            case IDC_NEXT_TAB:
            case IDNEXT:
            case IDC_PREV_TAB:
                if( FALSE == s_bScanDone )
                {
                    MessageBeep( MB_ICONEXCLAMATION );
                    return TRUE;
                }

                numTabs = TabCtrl_GetItemCount(hwndTabs);
                iTabCur = TabCtrl_GetCurFocus(hwndTabs);

                if( wID == IDC_PREV_TAB )
                    iTabCur += numTabs - 1;
                else
                    iTabCur++;
                iTabCur %= numTabs;                
                
                TabCtrl_SetCurFocus(hwndTabs, iTabCur );
                break;
            case IDSAVE:
                SaveInfo();
                break;
            case IDC_APPHELP:
                ShowHelp();
                break;
            case IDC_RESTOREDRIVERS:
                RestoreDrivers();
                break;
            case IDC_TESTDD:
                iTabCur = TabCtrl_GetCurFocus(hwndTabs);
                for (pDisplayInfo = s_pDisplayInfoFirst; iTabCur > s_iPageDisplayFirst; iTabCur--)
                    pDisplayInfo = pDisplayInfo->m_pDisplayInfoNext;
                TestDD(s_hwndMain, pDisplayInfo);
                SetupDisplayPage(TabCtrl_GetCurFocus(hwndTabs) - s_iPageDisplayFirst);
                break;
            case IDC_TESTD3D:
                iTabCur = TabCtrl_GetCurFocus(hwndTabs);
                for (pDisplayInfo = s_pDisplayInfoFirst; iTabCur > s_iPageDisplayFirst; iTabCur--)
                    pDisplayInfo = pDisplayInfo->m_pDisplayInfoNext;
                TestD3D(s_hwndMain, pDisplayInfo);
                SetupDisplayPage(TabCtrl_GetCurFocus(hwndTabs) - s_iPageDisplayFirst);
                break;
            case IDC_TESTSND:
                iTabCur = TabCtrl_GetCurFocus(hwndTabs);
                for (pSoundInfo = s_pSoundInfoFirst; iTabCur > s_iPageSoundFirst; iTabCur--)
                    pSoundInfo = pSoundInfo->m_pSoundInfoNext;
                TestSnd(s_hwndMain, pSoundInfo);
                SetupSoundPage(TabCtrl_GetCurFocus(hwndTabs) - s_iPageSoundFirst);
                break;
            case IDC_PORTLISTCOMBO:
                if (HIWORD(wparam) == CBN_SELCHANGE)
                {
                    LONG iItemPicked = (LONG)SendMessage(GetDlgItem(s_hwndCurPage, IDC_PORTLISTCOMBO), CB_GETCURSEL, 0, 0);
                    LONG iItem = 0;
                    MusicPort* pMusicPort;
                    for (pMusicPort = s_pMusicInfo->m_pMusicPortFirst; pMusicPort != NULL; pMusicPort = pMusicPort->m_pMusicPortNext)
                    {
                        if (pMusicPort->m_bOutputPort)
                        {
                            if (iItem == iItemPicked)
                            {
                                s_pMusicInfo->m_guidMusicPortTest = pMusicPort->m_guid;
                                break;
                            }
                            iItem++;
                        }
                    }
                }
                break;
            case IDC_TESTMUSIC:
                if (s_pMusicInfo != NULL)
                    TestMusic(s_hwndMain, s_pMusicInfo);
                SetupMusicPage();
                break;

            case IDC_TESTPLAY:
            {
                if( s_sysInfo.m_dwDirectXVersionMajor < 8 )
                {
                    TCHAR szMessage[MAX_PATH];
                    TCHAR szTitle[MAX_PATH];
                    LoadString(0, IDS_APPFULLNAME, szTitle, MAX_PATH);
                    LoadString(0, IDS_TESTNEEDSDX8, szMessage, MAX_PATH);
                    MessageBox(s_hwndMain, szMessage, szTitle, MB_OK);
                }
                else
                {
                    if (s_pNetInfo != NULL)
                        TestNetwork(s_hwndMain, s_pNetInfo);
                    SetupNetworkPage();
                }
                break;
            }

            case IDC_DISABLEDD:
                ToggleDDAccel();
                break;
            case IDC_DISABLED3D:
                ToggleD3DAccel();
                break;
            case IDC_DISABLEAGP:
                ToggleAGPSupport();
                break;
            case IDC_DISABLEDM:
                ToggleDMAccel();
                break;
            case IDC_TROUBLESHOOT:
                TroubleShoot( FALSE );
                break;
            case IDC_TROUBLESHOOTSOUND:
                TroubleShoot( TRUE );
                break;
            case IDC_MSINFO:
                {
                    HKEY hkey;
                    TCHAR szMsInfo[MAX_PATH];
                    DWORD cbData = MAX_PATH;
                    DWORD dwType;
                    if (ERROR_SUCCESS == RegOpenKeyEx(HKEY_LOCAL_MACHINE, 
                        TEXT("Software\\Microsoft\\Shared Tools\\MSInfo"), 0, KEY_READ, &hkey))
                    {
                        RegQueryValueEx(hkey, TEXT("Path"), 0, &dwType, (LPBYTE)szMsInfo, &cbData);
                        HINSTANCE hinstResult = ShellExecute( s_hwndMain, NULL, szMsInfo, NULL, 
                                                              NULL, SW_SHOWNORMAL ); 
                        if( (INT_PTR)hinstResult < 32 ) 
                            ReportError(IDS_NOMSINFO);
                    }
                    else
                    {
                        ReportError(IDS_NOMSINFO);
                    }
                }
                break;
            case IDC_OVERRIDE:
                OverrideDDRefresh();
                break;
            case IDC_GHOST:
                AdjustGhostDevices(s_hwndMain, s_pDisplayInfoFirst);
                break;
            }
        return TRUE;
        }

    case WM_NOTIFY:
        {
            INT id = (INT)wparam;
            NMHDR* pnmh = (LPNMHDR)lparam;
            UINT code = pnmh->code;
            if (code == TCN_SELCHANGING)
            {
                if( !s_bScanDone )
                {
                    MessageBeep( MB_ICONEXCLAMATION );
                    SetWindowLongPtr(hwnd, DWLP_MSGRESULT, TRUE);
                    return TRUE;
                }
             
                CleanupPage(hwndTabs, TabCtrl_GetCurFocus(hwndTabs));
                return TRUE;
            }
            if (code == TCN_SELCHANGE)
                SetupPage(hwndTabs, TabCtrl_GetCurFocus(hwndTabs));

            // If a "DX files" column was clicked
            if (code == LVN_COLUMNCLICK && s_lwCurPage == 1)
            {
                NMLISTVIEW* pnmv = (LPNMLISTVIEW) lparam; 

                // Figure out if we want to reverse sort
                if( s_sortInfo.dwColumnToSort == (DWORD) pnmv->iSubItem )
                    s_sortInfo.nSortDirection = -s_sortInfo.nSortDirection;
                else
                    s_sortInfo.nSortDirection = 1;

                // Set the column to sort, and sort
                s_sortInfo.dwColumnToSort = pnmv->iSubItem;
                ListView_SortItems( GetDlgItem(s_hwndCurPage, IDC_LIST), 
                                    DXFilesCompareFunc, 0 );
            }
        }
        return TRUE;

    case WM_HSCROLL:
        if ((HWND)lparam == GetDlgItem(s_hwndCurPage, IDC_SNDACCELSLIDER))
            HandleSndSliderChange(LOWORD(wparam), HIWORD(wparam));
        return TRUE;

    case WM_CLOSE:
        PostQuitMessage(0);
        return TRUE;

    case WM_DESTROY:
        UnhookWindowsHookEx( s_hHook );
        return TRUE;
    }

    return FALSE;
}


/****************************************************************************
 *
 *  CreateTabs
 *
 ****************************************************************************/
HRESULT CreateTabs(HWND hwndTabs)
{
    TC_ITEM tie; 
    INT i = 0;
    TCHAR sz[MAX_PATH];
    TCHAR szFmt[MAX_PATH];
    DisplayInfo* pDisplayInfo;
    SoundInfo* pSoundInfo;

    tie.mask = TCIF_TEXT | TCIF_IMAGE; 
    tie.iImage = -1; 

    LoadString(NULL, IDS_HELPTAB, sz, MAX_PATH);
    tie.pszText = sz; 
    if (TabCtrl_InsertItem(hwndTabs, i++, &tie) == -1) 
        return E_FAIL;

    LoadString(NULL, IDS_DXFILESTAB, sz, MAX_PATH);
    tie.pszText = sz; 
    if (TabCtrl_InsertItem(hwndTabs, i++, &tie) == -1) 
        return E_FAIL;

    // Create tabs for each display:
    s_iPageDisplayFirst = 2;
    for (pDisplayInfo = s_pDisplayInfoFirst; pDisplayInfo != NULL; 
        pDisplayInfo = pDisplayInfo->m_pDisplayInfoNext)
    {
        if (pDisplayInfo == s_pDisplayInfoFirst && pDisplayInfo->m_pDisplayInfoNext == NULL)
        {
            LoadString(NULL, IDS_ONEDISPLAYTAB, sz, MAX_PATH);
        }
        else
        {
            LoadString(NULL, IDS_MULTIDISPLAYTAB, szFmt, MAX_PATH);
            wsprintf(sz, szFmt, s_numDisplayInfo + 1);
        }
        tie.pszText = sz; 
        if (TabCtrl_InsertItem(hwndTabs, i++, &tie) == -1) 
            return E_FAIL;
        s_numDisplayInfo++;
    }

    // Create tabs for each sound device:
    s_iPageSoundFirst = s_iPageDisplayFirst + s_numDisplayInfo;
    for (pSoundInfo = s_pSoundInfoFirst; pSoundInfo != NULL; 
        pSoundInfo = pSoundInfo->m_pSoundInfoNext)
    {
        if (pSoundInfo == s_pSoundInfoFirst && pSoundInfo->m_pSoundInfoNext == NULL)
        {
            LoadString(NULL, IDS_ONESOUNDTAB, sz, MAX_PATH);
        }
        else
        {
            LoadString(NULL, IDS_MULTISOUNDTAB, szFmt, MAX_PATH);
            wsprintf(sz, szFmt, s_numSoundInfo + 1);
        }
        tie.pszText = sz; 
        if (TabCtrl_InsertItem(hwndTabs, i++, &tie) == -1) 
            return E_FAIL;
        s_numSoundInfo++;
    }

    // Create tab for music device, if DMusic is available:
    if (s_pMusicInfo != NULL)
    {
        s_iPageMusic = s_iPageSoundFirst + s_numSoundInfo;
        LoadString(NULL, IDS_MUSICTAB, sz, MAX_PATH);
        tie.pszText = sz;
        if (TabCtrl_InsertItem(hwndTabs, i++, &tie) == -1) 
            return E_FAIL;
    }

    if (s_iPageMusic > 0)
        s_iPageInput = s_iPageMusic + 1;
    else 
        s_iPageInput = s_iPageSoundFirst + s_numSoundInfo;
    LoadString(NULL, IDS_INPUTTAB, sz, MAX_PATH);
    tie.pszText = sz;
    if (TabCtrl_InsertItem(hwndTabs, i++, &tie) == -1) 
        return E_FAIL;

    s_iPageNetwork = s_iPageInput + 1;
    LoadString(NULL, IDS_NETWORKTAB, sz, MAX_PATH);
    tie.pszText = sz;
    if (TabCtrl_InsertItem(hwndTabs, i++, &tie) == -1) 
        return E_FAIL;

    s_iPageStillStuck = s_iPageNetwork + 1;
    LoadString(NULL, IDS_STILLSTUCKTAB, sz, MAX_PATH);
    tie.pszText = sz;
    if (TabCtrl_InsertItem(hwndTabs, i++, &tie) == -1) 
        return E_FAIL;

    return S_OK;
}


/****************************************************************************
 *
 *  SetupPage
 *
 ****************************************************************************/
HRESULT SetupPage(HWND hwndTabs, INT iPage)
{
    HRESULT hr;

    s_lwCurPage = iPage;

    // Only enable "Next Page" button if not on last page:
    HWND hwndNextButton = GetDlgItem(s_hwndMain, IDNEXT);
    if (!s_bScanDone || iPage == TabCtrl_GetItemCount(hwndTabs) - 1)
        EnableWindow(hwndNextButton, FALSE);
    else
        EnableWindow(hwndNextButton, TRUE);

    EnableWindow(GetDlgItem(s_hwndMain, IDSAVE), s_bScanDone);
    
    RECT rc;
    WORD idDialog;

    GetClientRect(hwndTabs, &rc);
    TabCtrl_AdjustRect(hwndTabs, FALSE, &rc);

    if (iPage == 0)
        idDialog = IDD_HELPPAGE;
    else if (iPage == 1)
        idDialog = IDD_DXFILESPAGE;
    else if (iPage >= s_iPageDisplayFirst && iPage < s_iPageDisplayFirst + s_numDisplayInfo)
        idDialog = IDD_DISPLAYPAGE;
    else if (iPage >= s_iPageSoundFirst && iPage < s_iPageSoundFirst + s_numSoundInfo)
        idDialog = IDD_SOUNDPAGE;
    else if (iPage == s_iPageMusic)
        idDialog = IDD_MUSICPAGE;
    else if (iPage == s_iPageInput)
        idDialog = IDD_INPUTPAGE;
    else if (iPage == s_iPageNetwork)
        idDialog = IDD_NETWORKPAGE;
    else if (iPage == s_iPageStillStuck)
        idDialog = IDD_STILLSTUCKPAGE;
    else
        return S_OK;

    HINSTANCE hinst = (HINSTANCE)GetWindowLongPtr(hwndTabs, GWLP_HINSTANCE);
    s_hwndCurPage = CreateDialog(hinst, MAKEINTRESOURCE(idDialog),
        s_hwndMain, PageDialogProc);
    SetWindowPos(s_hwndCurPage, NULL, rc.left, rc.top, rc.right - rc.left, 
        rc.bottom - rc.top, 0);

    if (iPage == 0)
    {
        if (FAILED(hr = SetupHelpPage(hwndTabs)))
            return hr;
    }
    else if (iPage == 1)
    {
        if (FAILED(hr = SetupDxFilesPage()))
            return hr;
    }
    else if (iPage >= s_iPageDisplayFirst && iPage < s_iPageDisplayFirst + s_numDisplayInfo)
    {
        if (FAILED(hr = SetupDisplayPage(iPage - s_iPageDisplayFirst)))
            return hr;
    }
    else if (iPage >= s_iPageSoundFirst && iPage < s_iPageSoundFirst + s_numSoundInfo)
    {
        if (FAILED(hr = SetupSoundPage(iPage - s_iPageSoundFirst)))
            return hr;
    }
    else if (iPage == s_iPageMusic)
    {
        if (FAILED(hr = SetupMusicPage()))
            return hr;
    }
    else if (iPage == s_iPageInput)
    {
        if (FAILED(hr = SetupInputPage()))
            return hr;
    }
    else if (iPage == s_iPageNetwork)
    {
        if (FAILED(hr = SetupNetworkPage()))
            return hr;
    }
    else if (iPage == s_iPageStillStuck)
    {
        if (FAILED(hr = SetupStillStuckPage()))
            return hr;
    }

    // Make sure keyboard focus is somewhere
    if (GetFocus() == NULL)
        SetFocus(GetDlgItem(s_hwndMain, IDSAVE));

    ShowWindow(s_hwndCurPage, SW_SHOW);
    return S_OK;
}


/****************************************************************************
 *
 *  PageDialogProc
 *
 ****************************************************************************/
INT_PTR CALLBACK PageDialogProc(HWND hwnd, UINT msg, WPARAM wparam, LPARAM lparam)
{
    switch (msg)
    {
    case WM_INITDIALOG:
        return FALSE;

    case WM_COMMAND:
    case WM_HSCROLL:
    case WM_NOTIFY:
        // Pass the message up to the main dialog proc
        SendMessage(s_hwndMain, msg, wparam, lparam);
        return TRUE;
    }
    return FALSE;
}


/****************************************************************************
 *
 *  CleanupPage
 *
 ****************************************************************************/
HRESULT CleanupPage(HWND hwndTabs, INT iPage)
{
    if (s_hwndCurPage != NULL)
    {
        DestroyWindow(s_hwndCurPage);
        s_hwndCurPage = NULL;
    }
    return S_OK;
}


/****************************************************************************
 *
 *  SetupHelpPage
 *
 ****************************************************************************/
HRESULT SetupHelpPage(HWND hwndTabs)
{
    TCHAR szCopyrightFmt[MAX_PATH];
    TCHAR szUnicode[MAX_PATH];
    TCHAR szCopyright[MAX_PATH];

    LoadString(NULL, IDS_COPYRIGHTFMT, szCopyrightFmt, MAX_PATH);
#ifdef UNICODE
    LoadString(NULL, IDS_UNICODE, szUnicode, MAX_PATH);
#else
    lstrcpy(szUnicode, TEXT(""));
#endif
    wsprintf(szCopyright, szCopyrightFmt, s_sysInfo.m_szDxDiagVersion, szUnicode);

    SetWindowText(GetDlgItem(s_hwndCurPage, IDC_DATE), s_sysInfo.m_szTimeLocal);
    SetWindowText(GetDlgItem(s_hwndCurPage, IDC_COMPUTERNAME), s_sysInfo.m_szMachine);
    SetWindowText(GetDlgItem(s_hwndCurPage, IDC_OS), s_sysInfo.m_szOSEx);
    SetWindowText(GetDlgItem(s_hwndCurPage, IDC_LANGUAGE), s_sysInfo.m_szLanguagesLocal);
    SetWindowText(GetDlgItem(s_hwndCurPage, IDC_PROCESSOR), s_sysInfo.m_szProcessor);
    SetWindowText(GetDlgItem(s_hwndCurPage, IDC_MEMORY), s_sysInfo.m_szPhysicalMemory);
    SetWindowText(GetDlgItem(s_hwndCurPage, IDC_PAGEFILE), s_sysInfo.m_szPageFile);
    SetWindowText(GetDlgItem(s_hwndCurPage, IDC_DIRECTXVERSION), s_sysInfo.m_szDirectXVersionLong);
    SetWindowText(GetDlgItem(s_hwndCurPage, IDC_COPYRIGHT), szCopyright);

    HWND hProgress = GetDlgItem( s_hwndCurPage, IDC_LOAD_PROGRESS );
    SendMessage( hProgress, PBM_SETRANGE, 0, MAKELPARAM(0, 17 * 10) );
    SendMessage( hProgress, PBM_SETPOS, 0, 0 );
    ShowWindow( hProgress, !s_bScanDone ? SW_SHOW : SW_HIDE );

    return S_OK;
}


/****************************************************************************
 *
 *  ShowBullets - Show bullets and 1/4-inch indents in notes box
 *
 ****************************************************************************/
VOID ShowBullets(VOID)
{
    PARAFORMAT pf;
    ZeroMemory(&pf, sizeof(pf));
    pf.cbSize = sizeof(pf);
    pf.dwMask = PFM_NUMBERING | PFM_OFFSET;
    pf.wNumbering = PFN_BULLET;
    pf.dxOffset = 1440 / 4; // a twip is 1440th of an inch, I want a 1/4-inch indent
    SendMessage(GetDlgItem(s_hwndCurPage, IDC_NOTES), EM_SETPARAFORMAT, 0, (LPARAM)&pf);
}


/****************************************************************************
 *
 *  HideBullets
 *
 ****************************************************************************/
VOID HideBullets(VOID)
{
    PARAFORMAT pf;
    ZeroMemory(&pf, sizeof(pf));
    pf.cbSize = sizeof(pf);
    pf.dwMask = PFM_NUMBERING;
    pf.wNumbering = 0;
    SendMessage(GetDlgItem(s_hwndCurPage, IDC_NOTES), EM_SETPARAFORMAT, 0, (LPARAM)&pf);
}


/****************************************************************************
 *
 *  SetupDxFilesPage
 *
 ****************************************************************************/
HRESULT SetupDxFilesPage(VOID)
{
    HRESULT hr;
    HWND hwndList = GetDlgItem(s_hwndCurPage, IDC_LIST);

    ListView_SetImageList(hwndList, s_himgList, LVSIL_STATE);

    if (FAILED(hr = (CreateFileInfoColumns(hwndList, FALSE))))
        return hr;

    ShowBullets();

    SendMessage(GetDlgItem(s_hwndCurPage, IDC_NOTES), 
        EM_REPLACESEL, FALSE, (LPARAM)s_sysInfo.m_szDXFileNotes);

    // Disable bullets so last line doesn't have an empty bullet
    HideBullets();

    if (FAILED(hr = (AddFileInfo(hwndList, s_pDxComponentsFileInfoFirst))))
        return hr;

    // Autosize all columns to fit header/text tightly:
    INT iColumn = 0;
    INT iWidthHeader;
    INT iWidthText;
    while (TRUE)
    {
        if (FALSE == ListView_SetColumnWidth(hwndList, iColumn, LVSCW_AUTOSIZE_USEHEADER))
            break;
        iWidthHeader = ListView_GetColumnWidth(hwndList, iColumn);
        ListView_SetColumnWidth(hwndList, iColumn, LVSCW_AUTOSIZE);
        iWidthText = ListView_GetColumnWidth(hwndList, iColumn);
        if (iWidthText < iWidthHeader)
            ListView_SetColumnWidth(hwndList, iColumn, iWidthHeader);
        iColumn++;
    }
    // Delete the bogus column that was created
    ListView_DeleteColumn(hwndList, iColumn - 1);

    return S_OK;
}


/****************************************************************************
 *
 *  SetupDisplayPage
 *
 ****************************************************************************/
HRESULT SetupDisplayPage(LONG iDisplay)
{
    DisplayInfo* pDisplayInfo;
    TCHAR sz[MAX_PATH];

    pDisplayInfo = s_pDisplayInfoFirst;
    while (iDisplay > 0)
    {
        pDisplayInfo = pDisplayInfo->m_pDisplayInfoNext;
        iDisplay--;
    }
    SetWindowText(GetDlgItem(s_hwndCurPage, IDC_ADAPTER), pDisplayInfo->m_szDescription);
    SetWindowText(GetDlgItem(s_hwndCurPage, IDC_MANUFACTURER), pDisplayInfo->m_szManufacturer);
    SetWindowText(GetDlgItem(s_hwndCurPage, IDC_CHIPTYPE), pDisplayInfo->m_szChipType);
    SetWindowText(GetDlgItem(s_hwndCurPage, IDC_DACTYPE), pDisplayInfo->m_szDACType);
    SetWindowText(GetDlgItem(s_hwndCurPage, IDC_DISPLAYMEMORY), pDisplayInfo->m_szDisplayMemory);
    SetWindowText(GetDlgItem(s_hwndCurPage, IDC_DISPLAYMODE), pDisplayInfo->m_szDisplayMode);
    SetWindowText(GetDlgItem(s_hwndCurPage, IDC_MONITOR), pDisplayInfo->m_szMonitorName);

    SetWindowText(GetDlgItem(s_hwndCurPage, IDC_DRIVERNAME), pDisplayInfo->m_szDriverName);
    wsprintf(sz, TEXT("%s (%s)"), pDisplayInfo->m_szDriverVersion, pDisplayInfo->m_szDriverLanguageLocal);
    SetWindowText(GetDlgItem(s_hwndCurPage, IDC_DRIVERVERSION), sz);
    if (pDisplayInfo->m_bDriverSignedValid)
    {
        if (pDisplayInfo->m_bDriverSigned)
            LoadString(NULL, IDS_YES, sz, MAX_PATH);
        else
            LoadString(NULL, IDS_NO, sz, MAX_PATH);
    }
    else
        LoadString(NULL, IDS_NA, sz, MAX_PATH);

    SetWindowText(GetDlgItem(s_hwndCurPage, IDC_DRIVERSIGNED), sz);
    SetWindowText(GetDlgItem(s_hwndCurPage, IDC_MINIVDD), pDisplayInfo->m_szMiniVdd);
    SetWindowText(GetDlgItem(s_hwndCurPage, IDC_VDD), pDisplayInfo->m_szVdd);

    // Diagnose display again since the state may have changed
    // ******* DiagnoseDisplay ********
    DiagnoseDisplay(&s_sysInfo, s_pDisplayInfoFirst);

    if (pDisplayInfo->m_bDDAccelerationEnabled)
    {
        if( pDisplayInfo->m_bNoHardware )
        {
            EnableWindow(GetDlgItem(s_hwndCurPage, IDC_DISABLEDD), FALSE);
        }
        else
        {
            EnableWindow(GetDlgItem(s_hwndCurPage, IDC_DISABLEDD), TRUE);
        }

        LoadString(NULL, IDS_DISABLEDD, sz, MAX_PATH);
        SetWindowText(GetDlgItem(s_hwndCurPage, IDC_DISABLEDD), sz);
    }
    else
    {
        LoadString(NULL, IDS_ENABLEDD, sz, MAX_PATH);
        SetWindowText(GetDlgItem(s_hwndCurPage, IDC_DISABLEDD), sz);
    }

    SetWindowText(GetDlgItem(s_hwndCurPage, IDC_DDSTATUS), pDisplayInfo->m_szDDStatus );

    EnableWindow(GetDlgItem(s_hwndCurPage, IDC_TESTDD), TRUE);
    EnableWindow(GetDlgItem(s_hwndCurPage, IDC_TESTD3D), TRUE);

    if (pDisplayInfo->m_b3DAccelerationExists)
    {
        EnableWindow(GetDlgItem(s_hwndCurPage, IDC_DISABLED3D), TRUE);
        if (pDisplayInfo->m_b3DAccelerationEnabled)
        {
            LoadString(NULL, IDS_DISABLED3D, sz, MAX_PATH);
            SetWindowText(GetDlgItem(s_hwndCurPage, IDC_DISABLED3D), sz);
        }
        else
        {
            LoadString(NULL, IDS_ENABLED3D, sz, MAX_PATH);
            SetWindowText(GetDlgItem(s_hwndCurPage, IDC_DISABLED3D), sz);
            EnableWindow(GetDlgItem(s_hwndCurPage, IDC_TESTD3D), FALSE);
        }
    }
    else
    {
        EnableWindow(GetDlgItem(s_hwndCurPage, IDC_DISABLED3D), FALSE);
        LoadString(NULL, IDS_DISABLED3D, sz, MAX_PATH);
        SetWindowText(GetDlgItem(s_hwndCurPage, IDC_DISABLED3D), sz);
        EnableWindow(GetDlgItem(s_hwndCurPage, IDC_TESTD3D), FALSE);
    }

    SetWindowText(GetDlgItem(s_hwndCurPage, IDC_D3DSTATUS), pDisplayInfo->m_szD3DStatus);

    // Set AGP button text to enabled or disabled
    if (pDisplayInfo->m_bAGPEnabled)
        LoadString(NULL, IDS_DISABLEAGP, sz, MAX_PATH);
    else
        LoadString(NULL, IDS_ENABLEAGP, sz, MAX_PATH);
    SetWindowText(GetDlgItem(s_hwndCurPage, IDC_DISABLEAGP), sz);

    // If we are sure that AGP support doesn't exist, show "not avail" for 
    // status, and disable button
    if ( (pDisplayInfo->m_bAGPExistenceValid && !pDisplayInfo->m_bAGPExists) ||
         (!pDisplayInfo->m_bDDAccelerationEnabled) )
    {
        EnableWindow(GetDlgItem(s_hwndCurPage, IDC_DISABLEAGP), FALSE);
    }
    else
    {
        // Otherwise, Show enabled/disabled status and enable button
        EnableWindow(GetDlgItem(s_hwndCurPage, IDC_DISABLEAGP), TRUE);
    }

    SetWindowText(GetDlgItem(s_hwndCurPage, IDC_AGPSTATUS), pDisplayInfo->m_szAGPStatus);

    // Setup notes area.  Clear all text
    SendMessage(GetDlgItem(s_hwndCurPage, IDC_NOTES), EM_SETSEL, 0, -1);
    SendMessage(GetDlgItem(s_hwndCurPage, IDC_NOTES),
        EM_REPLACESEL, FALSE, (LPARAM)"");

    ShowBullets();

    SendMessage(GetDlgItem(s_hwndCurPage, IDC_NOTES),
                EM_REPLACESEL, FALSE, (LPARAM)pDisplayInfo->m_szNotes);

    // Disable bullets so last line doesn't have an empty bullet
    HideBullets();

    return S_OK;
}


/****************************************************************************
 *
 *  SetupSoundPage
 *
 ****************************************************************************/
HRESULT SetupSoundPage(LONG iSound)
{
    SoundInfo* pSoundInfo;
    TCHAR sz[MAX_PATH];

    if( s_pSoundInfoFirst == NULL )
        return S_OK;

    pSoundInfo = s_pSoundInfoFirst;
    while (iSound > 0)
    {
        pSoundInfo = pSoundInfo->m_pSoundInfoNext;
        iSound--;
    }
    SetWindowText(GetDlgItem(s_hwndCurPage, IDC_DESCRIPTION), pSoundInfo->m_szDescription);
    SetWindowText(GetDlgItem(s_hwndCurPage, IDC_DRIVERNAME), pSoundInfo->m_szDriverName);
    if (lstrlen(pSoundInfo->m_szDriverName) > 0)
        wsprintf(sz, TEXT("%s (%s)"), pSoundInfo->m_szDriverVersion, pSoundInfo->m_szDriverLanguageLocal);
    else
        lstrcpy(sz, TEXT(""));
    SetWindowText(GetDlgItem(s_hwndCurPage, IDC_DRIVERVERSION), sz);

    if (lstrlen(pSoundInfo->m_szDriverName) > 0)
    {
        if (pSoundInfo->m_bDriverSignedValid)
        {
            if (pSoundInfo->m_bDriverSigned)
                LoadString(NULL, IDS_YES, sz, MAX_PATH);
            else
                LoadString(NULL, IDS_NO, sz, MAX_PATH);
        }
        else
            LoadString(NULL, IDS_NA, sz, MAX_PATH);
    }
    else
        lstrcpy(sz, TEXT(""));
    SetWindowText(GetDlgItem(s_hwndCurPage, IDC_DRIVERSIGNED), sz);

    SetWindowText(GetDlgItem(s_hwndCurPage, IDC_DEVICETYPE), pSoundInfo->m_szType);
    SetWindowText(GetDlgItem(s_hwndCurPage, IDC_DEVICEID), pSoundInfo->m_szDeviceID);
    SetWindowText(GetDlgItem(s_hwndCurPage, IDC_MANUFACTURERID), pSoundInfo->m_szManufacturerID);
    SetWindowText(GetDlgItem(s_hwndCurPage, IDC_PRODUCTID), pSoundInfo->m_szProductID);
    SetWindowText(GetDlgItem(s_hwndCurPage, IDC_OTHERFILES), pSoundInfo->m_szOtherDrivers);
    SetWindowText(GetDlgItem(s_hwndCurPage, IDC_PROVIDER), pSoundInfo->m_szProvider);

    if (pSoundInfo->m_lwAccelerationLevel == -1)
    {
        // Acceleration level cannot be read, so hide controls
        ShowWindow(GetDlgItem(s_hwndCurPage, IDC_SNDACCELLABEL), SW_HIDE);
        ShowWindow(GetDlgItem(s_hwndCurPage, IDC_SNDACCELDESC), SW_HIDE);
        ShowWindow(GetDlgItem(s_hwndCurPage, IDC_SNDACCELSLIDER), SW_HIDE);
    }
    else
    {
        // Acceleration level can be read, so set up controls 
        HWND hwndSlider = GetDlgItem(s_hwndCurPage, IDC_SNDACCELSLIDER);
        SendMessage(hwndSlider, TBM_SETRANGE, TRUE, MAKELONG(0, 3));
        SendMessage(hwndSlider, TBM_SETTICFREQ, 1, 0);
        SendMessage(hwndSlider, TBM_SETPOS, TRUE, pSoundInfo->m_lwAccelerationLevel);
        switch (pSoundInfo->m_lwAccelerationLevel)
        {
        case 0:
            LoadString(NULL, IDS_NOSNDACCELERATION, sz, MAX_PATH);
            break;
        case 1:
            LoadString(NULL, IDS_BASICSNDACCELERATION, sz, MAX_PATH);
            break;
        case 2:
            LoadString(NULL, IDS_STANDARDSNDACCELERATION, sz, MAX_PATH);
            break;
        case 3:
            LoadString(NULL, IDS_FULLSNDACCELERATION, sz, MAX_PATH);
            break;
        default:
            lstrcpy(sz, TEXT(""));
            break;
        }
        SetWindowText(GetDlgItem(s_hwndCurPage, IDC_SNDACCELDESC), sz);
    }

    // Diagnose sound again since the state may have changed
    DiagnoseSound(s_pSoundInfoFirst);

    ShowBullets();
    
    // Setup notes area.  Clear all text
    SendMessage(GetDlgItem(s_hwndCurPage, IDC_NOTES), EM_SETSEL, 0, -1);
    SendMessage(GetDlgItem(s_hwndCurPage, IDC_NOTES),
        EM_REPLACESEL, FALSE, (LPARAM)"");

    ShowBullets();

    SendMessage(GetDlgItem(s_hwndCurPage, IDC_NOTES),
                EM_REPLACESEL, FALSE, (LPARAM)pSoundInfo->m_szNotes);
    
    // Disable bullets so last line doesn't have an empty bullet
    HideBullets();

    return S_OK;
}


/****************************************************************************
 *
 *  SetupMusicPage
 *
 ****************************************************************************/
HRESULT SetupMusicPage(VOID)
{
    HRESULT hr;
    HWND hwndList = GetDlgItem(s_hwndCurPage, IDC_LIST);
    TCHAR sz[MAX_PATH];

    // Set up HW enable/disable text/button:
    if (s_pMusicInfo->m_bAccelerationExists)
    {
        EnableWindow(GetDlgItem(s_hwndCurPage, IDC_DISABLEDM), TRUE);
        if (s_pMusicInfo->m_bAccelerationEnabled)
        {
            LoadString(NULL, IDS_ACCELENABLED, sz, MAX_PATH);
            SetWindowText(GetDlgItem(s_hwndCurPage, IDC_DMSTATUS), sz);
            LoadString(NULL, IDS_DISABLEDM, sz, MAX_PATH);
            SetWindowText(GetDlgItem(s_hwndCurPage, IDC_DISABLEDM), sz);
        }
        else
        {
            LoadString(NULL, IDS_ACCELDISABLED, sz, MAX_PATH);
            SetWindowText(GetDlgItem(s_hwndCurPage, IDC_DMSTATUS), sz);
            LoadString(NULL, IDS_ENABLEDM, sz, MAX_PATH);
            SetWindowText(GetDlgItem(s_hwndCurPage, IDC_DISABLEDM), sz);
        }
    }
    else
    {
        LoadString(NULL, IDS_ACCELUNAVAIL, sz, MAX_PATH);
        SetWindowText(GetDlgItem(s_hwndCurPage, IDC_DMSTATUS), sz);
        EnableWindow(GetDlgItem(s_hwndCurPage, IDC_DISABLEDM), FALSE);
        LoadString(NULL, IDS_DISABLEDM, sz, MAX_PATH);
        SetWindowText(GetDlgItem(s_hwndCurPage, IDC_DISABLEDM), sz);
    }

    // Setup notes area.  Clear all text
    SendMessage(GetDlgItem(s_hwndCurPage, IDC_NOTES), EM_SETSEL, 0, -1);
    SendMessage(GetDlgItem(s_hwndCurPage, IDC_NOTES),
        EM_REPLACESEL, FALSE, (LPARAM)"");

    // ******* DiagnoseMusic ********
    DiagnoseMusic(&s_sysInfo, s_pMusicInfo);

    ShowBullets();

    SendMessage(GetDlgItem(s_hwndCurPage, IDC_NOTES),
                EM_REPLACESEL, FALSE, (LPARAM)s_sysInfo.m_szMusicNotes);

    // Disable bullets so last line doesn't have an empty bullet
    HideBullets();

    // If column 1 doesn't exist yet, create columns, fill in port info, etc.
    LVCOLUMN lv;
    ZeroMemory(&lv, sizeof(lv));
    lv.mask = LVCF_WIDTH;
    if (FALSE == ListView_GetColumn(hwndList, 1, &lv))
    {
        // Show GM path and version
        if (s_pMusicInfo != NULL)
        {
            if (lstrlen(s_pMusicInfo->m_szGMFileVersion) > 0)
            {
                TCHAR szFmt[MAX_PATH];
                LoadString(NULL, IDS_GMFILEFMT, szFmt, MAX_PATH);
                wsprintf(sz, szFmt, s_pMusicInfo->m_szGMFilePath,
                    s_pMusicInfo->m_szGMFileVersion);
            }
            else
            {
                lstrcpy(sz, s_pMusicInfo->m_szGMFilePath);
            }
            SetWindowText(GetDlgItem(s_hwndCurPage, IDC_GMPATH), sz);
        }

        ListView_SetImageList(hwndList, s_himgList, LVSIL_STATE);

        if (FAILED(hr = (CreateMusicColumns(hwndList))))
            return hr;

        ListView_DeleteAllItems( hwndList );
        if (FAILED(hr = (AddMusicPortInfo(hwndList, s_pMusicInfo))))
            return hr;

        // Autosize all columns to fit header/text tightly:
        INT iColumn = 0;
        INT iWidthHeader;
        INT iWidthText;
        while (TRUE)
        {
            if (FALSE == ListView_SetColumnWidth(hwndList, iColumn, LVSCW_AUTOSIZE_USEHEADER))
                break;
            iWidthHeader = ListView_GetColumnWidth(hwndList, iColumn);
            ListView_SetColumnWidth(hwndList, iColumn, LVSCW_AUTOSIZE);
            iWidthText = ListView_GetColumnWidth(hwndList, iColumn);
            if (iWidthText < iWidthHeader)
                ListView_SetColumnWidth(hwndList, iColumn, iWidthHeader);
            iColumn++;
        }
        // Delete the bogus column that was created
        ListView_DeleteColumn(hwndList, iColumn - 1);

        // Fill in output port combo list:
        MusicPort* pMusicPort;
        LONG iPort = 0;
        LONG iPortTestCur = 0;
        SendMessage(GetDlgItem(s_hwndCurPage, IDC_PORTLISTCOMBO), CB_RESETCONTENT, 0, 0);
        for (pMusicPort = s_pMusicInfo->m_pMusicPortFirst; pMusicPort != NULL;
            pMusicPort = pMusicPort->m_pMusicPortNext)
        {
            if (pMusicPort->m_bOutputPort)
            {
                SendMessage(GetDlgItem(s_hwndCurPage, IDC_PORTLISTCOMBO), CB_ADDSTRING, 0, (LPARAM)(LPCTSTR)pMusicPort->m_szDescription);
                if (pMusicPort->m_guid == s_pMusicInfo->m_guidMusicPortTest)
                    iPortTestCur = iPort;
                iPort++;
            }
        }
        SendMessage(GetDlgItem(s_hwndCurPage, IDC_PORTLISTCOMBO), CB_SETCURSEL, iPortTestCur, 0);
    }

    return S_OK;
}


/****************************************************************************
 *
 *  SetupInputPage
 *
 ****************************************************************************/
HRESULT SetupInputPage(VOID)
{
    HRESULT hr;
    TCHAR sz[MAX_PATH];

    // Setup notes area.  Clear all text
    SendMessage(GetDlgItem(s_hwndCurPage, IDC_NOTES), EM_SETSEL, 0, -1);
    SendMessage(GetDlgItem(s_hwndCurPage, IDC_NOTES),
        EM_REPLACESEL, FALSE, (LPARAM)"");

    ShowBullets();

    SendMessage(GetDlgItem(s_hwndCurPage, IDC_NOTES),
                EM_REPLACESEL, FALSE, (LPARAM)s_sysInfo.m_szInputNotes);

    // Disable bullets so last line doesn't have an empty bullet
    HideBullets();


    if (BIsPlatformNT())
    {
        if (FAILED(hr = SetupInputDevicesNT()))
            return hr;
    }
    else
    {
        if (FAILED(hr = SetupInputDevices9x()))
            return hr;
    }

    // Second list: drivers
    HWND hwndList;
    LV_COLUMN col;
    LONG iSubItem = 0;
    LV_ITEM item;
    InputDriverInfo* pInputDriverInfo;
    hwndList = GetDlgItem(s_hwndCurPage, IDC_DRIVERLIST);
    ListView_SetImageList(hwndList, s_himgList, LVSIL_STATE);
    iSubItem = 0;
    col.mask = LVCF_FMT | LVCF_WIDTH | LVCF_TEXT | LVCF_SUBITEM;
    col.fmt = LVCFMT_LEFT;
    col.cx = 100;
    LoadString(NULL, IDS_REGISTRYKEY, sz, MAX_PATH);
    col.pszText = sz;
    col.cchTextMax = 100;
    col.iSubItem = iSubItem;
    if (-1 == ListView_InsertColumn(hwndList, iSubItem, &col))
        return E_FAIL;
    iSubItem++;

    LoadString(NULL, IDS_ACTIVE, sz, MAX_PATH);
    col.pszText = sz;
    col.iSubItem = iSubItem;
    if (-1 == ListView_InsertColumn(hwndList, iSubItem, &col))
        return E_FAIL;
    iSubItem++;

    LoadString(NULL, IDS_DEVICEID, sz, MAX_PATH);
    col.pszText = sz;
    col.iSubItem = iSubItem;
    if (-1 == ListView_InsertColumn(hwndList, iSubItem, &col))
        return E_FAIL;
    iSubItem++;

    LoadString(NULL, IDS_MATCHINGDEVID, sz, MAX_PATH);
    col.pszText = sz;
    col.iSubItem = iSubItem;
    if (-1 == ListView_InsertColumn(hwndList, iSubItem, &col))
        return E_FAIL;
    iSubItem++;

    LoadString(NULL, IDS_DRIVER16, sz, MAX_PATH);
    col.pszText = sz;
    col.iSubItem = iSubItem;
    if (-1 == ListView_InsertColumn(hwndList, iSubItem, &col))
        return E_FAIL;
    iSubItem++;

    LoadString(NULL, IDS_DRIVER32, sz, MAX_PATH);
    col.pszText = sz;
    col.iSubItem = iSubItem;
    if (-1 == ListView_InsertColumn(hwndList, iSubItem, &col))
        return E_FAIL;
    iSubItem++;

    // Add a bogus column so SetColumnWidth doesn't do strange 
    // things with the last real column
    col.fmt = LVCFMT_RIGHT;
    col.pszText = TEXT("");
    col.iSubItem = iSubItem;
    if (-1 == ListView_InsertColumn(hwndList, iSubItem, &col))
        return E_FAIL;
    iSubItem++;

    if( s_pInputInfo == NULL )
        return S_OK;

    for (pInputDriverInfo = s_pInputInfo->m_pInputDriverInfoFirst; pInputDriverInfo != NULL; 
        pInputDriverInfo = pInputDriverInfo->m_pInputDriverInfoNext)
    {
        iSubItem = 0;

        item.mask = LVIF_TEXT | LVIF_STATE;
        item.iItem = ListView_GetItemCount(hwndList);
        item.stateMask = 0xffff;
        item.cchTextMax = 100;
        if (pInputDriverInfo->m_bProblem)
            item.state = (1 << 12);
        else
            item.state = 0;
        item.iSubItem = iSubItem++;
        item.pszText = pInputDriverInfo->m_szRegKey;
        if (-1 == ListView_InsertItem(hwndList, &item))
            return E_FAIL;

        item.mask = LVIF_TEXT;

        item.iSubItem = iSubItem++;
        if (pInputDriverInfo->m_bActive)
            LoadString(NULL, IDS_YES, sz, MAX_PATH);
        else
            LoadString(NULL, IDS_NO, sz, MAX_PATH);
        item.pszText = sz;
        if (FALSE == ListView_SetItem(hwndList, &item))
            return E_FAIL;

        item.iSubItem = iSubItem++;
        item.pszText = pInputDriverInfo->m_szDeviceID;
        if (FALSE == ListView_SetItem(hwndList, &item))
            return E_FAIL;

        item.iSubItem = iSubItem++;
        item.pszText = pInputDriverInfo->m_szMatchingDeviceID;
        if (FALSE == ListView_SetItem(hwndList, &item))
            return E_FAIL;

        item.iSubItem = iSubItem++;
        item.pszText = pInputDriverInfo->m_szDriver16;
        if (FALSE == ListView_SetItem(hwndList, &item))
            return E_FAIL;

        item.iSubItem = iSubItem++;
        item.pszText = pInputDriverInfo->m_szDriver32;
        if (FALSE == ListView_SetItem(hwndList, &item))
            return E_FAIL;
    }

    // Autosize all columns to fit header/text tightly:
    INT iColumn = 0;
    INT iWidthHeader;
    INT iWidthText;
    while (TRUE)
    {
        if (FALSE == ListView_SetColumnWidth(hwndList, iColumn, LVSCW_AUTOSIZE_USEHEADER))
            break;
        iWidthHeader = ListView_GetColumnWidth(hwndList, iColumn);
        ListView_SetColumnWidth(hwndList, iColumn, LVSCW_AUTOSIZE);
        iWidthText = ListView_GetColumnWidth(hwndList, iColumn);
        if (iWidthText < iWidthHeader)
            ListView_SetColumnWidth(hwndList, iColumn, iWidthHeader);
        iColumn++;
    }
    // Delete the bogus column that was created
    ListView_DeleteColumn(hwndList, iColumn - 1);

    return S_OK;
}


/****************************************************************************
 *
 *  SetupInputDevices9x
 *
 ****************************************************************************/
HRESULT SetupInputDevices9x(VOID)
{
    HWND hwndList = GetDlgItem(s_hwndCurPage, IDC_LIST);
    LV_COLUMN col;
    LONG iSubItem = 0;
    LV_ITEM item;
    InputDeviceInfo* pInputDeviceInfo;
    TCHAR sz[MAX_PATH];

    ListView_SetImageList(hwndList, s_himgList, LVSIL_STATE);
    col.mask = LVCF_FMT | LVCF_WIDTH | LVCF_TEXT | LVCF_SUBITEM;
    col.fmt = LVCFMT_LEFT;
    col.cx = 100;
    LoadString(NULL, IDS_DEVICENAME, sz, MAX_PATH);
    col.pszText = sz;
    col.cchTextMax = 100;
    col.iSubItem = iSubItem;
    if (-1 == ListView_InsertColumn(hwndList, iSubItem, &col))
        return E_FAIL;
    iSubItem++;

    LoadString(NULL, IDS_USAGE, sz, MAX_PATH);
    col.pszText = sz;
    col.iSubItem = iSubItem;
    if (-1 == ListView_InsertColumn(hwndList, iSubItem, &col))
        return E_FAIL;
    iSubItem++;

    LoadString(NULL, IDS_DRIVERNAME, sz, MAX_PATH);
    col.pszText = sz;
    col.iSubItem = iSubItem;
    if (-1 == ListView_InsertColumn(hwndList, iSubItem, &col))
        return E_FAIL;
    iSubItem++;

    LoadString(NULL, IDS_VERSION, sz, MAX_PATH);
    col.pszText = sz;
    col.iSubItem = iSubItem;
    if (-1 == ListView_InsertColumn(hwndList, iSubItem, &col))
        return E_FAIL;
    iSubItem++;

    LoadString(NULL, IDS_ATTRIBUTES, sz, MAX_PATH);
    col.pszText = sz;
    col.iSubItem = iSubItem;
    if (-1 == ListView_InsertColumn(hwndList, iSubItem, &col))
        return E_FAIL;
    iSubItem++;

    LoadString(NULL, IDS_SIGNED, sz, MAX_PATH);
    col.pszText = sz;
    col.iSubItem = iSubItem;
    if (-1 == ListView_InsertColumn(hwndList, iSubItem, &col))
        return E_FAIL;
    iSubItem++;

    LoadString(NULL, IDS_LANGUAGE, sz, MAX_PATH);
    col.pszText = sz;
    col.iSubItem = iSubItem;
    if (-1 == ListView_InsertColumn(hwndList, iSubItem, &col))
        return E_FAIL;
    iSubItem++;

    col.fmt = LVCFMT_RIGHT;
    LoadString(NULL, IDS_DATE, sz, MAX_PATH);
    col.pszText = sz;
    col.iSubItem = iSubItem;
    if (-1 == ListView_InsertColumn(hwndList, iSubItem, &col))
        return E_FAIL;
    iSubItem++;

    col.fmt = LVCFMT_RIGHT;
    LoadString(NULL, IDS_SIZE, sz, MAX_PATH);
    col.pszText = sz;
    col.iSubItem = iSubItem;
    if (-1 == ListView_InsertColumn(hwndList, iSubItem, &col))
        return E_FAIL;
    iSubItem++;

    // Add a bogus column so SetColumnWidth doesn't do strange 
    // things with the last real column
    col.fmt = LVCFMT_RIGHT;
    col.pszText = TEXT("");
    col.iSubItem = iSubItem;
    if (-1 == ListView_InsertColumn(hwndList, iSubItem, &col))
        return E_FAIL;
    iSubItem++;

    for (pInputDeviceInfo = s_pInputInfo->m_pInputDeviceInfoFirst; pInputDeviceInfo != NULL; 
        pInputDeviceInfo = pInputDeviceInfo->m_pInputDeviceInfoNext)
    {
        iSubItem = 0;

        item.mask = LVIF_TEXT | LVIF_STATE;
        item.iItem = ListView_GetItemCount(hwndList);
        item.stateMask = 0xffff;
        item.cchTextMax = 100;
        if (pInputDeviceInfo->m_bProblem)
            item.state = (1 << 12);
        else
            item.state = 0;
        item.iSubItem = iSubItem++;
        item.pszText = pInputDeviceInfo->m_szDeviceName;
        if (-1 == ListView_InsertItem(hwndList, &item))
            return E_FAIL;

        item.mask = LVIF_TEXT;

        item.iSubItem = iSubItem++;
        item.pszText = pInputDeviceInfo->m_szSettings;
        if (FALSE == ListView_SetItem(hwndList, &item))
            return E_FAIL;

        item.iSubItem = iSubItem++;
        item.pszText = pInputDeviceInfo->m_szDriverName;
        if (FALSE == ListView_SetItem(hwndList, &item))
            return E_FAIL;

        item.iSubItem = iSubItem++;
        item.pszText = pInputDeviceInfo->m_szDriverVersion;
        if (FALSE == ListView_SetItem(hwndList, &item))
            return E_FAIL;

        item.iSubItem = iSubItem++;
        item.pszText = pInputDeviceInfo->m_szDriverAttributes;
        if (FALSE == ListView_SetItem(hwndList, &item))
            return E_FAIL;

        item.iSubItem = iSubItem++;
        if (pInputDeviceInfo->m_bDriverSignedValid)
        {
            if (pInputDeviceInfo->m_bDriverSigned)
                LoadString(NULL, IDS_YES, sz, MAX_PATH);
            else
                LoadString(NULL, IDS_NO, sz, MAX_PATH);
        }
        else
            LoadString(NULL, IDS_NA, sz, MAX_PATH);

        item.pszText = sz;
        if (FALSE == ListView_SetItem(hwndList, &item))
            return E_FAIL;

        item.iSubItem = iSubItem++;
        item.pszText = pInputDeviceInfo->m_szDriverLanguageLocal;
        if (FALSE == ListView_SetItem(hwndList, &item))
            return E_FAIL;

        item.iSubItem = iSubItem++;
        item.pszText = pInputDeviceInfo->m_szDriverDateLocal;
        if (FALSE == ListView_SetItem(hwndList, &item))
            return E_FAIL;

        item.iSubItem = iSubItem++;
        wsprintf(sz, TEXT("%d"), pInputDeviceInfo->m_numBytes);
        item.pszText = sz;
        if (FALSE == ListView_SetItem(hwndList, &item))
            return E_FAIL;
    }

    // Autosize all columns to fit header/text tightly:
    INT iColumn = 0;
    INT iWidthHeader;
    INT iWidthText;
    while (TRUE)
    {
        if (FALSE == ListView_SetColumnWidth(hwndList, iColumn, LVSCW_AUTOSIZE_USEHEADER))
            break;
        iWidthHeader = ListView_GetColumnWidth(hwndList, iColumn);
        ListView_SetColumnWidth(hwndList, iColumn, LVSCW_AUTOSIZE);
        iWidthText = ListView_GetColumnWidth(hwndList, iColumn);
        if (iWidthText < iWidthHeader)
            ListView_SetColumnWidth(hwndList, iColumn, iWidthHeader);
        iColumn++;
    }
    // Delete the bogus column that was created
    ListView_DeleteColumn(hwndList, iColumn - 1);
    return S_OK;
}


/****************************************************************************
 *
 *  SetupInputDevicesNT
 *
 ****************************************************************************/
HRESULT SetupInputDevicesNT(VOID)
{
    HWND hwndList = GetDlgItem(s_hwndCurPage, IDC_LIST);
    LV_COLUMN col;
    LONG iSubItem = 0;
    LV_ITEM item;
    InputDeviceInfoNT* pInputDeviceInfoNT;
    TCHAR sz[MAX_PATH];

    ListView_SetImageList(hwndList, s_himgList, LVSIL_STATE);
    col.mask = LVCF_FMT | LVCF_WIDTH | LVCF_TEXT | LVCF_SUBITEM;
    col.fmt = LVCFMT_LEFT;
    col.cx = 100;
    LoadString(NULL, IDS_DEVICENAME, sz, MAX_PATH);
    col.pszText = sz;
    col.cchTextMax = 100;
    col.iSubItem = iSubItem;
    if (-1 == ListView_InsertColumn(hwndList, iSubItem, &col))
        return E_FAIL;
    iSubItem++;

    LoadString(NULL, IDS_PROVIDER, sz, MAX_PATH);
    col.pszText = sz;
    col.iSubItem = iSubItem;
    if (-1 == ListView_InsertColumn(hwndList, iSubItem, &col))
        return E_FAIL;
    iSubItem++;

    LoadString(NULL, IDS_DEVICEID, sz, MAX_PATH);
    col.pszText = sz;
    col.iSubItem = iSubItem;
    if (-1 == ListView_InsertColumn(hwndList, iSubItem, &col))
        return E_FAIL;
    iSubItem++;

    LoadString(NULL, IDS_STATUS, sz, MAX_PATH);
    col.pszText = sz;
    col.iSubItem = iSubItem;
    if (-1 == ListView_InsertColumn(hwndList, iSubItem, &col))
        return E_FAIL;
    iSubItem++;

    LoadString(NULL, IDS_PORTNAME, sz, MAX_PATH);
    col.pszText = sz;
    col.iSubItem = iSubItem;
    if (-1 == ListView_InsertColumn(hwndList, iSubItem, &col))
        return E_FAIL;
    iSubItem++;

    LoadString(NULL, IDS_PORTPROVIDER, sz, MAX_PATH);
    col.pszText = sz;
    col.iSubItem = iSubItem;
    if (-1 == ListView_InsertColumn(hwndList, iSubItem, &col))
        return E_FAIL;
    iSubItem++;

    LoadString(NULL, IDS_PORTID, sz, MAX_PATH);
    col.pszText = sz;
    col.iSubItem = iSubItem;
    if (-1 == ListView_InsertColumn(hwndList, iSubItem, &col))
        return E_FAIL;
    iSubItem++;

    LoadString(NULL, IDS_PORTSTATUS, sz, MAX_PATH);
    col.pszText = sz;
    col.iSubItem = iSubItem;
    if (-1 == ListView_InsertColumn(hwndList, iSubItem, &col))
        return E_FAIL;
    iSubItem++;

    // Add a bogus column so SetColumnWidth doesn't do strange 
    // things with the last real column
    col.fmt = LVCFMT_RIGHT;
    col.pszText = TEXT("");
    col.iSubItem = iSubItem;
    if (-1 == ListView_InsertColumn(hwndList, iSubItem, &col))
        return E_FAIL;
    iSubItem++;

    if( s_pInputInfo == NULL )
        return S_OK;

    for (pInputDeviceInfoNT = s_pInputInfo->m_pInputDeviceInfoNTFirst; pInputDeviceInfoNT != NULL; 
        pInputDeviceInfoNT = pInputDeviceInfoNT->m_pInputDeviceInfoNTNext)
    {
        iSubItem = 0;

        item.mask = LVIF_TEXT | LVIF_STATE;
        item.iItem = ListView_GetItemCount(hwndList);
        item.stateMask = 0xffff;
        item.cchTextMax = 100;
        if (pInputDeviceInfoNT->m_bProblem)
            item.state = (1 << 12);
        else
            item.state = 0;
        item.iSubItem = iSubItem++;
        item.pszText = pInputDeviceInfoNT->m_szName;
        if (-1 == ListView_InsertItem(hwndList, &item))
            return E_FAIL;

        item.mask = LVIF_TEXT;

        item.iSubItem = iSubItem++;
        item.pszText = pInputDeviceInfoNT->m_szProvider;
        if (FALSE == ListView_SetItem(hwndList, &item))
            return E_FAIL;

        item.iSubItem = iSubItem++;
        item.pszText = pInputDeviceInfoNT->m_szId;
        if (FALSE == ListView_SetItem(hwndList, &item))
            return E_FAIL;

        wsprintf(sz, TEXT("0x%x, 0x%x"), pInputDeviceInfoNT->m_dwStatus, pInputDeviceInfoNT->m_dwProblem);
        item.iSubItem = iSubItem++;
        item.pszText = sz;
        if (FALSE == ListView_SetItem(hwndList, &item))
            return E_FAIL;

        item.iSubItem = iSubItem++;
        item.pszText = pInputDeviceInfoNT->m_szPortName;
        if (FALSE == ListView_SetItem(hwndList, &item))
            return E_FAIL;

        item.iSubItem = iSubItem++;
        item.pszText = pInputDeviceInfoNT->m_szPortProvider;
        if (FALSE == ListView_SetItem(hwndList, &item))
            return E_FAIL;

        item.iSubItem = iSubItem++;
        item.pszText = pInputDeviceInfoNT->m_szPortId;
        if (FALSE == ListView_SetItem(hwndList, &item))
            return E_FAIL;

        wsprintf(sz, TEXT("0x%x, 0x%x"), pInputDeviceInfoNT->m_dwPortStatus, pInputDeviceInfoNT->m_dwPortProblem);
        item.iSubItem = iSubItem++;
        item.pszText = sz;
        if (FALSE == ListView_SetItem(hwndList, &item))
            return E_FAIL;

    }

    // Autosize all columns to fit header/text tightly:
    INT iColumn = 0;
    INT iWidthHeader;
    INT iWidthText;
    while (TRUE)
    {
        if (FALSE == ListView_SetColumnWidth(hwndList, iColumn, LVSCW_AUTOSIZE_USEHEADER))
            break;
        iWidthHeader = ListView_GetColumnWidth(hwndList, iColumn);
        ListView_SetColumnWidth(hwndList, iColumn, LVSCW_AUTOSIZE);
        iWidthText = ListView_GetColumnWidth(hwndList, iColumn);
        if (iWidthText < iWidthHeader)
            ListView_SetColumnWidth(hwndList, iColumn, iWidthHeader);
        iColumn++;
    }
    // Delete the bogus column that was created
    ListView_DeleteColumn(hwndList, iColumn - 1);
    return S_OK;
}


/****************************************************************************
 *
 *  SetupNetworkPage
 *
 ****************************************************************************/
HRESULT SetupNetworkPage(VOID)
{
    TCHAR sz[MAX_PATH];

    // Diagnose net info again since the state may have changed
    // ******* DiagnoseNetInfo ********
    DiagnoseNetInfo(&s_sysInfo, s_pNetInfo);

    // Setup notes area.  Clear all text
    SendMessage(GetDlgItem(s_hwndCurPage, IDC_NOTES), EM_SETSEL, 0, -1);
    SendMessage(GetDlgItem(s_hwndCurPage, IDC_NOTES),
        EM_REPLACESEL, FALSE, (LPARAM)"");

    ShowBullets();

    SendMessage(GetDlgItem(s_hwndCurPage, IDC_NOTES), 
        EM_REPLACESEL, FALSE, (LPARAM)s_sysInfo.m_szNetworkNotes);

    // Disable bullets so last line doesn't have an empty bullet
    HideBullets();

    if( s_pNetInfo == NULL )
        return S_OK;

    // If column 1 doesn't exist yet, create columns, fill in port info, etc.
    HWND hwndList = GetDlgItem(s_hwndCurPage, IDC_DPSPLIST);
    LVCOLUMN lv;
    ZeroMemory(&lv, sizeof(lv));
    lv.mask = LVCF_WIDTH;
    if (FALSE == ListView_GetColumn(hwndList, 1, &lv))
    {
        // Set up service provider list 
        LV_COLUMN col;
        LONG iSubItem = 0;
        LV_ITEM item;
        NetSP* pNetSP;
        NetApp* pNetApp;

        // First list: service providers
        ListView_SetImageList(hwndList, s_himgList, LVSIL_STATE);
        col.mask = LVCF_FMT | LVCF_WIDTH | LVCF_TEXT | LVCF_SUBITEM;
        col.fmt = LVCFMT_LEFT;
        col.cx = 100;
        LoadString(NULL, IDS_NAME, sz, MAX_PATH);
        col.pszText = sz;
        col.cchTextMax = 100;
        col.iSubItem = iSubItem;
        if (-1 == ListView_InsertColumn(hwndList, iSubItem, &col))
            return E_FAIL;
        iSubItem++;

        LoadString(NULL, IDS_REGISTRY, sz, MAX_PATH);
        col.pszText = sz;
        col.iSubItem = iSubItem;
        if (-1 == ListView_InsertColumn(hwndList, iSubItem, &col))
            return E_FAIL;
        iSubItem++;

        LoadString(NULL, IDS_FILE, sz, MAX_PATH);
        col.pszText = sz;
        col.iSubItem = iSubItem;
        if (-1 == ListView_InsertColumn(hwndList, iSubItem, &col))
            return E_FAIL;
        iSubItem++;

        LoadString(NULL, IDS_VERSION, sz, MAX_PATH);
        col.pszText = sz;
        col.iSubItem = iSubItem;
        if (-1 == ListView_InsertColumn(hwndList, iSubItem, &col))
            return E_FAIL;
        iSubItem++;

        // Add a bogus column so SetColumnWidth doesn't do strange 
        // things with the last real column
        col.fmt = LVCFMT_RIGHT;
        col.pszText = TEXT("");
        col.iSubItem = iSubItem;
        if (-1 == ListView_InsertColumn(hwndList, iSubItem, &col))
            return E_FAIL;
        iSubItem++;

        for (pNetSP = s_pNetInfo->m_pNetSPFirst; pNetSP != NULL; 
            pNetSP = pNetSP->m_pNetSPNext)
        {
            iSubItem = 0;

            item.mask = LVIF_TEXT | LVIF_STATE;
            item.iItem = ListView_GetItemCount(hwndList);
            item.stateMask = 0xffff;
            item.cchTextMax = 100;
            if (pNetSP->m_bProblem)
                item.state = (1 << 12);
            else
                item.state = 0;
            item.iSubItem = iSubItem++;
            item.pszText = pNetSP->m_szName;
            if (-1 == ListView_InsertItem(hwndList, &item))
                return E_FAIL;

            item.mask = LVIF_TEXT;

            item.iSubItem = iSubItem++;
            if (pNetSP->m_bRegistryOK)
                LoadString(NULL, IDS_OK, sz, MAX_PATH);
            else
                LoadString(NULL, IDS_ERROR, sz, MAX_PATH);
            item.pszText = sz;
            if (FALSE == ListView_SetItem(hwndList, &item))
                return E_FAIL;

            item.iSubItem = iSubItem++;
            item.pszText = pNetSP->m_szFile;
            if (FALSE == ListView_SetItem(hwndList, &item))
                return E_FAIL;

            item.iSubItem = iSubItem++;
            item.pszText = pNetSP->m_szVersion;
            if (FALSE == ListView_SetItem(hwndList, &item))
                return E_FAIL;
        }

        // Autosize all columns to fit header/text tightly:
        INT iColumn = 0;
        INT iWidthHeader;
        INT iWidthText;
        while (TRUE)
        {
            if (FALSE == ListView_SetColumnWidth(hwndList, iColumn, LVSCW_AUTOSIZE_USEHEADER))
                break;
            iWidthHeader = ListView_GetColumnWidth(hwndList, iColumn);
            ListView_SetColumnWidth(hwndList, iColumn, LVSCW_AUTOSIZE);
            iWidthText = ListView_GetColumnWidth(hwndList, iColumn);
            if (iWidthText < iWidthHeader)
                ListView_SetColumnWidth(hwndList, iColumn, iWidthHeader);
            iColumn++;
        }
        // Delete the bogus column that was created
        ListView_DeleteColumn(hwndList, iColumn - 1);


        // Second list: lobbyable apps
        hwndList = GetDlgItem(s_hwndCurPage, IDC_DPALIST);
        ListView_SetImageList(hwndList, s_himgList, LVSIL_STATE);
        iSubItem = 0;
        col.mask = LVCF_FMT | LVCF_WIDTH | LVCF_TEXT | LVCF_SUBITEM;
        col.fmt = LVCFMT_LEFT;
        col.cx = 100;
        LoadString(NULL, IDS_NAME, sz, MAX_PATH);
        col.pszText = sz;
        col.cchTextMax = 100;
        col.iSubItem = iSubItem;
        if (-1 == ListView_InsertColumn(hwndList, iSubItem, &col))
            return E_FAIL;
        iSubItem++;

        LoadString(NULL, IDS_REGISTRY, sz, MAX_PATH);
        col.pszText = sz;
        col.iSubItem = iSubItem;
        if (-1 == ListView_InsertColumn(hwndList, iSubItem, &col))
            return E_FAIL;
        iSubItem++;

        LoadString(NULL, IDS_FILE, sz, MAX_PATH);
        col.pszText = sz;
        col.iSubItem = iSubItem;
        if (-1 == ListView_InsertColumn(hwndList, iSubItem, &col))
            return E_FAIL;
        iSubItem++;

        LoadString(NULL, IDS_VERSION, sz, MAX_PATH);
        col.pszText = sz;
        col.iSubItem = iSubItem;
        if (-1 == ListView_InsertColumn(hwndList, iSubItem, &col))
            return E_FAIL;
        iSubItem++;

        LoadString(NULL, IDS_GUID, sz, MAX_PATH);
        col.pszText = sz;
        col.iSubItem = iSubItem;
        if (-1 == ListView_InsertColumn(hwndList, iSubItem, &col))
            return E_FAIL;
        iSubItem++;

        // Add a bogus column so SetColumnWidth doesn't do strange 
        // things with the last real column
        col.fmt = LVCFMT_RIGHT;
        col.pszText = TEXT("");
        col.iSubItem = iSubItem;
        if (-1 == ListView_InsertColumn(hwndList, iSubItem, &col))
            return E_FAIL;
        iSubItem++;

        for (pNetApp = s_pNetInfo->m_pNetAppFirst; pNetApp != NULL;
            pNetApp = pNetApp->m_pNetAppNext)
        {
            iSubItem = 0;

            item.mask = LVIF_TEXT | LVIF_STATE;
            item.iItem = ListView_GetItemCount(hwndList);
            item.stateMask = 0xffff;
            item.cchTextMax = 100;
            if (pNetApp->m_bProblem)
                item.state = (1 << 12);
            else
                item.state = 0;
            item.iSubItem = iSubItem++;
            item.pszText = pNetApp->m_szName;
            if (-1 == ListView_InsertItem(hwndList, &item))
                return E_FAIL;

            item.mask = LVIF_TEXT;

            item.iSubItem = iSubItem++;
            if (pNetApp->m_bRegistryOK)
                LoadString(NULL, IDS_OK, sz, MAX_PATH);
            else
                LoadString(NULL, IDS_ERROR, sz, MAX_PATH);
            item.pszText = sz;
            if (FALSE == ListView_SetItem(hwndList, &item))
                return E_FAIL;

            item.iSubItem = iSubItem++;
            item.pszText = pNetApp->m_szExeFile;
            if (FALSE == ListView_SetItem(hwndList, &item))
                return E_FAIL;

            item.iSubItem = iSubItem++;
            item.pszText = pNetApp->m_szExeVersion;
            if (FALSE == ListView_SetItem(hwndList, &item))
                return E_FAIL;

            item.iSubItem = iSubItem++;
            item.pszText = pNetApp->m_szGuid;
            if (FALSE == ListView_SetItem(hwndList, &item))
                return E_FAIL;
        }

        // Autosize all columns to fit header/text tightly:
        iColumn = 0;
        iWidthHeader;
        iWidthText;
        while (TRUE)
        {
            if (FALSE == ListView_SetColumnWidth(hwndList, iColumn, LVSCW_AUTOSIZE_USEHEADER))
                break;
            iWidthHeader = ListView_GetColumnWidth(hwndList, iColumn);
            ListView_SetColumnWidth(hwndList, iColumn, LVSCW_AUTOSIZE);
            iWidthText = ListView_GetColumnWidth(hwndList, iColumn);
            if (iWidthText < iWidthHeader)
                ListView_SetColumnWidth(hwndList, iColumn, iWidthHeader);
            iColumn++;
        }
        // Delete the bogus column that was created
        ListView_DeleteColumn(hwndList, iColumn - 1);
    }

    return S_OK;
}


/****************************************************************************
 *
 *  SetupStillStuckPage
 *
 ****************************************************************************/
HRESULT SetupStillStuckPage(VOID)
{
    EnableWindow(GetDlgItem(s_hwndCurPage, IDC_TROUBLESHOOT), FALSE );
    EnableWindow(GetDlgItem(s_hwndCurPage, IDC_TROUBLESHOOTSOUND), FALSE );
    EnableWindow(GetDlgItem(s_hwndCurPage, IDC_MSINFO), FALSE );
    EnableWindow(GetDlgItem(s_hwndCurPage, IDC_RESTOREDRIVERS), FALSE );
    EnableWindow(GetDlgItem(s_hwndCurPage, IDC_REPORTBUG), FALSE );
    EnableWindow(GetDlgItem(s_hwndCurPage, IDC_GHOST), FALSE );

    // Hide "Troubleshooter" text/button if help file not found
    BOOL bFound;
    TCHAR szHelpPath[MAX_PATH];
    TCHAR szHelpLeaf[MAX_PATH];
    TCHAR szTroubleshooter[MAX_PATH];
    if( GetWindowsDirectory(szHelpPath, MAX_PATH) != 0 )
    {
        LoadString(NULL, IDS_HELPDIRLEAF, szHelpLeaf, MAX_PATH);
        lstrcat(szHelpPath, szHelpLeaf);

        if( BIsWin98() || BIsWin95() )
            LoadString(NULL, IDS_TROUBLESHOOTER_WIN98SE, szTroubleshooter, MAX_PATH);
        else if( BIsWinME() )
            LoadString(NULL, IDS_TROUBLESHOOTER_WINME, szTroubleshooter, MAX_PATH);
        else if( BIsWin2k() || BIsWhistler() )
            LoadString(NULL, IDS_TROUBLESHOOTER_WIN2K, szTroubleshooter, MAX_PATH);

        bFound = FALSE;
        lstrcat(szHelpPath, TEXT("\\"));
        lstrcat(szHelpPath, szTroubleshooter);
        if (GetFileAttributes(szHelpPath) != 0xffffffff)
        {
            bFound = TRUE;
        }
        else if( BIsWin98() || BIsWin95() )
        {
            if( GetWindowsDirectory(szHelpPath, MAX_PATH) != 0 )
            {
                LoadString(NULL, IDS_HELPDIRLEAF, szHelpLeaf, MAX_PATH);
                lstrcat(szHelpPath, szHelpLeaf);
                lstrcat(szHelpPath, TEXT("\\"));
                LoadString(NULL, IDS_TROUBLESHOOTER_WIN98, szTroubleshooter, MAX_PATH);
                lstrcat(szHelpPath, szTroubleshooter);

                if (GetFileAttributes(szHelpPath) != 0xffffffff)
                    bFound = TRUE;
            }
        }

        if( bFound )
        {
            ShowWindow(GetDlgItem(s_hwndCurPage, IDC_TROUBLESHOOT), SW_SHOW);
            EnableWindow(GetDlgItem(s_hwndCurPage, IDC_TROUBLESHOOT), TRUE);
            ShowWindow(GetDlgItem(s_hwndCurPage, IDC_TROUBLESHOOTTEXT), SW_SHOW);
        }
    }

    // Hide "Sound Troubleshooter" text/button if help file not found
    if( GetWindowsDirectory(szHelpPath, MAX_PATH) != 0 )
    {
        LoadString(NULL, IDS_HELPDIRLEAF, szHelpLeaf, MAX_PATH);
        lstrcat(szHelpPath, szHelpLeaf);

        if( BIsWin98() || BIsWin95() )
            LoadString(NULL, IDS_TROUBLESHOOTER_WIN98SE, szTroubleshooter, MAX_PATH);
        else if( BIsWinME() )
            LoadString(NULL, IDS_TROUBLESHOOTER_WINME, szTroubleshooter, MAX_PATH);
        else if( BIsWin2k() || BIsWhistler() )
            LoadString(NULL, IDS_TROUBLESHOOTER_WIN2K, szTroubleshooter, MAX_PATH);

        bFound = FALSE;
        lstrcat(szHelpPath, TEXT("\\"));
        lstrcat(szHelpPath, szTroubleshooter);
        if (GetFileAttributes(szHelpPath) != 0xffffffff)
        {
            bFound = TRUE;
        }
        else if( BIsWin98() || BIsWin95() )
        {
            if( GetWindowsDirectory(szHelpPath, MAX_PATH) != 0 )
            {
                LoadString(NULL, IDS_HELPDIRLEAF, szHelpLeaf, MAX_PATH);
                lstrcat(szHelpPath, szHelpLeaf);
                lstrcat(szHelpPath, TEXT("\\"));
                LoadString(NULL, IDS_SOUNDTROUBLESHOOTER_WIN98, szTroubleshooter, MAX_PATH);
                lstrcat(szHelpPath, szTroubleshooter);

                if (GetFileAttributes(szHelpPath) != 0xffffffff)
                    bFound = TRUE;
            }
        }

        if( bFound )
        {
            ShowWindow(GetDlgItem(s_hwndCurPage, IDC_TROUBLESHOOTSOUND), SW_SHOW);
            EnableWindow(GetDlgItem(s_hwndCurPage, IDC_TROUBLESHOOTSOUND), TRUE);
            ShowWindow(GetDlgItem(s_hwndCurPage, IDC_TROUBLESHOOTSOUNDTEXT), SW_SHOW);
        }
    }

    // Hide "MSInfo" text/button if msinfo32.exe not found
    HKEY hkey;
    TCHAR szMsInfo[MAX_PATH];
    DWORD cbData = MAX_PATH;
    DWORD dwType;
    if (ERROR_SUCCESS == RegOpenKeyEx(HKEY_LOCAL_MACHINE, 
        TEXT("Software\\Microsoft\\Shared Tools\\MSInfo"), 0, KEY_READ, &hkey))
    {
        RegQueryValueEx(hkey, TEXT("Path"), 0, &dwType, (LPBYTE)szMsInfo, &cbData);
        if (GetFileAttributes(szMsInfo) != 0xffffffff)
        {
            ShowWindow(GetDlgItem(s_hwndCurPage, IDC_MSINFO), SW_SHOW);
            EnableWindow(GetDlgItem(s_hwndCurPage, IDC_MSINFO), TRUE);
            ShowWindow(GetDlgItem(s_hwndCurPage, IDC_MSINFOTEXT), SW_SHOW);
        }
        RegCloseKey(hkey);
    }

    // Hide "Restore" text/button if dxsetup.exe not found
    if (BCanRestoreDrivers())
    {
        ShowWindow(GetDlgItem(s_hwndCurPage, IDC_RESTOREDRIVERS), SW_SHOW);
        ShowWindow(GetDlgItem(s_hwndCurPage, IDC_RESTOREDRIVERSTEXT), SW_SHOW);
        EnableWindow(GetDlgItem(s_hwndCurPage, IDC_RESTOREDRIVERS), TRUE);
    }

    // Only show "Adjust Ghost Devices" text/button if s_bGhost is set and not NT
    if (s_bGhost && !BIsPlatformNT())
    {
        ShowWindow(GetDlgItem(s_hwndCurPage, IDC_GHOST), SW_SHOW);
        EnableWindow(GetDlgItem(s_hwndCurPage, IDC_GHOST), TRUE);
        ShowWindow(GetDlgItem(s_hwndCurPage, IDC_GHOSTTEXT), SW_SHOW);
    }

    return S_OK;
}


/****************************************************************************
 *
 *  CreateFileInfoColumns
 *
 ****************************************************************************/
HRESULT CreateFileInfoColumns(HWND hwndList, BOOL bDrivers)
{
    LV_COLUMN col;
    LONG iSubItem = 0;
    TCHAR sz[MAX_PATH];

    col.mask = LVCF_FMT | LVCF_WIDTH | LVCF_TEXT | LVCF_SUBITEM;
    col.fmt = LVCFMT_LEFT;
    col.cx = 100;
    LoadString(NULL, IDS_NAME, sz, MAX_PATH);
    col.pszText = sz;
    col.cchTextMax = 100;
    col.iSubItem = iSubItem;
    if (-1 == ListView_InsertColumn(hwndList, iSubItem, &col))
        return E_FAIL;
    iSubItem++;

    LoadString(NULL, IDS_VERSION, sz, MAX_PATH);
    col.pszText = sz;
    col.iSubItem = iSubItem;
    if (-1 == ListView_InsertColumn(hwndList, iSubItem, &col))
        return E_FAIL;
    iSubItem++;

    if (bDrivers)
    {
        LoadString(NULL, IDS_SIGNED, sz, MAX_PATH);
        col.pszText = sz;
        col.iSubItem = iSubItem;
        if (-1 == ListView_InsertColumn(hwndList, iSubItem, &col))
            return E_FAIL;
        iSubItem++;
    }
    else
    {
        LoadString(NULL, IDS_ATTRIBUTES, sz, MAX_PATH);
        col.pszText = sz;
        col.iSubItem = iSubItem;
        if (-1 == ListView_InsertColumn(hwndList, iSubItem, &col))
            return E_FAIL;
        iSubItem++;
    }

    LoadString(NULL, IDS_LANGUAGE, sz, MAX_PATH);
    col.pszText = sz;
    col.iSubItem = iSubItem;
    if (-1 == ListView_InsertColumn(hwndList, iSubItem, &col))
        return E_FAIL;
    iSubItem++;

    col.fmt = LVCFMT_RIGHT;
    LoadString(NULL, IDS_DATE, sz, MAX_PATH);
    col.pszText = sz;
    col.iSubItem = iSubItem;
    if (-1 == ListView_InsertColumn(hwndList, iSubItem, &col))
        return E_FAIL;
    iSubItem++;

    col.fmt = LVCFMT_RIGHT;
    LoadString(NULL, IDS_SIZE, sz, MAX_PATH);
    col.pszText = sz;
    col.iSubItem = iSubItem;
    if (-1 == ListView_InsertColumn(hwndList, iSubItem, &col))
        return E_FAIL;
    iSubItem++;

    // Add a bogus column so SetColumnWidth doesn't do strange 
    // things with the last real column
    col.fmt = LVCFMT_RIGHT;
    col.pszText = TEXT("");
    col.iSubItem = iSubItem;
    if (-1 == ListView_InsertColumn(hwndList, iSubItem, &col))
        return E_FAIL;
    iSubItem++;

    return S_OK;
}


/****************************************************************************
 *
 *  AddFileInfo
 *
 ****************************************************************************/
HRESULT AddFileInfo(HWND hwndList, FileInfo* pFileInfoFirst, BOOL bDrivers)
{
    FileInfo* pFileInfo;
    LV_ITEM item;
    LONG iSubItem;
    TCHAR sz[MAX_PATH];

    for (pFileInfo = pFileInfoFirst; pFileInfo != NULL; 
        pFileInfo = pFileInfo->m_pFileInfoNext)
    {
        // Don't list missing files unless they're a "problem"
        if (!pFileInfo->m_bExists && !pFileInfo->m_bProblem)
            continue;

        // manbugs 16765: don't list obsolete files
        if (pFileInfo->m_bObsolete)
            continue;

        iSubItem = 0;
        item.mask = LVIF_TEXT | LVIF_STATE | LVIF_PARAM;
        item.iItem = ListView_GetItemCount(hwndList);
        item.stateMask = 0xffff;
        item.cchTextMax = 100;
        item.lParam = (LPARAM) pFileInfo;

        if (pFileInfo->m_bProblem)
            item.state = (1 << 12);
        else
            item.state = 0;

        item.iSubItem = iSubItem++;
        item.pszText = pFileInfo->m_szName;
        if (-1 == ListView_InsertItem(hwndList, &item))
            return E_FAIL;

        item.mask = LVIF_TEXT;

        item.iSubItem = iSubItem++;
        item.pszText = pFileInfo->m_szVersion;
        if (FALSE == ListView_SetItem(hwndList, &item))
            return E_FAIL;

        if (bDrivers)
        {
            item.iSubItem = iSubItem++;
            if (DXUtil_strcmpi(TEXT(".drv"), _tcsrchr(pFileInfo->m_szName, '.')) == 0)
            {
                if (pFileInfo->m_bSigned)
                    LoadString(NULL, IDS_YES, sz, MAX_PATH);
                else
                    LoadString(NULL, IDS_NO, sz, MAX_PATH);
            }
            else
            {
                LoadString(NULL, IDS_NA, sz, MAX_PATH);
            }
            item.pszText = sz;
            if (FALSE == ListView_SetItem(hwndList, &item))
                return E_FAIL;
        }
        else
        {
            item.iSubItem = iSubItem++;
            item.pszText = pFileInfo->m_szAttributes;
            if (FALSE == ListView_SetItem(hwndList, &item))
                return E_FAIL;
        }

        item.iSubItem = iSubItem++;
        item.pszText = pFileInfo->m_szLanguageLocal;
        if (FALSE == ListView_SetItem(hwndList, &item))
            return E_FAIL;

        item.iSubItem = iSubItem++;
        item.pszText = pFileInfo->m_szDatestampLocal;
        if (FALSE == ListView_SetItem(hwndList, &item))
            return E_FAIL;

        item.iSubItem = iSubItem++;
        wsprintf(sz, TEXT("%d"), pFileInfo->m_numBytes);
        item.pszText = sz;
        if (FALSE == ListView_SetItem(hwndList, &item))
            return E_FAIL;
    }
    return S_OK;
}


/****************************************************************************
 *
 *  CreateMusicColumns
 *
 ****************************************************************************/
HRESULT CreateMusicColumns(HWND hwndList)
{
    LV_COLUMN col;
    LONG iSubItem = 0;
    TCHAR sz[MAX_PATH];

    col.mask = LVCF_FMT | LVCF_WIDTH | LVCF_TEXT | LVCF_SUBITEM;
    col.fmt = LVCFMT_LEFT;
    col.cx = 100;
    LoadString(NULL, IDS_DESCRIPTION, sz, MAX_PATH);
    col.pszText = sz;
    col.cchTextMax = 100;
    col.iSubItem = iSubItem;
    if (-1 == ListView_InsertColumn(hwndList, iSubItem, &col))
        return E_FAIL;
    iSubItem++;

    LoadString(NULL, IDS_TYPE, sz, MAX_PATH);
    col.pszText = sz;
    col.iSubItem = iSubItem;
    if (-1 == ListView_InsertColumn(hwndList, iSubItem, &col))
        return E_FAIL;
    iSubItem++;

    LoadString(NULL, IDS_KERNELMODE, sz, MAX_PATH);
    col.fmt = LVCFMT_RIGHT;
    col.pszText = sz;
    col.iSubItem = iSubItem;
    if (-1 == ListView_InsertColumn(hwndList, iSubItem, &col))
        return E_FAIL;
    iSubItem++;

    LoadString(NULL, IDS_INOUT, sz, MAX_PATH);
    col.pszText = sz;
    col.iSubItem = iSubItem;
    if (-1 == ListView_InsertColumn(hwndList, iSubItem, &col))
        return E_FAIL;
    iSubItem++;

    LoadString(NULL, IDS_DLS, sz, MAX_PATH);
    col.fmt = LVCFMT_RIGHT;
    col.pszText = sz;
    col.iSubItem = iSubItem;
    if (-1 == ListView_InsertColumn(hwndList, iSubItem, &col))
        return E_FAIL;
    iSubItem++;

    LoadString(NULL, IDS_EXTERNAL, sz, MAX_PATH);
    col.fmt = LVCFMT_RIGHT;
    col.pszText = sz;
    col.iSubItem = iSubItem;
    if (-1 == ListView_InsertColumn(hwndList, iSubItem, &col))
        return E_FAIL;
    iSubItem++;

    LoadString(NULL, IDS_DEFAULTPORT, sz, MAX_PATH);
    col.fmt = LVCFMT_RIGHT;
    col.pszText = sz;
    col.iSubItem = iSubItem;
    if (-1 == ListView_InsertColumn(hwndList, iSubItem, &col))
        return E_FAIL;
    iSubItem++;

    // Add a bogus column so SetColumnWidth doesn't do strange 
    // things with the last real column
    col.fmt = LVCFMT_RIGHT;
    col.pszText = TEXT("");
    col.iSubItem = iSubItem;
    if (-1 == ListView_InsertColumn(hwndList, iSubItem, &col))
        return E_FAIL;
    iSubItem++;

    return S_OK;
}


/****************************************************************************
 *
 *  AddMusicPortInfo
 *
 ****************************************************************************/
HRESULT AddMusicPortInfo(HWND hwndList, MusicInfo* pMusicInfo)
{
    MusicPort* pMusicPort;
    LV_ITEM item;
    LONG iSubItem;
    TCHAR sz[MAX_PATH];

    for (pMusicPort = pMusicInfo->m_pMusicPortFirst; pMusicPort != NULL; 
        pMusicPort = pMusicPort->m_pMusicPortNext)
    {
        iSubItem = 0;
        item.mask = LVIF_TEXT | LVIF_STATE;
        item.iItem = ListView_GetItemCount(hwndList);
        item.stateMask = 0xffff;
        item.cchTextMax = 100;

/*      if (pMusicPortInfo->m_bProblem)
            item.state = (1 << 12);
        else
*/          item.state = 0;

        item.iSubItem = iSubItem++;
        item.pszText = pMusicPort->m_szDescription;
        if (-1 == ListView_InsertItem(hwndList, &item))
            return E_FAIL;

        item.mask = LVIF_TEXT;

        item.iSubItem = iSubItem++;
        LoadString(NULL, pMusicPort->m_bSoftware ? IDS_SOFTWARE : IDS_HARDWARE, sz, MAX_PATH);
        item.pszText = sz;
        if (FALSE == ListView_SetItem(hwndList, &item))
            return E_FAIL;

        item.iSubItem = iSubItem++;
        LoadString(NULL, pMusicPort->m_bKernelMode ? IDS_YES : IDS_NO, sz, MAX_PATH);
        item.pszText = sz;
        if (FALSE == ListView_SetItem(hwndList, &item))
            return E_FAIL;
        
        item.iSubItem = iSubItem++;
        LoadString(NULL, pMusicPort->m_bOutputPort ? IDS_OUTPUT : IDS_INPUT, sz, MAX_PATH);
        item.pszText = sz;
        if (FALSE == ListView_SetItem(hwndList, &item))
            return E_FAIL;

        item.iSubItem = iSubItem++;
        LoadString(NULL, pMusicPort->m_bUsesDLS ? IDS_YES : IDS_NO, sz, MAX_PATH);
        item.pszText = sz;
        if (FALSE == ListView_SetItem(hwndList, &item))
            return E_FAIL;
        
        item.iSubItem = iSubItem++;
        LoadString(NULL, pMusicPort->m_bExternal ? IDS_YES : IDS_NO, sz, MAX_PATH);
        item.pszText = sz;
        if (FALSE == ListView_SetItem(hwndList, &item))
            return E_FAIL;
        
        item.iSubItem = iSubItem++;
        LoadString(NULL, pMusicPort->m_bDefaultPort ? IDS_YES : IDS_NO, sz, MAX_PATH);
        item.pszText = sz;
        if (FALSE == ListView_SetItem(hwndList, &item))
            return E_FAIL;
    }
    return S_OK;
}


/****************************************************************************
 *
 *  ScanSystem
 *
 ****************************************************************************/
HRESULT ScanSystem(VOID)
{
    HRESULT hr;
    TCHAR szPath[MAX_PATH];

    // ******* GetComponentFiles (SI:2) ********
    if( s_bUseSystemInfo )
    {
        s_bUseSystemInfo = QueryCrashProtection( DXD_IN_SI_KEY, DXD_IN_SI_VALUE, IDS_SI, 2 );
        if( s_bUseSystemInfo )
        {
            EnterCrashProtection( DXD_IN_SI_KEY, DXD_IN_SI_VALUE, 2 );
            // ******* GetComponentFiles in Windows Dir ********
            // First, check for DirectX files incorrectly stored in the Windows folder:
            if( GetWindowsDirectory(szPath, MAX_PATH) == 0 )
                return E_FAIL;
            if (FAILED(hr = GetComponentFiles(szPath, &s_pDxWinComponentsFileInfoFirst, TRUE, IDS_DXGRAPHICS_COMPONENTFILES)))
                ReportError(IDS_COMPONENTFILESPROBLEM, hr);
            if (FAILED(hr = GetComponentFiles(szPath, &s_pDxWinComponentsFileInfoFirst, TRUE, IDS_DPLAY_COMPONENTFILES)))
                ReportError(IDS_COMPONENTFILESPROBLEM, hr);
            if (FAILED(hr = GetComponentFiles(szPath, &s_pDxWinComponentsFileInfoFirst, TRUE, IDS_DINPUT_COMPONENTFILES)))
                ReportError(IDS_COMPONENTFILESPROBLEM, hr);
            if (FAILED(hr = GetComponentFiles(szPath, &s_pDxWinComponentsFileInfoFirst, TRUE, IDS_DXAUDIO_COMPONENTFILES)))
                ReportError(IDS_COMPONENTFILESPROBLEM, hr);
            if (FAILED(hr = GetComponentFiles(szPath, &s_pDxWinComponentsFileInfoFirst, TRUE, IDS_DXMISC_COMPONENTFILES)))
                ReportError(IDS_COMPONENTFILESPROBLEM, hr);
            if (FAILED(hr = GetComponentFiles(szPath, &s_pDxWinComponentsFileInfoFirst, TRUE, IDS_BDA_COMPONENTFILES)))
                ReportError(IDS_BDA_COMPONENTFILES, hr);
            SendMessage( s_hwndMain, WM_APP_PROGRESS, 0, 0 );        

            // ******* GetComponentFiles in Sys Dir ********
            GetSystemDirectory(szPath, MAX_PATH);
            if (FAILED(hr = GetComponentFiles(szPath, &s_pDxComponentsFileInfoFirst, FALSE, IDS_DXGRAPHICS_COMPONENTFILES)))
                ReportError(IDS_COMPONENTFILESPROBLEM, hr);
            if (FAILED(hr = GetComponentFiles(szPath, &s_pDxComponentsFileInfoFirst, FALSE, IDS_DPLAY_COMPONENTFILES)))
                ReportError(IDS_COMPONENTFILESPROBLEM, hr);
            if (FAILED(hr = GetComponentFiles(szPath, &s_pDxComponentsFileInfoFirst, FALSE, IDS_DINPUT_COMPONENTFILES)))
                ReportError(IDS_COMPONENTFILESPROBLEM, hr);
            if (FAILED(hr = GetComponentFiles(szPath, &s_pDxComponentsFileInfoFirst, FALSE, IDS_DXAUDIO_COMPONENTFILES)))
                ReportError(IDS_COMPONENTFILESPROBLEM, hr);
            if (FAILED(hr = GetComponentFiles(szPath, &s_pDxComponentsFileInfoFirst, FALSE, IDS_DXMISC_COMPONENTFILES)))
                ReportError(IDS_COMPONENTFILESPROBLEM, hr);
            if (GetDxSetupFolder(szPath))
            {
                if (FAILED(hr = GetComponentFiles(szPath, &s_pDxComponentsFileInfoFirst, FALSE, IDS_DXSETUP_COMPONENTFILES)))
                    ReportError(IDS_COMPONENTFILESPROBLEM, hr);
            }

            GetSystemDirectory(szPath, MAX_PATH);
            if (FAILED(hr = GetComponentFiles(szPath, &s_pDxComponentsFileInfoFirst, FALSE, IDS_DXMEDIA_COMPONENTFILES)))
                ReportError(IDS_COMPONENTFILESPROBLEM, hr);
            if (FAILED(hr = GetComponentFiles(szPath, &s_pDxComponentsFileInfoFirst, FALSE, IDS_BDA_COMPONENTFILES)))
                ReportError(IDS_BDA_COMPONENTFILES, hr);
            LeaveCrashProtection( DXD_IN_SI_KEY, DXD_IN_SI_VALUE, 2 );
        }  
    }
    SendMessage( s_hwndMain, WM_APP_PROGRESS, 0, 0 );        

    // Stop if the UI thread is gone 
    if( s_hUIThread != NULL && WAIT_TIMEOUT != WaitForSingleObject( s_hUIThread, 0 ) )
        return S_FALSE;

    // ******* GetExtraDisplayInfo (DD:2) ********
    if( s_bUseDisplay )
    {
        s_bUseDisplay = QueryCrashProtection( DXD_IN_DD_KEY, DXD_IN_DD_VALUE, IDS_DD, 2 );
        if( s_bUseDisplay )
        {
            EnterCrashProtection( DXD_IN_DD_KEY, DXD_IN_DD_VALUE, 2 );
            if (FAILED(hr = GetExtraDisplayInfo(s_pDisplayInfoFirst)))
                ReportError(IDS_NOEXTRADISPLAYINFO, hr);
            LeaveCrashProtection( DXD_IN_DD_KEY, DXD_IN_DD_VALUE, 2 );
        }
    }
    SendMessage( s_hwndMain, WM_APP_PROGRESS, 0, 0 );        

    // Stop if the UI thread is gone 
    if( s_hUIThread != NULL && WAIT_TIMEOUT != WaitForSingleObject( s_hUIThread, 0 ) )
        return S_FALSE;

    // ******* GetDDrawDisplayInfo (DD:3) ********
    if( s_bUseDisplay )
    {
        s_bUseDisplay = QueryCrashProtection( DXD_IN_DD_KEY, DXD_IN_DD_VALUE, IDS_DD, 3 );

        if( !s_bGUI )
        {
            // If there's no gui, then check to see if we are 16 or less colors
            // If we are then don't use DirectDraw otherwise it will pop up a warning box
            HDC hDC = GetDC( NULL );

            if( hDC )
            {
                int nBitsPerPixel = GetDeviceCaps( hDC, BITSPIXEL ); 
                ReleaseDC( NULL, hDC );
        
                if( nBitsPerPixel < 8 )
                    s_bUseDisplay = FALSE;
            }
        }

        if( s_bUseDisplay )
        {
            EnterCrashProtection( DXD_IN_DD_KEY, DXD_IN_DD_VALUE, 3 );
            if(FAILED(hr = GetDDrawDisplayInfo(s_pDisplayInfoFirst)))
                ReportError(IDS_NOEXTRADISPLAYINFO, hr); 
            LeaveCrashProtection( DXD_IN_DD_KEY, DXD_IN_DD_VALUE, 3 );
        }
    }
    SendMessage( s_hwndMain, WM_APP_PROGRESS, 0, 0 );        

    // Stop if the UI thread is gone 
    if( s_hUIThread != NULL && WAIT_TIMEOUT != WaitForSingleObject( s_hUIThread, 0 ) )
        return S_FALSE;

    // ******* GetExtraSoundInfo (DS:2) ********
    if( s_bUseDSound )
    {
        s_bUseDSound = QueryCrashProtection( DXD_IN_DS_KEY, DXD_IN_DS_VALUE, IDS_DS, 2 );
        if( s_bUseDSound )
        {
            EnterCrashProtection( DXD_IN_DS_KEY, DXD_IN_DS_VALUE, 2 );
            if (FAILED(hr = GetExtraSoundInfo(s_pSoundInfoFirst)))
                ReportError(IDS_NOEXTRASOUNDINFO, hr);
            LeaveCrashProtection( DXD_IN_DS_KEY, DXD_IN_DS_VALUE, 2 );
        }
    }
    SendMessage( s_hwndMain, WM_APP_PROGRESS, 0, 0 );        

    // Stop if the UI thread is gone 
    if( s_hUIThread != NULL && WAIT_TIMEOUT != WaitForSingleObject( s_hUIThread, 0 ) )
        return S_FALSE;

    // ******* GetDSSoundInfo (DS:3) ********
    if( s_bUseDSound )
    {
        s_bUseDSound = QueryCrashProtection( DXD_IN_DS_KEY, DXD_IN_DS_VALUE, IDS_DS, 3 );
        if( s_bUseDSound )
        {
            EnterCrashProtection( DXD_IN_DS_KEY, DXD_IN_DS_VALUE, 3 );
            if (FAILED(hr = GetDSSoundInfo(s_pSoundInfoFirst)))
                ReportError(IDS_NOEXTRASOUNDINFO, hr);
            LeaveCrashProtection( DXD_IN_DS_KEY, DXD_IN_DS_VALUE, 3 );
        }
    }
    SendMessage( s_hwndMain, WM_APP_PROGRESS, 0, 0 );        

    // Stop if the UI thread is gone 
    if( s_hUIThread != NULL && WAIT_TIMEOUT != WaitForSingleObject( s_hUIThread, 0 ) )
        return S_FALSE;

    // ******* GetExtraMusicInfo (DM:2) *******
    if( s_bUseDMusic )
    {
        if (s_pMusicInfo != NULL && s_pMusicInfo->m_bDMusicInstalled)
        {
            s_bUseDMusic = QueryCrashProtection( DXD_IN_DM_KEY, DXD_IN_DM_VALUE, IDS_DM, 2 );
            if( s_bUseDMusic )
            {
                EnterCrashProtection( DXD_IN_DM_KEY, DXD_IN_DM_VALUE, 2 );
                if (FAILED(hr = GetExtraMusicInfo(s_pMusicInfo)))
                    ReportError(IDS_NOBASICMUSICINFO, hr);  
                LeaveCrashProtection( DXD_IN_DM_KEY, DXD_IN_DM_VALUE, 2 );
            }
            if (s_pMusicInfo->m_pMusicPortFirst != NULL)
                s_pMusicInfo->m_guidMusicPortTest = s_pMusicInfo->m_pMusicPortFirst->m_guid;
        }
    }
    SendMessage( s_hwndMain, WM_APP_PROGRESS, 0, 0 );        

    // Stop if the UI thread is gone 
    if( s_hUIThread != NULL && WAIT_TIMEOUT != WaitForSingleObject( s_hUIThread, 0 ) )
        return S_FALSE;

    // ******* GetInputInfo (DI:1) ********
    if( s_bUseDInput )
    {
        s_bUseDInput = QueryCrashProtection( DXD_IN_DI_KEY, DXD_IN_DI_VALUE, IDS_DI, 1 );
        if( s_bUseDInput )
        {
            EnterCrashProtection( DXD_IN_DI_KEY, DXD_IN_DI_VALUE, 1 );
            if (FAILED(hr = GetInputInfo(&s_pInputInfo)))
                ReportError(IDS_NOINPUTINFO, hr);
            LeaveCrashProtection( DXD_IN_DI_KEY, DXD_IN_DI_VALUE, 1 );
        }
    }
    SendMessage( s_hwndMain, WM_APP_PROGRESS, 0, 0 );        

    // Stop if the UI thread is gone 
    if( s_hUIThread != NULL && WAIT_TIMEOUT != WaitForSingleObject( s_hUIThread, 0 ) )
        return S_FALSE;

    // ******* GetInputDriverInfo (DI:2) ********
    if( s_bUseDInput )
    {
        s_bUseDInput = QueryCrashProtection( DXD_IN_DI_KEY, DXD_IN_DI_VALUE, IDS_DI, 2 );
        if( s_bUseDInput )
        {
            EnterCrashProtection( DXD_IN_DI_KEY, DXD_IN_DI_VALUE, 2 );
            if (FAILED(hr = GetInputDriverInfo(s_pInputInfo)))
                ReportError(IDS_NOINPUTDRIVERINFO, hr);
            LeaveCrashProtection( DXD_IN_DI_KEY, DXD_IN_DI_VALUE, 2 );
        }
    }
    SendMessage( s_hwndMain, WM_APP_PROGRESS, 0, 0 );        

    // Stop if the UI thread is gone 
    if( s_hUIThread != NULL && WAIT_TIMEOUT != WaitForSingleObject( s_hUIThread, 0 ) )
        return S_FALSE;

    // ******* GetNetInfo (DP:1) ********
    if( s_bUseDPlay )
    {
        s_bUseDPlay = QueryCrashProtection( DXD_IN_DP_KEY, DXD_IN_DP_VALUE, IDS_DP, 1 );
        if( s_bUseDPlay )
        {
            EnterCrashProtection( DXD_IN_DP_KEY, DXD_IN_DP_VALUE, 1 );
            if (FAILED(hr = GetNetInfo(&s_sysInfo, &s_pNetInfo)))
                ReportError(IDS_NONETINFO, hr);
            LeaveCrashProtection( DXD_IN_DP_KEY, DXD_IN_DP_VALUE, 1 );
        }
    }
    SendMessage( s_hwndMain, WM_APP_PROGRESS, 0, 0 );        

    // Stop if the UI thread is gone 
    if( s_hUIThread != NULL && WAIT_TIMEOUT != WaitForSingleObject( s_hUIThread, 0 ) )
        return S_FALSE;

    // ******* GetBasicShowInfo (SI:3) ********
    if( s_bUseDShow )
    {
        s_bUseDShow = QueryCrashProtection( DXD_IN_SI_KEY, DXD_IN_SI_VALUE, IDS_SI, 3 );
        if( s_bUseDShow )
        {
            EnterCrashProtection( DXD_IN_SI_KEY, DXD_IN_SI_VALUE, 3 );
  