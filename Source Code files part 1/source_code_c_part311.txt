 sizeof(numOfPorts);
    err = RegQueryValueEx(hDeviceKey,
                          y_szNumOfPorts,
                          NULL,
                          NULL,
                          (PBYTE)&numOfPorts,
                          &numOfPortsSize
                         );
//********************************************************
// TEST ERROR
//    err=ERROR_REGISTRY_CORRUPT;
//********************************************************

    RegCloseKey(hDeviceKey);

    if(err != ERROR_SUCCESS) {
        goto FillNPortsExit;
    }

    numportHwnd = GetDlgItem(DialogHwnd, PP_NUM_PORTS);
    wsprintf(szText, TEXT("%d"),numOfPorts);
    SetWindowText(numportHwnd,szText);


FillNPortsExit:

    //if (err != ERROR_SUCCESS) {
    //    MyMessageBoxWithErr(DialogHwnd,IDS_NUM_PORTS_DISABLED,IDS_CYCLOMY,MB_ICONWARNING,err);
    //}

    return err;
}


/*++

Routine Description: FillStartComCb

    fill in the Port Name combo box selection with a list
    of possible un-used portnames

Arguments:

    poppOurPropParams: where to save the data to
    hDlg:              address of the window

Return Value:

    BOOL: TRUE if StartCom CB displayed with no errors

--*/
BOOL
FillStartComCb(
    HWND            ParentHwnd,
    PPORT_PARAMS    Params
    )
{
    int   i, j, nEntries;
    DWORD   nCurPortNum = 0;
    DWORD   nCom; // Changed from int to DWORD (Fanny)
    DWORD dwError;
    TCHAR szCom[40];
    TCHAR szInUse[40];
    char  mask, *current;
    HWND  portHwnd;
    DEVINST devInst,newInst;

    //DbgOut(TEXT("FillStartComCb\n"));

    portHwnd = GetDlgItem(ParentHwnd, PP_START_COM);

    if (Params->hComDB == HCOMDB_INVALID_HANDLE_VALUE) {
        // This happens if we don't have sufficient security privileges.
        EnableWindow(portHwnd, FALSE);
        EnableWindow(GetDlgItem(ParentHwnd, IDC_START_COM), FALSE);
        return 0;
    }

    if (Params->PortUsage == NULL || Params->PortUsageSize == 0) {
        MyMessageBox(ParentHwnd,
                     IDS_MEM_ALLOC_WRN,
                     IDS_CYCLOMY,
                     MB_ICONWARNING);
        EnableWindow(portHwnd, FALSE);
        EnableWindow(GetDlgItem(ParentHwnd, IDC_START_COM), FALSE);
        return 0;
    }

    if (!LoadString(g_hInst, IDS_IN_USE, szInUse, CharSizeOf(szInUse))) {
        wcscpy(szInUse, _T(" (in use)"));
    }

    //
    // first tally up which ports NOT to offer in list box, ie, 
    // my ports should not appear as In Use.
    //
    if (CM_Get_Child(&devInst,(Params->DeviceInfoData)->DevInst,0) == CR_SUCCESS) {
        if ((dwError=GetPortName(devInst,Params->szComName,sizeof(Params->szComName))) != ERROR_SUCCESS) {
            MyMessageBoxWithErr(ParentHwnd,IDS_START_COM_DISABLED,IDS_CYCLOMY,MB_ICONWARNING,dwError);
            EnableWindow(portHwnd, FALSE);
            EnableWindow(GetDlgItem(ParentHwnd, IDC_START_COM), FALSE);
            return 0;
        }

        nCurPortNum = myatoi(&Params->szComName[3]);
        //nCom = myatoi(&szCom[3]);

        if ((dwError=CheckComRange(ParentHwnd,Params,nCurPortNum)) != COM_RANGE_OK) {
            if (dwError == COM_RANGE_TOO_BIG) {
                MyMessageBox(ParentHwnd,IDS_COM_TOO_BIG_WRN,IDS_CYCLOMY,MB_ICONWARNING);
            } else {
                MyMessageBox(ParentHwnd,IDS_MEM_ALLOC_WRN,IDS_CYCLOMY,MB_ICONWARNING);
            }
            EnableWindow(portHwnd, FALSE);
            EnableWindow(GetDlgItem(ParentHwnd, IDC_START_COM), FALSE);
            return 0;
        }

        current = Params->PortUsage + (nCurPortNum-1) / 8;
        if ((i = nCurPortNum % 8))
            *current &= ~(1 << (i-1));
        else
            *current &= ~(0x80);

        Params->NumChildren = 1;

        while (CM_Get_Sibling(&newInst,devInst,0) == CR_SUCCESS) {
            if ((dwError=GetPortName(newInst,szCom,sizeof(szCom))) != ERROR_SUCCESS) {
                MyMessageBoxWithErr(ParentHwnd,IDS_START_COM_DISABLED,IDS_CYCLOMY,MB_ICONWARNING,dwError);
                EnableWindow(portHwnd, FALSE);
                EnableWindow(GetDlgItem(ParentHwnd, IDC_START_COM), FALSE);
                return 0;
            }
            nCom = myatoi(&szCom[3]);

            if ((dwError=CheckComRange(ParentHwnd,Params,nCom)) != COM_RANGE_OK) {
                if (dwError == COM_RANGE_TOO_BIG) {
                    MyMessageBox(ParentHwnd,IDS_COM_TOO_BIG_WRN,IDS_CYCLOMY,MB_ICONWARNING);
                } else {
                    MyMessageBox(ParentHwnd,IDS_MEM_ALLOC_WRN,IDS_CYCLOMY,MB_ICONWARNING);
                }
                EnableWindow(portHwnd, FALSE);
                EnableWindow(GetDlgItem(ParentHwnd, IDC_START_COM), FALSE);
                return 0;
            }
            
            current = Params->PortUsage + (nCom-1) / 8;
            if ((i = nCom % 8))
                *current &= ~(1 << (i-1));
            else
                *current &= ~(0x80);

            Params->NumChildren++;

            devInst = newInst;
        }
    }

    // Fill Start COM Combo Box

    current = Params->PortUsage;
    mask = 0x1;
    for(nEntries = j = 0, i = MIN_COM-1; i < MAX_COM_PORT; i++) {

       wsprintf(szCom, TEXT("COM%d"), i+1);
       if (*current & mask) {
           wcscat(szCom, szInUse);
       }

       if (mask == (char) 0x80) {
           mask = 0x01;
           current++;
       }
       else {
           mask <<= 1;
       }

       ComboBox_AddString(portHwnd, szCom);
   }

   ComboBox_SetCurSel(portHwnd, nCurPortNum-1);

   return 1;
} /* FillStartComCb */



/*++

Routine Description: SavePortSettingsDlg

    save changes in the Cyclom-Y Settings dlg sheet

Arguments:

    Params: where to save the data to
    ParentHwnd:              address of the window

Return Value:

    BOOL: FALSE if function fails, TRUE if function passes

--*/
BOOL
SavePortSettingsDlg(
    IN HWND             DialogHwnd,
    IN PPORT_PARAMS     Params
    )
{
    BOOL retValue = TRUE;

    //
    //  store changes to win.ini; broadcast changes to apps
    //
    if (Params->ShowStartCom) {

        ComDBOpen(&Params->hComDB);

        retValue = SavePortSettings(DialogHwnd, Params);

        if (Params->hComDB != HCOMDB_INVALID_HANDLE_VALUE) {
            ComDBClose(Params->hComDB);
        }
    }
 
    return retValue;
} /* SavePortSettingsDlg */




/*++

Routine Description: SavePortSettings

    Read the dlg screen selections for baudrate, parity, etc.
    If changed from what we started with, then save them

Arguments:

    hDlg:      address of the window
    szComName: which comport we're dealing with
    Params:      contains, baudrate, parity, etc

Return Value:

    BOOL: FALSE if function fails, TRUE if function passes

--*/
BOOL
SavePortSettings(
    IN HWND            DialogHwnd,
    IN PPORT_PARAMS    Params
    )
{

    UINT    startComNum, curComNum, newComNum = CB_ERR;
    DEVINST devInst,newInst;
    TCHAR   buffer[BUFFER_SIZE];
    PCHILD_DATA ChildPtr,VarChildPtr;
    DWORD   numChild=0;
    DWORD   i;
    DWORD   dwError = ERROR_SUCCESS;
    BOOL    retValue = FALSE; // FALSE = failure

    //DbgOut(TEXT("SavePortSettings\n"));

    curComNum = myatoi(Params->szComName + wcslen(m_szCOM));
    newComNum = ComboBox_GetCurSel(GetDlgItem(DialogHwnd, PP_START_COM));

    if (newComNum == CB_ERR) {
        newComNum = curComNum;
    }
    else {
        newComNum++;
    }

    if (newComNum == curComNum) {
        return TRUE;    // No change, so just accept it.
    }

    startComNum = newComNum;

    if (Params->hComDB == HCOMDB_INVALID_HANDLE_VALUE) {
        MyMessageBox(DialogHwnd,IDS_INVALID_HCOMDB,IDS_CYCLOMY,MB_ICONERROR);
        return retValue;
    }

    ChildPtr = (PCHILD_DATA) LocalAlloc(LPTR,Params->NumChildren * sizeof(CHILD_DATA));
    if (ChildPtr == NULL) {
        MyMessageBox(DialogHwnd, IDS_MEM_ALLOC_ERR, IDS_CYCLOMY, MB_ICONERROR);
        return retValue;
    }

    VarChildPtr = ChildPtr;

    if (CM_Get_Child(&devInst,(Params->DeviceInfoData)->DevInst,0) == CR_SUCCESS) {
        if ((dwError = GetPortData(devInst,VarChildPtr)) != ERROR_SUCCESS) {
            MyMessageBoxWithErr(DialogHwnd,IDS_START_COM_NOT_CHANGED,IDS_CYCLOMY,
                                MB_ICONERROR,dwError);
            //ComboBox_SetCurSel(GetDlgItem(DialogHwnd,PP_START_COM), curComNum-1);
            goto Return;
        }

        numChild++;
        if (!QueryDosDevice(VarChildPtr->szComName, buffer, BUFFER_SIZE-1)) {
            dwError = GetLastError();
            MyMessageBoxWithErr(DialogHwnd, IDS_START_COM_NOT_CHANGED, IDS_CYCLOMY,
                         MB_ICONERROR,dwError);
            //ComboBox_SetCurSel(GetDlgItem(DialogHwnd,PP_START_COM), curComNum-1);
            goto Return;
        }
        //#if DBG
        //{
        //TCHAR buf[500];
        //wsprintf(buf, TEXT("QueryDosDevice(%s,buffer,%d) returned %s\n"),VarChildPtr->szComName,BUFFER_SIZE-1,buffer);
        //DbgOut(buf);
        //}
        //#endif
        
        if (TryToOpen(VarChildPtr->szComName) == FALSE) {
            dwError = GetLastError();
            MyMessageBox(DialogHwnd, IDS_PORT_OPEN_ERROR,IDS_CYCLOMY,MB_ICONERROR,
                         VarChildPtr->szComName);
            //ComboBox_SetCurSel(GetDlgItem(DialogHwnd,PP_START_COM), curComNum-1);
            goto Return;
        }

        if ((dwError = CheckComRange(DialogHwnd,Params,newComNum)) != COM_RANGE_OK) {
            if (dwError == COM_RANGE_TOO_BIG) {
                MyMessageBox(DialogHwnd, IDS_COM_TOO_BIG_ERR,IDS_CYCLOMY,MB_ICONERROR);
            } else {
                MyMessageBox(DialogHwnd, IDS_MEM_ALLOC_ERR,IDS_CYCLOMY,MB_ICONERROR);
            }
            //ComboBox_SetCurSel(GetDlgItem(DialogHwnd,PP_START_COM), curComNum-1);
            goto Return;
        }

        if (!NewComAvailable(Params,newComNum)) {
            MyMessageBox(DialogHwnd, IDS_PORT_IN_USE_ERROR, IDS_CYCLOMY,MB_ICONERROR);
            //ComboBox_SetCurSel(GetDlgItem(DialogHwnd,PP_START_COM), curComNum-1);
            goto Return;
        }
        VarChildPtr->NewComNum = newComNum;

        while (CM_Get_Sibling(&newInst,devInst,0) == CR_SUCCESS) {
            if (numChild >= Params->NumChildren) {
                // We should never reach here.
                DbgOut(TEXT("cyycoins Somehow I'm getting different number of children this time!\n"));
                break;
            }

            VarChildPtr++;
            if ((dwError=GetPortData(newInst,VarChildPtr)) != ERROR_SUCCESS) {
                MyMessageBoxWithErr(DialogHwnd, IDS_START_COM_NOT_CHANGED, IDS_CYCLOMY,
                                    MB_ICONERROR,dwError);
                goto Return;
            }
            numChild++;

            if (!QueryDosDevice(VarChildPtr->szComName, buffer, BUFFER_SIZE-1)) {
                dwError = GetLastError();
                MyMessageBoxWithErr(DialogHwnd, IDS_START_COM_NOT_CHANGED, IDS_CYCLOMY,
                                    MB_ICONERROR,dwError);
                goto Return;
            }
        
            if (TryToOpen(VarChildPtr->szComName) == FALSE) {
                dwError = GetLastError();
                MyMessageBox(DialogHwnd, IDS_PORT_OPEN_ERROR,IDS_CYCLOMY,
                             MB_ICONERROR,VarChildPtr->szComName);
                goto Return;
            }

            while (1) {
                newComNum++;

                if ((dwError=CheckComRange(DialogHwnd,Params,newComNum)) != COM_RANGE_OK) {
                    if (dwError == COM_RANGE_TOO_BIG) {
                        MyMessageBox(DialogHwnd, IDS_COM_TOO_BIG_ERR,IDS_CYCLOMY,MB_ICONERROR);
                    } else {
                        MyMessageBox(DialogHwnd, IDS_MEM_ALLOC_ERR,IDS_CYCLOMY,MB_ICONERROR);
                    }
                    //ComboBox_SetCurSel(GetDlgItem(DialogHwnd,PP_START_COM), curComNum-1);
                    goto Return;
                }

                if (NewComAvailable(Params,newComNum)) {
                    break;
                }
            }
            VarChildPtr->NewComNum = newComNum;

            devInst = newInst;
        }
    }
    
    if (startComNum < curComNum) {
        VarChildPtr = ChildPtr;
    }
    for (i=0; i<numChild; i++) {

        EnactComNameChanges(DialogHwnd,Params,VarChildPtr);

        if (startComNum < curComNum) {
            VarChildPtr++;
        } else {
            VarChildPtr--;
        }
    }

    retValue = TRUE;    // TRUE = SUCCESS

Return:
    if (ChildPtr) {
        VarChildPtr = ChildPtr;
        for (i=0; i<numChild; i++) {
            ClosePortData(VarChildPtr);
            VarChildPtr++;
        }
        LocalFree(ChildPtr);
    }
    
    return retValue;

} /* SavePortSettings */


void
RestoreDefaults(
    HWND            DialogHwnd,
    PPORT_PARAMS    Params
    )
{
    USHORT ushIndex;

    ushIndex =
        (USHORT) ComboBox_FindString(GetDlgItem(DialogHwnd, PP_START_COM),
                                     -1,
                                     Params->szComName);

    ushIndex = (ushIndex == CB_ERR) ? 0 : ushIndex;

    ComboBox_SetCurSel(GetDlgItem(DialogHwnd, PP_START_COM), ushIndex);
}


void
MigratePortSettings(
    LPCTSTR OldComName,
    LPCTSTR NewComName
    )
{
    TCHAR settings[BUFFER_SIZE];
    TCHAR szNew[20], szOld[20];

    lstrcpy(szOld, OldComName);
    wcscat(szOld, m_szColon);

    lstrcpy(szNew, NewComName);
    wcscat(szNew, m_szColon);

    settings[0] = TEXT('\0');
    GetProfileString(m_szPorts,
                     szOld,
                     TEXT(""),
                     settings,
                     sizeof(settings) / sizeof(TCHAR) );

    //
    // Insert the new key based on the old one
    //
    if (settings[0] == TEXT('\0')) {
        WriteProfileString(m_szPorts, szNew, m_szDefParams);
    }
    else {
        WriteProfileString(m_szPorts, szNew, settings);
    }

    //
    // Notify everybody of the changes and blow away the old key
    //
    SendWinIniChange((LPTSTR)m_szPorts);
    WriteProfileString(m_szPorts, szOld, NULL);
}


void
EnactComNameChanges(
    IN HWND             ParentHwnd,
    IN PPORT_PARAMS     Params,
    IN PCHILD_DATA      ChildPtr)
{
    DWORD  dwNewComNameLen;
    TCHAR  buffer[BUFFER_SIZE];
    TCHAR  szFriendlyNameFormat[LINE_LEN];
    TCHAR  szDeviceDesc[LINE_LEN];
    TCHAR  szNewComName[20];
    UINT   i;
    UINT   curComNum,NewComNum;
 
    SP_DEVINSTALL_PARAMS spDevInstall;

    //DbgOut(TEXT("EnactComNameChanges\n"));

    NewComNum = ChildPtr->NewComNum;
    curComNum = myatoi(ChildPtr->szComName + wcslen(m_szCOM));

    wsprintf(szNewComName, _T("COM%d"), NewComNum);
    dwNewComNameLen = ByteCountOf(wcslen(szNewComName) + 1);


    //
    // Change the name in the symbolic namespace.
    // First try to get what device the old com name mapped to
    // (ie something like \Device\Serial0).  Then remove the mapping.  If
    // the user isn't an admin, then this will fail and the dialog will popup.
    // Finally, map the new name to the old device retrieved from the
    // QueryDosDevice
    //
    //if (updateMapping) 
    {
        BOOL removed;
        HKEY hSerialMap;

        if (!QueryDosDevice(ChildPtr->szComName, buffer, BUFFER_SIZE-1)) {
            //
            // This shouldn't happen because the previous QueryDosDevice call
            // succeeded
            //
            MyMessageBox(ParentHwnd, IDS_PORT_RENAME_ERROR, IDS_CYCLOMY,
                         MB_ICONERROR, curComNum);
            return;
        }


        //
        // If this fails, then the following define will just replace the current
        // mapping.
        //
        removed = DefineDosDevice(DDD_REMOVE_DEFINITION, ChildPtr->szComName, NULL);

        if (!DefineDosDevice(DDD_RAW_TARGET_PATH, szNewComName, buffer)) {


            //
            // error, first fix up the remove definition and restore the old
            // mapping
            //
            if (removed) {
                DefineDosDevice(DDD_RAW_TARGET_PATH, ChildPtr->szComName, buffer);
            }

            MyMessageBox(ParentHwnd, IDS_PORT_RENAME_ERROR, IDS_CYCLOMY,
                         MB_ICONERROR, curComNum);

            return;
        }

        //
        // Set the \\HARDWARE\DEVICEMAP\SERIALCOMM field
        //
        if (RegOpenKeyEx(HKEY_LOCAL_MACHINE,
                         m_szRegSerialMap,
                         0,
                         KEY_ALL_ACCESS,
                         &hSerialMap) == ERROR_SUCCESS) {

            TCHAR  szSerial[BUFFER_SIZE];
            DWORD  dwSerialSize, dwEnum, dwType, dwComSize;
            TCHAR  szCom[BUFFER_SIZE];

            i = 0;
            do {
                dwSerialSize = CharSizeOf(szSerial);
                dwComSize = sizeof(szCom);
                dwEnum = RegEnumValue(hSerialMap,
                                      i++,
                                      szSerial,
                                      &dwSerialSize,
                                      NULL,
                                      &dwType,
                                      (LPBYTE)szCom,
                                      &dwComSize);

                if (dwEnum == ERROR_SUCCESS) {
                    if(dwType != REG_SZ)
                        continue;

                    if (wcscmp(szCom, ChildPtr->szComName) == 0) {
                        RegSetValueEx(hSerialMap,
                                        szSerial,
                                        0,
                                        REG_SZ,
                                        (PBYTE) szNewComName,
                                        dwNewComNameLen);
                                        break;
                    }
                }

            } while (dwEnum == ERROR_SUCCESS);
        }

        RegCloseKey(hSerialMap);
    }

    //
    // Update the com db
    //
    if (Params->hComDB != HCOMDB_INVALID_HANDLE_VALUE) {

        ComDBReleasePort(Params->hComDB, (DWORD) curComNum);

        ComDBClaimPort(Params->hComDB, (DWORD) NewComNum, TRUE, NULL);
    }

    //
    // Set the friendly name in the form of DeviceDesc (COM#)
    //
    if (ReplaceFriendlyName(ChildPtr->DeviceInfoSet,
                            &ChildPtr->DeviceInfoData,
                            szNewComName) == FALSE) {
        // ReplaceFriendlyName failed. Use original code.
        if (LoadString(g_hInst,
                       IDS_FRIENDLY_FORMAT,
                       szFriendlyNameFormat,
                       CharSizeOf(szFriendlyNameFormat)) &&
            SetupDiGetDeviceRegistryProperty(ChildPtr->DeviceInfoSet,
                                             &ChildPtr->DeviceInfoData,
                                             SPDRP_DEVICEDESC,
                                             NULL,
                                             (PBYTE) szDeviceDesc,
                                             sizeof(szDeviceDesc),
                                             NULL)) {
            wsprintf(buffer, szFriendlyNameFormat, szDeviceDesc, szNewComName);

        }
        else {
            //
            // Use the COM port name straight out
            //
            lstrcpy(buffer, szNewComName);
        }

        SetupDiSetDeviceRegistryProperty(ChildPtr->DeviceInfoSet,
                                         &ChildPtr->DeviceInfoData,
                                         SPDRP_FRIENDLYNAME,
                                         (PBYTE) buffer,
                                         ByteCountOf(wcslen(buffer)+1));
    }

    //
    // Set the parent dialog's title to reflect the change in the com port's name
    //
    //ChangeParentTitle(GetParent(ParentHwnd), AdvancedData->szComName, szNewComName);
    MigratePortSettings(ChildPtr->szComName, szNewComName);

    //
    // Update the PortName value in the devnode
    //
    RegSetValueEx(ChildPtr->hDeviceKey,
                  m_szPortName,
                  0,
                  REG_SZ,
                  (PBYTE)szNewComName,
                  dwNewComNameLen);
    //
    // Now broadcast this change to the device manager
    //

    ZeroMemory(&spDevInstall, sizeof(SP_DEVINSTALL_PARAMS));
    spDevInstall.cbSize = sizeof(SP_DEVINSTALL_PARAMS);

    if (SetupDiGetDeviceInstallParams(Params->DeviceInfoSet,
                                      Params->DeviceInfoData,
                                      &spDevInstall)) {

        spDevInstall.Flags |= DI_PROPERTIES_CHANGE;
        SetupDiSetDeviceInstallParams(Params->DeviceInfoSet,
                                      Params->DeviceInfoData,
                                      &spDevInstall);
    }
}


BOOL
NewComAvailable(
    IN PPORT_PARAMS Params,
    IN DWORD        NewComNum
)
{
    DWORD i;
    UCHAR mask;

    if ((i = NewComNum % 8))
        mask = 1 << (i-1);
    else
        mask = (char) 0x80;

    if (Params->PortUsage[(NewComNum-1)/8] & mask) {
        //
        // Port has been previously claimed
        //
        return FALSE;
    }

    return TRUE;
}

BOOL
TryToOpen(
    IN PTCHAR szCom
)
{
    TCHAR   szComFileName[20]; // more than enough for "\\.\COMXxxx"
    HANDLE  hCom;

    lstrcpy(szComFileName, L"\\\\.\\");
    lstrcat(szComFileName, szCom);

    //
    // Make sure that the port has not been opened by another application
    //
    hCom = CreateFile(szComFileName, GENERIC_READ, 0, NULL, OPEN_EXISTING,
                      FILE_ATTRIBUTE_NORMAL, NULL);

    //
    // If the file handle is invalid, then the com port is open, warn the user
    //
    if (hCom == INVALID_HANDLE_VALUE) {
        return FALSE;
    }

    CloseHandle(hCom);

    return TRUE;
}

ULONG
GetPortName(
    IN  DEVINST PortInst,
    IN  OUT TCHAR *ComName,
    IN  ULONG   ComNameSize
)
{

    HDEVINFO        portInfo;
    SP_DEVINFO_DATA portData;
    TCHAR           portId[MAX_DEVICE_ID_LEN];
    DWORD           dwPortNameSize, dwError;
    HKEY            hDeviceKey;

    dwError = ERROR_SUCCESS;

    if (CM_Get_Device_ID(PortInst,portId,CharSizeOf(portId),0) == CR_SUCCESS) {
        portInfo = SetupDiCreateDeviceInfoList(NULL,NULL);
        if (portInfo != INVALID_HANDLE_VALUE) {

            portData.cbSize = sizeof(SP_DEVINFO_DATA);
            if (SetupDiOpenDeviceInfo(portInfo,portId,NULL,0,&portData)) {

                hDeviceKey = SetupDiOpenDevRegKey(portInfo,&portData,
                                                  DICS_FLAG_GLOBAL,0,
                                                  DIREG_DEV,KEY_READ);
                if (hDeviceKey == INVALID_HANDLE_VALUE) {
                    dwError = GetLastError();
                }
                    
                dwPortNameSize = ComNameSize;

                dwError = RegQueryValueEx(hDeviceKey,
                                          m_szPortName,  // "PortName"
                                          NULL,
                                          NULL,
                                          (PBYTE)ComName,
                                          &dwPortNameSize);
                if (dwError == ERROR_SUCCESS) {
//                    #if DBG
//                    {
//                     TCHAR buf[500];
//                     wsprintf(buf, TEXT("cyycoins PortName %s\n"),ComName);
//                     DbgOut(buf);
//                    }
//                    #endif
                }

                RegCloseKey(hDeviceKey);

            } else {
                dwError = GetLastError();
            }
            SetupDiDestroyDeviceInfoList(portInfo);

        } else {
            dwError = GetLastError();
        }

    }

    return dwError;
}


ULONG
GetPortData(
    IN  DEVINST PortInst,
    OUT PCHILD_DATA ChildPtr
)
{

    HDEVINFO        portInfo;
    HKEY            hDeviceKey;
    TCHAR           portId[MAX_DEVICE_ID_LEN];
    DWORD           dwPortNameSize,dwError;

    dwError     = ERROR_SUCCESS;
    portInfo    = INVALID_HANDLE_VALUE;
    hDeviceKey  = INVALID_HANDLE_VALUE;

    if (CM_Get_Device_ID(PortInst,portId,CharSizeOf(portId),0) == CR_SUCCESS) {
        portInfo = SetupDiCreateDeviceInfoList(NULL,NULL);
        if (portInfo != INVALID_HANDLE_VALUE) {

            ChildPtr->DeviceInfoData.cbSize = sizeof(SP_DEVINFO_DATA);
            if (SetupDiOpenDeviceInfo(portInfo,
                                      portId,
                                      NULL,
                                      0,
                                      &ChildPtr->DeviceInfoData)) {

                hDeviceKey = SetupDiOpenDevRegKey(portInfo,&ChildPtr->DeviceInfoData,
                                                  DICS_FLAG_GLOBAL,0,
                                                  DIREG_DEV,KEY_ALL_ACCESS);
                if (hDeviceKey == INVALID_HANDLE_VALUE) {
                    dwError = GetLastError();
                } else {
                    
                    dwPortNameSize = sizeof(ChildPtr->szComName);

                    dwError = RegQueryValueEx(hDeviceKey,
                                              m_szPortName,  // "PortName"
                                              NULL,
                                              NULL,
                                              (PBYTE)ChildPtr->szComName,
                                              &dwPortNameSize);
                    if (dwError != ERROR_SUCCESS) {
                        RegCloseKey(hDeviceKey);
                        hDeviceKey = INVALID_HANDLE_VALUE;
                    }
                }

            } else {
                dwError = GetLastError();
            }
            if (dwError != ERROR_SUCCESS) {
                SetupDiDestroyDeviceInfoList(portInfo);
                portInfo = INVALID_HANDLE_VALUE;
            }

        } else {
            dwError = GetLastError();
        }

    }
    ChildPtr->DeviceInfoSet = portInfo;
    ChildPtr->hDeviceKey = hDeviceKey;
    return dwError;
}


void
ClosePortData(
    IN PCHILD_DATA ChildPtr
)
{
    if (ChildPtr->hDeviceKey != INVALID_HANDLE_VALUE) {
        RegCloseKey(ChildPtr->hDeviceKey);
    }
    if (ChildPtr->DeviceInfoSet != INVALID_HANDLE_VALUE) {
        SetupDiDestroyDeviceInfoList(ChildPtr->DeviceInfoSet);
    }
}


/*++

Routine Description: CheckComRange

    Returns TRUE if Com port is in the PortUsage range.

Arguments:

    ParentHwnd:         address of the window
    Params:             where to save the data to
    ComPort:            com port to be checked

Return Value:

    COM_RANGE_OK
    COM_RANGE_TOO_BIG
    COM_RANGE_MEM_ERR

--*/
DWORD
CheckComRange(
    HWND            ParentHwnd,
    PPORT_PARAMS    Params,
    DWORD           nCom
)
{
    PBYTE   newPortUsage;
    DWORD   portsReported;
    HCOMDB  hComDB;
    DWORD   comUsageSize = Params->PortUsageSize*8;
    
    if (nCom > MAX_COM_PORT) {
        return COM_RANGE_TOO_BIG;
    }

    if (nCom > comUsageSize) {

        if (comUsageSize < 256) {
            comUsageSize = 256;
        } else if (comUsageSize < 1024) {
            comUsageSize = 1024;
        } else if (comUsageSize < 2048) {
            comUsageSize = 2048;
        } else {
            return COM_RANGE_TOO_BIG;
        }
                
        // Re-alloc to COMDB_MAX_PORTS_ARBITRATED
        newPortUsage = (PBYTE) LocalAlloc(LPTR,comUsageSize/8);
        if (newPortUsage == NULL) {
            return COM_RANGE_MEM_ERR;
                     
        } else {
            //DbgOut(TEXT("Params->PortUsage replaced\n"));
            LocalFree(Params->PortUsage);
            Params->PortUsage = newPortUsage;
            Params->PortUsageSize = comUsageSize/8;
            ComDBGetCurrentPortUsage(Params->hComDB,
                                     NULL,
                                     0,
                                     0,
                                     &portsReported
                                     );
            if (comUsageSize > portsReported) {

                if (ComDBResizeDatabase(Params->hComDB, comUsageSize) != ERROR_SUCCESS){
                    //return COM_RANGE_TOO_BIG; // TODO: Replace by a better message.
                }

            }

            ComDBGetCurrentPortUsage(Params->hComDB,
                                     Params->PortUsage,
                                     Params->PortUsageSize,
                                     CDB_REPORT_BITS,
                                     &portsReported
                                     );
        }
    }

    return COM_RANGE_OK;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\y\cyyport\com3tst.c ===
#include <windows.h>
#include <stdio.h>

#define NUM     128

DWORD main(int argc, char *argv[], char *envp[])
{
CHAR chBuffer[128];
CHAR RdBuffer[128];
DWORD UseBaud = 9600;
WORD i;
HANDLE hCommPort;
DCB    dcb;
BOOL   bRc;
DWORD  dwNumWritten,dwNumRead,dwErrors;

envp;

if (argc > 1)
    {
    sscanf(argv[1],"%d",&UseBaud);
    }


printf("\n\n *** COMM TEST START ***\n\n");

printf("Opening the comm port for read write\n");

hCommPort = CreateFile(
                       "COM3",
                       GENERIC_READ|GENERIC_WRITE,
                       0, // exclusive
                       NULL, // sec attr
                       OPEN_EXISTING,
                       0,             // no attributes
                       NULL);         // no template

if (hCommPort == (HANDLE)-1)
    {
    printf("FAIL: OpenComm failed rc: %lx\n",hCommPort);
    return -1;
    }


printf("Opening the comm port for read write: SUCCESS hCommPort=%lx\n",hCommPort);

printf("Setting the line characteristics 9600,8,N,1 on comm \n");

dcb.DCBlength   = sizeof(DCB);
// dcb.DCBversion  = 0x0002; in spec not in header


if (!GetCommState(hCommPort,&dcb))
    {
    printf("FAIL: Couldn't get the dcb: %d\n",GetLastError());
    return FALSE;
    }

dcb.BaudRate = UseBaud;

dcb.ByteSize = 8;
dcb.Parity   = NOPARITY;
dcb.StopBits = ONESTOPBIT;

bRc = SetCommState(hCommPort,&dcb);

if (!bRc)
    {
    printf("FAIL: cannot set the comm state rc:%lx\n",bRc);
    return -1;
    }

printf("Setting the line characteristics 9600,8,N,1 on comm: SUCCESS\n");


printf("Filling the buffer with the known chars \n");

for (i=0; i< NUM; i++)
    {
    //chBuffer[i] = 'a';
    chBuffer[i] = (CHAR)i;

    }

printf("Filling the buffer with the known chars : SUCCESS\n");

printf("Dumping the buffer before sending it to comm\n");

for (i=0; i< NUM; i++)
    {
    //printf("%c",RdBuffer[i]);
    printf(" %d ",chBuffer[i]);

    }

printf("\nDumping the buffer before sending it to comm SUCCESS\n");



printf("Filling the Rdbuffer with the known chars (0xFF) to makeit dirty\n");

for (i=0; i< NUM; i++)
    {
    RdBuffer[i] = 0xFF;
    }

printf("Filling the Rdbuffer with the known chars (0xFF): SUCCESS\n");

printf("Writting this buffer to the comm port\n");

bRc = WriteFile( hCommPort,
                 chBuffer,
                 NUM,
                &dwNumWritten,
                 NULL);

if (!bRc)
        {
        printf("FAIL: cannot Write To the comm port:%lx\n",bRc);
        return -1;
        }

printf("Writting this buffer to the comm port: SUCCESS rc:%lx, byteswritten:%lx\n",
                                                     bRc,dwNumWritten);


printf("Reading this buffer from the comm port\n");

bRc = ReadFile( hCommPort,
                RdBuffer,
                NUM,
               &dwNumRead,
                NULL);

if (!bRc)
        {
        printf("FAIL: cannot Read From the comm port:%lx\n",bRc);
        return -1;
        }

printf("Reading this buffer from the comm port: SUCCESS rc:%lx, bytesread:%lx\n",
                                                     bRc,dwNumRead);


printf("Dumping the Rdbuffer with the comm data\n");

for (i=0; i< NUM; i++)
    {
    //printf("%c",RdBuffer[i]);
    printf(" %d ",RdBuffer[i]);

    }

printf("\nDumping the Rdbuffer with the comm data: SUCCESS\n");


printf("Closing the comm port\n");


bRc = ClearCommError(hCommPort,&dwErrors,NULL);

printf("ClearCommError: rc= %lx and dwErrors=%lx\n",bRc,dwErrors);


bRc = CloseHandle(hCommPort);

if (!bRc)
    {
        printf("FAIL: cannot close the comm port:%lx\n",bRc);
        return -1;
    }


printf("\n\n*** COMM TEST OVER*** \n\n");
return 0;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\y\cyyport\cyserial.h ===
/*++

Copyright (c) 1990, 1991, 1992, 1993 - 1997 Microsoft Corporation

Module Name :

    cyserial.h  

Abstract:

    Type definitions and data for the serial port driver
    Modified to contain only 8250 bit definitions. - Fanny

Author:


--*/



//
// Bitmask definitions for accessing the 8250 device registers.
//

//
// These bits define the number of data bits trasmitted in
// the Serial Data Unit (SDU - Start,data, parity, and stop bits)
//
#define SERIAL_DATA_LENGTH_5 0x00
#define SERIAL_DATA_LENGTH_6 0x01
#define SERIAL_DATA_LENGTH_7 0x02
#define SERIAL_DATA_LENGTH_8 0x03


//
// These masks define the interrupts that can be enabled or disabled.
//
//
// This interrupt is used to notify that there is new incomming
// data available.  The SERIAL_RDA interrupt is enabled by this bit.
//
#define SERIAL_IER_RDA   0x01

//
// This interrupt is used to notify that there is space available
// in the transmitter for another character.  The SERIAL_THR
// interrupt is enabled by this bit.
//
#define SERIAL_IER_THR   0x02

//
// This interrupt is used to notify that some sort of error occured
// with the incomming data.  The SERIAL_RLS interrupt is enabled by
// this bit.
#define SERIAL_IER_RLS   0x04

//
// This interrupt is used to notify that some sort of change has
// taken place in the modem control line.  The SERIAL_MS interrupt is
// enabled by this bit.
//
#define SERIAL_IER_MS    0x08


//
// These masks define the values of the interrupt identification
// register.  The low bit must be clear in the interrupt identification
// register for any of these interrupts to be valid.  The interrupts
// are defined in priority order, with the highest value being most
// important.  See above for a description of what each interrupt
// implies.
//
#define SERIAL_IIR_RLS      0x06
#define SERIAL_IIR_RDA      0x04
#define SERIAL_IIR_CTI      0x0c
#define SERIAL_IIR_THR      0x02
#define SERIAL_IIR_MS       0x00

//
// This bit mask get the value of the high two bits of the
// interrupt id register.  If this is a 16550 class chip
// these bits will be a one if the fifo's are enbled, otherwise
// they will always be zero.
//
#define SERIAL_IIR_FIFOS_ENABLED 0xc0

//
// If the low bit is logic one in the interrupt identification register
// this implies that *NO* interrupts are pending on the device.
//
#define SERIAL_IIR_NO_INTERRUPT_PENDING 0x01



//
// These masks define access to the fifo control register.
//

//
// Enabling this bit in the fifo control register will turn
// on the fifos.  If the fifos are enabled then the high two
// bits of the interrupt id register will be set to one.  Note
// that this only occurs on a 16550 class chip.  If the high
// two bits in the interrupt id register are not one then
// we know we have a lower model chip.
//
//
#define SERIAL_FCR_ENABLE     ((UCHAR)0x01)
#define SERIAL_FCR_RCVR_RESET ((UCHAR)0x02)
#define SERIAL_FCR_TXMT_RESET ((UCHAR)0x04)

//
// This set of values define the high water marks (when the
// interrupts trip) for the receive fifo.
//
#define SERIAL_1_BYTE_HIGH_WATER   ((UCHAR)0x00)
#define SERIAL_4_BYTE_HIGH_WATER   ((UCHAR)0x40)
#define SERIAL_8_BYTE_HIGH_WATER   ((UCHAR)0x80)
#define SERIAL_14_BYTE_HIGH_WATER  ((UCHAR)0xc0)

//
// These masks define access to the line control register.
//

//
// This defines the bit used to control the definition of the "first"
// two registers for the 8250.  These registers are the input/output
// register and the interrupt enable register.  When the DLAB bit is
// enabled these registers become the least significant and most
// significant bytes of the divisor value.
//
#define SERIAL_LCR_DLAB     0x80

//
// This defines the bit used to control whether the device is sending
// a break.  When this bit is set the device is sending a space (logic 0).
//
// Most protocols will assume that this is a hangup.
//
#define SERIAL_LCR_BREAK    0x40

//
// These defines are used to set the line control register.
//
#define SERIAL_5_DATA       ((UCHAR)0x00)
#define SERIAL_6_DATA       ((UCHAR)0x01)
#define SERIAL_7_DATA       ((UCHAR)0x02)
#define SERIAL_8_DATA       ((UCHAR)0x03)
#define SERIAL_DATA_MASK    ((UCHAR)0x03)

#define SERIAL_1_STOP       ((UCHAR)0x00)
#define SERIAL_1_5_STOP     ((UCHAR)0x04) // Only valid for 5 data bits
#define SERIAL_2_STOP       ((UCHAR)0x04) // Not valid for 5 data bits
#define SERIAL_STOP_MASK    ((UCHAR)0x04)

#define SERIAL_NONE_PARITY  ((UCHAR)0x00)
#define SERIAL_ODD_PARITY   ((UCHAR)0x08)
#define SERIAL_EVEN_PARITY  ((UCHAR)0x18)
#define SERIAL_MARK_PARITY  ((UCHAR)0x28)
#define SERIAL_SPACE_PARITY ((UCHAR)0x38)
#define SERIAL_PARITY_MASK  ((UCHAR)0x38)

//
// These masks define access the modem control register.
//

//
// This bit controls the data terminal ready (DTR) line.  When
// this bit is set the line goes to logic 0 (which is then inverted
// by normal hardware).  This is normally used to indicate that
// the device is available to be used.  Some odd hardware
// protocols (like the kernel debugger) use this for handshaking
// purposes.
//
#define SERIAL_MCR_DTR      0x01

//
// This bit controls the ready to send (RTS) line.  When this bit
// is set the line goes to logic 0 (which is then inverted by the normal
// hardware).  This is used for hardware handshaking.  It indicates that
// the hardware is ready to send data and it is waiting for the
// receiving end to set clear to send (CTS).
//
#define SERIAL_MCR_RTS      0x02

//
// This bit is used for general purpose output.
//
#define SERIAL_MCR_OUT1     0x04

//
// This bit is used for general purpose output.
//
#define SERIAL_MCR_OUT2     0x08

//
// This bit controls the loopback testing mode of the device.  Basically
// the outputs are connected to the inputs (and vice versa).
//
#define SERIAL_MCR_LOOP     0x10


//
// These masks define access to the line status register.  The line
// status register contains information about the status of data
// transfer.  The first five bits deal with receive data and the
// last two bits deal with transmission.  An interrupt is generated
// whenever bits 1 through 4 in this register are set.
//

//
// This bit is the data ready indicator.  It is set to indicate that
// a complete character has been received.  This bit is cleared whenever
// the receive buffer register has been read.
//
#define SERIAL_LSR_DR       0x01

//
// This is the overrun indicator.  It is set to indicate that the receive
// buffer register was not read befor a new character was transferred
// into the buffer.  This bit is cleared when this register is read.
//
#define SERIAL_LSR_OE       0x02

//
// This is the parity error indicator.  It is set whenever the hardware
// detects that the incoming serial data unit does not have the correct
// parity as defined by the parity select in the line control register.
// This bit is cleared by reading this register.
//
#define SERIAL_LSR_PE       0x04

//
// This is the framing error indicator.  It is set whenever the hardware
// detects that the incoming serial data unit does not have a valid
// stop bit.  This bit is cleared by reading this register.
//
#define SERIAL_LSR_FE       0x08

//
// This is the break interrupt indicator.  It is set whenever the data
// line is held to logic 0 for more than the amount of time it takes
// to send one serial data unit.  This bit is cleared whenever the
// this register is read.
//
#define SERIAL_LSR_BI       0x10

//
// This is the transmit holding register empty indicator.  It is set
// to indicate that the hardware is ready to accept another character
// for transmission.  This bit is cleared whenever a character is
// written to the transmit holding register.
//
#define SERIAL_LSR_THRE     0x20

//
// This bit is the transmitter empty indicator.  It is set whenever the
// transmit holding buffer is empty and the transmit shift register
// (a non-software accessable register that is used to actually put
// the data out on the wire) is empty.  Basically this means that all
// data has been sent.  It is cleared whenever the transmit holding or
// the shift registers contain data.
//
#define SERIAL_LSR_TEMT     0x40

//
// This bit indicates that there is at least one error in the fifo.
// The bit will not be turned off until there are no more errors
// in the fifo.
//
#define SERIAL_LSR_FIFOERR  0x80


//
// These masks are used to access the modem status register.
// Whenever one of the first four bits in the modem status
// register changes state a modem status interrupt is generated.
//

//
// This bit is the delta clear to send.  It is used to indicate
// that the clear to send bit (in this register) has *changed*
// since this register was last read by the CPU.
//
#define SERIAL_MSR_DCTS     0x01

//
// This bit is the delta data set ready.  It is used to indicate
// that the data set ready bit (in this register) has *changed*
// since this register was last read by the CPU.
//
#define SERIAL_MSR_DDSR     0x02

//
// This is the trailing edge ring indicator.  It is used to indicate
// that the ring indicator input has changed from a low to high state.
//
#define SERIAL_MSR_TERI     0x04

//
// This bit is the delta data carrier detect.  It is used to indicate
// that the data carrier bit (in this register) has *changed*
// since this register was last read by the CPU.
//
#define SERIAL_MSR_DDCD     0x08

//
// This bit contains the (complemented) state of the clear to send
// (CTS) line.
//
#define SERIAL_MSR_CTS      0x10

//
// This bit contains the (complemented) state of the data set ready
// (DSR) line.
//
#define SERIAL_MSR_DSR      0x20

//
// This bit contains the (complemented) state of the ring indicator
// (RI) line.
//
#define SERIAL_MSR_RI       0x40

//
// This bit contains the (complemented) state of the data carrier detect
// (DCD) line.
//
#define SERIAL_MSR_DCD      0x80
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\y\cyycoins\pp.h ===
#ifndef PP_H
#define PP_H

#define SERIAL_ADVANCED_SETTINGS
#include "msports.h"

#ifdef USE_P_TRACE_ERR
#define P_TRACE_ERR(_x) MessageBox( GetFocus(), TEXT(_x), TEXT("ports traceerr"), MB_OK | MB_ICONINFORMATION );
#define W_TRACE_ERR(_x) MessageBox( GetFocus(), _x, TEXT("ports traceerr"), MB_OK | MB_ICONINFORMATION );
#else
#define P_TRACE_ERR(_x)
#define W_TRACE_ERR(_x)
#endif

#define DO_COM_PORT_RENAMES

#define RX_MIN 1
#define RX_MAX 14
#define TX_MIN 1
#define TX_MAX 16

TCHAR m_szDevMgrHelp[];


//
// Structures
//

typedef struct _PORT_PARAMS
{
   HDEVINFO             DeviceInfoSet;
   PSP_DEVINFO_DATA     DeviceInfoData;
   HCOMDB               hComDB;     
   PBYTE                PortUsage;  
   DWORD                PortUsageSize; 
   BOOL                 ShowStartCom;  
   DWORD                NumChildren;   
   TCHAR                szComName[20]; 
} PORT_PARAMS, *PPORT_PARAMS;

typedef struct
{
   TCHAR            szComName[20];
   HDEVINFO         DeviceInfoSet;
   SP_DEVINFO_DATA  DeviceInfoData;
   HKEY             hDeviceKey;
   DWORD            NewComNum;
} CHILD_DATA, *PCHILD_DATA;

///////////////////////////////////////////////////////////////////////////////////
// Cyclom-Y Property Page Prototypes
///////////////////////////////////////////////////////////////////////////////////

void
InitOurPropParams(
    IN OUT PPORT_PARAMS     Params,
    IN HDEVINFO             DeviceInfoSet,
    IN PSP_DEVINFO_DATA     DeviceInfoData,
    IN PTCHAR               StrSettings
    );

HPROPSHEETPAGE
InitSettingsPage(
    PROPSHEETPAGE *      Psp,
    OUT PPORT_PARAMS    Params
    );

UINT CALLBACK
PortSettingsDlgCallback(
    HWND hwnd,
    UINT uMsg,
    LPPROPSHEETPAGE ppsp
    );

INT_PTR APIENTRY
PortSettingsDlgProc(
    IN HWND   hDlg,
    IN UINT   uMessage,
    IN WPARAM wParam,
    IN LPARAM lParam
    );

BOOL
SavePortSettings(
    IN HWND             DialogHwnd,
    IN PPORT_PARAMS     Params
    );

BOOL
SavePortSettingsDlg(
    IN HWND             DialogHwnd,
    IN PPORT_PARAMS     Params
    );

//Cyclom-y
void
RestoreDefaults(
    HWND            DialogHwnd,
    PPORT_PARAMS    Params
    );

ULONG
FillModelAndBusTypeText(
    IN HWND             DialogHwnd,
    IN PPORT_PARAMS     Params
    );

ULONG
FillNumberOfPortsText(
    IN HWND             DialogHwnd,
    IN PPORT_PARAMS     Params
    );

BOOL
FillStartComCb(
    HWND            ParentHwnd,
    PPORT_PARAMS    Params
    );

ULONG
GetPortName(
    IN  DEVINST PortInst,
    IN  OUT TCHAR *ComName,
    IN  ULONG   ComNameSize
    );

DWORD
CheckComRange(
    HWND            ParentHwnd,
    PPORT_PARAMS    Params,
    DWORD           nCom
    );
// Return codes for CheckComRange:
#define COM_RANGE_OK      0
#define COM_RANGE_TOO_BIG 1
#define COM_RANGE_MEM_ERR 2

BOOL
TryToOpen(
    IN PTCHAR szCom
    );

BOOL
NewComAvailable(
    IN PPORT_PARAMS Params,
    IN DWORD        NewComNum
    );

ULONG
GetPortData(
    IN  DEVINST PortInst,
    OUT PCHILD_DATA ChildPtr
    );

void
ClosePortData(
    IN PCHILD_DATA ChildPtr
    );

void
EnactComNameChanges(
    IN HWND             ParentHwnd,
    IN PPORT_PARAMS     Params,
    IN PCHILD_DATA      ChildPtr
    );


// Context help header file and arrays for devmgr ports tab
// Created 2/21/98 by WGruber NTUA and DoronH NTDEV

//
// "Port Settings" Dialog Box
//
#if 0
#define IDH_NOHELP      ((DWORD)-1)

#define IDH_DEVMGR_PORTSET_ADVANCED     15840   // "&Advanced" (Button)
#define IDH_DEVMGR_PORTSET_BPS      15841       // "" (ComboBox)
#define IDH_DEVMGR_PORTSET_DATABITS     15842   // "" (ComboBox)
#define IDH_DEVMGR_PORTSET_PARITY       15843   // "" (ComboBox)
#define IDH_DEVMGR_PORTSET_STOPBITS     15844   // "" (ComboBox)
#define IDH_DEVMGR_PORTSET_FLOW     15845       // "" (ComboBox)
#define IDH_DEVMGR_PORTSET_DEFAULTS     15892   // "&Restore Defaults" (Button)

//
// "Advanced Communications Port Properties" Dialog Box
//
#define IDH_DEVMGR_PORTSET_ADV_USEFIFO  16885   // "&Use FIFO buffers (requires 16550 compatible UART)" (Button)
#define IDH_DEVMGR_PORTSET_ADV_TRANS    16842   // "" (msctls_trackbar32)
#define IDH_DEVMGR_PORTSET_ADV_DEVICES  161027  // "" (ComboBox)
#define IDH_DEVMGR_PORTSET_ADV_RECV         16821       // "" (msctls_trackbar32)
#define IDH_DEVMGR_PORTSET_ADV_NUMBER   16846   // "" (ComboBox)
#define IDH_DEVMGR_PORTSET_ADV_DEFAULTS 16844

#endif

#include "cyyhelp.h"

#endif // PP_H
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\y\cyyport\cd1400.h ===
/*--------------------------------------------------------------------------
*	
*   Copyright (C) Cyclades Corporation, 1996-2001.
*   All rights reserved.
*	
*   Cyclom-Y Bus/Port Driver
*	
*   This file:      cd1400.h
*	
*   Description:    This file contains the Cirrus CD1400 serial
*                   controller related contants, macros, addresses,
*                   etc.
*
*   Notes:			This code supports Windows 2000 and x86 processor.
*	
*   Complies with Cyclades SW Coding Standard rev 1.3.
*	
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*	Change History
*
*--------------------------------------------------------------------------
*
*
*--------------------------------------------------------------------------
*/


#ifndef CD1400
#define CD1400 1


/* max number of chars in the FIFO */

#define MAX_CHAR_FIFO   (12)

/* Firmware Revision Code */

#define REV_G		0x46


/* CD1400 registers */

/* Global Registers */

#define GFRCR  (2 * 0x40)
#define CAR    (2 * 0x68)
#define GCR    (2 * 0x4b)
#define SVRR   (2 * 0x67)
#define RICR   (2 * 0x44)
#define TICR   (2 * 0x45)
#define MICR   (2 * 0x46)
#define RIR    (2 * 0x6b)
#define TIR    (2 * 0x6a)
#define MIR    (2 * 0x69)
#define PPR    (2 * 0x7e)

/* Virtual Registers */

#define RIVR   (2 * 0x43)
#define TIVR   (2 * 0x42)
#define MIVR   (2 * 0x41)
#define TDR    (2 * 0x63)
#define RDSR   (2 * 0x62)
#define MISR   (2 * 0x4c)
#define EOSRR  (2 * 0x60)

/* Channel Registers */

#define LIVR   (2 * 0x18)
#define CCR    (2 * 0x05)
#define SRER   (2 * 0x06)
#define COR1   (2 * 0x08)
#define COR2   (2 * 0x09)
#define COR3   (2 * 0x0a)
#define COR4   (2 * 0x1e)
#define COR5   (2 * 0x1f)
#define CCSR   (2 * 0x0b)
#define RDCR   (2 * 0x0e)
#define SCHR1  (2 * 0x1a)
#define SCHR2  (2 * 0x1b)
#define SCHR3  (2 * 0x1c)
#define SCHR4  (2 * 0x1d)
#define SCRL   (2 * 0x22)
#define SCRH   (2 * 0x23)
#define LNC    (2 * 0x24)
#define MCOR1  (2 * 0x15)
#define MCOR2  (2 * 0x16)
#define RTPR   (2 * 0x21)
#define MSVR1  (2 * 0x6c)
#define MSVR2  (2 * 0x6d)
#define PVSR   (2 * 0x6f)
#define RBPR   (2 * 0x78)
#define RCOR   (2 * 0x7c)
#define TBPR   (2 * 0x72)
#define TCOR   (2 * 0x76)


/* Register Settings */

/* Channel Access Register  (CAR) */

#define CHAN0	0x00
#define CHAN1 	0x01
#define CHAN2	0x02
#define CHAN3	0x03
 
/* Channel Option Register 1 (COR1)  */

#define  COR1_NONE_PARITY     0x10
#define  COR1_ODD_PARITY      0xc0
#define  COR1_EVEN_PARITY     0x40
#define  COR1_MARK_PARITY     0xb0
#define  COR1_SPACE_PARITY    0x30
#define  COR1_PARITY_MASK     0xf0
#define  COR1_PARITY_ENABLE_MASK 0x60

#define  COR1_1_STOP    0x00
#define  COR1_1_5_STOP  0x04
#define  COR1_2_STOP    0x08
#define  COR1_STOP_MASK 0x0c

#define  COR1_5_DATA		0x00
#define  COR1_6_DATA		0x01
#define  COR1_7_DATA		0x02
#define  COR1_8_DATA		0x03
#define  COR1_DATA_MASK	0x03

/* Channel Option Register 2  (COR2) */

#define IMPL_XON	0x80
#define AUTO_TXFL	0x40
#define EMBED_TX_ENABLE 0x20
#define LOCAL_LOOP_BCK 	0x10
#define REMOTE_LOOP_BCK 0x08
#define RTS_AUT_OUTPUT	0x04
#define CTS_AUT_ENABLE	0x02

/* Channel Option Register 3  (COR3) */

#define SPL_CH_DRANGE	0x80  /* special character detect range */
#define SPL_CH_DET1	0x40  /* enable special char. detect on SCHR4-SCHR3 */
#define FL_CTRL_TRNSP	0x20  /* Flow Control Transparency */
#define SPL_CH_DET2	0x10  /* Enable spl char. detect on SCHR2-SCHR1 */
#define REC_FIFO_12CH	0x0c  /* Receive FIFO threshold= 12 chars */


/* Global Configuration Register (GCR) values */

#define GCR_CH0_IS_SERIAL	0x00

/* Prescaler Period Register (PPR) values */

#define CLOCK_20_1MS	0x27
#define CLOCK_25_1MS	0x31
#define CLOCK_60_1MS	0x75

/* Channel Command Register (CCR) values */

#define CCR_RESET_CHANNEL           0x80
#define CCR_RESET_CD1400            0x81
#define CCR_FLUSH_TXFIFO            0x82
#define CCR_CORCHG_COR1             0x42
#define CCR_CORCHG_COR2             0x44
#define CCR_CORCHG_COR1_COR2        0x46
#define CCR_CORCHG_COR3             0x48
#define CCR_CORCHG_COR3_COR1        0x4a
#define CCR_CORCHG_COR3_COR2        0x4c
#define CCR_CORCHG_COR1_COR2_COR3   0x4e
#define CCR_SENDSC_SCHR1            0x21
#define CCR_SENDSC_SCHR2            0x22
#define CCR_SENDSC_SCHR3            0x23
#define CCR_SENDSC_SCHR4            0x24
#define CCR_DIS_RX                  0x11
#define CCR_ENA_RX                  0x12
#define CCR_DIS_TX                  0x14
#define CCR_ENA_TX                  0x18
#define CCR_DIS_TX_RX               0x15
#define CCR_DIS_TX_ENA_RX           0x16
#define CCR_ENA_TX_DIS_RX           0x19
#define CCR_ENA_TX_RX               0x1a

/* Service Request Enable Register (SRER) values */

#define SRER_TXRDY         0x04
#define SRER_TXMPTY        0x02


// Read from CD1400 registers

#define CD1400_READ(ChipAddress,IsPci,Register)             \
   (READ_REGISTER_UCHAR((ChipAddress)+((Register)<<(IsPci))))

// Write to CD1400 registers

#define CD1400_WRITE(ChipAddress,IsPci,Register,Value)      \
do                                                          \
{                                                           \
   WRITE_REGISTER_UCHAR(                                    \
      (ChipAddress)+ ((Register) << (IsPci)),               \
      (UCHAR)(Value)                                        \
      );                                                    \
} while (0);

#define CD1400_DISABLE_ALL_INTERRUPTS(ChipAddress,IsPci,CdChannel)  \
do                                                                  \
{                                                                   \
    CD1400_WRITE((ChipAddress),(IsPci),CAR,(CdChannel & 0x03));     \
    CD1400_WRITE((ChipAddress),(IsPci),SRER,0x00);                  \
                                                                    \
} while (0);


#endif /* CD1400 */

=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\y\cyyport\cyyflush.c ===
/*--------------------------------------------------------------------------
*	
*   Copyright (C) Cyclades Corporation, 1996-2001.
*   All rights reserved.
*	
*   Cyclom-Y Port Driver
*	
*   This file:      cyyflush.c
*	
*   Description:    This module contains the code related to flush
*                   operations in the Cyclom-Y Port driver.
*
*   Notes:          This code supports Windows 2000 and Windows XP,
*                   x86 and IA64 processors.
*	
*   Complies with Cyclades SW Coding Standard rev 1.3.
*	
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*   Change History
*
*--------------------------------------------------------------------------
*
*
*--------------------------------------------------------------------------
*/


#include "precomp.h"



NTSTATUS
CyyStartFlush(
    IN PCYY_DEVICE_EXTENSION Extension
    );

#ifdef ALLOC_PRAGMA
#pragma alloc_text(PAGESRP0,CyyFlush)
#pragma alloc_text(PAGESRP0,CyyStartFlush)
#endif


NTSTATUS
CyyFlush(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    )
/*--------------------------------------------------------------------------
    CyyFlush()
    
    Routine Description: This is the dispatch routine for flush.  Flushing
    works by placing this request in the write queue.  When this request
    reaches the front of the write queue we simply complete it since this
    implies that all previous writes have completed.

    Arguments:

    DeviceObject - Pointer to the device object for this device
    Irp - Pointer to the IRP for the current request

    Return Value: Could return status success, cancelled, or pending.
--------------------------------------------------------------------------*/
{
    PCYY_DEVICE_EXTENSION Extension = DeviceObject->DeviceExtension;
    NTSTATUS status;
    PAGED_CODE();

    CyyDbgPrintEx(CYYIRPPATH, "Dispatch entry for: %x\n", Irp);


    CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyyFlush(%X, %X)\n",
                  DeviceObject, Irp);
    
    Irp->IoStatus.Information = 0L;

    if ((status = CyyIRPPrologue(Irp, Extension)) == STATUS_SUCCESS) {

        if (CyyCompleteIfError(DeviceObject,Irp) != STATUS_SUCCESS) {
            CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyyFlush (1) %X\n",
                          STATUS_CANCELLED);
            return STATUS_CANCELLED;
        }

        status = CyyStartOrQueue(Extension, Irp, &Extension->WriteQueue,
                                 &Extension->CurrentWriteIrp,
                                 CyyStartFlush);

        CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyyFlush (2) %X\n", status);

        return status;

    } else {
        Irp->IoStatus.Status = status;

        if (!NT_SUCCESS(status)) {
            CyyCompleteRequest(Extension, Irp, IO_NO_INCREMENT);
        }

        CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyyFlush (3) %X\n", status);
        return status;
    }
    
}

NTSTATUS
CyyStartFlush(
    IN PCYY_DEVICE_EXTENSION Extension
    )
/*--------------------------------------------------------------------------
    CyyStartFlush()
    
    Routine Description: This routine is called if there were no writes in
    the queue. The flush became the current write because there was nothing
    in the queue.  Note however that does not mean there is nothing in the
    queue now!  So, we will start off the write that might follow us.

    Arguments:

    Extension - Points to the serial device extension

    Return Value: This will always return STATUS_SUCCESS.
--------------------------------------------------------------------------*/
{
    PIRP NewIrp;
    PAGED_CODE();

    Extension->CurrentWriteIrp->IoStatus.Status = STATUS_SUCCESS;

    // The following call will actually complete the flush.

    CyyGetNextWrite(
        &Extension->CurrentWriteIrp,
        &Extension->WriteQueue,
        &NewIrp,
        TRUE,
        Extension
        );

    if (NewIrp) {
        ASSERT(NewIrp == Extension->CurrentWriteIrp);
        CyyStartWrite(Extension);
    }

    return STATUS_SUCCESS;
}

=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\y\cyyport\cyyhw.h ===
/*--------------------------------------------------------------------------
*	
*   Copyright (C) Cyclades Corporation, 1999-2001.
*   All rights reserved.
*	
*   Cyclom-Y Bus/Port Driver
*	
*   This file:      cyyhw.h
*	
*   Description:    This module contains the common hardware declarations 
*                   for the parent driver (cyclom-y) and child driver
*                   (cyyport).
*
*   Notes:          This code supports Windows 2000 and x86 processor.
*	
*   Complies with Cyclades SW Coding Standard rev 1.3.
*	
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*   Change History
*
*--------------------------------------------------------------------------
*
*
*--------------------------------------------------------------------------
*/

#ifndef CYYHW_H
#define CYYHW_H


#define MAX_DEVICE_ID_LEN     200	// This definition was copied from NTDDK\inc\cfgmgr32.h
									// Always check if this value was changed. 
									// This is the maximum length for the Hardware ID.

#define CYYPORT_PNP_ID_WSTR         L"Cyclom-Y\\Port"
#define CYYPORT_PNP_ID_STR          "Cyclom-Y\\Port"
#define CYYPORT_DEV_ID_STR          "Cyclom-Y\\Port"

#define CYY_NUMBER_OF_RESOURCES     3     // Memory, PLX Memory, Interrupt


// Cyclom-Y hardware
#define CYY_RUNTIME_LENGTH          0x00000080
#define CYY_MAX_CHIPS 	            8
#define CYY_CHANNELS_PER_CHIP       4
#define CYY_MAX_PORTS	            (CYY_CHANNELS_PER_CHIP*CYY_MAX_CHIPS)

// Custom register offsets
#define CYY_CLEAR_INTR	            0x1800	//Isa; for PCI, multiply by 2
#define CYY_RESET_16	               0x1400	//Isa; for PCI, multiply by 2
#define CYY_PCI_TYPE	               0x3400	//PCI (no need to multiply by 2)

// Values in CYY_PCI_TYPE register
#define CYY_PLX9050		(0x0b)
#define CYY_PLX9060		(0x0c)
#define CYY_PLX9080		(0x0d)

// Runtime registers (or Local Configuration registers)
#define PLX9050_INT_OFFSET	(0x4c)
#define PLX9060_INT_OFFSET	(0x68)
#define PLX9050_INT_ENABLE (0x00000043UL)
#define PLX9060_INT_ENABLE (0x00000900UL)


// Write to Custom registers

#define CYY_RESET_BOARD(BaseBoardAddress,IsPci)             \
do                                                          \
{                                                           \
   WRITE_REGISTER_UCHAR(                                    \
      (BaseBoardAddress)+(CYY_RESET_16 << IsPci),           \
      0x00                                                  \
      );                                                    \
} while (0);


#define CYY_CLEAR_INTERRUPT(BaseBoardAddress,IsPci)         \
do                                                          \
{                                                           \
   WRITE_REGISTER_UCHAR(                                    \
      (BaseBoardAddress)+(CYY_CLEAR_INTR << IsPci),         \
      0x00                                                  \
      );                                                    \
} while (0);

#define CYY_READ_PCI_TYPE(BaseBoardAddress)                 \
   (READ_REGISTER_UCHAR((BaseBoardAddress)+CYY_PCI_TYPE))

#define PLX9050_READ_INTERRUPT_CONTROL(BaseBoardAddress)       \
   (READ_REGISTER_ULONG((PULONG)((BaseBoardAddress)+PLX9050_INT_OFFSET)))

#define PLX9050_WRITE_INTERRUPT_CONTROL(BaseBoardAddress,Value)   \
do {                                                              \
   WRITE_REGISTER_ULONG(                                          \
      (PULONG)((BaseBoardAddress)+PLX9050_INT_OFFSET),            \
      Value                                                       \
      );                                                          \
} while (0);

#define PLX9060_READ_INTERRUPT_CONTROL(BaseBoardAddress)          \
   (READ_REGISTER_ULONG((PULONG)((BaseBoardAddress)+PLX9060_INT_OFFSET)))

#define PLX9060_WRITE_INTERRUPT_CONTROL(BaseBoardAddress,Value)   \
do {                                                              \
   WRITE_REGISTER_ULONG(                                          \
      (PULONG)((BaseBoardAddress)+PLX9060_INT_OFFSET),            \
      Value                                                       \
      );                                                          \
} while (0);

#endif // ndef CYCOMMON_H
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\y\cyycoins\util.c ===
/** FILE: util.c *********** Module Header ********************************
 *
 *  Ports applet utility library routines. This file contains string,
 *  cursor, SendWinIniChange() routines.
 *
 * History:
 *  15:30 on Thur  25 Apr 1991  -by-  Steve Cathcart   [stevecat]
 *        Took base code from Win 3.1 source
 *  10:30 on Tues  04 Feb 1992  -by-  Steve Cathcart   [stevecat]
 *        Updated code to latest Win 3.1 sources
 *  15:30 on Thur  03 May 1994  -by-  Steve Cathcart   [stevecat]
 *        Increased  MyMessageBox buffers, Restart dialog changes
 *  17:00 on Mon   18 Sep 1995  -by-  Steve Cathcart   [stevecat]
 *        Changes for product update - SUR release NT v4.0
 *  Nov 1997					-by-  Doron Holan	   [stevecat]
 *        Removed obsolete cpl code
 *
 *  Copyright (C) 1990-1995 Microsoft Corporation
 *
 *************************************************************************/
/* Notes -

    Global Functions:

      U T I L I T Y

        BackslashTerm () - add backslash char to path
        ErrMemDlg () - display Memory Error message box
        MyAtoi () - To convert from Unicode to ANSI string before calling atoi
        myatoi () - local implementation of atoi for Unicode strings
        MyItoa () - To convert from ANSI to Unicode string after calling itoa
        MyMessageBox () - display message to user, with parameters
        MyUltoa () - To convert from Unicode to ANSI string before calling ultoa
        SendWinIniChange () - broadcast system change message via USER
        strscan () - Find a string within another string
        StripBlanks () - Strip leading and trailing blanks from a string


    Local Functions:

 */

//==========================================================================
//                                Include files
//==========================================================================

// C Runtime
#include <stddef.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>

// Application specific
#include "cyyports.h"


#define INT_SIZE_LENGTH   20
#define LONG_SIZE_LENGTH  40


LPTSTR 
BackslashTerm(LPTSTR pszPath)
{
    LPTSTR pszEnd;

    pszEnd = pszPath + lstrlen(pszPath);

    //
    //  Get the end of the source directory
    //
    switch(*CharPrev(pszPath, pszEnd)) {
    case TEXT('\\'):
    case TEXT(':'):
        break;

    default:
        *pszEnd++ = TEXT('\\');
        *pszEnd = TEXT('\0');
    }

    return pszEnd;
}

void 
ErrMemDlg(HWND hParent)
{
    MessageBox(hParent, g_szErrMem, g_szPortsApplet,
               MB_OK | MB_ICONHAND | MB_SYSTEMMODAL );
}

///////////////////////////////////////////////////////////////////////////////
//
//   MyAtoi
//
//   Desc:  To convert from Unicode to ANSI string before
//          calling CRT atoi and atol functions.
//
///////////////////////////////////////////////////////////////////////////////

int 
MyAtoi(LPTSTR  string)
{
   CHAR   szAnsi[ INT_SIZE_LENGTH ];
   BOOL   fDefCharUsed;

#ifdef UNICODE
   WideCharToMultiByte(CP_ACP, 0, string, INT_SIZE_LENGTH,
                       szAnsi, INT_SIZE_LENGTH, NULL, &fDefCharUsed);

   return atoi(szAnsi);
#else
   return atoi(string);
#endif

}


int 
myatoi(LPTSTR pszInt)
{
    int   retval;
    TCHAR cSave;

    for (retval = 0; *pszInt; ++pszInt) {
        if ((cSave = (TCHAR) (*pszInt - TEXT('0'))) > (TCHAR) 9)
            break;

        retval = (int) (retval * 10 + (int) cSave);
    }
    return (retval);
}



///////////////////////////////////////////////////////////////////////////////
//
//   MyItoa
//
//   Desc:  To convert from ANSI to Unicode string after calling
//          CRT itoa function.
//
///////////////////////////////////////////////////////////////////////////////

LPTSTR 
MyItoa(INT value, LPTSTR string, INT radix)
{
   CHAR   szAnsi[INT_SIZE_LENGTH];

#ifdef UNICODE

   _itoa(value, szAnsi, radix);
   MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED, szAnsi, -1,
                       string, INT_SIZE_LENGTH );
#else

   _itoa(value, string, radix);

#endif

   return (string);
 
} // end of MyItoa()


LPTSTR 
MyUltoa(unsigned long value, 
		LPTSTR  string, 
		INT  radix)
{
   CHAR   szAnsi[ LONG_SIZE_LENGTH ];

#ifdef UNICODE

   _ultoa(value, szAnsi, radix);
   MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED, szAnsi, -1,
                       string, LONG_SIZE_LENGTH );
#else

   _ultoa(value, string, radix);

#endif

   return( string );

} // end of MyUltoa()


int 
MyMessageBox(HWND hWnd, 
			 DWORD wText, 
			 DWORD wCaption, 
			 DWORD wType, 
			 ...)
{
    TCHAR   szText[4 * PATHMAX], 
			szCaption[2 * PATHMAX];
    int     ival;
    va_list parg;

    va_start(parg, wType);

    if (wText == INITS)
        goto NoMem;

    if (!LoadString(g_hInst, wText, szCaption, CharSizeOf(szCaption)))
        goto NoMem;

    wvsprintf(szText, szCaption, parg);

    if (!LoadString(g_hInst, wCaption, szCaption, CharSizeOf(szCaption)))
        goto NoMem;

    if ((ival = MessageBox(hWnd, szText, szCaption, wType)) == 0)
        goto NoMem;

    va_end(parg);

    return ival;

NoMem:
    va_end(parg);
    ErrMemDlg(hWnd);

    return 0;
}

int
MyMessageBoxWithErr(
    HWND hWnd, 
	DWORD wText, 
	DWORD wCaption, 
	DWORD wType,
    DWORD wError
    )
{   
    int    ival;
    LPVOID lpMessageBuffer;

    FormatMessage( 
        FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM,
        NULL, 
        wError,  
        MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
        (LPTSTR) &lpMessageBuffer,  
        0,  
        NULL );

    ival = MyMessageBox(hWnd,wText,wCaption,wType,lpMessageBuffer);

    LocalFree( lpMessageBuffer ); // Free the buffer allocated by the system

    return ival;
}

void 
SendWinIniChange(LPTSTR lpSection)
{
// NOTE: We have (are) gone through several iterations of which USER
//       api is the correct one to use.  The main problem for the Control
//       Panel is to avoid being HUNG if another app (top-level window)
//       is HUNG.  Another problem is that we pass a pointer to a message
//       string in our address space.  SendMessage will 'thunk' this properly
//       for each window, but PostMessage and SendNotifyMessage will not.
//       That finally brings us to try to use SendMessageTimeout(). 9/21/92
//
// Try SendNotifyMessage in build 260 or later - kills earlier builds
//    SendNotifyMessage ((HWND)-1, WM_WININICHANGE, 0L, (LONG)lpSection);
//    PostMessage ((HWND)-1, WM_WININICHANGE, 0L, (LONG)lpSection);
//  [stevecat] 4/4/92
//
//    SendMessage ((HWND)-1, WM_WININICHANGE, 0L, (LPARAM)lpSection);
//
    //  NOTE: The final parameter (LPDWORD lpdwResult) must be NULL

    SendMessageTimeout((HWND)-1, 
					   WM_WININICHANGE, 
					   0L, 
					   (WPARAM) lpSection,
					   SMTO_ABORTIFHUNG,
					   1000, 
					   NULL);
}

LPTSTR 
strscan(LPTSTR pszString, 
		LPTSTR pszTarget)
{
    LPTSTR psz;

    if (psz = _tcsstr( pszString, pszTarget))
        return (psz);
    else
        return (pszString + lstrlen(pszString));
}


///////////////////////////////////////////////////////////////////////////////
//
//  StripBlanks()
//
//   Strips leading and trailing blanks from a string.
//   Alters the memory where the string sits.
//
///////////////////////////////////////////////////////////////////////////////

void 
StripBlanks(LPTSTR pszString)
{
    LPTSTR  pszPosn;

    //
    //  strip leading blanks
    //

    pszPosn = pszString;

    while (*pszPosn == TEXT(' '))
        pszPosn++;

    if (pszPosn != pszString)
        lstrcpy(pszString, pszPosn);

    //
    //  strip trailing blanks
    //

    if ((pszPosn = pszString + lstrlen(pszString)) != pszString) {
       pszPosn = CharPrev(pszString, pszPosn);

       while (*pszPosn == TEXT(' '))
           pszPosn = CharPrev(pszString, pszPosn);

       pszPosn = CharNext(pszPosn);

       *pszPosn = TEXT('\0');
    }
}

BOOL ReadRegistryByte(HKEY       hKey,
                      PTCHAR     valueName,
                      PBYTE      regData)
{
    DWORD       regDataType = 0;
    DWORD       regDataSize = 0;

    regDataSize = sizeof(*regData);
    if ((ERROR_SUCCESS != RegQueryValueEx(hKey,
                                          valueName,
                                          NULL,
                                          &regDataType,
                                          regData,
                                          &regDataSize))
        || (regDataSize != sizeof(BYTE))
        || (regDataType != REG_BINARY))
    {
        //
        // Read was unsuccessful  or not a binary value, regData is not set
        //
        return FALSE;
    }

    //
    // Read was a success, regData contains the value read in
    //
    return TRUE;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\y\cyyport\cyyimmed.c ===
/*--------------------------------------------------------------------------
*	
*   Copyright (C) Cyclades Corporation, 1996-2001.
*   All rights reserved.
*	
*   Cyclom-Y Port Driver
*	
*   This file:      cyyimmed.c
*	
*   Description:    This module contains the code related to transmit
*                   immediate character operations in the Cyclom-Y Port
*                   driver.
*
*   Notes:          This code supports Windows 2000 and Windows XP,
*                   x86 and ia64 processors.
*	
*   Complies with Cyclades SW Coding Standard rev 1.3.
*	
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*   Change History
*
*--------------------------------------------------------------------------
*
*
*--------------------------------------------------------------------------
*/

#include "precomp.h"

VOID
CyyGetNextImmediate(
    IN PIRP *CurrentOpIrp,
    IN PLIST_ENTRY QueueToProcess,
    IN PIRP *NewIrp,
    IN BOOLEAN CompleteCurrent,
    IN PCYY_DEVICE_EXTENSION Extension
    );

VOID
CyyCancelImmediate(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    );

BOOLEAN
CyyGiveImmediateToIsr(
    IN PVOID Context
    );

BOOLEAN
CyyGrabImmediateFromIsr(
    IN PVOID Context
    );

BOOLEAN
CyyGiveImmediateToIsr(
    IN PVOID Context
    );

BOOLEAN
CyyGrabImmediateFromIsr(
    IN PVOID Context
    );


#ifdef ALLOC_PRAGMA
#pragma alloc_text(PAGESER,CyyStartImmediate)
#pragma alloc_text(PAGESER,CyyGetNextImmediate)
#pragma alloc_text(PAGESER,CyyCancelImmediate)
#pragma alloc_text(PAGESER,CyyGiveImmediateToIsr)
#pragma alloc_text(PAGESER,CyyGrabImmediateFromIsr)
#endif


VOID
CyyStartImmediate(
    IN PCYY_DEVICE_EXTENSION Extension
    )

/*++

Routine Description:

    This routine will calculate the timeouts needed for the
    write.  It will then hand the irp off to the isr.  It
    will need to be careful incase the irp has been canceled.

Arguments:

    Extension - A pointer to the serial device extension.

Return Value:

    None.

--*/

{

    KIRQL OldIrql;
    LARGE_INTEGER TotalTime;
    BOOLEAN UseATimer;
    SERIAL_TIMEOUTS Timeouts;

    CYY_LOCKED_PAGED_CODE();

    CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyyStartImmediate(%X)\n",
                  Extension);

    UseATimer = FALSE;
    Extension->CurrentImmediateIrp->IoStatus.Status = STATUS_PENDING;
    IoMarkIrpPending(Extension->CurrentImmediateIrp);

    //
    // Calculate the timeout value needed for the
    // request.  Note that the values stored in the
    // timeout record are in milliseconds.  Note that
    // if the timeout values are zero then we won't start
    // the timer.
    //

    KeAcquireSpinLock(
        &Extension->ControlLock,
        &OldIrql
        );

    Timeouts = Extension->Timeouts;

    KeReleaseSpinLock(
        &Extension->ControlLock,
        OldIrql
        );

    if (Timeouts.WriteTotalTimeoutConstant ||
        Timeouts.WriteTotalTimeoutMultiplier) {

        UseATimer = TRUE;

        //
        // We have some timer values to calculate.
        //

        TotalTime.QuadPart 
           = (LONGLONG)((ULONG)Timeouts.WriteTotalTimeoutMultiplier);

        TotalTime.QuadPart += Timeouts.WriteTotalTimeoutConstant;

        TotalTime.QuadPart *= -10000;

    }

    //
    // As the irp might be going to the isr, this is a good time
    // to initialize the reference count.
    //

    SERIAL_INIT_REFERENCE(Extension->CurrentImmediateIrp);

    //
    // We need to see if this irp should be canceled.
    //

    IoAcquireCancelSpinLock(&OldIrql);

    if (Extension->CurrentImmediateIrp->Cancel) {

        PIRP OldIrp = Extension->CurrentImmediateIrp;

        Extension->CurrentImmediateIrp = NULL;
        IoReleaseCancelSpinLock(OldIrql);

        OldIrp->IoStatus.Status = STATUS_CANCELLED;
        OldIrp->IoStatus.Information = 0;

        CyyCompleteRequest(Extension, OldIrp, 0);

    } else {

        //
        // We give the irp to to the isr to write out.
        // We set a cancel routine that knows how to
        // grab the current write away from the isr.
        //

        IoSetCancelRoutine(
            Extension->CurrentImmediateIrp,
            CyyCancelImmediate
            );

        //
        // Since the cancel routine knows about the irp we
        // increment the reference count.
        //

        SERIAL_SET_REFERENCE(
            Extension->CurrentImmediateIrp,
            SERIAL_REF_CANCEL
            );

        if (UseATimer) {

            CyySetTimer(
                &Extension->ImmediateTotalTimer,
                TotalTime,
                &Extension->TotalImmediateTimeoutDpc,
                Extension
                );

            //
            // Since the timer knows about the irp we increment
            // the reference count.
            //

            SERIAL_SET_REFERENCE(
                Extension->CurrentImmediateIrp,
                SERIAL_REF_TOTAL_TIMER
                );

        }

        KeSynchronizeExecution(
            Extension->Interrupt,
            CyyGiveImmediateToIsr,
            Extension
            );

        IoReleaseCancelSpinLock(OldIrql);

    }

    CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyyStartImmediate\n");

}

VOID
CyyCompleteImmediate(
    IN PKDPC Dpc,
    IN PVOID DeferredContext,
    IN PVOID SystemContext1,
    IN PVOID SystemContext2
    )

{

    PCYY_DEVICE_EXTENSION Extension = DeferredContext;
    KIRQL OldIrql;

    UNREFERENCED_PARAMETER(SystemContext1);
    UNREFERENCED_PARAMETER(SystemContext2);

    CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyyCompleteImmediate(%X)\n",
                  Extension);

    IoAcquireCancelSpinLock(&OldIrql);

    CyyTryToCompleteCurrent(
        Extension,
        NULL,
        OldIrql,
        STATUS_SUCCESS,
        &Extension->CurrentImmediateIrp,
        NULL,
        NULL,
        &Extension->ImmediateTotalTimer,
        NULL,
        CyyGetNextImmediate,
        SERIAL_REF_ISR
        );

    CyyDpcEpilogue(Extension, Dpc);

    CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyyCompleteImmediate\n");

}

VOID
CyyTimeoutImmediate(
    IN PKDPC Dpc,
    IN PVOID DeferredContext,
    IN PVOID SystemContext1,
    IN PVOID SystemContext2
    )

{

    PCYY_DEVICE_EXTENSION Extension = DeferredContext;
    KIRQL OldIrql;

    UNREFERENCED_PARAMETER(SystemContext1);
    UNREFERENCED_PARAMETER(SystemContext2);

    CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyyTimeoutImmediate(%X)\n",
                  Extension);

    IoAcquireCancelSpinLock(&OldIrql);

    CyyTryToCompleteCurrent(
        Extension,
        CyyGrabImmediateFromIsr,
        OldIrql,
        STATUS_TIMEOUT,
        &Extension->CurrentImmediateIrp,
        NULL,
        NULL,
        &Extension->ImmediateTotalTimer,
        NULL,
        CyyGetNextImmediate,
        SERIAL_REF_TOTAL_TIMER
        );

    CyyDpcEpilogue(Extension, Dpc);

    CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyyTimeoutImmediate\n");
}

VOID
CyyGetNextImmediate(
    IN PIRP *CurrentOpIrp,
    IN PLIST_ENTRY QueueToProcess,
    IN PIRP *NewIrp,
    IN BOOLEAN CompleteCurrent,
    IN PCYY_DEVICE_EXTENSION Extension
    )

/*++

Routine Description:

    This routine is used to complete the current immediate
    irp.  Even though the current immediate will always
    be completed and there is no queue associated with it,
    we use this routine so that we can try to satisfy
    a wait for transmit queue empty event.

Arguments:

    CurrentOpIrp - Pointer to the pointer that points to the
                   current write irp.  This should point
                   to CurrentImmediateIrp.

    QueueToProcess - Always NULL.

    NewIrp - Always NULL on exit to this routine.

    CompleteCurrent - Should always be true for this routine.


Return Value:

    None.

--*/

{

    KIRQL OldIrql;
    PIRP OldIrp = *CurrentOpIrp;

    UNREFERENCED_PARAMETER(QueueToProcess);
    UNREFERENCED_PARAMETER(CompleteCurrent);
    CYY_LOCKED_PAGED_CODE();

    IoAcquireCancelSpinLock(&OldIrql);

    ASSERT(Extension->TotalCharsQueued >= 1);
    Extension->TotalCharsQueued--;

    *CurrentOpIrp = NULL;
    *NewIrp = NULL;
    KeSynchronizeExecution(
        Extension->Interrupt,
        CyyProcessEmptyTransmit,
        Extension
        );
    IoReleaseCancelSpinLock(OldIrql);

    CyyCompleteRequest(Extension, OldIrp, IO_SERIAL_INCREMENT);
}

VOID
CyyCancelImmediate(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    )

/*++

Routine Description:

    This routine is used to cancel a irp that is waiting on
    a comm event.

Arguments:

    DeviceObject - Pointer to the device object for this device

    Irp - Pointer to the IRP for the current request

Return Value:

    None.

--*/

{

    PCYY_DEVICE_EXTENSION Extension = DeviceObject->DeviceExtension;
    CYY_LOCKED_PAGED_CODE();

    CyyTryToCompleteCurrent(
        Extension,
        CyyGrabImmediateFromIsr,
        Irp->CancelIrql,
        STATUS_CANCELLED,
        &Extension->CurrentImmediateIrp,
        NULL,
        NULL,
        &Extension->ImmediateTotalTimer,
        NULL,
        CyyGetNextImmediate,
        SERIAL_REF_CANCEL
        );

}

BOOLEAN
CyyGiveImmediateToIsr(
    IN PVOID Context
    )

/*++

Routine Description:

    Try to start off the write by slipping it in behind
    a transmit immediate char, or if that isn't available
    and the transmit holding register is empty, "tickle"
    the UART into interrupting with a transmit buffer
    empty.

    NOTE: This routine is called by KeSynchronizeExecution.

    NOTE: This routine assumes that it is called with the
          cancel spin lock held.

Arguments:

    Context - Really a pointer to the device extension.

Return Value:

    This routine always returns FALSE.

--*/

{

    PCYY_DEVICE_EXTENSION Extension = Context;
    CYY_LOCKED_PAGED_CODE();

    Extension->TransmitImmediate = TRUE;
    Extension->ImmediateChar =
        *((UCHAR *)
         (Extension->CurrentImmediateIrp->AssociatedIrp.SystemBuffer));
	
    //
    // The isr now has a reference to the irp.
    //

    SERIAL_SET_REFERENCE(
        Extension->CurrentImmediateIrp,
        SERIAL_REF_ISR
        );

    //
    // Check first to see if a write is going on.  If
    // there is then we'll just slip in during the write.
    //

    if (!Extension->WriteLength) {

        //
        // If there is no normal write transmitting then we
        // will "re-enable" the transmit holding register empty
        // interrupt.  The 8250 family of devices will always
        // signal a transmit holding register empty interrupt
        // *ANY* time this bit is set to one.  By doing things
        // this way we can simply use the normal interrupt code
        // to start off this write.
        //
        // We've been keeping track of whether the transmit holding
        // register is empty so it we only need to do this
        // if the register is empty.
        //

        if (Extension->HoldingEmpty) {
            CyyTxStart(Extension);
        }

    }

    return FALSE;

}

BOOLEAN
CyyGrabImmediateFromIsr(
    IN PVOID Context
    )

/*++

Routine Description:


    This routine is used to grab the current irp, which could be timing
    out or canceling, from the ISR

    NOTE: This routine is being called from KeSynchronizeExecution.

    NOTE: This routine assumes that the cancel spin lock is held
          when this routine is called.

Arguments:

    Context - Really a pointer to the device extension.

Return Value:

    Always false.

--*/

{

    PCYY_DEVICE_EXTENSION Extension = Context;
    CYY_LOCKED_PAGED_CODE();

    if (Extension->TransmitImmediate) {

        Extension->TransmitImmediate = FALSE;

        //
        // Since the isr no longer references this irp, we can
        // decrement it's reference count.
        //

        SERIAL_CLEAR_REFERENCE(
            Extension->CurrentImmediateIrp,
            SERIAL_REF_ISR
            );

    }

    return FALSE;

}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\y\cyyport\cyyinit.c ===
/*--------------------------------------------------------------------------
*	
*   Copyright (C) Cyclades Corporation, 1996-2001.
*   All rights reserved.
*	
*   Cyclom-Y Port Driver
*	
*   This file:      cyyinit.c
*	
*   Description:    This module contains the code related to initialization 
*                   and unload operations in the Cyclom-Y Port driver.
*
*   Notes:          This code supports Windows 2000 and Windows XP,
*                   x86 and IA64 processors.
*	
*   Complies with Cyclades SW Coding Standard rev 1.3.
*	
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*	Change History
*
*--------------------------------------------------------------------------
*
*--------------------------------------------------------------------------
*/

#include "precomp.h"

//
// This is the actual definition of CyyDebugLevel.
// Note that it is only defined if this is a "debug"
// build.
//
#if DBG
extern ULONG CyyDebugLevel = CYYDBGALL;
#endif

//
// All our global variables except DebugLevel stashed in one
// little package
//
CYY_GLOBALS CyyGlobals;

static const PHYSICAL_ADDRESS CyyPhysicalZero = {0};

//
// We use this to query into the registry as to whether we
// should break at driver entry.
//

CYY_REGISTRY_DATA    driverDefaults;

//
// INIT - only needed during init and then can be disposed
// PAGESRP0 - always paged / never locked
// PAGESER - must be locked when a device is open, else paged
//
//
// INIT is used for DriverEntry() specific code
//
// PAGESRP0 is used for code that is not often called and has nothing
// to do with I/O performance.  An example, IRP_MJ_PNP/IRP_MN_START_DEVICE
// support functions
//
// PAGESER is used for code that needs to be locked after an open for both
// performance and IRQL reasons.
//
      
#ifdef ALLOC_PRAGMA
#pragma alloc_text(INIT,DriverEntry)

#pragma alloc_text(PAGESRP0, CyyRemoveDevObj)
#pragma alloc_text(PAGESRP0, CyyUnload)


//
// PAGESER handled is keyed off of CyyReset, so CyyReset
// must remain in PAGESER for things to work properly
//

#pragma alloc_text(PAGESER, CyyReset)
#pragma alloc_text(PAGESER, CyyCommError)
#endif


NTSTATUS
DriverEntry(
    IN PDRIVER_OBJECT DriverObject,
    IN PUNICODE_STRING RegistryPath
    )
/*--------------------------------------------------------------------------

    The entry point that the system point calls to initialize
    any driver.

    This routine will gather the configuration information,
    report resource usage, attempt to initialize all serial
    devices, connect to interrupts for ports.  If the above
    goes reasonably well it will fill in the dispatch points,
    reset the serial devices and then return to the system.

Arguments:

    DriverObject - Just what it says,  really of little use
    to the driver itself, it is something that the IO system
    cares more about.

    PathToRegistry - points to the entry for this driver
    in the current control set of the registry.

Return Value:

    Always STATUS_SUCCESS

--------------------------------------------------------------------------*/
{
   //
   // Lock the paged code in their frames
   //

   PVOID lockPtr = MmLockPagableCodeSection(CyyReset);

   PAGED_CODE();


   ASSERT(CyyGlobals.PAGESER_Handle == NULL);
#if DBG
   CyyGlobals.PAGESER_Count = 0;
   SerialLogInit();
#endif
   CyyGlobals.PAGESER_Handle = lockPtr;

   CyyGlobals.RegistryPath.MaximumLength = RegistryPath->MaximumLength;
   CyyGlobals.RegistryPath.Length = RegistryPath->Length;
   CyyGlobals.RegistryPath.Buffer
      = ExAllocatePool(PagedPool, CyyGlobals.RegistryPath.MaximumLength);

   if (CyyGlobals.RegistryPath.Buffer == NULL) {
      MmUnlockPagableImageSection(lockPtr);
      return STATUS_INSUFFICIENT_RESOURCES;
   }

   RtlZeroMemory(CyyGlobals.RegistryPath.Buffer,
                 CyyGlobals.RegistryPath.MaximumLength);
   RtlMoveMemory(CyyGlobals.RegistryPath.Buffer,
                 RegistryPath->Buffer, RegistryPath->Length);
 
   KeInitializeSpinLock(&CyyGlobals.GlobalsSpinLock);

   //
   // Initialize all our globals
   //

   InitializeListHead(&CyyGlobals.AllDevObjs);
   
   //
   // Call to find out default values to use for all the devices that the
   // driver controls, including whether or not to break on entry.
   //

   CyyGetConfigDefaults(&driverDefaults, RegistryPath);

#if DBG
   //
   // Set global debug output level
   //
   CyyDebugLevel = driverDefaults.DebugLevel;
#endif

   //
   // Break on entry if requested via registry
   //

   if (driverDefaults.ShouldBreakOnEntry) {
      DbgBreakPoint();
   }


   //
   // Just dump out how big the extension is.
   //

   CyyDbgPrintEx(DPFLTR_INFO_LEVEL, "The number of bytes in the extension "
                 "is: %d\n", sizeof(CYY_DEVICE_EXTENSION));


   //
   // Initialize the Driver Object with driver's entry points
   //

   DriverObject->DriverUnload                          = CyyUnload;
   DriverObject->DriverExtension->AddDevice            = CyyAddDevice;

   DriverObject->MajorFunction[IRP_MJ_FLUSH_BUFFERS]   = CyyFlush;
   DriverObject->MajorFunction[IRP_MJ_WRITE]           = CyyWrite;
   DriverObject->MajorFunction[IRP_MJ_READ]            = CyyRead;
   DriverObject->MajorFunction[IRP_MJ_DEVICE_CONTROL]  = CyyIoControl;
   DriverObject->MajorFunction[IRP_MJ_INTERNAL_DEVICE_CONTROL]
      = CyyInternalIoControl;
   DriverObject->MajorFunction[IRP_MJ_CREATE]          = CyyCreateOpen;
   DriverObject->MajorFunction[IRP_MJ_CLOSE]           = CyyClose;
   DriverObject->MajorFunction[IRP_MJ_CLEANUP]         = CyyCleanup;
   DriverObject->MajorFunction[IRP_MJ_PNP]             = CyyPnpDispatch;
   DriverObject->MajorFunction[IRP_MJ_POWER]           = CyyPowerDispatch;

   DriverObject->MajorFunction[IRP_MJ_QUERY_INFORMATION]
      = CyyQueryInformationFile;
   DriverObject->MajorFunction[IRP_MJ_SET_INFORMATION]
      = CyySetInformationFile;

   DriverObject->MajorFunction[IRP_MJ_SYSTEM_CONTROL]
      = CyySystemControlDispatch;


   //
   // Unlock pageable text
   //
   MmUnlockPagableImageSection(lockPtr);

   return STATUS_SUCCESS;
}




BOOLEAN
CyyCleanLists(IN PVOID Context)
/*++

Routine Description:

    Removes a device object from any of the serial linked lists it may
    appear on.

Arguments:

    Context - Actually a PCYY_DEVICE_EXTENSION (for the devobj being
              removed).

Return Value:

    Always TRUE

--*/
{
   PCYY_DEVICE_EXTENSION pDevExt = (PCYY_DEVICE_EXTENSION)Context;
   PCYY_DISPATCH pDispatch;
   ULONG i;

   //
   // Remove our entry from the dispatch context
   //

   pDispatch = (PCYY_DISPATCH)pDevExt->OurIsrContext;

   CyyDbgPrintEx(CYYPNPPOWER, "CLEAN: removing multiport isr "
                 "ext\n");

   pDispatch->Extensions[pDevExt->PortIndex] = NULL;

   for (i = 0; i < CYY_MAX_PORTS; i++) {
      if (((PCYY_DISPATCH)pDevExt->OurIsrContext)
           ->Extensions[i] != NULL) {
          break;
      }
   }

   if (i < CYY_MAX_PORTS) {
      // Others are chained on this interrupt, so we don't want to
      // disconnect it.
      pDevExt->Interrupt = NULL;
   }

   return TRUE;
}



VOID
CyyReleaseResources(IN PCYY_DEVICE_EXTENSION PDevExt)
/*++

Routine Description:

    Releases resources (not pool) stored in the device extension.

Arguments:

    PDevExt - Pointer to the device extension to release resources from.

Return Value:

    VOID

--*/
{
   KIRQL oldIrql;

   CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyyReleaseResources(%X)\n",
                 PDevExt);

   //
   // AllDevObjs should never be empty since we have a sentinal
   // Note: serial removes device from AllDevObjs list after calling 
   //       SerialCleanLists. We do it before to make sure no other port will 
   //       be added to share the polling routine or PDevExt->Interrut that is 
   //       on the way to be disconnected.
   //

   KeAcquireSpinLock(&CyyGlobals.GlobalsSpinLock, &oldIrql);

   ASSERT(!IsListEmpty(&PDevExt->AllDevObjs));

   RemoveEntryList(&PDevExt->AllDevObjs);

   KeReleaseSpinLock(&CyyGlobals.GlobalsSpinLock, oldIrql);

   InitializeListHead(&PDevExt->AllDevObjs);

   //
   // Remove us from any lists we may be on
   //

   KeSynchronizeExecution(PDevExt->Interrupt, CyyCleanLists, PDevExt);

   //
   // Stop servicing interrupts if we are the last device
   //

   if (PDevExt->Interrupt != NULL) {

      // Disable interrupts in the PLX
      if (PDevExt->IsPci) {

         UCHAR plx_ver;
         ULONG value;

         plx_ver = CYY_READ_PCI_TYPE(PDevExt->BoardMemory);
         plx_ver &= 0x0f;

			switch(plx_ver) {
			case CYY_PLX9050:
            value = PLX9050_READ_INTERRUPT_CONTROL(PDevExt->Runtime);
            value &= ~PLX9050_INT_ENABLE;
            PLX9050_WRITE_INTERRUPT_CONTROL(PDevExt->Runtime,value);
				break;
			case CYY_PLX9060:
			case CYY_PLX9080:
			default:
            value = PLX9060_READ_INTERRUPT_CONTROL(PDevExt->Runtime);
            value &= ~PLX9060_INT_ENABLE;
            PLX9060_WRITE_INTERRUPT_CONTROL(PDevExt->Runtime,value);
				break;				
			}
      
      }

      CyyDbgPrintEx(CYYPNPPOWER, "Release - disconnecting interrupt %X\n",
                    PDevExt->Interrupt);

      IoDisconnectInterrupt(PDevExt->Interrupt);
      PDevExt->Interrupt = NULL;

      // If we are the last device, free this memory

      CyyDbgPrintEx(CYYPNPPOWER, "Release - freeing multi context\n");
      if (PDevExt->OurIsrContext != NULL) {     // added in DDK build 2072, but 
          ExFreePool(PDevExt->OurIsrContext);   // we already had the free of OurIsrContext.
          PDevExt->OurIsrContext = NULL;        // 
      }   
   }

   
   //
   // Stop handling timers
   //

   CyyCancelTimer(&PDevExt->ReadRequestTotalTimer, PDevExt);
   CyyCancelTimer(&PDevExt->ReadRequestIntervalTimer, PDevExt);
   CyyCancelTimer(&PDevExt->WriteRequestTotalTimer, PDevExt);
   CyyCancelTimer(&PDevExt->ImmediateTotalTimer, PDevExt);
   CyyCancelTimer(&PDevExt->XoffCountTimer, PDevExt);
   CyyCancelTimer(&PDevExt->LowerRTSTimer, PDevExt);

   //
   // Stop servicing DPC's
   //

   CyyRemoveQueueDpc(&PDevExt->CompleteWriteDpc, PDevExt);
   CyyRemoveQueueDpc(&PDevExt->CompleteReadDpc, PDevExt);
   CyyRemoveQueueDpc(&PDevExt->TotalReadTimeoutDpc, PDevExt);
   CyyRemoveQueueDpc(&PDevExt->IntervalReadTimeoutDpc, PDevExt);
   CyyRemoveQueueDpc(&PDevExt->TotalWriteTimeoutDpc, PDevExt);
   CyyRemoveQueueDpc(&PDevExt->CommErrorDpc, PDevExt);
   CyyRemoveQueueDpc(&PDevExt->CompleteImmediateDpc, PDevExt);
   CyyRemoveQueueDpc(&PDevExt->TotalImmediateTimeoutDpc, PDevExt);
   CyyRemoveQueueDpc(&PDevExt->CommWaitDpc, PDevExt);
   CyyRemoveQueueDpc(&PDevExt->XoffCountTimeoutDpc, PDevExt);
   CyyRemoveQueueDpc(&PDevExt->XoffCountCompleteDpc, PDevExt);
   CyyRemoveQueueDpc(&PDevExt->StartTimerLowerRTSDpc, PDevExt);
   CyyRemoveQueueDpc(&PDevExt->PerhapsLowerRTSDpc, PDevExt);



   //
   // If necessary, unmap the device registers.
   //

   if (PDevExt->BoardMemory) {
      MmUnmapIoSpace(PDevExt->BoardMemory, PDevExt->BoardMemoryLength);
      PDevExt->BoardMemory = NULL;
   }

   if (PDevExt->Runtime) {
      MmUnmapIoSpace(PDevExt->Runtime,
                     PDevExt->RuntimeLength);
      PDevExt->Runtime = NULL;
   }

   CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyyReleaseResources\n");
}


VOID
CyyDisableInterfacesResources(IN PDEVICE_OBJECT PDevObj,
                              BOOLEAN DisableCD1400)
{
   PCYY_DEVICE_EXTENSION pDevExt
      = (PCYY_DEVICE_EXTENSION)PDevObj->DeviceExtension;

   PAGED_CODE();

   CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyyDisableInterfaces(%X, %s)\n",
                 PDevObj, DisableCD1400 ? "TRUE" : "FALSE");

   //
   // Only do these many things if the device has started and still
   // has resources allocated
   //

   if (pDevExt->Flags & CYY_FLAGS_STARTED) {

       if (!(pDevExt->Flags & CYY_FLAGS_STOPPED)) {

         if (DisableCD1400) {
            //
            // Mask off interrupts
            //
            CD1400_DISABLE_ALL_INTERRUPTS(pDevExt->Cd1400,pDevExt->IsPci,
                                          pDevExt->CdChannel);
         }

         CyyReleaseResources(pDevExt);

      }

      //
      // Remove us from WMI consideration
      //

      IoWMIRegistrationControl(PDevObj, WMIREG_ACTION_DEREGISTER);
   }

   //
   // Undo external names
   //

   CyyUndoExternalNaming(pDevExt);

   CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyyDisableInterfaces\n");
}


NTSTATUS
CyyRemoveDevObj(IN PDEVICE_OBJECT PDevObj)
/*++

Routine Description:

    Removes a serial device object from the system.

Arguments:

    PDevObj - A pointer to the Device Object we want removed.

Return Value:

    Always TRUE

--*/
{
   PCYY_DEVICE_EXTENSION pDevExt
      = (PCYY_DEVICE_EXTENSION)PDevObj->DeviceExtension;

   PAGED_CODE();

   CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyyRemoveDevObj(%X)\n", PDevObj);

// Removed by Fanny. These code is called directly from IRP_MN_REMOVE_DEVICE.
//   if (!(pDevExt->DevicePNPAccept & CYY_PNPACCEPT_SURPRISE_REMOVING)) {
//      //
//      // Disable all external interfaces and release resources
//      //
//
//      CyyDisableInterfacesResources(PDevObj, TRUE);
//   }

   IoDetachDevice(pDevExt->LowerDeviceObject);

   //
   // Free memory allocated in the extension
   //

   if (pDevExt->NtNameForPort.Buffer != NULL) {
      ExFreePool(pDevExt->NtNameForPort.Buffer);
   }

   if (pDevExt->DeviceName.Buffer != NULL) {
      ExFreePool(pDevExt->DeviceName.Buffer);
   }

   if (pDevExt->SymbolicLinkName.Buffer != NULL) {
      ExFreePool(pDevExt->SymbolicLinkName.Buffer);
   }

   if (pDevExt->DosName.Buffer != NULL) {
      ExFreePool(pDevExt->DosName.Buffer);
   }

   if (pDevExt->ObjectDirectory.Buffer) {
      ExFreePool(pDevExt->ObjectDirectory.Buffer);
   }

   //
   // Delete the devobj
   //

   IoDeleteDevice(PDevObj);

   CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyyRemoveDevObj %X\n",
                 STATUS_SUCCESS);

   return STATUS_SUCCESS;
}


VOID
CyyKillPendingIrps(PDEVICE_OBJECT PDevObj)
/*++

Routine Description:

   This routine kills any irps pending for the passed device object.

Arguments:

    PDevObj - Pointer to the device object whose irps must die.

Return Value:

    VOID

--*/
{
   PCYY_DEVICE_EXTENSION pDevExt = PDevObj->DeviceExtension;
   KIRQL oldIrql;

   CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyyKillPendingIrps(%X)\n",
                 PDevObj);

   //
   // First kill all the reads and writes.
   //

    CyyKillAllReadsOrWrites(PDevObj, &pDevExt->WriteQueue,
                               &pDevExt->CurrentWriteIrp);

    CyyKillAllReadsOrWrites(PDevObj, &pDevExt->ReadQueue,
                               &pDevExt->CurrentReadIrp);

    //
    // Next get rid of purges.
    //

    CyyKillAllReadsOrWrites(PDevObj, &pDevExt->PurgeQueue,
                               &pDevExt->CurrentPurgeIrp);

    //
    // Get rid of any mask operations.
    //

    CyyKillAllReadsOrWrites(PDevObj, &pDevExt->MaskQueue,
                               &pDevExt->CurrentMaskIrp);

    //
    // Now get rid a pending wait mask irp.
    //

    IoAcquireCancelSpinLock(&oldIrql);

    if (pDevExt->CurrentWaitIrp) {

        PDRIVER_CANCEL cancelRoutine;

        cancelRoutine = pDevExt->CurrentWaitIrp->CancelRoutine;
        pDevExt->CurrentWaitIrp->Cancel = TRUE;

        if (cancelRoutine) {

            pDevExt->CurrentWaitIrp->CancelIrql = oldIrql;
            pDevExt->CurrentWaitIrp->CancelRoutine = NULL;

            cancelRoutine(PDevObj, pDevExt->CurrentWaitIrp);

        } else {
            IoReleaseCancelSpinLock(oldIrql);
        }

    } else {

        IoReleaseCancelSpinLock(oldIrql);

    }

    //
    // Cancel any pending wait-wake irps
    //

    if (pDevExt->PendingWakeIrp != NULL) {
       IoCancelIrp(pDevExt->PendingWakeIrp);
       pDevExt->PendingWakeIrp = NULL;
    }

    //
    // Finally, dump any stalled IRPS
    //

    CyyKillAllStalled(PDevObj);


    CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyyKillPendingIrps\n");
}


NTSTATUS
CyyInitMultiPort(IN PCYY_DEVICE_EXTENSION PDevExt,
                 IN PCONFIG_DATA PConfigData, IN PDEVICE_OBJECT PDevObj)
/*++

Routine Description:

    This routine initializes a multiport device by adding a port to an existing
    one.

Arguments:

    PDevExt - pointer to the device extension of the root of the multiport
              device.

    PConfigData - pointer to the config data for the new port

    PDevObj - pointer to the devobj for the new port

Return Value:

    STATUS_SUCCESS on success, appropriate error on failure.

--*/
{
   PCYY_DEVICE_EXTENSION pNewExt
      = (PCYY_DEVICE_EXTENSION)PDevObj->DeviceExtension;
   NTSTATUS status;

   PAGED_CODE();


   CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyyInitMultiPort(%X, %X, %X)\n",
                 PDevExt, PConfigData, PDevObj);

   //
   // Allow him to share OurIsrContext and interrupt object
   //

   pNewExt->OurIsrContext = PDevExt->OurIsrContext;
   pNewExt->Interrupt = PDevExt->Interrupt;

   //
   // First, see if we can initialize the one we have found
   //

   status = CyyInitController(PDevObj, PConfigData);

   if (!NT_SUCCESS(status)) {
      CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyyInitMultiPort (1) %X\n",
                    status);
      return status;
   }

   CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyyInitMultiPort (3) %X\n",
                 STATUS_SUCCESS);

   return STATUS_SUCCESS;
}



NTSTATUS
CyyInitController(IN PDEVICE_OBJECT PDevObj, IN PCONFIG_DATA PConfigData)
/*++

Routine Description:

    Really too many things to mention here.  In general initializes
    kernel synchronization structures, allocates the typeahead buffer,
    sets up defaults, etc.

Arguments:

    PDevObj       - Device object for the device to be started

    PConfigData   - Pointer to a record for a single port.

Return Value:

    STATUS_SUCCCESS if everything went ok.  A !NT_SUCCESS status
    otherwise.

--*/

{

   PCYY_DEVICE_EXTENSION pDevExt = PDevObj->DeviceExtension;

   //
   // Holds the NT Status that is returned from each call to the
   // kernel and executive.
   //

   NTSTATUS status = STATUS_SUCCESS;

   BOOLEAN allocedDispatch = FALSE;
   PCYY_DISPATCH pDispatch = NULL;

   PAGED_CODE();


   CyyDbgPrintEx(CYYDIAG1, "Initializing for configuration record of %wZ\n",
                 &pDevExt->DeviceName);
   
   if (pDevExt->OurIsrContext == NULL) {

      if ((pDevExt->OurIsrContext
            = ExAllocatePool(NonPagedPool,sizeof(CYY_DISPATCH))) == NULL) {         
         status = STATUS_INSUFFICIENT_RESOURCES;
         goto ExtensionCleanup;
      }
      RtlZeroMemory(pDevExt->OurIsrContext,sizeof(CYY_DISPATCH));
      
      allocedDispatch = TRUE;
   }
   

   //
   // Initialize the timers used to timeout operations.
   //

   KeInitializeTimer(&pDevExt->ReadRequestTotalTimer);
   KeInitializeTimer(&pDevExt->ReadRequestIntervalTimer);
   KeInitializeTimer(&pDevExt->WriteRequestTotalTimer);
   KeInitializeTimer(&pDevExt->ImmediateTotalTimer);
   KeInitializeTimer(&pDevExt->XoffCountTimer);
   KeInitializeTimer(&pDevExt->LowerRTSTimer);


   //
   // Intialialize the dpcs that will be used to complete
   // or timeout various IO operations.
   //

   KeInitializeDpc(&pDevExt->CompleteWriteDpc, CyyCompleteWrite, pDevExt);
   KeInitializeDpc(&pDevExt->CompleteReadDpc, CyyCompleteRead, pDevExt);
   KeInitializeDpc(&pDevExt->TotalReadTimeoutDpc, CyyReadTimeout, pDevExt);
   KeInitializeDpc(&pDevExt->IntervalReadTimeoutDpc, CyyIntervalReadTimeout,
                   pDevExt);
   KeInitializeDpc(&pDevExt->TotalWriteTimeoutDpc, CyyWriteTimeout, pDevExt);
   KeInitializeDpc(&pDevExt->CommErrorDpc, CyyCommError, pDevExt);
   KeInitializeDpc(&pDevExt->CompleteImmediateDpc, CyyCompleteImmediate,
                   pDevExt);
   KeInitializeDpc(&pDevExt->TotalImmediateTimeoutDpc, CyyTimeoutImmediate,
                   pDevExt);
   KeInitializeDpc(&pDevExt->CommWaitDpc, CyyCompleteWait, pDevExt);
   KeInitializeDpc(&pDevExt->XoffCountTimeoutDpc, CyyTimeoutXoff, pDevExt);
   KeInitializeDpc(&pDevExt->XoffCountCompleteDpc, CyyCompleteXoff, pDevExt);
   KeInitializeDpc(&pDevExt->StartTimerLowerRTSDpc, CyyStartTimerLowerRTS,
                   pDevExt);
   KeInitializeDpc(&pDevExt->PerhapsLowerRTSDpc, CyyInvokePerhapsLowerRTS,
                   pDevExt);
   KeInitializeDpc(&pDevExt->IsrUnlockPagesDpc, CyyUnlockPages, pDevExt);

#if 0 // DBG
   //
   // Init debug stuff
   //

   pDevExt->DpcQueued[0].Dpc = &pDevExt->CompleteWriteDpc;
   pDevExt->DpcQueued[1].Dpc = &pDevExt->CompleteReadDpc;
   pDevExt->DpcQueued[2].Dpc = &pDevExt->TotalReadTimeoutDpc;
   pDevExt->DpcQueued[3].Dpc = &pDevExt->IntervalReadTimeoutDpc;
   pDevExt->DpcQueued[4].Dpc = &pDevExt->TotalWriteTimeoutDpc;
   pDevExt->DpcQueued[5].Dpc = &pDevExt->CommErrorDpc;
   pDevExt->DpcQueued[6].Dpc = &pDevExt->CompleteImmediateDpc;
   pDevExt->DpcQueued[7].Dpc = &pDevExt->TotalImmediateTimeoutDpc;
   pDevExt->DpcQueued[8].Dpc = &pDevExt->CommWaitDpc;
   pDevExt->DpcQueued[9].Dpc = &pDevExt->XoffCountTimeoutDpc;
   pDevExt->DpcQueued[10].Dpc = &pDevExt->XoffCountCompleteDpc;
   pDevExt->DpcQueued[11].Dpc = &pDevExt->StartTimerLowerRTSDpc;
   pDevExt->DpcQueued[12].Dpc = &pDevExt->PerhapsLowerRTSDpc;
   pDevExt->DpcQueued[13].Dpc = &pDevExt->IsrUnlockPagesDpc;

#endif


   //
   // Map the memory for the control registers for the serial device
   // into virtual memory.
   //
   if (pDevExt->IsPci) {
      pDevExt->Runtime = MmMapIoSpace(PConfigData->TranslatedRuntime,
                                      PConfigData->RuntimeLength,
                                      FALSE);
      //******************************
      // Error injection
      //if (pDevExt->Runtime) {
      //   MmUnmapIoSpace(pDevExt->Runtime, PConfigData->RuntimeLength);
      //   pDevExt->Runtime = NULL;
      //}
      //******************************
      
      
      if (!pDevExt->Runtime) {

         CyyLogError(
                       PDevObj->DriverObject,
                       pDevExt->DeviceObject,
                       PConfigData->PhysicalBoardMemory,
                       CyyPhysicalZero,
                       0,
                       0,
                       0,
                       PConfigData->PortIndex+1,
                       STATUS_SUCCESS,
                       CYY_RUNTIME_NOT_MAPPED,
                       pDevExt->DeviceName.Length+sizeof(WCHAR),
                       pDevExt->DeviceName.Buffer,
                       0,
                       NULL
                       );

         CyyDbgPrintEx(DPFLTR_WARNING_LEVEL, "Could not map Runtime memory for device "
                       "registers for %wZ\n", &pDevExt->DeviceName);

         status = STATUS_NONE_MAPPED;
         goto ExtensionCleanup;

      }
   
   }

   pDevExt->BoardMemory = MmMapIoSpace(PConfigData->TranslatedBoardMemory,
                                       PConfigData->BoardMemoryLength,
                                       FALSE);

      //******************************
      // Error injection
      //if (pDevExt->BoardMemory) {
      //   MmUnmapIoSpace(pDevExt->BoardMemory, PConfigData->BoardMemoryLength);
      //   pDevExt->BoardMemory = NULL;
      //}
      //******************************

   if (!pDevExt->BoardMemory) {

      CyyLogError(
                    PDevObj->DriverObject,
                    pDevExt->DeviceObject,
                    PConfigData->PhysicalBoardMemory,
                    CyyPhysicalZero,
                    0,
                    0,
                    0,
                    PConfigData->PortIndex+1,
                    STATUS_SUCCESS,
                    CYY_BOARD_NOT_MAPPED,
                    pDevExt->DeviceName.Length+sizeof(WCHAR),
                    pDevExt->DeviceName.Buffer,
                    0,
                    NULL
                    );

      CyyDbgPrintEx(DPFLTR_WARNING_LEVEL, "Could not map Board memory for device "
                    "registers for %wZ\n", &pDevExt->DeviceName);

      status = STATUS_NONE_MAPPED;
      goto ExtensionCleanup;

   }
   
   pDevExt->RuntimeAddressSpace     = PConfigData->RuntimeAddressSpace;
   pDevExt->OriginalRuntimeMemory   = PConfigData->PhysicalRuntime;
   pDevExt->RuntimeLength           = PConfigData->RuntimeLength;

   pDevExt->BoardMemoryAddressSpace = PConfigData->BoardMemoryAddressSpace;
   pDevExt->OriginalBoardMemory     = PConfigData->PhysicalBoardMemory;
   pDevExt->BoardMemoryLength       = PConfigData->BoardMemoryLength;

   //
   // Shareable interrupt?
   //

   pDevExt->InterruptShareable = TRUE;


   //
   // Save off the interface type and the bus number.
   //

   pDevExt->InterfaceType = PConfigData->InterfaceType;
   pDevExt->BusNumber     = PConfigData->BusNumber;
   pDevExt->PortIndex     = PConfigData->PortIndex;

   //
   // Get the translated interrupt vector, level, and affinity
   //

   pDevExt->OriginalIrql      = PConfigData->OriginalIrql;
   pDevExt->OriginalVector    = PConfigData->OriginalVector;


   //
   // PnP uses the passed translated values rather than calling
   // HalGetInterruptVector()
   //

   pDevExt->Vector = PConfigData->TrVector;
   pDevExt->Irql = (UCHAR)PConfigData->TrIrql;

   //
   // Set up the Isr.
   //

   pDevExt->OurIsr = CyyIsr;


   //
   // Before we test whether the port exists (which will enable the FIFO)
   // convert the rx trigger value to what should be used in the register.
   //
   // If a bogus value was given - crank them down to 1.
   //

   switch (PConfigData->RxFIFO) {

   case 1:

      pDevExt->RxFifoTrigger = SERIAL_1_BYTE_HIGH_WATER;
      break;

   case 4:

      pDevExt->RxFifoTrigger = SERIAL_4_BYTE_HIGH_WATER;
      break;

   case 8:

      pDevExt->RxFifoTrigger = SERIAL_8_BYTE_HIGH_WATER;
      break;

   case 14:

      pDevExt->RxFifoTrigger = SERIAL_14_BYTE_HIGH_WATER;
      break;

   default:

      pDevExt->RxFifoTrigger = SERIAL_1_BYTE_HIGH_WATER;
      break;

   }


   if ((PConfigData->TxFIFO > MAX_CHAR_FIFO) ||
       (PConfigData->TxFIFO < 1)) {

      pDevExt->TxFifoAmount = MAX_CHAR_FIFO;

   } else {

      // Fanny: For now, do not use value from Registry.
      //pDevExt->TxFifoAmount = PConfigData->TxFIFO;
      pDevExt->TxFifoAmount = MAX_CHAR_FIFO;      

   }


   // Get CD1400 address of current port
   
   pDevExt->OriginalCd1400 = GetMyPhysicalCD1400Address(pDevExt->OriginalBoardMemory,
                                        pDevExt->PortIndex, pDevExt->IsPci);

   pDevExt->Cd1400 = GetMyMappedCD1400Address(pDevExt->BoardMemory, 
                                        pDevExt->PortIndex, pDevExt->IsPci);

   pDevExt->CdChannel = (UCHAR)(pDevExt->PortIndex % 4);


   //
   // Set up the default device control fields.
   // Note that if the values are changed after
   // the file is open, they do NOT revert back
   // to the old value at file close.
   //

   pDevExt->SpecialChars.XonChar      = CYY_DEF_XON;
   pDevExt->SpecialChars.XoffChar     = CYY_DEF_XOFF;
   pDevExt->HandFlow.ControlHandShake = SERIAL_DTR_CONTROL;
   pDevExt->HandFlow.FlowReplace      = SERIAL_RTS_CONTROL;


   //
   // Default Line control protocol. 7E1
   //
   // Seven data bits.
   // Even parity.
   // 1 Stop bits.
   //

   pDevExt->cor1 = COR1_7_DATA | COR1_EVEN_PARITY |
                   COR1_1_STOP;

   pDevExt->ValidDataMask = 0x7f;
   pDevExt->CurrentBaud   = 1200;


   //
   // We set up the default xon/xoff limits.
   //
   // This may be a bogus value.  It looks like the BufferSize
   // is not set up until the device is actually opened.
   //

   pDevExt->HandFlow.XoffLimit    = pDevExt->BufferSize >> 3;
   pDevExt->HandFlow.XonLimit     = pDevExt->BufferSize >> 1;

   pDevExt->BufferSizePt8 = ((3*(pDevExt->BufferSize>>2))+
                                  (pDevExt->BufferSize>>4));

   CyyDbgPrintEx(CYYDIAG1, " The default interrupt read buffer size is: %d\n"
                 "------  The XoffLimit is                         : %d\n"
                 "------  The XonLimit is                          : %d\n"
                 "------  The pt 8 size is                         : %d\n",
                 pDevExt->BufferSize, pDevExt->HandFlow.XoffLimit,
                 pDevExt->HandFlow.XonLimit, pDevExt->BufferSizePt8);

   //
   // Find out which baud rates are supported by this port.
   //

   if (CD1400_READ( pDevExt->Cd1400, pDevExt->IsPci, GFRCR ) > REV_G) {
      pDevExt->CDClock = 60000000;
		pDevExt->MSVR_RTS = MSVR2;
		pDevExt->MSVR_DTR = MSVR1;
		pDevExt->DTRset = 0x01;
		pDevExt->RTSset = 0x02;
		pDevExt->SupportedBauds = 
				SERIAL_BAUD_134_5 |	SERIAL_BAUD_150 | SERIAL_BAUD_300 |	
				SERIAL_BAUD_600 | SERIAL_BAUD_1200 | SERIAL_BAUD_1800 | 
				SERIAL_BAUD_2400 | SERIAL_BAUD_4800 | SERIAL_BAUD_7200 | 
				SERIAL_BAUD_9600 | SERIAL_BAUD_14400 | SERIAL_BAUD_19200 | 
				SERIAL_BAUD_38400 | SERIAL_BAUD_56K	 | SERIAL_BAUD_57600 | 
				SERIAL_BAUD_115200 | SERIAL_BAUD_128K | SERIAL_BAUD_USER;
	} else {
		pDevExt->CDClock = 25000000;
		pDevExt->MSVR_RTS = MSVR1;
		pDevExt->MSVR_DTR = MSVR2;
		pDevExt->DTRset = 0x02;
		pDevExt->RTSset = 0x01;
		pDevExt->SupportedBauds = SERIAL_BAUD_075 | SERIAL_BAUD_110 |	
	   		SERIAL_BAUD_134_5 |	SERIAL_BAUD_150 | SERIAL_BAUD_300 |	
				SERIAL_BAUD_600 | SERIAL_BAUD_1200 | SERIAL_BAUD_1800 | 
				SERIAL_BAUD_2400 | SERIAL_BAUD_4800 | SERIAL_BAUD_7200 | 
				SERIAL_BAUD_9600 | SERIAL_BAUD_14400 | SERIAL_BAUD_19200 | 
				SERIAL_BAUD_38400 | SERIAL_BAUD_56K	 | SERIAL_BAUD_57600 | 
				SERIAL_BAUD_115200 | SERIAL_BAUD_128K | SERIAL_BAUD_USER;
	}

   //
   // Mark this device as not being opened by anyone.  We keep a
   // variable around so that spurious interrupts are easily
   // dismissed by the ISR.
   //

   pDevExt->DeviceIsOpened = FALSE;

   //
   // Store values into the extension for interval timing.
   //

   //
   // If the interval timer is less than a second then come
   // in with a short "polling" loop.
   //
   // For large (> then 2 seconds) use a 1 second poller.
   //

   pDevExt->ShortIntervalAmount.QuadPart  = -1;
   pDevExt->LongIntervalAmount.QuadPart   = -10000000;
   pDevExt->CutOverAmount.QuadPart        = 200000000;

   // Initialize for the Isr Dispatch

   pDispatch = pDevExt->OurIsrContext;
   pDispatch->IsPci = pDevExt->IsPci;
   pDispatch->Extensions[pDevExt->PortIndex] = pDevExt;
   pDispatch->Cd1400[pDevExt->PortIndex] = pDevExt->Cd1400;


   //
   // Common error path cleanup.  If the status is
   // bad, get rid of the device extension, device object
   // and any memory associated with it.
   //

ExtensionCleanup: ;
   if (!NT_SUCCESS(status)) {

      if (pDispatch) {
         pDispatch->Extensions[pDevExt->PortIndex] = NULL;
         pDispatch->Cd1400[pDevExt->PortIndex] = NULL;
      }

      if (allocedDispatch) {
         ExFreePool(pDevExt->OurIsrContext);
         pDevExt->OurIsrContext = NULL;
      }

      if (pDevExt->Runtime) {
         MmUnmapIoSpace(pDevExt->Runtime, PConfigData->RuntimeLength);
         pDevExt->Runtime = NULL;
      }

      if (pDevExt->BoardMemory) {
         MmUnmapIoSpace(pDevExt->BoardMemory, PConfigData->BoardMemoryLength);
         pDevExt->BoardMemory = NULL;
      }

   }

   return status;

}


BOOLEAN
CyyReset(
    IN PVOID Context
    )
/*--------------------------------------------------------------------------
    CyyReset()
    
    Routine Description: This places the hardware in a standard
    configuration. This assumes that it is called at interrupt level.

    Arguments:

    Context - The device extension for serial device being managed.

    Return Value: Always FALSE.
--------------------------------------------------------------------------*/
{
    PCYY_DEVICE_EXTENSION extension = Context;
    PUCHAR chip = extension->Cd1400;
    ULONG bus = extension->IsPci;
    CYY_IOCTL_BAUD s;

    extension->RxFifoTriggerUsed = FALSE;

    // Disable channel
    CD1400_WRITE(chip,bus,CAR,extension->CdChannel & 0x03);
    CyyCDCmd(extension,CCR_DIS_TX_RX);

    // set the line control, modem control, and the baud to what they should be.

    CyySetLineControl(extension);

    CyySetupNewHandFlow(extension,&extension->HandFlow);

    CyyHandleModemUpdate(extension,FALSE);

    s.Extension = extension;
    s.Baud = extension->CurrentBaud;
    CyySetBaud(&s);

    // Enable port
    CD1400_WRITE(chip,bus,CAR,extension->CdChannel & 0x03);
    CyyCDCmd(extension,CCR_ENA_TX_RX);
    
    // Enable reception and modem interrupts

    CD1400_WRITE(chip,bus,MCOR1,0xf0); // Transitions of DSR,CTS,RI and CD cause IRQ.
                    							// Automatic DTR Mode disabled.

    CD1400_WRITE(chip,bus,MCOR2,0xf0);

	#if 0
    cy_wreg(SRER,0x91);		// Enable MdmCh, RxData, NNDT.
	#endif
    CD1400_WRITE(chip,bus,SRER,0x90); // Enable MdmCh, RxData.

    extension->HoldingEmpty = TRUE;
		
    return FALSE;
}

VOID
CyyUnload(
    IN PDRIVER_OBJECT DriverObject
    )
/*--------------------------------------------------------------------------
	CyyUnload()

   Description: This routine is defunct since all device objects 
   are removed before the driver is unloaded.
	
	Arguments:

	DriverObject - A pointer to the driver object.

	Return Value: None. 
--------------------------------------------------------------------------*/
{
   PVOID lockPtr;

   PAGED_CODE();

   lockPtr = MmLockPagableCodeSection(CyyUnload);

   //
   // Unnecessary since our BSS is going away, but do it anyhow to be safe
   //

   CyyGlobals.PAGESER_Handle = NULL;

   if (CyyGlobals.RegistryPath.Buffer != NULL) {
      ExFreePool(CyyGlobals.RegistryPath.Buffer);
      CyyGlobals.RegistryPath.Buffer = NULL;
   }

#if DBG
   SerialLogFree();
#endif

   CyyDbgPrintEx(CYYDIAG3, "In CyyUnload\n");

   MmUnlockPagableImageSection(lockPtr);

}

	
CYY_MEM_COMPARES
CyyMemCompare(
                IN PHYSICAL_ADDRESS A,
                IN ULONG SpanOfA,
                IN PHYSICAL_ADDRESS B,
                IN ULONG SpanOfB
                )

/*++

Routine Description:

    Compare two phsical address.

Arguments:

    A - One half of the comparison.

    SpanOfA - In units of bytes, the span of A.

    B - One half of the comparison.

    SpanOfB - In units of bytes, the span of B.


Return Value:

    The result of the comparison.

--*/

{

   LARGE_INTEGER a;
   LARGE_INTEGER b;

   LARGE_INTEGER lower;
   ULONG lowerSpan;
   LARGE_INTEGER higher;

   //PAGED_CODE(); Non paged because it can be called during CyyLogError, which is non paged now.

   a = A;
   b = B;

   if (a.QuadPart == b.QuadPart) {

      return AddressesAreEqual;

   }

   if (a.QuadPart > b.QuadPart) {

      higher = a;
      lower = b;
      lowerSpan = SpanOfB;

   } else {

      higher = b;
      lower = a;
      lowerSpan = SpanOfA;

   }

   if ((higher.QuadPart - lower.QuadPart) >= lowerSpan) {

      return AddressesAreDisjoint;

   }

   return AddressesOverlap;

}

NTSTATUS
CyyFindInitController(IN PDEVICE_OBJECT PDevObj, IN PCONFIG_DATA PConfig)
/*++

Routine Description:

    This function discovers what type of controller is responsible for
    the given port and initializes the controller and port.

Arguments:

    PDevObj - Pointer to the devobj for the port we are about to init.

    PConfig - Pointer to configuration data for the port we are about to init.

Return Value:

    STATUS_SUCCESS on success, appropriate error value on failure.

--*/

{

   PCYY_DEVICE_EXTENSION pDevExt = PDevObj->DeviceExtension;
   PDEVICE_OBJECT pDeviceObject;
   PCYY_DEVICE_EXTENSION pExtension;
   PHYSICAL_ADDRESS serialPhysicalMax;
   PLIST_ENTRY pCurDevObj;
   NTSTATUS status;
   KIRQL oldIrql;

   CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyyFindInitController(%X, %X)\n",
                 PDevObj, PConfig);

   serialPhysicalMax.LowPart = (ULONG)~0;
   serialPhysicalMax.HighPart = ~0;

   CyyDbgPrintEx(CYYDIAG1, "Attempting to init %wZ\n"
                 "------- Runtime Memory is %x\n"
                 "------- Board Memory is %x\n"
                 "------- BusNumber is %d\n"
                 "------- BusType is %d\n"
                 "------- Runtime AddressSpace is %d\n"
                 "------- Board AddressSpace is %d\n"
                 "------- Interrupt Mode is %d\n",
                 &pDevExt->DeviceName,
                 PConfig->PhysicalRuntime.LowPart,
                 PConfig->PhysicalBoardMemory.LowPart,
                 PConfig->BusNumber,
                 PConfig->InterfaceType,
                 PConfig->RuntimeAddressSpace,
                 PConfig->BoardMemoryAddressSpace,
                 PConfig->InterruptMode);

   //
   // We don't support any boards whose memory wraps around
   // the physical address space.
   //

   if (pDevExt->IsPci) {
//*****************************************************
// error injection
//      if (CyyMemCompare(
//                          PConfig->PhysicalRuntime,
//                          PConfig->RuntimeLength,
//                          serialPhysicalMax,
//                          (ULONG)0
//                          ) == AddressesAreDisjoint) 
//*****************************************************
      if (CyyMemCompare(
                          PConfig->PhysicalRuntime,
                          PConfig->RuntimeLength,
                          serialPhysicalMax,
                          (ULONG)0
                          ) != AddressesAreDisjoint) {
         CyyLogError(
                       PDevObj->DriverObject,
                       NULL,
                       PConfig->PhysicalBoardMemory,
                       CyyPhysicalZero,
                       0,
                       0,
                       0,
                       PConfig->PortIndex+1,
                       STATUS_SUCCESS,
                       CYY_RUNTIME_MEMORY_TOO_HIGH,
                       pDevExt->DeviceName.Length+sizeof(WCHAR),
                       pDevExt->DeviceName.Buffer,
                       0,
                       NULL
                       );

         CyyDbgPrintEx(DPFLTR_WARNING_LEVEL, "Error in config record for %wZ\n"
                       "------  Runtime memory wraps around physical memory\n",
                       &pDevExt->DeviceName);

         return STATUS_NO_SUCH_DEVICE;

      }
   }

//*****************************************************
// error injection
//   if (CyyMemCompare(
//                       PConfig->PhysicalBoardMemory,
//                       PConfig->BoardMemoryLength,
//                       serialPhysicalMax,
//                       (ULONG)0
//                       ) == AddressesAreDisjoint) 
//*****************************************************
   if (CyyMemCompare(
                       PConfig->PhysicalBoardMemory,
                       PConfig->BoardMemoryLength,
                       serialPhysicalMax,
                       (ULONG)0
                       ) != AddressesAreDisjoint) {

      CyyLogError(
                    PDevObj->DriverObject,
                    NULL,
                    PConfig->PhysicalBoardMemory,
                    CyyPhysicalZero,
                    0,
                    0,
                    0,
                    PConfig->PortIndex+1,
                    STATUS_SUCCESS,
                    CYY_BOARD_MEMORY_TOO_HIGH,
                    pDevExt->DeviceName.Length+sizeof(WCHAR),
                    pDevExt->DeviceName.Buffer,
                    0,
                    NULL
                    );

      CyyDbgPrintEx(DPFLTR_WARNING_LEVEL, "Error in config record for %wZ\n"
                    "------  board memory wraps around physical memory\n",
                    &pDevExt->DeviceName);

      return STATUS_NO_SUCH_DEVICE;

   }


   //
   // Make sure that the Runtime memory addresses don't
   // overlap the controller registers for PCI cards
   //

   if (pDevExt->IsPci) {
      if (CyyMemCompare(
                          PConfig->PhysicalRuntime,
                          PConfig->RuntimeLength,
                          CyyPhysicalZero,
                          (ULONG)0
                          ) != AddressesAreEqual) {
//*****************************************************
// error injection
//         if (CyyMemCompare(
//                             PConfig->PhysicalRuntime,
//                             PConfig->RuntimeLength,
//                             PConfig->PhysicalBoardMemory,
//                             PConfig->BoardMemoryLength
//                             ) == AddressesAreDisjoint) 
//*****************************************************
         if (CyyMemCompare(
                             PConfig->PhysicalRuntime,
                             PConfig->RuntimeLength,
                             PConfig->PhysicalBoardMemory,
                             PConfig->BoardMemoryLength
                             ) != AddressesAreDisjoint) {

            CyyLogError(
                          PDevObj->DriverObject,
                          NULL,
                          PConfig->PhysicalBoardMemory,
                          PConfig->PhysicalRuntime,
                          0,
                          0,
                          0,
                          PConfig->PortIndex+1,
                          STATUS_SUCCESS,
                          CYY_BOTH_MEMORY_CONFLICT,
                          pDevExt->DeviceName.Length+sizeof(WCHAR),
                          pDevExt->DeviceName.Buffer,
                          0,
                          NULL
                          );

            CyyDbgPrintEx(DPFLTR_WARNING_LEVEL, "Error in config record for %wZ\n"
                          "------  Runtime memory wraps around CD1400 registers\n",
                          &pDevExt->DeviceName);

            return STATUS_NO_SUCH_DEVICE;
         }
      }
   }



   //
   // Now, we will check if this is a port on a multiport card.
   // The conditions are same ISR set and same IRQL/Vector
   //

   //
   // Loop through all previously attached devices
   //

   KeAcquireSpinLock(&CyyGlobals.GlobalsSpinLock, &oldIrql);

   if (!IsListEmpty(&CyyGlobals.AllDevObjs)) {
      pCurDevObj = CyyGlobals.AllDevObjs.Flink;
      pExtension = CONTAINING_RECORD(pCurDevObj, CYY_DEVICE_EXTENSION,
                                     AllDevObjs);
   } else {
      pCurDevObj = NULL;
      pExtension = NULL;
   }

   KeReleaseSpinLock(&CyyGlobals.GlobalsSpinLock, oldIrql);

   //
   // If there is an interrupt status then we
   // loop through the config list again to look
   // for a config record with the same interrupt
   // status (on the same bus).
   //

   if (pCurDevObj != NULL) {

      ASSERT(pExtension != NULL);

      //
      // We have an interrupt status.  Loop through all
      // previous records, look for an existing interrupt status
      // the same as the current interrupt status.
      //
      do {

         //
         // We only care about this list if the elements are on the
         // same bus as this new entry.  (Their interrupts must therefore
         // also be the on the same bus.  We will check that momentarily).
         //
         // We don't check here for the dissimilar interrupts since that
         // could cause us to miss the error of having the same interrupt
         // status but different interrupts - which is bizzare.
         //

         if ((pExtension->InterfaceType == PConfig->InterfaceType) &&
             (pExtension->BoardMemoryAddressSpace == PConfig->BoardMemoryAddressSpace) &&
             (pExtension->BusNumber == PConfig->BusNumber)) {

            //
            // If the board memory is the same, then same card.
            //

            if (CyyMemCompare(
                                pExtension->OriginalBoardMemory,
                                pExtension->BoardMemoryLength,
                                PConfig->PhysicalBoardMemory,
                                PConfig->BoardMemoryLength
                                ) == AddressesAreEqual) {

               //
               // Same card.  Now make sure that they
               // are using the same interrupt parameters.
               //

               // BUILD 2128: OriginalIrql replaced by TrIrql and Irql; same for OriginalVector
               if ((PConfig->TrIrql != pExtension->Irql) ||
                   (PConfig->TrVector != pExtension->Vector)) {

//*************************************************************
// Error Injection
//               if ((PConfig->TrIrql == pExtension->Irql) ||
//                   (PConfig->TrVector != pExtension->Vector)) 
//*************************************************************

                  //
                  // We won't put this into the configuration
                  // list.
                  //
                  CyyLogError(
                                PDevObj->DriverObject,
                                NULL,
                                PConfig->PhysicalBoardMemory,
                                pExtension->OriginalBoardMemory,
                                0,
                                0,
                                0,
                                PConfig->PortIndex+1,
                                STATUS_SUCCESS,
                                CYY_MULTI_INTERRUPT_CONFLICT,
                                pDevExt->DeviceName.Length+sizeof(WCHAR),
                                pDevExt->DeviceName.Buffer,
                                pExtension->DeviceName.Length
                                + sizeof(WCHAR),
                                pExtension->DeviceName.Buffer
                                );

                  CyyDbgPrintEx(DPFLTR_WARNING_LEVEL, "Configuration error "
                                "for %wZ\n"
                                "------- Same multiport - different "
                                "interrupts\n", &pDevExt->DeviceName);

                  return STATUS_NO_SUCH_DEVICE;

               }

               if (pDevExt->IsPci) {
                  //
                  // PCI board. Make sure the PCI memory addresses are equal.
                  //
                  if (CyyMemCompare(
                                      pExtension->OriginalRuntimeMemory,
                                      pExtension->RuntimeLength,
                                      PConfig->PhysicalRuntime,
                                      PConfig->RuntimeLength
                                      ) != AddressesAreEqual) {
//*****************************************************
// error injection
//                  if (CyyMemCompare(
//                                     pExtension->OriginalRuntimeMemory,
//                                      pExtension->RuntimeLength,
//                                      PConfig->PhysicalRuntime,
//                                      PConfig->RuntimeLength
//                                      ) == AddressesAreEqual) 
//*****************************************************

                     CyyLogError(
                                   PDevObj->DriverObject,
                                   NULL,
                                   PConfig->PhysicalRuntime,
                                   pExtension->OriginalRuntimeMemory,
                                   0,
                                   0,
                                   0,
                                   PConfig->PortIndex+1,
                                   STATUS_SUCCESS,
                                   CYY_MULTI_RUNTIME_CONFLICT,
                                   pDevExt->DeviceName.Length+sizeof(WCHAR),
                                   pDevExt->DeviceName.Buffer,
                                   pExtension->DeviceName.Length
                                   + sizeof(WCHAR),
                                   pExtension->DeviceName.Buffer
                                   );

                     CyyDbgPrintEx(DPFLTR_WARNING_LEVEL, "Configuration error "
                                   "for %wZ\n"
                                   "------- Same multiport - different "
                                   "Runtime addresses\n", &pDevExt->DeviceName);

                     return STATUS_NO_SUCH_DEVICE;
                  }
               }

               //
               // We should never get this far on a restart since we don't
               // support stop on ISA multiport devices!
               //

               ASSERT(pDevExt->PNPState == CYY_PNP_ADDED);

               //
               //
               // Initialize the device as part of a multiport board
               //

               CyyDbgPrintEx(CYYDIAG1, "Aha! It is a multiport node\n");
               CyyDbgPrintEx(CYYDIAG1, "Matched to %x\n", pExtension);

               status = CyyInitMultiPort(pExtension, PConfig, PDevObj);

               //
               // A port can be one of two things:
               //    A non-root on a multiport
               //    A root on a multiport
               //
               // It can only share an interrupt if it is a root.
               // Since this was a non-root we don't need to check 
               // if it shares an interrupt and we can return.
               //
               return status;
            }
         }

         //
         // No match, check some more
         //

         KeAcquireSpinLock(&CyyGlobals.GlobalsSpinLock, &oldIrql);

         pCurDevObj = pCurDevObj->Flink;
         if (pCurDevObj != NULL) {
            pExtension = CONTAINING_RECORD(pCurDevObj,CYY_DEVICE_EXTENSION,
                                           AllDevObjs);
         }

         KeReleaseSpinLock(&CyyGlobals.GlobalsSpinLock, oldIrql);

      } while (pCurDevObj != NULL && pCurDevObj != &CyyGlobals.AllDevObjs);
   }


   CyyDbgPrintEx(CYYDIAG1, "Aha! It is a first multi\n");

   status = CyyInitController(PDevObj, PConfig);

   if (!NT_SUCCESS(status)) {
      return status;
   }

   return STATUS_SUCCESS;
}


PUCHAR
GetMyMappedCD1400Address(IN PUCHAR BoardMemory, IN ULONG PortIndex, IN ULONG IsPci)
{

   const ULONG CyyCDOffset[] = {	// CD1400 offsets within the board
   0x00000000,0x00000400,0x00000800,0x00000C00,
   0x00000200,0x00000600,0x00000A00,0x00000E00
   };
   ULONG chipIndex = PortIndex/4;

   return(BoardMemory + (CyyCDOffset[chipIndex] << IsPci));      

}

PHYSICAL_ADDRESS
GetMyPhysicalCD1400Address(IN PHYSICAL_ADDRESS BoardMemory, IN ULONG PortIndex, IN ULONG IsPci)
{

   const ULONG CyyCDOffset[] = {	// CD1400 offsets within the board
   0x00000000,0x00000400,0x00000800,0x00000C00,
   0x00000200,0x00000600,0x00000A00,0x00000E00
   };
   ULONG chipIndex = PortIndex/CYY_CHANNELS_PER_CHIP;

   BoardMemory.QuadPart += (CyyCDOffset[chipIndex] << IsPci);

   return(BoardMemory);      

}


VOID
CyyCommError(
    IN PKDPC Dpc,
    IN PVOID DeferredContext,
    IN PVOID SystemContext1,
    IN PVOID SystemContext2
    )
/*--------------------------------------------------------------------------
    CyyComError()
    
    Routine Description: This routine is invoked at dpc level in response
    to a comm error.  All comm errors kill all read and writes

    Arguments:

    Dpc - Not Used.
    DeferredContext - points to the device object.
    SystemContext1 - Not Used.
    SystemContext2 - Not Used.

    Return Value: None.
--------------------------------------------------------------------------*/
{
    PCYY_DEVICE_EXTENSION Extension = DeferredContext;

    UNREFERENCED_PARAMETER(SystemContext1);
    UNREFERENCED_PARAMETER(SystemContext2);

    CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyyCommError(%X)\n", Extension);

    CyyKillAllReadsOrWrites(
        Extension->DeviceObject,
        &Extension->WriteQueue,
        &Extension->CurrentWriteIrp
        );

    CyyKillAllReadsOrWrites(
        Extension->DeviceObject,
        &Extension->ReadQueue,
        &Extension->CurrentReadIrp
        );
    CyyDpcEpilogue(Extension, Dpc);

    CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyyCommError\n");
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\y\cyyport\cyyioctl.c ===
/*--------------------------------------------------------------------------
*	
*   Copyright (C) Cyclades Corporation, 1996-2001.
*   All rights reserved.
*
*   Cyclom-Y Port Driver
*	
*   This file :     cyyioctl.c
*	
*   Description:    This module contains the code related to ioctl calls
*                   in the Cyclom-Y Port driver.
*
*   Notes:          This code supports Windows 2000 and Windows XP,
*                   x86 and IA64 processors.
*	
*   Complies with Cyclades SW Coding Standard rev 1.3.
*	
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*   Change History
*
*--------------------------------------------------------------------------
*
*--------------------------------------------------------------------------*/
#include "precomp.h"


BOOLEAN
CyyGetModemUpdate(
    IN PVOID Context
    );

BOOLEAN
CyyGetCommStatus(
    IN PVOID Context
    );

BOOLEAN
CyySetEscapeChar(
    IN PVOID Context
    );

#ifdef ALLOC_PRAGMA
#pragma alloc_text(PAGESER,CyySetBaud)
#pragma alloc_text(PAGESER,CyySetLineControl)
#pragma alloc_text(PAGESER,CyyIoControl)
#pragma alloc_text(PAGESER,CyySetChars)
#pragma alloc_text(PAGESER,CyyGetModemUpdate)
#pragma alloc_text(PAGESER,CyyGetCommStatus)
#pragma alloc_text(PAGESER,CyyGetProperties)
#pragma alloc_text(PAGESER,CyySetEscapeChar)
//#pragma alloc_text(PAGESER,CyyCDCmd)
#pragma alloc_text(PAGESER,CyyGetStats)
#pragma alloc_text(PAGESER,CyyClearStats)
#pragma alloc_text(PAGESER, CyySetMCRContents)
#pragma alloc_text(PAGESER, CyyGetMCRContents)
#pragma alloc_text(PAGESER, CyySetFCRContents)
#pragma alloc_text(PAGESER, CyyInternalIoControl)
#endif

static const PHYSICAL_ADDRESS CyyPhysicalZero = {0};


BOOLEAN
CyyGetStats(
    IN PVOID Context
    )

/*++

Routine Description:

    In sync with the interrpt service routine (which sets the perf stats)
    return the perf stats to the caller.


Arguments:

    Context - Pointer to a the irp.

Return Value:

    This routine always returns FALSE.

--*/

{

    PIO_STACK_LOCATION irpSp = IoGetCurrentIrpStackLocation((PIRP)Context);
    PCYY_DEVICE_EXTENSION extension = irpSp->DeviceObject->DeviceExtension;
    PSERIALPERF_STATS sp = ((PIRP)Context)->AssociatedIrp.SystemBuffer;

    CYY_LOCKED_PAGED_CODE();

    *sp = extension->PerfStats;
    return FALSE;

}

BOOLEAN
CyyClearStats(
    IN PVOID Context
    )

/*++

Routine Description:

    In sync with the interrpt service routine (which sets the perf stats)
    clear the perf stats.


Arguments:

    Context - Pointer to a the extension.

Return Value:

    This routine always returns FALSE.

--*/

{
    CYY_LOCKED_PAGED_CODE();

    RtlZeroMemory(
        &((PCYY_DEVICE_EXTENSION)Context)->PerfStats,
        sizeof(SERIALPERF_STATS)
        );

    RtlZeroMemory(&((PCYY_DEVICE_EXTENSION)Context)->WmiPerfData,
                 sizeof(SERIAL_WMI_PERF_DATA));
    return FALSE;

}


BOOLEAN
CyySetChars(
    IN PVOID Context
    )
/*--------------------------------------------------------------------------
    CyySetChars()
    
    Routine Description: set special characters for the driver.

    Arguments:

    Context - Pointer to a structure that contains a pointer to
              the device extension and a pointer to a special characters
              structure.

    Return Value: This routine always returns FALSE.
--------------------------------------------------------------------------*/
{
    PCYY_DEVICE_EXTENSION Extension = ((PCYY_IOCTL_SYNC)Context)->Extension;
    PUCHAR chip = Extension->Cd1400;
    ULONG bus = Extension->IsPci;

    CYY_LOCKED_PAGED_CODE();
    
    Extension->SpecialChars =
        *((PSERIAL_CHARS)(((PCYY_IOCTL_SYNC)Context)->Data));

    CD1400_WRITE(chip,bus,CAR,Extension->CdChannel & 0x03);
    CD1400_WRITE(chip,bus,SCHR1,Extension->SpecialChars.XonChar);
    CD1400_WRITE(chip,bus,SCHR2,Extension->SpecialChars.XoffChar);
		
    return FALSE;
}

BOOLEAN
CyySetBaud(
    IN PVOID Context
    )
/*--------------------------------------------------------------------------
    CyySetBaud()
    
    Routine Description: set the baud rate of the device.

    Arguments:

    Context - Pointer to a structure that contains a pointer to
              the device extension.

    Return Value: This routine always returns FALSE if error; 
	               TRUE if successful.
--------------------------------------------------------------------------*/
{
    PCYY_DEVICE_EXTENSION Extension = ((PCYY_IOCTL_BAUD)Context)->Extension;
    ULONG baud = ((PCYY_IOCTL_BAUD)Context)->Baud;
    PUCHAR chip = Extension->Cd1400;
    ULONG bus = Extension->IsPci;
    ULONG baud_period,i;
    UCHAR cor3value;
    static ULONG cor_values[] = {8, 32, 128, 512, 2048, 0};
 
    CYY_LOCKED_PAGED_CODE();
    
    for(i = 0 ; cor_values[i] > 0 ; i++) {
    	baud_period = (10 * Extension->CDClock)/baud;
		baud_period = baud_period/cor_values[i];
		baud_period = (baud_period + 5)/10;
		if(baud_period <= 0xff && baud_period > 0)	break;
    }
    if(cor_values[i] == 0)	return(FALSE);


    CD1400_WRITE(chip,bus,CAR, Extension->CdChannel & 0x03);
    CD1400_WRITE(chip,bus,TCOR, (UCHAR)i);
    CD1400_WRITE(chip,bus,RCOR, (UCHAR)i);
    CD1400_WRITE(chip,bus,TBPR, (UCHAR)baud_period);
    CD1400_WRITE(chip,bus,RBPR, (UCHAR)baud_period);
    CD1400_WRITE(chip,bus,RTPR, (UCHAR)Extension->Rtpr); // Receive Time-out Period 
					                  							   // Register (value in ms)
    
    // set the threshold
    if (Extension->RxFifoTriggerUsed == FALSE) {

       cor3value = CD1400_READ(chip,bus,COR3);
       cor3value &= 0xf0;
      if(baud <= 9600) {
   	   CD1400_WRITE(chip,bus,COR3, cor3value | 0x0a);
      } else if (baud <= 38400) {
	      CD1400_WRITE(chip,bus,COR3, cor3value | 0x06);
      } else {
	      CD1400_WRITE(chip,bus,COR3, cor3value | 0x04);
      }
      CyyCDCmd(Extension,CCR_CORCHG_COR3);
    }    
	
    return TRUE;
}

VOID
CyyCDCmd(
	PCYY_DEVICE_EXTENSION Extension,
    UCHAR cmd
    )
/*--------------------------------------------------------------------------
    CyyCDCmd()
    
    Routine Description: Send a command to a CD1400.
    
    Arguments:
    
    Extension - pointer to the serial device extension.
    cmd - command to be sent.
    
    Return Value: none.
--------------------------------------------------------------------------*/
{
    KIRQL irql;
    UCHAR value = 0xff;
    LARGE_INTEGER startOfSpin, nextQuery, difference, oneSecond;
    PUCHAR chip = Extension->Cd1400;
    ULONG bus = Extension->IsPci;

    oneSecond.QuadPart = 10*1000*1000; // unit is 100ns
    KeQueryTickCount(&startOfSpin);

    value = CD1400_READ(chip,bus,CCR);
    while (value != 0) {			
        KeQueryTickCount(&nextQuery);
        difference.QuadPart = nextQuery.QuadPart - startOfSpin.QuadPart;
        ASSERT(KeQueryTimeIncrement() <= MAXLONG);
        //*************************
        // Error Injection
        //if (difference.QuadPart * KeQueryTimeIncrement() <
        //                           oneSecond.QuadPart)
        //*************************
        if (difference.QuadPart * KeQueryTimeIncrement() >= 
                                        oneSecond.QuadPart) {
            #if DBG
            DbgPrint("\n ***** CCR not zero! *****\n");
            #endif
            if (Extension->CmdFailureLog == FALSE) {
                irql = KeGetCurrentIrql();
                if (irql <= DISPATCH_LEVEL) {
                    CyyLogError(Extension->DeviceObject->DriverObject,
                                NULL,CyyPhysicalZero,CyyPhysicalZero,
                                0,0,0,Extension->PortIndex+1,STATUS_SUCCESS,CYY_CCR_NOT_ZERO,
                                0,NULL,0,NULL);
                    Extension->CmdFailureLog = TRUE;
                }
            }
            break;															
        }
        value = CD1400_READ(chip,bus,CCR);
    };

    if (value == 0) {
        CD1400_WRITE(chip,bus,CCR,cmd);
    }
}

BOOLEAN
CyySetLineControl(
    IN PVOID Context
    )
/*--------------------------------------------------------------------------
    CyySetLineControl()
    
    Routine Description: set the COR1 (DATA,PARITY,STOP)

    Arguments:

    Context - Pointer to the device extension.

    Return Value: This routine always returns FALSE.
--------------------------------------------------------------------------*/
{
    PCYY_DEVICE_EXTENSION Extension = Context;
    PUCHAR chip = Extension->Cd1400;
    ULONG bus = Extension->IsPci;

    CYY_LOCKED_PAGED_CODE();
    
    CD1400_WRITE(chip,bus,CAR, Extension->CdChannel & 0x03);
    CD1400_WRITE(chip,bus,COR1, Extension->cor1);
    CyyCDCmd(Extension,CCR_CORCHG_COR1);
    
    return FALSE;
}

BOOLEAN
CyyGetModemUpdate(
    IN PVOID Context
    )
/*--------------------------------------------------------------------------
    CyyGetModemUpdate()
    
    Routine Description: this routine is simply used to call the interrupt
    level routine that handles modem status update.

    Arguments:

    Context - Pointer to a structure that contains a pointer to
              the device extension and a pointer to a ulong.

    Return Value: This routine always returns FALSE. 
--------------------------------------------------------------------------*/
{
    PCYY_DEVICE_EXTENSION Extension = ((PCYY_IOCTL_SYNC)Context)->Extension;
    ULONG *Result = (ULONG *)(((PCYY_IOCTL_SYNC)Context)->Data);

    CYY_LOCKED_PAGED_CODE();

    *Result = CyyHandleModemUpdate(Extension,FALSE);
    return FALSE;
}


BOOLEAN
CyySetMCRContents(IN PVOID Context)
/*++

Routine Description:

    This routine is simply used to set the contents of the MCR

Arguments:

    Context - Pointer to a structure that contains a pointer to
              the device extension and a pointer to a ulong.

Return Value:

    This routine always returns FALSE.

--*/
{
   PCYY_DEVICE_EXTENSION Extension = ((PCYY_IOCTL_SYNC)Context)->Extension;
   ULONG *Result = (ULONG *)(((PCYY_IOCTL_SYNC)Context)->Data);

   PUCHAR chip = Extension->Cd1400;
   ULONG bus = Extension->IsPci;

   CYY_LOCKED_PAGED_CODE();

   // Let's convert the UART modem control to our hw

   CD1400_WRITE(chip,bus, CAR, Extension->CdChannel & 0x03);
   if (*Result & SERIAL_MCR_DTR) {
      CD1400_WRITE(chip,bus, Extension->MSVR_DTR, Extension->DTRset);
   } else {
      CD1400_WRITE(chip,bus, Extension->MSVR_DTR, 0x00);
   }
   if (*Result & SERIAL_MCR_RTS) {
      CD1400_WRITE(chip,bus, Extension->MSVR_RTS, Extension->RTSset);
   } else {
      CD1400_WRITE(chip,bus, Extension->MSVR_RTS, 0x00);
   }
   if (*Result & SERIAL_MCR_OUT2) {
      // Enable IRQ
      CD1400_WRITE(chip,bus,SRER,0x90); // Enable MdmCh, RxData.
   } else {
      CD1400_WRITE(chip,bus,SRER,0x00); // Disable MdmCh, RxData, TxRdy
   }

// Fanny: Strange, Result is being used instead of *Result.
//   //
//   // This is severe casting abuse!!!
//   //
//
//    WRITE_MODEM_CONTROL(Extension->Controller, (UCHAR)PtrToUlong(Result));

   return FALSE;
}



BOOLEAN
CyyGetMCRContents(IN PVOID Context)

/*++

Routine Description:

    This routine is simply used to get the contents of the MCR

Arguments:

    Context - Pointer to a structure that contains a pointer to
              the device extension and a pointer to a ulong.

Return Value:

    This routine always returns FALSE.

--*/

{

   PCYY_DEVICE_EXTENSION Extension = ((PCYY_IOCTL_SYNC)Context)->Extension;
   ULONG *Result = (ULONG *)(((PCYY_IOCTL_SYNC)Context)->Data);

   PUCHAR chip = Extension->Cd1400;
   ULONG bus = Extension->IsPci;
   UCHAR var;
   *Result = 0;

   CYY_LOCKED_PAGED_CODE();

   CD1400_WRITE(chip,bus, CAR, Extension->CdChannel & 0x03);
   var = CD1400_READ(chip,bus,Extension->MSVR_DTR);
   if (var & Extension->DTRset) {
      *Result |= SERIAL_MCR_DTR;
   }
   var = CD1400_READ(chip,bus,Extension->MSVR_RTS);
   if (var & Extension->RTSset) {
      *Result |= SERIAL_MCR_RTS;
   }
   var = CD1400_READ(chip,bus,SRER);
   if (var & 0x90) {
      *Result |= SERIAL_MCR_OUT2;
   }


//   *Result = READ_MODEM_CONTROL(Extension->Controller);

   return FALSE;

}


BOOLEAN
CyySetFCRContents(IN PVOID Context)
/*++

Routine Description:

    This routine is simply used to set the contents of the FCR

Arguments:

    Context - Pointer to a structure that contains a pointer to
              the device extension and a pointer to a ulong.

Return Value:

    This routine always returns FALSE.

--*/
{
   PCYY_DEVICE_EXTENSION Extension = ((PCYY_IOCTL_SYNC)Context)->Extension;
   ULONG *Result = (ULONG *)(((PCYY_IOCTL_SYNC)Context)->Data);
   PUCHAR chip = Extension->Cd1400;
   ULONG bus = Extension->IsPci;
   UCHAR cor3value;

   CYY_LOCKED_PAGED_CODE();

   CD1400_WRITE(chip,bus,CAR, Extension->CdChannel & 0x03);

   if (*Result & SERIAL_FCR_TXMT_RESET) {
      CyyCDCmd(Extension,CCR_FLUSH_TXFIFO);
   }
   if (*Result & SERIAL_FCR_RCVR_RESET) {
      CyyDbgPrintEx(DPFLTR_WARNING_LEVEL, "SERIAL_FCR_RCVR_RESET received. "
                    "CD1400 rx fifo can't be reset.\n");
   }
   
   Extension->RxFifoTrigger = (UCHAR)*Result & 0xc0;
   cor3value = CD1400_READ(chip,bus,COR3);
   cor3value &= 0xf0;
   switch (Extension->RxFifoTrigger) {
   case SERIAL_1_BYTE_HIGH_WATER:
      cor3value |= 0x01;
      break;
   case SERIAL_4_BYTE_HIGH_WATER:
      cor3value |= 0x04;
      break;
   case SERIAL_8_BYTE_HIGH_WATER:
      cor3value |= 0x08;
      break;
   case SERIAL_14_BYTE_HIGH_WATER:
      cor3value |= MAX_CHAR_FIFO;
      break;
   }
   CD1400_WRITE(chip,bus,COR3, cor3value);
   CyyCDCmd(Extension,CCR_CORCHG_COR3);
   Extension->RxFifoTriggerUsed = TRUE;

//   //
//   // This is severe casting abuse!!!
//   //
//
//    WRITE_FIFO_CONTROL(Extension->Controller, (UCHAR)*Result);  Bld 2128: PtrToUlong replaced by *

    return FALSE;
}


BOOLEAN
CyyGetCommStatus(
    IN PVOID Context
    )
/*--------------------------------------------------------------------------
    CyyGetCommStatus()
    
    Routine Description: get the current state of the serial driver.

    Arguments:

    Context - Pointer to a structure that contains a pointer to the
    	      device extension and a pointer to a serial status record.

    Return Value: This routine always returns FALSE.
--------------------------------------------------------------------------*/
{
    PCYY_DEVICE_EXTENSION Extension = ((PCYY_IOCTL_SYNC)Context)->Extension;
    PSERIAL_STATUS Stat = ((PCYY_IOCTL_SYNC)Context)->Data;

    CYY_LOCKED_PAGED_CODE();

    Stat->Errors = Extension->ErrorWord;
    Extension->ErrorWord = 0;

    //
    // Eof isn't supported in binary mode
    //
    Stat->EofReceived = FALSE;

    Stat->AmountInInQueue = Extension->CharsInInterruptBuffer;
    Stat->AmountInOutQueue = Extension->TotalCharsQueued;

    if (Extension->WriteLength) {
        // By definition if we have a writelength the we have
        // a current write irp.
        ASSERT(Extension->CurrentWriteIrp);
        ASSERT(Stat->AmountInOutQueue >= Extension->WriteLength);

        Stat->AmountInOutQueue -=
            IoGetCurrentIrpStackLocation(Extension->CurrentWriteIrp)
            ->Parameters.Write.Length - (Extension->WriteLength);
    }

    Stat->WaitForImmediate = Extension->TransmitImmediate;

    Stat->HoldReasons = 0;
    if (Extension->TXHolding) {
        if (Extension->TXHolding & CYY_TX_CTS) {
            Stat->HoldReasons |= SERIAL_TX_WAITING_FOR_CTS;
        }

        if (Extension->TXHolding & CYY_TX_DSR) {
            Stat->HoldReasons |= SERIAL_TX_WAITING_FOR_DSR;
        }

        if (Extension->TXHolding & CYY_TX_DCD) {
            Stat->HoldReasons |= SERIAL_TX_WAITING_FOR_DCD;
        }

        if (Extension->TXHolding & CYY_TX_XOFF) {
            Stat->HoldReasons |= SERIAL_TX_WAITING_FOR_XON;
        }

        if (Extension->TXHolding & CYY_TX_BREAK) {
            Stat->HoldReasons |= SERIAL_TX_WAITING_ON_BREAK;
        }
    }

    if (Extension->RXHolding & CYY_RX_DSR) {
        Stat->HoldReasons |= SERIAL_RX_WAITING_FOR_DSR;
    }

    if (Extension->RXHolding & CYY_RX_XOFF) {
        Stat->HoldReasons |= SERIAL_TX_WAITING_XOFF_SENT;
    }

    return FALSE;

}

BOOLEAN
CyySetEscapeChar(
    IN PVOID Context
    )
/*--------------------------------------------------------------------------
    CyySetEscapeChar()
    
    Routine Description: This is used to set the character that will be
    used to escape line status and modem status information when the
    application has set up that line status and modem status should be
    passed back in the data stream.

    Arguments:

    Context - Pointer to the irp that is to specify the escape character.
              Implicitly - An escape character of 0 means no escaping.

    Return Value: This routine always returns FALSE.
--------------------------------------------------------------------------*/
{
    PCYY_DEVICE_EXTENSION extension =
        IoGetCurrentIrpStackLocation((PIRP)Context)
            ->DeviceObject->DeviceExtension;

    extension->EscapeChar =
        *(PUCHAR)((PIRP)Context)->AssociatedIrp.SystemBuffer;

    return FALSE;
}

NTSTATUS
CyyIoControl(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    )
/*--------------------------------------------------------------------------
    CyyIoControl()

    Description: This routine provides the initial processing for
    all of the Ioctls for the serial device.

    Arguments:
    
    DeviceObject - Pointer to the device object for this device
    
    Irp - Pointer to the IRP for the current request

    Return Value:

    The function value is the final status of the call
--------------------------------------------------------------------------*/
{
    NTSTATUS Status;
    PIO_STACK_LOCATION IrpSp;
    PCYY_DEVICE_EXTENSION Extension = DeviceObject->DeviceExtension;
    KIRQL OldIrql;

    #if DBG
	 ULONG debugdtr = 0;
	 ULONG debugrts = 0;
	 #endif

    NTSTATUS prologueStatus;

    CYY_LOCKED_PAGED_CODE();

    //
    // We expect to be open so all our pages are locked down.  This is, after
    // all, an IO operation, so the device should be open first.
    //

    if (Extension->DeviceIsOpened != TRUE) {
       Irp->IoStatus.Status = STATUS_INVALID_DEVICE_REQUEST;
       IoCompleteRequest(Irp, IO_NO_INCREMENT);
       return STATUS_INVALID_DEVICE_REQUEST;
    }

    if ((prologueStatus = CyyIRPPrologue(Irp, Extension))
        != STATUS_SUCCESS) {
       if(prologueStatus != STATUS_PENDING) {
         Irp->IoStatus.Status = prologueStatus;
         CyyCompleteRequest(Extension, Irp, IO_NO_INCREMENT);
       }
       return prologueStatus;
    }

    CyyDbgPrintEx(CYYIRPPATH, "Dispatch entry for: %x\n", Irp);

    if (CyyCompleteIfError(DeviceObject,Irp) != STATUS_SUCCESS) {
        return STATUS_CANCELLED;
    }
    IrpSp = IoGetCurrentIrpStackLocation(Irp);
    Irp->IoStatus.Information = 0L;
    Status = STATUS_SUCCESS;
    switch (IrpSp->Parameters.DeviceIoControl.IoControlCode) {
	
        case IOCTL_SERIAL_SET_BAUD_RATE : {

            ULONG BaudRate;

            if (IrpSp->Parameters.DeviceIoControl.InputBufferLength <
                sizeof(SERIAL_BAUD_RATE)) {
                Status = STATUS_BUFFER_TOO_SMALL;
                break;
            } else {
                BaudRate = ((PSERIAL_BAUD_RATE)
				(Irp->AssociatedIrp.SystemBuffer))->BaudRate;
            }

            if ((BaudRate == 0) || (BaudRate > 230400)) {
               Status = STATUS_INVALID_PARAMETER;
               break;
            }
            if ((Extension->CDClock == 25000000) && (BaudRate > 115200)) {
                Status = STATUS_INVALID_PARAMETER;
                break;
            }

            //
            // Make sure we are at power D0
            //

            if (NT_SUCCESS(Status)) {
               if (Extension->PowerState != PowerDeviceD0) {
                  Status = CyyGotoPowerState(Extension->Pdo, Extension,
                                                PowerDeviceD0);
                  if (!NT_SUCCESS(Status)) {
                     break;
                  }
               }
            }

            KeAcquireSpinLock(&Extension->ControlLock,&OldIrql);
			
            if (NT_SUCCESS(Status)) {
               CYY_IOCTL_BAUD S;
               BOOLEAN result;

               Extension->CurrentBaud = BaudRate;
               Extension->WmiCommData.BaudRate = BaudRate;
               S.Extension = Extension;
               S.Baud = BaudRate;
               result = KeSynchronizeExecution(Extension->Interrupt,CyySetBaud,&S);
               if (result == 0) {
                  Status = STATUS_INVALID_PARAMETER;
               }
            }

            KeReleaseSpinLock(&Extension->ControlLock,OldIrql);
            break;
        }
        case IOCTL_SERIAL_GET_BAUD_RATE: {

            PSERIAL_BAUD_RATE Br = (PSERIAL_BAUD_RATE)Irp->AssociatedIrp.SystemBuffer;
            if (IrpSp->Parameters.DeviceIoControl.OutputBufferLength <
                sizeof(SERIAL_BAUD_RATE)) {
                Status = STATUS_BUFFER_TOO_SMALL;
                break;
            }

            KeAcquireSpinLock(&Extension->ControlLock,&OldIrql);

            Br->BaudRate = Extension->CurrentBaud;

            KeReleaseSpinLock(&Extension->ControlLock,OldIrql);
        
            Irp->IoStatus.Information = sizeof(SERIAL_BAUD_RATE);			
            break;

        }
        case IOCTL_SERIAL_GET_MODEM_CONTROL: {
            CYY_IOCTL_SYNC S;

            if (IrpSp->Parameters.DeviceIoControl.OutputBufferLength <
                sizeof(ULONG)) {

                Status = STATUS_BUFFER_TOO_SMALL;
                break;

            }

            Irp->IoStatus.Information = sizeof(ULONG);

            S.Extension = Extension;
            S.Data = Irp->AssociatedIrp.SystemBuffer;

            KeAcquireSpinLock(
                &Extension->ControlLock,
                &OldIrql
                );

            KeSynchronizeExecution(
                Extension->Interrupt,
                CyyGetMCRContents,
                &S
                );

            KeReleaseSpinLock(
                &Extension->ControlLock,
                OldIrql
                );

            break;
        }
        case IOCTL_SERIAL_SET_MODEM_CONTROL: {
            CYY_IOCTL_SYNC S;

            if (IrpSp->Parameters.DeviceIoControl.InputBufferLength <
                sizeof(ULONG)) {

                Status = STATUS_BUFFER_TOO_SMALL;
                break;

            }

            S.Extension = Extension;
            S.Data = Irp->AssociatedIrp.SystemBuffer;

            //
            // Make sure we are at power D0
            //

            if (Extension->PowerState != PowerDeviceD0) {
               Status = CyyGotoPowerState(Extension->Pdo, Extension,
                                             PowerDeviceD0);
               if (!NT_SUCCESS(Status)) {
                  break;
               }
            }

            KeAcquireSpinLock(
                &Extension->ControlLock,
                &OldIrql
                );

            KeSynchronizeExecution(
                Extension->Interrupt,
                CyySetMCRContents,
                &S
                );

            KeReleaseSpinLock(
                &Extension->ControlLock,
                OldIrql
                );

            break;
        }
        case IOCTL_SERIAL_SET_FIFO_CONTROL: {
            CYY_IOCTL_SYNC S;

            if (IrpSp->Parameters.DeviceIoControl.InputBufferLength <
                sizeof(ULONG)) {
                Status = STATUS_BUFFER_TOO_SMALL;
                break;
            }

            S.Extension = Extension;
            S.Data = Irp->AssociatedIrp.SystemBuffer;

            //
            // Make sure we are at power D0
            //

            if (Extension->PowerState != PowerDeviceD0) {
               Status = CyyGotoPowerState(Extension->Pdo, Extension,
                                             PowerDeviceD0);
               if (!NT_SUCCESS(Status)) {
                  break;
               }
            }

            KeAcquireSpinLock(
                &Extension->ControlLock,
                &OldIrql
                );

            KeSynchronizeExecution(
                Extension->Interrupt,
                CyySetFCRContents,
                &S
                );

            KeReleaseSpinLock(
                &Extension->ControlLock,
                OldIrql
                );

            break;
        }
        case IOCTL_SERIAL_SET_LINE_CONTROL: {

            PSERIAL_LINE_CONTROL Lc =
                ((PSERIAL_LINE_CONTROL)(Irp->AssociatedIrp.SystemBuffer));
            UCHAR LData;
            UCHAR LStop;
            UCHAR LParity;
            UCHAR Mask = 0xff;

            if (IrpSp->Parameters.DeviceIoControl.InputBufferLength <
                sizeof(SERIAL_LINE_CONTROL)) {
                Status = STATUS_BUFFER_TOO_SMALL;
                break;
            }

            //
            // Make sure we are at power D0
            //

            if (Extension->PowerState != PowerDeviceD0) {
               Status = CyyGotoPowerState(Extension->Pdo, Extension,
                                             PowerDeviceD0);
               if (!NT_SUCCESS(Status)) {
                  break;
               }
            }

            switch (Lc->WordLength) {
                case 5:		LData = COR1_5_DATA; Mask = 0x1f;
                break;

                case 6:		LData = COR1_6_DATA; Mask = 0x3f;
                break;

                case 7:		LData = COR1_7_DATA; Mask = 0x7f;
                break;

                case 8:		LData = COR1_8_DATA; Mask = 0xff;
                break;

                default:	Status = STATUS_INVALID_PARAMETER;
                goto DoneWithIoctl;
            }

            Extension->WmiCommData.BitsPerByte = Lc->WordLength;

            switch (Lc->Parity) {
                case NO_PARITY:	{	
                    Extension->WmiCommData.Parity = SERIAL_WMI_PARITY_NONE;
                    LParity = COR1_NONE_PARITY;
                    break;
                }
                case EVEN_PARITY: {
                    Extension->WmiCommData.Parity = SERIAL_WMI_PARITY_EVEN;
                    LParity = COR1_EVEN_PARITY;
                    break;
                }    
                case ODD_PARITY: {
                    Extension->WmiCommData.Parity = SERIAL_WMI_PARITY_ODD;
                    LParity = COR1_ODD_PARITY;
                    break;
                }
                case SPACE_PARITY: {
                    Extension->WmiCommData.Parity = SERIAL_WMI_PARITY_SPACE;
                    LParity = COR1_SPACE_PARITY;
                    break;
                }
                case MARK_PARITY: {
                    Extension->WmiCommData.Parity = SERIAL_WMI_PARITY_MARK;
                    LParity = COR1_MARK_PARITY;
                    break;
                }
                default: {
                    Status = STATUS_INVALID_PARAMETER;
                    goto DoneWithIoctl;
                    break;
                }
            }

            switch (Lc->StopBits) {
                case STOP_BIT_1: {
                    Extension->WmiCommData.StopBits = SERIAL_WMI_STOP_1;
                    LStop = COR1_1_STOP;
                    break;
                }
                case STOP_BITS_1_5:	{
                    Extension->WmiCommData.StopBits = SERIAL_WMI_STOP_1_5;
                    LStop = COR1_1_5_STOP;
                    break;
                }
                case STOP_BITS_2: {
                    Extension->WmiCommData.StopBits = SERIAL_WMI_STOP_2;
                    LStop = COR1_2_STOP;
                    break;
                }
                default: {
                    Status = STATUS_INVALID_PARAMETER;
                    goto DoneWithIoctl;
                }
            }


            KeAcquireSpinLock(&Extension->ControlLock,&OldIrql);

            Extension->cor1 = (UCHAR)(LData | LParity | LStop);
            Extension->ValidDataMask = (UCHAR) Mask;

            KeSynchronizeExecution(
                Extension->Interrupt,
                CyySetLineControl,
                Extension
                );

            KeReleaseSpinLock(&Extension->ControlLock,OldIrql);
            break;
        }
        case IOCTL_SERIAL_GET_LINE_CONTROL: {

            PSERIAL_LINE_CONTROL Lc = (PSERIAL_LINE_CONTROL)Irp->AssociatedIrp.SystemBuffer;

            if (IrpSp->Parameters.DeviceIoControl.OutputBufferLength <
                sizeof(SERIAL_LINE_CONTROL)) {
                Status = STATUS_BUFFER_TOO_SMALL;
                break;
            }

            KeAcquireSpinLock(&Extension->ControlLock,&OldIrql);
			
            if ((Extension->cor1 & COR1_DATA_MASK) == COR1_5_DATA) {
                Lc->WordLength = 5;
            } else if ((Extension->cor1 & COR1_DATA_MASK) == COR1_6_DATA) {
                Lc->WordLength = 6;
            } else if ((Extension->cor1 & COR1_DATA_MASK) == COR1_7_DATA) {
                Lc->WordLength = 7;
            } else if ((Extension->cor1 & COR1_DATA_MASK) == COR1_8_DATA) {
                Lc->WordLength = 8;
            }

            if ((Extension->cor1 & COR1_PARITY_MASK) == COR1_NONE_PARITY) {
                Lc->Parity = NO_PARITY;
            } else if ((Extension->cor1 & COR1_PARITY_MASK) == COR1_ODD_PARITY) {
                Lc->Parity = ODD_PARITY;
            } else if ((Extension->cor1 & COR1_PARITY_MASK) == COR1_EVEN_PARITY) {
                Lc->Parity = EVEN_PARITY;
            } else if ((Extension->cor1 & COR1_PARITY_MASK) == COR1_MARK_PARITY) {
                Lc->Parity = MARK_PARITY;
            } else if ((Extension->cor1 & COR1_PARITY_MASK) == COR1_SPACE_PARITY) {
                Lc->Parity = SPACE_PARITY;
            }

            if ((Extension->cor1 & COR1_STOP_MASK) == COR1_2_STOP) {
                if (Lc->WordLength == 5) {
                    Lc->StopBits = STOP_BITS_1_5;
                } else {
                    Lc->StopBits = STOP_BITS_2;
                }
            } else {
                Lc->StopBits = STOP_BIT_1;
            }

            Irp->IoStatus.Information = sizeof(SERIAL_LINE_CONTROL);
            KeReleaseSpinLock(&Extension->ControlLock,OldIrql);
            break;
        }
        case IOCTL_SERIAL_SET_TIMEOUTS: {
            PSERIAL_TIMEOUTS NewTimeouts =
                ((PSERIAL_TIMEOUTS)(Irp->AssociatedIrp.SystemBuffer));

            if (IrpSp->Parameters.DeviceIoControl.InputBufferLength <
                sizeof(SERIAL_TIMEOUTS)) {
                Status = STATUS_BUFFER_TOO_SMALL;
                break;
            }

            if ((NewTimeouts->ReadIntervalTimeout == MAXULONG) &&
                (NewTimeouts->ReadTotalTimeoutMultiplier == MAXULONG) &&
                (NewTimeouts->ReadTotalTimeoutConstant == MAXULONG)) {
                Status = STATUS_INVALID_PARAMETER;
                break;
            }

            KeAcquireSpinLock(&Extension->ControlLock,&OldIrql);
	    
            Extension->Timeouts.ReadIntervalTimeout =
                NewTimeouts->ReadIntervalTimeout;
            Extension->Timeouts.ReadTotalTimeoutMultiplier =
                NewTimeouts->ReadTotalTimeoutMultiplier;
            Extension->Timeouts.ReadTotalTimeoutConstant =
                NewTimeouts->ReadTotalTimeoutConstant;
            Extension->Timeouts.WriteTotalTimeoutMultiplier =
                NewTimeouts->WriteTotalTimeoutMultiplier;
            Extension->Timeouts.WriteTotalTimeoutConstant =
                NewTimeouts->WriteTotalTimeoutConstant;

            KeReleaseSpinLock(&Extension->ControlLock,OldIrql);
            break;
        }
        case IOCTL_SERIAL_GET_TIMEOUTS: {
            if (IrpSp->Parameters.DeviceIoControl.OutputBufferLength <
                sizeof(SERIAL_TIMEOUTS)) {
                Status = STATUS_BUFFER_TOO_SMALL;
                break;
            }
			
            KeAcquireSpinLock(&Extension->ControlLock,&OldIrql);

            *((PSERIAL_TIMEOUTS)Irp->AssociatedIrp.SystemBuffer) =
	    						Extension->Timeouts;
	    
            Irp->IoStatus.Information = sizeof(SERIAL_TIMEOUTS);

            KeReleaseSpinLock(&Extension->ControlLock,OldIrql);
            break;
        }
        case IOCTL_SERIAL_SET_CHARS: {
            CYY_IOCTL_SYNC S;
	    
            PSERIAL_CHARS NewChars =
                ((PSERIAL_CHARS)(Irp->AssociatedIrp.SystemBuffer));
				
            if (IrpSp->Parameters.DeviceIoControl.InputBufferLength <
                sizeof(SERIAL_CHARS)) {
                Status = STATUS_BUFFER_TOO_SMALL;
                break;
            }
#if 0
            if (NewChars->XonChar == NewChars->XoffChar) {			

                Status = STATUS_INVALID_PARAMETER;
   	            break;					
				
            }
#endif
            // We acquire the control lock so that only
            // one request can GET or SET the characters
            // at a time.  The sets could be synchronized
            // by the interrupt spinlock, but that wouldn't
            // prevent multiple gets at the same time.

            S.Extension = Extension;
            S.Data = NewChars;

            KeAcquireSpinLock(&Extension->ControlLock,&OldIrql);

            // Under the protection of the lock, make sure that
            // the xon and xoff characters aren't the same as
            // the escape character.

            if (Extension->EscapeChar) {
                if ((Extension->EscapeChar == NewChars->XonChar) ||
                    (Extension->EscapeChar == NewChars->XoffChar)) {
                    Status = STATUS_INVALID_PARAMETER;
                    KeReleaseSpinLock(&Extension->ControlLock,OldIrql);
                    break;
                }
            }

            Extension->WmiCommData.XonCharacter = NewChars->XonChar;
            Extension->WmiCommData.XoffCharacter = NewChars->XoffChar;

            KeSynchronizeExecution(Extension->Interrupt,CyySetChars,&S);

            KeReleaseSpinLock(&Extension->ControlLock,OldIrql);
            break;
        }
        case IOCTL_SERIAL_GET_CHARS: {
				
            if (IrpSp->Parameters.DeviceIoControl.OutputBufferLength <
                sizeof(SERIAL_CHARS)) {
                Status = STATUS_BUFFER_TOO_SMALL;
                break;
            }
            KeAcquireSpinLock(&Extension->ControlLock,&OldIrql);

            *((PSERIAL_CHARS)Irp->AssociatedIrp.SystemBuffer) =
	    					Extension->SpecialChars;
            Irp->IoStatus.Information = sizeof(SERIAL_CHARS);

            KeReleaseSpinLock(&Extension->ControlLock,OldIrql);
            break;
        }
        case IOCTL_SERIAL_SET_DTR:
		  case IOCTL_SERIAL_CLR_DTR: {
						
            //
            // Make sure we are at power D0
            //

            if (Extension->PowerState != PowerDeviceD0) {
               Status = CyyGotoPowerState(Extension->Pdo, Extension,
                                             PowerDeviceD0);
               if (!NT_SUCCESS(Status)) {
                      break;
               }
            }
		
            // We acquire the lock so that we can check whether
            // automatic dtr flow control is enabled.  If it is
            // then we return an error since the app is not allowed
            // to touch this if it is automatic.

            KeAcquireSpinLock(&Extension->ControlLock,&OldIrql);

            if ((Extension->HandFlow.ControlHandShake & SERIAL_DTR_MASK)
                == SERIAL_DTR_HANDSHAKE) {
                // this is a bug from the sample driver.
                //Irp->IoStatus.Status = STATUS_INVALID_PARAMETER;
                Status = STATUS_INVALID_PARAMETER;
            } else {
                KeSynchronizeExecution(
                    Extension->Interrupt,
                    ((IrpSp->Parameters.DeviceIoControl.IoControlCode ==
                     IOCTL_SERIAL_SET_DTR)?
                     (CyySetDTR):(CyyClrDTR)),
                    Extension
                    );
            }

            KeReleaseSpinLock(&Extension->ControlLock,OldIrql);
            break;
        }
        case IOCTL_SERIAL_RESET_DEVICE: {

            break;
        }
        case IOCTL_SERIAL_SET_RTS:
        case IOCTL_SERIAL_CLR_RTS: {

            //
            // Make sure we are at power D0
            //

            if (Extension->PowerState != PowerDeviceD0) {
               Status = CyyGotoPowerState(Extension->Pdo, Extension,
                                             PowerDeviceD0);
               if (!NT_SUCCESS(Status)) {
                  break;
               }
            }

            // We acquire the lock so that we can check whether
            // automatic rts flow control or transmit toggleing
            // is enabled.  If it is then we return an error since
            // the app is not allowed to touch this if it is automatic
            // or toggling.

            KeAcquireSpinLock(&Extension->ControlLock,&OldIrql);

            if (((Extension->HandFlow.FlowReplace & SERIAL_RTS_MASK)
                 == SERIAL_RTS_HANDSHAKE) ||
                ((Extension->HandFlow.FlowReplace & SERIAL_RTS_MASK)
                 == SERIAL_TRANSMIT_TOGGLE)) {

				// this is a bug from the sample driver.
        	    //Irp->IoStatus.Status = STATUS_INVALID_PARAMETER;

				Status = STATUS_INVALID_PARAMETER;
            } else {
                KeSynchronizeExecution(
                    Extension->Interrupt,
                    ((IrpSp->Parameters.DeviceIoControl.IoControlCode ==
                     IOCTL_SERIAL_SET_RTS)?
                     (CyySetRTS):(CyyClrRTS)),
                    Extension
                    );
            }
            KeReleaseSpinLock(&Extension->ControlLock,OldIrql);
            break;
        }
        case IOCTL_SERIAL_SET_XOFF: {
		
            KeSynchronizeExecution(
                Extension->Interrupt,
                CyyPretendXoff,
                Extension
                );
            break;

        }
        case IOCTL_SERIAL_SET_XON: {
					
            KeSynchronizeExecution(
                Extension->Interrupt,
                CyyPretendXon,
                Extension
                );
            break;

        }
        case IOCTL_SERIAL_SET_BREAK_ON: {
		
            //
            // Make sure we are at power D0
            //

            if (Extension->PowerState != PowerDeviceD0) {
               Status = CyyGotoPowerState(Extension->Pdo, Extension,
                                             PowerDeviceD0);
               if (!NT_SUCCESS(Status)) {
                  break;
               }
            }
            
            KeSynchronizeExecution(
                Extension->Interrupt,
                CyyTurnOnBreak,
                Extension
                );

            break;
        }
        case IOCTL_SERIAL_SET_BREAK_OFF: {

            //
            // Make sure we are at power D0
            //

            if (Extension->PowerState != PowerDeviceD0) {
               Status = CyyGotoPowerState(Extension->Pdo, Extension,
                                             PowerDeviceD0);
               if (!NT_SUCCESS(Status)) {
                  break;
               }
            }

            KeSynchronizeExecution(
                Extension->Interrupt,
                CyyTurnOffBreak,
                Extension
                );				
							
            break;
        }
        case IOCTL_SERIAL_SET_QUEUE_SIZE: {
		
            // Type ahead buffer is fixed, so we just validate
            // that the users request is not bigger that our
            // own internal buffer size.

            PSERIAL_QUEUE_SIZE Rs =
                ((PSERIAL_QUEUE_SIZE)(Irp->AssociatedIrp.SystemBuffer));

            if (IrpSp->Parameters.DeviceIoControl.InputBufferLength <
                sizeof(SERIAL_QUEUE_SIZE)) {
                Status = STATUS_BUFFER_TOO_SMALL;
                break;
            }
						
            //
            // We have to allocate the memory for the new
            // buffer while we're still in the context of the
            // caller.  We don't even try to protect this
            // with a lock because the value could be stale
            // as soon as we release the lock - The only time
            // we will know for sure is when we actually try
            // to do the resize.
            //

            if (Rs->InSize <= Extension->BufferSize) {
                Status = STATUS_SUCCESS;
                break;
            }

            try {
                IrpSp->Parameters.DeviceIoControl.Type3InputBuffer =
                    ExAllocatePoolWithQuota(
                        NonPagedPool,
                        Rs->InSize
                        );

            } except (EXCEPTION_EXECUTE_HANDLER) {
                IrpSp->Parameters.DeviceIoControl.Type3InputBuffer = NULL;
                Status = GetExceptionCode();
            }

            if (!IrpSp->Parameters.DeviceIoControl.Type3InputBuffer) {
                break;
            }

            //
            // Well the data passed was big enough.  Do the request.
            //
            // There are two reason we place it in the read queue:
            //
            // 1) We want to serialize these resize requests so that
            //    they don't contend with each other.
            //
            // 2) We want to serialize these requests with reads since
            //    we don't want reads and resizes contending over the
            //    read buffer.
            //

            return CyyStartOrQueue(
                       Extension,
                       Irp,
                       &Extension->ReadQueue,
                       &Extension->CurrentReadIrp,
                       CyyStartRead
                       );
            break;
        }
        case IOCTL_SERIAL_GET_WAIT_MASK: {
		
            if (IrpSp->Parameters.DeviceIoControl.OutputBufferLength <
                sizeof(ULONG)) {

                Status = STATUS_BUFFER_TOO_SMALL;
                break;
            }

            // Simple scalar read.  No reason to acquire a lock.
            Irp->IoStatus.Information = sizeof(ULONG);
            *((ULONG *)Irp->AssociatedIrp.SystemBuffer) = Extension->IsrWaitMask;
            break;
        }
        case IOCTL_SERIAL_SET_WAIT_MASK: {

            ULONG NewMask;

            CyyDbgPrintEx(CYYIRPPATH, "In Ioctl processing for set mask\n");

            if (IrpSp->Parameters.DeviceIoControl.InputBufferLength <
                sizeof(ULONG)) {

                CyyDbgPrintEx(CYYDIAG3, "Invalid size fo the buffer %d\n",
                              IrpSp->Parameters
                              .DeviceIoControl.InputBufferLength);

                Status = STATUS_BUFFER_TOO_SMALL;
                break;

            } else {
                NewMask = *((ULONG *)Irp->AssociatedIrp.SystemBuffer);
            }

            // Make sure that the mask only contains valid waitable events.
            if (NewMask & ~(SERIAL_EV_RXCHAR   |
                            SERIAL_EV_RXFLAG   |
                            SERIAL_EV_TXEMPTY  |
                            SERIAL_EV_CTS      |
                            SERIAL_EV_DSR      |
                            SERIAL_EV_RLSD     |
                            SERIAL_EV_BREAK    |
                            SERIAL_EV_ERR      |
                            SERIAL_EV_RING     |
                            SERIAL_EV_PERR     |
                            SERIAL_EV_RX80FULL |
                            SERIAL_EV_EVENT1   |
                            SERIAL_EV_EVENT2)) {

                CyyDbgPrintEx(CYYDIAG3, "Unknown mask %x\n", NewMask);

                Status = STATUS_INVALID_PARAMETER;
                break;
            }

            // Either start this irp or put it on the queue.

            CyyDbgPrintEx(CYYIRPPATH, "Starting or queuing set mask irp %x"
                          "\n", Irp);

            return CyyStartOrQueue(Extension,Irp,&Extension->MaskQueue,
                                   &Extension->CurrentMaskIrp,
                                   CyyStartMask);

        }
        case IOCTL_SERIAL_WAIT_ON_MASK: {
		
            CyyDbgPrintEx(CYYIRPPATH, "In Ioctl processing for wait mask\n");
			
            if (IrpSp->Parameters.DeviceIoControl.OutputBufferLength <
                sizeof(ULONG)) {

                CyyDbgPrintEx(CYYDIAG3, "Invalid size for the buffer %d\n",
                              IrpSp->Parameters
                              .DeviceIoControl.OutputBufferLength);

                Status = STATUS_BUFFER_TOO_SMALL;
                break;
            }

            // Either start this irp or put it on the queue.

            CyyDbgPrintEx(CYYIRPPATH, "Starting or queuing wait mask irp"
                          "%x\n", Irp);

            return CyyStartOrQueue(
                       Extension,
                       Irp,
                       &Extension->MaskQueue,
                       &Extension->CurrentMaskIrp,
                       CyyStartMask
                       );

        }	
        case IOCTL_SERIAL_IMMEDIATE_CHAR: {

            KIRQL OldIrql;

            if (IrpSp->Parameters.DeviceIoControl.InputBufferLength <
                sizeof(UCHAR)) {
                Status = STATUS_BUFFER_TOO_SMALL;
                break;
            }

            IoAcquireCancelSpinLock(&OldIrql);
            if (Extension->CurrentImmediateIrp) {
                Status = STATUS_INVALID_PARAMETER;
                IoReleaseCancelSpinLock(OldIrql);
            } else {
                // We can queue the char.  We need to set
                // a cancel routine because flow control could
                // keep the char from transmitting.  Make sure
                // that the irp hasn't already been canceled.

                if (Irp->Cancel) {
                    IoReleaseCancelSpinLock(OldIrql);
                    Status = STATUS_CANCELLED;
                } else {
                    Extension->CurrentImmediateIrp = Irp;
                    Extension->TotalCharsQueued++;
                    IoReleaseCancelSpinLock(OldIrql);
                    CyyStartImmediate(Extension);

                    return STATUS_PENDING;
                }
            }
            break;

        }
        case IOCTL_SERIAL_PURGE: {
            ULONG Mask;
			
            if (IrpSp->Parameters.DeviceIoControl.InputBufferLength <
                sizeof(ULONG)) {

                Status = STATUS_BUFFER_TOO_SMALL;
                break;

            }

            // Check to make sure that the mask is valid

            Mask = *((ULONG *)(Irp->AssociatedIrp.SystemBuffer));

            if ((!Mask) || (Mask & (~(SERIAL_PURGE_TXABORT |
                                      SERIAL_PURGE_RXABORT |
                                      SERIAL_PURGE_TXCLEAR |
                                      SERIAL_PURGE_RXCLEAR )))) {

                Status = STATUS_INVALID_PARAMETER;
                break;
            }

            // Either start this irp or put it on the queue.

            return CyyStartOrQueue(
                       Extension,
                       Irp,
                       &Extension->PurgeQueue,
                       &Extension->CurrentPurgeIrp,
                       CyyStartPurge
                       );
        }
        case IOCTL_SERIAL_GET_HANDFLOW: {
				
            if (IrpSp->Parameters.DeviceIoControl.OutputBufferLength <
                				sizeof(SERIAL_HANDFLOW)) {
                Status = STATUS_BUFFER_TOO_SMALL;
                break;
            }

            Irp->IoStatus.Information = sizeof(SERIAL_HANDFLOW);

            KeAcquireSpinLock(&Extension->ControlLock,&OldIrql);

            *((PSERIAL_HANDFLOW)Irp->AssociatedIrp.SystemBuffer) =
                					Extension->HandFlow;
            KeReleaseSpinLock(&Extension->ControlLock,OldIrql);

            break;

        }
        case IOCTL_SERIAL_SET_HANDFLOW: {
            CYY_IOCTL_SYNC S;
            PSERIAL_HANDFLOW HandFlow = Irp->AssociatedIrp.SystemBuffer;

            if (IrpSp->Parameters.DeviceIoControl.InputBufferLength <
                sizeof(SERIAL_HANDFLOW)) {
                Status = STATUS_BUFFER_TOO_SMALL;
                break;
            }
            // Make sure that there are no invalid bits set.
            if (HandFlow->ControlHandShake & SERIAL_CONTROL_INVALID) {
                Status = STATUS_INVALID_PARAMETER;
                break;
            }
            if (HandFlow->FlowReplace & SERIAL_FLOW_INVALID) {
                Status = STATUS_INVALID_PARAMETER;
                break;
            }

            // Make sure that the app hasn't set an invlid DTR mode.
            if((HandFlow->ControlHandShake&SERIAL_DTR_MASK)==SERIAL_DTR_MASK) {
                Status = STATUS_INVALID_PARAMETER;
                break;
            }

            // Make sure that haven't set totally invalid xon/xoff limits.
            if ((HandFlow->XonLimit < 0) ||
	                ((ULONG)HandFlow->XonLimit > Extension->BufferSize)) {
                Status = STATUS_INVALID_PARAMETER;
                break;
            }
            if ((HandFlow->XoffLimit < 0) || 
                    ((ULONG)HandFlow->XoffLimit > Extension->BufferSize)) {
                Status = STATUS_INVALID_PARAMETER;
                break;
            }

            S.Extension = Extension;
            S.Data = HandFlow;


            KeAcquireSpinLock(&Extension->ControlLock,&OldIrql);

            // Under the protection of the lock, make sure that
            // we aren't turning on error replacement when we
            // are doing line status/modem status insertion.

            if (Extension->EscapeChar) {
                if (HandFlow->FlowReplace & SERIAL_ERROR_CHAR) {
                    Status = STATUS_INVALID_PARAMETER;
                    KeReleaseSpinLock(&Extension->ControlLock,OldIrql);
                    break;
                }
            }

            KeSynchronizeExecution(Extension->Interrupt,CyySetHandFlow,&S);

            KeReleaseSpinLock(&Extension->ControlLock,OldIrql);
            break;
        }
        case IOCTL_SERIAL_GET_MODEMSTATUS: {
            CYY_IOCTL_SYNC S;

            if(IrpSp->Parameters.DeviceIoControl.OutputBufferLength <
	    						sizeof(ULONG)) {
                Status = STATUS_BUFFER_TOO_SMALL;
                break;
            }

            Irp->IoStatus.Information = sizeof(ULONG);

            S.Extension = Extension;
            S.Data = Irp->AssociatedIrp.SystemBuffer;

            KeAcquireSpinLock(&Extension->ControlLock,&OldIrql);
            KeSynchronizeExecution(Extension->Interrupt,CyyGetModemUpdate,&S);
            KeReleaseSpinLock(&Extension->ControlLock,OldIrql);
            break;
        }
        case IOCTL_SERIAL_GET_DTRRTS: {
            CYY_IOCTL_SYNC S;
            ULONG ModemControl;

            if (IrpSp->Parameters.DeviceIoControl.OutputBufferLength <
					                sizeof(ULONG)) {
                Status = STATUS_BUFFER_TOO_SMALL;
                break;
            }

            Irp->IoStatus.Information = sizeof(ULONG);
            Irp->IoStatus.Status = STATUS_SUCCESS;

            // Reading this hardware has no effect on the device.
#if 0 
            ModemControl = READ_MODEM_CONTROL(Extension->Controller);

            ModemControl &= SERIAL_DTR_STATE | SERIAL_RTS_STATE;

            *(PULONG)Irp->AssociatedIrp.SystemBuffer = ModemControl;
#endif

            S.Extension = Extension;
            S.Data = &ModemControl;

            KeAcquireSpinLock(&Extension->ControlLock,&OldIrql);
            KeSynchronizeExecution(Extension->Interrupt,CyyGetDTRRTS,&S);	        
            KeReleaseSpinLock(&Extension->ControlLock,OldIrql);

            *(PULONG)Irp->AssociatedIrp.SystemBuffer = ModemControl;

            break;

        }
        case IOCTL_SERIAL_GET_COMMSTATUS: {
            CYY_IOCTL_SYNC S;

            if (IrpSp->Parameters.DeviceIoControl.OutputBufferLength <
				                sizeof(SERIAL_STATUS)) {
                Status = STATUS_BUFFER_TOO_SMALL;
                break;
            }

            Irp->IoStatus.Information = sizeof(SERIAL_STATUS);

            S.Extension = Extension;
            S.Data =  Irp->AssociatedIrp.SystemBuffer;

            // Acquire the cancel spin lock so nothing changes.

            IoAcquireCancelSpinLock(&OldIrql);

            KeSynchronizeExecution(Extension->Interrupt,CyyGetCommStatus,&S);

            IoReleaseCancelSpinLock(OldIrql);
            break;
        }
        case IOCTL_SERIAL_GET_PROPERTIES: {
		
            if (IrpSp->Parameters.DeviceIoControl.OutputBufferLength <
				                sizeof(SERIAL_COMMPROP)) {
                Status = STATUS_BUFFER_TOO_SMALL;
                break;
            }
            // No synchronization is required since information is "static".

            CyyGetProperties(Extension,Irp->AssociatedIrp.SystemBuffer);

            Irp->IoStatus.Information = sizeof(SERIAL_COMMPROP);
            Irp->IoStatus.Status = STATUS_SUCCESS;
            break;
        }
	
        case IOCTL_SERIAL_XOFF_COUNTER: {
            PSERIAL_XOFF_COUNTER Xc = Irp->AssociatedIrp.SystemBuffer;

            if (IrpSp->Parameters.DeviceIoControl.InputBufferLength <
				                sizeof(SERIAL_XOFF_COUNTER)) {
                Status = STATUS_BUFFER_TOO_SMALL;
                break;
            }

            if (Xc->Counter <= 0) {
                Status = STATUS_INVALID_PARAMETER;
                break;
            }

            //
            // There is no output, so make that clear now
            //

            Irp->IoStatus.Information = 0;  // Added in build 2128

            //
            // So far so good.  Put the irp onto the write queue.
            //

            return CyyStartOrQueue(
                       Extension,
                       Irp,
                       &Extension->WriteQueue,
                       &Extension->CurrentWriteIrp,
                       CyyStartWrite
                       );
        }	
        case IOCTL_SERIAL_LSRMST_INSERT: {
            PUCHAR escapeChar = Irp->AssociatedIrp.SystemBuffer;
            //FANNY: DECLARATION OF S WAS ADDED FOLLOWING NEW SERIAL SOURCE, BUT 
            // S IS NOT USED!!!!
            CYY_IOCTL_SYNC S;

            if (IrpSp->Parameters.DeviceIoControl.InputBufferLength <
					                sizeof(UCHAR)) {
                Status = STATUS_BUFFER_TOO_SMALL;
                break;
            }

            KeAcquireSpinLock(&Extension->ControlLock,&OldIrql);

            if (*escapeChar) {
                // We've got some escape work to do.  We will make sure that
                // the character is not the same as the Xon or Xoff character,
                // or that we are already doing error replacement.

                if ((*escapeChar == Extension->SpecialChars.XoffChar) ||
                    (*escapeChar == Extension->SpecialChars.XonChar) ||
                    (Extension->HandFlow.FlowReplace & SERIAL_ERROR_CHAR)) {

                    Status = STATUS_INVALID_PARAMETER;
                    KeReleaseSpinLock(&Extension->ControlLock,OldIrql);
                    break;
                }
            }

            S.Extension = Extension;
            S.Data = Irp->AssociatedIrp.SystemBuffer;

            KeSynchronizeExecution(Extension->Interrupt,CyySetEscapeChar,Irp);

            KeReleaseSpinLock(&Extension->ControlLock,OldIrql);
            break;
        }
        case IOCTL_SERIAL_CONFIG_SIZE: {
		
            if (IrpSp->Parameters.DeviceIoControl.OutputBufferLength <
					                sizeof(ULONG)) {
                Status = STATUS_BUFFER_TOO_SMALL;
                break;
            }

            Irp->IoStatus.Information = sizeof(ULONG);
            Irp->IoStatus.Status = STATUS_SUCCESS;

            *(PULONG)Irp->AssociatedIrp.SystemBuffer = 0;

            break;
        }
        case IOCTL_SERIAL_GET_STATS: {
		
            if (IrpSp->Parameters.DeviceIoControl.OutputBufferLength <
                sizeof(SERIALPERF_STATS)) {

                Status = STATUS_BUFFER_TOO_SMALL;
                break;

            }
            Irp->IoStatus.Information = sizeof(SERIALPERF_STATS);
            Irp->IoStatus.Status = STATUS_SUCCESS;

            KeSynchronizeExecution(
                Extension->Interrupt,
                CyyGetStats,
                Irp
                );			
				
            break;
		  }
        case IOCTL_SERIAL_CLEAR_STATS: {
			
            KeSynchronizeExecution(
                Extension->Interrupt,
                CyyClearStats,
                Extension
                );
            break;
        }
        default: {
            Status = STATUS_INVALID_PARAMETER;
            break;
        }
    }

DoneWithIoctl:;

    Irp->IoStatus.Status = Status;

    CyyCompleteRequest(Extension, Irp, 0);

    return Status;
}

VOID
CyyGetProperties(
    IN PCYY_DEVICE_EXTENSION Extension,
    IN PSERIAL_COMMPROP Properties
    )
/*--------------------------------------------------------------------------
    CyyGetProperties()
    
    Routine Description: This function returns the capabilities of this
    particular serial device.

    Arguments:

    Extension - The serial device extension.
    Properties - The structure used to return the properties

    Return Value:

    None.
--------------------------------------------------------------------------*/
{
    CYY_LOCKED_PAGED_CODE();

    RtlZeroMemory(Properties,sizeof(SERIAL_COMMPROP));

    Properties->PacketLength = sizeof(SERIAL_COMMPROP);
    Properties->PacketVersion = 2;
    Properties->ServiceMask = SERIAL_SP_SERIALCOMM;
    Properties->MaxTxQueue = 0;
    Properties->MaxRxQueue = 0;

    Properties->MaxBaud = SERIAL_BAUD_USER;
    Properties->SettableBaud = Extension->SupportedBauds;

    Properties->ProvSubType = SERIAL_SP_RS232;
    
    Properties->ProvCapabilities = SERIAL_PCF_DTRDSR |
                                   SERIAL_PCF_RTSCTS |
                                   SERIAL_PCF_CD     |
                                   SERIAL_PCF_PARITY_CHECK |
                                   SERIAL_PCF_XONXOFF |
                                   SERIAL_PCF_SETXCHAR |
                                   SERIAL_PCF_TOTALTIMEOUTS |
                                   SERIAL_PCF_INTTIMEOUTS;
    Properties->SettableParams = SERIAL_SP_PARITY |
                                 SERIAL_SP_BAUD |
                                 SERIAL_SP_DATABITS |
                                 SERIAL_SP_STOPBITS |
                                 SERIAL_SP_HANDSHAKING |
                                 SERIAL_SP_PARITY_CHECK |
                                 SERIAL_SP_CARRIER_DETECT;


    Properties->SettableData = SERIAL_DATABITS_5 |
                               SERIAL_DATABITS_6 |
                               SERIAL_DATABITS_7 |
                               SERIAL_DATABITS_8;
    Properties->SettableStopParity = SERIAL_STOPBITS_10 |
                                     SERIAL_STOPBITS_15 |
                                     SERIAL_STOPBITS_20 |
                                     SERIAL_PARITY_NONE |
                                     SERIAL_PARITY_ODD  |
                                     SERIAL_PARITY_EVEN |
                                     SERIAL_PARITY_MARK |
                                     SERIAL_PARITY_SPACE;
    Properties->CurrentTxQueue = 0;
    Properties->CurrentRxQueue = Extension->BufferSize;

}


BOOLEAN
CyySetRxFifoThresholdUsingRxFifoTrigger(
    IN PVOID Context
    )
/*--------------------------------------------------------------------------
    CyySetRxFifoThresholdUsingRxFifoTrigger()
    
    Routine Description: set the baud rate of the device.

    Arguments:

    Context - Pointer to a structure that contains a pointer to
              the device extension.

    Return Value: This routine always returns FALSE if error; 
	               TRUE if successful.
--------------------------------------------------------------------------*/
{
    PCYY_DEVICE_EXTENSION pDevExt = Context;
    PUCHAR chip = pDevExt->Cd1400;
    ULONG bus = pDevExt->IsPci;
    UCHAR cor3value;
 
    CYY_LOCKED_PAGED_CODE();
    
    CD1400_WRITE(chip,bus,CAR, pDevExt->CdChannel & 0x03);
    cor3value = CD1400_READ(chip,bus,COR3);
    cor3value &= 0xf0;
    switch (pDevExt->RxFifoTrigger & 0xc0) {
    case SERIAL_1_BYTE_HIGH_WATER:
        cor3value |= 0x01;
        break;
    case SERIAL_4_BYTE_HIGH_WATER:
        cor3value |= 0x04;
        break;
    case SERIAL_8_BYTE_HIGH_WATER:
        cor3value |= 0x08;
        break;
    case SERIAL_14_BYTE_HIGH_WATER:
        cor3value |= MAX_CHAR_FIFO;
        break;
    }
    CD1400_WRITE(chip,bus,COR3, cor3value);
    CyyCDCmd(pDevExt,CCR_CORCHG_COR3);
    pDevExt->RxFifoTriggerUsed = TRUE;

    return TRUE;
}


BOOLEAN
CyySetRxFifoThresholdUsingBaudRate(
    IN PVOID Context
    )
/*--------------------------------------------------------------------------
    CyySetRxFifoThresholdUsingBaudRate()
    
    Routine Description: set the baud rate of the device.

    Arguments:

    Context - Pointer to a structure that contains a pointer to
              the device extension.

    Return Value: This routine always returns FALSE if error; 
	               TRUE if successful.
--------------------------------------------------------------------------*/
{
    PCYY_DEVICE_EXTENSION pDevExt = Context;
    PUCHAR chip = pDevExt->Cd1400;
    ULONG bus = pDevExt->IsPci;
    ULONG baud = pDevExt->CurrentBaud;
    UCHAR cor3value;
 
    CYY_LOCKED_PAGED_CODE();

    // Restore COR3 accordingly to baud rate
    cor3value = CD1400_READ(chip,bus,COR3);
    cor3value &= 0xf0;
    if(baud <= 9600) {
        CD1400_WRITE(chip,bus,COR3, cor3value | 0x0a);
    } else if (baud <= 38400) {
        CD1400_WRITE(chip,bus,COR3, cor3value | 0x06);
          } else {
        CD1400_WRITE(chip,bus,COR3, cor3value | 0x04);
    }
    CyyCDCmd(pDevExt,CCR_CORCHG_COR3);
    pDevExt->RxFifoTriggerUsed = FALSE;
    
    return TRUE;
}


NTSTATUS
CyyInternalIoControl(IN PDEVICE_OBJECT PDevObj, IN PIRP PIrp)

/*++

Routine Description:

    This routine provides the initial processing for all of the
    internal Ioctrls for the serial device.

Arguments:

    PDevObj - Pointer to the device object for this device

    PIrp - Pointer to the IRP for the current request

Return Value:

    The function value is the final status of the call

--*/

{
    //
    // The status that gets returned to the caller and
    // set in the Irp.
    //
    NTSTATUS status;

    //
    // The current stack location.  This contains all of the
    // information we need to process this particular request.
    //
    PIO_STACK_LOCATION pIrpStack;

    //
    // Just what it says.  This is the serial specific device
    // extension of the device object create for the serial driver.
    //
    PCYY_DEVICE_EXTENSION pDevExt = PDevObj->DeviceExtension;

    //
    // A temporary to hold the old IRQL so that it can be
    // restored once we complete/validate this request.
    //
    KIRQL OldIrql;

    NTSTATUS prologueStatus;

    SYSTEM_POWER_STATE cap; // Added in build 2128

    CYY_LOCKED_PAGED_CODE();


    if ((prologueStatus = CyyIRPPrologue(PIrp, pDevExt))
        != STATUS_SUCCESS) {
       if (prologueStatus != STATUS_PENDING) {
         CyyCompleteRequest(pDevExt, PIrp, IO_NO_INCREMENT);
       }
       return prologueStatus;
    }

    CyyDbgPrintEx(CYYIRPPATH, "Dispatch entry for: %x\n", PIrp);

    if (CyyCompleteIfError(PDevObj, PIrp) != STATUS_SUCCESS) {
        return STATUS_CANCELLED;
    }

    pIrpStack = IoGetCurrentIrpStackLocation(PIrp);
    PIrp->IoStatus.Information = 0L;
    status = STATUS_SUCCESS;

    switch (pIrpStack->Parameters.DeviceIoControl.IoControlCode) {

    //
    // Send a wait-wake IRP
    //

    case IOCTL_SERIAL_INTERNAL_DO_WAIT_WAKE:
       //
       // Make sure we can do wait-wake based on what the device reported
       //

       for (cap = PowerSystemSleeping1; cap < PowerSystemMaximum; cap++) { // Added in bld 2128
          if ((pDevExt->DeviceStateMap[cap] >= PowerDeviceD0)
              && (pDevExt->DeviceStateMap[cap] <= pDevExt->DeviceWake)) {
             break;
          }
       }

       if (cap < PowerSystemMaximum) {
          pDevExt->SendWaitWake = TRUE;
          status = STATUS_SUCCESS;
       } else {
          status = STATUS_NOT_SUPPORTED;
       }
       break;

    case IOCTL_SERIAL_INTERNAL_CANCEL_WAIT_WAKE:
       pDevExt->SendWaitWake = FALSE;

       if (pDevExt->PendingWakeIrp != NULL) {
          IoCancelIrp(pDevExt->PendingWakeIrp);
       }

       status = STATUS_SUCCESS;
       break;


    //
    // Put the serial port in a "filter-driver" appropriate state
    //
    // WARNING: This code assumes it is being called by a trusted kernel
    // entity and no checking is done on the validity of the settings
    // passed to IOCTL_SERIAL_INTERNAL_RESTORE_SETTINGS
    //
    // If validity checking is desired, the regular ioctl's should be used
    //

    case IOCTL_SERIAL_INTERNAL_BASIC_SETTINGS:
    case IOCTL_SERIAL_INTERNAL_RESTORE_SETTINGS: {
       SERIAL_BASIC_SETTINGS basic;
       PSERIAL_BASIC_SETTINGS pBasic;
       SHORT AppropriateDivisor;
       CYY_IOCTL_SYNC S;

       if (pIrpStack->Parameters.DeviceIoControl.IoControlCode
           == IOCTL_SERIAL_INTERNAL_BASIC_SETTINGS) {


          //
          // Check the buffer size
          //

          if (pIrpStack->Parameters.DeviceIoControl.OutputBufferLength <
              sizeof(SERIAL_BASIC_SETTINGS)) {
             status = STATUS_BUFFER_TOO_SMALL;
             break;
          }

          //
          // Everything is 0 -- timeouts and flow control and fifos.  If
          // We add additional features, this zero memory method
          // may not work.
          //

          RtlZeroMemory(&basic, sizeof(SERIAL_BASIC_SETTINGS));

          basic.TxFifo = 1;
          basic.RxFifo = SERIAL_1_BYTE_HIGH_WATER;

          PIrp->IoStatus.Information = sizeof(SERIAL_BASIC_SETTINGS);
          pBasic = (PSERIAL_BASIC_SETTINGS)PIrp->AssociatedIrp.SystemBuffer;

          //
          // Save off the old settings
          //

          RtlCopyMemory(&pBasic->Timeouts, &pDevExt->Timeouts,
                        sizeof(SERIAL_TIMEOUTS));

          RtlCopyMemory(&pBasic->HandFlow, &pDevExt->HandFlow,
                        sizeof(SERIAL_HANDFLOW));

          pBasic->RxFifo = pDevExt->RxFifoTrigger;
          pBasic->TxFifo = pDevExt->TxFifoAmount;

          //
          // Point to our new settings
          //

          pBasic = &basic;

          pDevExt->RxFifoTrigger = (UCHAR)pBasic->RxFifo;

          // Set COR3 accordingly to RxFifoTrigger
          KeSynchronizeExecution(pDevExt->Interrupt, 
                                 CyySetRxFifoThresholdUsingRxFifoTrigger, pDevExt);

       } else { // restoring settings
          if (pIrpStack->Parameters.DeviceIoControl.InputBufferLength
              < sizeof(SERIAL_BASIC_SETTINGS)) {
             status = STATUS_BUFFER_TOO_SMALL;
             break;
          }


          pBasic = (PSERIAL_BASIC_SETTINGS)PIrp->AssociatedIrp.SystemBuffer;

          // Restore COR3 accordingly to baud rate
          KeSynchronizeExecution(pDevExt->Interrupt, 
                                 CyySetRxFifoThresholdUsingBaudRate, pDevExt);

       }

       KeAcquireSpinLock(&pDevExt->ControlLock, &OldIrql);

       //
       // Set the timeouts
       //

       RtlCopyMemory(&pDevExt->Timeouts, &pBasic->Timeouts,
                     sizeof(SERIAL_TIMEOUTS));

       //
       // Set flowcontrol
       //

       S.Extension = pDevExt;
       S.Data = &pBasic->HandFlow;
       KeSynchronizeExecution(pDevExt->Interrupt, CyySetHandFlow, &S);


// CHANGED FANNY
//       if (pDevExt->FifoPresent) {
//          pDevExt->TxFifoAmount = pBasic->TxFifo;
//          pDevExt->RxFifoTrigger = (UCHAR)pBasic->RxFifo;
//
//          WRITE_FIFO_CONTROL(pDevExt->Controller, (UCHAR)0);
//          READ_RECEIVE_BUFFER(pDevExt->Controller);
//          WRITE_FIFO_CONTROL(pDevExt->Controller,
//                             (UCHAR)(SERIAL_FCR_ENABLE | pDevExt->RxFifoTrigger
//                                     | SERIAL_FCR_RCVR_RESET
//                                     | SERIAL_FCR_TXMT_RESET));
//       } else {
//          pDevExt->TxFifoAmount = pDevExt->RxFifoTrigger = 0;
//          WRITE_FIFO_CONTROL(pDevExt->Controller, (UCHAR)0);
//       }

       if ((pBasic->TxFifo > MAX_CHAR_FIFO) || (pBasic->TxFifo < 1)) {
          pDevExt->TxFifoAmount = MAX_CHAR_FIFO;
       } else {
          pDevExt->TxFifoAmount = pBasic->TxFifo;
       }

       KeReleaseSpinLock(&pDevExt->ControlLock, OldIrql);


       break;
    }

    default:
       status = STATUS_INVALID_PARAMETER;
       break;

    }

    PIrp->IoStatus.Status = status;

    CyyCompleteRequest(pDevExt, PIrp, 0);

    return status;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\y\cyyport\cyyintr.c ===
/*--------------------------------------------------------------------------
*
*   Copyright (C) Cyclades Corporation, 1996-2001.
*   All rights reserved.
*
*   Cyclom-Y Port Driver
*	
*   This file:      cyyintr.c
*
*   Description:    This module contains the code related to interrupt
*                   handling in the Cyclom-Y Port driver.
*
*   Notes:          This code supports Windows 2000 and Windows XP,
*                   x86 and IA64 processors.
*
*   Complies with Cyclades SW Coding Standard rev 1.3.
*
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*   Change History
*
*--------------------------------------------------------------------------
*
*
*--------------------------------------------------------------------------
*/
#include "precomp.h"

// FANNY: THIS WAS IN CYINIT.C. IT WILL PROBABLY DESAPPEAR FROM HERE TOO.
//extern const unsigned long CyyCDOffset[];
const unsigned long CyyCDOffset[] = {	// CD1400 offsets within the board
    0x00000000,0x00000400,0x00000800,0x00000C00,
    0x00000200,0x00000600,0x00000A00,0x00000E00
    };
 


//ADDED TO DEBUG_RTPR
extern PDRIVER_OBJECT CyyDO;
//END DEBUG_RTPR

#ifdef ALLOC_PRAGMA
//#pragma alloc_text(PAGESER,CyyIsr)
//#pragma alloc_text(PAGESER,CyyPutChar)
//#pragma alloc_text(PAGESER,CyyProcessLSR)
//#pragma alloc_text(PAGESER,CyyTxStart)
//#pragma alloc_text(PAGESER,CyySendXon)
//#pragma alloc_text(PAGESER,CyySendXoff)
#endif


BOOLEAN
CyyIsr(
    IN PKINTERRUPT InterruptObject,
    IN PVOID Context
    )
/*--------------------------------------------------------------------------
    CyyIsr()
    
    Routine Description: This is the interrupt service routine for the
    Cyclom-Y Port driver.

    Arguments:

    InterruptObject - Pointer to interrupt object (not used).

    Context - Pointer to the device extension for this device.

    Return Value: This function will return TRUE if the serial port is
    the source of this interrupt, FALSE otherwise.
--------------------------------------------------------------------------*/
{
   PCYY_DISPATCH Dispatch = Context;
   PCYY_DEVICE_EXTENSION Extension;

   BOOLEAN ServicedAnInterrupt = FALSE;

   PUCHAR chip;
   PUCHAR mappedboard = NULL;
   ULONG bus = Dispatch->IsPci;
   unsigned char status, save_xir, save_car, x, rxchar=0;
   ULONG i,channel,chipindex,portindex;
   UCHAR misr;

   BOOLEAN thisChipInterrupted;
   PCYY_DEVICE_EXTENSION interlockedExtension[CYY_CHANNELS_PER_CHIP];

   UNREFERENCED_PARAMETER(InterruptObject);	

   //DbgPrint("Isr>\n");
   
   // Loop polling all chips in the board
   for(portindex = 0 ; portindex < CYY_MAX_PORTS ;) {

      if (!(Extension=Dispatch->Extensions[portindex]) || 
          !(chip=Dispatch->Cd1400[portindex])) {
         portindex++;
         continue;
      }
      chipindex = portindex/4;
      mappedboard = Extension->BoardMemory;
      thisChipInterrupted = FALSE;
      interlockedExtension[0] = interlockedExtension[1]
         = interlockedExtension[2] = interlockedExtension[3] = 0;
      

      while ((status = CD1400_READ(chip,bus,SVRR)) != 0x00) {
         ServicedAnInterrupt = TRUE;
         thisChipInterrupted = TRUE;

         if (status & 0x01) {
            //Reception
            save_xir = CD1400_READ(chip,bus,RIR);
            channel = (ULONG) (save_xir & 0x03);
            save_car = CD1400_READ(chip,bus,CAR);
            CD1400_WRITE(chip,bus,CAR,save_xir);
            Extension = Dispatch->Extensions[channel + CYY_CHANNELS_PER_CHIP*chipindex];
            x = CD1400_READ(chip,bus,RIVR) & 0x07;
            if (Extension) {
               //
               // Apply lock so if close happens concurrently we don't miss the DPC
               // queueing
               //
               if (interlockedExtension[channel] == NULL) {
                  interlockedExtension[channel] = Extension;
                  InterlockedIncrement(&Extension->DpcCount);
                  LOGENTRY(LOG_CNT, 'DpI3', 0, Extension->DpcCount, 0); // Added in bld 2128
               }
               if (x == 0x07) { // exception
                  x = CD1400_READ(chip,bus,RDSR);	// status
                  CyyDbgPrintEx(DPFLTR_WARNING_LEVEL, "exception %x\n",x);

                  if (Extension->DeviceIsOpened && 
                      (Extension->PowerState == PowerDeviceD0)) {
			
                     if (x & CYY_LSR_ERROR){
                        BOOLEAN ProcessRxChar;
					
                        if (!(x & CYY_LSR_OE)) {
                           rxchar = CD1400_READ(chip,bus,RDSR);	// error data
                        }

                        // TODO: SERIAL SAMPLE FOR W2000 HAS ADDED 
                        // CHECKING FOR EscapeChar TO BREAK TO RX LOOP
                        // IN CASE OF ERROR.
                        ProcessRxChar = CyyProcessLSR(Extension,x,rxchar);

                        if (ProcessRxChar) {
                           x = 1;	// 1 character
                           i = 0;	// prepare for for(;;) 
                           goto Handle_rxchar;
                        }
                     } // end error handling
                  } // end if DeviceIsOpened..
               
               } else { // good reception
                  x = CD1400_READ(chip,bus,RDCR);
                  if (Extension->DeviceIsOpened &&
                      (Extension->PowerState == PowerDeviceD0)) {
                     for(i = 0 ; i < x ; i++) {	// read from FIFO

                        rxchar = CD1400_READ(chip,bus,RDSR);
         Handle_rxchar:
                        Extension->PerfStats.ReceivedCount++;
                        Extension->WmiPerfData.ReceivedCount++;
                        rxchar &= Extension->ValidDataMask;
    
                        if (!rxchar &&	// NULL stripping
                            (Extension->HandFlow.FlowReplace &
                             SERIAL_NULL_STRIPPING)) {				   
                           continue;
                        }
    
                        if((Extension->HandFlow.FlowReplace &
                            SERIAL_AUTO_TRANSMIT) &&
                           ((rxchar == Extension->SpecialChars.XonChar) ||
                           (rxchar == Extension->SpecialChars.XoffChar))) {
                           if (rxchar == Extension->SpecialChars.XoffChar) {
                              Extension->TXHolding |= CYY_TX_XOFF;
                              if ((Extension->HandFlow.FlowReplace &
                                 SERIAL_RTS_MASK) ==
                                   SERIAL_TRANSMIT_TOGGLE) {
    
                                 CyyInsertQueueDpc(
                                    &Extension->StartTimerLowerRTSDpc,
                                    NULL,
                                    NULL,
                                    Extension
                                 )?Extension->CountOfTryingToLowerRTS++:0;
                              }
                           } else {
                              if (Extension->TXHolding & CYY_TX_XOFF) {
                                 Extension->TXHolding &= ~CYY_TX_XOFF;
                              }
                           }
                           continue;
                        }
                        // Check to see if we should note the receive
                        // character or special character event.
                        if (Extension->IsrWaitMask) {
                           if (Extension->IsrWaitMask & SERIAL_EV_RXCHAR) {
                              Extension->HistoryMask |= SERIAL_EV_RXCHAR;
                           }
                           if ((Extension->IsrWaitMask & SERIAL_EV_RXFLAG) &&
                               (Extension->SpecialChars.EventChar == rxchar)) {
    
                              Extension->HistoryMask |= SERIAL_EV_RXFLAG;
                           }
    
                           if (Extension->IrpMaskLocation && Extension->HistoryMask) {
                             *Extension->IrpMaskLocation = Extension->HistoryMask;
                              Extension->IrpMaskLocation = NULL;
                              Extension->HistoryMask = 0;
    
                              Extension->CurrentWaitIrp->IoStatus.Information = 
                              sizeof(ULONG);
                              CyyInsertQueueDpc(&Extension->CommWaitDpc,NULL,NULL,Extension);
                           }
                        }
                        CyyPutChar(Extension,rxchar);
    
                        // If we're doing line status and modem
                        // status insertion then we need to insert
                        // a zero following the character we just
                        // placed into the buffer to mark that this
                        // was reception of what we are using to
                        // escape.
    
                        if (Extension->EscapeChar &&
                            (Extension->EscapeChar == rxchar)) {
                           CyyPutChar(Extension,SERIAL_LSRMST_ESCAPE);
                        }
                     } // end for
                  } else {	// device is being closed, discard rx chars
                     for(i = 0 ; i < x ; i++)    rxchar = CD1400_READ(chip,bus,RDSR);
                  } // end if device is opened else closed
               }
            } else { 
               // No Extension
               if (x == 0x07) { // exception
                  x = CD1400_READ(chip,bus,RDSR);	// status
               } else { // good char
                  x = CD1400_READ(chip,bus,RDCR);  // number of chars
                  for(i = 0 ; i < x ; i++)    rxchar = CD1400_READ(chip,bus,RDSR);
               }
            }		
            CD1400_WRITE(chip,bus,RIR,(save_xir & 0x3f));	// end service
            CD1400_WRITE(chip,bus,CAR,save_car);

         } // end reception

         if (status & 0x02) {
            //Transmission
            save_xir = CD1400_READ(chip,bus,TIR);
            channel = (ULONG) (save_xir & 0x03);
            save_car = CD1400_READ(chip,bus,CAR);
            CD1400_WRITE(chip,bus,CAR,save_xir);
            Extension = Dispatch->Extensions[channel + CYY_CHANNELS_PER_CHIP*chipindex];
            if (Extension) {
               //
               // Apply lock so if close happens concurrently we don't miss the DPC
               // queueing
               //
               if (interlockedExtension[channel] == NULL) {
                  interlockedExtension[channel] = Extension;
                  InterlockedIncrement(&Extension->DpcCount);
                  LOGENTRY(LOG_CNT, 'DpI3', 0, Extension->DpcCount, 0); // Added in build 2128
               }
               Extension->HoldingEmpty = TRUE;
               if( Extension->DeviceIsOpened &&
                  (Extension->PowerState == PowerDeviceD0)) {

                  if (Extension->BreakCmd != NO_BREAK) {

                     if (Extension->BreakCmd == SEND_BREAK) {
                        if ((Extension->HandFlow.FlowReplace & SERIAL_RTS_MASK) ==
    			                  SERIAL_TRANSMIT_TOGGLE) {
			                  CyySetRTS(Extension);
                        }										
                        CD1400_WRITE(chip,bus,TDR,(unsigned char) 0x00); // escape sequence
                        CD1400_WRITE(chip,bus,TDR,(unsigned char) 0x81); // Send Break
                        Extension->TXHolding |= CYY_TX_BREAK;
                        Extension->HoldingEmpty = FALSE;
                        Extension->BreakCmd = DISABLE_ETC;		
                     } else if (Extension->BreakCmd == STOP_BREAK){
                        if (Extension->TXHolding & CYY_TX_BREAK) {					
                           CD1400_WRITE(chip,bus,TDR,(unsigned char) 0x00); // escape sequence
                           CD1400_WRITE(chip,bus,TDR,(unsigned char) 0x83); // Stop Break
                           Extension->HoldingEmpty = FALSE;
                           Extension->TXHolding &= ~CYY_TX_BREAK;
                        }
                        Extension->BreakCmd = DISABLE_ETC;
                     } else if (Extension->BreakCmd == DISABLE_ETC) {
                        UCHAR cor2;
                        cor2 = CD1400_READ(chip,bus,COR2);
                        CD1400_WRITE(chip,bus, COR2,cor2 & ~EMBED_TX_ENABLE); // disable ETC bit
                        CyyCDCmd(Extension,CCR_CORCHG_COR2);  // COR2 changed
                        Extension->BreakCmd = NO_BREAK;

                        if (!Extension->TXHolding &&
                           (Extension->TransmitImmediate ||
                           Extension->WriteLength) &&
                           Extension->HoldingEmpty) {

                           //CyyTxStart(Extension);  no need for CyyTxStart from here.

                        } else {
                           UCHAR srer = CD1400_READ(chip,bus,SRER);
                           CD1400_WRITE(chip,bus,SRER,srer & (~SRER_TXRDY));

                           //
                           // The following routine will lower the rts if we
                           // are doing transmit toggleing and there is no
                           // reason to keep it up.
                           //

                           Extension->CountOfTryingToLowerRTS++;
                           CyyPerhapsLowerRTS(Extension);
                        }

                     }

                  } else {

                     // This is not a Send Break. 
                     // Check if there are bytes to be transmitted

                     if (Extension->WriteLength || Extension->TransmitImmediate) {
		     
                        Extension->EmptiedTransmit = TRUE;
                        if (Extension->HandFlow.ControlHandShake &
                           SERIAL_OUT_HANDSHAKEMASK) {
                           CyyHandleModemUpdate(Extension,TRUE);
                        }
			
                        if (Extension->TransmitImmediate&&(!Extension->TXHolding ||
                            (Extension->TXHolding == CYY_TX_XOFF) )) {

                           Extension->TransmitImmediate = FALSE;

                           if ((Extension->HandFlow.FlowReplace &
                                SERIAL_RTS_MASK) == SERIAL_TRANSMIT_TOGGLE) {

                              CyySetRTS(Extension);
                              Extension->PerfStats.TransmittedCount++;
                              Extension->WmiPerfData.TransmittedCount++;
                              CD1400_WRITE(chip,bus,TDR,(unsigned char)(Extension->ImmediateChar));
				
                              CyyInsertQueueDpc(
                                 &Extension->StartTimerLowerRTSDpc,NULL,NULL,
                                 Extension)? Extension->CountOfTryingToLowerRTS++:0;
                           } else {
                              Extension->PerfStats.TransmittedCount++;
                              Extension->WmiPerfData.TransmittedCount++;
                              CD1400_WRITE(chip,bus,TDR,(unsigned char)(Extension->ImmediateChar));
                           }
   
                           Extension->HoldingEmpty = FALSE;

                           CyyInsertQueueDpc(
                              &Extension->CompleteImmediateDpc,
                              NULL,
                              NULL,
                              Extension
                              );
                        } else if (!Extension->TXHolding) {

                           ULONG amountToWrite;

                           amountToWrite = 
                              (Extension->TxFifoAmount < Extension->WriteLength)?
                              Extension->TxFifoAmount:Extension->WriteLength;

                           if ((Extension->HandFlow.FlowReplace &
                              SERIAL_RTS_MASK) ==
                              SERIAL_TRANSMIT_TOGGLE) {

                              // We have to raise if we're sending
                              // this character.

                              CyySetRTS(Extension);

                              for(i = 0 ; i < amountToWrite ; i++) { // write to FIFO
                                 CD1400_WRITE(chip,bus,TDR,((unsigned char *)
                                                            (Extension->WriteCurrentChar))[i]);
                              }
                              Extension->PerfStats.TransmittedCount += amountToWrite;
                              Extension->WmiPerfData.TransmittedCount += amountToWrite;

                              CyyInsertQueueDpc(
                                 &Extension->StartTimerLowerRTSDpc,
                                 NULL,
                                 NULL,
                                 Extension
                                 )?Extension->CountOfTryingToLowerRTS++:0;

                           } else {

                              for(i = 0 ; i < amountToWrite ; i++) { // write to FIFO
                                 CD1400_WRITE(chip,bus,TDR,((unsigned char *)
                                                            (Extension->WriteCurrentChar))[i]);
                              }
                              Extension->PerfStats.TransmittedCount += amountToWrite;
                              Extension->WmiPerfData.TransmittedCount += amountToWrite;
                          }

                           Extension->HoldingEmpty = FALSE;
                           Extension->WriteCurrentChar += amountToWrite;
                           Extension->WriteLength -= amountToWrite;

                           if (!Extension->WriteLength) {

                              PIO_STACK_LOCATION IrpSp;
                              //
                              // No More characters left.  This
                              // write is complete.  Take care
                              // when updating the information field,
                              // we could have an xoff counter masquerading
                              // as a write irp.
                              //

                              IrpSp = IoGetCurrentIrpStackLocation(
                                          Extension->CurrentWriteIrp
                                      );

                              Extension->CurrentWriteIrp->IoStatus.Information =
                                       (IrpSp->MajorFunction == IRP_MJ_WRITE)?
                                       (IrpSp->Parameters.Write.Length):
                                       (1);

                              CyyInsertQueueDpc(
                                       &Extension->CompleteWriteDpc,
                                       NULL,
                                       NULL,
                                       Extension
                                       );
                           } // end write complete
                        } // end of if(!TXHolding)
						
                     } else { // nothing to be transmitted - disable interrupts.
                        UCHAR srer;
                        Extension->EmptiedTransmit = TRUE;
                        srer = CD1400_READ(chip,bus,SRER);
                        CD1400_WRITE(chip,bus,SRER,srer & (~SRER_TXRDY));
                     } 
		 
                  } // end of if(break)		 
		
               } else {	// Device is closed. Disable interrupts
                  UCHAR srer = CD1400_READ(chip,bus,SRER);
                  CD1400_WRITE(chip,bus,SRER,srer & (~SRER_TXRDY));
                  Extension->EmptiedTransmit = TRUE;
               }
            } else {
               // Device was not created, no extension attached.
               UCHAR srer = CD1400_READ(chip,bus,SRER);
               CD1400_WRITE(chip,bus,SRER,srer & (~SRER_TXRDY));
            } // end if Extension
            CD1400_WRITE(chip,bus,TIR,(save_xir & 0x3f));	// end service
            CD1400_WRITE(chip,bus,CAR,save_car);

         } // end transmission

         if (status & 0x04) {
            //Modem
            save_xir = CD1400_READ(chip,bus,MIR);
            channel = (ULONG) (save_xir & 0x03);
            save_car = CD1400_READ(chip,bus,CAR);
            CD1400_WRITE(chip,bus,CAR,save_xir);
				
            //CyyDump(CYYDIAG5,("modem\n"));
				
            Extension = Dispatch->Extensions[channel + CYY_CHANNELS_PER_CHIP*chipindex];
            if (Extension) {
               //
               // Apply lock so if close happens concurrently we don't miss the DPC
               // queueing
               //
               if (interlockedExtension[channel] == NULL) {
                  interlockedExtension[channel] = Extension;
                  InterlockedIncrement(&Extension->DpcCount);
                  LOGENTRY(LOG_CNT, 'DpI3', 0, Extension->DpcCount, 0); // Added in build 2128
               }
               if (Extension->DeviceIsOpened &&
                  (Extension->PowerState == PowerDeviceD0)) {
                  misr = CD1400_READ(chip,bus,MISR);
                  CyyHandleModemUpdateForModem(Extension,FALSE,misr);
               }
            }
            CD1400_WRITE(chip,bus,MIR,(save_xir & 0x3f));	// end service
            CD1400_WRITE(chip,bus,CAR,save_car);

         } // end modem
      } // end READ SVRR
      if (thisChipInterrupted) {
         for (channel=0; channel<CYY_CHANNELS_PER_CHIP; channel++) {
            if (Extension = interlockedExtension[channel]) {
               LONG pendingCnt;

               //
               // Increment once more.  This is just a quick test to see if we
               // have a chance of causing the event to fire... we don't want
               // to run a DPC on every ISR if we don't have to....
               //

retryDPCFiring:;

               InterlockedIncrement(&Extension->DpcCount);
               LOGENTRY(LOG_CNT, 'DpI4', 0, Extension->DpcCount, 0); // Added in build 2128

               //
               // Decrement and see if the lock above looks like the only one left.
               //

               pendingCnt = InterlockedDecrement(&Extension->DpcCount);
//             LOGENTRY(LOG_CNT, 'DpD5', 0, Extension->DpcCount, 0); // Added in build 2128

               if (pendingCnt == 1) {
                  KeInsertQueueDpc(&Extension->IsrUnlockPagesDpc, NULL, NULL);
               } else {
                  if (InterlockedDecrement(&Extension->DpcCount) == 0) {

//                     LOGENTRY(LOG_CNT, 'DpD6', &Extension->IsrUnlockPagesDpc, // Added in bld 2128
//                                Extension->DpcCount, 0);

                     //
                     // We missed it.  Retry...
                     //
   
                     InterlockedIncrement(&Extension->DpcCount);
                     goto retryDPCFiring;
                  }
               } 

            } // if (Extension = interlockedExtension[]) 
         } // for (;channel<CYY_CHANNELS_PER_CHIP;)

         portindex = (chipindex+1)*4;
         continue;

      } // if (thisChipInterrupted)

      portindex++;

   } // for(;portindex<CYY_MAX_PORTS;);

   if (mappedboard) {
      CYY_CLEAR_INTERRUPT(mappedboard,Dispatch->IsPci); 
   }

   //DbgPrint("<Isr\n");

   return ServicedAnInterrupt;
}



VOID
CyyPutChar(
    IN PCYY_DEVICE_EXTENSION Extension,
    IN UCHAR CharToPut
    )
/*--------------------------------------------------------------------------
    CyyPutChar()
    
    Routine Description: This routine, which only runs at device level,
    takes care of placing a character into the typeahead (receive) buffer.

    Arguments:

    Extension - The serial device extension.

    Return Value: None.
--------------------------------------------------------------------------*/
{

   CYY_LOCKED_PAGED_CODE();

    // If we have dsr sensitivity enabled then
    // we need to check the modem status register
    // to see if it has changed.

    if (Extension->HandFlow.ControlHandShake & SERIAL_DSR_SENSITIVITY) {
        CyyHandleModemUpdate(Extension,FALSE);

        if (Extension->RXHolding & CYY_RX_DSR) {
            // We simply act as if we haven't seen the character if
            // dsr line is low.
            return;
        }
    }

    // If the xoff counter is non-zero then decrement it.
    // If the counter then goes to zero, complete that irp.

    if (Extension->CountSinceXoff) {
        Extension->CountSinceXoff--;
        if (!Extension->CountSinceXoff) {
            Extension->CurrentXoffIrp->IoStatus.Status = STATUS_SUCCESS;
            Extension->CurrentXoffIrp->IoStatus.Information = 0;
            CyyInsertQueueDpc(&Extension->XoffCountCompleteDpc,NULL,NULL,Extension);
        }
    }
    
    // Check to see if we are copying into the
    // users buffer or into the interrupt buffer.
    //
    // If we are copying into the user buffer
    // then we know there is always room for one more.
    // (We know this because if there wasn't room
    // then that read would have completed and we
    // would be using the interrupt buffer.)
    //
    // If we are copying into the interrupt buffer
    // then we will need to check if we have enough
    // room.

    if (Extension->ReadBufferBase != Extension->InterruptReadBuffer) {

        // Increment the following value so
        // that the interval timer (if one exists
        // for this read) can know that a character
        // has been read.

        Extension->ReadByIsr++;

        // We are in the user buffer.  Place the character into the buffer.
		// See if the read is complete.

        *Extension->CurrentCharSlot = CharToPut;

        if (Extension->CurrentCharSlot == Extension->LastCharSlot) {
	    
            // We've filled up the users buffer.
            // Switch back to the interrupt buffer
            // and send off a DPC to Complete the read.
            //
            // It is inherent that when we were using
            // a user buffer that the interrupt buffer
            // was empty.

            Extension->ReadBufferBase = Extension->InterruptReadBuffer;
            Extension->CurrentCharSlot = Extension->InterruptReadBuffer;
            Extension->FirstReadableChar = Extension->InterruptReadBuffer;
            Extension->LastCharSlot = Extension->InterruptReadBuffer +
						(Extension->BufferSize - 1);
            Extension->CharsInInterruptBuffer = 0;

            Extension->CurrentReadIrp->IoStatus.Information =
                IoGetCurrentIrpStackLocation(
                    Extension->CurrentReadIrp
                    )->Parameters.Read.Length;

            CyyInsertQueueDpc(&Extension->CompleteReadDpc,NULL,NULL,Extension);
        } else {
            // Not done with the users read.
            Extension->CurrentCharSlot++;
        }
    } else {
        // We need to see if we reached our flow
        // control threshold.  If we have then
        // we turn on whatever flow control the
        // owner has specified.  If no flow
        // control was specified, well..., we keep
        // trying to receive characters and hope that
        // we have enough room.  Note that no matter
        // what flow control protocol we are using, it
        // will not prevent us from reading whatever
        // characters are available.

        if ((Extension->HandFlow.ControlHandShake
             & SERIAL_DTR_MASK) ==
            SERIAL_DTR_HANDSHAKE) {

            // If we are already doing a
            // dtr hold then we don't have
            // to do anything else.

            if (!(Extension->RXHolding &
                  CYY_RX_DTR)) {

                if ((Extension->BufferSize -
                     Extension->HandFlow.XoffLimit)
                    <= (Extension->CharsInInterruptBuffer+1)) {

                    Extension->RXHolding |= CYY_RX_DTR;

                    CyyClrDTR(Extension);
                }
            }
        }

        if ((Extension->HandFlow.FlowReplace
             & SERIAL_RTS_MASK) ==
            SERIAL_RTS_HANDSHAKE) {

            // If we are already doing a
            // rts hold then we don't have
            // to do anything else.

            if (!(Extension->RXHolding & CYY_RX_RTS)) {

                if ((Extension->BufferSize -
                     Extension->HandFlow.XoffLimit)
                    <= (Extension->CharsInInterruptBuffer+1)) {

                    Extension->RXHolding |= CYY_RX_RTS;

                    CyyClrRTS(Extension);
                }
            }
        }

        if (Extension->HandFlow.FlowReplace & SERIAL_AUTO_RECEIVE) {
            // If we are already doing a
            // xoff hold then we don't have
            // to do anything else.

            if (!(Extension->RXHolding & CYY_RX_XOFF)) {

                if ((Extension->BufferSize -
                     Extension->HandFlow.XoffLimit)
                    <= (Extension->CharsInInterruptBuffer+1)) {

                    Extension->RXHolding |= CYY_RX_XOFF;

                    // If necessary cause an
                    // off to be sent.

                    CyyProdXonXoff(Extension,FALSE);
                }
            }
        }

        if (Extension->CharsInInterruptBuffer < Extension->BufferSize) {

            *Extension->CurrentCharSlot = CharToPut;
            Extension->CharsInInterruptBuffer++;

            // If we've become 80% full on this character
            // and this is an interesting event, note it.

            if (Extension->CharsInInterruptBuffer == Extension->BufferSizePt8) {

                if (Extension->IsrWaitMask & SERIAL_EV_RX80FULL) {

                    Extension->HistoryMask |= SERIAL_EV_RX80FULL;

                    if (Extension->IrpMaskLocation) {

                        *Extension->IrpMaskLocation = Extension->HistoryMask;
                        Extension->IrpMaskLocation = NULL;
                        Extension->HistoryMask = 0;

                        Extension->CurrentWaitIrp->IoStatus.Information = sizeof(ULONG);
                        CyyInsertQueueDpc(&Extension->CommWaitDpc,NULL,NULL,Extension);
                    }
                }
            }

            // Point to the next available space
            // for a received character.  Make sure
            // that we wrap around to the beginning
            // of the buffer if this last character
            // received was placed at the last slot
            // in the buffer.

            if (Extension->CurrentCharSlot == Extension->LastCharSlot) {
                Extension->CurrentCharSlot = Extension->InterruptReadBuffer;
            } else {
                Extension->CurrentCharSlot++;
            }
        } else {
            // We have a new character but no room for it.

            Extension->PerfStats.BufferOverrunErrorCount++;
            Extension->WmiPerfData.BufferOverrunErrorCount++;
            Extension->ErrorWord |= SERIAL_ERROR_QUEUEOVERRUN;

            if (Extension->HandFlow.FlowReplace & SERIAL_ERROR_CHAR) {

                // Place the error character into the last
                // valid place for a character.  Be careful!,
                // that place might not be the previous location!

                if (Extension->CurrentCharSlot == Extension->InterruptReadBuffer) {
                    *(Extension->InterruptReadBuffer+
                      (Extension->BufferSize-1)) =
                      Extension->SpecialChars.ErrorChar;
                } else {
                    *(Extension->CurrentCharSlot-1) =
                     Extension->SpecialChars.ErrorChar;
                }
            }
            // If the application has requested it, abort all reads
            // and writes on an error.

            if (Extension->HandFlow.ControlHandShake & SERIAL_ERROR_ABORT) {
                CyyInsertQueueDpc(&Extension->CommErrorDpc,NULL,NULL,Extension);
            }
        }
    }
}

BOOLEAN
CyyProcessLSR(
    IN PCYY_DEVICE_EXTENSION Extension,
	IN UCHAR Rdsr,
	IN UCHAR RxChar
	)

/*++

Routine Description:

    This routine, which only runs at device level, reads the
    ISR and totally processes everything that might have
    changed.

Arguments:

    Extension - The serial device extension.

Return Value:

    TRUE if RxChar still needs to be processed.

--*/

{

	BOOLEAN StillProcessRxChar=TRUE;
	UCHAR LineStatus=0;

   CYY_LOCKED_PAGED_CODE();

	if (Rdsr & CYY_LSR_OE)
		LineStatus |= SERIAL_LSR_OE;
	if (Rdsr & CYY_LSR_FE)
		LineStatus |= SERIAL_LSR_FE;
	if (Rdsr & CYY_LSR_PE)
		LineStatus |= SERIAL_LSR_PE;
	if (Rdsr & CYY_LSR_BI)
		LineStatus |= SERIAL_LSR_BI;
			
			
    if (Extension->EscapeChar) {

        CyyPutChar(
            Extension,
            Extension->EscapeChar
            );

        CyyPutChar(
            Extension,
            (UCHAR)((LineStatus & SERIAL_LSR_OE)?
             (SERIAL_LSRMST_LSR_NODATA):(SERIAL_LSRMST_LSR_DATA))
            );

        CyyPutChar(
            Extension,
            LineStatus
            );

        if (!(LineStatus & SERIAL_LSR_OE)) {
             Extension->PerfStats.ReceivedCount++;
             Extension->WmiPerfData.ReceivedCount++;
             CyyPutChar(
                Extension,
                RxChar
                );					
			StillProcessRxChar = FALSE;
        }

    }
		

    if (LineStatus & SERIAL_LSR_OE) {

        Extension->PerfStats.SerialOverrunErrorCount++;
        Extension->WmiPerfData.SerialOverrunErrorCount++;
        Extension->ErrorWord |= SERIAL_ERROR_OVERRUN;

        if (Extension->HandFlow.FlowReplace &
            SERIAL_ERROR_CHAR) {

            CyyPutChar(
                Extension,
                Extension->SpecialChars.ErrorChar
                );
        }
		StillProcessRxChar = FALSE;
    }

    if (LineStatus & SERIAL_LSR_BI) {

        Extension->ErrorWord |= SERIAL_ERROR_BREAK;

        if (Extension->HandFlow.FlowReplace &
            SERIAL_BREAK_CHAR) {

            CyyPutChar(
                Extension,
                Extension->SpecialChars.BreakChar
                );

        }

    } else {

        //
        // Framing errors only count if they
        // occur exclusive of a break being
        // received.
        //

        if (LineStatus & SERIAL_LSR_PE) {
             Extension->PerfStats.ParityErrorCount++;
             Extension->WmiPerfData.ParityErrorCount++;
             Extension->ErrorWord |= SERIAL_ERROR_PARITY;
             if (Extension->HandFlow.FlowReplace &
                 SERIAL_ERROR_CHAR) {

                CyyPutChar(
                    Extension,
                    Extension->SpecialChars.ErrorChar
                    );
				StillProcessRxChar = FALSE;					                
            }

        }

        if (LineStatus & SERIAL_LSR_FE) {

            Extension->PerfStats.FrameErrorCount++;
            Extension->WmiPerfData.FrameErrorCount++;
            Extension->ErrorWord |= SERIAL_ERROR_FRAMING;

            if (Extension->HandFlow.FlowReplace &
                SERIAL_ERROR_CHAR) {

                CyyPutChar(
                    Extension,
                    Extension->SpecialChars.ErrorChar
                    );
				StillProcessRxChar = FALSE;
            }

        }

    }


    //
    // If the application has requested it,
    // abort all the reads and writes
    // on an error.
    //

    if (Extension->HandFlow.ControlHandShake &
        SERIAL_ERROR_ABORT) {

        CyyInsertQueueDpc(
            &Extension->CommErrorDpc,
            NULL,
            NULL,
            Extension
            );

    }

    //
    // Check to see if we have a wait
    // pending on the comm error events.  If we
    // do then we schedule a dpc to satisfy
    // that wait.
    //

    if (Extension->IsrWaitMask) {

        if ((Extension->IsrWaitMask & SERIAL_EV_ERR) &&
            (LineStatus & (SERIAL_LSR_OE |
                           SERIAL_LSR_PE |
                           SERIAL_LSR_FE))) {
             Extension->HistoryMask |= SERIAL_EV_ERR;

        }

        if ((Extension->IsrWaitMask & SERIAL_EV_BREAK) &&
            (LineStatus & SERIAL_LSR_BI)) {

             Extension->HistoryMask |= SERIAL_EV_BREAK;

        }

        if (Extension->IrpMaskLocation &&
            Extension->HistoryMask) {

            *Extension->IrpMaskLocation =
             Extension->HistoryMask;
            Extension->IrpMaskLocation = NULL;
            Extension->HistoryMask = 0;

            Extension->CurrentWaitIrp->IoStatus.Information =
                sizeof(ULONG);
            CyyInsertQueueDpc(
                &Extension->CommWaitDpc,
                NULL,
                NULL,
                Extension
                );

        }

    }
	
	return StillProcessRxChar;

}

BOOLEAN
CyyTxStart(
    IN PVOID Context
    )
/*--------------------------------------------------------------------------
    CyyTxStart()
    
    Description: Enable Tx interrupt.
    
    Parameters:
    
    Exetnsion: Pointer to device extension.
    
    Return Value: None
--------------------------------------------------------------------------*/
{
    PCYY_DEVICE_EXTENSION Extension = Context;
    PUCHAR chip = Extension->Cd1400;
    ULONG bus = Extension->IsPci;
    UCHAR srer;

    if (Extension->PowerState == PowerDeviceD0) {
        CD1400_WRITE(chip,bus,CAR,Extension->CdChannel & 0x03);
        srer = CD1400_READ (chip,bus,SRER);
        CD1400_WRITE(chip,bus,SRER,srer | SRER_TXRDY);
    }
    return(FALSE);    
}


BOOLEAN
CyySendXon(
    IN PVOID Context
    )
/*--------------------------------------------------------------------------
    CyySendXon()
    
    Description: Send a Xon.
    
    Parameters:
    
    Exetension: Pointer to device extension.
    
    Return Value: Always FALSE.
--------------------------------------------------------------------------*/
{
   PCYY_DEVICE_EXTENSION Extension = Context;
   PUCHAR chip = Extension->Cd1400;
   ULONG bus = Extension->IsPci;    
    
   if(!(Extension->TXHolding & ~CYY_TX_XOFF)) {
   	if ((Extension->HandFlow.FlowReplace & SERIAL_RTS_MASK) ==
                                 SERIAL_TRANSMIT_TOGGLE) {

	      CyySetRTS(Extension);

         Extension->PerfStats.TransmittedCount++;
         Extension->WmiPerfData.TransmittedCount++;
	      CD1400_WRITE(chip,bus,CAR,Extension->CdChannel & 0x03);
	      CyyCDCmd(Extension,CCR_SENDSC_SCHR1);
	    
	      CyyInsertQueueDpc(&Extension->StartTimerLowerRTSDpc,NULL,
			       NULL,Extension)?Extension->CountOfTryingToLowerRTS++:0;
   	} else {
          Extension->PerfStats.TransmittedCount++;
          Extension->WmiPerfData.TransmittedCount++;
	       CD1400_WRITE(chip,bus,CAR,Extension->CdChannel & 0x03);
   	    CyyCDCmd(Extension,CCR_SENDSC_SCHR1);
	   }

   	// If we send an xon, by definition we can't be holding by Xoff.

   	Extension->TXHolding &= ~CYY_TX_XOFF;
	   Extension->RXHolding &= ~CYY_RX_XOFF;
   }
   return(FALSE);    
}



BOOLEAN
CyySendXoff(
    IN PVOID Context
    )
/*--------------------------------------------------------------------------
    CyySendXoff()
    
    Description: Send a Xoff.
    
    Parameters:
    
    Extension: Pointer to device extension.
    
    Return Value: Always FALSE.
--------------------------------------------------------------------------*/
{
   PCYY_DEVICE_EXTENSION Extension = Context;
   PUCHAR chip = Extension->Cd1400;
   ULONG bus = Extension->IsPci;    
    
   if(!Extension->TXHolding) {
      if ((Extension->HandFlow.FlowReplace & SERIAL_RTS_MASK) ==
                                 SERIAL_TRANSMIT_TOGGLE) {

         CyySetRTS(Extension);
	    
         Extension->PerfStats.TransmittedCount++;
         Extension->WmiPerfData.TransmittedCount++;
         CD1400_WRITE(chip,bus,CAR,Extension->CdChannel & 0x03);
         CyyCDCmd(Extension,CCR_SENDSC_SCHR2);
	    
         CyyInsertQueueDpc(&Extension->StartTimerLowerRTSDpc,NULL,
                          NULL,Extension)?Extension->CountOfTryingToLowerRTS++:0;
      } else {
         Extension->PerfStats.TransmittedCount++;
         Extension->WmiPerfData.TransmittedCount++;
         CD1400_WRITE(chip,bus,CAR,Extension->CdChannel & 0x03);
         CyyCDCmd(Extension,CCR_SENDSC_SCHR2);
      }

      // no xoff is sent if the transmission is already held up.
      // If xoff continue mode is set, we don't actually stop sending

      if (!(Extension->HandFlow.FlowReplace & SERIAL_XOFF_CONTINUE)) {
         Extension->TXHolding |= CYY_TX_XOFF;

         if ((Extension->HandFlow.FlowReplace & SERIAL_RTS_MASK) ==
                                     SERIAL_TRANSMIT_TOGGLE) {

            CyyInsertQueueDpc(&Extension->StartTimerLowerRTSDpc,NULL,
                  NULL,Extension)?Extension->CountOfTryingToLowerRTS++:0;
         }
      }
   }
   return(FALSE);    
}

=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\y\cyyport\cyylog.h ===
/*--------------------------------------------------------------------------
*
*   Copyright (C) Cyclades Corporation, 1996-2000.
*   All rights reserved.
*
*   Cyclom-Y Port Driver
*	
*   This file:      cyylog.mc
*
*   Description:    Messages that goes to the eventlog.
*
*   Notes:          This code supports Windows 2000 and i386 processor.
*
*   Complies with Cyclades SW Coding Standard rev 1.3.
*
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*   Change History
*
*--------------------------------------------------------------------------
*
*
*--------------------------------------------------------------------------
*/

#ifndef _CYYLOG_
#define _CYYLOG_

//
//  Values are 32 bit values layed out as follows:
//
//   3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1
//   1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
//  +---+-+-+-----------------------+-------------------------------+
//  |Sev|C|R|     Facility          |               Code            |
//  +---+-+-+-----------------------+-------------------------------+
//
//  where
//
//      Sev - is the severity code
//
//          00 - Success
//          01 - Informational
//          10 - Warning
//          11 - Error
//
//      C - is the Customer code flag
//
//      R - is a reserved bit
//
//      Facility - is the facility code
//
//      Code - is the facility's status code
//
//
// Define the facility codes
//
#define FACILITY_SERIAL_ERROR_CODE       0x6
#define FACILITY_RPC_STUBS               0x3
#define FACILITY_RPC_RUNTIME             0x2
#define FACILITY_IO_ERROR_CODE           0x4


//
// Define the severity codes
//
#define STATUS_SEVERITY_WARNING          0x2
#define STATUS_SEVERITY_SUCCESS          0x0
#define STATUS_SEVERITY_INFORMATIONAL    0x1
#define STATUS_SEVERITY_ERROR            0x3


//
// MessageId: CYY_CCR_NOT_ZERO
//
// MessageText:
//
//  CCR not zero.
//
#define CYY_CCR_NOT_ZERO                 ((NTSTATUS)0x80041000L)

//
// MessageId: CYY_UNABLE_TO_GET_BUS_TYPE
//
// MessageText:
//
//  Unable to know if the Cyclom-Y card is ISA or PCI.
//
#define CYY_UNABLE_TO_GET_BUS_TYPE       ((NTSTATUS)0xC0041001L)

//
// MessageId: CYY_UNABLE_TO_GET_BUS_NUMBER
//
// MessageText:
//
//  Unable to get Cyclom-Y card PCI slot information.
//
#define CYY_UNABLE_TO_GET_BUS_NUMBER     ((NTSTATUS)0xC0041002L)

//
// MessageId: CYY_UNABLE_TO_GET_HW_ID
//
// MessageText:
//
//  Unable to get Hardware ID information.
//
#define CYY_UNABLE_TO_GET_HW_ID          ((NTSTATUS)0xC0041003L)

//
// MessageId: CYY_NO_SYMLINK_CREATED
//
// MessageText:
//
//  Unable to create the symbolic link for %2.
//
#define CYY_NO_SYMLINK_CREATED           ((NTSTATUS)0x80041004L)

//
// MessageId: CYY_NO_DEVICE_MAP_CREATED
//
// MessageText:
//
//  Unable to create the device map entry for %2.
//
#define CYY_NO_DEVICE_MAP_CREATED        ((NTSTATUS)0x80041005L)

//
// MessageId: CYY_NO_DEVICE_MAP_DELETED
//
// MessageText:
//
//  Unable to delete the device map entry for %2.
//
#define CYY_NO_DEVICE_MAP_DELETED        ((NTSTATUS)0x80041006L)

//
// MessageId: CYY_UNREPORTED_IRQL_CONFLICT
//
// MessageText:
//
//  Another driver on the system, which did not report its resources, has already claimed the interrupt used by %2.
//
#define CYY_UNREPORTED_IRQL_CONFLICT     ((NTSTATUS)0xC0041007L)

//
// MessageId: CYY_INSUFFICIENT_RESOURCES
//
// MessageText:
//
//  Not enough resources were available for the driver.
//
#define CYY_INSUFFICIENT_RESOURCES       ((NTSTATUS)0xC0041008L)

//
// MessageId: CYY_BOARD_NOT_MAPPED
//
// MessageText:
//
//  The Board Memory for %2 could not be translated to something the memory management system could understand.
//
#define CYY_BOARD_NOT_MAPPED             ((NTSTATUS)0xC004100AL)

//
// MessageId: CYY_RUNTIME_NOT_MAPPED
//
// MessageText:
//
//  The Runtime Registers for %2 could not be translated to something the memory management system could understand.
//
#define CYY_RUNTIME_NOT_MAPPED           ((NTSTATUS)0xC004100BL)

//
// MessageId: CYY_INVALID_RUNTIME_REGISTERS
//
// MessageText:
//
//  Invalid Runtime Registers base address for %2.
//
#define CYY_INVALID_RUNTIME_REGISTERS    ((NTSTATUS)0xC0041010L)

//
// MessageId: CYY_INVALID_BOARD_MEMORY
//
// MessageText:
//
//  Invalid Board Memory address for %2.
//
#define CYY_INVALID_BOARD_MEMORY         ((NTSTATUS)0xC0041011L)

//
// MessageId: CYY_INVALID_INTERRUPT
//
// MessageText:
//
//  Invalid Interrupt Vector for %2.
//
#define CYY_INVALID_INTERRUPT            ((NTSTATUS)0xC0041012L)

//
// MessageId: CYY_PORT_INDEX_TOO_HIGH
//
// MessageText:
//
//  Port Number for %2 is larger than the maximum number of ports in a cyclom-y card.
//
#define CYY_PORT_INDEX_TOO_HIGH          ((NTSTATUS)0xC0041015L)

//
// MessageId: CYY_UNKNOWN_BUS
//
// MessageText:
//
//  The bus type for %2 is not recognizable.
//
#define CYY_UNKNOWN_BUS                  ((NTSTATUS)0xC0041016L)

//
// MessageId: CYY_BUS_NOT_PRESENT
//
// MessageText:
//
//  The bus type for %2 is not available on this computer.
//
#define CYY_BUS_NOT_PRESENT              ((NTSTATUS)0xC0041017L)

//
// MessageId: CYY_RUNTIME_MEMORY_TOO_HIGH
//
// MessageText:
//
//  The Runtime Registers for %2 is way too high in physical memory.
//
#define CYY_RUNTIME_MEMORY_TOO_HIGH      ((NTSTATUS)0xC004101AL)

//
// MessageId: CYY_BOARD_MEMORY_TOO_HIGH
//
// MessageText:
//
//  The Board Memory for %2 is way too high in physical memory.
//
#define CYY_BOARD_MEMORY_TOO_HIGH        ((NTSTATUS)0xC004101BL)

//
// MessageId: CYY_BOTH_MEMORY_CONFLICT
//
// MessageText:
//
//  The Runtime Registers for %2 overlaps the Board Memory for the device.
//
#define CYY_BOTH_MEMORY_CONFLICT         ((NTSTATUS)0xC004101CL)

//
// MessageId: CYY_MULTI_INTERRUPT_CONFLICT
//
// MessageText:
//
//  Two ports, %2 and %3, on a single cyclom-y card can't have two different interrupts.
//
#define CYY_MULTI_INTERRUPT_CONFLICT     ((NTSTATUS)0xC0041021L)

//
// MessageId: CYY_MULTI_RUNTIME_CONFLICT
//
// MessageText:
//
//  Two ports, %2 and %3, on a single cyclom-y card can't have two different Runtime Registers memory range.
//
#define CYY_MULTI_RUNTIME_CONFLICT       ((NTSTATUS)0xC0041022L)

//
// MessageId: CYY_HARDWARE_FAILURE
//
// MessageText:
//
//  The cyyport driver detected a hardware failure on device %2 and will disable this device.
//
#define CYY_HARDWARE_FAILURE             ((NTSTATUS)0xC004102DL)

//
// MessageId: CYY_GFRCR_FAILURE
//
// MessageText:
//
//  CD1400 not present or failure to read GFRCR register for %2.
//
#define CYY_GFRCR_FAILURE                ((NTSTATUS)0xC0041030L)

//
// MessageId: CYY_CCR_FAILURE
//
// MessageText:
//
//  Failure to read CCR register in the CD1400 for %2.
//
#define CYY_CCR_FAILURE                  ((NTSTATUS)0xC0041031L)

//
// MessageId: CYY_BAD_CD1400_REVISION
//
// MessageText:
//
//  Invalid CD1400 revision number for %2.
//
#define CYY_BAD_CD1400_REVISION          ((NTSTATUS)0xC0041032L)

//
// MessageId: CYY_DEVICE_CREATION_FAILURE
//
// MessageText:
//
//  Failure to create new device object.
//
#define CYY_DEVICE_CREATION_FAILURE      ((NTSTATUS)0xC0041033L)

//
// MessageId: CYY_NO_PHYSICAL_DEVICE_OBJECT
//
// MessageText:
//
//  No physical device object.
//
#define CYY_NO_PHYSICAL_DEVICE_OBJECT    ((NTSTATUS)0xC0041034L)

//
// MessageId: CYY_BAD_HW_ID
//
// MessageText:
//
//  Invalid Hardware ID.
//
#define CYY_BAD_HW_ID                    ((NTSTATUS)0xC0041035L)

//
// MessageId: CYY_LOWER_DRIVERS_FAILED_START
//
// MessageText:
//
//  Lower drivers failed to start.
//
#define CYY_LOWER_DRIVERS_FAILED_START   ((NTSTATUS)0xC0041036L)


#endif /* _CYYLOG_ */
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\y\cyyport\cyymodem.c ===
/*--------------------------------------------------------------------------
*	
*   Copyright (C) Cyclades Corporation, 1996-2001.
*   All rights reserved.
*	
*   Cyclom-Y Port Driver
*	
*   This file :     cyymodem.c
*	
*   Description:    This module contains the code related to modem control 
*                   in the Cyclom-Y Port driver.
*
*   Notes:          This code supports Windows 2000 and Windows XP,
*                   x86 and IA64 processors.
*	
*   Complies with Cyclades SW Coding Standard rev 1.3.
*	
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*   Change History
*
*--------------------------------------------------------------------------
*
*
*--------------------------------------------------------------------------
*/


#include "precomp.h"

BOOLEAN
CyyDecrementRTSCounter(
    IN PVOID Context
    );

#ifdef ALLOC_PRAGMA
#if 0
#pragma alloc_text(PAGESER,CyyHandleReducedIntBuffer)
#pragma alloc_text(PAGESER,CyyProdXonXoff)
#pragma alloc_text(PAGESER,CyyHandleModemUpdate)
#pragma alloc_text(PAGESER,CyyHandleModemUpdateForModem)
#pragma alloc_text(PAGESER,CyyPerhapsLowerRTS)
#pragma alloc_text(PAGESER,CyyStartTimerLowerRTS)
#pragma alloc_text(PAGESER,CyyInvokePerhapsLowerRTS)
#pragma alloc_text(PAGESER,CyySetDTR)
//#pragma alloc_text(PAGESER,CyyClrDTR)
#pragma alloc_text(PAGESER,CyySetRTS)
//#pragma alloc_text(PAGESER,CyyClrRTS)
#pragma alloc_text(PAGESER,CyyGetDTRRTS)
//#pragma alloc_text(PAGESER,CyySetupNewHandFlow)
#pragma alloc_text(PAGESER,CyySetHandFlow)
#pragma alloc_text(PAGESER,CyyTurnOnBreak)
#pragma alloc_text(PAGESER,CyyTurnOffBreak)
#pragma alloc_text(PAGESER,CyyPretendXoff)
#pragma alloc_text(PAGESER,CyyPretendXon)
#pragma alloc_text(PAGESER,CyyDecrementRTSCounter)
#endif
#endif

BOOLEAN
CyySetDTR(
    IN PVOID Context
    )
/*--------------------------------------------------------------------------
    CyySetDTR()
    
    Routine Description: This routine which is only called at interrupt
    level is used to set the DTR in the modem control register.

    Arguments:

    Context - Really a pointer to the device extension.

    Return Value: This routine always returns FALSE.
--------------------------------------------------------------------------*/
{
    PCYY_DEVICE_EXTENSION Extension = Context;
    PUCHAR chip = Extension->Cd1400;
    ULONG bus = Extension->IsPci;

    CyyDbgPrintEx(CYYFLOW, "Setting DTR for Port%d Pci%d\n", 
                  Extension->PortIndex+1,Extension->PciSlot);

    CD1400_WRITE(chip,bus, CAR, Extension->CdChannel & 0x03);
    CD1400_WRITE(chip,bus, Extension->MSVR_DTR, Extension->DTRset);

    return FALSE;
}

BOOLEAN
CyyClrDTR(
    IN PVOID Context
    )
/*--------------------------------------------------------------------------
    CyyClrDTR()
    
    Routine Description: Clear DTR.

    Arguments:

    Context - Really a pointer to the device extension.

    Return Value: This routine always returns FALSE.
--------------------------------------------------------------------------*/
{
    PCYY_DEVICE_EXTENSION Extension = Context;

    PUCHAR chip = Extension->Cd1400;
    ULONG bus = Extension->IsPci;

    CyyDbgPrintEx(CYYFLOW, "Clearing DTR for Port%d Pci%d\n", 
                  Extension->PortIndex+1,Extension->PciSlot);

    CD1400_WRITE(chip,bus, CAR, Extension->CdChannel & 0x03);
    CD1400_WRITE(chip,bus, Extension->MSVR_DTR, 0x00);

    return FALSE;
}

BOOLEAN
CyySetRTS(
    IN PVOID Context
    )
/*--------------------------------------------------------------------------
    CyySetRTS()
    
    Routine Description: Set RTS.

    Arguments:

    Context - Really a pointer to the device extension.

    Return Value: This routine always returns FALSE.
--------------------------------------------------------------------------*/
{
   PCYY_DEVICE_EXTENSION Extension = Context;
   PUCHAR chip = Extension->Cd1400;
   ULONG bus = Extension->IsPci;

   CyyDbgPrintEx(CYYFLOW, "Setting RTS for Port%d Pci%d\n", 
                           Extension->PortIndex+1,Extension->PciSlot);

   CD1400_WRITE(chip,bus, CAR, Extension->CdChannel & 0x03);
   CD1400_WRITE(chip,bus, Extension->MSVR_RTS, Extension->RTSset);

   return FALSE;
}

BOOLEAN
CyyClrRTS(
    IN PVOID Context
    )
/*--------------------------------------------------------------------------
    CyyClrRTS()
    
    Routine Description: Clears RTS. 

    Arguments:

    Context - Really a pointer to the device extension.

    Return Value: This routine always returns FALSE.
--------------------------------------------------------------------------*/
{
   PCYY_DEVICE_EXTENSION Extension = Context;
   PUCHAR chip = Extension->Cd1400;
   ULONG bus = Extension->IsPci;

   CyyDbgPrintEx(CYYFLOW, "Clearing RTS for Port%d Pci%d\n", 
                           Extension->PortIndex+1,Extension->PciSlot);

   CD1400_WRITE(chip,bus, CAR, Extension->CdChannel & 0x03);
   CD1400_WRITE(chip,bus, Extension->MSVR_RTS, 0x00);

   return FALSE;
}

BOOLEAN
CyyGetDTRRTS(
    IN PVOID Context
    )
/*--------------------------------------------------------------------------
    CyyGetDTRRTS()
    
    Routine Description: Get DTR and RTS states.

    Arguments:

    Context - Pointer to a structure that contains a pointer to 
    	      the device extension and a pointer to a ulong.

    Return Value: This routine always returns FALSE.
--------------------------------------------------------------------------*/
{

   UCHAR dtr,rts;
   PCYY_DEVICE_EXTENSION Extension = ((PCYY_IOCTL_SYNC)Context)->Extension;
   PULONG Result = (PULONG)(((PCYY_IOCTL_SYNC)Context)->Data);

   PUCHAR chip = Extension->Cd1400;
   ULONG bus = Extension->IsPci;
   ULONG ModemControl=0;
   
   CD1400_WRITE(chip,bus, CAR, Extension->CdChannel & 0x03);
   dtr = CD1400_READ(chip,bus,Extension->MSVR_DTR);
   rts = CD1400_READ(chip,bus,Extension->MSVR_RTS);

   if (dtr & Extension->DTRset) {
      ModemControl |= SERIAL_DTR_STATE;
   }
   if (rts & Extension->RTSset) {
      ModemControl |= SERIAL_RTS_STATE;
   }
   *Result = ModemControl;

   return FALSE;
}

BOOLEAN
CyySetupNewHandFlow(
    IN PCYY_DEVICE_EXTENSION Extension,
    IN PSERIAL_HANDFLOW NewHandFlow
    )
/*--------------------------------------------------------------------------
    CyySetupNewHandFlow()
    
    Routine Description: This routine adjusts the flow control based on new
    control flow.

    Arguments:

    Extension - A pointer to the serial device extension.

    NewHandFlow - A pointer to a serial handflow structure.

    Return Value: This routine always returns FALSE.
--------------------------------------------------------------------------*/
{
    SERIAL_HANDFLOW New = *NewHandFlow;

    // --- DTR signal
    
    if((!Extension->DeviceIsOpened) ||
       ((Extension->HandFlow.ControlHandShake & SERIAL_DTR_MASK) !=
         (New.ControlHandShake & SERIAL_DTR_MASK))) {

        // It is an open or DTR has changed.

        CyyDbgPrintEx(CYYFLOW, "Processing DTR flow for Port%d Pci%d\n",
                      Extension->PortIndex+1,Extension->PciSlot);

        if (New.ControlHandShake & SERIAL_DTR_MASK) { // set DTR.
	    
            if((New.ControlHandShake&SERIAL_DTR_MASK) == SERIAL_DTR_HANDSHAKE) {
		    	// but we are doing DTR handshake.
                if ((Extension->BufferSize - New.XoffLimit) >
                    Extension->CharsInInterruptBuffer) {

                    if (Extension->RXHolding & CYY_RX_DTR) {
				    	// DTR is low due to flow control
//#ifdef CHANGED_TO_DEBUG_RTPR
//Original code
                        if(Extension->CharsInInterruptBuffer >
//#endif						
//Changed code
//                      if(Extension->CharsInInterruptBuffer <
                            (ULONG)New.XonLimit) {

                            CyyDbgPrintEx(CYYFLOW, "Removing DTR block on "
                                          "reception for Port%d Pci%d\n",
                                          Extension->PortIndex+1,Extension->PciSlot);

                            Extension->RXHolding &= ~CYY_RX_DTR;
                            CyySetDTR(Extension);
                        }
                    } else {
                        CyySetDTR(Extension);
                    }
                } else {
		   			  // DTR should go low because of handshake

                    CyyDbgPrintEx(CYYFLOW, "Setting DTR block on reception "
                                  "for Port%d Pci%d\n", 
                                  Extension->PortIndex+1,Extension->PciSlot);
                    Extension->RXHolding |= CYY_RX_DTR;
                    CyyClrDTR(Extension);
                }
            } else {
				    // no DTR handshake, check if it was active before.
                if (Extension->RXHolding & CYY_RX_DTR) {
                    CyyDbgPrintEx(CYYFLOW, "Removing dtr block of reception "
                                        "for Port%d Pci%d\n", 
                                        Extension->PortIndex+1,Extension->PciSlot);
                    Extension->RXHolding &= ~CYY_RX_DTR;
                }
                CyySetDTR(Extension);
            }
        } else {	// reset DTR
            if (Extension->RXHolding & CYY_RX_DTR) {
               CyyDbgPrintEx(CYYFLOW, "removing dtr block of reception for"
                                      " Port%d Pci%d\n", 
                                      Extension->PortIndex+1,Extension->PciSlot);
               Extension->RXHolding &= ~CYY_RX_DTR;
            }
            CyyClrDTR(Extension);
        }
    }
    
    // --- RTS signal

    if ((!Extension->DeviceIsOpened) ||
        ((Extension->HandFlow.FlowReplace & SERIAL_RTS_MASK) !=
         (New.FlowReplace & SERIAL_RTS_MASK))) {

        // It is an open or RTS has changed.

        CyyDbgPrintEx(CYYFLOW, "Processing RTS flow\n",
                      Extension->PortIndex+1,Extension->PciSlot);

        if((New.FlowReplace&SERIAL_RTS_MASK) == SERIAL_RTS_HANDSHAKE) {//set RTS

            if ((Extension->BufferSize - New.XoffLimit) >
                Extension->CharsInInterruptBuffer) {

                // However if we are already holding we don't want
                // to turn it back on unless we exceed the Xon
                // limit.

                if (Extension->RXHolding & CYY_RX_RTS) {
                    // We can assume that its RTS line is already low.
//#ifdef CHANGED_TO_DEBUG_RTPR
//Original code
                    if (Extension->CharsInInterruptBuffer >
//#endif					
//Changed code
//                  if (Extension->CharsInInterruptBuffer <
                        (ULONG)New.XonLimit) {

                        CyyDbgPrintEx(CYYFLOW, "Removing rts block of "
                                      "reception for Port%d Pci%d\n",
                                      Extension->PortIndex+1,Extension->PciSlot);
                        Extension->RXHolding &= ~CYY_RX_RTS;
                        CyySetRTS(Extension);
                    }
                } else {
                    CyySetRTS(Extension);
                }

            } else {
                CyyDbgPrintEx(CYYFLOW, "Setting rts block of reception for "
                              "Port%d Pci%d\n", 
                              Extension->PortIndex+1,Extension->PciSlot);
                Extension->RXHolding |= CYY_RX_RTS;
                CyyClrRTS(Extension);
            }
        } else if ((New.FlowReplace & SERIAL_RTS_MASK) == SERIAL_RTS_CONTROL) {

            // Note that if we aren't currently doing rts flow control then
            // we MIGHT have been.  So even if we aren't currently doing
            // RTS flow control, we should still check if RX is holding
            // because of RTS.  If it is, then we should clear the holding
            // of this bit.

            if (Extension->RXHolding & CYY_RX_RTS) {

                CyyDbgPrintEx(CYYFLOW, "Clearing rts block of reception for "
                              "Port%d Pci%d\n", 
                              Extension->PortIndex+1,Extension->PciSlot);
                Extension->RXHolding &= ~CYY_RX_RTS;
            }
            CyySetRTS(Extension);
        } else if((New.FlowReplace & SERIAL_RTS_MASK) == SERIAL_TRANSMIT_TOGGLE) {

            // We first need to check whether reception is being held
            // up because of previous RTS flow control.  If it is then
            // we should clear that reason in the RXHolding mask.

            if (Extension->RXHolding & CYY_RX_RTS) {

                CyyDbgPrintEx(CYYFLOW, "TOGGLE Clearing rts block of "
                              "reception for Port%d Pci%d\n", 
                              Extension->PortIndex+1,Extension->PciSlot);
                Extension->RXHolding &= ~CYY_RX_RTS;
            }

            // We have to place the rts value into the Extension
            // now so that the code that tests whether the
            // rts line should be lowered will find that we
            // are "still" doing transmit toggling.  The code
            // for lowering can be invoked later by a timer so
            // it has to test whether it still needs to do its
            // work.

            Extension->HandFlow.FlowReplace &= ~SERIAL_RTS_MASK;
            Extension->HandFlow.FlowReplace |= SERIAL_TRANSMIT_TOGGLE;

            // The order of the tests is very important below.
            // If there is a break then we should turn on the RTS.
            // If there isn't a break but there are characters in
            // the hardware, then turn on the RTS.
            // If there are writes pending that aren't being held
            // up, then turn on the RTS.

            if ((!Extension->HoldingEmpty) ||
                (Extension->CurrentWriteIrp || Extension->TransmitImmediate ||
                 (!IsListEmpty(&Extension->WriteQueue)) &&
                 (!Extension->TXHolding))) {
		
                CyySetRTS(Extension);
            } else {
                // This routine will check to see if it is time
                // to lower the RTS because of transmit toggle
                // being on.  If it is ok to lower it, it will,
                // if it isn't ok, it will schedule things so
                // that it will get lowered later.

                Extension->CountOfTryingToLowerRTS++;
                CyyPerhapsLowerRTS(Extension);

            }
        } else {
            // The end result here will be that RTS is cleared.
            //
            // We first need to check whether reception is being held
            // up because of previous RTS flow control.  If it is then
            // we should clear that reason in the RXHolding mask.

            if (Extension->RXHolding & CYY_RX_RTS) {

                CyyDbgPrintEx(CYYFLOW, "Clearing rts block of reception for"
                              " Port%d Pci%d\n", 
                              Extension->PortIndex+1,Extension->PciSlot);
                Extension->RXHolding &= ~CYY_RX_RTS;
            }
            CyyClrRTS(Extension);
        }
    }
    
    // We now take care of automatic receive flow control.
    // We only do work if things have changed.

    if ((!Extension->DeviceIsOpened) ||
        ((Extension->HandFlow.FlowReplace & SERIAL_AUTO_RECEIVE) !=
         (New.FlowReplace & SERIAL_AUTO_RECEIVE))) {

        if (New.FlowReplace & SERIAL_AUTO_RECEIVE) {

            // We wouldn't be here if it had been on before.
            //
            // We should check to see whether we exceed the turn
            // off limits.
            //
            // Note that since we are following the OS/2 flow
            // control rules we will never send an xon if
            // when enabling xon/xoff flow control we discover that
            // we could receive characters but we are held up do
            // to a previous Xoff.

            if ((Extension->BufferSize - New.XoffLimit) <=
                Extension->CharsInInterruptBuffer) {
                // Cause the Xoff to be sent.
		
                Extension->RXHolding |= CYY_RX_XOFF;
                CyyProdXonXoff(Extension,FALSE);
            }
        } else {
            // The app has disabled automatic receive flow control.
            //
            // If transmission was being held up because of
            // an automatic receive Xoff, then we should
            // cause an Xon to be sent.

            if (Extension->RXHolding & CYY_RX_XOFF) {
                Extension->RXHolding &= ~CYY_RX_XOFF;

                // Cause the Xon to be sent.
                CyyProdXonXoff(Extension,TRUE);
            }
        }
    }

    // We now take care of automatic transmit flow control.
    // We only do work if things have changed.

    if ((!Extension->DeviceIsOpened) ||
        ((Extension->HandFlow.FlowReplace & SERIAL_AUTO_TRANSMIT) !=
         (New.FlowReplace & SERIAL_AUTO_TRANSMIT))) {

        if (New.FlowReplace & SERIAL_AUTO_TRANSMIT) {

            // We wouldn't be here if it had been on before.
            //
            // There is some belief that if autotransmit
            // was just enabled, I should go look in what we
            // already received, and if we find the xoff character
            // then we should stop transmitting.  I think this
            // is an application bug.  For now we just care about
            // what we see in the future.

            ;
        } else {
            // The app has disabled automatic transmit flow control.
            //
            // If transmission was being held up because of
            // an automatic transmit Xoff, then we should
            // cause an Xon to be sent.

            if (Extension->TXHolding & CYY_TX_XOFF) {
                Extension->TXHolding &= ~CYY_TX_XOFF;

                // Cause the Xon to be sent.
                CyyProdXonXoff(Extension,TRUE);
            }
        }
    }

    // At this point we can simply make sure that entire
    // handflow structure in the extension is updated.

    Extension->HandFlow = New;
    return FALSE;
}

BOOLEAN
CyySetHandFlow(
    IN PVOID Context
    )
/*--------------------------------------------------------------------------
    CyySetHandFlow()
    
    Routine Description: This routine is used to set the handshake and
    control flow in the device extension.

    Arguments:

    Context - Pointer to a structure that contains a pointer to the device
    	      extension and a pointer to a handflow structure.

    Return Value: This routine always returns FALSE.
--------------------------------------------------------------------------*/
{
    PCYY_IOCTL_SYNC S = Context;
    PCYY_DEVICE_EXTENSION Extension = S->Extension;
    PSERIAL_HANDFLOW HandFlow = S->Data;

    CyySetupNewHandFlow(Extension,HandFlow);
    CyyHandleModemUpdate(Extension,FALSE);
    return FALSE;
}

BOOLEAN
CyyTurnOnBreak(
    IN PVOID Context
    )
/*--------------------------------------------------------------------------
    CyyTurnOnBreak()
    
    Routine Description: Send a Break.

    Arguments:

    Context - Really a pointer to the device extension.

    Return Value: This routine always returns FALSE.
--------------------------------------------------------------------------*/
{

    PCYY_DEVICE_EXTENSION Extension = Context;
    PUCHAR chip = Extension->Cd1400;
    ULONG bus = Extension->IsPci;
    UCHAR cor2;

    // Enable ETC mode
    CD1400_WRITE(chip,bus, CAR, Extension->CdChannel);
    cor2 = CD1400_READ(chip,bus,COR2);
    CD1400_WRITE(chip,bus, COR2,cor2 | EMBED_TX_ENABLE); // enable ETC bit
    CyyCDCmd(Extension,CCR_CORCHG_COR2); // COR2 changed

    Extension->BreakCmd = SEND_BREAK;

    if (Extension->HoldingEmpty) {
        CyyTxStart(Extension);
    }

    return FALSE;
}

BOOLEAN
CyyTurnOffBreak(
    IN PVOID Context
    )
/*--------------------------------------------------------------------------
    CyyTurnOffBreak()
    
    Routine Description: Do nothing.

    Arguments:

    Context - Really a pointer to the device extension.

    Return Value: This routine always returns FALSE.
--------------------------------------------------------------------------*/
{

    PCYY_DEVICE_EXTENSION Extension = Context;
    PUCHAR chip = Extension->Cd1400;
    ULONG bus = Extension->IsPci;
    UCHAR cor2;

    if (Extension->TXHolding & CYY_TX_BREAK) {
	
        // Enable ETC mode
        CD1400_WRITE(chip,bus, CAR, Extension->CdChannel);
        cor2 = CD1400_READ(chip,bus,COR2);
        CD1400_WRITE(chip,bus, COR2,cor2 | EMBED_TX_ENABLE); // enable ETC bit
        CyyCDCmd(Extension,CCR_CORCHG_COR2);	// COR2 changed

        Extension->BreakCmd = STOP_BREAK;

        if (Extension->HoldingEmpty) {
            CyyTxStart(Extension);
        }

    }
    return FALSE;
}

BOOLEAN
CyyPretendXoff(
    IN PVOID Context
    )
/*--------------------------------------------------------------------------
    CyyPretendXoff()
    
    Routine Description: This routine is used to process the Ioctl that
    request the driver to act as if an Xoff was received.  Even if the
    driver does not have automatic Xoff/Xon flowcontrol - This still will
    stop the transmission.  This is the OS/2 behavior and is not well
    specified for Windows.  Therefore we adopt the OS/2 behavior.

    Note: If the driver does not have automatic Xoff/Xon enabled
    then the only way to restart transmission is for the
    application to request we "act" as if we saw the xon.

    Arguments:

    Context - pointer to the device extension.

    Return Value: This routine always returns FALSE.
--------------------------------------------------------------------------*/
{
    PCYY_DEVICE_EXTENSION Extension = Context;

    Extension->TXHolding |= CYY_TX_XOFF;

    if((Extension->HandFlow.FlowReplace & SERIAL_RTS_MASK) ==
      						  SERIAL_TRANSMIT_TOGGLE) {
        CyyInsertQueueDpc(
            &Extension->StartTimerLowerRTSDpc,
            NULL,
            NULL,
            Extension
            )?Extension->CountOfTryingToLowerRTS++:0;
    }
    return FALSE;
}

BOOLEAN
CyyPretendXon(
    IN PVOID Context
    )
/*--------------------------------------------------------------------------
    CyyPretendXon()
    Routine Description: This routine is used to process the Ioctl that
    request the driver to act as if an Xon was received.

    Note: If the driver does not have automatic Xoff/Xon enabled
    then the only way to restart transmission is for the
    application to request we "act" as if we saw the xon.

    Arguments:

    Context - pointer to the device extension.

    Return Value:

    This routine always returns FALSE.
--------------------------------------------------------------------------*/
{
    PCYY_DEVICE_EXTENSION Extension = Context;

    if (Extension->TXHolding) {
        // We actually have a good reason for testing if transmission
        // is holding instead of blindly clearing the bit.
        //
        // If transmission actually was holding and the result of
        // clearing the bit is that we should restart transmission
        // then we will poke the interrupt enable bit, which will
        // cause an actual interrupt and transmission will then
        // restart on its own.
        //
        // If transmission wasn't holding and we poked the bit
        // then we would interrupt before a character actually made
        // it out and we could end up over writing a character in
        // the transmission hardware.

        Extension->TXHolding &= ~CYY_TX_XOFF;

        if (!Extension->TXHolding &&
            (Extension->TransmitImmediate ||
             Extension->WriteLength) &&
             Extension->HoldingEmpty) {

	    CyyTxStart(Extension);
        }
    }
    return FALSE;
}

VOID
CyyHandleReducedIntBuffer(
    IN PCYY_DEVICE_EXTENSION Extension
    )
/*--------------------------------------------------------------------------
    CyyHandleReducedIntBuffer()
    
    Routine Description: This routine is called to handle a reduction in
    the number of characters in the interrupt (typeahead) buffer.  It
    will check the current output flow control and re-enable transmission
    as needed.

    NOTE: This routine assumes that it is working at interrupt level.

    Arguments:

    Extension - A pointer to the device extension.

    Return Value: None.
--------------------------------------------------------------------------*/
{
    // If we are doing receive side flow control and we are
    // currently "holding" then because we've emptied out
    // some characters from the interrupt buffer we need to
    // see if we can "re-enable" reception.

    if (Extension->RXHolding) {
        if (Extension->CharsInInterruptBuffer <=
		            (ULONG)Extension->HandFlow.XonLimit) {
            if (Extension->RXHolding & CYY_RX_DTR) {
                Extension->RXHolding &= ~CYY_RX_DTR;
                CyySetDTR(Extension);
            }

            if (Extension->RXHolding & CYY_RX_RTS) {
                Extension->RXHolding &= ~CYY_RX_RTS;
                CyySetRTS(Extension);
            }

            if (Extension->RXHolding & CYY_RX_XOFF) {
                CyyProdXonXoff(Extension,TRUE );
            }
        }
    }
}

VOID
CyyProdXonXoff(
    IN PCYY_DEVICE_EXTENSION Extension,
    IN BOOLEAN SendXon
    )
/*--------------------------------------------------------------------------
    CyyProdXonXoff()
    
    Routine Description: This routine will set up the SendXxxxChar
    variables if necessary and determine if we are going to be interrupting
    because of current transmission state.  It will cause an
    interrupt to occur if neccessary, to send the xon/xoff char.
    NOTE: This routine assumes that it is called at interrupt level.

    Arguments:

    Extension - A pointer to the serial device extension.
    SendXon - If a character is to be send, this indicates whether
              it should be an Xon or an Xoff.

    Return Value: None.
--------------------------------------------------------------------------*/
{
    if (SendXon) {
        CyySendXon(Extension);
    } else {
        CyySendXoff(Extension);
    }
}

ULONG
CyyHandleModemUpdate(
    IN PCYY_DEVICE_EXTENSION Extension,
    IN BOOLEAN DoingTX
    )
/*--------------------------------------------------------------------------
    CyyHandleModemUpdate()
    
    Routine Description: check on the modem status, and handle any
    appropriate event notification as well as any flow control appropriate
    to modem status lines.
    
    Arguments:

    Extension - A pointer to the serial device extension.
    DoingTX - This boolean is used to indicate that this call
              came from the transmit processing code.  If this
              is true then there is no need to cause a new interrupt
              since the code will be trying to send the next
              character as soon as this call finishes.

    Return Value: This returns the old value of the modem status register
--------------------------------------------------------------------------*/
{
    ULONG OldTXHolding = Extension->TXHolding;
    UCHAR ModemStatus = 0;
    unsigned char msvr;
    PUCHAR chip = Extension->Cd1400;
    ULONG bus = Extension->IsPci;

    CD1400_WRITE(chip,bus, CAR, Extension->CdChannel);
    msvr = CD1400_READ(chip,bus,MSVR1);
	
    if(msvr & 0x40)	ModemStatus |= SERIAL_MSR_CTS;
    if(msvr & 0x80)	ModemStatus |= SERIAL_MSR_DSR;
    if(msvr & 0x20)	ModemStatus |= SERIAL_MSR_RI;
    if(msvr & 0x10)	ModemStatus |= SERIAL_MSR_DCD;

#if 0
    if(Extension->LieRIDSR == TRUE) {			// we have to lie...
        ModemStatus |= SERIAL_MSR_DSR;			// DSR always on
        ModemStatus &= ~(SERIAL_MSR_RI);		// RI always off
        ModemStatus &= ~(SERIAL_MSR_DDSR | SERIAL_MSR_TERI);
    }
#endif
    
    // If we are placing the modem status into the data stream
    // on every change, we should do it now.

    if (Extension->EscapeChar) {
        if (ModemStatus & (SERIAL_MSR_DCTS |
                           SERIAL_MSR_DDSR |
                           SERIAL_MSR_TERI |
                           SERIAL_MSR_DDCD)) {
            CyyPutChar(Extension,Extension->EscapeChar);
            CyyPutChar(Extension,SERIAL_LSRMST_MST);
            CyyPutChar(Extension,ModemStatus);
        }
    }

    // Take care of input flow control based on sensitivity
    // to the DSR.  This is done so that the application won't
    // see spurious data generated by odd devices.
    //
    // Basically, if we are doing dsr sensitivity then the
    // driver should only accept data when the dsr bit is set.

    if (Extension->HandFlow.ControlHandShake & SERIAL_DSR_SENSITIVITY) {
        if (ModemStatus & SERIAL_MSR_DSR) {
            Extension->RXHolding &= ~CYY_RX_DSR;
        } else {
            Extension->RXHolding |= CYY_RX_DSR;
        }
    } else {
        Extension->RXHolding &= ~CYY_RX_DSR;
    }

    // Check to see if we have a wait pending on the modem status events.
    // If we do then we schedule a dpc to satisfy that wait.

    if (Extension->IsrWaitMask) {
        if((Extension->IsrWaitMask&SERIAL_EV_CTS)&&(ModemStatus&SERIAL_MSR_DCTS)) {
            Extension->HistoryMask |= SERIAL_EV_CTS;
        }
        if((Extension->IsrWaitMask&SERIAL_EV_DSR)&&(ModemStatus&SERIAL_MSR_DDSR)) {
            Extension->HistoryMask |= SERIAL_EV_DSR;
        }
        if((Extension->IsrWaitMask&SERIAL_EV_RING)&&(ModemStatus&SERIAL_MSR_TERI)) {
            Extension->HistoryMask |= SERIAL_EV_RING;
        }
        if((Extension->IsrWaitMask&SERIAL_EV_RLSD)&&(ModemStatus&SERIAL_MSR_DDCD)) {
            Extension->HistoryMask |= SERIAL_EV_RLSD;
        }
        if(Extension->IrpMaskLocation && Extension->HistoryMask) {
            *Extension->IrpMaskLocation = Extension->HistoryMask;
            Extension->IrpMaskLocation = NULL;
            Extension->HistoryMask = 0;
            Extension->CurrentWaitIrp->IoStatus.Information = sizeof(ULONG);
            CyyInsertQueueDpc(&Extension->CommWaitDpc,NULL,NULL,Extension);
        }
    }

    // If the app has modem line flow control then
    // we check to see if we have to hold up transmission.

    if (Extension->HandFlow.ControlHandShake & SERIAL_OUT_HANDSHAKEMASK) {
        if (Extension->HandFlow.ControlHandShake & SERIAL_CTS_HANDSHAKE) {
            if (ModemStatus & SERIAL_MSR_CTS) {
                Extension->TXHolding &= ~CYY_TX_CTS;
            } else {
                Extension->TXHolding |= CYY_TX_CTS;
            }
        } else {
            Extension->TXHolding &= ~CYY_TX_CTS;
        }
        if (Extension->HandFlow.ControlHandShake & SERIAL_DSR_HANDSHAKE) {
            if (ModemStatus & SERIAL_MSR_DSR) {
                Extension->TXHolding &= ~CYY_TX_DSR;
            } else {
                Extension->TXHolding |= CYY_TX_DSR;
            }
        } else {
            Extension->TXHolding &= ~CYY_TX_DSR;
        }
        if (Extension->HandFlow.ControlHandShake & SERIAL_DCD_HANDSHAKE) {
            if (ModemStatus & SERIAL_MSR_DCD) {
                Extension->TXHolding &= ~CYY_TX_DCD;
            } else {
                Extension->TXHolding |= CYY_TX_DCD;
            }
        } else {
            Extension->TXHolding &= ~CYY_TX_DCD;
        }

        // If we hadn't been holding, and now we are then
        // queue off a dpc that will lower the RTS line
        // if we are doing transmit toggling.

        if (!OldTXHolding && Extension->TXHolding  &&
            ((Extension->HandFlow.FlowReplace & SERIAL_RTS_MASK) ==
              SERIAL_TRANSMIT_TOGGLE)) {

            CyyInsertQueueDpc(
                &Extension->StartTimerLowerRTSDpc,
                NULL,
                NULL,
                Extension
                )?Extension->CountOfTryingToLowerRTS++:0;
        }

        // We've done any adjusting that needed to be
        // done to the holding mask given updates
        // to the modem status.  If the Holding mask
        // is clear (and it wasn't clear to start)
        // and we have "write" work to do set things
        // up so that the transmission code gets invoked.

        if (!DoingTX && OldTXHolding && !Extension->TXHolding) {
            if (!Extension->TXHolding &&
                (Extension->TransmitImmediate ||
                 Extension->WriteLength) &&
                 Extension->HoldingEmpty) {
		
                CyyTxStart(Extension);
            }
        }
    } else {
        // We need to check if transmission is holding
        // up because of modem status lines.  What
        // could have occured is that for some strange
        // reason, the app has asked that we no longer
        // stop doing output flow control based on
        // the modem status lines.  If however, we
        // *had* been held up because of the status lines
        // then we need to clear up those reasons.

        if (Extension->TXHolding & (CYY_TX_DCD | CYY_TX_DSR | CYY_TX_CTS)) {
            Extension->TXHolding &= ~(CYY_TX_DCD | CYY_TX_DSR | CYY_TX_CTS);

            if (!DoingTX && OldTXHolding && !Extension->TXHolding) {
                if (!Extension->TXHolding &&
                    (Extension->TransmitImmediate ||
                     Extension->WriteLength) &&
                     Extension->HoldingEmpty) {

                    CyyTxStart(Extension);
                }
            }
        }
    }
    return ((ULONG)ModemStatus);
}

ULONG
CyyHandleModemUpdateForModem(
    IN PCYY_DEVICE_EXTENSION Extension,
    IN BOOLEAN DoingTX,
	IN UCHAR misr
    )
/*--------------------------------------------------------------------------
    CyyHandleModemUpdateForModem()
    
    Routine Description: check on the modem status, and handle any
    appropriate event notification as well as any flow control appropriate
    to modem status lines.
    
    Arguments:

    Extension - A pointer to the serial device extension.
    DoingTX - This boolean is used to indicate that this call
              came from the transmit processing code.  If this
              is true then there is no need to cause a new interrupt
              since the code will be trying to send the next
              character as soon as this call finishes.
	misr - Modem Interrupt Status Register value.			  

    Return Value: This returns the old value of the modem status register
--------------------------------------------------------------------------*/
{
   ULONG OldTXHolding = Extension->TXHolding;
   UCHAR ModemStatus = 0;
   unsigned char msvr;
   PUCHAR chip = Extension->Cd1400;
   ULONG bus = Extension->IsPci;

   CD1400_WRITE(chip,bus,CAR, Extension->CdChannel);
   msvr = CD1400_READ(chip,bus,MSVR1);

   if(msvr & 0x40)   ModemStatus |= SERIAL_MSR_CTS;
   if(msvr & 0x80)   ModemStatus |= SERIAL_MSR_DSR;
   if(msvr & 0x20)   ModemStatus |= SERIAL_MSR_RI;
   if(msvr & 0x10)   ModemStatus |= SERIAL_MSR_DCD;
   if(misr & 0x40)   ModemStatus |= SERIAL_MSR_DCTS;
   if(misr & 0x80)   ModemStatus |= SERIAL_MSR_DDSR;
   if(misr & 0x20)   ModemStatus |= SERIAL_MSR_TERI;
   if(misr & 0x10)   ModemStatus |= SERIAL_MSR_DDCD;
	

#if 0
   if(Extension->LieRIDSR == TRUE) {			// we have to lie...
 	ModemStatus |= SERIAL_MSR_DSR;			// DSR always on
 	ModemStatus &= ~(SERIAL_MSR_RI);		// RI always off
 	ModemStatus &= ~(SERIAL_MSR_DDSR | SERIAL_MSR_TERI);
    }
#endif
    
    // If we are placing the modem status into the data stream
    // on every change, we should do it now.

    if (Extension->EscapeChar) {
        if (ModemStatus & (SERIAL_MSR_DCTS |
                           SERIAL_MSR_DDSR |
                           SERIAL_MSR_TERI |
                           SERIAL_MSR_DDCD)) {
            CyyPutChar(Extension,Extension->EscapeChar);
            CyyPutChar(Extension,SERIAL_LSRMST_MST);
            CyyPutChar(Extension,ModemStatus);
        }
    }

    // Take care of input flow control based on sensitivity
    // to the DSR.  This is done so that the application won't
    // see spurious data generated by odd devices.
    //
    // Basically, if we are doing dsr sensitivity then the
    // driver should only accept data when the dsr bit is set.

    if (Extension->HandFlow.ControlHandShake & SERIAL_DSR_SENSITIVITY) {
        if (ModemStatus & SERIAL_MSR_DSR) {
            Extension->RXHolding &= ~CYY_RX_DSR;
        } else {
            Extension->RXHolding |= CYY_RX_DSR;
        }
    } else {
        Extension->RXHolding &= ~CYY_RX_DSR;
    }

    // Check to see if we have a wait pending on the modem status events.
    // If we do then we schedule a dpc to satisfy that wait.

    if (Extension->IsrWaitMask) {
        if((Extension->IsrWaitMask&SERIAL_EV_CTS)&&(ModemStatus&SERIAL_MSR_DCTS)) {
            Extension->HistoryMask |= SERIAL_EV_CTS;
        }
        if((Extension->IsrWaitMask&SERIAL_EV_DSR)&&(ModemStatus&SERIAL_MSR_DDSR)) {
            Extension->HistoryMask |= SERIAL_EV_DSR;
        }
        if((Extension->IsrWaitMask&SERIAL_EV_RING)&&(ModemStatus&SERIAL_MSR_TERI)) {
            Extension->HistoryMask |= SERIAL_EV_RING;
        }
        if((Extension->IsrWaitMask&SERIAL_EV_RLSD)&&(ModemStatus&SERIAL_MSR_DDCD)) {
            Extension->HistoryMask |= SERIAL_EV_RLSD;
        }
        if(Extension->IrpMaskLocation && Extension->HistoryMask) {
            *Extension->IrpMaskLocation = Extension->HistoryMask;
            Extension->IrpMaskLocation = NULL;
            Extension->HistoryMask = 0;
            Extension->CurrentWaitIrp->IoStatus.Information = sizeof(ULONG);
            CyyInsertQueueDpc(&Extension->CommWaitDpc,NULL,NULL,Extension);
        }
    }

    // If the app has modem line flow control then
    // we check to see if we have to hold up transmission.

    if (Extension->HandFlow.ControlHandShake & SERIAL_OUT_HANDSHAKEMASK) {
        if (Extension->HandFlow.ControlHandShake & SERIAL_CTS_HANDSHAKE) {
            if (ModemStatus & SERIAL_MSR_CTS) {
                Extension->TXHolding &= ~CYY_TX_CTS;
            } else {
                Extension->TXHolding |= CYY_TX_CTS;
            }
        } else {
            Extension->TXHolding &= ~CYY_TX_CTS;
        }
        if (Extension->HandFlow.ControlHandShake & SERIAL_DSR_HANDSHAKE) {
            if (ModemStatus & SERIAL_MSR_DSR) {
                Extension->TXHolding &= ~CYY_TX_DSR;
            } else {
                Extension->TXHolding |= CYY_TX_DSR;
            }
        } else {
            Extension->TXHolding &= ~CYY_TX_DSR;
        }
        if (Extension->HandFlow.ControlHandShake & SERIAL_DCD_HANDSHAKE) {
            if (ModemStatus & SERIAL_MSR_DCD) {
                Extension->TXHolding &= ~CYY_TX_DCD;
            } else {
                Extension->TXHolding |= CYY_TX_DCD;
            }
        } else {
            Extension->TXHolding &= ~CYY_TX_DCD;
        }

        // If we hadn't been holding, and now we are then
        // queue off a dpc that will lower the RTS line
        // if we are doing transmit toggling.

        if (!OldTXHolding && Extension->TXHolding  &&
            ((Extension->HandFlow.FlowReplace & SERIAL_RTS_MASK) ==
              SERIAL_TRANSMIT_TOGGLE)) {

            CyyInsertQueueDpc(
                &Extension->StartTimerLowerRTSDpc,
                NULL,
                NULL,
                Extension
                )?Extension->CountOfTryingToLowerRTS++:0;
        }

        // We've done any adjusting that needed to be
        // done to the holding mask given updates
        // to the modem status.  If the Holding mask
        // is clear (and it wasn't clear to start)
        // and we have "write" work to do set things
        // up so that the transmission code gets invoked.

        if (!DoingTX && OldTXHolding && !Extension->TXHolding) {
            if (!Extension->TXHolding &&
                (Extension->TransmitImmediate ||
                 Extension->WriteLength) &&
                 Extension->HoldingEmpty) {
		
                CyyTxStart(Extension);
            }
        }
    } else {
        // We need to check if transmission is holding
        // up because of modem status lines.  What
        // could have occured is that for some strange
        // reason, the app has asked that we no longer
        // stop doing output flow control based on
        // the modem status lines.  If however, we
        // *had* been held up because of the status lines
        // then we need to clear up those reasons.

        if (Extension->TXHolding & (CYY_TX_DCD | CYY_TX_DSR | CYY_TX_CTS)) {
            Extension->TXHolding &= ~(CYY_TX_DCD | CYY_TX_DSR | CYY_TX_CTS);

            if (!DoingTX && OldTXHolding && !Extension->TXHolding) {
                if (!Extension->TXHolding &&
                    (Extension->TransmitImmediate ||
                     Extension->WriteLength) &&
                     Extension->HoldingEmpty) {

                    CyyTxStart(Extension);
                }
            }
        }
    }
    return ((ULONG)ModemStatus);
}

BOOLEAN
CyyPerhapsLowerRTS(
    IN PVOID Context
    )
/*--------------------------------------------------------------------------
    CyyPerhapsLowerRTS()
    
    Routine Description: This routine checks that the software reasons for
    lowering the RTS lines are present.  If so, it will then cause the
    line status register to be read (and any needed processing
    implied by the status register to be done), and if the shift register
    is empty it will lower the line.  If the shift register isn't empty,
    this routine will queue off a dpc that will start a timer, that will
    basically call us back to try again.
    NOTE: This routine assumes that it is called at interrupt level.

    Arguments:

    Context - pointer to the device extension.

    Return Value: Always FALSE.
--------------------------------------------------------------------------*/
{
    PCYY_DEVICE_EXTENSION Extension = Context;

    // We first need to test if we are actually still doing
    // transmit toggle flow control.  If we aren't then
    // we have no reason to try be here.

    if ((Extension->HandFlow.FlowReplace & SERIAL_RTS_MASK) ==
					        SERIAL_TRANSMIT_TOGGLE) {
        // The order of the tests is very important below.
        // If there is a break then we should leave on the RTS,
        // because when the break is turned off, it will submit
        // the code to shut down the RTS.
        // If there are writes pending that aren't being held
        // up, then leave on the RTS, because the end of the write
        // code will cause this code to be reinvoked.  If the writes
        // are being held up, its ok to lower the RTS because the
        // upon trying to write the first character after transmission
        // is restarted, we will raise the RTS line.

        if ((Extension->TXHolding & CYY_TX_BREAK) ||
            (Extension->CurrentWriteIrp || Extension->TransmitImmediate ||
             (!IsListEmpty(&Extension->WriteQueue)) &&
             (!Extension->TXHolding))) {

            NOTHING;
        } else {
            // Looks good so far.  Call the line status check and processing
            // code, it will return the "current" line status value.  If
            // the holding and shift register are clear, lower the RTS line,
            // if they aren't clear, queue of a dpc that will cause a timer
            // to reinvoke us later.  We do this code here because no one
            // but this routine cares about the characters in the hardware,
            // so no routine by this routine will bother invoking to test
            // if the hardware is empty.
#if 0
            if ((CyyProcessLSR(Extension) & (CYY_LSR_THRE | CYY_LSR_TEMT)) !=
                 			(CYY_LSR_THRE | CYY_LSR_TEMT)) {
                // Well it's not empty, try again later.
                CyyInsertQueueDpc(
                    &Extension->StartTimerLowerRTSDpc,
                    NULL,
                    NULL,
                    Extension
                    )?Extension->CountOfTryingToLowerRTS++:0;
            } else {
                // Nothing in the hardware, Lower the RTS.
                CyyClrRTS(Extension);
            }
#endif
            CyyClrRTS(Extension);
            //remove later
        }
    }
    
    // We decement the counter to indicate that we've reached
    // the end of the execution path that is trying to push
    // down the RTS line.

    Extension->CountOfTryingToLowerRTS--;
    return FALSE;
}

VOID
CyyStartTimerLowerRTS(
    IN PKDPC Dpc,
    IN PVOID DeferredContext,
    IN PVOID SystemContext1,
    IN PVOID SystemContext2
    )
/*--------------------------------------------------------------------------
    CyyStartTimerLowerRTS()
    
    Routine Description: This routine starts a timer that when it expires
    will start a dpc that will check if it can lower the rts line because
    there are no characters in the hardware.

    Arguments:

    Dpc - Not Used.
    DeferredContext - points to the device extension.
    SystemContext1 - Not Used.
    SystemContext2 - Not Used.

    Return Value: None.
--------------------------------------------------------------------------*/
{
    PCYY_DEVICE_EXTENSION Extension = DeferredContext;
    LARGE_INTEGER CharTime;
    KIRQL OldIrql;

    UNREFERENCED_PARAMETER(Dpc);
    UNREFERENCED_PARAMETER(SystemContext1);
    UNREFERENCED_PARAMETER(SystemContext2);


    CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyyStartTimerLowerRTS(%X)\n",
                  Extension);


    // Take out the lock to prevent the line control
    // from changing out from under us while we calculate
    // a character time.
    KeAcquireSpinLock(&Extension->ControlLock,&OldIrql);
    CharTime = CyyGetCharTime(Extension);
    KeReleaseSpinLock(&Extension->ControlLock,OldIrql);

    CharTime.QuadPart = -CharTime.QuadPart;

    if (CyySetTimer(
            &Extension->LowerRTSTimer,
            CharTime,
            &Extension->PerhapsLowerRTSDpc,
            Extension
            )) {

        // The timer was already in the timer queue.  This implies
        // that one path of execution that was trying to lower
        // the RTS has "died".  Synchronize with the ISR so that
        // we can lower the count.

#if 0
        KeSynchronizeExecution(
            Extension->Interrupt,
            CyyDecrementRTSCounter,
            Extension
            );
#endif
        CyyDecrementRTSCounter(Extension);
        //remove later
    }

    CyyDpcEpilogue(Extension, Dpc);

    CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyyStartTimerLowerRTS\n");

}

VOID
CyyInvokePerhapsLowerRTS(
    IN PKDPC Dpc,
    IN PVOID DeferredContext,
    IN PVOID SystemContext1,
    IN PVOID SystemContext2
    )
/*--------------------------------------------------------------------------
    CyyInvokePerhapsLowerRTS()
    
    Routine Description: This dpc routine exists solely to call the code
    that tests if the rts line should be lowered when TRANSMIT TOGGLE
    flow control is being used.

    Arguments:

    Dpc - Not Used.
    DeferredContext - points to the device extension.
    SystemContext1 - Not Used.
    SystemContext2 - Not Used.

    Return Value: None.
--------------------------------------------------------------------------*/
{
    PCYY_DEVICE_EXTENSION Extension = DeferredContext;

    UNREFERENCED_PARAMETER(Dpc);
    UNREFERENCED_PARAMETER(SystemContext1);
    UNREFERENCED_PARAMETER(SystemContext2);

#if 0
    KeSynchronizeExecution(
        Extension->Interrupt,
        CyyPerhapsLowerRTS,
        Extension
        );
#endif
//remove later
    CyyPerhapsLowerRTS(Extension);

    CyyDpcEpilogue(Extension, Dpc);

}

BOOLEAN
CyyDecrementRTSCounter(
    IN PVOID Context
    )
/*--------------------------------------------------------------------------
    CyyDecrementRTSCounter()
    
    Routine Description: This routine checks that the software reasons for
    lowering the RTS lines are present.  If so, it will then cause the
    line status register to be read (and any needed processing implied by
    the status register to be done), and if the shift register is empty it
    will lower the line.  If the shift register isn't empty, this routine
    will queue off a dpc that will start a timer, that will basically call
    us back to try again.
    NOTE: This routine assumes that it is called at interrupt level.

    Arguments:

    Context - pointer to the device extension.

    Return Value: Always FALSE.
--------------------------------------------------------------------------*/
{
    PCYY_DEVICE_EXTENSION Extension = Context;

    Extension->CountOfTryingToLowerRTS--;
    return FALSE;
}




=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\y\cyyport\cyyopcl.c ===
/*--------------------------------------------------------------------------
*	
*   Copyright (C) Cyclades Corporation, 1996-2001.
*   All rights reserved.
*	
*   Cyclom-Y Port Driver
*	
*   This file:      cyyopcl.c
*	
*   Description:    This module contains the code related to opening,
*                   closing and cleaning up in the Cyclom-Y Port driver.
*
*   Notes:          This code supports Windows 2000 and Windows XP,
*                   x86 and IA64 processors.
*	
*   Complies with Cyclades SW Coding Standard rev 1.3.
*	
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*	Change History
*
*--------------------------------------------------------------------------
*
*
*--------------------------------------------------------------------------
*/

#include "precomp.h"

BOOLEAN
CyyMarkOpen(
    IN PVOID Context
    );

BOOLEAN
CyyNullSynch(
    IN PVOID Context
    );

#ifdef ALLOC_PRAGMA
#pragma alloc_text(PAGESER,CyyGetCharTime)
#pragma alloc_text(PAGESER,CyyMarkClose)
#pragma alloc_text(PAGESER,CyyCleanup)
#pragma alloc_text(PAGESER,CyyClose)
#pragma alloc_text(PAGESER,CyyMarkClose)
#pragma alloc_text(PAGESER,CyyMarkOpen)

//
// Always paged
//

#pragma alloc_text(PAGESRP0,CyyCreateOpen)
#endif // ALLOC_PRAGMA


BOOLEAN
CyyNullSynch(
    IN PVOID Context
    ) 
/*------------------------------------------------------------------------
    Just a bogus little routine to synch with the ISR.
------------------------------------------------------------------------*/
{
    UNREFERENCED_PARAMETER(Context);
    return FALSE;
}


NTSTATUS
CyyCreateOpen(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    )
/*--------------------------------------------------------------------------
	CyyCreateOpen()

	Description: We connect up to the interrupt for the create/open
	and initialize the structures needed to maintain an open for a
	device.

	Arguments:
	
	DeviceObject - Pointer to the device object for this device
	Irp - Pointer to the IRP for the current request

	Return Value: The function value is the final status of the call
--------------------------------------------------------------------------*/
{
    PCYY_DEVICE_EXTENSION extension = DeviceObject->DeviceExtension;
    NTSTATUS localStatus;

    PAGED_CODE();

    if (extension->PNPState != CYY_PNP_STARTED) {
       Irp->IoStatus.Status = STATUS_INSUFFICIENT_RESOURCES;
       IoCompleteRequest(Irp, IO_NO_INCREMENT);
       return STATUS_INSUFFICIENT_RESOURCES;
    }

    //
    // Lock out changes to PnP state until we have our open state decided
    //

    ExAcquireFastMutex(&extension->OpenMutex);

    if ((localStatus = CyyIRPPrologue(Irp, extension)) != STATUS_SUCCESS) {
       ExReleaseFastMutex(&extension->OpenMutex);
       if(localStatus != STATUS_PENDING) {
         CyyCompleteRequest(extension, Irp, IO_NO_INCREMENT);
       }
       return localStatus;
    }

    if (InterlockedIncrement(&extension->OpenCount) != 1) {
       ExReleaseFastMutex(&extension->OpenMutex);
       InterlockedDecrement(&extension->OpenCount);
       Irp->IoStatus.Status = STATUS_ACCESS_DENIED;
       CyyCompleteRequest(extension, Irp, IO_NO_INCREMENT);
       return STATUS_ACCESS_DENIED;
    }

    CyyDbgPrintEx(CYYIRPPATH, "Dispatch entry for: %x\n", Irp);

    CyyDbgPrintEx(CYYDIAG3, "In CyyCreateOpen\n");

    // Before we do anything, let's make sure they aren't trying
    // to create a directory.  This is a silly, but what's a driver to do!?
    
    if (IoGetCurrentIrpStackLocation(Irp)->Parameters.Create.Options &
        FILE_DIRECTORY_FILE) {
        ExReleaseFastMutex(&extension->OpenMutex);

        Irp->IoStatus.Status = STATUS_NOT_A_DIRECTORY;
        Irp->IoStatus.Information = 0;

        InterlockedDecrement(&extension->OpenCount);
        CyyCompleteRequest(extension, Irp, IO_NO_INCREMENT);

        return STATUS_NOT_A_DIRECTORY;
    }

    // Create a buffer for the RX data when no reads are outstanding.
    
    extension->InterruptReadBuffer = NULL;
    extension->BufferSize = 0;
    
    // Try to allocate large buffers, whether the system is MmLargeSystem,
    // MmMediumSystem or MmSmallSystem. 
	
    extension->BufferSize = 4096;
    extension->InterruptReadBuffer =
   	    ExAllocatePool(NonPagedPool,extension->BufferSize);
    if (!extension->InterruptReadBuffer) {
        extension->BufferSize = 2048;
        extension->InterruptReadBuffer =
            ExAllocatePool(NonPagedPool,extension->BufferSize);
        if (!extension->InterruptReadBuffer) {
            extension->BufferSize = 1024;
            extension->InterruptReadBuffer = 
                ExAllocatePool(NonPagedPool,extension->BufferSize);
            if (!extension->InterruptReadBuffer) {
                extension->BufferSize = 128;
                extension->InterruptReadBuffer =
                    ExAllocatePool(NonPagedPool,extension->BufferSize);
            }
        }
    }
	
    #if 0
    switch (MmQuerySystemSize()) {
        case MmLargeSystem: {
            extension->BufferSize = 4096;
            extension->InterruptReadBuffer =
                ExAllocatePool(NonPagedPool,extension->BufferSize);
            if (extension->InterruptReadBuffer)	
                break;
        }
        default: {
            extension->BufferSize = 1024;
            extension->InterruptReadBuffer =
                ExAllocatePool(NonPagedPool,extension->BufferSize);
            if (extension->InterruptReadBuffer)	break;
			
            extension->BufferSize = 128;
            extension->InterruptReadBuffer =
                ExAllocatePool(NonPagedPool,extension->BufferSize);			
        break;
        }
    }
    #endif

    if (!extension->InterruptReadBuffer) {
       ExReleaseFastMutex(&extension->OpenMutex);

        extension->BufferSize = 0;
        Irp->IoStatus.Status = STATUS_INSUFFICIENT_RESOURCES;
        Irp->IoStatus.Information = 0;

        InterlockedDecrement(&extension->OpenCount);
        CyyCompleteRequest(extension, Irp, IO_NO_INCREMENT);

        return STATUS_INSUFFICIENT_RESOURCES;
    }

    //
    // Ok, it looks like we really are going to open.  Lock down the
    // driver.
    //
    CyyLockPagableSectionByHandle(CyyGlobals.PAGESER_Handle);

    //
    // Power up the stack
    //

    (void)CyyGotoPowerState(DeviceObject, extension, PowerDeviceD0);

    //
    // Not currently waiting for wake up
    //

    extension->SendWaitWake = FALSE;


    // "flush" the read queue by initializing the count of characters.
    
    extension->CharsInInterruptBuffer = 0;
    extension->LastCharSlot = extension->InterruptReadBuffer +
                              (extension->BufferSize - 1);
    extension->ReadBufferBase = extension->InterruptReadBuffer;
    extension->CurrentCharSlot = extension->InterruptReadBuffer;
    extension->FirstReadableChar = extension->InterruptReadBuffer;
    extension->TotalCharsQueued = 0;

    // set up the default xon/xoff limits.
    
    extension->HandFlow.XoffLimit = extension->BufferSize >> 3;
    extension->HandFlow.XonLimit = extension->BufferSize >> 1;

    extension->WmiCommData.XoffXmitThreshold = extension->HandFlow.XoffLimit;
    extension->WmiCommData.XonXmitThreshold = extension->HandFlow.XonLimit;

    extension->BufferSizePt8 = ((3*(extension->BufferSize>>2))+
                                   (extension->BufferSize>>4));

    //
    // Mark the device as busy for WMI
    //

    extension->WmiCommData.IsBusy = TRUE;

    extension->IrpMaskLocation = NULL;
    extension->HistoryMask = 0;
    extension->IsrWaitMask = 0;

	
#if !DBG
    // Clear out the statistics.

    KeSynchronizeExecution(extension->Interrupt,CyyClearStats,extension);
#endif
    
    extension->EscapeChar = 0;

    // Synchronize with the ISR and mark the device as open
    KeSynchronizeExecution(extension->Interrupt,CyyMarkOpen,extension);

    Irp->IoStatus.Status = STATUS_SUCCESS;

    //
    // We have been marked open, so now the PnP state can change
    //

    ExReleaseFastMutex(&extension->OpenMutex);

    localStatus = Irp->IoStatus.Status;
    Irp->IoStatus.Information=0L;

    if (!NT_SUCCESS(localStatus)) {
       if (extension->InterruptReadBuffer != NULL) {
          ExFreePool(extension->InterruptReadBuffer);
          extension->InterruptReadBuffer = NULL;
       }

       InterlockedDecrement(&extension->OpenCount);
    }

    CyyCompleteRequest(extension, Irp, IO_NO_INCREMENT);

    return localStatus;
}

//TODO FANNY: DO WE NEED THIS?
#if 0
VOID
SerialDrainUART(IN PSERIAL_DEVICE_EXTENSION PDevExt,
                IN PLARGE_INTEGER PDrainTime)
{
   PAGED_CODE();

   //
   // Wait until all characters have been emptied out of the hardware.
   //

   while ((READ_LINE_STATUS(PDevExt->Controller) &
           (SERIAL_LSR_THRE | SERIAL_LSR_TEMT))
           != (SERIAL_LSR_THRE | SERIAL_LSR_TEMT)) {

        KeDelayExecutionThread(KernelMode, FALSE, PDrainTime);
    }
}
#endif

NTSTATUS
CyyClose(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    )
/*--------------------------------------------------------------------------
	CyyClose()

	Description: We simply disconnect the interrupt for now.

	Arguments:
	
	DeviceObject - Pointer to the device object for this device
	Irp - Pointer to the IRP for the current request

	Return Value: The function value is the final status of the call
--------------------------------------------------------------------------*/
{
    LARGE_INTEGER tenCharDelay;
    LARGE_INTEGER charTime;
    PCYY_DEVICE_EXTENSION extension = DeviceObject->DeviceExtension;
    ULONG i;

    NTSTATUS status;

    //
    // Number of opens still active
    //

    LONG openCount;

    //
    // Number of DPC's still pending
    //

    ULONG pendingDPCs;

    ULONG flushCount;

    //
    // Grab a mutex
    //

    ExAcquireFastMutex(&extension->CloseMutex);


    //
    // We succeed a close on a removing device
    //

    if ((status = CyyIRPPrologue(Irp, extension)) != STATUS_SUCCESS) {
       CyyDbgPrintEx(DPFLTR_INFO_LEVEL, "Close prologue failed for: %x\n",
                     Irp);
       if (status == STATUS_DELETE_PENDING) {
             extension->BufferSize = 0;
             ExFreePool(extension->InterruptReadBuffer);
             extension->InterruptReadBuffer = NULL;
             status = Irp->IoStatus.Status = STATUS_SUCCESS;
       }

       if (status != STATUS_PENDING) {
            CyyCompleteRequest(extension, Irp, IO_NO_INCREMENT);
            openCount = InterlockedDecrement(&extension->OpenCount);
            ASSERT(openCount == 0);
       }
       ExReleaseFastMutex(&extension->CloseMutex);
       return status;
    }

    ASSERT(extension->OpenCount >= 1);

    if (extension->OpenCount < 1) {
       CyyDbgPrintEx(DPFLTR_ERROR_LEVEL, "Close open count bad for: 0x%x\n",
                     Irp);
       CyyDbgPrintEx(DPFLTR_ERROR_LEVEL, "Count: %x  Addr: 0x%x\n",
                     extension->OpenCount, &extension->OpenCount);
       ExReleaseFastMutex(&extension->CloseMutex);
       Irp->IoStatus.Status = STATUS_INVALID_DEVICE_REQUEST;
       CyyCompleteRequest(extension, Irp, IO_NO_INCREMENT);
       return STATUS_INVALID_DEVICE_REQUEST;
    }

    CyyDbgPrintEx(CYYIRPPATH, "Dispatch entry for: %x\n", Irp);
    CyyDbgPrintEx(CYYDIAG3, "In CyyClose\n");

    charTime.QuadPart = -CyyGetCharTime(extension).QuadPart;

    extension->DeviceIsOpened = FALSE;

    // Turn break off in case it is on

	//Call of CyyTurnOffBreak removed, because as DeviceIsOpened will be
	//FALSE in the ISR, the Stop Break cannot be executed. Anyway, any
	//char (other than Send Break) sent to the FIFO will stop the Break.
    //KeSynchronizeExecution(extension->Interrupt,CyyTurnOffBreak,extension);
			
    // Wait until all characters have been emptied out of the hardware.

    for(i = 0 ; i < MAX_CHAR_FIFO ; i++) {
        KeDelayExecutionThread(KernelMode,FALSE,&charTime);
    }

    // TODO FANNY: SHOULD WE CALL SerialMarkHardwareBroken()? SEE LATER...

    // Synchronize with the ISR to let it know that interrupts are
    // no longer important.

    KeSynchronizeExecution(extension->Interrupt,CyyMarkClose,extension);

    // If the driver has automatically transmitted an Xoff in
    // the context of automatic receive flow control then we
    // should transmit an Xon.

    if (extension->RXHolding & CYY_RX_XOFF) {
      //volatile unsigned char *pt_chip = extension->Controller;
	   //ULONG index = extension->BusIndex;	
      //    
	   //cy_wreg(CAR,extension->CdChannel & 0x03);

      PUCHAR chip = extension->Cd1400;
      ULONG bus = extension->IsPci;

      CD1400_WRITE(chip,bus,CAR,extension->CdChannel & 0x03);
	   CyyCDCmd(extension,CCR_SENDSC_SCHR1);	

      //TODO FANNY: SHOULD WE CALL SerialMarkHardwareBroken()? SEE LATER...
    }
    
    // The hardware is hopefully empty. Delay 10 chars before dropping DTR.
    
    tenCharDelay.QuadPart = charTime.QuadPart * 10;
    KeDelayExecutionThread(KernelMode,TRUE,&tenCharDelay);
    CyyClrDTR(extension);

    // We have to be very careful how we clear the RTS line.
    // Transmit toggling might have been on at some point.
    //
    // We know that there is nothing left that could start
    // out the "polling"  execution path.  We need to
    // check the counter that indicates that the execution
    // path is active.  If it is then we loop delaying one
    // character time.  After each delay we check to see if
    // the counter has gone to zero.  When it has we know that
    // the execution path should be just about finished.  We
    // make sure that we still aren't in the routine that
    // synchronized execution with the ISR by synchronizing
    // ourselve with the ISR.

    if (extension->CountOfTryingToLowerRTS) {
        do {
            KeDelayExecutionThread(KernelMode,FALSE,&charTime);
        } while (extension->CountOfTryingToLowerRTS);

        KeSynchronizeExecution(extension->Interrupt,CyyNullSynch,NULL);
    }

    CyyClrRTS(extension);

    // Clean out the holding reasons (since we are closed).
    
    extension->RXHolding = 0;
    extension->TXHolding = 0;

    //
    // Mark device as not busy for WMI
    //

    extension->WmiCommData.IsBusy = FALSE;

    // Release the buffers.
    
    extension->BufferSize = 0;
    if (extension->InterruptReadBuffer != NULL) { // added in DDK build 2072
       ExFreePool(extension->InterruptReadBuffer);
    }
    extension->InterruptReadBuffer = NULL;

    //
    // Stop waiting for wakeup
    //

    extension->SendWaitWake = FALSE;

    if (extension->PendingWakeIrp != NULL) {
       IoCancelIrp(extension->PendingWakeIrp);
    }

    //
    // Power down our device stack
    //

    (void)CyyGotoPowerState(DeviceObject, extension, PowerDeviceD3);

    Irp->IoStatus.Status = STATUS_SUCCESS;
    Irp->IoStatus.Information=0L;

    CyyCompleteRequest(extension, Irp, IO_NO_INCREMENT);
   
    //
    // Unlock the pages.  If this is the last reference to the section
    // then the driver code will be flushed out.
    //

    //
    // First, we have to let the DPC's drain.  No more should be queued
    // since we aren't taking interrupts now....
    //

    pendingDPCs = InterlockedDecrement(&extension->DpcCount);
    LOGENTRY(LOG_CNT, 'DpD7', 0, extension->DpcCount, 0);   // Added in build 2128

    if (pendingDPCs) {
       CyyDbgPrintEx(CYYDIAG1,"Draining DPC's: %x\n", Irp);
       KeWaitForSingleObject(&extension->PendingDpcEvent, Executive,
                             KernelMode, FALSE, NULL);
    }


    CyyDbgPrintEx(CYYDIAG1, "DPC's drained: %x\n", Irp);



    //
    // Pages must be locked to release the mutex, so don't unlock
    // them until after we release the mutex
    //

    ExReleaseFastMutex(&extension->CloseMutex);

    //
    // Reset for next open
    //

    InterlockedIncrement(&extension->DpcCount);
    LOGENTRY(LOG_CNT, 'DpI6', 0, extension->DpcCount, 0);   // Added in build 2128

    openCount = InterlockedDecrement(&extension->OpenCount);

    //
    // Open count may be non-zero if someone was trying to open
    // at the same time we decremented
    //

    // ASSERT(openCount == 0);

    CyyUnlockPagableImageSection(CyyGlobals.PAGESER_Handle);

    return STATUS_SUCCESS;
}

BOOLEAN
CyyMarkOpen(
    IN PVOID Context
    )
/*------------------------------------------------------------------------
    CyyMarkOpen()
    
    Routine Description: This routine mark the fact that somebody opened
    the device and its worthwhile to pay attention to interrupts.

    Arguments:

    Context - Really a pointer to the device extension.

    Return Value: This routine always returns FALSE.
------------------------------------------------------------------------*/
{
    PCYY_DEVICE_EXTENSION extension = Context;

    CyyReset(extension);

    extension->DeviceIsOpened = TRUE;
    extension->ErrorWord = 0;
    return FALSE;
}


VOID
CyyDisableCd1400Channel(IN PVOID Context)

/*++

Routine Description:

    This routine disables the UART and puts it in a "safe" state when
    not in use (like a close or powerdown).

Arguments:

    Context - Really a pointer to the device extension.

Return Value:

    This routine always returns FALSE.

--*/

{
   PCYY_DEVICE_EXTENSION extension = Context;
   PCYY_DISPATCH pDispatch;
   PUCHAR chip = extension->Cd1400;
   ULONG bus = extension->IsPci;
   ULONG i;

   //
   // Prepare for the closing by stopping interrupts.
   //
   CD1400_WRITE(chip,bus,CAR,extension->CdChannel & 0x03);
   CD1400_WRITE(chip,bus,SRER,0x00); // Disable MdmCh, RxData, TxRdy

   // Flush TX FIFO
   //CD1400_WRITE(chip,bus,CAR,extension->CdChannel & 0x03);
	CyyCDCmd(extension,CCR_FLUSH_TXFIFO);

   pDispatch = (PCYY_DISPATCH)extension->OurIsrContext;
   pDispatch->Cd1400[extension->PortIndex] = NULL;

   for (i = 0; i < CYY_MAX_PORTS; i++) {
      if (pDispatch->Cd1400[extension->PortIndex] != NULL) {
          break;
      }
   }

   if (i == CYY_MAX_PORTS) {
      // This was the last port, we can clear any pending interrupt.
      CYY_CLEAR_INTERRUPT(extension->BoardMemory,bus); 
   }
}


BOOLEAN
CyyMarkClose(
    IN PVOID Context
    )
/*------------------------------------------------------------------------
    CyyMarkClose()
    
    Routine Description: This routine merely sets a boolean to false to
    mark the fact that somebody closed the device and it's no longer
    worthwhile to pay attention to interrupts.

    Arguments:

    Context - Really a pointer to the device extension.

    Return Value: This routine always returns FALSE.
------------------------------------------------------------------------*/
{
    PCYY_DEVICE_EXTENSION extension = Context;

    CyyDisableCd1400Channel(Context);

    extension->DeviceIsOpened = FALSE;
    return FALSE;
}

NTSTATUS
CyyCleanup(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    )
/*------------------------------------------------------------------------
    CyyCleanup()

    Routine Description: This function is used to kill all longstanding
    IO operations.

    Arguments:

    DeviceObject - Pointer to the device object for this device
    Irp - Pointer to the IRP for the current request

    Return Value: The function value is the final status of the call
------------------------------------------------------------------------*/
{
    PCYY_DEVICE_EXTENSION extension = DeviceObject->DeviceExtension;
    NTSTATUS status;


    PAGED_CODE();

    //
    // We succeed a cleanup on a removing device
    //

    if ((status = CyyIRPPrologue(Irp, extension)) != STATUS_SUCCESS) {
       if (status == STATUS_DELETE_PENDING) {
          status = Irp->IoStatus.Status = STATUS_SUCCESS;
       }
       if (status != STATUS_PENDING) {
          CyyCompleteRequest(extension, Irp, IO_NO_INCREMENT);
       }
       return status;
    }

    CyyDbgPrintEx(CYYIRPPATH, "Dispatch entry for: %x\n", Irp);

    CyyKillPendingIrps(DeviceObject);
    
    Irp->IoStatus.Status = STATUS_SUCCESS;
    Irp->IoStatus.Information=0L;

    CyyCompleteRequest(extension, Irp, IO_NO_INCREMENT);

    return STATUS_SUCCESS;
}

LARGE_INTEGER
CyyGetCharTime(
    IN PCYY_DEVICE_EXTENSION Extension
    )
/*------------------------------------------------------------------------
    CyyGetCharTime()
    
    Routine Description: return the number of 100 nanosecond intervals
    there are in one character time.

    Arguments:

    Extension - Just what it says.

    Return Value: 100 nanosecond intervals in a character time.
------------------------------------------------------------------------*/
{
    ULONG dataSize;
    ULONG paritySize;
    ULONG stopSize;
    ULONG charTime;
    ULONG bitTime;
    LARGE_INTEGER tmp;

    if ((Extension->cor1 & COR1_DATA_MASK) == COR1_5_DATA) {
      dataSize = 5;
    } else if ((Extension->cor1 & COR1_DATA_MASK) == COR1_6_DATA) {
      dataSize = 6;
    } else if ((Extension->cor1 & COR1_DATA_MASK) == COR1_7_DATA) {
      dataSize = 7;
    } else {
      dataSize = 8;
    }

    paritySize = 1;
    if ((Extension->cor1 & COR1_PARITY_MASK) == COR1_NONE_PARITY) {
       paritySize = 0;
    }

    if ((Extension->cor1 & COR1_STOP_MASK) == COR1_1_STOP) {

        stopSize = 1;

    } else {

        stopSize = 2;

    }

    //
    // First we calculate the number of 100 nanosecond intervals
    // are in a single bit time (Approximately).
    //

    bitTime = (10000000+(Extension->CurrentBaud-1))/Extension->CurrentBaud;
    charTime = bitTime + ((dataSize+paritySize+stopSize)*bitTime);

    tmp.QuadPart = charTime;
    return tmp;
}



=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\y\cyyport\cyymask.c ===
/*--------------------------------------------------------------------------
*	
*   Copyright (C) Cyclades Corporation, 1996-2001.
*   All rights reserved.
*	
*   Cyclom-Y Port Driver
*	
*   This file:      cyymask.c
*	
*   Description:    This module contains the code related to get/set/wait
*                   on event mask operations in the Cyclom-Y Port driver.
*
*   Notes:          This code supports Windows 2000 and Windows XP,
*                   x86 and IA64 processors.
*	
*   Complies with Cyclades SW Coding Standard rev 1.3.
*	
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*   Change History
*
*--------------------------------------------------------------------------
*
*
*--------------------------------------------------------------------------
*/


#include "precomp.h"


BOOLEAN
CyyGrabWaitFromIsr(
    IN PVOID Context
    );

BOOLEAN
CyyGiveWaitToIsr(
    IN PVOID Context
    );

BOOLEAN
CyyFinishOldWait(
    IN PVOID Context
    );

#ifdef ALLOC_PRAGMA
#pragma alloc_text(PAGESER,CyyStartMask)
#pragma alloc_text(PAGESER,CyyCancelWait)
#pragma alloc_text(PAGESER,CyyGrabWaitFromIsr)
#pragma alloc_text(PAGESER,CyyGiveWaitToIsr)
#pragma alloc_text(PAGESER,CyyFinishOldWait)
#endif


NTSTATUS
CyyStartMask(
    IN PCYY_DEVICE_EXTENSION Extension
    )

/*++

Routine Description:

    This routine is used to process the set mask and wait
    mask ioctls.  Calls to this routine are serialized by
    placing irps in the list under the protection of the
    cancel spin lock.

Arguments:

    Extension - A pointer to the serial device extension.

Return Value:

    Will return pending for everything put the first
    request that we actually process.  Even in that
    case it will return pending unless it can complete
    it right away.


--*/

{

    //
    // The current stack location.  This contains much of the
    // information we need to process this particular request.
    //
    PIO_STACK_LOCATION IrpSp;

    PIRP NewIrp;

    BOOLEAN SetFirstStatus = FALSE;
    NTSTATUS FirstStatus;

    CYY_LOCKED_PAGED_CODE();

    CyyDbgPrintEx(CYYDIAG3, "In CyyStartMask\n");

    ASSERT(Extension->CurrentMaskIrp);

    do {

        CyyDbgPrintEx(CYYDIAG4, "STARTMASK - CurrentMaskIrp: %x\n",
                         Extension->CurrentMaskIrp);
        IrpSp = IoGetCurrentIrpStackLocation(Extension->CurrentMaskIrp);

        ASSERT((IrpSp->Parameters.DeviceIoControl.IoControlCode ==
                IOCTL_SERIAL_WAIT_ON_MASK) ||
               (IrpSp->Parameters.DeviceIoControl.IoControlCode ==
                IOCTL_SERIAL_SET_WAIT_MASK));

        if (IrpSp->Parameters.DeviceIoControl.IoControlCode ==
            IOCTL_SERIAL_SET_WAIT_MASK) {

            CyyDbgPrintEx(CYYDIAG4, "%x is a SETMASK irp\n",
                          Extension->CurrentMaskIrp);

            //
            // Complete the old wait if there is one.
            //

            KeSynchronizeExecution(
                Extension->Interrupt,
                CyyFinishOldWait,
                Extension
                );

            //
            // Any current waits should be on its way to completion
            // at this point.  There certainly shouldn't be any
            // irp mask location.
            //

            ASSERT(!Extension->IrpMaskLocation);

            Extension->CurrentMaskIrp->IoStatus.Status = STATUS_SUCCESS;

            if (!SetFirstStatus) {

                CyyDbgPrintEx(CYYDIAG4, "%x was the first irp processed by "
                              "this\n"
                              "------- invocation of startmask\n",
                              Extension->CurrentMaskIrp);

                FirstStatus = STATUS_SUCCESS;
                SetFirstStatus = TRUE;

            }

            //
            // The following call will also cause the current
            // call to be completed.
            //

            CyyGetNextIrp(
                &Extension->CurrentMaskIrp,
                &Extension->MaskQueue,
                &NewIrp,
                TRUE,
                Extension
                );
            CyyDbgPrintEx(CYYDIAG4, "Perhaps another mask irp was found in "
                          "the queue\n"
                          "------- %x/%x <- values should be the same\n",
                          Extension->CurrentMaskIrp,NewIrp);

        } else {

            //
            // First make sure that we have a non-zero mask.
            // If the app queues a wait on a zero mask it can't
            // be statisfied so it makes no sense to start it.
            //

            if ((!Extension->IsrWaitMask) || (Extension->CurrentWaitIrp)) {

                CyyDbgPrintEx(CYYDIAG4, "WaitIrp is invalid\n"
                              "------- IsrWaitMask: %x\n"
                              "------- CurrentWaitIrp: %x\n",
                              Extension->IsrWaitMask,
                              Extension->CurrentWaitIrp);

                Extension->CurrentMaskIrp->IoStatus.Status 
                   = STATUS_INVALID_PARAMETER;

                if (!SetFirstStatus) {

                    CyyDbgPrintEx(CYYDIAG4, "%x was the first irp processed "
                                  "by this\n"
                                  "------- invocation of startmask\n",
                                  Extension->CurrentMaskIrp);

                    FirstStatus = STATUS_INVALID_PARAMETER;
                    SetFirstStatus = TRUE;

                }

                CyyGetNextIrp(&Extension->CurrentMaskIrp,
                              &Extension->MaskQueue, &NewIrp, TRUE,
                              Extension);

                CyyDbgPrintEx(CYYDIAG4, "Perhaps another mask irp was found "
                              "in the queue\n"
                              "------- %x/%x <- values should be the same\n",
                              Extension->CurrentMaskIrp,NewIrp);

            } else {

                KIRQL OldIrql;

                //
                // Make the current mask irp the current wait irp and
                // get a new current mask irp.  Note that when we get
                // the new current mask irp we DO NOT complete the
                // old current mask irp (which is now the current wait
                // irp.
                //
                // Then under the protection of the cancel spin lock
                // we check to see if the current wait irp needs to
                // be canceled
                //

                IoAcquireCancelSpinLock(&OldIrql);

                if (Extension->CurrentMaskIrp->Cancel) {

                    CyyDbgPrintEx(CYYDIAG4, "%x irp was already marked as "
                                  "cancelled\n", Extension->CurrentMaskIrp);

                    IoReleaseCancelSpinLock(OldIrql);
                    Extension->CurrentMaskIrp->IoStatus.Status = STATUS_CANCELLED;

                    if (!SetFirstStatus) {

                        CyyDbgPrintEx(CYYDIAG4, "%x was the first irp "
                                      "processed by this\n"
                                      "------- invocation of startmask\n",
                                      Extension->CurrentMaskIrp);

                        FirstStatus = STATUS_CANCELLED;
                        SetFirstStatus = TRUE;

                    }

                    CyyGetNextIrp(&Extension->CurrentMaskIrp,
                                  &Extension->MaskQueue, &NewIrp, TRUE,
                                  Extension);

                    CyyDbgPrintEx(CYYDIAG4, "Perhaps another mask irp was "
                                  "found in the queue\n"
                                  "------- %x/%x <- values should be the "
                                  "same\n", Extension->CurrentMaskIrp,
                                  NewIrp);

                } else {

                    CyyDbgPrintEx(CYYDIAG4, "%x will become the current "
                                  "wait irp\n", Extension->CurrentMaskIrp);
                    if (!SetFirstStatus) {

                        CyyDbgPrintEx(CYYDIAG4, "%x was the first irp "
                                      "processed by this\n"
                                      "------- invocation of startmask\n",
                                      Extension->CurrentMaskIrp);

                        FirstStatus = STATUS_PENDING;
                        SetFirstStatus = TRUE;

                        //
                        // If we haven't already set a first status
                        // then there is a chance that this packet
                        // was never on the queue.  We should mark
                        // it as pending.
                        //

                        IoMarkIrpPending(Extension->CurrentMaskIrp);

                    }

                    //
                    // There should never be a mask location when
                    // there isn't a current wait irp.  At this point
                    // there shouldn't be a current wait irp also.
                    //

                    ASSERT(!Extension->IrpMaskLocation);
                    ASSERT(!Extension->CurrentWaitIrp);

                    Extension->CurrentWaitIrp = Extension->CurrentMaskIrp;
                    SERIAL_INIT_REFERENCE(Extension->CurrentWaitIrp);
                    IoSetCancelRoutine(
                        Extension->CurrentWaitIrp,
                        CyyCancelWait
                        );

                    //
                    // Since the cancel routine has a reference to
                    // the irp we need to update the reference
                    // count.
                    //

                    SERIAL_SET_REFERENCE(
                        Extension->CurrentWaitIrp,
                        SERIAL_REF_CANCEL
                        );

                    KeSynchronizeExecution(
                        Extension->Interrupt,
                        CyyGiveWaitToIsr,
                        Extension
                        );

// Code removed because it was causing blue-screen in the Modem Share 
// test case 77. When CurrentMaskIrp is set to NULL, we remove the 
// protection that avoid Starter to be called in CyyStartOrQueue.
// We will let CyyGetNextIrp null out that pointer. Fanny.
//
//                    //
//                    // Since it isn't really the mask irp anymore,
//                    // null out that pointer.
//                    //
//
//                    Extension->CurrentMaskIrp = NULL;

                    Extension->CurrentMaskIrp = NULL; // back in Windows 2000. Fanny

                    //
                    // This will release the cancel spinlock for us
                    //

                    CyyGetNextIrpLocked(&Extension->CurrentMaskIrp,
                                        &Extension->MaskQueue, &NewIrp,
                                        FALSE, Extension, OldIrql);

                    CyyDbgPrintEx(CYYDIAG4, "Perhaps another mask irp was "
                                  "found in the queue\n"
                                  "------- %x/%x <- values should be the "
                                  "same\n", Extension->CurrentMaskIrp,
                                  NewIrp);

                }

            }

        }

    } while (NewIrp);

    return FirstStatus;

}

BOOLEAN
CyyGrabWaitFromIsr(
    IN PVOID Context
    )

/*++

Routine Description:

    This routine will check to see if the ISR still knows about
    a wait irp by checking to see if the IrpMaskLocation is non-null.
    If it is then it will zero the Irpmasklocation (which in effect
    grabs the irp away from the isr).  This routine is only called
    buy the cancel code for the wait.

    NOTE: This is called by KeSynchronizeExecution.

Arguments:

    Context - A pointer to the device extension

Return Value:

    Always FALSE.

--*/

{

    PCYY_DEVICE_EXTENSION Extension = Context;
    CYY_LOCKED_PAGED_CODE();

    CyyDbgPrintEx(CYYDIAG3, "In CyyGrabWaitFromIsr\n");

    if (Extension->IrpMaskLocation) {

        CyyDbgPrintEx(CYYDIAG4, "The isr still owns the irp %x, mask "
                      "location is %x\n"
                      "------- and system buffer is %x\n",
                      Extension->CurrentWaitIrp,Extension->IrpMaskLocation,
                      Extension->CurrentWaitIrp->AssociatedIrp.SystemBuffer);

        //
        // The isr still "owns" the irp.
        //

        *Extension->IrpMaskLocation = 0;
        Extension->IrpMaskLocation = NULL;

        Extension->CurrentWaitIrp->IoStatus.Information = sizeof(ULONG);

        //
        // Since the isr no longer references the irp we need to
        // decrement the reference count.
        //

        SERIAL_CLEAR_REFERENCE(
            Extension->CurrentWaitIrp,
            SERIAL_REF_ISR
            );

    }

    return FALSE;
}

BOOLEAN
CyyGiveWaitToIsr(
    IN PVOID Context
    )

/*++

Routine Description:

    This routine simply sets a variable in the device extension
    so that the isr knows that we have a wait irp.

    NOTE: This is called by KeSynchronizeExecution.

    NOTE: This routine assumes that it is called with the
          cancel spinlock held.

Arguments:

    Context - Simply a pointer to the device extension.

Return Value:

    Always FALSE.

--*/

{

    PCYY_DEVICE_EXTENSION Extension = Context;
    CYY_LOCKED_PAGED_CODE();

    CyyDbgPrintEx(CYYDIAG3, "In CyyGiveWaitToIsr\n");
    //
    // There certainly shouldn't be a current mask location at
    // this point since we have a new current wait irp.
    //

    ASSERT(!Extension->IrpMaskLocation);

    //
    // The isr may or may not actually reference this irp.  It
    // won't if the wait can be satisfied immediately.  However,
    // since it will then go through the normal completion sequence,
    // we need to have an incremented reference count anyway.
    //

    SERIAL_SET_REFERENCE(
        Extension->CurrentWaitIrp,
        SERIAL_REF_ISR
        );

    if (!Extension->HistoryMask) {

        CyyDbgPrintEx(CYYDIAG4, "No events occured prior to the wait call"
                      "\n");

        //
        // Although this wait might not be for empty transmit
        // queue, it doesn't hurt anything to set it to false.
        //

        Extension->EmptiedTransmit = FALSE;

        //
        // Record where the "completion mask" should be set.
        //

        Extension->IrpMaskLocation =
            Extension->CurrentWaitIrp->AssociatedIrp.SystemBuffer;
        CyyDbgPrintEx( CYYDIAG4, "The isr owns the irp %x, mask location is "
                       "%x\n"
                       "------- and system buffer is %x\n",
                       Extension->CurrentWaitIrp,Extension->IrpMaskLocation,
                       Extension->CurrentWaitIrp->AssociatedIrp
                       .SystemBuffer);

    } else {

        CyyDbgPrintEx(CYYDIAG4, "%x occurred prior to the wait - starting "
                      "the\n"
                      "------- completion code for %x\n",
                      Extension->HistoryMask,Extension->CurrentWaitIrp);

        *((ULONG *)Extension->CurrentWaitIrp->AssociatedIrp.SystemBuffer) =
            Extension->HistoryMask;
        Extension->HistoryMask = 0;
        Extension->CurrentWaitIrp->IoStatus.Information = sizeof(ULONG);
        Extension->CurrentWaitIrp->IoStatus.Status = STATUS_SUCCESS;

        CyyInsertQueueDpc(&Extension->CommWaitDpc, NULL, NULL, Extension);

    }

    return FALSE;
}

BOOLEAN
CyyFinishOldWait(
    IN PVOID Context
    )

/*++

Routine Description:

    This routine will check to see if the ISR still knows about
    a wait irp by checking to see if the Irpmasklocation is non-null.
    If it is then it will zero the Irpmasklocation (which in effect
    grabs the irp away from the isr).  This routine is only called
    buy the cancel code for the wait.

    NOTE: This is called by KeSynchronizeExecution.

Arguments:

    Context - A pointer to the device extension

Return Value:

    Always FALSE.

--*/

{

    PCYY_DEVICE_EXTENSION Extension = Context;
    CYY_LOCKED_PAGED_CODE();

    CyyDbgPrintEx(CYYDIAG3, "In CyyFinishOldWait\n");

    if (Extension->IrpMaskLocation) {

        CyyDbgPrintEx(CYYDIAG4, "The isr still owns the irp %x, mask "
                      "location is %x\n"
                      "------- and system buffer is %x\n",
                      Extension->CurrentWaitIrp,Extension->IrpMaskLocation,
                      Extension->CurrentWaitIrp->AssociatedIrp.SystemBuffer);
        //
        // The isr still "owns" the irp.
        //

        *Extension->IrpMaskLocation = 0;
        Extension->IrpMaskLocation = NULL;

        Extension->CurrentWaitIrp->IoStatus.Information = sizeof(ULONG);

        //
        // We don't decrement the reference since the completion routine
        // will do that.
        //

        CyyInsertQueueDpc(&Extension->CommWaitDpc, NULL, NULL, Extension);

    }

    //
    // Don't wipe out any historical data we are still interested in.
    //

    Extension->HistoryMask &= *((ULONG *)Extension->CurrentMaskIrp->
                                            AssociatedIrp.SystemBuffer);

    Extension->IsrWaitMask = *((ULONG *)Extension->CurrentMaskIrp->
                                            AssociatedIrp.SystemBuffer);
    CyyDbgPrintEx( CYYDIAG4, "Set mask location of %x, in irp %x, with "
                   "system buffer of %x\n",
                   Extension->IrpMaskLocation, Extension->CurrentMaskIrp,
                   Extension->CurrentMaskIrp->AssociatedIrp.SystemBuffer);
    return FALSE;
}

VOID
CyyCancelWait(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    )

/*++

Routine Description:

    This routine is used to cancel a irp that is waiting on
    a comm event.

Arguments:

    DeviceObject - Pointer to the device object for this device

    Irp - Pointer to the IRP for the current request

Return Value:

    None.

--*/

{

    PCYY_DEVICE_EXTENSION Extension = DeviceObject->DeviceExtension;
    CYY_LOCKED_PAGED_CODE();

    CyyDbgPrintEx(CYYDIAG3, "In CyyCancelWait\n");

    CyyDbgPrintEx(CYYDIAG4, "Canceling wait for irp %x\n",
                  Extension->CurrentWaitIrp);

    CyyTryToCompleteCurrent(Extension, CyyGrabWaitFromIsr,
                            Irp->CancelIrql, STATUS_CANCELLED,
                            &Extension->CurrentWaitIrp, NULL, NULL, NULL,
                            NULL, NULL, SERIAL_REF_CANCEL);

}

VOID
CyyCompleteWait(
    IN PKDPC Dpc,
    IN PVOID DeferredContext,
    IN PVOID SystemContext1,
    IN PVOID SystemContext2
    )

{
    PCYY_DEVICE_EXTENSION Extension = DeferredContext;
    KIRQL OldIrql;


    CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyyCompleteWait(%X)\n",
                  Extension);

    CyyDbgPrintEx(CYYDIAG3, "In CyyCompleteWait\n");

    UNREFERENCED_PARAMETER(SystemContext1);
    UNREFERENCED_PARAMETER(SystemContext2);

    IoAcquireCancelSpinLock(&OldIrql);

    CyyDbgPrintEx(CYYDIAG4, "Completing wait for irp %x\n",
                  Extension->CurrentWaitIrp);

    CyyTryToCompleteCurrent(Extension, NULL, OldIrql, STATUS_SUCCESS,
                            &Extension->CurrentWaitIrp, NULL, NULL, NULL,
                            NULL, NULL, SERIAL_REF_ISR);

    CyyDpcEpilogue(Extension, Dpc);


    CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyyCompleteWait\n");
}

=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\y\cyyport\cyypnp.c ===
/*--------------------------------------------------------------------------
*	
*   Copyright (C) Cyclades Corporation, 1999-2001.
*   All rights reserved.
*	
*   Cyclom-Y Port Driver
*	
*   This file:      cyypnp.c
*	
*   Description:    This module contains the code that handles the 
*                   plug and play IRPs for the Cyclom-Y Port driver.
*
*   Notes:          This code supports Windows 2000 and Windows XP,
*                   x86 and IA64 processors.
*	
*   Complies with Cyclades SW Coding Standard rev 1.3.
*	
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*   Change History
*
*--------------------------------------------------------------------------
*   Initial implementation based on Microsoft sample code.
*
*--------------------------------------------------------------------------
*/

#include "precomp.h"


#define ALLF    0xffffffff

static const PHYSICAL_ADDRESS CyyPhysicalZero = {0};



#ifdef ALLOC_PRAGMA
#pragma alloc_text(PAGESRP0, CyyCreateDevObj)
#pragma alloc_text(PAGESRP0, CyyAddDevice)
#pragma alloc_text(PAGESRP0, CyyPnpDispatch)
#pragma alloc_text(PAGESRP0, CyyStartDevice)
// REMOVED FANNY #pragma alloc_text(PAGESRP0, CyyFinishStartDevice)
// REMOVED FANNY #pragma alloc_text(PAGESRP0, CyyGetPortInfo)
#pragma alloc_text(PAGESRP0, CyyDoExternalNaming)
#pragma alloc_text(PAGESRP0, CyyReportMaxBaudRate)
// REMOVED FANNY. NOT CALLED.#pragma alloc_text(PAGESRP0, CyyControllerCallBack)
// REMOVED FANNY #pragma alloc_text(PAGESRP0, CyyItemCallBack)
#pragma alloc_text(PAGESRP0, CyyUndoExternalNaming)
#endif // ALLOC_PRAGMA

//
// Instantiate the GUID
//

#if !defined(FAR)
#define FAR
#endif // !defined(FAR)

#include <initguid.h>

DEFINE_GUID(GUID_CLASS_COMPORT, 0x86e0d1e0L, 0x8089, 0x11d0, 0x9c, 0xe4, 0x08,
            0x00, 0x3e, 0x30, 0x1f, 0x73);


#if DBG

UCHAR *CyySystemCapString[] = {
   "PowerSystemUnspecified",
   "PowerSystemWorking",
   "PowerSystemSleeping1",
   "PowerSystemSleeping2",
   "PowerSystemSleeping3",
   "PowerSystemHibernate",
   "PowerSystemShutdown",
   "PowerSystemMaximum"
};

UCHAR *CyyDeviceCapString[] = {
   "PowerDeviceUnspecified",
   "PowerDeviceD0",
   "PowerDeviceD1",
   "PowerDeviceD2",
   "PowerDeviceD3",
   "PowerDeviceMaximum"
};

#endif // DBG


NTSTATUS
CyySyncCompletion(IN PDEVICE_OBJECT DeviceObject, IN PIRP Irp,
                  IN PKEVENT CyySyncEvent)
{
   KeSetEvent(CyySyncEvent, IO_NO_INCREMENT, FALSE);
   return STATUS_MORE_PROCESSING_REQUIRED;
}

#if 0
ULONG 
myatoi(PWCHAR pszInt)
{
    int   retval;
    TCHAR cSave;

    for (retval = 0; *pszInt; ++pszInt) {
        if ((cSave = (TCHAR) (*pszInt - TEXT('0'))) > (TCHAR) 9)
            break;

        retval = (int) (retval * 10 + (int) cSave);
    }
    return (retval);
}
#endif

ULONG 
CyyCompareString(PWCHAR PString1, PWCHAR PString2, ULONG Count)
{
    do {
        if (*PString1 || *PString2) {
            if (*PString1 != *PString2) {
                break;
            }
            PString1++;
            PString2++;
            Count--;
        } else {
            break;
        }
    } while (Count);
    return (Count);
}


NTSTATUS
CyyCreateDevObj(IN PDRIVER_OBJECT DriverObject,
                IN PDEVICE_OBJECT PPdo,
                OUT PDEVICE_OBJECT *NewDeviceObject)

/*++

Routine Description:

    This routine will create and initialize a functional device object to
    be attached to a Cyclom-Y controller PDO.

Arguments:

    DriverObject - a pointer to the driver object this is created under
    NewDeviceObject - a location to store the pointer to the new device object

Return Value:

    STATUS_SUCCESS if everything was successful
    reason for failure otherwise

--*/

{
   UNICODE_STRING deviceObjName;
   PDEVICE_OBJECT deviceObject = NULL;
   PCYY_DEVICE_EXTENSION pDevExt;
   NTSTATUS status = STATUS_SUCCESS;
   static ULONG currentInstance = 0;
   UNICODE_STRING instanceStr;
   WCHAR instanceNumberBuffer[20];
   ULONG busNumber = 0xFFFFFFFF;
   ULONG resultLength;
   WCHAR hwID[100];
   PWCHAR portNumberPtr;
   INTERFACE_TYPE interfaceType;
   ULONG numberToAppend;
   //ULONG portNumber;


   PAGED_CODE();

   CyyDbgPrintEx(CYYTRACECALLS, "Enter CyyCreateDevObj\n");

   // Find out if parent board is ISA or PCI

   status = IoGetDeviceProperty (PPdo,
                                 DevicePropertyLegacyBusType,
                                 sizeof(interfaceType),
                                 &interfaceType,
                                 &resultLength);

   if (!NT_SUCCESS (status)) {

      CyyLogError( DriverObject,NULL,CyyPhysicalZero,CyyPhysicalZero,0,0,0,0,
                   status,CYY_UNABLE_TO_GET_BUS_TYPE,0,NULL,0,NULL);

      CyyDbgPrintEx(CYYERRORS,"CyyCreateDevObj: IoGetDeviceProperty LegacyBusType "
                    "failed (%x)\n",status);

      return status;
   }

   if (interfaceType == PCIBus) {

      // Get PCI slot number and port number to generate device name.

      status = IoGetDeviceProperty (PPdo,
                                    DevicePropertyBusNumber,
                                    sizeof(busNumber),
                                    &busNumber,
                                    &resultLength);

      if (!NT_SUCCESS (status)) {
         busNumber = 0xFFFFFFFF; // Just to make sure set it again
         //CyyLogError( DriverObject,NULL,CyyPhysicalZero,CyyPhysicalZero,0,0,0,0,
         //             status,CYY_UNABLE_TO_GET_BUS_NUMBER,0,NULL,0,NULL);

         CyyDbgPrintEx(CYYERRORS,"CyyCreateDevObj: IoGetDeviceProperty BusNumber "
                       "failed (%x)\n",status);

         goto NoBusNumber;
      }

      status = IoGetDeviceProperty (PPdo,
                                    DevicePropertyHardwareID,
                                    sizeof(hwID),
                                    hwID,
                                    &resultLength);

      if (!NT_SUCCESS (status)) {
         CyyLogError( DriverObject,NULL,CyyPhysicalZero,CyyPhysicalZero,0,0,0,0,
                      status,CYY_UNABLE_TO_GET_HW_ID,0,NULL,0,NULL);

         CyyDbgPrintEx(CYYERRORS,"CyyCreateDevObj: IoGetDeviceProperty HardwareID "
                       "failed (%x)\n",status);


         return status;
      }

      if (CyyCompareString(hwID,CYYPORT_PNP_ID_WSTR,sizeof(CYYPORT_PNP_ID_WSTR)/sizeof(WCHAR)-1)!=0) {

         CyyLogError( DriverObject,NULL,CyyPhysicalZero,CyyPhysicalZero,0,0,0,0,
                      status,CYY_BAD_HW_ID,0,NULL,0,NULL);

         CyyDbgPrintEx(CYYERRORS,"CyyCreateDevObj: Bad HardwareID: %ws\n",hwID);
         
         return STATUS_UNSUCCESSFUL;
      }

      portNumberPtr = hwID+sizeof(CYYPORT_PNP_ID_WSTR)/sizeof(WCHAR)-1;

      //portNumber = myatoi(portNumberPtr);
      //if ((portNumber < 1) || (portNumber > CYY_MAX_PORTS)){
      //
      //   CyyLogError( DriverObject,NULL,CyyPhysicalZero,CyyPhysicalZero,0,0,0,0,
      //                status,CYY_BAD_HW_ID,0,NULL,0,NULL);
      //
      //   CyyDbgPrintEx (CYYERRORS,"CyyCreateDevObj: Bad HardwareID: %ws\n",hwID);
      //   
      //   return STATUS_UNSUCCESSFUL;
      //}

NoBusNumber:;

   }


   //
   // Zero out allocated memory pointers so we know if they must be freed
   //

   RtlZeroMemory(&deviceObjName, sizeof(UNICODE_STRING));

   deviceObjName.MaximumLength = DEVICE_OBJECT_NAME_LENGTH * sizeof(WCHAR);
   deviceObjName.Buffer = ExAllocatePool(PagedPool, deviceObjName.MaximumLength
                                     + sizeof(WCHAR));

//********************************************
// Error Injection
//  if (deviceObjName.Buffer != NULL) {
//      ExFreePool(deviceObjName.Buffer);
//   }
//   deviceObjName.Buffer = NULL;
//********************************************
   if (deviceObjName.Buffer == NULL) {
      CyyLogError(DriverObject, NULL, CyyPhysicalZero, CyyPhysicalZero,
                     0, 0, 0, 11, STATUS_SUCCESS, CYY_INSUFFICIENT_RESOURCES,
                     0, NULL, 0, NULL);
      CyyDbgPrintEx(CYYERRORS,
                    "Couldn't allocate memory for device name\n");

      return STATUS_INSUFFICIENT_RESOURCES; //STATUS_SUCCESS replaced in build 2128

   }

   RtlZeroMemory(deviceObjName.Buffer, deviceObjName.MaximumLength
                 + sizeof(WCHAR));

   RtlAppendUnicodeToString(&deviceObjName, L"\\Device\\");

   if (busNumber == 0xFFFFFFFF) {
      numberToAppend = currentInstance++;
   } else {
      numberToAppend = busNumber;
   }      

   RtlInitUnicodeString(&instanceStr, NULL);
   instanceStr.MaximumLength = sizeof(instanceNumberBuffer);
   instanceStr.Buffer = instanceNumberBuffer;
   RtlIntegerToUnicodeString(numberToAppend, 10, &instanceStr);

   if (busNumber == 0xFFFFFFFF) {
      // The device name is something like \Device\Cyyport1
      RtlAppendUnicodeToString(&deviceObjName, L"CyyPort");
      RtlAppendUnicodeStringToString(&deviceObjName, &instanceStr);
   } else {
      // The device name is something like \Device\Pci5Cyyport1
      RtlAppendUnicodeToString(&deviceObjName, L"Pci");
      RtlAppendUnicodeStringToString(&deviceObjName, &instanceStr);
      RtlAppendUnicodeToString(&deviceObjName, L"CyyPort");
      RtlAppendUnicodeToString(&deviceObjName,portNumberPtr);
   }


   //
   // Create the device object
   //

   status = IoCreateDevice(DriverObject, sizeof(CYY_DEVICE_EXTENSION),
                           &deviceObjName, FILE_DEVICE_SERIAL_PORT, 
                           FILE_DEVICE_SECURE_OPEN, TRUE, &deviceObject);


   if (!NT_SUCCESS(status)) {
      CyyLogError(DriverObject, NULL, CyyPhysicalZero, CyyPhysicalZero,
                  0, 0, 0, 0, STATUS_SUCCESS, CYY_DEVICE_CREATION_FAILURE,
                  0, NULL, 0, NULL);
      CyyDbgPrintEx(CYYERRORS, "CyyAddDevice: Create device failed - %x "
                    "\n", status);
      goto CyyCreateDevObjError;
   }

   ASSERT(deviceObject != NULL);


   //
   // The device object has a pointer to an area of non-paged
   // pool allocated for this device.  This will be the device
   // extension. Zero it out.
   //

   pDevExt = deviceObject->DeviceExtension;
   RtlZeroMemory(pDevExt, sizeof(CYY_DEVICE_EXTENSION));

   //
   // Initialize the count of IRP's pending
   //

   pDevExt->PendingIRPCnt = 1;


   //
   // Initialize the count of DPC's pending
   //

   pDevExt->DpcCount = 1;

   //
   // Allocate Pool and save the nt device name in the device extension.
   //

   pDevExt->DeviceName.Buffer =
      ExAllocatePool(PagedPool, deviceObjName.Length + sizeof(WCHAR));

//******************************************
// Error Injection
//   if (pDevExt->DeviceName.Buffer != NULL) {
//         ExFreePool(pDevExt->DeviceName.Buffer);
//   }
//   pDevExt->DeviceName.Buffer = NULL;
//******************************************
   if (!pDevExt->DeviceName.Buffer) {

      CyyLogError(
                    DriverObject,
                    NULL,
                    CyyPhysicalZero,
                    CyyPhysicalZero,
                    0,
                    0,
                    0,
                    12,
                    STATUS_SUCCESS,
                    CYY_INSUFFICIENT_RESOURCES,
                    0,
                    NULL,
                    0,
                    NULL
                    );
      CyyDbgPrintEx(CYYERRORS, "Couldn't allocate memory for DeviceName\n");

      status = STATUS_INSUFFICIENT_RESOURCES;
      goto CyyCreateDevObjError;
   }

   pDevExt->DeviceName.MaximumLength = deviceObjName.Length
      + sizeof(WCHAR);

   //
   // Zero fill it.
   //

   RtlZeroMemory(pDevExt->DeviceName.Buffer,
                 pDevExt->DeviceName.MaximumLength);

   RtlAppendUnicodeStringToString(&pDevExt->DeviceName, &deviceObjName);

   pDevExt->NtNameForPort.Buffer = ExAllocatePool(PagedPool,
                                                  deviceObjName.MaximumLength);

   if (pDevExt->NtNameForPort.Buffer == NULL) {
      CyyLogError(
                    DriverObject,
                    NULL,
                    CyyPhysicalZero,
                    CyyPhysicalZero,
                    0,
                    0,
                    0,
                    13,
                    STATUS_SUCCESS,
                    CYY_INSUFFICIENT_RESOURCES,
                    0,
                    NULL,
                    0,
                    NULL
                    );
      CyyDbgPrintEx(CYYERRORS, "CyyAddDevice: Cannot allocate memory for "
                    "NtName\n");
      status = STATUS_INSUFFICIENT_RESOURCES;
      goto CyyCreateDevObjError;
   }

   pDevExt->NtNameForPort.MaximumLength = deviceObjName.MaximumLength;
   RtlAppendUnicodeStringToString(&pDevExt->NtNameForPort,
                                  &deviceObjName);



   //
   // Set up the device extension.
   //

   pDevExt->DeviceIsOpened = FALSE;
   pDevExt->DeviceObject   = deviceObject;
   pDevExt->DriverObject   = DriverObject;
   pDevExt->PowerState     = PowerDeviceD0;

   //TODO FANNY: ADD TxFifoAmount?
   pDevExt->TxFifoAmount           = driverDefaults.TxFIFODefault;
   //pDevExt->CreatedSymbolicLink    = TRUE;  Removed by Fanny
   pDevExt->OwnsPowerPolicy = TRUE;
   if (interfaceType == PCIBus) {

      pDevExt->IsPci = 1;
      pDevExt->PciSlot = busNumber;
   }
   //pDevExt->PortIndex = portNumber-1; 

//TODO FANNY: SEE LATER IF WE NEED THE LISTS TO HANDLE INTERRUPT
//   InitializeListHead(&pDevExt->CommonInterruptObject);
//   InitializeListHead(&pDevExt->TopLevelSharers);
//   InitializeListHead(&pDevExt->MultiportSiblings);
   InitializeListHead(&pDevExt->AllDevObjs);
   InitializeListHead(&pDevExt->ReadQueue);
   InitializeListHead(&pDevExt->WriteQueue);
   InitializeListHead(&pDevExt->MaskQueue);
   InitializeListHead(&pDevExt->PurgeQueue);
   InitializeListHead(&pDevExt->StalledIrpQueue);

   ExInitializeFastMutex(&pDevExt->OpenMutex);
   ExInitializeFastMutex(&pDevExt->CloseMutex);

   //
   // Initialize the spinlock associated with fields read (& set)
   // by IO Control functions and the flags spinlock.
   //

   KeInitializeSpinLock(&pDevExt->ControlLock);
   KeInitializeSpinLock(&pDevExt->FlagsLock);

   KeInitializeEvent(&pDevExt->PendingIRPEvent, SynchronizationEvent, FALSE);
   KeInitializeEvent(&pDevExt->PendingDpcEvent, SynchronizationEvent, FALSE);
   KeInitializeEvent(&pDevExt->PowerD0Event, SynchronizationEvent, FALSE);


   deviceObject->Flags &= ~DO_DEVICE_INITIALIZING;

   *NewDeviceObject = deviceObject;

   ExFreePool(deviceObjName.Buffer);

   CyyDbgPrintEx(CYYTRACECALLS, "Leave CyyCreateDevObj\n");
   return STATUS_SUCCESS;


   CyyCreateDevObjError:

   CyyDbgPrintEx(CYYERRORS, "CyyCreateDevObj Error, Cleaning up\n");

   //
   // Free the allocated strings for the NT and symbolic names if they exist.
   //

   if (deviceObjName.Buffer != NULL) {
      ExFreePool(deviceObjName.Buffer);
   }

   if (deviceObject) {

      if (pDevExt->NtNameForPort.Buffer != NULL) {
         ExFreePool(pDevExt->NtNameForPort.Buffer);
      }

      if (pDevExt->DeviceName.Buffer != NULL) {
         ExFreePool(pDevExt->DeviceName.Buffer);
      }

      IoDeleteDevice(deviceObject);
   }

   *NewDeviceObject = NULL;

   CyyDbgPrintEx(CYYTRACECALLS, "Leave CyyCreateDevObj\n");
   return status;
}


NTSTATUS
CyyAddDevice(IN PDRIVER_OBJECT DriverObject, IN PDEVICE_OBJECT PPdo)

/*++

Routine Description:

    This routine creates a functional device object for com ports in the
    system and attaches them to the physical device objects for the ports


Arguments:

    DriverObject - a pointer to the object for this driver

    PPdo - a pointer to the PDO in the stack we need to attach to

Return Value:

    status from device creation and initialization

--*/

{
   PDEVICE_OBJECT pNewDevObj = NULL;
   PDEVICE_OBJECT pLowerDevObj = NULL;
   NTSTATUS status;
   PCYY_DEVICE_EXTENSION pDevExt;

   PAGED_CODE();

   CyyDbgPrintEx(CYYTRACECALLS, "Enter CyyAddDevice with PPdo 0x%x\n",
                 PPdo);

   if (PPdo == NULL) {
      //
      // Return no more devices
      //
      CyyLogError(DriverObject, NULL, CyyPhysicalZero, CyyPhysicalZero,
                  0, 0, 0, 0, STATUS_SUCCESS, CYY_NO_PHYSICAL_DEVICE_OBJECT,
                  0, NULL, 0, NULL);
      CyyDbgPrintEx(CYYERRORS, "CyyAddDevice: Enumeration request, "
                    "returning NO_MORE_ENTRIES\n");

      return (STATUS_NO_MORE_ENTRIES);
   }

   //
   // create and initialize the new device object
   //

   status = CyyCreateDevObj(DriverObject, PPdo, &pNewDevObj);

   if (!NT_SUCCESS(status)) {

      CyyDbgPrintEx(CYYERRORS,
                    "CyyAddDevice - error creating new devobj [%#08lx]\n",
                    status);
      return status;
   }


   //
   // Layer our DO on top of the lower device object
   // The return value is a pointer to the device object to which the
   // DO is actually attached.
   //

   pLowerDevObj = IoAttachDeviceToDeviceStack(pNewDevObj, PPdo);


   //
   // No status. Do the best we can.
   //
   ASSERT(pLowerDevObj != NULL);


   pDevExt = pNewDevObj->DeviceExtension;
   pDevExt->LowerDeviceObject = pLowerDevObj;
   pDevExt->Pdo = PPdo;


   //
   // Specify that this driver only supports buffered IO.  This basically
   // means that the IO system copies the users data to and from
   // system supplied buffers.
   //
   // Also specify that we are power pagable.
   //

   pNewDevObj->Flags |= DO_BUFFERED_IO | DO_POWER_PAGABLE;

   CyyDbgPrintEx(CYYTRACECALLS, "Leave CyyAddDevice\n");

   return status;
}


NTSTATUS
CyyPnpDispatch(IN PDEVICE_OBJECT PDevObj, IN PIRP PIrp)

/*++

Routine Description:

    This is a dispatch routine for the IRPs that come to the driver with the
    IRP_MJ_PNP major code (plug-and-play IRPs).

Arguments:

    PDevObj - Pointer to the device object for this device

    PIrp - Pointer to the IRP for the current request

Return Value:

    The function value is the final status of the call


--*/

{
   PCYY_DEVICE_EXTENSION pDevExt = PDevObj->DeviceExtension;
   PDEVICE_OBJECT pLowerDevObj = pDevExt->LowerDeviceObject;
   PIO_STACK_LOCATION pIrpStack = IoGetCurrentIrpStackLocation(PIrp);
   NTSTATUS status;
   PDEVICE_CAPABILITIES pDevCaps;

   PAGED_CODE();

   if ((status = CyyIRPPrologue(PIrp, pDevExt)) != STATUS_SUCCESS) {
      CyyCompleteRequest(pDevExt, PIrp, IO_NO_INCREMENT);
      return status;
   }

   switch (pIrpStack->MinorFunction) {
   case IRP_MN_QUERY_CAPABILITIES: {
      PKEVENT pQueryCapsEvent;
      SYSTEM_POWER_STATE cap;

      CyyDbgPrintEx(CYYPNPPOWER,
                    "Got IRP_MN_QUERY_DEVICE_CAPABILITIES IRP\n");

      pQueryCapsEvent = ExAllocatePool(NonPagedPool, sizeof(KEVENT));

      if (pQueryCapsEvent == NULL) {
         PIrp->IoStatus.Status = STATUS_INSUFFICIENT_RESOURCES;
         CyyCompleteRequest(pDevExt, PIrp, IO_NO_INCREMENT);
         return STATUS_INSUFFICIENT_RESOURCES;
      }

      KeInitializeEvent(pQueryCapsEvent, SynchronizationEvent, FALSE);

      IoCopyCurrentIrpStackLocationToNext(PIrp);
      IoSetCompletionRoutine(PIrp, CyySyncCompletion, pQueryCapsEvent,
                             TRUE, TRUE, TRUE);

      status = IoCallDriver(pLowerDevObj, PIrp);


      //
      // Wait for lower drivers to be done with the Irp
      //

      if (status == STATUS_PENDING) {
         KeWaitForSingleObject(pQueryCapsEvent, Executive, KernelMode, FALSE,
                               NULL);
      }

      ExFreePool(pQueryCapsEvent);

      status = PIrp->IoStatus.Status;

      if (pIrpStack->Parameters.DeviceCapabilities.Capabilities == NULL) {
         goto errQueryCaps;
      }

      //
      // Save off their power capabilities
      //

      CyyDbgPrintEx(CYYPNPPOWER, "Mapping power capabilities\n");

      pIrpStack = IoGetCurrentIrpStackLocation(PIrp);

      pDevCaps = pIrpStack->Parameters.DeviceCapabilities.Capabilities;

      for (cap = PowerSystemSleeping1; cap < PowerSystemMaximum;
           cap++) {
#if DBG
         CyyDbgPrintEx(CYYPNPPOWER, "  %d: %s <--> %s\n",
                       cap, CyySystemCapString[cap],
                       CyyDeviceCapString[pDevCaps->DeviceState[cap]]);
#endif

         pDevExt->DeviceStateMap[cap] = pDevCaps->DeviceState[cap];
      }

      pDevExt->DeviceStateMap[PowerSystemUnspecified]
         = PowerDeviceUnspecified;

      pDevExt->DeviceStateMap[PowerSystemWorking]
        = PowerDeviceD0;

      pDevExt->SystemWake = pDevCaps->SystemWake;
      pDevExt->DeviceWake = pDevCaps->DeviceWake;

      errQueryCaps:;

      CyyCompleteRequest(pDevExt, PIrp, IO_NO_INCREMENT);
      return status;
   }

   case IRP_MN_QUERY_DEVICE_RELATIONS:
      //
      // We just pass this down -- serenum enumerates our bus for us.
      //

      CyyDbgPrintEx(CYYPNPPOWER, "Got IRP_MN_QUERY_DEVICE_RELATIONS Irp\n");

      switch (pIrpStack->Parameters.QueryDeviceRelations.Type) {
      case BusRelations:
         CyyDbgPrintEx(CYYPNPPOWER, "------- BusRelations Query\n");
         break;

      case EjectionRelations:
         CyyDbgPrintEx(CYYPNPPOWER, "------- EjectionRelations Query\n");
         break;

      case PowerRelations:
         CyyDbgPrintEx(CYYPNPPOWER, "------- PowerRelations Query\n");
         break;

      case RemovalRelations:
         CyyDbgPrintEx(CYYPNPPOWER, "------- RemovalRelations Query\n");
         break;

      case TargetDeviceRelation:
         CyyDbgPrintEx(CYYPNPPOWER, "------- TargetDeviceRelation Query\n");
         break;

      default:
         CyyDbgPrintEx(CYYPNPPOWER, "------- Unknown Query\n");
         break;
      }

      IoSkipCurrentIrpStackLocation(PIrp);
      status = CyyIoCallDriver(pDevExt, pLowerDevObj, PIrp);
      return status;


   case IRP_MN_QUERY_INTERFACE:
      CyyDbgPrintEx(CYYPNPPOWER, "Got IRP_MN_QUERY_INTERFACE Irp\n");
      break;


   case IRP_MN_QUERY_RESOURCE_REQUIREMENTS:
      CyyDbgPrintEx(CYYPNPPOWER, "Got IRP_MN_QUERY_RESOURCE_REQUIREMENTS Irp"
                    "\n");
      break;


   case IRP_MN_START_DEVICE: {
      PVOID startLockPtr;

      CyyDbgPrintEx(CYYPNPPOWER, "Got IRP_MN_START_DEVICE Irp\n");

      //
      // CyyStartDevice will pass this Irp to the next driver,
      // and process it as completion so just complete it here.
      //

      CyyLockPagableSectionByHandle(CyyGlobals.PAGESER_Handle);

      //
      // We used to make sure the stack was powered up, but now it
      // is supposed to be done implicitly by start_device.
      // If that wasn't the case we would just make this call:
      //
      //status = CyyGotoPowerState(PDevObj, pDevExt, PowerDeviceD0);
      

      pDevExt->PowerState = PowerDeviceD0;

      status = CyyStartDevice(PDevObj, PIrp);

      (void)CyyGotoPowerState(PDevObj, pDevExt, PowerDeviceD3);
      
      CyyUnlockPagableImageSection(CyyGlobals.PAGESER_Handle);


      PIrp->IoStatus.Status = status;

      CyyCompleteRequest(pDevExt, PIrp, IO_NO_INCREMENT);
      return status;
   }


   case IRP_MN_READ_CONFIG:
      CyyDbgPrintEx(CYYPNPPOWER, "Got IRP_MN_READ_CONFIG Irp\n");
      break;


   case IRP_MN_WRITE_CONFIG:
      CyyDbgPrintEx(CYYPNPPOWER, "Got IRP_MN_WRITE_CONFIG Irp\n");
      break;


   case IRP_MN_EJECT:
      CyyDbgPrintEx(CYYPNPPOWER, "Got IRP_MN_EJECT Irp\n");
      break;


   case IRP_MN_SET_LOCK:
      CyyDbgPrintEx(CYYPNPPOWER, "Got IRP_MN_SET_LOCK Irp\n");
      break;


   case IRP_MN_QUERY_ID: {
         UNICODE_STRING pIdBuf;
         PWCHAR pPnpIdStr;
         ULONG pnpIdStrLen;
         ULONG portIndex = 0;
         HANDLE pnpKey;
         WCHAR WideString[MAX_DEVICE_ID_LEN];

         CyyDbgPrintEx(CYYPNPPOWER, "Got IRP_MN_QUERY_ID Irp\n");

         // change from build 1946 to 2000.
         if (pIrpStack->Parameters.QueryId.IdType != BusQueryHardwareIDs
             && pIrpStack->Parameters.QueryId.IdType != BusQueryCompatibleIDs) {
            IoSkipCurrentIrpStackLocation(PIrp);
            return CyyIoCallDriver(pDevExt, pLowerDevObj, PIrp);
         }

         if (pIrpStack->Parameters.QueryId.IdType == BusQueryCompatibleIDs) {
            PIrp->IoStatus.Status = STATUS_SUCCESS;
            IoSkipCurrentIrpStackLocation(PIrp);
            return CyyIoCallDriver(pDevExt, pLowerDevObj, PIrp);
         }

         status = IoOpenDeviceRegistryKey(pDevExt->Pdo, PLUGPLAY_REGKEY_DEVICE,
                                          STANDARD_RIGHTS_WRITE, &pnpKey);

         if (!NT_SUCCESS(status)) {
            PIrp->IoStatus.Status = status;

            CyyCompleteRequest(pDevExt, PIrp, IO_NO_INCREMENT);
            return status;

         }

         status = CyyGetRegistryKeyValue (pnpKey, L"PortIndex",
                                             sizeof(L"PortIndex"),
                                             &portIndex,
                                             sizeof (ULONG));

         ZwClose(pnpKey);

         if (!NT_SUCCESS(status)) {
            PIrp->IoStatus.Status = status;
            CyyCompleteRequest(pDevExt, PIrp, IO_NO_INCREMENT);
            return status;
         }

//         pPnpIdStr = isMulti ? SERIAL_PNP_MULTI_ID_STR : SERIAL_PNP_ID_STR;
//         pnpIdStrLen = isMulti ? sizeof(SERIAL_PNP_MULTI_ID_STR)
//            : sizeof(SERIAL_PNP_ID_STR);


         pnpIdStrLen = swprintf(WideString,L"%s%u",CYYPORT_PNP_ID_WSTR,portIndex+1);
         pnpIdStrLen = pnpIdStrLen * sizeof(WCHAR) + sizeof(UNICODE_NULL); 
         pPnpIdStr = WideString;

         if (PIrp->IoStatus.Information != 0) {
            ULONG curStrLen;
            ULONG allocLen = 0;
            PWSTR curStr = (PWSTR)PIrp->IoStatus.Information;

            //
            // We have to walk the strings to count the amount of space to
            // reallocate
            //

            while ((curStrLen = wcslen(curStr)) != 0) {
               allocLen += curStrLen * sizeof(WCHAR) + sizeof(UNICODE_NULL);
               curStr += curStrLen + 1;
            }

            allocLen += sizeof(UNICODE_NULL);

            pIdBuf.Buffer = ExAllocatePool(PagedPool, allocLen
                                           + pnpIdStrLen
                                           + sizeof(WCHAR));

            if (pIdBuf.Buffer == NULL) {
               //
               // Clean up after other drivers since we are
               // sending the irp back up.
               //

               ExFreePool((PWSTR)PIrp->IoStatus.Information);


               PIrp->IoStatus.Status = STATUS_INSUFFICIENT_RESOURCES;
               PIrp->IoStatus.Information = 0;
               CyyCompleteRequest(pDevExt, PIrp, IO_NO_INCREMENT);
               return STATUS_INSUFFICIENT_RESOURCES;
            }

            pIdBuf.MaximumLength = (USHORT)(allocLen + pnpIdStrLen);
            pIdBuf.Length = (USHORT)allocLen - sizeof(UNICODE_NULL);

            RtlZeroMemory(pIdBuf.Buffer, pIdBuf.MaximumLength + sizeof(WCHAR));
            RtlCopyMemory(pIdBuf.Buffer, (PWSTR)PIrp->IoStatus.Information,
                          allocLen);
            RtlAppendUnicodeToString(&pIdBuf, pPnpIdStr);

            //
            // Free what the previous driver allocated
            //

            ExFreePool((PWSTR)PIrp->IoStatus.Information);


         } else {

            CyyDbgPrintEx(CYYPNPPOWER, "ID is sole ID\n");

            pIdBuf.Buffer = ExAllocatePool(PagedPool, pnpIdStrLen
                                           + sizeof(WCHAR) * 2);

            if (pIdBuf.Buffer == NULL) {
               PIrp->IoStatus.Status = STATUS_INSUFFICIENT_RESOURCES;
               PIrp->IoStatus.Information = 0;
               CyyCompleteRequest(pDevExt, PIrp, IO_NO_INCREMENT);
               return STATUS_INSUFFICIENT_RESOURCES;
            }

            pIdBuf.MaximumLength  = (USHORT)pnpIdStrLen;
            pIdBuf.Length = 0;

            RtlZeroMemory(pIdBuf.Buffer, pIdBuf.MaximumLength + sizeof(WCHAR)
                          * 2);

            RtlAppendUnicodeToString(&pIdBuf, pPnpIdStr);
         }

         PIrp->IoStatus.Information = (ULONG_PTR)pIdBuf.Buffer;
         PIrp->IoStatus.Status = STATUS_SUCCESS;

         IoCopyCurrentIrpStackLocationToNext(PIrp);
         return CyyIoCallDriver(pDevExt, pLowerDevObj, PIrp);
      }

      case IRP_MN_FILTER_RESOURCE_REQUIREMENTS: {
         HANDLE pnpKey;
         PKEVENT pResFiltEvent;
         ULONG isMulti = 0;
         PIO_RESOURCE_REQUIREMENTS_LIST pReqList;
         PIO_RESOURCE_LIST pResList;
         PIO_RESOURCE_DESCRIPTOR pResDesc;
         ULONG i, j;
         ULONG reqCnt;
         ULONG gotRuntime;
         ULONG gotMemory;
         ULONG gotInt;
         ULONG listNum;

         CyyDbgPrintEx(CYYPNPPOWER, "Got "
                       "IRP_MN_FILTER_RESOURCE_REQUIREMENTS Irp\n");
         CyyDbgPrintEx(CYYPNPPOWER, "for device %x\n", pLowerDevObj);


         pResFiltEvent = ExAllocatePool(NonPagedPool, sizeof(KEVENT));

         if (pResFiltEvent == NULL) {
            PIrp->IoStatus.Status = STATUS_INSUFFICIENT_RESOURCES;
            CyyCompleteRequest(pDevExt, PIrp, IO_NO_INCREMENT);
            return STATUS_INSUFFICIENT_RESOURCES;
         }

         KeInitializeEvent(pResFiltEvent, SynchronizationEvent, FALSE);

         IoCopyCurrentIrpStackLocationToNext(PIrp);
         IoSetCompletionRoutine(PIrp, CyySyncCompletion, pResFiltEvent,
                                TRUE, TRUE, TRUE);

         status = IoCallDriver(pLowerDevObj, PIrp);


         //
         // Wait for lower drivers to be done with the Irp
         //

         if (status == STATUS_PENDING) {
            KeWaitForSingleObject (pResFiltEvent, Executive, KernelMode, FALSE,
                                   NULL);
         }

         ExFreePool(pResFiltEvent);

         if (PIrp->IoStatus.Information == 0) {
            if (pIrpStack->Parameters.FilterResourceRequirements
                .IoResourceRequirementList == 0) {
               CyyDbgPrintEx(CYYPNPPOWER, "Can't filter NULL resources!\n");
               status = PIrp->IoStatus.Status;
               CyyCompleteRequest(pDevExt, PIrp, IO_NO_INCREMENT);
               return status;
            }

            PIrp->IoStatus.Information = (ULONG_PTR)pIrpStack->Parameters
                                        .FilterResourceRequirements
                                        .IoResourceRequirementList;

         }

// REMOVED FANNY
//         status = IoOpenDeviceRegistryKey(pDevExt->Pdo, PLUGPLAY_REGKEY_DEVICE,
//                                          STANDARD_RIGHTS_WRITE, &pnpKey);
//
//         if (!NT_SUCCESS(status)) {
//            PIrp->IoStatus.Status = status;
//
//            CyyCompleteRequest(pDevExt, PIrp, IO_NO_INCREMENT);
//            return status;
//
//         }
//
//         //
//         // No matter what we add our filter if we can and return success.
//         //
//
//         status = CyyGetRegistryKeyValue (pnpKey, L"MultiportDevice",
//                                             sizeof(L"MultiportDevice"),
//                                             &isMulti,
//                                             sizeof (ULONG));
//
//         ZwClose(pnpKey);

         //
         // Force ISR ports in IO_RES_REQ_LIST to shared status
         // Force interrupts to shared status
         //

         //
         // We will only process the first list -- multiport boards
         // should not have alternative resources
         //

         pReqList = (PIO_RESOURCE_REQUIREMENTS_LIST)PIrp->IoStatus.Information;
         pResList = &pReqList->List[0];

         CyyDbgPrintEx(CYYPNPPOWER, "List has %x lists (including "
                       "alternatives)\n", pReqList->AlternativeLists);

         for (listNum = 0; listNum < (pReqList->AlternativeLists);
              listNum++) {
            gotRuntime = 0;
            gotMemory = 0;
            gotInt = 0;

            CyyDbgPrintEx(CYYPNPPOWER, "List has %x resources in it\n",
                          pResList->Count);

            for (j = 0; (j < pResList->Count); j++) {
               pResDesc = &pResList->Descriptors[j];

               switch (pResDesc->Type) {
               case CmResourceTypeMemory:
                  if (pResDesc->u.Memory.Length == CYY_RUNTIME_LENGTH) {
                      gotRuntime = 1;
                      pResDesc->ShareDisposition = CmResourceShareShared; 
                      //TODO FANNY: Which should be the ShareDisposition for Y?
                      //pResDesc->ShareDisposition = CmResourceShareDriverExclusive; 
                      CyyDbgPrintEx(CYYPNPPOWER, "Sharing Runtime Memory for "
                                    "device %x\n", pLowerDevObj);
                  } else {
                      gotMemory = 1;
                      pResDesc->ShareDisposition = CmResourceShareShared; 
                      //TODO FANNY: Which should be the ShareDisposition for Y?
                      //pResDesc->ShareDisposition = CmResourceShareDriverExclusive; 
                      CyyDbgPrintEx(CYYPNPPOWER, "Sharing Board Memory for "
                                    "device %x\n", pLowerDevObj);
                  }
                  break;

               case CmResourceTypePort:
                  CyyDbgPrintEx(CYYPNPPOWER, "------- We should not have Port resource\n");
                  break;

               case CmResourceTypeInterrupt:
                  gotInt = 1;
                  if (pDevExt->IsPci) {
                      pResDesc->ShareDisposition = CmResourceShareShared;
                      CyyDbgPrintEx(CYYPNPPOWER, "------- Sharing interrupt "
                                    "for device %x\n",
                                    pLowerDevObj);                  
                  }
                  break;

               default:
                  break;
               }

               //
               // If we found what we need, we can break out of the loop
               //

               if (gotRuntime && gotMemory && gotInt) {
                  break;
               }
            }

            pResList = (PIO_RESOURCE_LIST)((PUCHAR)pResList
                                           + sizeof(IO_RESOURCE_LIST)
                                           + sizeof(IO_RESOURCE_DESCRIPTOR)
                                           * (pResList->Count - 1));
         }



         PIrp->IoStatus.Status = STATUS_SUCCESS;
         CyyCompleteRequest(pDevExt, PIrp, IO_NO_INCREMENT);
         return STATUS_SUCCESS;
      }

   case IRP_MN_QUERY_PNP_DEVICE_STATE:
      {
         if (pDevExt->Flags & CYY_FLAGS_BROKENHW) {
            (PNP_DEVICE_STATE)PIrp->IoStatus.Information |= PNP_DEVICE_FAILED;

            PIrp->IoStatus.Status = STATUS_SUCCESS;
         }

         IoCopyCurrentIrpStackLocationToNext(PIrp);
         return CyyIoCallDriver(pDevExt, pLowerDevObj, PIrp);
      }

   case IRP_MN_STOP_DEVICE:
      {
         ULONG pendingIRPs;
         KIRQL oldIrql;

         CyyDbgPrintEx(CYYPNPPOWER, "Got IRP_MN_STOP_DEVICE Irp ");
         CyyDbgPrintEx(CYYPNPPOWER, "for device %x\n", pLowerDevObj);


//REMOVED FANNY FOR NOW
//         ASSERT(!pDevExt->PortOnAMultiportCard);


         CyySetFlags(pDevExt, CYY_FLAGS_STOPPED);
         CyySetAccept(pDevExt,CYY_PNPACCEPT_STOPPED);
         CyyClearAccept(pDevExt, CYY_PNPACCEPT_STOPPING);

         pDevExt->PNPState = CYY_PNP_STOPPING;

         //
         // From this point on all non-PNP IRP's will be queued
         //

         //
         // Decrement for entry here
         //

         InterlockedDecrement(&pDevExt->PendingIRPCnt);

         //
         // Decrement for stopping
         //

         pendingIRPs = InterlockedDecrement(&pDevExt->PendingIRPCnt);

         if (pendingIRPs) {
            KeWaitForSingleObject(&pDevExt->PendingIRPEvent, Executive,
                                  KernelMode, FALSE, NULL);
         }

         //
         // Re-increment the count for later
         //

         InterlockedIncrement(&pDevExt->PendingIRPCnt);

         //
         // We need to free resources...basically this is a remove
         // without the detach from the stack.
         //

         if (pDevExt->Flags & CYY_FLAGS_STARTED) {
            CyyReleaseResources(pDevExt);
         }

         //
         // Pass the irp down
         //

         PIrp->IoStatus.Status = STATUS_SUCCESS;
         IoSkipCurrentIrpStackLocation(PIrp);

         return IoCallDriver(pLowerDevObj, PIrp);
      }

   case IRP_MN_QUERY_STOP_DEVICE:
      {
         KIRQL oldIrql;

         CyyDbgPrintEx(CYYPNPPOWER, "Got IRP_MN_QUERY_STOP_DEVICE Irp ");
         CyyDbgPrintEx(CYYPNPPOWER, "for device %x\n", pLowerDevObj);

         //
         // See if we should succeed a stop query
         //

// REMOVED FANNY FOR NOW
//         if (pDevExt->PortOnAMultiportCard) {
//            PIrp->IoStatus.Status = STATUS_NOT_SUPPORTED;
//            CyyDbgPrintEx(CYYPNPPOWER, "------- failing; multiport node\n");
//            CyyCompleteRequest(pDevExt, PIrp, IO_NO_INCREMENT);
//            return STATUS_NOT_SUPPORTED;
//         }

         //
         // If the device hasn't started yet, we ignore this request
         // and just pass it down.
         //

         if (pDevExt->PNPState != CYY_PNP_STARTED) {
            IoSkipCurrentIrpStackLocation(PIrp);
            return CyyIoCallDriver(pDevExt, pLowerDevObj, PIrp);
         }

         //
         // Lock around the open status
         //

         ExAcquireFastMutex(&pDevExt->OpenMutex);

         if (pDevExt->DeviceIsOpened) {
            ExReleaseFastMutex(&pDevExt->OpenMutex);
            PIrp->IoStatus.Status = STATUS_DEVICE_BUSY;
            CyyDbgPrintEx(CYYPNPPOWER, "failing; device open\n");
            CyyCompleteRequest(pDevExt, PIrp, IO_NO_INCREMENT);
            return STATUS_DEVICE_BUSY;
         }

         pDevExt->PNPState = CYY_PNP_QSTOP;

         CyySetAccept(pDevExt, CYY_PNPACCEPT_STOPPING);
         //
         // Unlock around the open status
         //

         ExReleaseFastMutex(&pDevExt->OpenMutex);

         PIrp->IoStatus.Status = STATUS_SUCCESS;
         IoCopyCurrentIrpStackLocationToNext(PIrp);
         return CyyIoCallDriver(pDevExt, pLowerDevObj, PIrp);
      }

   case IRP_MN_CANCEL_STOP_DEVICE:
      CyyDbgPrintEx(CYYPNPPOWER, "Got IRP_MN_CANCEL_STOP_DEVICE Irp ");
      CyyDbgPrintEx(CYYPNPPOWER, "for device %x\n", pLowerDevObj);

      if (pDevExt->PNPState == CYY_PNP_QSTOP) {
         //
         // Restore the device state
         //

         pDevExt->PNPState = CYY_PNP_STARTED;
         CyyClearAccept(pDevExt, CYY_PNPACCEPT_STOPPING);
      }

      PIrp->IoStatus.Status = STATUS_SUCCESS;
      IoCopyCurrentIrpStackLocationToNext(PIrp);
      return CyyIoCallDriver(pDevExt, pLowerDevObj, PIrp);

   case IRP_MN_CANCEL_REMOVE_DEVICE:

      CyyDbgPrintEx(CYYPNPPOWER, "Got IRP_MN_CANCEL_REMOVE_DEVICE Irp ");
      CyyDbgPrintEx(CYYPNPPOWER, "for device %x\n", pLowerDevObj);

      //
      // Restore the device state
      //

      pDevExt->PNPState = CYY_PNP_STARTED;
      CyyClearAccept(pDevExt, CYY_PNPACCEPT_REMOVING);

      PIrp->IoStatus.Status = STATUS_SUCCESS;
      IoCopyCurrentIrpStackLocationToNext(PIrp);
      return CyyIoCallDriver(pDevExt, pLowerDevObj, PIrp);

   case IRP_MN_QUERY_REMOVE_DEVICE:
      {
         KIRQL oldIrql;
         CyyDbgPrintEx(CYYPNPPOWER, "Got IRP_MN_QUERY_REMOVE_DEVICE Irp ");
         CyyDbgPrintEx(CYYPNPPOWER, "for device %x\n", pLowerDevObj);

         ExAcquireFastMutex(&pDevExt->OpenMutex);

         //
         // See if we should succeed a remove query
         //

         if (pDevExt->DeviceIsOpened) {
            ExReleaseFastMutex(&pDevExt->OpenMutex);
            PIrp->IoStatus.Status = STATUS_DEVICE_BUSY;
            CyyDbgPrintEx(CYYPNPPOWER, "failing; device open\n");
            CyyCompleteRequest(pDevExt, PIrp, IO_NO_INCREMENT);
            return STATUS_DEVICE_BUSY;
         }

         pDevExt->PNPState = CYY_PNP_QREMOVE;
         CyySetAccept(pDevExt, CYY_PNPACCEPT_REMOVING);
         ExReleaseFastMutex(&pDevExt->OpenMutex);

         PIrp->IoStatus.Status = STATUS_SUCCESS;
         IoCopyCurrentIrpStackLocationToNext(PIrp);
         return CyyIoCallDriver(pDevExt, pLowerDevObj, PIrp);
      }

   case IRP_MN_SURPRISE_REMOVAL:
      {
         ULONG pendingIRPs;
         KIRQL oldIrql;

         CyyDbgPrintEx(CYYPNPPOWER, "Got IRP_MN_SURPRISE_REMOVAL Irp ");
         CyyDbgPrintEx(CYYPNPPOWER, "for device %x\n", pLowerDevObj);

         //
         // Prevent any new I/O to the device
         //

         CyySetAccept(pDevExt, CYY_PNPACCEPT_SURPRISE_REMOVING);

         //
         // Dismiss all pending requests
         //

         CyyKillPendingIrps(PDevObj);

         //
         // Wait for any pending requests we raced on.
         //

         //
         // Decrement once for ourselves
         //

         InterlockedDecrement(&pDevExt->PendingIRPCnt);

         //
         // Decrement for the remove
         //

         pendingIRPs = InterlockedDecrement(&pDevExt->PendingIRPCnt);

         if (pendingIRPs) {
            KeWaitForSingleObject(&pDevExt->PendingIRPEvent, Executive,
                                  KernelMode, FALSE, NULL);
         }

         //
         // Reset for subsequent remove
         //

         InterlockedIncrement(&pDevExt->PendingIRPCnt);

         //
         // Remove any external interfaces and release resources
         //

         CyyDisableInterfacesResources(PDevObj, FALSE);

         PIrp->IoStatus.Status = STATUS_SUCCESS;
         IoSkipCurrentIrpStackLocation(PIrp);

         return CyyIoCallDriver(pDevExt, pLowerDevObj, PIrp);
      }

   case IRP_MN_REMOVE_DEVICE:

      {
         ULONG pendingIRPs;
         KIRQL oldIrql;

         CyyDbgPrintEx(CYYPNPPOWER, "Got IRP_MN_REMOVE_DEVICE Irp ");
         CyyDbgPrintEx(CYYPNPPOWER, "for device %x\n", pLowerDevObj);

         //
         // If we get this, we have to remove
         //

         //
         // Mark as not accepting requests
         //

         CyySetAccept(pDevExt, CYY_PNPACCEPT_REMOVING);

         //
         // Complete all pending requests
         //

         CyyKillPendingIrps(PDevObj);

         //
         // Decrement for this Irp itself
         //

         InterlockedDecrement(&pDevExt->PendingIRPCnt);

         //
         // Wait for any pending requests we raced on -- this decrement
         // is for our "placeholder".
         //

         pendingIRPs = InterlockedDecrement(&pDevExt->PendingIRPCnt);

         if (pendingIRPs) {
            KeWaitForSingleObject(&pDevExt->PendingIRPEvent, Executive,
                                  KernelMode, FALSE, NULL);
         }

         if (!(pDevExt->DevicePNPAccept & CYY_PNPACCEPT_SURPRISE_REMOVING)) { //Moved from CyyRemoveDevice. Fanny
            //
            // Disable all external interfaces and release resources
            //

            CyyDisableInterfacesResources(PDevObj, TRUE);
         }

         //
         // Pass the irp down
         //

         PIrp->IoStatus.Status = STATUS_SUCCESS;

         IoSkipCurrentIrpStackLocation(PIrp); // It was IoCopyCurrentIrpStackLocationToNext (Fanny)

         //
         // We do decrement here because we incremented on entry here.
         //

         status = IoCallDriver(pLowerDevObj, PIrp);


         //
         // Remove us (Note from Fanny: This call is before IoCallDriver in serial driver).
         //

         CyyRemoveDevObj(PDevObj);

         return status;
      }

   default:
      break;



   }   // switch (pIrpStack->MinorFunction)

   //
   // Pass to driver beneath us
   //

   IoSkipCurrentIrpStackLocation(PIrp);
   status = CyyIoCallDriver(pDevExt, pLowerDevObj, PIrp);
   return status;


}


UINT32
CyyReportMaxBaudRate(ULONG Bauds)
/*++

Routine Description:

    This routine returns the max baud rate given a selection of rates

Arguments:

   Bauds  -  Bit-encoded list of supported bauds


  Return Value:

   The max baud rate listed in Bauds

--*/
{
   PAGED_CODE();

   if (Bauds & SERIAL_BAUD_128K) {
      return (128U * 1024U);
   }

   if (Bauds & SERIAL_BAUD_115200) {
      return 115200U;
   }

   if (Bauds & SERIAL_BAUD_56K) {
      return (56U * 1024U);
   }

   if (Bauds & SERIAL_BAUD_57600) {
      return 57600U;
   }

   if (Bauds & SERIAL_BAUD_38400) {
      return 38400U;
   }

   if (Bauds & SERIAL_BAUD_19200) {
      return 19200U;
   }

   if (Bauds & SERIAL_BAUD_14400) {
      return 14400U;
   }

   if (Bauds & SERIAL_BAUD_9600) {
      return 9600U;
   }

   if (Bauds & SERIAL_BAUD_7200) {
      return 7200U;
   }

   if (Bauds & SERIAL_BAUD_4800) {
      return 4800U;
   }

   if (Bauds & SERIAL_BAUD_2400) {
      return 2400U;
   }

   if (Bauds & SERIAL_BAUD_1800) {
      return 1800U;
   }

   if (Bauds & SERIAL_BAUD_1200) {
      return 1200U;
   }

   if (Bauds & SERIAL_BAUD_600) {
      return 600U;
   }

   if (Bauds & SERIAL_BAUD_300) {
      return 300U;
   }

   if (Bauds & SERIAL_BAUD_150) {
      return 150U;
   }

   if (Bauds & SERIAL_BAUD_134_5) {
      return 135U; // Close enough
   }

   if (Bauds & SERIAL_BAUD_110) {
      return 110U;
   }

   if (Bauds & SERIAL_BAUD_075) {
      return 75U;
   }

   //
   // We're in bad shape
   //

   return 0;
}

VOID
CyyAddToAllDevs(PLIST_ENTRY PListEntry)
{
   KIRQL oldIrql;

   KeAcquireSpinLock(&CyyGlobals.GlobalsSpinLock, &oldIrql);

   InsertTailList(&CyyGlobals.AllDevObjs, PListEntry);

   KeReleaseSpinLock(&CyyGlobals.GlobalsSpinLock, oldIrql);
}



NTSTATUS
CyyFinishStartDevice(IN PDEVICE_OBJECT PDevObj,
                     IN PCM_RESOURCE_LIST PResList,
                     IN PCM_RESOURCE_LIST PTrResList)
/*++

Routine Description:

    This routine does serial-specific procedures to start a device.  It
    does this either for a legacy device detected by its registry entries,
    or for a PnP device after the start IRP has been sent down the stack.


Arguments:

   PDevObj    -  Pointer to the devobj that is starting

   PResList   -  Pointer to the untranslated resources needed by this device

   PTrResList -  Pointer to the translated resources needed by this device


  Return Value:

    STATUS_SUCCESS on success, something else appropriate on failure


--*/

{

   PCYY_DEVICE_EXTENSION pDevExt = PDevObj->DeviceExtension;
   NTSTATUS status;
   PCONFIG_DATA pConfig;
   HANDLE pnpKey;
   ULONG one = 1;
   BOOLEAN allocedUserData = FALSE; // Added in build 2128
   KIRQL oldIrql;

   PAGED_CODE();

   //
   // See if this is a restart, and if so don't reallocate the world
   //

   if ((pDevExt->Flags & CYY_FLAGS_STOPPED) 
       && (pDevExt->Flags & CYY_FLAGS_STARTED)) {      // change from 1946 to 2000
      CyyClearFlags(pDevExt, CYY_FLAGS_STOPPED);

      pDevExt->PNPState = CYY_PNP_RESTARTING;

      //
      // Re-init resource-related things in the extension
      //

      pDevExt->OurIsr = NULL;
      pDevExt->OurIsrContext = NULL;
      pDevExt->Interrupt = NULL;
      pDevExt->Vector = 0;
      pDevExt->Irql = 0;
      pDevExt->OriginalVector = 0;
      pDevExt->OriginalIrql = 0;
      pDevExt->BusNumber = 0;
      pDevExt->InterfaceType = 0;

#if 0
// removed for now - fanny
//      pDevExt->TopLevelOurIsr = NULL;
//      pDevExt->TopLevelOurIsrContext = NULL;
//
//      pDevExt->OriginalController = CyyPhysicalZero;
//      pDevExt->OriginalInterruptStatus = CyyPhysicalZero;
//
//
//      pDevExt->Controller = NULL;
//      pDevExt->InterruptStatus = NULL;
//
//      pDevExt->SpanOfController = 0;
//      pDevExt->SpanOfInterruptStatus = 0;
//
//      pDevExt->Vector = 0;
//      pDevExt->Irql = 0;
//      pDevExt->OriginalVector = 0;
//      pDevExt->OriginalIrql = 0;
//      pDevExt->AddressSpace = 0;
//      pDevExt->BusNumber = 0;
//      pDevExt->InterfaceType = 0;
//
//      pDevExt->CIsrSw = NULL;
//
//      ASSERT(PUserData == NULL);
//
//      PUserData = ExAllocatePool(PagedPool, sizeof(CYY_USER_DATA));
//
//      if (PUserData == NULL) {
//         return STATUS_INSUFFICIENT_RESOURCES;
//      }
//
//      allocedUserData = TRUE;   // Added in build 2128
//
//      RtlZeroMemory(PUserData, sizeof(CYY_USER_DATA));
//
//      PUserData->DisablePort = FALSE;
//      PUserData->UserClockRate = pDevExt->ClockRate;
//      PUserData->TxFIFO = pDevExt->TxFifoAmount;
//      PUserData->PermitShareDefault = pDevExt->PermitShare;
//
//
//      //
//      // Map betweeen trigger and amount
//      //
//
//      switch (pDevExt->RxFifoTrigger) {
//      case CYY_1_BYTE_HIGH_WATER:
//         PUserData->RxFIFO = 1;
//         break;
//
//      case CYY_4_BYTE_HIGH_WATER:
//         PUserData->RxFIFO = 4;
//         break;
//
//      case CYY_8_BYTE_HIGH_WATER:
//         PUserData->RxFIFO = 8;
//         break;
//
//      case CYY_14_BYTE_HIGH_WATER:
//         PUserData->RxFIFO = 14;
//         break;
//
//      default:
//         PUserData->RxFIFO = 1;
//      }
#endif // end removal of code
   } else {
      //
      // Mark as serenumerable -- toss status because we can
      // still start without this key.
      //

      status = IoOpenDeviceRegistryKey(pDevExt->Pdo,
                                       PLUGPLAY_REGKEY_DEVICE,
                                       STANDARD_RIGHTS_WRITE, &pnpKey);

      if (NT_SUCCESS(status)) {
         ULONG powerPolicy = 0;

         //
         // Find out if we own power policy
         //

         CyyGetRegistryKeyValue(pnpKey, L"CyyRelinquishPowerPolicy",
                                   sizeof(L"CyyRelinquishPowerPolicy"),
                                   &powerPolicy, sizeof(ULONG));

         pDevExt->OwnsPowerPolicy = powerPolicy ? FALSE : TRUE;


         ZwClose(pnpKey);
      }
   }

   //
   // Allocate the config record.
   //

   pConfig = ExAllocatePool (PagedPool, sizeof(CONFIG_DATA));

   //************************************
   // Error Injection
   //if (pConfig) {
   //   ExFreePool (pConfig);
   //}
   //pConfig = NULL;
   //************************************
   if (pConfig == NULL) {

      CyyLogError(pDevExt->DriverObject, NULL, CyyPhysicalZero,
                     CyyPhysicalZero, 0, 0, 0, 31, STATUS_SUCCESS,
                     CYY_INSUFFICIENT_RESOURCES, 0, NULL, 0, NULL);

      CyyDbgPrintEx(CYYERRORS, "Couldn't allocate memory for the\n"
                             "------  user configuration record\n");

      status = STATUS_INSUFFICIENT_RESOURCES;
      goto CyyFinishStartDeviceError;
   }

   RtlZeroMemory(pConfig, sizeof(CONFIG_DATA));


   //
   // Get the configuration info for the device.
   //

   status = CyyGetPortInfo(PDevObj, PResList, PTrResList, pConfig);
                              

   if (!NT_SUCCESS(status)) {
      goto CyyFinishStartDeviceError;
   }

   //
   // See if we are in the proper power state.
   //



   if (pDevExt->PowerState != PowerDeviceD0) {

      status = CyyGotoPowerState(pDevExt->Pdo, pDevExt, PowerDeviceD0);

      if (!NT_SUCCESS(status)) {
         goto CyyFinishStartDeviceError;
      }
   }

   //
   // Find and initialize the controller
   //

   status = CyyFindInitController(PDevObj, pConfig);

   if (!NT_SUCCESS(status)) {
      goto CyyFinishStartDeviceError;
   }


   //
   // The hardware that is set up to NOT interrupt, connect an interrupt.
   //

   //
   // If a device doesn't already have an interrupt and it has an isr then
   // we attempt to connect to the interrupt if it is not shareing with other
   // serial devices.  If we fail to connect to an  interrupt we will delete
   // this device.
   //

   if (pDevExt != NULL) {
      CyyDbgPrintEx(CYYDIAG5, "pDevExt: Interrupt %x\n"
                       "-------               OurIsr %x\n", pDevExt->Interrupt,
                       pDevExt->OurIsr);
   } else {
      CyyDbgPrintEx(CYYERRORS, "CyyFinishStartDevice got NULL "
                       "pDevExt\n");
   }

   if ((!pDevExt->Interrupt) && (pDevExt->OurIsr)) {

      CyyDbgPrintEx(CYYDIAG5,
                    "About to connect to interrupt for port %wZ\n"
                    "------- address of extension is %x\n",
                    &pDevExt->DeviceName, pDevExt);

      CyyDbgPrintEx(CYYDIAG5, "IoConnectInterrupt Args:\n"
                              "Interrupt           %x\n"
                              "OurIsr              %x\n"
                              "OurIsrContext       %x\n"
                              "NULL\n"
                              "Vector              %x\n"
                              "Irql                %x\n"
                              "InterruptMode       %x\n"
                              "InterruptShareable  %x\n"
                              "ProcessorAffinity   %x\n"
                              "FALSE\n",
                              &pDevExt->Interrupt,
                              CyyIsr,
                              pDevExt->OurIsrContext,
                              pDevExt->Vector,
                              pDevExt->Irql,
                              pConfig->InterruptMode,
                              pDevExt->InterruptShareable,
                              pConfig->Affinity
                             );

      //
      // Do a just in time construction of the ISR switch.
      //
//removed fanny
//      pDevExt->CIsrSw->IsrFunc = pDevExt->OurIsr;
//      pDevExt->CIsrSw->Context = pDevExt->OurIsrContext;

      status = IoConnectInterrupt(&pDevExt->Interrupt, pDevExt->OurIsr,
                                  pDevExt->OurIsrContext, NULL,
                                  pDevExt->Vector, pDevExt->Irql,
                                  pDevExt->Irql,
                                  pConfig->InterruptMode,
                                  pDevExt->InterruptShareable,
                                  pConfig->Affinity, FALSE);
//****************************************
// Error Injection
//    if (pDevExt->Interrupt != NULL) {
//       IoDisconnectInterrupt(pDevExt->Interrupt);
//       pDevExt->Interrupt = NULL;
//    }
//    status = STATUS_INSUFFICIENT_RESOURCES;
//****************************************

      if (!NT_SUCCESS(status)) {

         //
         // Hmmm, how'd that happen?  Somebody either
         // didn't report their resources, or they
         // sneaked in since the last time I looked.
         //
         // Oh well,  delete this device.
         //

         CyyDbgPrintEx(CYYERRORS, "Couldn't connect to interrupt for %wZ\n",
                          &pDevExt->DeviceName);

         CyyDbgPrintEx(CYYERRORS, "IoConnectInterrupt Args:\n"
                                  "Interrupt           %x\n"
                                  "OurIsr              %x\n"
                                  "OurIsrContext       %x\n"
                                  "NULL\n"
                                  "Vector              %x\n"
                                  "Irql                %x\n"
                                  "InterruptMode       %x\n"
                                  "InterruptShareable  %x\n"
                                  "ProcessorAffinity   %x\n"
                                  "FALSE\n",
                                  &pDevExt->Interrupt,
                                  CyyIsr,
                                  pDevExt->OurIsrContext,
                                  pDevExt->Vector,
                                  pDevExt->Irql,
                                  pConfig->InterruptMode,
                                  pDevExt->InterruptShareable,
                                  pConfig->Affinity);



         CyyLogError(PDevObj->DriverObject, PDevObj,
                        pDevExt->OriginalBoardMemory,
                        CyyPhysicalZero, 0, 0, 0, pDevExt->Vector, status,
                        CYY_UNREPORTED_IRQL_CONFLICT,
                        pDevExt->DeviceName.Length + sizeof(WCHAR),
                        pDevExt->DeviceName.Buffer, 0, NULL);

         //status = CYY_UNREPORTED_IRQL_CONFLICT; Originally, it was SERIAL_UNREPORTED_IRQL_CONFLICT.
         goto CyyFinishStartDeviceError;

      }

      CyyDbgPrintEx(CYYDIAG5, "Connected interrupt %08X\n", pDevExt->Interrupt);

   }


   //
   // Add the PDevObj to the master list
   //

   CyyAddToAllDevs(&pDevExt->AllDevObjs);


   //
   // Reset the device.
   //

   //
   // While the device isn't open, disable all interrupts.
   //
   CD1400_DISABLE_ALL_INTERRUPTS(pDevExt->Cd1400,pDevExt->IsPci,pDevExt->CdChannel);

   //
   // This should set up everything as it should be when
   // a device is to be opened.  We do need to lower the
   // modem lines, and disable the recalcitrant fifo
   // so that it will show up if the user boots to dos.
   //

   KeSynchronizeExecution(
                         pDevExt->Interrupt,
                         CyyReset,
                         pDevExt
                         );

   KeSynchronizeExecution( //Disables the fifo.
                           pDevExt->Interrupt,
                           CyyMarkClose,
                           pDevExt
                         );

   KeSynchronizeExecution(
                         pDevExt->Interrupt,
                         CyyClrRTS,
                         pDevExt
                         );

   KeSynchronizeExecution(
                         pDevExt->Interrupt,
                         CyyClrDTR,
                         pDevExt
                         );

   if (pDevExt->PNPState == CYY_PNP_ADDED ) {
      //
      // Do the external naming now that the device is accessible.
      //

      status = CyyDoExternalNaming(pDevExt, pDevExt->DeviceObject->
                                      DriverObject);


      if (!NT_SUCCESS(status)) {
         CyyDbgPrintEx(CYYERRORS, "External Naming Failed - Status %x\n",
                       status);

         //
         // Allow the device to start anyhow
         //

         status = STATUS_SUCCESS;
      }
   } else {
      CyyDbgPrintEx(CYYPNPPOWER, "Not doing external naming -- state is %x"
                    "\n", pDevExt->PNPState);
   }

CyyFinishStartDeviceError:;

   if (!NT_SUCCESS (status)) {

      CyyDbgPrintEx(CYYDIAG1, "Cleaning up failed start\n");

      //
      // Resources created by this routine will be cleaned up by the remove
      //

      if (pDevExt->PNPState == CYY_PNP_RESTARTING) {
         //
         // Kill all that lives and breathes -- we'll clean up the
         // rest on the impending remove
         //

         CyyKillPendingIrps(PDevObj);

         //
         // In fact, pretend we're removing so we don't take any
         // more irps
         //

         CyySetAccept(pDevExt, CYY_PNPACCEPT_REMOVING);
         CyyClearFlags(pDevExt, CYY_FLAGS_STARTED);
      }
   } else { // SUCCESS

      //
      // Fill in WMI hardware data
      //

      pDevExt->WmiHwData.IrqNumber = pDevExt->Irql;
      pDevExt->WmiHwData.IrqLevel = pDevExt->Irql;
      pDevExt->WmiHwData.IrqVector = pDevExt->Vector;
      pDevExt->WmiHwData.IrqAffinityMask = pConfig->Affinity;
      pDevExt->WmiHwData.InterruptType = pConfig->InterruptMode == Latched
         ? SERIAL_WMI_INTTYPE_LATCHED : SERIAL_WMI_INTTYPE_LEVEL;
      pDevExt->WmiHwData.BaseIOAddress = (ULONG_PTR)pDevExt->BoardMemory;

      //
      // Fill in WMI device state data (as defaults)
      //

      pDevExt->WmiCommData.BaudRate = pDevExt->CurrentBaud;
      pDevExt->WmiCommData.BitsPerByte = (pDevExt->cor1 & COR1_DATA_MASK) + 5;
      pDevExt->WmiCommData.ParityCheckEnable = (pDevExt->cor1 & COR1_PARITY_ENABLE_MASK)
         ? TRUE : FALSE;

      switch (pDevExt->cor1 & COR1_PARITY_MASK) {
      case COR1_NONE_PARITY:
         pDevExt->WmiCommData.Parity = SERIAL_WMI_PARITY_NONE;
         break;

      case COR1_ODD_PARITY:
         pDevExt->WmiCommData.Parity = SERIAL_WMI_PARITY_ODD;
         break;

      case COR1_EVEN_PARITY:
         pDevExt->WmiCommData.Parity = SERIAL_WMI_PARITY_EVEN;
         break;

      case COR1_MARK_PARITY:
         pDevExt->WmiCommData.Parity = SERIAL_WMI_PARITY_MARK;
         break;

      case COR1_SPACE_PARITY:
         pDevExt->WmiCommData.Parity = SERIAL_WMI_PARITY_SPACE;
         break;

      default:
         ASSERTMSG(0, "CYYPORT: Illegal Parity setting for WMI");
         pDevExt->WmiCommData.Parity = SERIAL_WMI_PARITY_NONE;
         break;
      }

      switch(pDevExt->cor1 & COR1_STOP_MASK) {
      case COR1_1_STOP:
         pDevExt->WmiCommData.StopBits = SERIAL_WMI_STOP_1;
         break;
      case COR1_1_5_STOP:
         pDevExt->WmiCommData.StopBits = SERIAL_WMI_STOP_1_5;
         break;
      case COR1_2_STOP:
         pDevExt->WmiCommData.StopBits = SERIAL_WMI_STOP_2;
         break;
      default:
         ASSERTMSG(0, "CYYPORT: Illegal Stop Bit setting for WMI");
         pDevExt->WmiCommData.Parity = SERIAL_WMI_STOP_1;
         break;
      }

      pDevExt->WmiCommData.XoffCharacter = pDevExt->SpecialChars.XoffChar;
      pDevExt->WmiCommData.XoffXmitThreshold = pDevExt->HandFlow.XoffLimit;
      pDevExt->WmiCommData.XonCharacter = pDevExt->SpecialChars.XonChar;
      pDevExt->WmiCommData.XonXmitThreshold = pDevExt->HandFlow.XonLimit;
      pDevExt->WmiCommData.MaximumBaudRate
         = CyyReportMaxBaudRate(pDevExt->SupportedBauds);
      pDevExt->WmiCommData.MaximumOutputBufferSize = (UINT32)((ULONG)-1);
      pDevExt->WmiCommData.MaximumInputBufferSize = (UINT32)((ULONG)-1);
      pDevExt->WmiCommData.Support16BitMode = FALSE;
      pDevExt->WmiCommData.SupportDTRDSR = TRUE;
      pDevExt->WmiCommData.SupportIntervalTimeouts = TRUE;
      pDevExt->WmiCommData.SupportParityCheck = TRUE;
      pDevExt->WmiCommData.SupportRTSCTS = TRUE;
      pDevExt->WmiCommData.SupportXonXoff = TRUE;
      pDevExt->WmiCommData.SettableBaudRate = TRUE;
      pDevExt->WmiCommData.SettableDataBits = TRUE;
      pDevExt->WmiCommData.SettableFlowControl = TRUE;
      pDevExt->WmiCommData.SettableParity = TRUE;
      pDevExt->WmiCommData.SettableParityCheck = TRUE;
      pDevExt->WmiCommData.SettableStopBits = TRUE;
      pDevExt->WmiCommData.IsBusy = FALSE;

      //
      // Fill in wmi perf data (all zero's)
      //

      RtlZeroMemory(&pDevExt->WmiPerfData, sizeof(pDevExt->WmiPerfData));


      if (pDevExt->PNPState == CYY_PNP_ADDED) {
         PULONG countSoFar = &IoGetConfigurationInformation()->SerialCount;
         (*countSoFar)++;

         //
         // Register for WMI
         //

         pDevExt->WmiLibInfo.GuidCount = sizeof(SerialWmiGuidList) /
                                              sizeof(WMIGUIDREGINFO);
         pDevExt->WmiLibInfo.GuidList = SerialWmiGuidList;
         ASSERT (pDevExt->WmiLibInfo.GuidCount == SERIAL_WMI_GUID_LIST_SIZE);

         pDevExt->WmiLibInfo.QueryWmiRegInfo = CyyQueryWmiRegInfo;
         pDevExt->WmiLibInfo.QueryWmiDataBlock = CyyQueryWmiDataBlock;
         pDevExt->WmiLibInfo.SetWmiDataBlock = CyySetWmiDataBlock;
         pDevExt->WmiLibInfo.SetWmiDataItem = CyySetWmiDataItem;
         pDevExt->WmiLibInfo.ExecuteWmiMethod = NULL;
         pDevExt->WmiLibInfo.WmiFunctionControl = NULL;

         IoWMIRegistrationControl(PDevObj, WMIREG_ACTION_REGISTER);

      }

      if (pDevExt->PNPState == CYY_PNP_RESTARTING) {
         //
         // Release the stalled IRP's
         //

         CyyUnstallIrps(pDevExt);
      }

      pDevExt->PNPState = CYY_PNP_STARTED;
      CyyClearAccept(pDevExt, ~CYY_PNPACCEPT_OK);
      CyySetFlags(pDevExt, CYY_FLAGS_STARTED);

   }

   if (pConfig) {
      ExFreePool (pConfig);
   }
// REMOVED BY FANNY
//   if ((PUserData != NULL)
//       && (pDevExt->PNPState == CYY_PNP_RESTARTING)) {
//      ExFreePool(PUserData);
//   }
#if 0
   if ((PUserData != NULL) && allocedUserData) {    // Added in build 2128
      ExFreePool(PUserData);
   }
#endif

   CyyDbgPrintEx (CYYTRACECALLS, "leaving CyyFinishStartDevice\n");

   return status;
}


NTSTATUS
CyyStartDevice(IN PDEVICE_OBJECT PDevObj, IN PIRP PIrp)

/*++

Routine Description:

    This routine first passes the start device Irp down the stack then
    it picks up the resources for the device, ititializes, puts it on any
    appropriate lists (i.e shared interrupt or interrupt status) and
    connects the interrupt.

Arguments:

    PDevObj - Pointer to the device object for this device

    PIrp - Pointer to the IRP for the current request

Return Value:

    Return status


--*/

{
   PIO_STACK_LOCATION pIrpStack = IoGetCurrentIrpStackLocation(PIrp);
   NTSTATUS status = STATUS_NOT_IMPLEMENTED;
   PCYY_DEVICE_EXTENSION pDevExt = PDevObj->DeviceExtension;
   PDEVICE_OBJECT pLowerDevObj = pDevExt->LowerDeviceObject;
   // Next: variables to get resources from the Registry
   HANDLE keyHandle;
   ULONG dataLength;
   PCM_RESOURCE_LIST portResources = NULL;
   PCM_RESOURCE_LIST portResourcesTr = NULL;

   PAGED_CODE();

   CyyDbgPrintEx(CYYTRACECALLS, "entering CyyStartDevice\n");


   //
   // Pass this down to the next device object
   //

   KeInitializeEvent(&pDevExt->CyyStartEvent, SynchronizationEvent,
                     FALSE);

   IoCopyCurrentIrpStackLocationToNext(PIrp);
   IoSetCompletionRoutine(PIrp, CyySyncCompletion,
                          &pDevExt->CyyStartEvent, TRUE, TRUE, TRUE);

   status = IoCallDriver(pLowerDevObj, PIrp);


   //
   // Wait for lower drivers to be done with the Irp
   //

   if (status == STATUS_PENDING) {
      KeWaitForSingleObject (&pDevExt->CyyStartEvent, Executive, KernelMode,
                             FALSE, NULL);

      status = PIrp->IoStatus.Status;
   }

   //*********************************
   // Error Injection
   // status = STATUS_UNSUCCESSFUL;
   //*********************************

   if (!NT_SUCCESS(status)) {
      CyyDbgPrintEx(CYYERRORS, "error with IoCallDriver %x\n", status);
      CyyLogError( pDevExt->DriverObject,NULL,
                   CyyPhysicalZero,CyyPhysicalZero,
                   0,0,0,0,status,CYY_LOWER_DRIVERS_FAILED_START,
                   0,NULL,0,NULL);
      return status;
   }


   // Get resources from the registry

   status = IoOpenDeviceRegistryKey (pDevExt->Pdo,
                                     PLUGPLAY_REGKEY_DEVICE,
                                     STANDARD_RIGHTS_READ,
                                     &keyHandle);

   if (!NT_SUCCESS(status)) {
      CyyDbgPrintEx(CYYERRORS, "IoOpenDeviceRegistryKey failed - %x "
                                "\n", status);

   } else {

      dataLength = CyyGetRegistryKeyValueLength (keyHandle,
                                                 L"PortResources",
                                                 sizeof(L"PortResources"));

      portResources = ExAllocatePool(PagedPool, dataLength);
      
      if (portResources) {
         status = CyyGetRegistryKeyValue (keyHandle, L"PortResources",
                                          sizeof(L"PortResources"),
                                          portResources,
                                          dataLength);
         if (!NT_SUCCESS(status)) {
            CyyDbgPrintEx(CYYERRORS, "CyyGetRegistryKeyValue PortResources "
                                     "failed - %x\n", status);
            goto CyyStartDevice_End;
         }

      }
      dataLength = CyyGetRegistryKeyValueLength (keyHandle,
                                                 L"PortResourcesTr",
                                                 sizeof(L"PortResourcesTr"));

      portResourcesTr = ExAllocatePool(PagedPool, dataLength);
      
      if (portResourcesTr) {
         status = CyyGetRegistryKeyValue (keyHandle, L"PortResourcesTr",
                                          sizeof(L"PortResourcesTr"),
                                          portResourcesTr,
                                          dataLength);
         if (!NT_SUCCESS(status)) {
            CyyDbgPrintEx(CYYERRORS, "CyyGetRegistryKeyValue PortResourcesTr "
                                     "failed - %x\n", status);
            goto CyyStartDevice_End;
         }
      }

      //
      // Do the serial specific items to start the device
      //
      status = CyyFinishStartDevice(PDevObj, portResources, portResourcesTr);

CyyStartDevice_End:

      if (portResources) {
         ExFreePool(portResources);
      }
      if (portResourcesTr) {
         ExFreePool(portResourcesTr);
      }

      ZwClose (keyHandle);

   }


#if 0
   //
   // Do the serial specific items to start the device
   //
   status = CyyFinishStartDevice(PDevObj, pIrpStack->Parameters.StartDevice
                                    .AllocatedResources,
                                    pIrpStack->Parameters.StartDevice
                                    .AllocatedResourcesTranslated);
#endif
   

   
   return status;
}


NTSTATUS
CyyItemCallBack(
                  IN PVOID Context,
                  IN PUNICODE_STRING PathName,
                  IN INTERFACE_TYPE BusType,
                  IN ULONG BusNumber,
                  IN PKEY_VALUE_FULL_INFORMATION *BusInformation,
                  IN CONFIGURATION_TYPE ControllerType,
                  IN ULONG ControllerNumber,
                  IN PKEY_VALUE_FULL_INFORMATION *ControllerInformation,
                  IN CONFIGURATION_TYPE PeripheralType,
                  IN ULONG PeripheralNumber,
                  IN PKEY_VALUE_FULL_INFORMATION *PeripheralInformation
                  )

/*++

Routine Description:

    This routine is called to check if a particular item
    is present in the registry.

Arguments:

    Context - Pointer to a boolean.

    PathName - unicode registry path.  Not Used.

    BusType - Internal, Isa, ...

    BusNumber - Which bus if we are on a multibus system.

    BusInformation - Configuration information about the bus. Not Used.

    ControllerType - Controller type.

    ControllerNumber - Which controller if there is more than one
                       controller in the system.

    ControllerInformation - Array of pointers to the three pieces of
                            registry information.

    PeripheralType - Should be a peripheral.

    PeripheralNumber - Which peripheral - not used..

    PeripheralInformation - Configuration information. Not Used.

Return Value:

    STATUS_SUCCESS

--*/

{
   PAGED_CODE();

   *((BOOLEAN *)Context) = TRUE;
   return STATUS_SUCCESS;
}


NTSTATUS
CyyControllerCallBack(
                  IN PVOID Context,
                  IN PUNICODE_STRING PathName,
                  IN INTERFACE_TYPE BusType,
                  IN ULONG BusNumber,
                  IN PKEY_VALUE_FULL_INFORMATION *BusInformation,
                  IN CONFIGURATION_TYPE ControllerType,
                  IN ULONG ControllerNumber,
                  IN PKEY_VALUE_FULL_INFORMATION *ControllerInformation,
                  IN CONFIGURATION_TYPE PeripheralType,
                  IN ULONG PeripheralNumber,
                  IN PKEY_VALUE_FULL_INFORMATION *PeripheralInformation
                  )

/*++

Routine Description:

    This routine is called to check if a particular item
    is present in the registry.

Arguments:

    Context - Pointer to a boolean.

    PathName - unicode registry path.  Not Used.

    BusType - Internal, Isa, ...

    BusNumber - Which bus if we are on a multibus system.

    BusInformation - Configuration information about the bus. Not Used.

    ControllerType - Controller type.

    ControllerNumber - Which controller if there is more than one
                       controller in the system.

    ControllerInformation - Array of pointers to the three pieces of
                            registry information.

    PeripheralType - Should be a peripheral.

    PeripheralNumber - Which peripheral - not used..

    PeripheralInformation - Configuration information. Not Used.

Return Value:

    STATUS_SUCCESS

--*/

{
   PCM_FULL_RESOURCE_DESCRIPTOR controllerData;
   PSERIAL_PTR_CTX pContext = (PSERIAL_PTR_CTX)Context;
   ULONG i;

   PAGED_CODE();

   if (ControllerInformation[IoQueryDeviceConfigurationData]->DataLength == 0) {
      pContext->isPointer = FALSE;
      return STATUS_SUCCESS;
   }

   controllerData =
      (PCM_FULL_RESOURCE_DESCRIPTOR)
      (((PUCHAR)ControllerInformation[IoQueryDeviceConfigurationData])
        + ControllerInformation[IoQueryDeviceConfigurationData]->DataOffset);

   //
   // See if this is the exact port we are testing
   //
   for (i = 0; i < controllerData->PartialResourceList.Count; i++) {

      PCM_PARTIAL_RESOURCE_DESCRIPTOR partial
         = &controllerData->PartialResourceList.PartialDescriptors[i];

      switch (partial->Type) {
      case CmResourceTypePort:
         if (partial->u.Port.Start.QuadPart == pContext->Port.QuadPart) {
            //
            // Pointer on same controller. Bail out.
            //
            pContext->isPointer = SERIAL_FOUNDPOINTER_PORT;
            return STATUS_SUCCESS;
         }

      case CmResourceTypeInterrupt:
         if (partial->u.Interrupt.Vector == pContext->Vector) {
            //
            // Pointer sharing this interrupt.  Bail out.
            //
            pContext->isPointer = SERIAL_FOUNDPOINTER_VECTOR;
            return STATUS_SUCCESS;
         }

      default:
         break;
      }
   }

   pContext->isPointer = FALSE;
   return STATUS_SUCCESS;
}


                  
NTSTATUS
CyyGetPortInfo(IN PDEVICE_OBJECT PDevObj, IN PCM_RESOURCE_LIST PResList,
               IN PCM_RESOURCE_LIST PTrResList, OUT PCONFIG_DATA PConfig)

/*++

Routine Description:

    This routine will get the configuration information and put
    it and the translated values into CONFIG_DATA structures.
    It first sets up with  defaults and then queries the registry
    to see if the user has overridden these defaults; if this is a legacy
    multiport card, it uses the info in PUserData instead of groping the
    registry again.

Arguments:

    PDevObj - Pointer to the device object.

    PResList - Pointer to the untranslated resources requested.

    PTrResList - Pointer to the translated resources requested.

    PConfig - Pointer to configuration info


Return Value:

    STATUS_SUCCESS if consistant configuration was found - otherwise.
    returns STATUS_SERIAL_NO_DEVICE_INITED.

--*/

{
   PCYY_DEVICE_EXTENSION pDevExt = PDevObj->DeviceExtension;
   PDEVICE_OBJECT pLowerDevObj = pDevExt->LowerDeviceObject;
   NTSTATUS status = STATUS_NOT_IMPLEMENTED;
   CONFIGURATION_TYPE pointer = PointerPeripheral;
   CONFIGURATION_TYPE controllerType  = SerialController;

   HANDLE keyHandle;
   ULONG count;
   ULONG i;
   INTERFACE_TYPE interfaceType;

   PCM_PARTIAL_RESOURCE_LIST pPartialResourceList, pPartialTrResourceList;
   PCM_PARTIAL_RESOURCE_DESCRIPTOR pPartialResourceDesc, pPartialTrResourceDesc;

   PCM_FULL_RESOURCE_DESCRIPTOR pFullResourceDesc = NULL,
      pFullTrResourceDesc = NULL;

// REMOVED BY FANNY
//   ULONG defaultInterruptMode;
//   ULONG defaultAddressSpace;
//   ULONG defaultInterfaceType;
//   ULONG defaultClockRate;
   ULONG zero = 0;
//   CYY_PTR_CTX foundPointerCtx;
//   ULONG isMulti = 0;
//   ULONG gotInt = 0;
//   ULONG gotISR = 0;
//   ULONG gotIO = 0;
//   ULONG ioResIndex = 0;
//   ULONG curIoIndex = 0;

   PAGED_CODE();

   CyyDbgPrintEx(CYYTRACECALLS, "entering CyyGetPortInfo\n");

   CyyDbgPrintEx(CYYPNPPOWER, "resource pointer is %x\n", PResList);
   CyyDbgPrintEx(CYYPNPPOWER, "TR resource pointer is %x\n", PTrResList);


   if ((PResList == NULL) || (PTrResList == NULL)) {
      //
      // This shouldn't happen in theory
      //

       ASSERT(PResList != NULL);
       ASSERT(PTrResList != NULL);

      //
      // This status is as appropriate as I can think of
      //
      return STATUS_INSUFFICIENT_RESOURCES;
   }

   //
   // Each resource list should have only one set of resources
   //

   ASSERT(PResList->Count == 1);
   ASSERT(PTrResList->Count == 1);

//REMOVED BY FANNY
#if 0
   //
   // See if this is a multiport device.  This way we allow other
   // pseudo-serial devices with extra resources to specify another range
   // of I/O ports.  If this is not a multiport, we only look at the first
   // range.  If it is a multiport, we look at the first two ranges.
   //

   status = IoOpenDeviceRegistryKey(pDevExt->Pdo, PLUGPLAY_REGKEY_DEVICE,
                                    STANDARD_RIGHTS_WRITE, &keyHandle);

   if (!NT_SUCCESS(status)) {
      return status;
   }

   status = CyyGetRegistryKeyValue(keyHandle, L"MultiportDevice",
                                      sizeof(L"MultiportDevice"), &isMulti,
                                      sizeof (ULONG));

   if (!NT_SUCCESS(status)) {
      isMulti = 0;
   }

   status = CyyGetRegistryKeyValue(keyHandle, L"CyyIoResourcesIndex",
                                      sizeof(L"CyyIoResourcesIndex"),
                                      &ioResIndex, sizeof(ULONG));

   if (!NT_SUCCESS(status)) {
      ioResIndex = 0;
   }

   ZwClose(keyHandle);

#endif  // end removal code

   pFullResourceDesc   = &PResList->List[0];
   pFullTrResourceDesc = &PTrResList->List[0];

   //
   // Ok, if we have a full resource descriptor.  Let's take it apart.
   //

   if (pFullResourceDesc) {
      pPartialResourceList    = &pFullResourceDesc->PartialResourceList;
      pPartialResourceDesc    = pPartialResourceList->PartialDescriptors;
      count                   = pPartialResourceList->Count;

      //
      // Pull out the stuff that is in the full descriptor.
      //

      PConfig->InterfaceType  = pFullResourceDesc->InterfaceType;
      PConfig->BusNumber      = pFullResourceDesc->BusNumber;

      //
      // Now run through the partial resource descriptors looking for the Runtime memory,
      // CD1400 memory, and interrupt.
      //

      for (i = 0;     i < count;     i++, pPartialResourceDesc++) {

         switch (pPartialResourceDesc->Type) {
         case CmResourceTypeMemory: {

               if (pPartialResourceDesc->u.Memory.Length == CYY_RUNTIME_LENGTH) {
                  PConfig->PhysicalRuntime = pPartialResourceDesc->u.Memory.Start;
                  PConfig->RuntimeLength = pPartialResourceDesc->u.Memory.Length;
                  PConfig->RuntimeAddressSpace = pPartialResourceDesc->Flags;
               } else {
                  PConfig->PhysicalBoardMemory = pPartialResourceDesc->u.Memory.Start;
                  PConfig->BoardMemoryLength = pPartialResourceDesc->u.Memory.Length;
                  PConfig->BoardMemoryAddressSpace = pPartialResourceDesc->Flags;
               }
               break;
         }

         case CmResourceTypeInterrupt: {
               PConfig->OriginalIrql = pPartialResourceDesc->u.Interrupt.Level;
               PConfig->OriginalVector =pPartialResourceDesc->u.Interrupt.Vector;
               PConfig->Affinity = pPartialResourceDesc->u.Interrupt.Affinity;
               if (pPartialResourceDesc->Flags
                   & CM_RESOURCE_INTERRUPT_LATCHED) {
                  PConfig->InterruptMode  = Latched;
               } else {
                  PConfig->InterruptMode  = LevelSensitive;
               }
            
               break;
         }


         default: {
               break;
            }
         }   // switch (pPartialResourceDesc->Type)
      }       // for (i = 0;     i < count;     i++, pPartialResourceDesc++)
   }           // if (pFullResourceDesc)


   //
   // Do the same for the translated resources
   //


   if (pFullTrResourceDesc) {
      pPartialTrResourceList = &pFullTrResourceDesc->PartialResourceList;
      pPartialTrResourceDesc = pPartialTrResourceList->PartialDescriptors;
      count = pPartialTrResourceList->Count;

      //
      // Reload PConfig with the translated values for later use
      //

      PConfig->InterfaceType  = pFullTrResourceDesc->InterfaceType;
      PConfig->BusNumber      = pFullTrResourceDesc->BusNumber;

      for (i = 0;     i < count;     i++, pPartialTrResourceDesc++) {


         switch (pPartialTrResourceDesc->Type) {
         case CmResourceTypeMemory: {

            // ATTENTION, ATTENTION: FOR NOW, WE WILL USE THE RAW
            // RESOURCES, AS WE HAVE GARBAGE IN THE TRANSLATED 
            // RESOURCES.
            //
            if (pPartialTrResourceDesc->u.Memory.Length == CYY_RUNTIME_LENGTH) {
               PConfig->TranslatedRuntime = pPartialTrResourceDesc->u.Memory.Start;
               PConfig->RuntimeLength = pPartialTrResourceDesc->u.Memory.Length;
            } else {
               PConfig->TranslatedBoardMemory = pPartialTrResourceDesc->u.Memory.Start;
               PConfig->BoardMemoryLength = pPartialTrResourceDesc->u.Memory.Length;
            }

            //TEMP CODE BECAUSE OUR BUS DRIVER IS GIVING WRONG TRANSLATED ADDRESS
            //PConfig->TranslatedRuntime = PConfig->PhysicalRuntime;
            //PConfig->TranslatedBoardMemory = PConfig->PhysicalBoardMemory;
            break;
         }

         case CmResourceTypeInterrupt: {
            PConfig->TrVector = pPartialTrResourceDesc->u.Interrupt.Vector;
            PConfig->TrIrql = pPartialTrResourceDesc->u.Interrupt.Level;
            PConfig->Affinity = pPartialTrResourceDesc->u.Interrupt.Affinity;
            break;
         }

         default: {
               break;
         }
         }   // switch (pPartialTrResourceDesc->Type)
      }       // for (i = 0;     i < count;     i++, pPartialTrResourceDesc++)
   }           // if (pFullTrResourceDesc)


   //
   // Initialize a config data structure with default values for those that
   // may not already be initialized.
   //

   PConfig->PortIndex = 0;
   PConfig->RxFIFO = driverDefaults.RxFIFODefault;
   PConfig->TxFIFO = driverDefaults.TxFIFODefault;


   //
   // Open the "Device Parameters" section of registry for this device object.
   //


   status = IoOpenDeviceRegistryKey (pDevExt->Pdo,
                                     PLUGPLAY_REGKEY_DEVICE,
                                     STANDARD_RIGHTS_READ,
                                     &keyHandle);

   if (!NT_SUCCESS(status)) {

      CyyDbgPrintEx(CYYERRORS, "IoOpenDeviceRegistryKey failed - %x \n",
                          status);
      goto PortInfoCleanUp;

   } else {

      status = CyyGetRegistryKeyValue (keyHandle,
                                          L"RxFIFO",
                                          sizeof(L"RxFIFO"),
                                          &PConfig->RxFIFO,
                                          sizeof (ULONG));
      status = CyyGetRegistryKeyValue (keyHandle,
                                          L"TxFIFO",
                                          sizeof(L"TxFIFO"),
                                          &PConfig->TxFIFO,
                                          sizeof (ULONG));
      status = CyyGetRegistryKeyValue (keyHandle,
                                          L"PortIndex",
                                          sizeof(L"PortIndex"),
                                          &PConfig->PortIndex,
                                          sizeof (ULONG));


      if (!NT_SUCCESS(status)) {
         PConfig->PortIndex = MAXULONG; // just some invalid number (fanny)
      }

      ZwClose (keyHandle);
   }

   //
   // Do some error checking on the configuration info we have.
   //
   // Make sure that the interrupt is non zero (which we defaulted
   // it to).
   //
   // Make sure that the portaddress is non zero (which we defaulted
   // it to).
   //
   // Make sure that the DosDevices is not NULL (which we defaulted
   // it to).
   //
   // We need to make sure that if an interrupt status
   // was specified, that a port index was also specfied,
   // and if so that the port index is <= maximum ports
   // on a board.
   //
   // We should also validate that the bus type and number
   // are correct.
   //
   // We will also validate that the interrupt mode makes
   // sense for the bus.
   //

//*****************************************
// Error Injection
//   PConfig->PhysicalRuntime.LowPart = NULL;
//   PConfig->PhysicalBoardMemory.LowPart = NULL;
//   PConfig->OriginalVector = NULL;
//   PConfig->PortIndex = MAXULONG;
//*****************************************

   if (!PConfig->PhysicalRuntime.LowPart && pDevExt->IsPci) {

      //
      // Ehhhh! Lose Game.
      //

      CyyLogError(
                    PDevObj->DriverObject,
                    NULL,
                    PConfig->PhysicalBoardMemory,
                    CyyPhysicalZero,
                    0,
                    0,
                    0,
                    PConfig->PortIndex+1,
                    STATUS_SUCCESS,
                    CYY_INVALID_RUNTIME_REGISTERS,
                    pDevExt->DeviceName.Length,
                    pDevExt->DeviceName.Buffer,
                    0,
                    NULL
                    );

      CyyDbgPrintEx(CYYERRORS,"Bogus Runtime address %x\n",
                    PConfig->PhysicalRuntime.LowPart);

      //status = CYY_INVALID_RUNTIME_REGISTERS;
      status = STATUS_INSUFFICIENT_RESOURCES;
      goto PortInfoCleanUp;
   }

   if (!PConfig->PhysicalBoardMemory.LowPart) {

      //
      // Ehhhh! Lose Game.
      //

      CyyLogError(
                    PDevObj->DriverObject,
                    NULL,
                    PConfig->PhysicalBoardMemory,
                    CyyPhysicalZero,
                    0,
                    0,
                    0,
                    PConfig->PortIndex+1,
                    STATUS_SUCCESS,
                    CYY_INVALID_BOARD_MEMORY,
                    pDevExt->DeviceName.Length,
                    pDevExt->DeviceName.Buffer,
                    0,
                    NULL
                    );

      CyyDbgPrintEx(CYYERRORS,"Bogus board address %x\n",
                    PConfig->PhysicalBoardMemory.LowPart);

      //status = CYY_INVALID_BOARD_MEMORY;
      status = STATUS_INSUFFICIENT_RESOURCES;
      goto PortInfoCleanUp;
   }

   if (!PConfig->OriginalVector) {

      //
      // Ehhhh! Lose Game.
      //

      CyyLogError(
                    pDevExt->DriverObject,
                    NULL,
                    PConfig->PhysicalBoardMemory,
                    CyyPhysicalZero,
                    0,
                    0,
                    0,
                    PConfig->PortIndex+1,
                    STATUS_SUCCESS,
                    CYY_INVALID_INTERRUPT,
                    pDevExt->DeviceName.Length,
                    pDevExt->DeviceName.Buffer,
                    0,
                    NULL
                    );

      CyyDbgPrintEx(CYYERRORS, "Bogus vector %x\n", PConfig->OriginalVector);

      //status = CYY_INVALID_INTERRUPT;
      status = STATUS_INSUFFICIENT_RESOURCES;
      goto PortInfoCleanUp;
   }

   if (PConfig->PortIndex >= CYY_MAX_PORTS) {

      CyyLogError(
                    pDevExt->DriverObject,
                    NULL,
                    PConfig->PhysicalBoardMemory,
                    CyyPhysicalZero,
                    0,
                    0,
                    0,
                    PConfig->PortIndex,
                    STATUS_SUCCESS,
                    CYY_PORT_INDEX_TOO_HIGH,
                    pDevExt->DeviceName.Length,
                    pDevExt->DeviceName.Buffer,
                    0,
                    NULL
                    );

      CyyDbgPrintEx(CYYERRORS,"Port index too large %x\n",PConfig->PortIndex);

      //status = CYY_PORT_INDEX_TOO_HIGH;
      status = STATUS_INSUFFICIENT_RESOURCES;
      goto PortInfoCleanUp;
   }

   

   //
   // We don't want to cause the hal to have a bad day,
   // so let's check the interface type and bus number.
   //
   // We only need to check the registry if they aren't
   // equal to the defaults.
   //

   if (PConfig->BusNumber != 0) {

      BOOLEAN foundIt;

      //**************************************************
      // Error Injection
      //    PConfig->InterfaceType = MaximumInterfaceType;
      //**************************************************

      if (PConfig->InterfaceType >= MaximumInterfaceType) {

         //
         // Ehhhh! Lose Game.
         //

         CyyLogError(
                       pDevExt->DriverObject,
                       NULL,
                       PConfig->PhysicalBoardMemory,
                       CyyPhysicalZero,
                       0,
                       0,
                       0,
                       PConfig->PortIndex+1,
                       STATUS_SUCCESS,
                       CYY_UNKNOWN_BUS,
                       pDevExt->DeviceName.Length,
                       pDevExt->DeviceName.Buffer,
                       0,
                       NULL
                       );

         CyyDbgPrintEx(CYYERRORS, "Invalid Bus type %x\n",
                       PConfig->BusNumber);

         //status = CYY_UNKNOWN_BUS;
         status = STATUS_INSUFFICIENT_RESOURCES;
         goto PortInfoCleanUp;
      }

      IoQueryDeviceDescription(
                              (INTERFACE_TYPE *)&PConfig->InterfaceType,
                              &zero,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              CyyItemCallBack,
                              &foundIt
                              );

      //**************************************************
      // Error Injection
      //      foundIt = FALSE;
      //**************************************************

      if (!foundIt) {

         CyyLogError(
                       pDevExt->DriverObject,
                       NULL,
                       PConfig->PhysicalBoardMemory,
                       CyyPhysicalZero,
                       0,
                       0,
                       0,
                       PConfig->PortIndex+1,
                       STATUS_SUCCESS,
                       CYY_BUS_NOT_PRESENT,
                       pDevExt->DeviceName.Length,
                       pDevExt->DeviceName.Buffer,
                       0,
                       NULL
                       );
         CyyDbgPrintEx(CYYERRORS, "There aren't that many of those\n"
                       "busses on this system,%x\n", PConfig->BusNumber);

         //status = CYY_BUS_NOT_PRESENT;
         status = STATUS_INSUFFICIENT_RESOURCES;
         goto PortInfoCleanUp;

      }

   }   // if (PConfig->BusNumber != 0)

   status = STATUS_SUCCESS;

   //
   // Dump out the port configuration.
   //

   CyyDbgPrintEx(CYYDIAG1, "Runtime Memory address: %x\n",
                 PConfig->PhysicalRuntime.LowPart);

   CyyDbgPrintEx(CYYDIAG1, "Board Memory address: %x\n",
                 PConfig->PhysicalBoardMemory.LowPart);

   CyyDbgPrintEx(CYYDIAG1, "Com Port Index: %x\n",
                 PConfig->PortIndex);

   CyyDbgPrintEx(CYYDIAG1, "Com Port BusNumber: %x\n",
                 PConfig->BusNumber);

   CyyDbgPrintEx(CYYDIAG1, "Com Runtime AddressSpace: %x\n",
                 PConfig->RuntimeAddressSpace);

   CyyDbgPrintEx(CYYDIAG1, "Com Board AddressSpace: %x\n",
                 PConfig->BoardMemoryAddressSpace);

   CyyDbgPrintEx(CYYDIAG1, "Com InterruptMode: %x\n",
                 PConfig->InterruptMode);

   CyyDbgPrintEx(CYYDIAG1, "Com InterfaceType: %x\n",
                 PConfig->InterfaceType);

   CyyDbgPrintEx(CYYDIAG1, "Com OriginalVector: %x\n",
                 PConfig->OriginalVector);

   CyyDbgPrintEx(CYYDIAG1, "Com OriginalIrql: %x\n",
                 PConfig->OriginalIrql);

   PortInfoCleanUp:;

   return status;
}


NTSTATUS
CyyReadSymName(IN PCYY_DEVICE_EXTENSION PDevExt, IN HANDLE hRegKey,
               OUT PUNICODE_STRING PSymName, OUT PWCHAR *PpRegName)
{
   NTSTATUS status;
   UNICODE_STRING linkName;
   PDRIVER_OBJECT pDrvObj;
   PDEVICE_OBJECT pDevObj;

   pDevObj = PDevExt->DeviceObject;
   pDrvObj = pDevObj->DriverObject;
   *PpRegName = NULL;

   RtlZeroMemory(&linkName, sizeof(UNICODE_STRING));

   linkName.MaximumLength = SYMBOLIC_NAME_LENGTH*sizeof(WCHAR);
   linkName.Buffer = ExAllocatePool(PagedPool | POOL_COLD_ALLOCATION, linkName.MaximumLength
                                    + sizeof(WCHAR));

   if (linkName.Buffer == NULL) {
      CyyLogError(pDrvObj, pDevObj, CyyPhysicalZero, CyyPhysicalZero,
                  0, 0, 0, 19, STATUS_SUCCESS, CYY_INSUFFICIENT_RESOURCES,
                  0, NULL, 0, NULL);
      CyyDbgPrintEx(CYYERRORS, "Couldn't allocate memory for device name\n");

      status = STATUS_INSUFFICIENT_RESOURCES;
      goto CyyReadSymNameError;

   }

   RtlZeroMemory(linkName.Buffer, linkName.MaximumLength + sizeof(WCHAR));


   *PpRegName = ExAllocatePool(PagedPool | POOL_COLD_ALLOCATION, SYMBOLIC_NAME_LENGTH * sizeof(WCHAR)
                               + sizeof(WCHAR));

   if (*PpRegName == NULL) {
      CyyLogError(pDrvObj, pDevObj, CyyPhysicalZero, CyyPhysicalZero,
                  0, 0, 0, 19, STATUS_SUCCESS, CYY_INSUFFICIENT_RESOURCES,
                  0, NULL, 0, NULL);
      CyyDbgPrintEx(CYYERRORS, "Couldn't allocate memory for buffer\n");

      status = STATUS_INSUFFICIENT_RESOURCES;
      goto CyyReadSymNameError;

   }

   //
   // Fetch PortName which contains the suggested REG_SZ symbolic name.
   //

   status = CyyGetRegistryKeyValue(hRegKey, L"PortName",
                                   sizeof(L"PortName"), *PpRegName,
                                   SYMBOLIC_NAME_LENGTH * sizeof(WCHAR));

   if (!NT_SUCCESS(status)) {

      //
      // This is for PCMCIA which currently puts the name under Identifier.
      //

      status = CyyGetRegistryKeyValue(hRegKey, L"Identifier",
                                      sizeof(L"Identifier"),
                                      *PpRegName, SYMBOLIC_NAME_LENGTH
                                      * sizeof(WCHAR));

      if (!NT_SUCCESS(status)) {

         //
         // Hmm.  Either we have to pick a name or bail...
         //
         // ...we will bail.
         //

         CyyDbgPrintEx(CYYERRORS, "Getting PortName/Identifier failed - "
                                  "%x\n", status);
         goto CyyReadSymNameError;
      }

   }


   //
   // Create the "\\DosDevices\\<symbolicName>" string
   //

   RtlAppendUnicodeToString(&linkName, L"\\");
   RtlAppendUnicodeToString(&linkName, DEFAULT_DIRECTORY);
   RtlAppendUnicodeToString(&linkName, L"\\");
   RtlAppendUnicodeToString(&linkName, *PpRegName);

   PSymName->MaximumLength = linkName.Length + sizeof(WCHAR);
   PSymName->Buffer = ExAllocatePool(PagedPool | POOL_COLD_ALLOCATION, PSymName->MaximumLength);

   if (PSymName->Buffer == NULL) {
      status = STATUS_INSUFFICIENT_RESOURCES;
      goto CyyReadSymNameError;
   }

   RtlZeroMemory(PSymName->Buffer, PSymName->MaximumLength);

   RtlAppendUnicodeStringToString(PSymName, &linkName);

   CyyDbgPrintEx(CYYDIAG1, "Read name %wZ\n", PSymName);

CyyReadSymNameError:

   if (linkName.Buffer != NULL) {
      ExFreePool(linkName.Buffer);
      linkName.Buffer = NULL;
   }

   if (!NT_SUCCESS(status)) {
      if (*PpRegName != NULL) {
         ExFreePool(*PpRegName);
         *PpRegName = NULL;
      }
   }

   return status;

}



NTSTATUS
CyyDoExternalNaming(IN PCYY_DEVICE_EXTENSION PDevExt,
                       IN PDRIVER_OBJECT PDrvObj)

/*++

Routine Description:

    This routine will be used to create a symbolic link
    to the driver name in the given object directory.

    It will also create an entry in the device map for
    this device - IF we could create the symbolic link.

Arguments:

    Extension - Pointer to the device extension.

Return Value:

    None.

--*/

{
   NTSTATUS status = STATUS_SUCCESS;
   HANDLE keyHandle;
   WCHAR *pRegName = NULL;
   UNICODE_STRING linkName;
   PDEVICE_OBJECT pLowerDevObj, pDevObj;
   ULONG bufLen;


   PAGED_CODE();


   pDevObj = PDevExt->DeviceObject;
   pLowerDevObj = PDevExt->LowerDeviceObject;

   status = IoOpenDeviceRegistryKey(PDevExt->Pdo, PLUGPLAY_REGKEY_DEVICE,
                                    STANDARD_RIGHTS_READ, &keyHandle);

   //
   // Check to see if we are allowed to do external naming; if not,
   // then we just return success
   //


   if (status != STATUS_SUCCESS) {
      return status;
   }


   CyyGetRegistryKeyValue(keyHandle, L"CyySkipExternalNaming",
                             sizeof(L"CyySkipExternalNaming"),
                             &PDevExt->SkipNaming, sizeof(ULONG));

   if (PDevExt->SkipNaming) {
      ZwClose(keyHandle);
      return STATUS_SUCCESS;
   }

   RtlZeroMemory(&linkName, sizeof(UNICODE_STRING));

   linkName.MaximumLength = SYMBOLIC_NAME_LENGTH*sizeof(WCHAR);
   linkName.Buffer = ExAllocatePool(PagedPool, linkName.MaximumLength
                                    + sizeof(WCHAR)); //TODO:"| POOL_COLD_ALLOCATION"???

   //************************************
   //Error Injection
   // 
   //if (linkName.Buffer != NULL) {
   //   ExFreePool(linkName.Buffer);
   //}
   //linkName.Buffer = NULL;
   //************************************

   if (linkName.Buffer == NULL) {
      CyyLogError(PDrvObj, pDevObj, CyyPhysicalZero, CyyPhysicalZero,
                     0, 0, 0, 71, STATUS_SUCCESS, CYY_INSUFFICIENT_RESOURCES,
                     0, NULL, 0, NULL);
      CyyDbgPrintEx(CYYERRORS, "Couldn't allocate memory for device name\n");

      status = STATUS_INSUFFICIENT_RESOURCES;
      ZwClose(keyHandle);
      goto CyyDoExternalNamingError;

   }

   RtlZeroMemory(linkName.Buffer, linkName.MaximumLength + sizeof(WCHAR));


   pRegName = ExAllocatePool(PagedPool, SYMBOLIC_NAME_LENGTH * sizeof(WCHAR)
                             + sizeof(WCHAR)); //TODO:"| POOL_COLD_ALLOCATION"???

   //************************************
   //Error Injection
   //
   //if (pRegName != NULL) {
   //   ExFreePool(pRegName);
   //}
   //pRegName = NULL;
   //************************************

   if (pRegName == NULL) {
      CyyLogError(PDrvObj, pDevObj, CyyPhysicalZero, CyyPhysicalZero,
                     0, 0, 0, 72, STATUS_SUCCESS, CYY_INSUFFICIENT_RESOURCES,
                     0, NULL, 0, NULL);
      CyyDbgPrintEx(CYYERRORS, "Couldn't allocate memory for buffer\n");

      status = STATUS_INSUFFICIENT_RESOURCES;
      ZwClose(keyHandle);
      goto CyyDoExternalNamingError;

   }

   //
   // Fetch PortName which contains the suggested REG_SZ symbolic name.
   //

   status = CyyGetRegistryKeyValue(keyHandle, L"PortName",
                                   sizeof(L"PortName"), pRegName,
                                   SYMBOLIC_NAME_LENGTH * sizeof(WCHAR));

   if (!NT_SUCCESS(status)) {

      //
      // This is for PCMCIA which currently puts the name under Identifier.
      //

      status = CyyGetRegistryKeyValue(keyHandle, L"Identifier",
                                         sizeof(L"Identifier"),
                                         pRegName, SYMBOLIC_NAME_LENGTH
                                         * sizeof(WCHAR));

      if (!NT_SUCCESS(status)) {

         //
         // Hmm.  Either we have to pick a name or bail...
         //
         // ...we will bail.
         //

         CyyDbgPrintEx(CYYERRORS, "Getting PortName/Identifier failed - "
                                  "%x\n", status);
         ZwClose (keyHandle);
         goto CyyDoExternalNamingError;
      }

   }

   ZwClose (keyHandle);

   bufLen = wcslen(pRegName) * sizeof(WCHAR) + sizeof(UNICODE_NULL);

   PDevExt->WmiIdentifier.Buffer = ExAllocatePool(PagedPool, bufLen);

   //************************************
   //Error Injection
   //
   //if (PDevExt->WmiIdentifier.Buffer != NULL) {
   //   ExFreePool(PDevExt->WmiIdentifier.Buffer);
   //}
   //PDevExt->WmiIdentifier.Buffer = NULL;
   //************************************

   if (PDevExt->WmiIdentifier.Buffer == NULL) {
      CyyLogError(PDrvObj, pDevObj, CyyPhysicalZero, CyyPhysicalZero,
                    0, 0, 0, 73, STATUS_SUCCESS, CYY_INSUFFICIENT_RESOURCES,
                    0, NULL, 0, NULL);
      CyyDbgPrintEx(CYYERRORS, "Couldn't allocate memory for WMI name\n");

      status = STATUS_INSUFFICIENT_RESOURCES;
      goto CyyDoExternalNamingError;
   }

   RtlZeroMemory(PDevExt->WmiIdentifier.Buffer, bufLen);

   PDevExt->WmiIdentifier.Length = 0;
   PDevExt->WmiIdentifier.MaximumLength = (USHORT)bufLen - 1;
   RtlAppendUnicodeToString(&PDevExt->WmiIdentifier, pRegName);

   //
   // Create the "\\DosDevices\\<symbolicName>" string
   //
   RtlAppendUnicodeToString(&linkName, L"\\");
   RtlAppendUnicodeToString(&linkName, DEFAULT_DIRECTORY);
   RtlAppendUnicodeToString(&linkName, L"\\");
   RtlAppendUnicodeToString(&linkName, pRegName);

   //
   // Allocate Pool and save the symbolic link name in the device extension.
   //
   PDevExt->SymbolicLinkName.MaximumLength = linkName.Length + sizeof(WCHAR);
   PDevExt->SymbolicLinkName.Buffer
      = ExAllocatePool(PagedPool, PDevExt->SymbolicLinkName.MaximumLength);
                       //TODO:"| POOL_COLD_ALLOCATION"???

   if (!PDevExt->SymbolicLinkName.Buffer) {

      CyyLogError(PDrvObj, pDevObj, CyyPhysicalZero, CyyPhysicalZero,
                    0, 0, 0, 74, STATUS_SUCCESS, CYY_INSUFFICIENT_RESOURCES,
                    0, NULL, 0, NULL);
      CyyDbgPrintEx(CYYERRORS, "Couldn't allocate memory for symbolic link "
                               "name\n");

      status = STATUS_INSUFFICIENT_RESOURCES;
      goto CyyDoExternalNamingError;
   }

   //
   // Zero fill it.
   //

   RtlZeroMemory(PDevExt->SymbolicLinkName.Buffer,
                 PDevExt->SymbolicLinkName.MaximumLength);

   RtlAppendUnicodeStringToString(&PDevExt->SymbolicLinkName,
                                  &linkName);

   PDevExt->DosName.Buffer = ExAllocatePool(PagedPool, 64 + sizeof(WCHAR));

   if (!PDevExt->DosName.Buffer) {

      CyyLogError(PDrvObj, pDevObj, CyyPhysicalZero, CyyPhysicalZero,
                    0, 0, 0, 75, STATUS_SUCCESS, CYY_INSUFFICIENT_RESOURCES,
                    0, NULL, 0, NULL);
      CyyDbgPrintEx(CYYERRORS, "Couldn't allocate memory for Dos name\n");

      status =  STATUS_INSUFFICIENT_RESOURCES;
      goto CyyDoExternalNamingError;
   }


   PDevExt->DosName.MaximumLength = 64 + sizeof(WCHAR);

   //
   // Zero fill it.
   //

   PDevExt->DosName.Length = 0;

   RtlZeroMemory(PDevExt->DosName.Buffer,
                 PDevExt->DosName.MaximumLength);

   RtlAppendUnicodeToString(&PDevExt->DosName, pRegName);
   RtlZeroMemory(((PUCHAR)(&PDevExt->DosName.Buffer[0]))
                 + PDevExt->DosName.Length, sizeof(WCHAR));

   CyyDbgPrintEx(CYYDIAG1, "DosName is %wZ\n", &PDevExt->DosName);

   status = IoCreateSymbolicLink (&PDevExt->SymbolicLinkName,
                                  &PDevExt->DeviceName);

   //************************************
   //Error Injection
   //IoDeleteSymbolicLink(&PDevExt->SymbolicLinkName);
   //status = STATUS_INVALID_PARAMETER;
   //************************************

   if (!NT_SUCCESS(status)) {

      //
      // Oh well, couldn't create the symbolic link.  No point
      // in trying to create the device map entry.
      //

      CyyLogError(PDrvObj, pDevObj, CyyPhysicalZero, CyyPhysicalZero,
                     0, 0, 0, PDevExt->PortIndex+1, status, CYY_NO_SYMLINK_CREATED,
                     PDevExt->DeviceName.Length + sizeof(WCHAR),
                     PDevExt->DeviceName.Buffer, 0, NULL);

      CyyDbgPrintEx(CYYERRORS, "Couldn't create the symbolic link\n"
                               "for port %wZ\n", &PDevExt->DeviceName);

      goto CyyDoExternalNamingError;

   }

   PDevExt->CreatedSymbolicLink = TRUE;

   status = RtlWriteRegistryValue(RTL_REGISTRY_DEVICEMAP, L"SERIALCOMM",
                                   PDevExt->DeviceName.Buffer, REG_SZ,
                                   PDevExt->DosName.Buffer,
                                   PDevExt->DosName.Length + sizeof(WCHAR));

   //************************************
   //Error Injection
   //RtlDeleteRegistryValue(RTL_REGISTRY_DEVICEMAP, SERIAL_DEVICE_MAP,
   //                                  PDevExt->DeviceName.Buffer);
   //status = STATUS_INVALID_PARAMETER;
   //************************************

   if (!NT_SUCCESS(status)) {

      CyyLogError(PDrvObj, pDevObj, CyyPhysicalZero, CyyPhysicalZero,
                     0, 0, 0, PDevExt->PortIndex+1, status, CYY_NO_DEVICE_MAP_CREATED,
                     PDevExt->DeviceName.Length + sizeof(WCHAR),
                     PDevExt->DeviceName.Buffer, 0, NULL);

      CyyDbgPrintEx(CYYERRORS, "Couldn't create the device map entry\n"
                               "------- for port %wZ\n", &PDevExt->DeviceName);

      goto CyyDoExternalNamingError;
   }

   PDevExt->CreatedSerialCommEntry = TRUE;

   //
   // Make the device visible via a device association as well.
   // The reference string is the eight digit device index
   //

   status = IoRegisterDeviceInterface(PDevExt->Pdo, (LPGUID)&GUID_CLASS_COMPORT,
                                      NULL, &PDevExt->DeviceClassSymbolicName);

   if (!NT_SUCCESS(status)) {
      CyyDbgPrintEx(CYYERRORS, "Couldn't register class association "
                               "for port %wZ\n", &PDevExt->DeviceName);

      PDevExt->DeviceClassSymbolicName.Buffer = NULL;
      goto CyyDoExternalNamingError;
   }


   //
   // Now set the symbolic link for the association
   //

   status = IoSetDeviceInterfaceState(&PDevExt->DeviceClassSymbolicName,
                                         TRUE);

   if (!NT_SUCCESS(status)) {
      CyyDbgPrintEx(CYYERRORS, "Couldn't set class association"
                               " for port %wZ\n", &PDevExt->DeviceName);
   }

   CyyDoExternalNamingError:;

   //
   // Clean up error conditions
   //

   if (!NT_SUCCESS(status)) {
      if (PDevExt->DosName.Buffer != NULL) {
         ExFreePool(PDevExt->DosName.Buffer);
         PDevExt->DosName.Buffer = NULL;
      }

      if (PDevExt->CreatedSymbolicLink ==  TRUE) {
         IoDeleteSymbolicLink(&PDevExt->SymbolicLinkName);
         PDevExt->CreatedSymbolicLink = FALSE;
      }

      if (PDevExt->SymbolicLinkName.Buffer != NULL) {
         ExFreePool(PDevExt->SymbolicLinkName.Buffer);
         PDevExt->SymbolicLinkName.Buffer = NULL;
      }

      if (PDevExt->DeviceName.Buffer != NULL) {
         RtlDeleteRegistryValue(RTL_REGISTRY_DEVICEMAP, SERIAL_DEVICE_MAP,
                                PDevExt->DeviceName.Buffer);
      }

      if (PDevExt->DeviceClassSymbolicName.Buffer) {
         IoSetDeviceInterfaceState(&PDevExt->DeviceClassSymbolicName, FALSE);
         ExFreePool(PDevExt->DeviceClassSymbolicName.Buffer); //Added in DDK 2269
         PDevExt->DeviceClassSymbolicName.Buffer = NULL;      //Added in DDK 2269
      }

      if (PDevExt->WmiIdentifier.Buffer != NULL) {
         ExFreePool(PDevExt->WmiIdentifier.Buffer);
         PDevExt->WmiIdentifier.Buffer = NULL;
      }
   }

   //
   // Always clean up our temp buffers.
   //

   if (linkName.Buffer != NULL) {
      ExFreePool(linkName.Buffer);
   }

   if (pRegName != NULL) {
      ExFreePool(pRegName);
   }

   return status;
}





VOID
CyyUndoExternalNaming(IN PCYY_DEVICE_EXTENSION Extension)

/*++

Routine Description:

    This routine will be used to delete a symbolic link
    to the driver name in the given object directory.

    It will also delete an entry in the device map for
    this device if the symbolic link had been created.

Arguments:

    Extension - Pointer to the device extension.

Return Value:

    None.

--*/

{

   NTSTATUS status;
   HANDLE keyHandle;

   PAGED_CODE();

   CyyDbgPrintEx(CYYDIAG3, "In CyyUndoExternalNaming for "
                           "extension: %x of port %wZ\n",
                            Extension,&Extension->DeviceName);

   //
   // Maybe there is nothing for us to do
   //

   if (Extension->SkipNaming) {
      return;
   }

   //
   // We're cleaning up here.  One reason we're cleaning up
   // is that we couldn't allocate space for the directory
   // name or the symbolic link.
   //

   if (Extension->SymbolicLinkName.Buffer && Extension->CreatedSymbolicLink) {

      if (Extension->DeviceClassSymbolicName.Buffer) {
         status = IoSetDeviceInterfaceState(&Extension->DeviceClassSymbolicName,
                                            FALSE);

         //
         // IoRegisterDeviceClassInterface() allocated this string for us,
         // and we no longer need it.
         //

         ExFreePool(Extension->DeviceClassSymbolicName.Buffer);
         Extension->DeviceClassSymbolicName.Buffer = NULL;
      }
            
      //
      // Before we delete the symlink, re-read the PortName
      // from the registry in case we were renamed in user mode.
      //

      status = IoOpenDeviceRegistryKey(Extension->Pdo, PLUGPLAY_REGKEY_DEVICE,
                                       STANDARD_RIGHTS_READ, &keyHandle);

      if (status == STATUS_SUCCESS) {
         UNICODE_STRING symLinkName;
         PWCHAR pRegName;

         RtlInitUnicodeString(&symLinkName, NULL);

         status = CyyReadSymName(Extension, keyHandle, &symLinkName,
                                 &pRegName);

         if (status == STATUS_SUCCESS) {

            CyyDbgPrintEx(CYYDIAG1, "Deleting Link %wZ\n", &symLinkName);
            IoDeleteSymbolicLink(&symLinkName);

            ExFreePool(symLinkName.Buffer);
            ExFreePool(pRegName);
         }

         ZwClose(keyHandle);
      }
   }

   if (Extension->WmiIdentifier.Buffer) {
      ExFreePool(Extension->WmiIdentifier.Buffer);
      Extension->WmiIdentifier.MaximumLength
         = Extension->WmiIdentifier.Length = 0;
      Extension->WmiIdentifier.Buffer = NULL;
   }

   //
   // We're cleaning up here.  One reason we're cleaning up
   // is that we couldn't allocate space for the NtNameOfPort.
   //

   if ((Extension->DeviceName.Buffer != NULL)
        && Extension->CreatedSerialCommEntry) {

      status = RtlDeleteRegistryValue(RTL_REGISTRY_DEVICEMAP, SERIAL_DEVICE_MAP,
                                     Extension->DeviceName.Buffer);
      //************************************
      //Error Injection
      //status = STATUS_INVALID_PARAMETER;
      //************************************

      if (!NT_SUCCESS(status)) {

         CyyLogError(
                       Extension->DeviceObject->DriverObject,
                       Extension->DeviceObject,
                       Extension->OriginalBoardMemory,
                       CyyPhysicalZero,
                       0,
                       0,
                       0,
                       Extension->PortIndex+1,
                       status,
                       CYY_NO_DEVICE_MAP_DELETED,
                       Extension->DeviceName.Length+sizeof(WCHAR),
                       Extension->DeviceName.Buffer,
                       0,
                       NULL
                       );
         CyyDbgPrintEx(CYYERRORS, "Couldn't delete value entry %wZ\n",
                       &Extension->DeviceName);

      }
   }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\y\cyyport\cyyport.h ===
/*--------------------------------------------------------------------------
*	
*   Copyright (C) Cyclades Corporation, 1996-2001.
*   All rights reserved.
*	
*   Cyclom-Y Port Driver
*	
*   This file:      cyyport.h
*	
*   Description:    Type definitions and data for the Cyclom-Y Port 
*                   Driver
*
*   Notes:          This code supports Windows 2000 and x86 processor.
*	
*   Complies with Cyclades SW Coding Standard rev 1.3.
*	
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*   Change History
*
*--------------------------------------------------------------------------
*
*
*--------------------------------------------------------------------------
*/

#define POOL_TAGGING    1

#ifdef POOL_TAGGING
#undef ExAllocatePool
#undef ExAllocatePoolWithQuota
#define ExAllocatePool(a,b) ExAllocatePoolWithTag(a,b,'PyyC')
#define ExAllocatePoolWithQuota(a,b) ExAllocatePoolWithQuotaTag(a,b,'PyyC')
#endif


//
// The following definition is used to include/exclude changes made for power
// support in the driver.  If non-zero the support is included.  If zero the
// support is excluded.
//

#define POWER_SUPPORT   1


#define CYYDIAG1              (DPFLTR_INFO_LEVEL + 1)
#define CYYDIAG2              (DPFLTR_INFO_LEVEL + 2)
#define CYYDIAG3              (DPFLTR_INFO_LEVEL + 3)
#define CYYDIAG4              (DPFLTR_INFO_LEVEL + 4)
#define CYYDIAG5              (DPFLTR_INFO_LEVEL + 5)
#define CYYIRPPATH            (DPFLTR_INFO_LEVEL + 6)
#define CYYINITCODE           (DPFLTR_INFO_LEVEL + 7)
#define CYYTRACECALLS         (DPFLTR_INFO_LEVEL + 8)
#define CYYPNPPOWER           (DPFLTR_INFO_LEVEL + 9)
#define CYYFLOW               (DPFLTR_INFO_LEVEL + 10)
#define CYYERRORS             (DPFLTR_INFO_LEVEL + 11)
#define CYYDBGALL             ((ULONG)0xFFFFFFFF)

#define CYY_DBG_DEFAULT       CYYDBGALL

//
// Some default driver values.  We will check the registry for
// them first.
//
#define CYY_UNINITIALIZED_DEFAULT    1234567
#define CYY_PERMIT_SHARE_DEFAULT     0
#define CYY_RX_FIFO_DEFAULT          8
#define CYY_TX_FIFO_DEFAULT          MAX_CHAR_FIFO

//
// This define gives the default Object directory
// that we should use to insert the symbolic links
// between the NT device name and namespace used by
// that object directory.
#define DEFAULT_DIRECTORY L"DosDevices"

//
// For the above directory, the serial port will
// use the following name as the suffix of the serial
// ports for that directory.  It will also append
// a number onto the end of the name.  That number
// will start at 1.
#define DEFAULT_SERIAL_NAME L"COM"
//
//
// This define gives the default NT name for
// for serial ports detected by the firmware.
// This name will be appended to Device prefix
// with a number following it.  The number is
// incremented each time encounter a serial
// port detected by the firmware.  Note that
// on a system with multiple busses, this means
// that the first port on a bus is not necessarily
// \Device\Serial0.
//
#define DEFAULT_NT_SUFFIX L"Cyyport"


//#define CYY_VENDOR_ID	0x120e
//#define CYY_LO_DEV_ID	0x100
//#define CYY_HI_DEV_ID	0x101



// Defines for OutputRS232
#define	CYY_LC_RTS		0x01
#define	CYY_LC_DTR		0x02


typedef struct _CONFIG_DATA {
    PHYSICAL_ADDRESS    PhysicalRuntime;
    PHYSICAL_ADDRESS    TranslatedRuntime;
    PHYSICAL_ADDRESS    PhysicalBoardMemory; 
    PHYSICAL_ADDRESS    TranslatedBoardMemory;
    ULONG               RuntimeLength;
    ULONG               BoardMemoryLength;
    ULONG               PortIndex;
    ULONG               BusNumber;
    ULONG               RuntimeAddressSpace;
    ULONG               BoardMemoryAddressSpace;
    ULONG               RxFIFO;
    ULONG               TxFIFO;
    INTERFACE_TYPE      InterfaceType;
    KINTERRUPT_MODE     InterruptMode;
    ULONG               OriginalVector;
    ULONG               OriginalIrql;
    ULONG               TrVector;
    ULONG               TrIrql;
    KAFFINITY           Affinity;
    } CONFIG_DATA,*PCONFIG_DATA;


//
// This structure contains configuration data, much of which
// is read from the registry.
//
typedef struct _CYY_REGISTRY_DATA {
    PDRIVER_OBJECT  DriverObject;
    ULONG           ControllersFound;
    ULONG           DebugLevel;
    ULONG           ShouldBreakOnEntry;
    ULONG           RxFIFODefault;
    ULONG           TxFIFODefault;
    ULONG           PermitShareDefault;
    ULONG           PermitSystemWideShare;
    UNICODE_STRING  Directory;
    UNICODE_STRING  NtNameSuffix;
    UNICODE_STRING  DirectorySymbolicName;
    LIST_ENTRY      ConfigList;
} CYY_REGISTRY_DATA,*PCYY_REGISTRY_DATA;


// To support Break command
#define NO_BREAK	0
#define SEND_BREAK	1
#define STOP_BREAK	2
#define DISABLE_ETC	3

// Default xon/xoff characters.
#define CYY_DEF_XON 0x11
#define CYY_DEF_XOFF 0x13

// Reasons why reception may be held up.
#define CYY_RX_DTR       ((ULONG)0x01)
#define CYY_RX_XOFF      ((ULONG)0x02)
#define CYY_RX_RTS       ((ULONG)0x04)
#define CYY_RX_DSR       ((ULONG)0x08)

// Reasons why transmission may be held up.
#define CYY_TX_CTS       ((ULONG)0x01)
#define CYY_TX_DSR       ((ULONG)0x02)
#define CYY_TX_DCD       ((ULONG)0x04)
#define CYY_TX_XOFF      ((ULONG)0x08)
#define CYY_TX_BREAK     ((ULONG)0x10)

//Line status in RDSR Register
#define CYY_LSR_OE		0x01	//Overrun Error
#define CYY_LSR_FE		0x02	//Framing Error
#define CYY_LSR_PE		0x04	//Parity Error
#define CYY_LSR_BI		0x08	//Break Interrupt
#define CYY_LSR_ERROR	0x0f	//Overrun+Framing+Parity+Break

// These values are used by the routines that can be used
// to complete a read (other than interval timeout) to indicate
//
#define CYY_COMPLETE_READ_CANCEL ((LONG)-1)
#define CYY_COMPLETE_READ_TOTAL ((LONG)-2)
#define CYY_COMPLETE_READ_COMPLETE ((LONG)-3)


typedef struct _CYY_DEVICE_STATE {
   //
   // TRUE if we need to set the state to open
   // on a powerup
   //

   BOOLEAN Reopen;
   UCHAR Srer;
   UCHAR Cor1;
   UCHAR Cor2;
   UCHAR Cor3;
   UCHAR Schr1;
   UCHAR Schr2;
   UCHAR Mcor1;
   UCHAR Mcor2;
   UCHAR Rtpr;
   UCHAR Msvr1;
   UCHAR Msvr2;
   UCHAR Rbpr;
   UCHAR Tbpr;
   UCHAR Rcor;
   UCHAR Tcor;

} CYY_DEVICE_STATE, *PCYY_DEVICE_STATE;


#if DBG
#define CyyLockPagableSectionByHandle(_secHandle) \
{ \
    MmLockPagableSectionByHandle((_secHandle)); \
    InterlockedIncrement(&CyyGlobals.PAGESER_Count); \
}

#define CyyUnlockPagableImageSection(_secHandle) \
{ \
   InterlockedDecrement(&CyyGlobals.PAGESER_Count); \
   MmUnlockPagableImageSection(_secHandle); \
}


#define CYY_LOCKED_PAGED_CODE() \
    if ((KeGetCurrentIrql() > APC_LEVEL)  \
    && (CyyGlobals.PAGESER_Count == 0)) { \
    KdPrint(("CYYPORT: Pageable code called at IRQL %d without lock \n", \
             KeGetCurrentIrql())); \
        ASSERT(FALSE); \
        }

#else
#define CyyLockPagableSectionByHandle(_secHandle) \
{ \
    MmLockPagableSectionByHandle((_secHandle)); \
}

#define CyyUnlockPagableImageSection(_secHandle) \
{ \
   MmUnlockPagableImageSection(_secHandle); \
}

#define CYY_LOCKED_PAGED_CODE()
#endif // DBG


#define CyyRemoveQueueDpc(_dpc, _pExt) \
{ \
  if (KeRemoveQueueDpc((_dpc))) { \
     InterlockedDecrement(&(_pExt)->DpcCount); \
  } \
}


typedef struct _CYY_DEVICE_EXTENSION {
//    PKSERVICE_ROUTINE ptIsr;
//    PVOID ptContext;
//    struct _CYY_DEVICE_EXTENSION *ptExtension[CYY_MAX_PORTS];
//    ULONG nchannel;
    BOOLEAN LieRIDSR;

    //
    // This holds the isr that should be called from our own
    // dispatching isr for "cards" that are trying to share the
    // same interrupt.
    //
//    PKSERVICE_ROUTINE TopLevelOurIsr;

    //
    // This holds the context that should be used when we
    // call the above service routine.
    //
//    PVOID TopLevelOurIsrContext;

    //
    // This links together all of the different "cards" that are
    // trying to share the same interrupt of a non-mca machine.
    //
//    LIST_ENTRY TopLevelSharers;

    //
    // This circular doubly linked list links together all
    // devices that are using the same interrupt object.
    // NOTE: This does not mean that they are using the
    // same interrupt "dispatching" routine.
    //
//    LIST_ENTRY CommonInterruptObject;


    //
    // This links together all devobjs that this driver owns.
    // It is needed to search when starting a new device.
    //
    LIST_ENTRY AllDevObjs;

    // For reporting resource usage, we keep around the physical
    // address we got from the registry.
    //
    PHYSICAL_ADDRESS OriginalRuntimeMemory;

    // For reporting resource usage, we keep around the physical
    // address we got from the registry.
    //
    PHYSICAL_ADDRESS OriginalBoardMemory;

    //
    // This value is set by the read code to hold the time value
    // used for read interval timing.  We keep it in the extension
    // so that the interval timer dpc routine determine if the
    // interval time has passed for the IO.
    //
    LARGE_INTEGER IntervalTime;

    //
    // These two values hold the "constant" time that we should use
    // to delay for the read interval time.
    //
    LARGE_INTEGER ShortIntervalAmount;
    LARGE_INTEGER LongIntervalAmount;

    //
    // This holds the value that we use to determine if we should use
    // the long interval delay or the short interval delay.
    //
    LARGE_INTEGER CutOverAmount;

    //
    // This holds the system time when we last time we had
    // checked that we had actually read characters.  Used
    // for interval timing.
    //
    LARGE_INTEGER LastReadTime;

    //
    // We keep a pointer around to our device name for dumps
    // and for creating "external" symbolic links to this
    // device.
    //
    UNICODE_STRING DeviceName;

    //
    // This points to the object directory that we will place
    // a symbolic link to our device name.
    //
    UNICODE_STRING ObjectDirectory;

    //
    // This points to the device name for this device
    // sans device prefix.
    //
    UNICODE_STRING NtNameForPort;

    //
    // This points to the symbolic link name that will be
    // linked to the actual nt device name.
    //
    UNICODE_STRING SymbolicLinkName;

    //
    // This points to the pure "COMx" name
    //
    UNICODE_STRING DosName;

    //
    // This points the the delta time that we should use to
    // delay for interval timing.
    //
    PLARGE_INTEGER IntervalTimeToUse;

    //
    // Points to the device object that contains
    // this device extension.
    //
    PDEVICE_OBJECT DeviceObject;

    //
    // After initialization of the driver is complete, this
    // will either be NULL or point to the routine that the
    // kernel will call when an interrupt occurs.
    //
    // If the pointer is null then this is part of a list
    // of ports that are sharing an interrupt and this isn't
    // the first port that we configured for this interrupt.
    //
    // If the pointer is non-null then this routine has some
    // kind of structure that will "eventually" get us into
    // the real serial isr with a pointer to this device extension.
    //
    // NOTE: On an MCA bus (except for multiport cards) this
    // is always a pointer to the "real" serial isr.
    PKSERVICE_ROUTINE OurIsr;

    //
    // This will generally point right to this device extension.
    //
    // However, when the port that this device extension is
    // "managing" was the first port initialized on a chain
    // of ports that were trying to share an interrupt, this
    // will point to a structure that will enable dispatching
    // to any port on the chain of sharers of this interrupt.
    //
    PVOID OurIsrContext;

    PUCHAR Runtime;         // Virtual Address Pointer to the PLX Runtime memory
    PUCHAR BoardMemory;     // Virtual Address Pointer to the first CD1400 onboard
    PUCHAR Cd1400;          // Virtual Address Pointer to the CD1400 of this port
    PHYSICAL_ADDRESS OriginalCd1400;   // Physical address to the CD1400 or this port
    
    UCHAR  CdChannel;       // Channel number within the CD1400

    //
    // Points to the interrupt object for used by this device.
    //
    PKINTERRUPT Interrupt;

    //
    // This list head is used to contain the time ordered list
    // of read requests.  Access to this list is protected by
    // the global cancel spinlock.
    //
    LIST_ENTRY ReadQueue;

    //
    // This list head is used to contain the time ordered list
    // of write requests.  Access to this list is protected by
    // the global cancel spinlock.
    //
    LIST_ENTRY WriteQueue;

    //
    // This list head is used to contain the time ordered list
    // of set and wait mask requests.  Access to this list is protected by
    // the global cancel spinlock.
    //
    LIST_ENTRY MaskQueue;

    //
    // Holds the serialized list of purge requests.
    //
    LIST_ENTRY PurgeQueue;

    //
    // This points to the irp that is currently being processed
    // for the read queue.  This field is initialized by the open to
    // NULL.
    //
    // This value is only set at dispatch level.  It may be
    // read at interrupt level.
    //
    PIRP CurrentReadIrp;

    //
    // This points to the irp that is currently being processed
    // for the write queue.
    //
    // This value is only set at dispatch level.  It may be
    // read at interrupt level.
    //
    PIRP CurrentWriteIrp;

    //
    // Points to the irp that is currently being processed to
    // affect the wait mask operations.
    //
    PIRP CurrentMaskIrp;

    //
    // Points to the irp that is currently being processed to
    // purge the read/write queues and buffers.
    //
    PIRP CurrentPurgeIrp;

    //
    // Points to the current irp that is waiting on a comm event.
    //
    PIRP CurrentWaitIrp;

    //
    // Points to the irp that is being used to send an immediate
    // character.
    //
    PIRP CurrentImmediateIrp;

    //
    // Points to the irp that is being used to count the number
    // of characters received after an xoff (as currently defined
    // by the IOCTL_CYY_XOFF_COUNTER ioctl) is sent.
    //
    PIRP CurrentXoffIrp;

    //
    // Holds the number of bytes remaining in the current write
    // irp.
    //
    // This location is only accessed while at interrupt level.
    //
    ULONG WriteLength;

    //
    // Holds a pointer to the current character to be sent in
    // the current write.
    //
    // This location is only accessed while at interrupt level.
    //
    PUCHAR WriteCurrentChar;

    //
    // This is a buffer for the read processing.
    //
    // The buffer works as a ring.  When the character is read from
    // the device it will be place at the end of the ring.
    //
    // Characters are only placed in this buffer at interrupt level
    // although character may be read at any level. The pointers
    // that manage this buffer may not be updated except at interrupt
    // level.
    //
    PUCHAR InterruptReadBuffer;

    //
    // This is a pointer to the first character of the buffer into
    // which the interrupt service routine is copying characters.
    //
    PUCHAR ReadBufferBase;

    //
    // This is a count of the number of characters in the interrupt
    // buffer.  This value is set and read at interrupt level.  Note
    // that this value is only *incremented* at interrupt level so
    // it is safe to read it at any level.  When characters are
    // copied out of the read buffer, this count is decremented by
    // a routine that synchronizes with the ISR.
    //
    ULONG CharsInInterruptBuffer;

    //
    // Points to the first available position for a newly received
    // character.  This variable is only accessed at interrupt level and
    // buffer initialization code.
    //
    PUCHAR CurrentCharSlot;

    //
    // This variable is used to contain the last available position
    // in the read buffer.  It is updated at open and at interrupt
    // level when switching between the users buffer and the interrupt
    // buffer.
    //
    PUCHAR LastCharSlot;

    //
    // This marks the first character that is available to satisfy
    // a read request.  Note that while this always points to valid
    // memory, it may not point to a character that can be sent to
    // the user.  This can occur when the buffer is empty.
    //
    PUCHAR FirstReadableChar;

    //
    // Pointer to the lock variable returned for this extension when
    // locking down the driver
    //
    PVOID LockPtr;
    BOOLEAN LockPtrFlag;


    //
    // This variable holds the size of whatever buffer we are currently
    // using.
    //
    ULONG BufferSize;

    //
    // This variable holds .8 of BufferSize. We don't want to recalculate
    // this real often - It's needed when so that an application can be
    // "notified" that the buffer is getting full.
    //
    ULONG BufferSizePt8;

    //
    // This value holds the number of characters desired for a
    // particular read.  It is initially set by read length in the
    // IRP.  It is decremented each time more characters are placed
    // into the "users" buffer buy the code that reads characters
    // out of the typeahead buffer into the users buffer.  If the
    // typeahead buffer is exhausted by the read, and the reads buffer
    // is given to the isr to fill, this value is becomes meaningless.
    //
    ULONG NumberNeededForRead;

    //
    // This mask will hold the bitmask sent down via the set mask
    // ioctl.  It is used by the interrupt service routine to determine
    // if the occurence of "events" (in the serial drivers understanding
    // of the concept of an event) should be noted.
    //
    ULONG IsrWaitMask;

    //
    // This mask will always be a subset of the IsrWaitMask.  While
    // at device level, if an event occurs that is "marked" as interesting
    // in the IsrWaitMask, the driver will turn on that bit in this
    // history mask.  The driver will then look to see if there is a
    // request waiting for an event to occur.  If there is one, it
    // will copy the value of the history mask into the wait irp, zero
    // the history mask, and complete the wait irp.  If there is no
    // waiting request, the driver will be satisfied with just recording
    // that the event occured.  If a wait request should be queued,
    // the driver will look to see if the history mask is non-zero.  If
    // it is non-zero, the driver will copy the history mask into the
    // irp, zero the history mask, and then complete the irp.
    //
    ULONG HistoryMask;

    //
    // This is a pointer to the where the history mask should be
    // placed when completing a wait.  It is only accessed at
    // device level.
    //
    // We have a pointer here to assist us to synchronize completing a wait.
    // If this is non-zero, then we have wait outstanding, and the isr still
    // knows about it.  We make this pointer null so that the isr won't
    // attempt to complete the wait.
    //
    // We still keep a pointer around to the wait irp, since the actual
    // pointer to the wait irp will be used for the "common" irp completion
    // path.
    //
    ULONG *IrpMaskLocation;

    //
    // This mask holds all of the reason that transmission
    // is not proceeding.  Normal transmission can not occur
    // if this is non-zero.
    //
    // This is only written from interrupt level.
    // This could be (but is not) read at any level.
    //
    ULONG TXHolding;

    //
    // This mask holds all of the reason that reception
    // is not proceeding.  Normal reception can not occur
    // if this is non-zero.
    //
    // This is only written from interrupt level.
    // This could be (but is not) read at any level.
    //
    ULONG RXHolding;

    //
    // This holds the reasons that the driver thinks it is in
    // an error state.
    //
    // This is only written from interrupt level.
    // This could be (but is not) read at any level.
    //
    ULONG ErrorWord;

    //
    // This keeps a total of the number of characters that
    // are in all of the "write" irps that the driver knows
    // about.  It is only accessed with the cancel spinlock
    // held.
    //
    ULONG TotalCharsQueued;

    //
    // This holds a count of the number of characters read
    // the last time the interval timer dpc fired.  It
    // is a long (rather than a ulong) since the other read
    // completion routines use negative values to indicate
    // to the interval timer that it should complete the read
    // if the interval timer DPC was lurking in some DPC queue when
    // some other way to complete occurs.
    //
    LONG CountOnLastRead;

    //
    // This is a count of the number of characters read by the
    // isr routine.  It is *ONLY* written at isr level.  We can
    // read it at dispatch level.
    //
    ULONG ReadByIsr;

    //
    // This holds the current baud rate for the device.
    //
    ULONG CurrentBaud;

    //
    // This is the number of characters read since the XoffCounter
    // was started.  This variable is only accessed at device level.
    // If it is greater than zero, it implies that there is an
    // XoffCounter ioctl in the queue.
    //
    LONG CountSinceXoff;

    //
    // This ulong is incremented each time something trys to start
    // the execution path that tries to lower the RTS line when
    // doing transmit toggling.  If it "bumps" into another path
    // (indicated by a false return value from queueing a dpc
    // and a TRUE return value tring to start a timer) it will
    // decrement the count.  These increments and decrements
    // are all done at device level.  Note that in the case
    // of a bump while trying to start the timer, we have to
    // go up to device level to do the decrement.
    //
    ULONG CountOfTryingToLowerRTS;

    //
    // This ULONG is used to keep track of the "named" (in ntddser.h)
    // baud rates that this particular device supports.
    //
    ULONG SupportedBauds;

    //
    // This value holds the span (in units of bytes) of the register
    // set controlling this port.  This is constant over the life
    // of the port.
    //
    ULONG RuntimeLength;

    //
    // This value holds the span (in units of bytes) of the interrupt
    // status register associated with this port.  This is constant
    // over the life of the port.
    //
    ULONG BoardMemoryLength;

    //
    // The number of characters to push out if a fifo is present.
    //
    ULONG TxFifoAmount;

    //
    // Set to indicate that it is ok to share interrupts within the device.
    //
    ULONG PermitShare;

    //
    // Holds the timeout controls for the device.  This value
    // is set by the Ioctl processing.
    //
    // It should only be accessed under protection of the control
    // lock since more than one request can be in the control dispatch
    // routine at one time.
    //
    SERIAL_TIMEOUTS Timeouts;

    //
    // This holds the various characters that are used
    // for replacement on errors and also for flow control.
    //
    // They are only set at interrupt level.
    //
    SERIAL_CHARS SpecialChars;

    //
    // This structure holds the handshake and control flow
    // settings for the serial driver.
    //
    // It is only set at interrupt level.  It can be
    // be read at any level with the control lock held.
    //
    SERIAL_HANDFLOW HandFlow;

    //
    // Holds performance statistics that applications can query.
    // Reset on each open.  Only set at device level.
    //
    SERIALPERF_STATS PerfStats;

    //
    // This holds what we beleive to be the current value of
    // the line control register.
    //
    // It should only be accessed under protection of the control
    // lock since more than one request can be in the control dispatch
    // routine at one time.
    //
    UCHAR msvr;
    UCHAR cor1;

    //
    // We keep track of whether the somebody has the device currently
    // opened with a simple boolean.  We need to know this so that
    // spurious interrupts from the device (especially during initialization)
    // will be ignored.  This value is only accessed in the ISR and
    // is only set via synchronization routines.  We may be able
    // to get rid of this boolean when the code is more fleshed out.
    //
    BOOLEAN DeviceIsOpened;

    //
    // This is only accessed at interrupt level.  It keeps track
    // of whether the holding register is empty.
    //
    BOOLEAN HoldingEmpty;

    //
    // This variable is only accessed at interrupt level.  It
    // indicates that we want to transmit a character immediately.
    // That is - in front of any characters that could be transmitting
    // from a normal write.
    //
    BOOLEAN TransmitImmediate;

    //
    // This variable is only accessed at interrupt level.  Whenever
    // a wait is initiated this variable is set to false.
    // Whenever any kind of character is written it is set to true.
    // Whenever the write queue is found to be empty the code that
    // is processing that completing irp will synchonize with the interrupt.
    // If this synchronization code finds that the variable is true and that
    // there is a wait on the transmit queue being empty then it is
    // certain that the queue was emptied and that it has happened since
    // the wait was initiated.
    //
    BOOLEAN EmptiedTransmit;

    //
    // This simply indicates that the port associated with this
    // extension is part of a multiport card.
    //
//    BOOLEAN PortOnAMultiportCard;


    //
    // We keep the following values around so that we can connect
    // to the interrupt and report resources after the configuration
    // record is gone.
    //
    ULONG Vector;
    KIRQL Irql;
    ULONG OriginalVector;
    ULONG OriginalIrql;
    KINTERRUPT_MODE InterruptMode;
    KAFFINITY ProcessorAffinity;
    ULONG RuntimeAddressSpace;
    ULONG BoardMemoryAddressSpace;
    ULONG BusNumber;
    INTERFACE_TYPE InterfaceType;

    //
    // Port index no for multiport devices
    //
    ULONG PortIndex;

    //
    // We hold the character that should be transmitted immediately.
    //
    // Note that we can't use this to determine whether there is
    // a character to send because the character to send could be
    // zero.
    //
    UCHAR ImmediateChar;

    //
    // This holds the mask that will be used to mask off unwanted
    // data bits of the received data (valid data bits can be 5,6,7,8)
    // The mask will normally be 0xff.  This is set while the control
    // lock is held since it wouldn't have adverse effects on the
    // isr if it is changed in the middle of reading characters.
    // (What it would do to the app is another question - but then
    // the app asked the driver to do it.)
    //
    UCHAR ValidDataMask;

    //
    // The application can turn on a mode,via the
    // IOCTL_CYY_LSRMST_INSERT ioctl, that will cause the
    // serial driver to insert the line status or the modem
    // status into the RX stream.  The parameter with the ioctl
    // is a pointer to a UCHAR.  If the value of the UCHAR is
    // zero, then no insertion will ever take place.  If the
    // value of the UCHAR is non-zero (and not equal to the
    // xon/xoff characters), then the serial driver will insert.
    //
    UCHAR EscapeChar;

// REMOVED FANNY
//    //
//    // This boolean will be true if a 16550 is present *and* enabled.
//    //
//    BOOLEAN FifoPresent;
//
//    //
//    // This denotes that this particular port is an on the motherboard
//    // port for the Jensen hardware.  On these ports the OUT2 bit
//    // which is used to enable/disable interrupts is always hight.
//    //
//    BOOLEAN Jensen;

    //
    // This is the water mark that the rxfifo should be
    // set to when the fifo is turned on.  This is not the actual
    // value, but the encoded value that goes into the register.
    //
    UCHAR RxFifoTrigger;

    //
    // Says whether this device can share interrupts with devices
    // other than serial devices.
    //
    BOOLEAN InterruptShareable;

    //
    // Records whether we actually created the symbolic link name
    // at driver load time.  If we didn't create it, we won't try
    // to distry it when we unload.
    //
    BOOLEAN CreatedSymbolicLink;

    //
    // Records whether we actually created an entry in SERIALCOMM
    // at driver load time.  If we didn't create it, we won't try
    // to destroy it when the device is removed.
    //
    BOOLEAN CreatedSerialCommEntry;

    //
    // We place all of the kernel and Io subsystem "opaque" structures
    // at the end of the extension.  We don't care about their contents.
    //

    //
    // This lock will be used to protect various fields in
    // the extension that are set (& read) in the extension
    // by the io controls.
    //
    KSPIN_LOCK ControlLock;

    //
    // This lock will be used to protect the accept / reject state
    // transitions and flags of the driver  It must be acquired
    // before a cancel lock
    //

    KSPIN_LOCK FlagsLock;

    //
    // This points to a DPC used to complete read requests.
    //
    KDPC CompleteWriteDpc;

    //
    // This points to a DPC used to complete read requests.
    //
    KDPC CompleteReadDpc;

    //
    // This dpc is fired off if the timer for the total timeout
    // for the read expires.  It will execute a dpc routine that
    // will cause the current read to complete.
    //
    //
    KDPC TotalReadTimeoutDpc;

    //
    // This dpc is fired off if the timer for the interval timeout
    // expires.  If no more characters have been read then the
    // dpc routine will cause the read to complete.  However, if
    // more characters have been read then the dpc routine will
    // resubmit the timer.
    //
    KDPC IntervalReadTimeoutDpc;

    //
    // This dpc is fired off if the timer for the total timeout
    // for the write expires.  It will execute a dpc routine that
    // will cause the current write to complete.
    //
    //
    KDPC TotalWriteTimeoutDpc;

    //
    // This dpc is fired off if a comm error occurs.  It will
    // execute a dpc routine that will cancel all pending reads
    // and writes.
    //
    KDPC CommErrorDpc;

    //
    // This dpc is fired off if an event occurs and there was
    // a irp waiting on that event.  A dpc routine will execute
    // that completes the irp.
    //
    KDPC CommWaitDpc;

    //
    // This dpc is fired off when the transmit immediate char
    // character is given to the hardware.  It will simply complete
    // the irp.
    //
    KDPC CompleteImmediateDpc;

    //
    // This dpc is fired off if the transmit immediate char
    // character times out.  The dpc routine will "grab" the
    // irp from the isr and time it out.
    //
    KDPC TotalImmediateTimeoutDpc;

    //
    // This dpc is fired off if the timer used to "timeout" counting
    // the number of characters received after the Xoff ioctl is started
    // expired.
    //
    KDPC XoffCountTimeoutDpc;

    //
    // This dpc is fired off if the xoff counter actually runs down
    // to zero.
    //
    KDPC XoffCountCompleteDpc;

    //
    // This dpc is fired off only from device level to start off
    // a timer that will queue a dpc to check if the RTS line
    // should be lowered when we are doing transmit toggling.
    //
    KDPC StartTimerLowerRTSDpc;

    //
    // This dpc is fired off when a timer expires (after one
    // character time), so that code can be invoked that will
    // check to see if we should lower the RTS line when
    // doing transmit toggling.
    //
    KDPC PerhapsLowerRTSDpc;

    //
    // This DPC is fired to set an event stating that all other
    // DPC's have been finish for this device extension so that
    // paged code may be unlocked.
    //

    KDPC IsrUnlockPagesDpc;

    //
    // This is the kernal timer structure used to handle
    // total read request timing.
    //
    KTIMER ReadRequestTotalTimer;

    //
    // This is the kernal timer structure used to handle
    // interval read request timing.
    //
    KTIMER ReadRequestIntervalTimer;

    //
    // This is the kernal timer structure used to handle
    // total time request timing.
    //
    KTIMER WriteRequestTotalTimer;

    //
    // This is the kernal timer structure used to handle
    // total time request timing.
    //
    KTIMER ImmediateTotalTimer;

    //
    // This timer is used to timeout the xoff counter
    // io.
    //
    KTIMER XoffCountTimer;

    //
    // This timer is used to invoke a dpc one character time
    // after the timer is set.  That dpc will be used to check
    // whether we should lower the RTS line if we are doing
    // transmit toggling.
    //
    KTIMER LowerRTSTimer;
	
    //
    // This is a pointer to the next lower device in the IRP stack.
    //

    PDEVICE_OBJECT LowerDeviceObject;

    //
    // This is where keep track of the power state the device is in.
    //

    DEVICE_POWER_STATE PowerState;

    //
    // Pointer to the driver object
    //

    PDRIVER_OBJECT DriverObject;


    //
    // Event used to do some synchronization with the devices underneath me
    // (namely ACPI)
    //

    KEVENT SerialSyncEvent;


    //
    // String where we keep the symbolic link that is returned to us when we
    // register our device under the COMM class with the Plug and Play manager.
    //

    UNICODE_STRING DeviceClassSymbolicName;

    //
    // Count of pending IRP's
    //

    ULONG PendingIRPCnt;

    //
    // Accepting requests?
    //

    ULONG DevicePNPAccept;

    //
    // No IRP's pending event
    //

    KEVENT PendingIRPEvent;

    //
    // PNP State
    //

    ULONG PNPState;

    //
    // Misc Flags
    //

    ULONG Flags;

    //
    // Open count
    //

    LONG OpenCount;

    //
    // Start sync event
    //

    KEVENT CyyStartEvent;

    //
    // Current state during powerdown
    //

    CYY_DEVICE_STATE DeviceState;

    //
    // Device stack capabilites
    //

    DEVICE_POWER_STATE DeviceStateMap[PowerSystemMaximum];

    //
    // Event to signal transition to D0 completion
    //

    KEVENT PowerD0Event;

    //
    // List of stalled IRP's
    //

    LIST_ENTRY StalledIrpQueue;

    //
    // Mutex on open status
    //

    FAST_MUTEX OpenMutex;

    //
    // Mutex on close
    //

    FAST_MUTEX CloseMutex;

    //
    // TRUE if we own power policy
    //

    BOOLEAN OwnsPowerPolicy;

    //
    // SystemWake from devcaps
    //

    SYSTEM_POWER_STATE SystemWake;

    //
    // DeviceWake from devcaps
    //

    DEVICE_POWER_STATE DeviceWake;

    //
    // Our PDO
    //

    PDEVICE_OBJECT Pdo;

    //
    // Should we enable wakeup
    //

    BOOLEAN SendWaitWake;

    //
    // Pending wait wake IRP
    //

    PIRP PendingWakeIrp;

    //
    // WMI Information
    //

    WMILIB_CONTEXT WmiLibInfo;

    //
    // Name to use as WMI identifier
    //

    UNICODE_STRING WmiIdentifier;

    //
    // WMI Comm Data
    //

    SERIAL_WMI_COMM_DATA WmiCommData;

    //
    // WMI HW Data
    //

    SERIAL_WMI_HW_DATA WmiHwData;

    //
    // WMI Performance Data
    //

    SERIAL_WMI_PERF_DATA WmiPerfData;

    //
    // Pending DPC count
    //

    ULONG DpcCount;

    //
    // Pending DPC event
    //

    KEVENT PendingDpcEvent;

    //
    // Should we expose external interfaces?
    //

    ULONG SkipNaming;

    
    //
    // CD1400 clock (Revision G runs at 25Mhz, later versions runs at 60Mhz)
    //
    ULONG CDClock;
	
	//
	// MSVR register that controls RTS.
	//
	ULONG MSVR_RTS;
	
	//
	// MSVR register that controls DTR.
	//
	ULONG MSVR_DTR;
	
	//
	// RTS bit in the MSVR register.
	//
	UCHAR RTSset;
	
	//
	// DTR bit in the MSVR register.
	//
	UCHAR DTRset;

	//
	// Receive Time-out Period Register.
	//
	ULONG Rtpr;

	//
	// Com port number.
	//
	//ULONG Com;
		
	//
	// This flag tells how the ISR should handle Break.
	//
	ULONG BreakCmd;
				
	//
	// Flag to indicate if Command Failure error was already logged.
	// Only one log per driver load. Otherwise, the system may crash if 
	// too many logs start happening.
	//
	BOOLEAN CmdFailureLog;

   //
   // It indicates if the board is PCI or ISA.
   //
   ULONG IsPci;

   //
   // PCI slot where the board is inserted.
   //
   ULONG PciSlot;

   //
   // Flag to indicate that COR3 was set using RxFifoTrigger set by application
   //
   BOOLEAN RxFifoTriggerUsed;

    } CYY_DEVICE_EXTENSION,*PCYY_DEVICE_EXTENSION;

#define CYY_PNPACCEPT_OK                 0x0L
#define CYY_PNPACCEPT_REMOVING           0x1L
#define CYY_PNPACCEPT_STOPPING           0x2L
#define CYY_PNPACCEPT_STOPPED            0x4L
#define CYY_PNPACCEPT_SURPRISE_REMOVING  0x8L

#define CYY_PNP_ADDED                    0x0L
#define CYY_PNP_STARTED                  0x1L
#define CYY_PNP_QSTOP                    0x2L
#define CYY_PNP_STOPPING                 0x3L
#define CYY_PNP_QREMOVE                  0x4L
#define CYY_PNP_REMOVING                 0x5L
#define CYY_PNP_RESTARTING               0x6L

#define CYY_FLAGS_CLEAR                  0x0L
#define CYY_FLAGS_STARTED                0x1L
#define CYY_FLAGS_STOPPED                0x2L
#define CYY_FLAGS_BROKENHW               0x4L


//
// When dealing with a multi-port device (that is possibly
// daisy chained with other multi-port device), the interrupt
// service routine will actually be a routine that determines
// which port on which board is actually causing the interrupt.
//
// The following structure is used so that only one device
// extension will actually need to connect to the interrupt.
// The following structure which is passed to the interrupt
// service routine contains the addresses of all of the
// interrupt status registers (there will be multiple
// status registers when multi-port cards are chained).  It
// will contain the addresses of all the extensions whose
// devices are being serviced by this interrupt.
//

typedef struct _CYY_DISPATCH {
    PUCHAR  Cd1400[CYY_MAX_PORTS];
    PCYY_DEVICE_EXTENSION Extensions[CYY_MAX_PORTS];
    ULONG   IsPci;
    } CYY_DISPATCH,*PCYY_DISPATCH;

//
// We use this to query into the registry as to whether we
// should break at driver entry.
//

extern CYY_REGISTRY_DATA    driverDefaults;


//
// This is exported from the kernel.  It is used to point
// to the address that the kernel debugger is using.
//

extern PUCHAR *KdComPortInUse;

typedef enum _CYY_MEM_COMPARES {
    AddressesAreEqual,
    AddressesOverlap,
    AddressesAreDisjoint
    } CYY_MEM_COMPARES,*PCYY_MEM_COMPARES;

typedef struct _CYY_GLOBALS {
   LIST_ENTRY AllDevObjs;
   PVOID PAGESER_Handle;
   UNICODE_STRING RegistryPath;
   KSPIN_LOCK GlobalsSpinLock;
#if DBG
   ULONG PAGESER_Count;
#endif // DBG
} CYY_GLOBALS, *PCYY_GLOBALS;

extern CYY_GLOBALS CyyGlobals;

typedef struct _SERIAL_PTR_CTX {
   ULONG isPointer;
   PHYSICAL_ADDRESS Port;
   ULONG Vector;
} SERIAL_PTR_CTX, *PSERIAL_PTR_CTX;

#define DEVICE_OBJECT_NAME_LENGTH       128
#define SYMBOLIC_NAME_LENGTH            128
#define SERIAL_DEVICE_MAP               L"SERIALCOMM"

//
// Return values for mouse detection callback
//

#define SERIAL_FOUNDPOINTER_PORT   1
#define SERIAL_FOUNDPOINTER_VECTOR 2


#define CyyCompleteRequest(PDevExt, PIrp, PriBoost) \
   { \
      CyyDbgPrintEx(CYYIRPPATH, "Complete Irp: %X\n", (PIrp)); \
      IoCompleteRequest((PIrp), (PriBoost)); \
      CyyIRPEpilogue((PDevExt)); \
   }

#define SERIAL_WMI_GUID_LIST_SIZE 5

extern WMIGUIDREGINFO SerialWmiGuidList[SERIAL_WMI_GUID_LIST_SIZE];
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\y\cyyport\cyypower.c ===
/*--------------------------------------------------------------------------
*	
*   Copyright (C) Cyclades Corporation, 1999-2001.
*   All rights reserved.
*	
*   Cyclom-Y Port Driver
*	
*   This file:      cyypower.c
*	
*   Description:    This module contains the code that handles the power 
*                   IRPs for the Cyclom-Y Port driver.
*
*   Notes:          This code supports Windows 2000 and Windows XP,
*                   x86 and IA64 processors.
*	
*   Complies with Cyclades SW Coding Standard rev 1.3.
*	
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*   Change History
*
*--------------------------------------------------------------------------
*   Initial implementation based on Microsoft sample code.
*
*--------------------------------------------------------------------------
*/

#include "precomp.h"

#ifdef ALLOC_PRAGMA
#pragma alloc_text(PAGESRP0, CyyGotoPowerState)
#pragma alloc_text(PAGESRP0, CyyPowerDispatch)
//#pragma alloc_text(PAGESRP0, CyySetPowerD0)
#pragma alloc_text(PAGESRP0, CyySetPowerD3)
//#pragma alloc_text(PAGESRP0, CyySaveDeviceState)
//#pragma alloc_text(PAGESRP0, CyyRestoreDeviceState)
#pragma alloc_text(PAGESRP0, CyySendWaitWake)
#endif // ALLOC_PRAGMA


typedef struct _POWER_COMPLETION_CONTEXT {

    PDEVICE_OBJECT  DeviceObject;
    PIRP            SIrp;

} POWER_COMPLETION_CONTEXT, *PPOWER_COMPLETION_CONTEXT;



NTSTATUS
CyySetPowerEvent(IN PDEVICE_OBJECT PDevObj, UCHAR MinorFunction,
                 IN POWER_STATE PowerState, IN PVOID Context,
                 PIO_STATUS_BLOCK IoStatus)
/*++

Routine Description:

    This routine is the completion routine for PoRequestPowerIrp calls
    in this module.

Arguments:

    PDevObj - Pointer to the device object the irp is completing for

    MinorFunction - IRP_MN_XXXX value requested

    PowerState - Power state request was made of

    Context - Event to set or NULL if no setting required

    IoStatus - Status block from request

Return Value:

    VOID


--*/
{
   if (Context != NULL) {
      KeSetEvent((PKEVENT)Context, IO_NO_INCREMENT, 0);
   }

   return STATUS_SUCCESS;
}

#if 0
BOOLEAN
CyyDisableInterruptInPLX(
    IN PVOID Context      
    )
/*++

Routine Description:

    This routine disables the PLX interrupts and puts the hw in a "safe" state when
    not in use (like a close or powerdown).

Arguments:

    Context - Really a pointer to the device extension.

Return Value:

    This routine always returns FALSE.

--*/
{

   PCYY_DEVICE_EXTENSION PDevExt = Context;
   PUCHAR chip = PDevExt->Cd1400;
   ULONG bus = PDevExt->IsPci;

   if (PDevExt->IsPci){

      ULONG i;
      UCHAR plx_ver;
      ULONG original;
      PCYY_DISPATCH pDispatch;

      pDispatch = (PCYY_DISPATCH)PDevExt->OurIsrContext;
      pDispatch->Cd1400[PDevExt->PortIndex] = NULL;

      for (i = 0; i < CYY_MAX_PORTS; i++) {
         if (pDispatch->Cd1400[PDevExt->PortIndex] != NULL) {
            break;
         }
      }

      if (i == CYY_MAX_PORTS) {
            
         // This was the last port, disable Interrupts.

         CYY_CLEAR_INTERRUPT(PDevExt->BoardMemory,PDevExt->IsPci); 

         plx_ver = CYY_READ_PCI_TYPE(PDevExt->BoardMemory);
         plx_ver &= 0x0f;

         switch(plx_ver) {
         case CYY_PLX9050:
            original = PLX9050_READ_INTERRUPT_CONTROL(PDevExt->Runtime);
            PLX9050_WRITE_INTERRUPT_CONTROL(PDevExt->Runtime,
                                            original&~PLX9050_INT_ENABLE);
            break;
         case CYY_PLX9060:
         case CYY_PLX9080:
         default:
            original = PLX9060_READ_INTERRUPT_CONTROL(PDevExt->Runtime);
            PLX9060_WRITE_INTERRUPT_CONTROL(PDevExt->Runtime,
                                            original&~PLX9060_INT_ENABLE);
            break;				
         }
      }	    
   }

   // Disable interrupt mask in the CD1400
   CD1400_WRITE(chip,bus,CAR,PDevExt->CdChannel & 0x03);
   CD1400_WRITE(chip,bus,SRER,0x00);
   CyyCDCmd(PDevExt,CCR_RESET_CHANNEL); // Disables tx and rx, all FIFOs flushed.
   
   return FALSE;
}


BOOLEAN
CyyFlushCd1400(IN PVOID Context)

/*++

Routine Description:

    This routine flushes the Tx FIFO.

Arguments:

    Context - Really a pointer to the device extension.

Return Value:

    This routine always returns FALSE.

--*/

{
   PCYY_DEVICE_EXTENSION extension = Context;
   PUCHAR chip = extension->Cd1400;
   ULONG bus = extension->IsPci;

   // Flush TX FIFO
   CD1400_WRITE(chip,bus,CAR,extension->CdChannel & 0x03);
   CyyCDCmd(extension,CCR_FLUSH_TXFIFO);

   return FALSE;

}
#endif

BOOLEAN
CyySaveDeviceState(
    IN PVOID Context
    )
/*++

Routine Description:

    This routine saves the device state of the UART

Arguments:

    PDevExt - Pointer to the device extension for the devobj to save the state
              for.

Return Value:

    VOID


--*/
{
   PCYY_DEVICE_EXTENSION PDevExt = Context;
   PCYY_DEVICE_STATE pDevState = &PDevExt->DeviceState;
   PUCHAR chip = PDevExt->Cd1400;
   ULONG bus = PDevExt->IsPci;

   CyyDbgPrintEx(CYYTRACECALLS, "Entering CyySaveDeviceState\n");

   if (PDevExt->IsPci){

      ULONG i;
      UCHAR plx_ver;
      ULONG original;
      PCYY_DISPATCH pDispatch;

      pDispatch = (PCYY_DISPATCH)PDevExt->OurIsrContext;
      pDispatch->Cd1400[PDevExt->PortIndex] = NULL;

      for (i = 0; i < CYY_MAX_PORTS; i++) {
         if (pDispatch->Cd1400[PDevExt->PortIndex] != NULL) {
            break;
         }
      }

      if (i == CYY_MAX_PORTS) {
            
         // This was the last port, disable Interrupts.

         CYY_CLEAR_INTERRUPT(PDevExt->BoardMemory,PDevExt->IsPci); 

         plx_ver = CYY_READ_PCI_TYPE(PDevExt->BoardMemory);
         plx_ver &= 0x0f;

         switch(plx_ver) {
         case CYY_PLX9050:
            original = PLX9050_READ_INTERRUPT_CONTROL(PDevExt->Runtime);
            PLX9050_WRITE_INTERRUPT_CONTROL(PDevExt->Runtime,
                                            original&~PLX9050_INT_ENABLE);
            break;
         case CYY_PLX9060:
         case CYY_PLX9080:
         default:
            original = PLX9060_READ_INTERRUPT_CONTROL(PDevExt->Runtime);
            PLX9060_WRITE_INTERRUPT_CONTROL(PDevExt->Runtime,
                                            original&~PLX9060_INT_ENABLE);
            break;				
         }
      }	    
   }

   // Flush TX FIFO
   CD1400_WRITE(chip,bus,CAR,PDevExt->CdChannel & 0x03);
   CyyCDCmd(PDevExt,CCR_FLUSH_TXFIFO);

   CD1400_WRITE(chip,bus,CAR,PDevExt->CdChannel & 0x03);
   pDevState->Srer  = CD1400_READ(chip,bus,SRER);
   pDevState->Cor1  = CD1400_READ(chip,bus,COR1);
   pDevState->Cor2  = CD1400_READ(chip,bus,COR2);
   pDevState->Cor3  = CD1400_READ(chip,bus,COR3);
   pDevState->Schr1 = CD1400_READ(chip,bus,SCHR1);
   pDevState->Schr2 = CD1400_READ(chip,bus,SCHR2);
   pDevState->Mcor1 = CD1400_READ(chip,bus,MCOR1);
   pDevState->Mcor2 = CD1400_READ(chip,bus,MCOR2);
   pDevState->Rtpr  = CD1400_READ(chip,bus,RTPR);
   pDevState->Msvr1 = CD1400_READ(chip,bus,MSVR1);
   pDevState->Msvr2 = CD1400_READ(chip,bus,MSVR2);
   pDevState->Rbpr  = CD1400_READ(chip,bus,RBPR);
   pDevState->Tbpr  = CD1400_READ(chip,bus,TBPR);
   pDevState->Rcor  = CD1400_READ(chip,bus,RCOR);
   pDevState->Tcor  = CD1400_READ(chip,bus,TCOR);

   // Disable interrupt mask in the CD1400
   CD1400_WRITE(chip,bus,CAR,PDevExt->CdChannel & 0x03);
   CD1400_WRITE(chip,bus,SRER,0x00);
   CyyCDCmd(PDevExt,CCR_RESET_CHANNEL); // Disables tx and rx, all FIFOs flushed.

   PDevExt->PowerState = PowerDeviceD3;

   CyyDbgPrintEx(CYYTRACECALLS, "Leaving CyySaveDeviceState\n");

   return FALSE;
}

VOID
CyyEnableInterruptInPLX(
    IN PVOID Context      
    )
/*++

Routine Description:

    This routine enables the PLX interrupts and puts the hw in a "safe" state when
    not in use (like a close or powerdown).

Arguments:

    Context - Really a pointer to the device extension.

Return Value:

    This routine always returns FALSE.

--*/
{

   PCYY_DEVICE_EXTENSION PDevExt = Context;

   if (PDevExt->IsPci){

      UCHAR plx_ver;
      ULONG original;

      plx_ver = CYY_READ_PCI_TYPE(PDevExt->BoardMemory);
      plx_ver &= 0x0f;

      switch(plx_ver) {
      case CYY_PLX9050:
         original = PLX9050_READ_INTERRUPT_CONTROL(PDevExt->Runtime);
         if ((original & PLX9050_INT_ENABLE) != PLX9050_INT_ENABLE) {
            PLX9050_WRITE_INTERRUPT_CONTROL(PDevExt->Runtime,
                                            original|PLX9050_INT_ENABLE);
         }
         break;
      case CYY_PLX9060:
      case CYY_PLX9080:
      default:
         original = PLX9060_READ_INTERRUPT_CONTROL(PDevExt->Runtime);
         if ((original & PLX9060_INT_ENABLE) != PLX9060_INT_ENABLE) {
            PLX9060_WRITE_INTERRUPT_CONTROL(PDevExt->Runtime,
                                            original|PLX9060_INT_ENABLE);
         }
         break;				
      }
   }

}


BOOLEAN
CyyRestoreDeviceState(
    IN PVOID Context      
    )
/*++

Routine Description:

    This routine restores the device state of the UART

Arguments:

    PDevExt - Pointer to the device PDevExt for the devobj to restore the
    state for.

Return Value:

    VOID


--*/
{
   PCYY_DEVICE_EXTENSION PDevExt = Context;
   PCYY_DEVICE_STATE pDevState = &PDevExt->DeviceState;
   PUCHAR chip = PDevExt->Cd1400;
   ULONG bus = PDevExt->IsPci;
   PCYY_DISPATCH pDispatch = PDevExt->OurIsrContext;

   CyyDbgPrintEx(CYYTRACECALLS, "Enter CyyRestoreDeviceState\n");
   CyyDbgPrintEx(CYYTRACECALLS, "PDevExt: %x\n", PDevExt);

   CD1400_WRITE(chip,bus,CAR,PDevExt->CdChannel & 0x03);
   CD1400_WRITE(chip,bus,SRER,0x00);
   CyyCDCmd(PDevExt,CCR_RESET_CHANNEL);

   CYY_CLEAR_INTERRUPT(PDevExt->BoardMemory,bus); 

   PDevExt->HoldingEmpty = TRUE;

   // Set Cd1400 address for the ISR
   pDispatch->Cd1400[PDevExt->PortIndex] = chip;

   CyyEnableInterruptInPLX(PDevExt);
   
   if (PDevExt->DeviceState.Reopen == TRUE) {
      CyyDbgPrintEx(CYYPNPPOWER, "Reopening device\n");

      PDevExt->DeviceIsOpened = TRUE;
      PDevExt->DeviceState.Reopen = FALSE;

      CD1400_WRITE(chip,bus,CAR,PDevExt->CdChannel & 0x03);
      CD1400_WRITE(chip,bus,COR1, pDevState->Cor1);
      CD1400_WRITE(chip,bus,COR2, pDevState->Cor2);
      CD1400_WRITE(chip,bus,COR3, pDevState->Cor3);
      CD1400_WRITE(chip,bus,SCHR1,pDevState->Schr1);
      CD1400_WRITE(chip,bus,SCHR2,pDevState->Schr2);
      CD1400_WRITE(chip,bus,MCOR1,pDevState->Mcor1);
      CD1400_WRITE(chip,bus,MCOR2,pDevState->Mcor2);
      CD1400_WRITE(chip,bus,RTPR, pDevState->Rtpr);
      CD1400_WRITE(chip,bus,MSVR1,pDevState->Msvr1);
      CD1400_WRITE(chip,bus,MSVR2,pDevState->Msvr2);
      CD1400_WRITE(chip,bus,RBPR, pDevState->Rbpr);
      CD1400_WRITE(chip,bus,TBPR, pDevState->Tbpr);
      CD1400_WRITE(chip,bus,RCOR, pDevState->Rcor);
      CD1400_WRITE(chip,bus,TCOR, pDevState->Tcor);
      CyyCDCmd(PDevExt,CCR_CORCHG_COR1_COR2_COR3);   
      CyyCDCmd(PDevExt,CCR_ENA_TX_RX);

      //
      // This enables interrupts on the device!
      //
      CD1400_WRITE(chip,bus,SRER, pDevState->Srer);
   }
   return FALSE;
}

VOID
CyyPowerRequestComplete(
    PDEVICE_OBJECT DeviceObject,
    UCHAR MinorFunction,
    POWER_STATE state,
    POWER_COMPLETION_CONTEXT* PowerContext,
    PIO_STATUS_BLOCK IoStatus
    )
/*++

Routine Description:

   Completion routine for D-IRP.

Arguments:


Return Value:

   NT status code

--*/
{
    PCYY_DEVICE_EXTENSION pDevExt = (PCYY_DEVICE_EXTENSION) PowerContext->DeviceObject->DeviceExtension;
    PIRP sIrp = PowerContext->SIrp;

    UNREFERENCED_PARAMETER (DeviceObject);
    UNREFERENCED_PARAMETER (MinorFunction);
    UNREFERENCED_PARAMETER (state);

    //
    // Cleanup
    //
    ExFreePool(PowerContext);

    //
    // Here we copy the D-IRP status into the S-IRP
    //
    sIrp->IoStatus.Status = IoStatus->Status;

    //
    // Release the IRP
    //
    PoStartNextPowerIrp(sIrp);
    CyyCompleteRequest(pDevExt,sIrp,IO_NO_INCREMENT);

}

NTSTATUS
CyySystemPowerComplete (
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp,
    IN PVOID Context
    )
/*++
--*/
{
    POWER_COMPLETION_CONTEXT* powerContext;
    POWER_STATE         powerState;
    POWER_STATE_TYPE    powerType;
    PIO_STACK_LOCATION  stack;
    PCYY_DEVICE_EXTENSION   data;
    NTSTATUS    status = Irp->IoStatus.Status;

    UNREFERENCED_PARAMETER (Context);

    data = DeviceObject->DeviceExtension;

    if (!NT_SUCCESS(status)) {

        PoStartNextPowerIrp(Irp);
        CyyIRPEpilogue(data);
        return STATUS_SUCCESS;
    }

    stack = IoGetCurrentIrpStackLocation (Irp);
    powerState = stack->Parameters.Power.State;
                        
    switch (stack->Parameters.Power.State.SystemState) {
    case PowerSystemUnspecified:
        powerState.DeviceState = PowerDeviceUnspecified;
        break;

    case PowerSystemWorking:
        powerState.DeviceState = PowerDeviceD0;
        break;

    case PowerSystemSleeping1:
    case PowerSystemSleeping2:
    case PowerSystemSleeping3:
    case PowerSystemHibernate:
    case PowerSystemShutdown:
    case PowerSystemMaximum:
        powerState.DeviceState = data->DeviceStateMap[stack->Parameters.Power.State.SystemState];
        break;

    default:
        powerState.DeviceState = PowerDeviceD3;
    }

    //
    // Send IRP to change device state
    //
    powerContext = (POWER_COMPLETION_CONTEXT*)
                ExAllocatePool(NonPagedPool, sizeof(POWER_COMPLETION_CONTEXT));

    if (!powerContext) {

        status = STATUS_INSUFFICIENT_RESOURCES;

    } else {

        powerContext->DeviceObject = DeviceObject;
        powerContext->SIrp = Irp;

        status = PoRequestPowerIrp(DeviceObject, IRP_MN_SET_POWER, powerState, CyyPowerRequestComplete, 
                                   powerContext, NULL);
    }

    if (!NT_SUCCESS(status)) {

        if (powerContext) {
            ExFreePool(powerContext);
        }

        PoStartNextPowerIrp(Irp);
        Irp->IoStatus.Status = status;
        CyyCompleteRequest(data,Irp,IO_NO_INCREMENT); // To be equal to toaster
        //CyyIRPEpilogue(data); 
        //return status;
    }

    return STATUS_MORE_PROCESSING_REQUIRED;
}

NTSTATUS
CyyDevicePowerComplete (
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp,
    IN PVOID Context
    )
/*++

Routine Description:

   The completion routine for Power Up D-IRP.

Arguments:

   DeviceObject - pointer to a device object.

   Irp - pointer to an I/O Request Packet.

   Context - context pointer

Return Value:

   NT status code

--*/
{
   POWER_STATE         powerState;
   POWER_STATE_TYPE    powerType;
   PIO_STACK_LOCATION  stack;
   PCYY_DEVICE_EXTENSION   pDevExt;

   UNREFERENCED_PARAMETER (Context);

   if (Irp->PendingReturned) {
       IoMarkIrpPending(Irp);
   }

   pDevExt = DeviceObject->DeviceExtension;
   stack = IoGetCurrentIrpStackLocation (Irp);
   powerType = stack->Parameters.Power.Type;
   powerState = stack->Parameters.Power.State;

   //
   // Restore the device
   //

   pDevExt->PowerState = PowerDeviceD0;

   //
   // Theoretically we could change states in the middle of processing
   // the restore which would result in a bad PKINTERRUPT being used
   // in CyyRestoreDeviceState().
   //

   if (pDevExt->PNPState == CYY_PNP_STARTED) {
      KeSynchronizeExecution(
                            pDevExt->Interrupt,
                            CyyRestoreDeviceState,
                            pDevExt
                            );
   }

   //
   // Now that we are powered up, call PoSetPowerState
   //

   PoSetPowerState(DeviceObject, powerType, powerState);
   PoStartNextPowerIrp(Irp);
   CyyCompleteRequest(pDevExt, Irp, IO_NO_INCREMENT); // Code back
   return STATUS_MORE_PROCESSING_REQUIRED;            // Code back

   //CyyIRPEpilogue(pDevExt); // Added and removed Fanny
   //return STATUS_SUCCESS;   // Added and removed Fanny

}


NTSTATUS
CyyPowerDispatch(IN PDEVICE_OBJECT PDevObj, IN PIRP PIrp)

/*++

Routine Description:

    This is a dispatch routine for the IRPs that come to the driver with the
    IRP_MJ_POWER major code (power IRPs).

Arguments:

    PDevObj - Pointer to the device object for this device

    PIrp - Pointer to the IRP for the current request

Return Value:

    The function value is the final status of the call


--*/

{

   PCYY_DEVICE_EXTENSION pDevExt = PDevObj->DeviceExtension;
   PIO_STACK_LOCATION pIrpStack = IoGetCurrentIrpStackLocation(PIrp);
   NTSTATUS status;
   PDEVICE_OBJECT pLowerDevObj = pDevExt->LowerDeviceObject;
   PDEVICE_OBJECT pPdo = pDevExt->Pdo;
   BOOLEAN acceptingIRPs;

   PAGED_CODE();

   if ((status = CyyIRPPrologue(PIrp, pDevExt)) != STATUS_SUCCESS) {
      if (status != STATUS_PENDING) {
        PoStartNextPowerIrp(PIrp);
        CyyCompleteRequest(pDevExt, PIrp, IO_NO_INCREMENT);
      }
      return status;
   }

   status = STATUS_SUCCESS;

   switch (pIrpStack->MinorFunction) {

   case IRP_MN_WAIT_WAKE:
      CyyDbgPrintEx(CYYPNPPOWER, "Got IRP_MN_WAIT_WAKE Irp\n");
      break;


   case IRP_MN_POWER_SEQUENCE:
      CyyDbgPrintEx(CYYPNPPOWER, "Got IRP_MN_POWER_SEQUENCE Irp\n");
      break;

   case IRP_MN_SET_POWER:
      CyyDbgPrintEx(CYYPNPPOWER, "Got IRP_MN_SET_POWER Irp\n");

      switch (pIrpStack->Parameters.Power.Type) {
      case SystemPowerState:

         CyyDbgPrintEx(CYYPNPPOWER, "SystemPowerState\n");
         
         IoMarkIrpPending(PIrp);
         IoCopyCurrentIrpStackLocationToNext (PIrp);
         IoSetCompletionRoutine (PIrp,
                                 CyySystemPowerComplete,
                                 NULL,
                                 TRUE,
                                 TRUE,
                                 TRUE);
         PoCallDriver(pDevExt->LowerDeviceObject, PIrp);
         return STATUS_PENDING;

      case DevicePowerState:
         
         CyyDbgPrintEx(CYYPNPPOWER, "DevicePowerState\n");
         
         status = PIrp->IoStatus.Status = STATUS_SUCCESS;

         if (pDevExt->PowerState == pIrpStack->Parameters.Power.State.DeviceState) {
            // If we are already in the requested state, just pass the IRP down
            CyyDbgPrintEx(CYYPNPPOWER, "Already in requested power state\n");
            break;
         }
         switch (pIrpStack->Parameters.Power.State.DeviceState) {
         case PowerDeviceD0:
            if (pDevExt->OpenCount) {

               CyyDbgPrintEx(CYYPNPPOWER, "Going to power state D0\n");

               IoMarkIrpPending(PIrp);
               IoCopyCurrentIrpStackLocationToNext (PIrp);
               IoSetCompletionRoutine (PIrp,
                                       CyyDevicePowerComplete,
                                       NULL,
                                       TRUE,
                                       TRUE,
                                       TRUE);
               PoCallDriver(pDevExt->LowerDeviceObject, PIrp);
               return STATUS_PENDING;
            }
            //return CyySetPowerD0(PDevObj, PIrp);
            break;
         case PowerDeviceD1:
         case PowerDeviceD2:
         case PowerDeviceD3:

            CyyDbgPrintEx(CYYPNPPOWER, "Going to power state D3\n");

            return CyySetPowerD3(PDevObj, PIrp);
         }
         break;
      default:
         CyyDbgPrintEx(CYYPNPPOWER, "UNKNOWN PowerState\n");
         break;
      }
      break;

   case IRP_MN_QUERY_POWER:

      CyyDbgPrintEx (CYYPNPPOWER, "Got IRP_MN_QUERY_POWER Irp\n");

      //
      // Check if we have a wait-wake pending and if so,
      // ensure we don't power down too far.
      //
      if (pDevExt->PendingWakeIrp != NULL || pDevExt->SendWaitWake) {
         if (pIrpStack->Parameters.Power.Type == DevicePowerState
             && pIrpStack->Parameters.Power.State.DeviceState
             > pDevExt->DeviceWake) {
            status = PIrp->IoStatus.Status = STATUS_INVALID_DEVICE_STATE;
            PoStartNextPowerIrp(PIrp);
            CyyCompleteRequest(pDevExt, PIrp, IO_NO_INCREMENT);
            return status;
         }
      }
      //
      // If no wait-wake, always successful
      //
      PIrp->IoStatus.Status = STATUS_SUCCESS;
      status = STATUS_SUCCESS;
      PoStartNextPowerIrp(PIrp);
      IoSkipCurrentIrpStackLocation(PIrp);
      return CyyPoCallDriver(pDevExt, pLowerDevObj, PIrp);

   }   // switch (pIrpStack->MinorFunction)


   PoStartNextPowerIrp(PIrp);
   //
   // Pass to the lower driver
   //
   IoSkipCurrentIrpStackLocation(PIrp);
   status = CyyPoCallDriver(pDevExt, pLowerDevObj, PIrp);

   return status;
}



NTSTATUS
CyyGotoPowerState(IN PDEVICE_OBJECT PDevObj,
                     IN PCYY_DEVICE_EXTENSION PDevExt,
                     IN DEVICE_POWER_STATE DevPowerState)
/*++

Routine Description:

    This routine causes the driver to request the stack go to a particular
    power state.

Arguments:

    PDevObj - Pointer to the device object for this device

    PDevExt - Pointer to the device extension we are working from

    DevPowerState - the power state we wish to go to

Return Value:

    The function value is the final status of the call


--*/
{
   KEVENT gotoPowEvent;
   NTSTATUS status;
   POWER_STATE powerState;

   PAGED_CODE();

   CyyDbgPrintEx(CYYTRACECALLS, "In CyyGotoPowerState\n");

   powerState.DeviceState = DevPowerState;

   KeInitializeEvent(&gotoPowEvent, SynchronizationEvent, FALSE);

   status = PoRequestPowerIrp(PDevObj, IRP_MN_SET_POWER, powerState,
                              CyySetPowerEvent, &gotoPowEvent,
                              NULL);

   if (status == STATUS_PENDING) {
      KeWaitForSingleObject(&gotoPowEvent, Executive, KernelMode, FALSE, NULL);
      status = STATUS_SUCCESS;
   }

#if DBG
   if (!NT_SUCCESS(status)) {
      CyyDbgPrintEx(CYYPNPPOWER, "CyyGotoPowerState FAILED\n");
   }
#endif

   CyyDbgPrintEx(CYYTRACECALLS, "Leaving CyyGotoPowerState\n");

   return status;
}


NTSTATUS
CyySetPowerD3(IN PDEVICE_OBJECT PDevObj, IN PIRP PIrp)
/*++

Routine Description:

    This routine handles the SET_POWER minor function.

Arguments:

    PDevObj - Pointer to the device object for this device

    PIrp - Pointer to the IRP for the current request

Return Value:

    The function value is the final status of the call


--*/
{
   NTSTATUS status = STATUS_SUCCESS;
   PCYY_DEVICE_EXTENSION pDevExt = PDevObj->DeviceExtension;
   PIO_STACK_LOCATION pIrpStack = IoGetCurrentIrpStackLocation(PIrp);

   PAGED_CODE();

   CyyDbgPrintEx(CYYDIAG3, "In CyySetPowerD3\n");

   //
   // Send the wait wake now, just in time
   //


   if (pDevExt->SendWaitWake) {
      CyySendWaitWake(pDevExt);
   }
   //
   // Before we power down, call PoSetPowerState
   //

   PoSetPowerState(PDevObj, pIrpStack->Parameters.Power.Type,
                   pIrpStack->Parameters.Power.State);

   //
   // If the device is not closed, disable interrupts and allow the fifo's
   // to flush.
   //

   if (pDevExt->DeviceIsOpened == TRUE) {
      LARGE_INTEGER charTime;

      pDevExt->DeviceIsOpened = FALSE;
      pDevExt->DeviceState.Reopen = TRUE;

      //
      // Save the device state
      //
      KeSynchronizeExecution(
                            pDevExt->Interrupt,
                            CyySaveDeviceState,
                            pDevExt
                            );

   } 

   //
   // If the device is not open, we don't need to save the state;
   // we can just reset the device on power-up
   //

   pDevExt->PowerState = PowerDeviceD3;

   //
   // For what we are doing, we don't need a completion routine
   // since we don't race on the power requests.
   //

   PIrp->IoStatus.Status = STATUS_SUCCESS;

   PoStartNextPowerIrp(PIrp);
   IoSkipCurrentIrpStackLocation(PIrp);

   return CyyPoCallDriver(pDevExt, pDevExt->LowerDeviceObject, PIrp);
}


NTSTATUS
CyySendWaitWake(PCYY_DEVICE_EXTENSION PDevExt)
/*++

Routine Description:

    This routine causes a waitwake IRP to be sent

Arguments:

    PDevExt - Pointer to the device extension for this device

Return Value:

    STATUS_INVALID_DEVICE_STATE if one is already pending, else result
    of call to PoRequestPowerIrp.


--*/
{
   NTSTATUS status;
   PIRP pIrp;
   POWER_STATE powerState;

   PAGED_CODE();

   //
   // Make sure one isn't pending already -- serial will only handle one at
   // a time.
   //

   if (PDevExt->PendingWakeIrp != NULL) {
      return STATUS_INVALID_DEVICE_STATE;
   }

   //
   // Make sure we are capable of waking the machine
   //

   if (PDevExt->SystemWake <= PowerSystemWorking) {
      return STATUS_INVALID_DEVICE_STATE;
   }

   if (PDevExt->DeviceWake == PowerDeviceUnspecified) {
      return STATUS_INVALID_DEVICE_STATE;
   }

   //
   // Send IRP to request wait wake and add a pending irp flag
   //
   //

   InterlockedIncrement(&PDevExt->PendingIRPCnt);

   powerState.SystemState = PDevExt->SystemWake;

   status = PoRequestPowerIrp(PDevExt->Pdo, IRP_MN_WAIT_WAKE,
                              powerState, CyyWakeCompletion, PDevExt, &pIrp);

   if (status == STATUS_PENDING) {
      status = STATUS_SUCCESS;
      PDevExt->PendingWakeIrp = pIrp;
   } else if (!NT_SUCCESS(status)) {
      CyyIRPEpilogue(PDevExt);
   }

   return status;
}

NTSTATUS
CyyWakeCompletion(IN PDEVICE_OBJECT PDevObj, IN UCHAR MinorFunction,
                  IN POWER_STATE PowerState, IN PVOID Context,
                  IN PIO_STATUS_BLOCK IoStatus)
/*++

Routine Description:

    This routine handles completion of the waitwake IRP.

Arguments:

    PDevObj - Pointer to the device object for this device

    MinorFunction - Minor function previously supplied to PoRequestPowerIrp

    PowerState - PowerState previously supplied to PoRequestPowerIrp

    Context - a pointer to the device extension

    IoStatus - current/final status of the waitwake IRP

Return Value:

    The function value is the final status of attempting to process the
    waitwake.


--*/
{
   NTSTATUS status;
   PCYY_DEVICE_EXTENSION pDevExt = (PCYY_DEVICE_EXTENSION)Context;
   POWER_STATE powerState;

   status = IoStatus->Status;

   if (NT_SUCCESS(status)) {
      //
      // A wakeup has occurred -- powerup our stack
      //

      powerState.DeviceState = PowerDeviceD0;

      PoRequestPowerIrp(pDevExt->Pdo, IRP_MN_SET_POWER, powerState, NULL,
                        NULL, NULL);

   }

   pDevExt->PendingWakeIrp = NULL;
   CyyIRPEpilogue(pDevExt);

   return status;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\y\cyyport\cyyqset.c ===
/*--------------------------------------------------------------------------
*	
*   Copyright (C) Cyclades Corporation, 1996-2001.
*   All rights reserved.
*	
*   Cyclom-Y Port Driver
*	
*   This file:      cyyqset.c
*	
*   Description:    This module contains the code related to query/set
*                   file operations in the Cyclom-Y Port driver.
*
*   Notes:          This code supports Windows 2000 and Windows XP,
*                   x86 and IA64 processors.
*	
*   Complies with Cyclades SW Coding Standard rev 1.3.
*	
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*   Change History
*
*--------------------------------------------------------------------------
*
*
*--------------------------------------------------------------------------
*/


#include "precomp.h"


#ifdef ALLOC_PRAGMA
#pragma alloc_text(PAGESRP0,CyyQueryInformationFile)
#pragma alloc_text(PAGESRP0,CyySetInformationFile)
#endif


NTSTATUS
CyyQueryInformationFile(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    )
/*--------------------------------------------------------------------------
    CyyQueryInformationFile()
    
    Routine Description: This routine is used to query the end of file
    information on the opened serial port. Any other file information
    request is retured with an invalid parameter.
    This routine always returns an end of file of 0.

    Arguments:

    DeviceObject - Pointer to the device object for this device
    Irp - Pointer to the IRP for the current request

    Return Value: The function value is the final status of the call
--------------------------------------------------------------------------*/
{
    NTSTATUS Status;
    PIO_STACK_LOCATION IrpSp;	// current stack location
    
    NTSTATUS status;

    UNREFERENCED_PARAMETER(DeviceObject);

    PAGED_CODE();

    if ((status = CyyIRPPrologue(Irp,
                                 (PCYY_DEVICE_EXTENSION)DeviceObject->
                                 DeviceExtension)) != STATUS_SUCCESS) {
      if (status != STATUS_PENDING) {
         CyyCompleteRequest((PCYY_DEVICE_EXTENSION)DeviceObject->
                            DeviceExtension, Irp, IO_NO_INCREMENT);
      }
      return status;
    }

    CyyDbgPrintEx(CYYIRPPATH, "Dispatch entry for: %x\n", Irp);

    if (CyyCompleteIfError(DeviceObject, Irp) != STATUS_SUCCESS) {

        return STATUS_CANCELLED;
    }
    
    IrpSp = IoGetCurrentIrpStackLocation(Irp);
    Irp->IoStatus.Information = 0L;
    Status = STATUS_SUCCESS;
    if (IrpSp->Parameters.QueryFile.FileInformationClass ==
        FileStandardInformation) {

        PFILE_STANDARD_INFORMATION Buf = Irp->AssociatedIrp.SystemBuffer;

        Buf->AllocationSize.QuadPart = 0;
        Buf->EndOfFile = Buf->AllocationSize;
        Buf->NumberOfLinks = 0;
        Buf->DeletePending = FALSE;
        Buf->Directory = FALSE;
        Irp->IoStatus.Information = sizeof(FILE_STANDARD_INFORMATION);

    } else if (IrpSp->Parameters.QueryFile.FileInformationClass ==
               FilePositionInformation) {

        ((PFILE_POSITION_INFORMATION)Irp->AssociatedIrp.SystemBuffer)->
            CurrentByteOffset.QuadPart = 0;
        Irp->IoStatus.Information = sizeof(FILE_POSITION_INFORMATION);

    } else {
        Status = STATUS_INVALID_PARAMETER;
        Irp->IoStatus.Status = STATUS_INVALID_PARAMETER;
    }

    CyyCompleteRequest((PCYY_DEVICE_EXTENSION)DeviceObject->
                          DeviceExtension, Irp, 0);
    return Status;
}

NTSTATUS
CyySetInformationFile(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    )
/*--------------------------------------------------------------------------
    CyySetInformationFile()
    
    Routine Description: This routine is used to set the end of file
    information on the opened serial port. Any other file information
    request is retured with an invalid parameter.

    This routine always ignores the actual end of file since
    the query information code always returns an end of file of 0.

    Arguments:

    DeviceObject - Pointer to the device object for this device
    Irp - Pointer to the IRP for the current request

    Return Value: The function value is the final status of the call
--------------------------------------------------------------------------*/
{
    NTSTATUS Status;
    
    UNREFERENCED_PARAMETER(DeviceObject);

    PAGED_CODE();

    if ((Status = CyyIRPPrologue(Irp,
                                 (PCYY_DEVICE_EXTENSION)DeviceObject->
                                 DeviceExtension)) != STATUS_SUCCESS) {
      if(Status != STATUS_PENDING) {
         CyyCompleteRequest((PCYY_DEVICE_EXTENSION)DeviceObject->
                            DeviceExtension, Irp, IO_NO_INCREMENT);
      }
      return Status;
   }

    CyyDbgPrintEx(CYYIRPPATH, "Dispatch entry for: %x\n", Irp);

    if (CyyCompleteIfError(DeviceObject, Irp) != STATUS_SUCCESS) {

        return STATUS_CANCELLED;
    }
    
    Irp->IoStatus.Information = 0L;
    if ((IoGetCurrentIrpStackLocation(Irp)->
            Parameters.SetFile.FileInformationClass ==
         FileEndOfFileInformation) ||
        (IoGetCurrentIrpStackLocation(Irp)->
            Parameters.SetFile.FileInformationClass ==
         FileAllocationInformation)) {

        Status = STATUS_SUCCESS;
    } else {
        Status = STATUS_INVALID_PARAMETER;
    }

    Irp->IoStatus.Status = Status;

    CyyCompleteRequest((PCYY_DEVICE_EXTENSION)DeviceObject->
                        DeviceExtension, Irp, 0);

    return Status;
}


=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\y\cyyport\cyyportp.h ===
/*--------------------------------------------------------------------------
*	
*   Copyright (C) Cyclades Corporation, 1996-2001.
*   All rights reserved.
*	
*   Cyclom-Y Port Driver
*	
*   This file:      cyyportp.h
*	
*   Description:    Prototypes and macros that are used throughout 
*                   the driver.
*
*   Notes:          This code supports Windows 2000 and x86 processor.
*	
*   Complies with Cyclades SW Coding Standard rev 1.3.
*	
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*   Change History
*
*--------------------------------------------------------------------------
*
*
*--------------------------------------------------------------------------
*/

typedef
NTSTATUS
(*PSERIAL_START_ROUTINE) (
    IN PCYY_DEVICE_EXTENSION
    );

typedef
VOID
(*PSERIAL_GET_NEXT_ROUTINE) (
    IN PIRP *CurrentOpIrp,
    IN PLIST_ENTRY QueueToProcess,
    OUT PIRP *NewIrp,
    IN BOOLEAN CompleteCurrent,
    PCYY_DEVICE_EXTENSION Extension
    );

// cyyinit.c prototypes
NTSTATUS
DriverEntry(
    IN PDRIVER_OBJECT DriverObject,
    IN PUNICODE_STRING RegistryPath
    );

VOID
CyyDisableInterfacesResources(IN PDEVICE_OBJECT PDevObj,
                                 BOOLEAN DisableUART);

VOID
CyyKillPendingIrps(PDEVICE_OBJECT DeviceObject);

CYY_MEM_COMPARES
CyyMemCompare(
                IN PHYSICAL_ADDRESS A,
                IN ULONG SpanOfA,
                IN PHYSICAL_ADDRESS B,
                IN ULONG SpanOfB
                );

VOID
CyyReleaseResources(IN PCYY_DEVICE_EXTENSION PDevExt);

NTSTATUS
CyyRemoveDevObj(IN PDEVICE_OBJECT PDevObj);

BOOLEAN
CyyDoesPortExist(
                  IN PCYY_DEVICE_EXTENSION Extension,
                  IN PUNICODE_STRING InsertString
                );

BOOLEAN
CyyReset(
    IN PVOID Context
    );

VOID
CyyUnload(
    IN PDRIVER_OBJECT DriverObject
    );

NTSTATUS
CyyInitController(IN PDEVICE_OBJECT PDevObj, IN PCONFIG_DATA PConfigData);
 
VOID
CyyResetBoard( PCYY_DEVICE_EXTENSION Extension );

NTSTATUS
CyyFindInitController(IN PDEVICE_OBJECT PDevObj, IN PCONFIG_DATA PConfig);

PUCHAR
GetMyMappedCD1400Address(IN PUCHAR BoardMemory, IN ULONG PortIndex, IN ULONG IsPci);

PHYSICAL_ADDRESS
GetMyPhysicalCD1400Address(IN PHYSICAL_ADDRESS BoardMemory, IN ULONG PortIndex, IN ULONG IsPci);

VOID
CyyCommError(
    IN PKDPC Dpc,
    IN PVOID DeferredContext,
    IN PVOID SystemContext1,
    IN PVOID SystemContext2
    );

// end cyyinit.c

NTSTATUS
CyyRead(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    );

NTSTATUS
CyyStartRead(
    IN PCYY_DEVICE_EXTENSION Extension
    );

VOID
CyyCompleteRead(
    IN PKDPC Dpc,
    IN PVOID DeferredContext,
    IN PVOID SystemContext1,
    IN PVOID SystemContext2
    );

VOID
CyyReadTimeout(
    IN PKDPC Dpc,
    IN PVOID DeferredContext,
    IN PVOID SystemContext1,
    IN PVOID SystemContext2
    );

VOID
CyyIntervalReadTimeout(
    IN PKDPC Dpc,
    IN PVOID DeferredContext,
    IN PVOID SystemContext1,
    IN PVOID SystemContext2
    );

NTSTATUS
CyyFlush(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    );

NTSTATUS
CyyWrite(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    );

NTSTATUS
CyyStartWrite(
    IN PCYY_DEVICE_EXTENSION Extension
    );

VOID
CyyGetNextWrite(
    IN PIRP *CurrentOpIrp,
    IN PLIST_ENTRY QueueToProcess,
    IN PIRP *NewIrp,
    IN BOOLEAN CompleteCurrent,
    IN PCYY_DEVICE_EXTENSION Extension
    );

VOID
CyyCompleteWrite(
    IN PKDPC Dpc,
    IN PVOID DeferredContext,
    IN PVOID SystemContext1,
    IN PVOID SystemContext2
    );
    
BOOLEAN
CyyTxStart(
    IN PVOID Context
    );

BOOLEAN
CyySendXon(
    IN PVOID Context
    );
    
BOOLEAN
CyySendXoff(
    IN PVOID Context
    );
    
BOOLEAN
CyyProcessEmptyTransmit(
    IN PVOID Context
    );

VOID
CyyWriteTimeout(
    IN PKDPC Dpc,
    IN PVOID DeferredContext,
    IN PVOID SystemContext1,
    IN PVOID SystemContext2
    );

NTSTATUS
CyyCleanup(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    );

NTSTATUS
CyyCreateOpen(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    );

NTSTATUS
CyyClose(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    );

VOID
CyyDisableCd1400Channel(IN PVOID Context);

BOOLEAN
CyySetDTR(
    IN PVOID Context
    );

BOOLEAN
CyyClrDTR(
    IN PVOID Context
    );

BOOLEAN
CyySetRTS(
    IN PVOID Context
    );

BOOLEAN
CyyClrRTS(
    IN PVOID Context
    );

BOOLEAN
CyyGetDTRRTS(
    IN PVOID Context
    );

BOOLEAN
CyySetChars(
    IN PVOID Context
    );

BOOLEAN
CyySetBaud(
    IN PVOID Context
    );
    
BOOLEAN
CyySetLineControl(
    IN PVOID Context
    );

BOOLEAN
CyySetupNewHandFlow(
    IN PCYY_DEVICE_EXTENSION Extension,
    IN PSERIAL_HANDFLOW NewHandFlow
    );

BOOLEAN
CyySetHandFlow(
    IN PVOID Context
    );

BOOLEAN
CyyTurnOnBreak(
    IN PVOID Context
    );

BOOLEAN
CyyTurnOffBreak(
    IN PVOID Context
    );

BOOLEAN
CyyPretendXoff(
    IN PVOID Context
    );

BOOLEAN
CyyPretendXon(
    IN PVOID Context
    );

VOID
CyyHandleReducedIntBuffer(
    IN PCYY_DEVICE_EXTENSION Extension
    );

VOID
CyyProdXonXoff(
    IN PCYY_DEVICE_EXTENSION Extension,
    IN BOOLEAN SendXon
    );

NTSTATUS
CyyIoControl(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    );

NTSTATUS
CyyStartMask(
    IN PCYY_DEVICE_EXTENSION Extension
    );

VOID
CyyCancelWait(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    );

VOID
CyyCompleteWait(
    IN PKDPC Dpc,
    IN PVOID DeferredContext,
    IN PVOID SystemContext1,
    IN PVOID SystemContext2
    );

VOID
CyyStartImmediate(
    IN PCYY_DEVICE_EXTENSION Extension
    );

VOID
CyyCompleteImmediate(
    IN PKDPC Dpc,
    IN PVOID DeferredContext,
    IN PVOID SystemContext1,
    IN PVOID SystemContext2
    );

VOID
CyyTimeoutImmediate(
    IN PKDPC Dpc,
    IN PVOID DeferredContext,
    IN PVOID SystemContext1,
    IN PVOID SystemContext2
    );

VOID
CyyTimeoutXoff(
    IN PKDPC Dpc,
    IN PVOID DeferredContext,
    IN PVOID SystemContext1,
    IN PVOID SystemContext2
    );

VOID
CyyCompleteXoff(
    IN PKDPC Dpc,
    IN PVOID DeferredContext,
    IN PVOID SystemContext1,
    IN PVOID SystemContext2
    );

NTSTATUS
CyyStartPurge(
    IN PCYY_DEVICE_EXTENSION Extension
    );

BOOLEAN
CyyPurgeInterruptBuff(
    IN PVOID Context
    );

NTSTATUS
CyyQueryInformationFile(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    );

NTSTATUS
CyySetInformationFile(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    );

VOID
CyyKillAllReadsOrWrites(
    IN PDEVICE_OBJECT DeviceObject,
    IN PLIST_ENTRY QueueToClean,
    IN PIRP *CurrentOpIrp
    );

VOID
CyyGetNextIrp(
    IN PIRP *CurrentOpIrp,
    IN PLIST_ENTRY QueueToProcess,
    OUT PIRP *NextIrp,
    IN BOOLEAN CompleteCurrent,
    IN PCYY_DEVICE_EXTENSION Extension
    );

VOID
CyyTryToCompleteCurrent(
    IN PCYY_DEVICE_EXTENSION Extension,
    IN PKSYNCHRONIZE_ROUTINE SynchRoutine OPTIONAL,
    IN KIRQL IrqlForRelease,
    IN NTSTATUS StatusToUse,
    IN PIRP *CurrentOpIrp,
    IN PLIST_ENTRY QueueToProcess,
    IN PKTIMER IntervalTimer,
    IN PKTIMER TotalTimer,
    IN PSERIAL_START_ROUTINE Starter,
    IN PSERIAL_GET_NEXT_ROUTINE GetNextIrp,
    IN LONG RefType
    );

NTSTATUS
CyyStartOrQueue(
    IN PCYY_DEVICE_EXTENSION Extension,
    IN PIRP Irp,
    IN PLIST_ENTRY QueueToExamine,
    IN PIRP *CurrentOpIrp,
    IN PSERIAL_START_ROUTINE Starter
    );

VOID
CyyCancelQueued(
    PDEVICE_OBJECT DeviceObject,
    PIRP Irp
    );

NTSTATUS
CyyCompleteIfError(
    PDEVICE_OBJECT DeviceObject,
    PIRP Irp
    );

ULONG
CyyHandleModemUpdate(
    IN PCYY_DEVICE_EXTENSION Extension,
    IN BOOLEAN DoingTX
    );
    
ULONG
CyyHandleModemUpdateForModem(
    IN PCYY_DEVICE_EXTENSION Extension,
    IN BOOLEAN DoingTX,
	IN UCHAR misr
    );
    
BOOLEAN
CyyIsr(
    IN PKINTERRUPT InterruptObject,
    IN PVOID Context
    );

BOOLEAN
CyyDispatchISR(
    IN PKINTERRUPT InterruptObject,
    IN PVOID Context
    );


BOOLEAN
CyyPerhapsLowerRTS(
    IN PVOID Context
    );

VOID
CyyStartTimerLowerRTS(
    IN PKDPC Dpc,
    IN PVOID DeferredContext,
    IN PVOID SystemContext1,
    IN PVOID SystemContext2
    );

VOID
CyyInvokePerhapsLowerRTS(
    IN PKDPC Dpc,
    IN PVOID DeferredContext,
    IN PVOID SystemContext1,
    IN PVOID SystemContext2
    );

VOID
CyyCleanupDevice(
    IN PCYY_DEVICE_EXTENSION Extension
    );

BOOLEAN
CyyProcessLSR(
    IN PCYY_DEVICE_EXTENSION Extension,
	IN UCHAR Rdsr,
	IN UCHAR RxChar
    );

LARGE_INTEGER
CyyGetCharTime(
    IN PCYY_DEVICE_EXTENSION Extension
    );

BOOLEAN
CyySharerIsr(
    IN PKINTERRUPT InterruptObject,
    IN PVOID Context
    );

BOOLEAN
CyyMarkClose(
    IN PVOID Context
    );

BOOLEAN
CyyIndexedMultiportIsr(
    IN PKINTERRUPT InterruptObject,
    IN PVOID Context
    );

BOOLEAN
CyyBitMappedMultiportIsr(
    IN PKINTERRUPT InterruptObject,
    IN PVOID Context
    );

VOID
CyyPutChar(
    IN PCYY_DEVICE_EXTENSION Extension,
    IN UCHAR CharToPut
    );
	
BOOLEAN
CyyGetStats(
    IN PVOID Context
    );

BOOLEAN
CyyClearStats(
    IN PVOID Context
    );    
	
VOID
CyyLog(
    IN PDRIVER_OBJECT DriverObject,
    NTSTATUS msgId
);

VOID
CyyLogData(
    IN PDRIVER_OBJECT DriverObject,
    NTSTATUS msgId,
	ULONG dump1,
	ULONG dump2
);

VOID
CyyILog(
    IN PDRIVER_OBJECT DriverObject,
    NTSTATUS msgId
);

VOID
CyyILogParam(
    IN PDRIVER_OBJECT DriverObject,
    NTSTATUS msgId,
	ULONG dumpParameter,
	ULONG base
);

VOID
CyyCDCmd(
	PCYY_DEVICE_EXTENSION Extension,
	UCHAR cmd
);


// cyreg.c

NTSTATUS
CyyGetConfigDefaults(
    IN PCYY_REGISTRY_DATA DriverDefaultsPtr,
    IN PUNICODE_STRING RegistryPath
    );

NTSTATUS 
CyyGetRegistryKeyValue (
                       IN HANDLE Handle,
                       IN PWCHAR KeyNameString,
                       IN ULONG KeyNameStringLength,
                       IN PVOID Data,
                       IN ULONG DataLength
                       );
ULONG 
CyyGetRegistryKeyValueLength (
                       IN HANDLE Handle,
                       IN PWCHAR KeyNameString,
                       IN ULONG KeyNameStringLength);

NTSTATUS 
CyyPutRegistryKeyValue(IN HANDLE Handle, IN PWCHAR PKeyNameString,
                       IN ULONG KeyNameStringLength, IN ULONG Dtype,
                       IN PVOID PData, IN ULONG DataLength);

// cyypnp.c

NTSTATUS
CyyAddDevice(
    IN PDRIVER_OBJECT DriverObject, IN PDEVICE_OBJECT PLowerDevObj);

//NTSTATUS
//CyyCreateDevObj(IN PDRIVER_OBJECT DriverObject,
//                OUT PDEVICE_OBJECT *NewDeviceObject);
NTSTATUS
CyyCreateDevObj(IN PDRIVER_OBJECT DriverObject,
                IN PDEVICE_OBJECT PPdo,
                OUT PDEVICE_OBJECT *NewDeviceObject);

NTSTATUS
CyyFinishStartDevice(IN PDEVICE_OBJECT PDevObj,
                     IN PCM_RESOURCE_LIST PResList,
                     IN PCM_RESOURCE_LIST PTrResList);

NTSTATUS
CyyGetPortInfo(IN PDEVICE_OBJECT PDevObj, IN PCM_RESOURCE_LIST PResList,
               IN PCM_RESOURCE_LIST PTrResList, OUT PCONFIG_DATA PConfig);

NTSTATUS
CyyStartDevice(IN PDEVICE_OBJECT PDevObj, IN PIRP PIrp);

NTSTATUS
CyySyncCompletion(IN PDEVICE_OBJECT DeviceObject, IN PIRP Irp,
                  IN PKEVENT CyySyncEvent);

NTSTATUS
CyyPnpDispatch(IN PDEVICE_OBJECT PDevObj, IN PIRP PIrp);

NTSTATUS
CyyDoExternalNaming(IN PCYY_DEVICE_EXTENSION PDevExt,
                    IN PDRIVER_OBJECT PDrvObj);

VOID
CyyUndoExternalNaming(IN PCYY_DEVICE_EXTENSION Extension);

UINT32
CyyReportMaxBaudRate(ULONG Bauds);

// cyyioctl.c

VOID
CyyGetProperties(
    IN PCYY_DEVICE_EXTENSION Extension,
    IN PSERIAL_COMMPROP Properties
    );

NTSTATUS
CyyInternalIoControl(IN PDEVICE_OBJECT DeviceObject, IN PIRP Irp);

BOOLEAN
CyySetMCRContents(IN PVOID Context);

BOOLEAN
CyyGetMCRContents(IN PVOID Context);

BOOLEAN
CyySetFCRContents(IN PVOID Context);

// cypower.c

NTSTATUS
CyyPowerDispatch(IN PDEVICE_OBJECT PDevObj, IN PIRP PIrp);

NTSTATUS
CyyGotoPowerState(IN PDEVICE_OBJECT PDevObj,
                  IN PCYY_DEVICE_EXTENSION PDevExt,
                  IN DEVICE_POWER_STATE DevPowerState);
NTSTATUS
CyySendWaitWake(PCYY_DEVICE_EXTENSION PDevExt);

//VOID
//CyyRestoreDeviceState(IN PCYY_DEVICE_EXTENSION PDevExt);
BOOLEAN
CyyRestoreDeviceState(
    IN PVOID Context      
    );

NTSTATUS
CyySetPowerD0(IN PDEVICE_OBJECT PDevObj, IN PIRP PIrp);

NTSTATUS
CyySetPowerD3(IN PDEVICE_OBJECT PDevObj, IN PIRP PIrp);

//VOID
//CyySaveDeviceState(IN PCYY_DEVICE_EXTENSION PDevExt);
BOOLEAN
CyySaveDeviceState(
    IN PVOID Context
    );

NTSTATUS
CyyWakeCompletion(IN PDEVICE_OBJECT PDevObj, IN UCHAR MinorFunction,
                  IN POWER_STATE PowerState, IN PVOID Context,
                  IN PIO_STATUS_BLOCK IoStatus);


// cywmi.c

NTSTATUS
CyyQueryWmiDataBlock(IN PDEVICE_OBJECT PDevObj, IN PIRP PIrp,
                     IN ULONG GuidIndex, 
                     IN ULONG InstanceIndex,
                     IN ULONG InstanceCount,
                     IN OUT PULONG InstanceLengthArray,
                     IN ULONG OutBufferSize,
                     OUT PUCHAR PBuffer);

NTSTATUS
CyyQueryWmiRegInfo(IN PDEVICE_OBJECT PDevObj, OUT PULONG PRegFlags,
                   OUT PUNICODE_STRING PInstanceName,
                   OUT PUNICODE_STRING *PRegistryPath,
                   OUT PUNICODE_STRING MofResourceName,
                   OUT PDEVICE_OBJECT *Pdo);

NTSTATUS
CyySetWmiDataBlock(IN PDEVICE_OBJECT PDevObj, IN PIRP PIrp,
                   IN ULONG GuidIndex, IN ULONG InstanceIndex,
                   IN ULONG BufferSize,
                   IN PUCHAR PBuffer);
NTSTATUS
CyySetWmiDataItem(IN PDEVICE_OBJECT PDevObj, IN PIRP PIrp,
                  IN ULONG GuidIndex, IN ULONG InstanceIndex,
                  IN ULONG DataItemId,
                  IN ULONG BufferSize, IN PUCHAR PBuffer);

NTSTATUS
CyySystemControlDispatch(IN PDEVICE_OBJECT DeviceObject, IN PIRP Irp);

NTSTATUS
CyyTossWMIRequest(IN PDEVICE_OBJECT PDevObj, IN PIRP PIrp,
                  IN ULONG GuidIndex);

// cyyutils.c

BOOLEAN
CyyCancelTimer(IN PKTIMER Timer, IN PCYY_DEVICE_EXTENSION PDevExt);

VOID
CyyDpcEpilogue(IN PCYY_DEVICE_EXTENSION PDevExt, PKDPC PDpc);

VOID
CyyGetNextIrpLocked(
    IN PIRP *CurrentOpIrp,
    IN PLIST_ENTRY QueueToProcess,
    OUT PIRP *NextIrp,
    IN BOOLEAN CompleteCurrent,
    IN PCYY_DEVICE_EXTENSION extension,
    IN KIRQL OldIrql
    );

BOOLEAN
CyyInsertQueueDpc(IN PRKDPC PDpc, IN PVOID Sarg1, IN PVOID Sarg2,
                  IN PCYY_DEVICE_EXTENSION PDevExt);

NTSTATUS
CyyIRPPrologue(IN PIRP PIrp, IN PCYY_DEVICE_EXTENSION PDevExt);

VOID
CyyIRPEpilogue(IN PCYY_DEVICE_EXTENSION PDevExt);

NTSTATUS
CyyIoCallDriver(PCYY_DEVICE_EXTENSION PDevExt, PDEVICE_OBJECT PDevObj,
                PIRP PIrp);
VOID
CyyKillAllStalled(IN PDEVICE_OBJECT PDevObj);

VOID
CyyLogError(
              IN PDRIVER_OBJECT DriverObject,
              IN PDEVICE_OBJECT DeviceObject OPTIONAL,
              IN PHYSICAL_ADDRESS P1,
              IN PHYSICAL_ADDRESS P2,
              IN ULONG SequenceNumber,
              IN UCHAR MajorFunctionCode,
              IN UCHAR RetryCount,
              IN ULONG UniqueErrorValue,
              IN NTSTATUS FinalStatus,
              IN NTSTATUS SpecificIOStatus,
              IN ULONG LengthOfInsert1,
              IN PWCHAR Insert1,
              IN ULONG LengthOfInsert2,
              IN PWCHAR Insert2
              );

VOID
CyyMarkHardwareBroken(IN PCYY_DEVICE_EXTENSION PDevExt);

NTSTATUS
CyyPoCallDriver(PCYY_DEVICE_EXTENSION PDevExt, PDEVICE_OBJECT PDevObj,
                PIRP PIrp);

VOID
CyySetDeviceFlags(IN PCYY_DEVICE_EXTENSION PDevExt, OUT PULONG PFlags, 
                  IN ULONG Value, IN BOOLEAN Set);

BOOLEAN
CyySetTimer(IN PKTIMER Timer, IN LARGE_INTEGER DueTime,
            IN PKDPC Dpc OPTIONAL, IN PCYY_DEVICE_EXTENSION PDevExt);

VOID
CyyUnlockPages(IN PKDPC PDpc, IN PVOID PDeferredContext,
               IN PVOID PSysContext1, IN PVOID PSysContext2);

VOID
CyyUnstallIrps(IN PCYY_DEVICE_EXTENSION PDevExt);



// End of prototypes


typedef struct _SERIAL_UPDATE_CHAR {
    PCYY_DEVICE_EXTENSION Extension;
    ULONG CharsCopied;
    BOOLEAN Completed;
    } SERIAL_UPDATE_CHAR,*PSERIAL_UPDATE_CHAR;

//
// The following simple structure is used to send a pointer
// the device extension and an ioctl specific pointer
// to data.
//
typedef struct _CYY_IOCTL_SYNC {
    PCYY_DEVICE_EXTENSION Extension;
    PVOID Data;
    } CYY_IOCTL_SYNC,*PCYY_IOCTL_SYNC;

typedef struct _CYY_IOCTL_BAUD {
    PCYY_DEVICE_EXTENSION Extension;
    ULONG Baud;
    } CYY_IOCTL_BAUD,*PCYY_IOCTL_BAUD;

#define CyySetFlags(PDevExt, Value) \
   CyySetDeviceFlags((PDevExt), &(PDevExt)->Flags, (Value), TRUE)
#define CyyClearFlags(PDevExt, Value) \
   CyySetDeviceFlags((PDevExt), &(PDevExt)->Flags, (Value), FALSE)
#define CyySetAccept(PDevExt, Value) \
   CyySetDeviceFlags((PDevExt), &(PDevExt)->DevicePNPAccept, (Value), TRUE)
#define CyyClearAccept(PDevExt, Value) \
   CyySetDeviceFlags((PDevExt), &(PDevExt)->DevicePNPAccept, (Value), FALSE)




//
// The following three macros are used to initialize, set
// and clear references in IRPs that are used by
// this driver.  The reference is stored in the fourth
// argument of the irp, which is never used by any operation
// accepted by this driver.
//

#define SERIAL_REF_ISR         (0x00000001)
#define SERIAL_REF_CANCEL      (0x00000002)
#define SERIAL_REF_TOTAL_TIMER (0x00000004)
#define SERIAL_REF_INT_TIMER   (0x00000008)
#define SERIAL_REF_XOFF_REF    (0x00000010)


#define SERIAL_INIT_REFERENCE(Irp) { \
    ASSERT(sizeof(ULONG_PTR) <= sizeof(PVOID)); \
    IoGetCurrentIrpStackLocation((Irp))->Parameters.Others.Argument4 = NULL; \
    }

#define SERIAL_SET_REFERENCE(Irp,RefType) \
   do { \
       LONG _refType = (RefType); \
       PULONG_PTR _arg4 = (PVOID)&IoGetCurrentIrpStackLocation((Irp))->Parameters.Others.Argument4; \
       ASSERT(!(*_arg4 & _refType)); \
       *_arg4 |= _refType; \
   } while (0)

#define SERIAL_CLEAR_REFERENCE(Irp,RefType) \
   do { \
       LONG _refType = (RefType); \
       PULONG_PTR _arg4 = (PVOID)&IoGetCurrentIrpStackLocation((Irp))->Parameters.Others.Argument4; \
       ASSERT(*_arg4 & _refType); \
       *_arg4 &= ~_refType; \
   } while (0)

#define SERIAL_REFERENCE_COUNT(Irp) \
    ((ULONG_PTR)((IoGetCurrentIrpStackLocation((Irp))->Parameters.Others.Argument4)))
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\y\cyyport\cyyreg.c ===
/*--------------------------------------------------------------------------
*	
*   Copyright (C) Cyclades Corporation, 1999-2001.
*   All rights reserved.
*	
*   Cyclom-Y Port Driver
*	
*   This file:      cyyreg.c
*	
*   Description:    This module contains the code that is used to get 
*                   values from the registry and to manipulate entries 
*                   in the registry.
*
*   Notes:          This code supports Windows 2000 and Windows XP,
*                   x86 and IA64 processors.
*	
*   Complies with Cyclades SW Coding Standard rev 1.3.
*	
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*   Change History
*
*--------------------------------------------------------------------------
*   Initial implementation based on Microsoft sample code.
*
*--------------------------------------------------------------------------
*/

#include "precomp.h"

#ifdef ALLOC_PRAGMA
#pragma alloc_text(INIT,CyyGetConfigDefaults)

#pragma alloc_text(PAGESRP0,CyyGetRegistryKeyValue)
#pragma alloc_text(PAGESRP0,CyyPutRegistryKeyValue)
#endif // ALLOC_PRAGMA


NTSTATUS
CyyGetConfigDefaults(
    IN PCYY_REGISTRY_DATA    DriverDefaultsPtr,
    IN PUNICODE_STRING          RegistryPath
    )

/*++

Routine Description:

    This routine reads the default configuration data from the
    registry for the serial driver.

    It also builds fields in the registry for several configuration
    options if they don't exist.

Arguments:

    DriverDefaultsPtr - Pointer to a structure that will contain
                        the default configuration values.

    RegistryPath - points to the entry for this driver in the
                   current control set of the registry.

Return Value:

    STATUS_SUCCESS if we got the defaults, otherwise we failed.
    The only way to fail this call is if the  STATUS_INSUFFICIENT_RESOURCES.

--*/

{

    NTSTATUS Status = STATUS_SUCCESS;    // return value

    //
    // We use this to query into the registry for defaults
    //

    RTL_QUERY_REGISTRY_TABLE paramTable[8];
    
    PWCHAR  path;
    ULONG   zero            = 0;
    ULONG   DbgDefault      = 0;//SER_DBG_DEFAULT;
    ULONG   notThereDefault = CYY_UNINITIALIZED_DEFAULT;

    PAGED_CODE();

    //
    // Since the registry path parameter is a "counted" UNICODE string, it
    // might not be zero terminated.  For a very short time allocate memory
    // to hold the registry path zero terminated so that we can use it to
    // delve into the registry.
    //
    // NOTE NOTE!!!! This is not an architected way of breaking into
    // a driver.  It happens to work for this driver because the author
    // likes to do things this way.
    //

    path = ExAllocatePool (PagedPool, RegistryPath->Length+sizeof(WCHAR));
    
    if (!path) {
        Status = STATUS_INSUFFICIENT_RESOURCES;
        return (Status);
    }
    
    RtlZeroMemory (DriverDefaultsPtr, sizeof(CYY_REGISTRY_DATA));
    RtlZeroMemory (&paramTable[0], sizeof(paramTable));
    RtlZeroMemory (path, RegistryPath->Length+sizeof(WCHAR));
    RtlMoveMemory (path, RegistryPath->Buffer, RegistryPath->Length);

    paramTable[0].Flags         = RTL_QUERY_REGISTRY_DIRECT;
    paramTable[0].Name          = L"BreakOnEntry";
    paramTable[0].EntryContext  = &DriverDefaultsPtr->ShouldBreakOnEntry;
    paramTable[0].DefaultType   = REG_DWORD;
    paramTable[0].DefaultData   = &zero;
    paramTable[0].DefaultLength = sizeof(ULONG);
    
    paramTable[1].Flags         = RTL_QUERY_REGISTRY_DIRECT;
    paramTable[1].Name          = L"DebugLevel";
    paramTable[1].EntryContext  = &DriverDefaultsPtr->DebugLevel;
    paramTable[1].DefaultType   = REG_DWORD;
    paramTable[1].DefaultData   = &DbgDefault;
    paramTable[1].DefaultLength = sizeof(ULONG);
    
    paramTable[3].Flags         = RTL_QUERY_REGISTRY_DIRECT;
    paramTable[3].Name          = L"RxFIFO";
    paramTable[3].EntryContext  = &DriverDefaultsPtr->RxFIFODefault;
    paramTable[3].DefaultType   = REG_DWORD;
    paramTable[3].DefaultData   = &notThereDefault;
    paramTable[3].DefaultLength = sizeof(ULONG);
    
    paramTable[4].Flags         = RTL_QUERY_REGISTRY_DIRECT;
    paramTable[4].Name          = L"TxFIFO";
    paramTable[4].EntryContext  = &DriverDefaultsPtr->TxFIFODefault;
    paramTable[4].DefaultType   = REG_DWORD;
    paramTable[4].DefaultData   = &notThereDefault;
    paramTable[4].DefaultLength = sizeof(ULONG);

    paramTable[2].Flags         = RTL_QUERY_REGISTRY_DIRECT;
    paramTable[2].Name          = L"PermitShare";
    paramTable[2].EntryContext  = &DriverDefaultsPtr->PermitShareDefault;
    paramTable[2].DefaultType   = REG_DWORD;
    paramTable[2].DefaultData   = &notThereDefault;
    paramTable[2].DefaultLength = sizeof(ULONG);
    
    Status = RtlQueryRegistryValues( RTL_REGISTRY_ABSOLUTE | RTL_REGISTRY_OPTIONAL,
                                     path,
                                     &paramTable[0],
                                     NULL,
                                     NULL);
       
    if (!NT_SUCCESS(Status)) {
            DriverDefaultsPtr->ShouldBreakOnEntry   = 0;
            DriverDefaultsPtr->DebugLevel           = 0;
    }

    // TODO FANNY: SEE IF WE CAN ADD FIFO SIZE CONFIGURATION, 
    // AS REQUESTED BY PLATFORM IN JAPAN.
    // Check to see if there was a forcefifo or an rxfifo size.
    // If there isn't then write out values so that they could
    // be adjusted later.
    //

    if (DriverDefaultsPtr->RxFIFODefault == notThereDefault) {
        DriverDefaultsPtr->RxFIFODefault = CYY_RX_FIFO_DEFAULT;
        RtlWriteRegistryValue(
            RTL_REGISTRY_ABSOLUTE,
            path,
            L"RxFIFO",
            REG_DWORD,
            &DriverDefaultsPtr->RxFIFODefault,
            sizeof(ULONG)
            );
    }

    if (DriverDefaultsPtr->TxFIFODefault == notThereDefault) {

        DriverDefaultsPtr->TxFIFODefault = CYY_TX_FIFO_DEFAULT;
        RtlWriteRegistryValue(
            RTL_REGISTRY_ABSOLUTE,
            path,
            L"TxFIFO",
            REG_DWORD,
            &DriverDefaultsPtr->TxFIFODefault,
            sizeof(ULONG)
            );
    }

    if (DriverDefaultsPtr->PermitShareDefault == notThereDefault) {

        DriverDefaultsPtr->PermitShareDefault = CYY_PERMIT_SHARE_DEFAULT;
        //
        // Only share if the user actual changes switch.
        //

        RtlWriteRegistryValue(
            RTL_REGISTRY_ABSOLUTE,
            path,
            L"PermitShare",
            REG_DWORD,
            &DriverDefaultsPtr->PermitShareDefault,
            sizeof(ULONG)
            );

    }


    //
    // We don't need that path anymore.
    //

    if (path) {
        ExFreePool(path);
    }

    //
    //  Set the defaults for other values
    //
    DriverDefaultsPtr->PermitSystemWideShare = FALSE;

    return (Status);
}


NTSTATUS 
CyyGetRegistryKeyValue (
                       IN HANDLE Handle,
                       IN PWCHAR KeyNameString,
                       IN ULONG KeyNameStringLength,
                       IN PVOID Data,
                       IN ULONG DataLength
                       )
/*++

Routine Description:

    Reads a registry key value from an already opened registry key.
    
Arguments:

    Handle              Handle to the opened registry key
    
    KeyNameString       ANSI string to the desired key

    KeyNameStringLength Length of the KeyNameString

    Data                Buffer to place the key value in

    DataLength          Length of the data buffer

Return Value:

    STATUS_SUCCESS if all works, otherwise status of system call that
    went wrong.

--*/
{
   UNICODE_STRING              keyName;
   ULONG                       length;
   PKEY_VALUE_FULL_INFORMATION fullInfo;

   NTSTATUS                    ntStatus = STATUS_INSUFFICIENT_RESOURCES;

   PAGED_CODE();

   CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyyGetRegistryKeyValue(XXX)\n");


   RtlInitUnicodeString (&keyName, KeyNameString);

   length = sizeof(KEY_VALUE_FULL_INFORMATION) + KeyNameStringLength
      + DataLength;
   fullInfo = ExAllocatePool(PagedPool, length); 

   if (fullInfo) {
      ntStatus = ZwQueryValueKey (Handle,
                                  &keyName,
                                  KeyValueFullInformation,
                                  fullInfo,
                                  length,
                                  &length);

      if (NT_SUCCESS(ntStatus)) {
         //
         // If there is enough room in the data buffer, copy the output
         //

         if (DataLength >= fullInfo->DataLength) {
            RtlCopyMemory (Data, 
                           ((PUCHAR) fullInfo) + fullInfo->DataOffset, 
                           fullInfo->DataLength);
         }
      }

      ExFreePool(fullInfo);
   }

   CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyyGetRegistryKeyValue %X\n",
                 ntStatus);

   return ntStatus;
}


ULONG 
CyyGetRegistryKeyValueLength (
                       IN HANDLE Handle,
                       IN PWCHAR KeyNameString,
                       IN ULONG KeyNameStringLength
                       )
/*++

Routine Description:

    Reads a registry key value from an already opened registry key.
    
Arguments:

    Handle              Handle to the opened registry key
    
    KeyNameString       ANSI string to the desired key

    KeyNameStringLength Length of the KeyNameString

Return Value:

    ULONG               Length of the key value

--*/
{
   UNICODE_STRING              keyName;
   ULONG                       length;
   PKEY_VALUE_FULL_INFORMATION fullInfo;

   PAGED_CODE();

   RtlInitUnicodeString (&keyName, KeyNameString);

   length = sizeof(KEY_VALUE_FULL_INFORMATION) + KeyNameStringLength;

   fullInfo = ExAllocatePool(PagedPool, length); 

   if (fullInfo) {
      ZwQueryValueKey (Handle,
                       &keyName,
                       KeyValueFullInformation,
                       fullInfo,
                       length,
                       &length);

      ExFreePool(fullInfo);
   }

   return length;
}


NTSTATUS 
CyyPutRegistryKeyValue(IN HANDLE Handle, IN PWCHAR PKeyNameString,
                       IN ULONG KeyNameStringLength, IN ULONG Dtype,
                       IN PVOID PData, IN ULONG DataLength)
/*++

Routine Description:

    Writes a registry key value to an already opened registry key.
    
Arguments:

    Handle              Handle to the opened registry key
    
    PKeyNameString      ANSI string to the desired key

    KeyNameStringLength Length of the KeyNameString
    
    Dtype		REG_XYZ value type

    PData               Buffer to place the key value in

    DataLength          Length of the data buffer

Return Value:

    STATUS_SUCCESS if all works, otherwise status of system call that
    went wrong.

--*/
{
   NTSTATUS status;
   UNICODE_STRING keyname;

   PAGED_CODE();

   CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyyPutRegistryKeyValue(XXX)\n");

   RtlInitUnicodeString(&keyname, NULL);
   keyname.MaximumLength = (USHORT)(KeyNameStringLength + sizeof(WCHAR));
   keyname.Buffer = ExAllocatePool(PagedPool, keyname.MaximumLength);

   if (keyname.Buffer == NULL) {
      return STATUS_INSUFFICIENT_RESOURCES;
   }

   RtlAppendUnicodeToString(&keyname, PKeyNameString);

   status = ZwSetValueKey(Handle, &keyname, 0, Dtype, PData, DataLength);

   ExFreePool(keyname.Buffer);
   
   CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyyPutRegistryKeyValue %X\n",
                 status);

   return status;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\y\cyyport\cyypurge.c ===
/*--------------------------------------------------------------------------
*	
*   Copyright (C) Cyclades Corporation, 1996-2001.
*   All rights reserved.
*	
*   Cyclom-Y Port Driver
*	
*   This file:      cyypurge.c
*	
*   Description:    This module contains the code related to purge
*                   operations in the Cyclom-Y Port driver.
*
*   Notes:          This code supports Windows 2000 and Windows XP,
*                   x86 and IA64 processors.
*	
*   Complies with Cyclades SW Coding Standard rev 1.3.
*	
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*   Change History
*
*--------------------------------------------------------------------------
*
*
*--------------------------------------------------------------------------
*/

#include "precomp.h"

#ifdef ALLOC_PRAGMA
#pragma alloc_text(PAGESER,CyyStartPurge)
#pragma alloc_text(PAGESER,CyyPurgeInterruptBuff)
#endif


NTSTATUS
CyyStartPurge(
    IN PCYY_DEVICE_EXTENSION Extension
    )

/*++

Routine Description:

    Depending on the mask in the current irp, purge the interrupt
    buffer, the read queue, or the write queue, or all of the above.

Arguments:

    Extension - Pointer to the device extension.

Return Value:

    Will return STATUS_SUCCESS always.  This is reasonable
    since the DPC completion code that calls this routine doesn't
    care and the purge request always goes through to completion
    once it's started.

--*/

{

    PIRP NewIrp;

    CYY_LOCKED_PAGED_CODE();

    do {

        ULONG Mask;

        Mask = *((ULONG *)
                 (Extension->CurrentPurgeIrp->AssociatedIrp.SystemBuffer));

        if (Mask & SERIAL_PURGE_TXABORT) {

            CyyKillAllReadsOrWrites(
                Extension->DeviceObject,
                &Extension->WriteQueue,
                &Extension->CurrentWriteIrp
                );

            CyyKillAllReadsOrWrites(
                Extension->DeviceObject,
                &Extension->WriteQueue,
                &Extension->CurrentXoffIrp
                );

        }

        if (Mask & SERIAL_PURGE_RXABORT) {

            CyyKillAllReadsOrWrites(
                Extension->DeviceObject,
                &Extension->ReadQueue,
                &Extension->CurrentReadIrp
                );

        }

        if (Mask & SERIAL_PURGE_RXCLEAR) {

            KIRQL OldIrql;

            //
            // Clean out the interrupt buffer.
            //
            // Note that we do this under protection of the
            // the drivers control lock so that we don't hose
            // the pointers if there is currently a read that
            // is reading out of the buffer.
            //

            KeAcquireSpinLock(
                &Extension->ControlLock,
                &OldIrql
                );

            KeSynchronizeExecution(
                Extension->Interrupt,
                CyyPurgeInterruptBuff,
                Extension
                );

            KeReleaseSpinLock(
                &Extension->ControlLock,
                OldIrql
                );

        }


        Extension->CurrentPurgeIrp->IoStatus.Status = STATUS_SUCCESS;
        Extension->CurrentPurgeIrp->IoStatus.Information = 0;

        CyyGetNextIrp(
            &Extension->CurrentPurgeIrp,
            &Extension->PurgeQueue,
            &NewIrp,
            TRUE,
   			Extension
            );

    } while (NewIrp);

    return STATUS_SUCCESS;

}

BOOLEAN
CyyPurgeInterruptBuff(
    IN PVOID Context
    )

/*++

Routine Description:

    This routine simply resets the interrupt (typeahead) buffer.

    NOTE: This routine is being called from KeSynchronizeExecution.

Arguments:

    Context - Really a pointer to the device extension.

Return Value:

    Always false.

--*/

{

    PCYY_DEVICE_EXTENSION Extension = Context;
    CYY_LOCKED_PAGED_CODE();


    //
    // The typeahead buffer is by definition empty if there
    // currently is a read owned by the isr.
    //


    if (Extension->ReadBufferBase == Extension->InterruptReadBuffer) {

        Extension->CurrentCharSlot = Extension->InterruptReadBuffer;
        Extension->FirstReadableChar = Extension->InterruptReadBuffer;
        Extension->LastCharSlot = Extension->InterruptReadBuffer +
                                      (Extension->BufferSize - 1);
        Extension->CharsInInterruptBuffer = 0;


        CyyHandleReducedIntBuffer(Extension);

    }

    return FALSE;

}


=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\y\cyyport\cyyread.c ===
/*--------------------------------------------------------------------------
*	
*   Copyright (C) Cyclades Corporation, 1996-2001.
*   All rights reserved.
*	
*   Cyclom-Y Port Driver
*	
*   This file:      cyyread,c
*	
*   Description:    This module contains the code related to read
*                   operations in the Cyclom-Y Port driver.
*
*   Notes:          This code supports Windows 2000 and Windows XP,
*                   x86 and IA64 processors.
*	
*   Complies with Cyclades SW Coding Standard rev 1.3.
*	
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*   Change History
*
*--------------------------------------------------------------------------
*
*
*--------------------------------------------------------------------------
*/

#include "precomp.h"


VOID
CyyCancelCurrentRead(
    PDEVICE_OBJECT DeviceObject,
    PIRP Irp
    );

BOOLEAN
CyyGrabReadFromIsr(
    IN PVOID Context
    );

BOOLEAN
CyyUpdateReadByIsr(
    IN PVOID Context
    );

ULONG
CyyGetCharsFromIntBuffer(
    PCYY_DEVICE_EXTENSION Extension
    );

BOOLEAN
CyyUpdateInterruptBuffer(
    IN PVOID Context
    );

BOOLEAN
CyyUpdateAndSwitchToUser(
    IN PVOID Context
    );

NTSTATUS
CyyResizeBuffer(
    IN PCYY_DEVICE_EXTENSION Extension
    );

ULONG
CyyMoveToNewIntBuffer(
    PCYY_DEVICE_EXTENSION Extension,
    PUCHAR NewBuffer
    );

BOOLEAN
CyyUpdateAndSwitchToNew(
    IN PVOID Context
    );

#ifdef ALLOC_PRAGMA
#pragma alloc_text(PAGESER,CyyRead)
#pragma alloc_text(PAGESER,CyyStartRead)
#pragma alloc_text(PAGESER,CyyCancelCurrentRead)
#pragma alloc_text(PAGESER,CyyGrabReadFromIsr)
#pragma alloc_text(PAGESER,CyyUpdateReadByIsr)
#pragma alloc_text(PAGESER,CyyGetCharsFromIntBuffer)
#pragma alloc_text(PAGESER,CyyUpdateInterruptBuffer)
#pragma alloc_text(PAGESER,CyyUpdateAndSwitchToUser)
#pragma alloc_text(PAGESER,CyyResizeBuffer)
#pragma alloc_text(PAGESER,CyyMoveToNewIntBuffer)
#pragma alloc_text(PAGESER,CyyUpdateAndSwitchToNew)
#endif

//removed in Win2000
//#pragma alloc_text(PAGESER,CyyCompleteRead)
//#pragma alloc_text(PAGESER,CyyReadTimeout)
//#pragma alloc_text(PAGESER,CyyIntervalReadTimeout)


NTSTATUS
CyyRead(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    )
/*--------------------------------------------------------------------------
    CyyRead()
    
    Routine Description: This is the dispatch routine for reading. It
    validates the parameters for the read request and if all is ok then
    it places the request on the work queue.

    Arguments:

    DeviceObject - Pointer to the device object for this device
    Irp - Pointer to the IRP for the current request

    Return Value:

    If the io is zero length then it will return STATUS_SUCCESS,
    otherwise this routine will return the status returned by
    the actual start read routine.
--------------------------------------------------------------------------*/
{
    PCYY_DEVICE_EXTENSION extension = DeviceObject->DeviceExtension;
    BOOLEAN acceptingIRPs;
    NTSTATUS status;

    CYY_LOCKED_PAGED_CODE();

    CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyyRead(%X, %X)\n", DeviceObject,
                  Irp);

    if ((status = CyyIRPPrologue(Irp, extension)) != STATUS_SUCCESS) {
      if(status != STATUS_PENDING) {
         CyyCompleteRequest(extension, Irp, IO_NO_INCREMENT);
      }
      CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyyRead (1) %X\n", status);
      return status;
    }

    CyyDbgPrintEx(CYYIRPPATH, "Dispatch entry for: %x\n", Irp);

    if (CyyCompleteIfError(DeviceObject, Irp) != STATUS_SUCCESS) {

       CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyyRead (2) %X\n",
                        STATUS_CANCELLED);
        return STATUS_CANCELLED;
    }

    Irp->IoStatus.Information = 0L;

    if (IoGetCurrentIrpStackLocation(Irp)->Parameters.Read.Length) {

       //
       // Well it looks like we actually have to do some
       // work.  Put the read on the queue so that we can
       // process it when our previous reads are done.
       //

       status = CyyStartOrQueue(extension, Irp, &extension->ReadQueue,
                                &extension->CurrentReadIrp, CyyStartRead);

       CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyyRead (3) %X\n", status);

       return status;

    } else {

        Irp->IoStatus.Status = STATUS_SUCCESS;
        CyyCompleteRequest(extension, Irp, 0);

        CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyyRead (4) %X\n",
                      STATUS_SUCCESS);

        return STATUS_SUCCESS;

    }

}

NTSTATUS
CyyStartRead(
    IN PCYY_DEVICE_EXTENSION Extension
    )
/*--------------------------------------------------------------------------
    CyyStartRead()
    
    Routine Description: This routine is used to start off any read.
    It initializes the Iostatus fields of the irp.  It will set up any
    timers that are used to control the read.  It will attempt to
    complete the read from data already in the interrupt buffer.  If the
    read can be completed quickly it will start off another if
    necessary.

    Arguments:

    Extension - Simply a pointer to the serial device extension.

    Return Value: This routine will return the status of the first read
    irp.  This is useful in that if we have a read that can complete
    right away (AND there had been nothing in the queue before it) the
    read could return SUCCESS and the application won't have to do a wait.
--------------------------------------------------------------------------*/
{
    SERIAL_UPDATE_CHAR updateChar;
    PIRP newIrp;
    KIRQL oldIrql;
    KIRQL controlIrql;
    BOOLEAN returnWithWhatsPresent;
    BOOLEAN os2ssreturn;
    BOOLEAN crunchDownToOne;
    BOOLEAN useTotalTimer;
    BOOLEAN useIntervalTimer;
    ULONG multiplierVal;
    ULONG constantVal;
    LARGE_INTEGER totalTime;
    SERIAL_TIMEOUTS timeoutsForIrp;
    BOOLEAN setFirstStatus = FALSE;
    NTSTATUS firstStatus;

    CYY_LOCKED_PAGED_CODE();

    CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyyStartRead(%X)\n", Extension);

    updateChar.Extension = Extension;

    do {
        // Check to see if this is a resize request.  If it is
        // then go to a routine that specializes in that.

        if (IoGetCurrentIrpStackLocation(Extension->CurrentReadIrp)
            ->MajorFunction != IRP_MJ_READ) {

            NTSTATUS localStatus = CyyResizeBuffer(Extension);
            if (!setFirstStatus) {
                firstStatus = localStatus;
                setFirstStatus = TRUE;
            }
        } else {
            Extension->NumberNeededForRead =
                IoGetCurrentIrpStackLocation(Extension->CurrentReadIrp)
                    ->Parameters.Read.Length;

            // Calculate the timeout value needed for the
            // request.  Note that the values stored in the
            // timeout record are in milliseconds.

            useTotalTimer = FALSE;
            returnWithWhatsPresent = FALSE;
            os2ssreturn = FALSE;
            crunchDownToOne = FALSE;
            useIntervalTimer = FALSE;

            //
            // CIMEXCIMEX -- this is a lie
            //
            // Always initialize the timer objects so that the
            // completion code can tell when it attempts to
            // cancel the timers whether the timers had ever
            // been Set.
            //
            // CIMEXCIMEX -- this is a lie
            //
            // What we want to do is just make sure the timers are
            // cancelled to the best of our ability and move on with
            // life.
            //

            CyyCancelTimer(&Extension->ReadRequestTotalTimer, Extension);
            CyyCancelTimer(&Extension->ReadRequestIntervalTimer, Extension);


//            KeInitializeTimer(&Extension->ReadRequestTotalTimer);
//            KeInitializeTimer(&Extension->ReadRequestIntervalTimer);

            // We get the *current* timeout values to use for timing
            // this read.

            KeAcquireSpinLock(&Extension->ControlLock,&controlIrql);

            timeoutsForIrp = Extension->Timeouts;

            KeReleaseSpinLock(&Extension->ControlLock,controlIrql);

            // Calculate the interval timeout for the read.

            if (timeoutsForIrp.ReadIntervalTimeout &&
                (timeoutsForIrp.ReadIntervalTimeout !=
                 MAXULONG)) {

                useIntervalTimer = TRUE;

                Extension->IntervalTime.QuadPart =
                    UInt32x32To64(
                        timeoutsForIrp.ReadIntervalTimeout,
                        10000
                        );

                if (Extension->IntervalTime.QuadPart >=
                    Extension->CutOverAmount.QuadPart) {

                    Extension->IntervalTimeToUse =
                        &Extension->LongIntervalAmount;
                } else {
                    Extension->IntervalTimeToUse =
                        &Extension->ShortIntervalAmount;
                }
            }

            if (timeoutsForIrp.ReadIntervalTimeout == MAXULONG) {

                //
                // We need to do special return quickly stuff here.
                //
                // 1) If both constant and multiplier are
                //    0 then we return immediately with whatever
                //    we've got, even if it was zero.
                //
                // 2) If constant and multiplier are not MAXULONG
                //    then return immediately if any characters
                //    are present, but if nothing is there, then
                //    use the timeouts as specified.
                //
                // 3) If multiplier is MAXULONG then do as in
                //    "2" but return when the first character
                //    arrives.
                //

                if (!timeoutsForIrp.ReadTotalTimeoutConstant &&
                    !timeoutsForIrp.ReadTotalTimeoutMultiplier) {

                    returnWithWhatsPresent = TRUE;

                } else if ((timeoutsForIrp.ReadTotalTimeoutConstant != MAXULONG)
                            &&
                           (timeoutsForIrp.ReadTotalTimeoutMultiplier
                            != MAXULONG)) {

                    useTotalTimer = TRUE;
                    os2ssreturn = TRUE;
                    multiplierVal = timeoutsForIrp.ReadTotalTimeoutMultiplier;
                    constantVal = timeoutsForIrp.ReadTotalTimeoutConstant;

                } else if ((timeoutsForIrp.ReadTotalTimeoutConstant != MAXULONG)
                            &&
                           (timeoutsForIrp.ReadTotalTimeoutMultiplier
                            == MAXULONG)) {

                    useTotalTimer = TRUE;
                    os2ssreturn = TRUE;
                    crunchDownToOne = TRUE;
                    multiplierVal = 0;
                    constantVal = timeoutsForIrp.ReadTotalTimeoutConstant;

                }

            } else {

                //
                // If both the multiplier and the constant are
                // zero then don't do any total timeout processing.
                //

                if (timeoutsForIrp.ReadTotalTimeoutMultiplier ||
                    timeoutsForIrp.ReadTotalTimeoutConstant) {

                    //
                    // We have some timer values to calculate.
                    //

                    useTotalTimer = TRUE;
                    multiplierVal = timeoutsForIrp.ReadTotalTimeoutMultiplier;
                    constantVal = timeoutsForIrp.ReadTotalTimeoutConstant;

                }

            }

            if (useTotalTimer) {

                totalTime.QuadPart = ((LONGLONG)(UInt32x32To64(
                                          Extension->NumberNeededForRead,
                                          multiplierVal
                                          )
                                          + constantVal))
                                      * -10000;

            }


            //
            // We do this copy in the hope of getting most (if not
            // all) of the characters out of the interrupt buffer.
            //
            // Note that we need to protect this operation with a
            // spinlock since we don't want a purge to hose us.
            //

            KeAcquireSpinLock(
                &Extension->ControlLock,
                &controlIrql
                );

            updateChar.CharsCopied = CyyGetCharsFromIntBuffer(Extension);

            //
            // See if we have any cause to return immediately.
            //

            if (returnWithWhatsPresent || (!Extension->NumberNeededForRead) ||
                (os2ssreturn &&
                 Extension->CurrentReadIrp->IoStatus.Information)) {

                //
                // We got all we needed for this read.
                // Update the number of characters in the
                // interrupt read buffer.
                //

                KeSynchronizeExecution(
                    Extension->Interrupt,
                    CyyUpdateInterruptBuffer,
                    &updateChar
                    );

                KeReleaseSpinLock(
                    &Extension->ControlLock,
                    controlIrql
                    );

                Extension->CurrentReadIrp->IoStatus.Status = STATUS_SUCCESS;
                if (!setFirstStatus) {

                    firstStatus = STATUS_SUCCESS;
                    setFirstStatus = TRUE;

                }

            } else {

                //
                // The irp might go under control of the isr.  It
                // won't hurt to initialize the reference count
                // right now.
                //

                SERIAL_INIT_REFERENCE(Extension->CurrentReadIrp);

                IoAcquireCancelSpinLock(&oldIrql);

                //
                // We need to see if this irp should be canceled.
                //

                if (Extension->CurrentReadIrp->Cancel) {

                    IoReleaseCancelSpinLock(oldIrql);
                    KeReleaseSpinLock(
                        &Extension->ControlLock,
                        controlIrql
                        );
                    Extension->CurrentReadIrp->IoStatus.Status =
                        STATUS_CANCELLED;
                    Extension->CurrentReadIrp->IoStatus.Information = 0;

                    if (!setFirstStatus) {

                        firstStatus = STATUS_CANCELLED;
                        setFirstStatus = TRUE;

                    }

                } else {

                    //
                    // If we are supposed to crunch the read down to
                    // one character, then update the read length
                    // in the irp and truncate the number needed for
                    // read down to one. Note that if we are doing
                    // this crunching, then the information must be
                    // zero (or we would have completed above) and
                    // the number needed for the read must still be
                    // equal to the read length.
                    //

                    if (crunchDownToOne) {

                        ASSERT(
                            (!Extension->CurrentReadIrp->IoStatus.Information)
                            &&
                            (Extension->NumberNeededForRead ==
                                IoGetCurrentIrpStackLocation(
                                    Extension->CurrentReadIrp
                                    )->Parameters.Read.Length)
                            );

                        Extension->NumberNeededForRead = 1;
                        IoGetCurrentIrpStackLocation(
                            Extension->CurrentReadIrp
                            )->Parameters.Read.Length = 1;

                    }

                    //
                    // We still need to get more characters for this read.
                    // synchronize with the isr so that we can update the
                    // number of characters and if necessary it will have the
                    // isr switch to copying into the users buffer.
                    //

                    KeSynchronizeExecution(
                        Extension->Interrupt,
                        CyyUpdateAndSwitchToUser,
                        &updateChar
                        );

                    if (!updateChar.Completed) {

                        //
                        // The irp still isn't complete.  The
                        // completion routines will end up reinvoking
                        // this routine.  So we simply leave.
                        //
                        // First thought we should start off the total
                        // timer for the read and increment the reference
                        // count that the total timer has on the current
                        // irp.  Note that this is safe, because even if
                        // the io has been satisfied by the isr it can't
                        // complete yet because we still own the cancel
                        // spinlock.
                        //

                        if (useTotalTimer) {

                            SERIAL_SET_REFERENCE(
                                Extension->CurrentReadIrp,
                                SERIAL_REF_TOTAL_TIMER
                                );

                            CyySetTimer(
                                &Extension->ReadRequestTotalTimer,
                                totalTime,
                                &Extension->TotalReadTimeoutDpc,
                                Extension
                                );

                        }

                        if (useIntervalTimer) {

                            SERIAL_SET_REFERENCE(
                                Extension->CurrentReadIrp,
                                SERIAL_REF_INT_TIMER
                                );

                            KeQuerySystemTime(
                                &Extension->LastReadTime
                                );
                            CyySetTimer(
                                &Extension->ReadRequestIntervalTimer,
                                *Extension->IntervalTimeToUse,
                                &Extension->IntervalReadTimeoutDpc,
                                Extension
                                );

                        }

                        IoMarkIrpPending(Extension->CurrentReadIrp);
                        IoReleaseCancelSpinLock(oldIrql);
                        KeReleaseSpinLock(
                            &Extension->ControlLock,
                            controlIrql
                            );
                        if (!setFirstStatus) {

                            firstStatus = STATUS_PENDING;

                        }
                        return firstStatus;

                    } else {

                        IoReleaseCancelSpinLock(oldIrql);
                        KeReleaseSpinLock(
                            &Extension->ControlLock,
                            controlIrql
                            );
                        Extension->CurrentReadIrp->IoStatus.Status =
                            STATUS_SUCCESS;

                        if (!setFirstStatus) {

                            firstStatus = STATUS_SUCCESS;
                            setFirstStatus = TRUE;

                        }

                    }

                }

            }

        }

        //
        // Well the operation is complete.
        //

        CyyGetNextIrp(&Extension->CurrentReadIrp, &Extension->ReadQueue,
                         &newIrp, TRUE, Extension);

    } while (newIrp);

    CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyyStartRead %X\n", firstStatus);

    return firstStatus;

}

VOID
CyyCompleteRead(
    IN PKDPC Dpc,
    IN PVOID DeferredContext,
    IN PVOID SystemContext1,
    IN PVOID SystemContext2
    )
/*--------------------------------------------------------------------------
    CyyCompleteRead()
    
    Routine Description: This routine is merely used to complete any read
    that ended up being used by the Isr.  It assumes that the status and
    the information fields of the irp are already correctly filled in.

    Arguments:

    Dpc - Not Used.
    DeferredContext - Really points to the device extension.
    SystemContext1 - Not Used.
    SystemContext2 - Not Used.

    Return Value: None.
--------------------------------------------------------------------------*/

{
    PCYY_DEVICE_EXTENSION extension = DeferredContext;
    KIRQL oldIrql;

    UNREFERENCED_PARAMETER(SystemContext1);
    UNREFERENCED_PARAMETER(SystemContext2);

    CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyyCompleteRead(%X)\n",
                     extension);

    IoAcquireCancelSpinLock(&oldIrql);

    //
    // We set this to indicate to the interval timer
    // that the read has completed.
    //
    // Recall that the interval timer dpc can be lurking in some
    // DPC queue.
    //

    extension->CountOnLastRead = CYY_COMPLETE_READ_COMPLETE;

    CyyTryToCompleteCurrent(
        extension,
        NULL,
        oldIrql,
        STATUS_SUCCESS,
        &extension->CurrentReadIrp,
        &extension->ReadQueue,
        &extension->ReadRequestIntervalTimer,
        &extension->ReadRequestTotalTimer,
        CyyStartRead,
        CyyGetNextIrp,
        SERIAL_REF_ISR
        );

    CyyDpcEpilogue(extension, Dpc);

    CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyyCompleteRead(%X)\n");
}

VOID
CyyCancelCurrentRead(
    PDEVICE_OBJECT DeviceObject,
    PIRP Irp
    )

/*++

Routine Description:

    This routine is used to cancel the current read.

Arguments:

    DeviceObject - Pointer to the device object for this device

    Irp - Pointer to the IRP to be canceled.

Return Value:

    None.

--*/

{

    PCYY_DEVICE_EXTENSION extension = DeviceObject->DeviceExtension;
    CYY_LOCKED_PAGED_CODE();

    //
    // We set this to indicate to the interval timer
    // that the read has encountered a cancel.
    //
    // Recall that the interval timer dpc can be lurking in some
    // DPC queue.
    //

    extension->CountOnLastRead = CYY_COMPLETE_READ_CANCEL;

    CyyTryToCompleteCurrent(
        extension,
        CyyGrabReadFromIsr,
        Irp->CancelIrql,
        STATUS_CANCELLED,
        &extension->CurrentReadIrp,
        &extension->ReadQueue,
        &extension->ReadRequestIntervalTimer,
        &extension->ReadRequestTotalTimer,
        CyyStartRead,
        CyyGetNextIrp,
        SERIAL_REF_CANCEL
        );

}

BOOLEAN
CyyGrabReadFromIsr(
    IN PVOID Context
    )

/*++

Routine Description:

    This routine is used to grab (if possible) the irp from the
    isr.  If it finds that the isr still owns the irp it grabs
    the ipr away (updating the number of characters copied into the
    users buffer).  If it grabs it away it also decrements the
    reference count on the irp since it no longer belongs to the
    isr (and the dpc that would complete it).

    NOTE: This routine assumes that if the current buffer that the
          ISR is copying characters into is the interrupt buffer then
          the dpc has already been queued.

    NOTE: This routine is being called from KeSynchronizeExecution.

    NOTE: This routine assumes that it is called with the cancel spin
          lock held.

Arguments:

    Context - Really a pointer to the device extension.

Return Value:

    Always false.

--*/

{

    PCYY_DEVICE_EXTENSION extension = Context;
    CYY_LOCKED_PAGED_CODE();

    if (extension->ReadBufferBase !=
        extension->InterruptReadBuffer) {

        //
        // We need to set the information to the number of characters
        // that the read wanted minus the number of characters that
        // didn't get read into the interrupt buffer.
        //

        extension->CurrentReadIrp->IoStatus.Information =
            IoGetCurrentIrpStackLocation(
                extension->CurrentReadIrp
                )->Parameters.Read.Length -
            ((extension->LastCharSlot - extension->CurrentCharSlot) + 1);

        //
        // Switch back to the interrupt buffer.
        //

        extension->ReadBufferBase = extension->InterruptReadBuffer;
        extension->CurrentCharSlot = extension->InterruptReadBuffer;
        extension->FirstReadableChar = extension->InterruptReadBuffer;
        extension->LastCharSlot = extension->InterruptReadBuffer +
                                      (extension->BufferSize - 1);
        extension->CharsInInterruptBuffer = 0;

        SERIAL_CLEAR_REFERENCE(
            extension->CurrentReadIrp,
            SERIAL_REF_ISR
            );

    }

    return FALSE;

}

VOID
CyyReadTimeout(
    IN PKDPC Dpc,
    IN PVOID DeferredContext,
    IN PVOID SystemContext1,
    IN PVOID SystemContext2
    )

/*++

Routine Description:

    This routine is used to complete a read because its total
    timer has expired.

Arguments:

    Dpc - Not Used.

    DeferredContext - Really points to the device extension.

    SystemContext1 - Not Used.

    SystemContext2 - Not Used.

Return Value:

    None.

--*/

{

    PCYY_DEVICE_EXTENSION extension = DeferredContext;
    KIRQL oldIrql;

    UNREFERENCED_PARAMETER(SystemContext1);
    UNREFERENCED_PARAMETER(SystemContext2);

    CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyyReadTimeout(%X)\n",
                     extension);

    IoAcquireCancelSpinLock(&oldIrql);

    //
    // We set this to indicate to the interval timer
    // that the read has completed due to total timeout.
    //
    // Recall that the interval timer dpc can be lurking in some
    // DPC queue.
    //

    extension->CountOnLastRead = CYY_COMPLETE_READ_TOTAL;

    CyyTryToCompleteCurrent(
        extension,
        CyyGrabReadFromIsr,
        oldIrql,
        STATUS_TIMEOUT,
        &extension->CurrentReadIrp,
        &extension->ReadQueue,
        &extension->ReadRequestIntervalTimer,
        &extension->ReadRequestTotalTimer,
        CyyStartRead,
        CyyGetNextIrp,
        SERIAL_REF_TOTAL_TIMER
        );

    CyyDpcEpilogue(extension, Dpc);

    CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyyReadTimeout\n");
}

BOOLEAN
CyyUpdateReadByIsr(
    IN PVOID Context
    )

/*++

Routine Description:

    This routine is used to update the count of characters read
    by the isr since the last interval timer experation.

    NOTE: This routine is being called from KeSynchronizeExecution.

    NOTE: This routine assumes that it is called with the cancel spin
          lock held.

Arguments:

    Context - Really a pointer to the device extension.

Return Value:

    Always false.

--*/

{

    PCYY_DEVICE_EXTENSION extension = Context;
    CYY_LOCKED_PAGED_CODE();

    extension->CountOnLastRead = extension->ReadByIsr;
    extension->ReadByIsr = 0;

    return FALSE;

}

VOID
CyyIntervalReadTimeout(
    IN PKDPC Dpc,
    IN PVOID DeferredContext,
    IN PVOID SystemContext1,
    IN PVOID SystemContext2
    )

/*++

Routine Description:

    This routine is used timeout the request if the time between
    characters exceed the interval time.  A global is kept in
    the device extension that records the count of characters read
    the last the last time this routine was invoked (This dpc
    will resubmit the timer if the count has changed).  If the
    count has not changed then this routine will attempt to complete
    the irp.  Note the special case of the last count being zero.
    The timer isn't really in effect until the first character is
    read.

Arguments:

    Dpc - Not Used.

    DeferredContext - Really points to the device extension.

    SystemContext1 - Not Used.

    SystemContext2 - Not Used.

Return Value:

    None.

--*/

{

    PCYY_DEVICE_EXTENSION extension = DeferredContext;
    KIRQL oldIrql;

    UNREFERENCED_PARAMETER(SystemContext1);
    UNREFERENCED_PARAMETER(SystemContext2);

    IoAcquireCancelSpinLock(&oldIrql);

    CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyyIntervalReadTimeout(%X)\n",
                     extension);

    if (extension->CountOnLastRead == CYY_COMPLETE_READ_TOTAL) {

        //
        // This value is only set by the total
        // timer to indicate that it has fired.
        // If so, then we should simply try to complete.
        //

        CyyTryToCompleteCurrent(
            extension,
            CyyGrabReadFromIsr,
            oldIrql,
            STATUS_TIMEOUT,
            &extension->CurrentReadIrp,
            &extension->ReadQueue,
            &extension->ReadRequestIntervalTimer,
            &extension->ReadRequestTotalTimer,
            CyyStartRead,
            CyyGetNextIrp,
            SERIAL_REF_INT_TIMER
            );

    } else if (extension->CountOnLastRead == CYY_COMPLETE_READ_COMPLETE) {

        //
        // This value is only set by the regular
        // completion routine.
        //
        // If so, then we should simply try to complete.
        //

        CyyTryToCompleteCurrent(
            extension,
            CyyGrabReadFromIsr,
            oldIrql,
            STATUS_SUCCESS,
            &extension->CurrentReadIrp,
            &extension->ReadQueue,
            &extension->ReadRequestIntervalTimer,
            &extension->ReadRequestTotalTimer,
            CyyStartRead,
            CyyGetNextIrp,
            SERIAL_REF_INT_TIMER
            );

    } else if (extension->CountOnLastRead == CYY_COMPLETE_READ_CANCEL) {

        //
        // This value is only set by the cancel
        // read routine.
        //
        // If so, then we should simply try to complete.
        //

        CyyTryToCompleteCurrent(
            extension,
            CyyGrabReadFromIsr,
            oldIrql,
            STATUS_CANCELLED,
            &extension->CurrentReadIrp,
            &extension->ReadQueue,
            &extension->ReadRequestIntervalTimer,
            &extension->ReadRequestTotalTimer,
            CyyStartRead,
            CyyGetNextIrp,
            SERIAL_REF_INT_TIMER
            );

    } else if (extension->CountOnLastRead || extension->ReadByIsr) {

        //
        // Something has happened since we last came here.  We
        // check to see if the ISR has read in any more characters.
        // If it did then we should update the isr's read count
        // and resubmit the timer.
        //

        if (extension->ReadByIsr) {

            KeSynchronizeExecution(
                extension->Interrupt,
                CyyUpdateReadByIsr,
                extension
                );

            //
            // Save off the "last" time something was read.
            // As we come back to this routine we will compare
            // the current time to the "last" time.  If the
            // difference is ever larger then the interval
            // requested by the user, then time out the request.
            //

            KeQuerySystemTime(
                &extension->LastReadTime
                );

            CyySetTimer(
                &extension->ReadRequestIntervalTimer,
                *extension->IntervalTimeToUse,
                &extension->IntervalReadTimeoutDpc,
                extension
                );

            IoReleaseCancelSpinLock(oldIrql);

        } else {

            //
            // Take the difference between the current time
            // and the last time we had characters and
            // see if it is greater then the interval time.
            // if it is, then time out the request.  Otherwise
            // go away again for a while.
            //

            //
            // No characters read in the interval time.  Kill
            // this read.
            //

            LARGE_INTEGER currentTime;

            KeQuerySystemTime(
                &currentTime
                );

            if ((currentTime.QuadPart - extension->LastReadTime.QuadPart) >=
                extension->IntervalTime.QuadPart) {

                CyyTryToCompleteCurrent(
                    extension,
                    CyyGrabReadFromIsr,
                    oldIrql,
                    STATUS_TIMEOUT,
                    &extension->CurrentReadIrp,
                    &extension->ReadQueue,
                    &extension->ReadRequestIntervalTimer,
                    &extension->ReadRequestTotalTimer,
                    CyyStartRead,
                    CyyGetNextIrp,
                    SERIAL_REF_INT_TIMER
                    );

            } else {

                CyySetTimer(
                    &extension->ReadRequestIntervalTimer,
                    *extension->IntervalTimeToUse,
                    &extension->IntervalReadTimeoutDpc,
                    extension
                    );
                IoReleaseCancelSpinLock(oldIrql);

            }


        }

    } else {

        //
        // Timer doesn't really start until the first character.
        // So we should simply resubmit ourselves.
        //

        CyySetTimer(
            &extension->ReadRequestIntervalTimer,
            *extension->IntervalTimeToUse,
            &extension->IntervalReadTimeoutDpc,
            extension
            );

        IoReleaseCancelSpinLock(oldIrql);

    }

    CyyDpcEpilogue(extension, Dpc);

    CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyyIntervalReadTimeout\n");
}

ULONG
CyyGetCharsFromIntBuffer(
    PCYY_DEVICE_EXTENSION Extension
    )

/*++

Routine Description:

    This routine is used to copy any characters out of the interrupt
    buffer into the users buffer.  It will be reading values that
    are updated with the ISR but this is safe since this value is
    only decremented by synchronization routines.  This routine will
    return the number of characters copied so some other routine
    can call a synchronization routine to update what is seen at
    interrupt level.

Arguments:

    Extension - A pointer to the device extension.

Return Value:

    The number of characters that were copied into the user
    buffer.

--*/

{

    //
    // This value will be the number of characters that this
    // routine returns.  It will be the minimum of the number
    // of characters currently in the buffer or the number of
    // characters required for the read.
    //
    ULONG numberOfCharsToGet;

    //
    // This holds the number of characters between the first
    // readable character and - the last character we will read or
    // the real physical end of the buffer (not the last readable
    // character).
    //
    ULONG firstTryNumberToGet;

    CYY_LOCKED_PAGED_CODE();

    //
    // The minimum of the number of characters we need and
    // the number of characters available
    //

    numberOfCharsToGet = Extension->CharsInInterruptBuffer;

    if (numberOfCharsToGet > Extension->NumberNeededForRead) {

        numberOfCharsToGet = Extension->NumberNeededForRead;

    }

    if (numberOfCharsToGet) {

        //
        // This will hold the number of characters between the
        // first available character and the end of the buffer.
        // Note that the buffer could wrap around but for the
        // purposes of the first copy we don't care about that.
        //

        firstTryNumberToGet = (ULONG)(Extension->LastCharSlot -
                               Extension->FirstReadableChar) + 1;

        if (firstTryNumberToGet > numberOfCharsToGet) {

            //
            // The characters don't wrap. Actually they may wrap but
            // we don't care for the purposes of this read since the
            // characters we need are available before the wrap.
            //

            RtlMoveMemory(
                ((PUCHAR)(Extension->CurrentReadIrp->AssociatedIrp.SystemBuffer))
                    + (IoGetCurrentIrpStackLocation(
                           Extension->CurrentReadIrp
                           )->Parameters.Read.Length
                       - Extension->NumberNeededForRead
                      ),
                Extension->FirstReadableChar,
                numberOfCharsToGet
                );

            Extension->NumberNeededForRead -= numberOfCharsToGet;

            //
            // We now will move the pointer to the first character after
            // what we just copied into the users buffer.
            //
            // We need to check if the stream of readable characters
            // is wrapping around to the beginning of the buffer.
            //
            // Note that we may have just taken the last characters
            // at the end of the buffer.
            //

            if ((Extension->FirstReadableChar + (numberOfCharsToGet - 1)) ==
                Extension->LastCharSlot) {

                Extension->FirstReadableChar = Extension->InterruptReadBuffer;

            } else {

                Extension->FirstReadableChar += numberOfCharsToGet;

            }

        } else {

            //
            // The characters do wrap.  Get up until the end of the buffer.
            //

            RtlMoveMemory(
                ((PUCHAR)(Extension->CurrentReadIrp->AssociatedIrp.SystemBuffer))
                    + (IoGetCurrentIrpStackLocation(
                           Extension->CurrentReadIrp
                           )->Parameters.Read.Length
                       - Extension->NumberNeededForRead
                      ),
                Extension->FirstReadableChar,
                firstTryNumberToGet
                );

            Extension->NumberNeededForRead -= firstTryNumberToGet;

            //
            // Now get the rest of the characters from the beginning of the
            // buffer.
            //

            RtlMoveMemory(
                ((PUCHAR)(Extension->CurrentReadIrp->AssociatedIrp.SystemBuffer))
                    + (IoGetCurrentIrpStackLocation(
                           Extension->CurrentReadIrp
                           )->Parameters.Read.Length
                       - Extension->NumberNeededForRead
                      ),
                Extension->InterruptReadBuffer,
                numberOfCharsToGet - firstTryNumberToGet
                );

            Extension->FirstReadableChar = Extension->InterruptReadBuffer +
                                           (numberOfCharsToGet -
                                            firstTryNumberToGet);

            Extension->NumberNeededForRead -= (numberOfCharsToGet -
                                               firstTryNumberToGet);

        }

    }

    Extension->CurrentReadIrp->IoStatus.Information += numberOfCharsToGet;
    return numberOfCharsToGet;

}

BOOLEAN
CyyUpdateInterruptBuffer(
    IN PVOID Context
    )

/*++

Routine Description:

    This routine is used to update the number of characters that
    remain in the interrupt buffer.  We need to use this routine
    since the count could be updated during the update by execution
    of the ISR.

    NOTE: This is called by KeSynchronizeExecution.

Arguments:

    Context - Points to a structure that contains a pointer to the
              device extension and count of the number of characters
              that we previously copied into the users buffer.  The
              structure actually has a third field that we don't
              use in this routine.

Return Value:

    Always FALSE.

--*/

{

    PSERIAL_UPDATE_CHAR update = Context;
    PCYY_DEVICE_EXTENSION extension = update->Extension;

    CYY_LOCKED_PAGED_CODE();

    ASSERT(extension->CharsInInterruptBuffer >= update->CharsCopied);
    extension->CharsInInterruptBuffer -= update->CharsCopied;

    //
    // Deal with flow control if necessary.
    //

    CyyHandleReducedIntBuffer(extension);


    return FALSE;

}

BOOLEAN
CyyUpdateAndSwitchToUser(
    IN PVOID Context
    )

/*++

Routine Description:

    This routine gets the (hopefully) few characters that
    remain in the interrupt buffer after the first time we tried
    to get them out.  If we still don't have enough characters
    to satisfy the read it will then we set things up so that the
    ISR uses the user buffer copy into.

    This routine is also used to update a count that is maintained
    by the ISR to keep track of the number of characters in its buffer.

    NOTE: This is called by KeSynchronizeExecution.

Arguments:

    Context - Points to a structure that contains a pointer to the
              device extension, a count of the number of characters
              that we previously copied into the users buffer, and
              a boolean that we will set that defines whether we
              switched the ISR to copy into the users buffer.

Return Value:

    Always FALSE.

--*/

{

    PSERIAL_UPDATE_CHAR updateChar = Context;
    PCYY_DEVICE_EXTENSION extension = updateChar->Extension;

    CYY_LOCKED_PAGED_CODE();

    CyyUpdateInterruptBuffer(Context);

    //
    // There are more characters to get to satisfy this read.
    // Copy any characters that have arrived since we got
    // the last batch.
    //

    updateChar->CharsCopied = CyyGetCharsFromIntBuffer(extension);

    CyyUpdateInterruptBuffer(Context);

    //
    // No more new characters will be "received" until we exit
    // this routine.  We again check to make sure that we
    // haven't satisfied this read, and if we haven't we set things
    // up so that the ISR copies into the user buffer.
    //

    if (extension->NumberNeededForRead) {

        //
        // We shouldn't be switching unless there are no
        // characters left.
        //

        ASSERT(!extension->CharsInInterruptBuffer);

        //
        // We use the following to values to do inteval timing.
        //
        // CountOnLastRead is mostly used to simply prevent
        // the interval timer from timing out before any characters
        // are read. (Interval timing should only be effective
        // after the first character is read.)
        //
        // After the first time the interval timer fires and
        // characters have be read we will simply update with
        // the value of ReadByIsr and then set ReadByIsr to zero.
        // (We do that in a synchronization routine.
        //
        // If the interval timer dpc routine ever encounters
        // ReadByIsr == 0 when CountOnLastRead is non-zero it
        // will timeout the read.
        //
        // (Note that we have a special case of CountOnLastRead
        // < 0.  This is done by the read completion routines other
        // than the total timeout dpc to indicate that the total
        // timeout has expired.)
        //

        extension->CountOnLastRead =
            (LONG)extension->CurrentReadIrp->IoStatus.Information;

        extension->ReadByIsr = 0;

        //
        // By compareing the read buffer base address to the
        // the base address of the interrupt buffer the ISR
        // can determine whether we are using the interrupt
        // buffer or the user buffer.
        //

        extension->ReadBufferBase =
            extension->CurrentReadIrp->AssociatedIrp.SystemBuffer;

        //
        // The current char slot is after the last copied in
        // character.  We know there is always room since we
        // we wouldn't have gotten here if there wasn't.
        //

        extension->CurrentCharSlot = extension->ReadBufferBase +
            extension->CurrentReadIrp->IoStatus.Information;

        //
        // The last position that a character can go is on the
        // last byte of user buffer.  While the actual allocated
        // buffer space may be bigger, we know that there is at
        // least as much as the read length.
        //

        extension->LastCharSlot = extension->ReadBufferBase +
                                      (IoGetCurrentIrpStackLocation(
                                          extension->CurrentReadIrp
                                          )->Parameters.Read.Length
                                       - 1);

        //
        // Mark the irp as being in a cancelable state.
        //

        IoSetCancelRoutine(
            extension->CurrentReadIrp,
            CyyCancelCurrentRead
            );

        //
        // Increment the reference count twice.
        //
        // Once for the Isr owning the irp and once
        // because the cancel routine has a reference
        // to it.
        //

        SERIAL_SET_REFERENCE(
            extension->CurrentReadIrp,
            SERIAL_REF_ISR
            );
        SERIAL_SET_REFERENCE(
            extension->CurrentReadIrp,
            SERIAL_REF_CANCEL
            );

        updateChar->Completed = FALSE;

    } else {

        updateChar->Completed = TRUE;

    }

    return FALSE;

}
//
// We use this structure only to communicate to the synchronization
// routine when we are switching to the resized buffer.
//
typedef struct _SERIAL_RESIZE_PARAMS {
    PCYY_DEVICE_EXTENSION Extension;
    PUCHAR OldBuffer;
    PUCHAR NewBuffer;
    ULONG NewBufferSize;
    ULONG NumberMoved;
    } SERIAL_RESIZE_PARAMS,*PSERIAL_RESIZE_PARAMS;

NTSTATUS
CyyResizeBuffer(
    IN PCYY_DEVICE_EXTENSION Extension
    )

/*++

Routine Description:

    This routine will process the resize buffer request.
    If size requested for the RX buffer is smaller than
    the current buffer then we will simply return
    STATUS_SUCCESS.  (We don't want to make buffers smaller.
    If we did that then we all of a sudden have "overrun"
    problems to deal with as well as flow control to deal
    with - very painful.)  We ignore the TX buffer size
    request since we don't use a TX buffer.

Arguments:

    Extension - Pointer to the device extension for the port.

Return Value:

    STATUS_SUCCESS if everything worked out ok.
    STATUS_INSUFFICIENT_RESOURCES if we couldn't allocate the
    memory for the buffer.

--*/

{

    PSERIAL_QUEUE_SIZE rs = Extension->CurrentReadIrp->AssociatedIrp
                                                       .SystemBuffer;
    PIO_STACK_LOCATION irpSp = IoGetCurrentIrpStackLocation(
                                   Extension->CurrentReadIrp
                                   );
    PVOID newBuffer = irpSp->Parameters.DeviceIoControl.Type3InputBuffer;

    CYY_LOCKED_PAGED_CODE();

    irpSp->Parameters.DeviceIoControl.Type3InputBuffer = NULL;
    Extension->CurrentReadIrp->IoStatus.Information = 0L;
    Extension->CurrentReadIrp->IoStatus.Status = STATUS_SUCCESS;

    if (rs->InSize <= Extension->BufferSize) {

        //
        // Nothing to do.  We don't make buffers smaller.  Just
        // agree with the user.  We must deallocate the memory
        // that was already allocated in the ioctl dispatch routine.
        //

        ExFreePool(newBuffer);

    } else {

        SERIAL_RESIZE_PARAMS rp;
        KIRQL controlIrql;

        //
        // Hmmm, looks like we actually have to go
        // through with this.  We need to move all the
        // data that is in the current buffer into this
        // new buffer.  We'll do this in two steps.
        //
        // First we go up to dispatch level and try to
        // move as much as we can without stopping the
        // ISR from running.  We go up to dispatch level
        // by acquiring the control lock.  We do it at
        // dispatch using the control lock so that:
        //
        //    1) We can't be context switched in the middle
        //       of the move.  Our pointers into the buffer
        //       could be *VERY* stale by the time we got back.
        //
        //    2) We use the control lock since we don't want
        //       some pesky purge irp to come along while
        //       we are trying to move.
        //
        // After the move, but while we still hold the control
        // lock, we synch with the ISR and get those last
        // (hopefully) few characters that have come in since
        // we started the copy.  We switch all of our pointers,
        // counters, and such to point to this new buffer.  NOTE:
        // we need to be careful.  If the buffer we were using
        // was not the default one created when we initialized
        // the device (i.e. it was created via a previous IRP of
        // this type), we should deallocate it.
        //

        rp.Extension = Extension;
        rp.OldBuffer = Extension->InterruptReadBuffer;
        rp.NewBuffer = newBuffer;
        rp.NewBufferSize = rs->InSize;

        KeAcquireSpinLock(
            &Extension->ControlLock,
            &controlIrql
            );

        rp.NumberMoved = CyyMoveToNewIntBuffer(
                             Extension,
                             newBuffer
                             );

        KeSynchronizeExecution(
            Extension->Interrupt,
            CyyUpdateAndSwitchToNew,
            &rp
            );

        KeReleaseSpinLock(
            &Extension->ControlLock,
            controlIrql
            );

        //
        // Free up the memory that the old buffer consumed.
        //

        ExFreePool(rp.OldBuffer);

    }

    return STATUS_SUCCESS;

}

ULONG
CyyMoveToNewIntBuffer(
    PCYY_DEVICE_EXTENSION Extension,
    PUCHAR NewBuffer
    )

/*++

Routine Description:

    This routine is used to copy any characters out of the interrupt
    buffer into the "new" buffer.  It will be reading values that
    are updated with the ISR but this is safe since this value is
    only decremented by synchronization routines.  This routine will
    return the number of characters copied so some other routine
    can call a synchronization routine to update what is seen at
    interrupt level.

Arguments:

    Extension - A pointer to the device extension.
    NewBuffer - Where the characters are to be move to.

Return Value:

    The number of characters that were copied into the user
    buffer.

--*/

{

    ULONG numberOfCharsMoved = Extension->CharsInInterruptBuffer;
    CYY_LOCKED_PAGED_CODE();

    if (numberOfCharsMoved) {

        //
        // This holds the number of characters between the first
        // readable character and the last character we will read or
        // the real physical end of the buffer (not the last readable
        // character).
        //
        ULONG firstTryNumberToGet = (ULONG)(Extension->LastCharSlot -
                                     Extension->FirstReadableChar) + 1;

        if (firstTryNumberToGet >= numberOfCharsMoved) {

            //
            // The characters don't wrap.
            //

            RtlMoveMemory(
                NewBuffer,
                Extension->FirstReadableChar,
                numberOfCharsMoved
                );

            if ((Extension->FirstReadableChar+(numberOfCharsMoved-1)) ==
                Extension->LastCharSlot) {

                Extension->FirstReadableChar = Extension->InterruptReadBuffer;

            } else {

                Extension->FirstReadableChar += numberOfCharsMoved;

            }

        } else {

            //
            // The characters do wrap.  Get up until the end of the buffer.
            //

            RtlMoveMemory(
                NewBuffer,
                Extension->FirstReadableChar,
                firstTryNumberToGet
                );

            //
            // Now get the rest of the characters from the beginning of the
            // buffer.
            //

            RtlMoveMemory(
                NewBuffer+firstTryNumberToGet,
                Extension->InterruptReadBuffer,
                numberOfCharsMoved - firstTryNumberToGet
                );

            Extension->FirstReadableChar = Extension->InterruptReadBuffer +
                                   numberOfCharsMoved - firstTryNumberToGet;

        }

    }

    return numberOfCharsMoved;

}

BOOLEAN
CyyUpdateAndSwitchToNew(
    IN PVOID Context
    )

/*++

Routine Description:

    This routine gets the (hopefully) few characters that
    remain in the interrupt buffer after the first time we tried
    to get them out.

    NOTE: This is called by KeSynchronizeExecution.

Arguments:

    Context - Points to a structure that contains a pointer to the
              device extension, a pointer to the buffer we are moving
              to, and a count of the number of characters
              that we previously copied into the new buffer, and the
              actual size of the new buffer.

Return Value:

    Always FALSE.

--*/

{

    PSERIAL_RESIZE_PARAMS params = Context;
    PCYY_DEVICE_EXTENSION extension = params->Extension;
    ULONG tempCharsInInterruptBuffer = extension->CharsInInterruptBuffer;

    CYY_LOCKED_PAGED_CODE();

    ASSERT(extension->CharsInInterruptBuffer >= params->NumberMoved);

    //
    // We temporarily reduce the chars in interrupt buffer to
    // "fool" the move routine.  We will restore it after the
    // move.
    //

    extension->CharsInInterruptBuffer -= params->NumberMoved;

    if (extension->CharsInInterruptBuffer) {

        CyyMoveToNewIntBuffer(
            extension,
            params->NewBuffer + params->NumberMoved
            );

    }

    extension->CharsInInterruptBuffer = tempCharsInInterruptBuffer;


    extension->LastCharSlot = params->NewBuffer + (params->NewBufferSize - 1);
    extension->FirstReadableChar = params->NewBuffer;
    extension->ReadBufferBase = params->NewBuffer;
    extension->InterruptReadBuffer = params->NewBuffer;
    extension->BufferSize = params->NewBufferSize;

    //
    // We *KNOW* that the new interrupt buffer is larger than the
    // old buffer.  We don't need to worry about it being full.
    //

    extension->CurrentCharSlot = extension->InterruptReadBuffer +
                                 extension->CharsInInterruptBuffer;

    //
    // We set up the default xon/xoff limits.
    //

    extension->HandFlow.XoffLimit = extension->BufferSize >> 3;
    extension->HandFlow.XonLimit = extension->BufferSize >> 1;

    extension->WmiCommData.XoffXmitThreshold = extension->HandFlow.XoffLimit;
    extension->WmiCommData.XonXmitThreshold = extension->HandFlow.XonLimit;

    extension->BufferSizePt8 = ((3*(extension->BufferSize>>2))+
                                   (extension->BufferSize>>4));

    //
    // Since we (essentially) reduced the percentage of the interrupt
    // buffer being full, we need to handle any flow control.
    //

    CyyHandleReducedIntBuffer(extension);

    return FALSE;

}

=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\y\cyyport\cyyutils.c ===
/*--------------------------------------------------------------------------
*	
*   Copyright (C) Cyclades Corporation, 1996-2001.
*   All rights reserved.
*	
*   Cyclom-Y Port Driver
*	
*   This file:      cyyutils.c
*	
*   Description:    This module contains the code related to queueing
*                   and completion manipulation on requests.
*
*   Notes:          This code supports Windows 2000 and Windows XP,
*                   x86 and IA64 processors.
*	
*   Complies with Cyclades SW Coding Standard rev 1.3.
*	
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*	Change History
*
*--------------------------------------------------------------------------
*
*
*--------------------------------------------------------------------------
*/


#include "precomp.h"

VOID
CyyRundownIrpRefs(
    IN PIRP *CurrentOpIrp,
    IN PKTIMER IntervalTimer,
    IN PKTIMER TotalTimer,
    IN PCYY_DEVICE_EXTENSION PDevExt
    );

#ifdef ALLOC_PRAGMA
#pragma alloc_text(PAGESER,CyyGetNextIrp)
#pragma alloc_text(PAGESER, CyyGetNextIrpLocked)
#pragma alloc_text(PAGESER,CyyTryToCompleteCurrent)
#pragma alloc_text(PAGESER,CyyStartOrQueue)
#pragma alloc_text(PAGESER,CyyCancelQueued)
#pragma alloc_text(PAGESER,CyyCompleteIfError)
#pragma alloc_text(PAGESER,CyyRundownIrpRefs)

//#pragma alloc_text(PAGESRP0, CyyLogError) //It can be called at raised IRQL 
#pragma alloc_text(PAGESRP0, CyyMarkHardwareBroken)
#endif

static const PHYSICAL_ADDRESS CyyPhysicalZero = {0};


VOID
CyyKillAllReadsOrWrites(
    IN PDEVICE_OBJECT DeviceObject,
    IN PLIST_ENTRY QueueToClean,
    IN PIRP *CurrentOpIrp
    )
/*--------------------------------------------------------------------------
    CyyKillAllReadsOrWrites()
    
    Routine Description: This function is used to cancel all queued and
    the current irps for reads or for writes.

    Arguments:

    DeviceObject - A pointer to the serial device object.
    QueueToClean - A pointer to the queue which we're going to clean out.
    CurrentOpIrp - Pointer to a pointer to the current irp.

    Return Value: None.
--------------------------------------------------------------------------*/
{
    KIRQL cancelIrql;
    PDRIVER_CANCEL cancelRoutine;

    // Acquire cancel spin lock to prevent irps from moving around.
    IoAcquireCancelSpinLock(&cancelIrql);

    // Clean the list from back to front.

    while (!IsListEmpty(QueueToClean)) {
        PIRP currentLastIrp = CONTAINING_RECORD(QueueToClean->Blink,
                                  IRP,Tail.Overlay.ListEntry);

        RemoveEntryList(QueueToClean->Blink);
        cancelRoutine = currentLastIrp->CancelRoutine;
        currentLastIrp->CancelIrql = cancelIrql;
        currentLastIrp->CancelRoutine = NULL;
        currentLastIrp->Cancel = TRUE;

        cancelRoutine(DeviceObject,currentLastIrp);
        IoAcquireCancelSpinLock(&cancelIrql);
    }

    // The queue is clean.  Now go after the current if it's there.

    if (*CurrentOpIrp) {
        cancelRoutine = (*CurrentOpIrp)->CancelRoutine;
        (*CurrentOpIrp)->Cancel = TRUE;
	
        // If the current irp is not in a cancelable state
        // then it *will* try to enter one and the above
        // assignment will kill it.  If it already is in
        // a cancelable state then the following will kill it.

        if (cancelRoutine) {
            (*CurrentOpIrp)->CancelRoutine = NULL;
            (*CurrentOpIrp)->CancelIrql = cancelIrql;
	    
            // mark it as canceled and call the cancel routine for it
            cancelRoutine(DeviceObject,*CurrentOpIrp);
        } else {
            IoReleaseCancelSpinLock(cancelIrql);
        }
    } else {
        IoReleaseCancelSpinLock(cancelIrql);
    }
}

VOID
CyyGetNextIrp(
    IN PIRP *CurrentOpIrp,
    IN PLIST_ENTRY QueueToProcess,
    OUT PIRP *NextIrp,
    IN BOOLEAN CompleteCurrent,
    IN PCYY_DEVICE_EXTENSION extension
    )
/*--------------------------------------------------------------------------
    CyyGetNextIrp()
    
    Routine Description: This function is used to make the head of the
    particular queue the current irp.  It also completes the what
    was the old current irp if desired.

    Arguments:

    CurrentOpIrp - Pointer to a pointer to the currently active
                   irp for the particular work list.  Note that
                   this item is not actually part of the list.
    QueueToProcess - The list to pull the new item off of.
    NextIrp - The next Irp to process.  Note that CurrentOpIrp
              will be set to this value under protection of the
              cancel spin lock.  However, if *NextIrp is NULL when
              this routine returns, it is not necessaryly true the
              what is pointed to by CurrentOpIrp will also be NULL.
              The reason for this is that if the queue is empty
              when we hold the cancel spin lock, a new irp may come
              in immediately after we release the lock.

    CompleteCurrent - If TRUE then this routine will complete the
                      irp pointed to by the pointer argument
                      CurrentOpIrp.

    Return Value: None.
--------------------------------------------------------------------------*/
{
    KIRQL oldIrql;
    CYY_LOCKED_PAGED_CODE();

    IoAcquireCancelSpinLock(&oldIrql);
    CyyGetNextIrpLocked(CurrentOpIrp, QueueToProcess, NextIrp,
                        CompleteCurrent, extension, oldIrql);

    //TODO FANNY: CHECK IF REPLACING CODE THAT WAS HERE BY 
    //CyyGetNextIrpLocked MY FIX FOR THE BUG FOUND IN MODEM SHARE
    //WAS OVERWRITTEN.
}


VOID
CyyGetNextIrpLocked(
    IN PIRP *CurrentOpIrp,
    IN PLIST_ENTRY QueueToProcess,
    OUT PIRP *NextIrp,
    IN BOOLEAN CompleteCurrent,
    IN PCYY_DEVICE_EXTENSION extension,
    IN KIRQL OldIrql
    )

/*++

Routine Description:

    This function is used to make the head of the particular
    queue the current irp.  It also completes the what
    was the old current irp if desired.  The difference between
    this and CyyGetNextIrp() is that for this we assume the caller
    holds the cancel spinlock and we should release it when we're done.

Arguments:

    CurrentOpIrp - Pointer to a pointer to the currently active
                   irp for the particular work list.  Note that
                   this item is not actually part of the list.

    QueueToProcess - The list to pull the new item off of.

    NextIrp - The next Irp to process.  Note that CurrentOpIrp
              will be set to this value under protection of the
              cancel spin lock.  However, if *NextIrp is NULL when
              this routine returns, it is not necessaryly true the
              what is pointed to by CurrentOpIrp will also be NULL.
              The reason for this is that if the queue is empty
              when we hold the cancel spin lock, a new irp may come
              in immediately after we release the lock.

    CompleteCurrent - If TRUE then this routine will complete the
                      irp pointed to by the pointer argument
                      CurrentOpIrp.

    OldIrql - IRQL which the cancel spinlock was acquired at and what we
              should restore it to.

Return Value:

    None.

--*/

{

    PIRP oldIrp;

    CYY_LOCKED_PAGED_CODE();


    oldIrp = *CurrentOpIrp;

#if DBG
    if (oldIrp) {

        if (CompleteCurrent) {

            ASSERT(!oldIrp->CancelRoutine);

        }

    }
#endif

    //
    // Check to see if there is a new irp to start up.
    //

    if (!IsListEmpty(QueueToProcess)) {

        PLIST_ENTRY headOfList;

        headOfList = RemoveHeadList(QueueToProcess);

        *CurrentOpIrp = CONTAINING_RECORD(
                            headOfList,
                            IRP,
                            Tail.Overlay.ListEntry
                            );

        IoSetCancelRoutine(
            *CurrentOpIrp,
            NULL
            );

    } else {

        *CurrentOpIrp = NULL;

    }

    *NextIrp = *CurrentOpIrp;
    IoReleaseCancelSpinLock(OldIrql);

    if (CompleteCurrent) {

        if (oldIrp) {

            CyyCompleteRequest(extension, oldIrp, IO_SERIAL_INCREMENT);
        }
    }
}


VOID
CyyTryToCompleteCurrent(
    IN PCYY_DEVICE_EXTENSION Extension,
    IN PKSYNCHRONIZE_ROUTINE SynchRoutine OPTIONAL,
    IN KIRQL IrqlForRelease,
    IN NTSTATUS StatusToUse,
    IN PIRP *CurrentOpIrp,
    IN PLIST_ENTRY QueueToProcess OPTIONAL,
    IN PKTIMER IntervalTimer OPTIONAL,
    IN PKTIMER TotalTimer OPTIONAL,
    IN PSERIAL_START_ROUTINE Starter OPTIONAL,
    IN PSERIAL_GET_NEXT_ROUTINE GetNextIrp OPTIONAL,
    IN LONG RefType
    )
/*--------------------------------------------------------------------------
    CyyTryToCompleteCurrent()
    
    Routine Description: This routine attempts to kill all of the reasons
    there are references on the current read/write.  If everything can be
    killed it will complete this read/write and try to start another.
    NOTE: This routine assumes that the cancel spinlock is being held.

    Arguments:

    Extension - Simply a pointer to the device extension.
    SynchRoutine - A routine that will synchronize with the isr
                   and attempt to remove the knowledge of the
                   current irp from the isr.  NOTE: This pointer
                   can be null.
    IrqlForRelease - This routine is called with the cancel spinlock held.
                     This is the irql that was current when the cancel
                     spinlock was acquired.
    StatusToUse - The irp's status field will be set to this value, if
                  this routine can complete the irp.

    Return Value: None.
--------------------------------------------------------------------------*/
{

    CYY_LOCKED_PAGED_CODE();
   
    // We can decrement the reference to "remove" the fact
    // that the caller no longer will be accessing this irp.

    SERIAL_CLEAR_REFERENCE(*CurrentOpIrp,RefType);

    if (SynchRoutine) {
        KeSynchronizeExecution(Extension->Interrupt,SynchRoutine,Extension);
    }

    // Try to run down all other references to this irp.
    CyyRundownIrpRefs(CurrentOpIrp,IntervalTimer,TotalTimer,Extension);

    // See if the ref count is zero after trying to kill everybody else.

    if (!SERIAL_REFERENCE_COUNT(*CurrentOpIrp)) {
        PIRP newIrp;

        // The ref count was zero so we should complete this request.
        // The following call will also cause the current irp to be
        // completed.

        (*CurrentOpIrp)->IoStatus.Status = StatusToUse;

        if (StatusToUse == STATUS_CANCELLED) {
            (*CurrentOpIrp)->IoStatus.Information = 0;
        }

        if (GetNextIrp) {
            IoReleaseCancelSpinLock(IrqlForRelease);
            GetNextIrp(CurrentOpIrp,QueueToProcess,&newIrp,TRUE
                        ,Extension
            );

            if (newIrp) {
                Starter(Extension);

            }
        } else {
            PIRP oldIrp = *CurrentOpIrp;

            // There was no get next routine.  We will simply complete
            // the irp.  We should make sure that we null out the
            // pointer to the pointer to this irp.

            *CurrentOpIrp = NULL;

            IoReleaseCancelSpinLock(IrqlForRelease);
            CyyCompleteRequest(Extension, oldIrp, IO_SERIAL_INCREMENT);
        }
    } else {
        IoReleaseCancelSpinLock(IrqlForRelease);
    }
}

VOID
CyyRundownIrpRefs(
    IN PIRP *CurrentOpIrp,
    IN PKTIMER IntervalTimer OPTIONAL,
    IN PKTIMER TotalTimer OPTIONAL,
    IN PCYY_DEVICE_EXTENSION PDevExt
    )

/*++

Routine Description:

    This routine runs through the various items that *could*
    have a reference to the current read/write.  It try's to kill
    the reason.  If it does succeed in killing the reason it
    will decrement the reference count on the irp.

    NOTE: This routine assumes that it is called with the cancel
          spin lock held.

Arguments:

    CurrentOpIrp - Pointer to a pointer to current irp for the
                   particular operation.

    IntervalTimer - Pointer to the interval timer for the operation.
                    NOTE: This could be null.

    TotalTimer - Pointer to the total timer for the operation.
                 NOTE: This could be null.

    PDevExt - Pointer to device extension  

Return Value:

    None.

--*/
{

    CYY_LOCKED_PAGED_CODE();

    //
    // This routine is called with the cancel spin lock held
    // so we know only one thread of execution can be in here
    // at one time.
    //

    //
    // First we see if there is still a cancel routine.  If
    // so then we can decrement the count by one.
    //

    if ((*CurrentOpIrp)->CancelRoutine) {

        SERIAL_CLEAR_REFERENCE(
            *CurrentOpIrp,
            SERIAL_REF_CANCEL
            );

        IoSetCancelRoutine(
            *CurrentOpIrp,
            NULL
            );

    }

    if (IntervalTimer) {

        //
        // Try to cancel the operations interval timer.  If the operation
        // returns true then the timer did have a reference to the
        // irp.  Since we've canceled this timer that reference is
        // no longer valid and we can decrement the reference count.
        //
        // If the cancel returns false then this means either of two things:
        //
        // a) The timer has already fired.
        //
        // b) There never was an interval timer.
        //
        // In the case of "b" there is no need to decrement the reference
        // count since the "timer" never had a reference to it.
        //
        // In the case of "a", then the timer itself will be coming
        // along and decrement it's reference.  Note that the caller
        // of this routine might actually be the this timer, but it
        // has already decremented the reference.
        //

        if (CyyCancelTimer(IntervalTimer, PDevExt)) {

            SERIAL_CLEAR_REFERENCE(
                *CurrentOpIrp,
                SERIAL_REF_INT_TIMER
                );

        }

    }

    if (TotalTimer) {

        //
        // Try to cancel the operations total timer.  If the operation
        // returns true then the timer did have a reference to the
        // irp.  Since we've canceled this timer that reference is
        // no longer valid and we can decrement the reference count.
        //
        // If the cancel returns false then this means either of two things:
        //
        // a) The timer has already fired.
        //
        // b) There never was an total timer.
        //
        // In the case of "b" there is no need to decrement the reference
        // count since the "timer" never had a reference to it.
        //
        // In the case of "a", then the timer itself will be coming
        // along and decrement it's reference.  Note that the caller
        // of this routine might actually be the this timer, but it
        // has already decremented the reference.
        //

        if (CyyCancelTimer(TotalTimer, PDevExt)) {

            SERIAL_CLEAR_REFERENCE(
                *CurrentOpIrp,
                SERIAL_REF_TOTAL_TIMER
                );

        }

    }

}

NTSTATUS
CyyStartOrQueue(
    IN PCYY_DEVICE_EXTENSION Extension,
    IN PIRP Irp,
    IN PLIST_ENTRY QueueToExamine,
    IN PIRP *CurrentOpIrp,
    IN PSERIAL_START_ROUTINE Starter
    )
/*--------------------------------------------------------------------------
    CyyStartOrQueue()
    
    Routine Description: This routine either starts or queues requests to
    the driver.

    Arguments:

    Extension - Points to the serial device extension.
    Irp - The irp. The irp will be marked pending.
    QueueToExamine - The queue the irp will be placed on.
    CurrentOpIrp - Pointer to a pointer to the irp that is current
	for the queue.  The pointer pointed to will be set with to Irp if
	what CurrentOpIrp points to is NULL.
    Starter - The routine to call if the queue is empty.

    Return Value:

    This routine will return STATUS_PENDING if the queue is
    not empty.  Otherwise, it will return the status returned
    from the starter routine (or cancel, if the cancel bit is
    on in the irp).
--------------------------------------------------------------------------*/
{
    KIRQL oldIrql;

    CYY_LOCKED_PAGED_CODE();

    IoAcquireCancelSpinLock(&oldIrql);

    // If this is a write irp then take the amount of characters
    // to write and add it to the count of characters to write.
    
    if (IoGetCurrentIrpStackLocation(Irp)->MajorFunction == IRP_MJ_WRITE) {
        Extension->TotalCharsQueued += IoGetCurrentIrpStackLocation(Irp)->
						Parameters.Write.Length;
    } else {
    	if ((IoGetCurrentIrpStackLocation(Irp)->MajorFunction
                == IRP_MJ_DEVICE_CONTROL) &&
               ((IoGetCurrentIrpStackLocation(Irp)
                 ->Parameters.DeviceIoControl.IoControlCode ==
                 IOCTL_SERIAL_IMMEDIATE_CHAR) ||
                (IoGetCurrentIrpStackLocation(Irp)
                 ->Parameters.DeviceIoControl.IoControlCode ==
                 IOCTL_SERIAL_XOFF_COUNTER))) {

	    Extension->TotalCharsQueued++;
    	}
    }

    if ((IsListEmpty(QueueToExamine)) && !(*CurrentOpIrp)) {
        // no current operation.  Mark this one as current and start it up.
        *CurrentOpIrp = Irp;
        IoReleaseCancelSpinLock(oldIrql);
        return Starter(Extension);
    } else {
        // We don't know how long the irp will be in the queue.
        if (Irp->Cancel) {
            PIO_STACK_LOCATION irpSp = IoGetCurrentIrpStackLocation(Irp);
            IoReleaseCancelSpinLock(oldIrql);
            if (irpSp->Parameters.DeviceIoControl.IoControlCode ==
                   IOCTL_SERIAL_SET_QUEUE_SIZE) {
               //
               // We shoved the pointer to the memory into the
               // the type 3 buffer pointer which we KNOW we
               // never use.
               //

               ASSERT(irpSp->Parameters.DeviceIoControl.Type3InputBuffer);

               ExFreePool(irpSp->Parameters.DeviceIoControl.Type3InputBuffer);

               irpSp->Parameters.DeviceIoControl.Type3InputBuffer = NULL;
            }

            Irp->IoStatus.Status = STATUS_CANCELLED;

            CyyCompleteRequest(Extension, Irp, 0);

            return STATUS_CANCELLED;
        } else {
            Irp->IoStatus.Status = STATUS_PENDING;
            IoMarkIrpPending(Irp);
            InsertTailList(QueueToExamine,&Irp->Tail.Overlay.ListEntry);
            IoSetCancelRoutine(Irp,CyyCancelQueued);
            IoReleaseCancelSpinLock(oldIrql);
            return STATUS_PENDING;
        }
    }
}

VOID
CyyCancelQueued(
    PDEVICE_OBJECT DeviceObject,
    PIRP Irp
    )
/*--------------------------------------------------------------------------
    CyyCancelQueued()
    
    Routine Description: This routine is used to cancel Irps that currently
    reside on a queue.

    Arguments:

    DeviceObject - Pointer to the device object for this device

    Irp - Pointer to the IRP to be canceled.

    Return Value: None.
--------------------------------------------------------------------------*/
{
    PCYY_DEVICE_EXTENSION extension = DeviceObject->DeviceExtension;
    PIO_STACK_LOCATION irpSp = IoGetCurrentIrpStackLocation(Irp);

    CYY_LOCKED_PAGED_CODE();

    Irp->IoStatus.Status = STATUS_CANCELLED;
    Irp->IoStatus.Information = 0;

    RemoveEntryList(&Irp->Tail.Overlay.ListEntry);


    if (irpSp->MajorFunction == IRP_MJ_WRITE) {
	// write.  subtract from the count of characters to write.
        extension->TotalCharsQueued -= irpSp->Parameters.Write.Length;
    } else if (irpSp->MajorFunction == IRP_MJ_DEVICE_CONTROL) {
        if ((irpSp->Parameters.DeviceIoControl.IoControlCode ==
             IOCTL_SERIAL_IMMEDIATE_CHAR) ||
            (irpSp->Parameters.DeviceIoControl.IoControlCode ==
             IOCTL_SERIAL_XOFF_COUNTER)) {

	    // immediate. Decrement the count of chars queued.
            extension->TotalCharsQueued--;
        } else if (irpSp->Parameters.DeviceIoControl.IoControlCode ==
                   IOCTL_SERIAL_SET_QUEUE_SIZE) {

	    // resize. Deallocate the pool passed "resizing" routine.
            // We shoved the pointer to the memory into the
            // the type 3 buffer pointer which we KNOW we never use.

            ASSERT(irpSp->Parameters.DeviceIoControl.Type3InputBuffer);
            ExFreePool(irpSp->Parameters.DeviceIoControl.Type3InputBuffer);
            irpSp->Parameters.DeviceIoControl.Type3InputBuffer = NULL;
        }
    }
    IoReleaseCancelSpinLock(Irp->CancelIrql);

    CyyCompleteRequest(extension, Irp, IO_SERIAL_INCREMENT);
}

NTSTATUS
CyyCompleteIfError(
    PDEVICE_OBJECT DeviceObject,
    PIRP Irp
    )
/*--------------------------------------------------------------------------
    CyyCompleteIfError()
    
    Routine Description: If the current irp is not an
    IOCTL_SERIAL_GET_COMMSTATUS request and there is an error and the
    application requested abort on errors, then cancel the irp.

    Arguments:

    DeviceObject - Pointer to the device object for this device
    Irp - Pointer to the IRP to test.

    Return Value:

    STATUS_SUCCESS or STATUS_CANCELLED.
--------------------------------------------------------------------------*/
{
    PCYY_DEVICE_EXTENSION extension = DeviceObject->DeviceExtension;
    NTSTATUS status = STATUS_SUCCESS;

    CYY_LOCKED_PAGED_CODE();

    if ((extension->HandFlow.ControlHandShake &
         SERIAL_ERROR_ABORT) && extension->ErrorWord) {

        PIO_STACK_LOCATION irpSp = IoGetCurrentIrpStackLocation(Irp);

        // There is a current error in the driver.  No requests should
        // come through except for the GET_COMMSTATUS.

        if ((irpSp->MajorFunction != IRP_MJ_DEVICE_CONTROL) ||
            (irpSp->Parameters.DeviceIoControl.IoControlCode !=
             IOCTL_SERIAL_GET_COMMSTATUS)) {

            status = STATUS_CANCELLED;
            Irp->IoStatus.Status = STATUS_CANCELLED;
            Irp->IoStatus.Information = 0;

            CyyCompleteRequest(extension, Irp, 0);
        }
    }
    return status;
}

VOID
CyyFilterCancelQueued(IN PDEVICE_OBJECT PDevObj, IN PIRP PIrp)
/*++

Routine Description:

    This routine will be used cancel irps on the stalled queue.
    
Arguments:

    PDevObj - Pointer to the device object.
    
    PIrp - Pointer to the Irp to cancel

Return Value:

    None.

--*/
{
   PCYY_DEVICE_EXTENSION pDevExt = PDevObj->DeviceExtension;
   PIO_STACK_LOCATION pIrpSp = IoGetCurrentIrpStackLocation(PIrp);

   PIrp->IoStatus.Status = STATUS_CANCELLED;
   PIrp->IoStatus.Information = 0;

   RemoveEntryList(&PIrp->Tail.Overlay.ListEntry);

   IoReleaseCancelSpinLock(PIrp->CancelIrql);
}


VOID
CyyKillAllStalled(IN PDEVICE_OBJECT PDevObj)
{
   KIRQL cancelIrql;
   PDRIVER_CANCEL cancelRoutine;
   PCYY_DEVICE_EXTENSION pDevExt = PDevObj->DeviceExtension;

   IoAcquireCancelSpinLock(&cancelIrql);

   while (!IsListEmpty(&pDevExt->StalledIrpQueue)) {

      PIRP currentLastIrp = CONTAINING_RECORD(pDevExt->StalledIrpQueue.Blink,
                                              IRP, Tail.Overlay.ListEntry);

      RemoveEntryList(pDevExt->StalledIrpQueue.Blink);

      cancelRoutine = currentLastIrp->CancelRoutine;
      currentLastIrp->CancelIrql = cancelIrql;
      currentLastIrp->CancelRoutine = NULL;
      currentLastIrp->Cancel = TRUE;

      cancelRoutine(PDevObj, currentLastIrp);

      IoAcquireCancelSpinLock(&cancelIrql);
   }

   IoReleaseCancelSpinLock(cancelIrql);
}

NTSTATUS
CyyFilterIrps(IN PIRP PIrp, IN PCYY_DEVICE_EXTENSION PDevExt)
/*++

Routine Description:

    This routine will be used to approve irps for processing.
    If an irp is approved, success will be returned.  If not,
    the irp will be queued or rejected outright.  The IoStatus struct
    and return value will appropriately reflect the actions taken.
    
Arguments:

    PIrp - Pointer to the Irp to cancel
    
    PDevExt - Pointer to the device extension

Return Value:

    None.

--*/
{
   PIO_STACK_LOCATION pIrpStack;
   KIRQL oldIrqlFlags;

   pIrpStack = IoGetCurrentIrpStackLocation(PIrp);

   KeAcquireSpinLock(&PDevExt->FlagsLock, &oldIrqlFlags);

   if ((PDevExt->DevicePNPAccept == CYY_PNPACCEPT_OK)
       && ((PDevExt->Flags & CYY_FLAGS_BROKENHW) == 0)) {
      KeReleaseSpinLock(&PDevExt->FlagsLock, oldIrqlFlags);
      return STATUS_SUCCESS;
   }

   if ((PDevExt->DevicePNPAccept & CYY_PNPACCEPT_REMOVING)
       || (PDevExt->Flags & CYY_FLAGS_BROKENHW)
       || (PDevExt->DevicePNPAccept & CYY_PNPACCEPT_SURPRISE_REMOVING)) {

      KeReleaseSpinLock(&PDevExt->FlagsLock, oldIrqlFlags);

      //
      // Accept all PNP IRP's -- we assume PNP can synchronize itself
      //

      if (pIrpStack->MajorFunction == IRP_MJ_PNP) {
         return STATUS_SUCCESS;
      }

      PIrp->IoStatus.Status = STATUS_DELETE_PENDING;
      return STATUS_DELETE_PENDING;
   }

   if (PDevExt->DevicePNPAccept & CYY_PNPACCEPT_STOPPING) {
       KIRQL oldIrql;

       KeReleaseSpinLock(&PDevExt->FlagsLock, oldIrqlFlags);


      //
      // Accept all PNP IRP's -- we assume PNP can synchronize itself
      //

      if (pIrpStack->MajorFunction == IRP_MJ_PNP) {
         return STATUS_SUCCESS;
      }

      IoAcquireCancelSpinLock(&oldIrql);

      if (PIrp->Cancel) {
         IoReleaseCancelSpinLock(oldIrql);
         PIrp->IoStatus.Status = STATUS_CANCELLED;
         return STATUS_CANCELLED;
      } else {
         //
         // Mark the Irp as pending
         //

         PIrp->IoStatus.Status = STATUS_PENDING;
         IoMarkIrpPending(PIrp);

         //
         // Queue up the IRP
         //

         InsertTailList(&PDevExt->StalledIrpQueue,
                        &PIrp->Tail.Overlay.ListEntry);

         IoSetCancelRoutine(PIrp, CyyFilterCancelQueued);
         IoReleaseCancelSpinLock(oldIrql);
         return STATUS_PENDING;
      }
   }

   KeReleaseSpinLock(&PDevExt->FlagsLock, oldIrqlFlags);

   return STATUS_SUCCESS;
}

VOID
CyyUnstallIrps(IN PCYY_DEVICE_EXTENSION PDevExt)
/*++

Routine Description:

    This routine will be used to restart irps temporarily stalled on
    the stall queue due to a stop or some such nonsense.
    
Arguments:

    PDevExt - Pointer to the device extension

Return Value:

    None.

--*/
{
   PLIST_ENTRY pIrpLink;
   PIRP pIrp;
   PIO_STACK_LOCATION pIrpStack;
   PDEVICE_OBJECT pDevObj;
   PDRIVER_OBJECT pDrvObj;
   KIRQL oldIrql;

   CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyyUnstallIrps(%X)\n", PDevExt);
   IoAcquireCancelSpinLock(&oldIrql);

   pIrpLink = PDevExt->StalledIrpQueue.Flink;

   while (pIrpLink != &PDevExt->StalledIrpQueue) {
      pIrp = CONTAINING_RECORD(pIrpLink, IRP, Tail.Overlay.ListEntry);
      RemoveEntryList(&pIrp->Tail.Overlay.ListEntry);

      pIrpStack = IoGetCurrentIrpStackLocation(pIrp);
      pDevObj = pIrpStack->DeviceObject;
      pDrvObj = pDevObj->DriverObject;
      IoSetCancelRoutine(pIrp, NULL);
      IoReleaseCancelSpinLock(oldIrql);

      CyyDbgPrintEx(CYYPNPPOWER, "Unstalling Irp 0x%x with 0x%x\n",
                                     pIrp, pIrpStack->MajorFunction);

      pDrvObj->MajorFunction[pIrpStack->MajorFunction](pDevObj, pIrp);

      IoAcquireCancelSpinLock(&oldIrql);
      pIrpLink = PDevExt->StalledIrpQueue.Flink;
   }

   IoReleaseCancelSpinLock(oldIrql);

   CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyyUnstallIrps\n");
}

NTSTATUS
CyyIRPPrologue(IN PIRP PIrp, IN PCYY_DEVICE_EXTENSION PDevExt)
/*++

Routine Description:

   This function must be called at any IRP dispatch entry point.  It,
   with CyyIRPEpilogue(), keeps track of all pending IRP's for the given
   PDevObj.
   
Arguments:

   PDevObj - Pointer to the device object we are tracking pending IRP's for.

Return Value:

    Tentative status of the Irp.

--*/
{
   InterlockedIncrement(&PDevExt->PendingIRPCnt);

   return CyyFilterIrps(PIrp, PDevExt);
}

VOID
CyyIRPEpilogue(IN PCYY_DEVICE_EXTENSION PDevExt)
/*++

Routine Description:

   This function must be called at any IRP dispatch entry point.  It,
   with CyyIRPPrologue(), keeps track of all pending IRP's for the given
   PDevObj.
   
Arguments:

   PDevObj - Pointer to the device object we are tracking pending IRP's for.

Return Value:

   None.

--*/
{
   LONG pendingCnt;

   pendingCnt = InterlockedDecrement(&PDevExt->PendingIRPCnt);

   ASSERT(pendingCnt >= 0);

   if (pendingCnt == 0) {
      KeSetEvent(&PDevExt->PendingIRPEvent, IO_NO_INCREMENT, FALSE);
   }
}

BOOLEAN
CyyInsertQueueDpc(IN PRKDPC PDpc, IN PVOID Sarg1, IN PVOID Sarg2,
                  IN PCYY_DEVICE_EXTENSION PDevExt)
/*++

Routine Description:

   This function must be called to queue DPC's for the serial driver.
   
Arguments:

   PDpc thru Sarg2  - Standard args to KeInsertQueueDpc()
   
   PDevExt - Pointer to the device extension for the device that needs to
             queue a DPC

Return Value:

   Kicks up return value from KeInsertQueueDpc()

--*/
{
   BOOLEAN queued;

   InterlockedIncrement(&PDevExt->DpcCount);
   LOGENTRY(LOG_CNT, 'DpI1', PDpc, PDevExt->DpcCount, 0);   // Added in build 2128

   queued = KeInsertQueueDpc(PDpc, Sarg1, Sarg2);

   if (!queued) {
      ULONG pendingCnt;

      pendingCnt = InterlockedDecrement(&PDevExt->DpcCount);
//      LOGENTRY(LOG_CNT, 'DpD1', PDpc, PDevExt->DpcCount, 0);  Added in build 2128

      if (pendingCnt == 0) {
         KeSetEvent(&PDevExt->PendingDpcEvent, IO_NO_INCREMENT, FALSE);
         LOGENTRY(LOG_CNT, 'DpF1', PDpc, PDevExt->DpcCount, 0); // Added in build 2128
      }
   }

#if 0 // DBG
   if (queued) {
      int i;

      for (i = 0; i < MAX_DPC_QUEUE; i++) {
                     if (PDevExt->DpcQueued[i].Dpc == PDpc) {
                        PDevExt->DpcQueued[i].QueuedCount++;
                        break;
                     }
      }

      ASSERT(i < MAX_DPC_QUEUE);
   }
#endif

   return queued;
}


BOOLEAN
CyySetTimer(IN PKTIMER Timer, IN LARGE_INTEGER DueTime,
            IN PKDPC Dpc OPTIONAL, IN PCYY_DEVICE_EXTENSION PDevExt)
/*++

Routine Description:

   This function must be called to set timers for the serial driver.
   
Arguments:

   Timer - pointer to timer dispatcher object
   
   DueTime - time at which the timer should expire
   
   Dpc - option Dpc
   
   PDevExt - Pointer to the device extension for the device that needs to
             set a timer

Return Value:

   Kicks up return value from KeSetTimer()

--*/
{
   BOOLEAN set;

   InterlockedIncrement(&PDevExt->DpcCount);
   LOGENTRY(LOG_CNT, 'DpI2', Dpc, PDevExt->DpcCount, 0);    // Added in build 2128

   set = KeSetTimer(Timer, DueTime, Dpc);

   if (set) {
      InterlockedDecrement(&PDevExt->DpcCount);
//      LOGENTRY(LOG_CNT, 'DpD2', Dpc, PDevExt->DpcCount, 0);   // Added in build 2128
   }

#if 0 // DBG
   if (set) {
      int i;

      for (i = 0; i < MAX_DPC_QUEUE; i++) {
                     if (PDevExt->DpcQueued[i].Dpc == Dpc) {
                        PDevExt->DpcQueued[i].QueuedCount++;
                        break;
                     }
      }

      ASSERT(i < MAX_DPC_QUEUE);
   }
#endif

   return set;
}


BOOLEAN
CyyCancelTimer(IN PKTIMER Timer, IN PCYY_DEVICE_EXTENSION PDevExt)
/*++

Routine Description:

   This function must be called to cancel timers for the serial driver.
   
Arguments:

   Timer - pointer to timer dispatcher object
   
   PDevExt - Pointer to the device extension for the device that needs to
             set a timer

Return Value:

  True if timer was cancelled

--*/
{
   BOOLEAN cancelled;

   cancelled = KeCancelTimer(Timer);

   if (cancelled) {
      CyyDpcEpilogue(PDevExt, Timer->Dpc);
   }

   return cancelled;
}


VOID
CyyDpcEpilogue(IN PCYY_DEVICE_EXTENSION PDevExt, PKDPC PDpc)
/*++

Routine Description:

   This function must be called at the end of every dpc function.
   
Arguments:

   PDevObj - Pointer to the device object we are tracking dpc's for.

Return Value:

   None.

--*/
{
   LONG pendingCnt;
#if 1 // !DBG
   UNREFERENCED_PARAMETER(PDpc);
#endif

   pendingCnt = InterlockedDecrement(&PDevExt->DpcCount);
//   LOGENTRY(LOG_CNT, 'DpD3', PDpc, PDevExt->DpcCount, 0); Added in build 2128

   ASSERT(pendingCnt >= 0);

#if 0 //DBG
{
      int i;

      for (i = 0; i < MAX_DPC_QUEUE; i++) {
                     if (PDevExt->DpcQueued[i].Dpc == PDpc) {
                        PDevExt->DpcQueued[i].FlushCount++;

                        ASSERT(PDevExt->DpcQueued[i].QueuedCount >=
                               PDevExt->DpcQueued[i].FlushCount);
                        break;
                     }
      }

      ASSERT(i < MAX_DPC_QUEUE);
   }
#endif

   if (pendingCnt == 0) {
      KeSetEvent(&PDevExt->PendingDpcEvent, IO_NO_INCREMENT, FALSE);
      LOGENTRY(LOG_CNT, 'DpF2', PDpc, PDevExt->DpcCount, 0);    // Added in build 2128
   }
}



VOID
CyyUnlockPages(IN PKDPC PDpc, IN PVOID PDeferredContext,
               IN PVOID PSysContext1, IN PVOID PSysContext2)
/*++

Routine Description:

   This function is a DPC routine queue from the ISR if he released the
   last lock on pending DPC's.
   
Arguments:

   PDpdc, PSysContext1, PSysContext2 -- not used
   
   PDeferredContext -- Really the device extension

Return Value:

   None.

--*/
{
   PCYY_DEVICE_EXTENSION pDevExt
      = (PCYY_DEVICE_EXTENSION)PDeferredContext;

   UNREFERENCED_PARAMETER(PDpc);
   UNREFERENCED_PARAMETER(PSysContext1);
   UNREFERENCED_PARAMETER(PSysContext2);

   KeSetEvent(&pDevExt->PendingDpcEvent, IO_NO_INCREMENT, FALSE);
}


NTSTATUS
CyyIoCallDriver(PCYY_DEVICE_EXTENSION PDevExt, PDEVICE_OBJECT PDevObj,
                PIRP PIrp)
/*++

Routine Description:

   This function must be called instead of IoCallDriver.  It automatically
   updates Irp tracking for PDevObj.
   
Arguments:
   PDevExt - Device extension attached to PDevObj
   
   PDevObj - Pointer to the device object we are tracking pending IRP's for.
   
   PIrp - Pointer to the Irp we are passing to the next driver.

Return Value:

   None.

--*/
{
   NTSTATUS status;

   status = IoCallDriver(PDevObj, PIrp);
   CyyIRPEpilogue(PDevExt);
   return status;
}



NTSTATUS
CyyPoCallDriver(PCYY_DEVICE_EXTENSION PDevExt, PDEVICE_OBJECT PDevObj,
                PIRP PIrp)
/*++

Routine Description:

   This function must be called instead of PoCallDriver.  It automatically
   updates Irp tracking for PDevObj.
   
Arguments:
   PDevExt - Device extension attached to PDevObj
   
   PDevObj - Pointer to the device object we are tracking pending IRP's for.
   
   PIrp - Pointer to the Irp we are passing to the next driver.

Return Value:

   None.

--*/
{
   NTSTATUS status;

   status = PoCallDriver(PDevObj, PIrp);
   CyyIRPEpilogue(PDevExt);
   return status;
}


VOID
CyyLogError(
              IN PDRIVER_OBJECT DriverObject,
              IN PDEVICE_OBJECT DeviceObject OPTIONAL,
              IN PHYSICAL_ADDRESS P1,
              IN PHYSICAL_ADDRESS P2,
              IN ULONG SequenceNumber,
              IN UCHAR MajorFunctionCode,
              IN UCHAR RetryCount,
              IN ULONG UniqueErrorValue,
              IN NTSTATUS FinalStatus,
              IN NTSTATUS SpecificIOStatus,
              IN ULONG LengthOfInsert1,
              IN PWCHAR Insert1,
              IN ULONG LengthOfInsert2,
              IN PWCHAR Insert2
              )

/*++

Routine Description:

    This routine allocates an error log entry, copies the supplied data
    to it, and requests that it be written to the error log file.

Arguments:

    DriverObject - A pointer to the driver object for the device.

    DeviceObject - A pointer to the device object associated with the
    device that had the error, early in initialization, one may not
    yet exist.

    P1,P2 - If phyical addresses for the controller ports involved
    with the error are available, put them through as dump data.

    SequenceNumber - A ulong value that is unique to an IRP over the
    life of the irp in this driver - 0 generally means an error not
    associated with an irp.

    MajorFunctionCode - If there is an error associated with the irp,
    this is the major function code of that irp.

    RetryCount - The number of times a particular operation has been
    retried.

    UniqueErrorValue - A unique long word that identifies the particular
    call to this function.

    FinalStatus - The final status given to the irp that was associated
    with this error.  If this log entry is being made during one of
    the retries this value will be STATUS_SUCCESS.

    SpecificIOStatus - The IO status for a particular error.

    LengthOfInsert1 - The length in bytes (including the terminating NULL)
                      of the first insertion string.

    Insert1 - The first insertion string.

    LengthOfInsert2 - The length in bytes (including the terminating NULL)
                      of the second insertion string.  NOTE, there must
                      be a first insertion string for their to be
                      a second insertion string.

    Insert2 - The second insertion string.

Return Value:

    None.

--*/

{
   PIO_ERROR_LOG_PACKET errorLogEntry;

   PVOID objectToUse;
   SHORT dumpToAllocate = 0;
   PUCHAR ptrToFirstInsert;
   PUCHAR ptrToSecondInsert;

   //PAGED_CODE(); It can be called at raised IRQL.

   if (Insert1 == NULL) {
      LengthOfInsert1 = 0;
   }

   if (Insert2 == NULL) {
      LengthOfInsert2 = 0;
   }


   if (ARGUMENT_PRESENT(DeviceObject)) {

      objectToUse = DeviceObject;

   } else {

      objectToUse = DriverObject;

   }

   if (CyyMemCompare(
                       P1,
                       (ULONG)1,
                       CyyPhysicalZero,
                       (ULONG)1
                       ) != AddressesAreEqual) {

      dumpToAllocate = (SHORT)sizeof(PHYSICAL_ADDRESS);

   }

   if (CyyMemCompare(
                       P2,
                       (ULONG)1,
                       CyyPhysicalZero,
                       (ULONG)1
                       ) != AddressesAreEqual) {

      dumpToAllocate += (SHORT)sizeof(PHYSICAL_ADDRESS);

   }

   errorLogEntry = IoAllocateErrorLogEntry(
                                          objectToUse,
                                          (UCHAR)(sizeof(IO_ERROR_LOG_PACKET) +
                                                  dumpToAllocate
                                                  + LengthOfInsert1 +
                                                  LengthOfInsert2)
                                          );

   if ( errorLogEntry != NULL ) {

      errorLogEntry->ErrorCode = SpecificIOStatus;
      errorLogEntry->SequenceNumber = SequenceNumber;
      errorLogEntry->MajorFunctionCode = MajorFunctionCode;
      errorLogEntry->RetryCount = RetryCount;
      errorLogEntry->UniqueErrorValue = UniqueErrorValue;
      errorLogEntry->FinalStatus = FinalStatus;
      errorLogEntry->DumpDataSize = dumpToAllocate;

      if (dumpToAllocate) {

         RtlCopyMemory(
                      &errorLogEntry->DumpData[0],
                      &P1,
                      sizeof(PHYSICAL_ADDRESS)
                      );

         if (dumpToAllocate > sizeof(PHYSICAL_ADDRESS)) {

            RtlCopyMemory(
                         ((PUCHAR)&errorLogEntry->DumpData[0])
                         +sizeof(PHYSICAL_ADDRESS),
                         &P2,
                         sizeof(PHYSICAL_ADDRESS)
                         );

            ptrToFirstInsert =
            ((PUCHAR)&errorLogEntry->DumpData[0])+(2*sizeof(PHYSICAL_ADDRESS));

         } else {

            ptrToFirstInsert =
            ((PUCHAR)&errorLogEntry->DumpData[0])+sizeof(PHYSICAL_ADDRESS);


         }

      } else {

         ptrToFirstInsert = (PUCHAR)&errorLogEntry->DumpData[0];

      }

      ptrToSecondInsert = ptrToFirstInsert + LengthOfInsert1;

      if (LengthOfInsert1) {

         errorLogEntry->NumberOfStrings = 1;
         errorLogEntry->StringOffset = (USHORT)(ptrToFirstInsert -
                                                (PUCHAR)errorLogEntry);
         RtlCopyMemory(
                      ptrToFirstInsert,
                      Insert1,
                      LengthOfInsert1
                      );

         if (LengthOfInsert2) {

            errorLogEntry->NumberOfStrings = 2;
            RtlCopyMemory(
                         ptrToSecondInsert,
                         Insert2,
                         LengthOfInsert2
                         );

         }

      }

      IoWriteErrorLogEntry(errorLogEntry);

   }

}

VOID
CyyMarkHardwareBroken(IN PCYY_DEVICE_EXTENSION PDevExt)
/*++

Routine Description:

   Marks a UART as broken.  This causes the driver stack to stop accepting
   requests and eventually be removed.
   
Arguments:
   PDevExt - Device extension attached to PDevObj
   
Return Value:

   None.

--*/
{
   PAGED_CODE();

   //
   // Mark as damaged goods
   //

   CyySetFlags(PDevExt, CYY_FLAGS_BROKENHW);

   //
   // Write a log entry
   //

   CyyLogError(PDevExt->DriverObject, NULL, CyyPhysicalZero,
               CyyPhysicalZero, 0, 0, 0, PDevExt->PortIndex+1, STATUS_SUCCESS,
               CYY_HARDWARE_FAILURE, PDevExt->DeviceName.Length
               + sizeof(WCHAR), PDevExt->DeviceName.Buffer, 0, NULL);

   //
   // Invalidate the device
   //

   IoInvalidateDeviceState(PDevExt->Pdo);
}

VOID
CyySetDeviceFlags(IN PCYY_DEVICE_EXTENSION PDevExt, OUT PULONG PFlags, 
                  IN ULONG Value, IN BOOLEAN Set)
/*++

Routine Description:

   Sets flags in a value protected by the flags spinlock.  This is used
   to set values that would stop IRP's from being accepted.
   
Arguments:
   PDevExt - Device extension attached to PDevObj
   
   PFlags - Pointer to the flags variable that needs changing
   
   Value - Value to modify flags variable with
   
   Set - TRUE if |= , FALSE if &=
   
Return Value:

   None.

--*/
{
   KIRQL oldIrql;

   KeAcquireSpinLock(&PDevExt->FlagsLock, &oldIrql);

   if (Set) {
      *PFlags |= Value;
   } else {
      *PFlags &= ~Value;
   }

   KeReleaseSpinLock(&PDevExt->FlagsLock, oldIrql);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\y\cyyport\cyywmi.c ===
/*--------------------------------------------------------------------------
*	
*   Copyright (C) Cyclades Corporation, 1999.
*   All rights reserved.
*	
*   Cyclom-Y Port Driver
*	
*   This file:      cyywmi.c
*	
*   Description:    This module contains the code related to write 
*                   operations in the Cyclom-Y Port driver.
*
*   Notes:          This code supports Windows 2000 and Windows XP,
*                   x86 and IA64 processors.
*	
*   Complies with Cyclades SW Coding Standard rev 1.3.
*	
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*   Change History
*
*--------------------------------------------------------------------------
*   Initial implementation based on Microsoft sample code.
*
*--------------------------------------------------------------------------
*/

#include "precomp.h"
#include <wmistr.h>

#ifdef ALLOC_PRAGMA
#pragma alloc_text(PAGESRP0, CyySystemControlDispatch)
#pragma alloc_text(PAGESRP0, CyyTossWMIRequest)
#pragma alloc_text(PAGESRP0, CyySetWmiDataItem)
#pragma alloc_text(PAGESRP0, CyySetWmiDataBlock)
#pragma alloc_text(PAGESRP0, CyyQueryWmiDataBlock)
#pragma alloc_text(PAGESRP0, CyyQueryWmiRegInfo)
#endif


NTSTATUS
CyySystemControlDispatch(IN PDEVICE_OBJECT DeviceObject, IN PIRP Irp)
{
    SYSCTL_IRP_DISPOSITION disposition;
    NTSTATUS status;
    PCYY_DEVICE_EXTENSION pDevExt
      = (PCYY_DEVICE_EXTENSION)DeviceObject->DeviceExtension;

    PAGED_CODE();

    //CyyDump (CYYWMI, ("CYYPORT: entering CyySystemControlDispatch\n"));

    status = WmiSystemControl(   &pDevExt->WmiLibInfo,
                                 DeviceObject, 
                                 Irp,
                                 &disposition);
    switch(disposition)
    {
        case IrpProcessed:
        {
            //
            // This irp has been processed and may be completed or pending.
            //CyyDump (CYYWMI, ("WmiSystemControl: IrpProcessed\n"));
            break;
        }
        
        case IrpNotCompleted:
        {
            //
            // This irp has not been completed, but has been fully processed.
            // we will complete it now
            //CyyDump (CYYWMI, ("WmiSystemControl: IrpNotCompleted\n"));
            IoCompleteRequest(Irp, IO_NO_INCREMENT);                
            break;
        }
        
        case IrpForward:
        case IrpNotWmi:
        {
            //
            // This irp is either not a WMI irp or is a WMI irp targetted
            // at a device lower in the stack.
            //CyyDump (CYYWMI, ("WmiSystemControl: IrpForward or IrpNotWmi\n"));
            IoSkipCurrentIrpStackLocation(Irp);
            status = IoCallDriver(pDevExt->LowerDeviceObject, Irp);
            break;
        }
                                    
        default:
        {
            //
            // We really should never get here, but if we do just forward....
            ASSERT(FALSE);
            IoSkipCurrentIrpStackLocation(Irp);
            status = IoCallDriver(pDevExt->LowerDeviceObject, Irp);
            break;
        }        
    }

    //CyyDump (CYYWMI, ("CYYPORT: leaving CyySystemControlDispatch\n"));
    
    return(status);

}


#define WMI_SERIAL_PORT_NAME_INFORMATION 0
#define WMI_SERIAL_PORT_COMM_INFORMATION 1
#define WMI_SERIAL_PORT_HW_INFORMATION   2
#define WMI_SERIAL_PORT_PERF_INFORMATION 3
#define WMI_SERIAL_PORT_PROPERTIES       4

GUID SerialPortNameGuid = SERIAL_PORT_WMI_NAME_GUID;
GUID SerialPortCommGuid = SERIAL_PORT_WMI_COMM_GUID;
GUID SerialPortHWGuid = SERIAL_PORT_WMI_HW_GUID;
GUID SerailPortPerfGuid = SERIAL_PORT_WMI_PERF_GUID;
GUID SerialPortPropertiesGuid = SERIAL_PORT_WMI_PROPERTIES_GUID;

WMIGUIDREGINFO SerialWmiGuidList[SERIAL_WMI_GUID_LIST_SIZE] =
{
    { &SerialPortNameGuid, 1, 0 },
    { &SerialPortCommGuid, 1, 0 },
    { &SerialPortHWGuid, 1, 0 },
    { &SerailPortPerfGuid, 1, 0 },
    { &SerialPortPropertiesGuid, 1, 0}
};

//
// WMI System Call back functions
//



NTSTATUS
CyyTossWMIRequest(IN PDEVICE_OBJECT PDevObj, IN PIRP PIrp,
                  IN ULONG GuidIndex)
{
   PCYY_DEVICE_EXTENSION pDevExt;
   NTSTATUS status;

   PAGED_CODE();

   pDevExt = (PCYY_DEVICE_EXTENSION)PDevObj->DeviceExtension;

   switch (GuidIndex) {

   case WMI_SERIAL_PORT_NAME_INFORMATION:
   case WMI_SERIAL_PORT_COMM_INFORMATION:
   case WMI_SERIAL_PORT_HW_INFORMATION:
   case WMI_SERIAL_PORT_PERF_INFORMATION:
   case WMI_SERIAL_PORT_PROPERTIES:
      status = STATUS_INVALID_DEVICE_REQUEST;
      break;

   default:
      status = STATUS_WMI_GUID_NOT_FOUND;
      break;
   }

   status = WmiCompleteRequest(PDevObj, PIrp,
                                 status, 0, IO_NO_INCREMENT);

   return status;
}


NTSTATUS
CyySetWmiDataItem(IN PDEVICE_OBJECT PDevObj, IN PIRP PIrp,
                  IN ULONG GuidIndex, IN ULONG InstanceIndex,
                  IN ULONG DataItemId,
                  IN ULONG BufferSize, IN PUCHAR PBuffer)
/*++

Routine Description:

    This routine is a callback into the driver to set for the contents of
    a data block. When the driver has finished filling the data block it
    must call ClassWmiCompleteRequest to complete the irp. The driver can
    return STATUS_PENDING if the irp cannot be completed immediately.

Arguments:

    PDevObj is the device whose data block is being queried

    PIrp is the Irp that makes this request

    GuidIndex is the index into the list of guids provided when the
        device registered

    InstanceIndex is the index that denotes which instance of the data block
        is being queried.
            
    DataItemId has the id of the data item being set

    BufferSize has the size of the data item passed

    PBuffer has the new values for the data item


Return Value:

    status

--*/
{
   PAGED_CODE();

   //
   // Toss this request -- we don't support anything for it
   //

   //CyyDump (CYYWMI, ("CyySetWmiDataItem\n"));
   return CyyTossWMIRequest(PDevObj, PIrp, GuidIndex);
}


NTSTATUS
CyySetWmiDataBlock(IN PDEVICE_OBJECT PDevObj, IN PIRP PIrp,
                   IN ULONG GuidIndex, IN ULONG InstanceIndex,
                   IN ULONG BufferSize,
                   IN PUCHAR PBuffer)
/*++

Routine Description:

    This routine is a callback into the driver to set the contents of
    a data block. When the driver has finished filling the data block it
    must call ClassWmiCompleteRequest to complete the irp. The driver can
    return STATUS_PENDING if the irp cannot be completed immediately.

Arguments:

    PDevObj is the device whose data block is being queried

    PIrp is the Irp that makes this request

    GuidIndex is the index into the list of guids provided when the
        device registered

    InstanceIndex is the index that denotes which instance of the data block
        is being queried.
            
    BufferSize has the size of the data block passed

    PBuffer has the new values for the data block


Return Value:

    status

--*/
{
   PAGED_CODE();

   //
   // Toss this request -- we don't support anything for it
   //

   //CyyDump (CYYWMI, ("CyySetWmiDataBlock\n"));
   return CyyTossWMIRequest(PDevObj, PIrp, GuidIndex);
}


NTSTATUS
CyyQueryWmiDataBlock(IN PDEVICE_OBJECT PDevObj, IN PIRP PIrp,
                     IN ULONG GuidIndex, 
                     IN ULONG InstanceIndex,
                     IN ULONG InstanceCount,
                     IN OUT PULONG InstanceLengthArray,
                     IN ULONG OutBufferSize,
                     OUT PUCHAR PBuffer)
/*++

Routine Description:

    This routine is a callback into the driver to query for the contents of
    a data block. When the driver has finished filling the data block it
    must call ClassWmiCompleteRequest to complete the irp. The driver can
    return STATUS_PENDING if the irp cannot be completed immediately.

Arguments:

    PDevObj is the device whose data block is being queried

    PIrp is the Irp that makes this request

    GuidIndex is the index into the list of guids provided when the
        device registered

    InstanceIndex is the index that denotes which instance of the data block
        is being queried.
            
    InstanceCount is the number of instnaces expected to be returned for
        the data block.
            
    InstanceLengthArray is a pointer to an array of ULONG that returns the 
        lengths of each instance of the data block. If this is NULL then
        there was not enough space in the output buffer to fufill the request
        so the irp should be completed with the buffer needed.        
            
    BufferAvail on has the maximum size available to write the data
        block.

    PBuffer on return is filled with the returned data block


Return Value:

    status

--*/
{
    NTSTATUS status;
    ULONG size = 0;
    PCYY_DEVICE_EXTENSION pDevExt
       = (PCYY_DEVICE_EXTENSION)PDevObj->DeviceExtension;

    PAGED_CODE();

    //CyyDump (CYYWMI, ("CyyQueryWmiDataBlock GuidIndex=%d InstanceIndex=%d InstanceCount=%d\n",
    //                             GuidIndex,InstanceIndex,InstanceCount));

    switch (GuidIndex) {
    case WMI_SERIAL_PORT_NAME_INFORMATION:
       //CyyDump (CYYWMI, ("CyyQueryWmiDataBlock WMI_SERIAL_PORT_NAME_INFORMATION\n"));
       size = pDevExt->WmiIdentifier.Length;

       if (OutBufferSize < (size + sizeof(USHORT))) {
            size += sizeof(USHORT);
            status = STATUS_BUFFER_TOO_SMALL;
            break;
        }

       if (pDevExt->WmiIdentifier.Buffer == NULL) {
           status = STATUS_INSUFFICIENT_RESOURCES;
           break;
        }

        //
        // First, copy the string over containing our identifier
        //

        *(USHORT *)PBuffer = (USHORT)size;
        (UCHAR *)PBuffer += sizeof(USHORT);

        RtlCopyMemory(PBuffer, pDevExt->WmiIdentifier.Buffer, size);

        //
        // Increment total size to include the WORD containing our len
        //

        size += sizeof(USHORT);
        *InstanceLengthArray = size;
                
        status = STATUS_SUCCESS;

        break;

    case WMI_SERIAL_PORT_COMM_INFORMATION: 
       //CyyDump (CYYWMI, ("CyyQueryWmiDataBlock WMI_SERIAL_PORT_COMM_INFORMATION\n"));
       size = sizeof(SERIAL_WMI_COMM_DATA);

       if (OutBufferSize < size) {
          status = STATUS_BUFFER_TOO_SMALL;
          break;
        }

        *InstanceLengthArray = size;
        *(PSERIAL_WMI_COMM_DATA)PBuffer = pDevExt->WmiCommData;

        status = STATUS_SUCCESS;

        break;

    case WMI_SERIAL_PORT_HW_INFORMATION:
       //CyyDump (CYYWMI, ("CyyQueryWmiDataBlock WMI_SERIAL_PORT_HW_INFORMATION\n"));
       size = sizeof(SERIAL_WMI_HW_DATA);

       if (OutBufferSize < size) {
          status = STATUS_BUFFER_TOO_SMALL;
          break;
       }

       *InstanceLengthArray = size;
       *(PSERIAL_WMI_HW_DATA)PBuffer = pDevExt->WmiHwData;

       status = STATUS_SUCCESS;

       break;

    case WMI_SERIAL_PORT_PERF_INFORMATION: 
      //CyyDump (CYYWMI, ("CyyQueryWmiDataBlock WMI_SERIAL_PORT_PERF_INFORMATION\n"));
      size = sizeof(SERIAL_WMI_PERF_DATA);

      if (OutBufferSize < size) {
         status = STATUS_BUFFER_TOO_SMALL;
         break;
      }

      *InstanceLengthArray = size;
      *(PSERIAL_WMI_PERF_DATA)PBuffer = pDevExt->WmiPerfData;

      status = STATUS_SUCCESS;

      break;

    case WMI_SERIAL_PORT_PROPERTIES: 
      //CyyDump (CYYWMI, ("CyyQueryWmiDataBlock WMI_SERIAL_PORT_PROPERTIES\n"));
      size = sizeof(SERIAL_COMMPROP) + sizeof(ULONG);

      if (OutBufferSize < size) {
         status = STATUS_BUFFER_TOO_SMALL;
         break;
      }

      *InstanceLengthArray = size;
      CyyGetProperties(
                pDevExt,
                (PSERIAL_COMMPROP)PBuffer
                );
	
      *((PULONG)(((PSERIAL_COMMPROP)PBuffer)->ProvChar)) = 0;

      status = STATUS_SUCCESS;

      break;

    default:
        //CyyDump (CYYWMI, ("CyyQueryWmiDataBlock default\n"));
        status = STATUS_WMI_GUID_NOT_FOUND;
        break;
    }

    status = WmiCompleteRequest( PDevObj, PIrp,
                                  status, size, IO_NO_INCREMENT);

    return status;
}


NTSTATUS
CyyQueryWmiRegInfo(IN PDEVICE_OBJECT PDevObj, OUT PULONG PRegFlags,
                   OUT PUNICODE_STRING PInstanceName,
                   OUT PUNICODE_STRING *PRegistryPath,
                   OUT PUNICODE_STRING MofResourceName,
                   OUT PDEVICE_OBJECT *Pdo)
                                                  
/*++

Routine Description:

    This routine is a callback into the driver to retrieve information about
    the guids being registered. 
            
    Implementations of this routine may be in paged memory

Arguments:

    DeviceObject is the device whose registration information is needed

    *RegFlags returns with a set of flags that describe all of the guids being
        registered for this device. If the device wants enable and disable
        collection callbacks before receiving queries for the registered
        guids then it should return the WMIREG_FLAG_EXPENSIVE flag. Also the
        returned flags may specify WMIREG_FLAG_INSTANCE_PDO in which case
        the instance name is determined from the PDO associated with the
        device object. Note that the PDO must have an associated devnode. If
        WMIREG_FLAG_INSTANCE_PDO is not set then Name must return a unique
        name for the device. These flags are ORed into the flags specified
        by the GUIDREGINFO for each guid.               

    InstanceName returns with the instance name for the guids if
        WMIREG_FLAG_INSTANCE_PDO is not set in the returned *RegFlags. The
        caller will call ExFreePool with the buffer returned.

    *RegistryPath returns with the registry path of the driver. This is 
        required
                
    *MofResourceName returns with the name of the MOF resource attached to
        the binary file. If the driver does not have a mof resource attached
        then this can be returned as NULL.
                
    *Pdo returns with the device object for the PDO associated with this
        device if the WMIREG_FLAG_INSTANCE_PDO flag is retured in 
        *RegFlags.

Return Value:

    status

--*/
{
   PCYY_DEVICE_EXTENSION pDevExt
       = (PCYY_DEVICE_EXTENSION)PDevObj->DeviceExtension;
   
   PAGED_CODE();

   //CyyDump (CYYWMI, ("CyyQueryWmiRegInfo\n"));
   *PRegFlags = WMIREG_FLAG_INSTANCE_PDO;
   *PRegistryPath = &CyyGlobals.RegistryPath;
   *Pdo = pDevExt->Pdo;

   return STATUS_SUCCESS;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\y\cyyports\cyfriend.c ===
/** FILE: cyfriend.c ********** Module Header ********************************
 *
 *
 *
 *  Copyright (C) 2000 Cyclades Corporation
 *
 *************************************************************************/

#include "cyyports.h"

//
//  For Cyyport
//
TCHAR y_szCyyPort[] = TEXT("Cyclom-Y Port ");
TCHAR y_szPortIndex[] = TEXT("PortIndex");



BOOL
ReplaceFriendlyName(
    IN HDEVINFO         DeviceInfoSet,
    IN PSP_DEVINFO_DATA DeviceInfoData,
    IN PTCHAR           NewComName
)
{

    DEVINST         parentInst;
    HDEVINFO        parentInfo;
    SP_DEVINFO_DATA parentData;
    TCHAR           parentId[MAX_DEVICE_ID_LEN];
    TCHAR           charBuffer[MAX_PATH],
                    deviceDesc[LINE_LEN];
    HKEY            hDeviceKey;
    TCHAR           PortName[20];
    DWORD           PortNameSize,PortIndexSize,PortIndex;
    DWORD           dwErr;
    PTCHAR          comName = NULL;
    DWORD           portNumber = 0;

    //DbgOut(TEXT("ReplaceFriendlyName\n"));

    if((hDeviceKey = SetupDiOpenDevRegKey(DeviceInfoSet,
                                          DeviceInfoData,
                                          DICS_FLAG_GLOBAL,
                                          0,
                                          DIREG_DEV,
                                          KEY_READ)) == INVALID_HANDLE_VALUE) {
        DbgOut(TEXT("SetupDiOpenDevRegKey failed\n"));
        return FALSE;
    }

    PortNameSize = sizeof(PortName);
    dwErr = RegQueryValueEx(hDeviceKey,
                          m_szPortName,
                          NULL,
                          NULL,
                          (PBYTE)PortName,
                          &PortNameSize
                          );

    if (dwErr == ERROR_SUCCESS) {
    PortIndexSize = sizeof(PortIndex);
    dwErr = RegQueryValueEx(hDeviceKey,
                          y_szPortIndex,
                          NULL,
                          NULL,
                          (PBYTE)&PortIndex,
                          &PortIndexSize
                          );
    }

    RegCloseKey(hDeviceKey);

    if(dwErr != ERROR_SUCCESS) {
        DbgOut(TEXT("RegQueryValueEx failed\n"));
        return FALSE;
    }
    if (NewComName == NULL) {
        comName = PortName;
    } else {
        comName = NewComName;
    }
    if (comName == NULL) {
        DbgOut(TEXT("comName NULL\n"));
        return FALSE;
    }

    portNumber = PortIndex+1;

    if (!SetupDiGetDeviceRegistryProperty(DeviceInfoSet,
                                          DeviceInfoData,
                                          SPDRP_DEVICEDESC,
                                          NULL,
                                          (PBYTE)deviceDesc,
                                          sizeof(deviceDesc),
                                          NULL)) {
        DbgOut(TEXT("Couldn't get Device Description\n"));
        return FALSE;
    }

    if (_tcsnicmp (deviceDesc,y_szCyyPort,_tcslen(y_szCyyPort)) != 0){
        DbgOut(TEXT("Device Description is different of Cyclom-Y Port \n"));
        return FALSE;
    }
    
    if (portNumber == 0) {
        DbgOut(TEXT("Invalid portNumber\n"));
        return FALSE;
    }

    if (CM_Get_Parent(&parentInst,DeviceInfoData->DevInst,0) != CR_SUCCESS) {
        DbgOut(TEXT("CM_Get_Parent failed.\n"));
        return FALSE;
    }

    if (CM_Get_Device_ID(parentInst,parentId,CharSizeOf(parentId),0) != CR_SUCCESS) {
        DbgOut(TEXT("CM_Get_Device_ID failed.\n"));
        return FALSE;
    }

    parentInfo = SetupDiCreateDeviceInfoList(NULL,NULL);

    if (parentInfo == INVALID_HANDLE_VALUE) {
        DbgOut(TEXT("SetupDiCreateDeviceInfoList failed\n"));
        return FALSE;
    }
    
    parentData.cbSize = sizeof(SP_DEVINFO_DATA);

    if (SetupDiOpenDeviceInfo(parentInfo,parentId,NULL,0,&parentData)) {

        if (SetupDiGetDeviceRegistryProperty(parentInfo,
                                             &parentData,
                                             SPDRP_FRIENDLYNAME,
                                             NULL,
                                             (PBYTE)deviceDesc,
                                             sizeof(deviceDesc),
                                             NULL) ||  
            SetupDiGetDeviceRegistryProperty(parentInfo,
                                             &parentData,
                                             SPDRP_DEVICEDESC,
                                             NULL,
                                             (PBYTE)deviceDesc,
                                             sizeof(deviceDesc),
                                             NULL)) {
            wsprintf(charBuffer,TEXT("%s Port %2u (%s)"),deviceDesc,portNumber,comName);
//          #if DBG
//          {
//           TCHAR buf[500];
//           wsprintf(buf, TEXT("%s\n"), charBuffer);
//           DbgOut(buf);
//          }
//          #endif

            SetupDiSetDeviceRegistryProperty(DeviceInfoSet,
                                             DeviceInfoData,
                                             SPDRP_FRIENDLYNAME,
                                             (PBYTE)charBuffer,
                                              ByteCountOf(_tcslen(charBuffer) + 1)
                                             );

        }

    } else {
        #if DBG
        {
         TCHAR buf[500];
         wsprintf(buf, TEXT("SetupDiOpenDeviceInfo failed with error %x\n"), GetLastError());
         DbgOut(buf);
        }
        #endif
    }
    
    SetupDiDestroyDeviceInfoList(parentInfo);    
    return TRUE;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\y\cyyports\cyfriend.h ===
/** FILE: cyfriend.h ********* Module Header ********************************
 *
 *
 * History:
 *
 *  Copyright (C) 2000 Cyclades Corporation
 *
 *************************************************************************/
//==========================================================================
//                            Include Files
//==========================================================================

#ifndef CYFRIEND_H
#define CYFRIEND_H


//==========================================================================
//                            Function Prototypes
//==========================================================================

//
//  cyfriend.c
//
extern
BOOL
ReplaceFriendlyName(
    IN HDEVINFO         DeviceInfoSet,
    IN PSP_DEVINFO_DATA DeviceInfoData,
    IN PTCHAR           NewComName
);



#endif // CYFRIEND_H
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\y\cyyports\cyyports.h ===
/** FILE: cyyports.h ********* Module Header ********************************
 *
 *  Control Panel System applet common definitions, resource ids, typedefs,
 *  external declarations and library routine function prototypes.
 *
 * History:
 *
 *
 *  Copyright (C) 2000 Cyclades Corporation
 *
 *************************************************************************/
//==========================================================================
//                            Include Files
//==========================================================================

#ifndef PORTS_H
#define PORTS_H

#include <windows.h>
#include <tchar.h>
#include <cfgmgr32.h>
#include <setupapi.h>
#include <regstr.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <malloc.h>
#include "resource.h"

#include "portstr.h"

#define PORTS        4
#define MAXPORTS    32
#define KEYBZ       4096
#define BUFFER_SIZE 81

#define DEF_BAUD    3       //  1200
#define DEF_WORD    4       //  8 bits
#define DEF_PARITY  2       //  None
#define DEF_STOP    0       //  1
#define DEF_PORT    0       //  Null Port
#define DEF_SHAKE   2       //  None
#define PAR_EVEN    0
#define PAR_ODD     1
#define PAR_NONE    2
#define PAR_MARK    3
#define PAR_SPACE   4
#define STOP_1      0
#define STOP_15     1
#define STOP_2      2
#define FLOW_XON    0
#define FLOW_HARD   1
#define FLOW_NONE   2

//#define MAX_COM_PORT  COMDB_MIN_PORTS_ARBITRATED   // Maximum number of COM ports NT supports
#define MAX_COM_PORT  2048                         // We should support at least 1024 ports.
#define MIN_COM       1                            // Minimum new COM port number

#define POLL_PERIOD_DEFAULT_IDX 1 

//==========================================================================
//                        Definitions
//==========================================================================

//
//  General definitions
//

#define PATHMAX             MAX_PATH


//
//  Help IDs -- for the Ports applet
//
//
#define IDH_HELPFIRST        5000
#define IDH_SYSMENU     (IDH_HELPFIRST + 2000)
#define IDH_MBFIRST     (IDH_HELPFIRST + 2001)
#define IDH_MBLAST      (IDH_HELPFIRST + 2099)
#define IDH_DLGFIRST    (IDH_HELPFIRST + 3000)

#define IDH_MENU_SCHHELP    (IDH_HELPFIRST + MENU_SCHHELP)
#define IDH_MENU_INDHELP    (IDH_HELPFIRST + MENU_INDHELP)
#define IDH_MENU_USEHELP    (IDH_HELPFIRST + MENU_USEHELP)
#define IDH_MENU_ABOUT      (IDH_HELPFIRST + MENU_ABOUT )
#define IDH_MENU_EXIT       (IDH_HELPFIRST + MENU_EXIT)
#define IDH_CHILD_PORTS     (IDH_HELPFIRST + 4 /* CHILD_PORTS */ )
#define IDH_DLG_PORTS2      (IDH_DLGFIRST + DLG_PORTS2)
#define IDH_DLG_PORTS3      (IDH_DLGFIRST + DLG_PORTS3)

//==========================================================================
//                           Typedefs
//==========================================================================
typedef struct {
    SP_DEVINFO_DATA  DeviceInfoData;

    TCHAR ComName[20];
    TCHAR Settings[20];
    
    ULONG BaseAddress;
} PORT_INFO, *PPORT_INFO;

typedef struct _PORTS_WIZARD_DATA {

    HDEVINFO          DeviceInfoSet;
    PSP_DEVINFO_DATA  pDeviceInfoData;

    ULONG BaseAddress;
    ULONG FirstComNumber;

    ULONG PortsCount;
    PPORT_INFO Ports;

    PUINT UsedComNumbers;
    UINT UsedComNumbersCount;

    BOOL IsMulti;
} PORTS_WIZARD_DATA, *PPORTS_WIZARD_DATA;


//==========================================================================
//                              Macros
//==========================================================================

#define CharSizeOf(x)   (sizeof(x) / sizeof(*x))
#define ByteCountOf(x)  ((x) * sizeof(TCHAR))

#if DBG
#define DbgOut(Text) OutputDebugString(Text)
#else
#define DbgOut(Text) 
#endif 

//==========================================================================
//                         External Declarations
//==========================================================================
//
//  DATA


//
//  exported from cpl.c
//

extern HANDLE g_hInst;
extern TCHAR  g_szErrMem[ ];        //  Low memory message
extern TCHAR  g_szPortsApplet[ ];   //  "Ports Control Panel Applet" title
extern TCHAR  g_szNull[];           //  Null string

extern DWORD PollingPeriods[];

extern TCHAR  m_szPorts[];
extern TCHAR  m_szPortName[];

//==========================================================================
//                            Function Prototypes
//==========================================================================

//
//  LibMain module
//

extern 
VOID
InitStrings(void);


//
//  cyfriend.c
//

extern
BOOL
ReplaceFriendlyName(
    IN HDEVINFO         DeviceInfoSet,
    IN PSP_DEVINFO_DATA DeviceInfoData,
    IN PTCHAR           NewComName
);


//
//  util.c
//

extern 
LPTSTR 
BackslashTerm(LPTSTR pszPath);

extern 
VOID 
ErrMemDlg(HWND hParent);

extern 
int    
MyAtoi(LPTSTR  string);

extern 
int    
myatoi(LPTSTR pszInt);

extern 
int    
MyMessageBox(HWND hWnd, 
                         DWORD wText, 
                         DWORD wCaption, 
                         DWORD wType, 
                         ...);

extern
int
MyMessageBoxWithErr(
    HWND hWnd, 
	DWORD wText, 
	DWORD wCaption, 
	DWORD wType,
    DWORD wError
    );

extern 
LPTSTR 
MyItoa(INT value, 
           LPTSTR  string, 
           INT  radix);

extern 
LPTSTR 
MyUltoa(unsigned long  value, 
                LPTSTR  string, 
                INT  radix);

extern 
VOID   
SendWinIniChange(LPTSTR szSection);

extern 
LPTSTR 
strscan(LPTSTR pszString, 
                LPTSTR pszTarget);

extern 
VOID
StripBlanks(LPTSTR pszString);


#endif // PORTS_H
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\y\cyyport\log.h ===
/*++

Copyright (c) 1993  Microsoft Corporation
:ts=4

Module Name:

    log.h

Abstract:

    debug macros

Environment:

    Kernel & user mode

Revision History:

    10-27-95 : created

--*/

#ifndef   __LOG_H__
#define   __LOG_H__

//---------------------------
#define ZSIG_SET_DTR                   0x02000000  // STX
#define ZSIG_CLR_DTR                   0x03000000  // ETX
//---------------------------

#define LOG_MISC          0x00000001        //debug log entries
#define LOG_CNT           0x00000002

//
// Assert Macros
//

#if DBG

ULONG
CyyDbgPrintEx(IN ULONG Level, PCHAR Format, ...);

#define LOGENTRY(mask, sig, info1, info2, info3)     \
    SerialDebugLogEntry(mask, sig, (ULONG_PTR)info1, \
                        (ULONG_PTR)info2,            \
                        (ULONG_PTR)info3)

VOID
SerialDebugLogEntry(IN ULONG Mask, IN ULONG Sig, IN ULONG_PTR Info1,
                    IN ULONG_PTR Info2, IN ULONG_PTR Info3);

VOID
SerialLogInit();

VOID
SerialLogFree();

#else
#define LOGENTRY(mask, sig, info1, info2, info3)
__inline ULONG CyyDbgPrintEx(IN ULONG Level, PCHAR Format, ...) { return 0; }
#endif


#endif // __LOG_H__
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\y\cyyport\precomp.h ===
#include <stddef.h>
#include <stdarg.h>
#include "ntddk.h"
#include "ntddser.h"
#include <wmilib.h>
#include <wmidata.h>
#include "cyserial.h"
#include <stdio.h>
#include "cyyhw.h"
#include "cd1400.h"
#include "cyyport.h"
#include "cyyportp.h"
#include "cyylog.h"
#include "log.h"
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\y\cyyport\cyywrite.c ===
/*--------------------------------------------------------------------------
*	
*   Copyright (C) Cyclades Corporation, 1996-1999.
*   All rights reserved.
*	
*   Cyclom-Y Port Driver
*	
*   This file:      cyywrite.c
*	
*   Description:    This module contains the code related to write 
*                   operations in the Cyclom-Y Port driver.
*
*   Notes:          This code supports Windows 2000 and Windows XP,
*                   x86 and IA64 processors.
*	
*   Complies with Cyclades SW Coding Standard rev 1.3.
*	
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*   Change History
*
*--------------------------------------------------------------------------
*
*
*--------------------------------------------------------------------------
*/

#include "precomp.h"


BOOLEAN
CyyGiveWriteToIsr(
    IN PVOID Context
    );

VOID
CyyCancelCurrentWrite(
    PDEVICE_OBJECT DeviceObject,
    PIRP Irp
    );

BOOLEAN
CyyGrabWriteFromIsr(
    IN PVOID Context
    );

BOOLEAN
CyyGrabXoffFromIsr(
    IN PVOID Context
    );

VOID
CyyCancelCurrentXoff(
    PDEVICE_OBJECT DeviceObject,
    PIRP Irp
    );

BOOLEAN
CyyGiveXoffToIsr(
    IN PVOID Context
    );

#ifdef ALLOC_PRAGMA
#pragma alloc_text(PAGESER,CyyProcessEmptyTransmit)
#pragma alloc_text(PAGESER,CyyWrite)
#pragma alloc_text(PAGESER,CyyStartWrite)
#pragma alloc_text(PAGESER,CyyGetNextWrite)
#pragma alloc_text(PAGESER,CyyGiveWriteToIsr)
#pragma alloc_text(PAGESER,CyyCancelCurrentWrite)
#pragma alloc_text(PAGESER,CyyGrabWriteFromIsr)
#pragma alloc_text(PAGESER,CyyGrabXoffFromIsr)
#pragma alloc_text(PAGESER,CyyCancelCurrentXoff)
#pragma alloc_text(PAGESER,CyyGiveXoffToIsr)
#endif


NTSTATUS
CyyWrite(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    )
/*--------------------------------------------------------------------------
    CyyWrite()
    
    Routine Description: This is the dispatch routine for write. It
    validates the parameters for the write request and if all is ok
    then it places the request on the work queue.

    Arguments:

    DeviceObject - Pointer to the device object for this device
    Irp - Pointer to the IRP for the current request

    Return Value: If the io is zero length then it will return STATUS_SUCCESS,
    otherwise this routine will return STATUS_PENDING.
--------------------------------------------------------------------------*/
{

    PCYY_DEVICE_EXTENSION Extension = DeviceObject->DeviceExtension;
    NTSTATUS status;

    CYY_LOCKED_PAGED_CODE();

    CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyyWrite(%X, %X)\n", DeviceObject,
                  Irp);

    if ((status = CyyIRPPrologue(Irp, Extension)) != STATUS_SUCCESS) {
      if (status != STATUS_PENDING) {
         CyyCompleteRequest(Extension, Irp, IO_NO_INCREMENT);
      }
      CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyyWrite (1) %X\n", status);
      return status;
    }

    CyyDbgPrintEx(CYYIRPPATH, "Dispatch entry for: %x\n", Irp);

    if (CyyCompleteIfError(DeviceObject,Irp) != STATUS_SUCCESS) {
       CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyyWrite (2) %X\n",
                     STATUS_CANCELLED);
       return STATUS_CANCELLED;
    }

    Irp->IoStatus.Information = 0L;

    //
    // Quick check for a zero length write.  If it is zero length
    // then we are already done!
    //

    if (IoGetCurrentIrpStackLocation(Irp)->Parameters.Write.Length) {

        //
        // Well it looks like we actually have to do some
        // work.  Put the write on the queue so that we can
        // process it when our previous writes are done.
        //


       status = CyyStartOrQueue(Extension, Irp, &Extension->WriteQueue,
                                &Extension->CurrentWriteIrp,
                                CyyStartWrite);

       CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyyWrite (3) %X\n", status);

       return status;

    } else {

        Irp->IoStatus.Status = STATUS_SUCCESS;

        CyyCompleteRequest(Extension, Irp, 0);

        CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyyWrite (4) %X\n",
                      STATUS_SUCCESS);

        return STATUS_SUCCESS;

    }

}

NTSTATUS
CyyStartWrite(
    IN PCYY_DEVICE_EXTENSION Extension
    )
/*--------------------------------------------------------------------------
    CyyStartWrite()

    Routine Description: This routine is used to start off any write.
    It initializes the Iostatus fields of the irp.  It will set up any
    timers that are used to control the write.

    Arguments:

    Extension - Points to the serial device extension

    Return Value: This routine will return STATUS_PENDING for all writes
    other than those that we find are cancelled.
--------------------------------------------------------------------------*/
{
    PIRP NewIrp;
    KIRQL OldIrql;
    LARGE_INTEGER TotalTime;
    BOOLEAN UseATimer;
    SERIAL_TIMEOUTS Timeouts;
    BOOLEAN SetFirstStatus = FALSE;
    NTSTATUS FirstStatus;

    CYY_LOCKED_PAGED_CODE();

    CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyyStartWrite(%X)\n", Extension);

    do {
        // If there is an xoff counter then complete it.
        IoAcquireCancelSpinLock(&OldIrql);

        // We see if there is a actually an Xoff counter irp.
        //
        // If there is, we put the write irp back on the head
        // of the write list.  We then kill the xoff counter.
        // The xoff counter killing code will actually make the
        // xoff counter back into the current write irp, and
        // in the course of completing the xoff (which is now
        // the current write) we will restart this irp.

        if (Extension->CurrentXoffIrp) {
            if (SERIAL_REFERENCE_COUNT(Extension->CurrentXoffIrp)) {
                // The reference count is non-zero.  This implies that
                // the xoff irp has not made it through the completion
                // path yet.  We will increment the reference count
                // and attempt to complete it ourseleves.

                SERIAL_SET_REFERENCE(Extension->CurrentXoffIrp,
						SERIAL_REF_XOFF_REF);

                Extension->CurrentXoffIrp->IoStatus.Information = 0; // Added in build 2128

                // The following call will actually release the
                // cancel spin lock.

                CyyTryToCompleteCurrent(
                    Extension,
                    CyyGrabXoffFromIsr,
                    OldIrql,
                    STATUS_SERIAL_MORE_WRITES,
                    &Extension->CurrentXoffIrp,
                    NULL,
                    NULL,
                    &Extension->XoffCountTimer,
                    NULL,
                    NULL,
                    SERIAL_REF_XOFF_REF
                    );
            } else {
                // The irp is well on its way to being finished.
                // We can let the regular completion code do the
                // work.  Just release the spin lock.
                IoReleaseCancelSpinLock(OldIrql);
            }
        } else {
            IoReleaseCancelSpinLock(OldIrql);
        }

        UseATimer = FALSE;

        // Calculate the timeout value needed for the
        // request.  Note that the values stored in the
        // timeout record are in milliseconds.  Note that
        // if the timeout values are zero then we won't start
        // the timer.

        KeAcquireSpinLock(&Extension->ControlLock,&OldIrql);

        Timeouts = Extension->Timeouts;

        KeReleaseSpinLock(&Extension->ControlLock,OldIrql);

        if (Timeouts.WriteTotalTimeoutConstant ||
            Timeouts.WriteTotalTimeoutMultiplier) {

            PIO_STACK_LOCATION IrpSp = IoGetCurrentIrpStackLocation(
                                           Extension->CurrentWriteIrp
                                           );
            UseATimer = TRUE;

            // We have some timer values to calculate.
            // Take care, we might have an xoff counter masquerading
            // as a write.
            TotalTime.QuadPart =
                ((LONGLONG)((UInt32x32To64(
                                 (IrpSp->MajorFunction == IRP_MJ_WRITE)?
                                     (IrpSp->Parameters.Write.Length):
                                     (1),
                                 Timeouts.WriteTotalTimeoutMultiplier
                                 )
                                 + Timeouts.WriteTotalTimeoutConstant)))
                * -10000;
        }

        // The irp may be going to the isr shortly.  Now
        // is a good time to initialize its reference counts.

        SERIAL_INIT_REFERENCE(Extension->CurrentWriteIrp);

        // We need to see if this irp should be canceled.

        IoAcquireCancelSpinLock(&OldIrql);
        if (Extension->CurrentWriteIrp->Cancel) {
            IoReleaseCancelSpinLock(OldIrql);
            Extension->CurrentWriteIrp->IoStatus.Status = STATUS_CANCELLED;

            if (!SetFirstStatus) {
                FirstStatus = STATUS_CANCELLED;
                SetFirstStatus = TRUE;
            }
        } else {
            if (!SetFirstStatus) {
                // If we haven't set our first status, then
                // this is the only irp that could have possibly
                // not been on the queue.  (It could have been
                // on the queue if this routine is being invoked
                // from the completion routine.)  Since this
                // irp might never have been on the queue we
                // should mark it as pending.

                IoMarkIrpPending(Extension->CurrentWriteIrp);
                SetFirstStatus = TRUE;
                FirstStatus = STATUS_PENDING;
            }

            // We give the irp to to the isr to write out.
            // We set a cancel routine that knows how to
            // grab the current write away from the isr.
            //
            // Since the cancel routine has an implicit reference
            // to this irp up the reference count.

            IoSetCancelRoutine(
                Extension->CurrentWriteIrp,
                CyyCancelCurrentWrite
                );

            SERIAL_SET_REFERENCE(Extension->CurrentWriteIrp,SERIAL_REF_CANCEL);

            if (UseATimer) {
                CyySetTimer(
                    &Extension->WriteRequestTotalTimer,
                    TotalTime,
                    &Extension->TotalWriteTimeoutDpc,
                    Extension
                    );

                // This timer now has a reference to the irp.

                SERIAL_SET_REFERENCE(
                    Extension->CurrentWriteIrp,
                    SERIAL_REF_TOTAL_TIMER
                    );
            }

            KeSynchronizeExecution(
                Extension->Interrupt,
                CyyGiveWriteToIsr,
                Extension
                );

            IoReleaseCancelSpinLock(OldIrql);
            break;
        }

        // Well the write was canceled before we could start it up.
        // Try to get another.

        CyyGetNextWrite(&Extension->CurrentWriteIrp, &Extension->WriteQueue,
                        &NewIrp, TRUE, Extension);

    } while (NewIrp);

    CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyyStartWrite %X\n", FirstStatus);

    return FirstStatus;
}

VOID
CyyGetNextWrite(
    IN PIRP *CurrentOpIrp,
    IN PLIST_ENTRY QueueToProcess,
    IN PIRP *NewIrp,
    IN BOOLEAN CompleteCurrent,
    IN PCYY_DEVICE_EXTENSION Extension
    )

/*++

Routine Description:

    This routine completes the old write as well as getting
    a pointer to the next write.

    The reason that we have have pointers to the current write
    queue as well as the current write irp is so that this
    routine may be used in the common completion code for
    read and write.

Arguments:

    CurrentOpIrp - Pointer to the pointer that points to the
                   current write irp.

    QueueToProcess - Pointer to the write queue.

    NewIrp - A pointer to a pointer to the irp that will be the
             current irp.  Note that this could end up pointing
             to a null pointer.  This does NOT necessaryly mean
             that there is no current write.  What could occur
             is that while the cancel lock is held the write
             queue ended up being empty, but as soon as we release
             the cancel spin lock a new irp came in from
             CyyStartWrite.

    CompleteCurrent - Flag indicates whether the CurrentOpIrp should
                      be completed.

Return Value:

    None.

--*/

{
   CYY_LOCKED_PAGED_CODE();

   CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyyGetNextWrite(XXX)\n");


    do {


        //
        // We could be completing a flush.
        //

        if (IoGetCurrentIrpStackLocation(*CurrentOpIrp)->MajorFunction
            == IRP_MJ_WRITE) {

            KIRQL OldIrql;

            ASSERT(Extension->TotalCharsQueued >=
                   (IoGetCurrentIrpStackLocation(*CurrentOpIrp)
                    ->Parameters.Write.Length));

            IoAcquireCancelSpinLock(&OldIrql);
            Extension->TotalCharsQueued -=
                IoGetCurrentIrpStackLocation(*CurrentOpIrp)
                ->Parameters.Write.Length;
            IoReleaseCancelSpinLock(OldIrql);

        } else if (IoGetCurrentIrpStackLocation(*CurrentOpIrp)->MajorFunction
                   == IRP_MJ_DEVICE_CONTROL) {

            KIRQL OldIrql;
            PIRP Irp;
            PSERIAL_XOFF_COUNTER Xc;

            IoAcquireCancelSpinLock(&OldIrql);

            Irp = *CurrentOpIrp;
            Xc = Irp->AssociatedIrp.SystemBuffer;

            //
            // We should never have a xoff counter when we
            // get to this point.
            //

            ASSERT(!Extension->CurrentXoffIrp);

            //
            // We absolutely shouldn't have a cancel routine
            // at this point.
            //

            ASSERT(!Irp->CancelRoutine);

            //
            // This could only be a xoff counter masquerading as
            // a write irp.
            //

            Extension->TotalCharsQueued--;

            //
            // Check to see of the xoff irp has been set with success.
            // This means that the write completed normally.  If that
            // is the case, and it hasn't been set to cancel in the
            // meanwhile, then go on and make it the CurrentXoffIrp.
            //

            if (Irp->IoStatus.Status != STATUS_SUCCESS) {

                //
                // Oh well, we can just finish it off.
                //
                NOTHING;

            } else if (Irp->Cancel) {

                Irp->IoStatus.Status = STATUS_CANCELLED;

            } else {

                //
                // Give it a new cancel routine, and increment the
                // reference count because the cancel routine has
                // a reference to it.
                //

                IoSetCancelRoutine(
                    Irp,
                    CyyCancelCurrentXoff
                    );

                SERIAL_SET_REFERENCE(
                    Irp,
                    SERIAL_REF_CANCEL
                    );

                //
                // We don't want to complete the current irp now.  This
                // will now get completed by the Xoff counter code.
                //

                CompleteCurrent = FALSE;

                //
                // Give the counter to the isr.
                //

                Extension->CurrentXoffIrp = Irp;
                KeSynchronizeExecution(
                    Extension->Interrupt,
                    CyyGiveXoffToIsr,
                    Extension
                    );

                //
                // Start the timer for the counter and increment
                // the reference count since the timer has a
                // reference to the irp.
                //

                if (Xc->Timeout) {

                    LARGE_INTEGER delta;

                    delta.QuadPart = -((LONGLONG)UInt32x32To64(
                                                     1000,
                                                     Xc->Timeout
                                                     ));

                    CyySetTimer(
                        &Extension->XoffCountTimer,
                        delta,
                        &Extension->XoffCountTimeoutDpc,
                        Extension
                        );

                    SERIAL_SET_REFERENCE(
                        Irp,
                        SERIAL_REF_TOTAL_TIMER
                        );

                }

            }

            IoReleaseCancelSpinLock(OldIrql);

        }

        //
        // Note that the following call will (probably) also cause
        // the current irp to be completed.
        //

        CyyGetNextIrp(
            CurrentOpIrp,
            QueueToProcess,
            NewIrp,
            CompleteCurrent,
            Extension
            );

        if (!*NewIrp) {

            KIRQL OldIrql;

            IoAcquireCancelSpinLock(&OldIrql);
            KeSynchronizeExecution(
                Extension->Interrupt,
                CyyProcessEmptyTransmit,
                Extension
                );
            IoReleaseCancelSpinLock(OldIrql);

            break;

        } else if (IoGetCurrentIrpStackLocation(*NewIrp)->MajorFunction
                   == IRP_MJ_FLUSH_BUFFERS) {

            //
            // If we encounter a flush request we just want to get
            // the next irp and complete the flush.
            //
            // Note that if NewIrp is non-null then it is also
            // equal to CurrentWriteIrp.
            //


            ASSERT((*NewIrp) == (*CurrentOpIrp));
            (*NewIrp)->IoStatus.Status = STATUS_SUCCESS;

        } else {

            break;

        }

    } while (TRUE);

    CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyyGetNextWrite\n");
}

VOID
CyyCompleteWrite(
    IN PKDPC Dpc,
    IN PVOID DeferredContext,
    IN PVOID SystemContext1,
    IN PVOID SystemContext2
    )

/*++

Routine Description:

    This routine is merely used to complete any write.  It
    assumes that the status and the information fields of
    the irp are already correctly filled in.

Arguments:

    Dpc - Not Used.

    DeferredContext - Really points to the device extension.

    SystemContext1 - Not Used.

    SystemContext2 - Not Used.

Return Value:

    None.

--*/

{

    PCYY_DEVICE_EXTENSION Extension = DeferredContext;
    KIRQL OldIrql;

    UNREFERENCED_PARAMETER(SystemContext1);
    UNREFERENCED_PARAMETER(SystemContext2);
    
    CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyyCompleteWrite(%X)\n",
                     Extension);

    IoAcquireCancelSpinLock(&OldIrql);

    CyyTryToCompleteCurrent(Extension, NULL, OldIrql, STATUS_SUCCESS,
                            &Extension->CurrentWriteIrp,
                            &Extension->WriteQueue, NULL,
                            &Extension->WriteRequestTotalTimer,
                            CyyStartWrite, CyyGetNextWrite,
                            SERIAL_REF_ISR);

    CyyDpcEpilogue(Extension, Dpc);

    CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyyCompleteWrite\n");

}

BOOLEAN
CyyProcessEmptyTransmit(
    IN PVOID Context
    )

/*++

Routine Description:

    This routine is used to determine if conditions are appropriate
    to satisfy a wait for transmit empty event, and if so to complete
    the irp that is waiting for that event.  It also call the code
    that checks to see if we should lower the RTS line if we are
    doing transmit toggling.

    NOTE: This routine is called by KeSynchronizeExecution.

    NOTE: This routine assumes that it is called with the cancel
          spinlock held.

Arguments:

    Context - Really a pointer to the device extension.

Return Value:

    This routine always returns FALSE.

--*/

{

    PCYY_DEVICE_EXTENSION Extension = Context;
    CYY_LOCKED_PAGED_CODE();

    if (Extension->IsrWaitMask && (Extension->IsrWaitMask & SERIAL_EV_TXEMPTY) &&
        Extension->EmptiedTransmit && (!Extension->TransmitImmediate) &&
        (!Extension->CurrentWriteIrp) && IsListEmpty(&Extension->WriteQueue)) {

        Extension->HistoryMask |= SERIAL_EV_TXEMPTY;
        if (Extension->IrpMaskLocation) {

            *Extension->IrpMaskLocation = Extension->HistoryMask;
            Extension->IrpMaskLocation = NULL;
            Extension->HistoryMask = 0;

            Extension->CurrentWaitIrp->IoStatus.Information = sizeof(ULONG);
            CyyInsertQueueDpc(
                &Extension->CommWaitDpc,
                NULL,
                NULL,
                Extension
                );

        }

        Extension->CountOfTryingToLowerRTS++;
        CyyPerhapsLowerRTS(Extension);

    }

    return FALSE;

}

BOOLEAN
CyyGiveWriteToIsr(
    IN PVOID Context
    )

/*++

Routine Description:

    Try to start off the write by slipping it in behind
    a transmit immediate char, or if that isn't available
    and the transmit holding register is empty, "tickle"
    the UART into interrupting with a transmit buffer
    empty.

    NOTE: This routine is called by KeSynchronizeExecution.

    NOTE: This routine assumes that it is called with the
          cancel spin lock held.

Arguments:

    Context - Really a pointer to the device extension.

Return Value:

    This routine always returns FALSE.

--*/

{

    PCYY_DEVICE_EXTENSION Extension = Context;

    //
    // The current stack location.  This contains all of the
    // information we need to process this particular request.
    //
    PIO_STACK_LOCATION IrpSp;

    CYY_LOCKED_PAGED_CODE();

    IrpSp = IoGetCurrentIrpStackLocation(Extension->CurrentWriteIrp);

    //
    // We might have a xoff counter request masquerading as a
    // write.  The length of these requests will always be one
    // and we can get a pointer to the actual character from
    // the data supplied by the user.
    //

    if (IrpSp->MajorFunction == IRP_MJ_WRITE) {

        Extension->WriteLength = IrpSp->Parameters.Write.Length;
        Extension->WriteCurrentChar =
            Extension->CurrentWriteIrp->AssociatedIrp.SystemBuffer;

    } else {

        Extension->WriteLength = 1;
        Extension->WriteCurrentChar =
            ((PUCHAR)Extension->CurrentWriteIrp->AssociatedIrp.SystemBuffer) +
            FIELD_OFFSET(
                SERIAL_XOFF_COUNTER,
                XoffChar
                );

    }

    //
    // The isr now has a reference to the irp.
    //

    
    SERIAL_SET_REFERENCE(
        Extension->CurrentWriteIrp,
        SERIAL_REF_ISR
        );

    //
    // Check first to see if an immediate char is transmitting.
    // If it is then we'll just slip in behind it when its
    // done.
    //

    if (!Extension->TransmitImmediate) {

        //
        // If there is no immediate char transmitting then we
        // will "re-enable" the transmit holding register empty
        // interrupt.  The 8250 family of devices will always
        // signal a transmit holding register empty interrupt
        // *ANY* time this bit is set to one.  By doing things
        // this way we can simply use the normal interrupt code
        // to start off this write.
        //
        // We've been keeping track of whether the transmit holding
        // register is empty so it we only need to do this
        // if the register is empty.
        //

        if (Extension->HoldingEmpty) {
            // enable transmit intr
            CyyTxStart(Extension);
        }

    }

    //
    // The rts line may already be up from previous writes,
    // however, it won't take much additional time to turn
    // on the RTS line if we are doing transmit toggling.
    //

    if ((Extension->HandFlow.FlowReplace & SERIAL_RTS_MASK) ==
        SERIAL_TRANSMIT_TOGGLE) {

        CyySetRTS(Extension);

    }

    return FALSE;

}

VOID
CyyCancelCurrentWrite(
    PDEVICE_OBJECT DeviceObject,
    PIRP Irp
    )

/*++

Routine Description:

    This routine is used to cancel the current write.

Arguments:

    DeviceObject - Pointer to the device object for this device

    Irp - Pointer to the IRP to be canceled.

Return Value:

    None.

--*/

{

    PCYY_DEVICE_EXTENSION Extension = DeviceObject->DeviceExtension;
    CYY_LOCKED_PAGED_CODE();

    CyyTryToCompleteCurrent(
        Extension,
        CyyGrabWriteFromIsr,
        Irp->CancelIrql,
        STATUS_CANCELLED,
        &Extension->CurrentWriteIrp,
        &Extension->WriteQueue,
        NULL,
        &Extension->WriteRequestTotalTimer,
        CyyStartWrite,
        CyyGetNextWrite,
        SERIAL_REF_CANCEL
        );

}

VOID
CyyWriteTimeout(
    IN PKDPC Dpc,
    IN PVOID DeferredContext,
    IN PVOID SystemContext1,
    IN PVOID SystemContext2
    )

/*++

Routine Description:

    This routine will try to timeout the current write.

Arguments:

    Dpc - Not Used.

    DeferredContext - Really points to the device extension.

    SystemContext1 - Not Used.

    SystemContext2 - Not Used.

Return Value:

    None.

--*/

{

    PCYY_DEVICE_EXTENSION Extension = DeferredContext;
    KIRQL OldIrql;

    UNREFERENCED_PARAMETER(SystemContext1);
    UNREFERENCED_PARAMETER(SystemContext2);

    CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyyWriteTimeout(%X)\n",
                     Extension);

    IoAcquireCancelSpinLock(&OldIrql);

    CyyTryToCompleteCurrent(Extension, CyyGrabWriteFromIsr, OldIrql,
                            STATUS_TIMEOUT, &Extension->CurrentWriteIrp,
                            &Extension->WriteQueue, NULL,
                            &Extension->WriteRequestTotalTimer,
                            CyyStartWrite, CyyGetNextWrite,
                            SERIAL_REF_TOTAL_TIMER);

    CyyDpcEpilogue(Extension, Dpc);


    CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyyWriteTimeout\n");
}

BOOLEAN
CyyGrabWriteFromIsr(
    IN PVOID Context
    )

/*++

Routine Description:


    This routine is used to grab the current irp, which could be timing
    out or canceling, from the ISR

    NOTE: This routine is being called from KeSynchronizeExecution.

    NOTE: This routine assumes that the cancel spin lock is held
          when this routine is called.

Arguments:

    Context - Really a pointer to the device extension.

Return Value:

    Always false.

--*/

{

    PCYY_DEVICE_EXTENSION Extension = Context;
    CYY_LOCKED_PAGED_CODE();

    //
    // Check if the write length is non-zero.  If it is non-zero
    // then the ISR still owns the irp. We calculate the the number
    // of characters written and update the information field of the
    // irp with the characters written.  We then clear the write length
    // the isr sees.
    //

    if (Extension->WriteLength) {

        //
        // We could have an xoff counter masquerading as a
        // write irp.  If so, don't update the write length.
        //

        if (IoGetCurrentIrpStackLocation(Extension->CurrentWriteIrp)
            ->MajorFunction == IRP_MJ_WRITE) {

            Extension->CurrentWriteIrp->IoStatus.Information =
                IoGetCurrentIrpStackLocation(
                    Extension->CurrentWriteIrp
                    )->Parameters.Write.Length -
                Extension->WriteLength;

        } else {

            Extension->CurrentWriteIrp->IoStatus.Information = 0;

        }

        //
        // Since the isr no longer references this irp, we can
        // decrement it's reference count.
        //

        SERIAL_CLEAR_REFERENCE(
            Extension->CurrentWriteIrp,
            SERIAL_REF_ISR
            );

        Extension->WriteLength = 0;

    }

    return FALSE;

}

BOOLEAN
CyyGrabXoffFromIsr(
    IN PVOID Context
    )

/*++

Routine Description:

    This routine is used to grab an xoff counter irp from the
    isr when it is no longer masquerading as a write irp.  This
    routine is called by the cancel and timeout code for the
    xoff counter ioctl.


    NOTE: This routine is being called from KeSynchronizeExecution.

    NOTE: This routine assumes that the cancel spin lock is held
          when this routine is called.

Arguments:

    Context - Really a pointer to the device extension.

Return Value:

    Always false.

--*/

{

    PCYY_DEVICE_EXTENSION Extension = Context;
    CYY_LOCKED_PAGED_CODE();

    if (Extension->CountSinceXoff) {

        //
        // This is only non-zero when there actually is a Xoff ioctl
        // counting down.
        //

        Extension->CountSinceXoff = 0;

        //
        // We decrement the count since the isr no longer owns
        // the irp.
        //

        SERIAL_CLEAR_REFERENCE(
            Extension->CurrentXoffIrp,
            SERIAL_REF_ISR
            );

    }

    return FALSE;

}

VOID
CyyCompleteXoff(
    IN PKDPC Dpc,
    IN PVOID DeferredContext,
    IN PVOID SystemContext1,
    IN PVOID SystemContext2
    )

/*++

Routine Description:

    This routine is merely used to truely complete an xoff counter irp.  It
    assumes that the status and the information fields of the irp are
    already correctly filled in.

Arguments:

    Dpc - Not Used.

    DeferredContext - Really points to the device extension.

    SystemContext1 - Not Used.

    SystemContext2 - Not Used.

Return Value:

    None.

--*/

{

    PCYY_DEVICE_EXTENSION Extension = DeferredContext;
    KIRQL OldIrql;

    UNREFERENCED_PARAMETER(SystemContext1);
    UNREFERENCED_PARAMETER(SystemContext2);

    CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyyCompleteXoff(%X)\n",
                     Extension);

    IoAcquireCancelSpinLock(&OldIrql);

    CyyTryToCompleteCurrent(Extension, NULL, OldIrql, STATUS_SUCCESS,
                            &Extension->CurrentXoffIrp, NULL, NULL,
                            &Extension->XoffCountTimer, NULL, NULL,
                            SERIAL_REF_ISR);

    CyyDpcEpilogue(Extension, Dpc);


    CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyyCompleteXoff\n");

}

VOID
CyyTimeoutXoff(
    IN PKDPC Dpc,
    IN PVOID DeferredContext,
    IN PVOID SystemContext1,
    IN PVOID SystemContext2
    )

/*++

Routine Description:

    This routine is merely used to truely complete an xoff counter irp,
    if its timer has run out.

Arguments:

    Dpc - Not Used.

    DeferredContext - Really points to the device extension.

    SystemContext1 - Not Used.

    SystemContext2 - Not Used.

Return Value:

    None.

--*/

{

    PCYY_DEVICE_EXTENSION Extension = DeferredContext;
    KIRQL OldIrql;

    UNREFERENCED_PARAMETER(SystemContext1);
    UNREFERENCED_PARAMETER(SystemContext2);

    CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyyTimeoutXoff(%X)\n", Extension);

    IoAcquireCancelSpinLock(&OldIrql);

    CyyTryToCompleteCurrent(Extension, CyyGrabXoffFromIsr, OldIrql,
                            STATUS_SERIAL_COUNTER_TIMEOUT,
                            &Extension->CurrentXoffIrp, NULL, NULL, NULL,
                            NULL, NULL, SERIAL_REF_TOTAL_TIMER);

    CyyDpcEpilogue(Extension, Dpc);

    CyyDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyyTimeoutXoff\n");
}

VOID
CyyCancelCurrentXoff(
    PDEVICE_OBJECT DeviceObject,
    PIRP Irp
    )

/*++

Routine Description:

    This routine is used to cancel the current write.

Arguments:

    DeviceObject - Pointer to the device object for this device

    Irp - Pointer to the IRP to be canceled.

Return Value:

    None.

--*/

{

    PCYY_DEVICE_EXTENSION Extension = DeviceObject->DeviceExtension;
    CYY_LOCKED_PAGED_CODE();

    CyyTryToCompleteCurrent(
        Extension,
        CyyGrabXoffFromIsr,
        Irp->CancelIrql,
        STATUS_CANCELLED,
        &Extension->CurrentXoffIrp,
        NULL,
        NULL,
        &Extension->XoffCountTimer,
        NULL,
        NULL,
        SERIAL_REF_CANCEL
        );

}

BOOLEAN
CyyGiveXoffToIsr(
    IN PVOID Context
    )

/*++

Routine Description:


    This routine starts off the xoff counter.  It merely
    has to set the xoff count and increment the reference
    count to denote that the isr has a reference to the irp.

    NOTE: This routine is called by KeSynchronizeExecution.

    NOTE: This routine assumes that it is called with the
          cancel spin lock held.

Arguments:

    Context - Really a pointer to the device extension.

Return Value:

    This routine always returns FALSE.

--*/

{

    PCYY_DEVICE_EXTENSION Extension = Context;

    //
    // The current stack location.  This contains all of the
    // information we need to process this particular request.
    //

    PSERIAL_XOFF_COUNTER Xc =
        Extension->CurrentXoffIrp->AssociatedIrp.SystemBuffer;

    CYY_LOCKED_PAGED_CODE();

    ASSERT(Extension->CurrentXoffIrp);
    Extension->CountSinceXoff = Xc->Counter;

    //
    // The isr now has a reference to the irp.
    //

    SERIAL_SET_REFERENCE(
        Extension->CurrentXoffIrp,
        SERIAL_REF_ISR
        );

    return FALSE;

}

=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\y\cyyport\log.c ===
/*++

Copyright (c) 1995,1996 Microsoft Corporation
:ts=4

Module Name:

    log.c

Abstract:

    Debug log Code for serial.

Environment:

    kernel mode only

Notes:

Revision History:

    10-08-95 : created

--*/

#include "precomp.h"
#include <stdio.h>

#if DBG
extern ULONG CyyDebugLevel;

KSPIN_LOCK LogSpinLock;

struct SERIAL_LOG_ENTRY {
    ULONG        le_sig;          // Identifying string
    ULONG_PTR    le_info1;        // entry specific info
    ULONG_PTR    le_info2;        // entry specific info
    ULONG_PTR    le_info3;        // entry specific info
}; // SERIAL_LOG_ENTRY


struct SERIAL_LOG_ENTRY *SerialLStart = 0;    // No log yet
struct SERIAL_LOG_ENTRY *SerialLPtr;
struct SERIAL_LOG_ENTRY *SerialLEnd;

// LogMask changed to LOG_MISC for debug
ULONG LogMask = 0x0;
//ULONG LogMask = LOG_MISC;

VOID
SerialDebugLogEntry(IN ULONG Mask, IN ULONG Sig, IN ULONG_PTR Info1,
                      IN ULONG_PTR Info2, IN ULONG_PTR Info3)
/*++

Routine Description:

    Adds an Entry to serial log.

Arguments:

Return Value:

    None.

--*/
{
    KIRQL irql;

typedef union _SIG {
    struct {
        UCHAR Byte0;
        UCHAR Byte1;
        UCHAR Byte2;
        UCHAR Byte3;
    } b;
    ULONG l;
} SIG, *PSIG;

    SIG sig, rsig;


    if (SerialLStart == 0) {
        return;
    }

    if ((Mask & LogMask) == 0) {
        return;
    }

    irql = KeGetCurrentIrql();

    if (irql < DISPATCH_LEVEL) {
        KeAcquireSpinLock(&LogSpinLock, &irql);
    } else {
        KeAcquireSpinLockAtDpcLevel(&LogSpinLock);
    }

    if (SerialLPtr > SerialLStart) {
        SerialLPtr -= 1;    // Decrement to next entry
    } else {
        SerialLPtr = SerialLEnd;
    }

    sig.l = Sig;
    rsig.b.Byte0 = sig.b.Byte3;
    rsig.b.Byte1 = sig.b.Byte2;
    rsig.b.Byte2 = sig.b.Byte1;
    rsig.b.Byte3 = sig.b.Byte0;

    SerialLPtr->le_sig = rsig.l;
    SerialLPtr->le_info1 = Info1;
    SerialLPtr->le_info2 = Info2;
    SerialLPtr->le_info3 = Info3;

    ASSERT(SerialLPtr >= SerialLStart);

    if (irql < DISPATCH_LEVEL) {
        KeReleaseSpinLock(&LogSpinLock, irql);
    } else {
        KeReleaseSpinLockFromDpcLevel(&LogSpinLock);
    }

    return;
}


VOID
SerialLogInit()
/*++

Routine Description:

    Init the debug log - remember interesting information in a circular buffer

Arguments:

Return Value:

    None.

--*/
{
#ifdef MAX_DEBUG
    ULONG logSize = 4096*6;
#else
    ULONG logSize = 4096*3;
#endif


    KeInitializeSpinLock(&LogSpinLock);

    SerialLStart = ExAllocatePoolWithTag(NonPagedPool, logSize, 'PyyC');

    if (SerialLStart) {
        SerialLPtr = SerialLStart;

        // Point the end (and first entry) 1 entry from the end of the segment
        SerialLEnd = SerialLStart + (logSize / sizeof(struct SERIAL_LOG_ENTRY))
            - 1;
    } else {
#if DBG

       /* DO NOTHING */;

       //
       // we used to break here, but that messed up low resource simulation
       // testing on checked builds.
       //


       // DbgBreakPoint ();
#endif
    }

    return;
}

VOID
SerialLogFree(
    )
/*++

Routine Description:

Arguments:

Return Value:

    None.

--*/
{
    if (SerialLStart) {
        ExFreePool(SerialLStart);
    }

    return;
}

#define SERIAL_DBGPRINT_BUFSIZE 512

ULONG
CyyDbgPrintEx(IN ULONG Level, PCHAR Format, ...)
{
   va_list arglist;
   ULONG rval;
   ULONG Mask;
   ULONG cb;
   UCHAR buffer[SERIAL_DBGPRINT_BUFSIZE];

   if (Level > 31) {
        Mask = Level;

   } else {
      Mask = 1 << Level;
   }

   if ((Mask & CyyDebugLevel) == 0) {
      return STATUS_SUCCESS;
   }

   va_start(arglist, Format);

   DbgPrint("Cyyport: ");

   cb = _vsnprintf(buffer, sizeof(buffer), Format, arglist);

   if (cb == -1) {
      buffer[sizeof(buffer) - 2] = '\n';
   }

   DbgPrint("%s", buffer);

//   rval = vDbgPrintEx(DPFLTR_SERIAL_ID, Level, Format, arglist);

   va_end(arglist);

   rval = STATUS_SUCCESS;

   return rval;
}

#endif // DBG
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\y\cyyports\advandlg.c ===
///////////////////////////////////////////////////////////////////////////
// Advanced Dialog Functions
///////////////////////////////////////////////////////////////////////////

#include "cyyports.h"
#include "advandlg.h"

#include <windowsx.h>

TCHAR m_szDevMgrHelp[] = _T("devmgr.hlp");

const DWORD HelpIDs[]=
{
    IDC_STATIC,         IDH_NOHELP,
    IDC_ADVANCED,       IDH_DEVMGR_PORTSET_ADVANCED, // "&Advanced" (Button)
    PP_PORT_BAUDRATE,   IDH_DEVMGR_PORTSET_BPS,      // "" (ComboBox)
    PP_PORT_DATABITS,   IDH_DEVMGR_PORTSET_DATABITS, // "" (ComboBox)
    PP_PORT_PARITY,     IDH_DEVMGR_PORTSET_PARITY,   // "" (ComboBox)
    PP_PORT_STOPBITS,   IDH_DEVMGR_PORTSET_STOPBITS, // "" (ComboBox)
    PP_PORT_FLOWCTL,    IDH_DEVMGR_PORTSET_FLOW,     // "" (ComboBox)
    IDC_RESTORE_PORT,   IDH_DEVMGR_PORTSET_DEFAULTS, // "&Restore Defaults" (Button)
    0, 0
};

//
// write out values in tenths of a sec
//
#define SECONDS_CONVERSION_FACTOR  (10)
#define NUM_POLLING_PERIODS 7

DWORD PollingPeriods[NUM_POLLING_PERIODS] = {
           -1,
            0,
            1 * SECONDS_CONVERSION_FACTOR,
            5 * SECONDS_CONVERSION_FACTOR,
            10 * SECONDS_CONVERSION_FACTOR,
            30 * SECONDS_CONVERSION_FACTOR,
            60 * SECONDS_CONVERSION_FACTOR
            };

TCHAR PeriodDescription[NUM_POLLING_PERIODS+1][40] = {
    { _T("Disabled") },
    { _T("Manually") },
    { _T("Every second") },
    { _T("Every 5 seconds") },
    { _T("Every 10 seconds") },
    { _T("Every 30 seconds") },
    { _T("Every minute") },
    { _T("Other (every %d sec)") }
    };

ULONG RxValues[4] = { 1, 4, 8, 14};

TCHAR m_szRxFIFO[] =        _T("RxFIFO");
TCHAR m_szTxFIFO[] =        _T("TxFIFO");
TCHAR m_szFifoRxMax[] =     _T("FifoRxMax");
TCHAR m_szFifoTxMax[] =     _T("FifoTxMax");

const DWORD AdvanHelpIDs[] =
{
    IDC_DESC_1,             IDH_NOHELP,
    IDC_DESC_2,             IDH_NOHELP,

    IDC_FIFO,               IDH_DEVMGR_PORTSET_ADV_USEFIFO, // "Use FIFO buffers (requires 16550 compatible UART)" (Button)

    IDC_RECEIVE_TEXT,       IDH_NOHELP,                     // "&Receive Buffer:" (Static)
    IDC_RECEIVE_SLIDER,     IDH_DEVMGR_PORTSET_ADV_RECV,    // "" (msctls_trackbar32)
    IDC_RECEIVE_LOW,        IDH_NOHELP,                     // "Low (%d)" (Static)
    IDC_RECEIVE_HIGH,       IDH_NOHELP,                     // "High (%d)" (Static)
    IDC_RXVALUE,            IDH_NOHELP,

    IDC_TRANSMIT_TEXT,      IDH_NOHELP,                     // "&Transmit Buffer:" (Static)
    IDC_TRANSMIT_SLIDER,    IDH_DEVMGR_PORTSET_ADV_TRANS,   // "" (msctls_trackbar32)
    IDC_TRANSMIT_LOW,       IDH_NOHELP,                     // "Low (%d)" (Static)
    IDC_TRANSMIT_HIGH,      IDH_NOHELP,                     // "High (%d)" (Static)
    IDC_TXVALUE,            IDH_NOHELP,

    IDC_POLL_DESC,          IDH_NOHELP,
    IDC_POLL_PERIOD,        IDH_DEVMGR_PORTSET_ADV_DEVICES, // "" (ComboBox)

    PP_PORT_NUMBER,         IDH_DEVMGR_PORTSET_ADV_NUMBER,  // "" (ComboBox)
    IDC_COMNUMTEXT,         IDH_NOHELP,                     // "COM &Port Number:" (Static)

    IDC_RESTORE,            IDH_DEVMGR_PORTSET_ADV_DEFAULTS,// "&Restore Defaults" (Button)
    0, 0
};

#define Trackbar_SetPos(hwndTb, Redraw, Position)\
    (VOID) SendMessage(hwndTb, TBM_SETPOS, (WPARAM) Redraw, (LPARAM) Position)

#define Trackbar_SetRange(hwndTb, Redraw, MinVal, MaxVal)\
    (VOID) SendMessage(hwndTb, TBM_SETRANGE, (WPARAM) Redraw, (LPARAM) MAKELONG(MinVal, MaxVal))

#define Trackbar_SetTic(hwndTb, Tic)\
    (VOID) SendMessage(hwndTb, TBM_SETTIC, (WPARAM) 0, (LPARAM) Tic)

#define Trackbar_GetPos(hwndTb)\
    (DWORD) SendMessage(hwndTb, TBM_GETPOS, (WPARAM) 0, (LPARAM) 0)



BOOL
Advanced_OnCommand(
    HWND ParentHwnd,
    int  ControlId,
    HWND ControlHwnd,
    UINT NotifyCode
    );


BOOL
Advanced_OnContextMenu(
    HWND HwndControl,
    WORD Xpos,
    WORD Ypos
    );

void
Advanced_OnHelp(
    HWND       ParentHwnd,
    LPHELPINFO HelpInfo
    );

BOOL
Advanced_OnInitDialog(
    HWND    ParentHwnd,
    HWND    FocusHwnd,
    LPARAM  Lparam
    );

/*++

Routine Description: AdvancedPortsDlgProc

    The windows proc for the Advanced properties window

Arguments:

    hDlg, uMessage, wParam, lParam: standard windows DlgProc parameters

Return Value:

    BOOL: FALSE if the page could not be created

--*/
INT_PTR APIENTRY
AdvancedPortsDlgProc(
    IN HWND   hDlg,
    IN UINT   uMessage,
    IN WPARAM wParam,
    IN LPARAM lParam
    )
{
    switch(uMessage) {
    case WM_COMMAND:
        return Advanced_OnCommand(hDlg,
                                  (int) LOWORD(wParam),
                                  (HWND)lParam,
                                  (UINT) HIWORD(wParam));

    case WM_CONTEXTMENU:
        return Advanced_OnContextMenu((HWND)wParam, LOWORD(lParam), HIWORD(lParam));

    case WM_HELP:
        Advanced_OnHelp(hDlg, (LPHELPINFO) lParam);
        break;

    case WM_HSCROLL:
        HandleTrackbarChange(hDlg, (HWND) lParam);
        return TRUE;

    case WM_INITDIALOG:
        return Advanced_OnInitDialog(hDlg, (HWND) wParam, lParam);
    }

    return FALSE;
} /* AdvancedPortsDlgProc */

BOOL
Advanced_OnCommand(
    HWND ParentHwnd,
    int  ControlId,
    HWND ControlHwnd,
    UINT NotifyCode
    )
{
    PADVANCED_DATA advancedData =
        (PADVANCED_DATA) GetWindowLongPtr(ParentHwnd, DWLP_USER);

    switch(ControlId) {

    case IDC_FIFO:
        //
        // Disable or enable the sliders
        //
        EnableFifoControls(ParentHwnd, IsDlgButtonChecked(ParentHwnd, IDC_FIFO));
        return TRUE;

    case IDOK:
        SaveAdvancedSettings(ParentHwnd, advancedData);
        // fall through

    case IDCANCEL:
        EndDialog(ParentHwnd, ControlId);
        return TRUE;

    case IDC_RESTORE:
        RestoreAdvancedDefaultState(ParentHwnd, advancedData);
        return TRUE;
    }

    return FALSE;
}

BOOL
Advanced_OnContextMenu(
    HWND HwndControl,
    WORD Xpos,
    WORD Ypos
    )
{
    WinHelp(HwndControl,
            m_szDevMgrHelp,
            HELP_CONTEXTMENU,
            (ULONG_PTR) AdvanHelpIDs);

    return FALSE;
}

void
Advanced_OnHelp(
    HWND       ParentHwnd,
    LPHELPINFO HelpInfo
    )
{
    if (HelpInfo->iContextType == HELPINFO_WINDOW) {
        WinHelp((HWND) HelpInfo->hItemHandle,
                 m_szDevMgrHelp,
                 HELP_WM_HELP,
                 (ULONG_PTR) AdvanHelpIDs);
    }
}

BOOL
Advanced_OnInitDialog(
    HWND    ParentHwnd,
    HWND    FocusHwnd,
    LPARAM  Lparam
    )
{
    PADVANCED_DATA advancedData;
    TCHAR          szFormat[200];
    TCHAR          szBuffer[200];
    advancedData = (PADVANCED_DATA) Lparam;

    //
    // Initialize the dialog box parameters
    //
    FillAdvancedDlg(ParentHwnd, advancedData);
    SetWindowLongPtr(ParentHwnd, DWLP_USER, (ULONG_PTR) advancedData);

    //
    // Set up the dialog box with these initialized parameters
    //
    InitializeControls(ParentHwnd, advancedData);

    LoadString(g_hInst, IDS_ADVANCED_SETTINGS_FOR, szFormat, CharSizeOf(szFormat));
    wsprintf(szBuffer, szFormat, advancedData->szComName);
    SetWindowText(ParentHwnd, szBuffer);

    return TRUE;
}


BOOL InternalAdvancedDialog(
    IN     HWND           ParentHwnd,
    IN OUT PADVANCED_DATA AdvancedData
    )
{
    AdvancedData->hComDB = HCOMDB_INVALID_HANDLE_VALUE;
    ComDBOpen(&AdvancedData->hComDB);

    DialogBoxParam(g_hInst,
                   MAKEINTRESOURCE(DLG_PP_ADVPORTS),
                   ParentHwnd,
                   AdvancedPortsDlgProc,
                   (DWORD_PTR) AdvancedData);

    ComDBClose(AdvancedData->hComDB);
    AdvancedData->hComDB = HCOMDB_INVALID_HANDLE_VALUE;

    return TRUE;
}


/*++

Routine Description: DisplayAdvancedDialog

    Opens the devices instance and checks to see if it is valid.  If so, then the advanced
    dialog is displayed.  Otherwise a message is displayed to the user stating that the user
    does not have write access to this particular key.

Arguments:

    ParentHwnd - Handle to the parent dialog (Port Settings Property Sheet)
    AdvancedData - hDeviceKey will be set with the device's key in the registry upon success,
                    INVALID_HANDLE_VALUE upon error

Return Value:

    None

--*/
BOOL DisplayAdvancedDialog(
    IN      HWND           ParentHwnd,
    IN OUT  PADVANCED_DATA AdvancedData
    )
{
    AdvancedData->hDeviceKey =
        SetupDiOpenDevRegKey(AdvancedData->DeviceInfoSet,
                             AdvancedData->DeviceInfoData,
                             DICS_FLAG_GLOBAL,
                             0,
                             DIREG_DEV,
                             KEY_ALL_ACCESS);

    if (AdvancedData->hDeviceKey == INVALID_HANDLE_VALUE) {
        MyMessageBox(ParentHwnd,
                     IDS_NO_WRITE_PRVILEGE,
                     IDS_NAME_PROPERTIES,
                     MB_OK | MB_ICONINFORMATION);
        return FALSE;
    }
    else {
            return InternalAdvancedDialog(ParentHwnd, AdvancedData);
    }
}

/*++

Routine Description: EnableFifoControls

    Enables/Disables all of the controls bounded by the rectangle with the Use Fifo
    checkbox.

Arguments:

    hDlg - Handle to the dialog
    enabled - flag to either enable/disable the controls

Return Value:

    None

--*/
void EnableFifoControls(IN HWND hDlg,
                        IN BOOL enabled)
{
   // The actual trackbar/slider
   EnableWindow(GetDlgItem(hDlg, IDC_RECEIVE_SLIDER), enabled);

   // "Low (xxx)" (Receive)
   EnableWindow(GetDlgItem(hDlg, IDC_RECEIVE_LOW), enabled);

   // "High (xxx)" (Receive)
   EnableWindow(GetDlgItem(hDlg, IDC_RECEIVE_HIGH), enabled);

   // "Receive Buffer:  "
   EnableWindow(GetDlgItem(hDlg, IDC_RECEIVE_TEXT), enabled);

   // "(xxx)" (Actual value of trackbar, Receive)
   EnableWindow(GetDlgItem(hDlg, IDC_RXVALUE), enabled);

   // The actual trackbar/slider
   EnableWindow(GetDlgItem(hDlg, IDC_TRANSMIT_SLIDER), enabled);

   // "Low (xxx)" (Transmit)
   EnableWindow(GetDlgItem(hDlg, IDC_TRANSMIT_LOW), enabled);

   // "High (xxx)" (Transmit)
   EnableWindow(GetDlgItem(hDlg, IDC_TRANSMIT_HIGH), enabled);

   // "Transmit Buffer" (Transmit)
   EnableWindow(GetDlgItem(hDlg, IDC_TRANSMIT_TEXT), enabled);

   // "(xxx)" (Actual value of trackbar, Trasmist)
   EnableWindow(GetDlgItem(hDlg, IDC_TXVALUE), enabled);
}

/*++

Routine Description: HandleTrackbarChange

    Whenever the user changes the trackbar thumb position, update the control
    to its right which displays its actual numeric value

Arguments:

    hDlg - Handle to the parent dialog
    hTrackbar - Handle to the trackbar whose thumb has changed

Return Value:

    None

--*/
void HandleTrackbarChange(IN HWND hDlg,
                          IN HWND hTrackbar
                          )
{
    DWORD ctrlID;
    TCHAR szCurrentValue[10];
    ULONG position;

    position = Trackbar_GetPos(hTrackbar);

    if (GetDlgCtrlID(hTrackbar) == IDC_RECEIVE_SLIDER) {
        //
        // Rx we need to translate the tick position from index to value
        //
        wsprintf(szCurrentValue, TEXT("(%d)"), RxValues[position-1]);
        ctrlID = IDC_RXVALUE;
    }
    else {
        //
        // Tx is just a straight translation between value and index
        //
        wsprintf(szCurrentValue, TEXT("(%d)"), position);
        ctrlID = IDC_TXVALUE;
    }
    SetDlgItemText(hDlg, ctrlID, szCurrentValue);
}

DWORD
RxValueToTrackbarPosition(IN OUT PDWORD RxValue
               )
{
    switch (*RxValue) {
    case 1:  return 1;
    case 4:  return 2;
    case 8:  return 3;
    case 14: return 4;
    }

    //
    // busted value
    //
    *RxValue = 14;
    return 4;
}

/*++

Routine Description:   SetTxTrackbarTicks

    Creates a tick at 1/4, half, and 3/4 across the span of the trackbar

Arguments:

    hTrackbar - handle to the trackbar that will receive the ticks
    minVal, maxVal - Range on the trackbar

Return Value:

    None

--*/
void
SetTxTrackbarTics(
    IN HWND   TrackbarHwnd
    )
{
    Trackbar_SetTic(TrackbarHwnd, 6);
    Trackbar_SetTic(TrackbarHwnd, 11);
}

/*++

Routine Description:  SetLabelText

    Sets the label's to the string identified by resID concated with the passed
    in value and closing paren.

    The final string is  [resID string][value])

Arguments:

    hLabel - handle to the control whose text is going to change
    resID  - resource ID for the beginning of the string that will become the
              label's text
    value  - number to be concated into the string


Return Value:

    None

--*/
void
SetLabelText(
    IN HWND     LabelHwnd,
    IN DWORD    ResId,
    IN ULONG    Value
    )
{
    TCHAR szTemp[258], txt[258];

    if (LoadString(g_hInst, ResId, szTemp, CharSizeOf(szTemp))) {
        lstrcpy(txt, szTemp);
        wsprintf(szTemp, _T("%d)"), Value);
        lstrcat(txt, szTemp);
    }
    else {
        lstrcpy(txt, _T("Low"));
    }
    SetWindowText(LabelHwnd, txt);
}

/*++

Routine Description: InitializeControls

    Initializes all of the controls that represent Fifo

Arguments:

    ParentHwnd - handle to the dialog
    AdvancedData - Contains all of the initial values

Return Value:

    None

--*/
void InitializeControls(
    IN HWND           ParentHwnd,
    IN PADVANCED_DATA AdvancedData
    )
{
    TCHAR    szCurrentValue[40];
    HWND     hwnd;
    int      i, periodIdx;

    //---------------------------------------------------------
    // ATTENTION: (Fanny)
    // For now disable FIFO buffers selections. This feature
    // will be enabled when we add support to this in the driver.
    #define CD1400_RXFIFO_MIN 1
    #define CD1400_RXFIFO_MAX 12
    #define CD1400_TXFIFO_MIN 1
    #define CD1400_TXFIFO_MAX 12
    SetLabelText(GetDlgItem(ParentHwnd, IDC_RECEIVE_LOW),IDS_LOW,
                    CD1400_RXFIFO_MIN);
    SetLabelText(GetDlgItem(ParentHwnd, IDC_RECEIVE_HIGH),IDS_HIGH,
                    CD1400_RXFIFO_MAX);
    SetLabelText(GetDlgItem(ParentHwnd, IDC_TRANSMIT_LOW),IDS_LOW,
                    CD1400_TXFIFO_MIN);
    SetLabelText(GetDlgItem(ParentHwnd, IDC_TRANSMIT_HIGH),IDS_HIGH,
                    CD1400_TXFIFO_MAX);
    AdvancedData->UseFifoBuffersControl = FALSE;
    AdvancedData->UseRxFIFOControl = FALSE;
    AdvancedData->UseTxFIFOControl = FALSE;
    EnableWindow(GetDlgItem(ParentHwnd, IDC_DESC_1), FALSE);
    EnableWindow(GetDlgItem(ParentHwnd, IDC_DESC_2), FALSE);
    // END ATTENTION
    //---------------------------------------------------------

    //
    // Set up the Fifo buffers checkbox
    //
    if (!AdvancedData->UseFifoBuffersControl) {
        //
        // Something went wrong with the Fifo buffers control. Disable
        // the checkbox
        //
        CheckDlgButton(ParentHwnd, IDC_FIFO, BST_UNCHECKED);
        EnableWindow(GetDlgItem(ParentHwnd, IDC_FIFO), FALSE);
        EnableFifoControls(ParentHwnd, FALSE);
    }
    else {
        EnableWindow(GetDlgItem(ParentHwnd, IDC_FIFO), TRUE);

        if (!AdvancedData->UseFifoBuffers) {
            EnableFifoControls(ParentHwnd, FALSE);
            CheckDlgButton(ParentHwnd, IDC_FIFO, BST_UNCHECKED);
        }
        else {
            EnableFifoControls(ParentHwnd, TRUE);
            CheckDlgButton(ParentHwnd, IDC_FIFO, BST_CHECKED);
        }
    }

    //
    // Set up the sliders
    //
    if (!AdvancedData->UseRxFIFOControl ||
        !AdvancedData->UseTxFIFOControl) {
        //
        // Something went wrong with the sliders.
        // Disable them
        //
        CheckDlgButton(ParentHwnd, IDC_FIFO, BST_UNCHECKED);
        EnableWindow(GetDlgItem(ParentHwnd, IDC_FIFO), FALSE);
        EnableFifoControls(ParentHwnd, FALSE);
    }
    else {
        //
        // Set up Rx Slider
        //
        hwnd = GetDlgItem(ParentHwnd, IDC_RECEIVE_SLIDER);

        Trackbar_SetRange(hwnd, TRUE, RX_MIN, 4);
        Trackbar_SetPos(hwnd,
                        TRUE,
                        RxValueToTrackbarPosition(&AdvancedData->RxFIFO));

        SetLabelText(GetDlgItem(ParentHwnd, IDC_RECEIVE_LOW),
                     IDS_LOW,
                     RX_MIN);
        SetLabelText(GetDlgItem(ParentHwnd, IDC_RECEIVE_HIGH),
                     IDS_HIGH,
                     AdvancedData->FifoRxMax);

        wsprintf(szCurrentValue, TEXT("(%d)"), AdvancedData->RxFIFO);
        SetDlgItemText(ParentHwnd, IDC_RXVALUE, szCurrentValue);

        //
        // Set up the Tx slider
        //
        hwnd = GetDlgItem(ParentHwnd, IDC_TRANSMIT_SLIDER);
        Trackbar_SetRange(hwnd, TRUE, TX_MIN, AdvancedData->FifoTxMax);
        Trackbar_SetPos(hwnd, TRUE, AdvancedData->TxFIFO);

        SetTxTrackbarTics(hwnd);

        SetLabelText(GetDlgItem(ParentHwnd, IDC_TRANSMIT_LOW),
                     IDS_LOW,
                     TX_MIN);
        SetLabelText(GetDlgItem(ParentHwnd, IDC_TRANSMIT_HIGH),
                     IDS_HIGH,
                     AdvancedData->FifoTxMax);

        wsprintf(szCurrentValue, TEXT("(%d)"), AdvancedData->TxFIFO);
        SetDlgItemText(ParentHwnd, IDC_TXVALUE, szCurrentValue);
    }

    FillPortNameCb(ParentHwnd, AdvancedData);

    if (!AdvancedData->HidePolling) {

        //
        // Add the descriptions for each polling period and select the current
        // setting
        //
        hwnd = GetDlgItem(ParentHwnd, IDC_POLL_PERIOD);
        periodIdx = NUM_POLLING_PERIODS;
        for (i = 0; i < NUM_POLLING_PERIODS; i++) {
            ComboBox_AddString(hwnd, PeriodDescription[i]);
            if (PollingPeriods[i] == AdvancedData->PollingPeriod) {
                periodIdx = i;
            }
        }

        if (periodIdx == NUM_POLLING_PERIODS) {
            wsprintf(szCurrentValue,
                     PeriodDescription[NUM_POLLING_PERIODS],
                     AdvancedData->PollingPeriod / SECONDS_CONVERSION_FACTOR);
            ComboBox_AddString(hwnd, szCurrentValue);
        }

        ComboBox_SetCurSel(hwnd, periodIdx);
    }
    else {
       ShowWindow(GetDlgItem(ParentHwnd, IDC_POLL_PERIOD), SW_HIDE);
       ShowWindow(GetDlgItem(ParentHwnd, IDC_POLL_DESC), SW_HIDE);
    }
} /* InitializeControls */


/*++

Routine Description:  RestoreAdvancedDefaultState

    Restores all values and UI to their default state, specifically:
    o All Fifo related child controls are enabled
    o The Rx trackbar is set to its max value
    o The Tx trackbar is set to its max value
    o The number of the comport is reset to its original value

Return Value:

    None

--*/
void RestoreAdvancedDefaultState(
    IN HWND           ParentHwnd,
    IN PADVANCED_DATA AdvancedData
    )
{
    USHORT ushIndex;
    TCHAR  szCurrentValue[10];
    int    i;

//-------------------------------------------------------------------------
// ATTENTION: For now, don't show anything related to FIFO buffers (Fanny)
#if 0
//-------------------------------------------------------------------------

    //
    // Set up the Fifo buffers checkbox
    //
    EnableWindow(GetDlgItem(ParentHwnd, IDC_FIFO), TRUE);

    EnableFifoControls(ParentHwnd, TRUE);
    CheckDlgButton(ParentHwnd, IDC_FIFO, BST_CHECKED);

    //
    // Set up the sliders and the static control that show their numberic value
    //
    Trackbar_SetPos(GetDlgItem(ParentHwnd, IDC_RECEIVE_SLIDER),
                    TRUE,
                    RxValueToTrackbarPosition(&AdvancedData->FifoRxMax));
    wsprintf(szCurrentValue, TEXT("(%d)"), AdvancedData->FifoRxMax);
    SetDlgItemText(ParentHwnd, IDC_RXVALUE, szCurrentValue);

    Trackbar_SetPos(GetDlgItem(ParentHwnd, IDC_TRANSMIT_SLIDER), TRUE, AdvancedData->FifoTxMax);
    wsprintf(szCurrentValue, TEXT("(%d)"), AdvancedData->FifoTxMax);
    SetDlgItemText(ParentHwnd, IDC_TXVALUE, szCurrentValue);

//-------------------------------------------------------------------------
// END ATTENTION
#endif
//-------------------------------------------------------------------------

    //
    // Set the COM name to whatever it is currently set to in the registry
    //
    ushIndex =
        (USHORT) ComboBox_FindString(GetDlgItem(ParentHwnd, PP_PORT_NUMBER),
                                     -1,
                                     AdvancedData->szComName);

    ushIndex = (ushIndex == CB_ERR) ? 0 : ushIndex;

    ComboBox_SetCurSel(GetDlgItem(ParentHwnd, PP_PORT_NUMBER), ushIndex);
    ComboBox_SetCurSel(GetDlgItem(ParentHwnd, IDC_POLL_PERIOD), POLL_PERIOD_DEFAULT_IDX);
} /* RestoreAdvancedDefaultStates */


/*++

Routine Description: FillPortNameCb

    fill in the Port Name combo box selection with a list
    of possible un-used portnames

Arguments:

    poppOurPropParams: where to save the data to
    hDlg:              address of the window

Return Value:

    ULONG: returns error messages

--*/
ULONG
FillPortNameCb(
    HWND            ParentHwnd,
    PADVANCED_DATA  AdvancedData
    )
{
    BYTE  portUsage[MAX_COM_PORT/8];
    DWORD tmp, portsReported = 0;
    int   i, j, nEntries;
    int   nCurPortNum;
    TCHAR szCom[40];
    TCHAR szInUse[40];
    char  mask, *current;
    HWND  portHwnd;

    portHwnd = GetDlgItem(ParentHwnd, PP_PORT_NUMBER);

    //
    // Check if our ComName is blank. If it is, disable the com port selector
    //
    if (_tcscmp(AdvancedData->szComName, TEXT("")) == 0) {
        EnableWindow(portHwnd, FALSE);
        EnableWindow(GetDlgItem(ParentHwnd, IDC_COMNUMTEXT), FALSE);
        return 0;
    }

    //
    // assumes szComPort filled in...
    //
    nCurPortNum = myatoi(&AdvancedData->szComName[3]);

    if (!LoadString(g_hInst, IDS_IN_USE, szInUse, CharSizeOf(szInUse))) {
        wcscpy(szInUse, _T(" (in use)"));
    }

    //
    // first tally up which ports NOT to offer in list box
    //
    ZeroMemory(portUsage, MAX_COM_PORT/8);

    if (AdvancedData->hComDB != HCOMDB_INVALID_HANDLE_VALUE) {
        ComDBGetCurrentPortUsage(AdvancedData->hComDB,
                                 portUsage,
                                 MAX_COM_PORT / 8,
                                 CDB_REPORT_BITS,
                                 &portsReported);
    }

    //
    // tag the current port as not in use so it shows up in the CB
    //
    current = portUsage + (nCurPortNum-1) / 8;
    if ((i = nCurPortNum % 8))
        *current &= ~(1 << (i-1));
    else
        *current &= ~(0x80);

    current = portUsage;
    mask = 0x1;
    for(nEntries = j = 0, i = MIN_COM-1; i < MAX_COM_PORT; i++) {

       wsprintf(szCom, TEXT("COM%d"), i+1);
       if (*current & mask) {
           wcscat(szCom, szInUse);
       }

       if (mask == (char) 0x80) {
           mask = 0x01;
           current++;
       }
       else {
           mask <<= 1;
       }

       ComboBox_AddString(portHwnd, szCom);
   }

   ComboBox_SetCurSel(portHwnd, nCurPortNum-1);
   return 0;
} /* FillPortNamesCb */

/*++

Routine Description: FillAdvancedDlg

    fill in the advanced dialog window

Arguments:

    poppOurPropParams: the data to fill in
    ParentHwnd:              address of the window

Return Value:

    ULONG: returns error messages

--*/
ULONG
FillAdvancedDlg(
    IN HWND             ParentHwnd,
    IN PADVANCED_DATA   AdvancedData
    )
{
   PSP_DEVINFO_DATA DeviceInfoData = AdvancedData->DeviceInfoData;
   HKEY  hDeviceKey;
   DWORD dwSize, dwData, dwFifo, dwError = ERROR_SUCCESS;

   //
   // Open the device key for the source device instance
   //
   hDeviceKey = AdvancedData->hDeviceKey;

   //
   // Get COM Name
   //
   dwSize = sizeof(AdvancedData->szComName);
   dwError = RegQueryValueEx(hDeviceKey,
                             m_szPortName,
                             NULL,
                             NULL,
                             (PBYTE)AdvancedData->szComName,
                             &dwSize);

   if (dwError != ERROR_SUCCESS) {
      wsprintf(AdvancedData->szComName, TEXT("COMX"));
   }

#if 0
   //
   // Get ForceFifoEnable information
   //
   AdvancedData->UseFifoBuffersControl = TRUE;

   dwSize = sizeof(dwFifo);
   dwError = RegQueryValueEx(hDeviceKey,
                             m_szFIFO,
                             NULL,
                             NULL,
                             (LPBYTE)(&dwFifo),
                             &dwSize);

   if (dwError == ERROR_SUCCESS) {
      //
      // Save this initial value
      //
      AdvancedData->UseFifoBuffersControl = TRUE;
      if (dwFifo == 0) {
         AdvancedData->UseFifoBuffers = FALSE;
      }
      else {
         AdvancedData->UseFifoBuffers = TRUE;
      }
   }
   else {
      //
      // value does not exist. Create our own
      //
      dwData = 1;
      dwSize = sizeof(dwSize);
      dwError = RegSetValueEx(hDeviceKey,
                              m_szFIFO,
                              0,
                              REG_DWORD,
                              (CONST BYTE *)(&dwData),
                              dwSize);

      if (dwError == ERROR_SUCCESS) {
         AdvancedData->UseFifoBuffers = TRUE;
      }
      else {
         AdvancedData->UseFifoBuffers = FALSE;
         AdvancedData->UseFifoBuffersControl = FALSE;
      }
   }

   //
   // Get FifoRxMax information
   //
   dwSize = sizeof(dwFifo);
   dwError = RegQueryValueEx(hDeviceKey,
                             m_szFifoRxMax,
                             NULL,
                             NULL,
                             (LPBYTE)(&dwFifo),
                             &dwFifo);

   if (dwError == ERROR_SUCCESS) {
      //
      // Save this initial value
      //
      AdvancedData->FifoRxMax = dwFifo;
      if (AdvancedData->FifoRxMax > RX_MAX) {
          AdvancedData->FifoRxMax = RX_MAX;
      }
   }
   else {
      //
      // value does not exist. Create our own
      //
      AdvancedData->FifoRxMax = RX_MAX;
   }

   //
   // Get RxFIFO information
   //
   dwSize = sizeof(dwFifo);
   dwError = RegQueryValueEx(hDeviceKey,
                             m_szFifoTxMax,
                             NULL,
                             NULL,
                             (LPBYTE)(&dwFifo),
                             &dwSize);

   if (dwError == ERROR_SUCCESS) {
      //
      // Save this initial value
      //
      AdvancedData->FifoTxMax = dwFifo;
      if (AdvancedData->FifoTxMax > TX_MAX) {
          AdvancedData->FifoTxMax = TX_MAX;
      }
   }
   else {
      //
      // value does not exist. Create our own
      //
      AdvancedData->FifoTxMax = TX_MAX;
   }

   //
   // Get RxFIFO information
   //
   AdvancedData->UseRxFIFOControl = TRUE;

   dwSize = sizeof(dwFifo);
   dwError = RegQueryValueEx(hDeviceKey,
                             m_szRxFIFO,
                             NULL,
                             NULL,
                             (LPBYTE)(&dwFifo),
                             &dwSize);

   if (dwError == ERROR_SUCCESS) {
      //
      // Save this initial value
      //
      AdvancedData->RxFIFO = dwFifo;
      if (AdvancedData->RxFIFO > RX_MAX) {
          goto SetRxFIFO;
      }
   }
   else {
SetRxFIFO:
      //
      // value does not exist. Create our own
      //
      dwData = AdvancedData->FifoRxMax;
      dwSize = sizeof(dwData);
      dwError = RegSetValueEx(hDeviceKey,
                              m_szRxFIFO,
                              0,
                              REG_DWORD,
                              (CONST BYTE *)(&dwData),
                              dwSize);

      if (dwError == ERROR_SUCCESS) {
         AdvancedData->RxFIFO = AdvancedData->FifoRxMax;
      }
      else {
         AdvancedData->RxFIFO = 0;
         AdvancedData->UseRxFIFOControl = FALSE;
      }
   }

   //
   // Get TxFIFO information
   //
   AdvancedData->UseTxFIFOControl = TRUE;

   dwSize = sizeof(dwFifo);
   dwError = RegQueryValueEx(hDeviceKey,
                             m_szTxFIFO,
                             NULL,
                             NULL,
                             (LPBYTE)(&dwFifo),
                             &dwSize);

   if (dwError == ERROR_SUCCESS) {
      //
      // Save this initial value
      //
      AdvancedData->TxFIFO = dwFifo;
      if (AdvancedData->TxFIFO > TX_MAX) {
          goto SetTxFIFO;
      }
   }
   else {
SetTxFIFO:
      //
      // value does not exist. Create our own
      //
      dwData = AdvancedData->FifoTxMax;
      dwSize = sizeof(dwData);
      dwError = RegSetValueEx(hDeviceKey,
                              m_szTxFIFO,
                              0,
                              REG_DWORD,
                              (LPBYTE)(&dwData),
                              dwSize);

      if (dwError == ERROR_SUCCESS) {
         AdvancedData->TxFIFO = AdvancedData->FifoTxMax;
      }
      else {
         AdvancedData->TxFIFO = 0;
         AdvancedData->UseTxFIFOControl = FALSE;
      }
   }
#endif

   //
   // Get Polling Period information
   //
   AdvancedData->PollingPeriod = PollingPeriods[POLL_PERIOD_DEFAULT_IDX];

   dwSize = sizeof(dwFifo);
   dwError = RegQueryValueEx(hDeviceKey,
                             m_szPollingPeriod,
                             NULL,
                             NULL,
                             (LPBYTE)(&dwFifo),
                             &dwSize);

   if (dwError == ERROR_SUCCESS) {
      //
      // Save this initial value
      //
      AdvancedData->PollingPeriod = dwFifo;
   }
   else {
      //
      // value does not exist. Create our own
      //
      dwData = AdvancedData->PollingPeriod;
      dwSize = sizeof(dwData);
      dwError = RegSetValueEx(hDeviceKey,
                              m_szPollingPeriod,
                              0,
                              REG_DWORD,
                              (LPBYTE)(&dwData),
                              dwSize);
   }

   RegCloseKey(hDeviceKey);

   if (ERROR_SUCCESS != dwError) {
      return dwError;
   }
   else {
      return ERROR_SUCCESS;
   }
} /* FillAdvancedDlg*/

void
ChangeParentTitle(
    IN HWND    Hwnd,
    IN LPCTSTR OldComName,
    IN LPCTSTR NewComName
    )
{
    INT    textLength, offset, newNameLen, oldNameLen;
    PTCHAR oldTitle = NULL, newTitle = NULL;
    PTCHAR oldLocation;

    textLength = GetWindowTextLength(Hwnd);
    if (textLength == 0) {
        return;
    }

    //
    // Account for null char and unicode
    //
    textLength++;
    oldTitle = (PTCHAR) LocalAlloc(LPTR, textLength * sizeof(TCHAR));
    if (!oldTitle) {
        return;
    }

    if (!GetWindowText(Hwnd, oldTitle, textLength)) {
        goto exit;
    }

    oldLocation = wcsstr(oldTitle, OldComName);
    if (!oldLocation) {
        goto exit;
    }

    newNameLen = lstrlen(NewComName);
    oldNameLen = lstrlen(OldComName);
    offset = newNameLen - oldNameLen;
    if (offset > 0) {
        textLength += offset;
    }
    newTitle = (PTCHAR) LocalAlloc(LPTR, textLength * sizeof(TCHAR));
    if (!newTitle) {
        goto exit;
    }

    //
    // Find the OldComName in the title and do the following
    // 1)  up to that location in the string
    // 2)  copy the new name
    // 3)  copy the remainder of the string after OldComName
    //
    offset = (INT)(oldLocation - oldTitle);
    CopyMemory(newTitle, oldTitle, offset * sizeof(TCHAR));                 // 1
    CopyMemory(newTitle + offset, NewComName, newNameLen * sizeof(TCHAR));  // 2
    lstrcpy(newTitle + offset + newNameLen, oldLocation + oldNameLen);      // 3

    SetWindowText(Hwnd, newTitle);

exit:
    if (oldTitle) {
        LocalFree(oldTitle);
    }
    if (newTitle) {
        LocalFree(newTitle);
    }
}

void
MigratePortSettings(
    LPCTSTR OldComName,
    LPCTSTR NewComName
    )
{
    TCHAR settings[BUFFER_SIZE];
    TCHAR szNew[20], szOld[20];

    lstrcpy(szOld, OldComName);
    wcscat(szOld, m_szColon);

    lstrcpy(szNew, NewComName);
    wcscat(szNew, m_szColon);

    settings[0] = TEXT('\0');
    GetProfileString(m_szPorts,
                     szOld,
                     TEXT(""),
                     settings,
                     sizeof(settings) / sizeof(TCHAR) );

    //
    // Insert the new key based on the old one
    //
    if (settings[0] == TEXT('\0')) {
        WriteProfileString(m_szPorts, szNew, m_szDefParams);
    }
    else {
        WriteProfileString(m_szPorts, szNew, settings);
    }

    //
    // Notify everybody of the changes and blow away the old key
    //
    SendWinIniChange((LPTSTR)m_szPorts);
    WriteProfileString(m_szPorts, szOld, NULL);
}

void
EnactComNameChanges(
    IN HWND             ParentHwnd,
    IN PADVANCED_DATA   AdvancedData,
    IN HKEY             hDeviceKey,
    IN UINT             NewComNum)
{
    DWORD  dwNewComNameLen;
    TCHAR  buffer[BUFFER_SIZE];
    TCHAR  szFriendlyNameFormat[LINE_LEN];
    TCHAR  szDeviceDesc[LINE_LEN];
    PTCHAR szNewComName;
    UINT   i;
    UINT   curComNum;
    BOOLEAN updateMapping = TRUE;

    SP_DEVINSTALL_PARAMS spDevInstall;

    //DbgOut(TEXT("EnactComNameChanges\n"));

    curComNum = myatoi(AdvancedData->szComName + wcslen(m_szCOM));

    if (AdvancedData->hComDB != HCOMDB_INVALID_HANDLE_VALUE) {
        BYTE   portUsage[MAX_COM_PORT/8];
        DWORD  portsReported = 0;
        char   mask;

        //
        // Check to see if the desired new COM number has been claimed in the
        // com name database.  If so, ask the user if they are *really* sure
        //

        ComDBGetCurrentPortUsage(AdvancedData->hComDB,
                                 portUsage,
                                 MAX_COM_PORT / 8,
                                 CDB_REPORT_BITS,
                                 &portsReported);
        
        if (NewComNum > portsReported) {
            DWORD newsize;
            if (NewComNum > COMDB_MAX_PORTS_ARBITRATED) {
                MyMessageBox(ParentHwnd, IDS_PORT_RENAME_ERROR, IDS_NAME_PROPERTIES,
                             MB_ICONERROR);
                return;
            }
            newsize = NewComNum;
            if (NewComNum % 1024){
                newsize = NewComNum/1024;
                newsize++;
                newsize = newsize*1024;
            }
            if (newsize > COMDB_MAX_PORTS_ARBITRATED) {
                newsize = COMDB_MAX_PORTS_ARBITRATED;
            }
            if (newsize > portsReported) {
                if (ComDBResizeDatabase(AdvancedData->hComDB, newsize) != ERROR_SUCCESS){
                    MyMessageBox(ParentHwnd, IDS_PORT_RENAME_ERROR, IDS_NAME_PROPERTIES,
                                 MB_ICONERROR);
                    return;                    
                }
            }

            // We are assuming that NewComNum is <= MAX_COM_PORT.
            ComDBGetCurrentPortUsage(AdvancedData->hComDB,
                                     portUsage,
                                     MAX_COM_PORT / 8,
                                     CDB_REPORT_BITS,
                                     &portsReported);
        }
        
        if ((i = NewComNum % 8))
            mask = 1 << (i-1);
        else
            mask = (char) 0x80;
        if ((portUsage[(NewComNum-1)/8] & mask) &&
            MyMessageBox(ParentHwnd, IDS_PORT_IN_USE, IDS_NAME_PROPERTIES,
                         MB_YESNO | MB_ICONINFORMATION) == IDNO) {
            //
            // Port has been previously claimed and user doesn't want to override
            //
            return;
        }
    }

    if (!QueryDosDevice(AdvancedData->szComName, buffer, BUFFER_SIZE-1)) {
        //
        // The old com name does not exist in the mapping.  Basically, the symbolic
        // link from COMX => \Device\SerialY has been broken.  Just change the
        // value in the registry and the friendly name for the device; don't
        // change the dos symbolic name b/c one does not exist
        //
        updateMapping = FALSE;
    }
    else {
        TCHAR  szComFileName[20]; // more than enough for "\\.\COMXxxx"
        HANDLE hCom;

        lstrcpy(szComFileName, L"\\\\.\\");
        lstrcat(szComFileName, AdvancedData->szComName);

        //
        // Make sure that the port has not been opened by another application
        //
        hCom = CreateFile(szComFileName, GENERIC_READ, 0, NULL, OPEN_EXISTING,
                          FILE_ATTRIBUTE_NORMAL, NULL);

        //
        // If the file handle is invalid, then the com port is open, warn the user
        //
        if (hCom == INVALID_HANDLE_VALUE &&
            MyMessageBox(ParentHwnd, IDS_PORT_OPEN, IDS_NAME_PROPERTIES,
                         MB_YESNO | MB_ICONERROR) == IDNO) {
            return;
        }

        if (hCom != INVALID_HANDLE_VALUE) {
            CloseHandle(hCom);
        }
    }

    szNewComName = AdvancedData->szNewComName;
    wsprintf(szNewComName, _T("COM%d"), NewComNum);
    dwNewComNameLen = ByteCountOf(wcslen(szNewComName) + 1);

    //
    // Change the name in the symbolic namespace.
    // First try to get what device the old com name mapped to
    // (ie something like \Device\Serial0).  Then remove the mapping.  If
    // the user isn't an admin, then this will fail and the dialog will popup.
    // Finally, map the new name to the old device retrieved from the
    // QueryDosDevice
    //
    if (updateMapping) {
        BOOL removed;
        HKEY hSerialMap;

        if (!QueryDosDevice(AdvancedData->szComName, buffer, BUFFER_SIZE-1)) {
            //
            // This shouldn't happen because the previous QueryDosDevice call
            // succeeded
            //
            MyMessageBox(ParentHwnd, IDS_PORT_RENAME_ERROR, IDS_NAME_PROPERTIES,
                         MB_ICONERROR);
            return;
        }

        //
        // If this fails, then the following define will just replace the current
        // mapping.
        //
        removed = DefineDosDevice(DDD_REMOVE_DEFINITION, AdvancedData->szComName, NULL);

        if (!DefineDosDevice(DDD_RAW_TARGET_PATH, szNewComName, buffer)) {
            //
            // error, first fix up the remove definition and restore the old
            // mapping
            //
            if (removed) {
                DefineDosDevice(DDD_RAW_TARGET_PATH, AdvancedData->szComName, buffer);
            }

            MyMessageBox(ParentHwnd, IDS_PORT_RENAME_ERROR, IDS_NAME_PROPERTIES,
                         MB_ICONERROR);

            return;
        }

        //
        // Set the \\HARDWARE\DEVICEMAP\SERIALCOMM field
        //
        if (RegOpenKeyEx(HKEY_LOCAL_MACHINE,
                         m_szRegSerialMap,
                         0,
                         KEY_ALL_ACCESS,
                         &hSerialMap) == ERROR_SUCCESS) {

            TCHAR  szSerial[BUFFER_SIZE];
            DWORD  dwSerialSize, dwEnum, dwType, dwComSize;
            TCHAR  szCom[BUFFER_SIZE];

            i = 0;
            do {
                dwSerialSize = CharSizeOf(szSerial);
                dwComSize = sizeof(szCom);
                dwEnum = RegEnumValue(hSerialMap,
                                      i++,
                                      szSerial,
                                      &dwSerialSize,
                                      NULL,
                                      &dwType,
                                      (LPBYTE)szCom,
                                      &dwComSize);

                if (dwEnum == ERROR_SUCCESS) {
                    if(dwType != REG_SZ)
                        continue;

                    if (wcscmp(szCom, AdvancedData->szComName) == 0) {
                        RegSetValueEx(hSerialMap,
                                        szSerial,
                                        0,
                                        REG_SZ,
                                        (PBYTE) szNewComName,
                                        dwNewComNameLen);
                                        break;
                    }
                }

            } while (dwEnum == ERROR_SUCCESS);
        }

        RegCloseKey(hSerialMap);
    }

    //
    // Update the com db
    //
    if (AdvancedData->hComDB != HCOMDB_INVALID_HANDLE_VALUE) {

        ComDBReleasePort(AdvancedData->hComDB, (DWORD) curComNum);

        ComDBClaimPort(AdvancedData->hComDB, (DWORD) NewComNum, TRUE, NULL);
    }

    //
    // Set the friendly name in the form of DeviceDesc (COM#)
    //
    if (ReplaceFriendlyName(AdvancedData->DeviceInfoSet,
                            AdvancedData->DeviceInfoData,
                            szNewComName) == FALSE) {
        // ReplaceFriendlyName failed. Use original code.
        if (LoadString(g_hInst,
                       IDS_FRIENDLY_FORMAT,
                       szFriendlyNameFormat,
                       CharSizeOf(szFriendlyNameFormat)) &&
            SetupDiGetDeviceRegistryProperty(AdvancedData->DeviceInfoSet,
                                             AdvancedData->DeviceInfoData,
                                             SPDRP_DEVICEDESC,
                                             NULL,
                                             (PBYTE) szDeviceDesc,
                                             sizeof(szDeviceDesc),
                                             NULL)) {
            wsprintf(buffer, szFriendlyNameFormat, szDeviceDesc, szNewComName);

        }
        else {
            //
            // Use the COM port name straight out
            //
            lstrcpy(buffer, szNewComName);
        }

        SetupDiSetDeviceRegistryProperty(AdvancedData->DeviceInfoSet,
                                         AdvancedData->DeviceInfoData,
                                         SPDRP_FRIENDLYNAME,
                                         (PBYTE) buffer,
                                         ByteCountOf(wcslen(buffer)+1));
    }

    //
    // Set the parent dialog's title to reflect the change in the com port's name
    //
    ChangeParentTitle(GetParent(ParentHwnd), AdvancedData->szComName, szNewComName);
    MigratePortSettings(AdvancedData->szComName, szNewComName);

    //
    // Update the PortName value in the devnode
    //
    RegSetValueEx(hDeviceKey,
                  m_szPortName,
                  0,
                  REG_SZ,
                  (PBYTE)szNewComName,
                  dwNewComNameLen);

    //
    // Now broadcast this change to the device manager
    //
    ZeroMemory(&spDevInstall, sizeof(SP_DEVINSTALL_PARAMS));
    spDevInstall.cbSize = sizeof(SP_DEVINSTALL_PARAMS);

    if (SetupDiGetDeviceInstallParams(AdvancedData->DeviceInfoSet,
                                      AdvancedData->DeviceInfoData,
                                      &spDevInstall)) {
        spDevInstall.Flags |= DI_PROPERTIES_CHANGE;
        SetupDiSetDeviceInstallParams(AdvancedData->DeviceInfoSet,
                                      AdvancedData->DeviceInfoData,
                                      &spDevInstall);
    }
}

/*++

Routine Description: SaveAdvancedSettings

    saves the advanced box settings back to the registry, if any were
    changed

Arguments:

    AdvancedData: holds the current settings and the location of of
                   the device in the registry
    ParentHwnd:          address of the window

Return Value:

    ULONG: returns error messages

--*/
ULONG
SaveAdvancedSettings(
    IN HWND ParentHwnd,
    IN PADVANCED_DATA AdvancedData
    )
{
   HKEY   hDeviceKey;
   DWORD  dwSize, dwData;

   UINT  i = CB_ERR, curComNum, newComNum = CB_ERR;
   //UINT  uiDlgButtonChecked;
   //DWORD dwRxPosition, dwTxPosition;
   DWORD dwPollingPeriod;

   SP_DEVINSTALL_PARAMS spDevInstall;

   //DbgOut(TEXT("SaveAdvancedSettings\n"));

   //
   // Grab all of the new settings
   //

   //uiDlgButtonChecked = IsDlgButtonChecked(ParentHwnd, IDC_FIFO);

   //dwTxPosition = Trackbar_GetPos(GetDlgItem(ParentHwnd, IDC_TRANSMIT_SLIDER));
   //dwRxPosition = Trackbar_GetPos(GetDlgItem(ParentHwnd, IDC_RECEIVE_SLIDER));

   //
   // Index is actually into the array of values
   //
   //dwRxPosition = RxValues[dwRxPosition-1];

   curComNum = myatoi(AdvancedData->szComName + wcslen(m_szCOM));
   newComNum = ComboBox_GetCurSel(GetDlgItem(ParentHwnd, PP_PORT_NUMBER));

   if (newComNum == CB_ERR) {
       newComNum = curComNum;
   }
   else {
       newComNum++;
   }

   i = ComboBox_GetCurSel(GetDlgItem(ParentHwnd, IDC_POLL_PERIOD));

   if (i == CB_ERR || i >= NUM_POLLING_PERIODS) {
       dwPollingPeriod = AdvancedData->PollingPeriod;
   }
   else {
       dwPollingPeriod = PollingPeriods[i];
   }

   //
   // See if they changed anything
   //
   if (//((AdvancedData->UseFifoBuffers  && uiDlgButtonChecked == BST_CHECKED) ||
       // (!AdvancedData->UseFifoBuffers && uiDlgButtonChecked == BST_UNCHECKED)) &&
       //AdvancedData->RxFIFO == dwRxPosition &&
       //AdvancedData->TxFIFO == dwTxPosition &&
       AdvancedData->PollingPeriod == dwPollingPeriod &&
       newComNum == curComNum) {
      //
      // They didn't change anything. Just exit.
      //
      return ERROR_SUCCESS;
   }

   //
   // Open the device key for the source device instance
   //
   hDeviceKey = SetupDiOpenDevRegKey(AdvancedData->DeviceInfoSet,
                                     AdvancedData->DeviceInfoData,
                                     DICS_FLAG_GLOBAL,
                                     0,
                                     DIREG_DEV,
                                     KEY_ALL_ACCESS);

   if (INVALID_HANDLE_VALUE == hDeviceKey) {
      //
      // Not much we can do without a valid key, exit gracefully
      //
      return ERROR_SUCCESS;
   }

   //
   // Check to see if the user changed the COM port name
   //
   if (newComNum != curComNum) {
      EnactComNameChanges(ParentHwnd,
                          AdvancedData,
                          hDeviceKey,
                          newComNum);
   }


//   if ((AdvancedData->UseFifoBuffers  && uiDlgButtonChecked == BST_UNCHECKED) ||
//       (!AdvancedData->UseFifoBuffers && uiDlgButtonChecked == BST_CHECKED)) {
//      //
//      // They changed the Use Fifo checkbox.
//      //
//      dwData = (uiDlgButtonChecked == BST_CHECKED) ? 1 : 0;
//      dwSize = sizeof(dwData);
//      RegSetValueEx(hDeviceKey,
//                    m_szFIFO,
//                    0,
//                    REG_DWORD,
//                    (CONST BYTE *)(&dwData),
//                    dwSize);
//   }
//
//   if (AdvancedData->RxFIFO != dwRxPosition) {
//      //
//      // They changed the RxFIFO setting
//      //
//      dwData = dwRxPosition;
//      dwSize = sizeof(dwData);
//      RegSetValueEx(hDeviceKey,
//                    m_szRxFIFO,
//                    0,
//                    REG_DWORD,
//                    (CONST BYTE *)(&dwData),
//                    dwSize);
//   }
//
//   if (AdvancedData->TxFIFO != dwTxPosition) {
//      //
//      // They changed the TxFIFO setting
//      //
//      dwData = dwTxPosition;
//      dwSize = sizeof(dwData);
//      RegSetValueEx(hDeviceKey,
//                    m_szTxFIFO,
//                    0,
//                    REG_DWORD,
//                    (CONST BYTE *)(&dwData),
//                    dwSize);
//   }

   if (AdvancedData->PollingPeriod != dwPollingPeriod) {
      //
      // They changed the polling period
      //
      dwData = dwPollingPeriod;
      dwSize = sizeof(dwData);
      RegSetValueEx(hDeviceKey,
                    m_szPollingPeriod,
                    0,
                    REG_DWORD,
                    (CONST BYTE *)(&dwData),
                    dwSize);

      //
      // Don't really care if this fails, nothing else we can do
      //
      CM_Reenumerate_DevNode(AdvancedData->DeviceInfoData->DevInst,
                             CM_REENUMERATE_NORMAL);
   }

   RegCloseKey(hDeviceKey);

   SetupDiCallClassInstaller(DIF_PROPERTYCHANGE,
                             AdvancedData->DeviceInfoSet,
                             AdvancedData->DeviceInfoData);

   return ERROR_SUCCESS;
} /* SaveAdvancedSettings*/



/*++

Routine Description:

    Prototype to allow serial port vendors to override the advanced dialog
    represented by the COM port specified by DeviceInfoSet and DeviceInfoData.

    To override the advanced page, place a value named EnumAdvancedDialog under
    the same key in which you would put your EnumPropPages32 value.  The format
    of the value is exactly the same as Enum...32 as well.

Arguments:

    ParentHwnd  - the parent window of the window to be displayed

    HidePollingUI - If TRUE, hide all UI that deals with polling.

    DeviceInfoSet, DeviceInfoData - SetupDi structures representing the COM port

    Reserved - Unused

Return Value:

    TRUE if the user pressed OK, FALSE if Cancel was pressed
--*/
BOOL
CyyportAdvancedDialog(
    IN HWND             ParentHwnd,
    IN BOOL             HidePollingUI,
    IN HDEVINFO         DeviceInfoSet,
    IN PSP_DEVINFO_DATA DeviceInfoData,
    IN PVOID            Reserved
    )
{
    PADVANCED_DATA pAdvancedData = NULL; 

    //DbgOut(TEXT("CyzportAdvancedDialog\n"));
    
    pAdvancedData = (PADVANCED_DATA) LocalAlloc(LPTR, sizeof(ADVANCED_DATA));

//**************************************************************
// TEST Debugger
//    DebugBreak();
//**************************************************************

    if (pAdvancedData == NULL) {

        ErrMemDlg(ParentHwnd);
        return FALSE;
    }

    pAdvancedData->HidePolling = HidePollingUI;
    pAdvancedData->DeviceInfoSet  = DeviceInfoSet;
    pAdvancedData->DeviceInfoData = DeviceInfoData;

    DisplayAdvancedDialog(ParentHwnd, pAdvancedData);
    
    if (pAdvancedData != NULL) {
        LocalFree(pAdvancedData);
    }

    return TRUE;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\y\cyyports\portstr.h ===
#ifndef PORTSTR_H
#define PORTSTR_H

//
//  exported from ports.c
//
extern TCHAR  m_szColon[];
extern TCHAR  m_szComma[];
extern TCHAR  m_szCloseParen[];
extern TCHAR  m_szPorts[];
extern TCHAR  m_szCOM[];
extern TCHAR  m_szSERIAL[];

extern TCHAR m_szRegSerialMap[];

extern TCHAR m_szFIFO[];
extern TCHAR m_szDosDev[];
extern TCHAR m_szPollingPeriod[];
extern TCHAR m_szPortName[];


// Strings needed for parallel port installation.
//
extern TCHAR m_szPortSubClass[];
extern TCHAR m_szParallelClassDevName[];
extern TCHAR m_szParallelClassHwId[];

extern int m_nBaudRates[];

extern TCHAR m_sz9600[];

extern TCHAR m_szDefParams[];
extern short m_nDataBits[];
extern TCHAR *m_pszParitySuf[];
extern TCHAR *m_pszLenSuf[];
extern TCHAR *m_pszStopSuf[];
extern TCHAR *m_pszFlowSuf[];

#endif // PORTSTR_H
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\y\cyyports\advandlg.h ===
#ifndef PP_H
#define PP_H

#define SERIAL_ADVANCED_SETTINGS
#include "msports.h"

#ifdef USE_P_TRACE_ERR
#define P_TRACE_ERR(_x) MessageBox( GetFocus(), TEXT(_x), TEXT("ports traceerr"), MB_OK | MB_ICONINFORMATION );
#define W_TRACE_ERR(_x) MessageBox( GetFocus(), _x, TEXT("ports traceerr"), MB_OK | MB_ICONINFORMATION );
#else
#define P_TRACE_ERR(_x)
#define W_TRACE_ERR(_x)
#endif

#define DO_COM_PORT_RENAMES

#define RX_MIN 1
#define RX_MAX 14
#define TX_MIN 1
#define TX_MAX 16

TCHAR m_szDevMgrHelp[];

#if defined(_X86_)
//
// For NEC PC98. Following definition comes from user\inc\kbd.h.
// The value must be the same as value in kbd.h.
//
#define NLSKBD_OEM_NEC   0x0D
#endif // FE_SB && _X86_

//
// Structures
//

typedef struct _ADVANCED_DATA
{
    BOOL   HidePolling;
    BOOL   UseFifoBuffersControl;
    BOOL   UseFifoBuffers;
    BOOL   UseRxFIFOControl;
    BOOL   UseTxFIFOControl;
    DWORD  FifoRxMax;
    DWORD  FifoTxMax;
    DWORD  RxFIFO;
    DWORD  TxFIFO;
    DWORD  PollingPeriod;

    TCHAR  szComName[20];
    TCHAR  szNewComName[20];

    HKEY             hDeviceKey;         // (like ROOT\LEGACY_BEEP\0000)
    HCOMDB           hComDB;

    HDEVINFO         DeviceInfoSet;
    PSP_DEVINFO_DATA DeviceInfoData;

} ADVANCED_DATA, *PADVANCED_DATA;


///////////////////////////////////////////////////////////////////////////////////
// Advanced Dialog Prototypes
///////////////////////////////////////////////////////////////////////////////////

ULONG
FillPortNameCb(
    HWND           ParentHwnd,
    PADVANCED_DATA Params
    );

INT_PTR APIENTRY
AdvancedPortsDlgProc(
    IN HWND   hDlg,
    IN UINT   uMessage,
    IN WPARAM wParam,
    IN LPARAM lParam
    );

ULONG
FillAdvancedDlg(
    IN HWND             DialogHwnd,
    IN PADVANCED_DATA   AdvancedData
    );

BOOL
DisplayAdvancedDialog(
    IN     HWND             DialogHwnd,
    IN OUT PADVANCED_DATA   AdvancedData
);

void
InitializeControls(
    IN HWND             DialogHwnd,
    IN PADVANCED_DATA   AdvancedData
    );

void
RestoreAdvancedDefaultState(
    IN HWND             DialogHwnd,
    IN PADVANCED_DATA   AdvancedData
    );

ULONG
SaveAdvancedSettings(
    IN HWND             DialogHwnd,
    IN PADVANCED_DATA   AdvancedData
    );

void
SetTrackbarTicks(
    IN HWND   TrackbarHwnd,
    IN DWORD  MinVal,
    IN DWORD  MaxVal
    );

void
SetLabelText(
    IN HWND  LabelHwnd, 
    IN DWORD ResId,
    IN ULONG Value
    );

void
HandleTrackbarChange(
    IN HWND DialogHwnd, 
    IN HWND TrackbarHwnd
    );

void
EnableFifoControls(
    HWND DialogHwnd,
    BOOL Enabled
    );

// Context help header file and arrays for devmgr ports tab
// Created 2/21/98 by WGruber NTUA and DoronH NTDEV

//
// "Cyclom-Y Port Advanced Settings" Dialog Box
//

#define IDH_NOHELP      ((DWORD)-1)

#define IDH_DEVMGR_PORTSET_ADVANCED     15840   // "&Advanced" (Button)
#define IDH_DEVMGR_PORTSET_BPS      15841       // "" (ComboBox)
#define IDH_DEVMGR_PORTSET_DATABITS     15842   // "" (ComboBox)
#define IDH_DEVMGR_PORTSET_PARITY       15843   // "" (ComboBox)
#define IDH_DEVMGR_PORTSET_STOPBITS     15844   // "" (ComboBox)
#define IDH_DEVMGR_PORTSET_FLOW     15845       // "" (ComboBox)
#define IDH_DEVMGR_PORTSET_DEFAULTS     15892   // "&Restore Defaults" (Button)

//
// "Advanced Communications Port Properties" Dialog Box
//
#define IDH_DEVMGR_PORTSET_ADV_USEFIFO  16885   // "&Use FIFO buffers (requires 16550 compatible UART)" (Button)
#define IDH_DEVMGR_PORTSET_ADV_TRANS    16842   // "" (msctls_trackbar32)
#define IDH_DEVMGR_PORTSET_ADV_DEVICES  161027  // "" (ComboBox)
#define IDH_DEVMGR_PORTSET_ADV_RECV         16821       // "" (msctls_trackbar32)
#define IDH_DEVMGR_PORTSET_ADV_NUMBER   16846   // "" (ComboBox)
#define IDH_DEVMGR_PORTSET_ADV_DEFAULTS 16844

#endif // PP_H
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\y\cyyports\cyyports.c ===
/** FILE: ports.c ********** Module Header ********************************
 *
 *  DLL entry point.
 *
 *
 *  Copyright (C) 2000 Cyclades Corporation
 *
 *************************************************************************/
//==========================================================================
//                                Include files
//==========================================================================
// C Runtime
#include <stddef.h>
#include <stdlib.h>
#include <string.h>

// Application specific
#include "cyyports.h"
#include <msports.h>


//==========================================================================
//                                Globals
//==========================================================================

HANDLE  g_hInst  = NULL;

TCHAR g_szErrMem[ 200 ];            //  Low memory message
TCHAR g_szPortsApplet[ 30 ];        //  "Ports Control Panel Applet" title
TCHAR g_szNull[]  = TEXT("");       //  Null string

TCHAR  m_szColon[]      = TEXT( ":" );
TCHAR  m_szPorts[]      = TEXT( "Ports" );
TCHAR  m_szCOM[]        = TEXT( "COM" );

//
//  NT Registry keys to find COM port to Serial Device mapping
//
TCHAR m_szRegSerialMap[]    = TEXT( "Hardware\\DeviceMap\\SerialComm" );

//
//  Registry Serial Port Advanced I/O settings key and valuenames
//
TCHAR m_szFIFO[]            = TEXT( "ForceFifoEnable" );

TCHAR m_szPollingPeriod[]   = TEXT( "PollingPeriod" );
TCHAR m_szPortName[]        = REGSTR_VAL_PORTNAME;

TCHAR m_szDefParams[]       = TEXT( "9600,n,8,1" );


//==========================================================================
//                            Local Function Prototypes
//==========================================================================
LPTSTR GetDIFString(IN DI_FUNCTION Func);


//==========================================================================
//                                Dll Entry Point
//==========================================================================
BOOL APIENTRY LibMain( HANDLE hDll, DWORD dwReason, LPVOID lpReserved )
{
   
    switch( dwReason )
    {
    case DLL_PROCESS_ATTACH:
//      DbgOut(TEXT("cyyports DLL_PROCESS_ATTACH\n"));
        g_hInst = hDll;
        DisableThreadLibraryCalls(hDll);
        InitStrings();

        break;

    case DLL_PROCESS_DETACH:
//      DbgOut(TEXT("cyyports DLL_PROCESS_DETACH\n"));
        break;

    default:
        break;
    }

    return TRUE;
}


//==========================================================================
//                                Functions
//==========================================================================



HRESULT
CyyportCoInstaller(
    IN DI_FUNCTION      InstallFunction,
    IN HDEVINFO         DeviceInfoSet,
    IN PSP_DEVINFO_DATA DeviceInfoData OPTIONAL,
    IN OUT PCOINSTALLER_CONTEXT_DATA    Context
)
/*++

Routine Description:

    This routine is a Co-Installer for the Cyclom-Y Port device.

Arguments:

    InstallFunction - Specifies the device installer function code indicating
        the action being performed.

    DeviceInfoSet - Supplies a handle to the device information set being
        acted upon by this install action.

    DeviceInfoData - Optionally, supplies the address of a device information
        element being acted upon by this install action.

    Context - Points to a coinstaller-specific context structure for this 
        installation request. 

Return Value:

    If this function successfully completed the requested action, the return
        value is NO_ERROR.

    If an error occurred while attempting to perform the requested action, a
        Win32 error code is returned.

--*/
{
    DWORD   dwSize;
    TCHAR   instanceId[MAX_DEVICE_ID_LEN];
    TCHAR   parentIdPrefix[50];
    HKEY    enumKey,instKey;
    BOOL    gotParentIdPrefix;
    DWORD   Status = NO_ERROR;


//  #if DBG
//  {
//   TCHAR buf[500];
//   wsprintf(buf, TEXT("CyyportCoInstaller:InstallFunction(%s) PostProcessing:%d\n"), GetDIFString(InstallFunction), Context->PostProcessing);
//   DbgOut(buf);
//  }
//  #endif

    switch(InstallFunction) {
        case DIF_INSTALLDEVICE :
            //
            // We should not copy any INF files until the install has completed
            // like the primary INF, all secondary INF's must exist on each disk
            // of a multi-disk install.
            //

            if(!Context->PostProcessing) {
                Status = ERROR_DI_POSTPROCESSING_REQUIRED;
            } else {
                if (Context->InstallResult != NO_ERROR) {
                    DbgOut(TEXT("DIF_INSTALLDEVICE PostProcessing on failure"));
                    Status = Context->InstallResult;
                    break;
                }

                ReplaceFriendlyName(DeviceInfoSet,DeviceInfoData,NULL);
            }
            break;
        default :
            break;
    }
    return Status;
}

LPTSTR GetDIFString(IN DI_FUNCTION Func)
/*++

Routine Description:

    Given a DI_FUNCTION value, returns a text representation.

Arguments:

    Func - DI_FUNCTON value

Return Value:

    Text string if value is known.  Hex representation if not.

--*/
{
    static TCHAR buf[32];
#define MakeCase(d)  case d: return TEXT(#d)
    switch (Func)
    {
        MakeCase(DIF_SELECTDEVICE);
        MakeCase(DIF_INSTALLDEVICE);
        MakeCase(DIF_ASSIGNRESOURCES);
        MakeCase(DIF_PROPERTIES);
        MakeCase(DIF_REMOVE);
        MakeCase(DIF_FIRSTTIMESETUP);
        MakeCase(DIF_FOUNDDEVICE);
        MakeCase(DIF_SELECTCLASSDRIVERS);
        MakeCase(DIF_VALIDATECLASSDRIVERS);
        MakeCase(DIF_INSTALLCLASSDRIVERS);
        MakeCase(DIF_CALCDISKSPACE);
        MakeCase(DIF_DESTROYPRIVATEDATA);
        MakeCase(DIF_VALIDATEDRIVER);
        MakeCase(DIF_MOVEDEVICE);
        MakeCase(DIF_DETECT);
        MakeCase(DIF_INSTALLWIZARD);
        MakeCase(DIF_DESTROYWIZARDDATA);
        MakeCase(DIF_PROPERTYCHANGE);
        MakeCase(DIF_ENABLECLASS);
        MakeCase(DIF_DETECTVERIFY);
        MakeCase(DIF_INSTALLDEVICEFILES);
        MakeCase(DIF_UNREMOVE);
        MakeCase(DIF_SELECTBESTCOMPATDRV);
        MakeCase(DIF_ALLOW_INSTALL);
        MakeCase(DIF_REGISTERDEVICE);
        MakeCase(DIF_INSTALLINTERFACES);
        MakeCase(DIF_DETECTCANCEL);
        MakeCase(DIF_REGISTER_COINSTALLERS);
        MakeCase(DIF_NEWDEVICEWIZARD_FINISHINSTALL);
        MakeCase(DIF_ADDPROPERTYPAGE_ADVANCED);
        MakeCase(DIF_TROUBLESHOOTER);
        default:
            wsprintf(buf, TEXT("%x"), Func);
            return buf;
    }
}

void InitStrings(void)
{
    DWORD  dwClass, dwShare;
    TCHAR  szClass[ 40 ];

    LoadString(g_hInst, 
               INITS,
               g_szErrMem,
               CharSizeOf(g_szErrMem));
    LoadString(g_hInst, 
               IDS_INIT_NAME,
               g_szPortsApplet,
               CharSizeOf(g_szPortsApplet));

}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyclad-z\cyclad-z.h ===
/*--------------------------------------------------------------------------
*
*   Copyright (C) Cyclades Corporation, 2000-2001.
*   All rights reserved.
*
*   Cyclades-Z Enumerator Driver
*	
*   This file:      cyclad-z.h
*
*   Description:    This module contains the common private declarations 
*                   for the cyzport enumerator.
*					
*   Notes:			This code supports Windows 2000 and Windows XP,
*                   x86 and ia64 processors.
*
*   Complies with Cyclades SW Coding Standard rev 1.3.
*
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*	Change History
*
*--------------------------------------------------------------------------
*   Initial implementation based on Microsoft sample code.
*
*--------------------------------------------------------------------------
*/

#ifndef CYCLADZ_H
#define CYCLADZ_H

#include "cyzhw.h"

#define DEVICE_OBJECT_NAME_LENGTH   128     // Copied from serial.h

#define CYZ_PDO_NAME_BASE L"\\Cyz\\"


#define CYCLADZ_POOL_TAG (ULONG)'ZcyC'

#undef ExAllocatePool
#define ExAllocatePool(type, size) \
   ExAllocatePoolWithTag(type, size, CYCLADZ_POOL_TAG)


#pragma warning(error:4100)   // Unreferenced formal parameter
#pragma warning(error:4705)   // Statement has no effect


//
// Debugging Output Levels
//

#define SER_DBG_STARTUP_SHUTDOWN_MASK  0x0000000F
#define SER_DBG_SS_NOISE               0x00000001
#define SER_DBG_SS_TRACE               0x00000002
#define SER_DBG_SS_INFO                0x00000004
#define SER_DBG_SS_ERROR               0x00000008

#define SER_DBG_PNP_MASK               0x000000F0
#define SER_DBG_PNP_NOISE              0x00000010
#define SER_DBG_PNP_TRACE              0x00000020
#define SER_DBG_PNP_INFO               0x00000040
#define SER_DBG_PNP_ERROR              0x00000080
#define SER_DBG_PNP_DUMP_PACKET        0x00000100

#define SER_DBG_IOCTL_TRACE            0x00000200
#define SER_DBG_POWER_TRACE            0x00000400
#define SER_DBG_CYCLADES               0x00000800

#define SER_DEFAULT_DEBUG_OUTPUT_LEVEL 0x00000000
//#define SER_DEFAULT_DEBUG_OUTPUT_LEVEL 0xFFFFFFFF


#if DBG
#define Cycladz_KdPrint(_d_,_l_, _x_) \
            if ((_d_)->DebugLevel & (_l_)) { \
               DbgPrint ("Cyclad-z: "); \
               DbgPrint _x_; \
            }

#define Cycladz_KdPrint_Cont(_d_,_l_, _x_) \
            if ((_d_)->DebugLevel & (_l_)) { \
               DbgPrint _x_; \
            }

#define Cycladz_KdPrint_Def(_l_, _x_) \
            if (SER_DEFAULT_DEBUG_OUTPUT_LEVEL & (_l_)) { \
               DbgPrint ("Cyclad-z: "); \
               DbgPrint _x_; \
            }

#define TRAP() DbgBreakPoint()
#define DbgRaiseIrql(_x_,_y_) KeRaiseIrql(_x_,_y_)
#define DbgLowerIrql(_x_) KeLowerIrql(_x_)
#else

#define Cycladz_KdPrint(_d_, _l_, _x_)
#define Cycladz_KdPrint_Cont(_d_, _l_, _x_)
#define Cycladz_KdPrint_Def(_l_, _x_)
#define TRAP()
#define DbgRaiseIrql(_x_,_y_)
#define DbgLowerIrql(_x_)

#endif

#if !defined(MIN)
#define MIN(_A_,_B_) (((_A_) < (_B_)) ? (_A_) : (_B_))
#endif


typedef struct _WORKER_THREAD_CONTEXT
{
    PDEVICE_OBJECT      DeviceObject;
    PIRP                Irp;
    PIO_WORKITEM        WorkItem;
    POWER_STATE         PowerState;
    POWER_STATE_TYPE    PowerType;

} WORKER_THREAD_CONTEXT, *PWORKER_THREAD_CONTEXT;


//
// These are the states a PDO or FDO transition upon
// receiving a specific PnP Irp. Refer to the PnP Device States
// diagram in DDK documentation for better understanding.
//

typedef enum _DEVICE_PNP_STATE {

    NotStarted = 0,         // Not started yet
    Started,                // Device has received the START_DEVICE IRP
    StopPending,            // Device has received the QUERY_STOP IRP
    Stopped,                // Device has received the STOP_DEVICE IRP
    RemovePending,          // Device has received the QUERY_REMOVE IRP
    SurpriseRemovePending,  // Device has received the SURPRISE_REMOVE IRP
    Deleted,                // Device has received the REMOVE_DEVICE IRP
    UnKnown                 // Unknown state

} DEVICE_PNP_STATE;


//
// A common header for the device extensions of the PDOs and FDO
//

typedef struct _COMMON_DEVICE_DATA
{
    PDEVICE_OBJECT  Self;
    // A backpointer to the device object for which this is the extension

    BOOLEAN         IsFDO;

//    BOOLEAN         Removed;   // Added in build 2072
    // Has this device been removed?  Should we fail any requests?

    // We track the state of the device with every PnP Irp
    // that affects the device through these two variables.
    
    DEVICE_PNP_STATE DevicePnPState;
    DEVICE_PNP_STATE PreviousPnPState;

    ULONG           DebugLevel;

    SYSTEM_POWER_STATE  SystemState;
    DEVICE_POWER_STATE  DeviceState;
} COMMON_DEVICE_DATA, *PCOMMON_DEVICE_DATA;

//
// The device extension for the PDOs.
// That is the serial ports of which this bus driver enumerates.
// (IE there is a PDO for the 201 serial port).
//

typedef struct _PDO_DEVICE_DATA
{
    COMMON_DEVICE_DATA;

    PDEVICE_OBJECT  ParentFdo;
    // A back pointer to the bus

    UNICODE_STRING  HardwareIDs;
    // Either in the form of bus\device
    // or *PNPXXXX - meaning root enumerated

    UNICODE_STRING  CompIDs;
    // compatible ids to the hardware id

    UNICODE_STRING  DeviceIDs;
    // Format: bus\device

    UNICODE_STRING  InstanceIDs;

    //
    // Text describing device
    //

    UNICODE_STRING DevDesc;

    BOOLEAN     Attached;
//    BOOLEAN     Removed;  -> Removed in build 2072
    // When a device (PDO) is found on a bus and presented as a device relation
    // to the PlugPlay system, Attached is set to TRUE, and Removed to FALSE.
    // When the bus driver determines that this PDO is no longer valid, because
    // the device has gone away, it informs the PlugPlay system of the new
    // device relastions, but it does not delete the device object at that time.
    // The PDO is deleted only when the PlugPlay system has sent a remove IRP,
    // and there is no longer a device on the bus.
    //
    // If the PlugPlay system sends a remove IRP then the Removed field is set
    // to true, and all client (non PlugPlay system) accesses are failed.
    // If the device is removed from the bus Attached is set to FALSE.
    //
    // During a query relations Irp Minor call, only the PDOs that are
    // attached to the bus (and all that are attached to the bus) are returned
    // (even if they have been removed).
    //
    // During a remove device Irp Minor call, if and only if, attached is set
    // to FALSE, the PDO is deleted.
    //


   // The child devices will have to know which PortIndex they are.   
   ULONG PortIndex;

} PDO_DEVICE_DATA, *PPDO_DEVICE_DATA;


//
// The device extension of the bus itself.  From whence the PDO's are born.
//

typedef struct _FDO_DEVICE_DATA
{
    COMMON_DEVICE_DATA;

    PDRIVER_OBJECT   DriverObject;

    UCHAR            PdoIndex;
    // A number to keep track of the Pdo we're allocating.
    // Increment every time we create a new PDO.  It's ok that it wraps.

    ULONG            NumPDOs;
    // The PDOs currently enumerated.

    PDEVICE_OBJECT   AttachedPDO[CYZ_MAX_PORTS];

    PPDO_DEVICE_DATA PdoData[CYZ_MAX_PORTS];

    PDEVICE_OBJECT  UnderlyingPDO;
    PDEVICE_OBJECT  TopOfStack;
    // the underlying bus PDO and the actual device object to which our
    // FDO is attached

    ULONG           OutstandingIO;
    // the number of IRPs sent from the bus to the underlying device object

    KEVENT          RemoveEvent;
    // On remove device plugplay request we must wait until all outstanding
    // requests have been completed before we can actually delete the device
    // object.

    UNICODE_STRING DevClassAssocName;
    // The name returned from IoRegisterDeviceClass Association,
    // which is used as a handle for IoSetDev... and friends.

    SYSTEM_POWER_STATE  SystemWake;
    DEVICE_POWER_STATE  DeviceWake;

#ifndef POLL
    //
    // We keep the following values around so that we can connect
    // to the interrupt and report resources after the configuration
    // record is gone.
    //

    //
    // Translated vector
    //
    ULONG Vector;

    //
    // Translated Irql
    //
    KIRQL Irql;

    //
    // Untranslated vector
    //
    ULONG OriginalVector;

    //
    // Untranslated irql
    //
    ULONG OriginalIrql;
#endif

    //
    // Bus number
    //
    ULONG BusNumber;

    //
    // Interface type
    //
    INTERFACE_TYPE InterfaceType;

    //
    // Cycladez-Z hardware
    //
    PHYSICAL_ADDRESS PhysicalRuntime;
    PHYSICAL_ADDRESS TranslatedRuntime;
    ULONG            RuntimeLength;
    
    PHYSICAL_ADDRESS PhysicalBoardMemory;
    PHYSICAL_ADDRESS TranslatedBoardMemory;
    ULONG            BoardMemoryLength;
 
    PUCHAR           BoardMemory;
    struct RUNTIME_9060 *Runtime;

    ULONG            IsPci;

    ULONG            NumPorts;

    ULONG            FirmwareVersion;

    // We are passing the resources privatly to our children so that Device Manager will not 
    // complain about resource conflict between children.

    PIO_RESOURCE_REQUIREMENTS_LIST  PChildRequiredList;
    PCM_RESOURCE_LIST  PChildResourceList;
    ULONG              PChildResourceListSize;

    PCM_RESOURCE_LIST  PChildResourceListTr;
    ULONG              PChildResourceListSizeTr;

    ULONG            UINumber;

} FDO_DEVICE_DATA, *PFDO_DEVICE_DATA;

//
// Macros
//

#define INITIALIZE_PNP_STATE(_Data_)    \
        (_Data_)->DevicePnPState =  NotStarted;\
        (_Data_)->PreviousPnPState = NotStarted;

#define SET_NEW_PNP_STATE(_Data_, _state_) \
        (_Data_)->PreviousPnPState =  (_Data_)->DevicePnPState;\
        (_Data_)->DevicePnPState = (_state_);

#define RESTORE_PREVIOUS_PNP_STATE(_Data_)   \
        (_Data_)->DevicePnPState =   (_Data_)->PreviousPnPState;\

//
// Free the buffer associated with a Unicode string
// and re-init it to NULL
//

#define CycladzFreeUnicodeString(PStr) \
{ \
   if ((PStr)->Buffer != NULL) { \
      ExFreePool((PStr)->Buffer); \
   } \
   RtlInitUnicodeString((PStr), NULL); \
}

//
// Prototypes
//

NTSTATUS
Cycladz_CreateClose (
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    );

NTSTATUS
Cycladz_IoCtl (
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    );

NTSTATUS
Cycladz_InternIoCtl (
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    );

VOID
Cycladz_DriverUnload (
    IN PDRIVER_OBJECT DriverObject
    );

NTSTATUS
Cycladz_PnP (
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    );

NTSTATUS
Cycladz_Power (
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    );

NTSTATUS
Cycladz_AddDevice(
    IN PDRIVER_OBJECT DriverObject,
    IN PDEVICE_OBJECT BusDeviceObject
    );

NTSTATUS
Cycladz_PnPRemove (
    PDEVICE_OBJECT      Device,
    PPDO_DEVICE_DATA    PdoData
    );

NTSTATUS
Cycladz_FDO_PnP (
    IN PDEVICE_OBJECT       DeviceObject,
    IN PIRP                 Irp,
    IN PIO_STACK_LOCATION   IrpStack,
    IN PFDO_DEVICE_DATA     DeviceData
    );

NTSTATUS
Cycladz_PDO_PnP (
    IN PDEVICE_OBJECT       DeviceObject,
    IN PIRP                 Irp,
    IN PIO_STACK_LOCATION   IrpStack,
    IN PPDO_DEVICE_DATA     DeviceData
    );

NTSTATUS
Cycladz_IncIoCount (
    PFDO_DEVICE_DATA   Data
    );

VOID
Cycladz_DecIoCount (
    PFDO_DEVICE_DATA   Data
    );

NTSTATUS
Cycladz_DispatchPassThrough(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    );

NTSTATUS
Cycladz_ReenumerateDevices(
    IN PIRP                 Irp,
    IN PFDO_DEVICE_DATA     DeviceData
    );

NTSTATUS
Cycladz_InitMultiString(PFDO_DEVICE_DATA FdoData, PUNICODE_STRING MultiString,
                        ...);
void
Cycladz_PDO_EnumMarkMissing(
    PFDO_DEVICE_DATA FdoData,
    PPDO_DEVICE_DATA PdoData);

NTSTATUS
Cycladz_GetRegistryKeyValue (
    IN HANDLE Handle,
    IN PWCHAR KeyNameString,
    IN ULONG KeyNameStringLength,
    IN PVOID Data,
    IN ULONG DataLength,
    OUT PULONG ActualLength);

void
Cycladz_InitPDO (
    ULONG               index,
    PDEVICE_OBJECT      pdoData,
    PFDO_DEVICE_DATA    fdoData
    );

NTSTATUS
CycladzSyncCompletion(IN PDEVICE_OBJECT DeviceObject, IN PIRP Irp,
                      IN PKEVENT CycladzSyncEvent);

NTSTATUS
Cycladz_GetResourceInfo(IN PDEVICE_OBJECT PDevObj,
                    IN PCM_RESOURCE_LIST PResList,
                    IN PCM_RESOURCE_LIST PTrResList);

VOID
Cycladz_ReleaseResources(IN PFDO_DEVICE_DATA PDevExt);

NTSTATUS
Cycladz_GotoPowerState(IN PDEVICE_OBJECT PDevObj,
                   IN PFDO_DEVICE_DATA PDevExt,
                   IN DEVICE_POWER_STATE DevPowerState);
NTSTATUS
Cycladz_SystemPowerCompletion(IN PDEVICE_OBJECT PDevObj, UCHAR MinorFunction,
                          IN POWER_STATE PowerState, IN PVOID Context,
                          PIO_STATUS_BLOCK IoStatus);

NTSTATUS
Cycladz_ItemCallBack(
                  IN PVOID Context,
                  IN PUNICODE_STRING PathName,
                  IN INTERFACE_TYPE BusType,
                  IN ULONG BusNumber,
                  IN PKEY_VALUE_FULL_INFORMATION *BusInformation,
                  IN CONFIGURATION_TYPE ControllerType,
                  IN ULONG ControllerNumber,
                  IN PKEY_VALUE_FULL_INFORMATION *ControllerInformation,
                  IN CONFIGURATION_TYPE PeripheralType,
                  IN ULONG PeripheralNumber,
                  IN PKEY_VALUE_FULL_INFORMATION *PeripheralInformation
                  );

NTSTATUS
Cycladz_BuildRequirementsList(
                          OUT PIO_RESOURCE_REQUIREMENTS_LIST *PChildRequiredList_Pointer,
                          IN PCM_RESOURCE_LIST PResourceList, IN ULONG NumberOfResources
                          );

NTSTATUS
Cycladz_BuildResourceList(
                      OUT PCM_RESOURCE_LIST *POutList_Pointer,
                      OUT ULONG *ListSize_Pointer,
                      IN PCM_RESOURCE_LIST PInList,
                      IN ULONG NumberOfResources
                      );
VOID
Cycladz_Delay(
	ULONG NumberOfMilliseconds
    );

ULONG
Cycladz_DoesBoardExist(
                   IN PFDO_DEVICE_DATA Extension
                   );

VOID
CyzLogError(
              IN PDRIVER_OBJECT DriverObject,
              IN PDEVICE_OBJECT DeviceObject OPTIONAL,
              IN PHYSICAL_ADDRESS P1,
              IN PHYSICAL_ADDRESS P2,
              IN ULONG SequenceNumber,
              IN UCHAR MajorFunctionCode,
              IN UCHAR RetryCount,
              IN ULONG UniqueErrorValue,
              IN NTSTATUS FinalStatus,
              IN NTSTATUS SpecificIOStatus,
              IN ULONG LengthOfInsert1,
              IN PWCHAR Insert1,
              IN ULONG LengthOfInsert2,
              IN PWCHAR Insert2
              );

PCHAR
PnPMinorFunctionString (
    UCHAR MinorFunction
);


#endif // endef CYCLADZ_H
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\y\cyyports\resource.h ===
//{{NO_DEPENDENCIES}}
// Microsoft Developer Studio generated include file.
// Used by ports.rc
//
#define INITS                           0
#define IDS_INIT_NAME                   1
#define IDS_INIT_CLOSE                  2
#define PORTS_ICON                      2
#define IDS_PORT_IN_USE                 5
#define ERRORS                          8
#define MYPORT                          10
#define IDS_PARITY                      11
#define IDS_BITS                        12
#define IDS_FLOWCONTROL                 13
#define DLG_PP_PORTSETTINGS             15
#define DLG_PP_ADVPORTS                 16
#define IDS_ADVANCED_SETTINGS_FOR       19
#define IDS_FRIENDLY_FORMAT             29
#define IDS_ADVANCED_SETTINGS           30
#define IDS_SYSSETCHANGE                50
#define IDS_COMCHANGE                   51
#define IDS_LOW                         53
#define IDS_HIGH                        54
#define IDS_NO_WRITE_PRVILEGE           55
#define IDS_NAME_PROPERTIES             56
#define IDS_COM_CONFLICT                59
#define IDS_PORT_OPEN                   59
#define IDS_COM_CONFLICT_RESOLVE        60
#define IDS_PORT_RENAME_ERROR           60
#define IDS_IN_USE                      61
#define IDS_LPT_PROPERTIES              62
#define IDS_LPT_PORT_INUSE              63
#define IDS_LPT_NUM_ERROR               64
#define IDS_LPT_LEGACY_FAILED           65
#define DLG_PP_LPT_PORTSETTINGS         102
#define PORT_BAUDRATE                   800
#define PORT_DATABITS                   801
#define PORT_PARITY                     802
#define PORT_STOPBITS                   803
#define PORT_FLOWCTL                    804
#define PORT_ADVANCED                   805
#define IDC_RECEIVE_SLIDER              821
#define IDC_ADVANCED                    840
#define PP_PORT_BAUDRATE                841
#define IDC_TRANSMIT_SLIDER             842
#define PP_PORT_DATABITS                842
#define PP_PORT_PARITY                  843
#define IDC_RESTORE                     844
#define PP_PORT_STOPBITS                844
#define PP_PORT_FLOWCTL                 845
#define PP_PORT_NUMBER                  846
#define PP_PORT_FIFO                    847
#define PP_PORT_TYPE                    848
#define IDC_FIFO                        885
#define IDC_LOW1                        886
#define IDC_LOW2                        887
#define IDC_HIGH1                       888
#define IDC_HIGH2                       889
#define IDC_RECEIVE_TEXT                890
#define IDC_TRANSMIT_TEXT               891
#define IDC_RESTORE_PORT                892
#define IDC_RXVALUE                     893
#define IDC_TXVALUE                     894
#define IDC_COMNUMTEXT                  895
#define IDC_TRANSMIT_LOW                1000
#define IDC_RECEIVE_LOW                 1001
#define IDC_RECEIVE_HIGH                1002
#define IDC_TRANSMIT_HIGH               1003
#define IDC_POLL_PERIOD                 1027
#define IDC_POLL_DESC                   1029
#define IDC_DESC_1                      1030
#define IDC_DESC_2                      1031
#define IDC_FILTERMETHOD_TRYNOT         1032
#define IDC_FILTERMETHOD_NEVER          1033
#define IDC_FILTERMETHOD_ACCEPTANY      1034
#define PP_LPT_PORT_NUMBER              1035
#define IDC_LPTNUMTEXT                  1036
#define IDC_LPT_ENABLE_LEGACY           1037
#define IDC_STATIC                      -1

// Next default values for new objects
// 
#ifdef APSTUDIO_INVOKED
#ifndef APSTUDIO_READONLY_SYMBOLS
#define _APS_NO_MFC                     1
#define _APS_NEXT_RESOURCE_VALUE        103
#define _APS_NEXT_COMMAND_VALUE         40001
#define _APS_NEXT_CONTROL_VALUE         1038
#define _APS_NEXT_SYMED_VALUE           101
#endif
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyclad-z\cyclad-z.c ===
/*--------------------------------------------------------------------------
*
*   Copyright (C) Cyclades Corporation, 2000-2001.
*   All rights reserved.
*
*   Cyclades-Z Enumerator Driver
*	
*   This file:      cyclad-z.c
*
*   Description:    This module contains contains the entry points 
*                   for a standard bus PNP / WDM driver.
*					
*   Notes:			This code supports Windows 2000 and Windows XP,
*                   x86 and ia64 processors.
*
*   Complies with Cyclades SW Coding Standard rev 1.3.
*
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*	Change History
*
*--------------------------------------------------------------------------
*   Initial implementation based on Microsoft sample code.
*
*--------------------------------------------------------------------------
*/

#include "pch.h"

//
// Declare some entry functions as pageable, and make DriverEntry
// discardable
//

NTSTATUS DriverEntry(PDRIVER_OBJECT, PUNICODE_STRING);

#ifdef ALLOC_PRAGMA
#pragma alloc_text(INIT, DriverEntry)
#pragma alloc_text(PAGE, Cycladz_DriverUnload)
#endif

NTSTATUS
DriverEntry (
    IN  PDRIVER_OBJECT  DriverObject,
    IN  PUNICODE_STRING UniRegistryPath
    )
/*++
Routine Description:

    Initialize the entry points of the driver.

--*/
{
    ULONG i;
    PRTL_QUERY_REGISTRY_TABLE QueryTable = NULL;
    ULONG breakOnEntryDefault = FALSE;
    ULONG shouldBreakOnEntry = FALSE;

    UNREFERENCED_PARAMETER (UniRegistryPath);

    Cycladz_KdPrint_Def (SER_DBG_SS_TRACE, ("Driver Entry\n"));
    Cycladz_KdPrint_Def (SER_DBG_SS_TRACE, ("RegPath: %x\n", UniRegistryPath));

    //
    // Get the BreakOnEntry from the registry
    //

    if (NULL == (QueryTable = ExAllocatePool(
                         PagedPool,
                         sizeof(RTL_QUERY_REGISTRY_TABLE)*2
                          ))) {
        Cycladz_KdPrint_Def (SER_DBG_PNP_ERROR,
              ("Failed to allocate memory to query registry\n"));
    } else {
        RtlZeroMemory(
                 QueryTable,
                 sizeof(RTL_QUERY_REGISTRY_TABLE)*2
                  );

        QueryTable[0].QueryRoutine = NULL;
        QueryTable[0].Flags         = RTL_QUERY_REGISTRY_DIRECT;
        QueryTable[0].EntryContext = &shouldBreakOnEntry;
        QueryTable[0].Name      = L"BreakOnEntry";
        QueryTable[0].DefaultType   = REG_DWORD;
        QueryTable[0].DefaultData   = &breakOnEntryDefault;
        QueryTable[0].DefaultLength= sizeof(ULONG);

        // BUGBUG: The rest of the table isn't filled in!

        if (!NT_SUCCESS(RtlQueryRegistryValues(
             RTL_REGISTRY_SERVICES,
             L"cyclad-z",
             QueryTable,
             NULL,
             NULL))) {
               Cycladz_KdPrint_Def (SER_DBG_PNP_ERROR,
                   ("Failed to get BreakOnEntry level from registry.  Using default\n"));
               shouldBreakOnEntry = breakOnEntryDefault;
        }

        ExFreePool( QueryTable );
    }


    if (shouldBreakOnEntry) {
        DbgBreakPoint();
    }


    DriverObject->MajorFunction [IRP_MJ_CREATE] =
    DriverObject->MajorFunction [IRP_MJ_CLOSE]  = Cycladz_CreateClose;
    DriverObject->MajorFunction [IRP_MJ_PNP]    = Cycladz_PnP;
    DriverObject->MajorFunction [IRP_MJ_POWER]  = Cycladz_Power;
    DriverObject->MajorFunction [IRP_MJ_DEVICE_CONTROL] = Cycladz_IoCtl;
    DriverObject->MajorFunction [IRP_MJ_SYSTEM_CONTROL] = Cycladz_DispatchPassThrough;
    DriverObject->DriverUnload = Cycladz_DriverUnload;
    DriverObject->DriverExtension->AddDevice = Cycladz_AddDevice;

    return STATUS_SUCCESS;
}


NTSTATUS
CycladzSyncCompletion(IN PDEVICE_OBJECT DeviceObject, IN PIRP Irp,
                      IN PKEVENT CycladzSyncEvent)
{
   UNREFERENCED_PARAMETER(DeviceObject);
   UNREFERENCED_PARAMETER(Irp);


   KeSetEvent(CycladzSyncEvent, IO_NO_INCREMENT, FALSE);
   return STATUS_MORE_PROCESSING_REQUIRED;
}

NTSTATUS
Cycladz_CreateClose(IN PDEVICE_OBJECT DeviceObject, IN PIRP Irp)
/*++
Routine Description:
    Some outside source is trying to create a file against us.

    If this is for the FDO (the bus itself) then the caller is trying to
    open the propriatary conection to tell us which serial port to enumerate.

    If this is for the PDO (an object on the bus) then this is a client that
    wishes to use the serial port.
--*/
{
   PIO_STACK_LOCATION irpStack;
   NTSTATUS status;
   PFDO_DEVICE_DATA fdoData;
   KEVENT completionEvent;
   PDEVICE_OBJECT pNextDevice;


   UNREFERENCED_PARAMETER(DeviceObject);

   status = STATUS_INVALID_DEVICE_REQUEST;
   Irp->IoStatus.Information = 0;
    
   fdoData = DeviceObject->DeviceExtension;
   if (fdoData->IsFDO) {

      if (fdoData->DevicePnPState == Deleted){         
         status = STATUS_DELETE_PENDING;
      } else {

         irpStack = IoGetCurrentIrpStackLocation(Irp);

         switch (irpStack->MajorFunction) {

         case IRP_MJ_CREATE:

             Cycladz_KdPrint_Def(SER_DBG_SS_TRACE, ("Create"));
            if ((fdoData->DevicePnPState == RemovePending) || 
               (fdoData->DevicePnPState == SurpriseRemovePending)) {
               status = STATUS_DELETE_PENDING;
            } else {
               status = STATUS_SUCCESS;
            }
            break;

         case IRP_MJ_CLOSE:

            Cycladz_KdPrint_Def (SER_DBG_SS_TRACE, ("Close \n"));
            status = STATUS_SUCCESS;
            break;
         }
      }
   }

   Irp->IoStatus.Status = status;
   IoCompleteRequest (Irp, IO_NO_INCREMENT);
   return status;
}

NTSTATUS
Cycladz_IoCtl (
    IN  PDEVICE_OBJECT  DeviceObject,
    IN  PIRP            Irp
    )
/*++
Routine Description:

--*/
{
    PIO_STACK_LOCATION      irpStack;
    NTSTATUS                status;
    PCOMMON_DEVICE_DATA     commonData;
    PFDO_DEVICE_DATA        fdoData;

    Cycladz_KdPrint_Def (SER_DBG_IOCTL_TRACE, ("Cycladz_IoCtl\n"));

    status = STATUS_SUCCESS;
    irpStack = IoGetCurrentIrpStackLocation (Irp);
    ASSERT (IRP_MJ_DEVICE_CONTROL == irpStack->MajorFunction);

    commonData = (PCOMMON_DEVICE_DATA) DeviceObject->DeviceExtension;
    fdoData = (PFDO_DEVICE_DATA) DeviceObject->DeviceExtension;

    //
    // We only take Device Control requests for the FDO.
    // That is the bus itself.

    if (!commonData->IsFDO) {
        //
        // These commands are only allowed to go to the FDO.
        //
        status = STATUS_INVALID_DEVICE_REQUEST;
        Irp->IoStatus.Status = status;
        IoCompleteRequest (Irp, IO_NO_INCREMENT);
        return status;
    }

    status = Cycladz_IncIoCount (fdoData);

    if (!NT_SUCCESS (status)) {
        //
        // This bus has received the PlugPlay remove IRP.  It will no longer
        // respond to external requests.
        //
        Irp->IoStatus.Status = status;
        IoCompleteRequest (Irp, IO_NO_INCREMENT);
        return status;
    }

    // Actually, we don't handle any Ioctl.
    status = STATUS_INVALID_DEVICE_REQUEST;

    Cycladz_DecIoCount (fdoData);

    Irp->IoStatus.Status = status;
    IoCompleteRequest (Irp, IO_NO_INCREMENT);
    return status;
}

VOID
Cycladz_DriverUnload (
    IN PDRIVER_OBJECT Driver
    )
/*++
Routine Description:
    Clean up everything we did in driver entry.

--*/
{
    UNREFERENCED_PARAMETER (Driver);
    PAGED_CODE();

    //
    // All the device objects should be gone.
    //

    ASSERT (NULL == Driver->DeviceObject);

    //
    // Here we free any resources allocated in DriverEntry
    //

    return;
}

NTSTATUS
Cycladz_IncIoCount (
    PFDO_DEVICE_DATA Data
    )
{
    InterlockedIncrement (&Data->OutstandingIO);
    if (Data->DevicePnPState == Deleted) {

        if (0 == InterlockedDecrement (&Data->OutstandingIO)) {
            KeSetEvent (&Data->RemoveEvent, 0, FALSE);
        }
        return STATUS_DELETE_PENDING;
    }
    return STATUS_SUCCESS;
}

VOID
Cycladz_DecIoCount (
    PFDO_DEVICE_DATA Data
    )
{
    if (0 == InterlockedDecrement (&Data->OutstandingIO)) {
        KeSetEvent (&Data->RemoveEvent, 0, FALSE);
    }
}

NTSTATUS
Cycladz_DispatchPassThrough(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    )
/*++
Routine Description:

    Passes a request on to the lower driver.

--*/
{
    PIO_STACK_LOCATION IrpStack = 
            IoGetCurrentIrpStackLocation( Irp );

#if 1
        Cycladz_KdPrint_Def (SER_DBG_SS_TRACE, ( 
            "[Cycladz_DispatchPassThrough] "
            "IRP: %8x; "
            "MajorFunction: %d\n",
            Irp, 
            IrpStack->MajorFunction ));
#endif

    //
    // Pass the IRP to the target
    //
    IoSkipCurrentIrpStackLocation (Irp);
    
    if (((PPDO_DEVICE_DATA) DeviceObject->DeviceExtension)->IsFDO) {
        return IoCallDriver( 
            ((PFDO_DEVICE_DATA) DeviceObject->DeviceExtension)->TopOfStack,
            Irp );
    } else {
        return IoCallDriver( 
            ((PFDO_DEVICE_DATA) ((PPDO_DEVICE_DATA) DeviceObject->
                DeviceExtension)->ParentFdo->DeviceExtension)->TopOfStack,
                Irp );
    }
}           

void
Cycladz_InitPDO (
    ULONG               Index,
    PDEVICE_OBJECT      Pdo,
    PFDO_DEVICE_DATA    FdoData
    )
/*
Description:
    Common code to initialize a newly created cyclades-z pdo.
    Called either when the control panel exposes a device or when Cyclades-Z senses
    a new device was attached.

Parameters:
    Pdo - The pdo
    FdoData - The fdo's device extension
    //Exposed - Was this pdo was found by serenum (FALSE) or was it was EXPOSEd by 
    //    a control panel applet (TRUE)?        -> Removed in build 2072
*/
{

    ULONG FdoFlags = FdoData->Self->Flags;
    PPDO_DEVICE_DATA pdoData = Pdo->DeviceExtension;

    HANDLE keyHandle;
    NTSTATUS status;
    
    //
    // Check the IO style
    //
    if (FdoFlags & DO_BUFFERED_IO) {
        Pdo->Flags |= DO_BUFFERED_IO;
    } else if (FdoFlags & DO_DIRECT_IO) {
        Pdo->Flags |= DO_DIRECT_IO;
    }
    
    //
    // Increment the pdo's stacksize so that it can pass irps through
    //
    Pdo->StackSize += FdoData->Self->StackSize;
    
    //
    // Initialize the rest of the device extension
    //
    pdoData->PortIndex = Index;
    pdoData->IsFDO = FALSE;
    pdoData->Self = Pdo;
    pdoData->ParentFdo = FdoData->Self;
    pdoData->Attached = TRUE; // attached to the bus

    INITIALIZE_PNP_STATE(pdoData);

    pdoData->DebugLevel = FdoData->DebugLevel;  // Copy the debug level

    pdoData->DeviceState = PowerDeviceD0;
    pdoData->SystemState = PowerSystemWorking;

    //
    // Add the pdo to cyclades-z's list
    //

    ASSERT(FdoData->AttachedPDO[Index] == NULL);
    ASSERT(FdoData->PdoData[Index] == NULL);
//  ASSERT(FdoData->NumPDOs == 0);  rem because NumPDOs can be > 0 in cyclad-z

    FdoData->AttachedPDO[Index] = Pdo;
    FdoData->PdoData[Index] = pdoData;
    FdoData->NumPDOs++;

    Pdo->Flags &= ~DO_DEVICE_INITIALIZING;  // Moved to end in DDK final version
    Pdo->Flags |= DO_POWER_PAGABLE;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyclad-z\cyzguid.h ===
/*--------------------------------------------------------------------------
*
*   Copyright (C) Cyclades Corporation, 2000-2001.
*   All rights reserved.
*
*   Cyclades-Z Enumerator Driver
*	
*   This file:      cyzguid.h
*
*   Description:    Defines GUIDs for function device classes and device 
*                   events used in Plug & Play.
*					
*   Notes:			This code supports Windows 2000 and Windows XP,
*                   x86 and ia64 processors.
*
*   Complies with Cyclades SW Coding Standard rev 1.3.
*
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*	Change History
*
*--------------------------------------------------------------------------
*   Initial implementation based on Microsoft sample code.
*
*--------------------------------------------------------------------------
*/

#ifdef DEFINE_GUID   // don't break compiles of drivers that 
                     // include this header but don't want the
                     // GUIDs

// {E3D3A656-2E9E-44d3-BE40-A1C2C2C3DF6E}
DEFINE_GUID( GUID_BUS_TYPE_CYCLADESZ, 
             0xe3d3a656, 0x2e9e, 0x44d3, 0xbe, 0x40, 0xa1, 0xc2, 0xc2, 0xc3, 0xdf, 0x6e);

// {4C62392F-8A83-4c67-A286-2C879C3712B6}
DEFINE_GUID( GUID_CYCLADESZ_BUS_ENUMERATOR, 
             0x4c62392f, 0x8a83, 0x4c67, 0xa2, 0x86, 0x2c, 0x87, 0x9c, 0x37, 0x12, 0xb6);

#endif   // DEFINE_GUID
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\y\cyyports\util.c ===
/** FILE: util.c *********** Module Header ********************************
 *
 *  Ports applet utility library routines. This file contains string,
 *  cursor, SendWinIniChange() routines.
 *
 * History:
 *  15:30 on Thur  25 Apr 1991  -by-  Steve Cathcart   [stevecat]
 *        Took base code from Win 3.1 source
 *  10:30 on Tues  04 Feb 1992  -by-  Steve Cathcart   [stevecat]
 *        Updated code to latest Win 3.1 sources
 *  15:30 on Thur  03 May 1994  -by-  Steve Cathcart   [stevecat]
 *        Increased  MyMessageBox buffers, Restart dialog changes
 *  17:00 on Mon   18 Sep 1995  -by-  Steve Cathcart   [stevecat]
 *        Changes for product update - SUR release NT v4.0
 *  Nov 1997					-by-  Doron Holan	   [stevecat]
 *        Removed obsolete cpl code
 *
 *  Copyright (C) 1990-1995 Microsoft Corporation
 *
 *************************************************************************/
/* Notes -

    Global Functions:

      U T I L I T Y

        BackslashTerm () - add backslash char to path
        ErrMemDlg () - display Memory Error message box
        MyAtoi () - To convert from Unicode to ANSI string before calling atoi
        myatoi () - local implementation of atoi for Unicode strings
        MyItoa () - To convert from ANSI to Unicode string after calling itoa
        MyMessageBox () - display message to user, with parameters
        MyUltoa () - To convert from Unicode to ANSI string before calling ultoa
        SendWinIniChange () - broadcast system change message via USER
        strscan () - Find a string within another string
        StripBlanks () - Strip leading and trailing blanks from a string


    Local Functions:

 */

//==========================================================================
//                                Include files
//==========================================================================

// C Runtime
#include <stddef.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>

// Application specific
#include "cyyports.h"


#define INT_SIZE_LENGTH   20
#define LONG_SIZE_LENGTH  40


LPTSTR 
BackslashTerm(LPTSTR pszPath)
{
    LPTSTR pszEnd;

    pszEnd = pszPath + lstrlen(pszPath);

    //
    //  Get the end of the source directory
    //
    switch(*CharPrev(pszPath, pszEnd)) {
    case TEXT('\\'):
    case TEXT(':'):
        break;

    default:
        *pszEnd++ = TEXT('\\');
        *pszEnd = TEXT('\0');
    }

    return pszEnd;
}

void 
ErrMemDlg(HWND hParent)
{
    MessageBox(hParent, g_szErrMem, g_szPortsApplet,
               MB_OK | MB_ICONHAND | MB_SYSTEMMODAL );
}

///////////////////////////////////////////////////////////////////////////////
//
//   MyAtoi
//
//   Desc:  To convert from Unicode to ANSI string before
//          calling CRT atoi and atol functions.
//
///////////////////////////////////////////////////////////////////////////////

int 
MyAtoi(LPTSTR  string)
{
   CHAR   szAnsi[ INT_SIZE_LENGTH ];
   BOOL   fDefCharUsed;

#ifdef UNICODE
   WideCharToMultiByte(CP_ACP, 0, string, INT_SIZE_LENGTH,
                       szAnsi, INT_SIZE_LENGTH, NULL, &fDefCharUsed);

   return atoi(szAnsi);
#else
   return atoi(string);
#endif

}


int 
myatoi(LPTSTR pszInt)
{
    int   retval;
    TCHAR cSave;

    for (retval = 0; *pszInt; ++pszInt) {
        if ((cSave = (TCHAR) (*pszInt - TEXT('0'))) > (TCHAR) 9)
            break;

        retval = (int) (retval * 10 + (int) cSave);
    }
    return (retval);
}



///////////////////////////////////////////////////////////////////////////////
//
//   MyItoa
//
//   Desc:  To convert from ANSI to Unicode string after calling
//          CRT itoa function.
//
///////////////////////////////////////////////////////////////////////////////

LPTSTR 
MyItoa(INT value, LPTSTR string, INT radix)
{
   CHAR   szAnsi[INT_SIZE_LENGTH];

#ifdef UNICODE

   _itoa(value, szAnsi, radix);
   MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED, szAnsi, -1,
                       string, INT_SIZE_LENGTH );
#else

   _itoa(value, string, radix);

#endif

   return (string);
 
} // end of MyItoa()


LPTSTR 
MyUltoa(unsigned long value, 
		LPTSTR  string, 
		INT  radix)
{
   CHAR   szAnsi[ LONG_SIZE_LENGTH ];

#ifdef UNICODE

   _ultoa(value, szAnsi, radix);
   MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED, szAnsi, -1,
                       string, LONG_SIZE_LENGTH );
#else

   _ultoa(value, string, radix);

#endif

   return( string );

} // end of MyUltoa()


int 
MyMessageBox(HWND hWnd, 
			 DWORD wText, 
			 DWORD wCaption, 
			 DWORD wType, 
			 ...)
{
    TCHAR   szText[4 * PATHMAX], 
			szCaption[2 * PATHMAX];
    int     ival;
    va_list parg;

    va_start(parg, wType);

    if (wText == INITS)
        goto NoMem;

    if (!LoadString(g_hInst, wText, szCaption, CharSizeOf(szCaption)))
        goto NoMem;

    wvsprintf(szText, szCaption, parg);

    if (!LoadString(g_hInst, wCaption, szCaption, CharSizeOf(szCaption)))
        goto NoMem;

    if ((ival = MessageBox(hWnd, szText, szCaption, wType)) == 0)
        goto NoMem;

    va_end(parg);

    return ival;

NoMem:
    va_end(parg);
    ErrMemDlg(hWnd);

    return 0;
}

void 
SendWinIniChange(LPTSTR lpSection)
{
// NOTE: We have (are) gone through several iterations of which USER
//       api is the correct one to use.  The main problem for the Control
//       Panel is to avoid being HUNG if another app (top-level window)
//       is HUNG.  Another problem is that we pass a pointer to a message
//       string in our address space.  SendMessage will 'thunk' this properly
//       for each window, but PostMessage and SendNotifyMessage will not.
//       That finally brings us to try to use SendMessageTimeout(). 9/21/92
//
// Try SendNotifyMessage in build 260 or later - kills earlier builds
//    SendNotifyMessage ((HWND)-1, WM_WININICHANGE, 0L, (LONG)lpSection);
//    PostMessage ((HWND)-1, WM_WININICHANGE, 0L, (LONG)lpSection);
//  [stevecat] 4/4/92
//
//    SendMessage ((HWND)-1, WM_WININICHANGE, 0L, (LPARAM)lpSection);
//
    //  NOTE: The final parameter (LPDWORD lpdwResult) must be NULL

    SendMessageTimeout((HWND)-1, 
					   WM_WININICHANGE, 
					   0L, 
					   (WPARAM) lpSection,
					   SMTO_ABORTIFHUNG,
					   1000, 
					   NULL);
}

LPTSTR 
strscan(LPTSTR pszString, 
		LPTSTR pszTarget)
{
    LPTSTR psz;

    if (psz = _tcsstr( pszString, pszTarget))
        return (psz);
    else
        return (pszString + lstrlen(pszString));
}


///////////////////////////////////////////////////////////////////////////////
//
//  StripBlanks()
//
//   Strips leading and trailing blanks from a string.
//   Alters the memory where the string sits.
//
///////////////////////////////////////////////////////////////////////////////

void 
StripBlanks(LPTSTR pszString)
{
    LPTSTR  pszPosn;

    //
    //  strip leading blanks
    //

    pszPosn = pszString;

    while (*pszPosn == TEXT(' '))
        pszPosn++;

    if (pszPosn != pszString)
        lstrcpy(pszString, pszPosn);

    //
    //  strip trailing blanks
    //

    if ((pszPosn = pszString + lstrlen(pszString)) != pszString) {
       pszPosn = CharPrev(pszString, pszPosn);

       while (*pszPosn == TEXT(' '))
           pszPosn = CharPrev(pszString, pszPosn);

       pszPosn = CharNext(pszPosn);

       *pszPosn = TEXT('\0');
    }
}

BOOL ReadRegistryByte(HKEY       hKey,
                      PTCHAR     valueName,
                      PBYTE      regData)
{
    DWORD       regDataType = 0;
    DWORD       regDataSize = 0;

    regDataSize = sizeof(*regData);
    if ((ERROR_SUCCESS != RegQueryValueEx(hKey,
                                          valueName,
                                          NULL,
                                          &regDataType,
                                          regData,
                                          &regDataSize))
        || (regDataSize != sizeof(BYTE))
        || (regDataType != REG_BINARY))
    {
        //
        // Read was unsuccessful  or not a binary value, regData is not set
        //
        return FALSE;
    }

    //
    // Read was a success, regData contains the value read in
    //
    return TRUE;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyclad-z\cyclomz.h ===
/*----------------------------------------------------------------------*
 * cyclomz.h: Cyclades-Z hardware-related definitions.					*
 *																		*
 * Copyright (C) Cyclades Corporation, 1996.							*
 * All Rights Reserved.													*
 *																		*
 * revision 1.0 03/14/95 Marcio Saito									*
 * revision 2.0 01/04/96 Marcio Saito	Changes due to HW design		*
 *										alterations.					*
 * revision 2.1 03/15/96 Marcio Saito	Changes due to HW design		*
 *										alterations.					*
 * revision 3.0	04/11/97 Ivan Passos	Changes to support the			*
 *										new boards (8Zo and Ze).		*
 *----------------------------------------------------------------------*/

/*
 *	The data types defined below are used in all ZFIRM interface
 *	data structures. They accomodate differences between HW
 *	architectures and compilers.
 */

typedef unsigned long	uclong;		/* 32 bits, unsigned */
typedef unsigned short	ucshort;	/* 16 bits, unsigned */
typedef unsigned char	ucchar;		/* 8 bits, unsigned */

/*
 *	Memory Window Sizes
 */

#define	DP_WINDOW_SIZE		(0x00080000)	/* window size 512 Kb */
#define	ZE_DP_WINDOW_SIZE	(0x00100000)	/* window size 1 Mb (for the 
											   Ze V_1 and 8Zo V_2) */
#define	CTRL_WINDOW_SIZE	(0x00000080)	/* runtime regs 128 bytes */

/*
 *	CUSTOM_REG - Cyclades-8Zo/PCI Custom Registers Set. The driver
 *	normally will access only interested on the fpga_id, fpga_version,
 *	start_cpu and stop_cpu.
 */

struct	CUSTOM_REG {
	uclong	fpga_id;			/* FPGA Identification Register */
	uclong	fpga_version;		/* FPGA Version Number Register */
	uclong	cpu_start;			/* CPU start Register (write) */
	uclong	cpu_stop;			/* CPU stop Register (write) */
	uclong	misc_reg;			/* Miscelaneous Register */
	uclong	idt_mode;			/* IDT mode Register */
	uclong	uart_irq_status;	/* UART IRQ status Register */
	uclong	clear_timer0_irq;	/* Clear timer interrupt Register */
	uclong	clear_timer1_irq;	/* Clear timer interrupt Register */
	uclong	clear_timer2_irq;	/* Clear timer interrupt Register */
	uclong	test_register;		/* Test Register */
	uclong	test_count;			/* Test Count Register */
	uclong	timer_select;		/* Timer select register */
	uclong	pr_uart_irq_status;	/* Prioritized UART IRQ stat Reg */
	uclong	ram_wait_state;		/* RAM wait-state Register */
	uclong	uart_wait_state;	/* UART wait-state Register */
	uclong	timer_wait_state;	/* timer wait-state Register */
	uclong	ack_wait_state;		/* ACK wait State Register */
};

/*
 *	CUSTOM_REG_ZE - Cyclades-Ze/PCI Custom Registers Set. The driver
 *	normally will access only interested on the fpga_id, fpga_version,
 *	start_cpu and stop_cpu.
 */

struct	CUSTOM_REG_ZE {
	uclong	fpga_id;		/* FPGA Identification Register */
	uclong	fpga_version;	/* FPGA Version Number Register */
	uclong	cpu_start;			/* CPU start Register (write) */
	uclong	cpu_stop;			/* CPU stop Register (write) */
	uclong	cpu_ctrl;
	uclong	zbus_wait;		/* Z-Bus wait states */
	uclong	timer_div;		/* Timer divider */
	uclong	timer_irq_ack;	/* Write anything to ack/clear Timer 
							   Interrupt Register */
};


/*
 *	RUNTIME_9060 - PLX PCI9060ES local configuration and shared runtime
 *	registers. This structure can be used to access the 9060 registers
 *	(memory mapped).
 */

struct RUNTIME_9060 {
	uclong	loc_addr_range;	/* 00h - Local Address Range */
	uclong	loc_addr_base;	/* 04h - Local Address Base */
	uclong	loc_arbitr;		/* 08h - Local Arbitration */
	uclong	endian_descr;	/* 0Ch - Big/Little Endian Descriptor */
	uclong	loc_rom_range;	/* 10h - Local ROM Range */
	uclong	loc_rom_base;	/* 14h - Local ROM Base */
	uclong	loc_bus_descr;	/* 18h - Local Bus descriptor */
	uclong	loc_range_mst;	/* 1Ch - Local Range for Master to PCI */
	uclong	loc_base_mst;	/* 20h - Local Base for Master PCI */
	uclong	loc_range_io;	/* 24h - Local Range for Master IO */
	uclong	pci_base_mst;	/* 28h - PCI Base for Master PCI */
	uclong	pci_conf_io;	/* 2Ch - PCI configuration for Master IO */
	uclong	filler1;		/* 30h */
	uclong	filler2;		/* 34h */
	uclong	filler3;		/* 38h */
	uclong	filler4;		/* 3Ch */
	uclong	mail_box_0;		/* 40h - Mail Box 0 */
	uclong	mail_box_1;		/* 44h - Mail Box 1 */
	uclong	mail_box_2;		/* 48h - Mail Box 2 */
	uclong	mail_box_3;		/* 4Ch - Mail Box 3 */
	uclong	filler5;		/* 50h */
	uclong	filler6;		/* 54h */
	uclong	filler7;		/* 58h */
	uclong	filler8;		/* 5Ch */
	uclong	pci_doorbell;	/* 60h - PCI to Local Doorbell */
	uclong	loc_doorbell;	/* 64h - Local to PCI Doorbell */
	uclong	intr_ctrl_stat;	/* 68h - Interrupt Control/Status */
	uclong	init_ctrl;		/* 6Ch - EEPROM control, Init Control, etc */
};

/* Values for the Local Base Address re-map register */

#define	WIN_RAM			0x00000001L	/* set the sliding window to RAM */
#define	WIN_CREG		0x14000001L	/* set the window to custom Registers */

/* Values timer select registers */

#define	TIMER_BY_1M		0x00		/* clock divided by 1M */
#define	TIMER_BY_256K	0x01		/* clock divided by 256k */
#define	TIMER_BY_128K	0x02		/* clock divided by 128k */
#define	TIMER_BY_32K	0x03		/* clock divided by 32k */

/*
 *	Starting from here, the compilation is conditional to the definition
 *	of FIRMWARE
 */

#ifdef FIRMWARE

struct RUNTIME_9060_FW {
	uclong	mail_box_0;	/* 40h - Mail Box 0 */
	uclong	mail_box_1;	/* 44h - Mail Box 1 */
	uclong	mail_box_2;	/* 48h - Mail Box 2 */
	uclong	mail_box_3;	/* 4Ch - Mail Box 3 */
	uclong	filler5;	/* 50h */
	uclong	filler6;	/* 54h */
	uclong	filler7;	/* 58h */
	uclong	filler8;	/* 5Ch */
	uclong	pci_doorbell;	/* 60h - PCI to Local Doorbell */
	uclong	loc_doorbell;	/* 64h - Local to PCI Doorbell */
	uclong	intr_ctrl_stat;	/* 68h - Interrupt Control/Status */
	uclong	init_ctrl;	/* 6Ch - EEPROM control, Init Control, etc */
};

/* Hardware related constants */

#define ZF_UART_PTR		(0xb0000000UL)
#define ZF_UART_SPACE	0x00000080UL
#define	ZF_UART_CLOCK	7372800

#define	ZO_V1_FPGA_ID	0x95
#define	ZO_V2_FPGA_ID	0x84
#define	ZE_V1_FPGA_ID	0x89

#define	ZF_TIMER_PTR	(0xb2000000UL)

#define	ZF_9060_PTR		(0xb6000000UL)
#define	ZF_9060_ZE_PTR	(0xb8000000UL)
#define	ZF_CUSTOM_PTR	(0xb4000000UL)

#define	ZF_NO_CACHE		(0xa0000000UL)
#define	ZF_CACHE		(0x80000000UL)

#define	ZF_I_TIMER		(EXT_INT0)
#define	ZF_I_SERIAL		(EXT_INT2)
#define ZF_I_HOST		(EXT_INT3)
#define	ZF_I_ALL		(EXT_INT0|EXT_INT2|EXT_INT3)
#define	ZF_I_TOTAL		(EXT_INT0|EXT_INT1|EXT_INT2|EXT_INT3|EXT_INT4|EXT_INT5)

#define	ZF_IRQ03		0xfffffffeUL
#define	ZF_IRQ05		0xfffffffdUL
#define	ZF_IRQ09		0xfffffffbUL
#define	ZF_IRQ10		0xfffffff7UL
#define	ZF_IRQ11		0xffffffefUL
#define	ZF_IRQ12		0xffffffdfUL
#define	ZF_IRQ15		0xffffffbfUL

#endif /* FIRMWARE */


=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyclad-z\cyzhw.h ===
/*--------------------------------------------------------------------------
*
*   Copyright (C) Cyclades Corporation, 2000-2001.
*   All rights reserved.
*
*   Cyclades-Z Enumerator/Port Driver
*	
*   This file:      cyzhw.h
*
*   Description:    This module contains the common hardware declarations 
*                   for the parent driver (cyclad-z) and child driver 
*                   (cyzport).
*
*   Notes:			This code supports Windows 2000 and Windows XP,
*                   x86 and ia64 processors.
*
*   Complies with Cyclades SW Coding Standard rev 1.3.
*
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*   Change History
*
*--------------------------------------------------------------------------
*
*
*--------------------------------------------------------------------------
*/

#ifndef CYZHW_H
#define CYZHW_H


#define MAX_DEVICE_ID_LEN     200	// This definition was copied from NTDDK\inc\cfgmgr32.h
									// Always check if this value was changed. 
									// This is the maximum length for the Hardware ID.

#define CYZPORT_PNP_ID_WSTR         L"Cyclades-Z\\Port"
#define CYZPORT_PNP_ID_STR          "Cyclades-Z\\Port"
#define CYZPORT_DEV_ID_STR          "Cyclades-Z\\Port"

#ifdef POLL
#define CYZ_NUMBER_OF_RESOURCES     2     // Memory, PLX Memory
#else
#define CYZ_NUMBER_OF_RESOURCES     3     // Memory, PLX Memory, IRQ
#endif

// Cyclades-Z hardware
#define CYZ_RUNTIME_LENGTH          0x00000080
#define CYZ_MAX_PORTS	            64


#define CYZ_WRITE_ULONG(Pointer,Data)	\
WRITE_REGISTER_ULONG(Pointer,Data)

#define CYZ_WRITE_UCHAR(Pointer,Data)	\
WRITE_REGISTER_UCHAR(Pointer,Data)

#define CYZ_READ_ULONG(Pointer)			\
READ_REGISTER_ULONG(Pointer)

#define CYZ_READ_UCHAR(Pointer)			\
READ_REGISTER_UCHAR(Pointer)


#endif // endif CYZHW_H
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyclad-z\cyzload.h ===
/*--------------------------------------------------------------------------
*
*   Copyright (C) Cyclades Corporation, 1997-2001.
*   All rights reserved.
*
*   Cyclades-Z Enumerator Driver
*	
*   This file:      cyzload.h
*
*   Description:    Cyclades-Z Firmware Loader Header
*
*   Notes:			This code supports Windows 2000 and Windows XP,
*                   x86 and ia64 processors.
*
*   Complies with Cyclades SW Coding Standard rev 1.3.
*
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*   Change History
*
*--------------------------------------------------------------------------
*
*
*--------------------------------------------------------------------------
*/

/* Include some standard header files.  These are used ONLY to support the
** open/close/read/write macros listed below, as well as the size_t typedef.
*/

// include of standard header files deleted for NT
//#include <stdio.h>
//#include <stdlib.h>


/*  This is an arbitrary data type that is passed to the copy functions.  It
**  serves no function inside z_load, except as a way to identify the board
**  to the copy functions.  The data type of Z_BOARD_IDENT can be changed
**  at port time to support the particular implimentation.
*/
typedef PFDO_DEVICE_DATA Z_BOARD_IDENT;

/* A standard 32 bit unsigned integer */
//removed in W2K typedef unsigned long UINT32;


/* These are some misc functions that z_load() requires.  They have been
** made into macros to help in the porting process.  These macros are
** equivalent to:
**
**  Z_STREAM *zl_open (char *path);
**  int zl_close (Z_STREAM);
**  int zl_fread (void *ptr, size_t size, int count, Z_STREAM *stream);
**  int zl_fwrite (void *ptr, size_t size, int count, Z_STREAM *stream);
**  int zl_fseek (Z_STREAM *stream, unsigned long offset);
*/
typedef HANDLE Z_STREAM;
				
#define zl_min(aaa,bbb) (((aaa)<(bbb))?(aaa):(bbb))

#ifndef NULL
#define NULL  ((void *)(0UL))
#endif

/* This defined the size of the buffer used in copying data.  This can be
** any power of two.
*/
#define ZBUF_SIZE       (256)

/* The loader can use static (read, "Permanent") buffers, or use the stack.
** Define this if the stack should be used.  If #undef'd, then permanent
** static buffers will be used.
*/
#define ZBUF_STACK

#define ZL_MAX_BLOCKS (16)

#define ZL_RET_SUCCESS					0
#define ZL_RET_NO_MATCHING_FW_CONFIG	1
#define ZL_RET_FILE_OPEN_ERROR			2
#define ZL_RET_FPGA_ERROR				3
#define ZL_RET_FILE_READ_ERROR			4

struct ZFILE_HEADER
  {
    char name[64];
	char date[32];
    char aux[32];
    UINT32 n_config;      /* The number of configurations in this file */
	UINT32 config_offset; /* The file offset to the ZFILE_CONFIG array */
    UINT32 n_blocks;      /* The number of data blocks in this file */
	UINT32 block_offset;  /* The offset for the ZFILE_BLOCK array */
	UINT32 reserved[9];   /* Reserved for future use */
  };

struct ZFILE_CONFIG
  {
	char   name[64];
    UINT32 mailbox;
    UINT32 function;
    UINT32 n_blocks;
    UINT32 block_list[ZL_MAX_BLOCKS];
  };

struct ZFILE_BLOCK
  {
    UINT32  type;
	UINT32  file_offset;
    UINT32  ram_offset;
    UINT32  size;
  };

enum ZBLOCK_TYPE {ZBLOCK_PRG, ZBLOCK_FPGA};
enum ZFUNCTION_TYPE {ZFUNCTION_NORMAL, ZFUNCTION_TEST, ZFUNCTION_DIAG};

//CYZLOAD.C 
int
z_load (
	Z_BOARD_IDENT board, 
	UINT32 function, 
	PCWSTR filename
);

VOID
z_reset_board( 
	Z_BOARD_IDENT board 
);

VOID
z_stop_cpu( 
	Z_BOARD_IDENT board
);

int
z_fpga_check(
	Z_BOARD_IDENT board 
);



=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyclad-z\log.h ===
/*--------------------------------------------------------------------------
*
*   Copyright (C) Cyclades Corporation, 1997-2000.
*   All rights reserved.
*
*   Cyclades-Z Enumerator Driver
*	
*   This file:      log.mc
*
*   Description:    Messages that goes to the eventlog.
*
*   Notes:          This code supports Windows 2000 and i386 processor.
*
*   Complies with Cyclades SW Coding Standard rev 1.3.
*
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*   Change History
*
*--------------------------------------------------------------------------
*
*
*--------------------------------------------------------------------------
*/

#ifndef _LOG_
#define _LOG_

//
//  Values are 32 bit values layed out as follows:
//
//   3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1
//   1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
//  +---+-+-+-----------------------+-------------------------------+
//  |Sev|C|R|     Facility          |               Code            |
//  +---+-+-+-----------------------+-------------------------------+
//
//  where
//
//      Sev - is the severity code
//
//          00 - Success
//          01 - Informational
//          10 - Warning
//          11 - Error
//
//      C - is the Customer code flag
//
//      R - is a reserved bit
//
//      Facility - is the facility code
//
//      Code - is the facility's status code
//
//
// Define the facility codes
//
#define FACILITY_SERIAL_ERROR_CODE       0x6
#define FACILITY_RPC_STUBS               0x3
#define FACILITY_RPC_RUNTIME             0x2
#define FACILITY_IO_ERROR_CODE           0x4


//
// Define the severity codes
//
#define STATUS_SEVERITY_WARNING          0x2
#define STATUS_SEVERITY_SUCCESS          0x0
#define STATUS_SEVERITY_INFORMATIONAL    0x1
#define STATUS_SEVERITY_ERROR            0x3


//
// MessageId: CYZ_INSUFFICIENT_RESOURCES
//
// MessageText:
//
//  Not enough resources were available for the driver.
//
#define CYZ_INSUFFICIENT_RESOURCES       ((NTSTATUS)0xC0041000L)

//
// MessageId: CYZ_BOARD_NOT_MAPPED
//
// MessageText:
//
//  The Board Memory could not be translated to something the memory management system could understand.
//
#define CYZ_BOARD_NOT_MAPPED             ((NTSTATUS)0xC0041001L)

//
// MessageId: CYZ_RUNTIME_NOT_MAPPED
//
// MessageText:
//
//  The Runtime Registers could not be translated to something the memory management system could understand.
//
#define CYZ_RUNTIME_NOT_MAPPED           ((NTSTATUS)0xC0041002L)

//
// MessageId: CYZ_INVALID_RUNTIME_REGISTERS
//
// MessageText:
//
//  Invalid Runtime Registers base address.
//
#define CYZ_INVALID_RUNTIME_REGISTERS    ((NTSTATUS)0xC0041003L)

//
// MessageId: CYZ_INVALID_BOARD_MEMORY
//
// MessageText:
//
//  Invalid Board Memory address.
//
#define CYZ_INVALID_BOARD_MEMORY         ((NTSTATUS)0xC0041004L)

//
// MessageId: CYZ_INVALID_INTERRUPT
//
// MessageText:
//
//  Invalid Interrupt Vector.
//
#define CYZ_INVALID_INTERRUPT            ((NTSTATUS)0xC0041005L)

//
// MessageId: CYZ_UNKNOWN_BUS
//
// MessageText:
//
//  The bus type is not recognizable.
//
#define CYZ_UNKNOWN_BUS                  ((NTSTATUS)0xC0041006L)

//
// MessageId: CYZ_BUS_NOT_PRESENT
//
// MessageText:
//
//  The bus type is not available on this computer.
//
#define CYZ_BUS_NOT_PRESENT              ((NTSTATUS)0xC0041007L)

//
// MessageId: CYZ_FILE_OPEN_ERROR
//
// MessageText:
//
//  Error opening the zlogic.cyz file.
//
#define CYZ_FILE_OPEN_ERROR              ((NTSTATUS)0xC0041008L)

//
// MessageId: CYZ_FILE_READ_ERROR
//
// MessageText:
//
//  Error reading the zlogic.cyz file.
//
#define CYZ_FILE_READ_ERROR              ((NTSTATUS)0xC0041009L)

//
// MessageId: CYZ_NO_MATCHING_FW_CONFIG
//
// MessageText:
//
//  No matching configuration in the zlogic.cyz file.
//
#define CYZ_NO_MATCHING_FW_CONFIG        ((NTSTATUS)0xC004100AL)

//
// MessageId: CYZ_FPGA_ERROR
//
// MessageText:
//
//  Error initializing the FPGA.
//
#define CYZ_FPGA_ERROR                   ((NTSTATUS)0xC004100BL)

//
// MessageId: CYZ_POWER_SUPPLY
//
// MessageText:
//
//  External power supply needed for Serial Expanders.
//
#define CYZ_POWER_SUPPLY                 ((NTSTATUS)0xC004100CL)

//
// MessageId: CYZ_FIRMWARE_NOT_STARTED
//
// MessageText:
//
//  Cyclades-Z firmware not able to start.
//
#define CYZ_FIRMWARE_NOT_STARTED         ((NTSTATUS)0xC004100DL)

//
// MessageId: CYZ_FIRMWARE_VERSION
//
// MessageText:
//
//  Cyclades-Z firmware version: %2.
//
#define CYZ_FIRMWARE_VERSION             ((NTSTATUS)0x4004100EL)

//
// MessageId: CYZ_INCOMPATIBLE_FIRMWARE
//
// MessageText:
//
//  Cyclades-Z incompatible firmware version.
//
#define CYZ_INCOMPATIBLE_FIRMWARE        ((NTSTATUS)0xC004100FL)

//
// MessageId: CYZ_BOARD_WITH_NO_PORT
//
// MessageText:
//
//  Cyclades-Z board with no ports.
//
#define CYZ_BOARD_WITH_NO_PORT           ((NTSTATUS)0xC0041010L)

//
// MessageId: CYZ_BOARD_WITH_TOO_MANY_PORTS
//
// MessageText:
//
//  Cyclades-Z board with more than 64 ports attached.
//
#define CYZ_BOARD_WITH_TOO_MANY_PORTS    ((NTSTATUS)0xC0041011L)

//
// MessageId: CYZ_DEVICE_CREATION_FAILURE
//
// MessageText:
//
//  IoCreateDevice failed.
//
#define CYZ_DEVICE_CREATION_FAILURE      ((NTSTATUS)0xC0041012L)

//
// MessageId: CYZ_REGISTER_INTERFACE_FAILURE
//
// MessageText:
//
//  IoRegisterDeviceInterface failed.
//
#define CYZ_REGISTER_INTERFACE_FAILURE   ((NTSTATUS)0xC0041013L)

//
// MessageId: CYZ_GET_UINUMBER_FAILURE
//
// MessageText:
//
//  IoGetDeviceProperty DevicePropertyUINumber failed.
//
#define CYZ_GET_UINUMBER_FAILURE         ((NTSTATUS)0x80041014L)

//
// MessageId: CYZ_SET_INTERFACE_STATE_FAILURE
//
// MessageText:
//
//  IoSetDeviceInterfaceState failed.
//
#define CYZ_SET_INTERFACE_STATE_FAILURE  ((NTSTATUS)0xC0041015L)


#endif /* _LOG_ */
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyclad-z\log.c ===
/*--------------------------------------------------------------------------
*	
*   Copyright (C) Cyclades Corporation, 1999-2001.
*   All rights reserved.
*	
*   Cyclades-Z Enumerator Driver
*	
*   This file:      log.c
*	
*   Description:    This module contains contains the entry points 
*                   for a standard bus PNP / WDM driver.
*
*   Notes:			This code supports Windows 2000 and Windows XP,
*                   x86 and ia64 processors.
*	
*   Complies with Cyclades SW Coding Standard rev 1.3.
*	
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*	Change History
*
*--------------------------------------------------------------------------
*
*
*--------------------------------------------------------------------------
*/


#include "pch.h"

typedef enum _CYZ_MEM_COMPARES {
    AddressesAreEqual,
    AddressesOverlap,
    AddressesAreDisjoint
    } CYZ_MEM_COMPARES,*PCYZ_MEM_COMPARES;

static const PHYSICAL_ADDRESS CyzPhysicalZero = {0};

CYZ_MEM_COMPARES
CyzMemCompare(
                IN PHYSICAL_ADDRESS A,
                IN ULONG SpanOfA,
                IN PHYSICAL_ADDRESS B,
                IN ULONG SpanOfB
                )

/*++

Routine Description:

    Compare two phsical address.

Arguments:

    A - One half of the comparison.

    SpanOfA - In units of bytes, the span of A.

    B - One half of the comparison.

    SpanOfB - In units of bytes, the span of B.


Return Value:

    The result of the comparison.

--*/

{

   LARGE_INTEGER a;
   LARGE_INTEGER b;

   LARGE_INTEGER lower;
   ULONG lowerSpan;
   LARGE_INTEGER higher;

   //PAGED_CODE(); Non paged because it can be called during CyzLogError, which is no paged now.

   a = A;
   b = B;

   if (a.QuadPart == b.QuadPart) {

      return AddressesAreEqual;

   }

   if (a.QuadPart > b.QuadPart) {

      higher = a;
      lower = b;
      lowerSpan = SpanOfB;

   } else {

      higher = b;
      lower = a;
      lowerSpan = SpanOfA;

   }

   if ((higher.QuadPart - lower.QuadPart) >= lowerSpan) {

      return AddressesAreDisjoint;

   }

   return AddressesOverlap;

}


VOID
CyzLogError(
              IN PDRIVER_OBJECT DriverObject,
              IN PDEVICE_OBJECT DeviceObject OPTIONAL,
              IN PHYSICAL_ADDRESS P1,
              IN PHYSICAL_ADDRESS P2,
              IN ULONG SequenceNumber,
              IN UCHAR MajorFunctionCode,
              IN UCHAR RetryCount,
              IN ULONG UniqueErrorValue,
              IN NTSTATUS FinalStatus,
              IN NTSTATUS SpecificIOStatus,
              IN ULONG LengthOfInsert1,
              IN PWCHAR Insert1,
              IN ULONG LengthOfInsert2,
              IN PWCHAR Insert2
              )

/*++

Routine Description:

    This routine allocates an error log entry, copies the supplied data
    to it, and requests that it be written to the error log file.

Arguments:

    DriverObject - A pointer to the driver object for the device.

    DeviceObject - A pointer to the device object associated with the
    device that had the error, early in initialization, one may not
    yet exist.

    P1,P2 - If phyical addresses for the controller ports involved
    with the error are available, put them through as dump data.

    SequenceNumber - A ulong value that is unique to an IRP over the
    life of the irp in this driver - 0 generally means an error not
    associated with an irp.

    MajorFunctionCode - If there is an error associated with the irp,
    this is the major function code of that irp.

    RetryCount - The number of times a particular operation has been
    retried.

    UniqueErrorValue - A unique long word that identifies the particular
    call to this function.

    FinalStatus - The final status given to the irp that was associated
    with this error.  If this log entry is being made during one of
    the retries this value will be STATUS_SUCCESS.

    SpecificIOStatus - The IO status for a particular error.

    LengthOfInsert1 - The length in bytes (including the terminating NULL)
                      of the first insertion string.

    Insert1 - The first insertion string.

    LengthOfInsert2 - The length in bytes (including the terminating NULL)
                      of the second insertion string.  NOTE, there must
                      be a first insertion string for their to be
                      a second insertion string.

    Insert2 - The second insertion string.

Return Value:

    None.

--*/

{
   PIO_ERROR_LOG_PACKET errorLogEntry;

   PVOID objectToUse;
   SHORT dumpToAllocate = 0;
   PUCHAR ptrToFirstInsert;
   PUCHAR ptrToSecondInsert;

   //PAGED_CODE(); It can be called at raised IRQL.

   if (Insert1 == NULL) {
      LengthOfInsert1 = 0;
   }

   if (Insert2 == NULL) {
      LengthOfInsert2 = 0;
   }


   if (ARGUMENT_PRESENT(DeviceObject)) {

      objectToUse = DeviceObject;

   } else {

      objectToUse = DriverObject;

   }

   if (CyzMemCompare(
                       P1,
                       (ULONG)1,
                       CyzPhysicalZero,
                       (ULONG)1
                       ) != AddressesAreEqual) {

      dumpToAllocate = (SHORT)sizeof(PHYSICAL_ADDRESS);

   }

   if (CyzMemCompare(
                       P2,
                       (ULONG)1,
                       CyzPhysicalZero,
                       (ULONG)1
                       ) != AddressesAreEqual) {

      dumpToAllocate += (SHORT)sizeof(PHYSICAL_ADDRESS);

   }

   errorLogEntry = IoAllocateErrorLogEntry(
                                          objectToUse,
                                          (UCHAR)(sizeof(IO_ERROR_LOG_PACKET) +
                                                  dumpToAllocate
                                                  + LengthOfInsert1 +
                                                  LengthOfInsert2)
                                          );

   if ( errorLogEntry != NULL ) {

      errorLogEntry->ErrorCode = SpecificIOStatus;
      errorLogEntry->SequenceNumber = SequenceNumber;
      errorLogEntry->MajorFunctionCode = MajorFunctionCode;
      errorLogEntry->RetryCount = RetryCount;
      errorLogEntry->UniqueErrorValue = UniqueErrorValue;
      errorLogEntry->FinalStatus = FinalStatus;
      errorLogEntry->DumpDataSize = dumpToAllocate;

      if (dumpToAllocate) {

         RtlCopyMemory(
                      &errorLogEntry->DumpData[0],
                      &P1,
                      sizeof(PHYSICAL_ADDRESS)
                      );

         if (dumpToAllocate > sizeof(PHYSICAL_ADDRESS)) {

            RtlCopyMemory(
                         ((PUCHAR)&errorLogEntry->DumpData[0])
                         +sizeof(PHYSICAL_ADDRESS),
                         &P2,
                         sizeof(PHYSICAL_ADDRESS)
                         );

            ptrToFirstInsert =
            ((PUCHAR)&errorLogEntry->DumpData[0])+(2*sizeof(PHYSICAL_ADDRESS));

         } else {

            ptrToFirstInsert =
            ((PUCHAR)&errorLogEntry->DumpData[0])+sizeof(PHYSICAL_ADDRESS);


         }

      } else {

         ptrToFirstInsert = (PUCHAR)&errorLogEntry->DumpData[0];

      }

      ptrToSecondInsert = ptrToFirstInsert + LengthOfInsert1;

      if (LengthOfInsert1) {

         errorLogEntry->NumberOfStrings = 1;
         errorLogEntry->StringOffset = (USHORT)(ptrToFirstInsert -
                                                (PUCHAR)errorLogEntry);
         RtlCopyMemory(
                      ptrToFirstInsert,
                      Insert1,
                      LengthOfInsert1
                      );

         if (LengthOfInsert2) {

            errorLogEntry->NumberOfStrings = 2;
            RtlCopyMemory(
                         ptrToSecondInsert,
                         Insert2,
                         LengthOfInsert2
                         );

         }

      }

      IoWriteErrorLogEntry(errorLogEntry);

   }

}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyclad-z\cyzload.c ===
/*--------------------------------------------------------------------------
*
*   Copyright (C) Cyclades Corporation, 1997-2001.
*   All rights reserved.
*
*   Cyclades-Z Enumerator Driver
*	
*   This file:      cyzload.c
*
*   Description:    This is the firmware loader for the Cyclades-Z series
*                   of multiport serial cards.
*					
*   Notes:			This code supports Windows 2000 and Windows XP,
*                   x86 and ia64 processors.
*
*   Complies with Cyclades SW Coding Standard rev 1.3.
*
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*	Change History
*
*--------------------------------------------------------------------------
*
*
*--------------------------------------------------------------------------
*/

#include "pch.h"


/*-------------------------------
*
*	Prototypes
*
*--------------------------------
*/

ULONG	
z_ident( Z_BOARD_IDENT board );

VOID
z_block_copy( Z_BOARD_IDENT board, PVOID ptr, ULONG offset, ULONG size );

VOID 
z_fpga_copy( Z_BOARD_IDENT board, PVOID ptr, ULONG size );

VOID
z_start_cpu( Z_BOARD_IDENT board );

//VOID
//z_stop_cpu( 
//	Z_BOARD_IDENT board
//);
//
//int
//z_fpga_check(
//	Z_BOARD_IDENT board 
//);
//
//VOID
//z_reset_board( Z_BOARD_IDENT board );


HANDLE
zl_fopen( PCWSTR file_name );

VOID
zl_fclose( IN Z_STREAM NtFileHandle );

ULONG 	
zl_fread( IN PVOID ptr, 
		  IN ULONG size,
	   	  IN ULONG count,
	   	  IN Z_STREAM stream,
	   	  IN ULONG Uoffset );
		  
VOID		  
zl_delay( LONG number_of_ms );
		  

#ifdef CHANGE_FOR_Z
//#ifdef ALLOC_PRAGMA
//#pragma alloc_text(INIT,z_load)
//#pragma alloc_text(INIT,z_ident)
//#pragma alloc_text(INIT,z_block_copy)
//#pragma alloc_text(INIT,z_fpga_copy)
//#pragma alloc_text(INIT,z_start_cpu)
//#pragma alloc_text(INIT,zl_fopen)
//#pragma alloc_text(INIT,zl_fclose)
//#pragma alloc_text(INIT,zl_fread)
//#pragma alloc_text(INIT,zl_delay)
//#ifdef RESET_BOARD
//#pragma alloc_text(PAGESER,z_reset_board)
//#else
//#pragma alloc_text(INIT,z_reset_board)
//#endif
//#pragma alloc_text(PAGESER,z_fpga_check)
//#pragma alloc_text(PAGESER,z_stop_cpu)
//#endif
#endif

#ifndef ZBUF_STACK
static struct ZFILE_HEADER header;
static struct ZFILE_CONFIG config;
static struct ZFILE_BLOCK  block;
static char data[ZBUF_SIZE];
#endif



/*------------------------------------------------------------------------
*
*	z_load( IN Z_BOARD_IDENT board,
*		  	IN UINT32 function,
*			IN PCWSTR filename )
*
*-------------------------------------------------------------------------
*
*	Description: Loads the Cyclades-Z Firmware. Returns a non-zero on error.
*
*-------------------------------------------------------------------------
*/
int
z_load (
	Z_BOARD_IDENT board, UINT32 function, PCWSTR filename)
{

	unsigned long 	i;
	unsigned long	dpmem;
	unsigned long 	count;
	Z_STREAM 		file;
	//*********************
	//size_t 		s, s2;
	//*********************
	unsigned long	s,s2;
	unsigned long	mailbox;
	unsigned long	load_fpga_flag = TRUE;
	unsigned long	first_time = TRUE;


#ifdef ZBUF_STACK
	struct ZFILE_HEADER header;
	struct ZFILE_CONFIG config;
	struct ZFILE_BLOCK  block;
	char data[ZBUF_SIZE];
#endif

	mailbox = z_ident(board);

	file = zl_fopen (filename);

	if (file!=NULL)
	{
		/* Read the header */
		zl_fread (&header, sizeof(header), 1, file, 0);

		/* Find the correct configuration */
		for (i=0; i<header.n_config; i++)
		{
			zl_fread (&config, sizeof(config), 1, file,
					  header.config_offset + (sizeof(config)*i));

			if (config.mailbox==mailbox && config.function==function)
				break;
		}

		/* Return error:  No matching configuration */
		if (i>=header.n_config)
		{
			zl_fclose (file);
			return (ZL_RET_NO_MATCHING_FW_CONFIG);
		}

#ifndef DEBUG_LOAD
		if ((mailbox == 0) || (z_fpga_check(board))) {
		    load_fpga_flag = FALSE;
			z_stop_cpu(board);
		}
#endif		

#ifdef RESET_BOARD
		load_fpga_flag = TRUE;
		/* Reset the board */
		z_reset_board (board);
#endif		

		/* Load each block */
		for (i=0; i<config.n_blocks; i++)
		{
				
			/* Load block struct */
			zl_fread (&block, sizeof(block), 1, file,
				header.block_offset+(sizeof(block)*config.block_list[i]));

			/* Load and Copy the data block */
			count=0;
			s = block.size;
			while (s>0)
			{			
				s2 = zl_min(ZBUF_SIZE,s);
				if (zl_fread (data, 1, s2, file, block.file_offset + count)!=0) {

					/* Call the copy function */
					if (block.type==ZBLOCK_FPGA) {
						if (load_fpga_flag) {
							z_fpga_copy (board, data, s2);
						}
					} else {
						if (first_time) {
							CYZ_WRITE_ULONG(&((board->Runtime)->loc_addr_base),
											WIN_RAM);
							//Code added to debug pentium II
							//RtlFillMemory( (PUCHAR)board->BoardMemory, 
							//				board->DPMemSize, 0x00 );
												
							for (dpmem=0; dpmem<board->BoardMemoryLength; dpmem++) {
								CYZ_WRITE_UCHAR(board->BoardMemory+dpmem,0x00);
							}
							first_time = FALSE;
						}
						z_block_copy (board, data, block.ram_offset + count, s2);
					}
					count += s2;
					s -= s2;
				} else {
					zl_fclose (file);
					return (ZL_RET_FILE_READ_ERROR);
				}
			} // end for (reading every ZBUF_SIZE)
			
			if (block.type==ZBLOCK_FPGA) {
				/* Delay for around for 1ms */
				zl_delay(1); /* Is this needed? */
				
				if (!z_fpga_check(board)) {
					zl_fclose(file);
					return(ZL_RET_FPGA_ERROR);
				}
			}
		} // end for (reading every block)
		zl_fclose (file);

		z_start_cpu(board);

		return (ZL_RET_SUCCESS);

	} else {
	
		/* Return error:  Error opening file */
		return (ZL_RET_FILE_OPEN_ERROR);
	}
}


/*------------------------------------------------------------------------
*
*	z_ident( IN Z_BOARD_IDENT board )
*
*-------------------------------------------------------------------------
*
*	Description: Returns the ID number (the mailbox reg)
*
*-------------------------------------------------------------------------
*/
ULONG	
z_ident( Z_BOARD_IDENT board )
{
	ULONG mailbox;

	mailbox = CYZ_READ_ULONG(&(board->Runtime)->mail_box_0);

	return (mailbox);
}


/*------------------------------------------------------------------------
*
*	z_reset_board( IN Z_BOARD_IDENT board )
*
*-------------------------------------------------------------------------
*
*	Description: Resets the board using the PLX registers.
*
*-------------------------------------------------------------------------
*/
VOID
z_reset_board( Z_BOARD_IDENT board )
{

	ULONG sav_buf[12];
	PULONG loc_reg;
	ULONG j;
	ULONG init_ctrl;
	LARGE_INTEGER d100ms = RtlConvertLongToLargeInteger(-100*10000);

	// Prepare board for reset.
	// The PLX9060 seems to destroy the local registers
	// when there is a hard reset. So, we save all
	// important registers before resetting the board.

	loc_reg = (ULONG *) board->Runtime;
	for (j=0; j<12; j++) {
		sav_buf[j] = CYZ_READ_ULONG(&loc_reg[j]);
	}

	// Reset board

	init_ctrl = CYZ_READ_ULONG(&(board->Runtime)->init_ctrl);
	init_ctrl |= 0x40000000;
	CYZ_WRITE_ULONG(&(board->Runtime)->init_ctrl,init_ctrl);
	KeDelayExecutionThread(KernelMode,FALSE,&d100ms);
	init_ctrl &= ~(0x40000000);
	CYZ_WRITE_ULONG(&(board->Runtime)->init_ctrl,init_ctrl);
	KeDelayExecutionThread(KernelMode,FALSE,&d100ms);
	
	// Restore loc conf registers

	for (j=0; j<12; j++) {
		CYZ_WRITE_ULONG(&loc_reg[j],sav_buf[j]);
	}
}


/*------------------------------------------------------------------------
*
*	z_block_copy( IN Z_BOARD_IDENT board,
*				  IN PVOID ptr,
*				  IN ULONG offset,
*				  IN ULONG size )
*
*-------------------------------------------------------------------------
*
*	Description: This function should copy size bytes of data from the 
*	buffer pointed to by ptr into the Cyclades-Z's memory starting at 
*	offset.
*
*-------------------------------------------------------------------------
*/

VOID
z_block_copy (Z_BOARD_IDENT board, PVOID ptr, ULONG offset, ULONG size)
{
//Code added to debug Pentium II
//	RtlCopyMemory( (PUCHAR)board->BoardMemory + offset, ptr, size );


	ULONG numOfLongs;
	ULONG numOfBytes;

	numOfLongs = size/sizeof(ULONG);
	numOfBytes = size%sizeof(ULONG);

	while (numOfLongs--) {

		CYZ_WRITE_ULONG((PULONG)(board->BoardMemory + offset), *((PULONG)ptr));
		//offset++;
		offset += sizeof(ULONG);
		((PULONG)ptr)++;
	}

	while (numOfBytes--) {

		CYZ_WRITE_UCHAR((PUCHAR)board->BoardMemory + offset, *((PUCHAR)ptr));
		offset++;
		((PUCHAR)ptr)++;
	}
}


/*------------------------------------------------------------------------
*
*	z_fpga_copy( IN Z_BOARD_IDENT board,
*				 IN PVOID ptr,
*				 IN ULONG size )
*
*-------------------------------------------------------------------------
*
*	Description: This function is the same as z_block_copy, except the 
*	offset is assumed to always be zero (and not increment) and the copy
*	is done one byte at a time. Essentially, this is the same as writing
*	a buffer to a byte-wide FIFO.
*
*-------------------------------------------------------------------------
*/

VOID
z_fpga_copy  (Z_BOARD_IDENT board, PVOID ptr, ULONG size)
{
	int i;
	char *data;
	char *fpga;

	fpga = board->BoardMemory;
	data = (char *)ptr;

	while (size>0)
	{
		CYZ_WRITE_UCHAR(fpga,*data);

		KeStallExecutionProcessor(10);	// wait 10 microseconds
		
		size--;
		data++;
	}

}


/*------------------------------------------------------------------------
*
*	z_fpga_check( IN Z_BOARD_IDENT board )
*
*-------------------------------------------------------------------------
*
*	Description: Returns 1 if FPGA is configured.
*
*-------------------------------------------------------------------------
*/
int
z_fpga_check( Z_BOARD_IDENT board )
{	
	if (CYZ_READ_ULONG(&(board->Runtime)->init_ctrl) & 0x00020000) {
			
		return 1;
		
	} else {
		
		return 0;
	}
}


/*------------------------------------------------------------------------
*
*	z_start_cpu( IN Z_BOARD_IDENT board )
*
*-------------------------------------------------------------------------
*
*	Description: Starts CPU.
*
*-------------------------------------------------------------------------
*/
VOID
z_start_cpu( Z_BOARD_IDENT board )
{
	
	CYZ_WRITE_ULONG(&(board->Runtime)->loc_addr_base,WIN_CREG);

	CYZ_WRITE_ULONG(&((struct CUSTOM_REG *) board->BoardMemory)->cpu_start,
													0x00000000);

	CYZ_WRITE_ULONG(&(board->Runtime)->loc_addr_base,WIN_RAM);

}


/*------------------------------------------------------------------------
*
*	z_stop_cpu( IN Z_BOARD_IDENT board )
*
*-------------------------------------------------------------------------
*
*	Description: Stops CPU.
*
*-------------------------------------------------------------------------
*/
VOID
z_stop_cpu( Z_BOARD_IDENT board )
{
	
	CYZ_WRITE_ULONG(&(board->Runtime)->loc_addr_base,WIN_CREG);

	CYZ_WRITE_ULONG(&((struct CUSTOM_REG *) board->BoardMemory)->cpu_stop,
													0x00000000);

	CYZ_WRITE_ULONG(&(board->Runtime)->loc_addr_base,WIN_RAM);

}


/****************************************************************
*
*	In David's code, the below functions were macros.
*
*****************************************************************/

/*------------------------------------------------------------------------
*
*	zl_fopen(PCWSTR file_name)
*
*-------------------------------------------------------------------------
*
*	Description: This routine opens a file, and returns the file handle
*	if successful. Otherwise, it returns NULL.
*
*-------------------------------------------------------------------------
*/

HANDLE zl_fopen( PCWSTR file_name )
{
	UNICODE_STRING fileName;
	NTSTATUS ntStatus;
	IO_STATUS_BLOCK IoStatus;
	HANDLE NtFileHandle;
	OBJECT_ATTRIBUTES ObjectAttributes;
	ULONG LengthOfFile;
	//WCHAR PathPrefix[] = L"\\SystemRoot\\system32\\drivers\\";
	WCHAR PathPrefix[] = L"\\SystemRoot\\system32\\cyclad-z\\";
	UNICODE_STRING FullFileName;
	ULONG FullFileNameLength;
	FILE_STANDARD_INFORMATION StandardInfo;


	RtlInitUnicodeString( &fileName, file_name );

	FullFileNameLength = sizeof(PathPrefix) + fileName.MaximumLength;

	FullFileName.Buffer = ExAllocatePool (NonPagedPool,FullFileNameLength);

	if (FullFileName.Buffer == NULL) {
		return NULL;
	}

	FullFileName.Length = sizeof(PathPrefix) - sizeof(WCHAR);
	FullFileName.MaximumLength = (USHORT)FullFileNameLength;
	RtlMoveMemory (FullFileName.Buffer, PathPrefix, sizeof(PathPrefix));
	RtlAppendUnicodeStringToString (&FullFileName, &fileName);

	InitializeObjectAttributes ( &ObjectAttributes,
								 &FullFileName,
								 OBJ_CASE_INSENSITIVE,
								 NULL,
								 NULL );

	ntStatus = ZwCreateFile( &NtFileHandle,
							 SYNCHRONIZE | FILE_READ_DATA,
							 &ObjectAttributes,
							 &IoStatus,
							 NULL,  // alloc size = none
							 FILE_ATTRIBUTE_NORMAL,
							 FILE_SHARE_READ,
							 FILE_OPEN,
							 FILE_SYNCHRONOUS_IO_NONALERT,
							 NULL,  // eabuffer
							 0 );   // ealength

	if ( !NT_SUCCESS( ntStatus ) )
	 {
		  ExFreePool(FullFileName.Buffer);
		  return NULL;
	 }

	ExFreePool(FullFileName.Buffer);

	//
	// Query the object to determine its length.
	//

	ntStatus = ZwQueryInformationFile( NtFileHandle,
									   &IoStatus,
									   &StandardInfo,
									   sizeof(FILE_STANDARD_INFORMATION),
									   FileStandardInformation );

 	if (!NT_SUCCESS(ntStatus)) {

		  ZwClose( NtFileHandle );
		  return NULL;
	}

	LengthOfFile = StandardInfo.EndOfFile.LowPart;

	//
	// Might be corrupted.
	//

	if( LengthOfFile < 1 )
	{
		  ZwClose( NtFileHandle );
		  return NULL;
	}

	return NtFileHandle;

}


/*------------------------------------------------------------------------
*
*	zl_fclose(IN Z_STREAM NtFileHandle)
*
*-------------------------------------------------------------------------
*
*	Description: This routine closes a file.
*
*-------------------------------------------------------------------------
*/
VOID zl_fclose(IN Z_STREAM NtFileHandle)
{
	ZwClose(NtFileHandle);
}


/*------------------------------------------------------------------------
*
*	zl_fread( IN PVOID ptr,
*			  IN ULONG size,
*			  IN ULONG count,
*			  IN Z_STREAM stream,
*			  IN ULONG Uoffset
*
*-------------------------------------------------------------------------
*
*	Description: This routine opens a file, and returns the file handle
*	if successful. Otherwise, it returns NULL.
*
*-------------------------------------------------------------------------
*/
ULONG zl_fread( IN PVOID ptr,
				IN ULONG size,
				IN ULONG count,
				IN Z_STREAM stream,
				IN ULONG Uoffset)
{
	IO_STATUS_BLOCK IoStatus;
	LARGE_INTEGER Loffset;
	NTSTATUS ntStatus;
	ULONG	readsize;

	readsize = size*count;
	Loffset = RtlConvertUlongToLargeInteger(Uoffset);

	ntStatus = ZwReadFile (stream, NULL, NULL, NULL, &IoStatus, 
						   ptr, readsize, &Loffset, NULL);
											
	if( (!NT_SUCCESS(ntStatus)) || (IoStatus.Information != readsize) )
	 {
		return 0;
	 }
	return readsize;
}			   


/*------------------------------------------------------------------------
*
*	zl_delay( number_of_ms )
*		
*-------------------------------------------------------------------------
*
*	Description: Delay of milliseconds.
*
*-------------------------------------------------------------------------
*/
VOID		  
zl_delay( 
LONG number_of_ms 
)
{
	LARGE_INTEGER delaytime;
	
	delaytime = RtlConvertLongToLargeInteger(-number_of_ms*10000);
	
	KeDelayExecutionThread(KernelMode,FALSE,&delaytime);

}


/****************************************************************************/
/****************************************************************************/
/****************************************************************************/
/****************************************************************************/


#if 0
//*******************************************************************
//
//	Added for debug
//
//*******************************************************************
int
z_verify (
	Z_BOARD_IDENT board, UINT32 function, PCWSTR filename)
{

	unsigned long	i;
	unsigned long	count;
	Z_STREAM 		file;
	//*********************
	//size_t   		s, s2;
	//*********************
	long			s,s2;
	unsigned long 	mailbox;


#ifdef ZBUF_STACK
	struct ZFILE_HEADER header;
	struct ZFILE_CONFIG config;
	struct ZFILE_BLOCK  block;
	char data[ZBUF_SIZE];
#endif

	maibox = z_ident(board);

	file = zl_fopen (filename);

	if (file!=NULL)
	{
		/* Read the header */
		zl_fread (&header, sizeof(header), 1, file, 0);

		/* Find the correct configuration */
		for (i=0; i<header.n_config; i++)
		{
			zl_fread (&config, sizeof(config), 1, file,
						  header.config_offset + (sizeof(config)*i));

			if (config.mailbox==mailbox && config.function==function)
				break;
		}

		/* Return error:  No matching configuration */
		if (i>=header.n_config)
		{
			zl_fclose (file);
			return (ZL_RET_NO_MATCHING_FW_CONFIG);
		}

		/* Load each block */
		for (i=0; i<config.n_blocks; i++)
		{
			/* Load block struct */
			zl_fread (&block, sizeof(block), 1, file,
				header.block_offset+(sizeof(block)*config.block_list[i]));

			/* Load and Copy the data block */
			count=0;

			for (s=block.size; s>0; s-=ZBUF_SIZE)
			{
				s2 = zl_min(ZBUF_SIZE,s);
				if (zl_fread (data, 1, s2, file, block.file_offset + count)!=0) {

					/* Call the copy function */
					if (block.type==ZBLOCK_FPGA)
						z_fpga_copy (board, data, s2);
					else {
						if (z_block_comp (board, data, block.ram_offset + count,
							s2)==0){
						zl_fclose(file);
						return (3);
						}
					}
					count += s2;
				} else {
					zl_fclose (file);
					return (3);
				}
			} // end for
		} // end for

		zl_fclose (file);
		return (0);

	} else {
		/* Return error:  Error opening file */
		return (2);
	}
}

ULONG
z_block_comp (Z_BOARD_IDENT board, PVOID ptr, UINT32 offset, long size)
{
	return (RtlCompareMemory( (PUCHAR)board->BoardMemory + offset, ptr, size ));
}

#endif



=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyclad-z\enum.c ===
/*--------------------------------------------------------------------------
*
*   Copyright (C) Cyclades Corporation, 2000-2001.
*   All rights reserved.
*
*   Cyclades-Z Enumerator Driver
*	
*   This file:      enum.c
*
*   Description:    This module contains the enumeration code needed 
*                   to figure out whether or not a device is attached 
*                   to the serial port.  If there is one, it will obtain 
*                   the PNP COM ID (if the device is PNP) and parse out 
*                   the relevant fields.
*					
*   Notes:			This code supports Windows 2000 and Windows XP,
*                   x86 and ia64 processors.
*
*   Complies with Cyclades SW Coding Standard rev 1.3.
*
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*	Change History
*
*--------------------------------------------------------------------------
*   Initial implementation based on Microsoft sample code.
*
*--------------------------------------------------------------------------
*/

#include "pch.h"

#define MAX_DEVNODE_NAME        256 // Total size of Device ID


#ifdef ALLOC_PRAGMA
#pragma alloc_text(PAGESENM, Cycladz_ReenumerateDevices)

//#pragma alloc_text (PAGE, Cycladz_GetRegistryKeyValue)
#endif

#if !defined(__isascii)
#define __isascii(_c)   ( (unsigned)(_c) < 0x80 )
#endif // !defined(__isascii)

NTSTATUS
Cycladz_ReenumerateDevices(IN PIRP Irp, IN PFDO_DEVICE_DATA FdoData)
/*++

Routine Description:

    This enumerates the cyclades-z bus which is represented by Fdo (a pointer
    to the device object representing the cyclades-z bus). It creates new PDOs
    for any new devices which have been discovered since the last enumeration

Arguments:

    FdoData - Pointer to the fdo's device extension
              for the serial bus which needs to be enumerated
    Irp - Pointer to the Irp which was sent to reenumerate.

Return value:

    NTSTATUS

--*/
{
   PIRP NewIrp;
   NTSTATUS status = STATUS_SUCCESS;
   KEVENT event;
   KTIMER timer;

   IO_STATUS_BLOCK IoStatusBlock;
   UNICODE_STRING pdoUniName;
   UNICODE_STRING instanceStr;
   WCHAR instanceNumberBuffer[20];
   static ULONG currentInstance = 0;
//   PDEVICE_OBJECT pdo = FdoData->AttachedPDO;
   PDEVICE_OBJECT pdo;
   PPDO_DEVICE_DATA pdoData;

   UNICODE_STRING HardwareIDs;
   UNICODE_STRING CompIDs;
   UNICODE_STRING DeviceIDs;
   UNICODE_STRING DevDesc;
   UNICODE_STRING InstanceIDs;

   ULONG i;

   WCHAR pdoName[] = CYZ_PDO_NAME_BASE;

   ULONG FdoFlags = FdoData->Self->Flags;

   ULONG numPorts = FdoData->NumPorts;

   UNREFERENCED_PARAMETER (Irp);

   PAGED_CODE();


   // Cyclades-Z port enumeration

//************************************************************************
// HARDCODE NUMBER OF PORTS TO 1
// numPorts = 1;
//************************************************************************

   Cycladz_KdPrint(FdoData,SER_DBG_CYCLADES,("numPorts detected = %d\n",numPorts));

   if (numPorts < FdoData->NumPDOs) {
      for (i=numPorts; i < CYZ_MAX_PORTS; i++) {
         pdo = FdoData->AttachedPDO[i];
         if (pdo != NULL) {
            // Something was there. The device must have been unplugged.
            // Remove the PDO.
            Cycladz_PDO_EnumMarkMissing(FdoData, pdo->DeviceExtension);
         }
      }
      goto ExitReenumerate;
   }

   if (numPorts == FdoData->NumPDOs) {
      // All ports already enumerated.
      Cycladz_KdPrint(FdoData,SER_DBG_CYCLADES,("All ports already enumerated\n",numPorts));
      goto ExitReenumerate;
   }


   // New ports that need to be enumerated.

   RtlZeroMemory(&pdoUniName,sizeof(UNICODE_STRING));
   pdoUniName.MaximumLength = DEVICE_OBJECT_NAME_LENGTH * sizeof(WCHAR);
   pdoUniName.Buffer = ExAllocatePool(PagedPool,pdoUniName.MaximumLength
                                    + sizeof(WCHAR));
   if (pdoUniName.Buffer == NULL) {
      Cycladz_KdPrint(FdoData,SER_DBG_CYCLADES,("Couldn't allocate memory for device name\n"));
      status = STATUS_INSUFFICIENT_RESOURCES;
      goto ExitReenumerate; 
   }


   for (i=FdoData->NumPDOs; numPorts && (i< CYZ_MAX_PORTS); i++) {
      
      UCHAR          RawString[MAX_DEVICE_ID_LEN];
      ANSI_STRING    AnsiString;


      RtlZeroMemory(pdoUniName.Buffer,pdoUniName.MaximumLength);
      pdoUniName.Length = 0;
      RtlAppendUnicodeToString(&pdoUniName,pdoName);
      RtlInitUnicodeString(&instanceStr, NULL);
      instanceStr.MaximumLength = sizeof(instanceNumberBuffer);
      instanceStr.Buffer = instanceNumberBuffer;
      RtlIntegerToUnicodeString(currentInstance++, 10, &instanceStr);
      RtlAppendUnicodeStringToString(&pdoUniName, &instanceStr);


      //
      // Allocate a pdo
      //
      status = IoCreateDevice(FdoData->Self->DriverObject,
                              sizeof(PDO_DEVICE_DATA), &pdoUniName,
                              FILE_DEVICE_UNKNOWN,
                              FILE_AUTOGENERATED_DEVICE_NAME, FALSE, &pdo);

      if (!NT_SUCCESS(status)) {
         Cycladz_KdPrint(FdoData, SER_DBG_SS_ERROR, ("Create device failed\n"));
         ExFreePool(pdoUniName.Buffer);
         goto ExitReenumerate; 
      }

      Cycladz_KdPrint(FdoData, SER_DBG_SS_TRACE,
                      ("Created PDO on top of filter: %x\n",pdo));

      pdoData = pdo->DeviceExtension;
         

      RtlInitUnicodeString(&pdoData->HardwareIDs, NULL);
      RtlInitUnicodeString(&pdoData->CompIDs, NULL);
      RtlInitUnicodeString(&pdoData->DeviceIDs, NULL);
      RtlInitUnicodeString(&pdoData->DevDesc, NULL);
      RtlInitUnicodeString(&pdoData->InstanceIDs,NULL);


      // Hardware ID
      sprintf((PCHAR)RawString,"%s%u",CYZPORT_PNP_ID_STR,i+1); // Cyclades-Z\\Port1, etc
      Cycladz_InitMultiString(FdoData, &pdoData->HardwareIDs, RawString, NULL);
      Cycladz_KdPrint(FdoData,SER_DBG_CYCLADES,("Hardware Id %ws\n",pdoData->HardwareIDs.Buffer));

      // That's how ..\parclass\pnppdo.c does. (Fanny)
      // Instance ID
      sprintf((PCHAR)RawString,"%02u",i+1);
      RtlInitAnsiString(&AnsiString,(PCHAR)RawString);
      RtlAnsiStringToUnicodeString(&pdoData->InstanceIDs,&AnsiString,TRUE);
      Cycladz_KdPrint(FdoData,SER_DBG_CYCLADES,("Instance Id %s\n",AnsiString.Buffer));

      // Device ID
      sprintf((PCHAR)RawString,CYZPORT_DEV_ID_STR); 
      RtlInitAnsiString(&AnsiString,(PCHAR)RawString);
      RtlAnsiStringToUnicodeString(&pdoData->DeviceIDs,&AnsiString,TRUE);
      Cycladz_KdPrint(FdoData,SER_DBG_CYCLADES,("Device Id %s\n",AnsiString.Buffer));

      // Device Description
      sprintf((PCHAR)RawString,"Cyclades-Z Port %2u",i+1);
      RtlInitAnsiString(&AnsiString,(PUCHAR)RawString);
      RtlAnsiStringToUnicodeString(&pdoData->DevDesc,&AnsiString,TRUE);
      Cycladz_KdPrint(FdoData,SER_DBG_CYCLADES,("Device Description %s\n",AnsiString.Buffer));

      Cycladz_InitPDO(i, pdo, FdoData);
      
      numPorts--;
   
   }

   ExFreePool(pdoUniName.Buffer);


ExitReenumerate:;

   return status;
}

// "Cycladz_RemovePDO" CHANGED TO "Cycladz_PDO_EnumMarkMissing" in build 2072.
void
Cycladz_PDO_EnumMarkMissing(PFDO_DEVICE_DATA FdoData, PPDO_DEVICE_DATA PdoData)
/*++

Routine Description:
    Removes the attached pdo from the fdo's list of children.

    NOTE: THIS FUNCTION CAN ONLY BE CALLED DURING AN ENUMERATION. If called
          outside of enumeration, Cyclades-Z might delete it's PDO before PnP has
          been told the PDO is gone.

Arguments:
    FdoData - Pointer to the fdo's device extension
    PdoData - Pointer to the pdo's device extension

Return value:
    none

--*/
{
    ULONG IndexPDO = PdoData->PortIndex;
    Cycladz_KdPrint (FdoData, SER_DBG_SS_TRACE, ("Removing Pdo %x\n",
                                                 PdoData->Self));
    ASSERT(PdoData->Attached);
    PdoData->Attached = FALSE;
    FdoData->AttachedPDO[IndexPDO] = NULL;
    FdoData->PdoData[IndexPDO] = NULL;
    FdoData->NumPDOs--;
}

NTSTATUS
Cycladz_GetRegistryKeyValue(IN HANDLE Handle, IN PWCHAR KeyNameString,
                            IN ULONG KeyNameStringLength, IN PVOID Data,
                            IN ULONG DataLength, OUT PULONG ActualLength)
/*++

Routine Description:

    Reads a registry key value from an already opened registry key.

Arguments:

    Handle              Handle to the opened registry key

    KeyNameString       ANSI string to the desired key

    KeyNameStringLength Length of the KeyNameString

    Data                Buffer to place the key value in

    DataLength          Length of the data buffer

Return Value:

    STATUS_SUCCESS if all works, otherwise status of system call that
    went wrong.

--*/
{
    UNICODE_STRING              keyName;
    ULONG                       length;
    PKEY_VALUE_FULL_INFORMATION fullInfo;

    NTSTATUS                    ntStatus = STATUS_INSUFFICIENT_RESOURCES;

    RtlInitUnicodeString (&keyName, KeyNameString);

    length = sizeof(KEY_VALUE_FULL_INFORMATION) + KeyNameStringLength
      + DataLength;
    fullInfo = ExAllocatePool(PagedPool, length);

    if (ActualLength != NULL) {
       *ActualLength = 0;
    }

    if (fullInfo) {
        ntStatus = ZwQueryValueKey (Handle,
                                  &keyName,
                                  KeyValueFullInformation,
                                  fullInfo,
                                  length,
                                  &length);

        if (NT_SUCCESS(ntStatus)) {
            //
            // If there is enough room in the data buffer, copy the output
            //

            if (DataLength >= fullInfo->DataLength) {
                RtlCopyMemory(Data, ((PUCHAR)fullInfo) + fullInfo->DataOffset,
                              fullInfo->DataLength);
                if (ActualLength != NULL) {
                   *ActualLength = fullInfo->DataLength;
                }
            }
        }

        ExFreePool(fullInfo);
    }

    if (!NT_SUCCESS(ntStatus) && !NT_ERROR(ntStatus)) {
       if (ntStatus == STATUS_BUFFER_OVERFLOW) {
          ntStatus = STATUS_BUFFER_TOO_SMALL;
       } else {
          ntStatus = STATUS_UNSUCCESSFUL;
       }
    }
    return ntStatus;
}

int myatoi( WCHAR * pszInt )
{
    int   retval;
    WCHAR cSave;

    for( retval = 0; *pszInt; ++pszInt )
    {
        if( ( cSave = (WCHAR) ( *pszInt - L'0') ) > (WCHAR) 9 )
            break;
        retval = (int) ( retval * 10 + (int) cSave );
    }
    return( retval );
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyclad-z\pch.h ===
#include <ntddk.h>
#include <devioctl.h>
#include <initguid.h>
#include <wdmguid.h>
#include <ntddser.h>
#include <stdarg.h>
#include <stdio.h>
#include "cyzguid.h"
#include "log.h"
#include "cyclad-z.h"
#include "cyclomz.h"
#include "zfwint.h"
#include "cyzload.h"
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyzcoins\cyfriend.h ===
/** FILE: cyfriend.h ********* Module Header ********************************
 *
 *
 * History:
 *
 *  Copyright (C) 2000 Cyclades Corporation
 *
 *************************************************************************/
//==========================================================================
//                            Include Files
//==========================================================================

#ifndef CYFRIEND_H
#define CYFRIEND_H


//==========================================================================
//                            Function Prototypes
//==========================================================================

//
//  cyfriend.c
//
extern
BOOL
ReplaceFriendlyName(
    IN HDEVINFO         DeviceInfoSet,
    IN PSP_DEVINFO_DATA DeviceInfoData,
    IN PTCHAR           NewComName
);



#endif // CYFRIEND_H
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyclad-z\pnp.c ===
/*--------------------------------------------------------------------------
*
*   Copyright (C) Cyclades Corporation, 2000-2001.
*   All rights reserved.
*
*   Cyclades-Z Enumerator Driver
*	
*   This file:      pnp.c
*
*   Description:    This module contains contains the plugplay calls
*                   PNP / WDM BUS driver.
*					
*   Notes:          This code supports Windows 2000 and Windows XP,
*                   x86 and ia64 processors.
*
*   Complies with Cyclades SW Coding Standard rev 1.3.
*
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*	Change History
*
*--------------------------------------------------------------------------
*   Initial implementation based on Microsoft sample code.
*
*--------------------------------------------------------------------------
*/

#include "pch.h"

static const PHYSICAL_ADDRESS CyzPhysicalZero = {0};

// FANNY_ADDPAGABLE_LATER
//#ifdef ALLOC_PRAGMA
//#pragma alloc_text (PAGE, Cycladz_AddDevice)
//#pragma alloc_text (PAGE, Cycladz_PnP)
//#pragma alloc_text (PAGE, Cycladz_FDO_PnP)
//#pragma alloc_text (PAGE, Cycladz_PDO_PnP)
//#pragma alloc_text (PAGE, Cycladz_PnPRemove)
//#pragma alloc_text (PAGE, Cycladz_StartDevice)
////#pragma alloc_text (PAGE, Cycladz_Remove)
//#endif


NTSTATUS
Cycladz_AddDevice(
    IN PDRIVER_OBJECT DriverObject,
    IN PDEVICE_OBJECT BusPhysicalDeviceObject
    )
/*++
Routine Description.
    A bus has been found.  Attach our FDO to it.
    Allocate any required resources.  Set things up.  And be prepared for the
    first ``start device.''

Arguments:
    DriverObject - This very self referenced driver.

    BusPhysicalDeviceObject - Device object representing the bus.  That to which
        we attach a new FDO.

--*/
{
    NTSTATUS            status;
    PDEVICE_OBJECT      deviceObject;
    PFDO_DEVICE_DATA    DeviceData;
    ULONG               nameLength;
    ULONG               i;
    INTERFACE_TYPE      interfaceType;
    ULONG               interfaceTypeLength;
    ULONG               uiNumber,uiNumberLength;
    
    PAGED_CODE ();

    Cycladz_KdPrint_Def (SER_DBG_PNP_TRACE, ("Add Device: 0x%x\n",
                                              BusPhysicalDeviceObject));
    //
    // Create our FDO
    //

    status = IoCreateDevice(DriverObject, sizeof(FDO_DEVICE_DATA), NULL,
                           FILE_DEVICE_BUS_EXTENDER, 0, TRUE, &deviceObject);

    if (NT_SUCCESS (status)) {
        DeviceData = (PFDO_DEVICE_DATA) deviceObject->DeviceExtension;
        RtlFillMemory (DeviceData, sizeof (FDO_DEVICE_DATA), 0);

        DeviceData->IsFDO = TRUE;
        DeviceData->DebugLevel = SER_DEFAULT_DEBUG_OUTPUT_LEVEL;
        DeviceData->Self = deviceObject;
        DeviceData->DriverObject = DriverObject;
        for (i=0; i<CYZ_MAX_PORTS; i++) {
           DeviceData->AttachedPDO[i] = NULL;
        }
        DeviceData->NumPDOs = 0;

        DeviceData->DeviceState = PowerDeviceD0;
        DeviceData->SystemState = PowerSystemWorking; // FANNY: This seems to be not needed

        DeviceData->SystemWake=PowerSystemUnspecified;
        DeviceData->DeviceWake=PowerDeviceUnspecified;

        INITIALIZE_PNP_STATE(DeviceData);

        // Set the PDO for use with PlugPlay functions
        DeviceData->UnderlyingPDO = BusPhysicalDeviceObject;


        //
        // Attach our filter driver to the device stack.
        // the return value of IoAttachDeviceToDeviceStack is the top of the
        // attachment chain.  This is where all the IRPs should be routed.
        //
        // Our filter will send IRPs to the top of the stack and use the PDO
        // for all PlugPlay functions.
        //
        DeviceData->TopOfStack
            = IoAttachDeviceToDeviceStack(deviceObject, BusPhysicalDeviceObject);

        deviceObject->Flags |= DO_BUFFERED_IO;

        // Bias outstanding request to 1 so that we can look for a
        // transition to zero when processing the remove device PlugPlay IRP.
        DeviceData->OutstandingIO = 1;

        KeInitializeEvent(&DeviceData->RemoveEvent, SynchronizationEvent,
                        FALSE);

        //
        // Tell the PlugPlay system that this device will need an interface
        // device class shingle.
        //
        // It may be that the driver cannot hang the shingle until it starts
        // the device itself, so that it can query some of its properties.
        // (Aka the shingles guid (or ref string) is based on the properties
        // of the device.)
        //
        status = IoRegisterDeviceInterface (BusPhysicalDeviceObject,
                                            (LPGUID) &GUID_CYCLADESZ_BUS_ENUMERATOR,
                                            NULL,
                                            &DeviceData->DevClassAssocName);

        if (!NT_SUCCESS (status)) {
            CyzLogError(DriverObject, NULL, CyzPhysicalZero, CyzPhysicalZero,
                        0, 0, 0, 0, status, CYZ_REGISTER_INTERFACE_FAILURE,
                        0, NULL, 0, NULL);
            Cycladz_KdPrint_Def (SER_DBG_PNP_ERROR,
                                ("AddDevice: IoRegisterDCA failed (%x)", status));
            goto CycladzAddDevice_Error;
        }

        //
        // If for any reason you need to save values in a safe location that
        // clients of this DeviceClassAssociate might be interested in reading
        // here is the time to do so, with the function
        // IoOpenDeviceClassRegistryKey
        // the symbolic link name used is was returned in
        // DeviceData->DevClassAssocName (the same name which is returned by
        // IoGetDeviceClassAssociations and the SetupAPI equivs.
        //

#if DBG
{
        PWCHAR deviceName = NULL;

        status = IoGetDeviceProperty (BusPhysicalDeviceObject,
                                      DevicePropertyPhysicalDeviceObjectName,0,
                                      NULL,&nameLength);

        if ((nameLength != 0) && (status == STATUS_BUFFER_TOO_SMALL)) {
            deviceName = ExAllocatePool (NonPagedPool, nameLength);

            if (NULL == deviceName) {
               goto someDebugStuffExit;
            }

            IoGetDeviceProperty (BusPhysicalDeviceObject,
                                 DevicePropertyPhysicalDeviceObjectName,
                                 nameLength, deviceName, &nameLength);

            Cycladz_KdPrint_Def (SER_DBG_PNP_TRACE,
                               ("AddDevice: %x to %x->%x (%ws) \n",
                                 deviceObject, DeviceData->TopOfStack,
                                 BusPhysicalDeviceObject, deviceName));
        }

someDebugStuffExit:;
        if (deviceName != NULL) {
            ExFreePool(deviceName);
        }
}
#endif

        DeviceData->IsPci = 1; // Z is always PCI

        status = IoGetDeviceProperty (BusPhysicalDeviceObject,
                                      DevicePropertyUINumber ,
                                      sizeof(uiNumber),
                                      &uiNumber,
                                      &uiNumberLength);

        if (!NT_SUCCESS (status)) {
            uiNumber = 0xFFFFFFFF;

            Cycladz_KdPrint_Def (SER_DBG_PNP_ERROR,
                                ("AddDevice: IoGetDeviceProperty DevicePropertyUINumber failed (%x)", 
                                  status));
        }

        DeviceData->UINumber = uiNumber;

        //
        // Turn on the shingle and point it to the given device object.
        //
        status = IoSetDeviceInterfaceState (
                        &DeviceData->DevClassAssocName,
                        TRUE);

        if (!NT_SUCCESS (status)) {
            Cycladz_KdPrint_Def (SER_DBG_PNP_ERROR,
                                ("AddDevice: IoSetDeviceClass failed (%x)", status));
            //return status;
            goto CycladzAddDevice_Error;
        }

        deviceObject->Flags |= DO_POWER_PAGABLE;
        deviceObject->Flags &= ~DO_DEVICE_INITIALIZING;
    
    } else {
      CyzLogError(DriverObject, NULL, CyzPhysicalZero, CyzPhysicalZero,
                  0, 0, 0, 0, status, CYZ_DEVICE_CREATION_FAILURE,
                  0, NULL, 0, NULL);
    }

    return status;


CycladzAddDevice_Error:

    if (DeviceData->DevClassAssocName.Buffer) {
       RtlFreeUnicodeString(&DeviceData->DevClassAssocName);
    }

    if (DeviceData->TopOfStack) {
       IoDetachDevice(DeviceData->TopOfStack);
    }
    if (deviceObject) {
       IoDeleteDevice(deviceObject);
    }
 
    return status;
}

NTSTATUS
Cycladz_PnP (IN PDEVICE_OBJECT DeviceObject, IN PIRP Irp)
/*++
Routine Description:
    Answer the plethora of Irp Major PnP IRPS.
--*/
{
    PIO_STACK_LOCATION      irpStack;
    NTSTATUS                status;
    PCOMMON_DEVICE_DATA     commonData;
    KIRQL                   oldIrq;
#if DBG
    UCHAR                   MinorFunction;
#endif

    PAGED_CODE ();

    irpStack = IoGetCurrentIrpStackLocation (Irp);
    ASSERT (irpStack->MajorFunction == IRP_MJ_PNP);
#if DBG
    MinorFunction = irpStack->MinorFunction;
#endif

    commonData = (PCOMMON_DEVICE_DATA) DeviceObject->DeviceExtension;

    //
    // If removed, fail the request and get out
    //

    if (commonData->DevicePnPState == Deleted) {   // if (commonData->Removed) added in build 2072.

        Cycladz_KdPrint(commonData, SER_DBG_PNP_TRACE,
                        ("PNP: removed DO: %x got IRP: %x\n", DeviceObject, 
                         Irp));

        Irp->IoStatus.Status = status = STATUS_NO_SUCH_DEVICE;
        IoCompleteRequest (Irp, IO_NO_INCREMENT);
        goto PnPDone;
    }

    //
    // Call either the FDO or PDO Pnp code
    //

    if (commonData->IsFDO) {
        Cycladz_KdPrint(commonData, SER_DBG_PNP_TRACE,
                         ("FDO(%x):%s IRP:%x\n", DeviceObject, 
                          PnPMinorFunctionString(irpStack->MinorFunction),Irp));

        status = Cycladz_FDO_PnP(DeviceObject, Irp, irpStack,
                    (PFDO_DEVICE_DATA) commonData);
        goto PnPDone;

    } 
    
    //
    // PDO
    //
    
    Cycladz_KdPrint(commonData, SER_DBG_PNP_TRACE,
                    ("PDO(%x):%s IRP:%x\n", DeviceObject, 
                     PnPMinorFunctionString(irpStack->MinorFunction),Irp));

    status = Cycladz_PDO_PnP(DeviceObject, Irp, irpStack,
                             (PPDO_DEVICE_DATA) commonData);

PnPDone:;
    return status;
}

NTSTATUS
Cycladz_FDO_PnP (
    IN PDEVICE_OBJECT       DeviceObject,
    IN PIRP                 Irp,
    IN PIO_STACK_LOCATION   IrpStack,
    IN PFDO_DEVICE_DATA     DeviceData
    )
/*++
Routine Description:
    Handle requests from the PlugPlay system for the BUS itself

    NB: the various Minor functions of the PlugPlay system will not be
    overlapped and do not have to be reentrant

--*/
{
    NTSTATUS    status;
    KIRQL       oldIrq;
    KEVENT      event;
    ULONG       length;
    ULONG       i;
    PLIST_ENTRY entry;
    PPDO_DEVICE_DATA    pdoData;
    PDEVICE_RELATIONS   relations;
    PIO_STACK_LOCATION  stack;
    PRTL_QUERY_REGISTRY_TABLE QueryTable = NULL;
    ULONG DebugLevelDefault = SER_DEFAULT_DEBUG_OUTPUT_LEVEL;
    HANDLE      instanceKey;
    UNICODE_STRING  keyName;
    ULONG       numOfPorts;

    PAGED_CODE ();

    status = Cycladz_IncIoCount (DeviceData);
    if (!NT_SUCCESS (status)) {
        //Irp->IoStatus.Information = 0; Removed in build 2072
        Irp->IoStatus.Status = status;
        IoCompleteRequest (Irp, IO_NO_INCREMENT);
        return status;
    }

    stack = IoGetCurrentIrpStackLocation (Irp);

    switch (IrpStack->MinorFunction) {

       case IRP_MN_FILTER_RESOURCE_REQUIREMENTS: {

         PIO_RESOURCE_REQUIREMENTS_LIST pReqList;
         PIO_RESOURCE_LIST pResList;
         PIO_RESOURCE_DESCRIPTOR pResDesc;
         ULONG i, j;
         ULONG reqCnt;
         ULONG gotPLX;
         ULONG gotMemory;
         ULONG gotInt;
         ULONG listNum;

         // FANNY: The serial driver had it as SynchronizationEvent.
         KeInitializeEvent(&event, NotificationEvent, FALSE);

         IoCopyCurrentIrpStackLocationToNext(Irp);
         IoSetCompletionRoutine(Irp, CycladzSyncCompletion, &event,
                                TRUE, TRUE, TRUE);

         status = IoCallDriver(DeviceData->TopOfStack, Irp);


         //
         // Wait for lower drivers to be done with the Irp
         //

         if (status == STATUS_PENDING) {
            KeWaitForSingleObject (&event, Executive, KernelMode, FALSE,
                                   NULL);
         }

         if (Irp->IoStatus.Information == 0) {
            if (stack->Parameters.FilterResourceRequirements
                .IoResourceRequirementList == 0) {
               Cycladz_KdPrint(DeviceData, SER_DBG_CYCLADES, ("Can't filter NULL resources!"
                                                       "\n"));
               status = Irp->IoStatus.Status;
               IoCompleteRequest (Irp, IO_NO_INCREMENT);
               Cycladz_DecIoCount (DeviceData);
               return status;
            }

            Irp->IoStatus.Information = (ULONG_PTR)stack->Parameters
                                        .FilterResourceRequirements
                                        .IoResourceRequirementList;

         }


         //
         // Force ISR ports in IO_RES_REQ_LIST to shared status
         // Force interrupts to shared status
         //

         //
         // We will only process the first list -- multiport boards
         // should not have alternative resources
         //

         pReqList = (PIO_RESOURCE_REQUIREMENTS_LIST)Irp->IoStatus.Information;
         pResList = &pReqList->List[0];

         Cycladz_KdPrint(DeviceData, SER_DBG_CYCLADES, ("------- List has %x lists "
                                                      "(including alternatives)\n",
                                                        pReqList->AlternativeLists));

         for (listNum = 0; listNum < (pReqList->AlternativeLists);
              listNum++) {
            gotPLX = 0;
            gotMemory = 0;
            gotInt = 0;

            Cycladz_KdPrint(DeviceData, SER_DBG_CYCLADES, ("------- List has %x resources in it\n",
                                                           pResList->Count));

            for (j = 0; (j < pResList->Count); j++) {
               pResDesc = &pResList->Descriptors[j];

               switch (pResDesc->Type) {
               case CmResourceTypeMemory:
                  if (pResDesc->u.Memory.Length == CYZ_RUNTIME_LENGTH) {
                      gotPLX = 1;
                      //wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww
                      //pResDesc->ShareDisposition = CmResourceShareShared; 
                      //wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww
                      //pResDesc->ShareDisposition = CmResourceShareDriverExclusive; 
                      //Cycladz_KdPrint(DeviceData,SER_DBG_CYCLADES,
                      //                              ("------- Sharing PLX Memory for "
                      //                               "device %x\n", DeviceData->TopOfStack));

                  } else {
                      gotMemory = 1;
                      //wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww
                      //pResDesc->ShareDisposition = CmResourceShareShared; 
                      //wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww
                      //pResDesc->ShareDisposition = CmResourceShareDriverExclusive; 
                      //Cycladz_KdPrint(DeviceData,SER_DBG_CYCLADES,
                      //                              ("------- Sharing Board Memory for "
                      //                               "device %x\n", DeviceData->TopOfStack));
                  }
                  break;

               case CmResourceTypePort:
                  Cycladz_KdPrint(DeviceData,SER_DBG_CYCLADES,
                                         ("------- We should not have Port resource\n"));
                  break;

               case CmResourceTypeInterrupt:
                  gotInt = 1;
                  if (DeviceData->IsPci) {
                      pResDesc->ShareDisposition = CmResourceShareShared;
                  }
                  Cycladz_KdPrint(DeviceData,SER_DBG_CYCLADES,("------- Sharing interrupt for "
                                                 "device %x\n", DeviceData->TopOfStack));
                  break;

               default:
                  break;
               }

               //
               // If we found what we need, we can break out of the loop
               //

               // FANNY: STRANGE, THERE ARE TWICE FOR EACH TYPE. IT SEEMS THAT 
               // BOTH RAW AND TRANSLATED ARE LISTED.
               // (gotPLX && gotMemory && gotInt) {
               // break;
               //
            }

            pResList = (PIO_RESOURCE_LIST)((PUCHAR)pResList
                                           + sizeof(IO_RESOURCE_LIST)
                                           + sizeof(IO_RESOURCE_DESCRIPTOR)
                                           * (pResList->Count - 1));
         }



         Irp->IoStatus.Status = STATUS_SUCCESS;
         IoCompleteRequest (Irp, IO_NO_INCREMENT);
         Cycladz_DecIoCount (DeviceData);
         return STATUS_SUCCESS;
    }

    case IRP_MN_START_DEVICE:
        //
        // BEFORE you are allowed to ``touch'' the device object to which
        // the FDO is attached (that send an irp from the bus to the Device
        // object to which the bus is attached).   You must first pass down
        // the start IRP.  It might not be powered on, or able to access or
        // something.
        //


        // FANNY_TODO
        // SHOULD I CALL MmLockPagableCodeSection as the serial driver?


//        if (DeviceData->Started) {
//            Cycladz_KdPrint (DeviceData, SER_DBG_PNP_TRACE,
//                ("Device already started\n"));
//            status = STATUS_SUCCESS;
//            break;
//        }


        KeInitializeEvent (&event, NotificationEvent, FALSE);
        IoCopyCurrentIrpStackLocationToNext (Irp);

        IoSetCompletionRoutine (Irp,
                                CycladzSyncCompletion,
                                &event,
                                TRUE,
                                TRUE,
                                TRUE);

        status = IoCallDriver (DeviceData->TopOfStack, Irp);

        if (STATUS_PENDING == status) {
            // wait for it...

            status = KeWaitForSingleObject (&event,
                                            Executive,
                                            KernelMode,
                                            FALSE, // Not allertable
                                            NULL); // No timeout structure

            ASSERT (STATUS_SUCCESS == status);

            status = Irp->IoStatus.Status;
        }

        if (NT_SUCCESS(status)) {

            //
            // Get the debug level from the registry
            //

            if (NULL == (QueryTable = ExAllocatePool(                                        
                                        PagedPool,
                                        sizeof(RTL_QUERY_REGISTRY_TABLE)*2
                                        ))) {
                Cycladz_KdPrint (DeviceData, SER_DBG_PNP_ERROR,
                                ("Failed to allocate memory to query registy\n"));
                DeviceData->DebugLevel = DebugLevelDefault;
            } else {
                RtlZeroMemory(
                           QueryTable,
                           sizeof(RTL_QUERY_REGISTRY_TABLE)*2
                           );

                QueryTable[0].QueryRoutine = NULL;
                QueryTable[0].Flags         = RTL_QUERY_REGISTRY_DIRECT;
                QueryTable[0].EntryContext = &DeviceData->DebugLevel;
                QueryTable[0].Name      = L"DebugLevel";
                QueryTable[0].DefaultType   = REG_DWORD;
                QueryTable[0].DefaultData   = &DebugLevelDefault;
                QueryTable[0].DefaultLength= sizeof(ULONG);

                // CIMEXCIMEX: The rest of the table isn't filled in!  Comment changed bld 2128

                if (!NT_SUCCESS(RtlQueryRegistryValues(
                    RTL_REGISTRY_SERVICES,
                    L"cyclad-z",
                    QueryTable,
                    NULL,
                    NULL))) {
                    Cycladz_KdPrint (DeviceData,SER_DBG_PNP_ERROR,
                        ("Failed to get debug level from registry.  "
                         "Using default\n"));
                    DeviceData->DebugLevel = DebugLevelDefault;
                }

                ExFreePool( QueryTable );
            }

            status = Cycladz_GetResourceInfo(DeviceObject,                    
                        IrpStack->Parameters.StartDevice.AllocatedResources,
                        IrpStack->Parameters.StartDevice.AllocatedResourcesTranslated);

            if (NT_SUCCESS(status)) {

                ULONG numberOfResources = CYZ_NUMBER_OF_RESOURCES;
                if (!DeviceData->IsPci) {
                    numberOfResources--;
                }
                status = Cycladz_BuildResourceList(&DeviceData->PChildResourceList,
                                    &DeviceData->PChildResourceListSize,
                                    IrpStack->Parameters.StartDevice.AllocatedResources,
                                    numberOfResources);

                if (!NT_SUCCESS(status)) {
                    goto CaseSTART_end;
                }

                status = Cycladz_BuildResourceList(&DeviceData->PChildResourceListTr,
                                    &DeviceData->PChildResourceListSizeTr,
                                    IrpStack->Parameters.StartDevice.AllocatedResourcesTranslated,
                                    numberOfResources);

                if (!NT_SUCCESS(status)) {
                    goto CaseSTART_end;
                }
              
                status = Cycladz_BuildRequirementsList(&DeviceData->PChildRequiredList,
                                    IrpStack->Parameters.StartDevice.AllocatedResources,
                                    numberOfResources);

                if (!NT_SUCCESS(status)) {
                    goto CaseSTART_end;
                }

                //
                // See if we are in the proper power state.
                //

                if (DeviceData->DeviceState != PowerDeviceD0) {

                    status = Cycladz_GotoPowerState(DeviceData->UnderlyingPDO, DeviceData, 
                                              PowerDeviceD0);

                    if (!NT_SUCCESS(status)) {
                        goto CaseSTART_end;
                    }
                }
              
                numOfPorts=Cycladz_DoesBoardExist(DeviceData);
                if (!numOfPorts){
                    Cycladz_KdPrint(DeviceData,SER_DBG_CYCLADES,("Does Port exist test failed\n"));
                    status = STATUS_SERIAL_NO_DEVICE_INITED;
                    goto CaseSTART_end;
                }
                Cycladz_KdPrint(DeviceData,SER_DBG_CYCLADES,("Board found!\n"));

                // Save number of ports to the Registry, so that Property Page
                // code can retrieve it.
    
                IoOpenDeviceRegistryKey(DeviceData->UnderlyingPDO,PLUGPLAY_REGKEY_DEVICE,
                    STANDARD_RIGHTS_WRITE,&instanceKey);

                RtlInitUnicodeString(&keyName,L"NumOfPorts");
                ZwSetValueKey(instanceKey,&keyName,0,REG_DWORD,&numOfPorts,sizeof(ULONG));

                ZwFlushKey(instanceKey);
                ZwClose(instanceKey);

                Cycladz_KdPrint (DeviceData, SER_DBG_PNP_TRACE,
                                ("Start Device: Device started successfully\n"));
                SET_NEW_PNP_STATE(DeviceData, Started);

                // TODO: FOR NOW, LET'S KEEP THIS DEVICE IN POWER D0. 
                // THE SERIAL DRIVER SEEMS TO POWER DOWN TO D3, AND BECOME D0 DURING OPEN.
                // BUT NOT SURE IF THE BOARD NEED TO BE IN D0 WHILE THE CHILD DEVICES
                // ARE ENUMARATED.

            }                                
        }

CaseSTART_end:
        if (!NT_SUCCESS(status)) {
            Cycladz_ReleaseResources(DeviceData);
        }
        
        //
        // We must now complete the IRP, since we stopped it in the
        // completetion routine with MORE_PROCESSING_REQUIRED.
        //

        //Irp->IoStatus.Information = 0;  Removed in build 2072
        break;

    case IRP_MN_QUERY_STOP_DEVICE:

        //
        // Test to see if there are any PDO created as children of this FDO
        // If there are then conclude the device is busy and fail the
        // query stop.
        //
        // CIMEXCIMEX   (BUGBUG replaced by CIMEXCIMEX on build 2128 - Fanny)
        // We could do better, by seing if the children PDOs are actually
        // currently open.  If they are not then we could stop, get new
        // resouces, fill in the new resouce values, and then when a new client
        // opens the PDO use the new resources.  But this works for now.
        //
//TODO FANNY: FOR NOW WE WILL ALWAYS ACCEPT TO STOP DEVICE. REVIEW THIS LATER...
//        if (DeviceData->AttachedPDO) {
//            status = STATUS_UNSUCCESSFUL;
//        } else {
//            status = STATUS_SUCCESS;
//        }

        status = STATUS_SUCCESS;

        Irp->IoStatus.Status = status;

        if (NT_SUCCESS(status)) {
           SET_NEW_PNP_STATE(DeviceData, StopPending);
           IoSkipCurrentIrpStackLocation (Irp);
           status = IoCallDriver (DeviceData->TopOfStack, Irp);
        } else {
           IoCompleteRequest(Irp, IO_NO_INCREMENT);
        }

        Cycladz_DecIoCount (DeviceData);
        return status;

    case IRP_MN_CANCEL_STOP_DEVICE:

        KeInitializeEvent (&event, NotificationEvent, FALSE);
        IoCopyCurrentIrpStackLocationToNext (Irp);

        IoSetCompletionRoutine (Irp,
                                CycladzSyncCompletion,
                                &event,
                                TRUE,
                                TRUE,
                                TRUE);

        status = IoCallDriver (DeviceData->TopOfStack, Irp);

        if (STATUS_PENDING == status) {
            // wait for it...

            status = KeWaitForSingleObject (&event,
                                            Executive,
                                            KernelMode,
                                            FALSE, // Not allertable
                                            NULL); // No timeout structure

            ASSERT (STATUS_SUCCESS == status);

            status = Irp->IoStatus.Status;
        }

        if(StopPending == DeviceData->DevicePnPState)
        {
            //
            // We did receive a query-stop, so restore.
            //             
            RESTORE_PREVIOUS_PNP_STATE(DeviceData);
            ASSERT(DeviceData->DevicePnPState == Started);
        }        

        break;

    case IRP_MN_STOP_DEVICE:

        //
        // After the start IRP has been sent to the lower driver object, the
        // bus may NOT send any more IRPS down ``touch'' until another START
        // has occured.
        // What ever access is required must be done before the Irp is passed
        // on.
        //
        // Stop device means that the resources given durring Start device
        // are no revoked.  So we need to stop using them
        //
        if (DeviceData->Runtime && DeviceData->BoardMemory) {
            ULONG mail_box_0;

            mail_box_0 = CYZ_READ_ULONG(&(DeviceData->Runtime)->mail_box_0);
			if ((mail_box_0 == 0) || z_fpga_check(DeviceData)) {
				z_stop_cpu(DeviceData);
			}
        }
        Cycladz_ReleaseResources(DeviceData);

        SET_NEW_PNP_STATE(DeviceData, Stopped);

        //
        // We don't need a completion routine so fire and forget.
        //
        // Set the current stack location to the next stack location and
        // call the next device object.
        //
        Irp->IoStatus.Status = STATUS_SUCCESS;
        IoSkipCurrentIrpStackLocation (Irp);
        status = IoCallDriver (DeviceData->TopOfStack, Irp);

        Cycladz_DecIoCount (DeviceData);
        return status;

    case IRP_MN_QUERY_REMOVE_DEVICE:
        //
        // If we were to fail this call then we would need to complete the
        // IRP here.  Since we are not, set the status to SUCCESS and
        // call the next driver.
        //

        SET_NEW_PNP_STATE(DeviceData, RemovePending);

        Irp->IoStatus.Status = STATUS_SUCCESS;
        IoSkipCurrentIrpStackLocation (Irp);
        status = IoCallDriver (DeviceData->TopOfStack, Irp);
        Cycladz_DecIoCount (DeviceData);
        return status;

    case IRP_MN_CANCEL_REMOVE_DEVICE:

        //
        // If we were to fail this call then we would need to complete the
        // IRP here.  Since we are not, set the status to SUCCESS and
        // call the next driver.
        //
        
        //
        // First check to see whether you have received cancel-remove
        // without first receiving a query-remove. This could happen if 
        // someone above us fails a query-remove and passes down the 
        // subsequent cancel-remove.
        //
        
        if(RemovePending == DeviceData->DevicePnPState)
        {
            //
            // We did receive a query-remove, so restore.
            //             
            RESTORE_PREVIOUS_PNP_STATE(DeviceData);
        }
        IoSkipCurrentIrpStackLocation (Irp);
        status = IoCallDriver (DeviceData->TopOfStack, Irp);
        Cycladz_DecIoCount (DeviceData);
        return status;
        
    case IRP_MN_SURPRISE_REMOVAL:

        SET_NEW_PNP_STATE(DeviceData, SurpriseRemovePending);

        Irp->IoStatus.Status = STATUS_SUCCESS;
        IoSkipCurrentIrpStackLocation (Irp);
        status = IoCallDriver (DeviceData->TopOfStack, Irp);
        Cycladz_DecIoCount (DeviceData);
        return status;

    case IRP_MN_REMOVE_DEVICE:

        //
        // The PlugPlay system has detected the removal of this device.  We
        // have no choice but to detach and delete the device object.
        // (If we wanted to express and interest in preventing this removal,
        // we should have filtered the query remove and query stop routines.)
        //
        // Note! we might receive a remove WITHOUT first receiving a stop.
        // ASSERT (!DeviceData->Removed);

        // We will accept no new requests
        //
//        DeviceData->Removed = TRUE;
        SET_NEW_PNP_STATE(DeviceData, Deleted);

        //
        // Complete any outstanding IRPs queued by the driver here.
        //

        //
        // Make the DCA go away.  Some drivers may choose to remove the DCA
        // when they receive a stop or even a query stop.  We just don't care.
        //
        IoSetDeviceInterfaceState (&DeviceData->DevClassAssocName, FALSE);

        //
        // Here if we had any outstanding requests in a personal queue we should
        // complete them all now.
        //
        // Note, the device is guarenteed stopped, so we cannot send it any non-
        // PNP IRPS.
        //

        //
        // Wait for all outstanding requests to complete
        //
        Cycladz_KdPrint (DeviceData, SER_DBG_PNP_TRACE,
            ("Waiting for outstanding requests\n"));
        i = InterlockedDecrement (&DeviceData->OutstandingIO);

        ASSERT (0 < i);

        if (0 != InterlockedDecrement (&DeviceData->OutstandingIO)) {
            Cycladz_KdPrint (DeviceData, SER_DBG_PNP_INFO,
                          ("Remove Device waiting for request to complete\n"));

            KeWaitForSingleObject (&DeviceData->RemoveEvent,
                                   Executive,
                                   KernelMode,
                                   FALSE, // Not Alertable
                                   NULL); // No timeout
        }

        // Stop hw
        if (DeviceData->Runtime && DeviceData->BoardMemory) {
            ULONG mail_box_0;

            mail_box_0 = CYZ_READ_ULONG(&(DeviceData->Runtime)->mail_box_0);
            if ((mail_box_0 == 0) || z_fpga_check(DeviceData)) {
                z_stop_cpu(DeviceData);
            }
            //z_reset_board(DeviceData);
        }

        //
        // Fire and forget
        //
        Irp->IoStatus.Status = STATUS_SUCCESS;
        IoSkipCurrentIrpStackLocation (Irp);
        status = IoCallDriver (DeviceData->TopOfStack, Irp);

        //
        // Free the associated resources
        //

        //
        // Detach from the underlying devices.
        //
        Cycladz_KdPrint(DeviceData, SER_DBG_PNP_INFO,
                        ("IoDetachDevice: 0x%x\n", DeviceData->TopOfStack));
        IoDetachDevice (DeviceData->TopOfStack);

        //
        // Clean up any resources here
        //
        Cycladz_ReleaseResources(DeviceData);

        ExFreePool (DeviceData->DevClassAssocName.Buffer);
        Cycladz_KdPrint(DeviceData, SER_DBG_PNP_INFO,
                        ("IoDeleteDevice: 0x%x\n", DeviceObject));

        //
        // Remove any PDO's we ejected
        //
//FANNY: CHANGED TO SUPPORT MORE THAN ONE CHILD DEVICE
//        if (DeviceData->AttachedPDO != NULL) {
//           ASSERT(DeviceData->NumPDOs == 1);
//
//           Cycladz_PnPRemove(DeviceData->AttachedPDO, DeviceData->PdoData);
//           DeviceData->PdoData = NULL;
//           DeviceData->AttachedPDO = NULL;
//           DeviceData->NumPDOs = 0;
//        }

        i=DeviceData->NumPDOs;
        while(i--) {
           if (DeviceData->AttachedPDO[i] != NULL) {
              //(DeviceData->PdoData[i])->Attached = FALSE; Moved to PDO IRP_MN_SURPRISE_REMOVAL.
              if(SurpriseRemovePending != (DeviceData->PdoData[i])->DevicePnPState) {
                 Cycladz_PnPRemove(DeviceData->AttachedPDO[i], DeviceData->PdoData[i]);
              }
              DeviceData->PdoData[i] = NULL;
              DeviceData->AttachedPDO[i] = NULL;
           }
        }
        DeviceData->NumPDOs = 0;

        IoDeleteDevice(DeviceObject);

        return status;


    case IRP_MN_QUERY_DEVICE_RELATIONS:
        Cycladz_KdPrint (DeviceData, SER_DBG_PNP_TRACE, 
                    ("\tQueryDeviceRelation Type: %d\n", 
                    IrpStack->Parameters.QueryDeviceRelations.Type));

        if (BusRelations != IrpStack->Parameters.QueryDeviceRelations.Type) {
            //
            // We don't support this
            //
            Cycladz_KdPrint (DeviceData, SER_DBG_PNP_TRACE,
                ("Query Device Relations - Non bus\n"));
            goto CYZ_FDO_PNP_DEFAULT;
        }

        Cycladz_KdPrint (DeviceData, SER_DBG_PNP_TRACE,
            ("\tQuery Bus Relations\n"));

        // Check for new devices or if old devices still there.
        status = Cycladz_ReenumerateDevices(Irp, DeviceData );

        //
        // Tell the plug and play system about all the PDOs.
        //
        // There might also be device relations below and above this FDO,
        // so, be sure to propagate the relations from the upper drivers.
        //
        // No Completion routine is needed so long as the status is preset
        // to success.  (PDOs complete plug and play irps with the current
        // IoStatus.Status and IoStatus.Information as the default.)
        //

        //KeAcquireSpinLock (&DeviceData->Spin, &oldIrq);

        i = (0 == Irp->IoStatus.Information) ? 0 :
            ((PDEVICE_RELATIONS) Irp->IoStatus.Information)->Count;
        // The current number of PDOs in the device relations structure

        Cycladz_KdPrint (DeviceData, SER_DBG_PNP_TRACE,
                           ("#PDOS = %d + %d\n", i, DeviceData->NumPDOs));

        length = sizeof(DEVICE_RELATIONS) +
                ((DeviceData->NumPDOs + i) * sizeof (PDEVICE_OBJECT));

        relations = (PDEVICE_RELATIONS) ExAllocatePool (NonPagedPool, length);

        if (NULL == relations) {
           Irp->IoStatus.Status = STATUS_INSUFFICIENT_RESOURCES;
           IoCompleteRequest(Irp, IO_NO_INCREMENT);
           Cycladz_DecIoCount(DeviceData);
           return STATUS_INSUFFICIENT_RESOURCES;
        }

        //
        // Copy in the device objects so far
        //
        if (i) {
            RtlCopyMemory (
                  relations->Objects,
                  ((PDEVICE_RELATIONS) Irp->IoStatus.Information)->Objects,
                  i * sizeof (PDEVICE_OBJECT));
        }

        relations->Count = DeviceData->NumPDOs + i;


        //
        // For each PDO on this bus add a pointer to the device relations
        // buffer, being sure to take out a reference to that object.
        // The PlugPlay system will dereference the object when it is done with
        // it and free the device relations buffer.
        //

        //FANNY: CHANGED TO SUPPORT ADDITIONAL CHILD DEVICES
//        if (DeviceData->NumPDOs) {
//            relations->Objects[relations->Count-1] = DeviceData->AttachedPDO;
//            ObReferenceObject (DeviceData->AttachedPDO);
//        }

        for (i=0; i< DeviceData->NumPDOs; i++) {
           relations->Objects[relations->Count - DeviceData->NumPDOs + i] = 
                                                               DeviceData->AttachedPDO[i];
           ObReferenceObject (DeviceData->AttachedPDO[i]);

           Cycladz_KdPrint (DeviceData, SER_DBG_PNP_TRACE,
                           ("Child PDOS: %x\n", DeviceData->AttachedPDO[i]));
        }

        //
        // Set up and pass the IRP further down the stack
        //
        Irp->IoStatus.Status = STATUS_SUCCESS;

        if (0 != Irp->IoStatus.Information) {
            ExFreePool ((PVOID) Irp->IoStatus.Information);
        }
        Irp->IoStatus.Information = (ULONG_PTR)relations;

        IoSkipCurrentIrpStackLocation (Irp);
        status = IoCallDriver (DeviceData->TopOfStack, Irp);

        Cycladz_DecIoCount (DeviceData);

        return status;

    case IRP_MN_QUERY_CAPABILITIES: {

        PIO_STACK_LOCATION  irpSp;

        //
        // Send this down to the PDO first
        //

        KeInitializeEvent (&event, NotificationEvent, FALSE);
        IoCopyCurrentIrpStackLocationToNext (Irp);

        IoSetCompletionRoutine (Irp,
                                CycladzSyncCompletion,
                                &event,
                                TRUE,
                                TRUE,
                                TRUE);

        status = IoCallDriver (DeviceData->TopOfStack, Irp);

        if (STATUS_PENDING == status) {
            // wait for it...

            status = KeWaitForSingleObject (&event,
                                            Executive,
                                            KernelMode,
                                            FALSE, // Not allertable
                                            NULL); // No timeout structure

            ASSERT (STATUS_SUCCESS == status);

            status = Irp->IoStatus.Status;
        }

        if (NT_SUCCESS(status)) {

            irpSp = IoGetCurrentIrpStackLocation(Irp);

            DeviceData->SystemWake
                = irpSp->Parameters.DeviceCapabilities.Capabilities->SystemWake;
            DeviceData->DeviceWake
                = irpSp->Parameters.DeviceCapabilities.Capabilities->DeviceWake;

            Cycladz_KdPrint(DeviceData, SER_DBG_PNP_INFO, ("SystemWake %d\n",DeviceData->SystemWake)); 
            Cycladz_KdPrint(DeviceData, SER_DBG_PNP_INFO, ("DeviceWake %d\n",DeviceData->DeviceWake)); 
        }

        break;
    }

    default:
        //
        // In the default case we merely call the next driver since
        // we don't know what to do.
        //
        Cycladz_KdPrint(DeviceData, SER_DBG_PNP_TRACE, 
                 ("FDO(%x):%s not handled\n", DeviceObject,
                        PnPMinorFunctionString(IrpStack->MinorFunction)));
CYZ_FDO_PNP_DEFAULT:

        //
        // Fire and Forget
        //
        IoSkipCurrentIrpStackLocation (Irp);

        //
        // Done, do NOT complete the IRP, it will be processed by the lower
        // device object, which will complete the IRP
        //

        status = IoCallDriver (DeviceData->TopOfStack, Irp);
        Cycladz_DecIoCount (DeviceData);
        return status;
    }

    Irp->IoStatus.Status = status;
    IoCompleteRequest (Irp, IO_NO_INCREMENT);

    Cycladz_DecIoCount (DeviceData);
    return status;
}


NTSTATUS
Cycladz_PDO_PnP (IN PDEVICE_OBJECT DeviceObject, IN PIRP Irp,
                 IN PIO_STACK_LOCATION IrpStack, IN PPDO_DEVICE_DATA DeviceData)
/*++
Routine Description:
    Handle requests from the PlugPlay system for the devices on the BUS

--*/
{
   PDEVICE_CAPABILITIES    deviceCapabilities;
   ULONG                   information;
   PWCHAR                  buffer;
   ULONG                   length, i, j;
   NTSTATUS                status;
   KIRQL                   oldIrq;
   HANDLE                  keyHandle;
   UNICODE_STRING          keyName;
   PWCHAR returnBuffer = NULL;

   PAGED_CODE();

   status = Irp->IoStatus.Status;

   //
   // NB: since we are a bus enumerator, we have no one to whom we could
   // defer these irps.  Therefore we do not pass them down but merely
   // return them.
   //

   switch (IrpStack->MinorFunction) {
   case IRP_MN_QUERY_CAPABILITIES:

      //
      // Get the packet.
      //

      deviceCapabilities=IrpStack->Parameters.DeviceCapabilities.Capabilities;

      //
      // Set the capabilities.
      //

      deviceCapabilities->Version = 1;
      deviceCapabilities->Size = sizeof (DEVICE_CAPABILITIES);

      //
      // We cannot wake the system.
      //

      deviceCapabilities->SystemWake 
          = ((PFDO_DEVICE_DATA)DeviceData->ParentFdo->DeviceExtension)
            ->SystemWake;
      deviceCapabilities->DeviceWake 
          = ((PFDO_DEVICE_DATA)DeviceData->ParentFdo->DeviceExtension)
            ->DeviceWake;

      //
      // We have no latencies
      //

      deviceCapabilities->D1Latency = 0;
      deviceCapabilities->D2Latency = 0;
      deviceCapabilities->D3Latency = 0;

      deviceCapabilities->UniqueID = FALSE;

      // 
      // Initialize supported DeviceState
      //

      deviceCapabilities->DeviceState[PowerSystemWorking] = PowerDeviceD0;
      deviceCapabilities->DeviceState[PowerSystemSleeping1] = PowerDeviceD3;
      deviceCapabilities->DeviceState[PowerSystemSleeping2] = PowerDeviceD3;
      deviceCapabilities->DeviceState[PowerSystemSleeping3] = PowerDeviceD3;
      deviceCapabilities->DeviceState[PowerSystemHibernate] = PowerDeviceD3;
      deviceCapabilities->DeviceState[PowerSystemShutdown] = PowerDeviceD3;

      status = STATUS_SUCCESS;
      break;

   case IRP_MN_QUERY_DEVICE_TEXT: {
      if ((IrpStack->Parameters.QueryDeviceText.DeviceTextType
          != DeviceTextDescription) || DeviceData->DevDesc.Buffer == NULL) {
         break;
      }

// FANNY - CHANGE TO MaximumLength
//      returnBuffer = ExAllocatePool(PagedPool, DeviceData->DevDesc.Length);
      returnBuffer = ExAllocatePool(PagedPool, DeviceData->DevDesc.MaximumLength);

      Cycladz_KdPrint(DeviceData, SER_DBG_CYCLADES,("returnBuffer %x\n", returnBuffer));

      if (returnBuffer == NULL) {
         status = STATUS_INSUFFICIENT_RESOURCES;
         break;
      }

      status = STATUS_SUCCESS;

// FANNY - CHANGE TO MaximumLength
//      RtlCopyMemory(returnBuffer, DeviceData->DevDesc.Buffer,
//                    DeviceData->DevDesc.Length);
      RtlCopyMemory(returnBuffer, DeviceData->DevDesc.Buffer,
                    DeviceData->DevDesc.MaximumLength);

      Cycladz_KdPrint(DeviceData, SER_DBG_PNP_TRACE,
                            ("TextID: buf %ws\n", returnBuffer));

      Cycladz_KdPrint(DeviceData, SER_DBG_CYCLADES,
                            ("DevDesc.Length is %d and DevDesc.MaximumLength is %d\n", 
                              DeviceData->DevDesc.Length,DeviceData->DevDesc.MaximumLength));

      Irp->IoStatus.Information = (ULONG_PTR)returnBuffer;
      break;
   }


   case IRP_MN_QUERY_ID:
      //
      // Query the IDs of the device
      //

      switch (IrpStack->Parameters.QueryId.IdType) {

      case BusQueryDeviceID:
      case BusQueryHardwareIDs:
      case BusQueryCompatibleIDs:
      case BusQueryInstanceID:
         {
            PUNICODE_STRING pId;
            status = STATUS_SUCCESS;

            switch (IrpStack->Parameters.QueryId.IdType) {
            case BusQueryDeviceID:
               pId = &DeviceData->DeviceIDs;
               break;

            case BusQueryHardwareIDs:
               pId = &DeviceData->HardwareIDs;
               break;

            case BusQueryCompatibleIDs:
               pId = &DeviceData->CompIDs;
               break;

            case BusQueryInstanceID:
            // Build an instance ID.  This is what PnP uses to tell if it has
            // seen this thing before or not.  Build it from the first hardware
            // id and the port number.
               pId = &DeviceData->InstanceIDs;
               break;
            }

            buffer = pId->Buffer;

            if (buffer != NULL) {
               // FANNY CHANGED
               //length = pId->Length;
               length = pId->MaximumLength;
               returnBuffer = ExAllocatePool(PagedPool, length);
               if (returnBuffer != NULL) {
#if DBG
                  RtlFillMemory(returnBuffer, length, 0xff);
#endif
                  // FANNY CHANGED
                  //RtlCopyMemory(returnBuffer, buffer, pId->Length);
                  RtlCopyMemory(returnBuffer, buffer, length);
               } else {
                  status = STATUS_INSUFFICIENT_RESOURCES;
               }
            } else {
               // FANNY ADDED
               status = STATUS_NOT_FOUND;
            }

            Cycladz_KdPrint(DeviceData, SER_DBG_PNP_TRACE,
                            ("ID: Unicode 0x%x\n", pId));
            Cycladz_KdPrint(DeviceData, SER_DBG_PNP_TRACE,
                            ("ID: buf 0x%x\n", returnBuffer));

            Irp->IoStatus.Information = (ULONG_PTR)returnBuffer;
         }
         break;

      }
      break;

      case IRP_MN_QUERY_BUS_INFORMATION: {
       PPNP_BUS_INFORMATION pBusInfo;
       PFDO_DEVICE_DATA parentExtension;
       parentExtension = (DeviceData->ParentFdo)->DeviceExtension;

       ASSERTMSG("Cycladz appears not to be the sole bus?!?",
                 Irp->IoStatus.Information == (ULONG_PTR)NULL);

       pBusInfo = ExAllocatePool(PagedPool, sizeof(PNP_BUS_INFORMATION));

       if (pBusInfo == NULL) {
          status = STATUS_INSUFFICIENT_RESOURCES;
          break;
       }

       pBusInfo->BusTypeGuid = GUID_BUS_TYPE_CYCLADESZ;
       if (parentExtension->IsPci) {
         pBusInfo->LegacyBusType = PCIBus;
       } else {
         pBusInfo->LegacyBusType = Isa;
       }

       //
       // We really can't track our bus number since we can be torn
       // down with our bus
       //

       //pBusInfo->BusNumber = 0;
       pBusInfo->BusNumber = parentExtension->UINumber;

       Irp->IoStatus.Information = (ULONG_PTR)pBusInfo;
       status = STATUS_SUCCESS;
       break;
       }

   case IRP_MN_QUERY_DEVICE_RELATIONS:
      Cycladz_KdPrint (DeviceData, SER_DBG_PNP_TRACE, 
                    ("\tQueryDeviceRelation Type: %d\n", 
                    IrpStack->Parameters.QueryDeviceRelations.Type));

      switch (IrpStack->Parameters.QueryDeviceRelations.Type) {
      case TargetDeviceRelation: {
         PDEVICE_RELATIONS pDevRel;

         //
         // No one else should respond to this since we are the PDO
         //

         ASSERT(Irp->IoStatus.Information == 0);

         if (Irp->IoStatus.Information != 0) {
            break;
         }


         pDevRel = ExAllocatePool(PagedPool, sizeof(DEVICE_RELATIONS));

         if (pDevRel == NULL) {
            status = STATUS_INSUFFICIENT_RESOURCES;
            break;
         }

         pDevRel->Count = 1;
         pDevRel->Objects[0] = DeviceObject;
         ObReferenceObject(DeviceObject);

         status = STATUS_SUCCESS;
         Irp->IoStatus.Information = (ULONG_PTR)pDevRel;
         break;
      }


      default:
         break;
      }

      break;

   case IRP_MN_START_DEVICE:

      //
      // Set the hw resources in the registry for this device.
      //

      status = IoOpenDeviceRegistryKey(DeviceObject, PLUGPLAY_REGKEY_DEVICE,
                                       STANDARD_RIGHTS_WRITE, &keyHandle);

      if (!NT_SUCCESS(status)) {
         //
         // This is a fatal error.  If we can't get to our registry key,
         // we are sunk.
         //
         Cycladz_KdPrint(DeviceData, SER_DBG_SS_ERROR,
                          ("IoOpenDeviceRegistryKey failed - %x\n", status));
      } else {

         ULONG portIndex;
         PFDO_DEVICE_DATA parentExtension;
         
         // Set the Port Index in the Registry
         
         RtlInitUnicodeString(&keyName, L"PortIndex");

         portIndex = DeviceData->PortIndex;

         //
         // Doesn't matter whether this works or not.
         //

         ZwSetValueKey(keyHandle, &keyName, 0, REG_DWORD, &portIndex,
                       sizeof(ULONG));

         parentExtension = (DeviceData->ParentFdo)->DeviceExtension;

         RtlInitUnicodeString(&keyName, L"PortResources");

         status = ZwSetValueKey(keyHandle, &keyName, 0, REG_RESOURCE_LIST, 
                       parentExtension->PChildResourceList,
                       parentExtension->PChildResourceListSize);

         RtlInitUnicodeString(&keyName, L"PortResourcesTr");

         status = ZwSetValueKey(keyHandle, &keyName, 0, REG_RESOURCE_LIST, 
                       parentExtension->PChildResourceListTr,
                       parentExtension->PChildResourceListSizeTr);

         RtlInitUnicodeString(&keyName, L"FirmwareVersion");

         status = ZwSetValueKey(keyHandle, &keyName, 0, REG_DWORD, 
                       &parentExtension->FirmwareVersion,
                       sizeof(ULONG));
         
         ZwFlushKey(keyHandle);
         ZwClose(keyHandle);
      }

      SET_NEW_PNP_STATE(DeviceData, Started);
      status = STATUS_SUCCESS;
      break;

   case IRP_MN_QUERY_STOP_DEVICE:

      //
      // No reason here why we can't stop the device.
      // If there were a reason we should speak now for answering success
      // here may result in a stop device irp.
      //

      SET_NEW_PNP_STATE(DeviceData, StopPending);
      status = STATUS_SUCCESS;
      break;

   case IRP_MN_CANCEL_STOP_DEVICE:
      //
      // The stop was canceled.  Whatever state we set, or resources we put
      // on hold in anticipation of the forcoming STOP device IRP should be
      // put back to normal.  Someone, in the long list of concerned parties,
      // has failed the stop device query.
      //

      //
      // First check to see whether you have received cancel-stop
      // without first receiving a query-stop. This could happen if someone
      // above us fails a query-stop and passes down the subsequent
      // cancel-stop.
      //
        
      if(StopPending == DeviceData->DevicePnPState)
      {
          //
          // We did receive a query-stop, so restore.
          //             
          RESTORE_PREVIOUS_PNP_STATE(DeviceData);
      }
      status = STATUS_SUCCESS;
      break;

   case IRP_MN_STOP_DEVICE:

      //
      // Here we shut down the device.  The opposite of start.
      //

      SET_NEW_PNP_STATE(DeviceData, Stopped);
      status = STATUS_SUCCESS;
      break;

   case IRP_MN_QUERY_REMOVE_DEVICE:
      //
      // Just like Query Stop only now the impending doom is the remove irp
      //
      SET_NEW_PNP_STATE(DeviceData, RemovePending);
      status = STATUS_SUCCESS;
      break;

   case IRP_MN_CANCEL_REMOVE_DEVICE:
      //
      // Clean up a remove that did not go through, just like cancel STOP.
      //
      //

      // First check to see whether you have received cancel-remove
      // without first receiving a query-remove. This could happen if 
      // someone above us fails a query-remove and passes down the 
      // subsequent cancel-remove.
      //
       
      if(RemovePending == DeviceData->DevicePnPState)
      {
          //
          // We did receive a query-remove, so restore.
          //             
          RESTORE_PREVIOUS_PNP_STATE(DeviceData);
      }
      status = STATUS_SUCCESS;
      break;

   case IRP_MN_SURPRISE_REMOVAL:

        //
        // We should stop all access to the device and relinquish all the
        // resources. Let's just mark that it happened and we will do 
        // the cleanup later in IRP_MN_REMOVE_DEVICE.
        //

        SET_NEW_PNP_STATE(DeviceData, SurpriseRemovePending);
        DeviceData->Attached = FALSE;
        status = STATUS_SUCCESS;
        break;

   case IRP_MN_REMOVE_DEVICE:

      //
      // Attached is only set to FALSE by the enumeration process.
      //
      if (!DeviceData->Attached) {

          SET_NEW_PNP_STATE(DeviceData, Deleted);
          status = Cycladz_PnPRemove(DeviceObject, DeviceData);
      }
      else {    // else added in build 2128 - Fanny
          //
          // Succeed the remove
          ///
          SET_NEW_PNP_STATE(DeviceData, NotStarted);
          status = STATUS_SUCCESS;
      }

// Changed in build 2072
//      status = STATUS_SUCCESS;

      break;

   case IRP_MN_QUERY_RESOURCES: {
#if 0
      PCM_RESOURCE_LIST pChildRes, pQueryRes;
      PFDO_DEVICE_DATA parentExtension;
      ULONG listSize;

      parentExtension = (DeviceData->ParentFdo)->DeviceExtension;
      pChildRes = parentExtension->PChildResourceList;
      listSize = parentExtension->PChildResourceListSize;

      if (pChildRes) {
         pQueryRes = ExAllocatePool(PagedPool, listSize);
         if (pQueryRes == NULL) {
            Irp->IoStatus.Information = (ULONG_PTR) NULL;
            status = STATUS_INSUFFICIENT_RESOURCES;
         } else {
            RtlCopyMemory(pQueryRes,pChildRes,listSize);
            Irp->IoStatus.Information = (ULONG_PTR)pQueryRes;
            status = STATUS_SUCCESS;
         }
      }
#endif
      break;

   }

   case IRP_MN_QUERY_RESOURCE_REQUIREMENTS: {
#if 0      
      PIO_RESOURCE_REQUIREMENTS_LIST pChildReq, pQueryReq;
      PFDO_DEVICE_DATA parentExtension;

      parentExtension = (DeviceData->ParentFdo)->DeviceExtension;
      pChildReq = parentExtension->PChildRequiredList;
      if (pChildReq) {
         pQueryReq = ExAllocatePool(PagedPool, pChildReq->ListSize);
         if (pQueryReq == NULL) {
            Irp->IoStatus.Information = (ULONG_PTR) NULL;
            status = STATUS_INSUFFICIENT_RESOURCES;
         } else {
            RtlCopyMemory(pQueryReq,pChildReq,pChildReq->ListSize);
            Irp->IoStatus.Information = (ULONG_PTR)pQueryReq;
            status = STATUS_SUCCESS;
         }
      }
#endif
      break;
   }

   case IRP_MN_READ_CONFIG:
   case IRP_MN_WRITE_CONFIG: // we have no config space
   case IRP_MN_EJECT:
   case IRP_MN_SET_LOCK:
   case IRP_MN_QUERY_INTERFACE: // We do not have any non IRP based interfaces.
   default:
      Cycladz_KdPrint(DeviceData, SER_DBG_PNP_TRACE, 
                 ("PDO(%x):%s not handled\n", DeviceObject,
                        PnPMinorFunctionString(IrpStack->MinorFunction)));

      // For PnP requests to the PDO that we do not understand we should
      // return the IRP WITHOUT setting the status or information fields.
      // They may have already been set by a filter (eg acpi).
      break;
   }

   Irp->IoStatus.Status = status;
   IoCompleteRequest (Irp, IO_NO_INCREMENT);

   return status;
}

NTSTATUS
Cycladz_PnPRemove (PDEVICE_OBJECT Device, PPDO_DEVICE_DATA PdoData)
/*++
Routine Description:
    The PlugPlay subsystem has instructed that this PDO should be removed.

    We should therefore
    - Complete any requests queued in the driver
    - If the device is still attached to the system,
      then complete the request and return.
    - Otherwise, cleanup device specific allocations, memory, events...
    - Call IoDeleteDevice
    - Return from the dispatch routine.

    Note that if the device is still connected to the bus (IE in this case
    the control panel has not yet told us that the serial device has
    disappeared) then the PDO must remain around, and must be returned during
    any query Device relaions IRPS.

--*/

{
   Cycladz_KdPrint(PdoData, SER_DBG_PNP_TRACE,
                        ("Cycladz_PnPRemove: 0x%x\n", Device));
    //
    // Complete any outstanding requests with STATUS_DELETE_PENDING.
    //
    // Serenum does not queue any irps at this time so we have nothing to do.
    //

    //REMOVED BY FANNY. THIS CHECK IS ALREADY DONE AT IRP_MN_REMOVE_DEVICE PDO.
    //if (PdoData->Attached) {
    //    return STATUS_SUCCESS;
    //}
    //PdoData->Removed = TRUE;
    
    //
    // Free any resources.
    //

    CycladzFreeUnicodeString(&PdoData->HardwareIDs);
    //CycladzFreeUnicodeString(&PdoData->CompIDs); We never allocate CompIDs.
    RtlFreeUnicodeString(&PdoData->DeviceIDs);
    RtlFreeUnicodeString(&PdoData->InstanceIDs);
    RtlFreeUnicodeString(&PdoData->DevDesc);

    Cycladz_KdPrint(PdoData, SER_DBG_PNP_INFO,
                        ("IoDeleteDevice: 0x%x\n", Device));

    IoDeleteDevice(Device);


    return STATUS_SUCCESS;
}


NTSTATUS
Cycladz_GetResourceInfo(IN PDEVICE_OBJECT PDevObj,
                    IN PCM_RESOURCE_LIST PResList,
                    IN PCM_RESOURCE_LIST PTrResList)
/*++

Routine Description:

    This routine gets the resources that PnP allocated to this device.


Arguments:

   PDevObj    -  Pointer to the devobj that is starting

   PResList   -  Pointer to the untranslated resources needed by this device

   PTrResList -  Pointer to the translated resources needed by this device


  Return Value:

    STATUS_SUCCESS on success, something else appropriate on failure


--*/

{
   PFDO_DEVICE_DATA pDevExt = PDevObj->DeviceExtension;
   NTSTATUS status = STATUS_SUCCESS;

   ULONG count;
   ULONG i;
   PCM_PARTIAL_RESOURCE_LIST pPartialResourceList, pPartialTrResourceList;
   PCM_PARTIAL_RESOURCE_DESCRIPTOR pPartialResourceDesc, pPartialTrResourceDesc;
   PCM_FULL_RESOURCE_DESCRIPTOR pFullResourceDesc = NULL,
                                pFullTrResourceDesc = NULL;
   KAFFINITY Affinity;
   KINTERRUPT_MODE InterruptMode;
   ULONG zero = 0;
   
   PAGED_CODE();

   // Let's get our resources
   pFullResourceDesc   = &PResList->List[0];
   pFullTrResourceDesc = &PTrResList->List[0];

   if (pFullResourceDesc) {
      pPartialResourceList    = &pFullResourceDesc->PartialResourceList;
      pPartialResourceDesc    = pPartialResourceList->PartialDescriptors;
      count                   = pPartialResourceList->Count;

      pDevExt->InterfaceType  = pFullResourceDesc->InterfaceType;
      pDevExt->BusNumber      = pFullResourceDesc->BusNumber;

      for (i = 0;     i < count;     i++, pPartialResourceDesc++) {

         switch (pPartialResourceDesc->Type) {
         case CmResourceTypeMemory: {

            Cycladz_KdPrint(pDevExt,SER_DBG_CYCLADES,("CmResourceTypeMemory\n"));
            Cycladz_KdPrint(pDevExt,SER_DBG_CYCLADES,("u.Memory.Start = %x\n",
                                           pPartialResourceDesc->u.Memory.Start));
            Cycladz_KdPrint(pDevExt,SER_DBG_CYCLADES,("u.Memory.Length = %x\n",
                                           pPartialResourceDesc->u.Memory.Length));
            Cycladz_KdPrint(pDevExt,SER_DBG_CYCLADES,("u.Flags = %x\n",
                                           pPartialResourceDesc->Flags));
            
            if (pPartialResourceDesc->u.Memory.Length == CYZ_RUNTIME_LENGTH) {
               pDevExt->PhysicalRuntime = pPartialResourceDesc->u.Memory.Start;
               pDevExt->RuntimeLength = pPartialResourceDesc->u.Memory.Length;
            } else {
               pDevExt->PhysicalBoardMemory = pPartialResourceDesc->u.Memory.Start;
               pDevExt->BoardMemoryLength = pPartialResourceDesc->u.Memory.Length;
            }
            break;
         }
         case CmResourceTypePort: {

            Cycladz_KdPrint(pDevExt,SER_DBG_CYCLADES,("CmResourceTypePort\n"));
            Cycladz_KdPrint(pDevExt,SER_DBG_CYCLADES,("u.Port.Start = %x\n",
                                           pPartialResourceDesc->u.Port.Start));
            Cycladz_KdPrint(pDevExt,SER_DBG_CYCLADES,("u.Port.Length = %x\n",
                                           pPartialResourceDesc->u.Port.Length));
            Cycladz_KdPrint(pDevExt,SER_DBG_CYCLADES,("u.Flags = %x\n",
                                           pPartialResourceDesc->Flags));

            break;
         }

         case CmResourceTypeInterrupt: {

            Cycladz_KdPrint(pDevExt,SER_DBG_CYCLADES,("CmResourceTypeInterrupt\n"));
            Cycladz_KdPrint(pDevExt,SER_DBG_CYCLADES,("u.Interrupt.Level = %x\n",
                                           pPartialResourceDesc->u.Interrupt.Level));
            Cycladz_KdPrint(pDevExt,SER_DBG_CYCLADES,("u.Interrupt.Vector = %x\n",
                                           pPartialResourceDesc->u.Interrupt.Vector));
            Cycladz_KdPrint(pDevExt,SER_DBG_CYCLADES,("u.Interrupt.Affinity = %x\n",
                                           pPartialResourceDesc->u.Interrupt.Affinity));
            Cycladz_KdPrint(pDevExt,SER_DBG_CYCLADES,("Flags = %x\n",
                                           pPartialResourceDesc->Flags));
#ifndef POLL
            pDevExt->OriginalIrql = pPartialResourceDesc->u.Interrupt.Level;
            pDevExt->OriginalVector =pPartialResourceDesc->u.Interrupt.Vector;
            Affinity = pPartialResourceDesc->u.Interrupt.Affinity;

            if (pPartialResourceDesc->Flags & CM_RESOURCE_INTERRUPT_LATCHED) {
               InterruptMode = Latched;
            } else {
               InterruptMode = LevelSensitive;
            }
#endif
            break;
         }

         case CmResourceTypeDeviceSpecific: {
            PCM_SERIAL_DEVICE_DATA sDeviceData;

            Cycladz_KdPrint(pDevExt,SER_DBG_CYCLADES,("CmResourceTypeDeviceSpecific\n"));

            break;
         }


         default: {
            Cycladz_KdPrint(pDevExt,SER_DBG_CYCLADES,("CmResourceType = %x\n",
                                                      pPartialResourceDesc->Type));
            break;
         }
         }   // switch (pPartialResourceDesc->Type)
      }       // for (i = 0;     i < count;     i++, pPartialResourceDesc++)
   }           // if (pFullResourceDesc)



//SEE_LATER_IF_IT_SHOULD_BE_ADDED
//   //
//   // Do the same for the translated resources
//   //
//
//   gotInt = 0;
//   gotISR = 0;
//   gotIO = 0;
//   curIoIndex = 0;
//
   if (pFullTrResourceDesc) {
      pPartialTrResourceList = &pFullTrResourceDesc->PartialResourceList;
      pPartialTrResourceDesc = pPartialTrResourceList->PartialDescriptors;
      count = pPartialTrResourceList->Count;

      //
      // Reload PConfig with the translated values for later use
      //

      pDevExt->InterfaceType  = pFullTrResourceDesc->InterfaceType;
      pDevExt->BusNumber      = pFullTrResourceDesc->BusNumber;

//FANNY
//      pDevExt->TrInterruptStatus = SerialPhysicalZero;

      for (i = 0;     i < count;     i++, pPartialTrResourceDesc++) {

         switch (pPartialTrResourceDesc->Type) {
         case CmResourceTypeMemory: {

            Cycladz_KdPrint(pDevExt,SER_DBG_CYCLADES,("CmResourceTypeMemory translated\n"));
            Cycladz_KdPrint(pDevExt,SER_DBG_CYCLADES,("u.Memory.Start = %x\n",
                                           pPartialTrResourceDesc->u.Memory.Start));
            Cycladz_KdPrint(pDevExt,SER_DBG_CYCLADES,("u.Memory.Length = %x\n",
                                           pPartialTrResourceDesc->u.Memory.Length));
            Cycladz_KdPrint(pDevExt,SER_DBG_CYCLADES,("u.Flags = %x\n",
                                           pPartialTrResourceDesc->Flags));

            if (pPartialTrResourceDesc->u.Memory.Length == CYZ_RUNTIME_LENGTH) {
               pDevExt->TranslatedRuntime = pPartialTrResourceDesc->u.Memory.Start;
               pDevExt->RuntimeLength = pPartialTrResourceDesc->u.Memory.Length;
            } else {
               pDevExt->TranslatedBoardMemory = pPartialTrResourceDesc->u.Memory.Start;
               pDevExt->BoardMemoryLength = pPartialTrResourceDesc->u.Memory.Length;
            }
            break;
         }
         case CmResourceTypePort: {

            Cycladz_KdPrint(pDevExt,SER_DBG_CYCLADES,("CmResourceTypePort translated\n"));
            Cycladz_KdPrint(pDevExt,SER_DBG_CYCLADES,("u.Port.Start = %x\n",
                                           pPartialTrResourceDesc->u.Port.Start));
            Cycladz_KdPrint(pDevExt,SER_DBG_CYCLADES,("u.Port.Length = %x\n",
                                           pPartialTrResourceDesc->u.Port.Length));
            Cycladz_KdPrint(pDevExt,SER_DBG_CYCLADES,("u.Flags = %x\n",
                                           pPartialTrResourceDesc->Flags));

            break;
         }

         case CmResourceTypeInterrupt: {

            Cycladz_KdPrint(pDevExt,SER_DBG_CYCLADES,("CmResourceTypeInterrupt translated\n"));
            Cycladz_KdPrint(pDevExt,SER_DBG_CYCLADES,("u.Interrupt.Level = %x\n",
                                           pPartialTrResourceDesc->u.Interrupt.Level));
            Cycladz_KdPrint(pDevExt,SER_DBG_CYCLADES,("u.Interrupt.Vector = %x\n",
                                           pPartialTrResourceDesc->u.Interrupt.Vector));
            Cycladz_KdPrint(pDevExt,SER_DBG_CYCLADES,("u.Interrupt.Affinity = %x\n",
                                           pPartialTrResourceDesc->u.Interrupt.Affinity));
            Cycladz_KdPrint(pDevExt,SER_DBG_CYCLADES,("Flags = %x\n",
                                           pPartialTrResourceDesc->Flags));
#ifndef POLL
            pDevExt->Vector = pPartialTrResourceDesc->u.Interrupt.Vector;
            pDevExt->Irql = (KIRQL) pPartialTrResourceDesc->u.Interrupt.Level;
            Affinity = pPartialTrResourceDesc->u.Interrupt.Affinity;
#endif
            break;
         }

         default: {
               break;
         }
         }   // switch (pPartialTrResourceDesc->Type)
      }       // for (i = 0;     i < count;     i++, pPartialTrResourceDesc++)
   }           // if (pFullTrResourceDesc)


   //
   // Do some error checking on the configuration info we have.
   //
   // Make sure that the interrupt is non zero (which we defaulted
   // it to).
   //
   // Make sure that the portaddress is non zero (which we defaulted
   // it to).
   //
   // Make sure that the DosDevices is not NULL (which we defaulted
   // it to).
   //
   // We need to make sure that if an interrupt status
   // was specified, that a port index was also specfied,
   // and if so that the port index is <= maximum ports
   // on a board.
   //
   // We should also validate that the bus type and number
   // are correct.
   //
   // We will also validate that the interrupt mode makes
   // sense for the bus.
   //

   if (!pDevExt->TranslatedRuntime.LowPart && pDevExt->IsPci) {

      CyzLogError(
                    pDevExt->DriverObject,
                    NULL,
                    pDevExt->PhysicalBoardMemory,
                    CyzPhysicalZero,
                    0,
                    0,
                    0,
                    0,
                    STATUS_SUCCESS,
                    CYZ_INVALID_RUNTIME_REGISTERS,
                    0,
                    NULL,
                    0,
                    NULL
                    );
      Cycladz_KdPrint (pDevExt,SER_DBG_CYCLADES,
                  ("Bogus Runtime address %x\n",
                   pDevExt->TranslatedRuntime.LowPart));

      status = STATUS_INSUFFICIENT_RESOURCES;
      goto GetResourceInfo_Cleanup;
   }


   if (!pDevExt->TranslatedBoardMemory.LowPart) {

      CyzLogError(
                    pDevExt->DriverObject,
                    NULL,
                    pDevExt->PhysicalBoardMemory,
                    CyzPhysicalZero,
                    0,
                    0,
                    0,
                    0,
                    STATUS_SUCCESS,
                    CYZ_INVALID_BOARD_MEMORY,
                    0,
                    NULL,
                    0,
                    NULL
                    );
      Cycladz_KdPrint (pDevExt,SER_DBG_CYCLADES,
                  ("Bogus BoardMemory address %x\n",
                   pDevExt->TranslatedBoardMemory.LowPart));

      status = STATUS_INSUFFICIENT_RESOURCES;
      goto GetResourceInfo_Cleanup;
   }
#ifndef POLL

   if (!pDevExt->OriginalVector) {

      CyzLogError(
                    pDevExt->DriverObject,
                    NULL,
                    pDevExt->PhysicalBoardMemory,
                    CyzPhysicalZero,
                    0,
                    0,
                    0,
                    0,
                    STATUS_SUCCESS,
                    CYZ_INVALID_INTERRUPT,
                    0,
                    NULL,
                    0,
                    NULL
                    );
      Cycladz_KdPrint (pDevExt,SER_DBG_CYCLADES,("Bogus vector %x\n",
                             pDevExt->OriginalVector));

      status = STATUS_INSUFFICIENT_RESOURCES;
      goto GetResourceInfo_Cleanup;
   }
#endif

   //
   // We don't want to cause the hal to have a bad day,
   // so let's check the interface type and bus number.
   //
   // We only need to check the registry if they aren't
   // equal to the defaults.
   //

   if (pDevExt->BusNumber != 0) {

      BOOLEAN foundIt = 0;

      if (pDevExt->InterfaceType >= MaximumInterfaceType) {

         CyzLogError(
                       pDevExt->DriverObject,
                       NULL,
                       pDevExt->PhysicalBoardMemory,
                       CyzPhysicalZero,
                       0,
                       0,
                       0,
                       pDevExt->InterfaceType,
                       STATUS_SUCCESS,
                       CYZ_UNKNOWN_BUS,
                       0,
                       NULL,
                       0,
                       NULL
                       );
         Cycladz_KdPrint (pDevExt,SER_DBG_CYCLADES,
                  ("Invalid Bus type %x\n", pDevExt->BusNumber));

         //status = SERIAL_UNKNOWN_BUS;
         status = STATUS_INSUFFICIENT_RESOURCES;
         goto GetResourceInfo_Cleanup;
      }    

      IoQueryDeviceDescription(
                              (INTERFACE_TYPE *)&pDevExt->InterfaceType,
                              &zero,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              Cycladz_ItemCallBack,
                              &foundIt
                              );

      if (!foundIt) {

         CyzLogError(
                       pDevExt->DriverObject,
                       NULL,
                       pDevExt->PhysicalBoardMemory,
                       CyzPhysicalZero,
                       0,
                       0,
                       0,
                       pDevExt->InterfaceType,
                       STATUS_SUCCESS,
                       CYZ_BUS_NOT_PRESENT,
                       0,
                       NULL,
                       0,
                       NULL
                       );
         Cycladz_KdPrint(
                   pDevExt,
                   SER_DBG_CYCLADES,
                   ("There aren't that many of those\n"
                    "------- busses on this system,%x\n",
                    pDevExt->BusNumber)
                   );

         //status = SERIAL_BUS_NOT_PRESENT;
         status = STATUS_INSUFFICIENT_RESOURCES;
         goto GetResourceInfo_Cleanup;
      }
   }


   //
   // Dump out the board configuration.
   //

   Cycladz_KdPrint(pDevExt,SER_DBG_CYCLADES, ("PhysicalRuntime: %x\n",
                          pDevExt->PhysicalRuntime.LowPart));

   Cycladz_KdPrint(pDevExt,SER_DBG_CYCLADES, ("TranslatedRuntime: %x\n",
                          pDevExt->TranslatedRuntime.LowPart));

   Cycladz_KdPrint(pDevExt,SER_DBG_CYCLADES, ("RuntimeLength: %x\n",
                          pDevExt->RuntimeLength));

   Cycladz_KdPrint(pDevExt,SER_DBG_CYCLADES, ("PhysicalBoardMemory: %x\n",
                          pDevExt->PhysicalBoardMemory.LowPart));

   Cycladz_KdPrint(pDevExt,SER_DBG_CYCLADES, ("TranslatedBoardMemory: %x\n",
                          pDevExt->TranslatedBoardMemory.LowPart));

   Cycladz_KdPrint(pDevExt,SER_DBG_CYCLADES, ("BoardMemoryLength: %x\n",
                          pDevExt->BoardMemoryLength));
#ifndef POLL
   Cycladz_KdPrint(pDevExt,SER_DBG_CYCLADES,("OriginalIrql = %x\n",
                          pDevExt->OriginalIrql));

   Cycladz_KdPrint(pDevExt,SER_DBG_CYCLADES,("OriginalVector = %x\n",
                          pDevExt->OriginalVector));

   Cycladz_KdPrint(pDevExt,SER_DBG_CYCLADES,("Irql = %x\n",
                          pDevExt->Irql));

   Cycladz_KdPrint(pDevExt,SER_DBG_CYCLADES,("Vector = %x\n",
                          pDevExt->Vector));

   Cycladz_KdPrint(pDevExt,SER_DBG_CYCLADES,("Affinity = %x\n",
                          Affinity));
#endif
   Cycladz_KdPrint(pDevExt,SER_DBG_CYCLADES,("InterfaceType = %x\n",
                          pDevExt->InterfaceType));

   Cycladz_KdPrint(pDevExt,SER_DBG_CYCLADES,("BusNumber = %x\n",
                          pDevExt->BusNumber));

   // ABOVE: COPIED FROM SerialGetPortInfo
   // ------------------------------------

   // BELOW: COPIED FROM SerialInitController
   if (pDevExt->IsPci) {
      pDevExt->Runtime = MmMapIoSpace(pDevExt->TranslatedRuntime,
                                      pDevExt->RuntimeLength,
                                      FALSE);

      if (!pDevExt->Runtime){

         CyzLogError(
                       pDevExt->DriverObject,
                       NULL,
                       pDevExt->PhysicalBoardMemory,
                       CyzPhysicalZero,
                       0,
                       0,
                       0,
                       0,
                       STATUS_SUCCESS,
                       CYZ_RUNTIME_NOT_MAPPED,
                       0,
                       NULL,
                       0,
                       NULL
                       );
         Cycladz_KdPrint(pDevExt,SER_DBG_CYCLADES,("Could not map memory for Runtime\n"));
         status = STATUS_NONE_MAPPED;
         goto GetResourceInfo_Cleanup;
      }
   }
   pDevExt->BoardMemory = MmMapIoSpace(pDevExt->TranslatedBoardMemory,
                                       pDevExt->BoardMemoryLength,
                                       FALSE);

   if (!pDevExt->BoardMemory){

      CyzLogError(
                    pDevExt->DriverObject,
                    NULL,
                    pDevExt->PhysicalBoardMemory,
                    CyzPhysicalZero,
                    0,
                    0,
                    0,
                    0,
                    STATUS_SUCCESS,
                    CYZ_BOARD_NOT_MAPPED,
                    0,
                    NULL,
                    0,
                    NULL
                    );
      Cycladz_KdPrint(pDevExt,SER_DBG_CYCLADES,("Could not map memory for DP memory"));
      status = STATUS_NONE_MAPPED;
      goto GetResourceInfo_Cleanup;
   }


GetResourceInfo_Cleanup:
   if (!NT_SUCCESS(status)) {
      
      if (pDevExt->Runtime) {
         MmUnmapIoSpace(pDevExt->Runtime, pDevExt->RuntimeLength);
	      pDevExt->Runtime = NULL;
      }

      if (pDevExt->BoardMemory) {
         MmUnmapIoSpace(pDevExt->BoardMemory, pDevExt->BoardMemoryLength);
 		   pDevExt->BoardMemory = NULL;
      }
   }

   Cycladz_KdPrint (pDevExt,SER_DBG_CYCLADES, ("leaving Cycladz_GetResourceInfo\n"));
   return status;
}

VOID
Cycladz_ReleaseResources(IN PFDO_DEVICE_DATA PDevExt)
{   
   Cycladz_KdPrint (PDevExt,SER_DBG_CYCLADES, ("entering Cycladz_ReleaseResources\n"));

   if (PDevExt->PChildRequiredList) {
      ExFreePool(PDevExt->PChildRequiredList);
      PDevExt->PChildRequiredList = NULL;
   }

   if (PDevExt->PChildResourceList) {
      ExFreePool(PDevExt->PChildResourceList);
      PDevExt->PChildResourceList = NULL;
   }

   if (PDevExt->PChildResourceListTr) {
      ExFreePool(PDevExt->PChildResourceListTr);
      PDevExt->PChildResourceListTr = NULL;
   }

   if (PDevExt->Runtime) {
      MmUnmapIoSpace(PDevExt->Runtime, PDevExt->RuntimeLength);
      PDevExt->Runtime = NULL;
   }

   if (PDevExt->BoardMemory) {
      MmUnmapIoSpace(PDevExt->BoardMemory, PDevExt->BoardMemoryLength);
      PDevExt->BoardMemory = NULL;
   }
   Cycladz_KdPrint (PDevExt,SER_DBG_CYCLADES, ("leaving Cycladz_ReleaseResources\n"));   
}


NTSTATUS
Cycladz_ItemCallBack(
                  IN PVOID Context,
                  IN PUNICODE_STRING PathName,
                  IN INTERFACE_TYPE BusType,
                  IN ULONG BusNumber,
                  IN PKEY_VALUE_FULL_INFORMATION *BusInformation,
                  IN CONFIGURATION_TYPE ControllerType,
                  IN ULONG ControllerNumber,
                  IN PKEY_VALUE_FULL_INFORMATION *ControllerInformation,
                  IN CONFIGURATION_TYPE PeripheralType,
                  IN ULONG PeripheralNumber,
                  IN PKEY_VALUE_FULL_INFORMATION *PeripheralInformation
                  )

/*++

Routine Description:

    This routine is called to check if a particular item
    is present in the registry.

Arguments:

    Context - Pointer to a boolean.

    PathName - unicode registry path.  Not Used.

    BusType - Internal, Isa, ...

    BusNumber - Which bus if we are on a multibus system.

    BusInformation - Configuration information about the bus. Not Used.

    ControllerType - Controller type.

    ControllerNumber - Which controller if there is more than one
                       controller in the system.

    ControllerInformation - Array of pointers to the three pieces of
                            registry information.

    PeripheralType - Should be a peripheral.

    PeripheralNumber - Which peripheral - not used..

    PeripheralInformation - Configuration information. Not Used.

Return Value:

    STATUS_SUCCESS

--*/

{
   UNREFERENCED_PARAMETER (PathName);
   UNREFERENCED_PARAMETER (BusType);
   UNREFERENCED_PARAMETER (BusNumber);
   UNREFERENCED_PARAMETER (BusInformation);
   UNREFERENCED_PARAMETER (ControllerType);
   UNREFERENCED_PARAMETER (ControllerNumber);
   UNREFERENCED_PARAMETER (ControllerInformation);
   UNREFERENCED_PARAMETER (PeripheralType);
   UNREFERENCED_PARAMETER (PeripheralNumber);
   UNREFERENCED_PARAMETER (PeripheralInformation);

   PAGED_CODE();


   *((BOOLEAN *)Context) = TRUE;
   return STATUS_SUCCESS;
}


NTSTATUS
Cycladz_BuildRequirementsList(
                          OUT PIO_RESOURCE_REQUIREMENTS_LIST *PChildRequiredList_Pointer,
                          IN PCM_RESOURCE_LIST PResourceList, IN ULONG NumberOfResources
                          )
{

   NTSTATUS status = STATUS_SUCCESS;
   ULONG count;
   ULONG i,j;   
   PCM_FULL_RESOURCE_DESCRIPTOR    pFullResourceDesc = NULL;
   PCM_PARTIAL_RESOURCE_LIST       pPartialResourceList;
   PCM_PARTIAL_RESOURCE_DESCRIPTOR pPartialResourceDesc;

   ULONG requiredLength;
   PIO_RESOURCE_REQUIREMENTS_LIST requiredList;
   PIO_RESOURCE_LIST       requiredResList;
   PIO_RESOURCE_DESCRIPTOR requiredResDesc;

   *PChildRequiredList_Pointer = NULL;

   // Validate input parameter

   if (PResourceList == NULL) {
      status = STATUS_INSUFFICIENT_RESOURCES;
      goto CycladzBuildRequirementList_Error;
   }

   ASSERT(PResourceList->Count == 1);

   // Initialize requiredList

   requiredLength = sizeof(IO_RESOURCE_REQUIREMENTS_LIST) 
                + sizeof(IO_RESOURCE_DESCRIPTOR) * (NumberOfResources - 1);
 
   requiredList = ExAllocatePool(PagedPool, requiredLength);
   
   if (requiredList == NULL) {
      status = STATUS_INSUFFICIENT_RESOURCES;
      goto CycladzBuildRequirementList_Error;
   }

   RtlZeroMemory(requiredList, requiredLength);

   // Get information from PResourceList and build requiredList

   pFullResourceDesc = &PResourceList->List[0];

   if (pFullResourceDesc) {
      pPartialResourceList = &pFullResourceDesc->PartialResourceList;
      pPartialResourceDesc = pPartialResourceList->PartialDescriptors;
      count                = pPartialResourceList->Count;

      if (count < NumberOfResources) {
         ExFreePool(requiredList);
         return STATUS_INSUFFICIENT_RESOURCES;
      }

      requiredList->ListSize = requiredLength;
      requiredList->InterfaceType = pFullResourceDesc->InterfaceType;
      requiredList->BusNumber     = pFullResourceDesc->BusNumber;
      requiredList->SlotNumber    = 0; //?????? There's no SlotNumber in the Resource List
      requiredList->AlternativeLists = 1;

      requiredResList = &requiredList->List[0];
      requiredResList->Count = NumberOfResources;

      requiredResDesc = &requiredResList->Descriptors[0];

      for (i=0,j=0; i<count && j<NumberOfResources;  i++,pPartialResourceDesc++) {
         
         switch (pPartialResourceDesc->Type) {
         case CmResourceTypeMemory: {
            requiredResDesc->Type = pPartialResourceDesc->Type;
            //requiredResDesc->ShareDisposition = pPartialResourceDesc->ShareDisposition;
            requiredResDesc->ShareDisposition = CmResourceShareShared;
            requiredResDesc->Flags = pPartialResourceDesc->Flags;
            requiredResDesc->u.Memory.Length = pPartialResourceDesc->u.Memory.Length;
            requiredResDesc->u.Memory.Alignment = 4;
            requiredResDesc->u.Memory.MinimumAddress = pPartialResourceDesc->u.Memory.Start;
            requiredResDesc->u.Memory.MaximumAddress.QuadPart 
                        = pPartialResourceDesc->u.Memory.Start.QuadPart 
                        + pPartialResourceDesc->u.Memory.Length - 1;
            requiredResDesc++;
            j++;
            break;
         }
         case CmResourceTypePort: {
            break;
         }
         case CmResourceTypeInterrupt: {
            requiredResDesc->Type = pPartialResourceDesc->Type;
            requiredResDesc->ShareDisposition = CmResourceShareShared;
            requiredResDesc->Flags = pPartialResourceDesc->Flags;
            requiredResDesc->u.Interrupt.MinimumVector 
                                             = pPartialResourceDesc->u.Interrupt.Vector;
            requiredResDesc->u.Interrupt.MaximumVector 
                                             = pPartialResourceDesc->u.Interrupt.Vector;
            requiredResDesc++;
            j++;
            break;
         }
         default: 
            break;
         } // end switch
         
      } // end for

   } // end if (pFullResourceDesc)

   *PChildRequiredList_Pointer = requiredList;


CycladzBuildRequirementList_Error:
   return status;

}

NTSTATUS
Cycladz_BuildResourceList(
                      OUT PCM_RESOURCE_LIST *POutList_Pointer,
                      OUT ULONG *ListSize_Pointer,
                      IN PCM_RESOURCE_LIST PInList,
                      IN ULONG NumberOfResources
                      )
{

   NTSTATUS status = STATUS_SUCCESS;
   ULONG i,j;
   PCM_PARTIAL_RESOURCE_DESCRIPTOR pPartialInDesc;

   ULONG length;
   PCM_RESOURCE_LIST pOutList;
   PCM_PARTIAL_RESOURCE_DESCRIPTOR  pPartialOutDesc;

   *POutList_Pointer = NULL;
   *ListSize_Pointer =0;

   // Validate input parameter

   if (PInList == NULL) {
      status = STATUS_INSUFFICIENT_RESOURCES;
      goto CycladzBuildResourceList_Error;
   }

   ASSERT(PInList->Count == 1);


   if (PInList->List[0].PartialResourceList.Count < NumberOfResources) {
      status = STATUS_INSUFFICIENT_RESOURCES;
      goto CycladzBuildResourceList_Error;
   }
   
   // Initialize pOutList

   length = sizeof(CM_RESOURCE_LIST) 
            + sizeof(CM_PARTIAL_RESOURCE_DESCRIPTOR) * (NumberOfResources - 1);
 
   pOutList = ExAllocatePool(PagedPool, length);
   
   if (pOutList == NULL) {
      status = STATUS_INSUFFICIENT_RESOURCES;
      goto CycladzBuildResourceList_Error;
   }

   RtlZeroMemory(pOutList, length);
   
   // Get information from PInList and build pOutList

   pOutList->Count = 1; // not sure if we have to report Translated information too.
   pOutList->List[0].InterfaceType = PInList->List[0].InterfaceType;
   pOutList->List[0].BusNumber     = PInList->List[0].BusNumber;
   pOutList->List[0].PartialResourceList.Count = NumberOfResources;

   pPartialOutDesc = &pOutList->List[0].PartialResourceList.PartialDescriptors[0];
   pPartialInDesc  = &PInList->List[0].PartialResourceList.PartialDescriptors[0];

   for (i=0,j=0; i < PInList->List[0].PartialResourceList.Count; i++,pPartialInDesc++) {
      if (j==NumberOfResources) {
         break;
      }
      switch(pPartialInDesc->Type) {
      case CmResourceTypeMemory:
         pPartialOutDesc->ShareDisposition = CmResourceShareShared;
         pPartialOutDesc->Type             = pPartialInDesc->Type;
         pPartialOutDesc->Flags            = pPartialInDesc->Flags;
         pPartialOutDesc->u.Memory.Start   = pPartialInDesc->u.Memory.Start;
         pPartialOutDesc->u.Memory.Length  = pPartialInDesc->u.Memory.Length;
         pPartialOutDesc++;
         j++;
         break;
      case CmResourceTypeInterrupt:
         pPartialOutDesc->ShareDisposition = CmResourceShareShared;
         pPartialOutDesc->Type             = pPartialInDesc->Type;
         pPartialOutDesc->Flags            = pPartialInDesc->Flags;
         pPartialOutDesc->u.Interrupt.Level    = pPartialInDesc->u.Interrupt.Level;
         pPartialOutDesc->u.Interrupt.Vector   = pPartialInDesc->u.Interrupt.Vector;
         pPartialOutDesc->u.Interrupt.Affinity = pPartialInDesc->u.Interrupt.Affinity;
         pPartialOutDesc++;
         j++;
         break;
      default:
         break;
      } // end switch
   } // end for
   
   *POutList_Pointer = pOutList;
   *ListSize_Pointer = length;

CycladzBuildResourceList_Error:
   return status;

}
#if 0

VOID
Cycladz_Delay(
	ULONG NumberOfMilliseconds
    )
/*--------------------------------------------------------------------------
    Cycladz_Delay()
    
    Routine Description: Delay routine.
    
    Arguments:
    
    NumberOfMilliseconds - Number of milliseconds to be delayed.
    
    Return Value: none.
--------------------------------------------------------------------------*/
{
    LARGE_INTEGER startOfSpin, nextQuery, difference, delayTime;

    delayTime.QuadPart = NumberOfMilliseconds*10*1000; // unit is 100ns
    KeQueryTickCount(&startOfSpin);

    do {			
        KeQueryTickCount(&nextQuery);
        difference.QuadPart = nextQuery.QuadPart - startOfSpin.QuadPart;
        ASSERT(KeQueryTimeIncrement() <= MAXLONG);
        if (difference.QuadPart * KeQueryTimeIncrement() >= 
                                        delayTime.QuadPart) {
            break;															
        }
    } while (1);

}
#endif

ULONG
Cycladz_DoesBoardExist(
                   IN PFDO_DEVICE_DATA Extension
                   )

/*++

Routine Description:

    This routine examines if the board is present.


Arguments:

    Extension - A pointer to a serial device extension.

Return Value:

    Will return number of ports.

--*/

{
   ULONG numPorts = 0;
   int z_load_status;
   ULONG j;
   ULONG n_channel;
   ULONG fw_version;   
   WCHAR FwVersionBuffer[10];
   UNICODE_STRING FwVersion;
   struct FIRM_ID *pt_firm_id;
   struct ZFW_CTRL *pt_zfw;
   struct BOARD_CTRL *pt_board_ctrl;
   LARGE_INTEGER d250ms = RtlConvertLongToLargeInteger(-250*10000);

   z_reset_board(Extension);

   z_load_status = z_load(Extension, 0, L"zlogic.cyz");
   Cycladz_KdPrint(Extension,SER_DBG_CYCLADES,("z_load returned %x\n",z_load_status));

   // Error injection
   //z_load_status = ZL_RET_FPGA_ERROR;
   //---

   switch (z_load_status){
   case ZL_RET_SUCCESS: 
      break;	// Success
   case ZL_RET_NO_MATCHING_FW_CONFIG:
      CyzLogError( Extension->DriverObject,Extension->Self,
                   Extension->PhysicalBoardMemory,CyzPhysicalZero,
                   0,0,0,0,STATUS_SUCCESS,CYZ_NO_MATCHING_FW_CONFIG,
                   0,NULL,0,NULL);
      break;
   case ZL_RET_FILE_OPEN_ERROR:
      CyzLogError( Extension->DriverObject,Extension->Self,
                   Extension->PhysicalBoardMemory,CyzPhysicalZero,
                   0,0,0,0,STATUS_SUCCESS,CYZ_FILE_OPEN_ERROR,
                   0,NULL,0,NULL);
      break;
   case ZL_RET_FPGA_ERROR:			
      CyzLogError( Extension->DriverObject,Extension->Self,
                   Extension->PhysicalBoardMemory,CyzPhysicalZero,
                   0,0,0,0,STATUS_SUCCESS,CYZ_FPGA_ERROR,
                   0,NULL,0,NULL);
      break;
   case ZL_RET_FILE_READ_ERROR:
      CyzLogError( Extension->DriverObject,Extension->Self,
                   Extension->PhysicalBoardMemory,CyzPhysicalZero,
                   0,0,0,0,STATUS_SUCCESS,CYZ_FILE_READ_ERROR,
                   0,NULL,0,NULL);
      break;
   }
   
   if (z_load_status != ZL_RET_SUCCESS) {
      goto DoesBoardExistEnd;
   }

   Cycladz_KdPrint(Extension,SER_DBG_CYCLADES,("z_load worked\n"));

   pt_firm_id = (struct FIRM_ID *) (Extension->BoardMemory + ID_ADDRESS);
											
   for (j=0; j<8; j++) {
      KeDelayExecutionThread(KernelMode,FALSE,&d250ms);

      if (CYZ_READ_ULONG(&pt_firm_id->signature) == ZFIRM_ID) {
         break;
      }				
   }	

   // Error injection
   //j=8;
   //--
			
   if (j==8) {
      if (CYZ_READ_ULONG(&pt_firm_id->signature) == ZFIRM_HLT) {
         Cycladz_KdPrint(Extension,SER_DBG_CYCLADES,("ZFIRM_HLT\n"));
         CyzLogError( Extension->DriverObject,Extension->Self,
                      Extension->PhysicalBoardMemory,CyzPhysicalZero,
                      0,0,0,0,STATUS_SUCCESS,CYZ_POWER_SUPPLY,
                      0,NULL,0,NULL);
      } else {
         Cycladz_KdPrint(Extension,SER_DBG_CYCLADES,("Firmware didn't start\n"));
         CyzLogError( Extension->DriverObject,Extension->Self,
                      Extension->PhysicalBoardMemory,CyzPhysicalZero,
                      0,0,0,0,STATUS_SUCCESS,CYZ_FIRMWARE_NOT_STARTED,
                      0,NULL,0,NULL);
      }
      goto DoesBoardExistEnd;
   }
									
   // Firmware was correclty loaded and initialized.
   // Get number of channels.

   pt_zfw = (struct ZFW_CTRL *)(Extension->BoardMemory +
                                CYZ_READ_ULONG(&pt_firm_id->zfwctrl_addr));

   pt_board_ctrl = &pt_zfw->board_ctrl;

   n_channel = CYZ_READ_ULONG(&pt_board_ctrl->n_channel);
   Cycladz_KdPrint(Extension,SER_DBG_CYCLADES,("n_channel = %d\n",n_channel));

   //------- TEMP CODE-----------
   //n_channel = 1;
   //------ END TEMP CODE -------

   fw_version = CYZ_READ_ULONG(&pt_board_ctrl->fw_version);

   RtlInitUnicodeString(&FwVersion, NULL);
   FwVersion.MaximumLength = sizeof(FwVersionBuffer);
   FwVersion.Buffer = FwVersionBuffer;
   RtlIntegerToUnicodeString(fw_version, 16, &FwVersion);
   
   CyzLogError( Extension->DriverObject,Extension->Self,
                Extension->PhysicalBoardMemory,CyzPhysicalZero,
                0,0,0,0,STATUS_SUCCESS,CYZ_FIRMWARE_VERSION,
                FwVersion.Length,FwVersion.Buffer,
                0,NULL);
   
   if (n_channel == 0) {
      Cycladz_KdPrint(Extension,SER_DBG_CYCLADES,("No channel\n"));
      CyzLogError( Extension->DriverObject,Extension->Self,
                   Extension->PhysicalBoardMemory,CyzPhysicalZero,
                   0,0,0,0,STATUS_SUCCESS,CYZ_BOARD_WITH_NO_PORT,
                   0,NULL,0,NULL);
      goto DoesBoardExistEnd;
   }

   // Error injection
   //n_channel = 65;
   //-----

   if (n_channel > 64) {
      Cycladz_KdPrint(Extension,SER_DBG_CYCLADES,("Invalid number of channels (more than 64).\n"));
      CyzLogError( Extension->DriverObject,Extension->Self,
                   Extension->PhysicalBoardMemory,CyzPhysicalZero,
                   0,0,0,0,STATUS_SUCCESS,CYZ_BOARD_WITH_TOO_MANY_PORTS,
                   0,NULL,0,NULL);
      goto DoesBoardExistEnd;
   }

//   // Error injection
//   //if (fw_version >= Z_COMPATIBLE_FIRMWARE) 
//   //-----
//
//   if (fw_version < Z_COMPATIBLE_FIRMWARE) {
//      Cycladz_KdPrint(Extension,SER_DBG_CYCLADES,("Incompatible firmware\n"));
//      CyzLogError( Extension->DriverObject,Extension->Self,
//                   Extension->PhysicalBoardMemory,CyzPhysicalZero,
//                   0,0,0,0,STATUS_SUCCESS,CYZ_INCOMPATIBLE_FIRMWARE,
//                   0,NULL,0,NULL);
//      goto DoesBoardExistEnd;
//   }

   Extension->FirmwareVersion = fw_version;
   Extension->NumPorts = n_channel;
   numPorts = n_channel;

DoesBoardExistEnd:

   return numPorts;

}

PCHAR
PnPMinorFunctionString (
    UCHAR MinorFunction
)
{
    switch (MinorFunction)
    {
        case IRP_MN_START_DEVICE:
            return "IRP_MN_START_DEVICE";
        case IRP_MN_QUERY_REMOVE_DEVICE:
            return "IRP_MN_QUERY_REMOVE_DEVICE";
        case IRP_MN_REMOVE_DEVICE:
            return "IRP_MN_REMOVE_DEVICE";
        case IRP_MN_CANCEL_REMOVE_DEVICE:
            return "IRP_MN_CANCEL_REMOVE_DEVICE";
        case IRP_MN_STOP_DEVICE:
            return "IRP_MN_STOP_DEVICE";
        case IRP_MN_QUERY_STOP_DEVICE:
            return "IRP_MN_QUERY_STOP_DEVICE";
        case IRP_MN_CANCEL_STOP_DEVICE:
            return "IRP_MN_CANCEL_STOP_DEVICE";
        case IRP_MN_QUERY_DEVICE_RELATIONS:
            return "IRP_MN_QUERY_DEVICE_RELATIONS";
        case IRP_MN_QUERY_INTERFACE:
            return "IRP_MN_QUERY_INTERFACE";
        case IRP_MN_QUERY_CAPABILITIES:
            return "IRP_MN_QUERY_CAPABILITIES";
        case IRP_MN_QUERY_RESOURCES:
            return "IRP_MN_QUERY_RESOURCES";
        case IRP_MN_QUERY_RESOURCE_REQUIREMENTS:
            return "IRP_MN_QUERY_RESOURCE_REQUIREMENTS";
        case IRP_MN_QUERY_DEVICE_TEXT:
            return "IRP_MN_QUERY_DEVICE_TEXT";
        case IRP_MN_FILTER_RESOURCE_REQUIREMENTS:
            return "IRP_MN_FILTER_RESOURCE_REQUIREMENTS";
        case IRP_MN_READ_CONFIG:
            return "IRP_MN_READ_CONFIG";
        case IRP_MN_WRITE_CONFIG:
            return "IRP_MN_WRITE_CONFIG";
        case IRP_MN_EJECT:
            return "IRP_MN_EJECT";
        case IRP_MN_SET_LOCK:
            return "IRP_MN_SET_LOCK";
        case IRP_MN_QUERY_ID:
            return "IRP_MN_QUERY_ID";
        case IRP_MN_QUERY_PNP_DEVICE_STATE:
            return "IRP_MN_QUERY_PNP_DEVICE_STATE";
        case IRP_MN_QUERY_BUS_INFORMATION:
            return "IRP_MN_QUERY_BUS_INFORMATION";
        case IRP_MN_DEVICE_USAGE_NOTIFICATION:
            return "IRP_MN_DEVICE_USAGE_NOTIFICATION";
        case IRP_MN_SURPRISE_REMOVAL:
            return "IRP_MN_SURPRISE_REMOVAL";
        case IRP_MN_QUERY_LEGACY_BUS_INFORMATION:
            return "IRP_MN_QUERY_LEGACY_BUS_INFORMATION";
        default:
            return "IRP_MN_?????";
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyclad-z\power.c ===
/*--------------------------------------------------------------------------
*
*   Copyright (C) Cyclades Corporation, 2000-2001.
*   All rights reserved.
*
*   Cyclades-Z Enumerator Driver
*	
*   This file:      power.c
*
*   Description:    This module contains contains the power calls 
*                   for the cyclades-Z bus driver.
*					
*   Notes:          This code supports Windows 2000 and Windows XP, 
*                   x86 and ia64 processors.
*
*   Complies with Cyclades SW Coding Standard rev 1.3.
*
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*	Change History
*
*--------------------------------------------------------------------------
*   Initial implementation based on Microsoft sample code.
*
*--------------------------------------------------------------------------
*/

#include "pch.h"

#ifdef ALLOC_PRAGMA
//#pragma alloc_text (PAGE, Cycladz_Power)
//#pragma alloc_text (PAGE, Cycladz_FDO_Power)
//#pragma alloc_text (PAGE, Cycladz_PDO_Power)
#endif


typedef struct _POWER_COMPLETION_CONTEXT {

    PDEVICE_OBJECT  DeviceObject;
    PIRP            SIrp;

} POWER_COMPLETION_CONTEXT, *PPOWER_COMPLETION_CONTEXT;


VOID
OnPowerRequestComplete(
    PDEVICE_OBJECT DeviceObject,
    UCHAR MinorFunction,
    POWER_STATE state,
    POWER_COMPLETION_CONTEXT* PowerContext,
    PIO_STATUS_BLOCK IoStatus
    )
/*++

Routine Description:

   Completion routine for D-IRP.

Arguments:


Return Value:

   NT status code

--*/
{
    PFDO_DEVICE_DATA   fdoData = (PFDO_DEVICE_DATA) PowerContext->DeviceObject->DeviceExtension;
    PIRP        sIrp = PowerContext->SIrp;

    UNREFERENCED_PARAMETER (DeviceObject);
    UNREFERENCED_PARAMETER (MinorFunction);
    UNREFERENCED_PARAMETER (state);

    Cycladz_KdPrint(fdoData,SER_DBG_POWER_TRACE, (">OnPowerRequestComplete\n"));

    //
    // Here we copy the D-IRP status into the S-IRP
    //
    sIrp->IoStatus.Status = IoStatus->Status;

    //
    // Release the IRP
    //
    PoStartNextPowerIrp(sIrp);
    IoCompleteRequest(sIrp, IO_NO_INCREMENT);

    //
    // Cleanup
    //
    ExFreePool(PowerContext);
    Cycladz_DecIoCount(fdoData);

    Cycladz_KdPrint(fdoData,SER_DBG_POWER_TRACE, ("<OnPowerRequestComplete\n"));

}

NTSTATUS
Cycladz_FDOSystemPowerComplete (
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp,
    IN PVOID Context
    )
/*++
--*/
{
    POWER_COMPLETION_CONTEXT* powerContext;
    POWER_STATE         powerState;
    POWER_STATE_TYPE    powerType;
    PIO_STACK_LOCATION  stack;
    PFDO_DEVICE_DATA    data;
    NTSTATUS    status = Irp->IoStatus.Status;

    UNREFERENCED_PARAMETER (Context);

    data = (PFDO_DEVICE_DATA) DeviceObject->DeviceExtension;

    Cycladz_KdPrint(data,SER_DBG_POWER_TRACE, (">SystemPowerComplete\n"));

    if (!NT_SUCCESS(status)) {

        PoStartNextPowerIrp(Irp);
        Cycladz_DecIoCount (data);    
        Cycladz_KdPrint(data,SER_DBG_POWER_TRACE, ("<SystemPowerComplete1\n"));
        return STATUS_SUCCESS;
    }

    stack = IoGetCurrentIrpStackLocation (Irp);
    powerState = stack->Parameters.Power.State;
                        
    switch (stack->Parameters.Power.State.SystemState) {
    case PowerSystemUnspecified:
        powerState.DeviceState = PowerDeviceUnspecified;
        break;

    case PowerSystemWorking:
        powerState.DeviceState = PowerDeviceD0;
        break;

    case PowerSystemSleeping1:
    case PowerSystemSleeping2:
    case PowerSystemSleeping3:
    case PowerSystemHibernate:
    case PowerSystemShutdown:
    case PowerSystemMaximum:
        powerState.DeviceState = PowerDeviceD3;
        break;

    default:
        powerState.DeviceState = PowerDeviceD3;
    }

    //
    // Send IRP to change device state
    //
    powerContext = (POWER_COMPLETION_CONTEXT*)
                ExAllocatePool(NonPagedPool, sizeof(POWER_COMPLETION_CONTEXT));

    if (!powerContext) {

        status = STATUS_INSUFFICIENT_RESOURCES;

    } else {

        powerContext->DeviceObject = DeviceObject;
        powerContext->SIrp = Irp;

        status = PoRequestPowerIrp(data->Self, IRP_MN_SET_POWER, powerState, OnPowerRequestComplete, 
                                   powerContext, NULL);
    }

    if (!NT_SUCCESS(status)) {

        Cycladz_KdPrint(data,SER_DBG_POWER_TRACE, ("PoRequestPowerIrp %x\n",status));
        if (powerContext) {
            ExFreePool(powerContext);
        }

        PoStartNextPowerIrp(Irp);
        Irp->IoStatus.Status = status;
        //IoCompleteRequest(Irp, IO_NO_INCREMENT); Toaster has this line.
        Cycladz_DecIoCount(data);
        Cycladz_KdPrint(data,SER_DBG_POWER_TRACE, ("<2SystemPowerComplete\n"));
        return status;
    }

    Cycladz_KdPrint(data,SER_DBG_POWER_TRACE, ("<3SystemPowerComplete\n"));
    return STATUS_MORE_PROCESSING_REQUIRED;

}

VOID
Cycladz_PowerOnWorkItem(
    IN PDEVICE_OBJECT DeviceObject,
    IN PVOID Context
)
/*++

Routine Description:

    This routine starts the Z hardware.

Arguments:

Return Value:

   NT status code

--*/
{
    PIRP                    Irp;
    PFDO_DEVICE_DATA        fdoData;
    PWORKER_THREAD_CONTEXT  context = (PWORKER_THREAD_CONTEXT)Context;

    fdoData = (PFDO_DEVICE_DATA) DeviceObject->DeviceExtension;

    Cycladz_KdPrint(fdoData,SER_DBG_CYCLADES, (">Cycladz_PowerOnWorkItem Irp %x\n",context->Irp));

    Irp = context->Irp;

    Cycladz_DoesBoardExist(fdoData);

    PoSetPowerState (DeviceObject, context->PowerType, context->PowerState);

    PoStartNextPowerIrp (Irp);

    IoCompleteRequest (context->Irp, IO_NO_INCREMENT);

    //
    // Cleanup before exiting from the worker thread.
    //
    IoFreeWorkItem(context->WorkItem);
    ExFreePool((PVOID)context);

    Cycladz_KdPrint(fdoData,SER_DBG_CYCLADES, ("<Cycladz_PowerOnWorkItem\n"));

    Cycladz_DecIoCount (fdoData);

}


NTSTATUS
Cycladz_FDOPowerComplete (
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp,
    IN PVOID Context
    )
/*++
--*/
{
    PIO_WORKITEM            item;
    PWORKER_THREAD_CONTEXT  context;
    POWER_STATE         powerState;
    POWER_STATE_TYPE    powerType;
    PIO_STACK_LOCATION  stack;
    PFDO_DEVICE_DATA    data;
    //NTSTATUS            status = STATUS_SUCCESS;    //Removed in build 2072

    UNREFERENCED_PARAMETER (Context);

    if (Irp->PendingReturned) {  
        IoMarkIrpPending(Irp);
    }

    data = (PFDO_DEVICE_DATA) DeviceObject->DeviceExtension;
    stack = IoGetCurrentIrpStackLocation (Irp);
    powerType = stack->Parameters.Power.Type;
    powerState = stack->Parameters.Power.State;

    Cycladz_KdPrint(data,SER_DBG_CYCLADES, ("In Cycladz_FDOPowerComplete Irp %x\n",Irp));
    
    switch (stack->MinorFunction) {
    case IRP_MN_SET_POWER:
        switch (powerType) {
        case DevicePowerState:

            Cycladz_KdPrint(data,SER_DBG_CYCLADES, ("IRP_MN_SET_POWER Device\n"));

            //
            // Powering Up
            // 
            ASSERT (powerState.DeviceState < data->DeviceState);

            context = ExAllocatePool (NonPagedPool,
                                      sizeof(WORKER_THREAD_CONTEXT));
            if(context){
                item = IoAllocateWorkItem(DeviceObject);
                context->Irp = Irp;
                context->DeviceObject= DeviceObject;
                context->WorkItem = item;
                context->PowerType = powerType;
                context->PowerState = powerState;
                if (item) {

                    IoMarkIrpPending(Irp);
                    IoQueueWorkItem (item,
                                     Cycladz_PowerOnWorkItem,
                                     DelayedWorkQueue,
                                     context);
                    return STATUS_MORE_PROCESSING_REQUIRED;
                } else {
                    //status = STATUS_INSUFFICIENT_RESOURCES;
                    // What should we do? DDK says we cannot fail SET_POWER.
                }
            } else {
                //status = STATUS_INSUFFICIENT_RESOURCES;
                // What should we do? DDK says we cannot fail SET_POWER.
            }
            
            data->DeviceState = powerState.DeviceState;

            //PoSetPowerState (data->Self, powerType, powerState);

            break;

        default:
           Cycladz_KdPrint(data,SER_DBG_CYCLADES, ("IRP_MN_SET_POWER not Device\n"));
           break;
        }
        break;

    case IRP_MN_QUERY_POWER:

        Cycladz_KdPrint(data,SER_DBG_CYCLADES, ("IRP_MN_QUERY_POWER not Device\n"));
        ASSERT (IRP_MN_QUERY_POWER != stack->MinorFunction);
        break;

    default:
        ASSERT (0xBADBAD == IRP_MN_QUERY_POWER);
        break;
    }


    PoStartNextPowerIrp (Irp);
    Cycladz_DecIoCount (data);

    //return status; Changed to below line in build 2072
    Cycladz_KdPrint(data,SER_DBG_CYCLADES, ("Leaving Cycladz_FDOPowerComplete\n"));
    return STATUS_SUCCESS; // Continue completion...
}

NTSTATUS
Cycladz_FDO_Power (
    PFDO_DEVICE_DATA    Data,
    PIRP                Irp
    )
/*++
--*/
{
    NTSTATUS            status;
    BOOLEAN             hookit = FALSE;
    POWER_STATE         powerState;
    POWER_STATE_TYPE    powerType;
    PIO_STACK_LOCATION  stack;
    // ADDED FANNY
    ULONG               indexPDO;

    stack = IoGetCurrentIrpStackLocation (Irp);
    powerType = stack->Parameters.Power.Type;
    powerState = stack->Parameters.Power.State;

    Cycladz_KdPrint(Data,SER_DBG_CYCLADES, ("In Cycladz_FDO_Power Irp %x\n",Irp));

    status = Cycladz_IncIoCount (Data);
    if (!NT_SUCCESS (status)) {
        Irp->IoStatus.Information = 0;
        Irp->IoStatus.Status = status;
        PoStartNextPowerIrp (Irp);
        IoCompleteRequest (Irp, IO_NO_INCREMENT);
        return status;
    }

    switch (stack->MinorFunction) {
    case IRP_MN_SET_POWER:
        //
        // If it hasn't started, we just pass it through
        //

        //if (Data->Started != TRUE) {    // Added in DDK final version
        //    status = Irp->IoStatus.Status = STATUS_SUCCESS;
        //    break;
        //}
        if (Data->DevicePnPState != Started) {   // Toaster Bus compares to == NotStarted
            status = Irp->IoStatus.Status = STATUS_SUCCESS;
            break;
        }

        Cycladz_KdPrint(Data,
                     SER_DBG_PNP_TRACE,
                     ("Cycladz-PnP Setting %s state to %d\n",
                      ((powerType == SystemPowerState) ?  "System" : "Device"),
                      powerState.SystemState));

        switch (powerType) {
        case DevicePowerState:

            status = Irp->IoStatus.Status = STATUS_SUCCESS;

            if (Data->DeviceState < powerState.DeviceState) {
                //
                // Powering down
                //
                PoSetPowerState (Data->Self, powerType, powerState);
                Data->DeviceState = powerState.DeviceState;
            } else if (Data->DeviceState > powerState.DeviceState) {
                //
                // Powering Up
                //
                hookit = TRUE;
            }
            
            break;

        case SystemPowerState:

            IoMarkIrpPending(Irp);
            IoCopyCurrentIrpStackLocationToNext(Irp);

            status = Cycladz_IncIoCount (Data);
            ASSERT (STATUS_SUCCESS == status);
            IoSetCompletionRoutine (Irp,
                                Cycladz_FDOSystemPowerComplete,
                                NULL,
                                TRUE,
                                TRUE,
                                TRUE);

            status = PoCallDriver (Data->TopOfStack, Irp);
            Cycladz_KdPrint(Data,SER_DBG_CYCLADES, ("Leaving Cycladz_FDO_Power\n"));
            Cycladz_DecIoCount (Data);

            return STATUS_PENDING;

        }
        break;

    case IRP_MN_QUERY_POWER:

        Cycladz_KdPrint(Data,SER_DBG_CYCLADES,("IRP_MN_QUERY_POWER\n"));

        status = Irp->IoStatus.Status = STATUS_SUCCESS;
        break;

    default:
        //
        // status should be STATUS_SUCCESS
        //
        break;
    }
    
    if (hookit) {
        IoMarkIrpPending(Irp);
        IoCopyCurrentIrpStackLocationToNext (Irp);

        status = Cycladz_IncIoCount (Data);
        ASSERT (STATUS_SUCCESS == status);
        IoSetCompletionRoutine (Irp,
                                Cycladz_FDOPowerComplete,
                                NULL,
                                TRUE,
                                TRUE,
                                TRUE);

        status = PoCallDriver (Data->TopOfStack, Irp);
        Cycladz_KdPrint(Data,SER_DBG_CYCLADES, ("Leaving Cycladz_FDO_Power\n"));
        Cycladz_DecIoCount (Data);
        return STATUS_PENDING;

    } 

    PoStartNextPowerIrp (Irp);
    IoSkipCurrentIrpStackLocation(Irp);
    status =  PoCallDriver (Data->TopOfStack, Irp);
    Cycladz_KdPrint(Data,SER_DBG_CYCLADES, ("Leaving Cycladz_FDO_Power\n"));
    Cycladz_DecIoCount (Data);
    return status;

}

NTSTATUS
Cycladz_PDO_Power (
    PPDO_DEVICE_DATA    PdoData,
    PIRP                Irp
    )
/*++
--*/
{
    NTSTATUS            status = STATUS_SUCCESS;
    PIO_STACK_LOCATION  stack;
    POWER_STATE         powerState;
    POWER_STATE_TYPE    powerType;

    stack = IoGetCurrentIrpStackLocation (Irp);
    powerType = stack->Parameters.Power.Type;
    powerState = stack->Parameters.Power.State;

    switch (stack->MinorFunction) {
    case IRP_MN_SET_POWER:
        switch (powerType) {
        case DevicePowerState:

            Cycladz_KdPrint(PdoData,SER_DBG_CYCLADES,("IRP_MN_SET_POWER Device Pdo %x\n",
                                                                           PdoData->Self));
            if (PdoData->DeviceState > powerState.DeviceState) {
                PoSetPowerState (PdoData->Self, powerType, powerState);
                PdoData->DeviceState = powerState.DeviceState;
            } else if (PdoData->DeviceState < powerState.DeviceState) {
                //
                // Powering down.
                //
                PoSetPowerState (PdoData->Self, powerType, powerState);
                PdoData->DeviceState = powerState.DeviceState;
            }
            break;

        case SystemPowerState:
           Cycladz_KdPrint(PdoData,SER_DBG_CYCLADES,("IRP_MN_SET_POWER System Pdo %x\n",
                                                                           PdoData->Self));
            //
            // Default to STATUS_SUCCESS
            //
            break;

        default:
            status = STATUS_NOT_IMPLEMENTED;
            break;
        }
        break;

    case IRP_MN_QUERY_POWER:
        Cycladz_KdPrint(PdoData,SER_DBG_CYCLADES,("IRP_MN_QUERY_POWER Pdo %x\n",PdoData->Self));
        //
        // Default to STATUS_SUCCESS
        //
        break;

    case IRP_MN_WAIT_WAKE:
    case IRP_MN_POWER_SEQUENCE:
        Cycladz_KdPrint(PdoData,SER_DBG_CYCLADES,("IRP_MN_ NOT IMPLEMENTED\n"));
        status = STATUS_NOT_IMPLEMENTED;
        break;

    default:
       status = Irp->IoStatus.Status;
    }

    Irp->IoStatus.Status = status;
    PoStartNextPowerIrp (Irp);
    IoCompleteRequest (Irp, IO_NO_INCREMENT);

    return status;
}

NTSTATUS
Cycladz_Power (
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    )
/*++
--*/
{
    PIO_STACK_LOCATION  irpStack;
    NTSTATUS            status;
    PCOMMON_DEVICE_DATA commonData;

    status = STATUS_SUCCESS;
    irpStack = IoGetCurrentIrpStackLocation (Irp);
    ASSERT (IRP_MJ_POWER == irpStack->MajorFunction);

    commonData = (PCOMMON_DEVICE_DATA) DeviceObject->DeviceExtension;

    if (commonData->IsFDO) {
        status = 
            Cycladz_FDO_Power ((PFDO_DEVICE_DATA) DeviceObject->DeviceExtension,
                Irp);
    } else {
        status = 
            Cycladz_PDO_Power ((PPDO_DEVICE_DATA) DeviceObject->DeviceExtension,
                Irp);
    }

    return status;
}     



NTSTATUS
Cycladz_GotoPowerState(IN PDEVICE_OBJECT PDevObj,
                   IN PFDO_DEVICE_DATA PDevExt,
                   IN DEVICE_POWER_STATE DevPowerState)
/*++

Routine Description:

    This routine causes the driver to request the stack go to a particular
    power state.

Arguments:

    PDevObj - Pointer to the device object for this device

    PDevExt - Pointer to the device extension we are working from

    DevPowerState - the power state we wish to go to

Return Value:

    The function value is the final status of the call


--*/
{
   KEVENT gotoPowEvent;
   NTSTATUS status;
   POWER_STATE powerState;

   UNREFERENCED_PARAMETER (PDevExt);   

   PAGED_CODE();

   Cycladz_KdPrint(PDevExt,SER_DBG_CYCLADES, ("In Cycladz_GotoPowerState\n"));

   powerState.DeviceState = DevPowerState;

   KeInitializeEvent(&gotoPowEvent, SynchronizationEvent, FALSE);

   status = PoRequestPowerIrp(PDevObj, IRP_MN_SET_POWER, powerState,
                              Cycladz_SystemPowerCompletion, &gotoPowEvent,
                              NULL);

   if (status == STATUS_PENDING) {
      KeWaitForSingleObject(&gotoPowEvent, Executive, KernelMode, FALSE, NULL);
      status = STATUS_SUCCESS;
   }

#if DBG
   if (!NT_SUCCESS(status)) {
      Cycladz_KdPrint(PDevExt,SER_DBG_CYCLADES, ("Cycladz_GotoPowerState FAILED\n"));
   }
#endif

   Cycladz_KdPrint(PDevExt,SER_DBG_CYCLADES, ("Leaving Cycladz_GotoPowerState\n"));

   return status;
}



NTSTATUS
Cycladz_SystemPowerCompletion(IN PDEVICE_OBJECT PDevObj, UCHAR MinorFunction,
                              IN POWER_STATE PowerState, IN PVOID Context,
                              PIO_STATUS_BLOCK IoStatus)
/*++

Routine Description:

    This routine is the completion routine for PoRequestPowerIrp calls
    in this module.

Arguments:

    PDevObj - Pointer to the device object the irp is completing for

    MinorFunction - IRP_MN_XXXX value requested

    PowerState - Power state request was made of

    Context - Event to set or NULL if no setting required

    IoStatus - Status block from request

Return Value:

    VOID


--*/
{

   UNREFERENCED_PARAMETER (PDevObj);   
   UNREFERENCED_PARAMETER (MinorFunction);
   UNREFERENCED_PARAMETER (PowerState);
   UNREFERENCED_PARAMETER (IoStatus);
   
   if (Context != NULL) {
      KeSetEvent((PKEVENT)Context, IO_NO_INCREMENT, 0);
   }

   return STATUS_SUCCESS;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyclad-z\string.c ===
/*--------------------------------------------------------------------------
*
*   Copyright (C) Cyclades Corporation, 2000-2001.
*   All rights reserved.
*
*   Cyclades-Z Enumerator Driver
*	
*   This file:      string.c
*
*   Description:    This module contains the functions used to parse the 
*                   PNP COM ID and save it in the appropriate 
*                   UNICODE STRINGS.  The main function that is called 
*                   is Cycladz_ParseData.  All other functions are called
*                   by this main function.
*					
*   Notes:			This code supports Windows 2000 and Windows XP,
*                   x86 and ia64 processors.
*
*   Complies with Cyclades SW Coding Standard rev 1.3.
*
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*	Change History
*
*--------------------------------------------------------------------------
*   Initial implementation based on Microsoft sample code.
*
*--------------------------------------------------------------------------
*/


#include "pch.h"


#define MAX_DEVNODE_NAME        256 // Total size of Device ID

#ifdef ALLOC_PRAGMA
#pragma alloc_text (PAGE, Cycladz_InitMultiString)
#endif


NTSTATUS
Cycladz_InitMultiString(PFDO_DEVICE_DATA FdoData, PUNICODE_STRING MultiString,
                        ...)
/*++

    This routine will take a null terminated list of ascii strings and combine
    them together to generate a unicode multi-string block

Arguments:

    MultiString - a unicode structure in which a multi-string will be built
    ...         - a null terminated list of narrow strings which will be
             combined together. This list must contain at least a
        trailing NULL

Return Value:

    NTSTATUS

--*/
{
   ANSI_STRING ansiString;
   NTSTATUS status;
   PCSTR rawString;
   PWSTR unicodeLocation;
   ULONG multiLength = 0;
   UNICODE_STRING unicodeString;
   va_list ap;
   ULONG i;

   PAGED_CODE();

#if !DBG
   UNREFERENCED_PARAMETER(FdoData);
#endif


   Cycladz_KdPrint(FdoData, SER_DBG_SS_TRACE,
                   ("Entering Cycladz_InitMultiString\n"));

   va_start(ap,MultiString);

   //
   // Make sure that we won't leak memory
   //

   ASSERT(MultiString->Buffer == NULL);

   rawString = va_arg(ap, PCSTR);

   while (rawString != NULL) {
      RtlInitAnsiString(&ansiString, rawString);
      multiLength += RtlAnsiStringToUnicodeSize(&(ansiString));
      rawString = va_arg(ap, PCSTR);
   }

   va_end( ap );

   if (multiLength == 0) {
      //
      // Done
      //
      RtlInitUnicodeString(MultiString, NULL);
      Cycladz_KdPrint(FdoData, SER_DBG_SS_TRACE,
                      ("Leaving Cycladz_InitMultiString (1)\n"));

      return STATUS_SUCCESS;
   }

   //
   // We need an extra null
   //
   multiLength += sizeof(WCHAR);

   MultiString->MaximumLength = (USHORT)multiLength;
   MultiString->Buffer = ExAllocatePool(PagedPool, multiLength);
   MultiString->Length = 0;

   if (MultiString->Buffer == NULL) {
      Cycladz_KdPrint(FdoData, SER_DBG_SS_TRACE,
                      ("Leaving Cycladz_InitMultiString (2)\n"));

      return STATUS_INSUFFICIENT_RESOURCES;
   }

   Cycladz_KdPrint(FdoData, SER_DBG_SS_TRACE,
                   ("Allocated %lu bytes for buffer\n", multiLength));

#if DBG
   RtlFillMemory(MultiString->Buffer, multiLength, 0xff);
#endif

   unicodeString.Buffer = MultiString->Buffer;
   unicodeString.MaximumLength = (USHORT) multiLength;

   va_start(ap, MultiString);
   rawString = va_arg(ap, PCSTR);

   while (rawString != NULL) {

      RtlInitAnsiString(&ansiString,rawString);
      status = RtlAnsiStringToUnicodeString(&unicodeString, &ansiString, FALSE);

      //
      // We don't allocate memory, so if something goes wrong here,
      // its the function that's at fault
      //
      ASSERT(NT_SUCCESS(status));

      //
      // Check for any commas and replace them with NULLs
      //

      ASSERT(unicodeString.Length % sizeof(WCHAR) == 0);

      for (i = 0; i < (unicodeString.Length / sizeof(WCHAR)); i++) {
         if (unicodeString.Buffer[i] == L'\x2C' ||
             unicodeString.Buffer[i] == L'\x0C' ) {
            unicodeString.Buffer[i] = L'\0';
         }
      }

      Cycladz_KdPrint(FdoData, SER_DBG_SS_TRACE, ("unicode buffer: %ws\n",
                                                  unicodeString.Buffer));

      //
      // Move the buffers along
      //
      unicodeString.Buffer += ((unicodeString.Length / sizeof(WCHAR)) + 1);
      unicodeString.MaximumLength -= (unicodeString.Length + sizeof(WCHAR));
      unicodeString.Length = 0;

      //
      // Next
      //

      rawString = va_arg(ap, PCSTR);
   } // while

   va_end(ap);

   ASSERT(unicodeString.MaximumLength == sizeof(WCHAR));

   //
   // Stick the final null there
   //

   Cycladz_KdPrint(FdoData, SER_DBG_SS_TRACE, ("unicode buffer last addr: "
                                               "%x\n", unicodeString.Buffer));

   unicodeString.Buffer[0] = L'\0';

   //
   // Include the nulls in the length of the string
   //

   MultiString->Length = (USHORT)multiLength;
   MultiString->MaximumLength = MultiString->Length;

   Cycladz_KdPrint(FdoData, SER_DBG_SS_TRACE,
                   ("Leaving Cycladz_InitMultiString (3)\n"));

   return STATUS_SUCCESS;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyzcoins\cyfriend.c ===
/** FILE: cyfriend.c ********** Module Header ********************************
 *
 *
 *
 *  Copyright (C) 2000 Cyclades Corporation
 *
 *************************************************************************/

#include "cyzports.h"

//
//  For Cyzport
//
TCHAR z_szCyzPort[] = TEXT("Cyclades-Z Port ");
TCHAR z_szPortIndex[] = TEXT("PortIndex");



BOOL
ReplaceFriendlyName(
    IN HDEVINFO         DeviceInfoSet,
    IN PSP_DEVINFO_DATA DeviceInfoData,
    IN PTCHAR           NewComName
)
{

    DEVINST         parentInst;
    HDEVINFO        parentInfo;
    SP_DEVINFO_DATA parentData;
    TCHAR           parentId[MAX_DEVICE_ID_LEN];
    TCHAR           charBuffer[MAX_PATH],
                    deviceDesc[LINE_LEN];
    HKEY            hDeviceKey;
    TCHAR           PortName[20];
    DWORD           PortNameSize,PortIndexSize,PortIndex;
    DWORD           dwErr;
    PTCHAR          comName = NULL;
    DWORD           portNumber = 0;

//  DbgOut(TEXT("ReplaceFriendlyName\n"));

    if((hDeviceKey = SetupDiOpenDevRegKey(DeviceInfoSet,
                                          DeviceInfoData,
                                          DICS_FLAG_GLOBAL,
                                          0,
                                          DIREG_DEV,
                                          KEY_READ)) == INVALID_HANDLE_VALUE) {
        DbgOut(TEXT("SetupDiOpenDevRegKey failed\n"));
        return FALSE;
    }

    PortNameSize = sizeof(PortName);
    dwErr = RegQueryValueEx(hDeviceKey,
                          m_szPortName,
                          NULL,
                          NULL,
                          (PBYTE)PortName,
                          &PortNameSize
                          );

    if (dwErr == ERROR_SUCCESS) {
    PortIndexSize = sizeof(PortIndex);
    dwErr = RegQueryValueEx(hDeviceKey,
                          z_szPortIndex,
                          NULL,
                          NULL,
                          (PBYTE)&PortIndex,
                          &PortIndexSize
                          );
    }

    RegCloseKey(hDeviceKey);

    if(dwErr != ERROR_SUCCESS) {
        DbgOut(TEXT("RegQueryValueEx failed\n"));
        return FALSE;
    }
    if (NewComName == NULL) {
        comName = PortName;
    } else {
        comName = NewComName;
    }
    if (comName == NULL) {
        DbgOut(TEXT("comName NULL\n"));
        return FALSE;
    }

    portNumber = PortIndex+1;

    if (!SetupDiGetDeviceRegistryProperty(DeviceInfoSet,
                                          DeviceInfoData,
                                          SPDRP_DEVICEDESC,
                                          NULL,
                                          (PBYTE)deviceDesc,
                                          sizeof(deviceDesc),
                                          NULL)) {
        DbgOut(TEXT("Couldn't get Device Description\n"));
        return FALSE;
    }

    if (_tcsnicmp (deviceDesc,z_szCyzPort,_tcslen(z_szCyzPort)) != 0){
        DbgOut(TEXT("Device Description is different of Cyclades-Z Port \n"));
        return FALSE;
    }
    
    if (portNumber == 0) {
        DbgOut(TEXT("Invalid portNumber\n"));
        return FALSE;
    }

    if (CM_Get_Parent(&parentInst,DeviceInfoData->DevInst,0) != CR_SUCCESS) {
        DbgOut(TEXT("CM_Get_Parent failed.\n"));
        return FALSE;
    }

    if (CM_Get_Device_ID(parentInst,parentId,CharSizeOf(parentId),0) != CR_SUCCESS) {
        DbgOut(TEXT("CM_Get_Device_ID failed.\n"));
        return FALSE;
    }

    parentInfo = SetupDiCreateDeviceInfoList(NULL,NULL);

    if (parentInfo == INVALID_HANDLE_VALUE) {
        DbgOut(TEXT("SetupDiCreateDeviceInfoList failed\n"));
        return FALSE;
    }
    
    parentData.cbSize = sizeof(SP_DEVINFO_DATA);

    if (SetupDiOpenDeviceInfo(parentInfo,parentId,NULL,0,&parentData)) {

        if (SetupDiGetDeviceRegistryProperty(parentInfo,
                                             &parentData,
                                             SPDRP_FRIENDLYNAME,
                                             NULL,
                                             (PBYTE)deviceDesc,
                                             sizeof(deviceDesc),
                                             NULL) ||  
            SetupDiGetDeviceRegistryProperty(parentInfo,
                                             &parentData,
                                             SPDRP_DEVICEDESC,
                                             NULL,
                                             (PBYTE)deviceDesc,
                                             sizeof(deviceDesc),
                                             NULL)) {
            wsprintf(charBuffer,TEXT("%s Port %2u (%s)"),deviceDesc,portNumber,comName);
//          #if DBG
//          {
//           TCHAR buf[500];
//           wsprintf(buf, TEXT("%s\n"), charBuffer);
//           DbgOut(buf);
//          }
//          #endif

            SetupDiSetDeviceRegistryProperty(DeviceInfoSet,
                                             DeviceInfoData,
                                             SPDRP_FRIENDLYNAME,
                                             (PBYTE)charBuffer,
                                              ByteCountOf(_tcslen(charBuffer) + 1)
                                             );

        }

    } else {
        #if DBG
        {
         TCHAR buf[500];
         wsprintf(buf, TEXT("SetupDiOpenDeviceInfo failed with error %x\n"), GetLastError());
         DbgOut(buf);
        }
        #endif
    }
    
    SetupDiDestroyDeviceInfoList(parentInfo);    
    return TRUE;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyclad-z\zfwint.h ===
/*----------------------------------------------------------------------*
 * zfwint.h: Cyclom-Z asynchronous interface definition. 				*
 *																		*
 * rev 2.0 12/13/95 Marcio Saito	Cyclom-Z interface definition.		*
 * rev 2.1 03/13/96 Marcio Saito	minor changes.						*
 * rev 2.2 05/29/96 Marcio Saito	parity/frame error interrupts.		*
 *					Acknolowdge interrupt mode.							*
 *					Break on/off. Data structures						*
 *					converted to ulong to avoid							*
 *					alignment problems.									*
 * rev 2.3 07/12/96 Marcio Saito	HW flow control changes. Flush		*
 *					buffer command added. Loopback						*
 *					operation.											*
 * rev 2.4 07/16/96 Marcio Saito	Diag counters added to CH_CTRL.		*
 * rev 2.5 03/21/97 Marcio Saito	Added INTBACK2						*
 * rez 3.0 06/04/97 Ivan Passos		Added OVR_ERROR and RXOVF			*
 *----------------------------------------------------------------------*/

/*
 *	This file contains the definitions for interfacing with the
 *	Cyclom-Z ZFIRM Firmware.
 */

/* General Constant definitions */

#define	MAX_CHAN	64		/* max number of channels per board */
#define MAX_SEX		4

#define	ZO_NPORTS	(MAX_CHAN / 8)

/* firmware id structure (set after boot) */

#define ID_ADDRESS	0x00000180L	/* signature/pointer address */
#define	ZFIRM_ID	0x5557465AL	/* ZFIRM/U signature */
#define	ZFIRM_HLT	0x59505B5CL	/* Halt signal (due to power supply issue) */
#define ZFIRM_RST	0x56040674L	/* RST signal (due to FW reset) */

#define	ZF_TINACT_DEF	1000	/* default inactivity timeout (1000 ms) */

struct	FIRM_ID {
	uclong	signature;		/* ZFIRM/U signature */
	uclong	zfwctrl_addr;		/* pointer to ZFW_CTRL structure */
};

/* Op. System id */

#define	C_OS_SVR3		0x00000010	/* generic SVR3 */
#define	C_OS_XENIX		0x00000011	/* SCO UNIX SVR3.2 */
#define	C_OS_SCO		0x00000012	/* SCO UNIX SVR3.2 */
#define	C_OS_SVR4		0x00000020	/* generic SVR4 */
#define	C_OS_UXWARE		0x00000021	/* UnixWare */
#define	C_OS_LINUX		0x00000030	/* generic Linux system */
#define	C_OS_SOLARIS	0x00000040	/* generic Solaris system */
#define	C_OS_BSD		0x00000050	/* generic BSD system */
#define	C_OS_DOS		0x00000070	/* generic DOS system */
#define	C_OS_NT			0x00000080	/* generic NT system */
#define	C_OS_OS2		0x00000090	/* generic OS/2 system */
#define C_OS_MAC_OS		0x000000a0	/* MAC/OS */
#define C_OS_AIX		0x000000b0	/* IBM AIX */

/* channel op_mode */

#define	C_CH_DISABLE	0x00000000	/* channel is disabled */
#define	C_CH_TXENABLE	0x00000001	/* channel Tx enabled */
#define	C_CH_RXENABLE	0x00000002	/* channel Rx enabled */
#define	C_CH_ENABLE		0x00000003	/* channel Tx/Rx enabled */
#define	C_CH_LOOPBACK	0x00000004	/* Loopback mode */

/* comm_parity - parity */

#define	C_PR_NONE		0x00000000	/* None */
#define	C_PR_ODD		0x00000001	/* Odd */
#define C_PR_EVEN		0x00000002	/* Even */
#define C_PR_MARK		0x00000004	/* Mark */
#define C_PR_SPACE		0x00000008	/* Space */
#define C_PR_PARITY		0x000000ff

#define	C_PR_DISCARD	0x00000100	/* discard char with frame/par error */
#define C_PR_IGNORE		0x00000200	/* ignore frame/par error */

/* comm_data_l - data length and stop bits */

#define C_DL_CS5		0x00000001
#define C_DL_CS6		0x00000002
#define C_DL_CS7		0x00000004
#define C_DL_CS8		0x00000008
#define	C_DL_CS			0x0000000f
#define C_DL_1STOP		0x00000010
#define C_DL_15STOP		0x00000020
#define C_DL_2STOP		0x00000040
#define	C_DL_STOP		0x000000f0

/* comm_data_l - data length and stop bits */

#define C_CF_NOFIFO		0x00000001

/* interrupt enabling/status */

#define	C_IN_DISABLE	0x00000000	/* zero, disable interrupts */
#define	C_IN_TXBEMPTY	0x00000001	/* tx buffer empty */
#define	C_IN_TXLOWWM	0x00000002	/* tx buffer below LWM */
#define	C_IN_TXFEMPTY	0x00000004	/* tx buffer + FIFO + shift reg. empty */
#define	C_IN_RXHIWM		0x00000010	/* rx buffer above HWM */
#define	C_IN_RXNNDT		0x00000020	/* rx no new data timeout */
#define	C_IN_MDCD		0x00000100	/* modem DCD change */
#define	C_IN_MDSR		0x00000200	/* modem DSR change */
#define	C_IN_MRI		0x00000400	/* modem RI change */
#define	C_IN_MCTS		0x00000800	/* modem CTS change */
#define	C_IN_RXBRK		0x00001000	/* Break received */
#define	C_IN_PR_ERROR	0x00002000	/* parity error */
#define	C_IN_FR_ERROR	0x00004000	/* frame error */
#define C_IN_OVR_ERROR	0x00008000	/* overrun error */
#define C_IN_RXOFL		0x00010000	/* RX buffer overflow */
#define C_IN_IOCTLW		0x00020000	/* I/O control w/ wait */
#define	C_IN_MRTS		0x00040000	/* modem RTS drop */
#define	C_IN_ICHAR		0x00080000	/* special intr. char received */

/* flow control */

#define	C_FL_OXX		0x00000001	/* output Xon/Xoff flow control */
#define	C_FL_IXX		0x00000002	/* input Xon/Xoff flow control */
#define C_FL_OIXANY		0x00000004	/* output Xon/Xoff (any xon) */
#define	C_FL_SWFLOW		0x0000000f

/* flow status */

#define	C_FS_TXIDLE		0x00000000	/* no Tx data in the buffer or UART */
#define	C_FS_SENDING	0x00000001	/* UART is sending data */
#define	C_FS_SWFLOW		0x00000002	/* Tx is stopped by received Xoff */

/* rs_control/rs_status RS-232 signals */

#define	C_RS_PARAM		0x80000000	/* Indicates presence of parameter in
									   IOCTLM command */
#define	C_RS_RTS		0x00000001	/* RTS */
#define	C_RS_DTR		0x00000004	/* DTR */
#define	C_RS_DCD		0x00000100	/* CD */
#define	C_RS_DSR		0x00000200	/* DSR */
#define	C_RS_RI			0x00000400	/* RI */
#define	C_RS_CTS		0x00000800	/* CTS */

/* commands Host <-> Board */

#define	C_CM_RESET		0x01		/* resets/flushes buffers */
#define	C_CM_IOCTL		0x02		/* re-reads CH_CTRL */
#define	C_CM_IOCTLW		0x03		/* re-reads CH_CTRL, intr when done */
#define	C_CM_IOCTLM		0x04		/* RS-232 outputs change */
#define	C_CM_SENDXOFF	0x10		/* sends Xoff */
#define	C_CM_SENDXON	0x11		/* sends Xon */
#define C_CM_CLFLOW		0x12		/* Clears flow control (resume) */
#define	C_CM_SENDBRK	0x41		/* sends break */
#define	C_CM_INTBACK	0x42		/* Interrupt back */
#define	C_CM_SET_BREAK	0x43		/* Tx break on */
#define	C_CM_CLR_BREAK	0x44		/* Tx break off */
#define	C_CM_CMD_DONE	0x45		/* Previous command done */
#define	C_CM_INTBACK2	0x46		/* Alternate Interrupt back */
#define	C_CM_TINACT		0x51		/* sets inactivity detection */
#define	C_CM_IRQ_ENBL	0x52		/* enables generation of interrupts */
#define	C_CM_IRQ_DSBL	0x53		/* disables generation of interrupts */
#define	C_CM_ACK_ENBL	0x54		/* enables acknolowdged interrupt mode */
#define	C_CM_ACK_DSBL	0x55		/* disables acknolowdged intr mode */
#define	C_CM_FLUSH_RX	0x56		/* flushes Rx buffer */
#define	C_CM_FLUSH_TX	0x57		/* flushes Tx buffer */
#define	C_CM_Q_ENABLE	0x58		/* enables queue access from the driver */
#define	C_CM_Q_DISABLE	0x59		/* disables queue access from the driver */

#define	C_CM_TXBEMPTY	0x60		/* Tx buffer is empty */
#define	C_CM_TXLOWWM	0x61		/* Tx buffer low water mark */
#define	C_CM_RXHIWM		0x62		/* Rx buffer high water mark */
#define	C_CM_RXNNDT		0x63		/* rx no new data timeout */
#define	C_CM_TXFEMPTY	0x64		/* Tx buffer, FIFO and shift reg. are empty */
#define	C_CM_ICHAR		0x65		/* Special Interrupt Character received */
#define	C_CM_MDCD		0x70		/* modem DCD change */
#define	C_CM_MDSR		0x71		/* modem DSR change */
#define	C_CM_MRI		0x72		/* modem RI change */
#define	C_CM_MCTS		0x73		/* modem CTS change */
#define	C_CM_MRTS		0x74		/* modem RTS drop */
#define	C_CM_RXBRK		0x84		/* Break received */
#define	C_CM_PR_ERROR	0x85		/* Parity error */
#define	C_CM_FR_ERROR	0x86		/* Frame error */
#define C_CM_OVR_ERROR	0x87		/* Overrun error */
#define	C_CM_RXOFL		0x88		/* RX buffer overflow */
#define	C_CM_CMDERROR	0x90		/* command error */
#define	C_CM_FATAL		0x91		/* fatal error */
#define	C_CM_HW_RESET	0x92		/* reset board */

/*
 *	CH_CTRL - This per port structure contains all parameters
 *	that control an specific port. It can be seen as the
 *	configuration registers of a "super-serial-controller".
 */

struct CH_CTRL {
	uclong	op_mode;		/* operation mode */
	uclong	intr_enable;	/* interrupt masking for the UART */
	uclong	sw_flow;		/* SW flow control */
	uclong	flow_status;	/* output flow status */
	uclong	comm_baud;		/* baud rate  - numerically specified */
	uclong	comm_parity;	/* parity */
	uclong	comm_data_l;	/* data length/stop */
	uclong	comm_flags;		/* other flags */
	uclong	hw_flow;		/* HW flow control */
	uclong	rs_control;		/* RS-232 outputs */
	uclong	rs_status;		/* RS-232 inputs */
	uclong	flow_xon;		/* xon char */
	uclong	flow_xoff;		/* xoff char */
	uclong	hw_overflow;	/* hw overflow counter */
	uclong	sw_overflow;	/* sw overflow counter */
	uclong	comm_error;		/* frame/parity error counter */
 	uclong	ichar;			/* special interrupt char */
	uclong	filler[7];		/* filler to align structures */
};


/*
 *	BUF_CTRL - This per channel structure contains
 *	all Tx and Rx buffer control for a given channel.
 */

struct	BUF_CTRL	{
	uclong	flag_dma;	/* buffers are in Host memory */
	uclong	tx_bufaddr;	/* address of the tx buffer */
	uclong	tx_bufsize;	/* tx buffer size */
	uclong	tx_threshold;	/* tx low water mark */
	uclong	tx_get;		/* tail index tx buf */
	uclong	tx_put;		/* head index tx buf */
	uclong	rx_bufaddr;	/* address of the rx buffer */
	uclong	rx_bufsize;	/* rx buffer size */
	uclong	rx_threshold;	/* rx high water mark */
	uclong	rx_get;		/* tail index rx buf */
	uclong	rx_put;		/* head index rx buf */
	uclong	filler[5];	/* filler to align structures */
};

/*
 *	BOARD_CTRL - This per board structure contains all global 
 *	control fields related to the board.
 */

struct BOARD_CTRL {

	/* static info provided by the on-board CPU */
	uclong	n_channel;	/* number of channels */
	uclong	fw_version;	/* firmware version */

	/* static info provided by the driver */
	uclong	op_system;	/* op_system id */
	uclong	dr_version;	/* driver version */

	/* board control area */
	uclong	inactivity;	/* inactivity control */

	/* host to FW commands */
	uclong	hcmd_channel;	/* channel number */
	uclong	hcmd_param;		/* parameter */

	/* FW to Host commands */
	uclong	fwcmd_channel;	/* channel number */
	uclong	fwcmd_param;	/* parameter */
	uclong  zf_int_queue_addr; /* offset for INT_QUEUE structure */

	/* filler so the structures are aligned */
	uclong	filler[6];
};

/* Host Interrupt Queue */

#define	QUEUE_SIZE	(10*MAX_CHAN)

struct	INT_QUEUE {
	unsigned char	intr_code[QUEUE_SIZE];
	unsigned long	channel[QUEUE_SIZE];
	unsigned long	param[QUEUE_SIZE];
	unsigned long	put;
	unsigned long	get;
};

/*
 *	ZFW_CTRL - This is the data structure that includes all other
 *	data structures used by the Firmware.
 */
 
struct ZFW_CTRL {
	struct BOARD_CTRL	board_ctrl;
	struct CH_CTRL		ch_ctrl[MAX_CHAN];
	struct BUF_CTRL		buf_ctrl[MAX_CHAN];
};


=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyzcoins\cyzcoins.c ===
/** FILE: cyzcoins.c ********** Module Header ********************************
 *
 *  Cyclades-Z device co-installer.
 *
 *
 *  Copyright (C) 2000 Cyclades Corporation
 *
 *************************************************************************/
//==========================================================================
//                                Include files
//==========================================================================
// C Runtime
#include <stddef.h>
#include <stdlib.h>
#include <string.h>

// Device Class GUID
#include <initguid.h>
#include <devguid.h>


// Application specific
#include "cyzports.h"
#include <msports.h>
#include "cyzdel.h"


//==========================================================================
//                                Globals
//==========================================================================

HANDLE  g_hInst  = NULL;

TCHAR g_szErrMem[ 200 ];            //  Low memory message
TCHAR g_szPortsApplet[ 30 ];        //  "Ports Control Panel Applet" title
TCHAR g_szNull[]  = TEXT("");       //  Null string

TCHAR  m_szColon[]      = TEXT( ":" );
TCHAR  m_szPorts[]      = TEXT( "Ports" );
TCHAR  m_szCOM[]        = TEXT( "COM" );

//
//  NT Registry keys to find COM port to Serial Device mapping
//
TCHAR m_szRegSerialMap[]    = TEXT( "Hardware\\DeviceMap\\SerialComm" );

//
//  Registry Serial Port Advanced I/O settings key and valuenames
//
TCHAR m_szPortName[]        = REGSTR_VAL_PORTNAME;

TCHAR m_szDefParams[]       = TEXT( "9600,n,8,1" );



//==========================================================================
//                            Local Function Prototypes
//==========================================================================

LPTSTR GetDIFString(IN DI_FUNCTION Func);

DWORD
CreateFriendlyName(
    IN     HDEVINFO          DeviceInfoSet,
    IN     PSP_DEVINFO_DATA  DeviceInfoData
);

//==========================================================================
//                                Dll Entry Point
//==========================================================================

BOOL APIENTRY LibMain( HANDLE hDll, DWORD dwReason, LPVOID lpReserved )
{

//#if DBG
//        OutputDebugString(TEXT("cyzcoins LibMain entry\n"));
//#endif
   
    switch( dwReason )
    {
    case DLL_PROCESS_ATTACH:
//#if DBG
//        OutputDebugString(TEXT("cyzcoins DLL_PROCESS_ATTACH\n"));
//#endif
        g_hInst = hDll;
        DisableThreadLibraryCalls(hDll);
        InitStrings();

        break;

    case DLL_PROCESS_DETACH:
//#if DBG
//        OutputDebugString(TEXT("cyzcoins DLL_PROCESS_DETACH\n"));
//#endif
        break;

    default:
//#if DBG
//        OutputDebugString(TEXT("cyzcoins default\n"));
//#endif
        break;
    }

//#if DBG
//        OutputDebugString(TEXT("cyzcoins LibMain exit\n"));
//#endif
    return TRUE;
}


void InitStrings(void)
{
    DWORD  dwClass, dwShare;
    TCHAR  szClass[ 40 ];

    LoadString(g_hInst, 
               INITS,
               g_szErrMem,
               CharSizeOf(g_szErrMem));
    LoadString(g_hInst, 
               IDS_CYCLADZ,
               g_szPortsApplet,
               CharSizeOf(g_szPortsApplet));
}


//==========================================================================
//                                Functions
//==========================================================================


HRESULT
CycladzCoInstaller(
    IN DI_FUNCTION      InstallFunction,
    IN HDEVINFO         DeviceInfoSet,
    IN PSP_DEVINFO_DATA DeviceInfoData OPTIONAL,
    IN OUT PCOINSTALLER_CONTEXT_DATA    Context
)
/*++

Routine Description:

    This routine is a Co-Installer for the Cyclades-Z device.

Arguments:

    InstallFunction - Specifies the device installer function code indicating
        the action being performed.

    DeviceInfoSet - Supplies a handle to the device information set being
        acted upon by this install action.

    DeviceInfoData - Optionally, supplies the address of a device information
        element being acted upon by this install action.

    Context - Points to a coinstaller-specific context structure for this 
        installation request. 

Return Value:

    If this function successfully completed the requested action, the return
        value is NO_ERROR.

    If an error occurred while attempting to perform the requested action, a
        Win32 error code is returned.

--*/
{
    DWORD   Status = NO_ERROR;

    //#if DBG
    //{
    // TCHAR buf[500];
    // wsprintf(buf, TEXT("CycladzCoInstaller:InstallFunction(%s) PostProcessing:%d\n"), GetDIFString(InstallFunction), Context->PostProcessing);
    // DbgOut(buf);
    //}
    //#endif

    switch(InstallFunction) {
        case DIF_INSTALLDEVICE :

            //
            // We should not copy any INF files until the install has completed
            // like the primary INF, all secondary INF's must exist on each disk
            // of a multi-disk install.
            //

            if(!Context->PostProcessing){

                DeleteNonPresentDevices();

                Status = ERROR_DI_POSTPROCESSING_REQUIRED;
            } else { 
                // post processing

                //
                // if driver installation failed, we're not interested
                // in processing CopyINF entries.
                //
                if (Context->InstallResult != NO_ERROR) {
                    DbgOut(TEXT("DIF_INSTALLDEVICE PostProcessing on failure"));
                    Status = Context->InstallResult;
                    break;
                }

                CreateFriendlyName(DeviceInfoSet,DeviceInfoData);
            }
            break;

        case DIF_REMOVE:    

            GetParentIdAndRemoveChildren(DeviceInfoData);
            
            break;

        default :
            break;
    }
    return Status;
}


LPTSTR GetDIFString(IN DI_FUNCTION Func)
/*++

Routine Description:

    Given a DI_FUNCTION value, returns a text representation.

Arguments:

    Func - DI_FUNCTON value

Return Value:

    Text string if value is known.  Hex representation if not.

--*/
{
    static TCHAR buf[32];
#define MakeCase(d)  case d: return TEXT(#d)
    switch (Func)
    {
        MakeCase(DIF_SELECTDEVICE);
        MakeCase(DIF_INSTALLDEVICE);
        MakeCase(DIF_ASSIGNRESOURCES);
        MakeCase(DIF_PROPERTIES);
        MakeCase(DIF_REMOVE);
        MakeCase(DIF_FIRSTTIMESETUP);
        MakeCase(DIF_FOUNDDEVICE);
        MakeCase(DIF_SELECTCLASSDRIVERS);
        MakeCase(DIF_VALIDATECLASSDRIVERS);
        MakeCase(DIF_INSTALLCLASSDRIVERS);
        MakeCase(DIF_CALCDISKSPACE);
        MakeCase(DIF_DESTROYPRIVATEDATA);
        MakeCase(DIF_VALIDATEDRIVER);
        MakeCase(DIF_MOVEDEVICE);
        MakeCase(DIF_DETECT);
        MakeCase(DIF_INSTALLWIZARD);
        MakeCase(DIF_DESTROYWIZARDDATA);
        MakeCase(DIF_PROPERTYCHANGE);
        MakeCase(DIF_ENABLECLASS);
        MakeCase(DIF_DETECTVERIFY);
        MakeCase(DIF_INSTALLDEVICEFILES);
        MakeCase(DIF_UNREMOVE);
        MakeCase(DIF_SELECTBESTCOMPATDRV);
        MakeCase(DIF_ALLOW_INSTALL);
        MakeCase(DIF_REGISTERDEVICE);
        MakeCase(DIF_INSTALLINTERFACES);
        MakeCase(DIF_DETECTCANCEL);
        MakeCase(DIF_REGISTER_COINSTALLERS);
        MakeCase(DIF_NEWDEVICEWIZARD_FINISHINSTALL);
        MakeCase(DIF_ADDPROPERTYPAGE_ADVANCED);
        MakeCase(DIF_TROUBLESHOOTER);
        default:
            wsprintf(buf, TEXT("%x"), Func);
            return buf;
    }
}


DWORD
CreateFriendlyName(
    IN     HDEVINFO          DeviceInfoSet,
    IN     PSP_DEVINFO_DATA  DeviceInfoData
)
{   
    HDEVINFO multportInfoSet;
    SP_DEVINFO_DATA multportInfoData;
    TCHAR   charBuffer[MAX_PATH],
            friendlyName[LINE_LEN],
            deviceDesc[LINE_LEN],
            myDeviceDesc[LINE_LEN];
    TCHAR * pBoardNumber;
#define MAX_BOARDS 10
    BYTE    used[MAX_BOARDS];
    DWORD i;
    DWORD retStatus = NO_ERROR;
    DWORD tmpBoardNumber = 0;

    //DbgOut(TEXT("CreateFriendlyName\n"));

    for (i=0; i<MAX_BOARDS; i++) {
        used[i]=FALSE;
    }

    if (!SetupDiGetDeviceRegistryProperty(DeviceInfoSet,
                                          DeviceInfoData,
                                          SPDRP_DEVICEDESC,
                                          NULL,
                                          (PBYTE)myDeviceDesc,
                                          sizeof(myDeviceDesc),
                                          NULL)) {
        #if DBG
        {
         TCHAR buf[500];
         wsprintf(buf, TEXT("Device Description failed with %x\n"), GetLastError());
         DbgOut(buf);
        }
        #endif
        return retStatus;
    }

    //#if DBG
    //{
    // TCHAR buf[500];
    // wsprintf(buf, TEXT("myDeviceDesc %s\n"), myDeviceDesc);
    // DbgOut(buf);
    //}
    //#endif

    multportInfoSet = SetupDiGetClassDevs(&GUID_DEVCLASS_MULTIPORTSERIAL,NULL,0,0);
    if (multportInfoSet == INVALID_HANDLE_VALUE) {
        // If failure, we will continue installation without creating Friendly Name.
        return retStatus;
    }
    multportInfoData.cbSize = sizeof(SP_DEVINFO_DATA);
    for (i=0; SetupDiEnumDeviceInfo(multportInfoSet,i,&multportInfoData);i++) {
        if (SetupDiGetDeviceRegistryProperty(multportInfoSet,
                                             &multportInfoData,
                                             SPDRP_DEVICEDESC,
                                             NULL,
                                             (PBYTE)deviceDesc,
                                             sizeof(deviceDesc),
                                             NULL)) {
            
            if ((multportInfoData.DevInst != DeviceInfoData->DevInst) &&
                _tcscmp (deviceDesc,myDeviceDesc) == 0){

                // Another board with same device description found.

                if (SetupDiGetDeviceRegistryProperty(multportInfoSet,
                                                     &multportInfoData,
                                                     SPDRP_FRIENDLYNAME,
                                                     NULL,
                                                     (PBYTE)friendlyName,
                                                     sizeof(friendlyName),
                                                     NULL)) {
                    
                    pBoardNumber = _tcschr(friendlyName,'#');
                    if (pBoardNumber == NULL) {
                        used[0] = TRUE;
                        continue;
                    }
                    if ((pBoardNumber +1) == NULL) {
                        continue;
                    }
                    tmpBoardNumber = MyAtoi(pBoardNumber+1);
                    if ((tmpBoardNumber > 0) && (tmpBoardNumber < MAX_BOARDS)) {
                        used[tmpBoardNumber] = TRUE;
                    }
                } 
            }
            
        }

        multportInfoData.cbSize = sizeof(SP_DEVINFO_DATA);
    }

    SetupDiDestroyDeviceInfoList(multportInfoSet);

    if (used[0]==TRUE) {
        for (i=2; i<MAX_BOARDS; i++) {
            if (used[i] == FALSE) {
                break;
            }
        }
        if (i<MAX_BOARDS) {
            wsprintf(charBuffer, TEXT("%s #%d "), myDeviceDesc, i);
            // Write the string friendly name string out
            SetupDiSetDeviceRegistryProperty(DeviceInfoSet,
                                             DeviceInfoData,
                                             SPDRP_FRIENDLYNAME,
                                             (PBYTE)charBuffer,
                                             ByteCountOf(lstrlen(charBuffer) + 1)
                                             );

        }
    } else {
        wsprintf(charBuffer, TEXT("%s "), myDeviceDesc);
        // Write the string friendly name string out
        SetupDiSetDeviceRegistryProperty(DeviceInfoSet,
                                         DeviceInfoData,
                                         SPDRP_FRIENDLYNAME,
                                         (PBYTE)charBuffer,
                                         ByteCountOf(lstrlen(charBuffer) + 1)
                                         );
    }

    return retStatus;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyzcoins\cyzdel.h ===
/** FILE: cyzdel.h********* Module Header ********************************
 *
 *  Header for cyzdel module.
 * 
 *
 *  Copyright (C) 2000 Cyclades Corporation
 *
 *************************************************************************/

#ifndef CYZDEL_H
#define CYZDEL_H


//==========================================================================
//                            Function Prototypes
//==========================================================================


void
DeleteNonPresentDevices(
);

DWORD
GetParentIdAndRemoveChildren(
    IN PSP_DEVINFO_DATA DeviceInfoData
);


#endif // CYZDEL_H
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyzcoins\cyzdel.c ===
/** FILE: cyzdel.c *******************************************************
 *
 *  This module is used by cyzcoins.dll and zinfdelete.exe.
 *  Please re-generate both files when cyzdel.c is changed.
 *
 *  Copyright (C) 2000 Cyclades Corporation
 *
 *************************************************************************/

//==========================================================================
//                                Include files
//==========================================================================
// C Runtime
#include <stddef.h>
#include <stdlib.h>
#include <string.h>
//#include <stdio.h> Used with .exe

// Device Class GUID
#include <initguid.h>
#include <devguid.h>


// Application specific
#include <windows.h>  
#include <tchar.h> // Make all functions UNICODE safe.
#include <cfgmgr32.h>
#include <setupapi.h> // for SetupDiXxx functions.
#include <regstr.h>
#include "cyzdel.h"
//#include "zinfdelete.h" Used with .exe


//==========================================================================
//                              Macros
//==========================================================================

#define CharSizeOf(x)   (sizeof(x) / sizeof(*x))
#define ByteCountOf(x)  ((x) * sizeof(TCHAR))

#if DBG
#define DbgOut(Text) OutputDebugString(Text)
#else
#define DbgOut(Text) 
#endif 

//==========================================================================
//                                Globals
//==========================================================================

TCHAR z_szCycladzEnumerator[] = TEXT("Cyclades-Z");
TCHAR z_szParentIdPrefix[]  = TEXT("ParentIdPrefix");

//==========================================================================
//                            Local Function Prototypes
//==========================================================================

BOOL
IsItCycladz(
    PTCHAR ptrChar
);

DWORD
RemoveMyChildren(
    PTCHAR ParentIdPrefix
);


//==========================================================================
//                                Functions
//==========================================================================

void
DeleteNonPresentDevices(
)
{
    HDEVINFO MultiportInfoSet, PresentInfoSet;
    SP_DEVINFO_DATA MultiportInfoData, PresentInfoData;
    DWORD i,j;
    DWORD bufType,bufSize;
    DWORD present;
    TCHAR bufChar[256];

    MultiportInfoSet = SetupDiGetClassDevs(&GUID_DEVCLASS_MULTIPORTSERIAL,
                                           0,
                                           0, 
                                           0 ); // All devices, even non present
    if (MultiportInfoSet == INVALID_HANDLE_VALUE) {
        return;
    }

    MultiportInfoData.cbSize = sizeof(SP_DEVINFO_DATA);
    for (i=0;SetupDiEnumDeviceInfo(MultiportInfoSet,i,&MultiportInfoData);i++){
        if (SetupDiGetDeviceRegistryProperty(MultiportInfoSet,
                                             &MultiportInfoData,
                                             SPDRP_HARDWAREID, //SPDRP_SERVICE,
                                             &bufType,
                                             (PBYTE) bufChar,
                                             sizeof(bufChar),
                                             NULL)) {
            if (bufType != REG_MULTI_SZ) {
                continue;
            }

            if (!IsItCycladz(bufChar)) {
                continue;
            }

            // Verify if this cyclad-z is present.
            PresentInfoSet = SetupDiGetClassDevs(&GUID_DEVCLASS_MULTIPORTSERIAL,
                                                 0,
                                                 0, 
                                                 DIGCF_PRESENT ); 
            if (PresentInfoSet == INVALID_HANDLE_VALUE) {
                continue;
            }

            present = FALSE;
            PresentInfoData.cbSize = sizeof(SP_DEVINFO_DATA);
            for (j=0;SetupDiEnumDeviceInfo(PresentInfoSet,j,&PresentInfoData);j++) {
                if (MultiportInfoData.DevInst == PresentInfoData.DevInst) {
                    present = TRUE;
                    break;
                }
            }
            if (GetLastError() == ERROR_NO_MORE_ITEMS) {
                if (!present) {
                    //#if DBG
                    //TCHAR   myDevInstId[200];
                    //DWORD   err;
                    //err = CM_Get_Device_ID(MultiportInfoData.DevInst,myDevInstId,
                    //                       sizeof(myDevInstId),0);
                    //if (err==CR_SUCCESS) {
                    //    TCHAR buf[500];
                    //    wsprintf(buf, TEXT("Delete %s\n"), myDevInstId);    
                    //    DbgOut(buf);
                    //}
                    //#endif
                    GetParentIdAndRemoveChildren(&MultiportInfoData);
                    SetupDiCallClassInstaller(DIF_REMOVE,MultiportInfoSet,&MultiportInfoData);
                }
            }

            SetupDiDestroyDeviceInfoList(PresentInfoSet);

        }

    }
    SetupDiDestroyDeviceInfoList(MultiportInfoSet);
}

BOOL
IsItCycladz(
    PTCHAR ptrChar
)
{

    while (*ptrChar) {
        //_tprintf("%s\n", ptrChar);
        if (_tcsnicmp(ptrChar,
                      TEXT("PCI\\VEN_120E&DEV_020"),
                      _tcslen(TEXT("PCI\\VEN_120E&DEV_020")))
             == 0) {
            return TRUE;
        }
        ptrChar = ptrChar + _tcslen(ptrChar) + 1;
    }
    return FALSE;
}

DWORD
GetParentIdAndRemoveChildren(
    IN PSP_DEVINFO_DATA DeviceInfoData
)
{
    DWORD   dwSize;
    TCHAR   instanceId[MAX_DEVICE_ID_LEN];
    TCHAR   parentIdPrefix[50];
    HKEY    enumKey,instKey;
    BOOL    gotParentIdPrefix;
    DWORD   Status = NO_ERROR;

    if (CM_Get_Device_ID(DeviceInfoData->DevInst,instanceId,CharSizeOf(instanceId),0) ==
        CR_SUCCESS) {

        gotParentIdPrefix = FALSE;
        // Open Registry and retrieve ParentIdPrefix value
        if (RegOpenKeyEx(HKEY_LOCAL_MACHINE, REGSTR_PATH_SYSTEMENUM,0,KEY_READ, 
            &enumKey) == ERROR_SUCCESS) {

            if (RegOpenKeyEx(enumKey,instanceId,0,KEY_READ,&instKey) == ERROR_SUCCESS) {
                
                dwSize = sizeof(parentIdPrefix);
                if (RegQueryValueEx(instKey,z_szParentIdPrefix,NULL,NULL,
                    (PBYTE)parentIdPrefix,&dwSize) == ERROR_SUCCESS) {
                    _tcsupr(parentIdPrefix);
                    gotParentIdPrefix = TRUE;
                            
                }
                RegCloseKey(instKey);
            }
            RegCloseKey(enumKey);
        }
        if (gotParentIdPrefix) {
            Status = RemoveMyChildren(parentIdPrefix);
        }
    }
    return Status;
}


DWORD
RemoveMyChildren(
    PTCHAR ParentIdPrefix
)
{
    HDEVINFO DeviceInfoSet;
    SP_DEVINFO_DATA DeviceInfoData;
    DWORD i,err;
    TCHAR portId[MAX_DEVICE_ID_LEN];
    PTCHAR ptrParent;

    DeviceInfoSet = SetupDiGetClassDevs( &GUID_DEVCLASS_PORTS,z_szCycladzEnumerator,0,0 ); 
    if (DeviceInfoSet == INVALID_HANDLE_VALUE)
    {
        return GetLastError();
    }

    DeviceInfoData.cbSize = sizeof(SP_DEVINFO_DATA);
    for (i=0;SetupDiEnumDeviceInfo(DeviceInfoSet,i,&DeviceInfoData);i++)
    {
        if (CM_Get_Device_ID(DeviceInfoData.DevInst,portId,CharSizeOf(portId),0)
            == CR_SUCCESS) {

            // BUG? For ParentIdPrefix "3&2b41c2e&1f" (12 characters), _tcscspn 
            // always returns 0!! Using _tcsstr instead.
            //position = _tcscspn(portId,ParentIdPrefix);

            ptrParent = _tcsstr(portId,ParentIdPrefix);
            if (ptrParent) {

                if (_tcsnicmp (ptrParent,ParentIdPrefix,_tcslen(ParentIdPrefix))
                    == 0){
                    //
                    // Worker function to remove device.
                    //
                    //#if DBG
                    //{
                    // TCHAR buf[500];
                    // wsprintf(buf, TEXT("Delete %s\n"), portId);    
                    // DbgOut(buf);
                    //}
                    //#endif

                    SetupDiCallClassInstaller(DIF_REMOVE,DeviceInfoSet,&DeviceInfoData);
                }

            }

        }
        DeviceInfoData.cbSize = sizeof(SP_DEVINFO_DATA);
    }
    SetupDiDestroyDeviceInfoList(DeviceInfoSet);
    return NO_ERROR;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyzcoins\cyzhelp.h ===
// Used by cyzcoins.dll, cyzports.dll and cyzcoins.chm.

#define IDH_CYZCOINS_NOHELP                     1
#define IDH_CYZCOINS_NUM_PORTS                  2
#define IDH_CYZCOINS_START_COM                  3
#define IDH_CYZCOINS_RESTORE_DEFAULTS           4
#define IDH_CYZCOINS_PORTSET_ADV_NUMBER         5
#define IDH_CYZCOINS_PORTSET_ADV_DEFAULTS       6
#define IDH_CYZCOINS_PORTSET_ADV_PPP_AWARE      7
#define IDH_CYZCOINS_PORTSET_ADV_WRITE_COMPLETE 8
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyzcoins\cyzports.h ===
/** FILE: cyzports.h ********* Module Header ********************************
 *
 *  Control Panel System applet common definitions, resource ids, typedefs,
 *  external declarations and library routine function prototypes.
 *
 * History:
 *
 *
 *  Copyright (C) 2000 Cyclades Corporation
 *
 *************************************************************************/
//==========================================================================
//                            Include Files
//==========================================================================

#ifndef PORTS_H
#define PORTS_H

#include <windows.h>
#include <tchar.h>
#include <cfgmgr32.h>
#include <setupapi.h>
#include <regstr.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <malloc.h>
#include "resource.h"

#include "portstr.h"

#define PORTS        4
#define MAXPORTS    32
#define KEYBZ       4096
#define BUFFER_SIZE 81

#define DEF_BAUD    3       //  1200
#define DEF_WORD    4       //  8 bits
#define DEF_PARITY  2       //  None
#define DEF_STOP    0       //  1
#define DEF_PORT    0       //  Null Port
#define DEF_SHAKE   2       //  None
#define PAR_EVEN    0
#define PAR_ODD     1
#define PAR_NONE    2
#define PAR_MARK    3
#define PAR_SPACE   4
#define STOP_1      0
#define STOP_15     1
#define STOP_2      2
#define FLOW_XON    0
#define FLOW_HARD   1
#define FLOW_NONE   2

//#define MAX_COM_PORT  COMDB_MIN_PORTS_ARBITRATED   // Maximum number of COM ports NT supports
#define MAX_COM_PORT  2048                         // We should support at least 1024 ports.
#define MIN_COM       1                            // Minimum new COM port number

#define POLL_PERIOD_DEFAULT_IDX 1 

//==========================================================================
//                        Definitions
//==========================================================================

//
//  General definitions
//

#define PATHMAX             MAX_PATH


//
//  Help IDs -- for the Ports applet
//
//
#define IDH_HELPFIRST        5000
#define IDH_SYSMENU     (IDH_HELPFIRST + 2000)
#define IDH_MBFIRST     (IDH_HELPFIRST + 2001)
#define IDH_MBLAST      (IDH_HELPFIRST + 2099)
#define IDH_DLGFIRST    (IDH_HELPFIRST + 3000)

#define IDH_MENU_SCHHELP    (IDH_HELPFIRST + MENU_SCHHELP)
#define IDH_MENU_INDHELP    (IDH_HELPFIRST + MENU_INDHELP)
#define IDH_MENU_USEHELP    (IDH_HELPFIRST + MENU_USEHELP)
#define IDH_MENU_ABOUT      (IDH_HELPFIRST + MENU_ABOUT )
#define IDH_MENU_EXIT       (IDH_HELPFIRST + MENU_EXIT)
#define IDH_CHILD_PORTS     (IDH_HELPFIRST + 4 /* CHILD_PORTS */ )
#define IDH_DLG_PORTS2      (IDH_DLGFIRST + DLG_PORTS2)
#define IDH_DLG_PORTS3      (IDH_DLGFIRST + DLG_PORTS3)

//==========================================================================
//                           Typedefs
//==========================================================================
typedef struct {
    SP_DEVINFO_DATA  DeviceInfoData;

    TCHAR ComName[20];
    TCHAR Settings[20];
    
    ULONG BaseAddress;
} PORT_INFO, *PPORT_INFO;

typedef struct _PORTS_WIZARD_DATA {

    HDEVINFO          DeviceInfoSet;
    PSP_DEVINFO_DATA  pDeviceInfoData;

    ULONG BaseAddress;
    ULONG FirstComNumber;

    ULONG PortsCount;
    PPORT_INFO Ports;

    PUINT UsedComNumbers;
    UINT UsedComNumbersCount;

    BOOL IsMulti;
} PORTS_WIZARD_DATA, *PPORTS_WIZARD_DATA;


//==========================================================================
//                              Macros
//==========================================================================

#define CharSizeOf(x)   (sizeof(x) / sizeof(*x))
#define ByteCountOf(x)  ((x) * sizeof(TCHAR))

#if DBG
#define DbgOut(Text) OutputDebugString(Text)
#else
#define DbgOut(Text) 
#endif 

//==========================================================================
//                         External Declarations
//==========================================================================
//
//  DATA


//
//  exported from cpl.c
//

extern HANDLE g_hInst;
extern TCHAR  g_szErrMem[ ];        //  Low memory message
extern TCHAR  g_szPortsApplet[ ];   //  "Ports Control Panel Applet" title
extern TCHAR  g_szNull[];           //  Null string

extern DWORD PollingPeriods[];

extern TCHAR  m_szPorts[];
extern TCHAR  m_szPortName[];

//==========================================================================
//                            Function Prototypes
//==========================================================================

//
//  LibMain module
//

extern 
VOID
InitStrings(void);


//
//  cyfriend.c
//

extern
BOOL
ReplaceFriendlyName(
    IN HDEVINFO         DeviceInfoSet,
    IN PSP_DEVINFO_DATA DeviceInfoData,
    IN PTCHAR           NewComName
);


//
//  util.c
//

extern 
LPTSTR 
BackslashTerm(LPTSTR pszPath);

extern 
VOID 
ErrMemDlg(HWND hParent);

extern 
int    
MyAtoi(LPTSTR  string);

extern 
int    
myatoi(LPTSTR pszInt);

extern 
int    
MyMessageBox(HWND hWnd, 
                         DWORD wText, 
                         DWORD wCaption, 
                         DWORD wType, 
                         ...);

extern
int
MyMessageBoxWithErr(
    HWND hWnd, 
	DWORD wText, 
	DWORD wCaption, 
	DWORD wType,
    DWORD wError
    );

extern 
LPTSTR 
MyItoa(INT value, 
           LPTSTR  string, 
           INT  radix);

extern 
LPTSTR 
MyUltoa(unsigned long  value, 
                LPTSTR  string, 
                INT  radix);

extern 
VOID   
SendWinIniChange(LPTSTR szSection);

extern 
LPTSTR 
strscan(LPTSTR pszString, 
                LPTSTR pszTarget);

extern 
VOID
StripBlanks(LPTSTR pszString);


#endif // PORTS_H
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyzcoins\resource.h ===
//{{NO_DEPENDENCIES}}
// Microsoft Developer Studio generated include file.
// Used by cyzcoins.rc
//
#define INITS                           0
#define PORTS_ICON                      2
#define DLG_PP_PORTSETTINGS             15
#define IDS_FRIENDLY_FORMAT             29
#define IDS_IN_USE                      61
#define IDS_CYCLADZ                     80
#define IDS_NUM_PORTS_DISABLED          81
#define IDS_START_COM_DISABLED          82
#define IDS_COM_TOO_BIG_WRN             83
#define IDS_MEM_ALLOC_WRN               84
#define IDS_COM_TOO_BIG_ERR             85
#define IDS_MEM_ALLOC_ERR               86
#define IDS_INVALID_HCOMDB              87
#define IDS_START_COM_NOT_CHANGED       88
#define IDS_PORT_OPEN_ERROR             89
#define IDS_PORT_IN_USE_ERROR           90
#define IDS_PORT_RENAME_ERROR           91
#define PP_START_COM                    1038
#define IDC_START_COM                   1040
#define PP_NUM_PORTS                    1044
#define IDC_NUM_PORTS                   1045
#define IDC_RESTORE_DEFAULTS            1046
#define PP_BUS_TYPE                     1047
#define IDC_MODEL                       1052
#define PP_MODEL                        1053
#define IDC_CONFIGURATION               1054
#define PP_CONFIGURATION                1055
#define IDC_BUS_TYPE                    1056
#define IDC_STATIC                      -1

// Next default values for new objects
// 
#ifdef APSTUDIO_INVOKED
#ifndef APSTUDIO_READONLY_SYMBOLS
#define _APS_NO_MFC                     1
#define _APS_NEXT_RESOURCE_VALUE        112
#define _APS_NEXT_COMMAND_VALUE         40001
#define _APS_NEXT_CONTROL_VALUE         1057
#define _APS_NEXT_SYMED_VALUE           101
#endif
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyzcoins\portstr.h ===
#ifndef PORTSTR_H
#define PORTSTR_H

//
//  exported from cyzcoins.c
//
extern TCHAR  m_szColon[];
extern TCHAR  m_szComma[];
extern TCHAR  m_szPorts[];
extern TCHAR  m_szCOM[];

extern TCHAR m_szRegSerialMap[];

extern TCHAR m_szPortName[];
extern TCHAR m_szDefParams[];

#endif // PORTSTR_H
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyzcoins\pp.h ===
#ifndef PP_H
#define PP_H

#define SERIAL_ADVANCED_SETTINGS
#include "msports.h"

#ifdef USE_P_TRACE_ERR
#define P_TRACE_ERR(_x) MessageBox( GetFocus(), TEXT(_x), TEXT("ports traceerr"), MB_OK | MB_ICONINFORMATION );
#define W_TRACE_ERR(_x) MessageBox( GetFocus(), _x, TEXT("ports traceerr"), MB_OK | MB_ICONINFORMATION );
#else
#define P_TRACE_ERR(_x)
#define W_TRACE_ERR(_x)
#endif

#define DO_COM_PORT_RENAMES

#define RX_MIN 1
#define RX_MAX 14
#define TX_MIN 1
#define TX_MAX 16

TCHAR m_szDevMgrHelp[];


//
// Structures
//

typedef struct _PORT_PARAMS
{
   HDEVINFO             DeviceInfoSet;
   PSP_DEVINFO_DATA     DeviceInfoData;
   HCOMDB               hComDB;     
   PBYTE                PortUsage;  
   DWORD                PortUsageSize; 
   BOOL                 ShowStartCom;  
   DWORD                NumChildren;   
   TCHAR                szComName[20]; 
} PORT_PARAMS, *PPORT_PARAMS;

typedef struct
{
   TCHAR            szComName[20];
   HDEVINFO         DeviceInfoSet;
   SP_DEVINFO_DATA  DeviceInfoData;
   HKEY             hDeviceKey;
   DWORD            NewComNum;
} CHILD_DATA, *PCHILD_DATA;

///////////////////////////////////////////////////////////////////////////////////
// Cyclades-Z Property Page Prototypes
///////////////////////////////////////////////////////////////////////////////////

void
InitOurPropParams(
    IN OUT PPORT_PARAMS     Params,
    IN HDEVINFO             DeviceInfoSet,
    IN PSP_DEVINFO_DATA     DeviceInfoData,
    IN PTCHAR               StrSettings
    );

HPROPSHEETPAGE
InitSettingsPage(
    PROPSHEETPAGE *      Psp,
    OUT PPORT_PARAMS    Params
    );

UINT CALLBACK
PortSettingsDlgCallback(
    HWND hwnd,
    UINT uMsg,
    LPPROPSHEETPAGE ppsp
    );

INT_PTR APIENTRY
PortSettingsDlgProc(
    IN HWND   hDlg,
    IN UINT   uMessage,
    IN WPARAM wParam,
    IN LPARAM lParam
    );

BOOL
SavePortSettings(
    IN HWND             DialogHwnd,
    IN PPORT_PARAMS     Params
    );

BOOL
SavePortSettingsDlg(
    IN HWND             DialogHwnd,
    IN PPORT_PARAMS     Params
    );

//Cyclades-Z
void
RestoreDefaults(
    HWND            DialogHwnd,
    PPORT_PARAMS    Params
    );

ULONG
FillNumberOfPortsText(
    IN HWND             DialogHwnd,
    IN PPORT_PARAMS     Params
    );

BOOL
FillStartComCb(
    HWND            ParentHwnd,
    PPORT_PARAMS    Params
    );

ULONG
GetPortName(
    IN  DEVINST PortInst,
    IN  OUT TCHAR *ComName,
    IN  ULONG   ComNameSize
    );

DWORD
CheckComRange(
    HWND            ParentHwnd,
    PPORT_PARAMS    Params,
    DWORD           nCom
    );
// Return codes for CheckComRange:
#define COM_RANGE_OK      0
#define COM_RANGE_TOO_BIG 1
#define COM_RANGE_MEM_ERR 2

BOOL
TryToOpen(
    IN PTCHAR szCom
    );

BOOL
NewComAvailable(
    IN PPORT_PARAMS Params,
    IN DWORD        NewComNum
    );

ULONG
GetPortData(
    IN  DEVINST PortInst,
    OUT PCHILD_DATA ChildPtr
    );

void
ClosePortData(
    IN PCHILD_DATA ChildPtr
    );

void
EnactComNameChanges(
    IN HWND             ParentHwnd,
    IN PPORT_PARAMS     Params,
    IN PCHILD_DATA      ChildPtr
    );


// Context help header file and arrays for devmgr ports tab
// Created 2/21/98 by WGruber NTUA and DoronH NTDEV

//
// "Port Settings" Dialog Box
//
#if 0
#define IDH_NOHELP      ((DWORD)-1)

#define IDH_DEVMGR_PORTSET_ADVANCED     15840   // "&Advanced" (Button)
#define IDH_DEVMGR_PORTSET_BPS      15841       // "" (ComboBox)
#define IDH_DEVMGR_PORTSET_DATABITS     15842   // "" (ComboBox)
#define IDH_DEVMGR_PORTSET_PARITY       15843   // "" (ComboBox)
#define IDH_DEVMGR_PORTSET_STOPBITS     15844   // "" (ComboBox)
#define IDH_DEVMGR_PORTSET_FLOW     15845       // "" (ComboBox)
#define IDH_DEVMGR_PORTSET_DEFAULTS     15892   // "&Restore Defaults" (Button)

//
// "Advanced Communications Port Properties" Dialog Box
//
#define IDH_DEVMGR_PORTSET_ADV_USEFIFO  16885   // "&Use FIFO buffers (requires 16550 compatible UART)" (Button)
#define IDH_DEVMGR_PORTSET_ADV_TRANS    16842   // "" (msctls_trackbar32)
#define IDH_DEVMGR_PORTSET_ADV_DEVICES  161027  // "" (ComboBox)
#define IDH_DEVMGR_PORTSET_ADV_RECV         16821       // "" (msctls_trackbar32)
#define IDH_DEVMGR_PORTSET_ADV_NUMBER   16846   // "" (ComboBox)
#define IDH_DEVMGR_PORTSET_ADV_DEFAULTS 16844

#endif

#include "cyzhelp.h"

#endif // PP_H
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyzcoins\util.c ===
/** FILE: util.c *********** Module Header ********************************
 *
 *  Ports applet utility library routines. This file contains string,
 *  cursor, SendWinIniChange() routines.
 *
 * History:
 *  15:30 on Thur  25 Apr 1991  -by-  Steve Cathcart   [stevecat]
 *        Took base code from Win 3.1 source
 *  10:30 on Tues  04 Feb 1992  -by-  Steve Cathcart   [stevecat]
 *        Updated code to latest Win 3.1 sources
 *  15:30 on Thur  03 May 1994  -by-  Steve Cathcart   [stevecat]
 *        Increased  MyMessageBox buffers, Restart dialog changes
 *  17:00 on Mon   18 Sep 1995  -by-  Steve Cathcart   [stevecat]
 *        Changes for product update - SUR release NT v4.0
 *  Nov 1997					-by-  Doron Holan	   [stevecat]
 *        Removed obsolete cpl code
 *
 *  Copyright (C) 1990-1995 Microsoft Corporation
 *
 *************************************************************************/
/* Notes -

    Global Functions:

      U T I L I T Y

        BackslashTerm () - add backslash char to path
        ErrMemDlg () - display Memory Error message box
        MyAtoi () - To convert from Unicode to ANSI string before calling atoi
        myatoi () - local implementation of atoi for Unicode strings
        MyItoa () - To convert from ANSI to Unicode string after calling itoa
        MyMessageBox () - display message to user, with parameters
        MyUltoa () - To convert from Unicode to ANSI string before calling ultoa
        SendWinIniChange () - broadcast system change message via USER
        strscan () - Find a string within another string
        StripBlanks () - Strip leading and trailing blanks from a string


    Local Functions:

 */

//==========================================================================
//                                Include files
//==========================================================================

// C Runtime
#include <stddef.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>

// Application specific
#include "cyzports.h"


#define INT_SIZE_LENGTH   20
#define LONG_SIZE_LENGTH  40


LPTSTR 
BackslashTerm(LPTSTR pszPath)
{
    LPTSTR pszEnd;

    pszEnd = pszPath + lstrlen(pszPath);

    //
    //  Get the end of the source directory
    //
    switch(*CharPrev(pszPath, pszEnd)) {
    case TEXT('\\'):
    case TEXT(':'):
        break;

    default:
        *pszEnd++ = TEXT('\\');
        *pszEnd = TEXT('\0');
    }

    return pszEnd;
}

void 
ErrMemDlg(HWND hParent)
{
    MessageBox(hParent, g_szErrMem, g_szPortsApplet,
               MB_OK | MB_ICONHAND | MB_SYSTEMMODAL );
}

///////////////////////////////////////////////////////////////////////////////
//
//   MyAtoi
//
//   Desc:  To convert from Unicode to ANSI string before
//          calling CRT atoi and atol functions.
//
///////////////////////////////////////////////////////////////////////////////

int 
MyAtoi(LPTSTR  string)
{
   CHAR   szAnsi[ INT_SIZE_LENGTH ];
   BOOL   fDefCharUsed;

#ifdef UNICODE
   WideCharToMultiByte(CP_ACP, 0, string, INT_SIZE_LENGTH,
                       szAnsi, INT_SIZE_LENGTH, NULL, &fDefCharUsed);

   return atoi(szAnsi);
#else
   return atoi(string);
#endif

}


int 
myatoi(LPTSTR pszInt)
{
    int   retval;
    TCHAR cSave;

    for (retval = 0; *pszInt; ++pszInt) {
        if ((cSave = (TCHAR) (*pszInt - TEXT('0'))) > (TCHAR) 9)
            break;

        retval = (int) (retval * 10 + (int) cSave);
    }
    return (retval);
}



///////////////////////////////////////////////////////////////////////////////
//
//   MyItoa
//
//   Desc:  To convert from ANSI to Unicode string after calling
//          CRT itoa function.
//
///////////////////////////////////////////////////////////////////////////////

LPTSTR 
MyItoa(INT value, LPTSTR string, INT radix)
{
   CHAR   szAnsi[INT_SIZE_LENGTH];

#ifdef UNICODE

   _itoa(value, szAnsi, radix);
   MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED, szAnsi, -1,
                       string, INT_SIZE_LENGTH );
#else

   _itoa(value, string, radix);

#endif

   return (string);
 
} // end of MyItoa()


LPTSTR 
MyUltoa(unsigned long value, 
		LPTSTR  string, 
		INT  radix)
{
   CHAR   szAnsi[ LONG_SIZE_LENGTH ];

#ifdef UNICODE

   _ultoa(value, szAnsi, radix);
   MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED, szAnsi, -1,
                       string, LONG_SIZE_LENGTH );
#else

   _ultoa(value, string, radix);

#endif

   return( string );

} // end of MyUltoa()


int 
MyMessageBox(HWND hWnd, 
			 DWORD wText, 
			 DWORD wCaption, 
			 DWORD wType, 
			 ...)
{
    TCHAR   szText[4 * PATHMAX], 
			szCaption[2 * PATHMAX];
    int     ival;
    va_list parg;

    va_start(parg, wType);

    if (wText == INITS)
        goto NoMem;

    if (!LoadString(g_hInst, wText, szCaption, CharSizeOf(szCaption)))
        goto NoMem;

    wvsprintf(szText, szCaption, parg);

    if (!LoadString(g_hInst, wCaption, szCaption, CharSizeOf(szCaption)))
        goto NoMem;

    if ((ival = MessageBox(hWnd, szText, szCaption, wType)) == 0)
        goto NoMem;

    va_end(parg);

    return ival;

NoMem:
    va_end(parg);
    ErrMemDlg(hWnd);

    return 0;
}

int
MyMessageBoxWithErr(
    HWND hWnd, 
	DWORD wText, 
	DWORD wCaption, 
	DWORD wType,
    DWORD wError
    )
{   
    int    ival;
    LPVOID lpMessageBuffer;

    FormatMessage( 
        FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM,
        NULL, 
        wError,  
        MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
        (LPTSTR) &lpMessageBuffer,  
        0,  
        NULL );

    ival = MyMessageBox(hWnd,wText,wCaption,wType,lpMessageBuffer);

    LocalFree( lpMessageBuffer ); // Free the buffer allocated by the system

    return ival;
}

void 
SendWinIniChange(LPTSTR lpSection)
{
// NOTE: We have (are) gone through several iterations of which USER
//       api is the correct one to use.  The main problem for the Control
//       Panel is to avoid being HUNG if another app (top-level window)
//       is HUNG.  Another problem is that we pass a pointer to a message
//       string in our address space.  SendMessage will 'thunk' this properly
//       for each window, but PostMessage and SendNotifyMessage will not.
//       That finally brings us to try to use SendMessageTimeout(). 9/21/92
//
// Try SendNotifyMessage in build 260 or later - kills earlier builds
//    SendNotifyMessage ((HWND)-1, WM_WININICHANGE, 0L, (LONG)lpSection);
//    PostMessage ((HWND)-1, WM_WININICHANGE, 0L, (LONG)lpSection);
//  [stevecat] 4/4/92
//
//    SendMessage ((HWND)-1, WM_WININICHANGE, 0L, (LPARAM)lpSection);
//
    //  NOTE: The final parameter (LPDWORD lpdwResult) must be NULL

    SendMessageTimeout((HWND)-1, 
					   WM_WININICHANGE, 
					   0L, 
					   (WPARAM) lpSection,
					   SMTO_ABORTIFHUNG,
					   1000, 
					   NULL);
}

LPTSTR 
strscan(LPTSTR pszString, 
		LPTSTR pszTarget)
{
    LPTSTR psz;

    if (psz = _tcsstr( pszString, pszTarget))
        return (psz);
    else
        return (pszString + lstrlen(pszString));
}


///////////////////////////////////////////////////////////////////////////////
//
//  StripBlanks()
//
//   Strips leading and trailing blanks from a string.
//   Alters the memory where the string sits.
//
///////////////////////////////////////////////////////////////////////////////

void 
StripBlanks(LPTSTR pszString)
{
    LPTSTR  pszPosn;

    //
    //  strip leading blanks
    //

    pszPosn = pszString;

    while (*pszPosn == TEXT(' '))
        pszPosn++;

    if (pszPosn != pszString)
        lstrcpy(pszString, pszPosn);

    //
    //  strip trailing blanks
    //

    if ((pszPosn = pszString + lstrlen(pszString)) != pszString) {
       pszPosn = CharPrev(pszString, pszPosn);

       while (*pszPosn == TEXT(' '))
           pszPosn = CharPrev(pszString, pszPosn);

       pszPosn = CharNext(pszPosn);

       *pszPosn = TEXT('\0');
    }
}

BOOL ReadRegistryByte(HKEY       hKey,
                      PTCHAR     valueName,
                      PBYTE      regData)
{
    DWORD       regDataType = 0;
    DWORD       regDataSize = 0;

    regDataSize = sizeof(*regData);
    if ((ERROR_SUCCESS != RegQueryValueEx(hKey,
                                          valueName,
                                          NULL,
                                          &regDataType,
                                          regData,
                                          &regDataSize))
        || (regDataSize != sizeof(BYTE))
        || (regDataType != REG_BINARY))
    {
        //
        // Read was unsuccessful  or not a binary value, regData is not set
        //
        return FALSE;
    }

    //
    // Read was a success, regData contains the value read in
    //
    return TRUE;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyzport\cyserial.h ===
/*++

Copyright (c) 1990, 1991, 1992, 1993 - 1997 Microsoft Corporation

Module Name :

    cyserial.h  

Abstract:

    Type definitions and data for the serial port driver
    Modified to contain only 8250 bit definitions. - Fanny

Author:


--*/



//
// Bitmask definitions for accessing the 8250 device registers.
//

//
// These bits define the number of data bits trasmitted in
// the Serial Data Unit (SDU - Start,data, parity, and stop bits)
//
#define SERIAL_DATA_LENGTH_5 0x00
#define SERIAL_DATA_LENGTH_6 0x01
#define SERIAL_DATA_LENGTH_7 0x02
#define SERIAL_DATA_LENGTH_8 0x03


//
// These masks define the interrupts that can be enabled or disabled.
//
//
// This interrupt is used to notify that there is new incomming
// data available.  The SERIAL_RDA interrupt is enabled by this bit.
//
#define SERIAL_IER_RDA   0x01

//
// This interrupt is used to notify that there is space available
// in the transmitter for another character.  The SERIAL_THR
// interrupt is enabled by this bit.
//
#define SERIAL_IER_THR   0x02

//
// This interrupt is used to notify that some sort of error occured
// with the incomming data.  The SERIAL_RLS interrupt is enabled by
// this bit.
#define SERIAL_IER_RLS   0x04

//
// This interrupt is used to notify that some sort of change has
// taken place in the modem control line.  The SERIAL_MS interrupt is
// enabled by this bit.
//
#define SERIAL_IER_MS    0x08


//
// These masks define the values of the interrupt identification
// register.  The low bit must be clear in the interrupt identification
// register for any of these interrupts to be valid.  The interrupts
// are defined in priority order, with the highest value being most
// important.  See above for a description of what each interrupt
// implies.
//
#define SERIAL_IIR_RLS      0x06
#define SERIAL_IIR_RDA      0x04
#define SERIAL_IIR_CTI      0x0c
#define SERIAL_IIR_THR      0x02
#define SERIAL_IIR_MS       0x00

//
// This bit mask get the value of the high two bits of the
// interrupt id register.  If this is a 16550 class chip
// these bits will be a one if the fifo's are enbled, otherwise
// they will always be zero.
//
#define SERIAL_IIR_FIFOS_ENABLED 0xc0

//
// If the low bit is logic one in the interrupt identification register
// this implies that *NO* interrupts are pending on the device.
//
#define SERIAL_IIR_NO_INTERRUPT_PENDING 0x01



//
// These masks define access to the fifo control register.
//

//
// Enabling this bit in the fifo control register will turn
// on the fifos.  If the fifos are enabled then the high two
// bits of the interrupt id register will be set to one.  Note
// that this only occurs on a 16550 class chip.  If the high
// two bits in the interrupt id register are not one then
// we know we have a lower model chip.
//
//
#define SERIAL_FCR_ENABLE     ((UCHAR)0x01)
#define SERIAL_FCR_RCVR_RESET ((UCHAR)0x02)
#define SERIAL_FCR_TXMT_RESET ((UCHAR)0x04)

//
// This set of values define the high water marks (when the
// interrupts trip) for the receive fifo.
//
#define SERIAL_1_BYTE_HIGH_WATER   ((UCHAR)0x00)
#define SERIAL_4_BYTE_HIGH_WATER   ((UCHAR)0x40)
#define SERIAL_8_BYTE_HIGH_WATER   ((UCHAR)0x80)
#define SERIAL_14_BYTE_HIGH_WATER  ((UCHAR)0xc0)

//
// These masks define access to the line control register.
//

//
// This defines the bit used to control the definition of the "first"
// two registers for the 8250.  These registers are the input/output
// register and the interrupt enable register.  When the DLAB bit is
// enabled these registers become the least significant and most
// significant bytes of the divisor value.
//
#define SERIAL_LCR_DLAB     0x80

//
// This defines the bit used to control whether the device is sending
// a break.  When this bit is set the device is sending a space (logic 0).
//
// Most protocols will assume that this is a hangup.
//
#define SERIAL_LCR_BREAK    0x40

//
// These defines are used to set the line control register.
//
#define SERIAL_5_DATA       ((UCHAR)0x00)
#define SERIAL_6_DATA       ((UCHAR)0x01)
#define SERIAL_7_DATA       ((UCHAR)0x02)
#define SERIAL_8_DATA       ((UCHAR)0x03)
#define SERIAL_DATA_MASK    ((UCHAR)0x03)

#define SERIAL_1_STOP       ((UCHAR)0x00)
#define SERIAL_1_5_STOP     ((UCHAR)0x04) // Only valid for 5 data bits
#define SERIAL_2_STOP       ((UCHAR)0x04) // Not valid for 5 data bits
#define SERIAL_STOP_MASK    ((UCHAR)0x04)

#define SERIAL_NONE_PARITY  ((UCHAR)0x00)
#define SERIAL_ODD_PARITY   ((UCHAR)0x08)
#define SERIAL_EVEN_PARITY  ((UCHAR)0x18)
#define SERIAL_MARK_PARITY  ((UCHAR)0x28)
#define SERIAL_SPACE_PARITY ((UCHAR)0x38)
#define SERIAL_PARITY_MASK  ((UCHAR)0x38)

//
// These masks define access the modem control register.
//

//
// This bit controls the data terminal ready (DTR) line.  When
// this bit is set the line goes to logic 0 (which is then inverted
// by normal hardware).  This is normally used to indicate that
// the device is available to be used.  Some odd hardware
// protocols (like the kernel debugger) use this for handshaking
// purposes.
//
#define SERIAL_MCR_DTR      0x01

//
// This bit controls the ready to send (RTS) line.  When this bit
// is set the line goes to logic 0 (which is then inverted by the normal
// hardware).  This is used for hardware handshaking.  It indicates that
// the hardware is ready to send data and it is waiting for the
// receiving end to set clear to send (CTS).
//
#define SERIAL_MCR_RTS      0x02

//
// This bit is used for general purpose output.
//
#define SERIAL_MCR_OUT1     0x04

//
// This bit is used for general purpose output.
//
#define SERIAL_MCR_OUT2     0x08

//
// This bit controls the loopback testing mode of the device.  Basically
// the outputs are connected to the inputs (and vice versa).
//
#define SERIAL_MCR_LOOP     0x10


//
// These masks define access to the line status register.  The line
// status register contains information about the status of data
// transfer.  The first five bits deal with receive data and the
// last two bits deal with transmission.  An interrupt is generated
// whenever bits 1 through 4 in this register are set.
//

//
// This bit is the data ready indicator.  It is set to indicate that
// a complete character has been received.  This bit is cleared whenever
// the receive buffer register has been read.
//
#define SERIAL_LSR_DR       0x01

//
// This is the overrun indicator.  It is set to indicate that the receive
// buffer register was not read befor a new character was transferred
// into the buffer.  This bit is cleared when this register is read.
//
#define SERIAL_LSR_OE       0x02

//
// This is the parity error indicator.  It is set whenever the hardware
// detects that the incoming serial data unit does not have the correct
// parity as defined by the parity select in the line control register.
// This bit is cleared by reading this register.
//
#define SERIAL_LSR_PE       0x04

//
// This is the framing error indicator.  It is set whenever the hardware
// detects that the incoming serial data unit does not have a valid
// stop bit.  This bit is cleared by reading this register.
//
#define SERIAL_LSR_FE       0x08

//
// This is the break interrupt indicator.  It is set whenever the data
// line is held to logic 0 for more than the amount of time it takes
// to send one serial data unit.  This bit is cleared whenever the
// this register is read.
//
#define SERIAL_LSR_BI       0x10

//
// This is the transmit holding register empty indicator.  It is set
// to indicate that the hardware is ready to accept another character
// for transmission.  This bit is cleared whenever a character is
// written to the transmit holding register.
//
#define SERIAL_LSR_THRE     0x20

//
// This bit is the transmitter empty indicator.  It is set whenever the
// transmit holding buffer is empty and the transmit shift register
// (a non-software accessable register that is used to actually put
// the data out on the wire) is empty.  Basically this means that all
// data has been sent.  It is cleared whenever the transmit holding or
// the shift registers contain data.
//
#define SERIAL_LSR_TEMT     0x40

//
// This bit indicates that there is at least one error in the fifo.
// The bit will not be turned off until there are no more errors
// in the fifo.
//
#define SERIAL_LSR_FIFOERR  0x80


//
// These masks are used to access the modem status register.
// Whenever one of the first four bits in the modem status
// register changes state a modem status interrupt is generated.
//

//
// This bit is the delta clear to send.  It is used to indicate
// that the clear to send bit (in this register) has *changed*
// since this register was last read by the CPU.
//
#define SERIAL_MSR_DCTS     0x01

//
// This bit is the delta data set ready.  It is used to indicate
// that the data set ready bit (in this register) has *changed*
// since this register was last read by the CPU.
//
#define SERIAL_MSR_DDSR     0x02

//
// This is the trailing edge ring indicator.  It is used to indicate
// that the ring indicator input has changed from a low to high state.
//
#define SERIAL_MSR_TERI     0x04

//
// This bit is the delta data carrier detect.  It is used to indicate
// that the data carrier bit (in this register) has *changed*
// since this register was last read by the CPU.
//
#define SERIAL_MSR_DDCD     0x08

//
// This bit contains the (complemented) state of the clear to send
// (CTS) line.
//
#define SERIAL_MSR_CTS      0x10

//
// This bit contains the (complemented) state of the data set ready
// (DSR) line.
//
#define SERIAL_MSR_DSR      0x20

//
// This bit contains the (complemented) state of the ring indicator
// (RI) line.
//
#define SERIAL_MSR_RI       0x40

//
// This bit contains the (complemented) state of the data carrier detect
// (DCD) line.
//
#define SERIAL_MSR_DCD      0x80
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyzport\cyclomz.h ===
/*----------------------------------------------------------------------*
 * cyclomz.h: Cyclades-Z hardware-related definitions.					*
 *																		*
 * revision 1.0 03/14/95 Marcio Saito									*
 * revision 2.0 01/04/96 Marcio Saito	Changes due to HW design		*
 *										alterations.					*
 * revision 2.1 03/15/96 Marcio Saito	Changes due to HW design		*
 *										alterations.					*
 * revision 3.0	04/11/97 Ivan Passos	Changes to support the			*
 *										new boards (8Zo and Ze).		*
 *----------------------------------------------------------------------*/

/*
 *	The data types defined below are used in all ZFIRM interface
 *	data structures. They accomodate differences between HW
 *	architectures and compilers.
 */

typedef unsigned long	uclong;		/* 32 bits, unsigned */
typedef unsigned short	ucshort;	/* 16 bits, unsigned */
typedef unsigned char	ucchar;		/* 8 bits, unsigned */

/*
 *	Memory Window Sizes
 */

#define	DP_WINDOW_SIZE		(0x00080000)	/* window size 512 Kb */
#define	ZE_DP_WINDOW_SIZE	(0x00100000)	/* window size 1 Mb (for the 
											   Ze V_1 and 8Zo V_2) */
#define	CTRL_WINDOW_SIZE	(0x00000080)	/* runtime regs 128 bytes */

/*
 *	CUSTOM_REG - Cyclades-8Zo/PCI Custom Registers Set. The driver
 *	normally will access only interested on the fpga_id, fpga_version,
 *	start_cpu and stop_cpu.
 */

struct	CUSTOM_REG {
	uclong	fpga_id;			/* FPGA Identification Register */
	uclong	fpga_version;		/* FPGA Version Number Register */
	uclong	cpu_start;			/* CPU start Register (write) */
	uclong	cpu_stop;			/* CPU stop Register (write) */
	uclong	misc_reg;			/* Miscelaneous Register */
	uclong	idt_mode;			/* IDT mode Register */
	uclong	uart_irq_status;	/* UART IRQ status Register */
	uclong	clear_timer0_irq;	/* Clear timer interrupt Register */
	uclong	clear_timer1_irq;	/* Clear timer interrupt Register */
	uclong	clear_timer2_irq;	/* Clear timer interrupt Register */
	uclong	test_register;		/* Test Register */
	uclong	test_count;			/* Test Count Register */
	uclong	timer_select;		/* Timer select register */
	uclong	pr_uart_irq_status;	/* Prioritized UART IRQ stat Reg */
	uclong	ram_wait_state;		/* RAM wait-state Register */
	uclong	uart_wait_state;	/* UART wait-state Register */
	uclong	timer_wait_state;	/* timer wait-state Register */
	uclong	ack_wait_state;		/* ACK wait State Register */
};

/*
 *	CUSTOM_REG_ZE - Cyclades-Ze/PCI Custom Registers Set. The driver
 *	normally will access only interested on the fpga_id, fpga_version,
 *	start_cpu and stop_cpu.
 */

struct	CUSTOM_REG_ZE {
	uclong	fpga_id;		/* FPGA Identification Register */
	uclong	fpga_version;	/* FPGA Version Number Register */
	uclong	cpu_start;			/* CPU start Register (write) */
	uclong	cpu_stop;			/* CPU stop Register (write) */
	uclong	cpu_ctrl;
	uclong	zbus_wait;		/* Z-Bus wait states */
	uclong	timer_div;		/* Timer divider */
	uclong	timer_irq_ack;	/* Write anything to ack/clear Timer 
							   Interrupt Register */
};


/*
 *	RUNTIME_9060 - PLX PCI9060ES local configuration and shared runtime
 *	registers. This structure can be used to access the 9060 registers
 *	(memory mapped).
 */

struct RUNTIME_9060 {
	uclong	loc_addr_range;	/* 00h - Local Address Range */
	uclong	loc_addr_base;	/* 04h - Local Address Base */
	uclong	loc_arbitr;		/* 08h - Local Arbitration */
	uclong	endian_descr;	/* 0Ch - Big/Little Endian Descriptor */
	uclong	loc_rom_range;	/* 10h - Local ROM Range */
	uclong	loc_rom_base;	/* 14h - Local ROM Base */
	uclong	loc_bus_descr;	/* 18h - Local Bus descriptor */
	uclong	loc_range_mst;	/* 1Ch - Local Range for Master to PCI */
	uclong	loc_base_mst;	/* 20h - Local Base for Master PCI */
	uclong	loc_range_io;	/* 24h - Local Range for Master IO */
	uclong	pci_base_mst;	/* 28h - PCI Base for Master PCI */
	uclong	pci_conf_io;	/* 2Ch - PCI configuration for Master IO */
	uclong	filler1;		/* 30h */
	uclong	filler2;		/* 34h */
	uclong	filler3;		/* 38h */
	uclong	filler4;		/* 3Ch */
	uclong	mail_box_0;		/* 40h - Mail Box 0 */
	uclong	mail_box_1;		/* 44h - Mail Box 1 */
	uclong	mail_box_2;		/* 48h - Mail Box 2 */
	uclong	mail_box_3;		/* 4Ch - Mail Box 3 */
	uclong	filler5;		/* 50h */
	uclong	filler6;		/* 54h */
	uclong	filler7;		/* 58h */
	uclong	filler8;		/* 5Ch */
	uclong	pci_doorbell;	/* 60h - PCI to Local Doorbell */
	uclong	loc_doorbell;	/* 64h - Local to PCI Doorbell */
	uclong	intr_ctrl_stat;	/* 68h - Interrupt Control/Status */
	uclong	init_ctrl;		/* 6Ch - EEPROM control, Init Control, etc */
};

/* Values for the Local Base Address re-map register */

#define	WIN_RAM			0x00000001L	/* set the sliding window to RAM */
#define	WIN_CREG		0x14000001L	/* set the window to custom Registers */

/* Values timer select registers */

#define	TIMER_BY_1M		0x00		/* clock divided by 1M */
#define	TIMER_BY_256K	0x01		/* clock divided by 256k */
#define	TIMER_BY_128K	0x02		/* clock divided by 128k */
#define	TIMER_BY_32K	0x03		/* clock divided by 32k */

/*
 *	Starting from here, the compilation is conditional to the definition
 *	of FIRMWARE
 */

#ifdef FIRMWARE

struct RUNTIME_9060_FW {
	uclong	mail_box_0;	/* 40h - Mail Box 0 */
	uclong	mail_box_1;	/* 44h - Mail Box 1 */
	uclong	mail_box_2;	/* 48h - Mail Box 2 */
	uclong	mail_box_3;	/* 4Ch - Mail Box 3 */
	uclong	filler5;	/* 50h */
	uclong	filler6;	/* 54h */
	uclong	filler7;	/* 58h */
	uclong	filler8;	/* 5Ch */
	uclong	pci_doorbell;	/* 60h - PCI to Local Doorbell */
	uclong	loc_doorbell;	/* 64h - Local to PCI Doorbell */
	uclong	intr_ctrl_stat;	/* 68h - Interrupt Control/Status */
	uclong	init_ctrl;	/* 6Ch - EEPROM control, Init Control, etc */
};

/* Hardware related constants */

#define ZF_UART_PTR		(0xb0000000UL)
#define ZF_UART_SPACE	0x00000080UL
#define	ZF_UART_CLOCK	7372800

#define	ZO_V1_FPGA_ID	0x95
#define	ZO_V2_FPGA_ID	0x84
#define	ZE_V1_FPGA_ID	0x89

#define	ZF_TIMER_PTR	(0xb2000000UL)

#define	ZF_9060_PTR		(0xb6000000UL)
#define	ZF_9060_ZE_PTR	(0xb8000000UL)
#define	ZF_CUSTOM_PTR	(0xb4000000UL)

#define	ZF_NO_CACHE		(0xa0000000UL)
#define	ZF_CACHE		(0x80000000UL)

#define	ZF_I_TIMER		(EXT_INT0)
#define	ZF_I_SERIAL		(EXT_INT2)
#define ZF_I_HOST		(EXT_INT3)
#define	ZF_I_ALL		(EXT_INT0|EXT_INT2|EXT_INT3)
#define	ZF_I_TOTAL		(EXT_INT0|EXT_INT1|EXT_INT2|EXT_INT3|EXT_INT4|EXT_INT5)

#define	ZF_IRQ03		0xfffffffeUL
#define	ZF_IRQ05		0xfffffffdUL
#define	ZF_IRQ09		0xfffffffbUL
#define	ZF_IRQ10		0xfffffff7UL
#define	ZF_IRQ11		0xffffffefUL
#define	ZF_IRQ12		0xffffffdfUL
#define	ZF_IRQ15		0xffffffbfUL

#endif /* FIRMWARE */


=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyzcoins\pp.c ===
/*----------------------------------------------------------------------
 file: pp.c - property page

----------------------------------------------------------------------*/
#include "cyzports.h"
#include "pp.h"
#include <htmlhelp.h>

#include <windowsx.h>

//TCHAR m_szDevMgrHelp[]   = _T("devmgr.hlp");
TCHAR m_szCyzcoinsHelp[] = _T("cyzcoins.chm");
TCHAR z_szNumOfPorts[]   = TEXT("NumOfPorts");

const DWORD HelpIDs[]=
{
//    IDC_STATIC,             IDH_NOHELP,
    IDC_NUM_PORTS,          IDH_CYZCOINS_NUM_PORTS,
    PP_NUM_PORTS,           IDH_CYZCOINS_NUM_PORTS,
    IDC_START_COM,          IDH_CYZCOINS_START_COM,
    PP_START_COM,           IDH_CYZCOINS_START_COM,
    IDC_RESTORE_DEFAULTS,   IDH_CYZCOINS_RESTORE_DEFAULTS,
    0, 0
};

void InitPortParams(
    IN OUT PPORT_PARAMS      Params,
    IN HDEVINFO              DeviceInfoSet,
    IN PSP_DEVINFO_DATA      DeviceInfoData
    )
{
    SP_DEVINFO_LIST_DETAIL_DATA detailData;
    HCOMDB                      hComDB;
    DWORD                       maxPortsReported;

    //DbgOut(TEXT("InitPortParams\n"));

    ZeroMemory(Params, sizeof(PORT_PARAMS));

    Params->DeviceInfoSet = DeviceInfoSet;
    Params->DeviceInfoData = DeviceInfoData;

    // Allocate and initialize PortUsage matrix
    ComDBOpen(&hComDB);
    if (hComDB != INVALID_HANDLE_VALUE) {
        ComDBGetCurrentPortUsage(hComDB,
                                 NULL,
                                 0,
                                 CDB_REPORT_BYTES,
                                 &maxPortsReported);

        //#if DBG
        //{
        // TCHAR buf[500];
        // wsprintf(buf, TEXT("maxPortsReported %d\n"),maxPortsReported);
        // DbgOut(buf);
        //}
        //#endif
        
        if (maxPortsReported != 0) {
            Params->ShowStartCom = TRUE;
            //Params->PortUsage = (PBYTE) LocalAlloc(LPTR,maxPortsReported/8);
            if (maxPortsReported > MAX_COM_PORT) {
                Params->PortUsageSize = maxPortsReported;
            } else {
                Params->PortUsageSize = MAX_COM_PORT;
            }
            Params->PortUsage = (PBYTE) LocalAlloc(LPTR,Params->PortUsageSize/8);
            if (Params->PortUsage != NULL) {
                Params->PortUsageSize = maxPortsReported/8;
                ComDBGetCurrentPortUsage(hComDB,
                                         Params->PortUsage,
                                         Params->PortUsageSize,
                                         CDB_REPORT_BITS,
                                         &maxPortsReported
                                         );
            }
        }

        ComDBClose(hComDB);
    } else {
        // This happens if we don't have sufficient security privileges.
        // GetLastError returns 0 here!!! Some bug in ComDBOpen.
        DbgOut(TEXT("cyzcoins ComDBOpen failed.\n"));
    }

    //
    // See if we are being invoked locally or over the network.  If over the net,
    // then disable all possible changes.
    //
    detailData.cbSize = sizeof(SP_DEVINFO_LIST_DETAIL_DATA);
    if (SetupDiGetDeviceInfoListDetail(DeviceInfoSet, &detailData) &&
        detailData.RemoteMachineHandle != NULL) {
        Params->ShowStartCom = FALSE;
    }

}

HPROPSHEETPAGE InitSettingsPage(PROPSHEETPAGE *     psp,
                                OUT PPORT_PARAMS    Params)
{
    //
    // Add the Port Settings property page
    //
    psp->dwSize      = sizeof(PROPSHEETPAGE);
    psp->dwFlags     = PSP_USECALLBACK; // | PSP_HASHELP;
    psp->hInstance   = g_hInst;
    psp->pszTemplate = MAKEINTRESOURCE(DLG_PP_PORTSETTINGS);

    //
    // following points to the dlg window proc
    //
    psp->pfnDlgProc = PortSettingsDlgProc;
    psp->lParam     = (LPARAM) Params;

    //
    // following points to some control callback of the dlg window proc
    //
    psp->pfnCallback = PortSettingsDlgCallback;

    //
    // allocate our "Ports Setting" sheet
    //
    return CreatePropertySheetPage(psp);
}

/*++

Routine Description: CycladzPropPageProvider

    Entry-point for adding additional device manager property
    sheet pages.  Registry specifies this routine under
    Control\Class\PortNode::EnumPropPage32="msports.dll,thisproc"
    entry.  This entry-point gets called only when the Device
    Manager asks for additional property pages.

Arguments:

    Info  - points to PROPSHEETPAGE_REQUEST, see setupapi.h
    AddFunc - function ptr to call to add sheet.
    Lparam - add sheet functions private data handle.

Return Value:

    BOOL: FALSE if pages could not be added, TRUE on success

--*/
BOOL APIENTRY CycladzPropPageProvider(LPVOID               Info,
                                      LPFNADDPROPSHEETPAGE AddFunc,
                                      LPARAM               Lparam
                                      )
{
   PSP_PROPSHEETPAGE_REQUEST pprPropPageRequest;
   PROPSHEETPAGE             psp;
   HPROPSHEETPAGE            hpsp;
   PPORT_PARAMS              params = NULL; 

   //DbgOut(TEXT("cyzcoins CycladzPropPageProvider entry\n"));

   pprPropPageRequest = (PSP_PROPSHEETPAGE_REQUEST) Info;


   //
   // Allocate and zero out memory for the struct that will contain
   // page specific data
   //
   params = (PPORT_PARAMS) LocalAlloc(LPTR, sizeof(PORT_PARAMS));

//******************************************************************
// TEST ERROR
//   if (params)
//        LocalFree(params);
//   params = NULL;
//   
//******************************************************************

   if (!params) {
       ErrMemDlg(GetFocus());
       return FALSE;
   }

   if (pprPropPageRequest->PageRequested == SPPSR_ENUM_ADV_DEVICE_PROPERTIES) {

        InitPortParams(params,
                       pprPropPageRequest->DeviceInfoSet,
                       pprPropPageRequest->DeviceInfoData);

        hpsp = InitSettingsPage(&psp, params);
      
        if (!hpsp) {
            return FALSE;
        }
        
        if (!(*AddFunc)(hpsp, Lparam)) {
            DestroyPropertySheetPage(hpsp);
            return FALSE;
        }
   }

   return TRUE;
} /* CycladzPropPageProvider */


UINT CALLBACK
PortSettingsDlgCallback(HWND hwnd,
                        UINT uMsg,
                        LPPROPSHEETPAGE ppsp)
{
    PPORT_PARAMS params;

    switch (uMsg) {
    case PSPCB_CREATE:
        return TRUE;    // return TRUE to continue with creation of page

    case PSPCB_RELEASE:
        //DbgOut(TEXT("PortSettingsDlgCallBack PSPCB_RELEASE\n"));
        params = (PPORT_PARAMS) ppsp->lParam;
        if (params->PortUsage) {
            LocalFree(params->PortUsage);
        }
        LocalFree(params);

        return 0;       // return value ignored

    default:
        break;
    }

    return TRUE;
}

void
Port_OnCommand(
    HWND DialogHwnd,
    int  ControlId,
    HWND ControlHwnd,
    UINT NotifyCode
    );

BOOL
Port_OnContextMenu(
    HWND HwndControl,
    WORD Xpos,
    WORD Ypos
    );

void
Port_OnHelp(
    HWND       DialogHwnd,
    LPHELPINFO HelpInfo
    );

BOOL
Port_OnInitDialog(
    HWND    DialogHwnd,
    HWND    FocusHwnd,
    LPARAM  Lparam
    );

BOOL
Port_OnNotify(
    HWND    DialogHwnd,
    LPNMHDR NmHdr
    );

/*++

Routine Description: PortSettingsDlgProc

    The windows control function for the Port Settings properties window

Arguments:

    hDlg, uMessage, wParam, lParam: standard windows DlgProc parameters

Return Value:

    BOOL: FALSE if function fails, TRUE if function passes

--*/
INT_PTR APIENTRY
PortSettingsDlgProc(IN HWND   hDlg,
                    IN UINT   uMessage,
                    IN WPARAM wParam,
                    IN LPARAM lParam)
{
    switch(uMessage) {
    case WM_COMMAND:
        Port_OnCommand(hDlg, (int) LOWORD(wParam), (HWND)lParam, (UINT)HIWORD(wParam));
        break;

    case WM_CONTEXTMENU:
        return Port_OnContextMenu((HWND)wParam, LOWORD(lParam), HIWORD(lParam));

    case WM_HELP: 
        Port_OnHelp(hDlg, (LPHELPINFO) lParam);
        break;
    
    case WM_INITDIALOG:
        return Port_OnInitDialog(hDlg, (HWND)wParam, lParam); 

    case WM_NOTIFY:
        return Port_OnNotify(hDlg,  (NMHDR *)lParam);
    }

    return FALSE;
} /* PortSettingsDialogProc */

void
Port_OnRestoreDefaultsClicked(
    HWND            DialogHwnd,
    PPORT_PARAMS    Params
    )
{
    RestoreDefaults(DialogHwnd, Params);
    PropSheet_Changed(GetParent(DialogHwnd), DialogHwnd);
}

void
Port_OnCommand(
    HWND DialogHwnd,
    int  ControlId,
    HWND ControlHwnd,
    UINT NotifyCode
    )
{
    PPORT_PARAMS params = (PPORT_PARAMS)GetWindowLongPtr(DialogHwnd, DWLP_USER);

    if (NotifyCode == CBN_SELCHANGE) {
        PropSheet_Changed(GetParent(DialogHwnd), DialogHwnd);
    }
    else {
        switch (ControlId) {
        //case IDC_ADVANCED:
        //    Port_OnAdvancedClicked(DialogHwnd, params);
        //    break; 
        //
        case IDC_RESTORE_DEFAULTS:
            Port_OnRestoreDefaultsClicked(DialogHwnd, params);
            break; 
        
        //
        // Because this is a prop sheet, we should never get this.
        // All notifications for ctrols outside of the sheet come through
        // WM_NOTIFY
        //
        case IDCANCEL:
            EndDialog(DialogHwnd, 0); 
            return;
        }
    }
}

BOOL
Port_OnContextMenu(
    HWND HwndControl,
    WORD Xpos,
    WORD Ypos
    )
{
//  WinHelp(HwndControl,
//          m_szCyzcoinsHelp, //m_szDevMgrHelp,
//          HELP_CONTEXTMENU,
//          (ULONG_PTR) HelpIDs);
    HtmlHelp(HwndControl,
            m_szCyzcoinsHelp,
            HH_TP_HELP_CONTEXTMENU,
            (ULONG_PTR) HelpIDs);

    return FALSE;
}

void
Port_OnHelp(
    HWND       DialogHwnd,
    LPHELPINFO HelpInfo
    )
{
    if (HelpInfo->iContextType == HELPINFO_WINDOW) {

//      WinHelp((HWND) HelpInfo->hItemHandle,
//              m_szCyzcoinsHelp, //m_szDevMgrHelp,
//              HELP_WM_HELP, 
//              (ULONG_PTR) HelpIDs);
        HtmlHelp((HWND) HelpInfo->hItemHandle,
                m_szCyzcoinsHelp,
                HH_TP_HELP_WM_HELP, 
                (ULONG_PTR) HelpIDs);
    }
}

BOOL
Port_OnInitDialog(
    HWND    DialogHwnd,
    HWND    FocusHwnd,
    LPARAM  Lparam
    )
{
    PPORT_PARAMS params;
    DWORD dwError;

    //DbgOut(TEXT("Port_OnInitDialog\n"));

    //
    // on WM_INITDIALOG call, lParam points to the property
    // sheet page.
    //
    // The lParam field in the property sheet page struct is set by the
    // caller. When I created the property sheet, I passed in a pointer
    // to a struct containing information about the device. Save this in
    // the user window long so I can access it on later messages.
    //
    params = (PPORT_PARAMS) ((LPPROPSHEETPAGE)Lparam)->lParam;
    SetWindowLongPtr(DialogHwnd, DWLP_USER, (ULONG_PTR) params);
    

    // Display board details
    FillNumberOfPortsText(DialogHwnd,params);

    //
    // Set up the combo box with choices
    //
    if (params->ShowStartCom) {
        ComDBOpen(&params->hComDB);
        params->ShowStartCom = FillStartComCb(DialogHwnd, params);
        if (params->hComDB != HCOMDB_INVALID_HANDLE_VALUE) {
            ComDBClose(params->hComDB);
        }
    } else {
        EnableWindow(GetDlgItem(DialogHwnd, PP_START_COM), FALSE);
        EnableWindow(GetDlgItem(DialogHwnd, IDC_START_COM), FALSE);
    }

    return TRUE;  // No need for us to set the focus.
}

BOOL
Port_OnNotify(
    HWND    DialogHwnd,
    LPNMHDR NmHdr
    )
{
    PPORT_PARAMS params = (PPORT_PARAMS)GetWindowLongPtr(DialogHwnd, DWLP_USER);

    switch (NmHdr->code) {
    //
    // Sent when the user clicks on Apply OR OK !!
    //
    case PSN_APPLY:

        //DbgOut(TEXT("Port_OnNotify PSN_APPLY\n"));

        //
        // Write out the com port options to the registry
        //
        if (SavePortSettingsDlg(DialogHwnd, params)) {
            SetWindowLongPtr(DialogHwnd, DWLP_MSGRESULT, PSNRET_NOERROR);
        } else {
            SetWindowLongPtr(DialogHwnd, DWLP_MSGRESULT, PSNRET_INVALID);
        }
        return TRUE;
        
    default:
        //DbgOut(TEXT("Port_OnNotify default\n"));
        return FALSE;
    }
}


ULONG
FillNumberOfPortsText(
    IN HWND             DialogHwnd,
    IN PPORT_PARAMS     Params
    )
{
    HKEY  hDeviceKey;
    DWORD err,numOfPortsSize,numOfPorts;
    HWND  numportHwnd;
    TCHAR szText[10];

    err = ERROR_SUCCESS;

    if((hDeviceKey = SetupDiOpenDevRegKey(Params->DeviceInfoSet,
                                          Params->DeviceInfoData,
                                          DICS_FLAG_GLOBAL,
                                          0,
                                          DIREG_DEV,
                                          KEY_READ)) == INVALID_HANDLE_VALUE) {
        err = GetLastError();
        goto FillNPortsExit;
    }

    numOfPortsSize = sizeof(numOfPorts);
    err = RegQueryValueEx(hDeviceKey,
                          z_szNumOfPorts,
                          NULL,
                          NULL,
                          (PBYTE)&numOfPorts,
                          &numOfPortsSize
                         );
//********************************************************
// TEST ERROR
//    err=ERROR_REGISTRY_CORRUPT;
//********************************************************

    RegCloseKey(hDeviceKey);

    if(err != ERROR_SUCCESS) {
        goto FillNPortsExit;
    }

    numportHwnd = GetDlgItem(DialogHwnd, PP_NUM_PORTS);
    wsprintf(szText, TEXT("%d"),numOfPorts);
    SetWindowText(numportHwnd,szText);


FillNPortsExit:

    //if (err != ERROR_SUCCESS) {
    //    MyMessageBoxWithErr(DialogHwnd,IDS_NUM_PORTS_DISABLED,IDS_CYCLADZ,MB_ICONWARNING,err);
    //}

    return err;
}


/*++

Routine Description: FillStartComCb

    fill in the Port Name combo box selection with a list
    of possible un-used portnames

Arguments:

    poppOurPropParams: where to save the data to
    hDlg:              address of the window

Return Value:

    BOOL: TRUE if StartCom CB displayed with no errors

--*/
BOOL
FillStartComCb(
    HWND            ParentHwnd,
    PPORT_PARAMS    Params
    )
{
    int   i, j, nEntries;
    DWORD   nCurPortNum = 0;
    DWORD   nCom; // Changed from int to DWORD (Fanny)
    DWORD dwError;
    TCHAR szCom[40];
    TCHAR szInUse[40];
    char  mask, *current;
    HWND  portHwnd;
    DEVINST devInst,newInst;

    //DbgOut(TEXT("FillStartComCb\n"));

    portHwnd = GetDlgItem(ParentHwnd, PP_START_COM);

    if (Params->hComDB == HCOMDB_INVALID_HANDLE_VALUE) {
        // This happens if we don't have sufficient security privileges.
        EnableWindow(portHwnd, FALSE);
        EnableWindow(GetDlgItem(ParentHwnd, IDC_START_COM), FALSE);
        return 0;
    }

    if (Params->PortUsage == NULL || Params->PortUsageSize == 0) {
        MyMessageBox(ParentHwnd,
                     IDS_MEM_ALLOC_WRN,
                     IDS_CYCLADZ,
                     MB_ICONWARNING);
        EnableWindow(portHwnd, FALSE);
        EnableWindow(GetDlgItem(ParentHwnd, IDC_START_COM), FALSE);
        return 0;
    }

    if (!LoadString(g_hInst, IDS_IN_USE, szInUse, CharSizeOf(szInUse))) {
        wcscpy(szInUse, _T(" (in use)"));
    }

    //
    // first tally up which ports NOT to offer in list box, ie, 
    // my ports should not appear as In Use.
    //
    if (CM_Get_Child(&devInst,(Params->DeviceInfoData)->DevInst,0) == CR_SUCCESS) {
        if ((dwError=GetPortName(devInst,Params->szComName,sizeof(Params->szComName))) != ERROR_SUCCESS) {
            MyMessageBoxWithErr(ParentHwnd,IDS_START_COM_DISABLED,IDS_CYCLADZ,MB_ICONWARNING,dwError);
            EnableWindow(portHwnd, FALSE);
            EnableWindow(GetDlgItem(ParentHwnd, IDC_START_COM), FALSE);
            return 0;
        }

        nCurPortNum = myatoi(&Params->szComName[3]);
        //nCom = myatoi(&szCom[3]);

        if ((dwError=CheckComRange(ParentHwnd,Params,nCurPortNum)) != COM_RANGE_OK) {
            if (dwError == COM_RANGE_TOO_BIG) {
                MyMessageBox(ParentHwnd,IDS_COM_TOO_BIG_WRN,IDS_CYCLADZ,MB_ICONWARNING);
            } else {
                MyMessageBox(ParentHwnd,IDS_MEM_ALLOC_WRN,IDS_CYCLADZ,MB_ICONWARNING);
            }
            EnableWindow(portHwnd, FALSE);
            EnableWindow(GetDlgItem(ParentHwnd, IDC_START_COM), FALSE);
            return 0;
        }

        current = Params->PortUsage + (nCurPortNum-1) / 8;
        if ((i = nCurPortNum % 8))
            *current &= ~(1 << (i-1));
        else
            *current &= ~(0x80);

        Params->NumChildren = 1;

        while (CM_Get_Sibling(&newInst,devInst,0) == CR_SUCCESS) {
            if ((dwError=GetPortName(newInst,szCom,sizeof(szCom))) != ERROR_SUCCESS) {
                MyMessageBoxWithErr(ParentHwnd,IDS_START_COM_DISABLED,IDS_CYCLADZ,MB_ICONWARNING,dwError);
                EnableWindow(portHwnd, FALSE);
                EnableWindow(GetDlgItem(ParentHwnd, IDC_START_COM), FALSE);
                return 0;
            }
            nCom = myatoi(&szCom[3]);

            if ((dwError=CheckComRange(ParentHwnd,Params,nCom)) != COM_RANGE_OK) {
                if (dwError == COM_RANGE_TOO_BIG) {
                    MyMessageBox(ParentHwnd,IDS_COM_TOO_BIG_WRN,IDS_CYCLADZ,MB_ICONWARNING);
                } else {
                    MyMessageBox(ParentHwnd,IDS_MEM_ALLOC_WRN,IDS_CYCLADZ,MB_ICONWARNING);
                }
                EnableWindow(portHwnd, FALSE);
                EnableWindow(GetDlgItem(ParentHwnd, IDC_START_COM), FALSE);
                return 0;
            }
            
            current = Params->PortUsage + (nCom-1) / 8;
            if ((i = nCom % 8))
                *current &= ~(1 << (i-1));
            else
                *current &= ~(0x80);

            Params->NumChildren++;

            devInst = newInst;
        }
    }

    // Fill Start COM Combo Box

    current = Params->PortUsage;
    mask = 0x1;
    for(nEntries = j = 0, i = MIN_COM-1; i < MAX_COM_PORT; i++) {

       wsprintf(szCom, TEXT("COM%d"), i+1);
       if (*current & mask) {
           wcscat(szCom, szInUse);
       }

       if (mask == (char) 0x80) {
           mask = 0x01;
           current++;
       }
       else {
           mask <<= 1;
       }

       ComboBox_AddString(portHwnd, szCom);
   }

   ComboBox_SetCurSel(portHwnd, nCurPortNum-1);

   return 1;
} /* FillStartComCb */



/*++

Routine Description: SavePortSettingsDlg

    save changes in the Cyclades-Z Settings dlg sheet

Arguments:

    Params: where to save the data to
    ParentHwnd:              address of the window

Return Value:

    BOOL: FALSE if function fails, TRUE if function passes

--*/
BOOL
SavePortSettingsDlg(
    IN HWND             DialogHwnd,
    IN PPORT_PARAMS     Params
    )
{
    BOOL retValue = TRUE;

    //
    //  store changes to win.ini; broadcast changes to apps
    //
    if (Params->ShowStartCom) {

        ComDBOpen(&Params->hComDB);

        retValue = SavePortSettings(DialogHwnd, Params);

        if (Params->hComDB != HCOMDB_INVALID_HANDLE_VALUE) {
            ComDBClose(Params->hComDB);
        }
    }
 
    return retValue;
} /* SavePortSettingsDlg */




/*++

Routine Description: SavePortSettings

    Read the dlg screen selections for baudrate, parity, etc.
    If changed from what we started with, then save them

Arguments:

    hDlg:      address of the window
    szComName: which comport we're dealing with
    Params:      contains, baudrate, parity, etc

Return Value:

    BOOL: FALSE if function fails, TRUE if function passes

--*/
BOOL
SavePortSettings(
    IN HWND            DialogHwnd,
    IN PPORT_PARAMS    Params
    )
{

    UINT    startComNum, curComNum, newComNum = CB_ERR;
    DEVINST devInst,newInst;
    TCHAR   buffer[BUFFER_SIZE];
    PCHILD_DATA ChildPtr,VarChildPtr;
    DWORD   numChild=0;
    DWORD   i;
    DWORD   dwError = ERROR_SUCCESS;
    BOOL    retValue = FALSE; // FALSE = failure

    //DbgOut(TEXT("SavePortSettings\n"));

    curComNum = myatoi(Params->szComName + wcslen(m_szCOM));
    newComNum = ComboBox_GetCurSel(GetDlgItem(DialogHwnd, PP_START_COM));

    if (newComNum == CB_ERR) {
        newComNum = curComNum;
    }
    else {
        newComNum++;
    }

    if (newComNum == curComNum) {
        return TRUE;    // No change, so just accept it.
    }

    startComNum = newComNum;

    if (Params->hComDB == HCOMDB_INVALID_HANDLE_VALUE) {
        MyMessageBox(DialogHwnd,IDS_INVALID_HCOMDB,IDS_CYCLADZ,MB_ICONERROR);
        return retValue;
    }

    ChildPtr = (PCHILD_DATA) LocalAlloc(LPTR,Params->NumChildren * sizeof(CHILD_DATA));
    if (ChildPtr == NULL) {
        MyMessageBox(DialogHwnd, IDS_MEM_ALLOC_ERR, IDS_CYCLADZ, MB_ICONERROR);
        return retValue;
    }

    VarChildPtr = ChildPtr;

    if (CM_Get_Child(&devInst,(Params->DeviceInfoData)->DevInst,0) == CR_SUCCESS) {
        if ((dwError = GetPortData(devInst,VarChildPtr)) != ERROR_SUCCESS) {
            MyMessageBoxWithErr(DialogHwnd,IDS_START_COM_NOT_CHANGED,IDS_CYCLADZ,
                                MB_ICONERROR,dwError);
            //ComboBox_SetCurSel(GetDlgItem(DialogHwnd,PP_START_COM), curComNum-1);
            goto Return;
        }

        numChild++;
        if (!QueryDosDevice(VarChildPtr->szComName, buffer, BUFFER_SIZE-1)) {
            dwError = GetLastError();
            MyMessageBoxWithErr(DialogHwnd, IDS_START_COM_NOT_CHANGED, IDS_CYCLADZ,
                         MB_ICONERROR,dwError);
            //ComboBox_SetCurSel(GetDlgItem(DialogHwnd,PP_START_COM), curComNum-1);
            goto Return;
        }
        //#if DBG
        //{
        //TCHAR buf[500];
        //wsprintf(buf, TEXT("QueryDosDevice(%s,buffer,%d) returned %s\n"),VarChildPtr->szComName,BUFFER_SIZE-1,buffer);
        //DbgOut(buf);
        //}
        //#endif
        
        if (TryToOpen(VarChildPtr->szComName) == FALSE) {
            dwError = GetLastError();
            MyMessageBox(DialogHwnd, IDS_PORT_OPEN_ERROR,IDS_CYCLADZ,MB_ICONERROR,
                         VarChildPtr->szComName);
            //ComboBox_SetCurSel(GetDlgItem(DialogHwnd,PP_START_COM), curComNum-1);
            goto Return;
        }

        if ((dwError = CheckComRange(DialogHwnd,Params,newComNum)) != COM_RANGE_OK) {
            if (dwError == COM_RANGE_TOO_BIG) {
                MyMessageBox(DialogHwnd, IDS_COM_TOO_BIG_ERR,IDS_CYCLADZ,MB_ICONERROR);
            } else {
                MyMessageBox(DialogHwnd, IDS_MEM_ALLOC_ERR,IDS_CYCLADZ,MB_ICONERROR);
            }
            //ComboBox_SetCurSel(GetDlgItem(DialogHwnd,PP_START_COM), curComNum-1);
            goto Return;
        }

        if (!NewComAvailable(Params,newComNum)) {
            MyMessageBox(DialogHwnd, IDS_PORT_IN_USE_ERROR, IDS_CYCLADZ,MB_ICONERROR);
            //ComboBox_SetCurSel(GetDlgItem(DialogHwnd,PP_START_COM), curComNum-1);
            goto Return;
        }
        VarChildPtr->NewComNum = newComNum;

        while (CM_Get_Sibling(&newInst,devInst,0) == CR_SUCCESS) {
            if (numChild >= Params->NumChildren) {
                // We should never reach here.
                DbgOut(TEXT("cyzcoins Somehow I'm getting different number of children this time!\n"));
                break;
            }

            VarChildPtr++;
            if ((dwError=GetPortData(newInst,VarChildPtr)) != ERROR_SUCCESS) {
                MyMessageBoxWithErr(DialogHwnd, IDS_START_COM_NOT_CHANGED, IDS_CYCLADZ,
                                    MB_ICONERROR,dwError);
                goto Return;
            }
            numChild++;

            if (!QueryDosDevice(VarChildPtr->szComName, buffer, BUFFER_SIZE-1)) {
                dwError = GetLastError();
                MyMessageBoxWithErr(DialogHwnd, IDS_START_COM_NOT_CHANGED, IDS_CYCLADZ,
                                    MB_ICONERROR,dwError);
                goto Return;
            }
        
            if (TryToOpen(VarChildPtr->szComName) == FALSE) {
                dwError = GetLastError();
                MyMessageBox(DialogHwnd, IDS_PORT_OPEN_ERROR,IDS_CYCLADZ,
                             MB_ICONERROR,VarChildPtr->szComName);
                goto Return;
            }

            while (1) {
                newComNum++;

                if ((dwError=CheckComRange(DialogHwnd,Params,newComNum)) != COM_RANGE_OK) {
                    if (dwError == COM_RANGE_TOO_BIG) {
                        MyMessageBox(DialogHwnd, IDS_COM_TOO_BIG_ERR,IDS_CYCLADZ,MB_ICONERROR);
                    } else {
                        MyMessageBox(DialogHwnd, IDS_MEM_ALLOC_ERR,IDS_CYCLADZ,MB_ICONERROR);
                    }
                    //ComboBox_SetCurSel(GetDlgItem(DialogHwnd,PP_START_COM), curComNum-1);
                    goto Return;
                }

                if (NewComAvailable(Params,newComNum)) {
                    break;
                }
            }
            VarChildPtr->NewComNum = newComNum;

            devInst = newInst;
        }
    }
    
    if (startComNum < curComNum) {
        VarChildPtr = ChildPtr;
    }
    for (i=0; i<numChild; i++) {

        EnactComNameChanges(DialogHwnd,Params,VarChildPtr);

        if (startComNum < curComNum) {
            VarChildPtr++;
        } else {
            VarChildPtr--;
        }
    }

    retValue = TRUE;    // TRUE = SUCCESS

Return:
    if (ChildPtr) {
        VarChildPtr = ChildPtr;
        for (i=0; i<numChild; i++) {
            ClosePortData(VarChildPtr);
            VarChildPtr++;
        }
        LocalFree(ChildPtr);
    }
    
    return retValue;

} /* SavePortSettings */


void
RestoreDefaults(
    HWND            DialogHwnd,
    PPORT_PARAMS    Params
    )
{
    USHORT ushIndex;

    ushIndex =
        (USHORT) ComboBox_FindString(GetDlgItem(DialogHwnd, PP_START_COM),
                                     -1,
                                     Params->szComName);

    ushIndex = (ushIndex == CB_ERR) ? 0 : ushIndex;

    ComboBox_SetCurSel(GetDlgItem(DialogHwnd, PP_START_COM), ushIndex);
}


void
MigratePortSettings(
    LPCTSTR OldComName,
    LPCTSTR NewComName
    )
{
    TCHAR settings[BUFFER_SIZE];
    TCHAR szNew[20], szOld[20];

    lstrcpy(szOld, OldComName);
    wcscat(szOld, m_szColon);

    lstrcpy(szNew, NewComName);
    wcscat(szNew, m_szColon);

    settings[0] = TEXT('\0');
    GetProfileString(m_szPorts,
                     szOld,
                     TEXT(""),
                     settings,
                     sizeof(settings) / sizeof(TCHAR) );

    //
    // Insert the new key based on the old one
    //
    if (settings[0] == TEXT('\0')) {
        WriteProfileString(m_szPorts, szNew, m_szDefParams);
    }
    else {
        WriteProfileString(m_szPorts, szNew, settings);
    }

    //
    // Notify everybody of the changes and blow away the old key
    //
    SendWinIniChange((LPTSTR)m_szPorts);
    WriteProfileString(m_szPorts, szOld, NULL);
}


void
EnactComNameChanges(
    IN HWND             ParentHwnd,
    IN PPORT_PARAMS     Params,
    IN PCHILD_DATA      ChildPtr)
{
    DWORD  dwNewComNameLen;
    TCHAR  buffer[BUFFER_SIZE];
    TCHAR  szFriendlyNameFormat[LINE_LEN];
    TCHAR  szDeviceDesc[LINE_LEN];
    TCHAR  szNewComName[20];
    UINT   i;
    UINT   curComNum,NewComNum;
 
    SP_DEVINSTALL_PARAMS spDevInstall;

    NewComNum = ChildPtr->NewComNum;
    curComNum = myatoi(ChildPtr->szComName + wcslen(m_szCOM));

    wsprintf(szNewComName, _T("COM%d"), NewComNum);
    dwNewComNameLen = ByteCountOf(wcslen(szNewComName) + 1);


    //
    // Change the name in the symbolic namespace.
    // First try to get what device the old com name mapped to
    // (ie something like \Device\Serial0).  Then remove the mapping.  If
    // the user isn't an admin, then this will fail and the dialog will popup.
    // Finally, map the new name to the old device retrieved from the
    // QueryDosDevice
    //
    //if (updateMapping) 
    {
        BOOL removed;
        HKEY hSerialMap;

        if (!QueryDosDevice(ChildPtr->szComName, buffer, BUFFER_SIZE-1)) {
            //
            // This shouldn't happen because the previous QueryDosDevice call
            // succeeded
            //
            MyMessageBox(ParentHwnd, IDS_PORT_RENAME_ERROR, IDS_CYCLADZ,
                         MB_ICONERROR, curComNum);
            return;
        }


        //
        // If this fails, then the following define will just replace the current
        // mapping.
        //
        removed = DefineDosDevice(DDD_REMOVE_DEFINITION, ChildPtr->szComName, NULL);

        if (!DefineDosDevice(DDD_RAW_TARGET_PATH, szNewComName, buffer)) {


            //
            // error, first fix up the remove definition and restore the old
            // mapping
            //
            if (removed) {
                DefineDosDevice(DDD_RAW_TARGET_PATH, ChildPtr->szComName, buffer);
            }

            MyMessageBox(ParentHwnd, IDS_PORT_RENAME_ERROR, IDS_CYCLADZ,
                         MB_ICONERROR, curComNum);

            return;
        }

        //
        // Set the \\HARDWARE\DEVICEMAP\SERIALCOMM field
        //
        if (RegOpenKeyEx(HKEY_LOCAL_MACHINE,
                         m_szRegSerialMap,
                         0,
                         KEY_ALL_ACCESS,
                         &hSerialMap) == ERROR_SUCCESS) {

            TCHAR  szSerial[BUFFER_SIZE];
            DWORD  dwSerialSize, dwEnum, dwType, dwComSize;
            TCHAR  szCom[BUFFER_SIZE];

            i = 0;
            do {
                dwSerialSize = CharSizeOf(szSerial);
                dwComSize = sizeof(szCom);
                dwEnum = RegEnumValue(hSerialMap,
                                      i++,
                                      szSerial,
                                      &dwSerialSize,
                                      NULL,
                                      &dwType,
                                      (LPBYTE)szCom,
                                      &dwComSize);

                if (dwEnum == ERROR_SUCCESS) {
                    if(dwType != REG_SZ)
                        continue;

                    if (wcscmp(szCom, ChildPtr->szComName) == 0) {
                        RegSetValueEx(hSerialMap,
                                        szSerial,
                                        0,
                                        REG_SZ,
                                        (PBYTE) szNewComName,
                                        dwNewComNameLen);
                                        break;
                    }
                }

            } while (dwEnum == ERROR_SUCCESS);
        }

        RegCloseKey(hSerialMap);
    }

    //
    // Update the com db
    //
    if (Params->hComDB != HCOMDB_INVALID_HANDLE_VALUE) {

        ComDBReleasePort(Params->hComDB, (DWORD) curComNum);

        ComDBClaimPort(Params->hComDB, (DWORD) NewComNum, TRUE, NULL);
    }

    //
    // Set the friendly name in the form of DeviceDesc (COM#)
    //
    if (ReplaceFriendlyName(ChildPtr->DeviceInfoSet,
                            &ChildPtr->DeviceInfoData,
                            szNewComName) == FALSE) {
        // ReplaceFriendlyName failed. Use original code.
        if (LoadString(g_hInst,
                       IDS_FRIENDLY_FORMAT,
                       szFriendlyNameFormat,
                       CharSizeOf(szFriendlyNameFormat)) &&
            SetupDiGetDeviceRegistryProperty(ChildPtr->DeviceInfoSet,
                                             &ChildPtr->DeviceInfoData,
                                             SPDRP_DEVICEDESC,
                                             NULL,
                                             (PBYTE) szDeviceDesc,
                                             sizeof(szDeviceDesc),
                                             NULL)) {
            wsprintf(buffer, szFriendlyNameFormat, szDeviceDesc, szNewComName);

        }
        else {
            //
            // Use the COM port name straight out
            //
            lstrcpy(buffer, szNewComName);
        }

        SetupDiSetDeviceRegistryProperty(ChildPtr->DeviceInfoSet,
                                         &ChildPtr->DeviceInfoData,
                                         SPDRP_FRIENDLYNAME,
                                         (PBYTE) buffer,
                                         ByteCountOf(wcslen(buffer)+1));
    }

    //
    // Set the parent dialog's title to reflect the change in the com port's name
    //
    //ChangeParentTitle(GetParent(ParentHwnd), AdvancedData->szComName, szNewComName);
    MigratePortSettings(ChildPtr->szComName, szNewComName);

    //
    // Update the PortName value in the devnode
    //
    RegSetValueEx(ChildPtr->hDeviceKey,
                  m_szPortName,
                  0,
                  REG_SZ,
                  (PBYTE)szNewComName,
                  dwNewComNameLen);
    //
    // Now broadcast this change to the device manager
    //

    ZeroMemory(&spDevInstall, sizeof(SP_DEVINSTALL_PARAMS));
    spDevInstall.cbSize = sizeof(SP_DEVINSTALL_PARAMS);

    if (SetupDiGetDeviceInstallParams(Params->DeviceInfoSet,
                                      Params->DeviceInfoData,
                                      &spDevInstall)) {

        spDevInstall.Flags |= DI_PROPERTIES_CHANGE;
        SetupDiSetDeviceInstallParams(Params->DeviceInfoSet,
                                      Params->DeviceInfoData,
                                      &spDevInstall);
    }
}


BOOL
NewComAvailable(
    IN PPORT_PARAMS Params,
    IN DWORD        NewComNum
)
{
    DWORD i;
    UCHAR mask;

    if ((i = NewComNum % 8))
        mask = 1 << (i-1);
    else
        mask = (char) 0x80;

    if (Params->PortUsage[(NewComNum-1)/8] & mask) {
        //
        // Port has been previously claimed
        //
        return FALSE;
    }

    return TRUE;
}

BOOL
TryToOpen(
    IN PTCHAR szCom
)
{
    TCHAR   szComFileName[20]; // more than enough for "\\.\COMXxxx"
    HANDLE  hCom;

    lstrcpy(szComFileName, L"\\\\.\\");
    lstrcat(szComFileName, szCom);

    //
    // Make sure that the port has not been opened by another application
    //
    hCom = CreateFile(szComFileName, GENERIC_READ, 0, NULL, OPEN_EXISTING,
                      FILE_ATTRIBUTE_NORMAL, NULL);

    //
    // If the file handle is invalid, then the com port is open, warn the user
    //
    if (hCom == INVALID_HANDLE_VALUE) {
        return FALSE;
    }

    CloseHandle(hCom);

    return TRUE;
}

ULONG
GetPortName(
    IN  DEVINST PortInst,
    IN  OUT TCHAR *ComName,
    IN  ULONG   ComNameSize
)
{

    HDEVINFO        portInfo;
    SP_DEVINFO_DATA portData;
    TCHAR           portId[MAX_DEVICE_ID_LEN];
    DWORD           dwPortNameSize, dwError;
    HKEY            hDeviceKey;

    dwError = ERROR_SUCCESS;

    if (CM_Get_Device_ID(PortInst,portId,CharSizeOf(portId),0) == CR_SUCCESS) {
        portInfo = SetupDiCreateDeviceInfoList(NULL,NULL);
        if (portInfo != INVALID_HANDLE_VALUE) {

            portData.cbSize = sizeof(SP_DEVINFO_DATA);
            if (SetupDiOpenDeviceInfo(portInfo,portId,NULL,0,&portData)) {

                hDeviceKey = SetupDiOpenDevRegKey(portInfo,&portData,
                                                  DICS_FLAG_GLOBAL,0,
                                                  DIREG_DEV,KEY_READ);
                if (hDeviceKey == INVALID_HANDLE_VALUE) {
                    dwError = GetLastError();
                }
                    
                dwPortNameSize = ComNameSize;

                dwError = RegQueryValueEx(hDeviceKey,
                                          m_szPortName,  // "PortName"
                                          NULL,
                                          NULL,
                                          (PBYTE)ComName,
                                          &dwPortNameSize);
                if (dwError == ERROR_SUCCESS) {
//                    #if DBG
//                    {
//                     TCHAR buf[500];
//                     wsprintf(buf, TEXT("cyzcoins PortName %s\n"),ComName);
//                     DbgOut(buf);
//                    }
//                    #endif
                }

                RegCloseKey(hDeviceKey);

            } else {
                dwError = GetLastError();
            }
            SetupDiDestroyDeviceInfoList(portInfo);

        } else {
            dwError = GetLastError();
        }

    }

    return dwError;
}


ULONG
GetPortData(
    IN  DEVINST PortInst,
    OUT PCHILD_DATA ChildPtr
)
{

    HDEVINFO        portInfo;
    HKEY            hDeviceKey;
    TCHAR           portId[MAX_DEVICE_ID_LEN];
    DWORD           dwPortNameSize,dwError;

    dwError     = ERROR_SUCCESS;
    portInfo    = INVALID_HANDLE_VALUE;
    hDeviceKey  = INVALID_HANDLE_VALUE;

    if (CM_Get_Device_ID(PortInst,portId,CharSizeOf(portId),0) == CR_SUCCESS) {
        portInfo = SetupDiCreateDeviceInfoList(NULL,NULL);
        if (portInfo != INVALID_HANDLE_VALUE) {

            ChildPtr->DeviceInfoData.cbSize = sizeof(SP_DEVINFO_DATA);
            if (SetupDiOpenDeviceInfo(portInfo,
                                      portId,
                                      NULL,
                                      0,
                                      &ChildPtr->DeviceInfoData)) {

                hDeviceKey = SetupDiOpenDevRegKey(portInfo,&ChildPtr->DeviceInfoData,
                                                  DICS_FLAG_GLOBAL,0,
                                                  DIREG_DEV,KEY_ALL_ACCESS);
                if (hDeviceKey == INVALID_HANDLE_VALUE) {
                    dwError = GetLastError();
                } else {
                    
                    dwPortNameSize = sizeof(ChildPtr->szComName);

                    dwError = RegQueryValueEx(hDeviceKey,
                                              m_szPortName,  // "PortName"
                                              NULL,
                                              NULL,
                                              (PBYTE)ChildPtr->szComName,
                                              &dwPortNameSize);
                    if (dwError != ERROR_SUCCESS) {
                        RegCloseKey(hDeviceKey);
                        hDeviceKey = INVALID_HANDLE_VALUE;
                    }
                }

            } else {
                dwError = GetLastError();
            }
            if (dwError != ERROR_SUCCESS) {
                SetupDiDestroyDeviceInfoList(portInfo);
                portInfo = INVALID_HANDLE_VALUE;
            }

        } else {
            dwError = GetLastError();
        }

    }
    ChildPtr->DeviceInfoSet = portInfo;
    ChildPtr->hDeviceKey = hDeviceKey;
    return dwError;
}


void
ClosePortData(
    IN PCHILD_DATA ChildPtr
)
{
    if (ChildPtr->hDeviceKey != INVALID_HANDLE_VALUE) {
        RegCloseKey(ChildPtr->hDeviceKey);
    }
    if (ChildPtr->DeviceInfoSet != INVALID_HANDLE_VALUE) {
        SetupDiDestroyDeviceInfoList(ChildPtr->DeviceInfoSet);
    }
}


/*++

Routine Description: CheckComRange

    Returns TRUE if Com port is in the PortUsage range.

Arguments:

    ParentHwnd:         address of the window
    Params:             where to save the data to
    ComPort:            com port to be checked

Return Value:

    COM_RANGE_OK
    COM_RANGE_TOO_BIG
    COM_RANGE_MEM_ERR

--*/
DWORD
CheckComRange(
    HWND            ParentHwnd,
    PPORT_PARAMS    Params,
    DWORD           nCom
)
{
    PBYTE   newPortUsage;
    DWORD   portsReported;
    HCOMDB  hComDB;
    DWORD   comUsageSize = Params->PortUsageSize*8;

    if (nCom > MAX_COM_PORT) {
        return COM_RANGE_TOO_BIG;
    }

    if (nCom > comUsageSize) {

        if (comUsageSize < 256) {
            comUsageSize = 256;
        } else if (comUsageSize < 1024) {
            comUsageSize = 1024;
        } else if (comUsageSize < 2048) {
            comUsageSize = 2048;
        } else {
            return COM_RANGE_TOO_BIG;
        }
                
        // Re-alloc to COMDB_MAX_PORTS_ARBITRATED
        newPortUsage = (PBYTE) LocalAlloc(LPTR,comUsageSize/8);
        if (newPortUsage == NULL) {
            return COM_RANGE_MEM_ERR;
                     
        } else {
            //DbgOut(TEXT("Params->PortUsage replaced\n"));
            LocalFree(Params->PortUsage);
            Params->PortUsage = newPortUsage;
            Params->PortUsageSize = comUsageSize/8;
            ComDBGetCurrentPortUsage(Params->hComDB,
                                     NULL,
                                     0,
                                     0,
                                     &portsReported
                                     );
            if (comUsageSize > portsReported) {

                if (ComDBResizeDatabase(Params->hComDB, comUsageSize) != ERROR_SUCCESS){
                    //return COM_RANGE_TOO_BIG; // TODO: Replace by a better message.
                }

            }

            ComDBGetCurrentPortUsage(Params->hComDB,
                                     Params->PortUsage,
                                     Params->PortUsageSize,
                                     CDB_REPORT_BITS,
                                     &portsReported
                                     );
        }
    }

    return COM_RANGE_OK;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyzport\cyzhw.h ===
/*--------------------------------------------------------------------------
*
*   Copyright (C) Cyclades Corporation, 2000.
*   All rights reserved.
*
*   Cyclades-Z Enumerator/Port Driver
*	
*   This file:      cyzhw.h
*
*   Description:    This module contains the common hardware declarations 
*                   for the parent driver (cyclad-z) and child driver 
*                   (cyzport).
*
*   Notes:          This code supports Windows 2000 and x86 processor.
*
*   Complies with Cyclades SW Coding Standard rev 1.3.
*
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*   Change History
*
*--------------------------------------------------------------------------
*
*
*--------------------------------------------------------------------------
*/

#ifndef CYZHW_H
#define CYZHW_H


#define MAX_DEVICE_ID_LEN     200	// This definition was copied from NTDDK\inc\cfgmgr32.h
									// Always check if this value was changed. 
									// This is the maximum length for the Hardware ID.

#define CYZPORT_PNP_ID_WSTR         L"Cyclades-Z\\Port"
#define CYZPORT_PNP_ID_STR          "Cyclades-Z\\Port"
#define CYZPORT_DEV_ID_STR          "Cyclades-Z\\Port"

#ifdef POLL
#define CYZ_NUMBER_OF_RESOURCES     2     // Memory, PLX Memory
#else
#define CYZ_NUMBER_OF_RESOURCES     3     // Memory, PLX Memory, IRQ
#endif

// Cyclades-Z hardware
#define CYZ_RUNTIME_LENGTH          0x00000080
#define CYZ_MAX_PORTS	            64


#define CYZ_WRITE_ULONG(Pointer,Data)	\
WRITE_REGISTER_ULONG(Pointer,Data)

#define CYZ_WRITE_UCHAR(Pointer,Data)	\
WRITE_REGISTER_UCHAR(Pointer,Data)

#define CYZ_READ_ULONG(Pointer)			\
READ_REGISTER_ULONG(Pointer)

#define CYZ_READ_UCHAR(Pointer)			\
READ_REGISTER_UCHAR(Pointer)


#endif // endif CYZHW_H
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyzport\cyzimmed.c ===
/*--------------------------------------------------------------------------
*
*   Copyright (C) Cyclades Corporation, 1997-2001.
*   All rights reserved.
*
*   Cyclades-Z Port Driver
*	
*   This file:      cyzimmed.c
*
*   Description:    This module contains the code related to transmit 
*                   immediate character operations in the Cyclades-Z 
*                   Port driver.
*
*   Notes:          This code supports Windows 2000 and Windows XP,
*                   x86 and ia64 processors.
*
*   Complies with Cyclades SW Coding Standard rev 1.3.
*
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*   Change History
*
*--------------------------------------------------------------------------
*
*
*--------------------------------------------------------------------------
*/

#include "precomp.h"

VOID
CyzGetNextImmediate(
    IN PIRP *CurrentOpIrp,
    IN PLIST_ENTRY QueueToProcess,
    IN PIRP *NewIrp,
    IN BOOLEAN CompleteCurrent,
    IN PCYZ_DEVICE_EXTENSION Extension
    );

VOID
CyzCancelImmediate(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    );

BOOLEAN
CyzGiveImmediateToIsr(
    IN PVOID Context
    );

BOOLEAN
CyzGrabImmediateFromIsr(
    IN PVOID Context
    );

BOOLEAN
CyzGiveImmediateToIsr(
    IN PVOID Context
    );

BOOLEAN
CyzGrabImmediateFromIsr(
    IN PVOID Context
    );


#ifdef ALLOC_PRAGMA
#pragma alloc_text(PAGESER,CyzStartImmediate)
#pragma alloc_text(PAGESER,CyzGetNextImmediate)
#pragma alloc_text(PAGESER,CyzCancelImmediate)
#pragma alloc_text(PAGESER,CyzGiveImmediateToIsr)
#pragma alloc_text(PAGESER,CyzGrabImmediateFromIsr)
#endif


VOID
CyzStartImmediate(
    IN PCYZ_DEVICE_EXTENSION Extension
    )

/*++

Routine Description:

    This routine will calculate the timeouts needed for the
    write.  It will then hand the irp off to the isr.  It
    will need to be careful incase the irp has been canceled.

Arguments:

    Extension - A pointer to the serial device extension.

Return Value:

    None.

--*/

{

    KIRQL OldIrql;
    #ifdef POLL
    KIRQL pollIrql;
    #endif
    LARGE_INTEGER TotalTime;
    BOOLEAN UseATimer;
    SERIAL_TIMEOUTS Timeouts;

    CYZ_LOCKED_PAGED_CODE();

    CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyzStartImmediate(%X)\n",
                  Extension);

    UseATimer = FALSE;
    Extension->CurrentImmediateIrp->IoStatus.Status = STATUS_PENDING;
    IoMarkIrpPending(Extension->CurrentImmediateIrp);

    //
    // Calculate the timeout value needed for the
    // request.  Note that the values stored in the
    // timeout record are in milliseconds.  Note that
    // if the timeout values are zero then we won't start
    // the timer.
    //

    KeAcquireSpinLock(
        &Extension->ControlLock,
        &OldIrql
        );

    Timeouts = Extension->Timeouts;

    KeReleaseSpinLock(
        &Extension->ControlLock,
        OldIrql
        );

    if (Timeouts.WriteTotalTimeoutConstant ||
        Timeouts.WriteTotalTimeoutMultiplier) {

        UseATimer = TRUE;

        //
        // We have some timer values to calculate.
        //

        TotalTime.QuadPart 
           = (LONGLONG)((ULONG)Timeouts.WriteTotalTimeoutMultiplier);

        TotalTime.QuadPart += Timeouts.WriteTotalTimeoutConstant;

        TotalTime.QuadPart *= -10000;

    }

    //
    // As the irp might be going to the isr, this is a good time
    // to initialize the reference count.
    //

    SERIAL_INIT_REFERENCE(Extension->CurrentImmediateIrp);

    //
    // We need to see if this irp should be canceled.
    //

    IoAcquireCancelSpinLock(&OldIrql);

    if (Extension->CurrentImmediateIrp->Cancel) {

        PIRP OldIrp = Extension->CurrentImmediateIrp;

        Extension->CurrentImmediateIrp = NULL;
        IoReleaseCancelSpinLock(OldIrql);

        OldIrp->IoStatus.Status = STATUS_CANCELLED;
        OldIrp->IoStatus.Information = 0;

        CyzCompleteRequest(Extension, OldIrp, 0);

    } else {

        //
        // We give the irp to to the isr to write out.
        // We set a cancel routine that knows how to
        // grab the current write away from the isr.
        //

        IoSetCancelRoutine(
            Extension->CurrentImmediateIrp,
            CyzCancelImmediate
            );

        //
        // Since the cancel routine knows about the irp we
        // increment the reference count.
        //

        SERIAL_SET_REFERENCE(
            Extension->CurrentImmediateIrp,
            SERIAL_REF_CANCEL
            );

        if (UseATimer) {

            CyzSetTimer(
                &Extension->ImmediateTotalTimer,
                TotalTime,
                &Extension->TotalImmediateTimeoutDpc,
                Extension
                );

            //
            // Since the timer knows about the irp we increment
            // the reference count.
            //

            SERIAL_SET_REFERENCE(
                Extension->CurrentImmediateIrp,
                SERIAL_REF_TOTAL_TIMER
                );

        }

        #ifdef POLL
        KeAcquireSpinLock(&Extension->PollLock,&pollIrql);
        CyzGiveImmediateToIsr(Extension);
        KeReleaseSpinLock(&Extension->PollLock,pollIrql);		
        #else
        KeSynchronizeExecution(
            Extension->Interrupt,
            CyzGiveImmediateToIsr,
            Extension
            );
        #endif

        IoReleaseCancelSpinLock(OldIrql);

    }

    CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyzStartImmediate\n");

}

VOID
CyzCompleteImmediate(
    IN PKDPC Dpc,
    IN PVOID DeferredContext,
    IN PVOID SystemContext1,
    IN PVOID SystemContext2
    )

{

    PCYZ_DEVICE_EXTENSION Extension = DeferredContext;
    KIRQL OldIrql;

    UNREFERENCED_PARAMETER(SystemContext1);
    UNREFERENCED_PARAMETER(SystemContext2);

    CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyzCompleteImmediate(%X)\n",
                  Extension);

    IoAcquireCancelSpinLock(&OldIrql);

    CyzTryToCompleteCurrent(
        Extension,
        NULL,
        OldIrql,
        STATUS_SUCCESS,
        &Extension->CurrentImmediateIrp,
        NULL,
        NULL,
        &Extension->ImmediateTotalTimer,
        NULL,
        CyzGetNextImmediate,
        SERIAL_REF_ISR
        );

    CyzDpcEpilogue(Extension, Dpc);

    CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyzCompleteImmediate\n");

}

VOID
CyzTimeoutImmediate(
    IN PKDPC Dpc,
    IN PVOID DeferredContext,
    IN PVOID SystemContext1,
    IN PVOID SystemContext2
    )

{

    PCYZ_DEVICE_EXTENSION Extension = DeferredContext;
    KIRQL OldIrql;

    UNREFERENCED_PARAMETER(SystemContext1);
    UNREFERENCED_PARAMETER(SystemContext2);

    CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyzTimeoutImmediate(%X)\n",
                  Extension);

    IoAcquireCancelSpinLock(&OldIrql);

    CyzTryToCompleteCurrent(
        Extension,
        CyzGrabImmediateFromIsr,
        OldIrql,
        STATUS_TIMEOUT,
        &Extension->CurrentImmediateIrp,
        NULL,
        NULL,
        &Extension->ImmediateTotalTimer,
        NULL,
        CyzGetNextImmediate,
        SERIAL_REF_TOTAL_TIMER
        );

    CyzDpcEpilogue(Extension, Dpc);

    CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyzTimeoutImmediate\n");
}

VOID
CyzGetNextImmediate(
    IN PIRP *CurrentOpIrp,
    IN PLIST_ENTRY QueueToProcess,
    IN PIRP *NewIrp,
    IN BOOLEAN CompleteCurrent,
    IN PCYZ_DEVICE_EXTENSION Extension
    )

/*++

Routine Description:

    This routine is used to complete the current immediate
    irp.  Even though the current immediate will always
    be completed and there is no queue associated with it,
    we use this routine so that we can try to satisfy
    a wait for transmit queue empty event.

Arguments:

    CurrentOpIrp - Pointer to the pointer that points to the
                   current write irp.  This should point
                   to CurrentImmediateIrp.

    QueueToProcess - Always NULL.

    NewIrp - Always NULL on exit to this routine.

    CompleteCurrent - Should always be true for this routine.


Return Value:

    None.

--*/

{

    KIRQL OldIrql;
    #ifdef POLL
    KIRQL pollIrql;
    #endif
    PIRP OldIrp = *CurrentOpIrp;

    UNREFERENCED_PARAMETER(QueueToProcess);
    UNREFERENCED_PARAMETER(CompleteCurrent);
    CYZ_LOCKED_PAGED_CODE();

    IoAcquireCancelSpinLock(&OldIrql);

    ASSERT(Extension->TotalCharsQueued >= 1);
    Extension->TotalCharsQueued--;

    *CurrentOpIrp = NULL;
    *NewIrp = NULL;
	
	#ifdef POLL
    KeAcquireSpinLock(&Extension->PollLock,&pollIrql);
    CyzProcessEmptyTransmit(Extension);
    KeReleaseSpinLock(&Extension->PollLock,pollIrql);
	#else
    KeSynchronizeExecution(
        Extension->Interrupt,
        CyzProcessEmptyTransmit,
        Extension
        );
	#endif
    IoReleaseCancelSpinLock(OldIrql);

    CyzCompleteRequest(Extension, OldIrp, IO_SERIAL_INCREMENT);
}

VOID
CyzCancelImmediate(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    )

/*++

Routine Description:

    This routine is used to cancel a irp that is waiting on
    a comm event.

Arguments:

    DeviceObject - Pointer to the device object for this device

    Irp - Pointer to the IRP for the current request

Return Value:

    None.

--*/

{

    PCYZ_DEVICE_EXTENSION Extension = DeviceObject->DeviceExtension;
    CYZ_LOCKED_PAGED_CODE();

    CyzTryToCompleteCurrent(
        Extension,
        CyzGrabImmediateFromIsr,
        Irp->CancelIrql,
        STATUS_CANCELLED,
        &Extension->CurrentImmediateIrp,
        NULL,
        NULL,
        &Extension->ImmediateTotalTimer,
        NULL,
        CyzGetNextImmediate,
        SERIAL_REF_CANCEL
        );

}

BOOLEAN
CyzGiveImmediateToIsr(
    IN PVOID Context
    )

/*++

Routine Description:

    Try to start off the write by slipping it in behind
    a transmit immediate char, or if that isn't available
    and the transmit holding register is empty, "tickle"
    the UART into interrupting with a transmit buffer
    empty.

    NOTE: This routine is called by KeSynchronizeExecution.

    NOTE: This routine assumes that it is called with the
          cancel spin lock held.

Arguments:

    Context - Really a pointer to the device extension.

Return Value:

    This routine always returns FALSE.

--*/

{

    PCYZ_DEVICE_EXTENSION Extension = Context;
    CYZ_LOCKED_PAGED_CODE();

    Extension->TransmitImmediate = TRUE;
    Extension->ImmediateChar =
        *((UCHAR *)
         (Extension->CurrentImmediateIrp->AssociatedIrp.SystemBuffer));

    //
    // The isr now has a reference to the irp.
    //

    SERIAL_SET_REFERENCE(
        Extension->CurrentImmediateIrp,
        SERIAL_REF_ISR
        );

//Removed at 02/07/00 by Fanny. Polling routine will do the transmission.
//    //
//    // Check first to see if a write is going on.  If
//    // there is then we'll just slip in during the write.
//    //
//
//    if (!Extension->WriteLength) {
//
//        //
//        // If there is no normal write transmitting then we
//        // will "re-enable" the transmit holding register empty
//        // interrupt.  The 8250 family of devices will always
//        // signal a transmit holding register empty interrupt
//        // *ANY* time this bit is set to one.  By doing things
//        // this way we can simply use the normal interrupt code
//        // to start off this write.
//        //
//        // We've been keeping track of whether the transmit holding
//        // register is empty so it we only need to do this
//        // if the register is empty.
//        //
//
//        if (Extension->HoldingEmpty) {
//            CyzTxStart(Extension);
//        }
//
//    }

    return FALSE;

}

BOOLEAN
CyzGrabImmediateFromIsr(
    IN PVOID Context
    )

/*++

Routine Description:


    This routine is used to grab the current irp, which could be timing
    out or canceling, from the ISR

    NOTE: This routine is being called from KeSynchronizeExecution.

    NOTE: This routine assumes that the cancel spin lock is held
          when this routine is called.

Arguments:

    Context - Really a pointer to the device extension.

Return Value:

    Always false.

--*/

{

    PCYZ_DEVICE_EXTENSION Extension = Context;
    CYZ_LOCKED_PAGED_CODE();

    if (Extension->TransmitImmediate) {

        Extension->TransmitImmediate = FALSE;

        //
        // Since the isr no longer references this irp, we can
        // decrement it's reference count.
        //

        SERIAL_CLEAR_REFERENCE(
            Extension->CurrentImmediateIrp,
            SERIAL_REF_ISR
            );

    }

    return FALSE;

}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyzport\cyzinit.c ===
/*--------------------------------------------------------------------------
*
*   Copyright (C) Cyclades Corporation, 1997-2001.
*   All rights reserved.
*
*   Cyclades-Z Port Driver
*	
*   This file:      cyzinit.c
*
*   Description:    This module contains the code related to initialization
*                   and unload operations in the Cyclades-Z Port driver.
*
*   Notes:          This code supports Windows 2000 and Windows XP,
*                   x86 and IA64 processors.
*
*   Complies with Cyclades SW Coding Standard rev 1.3.
*
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*   Change History
*
*--------------------------------------------------------------------------
*
*
*--------------------------------------------------------------------------
*/

#include "precomp.h"

//
// This is the actual definition of CyzDebugLevel.
// Note that it is only defined if this is a "debug"
// build.
//
#if DBG
extern ULONG CyzDebugLevel = CYZDBGALL;
#endif

//
// All our global variables except DebugLevel stashed in one
// little package
//
CYZ_GLOBALS CyzGlobals;

static const PHYSICAL_ADDRESS CyzPhysicalZero = {0};

//
// We use this to query into the registry as to whether we
// should break at driver entry.
//

CYZ_REGISTRY_DATA    driverDefaults;

//
// INIT - only needed during init and then can be disposed
// PAGESRP0 - always paged / never locked
// PAGESER - must be locked when a device is open, else paged
//
//
// INIT is used for DriverEntry() specific code
//
// PAGESRP0 is used for code that is not often called and has nothing
// to do with I/O performance.  An example, IRP_MJ_PNP/IRP_MN_START_DEVICE
// support functions
//
// PAGESER is used for code that needs to be locked after an open for both
// performance and IRQL reasons.
//

#ifdef ALLOC_PRAGMA
#pragma alloc_text(INIT,DriverEntry)

#pragma alloc_text(PAGESRP0, CyzRemoveDevObj)
#pragma alloc_text(PAGESRP0, CyzUnload)


//
// PAGESER handled is keyed off of CyzReset, so CyzReset
// must remain in PAGESER for things to work properly
//

#pragma alloc_text(PAGESER, CyzReset)
#pragma alloc_text(PAGESER, CyzCommError)
#endif


NTSTATUS
DriverEntry(
	 IN PDRIVER_OBJECT DriverObject,
	 IN PUNICODE_STRING RegistryPath
	 )
/*--------------------------------------------------------------------------

    The entry point that the system point calls to initialize
    any driver.

    This routine will gather the configuration information,
    report resource usage, attempt to initialize all serial
    devices, connect to interrupts for ports.  If the above
    goes reasonably well it will fill in the dispatch points,
    reset the serial devices and then return to the system.

Arguments:

    DriverObject - Just what it says,  really of little use
    to the driver itself, it is something that the IO system
    cares more about.

    PathToRegistry - points to the entry for this driver
    in the current control set of the registry.

Return Value:

    Always STATUS_SUCCESS

--------------------------------------------------------------------------*/
{
   //
   // Lock the paged code in their frames
   //

   PVOID lockPtr = MmLockPagableCodeSection(CyzReset);

   PAGED_CODE();


   ASSERT(CyzGlobals.PAGESER_Handle == NULL);
#if DBG
   CyzGlobals.PAGESER_Count = 0;
   SerialLogInit();
#endif
   CyzGlobals.PAGESER_Handle = lockPtr;

   CyzGlobals.RegistryPath.MaximumLength = RegistryPath->MaximumLength;
   CyzGlobals.RegistryPath.Length = RegistryPath->Length;
   CyzGlobals.RegistryPath.Buffer
      = ExAllocatePool(PagedPool, CyzGlobals.RegistryPath.MaximumLength);

   if (CyzGlobals.RegistryPath.Buffer == NULL) {
      MmUnlockPagableImageSection(lockPtr);
      return STATUS_INSUFFICIENT_RESOURCES;
   }

   RtlZeroMemory(CyzGlobals.RegistryPath.Buffer,
                 CyzGlobals.RegistryPath.MaximumLength);
   RtlMoveMemory(CyzGlobals.RegistryPath.Buffer,
                 RegistryPath->Buffer, RegistryPath->Length);

   KeInitializeSpinLock(&CyzGlobals.GlobalsSpinLock);
 
   //
   // Initialize all our globals
   //

   InitializeListHead(&CyzGlobals.AllDevObjs);
   
   //
   // Call to find out default values to use for all the devices that the
   // driver controls, including whether or not to break on entry.
   //

   CyzGetConfigDefaults(&driverDefaults, RegistryPath);

#if DBG
   //
   // Set global debug output level
   //
   CyzDebugLevel = driverDefaults.DebugLevel;
#endif

   //
   // Break on entry if requested via registry
   //

   if (driverDefaults.ShouldBreakOnEntry) {
      DbgBreakPoint();
   }


   //
   // Just dump out how big the extension is.
   //

   CyzDbgPrintEx(DPFLTR_INFO_LEVEL, "The number of bytes in the extension "
                 "is: %d\n", sizeof(CYZ_DEVICE_EXTENSION));


   //
   // Initialize the Driver Object with driver's entry points
   //

   DriverObject->DriverUnload                          = CyzUnload;
   DriverObject->DriverExtension->AddDevice            = CyzAddDevice;

   DriverObject->MajorFunction[IRP_MJ_FLUSH_BUFFERS]   = CyzFlush;
   DriverObject->MajorFunction[IRP_MJ_WRITE]           = CyzWrite;
   DriverObject->MajorFunction[IRP_MJ_READ]            = CyzRead;
   DriverObject->MajorFunction[IRP_MJ_DEVICE_CONTROL]  = CyzIoControl;
   DriverObject->MajorFunction[IRP_MJ_INTERNAL_DEVICE_CONTROL]
      = CyzInternalIoControl;
   DriverObject->MajorFunction[IRP_MJ_CREATE]          = CyzCreateOpen;
   DriverObject->MajorFunction[IRP_MJ_CLOSE]           = CyzClose;
   DriverObject->MajorFunction[IRP_MJ_CLEANUP]         = CyzCleanup;
   DriverObject->MajorFunction[IRP_MJ_PNP]             = CyzPnpDispatch;
   DriverObject->MajorFunction[IRP_MJ_POWER]           = CyzPowerDispatch;

   DriverObject->MajorFunction[IRP_MJ_QUERY_INFORMATION]
      = CyzQueryInformationFile;
   DriverObject->MajorFunction[IRP_MJ_SET_INFORMATION]
      = CyzSetInformationFile;

   DriverObject->MajorFunction[IRP_MJ_SYSTEM_CONTROL]
      = CyzSystemControlDispatch;


   //
   // Unlock pageable text
   //
   MmUnlockPagableImageSection(lockPtr);

   return STATUS_SUCCESS;
}




BOOLEAN
CyzCleanLists(IN PVOID Context)
/*++

Routine Description:

    Removes a device object from any of the serial linked lists it may
    appear on.

Arguments:

    Context - Actually a PCYZ_DEVICE_EXTENSION (for the devobj being
              removed).

Return Value:

    Always TRUE

--*/
{
   PCYZ_DEVICE_EXTENSION pDevExt = (PCYZ_DEVICE_EXTENSION)Context;
   PCYZ_DISPATCH pDispatch;
   ULONG i;

   //
   // Remove our entry from the dispatch context
   //

   pDispatch = (PCYZ_DISPATCH)pDevExt->OurIsrContext;

   CyzDbgPrintEx(CYZPNPPOWER, "CLEAN: removing multiport isr "
                 "ext\n");

#ifdef POLL
   if (pDispatch->PollingStarted) {
      pDispatch->Extensions[pDevExt->PortIndex] = NULL;

      for (i = 0; i < pDispatch->NChannels; i++) {

         if (pDevExt->OurIsrContext) {

            if (((PCYZ_DISPATCH)pDevExt->OurIsrContext)->Extensions[i] != NULL) {
               break;
            }
         }
      }

      if (i < pDispatch->NChannels) {
         pDevExt->OurIsrContext = NULL;
      } else {

         BOOLEAN cancelled;

         pDispatch->PollingStarted = FALSE;
         cancelled = KeCancelTimer(&pDispatch->PollingTimer);
         if (cancelled) {
            pDispatch->PollingDrained = TRUE;
         }
      }
   }
#else
   pDispatch->Extensions[pDevExt->PortIndex] = NULL;

   for (i = 0; i < pDispatch->NChannels; i++) {
      if (pDispatch->Extensions[i] != NULL) {
          break;
      }
   }

   if (i < pDispatch->NChannels) {
      // Others are chained on this interrupt, so we don't want to
      // disconnect it.
      pDevExt->Interrupt = NULL;
   }
#endif

   return TRUE;
}



VOID
CyzReleaseResources(IN PCYZ_DEVICE_EXTENSION PDevExt)
/*++

Routine Description:

    Releases resources (not pool) stored in the device extension.

Arguments:

    PDevExt - Pointer to the device extension to release resources from.

Return Value:

    VOID

--*/
{
#ifdef POLL
   KIRQL pollIrql;
   BOOLEAN timerStarted, timerDrained;
   PCYZ_DISPATCH pDispatch = PDevExt->OurIsrContext;
   ULONG pollCount;
#endif
   KIRQL oldIrql;
    
   CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyzReleaseResources(%X)\n",
                 PDevExt);

   //
   // AllDevObjs should never be empty since we have a sentinal
   // Note: serial removes device from AllDevObjs list after calling 
   //       SerialCleanLists. We do it before to make sure no other port will 
   //       be added to share the polling routine or PDevExt->Interrut that is 
   //       on the way to be disconnected.
   //

   KeAcquireSpinLock(&CyzGlobals.GlobalsSpinLock, &oldIrql);

   ASSERT(!IsListEmpty(&PDevExt->AllDevObjs));

   RemoveEntryList(&PDevExt->AllDevObjs);

   KeReleaseSpinLock(&CyzGlobals.GlobalsSpinLock, oldIrql);

   InitializeListHead(&PDevExt->AllDevObjs);
   
   //
   // Remove us from any lists we may be on
   //
#ifdef POLL
   KeAcquireSpinLock(&pDispatch->PollingLock,&pollIrql); //Changed in 11/09/00
   CyzCleanLists(PDevExt);
   timerStarted = pDispatch->PollingStarted;
   timerDrained = pDispatch->PollingDrained;
   KeReleaseSpinLock(&pDispatch->PollingLock,pollIrql); // Changed in 11/09/00

   // If we are the last device, free this memory
   if (!timerStarted) {
      // We are the last device, because timer was cancelled.
      // Let's see if no more pending DPC.
      if (!timerDrained) {
         KeWaitForSingleObject(&pDispatch->PendingDpcEvent, Executive,
                                KernelMode, FALSE, NULL);
      }

      KeAcquireSpinLock(&pDispatch->PollingLock,&pollIrql); // needed to wait for PollingDpc end
      pollCount = InterlockedDecrement(&pDispatch->PollingCount);
      KeReleaseSpinLock(&pDispatch->PollingLock,pollIrql);			
      if (pollCount == 0) {
          CyzDbgPrintEx(CYZPNPPOWER, "Release - freeing multi context\n");
          if (PDevExt->OurIsrContext != NULL) {    // added in DDK build 2072, but 
             ExFreePool(PDevExt->OurIsrContext);   // we already had the free of OurIsrContext.
             PDevExt->OurIsrContext = NULL;        // 
          }
      }
   }
#else
   KeSynchronizeExecution(PDevExt->Interrupt, CyzCleanLists, PDevExt);

   //
   // Stop servicing interrupts if we are the last device
   //

   if (PDevExt->Interrupt != NULL) {

      // Disable interrupts in the PLX
      {
         ULONG intr_reg;

         intr_reg = CYZ_READ_ULONG(&(PDevExt->Runtime)->intr_ctrl_stat);
         intr_reg &= ~(0x00030B00UL);
         CYZ_WRITE_ULONG(&(PDevExt->Runtime)->intr_ctrl_stat,intr_reg);
      }

      CyzDbgPrintEx(CYZPNPPOWER, "Release - disconnecting interrupt %X\n",
                    PDevExt->Interrupt);

      IoDisconnectInterrupt(PDevExt->Interrupt);
      PDevExt->Interrupt = NULL;

      // If we are the last device, free this memory

      CyzDbgPrintEx(CYZPNPPOWER, "Release - freeing multi context\n");
      if (PDevExt->OurIsrContext != NULL) {     // added in DDK build 2072, but 
          ExFreePool(PDevExt->OurIsrContext);   // we already had the free of OurIsrContext.
          PDevExt->OurIsrContext = NULL;        // 
      }   
   
   }
#endif
 
   //
   // Stop handling timers
   //

   CyzCancelTimer(&PDevExt->ReadRequestTotalTimer, PDevExt);
   CyzCancelTimer(&PDevExt->ReadRequestIntervalTimer, PDevExt);
   CyzCancelTimer(&PDevExt->WriteRequestTotalTimer, PDevExt);
   CyzCancelTimer(&PDevExt->ImmediateTotalTimer, PDevExt);
   CyzCancelTimer(&PDevExt->XoffCountTimer, PDevExt);
   CyzCancelTimer(&PDevExt->LowerRTSTimer, PDevExt);

   //
   // Stop servicing DPC's
   //

   CyzRemoveQueueDpc(&PDevExt->CompleteWriteDpc, PDevExt);
   CyzRemoveQueueDpc(&PDevExt->CompleteReadDpc, PDevExt);
   CyzRemoveQueueDpc(&PDevExt->TotalReadTimeoutDpc, PDevExt);
   CyzRemoveQueueDpc(&PDevExt->IntervalReadTimeoutDpc, PDevExt);
   CyzRemoveQueueDpc(&PDevExt->TotalWriteTimeoutDpc, PDevExt);
   CyzRemoveQueueDpc(&PDevExt->CommErrorDpc, PDevExt);
   CyzRemoveQueueDpc(&PDevExt->CompleteImmediateDpc, PDevExt);
   CyzRemoveQueueDpc(&PDevExt->TotalImmediateTimeoutDpc, PDevExt);
   CyzRemoveQueueDpc(&PDevExt->CommWaitDpc, PDevExt);
   CyzRemoveQueueDpc(&PDevExt->XoffCountTimeoutDpc, PDevExt);
   CyzRemoveQueueDpc(&PDevExt->XoffCountCompleteDpc, PDevExt);
   CyzRemoveQueueDpc(&PDevExt->StartTimerLowerRTSDpc, PDevExt);
   CyzRemoveQueueDpc(&PDevExt->PerhapsLowerRTSDpc, PDevExt);



   //
   // If necessary, unmap the device registers.
   //

//   if (PDevExt->BoardMemory) {
//      MmUnmapIoSpace(PDevExt->BoardMemory, PDevExt->BoardMemoryLength);
//      PDevExt->BoardMemory = NULL;
//   }

   if (PDevExt->BoardCtrl) {
      MmUnmapIoSpace(PDevExt->BoardCtrl, sizeof(struct BOARD_CTRL));
      PDevExt->BoardCtrl = NULL;
   }

   if (PDevExt->ChCtrl) {
      MmUnmapIoSpace(PDevExt->ChCtrl,sizeof(struct CH_CTRL));
      PDevExt->ChCtrl = NULL;
   }

   if (PDevExt->BufCtrl) {
      MmUnmapIoSpace(PDevExt->BufCtrl,sizeof(struct BUF_CTRL));
      PDevExt->BufCtrl = NULL;
   }

   if (PDevExt->TxBufaddr) {
      MmUnmapIoSpace(PDevExt->TxBufaddr,PDevExt->TxBufsize);
      PDevExt->TxBufaddr = NULL;
   }

   if (PDevExt->RxBufaddr) {
      MmUnmapIoSpace(PDevExt->RxBufaddr,PDevExt->RxBufsize);
      PDevExt->RxBufaddr = NULL;
   }
   
   if (PDevExt->PtZfIntQueue) {
      MmUnmapIoSpace(PDevExt->PtZfIntQueue,sizeof(struct INT_QUEUE));
      PDevExt->PtZfIntQueue = NULL;
   }  

   if (PDevExt->Runtime) {
      MmUnmapIoSpace(PDevExt->Runtime,
                     PDevExt->RuntimeLength);
      PDevExt->Runtime = NULL;
   }

   CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyzReleaseResources\n");
}


VOID
CyzDisableInterfacesResources(IN PDEVICE_OBJECT PDevObj,
                              BOOLEAN DisableUART)
{
   PCYZ_DEVICE_EXTENSION pDevExt
      = (PCYZ_DEVICE_EXTENSION)PDevObj->DeviceExtension;

   PAGED_CODE();

   CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyzDisableInterfaces(%X, %s)\n",
                 PDevObj, DisableUART ? "TRUE" : "FALSE");

   //
   // Only do these many things if the device has started and still
   // has resources allocated
   //

   if (pDevExt->Flags & CYZ_FLAGS_STARTED) {

       if (!(pDevExt->Flags & CYZ_FLAGS_STOPPED)) {

         if (DisableUART) {
#ifndef POLL
//TODO: Synchronize with Interrupt.
            //
            // Mask off interrupts
            //
            CYZ_WRITE_ULONG(&(pDevExt->ChCtrl)->intr_enable,C_IN_DISABLE); //1.0.0.11
            CyzIssueCmd(pDevExt,C_CM_IOCTL,0L,FALSE);
#endif
         }

         CyzReleaseResources(pDevExt);

      }

      //
      // Remove us from WMI consideration
      //

      IoWMIRegistrationControl(PDevObj, WMIREG_ACTION_DEREGISTER);
   }

   //
   // Undo external names
   //

   CyzUndoExternalNaming(pDevExt);

   CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyzDisableInterfaces\n");
}


NTSTATUS
CyzRemoveDevObj(IN PDEVICE_OBJECT PDevObj)
/*++

Routine Description:

    Removes a serial device object from the system.

Arguments:

    PDevObj - A pointer to the Device Object we want removed.

Return Value:

    Always TRUE

--*/
{
   PCYZ_DEVICE_EXTENSION pDevExt
      = (PCYZ_DEVICE_EXTENSION)PDevObj->DeviceExtension;

   PAGED_CODE();

   CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyzRemoveDevObj(%X)\n", PDevObj);

// Removed by Fanny. These code is called directly from IRP_MN_REMOVE_DEVICE.
//   if (!(pDevExt->DevicePNPAccept & CYZ_PNPACCEPT_SURPRISE_REMOVING)) {
//      //
//      // Disable all external interfaces and release resources
//      //
//
//      CyzDisableInterfacesResources(PDevObj, TRUE);
//   }

   IoDetachDevice(pDevExt->LowerDeviceObject);

   //
   // Free memory allocated in the extension
   //

   if (pDevExt->NtNameForPort.Buffer != NULL) {
      ExFreePool(pDevExt->NtNameForPort.Buffer);
   }

   if (pDevExt->DeviceName.Buffer != NULL) {
      ExFreePool(pDevExt->DeviceName.Buffer);
   }

   if (pDevExt->SymbolicLinkName.Buffer != NULL) {
      ExFreePool(pDevExt->SymbolicLinkName.Buffer);
   }

   if (pDevExt->DosName.Buffer != NULL) {
      ExFreePool(pDevExt->DosName.Buffer);
   }

   if (pDevExt->ObjectDirectory.Buffer) {
      ExFreePool(pDevExt->ObjectDirectory.Buffer);
   }

   //
   // Delete the devobj
   //

   IoDeleteDevice(PDevObj);

   CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyzRemoveDevObj %X\n",
                 STATUS_SUCCESS);

   return STATUS_SUCCESS;
}


VOID
CyzKillPendingIrps(PDEVICE_OBJECT PDevObj)
/*++

Routine Description:

   This routine kills any irps pending for the passed device object.

Arguments:

    PDevObj - Pointer to the device object whose irps must die.

Return Value:

    VOID

--*/
{
   PCYZ_DEVICE_EXTENSION pDevExt = PDevObj->DeviceExtension;
   KIRQL oldIrql;

   CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyzKillPendingIrps(%X)\n",
                 PDevObj);

   //
   // First kill all the reads and writes.
   //

    CyzKillAllReadsOrWrites(PDevObj, &pDevExt->WriteQueue,
                               &pDevExt->CurrentWriteIrp);

    CyzKillAllReadsOrWrites(PDevObj, &pDevExt->ReadQueue,
                               &pDevExt->CurrentReadIrp);

    //
    // Next get rid of purges.
    //

    CyzKillAllReadsOrWrites(PDevObj, &pDevExt->PurgeQueue,
                               &pDevExt->CurrentPurgeIrp);

    //
    // Get rid of any mask operations.
    //

    CyzKillAllReadsOrWrites(PDevObj, &pDevExt->MaskQueue,
                               &pDevExt->CurrentMaskIrp);

    //
    // Now get rid a pending wait mask irp.
    //

    IoAcquireCancelSpinLock(&oldIrql);

    if (pDevExt->CurrentWaitIrp) {

        PDRIVER_CANCEL cancelRoutine;

        cancelRoutine = pDevExt->CurrentWaitIrp->CancelRoutine;
        pDevExt->CurrentWaitIrp->Cancel = TRUE;

        if (cancelRoutine) {

            pDevExt->CurrentWaitIrp->CancelIrql = oldIrql;
            pDevExt->CurrentWaitIrp->CancelRoutine = NULL;

            cancelRoutine(PDevObj, pDevExt->CurrentWaitIrp);

        } else {
            IoReleaseCancelSpinLock(oldIrql);   // Added to fix modem share test 53 freeze
        }

    } else {

        IoReleaseCancelSpinLock(oldIrql);

    }

    //
    // Cancel any pending wait-wake irps
    //

    if (pDevExt->PendingWakeIrp != NULL) {
       IoCancelIrp(pDevExt->PendingWakeIrp);
       pDevExt->PendingWakeIrp = NULL;
    }

    //
    // Finally, dump any stalled IRPS
    //

    CyzKillAllStalled(PDevObj);


    CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyzKillPendingIrps\n");
}


NTSTATUS
CyzInitMultiPort(IN PCYZ_DEVICE_EXTENSION PDevExt,
                 IN PCONFIG_DATA PConfigData, IN PDEVICE_OBJECT PDevObj)
/*++

Routine Description:

    This routine initializes a multiport device by adding a port to an existing
    one.

Arguments:

    PDevExt - pointer to the device extension of the root of the multiport
              device.

    PConfigData - pointer to the config data for the new port

    PDevObj - pointer to the devobj for the new port

Return Value:

    STATUS_SUCCESS on success, appropriate error on failure.

--*/
{
   PCYZ_DEVICE_EXTENSION pNewExt
      = (PCYZ_DEVICE_EXTENSION)PDevObj->DeviceExtension;
   NTSTATUS status;

   PAGED_CODE();


   CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyzInitMultiPort(%X, %X, %X)\n",
                 PDevExt, PConfigData, PDevObj);

   //
   // Allow him to share OurIsrContext and interrupt object
   //

   pNewExt->OurIsrContext = PDevExt->OurIsrContext;
#ifndef POLL
   pNewExt->Interrupt = PDevExt->Interrupt;
#endif
   //
   // First, see if we can initialize the one we have found
   //

   status = CyzInitController(PDevObj, PConfigData);

   if (!NT_SUCCESS(status)) {
      CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyzInitMultiPort (1) %X\n",
                    status);
      return status;
   }

   CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyzInitMultiPort (3) %X\n",
                 STATUS_SUCCESS);

   return STATUS_SUCCESS;
}



NTSTATUS
CyzInitController(IN PDEVICE_OBJECT PDevObj, IN PCONFIG_DATA PConfigData)
/*++

Routine Description:

    Really too many things to mention here.  In general initializes
    kernel synchronization structures, allocates the typeahead buffer,
    sets up defaults, etc.

Arguments:

    PDevObj       - Device object for the device to be started

    PConfigData   - Pointer to a record for a single port.

Return Value:

    STATUS_SUCCCESS if everything went ok.  A !NT_SUCCESS status
    otherwise.

--*/

{

   PCYZ_DEVICE_EXTENSION pDevExt = PDevObj->DeviceExtension;

   //
   // Holds the NT Status that is returned from each call to the
   // kernel and executive.
   //

   NTSTATUS status = STATUS_SUCCESS;

   BOOLEAN allocedDispatch = FALSE;
   PCYZ_DISPATCH pDispatch = NULL;
   BOOLEAN firstTimeThisBoard;

   struct FIRM_ID *pt_firm_id;
   struct ZFW_CTRL *zfw_ctrl;
   struct BOARD_CTRL *board_ctrl;
   struct BUF_CTRL *buf_ctrl;
   struct CH_CTRL *ch_ctrl;
   struct INT_QUEUE *zf_int_queue;
   PUCHAR tx_buf;
   PUCHAR rx_buf;
   PUCHAR BoardMemory;
   PHYSICAL_ADDRESS board_ctrl_phys;
   PHYSICAL_ADDRESS buf_ctrl_phys;
   PHYSICAL_ADDRESS ch_ctrl_phys;
   PHYSICAL_ADDRESS zf_int_queue_phys;
   PHYSICAL_ADDRESS tx_buf_phys;
   PHYSICAL_ADDRESS rx_buf_phys;


#ifdef POLL
   BOOLEAN incPoll = FALSE;
#endif

   PAGED_CODE();


   CyzDbgPrintEx(CYZDIAG1, "Initializing for configuration record of %wZ\n",
                 &pDevExt->DeviceName);
   
   if (pDevExt->OurIsrContext == NULL) {

      if ((pDevExt->OurIsrContext
            = ExAllocatePool(NonPagedPool,sizeof(CYZ_DISPATCH))) == NULL) {
         status = STATUS_INSUFFICIENT_RESOURCES;
         goto ExtensionCleanup;
      }
      RtlZeroMemory(pDevExt->OurIsrContext,sizeof(CYZ_DISPATCH));

      allocedDispatch = TRUE;
      firstTimeThisBoard = TRUE;
   } else {
      firstTimeThisBoard = FALSE;
   }
   
   //
   // Initialize the timers used to timeout operations.
   //

   KeInitializeTimer(&pDevExt->ReadRequestTotalTimer);
   KeInitializeTimer(&pDevExt->ReadRequestIntervalTimer);
   KeInitializeTimer(&pDevExt->WriteRequestTotalTimer);
   KeInitializeTimer(&pDevExt->ImmediateTotalTimer);
   KeInitializeTimer(&pDevExt->XoffCountTimer);
   KeInitializeTimer(&pDevExt->LowerRTSTimer);


   //
   // Intialialize the dpcs that will be used to complete
   // or timeout various IO operations.
   //

   KeInitializeDpc(&pDevExt->CompleteWriteDpc, CyzCompleteWrite, pDevExt);
   KeInitializeDpc(&pDevExt->CompleteReadDpc, CyzCompleteRead, pDevExt);
   KeInitializeDpc(&pDevExt->TotalReadTimeoutDpc, CyzReadTimeout, pDevExt);
   KeInitializeDpc(&pDevExt->IntervalReadTimeoutDpc, CyzIntervalReadTimeout,
                   pDevExt);
   KeInitializeDpc(&pDevExt->TotalWriteTimeoutDpc, CyzWriteTimeout, pDevExt);
   KeInitializeDpc(&pDevExt->CommErrorDpc, CyzCommError, pDevExt);
   KeInitializeDpc(&pDevExt->CompleteImmediateDpc, CyzCompleteImmediate,
                   pDevExt);
   KeInitializeDpc(&pDevExt->TotalImmediateTimeoutDpc, CyzTimeoutImmediate,
                   pDevExt);
   KeInitializeDpc(&pDevExt->CommWaitDpc, CyzCompleteWait, pDevExt);
   KeInitializeDpc(&pDevExt->XoffCountTimeoutDpc, CyzTimeoutXoff, pDevExt);
   KeInitializeDpc(&pDevExt->XoffCountCompleteDpc, CyzCompleteXoff, pDevExt);
   KeInitializeDpc(&pDevExt->StartTimerLowerRTSDpc, CyzStartTimerLowerRTS,
                   pDevExt);
   KeInitializeDpc(&pDevExt->PerhapsLowerRTSDpc, CyzInvokePerhapsLowerRTS,
                   pDevExt);
   KeInitializeDpc(&pDevExt->IsrUnlockPagesDpc, CyzUnlockPages, pDevExt);

#if 0 // DBG
   //
   // Init debug stuff
   //

   pDevExt->DpcQueued[0].Dpc = &pDevExt->CompleteWriteDpc;
   pDevExt->DpcQueued[1].Dpc = &pDevExt->CompleteReadDpc;
   pDevExt->DpcQueued[2].Dpc = &pDevExt->TotalReadTimeoutDpc;
   pDevExt->DpcQueued[3].Dpc = &pDevExt->IntervalReadTimeoutDpc;
   pDevExt->DpcQueued[4].Dpc = &pDevExt->TotalWriteTimeoutDpc;
   pDevExt->DpcQueued[5].Dpc = &pDevExt->CommErrorDpc;
   pDevExt->DpcQueued[6].Dpc = &pDevExt->CompleteImmediateDpc;
   pDevExt->DpcQueued[7].Dpc = &pDevExt->TotalImmediateTimeoutDpc;
   pDevExt->DpcQueued[8].Dpc = &pDevExt->CommWaitDpc;
   pDevExt->DpcQueued[9].Dpc = &pDevExt->XoffCountTimeoutDpc;
   pDevExt->DpcQueued[10].Dpc = &pDevExt->XoffCountCompleteDpc;
   pDevExt->DpcQueued[11].Dpc = &pDevExt->StartTimerLowerRTSDpc;
   pDevExt->DpcQueued[12].Dpc = &pDevExt->PerhapsLowerRTSDpc;
   pDevExt->DpcQueued[13].Dpc = &pDevExt->IsrUnlockPagesDpc;

#endif


   //
   // Map the memory for the control registers for the serial device
   // into virtual memory.
   //
   pDevExt->Runtime = MmMapIoSpace(PConfigData->TranslatedRuntime,
                                   PConfigData->RuntimeLength,
                                   FALSE);
   //******************************
   // Error injection
   //if (pDevExt->Runtime) {
   //   MmUnmapIoSpace(pDevExt->Runtime, PConfigData->RuntimeLength);
   //   pDevExt->Runtime = NULL;
   //}
   //******************************

   if (!pDevExt->Runtime) {

      CyzLogError(
                    PDevObj->DriverObject,
                    pDevExt->DeviceObject,
                    PConfigData->PhysicalBoardMemory,
                    CyzPhysicalZero,
                    0,
                    0,
                    0,
                    PConfigData->PortIndex+1,
                    STATUS_SUCCESS,
                    CYZ_RUNTIME_NOT_MAPPED,
                    pDevExt->DeviceName.Length+sizeof(WCHAR),
                    pDevExt->DeviceName.Buffer,
                    0,
                    NULL
                    );

      CyzDbgPrintEx(DPFLTR_WARNING_LEVEL, "Could not map Runtime memory for device "
                    "registers for %wZ\n", &pDevExt->DeviceName);

      status = STATUS_NONE_MAPPED;
      goto ExtensionCleanup;

   }
   

   BoardMemory = MmMapIoSpace(PConfigData->TranslatedBoardMemory,
                                       PConfigData->BoardMemoryLength,
                                       FALSE);

   //******************************
   // Error injection
   //if (pDevExt->BoardMemory) {
   //   MmUnmapIoSpace(pDevExt->BoardMemory, PConfigData->BoardMemoryLength);
   //   pDevExt->BoardMemory = NULL;
   //}
   //******************************

   if (!BoardMemory) {

      CyzLogError(
                    PDevObj->DriverObject,
                    pDevExt->DeviceObject,
                    PConfigData->PhysicalBoardMemory,
                    CyzPhysicalZero,
                    0,
                    0,
                    0,
                    PConfigData->PortIndex+1,
                    STATUS_SUCCESS,
                    CYZ_BOARD_NOT_MAPPED,
                    pDevExt->DeviceName.Length+sizeof(WCHAR),
                    pDevExt->DeviceName.Buffer,
                    0,
                    NULL
                    );

      CyzDbgPrintEx(DPFLTR_WARNING_LEVEL, "Could not map Board memory for device "
                    "registers for %wZ\n", &pDevExt->DeviceName);

      status = STATUS_NONE_MAPPED;
      goto ExtensionCleanup;

   }

   pDevExt->RuntimeAddressSpace   = PConfigData->RuntimeAddressSpace;
   pDevExt->OriginalRuntimeMemory = PConfigData->PhysicalRuntime;
   pDevExt->RuntimeLength         = PConfigData->RuntimeLength;

   pDevExt->BoardMemoryAddressSpace  = PConfigData->BoardMemoryAddressSpace;
   pDevExt->OriginalBoardMemory      = PConfigData->PhysicalBoardMemory;
   pDevExt->BoardMemoryLength        = PConfigData->BoardMemoryLength;

   //
   // Shareable interrupt?
   //

#ifndef POLL
   pDevExt->InterruptShareable = TRUE;
#endif

   //
   // Save off the interface type and the bus number.
   //

   pDevExt->InterfaceType = PConfigData->InterfaceType;
   pDevExt->BusNumber     = PConfigData->BusNumber;
   pDevExt->PortIndex     = PConfigData->PortIndex;
   pDevExt->PPPaware      = (BOOLEAN)PConfigData->PPPaware;
   pDevExt->ReturnStatusAfterFwEmpty = (BOOLEAN)PConfigData->WriteComplete;

#ifndef POLL
   //
   // Get the translated interrupt vector, level, and affinity
   //

   pDevExt->OriginalIrql      = PConfigData->OriginalIrql;
   pDevExt->OriginalVector    = PConfigData->OriginalVector;


   //
   // PnP uses the passed translated values rather than calling
   // HalGetInterruptVector()
   //

   pDevExt->Vector = PConfigData->TrVector;
   pDevExt->Irql = (UCHAR)PConfigData->TrIrql;

   //
   // Set up the Isr.
   //

   pDevExt->OurIsr = CyzIsr;
#endif

   //
   // Before we test whether the port exists (which will enable the FIFO)
   // convert the rx trigger value to what should be used in the register.
   //
   // If a bogus value was given - crank them down to 1.
   //

   switch (PConfigData->RxFIFO) {

   case 1:

      pDevExt->RxFifoTrigger = SERIAL_1_BYTE_HIGH_WATER;
      break;

   case 4:

      pDevExt->RxFifoTrigger = SERIAL_4_BYTE_HIGH_WATER;
      break;

   case 8:

      pDevExt->RxFifoTrigger = SERIAL_8_BYTE_HIGH_WATER;
      break;

   case 14:

      pDevExt->RxFifoTrigger = SERIAL_14_BYTE_HIGH_WATER;
      break;

   default:

      pDevExt->RxFifoTrigger = SERIAL_1_BYTE_HIGH_WATER;
      break;

   }


   if ((PConfigData->TxFIFO > 16) ||
       (PConfigData->TxFIFO < 1)) {

      pDevExt->TxFifoAmount = 1;

   } else {

      pDevExt->TxFifoAmount = PConfigData->TxFIFO;

   }

   pt_firm_id   = (struct FIRM_ID *) (BoardMemory + ID_ADDRESS);
   zfw_ctrl     = (struct ZFW_CTRL *)(BoardMemory + CYZ_READ_ULONG(&pt_firm_id->zfwctrl_addr));
   board_ctrl   = &zfw_ctrl->board_ctrl;
   ch_ctrl      = &zfw_ctrl->ch_ctrl[pDevExt->PortIndex];
   buf_ctrl     = &zfw_ctrl->buf_ctrl[pDevExt->PortIndex];
   tx_buf       = BoardMemory + CYZ_READ_ULONG(&buf_ctrl->tx_bufaddr);
   rx_buf       = BoardMemory + CYZ_READ_ULONG(&buf_ctrl->rx_bufaddr);
   zf_int_queue = (struct INT_QUEUE *)(BoardMemory + 
                                       CYZ_READ_ULONG(&(board_ctrl)->zf_int_queue_addr));

   board_ctrl_phys = MmGetPhysicalAddress(board_ctrl);
   ch_ctrl_phys    = MmGetPhysicalAddress(ch_ctrl);
   buf_ctrl_phys   = MmGetPhysicalAddress(buf_ctrl);
   tx_buf_phys     = MmGetPhysicalAddress(tx_buf);
   rx_buf_phys     = MmGetPhysicalAddress(rx_buf);
   zf_int_queue_phys = MmGetPhysicalAddress(zf_int_queue);

   MmUnmapIoSpace(BoardMemory, PConfigData->BoardMemoryLength);

   pDevExt->BoardCtrl = MmMapIoSpace(board_ctrl_phys,
                                     sizeof(struct BOARD_CTRL),
                                     FALSE);
   
   if (pDevExt->BoardCtrl == NULL) {

      CyzLogError(
                    PDevObj->DriverObject,
                    pDevExt->DeviceObject,
                    PConfigData->PhysicalBoardMemory,
                    CyzPhysicalZero,
                    0,
                    0,
                    0,
                    PConfigData->PortIndex+1,
                    STATUS_SUCCESS,
                    CYZ_BOARD_CTRL_NOT_MAPPED,
                    pDevExt->DeviceName.Length+sizeof(WCHAR),
                    pDevExt->DeviceName.Buffer,
                    0,
                    NULL
                    );

      CyzDbgPrintEx(DPFLTR_WARNING_LEVEL, "Could not map BoardCtrl for %wZ\n",
                    &pDevExt->DeviceName);

      status = STATUS_NONE_MAPPED;
      goto ExtensionCleanup;

   }

   pDevExt->ChCtrl = MmMapIoSpace(ch_ctrl_phys,
                                  sizeof(struct CH_CTRL),
                                  FALSE);

   if (pDevExt->ChCtrl == NULL) {

      CyzLogError(
                    PDevObj->DriverObject,
                    pDevExt->DeviceObject,
                    PConfigData->PhysicalBoardMemory,
                    CyzPhysicalZero,
                    0,
                    0,
                    0,
                    PConfigData->PortIndex+1,
                    STATUS_SUCCESS,
                    CYZ_CH_CTRL_NOT_MAPPED,
                    pDevExt->DeviceName.Length+sizeof(WCHAR),
                    pDevExt->DeviceName.Buffer,
                    0,
                    NULL
                    );

      CyzDbgPrintEx(DPFLTR_WARNING_LEVEL, "Could not map Board memory ChCtrl "
                    "for %wZ\n",&pDevExt->DeviceName);

      status = STATUS_NONE_MAPPED;
      goto ExtensionCleanup;

   }
                                  
   pDevExt->BufCtrl = MmMapIoSpace(buf_ctrl_phys,
                                  sizeof(struct BUF_CTRL),
                                  FALSE);

   if (pDevExt->BufCtrl == NULL) {

      CyzLogError(
                    PDevObj->DriverObject,
                    pDevExt->DeviceObject,
                    PConfigData->PhysicalBoardMemory,
                    CyzPhysicalZero,
                    0,
                    0,
                    0,
                    PConfigData->PortIndex+1,
                    STATUS_SUCCESS,
                    CYZ_BUF_CTRL_NOT_MAPPED,
                    pDevExt->DeviceName.Length+sizeof(WCHAR),
                    pDevExt->DeviceName.Buffer,
                    0,
                    NULL
                    );

      CyzDbgPrintEx(DPFLTR_WARNING_LEVEL, "Could not map Board memory BufCtrl "
                    "for %wZ\n",&pDevExt->DeviceName);

      status = STATUS_NONE_MAPPED;
      goto ExtensionCleanup;

   }

   buf_ctrl = pDevExt->BufCtrl;
   pDevExt->TxBufsize = CYZ_READ_ULONG(&buf_ctrl->tx_bufsize);
   pDevExt->RxBufsize = CYZ_READ_ULONG(&buf_ctrl->rx_bufsize);
   pDevExt->TxBufaddr = MmMapIoSpace(tx_buf_phys,
                                     pDevExt->TxBufsize,
                                     FALSE);

   if (pDevExt->TxBufaddr == NULL) {

      CyzLogError(
                    PDevObj->DriverObject,
                    pDevExt->DeviceObject,
                    PConfigData->PhysicalBoardMemory,
                    CyzPhysicalZero,
                    0,
                    0,
                    0,
                    PConfigData->PortIndex+1,
                    STATUS_SUCCESS,
                    CYZ_TX_BUF_NOT_MAPPED,
                    pDevExt->DeviceName.Length+sizeof(WCHAR),
                    pDevExt->DeviceName.Buffer,
                    0,
                    NULL
                    );

      CyzDbgPrintEx(DPFLTR_WARNING_LEVEL, "Could not map Board memory TxBuf "
                    "for %wZ\n",&pDevExt->DeviceName);

      status = STATUS_NONE_MAPPED;
      goto ExtensionCleanup;

   }

   pDevExt->RxBufaddr = MmMapIoSpace(rx_buf_phys,
                                     pDevExt->RxBufsize,
                                     FALSE);

   if (pDevExt->RxBufaddr == NULL) {

      CyzLogError(
                    PDevObj->DriverObject,
                    pDevExt->DeviceObject,
                    PConfigData->PhysicalBoardMemory,
                    CyzPhysicalZero,
                    0,
                    0,
                    0,
                    PConfigData->PortIndex+1,
                    STATUS_SUCCESS,
                    CYZ_RX_BUF_NOT_MAPPED,
                    pDevExt->DeviceName.Length+sizeof(WCHAR),
                    pDevExt->DeviceName.Buffer,
                    0,
                    NULL
                    );

      CyzDbgPrintEx(DPFLTR_WARNING_LEVEL, "Could not map Board memory RxBuf "
                    "for %wZ\n",&pDevExt->DeviceName);

      status = STATUS_NONE_MAPPED;
      goto ExtensionCleanup;

   }

   pDevExt->PtZfIntQueue = MmMapIoSpace(zf_int_queue_phys,
                                        sizeof(struct INT_QUEUE),
                                        FALSE);
   if (pDevExt->PtZfIntQueue == NULL) {

      CyzLogError(
                    PDevObj->DriverObject,
                    pDevExt->DeviceObject,
                    PConfigData->PhysicalBoardMemory,
                    CyzPhysicalZero,
                    0,
                    0,
                    0,
                    PConfigData->PortIndex+1,
                    STATUS_SUCCESS,
                    CYZ_INT_QUEUE_NOT_MAPPED,
                    pDevExt->DeviceName.Length+sizeof(WCHAR),
                    pDevExt->DeviceName.Buffer,
                    0,
                    NULL
                    );

      CyzDbgPrintEx(DPFLTR_WARNING_LEVEL, "Could not map Board memory IntQueue"
                    " for %wZ\n",&pDevExt->DeviceName);

      status = STATUS_NONE_MAPPED;
      goto ExtensionCleanup;

   }

   if (!CyzDoesPortExist(
                         pDevExt,
                         &pDevExt->DeviceName
                         )) {

      //
      // We couldn't verify that there was actually a
      // port. No need to log an error as the port exist
      // code will log exactly why.
      //

      CyzDbgPrintEx(DPFLTR_WARNING_LEVEL, "DoesPortExist test failed for "
                    "%wZ\n", &pDevExt->DeviceName);

      status = STATUS_NO_SUCH_DEVICE;
      goto ExtensionCleanup;

   }

   //
   // Set up the default device control fields.
   // Note that if the values are changed after
   // the file is open, they do NOT revert back
   // to the old value at file close.
   //

   pDevExt->SpecialChars.XonChar      = CYZ_DEF_XON;
   pDevExt->SpecialChars.XoffChar     = CYZ_DEF_XOFF;
   pDevExt->HandFlow.ControlHandShake = SERIAL_DTR_CONTROL;
   pDevExt->HandFlow.FlowReplace      = SERIAL_RTS_CONTROL;


   //
   // Default Line control protocol. 7E1
   //
   // Seven data bits.
   // Even parity.
   // 1 Stop bits.
   //
   pDevExt->CommParity = C_PR_EVEN;
   pDevExt->CommDataLen = C_DL_CS7 | C_DL_1STOP;
   pDevExt->ValidDataMask = 0x7f;
   pDevExt->CurrentBaud   = 1200;


   //
   // We set up the default xon/xoff limits.
   //
   // This may be a bogus value.  It looks like the BufferSize
   // is not set up until the device is actually opened.
   //

   pDevExt->HandFlow.XoffLimit    = pDevExt->BufferSize >> 3;
   pDevExt->HandFlow.XonLimit     = pDevExt->BufferSize >> 1;

   pDevExt->BufferSizePt8 = ((3*(pDevExt->BufferSize>>2))+
                                  (pDevExt->BufferSize>>4));

   CyzDbgPrintEx(CYZDIAG1, " The default interrupt read buffer size is: %d\n"
                 "------  The XoffLimit is                         : %d\n"
                 "------  The XonLimit is                          : %d\n"
                 "------  The pt 8 size is                         : %d\n",
                 pDevExt->BufferSize, pDevExt->HandFlow.XoffLimit,
                 pDevExt->HandFlow.XonLimit, pDevExt->BufferSizePt8);

   pDevExt->SupportedBauds = SERIAL_BAUD_075 | SERIAL_BAUD_110 |
               SERIAL_BAUD_134_5 |	SERIAL_BAUD_150 | SERIAL_BAUD_300 |	
               SERIAL_BAUD_600 | SERIAL_BAUD_1200 | SERIAL_BAUD_1800 | 
               SERIAL_BAUD_2400 | SERIAL_BAUD_4800 | SERIAL_BAUD_7200 | 
               SERIAL_BAUD_9600 | SERIAL_BAUD_14400 | SERIAL_BAUD_19200 | 
               SERIAL_BAUD_38400 | SERIAL_BAUD_56K	 | SERIAL_BAUD_57600 | 
               SERIAL_BAUD_115200 | SERIAL_BAUD_128K | SERIAL_BAUD_USER;

   //
   // Mark this device as not being opened by anyone.  We keep a
   // variable around so that spurious interrupts are easily
   // dismissed by the ISR.
   //

   pDevExt->DeviceIsOpened = FALSE;

   //
   // Store values into the extension for interval timing.
   //

   //
   // If the interval timer is less than a second then come
   // in with a short "polling" loop.
   //
   // For large (> then 2 seconds) use a 1 second poller.
   //

   pDevExt->ShortIntervalAmount.QuadPart  = -1;
   pDevExt->LongIntervalAmount.QuadPart   = -10000000;
   pDevExt->CutOverAmount.QuadPart        = 200000000;

   // Initialize for the Isr Dispatch

   pDispatch = pDevExt->OurIsrContext;
#ifndef POLL
   pDispatch->Extensions[pDevExt->PortIndex] = pDevExt;
   pDispatch->PoweredOn[pDevExt->PortIndex] = TRUE;
#endif

   if (firstTimeThisBoard) {

#ifdef POLL
      ULONG intr_reg;
      ULONG pollingCycle;

      pollingCycle = 10;   // default = 20ms
      pDispatch->PollingTime.LowPart = pollingCycle * 10000;
      pDispatch->PollingTime.HighPart = 0;
      pDispatch->PollingTime = RtlLargeIntegerNegate(pDispatch->PollingTime);
      pDispatch->PollingPeriod = pollingCycle;
      KeInitializeSpinLock(&pDispatch->PollingLock);
      KeInitializeTimer(&pDispatch->PollingTimer);
      KeInitializeDpc(&pDispatch->PollingDpc, CyzPollingDpc, pDispatch);
      KeInitializeEvent(&pDispatch->PendingDpcEvent, SynchronizationEvent, FALSE);
      intr_reg = CYZ_READ_ULONG(&(pDevExt->Runtime)->intr_ctrl_stat);
      //intr_reg |= (0x00030800UL);
      intr_reg |= (0x00030000UL);
      CYZ_WRITE_ULONG(&(pDevExt->Runtime)->intr_ctrl_stat,intr_reg);
#else
      CyzResetBoard(pDevExt); //Shouldn't we put this line on the POLL version?
#endif
      pDispatch->NChannels = CYZ_READ_ULONG(&(pDevExt->BoardCtrl)->n_channel);

   }

#ifdef POLL
   InterlockedIncrement(&pDispatch->PollingCount);
   incPoll = TRUE;
#endif

   //
   // Common error path cleanup.  If the status is
   // bad, get rid of the device extension, device object
   // and any memory associated with it.
   //

ExtensionCleanup: ;
   if (!NT_SUCCESS(status)) {

#ifdef POLL
      if (incPoll) {
         InterlockedDecrement(&pDispatch->PollingCount);
      }
#else
      if (pDispatch) {
         pDispatch->Extensions[pDevExt->PortIndex] = NULL;
      }
#endif

      if (allocedDispatch) {
         ExFreePool(pDevExt->OurIsrContext);
         pDevExt->OurIsrContext = NULL;
      }

      if (pDevExt->Runtime) {
         MmUnmapIoSpace(pDevExt->Runtime, PConfigData->RuntimeLength);
         pDevExt->Runtime = NULL;
      }

      if (pDevExt->BoardCtrl) {
         MmUnmapIoSpace(pDevExt->BoardCtrl, sizeof(struct BOARD_CTRL));
         pDevExt->BoardCtrl = NULL;
      }

      if (pDevExt->ChCtrl) {
         MmUnmapIoSpace(pDevExt->ChCtrl,sizeof(struct CH_CTRL));
         pDevExt->ChCtrl = NULL;
      }

      if (pDevExt->BufCtrl) {
         MmUnmapIoSpace(pDevExt->BufCtrl,sizeof(struct BUF_CTRL));
         pDevExt->BufCtrl = NULL;
      }

      if (pDevExt->TxBufaddr) {
         MmUnmapIoSpace(pDevExt->TxBufaddr,pDevExt->TxBufsize);
         pDevExt->TxBufaddr = NULL;
      }

      if (pDevExt->RxBufaddr) {
         MmUnmapIoSpace(pDevExt->RxBufaddr,pDevExt->RxBufsize);
         pDevExt->RxBufaddr = NULL;
      }

      if (pDevExt->PtZfIntQueue) {
         MmUnmapIoSpace(pDevExt->PtZfIntQueue,sizeof(struct INT_QUEUE));
         pDevExt->PtZfIntQueue = NULL;
      }
   }

   return status;

}


BOOLEAN
CyzDoesPortExist(
                  IN PCYZ_DEVICE_EXTENSION Extension,
                  IN PUNICODE_STRING InsertString
                )

/*++

Routine Description:

    This routine examines several of what might be the serial device
    registers.  It ensures that the bits that should be zero are zero.

    In addition, this routine will determine if the device supports
    fifo's.  If it does it will enable the fifo's and turn on a boolean
    in the extension that indicates the fifo's presence.

    NOTE: If there is indeed a serial port at the address specified
          it will absolutely have interrupts inhibited upon return
          from this routine.

    NOTE: Since this routine should be called fairly early in
          the device driver initialization, the only element
          that needs to be filled in is the base register address.

    NOTE: These tests all assume that this code is the only
          code that is looking at these ports or this memory.

          This is a not to unreasonable assumption even on
          multiprocessor systems.

Arguments:

    Extension - A pointer to a serial device extension.
    InsertString - String to place in an error log entry.

Return Value:

    Will return true if the port really exists, otherwise it
    will return false.

--*/

{

   return TRUE;

}


VOID
CyzResetBoard( PCYZ_DEVICE_EXTENSION Extension )
/*++

Routine Description:

    This routine examines several of what might be the serial device
    registers.  It ensures that the bits that should be zero are zero.

    In addition, this routine will determine if the device supports
    fifo's.  If it does it will enable the fifo's and turn on a boolean
    in the extension that indicates the fifo's presence.

    NOTE: If there is indeed a serial port at the address specified
          it will absolutely have interrupts inhibited upon return
          from this routine.

    NOTE: Since this routine should be called fairly early in
          the device driver initialization, the only element
          that needs to be filled in is the base register address.

    NOTE: These tests all assume that this code is the only
          code that is looking at these ports or this memory.

          This is a not to unreasonable assumption even on
          multiprocessor systems.

Arguments:

    Extension - A pointer to a serial device extension.
    InsertString - String to place in an error log entry.

Return Value:

    Will return true if the port really exists, otherwise it
    will return false.

--*/

{

#ifndef POLL
   //CyzIssueCmd(Extension,C_CM_SETNNDT,20L,FALSE); Removed. Let's firmware calculate NNDT.
#endif

   //CyzIssueCmd(Extension,C_CM_RESET,0L,FALSE); // Added in 1.0.0.11

}


BOOLEAN
CyzReset(
	 IN PVOID Context
	 )
/*--------------------------------------------------------------------------
	 CyzReset()

	 Routine Description: This places the hardware in a standard
    configuration. This assumes that it is called at interrupt level.

    Arguments:

	 Context - The device extension for serial device being managed.

    Return Value: Always FALSE.
--------------------------------------------------------------------------*/
{
    PCYZ_DEVICE_EXTENSION extension = Context;
    struct CH_CTRL *ch_ctrl = extension->ChCtrl;
    struct BUF_CTRL *buf_ctrl = extension->BufCtrl;
    CYZ_IOCTL_BAUD s;

    //For interrupt mode: extension->RxFifoTriggerUsed = FALSE; (from cyyport)

    // set the line control, modem control, and the baud to what they should be.

    CyzSetLineControl(extension);

    CyzSetupNewHandFlow(extension,&extension->HandFlow);

    CyzHandleModemUpdate(extension,FALSE,0);
	
    s.Extension = extension;
    s.Baud = extension->CurrentBaud;
    CyzSetBaud(&s);
		
    //This flag is configurable from the Advanced Port Settings.
    //extension->ReturnStatusAfterFwEmpty = TRUE; // We will loose performance, but it will be
    //                                            // closer to serial driver.
    extension->ReturnWriteStatus = FALSE;
    extension->CmdFailureLog = TRUE;

    // Enable port
    CYZ_WRITE_ULONG(&ch_ctrl->op_mode,C_CH_ENABLE);
#ifdef POLL
    CYZ_WRITE_ULONG(&ch_ctrl->intr_enable,C_IN_MDCD | C_IN_MCTS | C_IN_MRI 
							| C_IN_MDSR	| C_IN_RXBRK  | C_IN_PR_ERROR
							| C_IN_FR_ERROR	| C_IN_OVR_ERROR | C_IN_RXOFL
							| C_IN_IOCTLW | C_IN_TXFEMPTY);
#else
    //CYZ_WRITE_ULONG(&buf_ctrl->rx_threshold,1024);
    CYZ_WRITE_ULONG(&ch_ctrl->intr_enable,C_IN_MDCD | C_IN_MCTS | C_IN_MRI 
							| C_IN_MDSR	| C_IN_RXBRK  | C_IN_PR_ERROR
							| C_IN_FR_ERROR	| C_IN_OVR_ERROR | C_IN_RXOFL
							| C_IN_IOCTLW | C_IN_TXBEMPTY	//1.0.0.11: C_IN_TXBEMPTY OR C_IN_TXFEMPTY?
							| C_IN_RXHIWM | C_IN_RXNNDT | C_IN_TXLOWWM);
#endif
    //ToDo: Enable C_IN_IOCTLW in the interrupt version.

    CyzIssueCmd(extension,C_CM_IOCTLW,0L,FALSE);
	
    extension->HoldingEmpty = TRUE;	

    return FALSE;
}

VOID
CyzUnload(
	IN PDRIVER_OBJECT DriverObject
	)
/*--------------------------------------------------------------------------
	CyzUnload()

	Description: Cleans up all of the memory associated with the
	Device Objects created by the driver.
	
	Arguments:

	DriverObject - A pointer to the driver object.

	Return Value: None. 
--------------------------------------------------------------------------*/
{
   PVOID lockPtr;

   PAGED_CODE();

   lockPtr = MmLockPagableCodeSection(CyzUnload);

   //
   // Unnecessary since our BSS is going away, but do it anyhow to be safe
   //

   CyzGlobals.PAGESER_Handle = NULL;

   if (CyzGlobals.RegistryPath.Buffer != NULL) {
      ExFreePool(CyzGlobals.RegistryPath.Buffer);
      CyzGlobals.RegistryPath.Buffer = NULL;
   }

#if DBG
   SerialLogFree();
#endif

   CyzDbgPrintEx(CYZDIAG3, "In CyzUnload\n");

   MmUnlockPagableImageSection(lockPtr);

}

	
CYZ_MEM_COMPARES
CyzMemCompare(
                IN PHYSICAL_ADDRESS A,
                IN ULONG SpanOfA,
                IN PHYSICAL_ADDRESS B,
                IN ULONG SpanOfB
                )

/*++

Routine Description:

    Compare two phsical address.

Arguments:

    A - One half of the comparison.

    SpanOfA - In units of bytes, the span of A.

    B - One half of the comparison.

    SpanOfB - In units of bytes, the span of B.


Return Value:

    The result of the comparison.

--*/

{

   LARGE_INTEGER a;
   LARGE_INTEGER b;

   LARGE_INTEGER lower;
   ULONG lowerSpan;
   LARGE_INTEGER higher;

   //PAGED_CODE(); Non paged because it can be called during CyzLogError, which is non paged now.

   a = A;
   b = B;

   if (a.QuadPart == b.QuadPart) {

      return AddressesAreEqual;

   }

   if (a.QuadPart > b.QuadPart) {

      higher = a;
      lower = b;
      lowerSpan = SpanOfB;

   } else {

      higher = b;
      lower = a;
      lowerSpan = SpanOfA;

   }

   if ((higher.QuadPart - lower.QuadPart) >= lowerSpan) {

      return AddressesAreDisjoint;

   }

   return AddressesOverlap;

}

NTSTATUS
CyzFindInitController(IN PDEVICE_OBJECT PDevObj, IN PCONFIG_DATA PConfig)
/*++

Routine Description:

    This function discovers what type of controller is responsible for
    the given port and initializes the controller and port.

Arguments:

    PDevObj - Pointer to the devobj for the port we are about to init.

    PConfig - Pointer to configuration data for the port we are about to init.

Return Value:

    STATUS_SUCCESS on success, appropriate error value on failure.

--*/

{

   PCYZ_DEVICE_EXTENSION pDevExt = PDevObj->DeviceExtension;
   PDEVICE_OBJECT pDeviceObject;
   PCYZ_DEVICE_EXTENSION pExtension;
   PHYSICAL_ADDRESS serialPhysicalMax;
   PLIST_ENTRY pCurDevObj;
   NTSTATUS status;
   KIRQL oldIrql;

   CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyzFindInitController(%X, %X)\n",
                 PDevObj, PConfig);

   serialPhysicalMax.LowPart = (ULONG)~0;
   serialPhysicalMax.HighPart = ~0;

#ifdef POLL
   CyzDbgPrintEx(CYZDIAG1, "Attempting to init %wZ\n"
                 "------- Runtime Memory is %x\n"
                 "------- Board Memory is %x\n"
                 "------- BusNumber is %d\n"
                 "------- BusType is %d\n"
                 "------- Runtime AddressSpace is %d\n"
                 "------- Board AddressSpace is %d\n",
                 &pDevExt->DeviceName,
                 PConfig->PhysicalRuntime.LowPart,
                 PConfig->PhysicalBoardMemory.LowPart,
                 PConfig->BusNumber,
                 PConfig->InterfaceType,
                 PConfig->RuntimeAddressSpace,
                 PConfig->BoardMemoryAddressSpace);
#else
   CyzDbgPrintEx(CYZDIAG1, "Attempting to init %wZ\n"
                 "------- Runtime Memory is %x\n"
                 "------- Board Memory is %x\n"
                 "------- BusNumber is %d\n"
                 "------- BusType is %d\n"
                 "------- Runtime AddressSpace is %d\n"
                 "------- Board AddressSpace is %d\n"
                 "------- Interrupt Mode is %d\n",
                 &pDevExt->DeviceName,
                 PConfig->PhysicalRuntime.LowPart,
                 PConfig->PhysicalBoardMemory.LowPart,
                 PConfig->BusNumber,
                 PConfig->InterfaceType,
                 PConfig->RuntimeAddressSpace,
                 PConfig->BoardMemoryAddressSpace,
                 PConfig->InterruptMode);
#endif

   //
   // We don't support any boards whose memory wraps around
   // the physical address space.
   //

//*****************************************************
// error injection
//      if (CyzMemCompare(
//                          PConfig->PhysicalRuntime,
//                          PConfig->RuntimeLength,
//                          serialPhysicalMax,
//                         (ULONG)0
//                          ) == AddressesAreDisjoint) 
//*****************************************************
      if (CyzMemCompare(
                          PConfig->PhysicalRuntime,
                          PConfig->RuntimeLength,
                          serialPhysicalMax,
                          (ULONG)0
                          ) != AddressesAreDisjoint) {

         CyzLogError(
                       PDevObj->DriverObject,
                       NULL,
                       PConfig->PhysicalBoardMemory,
                       CyzPhysicalZero,
                       0,
                       0,
                       0,
                       PConfig->PortIndex+1,
                       STATUS_SUCCESS,
                       CYZ_RUNTIME_MEMORY_TOO_HIGH,
                       pDevExt->DeviceName.Length+sizeof(WCHAR),
                       pDevExt->DeviceName.Buffer,
                       0,
                       NULL
                       );

         CyzDbgPrintEx(DPFLTR_WARNING_LEVEL, "Error in config record for %wZ\n"
                       "------  Runtime memory wraps around physical memory\n",
                       &pDevExt->DeviceName);

         return STATUS_NO_SUCH_DEVICE;

      }

//*****************************************************
// error injection
//   if (CyzMemCompare(
//                       PConfig->PhysicalBoardMemory,
//                       PConfig->BoardMemoryLength,
//                       serialPhysicalMax,
//                       (ULONG)0
//                       ) == AddressesAreDisjoint) 
//*****************************************************
   if (CyzMemCompare(
                       PConfig->PhysicalBoardMemory,
                       PConfig->BoardMemoryLength,
                       serialPhysicalMax,
                       (ULONG)0
                       ) != AddressesAreDisjoint) {

      CyzLogError(
                    PDevObj->DriverObject,
                    NULL,
                    PConfig->PhysicalBoardMemory,
                    CyzPhysicalZero,
                    0,
                    0,
                    0,
                    PConfig->PortIndex+1,
                    STATUS_SUCCESS,
                    CYZ_BOARD_MEMORY_TOO_HIGH,
                    pDevExt->DeviceName.Length+sizeof(WCHAR),
                    pDevExt->DeviceName.Buffer,
                    0,
                    NULL
                    );

      CyzDbgPrintEx(DPFLTR_WARNING_LEVEL, "Error in config record for %wZ\n"
                    "------  board memory wraps around physical memory\n",
                    &pDevExt->DeviceName);

      return STATUS_NO_SUCH_DEVICE;

   }


   //
   // Make sure that the Runtime memory addresses don't
   // overlap the DP memory addresses for PCI cards
   //

      if (CyzMemCompare(
                          PConfig->PhysicalRuntime,
                          PConfig->RuntimeLength,
                          CyzPhysicalZero,
                          (ULONG)0
                          ) != AddressesAreEqual) {

//*****************************************************
// error injection
//         if (CyzMemCompare(
//                             PConfig->PhysicalRuntime,
//                             PConfig->RuntimeLength,
//                             PConfig->PhysicalBoardMemory,
//                             PConfig->BoardMemoryLength
//                             ) == AddressesAreDisjoint) 
//*****************************************************
         if (CyzMemCompare(
                             PConfig->PhysicalRuntime,
                             PConfig->RuntimeLength,
                             PConfig->PhysicalBoardMemory,
                             PConfig->BoardMemoryLength
                             ) != AddressesAreDisjoint) {

            CyzLogError(
                          PDevObj->DriverObject,
                          NULL,
                          PConfig->PhysicalBoardMemory,
                          PConfig->PhysicalRuntime,
                          0,
                          0,
                          0,
                          PConfig->PortIndex+1,
                          STATUS_SUCCESS,
                          CYZ_BOTH_MEMORY_CONFLICT,
                          pDevExt->DeviceName.Length+sizeof(WCHAR),
                          pDevExt->DeviceName.Buffer,
                          0,
                          NULL
                          );

            CyzDbgPrintEx(DPFLTR_WARNING_LEVEL, "Error in config record for %wZ\n"
                          "------  Runtime memory wraps around Board memory\n",
                          &pDevExt->DeviceName);

            return STATUS_NO_SUCH_DEVICE;
         }
      }



   //
   // Now, we will check if this is a port on a multiport card.
   // The conditions are same BoardMemory set and same IRQL/Vector
   //

   //
   // Loop through all previously attached devices
   //

   KeAcquireSpinLock(&CyzGlobals.GlobalsSpinLock, &oldIrql);

   if (!IsListEmpty(&CyzGlobals.AllDevObjs)) {
      pCurDevObj = CyzGlobals.AllDevObjs.Flink;
      pExtension = CONTAINING_RECORD(pCurDevObj, CYZ_DEVICE_EXTENSION,
                                     AllDevObjs);
   } else {
      pCurDevObj = NULL;
      pExtension = NULL;
   }

   KeReleaseSpinLock(&CyzGlobals.GlobalsSpinLock, oldIrql);

   //
   // If there is an interrupt status then we
   // loop through the config list again to look
   // for a config record with the same interrupt
   // status (on the same bus).
   //

   if (pCurDevObj != NULL) {

      ASSERT(pExtension != NULL);

      //
      // We have an interrupt status.  Loop through all
      // previous records, look for an existing interrupt status
      // the same as the current interrupt status.
      //
      do {

         //
         // We only care about this list if the elements are on the
         // same bus as this new entry.  (Their interrupts must therefore
         // also be the on the same bus.  We will check that momentarily).
         //
         // We don't check here for the dissimilar interrupts since that
         // could cause us to miss the error of having the same interrupt
         // status but different interrupts - which is bizzare.
         //

         if ((pExtension->InterfaceType == PConfig->InterfaceType) &&
             (pExtension->BoardMemoryAddressSpace == PConfig->BoardMemoryAddressSpace) &&
             (pExtension->BusNumber == PConfig->BusNumber)) {

            //
            // If the board memory is the same, then same card.
            //

            if (CyzMemCompare(
                                pExtension->OriginalBoardMemory,
                                pExtension->BoardMemoryLength,
                                PConfig->PhysicalBoardMemory,
                                PConfig->BoardMemoryLength
                                ) == AddressesAreEqual) {
#ifndef POLL
               //
               // Same card.  Now make sure that they
               // are using the same interrupt parameters.
               //

               // BUILD 2128: OriginalIrql replaced by TrIrql and Irql; same for OriginalVector
               if ((PConfig->TrIrql != pExtension->Irql) ||
                   (PConfig->TrVector != pExtension->Vector)) {

                  //
                  // We won't put this into the configuration
                  // list.
                  //
                  CyzLogError(
                                PDevObj->DriverObject,
                                NULL,
                                PConfig->PhysicalBoardMemory,
                                pExtension->OriginalBoardMemory,
                                0,
                                0,
                                0,
                                PConfig->PortIndex+1,
                                STATUS_SUCCESS,
                                CYZ_MULTI_INTERRUPT_CONFLICT,
                                pDevExt->DeviceName.Length+sizeof(WCHAR),
                                pDevExt->DeviceName.Buffer,
                                pExtension->DeviceName.Length
                                + sizeof(WCHAR),
                                pExtension->DeviceName.Buffer
                                );

                  CyzDbgPrintEx(DPFLTR_WARNING_LEVEL, "Configuration error "
                                "for %wZ\n"
                                "------- Same multiport - different "
                                "interrupts\n", &pDevExt->DeviceName);

                  return STATUS_NO_SUCH_DEVICE;

               }
#endif
                  //
                  // PCI board. Make sure the PCI memory addresses are equal.
                  //
                  if (CyzMemCompare(
                                      pExtension->OriginalRuntimeMemory,
                                      pExtension->RuntimeLength,
                                      PConfig->PhysicalRuntime,
                                      PConfig->RuntimeLength
                                      ) != AddressesAreEqual) {
//*****************************************************
// error injection
//                  if (CyzMemCompare(
//                                     pExtension->OriginalRuntimeMemory,
//                                      pExtension->RuntimeLength,
//                                      PConfig->PhysicalRuntime,
//                                      PConfig->RuntimeLength
//                                      ) == AddressesAreEqual) 
//*****************************************************

                      CyzLogError(
                                   PDevObj->DriverObject,
                                   NULL,
                                   PConfig->PhysicalRuntime,
                                   pExtension->OriginalRuntimeMemory,
                                   0,
                                   0,
                                   0,
                                   PConfig->PortIndex+1,
                                   STATUS_SUCCESS,
                                   CYZ_MULTI_RUNTIME_CONFLICT,
                                   pDevExt->DeviceName.Length+sizeof(WCHAR),
                                   pDevExt->DeviceName.Buffer,
                                   pExtension->DeviceName.Length
                                   + sizeof(WCHAR),
                                   pExtension->DeviceName.Buffer
                                   );

                     CyzDbgPrintEx(DPFLTR_WARNING_LEVEL, "Configuration error "
                                   "for %wZ\n"
                                   "------- Same multiport - different "
                                   "Runtime addresses\n", &pDevExt->DeviceName);

                     return STATUS_NO_SUCH_DEVICE;
                  }

               //
               // We should never get this far on a restart since we don't
               // support stop on ISA multiport devices!
               //

               ASSERT(pDevExt->PNPState == CYZ_PNP_ADDED);

               //
               //
               // Initialize the device as part of a multiport board
               //

               CyzDbgPrintEx(CYZDIAG1, "Aha! It is a multiport node\n");
               CyzDbgPrintEx(CYZDIAG1, "Matched to %x\n", pExtension);

               status = CyzInitMultiPort(pExtension, PConfig, PDevObj);

               //
               // A port can be one of two things:
               //    A non-root on a multiport
               //    A root on a multiport
               //
               // It can only share an interrupt if it is a root.
               // Since this was a non-root we don't need to check 
               // if it shares an interrupt and we can return.
               //
               return status;
            }
         }

         //
         // No match, check some more
         //

         KeAcquireSpinLock(&CyzGlobals.GlobalsSpinLock, &oldIrql);

         pCurDevObj = pCurDevObj->Flink;
         if (pCurDevObj != NULL) {
            pExtension = CONTAINING_RECORD(pCurDevObj,CYZ_DEVICE_EXTENSION,
                                           AllDevObjs);
         }

         KeReleaseSpinLock(&CyzGlobals.GlobalsSpinLock, oldIrql);

      } while (pCurDevObj != NULL && pCurDevObj != &CyzGlobals.AllDevObjs);
   }


   CyzDbgPrintEx(CYZDIAG1, "Aha! It is a first multi\n");

   status = CyzInitController(PDevObj, PConfig);

   if (!NT_SUCCESS(status)) {
      return status;
   }

   return STATUS_SUCCESS;
}


VOID
CyzCommError(
    IN PKDPC Dpc,
    IN PVOID DeferredContext,
    IN PVOID SystemContext1,
    IN PVOID SystemContext2
    )
/*--------------------------------------------------------------------------
    CyzComError()
    
    Routine Description: This routine is invoked at dpc level in response
    to a comm error.  All comm errors kill all read and writes

    Arguments:

    Dpc - Not Used.
    DeferredContext - points to the device object.
    SystemContext1 - Not Used.
    SystemContext2 - Not Used.

    Return Value: None.
--------------------------------------------------------------------------*/
{
    PCYZ_DEVICE_EXTENSION Extension = DeferredContext;

    UNREFERENCED_PARAMETER(SystemContext1);
    UNREFERENCED_PARAMETER(SystemContext2);

    CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyzCommError(%X)\n", Extension);

    CyzKillAllReadsOrWrites(
        Extension->DeviceObject,
        &Extension->WriteQueue,
        &Extension->CurrentWriteIrp
        );

    CyzKillAllReadsOrWrites(
        Extension->DeviceObject,
        &Extension->ReadQueue,
        &Extension->CurrentReadIrp
        );
    CyzDpcEpilogue(Extension, Dpc);

    CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyzCommError\n");
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyzport\cyzlog.h ===
/*--------------------------------------------------------------------------
*
*   Copyright (C) Cyclades Corporation, 1997-2000.
*   All rights reserved.
*
*   Cyclades-Z Port Driver
*	
*   This file:      cyzlog.mc
*
*   Description:    Messages that goes to the eventlog.
*
*   Notes:          This code supports Windows 2000 and i386 processor.
*
*   Complies with Cyclades SW Coding Standard rev 1.3.
*
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*   Change History
*
*--------------------------------------------------------------------------
*
*
*--------------------------------------------------------------------------
*/

#ifndef _CYZLOG_
#define _CYZLOG_

//
//  Values are 32 bit values layed out as follows:
//
//   3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1
//   1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
//  +---+-+-+-----------------------+-------------------------------+
//  |Sev|C|R|     Facility          |               Code            |
//  +---+-+-+-----------------------+-------------------------------+
//
//  where
//
//      Sev - is the severity code
//
//          00 - Success
//          01 - Informational
//          10 - Warning
//          11 - Error
//
//      C - is the Customer code flag
//
//      R - is a reserved bit
//
//      Facility - is the facility code
//
//      Code - is the facility's status code
//
//
// Define the facility codes
//
#define FACILITY_SERIAL_ERROR_CODE       0x6
#define FACILITY_RPC_STUBS               0x3
#define FACILITY_RPC_RUNTIME             0x2
#define FACILITY_IO_ERROR_CODE           0x4


//
// Define the severity codes
//
#define STATUS_SEVERITY_WARNING          0x2
#define STATUS_SEVERITY_SUCCESS          0x0
#define STATUS_SEVERITY_INFORMATIONAL    0x1
#define STATUS_SEVERITY_ERROR            0x3


//
// MessageId: CYZ_COMMAND_FAILURE
//
// MessageText:
//
//  Cyclades-Z Command Failure.
//
#define CYZ_COMMAND_FAILURE              ((NTSTATUS)0x80041000L)

//
// MessageId: CYZ_UNABLE_TO_GET_BUS_NUMBER
//
// MessageText:
//
//  Unable to get Cyclades-Z card PCI slot information.
//
#define CYZ_UNABLE_TO_GET_BUS_NUMBER     ((NTSTATUS)0xC0041002L)

//
// MessageId: CYZ_UNABLE_TO_GET_HW_ID
//
// MessageText:
//
//  Unable to get Hardware ID information.
//
#define CYZ_UNABLE_TO_GET_HW_ID          ((NTSTATUS)0xC0041003L)

//
// MessageId: CYZ_NO_SYMLINK_CREATED
//
// MessageText:
//
//  Unable to create the symbolic link for %2.
//
#define CYZ_NO_SYMLINK_CREATED           ((NTSTATUS)0x80041004L)

//
// MessageId: CYZ_NO_DEVICE_MAP_CREATED
//
// MessageText:
//
//  Unable to create the device map entry for %2.
//
#define CYZ_NO_DEVICE_MAP_CREATED        ((NTSTATUS)0x80041005L)

//
// MessageId: CYZ_NO_DEVICE_MAP_DELETED
//
// MessageText:
//
//  Unable to delete the device map entry for %2.
//
#define CYZ_NO_DEVICE_MAP_DELETED        ((NTSTATUS)0x80041006L)

//
// MessageId: CYZ_UNREPORTED_IRQL_CONFLICT
//
// MessageText:
//
//  Another driver on the system, which did not report its resources, has already claimed the interrupt used by %2.
//
#define CYZ_UNREPORTED_IRQL_CONFLICT     ((NTSTATUS)0xC0041007L)

//
// MessageId: CYZ_INSUFFICIENT_RESOURCES
//
// MessageText:
//
//  Not enough resources were available for the driver.
//
#define CYZ_INSUFFICIENT_RESOURCES       ((NTSTATUS)0xC0041008L)

//
// MessageId: CYZ_BOARD_NOT_MAPPED
//
// MessageText:
//
//  The Board Memory for %2 could not be translated to something the memory management system could understand.
//
#define CYZ_BOARD_NOT_MAPPED             ((NTSTATUS)0xC004100AL)

//
// MessageId: CYZ_RUNTIME_NOT_MAPPED
//
// MessageText:
//
//  The Runtime Registers for %2 could not be translated to something the memory management system could understand.
//
#define CYZ_RUNTIME_NOT_MAPPED           ((NTSTATUS)0xC004100BL)

//
// MessageId: CYZ_INVALID_RUNTIME_REGISTERS
//
// MessageText:
//
//  Invalid Runtime Registers base address for %2.
//
#define CYZ_INVALID_RUNTIME_REGISTERS    ((NTSTATUS)0xC0041010L)

//
// MessageId: CYZ_INVALID_BOARD_MEMORY
//
// MessageText:
//
//  Invalid Board Memory address for %2.
//
#define CYZ_INVALID_BOARD_MEMORY         ((NTSTATUS)0xC0041011L)

//
// MessageId: CYZ_INVALID_INTERRUPT
//
// MessageText:
//
//  Invalid Interrupt Vector for %2.
//
#define CYZ_INVALID_INTERRUPT            ((NTSTATUS)0xC0041012L)

//
// MessageId: CYZ_PORT_INDEX_TOO_HIGH
//
// MessageText:
//
//  Port Number for %2 is larger than the maximum number of ports in a cyclades-z card.
//
#define CYZ_PORT_INDEX_TOO_HIGH          ((NTSTATUS)0xC0041015L)

//
// MessageId: CYZ_UNKNOWN_BUS
//
// MessageText:
//
//  The bus type for %2 is not recognizable.
//
#define CYZ_UNKNOWN_BUS                  ((NTSTATUS)0xC0041016L)

//
// MessageId: CYZ_BUS_NOT_PRESENT
//
// MessageText:
//
//  The bus type for %2 is not available on this computer.
//
#define CYZ_BUS_NOT_PRESENT              ((NTSTATUS)0xC0041017L)

//
// MessageId: CYZ_RUNTIME_MEMORY_TOO_HIGH
//
// MessageText:
//
//  The Runtime Registers for %2 is way too high in physical memory.
//
#define CYZ_RUNTIME_MEMORY_TOO_HIGH      ((NTSTATUS)0xC004101AL)

//
// MessageId: CYZ_BOARD_MEMORY_TOO_HIGH
//
// MessageText:
//
//  The Board Memory for %2 is way too high in physical memory.
//
#define CYZ_BOARD_MEMORY_TOO_HIGH        ((NTSTATUS)0xC004101BL)

//
// MessageId: CYZ_BOTH_MEMORY_CONFLICT
//
// MessageText:
//
//  The Runtime Registers for %2 overlaps the Board Memory for the device.
//
#define CYZ_BOTH_MEMORY_CONFLICT         ((NTSTATUS)0xC004101CL)

//
// MessageId: CYZ_MULTI_INTERRUPT_CONFLICT
//
// MessageText:
//
//  Two ports, %2 and %3, on a single cyclades-z card can't have two different interrupts.
//
#define CYZ_MULTI_INTERRUPT_CONFLICT     ((NTSTATUS)0xC0041021L)

//
// MessageId: CYZ_MULTI_RUNTIME_CONFLICT
//
// MessageText:
//
//  Two ports, %2 and %3, on a single cyclades-z card can't have two different Runtime Registers memory range.
//
#define CYZ_MULTI_RUNTIME_CONFLICT       ((NTSTATUS)0xC0041022L)

//
// MessageId: CYZ_HARDWARE_FAILURE
//
// MessageText:
//
//  The cyzport driver detected a hardware failure on device %2 and will disable this device.
//
#define CYZ_HARDWARE_FAILURE             ((NTSTATUS)0xC004102DL)

//
// MessageId: CYZ_FIRMWARE_CMDERROR
//
// MessageText:
//
//  Firmware received invalid command.
//
#define CYZ_FIRMWARE_CMDERROR            ((NTSTATUS)0xC0041030L)

//
// MessageId: CYZ_FIRMWARE_FATAL
//
// MessageText:
//
//  Firmware found fatal error.
//
#define CYZ_FIRMWARE_FATAL               ((NTSTATUS)0xC0041031L)

//
// MessageId: CYZ_DEVICE_CREATION_FAILURE
//
// MessageText:
//
//  Failure to create new device object.
//
#define CYZ_DEVICE_CREATION_FAILURE      ((NTSTATUS)0xC0041033L)

//
// MessageId: CYZ_NO_PHYSICAL_DEVICE_OBJECT
//
// MessageText:
//
//  No physical device object.
//
#define CYZ_NO_PHYSICAL_DEVICE_OBJECT    ((NTSTATUS)0xC0041034L)

//
// MessageId: CYZ_LOWER_DRIVERS_FAILED_START
//
// MessageText:
//
//  Lower drivers failed to start.
//
#define CYZ_LOWER_DRIVERS_FAILED_START   ((NTSTATUS)0xC0041035L)

//
// MessageId: CYZ_INCOMPATIBLE_FIRMWARE
//
// MessageText:
//
//  This cyzport driver requires zlogic.cyz version %2 or above.
//
#define CYZ_INCOMPATIBLE_FIRMWARE        ((NTSTATUS)0xC0041036L)

//
// MessageId: CYZ_BOARD_CTRL_NOT_MAPPED
//
// MessageText:
//
//  The Board Memory BoardCtrl for %2 could not be translated to something the memory management system could understand.
//
#define CYZ_BOARD_CTRL_NOT_MAPPED        ((NTSTATUS)0xC0041037L)

//
// MessageId: CYZ_CH_CTRL_NOT_MAPPED
//
// MessageText:
//
//  The Board Memory ChCtrl for %2 could not be translated to something the memory management system could understand.
//
#define CYZ_CH_CTRL_NOT_MAPPED           ((NTSTATUS)0xC0041038L)

//
// MessageId: CYZ_BUF_CTRL_NOT_MAPPED
//
// MessageText:
//
//  The Board Memory BufCtrl for %2 could not be translated to something the memory management system could understand.
//
#define CYZ_BUF_CTRL_NOT_MAPPED          ((NTSTATUS)0xC0041039L)

//
// MessageId: CYZ_TX_BUF_NOT_MAPPED
//
// MessageText:
//
//  The Board Memory TxBuf for %2 could not be translated to something the memory management system could understand.
//
#define CYZ_TX_BUF_NOT_MAPPED            ((NTSTATUS)0xC004103AL)

//
// MessageId: CYZ_RX_BUF_NOT_MAPPED
//
// MessageText:
//
//  The Board Memory RxBuf for %2 could not be translated to something the memory management system could understand.
//
#define CYZ_RX_BUF_NOT_MAPPED            ((NTSTATUS)0xC004103BL)

//
// MessageId: CYZ_INT_QUEUE_NOT_MAPPED
//
// MessageText:
//
//  The Board Memory IntQueue for %2 could not be translated to something the memory management system could understand.
//
#define CYZ_INT_QUEUE_NOT_MAPPED         ((NTSTATUS)0xC004103CL)

//
// MessageId: CYZ_BAD_HW_ID
//
// MessageText:
//
//  Invalid Hardware ID.
//
#define CYZ_BAD_HW_ID                    ((NTSTATUS)0xC004103DL)


#endif /* _CYZLOG_ */
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyzport\cyzioctl.c ===
/*--------------------------------------------------------------------------
*
*   Copyright (C) Cyclades Corporation, 1997-2001.
*   All rights reserved.
*
*   Cyclades-Z Port Driver
*	
*   This file:      cyzioctl.c
*
*   Description:    This module contains the code related to ioctl
*                   calls in the Cyclades-Z Port driver.
*
*   Notes:          This code supports Windows 2000 and Windows XP,
*                   x86 and IA64 processors.
*
*   Complies with Cyclades SW Coding Standard rev 1.3.
*
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*   Change History
*
*--------------------------------------------------------------------------
*
*
*--------------------------------------------------------------------------
*/

#include "precomp.h"


BOOLEAN
CyzGetModemUpdate(
    IN PVOID Context
    );

BOOLEAN
CyzGetCommStatus(
    IN PVOID Context
    );

BOOLEAN
CyzSetEscapeChar(
    IN PVOID Context
    );

BOOLEAN
CyzSetBasicFifoSettings(
    IN PVOID Context
    );

#ifdef ALLOC_PRAGMA
#if 0   // These routines cannot be pageable because of spin lock.
//#pragma alloc_text(PAGESER,CyzSetBaud)
//#pragma alloc_text(PAGESER,CyzSetLineControl)
//#pragma alloc_text(PAGESER,CyzIoControl)
//#pragma alloc_text(PAGESER,CyzSetChars)
//#pragma alloc_text(PAGESER,CyzGetModemUpdate)
//#pragma alloc_text(PAGESER,CyzGetCommStatus)
#pragma alloc_text(PAGESER,CyzGetProperties)
//#pragma alloc_text(PAGESER,CyzSetEscapeChar)
//#pragma alloc_text(PAGESER,CyzGetStats)
//#pragma alloc_text(PAGESER,CyzClearStats)
//#pragma alloc_text(PAGESER,CyzSetMCRContents)
//#pragma alloc_text(PAGESER,CyzGetMCRContents)
//#pragma alloc_text(PAGESER,CyzSetFCRContents)
//#pragma alloc_text(PAGESER,CyzSetBasicFifoSettings)
//#pragma alloc_text(PAGESER,CyzInternalIoControl)
//#pragma alloc_text(PAGESER,CyzIssueCmd)
#endif
#endif

static const PHYSICAL_ADDRESS CyzPhysicalZero = {0};


BOOLEAN
CyzGetStats(
    IN PVOID Context
    )

/*++

Routine Description:

    In sync with the interrpt service routine (which sets the perf stats)
    return the perf stats to the caller.


Arguments:

    Context - Pointer to a the irp.

Return Value:

    This routine always returns FALSE.

--*/

{

    PIO_STACK_LOCATION irpSp = IoGetCurrentIrpStackLocation((PIRP)Context);
    PCYZ_DEVICE_EXTENSION extension = irpSp->DeviceObject->DeviceExtension;
    PSERIALPERF_STATS sp = ((PIRP)Context)->AssociatedIrp.SystemBuffer;

    CYZ_LOCKED_PAGED_CODE();

    *sp = extension->PerfStats;
    return FALSE;

}

BOOLEAN
CyzClearStats(
    IN PVOID Context
    )

/*++

Routine Description:

    In sync with the interrpt service routine (which sets the perf stats)
    clear the perf stats.


Arguments:

    Context - Pointer to a the extension.

Return Value:

    This routine always returns FALSE.

--*/

{
   CYZ_LOCKED_PAGED_CODE();

    RtlZeroMemory(
        &((PCYZ_DEVICE_EXTENSION)Context)->PerfStats,
        sizeof(SERIALPERF_STATS)
        );

    RtlZeroMemory(&((PCYZ_DEVICE_EXTENSION)Context)->WmiPerfData,
                 sizeof(SERIAL_WMI_PERF_DATA));
    return FALSE;

}


BOOLEAN
CyzSetChars(
    IN PVOID Context
    )
/*--------------------------------------------------------------------------
    CyzSetChars()
    
    Routine Description: set special characters for the driver.

    Arguments:

    Context - Pointer to a structure that contains a pointer to
              the device extension and a pointer to a special characters
              structure.

    Return Value: This routine always returns FALSE.
--------------------------------------------------------------------------*/
{
    PCYZ_DEVICE_EXTENSION Extension = ((PCYZ_IOCTL_SYNC)Context)->Extension;
    struct CH_CTRL *ch_ctrl;
	
    CYZ_LOCKED_PAGED_CODE();

    Extension->SpecialChars =
        *((PSERIAL_CHARS)(((PCYZ_IOCTL_SYNC)Context)->Data));		
	
    ch_ctrl = Extension->ChCtrl;
    CYZ_WRITE_ULONG(&ch_ctrl->flow_xon,Extension->SpecialChars.XonChar);
    CYZ_WRITE_ULONG(&ch_ctrl->flow_xoff,Extension->SpecialChars.XoffChar);
    CyzIssueCmd(Extension,C_CM_IOCTLW,0L,FALSE);
			
    return FALSE;
}

BOOLEAN
CyzSetBaud(
    IN PVOID Context
    )
/*--------------------------------------------------------------------------
    CyzSetBaud()
    
    Routine Description: set the baud rate of the device.

    Arguments:

    Context - Pointer to a structure that contains a pointer to
              the device extension.

    Return Value: This routine always returns FALSE.
--------------------------------------------------------------------------*/
{
    PCYZ_DEVICE_EXTENSION Extension = ((PCYZ_IOCTL_BAUD)Context)->Extension;
    ULONG baud = ((PCYZ_IOCTL_BAUD)Context)->Baud;
    struct CH_CTRL *ch_ctrl;

    CYZ_LOCKED_PAGED_CODE();
    
    ch_ctrl = Extension->ChCtrl;
    CYZ_WRITE_ULONG(&ch_ctrl->comm_baud,baud);

    CyzIssueCmd(Extension,C_CM_IOCTLW,0L,FALSE);		
	    
    return FALSE;
}


VOID
CyzIssueCmd( 
    PCYZ_DEVICE_EXTENSION Extension,
    ULONG cmd, 
    ULONG param,
    BOOLEAN wait)
/*--------------------------------------------------------------------------
    CyzIssueCmd()
    
    Routine Description: Send a command to the Cyclades-Z CPU.
    
    Arguments:
    
    Extension - pointer to the device extension.
    cmd - command to be sent to hw.
    param - pointer to parameters
    wait - wait for command to be completed
    
    Return Value: none.
--------------------------------------------------------------------------*/
{

    struct BOARD_CTRL *board_ctrl;
    PULONG pci_doorbell;
    LARGE_INTEGER startOfSpin, nextQuery, difference, interval100ms; //oneSecond;
    PCYZ_DISPATCH pDispatch = Extension->OurIsrContext;

    #ifdef POLL
    KIRQL OldIrql;

    KeAcquireSpinLock(&pDispatch->PciDoorbellLock,&OldIrql);
    #endif

    pci_doorbell = &(Extension->Runtime)->pci_doorbell;

    //oneSecond.QuadPart = 10*1000*1000; // unit is 100ns
    interval100ms.QuadPart = 1000*1000; // unit is 100ns

    KeQueryTickCount(&startOfSpin);
		
    while ( (CYZ_READ_ULONG(pci_doorbell) & 0xff) != 0) {
	
        KeQueryTickCount(&nextQuery);
        difference.QuadPart = nextQuery.QuadPart - startOfSpin.QuadPart;
        ASSERT(KeQueryTimeIncrement() <= MAXLONG);
        //*************************
        // Error Injection
        //if (difference.QuadPart * KeQueryTimeIncrement() <
        //   interval100ms.QuadPart) 
        //*************************
        if (difference.QuadPart * KeQueryTimeIncrement() >= 
                        interval100ms.QuadPart) {
            if (Extension->CmdFailureLog == FALSE) {
    			#if DBG
	    		DbgPrint("\n ***** Cyzport Command Failure! *****\n");
		    	#endif
                CyzLogError(Extension->DeviceObject->DriverObject,NULL,
                            Extension->OriginalBoardMemory,CyzPhysicalZero,
                            0,0,0,Extension->PortIndex+1,STATUS_SUCCESS,
                            CYZ_COMMAND_FAILURE,0,NULL,0,NULL);
				Extension->CmdFailureLog = TRUE;						
            }
            #ifdef POLL
            KeReleaseSpinLock(&pDispatch->PciDoorbellLock,OldIrql);
            #endif
            return;
        }
    }	
	
    board_ctrl = Extension->BoardCtrl;
    CYZ_WRITE_ULONG(&board_ctrl->hcmd_channel,Extension->PortIndex);
    CYZ_WRITE_ULONG(&board_ctrl->hcmd_param,param);
	
    CYZ_WRITE_ULONG(pci_doorbell,cmd);	
	

    if (wait) {
        KeQueryTickCount(&startOfSpin);
        while ( (CYZ_READ_ULONG(pci_doorbell) & 0xff) != 0) {
	
            KeQueryTickCount(&nextQuery);
            difference.QuadPart = nextQuery.QuadPart - startOfSpin.QuadPart;
            ASSERT(KeQueryTimeIncrement() <= MAXLONG);
            if (difference.QuadPart * KeQueryTimeIncrement() >= 
                        interval100ms.QuadPart) {
                if (Extension->CmdFailureLog == FALSE) {
                    CyzLogError(Extension->DeviceObject->DriverObject,
                                NULL,Extension->OriginalBoardMemory,CyzPhysicalZero,
                                0,0,0,Extension->PortIndex+1,STATUS_SUCCESS,
                                CYZ_COMMAND_FAILURE,0,NULL,0,NULL);
				    Extension->CmdFailureLog = TRUE;						
                }
                #ifdef POLL
                KeReleaseSpinLock(&pDispatch->PciDoorbellLock,OldIrql);
                #endif
                return;
            }
        }	
    }


    #ifndef POLL
	
    // I REPLACED C_CM_IOCTL BY C_CM_IOCTLW FOR POLL VERSION!!!!! (FANNY)
	
    // If the cmd is C_CM_IOCTL, the firmware will reset the UART. There 
    // is a case where HoldingEmpty is FALSE, waiting for the C_CM_TXBEMPTY
    // interrupt, and as the UART is being reset, this interrupt will never
    // occur. To avoid dead lock, the HoldingEmpty flag will be reset to 
    // TRUE here.
	
    if (cmd == C_CM_IOCTL) {
        Extension->HoldingEmpty = TRUE;					
    }
    #endif

    #ifdef POLL
    KeReleaseSpinLock(&pDispatch->PciDoorbellLock,OldIrql);
    #endif
	
    return;
} /* CyzIssueCmd */


BOOLEAN
CyzSetLineControl(
    IN PVOID Context
    )
/*--------------------------------------------------------------------------
    CyzSetLineControl()
    
    Routine Description: set the Data Parity, Data Length and Stop-bits.

    Arguments:

    Context - Pointer to the device extension.

    Return Value: This routine always returns FALSE.
--------------------------------------------------------------------------*/
{
    PCYZ_DEVICE_EXTENSION Extension = Context;
    struct CH_CTRL *ch_ctrl;

    CYZ_LOCKED_PAGED_CODE();
    
    ch_ctrl = Extension->ChCtrl;
    CYZ_WRITE_ULONG(&ch_ctrl->comm_data_l,Extension->CommDataLen);
    CYZ_WRITE_ULONG(&ch_ctrl->comm_parity,Extension->CommParity);	
				
    CyzIssueCmd(Extension,C_CM_IOCTLW,0L,FALSE);

    return FALSE;
}


BOOLEAN
CyzGetModemUpdate(
    IN PVOID Context
    )
/*--------------------------------------------------------------------------
    CyzGetModemUpdate()
    
    Routine Description: this routine is simply used to call the interrupt
    level routine that handles modem status update.

    Arguments:

    Context - Pointer to a structure that contains a pointer to
              the device extension and a pointer to a ulong.

    Return Value: This routine always returns FALSE. 
--------------------------------------------------------------------------*/
{
    PCYZ_DEVICE_EXTENSION Extension = ((PCYZ_IOCTL_SYNC)Context)->Extension;
    ULONG *Result = (ULONG *)(((PCYZ_IOCTL_SYNC)Context)->Data);

    CYZ_LOCKED_PAGED_CODE();

    *Result = CyzHandleModemUpdate(Extension,FALSE,0);

    return FALSE;
}


BOOLEAN
CyzSetMCRContents(IN PVOID Context)
/*++

Routine Description:

    This routine is simply used to set the contents of the MCR

Arguments:

    Context - Pointer to a structure that contains a pointer to
              the device extension and a pointer to a ulong.

Return Value:

    This routine always returns FALSE.

--*/
{
   PCYZ_DEVICE_EXTENSION Extension = ((PCYZ_IOCTL_SYNC)Context)->Extension;
   ULONG *Result = (ULONG *)(((PCYZ_IOCTL_SYNC)Context)->Data);

   struct CH_CTRL *ch_ctrl = Extension->ChCtrl;
   ULONG rs_control, op_mode;   

   CYZ_LOCKED_PAGED_CODE();

   // Let's convert the UART modem control to our hw

   rs_control = CYZ_READ_ULONG(&ch_ctrl->rs_control);

   if (*Result & SERIAL_MCR_DTR) {
      rs_control |= C_RS_DTR;
   } else {
      rs_control &= ~C_RS_DTR;
   }

   if (*Result & SERIAL_MCR_RTS) {
      rs_control |= C_RS_RTS;
   } else {
      rs_control &= ~C_RS_RTS;
   }

// For interrupt mode, remember to enable/disable the interrupt. C_CM_IRQ_ENBL or C_CM_IRQ_DSBL?
//   if (*Result & SERIAL_MCR_OUT2) {
//      // Enable IRQ
//      CD1400_WRITE(chip,bus,SRER,0x90); // Enable MdmCh, RxData.
//   } else {
//      CD1400_WRITE(chip,bus,SRER,0x00); // Disable MdmCh, RxData, TxRdy
//   }

   CYZ_WRITE_ULONG(&ch_ctrl->rs_control,rs_control);
   CyzIssueCmd(Extension,C_CM_IOCTLM,rs_control|C_RS_PARAM,FALSE);


   // Check for loopback mode
   op_mode = CYZ_READ_ULONG(&ch_ctrl->op_mode);
   if (*Result & SERIAL_MCR_LOOP) {
      op_mode |= C_CH_LOOPBACK;
   } else {
      op_mode &= ~C_CH_LOOPBACK;
   }
   CYZ_WRITE_ULONG(&ch_ctrl->op_mode, op_mode);
   CyzIssueCmd(Extension,C_CM_IOCTL,0,FALSE);


// Fanny: Strange, Result is being used instead of *Result.
//   //
//   // This is severe casting abuse!!!
//   //
//
//    WRITE_MODEM_CONTROL(Extension->Controller, (UCHAR)PtrToUlong(Result));

   return FALSE;
}


BOOLEAN
CyzGetMCRContents(IN PVOID Context)

/*++

Routine Description:

    This routine is simply used to get the contents of the MCR

Arguments:

    Context - Pointer to a structure that contains a pointer to
              the device extension and a pointer to a ulong.

Return Value:

    This routine always returns FALSE.

--*/

{

   PCYZ_DEVICE_EXTENSION Extension = ((PCYZ_IOCTL_SYNC)Context)->Extension;
   ULONG *Result = (ULONG *)(((PCYZ_IOCTL_SYNC)Context)->Data);

   struct CH_CTRL *ch_ctrl;
   ULONG rs_control,op_mode;
   *Result = 0;

   CYZ_LOCKED_PAGED_CODE();

   ch_ctrl = Extension->ChCtrl;
   rs_control = CYZ_READ_ULONG(&ch_ctrl->rs_control);

   if (rs_control & C_RS_DTR) {
      *Result |= SERIAL_MCR_DTR;
   }
   if (rs_control & C_RS_RTS) {
      *Result |= SERIAL_MCR_RTS;
   }

   // For interrupt mode, we will need to update SERIAL_MCR_OUT bit as well.

   op_mode = CYZ_READ_ULONG(&ch_ctrl->op_mode);

   if (op_mode & C_CH_LOOPBACK) {
      * Result |= SERIAL_MCR_LOOP;
   }

//   *Result = READ_MODEM_CONTROL(Extension->Controller);

   return FALSE;

}


BOOLEAN
CyzSetFCRContents(IN PVOID Context)
/*++

Routine Description:

    This routine is simply used to set the contents of the FCR

Arguments:

    Context - Pointer to a structure that contains a pointer to
              the device extension and a pointer to a ulong.

Return Value:

    This routine always returns FALSE.

--*/
{
   PCYZ_DEVICE_EXTENSION Extension = ((PCYZ_IOCTL_SYNC)Context)->Extension;
   ULONG *Result = (ULONG *)(((PCYZ_IOCTL_SYNC)Context)->Data);

   CYZ_LOCKED_PAGED_CODE();

   if (*Result & SERIAL_FCR_TXMT_RESET) {
      CyzIssueCmd(Extension,C_CM_FLUSH_TX,0,FALSE);
   }
   if (*Result & SERIAL_FCR_RCVR_RESET) {
      CyzIssueCmd(Extension,C_CM_FLUSH_RX,0,FALSE);
   }

   // For interrupt mode, we will need to set the rx fifo threshold.


//   //
//   // This is severe casting abuse!!!
//   //
//
//    WRITE_FIFO_CONTROL(Extension->Controller, (UCHAR)*Result);  Bld 2128: PtrToUlong replaced by *

    return FALSE;
}


BOOLEAN
CyzGetCommStatus(
    IN PVOID Context
    )
/*--------------------------------------------------------------------------
    CyzGetCommStatus()
    
    Routine Description: get the current state of the serial driver.

    Arguments:

    Context - Pointer to a structure that contains a pointer to the
    	      device extension and a pointer to a serial status record.

    Return Value: This routine always returns FALSE.
--------------------------------------------------------------------------*/
{
    PCYZ_DEVICE_EXTENSION Extension = ((PCYZ_IOCTL_SYNC)Context)->Extension;
    PSERIAL_STATUS Stat = ((PCYZ_IOCTL_SYNC)Context)->Data;

    CYZ_LOCKED_PAGED_CODE();

    Stat->Errors = Extension->ErrorWord;
    Extension->ErrorWord = 0;

    //
    // Eof isn't supported in binary mode
    //
    Stat->EofReceived = FALSE;

    Stat->AmountInInQueue = Extension->CharsInInterruptBuffer;
    Stat->AmountInOutQueue = Extension->TotalCharsQueued;

    if (Extension->WriteLength) {

        // By definition if we have a writelength the we have
        // a current write irp.
        ASSERT(Extension->CurrentWriteIrp);
        ASSERT(Stat->AmountInOutQueue >= Extension->WriteLength);

        Stat->AmountInOutQueue -=
            IoGetCurrentIrpStackLocation(Extension->CurrentWriteIrp)
            ->Parameters.Write.Length - (Extension->WriteLength);

    }

    Stat->WaitForImmediate = Extension->TransmitImmediate;

    Stat->HoldReasons = 0;
    if (Extension->TXHolding) {
        if (Extension->TXHolding & CYZ_TX_CTS) {
            Stat->HoldReasons |= SERIAL_TX_WAITING_FOR_CTS;
        }

        if (Extension->TXHolding & CYZ_TX_DSR) {
            Stat->HoldReasons |= SERIAL_TX_WAITING_FOR_DSR;
        }

        if (Extension->TXHolding & CYZ_TX_DCD) {
            Stat->HoldReasons |= SERIAL_TX_WAITING_FOR_DCD;
        }

        if (Extension->TXHolding & CYZ_TX_XOFF) {
            Stat->HoldReasons |= SERIAL_TX_WAITING_FOR_XON;
        }

        if (Extension->TXHolding & CYZ_TX_BREAK) {
            Stat->HoldReasons |= SERIAL_TX_WAITING_ON_BREAK;
        }
    }

    if (Extension->RXHolding & CYZ_RX_DSR) {
        Stat->HoldReasons |= SERIAL_RX_WAITING_FOR_DSR;
    }

    if (Extension->RXHolding & CYZ_RX_XOFF) {
        Stat->HoldReasons |= SERIAL_TX_WAITING_XOFF_SENT;
    }

    return FALSE;

}

BOOLEAN
CyzSetEscapeChar(
    IN PVOID Context
    )
/*--------------------------------------------------------------------------
    CyzSetEscapeChar()
    
    Routine Description: This is used to set the character that will be
    used to escape line status and modem status information when the
    application has set up that line status and modem status should be
    passed back in the data stream.

    Arguments:

    Context - Pointer to the irp that is to specify the escape character.
              Implicitly - An escape character of 0 means no escaping.

    Return Value: This routine always returns FALSE.
--------------------------------------------------------------------------*/
{
    PCYZ_DEVICE_EXTENSION extension =
        IoGetCurrentIrpStackLocation((PIRP)Context)
            ->DeviceObject->DeviceExtension;

    extension->EscapeChar =
        *(PUCHAR)((PIRP)Context)->AssociatedIrp.SystemBuffer;

    return FALSE;
}

NTSTATUS
CyzIoControl(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    )
/*--------------------------------------------------------------------------
    CyzIoControl()

    Description: This routine provides the initial processing for
    all of the Ioctls for the serial device.

    Arguments:
    
    DeviceObject - Pointer to the device object for this device
    
    Irp - Pointer to the IRP for the current request

    Return Value:

    The function value is the final status of the call
--------------------------------------------------------------------------*/
{
    NTSTATUS Status;
    PIO_STACK_LOCATION IrpSp;
    PCYZ_DEVICE_EXTENSION Extension = DeviceObject->DeviceExtension;
    KIRQL OldIrql;
#ifdef POLL
    KIRQL pollIrql;
#endif

    NTSTATUS prologueStatus;

    CYZ_LOCKED_PAGED_CODE();

    //
    // We expect to be open so all our pages are locked down.  This is, after
    // all, an IO operation, so the device should be open first.
    //

    if (Extension->DeviceIsOpened != TRUE) {
       Irp->IoStatus.Status = STATUS_INVALID_DEVICE_REQUEST;
       IoCompleteRequest(Irp, IO_NO_INCREMENT);
       return STATUS_INVALID_DEVICE_REQUEST;
    }

    if ((prologueStatus = CyzIRPPrologue(Irp, Extension))
        != STATUS_SUCCESS) {
       if(prologueStatus != STATUS_PENDING) {
         Irp->IoStatus.Status = prologueStatus;
         CyzCompleteRequest(Extension, Irp, IO_NO_INCREMENT);
       }
       return prologueStatus;
    }

    CyzDbgPrintEx(CYZIRPPATH, "Dispatch entry for: %x\n", Irp);

    if (CyzCompleteIfError(DeviceObject,Irp) != STATUS_SUCCESS) {
        return STATUS_CANCELLED;
    }		
	 IrpSp = IoGetCurrentIrpStackLocation(Irp);
    Irp->IoStatus.Information = 0L;
    Status = STATUS_SUCCESS;
    switch (IrpSp->Parameters.DeviceIoControl.IoControlCode) {
	
        case IOCTL_SERIAL_SET_BAUD_RATE : {

            ULONG BaudRate;
						
            if (IrpSp->Parameters.DeviceIoControl.InputBufferLength <
                sizeof(SERIAL_BAUD_RATE)) {
                Status = STATUS_BUFFER_TOO_SMALL;
                break;
            } else {
                BaudRate = ((PSERIAL_BAUD_RATE)
				(Irp->AssociatedIrp.SystemBuffer))->BaudRate;
				
				if (BaudRate == 0) {
					Status = STATUS_INVALID_PARAMETER;
					break;
				}
            }

            //
            // Make sure we are at power D0
            //

            if (NT_SUCCESS(Status)) {
               if (Extension->PowerState != PowerDeviceD0) {
                  Status = CyzGotoPowerState(Extension->Pdo, Extension,
                                                PowerDeviceD0);
                  if (!NT_SUCCESS(Status)) {
                     break;
                  }
               }
            }

            KeAcquireSpinLock(&Extension->ControlLock,&OldIrql);

            if (NT_SUCCESS(Status)) {
                CYZ_IOCTL_BAUD S;

                Extension->CurrentBaud = BaudRate;
                Extension->WmiCommData.BaudRate = BaudRate;
                S.Extension = Extension;
                S.Baud = BaudRate;
				#ifdef POLL
                KeAcquireSpinLock(&Extension->PollLock,&pollIrql);
                CyzSetBaud(&S);
                KeReleaseSpinLock(&Extension->PollLock,pollIrql);
				#else
                KeSynchronizeExecution(Extension->Interrupt,CyzSetBaud,&S);
				#endif
            }

            KeReleaseSpinLock(&Extension->ControlLock,OldIrql);
            break;
        }
        case IOCTL_SERIAL_GET_BAUD_RATE: {

            PSERIAL_BAUD_RATE Br = (PSERIAL_BAUD_RATE)Irp->AssociatedIrp.SystemBuffer;

            if (IrpSp->Parameters.DeviceIoControl.OutputBufferLength <
                sizeof(SERIAL_BAUD_RATE)) {
                Status = STATUS_BUFFER_TOO_SMALL;
                break;
            }

            KeAcquireSpinLock(&Extension->ControlLock,&OldIrql);

            Br->BaudRate = Extension->CurrentBaud;

            KeReleaseSpinLock(&Extension->ControlLock,OldIrql);

            Irp->IoStatus.Information = sizeof(SERIAL_BAUD_RATE);
            break;

        }
        case IOCTL_SERIAL_GET_MODEM_CONTROL: {
           CYZ_IOCTL_SYNC S;

            if (IrpSp->Parameters.DeviceIoControl.OutputBufferLength <
                sizeof(ULONG)) {

                Status = STATUS_BUFFER_TOO_SMALL;
                break;

            }

            Irp->IoStatus.Information = sizeof(ULONG);

            S.Extension = Extension;
            S.Data = Irp->AssociatedIrp.SystemBuffer;

            KeAcquireSpinLock(
                &Extension->ControlLock,
                &OldIrql
                );

            #ifdef POLL
            KeAcquireSpinLock(&Extension->PollLock,&pollIrql);
            CyzGetMCRContents(&S);
            KeReleaseSpinLock(&Extension->PollLock,pollIrql);
            #else
            KeSynchronizeExecution(Extension->Interrupt,CyzGetMCRContents,&S);
            #endif

            KeReleaseSpinLock(
                &Extension->ControlLock,
                OldIrql
                );

            break;
        }
        case IOCTL_SERIAL_SET_MODEM_CONTROL: {
           CYZ_IOCTL_SYNC S;

            if (IrpSp->Parameters.DeviceIoControl.InputBufferLength <
                sizeof(ULONG)) {

                Status = STATUS_BUFFER_TOO_SMALL;
                break;

            }

            S.Extension = Extension;
            S.Data = Irp->AssociatedIrp.SystemBuffer;

            //
            // Make sure we are at power D0
            //

            if (Extension->PowerState != PowerDeviceD0) {
               Status = CyzGotoPowerState(Extension->Pdo, Extension,
                                             PowerDeviceD0);
               if (!NT_SUCCESS(Status)) {
                  break;
               }
            }

            KeAcquireSpinLock(
                &Extension->ControlLock,
                &OldIrql
                );

            #ifdef POLL
            KeAcquireSpinLock(&Extension->PollLock,&pollIrql);
            CyzSetMCRContents(&S);
            KeReleaseSpinLock(&Extension->PollLock,pollIrql);
            #else
            KeSynchronizeExecution(Extension->Interrupt,CyzSetMCRContents,&S);
            #endif

            KeReleaseSpinLock(
                &Extension->ControlLock,
                OldIrql
                );

            break;
        }
        case IOCTL_SERIAL_SET_FIFO_CONTROL: {
            CYZ_IOCTL_SYNC S;

            if (IrpSp->Parameters.DeviceIoControl.InputBufferLength <
                sizeof(ULONG)) {
                Status = STATUS_BUFFER_TOO_SMALL;
                break;
            }

            S.Extension = Extension;
            S.Data = Irp->AssociatedIrp.SystemBuffer;

            //
            // Make sure we are at power D0
            //

            if (Extension->PowerState != PowerDeviceD0) {
               Status = CyzGotoPowerState(Extension->Pdo, Extension,
                                             PowerDeviceD0);
               if (!NT_SUCCESS(Status)) {
                  break;
               }
            }

            KeAcquireSpinLock(
                &Extension->ControlLock,
                &OldIrql
                );

            #ifdef POLL
            KeAcquireSpinLock(&Extension->PollLock,&pollIrql);
            CyzSetFCRContents(&S);
            KeReleaseSpinLock(&Extension->PollLock,pollIrql);
            #else
            KeSynchronizeExecution(Extension->Interrupt,CyzSetFCRContents,&S);
            #endif

            KeReleaseSpinLock(
                &Extension->ControlLock,
                OldIrql
                );

            break;
        }
        case IOCTL_SERIAL_SET_LINE_CONTROL: {

            PSERIAL_LINE_CONTROL Lc =
                ((PSERIAL_LINE_CONTROL)(Irp->AssociatedIrp.SystemBuffer));
            UCHAR LData;
            UCHAR LStop;
            UCHAR LParity;
            UCHAR Mask = 0xff;
			
            if (IrpSp->Parameters.DeviceIoControl.InputBufferLength <
                sizeof(SERIAL_LINE_CONTROL)) {
                Status = STATUS_BUFFER_TOO_SMALL;
                break;
            }

            //
            // Make sure we are at power D0
            //

            if (Extension->PowerState != PowerDeviceD0) {
               Status = CyzGotoPowerState(Extension->Pdo, Extension,
                                             PowerDeviceD0);
               if (!NT_SUCCESS(Status)) {
                  break;
               }
            }

            switch (Lc->WordLength) {
                case 5:		LData = C_DL_CS5; Mask = 0x1f;
                break;

                case 6:		LData = C_DL_CS6; Mask = 0x3f;
                break;

                case 7:		LData = C_DL_CS7; Mask = 0x7f;
                break;

                case 8:		LData = C_DL_CS8; Mask = 0xff;
                break;

                default:	Status = STATUS_INVALID_PARAMETER;
                goto DoneWithIoctl;
            }

            Extension->WmiCommData.BitsPerByte = Lc->WordLength;

            switch (Lc->Parity) {
                case NO_PARITY:	{	
                    Extension->WmiCommData.Parity = SERIAL_WMI_PARITY_NONE;
                    LParity = C_PR_NONE;
                    break;
                }
                case EVEN_PARITY: {
                    Extension->WmiCommData.Parity = SERIAL_WMI_PARITY_EVEN;
                    LParity = C_PR_EVEN;
                    break;
                }
                case ODD_PARITY:	{
                    Extension->WmiCommData.Parity = SERIAL_WMI_PARITY_ODD;
                    LParity = C_PR_ODD;
                    break;
                }
                case SPACE_PARITY:	{
                    Extension->WmiCommData.Parity = SERIAL_WMI_PARITY_SPACE;
                    LParity = C_PR_SPACE;
                    break;
                }
                case MARK_PARITY: {
                    Extension->WmiCommData.Parity = SERIAL_WMI_PARITY_MARK;
                    LParity = C_PR_MARK;
                    break;
                }
                default:	{	
                    Status = STATUS_INVALID_PARAMETER;
                    goto DoneWithIoctl;
                }
            }

            switch (Lc->StopBits) {
                case STOP_BIT_1:	{
                    Extension->WmiCommData.StopBits = SERIAL_WMI_STOP_1;
                    LStop = C_DL_1STOP;
                    break;
                }
                case STOP_BITS_1_5:	{
                    if (LData != C_DL_CS5) {
                        Status = STATUS_INVALID_PARAMETER;
                        goto DoneWithIoctl;
                    }					
                    Extension->WmiCommData.StopBits = SERIAL_WMI_STOP_1_5;
                    LStop = C_DL_15STOP;
                    break;
                }
                case STOP_BITS_2: {	
                    if (LData == C_DL_CS5) {
                        Status = STATUS_INVALID_PARAMETER;
                        goto DoneWithIoctl;
                    }	
                    Extension->WmiCommData.StopBits = SERIAL_WMI_STOP_2;
                    LStop = C_DL_2STOP;
                    break;
                }
                default: {	 	
                    Status = STATUS_INVALID_PARAMETER;
                    goto DoneWithIoctl;
                }
            }

            KeAcquireSpinLock(&Extension->ControlLock,&OldIrql);

            Extension->CommDataLen = LData | LStop;
            Extension->CommParity = LParity;	
            Extension->ValidDataMask = (UCHAR) Mask;

            #ifdef POLL
            KeAcquireSpinLock(&Extension->PollLock,&pollIrql);
            CyzSetLineControl(Extension);
            KeReleaseSpinLock(&Extension->PollLock,pollIrql);
            #else
            KeSynchronizeExecution(
                Extension->Interrupt,
                CyzSetLineControl,
                Extension
                );
            #endif

            KeReleaseSpinLock(&Extension->ControlLock,OldIrql);
            break;
        }        
        case IOCTL_SERIAL_GET_LINE_CONTROL: {

            PSERIAL_LINE_CONTROL Lc = (PSERIAL_LINE_CONTROL)Irp->AssociatedIrp.SystemBuffer;

            if (IrpSp->Parameters.DeviceIoControl.OutputBufferLength <
                sizeof(SERIAL_LINE_CONTROL)) {
                Status = STATUS_BUFFER_TOO_SMALL;
                break;
            }

            KeAcquireSpinLock(&Extension->ControlLock,&OldIrql);

            if ((Extension->CommDataLen & C_DL_CS) == C_DL_CS5) {
                Lc->WordLength = 5;
            } else if ((Extension->CommDataLen & C_DL_CS) == C_DL_CS6) {
                Lc->WordLength = 6;
            } else if ((Extension->CommDataLen & C_DL_CS) == C_DL_CS7) {
                Lc->WordLength = 7;
            } else if ((Extension->CommDataLen & C_DL_CS) == C_DL_CS8) {
                Lc->WordLength = 8;
            }

            if (Extension->CommParity == C_PR_NONE) {
                Lc->Parity = C_PR_NONE;
            } else if (Extension->CommParity == C_PR_ODD) {
                Lc->Parity = ODD_PARITY;
            } else if (Extension->CommParity == C_PR_EVEN) {
                Lc->Parity = EVEN_PARITY;
            } else if (Extension->CommParity == C_PR_MARK) {
                Lc->Parity = MARK_PARITY;
            } else if (Extension->CommParity == C_PR_SPACE) {
                Lc->Parity = SPACE_PARITY;
            }

            if ((Extension->CommDataLen & C_DL_STOP) == C_DL_2STOP) {
                if (Lc->WordLength == 5) {
                    Lc->StopBits = STOP_BITS_1_5;
                } else {
                    Lc->StopBits = STOP_BITS_2;
                }
            } else {
                Lc->StopBits = STOP_BIT_1;
            }

            Irp->IoStatus.Information = sizeof(SERIAL_LINE_CONTROL);
            KeReleaseSpinLock(&Extension->ControlLock,OldIrql);
            break;
        }
        case IOCTL_SERIAL_SET_TIMEOUTS: {
            PSERIAL_TIMEOUTS NewTimeouts =
                ((PSERIAL_TIMEOUTS)(Irp->AssociatedIrp.SystemBuffer));

            if (IrpSp->Parameters.DeviceIoControl.InputBufferLength <
                sizeof(SERIAL_TIMEOUTS)) {
                Status = STATUS_BUFFER_TOO_SMALL;
                break;
            }

            if ((NewTimeouts->ReadIntervalTimeout == MAXULONG) &&
                (NewTimeouts->ReadTotalTimeoutMultiplier == MAXULONG) &&
                (NewTimeouts->ReadTotalTimeoutConstant == MAXULONG)) {
                Status = STATUS_INVALID_PARAMETER;
                break;
            }

            KeAcquireSpinLock(&Extension->ControlLock,&OldIrql);
	    
            Extension->Timeouts.ReadIntervalTimeout =
                NewTimeouts->ReadIntervalTimeout;
            Extension->Timeouts.ReadTotalTimeoutMultiplier =
                NewTimeouts->ReadTotalTimeoutMultiplier;
            Extension->Timeouts.ReadTotalTimeoutConstant =
                NewTimeouts->ReadTotalTimeoutConstant;
            Extension->Timeouts.WriteTotalTimeoutMultiplier =
                NewTimeouts->WriteTotalTimeoutMultiplier;
            Extension->Timeouts.WriteTotalTimeoutConstant =
                NewTimeouts->WriteTotalTimeoutConstant;

            KeReleaseSpinLock(&Extension->ControlLock,OldIrql);
            break;
        }
        case IOCTL_SERIAL_GET_TIMEOUTS: {
            if (IrpSp->Parameters.DeviceIoControl.OutputBufferLength <
                sizeof(SERIAL_TIMEOUTS)) {
                Status = STATUS_BUFFER_TOO_SMALL;
                break;
            }
			
            KeAcquireSpinLock(&Extension->ControlLock,&OldIrql);			

            *((PSERIAL_TIMEOUTS)Irp->AssociatedIrp.SystemBuffer) =
	    						Extension->Timeouts;
	    
            Irp->IoStatus.Information = sizeof(SERIAL_TIMEOUTS);

            KeReleaseSpinLock(&Extension->ControlLock,OldIrql);
            break;
        }
        case IOCTL_SERIAL_SET_CHARS: {
            CYZ_IOCTL_SYNC S;
	    
            PSERIAL_CHARS NewChars =
                ((PSERIAL_CHARS)(Irp->AssociatedIrp.SystemBuffer));
				
            if (IrpSp->Parameters.DeviceIoControl.InputBufferLength <
                sizeof(SERIAL_CHARS)) {
                Status = STATUS_BUFFER_TOO_SMALL;
                break;
            }
#if 0
            if (NewChars->XonChar == NewChars->XoffChar) {
                Status = STATUS_INVALID_PARAMETER;
                break;
            }
#endif
            // We acquire the control lock so that only
            // one request can GET or SET the characters
            // at a time.  The sets could be synchronized
            // by the interrupt spinlock, but that wouldn't
            // prevent multiple gets at the same time.

            S.Extension = Extension;
            S.Data = NewChars;

            KeAcquireSpinLock(&Extension->ControlLock,&OldIrql);

            // Under the protection of the lock, make sure that
            // the xon and xoff characters aren't the same as
            // the escape character.

            if (Extension->EscapeChar) {
                if ((Extension->EscapeChar == NewChars->XonChar) ||
                    (Extension->EscapeChar == NewChars->XoffChar)) {
                    Status = STATUS_INVALID_PARAMETER;
                    KeReleaseSpinLock(&Extension->ControlLock,OldIrql);
                    break;
                }
            }

            Extension->WmiCommData.XonCharacter = NewChars->XonChar;
            Extension->WmiCommData.XoffCharacter = NewChars->XoffChar;

            #ifdef POLL
            KeAcquireSpinLock(&Extension->PollLock,&pollIrql);
            CyzSetChars(&S);
            KeReleaseSpinLock(&Extension->PollLock,pollIrql);
            #else
            KeSynchronizeExecution(Extension->Interrupt,CyzSetChars,&S);
            #endif

            KeReleaseSpinLock(&Extension->ControlLock,OldIrql);
            break;
        }
        case IOCTL_SERIAL_GET_CHARS: {
            if (IrpSp->Parameters.DeviceIoControl.OutputBufferLength <
                sizeof(SERIAL_CHARS)) {
                Status = STATUS_BUFFER_TOO_SMALL;
                break;
            }
			
            KeAcquireSpinLock(&Extension->ControlLock,&OldIrql);

            *((PSERIAL_CHARS)Irp->AssociatedIrp.SystemBuffer) =
	    					Extension->SpecialChars;
            Irp->IoStatus.Information = sizeof(SERIAL_CHARS);

            KeReleaseSpinLock(&Extension->ControlLock,OldIrql);
            break;
        }
        case IOCTL_SERIAL_SET_DTR:
        case IOCTL_SERIAL_CLR_DTR: {
		
            //
            // Make sure we are at power D0
            //

            if (Extension->PowerState != PowerDeviceD0) {
               Status = CyzGotoPowerState(Extension->Pdo, Extension,
                                             PowerDeviceD0);
               if (!NT_SUCCESS(Status)) {
                      break;
               }
            }
		
            // We acquire the lock so that we can check whether
            // automatic dtr flow control is enabled.  If it is
            // then we return an error since the app is not allowed
            // to touch this if it is automatic.

            KeAcquireSpinLock(&Extension->ControlLock,&OldIrql);

            if ((Extension->HandFlow.ControlHandShake & SERIAL_DTR_MASK)
                == SERIAL_DTR_HANDSHAKE) {
                // this is a bug from the sample driver.
                //Irp->IoStatus.Status = STATUS_INVALID_PARAMETER;
                Status = STATUS_INVALID_PARAMETER;
            } else {
                #ifdef POLL
                KeAcquireSpinLock(&Extension->PollLock,&pollIrql);
                ((IrpSp->Parameters.DeviceIoControl.IoControlCode ==
                     IOCTL_SERIAL_SET_DTR)?
                     (CyzSetDTR(Extension)):(CyzClrDTR(Extension)));
                KeReleaseSpinLock(&Extension->PollLock,pollIrql);
                #else
                KeSynchronizeExecution(
                    Extension->Interrupt,
                    ((IrpSp->Parameters.DeviceIoControl.IoControlCode ==
                     IOCTL_SERIAL_SET_DTR)?
                     (CyzSetDTR):(CyzClrDTR)),
                    Extension
                    );
                #endif
            }

            KeReleaseSpinLock(&Extension->ControlLock,OldIrql);
            break;
        }
        case IOCTL_SERIAL_RESET_DEVICE: {

            break;
        }	
        case IOCTL_SERIAL_SET_RTS:
        case IOCTL_SERIAL_CLR_RTS: {
						
            //
            // Make sure we are at power D0
            //

            if (Extension->PowerState != PowerDeviceD0) {
               Status = CyzGotoPowerState(Extension->Pdo, Extension,
                                             PowerDeviceD0);
               if (!NT_SUCCESS(Status)) {
                  break;
               }
            }

            // We acquire the lock so that we can check whether
            // automatic rts flow control or transmit toggleing
            // is enabled.  If it is then we return an error since
            // the app is not allowed to touch this if it is automatic
            // or toggling.

            KeAcquireSpinLock(&Extension->ControlLock,&OldIrql);

            if (((Extension->HandFlow.FlowReplace & SERIAL_RTS_MASK)
                 == SERIAL_RTS_HANDSHAKE) ||
                ((Extension->HandFlow.FlowReplace & SERIAL_RTS_MASK)
                 == SERIAL_TRANSMIT_TOGGLE)) {

                // this is a bug from the sample driver.
                //Irp->IoStatus.Status = STATUS_INVALID_PARAMETER;

                Status = STATUS_INVALID_PARAMETER;
            } else {
                #ifdef POLL
                KeAcquireSpinLock(&Extension->PollLock,&pollIrql);
                ((IrpSp->Parameters.DeviceIoControl.IoControlCode ==
                 IOCTL_SERIAL_SET_RTS)?
                 (CyzSetRTS(Extension)):(CyzClrRTS(Extension)));
                KeReleaseSpinLock(&Extension->PollLock,pollIrql);
                #else
                KeSynchronizeExecution(
                    Extension->Interrupt,
                    ((IrpSp->Parameters.DeviceIoControl.IoControlCode ==
                     IOCTL_SERIAL_SET_RTS)?
                     (CyzSetRTS):(CyzClrRTS)),
                    Extension
                    );
                #endif
            }
            KeReleaseSpinLock(&Extension->ControlLock,OldIrql);
            break;
        }
	     case IOCTL_SERIAL_SET_XOFF: {
		
            #ifdef POLL					
            KeAcquireSpinLock(&Extension->PollLock,&pollIrql);
            CyzPretendXoff(Extension);
            KeReleaseSpinLock(&Extension->PollLock,pollIrql);
            #else
            KeSynchronizeExecution(
                Extension->Interrupt,
                CyzPretendXoff,
                Extension
                );
            #endif
            break;

        }
        case IOCTL_SERIAL_SET_XON: {
		
            #ifdef POLL
            KeAcquireSpinLock(&Extension->PollLock,&pollIrql);
            CyzPretendXon(Extension); 
            KeReleaseSpinLock(&Extension->PollLock,pollIrql);
            #else		
            KeSynchronizeExecution(
                Extension->Interrupt,
                CyzPretendXon,
                Extension
                );
            #endif
            break;

        }
        case IOCTL_SERIAL_SET_BREAK_ON: {
		
            //
            // Make sure we are at power D0
            //

            if (Extension->PowerState != PowerDeviceD0) {
                Status = CyzGotoPowerState(Extension->Pdo, Extension,
                                             PowerDeviceD0);
                if (!NT_SUCCESS(Status)) {
                    break;
                }
            }
            
            #ifdef POLL
            KeAcquireSpinLock(&Extension->PollLock,&pollIrql);
            CyzTurnOnBreak(Extension);
            KeReleaseSpinLock(&Extension->PollLock,pollIrql);
            #else
            KeSynchronizeExecution(
                Extension->Interrupt,
                CyzTurnOnBreak,
                Extension
                );
            #endif
            break;
        }
	     case IOCTL_SERIAL_SET_BREAK_OFF: {
		
            //
            // Make sure we are at power D0
            //

            if (Extension->PowerState != PowerDeviceD0) {
               Status = CyzGotoPowerState(Extension->Pdo, Extension,
                                             PowerDeviceD0);
               if (!NT_SUCCESS(Status)) {
                  break;
               }
            }

            #ifdef POLL
            KeAcquireSpinLock(&Extension->PollLock,&pollIrql);
            CyzTurnOffBreak(Extension);
            KeReleaseSpinLock(&Extension->PollLock,pollIrql);
            #else
            KeSynchronizeExecution(
                Extension->Interrupt,
                CyzTurnOffBreak,
                Extension
                );
            #endif
            break;
        }
        case IOCTL_SERIAL_SET_QUEUE_SIZE: {				
		
            // Type ahead buffer is fixed, so we just validate
            // that the users request is not bigger that our
            // own internal buffer size.

            PSERIAL_QUEUE_SIZE Rs =
                ((PSERIAL_QUEUE_SIZE)(Irp->AssociatedIrp.SystemBuffer));

            if (IrpSp->Parameters.DeviceIoControl.InputBufferLength <
                sizeof(SERIAL_QUEUE_SIZE)) {
                Status = STATUS_BUFFER_TOO_SMALL;
                break;
            }

            //
            // We have to allocate the memory for the new
            // buffer while we're still in the context of the
            // caller.  We don't even try to protect this
            // with a lock because the value could be stale
            // as soon as we release the lock - The only time
            // we will know for sure is when we actually try
            // to do the resize.
            //

            if (Rs->InSize <= Extension->BufferSize) {
                Status = STATUS_SUCCESS;
                break;
            }

            try {
                IrpSp->Parameters.DeviceIoControl.Type3InputBuffer =
                    ExAllocatePoolWithQuota(
                        NonPagedPool,
                        Rs->InSize
                        );

            } except (EXCEPTION_EXECUTE_HANDLER) {
                IrpSp->Parameters.DeviceIoControl.Type3InputBuffer = NULL;
                Status = GetExceptionCode();
            }

            if (!IrpSp->Parameters.DeviceIoControl.Type3InputBuffer) {
                break;
            }

            //
            // Well the data passed was big enough.  Do the request.
            //
            // There are two reason we place it in the read queue:
            //
            // 1) We want to serialize these resize requests so that
            //    they don't contend with each other.
            //
            // 2) We want to serialize these requests with reads since
            //    we don't want reads and resizes contending over the
            //    read buffer.
            //

            return CyzStartOrQueue(
                       Extension,
                       Irp,
                       &Extension->ReadQueue,
                       &Extension->CurrentReadIrp,
                       CyzStartRead
                       );
            break;
        }
        case IOCTL_SERIAL_GET_WAIT_MASK: {
		
            if (IrpSp->Parameters.DeviceIoControl.OutputBufferLength <
                sizeof(ULONG)) {

                Status = STATUS_BUFFER_TOO_SMALL;
                break;
            }

            // Simple scalar read.  No reason to acquire a lock.
            Irp->IoStatus.Information = sizeof(ULONG);
            *((ULONG *)Irp->AssociatedIrp.SystemBuffer) = Extension->IsrWaitMask;
            break;
        }
        case IOCTL_SERIAL_SET_WAIT_MASK: {

            ULONG NewMask;
			
            CyzDbgPrintEx(CYZIRPPATH, "In Ioctl processing for set mask\n");

            if (IrpSp->Parameters.DeviceIoControl.InputBufferLength <
                sizeof(ULONG)) {

                CyzDbgPrintEx(CYZDIAG3, "Invalid size fo the buffer %d\n",
                              IrpSp->Parameters
                              .DeviceIoControl.InputBufferLength);

                Status = STATUS_BUFFER_TOO_SMALL;
                break;

            } else {
                NewMask = *((ULONG *)Irp->AssociatedIrp.SystemBuffer);
            }

            // Make sure that the mask only contains valid waitable events.
            if (NewMask & ~(SERIAL_EV_RXCHAR   |
                            SERIAL_EV_RXFLAG   |
                            SERIAL_EV_TXEMPTY  |
                            SERIAL_EV_CTS      |
                            SERIAL_EV_DSR      |
                            SERIAL_EV_RLSD     |
                            SERIAL_EV_BREAK    |
                            SERIAL_EV_ERR      |
                            SERIAL_EV_RING     |
                            SERIAL_EV_PERR     |
                            SERIAL_EV_RX80FULL |
                            SERIAL_EV_EVENT1   |
                            SERIAL_EV_EVENT2)) {

                CyzDbgPrintEx(CYZDIAG3, "Unknown mask %x\n", NewMask);

                Status = STATUS_INVALID_PARAMETER;
                break;
            }

            // Either start this irp or put it on the queue.

            CyzDbgPrintEx(CYZIRPPATH, "Starting or queuing set mask irp %x"
                          "\n", Irp);

            return CyzStartOrQueue(Extension,Irp,&Extension->MaskQueue,
                                   &Extension->CurrentMaskIrp,
                                   CyzStartMask);

        }
        case IOCTL_SERIAL_WAIT_ON_MASK: {
		
            CyzDbgPrintEx(CYZIRPPATH, "In Ioctl processing for wait mask\n");
		
            if (IrpSp->Parameters.DeviceIoControl.OutputBufferLength <
                sizeof(ULONG)) {

                CyzDbgPrintEx(CYZDIAG3, "Invalid size for the buffer %d\n",
                              IrpSp->Parameters
                              .DeviceIoControl.OutputBufferLength);

                Status = STATUS_BUFFER_TOO_SMALL;
                break;
            }

            // Either start this irp or put it on the queue.

            CyzDbgPrintEx(CYZIRPPATH, "Starting or queuing wait mask irp"
                          "%x\n", Irp);

            return CyzStartOrQueue(
                       Extension,
                       Irp,
                       &Extension->MaskQueue,
                       &Extension->CurrentMaskIrp,
                       CyzStartMask
                       );

        }	
        case IOCTL_SERIAL_IMMEDIATE_CHAR: {

            KIRQL OldIrql;

            if (IrpSp->Parameters.DeviceIoControl.InputBufferLength <
                sizeof(UCHAR)) {
                Status = STATUS_BUFFER_TOO_SMALL;
                break;
            }

            IoAcquireCancelSpinLock(&OldIrql);
            if (Extension->CurrentImmediateIrp) {
                Status = STATUS_INVALID_PARAMETER;
                IoReleaseCancelSpinLock(OldIrql);
            } else {
                // We can queue the char.  We need to set
                // a cancel routine because flow control could
                // keep the char from transmitting.  Make sure
                // that the irp hasn't already been canceled.

                if (Irp->Cancel) {
                    IoReleaseCancelSpinLock(OldIrql);
                    Status = STATUS_CANCELLED;
                } else {
                    Extension->CurrentImmediateIrp = Irp;
                    Extension->TotalCharsQueued++;
                    IoReleaseCancelSpinLock(OldIrql);
                    CyzStartImmediate(Extension);

                    return STATUS_PENDING;
                }
            }
            break;

        }	
        case IOCTL_SERIAL_PURGE: {
            ULONG Mask;

            if (IrpSp->Parameters.DeviceIoControl.InputBufferLength <
                sizeof(ULONG)) {

                Status = STATUS_BUFFER_TOO_SMALL;
                break;

            }

            // Check to make sure that the mask is valid

            Mask = *((ULONG *)(Irp->AssociatedIrp.SystemBuffer));

            LOGENTRY(LOG_MISC, ZSIG_PURGE, 
                               Extension->PortIndex+1,
                               Mask, 
                               0);

            if ((!Mask) || (Mask & (~(SERIAL_PURGE_TXABORT |
                                      SERIAL_PURGE_RXABORT |
                                      SERIAL_PURGE_TXCLEAR |
                                      SERIAL_PURGE_RXCLEAR )))) {

                Status = STATUS_INVALID_PARAMETER;
                break;
            }

            // Either start this irp or put it on the queue.

            return CyzStartOrQueue(
                       Extension,
                       Irp,
                       &Extension->PurgeQueue,
                       &Extension->CurrentPurgeIrp,
                       CyzStartPurge
                       );
        }	
        case IOCTL_SERIAL_GET_HANDFLOW: {
				
            if (IrpSp->Parameters.DeviceIoControl.OutputBufferLength <
                				sizeof(SERIAL_HANDFLOW)) {
                Status = STATUS_BUFFER_TOO_SMALL;
                break;
            }

            Irp->IoStatus.Information = sizeof(SERIAL_HANDFLOW);

            KeAcquireSpinLock(&Extension->ControlLock,&OldIrql);

            *((PSERIAL_HANDFLOW)Irp->AssociatedIrp.SystemBuffer) =
                					Extension->HandFlow;
            KeReleaseSpinLock(&Extension->ControlLock,OldIrql);

            break;

        }
        case IOCTL_SERIAL_SET_HANDFLOW: {
            CYZ_IOCTL_SYNC S;
            PSERIAL_HANDFLOW HandFlow = Irp->AssociatedIrp.SystemBuffer;

            if (IrpSp->Parameters.DeviceIoControl.InputBufferLength <
                sizeof(SERIAL_HANDFLOW)) {
                Status = STATUS_BUFFER_TOO_SMALL;
                break;
            }
            // Make sure that there are no invalid bits set.
            if (HandFlow->ControlHandShake & SERIAL_CONTROL_INVALID) {
                Status = STATUS_INVALID_PARAMETER;
                break;
            }
            if (HandFlow->FlowReplace & SERIAL_FLOW_INVALID) {
                Status = STATUS_INVALID_PARAMETER;
                break;
            }

            // Make sure that the app hasn't set an invlid DTR mode.
            if((HandFlow->ControlHandShake&SERIAL_DTR_MASK)==SERIAL_DTR_MASK) {
                Status = STATUS_INVALID_PARAMETER;
                break;
            }

            // Make sure that haven't set totally invalid xon/xoff limits.
            if ((HandFlow->XonLimit < 0) ||
	                ((ULONG)HandFlow->XonLimit > Extension->BufferSize)) {
                Status = STATUS_INVALID_PARAMETER;
                break;
            }
            if ((HandFlow->XoffLimit < 0) || 
                    ((ULONG)HandFlow->XoffLimit > Extension->BufferSize)) {
                Status = STATUS_INVALID_PARAMETER;
                break;
            } 

            S.Extension = Extension;
            S.Data = HandFlow;


            KeAcquireSpinLock(&Extension->ControlLock,&OldIrql);

            // Under the protection of the lock, make sure that
            // we aren't turning on error replacement when we
            // are doing line status/modem status insertion.

            if (Extension->EscapeChar) {
                if (HandFlow->FlowReplace & SERIAL_ERROR_CHAR) {
                    Status = STATUS_INVALID_PARAMETER;
                    KeReleaseSpinLock(&Extension->ControlLock,OldIrql);
                    break;
                }
            }
			
            #ifdef POLL
            KeAcquireSpinLock(&Extension->PollLock,&pollIrql);
            CyzSetHandFlow(&S);
            KeReleaseSpinLock(&Extension->PollLock,pollIrql);
            #else
            KeSynchronizeExecution(Extension->Interrupt,CyzSetHandFlow,&S);
            #endif

            KeReleaseSpinLock(&Extension->ControlLock,OldIrql);
            break;
        }	
        case IOCTL_SERIAL_GET_MODEMSTATUS: {
            CYZ_IOCTL_SYNC S;

            if(IrpSp->Parameters.DeviceIoControl.OutputBufferLength <
	    						sizeof(ULONG)) {
                Status = STATUS_BUFFER_TOO_SMALL;
                break;
            }

            Irp->IoStatus.Information = sizeof(ULONG);

            S.Extension = Extension;
            S.Data = Irp->AssociatedIrp.SystemBuffer;

            KeAcquireSpinLock(&Extension->ControlLock,&OldIrql);
            #ifdef POLL
            KeAcquireSpinLock(&Extension->PollLock,&pollIrql);
            CyzGetModemUpdate(&S);
            KeReleaseSpinLock(&Extension->PollLock,pollIrql);
            #else
            KeSynchronizeExecution(Extension->Interrupt,CyzGetModemUpdate,&S);
            #endif
            KeReleaseSpinLock(&Extension->ControlLock,OldIrql);
            break;
        }
        case IOCTL_SERIAL_GET_DTRRTS: {
            ULONG ModemControl = 0;
            struct CH_CTRL *ch_ctrl;
            ULONG rs_status;

            if (IrpSp->Parameters.DeviceIoControl.OutputBufferLength <
					                sizeof(ULONG)) {
                Status = STATUS_BUFFER_TOO_SMALL;
                break;
            }

            Irp->IoStatus.Information = sizeof(ULONG);
            Irp->IoStatus.Status = STATUS_SUCCESS;

            // Reading this hardware has no effect on the device.

            ch_ctrl = Extension->ChCtrl;
            rs_status = CYZ_READ_ULONG(&ch_ctrl->rs_status);
            if (rs_status & C_RS_DTR) {
                ModemControl |= SERIAL_DTR_STATE;
            }
            if (rs_status & C_RS_RTS) {
                ModemControl |= SERIAL_RTS_STATE;
            }
			
            #if 0
            ModemControl = READ_MODEM_CONTROL(Extension->Controller);

            ModemControl &= SERIAL_DTR_STATE | SERIAL_RTS_STATE;
            #endif
			
            *(PULONG)Irp->AssociatedIrp.SystemBuffer = ModemControl;
			
            break;

        }
        case IOCTL_SERIAL_GET_COMMSTATUS: {
            CYZ_IOCTL_SYNC S;

            #ifdef POLL
            KIRQL ControlIrql;
            #endif

            if (IrpSp->Parameters.DeviceIoControl.OutputBufferLength <
				                sizeof(SERIAL_STATUS)) {
                Status = STATUS_BUFFER_TOO_SMALL;
                break;
            }

            Irp->IoStatus.Information = sizeof(SERIAL_STATUS);

            S.Extension = Extension;
            S.Data =  Irp->AssociatedIrp.SystemBuffer;

            // Acquire the cancel spin lock so nothing changes.

            IoAcquireCancelSpinLock(&OldIrql);
			
            #ifdef POLL
            KeAcquireSpinLock(&Extension->PollLock,&pollIrql);
            CyzGetCommStatus(&S);
            KeReleaseSpinLock(&Extension->PollLock,pollIrql);
            #else
            KeSynchronizeExecution(Extension->Interrupt,CyzGetCommStatus,&S);
            #endif

            IoReleaseCancelSpinLock(OldIrql);
            break;
        }
        case IOCTL_SERIAL_GET_PROPERTIES: {
		
            if (IrpSp->Parameters.DeviceIoControl.OutputBufferLength <
				                sizeof(SERIAL_COMMPROP)) {
                Status = STATUS_BUFFER_TOO_SMALL;
                break;
            }
            // No synchronization is required since information is "static".

            CyzGetProperties(Extension,Irp->AssociatedIrp.SystemBuffer);

            Irp->IoStatus.Information = sizeof(SERIAL_COMMPROP);
            Irp->IoStatus.Status = STATUS_SUCCESS;
            break;
        }
	
        case IOCTL_SERIAL_XOFF_COUNTER: {
            PSERIAL_XOFF_COUNTER Xc = Irp->AssociatedIrp.SystemBuffer;

            if (IrpSp->Parameters.DeviceIoControl.InputBufferLength <
				                sizeof(SERIAL_XOFF_COUNTER)) {
                Status = STATUS_BUFFER_TOO_SMALL;
                break;
            }

            if (Xc->Counter <= 0) {
                Status = STATUS_INVALID_PARAMETER;
                break;
            }

            //
            // There is no output, so make that clear now
            //

            Irp->IoStatus.Information = 0;  // Added in build 2128

            //
            // So far so good.  Put the irp onto the write queue.
            //

            return CyzStartOrQueue(
                       Extension,
                       Irp,
                       &Extension->WriteQueue,
                       &Extension->CurrentWriteIrp,
                       CyzStartWrite
                       );
        }	
        case IOCTL_SERIAL_LSRMST_INSERT: {
				
            PUCHAR escapeChar = Irp->AssociatedIrp.SystemBuffer;
            CYZ_IOCTL_SYNC S;

            if (IrpSp->Parameters.DeviceIoControl.InputBufferLength <
					                sizeof(UCHAR)) {
                Status = STATUS_BUFFER_TOO_SMALL;
                break;
            }

            KeAcquireSpinLock(&Extension->ControlLock,&OldIrql);

            if (*escapeChar) {
                // We've got some escape work to do.  We will make sure that
                // the character is not the same as the Xon or Xoff character,
                // or that we are already doing error replacement.

                if ((*escapeChar == Extension->SpecialChars.XoffChar) ||
                    (*escapeChar == Extension->SpecialChars.XonChar) ||
                    (Extension->HandFlow.FlowReplace & SERIAL_ERROR_CHAR)) {

                    Status = STATUS_INVALID_PARAMETER;
                    KeReleaseSpinLock(&Extension->ControlLock,OldIrql);
                    break;
                }
            }

            S.Extension = Extension;
            S.Data = Irp->AssociatedIrp.SystemBuffer;

            #ifdef POLL
            KeAcquireSpinLock(&Extension->PollLock,&pollIrql);
            CyzSetEscapeChar(Irp);
            KeReleaseSpinLock(&Extension->PollLock,pollIrql);
            #else
            KeSynchronizeExecution(Extension->Interrupt,CyzSetEscapeChar,Irp);
            #endif

            KeReleaseSpinLock(&Extension->ControlLock,OldIrql);
            break;
        }
        case IOCTL_SERIAL_CONFIG_SIZE: {
		
            if (IrpSp->Parameters.DeviceIoControl.OutputBufferLength <
					                sizeof(ULONG)) {
                Status = STATUS_BUFFER_TOO_SMALL;
                break;
            }

            Irp->IoStatus.Information = sizeof(ULONG);
            Irp->IoStatus.Status = STATUS_SUCCESS;

            *(PULONG)Irp->AssociatedIrp.SystemBuffer = 0;

            break;
        }				
        case IOCTL_SERIAL_GET_STATS: {

            if (IrpSp->Parameters.DeviceIoControl.OutputBufferLength <
                sizeof(SERIALPERF_STATS)) {

                Status = STATUS_BUFFER_TOO_SMALL;
                break;

            }
            Irp->IoStatus.Information = sizeof(SERIALPERF_STATS);
            Irp->IoStatus.Status = STATUS_SUCCESS;

            #ifdef POLL
            KeAcquireSpinLock(&Extension->PollLock,&pollIrql);
            CyzGetStats(Irp);
            KeReleaseSpinLock(&Extension->PollLock,pollIrql);
            #else
            KeSynchronizeExecution(
                Extension->Interrupt,
                CyzGetStats,
                Irp
                );
            #endif

            break;
        }
        case IOCTL_SERIAL_CLEAR_STATS: {

            #ifdef POLL
            KeAcquireSpinLock(&Extension->PollLock,&pollIrql);
            CyzClearStats(Extension);
            KeReleaseSpinLock(&Extension->PollLock,pollIrql);
            #else
            KeSynchronizeExecution(
                Extension->Interrupt,
                CyzClearStats,
                Extension
                );
            #endif
            break;
        }
        default: {
            Status = STATUS_INVALID_PARAMETER;
            break;
        }
    }

DoneWithIoctl:;

    Irp->IoStatus.Status = Status;

    CyzCompleteRequest(Extension, Irp, 0);
    
    return Status;	
	
}

VOID
CyzGetProperties(
    IN PCYZ_DEVICE_EXTENSION Extension,
    IN PSERIAL_COMMPROP Properties
    )
/*--------------------------------------------------------------------------
    CyzGetProperties()
    
    Routine Description: This function returns the capabilities of this
    particular serial device.

    Arguments:

    Extension - The serial device extension.
    Properties - The structure used to return the properties

    Return Value:

    None.
--------------------------------------------------------------------------*/
{
    CYZ_LOCKED_PAGED_CODE();

    RtlZeroMemory(Properties,sizeof(SERIAL_COMMPROP));

    Properties->PacketLength = sizeof(SERIAL_COMMPROP);
    Properties->PacketVersion = 2;
    Properties->ServiceMask = SERIAL_SP_SERIALCOMM;
    Properties->MaxTxQueue = 0;
    Properties->MaxRxQueue = 0;

    Properties->MaxBaud = SERIAL_BAUD_USER;
    Properties->SettableBaud = Extension->SupportedBauds;

    Properties->ProvSubType = SERIAL_SP_RS232;
    
    Properties->ProvCapabilities = SERIAL_PCF_DTRDSR |
                                   SERIAL_PCF_RTSCTS |
                                   SERIAL_PCF_CD     |
                                   SERIAL_PCF_PARITY_CHECK |
                                   SERIAL_PCF_XONXOFF |
                                   SERIAL_PCF_SETXCHAR |
                                   SERIAL_PCF_TOTALTIMEOUTS |
                                   SERIAL_PCF_INTTIMEOUTS;
    Properties->SettableParams = SERIAL_SP_PARITY |
                                 SERIAL_SP_BAUD |
                                 SERIAL_SP_DATABITS |
                                 SERIAL_SP_STOPBITS |
                                 SERIAL_SP_HANDSHAKING |
                                 SERIAL_SP_PARITY_CHECK |
                                 SERIAL_SP_CARRIER_DETECT;


    Properties->SettableData = SERIAL_DATABITS_5 |
                               SERIAL_DATABITS_6 |
                               SERIAL_DATABITS_7 |
                               SERIAL_DATABITS_8;
    Properties->SettableStopParity = SERIAL_STOPBITS_10 |
                                     SERIAL_STOPBITS_15 |
                                     SERIAL_STOPBITS_20 |
                                     SERIAL_PARITY_NONE |
                                     SERIAL_PARITY_ODD  |
                                     SERIAL_PARITY_EVEN |
                                     SERIAL_PARITY_MARK |
                                     SERIAL_PARITY_SPACE;
    Properties->CurrentTxQueue = 0;
    Properties->CurrentRxQueue = Extension->BufferSize;

}


BOOLEAN
CyzSetBasicFifoSettings(
    IN PVOID Context
    )
/*--------------------------------------------------------------------------
    CyzSetBasicFifoSettings()
    
    Routine Description: This routine is used to set the FIFO settings 
    during the InternalIoControl.

    Arguments:

    Context - Pointer to a structure that contains a pointer to the device
    	        extension and a pointer to the Basic structure.

    Return Value: This routine always returns FALSE.
--------------------------------------------------------------------------*/
{
    PCYZ_IOCTL_SYNC S = Context;
    PCYZ_DEVICE_EXTENSION Extension = S->Extension;
    PSERIAL_BASIC_SETTINGS pBasic = S->Data;
    struct BUF_CTRL *buf_ctrl = Extension->BufCtrl;
    struct CH_CTRL *ch_ctrl = Extension->ChCtrl;
    ULONG commFlag;

#if 0
    CyzIssueCmd(Extension,C_CM_FLUSH_TX,0,FALSE);
    CyzIssueCmd(Extension,C_CM_FLUSH_RX,0,FALSE);

    if (pBasic->TxFifo == 0x01) {
        Extension->TxBufsize = pBasic->TxFifo + 1;
    } else {
        Extension->TxBufsize = pBasic->TxFifo;
    }


    CYZ_WRITE_ULONG(&buf_ctrl->tx_bufsize, Extension->TxBufsize);

    Extension->RxFifoTrigger = pBasic->RxFifo;
#endif

    CYZ_WRITE_ULONG(&buf_ctrl->rx_threshold,pBasic->RxFifo); //Actually, firmware threshold
    if (pBasic->RxFifo == CYZ_BASIC_RXTRIGGER) {
        commFlag = C_CF_NOFIFO; // Disable FIFO 
    } else {
        commFlag = 0; // Enable FIFO
    }
    CYZ_WRITE_ULONG(&ch_ctrl->comm_flags,commFlag);
    CyzIssueCmd(Extension,C_CM_IOCTL,0L,TRUE);		

    return FALSE;
}


NTSTATUS
CyzInternalIoControl(IN PDEVICE_OBJECT PDevObj, IN PIRP PIrp)

/*++

Routine Description:

    This routine provides the initial processing for all of the
    internal Ioctrls for the serial device.

Arguments:

    PDevObj - Pointer to the device object for this device

    PIrp - Pointer to the IRP for the current request

Return Value:

    The function value is the final status of the call

--*/

{
    //
    // The status that gets returned to the caller and
    // set in the Irp.
    //
    NTSTATUS status;

    //
    // The current stack location.  This contains all of the
    // information we need to process this particular request.
    //
    PIO_STACK_LOCATION pIrpStack;

    //
    // Just what it says.  This is the serial specific device
    // extension of the device object create for the serial driver.
    //
    PCYZ_DEVICE_EXTENSION pDevExt = PDevObj->DeviceExtension;

    //
    // A temporary to hold the old IRQL so that it can be
    // restored once we complete/validate this request.
    //
    KIRQL OldIrql;
#ifdef POLL
    KIRQL pollIrql;
#endif

    NTSTATUS prologueStatus;

    SYSTEM_POWER_STATE cap; // Added in build 2128

    CYZ_LOCKED_PAGED_CODE();


    if ((prologueStatus = CyzIRPPrologue(PIrp, pDevExt))
        != STATUS_SUCCESS) {
       if (prologueStatus != STATUS_PENDING) {
         CyzCompleteRequest(pDevExt, PIrp, IO_NO_INCREMENT);
       }
       return prologueStatus;
    }

    CyzDbgPrintEx(CYZIRPPATH, "Dispatch entry for: %x\n", PIrp);

    if (CyzCompleteIfError(PDevObj, PIrp) != STATUS_SUCCESS) {
        return STATUS_CANCELLED;
    }

    pIrpStack = IoGetCurrentIrpStackLocation(PIrp);
    PIrp->IoStatus.Information = 0L;
    status = STATUS_SUCCESS;

    switch (pIrpStack->Parameters.DeviceIoControl.IoControlCode) {

    //
    // Send a wait-wake IRP
    //

    case IOCTL_SERIAL_INTERNAL_DO_WAIT_WAKE:
       //
       // Make sure we can do wait-wake based on what the device reported
       //

       for (cap = PowerSystemSleeping1; cap < PowerSystemMaximum; cap++) { // Added in bld 2128
          if ((pDevExt->DeviceStateMap[cap] >= PowerDeviceD0)
              && (pDevExt->DeviceStateMap[cap] <= pDevExt->DeviceWake)) {
             break;
          }
       }

       if (cap < PowerSystemMaximum) {
          pDevExt->SendWaitWake = TRUE;
          status = STATUS_SUCCESS;
       } else {
          status = STATUS_NOT_SUPPORTED;
       }
       break;

    case IOCTL_SERIAL_INTERNAL_CANCEL_WAIT_WAKE:
       
       pDevExt->SendWaitWake = FALSE;

       if (pDevExt->PendingWakeIrp != NULL) {
          IoCancelIrp(pDevExt->PendingWakeIrp);
       }

       status = STATUS_SUCCESS;
       break;


    //
    // Put the serial port in a "filter-driver" appropriate state
    //
    // WARNING: This code assumes it is being called by a trusted kernel
    // entity and no checking is done on the validity of the settings
    // passed to IOCTL_SERIAL_INTERNAL_RESTORE_SETTINGS
    //
    // If validity checking is desired, the regular ioctl's should be used
    //

    case IOCTL_SERIAL_INTERNAL_BASIC_SETTINGS:
    case IOCTL_SERIAL_INTERNAL_RESTORE_SETTINGS: {
       SERIAL_BASIC_SETTINGS basic;
       PSERIAL_BASIC_SETTINGS pBasic;
       SHORT AppropriateDivisor;
       CYZ_IOCTL_SYNC S;
       struct BUF_CTRL *buf_ctrl = pDevExt->BufCtrl;

       if (pIrpStack->Parameters.DeviceIoControl.IoControlCode
           == IOCTL_SERIAL_INTERNAL_BASIC_SETTINGS) {

          //
          // Check the buffer size
          //

          if (pIrpStack->Parameters.DeviceIoControl.OutputBufferLength <
              sizeof(SERIAL_BASIC_SETTINGS)) {
             status = STATUS_BUFFER_TOO_SMALL;
             break;
          }

          //
          // Everything is 0 -- timeouts and flow control and fifos.  If
          // We add additional features, this zero memory method
          // may not work.
          //

          RtlZeroMemory(&basic, sizeof(SERIAL_BASIC_SETTINGS));

          basic.TxFifo = 1;
          //basic.RxFifo = SERIAL_1_BYTE_HIGH_WATER;
          basic.RxFifo = CYZ_BASIC_RXTRIGGER;

          PIrp->IoStatus.Information = sizeof(SERIAL_BASIC_SETTINGS);
          pBasic = (PSERIAL_BASIC_SETTINGS)PIrp->AssociatedIrp.SystemBuffer;

          //
          // Save off the old settings
          //

          RtlCopyMemory(&pBasic->Timeouts, &pDevExt->Timeouts,
                        sizeof(SERIAL_TIMEOUTS));

          RtlCopyMemory(&pBasic->HandFlow, &pDevExt->HandFlow,
                        sizeof(SERIAL_HANDFLOW));

          //pBasic->RxFifo = pDevExt->RxFifoTrigger;
          pBasic->RxFifo = CYZ_READ_ULONG(&buf_ctrl->rx_threshold);
          pBasic->TxFifo = pDevExt->TxBufsize;  //pDevExt->TxFifoAmount;

          //
          // Point to our new settings
          //

          pBasic = &basic;
       } else { // restoring settings

          if (pIrpStack->Parameters.DeviceIoControl.InputBufferLength
              < sizeof(SERIAL_BASIC_SETTINGS)) {
             status = STATUS_BUFFER_TOO_SMALL;
             break;
          }

          pBasic = (PSERIAL_BASIC_SETTINGS)PIrp->AssociatedIrp.SystemBuffer;

       }

       KeAcquireSpinLock(&pDevExt->ControlLock, &OldIrql);

       //
       // Set the timeouts
       //

       RtlCopyMemory(&pDevExt->Timeouts, &pBasic->Timeouts,
                     sizeof(SERIAL_TIMEOUTS));

       //
       // Set flowcontrol
       //

       S.Extension = pDevExt;
       S.Data = &pBasic->HandFlow;
       #ifdef POLL
       KeAcquireSpinLock(&pDevExt->PollLock,&pollIrql);
       CyzSetHandFlow(&S);
       KeReleaseSpinLock(&pDevExt->PollLock,pollIrql);
       #else
       KeSynchronizeExecution(pDevExt->Interrupt,CyzSetHandFlow,&S);
       #endif


       // 
       //
       // Set TxFifo and RxFifo
       //
       // Code removed for now. No data is transmitted to the modem while in Basic 
       // settings, so at least to TxFifo this code doesn't matter. Besides, modem 
       // diagnostics with Supra Express 56K is not working well with tx_bufsize 
       // set to 2 (Only OK appears in the Response in the Modem applet, although 
       // we can see the whole string being sent by the modem). .
       //
       S.Data = pBasic;
       #ifdef POLL
       KeAcquireSpinLock(&pDevExt->PollLock,&pollIrql);
       CyzSetBasicFifoSettings(&S);
       KeReleaseSpinLock(&pDevExt->PollLock,pollIrql);
       #else
       KeSynchronizeExecution(pDevExt->Interrupt,CyzSetBasicFifoSettings,&S);
       #endif

       KeReleaseSpinLock(&pDevExt->ControlLock, OldIrql);


       break;
    }

    default:
       status = STATUS_INVALID_PARAMETER;
       break;

    }

    PIrp->IoStatus.Status = status;

    CyzCompleteRequest(pDevExt, PIrp, 0);

    return status;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyzport\cyzflush.c ===
/*--------------------------------------------------------------------------
*
*   Copyright (C) Cyclades Corporation, 1997-2001.
*   All rights reserved.
*
*   Cyclades-Z Port Driver
*	
*   This file:      cyzflush.c
*
*   Description:    This module contains the code related to flush
*                   operations in the Cyclades-Z Port driver.
*
*   Notes:          This code supports Windows 2000 and Windows XP,
*                   x86 and IA64 processors.
*
*   Complies with Cyclades SW Coding Standard rev 1.3.
*
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*   Change History
*
*--------------------------------------------------------------------------
*
*
*--------------------------------------------------------------------------
*/


#include "precomp.h"



NTSTATUS
CyzStartFlush(
    IN PCYZ_DEVICE_EXTENSION Extension
    );

#ifdef ALLOC_PRAGMA
#pragma alloc_text(PAGESRP0,CyzFlush)
#pragma alloc_text(PAGESRP0,CyzStartFlush)
#endif


NTSTATUS
CyzFlush(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    )
/*--------------------------------------------------------------------------
    CyzFlush()
    
    Routine Description: This is the dispatch routine for flush.  Flushing
    works by placing this request in the write queue.  When this request
    reaches the front of the write queue we simply complete it since this
    implies that all previous writes have completed.

    Arguments:

    DeviceObject - Pointer to the device object for this device
    Irp - Pointer to the IRP for the current request

    Return Value: Could return status success, cancelled, or pending.
--------------------------------------------------------------------------*/
{
    PCYZ_DEVICE_EXTENSION Extension = DeviceObject->DeviceExtension;
    NTSTATUS status;
    PAGED_CODE();

    CyzDbgPrintEx(CYZIRPPATH, "Dispatch entry for: %x\n", Irp);


    CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyzFlush(%X, %X)\n",
                  DeviceObject, Irp);
    	    
    Irp->IoStatus.Information = 0L;

    if ((status = CyzIRPPrologue(Irp, Extension)) == STATUS_SUCCESS) {

        if (CyzCompleteIfError(DeviceObject,Irp) != STATUS_SUCCESS) {
            CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyzFlush (1) %X\n",
                          STATUS_CANCELLED);
            return STATUS_CANCELLED;
        }

        status = CyzStartOrQueue(Extension, Irp, &Extension->WriteQueue,
                                 &Extension->CurrentWriteIrp,
                                 CyzStartFlush);

        CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyzFlush (2) %X\n", status);

        return status;

    } else {
        Irp->IoStatus.Status = status;

        if (!NT_SUCCESS(status)) {
            CyzCompleteRequest(Extension, Irp, IO_NO_INCREMENT);
        }

        CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyzFlush (3) %X\n", status);
        return status;
    }
    
}

NTSTATUS
CyzStartFlush(
    IN PCYZ_DEVICE_EXTENSION Extension
    )
/*--------------------------------------------------------------------------
    CyzStartFlush()
    
    Routine Description: This routine is called if there were no writes in
    the queue. The flush became the current write because there was nothing
    in the queue.  Note however that does not mean there is nothing in the
    queue now!  So, we will start off the write that might follow us.

    Arguments:

    Extension - Points to the serial device extension

    Return Value: This will always return STATUS_SUCCESS.
--------------------------------------------------------------------------*/
{
    PIRP NewIrp;
    PAGED_CODE();

    Extension->CurrentWriteIrp->IoStatus.Status = STATUS_SUCCESS;

    // The following call will actually complete the flush.

    CyzGetNextWrite(
        &Extension->CurrentWriteIrp,
        &Extension->WriteQueue,
        &NewIrp,
        TRUE,
        Extension
        );

    if (NewIrp) {
        ASSERT(NewIrp == Extension->CurrentWriteIrp);
        CyzStartWrite(Extension);
    }

    return STATUS_SUCCESS;
}

=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyzport\cyzmask.c ===
/*--------------------------------------------------------------------------
*
*   Copyright (C) Cyclades Corporation, 1997-2001.
*   All rights reserved.
*
*   Cyclades-Z Port Driver
*	
*   This file:      cyzmask.c
*
*   Description:    This module contains the code related to get/set/wait
*                   on event mask operations in the Cyclades-Z Port driver.
*
*   Notes:          This code supports Windows 2000 and Windows XP,
*                   x86 and IA64 processors.
*
*   Complies with Cyclades SW Coding Standard rev 1.3.
*
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*   Change History
*
*--------------------------------------------------------------------------
*
*
*--------------------------------------------------------------------------
*/


#include "precomp.h"


BOOLEAN
CyzGrabWaitFromIsr(
    IN PVOID Context
    );

BOOLEAN
CyzGiveWaitToIsr(
    IN PVOID Context
    );

BOOLEAN
CyzFinishOldWait(
    IN PVOID Context
    );

#ifdef ALLOC_PRAGMA
#pragma alloc_text(PAGESER,CyzStartMask)
#pragma alloc_text(PAGESER,CyzCancelWait)
#pragma alloc_text(PAGESER,CyzGrabWaitFromIsr)
#pragma alloc_text(PAGESER,CyzGiveWaitToIsr)
#pragma alloc_text(PAGESER,CyzFinishOldWait)
#endif


NTSTATUS
CyzStartMask(
    IN PCYZ_DEVICE_EXTENSION Extension
    )

/*++

Routine Description:

    This routine is used to process the set mask and wait
    mask ioctls.  Calls to this routine are serialized by
    placing irps in the list under the protection of the
    cancel spin lock.

Arguments:

    Extension - A pointer to the serial device extension.

Return Value:

    Will return pending for everything put the first
    request that we actually process.  Even in that
    case it will return pending unless it can complete
    it right away.


--*/

{
    #ifdef POLL
    KIRQL pollIrql;
    #endif

    //
    // The current stack location.  This contains much of the
    // information we need to process this particular request.
    //
    PIO_STACK_LOCATION IrpSp;

    PIRP NewIrp;

    BOOLEAN SetFirstStatus = FALSE;
    NTSTATUS FirstStatus;

    CYZ_LOCKED_PAGED_CODE();

    CyzDbgPrintEx(CYZDIAG3, "In CyzStartMask\n");

    ASSERT(Extension->CurrentMaskIrp);

    do {

        CyzDbgPrintEx(CYZDIAG4, "STARTMASK - CurrentMaskIrp: %x\n",
                         Extension->CurrentMaskIrp);
        IrpSp = IoGetCurrentIrpStackLocation(Extension->CurrentMaskIrp);

        ASSERT((IrpSp->Parameters.DeviceIoControl.IoControlCode ==
                IOCTL_SERIAL_WAIT_ON_MASK) ||
               (IrpSp->Parameters.DeviceIoControl.IoControlCode ==
                IOCTL_SERIAL_SET_WAIT_MASK));

        if (IrpSp->Parameters.DeviceIoControl.IoControlCode ==
            IOCTL_SERIAL_SET_WAIT_MASK) {

            CyzDbgPrintEx(CYZDIAG4, "%x is a SETMASK irp\n",
                          Extension->CurrentMaskIrp);

            //
            // Complete the old wait if there is one.
            //
			
            #ifdef POLL
	        KeAcquireSpinLock(&Extension->PollLock,&pollIrql);
	        CyzFinishOldWait(Extension);
	        KeReleaseSpinLock(&Extension->PollLock,pollIrql);
            #else
            KeSynchronizeExecution(
                Extension->Interrupt,
                CyzFinishOldWait,
                Extension
                );
            #endif

            //
            // Any current waits should be on its way to completion
            // at this point.  There certainly shouldn't be any
            // irp mask location.
            //

            ASSERT(!Extension->IrpMaskLocation);

            Extension->CurrentMaskIrp->IoStatus.Status = STATUS_SUCCESS;

            if (!SetFirstStatus) {

                CyzDbgPrintEx(CYZDIAG4, "%x was the first irp processed by "
                              "this\n"
                              "------- invocation of startmask\n",
                              Extension->CurrentMaskIrp);

                FirstStatus = STATUS_SUCCESS;
                SetFirstStatus = TRUE;

            }

            //
            // The following call will also cause the current
            // call to be completed.
            //

            CyzGetNextIrp(
                &Extension->CurrentMaskIrp,
                &Extension->MaskQueue,
                &NewIrp,
                TRUE,
                Extension
                );
            CyzDbgPrintEx(CYZDIAG4, "Perhaps another mask irp was found in "
                          "the queue\n"
                          "------- %x/%x <- values should be the same\n",
                          Extension->CurrentMaskIrp,NewIrp);

        } else {

            //
            // First make sure that we have a non-zero mask.
            // If the app queues a wait on a zero mask it can't
            // be statisfied so it makes no sense to start it.
            //

            if ((!Extension->IsrWaitMask) || (Extension->CurrentWaitIrp)) {

                CyzDbgPrintEx(CYZDIAG4, "WaitIrp is invalid\n"
                              "------- IsrWaitMask: %x\n"
                              "------- CurrentWaitIrp: %x\n",
                              Extension->IsrWaitMask,
                              Extension->CurrentWaitIrp);

                Extension->CurrentMaskIrp->IoStatus.Status 
                   = STATUS_INVALID_PARAMETER;

                if (!SetFirstStatus) {

                    CyzDbgPrintEx(CYZDIAG4, "%x was the first irp processed "
                                  "by this\n"
                                  "------- invocation of startmask\n",
                                  Extension->CurrentMaskIrp);

                    FirstStatus = STATUS_INVALID_PARAMETER;
                    SetFirstStatus = TRUE;

                }

                CyzGetNextIrp(&Extension->CurrentMaskIrp,
                              &Extension->MaskQueue, &NewIrp, TRUE,
                              Extension);

                CyzDbgPrintEx(CYZDIAG4, "Perhaps another mask irp was found "
                              "in the queue\n"
                              "------- %x/%x <- values should be the same\n",
                              Extension->CurrentMaskIrp,NewIrp);

            } else {

                KIRQL OldIrql;

                //
                // Make the current mask irp the current wait irp and
                // get a new current mask irp.  Note that when we get
                // the new current mask irp we DO NOT complete the
                // old current mask irp (which is now the current wait
                // irp.
                //
                // Then under the protection of the cancel spin lock
                // we check to see if the current wait irp needs to
                // be canceled
                //

                IoAcquireCancelSpinLock(&OldIrql);

                if (Extension->CurrentMaskIrp->Cancel) {

                    CyzDbgPrintEx(CYZDIAG4, "%x irp was already marked as "
                                  "cancelled\n", Extension->CurrentMaskIrp);

                    IoReleaseCancelSpinLock(OldIrql);
                    Extension->CurrentMaskIrp->IoStatus.Status = STATUS_CANCELLED;

                    if (!SetFirstStatus) {

                        CyzDbgPrintEx(CYZDIAG4, "%x was the first irp "
                                      "processed by this\n"
                                      "------- invocation of startmask\n",
                                      Extension->CurrentMaskIrp);

                        FirstStatus = STATUS_CANCELLED;
                        SetFirstStatus = TRUE;

                    }

                    CyzGetNextIrp(&Extension->CurrentMaskIrp,
                                  &Extension->MaskQueue, &NewIrp, TRUE,
                                  Extension);

                    CyzDbgPrintEx(CYZDIAG4, "Perhaps another mask irp was "
                                  "found in the queue\n"
                                  "------- %x/%x <- values should be the "
                                  "same\n", Extension->CurrentMaskIrp,
                                  NewIrp);

                } else {

                    CyzDbgPrintEx(CYZDIAG4, "%x will become the current "
                                     "wait irp\n", Extension->CurrentMaskIrp);
                    if (!SetFirstStatus) {

                        CyzDbgPrintEx(CYZDIAG4, "%x was the first irp "
                                      "processed by this\n"
                                      "------- invocation of startmask\n",
                                      Extension->CurrentMaskIrp);

                        FirstStatus = STATUS_PENDING;
                        SetFirstStatus = TRUE;

                        //
                        // If we haven't already set a first status
                        // then there is a chance that this packet
                        // was never on the queue.  We should mark
                        // it as pending.
                        //

                        IoMarkIrpPending(Extension->CurrentMaskIrp);

                    }

                    //
                    // There should never be a mask location when
                    // there isn't a current wait irp.  At this point
                    // there shouldn't be a current wait irp also.
                    //

                    ASSERT(!Extension->IrpMaskLocation);
                    ASSERT(!Extension->CurrentWaitIrp);

                    Extension->CurrentWaitIrp = Extension->CurrentMaskIrp;
                    SERIAL_INIT_REFERENCE(Extension->CurrentWaitIrp);
                    IoSetCancelRoutine(
                        Extension->CurrentWaitIrp,
                        CyzCancelWait
                        );

                    //
                    // Since the cancel routine has a reference to
                    // the irp we need to update the reference
                    // count.
                    //

                    SERIAL_SET_REFERENCE(
                        Extension->CurrentWaitIrp,
                        SERIAL_REF_CANCEL
                        );

                    #ifdef POLL
                    KeAcquireSpinLock(&Extension->PollLock,&pollIrql);
                    CyzGiveWaitToIsr(Extension);
                    KeReleaseSpinLock(&Extension->PollLock,pollIrql);
                    #else
                    KeSynchronizeExecution(
                        Extension->Interrupt,
                        CyzGiveWaitToIsr,
                        Extension
                        );
                    #endif

// Code removed because it was causing blue-screen in the Modem Share 
// test case 77. When CurrentMaskIrp is set to NULL, we remove the 
// protection that avoid Starter to be called in CyzStartOrQueue.
// We will let CyzGetNextIrp null out that pointer. Fanny.
//
//                    //
//                    // Since it isn't really the mask irp anymore,
//                    // null out that pointer.
//                    //
//
//                    Extension->CurrentMaskIrp = NULL;

                    Extension->CurrentMaskIrp = NULL; // back in Windows 2000. Fanny

                    //
                    // This will release the cancel spinlock for us
                    //

                    CyzGetNextIrpLocked(&Extension->CurrentMaskIrp,
                                        &Extension->MaskQueue, &NewIrp,
                                        FALSE, Extension, OldIrql);

                    CyzDbgPrintEx(CYZDIAG4, "Perhaps another mask irp was "
                                  "found in the queue\n"
                                  "------- %x/%x <- values should be the "
                                  "same\n", Extension->CurrentMaskIrp,
                                  NewIrp);

                }

            }

        }

    } while (NewIrp);

    return FirstStatus;

}

BOOLEAN
CyzGrabWaitFromIsr(
    IN PVOID Context
    )

/*++

Routine Description:

    This routine will check to see if the ISR still knows about
    a wait irp by checking to see if the IrpMaskLocation is non-null.
    If it is then it will zero the Irpmasklocation (which in effect
    grabs the irp away from the isr).  This routine is only called
    buy the cancel code for the wait.

    NOTE: This is called by KeSynchronizeExecution.

Arguments:

    Context - A pointer to the device extension

Return Value:

    Always FALSE.

--*/

{

    PCYZ_DEVICE_EXTENSION Extension = Context;
    CYZ_LOCKED_PAGED_CODE();

    CyzDbgPrintEx(CYZDIAG3, "In CyzGrabWaitFromIsr\n");

    if (Extension->IrpMaskLocation) {

        CyzDbgPrintEx(CYZDIAG4, "The isr still owns the irp %x, mask "
                      "location is %x\n"
                      "------- and system buffer is %x\n",
                      Extension->CurrentWaitIrp,Extension->IrpMaskLocation,
                      Extension->CurrentWaitIrp->AssociatedIrp.SystemBuffer);

        //
        // The isr still "owns" the irp.
        //

        *Extension->IrpMaskLocation = 0;
        Extension->IrpMaskLocation = NULL;

        Extension->CurrentWaitIrp->IoStatus.Information = sizeof(ULONG);

        //
        // Since the isr no longer references the irp we need to
        // decrement the reference count.
        //

        SERIAL_CLEAR_REFERENCE(
            Extension->CurrentWaitIrp,
            SERIAL_REF_ISR
            );

    }

    return FALSE;
}

BOOLEAN
CyzGiveWaitToIsr(
    IN PVOID Context
    )

/*++

Routine Description:

    This routine simply sets a variable in the device extension
    so that the isr knows that we have a wait irp.

    NOTE: This is called by KeSynchronizeExecution.

    NOTE: This routine assumes that it is called with the
          cancel spinlock held.

Arguments:

    Context - Simply a pointer to the device extension.

Return Value:

    Always FALSE.

--*/

{

    PCYZ_DEVICE_EXTENSION Extension = Context;
    CYZ_LOCKED_PAGED_CODE();

    CyzDbgPrintEx(CYZDIAG3, "In CyzGiveWaitToIsr\n");
    //
    // There certainly shouldn't be a current mask location at
    // this point since we have a new current wait irp.
    //

    ASSERT(!Extension->IrpMaskLocation);

    //
    // The isr may or may not actually reference this irp.  It
    // won't if the wait can be satisfied immediately.  However,
    // since it will then go through the normal completion sequence,
    // we need to have an incremented reference count anyway.
    //

    SERIAL_SET_REFERENCE(
        Extension->CurrentWaitIrp,
        SERIAL_REF_ISR
        );

    if (!Extension->HistoryMask) {

        CyzDbgPrintEx(CYZDIAG4, "No events occured prior to the wait call"
                      "\n");

        //
        // Although this wait might not be for empty transmit
        // queue, it doesn't hurt anything to set it to false.
        //

        Extension->EmptiedTransmit = FALSE;

        //
        // Record where the "completion mask" should be set.
        //

        Extension->IrpMaskLocation =
            Extension->CurrentWaitIrp->AssociatedIrp.SystemBuffer;
        CyzDbgPrintEx( CYZDIAG4, "The isr owns the irp %x, mask location is "
                       "%x\n"
                       "------- and system buffer is %x\n",
                       Extension->CurrentWaitIrp,Extension->IrpMaskLocation,
                       Extension->CurrentWaitIrp->AssociatedIrp
                       .SystemBuffer);

    } else {

        CyzDbgPrintEx(CYZDIAG4, "%x occurred prior to the wait - starting "
                      "the\n"
                      "------- completion code for %x\n",
                      Extension->HistoryMask,Extension->CurrentWaitIrp);

        *((ULONG *)Extension->CurrentWaitIrp->AssociatedIrp.SystemBuffer) =
            Extension->HistoryMask;
        Extension->HistoryMask = 0;
        Extension->CurrentWaitIrp->IoStatus.Information = sizeof(ULONG);
        Extension->CurrentWaitIrp->IoStatus.Status = STATUS_SUCCESS;

        CyzInsertQueueDpc(&Extension->CommWaitDpc, NULL, NULL, Extension);

    }

    return FALSE;
}

BOOLEAN
CyzFinishOldWait(
    IN PVOID Context
    )

/*++

Routine Description:

    This routine will check to see if the ISR still knows about
    a wait irp by checking to see if the Irpmasklocation is non-null.
    If it is then it will zero the Irpmasklocation (which in effect
    grabs the irp away from the isr).  This routine is only called
    buy the cancel code for the wait.

    NOTE: This is called by KeSynchronizeExecution.

Arguments:

    Context - A pointer to the device extension

Return Value:

    Always FALSE.

--*/

{

    PCYZ_DEVICE_EXTENSION Extension = Context;
    CYZ_LOCKED_PAGED_CODE();

    CyzDbgPrintEx(CYZDIAG3, "In CyzFinishOldWait\n");

    if (Extension->IrpMaskLocation) {

        CyzDbgPrintEx(CYZDIAG4, "The isr still owns the irp %x, mask "
                      "location is %x\n"
                      "------- and system buffer is %x\n",
                      Extension->CurrentWaitIrp,Extension->IrpMaskLocation,
                      Extension->CurrentWaitIrp->AssociatedIrp.SystemBuffer);
        //
        // The isr still "owns" the irp.
        //

        *Extension->IrpMaskLocation = 0;
        Extension->IrpMaskLocation = NULL;

        Extension->CurrentWaitIrp->IoStatus.Information = sizeof(ULONG);

        //
        // We don't decrement the reference since the completion routine
        // will do that.
        //

        CyzInsertQueueDpc(&Extension->CommWaitDpc, NULL, NULL, Extension);

    }

    //
    // Don't wipe out any historical data we are still interested in.
    //

    Extension->HistoryMask &= *((ULONG *)Extension->CurrentMaskIrp->
                                            AssociatedIrp.SystemBuffer);

    Extension->IsrWaitMask = *((ULONG *)Extension->CurrentMaskIrp->
                                            AssociatedIrp.SystemBuffer);
    CyzDbgPrintEx( CYZDIAG4, "Set mask location of %x, in irp %x, with "
                   "system buffer of %x\n",
                   Extension->IrpMaskLocation, Extension->CurrentMaskIrp,
                   Extension->CurrentMaskIrp->AssociatedIrp.SystemBuffer);
    return FALSE;
}

VOID
CyzCancelWait(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    )

/*++

Routine Description:

    This routine is used to cancel a irp that is waiting on
    a comm event.

Arguments:

    DeviceObject - Pointer to the device object for this device

    Irp - Pointer to the IRP for the current request

Return Value:

    None.

--*/

{

    PCYZ_DEVICE_EXTENSION Extension = DeviceObject->DeviceExtension;
    CYZ_LOCKED_PAGED_CODE();

    CyzDbgPrintEx(CYZDIAG3, "In CyzCancelWait\n");

    CyzDbgPrintEx(CYZDIAG4, "Canceling wait for irp %x\n",
                  Extension->CurrentWaitIrp);

    CyzTryToCompleteCurrent(Extension, CyzGrabWaitFromIsr,
                            Irp->CancelIrql, STATUS_CANCELLED,
                            &Extension->CurrentWaitIrp, NULL, NULL, NULL,
                            NULL, NULL, SERIAL_REF_CANCEL);

}

VOID
CyzCompleteWait(
    IN PKDPC Dpc,
    IN PVOID DeferredContext,
    IN PVOID SystemContext1,
    IN PVOID SystemContext2
    )

{
    PCYZ_DEVICE_EXTENSION Extension = DeferredContext;
    KIRQL OldIrql;


    CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyzCompleteWait(%X)\n",
                  Extension);

    CyzDbgPrintEx(CYZDIAG3, "In CyzCompleteWait\n");

    UNREFERENCED_PARAMETER(SystemContext1);
    UNREFERENCED_PARAMETER(SystemContext2);

    IoAcquireCancelSpinLock(&OldIrql);
	
    CyzDbgPrintEx(CYZDIAG4, "Completing wait for irp %x\n",
                  Extension->CurrentWaitIrp);

    CyzTryToCompleteCurrent(Extension, NULL, OldIrql, STATUS_SUCCESS,
                            &Extension->CurrentWaitIrp, NULL, NULL, NULL,
                            NULL, NULL, SERIAL_REF_ISR);

    CyzDpcEpilogue(Extension, Dpc);


    CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyzCompleteWait\n");
}

=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyzport\cyzmodem.c ===
/*--------------------------------------------------------------------------
*
*   Copyright (C) Cyclades Corporation, 1997-2001.
*   All rights reserved.
*
*   Cyclades-Z Port Driver
*	
*   This file:      cyzmodem.c
*
*   Description:    This module contains the code related to modem control
*                   in the Cyclades-Z Port driver.
*
*   Notes:          This code supports Windows 2000 and Windows XP,
*                   x86 and IA64 processors.
*
*   Complies with Cyclades SW Coding Standard rev 1.3.
*
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*   Change History
*
*--------------------------------------------------------------------------
*
*
*--------------------------------------------------------------------------
*/


#include "precomp.h"

BOOLEAN
CyzDecrementRTSCounter(
    IN PVOID Context
    );

#ifdef ALLOC_PRAGMA
#if 0
#pragma alloc_text(PAGESER,CyzHandleReducedIntBuffer)
#pragma alloc_text(PAGESER,CyzProdXonXoff)
#pragma alloc_text(PAGESER,CyzHandleModemUpdate)
#pragma alloc_text(PAGESER,CyzPerhapsLowerRTS)
#pragma alloc_text(PAGESER,CyzStartTimerLowerRTS)
#pragma alloc_text(PAGESER,CyzInvokePerhapsLowerRTS)
#pragma alloc_text(PAGESER,CyzSetDTR)
#pragma alloc_text(PAGESER,CyzClrDTR)
#pragma alloc_text(PAGESER,CyzSetRTS)
#pragma alloc_text(PAGESER,CyzClrRTS)
#pragma alloc_text(PAGESER,CyzSetupNewHandFlow)
#pragma alloc_text(PAGESER,CyzSetHandFlow)
#pragma alloc_text(PAGESER,CyzTurnOnBreak)
#pragma alloc_text(PAGESER,CyzTurnOffBreak)
#pragma alloc_text(PAGESER,CyzPretendXoff)
#pragma alloc_text(PAGESER,CyzPretendXon)
#pragma alloc_text(PAGESER,CyzDecrementRTSCounter)
#endif
#endif

BOOLEAN
CyzSetDTR(
    IN PVOID Context
    )
/*--------------------------------------------------------------------------
    CyzSetDTR()
    
    Routine Description: This routine which is only called at interrupt
    level is used to set the DTR in the modem control register.

    Arguments:

    Context - Really a pointer to the device extension.

    Return Value: This routine always returns FALSE.
--------------------------------------------------------------------------*/
{
    PCYZ_DEVICE_EXTENSION Extension = Context;
    struct CH_CTRL *ch_ctrl;
    ULONG rs_control;

    CyzDbgPrintEx(CYZFLOW, "Setting DTR for Port%d Pci%d\n", 
                  Extension->PortIndex+1,Extension->PciSlot);

    ch_ctrl = Extension->ChCtrl;
    rs_control = CYZ_READ_ULONG(&ch_ctrl->rs_control);
    rs_control |= C_RS_DTR;
    CYZ_WRITE_ULONG(&ch_ctrl->rs_control,rs_control);

    CyzIssueCmd(Extension,C_CM_IOCTLM,rs_control|C_RS_PARAM,FALSE);

    return FALSE;
}

BOOLEAN
CyzClrDTR(
    IN PVOID Context
    )
/*--------------------------------------------------------------------------
    CyzClrDTR()
    
    Routine Description: Clear DTR.

    Arguments:

    Context - Really a pointer to the device extension.

    Return Value: This routine always returns FALSE.
--------------------------------------------------------------------------*/
{

    PCYZ_DEVICE_EXTENSION Extension = Context;
    struct CH_CTRL *ch_ctrl;
    ULONG rs_control;

    CyzDbgPrintEx(CYZFLOW, "Clearing DTR for Port%d Pci%d\n", 
                  Extension->PortIndex+1,Extension->PciSlot);

    ch_ctrl = Extension->ChCtrl;
    rs_control = CYZ_READ_ULONG(&ch_ctrl->rs_control);
    rs_control &= ~C_RS_DTR;
    CYZ_WRITE_ULONG(&ch_ctrl->rs_control, rs_control);
	
    CyzIssueCmd(Extension,C_CM_IOCTLM,rs_control|C_RS_PARAM,FALSE);
 
    return FALSE;
}

BOOLEAN
CyzSetRTS(
    IN PVOID Context
    )
/*--------------------------------------------------------------------------
    CyzSetRTS()
    
    Routine Description: Set RTS.

    Arguments:

    Context - Really a pointer to the device extension.

    Return Value: This routine always returns FALSE.
--------------------------------------------------------------------------*/
{

    PCYZ_DEVICE_EXTENSION Extension = Context;
    struct CH_CTRL *ch_ctrl;
    ULONG rs_control;

    CyzDbgPrintEx(CYZFLOW, "Setting RTS for Port%d Pci%d\n", 
                  Extension->PortIndex+1,Extension->PciSlot);

    ch_ctrl = Extension->ChCtrl;
    rs_control = CYZ_READ_ULONG(&ch_ctrl->rs_control);
    rs_control |= C_RS_RTS;
    CYZ_WRITE_ULONG(&ch_ctrl->rs_control,rs_control);
	
    CyzIssueCmd(Extension,C_CM_IOCTLM,rs_control|C_RS_PARAM,FALSE);

    return FALSE;
}

BOOLEAN
CyzClrRTS(
    IN PVOID Context
    )
/*--------------------------------------------------------------------------
    CyzClrRTS()
    
    Routine Description: Clears RTS. 

    Arguments:

    Context - Really a pointer to the device extension.

    Return Value: This routine always returns FALSE.
--------------------------------------------------------------------------*/
{

    PCYZ_DEVICE_EXTENSION Extension = Context;
    struct CH_CTRL *ch_ctrl;
    ULONG rs_control;
	
    CyzDbgPrintEx(CYZFLOW, "Clearing RTS for Port%d Pci%d\n", 
                  Extension->PortIndex+1,Extension->PciSlot);

    ch_ctrl = Extension->ChCtrl;
    rs_control = CYZ_READ_ULONG(&ch_ctrl->rs_control);
    rs_control &= ~C_RS_RTS;
    CYZ_WRITE_ULONG(&ch_ctrl->rs_control,rs_control);
	
    CyzIssueCmd(Extension,C_CM_IOCTLM,rs_control|C_RS_PARAM,FALSE);

    return FALSE;
}

BOOLEAN
CyzSetupNewHandFlow(
    IN PCYZ_DEVICE_EXTENSION Extension,
    IN PSERIAL_HANDFLOW NewHandFlow
    )
/*--------------------------------------------------------------------------
    CyzSetupNewHandFlow()
    
    Routine Description: This routine adjusts the flow control based on new
    control flow.

    Arguments:

    Extension - A pointer to the serial device extension.

    NewHandFlow - A pointer to a serial handflow structure.

    Return Value: This routine always returns FALSE.
--------------------------------------------------------------------------*/
{

    SERIAL_HANDFLOW New = *NewHandFlow;	
    struct CH_CTRL *ch_ctrl;
    ULONG hw_flow;
    #if 0
    ULONG sw_flow;
    #endif

//    LOGENTRY(LOG_MISC, ZSIG_HANDSHAKE_SET, 
//                       Extension->PortIndex+1,
//                       New.ControlHandShake, 
//                       New.FlowReplace);


    ch_ctrl = Extension->ChCtrl;

    // --- DTR signal
   
    if((!Extension->DeviceIsOpened) ||
       ((Extension->HandFlow.ControlHandShake & SERIAL_DTR_MASK) !=
         (New.ControlHandShake & SERIAL_DTR_MASK))) {

        // It is an open or DTR has changed.

        CyzDbgPrintEx(CYZFLOW, "Processing DTR flow for Port%d Pci%d\n",
                      Extension->PortIndex+1,Extension->PciSlot);

        if (New.ControlHandShake & SERIAL_DTR_MASK) { // set DTR.
	    
            if((New.ControlHandShake&SERIAL_DTR_MASK) == SERIAL_DTR_HANDSHAKE) {
                // but we are doing DTR handshake.

                #ifdef FIRMWARE_HANDSHAKE
                hw_flow = CYZ_READ_ULONG(&ch_ctrl->hw_flow);
                hw_flow |= C_RS_DTR;
                CYZ_WRITE_ULONG(&ch_ctrl->hw_flow,hw_flow);
                #endif

                if ((Extension->BufferSize - New.XoffLimit) >
                    Extension->CharsInInterruptBuffer) {

                    if (Extension->RXHolding & CYZ_RX_DTR) {
                        // DTR is low due to flow control
                        if(Extension->CharsInInterruptBuffer >
                            (ULONG)New.XonLimit) {

                            CyzDbgPrintEx(CYZFLOW, "Removing DTR block on "
                                          "reception for Port%d Pci%d\n",
                                          Extension->PortIndex+1,Extension->PciSlot);

                            Extension->RXHolding &= ~CYZ_RX_DTR;
                            #ifndef FIRMWARE_HANDSHAKE
                            CyzSetDTR(Extension);
                            #endif
                        }
                    } else {
                        #ifndef FIRMWARE_HANDSHAKE
                        CyzSetDTR(Extension);
                        #endif
                    }
                } else {
                    // DTR should go low because of handshake
                    CyzDbgPrintEx(CYZFLOW, "Setting DTR block on reception "
                                  "for Port%d Pci%d\n", 
                                  Extension->PortIndex+1,Extension->PciSlot);
                    Extension->RXHolding |= CYZ_RX_DTR;
                    #ifndef FIRMWARE_HANDSHAKE
                    CyzClrDTR(Extension);
                    #endif
                }

            } else {
                #ifdef FIRMWARE_HANDSHAKE
                hw_flow = CYZ_READ_ULONG(&ch_ctrl->hw_flow);
                hw_flow &= ~C_RS_DTR;
                CYZ_WRITE_ULONG(&ch_ctrl->hw_flow,hw_flow);
                #endif								

                // no DTR handshake, check if it was active before.
                if (Extension->RXHolding & CYZ_RX_DTR) {
                    CyzDbgPrintEx(CYZFLOW, "Removing dtr block of reception "
                                        "for Port%d Pci%d\n", 
                                        Extension->PortIndex+1,Extension->PciSlot);
                    Extension->RXHolding &= ~CYZ_RX_DTR;
                }
                CyzSetDTR(Extension);

            }
        } else {	// reset DTR
            #ifdef FIRMWARE_HANDSHAKE
            hw_flow = CYZ_READ_ULONG(&ch_ctrl->hw_flow);
            hw_flow &= ~C_RS_DTR;
            CYZ_WRITE_ULONG(&ch_ctrl->hw_flow,hw_flow);
            #endif

            if (Extension->RXHolding & CYZ_RX_DTR) {
               CyzDbgPrintEx(CYZFLOW, "removing dtr block of reception for"
                                      " Port%d Pci%d\n", 
                                      Extension->PortIndex+1,Extension->PciSlot);
               Extension->RXHolding &= ~CYZ_RX_DTR;
            }
            CyzClrDTR(Extension);

        }
    }
    
    // --- RTS signal

    if ((!Extension->DeviceIsOpened) ||
        ((Extension->HandFlow.FlowReplace & SERIAL_RTS_MASK) !=
         (New.FlowReplace & SERIAL_RTS_MASK))) {

        // It is an open or RTS has changed.

        CyzDbgPrintEx(CYZFLOW, "Processing RTS flow\n",
                      Extension->PortIndex+1,Extension->PciSlot);

        if((New.FlowReplace&SERIAL_RTS_MASK) == SERIAL_RTS_HANDSHAKE) {//set RTS

            #ifdef FIRMWARE_HANDSHAKE
            hw_flow = CYZ_READ_ULONG(&ch_ctrl->hw_flow);
            hw_flow |= C_RS_RTS;
            CYZ_WRITE_ULONG(&ch_ctrl->hw_flow,hw_flow);
            #endif
            if ((Extension->BufferSize - New.XoffLimit) >
                Extension->CharsInInterruptBuffer) {

                // However if we are already holding we don't want
                // to turn it back on unless we exceed the Xon
                // limit.

                if (Extension->RXHolding & CYZ_RX_RTS) {
                    // We can assume that its RTS line is already low.
                    if (Extension->CharsInInterruptBuffer >
                        (ULONG)New.XonLimit) {

                        CyzDbgPrintEx(CYZFLOW, "Removing rts block of "
                                      "reception for Port%d Pci%d\n",
                                      Extension->PortIndex+1,Extension->PciSlot);
                        Extension->RXHolding &= ~CYZ_RX_RTS;
                        #ifndef FIRMWARE_HANDSHAKE
                        CyzSetRTS(Extension);
                        #endif
                    }
                } else {
                    #ifndef FIRMWARE_HANDSHAKE
                    CyzSetRTS(Extension);
                    #endif
                }

            } else {				
                CyzDbgPrintEx(CYZFLOW, "Setting rts block of reception for "
                              "Port%d Pci%d\n", 
                              Extension->PortIndex+1,Extension->PciSlot);
                Extension->RXHolding |= CYZ_RX_RTS;
                #ifndef FIRMWARE_HANDSHAKE
                CyzClrRTS(Extension);
                #endif
            }
        } else if ((New.FlowReplace & SERIAL_RTS_MASK) == SERIAL_RTS_CONTROL) {
	
            #ifdef FIRMWARE_HANDSHAKE
            hw_flow = CYZ_READ_ULONG(&ch_ctrl->hw_flow);
            hw_flow &= ~C_RS_RTS;
            CYZ_WRITE_ULONG(&ch_ctrl->hw_flow,hw_flow);
            #endif
            // Note that if we aren't currently doing rts flow control then
            // we MIGHT have been.  So even if we aren't currently doing
            // RTS flow control, we should still check if RX is holding
            // because of RTS.  If it is, then we should clear the holding
            // of this bit.

            if (Extension->RXHolding & CYZ_RX_RTS) {

                CyzDbgPrintEx(CYZFLOW, "Clearing rts block of reception for "
                              "Port%d Pci%d\n", 
                              Extension->PortIndex+1,Extension->PciSlot);
                Extension->RXHolding &= ~CYZ_RX_RTS;
            }
            CyzSetRTS(Extension);
        } else if((New.FlowReplace & SERIAL_RTS_MASK) == SERIAL_TRANSMIT_TOGGLE) {

            // We first need to check whether reception is being held
            // up because of previous RTS flow control.  If it is then
            // we should clear that reason in the RXHolding mask.

            if (Extension->RXHolding & CYZ_RX_RTS) {

                CyzDbgPrintEx(CYZFLOW, "TOGGLE Clearing rts block of "
                              "reception for Port%d Pci%d\n", 
                              Extension->PortIndex+1,Extension->PciSlot);
                Extension->RXHolding &= ~CYZ_RX_RTS;
            }

            // We have to place the rts value into the Extension
            // now so that the code that tests whether the
            // rts line should be lowered will find that we
            // are "still" doing transmit toggling.  The code
            // for lowering can be invoked later by a timer so
            // it has to test whether it still needs to do its
            // work.

            Extension->HandFlow.FlowReplace &= ~SERIAL_RTS_MASK;
            Extension->HandFlow.FlowReplace |= SERIAL_TRANSMIT_TOGGLE;

            // The order of the tests is very important below.
            // If there is a break then we should turn on the RTS.
            // If there isn't a break but there are characters in
            // the hardware, then turn on the RTS.
            // If there are writes pending that aren't being held
            // up, then turn on the RTS.

            if ((Extension->TXHolding & CYZ_TX_BREAK) ||
                (CyzAmountInTxBuffer(Extension)) ||
                (Extension->CurrentWriteIrp || Extension->TransmitImmediate ||
                 (!IsListEmpty(&Extension->WriteQueue)) &&
                 (!Extension->TXHolding))) {
		
                CyzSetRTS(Extension);
            } else {
                // This routine will check to see if it is time
                // to lower the RTS because of transmit toggle
                // being on.  If it is ok to lower it, it will,
                // if it isn't ok, it will schedule things so
                // that it will get lowered later.

                Extension->CountOfTryingToLowerRTS++;
                CyzPerhapsLowerRTS(Extension);

            }
        } else {
            // The end result here will be that RTS is cleared.
            //
            // We first need to check whether reception is being held
            // up because of previous RTS flow control.  If it is then
            // we should clear that reason in the RXHolding mask.

            if (Extension->RXHolding & CYZ_RX_RTS) {

                CyzDbgPrintEx(CYZFLOW, "Clearing rts block of reception for"
                              " Port%d Pci%d\n", 
                              Extension->PortIndex+1,Extension->PciSlot);
                Extension->RXHolding &= ~CYZ_RX_RTS;
            }
            CyzClrRTS(Extension);
        }
    }
    
    // We now take care of automatic receive flow control.
    // We only do work if things have changed.

    if ((!Extension->DeviceIsOpened) ||
        ((Extension->HandFlow.FlowReplace & SERIAL_AUTO_RECEIVE) !=
         (New.FlowReplace & SERIAL_AUTO_RECEIVE))) {

        if (New.FlowReplace & SERIAL_AUTO_RECEIVE) {

            // We wouldn't be here if it had been on before.
            //
            // We should check to see whether we exceed the turn
            // off limits.
            //
            // Note that since we are following the OS/2 flow
            // control rules we will never send an xon if
            // when enabling xon/xoff flow control we discover that
            // we could receive characters but we are held up do
            // to a previous Xoff.

            if ((Extension->BufferSize - New.XoffLimit) <=
                 Extension->CharsInInterruptBuffer) {
                // Cause the Xoff to be sent.
		
                Extension->RXHolding |= CYZ_RX_XOFF;
                CyzProdXonXoff(Extension,FALSE);
            }
        } else {
            // The app has disabled automatic receive flow control.
            //
            // If transmission was being held up because of
            // an automatic receive Xoff, then we should
            // cause an Xon to be sent.

            if (Extension->RXHolding & CYZ_RX_XOFF) {
                Extension->RXHolding &= ~CYZ_RX_XOFF;

                // Cause the Xon to be sent.
                CyzProdXonXoff(Extension,TRUE);
            }
        }
    }

    // We now take care of automatic transmit flow control.
    // We only do work if things have changed.

    if ((!Extension->DeviceIsOpened) ||
        ((Extension->HandFlow.FlowReplace & SERIAL_AUTO_TRANSMIT) !=
         (New.FlowReplace & SERIAL_AUTO_TRANSMIT))) {

        if (New.FlowReplace & SERIAL_AUTO_TRANSMIT) {

            #if 0
            // Let's enable flow control at firmware level. The driver
            // is causing overflow in the remote devices.
            sw_flow = CYZ_READ_ULONG(&ch_ctrl->sw_flow);
            sw_flow |= C_FL_OXX;
            CYZ_WRITE_ULONG(&ch_ctrl->sw_flow,sw_flow);
            #endif


            // We wouldn't be here if it had been on before.
            //
            // There is some belief that if autotransmit
            // was just enabled, I should go look in what we
            // already received, and if we find the xoff character
            // then we should stop transmitting.  I think this
            // is an application bug.  For now we just care about
            // what we see in the future.

            ;
        } else {
            // The app has disabled automatic transmit flow control.
            //
            // If transmission was being held up because of
            // an automatic transmit Xoff, then we should
            // cause an Xon to be sent.

            #if 0
            // Disabling flow control at firmware level. 
            sw_flow = CYZ_READ_ULONG(&ch_ctrl->sw_flow);
            sw_flow &= ~C_FL_OXX;
            CYZ_WRITE_ULONG(&ch_ctrl->sw_flow,sw_flow);
            #endif

            if (Extension->TXHolding & CYZ_TX_XOFF) {
                Extension->TXHolding &= ~CYZ_TX_XOFF;

                // Cause the Xon to be sent.
                CyzProdXonXoff(Extension,TRUE);
            }
        }
    }


    // For Cyclades-Z, we set the SERIAL_CTS_HANDSHAKE to be done by the 
    // firmware.
	

    if ((!Extension->DeviceIsOpened) ||
        ((Extension->HandFlow.ControlHandShake & SERIAL_OUT_HANDSHAKEMASK) !=
        (New.ControlHandShake & SERIAL_OUT_HANDSHAKEMASK))) {
       
        if (New.ControlHandShake & SERIAL_CTS_HANDSHAKE) {
            hw_flow = CYZ_READ_ULONG(&ch_ctrl->hw_flow);
            hw_flow |= C_RS_CTS;
            CYZ_WRITE_ULONG(&ch_ctrl->hw_flow,hw_flow);
        } else {
            hw_flow = CYZ_READ_ULONG(&ch_ctrl->hw_flow);
            hw_flow &= ~C_RS_CTS;
            CYZ_WRITE_ULONG(&ch_ctrl->hw_flow,hw_flow);
        }
        if (New.ControlHandShake & SERIAL_DSR_HANDSHAKE) {
            hw_flow = CYZ_READ_ULONG(&ch_ctrl->hw_flow);			
            hw_flow |= C_RS_DSR;
            CYZ_WRITE_ULONG(&ch_ctrl->hw_flow,hw_flow);
        } else {
            hw_flow = CYZ_READ_ULONG(&ch_ctrl->hw_flow);
            hw_flow &= ~C_RS_DSR;					
            CYZ_WRITE_ULONG(&ch_ctrl->hw_flow,hw_flow);
        }
        if (New.ControlHandShake & SERIAL_DCD_HANDSHAKE) {
            hw_flow = CYZ_READ_ULONG(&ch_ctrl->hw_flow);
            hw_flow |= C_RS_DCD;
            CYZ_WRITE_ULONG(&ch_ctrl->hw_flow,hw_flow);
        } else {
            hw_flow = CYZ_READ_ULONG(&ch_ctrl->hw_flow);
            hw_flow &= ~C_RS_DCD;					
            CYZ_WRITE_ULONG(&ch_ctrl->hw_flow,hw_flow);
        }
    }
    
    CyzIssueCmd(Extension,C_CM_IOCTLW,0L,FALSE);
	
	

    // At this point we can simply make sure that entire
    // handflow structure in the extension is updated.

    Extension->HandFlow = New;

    return FALSE;
}

BOOLEAN
CyzSetHandFlow(
    IN PVOID Context
    )
/*--------------------------------------------------------------------------
    CyzSetHandFlow()
    
    Routine Description: This routine is used to set the handshake and
    control flow in the device extension.

    Arguments:

    Context - Pointer to a structure that contains a pointer to the device
    	      extension and a pointer to a handflow structure.

    Return Value: This routine always returns FALSE.
--------------------------------------------------------------------------*/
{
    PCYZ_IOCTL_SYNC S = Context;
    PCYZ_DEVICE_EXTENSION Extension = S->Extension;
    PSERIAL_HANDFLOW HandFlow = S->Data;

    CyzSetupNewHandFlow(Extension,HandFlow);
    CyzHandleModemUpdate(Extension,FALSE,0);
    return FALSE;
}

BOOLEAN
CyzTurnOnBreak(
    IN PVOID Context
    )
/*--------------------------------------------------------------------------
    CyzTurnOnBreak()
    
    Routine Description: This routine will turn on break in the 
	hardware and record the fact the break is on, in the extension 
	variable that holds reasons that transmission is stopped.

    Arguments:

    Context - Really a pointer to the device extension.

    Return Value: This routine always returns FALSE.
--------------------------------------------------------------------------*/
{

    PCYZ_DEVICE_EXTENSION Extension = Context;

    UCHAR OldLineControl;

    if ((Extension->HandFlow.FlowReplace & SERIAL_RTS_MASK) ==
        SERIAL_TRANSMIT_TOGGLE) {

        CyzSetRTS(Extension);

    }
		
	CyzIssueCmd(Extension,C_CM_SET_BREAK,0L,FALSE); // This will set break.
//	CyzIssueCmd(Extension,C_CM_SENDBRK,0L); This will set and reset break.

    Extension->TXHolding |= CYZ_TX_BREAK;

    return FALSE;
}

BOOLEAN
CyzTurnOffBreak(
    IN PVOID Context
    )
/*--------------------------------------------------------------------------
    CyzturnOffBreak()
    
    Routine Description: This routine will turn off break in the 
	hardware and record the fact the break is off, in the extension 
	variable that holds reasons that transmission is stopped.

    Arguments:

    Context - Really a pointer to the device extension.

    Return Value: This routine always returns FALSE.
--------------------------------------------------------------------------*/
{

    PCYZ_DEVICE_EXTENSION Extension = Context;

    UCHAR OldLineControl;

    if (Extension->TXHolding & CYZ_TX_BREAK) {

        //
        // We actually have a good reason for testing if transmission
        // is holding instead of blindly clearing the bit.
        //
        // If transmission actually was holding and the result of
        // clearing the bit is that we should restart transmission
        // then we will poke the interrupt enable bit, which will
        // cause an actual interrupt and transmission will then
        // restart on its own.
        //
        // If transmission wasn't holding and we poked the bit
        // then we would interrupt before a character actually made
        // it out and we could end up over writing a character in
        // the transmission hardware.

		CyzIssueCmd(Extension,C_CM_CLR_BREAK,0L,FALSE);

        Extension->TXHolding &= ~CYZ_TX_BREAK;

        if (!Extension->TXHolding &&
            (Extension->TransmitImmediate ||
             Extension->WriteLength) &&
             Extension->HoldingEmpty) {

#ifndef POLL
            CyzTxStart(Extension);
#endif

        } else {

            //
            // The following routine will lower the rts if we
            // are doing transmit toggleing and there is no
            // reason to keep it up.
            //

            Extension->CountOfTryingToLowerRTS++;
            CyzPerhapsLowerRTS(Extension);

        }

    }

    return FALSE;
}

BOOLEAN
CyzPretendXoff(
    IN PVOID Context
    )
/*--------------------------------------------------------------------------
    CyzPretendXoff()
    
    Routine Description: This routine is used to process the Ioctl that
    request the driver to act as if an Xoff was received.  Even if the
    driver does not have automatic Xoff/Xon flowcontrol - This still will
    stop the transmission.  This is the OS/2 behavior and is not well
    specified for Windows.  Therefore we adopt the OS/2 behavior.

    Note: If the driver does not have automatic Xoff/Xon enabled
    then the only way to restart transmission is for the
    application to request we "act" as if we saw the xon.

    Arguments:

    Context - pointer to the device extension.

    Return Value: This routine always returns FALSE.
--------------------------------------------------------------------------*/
{
    PCYZ_DEVICE_EXTENSION Extension = Context;

    Extension->TXHolding |= CYZ_TX_XOFF;

    if((Extension->HandFlow.FlowReplace & SERIAL_RTS_MASK) ==
      						  SERIAL_TRANSMIT_TOGGLE) {
        CyzInsertQueueDpc(
            &Extension->StartTimerLowerRTSDpc,
            NULL,
            NULL,
            Extension
            )?Extension->CountOfTryingToLowerRTS++:0;
    }
    return FALSE;
}

BOOLEAN
CyzPretendXon(
    IN PVOID Context
    )
/*--------------------------------------------------------------------------
    CyzPretendXon()
    Routine Description: This routine is used to process the Ioctl that
    request the driver to act as if an Xon was received.

    Note: If the driver does not have automatic Xoff/Xon enabled
    then the only way to restart transmission is for the
    application to request we "act" as if we saw the xon.

    Arguments:

    Context - pointer to the device extension.

    Return Value:

    This routine always returns FALSE.
--------------------------------------------------------------------------*/
{
    PCYZ_DEVICE_EXTENSION Extension = Context;

    if (Extension->TXHolding) {
        // We actually have a good reason for testing if transmission
        // is holding instead of blindly clearing the bit.
        //
        // If transmission actually was holding and the result of
        // clearing the bit is that we should restart transmission
        // then we will poke the interrupt enable bit, which will
        // cause an actual interrupt and transmission will then
        // restart on its own.
        //
        // If transmission wasn't holding and we poked the bit
        // then we would interrupt before a character actually made
        // it out and we could end up over writing a character in
        // the transmission hardware.

        Extension->TXHolding &= ~CYZ_TX_XOFF;

//Removed at 02/07/00 by Fanny. Polling routine will do the transmission.
//        if (!Extension->TXHolding &&
//            (Extension->TransmitImmediate ||
//             Extension->WriteLength) &&
//             Extension->HoldingEmpty) {
//
//	        CyzTxStart(Extension);
//        }
    }
    return FALSE;
}

VOID
CyzHandleReducedIntBuffer(
    IN PCYZ_DEVICE_EXTENSION Extension
    )
/*--------------------------------------------------------------------------
    CyzHandleReducedIntBuffer()
    
    Routine Description: This routine is called to handle a reduction in
    the number of characters in the interrupt (typeahead) buffer.  It
    will check the current output flow control and re-enable transmission
    as needed.

    NOTE: This routine assumes that it is working at interrupt level.

    Arguments:

    Extension - A pointer to the device extension.

    Return Value: None.
--------------------------------------------------------------------------*/
{

#ifndef POLL
	struct BUF_CTRL *buf_ctrl = Extension->BufCtrl;
    ULONG rx_threshold = CYZ_READ_ULONG(&buf_ctrl->rx_threshold);
    if (CyzAmountInRxBuffer(Extension) > rx_threshold) {
#if DBG
        DbgPrint("Above threshold\n");
#endif
        CyzRx(Extension);
    }
#endif    


    //
    // If we are doing receive side flow control and we are
    // currently "holding" then because we've emptied out
    // some characters from the interrupt buffer we need to
    // see if we can "re-enable" reception.
    //

    if (Extension->RXHolding) {
	
        //LOGENTRY(LOG_MISC, ZSIG_HANDLE_REDUCED_BUFFER, 
        //                   Extension->PortIndex+1,
        //                   Extension->RXHolding, 
        //                   0);         

    	if (Extension->CharsInInterruptBuffer <=
	    	(ULONG)Extension->HandFlow.XonLimit) {
						
            if (Extension->RXHolding & CYZ_RX_DTR) {
                Extension->RXHolding &= ~CYZ_RX_DTR;
                CyzSetDTR(Extension);
            }

            if (Extension->RXHolding & CYZ_RX_RTS) {
                Extension->RXHolding &= ~CYZ_RX_RTS;
                CyzSetRTS(Extension);
            }

            if (Extension->RXHolding & CYZ_RX_XOFF) {
                CyzProdXonXoff(Extension,TRUE );
            }
        }			
					
    }

}

VOID
CyzProdXonXoff(
    IN PCYZ_DEVICE_EXTENSION Extension,
    IN BOOLEAN SendXon
    )
/*--------------------------------------------------------------------------
    CyzProdXonXoff()
    
    Routine Description: This routine will set up the SendXxxxChar
    variables if necessary and determine if we are going to be interrupting
    because of current transmission state.  It will cause an
    interrupt to occur if neccessary, to send the xon/xoff char.
    NOTE: This routine assumes that it is called at interrupt level.

    Arguments:

    Extension - A pointer to the serial device extension.
    SendXon - If a character is to be send, this indicates whether
              it should be an Xon or an Xoff.

    Return Value: None.
--------------------------------------------------------------------------*/
{
//CHANGED FOR MODEMSHARE TEST CASES 6 (SMALL_THREAD_TXFER_CASE), 41 (MEDIUM_THREAD_TXFER_CASE)
//AND 67 (MEDIUM_NESTED_OVERLAPPED_THREAD_TRANSFER_CASE). WE WILL SEND XON/XOFF DURING
//NEXT POLLING ROUTINE TO GIVE TIME FOR THE HARDWARE FLOW CONTROL TO BE ENABLED.
// 
//    if (SendXon) {
//        CyzSendXon(Extension);
//    } else {
//        CyzSendXoff(Extension);
//    }


    if (SendXon) {

        Extension->SendXonChar = TRUE;
        Extension->SendXoffChar = FALSE;

    } else {

        Extension->SendXonChar = FALSE;
        Extension->SendXoffChar = TRUE;

    }

}

ULONG
CyzHandleModemUpdate(
    IN PCYZ_DEVICE_EXTENSION Extension,
    IN BOOLEAN DoingTX,
    IN ULONG Reason
    )
/*--------------------------------------------------------------------------
    CyzHandleModemUpdate()
    
    Routine Description: check on the modem status, and handle any
    appropriate event notification as well as any flow control appropriate
    to modem status lines.
    
    Arguments:

    Extension - A pointer to the serial device extension.
    DoingTX - This boolean is used to indicate that this call
              came from the transmit processing code.  If this
              is true then there is no need to cause a new interrupt
              since the code will be trying to send the next
              character as soon as this call finishes.
    Reason - Value copied from loc_doorbell.			  

    Return Value: This returns the old value of the modem status register
--------------------------------------------------------------------------*/
{

    ULONG OldTXHolding = Extension->TXHolding;
    UCHAR ModemStatus = 0;

    ULONG msvr;  //	,msvrxor;
    struct CH_CTRL *ch_ctrl;
	
    ch_ctrl = Extension->ChCtrl;
    msvr = CYZ_READ_ULONG(&ch_ctrl->rs_status);
    
    //Removed. Let's try another thing for Worldgroup.
    //if (Extension->DCDFlag){
    //	msvr &= ~C_RS_DCD;
    //	msvr |= Extension->DCDstatus;
    //	Extension->DCDFlag = 0;
    //}	
    msvr &= ~C_RS_DCD;
    msvr |= Extension->DCDstatus;

		    
    if(msvr & C_RS_CTS)	ModemStatus |= SERIAL_MSR_CTS;
    if(msvr & C_RS_DSR)	ModemStatus |= SERIAL_MSR_DSR;
    if(msvr & C_RS_RI)	ModemStatus |= SERIAL_MSR_RI;
    if(msvr & C_RS_DCD)	ModemStatus |= SERIAL_MSR_DCD;
    if(Reason == C_CM_MCTS)	ModemStatus |= SERIAL_MSR_DCTS;
    if(Reason == C_CM_MDSR)	ModemStatus |= SERIAL_MSR_DDSR;
    if(Reason == C_CM_MRI)	ModemStatus |= SERIAL_MSR_TERI;
    if(Reason == C_CM_MDCD)	ModemStatus |= SERIAL_MSR_DDCD;

#if 0
    if(Extension->LieRIDSR == TRUE) {		// we have to lie...
        ModemStatus |= SERIAL_MSR_DSR;			// DSR always on
        ModemStatus &= ~(SERIAL_MSR_RI);		// RI always off
        ModemStatus &= ~(SERIAL_MSR_DDSR | SERIAL_MSR_TERI);
    }
#endif
    
    // If we are placing the modem status into the data stream
    // on every change, we should do it now.

    if (Extension->EscapeChar) {
        if (ModemStatus & (SERIAL_MSR_DCTS |
                           SERIAL_MSR_DDSR |
                           SERIAL_MSR_TERI |
                           SERIAL_MSR_DDCD)) {
            CyzPutChar(Extension,Extension->EscapeChar);
            CyzPutChar(Extension,SERIAL_LSRMST_MST);
            CyzPutChar(Extension,ModemStatus);
        }
    }

    // Take care of input flow control based on sensitivity
    // to the DSR.  This is done so that the application won't
    // see spurious data generated by odd devices.
    //
    // Basically, if we are doing dsr sensitivity then the
    // driver should only accept data when the dsr bit is set.

    if (Extension->HandFlow.ControlHandShake & SERIAL_DSR_SENSITIVITY) {
        if (ModemStatus & SERIAL_MSR_DSR) {
            Extension->RXHolding &= ~CYZ_RX_DSR;
        } else {
            Extension->RXHolding |= CYZ_RX_DSR;
        }
    } else {
        Extension->RXHolding &= ~CYZ_RX_DSR;
    }

    // Check to see if we have a wait pending on the modem status events.
    // If we do then we schedule a dpc to satisfy that wait.

    if (Extension->IsrWaitMask) {
        if((Extension->IsrWaitMask&SERIAL_EV_CTS)&&(ModemStatus&SERIAL_MSR_DCTS)) {
            Extension->HistoryMask |= SERIAL_EV_CTS;
        }
        if((Extension->IsrWaitMask&SERIAL_EV_DSR)&&(ModemStatus&SERIAL_MSR_DDSR)) {
            Extension->HistoryMask |= SERIAL_EV_DSR;
        }
        if((Extension->IsrWaitMask&SERIAL_EV_RING)&&(ModemStatus&SERIAL_MSR_TERI)) {
            Extension->HistoryMask |= SERIAL_EV_RING;
        }
        if((Extension->IsrWaitMask&SERIAL_EV_RLSD)&&(ModemStatus&SERIAL_MSR_DDCD)) {
            Extension->HistoryMask |= SERIAL_EV_RLSD;
        }
        if(Extension->IrpMaskLocation && Extension->HistoryMask) {
            *Extension->IrpMaskLocation = Extension->HistoryMask;
            Extension->IrpMaskLocation = NULL;
            Extension->HistoryMask = 0;
            Extension->CurrentWaitIrp->IoStatus.Information = sizeof(ULONG);
            CyzInsertQueueDpc(&Extension->CommWaitDpc,NULL,NULL,Extension);
        }
    }

    // If the app has modem line flow control then
    // we check to see if we have to hold up transmission.

    if (Extension->HandFlow.ControlHandShake & SERIAL_OUT_HANDSHAKEMASK) {
        if (Extension->HandFlow.ControlHandShake & SERIAL_CTS_HANDSHAKE) {
            if (ModemStatus & SERIAL_MSR_CTS) {
                Extension->TXHolding &= ~CYZ_TX_CTS;
            } else {			
                Extension->TXHolding |= CYZ_TX_CTS;
            }
        } else {
            Extension->TXHolding &= ~CYZ_TX_CTS;
        }
        if (Extension->HandFlow.ControlHandShake & SERIAL_DSR_HANDSHAKE) {
            if (ModemStatus & SERIAL_MSR_DSR) {
                Extension->TXHolding &= ~CYZ_TX_DSR;
            } else {
                Extension->TXHolding |= CYZ_TX_DSR;
            }
        } else {
            Extension->TXHolding &= ~CYZ_TX_DSR;
        }
        if (Extension->HandFlow.ControlHandShake & SERIAL_DCD_HANDSHAKE) {
            if (ModemStatus & SERIAL_MSR_DCD) {
                Extension->TXHolding &= ~CYZ_TX_DCD;
            } else {
                Extension->TXHolding |= CYZ_TX_DCD;
            }
        } else {
            Extension->TXHolding &= ~CYZ_TX_DCD;
        }

        // If we hadn't been holding, and now we are then
        // queue off a dpc that will lower the RTS line
        // if we are doing transmit toggling.

        if (!OldTXHolding && Extension->TXHolding  &&
            ((Extension->HandFlow.FlowReplace & SERIAL_RTS_MASK) ==
              SERIAL_TRANSMIT_TOGGLE)) {

            CyzInsertQueueDpc(
                &Extension->StartTimerLowerRTSDpc,
                NULL,
                NULL,
                Extension
                )?Extension->CountOfTryingToLowerRTS++:0;
        }
//Removed at 02/07/00 by Fanny. Polling routine will do the transmission.
//        // We've done any adjusting that needed to be
//        // done to the holding mask given updates
//        // to the modem status.  If the Holding mask
//        // is clear (and it wasn't clear to start)
//        // and we have "write" work to do set things
//        // up so that the transmission code gets invoked.
//
//        if (!DoingTX && OldTXHolding && !Extension->TXHolding) {
//            if (!Extension->TXHolding &&
//                (Extension->TransmitImmediate ||
//                 Extension->WriteLength) &&
//                 Extension->HoldingEmpty) {
//		
//                CyzTxStart(Extension);
//            }
//        }
    } else {
        // We need to check if transmission is holding
        // up because of modem status lines.  What
        // could have occured is that for some strange
        // reason, the app has asked that we no longer
        // stop doing output flow control based on
        // the modem status lines.  If however, we
        // *had* been held up because of the status lines
        // then we need to clear up those reasons.

        if (Extension->TXHolding & (CYZ_TX_DCD | CYZ_TX_DSR | CYZ_TX_CTS)) {
            Extension->TXHolding &= ~(CYZ_TX_DCD | CYZ_TX_DSR | CYZ_TX_CTS);

            if (!DoingTX && OldTXHolding && !Extension->TXHolding) {
                if (!Extension->TXHolding &&
                    (Extension->TransmitImmediate ||
                     Extension->WriteLength) &&
                     Extension->HoldingEmpty) {

                    CyzTxStart(Extension);
                }
            }
        }
    }    
    return ((ULONG)ModemStatus);
}


BOOLEAN
CyzPerhapsLowerRTS(
    IN PVOID Context
    )
/*--------------------------------------------------------------------------
    CyzPerhapsLowerRTS()
    
    Routine Description: This routine checks that the software reasons for
    lowering the RTS lines are present.  If so, it will then cause the
    line status register to be read (and any needed processing
    implied by the status register to be done), and if the shift register
    is empty it will lower the line.  If the shift register isn't empty,
    this routine will queue off a dpc that will start a timer, that will
    basically call us back to try again.
    NOTE: This routine assumes that it is called at interrupt level.

    Arguments:

    Context - pointer to the device extension.

    Return Value: Always FALSE.
--------------------------------------------------------------------------*/
{
    PCYZ_DEVICE_EXTENSION Extension = Context;

    // We first need to test if we are actually still doing
    // transmit toggle flow control.  If we aren't then
    // we have no reason to try be here.

    if ((Extension->HandFlow.FlowReplace & SERIAL_RTS_MASK) ==
					        SERIAL_TRANSMIT_TOGGLE) {
        // The order of the tests is very important below.
        // If there is a break then we should leave on the RTS,
        // because when the break is turned off, it will submit
        // the code to shut down the RTS.
        // If there are writes pending that aren't being held
        // up, then leave on the RTS, because the end of the write
        // code will cause this code to be reinvoked.  If the writes
        // are being held up, its ok to lower the RTS because the
        // upon trying to write the first character after transmission
        // is restarted, we will raise the RTS line.

        if ((Extension->TXHolding & CYZ_TX_BREAK) ||
            (Extension->CurrentWriteIrp || Extension->TransmitImmediate ||
             (!IsListEmpty(&Extension->WriteQueue)) &&
             (!Extension->TXHolding))) {

            NOTHING;
        } else {
            // Looks good so far.  Call the line status check and processing
            // code, it will return the "current" line status value.  If
            // the holding and shift register are clear, lower the RTS line,
            // if they aren't clear, queue of a dpc that will cause a timer
            // to reinvoke us later.  We do this code here because no one
            // but this routine cares about the characters in the hardware,
            // so no routine by this routine will bother invoking to test
            // if the hardware is empty.

			if (CyzAmountInTxBuffer(Extension)){
#if 0
            if ((CyzProcessLSR(Extension) & (CYZ_LSR_THRE | CYZ_LSR_TEMT)) !=
                 			(CYZ_LSR_THRE | CYZ_LSR_TEMT))   
#endif							
                // Well it's not empty, try again later.
                CyzInsertQueueDpc(
                    &Extension->StartTimerLowerRTSDpc,
                    NULL,
                    NULL,
                    Extension
                    )?Extension->CountOfTryingToLowerRTS++:0;
            } else {
                // Nothing in the hardware, Lower the RTS.
                CyzClrRTS(Extension);
            }
        }
    }
    
    // We decement the counter to indicate that we've reached
    // the end of the execution path that is trying to push
    // down the RTS line.

    Extension->CountOfTryingToLowerRTS--;
    return FALSE;
}

VOID
CyzStartTimerLowerRTS(
    IN PKDPC Dpc,
    IN PVOID DeferredContext,
    IN PVOID SystemContext1,
    IN PVOID SystemContext2
    )
/*--------------------------------------------------------------------------
    CyzStartTimerLowerRTS()
    
    Routine Description: This routine starts a timer that when it expires
    will start a dpc that will check if it can lower the rts line because
    there are no characters in the hardware.

    Arguments:

    Dpc - Not Used.
    DeferredContext - points to the device extension.
    SystemContext1 - Not Used.
    SystemContext2 - Not Used.

    Return Value: None.
--------------------------------------------------------------------------*/
{
    PCYZ_DEVICE_EXTENSION Extension = DeferredContext;
    LARGE_INTEGER CharTime;
    ULONG AmountBeingTx;
    LARGE_INTEGER TotalTime;
    KIRQL OldIrql;
#ifdef POLL
    KIRQL pollIrql;
#endif

    UNREFERENCED_PARAMETER(Dpc);
    UNREFERENCED_PARAMETER(SystemContext1);
    UNREFERENCED_PARAMETER(SystemContext2);


    CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyzStartTimerLowerRTS(%X)\n",
                  Extension);


    // Take out the lock to prevent the line control
    // from changing out from under us while we calculate
    // a character time.
    KeAcquireSpinLock(&Extension->ControlLock,&OldIrql);
    CharTime = CyzGetCharTime(Extension);
    KeReleaseSpinLock(&Extension->ControlLock,OldIrql);

    CharTime.QuadPart = -CharTime.QuadPart;
    AmountBeingTx = CyzAmountInTxBuffer(Extension);
    TotalTime.QuadPart = AmountBeingTx*CharTime.QuadPart;

    if (CyzSetTimer(
            &Extension->LowerRTSTimer,
            TotalTime,
            &Extension->PerhapsLowerRTSDpc,
            Extension
            )) {

        // The timer was already in the timer queue.  This implies
        // that one path of execution that was trying to lower
        // the RTS has "died".  Synchronize with the ISR so that
        // we can lower the count.

        #ifdef POLL
        KeAcquireSpinLock(&Extension->PollLock,&pollIrql);
        CyzDecrementRTSCounter(Extension);
        KeReleaseSpinLock(&Extension->PollLock,pollIrql);
        #else
        KeSynchronizeExecution(
            Extension->Interrupt,
            CyzDecrementRTSCounter,
            Extension
            );
        #endif
    }

    CyzDpcEpilogue(Extension, Dpc);

    CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyzStartTimerLowerRTS\n");

}

VOID
CyzInvokePerhapsLowerRTS(
    IN PKDPC Dpc,
    IN PVOID DeferredContext,
    IN PVOID SystemContext1,
    IN PVOID SystemContext2
    )
/*--------------------------------------------------------------------------
    CyzInvokePerhapsLowerRTS()
    
    Routine Description: This dpc routine exists solely to call the code
    that tests if the rts line should be lowered when TRANSMIT TOGGLE
    flow control is being used.

    Arguments:

    Dpc - Not Used.
    DeferredContext - points to the device extension.
    SystemContext1 - Not Used.
    SystemContext2 - Not Used.

    Return Value: None.
--------------------------------------------------------------------------*/
{
    PCYZ_DEVICE_EXTENSION Extension = DeferredContext;
    KIRQL pollIrql;

    UNREFERENCED_PARAMETER(Dpc);
    UNREFERENCED_PARAMETER(SystemContext1);
    UNREFERENCED_PARAMETER(SystemContext2);

    #ifdef POLL
    KeAcquireSpinLock(&Extension->PollLock,&pollIrql);
    CyzPerhapsLowerRTS(Extension);
    KeReleaseSpinLock(&Extension->PollLock,pollIrql);
    #else	
    KeSynchronizeExecution(
        Extension->Interrupt,
        CyzPerhapsLowerRTS,
        Extension
        );
	#endif
}

BOOLEAN
CyzDecrementRTSCounter(
    IN PVOID Context
    )
/*--------------------------------------------------------------------------
    CyzDecrementRTSCounter()
    
    Routine Description: This routine checks that the software reasons for
    lowering the RTS lines are present.  If so, it will then cause the
    line status register to be read (and any needed processing implied by
    the status register to be done), and if the shift register is empty it
    will lower the line.  If the shift register isn't empty, this routine
    will queue off a dpc that will start a timer, that will basically call
    us back to try again.
    NOTE: This routine assumes that it is called at interrupt level.

    Arguments:

    Context - pointer to the device extension.

    Return Value: Always FALSE.
--------------------------------------------------------------------------*/
{
    PCYZ_DEVICE_EXTENSION Extension = Context;

    Extension->CountOfTryingToLowerRTS--;
    return FALSE;
}




=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyzport\cyzopcl.c ===
/*--------------------------------------------------------------------------
*
*   Copyright (C) Cyclades Corporation, 1997-2001.
*   All rights reserved.
*
*   Cyclades-Z Port Driver
*	
*   This file:      cyzopcl.c
*
*   Description:    This module contains the code related to opening,
*                   closing and cleaning up in the Cyclades-Z Port driver.
*
*   Notes:          This code supports Windows 2000 and Windows XP,
*                   x86 and IA64 processors.
*
*   Complies with Cyclades SW Coding Standard rev 1.3.
*
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*   Change History
*
*--------------------------------------------------------------------------
*
*
*--------------------------------------------------------------------------
*/

#include "precomp.h"

BOOLEAN
CyzMarkOpen(
    IN PVOID Context
    );

BOOLEAN
CyzNullSynch(
    IN PVOID Context
    );

#ifdef ALLOC_PRAGMA
#pragma alloc_text(PAGESER,CyzGetCharTime)
#pragma alloc_text(PAGESER,CyzMarkClose)
#pragma alloc_text(PAGESER,CyzCleanup)
#pragma alloc_text(PAGESER,CyzClose)
#pragma alloc_text(PAGESER,CyzMarkClose)
#pragma alloc_text(PAGESER,CyzMarkOpen)
#pragma alloc_text(PAGESER,CyzCreateOpen) 

//
// Always paged
//

//#pragma alloc_text(PAGESRP0,CyzCreateOpen) Moved to PAGESER, because of raised IRQL during spin lock.
//#pragma alloc_text(PAGESRP0,SerialDrainUART)
#endif // ALLOC_PRAGMA


BOOLEAN
CyzNullSynch(
    IN PVOID Context
    ) 
/*------------------------------------------------------------------------
    Just a bogus little routine to synch with the ISR.
------------------------------------------------------------------------*/
{
    UNREFERENCED_PARAMETER(Context);
    return FALSE;
}


NTSTATUS
CyzCreateOpen(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    )
/*--------------------------------------------------------------------------
	CyzCreateOpen()

	Description: We connect up to the interrupt for the create/open
	and initialize the structures needed to maintain an open for a
	device.

	Arguments:
	
	DeviceObject - Pointer to the device object for this device
	Irp - Pointer to the IRP for the current request

	Return Value: The function value is the final status of the call
--------------------------------------------------------------------------*/
{
    PCYZ_DEVICE_EXTENSION extension = DeviceObject->DeviceExtension;
    NTSTATUS localStatus;
    #ifdef POLL
    KIRQL pollIrql;
    KIRQL pollingIrql;
    PCYZ_DISPATCH pDispatch = extension->OurIsrContext;
    #endif

    PAGED_CODE();

    if (extension->PNPState != CYZ_PNP_STARTED) {
       Irp->IoStatus.Status = STATUS_INSUFFICIENT_RESOURCES;
       IoCompleteRequest(Irp, IO_NO_INCREMENT);
       return STATUS_INSUFFICIENT_RESOURCES;
    }
	
    //
    // Lock out changes to PnP state until we have our open state decided
    //

    ExAcquireFastMutex(&extension->OpenMutex);

    if ((localStatus = CyzIRPPrologue(Irp, extension)) != STATUS_SUCCESS) {
       ExReleaseFastMutex(&extension->OpenMutex);
       if(localStatus != STATUS_PENDING) {
         CyzCompleteRequest(extension, Irp, IO_NO_INCREMENT);
       }
       return localStatus;
    }

    if (InterlockedIncrement(&extension->OpenCount) != 1) {
       ExReleaseFastMutex(&extension->OpenMutex);
       InterlockedDecrement(&extension->OpenCount);
       Irp->IoStatus.Status = STATUS_ACCESS_DENIED;
       CyzCompleteRequest(extension, Irp, IO_NO_INCREMENT);
       return STATUS_ACCESS_DENIED;
    }

    CyzDbgPrintEx(CYZIRPPATH, "Dispatch entry for: %x\n", Irp);

    CyzDbgPrintEx(CYZDIAG3, "In CyzCreateOpen\n");

    LOGENTRY(LOG_MISC, ZSIG_OPEN, 
                       extension->PortIndex+1,
                       0, 
                       0);

    // Before we do anything, let's make sure they aren't trying
    // to create a directory.  This is a silly, but what's a driver to do!?
    
    if (IoGetCurrentIrpStackLocation(Irp)->Parameters.Create.Options &
        FILE_DIRECTORY_FILE) {
        ExReleaseFastMutex(&extension->OpenMutex);

        Irp->IoStatus.Status = STATUS_NOT_A_DIRECTORY;
        Irp->IoStatus.Information = 0;

        InterlockedDecrement(&extension->OpenCount);
        CyzCompleteRequest(extension, Irp, IO_NO_INCREMENT);

        return STATUS_NOT_A_DIRECTORY;
    }
    
    // Create a buffer for the RX data when no reads are outstanding.
    
    extension->InterruptReadBuffer = NULL;
    extension->BufferSize = 0;
    
    switch (MmQuerySystemSize()) {
        case MmLargeSystem: {
            extension->BufferSize = 4096;
            extension->InterruptReadBuffer = ExAllocatePool(
                                                NonPagedPool,
                                                extension->BufferSize);
            if (extension->InterruptReadBuffer)	{
                break;
            }
        }
        case MmMediumSystem: {
            extension->BufferSize = 1024;
            extension->InterruptReadBuffer = ExAllocatePool(
                                                NonPagedPool,
                                                extension->BufferSize);
            if (extension->InterruptReadBuffer) {
                break;
            }
        }
        case MmSmallSystem: {
            extension->BufferSize = 128;
            extension->InterruptReadBuffer = ExAllocatePool(
                                                NonPagedPool,
                                                extension->BufferSize);
        }		
    }

    if (!extension->InterruptReadBuffer) {
       ExReleaseFastMutex(&extension->OpenMutex);

        extension->BufferSize = 0;
        Irp->IoStatus.Status = STATUS_INSUFFICIENT_RESOURCES;
        Irp->IoStatus.Information = 0;

        InterlockedDecrement(&extension->OpenCount);
        CyzCompleteRequest(extension, Irp, IO_NO_INCREMENT);

        return STATUS_INSUFFICIENT_RESOURCES;
    }

    //
    // Ok, it looks like we really are going to open.  Lock down the
    // driver.
    //
    CyzLockPagableSectionByHandle(CyzGlobals.PAGESER_Handle);

    //
    // Power up the stack
    //

    (void)CyzGotoPowerState(DeviceObject, extension, PowerDeviceD0);

    //
    // Not currently waiting for wake up
    //

    extension->SendWaitWake = FALSE;
    

    // "flush" the read queue by initializing the count of characters.
    
    extension->CharsInInterruptBuffer = 0;
    extension->LastCharSlot = extension->InterruptReadBuffer +
                              (extension->BufferSize - 1);
    extension->ReadBufferBase = extension->InterruptReadBuffer;
    extension->CurrentCharSlot = extension->InterruptReadBuffer;
    extension->FirstReadableChar = extension->InterruptReadBuffer;
    extension->TotalCharsQueued = 0;

    // set up the default xon/xoff limits.    

    extension->HandFlow.XoffLimit = extension->BufferSize >> 3;
    extension->HandFlow.XonLimit = extension->BufferSize >> 1;

    extension->WmiCommData.XoffXmitThreshold = extension->HandFlow.XoffLimit;
    extension->WmiCommData.XonXmitThreshold = extension->HandFlow.XonLimit;

    extension->BufferSizePt8 = ((3*(extension->BufferSize>>2))+
                                   (extension->BufferSize>>4));

    //
    // Mark the device as busy for WMI
    //

    extension->WmiCommData.IsBusy = TRUE;

    extension->IrpMaskLocation = NULL;
    extension->HistoryMask = 0;
    extension->IsrWaitMask = 0;
	

#if !DBG
    // Clear out the statistics.

    #ifdef POLL
    KeAcquireSpinLock(&extension->PollLock,&pollIrql);
    CyzClearStats(extension);
    KeReleaseSpinLock(&extension->PollLock,pollIrql);
    #else
    KeSynchronizeExecution(extension->Interrupt,CyzClearStats,extension);
    #endif
#endif
	
    extension->EscapeChar = 0;

    // Synchronize with the ISR and mark the device as open
    #ifdef POLL
    KeAcquireSpinLock(&extension->PollLock,&pollIrql);
    CyzMarkOpen(extension);
    KeReleaseSpinLock(&extension->PollLock,pollIrql);
    #else
    KeSynchronizeExecution(extension->Interrupt,CyzMarkOpen,extension);
    #endif

    // Include this port in the list of Extensions, so that the next polling cycle will
    // consider it a working port.
    #ifdef POLL
    KeAcquireSpinLock(&pDispatch->PollingLock,&pollingIrql);
    pDispatch->Extensions[extension->PortIndex] = extension;
    if (!pDispatch->PollingStarted) {

        // Start polling timer
	    KeSetTimerEx(
		    &pDispatch->PollingTimer,
		    pDispatch->PollingTime,
            pDispatch->PollingPeriod,
		    &pDispatch->PollingDpc
		    );

        pDispatch->PollingStarted = TRUE;        
        pDispatch->PollingDrained = FALSE;
    }
    KeReleaseSpinLock(&pDispatch->PollingLock,pollingIrql);
    #endif

    Irp->IoStatus.Status = STATUS_SUCCESS;

    //
    // We have been marked open, so now the PnP state can change
    //

    ExReleaseFastMutex(&extension->OpenMutex);

    localStatus = Irp->IoStatus.Status;
    Irp->IoStatus.Information=0L;

    if (!NT_SUCCESS(localStatus)) {
       if (extension->InterruptReadBuffer != NULL) {
          ExFreePool(extension->InterruptReadBuffer);
          extension->InterruptReadBuffer = NULL;
       }

       InterlockedDecrement(&extension->OpenCount);
    }

    CyzCompleteRequest(extension, Irp, IO_NO_INCREMENT);

    return localStatus;
}


NTSTATUS
CyzClose(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    )
/*--------------------------------------------------------------------------
	CyzClose()

	Description: We simply disconnect the interrupt for now.

	Arguments:
	
	DeviceObject - Pointer to the device object for this device
	Irp - Pointer to the IRP for the current request

	Return Value: The function value is the final status of the call
--------------------------------------------------------------------------*/
{
    LARGE_INTEGER tenCharDelay;
    LARGE_INTEGER sixtyfourCharDelay;
    LARGE_INTEGER charTime;
    LARGE_INTEGER d200ms = RtlConvertLongToLargeInteger(-200*10000);
    LARGE_INTEGER d100ms = RtlConvertLongToLargeInteger(-100*10000);
    PCYZ_DEVICE_EXTENSION extension = DeviceObject->DeviceExtension;
    ULONG tx_put, tx_get, tx_bufsize;
    ULONG waitAmount1, waitAmount2;
    struct BUF_CTRL *buf_ctrl;
    ULONG txempty;
    CYZ_CLOSE_SYNC S;
    #ifdef POLL
    KIRQL pollIrql;
    #endif
	
    NTSTATUS status;

    //
    // Number of opens still active
    //

    LONG openCount;

    //
    // Number of DPC's still pending
    //

    ULONG pendingDPCs;

    ULONG flushCount;

    //
    // Grab a mutex
    //

    ExAcquireFastMutex(&extension->CloseMutex);


    //
    // We succeed a close on a removing device
    //

    if ((status = CyzIRPPrologue(Irp, extension)) != STATUS_SUCCESS) {
       CyzDbgPrintEx(DPFLTR_INFO_LEVEL, "Close prologue failed for: %x\n",
                     Irp);
       if (status == STATUS_DELETE_PENDING) {
             extension->BufferSize = 0;
             ExFreePool(extension->InterruptReadBuffer);
             extension->InterruptReadBuffer = NULL;
             status = Irp->IoStatus.Status = STATUS_SUCCESS;
       }

       if (status != STATUS_PENDING) {
             CyzCompleteRequest(extension, Irp, IO_NO_INCREMENT);
             openCount = InterlockedDecrement(&extension->OpenCount);
             ASSERT(openCount == 0);
       }

       ExReleaseFastMutex(&extension->CloseMutex);
       return status;
    }

    ASSERT(extension->OpenCount >= 1);

    if (extension->OpenCount < 1) {
       CyzDbgPrintEx(DPFLTR_ERROR_LEVEL, "Close open count bad for: 0x%x\n",
                     Irp);
       CyzDbgPrintEx(DPFLTR_ERROR_LEVEL, "Count: %x  Addr: 0x%x\n",
                     extension->OpenCount, &extension->OpenCount);
       ExReleaseFastMutex(&extension->CloseMutex);
       Irp->IoStatus.Status = STATUS_INVALID_DEVICE_REQUEST;
       CyzCompleteRequest(extension, Irp, IO_NO_INCREMENT);
       return STATUS_INVALID_DEVICE_REQUEST;
    }

    CyzDbgPrintEx(CYZIRPPATH, "Dispatch entry for: %x\n", Irp);
    CyzDbgPrintEx(CYZDIAG3, "In CyzClose\n");

    LOGENTRY(LOG_MISC, ZSIG_CLOSE, 
                       extension->PortIndex+1,
                       0, 
                       0);

    charTime.QuadPart = -CyzGetCharTime(extension).QuadPart;

    extension->DeviceIsOpened = FALSE;

    // Turn break off in case it is on
    
    #ifdef POLL
    KeAcquireSpinLock(&extension->PollLock,&pollIrql);
    CyzTurnOffBreak(extension);
    KeReleaseSpinLock(&extension->PollLock,pollIrql);
    #else
    KeSynchronizeExecution(extension->Interrupt,CyzTurnOffBreak,extension);
    #endif

    // Wait until all characters have been emptied out of the hardware.

    // Calculate number of bytes that are still in the firmware
    buf_ctrl = extension->BufCtrl;		
    tx_put = CYZ_READ_ULONG(&buf_ctrl->tx_put);
    tx_get = CYZ_READ_ULONG(&buf_ctrl->tx_get);
    tx_bufsize = extension->TxBufsize;
	
    if (tx_put >= tx_get) {
        waitAmount1 = tx_put - tx_get;
        waitAmount2 = 0; 
    } else {
        waitAmount1 = tx_bufsize - tx_get;
        waitAmount2 = tx_put;
    }	
    flushCount = waitAmount1 + waitAmount2;
    flushCount += 64 + 10; // Add number of bytes that could be in the hardware FIFO
                           // plus 10 for safety.

    // Wait for transmission to be emptied.
    S.Extension = extension;
    S.Data = &txempty;

    for (; flushCount != 0; flushCount--) {
      
        #ifdef POLL
        KeAcquireSpinLock(&extension->PollLock,&pollIrql);
        CyzCheckIfTxEmpty(&S);
        KeReleaseSpinLock(&extension->PollLock,pollIrql);
        #else
        KeSynchronizeExecution(extension->Interrupt,CyzCheckIfTxEmpty,&S);
        #endif
        if (txempty) {
            break;
        }
        KeDelayExecutionThread(KernelMode,FALSE,&charTime);               
    }
    
    // TODO FANNY: SHOULD WE CALL SerialMarkHardwareBroken()? SEE LATER...

    // Synchronize with the ISR to let it know that interrupts are
    // no longer important.
	
    #ifdef POLL
    KeAcquireSpinLock(&extension->PollLock,&pollIrql);
    CyzMarkClose(extension);
    KeReleaseSpinLock(&extension->PollLock,pollIrql);
    #else
    KeSynchronizeExecution(extension->Interrupt,CyzMarkClose,extension);
    #endif

    // If the driver has automatically transmitted an Xoff in
    // the context of automatic receive flow control then we
    // should transmit an Xon.

    if (extension->RXHolding & CYZ_RX_XOFF) {
        CyzIssueCmd(extension,C_CM_SENDXON,0L,FALSE);							

      //TODO FANNY: SHOULD WE CALL SerialMarkHardwareBroken()? SEE LATER...
    }
    
    // The hardware is hopefully empty. Delay 10 chars before dropping DTR.
    
    tenCharDelay.QuadPart = charTime.QuadPart * 10;	
    KeDelayExecutionThread(KernelMode,TRUE,&tenCharDelay);
#ifdef POLL
    CyzClrDTR(extension);
#else
    KeSynchronizeExecution(extension->Interrupt,CyzClrDTR,extension);
#endif

    // We have to be very careful how we clear the RTS line.
    // Transmit toggling might have been on at some point.
    //
    // We know that there is nothing left that could start
    // out the "polling"  execution path.  We need to
    // check the counter that indicates that the execution
    // path is active.  If it is then we loop delaying one
    // character time.  After each delay we check to see if
    // the counter has gone to zero.  When it has we know that
    // the execution path should be just about finished.  We
    // make sure that we still aren't in the routine that
    // synchronized execution with the ISR by synchronizing
    // ourselve with the ISR.

    if (extension->CountOfTryingToLowerRTS) {
        do {
            KeDelayExecutionThread(KernelMode,FALSE,&charTime);
        } while (extension->CountOfTryingToLowerRTS);

        #ifdef POLL
        KeAcquireSpinLock(&extension->PollLock,&pollIrql);
        CyzNullSynch(NULL);
        KeReleaseSpinLock(&extension->PollLock,pollIrql);
        #else
        KeSynchronizeExecution(extension->Interrupt,CyzNullSynch,NULL);
        #endif
    }

#ifdef POLL
    KeAcquireSpinLock(&extension->PollLock,&pollIrql);
    CyzClrRTS(extension);
    KeReleaseSpinLock(&extension->PollLock,pollIrql);
#else
    KeSynchronizeExecution(extension->Interrupt,CyzClrRTS,extension);
#endif

#ifdef POLL
    KeAcquireSpinLock(&extension->PollLock,&pollIrql);
    CyzDisableHw(extension);
    KeReleaseSpinLock(&extension->PollLock,pollIrql);
    CyzTryToDisableTimer(extension);
#else
    KeSynchronizeExecution(extension->Interrupt,CyzDisableHw,extension);
#endif

    // Clean out the holding reasons (since we are closed).
    
    extension->RXHolding = 0;
    extension->TXHolding = 0;

    //
    // Mark device as not busy for WMI
    //

    extension->WmiCommData.IsBusy = FALSE;

    // Release the buffers.
    
    extension->BufferSize = 0;
    if (extension->InterruptReadBuffer != NULL) { // added in DDK build 2072
       ExFreePool(extension->InterruptReadBuffer);
    }
    extension->InterruptReadBuffer = NULL;

    //
    // Stop waiting for wakeup
    //

    extension->SendWaitWake = FALSE;

    if (extension->PendingWakeIrp != NULL) {
       IoCancelIrp(extension->PendingWakeIrp);
    }

    //
    // Power down our device stack
    //

    (void)CyzGotoPowerState(DeviceObject, extension, PowerDeviceD3);
    
    Irp->IoStatus.Status = STATUS_SUCCESS;
    Irp->IoStatus.Information=0L;

    CyzCompleteRequest(extension, Irp, IO_NO_INCREMENT);

    //
    // Unlock the pages.  If this is the last reference to the section
    // then the driver code will be flushed out.
    //

    //
    // First, we have to let the DPC's drain.  No more should be queued
    // since we aren't taking interrupts now....
    //

    pendingDPCs = InterlockedDecrement(&extension->DpcCount);
    LOGENTRY(LOG_CNT, 'DpD7', 0, extension->DpcCount, 0);   // Added in build 2128

    if (pendingDPCs) {
       CyzDbgPrintEx(CYZDIAG1,"Draining DPC's: %x\n", Irp);
       KeWaitForSingleObject(&extension->PendingDpcEvent, Executive,
                             KernelMode, FALSE, NULL);
    }


    CyzDbgPrintEx(CYZDIAG1, "DPC's drained: %x\n", Irp);



    //
    // Pages must be locked to release the mutex, so don't unlock
    // them until after we release the mutex
    //

    ExReleaseFastMutex(&extension->CloseMutex);

    //
    // Reset for next open
    //

    InterlockedIncrement(&extension->DpcCount);
    LOGENTRY(LOG_CNT, 'DpI6', 0, extension->DpcCount, 0);   // Added in build 2128

    openCount = InterlockedDecrement(&extension->OpenCount);

    //
    // Open count may be non-zero if someone was trying to open
    // at the same time we decremented
    //

    // ASSERT(openCount == 0);

    CyzUnlockPagableImageSection(CyzGlobals.PAGESER_Handle);

    return STATUS_SUCCESS;
}

BOOLEAN
CyzMarkOpen(
    IN PVOID Context
    )
/*------------------------------------------------------------------------
    CyzMarkOpen()
    
    Routine Description: This routine mark the fact that somebody opened
    the device and its worthwhile to pay attention to interrupts.

    Arguments:

    Context - Really a pointer to the device extension.

    Return Value: This routine always returns FALSE.
------------------------------------------------------------------------*/
{
    PCYZ_DEVICE_EXTENSION extension = Context;

    CyzReset(extension);

    extension->DeviceIsOpened = TRUE;
    extension->ErrorWord = 0;

    return FALSE;
}

BOOLEAN
CyzDisableHw(IN PVOID Context)

/*++

Routine Description:

    This routine disables the UART and puts it in a "safe" state when
    not in use (like a close or powerdown).

Arguments:

    Context - Really a pointer to the device extension.

Return Value:

    This routine always returns FALSE.

--*/

{
    PCYZ_DEVICE_EXTENSION extension = Context;
    ULONG channel;
    struct CH_CTRL *ch_ctrl;

    ch_ctrl = extension->ChCtrl;

    CYZ_WRITE_ULONG(&ch_ctrl->op_mode,C_CH_DISABLE);
    CyzIssueCmd(extension,C_CM_IOCTL,0L,FALSE);

    CyzIssueCmd(extension,C_CM_RESET,0L,FALSE);

    return FALSE;
}
#ifdef POLL

BOOLEAN
CyzTryToDisableTimer(IN PVOID Context)

/*++

Routine Description:

    This routine disables the timer if all other ports in the board are already closed
    or powered down.

Arguments:

    Context - Really a pointer to the device extension.

Return Value:

    This routine always returns FALSE.

--*/

{
    PCYZ_DEVICE_EXTENSION extension = Context;
    ULONG channel;
    PCYZ_DISPATCH pDispatch;
    KIRQL oldIrql;

    pDispatch = extension->OurIsrContext;

    KeAcquireSpinLock(&pDispatch->PollingLock,&oldIrql);
    
    pDispatch->Extensions[extension->PortIndex] = NULL;

    for (channel=0; channel<pDispatch->NChannels; channel++) {
        if (pDispatch->Extensions[channel])
            break;
    }

    if (channel == pDispatch->NChannels) {

        BOOLEAN cancelled;

        pDispatch->PollingStarted = FALSE;
        cancelled = KeCancelTimer(&pDispatch->PollingTimer);
        if (cancelled) {
            pDispatch->PollingDrained = TRUE;
        }
        KeRemoveQueueDpc(&pDispatch->PollingDpc);
    }
    KeReleaseSpinLock(&pDispatch->PollingLock,oldIrql);
    
    return FALSE;
}
#endif

BOOLEAN
CyzMarkClose(
    IN PVOID Context
    )
/*------------------------------------------------------------------------
    CyzMarkClose()
    
    Routine Description: This routine merely sets a boolean to false to
    mark the fact that somebody closed the device and it's no longer
    worthwhile to pay attention to interrupts.

    Arguments:

    Context - Really a pointer to the device extension.

    Return Value: This routine always returns FALSE.
------------------------------------------------------------------------*/
{
    PCYZ_DEVICE_EXTENSION extension = Context;
    struct CH_CTRL *ch_ctrl;

    ch_ctrl = extension->ChCtrl;
    CYZ_WRITE_ULONG(&ch_ctrl->intr_enable,C_IN_DISABLE);
    CyzIssueCmd(extension,C_CM_IOCTL,0L,FALSE);
    
    extension->DeviceIsOpened = FALSE;
    return FALSE;
}

NTSTATUS
CyzCleanup(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    )
/*------------------------------------------------------------------------
    CyzCleanup()

    Routine Description: This function is used to kill all longstanding
    IO operations.

    Arguments:

    DeviceObject - Pointer to the device object for this device
    Irp - Pointer to the IRP for the current request

    Return Value: The function value is the final status of the call
------------------------------------------------------------------------*/
{
    PCYZ_DEVICE_EXTENSION extension = DeviceObject->DeviceExtension;
    NTSTATUS status;


    PAGED_CODE();

    //
    // We succeed a cleanup on a removing device
    //

    if ((status = CyzIRPPrologue(Irp, extension)) != STATUS_SUCCESS) {
       if (status == STATUS_DELETE_PENDING) {
          status = Irp->IoStatus.Status = STATUS_SUCCESS;
       }
       if (status != STATUS_PENDING) {
         CyzCompleteRequest(extension, Irp, IO_NO_INCREMENT);
       }
       return status;
    }

    CyzDbgPrintEx(CYZIRPPATH, "Dispatch entry for: %x\n", Irp);

    CyzKillPendingIrps(DeviceObject);
    
    Irp->IoStatus.Status = STATUS_SUCCESS;
    Irp->IoStatus.Information=0L;

    CyzCompleteRequest(extension, Irp, IO_NO_INCREMENT);

    return STATUS_SUCCESS;
}

LARGE_INTEGER
CyzGetCharTime(
    IN PCYZ_DEVICE_EXTENSION Extension
    )
/*------------------------------------------------------------------------
    CyzGetCharTime()
    
    Routine Description: return the number of 100 nanosecond intervals
    there are in one character time.

    Arguments:

    Extension - Just what it says.

    Return Value: 100 nanosecond intervals in a character time.
------------------------------------------------------------------------*/
{
    ULONG dataSize;
    ULONG paritySize;
    ULONG stopSize;
    ULONG charTime;
    ULONG bitTime;
    LARGE_INTEGER tmp;

    if ((Extension->CommDataLen & C_DL_CS) == C_DL_CS5) {
      dataSize = 5;
    } else if ((Extension->CommDataLen & C_DL_CS) == C_DL_CS6) {
      dataSize = 6;
    } else if ((Extension->CommDataLen & C_DL_CS) == C_DL_CS7) {
      dataSize = 7;
    } else {
      dataSize = 8;
    }

    paritySize = 1;
    if ((Extension->CommParity & C_PR_PARITY) == C_PR_NONE) {
       paritySize = 0;
    }

    if ((Extension->CommDataLen & C_DL_STOP) == C_DL_1STOP) {

        stopSize = 1;

    } else {

        stopSize = 2;

    }

    //
    // First we calculate the number of 100 nanosecond intervals
    // are in a single bit time (Approximately).
    //

    bitTime = (10000000+(Extension->CurrentBaud-1))/Extension->CurrentBaud;
    charTime = bitTime + ((dataSize+paritySize+stopSize)*bitTime);

    tmp.QuadPart = charTime;
    return tmp;
}



=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyzport\cyzlogc.c ===
/*--------------------------------------------------------------------------
*
*   Copyright (C) Cyclades Corporation, 1997-2001.
*   All rights reserved.
*
*   Cyclades-Z Port Driver
*	
*   This file:      cyzlogc.c
*
*   Description:    This module contains the code related to message logging.
*
*   Notes:          This code supports Windows 2000 and Windows XP,
*                   x86 and IA64 processors.
*
*   Complies with Cyclades SW Coding Standard rev 1.3.
*
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*   Change History
*
*--------------------------------------------------------------------------
*
*
*--------------------------------------------------------------------------
*/


#include "ntddk.h"
#include "precomp.h"

#ifdef ALLOC_PRAGMA
#pragma alloc_text(INIT,CyzILog)
#pragma alloc_text(INIT,CyzILogParam)
#pragma alloc_text(PAGESER,CyzLog)
#pragma alloc_text(PAGESER,CyzLogData)
#endif

VOID
CyzLog(
    IN PDRIVER_OBJECT DriverObject,
    NTSTATUS msgId
)
/*--------------------------------------------------------------------------
	CyzLog()

	Description: Log an event (numerical value and string).
	
	Arguments: DriverObject and message id.
	
	Return Value: none
--------------------------------------------------------------------------*/
{
    PIO_ERROR_LOG_PACKET pLog;
    
    pLog = IoAllocateErrorLogEntry (DriverObject,
                    (UCHAR) (sizeof (IO_ERROR_LOG_PACKET)) + 0x20);
    
    if(pLog) {
	pLog->MajorFunctionCode = 0;
	pLog->RetryCount = 0;
	pLog->DumpDataSize = 0;
	pLog->NumberOfStrings = 0;
	pLog->StringOffset = 0;
	pLog->EventCategory = 0;
	pLog->ErrorCode = msgId;
	pLog->UniqueErrorValue = 0;
	pLog->FinalStatus = STATUS_SUCCESS;
	pLog->SequenceNumber = 0;
	pLog->IoControlCode = 0;
	//pLog->DumpData[0] = 0x00000000L;
	//pLog->DumpData[1] = 0x00000001L;
	//pLog->DumpData[2] = 0x00000002L;
	//pLog->DumpData[3] = 0x00000003L;
	//pLog->DumpData[4] = 0x00000004L;
    IoWriteErrorLogEntry(pLog);
    }
    
}

VOID
CyzLogData(
    IN PDRIVER_OBJECT DriverObject,
    NTSTATUS msgId,
	ULONG dump1,
	ULONG dump2
)
/*--------------------------------------------------------------------------
	CyzLogData()

	Description: Log an event (numerical value and string).
	
	Arguments: DriverObject, message id and parameter.
	
	Return Value: none
--------------------------------------------------------------------------*/
{

#define NUMBER_DUMP_DATA_ENTRIES	3	// 1 signature + 2 variables

    PIO_ERROR_LOG_PACKET pLog;
	WCHAR stringBuffer[10];
	NTSTATUS nt_status;	

    pLog = IoAllocateErrorLogEntry (DriverObject,
					(UCHAR) 
					(sizeof (IO_ERROR_LOG_PACKET) 
					+ (NUMBER_DUMP_DATA_ENTRIES -1) * sizeof (ULONG)) );

    if(pLog) {
	pLog->MajorFunctionCode = 0;
	pLog->RetryCount = 0;
	pLog->DumpDataSize = NUMBER_DUMP_DATA_ENTRIES * sizeof (ULONG);
	pLog->NumberOfStrings = 0;
	pLog->StringOffset = 0;
	pLog->EventCategory = 0;
	pLog->ErrorCode = msgId;
	pLog->UniqueErrorValue = 0;
	pLog->FinalStatus = STATUS_SUCCESS;
	pLog->SequenceNumber = 0;
	pLog->IoControlCode = 0;
	pLog->DumpData[0] = 0x3e2d2d2dL; // It will log "---->"
	pLog->DumpData[1] = dump1;
	pLog->DumpData[2] = dump2;
		
    IoWriteErrorLogEntry(pLog);
    }

}

VOID
CyzILog(
    IN PDRIVER_OBJECT DriverObject,
    NTSTATUS msgId
)
/*--------------------------------------------------------------------------
	CyzILog()

	Description: Log an event (numerical value and string).
	
	Arguments: DriverObject and message id.
	
	Return Value: none
--------------------------------------------------------------------------*/
{
    PIO_ERROR_LOG_PACKET pLog;
    
    pLog = IoAllocateErrorLogEntry (DriverObject,
                    (UCHAR) (sizeof (IO_ERROR_LOG_PACKET)) + 0x20);
    
    if(pLog) {
	pLog->MajorFunctionCode = 0;
	pLog->RetryCount = 0;
	pLog->DumpDataSize = 0; 
	pLog->NumberOfStrings = 0;
	pLog->StringOffset = 0;
	pLog->EventCategory = 0;
	pLog->ErrorCode = msgId;
	pLog->UniqueErrorValue = 0;
	pLog->FinalStatus = STATUS_SUCCESS;
	pLog->SequenceNumber = 0;
	pLog->IoControlCode = 0;
	//pLog->DumpData[0] = 0x00000000L;
	//pLog->DumpData[1] = 0x00000001L;
	//pLog->DumpData[2] = 0x00000002L;
	//pLog->DumpData[3] = 0x00000003L;
	//pLog->DumpData[4] = 0x00000004L;

	IoWriteErrorLogEntry(pLog);	
    }
}


VOID
CyzILogParam(
    IN PDRIVER_OBJECT DriverObject,
    NTSTATUS msgId,
	ULONG dumpParameter,
	ULONG base
)
/*--------------------------------------------------------------------------
	CyzILogParam()

	Description: Log an event (numerical value and string).
	
	Arguments: DriverObject, message id and parameter.
	
	Return Value: none
--------------------------------------------------------------------------*/
{

#define DUMP_ENTRIES	2	// 1 signature + 1 variable

    PWCHAR insertionString ;
    PIO_ERROR_LOG_PACKET pLog;
	UNICODE_STRING uniErrorString;
	WCHAR stringBuffer[10];
	NTSTATUS nt_status;

	uniErrorString.Length = 0;
	uniErrorString.MaximumLength = 20;
	uniErrorString.Buffer = stringBuffer;
	nt_status = RtlIntegerToUnicodeString(dumpParameter,base,&uniErrorString);
    
    pLog = IoAllocateErrorLogEntry (DriverObject,
					(UCHAR) 
					(sizeof (IO_ERROR_LOG_PACKET) 
					+ (DUMP_ENTRIES -1) * sizeof (ULONG)
					+ uniErrorString.Length + sizeof(WCHAR)));

    if(pLog) {
	pLog->MajorFunctionCode = 0;
	pLog->RetryCount = 0;
	pLog->DumpDataSize = DUMP_ENTRIES * sizeof (ULONG);
	pLog->NumberOfStrings = 1;
	pLog->StringOffset = sizeof(IO_ERROR_LOG_PACKET)
						 + (DUMP_ENTRIES - 1) * sizeof (ULONG);
	pLog->EventCategory = 0;
	pLog->ErrorCode = msgId;
	pLog->UniqueErrorValue = 0;
	pLog->FinalStatus = STATUS_SUCCESS;
	pLog->SequenceNumber = 0;
	pLog->IoControlCode = 0;
	pLog->DumpData[0] = 0x55555555L;
	pLog->DumpData[1] = dumpParameter;
	
	insertionString = (PWSTR)
					((PCHAR)(pLog) + pLog->StringOffset) ;
	RtlMoveMemory (insertionString, uniErrorString.Buffer, 
					uniErrorString.Length) ;
	*(PWSTR)((PCHAR)insertionString + uniErrorString.Length) = L'\0' ;

	IoWriteErrorLogEntry(pLog);
    }
    
}


=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyzport\cyzpnp.c ===
/*--------------------------------------------------------------------------
*
*   Copyright (C) Cyclades Corporation, 2000-2001.
*   All rights reserved.
*
*   Cyclades-Z Port Driver
*	
*   This file:      cyzpnp.c
*
*   Description:    This module contains the code that handles the 
*                   plug and play IRPs for the Cyclades-Z Port driver.
*
*   Notes:          This code supports Windows 2000 and Windows XP,
*                   x86 and IA64 processors.
*
*   Complies with Cyclades SW Coding Standard rev 1.3.
*
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*   Change History
*
*--------------------------------------------------------------------------
*   Initial implementation based on Microsoft sample code.
*
*--------------------------------------------------------------------------
*/

#include "precomp.h"

#define ALLF    0xffffffff

static const PHYSICAL_ADDRESS CyzPhysicalZero = {0};



#ifdef ALLOC_PRAGMA
#pragma alloc_text(PAGESRP0, CyzCreateDevObj)
#pragma alloc_text(PAGESRP0, CyzAddDevice)
#pragma alloc_text(PAGESRP0, CyzPnpDispatch)
#pragma alloc_text(PAGESRP0, CyzStartDevice)
// REMOVED FANNY #pragma alloc_text(PAGESRP0, CyzFinishStartDevice)
// REMOVED FANNY #pragma alloc_text(PAGESRP0, CyzGetPortInfo)
#pragma alloc_text(PAGESRP0, CyzDoExternalNaming)
#pragma alloc_text(PAGESRP0, CyzReportMaxBaudRate)
// REMOVED FANNY. NOT CALLED.#pragma alloc_text(PAGESRP0, CyzControllerCallBack)
// REMOVED FANNY #pragma alloc_text(PAGESRP0, CyzItemCallBack)
#pragma alloc_text(PAGESRP0, CyzUndoExternalNaming)
#endif // ALLOC_PRAGMA

//
// Instantiate the GUID
//

#if !defined(FAR)
#define FAR
#endif // !defined(FAR)

#include <initguid.h>

DEFINE_GUID(GUID_CLASS_COMPORT, 0x86e0d1e0L, 0x8089, 0x11d0, 0x9c, 0xe4, 0x08,
            0x00, 0x3e, 0x30, 0x1f, 0x73);


#if DBG

UCHAR *CyzSystemCapString[] = {
   "PowerSystemUnspecified",
   "PowerSystemWorking",
   "PowerSystemSleeping1",
   "PowerSystemSleeping2",
   "PowerSystemSleeping3",
   "PowerSystemHibernate",
   "PowerSystemShutdown",
   "PowerSystemMaximum"
};

UCHAR *CyzDeviceCapString[] = {
   "PowerDeviceUnspecified",
   "PowerDeviceD0",
   "PowerDeviceD1",
   "PowerDeviceD2",
   "PowerDeviceD3",
   "PowerDeviceMaximum"
};

#endif // DBG


NTSTATUS
CyzSyncCompletion(IN PDEVICE_OBJECT DeviceObject, IN PIRP Irp,
                  IN PKEVENT CyzSyncEvent)
{
   KeSetEvent(CyzSyncEvent, IO_NO_INCREMENT, FALSE);
   return STATUS_MORE_PROCESSING_REQUIRED;
}

ULONG 
CyzCompareString(PWCHAR PString1, PWCHAR PString2, ULONG Count)
{
    do {
        if (*PString1 || *PString2) {
            if (*PString1 != *PString2) {
                break;
            }
            PString1++;
            PString2++;
            Count--;
        } else {
            break;
        }
    } while (Count);
    return (Count);
}


NTSTATUS
CyzCreateDevObj(IN PDRIVER_OBJECT DriverObject,
                IN PDEVICE_OBJECT PPdo,
                OUT PDEVICE_OBJECT *NewDeviceObject)

/*++

Routine Description:

    This routine will create and initialize a functional device object to
    be attached to a Cyclades-Z controller PDO.

Arguments:

    DriverObject - a pointer to the driver object this is created under
    NewDeviceObject - a location to store the pointer to the new device object

Return Value:

    STATUS_SUCCESS if everything was successful
    reason for failure otherwise

--*/

{
   UNICODE_STRING deviceObjName;
   PDEVICE_OBJECT deviceObject = NULL;
   PCYZ_DEVICE_EXTENSION pDevExt;
   NTSTATUS status = STATUS_SUCCESS;
   static ULONG currentInstance = 0;
   UNICODE_STRING instanceStr;
   WCHAR instanceNumberBuffer[20];
   ULONG busNumber = 0xFFFFFFFF;
   ULONG resultLength;
   WCHAR hwID[100];
   PWCHAR portNumberPtr;
   INTERFACE_TYPE interfaceType;
   ULONG numberToAppend;


   PAGED_CODE();

   CyzDbgPrintEx(CYZTRACECALLS, "Enter CyzCreateDevObj\n");

   // Get PCI slot number and port number to generate device name.

   status = IoGetDeviceProperty (PPdo,
                                 DevicePropertyBusNumber,
                                 sizeof(busNumber),
                                 &busNumber,
                                 &resultLength);

   if (!NT_SUCCESS (status)) {
      busNumber = 0xFFFFFFFF; // Just to make sure set it again
      //CyzLogError( DriverObject,NULL,CyzPhysicalZero,CyzPhysicalZero,0,0,0,0,
      //             status,CYZ_UNABLE_TO_GET_BUS_NUMBER,0,NULL,0,NULL);

      CyzDbgPrintEx(CYZERRORS,"CyzCreateDevObj: IoGetDeviceProperty BusNumber "
                    "failed (%x)\n",status);

      goto NoBusNumber;
   }

   status = IoGetDeviceProperty (PPdo,
                                 DevicePropertyHardwareID,
                                 sizeof(hwID),
                                 hwID,
                                 &resultLength);

   if (!NT_SUCCESS (status)) {
      CyzLogError( DriverObject,NULL,CyzPhysicalZero,CyzPhysicalZero,0,0,0,0,
                   status,CYZ_UNABLE_TO_GET_HW_ID,0,NULL,0,NULL);

      CyzDbgPrintEx(CYZERRORS,"CyzCreateDevObj: IoGetDeviceProperty HardwareID "
                    "failed (%x)\n",status);

      return status;
   }

   if (CyzCompareString(hwID,CYZPORT_PNP_ID_WSTR,sizeof(CYZPORT_PNP_ID_WSTR)/sizeof(WCHAR)-1)!=0) {

      CyzLogError( DriverObject,NULL,CyzPhysicalZero,CyzPhysicalZero,0,0,0,0,
                   status,CYZ_BAD_HW_ID,0,NULL,0,NULL);

      CyzDbgPrintEx(CYZERRORS,"CyzCreateDevObj: Bad HardwareID: %ws\n",hwID);
         
      return STATUS_UNSUCCESSFUL;
   }

   portNumberPtr = hwID+sizeof(CYZPORT_PNP_ID_WSTR)/sizeof(WCHAR)-1;

NoBusNumber:;


   //
   // Zero out allocated memory pointers so we know if they must be freed
   //

   RtlZeroMemory(&deviceObjName, sizeof(UNICODE_STRING));

   deviceObjName.MaximumLength = DEVICE_OBJECT_NAME_LENGTH * sizeof(WCHAR);
   deviceObjName.Buffer = ExAllocatePool(PagedPool, deviceObjName.MaximumLength
                                     + sizeof(WCHAR));

//********************************************
// Error Injection
//  if (deviceObjName.Buffer != NULL) {
//      ExFreePool(deviceObjName.Buffer);
//   }
//   deviceObjName.Buffer = NULL;
//********************************************
   if (deviceObjName.Buffer == NULL) {
      CyzLogError(DriverObject, NULL, CyzPhysicalZero, CyzPhysicalZero,
                     0, 0, 0, 11, STATUS_SUCCESS, CYZ_INSUFFICIENT_RESOURCES,
                     0, NULL, 0, NULL);
      CyzDbgPrintEx(CYZERRORS,
                    "Couldn't allocate memory for device name\n");

      return STATUS_INSUFFICIENT_RESOURCES; //STATUS_SUCCESS replaced in build 2128

   }

   RtlZeroMemory(deviceObjName.Buffer, deviceObjName.MaximumLength
                 + sizeof(WCHAR));

   RtlAppendUnicodeToString(&deviceObjName, L"\\Device\\");

   if (busNumber == 0xFFFFFFFF) {
      numberToAppend = currentInstance++;
   } else {
      numberToAppend = busNumber;
   }

   RtlInitUnicodeString(&instanceStr, NULL);
   instanceStr.MaximumLength = sizeof(instanceNumberBuffer);
   instanceStr.Buffer = instanceNumberBuffer;
   RtlIntegerToUnicodeString(numberToAppend, 10, &instanceStr);

   if (busNumber == 0xFFFFFFFF) {
      // The device name is something like \Device\Cyzport1
      RtlAppendUnicodeToString(&deviceObjName, L"CyzPort");
      RtlAppendUnicodeStringToString(&deviceObjName, &instanceStr);
   } else {
      // The device name is something like \Device\Pci5Cyzport1
      RtlAppendUnicodeToString(&deviceObjName, L"Pci");
      RtlAppendUnicodeStringToString(&deviceObjName, &instanceStr);
      RtlAppendUnicodeToString(&deviceObjName, L"CyzPort");
      RtlAppendUnicodeToString(&deviceObjName,portNumberPtr);
   }


   //
   // Create the device object
   //

   status = IoCreateDevice(DriverObject, sizeof(CYZ_DEVICE_EXTENSION),
                           &deviceObjName, FILE_DEVICE_SERIAL_PORT, 
                           FILE_DEVICE_SECURE_OPEN, TRUE, &deviceObject);


   if (!NT_SUCCESS(status)) {
      CyzLogError(DriverObject, NULL, CyzPhysicalZero, CyzPhysicalZero,
                     0, 0, 0, 0, STATUS_SUCCESS, CYZ_DEVICE_CREATION_FAILURE,
                     0, NULL, 0, NULL);
      CyzDbgPrintEx(CYZERRORS, "CyzAddDevice: Create device failed - %x "
                    "\n", status);
      goto CyzCreateDevObjError;
   }

   ASSERT(deviceObject != NULL);


   //
   // The device object has a pointer to an area of non-paged
   // pool allocated for this device.  This will be the device
   // extension. Zero it out.
   //

   pDevExt = deviceObject->DeviceExtension;
   RtlZeroMemory(pDevExt, sizeof(CYZ_DEVICE_EXTENSION));

   //
   // Initialize the count of IRP's pending
   //

   pDevExt->PendingIRPCnt = 1;


   //
   // Initialize the count of DPC's pending
   //

   pDevExt->DpcCount = 1;

   //
   // Allocate Pool and save the nt device name in the device extension.
   //

   pDevExt->DeviceName.Buffer =
      ExAllocatePool(PagedPool, deviceObjName.Length + sizeof(WCHAR));

//******************************************
// Error Injection
//   if (pDevExt->DeviceName.Buffer != NULL) {
//         ExFreePool(pDevExt->DeviceName.Buffer);
//   }
//   pDevExt->DeviceName.Buffer = NULL;
//******************************************
   if (!pDevExt->DeviceName.Buffer) {

      CyzLogError(
                    DriverObject,
                    NULL,
                    CyzPhysicalZero,
                    CyzPhysicalZero,
                    0,
                    0,
                    0,
                    12,
                    STATUS_SUCCESS,
                    CYZ_INSUFFICIENT_RESOURCES,
                    0,
                    NULL,
                    0,
                    NULL
                    );
      CyzDbgPrintEx(CYZERRORS, "Couldn't allocate memory for DeviceName\n");

      status = STATUS_INSUFFICIENT_RESOURCES;
      goto CyzCreateDevObjError;
   }

   pDevExt->DeviceName.MaximumLength = deviceObjName.Length
      + sizeof(WCHAR);

   //
   // Zero fill it.
   //

   RtlZeroMemory(pDevExt->DeviceName.Buffer,
                 pDevExt->DeviceName.MaximumLength);

   RtlAppendUnicodeStringToString(&pDevExt->DeviceName, &deviceObjName);

   pDevExt->NtNameForPort.Buffer = ExAllocatePool(PagedPool,
                                                  deviceObjName.MaximumLength);

   if (pDevExt->NtNameForPort.Buffer == NULL) {
      CyzLogError(
                    DriverObject,
                    NULL,
                    CyzPhysicalZero,
                    CyzPhysicalZero,
                    0,
                    0,
                    0,
                    13,
                    STATUS_SUCCESS,
                    CYZ_INSUFFICIENT_RESOURCES,
                    0,
                    NULL,
                    0,
                    NULL
                    );
      CyzDbgPrintEx(CYZERRORS, "CyzAddDevice: Cannot allocate memory for "
                    "NtName\n");
      status = STATUS_INSUFFICIENT_RESOURCES;
      goto CyzCreateDevObjError;
   }

   pDevExt->NtNameForPort.MaximumLength = deviceObjName.MaximumLength;
   RtlAppendUnicodeStringToString(&pDevExt->NtNameForPort,
                                  &deviceObjName);



   //
   // Set up the device extension.
   //

   pDevExt->DeviceIsOpened = FALSE;
   pDevExt->DeviceObject   = deviceObject;
   pDevExt->DriverObject   = DriverObject;
   pDevExt->PowerState     = PowerDeviceD0;

   //TODO FANNY: ADD TxFifoAmount?
   //pDevExt->TxFifoAmount           = driverDefaults.TxFIFODefault;
   //pDevExt->CreatedSymbolicLink    = TRUE;   Removed by Fanny
   pDevExt->OwnsPowerPolicy = TRUE;
   pDevExt->PciSlot = busNumber;

//TODO FANNY: SEE LATER IF WE NEED THE LISTS TO HANDLE INTERRUPT
//   InitializeListHead(&pDevExt->CommonInterruptObject);
//   InitializeListHead(&pDevExt->TopLevelSharers);
//   InitializeListHead(&pDevExt->MultiportSiblings);
   InitializeListHead(&pDevExt->AllDevObjs);
   InitializeListHead(&pDevExt->ReadQueue);
   InitializeListHead(&pDevExt->WriteQueue);
   InitializeListHead(&pDevExt->MaskQueue);
   InitializeListHead(&pDevExt->PurgeQueue);
   InitializeListHead(&pDevExt->StalledIrpQueue);

   ExInitializeFastMutex(&pDevExt->OpenMutex);
   ExInitializeFastMutex(&pDevExt->CloseMutex);

   //
   // Initialize the spinlock associated with fields read (& set)
   // by IO Control functions and the flags spinlock.
   //

   KeInitializeSpinLock(&pDevExt->ControlLock);
   KeInitializeSpinLock(&pDevExt->FlagsLock);
#ifdef POLL
   KeInitializeSpinLock(&pDevExt->PollLock);    // Added to fix Modem Share test 53 freeze
#endif

   KeInitializeEvent(&pDevExt->PendingIRPEvent, SynchronizationEvent, FALSE);
   KeInitializeEvent(&pDevExt->PendingDpcEvent, SynchronizationEvent, FALSE);
   KeInitializeEvent(&pDevExt->PowerD0Event, SynchronizationEvent, FALSE);


   deviceObject->Flags &= ~DO_DEVICE_INITIALIZING;

   *NewDeviceObject = deviceObject;

   ExFreePool(deviceObjName.Buffer);

   CyzDbgPrintEx(CYZTRACECALLS, "Leave CyzCreateDevObj\n");
   return STATUS_SUCCESS;


   CyzCreateDevObjError:

   CyzDbgPrintEx(CYZERRORS, "CyzCreateDevObj Error, Cleaning up\n");

   //
   // Free the allocated strings for the NT and symbolic names if they exist.
   //

   if (deviceObjName.Buffer != NULL) {
      ExFreePool(deviceObjName.Buffer);
   }

   if (deviceObject) {

      if (pDevExt->NtNameForPort.Buffer != NULL) {
         ExFreePool(pDevExt->NtNameForPort.Buffer);
      }

      if (pDevExt->DeviceName.Buffer != NULL) {
         ExFreePool(pDevExt->DeviceName.Buffer);
      }

      IoDeleteDevice(deviceObject);
   }

   *NewDeviceObject = NULL;

   CyzDbgPrintEx(CYZTRACECALLS, "Leave CyzCreateDevObj\n");
   return status;
}


NTSTATUS
CyzAddDevice(IN PDRIVER_OBJECT DriverObject, IN PDEVICE_OBJECT PPdo)

/*++

Routine Description:

    This routine creates a functional device object for com ports in the
    system and attaches them to the physical device objects for the ports


Arguments:

    DriverObject - a pointer to the object for this driver

    PPdo - a pointer to the PDO in the stack we need to attach to

Return Value:

    status from device creation and initialization

--*/

{
   PDEVICE_OBJECT pNewDevObj = NULL;
   PDEVICE_OBJECT pLowerDevObj = NULL;
   NTSTATUS status;
   PCYZ_DEVICE_EXTENSION pDevExt;

   PAGED_CODE();

   CyzDbgPrintEx(CYZTRACECALLS, "Enter CyzAddDevice with PPdo 0x%x\n",
                 PPdo);

   if (PPdo == NULL) {
      //
      // Return no more devices
      //
      CyzLogError(DriverObject, NULL, CyzPhysicalZero, CyzPhysicalZero,
                     0, 0, 0, 0, STATUS_SUCCESS, CYZ_NO_PHYSICAL_DEVICE_OBJECT,
                     0, NULL, 0, NULL);
      CyzDbgPrintEx(CYZERRORS, "CyzAddDevice: Enumeration request, "
                    "returning NO_MORE_ENTRIES\n");

      return (STATUS_NO_MORE_ENTRIES);
   }

   //
   // create and initialize the new device object
   //

   status = CyzCreateDevObj(DriverObject, PPdo, &pNewDevObj);

   if (!NT_SUCCESS(status)) {

      CyzDbgPrintEx(CYZERRORS,
                    "CyzAddDevice - error creating new devobj [%#08lx]\n",
                    status);
      return status;
   }


   //
   // Layer our DO on top of the lower device object
   // The return value is a pointer to the device object to which the
   // DO is actually attached.
   //

   pLowerDevObj = IoAttachDeviceToDeviceStack(pNewDevObj, PPdo);


   //
   // No status. Do the best we can.
   //
   ASSERT(pLowerDevObj != NULL);


   pDevExt = pNewDevObj->DeviceExtension;
   pDevExt->LowerDeviceObject = pLowerDevObj;
   pDevExt->Pdo = PPdo;


   //
   // Specify that this driver only supports buffered IO.  This basically
   // means that the IO system copies the users data to and from
   // system supplied buffers.
   //
   // Also specify that we are power pagable.
   //

   pNewDevObj->Flags |= DO_BUFFERED_IO | DO_POWER_PAGABLE;

   CyzDbgPrintEx(CYZTRACECALLS, "Leave CyzAddDevice\n");

   return status;
}


NTSTATUS
CyzPnpDispatch(IN PDEVICE_OBJECT PDevObj, IN PIRP PIrp)

/*++

Routine Description:

    This is a dispatch routine for the IRPs that come to the driver with the
    IRP_MJ_PNP major code (plug-and-play IRPs).

Arguments:

    PDevObj - Pointer to the device object for this device

    PIrp - Pointer to the IRP for the current request

Return Value:

    The function value is the final status of the call


--*/

{
   PCYZ_DEVICE_EXTENSION pDevExt = PDevObj->DeviceExtension;
   PDEVICE_OBJECT pLowerDevObj = pDevExt->LowerDeviceObject;
   PIO_STACK_LOCATION pIrpStack = IoGetCurrentIrpStackLocation(PIrp);
   NTSTATUS status;
   PDEVICE_CAPABILITIES pDevCaps;

   PAGED_CODE();

   if ((status = CyzIRPPrologue(PIrp, pDevExt)) != STATUS_SUCCESS) {
      CyzCompleteRequest(pDevExt, PIrp, IO_NO_INCREMENT);
      return status;
   }

   switch (pIrpStack->MinorFunction) {
   case IRP_MN_QUERY_CAPABILITIES: {
      PKEVENT pQueryCapsEvent;
      SYSTEM_POWER_STATE cap;

      CyzDbgPrintEx(CYZPNPPOWER,
                    "Got IRP_MN_QUERY_DEVICE_CAPABILITIES IRP\n");

      pQueryCapsEvent = ExAllocatePool(NonPagedPool, sizeof(KEVENT));

      if (pQueryCapsEvent == NULL) {
         PIrp->IoStatus.Status = STATUS_INSUFFICIENT_RESOURCES;
         CyzCompleteRequest(pDevExt, PIrp, IO_NO_INCREMENT);
         return STATUS_INSUFFICIENT_RESOURCES;
      }

      KeInitializeEvent(pQueryCapsEvent, SynchronizationEvent, FALSE);

      IoCopyCurrentIrpStackLocationToNext(PIrp);
      IoSetCompletionRoutine(PIrp, CyzSyncCompletion, pQueryCapsEvent,
                             TRUE, TRUE, TRUE);

      status = IoCallDriver(pLowerDevObj, PIrp);


      //
      // Wait for lower drivers to be done with the Irp
      //

      if (status == STATUS_PENDING) {
         KeWaitForSingleObject(pQueryCapsEvent, Executive, KernelMode, FALSE,
                               NULL);
      }

      ExFreePool(pQueryCapsEvent);

      status = PIrp->IoStatus.Status;

      if (pIrpStack->Parameters.DeviceCapabilities.Capabilities == NULL) {
         goto errQueryCaps;
      }

      //
      // Save off their power capabilities
      //

      CyzDbgPrintEx(CYZPNPPOWER, "Mapping power capabilities\n");

      pIrpStack = IoGetCurrentIrpStackLocation(PIrp);

      pDevCaps = pIrpStack->Parameters.DeviceCapabilities.Capabilities;

      for (cap = PowerSystemSleeping1; cap < PowerSystemMaximum;
           cap++) {
#if DBG
         CyzDbgPrintEx(CYZPNPPOWER, "  %d: %s <--> %s\n",
                       cap, CyzSystemCapString[cap],
                       CyzDeviceCapString[pDevCaps->DeviceState[cap]]);
#endif
         pDevExt->DeviceStateMap[cap] = pDevCaps->DeviceState[cap];
      }

      pDevExt->DeviceStateMap[PowerSystemUnspecified]
         = PowerDeviceUnspecified;

      pDevExt->DeviceStateMap[PowerSystemWorking]
        = PowerDeviceD0;

      pDevExt->SystemWake = pDevCaps->SystemWake;
      pDevExt->DeviceWake = pDevCaps->DeviceWake;

      errQueryCaps:;

      CyzCompleteRequest(pDevExt, PIrp, IO_NO_INCREMENT);
      return status;
   }

   case IRP_MN_QUERY_DEVICE_RELATIONS:
      //
      // We just pass this down -- serenum enumerates our bus for us.
      //

      CyzDbgPrintEx(CYZPNPPOWER, "Got IRP_MN_QUERY_DEVICE_RELATIONS Irp\n");

      switch (pIrpStack->Parameters.QueryDeviceRelations.Type) {
      case BusRelations:
         CyzDbgPrintEx(CYZPNPPOWER, "------- BusRelations Query\n");
         break;

      case EjectionRelations:
         CyzDbgPrintEx(CYZPNPPOWER, "------- EjectionRelations Query\n");
         break;

      case PowerRelations:
         CyzDbgPrintEx(CYZPNPPOWER, "------- PowerRelations Query\n");
         break;

      case RemovalRelations:
         CyzDbgPrintEx(CYZPNPPOWER, "------- RemovalRelations Query\n");
         break;

      case TargetDeviceRelation:
         CyzDbgPrintEx(CYZPNPPOWER, "------- TargetDeviceRelation Query\n");
         break;

      default:
         CyzDbgPrintEx(CYZPNPPOWER, "------- Unknown Query\n");
         break;
      }

      IoSkipCurrentIrpStackLocation(PIrp);
      status = CyzIoCallDriver(pDevExt, pLowerDevObj, PIrp);
      return status;


   case IRP_MN_QUERY_INTERFACE:
      CyzDbgPrintEx(CYZPNPPOWER, "Got IRP_MN_QUERY_INTERFACE Irp\n");
      break;


   case IRP_MN_QUERY_RESOURCE_REQUIREMENTS:
      CyzDbgPrintEx(CYZPNPPOWER, "Got IRP_MN_QUERY_RESOURCE_REQUIREMENTS Irp"
                    "\n");
      break;


   case IRP_MN_START_DEVICE: {
      PVOID startLockPtr;

      CyzDbgPrintEx(CYZPNPPOWER, "Got IRP_MN_START_DEVICE Irp\n");

      //
      // CyzStartDevice will pass this Irp to the next driver,
      // and process it as completion so just complete it here.
      //

      CyzLockPagableSectionByHandle(CyzGlobals.PAGESER_Handle);

      //
      // We used to make sure the stack was powered up, but now it
      // is supposed to be done implicitly by start_device.
      // If that wasn't the case we would just make this call:
      //
      //status = CyzGotoPowerState(PDevObj, pDevExt, PowerDeviceD0);
      

      pDevExt->PowerState = PowerDeviceD0;

      status = CyzStartDevice(PDevObj, PIrp);

      (void)CyzGotoPowerState(PDevObj, pDevExt, PowerDeviceD3);
      
      CyzUnlockPagableImageSection(CyzGlobals.PAGESER_Handle);


      PIrp->IoStatus.Status = status;

      CyzCompleteRequest(pDevExt, PIrp, IO_NO_INCREMENT);
      return status;
   }


   case IRP_MN_READ_CONFIG:
      CyzDbgPrintEx(CYZPNPPOWER, "Got IRP_MN_READ_CONFIG Irp\n");
      break;


   case IRP_MN_WRITE_CONFIG:
      CyzDbgPrintEx(CYZPNPPOWER, "Got IRP_MN_WRITE_CONFIG Irp\n");
      break;


   case IRP_MN_EJECT:
      CyzDbgPrintEx(CYZPNPPOWER, "Got IRP_MN_EJECT Irp\n");
      break;


   case IRP_MN_SET_LOCK:
      CyzDbgPrintEx(CYZPNPPOWER, "Got IRP_MN_SET_LOCK Irp\n");
      break;


   case IRP_MN_QUERY_ID: {
         UNICODE_STRING pIdBuf;
         PWCHAR pPnpIdStr;
         ULONG pnpIdStrLen;
         ULONG portIndex = 0;
         HANDLE pnpKey;
         WCHAR WideString[MAX_DEVICE_ID_LEN];

         CyzDbgPrintEx(CYZPNPPOWER, "Got IRP_MN_QUERY_ID Irp\n");

         // change from build 1946 to 2000.
         if (pIrpStack->Parameters.QueryId.IdType != BusQueryHardwareIDs
             && pIrpStack->Parameters.QueryId.IdType != BusQueryCompatibleIDs) {
            IoSkipCurrentIrpStackLocation(PIrp);
            return CyzIoCallDriver(pDevExt, pLowerDevObj, PIrp);
         }

         if (pIrpStack->Parameters.QueryId.IdType == BusQueryCompatibleIDs) {
            PIrp->IoStatus.Status = STATUS_SUCCESS;
            IoSkipCurrentIrpStackLocation(PIrp);
            return CyzIoCallDriver(pDevExt, pLowerDevObj, PIrp);
         }

         status = IoOpenDeviceRegistryKey(pDevExt->Pdo, PLUGPLAY_REGKEY_DEVICE,
                                          STANDARD_RIGHTS_WRITE, &pnpKey);

         if (!NT_SUCCESS(status)) {
            PIrp->IoStatus.Status = status;

            CyzCompleteRequest(pDevExt, PIrp, IO_NO_INCREMENT);
            return status;

         }

         status = CyzGetRegistryKeyValue (pnpKey, L"PortIndex",
                                             sizeof(L"PortIndex"),
                                             &portIndex,
                                             sizeof (ULONG));

         ZwClose(pnpKey);

         if (!NT_SUCCESS(status)) {
            PIrp->IoStatus.Status = status;
            CyzCompleteRequest(pDevExt, PIrp, IO_NO_INCREMENT);
            return status;
         }

//         pPnpIdStr = isMulti ? SERIAL_PNP_MULTI_ID_STR : SERIAL_PNP_ID_STR;
//         pnpIdStrLen = isMulti ? sizeof(SERIAL_PNP_MULTI_ID_STR)
//            : sizeof(SERIAL_PNP_ID_STR);


         pnpIdStrLen = swprintf(WideString,L"%s%u",CYZPORT_PNP_ID_WSTR,portIndex+1);
         pnpIdStrLen = pnpIdStrLen * sizeof(WCHAR) + sizeof(UNICODE_NULL); 
         pPnpIdStr = WideString;

         if (PIrp->IoStatus.Information != 0) {
            ULONG curStrLen;
            ULONG allocLen = 0;
            PWSTR curStr = (PWSTR)PIrp->IoStatus.Information;

            //
            // We have to walk the strings to count the amount of space to
            // reallocate
            //

            while ((curStrLen = wcslen(curStr)) != 0) {
               allocLen += curStrLen * sizeof(WCHAR) + sizeof(UNICODE_NULL);
               curStr += curStrLen + 1;
            }

            allocLen += sizeof(UNICODE_NULL);

            pIdBuf.Buffer = ExAllocatePool(PagedPool, allocLen
                                           + pnpIdStrLen
                                           + sizeof(WCHAR));

            if (pIdBuf.Buffer == NULL) {
               //
               // Clean up after other drivers since we are
               // sending the irp back up.
               //

               ExFreePool((PWSTR)PIrp->IoStatus.Information);


               PIrp->IoStatus.Status = STATUS_INSUFFICIENT_RESOURCES;
               PIrp->IoStatus.Information = 0;
               CyzCompleteRequest(pDevExt, PIrp, IO_NO_INCREMENT);
               return STATUS_INSUFFICIENT_RESOURCES;
            }

            pIdBuf.MaximumLength = (USHORT)(allocLen + pnpIdStrLen);
            pIdBuf.Length = (USHORT)allocLen - sizeof(UNICODE_NULL);

            RtlZeroMemory(pIdBuf.Buffer, pIdBuf.MaximumLength + sizeof(WCHAR));
            RtlCopyMemory(pIdBuf.Buffer, (PWSTR)PIrp->IoStatus.Information,
                          allocLen);
            RtlAppendUnicodeToString(&pIdBuf, pPnpIdStr);

            //
            // Free what the previous driver allocated
            //

            ExFreePool((PWSTR)PIrp->IoStatus.Information);


         } else {

            CyzDbgPrintEx(CYZPNPPOWER, "ID is sole ID\n");

            pIdBuf.Buffer = ExAllocatePool(PagedPool, pnpIdStrLen
                                           + sizeof(WCHAR) * 2);

            if (pIdBuf.Buffer == NULL) {
               PIrp->IoStatus.Status = STATUS_INSUFFICIENT_RESOURCES;
               PIrp->IoStatus.Information = 0;
               CyzCompleteRequest(pDevExt, PIrp, IO_NO_INCREMENT);
               return STATUS_INSUFFICIENT_RESOURCES;
            }

            pIdBuf.MaximumLength  = (USHORT)pnpIdStrLen;
            pIdBuf.Length = 0;

            RtlZeroMemory(pIdBuf.Buffer, pIdBuf.MaximumLength + sizeof(WCHAR)
                          * 2);

            RtlAppendUnicodeToString(&pIdBuf, pPnpIdStr);
         }

         PIrp->IoStatus.Information = (ULONG_PTR)pIdBuf.Buffer;
         PIrp->IoStatus.Status = STATUS_SUCCESS;

         IoCopyCurrentIrpStackLocationToNext(PIrp);
         return CyzIoCallDriver(pDevExt, pLowerDevObj, PIrp);
      }

      case IRP_MN_FILTER_RESOURCE_REQUIREMENTS: {
         HANDLE pnpKey;
         PKEVENT pResFiltEvent;
         ULONG isMulti = 0;
         PIO_RESOURCE_REQUIREMENTS_LIST pReqList;
         PIO_RESOURCE_LIST pResList;
         PIO_RESOURCE_DESCRIPTOR pResDesc;
         ULONG i, j;
         ULONG reqCnt;
         ULONG gotRuntime;
         ULONG gotMemory;
         ULONG gotInt;
         ULONG listNum;

         CyzDbgPrintEx(CYZPNPPOWER, "Got "
                       "IRP_MN_FILTER_RESOURCE_REQUIREMENTS Irp\n");
         CyzDbgPrintEx(CYZPNPPOWER, "for device %x\n", pLowerDevObj);


         pResFiltEvent = ExAllocatePool(NonPagedPool, sizeof(KEVENT));

         if (pResFiltEvent == NULL) {
            PIrp->IoStatus.Status = STATUS_INSUFFICIENT_RESOURCES;
            CyzCompleteRequest(pDevExt, PIrp, IO_NO_INCREMENT);
            return STATUS_INSUFFICIENT_RESOURCES;
         }

         KeInitializeEvent(pResFiltEvent, SynchronizationEvent, FALSE);

         IoCopyCurrentIrpStackLocationToNext(PIrp);
         IoSetCompletionRoutine(PIrp, CyzSyncCompletion, pResFiltEvent,
                                TRUE, TRUE, TRUE);

         status = IoCallDriver(pLowerDevObj, PIrp);


         //
         // Wait for lower drivers to be done with the Irp
         //

         if (status == STATUS_PENDING) {
            KeWaitForSingleObject (pResFiltEvent, Executive, KernelMode, FALSE,
                                   NULL);
         }

         ExFreePool(pResFiltEvent);

         if (PIrp->IoStatus.Information == 0) {
            if (pIrpStack->Parameters.FilterResourceRequirements
                .IoResourceRequirementList == 0) {
               CyzDbgPrintEx(CYZPNPPOWER, "Can't filter NULL resources!\n");
               status = PIrp->IoStatus.Status;
               CyzCompleteRequest(pDevExt, PIrp, IO_NO_INCREMENT);
               return status;
            }

            PIrp->IoStatus.Information = (ULONG_PTR)pIrpStack->Parameters
                                        .FilterResourceRequirements
                                        .IoResourceRequirementList;

         }

// REMOVED FANNY
//         status = IoOpenDeviceRegistryKey(pDevExt->Pdo, PLUGPLAY_REGKEY_DEVICE,
//                                          STANDARD_RIGHTS_WRITE, &pnpKey);
//
//         if (!NT_SUCCESS(status)) {
//            PIrp->IoStatus.Status = status;
//
//            CyzCompleteRequest(pDevExt, PIrp, IO_NO_INCREMENT);
//            return status;
//
//         }
//
//         //
//         // No matter what we add our filter if we can and return success.
//         //
//
//         status = CyzGetRegistryKeyValue (pnpKey, L"MultiportDevice",
//                                             sizeof(L"MultiportDevice"),
//                                             &isMulti,
//                                             sizeof (ULONG));
//
//         ZwClose(pnpKey);

         //
         // Force ISR ports in IO_RES_REQ_LIST to shared status
         // Force interrupts to shared status
         //

         //
         // We will only process the first list -- multiport boards
         // should not have alternative resources
         //

         pReqList = (PIO_RESOURCE_REQUIREMENTS_LIST)PIrp->IoStatus.Information;
         pResList = &pReqList->List[0];

         CyzDbgPrintEx(CYZPNPPOWER, "List has %x lists (including "
                       "alternatives)\n", pReqList->AlternativeLists);

         for (listNum = 0; listNum < (pReqList->AlternativeLists);
              listNum++) {
            gotRuntime = 0;
            gotMemory = 0;
            gotInt = 0;

            CyzDbgPrintEx(CYZPNPPOWER, "List has %x resources in it\n",
                                        pResList->Count);

            for (j = 0; (j < pResList->Count); j++) {
               pResDesc = &pResList->Descriptors[j];

               switch (pResDesc->Type) {
               case CmResourceTypeMemory:
                  if (pResDesc->u.Memory.Length == CYZ_RUNTIME_LENGTH) {
                      gotRuntime = 1;
                      pResDesc->ShareDisposition = CmResourceShareShared; 
                      //TODO FANNY: Which should be the ShareDisposition for Y?
                      //pResDesc->ShareDisposition = CmResourceShareDriverExclusive; 
                      CyzDbgPrintEx(CYZPNPPOWER, "Sharing Runtime Memory for "
                                    "device %x\n", pLowerDevObj);
                  } else {
                      gotMemory = 1;
                      pResDesc->ShareDisposition = CmResourceShareShared; 
                      //TODO FANNY: Which should be the ShareDisposition for Y?
                      //pResDesc->ShareDisposition = CmResourceShareDriverExclusive; 
                      CyzDbgPrintEx(CYZPNPPOWER, "Sharing Board Memory for "
                                    "device %x\n", pLowerDevObj);
                  }
                  break;

               case CmResourceTypePort:
                  CyzDbgPrintEx(CYZPNPPOWER, "We should not have Port resource\n");
                  break;

               case CmResourceTypeInterrupt:
#ifndef POLL
				   gotInt = 1;
#endif
                   pResDesc->ShareDisposition = CmResourceShareShared;
                   CyzDbgPrintEx(CYZPNPPOWER, "Sharing interrupt "
                                 "for device %x\n",
                                 pLowerDevObj);                  
                  break;

               default:
                  break;
               }

               //
               // If we found what we need, we can break out of the loop
               //

               if (gotRuntime && gotMemory
#ifndef POLL
				   && gotInt
#endif
				   ) {
                  break;
               }
            }

            pResList = (PIO_RESOURCE_LIST)((PUCHAR)pResList
                                           + sizeof(IO_RESOURCE_LIST)
                                           + sizeof(IO_RESOURCE_DESCRIPTOR)
                                           * (pResList->Count - 1));
         }



         PIrp->IoStatus.Status = STATUS_SUCCESS;
         CyzCompleteRequest(pDevExt, PIrp, IO_NO_INCREMENT);
         return STATUS_SUCCESS;
      }

   case IRP_MN_QUERY_PNP_DEVICE_STATE:
      {
         if (pDevExt->Flags & CYZ_FLAGS_BROKENHW) {
            (PNP_DEVICE_STATE)PIrp->IoStatus.Information |= PNP_DEVICE_FAILED;

            PIrp->IoStatus.Status = STATUS_SUCCESS;
         }

         IoCopyCurrentIrpStackLocationToNext(PIrp);
         return CyzIoCallDriver(pDevExt, pLowerDevObj, PIrp);
      }

   case IRP_MN_STOP_DEVICE:
      {
         ULONG pendingIRPs;
         KIRQL oldIrql;

         CyzDbgPrintEx(CYZPNPPOWER, "Got IRP_MN_STOP_DEVICE Irp\n");
         CyzDbgPrintEx(CYZPNPPOWER, "for device %x\n", pLowerDevObj);


//REMOVED FANNY FOR NOW
//         ASSERT(!pDevExt->PortOnAMultiportCard);


         CyzSetFlags(pDevExt, CYZ_FLAGS_STOPPED);
         CyzSetAccept(pDevExt,CYZ_PNPACCEPT_STOPPED);
         CyzClearAccept(pDevExt, CYZ_PNPACCEPT_STOPPING);

         pDevExt->PNPState = CYZ_PNP_STOPPING;

         //
         // From this point on all non-PNP IRP's will be queued
         //

         //
         // Decrement for entry here
         //

         InterlockedDecrement(&pDevExt->PendingIRPCnt);

         //
         // Decrement for stopping
         //

         pendingIRPs = InterlockedDecrement(&pDevExt->PendingIRPCnt);

         if (pendingIRPs) {
            KeWaitForSingleObject(&pDevExt->PendingIRPEvent, Executive,
                                  KernelMode, FALSE, NULL);
         }

         //
         // Re-increment the count for later
         //

         InterlockedIncrement(&pDevExt->PendingIRPCnt);

         //
         // We need to free resources...basically this is a remove
         // without the detach from the stack.
         //

         if (pDevExt->Flags & CYZ_FLAGS_STARTED) {
            CyzReleaseResources(pDevExt);
         }

         //
         // Pass the irp down
         //

         PIrp->IoStatus.Status = STATUS_SUCCESS;
         IoSkipCurrentIrpStackLocation(PIrp);

         return IoCallDriver(pLowerDevObj, PIrp);
      }

   case IRP_MN_QUERY_STOP_DEVICE:
      {
         KIRQL oldIrql;

         CyzDbgPrintEx(CYZPNPPOWER, "Got IRP_MN_QUERY_STOP_DEVICE Irp\n");
         CyzDbgPrintEx(CYZPNPPOWER, "for device %x\n", pLowerDevObj);

         //
         // See if we should succeed a stop query
         //

// REMOVED FANNY FOR NOW
//         if (pDevExt->PortOnAMultiportCard) {
//            PIrp->IoStatus.Status = STATUS_NOT_SUPPORTED;
//            CyzDbgPrintEx(CYZPNPPOWER, "------- failing; multiport node\n");
//            CyzCompleteRequest(pDevExt, PIrp, IO_NO_INCREMENT);
//            return STATUS_NOT_SUPPORTED;
//         }

         //
         // If the device hasn't started yet, we ignore this request
         // and just pass it down.
         //

         if (pDevExt->PNPState != CYZ_PNP_STARTED) {
            IoSkipCurrentIrpStackLocation(PIrp);
            return CyzIoCallDriver(pDevExt, pLowerDevObj, PIrp);
         }

         //
         // Lock around the open status
         //

         ExAcquireFastMutex(&pDevExt->OpenMutex);

         if (pDevExt->DeviceIsOpened) {
            ExReleaseFastMutex(&pDevExt->OpenMutex);
            PIrp->IoStatus.Status = STATUS_DEVICE_BUSY;
            CyzDbgPrintEx(CYZPNPPOWER, "failing; device open\n");
            CyzCompleteRequest(pDevExt, PIrp, IO_NO_INCREMENT);
            return STATUS_DEVICE_BUSY;
         }

         pDevExt->PNPState = CYZ_PNP_QSTOP;

         CyzSetAccept(pDevExt, CYZ_PNPACCEPT_STOPPING);
         //
         // Unlock around the open status
         //

         ExReleaseFastMutex(&pDevExt->OpenMutex);

         PIrp->IoStatus.Status = STATUS_SUCCESS;
         IoCopyCurrentIrpStackLocationToNext(PIrp);
         return CyzIoCallDriver(pDevExt, pLowerDevObj, PIrp);
      }

   case IRP_MN_CANCEL_STOP_DEVICE:
      CyzDbgPrintEx(CYZPNPPOWER, "Got IRP_MN_CANCEL_STOP_DEVICE Irp\n");
      CyzDbgPrintEx(CYZPNPPOWER, "for device %x\n", pLowerDevObj);

      if (pDevExt->PNPState == CYZ_PNP_QSTOP) {
         //
         // Restore the device state
         //

         pDevExt->PNPState = CYZ_PNP_STARTED;
         CyzClearAccept(pDevExt, CYZ_PNPACCEPT_STOPPING);
      }

      PIrp->IoStatus.Status = STATUS_SUCCESS;
      IoCopyCurrentIrpStackLocationToNext(PIrp);
      return CyzIoCallDriver(pDevExt, pLowerDevObj, PIrp);

   case IRP_MN_CANCEL_REMOVE_DEVICE:

      CyzDbgPrintEx(CYZPNPPOWER, "Got IRP_MN_CANCEL_REMOVE_DEVICE Irp\n");
      CyzDbgPrintEx(CYZPNPPOWER, "for device %x\n", pLowerDevObj);

      //
      // Restore the device state
      //

      pDevExt->PNPState = CYZ_PNP_STARTED;
      CyzClearAccept(pDevExt, CYZ_PNPACCEPT_REMOVING);

      PIrp->IoStatus.Status = STATUS_SUCCESS;
      IoCopyCurrentIrpStackLocationToNext(PIrp);
      return CyzIoCallDriver(pDevExt, pLowerDevObj, PIrp);

   case IRP_MN_QUERY_REMOVE_DEVICE:
      {
         KIRQL oldIrql;
         CyzDbgPrintEx(CYZPNPPOWER, "Got IRP_MN_QUERY_REMOVE_DEVICE Irp\n");
         CyzDbgPrintEx(CYZPNPPOWER, "for device %x\n", pLowerDevObj);

         ExAcquireFastMutex(&pDevExt->OpenMutex);

         //
         // See if we should succeed a remove query
         //

         if (pDevExt->DeviceIsOpened) {
            ExReleaseFastMutex(&pDevExt->OpenMutex);
            PIrp->IoStatus.Status = STATUS_DEVICE_BUSY;
            CyzDbgPrintEx(CYZPNPPOWER, "failing; device open\n");
            CyzCompleteRequest(pDevExt, PIrp, IO_NO_INCREMENT);
            return STATUS_DEVICE_BUSY;
         }

         pDevExt->PNPState = CYZ_PNP_QREMOVE;
         CyzSetAccept(pDevExt, CYZ_PNPACCEPT_REMOVING);
         ExReleaseFastMutex(&pDevExt->OpenMutex);

         PIrp->IoStatus.Status = STATUS_SUCCESS;
         IoCopyCurrentIrpStackLocationToNext(PIrp);
         return CyzIoCallDriver(pDevExt, pLowerDevObj, PIrp);
      }

   case IRP_MN_SURPRISE_REMOVAL:
      {
         ULONG pendingIRPs;
         KIRQL oldIrql;

         CyzDbgPrintEx(CYZPNPPOWER, "Got IRP_MN_SURPRISE_REMOVAL Irp\n");
         CyzDbgPrintEx(CYZPNPPOWER, "for device %x\n", pLowerDevObj);

         //
         // Prevent any new I/O to the device
         //

         CyzSetAccept(pDevExt, CYZ_PNPACCEPT_SURPRISE_REMOVING);

         //
         // Dismiss all pending requests
         //

         CyzKillPendingIrps(PDevObj);

         //
         // Wait for any pending requests we raced on.
         //

         //
         // Decrement once for ourselves
         //

         InterlockedDecrement(&pDevExt->PendingIRPCnt);

         //
         // Decrement for the remove
         //

         pendingIRPs = InterlockedDecrement(&pDevExt->PendingIRPCnt);

         if (pendingIRPs) {
            KeWaitForSingleObject(&pDevExt->PendingIRPEvent, Executive,
                                  KernelMode, FALSE, NULL);
         }

         //
         // Reset for subsequent remove
         //

         InterlockedIncrement(&pDevExt->PendingIRPCnt);

         //
         // Remove any external interfaces and release resources
         //

         CyzDisableInterfacesResources(PDevObj, FALSE);

         PIrp->IoStatus.Status = STATUS_SUCCESS;
         IoSkipCurrentIrpStackLocation(PIrp);

         return CyzIoCallDriver(pDevExt, pLowerDevObj, PIrp);
      }

   case IRP_MN_REMOVE_DEVICE:

      {
         ULONG pendingIRPs;
         KIRQL oldIrql;

         CyzDbgPrintEx(CYZPNPPOWER, "Got IRP_MN_REMOVE_DEVICE Irp\n");
         CyzDbgPrintEx(CYZPNPPOWER, "for device %x\n", pLowerDevObj);

         //
         // If we get this, we have to remove
         //

         //
         // Mark as not accepting requests
         //

         CyzSetAccept(pDevExt, CYZ_PNPACCEPT_REMOVING);

         //
         // Complete all pending requests
         //

         CyzKillPendingIrps(PDevObj);

         //
         // Decrement for this Irp itself
         //

         InterlockedDecrement(&pDevExt->PendingIRPCnt);

         //
         // Wait for any pending requests we raced on -- this decrement
         // is for our "placeholder".
         //

         pendingIRPs = InterlockedDecrement(&pDevExt->PendingIRPCnt);

         if (pendingIRPs) {
            KeWaitForSingleObject(&pDevExt->PendingIRPEvent, Executive,
                                  KernelMode, FALSE, NULL);
         }

         if (!(pDevExt->DevicePNPAccept & CYZ_PNPACCEPT_SURPRISE_REMOVING)) { //Moved from CyzRemoveDevObj. Fanny
            //
            // Disable all external interfaces and release resources
            //

            CyzDisableInterfacesResources(PDevObj, TRUE); 
         }

         //
         // Pass the irp down
         //

         PIrp->IoStatus.Status = STATUS_SUCCESS;

         IoSkipCurrentIrpStackLocation(PIrp); // It was IoCopyCurrentIrpStackLocationToNext (Fanny)

         //
         // We do decrement here because we incremented on entry here.
         //

         status = IoCallDriver(pLowerDevObj, PIrp);


         //
         // Remove us (Note from Fanny: This call is before IoCallDriver in serial driver).
         //

         CyzRemoveDevObj(PDevObj);

         return status;
      }

   default:
      break;



   }   // switch (pIrpStack->MinorFunction)

   //
   // Pass to driver beneath us
   //

   IoSkipCurrentIrpStackLocation(PIrp);
   status = CyzIoCallDriver(pDevExt, pLowerDevObj, PIrp);
   return status;
}



UINT32
CyzReportMaxBaudRate(ULONG Bauds)
/*++

Routine Description:

    This routine returns the max baud rate given a selection of rates

Arguments:

   Bauds  -  Bit-encoded list of supported bauds


  Return Value:

   The max baud rate listed in Bauds

--*/
{
   PAGED_CODE();

   if (Bauds & SERIAL_BAUD_128K) {
      return (128U * 1024U);
   }

   if (Bauds & SERIAL_BAUD_115200) {
      return 115200U;
   }

   if (Bauds & SERIAL_BAUD_56K) {
      return (56U * 1024U);
   }

   if (Bauds & SERIAL_BAUD_57600) {
      return 57600U;
   }

   if (Bauds & SERIAL_BAUD_38400) {
      return 38400U;
   }

   if (Bauds & SERIAL_BAUD_19200) {
      return 19200U;
   }

   if (Bauds & SERIAL_BAUD_14400) {
      return 14400U;
   }

   if (Bauds & SERIAL_BAUD_9600) {
      return 9600U;
   }

   if (Bauds & SERIAL_BAUD_7200) {
      return 7200U;
   }

   if (Bauds & SERIAL_BAUD_4800) {
      return 4800U;
   }

   if (Bauds & SERIAL_BAUD_2400) {
      return 2400U;
   }

   if (Bauds & SERIAL_BAUD_1800) {
      return 1800U;
   }

   if (Bauds & SERIAL_BAUD_1200) {
      return 1200U;
   }

   if (Bauds & SERIAL_BAUD_600) {
      return 600U;
   }

   if (Bauds & SERIAL_BAUD_300) {
      return 300U;
   }

   if (Bauds & SERIAL_BAUD_150) {
      return 150U;
   }

   if (Bauds & SERIAL_BAUD_134_5) {
      return 135U; // Close enough
   }

   if (Bauds & SERIAL_BAUD_110) {
      return 110U;
   }

   if (Bauds & SERIAL_BAUD_075) {
      return 75U;
   }

   //
   // We're in bad shape
   //

   return 0;
}

VOID
CyzAddToAllDevs(PLIST_ENTRY PListEntry)
{
   KIRQL oldIrql;

   KeAcquireSpinLock(&CyzGlobals.GlobalsSpinLock, &oldIrql);

   InsertTailList(&CyzGlobals.AllDevObjs, PListEntry);

   KeReleaseSpinLock(&CyzGlobals.GlobalsSpinLock, oldIrql);
}



NTSTATUS
CyzFinishStartDevice(IN PDEVICE_OBJECT PDevObj,
                     IN PCM_RESOURCE_LIST PResList,
                     IN PCM_RESOURCE_LIST PTrResList)
/*++

Routine Description:

    This routine does serial-specific procedures to start a device.  It
    does this either for a legacy device detected by its registry entries,
    or for a PnP device after the start IRP has been sent down the stack.


Arguments:

   PDevObj    -  Pointer to the devobj that is starting

   PResList   -  Pointer to the untranslated resources needed by this device

   PTrResList -  Pointer to the translated resources needed by this device


  Return Value:

    STATUS_SUCCESS on success, something else appropriate on failure


--*/

{

   PCYZ_DEVICE_EXTENSION pDevExt = PDevObj->DeviceExtension;
   NTSTATUS status;
   PCONFIG_DATA pConfig;
   HANDLE pnpKey;
   ULONG one = 1;
   BOOLEAN allocedUserData = FALSE; // Added in build 2128
   KIRQL oldIrql;
   #ifdef POLL
   KIRQL pollIrql;
   #endif

   PAGED_CODE();

   //
   // See if this is a restart, and if so don't reallocate the world
   //

   if ((pDevExt->Flags & CYZ_FLAGS_STOPPED) 
       && (pDevExt->Flags & CYZ_FLAGS_STARTED)) {      // change from 1946 to 2000
      CyzClearFlags(pDevExt, CYZ_FLAGS_STOPPED);

      pDevExt->PNPState = CYZ_PNP_RESTARTING;

      //
      // Re-init resource-related things in the extension
      //
#ifndef POLL
      pDevExt->OurIsr = NULL;
      pDevExt->OurIsrContext = NULL;
      pDevExt->Interrupt = NULL;
      pDevExt->Vector = 0;
      pDevExt->Irql = 0;
      pDevExt->OriginalVector = 0;
      pDevExt->OriginalIrql = 0;
#endif
      pDevExt->BusNumber = 0;
      pDevExt->InterfaceType = 0;

#if 0
// removed for now - fanny
//      pDevExt->TopLevelOurIsr = NULL;
//      pDevExt->TopLevelOurIsrContext = NULL;
//
//      pDevExt->OriginalController = CyzPhysicalZero;
//      pDevExt->OriginalInterruptStatus = CyzPhysicalZero;
//
//
//      pDevExt->Controller = NULL;
//      pDevExt->InterruptStatus = NULL;
//
//      pDevExt->SpanOfController = 0;
//      pDevExt->SpanOfInterruptStatus = 0;
//
//      pDevExt->Vector = 0;
//      pDevExt->Irql = 0;
//      pDevExt->OriginalVector = 0;
//      pDevExt->OriginalIrql = 0;
//      pDevExt->AddressSpace = 0;
//      pDevExt->BusNumber = 0;
//      pDevExt->InterfaceType = 0;
//
//      pDevExt->CIsrSw = NULL;
//
//      ASSERT(PUserData == NULL);
//
//      PUserData = ExAllocatePool(PagedPool, sizeof(CYZ_USER_DATA));
//
//      if (PUserData == NULL) {
//         return STATUS_INSUFFICIENT_RESOURCES;
//      }
//
//      allocedUserData = TRUE;   // Added in build 2128
//
//      RtlZeroMemory(PUserData, sizeof(CYZ_USER_DATA));
//
//      PUserData->DisablePort = FALSE;
//      PUserData->UserClockRate = pDevExt->ClockRate;
//      PUserData->TxFIFO = pDevExt->TxFifoAmount;
//      PUserData->PermitShareDefault = pDevExt->PermitShare;
//
//
//      //
//      // Map betweeen trigger and amount
//      //
//
//      switch (pDevExt->RxFifoTrigger) {
//      case CYZ_1_BYTE_HIGH_WATER:
//         PUserData->RxFIFO = 1;
//         break;
//
//      case CYZ_4_BYTE_HIGH_WATER:
//         PUserData->RxFIFO = 4;
//         break;
//
//      case CYZ_8_BYTE_HIGH_WATER:
//         PUserData->RxFIFO = 8;
//         break;
//
//      case CYZ_14_BYTE_HIGH_WATER:
//         PUserData->RxFIFO = 14;
//         break;
//
//      default:
//         PUserData->RxFIFO = 1;
//      }
#endif // end removal of code
   } else {
      //
      // Mark as serenumerable -- toss status because we can
      // still start without this key.
      //

      status = IoOpenDeviceRegistryKey(pDevExt->Pdo,
                                       PLUGPLAY_REGKEY_DEVICE,
                                       STANDARD_RIGHTS_WRITE, &pnpKey);

      if (NT_SUCCESS(status)) {
         ULONG powerPolicy = 0;

         //
         // Find out if we own power policy
         //

         CyzGetRegistryKeyValue(pnpKey, L"CyzRelinquishPowerPolicy",
                                   sizeof(L"CyzRelinquishPowerPolicy"),
                                   &powerPolicy, sizeof(ULONG));

         pDevExt->OwnsPowerPolicy = powerPolicy ? FALSE : TRUE;


         ZwClose(pnpKey);
      }
   }

   //
   // Allocate the config record.
   //

   pConfig = ExAllocatePool (PagedPool, sizeof(CONFIG_DATA));

   //************************************
   // Error Injection
   //if (pConfig) {
   //   ExFreePool (pConfig);
   //}
   //pConfig = NULL;
   //************************************
   if (pConfig == NULL) {

      CyzLogError(pDevExt->DriverObject, NULL, CyzPhysicalZero,
                     CyzPhysicalZero, 0, 0, 0, 31, STATUS_SUCCESS,
                     CYZ_INSUFFICIENT_RESOURCES, 0, NULL, 0, NULL);

      CyzDbgPrintEx(CYZERRORS, "Couldn't allocate memory for the\n"
                             "------  user configuration record\n");

      status = STATUS_INSUFFICIENT_RESOURCES;
      goto CyzFinishStartDeviceError;
   }

   RtlZeroMemory(pConfig, sizeof(CONFIG_DATA));


   //
   // Get the configuration info for the device.
   //

   status = CyzGetPortInfo(PDevObj, PResList, PTrResList, pConfig);
                              

   if (!NT_SUCCESS(status)) {
      goto CyzFinishStartDeviceError;
   }

   //
   // See if we are in the proper power state.
   //



   if (pDevExt->PowerState != PowerDeviceD0) {

      status = CyzGotoPowerState(pDevExt->Pdo, pDevExt, PowerDeviceD0);

      if (!NT_SUCCESS(status)) {
         goto CyzFinishStartDeviceError;
      }
   }

   //
   // Find and initialize the controller
   //

   status = CyzFindInitController(PDevObj, pConfig);

   if (!NT_SUCCESS(status)) {
      goto CyzFinishStartDeviceError;
   }


#ifndef POLL
   //
   // The hardware that is set up to NOT interrupt, connect an interrupt.
   //

   //
   // If a device doesn't already have an interrupt and it has an isr then
   // we attempt to connect to the interrupt if it is not shareing with other
   // serial devices.  If we fail to connect to an  interrupt we will delete
   // this device.
   //

   if (pDevExt != NULL) {
      CyzDbgPrintEx(CYZDIAG5, "pDevExt: Interrupt %x\n"
                    "-------               OurIsr %x\n", pDevExt->Interrupt,
                    pDevExt->OurIsr);
   } else {
      CyzDbgPrintEx(CYZERRORS, "CyzFinishStartDevice got NULL "
                    "pDevExt\n");
   }

   if ((!pDevExt->Interrupt) && (pDevExt->OurIsr)) {

      CyzDbgPrintEx(CYZDIAG5,
                    "About to connect to interrupt for port %wZ\n"
                    "------- address of extension is %x\n",
                    &pDevExt->DeviceName, pDevExt);

      CyzDbgPrintEx(CYZDIAG5, "IoConnectInterrupt Args:\n"
                              "Interrupt           %x\n"
                              "OurIsr              %x\n"
                              "OurIsrContext       %x\n"
                              "NULL\n"
                              "Vector              %x\n"
                              "Irql                %x\n"
                              "InterruptMode       %x\n"
                              "InterruptShareable  %x\n"
                              "ProcessorAffinity   %x\n"
                              "FALSE\n",
                              &pDevExt->Interrupt,
                              CyzIsr,
                              pDevExt->OurIsrContext,
                              pDevExt->Vector,
                              pDevExt->Irql,
                              pConfig->InterruptMode,
                              pDevExt->InterruptShareable,
                              pConfig->Affinity
                             );

      //
      // Do a just in time construction of the ISR switch.
      //
//removed fanny
//      pDevExt->CIsrSw->IsrFunc = pDevExt->OurIsr;
//      pDevExt->CIsrSw->Context = pDevExt->OurIsrContext;

      status = IoConnectInterrupt(&pDevExt->Interrupt, pDevExt->OurIsr,
                                  pDevExt->OurIsrContext, NULL,
                                  pDevExt->Vector, pDevExt->Irql,
                                  pDevExt->Irql,
                                  pConfig->InterruptMode,
                                  pDevExt->InterruptShareable,
                                  pConfig->Affinity, FALSE);
//****************************************
// Error Injection
//    if (pDevExt->Interrupt != NULL) {
//       IoDisconnectInterrupt(pDevExt->Interrupt);
//       pDevExt->Interrupt = NULL;
//    }
//    status = STATUS_INSUFFICIENT_RESOURCES;
//****************************************

      if (!NT_SUCCESS(status)) {

         //
         // Hmmm, how'd that happen?  Somebody either
         // didn't report their resources, or they
         // sneaked in since the last time I looked.
         //
         // Oh well,  delete this device.
         //

         CyzDbgPrintEx(CYZERRORS, "Couldn't connect to interrupt for %wZ\n",
                       &pDevExt->DeviceName);

         CyzDbgPrintEx(CYZERRORS, "IoConnectInterrupt Args:\n"
                                  "Interrupt           %x\n"
                                  "OurIsr              %x\n"
                                  "OurIsrContext       %x\n"
                                  "NULL\n"
                                  "Vector              %x\n"
                                  "Irql                %x\n"
                                  "InterruptMode       %x\n"
                                  "InterruptShareable  %x\n"
                                  "ProcessorAffinity   %x\n"
                                  "FALSE\n",
                                  &pDevExt->Interrupt,
                                  CyzIsr,
                                  pDevExt->OurIsrContext,
                                  pDevExt->Vector,
                                  pDevExt->Irql,
                                  pConfig->InterruptMode,
                                  pDevExt->InterruptShareable,
                                  pConfig->Affinity);



         CyzLogError(PDevObj->DriverObject, PDevObj,
                        pDevExt->OriginalBoardMemory,
                        CyzPhysicalZero, 0, 0, 0, pDevExt->Vector, status,
                        CYZ_UNREPORTED_IRQL_CONFLICT,
                        pDevExt->DeviceName.Length + sizeof(WCHAR),
                        pDevExt->DeviceName.Buffer, 0, NULL);

         //status = CYZ_UNREPORTED_IRQL_CONFLICT; Originally, it was SERIAL_UNREPORTED_IRQL_CONFLICT.
         goto CyzFinishStartDeviceError;

      }

      CyzDbgPrintEx(CYZDIAG5, "Connected interrupt %08X\n", pDevExt->Interrupt);

      // This was the first interrupt connected. We can now enable
      // the PCI interrupts. Let's keep the UART interrupts disabled
      // until we have an Open.
	    
      {

         ULONG intr_reg;

	      intr_reg = CYZ_READ_ULONG(&(pDevExt->Runtime)->intr_ctrl_stat);
         //intr_reg |= (0x00030800UL);
         intr_reg |= (0x00030B00UL);
         CYZ_WRITE_ULONG(&(pDevExt->Runtime)->intr_ctrl_stat,intr_reg);
      }

   }
#endif
   //
   // Add the PDevObj to the master list
   //

   CyzAddToAllDevs(&pDevExt->AllDevObjs);


   //
   // Reset the device.
   //

#ifndef POLL
   //
   // While the device isn't open, disable all interrupts.
   //
   CYZ_WRITE_ULONG(&(pDevExt->ChCtrl)->intr_enable,C_IN_DISABLE); //1.0.0.11
   CyzIssueCmd(pDevExt,C_CM_IOCTL,0L,FALSE);
#endif


   //
   // This should set up everything as it should be when
   // a device is to be opened.  We do need to lower the
   // modem lines, and disable the recalcitrant fifo
   // so that it will show up if the user boots to dos.
   //
#ifdef POLL
   KeAcquireSpinLock(&pDevExt->PollLock, &pollIrql);
   CyzReset(pDevExt);
   CyzMarkClose(pDevExt);
   CyzClrRTS(pDevExt);
   CyzClrDTR(pDevExt);
   KeReleaseSpinLock(&pDevExt->PollLock, pollIrql);
#else
   KeSynchronizeExecution(
                         pDevExt->Interrupt,
                         CyzReset,
                         pDevExt
                         );

   KeSynchronizeExecution( //Disables the fifo.
                         pDevExt->Interrupt,
                         CyzMarkClose,
                         pDevExt
                         );

   KeSynchronizeExecution(
                         pDevExt->Interrupt,
                         CyzClrRTS,
                         pDevExt
                         );

   KeSynchronizeExecution(
                         pDevExt->Interrupt,
                         CyzClrDTR,
                         pDevExt
                         );
#endif

   if (pDevExt->PNPState == CYZ_PNP_ADDED ) {
      //
      // Do the external naming now that the device is accessible.
      //

      status = CyzDoExternalNaming(pDevExt, pDevExt->DeviceObject->
                                      DriverObject);


      if (!NT_SUCCESS(status)) {
         CyzDbgPrintEx(CYZERRORS, "External Naming Failed - Status %x\n",
                                   status);

         //
         // Allow the device to start anyhow
         //

         status = STATUS_SUCCESS;
      }
   } else {
      CyzDbgPrintEx(CYZPNPPOWER, "Not doing external naming -- state is %x"
                                 "\n", pDevExt->PNPState);
   }

CyzFinishStartDeviceError:;

   if (!NT_SUCCESS (status)) {

      CyzDbgPrintEx(CYZDIAG1, "Cleaning up failed start\n");

      //
      // Resources created by this routine will be cleaned up by the remove
      //

      if (pDevExt->PNPState == CYZ_PNP_RESTARTING) {
         //
         // Kill all that lives and breathes -- we'll clean up the
         // rest on the impending remove
         //

         CyzKillPendingIrps(PDevObj);

         //
         // In fact, pretend we're removing so we don't take any
         // more irps
         //

         CyzSetAccept(pDevExt, CYZ_PNPACCEPT_REMOVING);
         CyzClearFlags(pDevExt, CYZ_FLAGS_STARTED);
      }
   } else { // SUCCESS

      //
      // Fill in WMI hardware data
      //

#ifndef POLL
      pDevExt->WmiHwData.IrqNumber = pDevExt->Irql;
      pDevExt->WmiHwData.IrqLevel = pDevExt->Irql;
      pDevExt->WmiHwData.IrqVector = pDevExt->Vector;
      pDevExt->WmiHwData.IrqAffinityMask = pConfig->Affinity;
      pDevExt->WmiHwData.InterruptType = pConfig->InterruptMode == Latched
         ? SERIAL_WMI_INTTYPE_LATCHED : SERIAL_WMI_INTTYPE_LEVEL;
      pDevExt->WmiHwData.BaseIOAddress = (ULONG_PTR)pDevExt->BoardMemory;
#endif

      //
      // Fill in WMI device state data (as defaults)
      //

      pDevExt->WmiCommData.BaudRate = pDevExt->CurrentBaud;
      switch(pDevExt->CommDataLen & C_DL_CS) {
      case C_DL_CS5:
         pDevExt->WmiCommData.BitsPerByte = 5;
         break;
      case C_DL_CS6:
         pDevExt->WmiCommData.BitsPerByte = 6;
         break;
      case C_DL_CS7:
         pDevExt->WmiCommData.BitsPerByte = 7;
         break;
      case C_DL_CS8:
         pDevExt->WmiCommData.BitsPerByte = 8;
         break;
      }
      pDevExt->WmiCommData.ParityCheckEnable = (pDevExt->CommParity & C_PR_PARITY)
         ? TRUE : FALSE;

      switch (pDevExt->CommParity & C_PR_PARITY) {
      case C_PR_NONE:
         pDevExt->WmiCommData.Parity = SERIAL_WMI_PARITY_NONE;
         break;

      case C_PR_ODD:
         pDevExt->WmiCommData.Parity = SERIAL_WMI_PARITY_ODD;
         break;

      case C_PR_EVEN:
         pDevExt->WmiCommData.Parity = SERIAL_WMI_PARITY_EVEN;
         break;

      case C_PR_MARK:
         pDevExt->WmiCommData.Parity = SERIAL_WMI_PARITY_MARK;
         break;

      case C_PR_SPACE:
         pDevExt->WmiCommData.Parity = SERIAL_WMI_PARITY_SPACE;
         break;

      default:
         ASSERTMSG(0, "CYZPORT: Illegal Parity setting for WMI");
         pDevExt->WmiCommData.Parity = SERIAL_WMI_PARITY_NONE;
         break;
      }

      switch(pDevExt->CommDataLen & C_DL_STOP) {
      case C_DL_1STOP:
         pDevExt->WmiCommData.StopBits = SERIAL_WMI_STOP_1;
         break;
      case C_DL_15STOP:
         pDevExt->WmiCommData.StopBits = SERIAL_WMI_STOP_1_5;
         break;
      case C_DL_2STOP:
         pDevExt->WmiCommData.StopBits = SERIAL_WMI_STOP_2;
         break;
      default:
         ASSERTMSG(0, "CYZPORT: Illegal Stop Bit setting for WMI");
         pDevExt->WmiCommData.Parity = SERIAL_WMI_STOP_1;
         break;
      }

      pDevExt->WmiCommData.XoffCharacter = pDevExt->SpecialChars.XoffChar;
      pDevExt->WmiCommData.XoffXmitThreshold = pDevExt->HandFlow.XoffLimit;
      pDevExt->WmiCommData.XonCharacter = pDevExt->SpecialChars.XonChar;
      pDevExt->WmiCommData.XonXmitThreshold = pDevExt->HandFlow.XonLimit;
      pDevExt->WmiCommData.MaximumBaudRate
         = CyzReportMaxBaudRate(pDevExt->SupportedBauds);
      pDevExt->WmiCommData.MaximumOutputBufferSize = (UINT32)((ULONG)-1);
      pDevExt->WmiCommData.MaximumInputBufferSize = (UINT32)((ULONG)-1);
      pDevExt->WmiCommData.Support16BitMode = FALSE;
      pDevExt->WmiCommData.SupportDTRDSR = TRUE;
      pDevExt->WmiCommData.SupportIntervalTimeouts = TRUE;
      pDevExt->WmiCommData.SupportParityCheck = TRUE;
      pDevExt->WmiCommData.SupportRTSCTS = TRUE;
      pDevExt->WmiCommData.SupportXonXoff = TRUE;
      pDevExt->WmiCommData.SettableBaudRate = TRUE;
      pDevExt->WmiCommData.SettableDataBits = TRUE;
      pDevExt->WmiCommData.SettableFlowControl = TRUE;
      pDevExt->WmiCommData.SettableParity = TRUE;
      pDevExt->WmiCommData.SettableParityCheck = TRUE;
      pDevExt->WmiCommData.SettableStopBits = TRUE;
      pDevExt->WmiCommData.IsBusy = FALSE;

      //
      // Fill in wmi perf data (all zero's)
      //

      RtlZeroMemory(&pDevExt->WmiPerfData, sizeof(pDevExt->WmiPerfData));


      if (pDevExt->PNPState == CYZ_PNP_ADDED) {
         PULONG countSoFar = &IoGetConfigurationInformation()->SerialCount;
         (*countSoFar)++;

         //
         // Register for WMI
         //

         pDevExt->WmiLibInfo.GuidCount = sizeof(SerialWmiGuidList) /
                                              sizeof(WMIGUIDREGINFO);
         pDevExt->WmiLibInfo.GuidList = SerialWmiGuidList;
         ASSERT (pDevExt->WmiLibInfo.GuidCount == SERIAL_WMI_GUID_LIST_SIZE);

         pDevExt->WmiLibInfo.QueryWmiRegInfo = CyzQueryWmiRegInfo;
         pDevExt->WmiLibInfo.QueryWmiDataBlock = CyzQueryWmiDataBlock;
         pDevExt->WmiLibInfo.SetWmiDataBlock = CyzSetWmiDataBlock;
         pDevExt->WmiLibInfo.SetWmiDataItem = CyzSetWmiDataItem;
         pDevExt->WmiLibInfo.ExecuteWmiMethod = NULL;
         pDevExt->WmiLibInfo.WmiFunctionControl = NULL;

         IoWMIRegistrationControl(PDevObj, WMIREG_ACTION_REGISTER);

      }

      if (pDevExt->PNPState == CYZ_PNP_RESTARTING) {
         //
         // Release the stalled IRP's
         //

         CyzUnstallIrps(pDevExt);
      }

      pDevExt->PNPState = CYZ_PNP_STARTED;
      CyzClearAccept(pDevExt, ~CYZ_PNPACCEPT_OK);
      CyzSetFlags(pDevExt, CYZ_FLAGS_STARTED);

   }

   if (pConfig) {
      ExFreePool (pConfig);
   }
// REMOVED BY FANNY
//   if ((PUserData != NULL)
//       && (pDevExt->PNPState == CYZ_PNP_RESTARTING)) {
//      ExFreePool(PUserData);
//   }
#if 0
   if ((PUserData != NULL) && allocedUserData) {    // Added in build 2128
      ExFreePool(PUserData);
   }
#endif

   CyzDbgPrintEx (CYZTRACECALLS, "leaving CyzFinishStartDevice\n");

   return status;
}


NTSTATUS
CyzStartDevice(IN PDEVICE_OBJECT PDevObj, IN PIRP PIrp)

/*++

Routine Description:

    This routine first passes the start device Irp down the stack then
    it picks up the resources for the device, ititializes, puts it on any
    appropriate lists (i.e shared interrupt or interrupt status) and
    connects the interrupt.

Arguments:

    PDevObj - Pointer to the device object for this device

    PIrp - Pointer to the IRP for the current request

Return Value:

    Return status


--*/

{
   PIO_STACK_LOCATION pIrpStack = IoGetCurrentIrpStackLocation(PIrp);
   NTSTATUS status = STATUS_NOT_IMPLEMENTED;
   PCYZ_DEVICE_EXTENSION pDevExt = PDevObj->DeviceExtension;
   PDEVICE_OBJECT pLowerDevObj = pDevExt->LowerDeviceObject;
   // Next: variables to get resources from the Registry
   HANDLE keyHandle;
   ULONG dataLength;
   PCM_RESOURCE_LIST portResources = NULL;
   PCM_RESOURCE_LIST portResourcesTr = NULL;

   PAGED_CODE();

   CyzDbgPrintEx(CYZTRACECALLS, "entering CyzStartDevice\n");


   //
   // Pass this down to the next device object
   //

   KeInitializeEvent(&pDevExt->CyzStartEvent, SynchronizationEvent,
                     FALSE);

   IoCopyCurrentIrpStackLocationToNext(PIrp);
   IoSetCompletionRoutine(PIrp, CyzSyncCompletion,
                          &pDevExt->CyzStartEvent, TRUE, TRUE, TRUE);

   status = IoCallDriver(pLowerDevObj, PIrp);


   //
   // Wait for lower drivers to be done with the Irp
   //

   if (status == STATUS_PENDING) {
      KeWaitForSingleObject (&pDevExt->CyzStartEvent, Executive, KernelMode,
                             FALSE, NULL);

      status = PIrp->IoStatus.Status;
   }

   //*********************************
   // Error Injection
   // status = STATUS_UNSUCCESSFUL;
   //*********************************

   if (!NT_SUCCESS(status)) {
      CyzDbgPrintEx(CYZERRORS, "error with IoCallDriver %x\n", status);
      CyzLogError( pDevExt->DriverObject,NULL,
                    CyzPhysicalZero,CyzPhysicalZero,
                    0,0,0,0,status,CYZ_LOWER_DRIVERS_FAILED_START,
                    0,NULL,0,NULL);
      return status;
   }


   // Get resources from the registry

   status = IoOpenDeviceRegistryKey (pDevExt->Pdo,
                                     PLUGPLAY_REGKEY_DEVICE,
                                     STANDARD_RIGHTS_READ,
                                     &keyHandle);

   if (!NT_SUCCESS(status)) {
      CyzDbgPrintEx(CYZERRORS, "IoOpenDeviceRegistryKey failed - %x "
                               "\n", status);

   } else {

      dataLength = CyzGetRegistryKeyValueLength (keyHandle,
                                                 L"PortResources",
                                                 sizeof(L"PortResources"));

      portResources = ExAllocatePool(PagedPool, dataLength);
      
      if (portResources) {
         status = CyzGetRegistryKeyValue (keyHandle, L"PortResources",
                                          sizeof(L"PortResources"),
                                          portResources,
                                          dataLength);
         if (!NT_SUCCESS(status)) {
            CyzDbgPrintEx(CYZERRORS, "CyzGetRegistryKeyValue PortResources "
                                      "failed - %x\n", status);
            goto CyzStartDevice_End;
         }
      }
      dataLength = CyzGetRegistryKeyValueLength (keyHandle,
                                                 L"PortResourcesTr",
                                                 sizeof(L"PortResourcesTr"));

      portResourcesTr = ExAllocatePool(PagedPool, dataLength);
      
      if (portResourcesTr) {
         status = CyzGetRegistryKeyValue (keyHandle, L"PortResourcesTr",
                                          sizeof(L"PortResourcesTr"),
                                          portResourcesTr,
                                          dataLength);
         if (!NT_SUCCESS(status)) {
            CyzDbgPrintEx(CYZERRORS, "CyzGetRegistryKeyValue PortResourcesTr "
                                     "failed - %xn", status);
            goto CyzStartDevice_End;
         }
      }

      //
      // Do the serial specific items to start the device
      //
      status = CyzFinishStartDevice(PDevObj, portResources, portResourcesTr);

CyzStartDevice_End:

      if (portResources) {
         ExFreePool(portResources);
      }
      if (portResourcesTr) {
         ExFreePool(portResourcesTr);
      }

      ZwClose (keyHandle);

   }


#if 0
   //
   // Do the serial specific items to start the device
   //
   status = CyzFinishStartDevice(PDevObj, pIrpStack->Parameters.StartDevice
                                    .AllocatedResources,
                                    pIrpStack->Parameters.StartDevice
                                    .AllocatedResourcesTranslated);
#endif
   

   
   return status;
}


NTSTATUS
CyzItemCallBack(
                  IN PVOID Context,
                  IN PUNICODE_STRING PathName,
                  IN INTERFACE_TYPE BusType,
                  IN ULONG BusNumber,
                  IN PKEY_VALUE_FULL_INFORMATION *BusInformation,
                  IN CONFIGURATION_TYPE ControllerType,
                  IN ULONG ControllerNumber,
                  IN PKEY_VALUE_FULL_INFORMATION *ControllerInformation,
                  IN CONFIGURATION_TYPE PeripheralType,
                  IN ULONG PeripheralNumber,
                  IN PKEY_VALUE_FULL_INFORMATION *PeripheralInformation
                  )

/*++

Routine Description:

    This routine is called to check if a particular item
    is present in the registry.

Arguments:

    Context - Pointer to a boolean.

    PathName - unicode registry path.  Not Used.

    BusType - Internal, Isa, ...

    BusNumber - Which bus if we are on a multibus system.

    BusInformation - Configuration information about the bus. Not Used.

    ControllerType - Controller type.

    ControllerNumber - Which controller if there is more than one
                       controller in the system.

    ControllerInformation - Array of pointers to the three pieces of
                            registry information.

    PeripheralType - Should be a peripheral.

    PeripheralNumber - Which peripheral - not used..

    PeripheralInformation - Configuration information. Not Used.

Return Value:

    STATUS_SUCCESS

--*/

{
   PAGED_CODE();

   *((BOOLEAN *)Context) = TRUE;
   return STATUS_SUCCESS;
}


NTSTATUS
CyzControllerCallBack(
                  IN PVOID Context,
                  IN PUNICODE_STRING PathName,
                  IN INTERFACE_TYPE BusType,
                  IN ULONG BusNumber,
                  IN PKEY_VALUE_FULL_INFORMATION *BusInformation,
                  IN CONFIGURATION_TYPE ControllerType,
                  IN ULONG ControllerNumber,
                  IN PKEY_VALUE_FULL_INFORMATION *ControllerInformation,
                  IN CONFIGURATION_TYPE PeripheralType,
                  IN ULONG PeripheralNumber,
                  IN PKEY_VALUE_FULL_INFORMATION *PeripheralInformation
                  )

/*++

Routine Description:

    This routine is called to check if a particular item
    is present in the registry.

Arguments:

    Context - Pointer to a boolean.

    PathName - unicode registry path.  Not Used.

    BusType - Internal, Isa, ...

    BusNumber - Which bus if we are on a multibus system.

    BusInformation - Configuration information about the bus. Not Used.

    ControllerType - Controller type.

    ControllerNumber - Which controller if there is more than one
                       controller in the system.

    ControllerInformation - Array of pointers to the three pieces of
                            registry information.

    PeripheralType - Should be a peripheral.

    PeripheralNumber - Which peripheral - not used..

    PeripheralInformation - Configuration information. Not Used.

Return Value:

    STATUS_SUCCESS

--*/

{
   PCM_FULL_RESOURCE_DESCRIPTOR controllerData;
   PSERIAL_PTR_CTX pContext = (PSERIAL_PTR_CTX)Context;
   ULONG i;

   PAGED_CODE();

   if (ControllerInformation[IoQueryDeviceConfigurationData]->DataLength == 0) {
      pContext->isPointer = FALSE;
      return STATUS_SUCCESS;
   }

   controllerData =
      (PCM_FULL_RESOURCE_DESCRIPTOR)
      (((PUCHAR)ControllerInformation[IoQueryDeviceConfigurationData])
        + ControllerInformation[IoQueryDeviceConfigurationData]->DataOffset);

   //
   // See if this is the exact port we are testing
   //
   for (i = 0; i < controllerData->PartialResourceList.Count; i++) {

      PCM_PARTIAL_RESOURCE_DESCRIPTOR partial
         = &controllerData->PartialResourceList.PartialDescriptors[i];

      switch (partial->Type) {
      case CmResourceTypePort:
         if (partial->u.Port.Start.QuadPart == pContext->Port.QuadPart) {
            //
            // Pointer on same controller. Bail out.
            //
            pContext->isPointer = SERIAL_FOUNDPOINTER_PORT;
            return STATUS_SUCCESS;
         }

      case CmResourceTypeInterrupt:
         if (partial->u.Interrupt.Vector == pContext->Vector) {
            //
            // Pointer sharing this interrupt.  Bail out.
            //
            pContext->isPointer = SERIAL_FOUNDPOINTER_VECTOR;
            return STATUS_SUCCESS;
         }

      default:
         break;
      }
   }

   pContext->isPointer = FALSE;
   return STATUS_SUCCESS;
}


                  
NTSTATUS
CyzGetPortInfo(IN PDEVICE_OBJECT PDevObj, IN PCM_RESOURCE_LIST PResList,
               IN PCM_RESOURCE_LIST PTrResList, OUT PCONFIG_DATA PConfig)

/*++

Routine Description:

    This routine will get the configuration information and put
    it and the translated values into CONFIG_DATA structures.
    It first sets up with  defaults and then queries the registry
    to see if the user has overridden these defaults; if this is a legacy
    multiport card, it uses the info in PUserData instead of groping the
    registry again.

Arguments:

    PDevObj - Pointer to the device object.

    PResList - Pointer to the untranslated resources requested.

    PTrResList - Pointer to the translated resources requested.

    PConfig - Pointer to configuration info


Return Value:

    STATUS_SUCCESS if consistant configuration was found - otherwise.
    returns STATUS_SERIAL_NO_DEVICE_INITED.

--*/

{
   PCYZ_DEVICE_EXTENSION pDevExt = PDevObj->DeviceExtension;
   PDEVICE_OBJECT pLowerDevObj = pDevExt->LowerDeviceObject;
   NTSTATUS status = STATUS_NOT_IMPLEMENTED;
   CONFIGURATION_TYPE pointer = PointerPeripheral;
   CONFIGURATION_TYPE controllerType  = SerialController;

   HANDLE keyHandle;
   ULONG count;
   ULONG i;
   ULONG firmwareVersion;
   INTERFACE_TYPE interfaceType;

   PCM_PARTIAL_RESOURCE_LIST pPartialResourceList, pPartialTrResourceList;
   PCM_PARTIAL_RESOURCE_DESCRIPTOR pPartialResourceDesc, pPartialTrResourceDesc;

   PCM_FULL_RESOURCE_DESCRIPTOR pFullResourceDesc = NULL,
      pFullTrResourceDesc = NULL;

// REMOVED BY FANNY
//   ULONG defaultInterruptMode;
//   ULONG defaultAddressSpace;
//   ULONG defaultInterfaceType;
//   ULONG defaultClockRate;
   ULONG zero = 0;
//   CYZ_PTR_CTX foundPointerCtx;
//   ULONG isMulti = 0;
//   ULONG gotInt = 0;
//   ULONG gotISR = 0;
//   ULONG gotIO = 0;
//   ULONG ioResIndex = 0;
//   ULONG curIoIndex = 0;

   PAGED_CODE();

   CyzDbgPrintEx(CYZTRACECALLS, "entering CyzGetPortInfo\n");

   CyzDbgPrintEx(CYZPNPPOWER, "resource pointer is %x\n", PResList);
   CyzDbgPrintEx(CYZPNPPOWER, "TR resource pointer is %x\n", PTrResList);


   if ((PResList == NULL) || (PTrResList == NULL)) {
      //
      // This shouldn't happen in theory
      //

       ASSERT(PResList != NULL);
       ASSERT(PTrResList != NULL);

      //
      // This status is as appropriate as I can think of
      //
      return STATUS_INSUFFICIENT_RESOURCES;
   }

   //
   // Each resource list should have only one set of resources
   //

   ASSERT(PResList->Count == 1);
   ASSERT(PTrResList->Count == 1);

//REMOVED BY FANNY
#if 0
   //
   // See if this is a multiport device.  This way we allow other
   // pseudo-serial devices with extra resources to specify another range
   // of I/O ports.  If this is not a multiport, we only look at the first
   // range.  If it is a multiport, we look at the first two ranges.
   //

   status = IoOpenDeviceRegistryKey(pDevExt->Pdo, PLUGPLAY_REGKEY_DEVICE,
                                    STANDARD_RIGHTS_WRITE, &keyHandle);

   if (!NT_SUCCESS(status)) {
      return status;
   }

   status = CyzGetRegistryKeyValue(keyHandle, L"MultiportDevice",
                                      sizeof(L"MultiportDevice"), &isMulti,
                                      sizeof (ULONG));

   if (!NT_SUCCESS(status)) {
      isMulti = 0;
   }

   status = CyzGetRegistryKeyValue(keyHandle, L"CyzIoResourcesIndex",
                                      sizeof(L"CyzIoResourcesIndex"),
                                      &ioResIndex, sizeof(ULONG));

   if (!NT_SUCCESS(status)) {
      ioResIndex = 0;
   }

   ZwClose(keyHandle);

#endif  // end removal code

   pFullResourceDesc   = &PResList->List[0];
   pFullTrResourceDesc = &PTrResList->List[0];

   //
   // Ok, if we have a full resource descriptor.  Let's take it apart.
   //

   if (pFullResourceDesc) {
      pPartialResourceList    = &pFullResourceDesc->PartialResourceList;
      pPartialResourceDesc    = pPartialResourceList->PartialDescriptors;
      count                   = pPartialResourceList->Count;

      //
      // Pull out the stuff that is in the full descriptor.
      //

      PConfig->InterfaceType  = pFullResourceDesc->InterfaceType;
      PConfig->BusNumber      = pFullResourceDesc->BusNumber;

      //
      // Now run through the partial resource descriptors looking for the Runtime memory,
      // CD1400 memory, and interrupt.
      //

      for (i = 0;     i < count;     i++, pPartialResourceDesc++) {

         switch (pPartialResourceDesc->Type) {
         case CmResourceTypeMemory: {

               if (pPartialResourceDesc->u.Memory.Length == CYZ_RUNTIME_LENGTH) {
                  PConfig->PhysicalRuntime = pPartialResourceDesc->u.Memory.Start;
                  PConfig->RuntimeLength = pPartialResourceDesc->u.Memory.Length;
                  PConfig->RuntimeAddressSpace = pPartialResourceDesc->Flags;
               } else {
                  PConfig->PhysicalBoardMemory = pPartialResourceDesc->u.Memory.Start;
                  PConfig->BoardMemoryLength = pPartialResourceDesc->u.Memory.Length;
                  PConfig->BoardMemoryAddressSpace = pPartialResourceDesc->Flags;
               }
               break;
         }
#ifndef POLL
         case CmResourceTypeInterrupt: {
               PConfig->OriginalIrql = pPartialResourceDesc->u.Interrupt.Level;
               PConfig->OriginalVector =pPartialResourceDesc->u.Interrupt.Vector;
               PConfig->Affinity = pPartialResourceDesc->u.Interrupt.Affinity;
               if (pPartialResourceDesc->Flags
                   & CM_RESOURCE_INTERRUPT_LATCHED) {
                  PConfig->InterruptMode  = Latched;
               } else {
                  PConfig->InterruptMode  = LevelSensitive;
               }
            
               break;
         }
#endif

         default: {
               break;
            }
         }   // switch (pPartialResourceDesc->Type)
      }       // for (i = 0;     i < count;     i++, pPartialResourceDesc++)
   }           // if (pFullResourceDesc)


   //
   // Do the same for the translated resources
   //


   if (pFullTrResourceDesc) {
      pPartialTrResourceList = &pFullTrResourceDesc->PartialResourceList;
      pPartialTrResourceDesc = pPartialTrResourceList->PartialDescriptors;
      count = pPartialTrResourceList->Count;

      //
      // Reload PConfig with the translated values for later use
      //

      PConfig->InterfaceType  = pFullTrResourceDesc->InterfaceType;
      PConfig->BusNumber      = pFullTrResourceDesc->BusNumber;

      for (i = 0;     i < count;     i++, pPartialTrResourceDesc++) {


         switch (pPartialTrResourceDesc->Type) {
         case CmResourceTypeMemory: {

            // ATTENTION, ATTENTION: FOR NOW, WE WILL USE THE RAW
            // RESOURCES, AS WE HAVE GARBAGE IN THE TRANSLATED 
            // RESOURCES.
            //
            if (pPartialTrResourceDesc->u.Memory.Length == CYZ_RUNTIME_LENGTH) {
               PConfig->TranslatedRuntime = pPartialTrResourceDesc->u.Memory.Start;
               PConfig->RuntimeLength = pPartialTrResourceDesc->u.Memory.Length;
            } else {
               PConfig->TranslatedBoardMemory = pPartialTrResourceDesc->u.Memory.Start;
               PConfig->BoardMemoryLength = pPartialTrResourceDesc->u.Memory.Length;
            }

            //TEMP CODE BECAUSE OUR BUS DRIVER IS GIVING WRONG TRANSLATED ADDRESS
            //PConfig->TranslatedRuntime = PConfig->PhysicalRuntime;
            //PConfig->TranslatedBoardMemory = PConfig->PhysicalBoardMemory;
            break;
         }
#ifndef POLL
         case CmResourceTypeInterrupt: {
            PConfig->TrVector = pPartialTrResourceDesc->u.Interrupt.Vector;
            PConfig->TrIrql = pPartialTrResourceDesc->u.Interrupt.Level;
            PConfig->Affinity = pPartialTrResourceDesc->u.Interrupt.Affinity;
            break;
         }
#endif
         default: {
               break;
         }
         }   // switch (pPartialTrResourceDesc->Type)
      }       // for (i = 0;     i < count;     i++, pPartialTrResourceDesc++)
   }           // if (pFullTrResourceDesc)


   //
   // Initialize a config data structure with default values for those that
   // may not already be initialized.
   //

   PConfig->PortIndex = 0;
   firmwareVersion = 0;
//   PConfig->RxFIFO = driverDefaults.RxFIFODefault;
//   PConfig->TxFIFO = driverDefaults.TxFIFODefault;


   //
   // Open the "Device Parameters" section of registry for this device object.
   //


   status = IoOpenDeviceRegistryKey (pDevExt->Pdo,
                                     PLUGPLAY_REGKEY_DEVICE,
                                     STANDARD_RIGHTS_READ,
                                     &keyHandle);

   if (!NT_SUCCESS(status)) {

      CyzDbgPrintEx(CYZERRORS, "IoOpenDeviceRegistryKey failed - %x \n",
                          status);
      goto PortInfoCleanUp;

   } else {

//      status = CyzGetRegistryKeyValue (keyHandle,
//                                          L"RxFIFO",
//                                          sizeof(L"RxFIFO"),
//                                          &PConfig->RxFIFO,
//                                          sizeof (ULONG));
//      status = CyzGetRegistryKeyValue (keyHandle,
//                                          L"TxFIFO",
//                                          sizeof(L"TxFIFO"),
//                                          &PConfig->TxFIFO,
//                                          sizeof (ULONG));
      status = CyzGetRegistryKeyValue (keyHandle,
                                          L"PortIndex",
                                          sizeof(L"PortIndex"),
                                          &PConfig->PortIndex,
                                          sizeof (ULONG));

      if (!NT_SUCCESS(status)) {
         PConfig->PortIndex = MAXULONG; // just some invalid number (fanny)
      }

      status = CyzGetRegistryKeyValue(keyHandle, 
                                         L"FirmwareVersion",
                                         sizeof(L"FirmwareVersion"),
                                         &firmwareVersion,
                                         sizeof(ULONG));
      if (!NT_SUCCESS(status)) {
         firmwareVersion = 0;
         CyzDbgPrintEx(CYZERRORS, "CyzGetRegistryKeyValue FirmwareVersion "
                                  "failed - %x\n", status);
      }
      
//      status = CyzGetRegistryKeyValue (keyHandle,
//                                          L"PPPaware",
//                                          sizeof(L"PPPaware"),
//                                          &PConfig->PPPaware,
//                                          sizeof (ULONG));
//      if (!NT_SUCCESS(status)) {
//         PConfig->PPPaware = FALSE; // That's the default mode.
//      }

      status = CyzGetRegistryKeyValue (keyHandle,
                                          L"WriteComplete",
                                          sizeof(L"WriteComplete"),
                                          &PConfig->WriteComplete,
                                          sizeof (ULONG));
      if (!NT_SUCCESS(status)) {
         PConfig->WriteComplete = FALSE; // That's the default mode.
      }

      ZwClose (keyHandle);
   }

   //
   // Do some error checking on the configuration info we have.
   //
   // Make sure that the interrupt is non zero (which we defaulted
   // it to).
   //
   // Make sure that the portaddress is non zero (which we defaulted
   // it to).
   //
   // Make sure that the DosDevices is not NULL (which we defaulted
   // it to).
   //
   // We need to make sure that if an interrupt status
   // was specified, that a port index was also specfied,
   // and if so that the port index is <= maximum ports
   // on a board.
   //
   // We should also validate that the bus type and number
   // are correct.
   //
   // We will also validate that the interrupt mode makes
   // sense for the bus.
   //

//*****************************************
// Error Injection
//   PConfig->PhysicalRuntime.LowPart = NULL;
//   PConfig->PhysicalBoardMemory.LowPart = NULL;
//   PConfig->OriginalVector = NULL;
//   PConfig->PortIndex = MAXULONG;
//*****************************************

   if (!PConfig->PhysicalRuntime.LowPart) {

      //
      // Ehhhh! Lose Game.
      //

      CyzLogError(
                    PDevObj->DriverObject,
                    NULL,
                    PConfig->PhysicalBoardMemory,
                    CyzPhysicalZero,
                    0,
                    0,
                    0,
                    PConfig->PortIndex+1,
                    STATUS_SUCCESS,
                    CYZ_INVALID_RUNTIME_REGISTERS,
                    pDevExt->DeviceName.Length,
                    pDevExt->DeviceName.Buffer,
                    0,
                    NULL
                    );

      CyzDbgPrintEx(CYZERRORS,"Bogus Runtime address %x\n",
                    PConfig->PhysicalRuntime.LowPart);

      //status = CYZ_INVALID_RUNTIME_REGISTERS;
      status = STATUS_INSUFFICIENT_RESOURCES;
      goto PortInfoCleanUp;
   }

   if (!PConfig->PhysicalBoardMemory.LowPart) {

      //
      // Ehhhh! Lose Game.
      //

      CyzLogError(
                    PDevObj->DriverObject,
                    NULL,
                    PConfig->PhysicalBoardMemory,
                    CyzPhysicalZero,
                    0,
                    0,
                    0,
                    PConfig->PortIndex+1,
                    STATUS_SUCCESS,
                    CYZ_INVALID_BOARD_MEMORY,
                    pDevExt->DeviceName.Length,
                    pDevExt->DeviceName.Buffer,
                    0,
                    NULL
                    );

      CyzDbgPrintEx(CYZERRORS,"Bogus board address %x\n",
                    PConfig->PhysicalBoardMemory.LowPart);

      //status = CYZ_INVALID_BOARD_MEMORY;
      status = STATUS_INSUFFICIENT_RESOURCES;
      goto PortInfoCleanUp;
   }
#ifndef POLL
   if (!PConfig->OriginalVector) {

      //
      // Ehhhh! Lose Game.
      //

      CyzLogError(
                    pDevExt->DriverObject,
                    NULL,
                    PConfig->PhysicalBoardMemory,
                    CyzPhysicalZero,
                    0,
                    0,
                    0,
                    PConfig->PortIndex+1,
                    STATUS_SUCCESS,
                    CYZ_INVALID_INTERRUPT,
                    pDevExt->DeviceName.Length,
                    pDevExt->DeviceName.Buffer,
                    0,
                    NULL
                    );

      CyzDbgPrintEx(CYZERRORS, "Bogus vector %x\n", PConfig->OriginalVector);

      //status = CYZ_INVALID_INTERRUPT;
      status = STATUS_INSUFFICIENT_RESOURCES;
      goto PortInfoCleanUp;
   }
#endif

   if (firmwareVersion < Z_COMPATIBLE_FIRMWARE) {

      UNICODE_STRING FwVersion;
      WCHAR FwVersionBuffer[10];
      RtlInitUnicodeString(&FwVersion, NULL);
      FwVersion.MaximumLength = sizeof(FwVersionBuffer);
      FwVersion.Buffer = FwVersionBuffer;
      RtlIntegerToUnicodeString(Z_COMPATIBLE_FIRMWARE, 16, &FwVersion);

      CyzDbgPrintEx(CYZERRORS,"Incompatible firmware\n");
      CyzLogError( pDevExt->DriverObject,NULL,
                   PConfig->PhysicalBoardMemory,CyzPhysicalZero,
                   0,0,0,0,status,CYZ_INCOMPATIBLE_FIRMWARE,
                   FwVersion.Length,FwVersion.Buffer,0,NULL);
      status = STATUS_SERIAL_NO_DEVICE_INITED;
      goto PortInfoCleanUp;
   }

   if (PConfig->PortIndex >= CYZ_MAX_PORTS) {

      CyzLogError(
                    pDevExt->DriverObject,
                    NULL,
                    PConfig->PhysicalBoardMemory,
                    CyzPhysicalZero,
                    0,
                    0,
                    0,
                    PConfig->PortIndex,
                    STATUS_SUCCESS,
                    CYZ_PORT_INDEX_TOO_HIGH,
                    pDevExt->DeviceName.Length,
                    pDevExt->DeviceName.Buffer,
                    0,
                    NULL
                    );

      CyzDbgPrintEx (CYZERRORS,"Port index too large %x\n",PConfig->PortIndex);

      //status = CYZ_PORT_INDEX_TOO_HIGH;
      status = STATUS_INSUFFICIENT_RESOURCES;
      goto PortInfoCleanUp;
   }   

   //
   // We don't want to cause the hal to have a bad day,
   // so let's check the interface type and bus number.
   //
   // We only need to check the registry if they aren't
   // equal to the defaults.
   //

   if (PConfig->BusNumber != 0) {

      BOOLEAN foundIt;

      //**************************************************
      // Error Injection
      //    PConfig->InterfaceType = MaximumInterfaceType;
      //**************************************************

      if (PConfig->InterfaceType >= MaximumInterfaceType) {

         //
         // Ehhhh! Lose Game.
         //

         CyzLogError(
                       pDevExt->DriverObject,
                       NULL,
                       PConfig->PhysicalBoardMemory,
                       CyzPhysicalZero,
                       0,
                       0,
                       0,
                       PConfig->PortIndex+1,
                       STATUS_SUCCESS,
                       CYZ_UNKNOWN_BUS,
                       pDevExt->DeviceName.Length,
                       pDevExt->DeviceName.Buffer,
                       0,
                       NULL
                       );

         CyzDbgPrintEx(CYZERRORS, "Invalid Bus type %x\n",
                          PConfig->BusNumber);

         //status = CYZ_UNKNOWN_BUS;
         status = STATUS_INSUFFICIENT_RESOURCES;
         goto PortInfoCleanUp;
      }

      IoQueryDeviceDescription(
                              (INTERFACE_TYPE *)&PConfig->InterfaceType,
                              &zero,
                              NULL,
                              NULL,
                              NULL,
                              NULL,
                              CyzItemCallBack,
                              &foundIt
                              );

      //**************************************************
      // Error Injection
      //      foundIt = FALSE;
      //**************************************************

      if (!foundIt) {

         CyzLogError(
                       pDevExt->DriverObject,
                       NULL,
                       PConfig->PhysicalBoardMemory,
                       CyzPhysicalZero,
                       0,
                       0,
                       0,
                       PConfig->PortIndex+1,
                       STATUS_SUCCESS,
                       CYZ_BUS_NOT_PRESENT,
                       pDevExt->DeviceName.Length,
                       pDevExt->DeviceName.Buffer,
                       0,
                       NULL
                       );
         CyzDbgPrintEx(CYZERRORS, "There aren't that many of those\n"
                          "busses on this system,%x\n", PConfig->BusNumber);

         //status = CYZ_BUS_NOT_PRESENT;
         status = STATUS_INSUFFICIENT_RESOURCES;
         goto PortInfoCleanUp;

      }

   }   // if (PConfig->BusNumber != 0)

   status = STATUS_SUCCESS;

   //
   // Dump out the port configuration.
   //

   CyzDbgPrintEx(CYZDIAG1, "Runtime Memory address: %x\n",
                 PConfig->PhysicalRuntime.LowPart);

   CyzDbgPrintEx(CYZDIAG1, "Board Memory address: %x\n",
                 PConfig->PhysicalBoardMemory.LowPart);

   CyzDbgPrintEx(CYZDIAG1, "Com Port Index: %x\n",
                 PConfig->PortIndex);

   CyzDbgPrintEx(CYZDIAG1, "Com Port BusNumber: %x\n",
                 PConfig->BusNumber);

   CyzDbgPrintEx(CYZDIAG1, "Com Runtime AddressSpace: %x\n",
                 PConfig->RuntimeAddressSpace);

   CyzDbgPrintEx(CYZDIAG1, "Com Board AddressSpace: %x\n",
                 PConfig->BoardMemoryAddressSpace);

   CyzDbgPrintEx(CYZDIAG1, "Com InterfaceType: %x\n",
                 PConfig->InterfaceType);
#ifndef POLL
   CyzDbgPrintEx(CYZDIAG1, "Com InterruptMode: %x\n",
                 PConfig->InterruptMode);

   CyzDbgPrintEx(CYZDIAG1, "Com OriginalVector: %x\n",
                 PConfig->OriginalVector);

   CyzDbgPrintEx(CYZDIAG1, "Com OriginalIrql: %x\n",
                 PConfig->OriginalIrql);
#endif
   PortInfoCleanUp:;

   return status;
}


NTSTATUS
CyzReadSymName(IN PCYZ_DEVICE_EXTENSION PDevExt, IN HANDLE hRegKey,
               OUT PUNICODE_STRING PSymName, OUT PWCHAR *PpRegName)
{
   NTSTATUS status;
   UNICODE_STRING linkName;
   PDRIVER_OBJECT pDrvObj;
   PDEVICE_OBJECT pDevObj;

   pDevObj = PDevExt->DeviceObject;
   pDrvObj = pDevObj->DriverObject;
   *PpRegName = NULL;

   RtlZeroMemory(&linkName, sizeof(UNICODE_STRING));

   linkName.MaximumLength = SYMBOLIC_NAME_LENGTH*sizeof(WCHAR);
   linkName.Buffer = ExAllocatePool(PagedPool | POOL_COLD_ALLOCATION, linkName.MaximumLength
                                    + sizeof(WCHAR));

   if (linkName.Buffer == NULL) {
      CyzLogError(pDrvObj, pDevObj, CyzPhysicalZero, CyzPhysicalZero,
                  0, 0, 0, 19, STATUS_SUCCESS, CYZ_INSUFFICIENT_RESOURCES,
                  0, NULL, 0, NULL);
      CyzDbgPrintEx(CYZERRORS, "Couldn't allocate memory for device name\n");

      status = STATUS_INSUFFICIENT_RESOURCES;
      goto CyzReadSymNameError;

   }

   RtlZeroMemory(linkName.Buffer, linkName.MaximumLength + sizeof(WCHAR));


   *PpRegName = ExAllocatePool(PagedPool | POOL_COLD_ALLOCATION, SYMBOLIC_NAME_LENGTH * sizeof(WCHAR)
                               + sizeof(WCHAR));

   if (*PpRegName == NULL) {
      CyzLogError(pDrvObj, pDevObj, CyzPhysicalZero, CyzPhysicalZero,
                  0, 0, 0, 19, STATUS_SUCCESS, CYZ_INSUFFICIENT_RESOURCES,
                  0, NULL, 0, NULL);
      CyzDbgPrintEx(CYZERRORS, "Couldn't allocate memory for buffer\n");

      status = STATUS_INSUFFICIENT_RESOURCES;
      goto CyzReadSymNameError;

   }

   //
   // Fetch PortName which contains the suggested REG_SZ symbolic name.
   //

   status = CyzGetRegistryKeyValue(hRegKey, L"PortName",
                                   sizeof(L"PortName"), *PpRegName,
                                   SYMBOLIC_NAME_LENGTH * sizeof(WCHAR));

   if (!NT_SUCCESS(status)) {

      //
      // This is for PCMCIA which currently puts the name under Identifier.
      //

      status = CyzGetRegistryKeyValue(hRegKey, L"Identifier",
                                      sizeof(L"Identifier"),
                                      *PpRegName, SYMBOLIC_NAME_LENGTH
                                      * sizeof(WCHAR));

      if (!NT_SUCCESS(status)) {

         //
         // Hmm.  Either we have to pick a name or bail...
         //
         // ...we will bail.
         //

         CyzDbgPrintEx(CYZERRORS, "Getting PortName/Identifier failed - "
                                  "%x\n", status);
         goto CyzReadSymNameError;
      }

   }


   //
   // Create the "\\DosDevices\\<symbolicName>" string
   //

   RtlAppendUnicodeToString(&linkName, L"\\");
   RtlAppendUnicodeToString(&linkName, DEFAULT_DIRECTORY);
   RtlAppendUnicodeToString(&linkName, L"\\");
   RtlAppendUnicodeToString(&linkName, *PpRegName);

   PSymName->MaximumLength = linkName.Length + sizeof(WCHAR);
   PSymName->Buffer = ExAllocatePool(PagedPool | POOL_COLD_ALLOCATION, PSymName->MaximumLength);

   if (PSymName->Buffer == NULL) {
      status = STATUS_INSUFFICIENT_RESOURCES;
      goto CyzReadSymNameError;
   }

   RtlZeroMemory(PSymName->Buffer, PSymName->MaximumLength);

   RtlAppendUnicodeStringToString(PSymName, &linkName);

   CyzDbgPrintEx(CYZDIAG1, "Read name %wZ\n", PSymName);

CyzReadSymNameError:

   if (linkName.Buffer != NULL) {
      ExFreePool(linkName.Buffer);
      linkName.Buffer = NULL;
   }

   if (!NT_SUCCESS(status)) {
      if (*PpRegName != NULL) {
         ExFreePool(*PpRegName);
         *PpRegName = NULL;
      }
   }

   return status;

}



NTSTATUS
CyzDoExternalNaming(IN PCYZ_DEVICE_EXTENSION PDevExt,
                       IN PDRIVER_OBJECT PDrvObj)

/*++

Routine Description:

    This routine will be used to create a symbolic link
    to the driver name in the given object directory.

    It will also create an entry in the device map for
    this device - IF we could create the symbolic link.

Arguments:

    Extension - Pointer to the device extension.

Return Value:

    None.

--*/

{
   NTSTATUS status = STATUS_SUCCESS;
   HANDLE keyHandle;
   WCHAR *pRegName = NULL;
   UNICODE_STRING linkName;
   PDEVICE_OBJECT pLowerDevObj, pDevObj;
   ULONG bufLen;


   PAGED_CODE();


   pDevObj = PDevExt->DeviceObject;
   pLowerDevObj = PDevExt->LowerDeviceObject;

   status = IoOpenDeviceRegistryKey(PDevExt->Pdo, PLUGPLAY_REGKEY_DEVICE,
                                    STANDARD_RIGHTS_READ, &keyHandle);

   //
   // Check to see if we are allowed to do external naming; if not,
   // then we just return success
   //


   if (status != STATUS_SUCCESS) {
      return status;
   }


   CyzGetRegistryKeyValue(keyHandle, L"CyzSkipExternalNaming",
                             sizeof(L"CyzSkipExternalNaming"),
                             &PDevExt->SkipNaming, sizeof(ULONG));

   if (PDevExt->SkipNaming) {
      ZwClose(keyHandle);
      return STATUS_SUCCESS;
   }

   RtlZeroMemory(&linkName, sizeof(UNICODE_STRING));

   linkName.MaximumLength = SYMBOLIC_NAME_LENGTH*sizeof(WCHAR);
   linkName.Buffer = ExAllocatePool(PagedPool, linkName.MaximumLength
                                    + sizeof(WCHAR)); //TODO:"| POOL_COLD_ALLOCATION"???

   //************************************
   //Error Injection
   // 
   //if (linkName.Buffer != NULL) {
   //   ExFreePool(linkName.Buffer);
   //}
   //linkName.Buffer = NULL;
   //************************************

   if (linkName.Buffer == NULL) {
      CyzLogError(PDrvObj, pDevObj, CyzPhysicalZero, CyzPhysicalZero,
                  0, 0, 0, 71, STATUS_SUCCESS, CYZ_INSUFFICIENT_RESOURCES,
                  0, NULL, 0, NULL);
      CyzDbgPrintEx(CYZERRORS, "Couldn't allocate memory for device name\n");

      status = STATUS_INSUFFICIENT_RESOURCES;
      ZwClose(keyHandle);
      goto CyzDoExternalNamingError;

   }

   RtlZeroMemory(linkName.Buffer, linkName.MaximumLength + sizeof(WCHAR));


   pRegName = ExAllocatePool(PagedPool, SYMBOLIC_NAME_LENGTH * sizeof(WCHAR)
                            + sizeof(WCHAR));  //TODO:"| POOL_COLD_ALLOCATION"???

   //************************************
   //Error Injection
   //
   //if (pRegName != NULL) {
   //   ExFreePool(pRegName);
   //}
   //pRegName = NULL;
   //************************************

   if (pRegName == NULL) {
      CyzLogError(PDrvObj, pDevObj, CyzPhysicalZero, CyzPhysicalZero,
                     0, 0, 0, 72, STATUS_SUCCESS, CYZ_INSUFFICIENT_RESOURCES,
                     0, NULL, 0, NULL);
      CyzDbgPrintEx(CYZERRORS, "Couldn't allocate memory for buffer\n");

      status = STATUS_INSUFFICIENT_RESOURCES;
      ZwClose(keyHandle);
      goto CyzDoExternalNamingError;

   }

   //
   // Fetch PortName which contains the suggested REG_SZ symbolic name.
   //

   status = CyzGetRegistryKeyValue(keyHandle, L"PortName",
                                   sizeof(L"PortName"), pRegName,
                                   SYMBOLIC_NAME_LENGTH * sizeof(WCHAR));

   if (!NT_SUCCESS(status)) {

      //
      // This is for PCMCIA which currently puts the name under Identifier.
      //

      status = CyzGetRegistryKeyValue(keyHandle, L"Identifier",
                                      sizeof(L"Identifier"),
                                      pRegName, SYMBOLIC_NAME_LENGTH
                                      * sizeof(WCHAR));

      if (!NT_SUCCESS(status)) {

         //
         // Hmm.  Either we have to pick a name or bail...
         //
         // ...we will bail.
         //

         CyzDbgPrintEx(CYZERRORS, "Getting PortName/Identifier failed - "
                                  "%x\n", status);
         ZwClose (keyHandle);
         goto CyzDoExternalNamingError;
      }

   }

   ZwClose (keyHandle);

   bufLen = wcslen(pRegName) * sizeof(WCHAR) + sizeof(UNICODE_NULL);

   PDevExt->WmiIdentifier.Buffer = ExAllocatePool(PagedPool, bufLen);

   //************************************
   //Error Injection
   //
   //if (PDevExt->WmiIdentifier.Buffer != NULL) {
   //   ExFreePool(PDevExt->WmiIdentifier.Buffer);
   //}
   //PDevExt->WmiIdentifier.Buffer = NULL;
   //************************************

   if (PDevExt->WmiIdentifier.Buffer == NULL) {
      CyzLogError(PDrvObj, pDevObj, CyzPhysicalZero, CyzPhysicalZero,
                  0, 0, 0, 73, STATUS_SUCCESS, CYZ_INSUFFICIENT_RESOURCES,
                  0, NULL, 0, NULL);
      CyzDbgPrintEx(CYZERRORS, "Couldn't allocate memory for WMI name\n");

      status = STATUS_INSUFFICIENT_RESOURCES;
      goto CyzDoExternalNamingError;
   }

   RtlZeroMemory(PDevExt->WmiIdentifier.Buffer, bufLen);

   PDevExt->WmiIdentifier.Length = 0;
   PDevExt->WmiIdentifier.MaximumLength = (USHORT)bufLen - 1;
   RtlAppendUnicodeToString(&PDevExt->WmiIdentifier, pRegName);

   //
   // Create the "\\DosDevices\\<symbolicName>" string
   //
   RtlAppendUnicodeToString(&linkName, L"\\");
   RtlAppendUnicodeToString(&linkName, DEFAULT_DIRECTORY);
   RtlAppendUnicodeToString(&linkName, L"\\");
   RtlAppendUnicodeToString(&linkName, pRegName);

   //
   // Allocate Pool and save the symbolic link name in the device extension.
   //
   PDevExt->SymbolicLinkName.MaximumLength = linkName.Length + sizeof(WCHAR);
   PDevExt->SymbolicLinkName.Buffer
      = ExAllocatePool(PagedPool, PDevExt->SymbolicLinkName.MaximumLength); 
                       //TODO:"| POOL_COLD_ALLOCATION"???

   if (!PDevExt->SymbolicLinkName.Buffer) {

      CyzLogError(PDrvObj, pDevObj, CyzPhysicalZero, CyzPhysicalZero,
                  0, 0, 0, 74, STATUS_SUCCESS, CYZ_INSUFFICIENT_RESOURCES,
                  0, NULL, 0, NULL);
      CyzDbgPrintEx(CYZERRORS, "Couldn't allocate memory for symbolic link "
                               "name\n");

      status = STATUS_INSUFFICIENT_RESOURCES;
      goto CyzDoExternalNamingError;
   }

   //
   // Zero fill it.
   //

   RtlZeroMemory(PDevExt->SymbolicLinkName.Buffer,
                 PDevExt->SymbolicLinkName.MaximumLength);

   RtlAppendUnicodeStringToString(&PDevExt->SymbolicLinkName,
                                  &linkName);

   PDevExt->DosName.Buffer = ExAllocatePool(PagedPool, 64 + sizeof(WCHAR));

   if (!PDevExt->DosName.Buffer) {

      CyzLogError(PDrvObj, pDevObj, CyzPhysicalZero, CyzPhysicalZero,
                  0, 0, 0, 75, STATUS_SUCCESS, CYZ_INSUFFICIENT_RESOURCES,
                  0, NULL, 0, NULL);
      CyzDbgPrintEx(CYZERRORS, "Couldn't allocate memory for Dos name\n");

      status =  STATUS_INSUFFICIENT_RESOURCES;
      goto CyzDoExternalNamingError;
   }


   PDevExt->DosName.MaximumLength = 64 + sizeof(WCHAR);

   //
   // Zero fill it.
   //

   PDevExt->DosName.Length = 0;

   RtlZeroMemory(PDevExt->DosName.Buffer,
                 PDevExt->DosName.MaximumLength);

   RtlAppendUnicodeToString(&PDevExt->DosName, pRegName);
   RtlZeroMemory(((PUCHAR)(&PDevExt->DosName.Buffer[0]))
                 + PDevExt->DosName.Length, sizeof(WCHAR));

   CyzDbgPrintEx(CYZDIAG1, "DosName is %wZ\n", &PDevExt->DosName);

   status = IoCreateSymbolicLink (&PDevExt->SymbolicLinkName,
                                  &PDevExt->DeviceName);

   //************************************
   //Error Injection
   //IoDeleteSymbolicLink(&PDevExt->SymbolicLinkName);
   //status = STATUS_INVALID_PARAMETER;
   //************************************

   if (!NT_SUCCESS(status)) {

      //
      // Oh well, couldn't create the symbolic link.  No point
      // in trying to create the device map entry.
      //

      CyzLogError(PDrvObj, pDevObj, CyzPhysicalZero, CyzPhysicalZero,
                     0, 0, 0, PDevExt->PortIndex+1, status, CYZ_NO_SYMLINK_CREATED,
                     PDevExt->DeviceName.Length + sizeof(WCHAR),
                     PDevExt->DeviceName.Buffer, 0, NULL);

      CyzDbgPrintEx(CYZERRORS, "Couldn't create the symbolic link\n"
                               "for port %wZ\n", &PDevExt->DeviceName);

      goto CyzDoExternalNamingError;

   }

   PDevExt->CreatedSymbolicLink = TRUE;

   status = RtlWriteRegistryValue(RTL_REGISTRY_DEVICEMAP, L"SERIALCOMM",
                                  PDevExt->DeviceName.Buffer, REG_SZ,
                                  PDevExt->DosName.Buffer,
                                  PDevExt->DosName.Length + sizeof(WCHAR));

   //************************************
   //Error Injection
   //RtlDeleteRegistryValue(RTL_REGISTRY_DEVICEMAP, SERIAL_DEVICE_MAP,
   //                                  PDevExt->DeviceName.Buffer);
   //status = STATUS_INVALID_PARAMETER;
   //************************************

   if (!NT_SUCCESS(status)) {

      CyzLogError(PDrvObj, pDevObj, CyzPhysicalZero, CyzPhysicalZero,
                  0, 0, 0, PDevExt->PortIndex+1, status, CYZ_NO_DEVICE_MAP_CREATED,
                  PDevExt->DeviceName.Length + sizeof(WCHAR),
                  PDevExt->DeviceName.Buffer, 0, NULL);

      CyzDbgPrintEx(CYZERRORS, "Couldn't create the device map entry\n"
                               "------- for port %wZ\n", &PDevExt->DeviceName);

      goto CyzDoExternalNamingError;
   }

   PDevExt->CreatedSerialCommEntry = TRUE;

   //
   // Make the device visible via a device association as well.
   // The reference string is the eight digit device index
   //

   status = IoRegisterDeviceInterface(PDevExt->Pdo, (LPGUID)&GUID_CLASS_COMPORT,
                                      NULL, &PDevExt->DeviceClassSymbolicName);

   if (!NT_SUCCESS(status)) {
      CyzDbgPrintEx(CYZERRORS, "Couldn't register class association\n"
                               "for port %wZ\n", &PDevExt->DeviceName);

      PDevExt->DeviceClassSymbolicName.Buffer = NULL;
      goto CyzDoExternalNamingError;
   }


   //
   // Now set the symbolic link for the association
   //

   status = IoSetDeviceInterfaceState(&PDevExt->DeviceClassSymbolicName,
                                         TRUE);

   if (!NT_SUCCESS(status)) {
      CyzDbgPrintEx(CYZERRORS, "Couldn't set class association"
                               " for port %wZ\n", &PDevExt->DeviceName);
   }

   CyzDoExternalNamingError:;

   //
   // Clean up error conditions
   //

   if (!NT_SUCCESS(status)) {
      if (PDevExt->DosName.Buffer != NULL) {
         ExFreePool(PDevExt->DosName.Buffer);
         PDevExt->DosName.Buffer = NULL;
      }

      if (PDevExt->CreatedSymbolicLink ==  TRUE) {
         IoDeleteSymbolicLink(&PDevExt->SymbolicLinkName);
         PDevExt->CreatedSymbolicLink = FALSE;
      }

      if (PDevExt->SymbolicLinkName.Buffer != NULL) {
         ExFreePool(PDevExt->SymbolicLinkName.Buffer);
         PDevExt->SymbolicLinkName.Buffer = NULL;
      }

      if (PDevExt->DeviceName.Buffer != NULL) {
         RtlDeleteRegistryValue(RTL_REGISTRY_DEVICEMAP, SERIAL_DEVICE_MAP,
                                PDevExt->DeviceName.Buffer);
      }

      if (PDevExt->DeviceClassSymbolicName.Buffer) {
         IoSetDeviceInterfaceState(&PDevExt->DeviceClassSymbolicName, FALSE);
         ExFreePool(PDevExt->DeviceClassSymbolicName.Buffer); //Added in DDK 2269
         PDevExt->DeviceClassSymbolicName.Buffer = NULL;      //Added in DDK 2269
      }

      if (PDevExt->WmiIdentifier.Buffer != NULL) {
         ExFreePool(PDevExt->WmiIdentifier.Buffer);
         PDevExt->WmiIdentifier.Buffer = NULL;
      }
   }

   //
   // Always clean up our temp buffers.
   //

   if (linkName.Buffer != NULL) {
      ExFreePool(linkName.Buffer);
   }

   if (pRegName != NULL) {
      ExFreePool(pRegName);
   }

   return status;
}





VOID
CyzUndoExternalNaming(IN PCYZ_DEVICE_EXTENSION Extension)

/*++

Routine Description:

    This routine will be used to delete a symbolic link
    to the driver name in the given object directory.

    It will also delete an entry in the device map for
    this device if the symbolic link had been created.

Arguments:

    Extension - Pointer to the device extension.

Return Value:

    None.

--*/

{

   NTSTATUS status;
   HANDLE keyHandle;

   PAGED_CODE();

   CyzDbgPrintEx(CYZDIAG3, "In CyzUndoExternalNaming for "
                           "extension: %x of port %wZ\n",
                            Extension,&Extension->DeviceName);

   //
   // Maybe there is nothing for us to do
   //

   if (Extension->SkipNaming) {
      return;
   }

   //
   // We're cleaning up here.  One reason we're cleaning up
   // is that we couldn't allocate space for the directory
   // name or the symbolic link.
   //

   if (Extension->SymbolicLinkName.Buffer && Extension->CreatedSymbolicLink) {

      if (Extension->DeviceClassSymbolicName.Buffer) {
         status = IoSetDeviceInterfaceState(&Extension->DeviceClassSymbolicName,
                                            FALSE);

         //
         // IoRegisterDeviceClassInterface() allocated this string for us,
         // and we no longer need it.
         //

         ExFreePool(Extension->DeviceClassSymbolicName.Buffer);
         Extension->DeviceClassSymbolicName.Buffer = NULL;
      }

      //
      // Before we delete the symlink, re-read the PortName
      // from the registry in case we were renamed in user mode.
      //

      status = IoOpenDeviceRegistryKey(Extension->Pdo, PLUGPLAY_REGKEY_DEVICE,
                                       STANDARD_RIGHTS_READ, &keyHandle);

      if (status == STATUS_SUCCESS) {
         UNICODE_STRING symLinkName;
         PWCHAR pRegName;

         RtlInitUnicodeString(&symLinkName, NULL);

         status = CyzReadSymName(Extension, keyHandle, &symLinkName,
                                 &pRegName);

         if (status == STATUS_SUCCESS) {

            CyzDbgPrintEx(CYZDIAG1, "Deleting Link %wZ\n", &symLinkName);
            IoDeleteSymbolicLink(&symLinkName);

            ExFreePool(symLinkName.Buffer);
            ExFreePool(pRegName);
         }

         ZwClose(keyHandle);
      }
   }

   if (Extension->WmiIdentifier.Buffer) {
      ExFreePool(Extension->WmiIdentifier.Buffer);
      Extension->WmiIdentifier.MaximumLength
         = Extension->WmiIdentifier.Length = 0;
      Extension->WmiIdentifier.Buffer = NULL;
   }

   //
   // We're cleaning up here.  One reason we're cleaning up
   // is that we couldn't allocate space for the NtNameOfPort.
   //

   if ((Extension->DeviceName.Buffer != NULL)
        && Extension->CreatedSerialCommEntry) {

      status = RtlDeleteRegistryValue(RTL_REGISTRY_DEVICEMAP, SERIAL_DEVICE_MAP,
                                     Extension->DeviceName.Buffer);
      //************************************
      //Error Injection
      //status = STATUS_INVALID_PARAMETER;
      //************************************

      if (!NT_SUCCESS(status)) {

         CyzLogError(
                       Extension->DeviceObject->DriverObject,
                       Extension->DeviceObject,
                       Extension->OriginalBoardMemory,
                       CyzPhysicalZero,
                       0,
                       0,
                       0,
                       Extension->PortIndex+1,
                       status,
                       CYZ_NO_DEVICE_MAP_DELETED,
                       Extension->DeviceName.Length+sizeof(WCHAR),
                       Extension->DeviceName.Buffer,
                       0,
                       NULL
                       );
         CyzDbgPrintEx(CYZERRORS, "Couldn't delete value entry %wZ\n",
                       &Extension->DeviceName);

      }
   }
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyzport\cyzpoll.c ===
/*--------------------------------------------------------------------------
*
*   Copyright (C) Cyclades Corporation, 1997-2001.
*   All rights reserved.
*
*   Cyclades-Z Port Driver
*	
*   This file:      cyzpoll.c
*
*   Description:    This module contains the code related to the polling
*                   of the hardware. It replaces the ISR.
*
*   Notes:          This code supports Windows 2000 and Windows XP,
*                   x86 and IA64 processors.
*
*   Complies with Cyclades SW Coding Standard rev 1.3.
*
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*   Change History
*
*--------------------------------------------------------------------------
*
*
*--------------------------------------------------------------------------
*/

#include "precomp.h"

#ifdef ALLOC_PRAGMA
#pragma alloc_text(PAGESER,CyzPutChar)
#pragma alloc_text(PAGESER,CyzProcessLSR)
#pragma alloc_text(PAGESER,CyzTxStart)
#pragma alloc_text(PAGESER,CyzQueueCompleteWrite)
#endif

static const PHYSICAL_ADDRESS CyzPhysicalZero = {0};


VOID
CyzPollingDpc(
   IN PKDPC Dpc,
   IN PVOID DeferredContext,
   IN PVOID SystemContext1,
   IN PVOID SystemContext2
    )
/*--------------------------------------------------------------------------
    
Routine Description: 

	This is the polling routine for the Cyclades-Z driver. It replaces
	the ISR, as we are not enabling interrupts.

Arguments:

	Dpc - Not Used.
	
	DeferredContext - Really points to the device extention.
	
	SystemContext1 - Not used.
	
	SystemContext2 - Not used.

Return Value: 

	None.
	
--------------------------------------------------------------------------*/
{

    PCYZ_DISPATCH Dispatch = DeferredContext;
    PCYZ_DEVICE_EXTENSION Extension, dbExtension; //Note: db=doorbell
    struct INT_QUEUE *pt_zf_int_queue;
    struct BUF_CTRL *buf_ctrl;
    ULONG qu_get, qu_put;
    ULONG channel, dbChannel; //Note: db=doorbell
    ULONG fwcmd_param;
    ULONG rx_bufsize, rx_get, rx_put;
    UCHAR loc_doorbell;
    UCHAR rxchar;


    UNREFERENCED_PARAMETER(Dpc);
    UNREFERENCED_PARAMETER(SystemContext1);
    UNREFERENCED_PARAMETER(SystemContext2);

    KeAcquireSpinLockAtDpcLevel(&Dispatch->PollingLock);

    if (!Dispatch->PollingStarted) {
         Dispatch->PollingDrained = TRUE;
         KeSetEvent(&Dispatch->PendingDpcEvent, IO_NO_INCREMENT, FALSE);
         goto EndDpc;
    }

    for (channel=0; channel<Dispatch->NChannels; channel++) {

        Extension = Dispatch->Extensions[channel];
        if (Extension == NULL) {
            continue;
        }

        pt_zf_int_queue = Extension->PtZfIntQueue;
        if (pt_zf_int_queue == NULL) {
            continue;
        }
        qu_get = CYZ_READ_ULONG(&pt_zf_int_queue->get);
        qu_put = CYZ_READ_ULONG(&pt_zf_int_queue->put);

        while (qu_get != qu_put) {

            if (qu_get >= QUEUE_SIZE) {
                // bad value, reset qu_get
                qu_get = 0;
                break;
            }
            if (qu_put >= QUEUE_SIZE) {
                // bad value
                break;
            }           
           
            loc_doorbell = CYZ_READ_UCHAR(&pt_zf_int_queue->intr_code[qu_get]);
            dbChannel = CYZ_READ_ULONG(&pt_zf_int_queue->channel[qu_get]);
            if (dbChannel >= Dispatch->NChannels) {
               break;
            }
            // so far, only DCD status is sent on the fwcmd_param.
            fwcmd_param = CYZ_READ_ULONG(&pt_zf_int_queue->param[qu_get]);
            dbExtension = Dispatch->Extensions[dbChannel];
            if (!dbExtension) {
                goto NextQueueGet;
            }
            KeAcquireSpinLockAtDpcLevel(&dbExtension->PollLock);
            //-- Error Injection
            //loc_doorbell = C_CM_FATAL;
            //loc_doorbell = C_CM_CMDERROR;
            //----
            switch (loc_doorbell) {
            case C_CM_IOCTLW:
                //CyzDump (CYZDIAG5,("CyzPollingDpc C_CM_IOCTLW\n"));
                dbExtension->IoctlwProcessed = TRUE;
                break;
            case C_CM_CMD_DONE:
                //CyzDump (CYZDIAG5,("CyzPollingDpc C_CM_CMD_DONE\n"));
                break;
            case C_CM_RXHIWM:	// Reception above high watermark
            case C_CM_RXNNDT:	// Timeout without receiving more chars.
            case C_CM_INTBACK2: // Not used in polling mode.
                //CyzDump (CYZERRORS,
                //         ("CyzPollingDpc C_CM_RXHIWM,C_CM_RXNNDT,C_CM_INTBACK2\n"));
                break;
            case C_CM_TXBEMPTY:	// Firmware buffer empty
                //dbExtension->HoldingEmpty = TRUE;			
                //CyzDump (CYZDIAG5,("CyzPollingDpc C_CM_TXBEMPTY\n"));
                break;
            case C_CM_TXFEMPTY: // Hardware FIFO empty
                dbExtension->HoldingEmpty = TRUE;			
                //CyzDump (CYZDIAG5,("CyzPollingDpc C_CM_TXFEMPTY\n"));
                break;
            case C_CM_INTBACK:	// New transmission
                //CyzDump(CYZBUGCHECK,
                //        ("C_CM_INTBACK! We should not receive this...\n"));
                break;
            case C_CM_TXLOWWM:
                //CyzDump (CYZBUGCHECK,("CyzPollingDpc C_CM_TXLOWN\n"));
                break;
            case C_CM_MDCD:	// Modem
                dbExtension->DCDstatus = fwcmd_param;				
            case C_CM_MDSR:
            case C_CM_MRI: 
            case C_CM_MCTS:
                //CyzDump(CYZDIAG5,
                //      ("doorbell %x port%d\n",loc_doorbell,dbExtension->PortIndex+1));
                if (dbExtension->DeviceIsOpened) {
                   CyzHandleModemUpdate(dbExtension,FALSE,loc_doorbell);
                }
                break;
            case C_CM_RXBRK:
                //CyzDump (CYZERRORS,("CyzPollingDpc C_CM_RXBRK\n"));
                if (dbExtension->DeviceIsOpened) {
                    CyzProcessLSR(dbExtension,SERIAL_LSR_BI);
                }
                break;
            case C_CM_PR_ERROR:
                //dbExtension->PerfStats.ParityErrorCount++;
                //dbExtension->ErrorWord |= SERIAL_ERROR_PARITY;
                if (dbExtension->DeviceIsOpened) {
                    CyzProcessLSR(dbExtension,SERIAL_LSR_PE);
                }
                break;
            case C_CM_FR_ERROR:
                //dbExtension->PerfStats.FrameErrorCount++;
                //dbExtension->ErrorWord |= SERIAL_ERROR_FRAMING;
                if (dbExtension->DeviceIsOpened) {
                    CyzProcessLSR(dbExtension,SERIAL_LSR_FE);
                }
                break;
            case C_CM_OVR_ERROR:
                //dbExtension->PerfStats.SerialOverrunErrorCount++;
    	          //dbExtension->ErrorWord |= SERIAL_ERROR_OVERRUN;
                if (dbExtension->DeviceIsOpened) {
                    CyzProcessLSR(dbExtension,SERIAL_LSR_OE);
                }
                break;
            case C_CM_RXOFL:
                //dbExtension->PerfStats.SerialOverrunErrorCount++;
                //dbExtension->ErrorWord |= SERIAL_ERROR_OVERRUN;
                if (dbExtension->DeviceIsOpened) {
                    CyzProcessLSR(dbExtension,SERIAL_LSR_OE);				
                }
                break;
            case C_CM_CMDERROR:
                //CyzDump (CYZBUGCHECK,("CyzPollingDpc C_CM_CMDERROR\n"));
                CyzLogError( dbExtension->DriverObject,dbExtension->DeviceObject,
                             dbExtension->OriginalBoardMemory,CyzPhysicalZero,
                             0,0,0,dbExtension->PortIndex+1,STATUS_SUCCESS,
                             CYZ_FIRMWARE_CMDERROR,0,NULL,0,NULL);
                break;
            case C_CM_FATAL:
                //CyzDump (CYZBUGCHECK,("CyzPollingDpc C_CM_FATAL\n"));
                CyzLogError( dbExtension->DriverObject,dbExtension->DeviceObject,
                             dbExtension->OriginalBoardMemory,CyzPhysicalZero,
                             0,0,0,dbExtension->PortIndex+1,STATUS_SUCCESS,
                             CYZ_FIRMWARE_FATAL,0,NULL,0,NULL);
                break;			
            } // end switch
            KeReleaseSpinLockFromDpcLevel(&dbExtension->PollLock);			
NextQueueGet:
            if (qu_get == QUEUE_SIZE-1) {
                qu_get = 0;
            } else {
                qu_get++;
            }				

        } // end while (qu_get != qu_put)
        CYZ_WRITE_ULONG(&pt_zf_int_queue->get,qu_get);

        KeAcquireSpinLockAtDpcLevel(&Extension->PollLock);

        // Reception		

        buf_ctrl = Extension->BufCtrl;		
        rx_put = CYZ_READ_ULONG(&buf_ctrl->rx_put);
        rx_get = CYZ_READ_ULONG(&buf_ctrl->rx_get);
        rx_bufsize = Extension->RxBufsize;
        if ((rx_put >= rx_bufsize) || (rx_get >= rx_bufsize)) {
            CYZ_WRITE_ULONG(&buf_ctrl->rx_get,rx_get);
            KeReleaseSpinLockFromDpcLevel(&Extension->PollLock);
            continue;				
        }
			
        if (rx_put != rx_get) {
            if (Extension->DeviceIsOpened) {
						
                ULONG pppflag = 0;

                while ((rx_get != rx_put) &&
                        (Extension->CharsInInterruptBuffer < 
                         Extension->BufferSize) ){
					   
                    rxchar = CYZ_READ_UCHAR(&Extension->RxBufaddr[rx_get]);
                    Extension->PerfStats.ReceivedCount++;
                    Extension->WmiPerfData.ReceivedCount++;
					
                    rxchar &= Extension->ValidDataMask;
						
                    if (!rxchar &&	// NULL stripping
                        (Extension->HandFlow.FlowReplace &
                        SERIAL_NULL_STRIPPING)) {
   
                        goto nextchar1;
                    }
    
                    if((Extension->HandFlow.FlowReplace & SERIAL_AUTO_TRANSMIT)
                        && ((rxchar == Extension->SpecialChars.XonChar) ||
                            (rxchar == Extension->SpecialChars.XoffChar))) {
                        if (rxchar == Extension->SpecialChars.XoffChar) {
                            Extension->TXHolding |= CYZ_TX_XOFF;

                            if ((Extension->HandFlow.FlowReplace &
                                SERIAL_RTS_MASK) ==
                                SERIAL_TRANSMIT_TOGGLE) {
    
                                CyzInsertQueueDpc(
                                    &Extension->StartTimerLowerRTSDpc,
                                    NULL,
                                    NULL,
                                    Extension
                                    )?Extension->CountOfTryingToLowerRTS++:0;
                            }
                        } else {

                            if (Extension->TXHolding & CYZ_TX_XOFF) {
                                Extension->TXHolding &= ~CYZ_TX_XOFF;
                            }
                        }
                        goto nextchar1;
                    }
                    // Check to see if we should note the receive
                    // character or special character event.
                    if (Extension->IsrWaitMask) {
                        if (Extension->IsrWaitMask & SERIAL_EV_RXCHAR) {
                            Extension->HistoryMask |= SERIAL_EV_RXCHAR;
                        }
                        if ((Extension->IsrWaitMask & SERIAL_EV_RXFLAG) &&
                            (Extension->SpecialChars.EventChar == rxchar)) {
                            Extension->HistoryMask |= SERIAL_EV_RXFLAG;
                            if (rxchar == 0x7e){	//Optimized for RAS PPP
                                if (Extension->PPPaware) {
                                    if (pppflag == 0){
                                        pppflag = 1;
                                    } else {
                                        pppflag = 2;
                                    }
                                }
                            }
                        }
                        if (Extension->IrpMaskLocation && 
                            Extension->HistoryMask) {
                            *Extension->IrpMaskLocation = 
                                    Extension->HistoryMask;
                            Extension->IrpMaskLocation = NULL;
                            Extension->HistoryMask = 0;
                            Extension->CurrentWaitIrp->IoStatus.Information = 
                                    sizeof(ULONG);
                            CyzInsertQueueDpc(&Extension->CommWaitDpc,NULL,NULL,Extension);
                        }
                    }

                    CyzPutChar(Extension,rxchar);
	    
                    // If we're doing line status and modem
                    // status insertion then we need to insert
                    // a zero following the character we just
                    // placed into the buffer to mark that this
                    // was reception of what we are using to
                    // escape.
    
                    if (Extension->EscapeChar &&
                        (Extension->EscapeChar == rxchar)) {
                        CyzPutChar(Extension,SERIAL_LSRMST_ESCAPE);
                    }
                nextchar1:;
                    if (rx_get == rx_bufsize-1)
                        rx_get = 0;
                    else 
                        rx_get++;

                    if (pppflag == 2)	//Optimized for NT RAS PPP
                        break;

                } // end while
            } else {	// device is being closed, discard rx chars
                rx_get = rx_put;
            }

            CYZ_WRITE_ULONG(&buf_ctrl->rx_get,rx_get);
        } // end if (rx_put != rx_get)


        // Transmission

        if (Extension->DeviceIsOpened) {
            
            if (Extension->ReturnStatusAfterFwEmpty) {
    			
                if (Extension->ReturnWriteStatus && Extension->WriteLength) {
    			    
                    if (!CyzAmountInTxBuffer(Extension)) {
        
                        //txfempty Extension->HoldingEmpty = TRUE;
                        Extension->WriteLength = 0;
                        Extension->ReturnWriteStatus = FALSE;
    					
                        CyzQueueCompleteWrite(Extension);
                    }
                } else {
                    CyzTxStart(Extension);
                }				
            } else {  // We don't wait for the firmware buff empty to tx
                CyzTxStart(Extension);			
            }	
        } 

        KeReleaseSpinLockFromDpcLevel(&Extension->PollLock);


    } // end for (channel=0;channel<Dispatch->NChannels;channel++);

    //KeSetTimer(&Dispatch->PollingTimer,Dispatch->PollingTime,&Dispatch->PollingDpc);

EndDpc:
    KeReleaseSpinLockFromDpcLevel(&Dispatch->PollingLock);			

}



VOID
CyzPutChar(
    IN PCYZ_DEVICE_EXTENSION Extension,
    IN UCHAR CharToPut
    )
/*--------------------------------------------------------------------------
    CyzPutChar()
    
    Routine Description: This routine, which only runs at device level,
    takes care of placing a character into the typeahead (receive) buffer.

    Arguments:

    Extension - The serial device extension.

    Return Value: None.
--------------------------------------------------------------------------*/
{

   CYZ_LOCKED_PAGED_CODE();

    // If we have dsr sensitivity enabled then
    // we need to check the modem status register
    // to see if it has changed.

    if (Extension->HandFlow.ControlHandShake & SERIAL_DSR_SENSITIVITY) {
        CyzHandleModemUpdate(Extension,FALSE,0);

        if (Extension->RXHolding & CYZ_RX_DSR) {
            // We simply act as if we haven't seen the character if
            // dsr line is low.
            return;
        }
    }

    // If the xoff counter is non-zero then decrement it.
    // If the counter then goes to zero, complete that irp.

    if (Extension->CountSinceXoff) {
        Extension->CountSinceXoff--;
        if (!Extension->CountSinceXoff) {
            Extension->CurrentXoffIrp->IoStatus.Status = STATUS_SUCCESS;
            Extension->CurrentXoffIrp->IoStatus.Information = 0;
            CyzInsertQueueDpc(&Extension->XoffCountCompleteDpc,NULL,NULL,Extension);
        }
    }
    
    // Check to see if we are copying into the
    // users buffer or into the interrupt buffer.
    //
    // If we are copying into the user buffer
    // then we know there is always room for one more.
    // (We know this because if there wasn't room
    // then that read would have completed and we
    // would be using the interrupt buffer.)
    //
    // If we are copying into the interrupt buffer
    // then we will need to check if we have enough
    // room.

    if (Extension->ReadBufferBase != Extension->InterruptReadBuffer) {

        // Increment the following value so
        // that the interval timer (if one exists
        // for this read) can know that a character
        // has been read.

        Extension->ReadByIsr++;

        // We are in the user buffer.  Place the character into the buffer.
		// See if the read is complete.

        *Extension->CurrentCharSlot = CharToPut;

        if (Extension->CurrentCharSlot == Extension->LastCharSlot) {
	    
            // We've filled up the users buffer.
            // Switch back to the interrupt buffer
            // and send off a DPC to Complete the read.
            //
            // It is inherent that when we were using
            // a user buffer that the interrupt buffer
            // was empty.

            Extension->ReadBufferBase = Extension->InterruptReadBuffer;
            Extension->CurrentCharSlot = Extension->InterruptReadBuffer;
            Extension->FirstReadableChar = Extension->InterruptReadBuffer;
            Extension->LastCharSlot = Extension->InterruptReadBuffer +
						(Extension->BufferSize - 1);
            Extension->CharsInInterruptBuffer = 0;

            Extension->CurrentReadIrp->IoStatus.Information =
                IoGetCurrentIrpStackLocation(
                    Extension->CurrentReadIrp
                    )->Parameters.Read.Length;

            CyzInsertQueueDpc(&Extension->CompleteReadDpc,NULL,NULL,Extension);
        } else {
            // Not done with the users read.
            Extension->CurrentCharSlot++;
        }
    } else {
        // We need to see if we reached our flow
        // control threshold.  If we have then
        // we turn on whatever flow control the
        // owner has specified.  If no flow
        // control was specified, well..., we keep
        // trying to receive characters and hope that
        // we have enough room.  Note that no matter
        // what flow control protocol we are using, it
        // will not prevent us from reading whatever
        // characters are available.

        if ((Extension->HandFlow.ControlHandShake
             & SERIAL_DTR_MASK) ==
            SERIAL_DTR_HANDSHAKE) {

            // If we are already doing a
            // dtr hold then we don't have
            // to do anything else.
            if (!(Extension->RXHolding &
                  CYZ_RX_DTR)) {

                if ((Extension->BufferSize -
                     Extension->HandFlow.XoffLimit)
                    <= (Extension->CharsInInterruptBuffer+1)) {

                    Extension->RXHolding |= CYZ_RX_DTR;
					
                    #ifndef FIRMWARE_HANDSHAKE
                    CyzClrDTR(Extension);					
                    #endif
                }
            }
        }

        if ((Extension->HandFlow.FlowReplace
             & SERIAL_RTS_MASK) ==
            SERIAL_RTS_HANDSHAKE) {

            // If we are already doing a
            // rts hold then we don't have
            // to do anything else.

            if (!(Extension->RXHolding & CYZ_RX_RTS)) {

                if ((Extension->BufferSize -
                     Extension->HandFlow.XoffLimit)
                    <= (Extension->CharsInInterruptBuffer+1)) {
				
                    Extension->RXHolding |= CYZ_RX_RTS;
					
                    #ifndef FIRMWARE_HANDSHAKE
                    CyzClrRTS(Extension);					
                    #endif
                }
            }
        }

        if (Extension->HandFlow.FlowReplace & SERIAL_AUTO_RECEIVE) {
            // If we are already doing a
            // xoff hold then we don't have
            // to do anything else.

            if (!(Extension->RXHolding & CYZ_RX_XOFF)) {

                if ((Extension->BufferSize -
                     Extension->HandFlow.XoffLimit)
                    <= (Extension->CharsInInterruptBuffer+1)) {

                    Extension->RXHolding |= CYZ_RX_XOFF;

                    // If necessary cause an
                    // off to be sent.

                    CyzProdXonXoff(Extension,FALSE);					
                }
            }
        }

        if (Extension->CharsInInterruptBuffer < Extension->BufferSize) {

            *Extension->CurrentCharSlot = CharToPut;
            Extension->CharsInInterruptBuffer++;

            // If we've become 80% full on this character
            // and this is an interesting event, note it.

            if (Extension->CharsInInterruptBuffer == Extension->BufferSizePt8) {

                if (Extension->IsrWaitMask & SERIAL_EV_RX80FULL) {

                    Extension->HistoryMask |= SERIAL_EV_RX80FULL;

                    if (Extension->IrpMaskLocation) {

                        *Extension->IrpMaskLocation = Extension->HistoryMask;
                        Extension->IrpMaskLocation = NULL;
                        Extension->HistoryMask = 0;

                        Extension->CurrentWaitIrp->IoStatus.Information = sizeof(ULONG);
                        CyzInsertQueueDpc(&Extension->CommWaitDpc,NULL,NULL,Extension);
                    }
                }
            }

            // Point to the next available space
            // for a received character.  Make sure
            // that we wrap around to the beginning
            // of the buffer if this last character
            // received was placed at the last slot
            // in the buffer.

            if (Extension->CurrentCharSlot == Extension->LastCharSlot) {
                Extension->CurrentCharSlot = Extension->InterruptReadBuffer;
            } else {
                Extension->CurrentCharSlot++;
            }
        } else {		
            // We have a new character but no room for it.

   			Extension->PerfStats.BufferOverrunErrorCount++;
            Extension->WmiPerfData.BufferOverrunErrorCount++;
            Extension->ErrorWord |= SERIAL_ERROR_QUEUEOVERRUN;

            if (Extension->HandFlow.FlowReplace & SERIAL_ERROR_CHAR) {

                // Place the error character into the last
                // valid place for a character.  Be careful!,
                // that place might not be the previous location!

                if (Extension->CurrentCharSlot == Extension->InterruptReadBuffer) {
                    *(Extension->InterruptReadBuffer+
                      (Extension->BufferSize-1)) =
                      Extension->SpecialChars.ErrorChar;
                } else {
                    *(Extension->CurrentCharSlot-1) =
                     Extension->SpecialChars.ErrorChar;
                }
            }
            // If the application has requested it, abort all reads
            // and writes on an error.

            if (Extension->HandFlow.ControlHandShake & SERIAL_ERROR_ABORT) {
                CyzInsertQueueDpc(&Extension->CommErrorDpc,NULL,NULL,Extension);
            }
        }
    }
}

UCHAR
CyzProcessLSR(
    IN PCYZ_DEVICE_EXTENSION Extension,
    IN UCHAR LineStatus
    )
{
	//   UCHAR LineStatus = 0; // READ_LINE_STATUS(Extension->Controller);

   CYZ_LOCKED_PAGED_CODE();

      if (Extension->EscapeChar) {

            CyzPutChar(
                Extension,
                Extension->EscapeChar
                );

            CyzPutChar(
                Extension,
                (UCHAR)(SERIAL_LSRMST_LSR_NODATA)
                );

            CyzPutChar(
                Extension,
                LineStatus
                );

        }


        if (LineStatus & SERIAL_LSR_OE) {

            Extension->PerfStats.SerialOverrunErrorCount++;
            Extension->WmiPerfData.SerialOverrunErrorCount++;
            Extension->ErrorWord |= SERIAL_ERROR_OVERRUN;

            if (Extension->HandFlow.FlowReplace &
                SERIAL_ERROR_CHAR) {

                CyzPutChar(
                    Extension,
                    Extension->SpecialChars.ErrorChar
                    );


            } 

        }

        if (LineStatus & SERIAL_LSR_BI) {

            Extension->ErrorWord |= SERIAL_ERROR_BREAK;

            if (Extension->HandFlow.FlowReplace &
                SERIAL_BREAK_CHAR) {

                CyzPutChar(
                    Extension,
                    Extension->SpecialChars.BreakChar
                    );

            }

        } else {

            //
            // Framing errors only count if they
            // occur exclusive of a break being
            // received.
            //

            if (LineStatus & SERIAL_LSR_PE) {
                Extension->PerfStats.ParityErrorCount++;
                Extension->WmiPerfData.ParityErrorCount++;
                Extension->ErrorWord |= SERIAL_ERROR_PARITY;
                if (Extension->HandFlow.FlowReplace &
                    SERIAL_ERROR_CHAR) {

                    CyzPutChar(
                        Extension,
                        Extension->SpecialChars.ErrorChar
                        );
                }

            }

            if (LineStatus & SERIAL_LSR_FE) {

                Extension->PerfStats.FrameErrorCount++;
                Extension->WmiPerfData.FrameErrorCount++;
                Extension->ErrorWord |= SERIAL_ERROR_FRAMING;

                if (Extension->HandFlow.FlowReplace &
                    SERIAL_ERROR_CHAR) {

                    CyzPutChar(
                        Extension,
                        Extension->SpecialChars.ErrorChar
                        );

                }

            }

        }

        //
        // If the application has requested it,
        // abort all the reads and writes
        // on an error.
        //

        if (Extension->HandFlow.ControlHandShake &
            SERIAL_ERROR_ABORT) {

            CyzInsertQueueDpc(
                &Extension->CommErrorDpc,
                NULL,
                NULL,
                Extension
                );

        }

        //
        // Check to see if we have a wait
        // pending on the comm error events.  If we
        // do then we schedule a dpc to satisfy
        // that wait.
        //

        if (Extension->IsrWaitMask) {

            if ((Extension->IsrWaitMask & SERIAL_EV_ERR) &&
                (LineStatus & (SERIAL_LSR_OE |
                               SERIAL_LSR_PE |
                               SERIAL_LSR_FE))) {
                Extension->HistoryMask |= SERIAL_EV_ERR;

            }

            if ((Extension->IsrWaitMask & SERIAL_EV_BREAK) &&
                (LineStatus & SERIAL_LSR_BI)) {

                Extension->HistoryMask |= SERIAL_EV_BREAK;

            }

            if (Extension->IrpMaskLocation &&
                Extension->HistoryMask) {

                *Extension->IrpMaskLocation =
                 Extension->HistoryMask;
                Extension->IrpMaskLocation = NULL;
                Extension->HistoryMask = 0;

                Extension->CurrentWaitIrp->IoStatus.Information =
                    sizeof(ULONG);
                CyzInsertQueueDpc(
                    &Extension->CommWaitDpc,
                    NULL,
                    NULL,
                    Extension
                    );

            }

        }	
		
    return LineStatus;
		
}


BOOLEAN
CyzTxStart(
    IN PVOID Context
    )
/*--------------------------------------------------------------------------
    CyzTxStart()
    
    Description: Enable Tx interrupt.
    
    Parameters:
    
    Extension: Pointer to device extension.
    
    Return Value: None
--------------------------------------------------------------------------*/
{
    struct BUF_CTRL *buf_ctrl;
    ULONG tx_bufsize, tx_get, tx_put;
    ULONG numOfLongs, numOfBytes;
    PCYZ_DEVICE_EXTENSION Extension = Context;	


    if (Extension->PowerState != PowerDeviceD0) {
        return FALSE;
    }
    
    //doTransmitStuff:;
			
	
    if( //(Extension->DeviceIsOpened) &&        moved to before CyzTxStart
        (Extension->WriteLength || Extension->TransmitImmediate ||
        Extension->SendXoffChar || Extension->SendXonChar)) {

        buf_ctrl = Extension->BufCtrl;

        tx_put = CYZ_READ_ULONG(&buf_ctrl->tx_put);
        tx_get = CYZ_READ_ULONG(&buf_ctrl->tx_get);
        tx_bufsize = Extension->TxBufsize;

        if ((tx_put >= tx_bufsize) || (tx_get >= tx_bufsize)) {
            return FALSE;
        }
	
        if ((tx_put+1 == tx_get) || ((tx_put==tx_bufsize-1)&&(tx_get==0))) {
            return FALSE;
        }

        Extension->EmptiedTransmit = TRUE;

        if (Extension->HandFlow.ControlHandShake &
            SERIAL_OUT_HANDSHAKEMASK) {
            CyzHandleModemUpdate(Extension,TRUE,0);
        }
		    
//        LOGENTRY(LOG_MISC, ZSIG_TX_START, 
//                           Extension->PortIndex+1,
//                           Extension->WriteLength, 
//                           Extension->TXHolding);

        //
        // We can only send the xon character if
        // the only reason we are holding is because
        // of the xoff.  (Hardware flow control or
        // sending break preclude putting a new character
        // on the wire.)
        //

        if (Extension->SendXonChar &&
            !(Extension->TXHolding & ~CYZ_TX_XOFF)) {

            if ((Extension->HandFlow.FlowReplace &
                SERIAL_RTS_MASK) ==
                SERIAL_TRANSMIT_TOGGLE) {

                //
                // We have to raise if we're sending
                // this character.
                //

                CyzSetRTS(Extension);

                Extension->PerfStats.TransmittedCount++;
                Extension->WmiPerfData.TransmittedCount++;
                CyzIssueCmd(Extension,C_CM_SENDXON,0L,FALSE);			


                CyzInsertQueueDpc(
                    &Extension->StartTimerLowerRTSDpc,
                    NULL,
                    NULL,
                    Extension
                )?Extension->CountOfTryingToLowerRTS++:0;


            } else {

                Extension->PerfStats.TransmittedCount++;
                Extension->WmiPerfData.TransmittedCount++;
                CyzIssueCmd(Extension,C_CM_SENDXON,0L,FALSE);

            }


            Extension->SendXonChar = FALSE;
            Extension->HoldingEmpty = FALSE;
            //
            // If we send an xon, by definition we
            // can't be holding by Xoff.
            //

            Extension->TXHolding &= ~CYZ_TX_XOFF;

            //
            // If we are sending an xon char then
            // by definition we can't be "holding"
            // up reception by Xoff.
            //

            Extension->RXHolding &= ~CYZ_RX_XOFF;

        } else if (Extension->SendXoffChar &&
                  !Extension->TXHolding) {

            if ((Extension->HandFlow.FlowReplace &
                SERIAL_RTS_MASK) ==
                SERIAL_TRANSMIT_TOGGLE) {

                //
                // We have to raise if we're sending                                
                // this character.
                //

                CyzSetRTS(Extension);

                Extension->PerfStats.TransmittedCount++;
                Extension->WmiPerfData.TransmittedCount++;
                CyzIssueCmd(Extension,C_CM_SENDXOFF,0L,FALSE);

                CyzInsertQueueDpc(
                    &Extension->StartTimerLowerRTSDpc,
                    NULL,
                    NULL,
                    Extension
                )?Extension->CountOfTryingToLowerRTS++:0;

            } else {

                Extension->PerfStats.TransmittedCount++;
                Extension->WmiPerfData.TransmittedCount++;
                CyzIssueCmd(Extension,C_CM_SENDXOFF,0L,FALSE);

            }

            //
            // We can't be sending an Xoff character
            // if the transmission is already held
            // up because of Xoff.  Therefore, if we
            // are holding then we can't send the char.
            //

            //
            // If the application has set xoff continue
            // mode then we don't actually stop sending
            // characters if we send an xoff to the other
            // side.
            //

            if (!(Extension->HandFlow.FlowReplace &
                  SERIAL_XOFF_CONTINUE)) {

                Extension->TXHolding |= CYZ_TX_XOFF;

                if ((Extension->HandFlow.FlowReplace &
                    SERIAL_RTS_MASK) ==
                    SERIAL_TRANSMIT_TOGGLE) {

                    CyzInsertQueueDpc(
                        &Extension->StartTimerLowerRTSDpc,
                        NULL,
                        NULL,
                        Extension
                    )?Extension->CountOfTryingToLowerRTS++:0;

                }

            }

            Extension->SendXoffChar = FALSE;
            Extension->HoldingEmpty = FALSE;

        } else if(Extension->TransmitImmediate&&(!Extension->TXHolding ||
            (Extension->TXHolding == CYZ_TX_XOFF) )) {
				   
            Extension->TransmitImmediate = FALSE;

            if ((Extension->HandFlow.FlowReplace & SERIAL_RTS_MASK) 
                == SERIAL_TRANSMIT_TOGGLE) {

                CyzSetRTS(Extension);
                Extension->PerfStats.TransmittedCount++;
                Extension->WmiPerfData.TransmittedCount++;
                CYZ_WRITE_UCHAR( &Extension->TxBufaddr[tx_put], 
                                 Extension->ImmediateChar);
				
                if (tx_put + 1 == tx_bufsize) {
                    CYZ_WRITE_ULONG(&buf_ctrl->tx_put,0);
                } else {
                    CYZ_WRITE_ULONG(&buf_ctrl->tx_put,tx_put + 1);
                }
					
                CyzInsertQueueDpc(
                    &Extension->StartTimerLowerRTSDpc,NULL,NULL,
                    Extension)? Extension->CountOfTryingToLowerRTS++:0;
            } else {
					
                Extension->PerfStats.TransmittedCount++;
                Extension->WmiPerfData.TransmittedCount++;
                CYZ_WRITE_UCHAR(&Extension->TxBufaddr[tx_put],
                    Extension->ImmediateChar);
				
                if (tx_put + 1 == tx_bufsize) {
                    CYZ_WRITE_ULONG(&buf_ctrl->tx_put,0);
                } else {
                    CYZ_WRITE_ULONG(&buf_ctrl->tx_put,tx_put + 1);
                }
            }

            Extension->HoldingEmpty = FALSE;

            CyzInsertQueueDpc(
                      &Extension->CompleteImmediateDpc,
                      NULL,
                      NULL,
                      Extension
                      );
				
        } else if (!Extension->TXHolding) {
									
            ULONG amountToWrite1, amountToWrite2;
            ULONG newput;
            ULONG amount1;

            if (tx_put >= tx_get) {
                if (tx_get == 0) {
                    amountToWrite1 = tx_bufsize - tx_put -1;
                    amountToWrite2 = 0;
                    if (amountToWrite1 > Extension->WriteLength){
                        amountToWrite1 = Extension->WriteLength;
                    }
                    newput = amountToWrite1 + 1;					
                } else if (tx_get == 1) {
                    amountToWrite1 = tx_bufsize - tx_put;
                    amountToWrite2 = 0;
                    if (amountToWrite1 > Extension->WriteLength){
                        amountToWrite1 = Extension->WriteLength;
                        newput = amountToWrite1 + 1;					
                    } else {
                        newput = 0;
                    }
                } else {
                    amountToWrite1 = tx_bufsize - tx_put;
                    amountToWrite2 = tx_get - 1;
                    if (amountToWrite1 > Extension->WriteLength) {
                        amountToWrite1 = Extension->WriteLength;
                        amountToWrite2 = 0;
                        newput = amountToWrite1 + 1;
                    } else if (amountToWrite1 == Extension->WriteLength) {
                        amountToWrite2 = 0;
                        newput = 0;
                    } else {
                        if (amountToWrite2 > Extension->WriteLength - amountToWrite1) {
                            amountToWrite2 = Extension->WriteLength - amountToWrite1;
                            newput = amountToWrite2 + 1;
                        }
                    }
                }
            } else {
                //
                // put < get
                //
                amountToWrite1 = tx_get - tx_put - 1;
                amountToWrite2 = 0;
                if (amountToWrite1 > Extension->WriteLength) {
                    amountToWrite1 = Extension->WriteLength;
                    newput = amountToWrite1 + 1;
                }
            }

            if ((Extension->HandFlow.FlowReplace & SERIAL_RTS_MASK) 
                == SERIAL_TRANSMIT_TOGGLE) {

               	// We have to raise if we're sending
               	// this character.

                CyzSetRTS(Extension);
						
                if (amountToWrite1) {
							
                    Extension->PerfStats.TransmittedCount += amountToWrite1;
                    Extension->WmiPerfData.TransmittedCount += amountToWrite1;

                    
                    amount1 = amountToWrite1;
				
                    while (amount1 && (tx_put & 0x07)) {

                        CYZ_WRITE_UCHAR(
                                (PUCHAR)&Extension->TxBufaddr[tx_put], 
                                *((PUCHAR)Extension->WriteCurrentChar));
                        tx_put++;
                        ((PUCHAR)Extension->WriteCurrentChar)++;
                        amount1--;						
					
                    }

								
#if _WIN64
                    numOfLongs = amount1/8;
                    numOfBytes = amount1%8;
                    RtlCopyMemory((PULONG64)&Extension->TxBufaddr[tx_put],
                                  (PULONG64)Extension->WriteCurrentChar,
                                  numOfLongs*8);
                    tx_put += 8*numOfLongs;
                    (PULONG64)Extension->WriteCurrentChar += numOfLongs;
#else
                    numOfLongs = amount1/sizeof(ULONG);
                    numOfBytes = amount1%sizeof(ULONG);
//                    RtlCopyMemory((PULONG)&Extension->TxBufaddr[tx_put],
//                                  (PULONG)Extension->WriteCurrentChar,
//                                  numOfLongs*sizeof(ULONG));
//                    tx_put += sizeof(ULONG)*numOfLongs;
//                    (PULONG)Extension->WriteCurrentChar += numOfLongs;

                    while (numOfLongs--) {

                        CYZ_WRITE_ULONG(
                            (PULONG)(&Extension->TxBufaddr[tx_put]), 
                            *((PULONG)Extension->WriteCurrentChar));
                        tx_put += sizeof(ULONG);
                        ((PULONG)Extension->WriteCurrentChar)++;
                    }

#endif

                    
                    while (numOfBytes--) {

                        CYZ_WRITE_UCHAR(
                                (PUCHAR)&Extension->TxBufaddr[tx_put], 
                                *((PUCHAR)Extension->WriteCurrentChar));
                        tx_put++;
                        ((PUCHAR)Extension->WriteCurrentChar)++;
                    }
					
                    if (tx_put == tx_bufsize) {
                        tx_put = 0;
                    }										
                    CYZ_WRITE_ULONG(&buf_ctrl->tx_put,tx_put);
					
                }
				if (amountToWrite2) {
												
                    Extension->PerfStats.TransmittedCount += amountToWrite2;
                    Extension->WmiPerfData.TransmittedCount += amountToWrite2;

#if _WIN64
                    numOfLongs = amountToWrite2/8;
                    numOfBytes = amountToWrite2%8;
                    RtlCopyMemory((PULONG64)&Extension->TxBufaddr[tx_put],
                                  (PULONG64)Extension->WriteCurrentChar,
                                  numOfLongs*8);
                    tx_put += 8*numOfLongs;
                    (PULONG64)Extension->WriteCurrentChar += numOfLongs;
#else
                    numOfLongs = amountToWrite2/sizeof(ULONG);
                    numOfBytes = amountToWrite2%sizeof(ULONG);
//                    RtlCopyMemory((PULONG)&Extension->TxBufaddr[tx_put],
//                                  (PULONG)Extension->WriteCurrentChar,
//                                  numOfLongs*sizeof(ULONG));
//                    tx_put += sizeof(ULONG)*numOfLongs;
//                    (PULONG)Extension->WriteCurrentChar += numOfLongs;

                    while (numOfLongs--) {

                        CYZ_WRITE_ULONG(
                            (PULONG)(&Extension->TxBufaddr[tx_put]), 
                            *((PULONG)Extension->WriteCurrentChar));
                        tx_put += sizeof(ULONG);
                        ((PULONG)Extension->WriteCurrentChar)++;
                    }

#endif

                    while (numOfBytes--) {

                        CYZ_WRITE_UCHAR(
                            (PUCHAR)&Extension->TxBufaddr[tx_put], 
                            *((PUCHAR)Extension->WriteCurrentChar));
                        tx_put++;
                        ((PUCHAR)Extension->WriteCurrentChar)++;
                    }

                    CYZ_WRITE_ULONG(&buf_ctrl->tx_put,amountToWrite2);
                }

                CyzInsertQueueDpc(
                    &Extension->StartTimerLowerRTSDpc,
                    NULL,
                    NULL,
                    Extension
                )?Extension->CountOfTryingToLowerRTS++:0;
            } else {
					
                if (amountToWrite1) {
							
                    Extension->PerfStats.TransmittedCount += amountToWrite1;
                    Extension->WmiPerfData.TransmittedCount += amountToWrite1;

                    
                    amount1 = amountToWrite1;
				
                    while (amount1 && (tx_put & 0x07)) {

                        CYZ_WRITE_UCHAR(
                                (PUCHAR)&Extension->TxBufaddr[tx_put], 
                                *((PUCHAR)Extension->WriteCurrentChar));
                        tx_put++;
                        ((PUCHAR)Extension->WriteCurrentChar)++;
                        amount1--;						
					
                    }

								
#if _WIN64
                    numOfLongs = amount1/8;
                    numOfBytes = amount1%8;
                    RtlCopyMemory((PULONG64)&Extension->TxBufaddr[tx_put],
                                  (PULONG64)Extension->WriteCurrentChar,
                                  numOfLongs*8);
                    tx_put += 8*numOfLongs;
                    (PULONG64)Extension->WriteCurrentChar += numOfLongs;
#else
                    numOfLongs = amount1/sizeof(ULONG);
                    numOfBytes = amount1%sizeof(ULONG);
//                    RtlCopyMemory((PULONG)&Extension->TxBufaddr[tx_put],
//                                  (PULONG)Extension->WriteCurrentChar,
//                                  numOfLongs*sizeof(ULONG));
//                    tx_put += sizeof(ULONG)*numOfLongs;
//                    (PULONG)Extension->WriteCurrentChar += numOfLongs;

                    while (numOfLongs--) {

                        CYZ_WRITE_ULONG(
                            (PULONG)(&Extension->TxBufaddr[tx_put]), 
                            *((PULONG)Extension->WriteCurrentChar));
                        tx_put += sizeof(ULONG);
                        ((PULONG)Extension->WriteCurrentChar)++;
                    }

#endif

                    
                    while (numOfBytes--) {

                        CYZ_WRITE_UCHAR(
                                (PUCHAR)&Extension->TxBufaddr[tx_put], 
                                *((PUCHAR)Extension->WriteCurrentChar));
                        tx_put++;
                        ((PUCHAR)Extension->WriteCurrentChar)++;
                    }
					
                    if (tx_put == tx_bufsize) {
                        tx_put = 0;
                    }										
                    CYZ_WRITE_ULONG(&buf_ctrl->tx_put,tx_put);
					
                }
				if (amountToWrite2) {
												
                    Extension->PerfStats.TransmittedCount += amountToWrite2;
                    Extension->WmiPerfData.TransmittedCount += amountToWrite2;

#if _WIN64
                    numOfLongs = amountToWrite2/8;
                    numOfBytes = amountToWrite2%8;
                    RtlCopyMemory((PULONG64)&Extension->TxBufaddr[tx_put],
                                  (PULONG64)Extension->WriteCurrentChar,
                                  numOfLongs*8);
                    tx_put += 8*numOfLongs;
                    (PULONG64)Extension->WriteCurrentChar += numOfLongs;
#else
                    numOfLongs = amountToWrite2/sizeof(ULONG);
                    numOfBytes = amountToWrite2%sizeof(ULONG);
//                    RtlCopyMemory((PULONG)&Extension->TxBufaddr[tx_put],
//                                  (PULONG)Extension->WriteCurrentChar,
//                                  numOfLongs*sizeof(ULONG));
//                    tx_put += sizeof(ULONG)*numOfLongs;
//                    (PULONG)Extension->WriteCurrentChar += numOfLongs;

                    while (numOfLongs--) {

                        CYZ_WRITE_ULONG(
                            (PULONG)(&Extension->TxBufaddr[tx_put]), 
                            *((PULONG)Extension->WriteCurrentChar));
                        tx_put += sizeof(ULONG);
                        ((PULONG)Extension->WriteCurrentChar)++;
                    }

#endif

                    while (numOfBytes--) {

                        CYZ_WRITE_UCHAR(
                            (PUCHAR)&Extension->TxBufaddr[tx_put], 
                            *((PUCHAR)Extension->WriteCurrentChar));
                        tx_put++;
                        ((PUCHAR)Extension->WriteCurrentChar)++;
                    }

                    CYZ_WRITE_ULONG(&buf_ctrl->tx_put,amountToWrite2);
                }
            }

            //LOGENTRY(LOG_MISC, ZSIG_WRITE_TO_FW,
            //           Extension->PortIndex+1,
            //           amountToWrite1+amountToWrite2, 
            //           0);

            Extension->HoldingEmpty = FALSE;
            Extension->WriteLength -= (amountToWrite1+amountToWrite2);

					
            if (!Extension->WriteLength) {
			
                if (Extension->ReturnStatusAfterFwEmpty) {
                        
                    // We will CompleteWrite only when fw buff empties...
                    Extension->WriteLength += (amountToWrite1+amountToWrite2);
                    Extension->ReturnWriteStatus = TRUE;
                } else {

                    CyzQueueCompleteWrite(Extension);
							
                } // if-ReturnStatusAfterFwEmpty-else. 
            } // There is WriteLength
        } // !Extension->TXHolding
    } //There is data to be sent

    // In the normal code, HoldingEmpty will be set to True here. But 
    // if we want to make sure that CyzWrite had finished the transmission,
    // HoldingEmpty will be TRUE only when the firmware empties the firmware
    // tx buffer. 
    //txfempty if (!Extension->ReturnStatusAfterFwEmpty) {
    //txfempty    Extension->HoldingEmpty = TRUE;	
    //txfempty}
    return(FALSE);    
}


//
//BOOLEAN
//CyzSendXon(
//    IN PVOID Context
//    )
///*--------------------------------------------------------------------------
//    CyzSendXon()
//    
//    Description: Send a Xon.
//    
//    Parameters:
//    
//    Exetension: Pointer to device extension.
//    
//    Return Value: Always FALSE.
//--------------------------------------------------------------------------*/
//{
//    PCYZ_DEVICE_EXTENSION Extension = Context;
//    
//    if(!(Extension->TXHolding & ~CYZ_TX_XOFF)) {
//        if ((Extension->HandFlow.FlowReplace & SERIAL_RTS_MASK) ==
//        	                         SERIAL_TRANSMIT_TOGGLE) {
//
//            CyzSetRTS(Extension);
//			    
//            Extension->PerfStats.TransmittedCount++;
//            Extension->WmiPerfData.TransmittedCount++;
//            CyzIssueCmd(Extension,C_CM_SENDXON,0L);
//				
//            CyzInsertQueueDpc(&Extension->StartTimerLowerRTSDpc,NULL,
//			       NULL,Extension)?Extension->CountOfTryingToLowerRTS++:0;
//        } else {
//
//            Extension->PerfStats.TransmittedCount++;
//            Extension->WmiPerfData.TransmittedCount++;
//            CyzIssueCmd(Extension,C_CM_SENDXON,0L);			
//        }
//
//        // If we send an xon, by definition we can't be holding by Xoff.
//
//        Extension->TXHolding &= ~CYZ_TX_XOFF;
//        Extension->RXHolding &= ~CYZ_RX_XOFF;
//    }
//    return(FALSE);    
//}
//
//
//
//
//BOOLEAN
//CyzSendXoff(
//    IN PVOID Context
//    )
///*--------------------------------------------------------------------------
//    CyzSendXoff()
//    
//    Description: Send a Xoff.
//    
//    Parameters:
//    
//    Extension: Pointer to device extension.
//    
//    Return Value: Always FALSE.
//--------------------------------------------------------------------------*/
//{
//    PCYZ_DEVICE_EXTENSION Extension = Context;	
//    
//    if(!Extension->TXHolding) {
//        if ((Extension->HandFlow.FlowReplace & SERIAL_RTS_MASK) ==
//    	                             SERIAL_TRANSMIT_TOGGLE) {
//
//            CyzSetRTS(Extension);
//
//            Extension->PerfStats.TransmittedCount++;
//            Extension->WmiPerfData.TransmittedCount++;
//            CyzIssueCmd(Extension,C_CM_SENDXOFF,0L);
//	    
//            CyzInsertQueueDpc(&Extension->StartTimerLowerRTSDpc,NULL,
//                            NULL,Extension)?Extension->CountOfTryingToLowerRTS++:0;
//        } else {
//			
//            Extension->PerfStats.TransmittedCount++;
//            Extension->WmiPerfData.TransmittedCount++;
//            CyzIssueCmd(Extension,C_CM_SENDXOFF,0L);			
//        }
//
//        // no xoff is sent if the transmission is already held up.
//        // If xoff continue mode is set, we don't actually stop sending
//
//        if (!(Extension->HandFlow.FlowReplace & SERIAL_XOFF_CONTINUE)) {
//            Extension->TXHolding |= CYZ_TX_XOFF;			
//
//            if ((Extension->HandFlow.FlowReplace & SERIAL_RTS_MASK) ==
//    	                                 SERIAL_TRANSMIT_TOGGLE) {
//
//                CyzInsertQueueDpc(&Extension->StartTimerLowerRTSDpc,NULL,
//                            NULL,Extension)?Extension->CountOfTryingToLowerRTS++:0;
//            }
//        }
//    }
//	
//    return(FALSE);    
//}


ULONG
CyzAmountInTxBuffer(
    IN PCYZ_DEVICE_EXTENSION extension
    )
/*--------------------------------------------------------------------------
    CyzAmountInTxBuffer()
    
    Description: Gets the amount in the Tx Buffer in the board.
    
    Parameters:
    
    Extension: Pointer to device extension.
    
    Return Value: Return the number of bytes in the HW Tx buffer.
--------------------------------------------------------------------------*/
{
	struct BUF_CTRL *buf_ctrl;
	ULONG tx_put, tx_get, tx_bufsize;
	ULONG txAmount1, txAmount2;

	buf_ctrl = extension->BufCtrl;		
	tx_put = CYZ_READ_ULONG(&buf_ctrl->tx_put);
	tx_get = CYZ_READ_ULONG(&buf_ctrl->tx_get);
	tx_bufsize = extension->TxBufsize;
	
	if (tx_put >= tx_get) {
		txAmount1 = tx_put - tx_get;
		txAmount2 = 0; 
	} else {
		txAmount1 = tx_bufsize - tx_get;
		txAmount2 = tx_put;
	}	
	return(txAmount1+txAmount2);
}

VOID
CyzQueueCompleteWrite(
    IN PCYZ_DEVICE_EXTENSION Extension
    )
/*--------------------------------------------------------------------------
    CyzQueueCompleteWrite()
    
    Description: Queue CompleteWrite dpc
    
    Parameters:
    
    Extension: Pointer to device extension.
    
    Return Value: None
--------------------------------------------------------------------------*/
{
    PIO_STACK_LOCATION IrpSp;				
    
    					
    //LOGENTRY(LOG_MISC, ZSIG_WRITE_COMPLETE_QUEUE, 
    //                   Extension->PortIndex+1,
    //                   0, 
    //                   0);

    //
    // No More characters left.  This
    // write is complete.  Take care
    // when updating the information field,
    // we could have an xoff counter masquerading
    // as a write irp.
    //
    
    IrpSp = IoGetCurrentIrpStackLocation(
                     Extension->CurrentWriteIrp
                     );
    
    Extension->CurrentWriteIrp->IoStatus.Information =
                     (IrpSp->MajorFunction == IRP_MJ_WRITE)?
                     (IrpSp->Parameters.Write.Length):
                     (1);
    	
    CyzInsertQueueDpc(
                    &Extension->CompleteWriteDpc,
                    NULL,
                    NULL,
                    Extension
                    );

}

BOOLEAN
CyzCheckIfTxEmpty(
    IN PVOID Context
    )
/*--------------------------------------------------------------------------
    CyzCheckIfTxEmpty()
    
    Routine Description: This routine is used to set the FIFO settings 
    during the InternalIoControl.

    Arguments:

    Context - Pointer to a structure that contains a pointer to the device
              extension and a pointer to the Basic structure.

    Return Value: This routine always returns FALSE.
--------------------------------------------------------------------------*/
{
    PCYZ_CLOSE_SYNC S = Context;
    PCYZ_DEVICE_EXTENSION Extension = S->Extension;
    PULONG pHoldingEmpty = S->Data;

    *pHoldingEmpty = Extension->HoldingEmpty;

    return FALSE;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyzport\cyzport.h ===
/*--------------------------------------------------------------------------
*	
*   Copyright (C) Cyclades Corporation, 1997-2000.
*   All rights reserved.
*	
*   Cyclades-Z Port Driver
*	
*   This file:      cyzport.h
*	
*   Description:    Type definitions and data for the Cyclades-Z Port 
*                   Driver
*
*   Notes:          This code supports Windows 2000 and x86 processor.
*	
*   Complies with Cyclades SW Coding Standard rev 1.3.
*	
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*   Change History
*
*--------------------------------------------------------------------------
*
*
*--------------------------------------------------------------------------
*/

#define POOL_TAGGING    1

#ifdef POOL_TAGGING
#undef ExAllocatePool
#undef ExAllocatePoolWithQuota
#define ExAllocatePool(a,b) ExAllocatePoolWithTag(a,b,'PzyC')
#define ExAllocatePoolWithQuota(a,b) ExAllocatePoolWithQuotaTag(a,b,'PzyC')
#endif


//
// The following definition is used to include/exclude changes made for power
// support in the driver.  If non-zero the support is included.  If zero the
// support is excluded.
//

#define POWER_SUPPORT   1


#define CYZDIAG1              (DPFLTR_INFO_LEVEL + 1)
#define CYZDIAG2              (DPFLTR_INFO_LEVEL + 2)
#define CYZDIAG3              (DPFLTR_INFO_LEVEL + 3)
#define CYZDIAG4              (DPFLTR_INFO_LEVEL + 4)
#define CYZDIAG5              (DPFLTR_INFO_LEVEL + 5)
#define CYZIRPPATH            (DPFLTR_INFO_LEVEL + 6)
#define CYZINITCODE           (DPFLTR_INFO_LEVEL + 7)
#define CYZTRACECALLS         (DPFLTR_INFO_LEVEL + 8)
#define CYZPNPPOWER           (DPFLTR_INFO_LEVEL + 9)
#define CYZFLOW               (DPFLTR_INFO_LEVEL + 10)
#define CYZERRORS             (DPFLTR_INFO_LEVEL + 11)
#define CYZDBGALL             ((ULONG)0xFFFFFFFF)

#define CYZ_DBG_DEFAULT       CYZDBGALL

//
// Some default driver values.  We will check the registry for
// them first.
//
#define CYZ_UNINITIALIZED_DEFAULT    1234567
#define CYZ_PERMIT_SHARE_DEFAULT     0

//
// This define gives the default Object directory
// that we should use to insert the symbolic links
// between the NT device name and namespace used by
// that object directory.
#define DEFAULT_DIRECTORY L"DosDevices"

//
// For the above directory, the serial port will
// use the following name as the suffix of the serial
// ports for that directory.  It will also append
// a number onto the end of the name.  That number
// will start at 1.
#define DEFAULT_SERIAL_NAME L"COM"
//
//
// This define gives the default NT name for
// for serial ports detected by the firmware.
// This name will be appended to Device prefix
// with a number following it.  The number is
// incremented each time encounter a serial
// port detected by the firmware.  Note that
// on a system with multiple busses, this means
// that the first port on a bus is not necessarily
// \Device\Serial0.
//
#define DEFAULT_NT_SUFFIX L"Cyzport"


//#define CYZ_VENDOR_ID	0x120e
//#define CYZ_LO_DEV_ID	0x100
//#define CYZ_HI_DEV_ID	0x101



// Defines for OutputRS232
#define	CYZ_LC_RTS		0x01
#define	CYZ_LC_DTR		0x02


typedef struct _CONFIG_DATA {
    PHYSICAL_ADDRESS    PhysicalRuntime;
    PHYSICAL_ADDRESS    TranslatedRuntime;            
    PHYSICAL_ADDRESS    PhysicalBoardMemory;
    PHYSICAL_ADDRESS    TranslatedBoardMemory;
    ULONG               RuntimeLength;
    ULONG               BoardMemoryLength;
    ULONG               PortIndex;
    ULONG               PPPaware;
    ULONG               WriteComplete;
    ULONG               BusNumber;
    ULONG               RuntimeAddressSpace;
    ULONG               BoardMemoryAddressSpace;
    ULONG               RxFIFO;
    ULONG               TxFIFO;
    INTERFACE_TYPE      InterfaceType;
#ifndef POLL
    KINTERRUPT_MODE     InterruptMode;
    ULONG               OriginalVector;
    ULONG               OriginalIrql;
    ULONG               TrVector;
    ULONG               TrIrql;
    KAFFINITY           Affinity;
#endif
    } CONFIG_DATA,*PCONFIG_DATA;


//
// This structure contains configuration data, much of which
// is read from the registry.
//
typedef struct _CYZ_REGISTRY_DATA {
    PDRIVER_OBJECT  DriverObject;
    ULONG           ControllersFound;
    ULONG           DebugLevel;
    ULONG           ShouldBreakOnEntry;
//    ULONG           RxFIFODefault;
//    ULONG           TxFIFODefault;
    ULONG           PermitShareDefault;
    ULONG           PermitSystemWideShare;
    UNICODE_STRING  Directory;
    UNICODE_STRING  NtNameSuffix;
    UNICODE_STRING  DirectorySymbolicName;
    LIST_ENTRY      ConfigList;
} CYZ_REGISTRY_DATA,*PCYZ_REGISTRY_DATA;


// Default xon/xoff characters.
#define CYZ_DEF_XON 0x11
#define CYZ_DEF_XOFF 0x13

// Reasons why reception may be held up.
#define CYZ_RX_DTR       ((ULONG)0x01)
#define CYZ_RX_XOFF      ((ULONG)0x02)
#define CYZ_RX_RTS       ((ULONG)0x04)
#define CYZ_RX_DSR       ((ULONG)0x08)

// Reasons why transmission may be held up.
#define CYZ_TX_CTS       ((ULONG)0x01)
#define CYZ_TX_DSR       ((ULONG)0x02)
#define CYZ_TX_DCD       ((ULONG)0x04)
#define CYZ_TX_XOFF      ((ULONG)0x08)
#define CYZ_TX_BREAK     ((ULONG)0x10)

//Line status in RDSR Register
#define CYZ_LSR_OE		0x01	//Overrun Error
#define CYZ_LSR_FE		0x02	//Framing Error
#define CYZ_LSR_PE		0x04	//Parity Error
#define CYZ_LSR_BI		0x08	//Break Interrupt
#define CYZ_LSR_ERROR	0x0f	//Overrun+Framing+Parity+Break

// These values are used by the routines that can be used
// to complete a read (other than interval timeout) to indicate
//
#define CYZ_COMPLETE_READ_CANCEL ((LONG)-1)
#define CYZ_COMPLETE_READ_TOTAL ((LONG)-2)
#define CYZ_COMPLETE_READ_COMPLETE ((LONG)-3)


typedef struct _CYZ_DEVICE_STATE {
   //
   // TRUE if we need to set the state to open
   // on a powerup
   //

   BOOLEAN Reopen;

   ULONG op_mode;
   ULONG intr_enable;
   ULONG sw_flow;
   ULONG comm_baud;
   ULONG comm_parity;
   ULONG comm_data_l;
   ULONG hw_flow;
   ULONG rs_control;

#if 0
   //
   // Hardware registers
   //

   UCHAR IER;
   // FCR is known by other values
   UCHAR LCR;
   UCHAR MCR;
   // LSR is never written
   // MSR is never written
   // SCR is either scratch or interrupt status
#endif

} CYZ_DEVICE_STATE, *PCYZ_DEVICE_STATE;


#if DBG
#define CyzLockPagableSectionByHandle(_secHandle) \
{ \
    MmLockPagableSectionByHandle((_secHandle)); \
    InterlockedIncrement(&CyzGlobals.PAGESER_Count); \
}

#define CyzUnlockPagableImageSection(_secHandle) \
{ \
   InterlockedDecrement(&CyzGlobals.PAGESER_Count); \
   MmUnlockPagableImageSection(_secHandle); \
}


#define CYZ_LOCKED_PAGED_CODE() \
    if ((KeGetCurrentIrql() > APC_LEVEL)  \
    && (CyzGlobals.PAGESER_Count == 0)) { \
    KdPrint(("CYZPORT: Pageable code called at IRQL %d without lock \n", \
             KeGetCurrentIrql())); \
        ASSERT(FALSE); \
        }

#else
#define CyzLockPagableSectionByHandle(_secHandle) \
{ \
    MmLockPagableSectionByHandle((_secHandle)); \
}

#define CyzUnlockPagableImageSection(_secHandle) \
{ \
   MmUnlockPagableImageSection(_secHandle); \
}

#define CYZ_LOCKED_PAGED_CODE()
#endif // DBG


#define CyzRemoveQueueDpc(_dpc, _pExt) \
{ \
  if (KeRemoveQueueDpc((_dpc))) { \
     InterlockedDecrement(&(_pExt)->DpcCount); \
  } \
}


typedef struct _CYZ_DEVICE_EXTENSION {
//    PKSERVICE_ROUTINE ptIsr;
//    PVOID ptContext;
//    struct _CYZ_DEVICE_EXTENSION *ptExtension[CYZ_MAX_PORTS];
//    ULONG nchannel;
    BOOLEAN LieRIDSR;

    //
    // This holds the isr that should be called from our own
    // dispatching isr for "cards" that are trying to share the
    // same interrupt.
    //
//    PKSERVICE_ROUTINE TopLevelOurIsr;

    //
    // This holds the context that should be used when we
    // call the above service routine.
    //
//    PVOID TopLevelOurIsrContext;

    //
    // This links together all of the different "cards" that are
    // trying to share the same interrupt of a non-mca machine.
    //
//    LIST_ENTRY TopLevelSharers;

    //
    // This circular doubly linked list links together all
    // devices that are using the same interrupt object.
    // NOTE: This does not mean that they are using the
    // same interrupt "dispatching" routine.
    //
//    LIST_ENTRY CommonInterruptObject;


    //
    // This links together all devobjs that this driver owns.
    // It is needed to search when starting a new device.
    //
    LIST_ENTRY AllDevObjs;

    // For reporting resource usage, we keep around the physical
    // address we got from the registry.
    //
    PHYSICAL_ADDRESS OriginalRuntimeMemory;

    // For reporting resource usage, we keep around the physical
    // address we got from the registry.
    //
    PHYSICAL_ADDRESS OriginalBoardMemory;

    //
    // This value is set by the read code to hold the time value
    // used for read interval timing.  We keep it in the extension
    // so that the interval timer dpc routine determine if the
    // interval time has passed for the IO.
    //
    LARGE_INTEGER IntervalTime;

    //
    // These two values hold the "constant" time that we should use
    // to delay for the read interval time.
    //
    LARGE_INTEGER ShortIntervalAmount;
    LARGE_INTEGER LongIntervalAmount;

    //
    // This holds the value that we use to determine if we should use
    // the long interval delay or the short interval delay.
    //
    LARGE_INTEGER CutOverAmount;

    //
    // This holds the system time when we last time we had
    // checked that we had actually read characters.  Used
    // for interval timing.
    //
    LARGE_INTEGER LastReadTime;

    //
    // We keep a pointer around to our device name for dumps
    // and for creating "external" symbolic links to this
    // device.
    //
    UNICODE_STRING DeviceName;

    //
    // This points to the object directory that we will place
    // a symbolic link to our device name.
    //
    UNICODE_STRING ObjectDirectory;

    //
    // This points to the device name for this device
    // sans device prefix.
    //
    UNICODE_STRING NtNameForPort;

    //
    // This points to the symbolic link name that will be
    // linked to the actual nt device name.
    //
    UNICODE_STRING SymbolicLinkName;

    //
    // This points to the pure "COMx" name
    //
    UNICODE_STRING DosName;

    //
    // This points the the delta time that we should use to
    // delay for interval timing.
    //
    PLARGE_INTEGER IntervalTimeToUse;

    //
    // Points to the device object that contains
    // this device extension.
    //
    PDEVICE_OBJECT DeviceObject;

    //
    // After initialization of the driver is complete, this
    // will either be NULL or point to the routine that the
    // kernel will call when an interrupt occurs.
    //
    // If the pointer is null then this is part of a list
    // of ports that are sharing an interrupt and this isn't
    // the first port that we configured for this interrupt.
    //
    // If the pointer is non-null then this routine has some
    // kind of structure that will "eventually" get us into
    // the real serial isr with a pointer to this device extension.
    //
    // NOTE: On an MCA bus (except for multiport cards) this
    // is always a pointer to the "real" serial isr.
#ifndef POLL
	PKSERVICE_ROUTINE OurIsr;
#endif

    //
    // This will generally point right to this device extension.
    //
    // However, when the port that this device extension is
    // "managing" was the first port initialized on a chain
    // of ports that were trying to share an interrupt, this
    // will point to a structure that will enable dispatching
    // to any port on the chain of sharers of this interrupt.
    //
    PVOID OurIsrContext;

    struct RUNTIME_9060 *Runtime; // Virtual Address Pointer to the PLX Runtime memory
//    PUCHAR BoardMemory;		      // Virtual Address Pointer to the Dual Port memory

    struct BOARD_CTRL *BoardCtrl;
    struct CH_CTRL *ChCtrl;
    struct BUF_CTRL *BufCtrl;
    struct INT_QUEUE *PtZfIntQueue;
	
    PUCHAR TxBufaddr;
    PUCHAR RxBufaddr;
    ULONG  TxBufsize;
    ULONG  RxBufsize;


//POLL    // The base address for interrupt status register.
//POLL    // This is only defined in the root extension.
//POLL    //
//POLL    PUCHAR InterruptStatus;
#ifndef POLL
    //
    // Points to the interrupt object for used by this device.
    //
    PKINTERRUPT Interrupt;
#endif
    //
    // This list head is used to contain the time ordered list
    // of read requests.  Access to this list is protected by
    // the global cancel spinlock.
    //
    LIST_ENTRY ReadQueue;

    //
    // This list head is used to contain the time ordered list
    // of write requests.  Access to this list is protected by
    // the global cancel spinlock.
    //
    LIST_ENTRY WriteQueue;

    //
    // This list head is used to contain the time ordered list
    // of set and wait mask requests.  Access to this list is protected by
    // the global cancel spinlock.
    //
    LIST_ENTRY MaskQueue;

    //
    // Holds the serialized list of purge requests.
    //
    LIST_ENTRY PurgeQueue;

    //
    // This points to the irp that is currently being processed
    // for the read queue.  This field is initialized by the open to
    // NULL.
    //
    // This value is only set at dispatch level.  It may be
    // read at interrupt level.
    //
    PIRP CurrentReadIrp;

    //
    // This points to the irp that is currently being processed
    // for the write queue.
    //
    // This value is only set at dispatch level.  It may be
    // read at interrupt level.
    //
    PIRP CurrentWriteIrp;

    //
    // Points to the irp that is currently being processed to
    // affect the wait mask operations.
    //
    PIRP CurrentMaskIrp;

    //
    // Points to the irp that is currently being processed to
    // purge the read/write queues and buffers.
    //
    PIRP CurrentPurgeIrp;

    //
    // Points to the current irp that is waiting on a comm event.
    //
    PIRP CurrentWaitIrp;

    //
    // Points to the irp that is being used to send an immediate
    // character.
    //
    PIRP CurrentImmediateIrp;

    //
    // Points to the irp that is being used to count the number
    // of characters received after an xoff (as currently defined
    // by the IOCTL_CYZ_XOFF_COUNTER ioctl) is sent.
    //
    PIRP CurrentXoffIrp;

    //
    // Holds the number of bytes remaining in the current write
    // irp.
    //
    // This location is only accessed while at interrupt level.
    //
    ULONG WriteLength;

    //
    // Holds a pointer to the current character to be sent in
    // the current write.
    //
    // This location is only accessed while at interrupt level.
    //
    PUCHAR WriteCurrentChar;

    //
    // This is a buffer for the read processing.
    //
    // The buffer works as a ring.  When the character is read from
    // the device it will be place at the end of the ring.
    //
    // Characters are only placed in this buffer at interrupt level
    // although character may be read at any level. The pointers
    // that manage this buffer may not be updated except at interrupt
    // level.
    //
    PUCHAR InterruptReadBuffer;

    //
    // This is a pointer to the first character of the buffer into
    // which the interrupt service routine is copying characters.
    //
    PUCHAR ReadBufferBase;

    //
    // This is a count of the number of characters in the interrupt
    // buffer.  This value is set and read at interrupt level.  Note
    // that this value is only *incremented* at interrupt level so
    // it is safe to read it at any level.  When characters are
    // copied out of the read buffer, this count is decremented by
    // a routine that synchronizes with the ISR.
    //
    ULONG CharsInInterruptBuffer;

    //
    // Points to the first available position for a newly received
    // character.  This variable is only accessed at interrupt level and
    // buffer initialization code.
    //
    PUCHAR CurrentCharSlot;

    //
    // This variable is used to contain the last available position
    // in the read buffer.  It is updated at open and at interrupt
    // level when switching between the users buffer and the interrupt
    // buffer.
    //
    PUCHAR LastCharSlot;

    //
    // This marks the first character that is available to satisfy
    // a read request.  Note that while this always points to valid
    // memory, it may not point to a character that can be sent to
    // the user.  This can occur when the buffer is empty.
    //
    PUCHAR FirstReadableChar;

    //
    // Pointer to the lock variable returned for this extension when
    // locking down the driver
    //
    PVOID LockPtr;
    BOOLEAN LockPtrFlag;


    //
    // This variable holds the size of whatever buffer we are currently
    // using.
    //
    ULONG BufferSize;

    //
    // This variable holds .8 of BufferSize. We don't want to recalculate
    // this real often - It's needed when so that an application can be
    // "notified" that the buffer is getting full.
    //
    ULONG BufferSizePt8;

    //
    // This value holds the number of characters desired for a
    // particular read.  It is initially set by read length in the
    // IRP.  It is decremented each time more characters are placed
    // into the "users" buffer buy the code that reads characters
    // out of the typeahead buffer into the users buffer.  If the
    // typeahead buffer is exhausted by the read, and the reads buffer
    // is given to the isr to fill, this value is becomes meaningless.
    //
    ULONG NumberNeededForRead;

    //
    // This mask will hold the bitmask sent down via the set mask
    // ioctl.  It is used by the interrupt service routine to determine
    // if the occurence of "events" (in the serial drivers understanding
    // of the concept of an event) should be noted.
    //
    ULONG IsrWaitMask;

    //
    // This mask will always be a subset of the IsrWaitMask.  While
    // at device level, if an event occurs that is "marked" as interesting
    // in the IsrWaitMask, the driver will turn on that bit in this
    // history mask.  The driver will then look to see if there is a
    // request waiting for an event to occur.  If there is one, it
    // will copy the value of the history mask into the wait irp, zero
    // the history mask, and complete the wait irp.  If there is no
    // waiting request, the driver will be satisfied with just recording
    // that the event occured.  If a wait request should be queued,
    // the driver will look to see if the history mask is non-zero.  If
    // it is non-zero, the driver will copy the history mask into the
    // irp, zero the history mask, and then complete the irp.
    //
    ULONG HistoryMask;

    //
    // This is a pointer to the where the history mask should be
    // placed when completing a wait.  It is only accessed at
    // device level.
    //
    // We have a pointer here to assist us to synchronize completing a wait.
    // If this is non-zero, then we have wait outstanding, and the isr still
    // knows about it.  We make this pointer null so that the isr won't
    // attempt to complete the wait.
    //
    // We still keep a pointer around to the wait irp, since the actual
    // pointer to the wait irp will be used for the "common" irp completion
    // path.
    //
    ULONG *IrpMaskLocation;

    //
    // This mask holds all of the reason that transmission
    // is not proceeding.  Normal transmission can not occur
    // if this is non-zero.
    //
    // This is only written from interrupt level.
    // This could be (but is not) read at any level.
    //
    ULONG TXHolding;

    //
    // This mask holds all of the reason that reception
    // is not proceeding.  Normal reception can not occur
    // if this is non-zero.
    //
    // This is only written from interrupt level.
    // This could be (but is not) read at any level.
    //
    ULONG RXHolding;

    //
    // This holds the reasons that the driver thinks it is in
    // an error state.
    //
    // This is only written from interrupt level.
    // This could be (but is not) read at any level.
    //
    ULONG ErrorWord;

    //
    // This keeps a total of the number of characters that
    // are in all of the "write" irps that the driver knows
    // about.  It is only accessed with the cancel spinlock
    // held.
    //
    ULONG TotalCharsQueued;

    //
    // This holds a count of the number of characters read
    // the last time the interval timer dpc fired.  It
    // is a long (rather than a ulong) since the other read
    // completion routines use negative values to indicate
    // to the interval timer that it should complete the read
    // if the interval timer DPC was lurking in some DPC queue when
    // some other way to complete occurs.
    //
    LONG CountOnLastRead;

    //
    // This is a count of the number of characters read by the
    // isr routine.  It is *ONLY* written at isr level.  We can
    // read it at dispatch level.
    //
    ULONG ReadByIsr;

    //
    // This holds the current baud rate for the device.
    //
    ULONG CurrentBaud;

    //
    // This is the number of characters read since the XoffCounter
    // was started.  This variable is only accessed at device level.
    // If it is greater than zero, it implies that there is an
    // XoffCounter ioctl in the queue.
    //
    LONG CountSinceXoff;

    //
    // This ulong is incremented each time something trys to start
    // the execution path that tries to lower the RTS line when
    // doing transmit toggling.  If it "bumps" into another path
    // (indicated by a false return value from queueing a dpc
    // and a TRUE return value tring to start a timer) it will
    // decrement the count.  These increments and decrements
    // are all done at device level.  Note that in the case
    // of a bump while trying to start the timer, we have to
    // go up to device level to do the decrement.
    //
    ULONG CountOfTryingToLowerRTS;

    //
    // This ULONG is used to keep track of the "named" (in ntddser.h)
    // baud rates that this particular device supports.
    //
    ULONG SupportedBauds;

    //
    // This value holds the span (in units of bytes) of the register
    // set controlling this port.  This is constant over the life
    // of the port.
    //
    ULONG RuntimeLength;

    //
    // This value holds the span (in units of bytes) of the interrupt
    // status register associated with this port.  This is constant
    // over the life of the port.
    //
    ULONG BoardMemoryLength;

    //
    // The number of characters to push out if a fifo is present.
    //
    ULONG TxFifoAmount;

    //
    // Set to indicate that it is ok to share interrupts within the device.
    //
    ULONG PermitShare;

    //
    // Holds the timeout controls for the device.  This value
    // is set by the Ioctl processing.
    //
    // It should only be accessed under protection of the control
    // lock since more than one request can be in the control dispatch
    // routine at one time.
    //
    SERIAL_TIMEOUTS Timeouts;

    //
    // This holds the various characters that are used
    // for replacement on errors and also for flow control.
    //
    // They are only set at interrupt level.
    //
    SERIAL_CHARS SpecialChars;

    //
    // This structure holds the handshake and control flow
    // settings for the serial driver.
    //
    // It is only set at interrupt level.  It can be
    // be read at any level with the control lock held.
    //
    SERIAL_HANDFLOW HandFlow;

    //
    // Holds performance statistics that applications can query.
    // Reset on each open.  Only set at device level.
    //
    SERIALPERF_STATS PerfStats;

    //
    // This holds what we beleive to be the current value of
    // the line control register.
    //
    // It should only be accessed under protection of the control
    // lock since more than one request can be in the control dispatch
    // routine at one time.
    //
    ULONG CommParity;
    ULONG CommDataLen;

    //
    // We keep track of whether the somebody has the device currently
    // opened with a simple boolean.  We need to know this so that
    // spurious interrupts from the device (especially during initialization)
    // will be ignored.  This value is only accessed in the ISR and
    // is only set via synchronization routines.  We may be able
    // to get rid of this boolean when the code is more fleshed out.
    //
    BOOLEAN DeviceIsOpened;

    //
    // This is only accessed at interrupt level.  It keeps track
    // of whether the holding register is empty.
    //
    BOOLEAN HoldingEmpty;

    //
    // This variable is only accessed at interrupt level.  It
    // indicates that we want to transmit a character immediately.
    // That is - in front of any characters that could be transmitting
    // from a normal write.
    //
    BOOLEAN TransmitImmediate;

    //
    // This variable is only accessed at interrupt level.  Whenever
    // a wait is initiated this variable is set to false.
    // Whenever any kind of character is written it is set to true.
    // Whenever the write queue is found to be empty the code that
    // is processing that completing irp will synchonize with the interrupt.
    // If this synchronization code finds that the variable is true and that
    // there is a wait on the transmit queue being empty then it is
    // certain that the queue was emptied and that it has happened since
    // the wait was initiated.
    //
    BOOLEAN EmptiedTransmit;

    //
    // This simply indicates that the port associated with this
    // extension is part of a multiport card.
    //
//    BOOLEAN PortOnAMultiportCard;


#ifndef POLL
    //
    // We keep the following values around so that we can connect
    // to the interrupt and report resources after the configuration
    // record is gone.
    //
    ULONG Vector;
    KIRQL Irql;
    ULONG OriginalVector;
    ULONG OriginalIrql;
    KINTERRUPT_MODE InterruptMode;
    KAFFINITY ProcessorAffinity;
#endif
    ULONG RuntimeAddressSpace;
    ULONG BoardMemoryAddressSpace;
    ULONG BusNumber;
    INTERFACE_TYPE InterfaceType;

    //
    // Port index for multiport devices
    //
    ULONG PortIndex;

    //
    // We hold the character that should be transmitted immediately.
    //
    // Note that we can't use this to determine whether there is
    // a character to send because the character to send could be
    // zero.
    //
    UCHAR ImmediateChar;

    //
    // This holds the mask that will be used to mask off unwanted
    // data bits of the received data (valid data bits can be 5,6,7,8)
    // The mask will normally be 0xff.  This is set while the control
    // lock is held since it wouldn't have adverse effects on the
    // isr if it is changed in the middle of reading characters.
    // (What it would do to the app is another question - but then
    // the app asked the driver to do it.)
    //
    UCHAR ValidDataMask;

    //
    // The application can turn on a mode,via the
    // IOCTL_CYZ_LSRMST_INSERT ioctl, that will cause the
    // serial driver to insert the line status or the modem
    // status into the RX stream.  The parameter with the ioctl
    // is a pointer to a UCHAR.  If the value of the UCHAR is
    // zero, then no insertion will ever take place.  If the
    // value of the UCHAR is non-zero (and not equal to the
    // xon/xoff characters), then the serial driver will insert.
    //
    UCHAR EscapeChar;

// REMOVED FANNY
//    //
//    // This boolean will be true if a 16550 is present *and* enabled.
//    //
//    BOOLEAN FifoPresent;
//
//    //
//    // This denotes that this particular port is an on the motherboard
//    // port for the Jensen hardware.  On these ports the OUT2 bit
//    // which is used to enable/disable interrupts is always hight.
//    //
//    BOOLEAN Jensen;

    //
    // This is the water mark that the rxfifo should be
    // set to when the fifo is turned on.  This is not the actual
    // value, but the encoded value that goes into the register.
    //
    ULONG RxFifoTrigger;

#ifndef POLL
    //
    // Says whether this device can share interrupts with devices
    // other than serial devices.
    //
    BOOLEAN InterruptShareable;
#endif

    //
    // Records whether we actually created the symbolic link name
    // at driver load time.  If we didn't create it, we won't try
    // to distry it when we unload.
    //
    BOOLEAN CreatedSymbolicLink;

    //
    // Records whether we actually created an entry in SERIALCOMM
    // at driver load time.  If we didn't create it, we won't try
    // to destroy it when the device is removed.
    //
    BOOLEAN CreatedSerialCommEntry;

    //
    // We place all of the kernel and Io subsystem "opaque" structures
    // at the end of the extension.  We don't care about their contents.
    //

    //
    // This lock will be used to protect various fields in
    // the extension that are set (& read) in the extension
    // by the io controls.
    //
    KSPIN_LOCK ControlLock;

    //
    // This lock will be used to protect the accept / reject state
    // transitions and flags of the driver  It must be acquired
    // before a cancel lock
    //

    KSPIN_LOCK FlagsLock;

#ifdef POLL
    //
    // This lock will be used to protect various fields in
    // the extension and in the hardware that are set (& read) 
    // by the Timer Dpc. In the NT driver, we used ControlLock
    // for this.
    //
    KSPIN_LOCK PollLock;    // Added to fix Modem Share test 53 freeze (dead lock)
#endif
    //
    // This points to a DPC used to complete read requests.
    //
    KDPC CompleteWriteDpc;

    //
    // This points to a DPC used to complete read requests.
    //
    KDPC CompleteReadDpc;

    //
    // This dpc is fired off if the timer for the total timeout
    // for the read expires.  It will execute a dpc routine that
    // will cause the current read to complete.
    //
    //
    KDPC TotalReadTimeoutDpc;

    //
    // This dpc is fired off if the timer for the interval timeout
    // expires.  If no more characters have been read then the
    // dpc routine will cause the read to complete.  However, if
    // more characters have been read then the dpc routine will
    // resubmit the timer.
    //
    KDPC IntervalReadTimeoutDpc;

    //
    // This dpc is fired off if the timer for the total timeout
    // for the write expires.  It will execute a dpc routine that
    // will cause the current write to complete.
    //
    //
    KDPC TotalWriteTimeoutDpc;

    //
    // This dpc is fired off if a comm error occurs.  It will
    // execute a dpc routine that will cancel all pending reads
    // and writes.
    //
    KDPC CommErrorDpc;

    //
    // This dpc is fired off if an event occurs and there was
    // a irp waiting on that event.  A dpc routine will execute
    // that completes the irp.
    //
    KDPC CommWaitDpc;

    //
    // This dpc is fired off when the transmit immediate char
    // character is given to the hardware.  It will simply complete
    // the irp.
    //
    KDPC CompleteImmediateDpc;

    //
    // This dpc is fired off if the transmit immediate char
    // character times out.  The dpc routine will "grab" the
    // irp from the isr and time it out.
    //
    KDPC TotalImmediateTimeoutDpc;

    //
    // This dpc is fired off if the timer used to "timeout" counting
    // the number of characters received after the Xoff ioctl is started
    // expired.
    //
    KDPC XoffCountTimeoutDpc;

    //
    // This dpc is fired off if the xoff counter actually runs down
    // to zero.
    //
    KDPC XoffCountCompleteDpc;

    //
    // This dpc is fired off only from device level to start off
    // a timer that will queue a dpc to check if the RTS line
    // should be lowered when we are doing transmit toggling.
    //
    KDPC StartTimerLowerRTSDpc;

    //
    // This dpc is fired off when a timer expires (after one
    // character time), so that code can be invoked that will
    // check to see if we should lower the RTS line when
    // doing transmit toggling.
    //
    KDPC PerhapsLowerRTSDpc;

    //
    // This DPC is fired to set an event stating that all other
    // DPC's have been finish for this device extension so that
    // paged code may be unlocked.
    //

    KDPC IsrUnlockPagesDpc;

    //
    // This is the kernal timer structure used to handle
    // total read request timing.
    //
    KTIMER ReadRequestTotalTimer;

    //
    // This is the kernal timer structure used to handle
    // interval read request timing.
    //
    KTIMER ReadRequestIntervalTimer;

    //
    // This is the kernal timer structure used to handle
    // total time request timing.
    //
    KTIMER WriteRequestTotalTimer;

    //
    // This is the kernal timer structure used to handle
    // total time request timing.
    //
    KTIMER ImmediateTotalTimer;

    //
    // This timer is used to timeout the xoff counter
    // io.
    //
    KTIMER XoffCountTimer;

    //
    // This timer is used to invoke a dpc one character time
    // after the timer is set.  That dpc will be used to check
    // whether we should lower the RTS line if we are doing
    // transmit toggling.
    //
    KTIMER LowerRTSTimer;
	
    //
    // This is a pointer to the next lower device in the IRP stack.
    //

    PDEVICE_OBJECT LowerDeviceObject;

    //
    // This is where keep track of the power state the device is in.
    //

    DEVICE_POWER_STATE PowerState;

    //
    // Pointer to the driver object
    //

    PDRIVER_OBJECT DriverObject;


    //
    // Event used to do some synchronization with the devices underneath me
    // (namely ACPI)
    //

    KEVENT SerialSyncEvent;


    //
    // String where we keep the symbolic link that is returned to us when we
    // register our device under the COMM class with the Plug and Play manager.
    //

    UNICODE_STRING DeviceClassSymbolicName;

    //
    // Count of pending IRP's
    //

    ULONG PendingIRPCnt;

    //
    // Accepting requests?
    //

    ULONG DevicePNPAccept;

    //
    // No IRP's pending event
    //

    KEVENT PendingIRPEvent;

    //
    // PNP State
    //

    ULONG PNPState;

    //
    // Misc Flags
    //

    ULONG Flags;

    //
    // Open count
    //

    LONG OpenCount;

    //
    // Start sync event
    //

    KEVENT CyzStartEvent;

    //
    // Current state during powerdown
    //

    CYZ_DEVICE_STATE DeviceState;

    //
    // Device stack capabilites
    //

    DEVICE_POWER_STATE DeviceStateMap[PowerSystemMaximum];

    //
    // Event to signal transition to D0 completion
    //

    KEVENT PowerD0Event;

    //
    // List of stalled IRP's
    //

    LIST_ENTRY StalledIrpQueue;

    //
    // Mutex on open status
    //

    FAST_MUTEX OpenMutex;

    //
    // Mutex on close
    //

    FAST_MUTEX CloseMutex;

    //
    // TRUE if we own power policy
    //

    BOOLEAN OwnsPowerPolicy;

    //
    // SystemWake from devcaps
    //

    SYSTEM_POWER_STATE SystemWake;

    //
    // DeviceWake from devcaps
    //

    DEVICE_POWER_STATE DeviceWake;

    //
    // Our PDO
    //

    PDEVICE_OBJECT Pdo;

    //
    // Should we enable wakeup
    //

    BOOLEAN SendWaitWake;

    //
    // Pending wait wake IRP
    //

    PIRP PendingWakeIrp;

    //
    // WMI Information
    //

    WMILIB_CONTEXT WmiLibInfo;

    //
    // Name to use as WMI identifier
    //

    UNICODE_STRING WmiIdentifier;

    //
    // WMI Comm Data
    //

    SERIAL_WMI_COMM_DATA WmiCommData;

    //
    // WMI HW Data
    //

    SERIAL_WMI_HW_DATA WmiHwData;

    //
    // WMI Performance Data
    //

    SERIAL_WMI_PERF_DATA WmiPerfData;

    //
    // Pending DPC count
    //

    ULONG DpcCount;

    //
    // Pending DPC event
    //

    KEVENT PendingDpcEvent;

    //
    // Should we expose external interfaces?
    //

    ULONG SkipNaming;
    
    //
    // Com port number.
    //
    //ULONG Com;
		
    //
    // Flag to indicate if Command Failure error was already logged.
    // Only one log per driver load. Otherwise, the system may crash if 
    // too many logs start happening.
    //
    BOOLEAN CmdFailureLog;
	
    //
    // DCD Status when the firmware detected the DCD signal change
    //
    ULONG DCDstatus;

    //
    //  Flag to indicate that the fw has processed the C_CM_IOCTLW command.
    //
    BOOLEAN IoctlwProcessed;

    //
    // Flag read from the Registry. It indicates when Write status is returned.
    //
    BOOLEAN ReturnStatusAfterFwEmpty;
	
    //
    // Flag read from the Registry. It indicates that the reception should 
    // give the packets as soon as the second 7E is received.
    //
    BOOLEAN PPPaware;

    //
    // Flag to indicate that the driver can return the status of CyzWrite.
    //
    BOOLEAN ReturnWriteStatus;

    // These two booleans are used to indicate to the isr transmit
    // code that it should send the xon or xoff character.  They are
    // only accessed at open and at interrupt level.
    //
    BOOLEAN SendXonChar;
    BOOLEAN SendXoffChar;

   //
   // PCI slot where the board is inserted.
   //
   ULONG PciSlot;

    } CYZ_DEVICE_EXTENSION,*PCYZ_DEVICE_EXTENSION;

#define CYZ_PNPACCEPT_OK                 0x0L
#define CYZ_PNPACCEPT_REMOVING           0x1L
#define CYZ_PNPACCEPT_STOPPING           0x2L
#define CYZ_PNPACCEPT_STOPPED            0x4L
#define CYZ_PNPACCEPT_SURPRISE_REMOVING  0x8L

#define CYZ_PNP_ADDED                    0x0L
#define CYZ_PNP_STARTED                  0x1L
#define CYZ_PNP_QSTOP                    0x2L
#define CYZ_PNP_STOPPING                 0x3L
#define CYZ_PNP_QREMOVE                  0x4L
#define CYZ_PNP_REMOVING                 0x5L
#define CYZ_PNP_RESTARTING               0x6L

#define CYZ_FLAGS_CLEAR                  0x0L
#define CYZ_FLAGS_STARTED                0x1L
#define CYZ_FLAGS_STOPPED                0x2L
#define CYZ_FLAGS_BROKENHW               0x4L


//
// When dealing with a multi-port device (that is possibly
// daisy chained with other multi-port device), the interrupt
// service routine will actually be a routine that determines
// which port on which board is actually causing the interrupt.
//
// The following structure is used so that only one device
// extension will actually need to connect to the interrupt.
// The following structure which is passed to the interrupt
// service routine contains the addresses of all of the
// interrupt status registers (there will be multiple
// status registers when multi-port cards are chained).  It
// will contain the addresses of all the extensions whose
// devices are being serviced by this interrupt.
//

#ifdef POLL
typedef struct _CYZ_DISPATCH {
    ULONG                 NChannels;
    PCYZ_DEVICE_EXTENSION Extensions[CYZ_MAX_PORTS];
    KTIMER                PollingTimer;
    LARGE_INTEGER         PollingTime;
    ULONG                 PollingPeriod;
    KDPC                  PollingDpc;
    BOOLEAN               PollingStarted;
    BOOLEAN               PollingDrained;
    ULONG                 PollingCount;
    KSPIN_LOCK            PollingLock;
    KSPIN_LOCK            PciDoorbellLock;
    KEVENT                PendingDpcEvent;
   } CYZ_DISPATCH,*PCYZ_DISPATCH;
#else
typedef struct _CYZ_DISPATCH {
    ULONG                 NChannels;
    PCYZ_DEVICE_EXTENSION Extensions[CYZ_MAX_PORTS];
    BOOLEAN               PoweredOn[CYZ_MAX_PORTS];
   } CYZ_DISPATCH,*PCYZ_DISPATCH;
#endif


//
// This is exported from the kernel.  It is used to point
// to the address that the kernel debugger is using.
//

extern PUCHAR *KdComPortInUse;

typedef enum _CYZ_MEM_COMPARES {
    AddressesAreEqual,
    AddressesOverlap,
    AddressesAreDisjoint
    } CYZ_MEM_COMPARES,*PCYZ_MEM_COMPARES;

typedef struct _CYZ_GLOBALS {
   LIST_ENTRY AllDevObjs;
   PVOID PAGESER_Handle;
   UNICODE_STRING RegistryPath;
   KSPIN_LOCK GlobalsSpinLock;
#if DBG
   ULONG PAGESER_Count;
#endif // DBG
} CYZ_GLOBALS, *PCYZ_GLOBALS;

extern CYZ_GLOBALS CyzGlobals;

typedef struct _SERIAL_PTR_CTX {
   ULONG isPointer;
   PHYSICAL_ADDRESS Port;
   ULONG Vector;
} SERIAL_PTR_CTX, *PSERIAL_PTR_CTX;

#define DEVICE_OBJECT_NAME_LENGTH       128
#define SYMBOLIC_NAME_LENGTH            128
#define SERIAL_DEVICE_MAP               L"SERIALCOMM"

//
// Return values for mouse detection callback
//

#define SERIAL_FOUNDPOINTER_PORT   1
#define SERIAL_FOUNDPOINTER_VECTOR 2


#define CyzCompleteRequest(PDevExt, PIrp, PriBoost) \
   { \
      CyzDbgPrintEx(CYZIRPPATH, "Complete Irp: %X\n", (PIrp)); \
      IoCompleteRequest((PIrp), (PriBoost)); \
      CyzIRPEpilogue((PDevExt)); \
   }

#define SERIAL_WMI_GUID_LIST_SIZE 5

extern WMIGUIDREGINFO SerialWmiGuidList[SERIAL_WMI_GUID_LIST_SIZE];


// For Cyclades-Z

#define CYZ_BASIC_RXTRIGGER              0x08    // Used in IOCTL_SERIAL_INTERNAL_BASIC_SETTINGS

#define Z_COMPATIBLE_FIRMWARE	    0x323   // C_CM_TXFEMPTY support added.
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyzport\cyzportp.h ===
/*--------------------------------------------------------------------------
*
*   Copyright (C) Cyclades Corporation, 1997-2001.
*   All rights reserved.
*
*   Cyclades-Z Port Driver
*	
*   This file:      cyzportp.h
*
*   Description:    Prototypes and macros that are used throughout the 
*                   driver.
*
*   Notes:          This code supports Windows 2000 and x86 processor.
*
*   Complies with Cyclades SW Coding Standard rev 1.3.
*
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*   Change History
*
*--------------------------------------------------------------------------
*
*
*--------------------------------------------------------------------------
*/

typedef
NTSTATUS
(*PSERIAL_START_ROUTINE) (
    IN PCYZ_DEVICE_EXTENSION
    );

typedef
VOID
(*PSERIAL_GET_NEXT_ROUTINE) (
    IN PIRP *CurrentOpIrp,
    IN PLIST_ENTRY QueueToProcess,
    OUT PIRP *NewIrp,
    IN BOOLEAN CompleteCurrent,
    PCYZ_DEVICE_EXTENSION Extension
    );

// cyzinit.c prototypes
NTSTATUS
DriverEntry(
    IN PDRIVER_OBJECT DriverObject,
    IN PUNICODE_STRING RegistryPath
    );

VOID
CyzDisableInterfacesResources(IN PDEVICE_OBJECT PDevObj,
                                 BOOLEAN DisableUART);

VOID
CyzKillPendingIrps(PDEVICE_OBJECT DeviceObject);

CYZ_MEM_COMPARES
CyzMemCompare(
                IN PHYSICAL_ADDRESS A,
                IN ULONG SpanOfA,
                IN PHYSICAL_ADDRESS B,
                IN ULONG SpanOfB
                );

VOID
CyzReleaseResources(IN PCYZ_DEVICE_EXTENSION PDevExt);

NTSTATUS
CyzRemoveDevObj(IN PDEVICE_OBJECT PDevObj);

BOOLEAN
CyzDoesPortExist(
                  IN PCYZ_DEVICE_EXTENSION Extension,
                  IN PUNICODE_STRING InsertString
                );

BOOLEAN
CyzReset(
    IN PVOID Context
    );

VOID
CyzUnload(
    IN PDRIVER_OBJECT DriverObject
    );

NTSTATUS
CyzInitController(IN PDEVICE_OBJECT PDevObj, IN PCONFIG_DATA PConfigData);

VOID
CyzResetBoard( PCYZ_DEVICE_EXTENSION Extension );

NTSTATUS
CyzFindInitController(IN PDEVICE_OBJECT PDevObj, IN PCONFIG_DATA PConfig);

VOID
CyzCommError(
    IN PKDPC Dpc,
    IN PVOID DeferredContext,
    IN PVOID SystemContext1,
    IN PVOID SystemContext2
    );

// end cyzinit.c

NTSTATUS
CyzRead(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    );

NTSTATUS
CyzStartRead(
    IN PCYZ_DEVICE_EXTENSION Extension
    );

VOID
CyzCompleteRead(
    IN PKDPC Dpc,
    IN PVOID DeferredContext,
    IN PVOID SystemContext1,
    IN PVOID SystemContext2
    );

VOID
CyzReadTimeout(
    IN PKDPC Dpc,
    IN PVOID DeferredContext,
    IN PVOID SystemContext1,
    IN PVOID SystemContext2
    );

VOID
CyzIntervalReadTimeout(
    IN PKDPC Dpc,
    IN PVOID DeferredContext,
    IN PVOID SystemContext1,
    IN PVOID SystemContext2
    );

NTSTATUS
CyzFlush(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    );

NTSTATUS
CyzWrite(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    );

NTSTATUS
CyzStartWrite(
    IN PCYZ_DEVICE_EXTENSION Extension
    );

VOID
CyzGetNextWrite(
    IN PIRP *CurrentOpIrp,
    IN PLIST_ENTRY QueueToProcess,
    IN PIRP *NewIrp,
    IN BOOLEAN CompleteCurrent,
    IN PCYZ_DEVICE_EXTENSION Extension
    );

VOID
CyzCompleteWrite(
    IN PKDPC Dpc,
    IN PVOID DeferredContext,
    IN PVOID SystemContext1,
    IN PVOID SystemContext2
    );
    
BOOLEAN
CyzTxStart(
    IN PVOID Context
    );

BOOLEAN
CyzSendXon(
    IN PVOID Context
    );
    
BOOLEAN
CyzSendXoff(
    IN PVOID Context
    );
    
BOOLEAN
CyzProcessEmptyTransmit(
    IN PVOID Context
    );

VOID
CyzWriteTimeout(
    IN PKDPC Dpc,
    IN PVOID DeferredContext,
    IN PVOID SystemContext1,
    IN PVOID SystemContext2
    );

NTSTATUS
CyzCleanup(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    );

NTSTATUS
CyzCreateOpen(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    );

NTSTATUS
CyzClose(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    );

BOOLEAN
CyzDisableHw(
    IN PVOID Context
    );

BOOLEAN
CyzTryToDisableTimer(
    IN PVOID Context
    );

BOOLEAN
CyzSetDTR(
    IN PVOID Context
    );

BOOLEAN
CyzClrDTR(
    IN PVOID Context
    );

BOOLEAN
CyzSetRTS(
    IN PVOID Context
    );

BOOLEAN
CyzClrRTS(
    IN PVOID Context
    );

BOOLEAN
CyzSetChars(
    IN PVOID Context
    );

BOOLEAN
CyzSetBaud(
    IN PVOID Context
    );
    
BOOLEAN
CyzSetLineControl(
    IN PVOID Context
    );

BOOLEAN
CyzSetupNewHandFlow(
    IN PCYZ_DEVICE_EXTENSION Extension,
    IN PSERIAL_HANDFLOW NewHandFlow
    );

BOOLEAN
CyzSetHandFlow(
    IN PVOID Context
    );

BOOLEAN
CyzTurnOnBreak(
    IN PVOID Context
    );

BOOLEAN
CyzTurnOffBreak(
    IN PVOID Context
    );

BOOLEAN
CyzPretendXoff(
    IN PVOID Context
    );

BOOLEAN
CyzPretendXon(
    IN PVOID Context
    );

VOID
CyzHandleReducedIntBuffer(
    IN PCYZ_DEVICE_EXTENSION Extension
    );

VOID
CyzProdXonXoff(
    IN PCYZ_DEVICE_EXTENSION Extension,
    IN BOOLEAN SendXon
    );

NTSTATUS
CyzIoControl(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    );

NTSTATUS
CyzStartMask(
    IN PCYZ_DEVICE_EXTENSION Extension
    );

VOID
CyzCancelWait(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    );

VOID
CyzCompleteWait(
    IN PKDPC Dpc,
    IN PVOID DeferredContext,
    IN PVOID SystemContext1,
    IN PVOID SystemContext2
    );

VOID
CyzStartImmediate(
    IN PCYZ_DEVICE_EXTENSION Extension
    );

VOID
CyzCompleteImmediate(
    IN PKDPC Dpc,
    IN PVOID DeferredContext,
    IN PVOID SystemContext1,
    IN PVOID SystemContext2
    );

VOID
CyzTimeoutImmediate(
    IN PKDPC Dpc,
    IN PVOID DeferredContext,
    IN PVOID SystemContext1,
    IN PVOID SystemContext2
    );

VOID
CyzTimeoutXoff(
    IN PKDPC Dpc,
    IN PVOID DeferredContext,
    IN PVOID SystemContext1,
    IN PVOID SystemContext2
    );

VOID
CyzCompleteXoff(
    IN PKDPC Dpc,
    IN PVOID DeferredContext,
    IN PVOID SystemContext1,
    IN PVOID SystemContext2
    );

NTSTATUS
CyzStartPurge(
    IN PCYZ_DEVICE_EXTENSION Extension
    );

BOOLEAN
CyzPurgeInterruptBuff(
    IN PVOID Context
    );

NTSTATUS
CyzQueryInformationFile(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    );

NTSTATUS
CyzSetInformationFile(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    );

VOID
CyzKillAllReadsOrWrites(
    IN PDEVICE_OBJECT DeviceObject,
    IN PLIST_ENTRY QueueToClean,
    IN PIRP *CurrentOpIrp
    );

VOID
CyzGetNextIrp(
    IN PIRP *CurrentOpIrp,
    IN PLIST_ENTRY QueueToProcess,
    OUT PIRP *NextIrp,
    IN BOOLEAN CompleteCurrent,
    IN PCYZ_DEVICE_EXTENSION Extension
    );

VOID
CyzTryToCompleteCurrent(
    IN PCYZ_DEVICE_EXTENSION Extension,
    IN PKSYNCHRONIZE_ROUTINE SynchRoutine OPTIONAL,
    IN KIRQL IrqlForRelease,
    IN NTSTATUS StatusToUse,
    IN PIRP *CurrentOpIrp,
    IN PLIST_ENTRY QueueToProcess,
    IN PKTIMER IntervalTimer,
    IN PKTIMER TotalTimer,
    IN PSERIAL_START_ROUTINE Starter,
    IN PSERIAL_GET_NEXT_ROUTINE GetNextIrp,
    IN LONG RefType
    );

NTSTATUS
CyzStartOrQueue(
    IN PCYZ_DEVICE_EXTENSION Extension,
    IN PIRP Irp,
    IN PLIST_ENTRY QueueToExamine,
    IN PIRP *CurrentOpIrp,
    IN PSERIAL_START_ROUTINE Starter
    );

VOID
CyzCancelQueued(
    PDEVICE_OBJECT DeviceObject,
    PIRP Irp
    );

NTSTATUS
CyzCompleteIfError(
    PDEVICE_OBJECT DeviceObject,
    PIRP Irp
    );

ULONG
CyzHandleModemUpdate(
    IN PCYZ_DEVICE_EXTENSION Extension,
    IN BOOLEAN DoingTX,
    IN ULONG Reason
    );
    
#ifdef POLL	
VOID
CyzPollingDpc(
   IN PKDPC Dpc,
	IN PVOID DeferredContext,
	IN PVOID SystemContext1,
	IN PVOID SystemContext2
    );
#else
BOOLEAN
CyzIsr(
    IN PKINTERRUPT InterruptObject,
    IN PVOID Context
    );

VOID
CyzRx(
    IN PCYZ_DEVICE_EXTENSION Extension
    );

VOID
CyzTx(
    IN PCYZ_DEVICE_EXTENSION Extension
    );

#endif

BOOLEAN
CyzPerhapsLowerRTS(
    IN PVOID Context
    );

VOID
CyzStartTimerLowerRTS(
    IN PKDPC Dpc,
    IN PVOID DeferredContext,
    IN PVOID SystemContext1,
    IN PVOID SystemContext2
    );

VOID
CyzInvokePerhapsLowerRTS(
    IN PKDPC Dpc,
    IN PVOID DeferredContext,
    IN PVOID SystemContext1,
    IN PVOID SystemContext2
    );

VOID
CyzCleanupDevice(
    IN PCYZ_DEVICE_EXTENSION Extension
    );

UCHAR
CyzProcessLSR(
    IN PCYZ_DEVICE_EXTENSION Extension,
    IN UCHAR LineStatus
    );

LARGE_INTEGER
CyzGetCharTime(
    IN PCYZ_DEVICE_EXTENSION Extension
    );

BOOLEAN
CyzMarkClose(
    IN PVOID Context
    );

BOOLEAN
CyzIndexedMultiportIsr(
    IN PKINTERRUPT InterruptObject,
    IN PVOID Context
    );

BOOLEAN
CyzBitMappedMultiportIsr(
    IN PKINTERRUPT InterruptObject,
    IN PVOID Context
    );

VOID
CyzPutChar(
    IN PCYZ_DEVICE_EXTENSION Extension,
    IN UCHAR CharToPut
    );
	
BOOLEAN
CyzGetStats(
    IN PVOID Context
    );

BOOLEAN
CyzClearStats(
    IN PVOID Context
    );    
	

// cyzreg.c

NTSTATUS
CyzGetConfigDefaults(
    IN PCYZ_REGISTRY_DATA DriverDefaultsPtr,
    IN PUNICODE_STRING RegistryPath
    );

NTSTATUS 
CyzGetRegistryKeyValue (
                       IN HANDLE Handle,
                       IN PWCHAR KeyNameString,
                       IN ULONG KeyNameStringLength,
                       IN PVOID Data,
                       IN ULONG DataLength
                       );
ULONG 
CyzGetRegistryKeyValueLength (
                       IN HANDLE Handle,
                       IN PWCHAR KeyNameString,
                       IN ULONG KeyNameStringLength);

NTSTATUS 
CyzPutRegistryKeyValue(IN HANDLE Handle, IN PWCHAR PKeyNameString,
                       IN ULONG KeyNameStringLength, IN ULONG Dtype,
                       IN PVOID PData, IN ULONG DataLength);

// cyzpnp.c

NTSTATUS
CyzAddDevice(
    IN PDRIVER_OBJECT DriverObject, IN PDEVICE_OBJECT PLowerDevObj);

//NTSTATUS
//CyzCreateDevObj(IN PDRIVER_OBJECT DriverObject,
//                OUT PDEVICE_OBJECT *NewDeviceObject);
NTSTATUS
CyzCreateDevObj(IN PDRIVER_OBJECT DriverObject,
                IN PDEVICE_OBJECT PPdo,
                OUT PDEVICE_OBJECT *NewDeviceObject);

NTSTATUS
CyzFinishStartDevice(IN PDEVICE_OBJECT PDevObj,
                     IN PCM_RESOURCE_LIST PResList,
                     IN PCM_RESOURCE_LIST PTrResList);

NTSTATUS
CyzGetPortInfo(IN PDEVICE_OBJECT PDevObj, IN PCM_RESOURCE_LIST PResList,
               IN PCM_RESOURCE_LIST PTrResList, OUT PCONFIG_DATA PConfig);

NTSTATUS
CyzStartDevice(IN PDEVICE_OBJECT PDevObj, IN PIRP PIrp);

NTSTATUS
CyzSyncCompletion(IN PDEVICE_OBJECT DeviceObject, IN PIRP Irp,
                  IN PKEVENT CyzSyncEvent);

NTSTATUS
CyzPnpDispatch(IN PDEVICE_OBJECT PDevObj, IN PIRP PIrp);

NTSTATUS
CyzDoExternalNaming(IN PCYZ_DEVICE_EXTENSION PDevExt,
                    IN PDRIVER_OBJECT PDrvObj);

VOID
CyzUndoExternalNaming(IN PCYZ_DEVICE_EXTENSION Extension);

UINT32
CyzReportMaxBaudRate(ULONG Bauds);

// cyzioctl.c

VOID
CyzGetProperties(
    IN PCYZ_DEVICE_EXTENSION Extension,
    IN PSERIAL_COMMPROP Properties
    );

NTSTATUS
CyzInternalIoControl(IN PDEVICE_OBJECT DeviceObject, IN PIRP Irp);

BOOLEAN
CyzSetMCRContents(IN PVOID Context);

BOOLEAN
CyzGetMCRContents(IN PVOID Context);

BOOLEAN
CyzSetFCRContents(IN PVOID Context);

VOID
CyzIssueCmd( 
	PCYZ_DEVICE_EXTENSION Extension,
    ULONG cmd, 
	ULONG param,
    BOOLEAN wait
);

// cyzpower.c

NTSTATUS
CyzPowerDispatch(IN PDEVICE_OBJECT PDevObj, IN PIRP PIrp);

NTSTATUS
CyzGotoPowerState(IN PDEVICE_OBJECT PDevObj,
                  IN PCYZ_DEVICE_EXTENSION PDevExt,
                  IN DEVICE_POWER_STATE DevPowerState);
NTSTATUS
CyzSendWaitWake(PCYZ_DEVICE_EXTENSION PDevExt);

VOID
CyzRestoreDeviceState(IN PCYZ_DEVICE_EXTENSION PDevExt);

NTSTATUS
CyzSetPowerD0(IN PDEVICE_OBJECT PDevObj, IN PIRP PIrp);

NTSTATUS
CyzSetPowerD3(IN PDEVICE_OBJECT PDevObj, IN PIRP PIrp);

VOID
CyzSaveDeviceState(IN PCYZ_DEVICE_EXTENSION PDevExt);

NTSTATUS
CyzWakeCompletion(IN PDEVICE_OBJECT PDevObj, IN UCHAR MinorFunction,
                  IN POWER_STATE PowerState, IN PVOID Context,
                  IN PIO_STATUS_BLOCK IoStatus);


// cyzwmi.c

NTSTATUS
CyzQueryWmiDataBlock(IN PDEVICE_OBJECT PDevObj, IN PIRP PIrp,
                     IN ULONG GuidIndex, 
                     IN ULONG InstanceIndex,
                     IN ULONG InstanceCount,
                     IN OUT PULONG InstanceLengthArray,
                     IN ULONG OutBufferSize,
                     OUT PUCHAR PBuffer);

NTSTATUS
CyzQueryWmiRegInfo(IN PDEVICE_OBJECT PDevObj, OUT PULONG PRegFlags,
                   OUT PUNICODE_STRING PInstanceName,
                   OUT PUNICODE_STRING *PRegistryPath,
                   OUT PUNICODE_STRING MofResourceName,
                   OUT PDEVICE_OBJECT *Pdo);

NTSTATUS
CyzSetWmiDataBlock(IN PDEVICE_OBJECT PDevObj, IN PIRP PIrp,
                   IN ULONG GuidIndex, IN ULONG InstanceIndex,
                   IN ULONG BufferSize,
                   IN PUCHAR PBuffer);
NTSTATUS
CyzSetWmiDataItem(IN PDEVICE_OBJECT PDevObj, IN PIRP PIrp,
                  IN ULONG GuidIndex, IN ULONG InstanceIndex,
                  IN ULONG DataItemId,
                  IN ULONG BufferSize, IN PUCHAR PBuffer);

NTSTATUS
CyzSystemControlDispatch(IN PDEVICE_OBJECT DeviceObject, IN PIRP Irp);

NTSTATUS
CyzTossWMIRequest(IN PDEVICE_OBJECT PDevObj, IN PIRP PIrp,
                  IN ULONG GuidIndex);

// cyzutils.c

BOOLEAN
CyzCancelTimer(IN PKTIMER Timer, IN PCYZ_DEVICE_EXTENSION PDevExt);

VOID
CyzDpcEpilogue(IN PCYZ_DEVICE_EXTENSION PDevExt, PKDPC PDpc);

VOID
CyzGetNextIrpLocked(
    IN PIRP *CurrentOpIrp,
    IN PLIST_ENTRY QueueToProcess,
    OUT PIRP *NextIrp,
    IN BOOLEAN CompleteCurrent,
    IN PCYZ_DEVICE_EXTENSION extension,
    IN KIRQL OldIrql
    );

BOOLEAN
CyzInsertQueueDpc(IN PRKDPC PDpc, IN PVOID Sarg1, IN PVOID Sarg2,
                  IN PCYZ_DEVICE_EXTENSION PDevExt);

NTSTATUS
CyzIRPPrologue(IN PIRP PIrp, IN PCYZ_DEVICE_EXTENSION PDevExt);

VOID
CyzIRPEpilogue(IN PCYZ_DEVICE_EXTENSION PDevExt);

NTSTATUS
CyzIoCallDriver(PCYZ_DEVICE_EXTENSION PDevExt, PDEVICE_OBJECT PDevObj,
                PIRP PIrp);
VOID
CyzKillAllStalled(IN PDEVICE_OBJECT PDevObj);

VOID
CyzLogError(
              IN PDRIVER_OBJECT DriverObject,
              IN PDEVICE_OBJECT DeviceObject OPTIONAL,
              IN PHYSICAL_ADDRESS P1,
              IN PHYSICAL_ADDRESS P2,
              IN ULONG SequenceNumber,
              IN UCHAR MajorFunctionCode,
              IN UCHAR RetryCount,
              IN ULONG UniqueErrorValue,
              IN NTSTATUS FinalStatus,
              IN NTSTATUS SpecificIOStatus,
              IN ULONG LengthOfInsert1,
              IN PWCHAR Insert1,
              IN ULONG LengthOfInsert2,
              IN PWCHAR Insert2
              );

VOID
CyzMarkHardwareBroken(IN PCYZ_DEVICE_EXTENSION PDevExt);

NTSTATUS
CyzPoCallDriver(PCYZ_DEVICE_EXTENSION PDevExt, PDEVICE_OBJECT PDevObj,
                PIRP PIrp);

VOID
CyzSetDeviceFlags(IN PCYZ_DEVICE_EXTENSION PDevExt, OUT PULONG PFlags, 
                  IN ULONG Value, IN BOOLEAN Set);

BOOLEAN
CyzSetTimer(IN PKTIMER Timer, IN LARGE_INTEGER DueTime,
            IN PKDPC Dpc OPTIONAL, IN PCYZ_DEVICE_EXTENSION PDevExt);

VOID
CyzUnlockPages(IN PKDPC PDpc, IN PVOID PDeferredContext,
               IN PVOID PSysContext1, IN PVOID PSysContext2);

VOID
CyzUnstallIrps(IN PCYZ_DEVICE_EXTENSION PDevExt);

// cyzpoll.c

ULONG
CyzAmountInTxBuffer(
    IN PCYZ_DEVICE_EXTENSION Extension
    );

ULONG
CyzAmountInRxBuffer(
    IN PCYZ_DEVICE_EXTENSION extension
    );

VOID
CyzQueueCompleteWrite(
    IN PCYZ_DEVICE_EXTENSION Extension
    );

BOOLEAN
CyzCheckIfTxEmpty(
    IN PVOID Context
    );


// End of prototypes


typedef struct _SERIAL_UPDATE_CHAR {
    PCYZ_DEVICE_EXTENSION Extension;
    ULONG CharsCopied;
    BOOLEAN Completed;
    } SERIAL_UPDATE_CHAR,*PSERIAL_UPDATE_CHAR;

//
// The following simple structure is used to send a pointer
// the device extension and an ioctl specific pointer
// to data.
//
typedef struct _CYZ_IOCTL_SYNC {
    PCYZ_DEVICE_EXTENSION Extension;
    PVOID Data;
    } CYZ_IOCTL_SYNC,*PCYZ_IOCTL_SYNC;

typedef struct _CYZ_IOCTL_BAUD {
    PCYZ_DEVICE_EXTENSION Extension;
    ULONG Baud;
    } CYZ_IOCTL_BAUD,*PCYZ_IOCTL_BAUD;

typedef struct _CYZ_CLOSE_SYNC {
    PCYZ_DEVICE_EXTENSION Extension;
    PVOID Data;
    } CYZ_CLOSE_SYNC,*PCYZ_CLOSE_SYNC;

#define CyzSetFlags(PDevExt, Value) \
   CyzSetDeviceFlags((PDevExt), &(PDevExt)->Flags, (Value), TRUE)
#define CyzClearFlags(PDevExt, Value) \
   CyzSetDeviceFlags((PDevExt), &(PDevExt)->Flags, (Value), FALSE)
#define CyzSetAccept(PDevExt, Value) \
   CyzSetDeviceFlags((PDevExt), &(PDevExt)->DevicePNPAccept, (Value), TRUE)
#define CyzClearAccept(PDevExt, Value) \
   CyzSetDeviceFlags((PDevExt), &(PDevExt)->DevicePNPAccept, (Value), FALSE)




//
// The following three macros are used to initialize, set
// and clear references in IRPs that are used by
// this driver.  The reference is stored in the fourth
// argument of the irp, which is never used by any operation
// accepted by this driver.
//

#define SERIAL_REF_ISR         (0x00000001)
#define SERIAL_REF_CANCEL      (0x00000002)
#define SERIAL_REF_TOTAL_TIMER (0x00000004)
#define SERIAL_REF_INT_TIMER   (0x00000008)
#define SERIAL_REF_XOFF_REF    (0x00000010)


#define SERIAL_INIT_REFERENCE(Irp) { \
    ASSERT(sizeof(ULONG_PTR) <= sizeof(PVOID)); \
    IoGetCurrentIrpStackLocation((Irp))->Parameters.Others.Argument4 = NULL; \
    }

#define SERIAL_SET_REFERENCE(Irp,RefType) \
   do { \
       LONG _refType = (RefType); \
       PULONG_PTR _arg4 = (PVOID)&IoGetCurrentIrpStackLocation((Irp))->Parameters.Others.Argument4; \
       ASSERT(!(*_arg4 & _refType)); \
       *_arg4 |= _refType; \
   } while (0)

#define SERIAL_CLEAR_REFERENCE(Irp,RefType) \
   do { \
       LONG _refType = (RefType); \
       PULONG_PTR _arg4 = (PVOID)&IoGetCurrentIrpStackLocation((Irp))->Parameters.Others.Argument4; \
       ASSERT(*_arg4 & _refType); \
       *_arg4 &= ~_refType; \
   } while (0)

#define SERIAL_REFERENCE_COUNT(Irp) \
    ((ULONG_PTR)((IoGetCurrentIrpStackLocation((Irp))->Parameters.Others.Argument4)))
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyzport\cyzreg.c ===
/*--------------------------------------------------------------------------
*
*   Copyright (C) Cyclades Corporation, 2000-2001.
*   All rights reserved.
*
*   Cyclades-Z Port Driver
*	
*   This file:      cyzreg.c
*
*   Description:    This module contains the code that is used to get 
*                   values from the registry and to manipulate entries 
*                   in the registry.
*
*   Notes:          This code supports Windows 2000 and Windows XP,
*                   x86 and IA64 processors.
*
*   Complies with Cyclades SW Coding Standard rev 1.3.
*
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*   Change History
*
*--------------------------------------------------------------------------
*   Initial implementation based on Microsoft sample code.
*
*--------------------------------------------------------------------------
*/

#include "precomp.h"

#ifdef ALLOC_PRAGMA
#pragma alloc_text(INIT,CyzGetConfigDefaults)

#pragma alloc_text(PAGESRP0,CyzGetRegistryKeyValue)
#pragma alloc_text(PAGESRP0,CyzPutRegistryKeyValue)
#endif // ALLOC_PRAGMA


NTSTATUS
CyzGetConfigDefaults(
    IN PCYZ_REGISTRY_DATA    DriverDefaultsPtr,
    IN PUNICODE_STRING          RegistryPath
    )

/*++

Routine Description:

    This routine reads the default configuration data from the
    registry for the serial driver.

    It also builds fields in the registry for several configuration
    options if they don't exist.

Arguments:

    DriverDefaultsPtr - Pointer to a structure that will contain
                        the default configuration values.

    RegistryPath - points to the entry for this driver in the
                   current control set of the registry.

Return Value:

    STATUS_SUCCESS if we got the defaults, otherwise we failed.
    The only way to fail this call is if the  STATUS_INSUFFICIENT_RESOURCES.

--*/

{

    NTSTATUS Status = STATUS_SUCCESS;    // return value

    //
    // We use this to query into the registry for defaults
    //

    RTL_QUERY_REGISTRY_TABLE paramTable[8];
    
    PWCHAR  path;
    ULONG   zero            = 0;
    ULONG   DbgDefault      = 0;//SER_DBG_DEFAULT;
    ULONG   notThereDefault = CYZ_UNINITIALIZED_DEFAULT;

    PAGED_CODE();

    //
    // Since the registry path parameter is a "counted" UNICODE string, it
    // might not be zero terminated.  For a very short time allocate memory
    // to hold the registry path zero terminated so that we can use it to
    // delve into the registry.
    //
    // NOTE NOTE!!!! This is not an architected way of breaking into
    // a driver.  It happens to work for this driver because the author
    // likes to do things this way.
    //

    path = ExAllocatePool (PagedPool, RegistryPath->Length+sizeof(WCHAR));
    
    if (!path) {
        Status = STATUS_INSUFFICIENT_RESOURCES;
        return (Status);
    }
    
    RtlZeroMemory (DriverDefaultsPtr, sizeof(CYZ_REGISTRY_DATA));
    RtlZeroMemory (&paramTable[0], sizeof(paramTable));
    RtlZeroMemory (path, RegistryPath->Length+sizeof(WCHAR));
    RtlMoveMemory (path, RegistryPath->Buffer, RegistryPath->Length);

    paramTable[0].Flags         = RTL_QUERY_REGISTRY_DIRECT;
    paramTable[0].Name          = L"BreakOnEntry";
    paramTable[0].EntryContext  = &DriverDefaultsPtr->ShouldBreakOnEntry;
    paramTable[0].DefaultType   = REG_DWORD;
    paramTable[0].DefaultData   = &zero;
    paramTable[0].DefaultLength = sizeof(ULONG);
    
    paramTable[1].Flags         = RTL_QUERY_REGISTRY_DIRECT;
    paramTable[1].Name          = L"DebugLevel";
    paramTable[1].EntryContext  = &DriverDefaultsPtr->DebugLevel;
    paramTable[1].DefaultType   = REG_DWORD;
    paramTable[1].DefaultData   = &DbgDefault;
    paramTable[1].DefaultLength = sizeof(ULONG);
    
    paramTable[2].Flags         = RTL_QUERY_REGISTRY_DIRECT;
    paramTable[2].Name          = L"PermitShare";
    paramTable[2].EntryContext  = &DriverDefaultsPtr->PermitShareDefault;
    paramTable[2].DefaultType   = REG_DWORD;
    paramTable[2].DefaultData   = &notThereDefault;
    paramTable[2].DefaultLength = sizeof(ULONG);
    
    Status = RtlQueryRegistryValues( RTL_REGISTRY_ABSOLUTE | RTL_REGISTRY_OPTIONAL,
                                     path,
                                     &paramTable[0],
                                     NULL,
                                     NULL);
       
    if (!NT_SUCCESS(Status)) {
            DriverDefaultsPtr->ShouldBreakOnEntry   = 0;
            DriverDefaultsPtr->DebugLevel           = 0;
    }

    // TODO FANNY: SEE IF WE CAN ADD FIFO SIZE CONFIGURATION, 
    // AS REQUESTED BY PLATFORM IN JAPAN.
    // Check to see if there was a forcefifo or an rxfifo size.
    // If there isn't then write out values so that they could
    // be adjusted later.
    //

    if (DriverDefaultsPtr->PermitShareDefault == notThereDefault) {

        DriverDefaultsPtr->PermitShareDefault = CYZ_PERMIT_SHARE_DEFAULT;
        //
        // Only share if the user actual changes switch.
        //

        RtlWriteRegistryValue(
            RTL_REGISTRY_ABSOLUTE,
            path,
            L"PermitShare",
            REG_DWORD,
            &DriverDefaultsPtr->PermitShareDefault,
            sizeof(ULONG)
            );

    }


    //
    // We don't need that path anymore.
    //

    if (path) {
        ExFreePool(path);
    }

    //
    //  Set the defaults for other values
    //
    DriverDefaultsPtr->PermitSystemWideShare = FALSE;

    return (Status);
}


NTSTATUS 
CyzGetRegistryKeyValue (
                       IN HANDLE Handle,
                       IN PWCHAR KeyNameString,
                       IN ULONG KeyNameStringLength,
                       IN PVOID Data,
                       IN ULONG DataLength
                       )
/*++

Routine Description:

    Reads a registry key value from an already opened registry key.
    
Arguments:

    Handle              Handle to the opened registry key
    
    KeyNameString       ANSI string to the desired key

    KeyNameStringLength Length of the KeyNameString

    Data                Buffer to place the key value in

    DataLength          Length of the data buffer

Return Value:

    STATUS_SUCCESS if all works, otherwise status of system call that
    went wrong.

--*/
{
   UNICODE_STRING              keyName;
   ULONG                       length;
   PKEY_VALUE_FULL_INFORMATION fullInfo;

   NTSTATUS                    ntStatus = STATUS_INSUFFICIENT_RESOURCES;

   PAGED_CODE();

   CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyzGetRegistryKeyValue(XXX)\n");


   RtlInitUnicodeString (&keyName, KeyNameString);

   length = sizeof(KEY_VALUE_FULL_INFORMATION) + KeyNameStringLength
      + DataLength;
   fullInfo = ExAllocatePool(PagedPool, length); 

   if (fullInfo) {
      ntStatus = ZwQueryValueKey (Handle,
                                  &keyName,
                                  KeyValueFullInformation,
                                  fullInfo,
                                  length,
                                  &length);

      if (NT_SUCCESS(ntStatus)) {
         //
         // If there is enough room in the data buffer, copy the output
         //

         if (DataLength >= fullInfo->DataLength) {
            RtlCopyMemory (Data, 
                           ((PUCHAR) fullInfo) + fullInfo->DataOffset, 
                           fullInfo->DataLength);
         }
      }

      ExFreePool(fullInfo);
   }

   CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyzGetRegistryKeyValue %X\n",
                 ntStatus);

   return ntStatus;
}


ULONG 
CyzGetRegistryKeyValueLength (
                       IN HANDLE Handle,
                       IN PWCHAR KeyNameString,
                       IN ULONG KeyNameStringLength
                       )
/*++

Routine Description:

    Reads a registry key value from an already opened registry key.
    
Arguments:

    Handle              Handle to the opened registry key
    
    KeyNameString       ANSI string to the desired key

    KeyNameStringLength Length of the KeyNameString

Return Value:

    ULONG               Length of the key value

--*/
{
   UNICODE_STRING              keyName;
   ULONG                       length;
   PKEY_VALUE_FULL_INFORMATION fullInfo;

   PAGED_CODE();

   RtlInitUnicodeString (&keyName, KeyNameString);

   length = sizeof(KEY_VALUE_FULL_INFORMATION) + KeyNameStringLength;

   fullInfo = ExAllocatePool(PagedPool, length); 

   if (fullInfo) {
      ZwQueryValueKey (Handle,
                       &keyName,
                       KeyValueFullInformation,
                       fullInfo,
                       length,
                       &length);

      ExFreePool(fullInfo);
   }

   return length;
}


NTSTATUS 
CyzPutRegistryKeyValue(IN HANDLE Handle, IN PWCHAR PKeyNameString,
                       IN ULONG KeyNameStringLength, IN ULONG Dtype,
                       IN PVOID PData, IN ULONG DataLength)
/*++

Routine Description:

    Writes a registry key value to an already opened registry key.
    
Arguments:

    Handle              Handle to the opened registry key
    
    PKeyNameString      ANSI string to the desired key

    KeyNameStringLength Length of the KeyNameString
    
    Dtype		REG_XYZ value type

    PData               Buffer to place the key value in

    DataLength          Length of the data buffer

Return Value:

    STATUS_SUCCESS if all works, otherwise status of system call that
    went wrong.

--*/
{
   NTSTATUS status;
   UNICODE_STRING keyname;

   PAGED_CODE();

   CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyzPutRegistryKeyValue(XXX)\n");

   RtlInitUnicodeString(&keyname, NULL);
   keyname.MaximumLength = (USHORT)(KeyNameStringLength + sizeof(WCHAR));
   keyname.Buffer = ExAllocatePool(PagedPool, keyname.MaximumLength);

   if (keyname.Buffer == NULL) {
      return STATUS_INSUFFICIENT_RESOURCES;
   }

   RtlAppendUnicodeToString(&keyname, PKeyNameString);

   status = ZwSetValueKey(Handle, &keyname, 0, Dtype, PData, DataLength);

   ExFreePool(keyname.Buffer);
   
   CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyzPutRegistryKeyValue %X\n",
                 status);

   return status;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyzport\cyzpower.c ===
/*--------------------------------------------------------------------------
*
*   Copyright (C) Cyclades Corporation, 2000-2001.
*   All rights reserved.
*
*   Cyclades-Z Port Driver
*	
*   This file:      cyzpower.c
*
*   Description:    This module contains the code that handles the power 
*                   IRPs for the Cyclades-Z Port driver.
*
*   Notes:          This code supports Windows 2000 and Windows XP,
*                   x86 and IA64 processors.
*
*   Complies with Cyclades SW Coding Standard rev 1.3.
*
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*   Change History
*
*--------------------------------------------------------------------------
*   Initial implementatin based on Microsoft sample code.
*
*--------------------------------------------------------------------------
*/

#include "precomp.h"

#ifdef ALLOC_PRAGMA
#pragma alloc_text(PAGESRP0, CyzGotoPowerState)
#pragma alloc_text(PAGESRP0, CyzPowerDispatch)
#pragma alloc_text(PAGESRP0, CyzSetPowerD0)
//#pragma alloc_text(PAGESRP0, CyzSetPowerD3) Not pageable because it gets spin lock
#pragma alloc_text(PAGESRP0, CyzSaveDeviceState)
//#pragma alloc_text(PAGESRP0, CyzRestoreDeviceState) Not pageable because it gets spin lock.
#pragma alloc_text(PAGESRP0, CyzSendWaitWake)
#endif // ALLOC_PRAGMA

typedef struct _POWER_COMPLETION_CONTEXT {

    PDEVICE_OBJECT  DeviceObject;
    PIRP            SIrp;

} POWER_COMPLETION_CONTEXT, *PPOWER_COMPLETION_CONTEXT;


NTSTATUS
CyzSetPowerEvent(IN PDEVICE_OBJECT PDevObj, UCHAR MinorFunction,
                 IN POWER_STATE PowerState, IN PVOID Context,
                 PIO_STATUS_BLOCK IoStatus)
/*++

Routine Description:

    This routine is the completion routine for PoRequestPowerIrp calls
    in this module.

Arguments:

    PDevObj - Pointer to the device object the irp is completing for

    MinorFunction - IRP_MN_XXXX value requested

    PowerState - Power state request was made of

    Context - Event to set or NULL if no setting required

    IoStatus - Status block from request

Return Value:

    VOID


--*/
{
   if (Context != NULL) {
      KeSetEvent((PKEVENT)Context, IO_NO_INCREMENT, 0);
   }

   return STATUS_SUCCESS;
}



VOID
CyzSaveDeviceState(IN PCYZ_DEVICE_EXTENSION PDevExt)
/*++

Routine Description:

    This routine saves the device state of the UART

Arguments:

    PDevExt - Pointer to the device extension for the devobj to save the state
              for.

Return Value:

    VOID


--*/
{
   PCYZ_DEVICE_STATE pDevState = &PDevExt->DeviceState;
   struct CH_CTRL *ch_ctrl;

   PAGED_CODE();

   CyzDbgPrintEx(CYZTRACECALLS, "Entering CyzSaveDeviceState\n");

#if 0
   ch_ctrl = PDevExt->ChCtrl;
   pDevState->op_mode = CYZ_READ_ULONG(&ch_ctrl->op_mode);
   pDevState->intr_enable = CYZ_READ_ULONG(&ch_ctrl->intr_enable);
   pDevState->sw_flow = CYZ_READ_ULONG(&ch_ctrl->sw_flow);
   pDevState->comm_baud = CYZ_READ_ULONG(&ch_ctrl->comm_baud);
   pDevState->comm_parity = CYZ_READ_ULONG(&ch_ctrl->comm_parity);
   pDevState->comm_data_l = CYZ_READ_ULONG(&ch_ctrl->comm_data_l);
   pDevState->hw_flow = CYZ_READ_ULONG(&ch_ctrl->hw_flow);
   pDevState->rs_control = CYZ_READ_ULONG(&ch_ctrl->rs_control);
#endif   


   CyzDbgPrintEx(CYZTRACECALLS, "Leaving CyzSaveDeviceState\n");
}


VOID
CyzRestoreDeviceState(IN PCYZ_DEVICE_EXTENSION PDevExt)
/*++

Routine Description:

    This routine restores the device state of the UART

Arguments:

    PDevExt - Pointer to the device PDevExt for the devobj to restore the
    state for.

Return Value:

    VOID


--*/
{

   PCYZ_DEVICE_STATE pDevState = &PDevExt->DeviceState;
   struct CH_CTRL *ch_ctrl;
   PCYZ_DISPATCH pDispatch;
   KIRQL oldIrql;
#ifndef POLL
   ULONG portindex;
#endif

   PAGED_CODE();

   CyzDbgPrintEx(CYZTRACECALLS, "Enter CyzRestoreDeviceState\n");
   CyzDbgPrintEx(CYZTRACECALLS, "PDevExt: %x\n", PDevExt);

#ifndef POLL
   //
   // While the device isn't open, disable all interrupts.
   //
   CYZ_WRITE_ULONG(&(PDevExt->ChCtrl)->intr_enable,C_IN_DISABLE); //1.0.0.11
   CyzIssueCmd(PDevExt,C_CM_IOCTL,0L,FALSE);

   pDispatch = (PCYZ_DISPATCH)PDevExt->OurIsrContext;
   for (portindex=0; portindex<pDispatch->NChannels; portindex++) {
      if (pDispatch->PoweredOn[portindex]) {
         break;
      }
   }
   if (portindex == pDispatch->NChannels) 
   {
   // No port was powered on, this is the first port. Enable PLX interrupts
   ULONG intr_reg;

   intr_reg = CYZ_READ_ULONG(&(PDevExt->Runtime)->intr_ctrl_stat);
   intr_reg |= (0x00030B00UL);
   CYZ_WRITE_ULONG(&(PDevExt->Runtime)->intr_ctrl_stat,intr_reg);
   }

   pDispatch->PoweredOn[PDevExt->PortIndex] = TRUE;
#endif

   if (PDevExt->DeviceState.Reopen == TRUE) {
      CyzDbgPrintEx(CYZPNPPOWER, "Reopening device\n");

      CyzReset(PDevExt);
      
      PDevExt->DeviceIsOpened = TRUE;
      PDevExt->DeviceState.Reopen = FALSE;

      #ifdef POLL
      //
      // This enables polling routine!
      //
      pDispatch = PDevExt->OurIsrContext;
      KeAcquireSpinLock(&pDispatch->PollingLock,&oldIrql);

      pDispatch->Extensions[PDevExt->PortIndex] = PDevExt;

      if (!pDispatch->PollingStarted) {

         // Start polling timer
         KeSetTimerEx(
		      &pDispatch->PollingTimer,
		      pDispatch->PollingTime,
              pDispatch->PollingPeriod,
		      &pDispatch->PollingDpc
		      );

         pDispatch->PollingStarted = TRUE;
         pDispatch->PollingDrained = FALSE;
      }

      KeReleaseSpinLock(&pDispatch->PollingLock,oldIrql);
      #endif

      //TODO: Should we re-start transmissions in interrupt mode?
   
   }

}

VOID
CyzPowerRequestComplete(
    PDEVICE_OBJECT DeviceObject,
    UCHAR MinorFunction,
    POWER_STATE state,
    POWER_COMPLETION_CONTEXT* PowerContext,
    PIO_STATUS_BLOCK IoStatus
    )
/*++

Routine Description:

   Completion routine for D-IRP.

Arguments:


Return Value:

   NT status code

--*/
{
    PCYZ_DEVICE_EXTENSION pDevExt = (PCYZ_DEVICE_EXTENSION) PowerContext->DeviceObject->DeviceExtension;
    PIRP sIrp = PowerContext->SIrp;

    UNREFERENCED_PARAMETER (DeviceObject);
    UNREFERENCED_PARAMETER (MinorFunction);
    UNREFERENCED_PARAMETER (state);

    //
    // Cleanup
    //
    ExFreePool(PowerContext);

    //
    // Here we copy the D-IRP status into the S-IRP
    //
    sIrp->IoStatus.Status = IoStatus->Status;

    //
    // Release the IRP
    //
    PoStartNextPowerIrp(sIrp);
    CyzCompleteRequest(pDevExt,sIrp,IO_NO_INCREMENT);

}

NTSTATUS
CyzSystemPowerComplete (
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp,
    IN PVOID Context
    )
/*++
--*/
{
    POWER_COMPLETION_CONTEXT* powerContext;
    POWER_STATE         powerState;
    POWER_STATE_TYPE    powerType;
    PIO_STACK_LOCATION  stack;
    PCYZ_DEVICE_EXTENSION   data;
    NTSTATUS    status = Irp->IoStatus.Status;

    UNREFERENCED_PARAMETER (Context);

    data = DeviceObject->DeviceExtension;

    if (!NT_SUCCESS(status)) {

        PoStartNextPowerIrp(Irp);
        CyzIRPEpilogue(data);
        return STATUS_SUCCESS;
    }

    stack = IoGetCurrentIrpStackLocation (Irp);
    powerState = stack->Parameters.Power.State;
                        
    switch (stack->Parameters.Power.State.SystemState) {
    case PowerSystemUnspecified:
        powerState.DeviceState = PowerDeviceUnspecified;
        break;

    case PowerSystemWorking:
        powerState.DeviceState = PowerDeviceD0;
        break;

    case PowerSystemSleeping1:
    case PowerSystemSleeping2:
    case PowerSystemSleeping3:
    case PowerSystemHibernate:
    case PowerSystemShutdown:
    case PowerSystemMaximum:
        powerState.DeviceState = data->DeviceStateMap[stack->Parameters.Power.State.SystemState];
        break;

    default:
        powerState.DeviceState = PowerDeviceD3;
    }

    //
    // Send IRP to change device state
    //
    powerContext = (POWER_COMPLETION_CONTEXT*)
                ExAllocatePool(NonPagedPool, sizeof(POWER_COMPLETION_CONTEXT));

    if (!powerContext) {

        status = STATUS_INSUFFICIENT_RESOURCES;

    } else {

        powerContext->DeviceObject = DeviceObject;
        powerContext->SIrp = Irp;

        status = PoRequestPowerIrp(DeviceObject, IRP_MN_SET_POWER, powerState, CyzPowerRequestComplete, 
                                   powerContext, NULL);
    }

    if (!NT_SUCCESS(status)) {

        if (powerContext) {
            ExFreePool(powerContext);
        }

        PoStartNextPowerIrp(Irp);
        Irp->IoStatus.Status = status;
        CyzCompleteRequest(data,Irp,IO_NO_INCREMENT); // To be equal to toaster
        //CyzIRPEpilogue(data);
        //return status;
    }

    return STATUS_MORE_PROCESSING_REQUIRED;
}

NTSTATUS
CyzDevicePowerComplete (
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp,
    IN PVOID Context
    )
/*++

Routine Description:

   The completion routine for Power Up D-IRP.

Arguments:

   DeviceObject - pointer to a device object.

   Irp - pointer to an I/O Request Packet.

   Context - context pointer

Return Value:

   NT status code

--*/
{
   POWER_STATE         powerState;
   POWER_STATE_TYPE    powerType;
   PIO_STACK_LOCATION  stack;
   PCYZ_DEVICE_EXTENSION   pDevExt;

   UNREFERENCED_PARAMETER (Context);

   if (Irp->PendingReturned) {
       IoMarkIrpPending(Irp);
   }

   pDevExt = DeviceObject->DeviceExtension;
   stack = IoGetCurrentIrpStackLocation (Irp);
   powerType = stack->Parameters.Power.Type;
   powerState = stack->Parameters.Power.State;

   //
   // Restore the device
   //

   pDevExt->PowerState = PowerDeviceD0;

   //
   // Theoretically we could change states in the middle of processing
   // the restore which would result in a bad PKINTERRUPT being used
   // in CyzRestoreDeviceState().
   //

   if (pDevExt->PNPState == CYZ_PNP_STARTED) {
      CyzRestoreDeviceState(pDevExt);
   }

   //
   // Now that we are powered up, call PoSetPowerState
   //

   PoSetPowerState(DeviceObject, powerType, powerState);
   PoStartNextPowerIrp(Irp);
   CyzCompleteRequest(pDevExt, Irp, IO_NO_INCREMENT); // Code back
   return STATUS_MORE_PROCESSING_REQUIRED;            // Code back

   //CyzIRPEpilogue(pDevExt); // Added and removed Fanny
   //return STATUS_SUCCESS;   // Added and removed Fanny

}


NTSTATUS
CyzPowerDispatch(IN PDEVICE_OBJECT PDevObj, IN PIRP PIrp)

/*++

Routine Description:

    This is a dispatch routine for the IRPs that come to the driver with the
    IRP_MJ_POWER major code (power IRPs).

Arguments:

    PDevObj - Pointer to the device object for this device

    PIrp - Pointer to the IRP for the current request

Return Value:

    The function value is the final status of the call


--*/

{

   PCYZ_DEVICE_EXTENSION pDevExt = PDevObj->DeviceExtension;
   PIO_STACK_LOCATION pIrpStack = IoGetCurrentIrpStackLocation(PIrp);
   NTSTATUS status;
   PDEVICE_OBJECT pLowerDevObj = pDevExt->LowerDeviceObject;
   PDEVICE_OBJECT pPdo = pDevExt->Pdo;
   BOOLEAN acceptingIRPs;

   PAGED_CODE();

   if ((status = CyzIRPPrologue(PIrp, pDevExt)) != STATUS_SUCCESS) {
      if (status != STATUS_PENDING) {
        PoStartNextPowerIrp(PIrp);
        CyzCompleteRequest(pDevExt, PIrp, IO_NO_INCREMENT);
      }
      return status;
   }

   status = STATUS_SUCCESS;

   switch (pIrpStack->MinorFunction) {

   case IRP_MN_WAIT_WAKE:
      CyzDbgPrintEx(CYZPNPPOWER, "Got IRP_MN_WAIT_WAKE Irp\n");
      break;


   case IRP_MN_POWER_SEQUENCE:
      CyzDbgPrintEx(CYZPNPPOWER, "Got IRP_MN_POWER_SEQUENCE Irp\n");
      break;


   case IRP_MN_SET_POWER:
      CyzDbgPrintEx(CYZPNPPOWER, "Got IRP_MN_SET_POWER Irp\n");

      //
      // Perform different ops if it was system or device
      //

      switch (pIrpStack->Parameters.Power.Type) {
      case SystemPowerState:

         CyzDbgPrintEx(CYZPNPPOWER, "SystemPowerState\n");
         
         IoMarkIrpPending(PIrp);
         IoCopyCurrentIrpStackLocationToNext (PIrp);
         IoSetCompletionRoutine (PIrp,
                                 CyzSystemPowerComplete,
                                 NULL,
                                 TRUE,
                                 TRUE,
                                 TRUE);
         PoCallDriver(pDevExt->LowerDeviceObject, PIrp);
         return STATUS_PENDING;

      case DevicePowerState:
         
         CyzDbgPrintEx(CYZPNPPOWER, "DevicePowerState\n");
         
         status = PIrp->IoStatus.Status = STATUS_SUCCESS;

         if (pDevExt->PowerState == pIrpStack->Parameters.Power.State.DeviceState) {
            // If we are already in the requested state, just pass the IRP down
            CyzDbgPrintEx(CYZPNPPOWER, "Already in requested power state\n");
            break;
         }
         switch (pIrpStack->Parameters.Power.State.DeviceState) {
         case PowerDeviceD0:
            if (pDevExt->OpenCount) {

               CyzDbgPrintEx(CYZPNPPOWER, "Going to power state D0\n");

               IoMarkIrpPending(PIrp);
               IoCopyCurrentIrpStackLocationToNext (PIrp);
               IoSetCompletionRoutine (PIrp,
                                       CyzDevicePowerComplete,
                                       NULL,
                                       TRUE,
                                       TRUE,
                                       TRUE);
               PoCallDriver(pDevExt->LowerDeviceObject, PIrp);
               return STATUS_PENDING;
            }
            //return CyzSetPowerD0(PDevObj, PIrp);
            break;
         case PowerDeviceD1:
         case PowerDeviceD2:
         case PowerDeviceD3:

            CyzDbgPrintEx(CYZPNPPOWER, "Going to power state D3\n");

            return CyzSetPowerD3(PDevObj, PIrp);
         }
         break;

      default:
         CyzDbgPrintEx(CYZPNPPOWER, "UNKNOWN PowerState\n");
         break;
      }
      break;
          
   case IRP_MN_QUERY_POWER:

      CyzDbgPrintEx (CYZPNPPOWER, "Got IRP_MN_QUERY_POWER Irp\n");

      //
      // Check if we have a wait-wake pending and if so,
      // ensure we don't power down too far.
      //

      if (pDevExt->PendingWakeIrp != NULL || pDevExt->SendWaitWake) {
         if (pIrpStack->Parameters.Power.Type == DevicePowerState
             && pIrpStack->Parameters.Power.State.DeviceState
             > pDevExt->DeviceWake) {
            status = PIrp->IoStatus.Status = STATUS_INVALID_DEVICE_STATE;
            PoStartNextPowerIrp(PIrp);
            CyzCompleteRequest(pDevExt, PIrp, IO_NO_INCREMENT);
            return status;
         }
      }
      //
      // If no wait-wake, always successful
      //
      PIrp->IoStatus.Status = STATUS_SUCCESS;
      status = STATUS_SUCCESS;
      PoStartNextPowerIrp(PIrp);
      IoSkipCurrentIrpStackLocation(PIrp);
      return CyzPoCallDriver(pDevExt, pLowerDevObj, PIrp);

   }   // switch (pIrpStack->MinorFunction)


   PoStartNextPowerIrp(PIrp);
   //
   // Pass to the lower driver
   //
   IoSkipCurrentIrpStackLocation(PIrp);
   status = CyzPoCallDriver(pDevExt, pLowerDevObj, PIrp);

   return status;
}



NTSTATUS
CyzGotoPowerState(IN PDEVICE_OBJECT PDevObj,
                  IN PCYZ_DEVICE_EXTENSION PDevExt,
                  IN DEVICE_POWER_STATE DevPowerState)
/*++

Routine Description:

    This routine causes the driver to request the stack go to a particular
    power state.

Arguments:

    PDevObj - Pointer to the device object for this device

    PDevExt - Pointer to the device extension we are working from

    DevPowerState - the power state we wish to go to

Return Value:

    The function value is the final status of the call


--*/
{
   KEVENT gotoPowEvent;
   NTSTATUS status;
   POWER_STATE powerState;

   PAGED_CODE();

   CyzDbgPrintEx(CYZTRACECALLS, "In CyzGotoPowerState\n");

   powerState.DeviceState = DevPowerState;

   KeInitializeEvent(&gotoPowEvent, SynchronizationEvent, FALSE);

   status = PoRequestPowerIrp(PDevObj, IRP_MN_SET_POWER, powerState,
                              CyzSetPowerEvent, &gotoPowEvent,
                              NULL);

   if (status == STATUS_PENDING) {
      KeWaitForSingleObject(&gotoPowEvent, Executive, KernelMode, FALSE, NULL);
      status = STATUS_SUCCESS;
   }

#if DBG
   if (!NT_SUCCESS(status)) {
      CyzDbgPrintEx(CYZPNPPOWER, "CyzGotoPowerState FAILED\n");
   }
#endif

   CyzDbgPrintEx(CYZTRACECALLS, "Leaving CyzGotoPowerState\n");

   return status;
}




NTSTATUS
CyzSetPowerD3(IN PDEVICE_OBJECT PDevObj, IN PIRP PIrp)
/*++

Routine Description:

    This routine handles the SET_POWER minor function.

Arguments:

    PDevObj - Pointer to the device object for this device

    PIrp - Pointer to the IRP for the current request

Return Value:

    The function value is the final status of the call


--*/
{
   NTSTATUS status = STATUS_SUCCESS;
   PCYZ_DEVICE_EXTENSION pDevExt = PDevObj->DeviceExtension;
   PIO_STACK_LOCATION pIrpStack = IoGetCurrentIrpStackLocation(PIrp);

   PAGED_CODE();

   CyzDbgPrintEx(CYZDIAG3, "In CyzSetPowerD3\n");

   //
   // Send the wait wake now, just in time
   //


   if (pDevExt->SendWaitWake) {
      CyzSendWaitWake(pDevExt);
   }
   //
   // Before we power down, call PoSetPowerState
   //

   PoSetPowerState(PDevObj, pIrpStack->Parameters.Power.Type,
                   pIrpStack->Parameters.Power.State);

   //
   // If the device is not closed, disable interrupts and allow the fifo's
   // to flush.
   //

   if (pDevExt->DeviceIsOpened == TRUE) {
      //LARGE_INTEGER charTime;

      pDevExt->DeviceIsOpened = FALSE;
      pDevExt->DeviceState.Reopen = TRUE;

      //charTime.QuadPart = -CyzGetCharTime(pDevExt).QuadPart;

      //
      // Shut down the chip
      //
#ifdef POLL
      CyzTryToDisableTimer(pDevExt);
#endif

//TODO FANNY: SHOULD WE RESET THE CHANNEL HERE?
//      //
//      // Drain the device
//      //
//
//      CyzDrainUART(pDevExt, &charTime);

      //
      // Save the device state
      //

      CyzSaveDeviceState(pDevExt);
   }
#ifndef POLL
   {
   PCYZ_DISPATCH pDispatch;

   pDispatch = (PCYZ_DISPATCH)pDevExt->OurIsrContext;
   pDispatch->PoweredOn[pDevExt->PortIndex] = FALSE;
   }
#endif

   //
   // If the device is not open, we don't need to save the state;
   // we can just reset the device on power-up
   //


   PIrp->IoStatus.Status = STATUS_SUCCESS;

   pDevExt->PowerState = PowerDeviceD3;

   //
   // For what we are doing, we don't need a completion routine
   // since we don't race on the power requests.
   //

   PIrp->IoStatus.Status = STATUS_SUCCESS;

   PoStartNextPowerIrp(PIrp);
   IoSkipCurrentIrpStackLocation(PIrp);

   return CyzPoCallDriver(pDevExt, pDevExt->LowerDeviceObject, PIrp);
}


NTSTATUS
CyzSendWaitWake(PCYZ_DEVICE_EXTENSION PDevExt)
/*++

Routine Description:

    This routine causes a waitwake IRP to be sent

Arguments:

    PDevExt - Pointer to the device extension for this device

Return Value:

    STATUS_INVALID_DEVICE_STATE if one is already pending, else result
    of call to PoRequestPowerIrp.


--*/
{
   NTSTATUS status;
   PIRP pIrp;
   POWER_STATE powerState;

   PAGED_CODE();

   //
   // Make sure one isn't pending already -- serial will only handle one at
   // a time.
   //

   if (PDevExt->PendingWakeIrp != NULL) {
      return STATUS_INVALID_DEVICE_STATE;
   }

   //
   // Make sure we are capable of waking the machine
   //

   if (PDevExt->SystemWake <= PowerSystemWorking) {
      return STATUS_INVALID_DEVICE_STATE;
   }

   if (PDevExt->DeviceWake == PowerDeviceUnspecified) {
      return STATUS_INVALID_DEVICE_STATE;
   }

   //
   // Send IRP to request wait wake and add a pending irp flag
   //
   //

   InterlockedIncrement(&PDevExt->PendingIRPCnt);

   powerState.SystemState = PDevExt->SystemWake;

   status = PoRequestPowerIrp(PDevExt->Pdo, IRP_MN_WAIT_WAKE,
                              powerState, CyzWakeCompletion, PDevExt, &pIrp);

   if (status == STATUS_PENDING) {
      status = STATUS_SUCCESS;
      PDevExt->PendingWakeIrp = pIrp;
   } else if (!NT_SUCCESS(status)) {
      CyzIRPEpilogue(PDevExt);
   }

   return status;
}

NTSTATUS
CyzWakeCompletion(IN PDEVICE_OBJECT PDevObj, IN UCHAR MinorFunction,
                  IN POWER_STATE PowerState, IN PVOID Context,
                  IN PIO_STATUS_BLOCK IoStatus)
/*++

Routine Description:

    This routine handles completion of the waitwake IRP.

Arguments:

    PDevObj - Pointer to the device object for this device

    MinorFunction - Minor function previously supplied to PoRequestPowerIrp

    PowerState - PowerState previously supplied to PoRequestPowerIrp

    Context - a pointer to the device extension

    IoStatus - current/final status of the waitwake IRP

Return Value:

    The function value is the final status of attempting to process the
    waitwake.


--*/
{
   NTSTATUS status;
   PCYZ_DEVICE_EXTENSION pDevExt = (PCYZ_DEVICE_EXTENSION)Context;
   POWER_STATE powerState;

   status = IoStatus->Status;

   if (NT_SUCCESS(status)) {
      //
      // A wakeup has occurred -- powerup our stack
      //

      powerState.DeviceState = PowerDeviceD0;

      PoRequestPowerIrp(pDevExt->Pdo, IRP_MN_SET_POWER, powerState, NULL,
                        NULL, NULL);

   }

   pDevExt->PendingWakeIrp = NULL;
   CyzIRPEpilogue(pDevExt);

   return status;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyzport\cyzread.c ===
/*--------------------------------------------------------------------------
*
*   Copyright (C) Cyclades Corporation, 1997-2001.
*   All rights reserved.
*
*   Cyclades-Z Port Driver
*	
*   This file:      cyzread.c
*
*   Description:    This module contains the code related to read
*                   operations in the Cyclades-Z Port driver.
*
*   Notes:          This code supports Windows 2000 and Windows XP,
*                   x86 and IA64 processors.
*
*   Complies with Cyclades SW Coding Standard rev 1.3.
*
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*   Change History
*
*--------------------------------------------------------------------------
*
*
*--------------------------------------------------------------------------
*/

#include "precomp.h"


VOID
CyzCancelCurrentRead(
    PDEVICE_OBJECT DeviceObject,
    PIRP Irp
    );

BOOLEAN
CyzGrabReadFromIsr(
    IN PVOID Context
    );

BOOLEAN
CyzUpdateReadByIsr(
    IN PVOID Context
    );

ULONG
CyzGetCharsFromIntBuffer(
    PCYZ_DEVICE_EXTENSION Extension
    );

BOOLEAN
CyzUpdateInterruptBuffer(
    IN PVOID Context
    );

BOOLEAN
CyzUpdateAndSwitchToUser(
    IN PVOID Context
    );

NTSTATUS
CyzResizeBuffer(
    IN PCYZ_DEVICE_EXTENSION Extension
    );

ULONG
CyzMoveToNewIntBuffer(
    PCYZ_DEVICE_EXTENSION Extension,
    PUCHAR NewBuffer
    );

BOOLEAN
CyzUpdateAndSwitchToNew(
    IN PVOID Context
    );

#ifdef ALLOC_PRAGMA
#pragma alloc_text(PAGESER,CyzRead)
#pragma alloc_text(PAGESER,CyzStartRead)
#pragma alloc_text(PAGESER,CyzCancelCurrentRead)
#pragma alloc_text(PAGESER,CyzGrabReadFromIsr)
#pragma alloc_text(PAGESER,CyzUpdateReadByIsr)
#pragma alloc_text(PAGESER,CyzGetCharsFromIntBuffer)
#pragma alloc_text(PAGESER,CyzUpdateInterruptBuffer)
#pragma alloc_text(PAGESER,CyzUpdateAndSwitchToUser)
#pragma alloc_text(PAGESER,CyzResizeBuffer)
#pragma alloc_text(PAGESER,CyzMoveToNewIntBuffer)
#pragma alloc_text(PAGESER,CyzUpdateAndSwitchToNew)
#endif

//removed in Win2000
//#pragma alloc_text(PAGESER,CyzCompleteRead)
//#pragma alloc_text(PAGESER,CyzReadTimeout)
//#pragma alloc_text(PAGESER,CyzIntervalReadTimeout)


NTSTATUS
CyzRead(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    )
/*--------------------------------------------------------------------------
    CyzRead()
    
    Routine Description: This is the dispatch routine for reading. It
    validates the parameters for the read request and if all is ok then
    it places the request on the work queue.

    Arguments:

    DeviceObject - Pointer to the device object for this device
    Irp - Pointer to the IRP for the current request

    Return Value:

    If the io is zero length then it will return STATUS_SUCCESS,
    otherwise this routine will return the status returned by
    the actual start read routine.
--------------------------------------------------------------------------*/
{
    PCYZ_DEVICE_EXTENSION extension = DeviceObject->DeviceExtension;
    BOOLEAN acceptingIRPs;
    NTSTATUS status;

    CYZ_LOCKED_PAGED_CODE();

    CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyzRead(%X, %X)\n", DeviceObject,
                     Irp);

    if ((status = CyzIRPPrologue(Irp, extension)) != STATUS_SUCCESS) {
      if(status != STATUS_PENDING) {
         CyzCompleteRequest(extension, Irp, IO_NO_INCREMENT);
      }
      CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyzRead (1) %X\n", status);
      return status;
    }

    CyzDbgPrintEx(CYZIRPPATH, "Dispatch entry for: %x\n", Irp);

    if (CyzCompleteIfError(DeviceObject, Irp) != STATUS_SUCCESS) {

       CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyzRead (2) %X\n",
                        STATUS_CANCELLED);
        return STATUS_CANCELLED;
    }

    Irp->IoStatus.Information = 0L;

    if (IoGetCurrentIrpStackLocation(Irp)->Parameters.Read.Length) {

       //
       // Well it looks like we actually have to do some
       // work.  Put the read on the queue so that we can
       // process it when our previous reads are done.
       //

       status = CyzStartOrQueue(extension, Irp, &extension->ReadQueue,
                                   &extension->CurrentReadIrp, CyzStartRead);

       CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyzRead (3) %X\n", status);

       return status;

    } else {

        Irp->IoStatus.Status = STATUS_SUCCESS;
        CyzCompleteRequest(extension, Irp, 0);

        CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyzRead (4) %X\n",
                         STATUS_SUCCESS);

        return STATUS_SUCCESS;

    }

}

NTSTATUS
CyzStartRead(
    IN PCYZ_DEVICE_EXTENSION Extension
    )
/*--------------------------------------------------------------------------
    CyzStartRead()
    
    Routine Description: This routine is used to start off any read.
    It initializes the Iostatus fields of the irp.  It will set up any
    timers that are used to control the read.  It will attempt to
    complete the read from data already in the interrupt buffer.  If the
    read can be completed quickly it will start off another if
    necessary.

    Arguments:

    Extension - Simply a pointer to the serial device extension.

    Return Value: This routine will return the status of the first read
    irp.  This is useful in that if we have a read that can complete
    right away (AND there had been nothing in the queue before it) the
    read could return SUCCESS and the application won't have to do a wait.
--------------------------------------------------------------------------*/
{
    SERIAL_UPDATE_CHAR updateChar;
    PIRP newIrp;
    KIRQL oldIrql;
    KIRQL controlIrql;
#ifdef POLL
    KIRQL pollIrql;
#endif
    BOOLEAN returnWithWhatsPresent;
    BOOLEAN os2ssreturn;
    BOOLEAN crunchDownToOne;
    BOOLEAN useTotalTimer;
    BOOLEAN useIntervalTimer;
    ULONG multiplierVal;
    ULONG constantVal;
    LARGE_INTEGER totalTime;
    SERIAL_TIMEOUTS timeoutsForIrp;
    BOOLEAN setFirstStatus = FALSE;
    NTSTATUS firstStatus;

    CYZ_LOCKED_PAGED_CODE();

    CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyzStartRead(%X)\n", Extension);

    updateChar.Extension = Extension;

    do {
        // Check to see if this is a resize request.  If it is
        // then go to a routine that specializes in that.

        if (IoGetCurrentIrpStackLocation(Extension->CurrentReadIrp)
            ->MajorFunction != IRP_MJ_READ) {

            NTSTATUS localStatus = CyzResizeBuffer(Extension);
            if (!setFirstStatus) {
                firstStatus = localStatus;
                setFirstStatus = TRUE;
            }
        } else {
            Extension->NumberNeededForRead =
                IoGetCurrentIrpStackLocation(Extension->CurrentReadIrp)
                    ->Parameters.Read.Length;

            // Calculate the timeout value needed for the
            // request.  Note that the values stored in the
            // timeout record are in milliseconds.

            useTotalTimer = FALSE;
            returnWithWhatsPresent = FALSE;
            os2ssreturn = FALSE;
            crunchDownToOne = FALSE;
            useIntervalTimer = FALSE;

            //
            // CIMEXCIMEX -- this is a lie
            //
            // Always initialize the timer objects so that the
            // completion code can tell when it attempts to
            // cancel the timers whether the timers had ever
            // been Set.
            //
            // CIMEXCIMEX -- this is the truth
            //
            // What we want to do is just make sure the timers are
            // cancelled to the best of our ability and move on with
            // life.
            //

            CyzCancelTimer(&Extension->ReadRequestTotalTimer, Extension);
            CyzCancelTimer(&Extension->ReadRequestIntervalTimer, Extension);


//            KeInitializeTimer(&Extension->ReadRequestTotalTimer);
//            KeInitializeTimer(&Extension->ReadRequestIntervalTimer);

            // We get the *current* timeout values to use for timing
            // this read.

            KeAcquireSpinLock(&Extension->ControlLock,&controlIrql);

            timeoutsForIrp = Extension->Timeouts;

            KeReleaseSpinLock(&Extension->ControlLock,controlIrql);

            // Calculate the interval timeout for the read.

            if (timeoutsForIrp.ReadIntervalTimeout &&
                (timeoutsForIrp.ReadIntervalTimeout !=
                 MAXULONG)) {

                useIntervalTimer = TRUE;

                Extension->IntervalTime.QuadPart =
                    UInt32x32To64(
                        timeoutsForIrp.ReadIntervalTimeout,
                        10000
                        );

                if (Extension->IntervalTime.QuadPart >=
                    Extension->CutOverAmount.QuadPart) {

                    Extension->IntervalTimeToUse =
                        &Extension->LongIntervalAmount;
                } else {
                    Extension->IntervalTimeToUse =
                        &Extension->ShortIntervalAmount;
                }
            }

            if (timeoutsForIrp.ReadIntervalTimeout == MAXULONG) {

                //
                // We need to do special return quickly stuff here.
                //
                // 1) If both constant and multiplier are
                //    0 then we return immediately with whatever
                //    we've got, even if it was zero.
                //
                // 2) If constant and multiplier are not MAXULONG
                //    then return immediately if any characters
                //    are present, but if nothing is there, then
                //    use the timeouts as specified.
                //
                // 3) If multiplier is MAXULONG then do as in
                //    "2" but return when the first character
                //    arrives.
                //

                if (!timeoutsForIrp.ReadTotalTimeoutConstant &&
                    !timeoutsForIrp.ReadTotalTimeoutMultiplier) {

                    returnWithWhatsPresent = TRUE;

                } else if ((timeoutsForIrp.ReadTotalTimeoutConstant != MAXULONG)
                            &&
                           (timeoutsForIrp.ReadTotalTimeoutMultiplier
                            != MAXULONG)) {

                    useTotalTimer = TRUE;
                    os2ssreturn = TRUE;
                    multiplierVal = timeoutsForIrp.ReadTotalTimeoutMultiplier;
                    constantVal = timeoutsForIrp.ReadTotalTimeoutConstant;

                } else if ((timeoutsForIrp.ReadTotalTimeoutConstant != MAXULONG)
                            &&
                           (timeoutsForIrp.ReadTotalTimeoutMultiplier
                            == MAXULONG)) {

                    useTotalTimer = TRUE;
                    os2ssreturn = TRUE;
                    crunchDownToOne = TRUE;
                    multiplierVal = 0;
                    constantVal = timeoutsForIrp.ReadTotalTimeoutConstant;

                }

            } else {

                //
                // If both the multiplier and the constant are
                // zero then don't do any total timeout processing.
                //

                if (timeoutsForIrp.ReadTotalTimeoutMultiplier ||
                    timeoutsForIrp.ReadTotalTimeoutConstant) {

                    //
                    // We have some timer values to calculate.
                    //

                    useTotalTimer = TRUE;
                    multiplierVal = timeoutsForIrp.ReadTotalTimeoutMultiplier;
                    constantVal = timeoutsForIrp.ReadTotalTimeoutConstant;

                }

            }

            if (useTotalTimer) {

                totalTime.QuadPart = ((LONGLONG)(UInt32x32To64(
                                          Extension->NumberNeededForRead,
                                          multiplierVal
                                          )
                                          + constantVal))
                                      * -10000;

            }


            //
            // We do this copy in the hope of getting most (if not
            // all) of the characters out of the interrupt buffer.
            //
            // Note that we need to protect this operation with a
            // spinlock since we don't want a purge to hose us.
            //

            KeAcquireSpinLock(
                &Extension->ControlLock,
                &controlIrql
                );

            updateChar.CharsCopied = CyzGetCharsFromIntBuffer(Extension);

            //
            // See if we have any cause to return immediately.
            //

            if (returnWithWhatsPresent || (!Extension->NumberNeededForRead) ||
                (os2ssreturn &&
                 Extension->CurrentReadIrp->IoStatus.Information)) {

                //
                // We got all we needed for this read.
                // Update the number of characters in the
                // interrupt read buffer.
                //
                #ifdef POLL
                KeAcquireSpinLock(&Extension->PollLock,&pollIrql);
                CyzUpdateInterruptBuffer(&updateChar);
                KeReleaseSpinLock(&Extension->PollLock,pollIrql);
                #else
                KeSynchronizeExecution(
                    Extension->Interrupt,
                    CyzUpdateInterruptBuffer,
                    &updateChar
                    );
                #endif
				
                KeReleaseSpinLock(
                    &Extension->ControlLock,
                    controlIrql
                    );

                Extension->CurrentReadIrp->IoStatus.Status = STATUS_SUCCESS;
                if (!setFirstStatus) {

                    firstStatus = STATUS_SUCCESS;
                    setFirstStatus = TRUE;

                }

            } else {

                //
                // The irp might go under control of the isr.  It
                // won't hurt to initialize the reference count
                // right now.
                //

                SERIAL_INIT_REFERENCE(Extension->CurrentReadIrp);

                IoAcquireCancelSpinLock(&oldIrql);

                //
                // We need to see if this irp should be canceled.
                //

                if (Extension->CurrentReadIrp->Cancel) {

                    IoReleaseCancelSpinLock(oldIrql);
                    KeReleaseSpinLock(
                        &Extension->ControlLock,
                        controlIrql
                        );
                    Extension->CurrentReadIrp->IoStatus.Status =
                        STATUS_CANCELLED;
                    Extension->CurrentReadIrp->IoStatus.Information = 0;

                    if (!setFirstStatus) {

                        firstStatus = STATUS_CANCELLED;
                        setFirstStatus = TRUE;

                    }

                } else {

                    //
                    // If we are supposed to crunch the read down to
                    // one character, then update the read length
                    // in the irp and truncate the number needed for
                    // read down to one. Note that if we are doing
                    // this crunching, then the information must be
                    // zero (or we would have completed above) and
                    // the number needed for the read must still be
                    // equal to the read length.
                    //

                    if (crunchDownToOne) {

                        ASSERT(
                            (!Extension->CurrentReadIrp->IoStatus.Information)
                            &&
                            (Extension->NumberNeededForRead ==
                                IoGetCurrentIrpStackLocation(
                                    Extension->CurrentReadIrp
                                    )->Parameters.Read.Length)
                            );

                        Extension->NumberNeededForRead = 1;
                        IoGetCurrentIrpStackLocation(
                            Extension->CurrentReadIrp
                            )->Parameters.Read.Length = 1;

                    }

                    //
                    // We still need to get more characters for this read.
                    // synchronize with the isr so that we can update the
                    // number of characters and if necessary it will have the
                    // isr switch to copying into the users buffer.
                    //

                    #ifdef POLL
                    KeAcquireSpinLock(&Extension->PollLock,&pollIrql);
                    CyzUpdateAndSwitchToUser(&updateChar);
                    KeReleaseSpinLock(&Extension->PollLock,pollIrql);
                    #else
                    KeSynchronizeExecution(
                        Extension->Interrupt,
                        CyzUpdateAndSwitchToUser,
                        &updateChar
                        );
                    #endif
                    if (!updateChar.Completed) {

                        //
                        // The irp still isn't complete.  The
                        // completion routines will end up reinvoking
                        // this routine.  So we simply leave.
                        //
                        // First thought we should start off the total
                        // timer for the read and increment the reference
                        // count that the total timer has on the current
                        // irp.  Note that this is safe, because even if
                        // the io has been satisfied by the isr it can't
                        // complete yet because we still own the cancel
                        // spinlock.
                        //

                        if (useTotalTimer) {

                            SERIAL_SET_REFERENCE(
                                Extension->CurrentReadIrp,
                                SERIAL_REF_TOTAL_TIMER
                                );

                            CyzSetTimer(
                                &Extension->ReadRequestTotalTimer,
                                totalTime,
                                &Extension->TotalReadTimeoutDpc,
                                Extension
                                );

                        }

                        if (useIntervalTimer) {

                            SERIAL_SET_REFERENCE(
                                Extension->CurrentReadIrp,
                                SERIAL_REF_INT_TIMER
                                );

                            KeQuerySystemTime(
                                &Extension->LastReadTime
                                );
                            CyzSetTimer(
                                &Extension->ReadRequestIntervalTimer,
                                *Extension->IntervalTimeToUse,
                                &Extension->IntervalReadTimeoutDpc,
                                Extension
                                );

                        }

                        IoMarkIrpPending(Extension->CurrentReadIrp);
                        IoReleaseCancelSpinLock(oldIrql);
                        KeReleaseSpinLock(
                            &Extension->ControlLock,
                            controlIrql
                            );
                        if (!setFirstStatus) {

                            firstStatus = STATUS_PENDING;

                        }
                        return firstStatus;

                    } else {

                        IoReleaseCancelSpinLock(oldIrql);
                        KeReleaseSpinLock(
                            &Extension->ControlLock,
                            controlIrql
                            );
                        Extension->CurrentReadIrp->IoStatus.Status =
                            STATUS_SUCCESS;

                        if (!setFirstStatus) {

                            firstStatus = STATUS_SUCCESS;
                            setFirstStatus = TRUE;

                        }

                    }

                }

            }

        }

        //
        // Well the operation is complete.
        //

        CyzGetNextIrp(&Extension->CurrentReadIrp, &Extension->ReadQueue,
                         &newIrp, TRUE, Extension);

    } while (newIrp);

    CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyzStartRead %X\n", firstStatus);

    return firstStatus;

}

VOID
CyzCompleteRead(
    IN PKDPC Dpc,
    IN PVOID DeferredContext,
    IN PVOID SystemContext1,
    IN PVOID SystemContext2
    )
/*--------------------------------------------------------------------------
    CyzCompleteRead()
    
    Routine Description: This routine is merely used to complete any read
    that ended up being used by the Isr.  It assumes that the status and
    the information fields of the irp are already correctly filled in.

    Arguments:

    Dpc - Not Used.
    DeferredContext - Really points to the device extension.
    SystemContext1 - Not Used.
    SystemContext2 - Not Used.

    Return Value: None.
--------------------------------------------------------------------------*/

{
    PCYZ_DEVICE_EXTENSION extension = DeferredContext;
    KIRQL oldIrql;

    UNREFERENCED_PARAMETER(SystemContext1);
    UNREFERENCED_PARAMETER(SystemContext2);

    CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyzCompleteRead(%X)\n",
                     extension);

    IoAcquireCancelSpinLock(&oldIrql);

    //
    // We set this to indicate to the interval timer
    // that the read has completed.
    //
    // Recall that the interval timer dpc can be lurking in some
    // DPC queue.
    //

    extension->CountOnLastRead = CYZ_COMPLETE_READ_COMPLETE;

    CyzTryToCompleteCurrent(
        extension,
        NULL,
        oldIrql,
        STATUS_SUCCESS,
        &extension->CurrentReadIrp,
        &extension->ReadQueue,
        &extension->ReadRequestIntervalTimer,
        &extension->ReadRequestTotalTimer,
        CyzStartRead,
        CyzGetNextIrp,
        SERIAL_REF_ISR
        );

    CyzDpcEpilogue(extension, Dpc);

    CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyzCompleteRead(%X)\n");
}

VOID
CyzCancelCurrentRead(
    PDEVICE_OBJECT DeviceObject,
    PIRP Irp
    )

/*++

Routine Description:

    This routine is used to cancel the current read.

Arguments:

    DeviceObject - Pointer to the device object for this device

    Irp - Pointer to the IRP to be canceled.

Return Value:

    None.

--*/

{

    PCYZ_DEVICE_EXTENSION extension = DeviceObject->DeviceExtension;
    CYZ_LOCKED_PAGED_CODE();

    //
    // We set this to indicate to the interval timer
    // that the read has encountered a cancel.
    //
    // Recall that the interval timer dpc can be lurking in some
    // DPC queue.
    //

    extension->CountOnLastRead = CYZ_COMPLETE_READ_CANCEL;

    CyzTryToCompleteCurrent(
        extension,
        CyzGrabReadFromIsr,
        Irp->CancelIrql,
        STATUS_CANCELLED,
        &extension->CurrentReadIrp,
        &extension->ReadQueue,
        &extension->ReadRequestIntervalTimer,
        &extension->ReadRequestTotalTimer,
        CyzStartRead,
        CyzGetNextIrp,
        SERIAL_REF_CANCEL
        );

}

BOOLEAN
CyzGrabReadFromIsr(
    IN PVOID Context
    )

/*++

Routine Description:

    This routine is used to grab (if possible) the irp from the
    isr.  If it finds that the isr still owns the irp it grabs
    the ipr away (updating the number of characters copied into the
    users buffer).  If it grabs it away it also decrements the
    reference count on the irp since it no longer belongs to the
    isr (and the dpc that would complete it).

    NOTE: This routine assumes that if the current buffer that the
          ISR is copying characters into is the interrupt buffer then
          the dpc has already been queued.

    NOTE: This routine is being called from KeSynchronizeExecution.

    NOTE: This routine assumes that it is called with the cancel spin
          lock held.

Arguments:

    Context - Really a pointer to the device extension.

Return Value:

    Always false.

--*/

{

    PCYZ_DEVICE_EXTENSION extension = Context;
    CYZ_LOCKED_PAGED_CODE();

    if (extension->ReadBufferBase !=
        extension->InterruptReadBuffer) {

        //
        // We need to set the information to the number of characters
        // that the read wanted minus the number of characters that
        // didn't get read into the interrupt buffer.
        //

        extension->CurrentReadIrp->IoStatus.Information =
            IoGetCurrentIrpStackLocation(
                extension->CurrentReadIrp
                )->Parameters.Read.Length -
            ((extension->LastCharSlot - extension->CurrentCharSlot) + 1);
					
        //
        // Switch back to the interrupt buffer.
        //

        extension->ReadBufferBase = extension->InterruptReadBuffer;
        extension->CurrentCharSlot = extension->InterruptReadBuffer;
        extension->FirstReadableChar = extension->InterruptReadBuffer;
        extension->LastCharSlot = extension->InterruptReadBuffer +
                                      (extension->BufferSize - 1);
        extension->CharsInInterruptBuffer = 0;
		
        SERIAL_CLEAR_REFERENCE(
            extension->CurrentReadIrp,
            SERIAL_REF_ISR
            );

    }

    return FALSE;

}

VOID
CyzReadTimeout(
    IN PKDPC Dpc,
    IN PVOID DeferredContext,
    IN PVOID SystemContext1,
    IN PVOID SystemContext2
    )

/*++

Routine Description:

    This routine is used to complete a read because its total
    timer has expired.

Arguments:

    Dpc - Not Used.

    DeferredContext - Really points to the device extension.

    SystemContext1 - Not Used.

    SystemContext2 - Not Used.

Return Value:

    None.

--*/

{

    PCYZ_DEVICE_EXTENSION extension = DeferredContext;
    KIRQL oldIrql;

    UNREFERENCED_PARAMETER(SystemContext1);
    UNREFERENCED_PARAMETER(SystemContext2);

    CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyzReadTimeout(%X)\n",
                     extension);

    IoAcquireCancelSpinLock(&oldIrql);

    //
    // We set this to indicate to the interval timer
    // that the read has completed due to total timeout.
    //
    // Recall that the interval timer dpc can be lurking in some
    // DPC queue.
    //

    extension->CountOnLastRead = CYZ_COMPLETE_READ_TOTAL;

    CyzTryToCompleteCurrent(
        extension,
        CyzGrabReadFromIsr,
        oldIrql,
        STATUS_TIMEOUT,
        &extension->CurrentReadIrp,
        &extension->ReadQueue,
        &extension->ReadRequestIntervalTimer,
        &extension->ReadRequestTotalTimer,
        CyzStartRead,
        CyzGetNextIrp,
        SERIAL_REF_TOTAL_TIMER
        );

    CyzDpcEpilogue(extension, Dpc);

    CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyzReadTimeout\n");
}

BOOLEAN
CyzUpdateReadByIsr(
    IN PVOID Context
    )

/*++

Routine Description:

    This routine is used to update the count of characters read
    by the isr since the last interval timer experation.

    NOTE: This routine is being called from KeSynchronizeExecution.

    NOTE: This routine assumes that it is called with the cancel spin
          lock held.

Arguments:

    Context - Really a pointer to the device extension.

Return Value:

    Always false.

--*/

{

    PCYZ_DEVICE_EXTENSION extension = Context;
    CYZ_LOCKED_PAGED_CODE();

    extension->CountOnLastRead = extension->ReadByIsr;
    extension->ReadByIsr = 0;

    return FALSE;

}

VOID
CyzIntervalReadTimeout(
    IN PKDPC Dpc,
    IN PVOID DeferredContext,
    IN PVOID SystemContext1,
    IN PVOID SystemContext2
    )

/*++

Routine Description:

    This routine is used timeout the request if the time between
    characters exceed the interval time.  A global is kept in
    the device extension that records the count of characters read
    the last the last time this routine was invoked (This dpc
    will resubmit the timer if the count has changed).  If the
    count has not changed then this routine will attempt to complete
    the irp.  Note the special case of the last count being zero.
    The timer isn't really in effect until the first character is
    read.

Arguments:

    Dpc - Not Used.

    DeferredContext - Really points to the device extension.

    SystemContext1 - Not Used.

    SystemContext2 - Not Used.

Return Value:

    None.

--*/

{

    PCYZ_DEVICE_EXTENSION extension = DeferredContext;
    KIRQL oldIrql;
    #ifdef POLL
    KIRQL pollIrql;
    #endif

    UNREFERENCED_PARAMETER(SystemContext1);
    UNREFERENCED_PARAMETER(SystemContext2);

    IoAcquireCancelSpinLock(&oldIrql);

#if 0 //Removed for Hyperterminal
    CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyzIntervalReadTimeout(%X)\n",
                     extension);
#endif

    if (extension->CountOnLastRead == CYZ_COMPLETE_READ_TOTAL) {

        //
        // This value is only set by the total
        // timer to indicate that it has fired.
        // If so, then we should simply try to complete.
        //

        CyzTryToCompleteCurrent(
            extension,
            CyzGrabReadFromIsr,
            oldIrql,
            STATUS_TIMEOUT,
            &extension->CurrentReadIrp,
            &extension->ReadQueue,
            &extension->ReadRequestIntervalTimer,
            &extension->ReadRequestTotalTimer,
            CyzStartRead,
            CyzGetNextIrp,
            SERIAL_REF_INT_TIMER
            );

    } else if (extension->CountOnLastRead == CYZ_COMPLETE_READ_COMPLETE) {

        //
        // This value is only set by the regular
        // completion routine.
        //
        // If so, then we should simply try to complete.
        //

        CyzTryToCompleteCurrent(
            extension,
            CyzGrabReadFromIsr,
            oldIrql,
            STATUS_SUCCESS,
            &extension->CurrentReadIrp,
            &extension->ReadQueue,
            &extension->ReadRequestIntervalTimer,
            &extension->ReadRequestTotalTimer,
            CyzStartRead,
            CyzGetNextIrp,
            SERIAL_REF_INT_TIMER
            );

    } else if (extension->CountOnLastRead == CYZ_COMPLETE_READ_CANCEL) {

        //
        // This value is only set by the cancel
        // read routine.
        //
        // If so, then we should simply try to complete.
        //

        CyzTryToCompleteCurrent(
            extension,
            CyzGrabReadFromIsr,
            oldIrql,
            STATUS_CANCELLED,
            &extension->CurrentReadIrp,
            &extension->ReadQueue,
            &extension->ReadRequestIntervalTimer,
            &extension->ReadRequestTotalTimer,
            CyzStartRead,
            CyzGetNextIrp,
            SERIAL_REF_INT_TIMER
            );

    } else if (extension->CountOnLastRead || extension->ReadByIsr) {

        //
        // Something has happened since we last came here.  We
        // check to see if the ISR has read in any more characters.
        // If it did then we should update the isr's read count
        // and resubmit the timer.
        //

        if (extension->ReadByIsr) {
			
            #ifdef POLL
            KeAcquireSpinLock(&extension->PollLock,&pollIrql);
            CyzUpdateReadByIsr(extension);
            KeReleaseSpinLock(&extension->PollLock,pollIrql);
            #else
            KeSynchronizeExecution(
                extension->Interrupt,
                CyzUpdateReadByIsr,
                extension
                );
            #endif
			
            //
            // Save off the "last" time something was read.
            // As we come back to this routine we will compare
            // the current time to the "last" time.  If the
            // difference is ever larger then the interval
            // requested by the user, then time out the request.
            //

            KeQuerySystemTime(
                &extension->LastReadTime
                );

            CyzSetTimer(
                &extension->ReadRequestIntervalTimer,
                *extension->IntervalTimeToUse,
                &extension->IntervalReadTimeoutDpc,
                extension
                );

            IoReleaseCancelSpinLock(oldIrql);

        } else {

            //
            // Take the difference between the current time
            // and the last time we had characters and
            // see if it is greater then the interval time.
            // if it is, then time out the request.  Otherwise
            // go away again for a while.
            //

            //
            // No characters read in the interval time.  Kill
            // this read.
            //

            LARGE_INTEGER currentTime;

            KeQuerySystemTime(
                &currentTime
                );

            if ((currentTime.QuadPart - extension->LastReadTime.QuadPart) >=
                extension->IntervalTime.QuadPart) {

                CyzTryToCompleteCurrent(
                    extension,
                    CyzGrabReadFromIsr,
                    oldIrql,
                    STATUS_TIMEOUT,
                    &extension->CurrentReadIrp,
                    &extension->ReadQueue,
                    &extension->ReadRequestIntervalTimer,
                    &extension->ReadRequestTotalTimer,
                    CyzStartRead,
                    CyzGetNextIrp,
                    SERIAL_REF_INT_TIMER
                    );

            } else {

                CyzSetTimer(
                    &extension->ReadRequestIntervalTimer,
                    *extension->IntervalTimeToUse,
                    &extension->IntervalReadTimeoutDpc,
                    extension
                    );
                IoReleaseCancelSpinLock(oldIrql);

            }


        }

    } else {

        //
        // Timer doesn't really start until the first character.
        // So we should simply resubmit ourselves.
        //

        CyzSetTimer(
            &extension->ReadRequestIntervalTimer,
            *extension->IntervalTimeToUse,
            &extension->IntervalReadTimeoutDpc,
            extension
            );

        IoReleaseCancelSpinLock(oldIrql);

    }

    CyzDpcEpilogue(extension, Dpc);

#if 0 //Removed for Hyperterminal
    CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyzIntervalReadTimeout\n");
#endif
}

ULONG
CyzGetCharsFromIntBuffer(
    PCYZ_DEVICE_EXTENSION Extension
    )

/*++

Routine Description:

    This routine is used to copy any characters out of the interrupt
    buffer into the users buffer.  It will be reading values that
    are updated with the ISR but this is safe since this value is
    only decremented by synchronization routines.  This routine will
    return the number of characters copied so some other routine
    can call a synchronization routine to update what is seen at
    interrupt level.

Arguments:

    Extension - A pointer to the device extension.

Return Value:

    The number of characters that were copied into the user
    buffer.

--*/

{

    //
    // This value will be the number of characters that this
    // routine returns.  It will be the minimum of the number
    // of characters currently in the buffer or the number of
    // characters required for the read.
    //
    ULONG numberOfCharsToGet;

    //
    // This holds the number of characters between the first
    // readable character and - the last character we will read or
    // the real physical end of the buffer (not the last readable
    // character).
    //
    ULONG firstTryNumberToGet;

    CYZ_LOCKED_PAGED_CODE();

    //
    // The minimum of the number of characters we need and
    // the number of characters available
    //

    numberOfCharsToGet = Extension->CharsInInterruptBuffer;

    if (numberOfCharsToGet > Extension->NumberNeededForRead) {

        numberOfCharsToGet = Extension->NumberNeededForRead;

    }

    if (numberOfCharsToGet) {

        //
        // This will hold the number of characters between the
        // first available character and the end of the buffer.
        // Note that the buffer could wrap around but for the
        // purposes of the first copy we don't care about that.
        //

        firstTryNumberToGet = (ULONG)(Extension->LastCharSlot -
                               Extension->FirstReadableChar) + 1;

        if (firstTryNumberToGet > numberOfCharsToGet) {

            //
            // The characters don't wrap. Actually they may wrap but
            // we don't care for the purposes of this read since the
            // characters we need are available before the wrap.
            //

            RtlMoveMemory(
                ((PUCHAR)(Extension->CurrentReadIrp->AssociatedIrp.SystemBuffer))
                    + (IoGetCurrentIrpStackLocation(
                           Extension->CurrentReadIrp
                           )->Parameters.Read.Length
                       - Extension->NumberNeededForRead
                      ),
                Extension->FirstReadableChar,
                numberOfCharsToGet
                );

            Extension->NumberNeededForRead -= numberOfCharsToGet;

            //
            // We now will move the pointer to the first character after
            // what we just copied into the users buffer.
            //
            // We need to check if the stream of readable characters
            // is wrapping around to the beginning of the buffer.
            //
            // Note that we may have just taken the last characters
            // at the end of the buffer.
            //

            if ((Extension->FirstReadableChar + (numberOfCharsToGet - 1)) ==
                Extension->LastCharSlot) {

                Extension->FirstReadableChar = Extension->InterruptReadBuffer;

            } else {

                Extension->FirstReadableChar += numberOfCharsToGet;

            }

        } else {

            //
            // The characters do wrap.  Get up until the end of the buffer.
            //

            RtlMoveMemory(
                ((PUCHAR)(Extension->CurrentReadIrp->AssociatedIrp.SystemBuffer))
                    + (IoGetCurrentIrpStackLocation(
                           Extension->CurrentReadIrp
                           )->Parameters.Read.Length
                       - Extension->NumberNeededForRead
                      ),
                Extension->FirstReadableChar,
                firstTryNumberToGet
                );

            Extension->NumberNeededForRead -= firstTryNumberToGet;

            //
            // Now get the rest of the characters from the beginning of the
            // buffer.
            //

            RtlMoveMemory(
                ((PUCHAR)(Extension->CurrentReadIrp->AssociatedIrp.SystemBuffer))
                    + (IoGetCurrentIrpStackLocation(
                           Extension->CurrentReadIrp
                           )->Parameters.Read.Length
                       - Extension->NumberNeededForRead
                      ),
                Extension->InterruptReadBuffer,
                numberOfCharsToGet - firstTryNumberToGet
                );

            Extension->FirstReadableChar = Extension->InterruptReadBuffer +
                                           (numberOfCharsToGet -
                                            firstTryNumberToGet);

            Extension->NumberNeededForRead -= (numberOfCharsToGet -
                                               firstTryNumberToGet);

        }
		
    }

    Extension->CurrentReadIrp->IoStatus.Information += numberOfCharsToGet;
    return numberOfCharsToGet;

}

BOOLEAN
CyzUpdateInterruptBuffer(
    IN PVOID Context
    )

/*++

Routine Description:

    This routine is used to update the number of characters that
    remain in the interrupt buffer.  We need to use this routine
    since the count could be updated during the update by execution
    of the ISR.

    NOTE: This is called by KeSynchronizeExecution.

Arguments:

    Context - Points to a structure that contains a pointer to the
              device extension and count of the number of characters
              that we previously copied into the users buffer.  The
              structure actually has a third field that we don't
              use in this routine.

Return Value:

    Always FALSE.

--*/

{

    PSERIAL_UPDATE_CHAR update = Context;
    PCYZ_DEVICE_EXTENSION extension = update->Extension;
	
    CYZ_LOCKED_PAGED_CODE();

    ASSERT(extension->CharsInInterruptBuffer >= update->CharsCopied);
    extension->CharsInInterruptBuffer -= update->CharsCopied;
	
    //
    // Deal with flow control if necessary.
    //

    CyzHandleReducedIntBuffer(extension);


    return FALSE;

}

BOOLEAN
CyzUpdateAndSwitchToUser(
    IN PVOID Context
    )

/*++

Routine Description:

    This routine gets the (hopefully) few characters that
    remain in the interrupt buffer after the first time we tried
    to get them out.  If we still don't have enough characters
    to satisfy the read it will then we set things up so that the
    ISR uses the user buffer copy into.

    This routine is also used to update a count that is maintained
    by the ISR to keep track of the number of characters in its buffer.

    NOTE: This is called by KeSynchronizeExecution.

Arguments:

    Context - Points to a structure that contains a pointer to the
              device extension, a count of the number of characters
              that we previously copied into the users buffer, and
              a boolean that we will set that defines whether we
              switched the ISR to copy into the users buffer.

Return Value:

    Always FALSE.

--*/

{

    PSERIAL_UPDATE_CHAR updateChar = Context;
    PCYZ_DEVICE_EXTENSION extension = updateChar->Extension;

    CYZ_LOCKED_PAGED_CODE();

    CyzUpdateInterruptBuffer(Context);

    //
    // There are more characters to get to satisfy this read.
    // Copy any characters that have arrived since we got
    // the last batch.
    //

    updateChar->CharsCopied = CyzGetCharsFromIntBuffer(extension);

    CyzUpdateInterruptBuffer(Context);

    //
    // No more new characters will be "received" until we exit
    // this routine.  We again check to make sure that we
    // haven't satisfied this read, and if we haven't we set things
    // up so that the ISR copies into the user buffer.
    //

    if (extension->NumberNeededForRead) {

        //
        // We shouldn't be switching unless there are no
        // characters left.
        //

        ASSERT(!extension->CharsInInterruptBuffer);

        //
        // We use the following to values to do inteval timing.
        //
        // CountOnLastRead is mostly used to simply prevent
        // the interval timer from timing out before any characters
        // are read. (Interval timing should only be effective
        // after the first character is read.)
        //
        // After the first time the interval timer fires and
        // characters have be read we will simply update with
        // the value of ReadByIsr and then set ReadByIsr to zero.
        // (We do that in a synchronization routine.
        //
        // If the interval timer dpc routine ever encounters
        // ReadByIsr == 0 when CountOnLastRead is non-zero it
        // will timeout the read.
        //
        // (Note that we have a special case of CountOnLastRead
        // < 0.  This is done by the read completion routines other
        // than the total timeout dpc to indicate that the total
        // timeout has expired.)
        //

        extension->CountOnLastRead =
            (LONG)extension->CurrentReadIrp->IoStatus.Information;

        extension->ReadByIsr = 0;

        //
        // By compareing the read buffer base address to the
        // the base address of the interrupt buffer the ISR
        // can determine whether we are using the interrupt
        // buffer or the user buffer.
        //

        extension->ReadBufferBase =
            extension->CurrentReadIrp->AssociatedIrp.SystemBuffer;

        //
        // The current char slot is after the last copied in
        // character.  We know there is always room since we
        // we wouldn't have gotten here if there wasn't.
        //

        extension->CurrentCharSlot = extension->ReadBufferBase +
            extension->CurrentReadIrp->IoStatus.Information;

        //
        // The last position that a character can go is on the
        // last byte of user buffer.  While the actual allocated
        // buffer space may be bigger, we know that there is at
        // least as much as the read length.
        //

        extension->LastCharSlot = extension->ReadBufferBase +
                                      (IoGetCurrentIrpStackLocation(
                                          extension->CurrentReadIrp
                                          )->Parameters.Read.Length
                                       - 1);

        //
        // Mark the irp as being in a cancelable state.
        //

        IoSetCancelRoutine(
            extension->CurrentReadIrp,
            CyzCancelCurrentRead
            );

        //
        // Increment the reference count twice.
        //
        // Once for the Isr owning the irp and once
        // because the cancel routine has a reference
        // to it.
        //

        SERIAL_SET_REFERENCE(
            extension->CurrentReadIrp,
            SERIAL_REF_ISR
            );
        SERIAL_SET_REFERENCE(
            extension->CurrentReadIrp,
            SERIAL_REF_CANCEL
            );

        updateChar->Completed = FALSE;

    } else {

        updateChar->Completed = TRUE;

    }

    return FALSE;

}
//
// We use this structure only to communicate to the synchronization
// routine when we are switching to the resized buffer.
//
typedef struct _SERIAL_RESIZE_PARAMS {
    PCYZ_DEVICE_EXTENSION Extension;
    PUCHAR OldBuffer;
    PUCHAR NewBuffer;
    ULONG NewBufferSize;
    ULONG NumberMoved;
    } SERIAL_RESIZE_PARAMS,*PSERIAL_RESIZE_PARAMS;

NTSTATUS
CyzResizeBuffer(
    IN PCYZ_DEVICE_EXTENSION Extension
    )

/*++

Routine Description:

    This routine will process the resize buffer request.
    If size requested for the RX buffer is smaller than
    the current buffer then we will simply return
    STATUS_SUCCESS.  (We don't want to make buffers smaller.
    If we did that then we all of a sudden have "overrun"
    problems to deal with as well as flow control to deal
    with - very painful.)  We ignore the TX buffer size
    request since we don't use a TX buffer.

Arguments:

    Extension - Pointer to the device extension for the port.

Return Value:

    STATUS_SUCCESS if everything worked out ok.
    STATUS_INSUFFICIENT_RESOURCES if we couldn't allocate the
    memory for the buffer.

--*/

{

    PSERIAL_QUEUE_SIZE rs = Extension->CurrentReadIrp->AssociatedIrp
                                                       .SystemBuffer;
    PIO_STACK_LOCATION irpSp = IoGetCurrentIrpStackLocation(
                                   Extension->CurrentReadIrp
                                   );
    PVOID newBuffer = irpSp->Parameters.DeviceIoControl.Type3InputBuffer;

    CYZ_LOCKED_PAGED_CODE();

    irpSp->Parameters.DeviceIoControl.Type3InputBuffer = NULL;
    Extension->CurrentReadIrp->IoStatus.Information = 0L;
    Extension->CurrentReadIrp->IoStatus.Status = STATUS_SUCCESS;

    if (rs->InSize <= Extension->BufferSize) {

        //
        // Nothing to do.  We don't make buffers smaller.  Just
        // agree with the user.  We must deallocate the memory
        // that was already allocated in the ioctl dispatch routine.
        //

        ExFreePool(newBuffer);

    } else {

        SERIAL_RESIZE_PARAMS rp;
        KIRQL controlIrql;
#ifdef POLL
        KIRQL pollIrql;
#endif

        //
        // Hmmm, looks like we actually have to go
        // through with this.  We need to move all the
        // data that is in the current buffer into this
        // new buffer.  We'll do this in two steps.
        //
        // First we go up to dispatch level and try to
        // move as much as we can without stopping the
        // ISR from running.  We go up to dispatch level
        // by acquiring the control lock.  We do it at
        // dispatch using the control lock so that:
        //
        //    1) We can't be context switched in the middle
        //       of the move.  Our pointers into the buffer
        //       could be *VERY* stale by the time we got back.
        //
        //    2) We use the control lock since we don't want
        //       some pesky purge irp to come along while
        //       we are trying to move.
        //
        // After the move, but while we still hold the control
        // lock, we synch with the ISR and get those last
        // (hopefully) few characters that have come in since
        // we started the copy.  We switch all of our pointers,
        // counters, and such to point to this new buffer.  NOTE:
        // we need to be careful.  If the buffer we were using
        // was not the default one created when we initialized
        // the device (i.e. it was created via a previous IRP of
        // this type), we should deallocate it.
        //

        rp.Extension = Extension;
        rp.OldBuffer = Extension->InterruptReadBuffer;
        rp.NewBuffer = newBuffer;
        rp.NewBufferSize = rs->InSize;

        KeAcquireSpinLock(
            &Extension->ControlLock,
            &controlIrql
            );

        rp.NumberMoved = CyzMoveToNewIntBuffer(
                             Extension,
                             newBuffer
                             );

        #ifdef POLL
        KeAcquireSpinLock(&Extension->PollLock,&pollIrql);
        CyzUpdateAndSwitchToNew(&rp);
        KeReleaseSpinLock(&Extension->PollLock,pollIrql);
        #else
        KeSynchronizeExecution(
            Extension->Interrupt,
            CyzUpdateAndSwitchToNew,
            &rp
            );
        #endif
		
        KeReleaseSpinLock(
            &Extension->ControlLock,
            controlIrql
            );

        //
        // Free up the memory that the old buffer consumed.
        //

        ExFreePool(rp.OldBuffer);

    }

    return STATUS_SUCCESS;

}

ULONG
CyzMoveToNewIntBuffer(
    PCYZ_DEVICE_EXTENSION Extension,
    PUCHAR NewBuffer
    )

/*++

Routine Description:

    This routine is used to copy any characters out of the interrupt
    buffer into the "new" buffer.  It will be reading values that
    are updated with the ISR but this is safe since this value is
    only decremented by synchronization routines.  This routine will
    return the number of characters copied so some other routine
    can call a synchronization routine to update what is seen at
    interrupt level.

Arguments:

    Extension - A pointer to the device extension.
    NewBuffer - Where the characters are to be move to.

Return Value:

    The number of characters that were copied into the user
    buffer.

--*/

{

    ULONG numberOfCharsMoved = Extension->CharsInInterruptBuffer;
    CYZ_LOCKED_PAGED_CODE();

    if (numberOfCharsMoved) {

        //
        // This holds the number of characters between the first
        // readable character and the last character we will read or
        // the real physical end of the buffer (not the last readable
        // character).
        //
        ULONG firstTryNumberToGet = (ULONG)(Extension->LastCharSlot -
                                     Extension->FirstReadableChar) + 1;

        if (firstTryNumberToGet >= numberOfCharsMoved) {

            //
            // The characters don't wrap.
            //

            RtlMoveMemory(
                NewBuffer,
                Extension->FirstReadableChar,
                numberOfCharsMoved
                );

            if ((Extension->FirstReadableChar+(numberOfCharsMoved-1)) ==
                Extension->LastCharSlot) {

                Extension->FirstReadableChar = Extension->InterruptReadBuffer;

            } else {

                Extension->FirstReadableChar += numberOfCharsMoved;

            }

        } else {

            //
            // The characters do wrap.  Get up until the end of the buffer.
            //

            RtlMoveMemory(
                NewBuffer,
                Extension->FirstReadableChar,
                firstTryNumberToGet
                );

            //
            // Now get the rest of the characters from the beginning of the
            // buffer.
            //

            RtlMoveMemory(
                NewBuffer+firstTryNumberToGet,
                Extension->InterruptReadBuffer,
                numberOfCharsMoved - firstTryNumberToGet
                );

            Extension->FirstReadableChar = Extension->InterruptReadBuffer +
                                   numberOfCharsMoved - firstTryNumberToGet;

        }

    }

    return numberOfCharsMoved;

}

BOOLEAN
CyzUpdateAndSwitchToNew(
    IN PVOID Context
    )

/*++

Routine Description:

    This routine gets the (hopefully) few characters that
    remain in the interrupt buffer after the first time we tried
    to get them out.

    NOTE: This is called by KeSynchronizeExecution.

Arguments:

    Context - Points to a structure that contains a pointer to the
              device extension, a pointer to the buffer we are moving
              to, and a count of the number of characters
              that we previously copied into the new buffer, and the
              actual size of the new buffer.

Return Value:

    Always FALSE.

--*/

{

    PSERIAL_RESIZE_PARAMS params = Context;
    PCYZ_DEVICE_EXTENSION extension = params->Extension;
    ULONG tempCharsInInterruptBuffer = extension->CharsInInterruptBuffer;

    CYZ_LOCKED_PAGED_CODE();

    ASSERT(extension->CharsInInterruptBuffer >= params->NumberMoved);

    //
    // We temporarily reduce the chars in interrupt buffer to
    // "fool" the move routine.  We will restore it after the
    // move.
    //

    extension->CharsInInterruptBuffer -= params->NumberMoved;
	
    if (extension->CharsInInterruptBuffer) {

        CyzMoveToNewIntBuffer(
            extension,
            params->NewBuffer + params->NumberMoved
            );

    }

    extension->CharsInInterruptBuffer = tempCharsInInterruptBuffer;

    
    extension->LastCharSlot = params->NewBuffer + (params->NewBufferSize - 1);
    extension->FirstReadableChar = params->NewBuffer;
    extension->ReadBufferBase = params->NewBuffer;
    extension->InterruptReadBuffer = params->NewBuffer;
    extension->BufferSize = params->NewBufferSize;

    //
    // We *KNOW* that the new interrupt buffer is larger than the
    // old buffer.  We don't need to worry about it being full.
    //

    extension->CurrentCharSlot = extension->InterruptReadBuffer +
                                 extension->CharsInInterruptBuffer;

    //
    // We set up the default xon/xoff limits.
    //

    extension->HandFlow.XoffLimit = extension->BufferSize >> 3;
    extension->HandFlow.XonLimit = extension->BufferSize >> 1;

    extension->WmiCommData.XoffXmitThreshold = extension->HandFlow.XoffLimit;
    extension->WmiCommData.XonXmitThreshold = extension->HandFlow.XonLimit;

    extension->BufferSizePt8 = ((3*(extension->BufferSize>>2))+
                                   (extension->BufferSize>>4));

    //
    // Since we (essentially) reduced the percentage of the interrupt
    // buffer being full, we need to handle any flow control.
    //

    CyzHandleReducedIntBuffer(extension);

    return FALSE;

}

=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyzport\cyzutils.c ===
/*--------------------------------------------------------------------------
*
*   Copyright (C) Cyclades Corporation, 1997-2001.
*   All rights reserved.
*
*   Cyclades-Z Port Driver
*	
*   This file:      cyzutils.c
*
*   Description:    This module contains the code related to queueing
*                   and completion manipulation on requests.
*
*   Notes:          This code supports Windows 2000 and Windows XP,
*                   x86 and IA64 processors.
*
*   Complies with Cyclades SW Coding Standard rev 1.3.
*
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*   Change History
*
*--------------------------------------------------------------------------
*
*
*--------------------------------------------------------------------------
*/


#include "precomp.h"

VOID
CyzRundownIrpRefs(
    IN PIRP *CurrentOpIrp,
    IN PKTIMER IntervalTimer,
    IN PKTIMER TotalTimer,
    IN PCYZ_DEVICE_EXTENSION PDevExt
    );

#ifdef ALLOC_PRAGMA
#pragma alloc_text(PAGESER,CyzGetNextIrp)
#pragma alloc_text(PAGESER, CyzGetNextIrpLocked)
#pragma alloc_text(PAGESER,CyzTryToCompleteCurrent)
#pragma alloc_text(PAGESER,CyzStartOrQueue)
#pragma alloc_text(PAGESER,CyzCancelQueued)
#pragma alloc_text(PAGESER,CyzCompleteIfError)
#pragma alloc_text(PAGESER,CyzRundownIrpRefs)

//#pragma alloc_text(PAGESRP0, CyzLogError) //It can be called at raised IRQL 
#pragma alloc_text(PAGESRP0, CyzMarkHardwareBroken)
#endif

static const PHYSICAL_ADDRESS CyzPhysicalZero = {0};


VOID
CyzKillAllReadsOrWrites(
    IN PDEVICE_OBJECT DeviceObject,
    IN PLIST_ENTRY QueueToClean,
    IN PIRP *CurrentOpIrp
    )
/*--------------------------------------------------------------------------
    CyzKillAllReadsOrWrites()
    
    Routine Description: This function is used to cancel all queued and
    the current irps for reads or for writes.

    Arguments:

    DeviceObject - A pointer to the serial device object.
    QueueToClean - A pointer to the queue which we're going to clean out.
    CurrentOpIrp - Pointer to a pointer to the current irp.

    Return Value: None.
--------------------------------------------------------------------------*/
{
    KIRQL cancelIrql;
    PDRIVER_CANCEL cancelRoutine;

    // Acquire cancel spin lock to prevent irps from moving around.
    IoAcquireCancelSpinLock(&cancelIrql);

    // Clean the list from back to front.

    while (!IsListEmpty(QueueToClean)) {
        PIRP currentLastIrp = CONTAINING_RECORD(QueueToClean->Blink,
                                  IRP,Tail.Overlay.ListEntry);

        RemoveEntryList(QueueToClean->Blink);
        cancelRoutine = currentLastIrp->CancelRoutine;
        currentLastIrp->CancelIrql = cancelIrql;
        currentLastIrp->CancelRoutine = NULL;
        currentLastIrp->Cancel = TRUE;

        cancelRoutine(DeviceObject,currentLastIrp);
        IoAcquireCancelSpinLock(&cancelIrql);
    }

    // The queue is clean.  Now go after the current if it's there.

    if (*CurrentOpIrp) {
        cancelRoutine = (*CurrentOpIrp)->CancelRoutine;
        (*CurrentOpIrp)->Cancel = TRUE;
	
        // If the current irp is not in a cancelable state
        // then it *will* try to enter one and the above
        // assignment will kill it.  If it already is in
        // a cancelable state then the following will kill it.

        if (cancelRoutine) {
            (*CurrentOpIrp)->CancelRoutine = NULL;
            (*CurrentOpIrp)->CancelIrql = cancelIrql;
	    
            // mark it as canceled and call the cancel routine for it
            cancelRoutine(DeviceObject,*CurrentOpIrp);
        } else {
            IoReleaseCancelSpinLock(cancelIrql);
        }
    } else {
        IoReleaseCancelSpinLock(cancelIrql);
    }
}

VOID
CyzGetNextIrp(
    IN PIRP *CurrentOpIrp,
    IN PLIST_ENTRY QueueToProcess,
    OUT PIRP *NextIrp,
    IN BOOLEAN CompleteCurrent,
    IN PCYZ_DEVICE_EXTENSION extension
    )
/*--------------------------------------------------------------------------
    CyzGetNextIrp()
    
    Routine Description: This function is used to make the head of the
    particular queue the current irp.  It also completes the what
    was the old current irp if desired.

    Arguments:

    CurrentOpIrp - Pointer to a pointer to the currently active
                   irp for the particular work list.  Note that
                   this item is not actually part of the list.
    QueueToProcess - The list to pull the new item off of.
    NextIrp - The next Irp to process.  Note that CurrentOpIrp
              will be set to this value under protection of the
              cancel spin lock.  However, if *NextIrp is NULL when
              this routine returns, it is not necessaryly true the
              what is pointed to by CurrentOpIrp will also be NULL.
              The reason for this is that if the queue is empty
              when we hold the cancel spin lock, a new irp may come
              in immediately after we release the lock.

    CompleteCurrent - If TRUE then this routine will complete the
                      irp pointed to by the pointer argument
                      CurrentOpIrp.

    Return Value: None.
--------------------------------------------------------------------------*/
{
    KIRQL oldIrql;
    CYZ_LOCKED_PAGED_CODE();

    IoAcquireCancelSpinLock(&oldIrql);
    CyzGetNextIrpLocked(CurrentOpIrp, QueueToProcess, NextIrp,
                        CompleteCurrent, extension, oldIrql);
    
    //TODO FANNY: CHECK IF REPLACING CODE THAT WAS HERE BY 
    //CyzGetNextIrpLocked MY FIX FOR THE BUG FOUND IN MODEM SHARE
    //WAS OVERWRITTEN.
}


VOID
CyzGetNextIrpLocked(
    IN PIRP *CurrentOpIrp,
    IN PLIST_ENTRY QueueToProcess,
    OUT PIRP *NextIrp,
    IN BOOLEAN CompleteCurrent,
    IN PCYZ_DEVICE_EXTENSION extension,
    IN KIRQL OldIrql
    )

/*++

Routine Description:

    This function is used to make the head of the particular
    queue the current irp.  It also completes the what
    was the old current irp if desired.  The difference between
    this and CyzGetNextIrp() is that for this we assume the caller
    holds the cancel spinlock and we should release it when we're done.

Arguments:

    CurrentOpIrp - Pointer to a pointer to the currently active
                   irp for the particular work list.  Note that
                   this item is not actually part of the list.

    QueueToProcess - The list to pull the new item off of.

    NextIrp - The next Irp to process.  Note that CurrentOpIrp
              will be set to this value under protection of the
              cancel spin lock.  However, if *NextIrp is NULL when
              this routine returns, it is not necessaryly true the
              what is pointed to by CurrentOpIrp will also be NULL.
              The reason for this is that if the queue is empty
              when we hold the cancel spin lock, a new irp may come
              in immediately after we release the lock.

    CompleteCurrent - If TRUE then this routine will complete the
                      irp pointed to by the pointer argument
                      CurrentOpIrp.

    OldIrql - IRQL which the cancel spinlock was acquired at and what we
              should restore it to.

Return Value:

    None.

--*/

{

    PIRP oldIrp;

    CYZ_LOCKED_PAGED_CODE();


    oldIrp = *CurrentOpIrp;

#if DBG
    if (oldIrp) {

        if (CompleteCurrent) {

            ASSERT(!oldIrp->CancelRoutine);

#if 0
            //FANNY_DEBUG
            if (IoGetCurrentIrpStackLocation(oldIrp)->MajorFunction == IRP_MJ_READ) {
                ULONG DbgBufferLength;

                DbgBufferLength = oldIrp->IoStatus.Information;
                //if (DbgBufferLength) {
                    CyzDump(CYZDIAG2, ("ReadComplete Port %d %d\n",
                                extension->PortIndex+1,
                                DbgBufferLength,
                                0));
                    DbgPrint("ReadComplete %d\n", DbgBufferLength);

                //}

            }
#endif

        }

    }
#endif

    //
    // Check to see if there is a new irp to start up.
    //

    if (!IsListEmpty(QueueToProcess)) {

        PLIST_ENTRY headOfList;

        headOfList = RemoveHeadList(QueueToProcess);

        *CurrentOpIrp = CONTAINING_RECORD(
                            headOfList,
                            IRP,
                            Tail.Overlay.ListEntry
                            );

        IoSetCancelRoutine(
            *CurrentOpIrp,
            NULL
            );

    } else {

        *CurrentOpIrp = NULL;
    }

    *NextIrp = *CurrentOpIrp;
    IoReleaseCancelSpinLock(OldIrql);

    if (CompleteCurrent) {

        if (oldIrp) {

            CyzCompleteRequest(extension, oldIrp, IO_SERIAL_INCREMENT);
        }
    }
}


VOID
CyzTryToCompleteCurrent(
    IN PCYZ_DEVICE_EXTENSION Extension,
    IN PKSYNCHRONIZE_ROUTINE SynchRoutine OPTIONAL,
    IN KIRQL IrqlForRelease,
    IN NTSTATUS StatusToUse,
    IN PIRP *CurrentOpIrp,
    IN PLIST_ENTRY QueueToProcess OPTIONAL,
    IN PKTIMER IntervalTimer OPTIONAL,
    IN PKTIMER TotalTimer OPTIONAL,
    IN PSERIAL_START_ROUTINE Starter OPTIONAL,
    IN PSERIAL_GET_NEXT_ROUTINE GetNextIrp OPTIONAL,
    IN LONG RefType
    )
/*--------------------------------------------------------------------------
    CyzTryToCompleteCurrent()
    
    Routine Description: This routine attempts to kill all of the reasons
    there are references on the current read/write.  If everything can be
    killed it will complete this read/write and try to start another.
    NOTE: This routine assumes that the cancel spinlock is being held.

    Arguments:

    Extension - Simply a pointer to the device extension.
    SynchRoutine - A routine that will synchronize with the isr
                   and attempt to remove the knowledge of the
                   current irp from the isr.  NOTE: This pointer
                   can be null.
    IrqlForRelease - This routine is called with the cancel spinlock held.
                     This is the irql that was current when the cancel
                     spinlock was acquired.
    StatusToUse - The irp's status field will be set to this value, if
                  this routine can complete the irp.

    Return Value: None.
--------------------------------------------------------------------------*/
{

    CYZ_LOCKED_PAGED_CODE();
   
    // We can decrement the reference to "remove" the fact
    // that the caller no longer will be accessing this irp.

    SERIAL_CLEAR_REFERENCE(*CurrentOpIrp,RefType);

    if (SynchRoutine) {	
	
        #ifdef POLL
        KIRQL pollIrql;		
		
        KeAcquireSpinLock(&Extension->PollLock,&pollIrql);
        SynchRoutine(Extension);
        KeReleaseSpinLock(&Extension->PollLock,pollIrql);
        #else
        KeSynchronizeExecution(Extension->Interrupt,SynchRoutine,Extension);
        #endif
    }

    // Try to run down all other references to this irp.
    CyzRundownIrpRefs(CurrentOpIrp,IntervalTimer,TotalTimer,Extension);

    // See if the ref count is zero after trying to kill everybody else.

    if (!SERIAL_REFERENCE_COUNT(*CurrentOpIrp)) {
        PIRP newIrp;

        // The ref count was zero so we should complete this request.
        // The following call will also cause the current irp to be
        // completed.

        (*CurrentOpIrp)->IoStatus.Status = StatusToUse;

        if (StatusToUse == STATUS_CANCELLED) {
            (*CurrentOpIrp)->IoStatus.Information = 0;
        }

        if (GetNextIrp) {
            IoReleaseCancelSpinLock(IrqlForRelease);
            GetNextIrp(CurrentOpIrp,QueueToProcess,&newIrp,TRUE
   			            ,Extension
                );

            if (newIrp) {
                Starter(Extension);

            }
        } else {
            PIRP oldIrp = *CurrentOpIrp;

#if 0
            //FANNY_DEBUG
            if (IoGetCurrentIrpStackLocation(oldIrp)->MajorFunction == IRP_MJ_READ) {
                ULONG DbgBufferLength;

                DbgBufferLength = oldIrp->IoStatus.Information;
                //if (DbgBufferLength) {
                    CyzDump(CYZDIAG2, ("ReadComplete Port %d %d\n",
                                Extension->PortIndex+1,
                                DbgBufferLength,
                                0));

                    DbgPrint("ReadComplete %d\n", DbgBufferLength);
                //}

            }
#endif


            // There was no get next routine.  We will simply complete
            // the irp.  We should make sure that we null out the
            // pointer to the pointer to this irp.

            *CurrentOpIrp = NULL;

            IoReleaseCancelSpinLock(IrqlForRelease);
            CyzCompleteRequest(Extension, oldIrp, IO_SERIAL_INCREMENT);
        }
    } else {
        IoReleaseCancelSpinLock(IrqlForRelease);
    }
}

VOID
CyzRundownIrpRefs(
    IN PIRP *CurrentOpIrp,
    IN PKTIMER IntervalTimer OPTIONAL,
    IN PKTIMER TotalTimer OPTIONAL,
    IN PCYZ_DEVICE_EXTENSION PDevExt
    )

/*++

Routine Description:

    This routine runs through the various items that *could*
    have a reference to the current read/write.  It try's to kill
    the reason.  If it does succeed in killing the reason it
    will decrement the reference count on the irp.

    NOTE: This routine assumes that it is called with the cancel
          spin lock held.

Arguments:

    CurrentOpIrp - Pointer to a pointer to current irp for the
                   particular operation.

    IntervalTimer - Pointer to the interval timer for the operation.
                    NOTE: This could be null.

    TotalTimer - Pointer to the total timer for the operation.
                 NOTE: This could be null.

    PDevExt - Pointer to device extension  

Return Value:

    None.

--*/
{

    CYZ_LOCKED_PAGED_CODE();

    //
    // This routine is called with the cancel spin lock held
    // so we know only one thread of execution can be in here
    // at one time.
    //

    //
    // First we see if there is still a cancel routine.  If
    // so then we can decrement the count by one.
    //

    if ((*CurrentOpIrp)->CancelRoutine) {

        SERIAL_CLEAR_REFERENCE(
            *CurrentOpIrp,
            SERIAL_REF_CANCEL
            );

        IoSetCancelRoutine(
            *CurrentOpIrp,
            NULL
            );

    }

    if (IntervalTimer) {

        //
        // Try to cancel the operations interval timer.  If the operation
        // returns true then the timer did have a reference to the
        // irp.  Since we've canceled this timer that reference is
        // no longer valid and we can decrement the reference count.
        //
        // If the cancel returns false then this means either of two things:
        //
        // a) The timer has already fired.
        //
        // b) There never was an interval timer.
        //
        // In the case of "b" there is no need to decrement the reference
        // count since the "timer" never had a reference to it.
        //
        // In the case of "a", then the timer itself will be coming
        // along and decrement it's reference.  Note that the caller
        // of this routine might actually be the this timer, but it
        // has already decremented the reference.
        //

        if (CyzCancelTimer(IntervalTimer, PDevExt)) {

            SERIAL_CLEAR_REFERENCE(
                *CurrentOpIrp,
                SERIAL_REF_INT_TIMER
                );

        }

    }

    if (TotalTimer) {

        //
        // Try to cancel the operations total timer.  If the operation
        // returns true then the timer did have a reference to the
        // irp.  Since we've canceled this timer that reference is
        // no longer valid and we can decrement the reference count.
        //
        // If the cancel returns false then this means either of two things:
        //
        // a) The timer has already fired.
        //
        // b) There never was an total timer.
        //
        // In the case of "b" there is no need to decrement the reference
        // count since the "timer" never had a reference to it.
        //
        // In the case of "a", then the timer itself will be coming
        // along and decrement it's reference.  Note that the caller
        // of this routine might actually be the this timer, but it
        // has already decremented the reference.
        //

        if (CyzCancelTimer(TotalTimer, PDevExt)) {

            SERIAL_CLEAR_REFERENCE(
                *CurrentOpIrp,
                SERIAL_REF_TOTAL_TIMER
                );

        }

    }

}

NTSTATUS
CyzStartOrQueue(
    IN PCYZ_DEVICE_EXTENSION Extension,
    IN PIRP Irp,
    IN PLIST_ENTRY QueueToExamine,
    IN PIRP *CurrentOpIrp,
    IN PSERIAL_START_ROUTINE Starter
    )
/*--------------------------------------------------------------------------
    CyzStartOrQueue()
    
    Routine Description: This routine either starts or queues requests to
    the driver.

    Arguments:

    Extension - Points to the serial device extension.
    Irp - The irp. The irp will be marked pending.
    QueueToExamine - The queue the irp will be placed on.
    CurrentOpIrp - Pointer to a pointer to the irp that is current
	for the queue.  The pointer pointed to will be set with to Irp if
	what CurrentOpIrp points to is NULL.
    Starter - The routine to call if the queue is empty.

    Return Value:

    This routine will return STATUS_PENDING if the queue is
    not empty.  Otherwise, it will return the status returned
    from the starter routine (or cancel, if the cancel bit is
    on in the irp).
--------------------------------------------------------------------------*/
{
    KIRQL oldIrql;

    CYZ_LOCKED_PAGED_CODE();

    IoAcquireCancelSpinLock(&oldIrql);

    // If this is a write irp then take the amount of characters
    // to write and add it to the count of characters to write.
    
    if (IoGetCurrentIrpStackLocation(Irp)->MajorFunction == IRP_MJ_WRITE) {
        Extension->TotalCharsQueued += IoGetCurrentIrpStackLocation(Irp)->
						Parameters.Write.Length;
    } else {
    	if ((IoGetCurrentIrpStackLocation(Irp)->MajorFunction
                == IRP_MJ_DEVICE_CONTROL) &&
               ((IoGetCurrentIrpStackLocation(Irp)
                 ->Parameters.DeviceIoControl.IoControlCode ==
                 IOCTL_SERIAL_IMMEDIATE_CHAR) ||
                (IoGetCurrentIrpStackLocation(Irp)
                 ->Parameters.DeviceIoControl.IoControlCode ==
                 IOCTL_SERIAL_XOFF_COUNTER))) {

	    Extension->TotalCharsQueued++;
    	}
    }

    if ((IsListEmpty(QueueToExamine)) && !(*CurrentOpIrp)) {
        // no current operation.  Mark this one as current and start it up.
        *CurrentOpIrp = Irp;
        IoReleaseCancelSpinLock(oldIrql);
        return Starter(Extension);
    } else {
        // We don't know how long the irp will be in the queue.
        if (Irp->Cancel) {
            PIO_STACK_LOCATION irpSp = IoGetCurrentIrpStackLocation(Irp);
            IoReleaseCancelSpinLock(oldIrql);
            if (irpSp->Parameters.DeviceIoControl.IoControlCode ==
                   IOCTL_SERIAL_SET_QUEUE_SIZE) {
               //
               // We shoved the pointer to the memory into the
               // the type 3 buffer pointer which we KNOW we
               // never use.
               //

               ASSERT(irpSp->Parameters.DeviceIoControl.Type3InputBuffer);

               ExFreePool(irpSp->Parameters.DeviceIoControl.Type3InputBuffer);

               irpSp->Parameters.DeviceIoControl.Type3InputBuffer = NULL;
            }

            Irp->IoStatus.Status = STATUS_CANCELLED;

            CyzCompleteRequest(Extension, Irp, 0);

            return STATUS_CANCELLED;
        } else {
            Irp->IoStatus.Status = STATUS_PENDING;
            IoMarkIrpPending(Irp);
            InsertTailList(QueueToExamine,&Irp->Tail.Overlay.ListEntry);
            IoSetCancelRoutine(Irp,CyzCancelQueued);
            IoReleaseCancelSpinLock(oldIrql);
            return STATUS_PENDING;
        }
    }
}

VOID
CyzCancelQueued(
    PDEVICE_OBJECT DeviceObject,
    PIRP Irp
    )
/*--------------------------------------------------------------------------
    CyzCancelQueued()
    
    Routine Description: This routine is used to cancel Irps that currently
    reside on a queue.

    Arguments:

    DeviceObject - Pointer to the device object for this device

    Irp - Pointer to the IRP to be canceled.

    Return Value: None.
--------------------------------------------------------------------------*/
{
    PCYZ_DEVICE_EXTENSION extension = DeviceObject->DeviceExtension;
    PIO_STACK_LOCATION irpSp = IoGetCurrentIrpStackLocation(Irp);

    CYZ_LOCKED_PAGED_CODE();

    Irp->IoStatus.Status = STATUS_CANCELLED;
    Irp->IoStatus.Information = 0;

    RemoveEntryList(&Irp->Tail.Overlay.ListEntry);


    if (irpSp->MajorFunction == IRP_MJ_WRITE) {
    // write.  subtract from the count of characters to write.
        extension->TotalCharsQueued -= irpSp->Parameters.Write.Length;
    } else if (irpSp->MajorFunction == IRP_MJ_DEVICE_CONTROL) {
        if ((irpSp->Parameters.DeviceIoControl.IoControlCode ==
             IOCTL_SERIAL_IMMEDIATE_CHAR) ||
            (irpSp->Parameters.DeviceIoControl.IoControlCode ==
             IOCTL_SERIAL_XOFF_COUNTER)) {

	    // immediate. Decrement the count of chars queued.
            extension->TotalCharsQueued--;
        } else if (irpSp->Parameters.DeviceIoControl.IoControlCode ==
                   IOCTL_SERIAL_SET_QUEUE_SIZE) {

	    // resize. Deallocate the pool passed "resizing" routine.
            // We shoved the pointer to the memory into the
            // the type 3 buffer pointer which we KNOW we never use.

            ASSERT(irpSp->Parameters.DeviceIoControl.Type3InputBuffer);
            ExFreePool(irpSp->Parameters.DeviceIoControl.Type3InputBuffer);
            irpSp->Parameters.DeviceIoControl.Type3InputBuffer = NULL;
        }
    }
    IoReleaseCancelSpinLock(Irp->CancelIrql);

    CyzCompleteRequest(extension, Irp, IO_SERIAL_INCREMENT);
}

NTSTATUS
CyzCompleteIfError(
    PDEVICE_OBJECT DeviceObject,
    PIRP Irp
    )
/*--------------------------------------------------------------------------
    CyzCompleteIfError()
    
    Routine Description: If the current irp is not an
    IOCTL_SERIAL_GET_COMMSTATUS request and there is an error and the
    application requested abort on errors, then cancel the irp.

    Arguments:

    DeviceObject - Pointer to the device object for this device
    Irp - Pointer to the IRP to test.

    Return Value:

    STATUS_SUCCESS or STATUS_CANCELLED.
--------------------------------------------------------------------------*/
{
    PCYZ_DEVICE_EXTENSION extension = DeviceObject->DeviceExtension;
    NTSTATUS status = STATUS_SUCCESS;

    CYZ_LOCKED_PAGED_CODE();

    if ((extension->HandFlow.ControlHandShake &
         SERIAL_ERROR_ABORT) && extension->ErrorWord) {

        PIO_STACK_LOCATION irpSp = IoGetCurrentIrpStackLocation(Irp);

        // There is a current error in the driver.  No requests should
        // come through except for the GET_COMMSTATUS.

        if ((irpSp->MajorFunction != IRP_MJ_DEVICE_CONTROL) ||
            (irpSp->Parameters.DeviceIoControl.IoControlCode !=
             IOCTL_SERIAL_GET_COMMSTATUS)) {

            status = STATUS_CANCELLED;
            Irp->IoStatus.Status = STATUS_CANCELLED;
            Irp->IoStatus.Information = 0;

            CyzCompleteRequest(extension, Irp, 0);
        }
    }
    return status;
}

VOID
CyzFilterCancelQueued(IN PDEVICE_OBJECT PDevObj, IN PIRP PIrp)
/*++

Routine Description:

    This routine will be used cancel irps on the stalled queue.
    
Arguments:

    PDevObj - Pointer to the device object.
    
    PIrp - Pointer to the Irp to cancel

Return Value:

    None.

--*/
{
   PCYZ_DEVICE_EXTENSION pDevExt = PDevObj->DeviceExtension;
   PIO_STACK_LOCATION pIrpSp = IoGetCurrentIrpStackLocation(PIrp);

   PIrp->IoStatus.Status = STATUS_CANCELLED;
   PIrp->IoStatus.Information = 0;

   RemoveEntryList(&PIrp->Tail.Overlay.ListEntry);

   IoReleaseCancelSpinLock(PIrp->CancelIrql);
}


VOID
CyzKillAllStalled(IN PDEVICE_OBJECT PDevObj)
{
   KIRQL cancelIrql;
   PDRIVER_CANCEL cancelRoutine;
   PCYZ_DEVICE_EXTENSION pDevExt = PDevObj->DeviceExtension;

   IoAcquireCancelSpinLock(&cancelIrql);

   while (!IsListEmpty(&pDevExt->StalledIrpQueue)) {

      PIRP currentLastIrp = CONTAINING_RECORD(pDevExt->StalledIrpQueue.Blink,
                                              IRP, Tail.Overlay.ListEntry);

      RemoveEntryList(pDevExt->StalledIrpQueue.Blink);

      cancelRoutine = currentLastIrp->CancelRoutine;
      currentLastIrp->CancelIrql = cancelIrql;
      currentLastIrp->CancelRoutine = NULL;
      currentLastIrp->Cancel = TRUE;

      cancelRoutine(PDevObj, currentLastIrp);

      IoAcquireCancelSpinLock(&cancelIrql);
   }

   IoReleaseCancelSpinLock(cancelIrql);
}

NTSTATUS
CyzFilterIrps(IN PIRP PIrp, IN PCYZ_DEVICE_EXTENSION PDevExt)
/*++

Routine Description:

    This routine will be used to approve irps for processing.
    If an irp is approved, success will be returned.  If not,
    the irp will be queued or rejected outright.  The IoStatus struct
    and return value will appropriately reflect the actions taken.
    
Arguments:

    PIrp - Pointer to the Irp to cancel
    
    PDevExt - Pointer to the device extension

Return Value:

    None.

--*/
{
   PIO_STACK_LOCATION pIrpStack;
   KIRQL oldIrqlFlags;

   pIrpStack = IoGetCurrentIrpStackLocation(PIrp);

   KeAcquireSpinLock(&PDevExt->FlagsLock, &oldIrqlFlags);

   if ((PDevExt->DevicePNPAccept == CYZ_PNPACCEPT_OK)
       && ((PDevExt->Flags & CYZ_FLAGS_BROKENHW) == 0)) {
      KeReleaseSpinLock(&PDevExt->FlagsLock, oldIrqlFlags);
      return STATUS_SUCCESS;
   }

   if ((PDevExt->DevicePNPAccept & CYZ_PNPACCEPT_REMOVING)
       || (PDevExt->Flags & CYZ_FLAGS_BROKENHW)
       || (PDevExt->DevicePNPAccept & CYZ_PNPACCEPT_SURPRISE_REMOVING)) {

      KeReleaseSpinLock(&PDevExt->FlagsLock, oldIrqlFlags);

      //
      // Accept all PNP IRP's -- we assume PNP can synchronize itself
      //

      if (pIrpStack->MajorFunction == IRP_MJ_PNP) {
         return STATUS_SUCCESS;
      }

      PIrp->IoStatus.Status = STATUS_DELETE_PENDING;
      return STATUS_DELETE_PENDING;
   }

   if (PDevExt->DevicePNPAccept & CYZ_PNPACCEPT_STOPPING) {
       KIRQL oldIrql;

       KeReleaseSpinLock(&PDevExt->FlagsLock, oldIrqlFlags);


      //
      // Accept all PNP IRP's -- we assume PNP can synchronize itself
      //

      if (pIrpStack->MajorFunction == IRP_MJ_PNP) {
         return STATUS_SUCCESS;
      }

      IoAcquireCancelSpinLock(&oldIrql);

      if (PIrp->Cancel) {
         IoReleaseCancelSpinLock(oldIrql);
         PIrp->IoStatus.Status = STATUS_CANCELLED;
         return STATUS_CANCELLED;
      } else {
         //
         // Mark the Irp as pending
         //

         PIrp->IoStatus.Status = STATUS_PENDING;
         IoMarkIrpPending(PIrp);

         //
         // Queue up the IRP
         //

         InsertTailList(&PDevExt->StalledIrpQueue,
                        &PIrp->Tail.Overlay.ListEntry);

         IoSetCancelRoutine(PIrp, CyzFilterCancelQueued);
         IoReleaseCancelSpinLock(oldIrql);
         return STATUS_PENDING;
      }
   }

   KeReleaseSpinLock(&PDevExt->FlagsLock, oldIrqlFlags);

   return STATUS_SUCCESS;
}

VOID
CyzUnstallIrps(IN PCYZ_DEVICE_EXTENSION PDevExt)
/*++

Routine Description:

    This routine will be used to restart irps temporarily stalled on
    the stall queue due to a stop or some such nonsense.
    
Arguments:

    PDevExt - Pointer to the device extension

Return Value:

    None.

--*/
{
   PLIST_ENTRY pIrpLink;
   PIRP pIrp;
   PIO_STACK_LOCATION pIrpStack;
   PDEVICE_OBJECT pDevObj;
   PDRIVER_OBJECT pDrvObj;
   KIRQL oldIrql;

   CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyzUnstallIrps(%X)\n", PDevExt);
   IoAcquireCancelSpinLock(&oldIrql);

   pIrpLink = PDevExt->StalledIrpQueue.Flink;

   while (pIrpLink != &PDevExt->StalledIrpQueue) {
      pIrp = CONTAINING_RECORD(pIrpLink, IRP, Tail.Overlay.ListEntry);
      RemoveEntryList(&pIrp->Tail.Overlay.ListEntry);

      pIrpStack = IoGetCurrentIrpStackLocation(pIrp);
      pDevObj = pIrpStack->DeviceObject;
      pDrvObj = pDevObj->DriverObject;
      IoSetCancelRoutine(pIrp, NULL);
      IoReleaseCancelSpinLock(oldIrql);

      CyzDbgPrintEx(CYZPNPPOWER, "Unstalling Irp 0x%x with 0x%x\n",
                                     pIrp, pIrpStack->MajorFunction);

      pDrvObj->MajorFunction[pIrpStack->MajorFunction](pDevObj, pIrp);

      IoAcquireCancelSpinLock(&oldIrql);
      pIrpLink = PDevExt->StalledIrpQueue.Flink;
   }

   IoReleaseCancelSpinLock(oldIrql);

   CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyzUnstallIrps\n");
}

NTSTATUS
CyzIRPPrologue(IN PIRP PIrp, IN PCYZ_DEVICE_EXTENSION PDevExt)
/*++

Routine Description:

   This function must be called at any IRP dispatch entry point.  It,
   with CyzIRPEpilogue(), keeps track of all pending IRP's for the given
   PDevObj.
   
Arguments:

   PDevObj - Pointer to the device object we are tracking pending IRP's for.

Return Value:

    Tentative status of the Irp.

--*/
{
   InterlockedIncrement(&PDevExt->PendingIRPCnt);

   return CyzFilterIrps(PIrp, PDevExt);
}

VOID
CyzIRPEpilogue(IN PCYZ_DEVICE_EXTENSION PDevExt)
/*++

Routine Description:

   This function must be called at any IRP dispatch entry point.  It,
   with CyzIRPPrologue(), keeps track of all pending IRP's for the given
   PDevObj.
   
Arguments:

   PDevObj - Pointer to the device object we are tracking pending IRP's for.

Return Value:

   None.

--*/
{
   LONG pendingCnt;

   pendingCnt = InterlockedDecrement(&PDevExt->PendingIRPCnt);

   ASSERT(pendingCnt >= 0);

   if (pendingCnt == 0) {
      KeSetEvent(&PDevExt->PendingIRPEvent, IO_NO_INCREMENT, FALSE);
   }
}

BOOLEAN
CyzInsertQueueDpc(IN PRKDPC PDpc, IN PVOID Sarg1, IN PVOID Sarg2,
                  IN PCYZ_DEVICE_EXTENSION PDevExt)
/*++

Routine Description:

   This function must be called to queue DPC's for the serial driver.
   
Arguments:

   PDpc thru Sarg2  - Standard args to KeInsertQueueDpc()
   
   PDevExt - Pointer to the device extension for the device that needs to
             queue a DPC

Return Value:

   Kicks up return value from KeInsertQueueDpc()

--*/
{
   BOOLEAN queued;

   InterlockedIncrement(&PDevExt->DpcCount);
   LOGENTRY(LOG_CNT, 'DpI1', PDpc, PDevExt->DpcCount, 0);   // Added in build 2128

   queued = KeInsertQueueDpc(PDpc, Sarg1, Sarg2);

   if (!queued) {
      ULONG pendingCnt;

      pendingCnt = InterlockedDecrement(&PDevExt->DpcCount);
//      LOGENTRY(LOG_CNT, 'DpD1', PDpc, PDevExt->DpcCount, 0);  Added in build 2128

      if (pendingCnt == 0) {
         KeSetEvent(&PDevExt->PendingDpcEvent, IO_NO_INCREMENT, FALSE);
         LOGENTRY(LOG_CNT, 'DpF1', PDpc, PDevExt->DpcCount, 0); // Added in build 2128
      }
   }

#if 0 // DBG
   if (queued) {
      int i;

      for (i = 0; i < MAX_DPC_QUEUE; i++) {
                     if (PDevExt->DpcQueued[i].Dpc == PDpc) {
                        PDevExt->DpcQueued[i].QueuedCount++;
                        break;
                     }
      }

      ASSERT(i < MAX_DPC_QUEUE);
   }
#endif

   return queued;
}


BOOLEAN
CyzSetTimer(IN PKTIMER Timer, IN LARGE_INTEGER DueTime,
            IN PKDPC Dpc OPTIONAL, IN PCYZ_DEVICE_EXTENSION PDevExt)
/*++

Routine Description:

   This function must be called to set timers for the serial driver.
   
Arguments:

   Timer - pointer to timer dispatcher object
   
   DueTime - time at which the timer should expire
   
   Dpc - option Dpc
   
   PDevExt - Pointer to the device extension for the device that needs to
             set a timer

Return Value:

   Kicks up return value from KeSetTimer()

--*/
{
   BOOLEAN set;

   InterlockedIncrement(&PDevExt->DpcCount);
   LOGENTRY(LOG_CNT, 'DpI2', Dpc, PDevExt->DpcCount, 0);    // Added in build 2128

   set = KeSetTimer(Timer, DueTime, Dpc);

   if (set) {
      InterlockedDecrement(&PDevExt->DpcCount);
//      LOGENTRY(LOG_CNT, 'DpD2', Dpc, PDevExt->DpcCount, 0);   // Added in build 2128
   }

#if 0 // DBG
   if (set) {
      int i;

      for (i = 0; i < MAX_DPC_QUEUE; i++) {
                     if (PDevExt->DpcQueued[i].Dpc == Dpc) {
                        PDevExt->DpcQueued[i].QueuedCount++;
                        break;
                     }
      }

      ASSERT(i < MAX_DPC_QUEUE);
   }
#endif

   return set;
}


BOOLEAN
CyzCancelTimer(IN PKTIMER Timer, IN PCYZ_DEVICE_EXTENSION PDevExt)
/*++

Routine Description:

   This function must be called to cancel timers for the serial driver.
   
Arguments:

   Timer - pointer to timer dispatcher object
   
   PDevExt - Pointer to the device extension for the device that needs to
             set a timer

Return Value:

  True if timer was cancelled

--*/
{
   BOOLEAN cancelled;

   cancelled = KeCancelTimer(Timer);

   if (cancelled) {
      CyzDpcEpilogue(PDevExt, Timer->Dpc);
   }

   return cancelled;
}


VOID
CyzDpcEpilogue(IN PCYZ_DEVICE_EXTENSION PDevExt, PKDPC PDpc)
/*++

Routine Description:

   This function must be called at the end of every dpc function.
   
Arguments:

   PDevObj - Pointer to the device object we are tracking dpc's for.

Return Value:

   None.

--*/
{
   LONG pendingCnt;
#if 1 // !DBG
   UNREFERENCED_PARAMETER(PDpc);
#endif

   pendingCnt = InterlockedDecrement(&PDevExt->DpcCount);
//   LOGENTRY(LOG_CNT, 'DpD3', PDpc, PDevExt->DpcCount, 0); Added in build 2128

   ASSERT(pendingCnt >= 0);

#if 0 //DBG
{
      int i;

      for (i = 0; i < MAX_DPC_QUEUE; i++) {
                     if (PDevExt->DpcQueued[i].Dpc == PDpc) {
                        PDevExt->DpcQueued[i].FlushCount++;

                        ASSERT(PDevExt->DpcQueued[i].QueuedCount >=
                               PDevExt->DpcQueued[i].FlushCount);
                        break;
                     }
      }

      ASSERT(i < MAX_DPC_QUEUE);
   }
#endif

   if (pendingCnt == 0) {
      KeSetEvent(&PDevExt->PendingDpcEvent, IO_NO_INCREMENT, FALSE);
      LOGENTRY(LOG_CNT, 'DpF2', PDpc, PDevExt->DpcCount, 0);    // Added in build 2128
   }
}



VOID
CyzUnlockPages(IN PKDPC PDpc, IN PVOID PDeferredContext,
               IN PVOID PSysContext1, IN PVOID PSysContext2)
/*++

Routine Description:

   This function is a DPC routine queue from the ISR if he released the
   last lock on pending DPC's.
   
Arguments:

   PDpdc, PSysContext1, PSysContext2 -- not used
   
   PDeferredContext -- Really the device extension

Return Value:

   None.

--*/
{
   PCYZ_DEVICE_EXTENSION pDevExt
      = (PCYZ_DEVICE_EXTENSION)PDeferredContext;

   UNREFERENCED_PARAMETER(PDpc);
   UNREFERENCED_PARAMETER(PSysContext1);
   UNREFERENCED_PARAMETER(PSysContext2);

   KeSetEvent(&pDevExt->PendingDpcEvent, IO_NO_INCREMENT, FALSE);
}


NTSTATUS
CyzIoCallDriver(PCYZ_DEVICE_EXTENSION PDevExt, PDEVICE_OBJECT PDevObj,
                PIRP PIrp)
/*++

Routine Description:

   This function must be called instead of IoCallDriver.  It automatically
   updates Irp tracking for PDevObj.
   
Arguments:
   PDevExt - Device extension attached to PDevObj
   
   PDevObj - Pointer to the device object we are tracking pending IRP's for.
   
   PIrp - Pointer to the Irp we are passing to the next driver.

Return Value:

   None.

--*/
{
   NTSTATUS status;

   status = IoCallDriver(PDevObj, PIrp);
   CyzIRPEpilogue(PDevExt);
   return status;
}



NTSTATUS
CyzPoCallDriver(PCYZ_DEVICE_EXTENSION PDevExt, PDEVICE_OBJECT PDevObj,
                PIRP PIrp)
/*++

Routine Description:

   This function must be called instead of PoCallDriver.  It automatically
   updates Irp tracking for PDevObj.
   
Arguments:
   PDevExt - Device extension attached to PDevObj
   
   PDevObj - Pointer to the device object we are tracking pending IRP's for.
   
   PIrp - Pointer to the Irp we are passing to the next driver.

Return Value:

   None.

--*/
{
   NTSTATUS status;

   status = PoCallDriver(PDevObj, PIrp);
   CyzIRPEpilogue(PDevExt);
   return status;
}


VOID
CyzLogError(
              IN PDRIVER_OBJECT DriverObject,
              IN PDEVICE_OBJECT DeviceObject OPTIONAL,
              IN PHYSICAL_ADDRESS P1,
              IN PHYSICAL_ADDRESS P2,
              IN ULONG SequenceNumber,
              IN UCHAR MajorFunctionCode,
              IN UCHAR RetryCount,
              IN ULONG UniqueErrorValue,
              IN NTSTATUS FinalStatus,
              IN NTSTATUS SpecificIOStatus,
              IN ULONG LengthOfInsert1,
              IN PWCHAR Insert1,
              IN ULONG LengthOfInsert2,
              IN PWCHAR Insert2
              )

/*++

Routine Description:

    This routine allocates an error log entry, copies the supplied data
    to it, and requests that it be written to the error log file.

Arguments:

    DriverObject - A pointer to the driver object for the device.

    DeviceObject - A pointer to the device object associated with the
    device that had the error, early in initialization, one may not
    yet exist.

    P1,P2 - If phyical addresses for the controller ports involved
    with the error are available, put them through as dump data.

    SequenceNumber - A ulong value that is unique to an IRP over the
    life of the irp in this driver - 0 generally means an error not
    associated with an irp.

    MajorFunctionCode - If there is an error associated with the irp,
    this is the major function code of that irp.

    RetryCount - The number of times a particular operation has been
    retried.

    UniqueErrorValue - A unique long word that identifies the particular
    call to this function.

    FinalStatus - The final status given to the irp that was associated
    with this error.  If this log entry is being made during one of
    the retries this value will be STATUS_SUCCESS.

    SpecificIOStatus - The IO status for a particular error.

    LengthOfInsert1 - The length in bytes (including the terminating NULL)
                      of the first insertion string.

    Insert1 - The first insertion string.

    LengthOfInsert2 - The length in bytes (including the terminating NULL)
                      of the second insertion string.  NOTE, there must
                      be a first insertion string for their to be
                      a second insertion string.

    Insert2 - The second insertion string.

Return Value:

    None.

--*/

{
   PIO_ERROR_LOG_PACKET errorLogEntry;

   PVOID objectToUse;
   SHORT dumpToAllocate = 0;
   PUCHAR ptrToFirstInsert;
   PUCHAR ptrToSecondInsert;

   //PAGED_CODE(); It can be called at raised IRQL.

   if (Insert1 == NULL) {
      LengthOfInsert1 = 0;
   }

   if (Insert2 == NULL) {
      LengthOfInsert2 = 0;
   }


   if (ARGUMENT_PRESENT(DeviceObject)) {

      objectToUse = DeviceObject;

   } else {

      objectToUse = DriverObject;

   }

   if (CyzMemCompare(
                       P1,
                       (ULONG)1,
                       CyzPhysicalZero,
                       (ULONG)1
                       ) != AddressesAreEqual) {

      dumpToAllocate = (SHORT)sizeof(PHYSICAL_ADDRESS);

   }

   if (CyzMemCompare(
                       P2,
                       (ULONG)1,
                       CyzPhysicalZero,
                       (ULONG)1
                       ) != AddressesAreEqual) {

      dumpToAllocate += (SHORT)sizeof(PHYSICAL_ADDRESS);

   }

   errorLogEntry = IoAllocateErrorLogEntry(
                                          objectToUse,
                                          (UCHAR)(sizeof(IO_ERROR_LOG_PACKET) +
                                                  dumpToAllocate
                                                  + LengthOfInsert1 +
                                                  LengthOfInsert2)
                                          );

   if ( errorLogEntry != NULL ) {

      errorLogEntry->ErrorCode = SpecificIOStatus;
      errorLogEntry->SequenceNumber = SequenceNumber;
      errorLogEntry->MajorFunctionCode = MajorFunctionCode;
      errorLogEntry->RetryCount = RetryCount;
      errorLogEntry->UniqueErrorValue = UniqueErrorValue;
      errorLogEntry->FinalStatus = FinalStatus;
      errorLogEntry->DumpDataSize = dumpToAllocate;

      if (dumpToAllocate) {

         RtlCopyMemory(
                      &errorLogEntry->DumpData[0],
                      &P1,
                      sizeof(PHYSICAL_ADDRESS)
                      );

         if (dumpToAllocate > sizeof(PHYSICAL_ADDRESS)) {

            RtlCopyMemory(
                         ((PUCHAR)&errorLogEntry->DumpData[0])
                         +sizeof(PHYSICAL_ADDRESS),
                         &P2,
                         sizeof(PHYSICAL_ADDRESS)
                         );

            ptrToFirstInsert =
            ((PUCHAR)&errorLogEntry->DumpData[0])+(2*sizeof(PHYSICAL_ADDRESS));

         } else {

            ptrToFirstInsert =
            ((PUCHAR)&errorLogEntry->DumpData[0])+sizeof(PHYSICAL_ADDRESS);


         }

      } else {

         ptrToFirstInsert = (PUCHAR)&errorLogEntry->DumpData[0];

      }

      ptrToSecondInsert = ptrToFirstInsert + LengthOfInsert1;

      if (LengthOfInsert1) {

         errorLogEntry->NumberOfStrings = 1;
         errorLogEntry->StringOffset = (USHORT)(ptrToFirstInsert -
                                                (PUCHAR)errorLogEntry);
         RtlCopyMemory(
                      ptrToFirstInsert,
                      Insert1,
                      LengthOfInsert1
                      );

         if (LengthOfInsert2) {

            errorLogEntry->NumberOfStrings = 2;
            RtlCopyMemory(
                         ptrToSecondInsert,
                         Insert2,
                         LengthOfInsert2
                         );

         }

      }

      IoWriteErrorLogEntry(errorLogEntry);

   }

}

VOID
CyzMarkHardwareBroken(IN PCYZ_DEVICE_EXTENSION PDevExt)
/*++

Routine Description:

   Marks a UART as broken.  This causes the driver stack to stop accepting
   requests and eventually be removed.
   
Arguments:
   PDevExt - Device extension attached to PDevObj
   
Return Value:

   None.

--*/
{
   PAGED_CODE();

   //
   // Mark as damaged goods
   //

   CyzSetFlags(PDevExt, CYZ_FLAGS_BROKENHW);

   //
   // Write a log entry
   //

   CyzLogError(PDevExt->DriverObject, NULL, CyzPhysicalZero,
                  CyzPhysicalZero, 0, 0, 0, PDevExt->PortIndex+1, STATUS_SUCCESS,
                  CYZ_HARDWARE_FAILURE, PDevExt->DeviceName.Length
                  + sizeof(WCHAR), PDevExt->DeviceName.Buffer, 0, NULL);

   //
   // Invalidate the device
   //

   IoInvalidateDeviceState(PDevExt->Pdo);
}

VOID
CyzSetDeviceFlags(IN PCYZ_DEVICE_EXTENSION PDevExt, OUT PULONG PFlags, 
                  IN ULONG Value, IN BOOLEAN Set)
/*++

Routine Description:

   Sets flags in a value protected by the flags spinlock.  This is used
   to set values that would stop IRP's from being accepted.
   
Arguments:
   PDevExt - Device extension attached to PDevObj
   
   PFlags - Pointer to the flags variable that needs changing
   
   Value - Value to modify flags variable with
   
   Set - TRUE if |= , FALSE if &=
   
Return Value:

   None.

--*/
{
   KIRQL oldIrql;

   KeAcquireSpinLock(&PDevExt->FlagsLock, &oldIrql);

   if (Set) {
      *PFlags |= Value;
   } else {
      *PFlags &= ~Value;
   }

   KeReleaseSpinLock(&PDevExt->FlagsLock, oldIrql);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyzport\cyzqset.c ===
/*--------------------------------------------------------------------------
*
*   Copyright (C) Cyclades Corporation, 1997-2001.
*   All rights reserved.
*
*   Cyclades-Z Port Driver
*	
*   This file:      cyzqset.c
*
*   Description:    This module contains the code related to query/set
*                   file operations in the Cyclades-Z Port driver.
*
*   Notes:          This code supports Windows 2000 and Windows XP,
*                   x86 and IA64 processors.
*
*   Complies with Cyclades SW Coding Standard rev 1.3.
*
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*   Change History
*
*--------------------------------------------------------------------------
*
*
*--------------------------------------------------------------------------
*/


#include "precomp.h"


#ifdef ALLOC_PRAGMA
#pragma alloc_text(PAGESRP0,CyzQueryInformationFile)
#pragma alloc_text(PAGESRP0,CyzSetInformationFile)
#endif


NTSTATUS
CyzQueryInformationFile(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    )
/*--------------------------------------------------------------------------
    CyzQueryInformationFile()
    
    Routine Description: This routine is used to query the end of file
    information on the opened serial port. Any other file information
    request is retured with an invalid parameter.
    This routine always returns an end of file of 0.

    Arguments:

    DeviceObject - Pointer to the device object for this device
    Irp - Pointer to the IRP for the current request

    Return Value: The function value is the final status of the call
--------------------------------------------------------------------------*/
{
    NTSTATUS Status;
    PIO_STACK_LOCATION IrpSp;	// current stack location
    
    NTSTATUS status;

    UNREFERENCED_PARAMETER(DeviceObject);

    PAGED_CODE();

    if ((status = CyzIRPPrologue(Irp,
                                 (PCYZ_DEVICE_EXTENSION)DeviceObject->
                                 DeviceExtension)) != STATUS_SUCCESS) {
      if (status != STATUS_PENDING) {
         CyzCompleteRequest((PCYZ_DEVICE_EXTENSION)DeviceObject->
                            DeviceExtension, Irp, IO_NO_INCREMENT);
      }
      return status;
    }

    CyzDbgPrintEx(CYZIRPPATH, "Dispatch entry for: %x\n", Irp);

    if (CyzCompleteIfError(DeviceObject, Irp) != STATUS_SUCCESS) {

        return STATUS_CANCELLED;
    }
    
    IrpSp = IoGetCurrentIrpStackLocation(Irp);
    Irp->IoStatus.Information = 0L;
    Status = STATUS_SUCCESS;
    if (IrpSp->Parameters.QueryFile.FileInformationClass ==
        FileStandardInformation) {

        PFILE_STANDARD_INFORMATION Buf = Irp->AssociatedIrp.SystemBuffer;

        Buf->AllocationSize.QuadPart = 0;
        Buf->EndOfFile = Buf->AllocationSize;
        Buf->NumberOfLinks = 0;
        Buf->DeletePending = FALSE;
        Buf->Directory = FALSE;
        Irp->IoStatus.Information = sizeof(FILE_STANDARD_INFORMATION);

    } else if (IrpSp->Parameters.QueryFile.FileInformationClass ==
               FilePositionInformation) {

        ((PFILE_POSITION_INFORMATION)Irp->AssociatedIrp.SystemBuffer)->
            CurrentByteOffset.QuadPart = 0;
        Irp->IoStatus.Information = sizeof(FILE_POSITION_INFORMATION);

    } else {
        Status = STATUS_INVALID_PARAMETER;
        Irp->IoStatus.Status = STATUS_INVALID_PARAMETER;
    }

    CyzCompleteRequest((PCYZ_DEVICE_EXTENSION)DeviceObject->
                          DeviceExtension, Irp, 0);
    return Status;
}

NTSTATUS
CyzSetInformationFile(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    )
/*--------------------------------------------------------------------------
    CyzSetInformationFile()
    
    Routine Description: This routine is used to set the end of file
    information on the opened serial port. Any other file information
    request is retured with an invalid parameter.

    This routine always ignores the actual end of file since
    the query information code always returns an end of file of 0.

    Arguments:

    DeviceObject - Pointer to the device object for this device
    Irp - Pointer to the IRP for the current request

    Return Value: The function value is the final status of the call
--------------------------------------------------------------------------*/
{
    NTSTATUS Status;
    
    UNREFERENCED_PARAMETER(DeviceObject);

    PAGED_CODE();

    if ((Status = CyzIRPPrologue(Irp,
                                 (PCYZ_DEVICE_EXTENSION)DeviceObject->
                                 DeviceExtension)) != STATUS_SUCCESS) {
      if(Status != STATUS_PENDING) {
         CyzCompleteRequest((PCYZ_DEVICE_EXTENSION)DeviceObject->
                            DeviceExtension, Irp, IO_NO_INCREMENT);
      }
      return Status;
   }

    CyzDbgPrintEx(CYZIRPPATH, "Dispatch entry for: %x\n", Irp);

    if (CyzCompleteIfError(DeviceObject, Irp) != STATUS_SUCCESS) {

        return STATUS_CANCELLED;
    }
    
    Irp->IoStatus.Information = 0L;
    if ((IoGetCurrentIrpStackLocation(Irp)->
            Parameters.SetFile.FileInformationClass ==
         FileEndOfFileInformation) ||
        (IoGetCurrentIrpStackLocation(Irp)->
            Parameters.SetFile.FileInformationClass ==
         FileAllocationInformation)) {

        Status = STATUS_SUCCESS;
    } else {
        Status = STATUS_INVALID_PARAMETER;
    }

    Irp->IoStatus.Status = Status;

    CyzCompleteRequest((PCYZ_DEVICE_EXTENSION)DeviceObject->
                        DeviceExtension, Irp, 0);

    return Status;
}


=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyzport\cyzpurge.c ===
/*--------------------------------------------------------------------------
*
*   Copyright (C) Cyclades Corporation, 1997-2001.
*   All rights reserved.
*
*   Cyclades-Z Port Driver
*	
*   This file:      cyzpurge.c
*
*   Description:    This module contains the code related to purge 
*                   operations in the Cyclades-Z Port driver.
*
*   Notes:          This code supports Windows 2000 and Windows XP,
*                   x86 and IA64 processors.
*
*   Complies with Cyclades SW Coding Standard rev 1.3.
*
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*   Change History
*
*--------------------------------------------------------------------------
*
*
*--------------------------------------------------------------------------
*/

#include "precomp.h"

#ifdef ALLOC_PRAGMA
#pragma alloc_text(PAGESER,CyzStartPurge)
#pragma alloc_text(PAGESER,CyzPurgeInterruptBuff)
#endif


NTSTATUS
CyzStartPurge(
    IN PCYZ_DEVICE_EXTENSION Extension
    )

/*++

Routine Description:

    Depending on the mask in the current irp, purge the interrupt
    buffer, the read queue, or the write queue, or all of the above.

Arguments:

    Extension - Pointer to the device extension.

Return Value:

    Will return STATUS_SUCCESS always.  This is reasonable
    since the DPC completion code that calls this routine doesn't
    care and the purge request always goes through to completion
    once it's started.

--*/

{

    PIRP NewIrp;

    CYZ_LOCKED_PAGED_CODE();

    do {

        ULONG Mask;

        Mask = *((ULONG *)
                 (Extension->CurrentPurgeIrp->AssociatedIrp.SystemBuffer));

        if (Mask & SERIAL_PURGE_TXABORT) {

            CyzKillAllReadsOrWrites(
                Extension->DeviceObject,
                &Extension->WriteQueue,
                &Extension->CurrentWriteIrp
                );

            CyzKillAllReadsOrWrites(
                Extension->DeviceObject,
                &Extension->WriteQueue,
                &Extension->CurrentXoffIrp
                );

        }

        if (Mask & SERIAL_PURGE_RXABORT) {

            CyzKillAllReadsOrWrites(
                Extension->DeviceObject,
                &Extension->ReadQueue,
                &Extension->CurrentReadIrp
                );

        }

        if (Mask & SERIAL_PURGE_RXCLEAR) {

            KIRQL OldIrql;
#ifdef POLL
            KIRQL pollIrql;
#endif

            //
            // Clean out the interrupt buffer.
            //
            // Note that we do this under protection of the
            // the drivers control lock so that we don't hose
            // the pointers if there is currently a read that
            // is reading out of the buffer.
            //

            KeAcquireSpinLock(
                &Extension->ControlLock,
                &OldIrql
                );

            #ifdef POLL
            KeAcquireSpinLock(&Extension->PollLock,&pollIrql);
            CyzPurgeInterruptBuff(Extension);
            KeReleaseSpinLock(&Extension->PollLock,pollIrql);
            #else
            KeSynchronizeExecution(
                Extension->Interrupt,
                CyzPurgeInterruptBuff,
                Extension
                );
            #endif

            KeReleaseSpinLock(
                &Extension->ControlLock,
                OldIrql
                );

        }

        Extension->CurrentPurgeIrp->IoStatus.Status = STATUS_SUCCESS;
        Extension->CurrentPurgeIrp->IoStatus.Information = 0;

        CyzGetNextIrp(
            &Extension->CurrentPurgeIrp,
            &Extension->PurgeQueue,
            &NewIrp,
            TRUE,
            Extension
            );

    } while (NewIrp);

    return STATUS_SUCCESS;

}

BOOLEAN
CyzPurgeInterruptBuff(
    IN PVOID Context
    )

/*++

Routine Description:

    This routine simply resets the interrupt (typeahead) buffer.

    NOTE: This routine is being called from KeSynchronizeExecution.

Arguments:

    Context - Really a pointer to the device extension.

Return Value:

    Always false.

--*/

{

    struct BUF_CTRL *buf_ctrl;
    ULONG rx_get, rx_put;
    PCYZ_DEVICE_EXTENSION Extension = Context;

    CYZ_LOCKED_PAGED_CODE();


    // Clear firmware rx buffers

    // Check if Xon-Xoff flow control; if not, just clear rx

        buf_ctrl = Extension->BufCtrl;		
        rx_put = CYZ_READ_ULONG(&buf_ctrl->rx_put);
        rx_get = CYZ_READ_ULONG(&buf_ctrl->rx_get);
    if(Extension->HandFlow.FlowReplace & SERIAL_AUTO_TRANSMIT) {
        UCHAR rxchar;
        while (rx_get != rx_put) {
            rxchar = CYZ_READ_UCHAR(&Extension->RxBufaddr[rx_get]);
            if (rx_get == Extension->RxBufsize-1)
                rx_get = 0;
            else 
                rx_get++;				
            ////////CYZ_WRITE_ULONG(&buf_ctrl->rx_get,rx_get);
            if (rxchar == Extension->SpecialChars.XonChar) {
                if (Extension->TXHolding & CYZ_TX_XOFF) {
                    Extension->TXHolding &= ~CYZ_TX_XOFF;
                }				
            }
            ////////rx_put = CYZ_READ_ULONG(&buf_ctrl->rx_put);
        }			
        CYZ_WRITE_ULONG(&buf_ctrl->rx_get,rx_get);
    } else {

        //line removed FANNY_DEBUG 02/09/00  while (rx_get != rx_put) {
            rx_get = rx_put;
            CYZ_WRITE_ULONG(&buf_ctrl->rx_get,rx_get);
            ////////rx_put = CYZ_READ_ULONG(&buf_ctrl->rx_put);
        // line removed FANNY_DEBUG 02/09/00}
        // Flush RX FIFO of Startech chip.
        //CyzIssueCmd(Extension,C_CM_FLUSH_RX,0L,TRUE); 

    }

    //
    // The typeahead buffer is by definition empty if there
    // currently is a read owned by the isr.
    //


    if (Extension->ReadBufferBase == Extension->InterruptReadBuffer) {

        Extension->CurrentCharSlot = Extension->InterruptReadBuffer;
        Extension->FirstReadableChar = Extension->InterruptReadBuffer;
        Extension->LastCharSlot = Extension->InterruptReadBuffer +
                                      (Extension->BufferSize - 1);
        Extension->CharsInInterruptBuffer = 0;

        CyzHandleReducedIntBuffer(Extension);
		
    }
    
    return FALSE;

}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyzport\cyzwrite.c ===
/*--------------------------------------------------------------------------
*
*   Copyright (C) Cyclades Corporation, 1997-2001.
*   All rights reserved.
*
*   Cyclades-Z Port Driver
*	
*   This file:      cyzwrite.c
*
*   Description:    This module contains the code related to write
*                   operations in the Cyclades-Z Port driver.
*
*   Notes:          This code supports Windows 2000 and Windows XP,
*                   x86 and IA64 processors.
*
*   Complies with Cyclades SW Coding Standard rev 1.3.
*
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*   Change History
*
*--------------------------------------------------------------------------
*
*
*--------------------------------------------------------------------------
*/

#include "precomp.h"


BOOLEAN
CyzGiveWriteToIsr(
    IN PVOID Context
    );

VOID
CyzCancelCurrentWrite(
    PDEVICE_OBJECT DeviceObject,
    PIRP Irp
    );

BOOLEAN
CyzGrabWriteFromIsr(
    IN PVOID Context
    );

BOOLEAN
CyzGrabXoffFromIsr(
    IN PVOID Context
    );

VOID
CyzCancelCurrentXoff(
    PDEVICE_OBJECT DeviceObject,
    PIRP Irp
    );

BOOLEAN
CyzGiveXoffToIsr(
    IN PVOID Context
    );

#ifdef ALLOC_PRAGMA
#pragma alloc_text(PAGESER,CyzProcessEmptyTransmit)
#pragma alloc_text(PAGESER,CyzWrite)
#pragma alloc_text(PAGESER,CyzStartWrite)
#pragma alloc_text(PAGESER,CyzGetNextWrite)
#pragma alloc_text(PAGESER,CyzGiveWriteToIsr)
#pragma alloc_text(PAGESER,CyzCancelCurrentWrite)
#pragma alloc_text(PAGESER,CyzGrabWriteFromIsr)
#pragma alloc_text(PAGESER,CyzGrabXoffFromIsr)
#pragma alloc_text(PAGESER,CyzCancelCurrentXoff)
#pragma alloc_text(PAGESER,CyzGiveXoffToIsr)
#endif


NTSTATUS
CyzWrite(
    IN PDEVICE_OBJECT DeviceObject,
    IN PIRP Irp
    )
/*--------------------------------------------------------------------------
    CyzWrite()
    
    Routine Description: This is the dispatch routine for write. It
    validates the parameters for the write request and if all is ok
    then it places the request on the work queue.

    Arguments:

    DeviceObject - Pointer to the device object for this device
    Irp - Pointer to the IRP for the current request

    Return Value: If the io is zero length then it will return STATUS_SUCCESS,
    otherwise this routine will return STATUS_PENDING.
--------------------------------------------------------------------------*/
{

    PCYZ_DEVICE_EXTENSION Extension = DeviceObject->DeviceExtension;
    NTSTATUS status;

    CYZ_LOCKED_PAGED_CODE();

    CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyzWrite(%X, %X)\n", DeviceObject,
                  Irp);

    LOGENTRY(LOG_MISC, ZSIG_WRITE, 
                       Extension->PortIndex+1,
                       IoGetCurrentIrpStackLocation(Irp)->Parameters.Write.Length, 
                       0);


    if ((status = CyzIRPPrologue(Irp, Extension)) != STATUS_SUCCESS) {
      if (status != STATUS_PENDING) {
         CyzCompleteRequest(Extension, Irp, IO_NO_INCREMENT);
      }
      CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyzWrite (1) %X\n", status);
      return status;
    }

    CyzDbgPrintEx(CYZIRPPATH, "Dispatch entry for: %x\n", Irp);

    if (CyzCompleteIfError(DeviceObject,Irp) != STATUS_SUCCESS) {
       CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyzWrite (2) %X\n",
                     STATUS_CANCELLED);
       return STATUS_CANCELLED;
    }

    Irp->IoStatus.Information = 0L;

    //
    // Quick check for a zero length write.  If it is zero length
    // then we are already done!
    //

    if (IoGetCurrentIrpStackLocation(Irp)->Parameters.Write.Length) {

        //
        // Well it looks like we actually have to do some
        // work.  Put the write on the queue so that we can
        // process it when our previous writes are done.
        //

       
       status = CyzStartOrQueue(Extension, Irp, &Extension->WriteQueue,
                                   &Extension->CurrentWriteIrp,
                                   CyzStartWrite);

       CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyzWrite (3) %X\n", status);

       return status;

    } else {

        Irp->IoStatus.Status = STATUS_SUCCESS;

        CyzCompleteRequest(Extension, Irp, 0);

        CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyzWrite (4) %X\n",
                      STATUS_SUCCESS);

        return STATUS_SUCCESS;

    }

}

NTSTATUS
CyzStartWrite(
    IN PCYZ_DEVICE_EXTENSION Extension
    )
/*--------------------------------------------------------------------------
    CyzStartWrite()

    Routine Description: This routine is used to start off any write.
    It initializes the Iostatus fields of the irp.  It will set up any
    timers that are used to control the write.

    Arguments:

    Extension - Points to the serial device extension

    Return Value: This routine will return STATUS_PENDING for all writes
    other than those that we find are cancelled.
--------------------------------------------------------------------------*/
{
    PIRP NewIrp;
    KIRQL OldIrql;
    #ifdef POLL
    KIRQL pollIrql;
    #endif
    LARGE_INTEGER TotalTime;
    BOOLEAN UseATimer;
    SERIAL_TIMEOUTS Timeouts;
    BOOLEAN SetFirstStatus = FALSE;
    NTSTATUS FirstStatus;

    CYZ_LOCKED_PAGED_CODE();

    CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyzStartWrite(%X)\n", Extension);

//    LOGENTRY(LOG_MISC, ZSIG_START_WRITE, 
//                       Extension->PortIndex+1,
//                       0, 
//                       0);

    do {
        // If there is an xoff counter then complete it.
        IoAcquireCancelSpinLock(&OldIrql);

        // We see if there is a actually an Xoff counter irp.
        //
        // If there is, we put the write irp back on the head
        // of the write list.  We then kill the xoff counter.
        // The xoff counter killing code will actually make the
        // xoff counter back into the current write irp, and
        // in the course of completing the xoff (which is now
        // the current write) we will restart this irp.

        if (Extension->CurrentXoffIrp) {
            if (SERIAL_REFERENCE_COUNT(Extension->CurrentXoffIrp)) {
                // The reference count is non-zero.  This implies that
                // the xoff irp has not made it through the completion
                // path yet.  We will increment the reference count
                // and attempt to complete it ourseleves.

                SERIAL_SET_REFERENCE(Extension->CurrentXoffIrp,
						SERIAL_REF_XOFF_REF);

                Extension->CurrentXoffIrp->IoStatus.Information = 0; // Added in build 2128

                // The following call will actually release the
                // cancel spin lock.

                CyzTryToCompleteCurrent(
                    Extension,
                    CyzGrabXoffFromIsr,
                    OldIrql,
                    STATUS_SERIAL_MORE_WRITES,
                    &Extension->CurrentXoffIrp,
                    NULL,
                    NULL,
                    &Extension->XoffCountTimer,
                    NULL,
                    NULL,
                    SERIAL_REF_XOFF_REF
                    );
            } else {
                // The irp is well on its way to being finished.
                // We can let the regular completion code do the
                // work.  Just release the spin lock.
                IoReleaseCancelSpinLock(OldIrql);
            }
        } else {
            IoReleaseCancelSpinLock(OldIrql);
        }

        UseATimer = FALSE;

        // Calculate the timeout value needed for the
        // request.  Note that the values stored in the
        // timeout record are in milliseconds.  Note that
        // if the timeout values are zero then we won't start
        // the timer.

        KeAcquireSpinLock(&Extension->ControlLock,&OldIrql);

        Timeouts = Extension->Timeouts;

        KeReleaseSpinLock(&Extension->ControlLock,OldIrql);

        if (Timeouts.WriteTotalTimeoutConstant ||
            Timeouts.WriteTotalTimeoutMultiplier) {

            PIO_STACK_LOCATION IrpSp = IoGetCurrentIrpStackLocation(
                                           Extension->CurrentWriteIrp
                                           );
            UseATimer = TRUE;

            // We have some timer values to calculate.
            // Take care, we might have an xoff counter masquerading
            // as a write.
            TotalTime.QuadPart =
                ((LONGLONG)((UInt32x32To64(
                                 (IrpSp->MajorFunction == IRP_MJ_WRITE)?
                                     (IrpSp->Parameters.Write.Length):
                                     (1),
                                 Timeouts.WriteTotalTimeoutMultiplier
                                 )
                                 + Timeouts.WriteTotalTimeoutConstant)))
                * -10000;
        }

        // The irp may be going to the isr shortly.  Now
        // is a good time to initialize its reference counts.

        SERIAL_INIT_REFERENCE(Extension->CurrentWriteIrp);

        // We need to see if this irp should be canceled.

        IoAcquireCancelSpinLock(&OldIrql);
        if (Extension->CurrentWriteIrp->Cancel) {
            IoReleaseCancelSpinLock(OldIrql);
            Extension->CurrentWriteIrp->IoStatus.Status = STATUS_CANCELLED;

            if (!SetFirstStatus) {
                FirstStatus = STATUS_CANCELLED;
                SetFirstStatus = TRUE;
            }
        } else {
            if (!SetFirstStatus) {
                // If we haven't set our first status, then
                // this is the only irp that could have possibly
                // not been on the queue.  (It could have been
                // on the queue if this routine is being invoked
                // from the completion routine.)  Since this
                // irp might never have been on the queue we
                // should mark it as pending.

                IoMarkIrpPending(Extension->CurrentWriteIrp);
                SetFirstStatus = TRUE;
                FirstStatus = STATUS_PENDING;
            }

            // We give the irp to to the isr to write out.
            // We set a cancel routine that knows how to
            // grab the current write away from the isr.
            //
            // Since the cancel routine has an implicit reference
            // to this irp up the reference count.

            IoSetCancelRoutine(
                Extension->CurrentWriteIrp,
                CyzCancelCurrentWrite
                );

            SERIAL_SET_REFERENCE(Extension->CurrentWriteIrp,SERIAL_REF_CANCEL);

            if (UseATimer) {
                CyzSetTimer(
                    &Extension->WriteRequestTotalTimer,
                    TotalTime,
                    &Extension->TotalWriteTimeoutDpc,
                    Extension
                    );

                // This timer now has a reference to the irp.

                SERIAL_SET_REFERENCE(
                    Extension->CurrentWriteIrp,
                    SERIAL_REF_TOTAL_TIMER
                    );
            }

            #ifdef POLL			
            KeAcquireSpinLock(&Extension->PollLock,&pollIrql);
            CyzGiveWriteToIsr(Extension);
            KeReleaseSpinLock(&Extension->PollLock,pollIrql);
            #else
            KeSynchronizeExecution(
                Extension->Interrupt,
                CyzGiveWriteToIsr,
                Extension
                );
            #endif

            IoReleaseCancelSpinLock(OldIrql);
            break;
        }

        // Well the write was canceled before we could start it up.
        // Try to get another.

        CyzGetNextWrite(&Extension->CurrentWriteIrp, &Extension->WriteQueue,
                        &NewIrp, TRUE, Extension);

    } while (NewIrp);

    CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyzStartWrite %X\n", FirstStatus);

    return FirstStatus;
}

VOID
CyzGetNextWrite(
    IN PIRP *CurrentOpIrp,
    IN PLIST_ENTRY QueueToProcess,
    IN PIRP *NewIrp,
    IN BOOLEAN CompleteCurrent,
    IN PCYZ_DEVICE_EXTENSION Extension
    )

/*++

Routine Description:

    This routine completes the old write as well as getting
    a pointer to the next write.

    The reason that we have have pointers to the current write
    queue as well as the current write irp is so that this
    routine may be used in the common completion code for
    read and write.

Arguments:

    CurrentOpIrp - Pointer to the pointer that points to the
                   current write irp.

    QueueToProcess - Pointer to the write queue.

    NewIrp - A pointer to a pointer to the irp that will be the
             current irp.  Note that this could end up pointing
             to a null pointer.  This does NOT necessaryly mean
             that there is no current write.  What could occur
             is that while the cancel lock is held the write
             queue ended up being empty, but as soon as we release
             the cancel spin lock a new irp came in from
             CyzStartWrite.

    CompleteCurrent - Flag indicates whether the CurrentOpIrp should
                      be completed.

Return Value:

    None.

--*/

{
   CYZ_LOCKED_PAGED_CODE();

   CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyzGetNextWrite(XXX)\n");


    do {


        //
        // We could be completing a flush.
        //

        if (IoGetCurrentIrpStackLocation(*CurrentOpIrp)->MajorFunction
            == IRP_MJ_WRITE) {

            KIRQL OldIrql;

            ASSERT(Extension->TotalCharsQueued >=
                   (IoGetCurrentIrpStackLocation(*CurrentOpIrp)
                    ->Parameters.Write.Length));

            IoAcquireCancelSpinLock(&OldIrql);
            Extension->TotalCharsQueued -=
                IoGetCurrentIrpStackLocation(*CurrentOpIrp)
                ->Parameters.Write.Length;
            IoReleaseCancelSpinLock(OldIrql);

        } else if (IoGetCurrentIrpStackLocation(*CurrentOpIrp)->MajorFunction
                   == IRP_MJ_DEVICE_CONTROL) {

            KIRQL OldIrql;
            #ifdef POLL
            KIRQL pollIrql;
            #endif
            PIRP Irp;
            PSERIAL_XOFF_COUNTER Xc;

            IoAcquireCancelSpinLock(&OldIrql);

            Irp = *CurrentOpIrp;
            Xc = Irp->AssociatedIrp.SystemBuffer;

            //
            // We should never have a xoff counter when we
            // get to this point.
            //

            ASSERT(!Extension->CurrentXoffIrp);

            //
            // We absolutely shouldn't have a cancel routine
            // at this point.
            //

            ASSERT(!Irp->CancelRoutine);

            //
            // This could only be a xoff counter masquerading as
            // a write irp.
            //

            Extension->TotalCharsQueued--;

            //
            // Check to see of the xoff irp has been set with success.
            // This means that the write completed normally.  If that
            // is the case, and it hasn't been set to cancel in the
            // meanwhile, then go on and make it the CurrentXoffIrp.
            //

            if (Irp->IoStatus.Status != STATUS_SUCCESS) {

                //
                // Oh well, we can just finish it off.
                //
                NOTHING;

            } else if (Irp->Cancel) {

                Irp->IoStatus.Status = STATUS_CANCELLED;

            } else {

                //
                // Give it a new cancel routine, and increment the
                // reference count because the cancel routine has
                // a reference to it.
                //

                IoSetCancelRoutine(
                    Irp,
                    CyzCancelCurrentXoff
                    );

                SERIAL_SET_REFERENCE(
                    Irp,
                    SERIAL_REF_CANCEL
                    );

                //
                // We don't want to complete the current irp now.  This
                // will now get completed by the Xoff counter code.
                //

                CompleteCurrent = FALSE;

                //
                // Give the counter to the isr.
                //

                Extension->CurrentXoffIrp = Irp;
                #ifdef POLL
                KeAcquireSpinLock(&Extension->PollLock,&pollIrql);
                CyzGiveXoffToIsr(Extension);
                KeReleaseSpinLock(&Extension->PollLock,pollIrql);
                #else
                KeSynchronizeExecution(
                    Extension->Interrupt,
                    CyzGiveXoffToIsr,
                    Extension
                    );
                #endif
				
                //
                // Start the timer for the counter and increment
                // the reference count since the timer has a
                // reference to the irp.
                //

                if (Xc->Timeout) {

                    LARGE_INTEGER delta;

                    delta.QuadPart = -((LONGLONG)UInt32x32To64(
                                                     1000,
                                                     Xc->Timeout
                                                     ));

                    CyzSetTimer(
                        &Extension->XoffCountTimer,
                        delta,
                        &Extension->XoffCountTimeoutDpc,
                        Extension
                        );

                    SERIAL_SET_REFERENCE(
                        Irp,
                        SERIAL_REF_TOTAL_TIMER
                        );

                }

            }

            IoReleaseCancelSpinLock(OldIrql);

        }

        //
        // Note that the following call will (probably) also cause
        // the current irp to be completed.
        //

        CyzGetNextIrp(
            CurrentOpIrp,
            QueueToProcess,
            NewIrp,
            CompleteCurrent,
            Extension
            );

        if (!*NewIrp) {

            KIRQL OldIrql;
            #ifdef POLL
            KIRQL pollIrql;
            #endif

            IoAcquireCancelSpinLock(&OldIrql);
            #ifdef POLL
            KeAcquireSpinLock(&Extension->PollLock,&pollIrql);
            CyzProcessEmptyTransmit(Extension);
            KeReleaseSpinLock(&Extension->PollLock,pollIrql);
            #else
            KeSynchronizeExecution(
                Extension->Interrupt,
                CyzProcessEmptyTransmit,
                Extension
                );
            #endif				
            IoReleaseCancelSpinLock(OldIrql);

            break;

        } else if (IoGetCurrentIrpStackLocation(*NewIrp)->MajorFunction
                   == IRP_MJ_FLUSH_BUFFERS) {

            //
            // If we encounter a flush request we just want to get
            // the next irp and complete the flush.
            //
            // Note that if NewIrp is non-null then it is also
            // equal to CurrentWriteIrp.
            //


            ASSERT((*NewIrp) == (*CurrentOpIrp));
            (*NewIrp)->IoStatus.Status = STATUS_SUCCESS;

        } else {

            break;

        }

    } while (TRUE);

    CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyzGetNextWrite\n");
}

VOID
CyzCompleteWrite(
    IN PKDPC Dpc,
    IN PVOID DeferredContext,
    IN PVOID SystemContext1,
    IN PVOID SystemContext2
    )

/*++

Routine Description:

    This routine is merely used to complete any write.  It
    assumes that the status and the information fields of
    the irp are already correctly filled in.

Arguments:

    Dpc - Not Used.

    DeferredContext - Really points to the device extension.

    SystemContext1 - Not Used.

    SystemContext2 - Not Used.

Return Value:

    None.

--*/

{

    PCYZ_DEVICE_EXTENSION Extension = DeferredContext;
    KIRQL OldIrql;

    UNREFERENCED_PARAMETER(SystemContext1);
    UNREFERENCED_PARAMETER(SystemContext2);
    
    CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyzCompleteWrite(%X)\n",
                  Extension);

//    LOGENTRY(LOG_MISC, ZSIG_WRITE_COMPLETE,
//                       Extension->PortIndex+1,
//                       0, 
//                       0);

    IoAcquireCancelSpinLock(&OldIrql);

    CyzTryToCompleteCurrent(Extension, NULL, OldIrql, STATUS_SUCCESS,
                            &Extension->CurrentWriteIrp,
                            &Extension->WriteQueue, NULL,
                            &Extension->WriteRequestTotalTimer,
                            CyzStartWrite, CyzGetNextWrite,
                            SERIAL_REF_ISR);

    CyzDpcEpilogue(Extension, Dpc);

    CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyzCompleteWrite\n");

}

BOOLEAN
CyzProcessEmptyTransmit(
    IN PVOID Context
    )

/*++

Routine Description:

    This routine is used to determine if conditions are appropriate
    to satisfy a wait for transmit empty event, and if so to complete
    the irp that is waiting for that event.  It also call the code
    that checks to see if we should lower the RTS line if we are
    doing transmit toggling.

    NOTE: This routine is called by KeSynchronizeExecution.

    NOTE: This routine assumes that it is called with the cancel
          spinlock held.

Arguments:

    Context - Really a pointer to the device extension.

Return Value:

    This routine always returns FALSE.

--*/

{

    PCYZ_DEVICE_EXTENSION Extension = Context;
    CYZ_LOCKED_PAGED_CODE();

    if (Extension->IsrWaitMask && (Extension->IsrWaitMask & SERIAL_EV_TXEMPTY) &&
        Extension->EmptiedTransmit && (!Extension->TransmitImmediate) &&
        (!Extension->CurrentWriteIrp) && IsListEmpty(&Extension->WriteQueue)) {

        Extension->HistoryMask |= SERIAL_EV_TXEMPTY;
        if (Extension->IrpMaskLocation) {

            *Extension->IrpMaskLocation = Extension->HistoryMask;
            Extension->IrpMaskLocation = NULL;
            Extension->HistoryMask = 0;

            Extension->CurrentWaitIrp->IoStatus.Information = sizeof(ULONG);
            CyzInsertQueueDpc(
                &Extension->CommWaitDpc,
                NULL,
                NULL,
                Extension
                );

        }

        Extension->CountOfTryingToLowerRTS++;
        CyzPerhapsLowerRTS(Extension);

    }

    return FALSE;

}

BOOLEAN
CyzGiveWriteToIsr(
    IN PVOID Context
    )

/*++

Routine Description:

    Try to start off the write by slipping it in behind
    a transmit immediate char, or if that isn't available
    and the transmit holding register is empty, "tickle"
    the UART into interrupting with a transmit buffer
    empty.

    NOTE: This routine is called by KeSynchronizeExecution.

    NOTE: This routine assumes that it is called with the
          cancel spin lock held.

Arguments:

    Context - Really a pointer to the device extension.

Return Value:

    This routine always returns FALSE.

--*/

{

    PCYZ_DEVICE_EXTENSION Extension = Context;

    //
    // The current stack location.  This contains all of the
    // information we need to process this particular request.
    //
    PIO_STACK_LOCATION IrpSp;

    CYZ_LOCKED_PAGED_CODE();

//    LOGENTRY(LOG_MISC, ZSIG_GIVE_WRITE_TO_ISR,
//                       Extension->PortIndex+1,
//                       0, 
//                       0);

    IrpSp = IoGetCurrentIrpStackLocation(Extension->CurrentWriteIrp);

    //
    // We might have a xoff counter request masquerading as a
    // write.  The length of these requests will always be one
    // and we can get a pointer to the actual character from
    // the data supplied by the user.
    //

    if (IrpSp->MajorFunction == IRP_MJ_WRITE) {

        Extension->WriteLength = IrpSp->Parameters.Write.Length;
        Extension->WriteCurrentChar =
            Extension->CurrentWriteIrp->AssociatedIrp.SystemBuffer;

    } else {

        Extension->WriteLength = 1;
        Extension->WriteCurrentChar =
            ((PUCHAR)Extension->CurrentWriteIrp->AssociatedIrp.SystemBuffer) +
            FIELD_OFFSET(
                SERIAL_XOFF_COUNTER,
                XoffChar
                );

    }

    //
    // The isr now has a reference to the irp.
    //

    
    SERIAL_SET_REFERENCE(
        Extension->CurrentWriteIrp,
        SERIAL_REF_ISR
        );

    //
    // Check first to see if an immediate char is transmitting.
    // If it is then we'll just slip in behind it when its
    // done.
    //

//Removed at 02/07/00 by Fanny. Polling routine will do the transmission.
    if (!Extension->TransmitImmediate) {
//
//        //
//        // If there is no immediate char transmitting then we
//        // will "re-enable" the transmit holding register empty
//        // interrupt.  The 8250 family of devices will always
//        // signal a transmit holding register empty interrupt
//        // *ANY* time this bit is set to one.  By doing things
//        // this way we can simply use the normal interrupt code
//        // to start off this write.
//        //
//        // We've been keeping track of whether the transmit holding
//        // register is empty so it we only need to do this
//        // if the register is empty.
//        //
//

//#if DBG 
//{
//    PUCHAR writeptr = Extension->WriteCurrentChar;
//    int ivar;
//    for (ivar=0; ivar< Extension->WriteLength; ivar++) {
//        //DbgPrint("%c",writeptr[ivar]);
//        LOGENTRY(LOG_MISC,ZSIG_TRANSMIT,0,0,writeptr[ivar]);
//    }
//    //DbgPrint("\n");
//}
//#endif

        
        //if (Extension->HoldingEmpty) {
            // enable transmit intr
            CyzTxStart(Extension);
        //}

    }

    //
    // The rts line may already be up from previous writes,
    // however, it won't take much additional time to turn
    // on the RTS line if we are doing transmit toggling.
    //

    if ((Extension->HandFlow.FlowReplace & SERIAL_RTS_MASK) ==
        SERIAL_TRANSMIT_TOGGLE) {

        CyzSetRTS(Extension);

    }

    return FALSE;

}

VOID
CyzCancelCurrentWrite(
    PDEVICE_OBJECT DeviceObject,
    PIRP Irp
    )

/*++

Routine Description:

    This routine is used to cancel the current write.

Arguments:

    DeviceObject - Pointer to the device object for this device

    Irp - Pointer to the IRP to be canceled.

Return Value:

    None.

--*/

{

    PCYZ_DEVICE_EXTENSION Extension = DeviceObject->DeviceExtension;
    CYZ_LOCKED_PAGED_CODE();

    CyzTryToCompleteCurrent(
        Extension,
        CyzGrabWriteFromIsr,
        Irp->CancelIrql,
        STATUS_CANCELLED,
        &Extension->CurrentWriteIrp,
        &Extension->WriteQueue,
        NULL,
        &Extension->WriteRequestTotalTimer,
        CyzStartWrite,
        CyzGetNextWrite,
        SERIAL_REF_CANCEL
        );

}

VOID
CyzWriteTimeout(
    IN PKDPC Dpc,
    IN PVOID DeferredContext,
    IN PVOID SystemContext1,
    IN PVOID SystemContext2
    )

/*++

Routine Description:

    This routine will try to timeout the current write.

Arguments:

    Dpc - Not Used.

    DeferredContext - Really points to the device extension.

    SystemContext1 - Not Used.

    SystemContext2 - Not Used.

Return Value:

    None.

--*/

{

    PCYZ_DEVICE_EXTENSION Extension = DeferredContext;
    KIRQL OldIrql;

    UNREFERENCED_PARAMETER(SystemContext1);
    UNREFERENCED_PARAMETER(SystemContext2);

    CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyzWriteTimeout(%X)\n",
                     Extension);

    IoAcquireCancelSpinLock(&OldIrql);

    CyzTryToCompleteCurrent(Extension, CyzGrabWriteFromIsr, OldIrql,
                               STATUS_TIMEOUT, &Extension->CurrentWriteIrp,
                               &Extension->WriteQueue, NULL,
                               &Extension->WriteRequestTotalTimer,
                               CyzStartWrite, CyzGetNextWrite,
                               SERIAL_REF_TOTAL_TIMER);

    CyzDpcEpilogue(Extension, Dpc);


    CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyzWriteTimeout\n");
}

BOOLEAN
CyzGrabWriteFromIsr(
    IN PVOID Context
    )

/*++

Routine Description:


    This routine is used to grab the current irp, which could be timing
    out or canceling, from the ISR

    NOTE: This routine is being called from KeSynchronizeExecution.

    NOTE: This routine assumes that the cancel spin lock is held
          when this routine is called.

Arguments:

    Context - Really a pointer to the device extension.

Return Value:

    Always false.

--*/

{

    PCYZ_DEVICE_EXTENSION Extension = Context;
    CYZ_LOCKED_PAGED_CODE();

    //
    // Check if the write length is non-zero.  If it is non-zero
    // then the ISR still owns the irp. We calculate the the number
    // of characters written and update the information field of the
    // irp with the characters written.  We then clear the write length
    // the isr sees.
    //

    if (Extension->WriteLength) {

        //
        // We could have an xoff counter masquerading as a
        // write irp.  If so, don't update the write length.
        //

        if (IoGetCurrentIrpStackLocation(Extension->CurrentWriteIrp)
            ->MajorFunction == IRP_MJ_WRITE) {

            Extension->CurrentWriteIrp->IoStatus.Information =
                IoGetCurrentIrpStackLocation(
                    Extension->CurrentWriteIrp
                    )->Parameters.Write.Length -
                Extension->WriteLength;

        } else {

            Extension->CurrentWriteIrp->IoStatus.Information = 0;

        }

        //
        // Since the isr no longer references this irp, we can
        // decrement it's reference count.
        //

        SERIAL_CLEAR_REFERENCE(
            Extension->CurrentWriteIrp,
            SERIAL_REF_ISR
            );

        Extension->WriteLength = 0;

        if (Extension->ReturnStatusAfterFwEmpty) {

            struct BUF_CTRL *buf_ctrl;
            ULONG tx_get, tx_put;

            Extension->ReturnWriteStatus = FALSE;

            // Flush fw buffer and Startech FIFO.
            CyzIssueCmd(Extension,C_CM_FLUSH_TX,0L,TRUE); 

            // Flush transmission buffer in the firmware
            //buf_ctrl = Extension->BufCtrl;		
            //tx_put = CYZ_READ_ULONG(&buf_ctrl->tx_put);
            //tx_get = CYZ_READ_ULONG(&buf_ctrl->tx_get);	
	
            //while (tx_put != tx_get) {
            //    tx_put = tx_get;
            //    CYZ_WRITE_ULONG(&buf_ctrl->tx_put,tx_put);
            //    tx_get = CYZ_READ_ULONG(&buf_ctrl->tx_get);	
            //}	
        }
    }

    return FALSE;

}

BOOLEAN
CyzGrabXoffFromIsr(
    IN PVOID Context
    )

/*++

Routine Description:

    This routine is used to grab an xoff counter irp from the
    isr when it is no longer masquerading as a write irp.  This
    routine is called by the cancel and timeout code for the
    xoff counter ioctl.


    NOTE: This routine is being called from KeSynchronizeExecution.

    NOTE: This routine assumes that the cancel spin lock is held
          when this routine is called.

Arguments:

    Context - Really a pointer to the device extension.

Return Value:

    Always false.

--*/

{

    PCYZ_DEVICE_EXTENSION Extension = Context;
    CYZ_LOCKED_PAGED_CODE();

    if (Extension->CountSinceXoff) {

        //
        // This is only non-zero when there actually is a Xoff ioctl
        // counting down.
        //

        Extension->CountSinceXoff = 0;

        //
        // We decrement the count since the isr no longer owns
        // the irp.
        //

        SERIAL_CLEAR_REFERENCE(
            Extension->CurrentXoffIrp,
            SERIAL_REF_ISR
            );

    }

    return FALSE;

}

VOID
CyzCompleteXoff(
    IN PKDPC Dpc,
    IN PVOID DeferredContext,
    IN PVOID SystemContext1,
    IN PVOID SystemContext2
    )

/*++

Routine Description:

    This routine is merely used to truely complete an xoff counter irp.  It
    assumes that the status and the information fields of the irp are
    already correctly filled in.

Arguments:

    Dpc - Not Used.

    DeferredContext - Really points to the device extension.

    SystemContext1 - Not Used.

    SystemContext2 - Not Used.

Return Value:

    None.

--*/

{

    PCYZ_DEVICE_EXTENSION Extension = DeferredContext;
    KIRQL OldIrql;

    UNREFERENCED_PARAMETER(SystemContext1);
    UNREFERENCED_PARAMETER(SystemContext2);

    CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyzCompleteXoff(%X)\n",
                  Extension);

    IoAcquireCancelSpinLock(&OldIrql);

    CyzTryToCompleteCurrent(Extension, NULL, OldIrql, STATUS_SUCCESS,
                            &Extension->CurrentXoffIrp, NULL, NULL,
                            &Extension->XoffCountTimer, NULL, NULL,
                            SERIAL_REF_ISR);

    CyzDpcEpilogue(Extension, Dpc);


    CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyzCompleteXoff\n");

}

VOID
CyzTimeoutXoff(
    IN PKDPC Dpc,
    IN PVOID DeferredContext,
    IN PVOID SystemContext1,
    IN PVOID SystemContext2
    )

/*++

Routine Description:

    This routine is merely used to truely complete an xoff counter irp,
    if its timer has run out.

Arguments:

    Dpc - Not Used.

    DeferredContext - Really points to the device extension.

    SystemContext1 - Not Used.

    SystemContext2 - Not Used.

Return Value:

    None.

--*/

{

    PCYZ_DEVICE_EXTENSION Extension = DeferredContext;
    KIRQL OldIrql;

    UNREFERENCED_PARAMETER(SystemContext1);
    UNREFERENCED_PARAMETER(SystemContext2);

    CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, ">CyzTimeoutXoff(%X)\n", Extension);

    IoAcquireCancelSpinLock(&OldIrql);

    CyzTryToCompleteCurrent(Extension, CyzGrabXoffFromIsr, OldIrql,
                            STATUS_SERIAL_COUNTER_TIMEOUT,
                            &Extension->CurrentXoffIrp, NULL, NULL, NULL,
                            NULL, NULL, SERIAL_REF_TOTAL_TIMER);

    CyzDpcEpilogue(Extension, Dpc);

    CyzDbgPrintEx(DPFLTR_TRACE_LEVEL, "<CyzTimeoutXoff\n");
}

VOID
CyzCancelCurrentXoff(
    PDEVICE_OBJECT DeviceObject,
    PIRP Irp
    )

/*++

Routine Description:

    This routine is used to cancel the current write.

Arguments:

    DeviceObject - Pointer to the device object for this device

    Irp - Pointer to the IRP to be canceled.

Return Value:

    None.

--*/

{

    PCYZ_DEVICE_EXTENSION Extension = DeviceObject->DeviceExtension;
    CYZ_LOCKED_PAGED_CODE();

    CyzTryToCompleteCurrent(
        Extension,
        CyzGrabXoffFromIsr,
        Irp->CancelIrql,
        STATUS_CANCELLED,
        &Extension->CurrentXoffIrp,
        NULL,
        NULL,
        &Extension->XoffCountTimer,
        NULL,
        NULL,
        SERIAL_REF_CANCEL
        );

}

BOOLEAN
CyzGiveXoffToIsr(
    IN PVOID Context
    )

/*++

Routine Description:


    This routine starts off the xoff counter.  It merely
    has to set the xoff count and increment the reference
    count to denote that the isr has a reference to the irp.

    NOTE: This routine is called by KeSynchronizeExecution.

    NOTE: This routine assumes that it is called with the
          cancel spin lock held.

Arguments:

    Context - Really a pointer to the device extension.

Return Value:

    This routine always returns FALSE.

--*/

{

    PCYZ_DEVICE_EXTENSION Extension = Context;

    //
    // The current stack location.  This contains all of the
    // information we need to process this particular request.
    //

    PSERIAL_XOFF_COUNTER Xc =
        Extension->CurrentXoffIrp->AssociatedIrp.SystemBuffer;

    CYZ_LOCKED_PAGED_CODE();

    ASSERT(Extension->CurrentXoffIrp);
    Extension->CountSinceXoff = Xc->Counter;

    //
    // The isr now has a reference to the irp.
    //

    SERIAL_SET_REFERENCE(
        Extension->CurrentXoffIrp,
        SERIAL_REF_ISR
        );

    return FALSE;

}

=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyzport\cyzwmi.c ===
/*--------------------------------------------------------------------------
*
*   Copyright (C) Cyclades Corporation, 2000-2001.
*   All rights reserved.
*
*   Cyclades-Z Port Driver
*	
*   This file:      cyzwmi.c
*
*   Description:    This module contains the code that handles the wmi IRPs 
*                   for the Cyclades-Z Port driver.
*
*   Notes:          This code supports Windows 2000 and Windows XP,
*                   x86 and IA64 processors.
*
*   Complies with Cyclades SW Coding Standard rev 1.3.
*
*--------------------------------------------------------------------------
*/

/*-------------------------------------------------------------------------
*
*   Change History
*
*--------------------------------------------------------------------------
*   Initial implementation based on Microsoft sample code.
*
*--------------------------------------------------------------------------
*/

#include "precomp.h"
#include <wmistr.h>

#ifdef ALLOC_PRAGMA
#pragma alloc_text(PAGESRP0, CyzSystemControlDispatch)
#pragma alloc_text(PAGESRP0, CyzTossWMIRequest)
#pragma alloc_text(PAGESRP0, CyzSetWmiDataItem)
#pragma alloc_text(PAGESRP0, CyzSetWmiDataBlock)
#pragma alloc_text(PAGESRP0, CyzQueryWmiDataBlock)
#pragma alloc_text(PAGESRP0, CyzQueryWmiRegInfo)
#endif


NTSTATUS
CyzSystemControlDispatch(IN PDEVICE_OBJECT DeviceObject, IN PIRP Irp)
{
    SYSCTL_IRP_DISPOSITION disposition;
    NTSTATUS status;
    PCYZ_DEVICE_EXTENSION pDevExt
      = (PCYZ_DEVICE_EXTENSION)DeviceObject->DeviceExtension;

    PAGED_CODE();

    //CyzDump (CYZWMI, ("CYZPORT: entering CyzSystemControlDispatch\n"));

    status = WmiSystemControl(   &pDevExt->WmiLibInfo,
                                 DeviceObject, 
                                 Irp,
                                 &disposition);
    switch(disposition)
    {
        case IrpProcessed:
        {
            //
            // This irp has been processed and may be completed or pending.
            //CyzDump (CYZWMI, ("WmiSystemControl: IrpProcessed\n"));
            break;
        }
        
        case IrpNotCompleted:
        {
            //
            // This irp has not been completed, but has been fully processed.
            // we will complete it now
            //CyzDump (CYZWMI, ("WmiSystemControl: IrpNotCompleted\n"));
            IoCompleteRequest(Irp, IO_NO_INCREMENT);                
            break;
        }
        
        case IrpForward:
        case IrpNotWmi:
        {
            //
            // This irp is either not a WMI irp or is a WMI irp targetted
            // at a device lower in the stack.
            //CyzDump (CYZWMI, ("WmiSystemControl: IrpForward or IrpNotWmi\n"));
            IoSkipCurrentIrpStackLocation(Irp);
            status = IoCallDriver(pDevExt->LowerDeviceObject, Irp);
            break;
        }
                                    
        default:
        {
            //
            // We really should never get here, but if we do just forward....
            ASSERT(FALSE);
            IoSkipCurrentIrpStackLocation(Irp);
            status = IoCallDriver(pDevExt->LowerDeviceObject, Irp);
            break;
        }        
    }

    //CyzDump (CYZWMI, ("CYZPORT: leaving CyzSystemControlDispatch\n"));
    
    return(status);

}


#define WMI_SERIAL_PORT_NAME_INFORMATION 0
#define WMI_SERIAL_PORT_COMM_INFORMATION 1
#define WMI_SERIAL_PORT_HW_INFORMATION   2
#define WMI_SERIAL_PORT_PERF_INFORMATION 3
#define WMI_SERIAL_PORT_PROPERTIES       4

GUID SerialPortNameGuid = SERIAL_PORT_WMI_NAME_GUID;
GUID SerialPortCommGuid = SERIAL_PORT_WMI_COMM_GUID;
GUID SerialPortHWGuid = SERIAL_PORT_WMI_HW_GUID;
GUID SerailPortPerfGuid = SERIAL_PORT_WMI_PERF_GUID;
GUID SerialPortPropertiesGuid = SERIAL_PORT_WMI_PROPERTIES_GUID;

WMIGUIDREGINFO SerialWmiGuidList[SERIAL_WMI_GUID_LIST_SIZE] =
{
    { &SerialPortNameGuid, 1, 0 },
    { &SerialPortCommGuid, 1, 0 },
    { &SerialPortHWGuid, 1, 0 },
    { &SerailPortPerfGuid, 1, 0 },
    { &SerialPortPropertiesGuid, 1, 0}
};

//
// WMI System Call back functions
//



NTSTATUS
CyzTossWMIRequest(IN PDEVICE_OBJECT PDevObj, IN PIRP PIrp,
                  IN ULONG GuidIndex)
{
   PCYZ_DEVICE_EXTENSION pDevExt;
   NTSTATUS status;

   PAGED_CODE();

   pDevExt = (PCYZ_DEVICE_EXTENSION)PDevObj->DeviceExtension;

   switch (GuidIndex) {

   case WMI_SERIAL_PORT_NAME_INFORMATION:
   case WMI_SERIAL_PORT_COMM_INFORMATION:
   case WMI_SERIAL_PORT_HW_INFORMATION:
   case WMI_SERIAL_PORT_PERF_INFORMATION:
   case WMI_SERIAL_PORT_PROPERTIES:
      status = STATUS_INVALID_DEVICE_REQUEST;
      break;

   default:
      status = STATUS_WMI_GUID_NOT_FOUND;
      break;
   }

   status = WmiCompleteRequest(PDevObj, PIrp,
                                 status, 0, IO_NO_INCREMENT);

   return status;
}


NTSTATUS
CyzSetWmiDataItem(IN PDEVICE_OBJECT PDevObj, IN PIRP PIrp,
                  IN ULONG GuidIndex, IN ULONG InstanceIndex,
                  IN ULONG DataItemId,
                  IN ULONG BufferSize, IN PUCHAR PBuffer)
/*++

Routine Description:

    This routine is a callback into the driver to set for the contents of
    a data block. When the driver has finished filling the data block it
    must call ClassWmiCompleteRequest to complete the irp. The driver can
    return STATUS_PENDING if the irp cannot be completed immediately.

Arguments:

    PDevObj is the device whose data block is being queried

    PIrp is the Irp that makes this request

    GuidIndex is the index into the list of guids provided when the
        device registered

    InstanceIndex is the index that denotes which instance of the data block
        is being queried.
            
    DataItemId has the id of the data item being set

    BufferSize has the size of the data item passed

    PBuffer has the new values for the data item


Return Value:

    status

--*/
{
   PAGED_CODE();

   //
   // Toss this request -- we don't support anything for it
   //

   //CyzDump (CYZWMI, ("CyzSetWmiDataItem\n"));
   return CyzTossWMIRequest(PDevObj, PIrp, GuidIndex);
}


NTSTATUS
CyzSetWmiDataBlock(IN PDEVICE_OBJECT PDevObj, IN PIRP PIrp,
                   IN ULONG GuidIndex, IN ULONG InstanceIndex,
                   IN ULONG BufferSize,
                   IN PUCHAR PBuffer)
/*++

Routine Description:

    This routine is a callback into the driver to set the contents of
    a data block. When the driver has finished filling the data block it
    must call ClassWmiCompleteRequest to complete the irp. The driver can
    return STATUS_PENDING if the irp cannot be completed immediately.

Arguments:

    PDevObj is the device whose data block is being queried

    PIrp is the Irp that makes this request

    GuidIndex is the index into the list of guids provided when the
        device registered

    InstanceIndex is the index that denotes which instance of the data block
        is being queried.
            
    BufferSize has the size of the data block passed

    PBuffer has the new values for the data block


Return Value:

    status

--*/
{
   PAGED_CODE();

   //
   // Toss this request -- we don't support anything for it
   //

   //CyzDump (CYZWMI, ("CyzSetWmiDataBlock\n"));
   return CyzTossWMIRequest(PDevObj, PIrp, GuidIndex);
}


NTSTATUS
CyzQueryWmiDataBlock(IN PDEVICE_OBJECT PDevObj, IN PIRP PIrp,
                     IN ULONG GuidIndex, 
                     IN ULONG InstanceIndex,
                     IN ULONG InstanceCount,
                     IN OUT PULONG InstanceLengthArray,
                     IN ULONG OutBufferSize,
                     OUT PUCHAR PBuffer)
/*++

Routine Description:

    This routine is a callback into the driver to query for the contents of
    a data block. When the driver has finished filling the data block it
    must call ClassWmiCompleteRequest to complete the irp. The driver can
    return STATUS_PENDING if the irp cannot be completed immediately.

Arguments:

    PDevObj is the device whose data block is being queried

    PIrp is the Irp that makes this request

    GuidIndex is the index into the list of guids provided when the
        device registered

    InstanceIndex is the index that denotes which instance of the data block
        is being queried.
            
    InstanceCount is the number of instnaces expected to be returned for
        the data block.
            
    InstanceLengthArray is a pointer to an array of ULONG that returns the 
        lengths of each instance of the data block. If this is NULL then
        there was not enough space in the output buffer to fufill the request
        so the irp should be completed with the buffer needed.        
            
    BufferAvail on has the maximum size available to write the data
        block.

    PBuffer on return is filled with the returned data block


Return Value:

    status

--*/
{
    NTSTATUS status;
    ULONG size = 0;
    PCYZ_DEVICE_EXTENSION pDevExt
       = (PCYZ_DEVICE_EXTENSION)PDevObj->DeviceExtension;

    PAGED_CODE();

    //CyzDump (CYZWMI, ("CyzQueryWmiDataBlock GuidIndex=%d InstanceIndex=%d InstanceCount=%d\n",
    //                             GuidIndex,InstanceIndex,InstanceCount));

    switch (GuidIndex) {
    case WMI_SERIAL_PORT_NAME_INFORMATION:
       //CyzDump (CYZWMI, ("CyzQueryWmiDataBlock WMI_SERIAL_PORT_NAME_INFORMATION\n"));
       size = pDevExt->WmiIdentifier.Length;

       if (OutBufferSize < (size + sizeof(USHORT))) {
            size += sizeof(USHORT);
            status = STATUS_BUFFER_TOO_SMALL;
            break;
        }

       if (pDevExt->WmiIdentifier.Buffer == NULL) {
           status = STATUS_INSUFFICIENT_RESOURCES;
           break;
        }

        //
        // First, copy the string over containing our identifier
        //

        *(USHORT *)PBuffer = (USHORT)size;
        (UCHAR *)PBuffer += sizeof(USHORT);

        RtlCopyMemory(PBuffer, pDevExt->WmiIdentifier.Buffer, size);

        //
        // Increment total size to include the WORD containing our len
        //

        size += sizeof(USHORT);
        *InstanceLengthArray = size;
                
        status = STATUS_SUCCESS;

        break;

    case WMI_SERIAL_PORT_COMM_INFORMATION: 
       //CyzDump (CYZWMI, ("CyzQueryWmiDataBlock WMI_SERIAL_PORT_COMM_INFORMATION\n"));
       size = sizeof(SERIAL_WMI_COMM_DATA);

       if (OutBufferSize < size) {
          status = STATUS_BUFFER_TOO_SMALL;
          break;
        }

        *InstanceLengthArray = size;
        *(PSERIAL_WMI_COMM_DATA)PBuffer = pDevExt->WmiCommData;

        status = STATUS_SUCCESS;

        break;

    case WMI_SERIAL_PORT_HW_INFORMATION:
       //CyzDump (CYZWMI, ("CyzQueryWmiDataBlock WMI_SERIAL_PORT_HW_INFORMATION\n"));
       size = sizeof(SERIAL_WMI_HW_DATA);

       if (OutBufferSize < size) {
          status = STATUS_BUFFER_TOO_SMALL;
          break;
       }

       *InstanceLengthArray = size;
       *(PSERIAL_WMI_HW_DATA)PBuffer = pDevExt->WmiHwData;

       status = STATUS_SUCCESS;

       break;

    case WMI_SERIAL_PORT_PERF_INFORMATION: 
      //CyzDump (CYZWMI, ("CyzQueryWmiDataBlock WMI_SERIAL_PORT_PERF_INFORMATION\n"));
      size = sizeof(SERIAL_WMI_PERF_DATA);

      if (OutBufferSize < size) {
         status = STATUS_BUFFER_TOO_SMALL;
         break;
      }

      *InstanceLengthArray = size;
      *(PSERIAL_WMI_PERF_DATA)PBuffer = pDevExt->WmiPerfData;

      status = STATUS_SUCCESS;

      break;

    case WMI_SERIAL_PORT_PROPERTIES: 
      //CyzDump (CYZWMI, ("CyzQueryWmiDataBlock WMI_SERIAL_PORT_PROPERTIES\n"));
      size = sizeof(SERIAL_COMMPROP) + sizeof(ULONG);

      if (OutBufferSize < size) {
         status = STATUS_BUFFER_TOO_SMALL;
         break;
      }

      *InstanceLengthArray = size;
      CyzGetProperties(
                pDevExt,
                (PSERIAL_COMMPROP)PBuffer
                );
	
      *((PULONG)(((PSERIAL_COMMPROP)PBuffer)->ProvChar)) = 0;

      status = STATUS_SUCCESS;

      break;

    default:
        //CyzDump (CYZWMI, ("CyzQueryWmiDataBlock default\n"));
        status = STATUS_WMI_GUID_NOT_FOUND;
        break;
    }

    status = WmiCompleteRequest( PDevObj, PIrp,
                                  status, size, IO_NO_INCREMENT);

    return status;
}


NTSTATUS
CyzQueryWmiRegInfo(IN PDEVICE_OBJECT PDevObj, OUT PULONG PRegFlags,
                   OUT PUNICODE_STRING PInstanceName,
                   OUT PUNICODE_STRING *PRegistryPath,
                   OUT PUNICODE_STRING MofResourceName,
                   OUT PDEVICE_OBJECT *Pdo)
                                                  
/*++

Routine Description:

    This routine is a callback into the driver to retrieve information about
    the guids being registered. 
            
    Implementations of this routine may be in paged memory

Arguments:

    DeviceObject is the device whose registration information is needed

    *RegFlags returns with a set of flags that describe all of the guids being
        registered for this device. If the device wants enable and disable
        collection callbacks before receiving queries for the registered
        guids then it should return the WMIREG_FLAG_EXPENSIVE flag. Also the
        returned flags may specify WMIREG_FLAG_INSTANCE_PDO in which case
        the instance name is determined from the PDO associated with the
        device object. Note that the PDO must have an associated devnode. If
        WMIREG_FLAG_INSTANCE_PDO is not set then Name must return a unique
        name for the device. These flags are ORed into the flags specified
        by the GUIDREGINFO for each guid.               

    InstanceName returns with the instance name for the guids if
        WMIREG_FLAG_INSTANCE_PDO is not set in the returned *RegFlags. The
        caller will call ExFreePool with the buffer returned.

    *RegistryPath returns with the registry path of the driver. This is 
        required
                
    *MofResourceName returns with the name of the MOF resource attached to
        the binary file. If the driver does not have a mof resource attached
        then this can be returned as NULL.
                
    *Pdo returns with the device object for the PDO associated with this
        device if the WMIREG_FLAG_INSTANCE_PDO flag is retured in 
        *RegFlags.

Return Value:

    status

--*/
{
   PCYZ_DEVICE_EXTENSION pDevExt
       = (PCYZ_DEVICE_EXTENSION)PDevObj->DeviceExtension;
   
   PAGED_CODE();

   //CyzDump (CYZWMI, ("CyzQueryWmiRegInfo\n"));
   *PRegFlags = WMIREG_FLAG_INSTANCE_PDO;
   *PRegistryPath = &CyzGlobals.RegistryPath;
   *Pdo = pDevExt->Pdo;

   return STATUS_SUCCESS;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyzports\cyfriend.c ===
/** FILE: cyfriend.c ********** Module Header ********************************
 *
 *
 *
 *  Copyright (C) 2000 Cyclades Corporation
 *
 *************************************************************************/

#include "cyzports.h"

//
//  For Cyzport
//
TCHAR z_szCyzPort[] = TEXT("Cyclades-Z Port ");
TCHAR z_szPortIndex[] = TEXT("PortIndex");



BOOL
ReplaceFriendlyName(
    IN HDEVINFO         DeviceInfoSet,
    IN PSP_DEVINFO_DATA DeviceInfoData,
    IN PTCHAR           NewComName
)
{

    DEVINST         parentInst;
    HDEVINFO        parentInfo;
    SP_DEVINFO_DATA parentData;
    TCHAR           parentId[MAX_DEVICE_ID_LEN];
    TCHAR           charBuffer[MAX_PATH],
                    deviceDesc[LINE_LEN];
    HKEY            hDeviceKey;
    TCHAR           PortName[20];
    DWORD           PortNameSize,PortIndexSize,PortIndex;
    DWORD           dwErr;
    PTCHAR          comName = NULL;
    DWORD           portNumber = 0;

//  DbgOut(TEXT("ReplaceFriendlyName\n"));

    if((hDeviceKey = SetupDiOpenDevRegKey(DeviceInfoSet,
                                          DeviceInfoData,
                                          DICS_FLAG_GLOBAL,
                                          0,
                                          DIREG_DEV,
                                          KEY_READ)) == INVALID_HANDLE_VALUE) {
        DbgOut(TEXT("SetupDiOpenDevRegKey failed\n"));
        return FALSE;
    }

    PortNameSize = sizeof(PortName);
    dwErr = RegQueryValueEx(hDeviceKey,
                          m_szPortName,
                          NULL,
                          NULL,
                          (PBYTE)PortName,
                          &PortNameSize
                          );

    if (dwErr == ERROR_SUCCESS) {
    PortIndexSize = sizeof(PortIndex);
    dwErr = RegQueryValueEx(hDeviceKey,
                          z_szPortIndex,
                          NULL,
                          NULL,
                          (PBYTE)&PortIndex,
                          &PortIndexSize
                          );
    }

    RegCloseKey(hDeviceKey);

    if(dwErr != ERROR_SUCCESS) {
        DbgOut(TEXT("RegQueryValueEx failed\n"));
        return FALSE;
    }
    if (NewComName == NULL) {
        comName = PortName;
    } else {
        comName = NewComName;
    }
    if (comName == NULL) {
        DbgOut(TEXT("comName NULL\n"));
        return FALSE;
    }

    portNumber = PortIndex+1;

    if (!SetupDiGetDeviceRegistryProperty(DeviceInfoSet,
                                          DeviceInfoData,
                                          SPDRP_DEVICEDESC,
                                          NULL,
                                          (PBYTE)deviceDesc,
                                          sizeof(deviceDesc),
                                          NULL)) {
        DbgOut(TEXT("Couldn't get Device Description\n"));
        return FALSE;
    }

    if (_tcsnicmp (deviceDesc,z_szCyzPort,_tcslen(z_szCyzPort)) != 0){
        DbgOut(TEXT("Device Description is different of Cyclades-Z Port \n"));
        return FALSE;
    }
    
    if (portNumber == 0) {
        DbgOut(TEXT("Invalid portNumber\n"));
        return FALSE;
    }

    if (CM_Get_Parent(&parentInst,DeviceInfoData->DevInst,0) != CR_SUCCESS) {
        DbgOut(TEXT("CM_Get_Parent failed.\n"));
        return FALSE;
    }

    if (CM_Get_Device_ID(parentInst,parentId,CharSizeOf(parentId),0) != CR_SUCCESS) {
        DbgOut(TEXT("CM_Get_Device_ID failed.\n"));
        return FALSE;
    }

    parentInfo = SetupDiCreateDeviceInfoList(NULL,NULL);

    if (parentInfo == INVALID_HANDLE_VALUE) {
        DbgOut(TEXT("SetupDiCreateDeviceInfoList failed\n"));
        return FALSE;
    }
    
    parentData.cbSize = sizeof(SP_DEVINFO_DATA);

    if (SetupDiOpenDeviceInfo(parentInfo,parentId,NULL,0,&parentData)) {

        if (SetupDiGetDeviceRegistryProperty(parentInfo,
                                             &parentData,
                                             SPDRP_FRIENDLYNAME,
                                             NULL,
                                             (PBYTE)deviceDesc,
                                             sizeof(deviceDesc),
                                             NULL) ||  
            SetupDiGetDeviceRegistryProperty(parentInfo,
                                             &parentData,
                                             SPDRP_DEVICEDESC,
                                             NULL,
                                             (PBYTE)deviceDesc,
                                             sizeof(deviceDesc),
                                             NULL)) {
            wsprintf(charBuffer,TEXT("%s Port %2u (%s)"),deviceDesc,portNumber,comName);
//          #if DBG
//          {
//           TCHAR buf[500];
//           wsprintf(buf, TEXT("%s\n"), charBuffer);
//           DbgOut(buf);
//          }
//          #endif

            SetupDiSetDeviceRegistryProperty(DeviceInfoSet,
                                             DeviceInfoData,
                                             SPDRP_FRIENDLYNAME,
                                             (PBYTE)charBuffer,
                                              ByteCountOf(_tcslen(charBuffer) + 1)
                                             );

        }

    } else {
        #if DBG
        {
         TCHAR buf[500];
         wsprintf(buf, TEXT("SetupDiOpenDeviceInfo failed with error %x\n"), GetLastError());
         DbgOut(buf);
        }
        #endif
    }
    
    SetupDiDestroyDeviceInfoList(parentInfo);    
    return TRUE;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyzports\cyfriend.h ===
/** FILE: cyfriend.h ********* Module Header ********************************
 *
 *
 * History:
 *
 *  Copyright (C) 2000 Cyclades Corporation
 *
 *************************************************************************/
//==========================================================================
//                            Include Files
//==========================================================================

#ifndef CYFRIEND_H
#define CYFRIEND_H


//==========================================================================
//                            Function Prototypes
//==========================================================================

//
//  cyfriend.c
//
extern
BOOL
ReplaceFriendlyName(
    IN HDEVINFO         DeviceInfoSet,
    IN PSP_DEVINFO_DATA DeviceInfoData,
    IN PTCHAR           NewComName
);



#endif // CYFRIEND_H
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyzports\cyzhelp.h ===
// Used by cyzcoins.dll, cyzports.dll and cyzcoins.chm.

#define IDH_CYZCOINS_NOHELP                     1
#define IDH_CYZCOINS_NUM_PORTS                  2
#define IDH_CYZCOINS_START_COM                  3
#define IDH_CYZCOINS_RESTORE_DEFAULTS           4
#define IDH_CYZCOINS_PORTSET_ADV_NUMBER         5
#define IDH_CYZCOINS_PORTSET_ADV_DEFAULTS       6
#define IDH_CYZCOINS_PORTSET_ADV_PPP_AWARE      7
#define IDH_CYZCOINS_PORTSET_ADV_WRITE_COMPLETE 8
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyzport\precomp.h ===
#include <stddef.h>
#include <stdarg.h>
#include "ntddk.h"
#include "ntddser.h"
#include <wmilib.h>
#include <wmidata.h>
#include "cyserial.h"
#include <stdio.h>
#include "cyclomz.h"
#include "zfwint.h"
#include "cyzhw.h"
#include "cyzport.h"
#include "cyzportp.h"
#include "cyzlog.h"
#include "log.h"
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyzport\makefile.inc ===
cyz.rc: cyzlog.rc

cyzlog.h cyzlog.rc msg00001.bin: cyzlog.mc
    mc -v cyzlog.mc

=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyzports\portstr.h ===
#ifndef PORTSTR_H
#define PORTSTR_H

//
//  exported from ports.c
//
extern TCHAR  m_szColon[];
extern TCHAR  m_szComma[];
extern TCHAR  m_szCloseParen[];
extern TCHAR  m_szPorts[];
extern TCHAR  m_szCOM[];
extern TCHAR  m_szSERIAL[];

extern TCHAR m_szRegSerialMap[];

extern TCHAR m_szFIFO[];
extern TCHAR m_szDosDev[];
extern TCHAR m_szPollingPeriod[];
extern TCHAR m_szPortName[];


// Strings needed for parallel port installation.
//
extern TCHAR m_szPortSubClass[];
extern TCHAR m_szParallelClassDevName[];
extern TCHAR m_szParallelClassHwId[];

extern int m_nBaudRates[];

extern TCHAR m_sz9600[];

extern TCHAR m_szDefParams[];
extern short m_nDataBits[];
extern TCHAR *m_pszParitySuf[];
extern TCHAR *m_pszLenSuf[];
extern TCHAR *m_pszStopSuf[];
extern TCHAR *m_pszFlowSuf[];

#endif // PORTSTR_H
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyzports\advandlg.h ===
#ifndef PP_H
#define PP_H

#define SERIAL_ADVANCED_SETTINGS
#include "msports.h"

#ifdef USE_P_TRACE_ERR
#define P_TRACE_ERR(_x) MessageBox( GetFocus(), TEXT(_x), TEXT("ports traceerr"), MB_OK | MB_ICONINFORMATION );
#define W_TRACE_ERR(_x) MessageBox( GetFocus(), _x, TEXT("ports traceerr"), MB_OK | MB_ICONINFORMATION );
#else
#define P_TRACE_ERR(_x)
#define W_TRACE_ERR(_x)
#endif

#define DO_COM_PORT_RENAMES

#define RX_MIN 1
#define RX_MAX 14
#define TX_MIN 1
#define TX_MAX 16

TCHAR m_szDevMgrHelp[];

#if defined(_X86_)
//
// For NEC PC98. Following definition comes from user\inc\kbd.h.
// The value must be the same as value in kbd.h.
//
#define NLSKBD_OEM_NEC   0x0D
#endif // FE_SB && _X86_

//
// Structures
//

typedef struct _ADVANCED_DATA
{
    //BOOL   PPPAware;
    BOOL   WriteComplete;
    BOOL   HidePolling;
    BOOL   UseFifoBuffersControl;
    BOOL   UseFifoBuffers;
    BOOL   UseRxFIFOControl;
    BOOL   UseTxFIFOControl;
    DWORD  FifoRxMax;
    DWORD  FifoTxMax;
    DWORD  RxFIFO;
    DWORD  TxFIFO;
    DWORD  PollingPeriod;

    TCHAR  szComName[20];
    TCHAR  szNewComName[20];

    HKEY             hDeviceKey;         // (like ROOT\LEGACY_BEEP\0000)
    HCOMDB           hComDB;

    HDEVINFO         DeviceInfoSet;
    PSP_DEVINFO_DATA DeviceInfoData;

} ADVANCED_DATA, *PADVANCED_DATA;


///////////////////////////////////////////////////////////////////////////////////
// Advanced Dialog Prototypes
///////////////////////////////////////////////////////////////////////////////////

ULONG
FillPortNameCb(
    HWND           ParentHwnd,
    PADVANCED_DATA Params
    );

INT_PTR APIENTRY
AdvancedPortsDlgProc(
    IN HWND   hDlg,
    IN UINT   uMessage,
    IN WPARAM wParam,
    IN LPARAM lParam
    );

ULONG
FillAdvancedDlg(
    IN HWND             DialogHwnd,
    IN PADVANCED_DATA   AdvancedData
    );

BOOL
DisplayAdvancedDialog(
    IN     HWND             DialogHwnd,
    IN OUT PADVANCED_DATA   AdvancedData
);

void
InitializeControls(
    IN HWND             DialogHwnd,
    IN PADVANCED_DATA   AdvancedData
    );

void
RestoreAdvancedDefaultState(
    IN HWND             DialogHwnd,
    IN PADVANCED_DATA   AdvancedData
    );

ULONG
SaveAdvancedSettings(
    IN HWND             DialogHwnd,
    IN PADVANCED_DATA   AdvancedData
    );

void
SetTrackbarTicks(
    IN HWND   TrackbarHwnd,
    IN DWORD  MinVal,
    IN DWORD  MaxVal
    );

void
SetLabelText(
    IN HWND  LabelHwnd, 
    IN DWORD ResId,
    IN ULONG Value
    );

void
HandleTrackbarChange(
    IN HWND DialogHwnd, 
    IN HWND TrackbarHwnd
    );

void
EnableFifoControls(
    HWND DialogHwnd,
    BOOL Enabled
    );

// Context help header file and arrays for devmgr ports tab
// Created 2/21/98 by WGruber NTUA and DoronH NTDEV

//
// "Cyclades-Z Port Advanced Settings" Dialog Box
//

#define IDH_NOHELP      ((DWORD)-1)

#define IDH_DEVMGR_PORTSET_ADVANCED     15840   // "&Advanced" (Button)
#define IDH_DEVMGR_PORTSET_BPS      15841       // "" (ComboBox)
#define IDH_DEVMGR_PORTSET_DATABITS     15842   // "" (ComboBox)
#define IDH_DEVMGR_PORTSET_PARITY       15843   // "" (ComboBox)
#define IDH_DEVMGR_PORTSET_STOPBITS     15844   // "" (ComboBox)
#define IDH_DEVMGR_PORTSET_FLOW     15845       // "" (ComboBox)
#define IDH_DEVMGR_PORTSET_DEFAULTS     15892   // "&Restore Defaults" (Button)

//
// "Advanced Communications Port Properties" Dialog Box
//
#define IDH_DEVMGR_PORTSET_ADV_USEFIFO  16885   // "&Use FIFO buffers (requires 16550 compatible UART)" (Button)
#define IDH_DEVMGR_PORTSET_ADV_TRANS    16842   // "" (msctls_trackbar32)
#define IDH_DEVMGR_PORTSET_ADV_DEVICES  161027  // "" (ComboBox)
#define IDH_DEVMGR_PORTSET_ADV_RECV         16821       // "" (msctls_trackbar32)
#define IDH_DEVMGR_PORTSET_ADV_NUMBER   16846   // "" (ComboBox)
#define IDH_DEVMGR_PORTSET_ADV_DEFAULTS 16844

#endif // PP_H
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyzport\log.h ===
/*++

Copyright (c) 1993  Microsoft Corporation
:ts=4

Module Name:

    log.h

Abstract:

    debug macros

Environment:

    Kernel & user mode

Revision History:

    10-27-95 : created

--*/

#ifndef   __LOG_H__
#define   __LOG_H__


//-----------------
// FANNY_DEBUG #defines
#define ZSIG_OPEN                   0x4F000000  // O
#define ZSIG_CLOSE                  0x43000000  // C
//#define ZSIG_HANDSHAKE_SET        0x48000000  // H
#define ZSIG_PURGE                  0x50000000  // P
#define ZSIG_HANDLE_REDUCED_BUFFER  0x52000000  // R
#define ZSIG_WRITE                  0x57000000  // W
//#define ZSIG_START_WRITE          0x57010000  // W
//#define ZSIG_GIVE_WRITE_TO_ISR    0x57020000  // W
//#define ZSIG_TX_START             0x57030000  // W
//#define ZSIG_WRITE_TO_FW          0x57040000  // W
//#define ZSIG_WRITE_COMPLETE_QUEUE 0x57080000  // W
//#define ZSIG_WRITE_COMPLETE       0x57090000  // W
#define ZSIG_TRANSMIT               0x54000000  // T
//-----------------

#define LOG_MISC          0x00000001        //debug log entries
#define LOG_CNT           0x00000002

//
// Assert Macros
//

#if DBG

ULONG
CyzDbgPrintEx(IN ULONG Level, PCHAR Format, ...);

#define LOGENTRY(mask, sig, info1, info2, info3)     \
    SerialDebugLogEntry(mask, sig, (ULONG_PTR)info1, \
                        (ULONG_PTR)info2,            \
                        (ULONG_PTR)info3)

VOID
SerialDebugLogEntry(IN ULONG Mask, IN ULONG Sig, IN ULONG_PTR Info1,
                    IN ULONG_PTR Info2, IN ULONG_PTR Info3);

VOID
SerialLogInit();

VOID
SerialLogFree();

#else
#define LOGENTRY(mask, sig, info1, info2, info3)
__inline ULONG CyzDbgPrintEx(IN ULONG Level, PCHAR Format, ...) { return 0; }
#endif


#endif // __LOG_H__
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyzport\zfwint.h ===
/*----------------------------------------------------------------------*
 * zfwint.h: Cyclom-Z asynchronous interface definition. 				*
 *																		*
 * rev 2.0 12/13/95 Marcio Saito	Cyclom-Z interface definition.		*
 * rev 2.1 03/13/96 Marcio Saito	minor changes.						*
 * rev 2.2 05/29/96 Marcio Saito	parity/frame error interrupts.		*
 *					Acknolowdge interrupt mode.							*
 *					Break on/off. Data structures						*
 *					converted to ulong to avoid							*
 *					alignment problems.									*
 * rev 2.3 07/12/96 Marcio Saito	HW flow control changes. Flush		*
 *					buffer command added. Loopback						*
 *					operation.											*
 * rev 2.4 07/16/96 Marcio Saito	Diag counters added to CH_CTRL.		*
 * rev 2.5 03/21/97 Marcio Saito	Added INTBACK2						*
 * rez 3.0 06/04/97 Ivan Passos		Added OVR_ERROR and RXOVF			*
 *----------------------------------------------------------------------*/

/*
 *	This file contains the definitions for interfacing with the
 *	Cyclom-Z ZFIRM Firmware.
 */

/* General Constant definitions */

#define	MAX_CHAN	64		/* max number of channels per board */
#define MAX_SEX		4

#define	ZO_NPORTS	(MAX_CHAN / 8)

/* firmware id structure (set after boot) */

#define ID_ADDRESS	0x00000180L	/* signature/pointer address */
#define	ZFIRM_ID	0x5557465AL	/* ZFIRM/U signature */
#define	ZFIRM_HLT	0x59505B5CL	/* Halt signal (due to power supply issue) */
#define ZFIRM_RST	0x56040674L	/* RST signal (due to FW reset) */

#define	ZF_TINACT_DEF	1000	/* default inactivity timeout (1000 ms) */

struct	FIRM_ID {
	uclong	signature;		/* ZFIRM/U signature */
	uclong	zfwctrl_addr;		/* pointer to ZFW_CTRL structure */
};

/* Op. System id */

#define	C_OS_SVR3		0x00000010	/* generic SVR3 */
#define	C_OS_XENIX		0x00000011	/* SCO UNIX SVR3.2 */
#define	C_OS_SCO		0x00000012	/* SCO UNIX SVR3.2 */
#define	C_OS_SVR4		0x00000020	/* generic SVR4 */
#define	C_OS_UXWARE		0x00000021	/* UnixWare */
#define	C_OS_LINUX		0x00000030	/* generic Linux system */
#define	C_OS_SOLARIS	0x00000040	/* generic Solaris system */
#define	C_OS_BSD		0x00000050	/* generic BSD system */
#define	C_OS_DOS		0x00000070	/* generic DOS system */
#define	C_OS_NT			0x00000080	/* generic NT system */
#define	C_OS_OS2		0x00000090	/* generic OS/2 system */
#define C_OS_MAC_OS		0x000000a0	/* MAC/OS */
#define C_OS_AIX		0x000000b0	/* IBM AIX */

/* channel op_mode */

#define	C_CH_DISABLE	0x00000000	/* channel is disabled */
#define	C_CH_TXENABLE	0x00000001	/* channel Tx enabled */
#define	C_CH_RXENABLE	0x00000002	/* channel Rx enabled */
#define	C_CH_ENABLE		0x00000003	/* channel Tx/Rx enabled */
#define	C_CH_LOOPBACK	0x00000004	/* Loopback mode */

/* comm_parity - parity */

#define	C_PR_NONE		0x00000000	/* None */
#define	C_PR_ODD		0x00000001	/* Odd */
#define C_PR_EVEN		0x00000002	/* Even */
#define C_PR_MARK		0x00000004	/* Mark */
#define C_PR_SPACE		0x00000008	/* Space */
#define C_PR_PARITY		0x000000ff

#define	C_PR_DISCARD	0x00000100	/* discard char with frame/par error */
#define C_PR_IGNORE		0x00000200	/* ignore frame/par error */

/* comm_data_l - data length and stop bits */

#define C_DL_CS5		0x00000001
#define C_DL_CS6		0x00000002
#define C_DL_CS7		0x00000004
#define C_DL_CS8		0x00000008
#define	C_DL_CS			0x0000000f
#define C_DL_1STOP		0x00000010
#define C_DL_15STOP		0x00000020
#define C_DL_2STOP		0x00000040
#define	C_DL_STOP		0x000000f0

/* comm_data_l - data length and stop bits */

#define C_CF_NOFIFO		0x00000001

/* interrupt enabling/status */

#define	C_IN_DISABLE	0x00000000	/* zero, disable interrupts */
#define	C_IN_TXBEMPTY	0x00000001	/* tx buffer empty */
#define	C_IN_TXLOWWM	0x00000002	/* tx buffer below LWM */
#define	C_IN_TXFEMPTY	0x00000004	/* tx buffer + FIFO + shift reg. empty */
#define	C_IN_RXHIWM		0x00000010	/* rx buffer above HWM */
#define	C_IN_RXNNDT		0x00000020	/* rx no new data timeout */
#define	C_IN_MDCD		0x00000100	/* modem DCD change */
#define	C_IN_MDSR		0x00000200	/* modem DSR change */
#define	C_IN_MRI		0x00000400	/* modem RI change */
#define	C_IN_MCTS		0x00000800	/* modem CTS change */
#define	C_IN_RXBRK		0x00001000	/* Break received */
#define	C_IN_PR_ERROR	0x00002000	/* parity error */
#define	C_IN_FR_ERROR	0x00004000	/* frame error */
#define C_IN_OVR_ERROR	0x00008000	/* overrun error */
#define C_IN_RXOFL		0x00010000	/* RX buffer overflow */
#define C_IN_IOCTLW		0x00020000	/* I/O control w/ wait */
#define	C_IN_MRTS		0x00040000	/* modem RTS drop */
#define	C_IN_ICHAR		0x00080000	/* special intr. char received */

/* flow control */

#define	C_FL_OXX		0x00000001	/* output Xon/Xoff flow control */
#define	C_FL_IXX		0x00000002	/* input Xon/Xoff flow control */
#define C_FL_OIXANY		0x00000004	/* output Xon/Xoff (any xon) */
#define	C_FL_SWFLOW		0x0000000f

/* flow status */

#define	C_FS_TXIDLE		0x00000000	/* no Tx data in the buffer or UART */
#define	C_FS_SENDING	0x00000001	/* UART is sending data */
#define	C_FS_SWFLOW		0x00000002	/* Tx is stopped by received Xoff */

/* rs_control/rs_status RS-232 signals */

#define	C_RS_PARAM		0x80000000	/* Indicates presence of parameter in
									   IOCTLM command */
#define	C_RS_RTS		0x00000001	/* RTS */
#define	C_RS_DTR		0x00000004	/* DTR */
#define	C_RS_DCD		0x00000100	/* CD */
#define	C_RS_DSR		0x00000200	/* DSR */
#define	C_RS_RI			0x00000400	/* RI */
#define	C_RS_CTS		0x00000800	/* CTS */

/* commands Host <-> Board */

#define	C_CM_RESET		0x01		/* resets/flushes buffers */
#define	C_CM_IOCTL		0x02		/* re-reads CH_CTRL */
#define	C_CM_IOCTLW		0x03		/* re-reads CH_CTRL, intr when done */
#define	C_CM_IOCTLM		0x04		/* RS-232 outputs change */
#define	C_CM_SENDXOFF	0x10		/* sends Xoff */
#define	C_CM_SENDXON	0x11		/* sends Xon */
#define C_CM_CLFLOW		0x12		/* Clears flow control (resume) */
#define	C_CM_SENDBRK	0x41		/* sends break */
#define	C_CM_INTBACK	0x42		/* Interrupt back */
#define	C_CM_SET_BREAK	0x43		/* Tx break on */
#define	C_CM_CLR_BREAK	0x44		/* Tx break off */
#define	C_CM_CMD_DONE	0x45		/* Previous command done */
#define	C_CM_INTBACK2	0x46		/* Alternate Interrupt back */
#define	C_CM_TINACT		0x51		/* sets inactivity detection */
#define	C_CM_IRQ_ENBL	0x52		/* enables generation of interrupts */
#define	C_CM_IRQ_DSBL	0x53		/* disables generation of interrupts */
#define	C_CM_ACK_ENBL	0x54		/* enables acknolowdged interrupt mode */
#define	C_CM_ACK_DSBL	0x55		/* disables acknolowdged intr mode */
#define	C_CM_FLUSH_RX	0x56		/* flushes Rx buffer */
#define	C_CM_FLUSH_TX	0x57		/* flushes Tx buffer */
#define	C_CM_Q_ENABLE	0x58		/* enables queue access from the driver */
#define	C_CM_Q_DISABLE	0x59		/* disables queue access from the driver */

#define	C_CM_TXBEMPTY	0x60		/* Tx buffer is empty */
#define	C_CM_TXLOWWM	0x61		/* Tx buffer low water mark */
#define	C_CM_RXHIWM		0x62		/* Rx buffer high water mark */
#define	C_CM_RXNNDT		0x63		/* rx no new data timeout */
#define	C_CM_TXFEMPTY	0x64		/* Tx buffer, FIFO and shift reg. are empty */
#define	C_CM_ICHAR		0x65		/* Special Interrupt Character received */
#define	C_CM_MDCD		0x70		/* modem DCD change */
#define	C_CM_MDSR		0x71		/* modem DSR change */
#define	C_CM_MRI		0x72		/* modem RI change */
#define	C_CM_MCTS		0x73		/* modem CTS change */
#define	C_CM_MRTS		0x74		/* modem RTS drop */
#define	C_CM_RXBRK		0x84		/* Break received */
#define	C_CM_PR_ERROR	0x85		/* Parity error */
#define	C_CM_FR_ERROR	0x86		/* Frame error */
#define C_CM_OVR_ERROR	0x87		/* Overrun error */
#define	C_CM_RXOFL		0x88		/* RX buffer overflow */
#define	C_CM_CMDERROR	0x90		/* command error */
#define	C_CM_FATAL		0x91		/* fatal error */
#define	C_CM_HW_RESET	0x92		/* reset board */

/*
 *	CH_CTRL - This per port structure contains all parameters
 *	that control an specific port. It can be seen as the
 *	configuration registers of a "super-serial-controller".
 */

struct CH_CTRL {
	uclong	op_mode;		/* operation mode */
	uclong	intr_enable;	/* interrupt masking for the UART */
	uclong	sw_flow;		/* SW flow control */
	uclong	flow_status;	/* output flow status */
	uclong	comm_baud;		/* baud rate  - numerically specified */
	uclong	comm_parity;	/* parity */
	uclong	comm_data_l;	/* data length/stop */
	uclong	comm_flags;		/* other flags */
	uclong	hw_flow;		/* HW flow control */
	uclong	rs_control;		/* RS-232 outputs */
	uclong	rs_status;		/* RS-232 inputs */
	uclong	flow_xon;		/* xon char */
	uclong	flow_xoff;		/* xoff char */
	uclong	hw_overflow;	/* hw overflow counter */
	uclong	sw_overflow;	/* sw overflow counter */
	uclong	comm_error;		/* frame/parity error counter */
 	uclong	ichar;			/* special interrupt char */
	uclong	filler[7];		/* filler to align structures */
};


/*
 *	BUF_CTRL - This per channel structure contains
 *	all Tx and Rx buffer control for a given channel.
 */

struct	BUF_CTRL	{
	uclong	flag_dma;	/* buffers are in Host memory */
	uclong	tx_bufaddr;	/* address of the tx buffer */
	uclong	tx_bufsize;	/* tx buffer size */
	uclong	tx_threshold;	/* tx low water mark */
	uclong	tx_get;		/* tail index tx buf */
	uclong	tx_put;		/* head index tx buf */
	uclong	rx_bufaddr;	/* address of the rx buffer */
	uclong	rx_bufsize;	/* rx buffer size */
	uclong	rx_threshold;	/* rx high water mark */
	uclong	rx_get;		/* tail index rx buf */
	uclong	rx_put;		/* head index rx buf */
	uclong	filler[5];	/* filler to align structures */
};

/*
 *	BOARD_CTRL - This per board structure contains all global 
 *	control fields related to the board.
 */

struct BOARD_CTRL {

	/* static info provided by the on-board CPU */
	uclong	n_channel;	/* number of channels */
	uclong	fw_version;	/* firmware version */

	/* static info provided by the driver */
	uclong	op_system;	/* op_system id */
	uclong	dr_version;	/* driver version */

	/* board control area */
	uclong	inactivity;	/* inactivity control */

	/* host to FW commands */
	uclong	hcmd_channel;	/* channel number */
	uclong	hcmd_param;		/* parameter */

	/* FW to Host commands */
	uclong	fwcmd_channel;	/* channel number */
	uclong	fwcmd_param;	/* parameter */
	uclong  zf_int_queue_addr; /* offset for INT_QUEUE structure */

	/* filler so the structures are aligned */
	uclong	filler[6];
};

/* Host Interrupt Queue */

#define	QUEUE_SIZE	(10*MAX_CHAN)

struct	INT_QUEUE {
	unsigned char	intr_code[QUEUE_SIZE];
	unsigned long	channel[QUEUE_SIZE];
	unsigned long	param[QUEUE_SIZE];
	unsigned long	put;
	unsigned long	get;
};

/*
 *	ZFW_CTRL - This is the data structure that includes all other
 *	data structures used by the Firmware.
 */
 
struct ZFW_CTRL {
	struct BOARD_CTRL	board_ctrl;
	struct CH_CTRL		ch_ctrl[MAX_CHAN];
	struct BUF_CTRL		buf_ctrl[MAX_CHAN];
};


=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyzport\log.c ===
/*++

Copyright (c) 1995,1996 Microsoft Corporation
:ts=4

Module Name:

    log.c

Abstract:

    Debug log Code for serial.

Environment:

    kernel mode only

Notes:

Revision History:

    10-08-95 : created

--*/

#include "precomp.h"
#include <stdio.h>

#if DBG
extern ULONG CyzDebugLevel;

KSPIN_LOCK LogSpinLock;

struct SERIAL_LOG_ENTRY {
    ULONG        le_sig;          // Identifying string
    ULONG_PTR    le_info1;        // entry specific info
    ULONG_PTR    le_info2;        // entry specific info
    ULONG_PTR    le_info3;        // entry specific info
}; // SERIAL_LOG_ENTRY


struct SERIAL_LOG_ENTRY *SerialLStart = 0;    // No log yet
struct SERIAL_LOG_ENTRY *SerialLPtr;
struct SERIAL_LOG_ENTRY *SerialLEnd;

// LogMask changed to LOG_MISC for FANNY_DEBUG
ULONG LogMask = 0x0;
//ULONG LogMask = LOG_MISC;

VOID
SerialDebugLogEntry(IN ULONG Mask, IN ULONG Sig, IN ULONG_PTR Info1,
                    IN ULONG_PTR Info2, IN ULONG_PTR Info3)
/*++

Routine Description:

    Adds an Entry to serial log.

Arguments:

Return Value:

    None.

--*/
{
    KIRQL irql;

typedef union _SIG {
    struct {
        UCHAR Byte0;
        UCHAR Byte1;
        UCHAR Byte2;
        UCHAR Byte3;
    } b;
    ULONG l;
} SIG, *PSIG;

    SIG sig, rsig;


    if (SerialLStart == 0) {
        return;
    }

    if ((Mask & LogMask) == 0) {
        return;
    }

    irql = KeGetCurrentIrql();

    if (irql < DISPATCH_LEVEL) {
        KeAcquireSpinLock(&LogSpinLock, &irql);
    } else {
        KeAcquireSpinLockAtDpcLevel(&LogSpinLock);
    }

    if (SerialLPtr > SerialLStart) {
        SerialLPtr -= 1;    // Decrement to next entry
    } else {
        SerialLPtr = SerialLEnd;
    }

    sig.l = Sig;
    rsig.b.Byte0 = sig.b.Byte3;
    rsig.b.Byte1 = sig.b.Byte2;
    rsig.b.Byte2 = sig.b.Byte1;
    rsig.b.Byte3 = sig.b.Byte0;

    SerialLPtr->le_sig = rsig.l;
    SerialLPtr->le_info1 = Info1;
    SerialLPtr->le_info2 = Info2;
    SerialLPtr->le_info3 = Info3;

    ASSERT(SerialLPtr >= SerialLStart);

    if (irql < DISPATCH_LEVEL) {
        KeReleaseSpinLock(&LogSpinLock, irql);
    } else {
        KeReleaseSpinLockFromDpcLevel(&LogSpinLock);
    }

    return;
}


VOID
SerialLogInit()
/*++

Routine Description:

    Init the debug log - remember interesting information in a circular buffer

Arguments:

Return Value:

    None.

--*/
{
#ifdef MAX_DEBUG
    ULONG logSize = 4096*6;
#else
    ULONG logSize = 4096*3;
#endif


    KeInitializeSpinLock(&LogSpinLock);

    SerialLStart = ExAllocatePoolWithTag(NonPagedPool, logSize, 'PzyC');

    if (SerialLStart) {
        SerialLPtr = SerialLStart;

        // Point the end (and first entry) 1 entry from the end of the segment
        SerialLEnd = SerialLStart + (logSize / sizeof(struct SERIAL_LOG_ENTRY))
            - 1;
    } else {
#if DBG

       /* DO NOTHING */;

       //
       // we used to break here, but that messed up low resource simulation
       // testing on checked builds.
       //


       // DbgBreakPoint ();
#endif
    }

    return;
}

VOID
SerialLogFree(
    )
/*++

Routine Description:

Arguments:

Return Value:

    None.

--*/
{
    if (SerialLStart) {
        ExFreePool(SerialLStart);
    }

    return;
}

#define SERIAL_DBGPRINT_BUFSIZE 512

ULONG
CyzDbgPrintEx(IN ULONG Level, PCHAR Format, ...)
{
   va_list arglist;
   ULONG rval;
   ULONG Mask;
   ULONG cb;
   UCHAR buffer[SERIAL_DBGPRINT_BUFSIZE];

   if (Level > 31) {
        Mask = Level;

   } else {
      Mask = 1 << Level;
   }

   if ((Mask & CyzDebugLevel) == 0) {
      return STATUS_SUCCESS;
   }

   va_start(arglist, Format);

   DbgPrint("Cyzport: ");

   cb = _vsnprintf(buffer, sizeof(buffer), Format, arglist);

   if (cb == -1) {
      buffer[sizeof(buffer) - 2] = '\n';
   }

   DbgPrint("%s", buffer);

//   rval = vDbgPrintEx(DPFLTR_SERIAL_ID, Level, Format, arglist);

   va_end(arglist);

   rval = STATUS_SUCCESS;

   return rval;
}

#endif // DBG
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyzports\advandlg.c ===
///////////////////////////////////////////////////////////////////////////
// Advanced Dialog Functions
///////////////////////////////////////////////////////////////////////////

#include "cyzhelp.h"
#include "cyzports.h"
#include "advandlg.h"
#include <htmlhelp.h>

#include <windowsx.h>

TCHAR m_szDevMgrHelp[] = _T("devmgr.hlp");
TCHAR m_szCyzcoinsHelp[] = _T("cyzcoins.chm");

//  For Cyclades-Z
//TCHAR m_szPPPAware[]        = TEXT( "PPPaware" );
TCHAR m_szWriteComplete[]   = TEXT( "WriteComplete" );

const DWORD HelpIDs[]=
{
    IDC_STATIC,         IDH_NOHELP,
    IDC_ADVANCED,       IDH_DEVMGR_PORTSET_ADVANCED, // "&Advanced" (Button)
    PP_PORT_BAUDRATE,   IDH_DEVMGR_PORTSET_BPS,      // "" (ComboBox)
    PP_PORT_DATABITS,   IDH_DEVMGR_PORTSET_DATABITS, // "" (ComboBox)
    PP_PORT_PARITY,     IDH_DEVMGR_PORTSET_PARITY,   // "" (ComboBox)
    PP_PORT_STOPBITS,   IDH_DEVMGR_PORTSET_STOPBITS, // "" (ComboBox)
    PP_PORT_FLOWCTL,    IDH_DEVMGR_PORTSET_FLOW,     // "" (ComboBox)
    IDC_RESTORE_PORT,   IDH_DEVMGR_PORTSET_DEFAULTS, // "&Restore Defaults" (Button)
    0, 0
};

//
// write out values in tenths of a sec
//
#define SECONDS_CONVERSION_FACTOR  (10)
#define NUM_POLLING_PERIODS 7

DWORD PollingPeriods[NUM_POLLING_PERIODS] = {
           -1,
            0,
            1 * SECONDS_CONVERSION_FACTOR,
            5 * SECONDS_CONVERSION_FACTOR,
            10 * SECONDS_CONVERSION_FACTOR,
            30 * SECONDS_CONVERSION_FACTOR,
            60 * SECONDS_CONVERSION_FACTOR
            };

TCHAR PeriodDescription[NUM_POLLING_PERIODS+1][40] = {
    { _T("Disabled") },
    { _T("Manually") },
    { _T("Every second") },
    { _T("Every 5 seconds") },
    { _T("Every 10 seconds") },
    { _T("Every 30 seconds") },
    { _T("Every minute") },
    { _T("Other (every %d sec)") }
    };

ULONG RxValues[4] = { 1, 4, 8, 14};

TCHAR m_szRxFIFO[] =        _T("RxFIFO");
TCHAR m_szTxFIFO[] =        _T("TxFIFO");
TCHAR m_szFifoRxMax[] =     _T("FifoRxMax");
TCHAR m_szFifoTxMax[] =     _T("FifoTxMax");

//const DWORD AdvanHelpIDs[] =
//{
//    IDC_DESC_1,             IDH_NOHELP,
//    IDC_DESC_2,             IDH_NOHELP,
//
//    IDC_FIFO,               IDH_DEVMGR_PORTSET_ADV_USEFIFO, // "Use FIFO buffers (requires 16550 compatible UART)" (Button)
//
//    IDC_RECEIVE_TEXT,       IDH_NOHELP,                     // "&Receive Buffer:" (Static)
//    IDC_RECEIVE_SLIDER,     IDH_DEVMGR_PORTSET_ADV_RECV,    // "" (msctls_trackbar32)
//    IDC_RECEIVE_LOW,        IDH_NOHELP,                     // "Low (%d)" (Static)
//    IDC_RECEIVE_HIGH,       IDH_NOHELP,                     // "High (%d)" (Static)
//    IDC_RXVALUE,            IDH_NOHELP,
//
//    IDC_TRANSMIT_TEXT,      IDH_NOHELP,                     // "&Transmit Buffer:" (Static)
//    IDC_TRANSMIT_SLIDER,    IDH_DEVMGR_PORTSET_ADV_TRANS,   // "" (msctls_trackbar32)
//    IDC_TRANSMIT_LOW,       IDH_NOHELP,                     // "Low (%d)" (Static)
//    IDC_TRANSMIT_HIGH,      IDH_NOHELP,                     // "High (%d)" (Static)
//    IDC_TXVALUE,            IDH_NOHELP,
//
//    IDC_POLL_DESC,          IDH_NOHELP,
//    IDC_POLL_PERIOD,        IDH_DEVMGR_PORTSET_ADV_DEVICES, // "" (ComboBox)
//
//    PP_PORT_NUMBER,         IDH_DEVMGR_PORTSET_ADV_NUMBER,  // "" (ComboBox)
//    IDC_COMNUMTEXT,         IDH_NOHELP,                     // "COM &Port Number:" (Static)
//
//    IDC_RESTORE,            IDH_DEVMGR_PORTSET_ADV_DEFAULTS,// "&Restore Defaults" (Button)
//    0, 0
//};

const DWORD AdvanHelpIDs[] =
{
    IDC_DESC_1,             IDH_NOHELP,
    IDC_DESC_2,             IDH_NOHELP,

    IDC_POLL_DESC,          IDH_NOHELP,
    IDC_POLL_PERIOD,        IDH_DEVMGR_PORTSET_ADV_DEVICES,    // "" (ComboBox)

    PP_PORT_NUMBER,         IDH_CYZCOINS_PORTSET_ADV_NUMBER,   // "" (ComboBox)
    IDC_COMNUMTEXT,         IDH_NOHELP,                        // "COM &Port Number:" (Static)

    IDC_RESTORE,            IDH_CYZCOINS_PORTSET_ADV_DEFAULTS, // "&Restore Defaults" (Button)

//    IDC_PPP_AWARE,          IDH_CYZCOINS_PORTSET_ADV_PPP_AWARE,// Optimization for RRAS (CheckBox)
    IDC_WRITE_COMPLETE,     IDH_CYZCOINS_PORTSET_ADV_WRITE_COMPLETE, // Return Write status (CheckBox)
    0, 0
};

#define Trackbar_SetPos(hwndTb, Redraw, Position)\
    (VOID) SendMessage(hwndTb, TBM_SETPOS, (WPARAM) Redraw, (LPARAM) Position)

#define Trackbar_SetRange(hwndTb, Redraw, MinVal, MaxVal)\
    (VOID) SendMessage(hwndTb, TBM_SETRANGE, (WPARAM) Redraw, (LPARAM) MAKELONG(MinVal, MaxVal))

#define Trackbar_SetTic(hwndTb, Tic)\
    (VOID) SendMessage(hwndTb, TBM_SETTIC, (WPARAM) 0, (LPARAM) Tic)

#define Trackbar_GetPos(hwndTb)\
    (DWORD) SendMessage(hwndTb, TBM_GETPOS, (WPARAM) 0, (LPARAM) 0)



BOOL
Advanced_OnCommand(
    HWND ParentHwnd,
    int  ControlId,
    HWND ControlHwnd,
    UINT NotifyCode
    );


BOOL
Advanced_OnContextMenu(
    HWND HwndControl,
    WORD Xpos,
    WORD Ypos
    );

void
Advanced_OnHelp(
    HWND       ParentHwnd,
    LPHELPINFO HelpInfo
    );

BOOL
Advanced_OnInitDialog(
    HWND    ParentHwnd,
    HWND    FocusHwnd,
    LPARAM  Lparam
    );

/*++

Routine Description: AdvancedPortsDlgProc

    The windows proc for the Advanced properties window

Arguments:

    hDlg, uMessage, wParam, lParam: standard windows DlgProc parameters

Return Value:

    BOOL: FALSE if the page could not be created

--*/
INT_PTR APIENTRY
AdvancedPortsDlgProc(
    IN HWND   hDlg,
    IN UINT   uMessage,
    IN WPARAM wParam,
    IN LPARAM lParam
    )
{
    switch(uMessage) {
    case WM_COMMAND:
        return Advanced_OnCommand(hDlg,
                                  (int) LOWORD(wParam),
                                  (HWND)lParam,
                                  (UINT) HIWORD(wParam));

    case WM_CONTEXTMENU:
        return Advanced_OnContextMenu((HWND)wParam, LOWORD(lParam), HIWORD(lParam));

    case WM_HELP:
        Advanced_OnHelp(hDlg, (LPHELPINFO) lParam);
        break;

    case WM_HSCROLL:
        HandleTrackbarChange(hDlg, (HWND) lParam);
        return TRUE;

    case WM_INITDIALOG:
        return Advanced_OnInitDialog(hDlg, (HWND) wParam, lParam);
    }

    return FALSE;
} /* AdvancedPortsDlgProc */

BOOL
Advanced_OnCommand(
    HWND ParentHwnd,
    int  ControlId,
    HWND ControlHwnd,
    UINT NotifyCode
    )
{
    PADVANCED_DATA advancedData =
        (PADVANCED_DATA) GetWindowLongPtr(ParentHwnd, DWLP_USER);

    switch(ControlId) {

    case IDC_FIFO:
        //
        // Disable or enable the sliders
        //
        EnableFifoControls(ParentHwnd, IsDlgButtonChecked(ParentHwnd, IDC_FIFO));
        return TRUE;

    case IDOK:
        SaveAdvancedSettings(ParentHwnd, advancedData);
        // fall through

    case IDCANCEL:
        EndDialog(ParentHwnd, ControlId);
        return TRUE;

    case IDC_RESTORE:
        RestoreAdvancedDefaultState(ParentHwnd, advancedData);
        return TRUE;
    }

    return FALSE;
}

BOOL
Advanced_OnContextMenu(
    HWND HwndControl,
    WORD Xpos,
    WORD Ypos
    )
{
//  WinHelp(HwndControl,
//          m_szCyzcoinsHelp,
//          HELP_CONTEXTMENU,
//          (ULONG_PTR) AdvanHelpIDs);
    HtmlHelp(HwndControl,
            m_szCyzcoinsHelp,
            HH_TP_HELP_CONTEXTMENU,
            (ULONG_PTR) AdvanHelpIDs);

    return FALSE;
}

void
Advanced_OnHelp(
    HWND       ParentHwnd,
    LPHELPINFO HelpInfo
    )
{
    if (HelpInfo->iContextType == HELPINFO_WINDOW) {
//      WinHelp((HWND) HelpInfo->hItemHandle,
//              m_szCyzcoinsHelp,
//              HELP_WM_HELP,
//              (ULONG_PTR) AdvanHelpIDs);
        HtmlHelp((HWND) HelpInfo->hItemHandle,
                m_szCyzcoinsHelp,
                HH_TP_HELP_WM_HELP, 
                (ULONG_PTR) AdvanHelpIDs);
    }
}

BOOL
Advanced_OnInitDialog(
    HWND    ParentHwnd,
    HWND    FocusHwnd,
    LPARAM  Lparam
    )
{
    PADVANCED_DATA advancedData;
    TCHAR          szFormat[200];
    TCHAR          szBuffer[200];
    advancedData = (PADVANCED_DATA) Lparam;

    //
    // Initialize the dialog box parameters
    //
    FillAdvancedDlg(ParentHwnd, advancedData);
    SetWindowLongPtr(ParentHwnd, DWLP_USER, (ULONG_PTR) advancedData);

    //
    // Set up the dialog box with these initialized parameters
    //
    InitializeControls(ParentHwnd, advancedData);

    LoadString(g_hInst, IDS_ADVANCED_SETTINGS_FOR, szFormat, CharSizeOf(szFormat));
    wsprintf(szBuffer, szFormat, advancedData->szComName);
    SetWindowText(ParentHwnd, szBuffer);

    return TRUE;
}


BOOL InternalAdvancedDialog(
    IN     HWND           ParentHwnd,
    IN OUT PADVANCED_DATA AdvancedData
    )
{
    AdvancedData->hComDB = HCOMDB_INVALID_HANDLE_VALUE;
    ComDBOpen(&AdvancedData->hComDB);

    DialogBoxParam(g_hInst,
                   MAKEINTRESOURCE(DLG_PP_ADVPORTS),
                   ParentHwnd,
                   AdvancedPortsDlgProc,
                   (DWORD_PTR) AdvancedData);

    ComDBClose(AdvancedData->hComDB);
    AdvancedData->hComDB = HCOMDB_INVALID_HANDLE_VALUE;

    return TRUE;
}


/*++

Routine Description: DisplayAdvancedDialog

    Opens the devices instance and checks to see if it is valid.  If so, then the advanced
    dialog is displayed.  Otherwise a message is displayed to the user stating that the user
    does not have write access to this particular key.

Arguments:

    ParentHwnd - Handle to the parent dialog (Port Settings Property Sheet)
    AdvancedData - hDeviceKey will be set with the device's key in the registry upon success,
                    INVALID_HANDLE_VALUE upon error

Return Value:

    None

--*/
BOOL DisplayAdvancedDialog(
    IN      HWND           ParentHwnd,
    IN OUT  PADVANCED_DATA AdvancedData
    )
{
    AdvancedData->hDeviceKey =
        SetupDiOpenDevRegKey(AdvancedData->DeviceInfoSet,
                             AdvancedData->DeviceInfoData,
                             DICS_FLAG_GLOBAL,
                             0,
                             DIREG_DEV,
                             KEY_ALL_ACCESS);

    if (AdvancedData->hDeviceKey == INVALID_HANDLE_VALUE) {
        MyMessageBox(ParentHwnd,
                     IDS_NO_WRITE_PRVILEGE,
                     IDS_NAME_PROPERTIES,
                     MB_OK | MB_ICONINFORMATION);
        return FALSE;
    }
    else {
            return InternalAdvancedDialog(ParentHwnd, AdvancedData);
    }
}

/*++

Routine Description: EnableFifoControls

    Enables/Disables all of the controls bounded by the rectangle with the Use Fifo
    checkbox.

Arguments:

    hDlg - Handle to the dialog
    enabled - flag to either enable/disable the controls

Return Value:

    None

--*/
void EnableFifoControls(IN HWND hDlg,
                        IN BOOL enabled)
{
   // The actual trackbar/slider
   EnableWindow(GetDlgItem(hDlg, IDC_RECEIVE_SLIDER), enabled);

   // "Low (xxx)" (Receive)
   EnableWindow(GetDlgItem(hDlg, IDC_RECEIVE_LOW), enabled);

   // "High (xxx)" (Receive)
   EnableWindow(GetDlgItem(hDlg, IDC_RECEIVE_HIGH), enabled);

   // "Receive Buffer:  "
   EnableWindow(GetDlgItem(hDlg, IDC_RECEIVE_TEXT), enabled);

   // "(xxx)" (Actual value of trackbar, Receive)
   EnableWindow(GetDlgItem(hDlg, IDC_RXVALUE), enabled);

   // The actual trackbar/slider
   EnableWindow(GetDlgItem(hDlg, IDC_TRANSMIT_SLIDER), enabled);

   // "Low (xxx)" (Transmit)
   EnableWindow(GetDlgItem(hDlg, IDC_TRANSMIT_LOW), enabled);

   // "High (xxx)" (Transmit)
   EnableWindow(GetDlgItem(hDlg, IDC_TRANSMIT_HIGH), enabled);

   // "Transmit Buffer" (Transmit)
   EnableWindow(GetDlgItem(hDlg, IDC_TRANSMIT_TEXT), enabled);

   // "(xxx)" (Actual value of trackbar, Trasmist)
   EnableWindow(GetDlgItem(hDlg, IDC_TXVALUE), enabled);
}

/*++

Routine Description: HandleTrackbarChange

    Whenever the user changes the trackbar thumb position, update the control
    to its right which displays its actual numeric value

Arguments:

    hDlg - Handle to the parent dialog
    hTrackbar - Handle to the trackbar whose thumb has changed

Return Value:

    None

--*/
void HandleTrackbarChange(IN HWND hDlg,
                          IN HWND hTrackbar
                          )
{
    DWORD ctrlID;
    TCHAR szCurrentValue[10];
    ULONG position;

    position = Trackbar_GetPos(hTrackbar);

    if (GetDlgCtrlID(hTrackbar) == IDC_RECEIVE_SLIDER) {
        //
        // Rx we need to translate the tick position from index to value
        //
        wsprintf(szCurrentValue, TEXT("(%d)"), RxValues[position-1]);
        ctrlID = IDC_RXVALUE;
    }
    else {
        //
        // Tx is just a straight translation between value and index
        //
        wsprintf(szCurrentValue, TEXT("(%d)"), position);
        ctrlID = IDC_TXVALUE;
    }
    SetDlgItemText(hDlg, ctrlID, szCurrentValue);
}

DWORD
RxValueToTrackbarPosition(IN OUT PDWORD RxValue
               )
{
    switch (*RxValue) {
    case 1:  return 1;
    case 4:  return 2;
    case 8:  return 3;
    case 14: return 4;
    }

    //
    // busted value
    //
    *RxValue = 14;
    return 4;
}

/*++

Routine Description:   SetTxTrackbarTicks

    Creates a tick at 1/4, half, and 3/4 across the span of the trackbar

Arguments:

    hTrackbar - handle to the trackbar that will receive the ticks
    minVal, maxVal - Range on the trackbar

Return Value:

    None

--*/
void
SetTxTrackbarTics(
    IN HWND   TrackbarHwnd
    )
{
    Trackbar_SetTic(TrackbarHwnd, 6);
    Trackbar_SetTic(TrackbarHwnd, 11);
}

/*++

Routine Description:  SetLabelText

    Sets the label's to the string identified by resID concated with the passed
    in value and closing paren.

    The final string is  [resID string][value])

Arguments:

    hLabel - handle to the control whose text is going to change
    resID  - resource ID for the beginning of the string that will become the
              label's text
    value  - number to be concated into the string


Return Value:

    None

--*/
void
SetLabelText(
    IN HWND     LabelHwnd,
    IN DWORD    ResId,
    IN ULONG    Value
    )
{
    TCHAR szTemp[258], txt[258];

    if (LoadString(g_hInst, ResId, szTemp, CharSizeOf(szTemp))) {
        lstrcpy(txt, szTemp);
        wsprintf(szTemp, _T("%d)"), Value);
        lstrcat(txt, szTemp);
    }
    else {
        lstrcpy(txt, _T("Low"));
    }
    SetWindowText(LabelHwnd, txt);
}

/*++

Routine Description: InitializeControls

    Initializes all of the controls that represent Fifo

Arguments:

    ParentHwnd - handle to the dialog
    AdvancedData - Contains all of the initial values

Return Value:

    None

--*/
void InitializeControls(
    IN HWND           ParentHwnd,
    IN PADVANCED_DATA AdvancedData
    )
{
    TCHAR    szCurrentValue[40];
    HWND     hwnd;
    int      i, periodIdx;

    //---------------------------------------------------------
    // ATTENTION: (Fanny)
    // For now disable FIFO buffers selections. This feature
    // will be enabled when we add support to this in the driver.
    #define CD1400_RXFIFO_MIN 1
    #define CD1400_RXFIFO_MAX 12
    #define CD1400_TXFIFO_MIN 1
    #define CD1400_TXFIFO_MAX 12
    SetLabelText(GetDlgItem(ParentHwnd, IDC_RECEIVE_LOW),IDS_LOW,
                    CD1400_RXFIFO_MIN);
    SetLabelText(GetDlgItem(ParentHwnd, IDC_RECEIVE_HIGH),IDS_HIGH,
                    CD1400_RXFIFO_MAX);
    SetLabelText(GetDlgItem(ParentHwnd, IDC_TRANSMIT_LOW),IDS_LOW,
                    CD1400_TXFIFO_MIN);
    SetLabelText(GetDlgItem(ParentHwnd, IDC_TRANSMIT_HIGH),IDS_HIGH,
                    CD1400_TXFIFO_MAX);
    AdvancedData->UseFifoBuffersControl = FALSE;
    AdvancedData->UseRxFIFOControl = FALSE;
    AdvancedData->UseTxFIFOControl = FALSE;
    EnableWindow(GetDlgItem(ParentHwnd, IDC_DESC_1), FALSE);
    EnableWindow(GetDlgItem(ParentHwnd, IDC_DESC_2), FALSE);
    // END ATTENTION
    //---------------------------------------------------------

    //
    // Set up the Fifo buffers checkbox
    //
    if (!AdvancedData->UseFifoBuffersControl) {
        //
        // Something went wrong with the Fifo buffers control. Disable
        // the checkbox
        //
        CheckDlgButton(ParentHwnd, IDC_FIFO, BST_UNCHECKED);
        EnableWindow(GetDlgItem(ParentHwnd, IDC_FIFO), FALSE);
        EnableFifoControls(ParentHwnd, FALSE);
    }
    else {
        EnableWindow(GetDlgItem(ParentHwnd, IDC_FIFO), TRUE);

        if (!AdvancedData->UseFifoBuffers) {
            EnableFifoControls(ParentHwnd, FALSE);
            CheckDlgButton(ParentHwnd, IDC_FIFO, BST_UNCHECKED);
        }
        else {
            EnableFifoControls(ParentHwnd, TRUE);
            CheckDlgButton(ParentHwnd, IDC_FIFO, BST_CHECKED);
        }
    }

    //
    // Set up the sliders
    //
    if (!AdvancedData->UseRxFIFOControl ||
        !AdvancedData->UseTxFIFOControl) {
        //
        // Something went wrong with the sliders.
        // Disable them
        //
        CheckDlgButton(ParentHwnd, IDC_FIFO, BST_UNCHECKED);
        EnableWindow(GetDlgItem(ParentHwnd, IDC_FIFO), FALSE);
        EnableFifoControls(ParentHwnd, FALSE);
    }
    else {
        //
        // Set up Rx Slider
        //
        hwnd = GetDlgItem(ParentHwnd, IDC_RECEIVE_SLIDER);

        Trackbar_SetRange(hwnd, TRUE, RX_MIN, 4);
        Trackbar_SetPos(hwnd,
                        TRUE,
                        RxValueToTrackbarPosition(&AdvancedData->RxFIFO));

        SetLabelText(GetDlgItem(ParentHwnd, IDC_RECEIVE_LOW),
                     IDS_LOW,
                     RX_MIN);
        SetLabelText(GetDlgItem(ParentHwnd, IDC_RECEIVE_HIGH),
                     IDS_HIGH,
                     AdvancedData->FifoRxMax);

        wsprintf(szCurrentValue, TEXT("(%d)"), AdvancedData->RxFIFO);
        SetDlgItemText(ParentHwnd, IDC_RXVALUE, szCurrentValue);

        //
        // Set up the Tx slider
        //
        hwnd = GetDlgItem(ParentHwnd, IDC_TRANSMIT_SLIDER);
        Trackbar_SetRange(hwnd, TRUE, TX_MIN, AdvancedData->FifoTxMax);
        Trackbar_SetPos(hwnd, TRUE, AdvancedData->TxFIFO);

        SetTxTrackbarTics(hwnd);

        SetLabelText(GetDlgItem(ParentHwnd, IDC_TRANSMIT_LOW),
                     IDS_LOW,
                     TX_MIN);
        SetLabelText(GetDlgItem(ParentHwnd, IDC_TRANSMIT_HIGH),
                     IDS_HIGH,
                     AdvancedData->FifoTxMax);

        wsprintf(szCurrentValue, TEXT("(%d)"), AdvancedData->TxFIFO);
        SetDlgItemText(ParentHwnd, IDC_TXVALUE, szCurrentValue);
    }

    FillPortNameCb(ParentHwnd, AdvancedData);

    //
    // Display the "Enable Optimization For RRAS" check box
    //
//    EnableWindow(GetDlgItem(ParentHwnd, IDC_PPP_AWARE), TRUE);
//    if (AdvancedData->PPPAware) {
//        CheckDlgButton(ParentHwnd, IDC_PPP_AWARE, BST_CHECKED);
//    } else {
//        CheckDlgButton(ParentHwnd, IDC_PPP_AWARE, BST_UNCHECKED);
//    }

    //
    // Display the "Return Write status only after firmware buffer empty" check box
    //
    EnableWindow(GetDlgItem(ParentHwnd, IDC_WRITE_COMPLETE), TRUE);
    if (AdvancedData->WriteComplete) {
        CheckDlgButton(ParentHwnd, IDC_WRITE_COMPLETE, BST_CHECKED);
    } else {
        CheckDlgButton(ParentHwnd, IDC_WRITE_COMPLETE, BST_UNCHECKED);
    }

    if (!AdvancedData->HidePolling) {

        //
        // Add the descriptions for each polling period and select the current
        // setting
        //
        hwnd = GetDlgItem(ParentHwnd, IDC_POLL_PERIOD);
        periodIdx = NUM_POLLING_PERIODS;
        for (i = 0; i < NUM_POLLING_PERIODS; i++) {
            ComboBox_AddString(hwnd, PeriodDescription[i]);
            if (PollingPeriods[i] == AdvancedData->PollingPeriod) {
                periodIdx = i;
            }
        }

        if (periodIdx == NUM_POLLING_PERIODS) {
            wsprintf(szCurrentValue,
                     PeriodDescription[NUM_POLLING_PERIODS],
                     AdvancedData->PollingPeriod / SECONDS_CONVERSION_FACTOR);
            ComboBox_AddString(hwnd, szCurrentValue);
        }

        ComboBox_SetCurSel(hwnd, periodIdx);
    }
    else {
       ShowWindow(GetDlgItem(ParentHwnd, IDC_POLL_PERIOD), SW_HIDE);
       ShowWindow(GetDlgItem(ParentHwnd, IDC_POLL_DESC), SW_HIDE);
    }
} /* InitializeControls */


/*++

Routine Description:  RestoreAdvancedDefaultState

    Restores all values and UI to their default state, specifically:
    o All Fifo related child controls are enabled
    o The Rx trackbar is set to its max value
    o The Tx trackbar is set to its max value
    o The number of the comport is reset to its original value

Return Value:

    None

--*/
void RestoreAdvancedDefaultState(
    IN HWND           ParentHwnd,
    IN PADVANCED_DATA AdvancedData
    )
{
    USHORT ushIndex;
    TCHAR  szCurrentValue[10];
    int    i;

//-------------------------------------------------------------------------
// ATTENTION: For now, don't show anything related to FIFO buffers (Fanny)
#if 0
//-------------------------------------------------------------------------

    //
    // Set up the Fifo buffers checkbox
    //
    EnableWindow(GetDlgItem(ParentHwnd, IDC_FIFO), TRUE);

    EnableFifoControls(ParentHwnd, TRUE);
    CheckDlgButton(ParentHwnd, IDC_FIFO, BST_CHECKED);

    //
    // Set up the sliders and the static control that show their numberic value
    //
    Trackbar_SetPos(GetDlgItem(ParentHwnd, IDC_RECEIVE_SLIDER),
                    TRUE,
                    RxValueToTrackbarPosition(&AdvancedData->FifoRxMax));
    wsprintf(szCurrentValue, TEXT("(%d)"), AdvancedData->FifoRxMax);
    SetDlgItemText(ParentHwnd, IDC_RXVALUE, szCurrentValue);

    Trackbar_SetPos(GetDlgItem(ParentHwnd, IDC_TRANSMIT_SLIDER), TRUE, AdvancedData->FifoTxMax);
    wsprintf(szCurrentValue, TEXT("(%d)"), AdvancedData->FifoTxMax);
    SetDlgItemText(ParentHwnd, IDC_TXVALUE, szCurrentValue);

//-------------------------------------------------------------------------
// END ATTENTION
#endif
//-------------------------------------------------------------------------

    //
    // Set the COM name to whatever it is currently set to in the registry
    //
    ushIndex =
        (USHORT) ComboBox_FindString(GetDlgItem(ParentHwnd, PP_PORT_NUMBER),
                                     -1,
                                     AdvancedData->szComName);

    ushIndex = (ushIndex == CB_ERR) ? 0 : ushIndex;

    // Set Enable Optimization For RRAS
//    EnableWindow(GetDlgItem(ParentHwnd, IDC_PPP_AWARE), TRUE);
//    CheckDlgButton(ParentHwnd, IDC_PPP_AWARE, BST_CHECKED);

    // Clear Return Write status only after firmware buffer empty
    EnableWindow(GetDlgItem(ParentHwnd, IDC_WRITE_COMPLETE), TRUE);
    CheckDlgButton(ParentHwnd, IDC_WRITE_COMPLETE, BST_UNCHECKED);

    ComboBox_SetCurSel(GetDlgItem(ParentHwnd, PP_PORT_NUMBER), ushIndex);
    ComboBox_SetCurSel(GetDlgItem(ParentHwnd, IDC_POLL_PERIOD), POLL_PERIOD_DEFAULT_IDX);
} /* RestoreAdvancedDefaultStates */


/*++

Routine Description: FillPortNameCb

    fill in the Port Name combo box selection with a list
    of possible un-used portnames

Arguments:

    poppOurPropParams: where to save the data to
    hDlg:              address of the window

Return Value:

    ULONG: returns error messages

--*/
ULONG
FillPortNameCb(
    HWND            ParentHwnd,
    PADVANCED_DATA  AdvancedData
    )
{
    BYTE  portUsage[MAX_COM_PORT/8];
    DWORD tmp, portsReported = 0;
    int   i, j, nEntries;
    int   nCurPortNum;
    TCHAR szCom[40];
    TCHAR szInUse[40];
    char  mask, *current;
    HWND  portHwnd;

    portHwnd = GetDlgItem(ParentHwnd, PP_PORT_NUMBER);

    //
    // Check if our ComName is blank. If it is, disable the com port selector
    //
    if (_tcscmp(AdvancedData->szComName, TEXT("")) == 0) {
        EnableWindow(portHwnd, FALSE);
        EnableWindow(GetDlgItem(ParentHwnd, IDC_COMNUMTEXT), FALSE);
        return 0;
    }

    //
    // assumes szComPort filled in...
    //
    nCurPortNum = myatoi(&AdvancedData->szComName[3]);

    if (!LoadString(g_hInst, IDS_IN_USE, szInUse, CharSizeOf(szInUse))) {
        wcscpy(szInUse, _T(" (in use)"));
    }

    //
    // first tally up which ports NOT to offer in list box
    //
    ZeroMemory(portUsage, MAX_COM_PORT/8);

    if (AdvancedData->hComDB != HCOMDB_INVALID_HANDLE_VALUE) {
        ComDBGetCurrentPortUsage(AdvancedData->hComDB,
                                 portUsage,
                                 MAX_COM_PORT / 8,
                                 CDB_REPORT_BITS,
                                 &portsReported);
    }

    //
    // tag the current port as not in use so it shows up in the CB
    //
    current = portUsage + (nCurPortNum-1) / 8;
    if ((i = nCurPortNum % 8))
        *current &= ~(1 << (i-1));
    else
        *current &= ~(0x80);

    current = portUsage;
    mask = 0x1;
    for(nEntries = j = 0, i = MIN_COM-1; i < MAX_COM_PORT; i++) {

       wsprintf(szCom, TEXT("COM%d"), i+1);
       if (*current & mask) {
           wcscat(szCom, szInUse);
       }

       if (mask == (char) 0x80) {
           mask = 0x01;
           current++;
       }
       else {
           mask <<= 1;
       }

       ComboBox_AddString(portHwnd, szCom);
   }

   ComboBox_SetCurSel(portHwnd, nCurPortNum-1);
   return 0;
} /* FillPortNamesCb */

/*++

Routine Description: FillAdvancedDlg

    fill in the advanced dialog window

Arguments:

    poppOurPropParams: the data to fill in
    ParentHwnd:              address of the window

Return Value:

    ULONG: returns error messages

--*/
ULONG
FillAdvancedDlg(
    IN HWND             ParentHwnd,
    IN PADVANCED_DATA   AdvancedData
    )
{
   PSP_DEVINFO_DATA DeviceInfoData = AdvancedData->DeviceInfoData;
   HKEY  hDeviceKey;
   DWORD dwSize, dwData, dwFifo, dwError = ERROR_SUCCESS;

   //
   // Open the device key for the source device instance
   //
   hDeviceKey = AdvancedData->hDeviceKey;

   //
   // Get COM Name
   //
   dwSize = sizeof(AdvancedData->szComName);
   dwError = RegQueryValueEx(hDeviceKey,
                             m_szPortName,
                             NULL,
                             NULL,
                             (PBYTE)AdvancedData->szComName,
                             &dwSize);

   if (dwError != ERROR_SUCCESS) {
      wsprintf(AdvancedData->szComName, TEXT("COMX"));
   }

#if 0
   //
   // Get ForceFifoEnable information
   //
   AdvancedData->UseFifoBuffersControl = TRUE;

   dwSize = sizeof(dwFifo);
   dwError = RegQueryValueEx(hDeviceKey,
                             m_szFIFO,
                             NULL,
                             NULL,
                             (LPBYTE)(&dwFifo),
                             &dwSize);

   if (dwError == ERROR_SUCCESS) {
      //
      // Save this initial value
      //
      AdvancedData->UseFifoBuffersControl = TRUE;
      if (dwFifo == 0) {
         AdvancedData->UseFifoBuffers = FALSE;
      }
      else {
         AdvancedData->UseFifoBuffers = TRUE;
      }
   }
   else {
      //
      // value does not exist. Create our own
      //
      dwData = 1;
      dwSize = sizeof(dwSize);
      dwError = RegSetValueEx(hDeviceKey,
                              m_szFIFO,
                              0,
                              REG_DWORD,
                              (CONST BYTE *)(&dwData),
                              dwSize);

      if (dwError == ERROR_SUCCESS) {
         AdvancedData->UseFifoBuffers = TRUE;
      }
      else {
         AdvancedData->UseFifoBuffers = FALSE;
         AdvancedData->UseFifoBuffersControl = FALSE;
      }
   }

   //
   // Get FifoRxMax information
   //
   dwSize = sizeof(dwFifo);
   dwError = RegQueryValueEx(hDeviceKey,
                             m_szFifoRxMax,
                             NULL,
                             NULL,
                             (LPBYTE)(&dwFifo),
                             &dwFifo);

   if (dwError == ERROR_SUCCESS) {
      //
      // Save this initial value
      //
      AdvancedData->FifoRxMax = dwFifo;
      if (AdvancedData->FifoRxMax > RX_MAX) {
          AdvancedData->FifoRxMax = RX_MAX;
      }
   }
   else {
      //
      // value does not exist. Create our own
      //
      AdvancedData->FifoRxMax = RX_MAX;
   }

   //
   // Get RxFIFO information
   //
   dwSize = sizeof(dwFifo);
   dwError = RegQueryValueEx(hDeviceKey,
                             m_szFifoTxMax,
                             NULL,
                             NULL,
                             (LPBYTE)(&dwFifo),
                             &dwSize);

   if (dwError == ERROR_SUCCESS) {
      //
      // Save this initial value
      //
      AdvancedData->FifoTxMax = dwFifo;
      if (AdvancedData->FifoTxMax > TX_MAX) {
          AdvancedData->FifoTxMax = TX_MAX;
      }
   }
   else {
      //
      // value does not exist. Create our own
      //
      AdvancedData->FifoTxMax = TX_MAX;
   }

   //
   // Get RxFIFO information
   //
   AdvancedData->UseRxFIFOControl = TRUE;

   dwSize = sizeof(dwFifo);
   dwError = RegQueryValueEx(hDeviceKey,
                             m_szRxFIFO,
                             NULL,
                             NULL,
                             (LPBYTE)(&dwFifo),
                             &dwSize);

   if (dwError == ERROR_SUCCESS) {
      //
      // Save this initial value
      //
      AdvancedData->RxFIFO = dwFifo;
      if (AdvancedData->RxFIFO > RX_MAX) {
          goto SetRxFIFO;
      }
   }
   else {
SetRxFIFO:
      //
      // value does not exist. Create our own
      //
      dwData = AdvancedData->FifoRxMax;
      dwSize = sizeof(dwData);
      dwError = RegSetValueEx(hDeviceKey,
                              m_szRxFIFO,
                              0,
                              REG_DWORD,
                              (CONST BYTE *)(&dwData),
                              dwSize);

      if (dwError == ERROR_SUCCESS) {
         AdvancedData->RxFIFO = AdvancedData->FifoRxMax;
      }
      else {
         AdvancedData->RxFIFO = 0;
         AdvancedData->UseRxFIFOControl = FALSE;
      }
   }

   //
   // Get TxFIFO information
   //
   AdvancedData->UseTxFIFOControl = TRUE;

   dwSize = sizeof(dwFifo);
   dwError = RegQueryValueEx(hDeviceKey,
                             m_szTxFIFO,
                             NULL,
                             NULL,
                             (LPBYTE)(&dwFifo),
                             &dwSize);

   if (dwError == ERROR_SUCCESS) {
      //
      // Save this initial value
      //
      AdvancedData->TxFIFO = dwFifo;
      if (AdvancedData->TxFIFO > TX_MAX) {
          goto SetTxFIFO;
      }
   }
   else {
SetTxFIFO:
      //
      // value does not exist. Create our own
      //
      dwData = AdvancedData->FifoTxMax;
      dwSize = sizeof(dwData);
      dwError = RegSetValueEx(hDeviceKey,
                              m_szTxFIFO,
                              0,
                              REG_DWORD,
                              (LPBYTE)(&dwData),
                              dwSize);

      if (dwError == ERROR_SUCCESS) {
         AdvancedData->TxFIFO = AdvancedData->FifoTxMax;
      }
      else {
         AdvancedData->TxFIFO = 0;
         AdvancedData->UseTxFIFOControl = FALSE;
      }
   }
#endif
   //
   // Get PPP Aware flag
   //
//   AdvancedData->PPPAware = TRUE;
//
//   dwSize = sizeof(dwData);
//   dwError = RegQueryValueEx(hDeviceKey,
//                             m_szPPPAware,
//                             NULL,
//                             NULL,
//                             (LPBYTE)(&dwData),
//                             &dwSize);
//   if (dwError == ERROR_SUCCESS) {
//      AdvancedData->PPPAware = dwData;
//   } else {
//      //
//      // value does not exist. Create our own
//      //
//      dwData = AdvancedData->PPPAware;
//      dwSize = sizeof(dwData);
//      dwError = RegSetValueEx(hDeviceKey,
//                              m_szPPPAware,
//                              0,
//                              REG_DWORD,
//                              (LPBYTE)(&dwData),
//                              dwSize);
//   }
   
   //
   // Get Write Complete information
   //
   AdvancedData->WriteComplete = FALSE;

   dwSize = sizeof(dwData);
   dwError = RegQueryValueEx(hDeviceKey,
                             m_szWriteComplete,
                             NULL,
                             NULL,
                             (LPBYTE)(&dwData),
                             &dwSize);
   if (dwError == ERROR_SUCCESS) {
      AdvancedData->WriteComplete = dwData;
   } else {
      //
      // value does not exist. Create our own
      //
      dwData = AdvancedData->WriteComplete;
      dwSize = sizeof(dwData);
      dwError = RegSetValueEx(hDeviceKey,
                              m_szWriteComplete,
                              0,
                              REG_DWORD,
                              (LPBYTE)(&dwData),
                              dwSize);
   }

   //
   // Get Polling Period information
   //
   AdvancedData->PollingPeriod = PollingPeriods[POLL_PERIOD_DEFAULT_IDX];

   dwSize = sizeof(dwFifo);
   dwError = RegQueryValueEx(hDeviceKey,
                             m_szPollingPeriod,
                             NULL,
                             NULL,
                             (LPBYTE)(&dwFifo),
                             &dwSize);

   if (dwError == ERROR_SUCCESS) {
      //
      // Save this initial value
      //
      AdvancedData->PollingPeriod = dwFifo;
   }
   else {
      //
      // value does not exist. Create our own
      //
      dwData = AdvancedData->PollingPeriod;
      dwSize = sizeof(dwData);
      dwError = RegSetValueEx(hDeviceKey,
                              m_szPollingPeriod,
                              0,
                              REG_DWORD,
                              (LPBYTE)(&dwData),
                              dwSize);
   }

   RegCloseKey(hDeviceKey);

   if (ERROR_SUCCESS != dwError) {
      return dwError;
   }
   else {
      return ERROR_SUCCESS;
   }
} /* FillAdvancedDlg*/

void
ChangeParentTitle(
    IN HWND    Hwnd,
    IN LPCTSTR OldComName,
    IN LPCTSTR NewComName
    )
{
    INT    textLength, offset, newNameLen, oldNameLen;
    PTCHAR oldTitle = NULL, newTitle = NULL;
    PTCHAR oldLocation;

    textLength = GetWindowTextLength(Hwnd);
    if (textLength == 0) {
        return;
    }

    //
    // Account for null char and unicode
    //
    textLength++;
    oldTitle = (PTCHAR) LocalAlloc(LPTR, textLength * sizeof(TCHAR));
    if (!oldTitle) {
        return;
    }

    if (!GetWindowText(Hwnd, oldTitle, textLength)) {
        goto exit;
    }

    oldLocation = wcsstr(oldTitle, OldComName);
    if (!oldLocation) {
        goto exit;
    }

    newNameLen = lstrlen(NewComName);
    oldNameLen = lstrlen(OldComName);
    offset = newNameLen - oldNameLen;
    if (offset > 0) {
        textLength += offset;
    }
    newTitle = (PTCHAR) LocalAlloc(LPTR, textLength * sizeof(TCHAR));
    if (!newTitle) {
        goto exit;
    }

    //
    // Find the OldComName in the title and do the following
    // 1)  up to that location in the string
    // 2)  copy the new name
    // 3)  copy the remainder of the string after OldComName
    //
    offset = (INT)(oldLocation - oldTitle);
    CopyMemory(newTitle, oldTitle, offset * sizeof(TCHAR));                 // 1
    CopyMemory(newTitle + offset, NewComName, newNameLen * sizeof(TCHAR));  // 2
    lstrcpy(newTitle + offset + newNameLen, oldLocation + oldNameLen);      // 3

    SetWindowText(Hwnd, newTitle);

exit:
    if (oldTitle) {
        LocalFree(oldTitle);
    }
    if (newTitle) {
        LocalFree(newTitle);
    }
}

void
MigratePortSettings(
    LPCTSTR OldComName,
    LPCTSTR NewComName
    )
{
    TCHAR settings[BUFFER_SIZE];
    TCHAR szNew[20], szOld[20];

    lstrcpy(szOld, OldComName);
    wcscat(szOld, m_szColon);

    lstrcpy(szNew, NewComName);
    wcscat(szNew, m_szColon);

    settings[0] = TEXT('\0');
    GetProfileString(m_szPorts,
                     szOld,
                     TEXT(""),
                     settings,
                     sizeof(settings) / sizeof(TCHAR) );

    //
    // Insert the new key based on the old one
    //
    if (settings[0] == TEXT('\0')) {
        WriteProfileString(m_szPorts, szNew, m_szDefParams);
    }
    else {
        WriteProfileString(m_szPorts, szNew, settings);
    }

    //
    // Notify everybody of the changes and blow away the old key
    //
    SendWinIniChange((LPTSTR)m_szPorts);
    WriteProfileString(m_szPorts, szOld, NULL);
}

void
EnactComNameChanges(
    IN HWND             ParentHwnd,
    IN PADVANCED_DATA   AdvancedData,
    IN HKEY             hDeviceKey,
    IN UINT             NewComNum)
{
    DWORD  dwNewComNameLen;
    TCHAR  buffer[BUFFER_SIZE];
    TCHAR  szFriendlyNameFormat[LINE_LEN];
    TCHAR  szDeviceDesc[LINE_LEN];
    PTCHAR szNewComName;
    UINT   i;
    UINT   curComNum;
    BOOLEAN updateMapping = TRUE;

    SP_DEVINSTALL_PARAMS spDevInstall;

    curComNum = myatoi(AdvancedData->szComName + wcslen(m_szCOM));

    if (AdvancedData->hComDB != HCOMDB_INVALID_HANDLE_VALUE) {
        BYTE   portUsage[MAX_COM_PORT/8];
        DWORD  portsReported = 0;
        char   mask;

        //
        // Check to see if the desired new COM number has been claimed in the
        // com name database.  If so, ask the user if they are *really* sure
        //

        ComDBGetCurrentPortUsage(AdvancedData->hComDB,
                                 portUsage,
                                 MAX_COM_PORT / 8,
                                 CDB_REPORT_BITS,
                                 &portsReported);

        if (NewComNum > portsReported) {
            DWORD newsize;
            if (NewComNum > COMDB_MAX_PORTS_ARBITRATED) {
                MyMessageBox(ParentHwnd, IDS_PORT_RENAME_ERROR, IDS_NAME_PROPERTIES,
                             MB_ICONERROR);
                return;
            }
            newsize = NewComNum;
            if (NewComNum % 1024){
                newsize = NewComNum/1024;
                newsize++;
                newsize = newsize*1024;
            }
            if (newsize > COMDB_MAX_PORTS_ARBITRATED) {
                newsize = COMDB_MAX_PORTS_ARBITRATED;
            }
            if (newsize > portsReported) {
                if (ComDBResizeDatabase(AdvancedData->hComDB, newsize) != ERROR_SUCCESS){
                    MyMessageBox(ParentHwnd, IDS_PORT_RENAME_ERROR, IDS_NAME_PROPERTIES,
                                 MB_ICONERROR);
                    return;                    
                }
            }

            // We are assuming that NewComNum is <= MAX_COM_PORT.
            ComDBGetCurrentPortUsage(AdvancedData->hComDB,
                                     portUsage,
                                     MAX_COM_PORT / 8,
                                     CDB_REPORT_BITS,
                                     &portsReported);
        }

        if ((i = NewComNum % 8))
            mask = 1 << (i-1);
        else
            mask = (char) 0x80;
        if ((portUsage[(NewComNum-1)/8] & mask) &&
            MyMessageBox(ParentHwnd, IDS_PORT_IN_USE, IDS_NAME_PROPERTIES,
                         MB_YESNO | MB_ICONINFORMATION) == IDNO) {
            //
            // Port has been previously claimed and user doesn't want to override
            //
            return;
        }
    }

    if (!QueryDosDevice(AdvancedData->szComName, buffer, BUFFER_SIZE-1)) {
        //
        // The old com name does not exist in the mapping.  Basically, the symbolic
        // link from COMX => \Device\SerialY has been broken.  Just change the
        // value in the registry and the friendly name for the device; don't
        // change the dos symbolic name b/c one does not exist
        //
        updateMapping = FALSE;
    }
    else {
        TCHAR  szComFileName[20]; // more than enough for "\\.\COMXxxx"
        HANDLE hCom;

        lstrcpy(szComFileName, L"\\\\.\\");
        lstrcat(szComFileName, AdvancedData->szComName);

        //
        // Make sure that the port has not been opened by another application
        //
        hCom = CreateFile(szComFileName, GENERIC_READ, 0, NULL, OPEN_EXISTING,
                          FILE_ATTRIBUTE_NORMAL, NULL);

        //
        // If the file handle is invalid, then the com port is open, warn the user
        //
        if (hCom == INVALID_HANDLE_VALUE &&
            MyMessageBox(ParentHwnd, IDS_PORT_OPEN, IDS_NAME_PROPERTIES,
                         MB_YESNO | MB_ICONERROR) == IDNO) {
            return;
        }

        if (hCom != INVALID_HANDLE_VALUE) {
            CloseHandle(hCom);
        }
    }

    szNewComName = AdvancedData->szNewComName;
    wsprintf(szNewComName, _T("COM%d"), NewComNum);
    dwNewComNameLen = ByteCountOf(wcslen(szNewComName) + 1);

    //
    // Change the name in the symbolic namespace.
    // First try to get what device the old com name mapped to
    // (ie something like \Device\Serial0).  Then remove the mapping.  If
    // the user isn't an admin, then this will fail and the dialog will popup.
    // Finally, map the new name to the old device retrieved from the
    // QueryDosDevice
    //
    if (updateMapping) {
        BOOL removed;
        HKEY hSerialMap;

        if (!QueryDosDevice(AdvancedData->szComName, buffer, BUFFER_SIZE-1)) {
            //
            // This shouldn't happen because the previous QueryDosDevice call
            // succeeded
            //
            MyMessageBox(ParentHwnd, IDS_PORT_RENAME_ERROR, IDS_NAME_PROPERTIES,
                         MB_ICONERROR);
            return;
        }

        //
        // If this fails, then the following define will just replace the current
        // mapping.
        //
        removed = DefineDosDevice(DDD_REMOVE_DEFINITION, AdvancedData->szComName, NULL);

        if (!DefineDosDevice(DDD_RAW_TARGET_PATH, szNewComName, buffer)) {
            //
            // error, first fix up the remove definition and restore the old
            // mapping
            //
            if (removed) {
                DefineDosDevice(DDD_RAW_TARGET_PATH, AdvancedData->szComName, buffer);
            }

            MyMessageBox(ParentHwnd, IDS_PORT_RENAME_ERROR, IDS_NAME_PROPERTIES,
                         MB_ICONERROR);

            return;
        }

        //
        // Set the \\HARDWARE\DEVICEMAP\SERIALCOMM field
        //
        if (RegOpenKeyEx(HKEY_LOCAL_MACHINE,
                         m_szRegSerialMap,
                         0,
                         KEY_ALL_ACCESS,
                         &hSerialMap) == ERROR_SUCCESS) {

            TCHAR  szSerial[BUFFER_SIZE];
            DWORD  dwSerialSize, dwEnum, dwType, dwComSize;
            TCHAR  szCom[BUFFER_SIZE];

            i = 0;
            do {
                dwSerialSize = CharSizeOf(szSerial);
                dwComSize = sizeof(szCom);
                dwEnum = RegEnumValue(hSerialMap,
                                      i++,
                                      szSerial,
                                      &dwSerialSize,
                                      NULL,
                                      &dwType,
                                      (LPBYTE)szCom,
                                      &dwComSize);

                if (dwEnum == ERROR_SUCCESS) {
                    if(dwType != REG_SZ)
                        continue;

                    if (wcscmp(szCom, AdvancedData->szComName) == 0) {
                        RegSetValueEx(hSerialMap,
                                        szSerial,
                                        0,
                                        REG_SZ,
                                        (PBYTE) szNewComName,
                                        dwNewComNameLen);
                                        break;
                    }
                }

            } while (dwEnum == ERROR_SUCCESS);
        }

        RegCloseKey(hSerialMap);
    }

    //
    // Update the com db
    //
    if (AdvancedData->hComDB != HCOMDB_INVALID_HANDLE_VALUE) {
        ComDBReleasePort(AdvancedData->hComDB, (DWORD) curComNum);

        ComDBClaimPort(AdvancedData->hComDB, (DWORD) NewComNum, TRUE, NULL);
    }

    //
    // Set the friendly name in the form of DeviceDesc (COM#)
    //
    if (ReplaceFriendlyName(AdvancedData->DeviceInfoSet,
                            AdvancedData->DeviceInfoData,
                            szNewComName) == FALSE) {
        // ReplaceFriendlyName failed. Use original code.
        if (LoadString(g_hInst,
                       IDS_FRIENDLY_FORMAT,
                       szFriendlyNameFormat,
                       CharSizeOf(szFriendlyNameFormat)) &&
            SetupDiGetDeviceRegistryProperty(AdvancedData->DeviceInfoSet,
                                             AdvancedData->DeviceInfoData,
                                             SPDRP_DEVICEDESC,
                                             NULL,
                                             (PBYTE) szDeviceDesc,
                                             sizeof(szDeviceDesc),
                                             NULL)) {
            wsprintf(buffer, szFriendlyNameFormat, szDeviceDesc, szNewComName);

        }
        else {
            //
            // Use the COM port name straight out
            //
            lstrcpy(buffer, szNewComName);
        }

        SetupDiSetDeviceRegistryProperty(AdvancedData->DeviceInfoSet,
                                         AdvancedData->DeviceInfoData,
                                         SPDRP_FRIENDLYNAME,
                                         (PBYTE) buffer,
                                         ByteCountOf(wcslen(buffer)+1));
    }

    //
    // Set the parent dialog's title to reflect the change in the com port's name
    //
    ChangeParentTitle(GetParent(ParentHwnd), AdvancedData->szComName, szNewComName);
    MigratePortSettings(AdvancedData->szComName, szNewComName);

    //
    // Update the PortName value in the devnode
    //
    RegSetValueEx(hDeviceKey,
                  m_szPortName,
                  0,
                  REG_SZ,
                  (PBYTE)szNewComName,
                  dwNewComNameLen);

    //
    // Now broadcast this change to the device manager
    //
    ZeroMemory(&spDevInstall, sizeof(SP_DEVINSTALL_PARAMS));
    spDevInstall.cbSize = sizeof(SP_DEVINSTALL_PARAMS);

    if (SetupDiGetDeviceInstallParams(AdvancedData->DeviceInfoSet,
                                      AdvancedData->DeviceInfoData,
                                      &spDevInstall)) {
        spDevInstall.Flags |= DI_PROPERTIES_CHANGE;
        SetupDiSetDeviceInstallParams(AdvancedData->DeviceInfoSet,
                                      AdvancedData->DeviceInfoData,
                                      &spDevInstall);
    }
}

/*++

Routine Description: SaveAdvancedSettings

    saves the advanced box settings back to the registry, if any were
    changed

Arguments:

    AdvancedData: holds the current settings and the location of of
                   the device in the registry
    ParentHwnd:          address of the window

Return Value:

    ULONG: returns error messages

--*/
ULONG
SaveAdvancedSettings(
    IN HWND ParentHwnd,
    IN PADVANCED_DATA AdvancedData
    )
{
   HKEY   hDeviceKey;
   DWORD  dwSize, dwData;

   UINT  i = CB_ERR, curComNum, newComNum = CB_ERR;
   //UINT  uiDlgButtonChecked;  
   UINT  uiWriteCompleteChecked; //uiPPPAwareChecked,
   DWORD dwPollingPeriod;   // dwRxPosition, dwTxPosition;
   BOOLEAN needRestart = FALSE;
   HCURSOR hCursor;

   SP_DEVINSTALL_PARAMS spDevInstall;
   SP_PROPCHANGE_PARAMS PropChangeParams = {sizeof(SP_CLASSINSTALL_HEADER)};

   //DbgOut(TEXT("SaveAdvancedSettings\n"));

   //
   // Grab all of the new settings
   //
//   uiPPPAwareChecked      = IsDlgButtonChecked(ParentHwnd, IDC_PPP_AWARE);
   uiWriteCompleteChecked = IsDlgButtonChecked(ParentHwnd, IDC_WRITE_COMPLETE);
   //uiDlgButtonChecked     = IsDlgButtonChecked(ParentHwnd, IDC_FIFO);

   //#if DBG
   //{
   // TCHAR buf[500];
   // wsprintf(buf, TEXT("uiPPPAwareChecked %d\n"),uiPPPAwareChecked);
   // DbgOut(buf);
   // wsprintf(buf, TEXT("AdvancedData->PPPAware %d\n"),AdvancedData->PPPAware);
   // DbgOut(buf);
   //}
   //#endif


   //dwTxPosition = Trackbar_GetPos(GetDlgItem(ParentHwnd, IDC_TRANSMIT_SLIDER));
   //dwRxPosition = Trackbar_GetPos(GetDlgItem(ParentHwnd, IDC_RECEIVE_SLIDER));

   //
   // Index is actually into the array of values
   //
   //dwRxPosition = RxValues[dwRxPosition-1];

   curComNum = myatoi(AdvancedData->szComName + wcslen(m_szCOM));
   newComNum = ComboBox_GetCurSel(GetDlgItem(ParentHwnd, PP_PORT_NUMBER));

   if (newComNum == CB_ERR) {
       newComNum = curComNum;
   }
   else {
       newComNum++;
   }

   i = ComboBox_GetCurSel(GetDlgItem(ParentHwnd, IDC_POLL_PERIOD));

   if (i == CB_ERR || i >= NUM_POLLING_PERIODS) {
       dwPollingPeriod = AdvancedData->PollingPeriod;
   }
   else {
       dwPollingPeriod = PollingPeriods[i];
   }

   //
   // See if they changed anything
   //
   if (//((AdvancedData->UseFifoBuffers  && uiDlgButtonChecked == BST_CHECKED) ||
       // (!AdvancedData->UseFifoBuffers && uiDlgButtonChecked == BST_UNCHECKED)) &&
       //AdvancedData->RxFIFO == dwRxPosition &&
       //AdvancedData->TxFIFO == dwTxPosition &&
       //((AdvancedData->PPPAware && uiPPPAwareChecked == BST_CHECKED) ||
       // (!AdvancedData->PPPAware && uiPPPAwareChecked == BST_UNCHECKED)) &&
       ((AdvancedData->WriteComplete && uiWriteCompleteChecked == BST_CHECKED) ||
        (!AdvancedData->WriteComplete && uiWriteCompleteChecked == BST_UNCHECKED)) &&
       AdvancedData->PollingPeriod == dwPollingPeriod &&
       newComNum == curComNum) {
      //
      // They didn't change anything. Just exit.
      //
      return ERROR_SUCCESS;
   }

   //
   // Open the device key for the source device instance
   //
   hDeviceKey = SetupDiOpenDevRegKey(AdvancedData->DeviceInfoSet,
                                     AdvancedData->DeviceInfoData,
                                     DICS_FLAG_GLOBAL,
                                     0,
                                     DIREG_DEV,
                                     KEY_ALL_ACCESS);

   if (INVALID_HANDLE_VALUE == hDeviceKey) {
      //
      // Not much we can do without a valid key, exit gracefully
      //
      return ERROR_SUCCESS;
   }

   //
   // Check to see if the user changed the COM port name
   //
   if (newComNum != curComNum) {
      EnactComNameChanges(ParentHwnd,
                          AdvancedData,
                          hDeviceKey,
                          newComNum);
   }

//   if ((AdvancedData->PPPAware && uiPPPAwareChecked == BST_UNCHECKED) ||
//       (!AdvancedData->PPPAware && uiPPPAwareChecked == BST_CHECKED)) {
//       //
//       // They changed the Enable Optimization For RRAS checkbox.
//       //
//       dwData = (uiPPPAwareChecked == BST_CHECKED) ? 1 : 0;
//       dwSize = sizeof(dwData);
//       RegSetValueEx(hDeviceKey,
//                     m_szPPPAware,
//                     0,
//                     REG_DWORD,
//                     (CONST BYTE *)(&dwData),
//                     dwSize);
//       needRestart = TRUE;
//       //Out(TEXT("needRestart = TRUE.\n"));
//   }

   if ((AdvancedData->WriteComplete && uiWriteCompleteChecked == BST_UNCHECKED) ||
       (!AdvancedData->WriteComplete && uiWriteCompleteChecked == BST_CHECKED)) {
       //
       // They changed the Return Write status only after firmware buffer empty checkbox
       //
       dwData = (uiWriteCompleteChecked == BST_CHECKED) ? 1 : 0;
       dwSize = sizeof(dwData);
       RegSetValueEx(hDeviceKey,
                     m_szWriteComplete,
                     0,
                     REG_DWORD,
                     (CONST BYTE *)(&dwData),
                     dwSize);
       needRestart = TRUE;
   }

//   if ((AdvancedData->UseFifoBuffers  && uiDlgButtonChecked == BST_UNCHECKED) ||
//       (!AdvancedData->UseFifoBuffers && uiDlgButtonChecked == BST_CHECKED)) {
//      //
//      // They changed the Use Fifo checkbox.
//      //
//      dwData = (uiDlgButtonChecked == BST_CHECKED) ? 1 : 0;
//      dwSize = sizeof(dwData);
//      RegSetValueEx(hDeviceKey,
//                    m_szFIFO,
//                    0,
//                    REG_DWORD,
//                    (CONST BYTE *)(&dwData),
//                    dwSize);
//   }
//
//   if (AdvancedData->RxFIFO != dwRxPosition) {
//      //
//      // They changed the RxFIFO setting
//      //
//      dwData = dwRxPosition;
//      dwSize = sizeof(dwData);
//      RegSetValueEx(hDeviceKey,
//                    m_szRxFIFO,
//                    0,
//                    REG_DWORD,
//                    (CONST BYTE *)(&dwData),
//                    dwSize);
//   }
//
//   if (AdvancedData->TxFIFO != dwTxPosition) {
//      //
//      // They changed the TxFIFO setting
//      //
//      dwData = dwTxPosition;
//      dwSize = sizeof(dwData);
//      RegSetValueEx(hDeviceKey,
//                    m_szTxFIFO,
//                    0,
//                    REG_DWORD,
//                    (CONST BYTE *)(&dwData),
//                    dwSize);
//   }

   if (AdvancedData->PollingPeriod != dwPollingPeriod) {
      //
      // They changed the polling period
      //
      dwData = dwPollingPeriod;
      dwSize = sizeof(dwData);
      RegSetValueEx(hDeviceKey,
                    m_szPollingPeriod,
                    0,
                    REG_DWORD,
                    (CONST BYTE *)(&dwData),
                    dwSize);

      //
      // Don't really care if this fails, nothing else we can do
      //
      CM_Reenumerate_DevNode(AdvancedData->DeviceInfoData->DevInst,
                             CM_REENUMERATE_NORMAL);
   }

   RegCloseKey(hDeviceKey);


   if (needRestart) {

      //Out(TEXT("Re-starting.\n"));

      //
      // This may take a while :^(
      //
      hCursor = SetCursor(LoadCursor(NULL, IDC_WAIT));

      //
      // Set the PropChangeParams structure.
      //

      PropChangeParams.ClassInstallHeader.InstallFunction = DIF_PROPERTYCHANGE;
      PropChangeParams.ClassInstallHeader.cbSize = sizeof(SP_CLASSINSTALL_HEADER);
      PropChangeParams.Scope = DICS_FLAG_GLOBAL;
      PropChangeParams.StateChange = DICS_PROPCHANGE ; 

      if (!SetupDiSetClassInstallParams(AdvancedData->DeviceInfoSet,
         AdvancedData->DeviceInfoData,
         (SP_CLASSINSTALL_HEADER *)&PropChangeParams,
         sizeof(PropChangeParams)))
      {
        
         DbgOut(TEXT("SetupDiSetClassInstallParams failed.\n"));
      }
   } else {
      SetupDiSetClassInstallParams(AdvancedData->DeviceInfoSet,
         AdvancedData->DeviceInfoData,
         NULL,
         0);
   }

   SetupDiCallClassInstaller(DIF_PROPERTYCHANGE,
                             AdvancedData->DeviceInfoSet,
                             AdvancedData->DeviceInfoData);

   return ERROR_SUCCESS;
} /* SaveAdvancedSettings*/



/*++

Routine Description:

    Prototype to allow serial port vendors to override the advanced dialog
    represented by the COM port specified by DeviceInfoSet and DeviceInfoData.

    To override the advanced page, place a value named EnumAdvancedDialog under
    the same key in which you would put your EnumPropPages32 value.  The format
    of the value is exactly the same as Enum...32 as well.

Arguments:

    ParentHwnd  - the parent window of the window to be displayed

    HidePollingUI - If TRUE, hide all UI that deals with polling.

    DeviceInfoSet, DeviceInfoData - SetupDi structures representing the COM port

    Reserved - Unused

Return Value:

    TRUE if the user pressed OK, FALSE if Cancel was pressed
--*/
BOOL
CyzportAdvancedDialog(
    IN HWND             ParentHwnd,
    IN BOOL             HidePollingUI,
    IN HDEVINFO         DeviceInfoSet,
    IN PSP_DEVINFO_DATA DeviceInfoData,
    IN PVOID            Reserved
    )
{
    PADVANCED_DATA pAdvancedData = NULL; 

//  DbgOut(TEXT("CyzportAdvancedDialog\n"));

    pAdvancedData = (PADVANCED_DATA) LocalAlloc(LPTR, sizeof(ADVANCED_DATA));

//**************************************************************
// TEST Debugger
//    DebugBreak();
//**************************************************************

    if (pAdvancedData == NULL) {

        ErrMemDlg(ParentHwnd);
        return FALSE;
    }

    //***************** FOR DEBUG *********************
    //
    //HidePollingUI = FALSE; 
    //*************************************************
    pAdvancedData->HidePolling = HidePollingUI;
    pAdvancedData->DeviceInfoSet  = DeviceInfoSet;
    pAdvancedData->DeviceInfoData = DeviceInfoData;

    DisplayAdvancedDialog(ParentHwnd, pAdvancedData);
    
    if (pAdvancedData != NULL) {
        LocalFree(pAdvancedData);
    }

    return TRUE;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyzports\cyzports.h ===
/** FILE: cyzports.h ********* Module Header ********************************
 *
 *  Control Panel System applet common definitions, resource ids, typedefs,
 *  external declarations and library routine function prototypes.
 *
 * History:
 *
 *
 *  Copyright (C) 2000 Cyclades Corporation
 *
 *************************************************************************/
//==========================================================================
//                            Include Files
//==========================================================================

#ifndef PORTS_H
#define PORTS_H

#include <windows.h>
#include <tchar.h>
#include <cfgmgr32.h>
#include <setupapi.h>
#include <regstr.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <malloc.h>
#include "resource.h"

#include "portstr.h"

#define PORTS        4
#define MAXPORTS    32
#define KEYBZ       4096
#define BUFFER_SIZE 81

#define DEF_BAUD    3       //  1200
#define DEF_WORD    4       //  8 bits
#define DEF_PARITY  2       //  None
#define DEF_STOP    0       //  1
#define DEF_PORT    0       //  Null Port
#define DEF_SHAKE   2       //  None
#define PAR_EVEN    0
#define PAR_ODD     1
#define PAR_NONE    2
#define PAR_MARK    3
#define PAR_SPACE   4
#define STOP_1      0
#define STOP_15     1
#define STOP_2      2
#define FLOW_XON    0
#define FLOW_HARD   1
#define FLOW_NONE   2

#define MAX_COM_PORT  2048                         // We should support at least 1024 ports.
#define MIN_COM       1                            // Minimum new COM port number

#define POLL_PERIOD_DEFAULT_IDX 1 

//==========================================================================
//                        Definitions
//==========================================================================

//
//  General definitions
//

#define PATHMAX             MAX_PATH


//
//  Help IDs -- for the Ports applet
//
//
#define IDH_HELPFIRST        5000
#define IDH_SYSMENU     (IDH_HELPFIRST + 2000)
#define IDH_MBFIRST     (IDH_HELPFIRST + 2001)
#define IDH_MBLAST      (IDH_HELPFIRST + 2099)
#define IDH_DLGFIRST    (IDH_HELPFIRST + 3000)

#define IDH_MENU_SCHHELP    (IDH_HELPFIRST + MENU_SCHHELP)
#define IDH_MENU_INDHELP    (IDH_HELPFIRST + MENU_INDHELP)
#define IDH_MENU_USEHELP    (IDH_HELPFIRST + MENU_USEHELP)
#define IDH_MENU_ABOUT      (IDH_HELPFIRST + MENU_ABOUT )
#define IDH_MENU_EXIT       (IDH_HELPFIRST + MENU_EXIT)
#define IDH_CHILD_PORTS     (IDH_HELPFIRST + 4 /* CHILD_PORTS */ )
#define IDH_DLG_PORTS2      (IDH_DLGFIRST + DLG_PORTS2)
#define IDH_DLG_PORTS3      (IDH_DLGFIRST + DLG_PORTS3)

//==========================================================================
//                           Typedefs
//==========================================================================
typedef struct {
    SP_DEVINFO_DATA  DeviceInfoData;

    TCHAR ComName[20];
    TCHAR Settings[20];
    
    ULONG BaseAddress;
} PORT_INFO, *PPORT_INFO;

typedef struct _PORTS_WIZARD_DATA {

    HDEVINFO          DeviceInfoSet;
    PSP_DEVINFO_DATA  pDeviceInfoData;

    ULONG BaseAddress;
    ULONG FirstComNumber;

    ULONG PortsCount;
    PPORT_INFO Ports;

    PUINT UsedComNumbers;
    UINT UsedComNumbersCount;

    BOOL IsMulti;
} PORTS_WIZARD_DATA, *PPORTS_WIZARD_DATA;


//==========================================================================
//                              Macros
//==========================================================================

#define CharSizeOf(x)   (sizeof(x) / sizeof(*x))
#define ByteCountOf(x)  ((x) * sizeof(TCHAR))

#if DBG
#define DbgOut(Text) OutputDebugString(Text)
#else
#define DbgOut(Text) 
#endif 

//==========================================================================
//                         External Declarations
//==========================================================================
//
//  DATA


//
//  exported from cpl.c
//

extern HANDLE g_hInst;
extern TCHAR  g_szErrMem[ ];        //  Low memory message
extern TCHAR  g_szPortsApplet[ ];   //  "Ports Control Panel Applet" title
extern TCHAR  g_szNull[];           //  Null string

extern DWORD PollingPeriods[];

extern TCHAR  m_szPorts[];
extern TCHAR  m_szPortName[];

//==========================================================================
//                            Function Prototypes
//==========================================================================

//
//  LibMain module
//

extern 
VOID
InitStrings(void);


//
//  cyfriend.c
//

extern
BOOL
ReplaceFriendlyName(
    IN HDEVINFO         DeviceInfoSet,
    IN PSP_DEVINFO_DATA DeviceInfoData,
    IN PTCHAR           NewComName
);


//
//  util.c
//

extern 
LPTSTR 
BackslashTerm(LPTSTR pszPath);

extern 
VOID 
ErrMemDlg(HWND hParent);

extern 
int    
MyAtoi(LPTSTR  string);

extern 
int    
myatoi(LPTSTR pszInt);

extern 
int    
MyMessageBox(HWND hWnd, 
                         DWORD wText, 
                         DWORD wCaption, 
                         DWORD wType, 
                         ...);

extern
int
MyMessageBoxWithErr(
    HWND hWnd, 
	DWORD wText, 
	DWORD wCaption, 
	DWORD wType,
    DWORD wError
    );

extern 
LPTSTR 
MyItoa(INT value, 
           LPTSTR  string, 
           INT  radix);

extern 
LPTSTR 
MyUltoa(unsigned long  value, 
                LPTSTR  string, 
                INT  radix);

extern 
VOID   
SendWinIniChange(LPTSTR szSection);

extern 
LPTSTR 
strscan(LPTSTR pszString, 
                LPTSTR pszTarget);

extern 
VOID
StripBlanks(LPTSTR pszString);


#endif // PORTS_H
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\digi\async\makefile.inc ===
_LNG=$(LANGUAGE)
_INX=.

$(O)\dgaport.inf: $(_INX)\dgaport.inx $(_LNG)\dgaport.txt
    copy $(_INX)\$(@B).inx+$(_LNG)\$(@B).txt $@

$(O)\dgasync.inf: $(_INX)\dgasync.inx $(_LNG)\dgasync.txt
    copy $(_INX)\$(@B).inx+$(_LNG)\$(@B).txt $@

$(O)\mdmdigi.inf: $(_INX)\mdmdigi.inx $(_LNG)\mdmdigi.txt
    copy $(_INX)\$(@B).inx+$(_LNG)\$(@B).txt $@
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyzports\resource.h ===
//{{NO_DEPENDENCIES}}
// Microsoft Developer Studio generated include file.
// Used by ports.rc
//
#define INITS                           0
#define IDS_INIT_NAME                   1
#define IDS_INIT_CLOSE                  2
#define PORTS_ICON                      2
#define IDS_PORT_IN_USE                 5
#define ERRORS                          8
#define MYPORT                          10
#define IDS_PARITY                      11
#define IDS_BITS                        12
#define IDS_FLOWCONTROL                 13
#define DLG_PP_PORTSETTINGS             15
#define DLG_PP_ADVPORTS                 16
#define IDS_ADVANCED_SETTINGS_FOR       19
#define IDS_FRIENDLY_FORMAT             29
#define IDS_ADVANCED_SETTINGS           30
#define IDS_SYSSETCHANGE                50
#define IDS_COMCHANGE                   51
#define IDS_LOW                         53
#define IDS_HIGH                        54
#define IDS_NO_WRITE_PRVILEGE           55
#define IDS_NAME_PROPERTIES             56
#define IDS_COM_CONFLICT                59
#define IDS_PORT_OPEN                   59
#define IDS_COM_CONFLICT_RESOLVE        60
#define IDS_PORT_RENAME_ERROR           60
#define IDS_IN_USE                      61
#define IDS_LPT_PROPERTIES              62
#define IDS_LPT_PORT_INUSE              63
#define IDS_LPT_NUM_ERROR               64
#define IDS_LPT_LEGACY_FAILED           65
#define DLG_PP_LPT_PORTSETTINGS         102
#define PORT_BAUDRATE                   800
#define PORT_DATABITS                   801
#define PORT_PARITY                     802
#define PORT_STOPBITS                   803
#define PORT_FLOWCTL                    804
#define PORT_ADVANCED                   805
#define IDC_RECEIVE_SLIDER              821
#define IDC_ADVANCED                    840
#define PP_PORT_BAUDRATE                841
#define IDC_TRANSMIT_SLIDER             842
#define PP_PORT_DATABITS                842
#define PP_PORT_PARITY                  843
#define IDC_RESTORE                     844
#define PP_PORT_STOPBITS                844
#define PP_PORT_FLOWCTL                 845
#define PP_PORT_NUMBER                  846
#define PP_PORT_FIFO                    847
#define PP_PORT_TYPE                    848
#define IDC_FIFO                        885
#define IDC_LOW1                        886
#define IDC_LOW2                        887
#define IDC_HIGH1                       888
#define IDC_HIGH2                       889
#define IDC_RECEIVE_TEXT                890
#define IDC_TRANSMIT_TEXT               891
#define IDC_RESTORE_PORT                892
#define IDC_RXVALUE                     893
#define IDC_TXVALUE                     894
#define IDC_COMNUMTEXT                  895
#define IDC_TRANSMIT_LOW                1000
#define IDC_RECEIVE_LOW                 1001
#define IDC_RECEIVE_HIGH                1002
#define IDC_TRANSMIT_HIGH               1003
#define IDC_POLL_PERIOD                 1027
#define IDC_POLL_DESC                   1029
#define IDC_DESC_1                      1030
#define IDC_DESC_2                      1031
#define IDC_FILTERMETHOD_TRYNOT         1032
#define IDC_FILTERMETHOD_NEVER          1033
#define IDC_FILTERMETHOD_ACCEPTANY      1034
#define PP_LPT_PORT_NUMBER              1035
#define IDC_LPTNUMTEXT                  1036
#define IDC_LPT_ENABLE_LEGACY           1037
#define IDC_WRITE_COMPLETE              1043
#define IDC_STATIC                      -1

// Next default values for new objects
// 
#ifdef APSTUDIO_INVOKED
#ifndef APSTUDIO_READONLY_SYMBOLS
#define _APS_NO_MFC                     1
#define _APS_NEXT_RESOURCE_VALUE        103
#define _APS_NEXT_COMMAND_VALUE         40001
#define _APS_NEXT_CONTROL_VALUE         1044
#define _APS_NEXT_SYMED_VALUE           101
#endif
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyzports\cyzports.c ===
/** FILE: ports.c ********** Module Header ********************************
 *
 *  DLL entry point.
 *
 *
 *  Copyright (C) 2000 Cyclades Corporation
 *
 *************************************************************************/
//==========================================================================
//                                Include files
//==========================================================================
// C Runtime
#include <stddef.h>
#include <stdlib.h>
#include <string.h>

// Application specific
#include "cyzports.h"
#include <msports.h>


//==========================================================================
//                                Globals
//==========================================================================

HANDLE  g_hInst  = NULL;

TCHAR g_szErrMem[ 200 ];            //  Low memory message
TCHAR g_szPortsApplet[ 30 ];        //  "Ports Control Panel Applet" title
TCHAR g_szNull[]  = TEXT("");       //  Null string

TCHAR  m_szColon[]      = TEXT( ":" );
TCHAR  m_szPorts[]      = TEXT( "Ports" );
TCHAR  m_szCOM[]        = TEXT( "COM" );

//
//  NT Registry keys to find COM port to Serial Device mapping
//
TCHAR m_szRegSerialMap[]    = TEXT( "Hardware\\DeviceMap\\SerialComm" );

//
//  Registry Serial Port Advanced I/O settings key and valuenames
//
TCHAR m_szFIFO[]            = TEXT( "ForceFifoEnable" );

TCHAR m_szPollingPeriod[]   = TEXT( "PollingPeriod" );
TCHAR m_szPortName[]        = REGSTR_VAL_PORTNAME;

TCHAR m_szDefParams[]       = TEXT( "9600,n,8,1" );


//==========================================================================
//                            Local Function Prototypes
//==========================================================================
LPTSTR GetDIFString(IN DI_FUNCTION Func);


//==========================================================================
//                                Dll Entry Point
//==========================================================================
BOOL APIENTRY LibMain( HANDLE hDll, DWORD dwReason, LPVOID lpReserved )
{

    switch( dwReason )
    {
    case DLL_PROCESS_ATTACH:
//      DbgOut(TEXT("cyzports DLL_PROCESS_ATTACH\n"));
        g_hInst = hDll;
        DisableThreadLibraryCalls(hDll);
        InitStrings();

        break;

    case DLL_PROCESS_DETACH:
//      DbgOut(TEXT("cyzports DLL_PROCESS_DETACH\n"));
        break;

    default:
        break;
    }

    return TRUE;
}


//==========================================================================
//                                Functions
//==========================================================================



HRESULT
CyzportCoInstaller(
    IN DI_FUNCTION      InstallFunction,
    IN HDEVINFO         DeviceInfoSet,
    IN PSP_DEVINFO_DATA DeviceInfoData OPTIONAL,
    IN OUT PCOINSTALLER_CONTEXT_DATA    Context
)
/*++

Routine Description:

    This routine is a Co-Installer for the Cyclades-Z Port device.

Arguments:

    InstallFunction - Specifies the device installer function code indicating
        the action being performed.

    DeviceInfoSet - Supplies a handle to the device information set being
        acted upon by this install action.

    DeviceInfoData - Optionally, supplies the address of a device information
        element being acted upon by this install action.

    Context - Points to a coinstaller-specific context structure for this 
        installation request. 

Return Value:

    If this function successfully completed the requested action, the return
        value is NO_ERROR.

    If an error occurred while attempting to perform the requested action, a
        Win32 error code is returned.

--*/
{
    DWORD   dwSize;
    TCHAR   instanceId[MAX_DEVICE_ID_LEN];
    TCHAR   parentIdPrefix[50];
    HKEY    enumKey,instKey;
    BOOL    gotParentIdPrefix;
    DWORD   Status = NO_ERROR;


//  #if DBG
//  {
//   TCHAR buf[500];
//   wsprintf(buf, TEXT("CyzportCoInstaller:InstallFunction(%s) PostProcessing:%d\n"), GetDIFString(InstallFunction), Context->PostProcessing);
//   DbgOut(buf);
//  }
//  #endif

    switch(InstallFunction) {
        case DIF_INSTALLDEVICE :
            //
            // We should not copy any INF files until the install has completed
            // like the primary INF, all secondary INF's must exist on each disk
            // of a multi-disk install.
            //

            if(!Context->PostProcessing) {
                Status = ERROR_DI_POSTPROCESSING_REQUIRED;
            } else {
                if (Context->InstallResult != NO_ERROR) {
                    DbgOut(TEXT("DIF_INSTALLDEVICE PostProcessing on failure"));
                    Status = Context->InstallResult;
                    break;
                }

                ReplaceFriendlyName(DeviceInfoSet,DeviceInfoData,NULL);
            }
            break;
        default :
            break;
    }
    return Status;
}

LPTSTR GetDIFString(IN DI_FUNCTION Func)
/*++

Routine Description:

    Given a DI_FUNCTION value, returns a text representation.

Arguments:

    Func - DI_FUNCTON value

Return Value:

    Text string if value is known.  Hex representation if not.

--*/
{
    static TCHAR buf[32];
#define MakeCase(d)  case d: return TEXT(#d)
    switch (Func)
    {
        MakeCase(DIF_SELECTDEVICE);
        MakeCase(DIF_INSTALLDEVICE);
        MakeCase(DIF_ASSIGNRESOURCES);
        MakeCase(DIF_PROPERTIES);
        MakeCase(DIF_REMOVE);
        MakeCase(DIF_FIRSTTIMESETUP);
        MakeCase(DIF_FOUNDDEVICE);
        MakeCase(DIF_SELECTCLASSDRIVERS);
        MakeCase(DIF_VALIDATECLASSDRIVERS);
        MakeCase(DIF_INSTALLCLASSDRIVERS);
        MakeCase(DIF_CALCDISKSPACE);
        MakeCase(DIF_DESTROYPRIVATEDATA);
        MakeCase(DIF_VALIDATEDRIVER);
        MakeCase(DIF_MOVEDEVICE);
        MakeCase(DIF_DETECT);
        MakeCase(DIF_INSTALLWIZARD);
        MakeCase(DIF_DESTROYWIZARDDATA);
        MakeCase(DIF_PROPERTYCHANGE);
        MakeCase(DIF_ENABLECLASS);
        MakeCase(DIF_DETECTVERIFY);
        MakeCase(DIF_INSTALLDEVICEFILES);
        MakeCase(DIF_UNREMOVE);
        MakeCase(DIF_SELECTBESTCOMPATDRV);
        MakeCase(DIF_ALLOW_INSTALL);
        MakeCase(DIF_REGISTERDEVICE);
        MakeCase(DIF_INSTALLINTERFACES);
        MakeCase(DIF_DETECTCANCEL);
        MakeCase(DIF_REGISTER_COINSTALLERS);
        MakeCase(DIF_NEWDEVICEWIZARD_FINISHINSTALL);
        MakeCase(DIF_ADDPROPERTYPAGE_ADVANCED);
        MakeCase(DIF_TROUBLESHOOTER);
        default:
            wsprintf(buf, TEXT("%x"), Func);
            return buf;
    }
}

void InitStrings(void)
{
    DWORD  dwClass, dwShare;
    TCHAR  szClass[ 40 ];

    LoadString(g_hInst, 
               INITS,
               g_szErrMem,
               CharSizeOf(g_szErrMem));
    LoadString(g_hInst, 
               IDS_INIT_NAME,
               g_szPortsApplet,
               CharSizeOf(g_szPortsApplet));

}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\cyclades\z\cyzports\util.c ===
/** FILE: util.c *********** Module Header ********************************
 *
 *  Ports applet utility library routines. This file contains string,
 *  cursor, SendWinIniChange() routines.
 *
 * History:
 *  15:30 on Thur  25 Apr 1991  -by-  Steve Cathcart   [stevecat]
 *        Took base code from Win 3.1 source
 *  10:30 on Tues  04 Feb 1992  -by-  Steve Cathcart   [stevecat]
 *        Updated code to latest Win 3.1 sources
 *  15:30 on Thur  03 May 1994  -by-  Steve Cathcart   [stevecat]
 *        Increased  MyMessageBox buffers, Restart dialog changes
 *  17:00 on Mon   18 Sep 1995  -by-  Steve Cathcart   [stevecat]
 *        Changes for product update - SUR release NT v4.0
 *  Nov 1997					-by-  Doron Holan	   [stevecat]
 *        Removed obsolete cpl code
 *
 *  Copyright (C) 1990-1995 Microsoft Corporation
 *
 *************************************************************************/
/* Notes -

    Global Functions:

      U T I L I T Y

        BackslashTerm () - add backslash char to path
        ErrMemDlg () - display Memory Error message box
        MyAtoi () - To convert from Unicode to ANSI string before calling atoi
        myatoi () - local implementation of atoi for Unicode strings
        MyItoa () - To convert from ANSI to Unicode string after calling itoa
        MyMessageBox () - display message to user, with parameters
        MyUltoa () - To convert from Unicode to ANSI string before calling ultoa
        SendWinIniChange () - broadcast system change message via USER
        strscan () - Find a string within another string
        StripBlanks () - Strip leading and trailing blanks from a string


    Local Functions:

 */

//==========================================================================
//                                Include files
//==========================================================================

// C Runtime
#include <stddef.h>
#include <stdlib.h>
#include <string.h>
#include <stdarg.h>

// Application specific
#include "cyzports.h"


#define INT_SIZE_LENGTH   20
#define LONG_SIZE_LENGTH  40


LPTSTR 
BackslashTerm(LPTSTR pszPath)
{
    LPTSTR pszEnd;

    pszEnd = pszPath + lstrlen(pszPath);

    //
    //  Get the end of the source directory
    //
    switch(*CharPrev(pszPath, pszEnd)) {
    case TEXT('\\'):
    case TEXT(':'):
        break;

    default:
        *pszEnd++ = TEXT('\\');
        *pszEnd = TEXT('\0');
    }

    return pszEnd;
}

void 
ErrMemDlg(HWND hParent)
{
    MessageBox(hParent, g_szErrMem, g_szPortsApplet,
               MB_OK | MB_ICONHAND | MB_SYSTEMMODAL );
}

///////////////////////////////////////////////////////////////////////////////
//
//   MyAtoi
//
//   Desc:  To convert from Unicode to ANSI string before
//          calling CRT atoi and atol functions.
//
///////////////////////////////////////////////////////////////////////////////

int 
MyAtoi(LPTSTR  string)
{
   CHAR   szAnsi[ INT_SIZE_LENGTH ];
   BOOL   fDefCharUsed;

#ifdef UNICODE
   WideCharToMultiByte(CP_ACP, 0, string, INT_SIZE_LENGTH,
                       szAnsi, INT_SIZE_LENGTH, NULL, &fDefCharUsed);

   return atoi(szAnsi);
#else
   return atoi(string);
#endif

}


int 
myatoi(LPTSTR pszInt)
{
    int   retval;
    TCHAR cSave;

    for (retval = 0; *pszInt; ++pszInt) {
        if ((cSave = (TCHAR) (*pszInt - TEXT('0'))) > (TCHAR) 9)
            break;

        retval = (int) (retval * 10 + (int) cSave);
    }
    return (retval);
}



///////////////////////////////////////////////////////////////////////////////
//
//   MyItoa
//
//   Desc:  To convert from ANSI to Unicode string after calling
//          CRT itoa function.
//
///////////////////////////////////////////////////////////////////////////////

LPTSTR 
MyItoa(INT value, LPTSTR string, INT radix)
{
   CHAR   szAnsi[INT_SIZE_LENGTH];

#ifdef UNICODE

   _itoa(value, szAnsi, radix);
   MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED, szAnsi, -1,
                       string, INT_SIZE_LENGTH );
#else

   _itoa(value, string, radix);

#endif

   return (string);
 
} // end of MyItoa()


LPTSTR 
MyUltoa(unsigned long value, 
		LPTSTR  string, 
		INT  radix)
{
   CHAR   szAnsi[ LONG_SIZE_LENGTH ];

#ifdef UNICODE

   _ultoa(value, szAnsi, radix);
   MultiByteToWideChar(CP_ACP, MB_PRECOMPOSED, szAnsi, -1,
                       string, LONG_SIZE_LENGTH );
#else

   _ultoa(value, string, radix);

#endif

   return( string );

} // end of MyUltoa()


int 
MyMessageBox(HWND hWnd, 
			 DWORD wText, 
			 DWORD wCaption, 
			 DWORD wType, 
			 ...)
{
    TCHAR   szText[4 * PATHMAX], 
			szCaption[2 * PATHMAX];
    int     ival;
    va_list parg;

    va_start(parg, wType);

    if (wText == INITS)
        goto NoMem;

    if (!LoadString(g_hInst, wText, szCaption, CharSizeOf(szCaption)))
        goto NoMem;

    wvsprintf(szText, szCaption, parg);

    if (!LoadString(g_hInst, wCaption, szCaption, CharSizeOf(szCaption)))
        goto NoMem;

    if ((ival = MessageBox(hWnd, szText, szCaption, wType)) == 0)
        goto NoMem;

    va_end(parg);

    return ival;

NoMem:
    va_end(parg);
    ErrMemDlg(hWnd);

    return 0;
}

void 
SendWinIniChange(LPTSTR lpSection)
{
// NOTE: We have (are) gone through several iterations of which USER
//       api is the correct one to use.  The main problem for the Control
//       Panel is to avoid being HUNG if another app (top-level window)
//       is HUNG.  Another problem is that we pass a pointer to a message
//       string in our address space.  SendMessage will 'thunk' this properly
//       for each window, but PostMessage and SendNotifyMessage will not.
//       That finally brings us to try to use SendMessageTimeout(). 9/21/92
//
// Try SendNotifyMessage in build 260 or later - kills earlier builds
//    SendNotifyMessage ((HWND)-1, WM_WININICHANGE, 0L, (LONG)lpSection);
//    PostMessage ((HWND)-1, WM_WININICHANGE, 0L, (LONG)lpSection);
//  [stevecat] 4/4/92
//
//    SendMessage ((HWND)-1, WM_WININICHANGE, 0L, (LPARAM)lpSection);
//
    //  NOTE: The final parameter (LPDWORD lpdwResult) must be NULL

    SendMessageTimeout((HWND)-1, 
					   WM_WININICHANGE, 
					   0L, 
					   (WPARAM) lpSection,
					   SMTO_ABORTIFHUNG,
					   1000, 
					   NULL);
}

LPTSTR 
strscan(LPTSTR pszString, 
		LPTSTR pszTarget)
{
    LPTSTR psz;

    if (psz = _tcsstr( pszString, pszTarget))
        return (psz);
    else
        return (pszString + lstrlen(pszString));
}


///////////////////////////////////////////////////////////////////////////////
//
//  StripBlanks()
//
//   Strips leading and trailing blanks from a string.
//   Alters the memory where the string sits.
//
///////////////////////////////////////////////////////////////////////////////

void 
StripBlanks(LPTSTR pszString)
{
    LPTSTR  pszPosn;

    //
    //  strip leading blanks
    //

    pszPosn = pszString;

    while (*pszPosn == TEXT(' '))
        pszPosn++;

    if (pszPosn != pszString)
        lstrcpy(pszString, pszPosn);

    //
    //  strip trailing blanks
    //

    if ((pszPosn = pszString + lstrlen(pszString)) != pszString) {
       pszPosn = CharPrev(pszString, pszPosn);

       while (*pszPosn == TEXT(' '))
           pszPosn = CharPrev(pszString, pszPosn);

       pszPosn = CharNext(pszPosn);

       *pszPosn = TEXT('\0');
    }
}

BOOL ReadRegistryByte(HKEY       hKey,
                      PTCHAR     valueName,
                      PBYTE      regData)
{
    DWORD       regDataType = 0;
    DWORD       regDataSize = 0;

    regDataSize = sizeof(*regData);
    if ((ERROR_SUCCESS != RegQueryValueEx(hKey,
                                          valueName,
                                          NULL,
                                          &regDataType,
                                          regData,
                                          &regDataSize))
        || (regDataSize != sizeof(BYTE))
        || (regDataType != REG_BINARY))
    {
        //
        // Read was unsuccessful  or not a binary value, regData is not set
        //
        return FALSE;
    }

    //
    // Read was a success, regData contains the value read in
    //
    return TRUE;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\digi\realport\makefile.inc ===
_LNG=$(LANGUAGE)
_INX=.
STAMP=stampinf -f $@ -d date -v 2.0.0.0

$(O)\digirp.inf: $(_INX)\digirp.inx $(_LNG)\digirp.txt
    copy $(_INX)\$(@B).inx+$(_LNG)\$(@B).txt $@
    $(STAMP)
    
$(O)\digirprt.inf: $(_INX)\digirprt.inx $(_LNG)\digirprt.txt
    copy $(_INX)\$(@B).inx+$(_LNG)\$(@B).txt $@
    $(STAMP)
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\equinox\makefile.inc ===
_LNG=..\$(LANGUAGE)
_INX=..
_INF=obj\$(TARGET_DIRECTORY)
STAMP=stampinf -f $@ -d date -v 5.0.21.40

make_infs:$(_INF)\asynceqn.inf
make_infs:$(_INF)\eqnport.inf


!IFDEF WORKSTATIONINF
!IFDEF BINPLACE_CMD
TSBINPLACE_CMD=$(BINPLACE_CMD:binplace=binplace)
!ENDIF
!ENDIF

!IFDEF SERVERINF
!IFDEF BINPLACE_CMD
TSBINPLACE_CMD=$(BINPLACE_CMD:binplace=binplace -b srvinf)
!ENDIF
!ENDIF

!IFDEF ENTERPRISEINF
!IFDEF BINPLACE_CMD
TSBINPLACE_CMD=$(BINPLACE_CMD:binplace=binplace -b entinf)
!ENDIF
!ENDIF



$(_INF)\asynceqn.inf: $(_INX)\asynceqn.inx 
    copy $(_INX)\$(@B).inx $(@B).tmp1  
    prodfilt $(@B).tmp1 $@ +$(PRODSWITCH)
    @del $(@B).tmp1
    $(STAMP)    
    $(TSBINPLACE_CMD)
    
$(_INF)\eqnport.inf: $(_INX)\eqnport.inx 
    copy $(_INX)\$(@B).inx $(@B).tmp1  
    prodfilt $(@B).tmp1 $@ +$(PRODSWITCH)
    @del $(@B).tmp1
    $(STAMP)    
    $(TSBINPLACE_CMD)
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\equinox\ent\makefile.inc ===
PRODSWITCH=e
ENTERPRISEINF=1
!include ..\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\equinox\wks\makefile.inc ===
PRODSWITCH=d
DATACENTERINF=1
!include ..\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\equinox\dtc\makefile.inc ===
_LNG=..\$(LANGUAGE)
_INX=..
_INF=obj\$(TARGET_DIRECTORY)
STAMP=stampinf -f $@ -d date -v 5.0.21.40

make_infs:$(_INF)\asynceqn.inf


!IFDEF DATACENTERINF
!IFDEF BINPLACE_CMD
TSBINPLACE_CMD=$(BINPLACE_CMD:binplace=binplace -b dtcinf)
!ENDIF
!ENDIF


$(_INF)\asynceqn.inf: $(_INX)\asynceqn.inx 
    copy $(@B).inx $(@B).tmp1  
    prodfilt $(@B).tmp1 $@ +$(PRODSWITCH)
    @del $(@B).tmp1
    $(STAMP)    
    $(TSBINPLACE_CMD)
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\equinox\srv\makefile.inc ===
PRODSWITCH=s
SERVERINF=1
!include ..\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\moxa\intellio\admin\inc\mxdebug.h ===
/************************************************************************
    mxdebug.h
      -- for debug message

    History:  Date          Author      Comment
              8/14/00       Casper      Wrote it.

*************************************************************************/

#ifndef _MXDEBUG_H
#define _MXDEBUG_H


#ifdef _DEBUG
//#define Mx_Debug_Out(str) OutputDebugString(str)
#define Mx_Debug_Out(str) MessageBox(NULL, str, "DEBUG", MB_OK);
#else
#define Mx_Debug_Out(str) 
#endif


#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\moxa\intellio\admin\inc\moxacfg.h ===
/************************************************************************
    moxacfg.h
      -- Configuration struct

    History:  Date          Author      Comment
              8/14/00       Casper      Wrote it.

*************************************************************************/

#ifndef _MOXACFG_H
#define _MOXACFG_H

#include "mxdef.h"


#ifndef EXPORT
#define	EXPORT __declspec(dllexport) 
#endif

struct  PciInfo {
    WORD    DevId;
    WORD    BusNum;
    WORD    DevNum;
    char    RegKey[MAX_PATH];
};

struct MoxaOneCfg{
        WORD    BoardType;
        int     Irq;
        int     BusType;

/* Intellio */        
        WORD    PciIrqAck;
        DWORD   MemBank;

/* Smartio/Industio */        
        WORD    IOaddr[CARD_MAXPORTS_DUMB];
        WORD    Vector;
        
        int     ComNo[CARD_MAXPORTS_INTE];
        int     NPort;
        
/* Intellio */        
        int     DisableFiFo[CARD_MAXPORTS_INTE];
        int     NormalTxMode[CARD_MAXPORTS_INTE];
        
/*  Smartio/Industio */        
        int     FiFo[CARD_MAXPORTS_DUMB];
        int     TxFiFo[CARD_MAXPORTS_DUMB];

		DWORD	polling[CARD_MAXPORTS_INTE];
        
        BOOL    isext;
        struct  PciInfo	Pci;
};

struct MoxaConfig {
        int		OemID;	/* not used */
        int		NoBoards;
        struct  MoxaOneCfg Cfg[MAXCARD];
};

typedef struct MoxaConfig far *  LPMoxaConfig;
typedef struct MoxaOneCfg far *  LPMoxaOneCfg;


/* Smartio/Industio */
#define	RX_FIFO_1		0
#define	RX_FIFO_4		1
#define	RX_FIFO_8		2
#define	RX_FIFO_14		3

#define TX_FIFO_1               0
#define TX_FIFO_2               1
#define TX_FIFO_3               2
#define TX_FIFO_4               3
#define TX_FIFO_5               4
#define TX_FIFO_6               5
#define TX_FIFO_7               6
#define TX_FIFO_8               7
#define TX_FIFO_9               8
#define TX_FIFO_10              9
#define TX_FIFO_11              10
#define TX_FIFO_12              11
#define TX_FIFO_13              12
#define TX_FIFO_14              13
#define TX_FIFO_15              14
#define TX_FIFO_16              15

#define DEFFIFO     RX_FIFO_14
#define DEFTXFIFO   TX_FIFO_16

#define	DEFPOLL		0/*val(ms), not idx */
/* -- */


/* Intellio */
#define DISABLE_FIFO    1
#define ENABLE_FIFO     0

#define NORMAL_TXFIFO   1
#define FAST_TXFIFO     0

#define DEF_ISFIFO      ENABLE_FIFO
#define DEF_TXFIFO      FAST_TXFIFO
/* --  */


#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\moxa\intellio\admin\inc\mxdef.h ===
/************************************************************************
    mxdef.h
      -- MOXA configuration define

    History:  Date          Author      Comment
              8/14/00       Casper      Wrote it.
	      5/29/01       Casper      force Win2000 to 256 ports 

*************************************************************************/


#ifndef	_MXDEF_H
#define _MXDEF_H


//Card flag mask
#define I_MOXA_DUMB 0x0000
#define I_MOXA_INTE 0x1000
#define I_CPU_MSK   (I_MOXA_DUMB | I_MOXA_INTE)

#define I_MOXA_ISA  0x0000
#define I_MOXA_PCI  0x2000
#define I_BUS_MSK   (I_MOXA_ISA | I_MOXA_PCI)

#define I_MOXA_CAB  0x0000  // non-expandable
#define I_MOXA_EXT  0x4000  // expandable 
#define I_IS_EXT    (I_MOXA_CAB | I_MOXA_EXT)

//Port flag, for expandable series
#define	I_8PORT	    0x0000
#define	I_16PORT    0x0001
#define	I_24PORT    0x0002
#define	I_32PORT    0x0003
#define I_64PORT    0x0004
#define I_PORT_MSK   (I_8PORT | I_16PORT | I_24PORT | I_32PORT | I_64PORT)

//Card class
#define I_MOXA_C102     0x0010  //C102, C102PCI
#define I_MOXA_C132     0x0020  //CI-132, CP-132

#define I_MOXA_C104     0x0110  //C104, C014PCI
#define I_MOXA_C104J    0x0120  //CI-104J
#define I_MOXA_C134     0x0130  //CI-134
#define	I_MOXA_C114HI   0x0140  //C114HI
#define I_MOXA_C114     0x0150  //CP-114

#define I_MOXA_C168     0x0210  //C168, C168PCI

#define I_MOXA_CT114    0x0310  //CT114

#define I_MOXA_C204     0x0810  //CP-204  
#define I_MOXA_C218     0x0910  //C218Plus
#define I_MOXA_C320     0x0A10  //C320
#define I_MOXA_C218T    0x0A20  //C218Turbo
#define I_MOXA_C320T    0x0A30  //C320Turbo

#define	I_BRD_MSK       0x0FF0


//Cards type            (I_BRD_MSK, I_CPU_MSK, I_BUS_MSK, I_PORT_MSK, I_IS_EXT)
#define I_MX_C102       (I_MOXA_C102 | I_MOXA_DUMB | I_MOXA_ISA)
#define I_MX_C104       (I_MOXA_C104 | I_MOXA_DUMB | I_MOXA_ISA)
#define I_MX_C168       (I_MOXA_C168 | I_MOXA_DUMB | I_MOXA_ISA)

#define I_MX_CI104J     (I_MOXA_C104J | I_MOXA_DUMB | I_MOXA_ISA)

#define I_MX_C114HI     (I_MOXA_C114HI | I_MOXA_DUMB | I_MOXA_ISA)

#define I_MX_C102PCI    (I_MOXA_C102 | I_MOXA_DUMB | I_MOXA_PCI)
#define I_MX_C104PCI    (I_MOXA_C104 | I_MOXA_DUMB | I_MOXA_PCI)
#define I_MX_C168PCI    (I_MOXA_C168 | I_MOXA_DUMB | I_MOXA_PCI)

#define I_MX_CP104J     (I_MOXA_C104J | I_MOXA_DUMB | I_MOXA_PCI)    

#define I_MX_CI132      (I_MOXA_C132 | I_MOXA_DUMB | I_MOXA_ISA)
#define I_MX_CI134      (I_MOXA_C134 | I_MOXA_DUMB | I_MOXA_ISA)

#define I_MX_CP132      (I_MOXA_C132 | I_MOXA_DUMB | I_MOXA_PCI)
#define I_MX_CP114      (I_MOXA_C114 | I_MOXA_DUMB | I_MOXA_PCI)

#define I_MX_CT114      (I_MOXA_CT114 | I_MOXA_DUMB | I_MOXA_PCI)

#define I_MX_CP204     (I_MOXA_C204 | I_MOXA_INTE | I_MOXA_PCI)

#define I_MX_C218       (I_MOXA_C218 | I_MOXA_INTE | I_MOXA_ISA)
#define I_MX_C218T      (I_MOXA_C218T | I_MOXA_INTE | I_MOXA_ISA)
#define I_MX_C218TPCI   (I_MOXA_C218T | I_MOXA_INTE | I_MOXA_PCI)

#define I_MX_C320       (I_MOXA_C320 | I_MOXA_INTE | I_MOXA_ISA | I_MOXA_EXT)
#define I_MX_C320T      (I_MOXA_C320T | I_MOXA_INTE | I_MOXA_ISA | I_MOXA_EXT)
#define I_MX_C320TPCI   (I_MOXA_C320T | I_MOXA_INTE | I_MOXA_PCI | I_MOXA_EXT)

#define I_MX_C3208      (I_MOXA_C320 | I_MOXA_INTE | I_MOXA_ISA | I_8PORT | I_MOXA_EXT)
#define I_MX_C32016     (I_MOXA_C320 | I_MOXA_INTE | I_MOXA_ISA | I_16PORT | I_MOXA_EXT)
#define I_MX_C32024     (I_MOXA_C320 | I_MOXA_INTE | I_MOXA_ISA | I_24PORT | I_MOXA_EXT)
#define I_MX_C32032     (I_MOXA_C320 | I_MOXA_INTE | I_MOXA_ISA | I_32PORT | I_MOXA_EXT)

#define I_MX_C320T8     (I_MOXA_C320T | I_MOXA_INTE | I_MOXA_ISA | I_8PORT | I_MOXA_EXT)
#define I_MX_C320T16    (I_MOXA_C320T | I_MOXA_INTE | I_MOXA_ISA | I_16PORT | I_MOXA_EXT)
#define I_MX_C320T24    (I_MOXA_C320T | I_MOXA_INTE | I_MOXA_ISA | I_24PORT | I_MOXA_EXT)
#define I_MX_C320T32    (I_MOXA_C320T | I_MOXA_INTE | I_MOXA_ISA | I_32PORT | I_MOXA_EXT)

#define I_MX_C320TPCI8  (I_MOXA_C320T | I_MOXA_INTE | I_MOXA_PCI | I_8PORT | I_MOXA_EXT)
#define I_MX_C320TPCI16 (I_MOXA_C320T | I_MOXA_INTE | I_MOXA_PCI | I_16PORT | I_MOXA_EXT)
#define I_MX_C320TPCI24 (I_MOXA_C320T | I_MOXA_INTE | I_MOXA_PCI | I_24PORT | I_MOXA_EXT)
#define I_MX_C320TPCI32 (I_MOXA_C320T | I_MOXA_INTE | I_MOXA_PCI | I_32PORT | I_MOXA_EXT)



#define	MX_PCI_VENID            0x1393
#define MX_CP204J_DEVID         0x2040
#define MX_C218TPCI_DEVID       0x2180
#define MX_C320TPCI_DEVID       0x3200
#define	MX_C168PCI_DEVID        0x1680
#define	MX_C104PCI_DEVID        0x1040
#define	MX_CP132_DEVID          0x1320
#define	MX_CT114_DEVID          0x1140
#define MX_CP114_DEVID		0x1141


//ASIC ID
#define ASIC_C168       1
#define ASIC_C104       2
#define ASIC_CI134      3
#define ASIC_CI132      4
#define ASIC_C114       2
#define ASIC_C102       0x0B
#define ASIC_CI104J     5

#define	MX_BUS_ISA	0
#define MX_BUS_PCI	1

#define 	MAXCARD 			4

#ifdef _WIN95
#define 	MAXPORTS            128
#elif defined(_WINNT)
#define 	MAXPORTS            256
#endif

/* for Smartio/Industio */
#define     CARD_MAXPORTS_DUMB  8
/* for Intellio */
#define     CARD_MAXPORTS_INTE  32

#define	MOXA_ID	    0
#define	PCL_ID      1
#define	CONTEC_ID   2
#define NEA_ID      3

//#define	GETPORTNUM(type)   (8*((type & I_PORTMSK)+1))

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\moxa\intellio\admin\inc\stdafx.h ===
#include <windows.h>
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\moxa\intellio\admin\inc\strdef.h ===
/************************************************************************
    strdef.h
      -- strdef.cpp include file

    History:  Date          Author      Comment
              8/14/00       Casper      Wrote it.

*************************************************************************/

#ifndef _STRDEF_H
#define _STRDEF_H

#define TYPESTRLEN	50

#define IRQCNT    9
#define PORTSCNT  5
#define FIFOCNT   4
#define TXFIFOCNT 16  
#define MODULECNT 4
#define MEMBANKCNT  6
#define POLLCNT		6

struct PCITABSTRC{
    WORD   devid;
    WORD   boardtype;
    int    portnum;
    LPCSTR typestr;
    LPCSTR infstr;
};

struct ISATABSTRC{
    int	  mxkey_no;
    WORD  boardtype;
    int   asic_id;
    int   portnum;
    LPCSTR typestr;
    LPCSTR infstr;
};

struct  IRQTABSTRC {
        int        irq;
        LPSTR      irq_str;
};
extern struct IRQTABSTRC  GIrqTab[IRQCNT];

struct PORTSTABSTRC {
       int         ports;
       LPSTR       ports_str;
       WORD        ports_def;
};
extern struct PORTSTABSTRC GPortsTab[PORTSCNT];

struct MEMBANKSTRC {
        ULONG   membank;
        LPSTR   membank_str;
};
extern struct MEMBANKSTRC GMemBankTab[MEMBANKCNT];

struct MODULETYPESTRC{
        int     ports;
        WORD    ports_def;   
        LPSTR   ports_str;
};
extern struct MODULETYPESTRC GModuleTypeTab[MODULECNT];   

struct  FIFOTABSTRC {
        int        fifo;
        int        fifoidx; 
        LPSTR      fifo_str;
};
extern struct FIFOTABSTRC  GFifoTab[FIFOCNT];

struct  TXFIFOTABSTRC {
        int        txfifo;
        int        fifoidx; 
        LPSTR      fifo_str;
};
extern struct TXFIFOTABSTRC  GTxFifoTab[TXFIFOCNT];

struct POLLSTRC{
		int		poll_idx;
		DWORD	poll_val;
		LPSTR	poll_str;
};

extern struct POLLSTRC GPollTab[POLLCNT];

extern LPCSTR NoType_Str;
extern LPCSTR Ldir_DiagReg;
extern LPCSTR Ldir_mxkey;// = "mxkey";
extern LPCSTR Ldir_DiagDLL;// = "DiagDLL";

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\moxa\intellio\admin\inc\inte\intecfg.h ===
/************************************************************************
    intecfg.h
      -- intecfg.cpp include file

    History:  Date          Author      Comment
              8/14/00       Casper      Wrote it.

*************************************************************************/

#ifndef _INTECFG_H
#define _INTECFG_H

#include <setupapi.h>
#include <cfgmgr32.h>

int Inte_CompConfig(LPMoxaOneCfg cfg1, LPMoxaOneCfg cfg2);

BOOL Inte_GetFifo(HDEVINFO DeviceInfoSet, 
				PSP_DEVINFO_DATA DeviceInfoData,
				LPMoxaOneCfg cfg);
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\moxa\intellio\admin\inc\regcfg.h ===
/************************************************************************
    regcfg.h
      -- regcfg.cpp include file

    History:  Date          Author      Comment
              8/14/00       Casper      Wrote it.

*************************************************************************/


#ifndef _REGCFG_H
#define _REGCFG_H

#include <setupapi.h>
#include <cfgmgr32.h>

#include "moxacfg.h"

extern TCHAR  GszColon[];
extern TCHAR  GszPorts[];
extern TCHAR  GszDefParams[];
extern TCHAR  GszPortName[];

void WriteINISetting(TCHAR *szPort);
void RemoveINISetting(TCHAR *szPort);


BOOL MxGetComNo(HDEVINFO DeviceInfoSet, 
				PSP_DEVINFO_DATA DeviceInfoData,
				LPMoxaOneCfg cfg);
BOOL RemovePort(IN HDEVINFO		DeviceInfoSet,
				IN PSP_DEVINFO_DATA	DeviceInfoData,
				int	pidx);

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\moxa\intellio\admin\inc\regtool.h ===
/************************************************************************
    regtool.h
      -- regtool.cpp include file

    History:  Date          Author      Comment
              8/14/00       Casper      Wrote it.

*************************************************************************/

#ifndef _REGTOOL_H
#define _REGTOOL_H

ULONG MxGetVenDevId(LPSTR data);
int GetFreePort(void);


#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\moxa\intellio\admin\inc\inte\intetype.h ===
/************************************************************************
    intetype.h
      -- intetype.cpp include file

    History:  Date          Author      Comment
              8/14/00       Casper      Wrote it.

*************************************************************************/

#ifndef _INTETYPE_H
#define _INTETYPE_H

#include "strdef.h"

/* Total Intellio PCI series board type */
#define INTE_PCINUM 3	

/* Total Intellio ISA series board type */
#define INTE_ISANUM 5

extern struct PCITABSTRC GINTE_PCITab[INTE_PCINUM];
extern struct ISATABSTRC GINTE_ISATab[INTE_ISANUM];

void Inte_GetTypeStr(WORD boardtype, int bustype, LPSTR typestr);
void Inte_GetTypeStrPorts(WORD boardtype, int bustype, int ports, LPSTR typestr);

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\moxa\intellio\admin\inc\inte\intestr.h ===
/************************************************************************
    intestr.h
      -- intestr.cpp include file

    History:  Date          Author      Comment
              8/14/00       Casper      Wrote it.

*************************************************************************/


#ifndef _INTESTR_H
#define _INTESTR_H


extern LPSTR Estr_MemFail;
extern LPSTR Estr_CodNotFound;
extern LPSTR Estr_CodLength;
extern LPSTR Estr_CodErr;
extern LPSTR Estr_IsaNotFound;
extern LPSTR Estr_Download;
extern LPSTR Estr_CPUNotFound;
extern LPSTR Estr_PortsMismatch;
extern LPSTR Estr_Absent;
extern LPSTR Estr_IrqFail;
extern LPSTR Estr_PciIrqDup;
extern LPSTR Estr_CPUDownloadFail;// =" at base memory [%lX] CPU module download failure !";

extern LPSTR Estr_ComNum;// = "Port %d(COM%d) Com number invalid !";
extern LPSTR Estr_ComDup;// = "COM number conflicts between Port%d and Port%d !";
extern LPSTR Estr_MemDup;// = "Memory bank conflict between board %d and board %d !";
extern LPSTR Estr_BrdComDup;// = "COM number conflict between board %d and board %d !";
extern LPSTR Estr_PortMax;// = "Selected COM ports have exceeded max port number !";
extern LPSTR Estr_LoadPci;// = "Load mxpci.sys service fail !\nCan not get PCI informantion.\n";
extern LPSTR Estr_IrqErr;// = "Selected ISA board IRQ conflict with PCI board IRQ !"

extern LPSTR Estr_PortUsed;
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\moxa\intellio\admin\intellio\mxicfg\oem.h ===
/************************************************************************
    oem.h
      -- oem??.cpp include file

    History:  Date          Author      Comment
              8/14/00       Casper      Wrote it.

*************************************************************************/

#ifndef _OEM_H
#define _OEM_H


extern LPSTR Estr_ErrTitle;
extern LPSTR Estr_WarnTitle;

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\moxa\intellio\admin\intellio\mxicfg\resource.h ===
//{{NO_DEPENDENCIES}}
// Microsoft Developer Studio generated include file.
// Used by Mxicfg.rc
//
#define IDD_PORTINSTALL                 101
#define IDD_PORTSETTINGS                103
#define IDD_ADV_SETTINGS                104
#define IDC_BUSDEV                      1001
#define IDC_COMNUM                      1001
#define IDC_PROP                        1002
#define IDC_LIST_PORTS                  1003
#define IDC_COMAUTO                     1004
#define IDC_POLLINT                     1005
#define IDC_UARTFIFOON                  1006
#define IDC_UARTFIFOOFF                 1007
#define IDC_RXFIFO                      1008
#define IDC_ADVANCED                    1008
#define IDC_FIFOAUTO                    1009
#define IDC_UARTFIFOAUTO                1009
#define IDC_TXFIFO                      1010
#define IDC_NORMAL                      1010
#define IDC_TXFIFOAUTO                  1011
#define IDC_TXMODEAUTO                  1011
#define IDC_PORTCNT                     1011
#define IDC_POLLAUTO                    1012
#define ID_OK                           1021
#define ID_CANCEL                       1022

// Next default values for new objects
// 
#ifdef APSTUDIO_INVOKED
#ifndef APSTUDIO_READONLY_SYMBOLS
#define _APS_NEXT_RESOURCE_VALUE        106
#define _APS_NEXT_COMMAND_VALUE         40001
#define _APS_NEXT_CONTROL_VALUE         1012
#define _APS_NEXT_SYMED_VALUE           101
#endif
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\moxa\intellio\admin\intellio\mxicfg\mxicfg.cpp ===
/************************************************************************
    mxicfg.cpp
      -- export EnumPropPages function, dialog
	  -- export Co-installer function, MxICoInstaller

    History:  Date          Author      Comment
              8/14/00       Casper      Wrote it.

*************************************************************************/

#include <windows.h>
#include <windowsx.h>

#include <commctrl.h>
#include <stdlib.h>
#include <stdio.h>

#include <setupapi.h>
#include <cfgmgr32.h>

#include <initguid.h>
#include <devguid.h>
#include <string.h>
#include <msports.h>
#include <tchar.h>
#include <regstr.h>

#include "moxacfg.h"
#include "strdef.h"
#include "intetype.h"
#include "intestr.h"
#include "intecfg.h"
#include "resource.h"
#include "oem.h"
#include "regcfg.h"
#include "regtool.h"
#include "mxdebug.h"
#include "mxlist.h"


/* Local define */
#define PPParamsSignature       'MOXA'
typedef struct
{
    ULONG                       Signature;
    HDEVINFO                    DeviceInfoSet;
    PSP_DEVINFO_DATA            DeviceInfoData;
    BOOL                        FirstTimeInstall;
} PROPPAGEPARAMS, *PPROPPAGEPARAMS;

//#define DllImport	__declspec( dllimport )
//#define DllExport	__declspec( dllexport )
/********************************************************************/


/* Static(Local) Variable */
static HINSTANCE GhInst;
static int       GCurPort;
struct MoxaOneCfg GCtrlCfg;
struct MoxaOneCfg GBakCtrlCfg;
static WORD	_chk[] = { BST_CHECKED , BST_UNCHECKED };
static LPBYTE Gcombuf;

/********************************************************************/


/* Static(Local) Function */
static BOOL FirstTimeSetup(IN HDEVINFO		DeviceInfoSet,
						   IN PSP_DEVINFO_DATA	DeviceInfoData);
static BOOL IsaGetSetting(HDEVINFO DeviceInfoSet, 
                   PSP_DEVINFO_DATA DeviceInfoData,
                   LPMoxaOneCfg Isacfg);
static BOOL PciGetSetting(HDEVINFO DeviceInfoSet, 
                   PSP_DEVINFO_DATA DeviceInfoData,
                   LPMoxaOneCfg cfg);
static BOOL SaveSetting(HDEVINFO DeviceInfoSet, 
                   PSP_DEVINFO_DATA DeviceInfoData,
                   LPMoxaOneCfg cfg,LPMoxaOneCfg bakcfg,
				   BOOL isfirst);

static BOOL CALLBACK PortConfigProc(HWND hdlg,UINT uMessage,
				WPARAM wparam,LPARAM lparam);
static BOOL Port_OnInitDialog(HWND hwnd, LPMoxaOneCfg Isacfg);
static BOOL CALLBACK AdvDlgProc(HWND hDlg,UINT iMsg,WPARAM wParam,LPARAM lParam);
static BOOL Adv_InitDlg(HWND hwnd, LPMoxaOneCfg Isacfg);

static BOOL GetAdvResult(HWND hwnd,LPMoxaOneCfg Ctrlcfg,int curport);
static BOOL CheckCOM(HWND hdlg, LPMoxaOneCfg Ctrlcfg);


/********************************************************************/


extern "C" int WINAPI DllMain( HINSTANCE hDll, DWORD dwReason, LPVOID lpReserved )
{
    switch( dwReason )
    {
    case DLL_PROCESS_ATTACH:
        GhInst = hDll;
        DisableThreadLibraryCalls(hDll);
        break;

    case DLL_PROCESS_DETACH:
        break;

    case DLL_THREAD_DETACH:
        break;

    case DLL_THREAD_ATTACH:
    default:
        break;
    }

    return TRUE;
}


extern "C" DWORD CALLBACK MxICoInstaller(
			IN DI_FUNCTION	InstallFunction,
			IN HDEVINFO		DeviceInfoSet,
			IN PSP_DEVINFO_DATA	DeviceInfoData	/*OPTIONAL*/,
			IN OUT PCOINSTALLER_CONTEXT_DATA	Context
)
{
	DWORD	ret = NO_ERROR;

	switch(InstallFunction){
	case DIF_FIRSTTIMESETUP:
		if(!FirstTimeSetup(DeviceInfoSet, DeviceInfoData))
			return ERROR_DI_DO_DEFAULT;
		break;
	case DIF_INSTALLDEVICE:
/*		if(!SetupDiInstallDevice(DeviceInfoSet, DeviceInfoData))
			return GetLastError();
*/
		break;
	}

	return ret;
}


extern "C" BOOL CALLBACK EnumPropPages(
				PSP_PROPSHEETPAGE_REQUEST lpq,
				LPFNADDPROPSHEETPAGE AddPropSheetPageProc,
				LPARAM lParam)
{
        HPROPSHEETPAGE	hspPropSheetPage;
        PROPSHEETPAGE	PropSheetPage;
		PPROPPAGEPARAMS  pPropParams = NULL;


		Gcombuf = NULL;
        int     i;
        for ( i=0; i<CARD_MAXPORTS_INTE; i++ ){
            GCtrlCfg.ComNo[i] = 3+i;
            GCtrlCfg.DisableFiFo[i] = DEF_ISFIFO;
            GCtrlCfg.NormalTxMode[i] = DEF_TXFIFO;
			GCtrlCfg.polling[i] = DEFPOLL;
        }

        if (PciGetSetting(lpq->DeviceInfoSet, lpq->DeviceInfoData, &GCtrlCfg) == TRUE ){
            GCtrlCfg.BusType = MX_BUS_PCI;
        }else if(IsaGetSetting(lpq->DeviceInfoSet, lpq->DeviceInfoData, &GCtrlCfg) == TRUE){
            GCtrlCfg.BusType = MX_BUS_ISA;
        }else
			return FALSE;


		GBakCtrlCfg = GCtrlCfg;

		/* Free on WM_DESTROY */
		pPropParams = (PROPPAGEPARAMS*)LocalAlloc(LMEM_FIXED, sizeof(PROPPAGEPARAMS));
		if (!pPropParams){
			return FALSE;
		}

		HCOMDB	hcomdb;
		DWORD	maxport;
		ComDBOpen (&hcomdb);
		ComDBGetCurrentPortUsage (hcomdb,
				NULL, 0, CDB_REPORT_BYTES, &maxport);
		Gcombuf = new BYTE[maxport];

		if(Gcombuf == NULL){
			ComDBClose(hcomdb);
			return FALSE;
		}

		ComDBGetCurrentPortUsage (hcomdb,
				Gcombuf, maxport, CDB_REPORT_BYTES, &maxport);

		ComDBClose(hcomdb);

		for(i=0;i<GCtrlCfg.NPort;i++){
			int comnum = GCtrlCfg.ComNo[i];
			Gcombuf[comnum-1] = 0;
		}


		pPropParams->Signature = PPParamsSignature;
		pPropParams->DeviceInfoSet = lpq->DeviceInfoSet;
		pPropParams->DeviceInfoData = lpq->DeviceInfoData;
		pPropParams->FirstTimeInstall = FALSE;

		if (lpq->PageRequested == SPPSR_ENUM_ADV_DEVICE_PROPERTIES)
		{
			//
			// Setup the advanced properties window information
			//
			DWORD   RequiredSize = 0;
			DWORD   dwTotalSize = 0;

			memset(&PropSheetPage, 0, sizeof(PropSheetPage));
			//
			// Add the Port Settings property page
			//
			PropSheetPage.dwSize      = sizeof(PROPSHEETPAGE);
			PropSheetPage.dwFlags     = PSP_DEFAULT; // | PSP_HASHELP;
			PropSheetPage.hInstance   = GhInst;
			PropSheetPage.pszTemplate = MAKEINTRESOURCE(IDD_PORTSETTINGS);

			//
			// following points to the dlg window proc
			//
			PropSheetPage.pfnDlgProc = PortConfigProc;
			PropSheetPage.lParam     = (LPARAM)pPropParams;

			//
			// following points to some control callback of the dlg window proc
			//
			PropSheetPage.pfnCallback = NULL;

			//
			// allocate our "Ports Setting" sheet
			//
			hspPropSheetPage = CreatePropertySheetPage(&PropSheetPage);
			if (!hspPropSheetPage)
			{
				return FALSE;
			}

			//
			// add the thing in.
			//
			if (!AddPropSheetPageProc(hspPropSheetPage, lParam))
			{
				DestroyPropertySheetPage(hspPropSheetPage);
				return FALSE;
			}
		}

		return TRUE;

}


static BOOL FirstTimeSetup(IN HDEVINFO		DeviceInfoSet,
						   IN PSP_DEVINFO_DATA	DeviceInfoData)
{
	HINF	fd;
	TCHAR	filepath[MAX_PATH];
	TCHAR	syspath[MAX_PATH];
	UINT	eline;

	GetSystemDirectory(syspath, MAX_PATH);
	wsprintf(filepath,TEXT("%s\\$winnt$.inf"),syspath);
	fd = SetupOpenInfFile(filepath, NULL,
        INF_STYLE_WIN4, &eline);
	if(fd == INVALID_HANDLE_VALUE){
		MessageBox(NULL, "Open Inf fail", "ERROR", MB_OK);
		return FALSE;
	}


	TCHAR	szline[20];
	TCHAR	sztext[40];
	DWORD	szsize;
	int		idx=1;
	INFCONTEXT  InfContext;
	do{
		//[AsyncAdapters]
		//Adapter0?=params.Adapter0?
		wsprintf(szline, "Adapter%0d", idx);
		if(!SetupFindFirstLine(fd, TEXT("AsyncAdapters"),
				szline, &InfContext))
			continue;

		if(!SetupGetLineText(
				&InfContext, NULL, NULL, NULL, sztext, MAX_PATH, &szsize))
			continue;

		//params.Adapter0?.OemSection
		//read Bus=PCI/ISA
		wsprintf(szline, TEXT("%s.%s"), sztext, TEXT("OemSection"));
		if(!SetupFindFirstLine(fd, szline, TEXT("Bus"), &InfContext))
			continue;
		if(!SetupGetLineText(
				&InfContext, NULL, NULL, NULL, sztext, MAX_PATH, &szsize))
			continue;

		if(!lstrcmp(sztext,"ISA")==0)
			continue;

		TCHAR	InstName[MAX_PATH];
		SetupFindFirstLine(fd, szline, TEXT("BoardType"), &InfContext);
		SetupGetLineText(
			&InfContext, NULL, NULL, NULL, sztext, MAX_PATH, 
			&szsize);

		switch(sztext[0]){
		case '1':
			wsprintf(InstName, "MX1000");
			break;
		case '2':
			wsprintf(InstName, "MX1001");
			break;
		case '3':
			wsprintf(InstName, "MX1002");
			break;
		case '4':
			wsprintf(InstName, "MX1003");
			break;
		case '5':
			wsprintf(InstName, "MX1004");
			break;
		default:
			continue;
		}

		GUID	mpsguid = GUID_DEVCLASS_MULTIPORTSERIAL;
		DeviceInfoData->cbSize = sizeof(SP_DEVINFO_DATA);
		SetupDiCreateDeviceInfo(
			DeviceInfoSet, InstName, &mpsguid, NULL, NULL,
			DICD_GENERATE_ID, DeviceInfoData);

		SetupDiSetDeviceRegistryProperty(
			DeviceInfoSet, DeviceInfoData, SPDRP_HARDWAREID ,
			(CONST BYTE*)InstName, lstrlen(InstName));

	}while(1);

	SetupCloseInfFile(fd);

}


/* check is MOXA board or not, then init MoxaOneCfg */
static BOOL PciGetSetting(HDEVINFO DeviceInfoSet, 
                   PSP_DEVINFO_DATA DeviceInfoData,
                   LPMoxaOneCfg cfg)
{
        TCHAR   DevInstId[MAX_DEVICE_ID_LEN];
        DWORD   rSize;
        ULONG   val;
        WORD    VenId, DevId;
        int     i;


        if (SetupDiGetDeviceInstanceId(
            DeviceInfoSet, DeviceInfoData ,
            DevInstId, MAX_DEVICE_ID_LEN, &rSize) == FALSE)
                return FALSE;

        val = MxGetVenDevId(DevInstId);

        VenId = (WORD)(val >> 16);
        DevId = (WORD)(val & 0xFFFF);

		/* Check is MOXA PCI Intellio board or not ? */
        if(VenId != MX_PCI_VENID)
            return FALSE;
        for(i=0; i<INTE_PCINUM; i++){
            if(DevId == GINTE_PCITab[i].devid){
                cfg->BoardType = GINTE_PCITab[i].boardtype;
                cfg->NPort = GINTE_PCITab[i].portnum;
                cfg->BusType = MX_BUS_PCI;
                cfg->Pci.DevId = DevId;
                lstrcpy(cfg->Pci.RegKey, DevInstId);
                break;
            }
        }

        if(i==INTE_PCINUM)
            return FALSE;

		/* Get COM Name */
        MxGetComNo(DeviceInfoSet, DeviceInfoData, cfg);

		/* Get FIFO setting & Transmission mode*/
		Inte_GetFifo(DeviceInfoSet, DeviceInfoData, cfg);

        return TRUE;
}

/* check is MOXA board or not, then init MoxaOneCfg */
static BOOL IsaGetSetting(HDEVINFO DeviceInfoSet, 
                   PSP_DEVINFO_DATA DeviceInfoData,
                   LPMoxaOneCfg Isacfg)
{
        TCHAR	szName[MAX_PATH];
        int     i;
        DWORD	len, rlen;
        int     typeno;
		DWORD	type;

		/* First Get Hardware ID.... */
		if(!SetupDiGetDeviceRegistryProperty(
			DeviceInfoSet,	DeviceInfoData,
			SPDRP_HARDWAREID,	&type,
			(PBYTE)szName,	MAX_PATH,	&len)){

			SP_DRVINFO_DATA DriverInfoData;
			PSP_DRVINFO_DETAIL_DATA DriverInfoDetailData;
    
			DriverInfoData.cbSize = sizeof(SP_DRVINFO_DATA);
			if (!SetupDiGetSelectedDriver( DeviceInfoSet,
				DeviceInfoData,
				&DriverInfoData)){
				return FALSE;
			}
    
			DriverInfoDetailData = new SP_DRVINFO_DETAIL_DATA;
			if(DriverInfoDetailData==NULL)
				return FALSE;
		    DriverInfoDetailData->cbSize = sizeof(SP_DRVINFO_DETAIL_DATA);
			if (!SetupDiGetDriverInfoDetail(DeviceInfoSet,
				DeviceInfoData,
				&DriverInfoData,
				DriverInfoDetailData,
				sizeof(SP_DRVINFO_DETAIL_DATA),
				&rlen)){
				if(GetLastError() == ERROR_INSUFFICIENT_BUFFER){
					delete DriverInfoDetailData;
					LPBYTE ptr = new BYTE[rlen];
					DriverInfoDetailData = (PSP_DRVINFO_DETAIL_DATA)ptr;
					if(DriverInfoDetailData == NULL)
						return FALSE;
				    DriverInfoDetailData->cbSize = sizeof(SP_DRVINFO_DETAIL_DATA);
					if (!SetupDiGetDriverInfoDetail(DeviceInfoSet,
							DeviceInfoData,
							&DriverInfoData,
							DriverInfoDetailData,
							rlen,
							&rlen)){
						delete[] ptr;
						return FALSE;
					}
					lstrcpy(szName, DriverInfoDetailData->HardwareID);
					delete[] ptr;
				}else
					delete DriverInfoDetailData;
			}else{
				delete DriverInfoDetailData;
			}
		}

		/* Use Hardware ID to check is MOXA ISA board or not */
		/* MOXA ISA board ID is MX???? */
		if(lstrcmp(szName,"MX10")!=0)
            		return FALSE;
            		
        typeno = _ttoi(&(szName[4]));
        for(i=0;i<INTE_ISANUM;i++){
            if(GINTE_ISATab[i].mxkey_no==typeno){
                Isacfg->BusType = MX_BUS_ISA;
                Isacfg->BoardType = GINTE_ISATab[i].boardtype;
                Isacfg->NPort = GINTE_ISATab[i].portnum;
                break;
            }
        }

        if(i==INTE_ISANUM){ //HardwareID incorrect !!
            return FALSE;
        }


		/* Get COM Name */
        MxGetComNo(DeviceInfoSet, DeviceInfoData, Isacfg);
		/* Get FIFO setting & Transmission mode*/
		Inte_GetFifo(DeviceInfoSet, DeviceInfoData, Isacfg);

        return TRUE;
}


static BOOL SaveSetting(HDEVINFO DeviceInfoSet, 
                   PSP_DEVINFO_DATA DeviceInfoData,
                   LPMoxaOneCfg cfg,
				   LPMoxaOneCfg bakcfg,
				   BOOL isfirst)
{
        HKEY    hkey, hkey1;
        TCHAR   tmp[MAX_PATH];
        int     portidx;
        DWORD   val;
		BOOL	ischange = FALSE;
		BOOL	is_boardchange = FALSE;
		HCOMDB	hcomdb;
		BOOL	bret;
		TCHAR	charBuffer[MAX_PATH];

        hkey = SetupDiOpenDevRegKey(
                DeviceInfoSet, DeviceInfoData,
                DICS_FLAG_GLOBAL, 0, DIREG_DRV, KEY_READ);

        if(hkey==INVALID_HANDLE_VALUE)
            return FALSE;

        wsprintf( tmp, TEXT("Parameters"));
        if(RegCreateKeyEx( hkey, 
                    tmp, 0, NULL, 0,
                    KEY_ALL_ACCESS, NULL,
                    &hkey1, NULL) != ERROR_SUCCESS){
			RegCloseKey(hkey);
            return FALSE;
		}

		RegSetValueEx( hkey1, TEXT("NumPorts"), 0,
                REG_DWORD, (CONST BYTE*)&(cfg->NPort), sizeof(DWORD));

		RegCloseKey(hkey1);

		if(ComDBOpen (&hcomdb) != ERROR_SUCCESS)
			return FALSE;

		if(cfg->NPort != bakcfg->NPort){
			SP_DEVINSTALL_PARAMS DevInstallParams;
			//
			// The changes are written, notify the world to reset the driver.
			//
			DevInstallParams.cbSize = sizeof(SP_DEVINSTALL_PARAMS);
			if(SetupDiGetDeviceInstallParams(DeviceInfoSet,
                                         DeviceInfoData,
                                         &DevInstallParams))
			{
				DevInstallParams.FlagsEx |= DI_FLAGSEX_PROPCHANGE_PENDING;

				SetupDiSetDeviceInstallParams(DeviceInfoSet,
                                          DeviceInfoData,
                                          &DevInstallParams);
			}
			is_boardchange = TRUE;
		}

        for(portidx=0; portidx<bakcfg->NPort; portidx++){
				ComDBReleasePort (hcomdb, bakcfg->ComNo[portidx]);
		}

		/* Save new setting into parameters */
        for(portidx=0; portidx<cfg->NPort; portidx++){
			ischange = FALSE;
            wsprintf( tmp, TEXT("Parameters\\port%03d"), portidx+1 );
            if(RegCreateKeyEx( hkey, 
                        tmp, 0, NULL, 0,
                        KEY_ALL_ACCESS, NULL,
                        &hkey1, NULL) != ERROR_SUCCESS){
				ComDBClose(hcomdb);
				RegCloseKey(hkey);
				return FALSE;
			}
			
			wsprintf(tmp, TEXT("COM%d"), cfg->ComNo[portidx]);
			RegSetValueEx( hkey1, TEXT("PortName"), 0,
                    REG_SZ, (CONST BYTE*)tmp, lstrlen(tmp)+1);

            RegSetValueEx( hkey1, TEXT("DisableFiFo"), 0,
                    REG_DWORD, (CONST BYTE*)&(cfg->DisableFiFo), sizeof(DWORD));

            RegSetValueEx( hkey1, TEXT("TxMode"), 0,
                    REG_DWORD, (CONST BYTE*)&(cfg->NormalTxMode), sizeof(DWORD));

            val = cfg->polling[portidx];
            RegSetValueEx( hkey1, TEXT("PollingPeriod"), 0,
                    REG_DWORD, (CONST BYTE*)&val, sizeof(DWORD));

            RegCloseKey(hkey1);
		}

		/*  Check is changed or not.
			If changed, disable the port and re-enable the port to
			make the change active
		*/

        for(portidx=0; portidx<cfg->NPort; portidx++){
			ischange = FALSE;
			if(bakcfg->ComNo[portidx] != cfg->ComNo[portidx]){
				ischange = TRUE;

				/* get old setting */
				wsprintf(tmp, TEXT("COM%d"), bakcfg->ComNo[portidx]);
				_tcscat(tmp, GszColon);

				GetProfileString(GszPorts,
                     tmp,
                     TEXT(""),
                     charBuffer,
                     sizeof(charBuffer) / sizeof(TCHAR) );

				wsprintf(tmp, TEXT("COM%d"), cfg->ComNo[portidx]);
				_tcscat(tmp, GszColon);
				//
				// Insert the new key based on the old one
				//
				if (charBuffer[0] == TEXT('\0')) {
					WriteProfileString(GszPorts, tmp, GszDefParams);
				} else {
					WriteProfileString(GszPorts, tmp, charBuffer);
				}

				wsprintf(tmp, TEXT("COM%d"), bakcfg->ComNo[portidx]);
				_tcscat(tmp, GszColon);
				/*SendWinIniChange((LPTSTR)GszPorts);*/
				WriteProfileString(GszPorts, tmp, NULL);

			}
/*			if(bakcfg->DisableFiFo[portidx] != cfg->DisableFiFo[portidx])
				ischange = TRUE;
			if(bakcfg->NormalTxMode[portidx] != cfg->NormalTxMode[portidx])
				ischange = TRUE;
			if((bakcfg->polling[portidx] != cfg->polling[portidx]))
				ischange = TRUE;*/

			if(ischange && (!is_boardchange)){
				DEVINST c_DevInst;
				TCHAR	c_deviceid[MAX_DEVICE_ID_LEN];
				int		bidx;
				int		pidx;

				//	enumerate the child to find the port.
				if(CM_Get_Child(&c_DevInst, DeviceInfoData->DevInst, 0)
						!=CR_SUCCESS)
					return FALSE;

				pidx = -1;
				do{
					if(CM_Get_Device_ID(c_DevInst, c_deviceid, MAX_DEVICE_ID_LEN, 0)
							!= CR_SUCCESS)
						break;

					if(sscanf(c_deviceid, "MXCARD\\MXCARDB%02dP%03d", &bidx, &pidx)!=2){
						pidx = -1;
						break;
					}
					
					if(portidx == pidx){
						// port found
						break;
					}
				}while(CM_Get_Sibling(&c_DevInst,c_DevInst,0)==CR_SUCCESS);

				if(pidx == -1){ // not found
					continue;
				}
				CM_Disable_DevNode(c_DevInst, 0);
			}
		}

        for(portidx=0; portidx<cfg->NPort; portidx++){
			ischange = FALSE;
			if(bakcfg->ComNo[portidx] != cfg->ComNo[portidx]){
				ischange = TRUE;
			}
/*			if(bakcfg->DisableFiFo[portidx] != cfg->DisableFiFo[portidx])
				ischange = TRUE;
			if(bakcfg->NormalTxMode[portidx] != cfg->NormalTxMode[portidx])
				ischange = TRUE;
			if((bakcfg->polling[portidx] != cfg->polling[portidx]))
				ischange = TRUE;
*/
			ComDBClaimPort (hcomdb, cfg->ComNo[portidx], TRUE, &bret);
			
			DEVINST c_DevInst;
			TCHAR	c_deviceid[MAX_DEVICE_ID_LEN];
			HDEVINFO	c_DeviceInfoSet;
			SP_DEVINFO_DATA c_DeviceInfoData;
			int		bidx;
			int		pidx;

			// to get c_deviceid (child/port)
			if(CM_Get_Child(&c_DevInst, DeviceInfoData->DevInst, 0)
					!=CR_SUCCESS)
				return FALSE;
			pidx = -1;
			do{
				if(CM_Get_Device_ID(c_DevInst, c_deviceid, MAX_DEVICE_ID_LEN, 0)
						!= CR_SUCCESS)
					break;

				if(sscanf(c_deviceid, "MXCARD\\MXCARDB%02dP%03d", &bidx, &pidx)!=2){
					pidx = -1;
					break;
				}
			
				if(portidx == pidx){
					break;
				}
			}while(CM_Get_Sibling(&c_DevInst,c_DevInst,0)==CR_SUCCESS);
			if(pidx == -1){ // not found
				continue;
			}

			if((c_DeviceInfoSet=SetupDiCreateDeviceInfoList(NULL, NULL))==INVALID_HANDLE_VALUE){
				continue;
			}

			// use c_deviceid to get c_DeviceInfoSet
			c_DeviceInfoData.cbSize = sizeof(SP_DEVINFO_DATA);
			if(SetupDiOpenDeviceInfo(c_DeviceInfoSet, c_deviceid,
					NULL, 0, &c_DeviceInfoData)==FALSE){
				SetupDiDestroyDeviceInfoList(c_DeviceInfoSet);
				continue;
			}

			// call child co-installer to set friendly name 
			if(SetupDiCallClassInstaller(DIF_PROPERTYCHANGE,
				c_DeviceInfoSet, &c_DeviceInfoData)!=CR_SUCCESS){
				Mx_Debug_Out(TEXT("Save:SetupDiCallClassInstaller fail\n"));
			}

			hkey1 = SetupDiCreateDevRegKey(c_DeviceInfoSet,
					&c_DeviceInfoData,	DICS_FLAG_GLOBAL, 0,
					DIREG_DEV, NULL, NULL);
			if(hkey1==INVALID_HANDLE_VALUE){
				Mx_Debug_Out(TEXT("Save: SetupDiCreateDevRegKey fail\n"));
				SetupDiDestroyDeviceInfoList(c_DeviceInfoSet);
				continue;
			}
			SetupDiDestroyDeviceInfoList(c_DeviceInfoSet);
			wsprintf(tmp, TEXT("COM%d"), cfg->ComNo[portidx]);
			RegSetValueEx( hkey1, TEXT("PortName"), 0,
					REG_SZ, (CONST BYTE*)tmp, lstrlen(tmp)+1);

			RegSetValueEx( hkey1, TEXT("DisableFiFo"), 0,
					REG_DWORD, (CONST BYTE*)&(cfg->DisableFiFo), sizeof(DWORD));

			RegSetValueEx( hkey1, TEXT("TxMode"), 0,
					REG_DWORD, (CONST BYTE*)&(cfg->NormalTxMode), sizeof(DWORD));

				val = cfg->polling[portidx];
				RegSetValueEx( hkey1, TEXT("PollingPeriod"), 0,
					REG_DWORD, (CONST BYTE*)&val, sizeof(DWORD));

			RegCloseKey(hkey1);
			

			if(ischange && (!is_boardchange)){
				CM_Enable_DevNode(c_DevInst, 0);
			}
		}

		ComDBClose(hcomdb);
        RegCloseKey(hkey);

		return TRUE;
}


//  FUNCTION: PortConfigProc(HWND, UINT, WPARAM, LPARAM)
//
//  PURPOSE:  Processes messages for ports configuratoin property sheet.
//
//  PARAMETERS:
//    hdlg -	 window handle of the property sheet
//    wMessage - type of message
//    wparam -	 message-specific information
//    lparam -	 message-specific information
//
//  RETURN VALUE:
//    TRUE -	 message handled
//    FALSE -	 message not handled
//
//  COMMENTS:
//

static BOOL CALLBACK PortConfigProc(HWND hdlg,
				UINT uMessage,
				WPARAM wparam,
				LPARAM lparam)
{
        static  PSP_PROPSHEETPAGE_REQUEST LPq;
        static  HWND            hlistwnd;
		PPROPPAGEPARAMS pPropParams;
        int		id, cmd;
        LPNMHDR lpnmhdr;
        HWND	ctrlhwnd;
        TCHAR   typestr[TYPESTRLEN];

		pPropParams = (PPROPPAGEPARAMS)GetWindowLongPtr(hdlg, DWLP_USER);
			

        switch ( uMessage ){
        case WM_INITDIALOG:
            //
            // lParam points to one of two possible objects.  If we're a property
            // page, it points to the PropSheetPage structure.  If we're a regular
            // dialog box, it points to the PROPPAGEPARAMS structure.  We can
            // verify which because the first field of PROPPAGEPARAMS is a signature.
            //
            // In either case, once we figure out which, we store the value into
            // DWL_USER so we only have to do this once.
            //
            pPropParams = (PPROPPAGEPARAMS)lparam;
            if (pPropParams->Signature!=PPParamsSignature)
            {
                pPropParams = (PPROPPAGEPARAMS)((LPPROPSHEETPAGE)lparam)->lParam;
                if (pPropParams->Signature!=PPParamsSignature)
                {
                    return FALSE;
                }
            }
            SetWindowLongPtr(hdlg, DWLP_USER, (LPARAM)pPropParams);
            if (pPropParams->FirstTimeInstall)
            {
                PropSheet_SetWizButtons(GetParent(hdlg), PSWIZB_NEXT);
                EnableWindow(GetDlgItem(GetParent(hdlg), IDCANCEL), TRUE);
            }

            InitCommonControls();
            hlistwnd = GetDlgItem(hdlg, IDC_LIST_PORTS);
            InitPortListView (hlistwnd, GhInst, &GCtrlCfg);
            ListView_SetCurSel(hlistwnd, 0);
            Inte_GetTypeStr(GCtrlCfg.BoardType, GCtrlCfg.BusType, typestr);
			// backup ... 
            GBakCtrlCfg = GCtrlCfg;
//            wsprintf((LPSTR)titlestr,"%s Installation",(LPSTR)typestr);
//            SetWindowText(hdlg,titlestr);
            return( Port_OnInitDialog(hdlg, &GCtrlCfg) );

        case WM_NOTIFY:
            lpnmhdr = (NMHDR FAR *)lparam;
			//	process the list control message
            if(wparam==IDC_LIST_PORTS){
                if(lpnmhdr->code == NM_DBLCLK){
                    if(ListView_GetCurSel(hlistwnd)!=-1)
                        PostMessage(hdlg, WM_COMMAND, (WPARAM)IDC_PROP, 0L);
                }else{
                    ctrlhwnd = GetDlgItem(hdlg, IDC_PROP);
                    if(ListView_GetCurSel(hlistwnd)==-1)
                        EnableWindow(ctrlhwnd, FALSE);
                    else
                        EnableWindow(ctrlhwnd, TRUE);
                }
                break;
            }

			switch(lpnmhdr->code){
			case PSN_APPLY:
			case PSN_WIZNEXT:
                //GetResult(hdlg, &GCtrlCfg);
/*                if((!CheckCOM(&GCtrlCfg))){
                    SetWindowLong(hdlg,DWL_MSGRESULT,
                        PSNRET_INVALID_NOCHANGEPAGE);
                    return TRUE;
                }
*/
                if(Inte_CompConfig(&GBakCtrlCfg, &GCtrlCfg)!=0){
                    SaveSetting(pPropParams->DeviceInfoSet,
                            pPropParams->DeviceInfoData,
							&GCtrlCfg,
							&GBakCtrlCfg,
							pPropParams->FirstTimeInstall);
                }
				break;
			case PSN_KILLACTIVE:
                if((!CheckCOM(hdlg, &GCtrlCfg))){
                    SetWindowLong(hdlg,DWL_MSGRESULT,TRUE);
                    return TRUE;
                }
				break;
			default:
				return FALSE;
				break;
			}

        case WM_DRAWITEM:
            return DrawPortFunc(hlistwnd,(UINT)wparam,(LPDRAWITEMSTRUCT)lparam);

        case WM_COMMAND:
            id  = (int)GET_WM_COMMAND_ID(wparam, lparam);
            cmd = (int)GET_WM_COMMAND_CMD(wparam, lparam);
            if (id == IDC_PROP) {
                ctrlhwnd = GetDlgItem(hdlg, IDC_LIST_PORTS);
                GCurPort = ListView_GetCurSel(hlistwnd);
                DialogBox(GhInst,MAKEINTRESOURCE(IDD_ADV_SETTINGS),hdlg,AdvDlgProc);
                InvalidateRect(hlistwnd,NULL,FALSE);
            }else if (id == IDC_PORTCNT){
				if(cmd==CBN_SELCHANGE){
					// port number changed. this should be c320t
					HWND hwnd = GET_WM_COMMAND_HWND(wparam, lparam);
					int idx = ComboBox_GetCurSel(hwnd);
			        int oldports = GCtrlCfg.NPort;
					int ports = GModuleTypeTab[idx].ports;
					if ( ports == oldports ) 
						break;

					GCtrlCfg.NPort = ports;
					hwnd = GetDlgItem(hdlg, IDC_LIST_PORTS);

					// re-paint port list 
					ListView_DeleteAllItems(hwnd);
					InsertList(hlistwnd, &GCtrlCfg);
					ListView_SetCurSel(hlistwnd, 0);

					int m = GCtrlCfg.ComNo[oldports-1]+1;
					if(m!=0){
						for ( int i=oldports; i<ports; i++,m++)
							GCtrlCfg.ComNo[i] = m;
					}

					InvalidateRect(hwnd, NULL, FALSE);
				}
			}else if(id == IDOK){
				if(cmd == BN_CLICKED){
	                if(!CheckCOM(hdlg, &GCtrlCfg)){
						break;
					}
					if(Inte_CompConfig(&GBakCtrlCfg, &GCtrlCfg)!=0){
						SaveSetting(pPropParams->DeviceInfoSet,
								pPropParams->DeviceInfoData,
								&GCtrlCfg,
								&GBakCtrlCfg,
								pPropParams->FirstTimeInstall);
					}
				}
				EndDialog(hdlg, IDOK);
			}
            break;
		case WM_DESTROY:
			if(pPropParams!=NULL)
				LocalFree(pPropParams);
			SetWindowLongPtr(hdlg, DWLP_USER, 0);
			if(Gcombuf!=NULL)
				delete Gcombuf;
			break;
        default:
			break;
        }
        return(FALSE);
}




/*----------------------------------------------------------
Purpose: WM_INITDIALOG Handler
Returns: FALSE when we assign the control focus
Cond:	 --
*/
static BOOL Port_OnInitDialog(HWND hwnd, LPMoxaOneCfg Ctrlcfg)
{
        HWND    ctrlhwnd;
//        TCHAR	tmp[200];

        if(Ctrlcfg->BusType==MX_BUS_PCI){
            ctrlhwnd = GetDlgItem(hwnd, IDC_BUSDEV);
            //wsprintf(tmp, "PCI Bus Number is %d and Device Number is %d",
            //         Ctrlcfg->Pci.BusNum, Ctrlcfg->Pci.DevNum );
            //SetWindowText(ctrlhwnd,tmp);
            ShowWindow(ctrlhwnd, SW_SHOWNORMAL);
        }else{
            ctrlhwnd = GetDlgItem(hwnd, IDC_BUSDEV);
            ShowWindow(ctrlhwnd, SW_HIDE);

        }

        ctrlhwnd = GetDlgItem(hwnd, IDC_PORTCNT);
		ComboBox_ResetContent(ctrlhwnd);

		// check is C320Turbo or not
		if((WORD)(Ctrlcfg->BoardType & I_IS_EXT) == I_MOXA_EXT){
			for(int i=0;i<MODULECNT; i++){
				ComboBox_AddString(ctrlhwnd, GModuleTypeTab[i].ports_str);
			}

			ComboBox_SetCurSel(ctrlhwnd, 0);
			for(i=0; i<MODULECNT; i++){
				if(GModuleTypeTab[i].ports == GCtrlCfg.NPort){
					ComboBox_SetCurSel(ctrlhwnd, i);
				}
			}
			EnableWindow(ctrlhwnd, TRUE);
		}else{
			for(int i=0;i<PORTSCNT; i++){
				if(GPortsTab[i].ports == Ctrlcfg->NPort){
					ComboBox_AddString(ctrlhwnd, GPortsTab[i].ports_str);
					break;
				}
			}
			ComboBox_SetCurSel(ctrlhwnd, 0);
			EnableWindow(ctrlhwnd, FALSE);
		}

        return(TRUE);		// allow USER to set the initial focus
}





static BOOL CheckCOM(HWND hwnd, LPMoxaOneCfg Ctrlcfg)
{
        TCHAR	tmp[100];
        int		i,j;
        int		comnum;

        for(i=0;i<Ctrlcfg->NPort;i++){
            comnum = Ctrlcfg->ComNo[i];
            if((comnum<=0) || (comnum>MAXPORTS)){
                wsprintf(tmp,Estr_ComNum,i+1,comnum);
                MessageBox(NULL, tmp, Estr_ErrTitle, MB_OK | MB_ICONSTOP);
                return FALSE;
            }
            for(j=i+1; j<Ctrlcfg->NPort; j++)
                if(comnum == Ctrlcfg->ComNo[j]){
                    wsprintf(tmp, Estr_ComDup, i+1, j+1);
                    MessageBox(NULL, tmp, Estr_ErrTitle, MB_OK | MB_ICONSTOP);
                    return FALSE;
                }
        }


        for(i=0;i<Ctrlcfg->NPort;i++){
            comnum = Ctrlcfg->ComNo[i];
			if(Gcombuf[comnum-1]){
				if(MessageBox(hwnd, Estr_PortUsed, Estr_ErrTitle,
						MB_YESNO | MB_ICONSTOP)==IDYES)
					return TRUE;
				else
					return FALSE;
			}

		}

        return TRUE;
}


static BOOL GetAdvResult(HWND hwnd,LPMoxaOneCfg Ctrlcfg,int curport)
{
        int     comnum/*, poll_val, poll_idx*/;
        HWND    ctrlhwnd;
        int     i;
		int		val;

        // COM number
        ctrlhwnd = GetDlgItem(hwnd, IDC_COMNUM);
        comnum = ComboBox_GetCurSel(ctrlhwnd) + 1;

        ctrlhwnd = GetDlgItem(hwnd, IDC_COMAUTO);
        if( Button_GetCheck(ctrlhwnd) == BST_CHECKED ){
            for(i=curport; i<Ctrlcfg->NPort; i++)
                Ctrlcfg->ComNo[i] = comnum++;
        }else
            Ctrlcfg->ComNo[curport] = comnum;

        for(i=0; i<Ctrlcfg->NPort; i++)
            if(Ctrlcfg->ComNo[i] > MAXPORTS){
                MessageBox(hwnd,Estr_PortMax, Estr_ErrTitle, MB_OK | MB_ICONSTOP);
                return FALSE;
            }


        // get Uart fifo
        ctrlhwnd = GetDlgItem(hwnd, IDC_UARTFIFOON);
		if(Button_GetCheck(ctrlhwnd) == BST_CHECKED){
			val = ENABLE_FIFO;
		}else
			val = DISABLE_FIFO;

        ctrlhwnd = GetDlgItem(hwnd, IDC_UARTFIFOAUTO);
        if( Button_GetCheck(ctrlhwnd) == BST_CHECKED ){
            for(i=0; i<Ctrlcfg->NPort; i++)
                Ctrlcfg->DisableFiFo[i] = val;
        }else
            Ctrlcfg->DisableFiFo[curport] = val;

        // get tx mode
        ctrlhwnd = GetDlgItem(hwnd, IDC_ADVANCED);
		if(Button_GetCheck(ctrlhwnd) == BST_CHECKED){
			val = FAST_TXFIFO;
		}else
			val = NORMAL_TXFIFO;

        ctrlhwnd = GetDlgItem(hwnd, IDC_TXMODEAUTO);
        if( Button_GetCheck(ctrlhwnd) == BST_CHECKED ){
            for(i=0; i<Ctrlcfg->NPort; i++)
                Ctrlcfg->NormalTxMode[i] = val;
        }else
            Ctrlcfg->NormalTxMode[curport] = val;

		// get poll val
/*        ctrlhwnd = GetDlgItem(hwnd, IDC_POLLINT);
        poll_idx = ComboBox_GetCurSel(ctrlhwnd);

		poll_val = DEFPOLL;
		for(i=0; i<POLLCNT; i++){
			if( poll_idx == GPollTab[i].poll_idx){
				poll_val = GPollTab[i].poll_val;
				break;
			}
		}

        ctrlhwnd = GetDlgItem(hwnd, IDC_POLLAUTO);
        if( Button_GetCheck(ctrlhwnd) == BST_CHECKED ){
            for(i=0; i<Ctrlcfg->NPort; i++)
                Ctrlcfg->polling[i] = poll_val;
        }else
            Ctrlcfg->polling[curport] = poll_val;
*/

        return TRUE;
}


static BOOL CALLBACK AdvDlgProc(HWND hDlg,UINT iMsg,WPARAM wParam,LPARAM lParam)
{
        int	    id, cmd;

        switch(iMsg){
        case WM_INITDIALOG:
            Adv_InitDlg(hDlg, &GCtrlCfg);
            return FALSE;

        case WM_COMMAND:
            id  = (int)GET_WM_COMMAND_ID(wParam, lParam);
            cmd = (int)GET_WM_COMMAND_CMD(wParam, lParam);
            if(cmd==BN_CLICKED){
                if(id==ID_OK){
                    if(GetAdvResult(hDlg, &GCtrlCfg,GCurPort)){
                        EndDialog(hDlg,LOWORD(wParam));
                        return TRUE;
                    }
                }else if(id==ID_CANCEL){
                    EndDialog(hDlg,LOWORD(wParam));
                    return TRUE;
                }
                return FALSE;
            }
			break;
		case WM_CLOSE:
			EndDialog(hDlg,LOWORD(wParam));
			return TRUE;
        }
        return FALSE;
}


static BOOL Adv_InitDlg(HWND hwnd, LPMoxaOneCfg Ctrlcfg)
{
        int     i, j;
        HWND    hwndCB;
        TCHAR	tmp[20];
		int		value;

        //-- Dialog title
        wsprintf(tmp, TEXT("Port %d"),GCurPort+1);
        SetWindowText(hwnd,tmp);


        //-- Com No Box
        hwndCB = GetDlgItem(hwnd, IDC_COMNUM);
        for(i=1; i<=MAXPORTS; i++){
			for(j=0;j<Ctrlcfg->NPort;j++){
				if(i == Ctrlcfg->ComNo[j]){
					wsprintf(tmp,"COM%d (current)",i);
					break;
				}
			}
			if(j==Ctrlcfg->NPort){
				if(Gcombuf[i-1])
					wsprintf(tmp,"COM%d (in use)",i);
				else
					wsprintf(tmp,"COM%d",i);
			}
            ComboBox_AddString(hwndCB, tmp);
        }
        ComboBox_SetCurSel(hwndCB, Ctrlcfg->ComNo[GCurPort]-1);


        //-- Com No Auto Enum
        hwndCB = GetDlgItem(hwnd, IDC_COMAUTO);
        Button_SetCheck(hwndCB, BST_CHECKED);


        //-- UART FIFO Combo Box
        value = Ctrlcfg->DisableFiFo[GCurPort];
        hwndCB = GetDlgItem(hwnd, IDC_UARTFIFOON);
        Button_SetCheck(hwndCB,_chk[value]);
        hwndCB = GetDlgItem(hwnd, IDC_UARTFIFOOFF);
        Button_SetCheck(hwndCB,_chk[!value]);
        //-- RX FIFO Update all
        hwndCB = GetDlgItem(hwnd, IDC_UARTFIFOAUTO);
        Button_SetCheck(hwndCB, BST_CHECKED);


        //-- TX FIFO Combo Box
        value = Ctrlcfg->NormalTxMode[GCurPort];
        hwndCB = GetDlgItem(hwnd, IDC_ADVANCED);
        Button_SetCheck(hwndCB,_chk[value]);
        hwndCB = GetDlgItem(hwnd, IDC_NORMAL);
        Button_SetCheck(hwndCB,_chk[!value]);
        //-- TX FIFO Update all
        hwndCB = GetDlgItem(hwnd, IDC_TXMODEAUTO);
        Button_SetCheck(hwndCB, BST_CHECKED);

        //-- Polling Period Combo Box
/*        hwndCB = GetDlgItem(hwnd, IDC_POLLINT);
        for(i=0; i<POLLCNT; i++)
            ComboBox_AddString(hwndCB, GPollTab[i].poll_str);
		int	poll_idx = 0;
		for(i=0; i<POLLCNT; i++){
			if(Ctrlcfg->polling[GCurPort] == GPollTab[i].poll_val){
				poll_idx = GPollTab[i].poll_idx;
				break;
			}
		}
        ComboBox_SetCurSel(hwndCB, poll_idx);
*/
        //-- Polling Update all
/*        hwndCB = GetDlgItem(hwnd, IDC_POLLAUTO);
        Button_SetCheck(hwndCB, BST_CHECKED);
*/
        return TRUE;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\moxa\intellio\admin\intellio\mxicfg\mxlist.h ===
/************************************************************************
    mxlist.h
      -- mxlist.cpp include file

    History:  Date          Author      Comment
              8/14/00       Casper      Wrote it.

*************************************************************************/


#ifndef _MXLIST_H
#define _MXLIST_H

void InitPortListView (HWND hWndList, HINSTANCE hInst, LPMoxaOneCfg cfg);
int ListView_GetCurSel(HWND hlistwnd);
void ListView_SetCurSel(HWND hlistwnd, int idx);
BOOL DrawPortFunc(HWND hwnd,UINT idctl,LPDRAWITEMSTRUCT lpdis);
BOOL InsertList(HWND hWndList, LPMoxaOneCfg cfg);


#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\moxa\intellio\admin\intellio\mxicfg\mxlist.cpp ===
/************************************************************************
    mxlist.cpp
      -- configuration dialog list control function

    History:  Date          Author      Comment
              8/14/00       Casper      Wrote it.

*************************************************************************/

#include <windows.h>
#include <windowsx.h>
#include <commctrl.h>
#include "moxacfg.h"
#include "strdef.h"
#include "resource.h"

extern struct MoxaOneCfg GCtrlCfg;
extern HWND GListWnd;

static void DrawItemColumn(HDC hdc, LPSTR lpsz, LPRECT prcClip);
static BOOL CalcStringEllipsis(HDC hdc, LPSTR lpszString, int cchMax, UINT uColWidth);
static void DrawPortListViewItem(HWND hwnd,LPDRAWITEMSTRUCT lpDrawItem);
BOOL InsertList(HWND hWndList, struct MoxaOneCfg *Isacfg);


void InitPortListView (HWND hWndList, HINSTANCE hInst, LPMoxaOneCfg cfg)
{
        LV_COLUMN lvC;  // list view column structure

       // Ensure that the common control DLL is loaded.
        // Create the list view window that starts out in details view
        // and supports label editing.
        lvC.mask = LVCF_FMT |  LVCF_TEXT ;
        lvC.fmt = LVCFMT_LEFT;  // left-align column

        // Add the columns.
        //--          "C168 PCI Series Port 255
        lvC.pszText = "Port";
        if (ListView_InsertColumn(hWndList, 0, (LV_COLUMN FAR*)&lvC) == -1)
            return ;

        lvC.pszText = "COM No. ";
        if (ListView_InsertColumn(hWndList, 1, (LV_COLUMN FAR*)&lvC) == -1)
            return ;

        lvC.pszText = "UART FIFO";
        if (ListView_InsertColumn(hWndList, 2, (LV_COLUMN FAR*)&lvC) == -1)
            return ;

        lvC.pszText = "Transmission Mode";
        if (ListView_InsertColumn(hWndList, 3, (LV_COLUMN FAR*)&lvC) == -1)
            return ;

        ListView_SetColumnWidth(hWndList,0,LVSCW_AUTOSIZE_USEHEADER);
        ListView_SetColumnWidth(hWndList,1,LVSCW_AUTOSIZE_USEHEADER);
        ListView_SetColumnWidth(hWndList,2,LVSCW_AUTOSIZE_USEHEADER);
        ListView_SetColumnWidth(hWndList,3,LVSCW_AUTOSIZE_USEHEADER);

        // Finally, add the actual items to the control.
        // Fill out the LV_ITEM structure for each of the items to add to the list.
        // The mask specifies the the pszText, iImage, lParam and state
        // members of the LV_ITEM structure are valid.
        if(!InsertList(hWndList, cfg))
            return ;

}


BOOL InsertList(HWND hWndList, LPMoxaOneCfg cfg)
{
        LV_ITEM   lvI;  // list view item structure
        int       index;

        lvI.mask = LVIF_PARAM ;
        lvI.state = 0;
        lvI.stateMask = 0;

        for (index = 0; index < cfg->NPort; index++){
            lvI.iItem = index;
            lvI.iSubItem = 0;
            lvI.pszText = NULL;
            lvI.cchTextMax = 20;
            lvI.lParam = NULL;
            if (ListView_InsertItem(hWndList, (LV_ITEM FAR*)&lvI) == -1)
                return FALSE;
        }

        return TRUE;

}


//
//  FUNCTION:   DrawItemColumn(HDC, LPTSTR, LPRECT)
//
//  PURPOSE:    Draws the text for one of the columns in the list view.
//
//  PARAMETERS:
//      hdc     - Handle of the DC to draw the text into.
//      lpsz    - String to draw.
//      prcClip - Rectangle to clip the string to.
//

static void DrawItemColumn(HDC hdc, LPSTR lpsz, LPRECT prcClip)
{
    char szString[256];

    // Check to see if the string fits in the clip rect.  If not, truncate
    // the string and add "...".
    lstrcpyn(szString, lpsz, 256);
    CalcStringEllipsis(hdc, szString, 256, prcClip->right - prcClip->left);

    // print the text
    ExtTextOut(hdc, prcClip->left + 2, prcClip->top + 1, ETO_CLIPPED | ETO_OPAQUE,
               prcClip, szString, lstrlen(szString), NULL);

}

//
//  FUNCTION:   CalcStringEllipsis(HDC, LPTSTR, int, UINT)
//
//  PURPOSE:    Determines whether the specified string is too wide to fit in
//              an allotted space, and if not truncates the string and adds some
//              points of ellipsis to the end of the string.
//
//  PARAMETERS:
//      hdc        - Handle of the DC the string will be drawn on.
//      lpszString - Pointer to the string to verify
//      cchMax     - Maximum size of the lpszString buffer.
//      uColWidth  - Width of the space in pixels to fit the string into.
//
//  RETURN VALUE:
//      Returns TRUE if the string needed to be truncated, or FALSE if it fit
//      into uColWidth.
//

static BOOL CalcStringEllipsis(HDC hdc, LPSTR lpszString, int cchMax, UINT uColWidth)
{
        const  char szEllipsis[] = "...";
        SIZE   sizeString;
        SIZE   sizeEllipsis;
        int    cbString;
        char   lpszTemp[100];
        BOOL   fSuccess = FALSE;
        static BOOL (WINAPI *pGetTextExtentPoint)(HDC, LPCSTR, int, SIZE FAR*);

        // We make heavy use of the GetTextExtentPoint32() API in this function,
        // but GetTextExtentPoint32() isn't implemented in Win32s.  Here we check
        // our OS type and if we're on Win32s we degrade and use
        // GetTextExtentPoint().

        pGetTextExtentPoint = &GetTextExtentPoint;

        // Adjust the column width to take into account the edges
        uColWidth -= 4;

        lstrcpyn(lpszTemp, lpszString, 100);

        // Get the width of the string in pixels
        cbString = lstrlen(lpszTemp);
        if(!(pGetTextExtentPoint)(hdc, lpszTemp, cbString, &sizeString))
            return fSuccess;

        // If the width of the string is greater than the column width shave
        // the string and add the ellipsis
        if ((ULONG)sizeString.cx > uColWidth){
            if(!(pGetTextExtentPoint)(hdc, szEllipsis, lstrlen(szEllipsis),
                                       &sizeEllipsis))
                return fSuccess;

            while (cbString > 0){
                lpszTemp[--cbString] = 0;
                if(!(pGetTextExtentPoint)(hdc, lpszTemp, cbString, &sizeString))
                    return fSuccess;

                if ((ULONG)(sizeString.cx + sizeEllipsis.cx) <= uColWidth){
                    // The string with the ellipsis finally fits, now make sure
                    // there is enough room in the string for the ellipsis
                    if (cchMax >= (cbString + lstrlen(szEllipsis)))
                    {
                        // Concatenate the two strings and break out of the loop
                        lstrcat(lpszTemp, szEllipsis);
                        lstrcpy(lpszString, lpszTemp);
                        fSuccess = TRUE;
                        return fSuccess;
                    }
                }
            }
            // No need to do anything, everything fits great.
            fSuccess = TRUE;
        }

        return (fSuccess);
}



BOOL DrawPortFunc(HWND hwnd,UINT idctl,LPDRAWITEMSTRUCT lpdis)
{

    // Make sure the control is the listview control
    if (lpdis->CtlType != ODT_LISTVIEW)
        return FALSE;

    if (idctl != IDC_LIST_PORTS)
        return FALSE;

    // There are three types of drawing that can be requested.  First, to draw
    // the entire contents of the item specified.  Second, to update the focus
    // rect as the focus changed, and third to update the selection as the
    // selection changes.
    //
    // NOTE: An artifact of the implementation of the listview control is that
    // it doesn't send the ODA_FOCUS or ODA_SELECT action items.  All updates
    // sent as ODA_DRAWENTIRE and the lpDrawItem->itemState flags contain the
    // selected and focused information.

    switch (lpdis->itemAction)
    {
        // Just in case the implementation of the control changes in the
        // future, let's handle the other itemAction types too.
        case ODA_DRAWENTIRE:
        case ODA_FOCUS:
        case ODA_SELECT:
            DrawPortListViewItem(hwnd,(LPDRAWITEMSTRUCT)lpdis);
            break;
    }
    return TRUE;
}



static char*   _onoffstr[] = {"Enable","Disable"};
static char*   _modestr[] = {"Hi-Performance","Classical"};

static void DrawPortListViewItem(HWND hwnd,LPDRAWITEMSTRUCT lpDrawItem)
{
        RECT        rcClip = lpDrawItem->rcItem;
        int         iColumn = 1;
        UINT        uiFlags = ILD_TRANSPARENT;
        LV_COLUMN   lvc;
        int        width;
        char        temp[100];
//        char        typestr[TYPESTRLEN];

        // Check to see if this item is selected
        if (lpDrawItem->itemState & ODS_SELECTED){
            // Set the text background and foreground colors
            SetTextColor(lpDrawItem->hDC, GetSysColor(COLOR_HIGHLIGHTTEXT));
            SetBkColor(lpDrawItem->hDC, GetSysColor(COLOR_HIGHLIGHT));
        } else{
            // Set the text background and foreground colors to the standard
            // window colors
            SetTextColor(lpDrawItem->hDC, GetSysColor(COLOR_WINDOWTEXT));
            SetBkColor(lpDrawItem->hDC, GetSysColor(COLOR_WINDOW));
        }

        //-- Port no
        lvc.mask = LVCF_WIDTH ;
        ListView_GetColumn(hwnd,0,(LV_COLUMN FAR*)&lvc);
        width = lvc.cx;
        rcClip.right = rcClip.left+width;
        wsprintf((LPSTR)temp, (LPSTR)"%d", lpDrawItem->itemID+1);
        DrawItemColumn(lpDrawItem->hDC,temp,&rcClip);

        rcClip.left+=width;

        //-- Com No
        lvc.mask = LVCF_WIDTH ;
        ListView_GetColumn(hwnd,1,(LV_COLUMN FAR*)&lvc);
        width = lvc.cx;
        rcClip.right = rcClip.left+width;
        wsprintf((LPSTR)temp,(LPSTR)"COM %d", GCtrlCfg.ComNo[lpDrawItem->itemID]);
        DrawItemColumn(lpDrawItem->hDC, temp, &rcClip);

        rcClip.left+=width;

        //-- UART FIFO

        lvc.mask = LVCF_WIDTH ;
        ListView_GetColumn(hwnd,2,(LV_COLUMN FAR*)&lvc);
        width = lvc.cx;
        rcClip.right = rcClip.left+width;
        //wsprintf((LPSTR)temp,(LPSTR)"%s",_onoffstr[GCtrlCfg.DisableFiFo[lpDrawItem->itemID]]);
        strcpy(temp, _onoffstr[GCtrlCfg.DisableFiFo[lpDrawItem->itemID]]);
        DrawItemColumn(lpDrawItem->hDC, temp, &rcClip);

        rcClip.left+=width;

        //-- Tx MODE

        lvc.mask = LVCF_WIDTH ;
        ListView_GetColumn(hwnd,3,(LV_COLUMN FAR*)&lvc);
        width = lvc.cx;
        rcClip.right = rcClip.left+width-2;
        //wsprintf((LPSTR)temp,(LPSTR)"%s",_modestr[GCtrlCfg.NormalTxMode[lpDrawItem->itemID]]);
        strcpy(temp, _modestr[GCtrlCfg.NormalTxMode[lpDrawItem->itemID]]);
        DrawItemColumn(lpDrawItem->hDC, temp, &rcClip);


        // If we changed the colors for the selected item, undo it
        if (lpDrawItem->itemState & ODS_SELECTED){
            // Set the text background and foreground colors
            SetTextColor(lpDrawItem->hDC, GetSysColor(COLOR_WINDOWTEXT));
            SetBkColor(lpDrawItem->hDC, GetSysColor(COLOR_WINDOW));
        }

        // If the item is focused, now draw a focus rect around the entire row
        if (lpDrawItem->itemState & ODS_FOCUS){
            // Draw the focus rect
            rcClip.left = lpDrawItem->rcItem.left;
            rcClip.right -=1 ;
            DrawFocusRect(lpDrawItem->hDC, &rcClip);
        }

        return;
}


int ListView_GetCurSel(HWND hlistwnd)
{
        return ListView_GetNextItem(hlistwnd,-1, LVNI_ALL | LVNI_SELECTED);
}


void ListView_SetCurSel(HWND hlistwnd, int idx)
{
        ListView_SetItemState(hlistwnd, idx, LVIS_FOCUSED | LVIS_SELECTED, 0x000F);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\moxa\intellio\admin\intellio\mxicfg\stdafx.cpp ===
#include "stdafx.h"
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\moxa\intellio\admin\intellio\mxicfg\oem1.cpp ===
/************************************************************************
    oem1.cpp

    History:  Date          Author      Comment
              8/14/00       Casper      Wrote it.

*************************************************************************/

#include <windows.h>
#include <windowsx.h>
#include "oem.h"


LPSTR Estr_ErrTitle = "MOXA Intellio Family Board Configuration Error";
LPSTR Estr_WarnTitle = "MOXA Intellio Family Board Warning Message";
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\moxa\intellio\admin\intellio\mxport\stdafx.cpp ===
#include "stdafx.h"
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\moxa\intellio\admin\intellio\mxicfg\stdafx.h ===
#include <windows.h>
#include <windowsx.h>
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\moxa\intellio\admin\intellio\mxport\resource.h ===
//{{NO_DEPENDENCIES}}
// Microsoft Developer Studio generated include file.
// Used by mxport.rc
//

#define IDS_PARITY                      11
#define IDS_BITS                        12
#define IDS_FLOWCONTROL                 13
#define DLG_PP_PORTSETTINGS             15
#define PP_PORT_BAUDRATE                841
#define PP_PORT_DATABITS                842
#define PP_PORT_PARITY                  843
#define PP_PORT_STOPBITS                844
#define PP_PORT_FLOWCTL                 845

// Next default values for new objects
// 
#ifdef APSTUDIO_INVOKED
#ifndef APSTUDIO_READONLY_SYMBOLS
#define _APS_NEXT_RESOURCE_VALUE        101
#define _APS_NEXT_COMMAND_VALUE         40001
#define _APS_NEXT_CONTROL_VALUE         1000
#define _APS_NEXT_SYMED_VALUE           101
#endif
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\moxa\intellio\admin\intellio\mxport\stdafx.h ===
#include <windows.h>
#include <setupapi.h>
#include <cfgmgr32.h>
#include <stdio.h>
#include <msports.h>
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\moxa\intellio\admin\intellio\mxport\pp.h ===
#ifndef PP_H
#define PP_H

#define SERIAL_ADVANCED_SETTINGS
#include "msports.h"

#ifdef USE_P_TRACE_ERR
#define P_TRACE_ERR(_x) MessageBox( GetFocus(), TEXT(_x), TEXT("ports traceerr"), MB_OK | MB_ICONINFORMATION );
#define W_TRACE_ERR(_x) MessageBox( GetFocus(), _x, TEXT("ports traceerr"), MB_OK | MB_ICONINFORMATION );
#else
#define P_TRACE_ERR(_x)
#define W_TRACE_ERR(_x)
#endif

#define CharSizeOf(x)   (sizeof(x) / sizeof(*x))

#define DO_COM_PORT_RENAMES

#define RX_MIN 1
#define RX_MAX 14
#define TX_MIN 1
#define TX_MAX 16

#define DEF_BAUD    3       //  1200
#define DEF_WORD    3       //  8 bits
#define DEF_PARITY  2       //  None
#define DEF_STOP    0       //  1
#define DEF_PORT    0       //  Null Port
#define DEF_SHAKE   2       //  None
#define PAR_EVEN    0
#define PAR_ODD     1
#define PAR_NONE    2
#define PAR_MARK    3
#define PAR_SPACE   4
#define STOP_1      0
#define STOP_15     1
#define STOP_2      2
#define FLOW_XON    0
#define FLOW_HARD   1
#define FLOW_NONE   2


TCHAR m_szDevMgrHelp[];

#if defined(_X86_)
//
// For NEC PC98. Following definition comes from user\inc\kbd.h.
// The value must be the same as value in kbd.h.
//
#define NLSKBD_OEM_NEC   0x0D
#endif // FE_SB && _X86_

//
// Structures
//
typedef struct
{
   DWORD BaudRate;       // actual baud rate
   DWORD Parity;         // index into dlg selection
   DWORD DataBits;       // index into dlg selection
   DWORD StopBits;       // index into dlg selection
   DWORD FlowControl;    // index into dlg selection
   TCHAR szComName[20];  // example: "COM5"  (no colon)
} PP_PORTSETTINGS, *PPP_PORTSETTINGS;


typedef struct _PORT_PARAMS
{
   PP_PORTSETTINGS              PortSettings;
   HDEVINFO                     DeviceInfoSet;
   PSP_DEVINFO_DATA             DeviceInfoData;
   BOOL                         ChangesEnabled;
} PORT_PARAMS, *PPORT_PARAMS;



///////////////////////////////////////////////////////////////////////////////////
// Port Settings Property Page Prototypes
///////////////////////////////////////////////////////////////////////////////////

void
InitOurPropParams(
    IN OUT PPORT_PARAMS     Params,
    IN HDEVINFO             DeviceInfoSet,
    IN PSP_DEVINFO_DATA     DeviceInfoData,
    IN PTCHAR               StrSettings
    );

HPROPSHEETPAGE
InitSettingsPage(
    PROPSHEETPAGE *      Psp,
    OUT PPORT_PARAMS    Params
    );

UINT CALLBACK
PortSettingsDlgCallback(
    HWND hwnd,
    UINT uMsg,
    LPPROPSHEETPAGE ppsp
    );

INT_PTR APIENTRY
PortSettingsDlgProc(
    IN HWND   hDlg,
    IN UINT   uMessage,
    IN WPARAM wParam,
    IN LPARAM lParam
    );

void
SavePortSettings(
    IN HWND             DialogHwnd,
    IN PTCHAR           ComName,
    IN PPORT_PARAMS     Params
    );

void
GetPortSettings(
    IN HWND             DialogHwnd,
    IN PTCHAR           ComName,
    IN PPORT_PARAMS     Params
    );

VOID
SetCBFromRes(
    HWND  HwndCB, 
    DWORD ResId, 
    DWORD Default,
    BOOL  CheckDecimal);

BOOL
FillCommDlg(
    IN HWND DialogHwnd
    );

ULONG
FillPortSettingsDlg(
    IN HWND             DialogHwnd,
    IN PPORT_PARAMS     Params
    );

ULONG
SavePortSettingsDlg(
    IN HWND             DialogHwnd,
    IN PPORT_PARAMS     Params
    );



#endif // PP_H
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\moxa\intellio\admin\intereg\intecfg.cpp ===
/************************************************************************
    intecfg.cpp
      -- Intellio board configuration function

    History:  Date          Author      Comment
              8/14/00       Casper      Wrote it.

*************************************************************************/


#include "stdafx.h"

#include <setupapi.h>
#include <cfgmgr32.h>
#include "moxacfg.h"
#include "intetype.h"

/*
	compare two Intellio MoxaOneCfg struct.
	return 0: equal,
	return <> 0 : not equal
*/
int Inte_CompConfig(LPMoxaOneCfg cfg1, LPMoxaOneCfg cfg2)
{
        int	j, m;

        if ((cfg1->BoardType != cfg2->BoardType) || 
            (cfg1->BusType != cfg2->BusType))
            return(1);
        if(cfg1->BusType == MX_BUS_PCI){
            if((cfg1->Pci.BusNum != cfg2->Pci.BusNum) || 
               (cfg1->Pci.DevNum != cfg2->Pci.DevNum))
            return 1;
        }
        if ( cfg1->Irq != cfg2->Irq )
            return(11);
        if ( cfg1->MemBank != cfg2->MemBank )
            return(12);

		if (cfg1->NPort != cfg2->NPort)
			return 20;

        m = cfg1->NPort;
        for ( j=0; j<m; j++ ) {
            if ( cfg1->ComNo[j] != cfg2->ComNo[j] )
                return(21);
        }
        for ( j=0; j<m; j++ ) {
            if ( cfg1->DisableFiFo[j] != cfg2->DisableFiFo[j] )
                return(22);
        }
        for ( j=0; j<m; j++ ) {
            if ( cfg1->NormalTxMode[j] != cfg2->NormalTxMode[j] )
                return(23);
        }
        return(0);
}

/*
	Get Intellio board FIFO setting & Transmission mode	
  */

BOOL Inte_GetFifo(HDEVINFO DeviceInfoSet, 
				PSP_DEVINFO_DATA DeviceInfoData,
				LPMoxaOneCfg cfg)
{
	HKEY	hkey, hkey2;
	char	tmp[MAX_PATH];
	DWORD	type;
	DWORD	len;
        hkey = SetupDiOpenDevRegKey(
                DeviceInfoSet, DeviceInfoData,
                DICS_FLAG_GLOBAL, 0, DIREG_DRV, KEY_READ);

        if(hkey!=INVALID_HANDLE_VALUE){
			wsprintf( tmp, TEXT("Parameters") );
			if(RegOpenKeyEx( hkey, tmp, 0, KEY_READ, &hkey2)
					!= ERROR_SUCCESS){
				RegCloseKey(hkey);
				return TRUE;
			}

			type = REG_DWORD;
			len = MAX_PATH;
			RegQueryValueEx(  hkey2,
				TEXT("NumPorts"), 0, &type, (LPBYTE)&(cfg->NPort), &len);
			RegCloseKey(hkey2);

			for(int i=0; i<cfg->NPort; i++){
				wsprintf( tmp, TEXT("Parameters\\port%03d"), i+1 );

				if(RegOpenKeyEx( hkey, tmp, 0, KEY_READ, &hkey2)
					!= ERROR_SUCCESS)
					continue;
  
				type = REG_DWORD;
				len = sizeof(DWORD);
				RegQueryValueEx(  hkey2,
					TEXT("DisableFiFo"), 0, &type, (LPBYTE)&(cfg->DisableFiFo[i]), &len);

				type = REG_DWORD;
				len = sizeof(DWORD);
				RegQueryValueEx(  hkey2,
					TEXT("TxMode"), 0, &type, (LPBYTE)&(cfg->NormalTxMode[i]), &len);

				type = REG_DWORD;
				len = sizeof(DWORD);
				RegQueryValueEx(  hkey2,
					TEXT("PollingPeriod"), 0, &type, (LPBYTE)&(cfg->polling[i]), &len);
				RegCloseKey(hkey2);
			}
        }

        RegCloseKey(hkey);

        return TRUE;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\moxa\intellio\admin\registry\stdafx.cpp ===
#include "stdafx.h"
=== C:/Users/treeman/Desktop/windows nt source code\Source\Win2K3\NT\drivers\serial\mps\moxa\intellio\admin\intellio\mxport\pp.cpp ===
/*----------------------------------------------------------------------
 file: pp.c - property page

----------------------------------------------------------------------*/

#include <windows.h>
#include <tchar.h>
#include <cfgmgr32.h>
#include <setupapi.h>
#include <regstr.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <malloc.h>
#include <msports.h>
#include "resource.h"
#include "pp.h"

extern HINSTANCE GhInst;

TCHAR m_szPortName[]            = REGSTR_VAL_PORTNAME;
TCHAR  m_szColon[]      = TEXT( ":" );
TCHAR  m_szComma[]      = TEXT( "," );
TCHAR  m_szPorts[]      = TEXT( "Ports" );
TCHAR g_szNull[]  = TEXT("");       //  Null string

int m_nBaudRates[] = {50, 75, 110, 134, 150, 300, 600, 1200, 1800, 2400,
                       4800, 7200, 9600, 19200, 38400, 57600,
                       115200, 230400, 460800, 921600, 0 };

TCHAR m_sz9600[] = TEXT( "9600" );

TCHAR m_szDefParams[] = TEXT( "9600,n,8,1" );

short m_nDataBits[] = { 5, 6, 7, 8, 0};

TCHAR *m_pszParitySuf[] = { TEXT( ",e" ),
                            TEXT( ",o" ),
                            TEXT( ",n" ),
                            TEXT( ",m" ),
                            TEXT( ",s" ) };

TCHAR *m_pszLenSuf[] = { TEXT( ",5" ),
                         TEXT( ",6" ),
                         TEXT( ",7" ),
                         TEXT( ",8" ) };

TCHAR *m_pszStopSuf[] = { TEXT( ",1" ),
                          TEXT( ",1.5" ),
                          TEXT( ",2 " ) };

TCHAR *m_pszFlowSuf[] = { TEXT( ",x" ),
                          TEXT( ",p" ),
                          TEXT( " " ) };

LPTSTR	MyItoa(INT value, LPTSTR string, INT radix);
void	StripBlanks(LPTSTR pszString);
LPTSTR	strscan(LPTSTR pszString, LPTSTR pszTarget);
int		myatoi(LPTSTR pszInt);
void	SendWinIniChange(LPTSTR lpSection);


void InitPortParams(
    IN OUT PPORT_PARAMS      Params,
    IN HDEVINFO              DeviceInfoSet,
    IN PSP_DEVINFO_DATA      DeviceInfoData
    )
{
    SP_DEVINFO_LIST_DETAIL_DATA detailData;

    ZeroMemory(Params, sizeof(PORT_PARAMS));

    Params->DeviceInfoSet = DeviceInfoSet;
    Params->DeviceInfoData = DeviceInfoData;
    Params->ChangesEnabled = TRUE;

    //
    // See if we are being invoked locally or over the network.  If over the net,
    // then disable all possible changes.
    //
    detailData.cbSize = sizeof(SP_DEVINFO_LIST_DETAIL_DATA);
    if (SetupDiGetDeviceInfoListDetail(DeviceInfoSet, &detailData) &&
        detailData.RemoteMachineHandle != NULL) {
        Params->ChangesEnabled = FALSE;
    }
}

HPROPSHEETPAGE InitSettingsPage(PROPSHEETPAGE *     psp,
                                OUT PPORT_PARAMS    Params)
{
    //
    // Add the Port Settings property page
    //
    psp->dwSize      = sizeof(PROPSHEETPAGE);
    psp->dwFlags     = PSP_USECALLBACK; // | PSP_HASHELP;
    psp->hInstance   = GhInst;
    psp->pszTemplate = MAKEINTRESOURCE(DLG_PP_PORTSETTINGS);

    //
    // following points to the dlg window proc
    //
    psp->pfnDlgProc = PortSettingsDlgProc;
    psp->lParam     = (LPARAM) Params;

    //
    // following points to some control callback of the dlg window proc
    //
    psp->pfnCallback = PortSettingsDlgCallback;

    //
    // allocate our "Ports Setting" sheet
    //
    return CreatePropertySheetPage(psp);
}




/*++

Routine Description: SerialPortPropPageProvider

    Entry-point for adding additional device manager property
    sheet pages.  Registry specifies this routine under
    Control\Class\PortNode::EnumPropPage32="msports.dll,thisproc"
    entry.  This entry-point gets called only when the Device
  