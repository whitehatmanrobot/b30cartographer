      db      067,085,069,065,065,065,065,067
	       db      069,069,069,073,073,073,065,065
	       db      069,146,146,079,079,079,085,085
	       db      089,079,085,079,156,079,158,159
	       db      065,073,079,085,165,165,166,167
	       db      168,169,170,171,172,173,174,175
	       db      176,177,178,179,180,065,065,065
	       db      184,185,186,187,188,189,190,191
	       db      192,193,194,195,196,197,065,065
	       db      200,201,202,203,204,205,206,207
	       db      209,209,069,069,069,073,073,073
	       db      073,217,218,219,220,221,073,223
	       db      079,225,079,079,079,079,230,232
	       db      232,085,085,085,089,089,238,239
	       db      240,241,242,243,244,245,246,247
	       db      248,249,250,251,252,253,254,255
;
;***CNS PTM2390 table omitted
;		 db	 128,154,069,065,142,065,143,128    ;AN000;
;		 db	 069,069,069,073,073,073,142,143    ;AN000;
;		 db	 144,146,146,079,153,079,085,085    ;AN000;
;		 db	 089,153,154,155,156,157,158,159    ;AN000;
;		 db	 065,073,079,085,165,165,166,167    ;AN000;
;		 db	 168,169,170,171,172,173,174,175    ;AN000;
;		 db	 176,177,178,179,180,181,182,183    ;AN000;
;		 db	 184,185,186,187,188,189,190,191    ;AN000;
;		 db	 192,193,194,195,196,197,198,199    ;AN000;
;		 db	 200,201,202,203,204,205,206,207    ;AN000;
;		 db	 208,209,210,211,212,213,214,215    ;AN000;
;		 db	 216,217,218,219,220,221,222,223    ;AN000;
;		 db	 224,225,226,227,228,229,230,231    ;AN000;
;		 db	 232,233,234,235,236,237,238,239    ;AN000;
;		 db	 240,241,242,243,244,245,246,247    ;AN000;
;		 db	 248,249,250,251,252,253,254,255    ;AN000;
;***CNS PTM2390 table omitted
;
;;la850_ucase	  label   word	- LA wants same as spain
;
;; sp850_ucase	   label   word - changed for 4.0
;		ctable	<,'UCASE  ',128>
;		db	128,085,069,065,065,065,065,128
;		db	069,069,069,073,073,073,065,065
;		db	069,146,146,079,079,079,085,085
;		db	089,079,085,079,156,079,158,159
;		db	065,073,079,085,165,165,166,167
;		db	168,169,170,171,172,173,174,175
;		db	176,177,178,179,180,065,065,065
;		db	184,185,186,187,188,189,190,191
;		db	192,193,194,195,196,197,065,065
;		db	200,201,202,203,204,205,206,207
;		db	209,209,069,069,069,073,073,073
;		db	073,217,218,219,220,221,073,223
;		db	079,225,079,079,079,079,230,232
;		db	232,085,085,085,089,089,238,239
;		db	240,241,242,243,244,245,246,247
;		db	248,249,250,251,252,253,254,255
;
gr850_ucase	   label   word
		ctable	<,'UCASE  ',128>
		db	067,154,069,065,142,065,065,067
		db	069,069,069,073,073,073,142,065
		db	069,146,146,079,153,079,085,085
		db	089,153,154,079,156,079,158,159
		db	065,073,079,085,165,165,166,167
		db	168,169,170,171,172,173,174,175
		db	176,177,178,179,180,065,065,065
		db	184,185,186,187,188,189,190,191
		db	192,193,194,195,196,197,065,065
		db	200,201,202,203,204,205,206,207
		db	209,209,069,069,069,073,073,073
		db	073,217,218,219,220,221,073,223
		db	079,225,079,079,079,079,230,232
		db	232,085,085,085,089,089,238,239
		db	240,241,242,243,244,245,246,247
		db	248,249,250,251,252,253,254,255
page
;
;	LA case mapping for 850, new for DOS 4.0 to be same as Spain
;
la850_ucase	label	word
;
;	Spain (sp) case mapping for 850, new for DOS 4.0
;
sp850_ucase	label	word
;
;	Belgium (Be) case mapping for 850
;
be850_ucase	   label   word
;
;	Finland (Fi) case mapping for 850
;
fi850_ucase	   label   word
;
;	Sweden (Sv) case mapping for 850
;
sv850_ucase	   label   word
;
;	Denmark (Da) case mapping for 850
;
dk850_ucase	   label   word
;
;	Norway (No) case mapping for 850
;
no850_ucase	   label   word

		ctable	<,'UCASE  ',128>
		db	128,154,144,182,142,183,143,128
		db	210,211,212,216,215,222,142,143
		db	144,146,146,226,153,227,234,235
		db	089,153,154,157,156,157,158,159
		db	181,214,224,233,165,165,166,167
		db	168,169,170,171,172,173,174,175
		db	176,177,178,179,180,181,182,183
		db	184,185,186,187,188,189,190,191
		db	192,193,194,195,196,197,199,199
		db	200,201,202,203,204,205,206,207
		db	209,209,210,211,212,073,214,215
		db	216,217,218,219,220,221,222,223
		db	224,225,226,227,229,229,230,232
		db	232,233,234,235,237,237,238,239
		db	240,241,242,243,244,245,246,247
		db	248,249,250,251,252,253,254,255
page
;	Switzerland (Sw) Case mapping (850)
;
sw850_ucase	  label   word
		ctable	<,'UCASE  ',128>
		db	128,154,144,182,142,183,143,128
		db	210,211,212,216,215,222,142,143
		db	144,146,146,226,153,227,234,235
		db	089,153,154,157,156,157,158,159
		db	181,214,224,233,165,165,166,167 ;DCR059 CNS ** ;AN000;
		db	168,169,170,171,172,173,174,175
		db	176,177,178,179,180,181,182,183
		db	184,185,186,187,188,189,190,191
		db	192,193,194,195,196,197,199,199
		db	200,201,202,203,204,205,206,207
		db	209,209,210,211,212,073,214,215
		db	216,217,218,219,220,221,222,223
		db	224,225,226,227,229,229,230,232
		db	232,233,234,235,237,237,238,239
		db	240,241,242,243,244,245,246,247
		db	248,249,250,251,252,253,254,255
;
;	Netherlands (Nl) case mapping 850
;
nl850_ucase	   label   word
		ctable	<,'UCASE  ',128>
		db	128,085,069,065,065,065,143,128
		db	069,069,069,073,073,073,065,143
		db	069,146,146,079,079,079,085,085
		db	152,079,085,079,156,079,158,159
		db	065,073,079,085,165,165,166,167
		db	168,169,170,171,172,173,174,175
		db	176,177,178,179,180,065,065,065
		db	184,185,186,187,188,189,190,191
		db	192,193,194,195,196,197,065,065
		db	200,201,202,203,204,205,206,207
		db	209,209,069,069,069,073,073,073
		db	073,217,218,219,220,221,073,223
		db	079,225,079,079,079,079,230,232
		db	232,085,085,085,089,089,238,239
		db	240,241,242,243,244,245,246,247
		db	248,249,250,251,252,253,254,255
page
;
;	Japan case mapping 932
;
jp932_ucase	   label   word
;
ko934_ucase	   label   word
;
pr936_ucase	   label   word
;
ta938_ucase	   label   word
		ctable	<,'UCASE  ',128>
		db	128,129,130,131,132,133,134,135
		db	136,137,138,139,140,141,142,143
		db	144,145,146,147,148,149,150,151
		db	152,153,154,155,156,157,158,159
		db	160,161,162,163,164,165,166,167
		db	168,169,170,171,172,173,174,175
		db	176,177,178,179,180,181,182,183
		db	184,185,186,187,188,189,190,191
		db	192,193,194,195,196,197,198,199
		db	200,201,202,203,204,205,206,207
		db	208,209,210,211,212,213,214,215
		db	216,217,218,219,220,221,222,223
		db	224,225,226,227,228,229,230,231
		db	232,233,234,235,236,237,238,239
		db	240,241,242,243,244,245,246,247
		db	248,249,250,251,252,253,254,255
page
; ----------------------------------------------------------------------------

;	cs3 -- begin additions for new languages

page
;
;       Iceland (IC) case mapping for 861
;
ic_ucase        label   word
		ctable  <,'UCASE  ',128>
		db      128,154,144,065,142,065,143,128
		db      069,069,069,139,139,141,142,143
		db      144,146,146,079,153,141,085,151
		db      151,153,154,157,156,157,158,159
		db      164,165,166,167,164,165,166,167
		db      168,169,170,171,172,173,174,175
		db      176,177,178,179,180,181,182,183
		db      184,185,186,187,188,189,190,191
		db      192,193,194,195,196,197,198,199
		db      200,201,202,203,204,205,206,207
		db      208,209,210,211,212,213,214,215
		db      216,217,218,219,220,221,222,223
		db      224,225,226,227,228,229,230,231
		db      232,233,234,235,236,237,238,239
		db      240,241,242,243,244,245,246,247
		db      248,249,250,251,252,253,254,255
		page
;
;
tr850_ucase        label   word
ic850_ucase        label   word
yu850_ucase        label   word
cs850_ucase        label   word
sl850_ucase        label   word
hu850_ucase        label   word
pl850_ucase        label   word
		ctable  <,'UCASE  ',128>
		db      128,154,144,182,142,183,143,128
		db      210,211,212,216,215,222,142,143
		db      144,146,146,226,153,227,234,235
		db      152,153,154,157,156,157,158,159
		db      181,214,224,233,165,165,166,167
		db      168,169,170,171,172,173,174,175
		db      176,177,178,179,180,181,182,183
		db      184,185,186,187,188,189,190,191
		db      192,193,194,195,196,197,199,199
		db      200,201,202,203,204,205,206,207
		db      209,209,210,211,212,213,214,215	
		db      216,217,218,219,220,221,222,223
		db      224,225,226,227,229,229,230,232
		db      232,233,234,235,237,237,238,239
		db      240,241,242,243,244,245,246,247
		db      248,249,250,251,252,253,254,255
;
;tr850_ucase     label   word
		ctable  <,'UCASE  ',128>
;
		db      128,154,144,182,142,183,065,128
		db      210,211,212,216,215,073,142,143
		db      144,146,146,226,153,227,234,235
		db      152,153,154,155,156,157,158,158
		db      181,214,224,233,165,165,166,166
		db      168,169,170,171,172,173,174,175
		db      176,177,178,179,180,181,182,183
		db      184,185,186,187,188,189,190,191
		db      192,193,194,195,196,197,198,199
		db      200,201,202,203,204,205,206,207
		db      208,209,210,211,212,213,214,215
		db      216,217,218,219,220,221,222,223
		db      224,225,226,227,228,229,230,231
		db      232,233,234,235,236,237,238,239
		db      240,241,242,243,244,245,246,247
		db      248,249,250,251,252,253,254,255
	page
;
yu852_ucase     label   word
cs852_ucase     label   word
sl852_ucase     label   word
hu852_ucase     label   word
pl852_ucase     label   word
;
;
	ctable  <,'UCASE  ',128>
;
    db      128,154,144,182,142,222,143,128
    db      157,211,138,138,215,141,142,143
    db      144,145,145,226,153,149,149,151
    db      151,153,154,155,155,157,158,172
    db      181,214,224,233,164,164,166,166
    db      168,168,170,141,172,184,174,175
    db      176,177,178,179,180,181,182,183
    db      184,185,186,187,188,189,189,191
    db      192,193,194,195,196,197,198,198
    db      200,201,202,203,204,205,206,207
    db      209,209,210,211,210,213,214,215
    db      183,217,218,219,220,221,222,223
    db      224,225,226,227,227,213,230,230
    db      232,233,232,235,237,237,221,239
    db      240,241,242,243,244,245,246,247
    db      248,249,250,235,252,252,254,255


		page

;
tr857_ucase     label   word
		ctable  <,'UCASE  ',128>
		db      128,154,144,182,142,183,143,128
		db      210,211,212,216,215,073,142,143
		db      144,146,146,226,153,227,234,235
		db      152,153,154,157,156,157,158,158
		db      181,214,224,233,165,165,166,166
		db      168,169,170,171,172,173,174,175
		db      176,177,178,179,180,181,182,183
		db      184,185,186,187,188,189,190,191
		db      192,193,194,195,196,197,199,199
		db      200,201,202,203,204,205,206,207
		db      208,209,210,211,212,073,214,215
		db      216,217,218,219,220,221,222,223
		db      224,225,226,227,229,229,230,231
		db      232,233,234,235,222,237,238,239
		db      240,241,242,243,244,245,246,247
		db      248,249,250,251,252,253,254,255
page
;
br850_ucase    label word
;
	       ctable      <,'UCASE  ',128>
		db	128,154,144,182,142,183,143,128
		db	210,211,212,216,215,222,142,143
		db	144,146,146,226,153,227,234,235
		db	152,153,154,157,156,157,158,159
		db	181,214,224,233,165,165,166,167
		db      168,169,170,171,172,173,174,175
		db      176,177,178,179,180,181,182,183
		db      184,185,186,187,188,189,190,191
		db	192,193,194,195,196,197,199,199
		db      200,201,202,203,204,205,206,207
		db	209,209,210,211,212,213,214,215
		db      216,217,218,219,220,221,222,223
		db	224,225,226,227,229,229,230,232
		db	232,233,234,235,237,237,238,239
		db      240,241,242,243,244,245,246,247
		db      248,249,250,251,252,253,254,255
page

;	cs3 -- end additions

;
;	World Trade Mono Case Filename Character Tables
;
;		Currently all countries have same (4/14/86)
;
;
; ----------------------------------------------------------------------------
uk_ucfile	label	word
fr_ucfile	label	word
gr_ucfile	label	word
sp_ucfile	label	word
it_ucfile	label	word
sv_ucfile	label	word
dk_ucfile	label	word
sw_ucfile	label	word
no_ucfile	label	word
nl_ucfile	label	word
be_ucfile	label	word
fi_ucfile	label	word
is_ucfile	label	word
ca_ucfile	label	word
as_ucfile	label	word
po_ucfile	label	word
us_ucfile	label	word
la_ucfile	label	word
afe_ucfile	label	word

;	cs3 -- added countries

br_ucfile      label word
tr_ucfile      label word
ic_ucfile      label word

;	cs3 -- end added countries

		ctable	<,'FUCASE ',128>
		db	128,129,130,131,132,133,134,135
		db	136,137,138,139,140,141,142,143
		db	144,145,146,147,148,149,150,151
		db	152,153,154,155,156,157,158,159
		db	160,161,162,163,164,165,166,167
		db	168,169,170,171,172,173,174,175
		db	176,177,178,179,180,181,182,183
		db	184,185,186,187,188,189,190,191
		db	192,193,194,195,196,197,198,199
		db	200,201,202,203,204,205,206,207
		db	208,209,210,211,212,213,214,215
		db	216,217,218,219,220,221,222,223
		db	224,225,226,227,228,229,230,231
		db	232,233,234,235,236,237,238,239
		db	240,241,242,243,244,245,246,247
		db	248,249,250,251,252,253,254,255
	page

;	cs3 -- new ucfile tables for some new countries

br850_ucfile	label	word
ic850_ucfile	label	word
tr850_ucfile	label	word
yu850_ucfile	label	word
cs850_ucfile	label	word
pl850_ucfile	label	word
hu850_ucfile	label	word
sl850_ucfile    label   word

		ctable	<,'FUCASE ',128>
		db	128,154,144,182,142,183,143,128
		db	210,211,212,216,215,222,142,143
		db	144,146,146,226,153,227,234,235
		db	152,153,154,157,156,157,158,159
		db	181,214,224,233,165,165,166,167
		db	168,169,170,171,172,173,174,175
		db	176,177,178,179,180,181,182,183
		db	184,185,186,187,188,189,190,191
		db	192,193,194,195,196,197,199,199
		db	200,201,202,203,204,205,206,207
		db	209,209,210,211,212,213,214,215
		db	216,217,218,219,220,221,222,223
		db	224,225,226,227,229,229,230,232
		db	232,233,234,235,237,237,238,239
		db	240,241,242,243,244,245,246,247
		db	248,249,250,251,252,253,254,255
page
yu_ucfile	label	word
cs_ucfile       label   word
sl_ucfile       label   word
pl_ucfile       label   word
hu_ucfile       label   word

		db	128,154,144,182,142,222,143,128
		db	157,211,138,138,215,141,142,143
		db	144,145,145,226,153,149,149,151
		db	151,153,154,155,155,157,158,172
		db	181,214,224,233,164,164,166,166
		db	168,168,170,141,172,184,174,175
		db	176,177,178,179,180,181,182,183
		db	184,185,186,187,188,189,189,191
		db	192,193,194,195,196,197,198,198
		db	200,201,202,203,204,205,206,207
		db	209,209,210,211,210,213,214,215
		db	183,217,218,219,220,221,222,223
		db	224,225,226,227,227,213,230,230
		db	232,233,232,235,237,237,221,239
		db	240,241,242,243,244,245,246,247
		db	248,249,250,235,252,252,254,255
	page
;

;	cs3 -- end additions

; ----------------------------------------------------------------------------
;
;	World Trade Valid Filename Character Tables
;
;		Currently all countries have same (4/14/86)
;
;
; ----------------------------------------------------------------------------
uk_flist	label	word
fr_flist	label	word
gr_flist	label	word
sp_flist	label	word
it_flist	label	word
sv_flist	label	word
dk_flist	label	word
sw_flist	label	word
no_flist	label	word
nl_flist	label	word
be_flist	label	word
fi_flist	label	word
is_flist	label	word
ca_flist	label	word
as_flist	label	word
po_flist	label	word
us_flist	label	word
la_flist	label	word
afe_flist	label	word
jp437_flist	label	word
jp932_flist	label	word
ko437_flist	label	word
ko934_flist	label	word
pr437_flist	label	word
pr936_flist	label	word
ta437_flist	label	word
ta938_flist	label	word

;	cs3 -- begin additions

br_flist	 label word
ic_flist        label   word
tr_flist        label   word
yu_flist        label   word
cs_flist        label   word
sl_flist        label   word
pl_flist        label   word
hu_flist        label   word

;	cs3 -- end additions

		ctable	<,'FCHAR  ',fclend-fclbegin>
fclbegin	label	word
		db	1,0,255 			; include all
		db	0,0,20h 			; exclude 0 - 20h
		db	2,14,'."/\[]:|<>+=;,'           ; exclude 14 special chars
fclend		label	word
	page
; ----------------------------------------------------------------------------
;
;	World Trade DBCS Tables
;
;	    Currently all countries have same (4/14/86)
;
;
; ----------------------------------------------------------------------------
;					;***CNS
uk_dbcs 	label	word		;AN000;
fr_dbcs 	label	word		;AN000;
gr_dbcs 	label	word		;AN000;
sp_dbcs 	label	word		;AN000;
it_dbcs 	label	word		;AN000;
sv_dbcs 	label	word		;AN000;
dk_dbcs 	label	word		;AN000;
sw_dbcs 	label	word		;AN000;
no_dbcs 	label	word		;AN000;
nl_dbcs 	label	word		;AN000;
be_dbcs 	label	word		;AN000;
fi_dbcs 	label	word		;AN000;
is_dbcs 	label	word		;AN000;
ca_dbcs 	label	word		;AN000;
as_dbcs 	label	word		;AN000;
po_dbcs 	label	word		;AN000;
us_dbcs 	label	word		;AN000;
la_dbcs 	label	word		;AN000;
afe_dbcs	label	word		;AN000;
jp437_dbcs	label	word		;AN000;
ko437_dbcs	label	word		;AN000;
pr437_dbcs	label	word		;AN000;
ta437_dbcs	label	word		;AN000;

;	cs3 -- begin additions for new languages

br_dbcs		label	word
ic_dbcs         label   word
tr_dbcs         label   word
yu_dbcs         label   word
cs_dbcs         label   word
sl_dbcs         label   word
pl_dbcs         label   word
hu_dbcs         label   word

;	cs3 -- end additions

		ctable	<,'DBCS   ',dbcsterm-dbcsbegin>         ;AN000;
dbcsbegin	label	word					;AN000;
dbcsterm	db	0,0					;AN000;
dbcsend 	label	word					;AN000;
;
;    Japan DBCS lead byte table
;
jp932_dbcs	label	word					;AN000;
		ctable	<,'DBCS   ',db932end-db932bgn>          ;AN000;
db932bgn	label	word					;AN000;
		db	081h,09Fh				;AN000;
		db	0E0h,0FCh				;AN000;
db932term	db	000h,000h				;AN000;
db932end	equ	$					;AN000;
;
;    Korea DBCS lead byte table
;
ko934_dbcs	label	word					;AN000;
		ctable	<,'DBCS   ',db934end-db934bgn>          ;AN000;
db934bgn	label	word					;AN000;
		db	081h,0BFh				;AN000;
db934term	db	000h,000h				;AN000;
db934end	equ	$					;AN000;
;
;    PRC and Taiwan DBCS lead byte table
;
pr936_dbcs	label	word					;AN000;
;cs3 ta938_dbcs	label	word					;AN000;
		ctable	<,'DBCS   ',db936end-db936bgn>          ;AN000;
db936bgn	label	word					;AN000;
		db	081h,0FCh				;AN000;
db936term	db	000h,000h				;AN000;
db936end	equ	$					;AN000;

;	cs3 -- separate entry for taiwan 938 dbcs

ta938_dbcs	label	word					;AN000;
		ctable	<,'DBCS   ',ta938end-ta938bgn>          ;AN000;
ta938bgn	label	word					;AN000;
		db	081h,0FDh				;AN000;
ta938term	db	000h,000h				;AN000;
ta938end	equ	$					;AN000;

;	cs3 -- end added section

	include	copyrigh.inc

; ---------------------------------------------------------------
;
;		END OF CDI SEGMENT
;
; ---------------------------------------------------------------


dseg	ends
	end

=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\country\country.asm ===
page	84,132
; July 8, 1986 - updated Finland for 437 dcl.
; July 8, 1986 - updated Netherland for 437 dcl.
; July 8, 1986 - updated Italy for 437 dcl.
; July 8, 1986 - updated Canada for 863 dcl.
; July 8, 1986 - updated Belgium for 437 dcl. (except Collate)
; July 8, 1986 - updated AreaSouth for 437 dcl.
; July 8, 1986 - updated Switzerland for 437 dcl.
; July 8, 1986 - updated Norway for 865 dcl.
; July 8, 1986 - updated Denmark for 865 dcl.
; July 14, 1986 - updated Sweden for 437 dcl.
; July 8, 1986 - updated AFE for 850 dcl.
; July 8, 1986 - updated Finland for 850 dcl.
; July 8, 1986 - updated Netherland for 850 dcl.
; July 8, 1986 - updated Canada for 850 dcl.
; July 8, 1986 - updated Italy for 850 dcl.
; July 8, 1986 - updated UK for 850 dcl.
; July 8, 1986 - updated Norway for 850 dcl.
; July 8, 1986 - updated Denmark for 850 dcl.
; July 8, 1986 - updated US for 850 dcl.
; July 8, 1986 - updated Switzerland for 850 dcl.
; July 14, 1986 - updated Sweden for 850 dcl.
; July 14, 1986 - updated Belgium for 850 dcl. (except Collate)
; August 26,1986 - updated Belgium for 437 collate EMG
; August 27,1986 - updated Belgium for 850 collate EMG
; August 27,1986 - updated Area South for 437  EMG
; August 27,1986 - updated Area South for 864  EMG
; August 27,1986 - make all collates 256 bytes	EMG
; August 27,1986 - updated Germany for 850  EMG
; August 27,1986 - updated Spain for 850  EMG
; August 28,1986 - updated Latin America for 850  EMG
; September 12, 1986 - updated SP,IS,CF,AS,PO,LA  EMG
; October 2, 1986 - updated AS and IS  EMG
; July 23,1987	  - DCR to alter Germany collate table to match US 850 DCR037
;		    CNS
; July 23,1987	  - DCR to alter SWISS collate info and ucase table 850 & 437
;		    DCR059--- CNS ***
; July 23,1987	  - DCR to alter Denmark's primary codepage to 850 instead of
;		    865 --- CNS ***
; NOvember 12,1987 - PTM2390 DBCS length of terminating value included for
;		     for DBCS countries
;		   - FILEUPCASE & UCASE swapped for 437 & 850 mapping incorrect
;		   - -ly for DOS 3.3
;		   - Make the FUCASE & UCASE tables equivalent for 850 & 437
; March 9, p3811, Finland to default to 850 now, w/437 as alternate code page
;
; March 30, p4072, LA wants to be same as Spain
; ***CNS
; April 14,1988    Re-adjust LA to match SPAIN which should have 850 as a
;PTM 4389	   default instead of 437 for both countries
;
;	create country.sys file
;
;
	include mkcntry.inc
;
; -----------------------------------------------------------
;
;	Data for COUNTRY.SYS file
;
; -----------------------------------------------------------
dseg	segment para
cdinfo	label	word
	db	0ffh,'COUNTRY'          ; signature
	db	8 dup (0)		; reserved
	dw	PTRCNT			; number of pointers in header
	db	CIPTYPE 		; type = country info pointer
	dd	offset cntryinfo	; pointer to country information
;
cntryinfo label word
cntrycnt=0
	dw	finalCNT		; number of countries
	ctryent <CENTRYSIZE,CID_US,437,,,us437_data>	    ; United States
	ctryent <CENTRYSIZE,CID_US,850,,,us850_data>	    ;
	ctryent <CENTRYSIZE,CID_UK,437,,,uk437_data>	    ; United Kingdom
	ctryent <CENTRYSIZE,CID_UK,850,,,uk850_data>	    ;
	ctryent <CENTRYSIZE,CID_FR,437,,,fr437_data>	    ; France
	ctryent <CENTRYSIZE,CID_FR,850,,,fr850_data>	    ;
	ctryent <CENTRYSIZE,CID_GR,437,,,gr437_data>	    ; Germany
	ctryent <CENTRYSIZE,CID_GR,850,,,gr850_data>	    ;
	ctryent <CENTRYSIZE,CID_SP,850,,,sp850_data>	    ;
	ctryent <CENTRYSIZE,CID_SP,437,,,sp437_data>	    ; Spain
	ctryent <CENTRYSIZE,CID_IT,437,,,it437_data>	    ; Italy
	ctryent <CENTRYSIZE,CID_IT,850,,,it850_data>	    ;
	ctryent <CENTRYSIZE,CID_SV,437,,,sv437_data>	    ; Sweden
	ctryent <CENTRYSIZE,CID_SV,850,,,sv850_data>	    ;
	ctryent <CENTRYSIZE,CID_DK,850,,,dk850_data>	    ; Denmark
	ctryent <CENTRYSIZE,CID_DK,865,,,dk865_data>	    ; DCR060 CNS ***** ;AN000;
	ctryent <CENTRYSIZE,CID_SW,850,,,sw850_data>	    ; Switzerland
	ctryent <CENTRYSIZE,CID_SW,437,,,sw437_data>	    ;
	ctryent <CENTRYSIZE,CID_NO,850,,,no850_data>	    ; Norway
	ctryent <CENTRYSIZE,CID_NO,865,,,no865_data>	    ;
	ctryent <CENTRYSIZE,CID_NL,437,,,nl437_data>	    ; Netherlands
	ctryent <CENTRYSIZE,CID_NL,850,,,nl850_data>	    ;
	ctryent <CENTRYSIZE,CID_BE,850,,,be850_data>	    ; Belgium
	ctryent <CENTRYSIZE,CID_BE,437,,,be437_data>	    ;
	ctryent <CENTRYSIZE,CID_FI,850,,,fi850_data>	    ; Finland p3811, requested 850 default
	ctryent <CENTRYSIZE,CID_FI,437,,,fi437_data>	    ; Finland
	ctryent <CENTRYSIZE,CID_IS,862,,,is862_data>	    ; Israel
	ctryent <CENTRYSIZE,CID_IS,850,,,is850_data>	    ;
	ctryent <CENTRYSIZE,CID_CA,863,,,ca863_data>	    ; Canada French
	ctryent <CENTRYSIZE,CID_CA,850,,,ca850_data>	    ;
	ctryent <CENTRYSIZE,CID_AS,864,,,as864_data>	    ; Area South (Arab States)
	ctryent <CENTRYSIZE,CID_AS,850,,,as850_data>	    ;
	ctryent <CENTRYSIZE,CID_PO,850,,,po850_data>	    ; Portugal
	ctryent <CENTRYSIZE,CID_PO,860,,,po860_data>	    ;
	ctryent <CENTRYSIZE,CID_LA,850,,,la850_data>	    ;
	ctryent <CENTRYSIZE,CID_LA,437,,,la437_data>	    ; Latin America
	ctryent <CENTRYSIZE,CID_AFE,437,,,afe437_data>	    ; International English
	ctryent <CENTRYSIZE,CID_AFE,850,,,afe850_data>	    ;
	ctryent <CENTRYSIZE,CID_JP,932,,,jp932_data>	    ; Japan
	ctryent <CENTRYSIZE,CID_JP,437,,,jp437_data>	    ;
	ctryent <CENTRYSIZE,CID_KO,934,,,ko934_data>	    ; Korea
	ctryent <CENTRYSIZE,CID_KO,437,,,ko437_data>	    ;
	ctryent <CENTRYSIZE,CID_PR,936,,,pr936_data>	    ; PRC
	ctryent <CENTRYSIZE,CID_PR,437,,,pr437_data>	    ;
	ctryent <CENTRYSIZE,CID_TA,938,,,ta938_data>	    ; Taiwan
	ctryent <CENTRYSIZE,CID_TA,437,,,ta437_data>	    ;

;	cs3 -- begin additions of new country data

	 ctryent <CENTRYSIZE,CID_BR,850,,,br850_data>        ; Brazil
	 ctryent <CENTRYSIZE,CID_BR,437,,,br437_data>        ;
	 ctryent <CENTRYSIZE,CID_IC,850,,,ic850_data>       ; Iceland
	 ctryent <CENTRYSIZE,CID_IC,861,,,ic861_data>       ;
	 ctryent <CENTRYSIZE,CID_TR,850,,,tr850_data>       ; Turkey
	 ctryent <CENTRYSIZE,CID_TR,857,,,tr857_data>       ;
	 ctryent <CENTRYSIZE,CID_YU,852,,,yu852_data>       ; yugoslavia
	 ctryent <CENTRYSIZE,CID_YU,850,,,yu850_data>       ;
	 ctryent <CENTRYSIZE,CID_CS,852,,,cs852_data>       ; czech
	 ctryent <CENTRYSIZE,CID_CS,850,,,cs850_data>       ;
	 ctryent <CENTRYSIZE,CID_PL,852,,,pl852_data>       ; poland
	 ctryent <CENTRYSIZE,CID_PL,850,,,pl850_data>       ;
	 ctryent <CENTRYSIZE,CID_HU,852,,,hu852_data>       ; hungary
	 ctryent <CENTRYSIZE,CID_HU,850,,,hu850_data>       ;

;	cs3 -- end additions


dummy	macro	p
finalCNT	equ	p
	endm
	dummy	%cntrycnt
;
uk437_data label   word
	dw	CDATAITEMS				; number of entries
	ctrydat <CDATASIZE,SETCOUNTRYINFO,,uk437_info>
	ctrydat <CDATASIZE,SETCOLLATE,,uk_collate>
	ctrydat <CDATASIZE,SETUCASE,,uk_ucase>
	ctrydat <CDATASIZE,SETUCASEFILE,,uk_ucase>
	ctrydat <CDATASIZE,SETFILELIST,,uk_flist>
	ctrydat <CDATASIZE,SETDBCS,,uk_dbcs>
;
uk850_data label   word
	dw	CDATAITEMS				; number of entries
	ctrydat <CDATASIZE,SETCOUNTRYINFO,,uk437_info>
	ctrydat <CDATASIZE,SETCOLLATE,,uk850_collate>
	ctrydat <CDATASIZE,SETUCASE,,uk850_ucase>
	ctrydat <CDATASIZE,SETUCASEFILE,,uk850_ucase>
	ctrydat <CDATASIZE,SETFILELIST,,uk_flist>
	ctrydat <CDATASIZE,SETDBCS,,uk_dbcs>
;
fr437_data label   word
	dw	CDATAITEMS				; number of entries
	ctrydat <CDATASIZE,SETCOUNTRYINFO,,fr437_info>
	ctrydat <CDATASIZE,SETCOLLATE,,fr_collate>
	ctrydat <CDATASIZE,SETUCASE,,fr_ucase>
	ctrydat <CDATASIZE,SETUCASEFILE,,fr_ucase>
	ctrydat <CDATASIZE,SETFILELIST,,fr_flist>
	ctrydat <CDATASIZE,SETDBCS,,fr_dbcs>
;
fr850_data label   word
	dw	CDATAITEMS				; number of entries
	ctrydat <CDATASIZE,SETCOUNTRYINFO,,fr437_info>
	ctrydat <CDATASIZE,SETCOLLATE,,fr850_collate>
	ctrydat <CDATASIZE,SETUCASE,,fr850_ucase>
	ctrydat <CDATASIZE,SETUCASEFILE,,fr850_ucase>
	ctrydat <CDATASIZE,SETFILELIST,,fr_flist>
	ctrydat <CDATASIZE,SETDBCS,,fr_dbcs>
;
gr437_data label   word
	dw	CDATAITEMS				; number of entries
	ctrydat <CDATASIZE,SETCOUNTRYINFO,,gr437_info>
	ctrydat <CDATASIZE,SETCOLLATE,,gr_collate>
	ctrydat <CDATASIZE,SETUCASE,,gr_ucase>
	ctrydat <CDATASIZE,SETUCASEFILE,,gr_ucase>
	ctrydat <CDATASIZE,SETFILELIST,,gr_flist>
	ctrydat <CDATASIZE,SETDBCS,,gr_dbcs>
;
gr850_data label   word
	dw	CDATAITEMS				; number of entries
	ctrydat <CDATASIZE,SETCOUNTRYINFO,,gr437_info>
	ctrydat <CDATASIZE,SETCOLLATE,,gr850_collate>
	ctrydat <CDATASIZE,SETUCASE,,gr850_ucase>
	ctrydat <CDATASIZE,SETUCASEFILE,,gr850_ucase>
	ctrydat <CDATASIZE,SETFILELIST,,gr_flist>
	ctrydat <CDATASIZE,SETDBCS,,gr_dbcs>
;
sp437_data label   word
	dw	CDATAITEMS				; number of entries
	ctrydat <CDATASIZE,SETCOUNTRYINFO,,sp437_info>
	ctrydat <CDATASIZE,SETCOLLATE,,sp_collate>
	ctrydat <CDATASIZE,SETUCASE,,sp_ucase>
	ctrydat <CDATASIZE,SETUCASEFILE,,sp_ucase>
	ctrydat <CDATASIZE,SETFILELIST,,sp_flist>
	ctrydat <CDATASIZE,SETDBCS,,sp_dbcs>
;
sp850_data label   word
	dw	CDATAITEMS				; number of entries
	ctrydat <CDATASIZE,SETCOUNTRYINFO,,sp850_info>
	ctrydat <CDATASIZE,SETCOLLATE,,sp850_collate>
	ctrydat <CDATASIZE,SETUCASE,,sp850_ucase>
	ctrydat <CDATASIZE,SETUCASEFILE,,sp850_ucase>
	ctrydat <CDATASIZE,SETFILELIST,,sp_flist>
	ctrydat <CDATASIZE,SETDBCS,,sp_dbcs>
;
it437_data label   word
	dw	CDATAITEMS				; number of entries
	ctrydat <CDATASIZE,SETCOUNTRYINFO,,it437_info>
	ctrydat <CDATASIZE,SETCOLLATE,,it_collate>
	ctrydat <CDATASIZE,SETUCASE,,it_ucase>
	ctrydat <CDATASIZE,SETUCASEFILE,,it_ucase>
	ctrydat <CDATASIZE,SETFILELIST,,it_flist>
	ctrydat <CDATASIZE,SETDBCS,,it_dbcs>
;
it850_data label   word
	dw	CDATAITEMS				; number of entries
	ctrydat <CDATASIZE,SETCOUNTRYINFO,,it437_info>
	ctrydat <CDATASIZE,SETCOLLATE,,it850_collate>
	ctrydat <CDATASIZE,SETUCASE,,it850_ucase>
	ctrydat <CDATASIZE,SETUCASEFILE,,it850_ucase>
	ctrydat <CDATASIZE,SETFILELIST,,it_flist>
	ctrydat <CDATASIZE,SETDBCS,,it_dbcs>
;
sv437_data label   word
	dw	CDATAITEMS				; number of entries
	ctrydat <CDATASIZE,SETCOUNTRYINFO,,sv437_info>
	ctrydat <CDATASIZE,SETCOLLATE,,sv_collate>
	ctrydat <CDATASIZE,SETUCASE,,sv_ucase>
	ctrydat <CDATASIZE,SETUCASEFILE,,sv_ucase>
	ctrydat <CDATASIZE,SETFILELIST,,sv_flist>
	ctrydat <CDATASIZE,SETDBCS,,sv_dbcs>
;
sv850_data label   word
	dw	CDATAITEMS				; number of entries
	ctrydat <CDATASIZE,SETCOUNTRYINFO,,sv437_info>
	ctrydat <CDATASIZE,SETCOLLATE,,sv850_collate>
	ctrydat <CDATASIZE,SETUCASE,,sv850_ucase>
	ctrydat <CDATASIZE,SETUCASEFILE,,sv850_ucase>
	ctrydat <CDATASIZE,SETFILELIST,,sv_flist>
	ctrydat <CDATASIZE,SETDBCS,,sv_dbcs>
;
dk850_data label   word
	dw	CDATAITEMS				; number of entries
	ctrydat <CDATASIZE,SETCOUNTRYINFO,,dk865_info>
	ctrydat <CDATASIZE,SETCOLLATE,,dk850_collate>
	ctrydat <CDATASIZE,SETUCASE,,dk850_ucase>
	ctrydat <CDATASIZE,SETUCASEFILE,,dk850_ucase>
	ctrydat <CDATASIZE,SETFILELIST,,dk_flist>
	ctrydat <CDATASIZE,SETDBCS,,dk_dbcs>
;
dk865_data label   word
	dw	CDATAITEMS				; number of entries
	ctrydat <CDATASIZE,SETCOUNTRYINFO,,dk865_info>
	ctrydat <CDATASIZE,SETCOLLATE,,dk_collate>
	ctrydat <CDATASIZE,SETUCASE,,dk_ucase>
	ctrydat <CDATASIZE,SETUCASEFILE,,dk_ucase>
	ctrydat <CDATASIZE,SETFILELIST,,dk_flist>
	ctrydat <CDATASIZE,SETDBCS,,dk_dbcs>
;
sw437_data label   word
	dw	CDATAITEMS				; number of entries
	ctrydat <CDATASIZE,SETCOUNTRYINFO,,sw437_info>
	ctrydat <CDATASIZE,SETCOLLATE,,sw_collate>
	ctrydat <CDATASIZE,SETUCASE,,sw_ucase>
	ctrydat <CDATASIZE,SETUCASEFILE,,sw_ucase>
	ctrydat <CDATASIZE,SETFILELIST,,sw_flist>
	ctrydat <CDATASIZE,SETDBCS,,sw_dbcs>
;
sw850_data label   word
	dw	CDATAITEMS				; number of entries
	ctrydat <CDATASIZE,SETCOUNTRYINFO,,sw437_info>
	ctrydat <CDATASIZE,SETCOLLATE,,sw850_collate>
	ctrydat <CDATASIZE,SETUCASE,,sw850_ucase>
	ctrydat <CDATASIZE,SETUCASEFILE,,sw850_ucase>
	ctrydat <CDATASIZE,SETFILELIST,,sw_flist>
	ctrydat <CDATASIZE,SETDBCS,,sw_dbcs>
;
no865_data label   word
	dw	CDATAITEMS				; number of entries
	ctrydat <CDATASIZE,SETCOUNTRYINFO,,no865_info>
	ctrydat <CDATASIZE,SETCOLLATE,,no_collate>
	ctrydat <CDATASIZE,SETUCASE,,no_ucase>
	ctrydat <CDATASIZE,SETUCASEFILE,,no_ucase>
	ctrydat <CDATASIZE,SETFILELIST,,no_flist>
	ctrydat <CDATASIZE,SETDBCS,,no_dbcs>
;
no850_data label   word
	dw	CDATAITEMS				; number of entries
	ctrydat <CDATASIZE,SETCOUNTRYINFO,,no865_info>
	ctrydat <CDATASIZE,SETCOLLATE,,no850_collate>
	ctrydat <CDATASIZE,SETUCASE,,no850_ucase>
	ctrydat <CDATASIZE,SETUCASEFILE,,no850_ucase>
	ctrydat <CDATASIZE,SETFILELIST,,no_flist>
	ctrydat <CDATASIZE,SETDBCS,,no_dbcs>
;
nl437_data label   word
	dw	CDATAITEMS				; number of entries
	ctrydat <CDATASIZE,SETCOUNTRYINFO,,nl437_info>
	ctrydat <CDATASIZE,SETCOLLATE,,nl_collate>
	ctrydat <CDATASIZE,SETUCASE,,nl_ucase>
	ctrydat <CDATASIZE,SETUCASEFILE,,nl_ucase>
	ctrydat <CDATASIZE,SETFILELIST,,nl_flist>
	ctrydat <CDATASIZE,SETDBCS,,nl_dbcs>
;
nl850_data label   word
	dw	CDATAITEMS				; number of entries
	ctrydat <CDATASIZE,SETCOUNTRYINFO,,nl437_info>
	ctrydat <CDATASIZE,SETCOLLATE,,nl850_collate>
	ctrydat <CDATASIZE,SETUCASE,,nl850_ucase>
	ctrydat <CDATASIZE,SETUCASEFILE,,nl850_ucase>
	ctrydat <CDATASIZE,SETFILELIST,,nl_flist>
	ctrydat <CDATASIZE,SETDBCS,,nl_dbcs>
;
be437_data label   word
	dw	CDATAITEMS				; number of entries
	ctrydat <CDATASIZE,SETCOUNTRYINFO,,be437_info>
	ctrydat <CDATASIZE,SETCOLLATE,,be_collate>
	ctrydat <CDATASIZE,SETUCASE,,be_ucase>
	ctrydat <CDATASIZE,SETUCASEFILE,,be_ucase>
	ctrydat <CDATASIZE,SETFILELIST,,be_flist>
	ctrydat <CDATASIZE,SETDBCS,,be_dbcs>
;
be850_data label   word
	dw	CDATAITEMS				; number of entries
	ctrydat <CDATASIZE,SETCOUNTRYINFO,,be437_info>
	ctrydat <CDATASIZE,SETCOLLATE,,be850_collate>
	ctrydat <CDATASIZE,SETUCASE,,be850_ucase>
	ctrydat <CDATASIZE,SETUCASEFILE,,be850_ucase>
	ctrydat <CDATASIZE,SETFILELIST,,be_flist>
	ctrydat <CDATASIZE,SETDBCS,,be_dbcs>
;
fi437_data label   word
	dw	CDATAITEMS				; number of entries
	ctrydat <CDATASIZE,SETCOUNTRYINFO,,fi437_info>
	ctrydat <CDATASIZE,SETCOLLATE,,fi_collate>
	ctrydat <CDATASIZE,SETUCASE,,fi_ucase>
	ctrydat <CDATASIZE,SETUCASEFILE,,fi_ucase>
	ctrydat <CDATASIZE,SETFILELIST,,fi_flist>
	ctrydat <CDATASIZE,SETDBCS,,fi_dbcs>
;
fi850_data label   word
	dw	CDATAITEMS				; number of entries
	ctrydat <CDATASIZE,SETCOUNTRYINFO,,fi437_info>
	ctrydat <CDATASIZE,SETCOLLATE,,fi850_collate>
	ctrydat <CDATASIZE,SETUCASE,,fi850_ucase>
	ctrydat <CDATASIZE,SETUCASEFILE,,fi850_ucase>
	ctrydat <CDATASIZE,SETFILELIST,,fi_flist>
	ctrydat <CDATASIZE,SETDBCS,,fi_dbcs>
;
us437_data label   word
	dw	CDATAITEMS				; number of entries
	ctrydat <CDATASIZE,SETCOUNTRYINFO,,us437_info>
	ctrydat <CDATASIZE,SETCOLLATE,,us_collate>
	ctrydat <CDATASIZE,SETUCASE,,us_ucase>
	ctrydat <CDATASIZE,SETUCASEFILE,,us_ucase>
	ctrydat <CDATASIZE,SETFILELIST,,us_flist>
	ctrydat <CDATASIZE,SETDBCS,,us_dbcs>
;
us850_data label   word
	dw	CDATAITEMS				; number of entries
	ctrydat <CDATASIZE,SETCOUNTRYINFO,,us437_info>
	ctrydat <CDATASIZE,SETCOLLATE,,us850_collate>
	ctrydat <CDATASIZE,SETUCASE,,us850_ucase>
	ctrydat <CDATASIZE,SETUCASEFILE,,us850_ucase>
	ctrydat <CDATASIZE,SETFILELIST,,us_flist>
	ctrydat <CDATASIZE,SETDBCS,,us_dbcs>
;
is862_data label   word
	dw	CDATAITEMS				; number of entries
	ctrydat <CDATASIZE,SETCOUNTRYINFO,,is862_info>
	ctrydat <CDATASIZE,SETCOLLATE,,is_collate>
	ctrydat <CDATASIZE,SETUCASE,,is_ucase>
	ctrydat <CDATASIZE,SETUCASEFILE,,is_ucase>
	ctrydat <CDATASIZE,SETFILELIST,,is_flist>
	ctrydat <CDATASIZE,SETDBCS,,is_dbcs>
;
is850_data label   word
	dw	CDATAITEMS				; number of entries
	ctrydat <CDATASIZE,SETCOUNTRYINFO,,is862_info>
	ctrydat <CDATASIZE,SETCOLLATE,,is850_collate>
	ctrydat <CDATASIZE,SETUCASE,,is850_ucase>
	ctrydat <CDATASIZE,SETUCASEFILE,,is850_ucase>
	ctrydat <CDATASIZE,SETFILELIST,,is_flist>
	ctrydat <CDATASIZE,SETDBCS,,is_dbcs>
;
ca863_data label   word
	dw	CDATAITEMS				; number of entries
	ctrydat <CDATASIZE,SETCOUNTRYINFO,,ca863_info>
	ctrydat <CDATASIZE,SETCOLLATE,,ca_collate>
	ctrydat <CDATASIZE,SETUCASE,,ca_ucase>
	ctrydat <CDATASIZE,SETUCASEFILE,,ca_ucase>
	ctrydat <CDATASIZE,SETFILELIST,,ca_flist>
	ctrydat <CDATASIZE,SETDBCS,,ca_dbcs>
;
ca850_data label   word
	dw	CDATAITEMS				; number of entries
	ctrydat <CDATASIZE,SETCOUNTRYINFO,,ca863_info>
	ctrydat <CDATASIZE,SETCOLLATE,,ca850_collate>
	ctrydat <CDATASIZE,SETUCASE,,ca850_ucase>
	ctrydat <CDATASIZE,SETUCASEFILE,,ca850_ucase>
	ctrydat <CDATASIZE,SETFILELIST,,ca_flist>
	ctrydat <CDATASIZE,SETDBCS,,ca_dbcs>
;
as864_data label   word
	dw	CDATAITEMS				; number of entries
	ctrydat <CDATASIZE,SETCOUNTRYINFO,,as864_info>
	ctrydat <CDATASIZE,SETCOLLATE,,as_collate>
	ctrydat <CDATASIZE,SETUCASE,,as_ucase>
	ctrydat <CDATASIZE,SETUCASEFILE,,as_ucase>
	ctrydat <CDATASIZE,SETFILELIST,,as_flist>
	ctrydat <CDATASIZE,SETDBCS,,as_dbcs>
;
as850_data label   word
	dw	CDATAITEMS				; number of entries
	ctrydat <CDATASIZE,SETCOUNTRYINFO,,as850_info>
	ctrydat <CDATASIZE,SETCOLLATE,,as850_collate>
	ctrydat <CDATASIZE,SETUCASE,,as850_ucase>
	ctrydat <CDATASIZE,SETUCASEFILE,,as850_ucase>
	ctrydat <CDATASIZE,SETFILELIST,,as_flist>
	ctrydat <CDATASIZE,SETDBCS,,as_dbcs>
;
po860_data label   word
	dw	CDATAITEMS				; number of entries
	ctrydat <CDATASIZE,SETCOUNTRYINFO,,po860_info>
	ctrydat <CDATASIZE,SETCOLLATE,,po_collate>
	ctrydat <CDATASIZE,SETUCASE,,po_ucase>
	ctrydat <CDATASIZE,SETUCASEFILE,,po_ucase>
	ctrydat <CDATASIZE,SETFILELIST,,po_flist>
	ctrydat <CDATASIZE,SETDBCS,,po_dbcs>
;
po850_data label   word
	dw	CDATAITEMS				; number of entries
	ctrydat <CDATASIZE,SETCOUNTRYINFO,,po860_info>
	ctrydat <CDATASIZE,SETCOLLATE,,po850_collate>
	ctrydat <CDATASIZE,SETUCASE,,po850_ucase>
	ctrydat <CDATASIZE,SETUCASEFILE,,po850_ucase>
	ctrydat <CDATASIZE,SETFILELIST,,po_flist>
	ctrydat <CDATASIZE,SETDBCS,,po_dbcs>
;
la437_data label   word
	dw	CDATAITEMS				; number of entries
	ctrydat <CDATASIZE,SETCOUNTRYINFO,,la437_info>
	ctrydat <CDATASIZE,SETCOLLATE,,la_collate>
	ctrydat <CDATASIZE,SETUCASE,,la_ucase>
	ctrydat <CDATASIZE,SETUCASEFILE,,la_ucase>
	ctrydat <CDATASIZE,SETFILELIST,,la_flist>
	ctrydat <CDATASIZE,SETDBCS,,la_dbcs>
;
la850_data label   word
	dw	CDATAITEMS				; number of entries
	ctrydat <CDATASIZE,SETCOUNTRYINFO,,la437_info>
	ctrydat <CDATASIZE,SETCOLLATE,,la850_collate>
	ctrydat <CDATASIZE,SETUCASE,,la850_ucase>
	ctrydat <CDATASIZE,SETUCASEFILE,,la850_ucase>
	ctrydat <CDATASIZE,SETFILELIST,,la_flist>
	ctrydat <CDATASIZE,SETDBCS,,la_dbcs>
;
jp932_data label   word
	dw	CDATAITEMS				; number of entries
	ctrydat <CDATASIZE,SETCOUNTRYINFO,,jp932_info>
	ctrydat <CDATASIZE,SETCOLLATE,,jp932_collate>
	ctrydat <CDATASIZE,SETUCASE,,jp932_ucase>
	ctrydat <CDATASIZE,SETUCASEFILE,,jp932_ucase>
	ctrydat <CDATASIZE,SETFILELIST,,jp932_flist>
	ctrydat <CDATASIZE,SETDBCS,,jp932_dbcs>
;
jp437_data label   word
	dw	CDATAITEMS				; number of entries
	ctrydat <CDATASIZE,SETCOUNTRYINFO,,jp437_info>
	ctrydat <CDATASIZE,SETCOLLATE,,jp437_collate>
	ctrydat <CDATASIZE,SETUCASE,,jp437_ucase>
	ctrydat <CDATASIZE,SETUCASEFILE,,jp437_ucase>
	ctrydat <CDATASIZE,SETFILELIST,,jp437_flist>
	ctrydat <CDATASIZE,SETDBCS,,jp437_dbcs>
;
ko934_data label   word
	dw	CDATAITEMS				; number of entries
	ctrydat <CDATASIZE,SETCOUNTRYINFO,,ko934_info>
	ctrydat <CDATASIZE,SETCOLLATE,,ko934_collate>
	ctrydat <CDATASIZE,SETUCASE,,ko934_ucase>
	ctrydat <CDATASIZE,SETUCASEFILE,,ko934_ucase>
	ctrydat <CDATASIZE,SETFILELIST,,ko934_flist>
	ctrydat <CDATASIZE,SETDBCS,,ko934_dbcs>
;
ko437_data label   word
	dw	CDATAITEMS				; number of entries
	ctrydat <CDATASIZE,SETCOUNTRYINFO,,ko437_info>
	ctrydat <CDATASIZE,SETCOLLATE,,ko437_collate>
	ctrydat <CDATASIZE,SETUCASE,,ko437_ucase>
	ctrydat <CDATASIZE,SETUCASEFILE,,ko437_ucase>
	ctrydat <CDATASIZE,SETFILELIST,,ko437_flist>
	ctrydat <CDATASIZE,SETDBCS,,ko437_dbcs>
;
pr936_data label   word
	dw	CDATAITEMS				; number of entries
	ctrydat <CDATASIZE,SETCOUNTRYINFO,,pr936_info>
	ctrydat <CDATASIZE,SETCOLLATE,,pr936_collate>
	ctrydat <CDATASIZE,SETUCASE,,pr936_ucase>
	ctrydat <CDATASIZE,SETUCASEFILE,,pr936_ucase>
	ctrydat <CDATASIZE,SETFILELIST,,pr936_flist>
	ctrydat <CDATASIZE,SETDBCS,,pr936_dbcs>
;
pr437_data label   word
	dw	CDATAITEMS				; number of entries
	ctrydat <CDATASIZE,SETCOUNTRYINFO,,pr437_info>
	ctrydat <CDATASIZE,SETCOLLATE,,pr437_collate>
	ctrydat <CDATASIZE,SETUCASE,,pr437_ucase>
	ctrydat <CDATASIZE,SETUCASEFILE,,pr437_ucase>
	ctrydat <CDATASIZE,SETFILELIST,,pr437_flist>
	ctrydat <CDATASIZE,SETDBCS,,pr437_dbcs>
;
ta938_data label   word
	dw	CDATAITEMS				; number of entries
	ctrydat <CDATASIZE,SETCOUNTRYINFO,,ta938_info>
	ctrydat <CDATASIZE,SETCOLLATE,,ta938_collate>
	ctrydat <CDATASIZE,SETUCASE,,ta938_ucase>
	ctrydat <CDATASIZE,SETUCASEFILE,,ta938_ucase>
	ctrydat <CDATASIZE,SETFILELIST,,ta938_flist>
	ctrydat <CDATASIZE,SETDBCS,,ta938_dbcs>
;
ta437_data label   word
	dw	CDATAITEMS				; number of entries
	ctrydat <CDATASIZE,SETCOUNTRYINFO,,ta437_info>
	ctrydat <CDATASIZE,SETCOLLATE,,ta437_collate>
	ctrydat <CDATASIZE,SETUCASE,,ta437_ucase>
	ctrydat <CDATASIZE,SETUCASEFILE,,ta437_ucase>
	ctrydat <CDATASIZE,SETFILELIST,,ta437_flist>
	ctrydat <CDATASIZE,SETDBCS,,ta437_dbcs>
;
afe437_data label   word
	dw	CDATAITEMS				; number of entries
	ctrydat <CDATASIZE,SETCOUNTRYINFO,,afe437_info>
	ctrydat <CDATASIZE,SETCOLLATE,,afe_collate>
	ctrydat <CDATASIZE,SETUCASE,,afe_ucase>
	ctrydat <CDATASIZE,SETUCASEFILE,,afe_ucase>
	ctrydat <CDATASIZE,SETFILELIST,,afe_flist>
	ctrydat <CDATASIZE,SETDBCS,,afe_dbcs>
;
afe850_data label   word
	dw	CDATAITEMS				; number of entries
	ctrydat <CDATASIZE,SETCOUNTRYINFO,,afe437_info>
	ctrydat <CDATASIZE,SETCOLLATE,,afe850_collate>
	ctrydat <CDATASIZE,SETUCASE,,afe850_ucase>
	ctrydat <CDATASIZE,SETUCASEFILE,,afe850_ucase>
	ctrydat <CDATASIZE,SETFILELIST,,afe_flist>
	ctrydat <CDATASIZE,SETDBCS,,afe_dbcs>
	page

;	cs3 -- begin additions for new countries

br850_data label   word
	 dw    CDATAITEMS                    ; number of entries
	 ctrydat <CDATASIZE,SETCOUNTRYINFO,,br850_info>
	 ctrydat <CDATASIZE,SETCOLLATE,,br850_collate>
	 ctrydat <CDATASIZE,SETUCASE,,br850_ucase>
	 ctrydat <CDATASIZE,SETUCASEFILE,,br850_ucfile>
	 ctrydat <CDATASIZE,SETFILELIST,,br_flist>
	 ctrydat <CDATASIZE,SETDBCS,,br_dbcs>
;
br437_data label   word
	 dw    CDATAITEMS                    ; number of entries
	 ctrydat <CDATASIZE,SETCOUNTRYINFO,,br850_info>
	 ctrydat <CDATASIZE,SETCOLLATE,,br437_collate>
	 ctrydat <CDATASIZE,SETUCASE,,br_ucase>
	 ctrydat <CDATASIZE,SETUCASEFILE,,br_ucase>
	 ctrydat <CDATASIZE,SETFILELIST,,br_flist>
	 ctrydat <CDATASIZE,SETDBCS,,br_dbcs>
;
ic861_data label   word
	 dw     CDATAITEMS                              ; number of entries
	 ctrydat <CDATASIZE,SETCOUNTRYINFO,,ic861_info>
	 ctrydat <CDATASIZE,SETCOLLATE,,ic_collate>
	 ctrydat <CDATASIZE,SETUCASE,,ic_ucase>
	 ctrydat <CDATASIZE,SETUCASEFILE,,ic_ucase>
	 ctrydat <CDATASIZE,SETFILELIST,,ic_flist>
	 ctrydat <CDATASIZE,SETDBCS,,ic_dbcs>
;
ic850_data label   word
	 dw     CDATAITEMS                              ; number of entries
	 ctrydat <CDATASIZE,SETCOUNTRYINFO,,ic850_info>
	 ctrydat <CDATASIZE,SETCOLLATE,,ic850_collate>
	 ctrydat <CDATASIZE,SETUCASE,,ic850_ucase>
	 ctrydat <CDATASIZE,SETUCASEFILE,,ic850_ucfile>
	 ctrydat <CDATASIZE,SETFILELIST,,ic_flist>
	 ctrydat <CDATASIZE,SETDBCS,,ic_dbcs>
;
tr850_data label   word
	 dw     CDATAITEMS                              ; number of entries
	 ctrydat <CDATASIZE,SETCOUNTRYINFO,,tr850_info>
	 ctrydat <CDATASIZE,SETCOLLATE,,tr850_collate>
	 ctrydat <CDATASIZE,SETUCASE,,tr850_ucase>
	 ctrydat <CDATASIZE,SETUCASEFILE,,tr850_ucfile>
	 ctrydat <CDATASIZE,SETFILELIST,,tr_flist>
	 ctrydat <CDATASIZE,SETDBCS,,tr_dbcs>
;
tr857_data label   word
	 dw     CDATAITEMS                              ; number of entries
	 ctrydat <CDATASIZE,SETCOUNTRYINFO,,tr857_info>
	 ctrydat <CDATASIZE,SETCOLLATE,,tr857_collate>
	 ctrydat <CDATASIZE,SETUCASE,,tr857_ucase>
	 ctrydat <CDATASIZE,SETUCASEFILE,,tr857_ucase>
	 ctrydat <CDATASIZE,SETFILELIST,,tr_flist>
	 ctrydat <CDATASIZE,SETDBCS,,tr_dbcs>
;
yu850_data label   word
	 dw     CDATAITEMS                              ; number of entries
	 ctrydat <CDATASIZE,SETCOUNTRYINFO,,yu852_info>
	 ctrydat <CDATASIZE,SETCOLLATE,,yu850_collate>
	 ctrydat <CDATASIZE,SETUCASE,,yu850_ucase>
	 ctrydat <CDATASIZE,SETUCASEFILE,,yu850_ucfile>
	 ctrydat <CDATASIZE,SETFILELIST,,yu_flist>
	 ctrydat <CDATASIZE,SETDBCS,,yu_dbcs>   ;  This is DOUBLE BYTE CHAR SET
;                                               ;  char set (ahead of its time)
;                                               ; and doesn't need to be
;
yu852_data label   word
	 dw     CDATAITEMS                      ; number of entries
	 ctrydat <CDATASIZE,SETCOUNTRYINFO,,yu852_info>
	 ctrydat <CDATASIZE,SETCOLLATE,,yu852_collate>
	 ctrydat <CDATASIZE,SETUCASE,,yu852_ucase>
	 ctrydat <CDATASIZE,SETUCASEFILE,,yu_ucfile>
	 ctrydat <CDATASIZE,SETFILELIST,,yu_flist>
	 ctrydat <CDATASIZE,SETDBCS,,yu_dbcs>
;
cs850_data label   word
	 dw     CDATAITEMS                              ; number of entries
	 ctrydat <CDATASIZE,SETCOUNTRYINFO,,cs852_info>
	 ctrydat <CDATASIZE,SETCOLLATE,,cs850_collate>
	 ctrydat <CDATASIZE,SETUCASE,,cs850_ucase>
	 ctrydat <CDATASIZE,SETUCASEFILE,,cs850_ucfile>
	 ctrydat <CDATASIZE,SETFILELIST,,cs_flist>
	 ctrydat <CDATASIZE,SETDBCS,,cs_dbcs>
;
cs852_data label   word
	 dw     CDATAITEMS                              ; number of entries
	 ctrydat <CDATASIZE,SETCOUNTRYINFO,,cs852_info>
	 ctrydat <CDATASIZE,SETCOLLATE,,cs852_collate>
	 ctrydat <CDATASIZE,SETUCASE,,cs852_ucase>
	 ctrydat <CDATASIZE,SETUCASEFILE,,cs_ucfile>
	 ctrydat <CDATASIZE,SETFILELIST,,cs_flist>
	 ctrydat <CDATASIZE,SETDBCS,,cs_dbcs>
;
sl850_data label   word
	 dw     CDATAITEMS                              ; number of entries
	 ctrydat <CDATASIZE,SETCOUNTRYINFO,,cs852_info>
	 ctrydat <CDATASIZE,SETCOLLATE,,sl850_collate>
	 ctrydat <CDATASIZE,SETUCASE,,sl850_ucase>
	 ctrydat <CDATASIZE,SETUCASEFILE,,sl850_ucfile>
	 ctrydat <CDATASIZE,SETFILELIST,,sl_flist>
	 ctrydat <CDATASIZE,SETDBCS,,sl_dbcs>
;
sl852_data label   word
	 dw     CDATAITEMS                              ; number of entries
	 ctrydat <CDATASIZE,SETCOUNTRYINFO,,cs852_info>
	 ctrydat <CDATASIZE,SETCOLLATE,,sl852_collate>
	 ctrydat <CDATASIZE,SETUCASE,,sl852_ucase>
	 ctrydat <CDATASIZE,SETUCASEFILE,,sl_ucfile>
	 ctrydat <CDATASIZE,SETFILELIST,,sl_flist>
	 ctrydat <CDATASIZE,SETDBCS,,sl_dbcs>
;
pl850_data label   word
	 dw     CDATAITEMS                              ; number of entries
	 ctrydat <CDATASIZE,SETCOUNTRYINFO,,pl852_info>
	 ctrydat <CDATASIZE,SETCOLLATE,,pl850_collate>
	 ctrydat <CDATASIZE,SETUCASE,,pl850_ucase>
	 ctrydat <CDATASIZE,SETUCASEFILE,,pl850_ucfile>
	 ctrydat <CDATASIZE,SETFILELIST,,pl_flist>
	 ctrydat <CDATASIZE,SETDBCS,,pl_dbcs>
;
pl852_data label   word
	 dw     CDATAITEMS                              ; number of entries
	 ctrydat <CDATASIZE,SETCOUNTRYINFO,,pl852_info>
	 ctrydat <CDATASIZE,SETCOLLATE,,pl852_collate>
	 ctrydat <CDATASIZE,SETUCASE,,pl852_ucase>
	 ctrydat <CDATASIZE,SETUCASEFILE,,pl_ucfile>
	 ctrydat <CDATASIZE,SETFILELIST,,pl_flist>
	 ctrydat <CDATASIZE,SETDBCS,,pl_dbcs>
;
hu850_data label   word
	 dw     CDATAITEMS                              ; number of entries
	 ctrydat <CDATASIZE,SETCOUNTRYINFO,,hu852_info>
	 ctrydat <CDATASIZE,SETCOLLATE,,hu850_collate>
	 ctrydat <CDATASIZE,SETUCASE,,hu850_ucase>
	 ctrydat <CDATASIZE,SETUCASEFILE,,hu850_ucfile>
	 ctrydat <CDATASIZE,SETFILELIST,,hu_flist>
	 ctrydat <CDATASIZE,SETDBCS,,hu_dbcs>
;
hu852_data label   word
	 dw     CDATAITEMS                              ; number of entries
	 ctrydat <CDATASIZE,SETCOUNTRYINFO,,hu852_info>
	 ctrydat <CDATASIZE,SETCOLLATE,,hu852_collate>
	 ctrydat <CDATASIZE,SETUCASE,,hu852_ucase>
	 ctrydat <CDATASIZE,SETUCASEFILE,,hu_ucfile>
	 ctrydat <CDATASIZE,SETFILELIST,,hu_flist>
	 ctrydat <CDATASIZE,SETDBCS,,hu_dbcs>
;
;	cs3 -- end additions for new countries
	page
; ----------------------------------------
;
;	World Trade Country Info Tables
;
; ----------------------------------------
uk437_info	   label   word
		ctable	<>
;cs3		cinfo	<CID_UK,437,DATE_DMY,156,,,,,',',,'.',,'-',,':',,,2,HR12,,','>
		cinfo	<CID_UK,437,DATE_DMY,156,,,,,',',,'.',,'/',,':',,,2,HR24,,','>	; cs3
;
fr437_info	   label   word
		ctable	<>
;cs3		cinfo	<CID_FR,437,DATE_DMY,'F',,,,,' ',,',',,'/',,':',,3,2,HR24,,';'>
		cinfo	<CID_FR,437,DATE_DMY,'F',,,,,' ',,',',,'.',,':',,3,2,HR24,,';'>	; cs3
;
gr437_info	   label   word
		ctable	<>
;cs3		cinfo	<CID_GR,437,DATE_DMY,'D','M',,,,'.',,',',,'.',,'.',,2,2,HR24,,';'>
		cinfo	<CID_GR,437,DATE_DMY,'D','M',,,,'.',,',',,'.',,':',,0,2,HR24,,';'> ; cs3

;
sp437_info	   label   word
		ctable	<>
;cs3		cinfo	<CID_SP,437,DATE_DMY,158,,,,,'.',,',',,'/',,':',,3,2,HR24,,';'>
		cinfo	<CID_SP,437,DATE_DMY,158,,,,,'.',,',',,'/',,':',,2,0,HR24,,';'>	; cs3

;
sp850_info	   label   word
		ctable	<>
;cs3		cinfo	<CID_SP,437,DATE_DMY,'P','t','s',,,'.',,',',,'/',,':',,3,2,HR24,,';'>
		cinfo	<CID_SP,437,DATE_DMY,'P','t','s',,,'.',,',',,'/',,':',,2,0,HR24,,';'>	; cs3

;
it437_info	   label   word
		ctable	<>
;cs3		cinfo	<CID_IT,437,DATE_DMY,'L','.',,,,'.',,',',,'/',,':',,,,HR24,,';'>
		cinfo	<CID_IT,437,DATE_DMY,'L','.',,,,'.',,',',,'/',,'.',,2,,HR24,,';'>	; cs3
;
sv437_info	   label   word
		ctable	<>
;cs3		cinfo	<CID_SV,437,DATE_YMD,'S','E','K',,,'.',,',',,'-',,'.',,2,2,HR24,,';'>
		cinfo	<CID_SV,437,DATE_YMD,'K','r',,,,' ',,',',,'-',,'.',,3,2,HR24,,';'>	; cs3
;
dk865_info	   label   word
		ctable	<>
		cinfo	<CID_DK,865,DATE_DMY,'k','r',,,,'.',,',',,'-',,'.',,2,2,HR24,,';'>
;
sw437_info	   label   word
		ctable	<>
;cs3		cinfo	<CID_SW,437,DATE_DMY,'F','r',,,,"'",,'.',,'.',,'.',,2,2,HR24,,','>
		cinfo	<CID_SW,437,DATE_DMY,'F','r','.',,,"'",,'.',,'.',,',',,2,2,HR24,,';'>	;cs3
;
;*** CNS Change date separator from slash to period - DCR 357
no865_info	   label   word
		ctable	<>
;cs3		cinfo	<CID_NO,865,DATE_DMY,'K','r',,,,'.',,',',,'.',,'.',,2,2,HR24,,';'> ;AN000;
		cinfo	<CID_NO,865,DATE_DMY,'K','r',,,,'.',,',',,'.',,':',,2,2,HR24,,';'> ;AN000;cs3
;*** CNS Change date separator from slash to period - DCR 357
;*** Field #14
;
nl437_info	   label   word
		ctable	<>
		cinfo	<CID_NL,437,DATE_DMY,159,,,,,'.',,',',,'-',,':',,2,2,HR24,,';'>
;
be437_info	   label   word
		ctable	<>
;cs3		cinfo	<CID_BE,437,DATE_DMY,'B','E','F',,,'.',,',',,'/',,':',,2,2,HR24,,';'>
		cinfo	<CID_BE,437,DATE_DMY,'B','F',,,,'.',,',',,'/',,':',,2,2,HR24,,';'>	; cs3
;
fi437_info	   label   word
		ctable	<>
		cinfo	<CID_FI,437,DATE_DMY,'m','k',,,,' ',,',',,'.',,'.',,3,2,HR24,,';'>
;
jp437_info	   label   word
;cs3 ko437_info	   label   word
pr437_info	   label   word
;cs3 ta437_info	   label   word
us437_info	   label   word
		ctable	<>
		cinfo	<CID_US,437,DATE_MDY,'$',,,,,',',,'.',,'-',,':',,,2,HR12,,','>
;
is862_info	   label   word
		ctable	<>
		cinfo	<CID_IS,862,DATE_DMY,153,,,,,',',,'.',,' ',,':',,2,2,HR24,,','>
;
ca863_info	   label   word
		ctable	<>
		cinfo	<CID_CA,863,DATE_YMD,'$',,,,,' ',,',',,'-',,':',,3,2,HR24,,';'>
;
as864_info	   label   word
		ctable	<>
		cinfo	<CID_AS,864,DATE_DMY,164,,,,,'.',,',',,'/',,':',,3,3,HR12,,';'>
;
as850_info	   label   word
		ctable	<>
		cinfo	<CID_AS,864,DATE_DMY,207,,,,,'.',,',',,'/',,':',,3,3,HR12,,';'>
;
po860_info	   label   word
		ctable	<>
;cs3		cinfo	<CID_PO,860,DATE_DMY,'$',,,,,'.',,',',,'/',,':',,4,2,HR24,,';'>
		cinfo	<CID_PO,860,DATE_DMY,'E','s','c','.',,'.',,',',,'-',,':',,3,2,HR24,,';'>	; cs3
;
la437_info	   label   word
		ctable	<>
;cs3		cinfo	<CID_LA,437,DATE_DMY,'$',,,,,',',,'.',,'/',,':',,3,2,HR24,,';'>
		cinfo	<CID_LA,437,DATE_DMY,'$',,,,,',',,'.',,'/',,':',,0,2,HR12,,','>	; cs3
;
afe437_info	   label   word
		ctable	<>
		cinfo	<CID_AFE,437,DATE_DMY,'$',,,,,',',,'.',,'-',,':',,,2,HR12,,','>
;
jp932_info	   label   word
		ctable	<>
		cinfo	<CID_JP,932,DATE_YMD,'\',,,,,',',,'.',,'-',,':',,,0,HR24,,','>
;
ko934_info	   label   word
		ctable	<>
;cs3		cinfo	<CID_KO,934,DATE_YMD,'\',,,,,',',,'.',,'-',,':',,,0,HR24,,','>
		cinfo	<CID_KO,934,DATE_YMD,'\',,,,,',',,'.',,'.',,':',,,0,HR24,,','>	; cs3
;
;	cs3 -- added separate entries for ko437 and ta437

ta437_info	label	word
		ctable	<>
		cinfo	<CID_US,437,DATE_YMD,'$',,,,,',',,'.',,'/',,':',,,2,HR12,,','>
ko437_info	label	word
		ctable	<>
		cinfo	<CID_US,437,DATE_MDY,'$',,,,,',',,'.',,'.',,':',,,2,HR12,,','>
;
;	cs3 -- end additions

pr936_info	   label   word
		ctable	<>
		cinfo	<CID_PR,936,DATE_YMD,'\',,,,,',',,'.',,'-',,':',,,2,HR24,,','>
;
ta938_info	   label   word
		ctable	<>
;cs3		cinfo	<CID_TA,938,DATE_MDY,'N','T','$',,,',',,'.',,'-',,':',,,2,HR24,,','>
		cinfo	<CID_TA,938,DATE_YMD,'N','T','$',,,',',,'.',,'/',,':',,,2,HR24,,','>	; cs3
;

;	cs3 -- begin additions for new countries

br850_info        label   word
	       ctable      <>
	       cinfo <CID_BR,850,DATE_DMY,'C','r','$',,,'.',,',',,'/',,':',,,2,HR24,,';'>
;
ic861_info        label   word
	       ctable   <>
	       cinfo    <CID_IC,861,DATE_DMY,'k','r',,,,'.',,',',,'-',,':',,3,2,HR24,,','>
;
ic850_info        label   word
	       ctable   <>
	       cinfo    <CID_IC,850,DATE_DMY,'k','r',,,,'.',,',',,'-',,':',,3,2,HR24,,','>
;
tr850_info        label   word
	       ctable   <>
	       cinfo    <CID_TR,850,DATE_DMY,'T','L',,,,'.',,',',,'/',,':',,4,2,HR24,,','>
;
tr857_info        label   word
	       ctable   <>
	       cinfo    <CID_TR,857,DATE_DMY,'T','L',,,,'.',,',',,'/',,':',,4,2,HR24,,','>
;
yu852_info        label   word   ; Country info for yugoslavia 852
	       ctable   <>
	       cinfo    <CID_YU,852,DATE_YMD,'D','i','n',,,'.',,',',,'-',,':',,2,2,HR24,,','>
;
cs852_info        label   word   ; Country info for CSSR   852
	       ctable   <>
	       cinfo    <CID_CS,852,DATE_YMD,'K',9FH,'s',,,'.',,',',,'-',,':',,2,2,HR24,,','>
;
pl852_info        label   word   ; Country info for poland 852
	       ctable   <>
	       cinfo    <CID_PL,852,DATE_YMD,'Z',88H,,,,'.',,',',,'-',,':',,,2,HR24,,','>
;
hu852_info        label   word   ; Country info for hungary 852
	       ctable   <>
	       cinfo	<CID_HU,852,DATE_YMD,'F','t',,,,' ',,',',,'-',,':',,,2,HR24,,','>
;
;	cs3 -- end additions for new countries

	page
; ------------------------------------------------
;
;	World Trade Collating sequence tables
;
; ------------------------------------------------
;
; --------------------------------------------------------------------------
;
;	Collating Table Same for United States, United Kingdom, France, Germany,
;			Italy, and International English
; --------------------------------------------------------------------------
;
us_collate	label	word
;
uk_collate	label	word
;
fr_collate	label	word
;
gr_collate	label	word
;
it_collate	label	word
;
jp437_collate	label	word
;
ko437_collate	label	word
;
pr437_collate	label	word
;
ta437_collate	label	word
;
afe_collate	label	word
;
;	cs3 -- begin added country

br437_collate	label	word

;	cs3 -- end additions

		ctable	<,'COLLATE',256>
		db	0,1,2,3,4,5,6,7
		db	8,9,10,11,12,13,14,15
		db	16,17,18,19,20,21,22,23
		db	24,25,26,27,28,29,30,31
		db	" ","!",'"',"#","$","%","&","'"
		db	"(",")","*","+",",","-",".","/"
		db	"0","1","2","3","4","5","6","7"
		db	"8","9",":",";","<","=",">","?"
		db	"@","A","B","C","D","E","F","G"
		db	"H","I","J","K","L","M","N","O"
		db	"P","Q","R","S","T","U","V","W"
		db	"X","Y","Z","[","\","]","^","_"
		db	"`","A","B","C","D","E","F","G"
		db	"H","I","J","K","L","M","N","O"
		db	"P","Q","R","S","T","U","V","W"
		db	"X","Y","Z","{","|","}","~",127
		db	"C","U","E","A","A","A","A","C"
		db	"E","E","E","I","I","I","A","A"
		db	"E","A","A","O","O","O","U","U"
		db	"Y","O","U","$","$","$","$","$"
		db	"A","I","O","U","N","N",166,167
		db	"?",169,170,171,172,"!",'"','"'
		db	176,177,178,179,180,181,182,183
		db	184,185,186,187,188,189,190,191
		db	192,193,194,195,196,197,198,199
		db	200,201,202,203,204,205,206,207
		db	208,209,210,211,212,213,214,215
		db	216,217,218,219,220,221,222,223
		db	224,"S"
		db	226,227,228,229,230,231
		db	232,233,234,235,236,237,238,239
		db	240,241,242,243,244,245,246,247
		db	248,249,250,251,252,253,254,255
	page
	;
; Netherland 437 Collate
;
nl_collate	label	word
		ctable	<,'COLLATE',256>
		db	000,001,002,003,004,005,006,007
		db	008,009,010,011,012,013,014,015
		db	016,017,018,019,020,021,022,023
		db	024,025,026,027,028,029,030,031
		db	032,033,034,035,036,037,038,039
		db	040,041,042,043,044,045,046,047
		db	048,049,050,051,052,053,054,055
		db	056,057,058,059,060,061,062,063
		db	064,065,066,067,068,069,070,071
		db	072,073,074,075,076,077,078,079
		db	080,081,082,083,084,085,086,087
		db	088,089,090,091,092,093,094,095
		db	096,065,066,067,068,069,070,071
		db	072,073,074,075,076,077,078,079
		db	080,081,082,083,084,085,086,087
		db	088,089,090,123,124,125,126,127
		db	128,154,144,065,142,065,143,128
		db	069,069,069,073,073,073,142,143
		db	144,146,146,079,079,079,085,085
		db	152,079,085,155,156,157,158,159
		db	065,073,079,085,165,165,166,167
		db	168,169,170,171,172,173,174,175
		db	176,177,178,179,180,181,182,183
		db	184,185,186,187,188,189,190,191
		db	192,193,194,195,196,197,198,199
		db	200,201,202,203,204,205,206,207
		db	208,209,210,211,212,213,214,215
		db	216,217,218,219,220,221,222,223
		db	224,225,226,227,228,229,230,231
		db	232,233,234,235,236,237,238,239
		db	240,241,242,243,244,245,246,247
		db	248,249,250,251,252,253,254,255
	page
;
;la_collate	 label	 word
;		 ctable  <,'COLLATE',256>
;		 db	 000,001,002,003,004,005,006,007
;		 db	 008,009,010,011,012,013,014,015
;		 db	 016,017,018,019,020,021,022,023
;		 db	 024,025,026,027,028,029,030,031
;		 db	 032,033,034,035,036,037,038,039
;		 db	 040,041,042,043,044,045,046,047
;		 db	 048,049,050,051,052,053,054,055
;		 db	 056,057,058,059,060,061,062,063
;		 db	 064,065,066,067,068,069,070,071
;		 db	 072,073,074,075,076,077,078,079
;		 db	 080,081,082,083,084,085,086,087
;		 db	 088,089,090,091,092,093,094,095
;		 db	 096,065,066,067,068,069,070,071
;		 db	 072,073,074,075,076,077,078,079
;		 db	 080,081,082,083,084,085,086,087
;		 db	 088,089,090,123,124,125,126,127
;		 db	 128,"U","E","A","A","A","A",128
;		 db	 "E","E","E","I","I","I","A","A"
;		 db	 "E","A","A","O","O","O","U","U"
;		 db	 "Y","O","U","$","$","$","$","$"
;		 db	 "A","I","O","U",165,165,166,167
;		 db	 "?",169,170,171,172,"!",'"','"'
;		 db	 176,177,178,179,180,181,182,183
;		 db	 184,185,186,187,188,189,190,191
;		 db	 192,193,194,195,196,197,198,199
;		 db	 200,201,202,203,204,205,206,207
;		 db	 208,209,210,211,212,213,214,215
;		 db	 216,217,218,219,220,221,222,223
;		 db	 224,"S"
;		 db	 226,227,228,229,230,231
;		 db	 232,233,234,235,236,237,238,239
;		 db	 240,241,242,243,244,245,246,247
;		 db	 248,249,250,251,252,253,254,255
	page
la_collate	label	word			  ; new for DOS 4.0, wants same as spain
;
sp_collate	label	word			   ; new for DOS 4.0
		ctable	<,'COLLATE',256>
		db 000,150,151,152,153,154,155,156 ;7
		db 157,158,159,160,161,162,163,164 ;15
		db 165,166,167,168,169,170,171,172 ;23
		db 173,174,175,176,177,178,179,180 ;31
		db 000,060,061,062,063,064,065,000 ;39
		db 066,067,068,069,070,000,071,072 ;47
		db 034,035,036,037,038,039,040,041 ;55
		db 042,043,073,074,075,076,077,078 ;63
		db 079,001,002,003,006,008,009,010 ;71
		db 011,012,013,014,015,017,018,020 ;79
		db 021,022,023,024,026,028,029,030 ;87
		db 031,032,033,080,081,082,083,084 ;95
		db 085,001,002,003,006,008,009,010 ;103
		db 011,012,013,014,015,017,018,020 ;111
		db 021,022,023,024,026,028,029,030 ;119
		db 031,032,033,086,087,088,089,090 ;127
		db 004,028,008,001,001,001,001,004 ;135
		db 008,008,008,012,012,012,001,001 ;143
		db 008,001,001,020,020,020,028,028 ;151
		db 032,020,028,091,092,093,094,095 ;159
		db 001,012,020,028,019,019,001,020 ;167
		db 096,097,098,099,100,101,102,103 ;175
		db 104,105,106,107,108,181,182,183 ;183
		db 184,109,110,111,112,185,186,113 ;191
		db 114,115,116,117,118,119,187,188 ;199
		db 120,121,122,123,124,125,126,189 ;207
		db 190,191,192,193,194,195,196,197 ;215
		db 198,127,128,129,130,199,200,131 ;223
		db 201,025,202,203,204,205,132,206 ;231
		db 207,208,209,210,211,212,213,214 ;239
		db 215,133,216,217,218,219,134,220 ;247
		db 221,222,000,223,224,135,136,225 ;255
	page
;
dk_collate	label	word		; Denmark (dk) 865
		ctable	<,'COLLATE',256>
		db	000,001,002,003,004,005,006,007
		db	008,009,010,011,012,013,014,015
		db	016,017,018,019,020,021,022,023
		db	024,025,026,027,028,029,030,031
		db	032,033,034,035,036,037,038,039
		db	040,041,042,043,044,045,046,047
		db	048,049,050,051,052,053,054,055
		db	056,057,058,059,060,061,062,063
		db	064,065,066,067,068,069,070,071
		db	072,073,074,075,076,077,078,079
		db	080,081,082,083,084,085,086,087
		db	088,089,090,040,047,041,094,095
		db	096,065,066,067,068,069,070,071
		db	072,073,074,075,076,077,078,079
		db	080,081,082,083,084,085,086,087
		db	088,089,090,040,047,041,126,127
		db	067,089,069,065,091,065,093,067
		db	069,069,069,073,073,073,091,093
		db	069,091,091,079,092,079,085,085
		db	089,092,089,092,036,092,036,036
		db	065,073,079,085,078,078,065,079
		db	063,169,170,171,172,033,034,036
		db	176,177,178,179,180,181,182,183
		db	184,185,186,187,188,189,190,191
		db	192,193,194,195,196,197,198,199
		db	200,201,202,203,204,205,206,207
		db	208,209,210,211,212,213,214,215
		db	216,217,218,219,220,221,222,223
		db	224,083,226,227,228,229,230,231
		db	232,233,234,235,236,237,238,239
		db	240,241,242,243,244,245,246,247
		db	248,249,250,251,252,253,254,255
	page
;
no_collate	label	word		; Norway (no) 865
		ctable	<,'COLLATE',256>
		db	000,001,002,003,004,005,006,007
		db	008,009,010,011,012,013,014,015
		db	016,017,018,019,020,021,022,023
		db	024,025,026,027,028,029,030,031
		db	032,033,034,035,036,037,038,039
		db	040,041,042,043,044,045,046,047
		db	048,049,050,051,052,053,054,055
		db	056,057,058,059,060,061,062,063
		db	064,065,066,067,068,069,070,071
		db	072,073,074,075,076,077,078,079
		db	080,081,082,083,084,085,086,087
		db	088,089,090,091,092,093,094,095
		db	096,065,066,067,068,069,070,071
		db	072,073,074,075,076,077,078,079
		db	080,081,082,083,084,085,086,087
		db	088,089,090,123,124,125,126,127
		db	067,089,069,065,091,065,093,067
		db	069,069,069,073,073,073,091,093
		db	069,091,091,079,092,079,085,085
		db	089,092,089,092,036,092,036,036
		db	065,073,079,085,078,078,065,079
		db	063,169,170,171,172,033,034,036
		db	176,177,178,179,180,181,182,183
		db	184,185,186,187,188,189,190,191
		db	192,193,194,195,196,197,198,199
		db	200,201,202,203,204,205,206,207
		db	208,209,210,211,212,213,214,215
		db	216,217,218,219,220,221,222,223
		db	224,083,226,227,228,229,230,231
		db	232,233,234,235,236,237,238,239
		db	240,241,242,243,244,245,246,247
		db	248,249,250,251,252,253,254,255
	page
;
; Finland 437 Collate (same as Sweden)
;
fi_collate	label	word
;
sv_collate	label	word
		ctable	<,'COLLATE',256>
		db	000,001,002,003,004,005,006,007
		db	008,009,010,011,012,013,014,015
		db	016,017,018,019,020,021,022,023
		db	024,025,026,027,028,029,030,031
		db	032,033,034,035,036,037,038,039
		db	040,041,042,043,044,045,046,047
		db	048,049,050,051,052,053,054,055
		db	056,057,058,059,060,061,062,063
		db	064,065,066,067,068,069,070,071
		db	072,073,074,075,076,077,078,079
		db	080,081,082,083,084,085,086,087
		db	088,089,090,091,092,093,094,095
		db	096,065,066,067,068,069,070,071
		db	072,073,074,075,076,077,078,079
		db	080,081,082,083,084,085,086,087
		db	088,089,090,123,124,125,126,127
		db	067,089,069,065,092,065,091,067
		db	069,069,069,073,073,073,092,091
		db	069,092,092,079,093,079,085,085
		db	089,093,089,036,036,036,036,036
		db	065,073,079,085,078,078,166,167
		db	063,169,170,171,172,033,034,034
		db	176,177,178,179,180,181,182,183
		db	184,185,186,187,188,189,190,191
		db	192,193,194,195,196,197,198,199
		db	200,201,202,203,204,205,206,207
		db	208,209,210,211,212,213,214,215
		db	216,217,218,219,220,221,222,223
		db	224,083,226,227,228,229,230,231
		db	232,233,234,235,236,237,238,239
		db	240,241,242,243,244,245,246,247
		db	248,249,250,251,252,253,254,255
	page
;
;  Israel 862 collate
;
is_collate	label	word
		ctable	<,'COLLATE',256>
		db	000,001,002,003,004,005,006,007
		db	008,009,010,011,012,013,014,015
		db	016,017,018,019,020,021,022,023
		db	024,025,026,027,028,029,030,031
		db	032,033,034,035,036,037,038,039
		db	040,041,042,043,044,045,046,047
		db	048,049,050,051,052,053,054,055
		db	056,057,058,059,060,061,062,063
		db	064,065,066,067,068,069,070,071
		db	072,073,074,075,076,077,078,079
		db	080,081,082,083,084,085,086,087
		db	088,089,090,091,092,093,094,095
		db	096,065,066,067,068,069,070,071
		db	072,073,074,075,076,077,078,079
		db	080,081,082,083,084,085,086,087
		db	088,089,090,123,124,125,126,127
		db	128,129,130,131,132,133,134,135
		db	136,137,138,139,140,141,142,143
		db	144,145,146,147,148,149,150,151
		db	152,153,154,036,036,036,036,036
		db	065,073,079,085,078,078,166,167
		db	063,169,170,171,172,033,034,034
		db	176,177,178,179,180,181,182,183
		db	184,185,186,187,188,189,190,191
		db	192,193,194,195,196,197,198,199
		db	200,201,202,203,204,205,206,207
		db	208,209,210,211,212,213,214,215
		db	216,217,218,219,220,221,222,223
		db	224,083,226,227,228,229,230,231
		db	232,233,234,235,236,237,238,239
		db	240,241,242,243,244,245,246,247
		db	248,249,250,251,252,253,254,255
	page
;
; Canada 863 Collate
;
ca_collate	label	word
		ctable	<,'COLLATE',256>
		db	000,001,002,003,004,005,006,007
		db	008,009,010,011,012,013,014,015
		db	016,017,018,019,020,021,022,023
		db	024,025,026,027,028,029,030,031
		db	032,033,034,035,036,037,038,039
		db	040,041,042,043,044,045,046,047
		db	048,049,050,051,052,053,054,055
		db	056,057,058,059,060,061,062,063
		db	064,065,066,067,068,069,070,071
		db	072,073,074,075,076,077,078,079
		db	080,081,082,083,084,085,086,087
		db	088,089,090,091,092,093,094,095
		db	096,065,066,067,068,069,070,071
		db	072,073,074,075,076,077,078,079
		db	080,081,082,083,084,085,086,087
		db	088,089,090,123,124,125,126,127
		db	067,085,069,065,065,065,134,067
		db	069,069,069,073,073,141,065,143
		db	069,069,069,079,069,073,085,085
		db	152,079,085,155,156,085,085,159
		db	160,161,079,085,164,165,166,167
		db	073,169,170,171,172,173,174,175
		db	176,177,178,179,180,181,182,183
		db	184,185,186,187,188,189,190,191
		db	192,193,194,195,196,197,198,199
		db	200,201,202,203,204,205,206,207
		db	208,209,210,211,212,213,214,215
		db	216,217,218,219,220,221,222,223
		db	224,225,226,227,228,229,230,231
		db	232,233,234,235,236,237,238,239
		db	240,241,242,243,244,245,246,247
		db	248,249,250,251,252,253,254,255
	page
;
; Portugal 860 collating
;
po_collate	label	word
		ctable	<,'COLLATE',256>
		db	000,001,002,003,004,005,006,007
		db	008,009,010,011,012,013,014,015
		db	016,017,018,019,020,021,022,023
		db	024,025,026,027,028,029,030,031
		db	032,033,034,035,036,037,038,039
		db	040,041,042,043,044,045,046,047
		db	048,049,050,051,052,053,054,055
		db	056,057,058,059,060,061,062,063
		db	064,065,066,067,068,069,070,071
		db	072,073,074,075,076,077,078,079
		db	080,081,082,083,084,085,086,087
		db	088,089,090,091,092,093,094,095
		db	096,065,066,067,068,069,070,071
		db	072,073,074,075,076,077,078,079
		db	080,081,082,083,084,085,086,087
		db	088,089,090,123,124,125,126,127
		db	067,085,069,065,065,065,065,067
		db	069,069,069,073,079,073,065,065
		db	069,065,069,079,079,079,085,085
		db	073,079,085,036,036,085,036,079
		db	065,073,079,085,078,078,166,167
		db	063,079,170,171,172,033,034,034
		db	176,177,178,179,180,181,182,183
		db	184,185,186,187,188,189,190,191
		db	192,193,194,195,196,197,198,199
		db	200,201,202,203,204,205,206,207
		db	208,209,210,211,212,213,214,215
		db	216,217,218,219,220,221,222,223
		db	224,083,226,227,228,229,230,231
		db	232,233,234,235,236,237,238,239
		db	240,241,242,243,244,245,246,247
		db	248,249,250,251,252,253,254,255
	page
;
sw_collate	label	word
		ctable	<,'COLLATE',256>
		db	001,200,201,202,203,204,205,206
		db	207,208,209,210,211,212,213,214
		db	215,216,217,218,140,141,219,220
		db	221,222,223,224,225,226,227,228
		db	001,060,061,062,063,064,065,066  ;DCR059 CNS ******  ;AN000;
		db	067,068,069,070,071,072,073,074
		db	032,033,034,035,036,037,038,039
		db	040,041,075,076,077,078,079,080
		db	081,002,003,004,005,007,008,009
		db	010,011,012,013,014,015,016,018
		db	019,020,021,022,024,026,027,028
		db	029,030,031,082,083,084,052,085
		db	051,002,003,004,005,007,008,009
		db	010,011,012,013,014,015,016,018
		db	019,020,021,022,024,026,027,028
		db	029,030,031,086,087,088,054,089
		db	004,026,007,002,002,002,002,004
		db	007,007,007,011,011,011,002,002
		db	007,002,002,018,018,018,026,026
		db	030,018,026,111,090,112,150,092
		db	002,011,018,026,017,017,002,018
		db	093,151,095,096,097,098,099,100
		db	101,102,103,104,105,152,153,154
		db	155,107,108,109,110,156,157,113
		db	114,115,116,117,118,119,158,159
		db	120,121,122,123,124,125,126,160
		db	161,162,163,164,165,166,167,168
		db	169,128,129,130,131,170,171,133
		db	172,023,173,174,175,176,134,177
		db	178,179,180,181,182,183,184,185
		db	186,137,187,188,189,190,142,191
		db	143,192,144,193,194,147,148,001
	page
;
be_collate	label	word
		ctable	<,'COLLATE',256>
		db	255,255,255,255,255,255,255,255
		db	255,255,255,255,255,255,255,255
		db	255,255,255,255,255,255,255,255
		db	255,255,255,255,255,255,255,255
		db	255,033,034,035,036,037,038,255
		db	040,041,042,043,044,255,046,047
		db	048,049,050,051,052,053,054,055
		db	056,057,058,059,060,061,062,063
		db	064,065,066,067,068,069,070,071
		db	072,073,074,075,076,077,078,079
		db	080,081,082,083,084,085,086,087
		db	088,089,090,091,092,093,094,095
		db	096,065,066,067,068,069,070,071
		db	072,073,074,075,076,077,078,079
		db	080,081,082,083,084,085,086,087
		db	088,089,090,123,124,125,126,127
		db	067,085,069,065,065,065,065,067
		db	069,069,069,073,073,073,065,065
		db	069,065,065,079,079,079,085,085
		db	089,079,085,155,156,157,158,159
		db	065,073,079,085,078,078,166,167
		db	168,169,170,171,172,173,174,175
		db	255,255,255,255,255,255,255,255
		db	255,255,255,255,255,255,255,255
		db	255,255,255,255,255,255,255,255
		db	255,255,255,255,255,255,255,255
		db	255,255,255,255,255,255,255,255
		db	255,255,255,255,255,255,255,255
		db	224,083,226,227,228,229,230,231
		db	232,233,234,235,236,237,238,239
		db	240,241,242,243,244,245,246,247
		db	248,249,250,251,252,253,255,255
	page
;
; Area South 864 Collate
;
as_collate	label	word
		ctable	<,'COLLATE',256>
		db	000,001,002,003,004,005,006,007
		db	008,009,010,011,012,013,014,015
		db	016,017,018,019,020,021,022,023
		db	024,025,026,027,028,029,030,031
		db	032,033,034,035,036,037,038,039
		db	040,041,042,043,044,045,046,047
		db	048,049,050,051,052,053,054,055
		db	056,057,058,059,060,061,062,063
		db	064,065,066,067,068,069,070,071
		db	072,073,074,075,076,077,078,079
		db	080,081,082,083,084,085,086,087
		db	088,089,090,091,092,093,094,095
		db	096,065,066,067,068,069,070,071
		db	072,073,074,075,076,077,078,079
		db	080,081,082,083,084,085,086,087
		db	088,089,090,123,124,125,126,127
		db	128,129,130,131,132,133,134,135
		db	136,137,138,139,140,141,142,143
		db	144,145,146,147,148,149,150,151
		db	152,233,234,251,255,235,236,179
		db	153,154,182,155,156,184,253,254
		db	188,189,192,194,163,196,198,200
		db	164,165,166,167,168,169,170,171
		db	172,173,224,174,206,208,210,175
		db	157,180,181,183,185,217,186,187
		db	190,191,193,195,197,199,201,202
		db	203,204,205,207,209,211,213,214
		db	215,218,222,158,159,160,161,216
		db	178,225,227,229,237,239,241,243
		db	245,246,250,212,219,221,220,238
		db	177,176,240,242,244,247,249,223
		db	226,231,232,230,228,248,162,255


	page
;
; -----------------------------------------
;
;     Collating Tables for Code Page 850
;
; -----------------------------------------
;
fr850_collate	   label   word
;
ca850_collate	   label   word
;
us850_collate	   label   word
;
uk850_collate	   label   word
;
it850_collate	   label   word
;
;;sp850_collate      label   word  ; spain now has there own
;
is850_collate	   label   word
;
po850_collate	   label   word
;
;;la850_collate      label   word   ; wants same as spain
;
as850_collate	   label   word
;
gr850_collate	   label   word 	 ;omitted tobe consistent with US DCR
;
afe850_collate	   label   word
		ctable	<,'COLLATE',256>
		db	000,001,002,003,004,005,006,007
		db	008,009,010,011,012,013,014,015
		db	016,017,018,019,020,021,022,023
		db	024,025,026,027,028,029,030,031
		db	032,033,034,035,036,037,038,039
		db	040,041,042,043,044,045,046,047
		db	048,049,050,051,052,053,054,055
		db	056,057,058,059,060,061,062,063
		db	064,065,066,067,068,069,070,071
		db	072,073,074,075,076,077,078,079
		db	080,081,082,083,084,085,086,087
		db	088,089,090,091,092,093,094,095
		db	096,065,066,067,068,069,070,071
		db	072,073,074,075,076,077,078,079
		db	080,081,082,083,084,085,086,087
		db	088,089,090,123,124,125,126,127
		db	067,085,069,065,065,065,065,067
		db	069,069,069,073,073,073,065,065
		db	069,065,065,079,079,079,085,085
		db	089,079,085,079,036,079,158,036
		db	065,073,079,085,078,078,166,167
		db	063,169,170,171,172,033,034,034
		db	176,177,178,179,180,065,065,065
		db	184,185,186,187,188,036,036,191
		db	192,193,194,195,196,197,065,065
		db	200,201,202,203,204,205,206,036
		db	068,068,069,069,069,073,073,073
		db	073,217,218,219,220,221,073,223
		db	079,083,079,079,079,079,230,232
		db	232,085,085,085,089,089,238,239
		db	240,241,242,243,244,245,246,247
		db	248,249,250,251,252,253,254,255
	page

;formerly GERMAN COLLATE TABLE DCR0037
;		ctable	<,'COLLATE',256>
;		db	000,001,002,003,004,005,006,007
;		db	008,009,010,011,012,013,014,015
;		db	016,017,018,019,020,021,022,023
;		db	024,025,026,027,028,029,030,031
;		db	032,033,034,035,036,037,038,039
;		db	040,041,042,043,044,045,046,047
;		db	048,049,050,051,052,053,054,055
;		db	056,057,058,059,060,061,062,063
;		db	064,065,066,067,068,069,070,071
;		db	072,073,074,075,076,077,078,079
;		db	080,081,082,083,084,085,086,087
;		db	088,089,090,091,092,093,094,095
;		db	096,065,066,067,068,069,070,071
;		db	072,073,074,075,076,077,078,079
;		db	080,081,082,083,084,085,086,087
;		db	088,089,090,123,124,125,126,127
;		db	067,117,069,065,097,065,065,067
;		db	069,069,069,073,073,073,065,065
;		db	069,065,065,079,111,079,085,085
;		db	089,079,085,079,036,079,158,036
;		db	065,073,079,085,078,078,166,167
;		db	063,169,170,171,172,033,034,034
;		db	176,177,178,179,180,065,065,065
;		db	184,185,186,187,188,036,036,191
;		db	192,193,194,195,196,197,065,065
;		db	200,201,202,203,204,205,206,036
;		db	068,068,069,069,069,073,073,073
;		db	073,217,218,219,220,221,073,223
;		db	079,115,079,079,079,079,230,232
;		db	232,085,085,085,089,089,238,239
;		db	240,241,242,243,244,245,246,247
;		db	248,249,250,251,252,253,254,255
	page
;
nl850_collate	  label   word
		ctable	<,'COLLATE',256>
		db	000,001,002,003,004,005,006,007
		db	008,009,010,011,012,013,014,015
		db	016,017,018,019,020,021,022,023
		db	024,025,026,027,028,029,030,031
		db	032,033,034,035,036,037,038,039
		db	040,041,042,043,044,045,046,047
		db	048,049,050,051,052,053,054,055
		db	056,057,058,059,060,061,062,063
		db	064,065,066,067,068,069,070,071
		db	072,073,074,075,076,077,078,079
		db	080,081,082,083,084,085,086,087
		db	088,089,090,091,092,093,094,095
		db	096,065,066,067,068,069,070,071
		db	072,073,074,075,076,077,078,079
		db	080,081,082,083,084,085,086,087
		db	088,089,090,123,124,125,126,127
		db	067,085,069,065,065,065,143,067
		db	069,069,069,073,073,073,065,143
		db	069,146,146,079,079,079,085,085
		db	152,079,085,079,156,079,158,159
		db	065,073,079,085,165,165,166,167
		db	168,169,170,171,172,173,174,175
		db	176,177,178,179,180,065,065,065
		db	184,185,186,187,188,189,190,191
		db	192,193,194,195,196,197,065,065
		db	200,201,202,203,204,205,206,207
		db	209,209,069,069,069,073,073,073
		db	073,217,218,219,220,221,073,223
		db	079,225,079,079,079,079,230,232
		db	232,085,085,085,089,089,238,239
		db	240,241,242,243,244,245,246,247
		db	248,249,250,251,252,253,254,255
	page
;
dk850_collate	   label   word
		ctable	<,'COLLATE',256>
		db	000,001,002,003,004,005,006,007
		db	008,009,010,011,012,013,014,015
		db	016,017,018,019,020,021,022,023
		db	024,025,026,027,028,029,030,031
		db	032,033,034,035,036,037,038,039
		db	040,041,042,043,044,045,046,047
		db	048,049,050,051,052,053,054,055
		db	056,057,058,059,060,061,062,063
		db	064,065,066,067,068,069,070,071
		db	072,073,074,075,076,077,078,079
		db	080,081,082,083,084,085,086,087
		db	088,089,090,040,047,041,094,095
		db	096,065,066,067,068,069,070,071
		db	072,073,074,075,076,077,078,079
		db	080,081,082,083,084,085,086,087
		db	088,089,090,040,047,041,126,127
		db	067,089,069,065,091,065,093,067
		db	069,069,069,073,073,073,091,093
		db	069,091,091,079,092,079,085,085
		db	089,092,089,092,036,092,158,036
		db	065,073,079,085,078,078,065,079
		db	063,169,170,171,172,033,034,034
		db	176,177,178,179,180,065,065,065
		db	184,185,186,187,188,036,036,191
		db	192,193,194,195,196,197,065,065
		db	200,201,202,203,204,205,206,036
		db	068,068,069,069,069,073,073,073
		db	073,217,218,219,220,221,073,223
		db	079,083,079,079,079,079,230,080
		db	080,085,085,085,089,089,238,239
		db	240,241,242,243,244,245,246,247
		db	248,249,250,251,252,253,254,255
	page
;
no850_collate	   label   word
		ctable	<,'COLLATE',256>
		db	000,001,002,003,004,005,006,007
		db	008,009,010,011,012,013,014,015
		db	016,017,018,019,020,021,022,023
		db	024,025,026,027,028,029,030,031
		db	032,033,034,035,036,037,038,039
		db	040,041,042,043,044,045,046,047
		db	048,049,050,051,052,053,054,055
		db	056,057,058,059,060,061,062,063
		db	064,065,066,067,068,069,070,071
		db	072,073,074,075,076,077,078,079
		db	080,081,082,083,084,085,086,087
		db	088,089,090,091,092,093,094,095
		db	096,065,066,067,068,069,070,071
		db	072,073,074,075,076,077,078,079
		db	080,081,082,083,084,085,086,087
		db	088,089,090,123,124,125,126,127
		db	067,085,069,065,091,065,093,067
		db	069,069,069,073,073,073,091,093
		db	069,091,091,079,092,079,085,085
		db	089,092,089,092,036,092,158,036
		db	065,073,079,085,078,078,065,079
		db	063,169,170,171,172,033,034,034
		db	176,177,178,179,180,065,065,065
		db	184,185,186,187,188,036,036,191
		db	192,193,194,195,196,197,065,065
		db	200,201,202,203,204,205,206,036
		db	068,068,069,069,069,073,073,073
		db	073,217,218,219,220,221,073,223
		db	079,083,079,079,079,079,230,080
		db	080,085,085,085,089,089,238,239
		db	240,241,242,243,244,245,246,247
		db	248,249,250,251,252,253,254,255
	page
;
sv850_collate	  label   word
		ctable	<,'COLLATE',256>
		db	000,001,002,003,004,005,006,007
		db	008,009,010,011,012,013,014,015
		db	016,017,018,019,020,021,022,023
		db	024,025,026,027,028,029,030,031
		db	032,033,034,035,036,037,038,039
		db	040,041,042,043,044,045,046,047
		db	048,049,050,051,052,053,054,055
		db	056,057,058,059,060,061,062,063
		db	064,065,066,067,068,069,070,071
		db	072,073,074,075,076,077,078,079
		db	080,081,082,083,084,085,086,087
		db	088,089,090,091,092,093,094,095
		db	096,065,066,067,068,069,070,071
		db	072,073,074,075,076,077,078,079
		db	080,081,082,083,084,085,086,087
		db	088,089,090,123,124,125,126,127
		db	067,089,069,065,092,065,091,067
		db	069,069,069,073,073,073,092,091
		db	069,092,092,079,093,079,085,085
		db	089,093,089,093,036,093,158,036
		db	065,073,079,085,078,078,166,167
		db	063,169,170,171,172,033,034,034
		db	176,177,178,179,180,065,065,065
		db	184,185,186,187,188,036,036,191
		db	192,193,194,195,196,197,065,065
		db	200,201,202,203,204,205,206,036
		db	068,068,069,069,069,073,073,073
		db	073,217,218,219,220,221,073,223
		db	079,083,079,079,093,093,230,232
		db	232,085,085,085,089,089,238,239
		db	240,241,242,243,244,245,246,247
		db	248,249,250,251,252,253,254,255
	page
;
fi850_collate	   label   word
		ctable	<,'COLLATE',256>
		db	000,001,002,003,004,005,006,007
		db	008,009,010,011,012,013,014,015
		db	016,017,018,019,020,021,022,023
		db	024,025,026,027,028,029,030,031
		db	032,033,034,035,036,037,038,039
		db	040,041,042,043,044,045,046,047
		db	048,049,050,051,052,053,054,055
		db	056,057,058,059,060,061,062,063
		db	064,065,066,067,068,069,070,071
		db	072,073,074,075,076,077,078,079
		db	080,081,082,083,084,085,086,087
		db	088,089,090,091,092,093,094,095
		db	096,065,066,067,068,069,070,071
		db	072,073,074,075,076,077,078,079
		db	080,081,082,083,084,085,086,087
		db	088,089,090,123,124,125,126,127
		db	067,089,069,065,092,065,091,067
		db	069,069,069,073,073,073,092,091
		db	069,092,092,079,093,079,085,085
		db	089,093,089,093,036,093,158,036
		db	065,073,079,085,078,078,166,167
		db	063,169,170,171,172,033,034,034
		db	176,177,178,179,180,065,065,065
		db	184,185,186,187,188,036,036,191
		db	192,193,194,195,196,197,065,065
		db	200,201,202,203,204,205,206,036
		db	068,068,069,069,069,073,073,073
		db	073,217,218,219,220,221,073,223
		db	079,083,079,079,079,079,230,232
		db	232,085,085,085,089,089,238,239
		db	240,241,242,243,244,245,246,247
		db	248,249,250,251,252,253,254,255
	page
;
sw850_collate	   label   word
		ctable	<,'COLLATE',256>

		db	224,225,226,227,228,229,230,231
		db	232,233,234,235,236,237,238,239
		db	240,241,242,243,244,245,246,247
		db	248,249,250,251,252,253,254,255
		db	000,165,168,133,185,134,135,169
		db	170,171,136,158,172,174,175,176
		db	117,118,120,122,124,125,126,127
		db	128,129,177,178,160,161,162,179
		db	137,002,018,020,024,028,038,040
		db	042,044,055,057,059,061,063,067
		db	081,083,085,087,090,094,104,106
		db	108,110,115,138,139,140,191,173
		db	190,003,019,021,025,029,039,041
		db	043,056,045,058,060,062,064,068
		db	082,084,086,088,091,095,105,107
		db	109,111,116,142,143,144,193,157
		db	022,103,031,009,011,007,015,023
		db	035,037,033,053,051,049,010,014
		db	030,017,016,074,076,072,101,099
		db	114,075,102,080,184,079,164,188
		db	005,047,070,097,066,065,149,148
		db	180,154,156,131,130,166,181,182
		db	207,208,209,206,204,004,008,006
		db	153,210,211,212,213,186,187,198
		db	197,202,201,203,205,200,013,012
		db	214,215,216,217,218,219,220,183
		db	027,026,034,036,032,054,046,050
		db	052,199,196,223,221,155,048,222
		db	069,089,073,071,078,077,146,092
		db	093,096,100,098,113,112,145,189
		db	167,159,141,132,151,150,163,194
		db	147,192,195,119,123,121,152,001

;		db	001,200,201,202,203,204,205,206
;		db	207,208,209,210,211,212,213,214
;		db	215,216,217,218,140,141,219,220
;		db	221,222,223,224,225,226,227,228
;		db	001,060,061,062,063,064,065,066
;		db	067,068,069,070,071,072,073,074
;		db	032,033,034,035,036,037,038,039
;		db	040,041,075,076,077,078,079,080
;		db	081,002,003,004,005,007,008,009
;		db	010,011,012,013,014,015,016,018
;		db	019,020,021,022,024,026,027,028
;		db	029,030,031,082,083,084,052,085
;		db	051,002,003,004,005,007,008,009
;		db	010,011,012,013,014,015,016,018
;		db	019,020,021,022,024,026,027,028
;		db	029,030,031,086,087,088,054,089
;		db	004,026,007,002,002,002,002,004
;		db	007,007,007,011,011,011,002,002
;		db	007,002,002,018,018,018,026,026
;		db	030,018,026,018,090,018,091,092
;		db	002,011,018,026,017,017,002,018
;		db	093,094,095,096,097,098,099,100
;		db	101,102,103,104,105,002,002,002
;		db	106,107,108,109,110,111,112,113
;		db	114,115,116,117,118,119,002,002
;		db	120,121,122,123,124,125,126,127
;		db	006,006,007,007,007,011,011,011
;		db	011,128,129,130,131,132,011,133
;		db	018,023,018,018,018,018,134,025
;		db	025,026,026,026,030,030,135,050
;		db	136,137,138,139,140,141,142,055
;		db	143,053,144,145,146,147,148,001
	page
;
be850_collate	label	word
		ctable	<,'COLLATE',256>
		db	255,255,255,255,255,255,255,255
		db	255,255,255,255,255,255,255,255
		db	255,255,255,255,255,255,255,255
		db	255,255,255,255,255,255,255,255
		db	255,033,034,035,036,037,038,255
		db	040,041,042,043,044,255,046,047
		db	048,049,050,051,052,053,054,055
		db	056,057,058,059,060,061,062,063
		db	064,065,066,067,068,069,070,071
		db	072,073,074,075,076,077,078,079
		db	080,081,082,083,084,085,086,087
		db	088,089,090,091,092,093,094,095
		db	096,065,066,067,068,069,070,071
		db	072,073,074,075,076,077,078,079
		db	080,081,082,083,084,085,086,087
		db	088,089,090,123,124,125,126,127
		db	067,085,069,065,065,065,065,067
		db	069,069,069,073,073,073,065,065
		db	069,065,065,079,079,079,085,085
		db	089,079,085,079,156,079,158,159
		db	065,073,079,085,078,164,166,167
		db	168,169,170,171,172,173,174,175
		db	255,255,255,255,255,065,065,065
		db	184,255,255,255,255,189,190,255
		db	255,255,255,255,255,255,065,065
		db	255,255,255,255,255,255,255,207
		db	068,068,069,069,069,073,073,073
		db	073,255,255,255,255,221,073,255
		db	079,083,079,079,079,079,230,084
		db	084,085,085,085,089,089,238,239
		db	255,241,242,243,244,245,246,247
		db	248,249,250,251,252,253,255,255
	page

la850_collate	   label   word 		   ; wants same as spain
;
sp850_collate	   label   word 		   ; new for DOS 4.0
		ctable	<,'COLLATE',256>
		db 000,150,151,152,153,154,155,156 ;7
		db 157,158,159,160,161,162,163,164 ;15
		db 165,166,167,168,169,170,171,172 ;23
		db 173,174,175,176,177,178,179,180 ;31
		db 000,060,061,062,063,064,065,000 ;39
		db 066,067,068,069,070,000,071,072 ;47
		db 034,035,036,037,038,039,040,041 ;55
		db 042,043,073,074,075,076,077,078 ;63
		db 079,001,002,003,006,008,009,010 ;71
		db 011,012,013,014,015,017,018,020 ;79
		db 021,022,023,024,026,028,029,030 ;87
		db 031,032,033,080,081,082,083,084 ;95
		db 085,001,002,003,006,008,009,010 ;103
		db 011,012,013,014,015,017,018,020 ;111
		db 021,022,023,024,026,028,029,030 ;119
		db 031,032,033,086,087,088,089,090 ;127
		db 004,028,008,001,001,001,001,004 ;135
		db 008,008,008,012,012,012,001,001 ;143
		db 008,001,001,020,020,020,028,028 ;151
		db 032,020,028,020,092,020,094,095 ;159
		db 001,012,020,028,019,019,001,020 ;167
		db 096,097,098,099,100,101,102,103 ;175
		db 104,105,106,107,108,001,001,001 ;183
		db 184,109,110,001,001,091,093,113 ;191
		db 114,115,116,117,118,119,187,188 ;199
		db 120,121,122,123,124,125,126,189 ;207
		db 007,007,008,008,008,012,012,012 ;215
		db 012,127,128,129,130,199,012,131 ;223
		db 020,025,020,020,020,020,132,027 ;231
		db 027,028,028,028,032,032,213,214 ;239
		db 000,133,216,217,218,219,134,220 ;247
		db 221,222,000,223,224,135,136,225 ;255

	page
;
jp932_collate	   label   word
		ctable	<,'COLLATE',256>
		db	0,1,2,3,4,5,6,7
		db	8,9,10,11,12,13,14,15
		db	16,17,18,19,20,21,22,23
		db	24,25,26,27,28,29,30,31
		db	" ","!",'"',"#","$","%","&","'"
		db	"(",")","*","+",",","-",".","/"
		db	"0","1","2","3","4","5","6","7"
		db	"8","9",":",";","<","=",">","?"
		db	"@","A","B","C","D","E","F","G"
		db	"H","I","J","K","L","M","N","O"
		db	"P","Q","R","S","T","U","V","W"
		db	"X","Y","Z","[","\","]","^","_"
		db	"`","A","B","C","D","E","F","G"
		db	"H","I","J","K","L","M","N","O"
		db	"P","Q","R","S","T","U","V","W"
		db	"X","Y","Z","{","|","}","~",127
		db	128,193,194,195,196,197,198,199
		db	200,201,202,203,204,205,206,207
		db	208,209,210,211,212,213,214,215
		db	216,217,218,219,220,221,222,223
		db	129,130,131,132,133,189,134,135
		db	136,137,138,139,140,141,142,143
		db	144,145,146,147,148,149,150,151
		db	152,153,154,155,156,157,158,159
		db	160,161,162,163,164,165,166,167
		db	168,169,170,171,172,173,174,175
		db	176,177,178,179,180,181,182,183
		db	184,185,186,187,188,190,191,192
		db	224,225,226,227,228,229,230,231
		db	232,233,234,235,236,237,238,239
		db	240,241,242,243,244,245,246,247
		db	248,249,250,251,252,253,254,255
	page
;
ko934_collate	   label   word
		ctable	<,'COLLATE',256>
		db	0,1,2,3,4,5,6,7
		db	8,9,10,11,12,13,14,15
		db	16,17,18,19,20,21,22,23
		db	24,25,26,27,28,29,30,31
		db	" ","!",'"',"#","$","%","&","'"
		db	"(",")","*","+",",","-",".","/"
		db	"0","1","2","3","4","5","6","7"
		db	"8","9",":",";","<","=",">","?"
		db	"@","A","B","C","D","E","F","G"
		db	"H","I","J","K","L","M","N","O"
		db	"P","Q","R","S","T","U","V","W"
		db	"X","Y","Z","[","\","]","^","_"
		db	"`","A","B","C","D","E","F","G"
		db	"H","I","J","K","L","M","N","O"
		db	"P","Q","R","S","T","U","V","W"
		db	"X","Y","Z","{","|","}","~",127
		db	128,190,191,192,193,194,195,196
		db	197,198,199,200,201,202,203,204
		db	205,206,207,208,209,210,211,212
		db	213,214,215,216,217,218,219,220
		db	221,222,223,224,225,226,227,228
		db	229,230,231,232,233,234,235,236
		db	237,238,239,240,241,242,243,244
		db	245,246,247,248,249,250,251,252
		db	129,130,131,132,133,134,135,136
		db	137,138,139,140,141,142,143,144
		db	145,146,147,148,149,150,151,152
		db	153,154,155,156,157,158,159,160
		db	161,162,163,164,165,166,167,168
		db	169,170,171,172,173,174,175,176
		db	177,178,179,180,181,182,183,184
		db	185,186,187,188,189,253,254,255

	page
;
pr936_collate	   label   word
;
ta938_collate	   label   word
		ctable	<,'COLLATE',256>
		db	0,1,2,3,4,5,6,7
		db	8,9,10,11,12,13,14,15
		db	16,17,18,19,20,21,22,23
		db	24,25,26,27,28,29,30,31
		db	" ","!",'"',"#","$","%","&","'"
		db	"(",")","*","+",",","-",".","/"
		db	"0","1","2","3","4","5","6","7"
		db	"8","9",":",";","<","=",">","?"
		db	"@","A","B","C","D","E","F","G"
		db	"H","I","J","K","L","M","N","O"
		db	"P","Q","R","S","T","U","V","W"
		db	"X","Y","Z","[","\","]","^","_"
		db	"`","A","B","C","D","E","F","G"
		db	"H","I","J","K","L","M","N","O"
		db	"P","Q","R","S","T","U","V","W"
		db	"X","Y","Z","{","|","}","~",127
		db	128,129,130,131,132,133,134,135
		db	136,137,138,139,140,141,142,143
		db	144,145,146,147,148,149,150,151
		db	152,153,154,155,156,157,158,159
		db	160,161,162,163,164,165,166,167
		db	168,169,170,171,172,173,174,175
		db	176,177,178,179,180,181,182,183
		db	184,185,186,187,188,189,190,191
		db	192,193,194,195,196,197,198,199
		db	200,201,202,203,204,205,206,207
		db	208,209,210,211,212,213,214,215
		db	216,217,218,219,220,221,222,223
		db	224,225,226,227,228,229,230,231
		db	232,233,234,235,236,237,238,239
		db	240,241,242,243,244,245,246,247
		db	248,249,250,251,252,253,254,255

	 page
;
;	cs3 -- begin additions for new languages
;
ic_collate      label   word            ; Iceland (ic) 861
		ctable  <,'COLLATE',256>
		db      000,001,002,003,004,005,006,007
		db      008,009,010,011,012,013,014,015
		db      016,017,018,019,020,021,022,023
		db      024,025,026,027,028,029,030,031
		db      032,033,034,035,036,037,038,039
		db      040,041,042,043,044,045,046,047
		db      048,049,050,051,052,053,054,055
		db      056,057,058,059,060,061,062,063
		db      064,065,067,068,069,071,073,074 ;@,A
		db      075,076,078,079,080,081,082,083 ;H
		db      085,086,087,088,089,090,092,093 ;P
		db      094,095,097,040,047,041,094,095 ;X
		db      049,065,067,068,069,071,073,074 ;'
		db      075,076,078,079,080,081,082,083 ;h
		db      085,086,087,088,089,090,092,093 ;p
		db      094,095,097,040,047,041,126,127 ;x
		db      068,091,072,066,066,066,066,068 ;C cedilla
		db      072,072,072,070,070,098,066,066 ;e circ
		db      072,099,099,084,100,098,091,096 ;E acute
		db      096,100,091,084,036,084,036,036 ;y acute
		db      066,077,084,091,066,077,084,091 ;a acute
		db      063,169,170,171,172,033,034,036 ;inverted ?
		db      176,177,178,179,180,181,182,183 ; other stuff follows
		db      184,185,186,187,188,189,190,191
		db      192,193,194,195,196,197,198,199
		db      200,201,202,203,204,205,206,207
		db      208,209,210,211,212,213,214,215
		db      216,217,218,219,220,221,222,223
		db      224,083,226,227,228,229,230,231
		db      232,233,234,235,236,237,238,239
		db      240,241,242,243,244,245,246,247
		db      248,249,250,251,252,253,254,255
	 page

;
yu852_collate    label   word
cs852_collate         label   word
sl852_collate         label   word
hu852_collate         label   word
pl852_collate         label   word
;
		ctable  <,'COLLATE',256>
;
;                       000 001 002 003 004 005 006 007
;                       -------------------------------
		db      000,001,002,003,004,005,006,007


;                       008 009 010 011 012 013 014 015
;                       -------------------------------
		db      008,009,010,011,012,013,014,015
;
;                       016 017 018 019 020 021 022 023
;                       -------------------------------
		db      016,017,018,019,020,021,022,023
;
;                       024 025 026 027 028 029 030 031
;                       -------------------------------
		db      024,025,026,027,028,029,030,031
;
;                            !   "   #   $   %   &   '
;                       -------------------------------
		db      110,111,112,113,114,115,116,117
;
;                        (   )   *   +   ,   -   .   /
;                       -------------------------------
		db      118,119,120,121,122,123,124,125
;
;                        0   1   2   3   4   5   6   7
;                       -------------------------------
		db      100,101,102,103,104,105,106,107
;
;                        8   9   :   ;   <   =   >   ?
;                       -------------------------------
		db      108,109,126,127,128,129,130,131
;
;                        @   A   B   C   D   E   F   G
;                       -------------------------------
		db      132,033,039,040,044,047,052,053
;
;                        H   I   J   K   L   M   N   O
;                       -------------------------------
		db      054,055,058,059,060,064,065,068
;
;                        P   Q   R   S   T   U   V   W
;                       -------------------------------
		db      073,074,075,078,083,086,091,092
;
;                        X   Y   Z   [   \   ]   ^   _
;                       -------------------------------
		db      093,094,096,133,134,135,136,137
;
;                        `   a   b   c   d   e   f   g
;                       -------------------------------
		db      138,033,039,040,044,047,052,053
;
;                        h   i   j   k   l   m   n   o
;                       -------------------------------
		db      054,055,058,059,060,064,065,068
;
;                        p   q   r   s   t   u   v   w
;                       -------------------------------
		db      073,074,075,078,083,086,091,092
;
;                        x   y   z   {   |   }   ~   
;                       -------------------------------
		db      093,094,096,139,140,141,142,032
;
;                                             
;                       -------------------------------
		db      043,089,048,038,035,088,041,043
;
;                                             
;                       -------------------------------
		db      063,051,072,072,057,098,035,041
;
;                                             
;                       -------------------------------
		db      048,061,061,070,071,062,062,082
;
;                                             
;                       -------------------------------
		db      082,071,089,084,084,063,143,042
;
;                                             
;                       -------------------------------
		db      034,056,069,087,036,036,097,097
;
;                             SPC              
;                       -------------------------------
		db      050,050,144,098,042,081,145,146
;
;                                             
;                       -------------------------------
		db      151,152,153,154,155,034,038,049
;
;                                             
;                       -------------------------------
		db      081,156,157,158,159,099,099,160
;
;                                             
;                       -------------------------------
		db      161,162,163,164,165,166,037,037
;
;                                             
;                       -------------------------------
		db      167,168,169,170,171,172,173,147
;
;                                             
;                       -------------------------------
		db      045,045,046,051,046,066,056,057
;
;                                             
;                       -------------------------------
		db      049,174,175,176,177,085,088,178
;
;                                             
;                       -------------------------------
		db      069,079,070,067,067,066,080,080
;
;                                             
;                       -------------------------------
		db      076,087,076,090,095,095,085,180
;
;                                             
;                       -------------------------------
		db      148,181,182,183,184,149,150,185
;
;                                            IGN
;                       -------------------------------
		db      186,187,188,090,077,077,179,255
;
	page
;
;  ***  MODIFIED FOR CP 857  ***  FI 16/03/90
tr857_collate      label   word
;
		ctable  <,'COLLATE',256>
;
;  0
		db      000,001,002,003,004,005,006,007
		db      008,009,010,011,012,013,014,015
;
;  1
		db      016,017,018,019,020,021,022,023
		db      024,025,026,027,028,029,030,031
;
;
;  2                    sp   !   "   #   $   %   &   '
		db      032,040,054,076,070,077,075,053
		db      057,058,073,078,037,036,045,044
;                        (   )   *   +   ,   -   .   /
;
;  3                     0   1   2   3   4   5   6   7
		db      091,092,093,094,095,096,097,098
		db      099,100,039,038,082,083,084,042
;                        8   9   :   ;   <   =   >   ?
;
;  4                     @   A   B   C   D   E   F   G
		db      067,101,102,103,105,106,107,108
		db      110,111,113,114,115,116,117,118
;                        H   I   J   K   L   M   N   O
;
;  5                     P   Q   R   S   T   U   V   W
		db      120,121,122,123,125,126,128,129
		db      130,131,132,059,074,060,048,033
;                        X   Y   Z   [   \   ]   ^   _
;
;  6                     `   a   b   c   d   e   f   g
		db      047,101,102,103,105,106,107,108
		db      110,112,113,114,115,116,117,118
;                        h   i   j   k   l   m   n   o
;
;  7                     p   q   r   s   t   u   v   w
		db      120,121,122,123,125,126,128,129
		db      130,131,132,061,086,062,050,150
;                        x   y   z   {   |   }   ~   
;
;  8                                          
		db      104,127,106,101,101,101,101,104
		db      106,106,106,112,112,111,101,101
;                                             
;
;  9                                          
		db      106,101,101,118,119,118,126,126
		db      112,119,127,118,071,118,124,124
;                                             
;
;  A                                          
		db      101,112,118,126,117,117,109,109
		db      043,066,085,091,091,041,055,056
;                                             
;
;  B               HEX  B0   1   2   3   4   5   6   7
		db      151,152,153,154,155,101,101,101
		db      065,156,157,158,159,069,072,160
;                  HEX  B8   9   A   B   C   D   E   F
;
;  C               HEX  C0   1   2   3   4   5   6   7
		db      161,162,163,164,165,166,101,101
		db      167,168,169,170,171,172,173,068
;                  HEX  C8   9   A   B   C   D   E   F
;
;  D               HEX  D0   1   2   3   4   5   6   7
		db      118,101,106,106,106,032,112,112
		db      112,174,175,176,177,087,112,178
;                  HEX  D8   9   A   B   C   D   E   F
;
;  E               HEX  E0   1   2   3   4   5   6   7
		db      118,123,118,118,118,118,089,032
		db      081,126,126,126,112,131,034,046
;                  HEX  E8   9   A   B   C   D   E   F
;
;  F               HEX  F0   1   2   3   4   5   6   7
		db      035,079,032,091,064,063,080,052
		db      088,049,051,092,094,093,179,090
;                  HEX  F8   9   A   B   C   D   E   F
;
	page
;
;
; Brazil 860 collating
;
br_collate     label word
	       ctable      <,'COLLATE',256>
	       db    000,001,002,003,004,005,006,007
	       db    008,009,010,011,012,013,014,015
	       db    016,017,018,019,020,021,022,023
	       db    024,025,026,027,028,029,030,031
	       db    032,033,034,035,036,037,038,039
	       db    040,041,042,043,044,045,046,047
	       db    048,049,050,051,052,053,054,055
	       db    056,057,058,059,060,061,062,063
	       db    064,065,066,067,068,069,070,071
	       db    072,073,074,075,076,077,078,079
	       db    080,081,082,083,084,085,086,087
	       db    088,089,090,091,092,093,094,095
	       db    096,065,066,067,068,069,070,071
	       db    072,073,074,075,076,077,078,079
	       db    080,081,082,083,084,085,086,087
	       db    088,089,090,123,124,125,126,127
	       db    067,085,069,065,065,065,065,067
	       db    069,069,069,073,079,073,065,065
	       db    069,065,069,079,079,079,085,085
	       db    073,079,085,036,036,085,036,079
	       db    065,073,079,085,078,078,166,167
	       db    063,079,170,171,172,033,034,034
	       db    176,177,178,179,180,181,182,183
	       db    184,185,186,187,188,189,190,191
	       db    192,193,194,195,196,197,198,199
	       db    200,201,202,203,204,205,206,207
	       db    208,209,210,211,212,213,214,215
	       db    216,217,218,219,220,221,222,223
	       db    224,083,226,227,228,229,230,231
	       db    232,233,234,235,236,237,238,239
	       db    240,241,242,243,244,245,246,247
	       db    248,249,250,251,252,253,254,255
	 page
;
br850_collate	label	word		; cs3 *** this may match another

	       ctable      <,'COLLATE',256>
	       db    000,001,002,003,004,005,006,007
	       db    008,009,010,011,012,013,014,015
	       db    016,017,018,019,020,021,022,023
	       db    024,025,026,027,028,029,030,031
	       db    032,033,034,035,036,037,038,039
	       db    040,041,042,043,044,045,046,047
	       db    048,049,050,051,052,053,054,055
	       db    056,057,058,059,060,061,062,063
	       db    064,065,066,067,068,069,070,071
	       db    072,073,074,075,076,077,078,079
	       db    080,081,082,083,084,085,086,087
	       db    088,089,090,091,092,093,094,095
	       db    096,065,066,067,068,069,070,071
	       db    072,073,074,075,076,077,078,079
	       db    080,081,082,083,084,085,086,087
	       db    088,089,090,123,124,125,126,127
	       db    067,085,069,065,065,065,065,067
	       db    069,069,069,073,073,073,065,065
	       db    069,065,065,079,079,079,085,085
	       db    089,079,085,079,036,079,158,036
	       db    065,073,079,085,078,078,166,167
	       db    063,169,170,171,172,033,034,034
	       db    176,177,178,179,180,065,065,065
	       db    184,185,186,187,188,036,036,191
	       db    192,193,194,195,196,197,065,065
	       db    200,201,202,203,204,205,206,036
	       db    068,068,069,069,069,073,073,073
	       db    073,217,218,219,220,221,073,223
	       db    079,083,079,079,079,079,230,232
	       db    232,085,085,085,089,089,238,239
	       db    240,241,242,243,244,245,246,247
	       db    248,249,250,251,252,253,254,255
	 page

ic850_collate         label   word
tr850_collate         label   word
yu850_collate         label   word
cs850_collate         label   word
sl850_collate         label   word
hu850_collate         label   word
pl850_collate         label   word
		ctable  <,'COLLATE',256>
		db      000,001,002,003,004,005,006,007
		db      008,009,010,011,012,013,014,015
		db      016,017,018,019,020,021,022,023
		db      024,025,026,027,028,029,030,031
		db      032,033,034,035,036,037,038,039
		db      040,041,042,043,044,045,046,047
		db      048,049,050,051,052,053,054,055
		db      056,057,058,059,060,061,062,063
		db      064,065,067,068,069,071,073,074 ;@
		db      075,076,078,079,080,081,082,083 ;H
		db      085,086,087,088,089,090,092,093 ;P
		db      094,095,097,040,047,041,094,095 ;X
		db      096,065,067,068,069,071,073,074 ;'
		db      075,076,078,079,080,081,082,083 ;h
		db      085,086,087,088,089,090,092,093 ;p
		db      094,095,097,040,047,041,126,127 ;x
		db      068,091,072,066,066,066,066,068 ;c cedilla
		db      072,072,072,077,077,077,066,066 ;e circ
		db      072,099,099,084,100,084,091,091 ;E acute
		db      096,100,091,084,036,084,158,036 ;y diar
		db      066,077,084,091,082,082,065,084 ;a acute
		db      063,169,170,171,172,033,034,034 ;a underscore
		db      176,177,178,179,180,066,066,066 ;sf1400
		db      184,185,186,187,188,036,036,191 ;copywrite symbol
		db      192,193,194,195,196,197,066,066 ;lower left single
		db      200,201,202,203,204,205,206,036 ;lower left double
		db      070,070,072,072,072,076,077,077 ;eth
		db      077,217,218,219,220,221,077,223 ;I diar
		db      084,067,084,084,084,084,230,098 ;O acute
		db      098,091,091,091,096,096,238,239 ;THORN
		db      240,241,242,243,244,245,246,247 ;sp32
		db      248,249,250,251,252,253,254,255 ;overcircle
	page
;
;	cs3 -- end additions for new languages
;
; ---------------------------------------------------------------
;
;	World Trade Case Mappings
;
; ---------------------------------------------------------------
;
us_ucase	label	word
;
uk_ucase	label	word
;
fr_ucase	label	word
;
gr_ucase	label	word
;
sp_ucase	label	word
;
la_ucase	label	word
;
it_ucase	label	word
;
afe_ucase	label	word
;
as_ucase	label	word
;
jp437_ucase	label	word
;
ko437_ucase	label	word
;
pr437_ucase	label	word
;
ta437_ucase	label	word
;
;	cs3 -- brazil added to this table

br_ucase label word

;	cs3 -- end additions

;
		ctable	<,'UCASE  ',128>
;***CNS PTM2390 table omitted	;AN000;
;***CNS restored for PTM 2575 to establish consistent and maintain 3.3 &
;under compatibility
	       db      128,154,069,065,142,065,143,128
	       db      069,069,069,073,073,073,142,143
	       db      144,146,146,079,153,079,085,085
	       db      089,153,154,155,156,157,158,159
	       db      065,073,079,085,165,165,166,167
	       db      168,169,170,171,172,173,174,175
	       db      176,177,178,179,180,181,182,183
	       db      184,185,186,187,188,189,190,191
	       db      192,193,194,195,196,197,198,199
	       db      200,201,202,203,204,205,206,207
	       db      208,209,210,211,212,213,214,215
	       db      216,217,218,219,220,221,222,223
	       db      224,225,226,227,228,229,230,231
	       db      232,233,234,235,236,237,238,239
	       db      240,241,242,243,244,245,246,247
	       db      248,249,250,251,252,253,254,255
;***CNS PTM2390 table omitted
;**CNS	replacement
;		 db	 067,085,069,065,065,065,065,067  ;AD000;
;		 db	 069,069,069,073,073,073,065,065  ;AD000;
;		 db	 069,146,146,079,079,079,085,085  ;AD000;
;		 db	 089,079,085,079,156,079,158,159  ;AD000;
;		 db	 065,073,079,085,165,165,166,167  ;AD000;
;		 db	 168,169,170,171,172,173,174,175  ;AD000;
;		 db	 176,177,178,179,180,065,065,065  ;AD000;
;		 db	 184,185,186,187,188,189,190,191  ;AD000;
;		 db	 192,193,194,195,196,197,065,065  ;AD000;
;		 db	 200,201,202,203,204,205,206,207  ;AD000;
;		 db	 209,209,069,069,069,073,073,073  ;AD000;
;		 db	 073,217,218,219,220,221,073,223  ;AD000;
;		 db	 079,225,079,079,079,079,230,232  ;AD000;
;		 db	 232,085,085,085,089,089,238,239  ;AD000;
;		 db	 240,241,242,243,244,245,246,247  ;AD000;
;		 db	 248,249,250,251,252,253,254,255  ;AD000;
;
page
;	Canadian French Code Page 863
;
ca_ucase	label	word
		ctable	<,'UCASE  ',128>
		db	067,085,069,065,065,065,134,067
		db	069,069,069,073,073,141,065,143
		db	069,069,069,079,069,073,085,085
		db	152,079,085,155,156,085,085,159
		db	160,161,079,085,164,165,166,167
		db	073,169,170,171,172,173,174,175
		db	176,177,178,179,180,181,182,183
		db	184,185,186,187,188,189,190,191
		db	192,193,194,195,196,197,198,199
		db	200,201,202,203,204,205,206,207
		db	208,209,210,211,212,213,214,215
		db	216,217,218,219,220,221,222,223
		db	224,225,226,227,228,229,230,231
		db	232,233,234,235,236,237,238,239
		db	240,241,242,243,244,245,246,247
		db	248,249,250,251,252,253,254,255
page
;	Denmark (Da) case mapping for 865
;
dk_ucase	label	word
;
;	Norway (No) case mapping for 865
;
no_ucase	label	word
		ctable	<,'UCASE  ',128>
		db	128,154,144,065,142,065,143,128
		db	069,069,069,073,073,073,142,143
		db	144,146,146,079,153,079,085,085
		db	089,153,154,157,156,157,158,159
		db	065,073,079,085,165,165,166,167
		db	168,169,170,171,172,173,174,175
		db	176,177,178,179,180,181,182,183
		db	184,185,186,187,188,189,190,191
		db	192,193,194,195,196,197,198,199
		db	200,201,202,203,204,205,206,207
		db	208,209,210,211,212,213,214,215
		db	216,217,218,219,220,221,222,223
		db	224,225,226,227,228,229,230,231
		db	232,233,234,235,236,237,238,239
		db	240,241,242,243,244,245,246,247
		db	248,249,250,251,252,253,254,255
page
;	Belgium (Be) case mapping for 437
;
be_ucase	label	word
;
;	Finland (Fi) case mapping for 437
;
fi_ucase	label	word
;
;	Sweden (Sv) case mapping
;
sv_ucase	label	word
		ctable	<,'UCASE  ',128>
		db	128,154,144,065,142,065,143,128
		db	069,069,069,073,073,073,142,143
		db	144,146,146,079,153,079,085,085
		db	089,153,154,155,156,157,158,159
		db	065,073,079,085,165,165,166,167
		db	168,169,170,171,172,173,174,175
		db	176,177,178,179,180,181,182,183
		db	184,185,186,187,188,189,190,191
		db	192,193,194,195,196,197,198,199
		db	200,201,202,203,204,205,206,207
		db	208,209,210,211,212,213,214,215
		db	216,217,218,219,220,221,222,223
		db	224,225,226,227,228,229,230,231
		db	232,233,234,235,236,237,238,239
		db	240,241,242,243,244,245,246,247
		db	248,249,250,251,252,253,254,255
page
;	Switzerland case mapping for 437
;
sw_ucase	label	word
		ctable	<,'UCASE  ',128>
		db	128,154,144,065,142,065,143,128
		db	069,069,069,073,073,073,142,143
		db	144,146,146,079,153,079,085,085
		db	089,153,154,155,156,157,158,159
		db	065,073,079,085,165,165,166,167    ;AN000;;DCR 059 CNS ***
		db	168,169,170,171,172,173,174,175
		db	176,177,178,179,180,181,182,183
		db	184,185,186,187,188,189,190,191
		db	192,193,194,195,196,197,198,199
		db	200,201,202,203,204,205,206,207
		db	208,209,210,211,212,213,214,215
		db	216,217,218,219,220,221,222,223
		db	224,225,226,227,228,229,230,231
		db	232,233,234,235,236,237,238,239
		db	240,241,242,243,244,245,246,247
		db	248,249,250,251,252,253,254,255
page
;
;	Netherlands case mapping for 437
;
nl_ucase	label	word
		ctable	<,'UCASE  ',128>
		db	128,085,069,065,065,065,143,128
		db	069,069,069,073,073,073,065,143
		db	069,146,146,079,079,079,085,085
		db	152,079,085,155,156,157,158,159
		db	065,073,079,085,165,165,166,167
		db	168,169,170,171,172,173,174,175
		db	176,177,178,179,180,181,182,183
		db	184,185,186,187,188,189,190,191
		db	192,193,194,195,196,197,198,199
		db	200,201,202,203,204,205,206,207
		db	208,209,210,211,212,213,214,215
		db	216,217,218,219,220,221,222,223
		db	224,225,226,227,228,229,230,231
		db	232,233,234,235,236,237,238,239
		db	240,241,242,243,244,245,246,247
		db	248,249,250,251,252,253,254,255
page
;
;	Portuguese (Po) case mapping
;
po_ucase	label	word
		ctable	<,'UCASE  ',128>
		db	128,154,144,143,142,145,134,128
		db	137,137,146,139,140,152,142,143
		db	144,145,146,140,153,169,150,157
		db	152,153,154,155,156,157,158,159
		db	134,139,159,150,165,165,166,167
		db	168,169,170,171,172,173,174,175
		db	176,177,178,179,180,181,182,183
		db	184,185,186,187,188,189,190,191
		db	192,193,194,195,196,197,198,199
		db	200,201,202,203,204,205,206,207
		db	208,209,210,211,212,213,214,215
		db	216,217,218,219,220,221,222,223
		db	224,225,226,227,228,229,230,231
		db	232,233,234,235,236,237,238,239
		db	240,241,242,243,244,245,246,247
		db	248,249,250,251,252,253,254,255
page
;
;	Is case mapping
;
is_ucase	label	word
		ctable	<,'UCASE  ',128>
		db	128,129,130,131,132,133,134,135
		db	136,137,138,139,140,141,142,143
		db	144,145,146,147,148,149,150,151
		db	152,153,154,155,156,157,158,159
		db	065,073,079,085,165,165,166,167
		db	168,169,170,171,172,173,174,175
		db	176,177,178,179,180,181,182,183
		db	184,185,186,187,188,189,190,191
		db	192,193,194,195,196,197,198,199
		db	200,201,202,203,204,205,206,207
		db	208,209,210,211,212,213,214,215
		db	216,217,218,219,220,221,222,223
		db	224,225,226,227,228,229,230,231
		db	232,233,234,235,236,237,238,239
		db	240,241,242,243,244,245,246,247
		db	248,249,250,251,252,253,254,255
page
;
us850_ucase	label	word
;
afe850_ucase	label	word
;
uk850_ucase	label	word
;
fr850_ucase	label	word
;
it850_ucase	label	word
;
is850_ucase	label	word
;
as850_ucase	label	word
;
po850_ucase	label	word
;
ca850_ucase	label	word
		ctable	<,'UCASE  ',128>
;**CNS replacement
	       db      067,085,069,065,065,065,065,067
	       db      069,069,069,073,073,073,065,065
	       db      069,146,146,079,079,079,085,085
	       db      089,079,085,079,156,079,158,159
	       db      065,073,079,085,165,165,166,167
	       db      168,169,170,171,172,173,174,175
	       db      176,177,178,179,180,065,065,065
	       db      184,185,186,187,188,189,190,191
	       db      192,193,194,195,196,197,065,065
	       db      200,201,202,203,204,205,206,207
	       db      209,209,069,069,069,073,073,073
	       db      073,217,218,219,220,221,073,223
	       db      079,225,079,079,079,079,230,232
	       db      232,085,085,085,089,089,238,239
	       db      240,241,242,243,244,245,246,247
	       db      248,249,250,251,252,253,254,255
;
;***CNS PTM2390 table omitted
;		 db	 128,154,069,065,142,065,143,128    ;AN000;
;		 db	 069,069,069,073,073,073,142,143    ;AN000;
;		 db	 144,146,146,079,153,079,085,085    ;AN000;
;		 db	 089,153,154,155,156,157,158,159    ;AN000;
;		 db	 065,073,079,085,165,165,166,167    ;AN000;
;		 db	 168,169,170,171,172,173,174,175    ;AN000;
;		 db	 176,177,178,179,180,181,182,183    ;AN000;
;		 db	 184,185,186,187,188,189,190,191    ;AN000;
;		 db	 192,193,194,195,196,197,198,199    ;AN000;
;		 db	 200,201,202,203,204,205,206,207    ;AN000;
;		 db	 208,209,210,211,212,213,214,215    ;AN000;
;		 db	 216,217,218,219,220,221,222,223    ;AN000;
;		 db	 224,225,226,227,228,229,230,231    ;AN000;
;		 db	 232,233,234,235,236,237,238,239    ;AN000;
;		 db	 240,241,242,243,244,245,246,247    ;AN000;
;		 db	 248,249,250,251,252,253,254,255    ;AN000;
;***CNS PTM2390 table omitted
;
;;la850_ucase	  label   word	- LA wants same as spain
;
;; sp850_ucase	   label   word - changed for 4.0
;		ctable	<,'UCASE  ',128>
;		db	128,085,069,065,065,065,065,128
;		db	069,069,069,073,073,073,065,065
;		db	069,146,146,079,079,079,085,085
;		db	089,079,085,079,156,079,158,159
;		db	065,073,079,085,165,165,166,167
;		db	168,169,170,171,172,173,174,175
;		db	176,177,178,179,180,065,065,065
;		db	184,185,186,187,188,189,190,191
;		db	192,193,194,195,196,197,065,065
;		db	200,201,202,203,204,205,206,207
;		db	209,209,069,069,069,073,073,073
;		db	073,217,218,219,220,221,073,223
;		db	079,225,079,079,079,079,230,232
;		db	232,085,085,085,089,089,238,239
;		db	240,241,242,243,244,245,246,247
;		db	248,249,250,251,252,253,254,255
;
gr850_ucase	   label   word
		ctable	<,'UCASE  ',128>
		db	067,154,069,065,142,065,065,067
		db	069,069,069,073,073,073,142,065
		db	069,146,146,079,153,079,085,085
		db	089,153,154,079,156,079,158,159
		db	065,073,079,085,165,165,166,167
		db	168,169,170,171,172,173,174,175
		db	176,177,178,179,180,065,065,065
		db	184,185,186,187,188,189,190,191
		db	192,193,194,195,196,197,065,065
		db	200,201,202,203,204,205,206,207
		db	209,209,069,069,069,073,073,073
		db	073,217,218,219,220,221,073,223
		db	079,225,079,079,079,079,230,232
		db	232,085,085,085,089,089,238,239
		db	240,241,242,243,244,245,246,247
		db	248,249,250,251,252,253,254,255
page
;
;	LA case mapping for 850, new for DOS 4.0 to be same as Spain
;
la850_ucase	label	word
;
;	Spain (sp) case mapping for 850, new for DOS 4.0
;
sp850_ucase	label	word
;
;	Belgium (Be) case mapping for 850
;
be850_ucase	   label   word
;
;	Finland (Fi) case mapping for 850
;
fi850_ucase	   label   word
;
;	Sweden (Sv) case mapping for 850
;
sv850_ucase	   label   word
;
;	Denmark (Da) case mapping for 850
;
dk850_ucase	   label   word
;
;	Norway (No) case mapping for 850
;
no850_ucase	   label   word

		ctable	<,'UCASE  ',128>
		db	128,154,144,182,142,183,143,128
		db	210,211,212,216,215,222,142,143
		db	144,146,146,226,153,227,234,235
		db	089,153,154,157,156,157,158,159
		db	181,214,224,233,165,165,166,167
		db	168,169,170,171,172,173,174,175
		db	176,177,178,179,180,181,182,183
		db	184,185,186,187,188,189,190,191
		db	192,193,194,195,196,197,199,199
		db	200,201,202,203,204,205,206,207
		db	209,209,210,211,212,073,214,215
		db	216,217,218,219,220,221,222,223
		db	224,225,226,227,229,229,230,232
		db	232,233,234,235,237,237,238,239
		db	240,241,242,243,244,245,246,247
		db	248,249,250,251,252,253,254,255
page
;	Switzerland (Sw) Case mapping (850)
;
sw850_ucase	  label   word
		ctable	<,'UCASE  ',128>
		db	128,154,144,182,142,183,143,128
		db	210,211,212,216,215,222,142,143
		db	144,146,146,226,153,227,234,235
		db	089,153,154,157,156,157,158,159
		db	181,214,224,233,165,165,166,167 ;DCR059 CNS ** ;AN000;
		db	168,169,170,171,172,173,174,175
		db	176,177,178,179,180,181,182,183
		db	184,185,186,187,188,189,190,191
		db	192,193,194,195,196,197,199,199
		db	200,201,202,203,204,205,206,207
		db	209,209,210,211,212,073,214,215
		db	216,217,218,219,220,221,222,223
		db	224,225,226,227,229,229,230,232
		db	232,233,234,235,237,237,238,239
		db	240,241,242,243,244,245,246,247
		db	248,249,250,251,252,253,254,255
;
;	Netherlands (Nl) case mapping 850
;
nl850_ucase	   label   word
		ctable	<,'UCASE  ',128>
		db	128,085,069,065,065,065,143,128
		db	069,069,069,073,073,073,065,143
		db	069,146,146,079,079,079,085,085
		db	152,079,085,079,156,079,158,159
		db	065,073,079,085,165,165,166,167
		db	168,169,170,171,172,173,174,175
		db	176,177,178,179,180,065,065,065
		db	184,185,186,187,188,189,190,191
		db	192,193,194,195,196,197,065,065
		db	200,201,202,203,204,205,206,207
		db	209,209,069,069,069,073,073,073
		db	073,217,218,219,220,221,073,223
		db	079,225,079,079,079,079,230,232
		db	232,085,085,085,089,089,238,239
		db	240,241,242,243,244,245,246,247
		db	248,249,250,251,252,253,254,255
page
;
;	Japan case mapping 932
;
jp932_ucase	   label   word
;
ko934_ucase	   label   word
;
pr936_ucase	   label   word
;
ta938_ucase	   label   word
		ctable	<,'UCASE  ',128>
		db	128,129,130,131,132,133,134,135
		db	136,137,138,139,140,141,142,143
		db	144,145,146,147,148,149,150,151
		db	152,153,154,155,156,157,158,159
		db	160,161,162,163,164,165,166,167
		db	168,169,170,171,172,173,174,175
		db	176,177,178,179,180,181,182,183
		db	184,185,186,187,188,189,190,191
		db	192,193,194,195,196,197,198,199
		db	200,201,202,203,204,205,206,207
		db	208,209,210,211,212,213,214,215
		db	216,217,218,219,220,221,222,223
		db	224,225,226,227,228,229,230,231
		db	232,233,234,235,236,237,238,239
		db	240,241,242,243,244,245,246,247
		db	248,249,250,251,252,253,254,255
page
; ----------------------------------------------------------------------------

;	cs3 -- begin additions for new languages

page
;
;       Iceland (IC) case mapping for 861
;
ic_ucase        label   word
		ctable  <,'UCASE  ',128>
		db      128,154,144,065,142,065,143,128
		db      069,069,069,139,139,141,142,143
		db      144,146,146,079,153,141,085,151
		db      151,153,154,157,156,157,158,159
		db      164,165,166,167,164,165,166,167
		db      168,169,170,171,172,173,174,175
		db      176,177,178,179,180,181,182,183
		db      184,185,186,187,188,189,190,191
		db      192,193,194,195,196,197,198,199
		db      200,201,202,203,204,205,206,207
		db      208,209,210,211,212,213,214,215
		db      216,217,218,219,220,221,222,223
		db      224,225,226,227,228,229,230,231
		db      232,233,234,235,236,237,238,239
		db      240,241,242,243,244,245,246,247
		db      248,249,250,251,252,253,254,255
		page
;
;
tr850_ucase        label   word
ic850_ucase        label   word
yu850_ucase        label   word
cs850_ucase        label   word
sl850_ucase        label   word
hu850_ucase        label   word
pl850_ucase        label   word
		ctable  <,'UCASE  ',128>
		db      128,154,144,182,142,183,143,128
		db      210,211,212,216,215,222,142,143
		db      144,146,146,226,153,227,234,235
		db      152,153,154,157,156,157,158,159
		db      181,214,224,233,165,165,166,167
		db      168,169,170,171,172,173,174,175
		db      176,177,178,179,180,181,182,183
		db      184,185,186,187,188,189,190,191
		db      192,193,194,195,196,197,199,199
		db      200,201,202,203,204,205,206,207
		db      209,209,210,211,212,213,214,215	
		db      216,217,218,219,220,221,222,223
		db      224,225,226,227,229,229,230,232
		db      232,233,234,235,237,237,238,239
		db      240,241,242,243,244,245,246,247
		db      248,249,250,251,252,253,254,255
;
;tr850_ucase     label   word
		ctable  <,'UCASE  ',128>
;
		db      128,154,144,182,142,183,065,128
		db      210,211,212,216,215,073,142,143
		db      144,146,146,226,153,227,234,235
		db      152,153,154,155,156,157,158,158
		db      181,214,224,233,165,165,166,166
		db      168,169,170,171,172,173,174,175
		db      176,177,178,179,180,181,182,183
		db      184,185,186,187,188,189,190,191
		db      192,193,194,195,196,197,198,199
		db      200,201,202,203,204,205,206,207
		db      208,209,210,211,212,213,214,215
		db      216,217,218,219,220,221,222,223
		db      224,225,226,227,228,229,230,231
		db      232,233,234,235,236,237,238,239
		db      240,241,242,243,244,245,246,247
		db      248,249,250,251,252,253,254,255
	page
;
yu852_ucase     label   word
cs852_ucase     label   word
sl852_ucase     label   word
hu852_ucase     label   word
pl852_ucase     label   word
;
;
	ctable  <,'UCASE  ',128>
;
    db      128,154,144,182,142,222,143,128
    db      157,211,138,138,215,141,142,143
    db      144,145,145,226,153,149,149,151
    db      151,153,154,155,155,157,158,172
    db      181,214,224,233,164,164,166,166
    db      168,168,170,141,172,184,174,175
    db      176,177,178,179,180,181,182,183
    db      184,185,186,187,188,189,189,191
    db      192,193,194,195,196,197,198,198
    db      200,201,202,203,204,205,206,207
    db      209,209,210,211,210,213,214,215
    db      183,217,218,219,220,221,222,223
    db      224,225,226,227,227,213,230,230
    db      232,233,232,235,237,237,221,239
    db      240,241,242,243,244,245,246,247
    db      248,249,250,235,252,252,254,255


		page

;
tr857_ucase     label   word
		ctable  <,'UCASE  ',128>
		db      128,154,144,182,142,183,143,128
		db      210,211,212,216,215,073,142,143
		db      144,146,146,226,153,227,234,235
		db      152,153,154,157,156,157,158,158
		db      181,214,224,233,165,165,166,166
		db      168,169,170,171,172,173,174,175
		db      176,177,178,179,180,181,182,183
		db      184,185,186,187,188,189,190,191
		db      192,193,194,195,196,197,199,199
		db      200,201,202,203,204,205,206,207
		db      208,209,210,211,212,073,214,215
		db      216,217,218,219,220,221,222,223
		db      224,225,226,227,229,229,230,231
		db      232,233,234,235,222,237,238,239
		db      240,241,242,243,244,245,246,247
		db      248,249,250,251,252,253,254,255
page
;
br850_ucase    label word
;
	       ctable      <,'UCASE  ',128>
		db	128,154,144,182,142,183,143,128
		db	210,211,212,216,215,222,142,143
		db	144,146,146,226,153,227,234,235
		db	152,153,154,157,156,157,158,159
		db	181,214,224,233,165,165,166,167
		db      168,169,170,171,172,173,174,175
		db      176,177,178,179,180,181,182,183
		db      184,185,186,187,188,189,190,191
		db	192,193,194,195,196,197,199,199
		db      200,201,202,203,204,205,206,207
		db	209,209,210,211,212,213,214,215
		db      216,217,218,219,220,221,222,223
		db	224,225,226,227,229,229,230,232
		db	232,233,234,235,237,237,238,239
		db      240,241,242,243,244,245,246,247
		db      248,249,250,251,252,253,254,255
page

;	cs3 -- end additions

;
;	World Trade Mono Case Filename Character Tables
;
;		Currently all countries have same (4/14/86)
;
;
; ----------------------------------------------------------------------------
uk_ucfile	label	word
fr_ucfile	label	word
gr_ucfile	label	word
sp_ucfile	label	word
it_ucfile	label	word
sv_ucfile	label	word
dk_ucfile	label	word
sw_ucfile	label	word
no_ucfile	label	word
nl_ucfile	label	word
be_ucfile	label	word
fi_ucfile	label	word
is_ucfile	label	word
ca_ucfile	label	word
as_ucfile	label	word
po_ucfile	label	word
us_ucfile	label	word
la_ucfile	label	word
afe_ucfile	label	word

;	cs3 -- added countries

br_ucfile      label word
tr_ucfile      label word
ic_ucfile      label word

;	cs3 -- end added countries

		ctable	<,'FUCASE ',128>
		db	128,129,130,131,132,133,134,135
		db	136,137,138,139,140,141,142,143
		db	144,145,146,147,148,149,150,151
		db	152,153,154,155,156,157,158,159
		db	160,161,162,163,164,165,166,167
		db	168,169,170,171,172,173,174,175
		db	176,177,178,179,180,181,182,183
		db	184,185,186,187,188,189,190,191
		db	192,193,194,195,196,197,198,199
		db	200,201,202,203,204,205,206,207
		db	208,209,210,211,212,213,214,215
		db	216,217,218,219,220,221,222,223
		db	224,225,226,227,228,229,230,231
		db	232,233,234,235,236,237,238,239
		db	240,241,242,243,244,245,246,247
		db	248,249,250,251,252,253,254,255
	page

;	cs3 -- new ucfile tables for some new countries

br850_ucfile	label	word
ic850_ucfile	label	word
tr850_ucfile	label	word
yu850_ucfile	label	word
cs850_ucfile	label	word
pl850_ucfile	label	word
hu850_ucfile	label	word
sl850_ucfile    label   word

		ctable	<,'FUCASE ',128>
		db	128,154,144,182,142,183,143,128
		db	210,211,212,216,215,222,142,143
		db	144,146,146,226,153,227,234,235
		db	152,153,154,157,156,157,158,159
		db	181,214,224,233,165,165,166,167
		db	168,169,170,171,172,173,174,175
		db	176,177,178,179,180,181,182,183
		db	184,185,186,187,188,189,190,191
		db	192,193,194,195,196,197,199,199
		db	200,201,202,203,204,205,206,207
		db	209,209,210,211,212,213,214,215
		db	216,217,218,219,220,221,222,223
		db	224,225,226,227,229,229,230,232
		db	232,233,234,235,237,237,238,239
		db	240,241,242,243,244,245,246,247
		db	248,249,250,251,252,253,254,255
page
yu_ucfile	label	word
cs_ucfile       label   word
sl_ucfile       label   word
pl_ucfile       label   word
hu_ucfile       label   word

		ctable  <,'FUCASE ',128>
		db	128,154,144,182,142,222,143,128
		db	157,211,138,138,215,141,142,143
		db	144,145,145,226,153,149,149,151
		db	151,153,154,155,155,157,158,172
		db	181,214,224,233,164,164,166,166
		db	168,168,170,141,172,184,174,175
		db	176,177,178,179,180,181,182,183
		db	184,185,186,187,188,189,189,191
		db	192,193,194,195,196,197,198,198
		db	200,201,202,203,204,205,206,207
		db	209,209,210,211,210,213,214,215
		db	183,217,218,219,220,221,222,223
		db	224,225,226,227,227,213,230,230
		db	232,233,232,235,237,237,221,239
		db	240,241,242,243,244,245,246,247
		db	248,249,250,235,252,252,254,255
	page
;

;	cs3 -- end additions

; ----------------------------------------------------------------------------
;
;	World Trade Valid Filename Character Tables
;
;		Currently all countries have same (4/14/86)
;
;
; ----------------------------------------------------------------------------
uk_flist	label	word
fr_flist	label	word
gr_flist	label	word
sp_flist	label	word
it_flist	label	word
sv_flist	label	word
dk_flist	label	word
sw_flist	label	word
no_flist	label	word
nl_flist	label	word
be_flist	label	word
fi_flist	label	word
is_flist	label	word
ca_flist	label	word
as_flist	label	word
po_flist	label	word
us_flist	label	word
la_flist	label	word
afe_flist	label	word
jp437_flist	label	word
jp932_flist	label	word
ko437_flist	label	word
ko934_flist	label	word
pr437_flist	label	word
pr936_flist	label	word
ta437_flist	label	word
ta938_flist	label	word

;	cs3 -- begin additions

br_flist	 label word
ic_flist        label   word
tr_flist        label   word
yu_flist        label   word
cs_flist        label   word
sl_flist        label   word
pl_flist        label   word
hu_flist        label   word

;	cs3 -- end additions

		ctable	<,'FCHAR  ',fclend-fclbegin>
fclbegin	label	word
		db	1,0,255 			; include all
		db	0,0,20h 			; exclude 0 - 20h
		db	2,14,'."/\[]:|<>+=;,'           ; exclude 14 special chars
fclend		label	word
	page
; ----------------------------------------------------------------------------
;
;	World Trade DBCS Tables
;
;	    Currently all countries have same (4/14/86)
;
;
; ----------------------------------------------------------------------------
;					;***CNS
uk_dbcs 	label	word		;AN000;
fr_dbcs 	label	word		;AN000;
gr_dbcs 	label	word		;AN000;
sp_dbcs 	label	word		;AN000;
it_dbcs 	label	word		;AN000;
sv_dbcs 	label	word		;AN000;
dk_dbcs 	label	word		;AN000;
sw_dbcs 	label	word		;AN000;
no_dbcs 	label	word		;AN000;
nl_dbcs 	label	word		;AN000;
be_dbcs 	label	word		;AN000;
fi_dbcs 	label	word		;AN000;
is_dbcs 	label	word		;AN000;
ca_dbcs 	label	word		;AN000;
as_dbcs 	label	word		;AN000;
po_dbcs 	label	word		;AN000;
us_dbcs 	label	word		;AN000;
la_dbcs 	label	word		;AN000;
afe_dbcs	label	word		;AN000;
jp437_dbcs	label	word		;AN000;
ko437_dbcs	label	word		;AN000;
pr437_dbcs	label	word		;AN000;
ta437_dbcs	label	word		;AN000;

;	cs3 -- begin additions for new languages

br_dbcs		label	word
ic_dbcs         label   word
tr_dbcs         label   word
yu_dbcs         label   word
cs_dbcs         label   word
sl_dbcs         label   word
pl_dbcs         label   word
hu_dbcs         label   word

;	cs3 -- end additions

		ctable	<,'DBCS   ',dbcsterm-dbcsbegin>         ;AN000;
dbcsbegin	label	word					;AN000;
dbcsterm	db	0,0					;AN000;
dbcsend 	label	word					;AN000;
;
;    Japan DBCS lead byte table
;
jp932_dbcs	label	word					;AN000;
		ctable	<,'DBCS   ',db932end-db932bgn>          ;AN000;
db932bgn	label	word					;AN000;
		db	081h,09Fh				;AN000;
		db	0E0h,0FCh				;AN000;
db932term	db	000h,000h				;AN000;
db932end	equ	$					;AN000;
;
;    Korea DBCS lead byte table
;
ko934_dbcs	label	word					;AN000;
		ctable	<,'DBCS   ',db934end-db934bgn>          ;AN000;
db934bgn	label	word					;AN000;
		db	081h,0BFh				;AN000;
db934term	db	000h,000h				;AN000;
db934end	equ	$					;AN000;
;
;    PRC and Taiwan DBCS lead byte table
;
pr936_dbcs	label	word					;AN000;
;cs3 ta938_dbcs	label	word					;AN000;
		ctable	<,'DBCS   ',db936end-db936bgn>          ;AN000;
db936bgn	label	word					;AN000;
		db	081h,0FCh				;AN000;
db936term	db	000h,000h				;AN000;
db936end	equ	$					;AN000;

;	cs3 -- separate entry for taiwan 938 dbcs

ta938_dbcs	label	word					;AN000;
		ctable	<,'DBCS   ',ta938end-ta938bgn>          ;AN000;
ta938bgn	label	word					;AN000;
		db	081h,0FDh				;AN000;
ta938term	db	000h,000h				;AN000;
ta938end	equ	$					;AN000;

;	cs3 -- end added section

	include	copyrigh.inc

; ---------------------------------------------------------------
;
;		END OF CDI SEGMENT
;
; ---------------------------------------------------------------


dseg	ends
	end

=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\ansi\ansiinit.asm ===
PAGE	,132
TITLE	ANSI Console device CON$INIT routine

;******************************************************************************

;  Change Log:

;    Date    Who   #			  Description
;  --------  ---  ---  ------------------------------------------------------
;  06/05/90  MKS  C03  Bug#234.  ANSI was not recognizing the presence of a
;		       VGA if there was another video board in the system.
;******************************************************************************



;  MODULE_NAME: CON$INIT

;  FUNCTION:
;    THIS PROCEDURE PERFORMS ALL NECESSARY INITIALIZATION ROUTINES
;  FOR ANSI.SYS.

;  THIS ROUTINE WAS SPLIT FROM THE ORIGINAL ANSI.ASM SOURCE FILE
;  FOR RELEASE 4.00 OF DOS.  ALL CHANGED LINES HAVE BEEN MARKED WITH
; . NEW PROCS HAVE BEEN MARKED AS SUCH.


; P1767 VIDEO_MODE_TABLE not initialized correctly	   10/16/87 J.K.
; P2617 Order dependecy problem with Display.sys		   11/23/87 J.K.
; D479  An option to disable the extended keyboard functions 02/12/88 J.K.
; D493 New INIT request structure for error message	   02/25/88 J.K.
; P5699 Moving selecting alternate print screen routine to only when it
; 10/26/88    is needed.  OEM EGA cards don't support the call it, so they
; K. Sayers   couldn't (shift) print screen at all.
;-------------------------------------------------------------------------------

INCLUDE	ANSI.INC			; equates and strucs

PUBLIC	CON$INIT		


CODE	SEGMENT	PUBLIC	BYTE
	ASSUME	CS:CODE,DS:CODE

EXTRN	VIDEO_MODE_TABLE:BYTE
EXTRN	FUNC_INFO:BYTE
EXTRN	HDWR_FLAG:WORD
EXTRN	VIDEO_TABLE_MAX:ABS
EXTRN	SCAN_LINES:BYTE
EXTRN	PTRSAV:DWORD
EXTRN	PARSE_PARM:NEAR
EXTRN	ERR2:NEAR
EXTRN	EXT_16:BYTE
EXTRN	BRKKY:NEAR
EXTRN	COUT:NEAR
EXTRN	BASE:WORD
EXTRN	MODE:BYTE
EXTRN	MAXCOL:BYTE
EXTRN	EXIT:NEAR
EXTRN	MAX_SCANS:BYTE
EXTRN	ROM_INT10:WORD
EXTRN	INT10_COM:NEAR
EXTRN	ROM_INT2F:WORD
EXTRN	INT2F_COM:NEAR
EXTRN	ABORT:BYTE
EXTRN	Display_Loaded_Before_me:byte	;Defined in IOCTL.ASM
EXTRN	Switch_K:Byte
EXTRN	fhavek09:BYTE			; M006
EXTRN	Switch_S:BYTE			; M008

ifdef	DBCS
EXTRN	DBCSLeadByteTable:dword
endif


INCLUDE	ANSIVID.INC			; video tables data

CON$INIT:
	lds	bx,cs:[PTRSAV]		; establish addressability to request header	
	lds	si,[BX].ARG_PTR		; ds:SI now points to rest of DEVICE=statement
	call	PARSE_PARM		; parse DEVICE= command line
	jnc	CONT_INIT		; no error in parse...continue install
	lds	bx,cs:[PTRSAV]		; prepare to abort install			 
	xor	ax,ax			;						 
	mov	[BX].NUM_UNITS,al	; set number of units to zero		 
	mov	[BX].END_ADDRESS_O,ax	; set ending address offset to 0		 
	mov	[BX].END_ADDRESS_S,cs	; set ending address segment to CS		 
	mov	word ptr [bx].CONFIG_ERRMSG, -1 ; Let IBMBIO display "Error in CONFIG.SYS..".
	mov	ax,UNKNOWN_CMD		; set error in status			 
	mov	WORD PTR [BX].STATUS,ax ; set error status				 
	jmp	ERR2			; prepare to exit

CONT_INIT:			
	push	cs		
	pop	ds			; restore DS to ANSI segment
	mov	ax,ROM_BIOS	
	mov	es,ax			; ES now points to BIOS data area

	cmp	Switch_S,OFF		; M008
	jz	noscreensizesw		; M008

	mov	BYTE PTR es:[84h],24	; M008 ; Use default value

noscreensizesw:				; M008

	mov	ah,es:[KBD_FLAG_3]	; load AH with KBD_FLAG_3

	test	ah,EXT16_FLAG		; if extended Int16 available
	jz	tlab01
	cmp	Switch_K,OFF		; and user didn't disable it
	jnz	tlab01

	mov	EXT_16,ON		; then enable extended int16
tlab01:
	call	DET_HDWR		; procedure to determine video hardware status
	call	LOAD_INT10		; load interrupt 10h handler
	call	LOAD_INT2F		; load interrupt 2Fh handler

; M006 - begin
	push	ds
	pop	es
	xor	di,di			; es:di points to begining of driver

	mov	ax,4101h		; wait for bh=es:[di]
	mov	bl,1			; wait for 1 clock tick
	mov	bh,byte ptr es:[di]
	stc				; Assume we will fail
	int	15h
	jc	CheckColor
	mov	fhavek09,ON		; remember we have a k09 type
CheckColor:
; M006 - end

	int	11h
	and	al,00110000b
	cmp	al,00110000b
	jnz	iscolor
	mov	[base],0b000h		;look for bw card
iscolor:
	cmp	al,00010000b		;look for 40 col mode
	ja	setbrk
	mov	[mode],0
	mov	[maxcol],39

setbrk:
	xor	bx,bx
	mov	ds,bx
	mov	bx,BRKADR
	mov	WORD PTR [BX],OFFSET BRKKY
	mov	WORD PTR [BX+2],cs

	mov	bx,29H*4
	mov	WORD PTR [BX],OFFSET COUT
	mov	WORD PTR [BX+2],cs

ifdef DBCS
	mov	ax,6300h
	int	21h			; get DBCS lead byte table
	mov	word ptr cs:DBCSLeadByteTable,si
	mov	word ptr cs:DBCSLeadByteTable+2,ds
endif

	lds	bx,cs:[PTRSAV]
	mov	WORD PTR [BX].TRANS,OFFSET CON$INIT	;SET BREAK ADDRESS
	mov	[BX].TRANS+2,cs
	jmp	EXIT




;	PROCEDURE_NAME: DET_HDWR

;	FUNCTION:
;	THIS CODE DETERMINES WHAT VIDEO HARDWARE IS AVAILABLE.	THIS INFORMATION
;	IS USED TO LOAD APPROPRIATE VIDEO TABLES INTO MEMORY FOR USE IN THE
;	GENERIC IOCTL.

;	AT ENTRY:

;	AT EXIT:
;	NORMAL: FLAG WORD WILL CONTAIN BITS SET FOR THE APPROPRIATE
;		TABLES. IN ADDITION, FOR VGA SUPPORT, A FLAG BYTE
;		WILL CONTAIN THE AVAILABLE SCAN LINE SETTINGS FOR THE
;		INSTALLED ADAPTER.
;		VIDEO TABLES WILL BE LOADED INTO MEMORY REFLECTING
;		APPLICABLE MODE SETTINGS AND SCREEN LINE LENGTHS.

;	ERROR:	N/A



DET_HDWR	PROC	NEAR
	mov	ah,GET_SYS_ID		; see if this is a Convertible
	int	15h

	cmp	es:[BX].MODEL_BYTE,LCD_MODEL	; and it has an LCD attached
	jnz	tlab04

	mov	ah,GET_STATUS		; system status will tell us
	int	15h

	test	al,1			; if bit 0 = 0 then LCD..
	jnz	tlab04

	or	HDWR_FLAG,LCD_ACTIVE	; so ...set hdwr flag and...
	lea	si,COLOR_TABLE
	mov	cx,COLOR_NUM		; load color table (for LCD)
	call	LOAD_TABLE
	lea	si,MONO_TABLE		; and mono table
	mov	cx,MONO_NUM
	call	LOAD_TABLE
	jmp	short tlab05

;	not LCD... check for CGA and mono

tlab04:
	mov	ax,MONO_ADDRESS		; write to mono buffer to see if present
	call	CHECK_BUF

	cmp	ah,al
	jnz	tlab03			; if present then,

	or	HDWR_FLAG,MONO_ACTIVE	; set hdwr flag and..
	lea	si,MONO_TABLE
	mov	cx,MONO_NUM		; load mono table
	call	LOAD_TABLE

tlab03:

	mov	ax,COLOR_ADDRESS	; write to CGA buffer to see if present
	call	CHECK_BUF
	cmp	ah,al
	jnz	tlab02			; if present then,

	or	HDWR_FLAG,CGA_ACTIVE	; set hdwr flag and...
	lea	si,COLOR_TABLE
	mov	cx,COLOR_NUM		; load color table
	call	LOAD_TABLE

tlab02:

tlab05:
	push	cs			; setup addressiblity for
	pop	es			;	functionality call

	xor	ax,ax
	mov	ah,FUNC_call		; functionality call
	xor	bx,bx 			; implementation type 0
	lea	DI,FUNC_INFO		; block to hold data
	int	10H

	cmp	al,FUNC_call		; if call supported, then...
	jne	tlab11

	mov	ax,1A00h		; alternate check for VGA	;C03
	int	10h			; C03

	cmp	bl,8			; test for color VGA or mono VGA
	jz	tlab08
	cmp	bl,7
	jnz	tlab09
tlab08:

	or	HDWR_FLAG,VGA_ACTIVE	; yes ....so
	lea	si,COLOR_TABLE		; set hdwr flag and...
	mov	cx,COLOR_NUM		; load color table +..
	call	LOAD_TABLE
	lea	si,VGA_TABLE		; load VGA table
	mov	cx,VGA_NUM
	call	LOAD_TABLE

	jmp	short tlab07

;	not VGA, must be MCGA

tlab09:
	cmp	[DI].ACTIVE_DISPLAY,MOD30_MONO
	jz	tlab06
	cmp	[DI].ACTIVE_DISPLAY,MOD30_COLOR
	jz	tlab06
	cmp	[DI].ALT_DISPLAY,MOD30_MONO
	jz	tlab06
	cmp	[DI].ALT_DISPLAY,MOD30_COLOR
	jnz	tlab07

tlab06:
	or	HDWR_FLAG,MCGA_ACTIVE	; so...set hdwr flag and...
	lea	si,COLOR_TABLE
	mov	cx,COLOR_NUM		; load color table +..
	call	LOAD_TABLE
	lea	si,MCGA_TABLE		; load MCGA table
	mov	cx,MCGA_NUM
	call	LOAD_TABLE

tlab07:
	mov	al,[DI].CURRENT_SCANS	; copy current scan line setting..
	mov	MAX_SCANS,al 		; as maximum text mode scan setting.
	les	DI,[DI].STATIC_ADDRESS	; point to static functionality table
	mov	al,es:[DI].SCAN_TEXT	; load available scan line flag byte..
	mov	SCAN_LINES,al		; and store it in resident data.

	jmp	short DET_HDWR_DONE

;	call not supported, try EGA

tlab11:
	mov	ah,alT_SELECT		; alternate select call
	mov	BL,EGA_INFO		; get EGA information subcall
	int	10H

	cmp	bl,EGA_INFO		; see if call was valid
	jz	DET_HDWR_DONE

	cmp	bh,MONOCHROME		; yes, check for monochrome
	jnz	tlab17

	or	HDWR_FLAG,E5151_ACTIVE	; ..5151 found so set hdwr flag and..
	lea	si,EGA_5151_TABLE
	mov	cx,EGA_5151_NUM		; load 5151 table.
	call	LOAD_TABLE

	jmp	short DET_HDWR_DONE

tlab17:
	and	CL,0FH			; clear upper nibble of switch setting byte

	cmp	cl,9			; test for switch settings of 5154
	jz	tlab13
	cmp	cl,3
	jnz	tlab14
tlab13:

	or	HDWR_FLAG,E5154_ACTIVE	; so..set hdwr flag and...
	lea	si,COLOR_TABLE
	mov	cx,COLOR_NUM		; load color table +..
	call	LOAD_TABLE
	lea	si,EGA_5154_TABLE	; load 5154 table
	mov	cx,EGA_5154_NUM
	call	LOAD_TABLE

	jmp	short DET_HDWR_DONE

;	5154 not found, must be 5153

tlab14:
	or	HDWR_FLAG,E5153_ACTIVE	; so..set hdwr flag and...
	lea	si,COLOR_TABLE
	mov	cx,COLOR_NUM		; load color table +..
	call	LOAD_TABLE
	lea	si,EGA_5153_TABLE	; load 5153 table
	mov	cx,EGA_5153_NUM
	call	LOAD_TABLE

DET_HDWR_DONE:
	ret
DET_HDWR	ENDP




; PROCEDURE_NAME: CHECK_BUF

; FUNCTION:
; THIS PROCEDURE WRITES TO THE VIDEO BUFFER AND READS THE DATA BACK
; AGAIN TO DETERMINE THE EXISTANCE OF THE VIDEO CARD.

; AT ENTRY:

; AT EXIT:
;	NORMAL: AH EQ AL IF BUFFER PRESENT
;		AH NE AL IF NO BUFFER

;	ERROR: N/A



CHECK_BUF PROC	NEAR			; write to video buffer to see if it is present

	push	ds
	mov	ds,ax			; load DS with address of buffer
	mov	CH,ds:0			; save buffer information (if present)
	mov	al,55H 			; prepare to write sample data
	mov	ds:0,al			; write to buffer
	push	BX			; terminate the bus so that lines..
	pop	BX			; are reset
	mov	ah,ds:0			; bring sample data back...
	mov	ds:0,CH			; repair damage to buffer
	pop	ds
	ret

CHECK_BUF ENDP



; PROCEDURE_NAME: LOAD_TABLE

; FUNCTION:
; THIS PROCEDURE COPIES ONE OF THE VIDEO TABLES INTO RESIDENT DATA.
; IT MAY BE REPEATED TO LOAD SEVERAL TABLES INTO THE SAME DATA SPACE.
; MATCHING MODES WILL BE OVERWRITTEN...THEREFORE..CARE MUST BE TAKEN
; IN LOAD ORDERING.

; AT ENTRY:
;	SI: POINTS TO TOP OF TABLE TO COPY
;	CX: NUMBER OF RECORDS TO COPY

; AT EXIT:
;	NORMAL: TABLE POINTED TO BY SI IS COPIED INTO RESIDENT DATA AREA

;	ERROR: N/A



LOAD_TABLE PROC	NEAR
	push	DI			; save DI
	push	es			; and ES
	push	cs			; setup ES to code segment
	pop	es			
	lea	DI,VIDEO_MODE_TABLE	; point DI to resident video table

while01:
	cmp	cx,0			; do for as many records as there are
	jz	while01_exit
	cmp	di,VIDEO_TABLE_MAX	; check to ensure other data not overwritten
	jge	while01_exit		; cas --- signed compare!!!

	mov	al,[DI].V_MODE		; prepare to check resident table

	cmp	al,UNOCCUPIED		; if this spot is occupied
	jz	tlab20
	cmp	al,[si].V_MODE		; and is not the same mode then
	jz	tlab20

	add	DI,TYPE MODE_TABLE	; do not touch...go to next mode

	jmp	short while01

;	can write at this location

tlab20:
	push	cx			; save record count
	mov	cx,TYPE MODE_TABLE	; load record length
	rep	movsb			; copy record to resident data
	lea	DI,VIDEO_MODE_TABLE	; Set DI to the top of the target again.
	pop	cx			; restore record count and..
	dec	cx			; decrement

	jmp	short while01

while01_exit:
	pop	es			; restore..
	pop	DI			; registers
	ret
LOAD_TABLE ENDP




; PROCEDURE_NAME: LOAD_INT10

; FUNCTION:
; THIS PROCEDURE LOADS THE INTERRUPT HANDLER FOR INT10H

; AT ENTRY:

; AT EXIT:
;	NORMAL: INTERRUPT 10H VECTOR POINTS TO INT10_COM. OLD INT 10H
;		VECTOR STORED.

;	ERROR:	N/A



LOAD_INT10 PROC	NEAR
	push	es
	xor	ax,ax 			; point ES to low..
	mov	es,ax	 		; memory.
	mov	cx,es:WORD PTR INT10_LOW; store original..
	mov	cs:ROM_INT10,cx		; interrupt 10h..
	mov	cx,es:WORD PTR INT10_HI	; location..
	mov	cs:ROM_INT10+2,cx
	cli
	mov	es:WORD PTR INT10_LOW,OFFSET INT10_COM ; replace vector..
	mov	es:WORD PTR INT10_HI,cs	; with our own..
	sti
	mov	ax, DISPLAY_CHECK	;DISPLAY.SYS already loaded?
	int	2fh
	cmp	al, INSTALLED
	jne	L_INT10_Ret
	mov	cs:Display_Loaded_Before_Me,1
L_INT10_Ret:
	pop	es
	ret
LOAD_INT10 ENDP




; PROCEDURE_NAME: LOAD_INT2F

; FUNCTION:
; THIS PROCEDURE LOADS THE INTERRUPT HANDLER FOR INT2FH

; AT ENTRY:

; AT EXIT:
;	NORMAL: INTERRUPT 2FH VECTOR POINTS TO INT2F_COM. OLD INT 2FH
;		VECTOR STORED.

;	ERROR:	N/A



LOAD_INT2F PROC	NEAR
	push	es
	xor	ax,ax 			; point ES to low..
	mov	es,ax 			; memory.
	mov	ax,es:WORD PTR INT2F_LOW; store original..
	mov	cs:ROM_INT2F,ax		; interrupt 2Fh..
	mov	cx,es:WORD PTR INT2F_HI	; location..
	mov	cs:ROM_INT2F+2,cx
	or	ax,cx 			; check if old int2F is 0
	jnz	tlab21
	mov	ax,OFFSET ABORT		; yes....point to..
	mov	cs:ROM_INT2F,ax		; IRET.
	mov	ax,cs
	mov	cs:ROM_INT2F+2,ax

tlab21:
	cli
	mov	es:WORD PTR INT2F_LOW,OFFSET INT2F_COM	; replace vector..
	mov	es:WORD PTR INT2F_HI,cs	; with our own..
	sti
	pop	es
	ret
LOAD_INT2F ENDP


CODE	ENDS
	END

=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\country\mkcntry.inc ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
;
;        include file for create cdi file
;
PTRCNT          EQU     1               ; NUMBER OF POINTERS
CIPTYPE         EQU     1               ; TYPE FOR COUNTRY INFO POINTER
; CNTRYCNT        EQU     18              ; NUMBER OF COUNTRIES SUPPORTED
HR12            EQU     0               ; 12 HOUR TIME FORMAT
HR24            EQU     1               ; 24 HOUR TIME FORMAT


;
; entry type symbols
;
SETCOUNTRYINFO  EQU     1
SETUCASE        EQU     2
SETLCASE        EQU     3
SETUCASEFILE    EQU     4
SETFILELIST     EQU     5
SETCOLLATE      EQU     6
SETDBCS         EQU     7


CDATAITEMS      EQU     SETDBCS - 1     ; NUMBER OF ENTRIES IN COUNTRY DATA


;
; country id's
;
CID_UK          EQU     044             ; United Kingdom
CID_FR          EQU     033             ; France
CID_GR          EQU     049             ; Germany
CID_SP          EQU     034             ; Spain
CID_IT          EQU     039             ; Italy
CID_SV          EQU     046             ; Sweden
CID_AFE         EQU     061             ; International English
CID_DK          EQU     045             ; Denmark
CID_SW          EQU     041             ; Switzerland
CID_NO          EQU     047             ; Norway
CID_NL          EQU     031             ; Netherlands
CID_BE          EQU     032             ; Belgium
CID_FI          EQU     358             ; Finland
CID_US          EQU     001             ; United States
CID_IS          EQU     972             ; Israel
CID_CA          EQU     002             ; Canadian French
CID_AS          EQU     785             ; Area South (Saudi Arabia)
CID_PO          EQU     351             ; Portugal
CID_LA          EQU     003             ; Latin America
CID_BR          EQU     055             ; Brazil
CID_IC          EQU     354             ; Iceland
CID_TR          EQU     090             ; Turkey
CID_YU          EQU     038             ; YUGOSLAVIA
CID_CS          EQU     042             ; CZECH
CID_SL          EQU     042             ; SLOVAK (CZECH)
CID_HU          EQU     036             ; HUNGARY
CID_PL          EQU     048             ; POLAND
CID_RO          EQU     040             ; ROMANIA
CID_JP          EQU     081             ; Japan  2/17/KK
CID_KO          EQU     082             ; Korea         2/17/KK
CID_PR          EQU     086             ; PRC           2/17/KK
CID_TA          EQU     088             ; Taiwan        2/17/KK
CID_XX          EQU     000             ; Dummy entry


;
; country code pages
;
CP_UK           EQU     437
CP_FR           EQU     850
CP_GR           EQU     850
CP_SP           EQU     850
CP_IT           EQU     850
CP_SV           EQU     850
CP_AFE          EQU     437
CP_DA           EQU     865
CP_SW           EQU     850
CP_NO           EQU     865
CP_NL           EQU     850
CP_BE           EQU     850
CP_FI           EQU     437
CP_US           EQU     437
CP_IS           EQU     862
CP_CA           EQU     863
CP_AS           EQU     864
CP_PO           EQU     860
CP_BR           EQU     850
CP_IC           EQU     850
CP_TR           EQU     857
CP_YU           EQU     852             ; YUGOSLAVIA
CP_CS           EQU     852             ; CZECH
CP_SL           EQU     852             ; SLOVAK (CZECH)
CP_HU           EQU     852             ; HUNGARY
CP_PL           EQU     852             ; POLAND
CP_RO           EQU     852             ; ROMANIA
CP_JP           EQU     932             ; Japan  2/17/KK
CP_KO           EQU     934             ; Korea         2/17/KK
CP_PR           EQU     936             ; PRC           2/17/KK
CP_TA           EQU     938             ; Taiwan        2/17/KK


;
; date formats
;
DATE_MDY        EQU     0
DATE_DMY        EQU     1
DATE_YMD        EQU     2

;
; STRUC definitions
;
CTRYSTR STRUC
ESIZE   DW      0                       ; SIZE OF ENTRY
CNTRYID DW      0                       ; COUNTRY ID
CODPAGE DW      0                       ; CODE PAGE ID
RESV1   DW      0                       ; RESERVED
RESV2   DW      0                       ; RESERVED
CDPOINT DW      0                       ; POINTER TO COUNTRY DATA
	DW      0
CTRYSTR ENDS


CENTRYSIZE      EQU  (TYPE CTRYSTR) - 2 ; SIZE OF COUNTRY ENTRY


CTRYENT MACRO PARMS
	 CTRYSTR <PARMS>
	 CNTRYCNT = CNTRYCNT + 1
ENDM


CTRYDAT STRUC
	DW      0
	DB      0
	DB      0
	DW      0
	DW      0
CTRYDAT ENDS


CDATASIZE       EQU  (TYPE CTRYDAT) - 2 ; SIZE OF COUNTRY DATA


CINFO   STRUC                           ; OFFSET   FIELD
	DW      0                       ;    0     COUNTRY ID
	DW      0                       ;    2     CODE PAGE
	DW      0                       ;    4     DATE FORMAT
	DB      0                       ;    5     CURRENCY SYMBOL (5 BYTES)
	DB      0
	DB      0
	DB      0
	DB      0
	DB      0                       ;   10     1000 SEPARATOR
	DB      0
	DB      0                       ;   12     DECIMAL SEPARATOR
	DB      0
	DB      0                       ;   14     DATE SEPARATOR
	DB      0
	DB      0                       ;   16     TIME SEPARATOR
	DB      0
	DB      0                       ;   18     CURRENCY FORMAT FLAGS
	DB      0                       ;   19     DIGITS IN CURRENCY
	DB      0                       ;   20     TIME FORMAT
	DD      0                       ;   21     RESERVED
	DB      0                       ;   25     DATA LIST SEPARATOR
	DB      0
	DW      5 DUP (0)               ;   27     RESERVED
CINFO   ENDS


CINFOSIZE       EQU     TYPE CINFO      ; SIZE OF COUNTRY INFO TABLE


CTABLE  STRUC
	DB      0FFh
	DB      'CTYINFO'
	DW      CINFOSIZE
CTABLE  ENDS


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\ansi\ansi.inc ===
;   Equates and Strucs.


;------------------------------------------------------------------------------
; D425 For OS2 compatibiltiy box, /L option status query     01/14/88 J.K.
; D493 New INIT request structure for error message          02/25/88 J.K.
; P4934 Change ANSI 2F function number to 1Ah                05/20/88 F.G.
;------------------------------------------------------------------------------


;	DEVICE Header		DS:[SI]	-- to locate the next CON header
;	NEXT device header	ES:[DI]


HP		EQU	DS:[SI]
NHD		EQU	ES:[DI]

; CON data structure	CS:[BX]

CONPTR		EQU	CS:[BX]
					; STATES
BUF_DATA	STRUC
DEV_HDRO	DW	-1		; device driver header offset
DEV_HDRS	DW	-1
CON_STRAO	DW	-1		; dos CON strategy offset
CON_STRAS	DW	-1
CON_INTRO	DW	-1		; dos CON strategy offset
CON_INTRS	DW	-1
BUF_DATA	ENDS

;	INIT Structures and equates
IFNDEF		TRUE
TRUE		EQU	-1
ENDIF
IFNDEF		FALSE
FALSE		EQU	0
ENDIF
BRKADR		EQU	6Ch		; Break vector address
CR		EQU	13		; carriage return
BACKSP		EQU	8		; backspace
ESC_CHAR	EQU	1BH
ASNMAX		EQU	400		; (increased) SIZE OF KEY ASSIGNMENT BUFFER
ROM_BIOS	EQU	40h		; Segment of ROM_BIOS data area
EQUIP_FLAG	EQU	10h		; equipment flag. (for LCD)
KBD_FLAG_3	EQU	96h		; offset of KBD_FLAG_3 in data area
NUM_ROWS	EQU	84h		; offset of number of rows in data area
EXT16_FLAG	EQU	00010000b	; mask for Extended INT16 bit
INIT_VID_MASK	EQU	0FFCFh		; mask for equipment list
LCD_COLOR_MODE	EQU	20h		; LCD as color
LCD_MONO_MODE	EQU	30h		; LCD as MONOchrome
UNKNOWN_CMD	EQU	8103H		; unknown command status byte
RC_EOL		EQU	-1		; parser return code for EOL
RC_NO_ERROR	EQU	0		; parser return code for not in switch list
INVALID_PARM	EQU	10		; PARSE Invalid parameter message number
SSTRING		EQU	3		; PARSE Too many parameters message
FUNC_CALL	EQU	1BH		; VGA functionality call
ALT_SELECT	EQU	12H		; EGA alternate select call
EGA_INFO	EQU	10H		; EGA return information subcall
ALT_PRT_SC	EQU	20H		; select alternate print screen subcall
MONOCHROME	EQU	1		; monochrome attached to EGA
COLOR		EQU	0		; some color attached to EGA
PS2_MONO	EQU	7		; display adapter types...
PS2_COLOR	EQU	8
MOD30_MONO	EQU	0BH
MOD30_COLOR	EQU	0CH
LCD_MODEL	EQU	0F9H		; Convertible model byte value
GET_SYS_ID	EQU	0C0H		; INT15H call for system identification
GET_STATUS	EQU	43H		; read system status (Convertible)
MONO_ADDRESS	EQU	0B000H		; base address for monochrome
COLOR_ADDRESS	EQU	0B800H		; base address for CGA
UNOCCUPIED	EQU	-1		; value in VIDEO_MODE_TABLE if space unused
LCD_ACTIVE	EQU	00000001B	; LCD adapter is present
MONO_ACTIVE	EQU	00000010B	; monochrome adapter is present
CGA_ACTIVE	EQU	00000100B	; CGA adapter is present
MCGA_ACTIVE	EQU	00001000B	; MCGA is present
E5151_ACTIVE	EQU	00010000B	; EGA with monochrome is present
E5153_ACTIVE	EQU	00100000B	; EGA with color display is present
E5154_ACTIVE	EQU	01000000B	; EGA with enhanced color display is present
VGA_ACTIVE	EQU	10000000B	; VGA is present
INT10_LOW	EQU	(4*10H)		; interrupt 10 vector location
INT10_HI	EQU	(4*10H)+2
INT2F_LOW	EQU	(4*2FH)		; interrupt 2F vector location
INT2F_HI	EQU	(4*2FH)+2
ONE		EQU	1
THREE		EQU	3
EIGHT		EQU	8
NINE		EQU	9
FOURTEEN	EQU	14
REQ_CRSR_POS	EQU	3		; function call to return cursor position
MODE7		EQU	7
MODE13		EQU	13
MODE15		EQU	15
MODE19		EQU	19

;	Request Header Structure (INIT)

INIT_REQ_HDR	STRUC			; INIT Request header structure
		DB	13 DUP(?)	; standard request header
NUM_UNITS	DB	?		; number of units (N/A)
END_ADDRESS_O	DW	?		; ending address of resident code
END_ADDRESS_S	DW	?
ARG_PTR		DD	?		; ptr. to remaining arguments
DRIVE_NUM	DB	?		; drive number (N/A)
CONFIG_ERRMSG	DW	0		; Flag to control "Error in CONFIG.SYS.." msg.
INIT_REQ_HDR	ENDS


; Information Block Structure
;	(for functionality call)


INFO_BLOCK	STRUC			; information block for functionality call
STATIC_ADDRESS	DD	?		; address of static functionality table
		DB	33 DUP(?)	; don't care
ACTIVE_DISPLAY	DB	?		; active display code
ALT_DISPLAY	DB	?		; alternate display code
		DB	3 DUP(?)	; don't care
CURRENT_SCANS	DB	?		; current number of scan lines
		DB	2 DUP(?)	; don't care
MISC_INFO	DB	?		; miscellaneous state information
		DB	18 DUP(?)	; don't care
INFO_BLOCK	ENDS

; Video table entry structure


MODE_TABLE	STRUC
V_MODE		DB	-1		; video mode
D_MODE		DB	-1		; display mode
RESERVED_BYTE	DB	0		; reserved
COLORS		DW	-1		; colors
SCR_WIDTH	DW	-1		; screen width (pels)
SCR_LENGTH	DW	-1		; screen length (pels)
SCR_COLS	DW	-1		; number columns
SCR_ROWS	DW	-1		; number rows
MODE_TABLE	ENDS


; Structure of Static Block
;	(for functionality call


STATIC_BLOCK	STRUC			; format of static functionality table
		DB	7 DUP(?)	; don't care
SCAN_TEXT	DB	?		; available scan lines in text modes
STATIC_BLOCK	ENDS


; Structure of System ID call return block


SYS_ID		STRUC			; format of return system config data
		DW	?		; don't care
MODEL_BYTE	DB	?		; model byte
SYS_ID		ENDS



; INT2f Strucs and Equates


MULT_ANSI	EQU	1Ah		; ANSI multiplex number
INSTALL_CHECK	EQU	0		; install check for ANSI
IOCTL_2F	EQU	1		; 2F interface to IOCTL
DA_INFO_2F	EQU	2h		; J.K. Information passing to ANSI.
					; Subfunction code for IOCTL_2F
GET_SUBFUNC	EQU	7FH		; WGR Same structure as GET_IOCTL(ANSI)

;Info Struture for DA_INFO_2F. (DS:DX point to this packet)
;J.K. Note: For DOS 4.00, DA_INFO_PACKET is used by DISPLAY.SYS to signal ANSI.SYS that
;DISPLAY.SYS is calling/finishing INT 10h SET MODE call.	ANSI.SYS needs this
;infomration since it also hooks INT 10h vector.
;For this DA_SETMODE_FLAG purpose, DA_INFO_LEVEL and DA_INFO_DIRECTION should always be
;set to 0.	This can be extended for another information passing scheme between
;DISPLAY.SYS and ANSI.SYS in the future version.
;For DA_SETMODE_FLAG, DISPLAY.SYS should be extremely careful that when it calls
;with DA_SETMODE_FLAG =1, then it should calls with DA_SETMODE_FLAG=0
;when it finished INT 10h function call. Otherwise, the system goes .....

;D425. At the request of OS2 compatibility box, when the user ask to ANSI
; with DA_INFO_LEVEL=1, then ANSI sets DA_OPTION_L_STATE based on /L option
; status.

DA_INFO_PACKET	STRUC
DA_INFO_LEVEL	DB	0		; 0=used for SET_MODE_FLAG 1=for L_STATE
DA_SETMODE_FLAG	DB	0		; 1: DISPLAY.SYS is calling INT 10h call, SET MODE. 0=finished.
DA_L_STATE	DB	0		; 1 = /L active, 0 = /L inactive
DA_INFO_PACKET	ENDS



; GENERIC IOCTL Strucs and Equates



DISPLAY_TYPE	EQU	3		; MAJ_FUNC type for display
GET_FUNC	EQU	7FH		; MIN_FUNC for get subfunction
SET_FUNC	EQU	5FH		; MIN_FUNC for set subfunction
REQ_VID_MODE	EQU	0FH		; request video mode INT10h function call
DONE		EQU	0100H		; set done bit for IOCTL status
CMD_ERROR	EQU	8000H		; set error bit for IOCTL status
INVALID_FUNC	EQU	1		; invalid function
NOT_SUPPORTED	EQU	10		; return code non-supported ioctl function
NOT_AVAILABLE	EQU	12		; return code for font not available
TEXT_MODE	EQU	1		; text mode = 1 in request packet
GRAPHICS_MODE	EQU	2		; graphics mode = 2
DEFAULT_LENGTH	EQU	25		; normal screen length
OFF		EQU	0000H
ON		EQU	0001H
INT_BIT		EQU	00100000b	; mask for int. bit from functionality call
FOUND		EQU	1		; flag value for FOUND
NOT_FOUND	EQU	0		; flag value for not FOUND
SET_MODE	EQU	0		; set mode INT10H function number
DISPLAY_CHECK	EQU	0AD00H		; install check for DISPLAY.SYS
CHECK_ACTIVE	EQU	0AD02H		; active code page check for DISPLAY.SY
INSTALLED	EQU	0FFH		; present in AL if installed
LOAD_8X8	EQU	1112H		; register value for 8x8 ROM load
SET_BLOCK_0	EQU	1103H		; activate block = 0.
CHECK_FOR_FONT	EQU	0AD10H		; check for 8x8 RAM font - DISPLAY.SYS
SELECT_SCAN	EQU	30H		; subfunction to set scan lines (VGA)
SET_INTENSIFY	EQU	0		; value to enable intensify.
SET_BLINK	EQU	1		; value to enable blink.
BLINK_TOGGLE	EQU	1003H		; INT10 call to toggle int/blink bit.
CURSOR_FLAG	EQU	87H		; cursor flag byte in ROM_BIOS
SET_CURSOR_CALL EQU	1		; INT10 function call to set cursor typ
VIDEO_MASK	EQU	7FH		; turn of clear buffer bit of mode value
MULT_ANSI	EQU	1Ah		; ANSI multiplex number		;AC003
INSTALL_CHECK	EQU	0		; install check for ANSI
IOCTL_2F	EQU	1		; 2F interface to IOCTL
NOT_CY		EQU	0FFFEH		; turn carry bit off
CY		EQU	1		; turn carry bit off
INVALID_FLAGS	EQU	0FFFEH		; test for invalid flags in control word
TURN_OFF	EQU	0FEH		; values to turn off and on cursor..
TURN_ON		EQU	NOT TURN_OFF	; emulation
SUB_SIZE	EQU	11		; sublist size
LEFT_ASCIIZ	EQU	00010000B	; left-aligned asciiz string
UNLIMITED	EQU	0		; unlimited message size.


CMDLEN	=	0	;LENGTH OF THIS COMMAND
UNIT	=	1	;SUB UNIT SPECIFIER
CMD	=	2	;COMMAND CODE
STATUS	=	3	;STATUS
MEDIA	=	13	;MEDIA DESCRIPTOR
TRANS	=	14	;TRANSFER ADDRESS
COUNT	=	18	;COUNT OF BLOCKS OR CHARACTERS
START	=	20	;FIRST BLOCK TO TRANSFER


; REQUEST PACKET STRUCTURE (Generic IOCTL)


REQ_PCKT	STRUC
INFO_LEVEL	DB	?		; information level (should be 0)
		DB	?		; reserved
DATA_LENGTH	DW	?		; length of remaining data
RP_FLAGS	DW	?		; control flags
RP_MODE		DB	?		; display mode
RESERVED2	DB	?		; reserved
RP_COLORS	DW	?		; # of colors
RP_WIDTH	DW	?		; screen width
RP_LENGTH	DW	?		; screen length
RP_COLS		DW	?		; columns
RP_ROWS		DW	?		; rows
REQ_PCKT	ENDS


; Scan Lines available structure


SCAN_LINE_STR	STRUC
NUM_LINES	DW	?		; number of scan lines
REP_1BH		DB	?		; representation in 1Bh call
REP_12H		DB	?		; representation in 12h call
SCAN_LINE_STR	ENDS


; SUBLIST struc


SUB_STRUC	STRUC
		DB	2 DUP(?)
SUB_PTR_O	DW	?
SUB_PTR_S	DW	?
SUB_STRUC	ENDS


; RESULT BUFFER struc


RESULT_STRUC	STRUC
RESULT_TYPE	DB	?
		DB	?
RES_SYN_PTR	DW	?
RES_PTR		DD	?
RESULT_STRUC	ENDS

BREAK		MACRO	subtitle
		SUBTTL	subtitle
		PAGE	,132
ENDM

AsmVars		Macro	varlist
IRP		var,<varlist>
AsmVar		var
ENDM
ENDM

AsmVar		Macro	var
IFNDEF		var
var		=	FALSE
ENDIF
ENDM
=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\country\cntry2\mkcntry.inc ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
;
;        include file for create cdi file
;
PTRCNT          EQU     1               ; NUMBER OF POINTERS
CIPTYPE         EQU     1               ; TYPE FOR COUNTRY INFO POINTER
; CNTRYCNT        EQU     18              ; NUMBER OF COUNTRIES SUPPORTED
HR12            EQU     0               ; 12 HOUR TIME FORMAT
HR24            EQU     1               ; 24 HOUR TIME FORMAT


;
; entry type symbols
;
SETCOUNTRYINFO  EQU     1
SETUCASE        EQU     2
SETLCASE        EQU     3
SETUCASEFILE    EQU     4
SETFILELIST     EQU     5
SETCOLLATE      EQU     6
SETDBCS         EQU     7


CDATAITEMS      EQU     SETDBCS - 1     ; NUMBER OF ENTRIES IN COUNTRY DATA


;
; country id's
;
CID_UK          EQU     044             ; United Kingdom
CID_FR          EQU     033             ; France
CID_GR          EQU     049             ; Germany
CID_SP          EQU     034             ; Spain
CID_IT          EQU     039             ; Italy
CID_SV          EQU     046             ; Sweden
CID_AFE         EQU     061             ; International English
CID_DK          EQU     045             ; Denmark
CID_SW          EQU     041             ; Switzerland
CID_NO          EQU     047             ; Norway
CID_NL          EQU     031             ; Netherlands
CID_BE          EQU     032             ; Belgium
CID_FI          EQU     358             ; Finland
CID_US          EQU     001             ; United States
CID_IS          EQU     972             ; Israel
CID_CA          EQU     002             ; Canadian French
CID_AS          EQU     785             ; Area South (Saudi Arabia)
CID_PO          EQU     351             ; Portugal
CID_LA          EQU     003             ; Latin America
CID_BR          EQU     055             ; Brazil
CID_IC          EQU     354             ; Iceland
CID_TR          EQU     090             ; Turkey
CID_YU          EQU     038             ; YUGOSLAVIA
CID_CS          EQU     042             ; CZECH
CID_SL          EQU     042             ; SLOVAK (CZECH)
CID_HU          EQU     036             ; HUNGARY
CID_PL          EQU     048             ; POLAND
CID_RO          EQU     040             ; ROMANIA
CID_JP          EQU     081             ; Japan  2/17/KK
CID_KO          EQU     082             ; Korea         2/17/KK
CID_PR          EQU     086             ; PRC           2/17/KK
CID_TA          EQU     088             ; Taiwan        2/17/KK
CID_XX          EQU     000             ; Dummy entry


;
; country code pages
;
CP_UK           EQU     437
CP_FR           EQU     850
CP_GR           EQU     850
CP_SP           EQU     850
CP_IT           EQU     850
CP_SV           EQU     850
CP_AFE          EQU     437
CP_DA           EQU     865
CP_SW           EQU     850
CP_NO           EQU     865
CP_NL           EQU     850
CP_BE           EQU     850
CP_FI           EQU     437
CP_US           EQU     437
CP_IS           EQU     862
CP_CA           EQU     863
CP_AS           EQU     864
CP_PO           EQU     860
CP_BR           EQU     850
CP_IC           EQU     850
CP_TR           EQU     857
CP_YU           EQU     852             ; YUGOSLAVIA
CP_CS           EQU     852             ; CZECH
CP_SL           EQU     852             ; SLOVAK (CZECH)
CP_HU           EQU     852             ; HUNGARY
CP_PL           EQU     852             ; POLAND
CP_RO           EQU     852             ; ROMANIA
CP_JP           EQU     932             ; Japan  2/17/KK
CP_KO           EQU     934             ; Korea         2/17/KK
CP_PR           EQU     936             ; PRC           2/17/KK
CP_TA           EQU     938             ; Taiwan        2/17/KK


;
; date formats
;
DATE_MDY        EQU     0
DATE_DMY        EQU     1
DATE_YMD        EQU     2

;
; STRUC definitions
;
CTRYSTR STRUC
ESIZE   DW      0                       ; SIZE OF ENTRY
CNTRYID DW      0                       ; COUNTRY ID
CODPAGE DW      0                       ; CODE PAGE ID
RESV1   DW      0                       ; RESERVED
RESV2   DW      0                       ; RESERVED
CDPOINT DW      0                       ; POINTER TO COUNTRY DATA
	DW      0
CTRYSTR ENDS


CENTRYSIZE      EQU  (TYPE CTRYSTR) - 2 ; SIZE OF COUNTRY ENTRY


CTRYENT MACRO PARMS
	 CTRYSTR <PARMS>
	 CNTRYCNT = CNTRYCNT + 1
ENDM


CTRYDAT STRUC
	DW      0
	DB      0
	DB      0
	DW      0
	DW      0
CTRYDAT ENDS


CDATASIZE       EQU  (TYPE CTRYDAT) - 2 ; SIZE OF COUNTRY DATA


CINFO   STRUC                           ; OFFSET   FIELD
	DW      0                       ;    0     COUNTRY ID
	DW      0                       ;    2     CODE PAGE
	DW      0                       ;    4     DATE FORMAT
	DB      0                       ;    5     CURRENCY SYMBOL (5 BYTES)
	DB      0
	DB      0
	DB      0
	DB      0
	DB      0                       ;   10     1000 SEPARATOR
	DB      0
	DB      0                       ;   12     DECIMAL SEPARATOR
	DB      0
	DB      0                       ;   14     DATE SEPARATOR
	DB      0
	DB      0                       ;   16     TIME SEPARATOR
	DB      0
	DB      0                       ;   18     CURRENCY FORMAT FLAGS
	DB      0                       ;   19     DIGITS IN CURRENCY
	DB      0                       ;   20     TIME FORMAT
	DD      0                       ;   21     RESERVED
	DB      0                       ;   25     DATA LIST SEPARATOR
	DB      0
	DW      5 DUP (0)               ;   27     RESERVED
CINFO   ENDS


CINFOSIZE       EQU     TYPE CINFO      ; SIZE OF COUNTRY INFO TABLE


CTABLE  STRUC
	DB      0FFh
	DB      'CTYINFO'
	DW      CINFOSIZE
CTABLE  ENDS


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\def-equ.inc ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; *** DEF-EQU *** DEF-EQU *** DEF-EQU ***
;
;       EQU's, STRUC's, and OTHER
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;Modification history *********************************************************
;AN001; D358  New device driver INIT function package             12/07/87 J.K.
;AN002; D493  Undo D358                                           02/24/88 J.K.
;AN003; D4934 Change ANSI 2F function number to 1Ah               05/20/88 F.G.
;******************************************************************************
IF1                                     ;
        ;%out .               DEF-EQU .INC
ENDIF                                   ;
ZERO    EQU     0H                      ;
ONE     EQU     1H                      ;
TWO     EQU     2H                      ;
THREE   EQU     3H                      ;
FOUR    EQU     4H                      ;
FIVE    EQU     5H                      ;
SIX     EQU     6H                      ;
SEVEN   EQU     7H                      ;
EIGHT   EQU     8H                      ;
NINE    EQU     9H                      ;
TEN     EQU    0AH                      ;
ELEVEN  EQU    0BH                      ;
TWELVE  EQU    0CH                      ;
                                        ;
FAIL    EQU     8000H                   ; fail in designate
                                        ;
NOT_CY  EQU     0FFFEH                  ;
CY      EQU     ONE                     ;
                                        ;
ID_IOCTL       EQU     5                ; MAJOR FNCT # FOR 'other' DEVICE
                                        ;
RH      EQU     ES:[DI]                 ; addressability to Request Header
                                        ;
RHC      STRUC                          ; fields common to all request types
         DB      ?                      ; length of Request Header
         DB      ?                      ; unit code (subunit)
RHC_CMD  DB      ?                      ; command code
RHC_STA  DW      ?                      ; status
         DQ      ?                      ; reserved for DOS
RHC      ENDS                           ; end of common portion
                                        ;
CMD_INPUT EQU   4                       ; RHC_CMD is INPUT request
                                        ;
                                        ; Status values for RHC_STA
STAT_DONE EQU   0001H                   ; function complete - high order byte
STAT_CMDERR EQU 8000H                   ; Error code
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;      DEVICE  Header     DS:[SI]      -- to locate the next CON header
;      NEXT device header ES:[DI]
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
HP      EQU     DS:[SI]                 ;
NHD     EQU     ES:[DI]                 ;
                                        ;
NAME_LEN EQU    8                       ;
                                        ;
DHS     STRUC                           ;
DH_NEXTO DW     ?                       ; offset of pointer to next header
DH_NEXTS DW     ?                       ; segment of pointer to next header
        DW      ?                       ; attribute
DH_STRAO DW     ?                       ; offset to strategy routine
DH_INTRO DW     ?                       ; offset to interrupt routine
DH_NAME DB      NAME_LEN DUP(0)         ; device name in this header
DHS     ENDS                            ; end of common portion
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;      Request Header for INIT
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
RH0     STRUC                           ;
        DB      (TYPE RHC) DUP (?)      ;
                                        ;
RH0_UNIT DB     ?                       ; not used for CHAR devices
RH0_ENDO DW     ?                       ; offset  of ending address
RH0_ENDS DW     ?                       ; segment of ending address
RH0_BPBA DD     ?                       ; POINTER TO BPB FOR CHAR DEVICES
         db     ?                       ;
RH0     ENDS                            ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;      Request Header for IOCTL
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
RH3     STRUC                           ;
        DB      (TYPE RHC) DUP (?)      ; common portion
                                        ;
                                        ;
        DB      ?                       ; media descriptor
RH3_DTAO DW     ?                       ; offset  of transfer address
RH3_DTAS DW     ?                       ; segment of transfer address
RH3_CNT DW      ?                       ; byte count
RH3     ENDS                            ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;       IOCTL header format
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
RH_IOCTL STRUC                          ;
STATIC_RH       DB 13 DUP(?)            ; STANDARD STATIC REQUEST HEADER
MAJOR_F         DB      ?               ; MAJOR FUNCTION CALL (SEE DOS 3.30)
MINOR_F         DB      ?               ; MINOR FUNCTION CALL (SEE DOS 3.30)
CONTENT_SI      DW      ?               ; CONTENTS OF SI
CONTENT_DI      DW      ?               ; CONTENTS OF DI
REQUEST_PACKET  DD      ?               ; POINTER TO GENERIC IOCTL REQ. PACKET
RH_IOCTL ENDS                           ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;       DESIGNATE BUFFER FORMAT
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
DESG_BUFFER     STRUC                   ;
DESG_CARTRIDGE  DW      ?               ; 0=NO CARTRIDGE, 1=CARTRIDGE
DESG_LENGTH     DW      ?               ; LENGTH OF REMAINING HEADER
DESG_N          DW      ?               ; NUMBER OF CP's DESIGNATED
DESG_CP         DW      ?               ; FIRST CP DESIGNATED
DESG_BUFFER     ENDS                    ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;       INVOKE BUFFER FORMAT
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
INVK_BUFFER     STRUC                   ;
INVK_LENGTH     DW      ?               ; LENGTH OF REMAINING HEADER
INVK_CP         DW      ?               ; CP TO INVOKE
INVK_BUFFER     ENDS                    ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;       QUERY LIST BUFFER FORMAT
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
QLST_BUFFER     STRUC                   ;
QLST_LENGTH     DW      ?               ; LENGTH OF REMAINING HEADER
QLST_N_HDWR     DW      ?               ; NUMBER OF HARDWARE CP's
QLST_HDWR_CP    DW      ?               ; FIRST HDWR CODE PAGE
QLST_N_DESG     DW      ?               ; NUMBER OF DESIGNATED CP's
QLST_DESG_CP    DW      ?               ; DESINATED CODE PAGES
                                        ; ...there is more data to be
                                        ;    filled in by the DRIVER
QLST_BUFFER     ENDS                    ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;       PARSER STRUC STATEMENTS
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
PARSE_TABLE1    STRUC                   ; [[[ TABLE 1 ]]]
NUM_DEVICES     DW      ?               ; NUMBER OF DEVICES TO SUPPORT
DEVICE1_OFFSET  DW      ?               ; (hopefully) CON!!!
PARSE_TABLE1    ENDS                    ;
                                        ;
PARSE_TABLE2    STRUC                   ; [[[ TABLE 2 ]]]
NUM_ITEMS       DW      ?               ; NUMBER OF ITEMS CREATED BY THE
OFFSET_LIST     DW      ?               ; THE 1ST OFFSET OF [ TABLE 2 ]
PARSE_TABLE2    ENDS                    ; PARSER!
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;       CODE PAGE POINTER STRUCTURE
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
CP_PNTER_STRUC  STRUC                   ;
HDWR_CP_STRUC   DW      ?               ;
DESG_CP_STRUC   DW      ?               ;
FONT_CP_STRUC   DW      ?               ;
WRITE_DATA_STRUC DW     ?               ;
FONT_DATA_STRUC DW      ?               ;
CP_PNTER_STRUC  ENDS                    ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; CON data structure  CS:[BX]
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
BUF     EQU     CS:[BX]                 ;
                                        ; STATES
BUF_DATA STRUC                          ;
DEV_HDRO DW     -1                      ; device driver header offset
DEV_HDRS DW     -1                      ;
CON_STRAO DW    -1                      ; dos CON strategy offset
CON_STRAS DW    -1                      ;
CON_INTRO DW    -1                      ; dos CON strategy offset
CON_INTRS DW    -1                      ;
RH_PTRO DW      -1                      ; request header offset
RH_PTRS DW      -1                      ; segment
STATE   DW       ?                      ;
STATUS  DW       ?                      ;
BUF_DATA ENDS                           ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;       General  Constants
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
INT_2F_LOW EQU  (4*2FH)                 ; INTERRUPT 2FH CON/KEYB COMMUNICATION
INT_2F_HI EQU    (4*2FH)+2              ;
INT_43_LOW EQU  (4*43H)                 ; INTERRUPT 43H 0-255 CHARACTER VECTOR
INT_43_HI EQU    (4*43H)+2              ;
INT_44_LOW EQU  (4*44H)                 ; INTERRUPT 44H 0-255 CHARACTER VECTOR
INT_44_HI EQU    (4*44H)+2              ;
INT_1F_LOW EQU  (4*1FH)                 ; INTERRUPT 1FH EXTENDED CHARACTER SUPPORT
INT_1F_HI EQU    (4*1FH)+2              ;
INT_10_LOW EQU  (4*10H)                 ; INTERRUPT 10H fix FOR PALACE
INT_10_HI EQU    (4*10H)+2              ;
GET_MODE      EQU    0FH                ; WGR                                  ;AN000;
ON            EQU    1                  ; WGR                                  ;AN000;
OFF           EQU    0                  ; WGR                                  ;AN000;
RECALC_ON     EQU    0010H              ; WGR                                  ;AN000;
VIDEO_CTRL    EQU    487H               ; WGR                                  ;AN000;
ANSI_BUF_SIZE EQU    14                 ; WGR                                  ;AN000;
DEFAULT_LEN   EQU    25                 ; WGR                                  ;AN000;
NUMBER        EQU    1                  ; WGR                                  ;AN000;
STRING        EQU    3                  ; WGR                                  ;AN000;
COMPLEX       EQU    4                  ; WGR                                  ;AN000;
RC_EOL        EQU    -1                 ; WGR                                  ;AN000;
RC_NO_ERROR   EQU    0                  ; WGR                                  ;AN000;
FUNC_CALL     EQU    1BH                ; WGR                                  ;AN000;
VGA_FOUND     EQU    00000001B          ; WGR                                  ;AN000;
EGA_FOUND     EQU    00000001B          ; WGR                                  ;AN000;
LCD_FOUND     EQU    00000010B          ; WGR                                  ;AN000;
CGA_FOUND     EQU    00000100B          ; WGR                                  ;AN000;
MONO_FOUND    EQU    00001000B          ; WGR                                  ;AN000;
ALT_SELECT    EQU    12H                ; WGR                                  ;AN000;
EGA_INFO_CALL EQU    10H                ; WGR                                  ;AN000;
GET_SYS_ID    EQU    0C0H               ; WGR                                  ;AN000;
GET_STATUS    EQU    43H                ; WGR                                  ;AN000;
LCD_MODEL     EQU    0F9H               ; WGR                                  ;AN000;
COLOR_ADDRESS EQU    0B800H             ; WGR                                  ;AN000;
MONO_ADDRESS  EQU    0B000H             ; WGR                                  ;AN000;
ERROR_1       EQU    2                  ; WGR                                  ;AN000;
ERROR_2       EQU    12                 ; WGR                                  ;AN000;
ERROR_3       EQU    8                  ; WGR                                  ;AN000;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; *** INT 2Fh used
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

ANSI_2F       EQU    1Ah                ; WGR Muliflex number for ANSI         ;AC003;
;Catagory code
IOCTL_2F      EQU     1h                ;
DA_INFO_2F    EQU     2h                ;J.K. Information passing to ANSI.
;Subfunction code for IOCTL_2F
GET_SUBFUNC   EQU    7FH                ; WGR Same structure as GET_IOCTL(ANSI);AN000;

;Info Struture for DA_INFO_2F. (DS:DX point to this packet)
;J.K. Note: For DOS 4.00, DA_INFO_PACKET is used to signal ANSI.SYS that
;DISPLAY.SYS is calling/finishing INT 10h SET MODE call.  ANSI.SYS needs this
;infomration since it also hooks INT 10h vector.
;For this DA_SETMODE_FLAG purpose, DA_INFO_LEVEL and DA_INFO_DIRECTION should always be
;set to 0.  This can be extended for another information passing scheme between
;DISPLAY.SYS and ANSI.SYS in the future version.
;For DA_SETMODE_FLAG, DISPLAY.SYS should be extremely careful that when it calls
;with DA_SETMODE_FLAG =1, then it should calls with DA_SETMODE_FLAG=0
;when it finished INT 10h function call. Otherwise, the system goes .....
DA_INFO_PACKET   struc
DA_INFO_LEVEL       db      0           ; 0 for DA_SETMODE_FLAG,  1 for DA_OPTION_L_STATE query (for OS2 compat. box).
DA_SETMODE_FLAG     db      0           ; 1: DISPLAY.SYS is calling INT 10h call, SET MODE. 0= finished.
DA_OPTION_L_STATE   db      0           ; on return from ANSI, 1 = ANSI /L option active, 0 = inactive.
DA_INFO_PACKET   ends

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; *** DEF-EQU *** DEF-EQU *** DEF-EQU ***
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Information Block Structure
;    (for functionality call)
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
INFO_BLOCK      STRUC                   ; info block for functionality call    ;AN000;
STATIC_ADDRESS  DD   ?                  ; address of static functionality table;AN000;
                DB   33 DUP(?)          ; don't care                           ;AN000;
ACTIVE_DISPLAY  DB   ?                  ; active display code                  ;AN000;
ALT_DISPLAY     DB   ?                  ; alternate display code               ;AN000;
                DB   3  DUP(?)          ; don't care                           ;AN000;
CURRENT_SCANS   DB   ?                  ; current number of scan lines         ;AN000;
                DB   2  DUP(?)          ; don't care                           ;AN000;
MISC_INFO       DB   ?                  ; miscellaneous state information      ;AN000;
                DB   18 DUP(?)          ; don't care                           ;AN000;
INFO_BLOCK      ENDS                    ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Structure of System ID call return block
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SYS_ID          STRUC                   ; format of return system config data  ;AN000;
                DW   ?                  ; don't care                           ;AN000;
MODEL_BYTE      DB   ?                  ; model byte                           ;AN000;
SYS_ID          ENDS                    ;                                      ;AN000;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\display.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
PAGE	,132
TITLE	DOS - CONSOLE Code Page Switching Device Driver
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;  FILENAME:	 DISPLAY.ASM
;  PROGRAM:	 DISPLAY.SYS (Main module)
;  LINK PROCEDURE:  Linkk
;  INSTALLATION:
;
;  This routine is structured as a DOS Device Driver.
;  IE it is installed via the CONFIG.SYS command:
;	 DEVICE=DISPLAY.SYS
;
;  The following device commands are supported:
;
;  00 hex - INIT
;  -------------
;  Install the CON device driver.  This is used for downloading of
;  the character sets (various Code Pages) according to the respective
;  display adapter.  The interface provided by the video BIOS is used
;  to download a block of 256 characters (in various resolutions - ie.
;  8x8, 8x14, and 8x16).  Also, the interrupt 2F hex is chained for
;  communication between the CON device driver and the keyboard routine.
;
;  Refer to INIT.ASM for code
;
;  13 hex - GENERIC IOCTL
;  ----------------------
;  INVOKE
;  ------
;  Invoke is use to activate the appropriate CP font.  The mechanism
;  is based soley on the code page value passed from the MODE & CHCP
;  commands.  Once a CP has been INVOKED, it is loaded for ALL display
;  modes on the respective display adapter - ONLY IF the proper font
;  resolution can be accessed.
;
;  Refer to CPS-FUNC.INC for code
;
;  DESIGNATE START
;  ---------------
;  Designate start passes the list of designated code pages to load.
;  It is sent just prior to the IOCTL WRITE calls containing the 'CPI'
;  files.  The list of designated code pages is check for duplicates
;  and for invalids (-1).
;
;  Refer to CPS-FUNC.INC for code
;
;  DESIGNATE STOP
;  --------------
;  Once the data (for a DESIGNATION) has been routed to the CPS driver,
;  it is followed by a DESIGNATE STOP command.	This confirms the completion
;  of the DESIGNATE procedure.	If there was an error detected during the
;  DESIGNATE procedure, it must be followed by a DESIGNATE STOP.
;
;  Refer to CPS-FUNC.INC for code
;
;
;  0C hex - IOCTL OUTPUT
;  ---------------------
;  Following a DESIGNATE START, the contents of the specified data file
;  (expected .CPI format) is copied by DOS to the CPS driver.  This is
;  via the GENERIC IOCTL WRITE calls.  During these calls, the data is
;  parsed by the FONT-PARSER (F-PARSER.SRC) to select the CP and fonts
;  required.
;
;  Refer to CPS-FUNC.INC for code
;
;
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;      Request Header (Common portion)
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
IF1					;
        ;%out .Compiling:     DISPLAY.ASM
        ;%out .                CPS-CON driver
        ;%out .                Version 3.30
        ;%out .Include Files:
ENDIF					;
	INCLUDE MACROS.INC		;
	INCLUDE DEF-EQU.INC		;
					;
	PUBLIC	EOF_MARKER		;
	PUBLIC	CPD_ACTIVE		;
	PUBLIC	CPD_CLASS		;
	PUBLIC	CPD_HDWR_N_MAX		;
	PUBLIC	CPD_DESG_N_MAX		;
	PUBLIC	CPD_HDWR_N		;
	PUBLIC	CPD_DESG_N		;
	PUBLIC	CPD_FONTS_N		;
	PUBLIC	CPD_FONT_PNTER		;
	PUBLIC	IRPT_2			;
	PUBLIC	IRPT_CMD_EXIT		;
	PUBLIC	DEV_HDR 		;
	EXTRN	INIT:NEAR		;
					;
CODE	SEGMENT BYTE PUBLIC 'CODE'      ;
	ASSUME	CS:CODE,DS:CODE 	;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;****************************************
;**	    Resident Code	       **
;****************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
START	EQU	$			; begin resident data & code
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; DEVICE HEADER - must be at offset zero within device driver
;		  (DHS is defined according to this structure)
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	ORG	0000H			    ;
					    ;
DEV_HDR:DD    -1			    ; Pointer to next device header
	DW	0C053H			    ; Attribute (Char device)
	DW	OFFSET STRATEGY 	    ; Pnter to device "strategy"
	DW	OFFSET INTERRUPT	    ; Pnter to device "interrupt"
	DB	'CON     '                  ; Device name
					    ; and of course a descriptive name
					    ; which can be viewed by a TYPE!
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	Console Description Table
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
.XLIST					;
STACK_END	DW  1FFH+60H DUP(0)	; 200H + 'my' needs (re/ DOS 3.30 ref)
STACK_START	DW  0			;
OLD_STACK_S	DW  ?			;
OLD_STACK_O	DW  ?			;
.LIST					;
					;
BUF1:	   BUF_DATA <>			; exclude PAR_EXTRACTO
					;
CP_PNTER_TABLE	DW OFFSET CPD_HDWR_N	; TABLE OF POINTERS TO CP INFO
		DW OFFSET CPD_DESG_N	;
		DW OFFSET CPD_FONT_PNTER;
		DW OFFSET CPD_FONT_WRITE;
		DW OFFSET CPD_FONT_DATA ;
					;
CPD_TABLE	LABEL WORD		; TABLE DATA INFO FOR CP's
CPD_ACTIVE	DW     -1		; TEMPORARY
CPD_CLASS	DB	'........'      ; THIS IS SET TO (EGA, LCD)
CPD_FONTS_N	DW     -1		;
CPD_HDWR_N	DW	0		;
                DW  6   DUP(-1)         ; (HDWR_CP's)    (MAX=6)
CPD_HDWR_N_MAX	EQU ($-CPD_HDWR_N)/2-1	;
CPD_DESG_N	DW     -1		; # OF DESIG CP's
                DW  6   DUP(-1)         ; (DESG CP's)    (MAX=6)
CPD_DESG_N_MAX	EQU ($-CPD_DESG_N)/2-1	;
CPD_FONT_PNTER  DW  6   DUP(0,0)        ; SEG_OFFSET POINTER TO DATA BUFFERS
CPD_FONT_WRITE  DW  6   DUP(0,0)        ; SEG_OFFSET OF FONTS BEING WRITTEN
CPD_FONT_DATA   DW  6   DUP(0)          ; COUNT OF FONT DATA TO SKIP/COPY!
FONT_PRIORITY	DB  8	DUP(-1) 	; USED TO CLASSIFY FONT PRIORITY
NUM_FONT_PRIORITY EQU ($-FONT_PRIORITY) ; DURING A DESIGNATION
CPD_TEMP_DESG	DW	0		; # OF DESIG CP's TEMP BUFFER
                DW  6   DUP(-1)         ; (DESG CP's)    (MAX=6)
CPD_REQ_DESG	DW	0		; # OF DESIG CP's REQUESTED
                DW  6   DUP(-1)         ; (DESG CP's)    (MAX=6)
;;;;;;;

ANSI_DA_INFO	DA_INFO_PACKET	<>	;J.K. Information packet to ANSI used for MODE SET INT10 call.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;      CON Device "strategy" entry point
;      Retain the Request Header address for use by Interrupt routine
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	ASSUME	DS:NOTHING		;
STRATEGY  PROC	FAR			;
	PUSH	BX			;
	PUSH	BX			;
	LEA	BX, BUF1		; BUF = BUF1  CS:[BX]
	POP	BUF.RH_PTRO		; OFFSET OF REQUEST HEADER
	MOV	BUF.RH_PTRS,ES		; SEGMENT
	POP	BX			;
	RET				;
STRATEGY  ENDP				;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;      Table of command processing routine entry points
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
CMD_TABLE LABEL WORD			;
	DW	OFFSET INIT		;  0 - Initialization
	DW	OFFSET NO_OPERATION	;  1 - Media check
	DW	OFFSET NO_OPERATION	;  2 - Build BPB
	DW	OFFSET NO_OPERATION	;  3 - IOCTL input
	DW	OFFSET NO_OPERATION	;  4 - Input
	DW	OFFSET NO_OPERATION	;  5 - Non destructive input no wait
	DW	OFFSET NO_OPERATION	;  6 - Input status
	DW	OFFSET NO_OPERATION	;  7 - Input flush
	DW	OFFSET NO_OPERATION	;  8 - Write
	DW	OFFSET NO_OPERATION	;  9 - Output with verify
	DW	OFFSET NO_OPERATION	;  A - Output status
	DW	OFFSET NO_OPERATION	;  B - Output flush
	DW	OFFSET DESG_WRITE	;  C - IOCTL output
	DW	OFFSET NO_OPERATION	;  D - Device OPEN
	DW	OFFSET NO_OPERATION	;  E - Device CLOSE
	DW	OFFSET NO_OPERATION	;  F - Removable media
	DW	OFFSET NO_OPERATION	; 10 - Removable media
	DW	OFFSET NO_OPERATION	; 11 - Removable media
	DW	OFFSET NO_OPERATION	; 12 - Removable media
	DW	OFFSET GENERIC_IOCTL	; 13 - Removable media
MAX_CMD EQU	($-CMD_TABLE)/2 	; highest valid command follows
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; CON Device "interrupt" entry point
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
INTERRUPT  PROC FAR			; device interrupt entry point
	PUSH	AX			;
	PUSH	BX			;
	PUSH	CX			;
	PUSH	DI			;
	PUSH	SI			;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Common interrupt entry :
; at entry, BUFn (CS:BX) of CON is defined
;
; Check if header link has to be set
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	LEA	BX, BUF1		;
	MOV	DI,OFFSET DEV_HDR	; CON Device header
					;
	MOV	BUF.DEV_HDRO,DI 	;
	MOV	BUF.DEV_HDRS,CS 	;
	CLD				; all moves forward
					;
	CMP	BUF.CON_STRAO, -1	;
	JNE	L4			; has been linked to DOS CON
	CMP	BUF.CON_STRAS, -1	;
	JNE	L4			; has been linked to DOS CON
					;  next device header :  ES:[DI]
	LDS	SI,DWORD PTR BUF.DEV_HDRO;
	LES	DI,DWORD PTR HP.DH_NEXTO;
					;
;$SEARCH WHILE				;  pointer to next device header is NOT
L1:					;
	PUSH	ES			;  -1
	POP	AX			;
	CMP	AX,-1			;
;$LEAVE  E,	 AND			; leave if both offset and segment are
	JNE	NOT0FFFF		;
					;
	CMP	DI,-1			;  0FFFFH
;$LEAVE  E				;
	JE	L4			;
NOT0FFFF:				;
	PUSH	DI			;
	PUSH	SI			;
	MOV	CX,NAME_LEN		;
	LEA	DI,NHD.DH_NAME		;
	LEA	SI,HP.DH_NAME		;
	REPE	CMPSB			;
	POP	SI			;
	POP	DI			;
	AND	CX,CX			;
;$EXITIF Z				; Exit if name is found in linked hd.
	JNZ	L3			; Name is not found
					; Name is found in the linked header
	MOV	AX,NHD.DH_STRAO 	; Get the STRATEGY address
	MOV	BUF.CON_STRAO,AX	;
	MOV	AX,ES			;
X1:	MOV	BUF.CON_STRAS,AX	;
					;
	MOV	AX,NHD.DH_INTRO 	; Get the INTERRUPT address
	MOV	BUF.CON_INTRO,AX	;
	MOV	AX,ES			;
X2:	MOV	BUF.CON_INTRS,AX	;
					;
;$ORELSE				; FInd next header to have the same
        jmp     short L4                      ; Device Name
L3:					;
	LES	DI,DWORD PTR NHD.DH_NEXTO;
;$ENDLOOP				;
        jmp     short L1                      ;
L4:					;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; COMMAND REQUEST
;      ES:DI  REQUEST HEADER
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	LES	DI,DWORD PTR BUF.RH_PTRO; GET RH ADDRESS PASSED TO
					; "STRATEGY"  INTO ES:DI
	MOV	AL,RH.RHC_CMD		; COMMAND CODE FROM REQUEST HEADER
	CBW				; ZERO AH (IF AL > 7FH, NEXT COMPARE
					; WILL CATCH THAT ERROR)
	CMP	AL,MAX_CMD		; IF COMMAND CODE IS TOO HIGH
	JAE	L6			; JUMP TO ERROR ROUTINE
					;
	ADD	AX,AX			; DOUBLE COMMAND CODE FOR TABLE OFFSET
	MOV	SI,AX			; PUT INTO INDEX REGISTER FOR JMP
                                        ;
	CALL	CS:CMD_TABLE[SI]	; CALL ROUTINE TO HANDLE THE COMMAND
	JC	IRPT_CMD_EXIT		; CY=1 IF NO PASS_CONTROL REQ'D
	CALL	PASS_CONTROL		;
        jmp     short IRPT_2                  ;
					;
L6:	CALL	PASS_CONTROL		; CALL ROUTINE TO HANDLE THE COMMAND
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;  At entry to command processing routine
;
;      ES:DI   = Request Header address
;      CS:BX   = Buffer for CON
;      CS      = code segment address
;      AX      = 0
;
;      top of stack is return address, IRPT_CMD_EXIT
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
IRPT_CMD_EXIT:				; RETURN FROM COMMAND ROUTINE
	LES	DI,DWORD PTR BUF.RH_PTRO; RESTORE ES:DI AS REQUEST HEADER PTR
	XOR	AX,AX			;
	OR	AX,BUF.STATUS		;
	JE	IRPT_0			;
	XOR	BUF.STATUS,AX		; SET STATUS BACK TO OK!
	OR	AX,STAT_CMDERR		;
        jmp     short IRPT_1                  ;
IRPT_0: OR	AH,STAT_DONE		; ADD "DONE" BIT TO STATUS WORD
IRPT_1: MOV	RH.RHC_STA,AX		; STORE STATUS INTO REQUEST HEADER
IRPT_2: POP	SI			; RESTORE REGISTERS
	POP	DI			;
	POP	CX			;
	POP	BX			;
	POP	AX			;
	RET				;
INTERRUPT  ENDP 			;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	PASS CONTROL
;
;	This calls the attached device to perform any further
;	action on the call!
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
PASS_CONTROL	PROC			;
	PUSH	BX			;
	PUSH	BX			;
	POP	SI			;
	LES	BX,DWORD PTR BUF.RH_PTRO; pass the request header to the
	CALL	DWORD PTR CS:[SI].CON_STRAO ; CON strategy routine.
	POP	BX			;
	CALL	DWORD PTR BUF.CON_INTRO ; interrupt the CON
	RET				;
PASS_CONTROL	ENDP			;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
NO_OPERATION	PROC			;
	CLC				;
	RET				;
NO_OPERATION	ENDP			;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	PULL IN THE CODE PAGE FUNCTION CODE
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	INCLUDE INT2FCOM.INC		;
	INCLUDE INT10COM.INC		;
	INCLUDE CPS-FUNC.INC		;
	INCLUDE WRITE.INC		; SPECIAL MARKER IN WRITE.INC
	INCLUDE F-PARSER.INC		;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;      Adjust the assembly-time instruction counter to a paragraph
;      boundary
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	IF	($-START) MOD 16	;
	  ORG ($-START)+16-(($-START) MOD 16);
	ENDIF				;
EOF_MARKER   EQU $			; end of resident code
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	END-OF-CODE
;
;;;;;;;;;;;;;;;;;
CODE	ENDS	;
	END	;
;;;;;;;;;;;;;;;;;

=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\init.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
PAGE	,132
TITLE	DOS - CON Code Page Switching Device Driver (INIT)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;  FILENAME:	 INIT.ASM
;  PROGRAM:	 DISPLAY.SYS (Load module)
;  LINK PROCEDURE:  Linkk
;  INSTALLATION:
;
;  This is the routine used to initialize the DOS CPS
;  (Code Page Switching) device driver.  It is linked into the
;  DISPLAY.SYS file at the very end.
;
;  PSEUDO CODE:
;		  INIT PROC
;
;		      not specified yet....patience is a virtue!!!
;
;		  INIT ENDP
;
;
;  DATE:    August 28, 1986
;
;Modification history *********************************************************
;AN001; D358  New device driver INIT function package		  12/07/87 J.K.
;AN002; D493  Undo D358.					  02/24/88 J.K.
;******************************************************************************

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
IF1					;
        ;%out .COMPILING:     INIT.ASM
        ;%out .                INSTALL CPS-CON DRIVER
        ;%out .                VERSION 3.30
        ;%out .INCLUDE FILES:
ENDIF					;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	REFERENCES
;
;	THESE REFERENCES ARE FOR VARIABLES SET WITHIN THE
;	MAIN-LINE PROGRAM, NOT CONTAINED IN THIS MODULE.
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					;
.XLIST					;
INCLUDE SYSMSG.INC			; WGR				       ;AN000;
MSG_UTILNAME <DISPLAY>			; WGR				       ;AN000;
.LIST					;
					;
					;
CODE	SEGMENT PUBLIC BYTE 'CODE'      ;
	ASSUME	CS:CODE,DS:CODE 	;
	PUBLIC	INIT			;
					;
	EXTRN	ROM_INT_2F:WORD 	;
	EXTRN	ROM_INT_10:WORD 	;
	EXTRN	ROM_INT_1F:WORD 	;
	EXTRN	OLD_INT_1F:WORD 	;
	EXTRN	ROM_INT_44:WORD 	;
	EXTRN	INT_2F_COM:NEAR 	;
	EXTRN	INT_10_COM:NEAR 	;
	EXTRN	EOF_MARKER:BYTE 	;
	EXTRN	ABORT:BYTE		;
	EXTRN	CPD_ACTIVE:WORD 	;
	EXTRN	CPD_CLASS:BYTE		;
	EXTRN	CPD_HDWR_N_MAX:ABS	;
	EXTRN	CPD_DESG_N_MAX:ABS	;
	EXTRN	CPD_HDWR_N:WORD 	;
	EXTRN	CPD_DESG_N:WORD 	;
	EXTRN	CPD_FONTS_N:WORD	;
	EXTRN	IRPT_2:NEAR		;
	EXTRN	IRPT_CMD_EXIT:NEAR	;
	EXTRN	FONT_SIZE:BYTE		;
	EXTRN	LOAD_MECH:BYTE		;
	EXTRN	CPD_FONT_PNTER:WORD	;
	EXTRN	PARSER:NEAR		;
	EXTRN	GET_DEVICE_ID:NEAR	;
	EXTRN	TABLE:BYTE		;
	EXTRN	ASK_BIOS_FONT_SIZE:NEAR ;
	EXTRN	ASK_BIOS_SCAN_LINES:NEAR;
	EXTRN	REDUCED_SUPPORT:ABS	;
	EXTRN	DEV_HDR:WORD		;
	EXTRN	MODE_VALUE:BYTE 	;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	LOCAL VARIABLES
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
HANDLE_ROUTINES LABEL WORD		; INDEX TABLE OF 'FUNCTIONS' TO
	DW OFFSET HANDLE_DEVICE_NAME	; OPERATE ON THE COMMAND_LINE
	DW OFFSET HANDLE_DEVICE_ID	;
	DW OFFSET HANDLE_HDWR_CP	;
	DW OFFSET HANDLE_DESG_CP	;
LEN_HANDLE_ROUTINES EQU ($-HANDLE_ROUTINES)/2
					;
RESIDENT_END  DW   OFFSET EOF_MARKER	; POINTER TO SEG:OFFSET OF CODE END!
RESIDENT_ENDS DW   SEG CODE		;
					;
DEVICE_ID_INDEX DW	0		; INDEX VALUE FOR DEVICE SUB-TYPE

EndMemSeg	dw	?		;address of the top of memory
					;passed in BreakAddr as input

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	INCLUDE FILES
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	INCLUDE MACROS.INC		; GENERAL PURPOSE 'MACROs'
	INCLUDE DEF-EQU.INC		; CPS DRIVER STRUCTURES AND EQUATES
	INCLUDE TABLES.INC		; DEVICE SUB-TYPE CONFIGURATION TABLES
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	INITIALIZATION ROUTINE
;
;	THE INIT PROC IS CALLED BY THE DEVICE DRIVER DURING DOS BOOT TIME!
;	THE CALL WILL BE MADE ONCE, AND ONLY ONCE.  THEREFORE, WHEN THIS
;	CODE IS COMPLETED, IT IS DISCARDED INTO THAT 'great bit bucket
;	in the sky!
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
INIT	PROC				;
	PUSH	DS			;
					;
	PUSH	CS			;
	POP	DS			; FIRST SET DS = CS
					;
	PUSH	BX			; WGR				       ;AN000;
	CALL	SYSLOADMSG		; WGR load messages		       ;AN000;
	JNC	INIT_00 		; WGR if no error then continue..      ;AN000;
	CALL	SYSDISPMSG		; WGR display error message..	       ;AN000;
	POP	BX			; WGR				       ;AN000;
        JMP     short INIT_1            ; WGR exit with error status           ;AN000;
INIT_00:				; WGR				       ;AN000;
	POP	BX			; WGR				       ;AN000;
	MOV	RESIDENT_ENDS,CS	; SET INITIAL RESIDENT END SEGMENT
					;
	LES	DI,DWORD PTR BUF.RH_PTRO; GET RH

	mov	ax,es:[di].RH0_ENDS
	mov	EndMemSeg,ax		;get top of memory segment

	CALL	PARSER			;
	JC	INIT_1A 		;
					;
	MOV	SI,OFFSET TABLE 	; ADDRESS [ TABLE 1 ]
	MOV	CX,[SI].NUM_DEVICES	; CHECK THE NUMBER OF DEVICES SPECIFIED
	CMP	CX,ONE			; IF <> 1, THEN WE HAVE A PROBLEM...
	JNE	INIT_1A 		; ERROR
	MOV	SI,[SI].DEVICE1_OFFSET	; MOVE FROM [ TABLE 1 ] TO [ TABLE 2 ]
	MOV	CX,[SI].NUM_ITEMS	;
	LEA	DI,HANDLE_ROUTINES	;
					;
INIT_0: CALL	CS:[DI] 		; CALL ROUTINE WITH '[SI].OFFSET_LIST'
					;
	JC	INIT_1			; ERROR IN ROUTINE (COMMAND_LINE)
	INC	SI			; ADVANCE POINTERS FOR CALL AND
	INC	SI			; THE OFFSET_LIST!
	INC	DI			;
	INC	DI			;
	LOOP	INIT_0			;
					;
	CALL	INSTALL_ID		; CONFIGURE DEVICE DRIVER FOR MATCHED
	JC	INIT_1			; DISPLAY ADAPTER!
					;
	PUSH	BX			;
	MOV	AH,15			; PERFORM CALL TO GET ACTIVE MODE
	INT	10H			;
	MOV	MODE_VALUE,AL		; SET IT IN THE INT10COM.INC ROUTINE
	POP	BX			;
					;
        jmp     short INIT_2                  ;
					;
INIT_1A:				;
	PUSH	AX			; WGR				       ;AN000;
	PUSH	DX			; WGR				       ;AN000;
	MOV	AX,ERROR_2		; PARSING ERROR CONDITION	       ;AN000;
	MOV	DH,UTILITY_MSG_CLASS	; WGR				       ;AN000;
	CALL	ISSUE_MESSAGE		; WGR				       ;AN000;
	POP	DX			; WGR				       ;AN000;
	POP	AX			; WGR				       ;AN000;
					;
INIT_1: XOR	AX,AX			; CLEAR ERROR CODE TO BE RETURNED
	LES	DI,DWORD PTR BUF.RH_PTRO; GET RH
	MOV	RH.RH0_ENDO,AX		; OFFSET = 0
	MOV	RH.RH0_ENDS,CS		;
	MOV	RH.RH0_UNIT,AL		; SET 0 UNITS....
					;
	CMP	NOT_CPS_ID,OFF		; WGR did we find a non-CPS id?        ;AN000;
	JNE	INIT_1B 		; WGR yes....do not set an error       ;AN000;
	OR	BUF.STATUS,103H 	; SET INIT ERROR OCCURRED
        JMP     short INIT_1C           ; WGR                                  ;AN000;
					;
INIT_1B:				;
	OR	BUF.STATUS,AX		; WGR no error code..but do not load   ;AN000;
;	 mov	 RH.RH0_SYSINIT_MSG, 0	 ;AN001;AN002; Ask IBMBIO not to show "Error in CONFIG.SYS lines= #" message
INIT_1C:				;
	PUSH	DI			; 'DETACH' THE LINK LIST TO THE
	MOV	AX,-1			; NEXT DEVICE NAME....THIS MAY not
	LEA	DI,DEV_HDR		; NEED TO BE RESET FOR INIT ERROR....
	MOV	CS:[DI],AX		;
	MOV	CS:[DI+2],AX		;
	POP	DI			;
	STC				; SET CY TO INDICATE FNC DONE
	POP	DS			;
	RET				;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	NOW MOVE ONTO INSTALLATION OF INT 2F HEX
;
;	SINCE WE ARE GOING TO CHAIN THE INTERRUPT 2FH VECTOR,
;	IT IS IMPORTANT THAT THE lower LEVEL IS VALID!	THIS
;	IS VERIFIED BY SEEING IF THE ORIGINAL VECTOR <> 0000:0000.
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
INIT_2: PUSH	ES			;
	XOR	AX,AX			; SET ES TO INTERRUPT REGION
	MOV	ES,AX			;
	MOV	AX,ES:WORD PTR INT_2F_LOW;GET OFFSET VALUE OF INT 2F hex
	MOV	CS:ROM_INT_2F,AX	;		&
	MOV	CX,ES:WORD PTR INT_2F_HI;   ALSO THE SEGMENT VALUE
	MOV	CS:ROM_INT_2F+2,CX	;
	OR	AX,CX			; IS INT 2F hex = 0 ?
	JNE	INIT_6			;
	MOV	AX,OFFSET ABORT 	; YES:	USE IRET AS THE LOWER CODE
	MOV	CS:ROM_INT_2F,AX	;	REFER TO ABORT LABEL FOR IRET!
	MOV	AX,CS			;
	MOV	CS:ROM_INT_2F+2,AX	;
INIT_6: CLI				; NEXT CHANGE THE ACTIVE INT 2F hex
	MOV	ES:WORD PTR INT_2F_LOW,OFFSET INT_2F_COM;
	MOV	ES:WORD PTR INT_2F_HI,CS; TO THE NEWLY LOADED CODE (INT2FCOM)
	STI				; (with interrupts off, of course)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	READ THE INTERRUPT 1F HEX FOR INT10COM MODULE
;	THIS IS READ DURING INITIAL LOAD TO RECORD THE
;	DEFAULT VALUE.	THE CPS SUPPORT WILL not CHANGE
;	THE INT 1F HEX VECTOR IF IT WAS CHANGED FROM
;	THIS VALUE....ie. GRAFTABL.COM or other HAS THE
;	VECTOR.
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	MOV	CX,ES:WORD PTR INT_1F_LOW; GET OFFSET OF INTERRUPT 1FH
	MOV	CS:ROM_INT_1F,CX	;	    &
	MOV	CS:OLD_INT_1F,CX	;
	MOV	CX,ES:WORD PTR INT_1F_HI; SEGMENT OF INTERRUPT 1FH
	MOV	CS:ROM_INT_1F+2,CX	;
	MOV	CS:OLD_INT_1F+2,CX	;
					;
	MOV	CX,ES:WORD PTR INT_44_LOW; GET OFFSET OF INTERRUPT 44H
	MOV	CS:ROM_INT_44,CX	;	    &
	MOV	CX,ES:WORD PTR INT_44_HI; SEGMENT OF INTERRUPT 44H
	MOV	CS:ROM_INT_44+2,CX	;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	NOW MOVE ONTO INSTALLATION OF INT 10 HEX
;	THE INT 10H VECTOR IS TAKEN TO MONITOR THE
;	MODE_SET INTERFACE (AH=0).  THIS IS THE KEY
;	TO THE CPS SUPPORT MECHANISM...ie. THE ACTIVE
;	CODE PAGE IS LOADED EVERYTIME A MODE_SET OCCURS!
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	MOV	CX,ES:WORD PTR INT_10_LOW; GET OFFSET OF INT 10H
	MOV	CS:ROM_INT_10,CX	;	   &
	MOV	CX,ES:WORD PTR INT_10_HI;  SEGMENT OF INT 10H
	MOV	CS:ROM_INT_10+2,CX	;
	CLI				; INSTALL THE NEW INT 10H CODE
	MOV	ES:WORD PTR INT_10_LOW,OFFSET INT_10_COM;
	MOV	ES:WORD PTR INT_10_HI,CS;
	STI				; (with interrupts off, of course)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	INSTALL THE DEVICE DRIVER CODE.  THE RESIDENT_END
;	VALUE HAS BEEN SET TO:
;
;		1 - REDUCED_SUPPORT used when #DESG = 0 (CGA, MONO)
;		2 - LAST DESIGNATED BUFFER - calculated by #DESG x #FONTS
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	POP	ES			; RESTORE THE ES REGISTER
	LES	DI,DWORD PTR BUF.RH_PTRO; GET REQUEST HEADER ADDRESS
	MOV	AX,RESIDENT_END 	; GET OFFSET OF RESIDENT END
	MOV	RH.RH0_ENDO,AX		;
INIT_7: MOV	AX,RESIDENT_ENDS	; GET SEGMENT OF RESIDENT END
	MOV	RH.RH0_ENDS,AX		;
	STC				; CY = 1, CALL FULLY SERVICED = ON
	POP	DS			;
	RET				;
INIT	ENDP				;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	DEVICE NAME PARSING IS LIMITED ONLY TO 1 DEVICE NAME
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
DEVICE_NAMES	DB	"CON     "      ; ONLY ONE VALID NAME FOR DEVICE...
L_DEVICE_NAMES	EQU ($-DEVICE_NAMES)	;
N_DEVICE_NAMES	EQU ($-DEVICE_NAMES)/L_DEVICE_NAMES
					;
HANDLE_DEVICE_NAME PROC 		; [ TABLE 3 ]
	PUSH	CX			;
	PUSH	SI			;
					;
	MOV	SI,[SI].OFFSET_LIST	;
	MOV	CX,[SI] 		; TEST THAT DEVICE NAME IS 8 BYTES
					;
	CMP	CX,L_DEVICE_NAMES	;
	JNE	H_DN_0			; LEN(DEVICE_NAME) <> 8, THEN ERROR
					;
	PUSH	ES			;
	PUSH	DI			;
					;
	PUSH	CS			;
	POP	ES			;
	LEA	DI,DEVICE_NAMES 	; SET COMPARE STRING TO "CON     "
	INC	SI			;
	INC	SI			; ADVANCE SI TO POINT TO DEVICE_NAME
	REPE	CMPSB			; CHECK OUT THE 1 NAME.....
	POP	DI			;
	POP	ES			;
	JNE	H_DN_0			;
					;
	POP	SI			;
	POP	CX			;
	CLC				;
	RET				;
H_DN_0: POP	SI			;
	POP	CX			;
	CALL	ISSUE_ERROR_1		; ERROR OCCURRED...NOW ISSUE THE MESG
					;
	STC				; TELL CALLER ABOUT ERROR!
	RET				;
HANDLE_DEVICE_NAME ENDP 		;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	THIS ROUTINE IS USED TO VERIFY THE ADAPTER 'NAME' AGAINST
;	THE SUPPORTED ONES.  IF A MATCH IS FOUND THEN THE APPROPRIATE
;	CONFIGURATION TABLE IS LOADED INTO RESIDENT MEMORY, ELSE THE
;	'CY' FLAG IS SET AND AN ERROR IS ISSUED.
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ID_NAMES	DB	"EGA     "      ;
L_ID_NAMES	EQU ($-ID_NAMES)	;
		DB	"EGA 8   "      ; INTERNAL USE ONLY
		DB	"EGA 14  "      ; INTERNAL USE ONLY
		DB	"EGA 14M "      ; INTERNAL USE ONLY
		DB	"LCD     "      ;
		DB	"MONO    "      ;
		DB	"CGA     "      ;
N_ID_NAMES	EQU ($-ID_NAMES)/L_ID_NAMES
					;
HANDLE_DEVICE_ID   PROC 		; [ TABLE 4 ]
	PUSH	DI			;
	PUSH	CX			;
	PUSH	SI			;
					;
	CALL	MODIFY_ID_NAME		; THIS CALL IS USED TO CONVERT THE
	JC	HDID_4			; 'EGA' CLASS TYPE INTO SUB-CATEGORY'S
					;
	MOV	SI,[SI].OFFSET_LIST	;
	MOV	CX,[SI] 		; TEST THAT ID_NAME IS 8 BYTES
	CMP	CX,L_ID_NAMES		;
	JNE	HDID_4			;
					;
	INC	SI			;
	INC	SI			; ADVANCE SI TO POINT TO ID_NAME
					;
	LEA	DI,ID_NAMES		; SET COMPARE STRING TO "DEVICEID"
	MOV	CX,N_ID_NAMES		;
					;
HDID_0: PUSH	DI			; SAVE REGISTERS BETWEEN PASSES
	PUSH	ES			;
	PUSH	SI			;
	PUSH	CX			;
					;
	PUSH	CS			;
	POP	ES			;
	MOV	CX,L_ID_NAMES		;
	REPE	CMPSB			; TEST NAME (ALL 8 BYTES) AGAINST
					; THE NEXT NAME!
	POP	CX			;
	POP	SI			;
	POP	ES			;
	POP	DI			;
	JE	HDID_1			;
	ADD	DI,L_ID_NAMES		;
	LOOP	HDID_0			; TRY ALL ENTRIES FOR A MATCH...
HDID_4: 				;
	CMP	NOT_CPS_ID,ON		; WGR did we find a non-CPS id?        ;AN000;
	JNE	HDID_5			; WGR no...not the problem..continue   ;AN000;
	STC				; WGR yes...so no message...but..      ;AN000;
        JMP     short HDID_6            ; WGR set error for return             ;AN000;
					;
HDID_5: 				; WGR				       ;AN000;
	POP	SI			; IF NONE WERE FOUND, THEN ERROR...
	POP	CX			;
	POP	DI			;
					;
	DEC	SI			; BACK TO SUB-TYPE ID AND ISSUE
	DEC	SI			; THE ERROR MESSAGE.
	CALL	ISSUE_ERROR_1		;
	STC				; INFORM CALLER ABOUT THE ERROR!
	RET				;
HDID_1: SUB	CX,N_ID_NAMES		; ID NAME HAS BEEN FOUND
	NEG	CX			; NORMALIZE CX FOR TABLE INDEXING!!
					;
	MOV	DEVICE_ID_INDEX,CX	;
	CLC				;
HDID_6: 				; WGR				       ;AN000;
	POP	SI			;
	POP	CX			;
	POP	DI			;
	RET				;
HANDLE_DEVICE_ID   ENDP 		;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	THIS ROUTINE CHECKS THE HARDWARE CP VALUE (if specified)!
;	THE VALUE OF THE HARDWARE CP IS NOT VERIFIED, ALLOWING
;	FUTURE ADAPTERS WITH non-437 HARDWARE PAGES.
;
;	IF #HDWR_CP > 1 (FOR ANY DEVICES IN RELEASE 1.00) THEM
;		ERROR
;	   ELSE
;		RECORD VALUE (1 WORD)
;	ENDIF
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
HANDLE_HDWR_CP	   PROC 		; [ TABLE 5 ]
	PUSH	CX			;
	PUSH	SI			;
	MOV	SI,[SI].OFFSET_LIST	;
	MOV	CX,[SI] 		; GET THE NUMBER OF HDWR_CP'S
	CMP	CX,CPD_HDWR_N_MAX	; TEST IF GREATER THAN MAX ALLOWED!
	JA	H_HC_0			;
					;
	CMP	CX,1			; CHECK THE NUMBER OF HDWR CP's
	JA	H_HC_0			; IF MORE THAN ONE..THEN WE HAVE A
					; PROBLEM....TELL USER!
	PUSH	CX			;
	MOV	CX,[SI+2]		; GET THE ACTUAL HARDWARE CP
	CMP	CX,-1			; IS IT INVALID???
	POP	CX			;
	JE	H_HC_0			;
					;
	PUSH	ES			;
	PUSH	DI			;
					;
	PUSH	CS			;
	POP	ES			;
	LEA	DI,CPD_HDWR_N		; POINT DESTINATION TO INTERNAL TABLE
	INC	CX			; ALSO ACCOUNT FOR COUNT N
	REP	MOVSW			; SI ALREADY POINTS TO 'N,CP1,CP2..'
					;
	POP	DI			;
	POP	ES			;
					;
	POP	SI			;
	POP	CX			;
	CLC				;
	RET				;
H_HC_0: POP	SI			;
	POP	CX			;
					;
	PUSH	SI			; HARDWARE CP IN ERROR, PUT 'SI'
	DEC	SI			; BACK TO SUB-TYPE ID AND ISSUE
	DEC	SI			; THE ERROR MESSAGE.
	DEC	SI			; BACK TO SUB-TYPE ID AND ISSUE
	DEC	SI			; THE ERROR MESSAGE.
	CALL	ISSUE_ERROR_1		;
	POP	SI			;
	STC				;
	RET				;
HANDLE_HDWR_CP	   ENDP 		;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	THIS ROUTINE CHECKS THE LAST PARAMETER IN THE COMMAND LINE
;	IT CONTAINS THE INFORMATION FOR THE NUMBER OF DESIGNATES AND
;	AND THE NUMBER OF DISPLAY FONTS TO BE USED.  ONLY MINIMAL
;	ERROR CHECKING OCCURS HERE.
;
;	THE FOLLOWING IS A LIST OF THE POSSIBLE VALUE IN 'OFFSET_LIST'
;	==============================================================
;
;	COND:	    # 1 		 # 2		      # 3
;		-----------------|--------------------|-----------------
;	TABLE:	   DW	0		DW   1		     DW   2
;		   DW	?		DW   n		     DW   n
;		   DW	?		DW   ?		     DW   m
;
;	DETAILS:   no parameters	only #desg	     both #desg
;		   specified.		specified	     & #font specified
;
;	RESULT:    #DESG = 0		#DESG = n	     #DESG = n
;		   #FONT = 0 (maximum)	#FONT = 0 (maximum)  #FONT = m
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
HANDLE_DESG_CP	   PROC 		; [ TABLE 6 ]
	PUSH	AX			;
	PUSH	CX			;
	PUSH	DX			;
	PUSH	SI			;
	MOV	SI,[SI].OFFSET_LIST	;
					;
	MOV	CX,-1			; SET #DESG DEFAULT = 1
	MOV	DX,-1			; SET #FONT DEFAULT = 0 (maximum)
	MOV	AX,[SI] 		; GET DESCRIPTOR FOR PARAMETER LIST
					;
	OR	AX,AX			; CHECK FOR <CONDITION #1>
	JE	H_DC_2			; SET DRIVER TO DEFAULTS
					;
	MOV	CX,[SI+2]		;
	CMP	CX,CPD_DESG_N_MAX	; CHECK IF THIS VALUE IS ABOVE MAXIMUM!
	JA	H_DC_5			;
	CMP	AX,ONE			; CHECK FOR <CONDITION #2>
	JE	H_DC_2			; SET DRIVER TO DEFAULTS
					;
	MOV	DX,[SI+4]		; HAS TO BE <CONDITION #3>
					;
H_DC_2: MOV	CPD_DESG_N,CX		; RECORD THE #DESG & THE
	MOV	CPD_FONTS_N,DX		; THE #FONT FROM THE SET VALUES
					;
	POP	SI			;
	POP	DX			;
	POP	CX			;
	POP	AX			;
	CLC				;
	RET				;
H_DC_5: POP	SI			;
	POP	DX			;
	POP	CX			;
	PUSH	DX			; WGR				       ;AN000;
	MOV	AX,ERROR_3		; WGR				       ;AN000;
	MOV	DH,UTILITY_MSG_CLASS	; WGR				       ;AN000;
	CALL	ISSUE_MESSAGE		; WGR				       ;AN000;
	POP	DX			; WGR				       ;AN000;
	POP	AX			; WGR				       ;AN000;
	STC				;
	RET				;
HANDLE_DESG_CP	   ENDP 		;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	INSTALL_ID
;
;	THIS ROUTINE PERFORMS THE DISPLAY_CONFIG TABLE
;	LOAD WHICH IS USED FOR THE REMAINDER OF THE SESSION
;
;	INPUT:
;		DEVICE_ID_INDEX = INDEX TO LIST OF SUPPORTED DEVICES
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
INSTALL_ID	   PROC 		; ROUTINE TO INSTALL INFO FOR DEVICE
	CALL	INSTALL_TABLE		;
	JNC	INSI_3			;
					;
	PUSH	SI			;
	MOV	SI,OFFSET TABLE 	; ADDRESS [ TABLE 1 ]
	MOV	SI,[SI].DEVICE1_OFFSET	; MOVE FROM [ TABLE 1 ] TO [ TABLE 2 ]
;	INC	SI			;
;	INC	SI			;
	CALL	ISSUE_ERROR_1		;
	POP	SI			;
	STC				;
INSI_3: RET				;
INSTALL_ID	   ENDP 		;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
INSTALL_TABLE	PROC			;
	PUSH	AX			;
	PUSH	CX			;
	PUSH	DX			;
	PUSH	DI			;
	PUSH	SI			;
	PUSH	DS			;
	PUSH	ES			;
					;
	PUSH	CS			;
	POP	DS			;
	PUSH	CS			;
	POP	ES			;
					;
	MOV	AX,DEVICE_ID_INDEX	;
	MOV	CX,DC_ENTRY		;
	MUL	CX			;
	LEA	CX,DISPLAY_CONFIG	;
	ADD	CX,AX			;
	ADD	CX,8			; ACCOUNT FOR 8 CHARACTER NAME
	MOV	DI,CX			;
					;
	CALL	INSTALL_MEMORY		;
	JC	IT_5			;
					;
	INC	DI			; ACCOUNT FOR ENCODED MEMORY BYTES
	MOV	SI,[DI] 		;
	PUSH	DI			;
	MOV	CX,NUM_MODES		;
	LEA	DI,LOAD_MECH		; DUPLICATE LOAD_MECH TABLE
	REP	MOVSB			;
	POP	DI			;
	MOV	SI,[DI+2]		;
	MOV	CX,NUM_MODES		;
	LEA	DI,FONT_SIZE		; DUPLICATE FONT_SIZE TABLE
	REP	MOVSB			;
	CLC				;
					;
IT_5:	POP	ES			;
	POP	DS			;
	POP	SI			;
	POP	DI			;
	POP	DX			;
	POP	CX			;
	POP	AX			;
	RET				;
INSTALL_TABLE	ENDP			;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	INSTALL MEMORY
;
;	ENTRY:
;		ES : DI = POINTER TO ENCODED SCAN LINES ALLOWED
;	EXIT:
;		CREATION OF CPD_FONT_PNTER TABLE
;		CALCULATION OF RESIDENT_END VALUE
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
MEMORY_SIZE_INDEX LABEL WORD		; THIS CORRESPONDS TO THE MEM RQMENTS
	DW	0,0,0,0 		;
	DW     19*256+6 		;
	DW     16*256+6 		;
	DW     14*256+6 		;
	DW	8*256+6 		; BYTE IN 'TABLES.SRC'.
NUM_MEMORY_SIZE EQU ($-MEMORY_SIZE_INDEX)/2
					;
INSTALL_MEMORY	PROC			;
	PUSH	AX			;
	PUSH	BX			;
	PUSH	CX			;
	PUSH	DX			;
	PUSH	SI			;
	PUSH	DI			;
	PUSH	ES			;
					;
	PUSH	CS			;
	POP	ES			; SET EXTRA SEGMENT
					;
	MOV	AL,[DI] 		; GET ENCODED VALUE FROM TABLE
	CALL	ASK_BIOS_SCAN_LINES	; IF PERMITTED...BIOS KNOWS SCAN LINES
					;
IM_0Y:	PUSH	AX			;
;       PUSH    CX                      ;
	MOV	CX,NUM_MEMORY_SIZE	; COUNT THE NUMBER OF FONTS POSSIBLE
	XOR	DX,DX			; DX (INIT=0) WILL = #DIF FONT TYPES
IM_0A:	SAL	AL,1			;
	JNC	IM_0B			;
	INC	DX			;
IM_0B:	LOOP	IM_0A			;
;       POP     CX                      ;
	POP	AX			;
					; ELSE, STAY WITH INITIAL VALUE!!!!
	MOV	CX,CPD_FONTS_N		; FIRST CHECK TO SEE IF #FONTS>TYPE
	CMP	CX,DX			; FIND OUT IF > ALLOWED...
	JBE	IM_0P			; IF NOT, THEN
	MOV	CX,-1			; SET BACK TO DEFAULT VALUE
					;
IM_0P:	CMP	CX,-1			; CHECK FOR FONTS = DEFAULT VALUE
	JNE	IM_0R			;
	MOV	CPD_FONTS_N,DX		; SET TO THE MAXIMUM FOR THE HARDWARE
					;
IM_0R:	MOV	CX,CPD_DESG_N		;
	CMP	CX,-1			; CHECK FOR #DESG = DEFAULT VALUE
	JNE	IM_0T			;
	MOV	CPD_DESG_N,DX		; DX = #FONTS ALLOWED FOR THIS DEVICE
	OR	DX,DX			; TEST IF > 0 ?
	JZ	IM_0T			;
	MOV	CPD_DESG_N,ONE		;
					;
IM_0T:	CMP	CPD_DESG_N,ZERO 	; TEST VALUE OF DESIGNATED CP's

;Myyy;	JE	IM_8			; IF THE #DESG=0, THEN REDUCED SUPPORT
	jne	@f			;Myyy
	jmp	IM_8			;Myyy
@@:					;Myyy

	CMP	CPD_FONTS_N,ZERO	; TEST VALUE OF FONTS, (knowing DESG>0)

;Myyy;	JE	IM_9			; ERROR OCCURRED!!!
	jne	@f			;Myyy
	jmp	IM_9			;Myyy
@@:					;Myyy

IM_0:	MOV	BX,CPD_FONTS_N		; BX=#FONTS REQUESTED
	MOV	CX,NUM_MEMORY_SIZE	; CX = 8 BITS
	LEA	SI,MEMORY_SIZE_INDEX	; SI SETUP FOR MEMORY VALUES, CX=#FONTS
	XOR	DX,DX			; DX=buffer size (INIT=0)
IM_1:	SAL	AL,1			; TEST NEXT BIT FOR ACTIVATION
	JNC	IM_2			; IF NOT ON...THEN IGNORE
	OR	BX,BX			; TEST IF MORE FONTS REQUESTED...
	JE	IM_2			;
	DEC	BX			; LESS #FONTS REQUESTED BY ONE
	ADD	DX,[SI] 		; AND ADD THE LARGEST BUFFER SIZE ON
IM_2:	INC	SI			; ADVANCE MEMORY INDEX POINTER
	INC	SI			; ADVANCE MEMORY INDEX POINTER
	LOOP	IM_1			;
					;
	MOV	AX,DX			; SET AX=completed buffer size
					;
IM_5:	MOV	CX,CPD_DESG_N		; NOW, SETUP POINTERS & CALC FONT BUFFER
	LEA	SI,CPD_FONT_PNTER	; FIND THE DATA_POINTERS
	MOV	DX,RESIDENT_END 	; GET LAST USEABLE ADDRESS

; First try to allocate the buffer in HMA.  If not enough space then
; allocate the buffer in conventional memory.

        push    es
        pop     bx

IM_6:
        push    bx                      ; save es (code segment)

        xchg    ax,bx                   ; bx <-- ax
        mov     ax,4a02h
        int     2fh                     ; ask for suballocation in HMA

        xchg    ax,bx                   ; ax = size of code page buffer
        pop     bx                      ; needed for RESIDENT_ENDS
        cmp     di,-1                   ; if di = 0ffffh means not enough HMA
        je      std_alloc               ; then do the conventional alloc

        mov     [si],di                 ; save the buffer's pointer
        mov     [si+2],es
        jmp     short next_buf

std_alloc:                              ;

;       PUSH    BX                      ; SAVE VALUE OF BX FOR RESTORATION...
;       MOV     BX,ES                   ; SET ES TO BX SO PNTER IS 'BX:DX'
        PUSH    DX                      ; SET SEGMENT:OFFSET OF BUFFER 'X'
	SHR	DX,1			; STRIP OFF LOW 4 BITS OF OFFSET....
	SHR	DX,1			; TO TOP OFF THE 'ES' SEGMENT REGISTER
	SHR	DX,1			;
	SHR	DX,1			;
	ADD	BX,DX			; AND MINIMIZE VALUE OF OFFSET
	POP	DX			;
	AND	DX,000FH		; THIS IS DONE TO PREVENT STRADDLING
			 		; A SEGMENT BOUNDARY WITH THE DATA BUF
	MOV	[SI],DX 		;
	MOV	[SI+2],BX		;
					;
	ADD	DX,AX			;

;
;Myyy - Begin changes
;Check if buffer segment is above end of memory
;
	push	dx
	add	dx,15			;round up
	shr	dx,1			;to nearest para
	shr	dx,1
	shr	dx,1
	shr	dx,1
	add	dx,bx
	jnc	no_ovfl		;no overflow, we are ok
	pop	dx			;overflow, insufficient memory
	jmp	short IM_9
no_ovfl:
	cmp	dx,EndMemSeg		;Seg > EndMem?
	pop	dx
	ja	IM_9			;yes, not enough memory
;
;Myyy - End changes
;
next_buf:
	ADD	SI,4			;
	LOOP	IM_6			;
					;
IM_7A:	MOV	RESIDENT_END,DX 	; SET FINAL OFFSET & SEGMENT TO
	MOV	RESIDENT_ENDS,BX	; TERMINATE THE 'INIT' WITH
;       POP     BX                      ;
	CLC				;
        jmp     short IM_A                    ;
					;
IM_8:	MOV	DX,REDUCED_SUPPORT	; SET POINTER TO REDUCED SUPPORT
;       PUSH    BX                      ;
	MOV	BX,ES			;
	JUMP	IM_7A			;
					;
IM_9:	STC				;
IM_A:	POP	ES			;
	POP	DI			;
	POP	SI			;
	POP	DX			;
	POP	CX			;
	POP	BX			;
	POP	AX			;
	RET				;
INSTALL_MEMORY	ENDP			;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	     ; WGR
;						     ; WGR
;	ISSUE MESSAGE				     ; WGR
;						     ; WGR
;	THIS ROUTINE IS USED TO PERFORM THE MESSAGE  ; WGR
;	RETRIVER.				     ; WGR
;						     ; WGR
;	INPUT:					     ; WGR
;		AX = MESSAGE NUMBER		     ; WGR
;		DH = MESSAGE CLASS		     ; WGR
;						     ; WGR
;	OUTPUT: 				     ; WGR
;		none				     ; WGR
;						     ; WGR
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;	     ; WGR
ISSUE_MESSAGE	   PROC 		;	     ; WGR		       ;AN000;
	PUSH	DS			; WGR				       ;AN000;
	PUSH	BX			; WGR				       ;AN000;
	PUSH	CX			; WGR				       ;AN000;
	PUSH	CS			; WGR				       ;AN000;
	POP	DS			; WGR				       ;AN000;
	MOV	BX,STDERR		; WGR				       ;AN000;
	XOR	CX,CX			; WGR				       ;AN000;
	XOR	DL,DL			; WGR				       ;AN000;
	CALL	SYSDISPMSG		; WGR				       ;AN000;
	POP	CX			; WGR				       ;AN000;
	POP	BX			; WGR				       ;AN000;
	POP	DS			; WGR				       ;AN000;
	RET				; WGR				       ;AN000;
ISSUE_MESSAGE	   ENDP 		;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	ISSUE_ERROR_1
;
;	THIS IS USED TO CONSTRUCT AND OUTPUT THE ERROR MESSAGE;
;
;	DEVICE_ID + 'code page driver cannot be initialized'
;
;	THE DEVICE_ID IS PULLED FROM THE COMMAND_PARSER.  IF ONE
;	IS NOT DEFINED OR UNREADABLE, THEN A CONDENSED MESSAGE
;	WITHOUT THE DEVICE_ID IS USED.
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

SUB_SIZE	EQU	11		; WGR sublist size		       ;AN000;
LEFT_ASCIIZ	EQU	00010000B	; WGR left-aligned asciiz string       ;AN000;
UNLIMITED	EQU	0		; WGR unlimited message size.	       ;AN000;
					; WGR				       ;AN000;
SUBLIST LABEL	DWORD			; WGR				       ;AN000;
	DB	SUB_SIZE		; WGR				       ;AN000;
	DB	0			; WGR				       ;AN000;
MSG_PTR DW	?			; WGR				       ;AN000;
MSG_SEG DW	SEG CODE		; WGR				       ;AN000;
	DB	1			; WGR				       ;AN000;
	DB	LEFT_ASCIIZ		; WGR				       ;AN000;
	DB	UNLIMITED		; WGR				       ;AN000;
	DB	1			; WGR				       ;AN000;
	DB	" "                     ; WGR                                  ;AN000;
					;
ISSUE_ERROR_1	PROC			;
	PUSH	AX			;
	PUSH	BX			; WGR				       ;AN000;
	PUSH	CX			;
	PUSH	DX			;
	PUSH	SI			;
					;
	MOV	SI,[SI].OFFSET_LIST	; POINT TO NAME TO PRINTOUT
	INC	SI			;
	INC	SI			;
					;
	PUSH	SI			;
	MOV	CX,8			; MAX LENGTH OF NAME
	MOV	AL,' '                  ;
IN_0:	CMP	[SI],AL 		;
	JBE	IN_3			;
	INC	SI			;
	LOOP	IN_0			;
IN_3:	MOV	AL,ZERO 		; SET  0  TO TERMINATE ASCII STRING
	MOV	[SI],AL 		; OVERWRITE LAST BYTE - THIS AFFECTS
					; DATA IMMEDIATELY AFTER NAME.	NOT
					; IMPORTANT SINCE FOLLOWING DATA IS IN
					; ERROR
	POP	SI			; GET START OF NAME
	MOV	MSG_PTR,SI		; WGR				       ;AN000;
	MOV	MSG_SEG,CS		; WGR				       ;AN000;
	MOV	AX,ERROR_1		; WGR				       ;AN000;
	MOV	BX,STDERR		; WGR				       ;AN000;
	MOV	CX,ONE			; WGR				       ;AN000;
	XOR	DL,DL			; WGR				       ;AN000;
	LEA	SI,SUBLIST		; WGR				       ;AN000;
	MOV	DH,UTILITY_MSG_CLASS	; WGR				       ;AN000;
	CALL	SYSDISPMSG		; WGR				       ;AN000;
					; WGR				       ;AN000;
	POP	SI			;
	POP	DX			;
	POP	CX			;
	POP	BX			; WGR				       ;AN000;
	POP	AX			;
	RET				;
ISSUE_ERROR_1	ENDP			;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	MODIFY_ID_NAME
;
;	THE USER NEED ONLY SPECIFY THE CLASS OF THE DISPLAY ADAPTER.
;	THE AVAILABLE DESCRIPTIONS ARE 'EGA, LCD, CGA, and MONO'.
;	THIS ROUTINE IS USED TO FURTHER DETAIL WHAT TYPE OF 'EGA'
;	CLASS.	THIS IS USED SPECIFICALLY FOR THE EGA (1501200) ADAPTER
;	AND ITS MANY CONFIGURATION SETTINGS.
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
MODIFY_NAME	DB	"EGA     "      ;
NEW_NAME	DB	"EGA 14M "      ;
		DB	"EGA 14  "      ;
		DB	"EGA 8   "      ;
NUM_NEW_NAME	EQU ($-NEW_NAME)/L_ID_NAMES
					;
NOT_CPS_ID	DB	OFF		; WGR device id does not support CPS   ;AN000;
					;
MODIFY_ID_NAME	PROC			;
	PUSH	DI			;
	PUSH	AX			;
	PUSH	BX			;
	PUSH	CX			;
	PUSH	SI			;
					;
	MOV	SI,[SI].OFFSET_LIST	; GET START OF ID_NAME
	CMP	WORD PTR [SI],EIGHT	; WGR				       ;AN000;
	JE	MIN_00			; WGR				       ;AN000;
	CALL	GET_DEVICE_ID		; WGR				       ;AN000;
	JNC	MIN_00			; WGR CPS id?...yes continue	       ;AN000;
	MOV	NOT_CPS_ID,ON		; WGR no....set flag		       ;AN000;
        JMP     short MIN_4             ; WGR exit with carry set              ;AN000;
MIN_00: 				; WGR				       ;AN000;
	INC	SI			;
	INC	SI			; ADVANCE SI TO POINT TO ID_NAME
					;
	PUSH	SI			; MOVE A COPY OF THE NAME TO CPD_CLASS
	PUSH	ES			; BEFORE IT IS Revised....
	PUSH	CX			;
	PUSH	CS			;
	POP	ES			;
	MOV	CX,L_ID_NAMES		;
	LEA	DI,CPD_CLASS		;
	REP	MOVSB			;
	POP	CX			;
	POP	ES			;
	POP	SI			;
					;
	LEA	DI,MODIFY_NAME		; SET COMPARE STRING TO "EGA     "
					;
	PUSH	DI			; SAVE REGISTERS BETWEEN PASSES
	PUSH	ES			;
	PUSH	SI			;
					;
	PUSH	CS			;
	POP	ES			;
	MOV	CX,L_ID_NAMES		;
	REPE	CMPSB			; TEST NAME (ALL 8 BYTES) AGAINST
					; THE NEXT NAME!
	POP	SI			;
	POP	ES			;
	POP	DI			;
	JNE	MIN_1			; THIS MAY NOT BE THE MATCH....
					;
	CALL	ASK_BIOS_FONT_SIZE	; CHECK IF THIS IS AN ADVANCED EGA?
	JNC	MIN_1			; IF CY=0, THEN ADVANCED...ELSE,
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	MOV	AH,12H			; SET FOR ALTERNATE SELECT, EGA INFO
	MOV	BL,10H			;
	INT	10H			; ASK BIOS FOR INFORMATION
	CMP	BL,10H			; (CHECK IF THIS CALL IS INVALID?)
	JE	MIN_4			; IF BL UNCHANGED, THEN NOT EGA!
					; ELSE, CL=SWITCH SETTINGS
	MOV	AX,L_ID_NAMES		; SET DEFAULT SUB-TYPE TO 1ST ENTRY
	CMP	BH,ONE			; IF ZERO THEN COLOUR, IF ONE THEN MONO
	JE	MIN_0			;
	ADD	AX,L_ID_NAMES		; MOVE TO NEXT SUB-TYPE
	AND	CL,0FH			; STRIP OFF LEADING NIBBLE FROM SWITCH
	CMP	CL,9			; SETTINGS AND TEST FOR 5154 CONFIG
	JE	MIN_0			;
	CMP	CL,THREE		;
	JE	MIN_0			; IF NOT 5154, 5151; THEN MUST BE 5153!
	ADD	AX,L_ID_NAMES		;
					;
MIN_0:	ADD	DI,AX			; SET UP INDEX REGISTER TO NEW SUBTYPE
	PUSH	DS			;
	PUSH	ES			;
					;
	PUSH	CS			;
	POP	ES			;
	XCHG	SI,DI			; SWITCH SOURCE-DESTINATION REGISTERS
	MOV	CX,L_ID_NAMES		;
	REP	MOVSB			; MOVE IN NEW STRING
	POP	ES			;
	POP	DS			;
					;
MIN_1:	CLC				;
        jmp     short MIN_5                   ;
MIN_4:	STC				;
MIN_5:	POP	SI			; IF NOT FOUND, THEN ERROR...
	POP	CX			;
	POP	BX			;
	POP	AX			;
	POP	DI			;
	RET				;
MODIFY_ID_NAME	ENDP			;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
.XLIST
MSG_SERVICES <MSGDATA>			; WGR				       ;AN000;
MSG_SERVICES <DISPLAYmsg,LOADmsg,CHARmsg> ; WGR 			       ;AN000;
MSG_SERVICES <DISPLAY.CL1>		; WGR				       ;AN000;
MSG_SERVICES <DISPLAY.CL2>		; WGR				       ;AN000;
MSG_SERVICES <DISPLAY.CLA>		; WGR				       ;AN000;
.LIST					;
					;
include msgdcl.inc			;
					;
CODE	ENDS				;
	END				;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\dispmes.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
CODE	SEGMENT BYTE PUBLIC 'CODE'      ;
	ASSUME	CS:CODE,DS:CODE 	;
					;
CR	EQU	13			;
LF	EQU	10			;
					;
	PUBLIC	ERROR_1B		;
	PUBLIC	ERROR_1A		;
	PUBLIC	ERROR_2 		;
	PUBLIC	ERROR_3 		;
;;	PUBLIC	MSG_4			;
					;
INCLUDE DISPMES.INC
					;
CODE	ENDS				;
	END				;

=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\int10com.inc ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	INT10COM.INC
;
;	THESE FOLLOWING ROUTINES ARE USED TO LOCATE AND LOAD
;	THE FONTS FOR THE SPECIFIED CODE PAGE.	IT IS DESIGNED
;	TO WORK ON THE FOLLOWING DISPLAY ADAPTERS;
;
;	- EGA 1501200	 (minimal configuration) no expansion card needed
;	- PC Convertible (with LCD display adapter)
;	- plus literally a half-dozen code-named unreleased IBM products
;
;	SUPPORT FOR THE 'CGA' (Colour Graphics Adapter) and
;	'MONO' (Monochrome/Printer Adapter) IS LIMITED TO THE
;	HARDWARE CODE PAGE ONLY (ie. not soft-loadable devices).
;
;	PSEUDO CODE:
;	===========
;	INT_10_PROC STARTS
;		GET MODE (AL=?)
;		CALL rom_int_10
;		GET FONT_SIZE
;		if FONT_SIZE <> 0FFH
;		    if FONT_SIZE = available
;			GET LOAD_MECHANISM
;			if LOAD_MECHANISM = BIOS technique
;			    CALL LOAD_BIOS_CHAR
;			endif
;			if LOAD_MECHANISM = VECTOR technique
;			    CALL LOAD_VECTOR_CHAR
;			endif
;		    endif
;		endif
;		IRET
;	INT_10_PROC ENDS
;
;		 (C)Copyright 1988 Microsoft
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
IF1					;
	%OUT .		     INT10COM.INC
ENDIF

;Modification history *********************************************************
;AN001; P1497 Cursor disappearance problem after codepage switch    10/9/87 J.K.
;******************************************************************************
	PUBLIC	MODE_VALUE		;
	PUBLIC	ROM_INT_10		;
	PUBLIC	ROM_INT_1F		;
	PUBLIC	OLD_INT_1F		;
	PUBLIC	ROM_INT_44		;
	PUBLIC	INT_10_COM		;
	PUBLIC	ASK_BIOS_FONT_SIZE	;
	PUBLIC	ASK_BIOS_SCAN_LINES	;
					;
ROM_INT_10	 DW   ? 		; Int 10H vector offset
		 DW   ? 		; Int 10H vector segment
ROM_INT_1F	 DW   ? 		; Int 1FH vector offset
		 DW   ? 		; Int 1FH vector segment
OLD_INT_1F	 DW   ? 		; OLD Int 1FH vector offset
		 DW   ? 		; OLD Int 1FH vector segment
ROM_INT_44	 DW   ? 		; Int 44H vector offset
		 DW   ? 		; Int 44H vector segment
MODE_VALUE	 DB   ? 		; VALUE OF AL DURING INT 10H (AH=0)
BYTES_PER_CHAR	 DB   ? 		; VALUE OF BYTES/CHARACTER IN MODES
LOAD_MECHANISM	 DB   ? 		; SUPPORT SCHEME FOR ACTIVE MODE
CHARACTER_SOURCE DB   ? 		; FLAG TO INDICATE: 0 = HDWR
					;		    1 = DESG
INVALID_MODE	 EQU  0FFH		;
MASK_BIOS_LOAD	 EQU  00000011b 	;
MASK_VECTOR_LOAD EQU  00110000B 	;
MODE_MASK	 EQU  01111111B 	; GHG Emulator Problem
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	CONFIGURATION TABLES FOR CHARACTER LOADING
;
;	TABLE WILL BE FILLED IN BY INIT.ASM
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	PUBLIC	LOAD_MECH		;
LOAD_MECH	LABEL	BYTE		; RESERVE 32 MODE SETTINGS
		DB	32 DUP(?)	; REFER TO TABLES.INC FOR DETAILS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	CONFIGURATION TABLES FOR CHARACTER SIZES
;
;	TABLE WILL BE FILLED IN BY INIT.ASM
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	PUBLIC	FONT_SIZE		;
FONT_SIZE	LABEL	BYTE		; RESERVE 32 MODE SETTINGS
		DB	32 DUP(?)	; REFER TO TABLES.INC FOR DETAILS
NUM_FONT_SIZES	EQU ($-FONT_SIZE)	;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	INTERRUPT 10H SUPPORT CODE
;
;	THE INIT ROUTINE WILL INSTALL THIS CODE INTO THE
;	INTERRUPT 10H VIDEO BIOS CALL.	IT CHAINS TO THE
;	LOWER LEVEL (usually BIOS for Device Drivers).
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
INT_10_COM	PROC  FAR		;
	STI				;
	OR	AH,AH			; TEST THE SUBFUNCTION CALL=0
	JE	INT_1			; RESERVED FOR THE COM PATH!

; \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
; \\\\\ Start of JV Dialogue code \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
; \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

	; Macro to facilitate router code

	CHECK_FOR macro reg,what,fontsize,procname

		cmp	reg,what
		jne	@F
		mov	al,fontsize
		jmp	procname
	@@:
	ENDM

	; Check if this is 'Char Gen Interface' subfunction ?
	; If not just pass request to Video BIOS code, else
	; check if we're interested in the request of this
	; type and route to the appropriate subroutine.

	cmp	ah,11h
	jne	@@FallToBIOS

	; Assume we're interested, so push AX for
	; interceptor subroutines

	push	ax

	CHECK_FOR al,02h,8, _DoTextFontLoad ; 'Load 8x8  font'
	CHECK_FOR al,01h,14,_DoTextFontLoad ; 'Load 8x14 font'
	CHECK_FOR al,04h,16,_DoTextFontLoad ; 'Load 8x16 font'

	CHECK_FOR al,12h,8, _DoTextFontLoad ; 'Load 8x8  font and program CRTC'
	CHECK_FOR al,11h,14,_DoTextFontLoad ; 'Load 8x14 font and program CRTC'
	CHECK_FOR al,14h,16,_DoTextFontLoad ; 'Load 8x16 font and program CRTC'

	CHECK_FOR al,23h,8, _DoGrpxFontLoad ; 'Load 8x8  font for graphics'
	CHECK_FOR al,22h,14,_DoGrpxFontLoad ; 'Load 8x14 font for graphics'
	CHECK_FOR al,24h,16,_DoGrpxFontLoad ; 'Load 8x14 font for graphics'

	cmp	al,30h		 	      ; 'Get Char Gen info' request ?
	jne	@@FallToBIOSpopAX

	CHECK_FOR bh,03h,8, _DoGetCharGenInfo ; 'Return 8x8  font address'
	CHECK_FOR bh,02h,14,_DoGetCharGenInfo ; 'Return 8x14 font address'
	CHECK_FOR bh,06h,16,_DoGetCharGenInfo ; 'Return 8x16 font address'

@@FallToBIOSpopAX:

	pop	ax

@@FallToBIOS:

; \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
; \\\\\ End of JV Dialogue code \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
; \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

	JMP	DWORD PTR CS:ROM_INT_10 ;
					;
INT_1:					;
	PUSHF				; PREPARE FOR IRET!
	CALL	DWORD PTR CS:ROM_INT_10 ; call routine to handle the command
	PUSH	AX			;
	PUSH	BX			; WGR						 ;AN000;
	MOV	AH,GET_MODE		; WGR get actual mode set			 ;AN000;
	PUSHF				; WGR						 ;AN000;
	CALL	DWORD PTR CS:ROM_INT_10 ; WGR						 ;AN000;
	MOV	CS:MODE_VALUE,AL	; SAVE MODE_VALUE BEFORE CALL
	and	CS:MODE_VALUE,mode_mask ; GHG Emulator Problem.....
	POP	BX			; WGR						 ;AN000;
					;
	CALL	TEST_CP 		; FIND OUT IF CP CAN BE SUPPORTED?
	JNC	INT_2			;
					;
	MOV	CS:CHARACTER_SOURCE,0	; IF AN ERROR OCCURRED IN FINDING THE
	MOV	AL,INTER_1FH		; FONT DATA INFORMATION...THEN THE
	CALL	VECTOR_LOAD		; INTERRUPT 1F hex VECTOR MUST BE
        jmp     short INT_3             ; SET TO THE HDWR CP - ELSE WRONG
					; DATA MAY BE DISPLAYED
INT_2:	MOV	CS:SETMODE_FLAG,OFF	; WGR						 ;AN000;
	CALL	INVOKE_DATA		; IF SO, THEN LOAD THE DATA
INT_3:	POP	AX			;
					;
	IRET				;
INT_10_COM   ENDP			;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	SET BLOCK SPECIFIER = 0
;
;	THIS IS USED TO ACTIVATE BLOCK = 0 FONT.  THIS PERFORMS
;	DIFFERENT OPERATIONS ON VARIOUS DISPLAY ADAPTERS.  THE
;	RESULTS OF WHICH ARE TO ACTIVATE THE DESIGNATED FONT.
;
;	INPUT:
;		none
;	OUTPUT:
;		none
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SET_BLOCK_SP0	PROC			;
	PUSH	AX			;
	PUSH	BX			;
	MOV	AX,1103H		; SET BLOCK SPECIFIER
        xor     bl,bl                   ; CHAR GEN BLOCK SPECIFIER
	INT	10H			; PERFORM CALL...
	POP	BX			;
	POP	AX			;
	RET				;
SET_BLOCK_SP0	ENDP			;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	FIND_FONT
;
;	THE ROUTINE STARTS WITH THE FONT DATA POINTER, AND
;	TRIES TO FIND THE FONT RESOLUTION THAT IS NEEDED.
;	THIS FONT RESOLUTION IS BASED ON THE PRESENT SCREEN
;	MODE WHICH IS ACTIVE.
;
;	INPUT:
;		ES : DI points to beginning
;			of font data
;	OUTPUT:
;		ES : DI points to font data
;			for needed resolution
;		CY = 0	if found
;		   = 1	if not found
;
;		DS = CS assumed
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
FIND_FONT	PROC			;
	PUSH	AX			;
	PUSH	CX			;
	PUSH	DX			;
					;
	MOV	CX,CPD_FONTS_N		; GET NUMBER OF FONT STYLES
FF_0:	MOV	AH,BYTES_PER_CHAR	; GET BYTES_PER_CHAR FOR COMPARISON
					;
	MOV	AL,ES:[DI]		; GET #ROWS OF POINTED DATA
	CMP	AL,AH			; COMPARE BYTES_PER_CHAR AGAINST #ROWS
	JE	FF_3			; IF MATCHED...THEN ADJUST ES:DI (CY=0)
					;
	PUSH	CX			; ELSE, MOVE ES:DI TO NEXT FONT START
	MOV	CX,ES:[DI+4]		; GET count OF CHARACTERS IN LIST
	XOR	AH,AH			; PREPARE AX FOR MULT
	MUL	CX			; CALCULATE DELTA TO NEXT FONT START
	POP	CX			;
					;
	ADD	AX,SIX			; ADD FONT STYLE HEADER OF SIX BYTES
	ADD	DI,AX			; ADJUST THE DI POINTER
					; THERE CAN BE NO CARRY DUE TO STRUCTURE
	LOOP	FF_0			; OF FONT DATA (ie. no straddling)
	STC				;
        jmp     short FF_4                    ;
FF_3:	ADD	DI,SIX			; POINT TO VERY START OF DATA
	CLC				; SET FLAG TO OK!
FF_4:	POP	DX			;
	POP	CX			;
	POP	AX			;
	RET				;
FIND_FONT	ENDP			;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	BIOS_LOAD
;
;	THIS CALL IS USED TO LOAD THE ACTIVE CP.  IT LOADS
;	THE ACTIVE CP WHETHER IT IS DESIGNATED OR HDWR.  THE
;	ACTUAL LOADING OF THE FONT IS PERFORMED BY THE 'EGA CLASS'
;	BIOS ROUTINES (different for some adapters).
;
;	INPUT:
;		AL = ?	load mechanism
;
;		     7 6 5 4 3 2 1 0
;		     0 0 0 0 0 0 x x
;				   1 - AX=1100H
;				  1 = AX=1400H
;
;		ES : DI points to start of font data
;		CX = ?	count of characters to load
;		BH = bytes per character
;		DS = CS assumed...
;
;	OUTPUT:
;		none
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
AX_1100H	EQU	00000001b	;
AX_1400H	EQU	00000010b	;
EGA_INFO	EQU	0487H		; ADDRESS OF INFO BYTE
EGA_ACTIVE	EQU	00001000b	; MASK FOR EGA_ACTIVE/NON-ACTIVE
					;
BIOS_LOAD	PROC			;
	CALL	GET_CURSOR_POS		; ONE MUST RECORD THE CURSOR POS DURING
					; A FONT LOAD...ELSE CURSOR TO (1,1)
	PUSH	BX			;
	PUSH	DX			;
					;
        xor     dx,dx                   ; CHARACTER OFFSET INTO TABLE
        xor     bl,bl                   ; BLOCK TO LOAD (Block=0)
					;
	TEST	AL,AX_1100H		; DETERMINE IF EGA_TYPE LOAD?
	JNZ	BL_00			; IF NOT, THEN TRY FOR LCD_TYPE...
	JMP	BL_3			;
					;
BL_00:	PUSH	BP			; SAVE REGISTERS TO BE USED
	PUSH	AX			;
	CMP	CHARACTER_SOURCE,ZERO	; TEST IF CP = HDWR
	JE	BL_0			;
					;
	MOV	BP,DI			; POINTER TO USER TABLE (ES:BP)
	MOV	AX,1100H		; USER ALPHA LOAD
        jmp     short BL_2                    ;
					;
BL_0:	MOV	AX,1102H		; ROM 8X8 DOUBLE DOT
	CMP	BYTES_PER_CHAR,8	;
	JE	BL_2			;
BL_1:	MOV	AL,01H			; ROM MONOCHROME SET
	CMP	BYTES_PER_CHAR,14	;
	JE	BL_2			;
	MOV	AL,04H			; ROM 8X16 SET
	CMP	BYTES_PER_CHAR,16	;
	JE	BL_2			;
        jmp     short BL_2A                   ; PERFORM BIOS CALL...
					;
BL_2:	PUSH	DS			; THIS TEST VERIFIES THAT THE EGA
	PUSH	AX			; ADAPTER IS PRESENTLY ACTIVE.
	XOR	AX,AX			; IF IT IS NOT, THEN THE EGA WILL
	MOV	DS,AX			; REPROGRAM THE ACTIVE CRT TO THE EGA
	MOV	AL,DS:EGA_INFO		; SPECIFICATION....HAZARDOUS RESULTS!
	AND	AL,EGA_ACTIVE		; MASK FOR EGA ACTIVE/NON-ACTIVE
	POP	AX			;
	POP	DS			;
					;
	JZ	BL_2AA			; IF ZERO, THE EGA IS ACTIVE...AND OK!
	STC				;   ELSE, EGA IS NOT ACTIVE
	POP	AX			;
	POP	BP			; AND WE MUST
        jmp     short BL_7                    ; LEAVE WITH AN ERROR....
					;
BL_2AA:
	CMP	CS:SETMODE_FLAG,OFF	; WGR MODE SET REQUIRED?..			 ;AN000;
	JE	BL_2B			; WGR NO...JUMP TO CHARACTER LOAD.		 ;AN000;
	PUSH	AX			; WGR						 ;AN000;
	PUSH	DS			; WGR						 ;AN000;
	XOR	AX,AX			; WGR						 ;AN000;
	MOV	DS,AX			; WGR						 ;AN000;
	PUSH	DS:[VIDEO_CTRL] 	; WGR						 ;AN000;
	MOV	AL,CS:MODE_VALUE	; WGR GET CURRENT MODE				 ;AN000;
	OR	AL,NOT MODE_MASK	; WGR MODE SET WITHOUT BUFFER CLEARED		 ;AN000;

	call	Info_Ansi_ModeSet	;J.K.Tell ANSI that DISPLAY.SYS is going to call INT 10h, SET MODE function.

	XOR	AH,AH			; WGR MODE SET CALL..				 ;AN000;
	PUSHF				; WGR						 ;AN000;
	CALL	DWORD PTR CS:ROM_INT_10 ; WGR						 ;AN000;

	call	Info_Ansi_ModeDone	;J.K.Tell ANSI that it is through.

	POP	DS:[VIDEO_CTRL] 	; WGR						 ;AN000;
	POP	DS			; WGR						 ;AN000;
	POP	AX			; WGR						 ;AN000;
BL_2B:					; WGR WAS ISSUED (BY ME)			 ;AN000;
	OR	AX,CS:RE_CALC		; WGR INCASE RECALC IS NEEDED.			 ;AN000;
	INT	10H			;
;AN001; EGA ROM BIOS has a bug when AX=1110h, INT 10h is issued.
;	Cursor type is changed to 0C0Dh which causes the cursor to
;	disappear!!!
;	We are going to set Cursor type back to 0607h for EGA.

	cmp	ax, 1110h		;AN001;
	jne	Skip_Cursor_Problem	;AN001;
	push	cx			;AN001;
	mov	ah, 1			;AN001;
	mov	cx, 0607h		;AN001;
	int	10h			;AN001;
	pop	cx			;AN001;

Skip_Cursor_Problem:
	MOV	CS:RE_CALC,OFF		; WGR RESET RE_CALC VALUE			 ;AN000;
	CALL	SET_BLOCK_SP0		; AND THEN SET_BLOCK_SPECIFIER (0)
BL_2A:	POP	AX			;
	POP	BP			;
					;
BL_3:	TEST	AL,AX_1400H		;
	JZ	BL_6			;
					;
	PUSH	AX			; SAVE INDICATOR
					;
	CMP	CHARACTER_SOURCE,ZERO	; TEST IF CP = HDWR
	JE	BL_4			;
					;
	MOV	AX,1400H		; LOAD USER SPECIFIED FONT
        jmp     short BL_5                    ;
					;
BL_4:	MOV	AX,1401H		; ASK FOR ROM LOAD FONT
        xor     bl,bl                   ;
BL_5:	INT	10H			; PERFORM THE LOAD!
	CALL	SET_BLOCK_SP0		; AND ALSO DO THE SET BLOCK SPECIFIER
	POP	AX			;
					;
BL_6:	CLC				;
BL_7:	POP	DX			;
	POP	BX			;
					;
	CALL	SET_CURSOR_POS		; RESTORE THE CURSOR POSITION
	RET				;
BIOS_LOAD	ENDP			;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	ASK_BIOS_INFO
;
;	THIS ROUTINE IS DESIGNED TO MAKE USE OF THE NEW BIOS
;	CALL IN THE '???????' AND FOLLOW-ONS.  REFER TO THE
;	'Personal Systems Architecture' DCR #405 (written
;	by Dave Doria).  IF THIS SUPPORT IS NOT FOUND ON THE
;	DISPLAY ADAPTER, THEN THE CARRY FLAG IS SET!
;
;	INPUT:
;		none
;	OUTPUT:
;		CY = 0 if found
;		     1 if not supported
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
RETURN_INFO	LABEL BYTE		;
	DW	?			; OFFSET  TO STATIC FUNCTIONALITY INFO
	DW	?			; SEGMENT TO STATIC FUNCTIONALITY INFO
	DB	?			; VIDEO MODE
	DW	?			; COLUMNS ON SCREEN
	DW	?			; LEN OF REGEN BUFFER
	DW	?			; START ADDRESS IN REGEN BUFFER
	DW	?			; CURSOR POSITION OF PAGE #0
	DW	?			; CURSOR POSITION OF PAGE #1
	DW	?			; CURSOR POSITION OF PAGE #2
	DW	?			; CURSOR POSITION OF PAGE #3
	DW	?			; CURSOR POSITION OF PAGE #4
	DW	?			; CURSOR POSITION OF PAGE #5
	DW	?			; CURSOR POSITION OF PAGE #6
	DW	?			; CURSOR POSITION OF PAGE #7
	DW	?			; CURSOR MODE SETTING
	DB	?			; ACTIVE DISPLAY PAGE
	DW	?			; CRT CONTROLLER ADDRESS
	DB	?			; CRT_MODE_SET
	DB	?			; CRT_PALETTE
	DB	?			; ROWS ON SCREEN
CHAR_H	LABEL	WORD			;
	DW	?			; CHARACTER HEIGHT
	DB	?			; DISPLAY COMBINATION (ACTIVE)
	DB	?			; DISPLAY COMBINATION (ALTERNATE)
L_RET_INFO	EQU ($-RETURN_INFO)	;
	DB     (40h-L_RET_INFO) DUP (?) ; REMAINING DATA....
					;
STATIC_INFO	STRUC			;
	DB	?			; VIDEO MODES (part 1)
	DB	?			; VIDEO MODES (part 2)
	DB	?			; VIDEO MODES (part 3)
	DB	?			; RESERVED
	DB	?			; RESERVED
	DB	?			; RESERVED
	DB	?			; RESERVED
SI_LINE DB	?			; SCAN LINES AVAILABLE IN TEXT MODES
STATIC_INFO	ENDS			;
					;
ASK_BIOS_INFO	PROC			;
	PUSH	ES			;
	PUSH	DI			;
	PUSH	BX			;
	PUSH	AX			;
					;
	MOV	AX,1B00H		; BIOS CALL FOR 'EGA +' INFORMATION
	MOV	BX,0			;
	MOV	DI,OFFSET RETURN_INFO	; SETUP THE RETURN ADDRESS (above)
	PUSH	CS			;
	POP	ES			;
	INT	10H			;
					;
	CMP	AL,1BH			; IF AL <> 1BH, THEN ADAPTER DOES
	JNZ	ABI_3			; NOT SUPPORT THIS CALL...EXIT w/ERROR
	CLC				;
        jmp     short ABI_4                   ; ELSE, LEAVE w/o ERROR
					; WITH THE TABLE ALL FILLED IN....
ABI_3:	STC				;
ABI_4:	POP	AX			;
	POP	BX			;
	POP	DI			;
	POP	ES			;
	RET				;
ASK_BIOS_INFO	ENDP			;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	ASK_BIOS_FONT_SIZE
;
;	THIS ROUTINE RETURNS THE PRESENT FONT RESOLUTION.
;	IT IS SUPPORTED VIA THE ENHANCED INT 10H BIOS CALL.
;	REFER TO THE 'ASK_BIOS_INFO' FOR DETAILS.
;
;	INPUT:
;		none
;	OUTPUT:
;		AL = bytes/character
;		CY = 0 if found
;		     1 if not supported (and AL = unchanged)
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASK_BIOS_FONT_SIZE PROC 		;
	PUSH	BX			;
	CALL	ASK_BIOS_INFO		;
	JC	ABFS_1			;
	MOV	BX,CHAR_H		;
	MOV	AL,BL			;
        or      al,al                   ; PERFORM CHECK FOR BIOS ERROR!
	JNZ	ABFS_0			;
	STC				;
        jmp     short ABFS_1                  ;
ABFS_0: CLC				;
ABFS_1: POP	BX			;
	RET				;
ASK_BIOS_FONT_SIZE ENDP 		;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	ASK_BIOS_SCAN_LINES
;
;	THIS IS SIMILAR TO THE ASK_BIOS_FONT_SIZE, EXCEPT IT
;	WILL RETURN THE AVAILABLE VERTICAL SCAN LINES FOR ALL
;	TEXT MODES.  REFER TO REFERENCED DCR #405.
;
;	INPUT:
;		none
;	OUTPUT:
;		AL = encoded SCAN LINES (in text modes)
;		CY = 0 if found
;		     1 if not supported
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ASK_BIOS_SCAN_LINES PROC		;
	CALL	ASK_BIOS_INFO		; ASK BIOS FOR DETAILED INFO...
	JC	ABSL_0			; IF CY = 1, THEN BIOS NOT SMART ENOUGH!
	PUSH	BX			;
	PUSH	SI			;
	PUSH	ES			;
	LEA	SI,RETURN_INFO		; GET POINTERS TO STATIC TABLE....
	MOV	BX,CS:[SI+2]		; GET STATIC INFO SEGMENT
	MOV	ES,BX			;	    &
	MOV	SI,CS:[SI]		; GET STATIC INFO OFFSET
	MOV	AL,ES:[SI].SI_LINE	; THEN, FINALLY THE ENCODED SCAN_LINES
	POP	ES			;
	POP	SI			;
	POP	BX			;
ABSL_0: RET				;
ASK_BIOS_SCAN_LINES ENDP		;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	VECTOR_LOAD
;
;	THIS ROUTINE WORKS SIMILARLY TO THE BIOS_LOAD, EXCEPT THAT
;	THE FONT SUPPORT IS LOADED VIA A VECTOR MECHANISM...RATHER
;	THAN USING BIOS.  THE BIOS_LOAD METHOD IS USED EXCLUSIVELY
;	FOR TEXT MODES ONLY....WHILE THE VECTOR_LOAD IS FOR APA
;	(all points addressable).
;
;	THE VECTOR SUPPORT IS BASED ON THE INTERRUPT VECTORS 1F hex
;	AND 43 hex.  THE INTERRUPT 1F hex HAS SPECIAL CONSIDERATIONS
;	DUE TO THE 'GRAFTABL.COM' PROGRAM PROVIDED ON DOS.  REFER
;	TO THE 'CPS DESIGN DOCUMENT' (written by IBM Canada Lab) FOR
;	DETAILS.
;
;	INPUT:
;		AL = ?	load mechanism
;
;		7 6 5 4 3 2 1 0
;		x x x x 0 0 0 0
;		      1 = INT 1FH
;		     1 = INT 43H
;				  1 = int 1FH special handling
;
;
;		ES : DI points to start of font data
;		CX = ?	count of characters to load
;		BH = bytes per character
;
;		DS = CS assumed
;
;    ***********************************************************
;    ************** SCHEDULED FOR OPTIMIZATION *****************
;    ***********************************************************
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
VECTOR_MODE	DB	?		;
INTER_43H	EQU	00100000b	;
INTER_1FH	EQU	00010000b	;
LCD_1FH 	EQU	01000000b	;
INTER_44H	EQU	10000000b	;
					;
VECTOR_LOAD	PROC			;
	TEST	AL,INTER_1FH		; CHECK IF ANY INTERRUPT 1FH PROCESSING
        JNZ     VL_00                   ; IS NEEDED.
        JUMP    VL_3                    ; IS NEEDED.
					;
VL_00:	MOV	CS:VECTOR_MODE,AL	;
	PUSH	AX			; SAVE AX REGISTER....
	MOV	AX,0B000H		; INTERFACE CALL TO GRAFTABL TO SEE
	INT	2FH			; IF SUPPORT IS LOADED.
	CMP	AL,0FFH 		; IF SO, THEN EXIT!
	POP	AX			; RESTORE AX REGISTER..
        JNE     VL_2AA                  ; IF NOT 0FFH=AL, THEN NOT LOADED!
        JUMP    VL_3                    ; EXIT, GRAFTABL HAS CONTROL
					;
VL_2AA: CMP	CHARACTER_SOURCE,0	; TEST IF CP = HDWR
	JE	VL_1			;
					;
	PUSH	DS			;
	PUSH	AX			;
	XOR	AX,AX			;
	MOV	DS,AX			;
	MOV	AX,DI			; PUT DI INTO AX FOR ADJUSTMENT
	ADD	AX,8*128		;
					;
	CLI				;
	MOV	DS:WORD PTR INT_1F_LOW,AX; SET THE HIGH 128 CHARACTERS
	MOV	DS:WORD PTR INT_1F_HI,ES;
	STI				;
	MOV	CS:OLD_INT_1F,AX	; SAVE VALUE TO INTERNAL STORAGE
	MOV	CS:OLD_INT_1F+2,ES	;
	POP	AX			;
	POP	DS			;
	JUMP	VL_3			;
					;
VL_1:	TEST	CS:VECTOR_MODE,LCD_1FH	; CHECK IF LCD ACTIVE
	JZ	VL_11A			;
					;
	PUSH	DS			; SET INT 44 hex WITH HDWR CP
	PUSH	DI			;
	PUSH	AX			;
	XOR	AX,AX			;
	MOV	DS,AX			;
	CLI				;
	MOV	DI,CS:ROM_INT_1F	;
	MOV	DS:WORD PTR INT_1F_LOW,DI; SET NEW VECTOR
	MOV	CS:OLD_INT_1F,DI	; SAVE VALUE TO INTERNAL STORAGE
	MOV	DI,CS:ROM_INT_1F+2	;
	MOV	DS:WORD PTR INT_1F_HI,DI;
	MOV	CS:OLD_INT_1F+2,DI	;
	STI				;
	POP	AX			;
	POP	DI			;
	POP	DS			;
	JUMP	VL_3			;
					;
VL_11A: PUSH	ES			; SET INT 1F hex WITH HDWR CP
	PUSH	DS			;
	PUSH	BP			;
	PUSH	AX			;
	PUSH	BX			;
	PUSH	CX			;
	PUSH	DX			;
	MOV	AX,1130H		; GET EGA INFORMATION
	MOV	BH,4			; GET ROM DOUBLE DOT PTR (TOP)
	INT	10H			;
	XOR	AX,AX			;
	MOV	DS,AX			;
	CLI				;
	MOV	DS:WORD PTR INT_1F_LOW,BP; SET THE HIGH 128 CHARACTERS
	MOV	DS:WORD PTR INT_1F_HI,ES;
	STI				;
	MOV	CS:OLD_INT_1F,BP	; SAVE VALUE TO INTERNAL STORAGE
	MOV	CS:OLD_INT_1F+2,ES	;
	POP	DX			;
	POP	CX			;
	POP	BX			;
	POP	AX			;
	POP	BP			;
	POP	DS			;
	POP	ES			;
					;
VL_3:	TEST	AL,INTER_43H		;
	JZ	VL_8			;
					;
	CMP	CHARACTER_SOURCE,0	; TEST IF CP = HDWR
	JE	VL_5			;
					;
	PUSH	DS			; SET INT 43 hex WITH USER TABLE
	PUSH	AX			;
	XOR	AX,AX			;
	MOV	DS,AX			;
	CLI				;
	MOV	DS:WORD PTR INT_43_LOW,DI;
	MOV	DS:WORD PTR INT_43_HI,ES;
	STI				;
	POP	AX			;
	POP	DS			;
        jmp     short VL_9                    ;
					;
VL_5:	PUSH	BX			; SET INT 43 hex WITH HDWR CP
	MOV	BH,3			; RETURN ROM DOUBLE DOT PTR
	CMP	BYTES_PER_CHAR,8	; WORK FOR HARDWARE CP's
	JE	VL_6			;
					;
	MOV	BH,2			; RETURN ROM 8X14 PTR
	CMP	BYTES_PER_CHAR,14	;
	JE	VL_6			;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;	THIS IS BH=6 (??????? WAS IN ERROR).  THE ?????? HAS
;	THE LATEST FIX SUPPORT.
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	MOV	BH,6			; SET FOR ROM 8X16 PTR
	CMP	BYTES_PER_CHAR,16	;
	JNE	VL_7			;
					;
VL_6:	PUSH	AX			; YES, ONCE AGAIN, SAVE THOSE REG'ies
	PUSH	CX			;
	PUSH	DX			;
	PUSH	DS			;
	PUSH	ES			;
	PUSH	BP			;
	MOV	AX,1130H		; GET EGA INFORMATION (PTR=ES:DI)
	INT	10H			;
	XOR	AX,AX			;
	MOV	DS,AX			;
	CLI				;
	MOV	DS:WORD PTR INT_43_LOW,BP; SET THE FULL CHARACTER SET
	MOV	DS:WORD PTR INT_43_HI,ES;
	STI				;
	POP	BP			;
	POP	ES			;
	POP	DS			;
	POP	DX			;
	POP	CX			;
	POP	AX			;
VL_7:	POP	BX			;
					;
VL_8:	TEST	AL,INTER_44H		; Test for INTERRUPT 44 Hex
	JZ	VL_9			;
					;
	CMP	CHARACTER_SOURCE,0	; TEST IF CP = HDWR
	JE	VL_8A			;
					;
	PUSH	DS			; SET INT 43 hex WITH USER TABLE
	PUSH	AX			;
	XOR	AX,AX			;
	MOV	DS,AX			;
	CLI				;
	MOV	DS:WORD PTR INT_44_LOW,DI;
	MOV	DS:WORD PTR INT_44_HI,ES;
	STI				;
	POP	AX			;
	POP	DS			;
        jmp     short VL_9                    ;
					;
VL_8A:	PUSH	DS			; SET INT 44 hex WITH HDWR CP
	PUSH	DI			;
	PUSH	AX			;
	XOR	AX,AX			;
	MOV	DS,AX			;
	CLI				;
	MOV	DI,CS:ROM_INT_44	;
	MOV	DS:WORD PTR INT_44_LOW,DI;
	MOV	DI,CS:ROM_INT_44+2	;
	MOV	DS:WORD PTR INT_44_HI,DI;
	STI				;
	POP	AX			;
	POP	DI			;
	POP	DS			;
					;
VL_9:	RET				;
VECTOR_LOAD	ENDP			;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	LOAD CODE PAGE
;
;	This routine is called by INVOKE_DATA and
;	by the INT_10H code.
;
;	EXIT:
;		CP_ES	 points to the final CP data segment
;		CP_DI	 points to the final CP data offset
;
;		CY = 0 if no error detected
;		     1 if error occurred
;			AX = 0000 if hardware code page matched
;			AX = 0001 if routine is presently busy
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
CP_ES	DW	?			;
CP_DI	DW	?			;
LOAD_CP_SEMA	DB	0		; SEMAPHORE TO TELL IF ROUTINE IS
					; ALREADY ACTIVE....
					;
ANSI_BUFFER  LABEL BYTE 		; WGR BUFFER FOR ANSI				 ;AN000;
	     DB    ZERO 		; WGR INFO LEVEL				 ;AN000;
	     DB    ZERO 		; WGR						 ;AN000;
	     DW    ANSI_BUF_SIZE	; WGR LENGTH OF DATA				 ;AN000;
	     DW    ?			; WGR CONTROL FLAGS				 ;AN000;
D_MODE	     LABEL BYTE 		; WGR DISPLAY MODE				 ;AN000;
	     DB    ?			; WGR						 ;AN000;
	     DB    ?			; WGR RESERVED					 ;AN000;
	     DW    ?			; WGR COLORS					 ;AN000;
	     DW    ?			; WGR WIDTH					 ;AN000;
	     DW    ?			; WGR LENGTH					 ;AN000;
	     DW    ?			; WGR COLUMNS					 ;AN000;
SCR_ROWS     LABEL WORD 		; WGR ROWS					 ;AN000;
	     DW    ?			; WGR						 ;AN000;
					;
RE_CALC      DW    OFF			; WGR VALUE TO OR IN CHARACTER LOAD		 ;AN000;
SETMODE_FLAG DB    OFF			; WGR FLAG INDICATING A MODE SET IS REQUIRED	 ;AN000;
					;
TEST_CP 	PROC			;
	CMP	CS:LOAD_CP_SEMA,ZERO	; TEST IF ALREADY ACTIVE!
	JE	I10_0			;
	STC				; IF ALREADY ACTIVE, THEN SET ERROR
	MOV	AX,ONE			; TO INDICATE THAT ACTIVE....
	RET				;
					;
I10_0:	MOV	CS:LOAD_CP_SEMA,ONE	; SET ROUTINE NOW ACTIVE...
	PUSH	BX			;
	PUSH	CX			;
	PUSH	DX			; WGR						 ;AN000;
	PUSH	SI			;
	PUSH	DI			;
	PUSH	DS			;
	PUSH	ES			;
					;
	PUSH	CS			;
	POP	DS			; SETUP DS SEGMENT TO CS
	PUSH	CS			;
	POP	ES			; SETUP ES SEGMENT TO CS
					;
	XOR	AH,AH			; AH=0 FOR MODE SET, AL=MODE_TYPE
	MOV	AL,MODE_VALUE		;
	MOV	SI,AX			; ESTABLISH INDEX INTO LOAD_MECH table
	MOV	AL,[SI].FONT_SIZE	; GET FONT_SIZE FOR THIS MODE_VALUE
	OR	AL,AL			; TEST FOR MODE_VALUE=0
	JNZ	I10_2			;
					;
	CALL	ASK_BIOS_FONT_SIZE	; GET BIOS TO INDICATE FONT_SIZE
	JC	I10_A			; IF CY=1 THEN ERROR OCCURRED
					;
I10_2:	PUSH	AX			; WGR SAVE FONT SIZE				 ;AN000;
	MOV	Ah,ANSI_2F		; WGR REQUEST TO ANSI FOR SCREEN SIZE		 ;AN000;
	mov	al,IOCTL_2F		; IOCTL request
	MOV	CL,GET_SUBFUNC		; WGR GET CHARACTERISTICS FUNCTION		 ;AN000;
	LEA	DX,ANSI_BUFFER		; WGR BUFFER FOR REQUEST STORAGE		 ;AN000;
	INT	2FH			; WGR						 ;AN000;
	JC	I10_3			; WGR IF CARRY THEN ERROR..CONT AS BEFORE	 ;AN000;
	CMP	AL,16H			; WGR ENSURE THAT ANSI WAS THERE..		 ;AN000;
	JNE	I10_3			; WGR NO....CONT AS BEFORE			 ;AN000;
	CMP	D_MODE,ON		; WGR ARE WE IN A TEXT MODE?			 ;AN000;
	JNE	I10_3			; WGR NO...CONT AS BEFORE..			 ;AN000;
	CMP	SCR_ROWS,DEFAULT_LEN	; WGR IS IT JUST 25 LINES?..			 ;AN000;
	JE	I10_3			; WGR THEN...CONT AS BEFORE..			 ;AN000;
	POP	AX			; WGR GREATER THAN 25 LINES SO...POP OFF..	 ;AN000;
	MOV	CS:RE_CALC,RECALC_ON	; WGR RECALCULATION REQUIRED			 ;AN000;
	MOV	CS:SETMODE_FLAG,ON	; WGR A MODE SET IS REQUIRED			 ;AN000;
	MOV	AL,EIGHT		; WGR OLD FONT SIZE AND USE AN 8 HIGH BOX.	 ;AN000;
        jmp     short I10_4                   ; WGR                                            ;AN000;
					;
I10_3:	POP	AX			; WGR RESTORE OLD VALUE 			 ;AN000;
	MOV	CS:SETMODE_FLAG,OFF	; WGR NO MODE SET IS REQUIRED.			 ;AN000;
					;
I10_4:	MOV	BYTES_PER_CHAR,AL	; SAVE VALUE DETERMINED
					;
	MOV	CX,CPD_ACTIVE		;
	CMP	CX,-1			; CHECK IF ACTIVE CP=PLACE_HOLDER
	JE	I10_A			; IF SO, THEN STAY SLEEPING
					;
	PUSH	CX			;
	CALL	FIND_CP 		; DETERMINE IF THE CODE PAGE=HDWR
	MOV	BL,CL			;
	POP	CX			; RESTORE CP VALUE FOR FUTURE REF
	JC	I10_A			;
	MOV	CHARACTER_SOURCE,BL	;
	OR	BL,BL			; TEST TYPE OF CP?
	JE	I10_B			; IF CODE PAGE=HDWR THEN RESOLUTION OK!
					;
	CALL	FIND_FONT		; CHECK IF THE FONT RESOLUTION IS HERE
	JC	I10_A			; IF CY=0 THEN ES:DI POINT TO FONT
	MOV	CS:CP_DI,DI		;
	MOV	DI,ES			;
	MOV	CS:CP_ES,DI		;
        jmp     short I10_B                   ;
					;
I10_A:	XOR	AX,AX			;
	STC				;
I10_B:	POP	ES			;
	POP	DS			;
	POP	DI			;
	POP	SI			;
	POP	DX			; WGR						 ;AN000;
	POP	CX			;
	POP	BX			;
	MOV	CS:LOAD_CP_SEMA,ZERO	; SET ROUTINE NOW COMPLETED....
	RET				;
TEST_CP 	ENDP			;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	INVOKE DATA
;
;	THIS ROUTINE PERFORMS THE LOADING OF THE CODE PAGE
;	INFORMATION.  IT USES THE POINTERS FROM THE TEST_CP
;	ROUTINE.
;
;	ENTRY:
;		CP_ES	points to the actual data of CP segment
;		CP_DI	points to the actual data of CP offset
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
INVOKE_DATA	PROC			;
	PUSH	BX			;
	PUSH	CX			;
	PUSH	SI			;
	PUSH	DI			;
	PUSH	DS			;
	PUSH	ES			;
					;
	MOV	DI,CS:CP_ES		; GET THE ES:DI COMBO FROM TEST_CP
	MOV	ES,DI			;
	MOV	DI,CS:CP_DI		;
					;
	XOR	AH,AH			;
	MOV	AL,MODE_VALUE		; CREATE INDEX TO GET LOAD_MECH
	MOV	SI,AX			;
	MOV	AL,[SI].LOAD_MECH	;
	MOV	LOAD_MECHANISM,AL	; SAVE THIS VALUE FOR OTHER ROUTINES
	TEST	AL,MASK_BIOS_LOAD	; FIND OUT IF INT 10H SUPPORTS
	JZ	INV_7			;
					;
	MOV	CX,256			; **** HARD CODED COUNT ****
	MOV	BH,BYTES_PER_CHAR	;
	CALL	BIOS_LOAD		; GET BIOS CODE TO GIVE THE CP SUPPORT
	JC	INV_A			;
					;
INV_7:	TEST	AL,MASK_VECTOR_LOAD	;
	JZ	INV_8			;
					;
	CALL	VECTOR_LOAD		; ESTABLISH THE VECTORS FOR CP SUPPORT
	JC	INV_A			;
					;
INV_8:	CLC				;
        jmp     short INV_B                   ;
INV_A:	XOR	AX,AX			;
	STC				;
INV_B:	POP	ES			;
	POP	DS			;
	POP	DI			;
	POP	SI			;
	POP	CX			;
	POP	BX			;
	RET				;
INVOKE_DATA	ENDP			;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	GET_CURSOR_POSITION
;
;	This routine is called by BIOS_LOAD.  It is used
;	to ask for the cursor position before a character
;	download...since BIOS puts the cursor to (1,1).
;
;
;	INPUT:
;		none
;	OUTPUT:
;		BX = page number
;		DX = cursor position
;
;		DS = CS assumed
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
ACTIVE_PAGE	DW	?		;
CURSOR_POS	DW	?		;
					;
GET_CURSOR_POS	PROC			;
	PUSHF				;
	PUSH	DX			;
	PUSH	CX			;
	PUSH	BX			;
	PUSH	AX			;
	MOV	AH,15			; CALL TO GET CURRENT_VIDEO_STATE
	PUSHF				;
	CALL	DWORD PTR CS:ROM_INT_10 ; call routine to handle the command
	MOV	ACTIVE_PAGE,BX		;
					;
	MOV	AH,3			;
	PUSHF				;
	CALL	DWORD PTR CS:ROM_INT_10 ; call routine to handle the command
	MOV	CURSOR_POS,DX		;
	POP	AX			;
	POP	BX			;
	POP	CX			;
	POP	DX			;
	POPF				;
	RET				;
GET_CURSOR_POS	ENDP			;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	SET_CURSOR_POSITION
;
;	This routine is called by BIOS_LOAD.  It is used
;	to tell BIOS where to put the cursor.
;
;	INPUT:
;		BX = page number
;		DX = cursor position
;	OUTPUT:
;		none
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SET_CURSOR_POS	PROC			;
	PUSHF				;
	PUSH	DX			;
	PUSH	BX			;
	PUSH	AX			;
	MOV	AH,2			;
	MOV	BX,ACTIVE_PAGE		;
	MOV	DX,CURSOR_POS		;
	PUSHF				;
	CALL	DWORD PTR CS:ROM_INT_10 ; call routine to handle the command
	POP	AX			;
	POP	BX			;
	POP	DX			;
	POPF				;
	RET				;
SET_CURSOR_POS	ENDP			;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;	Info_Ansi_ModeSet
;
;	INPUT:None
;	OUTPUT:None
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
Info_Ansi_ModeSet	proc	near
	push	ax
	push	dx
	push	ds
	push	si
	pushf
	push	cs
	pop	ds
	lea	si, ANSI_DA_INFO
	mov	[si].DA_SETMODE_FLAG, 1 ;Tell ANSI we are calling int10h, Set Mode funciton
	mov	dx, si
	mov	ah, ANSI_2F
	mov	al, DA_INFO_2F
	int	2fh			;We don't worry about whether ANSI installed or not.
	popf
	pop	si
	pop	ds
	pop	dx
	pop	ax
	ret
Info_Ansi_ModeSet	endp

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;	Info_Ansi_ModeDone
;
;	INPUT:None
;	OUTPUT:None
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
Info_Ansi_ModeDone	proc	near
	push	ax
	push	dx
	push	ds
	push	si
	pushf
	push	cs
	pop	ds
	lea	si, ANSI_DA_INFO
	mov	[si].DA_SETMODE_FLAG, 0 ;Tell ANSI we are done with int10h, Set Mode funciton
	mov	dx, si
	mov	ah, ANSI_2F
	mov	al, DA_INFO_2F
	int	2fh			;We don't worry about whether ANSI installed or not.
	popf
	pop	si
	pop	ds
	pop	dx
	pop	ax
	ret
Info_Ansi_ModeDone	endp

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
; \\\\\ Start of JV Dialogue code \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
; \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\

	; Some useful macros

	SAVE_REGS macro	regs
		irp	reg,<regs>
		push	reg
		endm
	ENDM


	REST_REGS macro	regs
		irp	reg,<regs>
		pop	reg
		endm
	ENDM

	; intermediate variables storage

_FONT_PTR	dd	?	; far pointer to the font patterns
_BYTES_PER_CHAR db	?	; resolution of this font patterns

; ***********************************************************************
; * This routine returns pointer to the font of the specified resolution
; * if it's available in active Code Page
; *
; * Entry:  AL    = required font resolution (8,14,16,...)
; *
; * Return: CY    = 0 if found, 1 otherwise
; *         ES:DI = pointer to the font patterns
; *
; * Uses:   CPD_ACTIVE to pick up current active Code Page
; * Calls:  FIND_CP and FIND_FONT to locate font patterns
; *
; * Modifies:
; *         AH, CX, DS and possibly something in FIND_CP, FIND_FONT
; *        _FONT_PTR,_BYTES_PER_CHAR in local storage
; *
; ***********************************************************************

_GetFontPointer	PROC	NEAR

	; Force DS = CS for FIND_CP and FIND_FONT

	push	cs
	pop	ds

	; Pick up active CP and check if it's a place holder.
	; If so, nothing to do, else look for CP data.

	mov	cx,CPD_ACTIVE
	cmp	cx,-1
	je	@@ExitNotFound

	call	FIND_CP			; CY    = 1 if not found, else
	jc	@@ExitNotFound		; CX    = 0 for hdwr, 1 for designated
					; ES:DI = pointer to FONT data table

	; Check if this is hardware CP,
	; if so leave with not found condition

	or	cx,cx
	jz	@@ExitNotFound

	; Now try to find font with the
	; requested resolution

	mov	ah,BYTES_PER_CHAR	; Better preserve this value, since
					; we know nothing how changing of this
					; value will affect the driver logic

	mov	BYTES_PER_CHAR,al	; Q: is it still there ???
	call	FIND_FONT		; if CY = 1, than error, else
					; ES:DI points to font
	mov	BYTES_PER_CHAR,ah

	; Save font pointer and resolution in local storage

	mov	cs:word ptr _FONT_PTR + 2,es
	mov	cs:word ptr _FONT_PTR,di
	mov	cs:_BYTES_PER_CHAR,al

	ret			; done ... CY and ES:DI set by FIND_FONT

@@ExitNotFound:

	stc
	ret

_GetFontPointer	ENDP

; ***********************************************************************
; *
; * Processing of the 'Load Alphanumeric Font' requests.
; *
; * This subroutine will convert this requests to the appropriate
; * 'Load User Specified font' request supplying all needed
; * parameters (i.e. character points, number of characters
; * in table, first character to load and font pattern address).
; * Exact type of request and number of font block to load are
; * derived from the original request.
; *
; * If the requested font resolution is not valid for the active
; * Code Page, unmodified request will be passed to the Video BIOS code.
; *
; * Entry:
; *   AL = font resolution
; *   Original value of the AX upon entry to the interrupt handler
; *   code should be saved on the stack by the calling routine !!!
; ***********************************************************************

_DoTextFontLoad		PROC NEAR

	SAVE_REGS <bx,cx,dx,si,di,ds,es>	; AX is already on the stack
						; placed by the calling routine

	; Locate font with the specified resolution
	; If not found, just pass reques to video BIOS

	call	_GetFontPointer
	jc	@@FallToROM

	; Pop original register set

	REST_REGS <es,ds,di,si,dx,cx,bx,ax>

	; Now convert this request to the
	; 'Load User Specified Font' call

	SAVE_REGS <ax,bx,cx,dx,es,bp>	; preserve affected registers
                                        ; M002 - restore the following line
	and	al,11110000b		; AL still has 'program CRTC' code 

	mov	bh,_BYTES_PER_CHAR	; BL still has font block specifier
	mov	cx,256			; number of characters to load
	xor	dx,dx			; 1st character to load
	les	bp,cs:_FONT_PTR		; font patterns address

	pushf				; fake interrupt call
	call	dword ptr cs:ROM_INT_10	; chain to BIOS code

	REST_REGS <bp,es,dx,cx,bx,ax>	; all things back ...

	iret				; done ...

_DoTextFontLoad		ENDP		; Q: What about 'EGA Active' flag
					;    and cursor disappearence ???
; ***********************************************************************
; *
; * Processing of the 'Load Graphics Font' requests.
; *
; * This subroutine will convert this requests to the appropriate
; * 'Load User Specified font' request supplying all needed
; * parameters (i.e. character points and font pattern address).
; * Character rows per screen code and data (BL, DL) are
; * derived from the original request.
; *
; * If the requested font resolution is not valid for the active
; * Code Page, unmodified request will be passed to the Video BIOS code.
; *
; * Entry:
; *   AL = font resolution
; *   Original value of the AX upon entry to the interrupt handler
; *   code should be saved on the stack by the calling routine !!!
; ***********************************************************************

_DoGrpxFontLoad		PROC NEAR

	SAVE_REGS <bx,cx,dx,si,di,ds,es>	; AX is already on the stack
						; placed by the calling routine
	; Locate font with the specified resolution
	; If not found, just pass reques to video BIOS

	call	_GetFontPointer
	jc	@@FallToROM

	; Pop original register set

	REST_REGS <es,ds,di,si,dx,cx,bx,ax>

	; Now convert this request to the
	; 'Load User Specified Font' call

	SAVE_REGS <ax,cx,es,bp>		; preserve affected registers

	mov	al,21h			; 'Load User Specified Font' code
	xor	ch,ch 			;
	mov	cl,_BYTES_PER_CHAR	; bytes per character definition
	les	bp,cs:_FONT_PTR		; font patterns address

	pushf				; fake interrupt call
	call	dword ptr cs:ROM_INT_10	; chain to BIOS code

	REST_REGS <bp,es,cx,ax>		; all things back ...

	iret				; done ...

_DoGrpxFontLoad		ENDP

; ***********************************************************************
; *
; * Processing of the 'Get Char Gen Info' requests.
; *
; * This subroutine will pass the request to the Video BIOS code and,
; * upon return, will correct font patterns pointer to the new one
; * from the active Code Page (provided it's available).
; *
; * If the requested font resolution is not valid for the active
; * Code Page, unmodified request will be passed to the Video BIOS code.
; *
; * Entry:
; *   AL = font resolution
; *   Original value of the AX upon entry to the interrupt handler
; *   code should be saved on the stack by the calling routine !!!
; ***********************************************************************

_DoGetCharGenInfo	PROC NEAR

	SAVE_REGS <bx,cx,dx,si,di,ds,es>	; AX is already on the stack
						; placed by the calling routine

	; Locate font with the specified resolution
	; If not found, just pass reques to video BIOS

	call	_GetFontPointer
	jc	@@FallToROM

	; Give video BIOS a chance to set all things
	; and substitute new font pointer after that

	REST_REGS <es,ds,di,si,dx,cx,bx,ax>

	pushf				; fake interrupt call
	call	dword ptr cs:ROM_INT_10	; chain to BIOS code

	les	bp,cs:_FONT_PTR		; font patterns address

	iret

_DoGetCharGenInfo	ENDP

; ***********************************************************************
; * This is common exit code from the Int 10h, subfubction 11h
; * interceptor routines
; ***********************************************************************

@@FallToROM:	 REST_REGS <es,ds,di,si,dx,cx,bx,ax>
		 jmp	dword ptr cs:ROM_INT_10	; Fall to Video BIOS code

; \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
; \\\\\ End of JV Dialogue code \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\
; \\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\



=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\parser.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
PAGE	    ,132
TITLE	    PARSE CODE AND CONTROL BLOCKS FOR DISPLAY.SYS

;****************** START OF SPECIFICATIONS **************************
;
;  MODULE NAME: PARSER.ASM
;
;  DESCRIPTIVE NAME: PARSES THE DEVICE= STATEMENT IN CONFIG.SYS FOR
;		     DISPLAY.SYS
;
;  FUNCTION: THE COMMAND LINE PASSED TO DISPLAY.SYS IN THE CONFIG.SYS
;	     STATEMENT IS PARSED TO CHECK FOR CORRECT SYNTAX. A TABLE
;	     IS SETUP CONTAINING THE VALUES FOUND.
;
;  ENTRY POINT: PARSER
;
;  INPUT: ES:DI POINTS TO REQUEST HEADER
;
;  AT EXIT:
;     NORMAL: TABLE SET UP WITH VALUES FOUND.
;
;     ERROR: 0 RETURNED IN FIRST WORD OF TABLE.
;
;  INTERNAL REFERENCES:
;
;     ROUTINES: SYSPARSE - PARSING CODE
;
;     DATA AREAS: PARMSx - PARSE CONTROL BLOCK FOR SYSPARSE
;		  TABLE - TO CONTAIN VALUES FOUND IN DEVICE= LINE
;
;  EXTERNAL REFERENCES:
;
;     ROUTINES: N/A
;
;     DATA AREAS: N/A
;
;  NOTES:
;
;  REVISION HISTORY:
;	AN000; - DOS Version 4.00
;	AN001 - GHG P897 - Changes to the parser forced the inclusion
;			   of the '=' in the device ID.
;
;      Label: "The DOS DISPLAY.SYS Device Driver"
;	      "Licensed Material - Program Property of Microsoft"
;
;****************** END OF SPECIFICATIONS ****************************
;Modification history *********************************************************
;AN002; P1895 DISPLAY.SYS rejects command CON=(cga,(437),(0,0))   10/22/87 J.K.
;******************************************************************************
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; The following is the table structure of the parser.	All fields are
; two bytes field (accept for the device and id name)
;
; TABLE HEADER :
; 
;    Ŀ
;     N = Number of devices.	  
;    Ĵ
;    	 Device  # 1  offset	 >Ŀ
;    Ĵ		  			     
;    	 Device  # 2  offset	  		  	 Table_1  (a)	     
;    Ĵ		  			     
;    	 Device  # 3  offset	  		  
;    Ĵ
;    	 Device  # 4  offset	  
;    
;
;
; N = 1,2,3 or 4.  A two bytes number indicating the number of device specified.
; DEVICE # N OFFSET : a two bytes offset address to table_1. (ie. Device #1 offset
; is a pointer to table_1 (a). Device #2 offset is a pointer to table_1
; (b)...etc.).	 If an error was detected in the command N is set to zero.
;
;
;
; TABLE_1 :
; 
;
;    Ŀ	      Ŀ
;     N = Number of Offsets.	  	       			 
;    Ĵ    ĳ      Table_2  (a)	 
;    	 Device Name  offset	        			 
;    Ĵ	      
;    	 Device  Id   offset	 Ŀ
;    Ĵ	     Ŀ
;    	 Device  HWCP offset	 Ŀ      			 
;    Ĵ     ĳ      Table_3  (a)	 
;    	 Device  Desg offset	 Ŀ        			 
;    Ĵ         
;    	    "Reserved"               
;             Ŀ
;				             			 
;				      ĳ      Table_4  (a)	 
;				     	       			 
;				     	      
;				     	      Ŀ
;				     	       			 
;				     ĳ      Table_5  (a)	 
;					       			 
;					      
;
;
;  N=Length of table_1, or the number of offsets contained in table_1.
;  The offsets are pointers (two bytes) to the parameters value of the device.
;  "Reserved" : a two byte memory reserved for future use of the "PARMS" option.
;
;
; TABLE_2 :
; 
;
;    Ŀ
;     N = Length of devices name 
;    Ĵ
;    	  Device   name 	  
;    
;
; N = Length of device name.  Device length is always 8 byte long.
; Device Name : the name of the device (eg. LPT1, CON, PRN).  The name
; is paded with spaces to make up the rest of the 8 characters.
;
;
;
; TABLE_3 :
; 
;
;    Ŀ
;     N = Length of Id name.	  
;    Ĵ
;    	   Id	Name		  
;    
;
; N = Length of id name.  Id name length is always 8 byte long.
; Id Name : the name of the id (eg. EGA, VGA).	The name
; is paded with spaces to make up the rest of the 8 character.
;
;
;
; TABLE_4 :
; 
;
;    Ŀ
;     N = Length of table.	  
;    Ĵ
;    	  HWCP	#  1		  
;    Ĵ
;    	  HWCP	#  2		  
;    Ĵ
;    		.		  
;    		.		  
;    		.		  
;    Ĵ
;    	  HWCP	#  10		  
;    
;
;
; N = Length of table in words. Or the number of HWCP's.
; HWCP # N : a hardware code page number converted to binary.  The maximum
; number of pages allowed is 10.
;
;
;
; TABLE_5 :
; 
;
;    Ŀ
;     N = Length of table.	  
;    Ĵ
;    	  Designate		  
;    Ĵ
;    	  Font			  
;    
;
; N = Lenght of table.	0 - nothing was specified
;			1 - Only a designate was specified.
;			2 - Designate and font were given.  If the Desg field
;			    was left empty in the DEVICE command then the
;			    Designate field is filled with 0FFFFH.
; Designate, Font : Are the Desg. and Font binary numbers.
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

INCLUDE     DEF-EQU.INC      ; structures and equates					 ;AN000;

.XLIST
INCLUDE     STRUC.INC	     ; Structured macros					 ;AN000;
.LIST

PUBLIC	    PARSER	     ; near procedure for parsing DEVICE= statement		 ;AN000;
PUBLIC	    TABLE	     ; table for variable storage used by INIT module.		 ;AN000;
PUBLIC	    GET_DEVICE_ID    ; procedure to determine device adapter			 ;AN000;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; Set assemble switches for parse code
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

DateSW	      EQU     0 								 ;AN000;
DrvSW	      EQU     0 								 ;AN000;
SwSW	      EQU     0 								 ;AN000;
Val1SW	      EQU     0 								 ;AN000;
Val2SW	      EQU     0 								 ;AN000;
Val3SW	      EQU     0 								 ;AN000;


CODE	      SEGMENT  PUBLIC BYTE 'CODE'
	      ASSUME CS:CODE


.XLIST
INCLUDE     VERSION.INC
INCLUDE     PARSE.ASM	    ; Parsing code						 ;AN000;
.LIST


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; PARM control block for DISPLAY.SYS - DEVICE= command statement.
; Command line looks like:
;
;   DEVICE=[d:][path]DISPLAY.SYS CON[:]=(type[,[hwcp][,n]])
;     or
;   DEVICE=[d:][path]DISPLAY.SYS CON[:]=(type[,[hwcp][,(n,m)]])
;     or, for compatibility with DOS 3.3; PTM P1895
;   DEVICE=[d:][path]DISPLAY.SYS CON[:]=(type[,[(hwcp)][,n|(n,m)]])
;
; The command line will be parsed from left to right, taking care of the
; nesting of complex lists as they occur.
;
; The first level of control blocks is shown below.
; Complex list control blocks follow.
; Null VALUE LIST and RESULT BUFFER are placed after all other PARSE control
; blocks.
;
; d:\path\DISPLAY.SYS CON=(complex list)
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

PARMS1	       LABEL WORD								 ;AN000;
	       DW	PARMSX1 							 ;AN000;
	       DB	0		   ; no extra delimeters or EOLs.		 ;AN000;

PARMSX1        LABEL BYTE								 ;AN000;
	       DB	1,1		   ; min,max positional operands		 ;AN000;
	       DW	D_NAME		   ; pointer to control block			 ;AN000;
	       DB	0		   ; no switches				 ;AN000;
	       DB	1		   ; 1 keywords 				 ;AN000;
	       DW	DSP_LIST	   ; pointer to control block			 ;AN000;

D_NAME	       LABEL WORD								 ;AN000;
	       DW	0200H		   ; file spec					 ;AN000;
	       DW	0001H		   ; cap result by file table			 ;AN000;
	       DW	RESULT_BUF	   ; result					 ;AN000;
	       DW	NOVALS		   ; no value checking done			 ;AN000;
	       DB	0		   ; no keyword/switch synonyms 		 ;AN000;

DSP_LIST       LABEL WORD								 ;AN000;
	       DW	0400H		   ; complex list, ignore colon 		 ;AN000;
	       DW	0012H		   ; cap result by char table			 ;AN000;
	       DW	RESULT_BUF	   ; result					 ;AN000;
	       DW	NOVALS		   ; no value checking done			 ;AN000;
	       DB	2		   ; 1 keyword					 ;AN000;
	       DB	"CON=",0           ;GHG CON[:]= keyword                          ;AN001;
	       DB	"CON:=",0          ;GHG                                          ;AN001;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; PARM control block for second level of nesting.
; ie. complex list from first level of nesting
;
; (type, hwcp, n or complex list)
;or,
; (type, (hwcp), n or complex list)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

PARMS2	       LABEL WORD								 ;AN000;
	       DW	PARMSX2 							 ;AN000;
	       DB	0		   ; no extra delimeters or EOLs.		 ;AN000;

PARMSX2        LABEL BYTE								 ;AN000;
	       DB	0,3		   ; min,max positional operands		 ;AN000;
	       DW	DSP_TYPE	   ; pointer to control block			 ;AN000;
	       DW	HWCP		   ; pointer to control block			 ;AN000;
	       DW	CP_PREPS	   ; pointer to control block			 ;AN000;
	       DB	0		   ; no switches				 ;AN000;
	       DB	0		   ; no keywords				 ;AN000;

DSP_TYPE       LABEL BYTE								 ;AN000;
	       DW	2001H		   ; sstring (optional) 			 ;AN000;
	       DW	0002H		   ; cap by char table				 ;AN000;
	       DW	RESULT_BUF	   ; result					 ;AN000;
	       DW	NOVALS		   ; value list 				 ;AN000;
	       DB	0		   ; no keyword/switch synonyms 		 ;AN000;


HWCP	       LABEL BYTE								 ;AN000;
	       DW	8401H		   ;AN002; numeric or complex list (optional)
	       DW	0		   ; no functions				 ;AN000;
	       DW	RESULT_BUF	   ; result					 ;AN000;
	       DW	NOVALS		   ; no value checking done			 ;AN000;
	       DB	0		   ; no keyword/switch synonyms 		 ;AN000;

CP_PREPS       LABEL BYTE								 ;AN000;
	       DW	8401H		   ; numeric or complex list (optional) 	 ;AN000;
	       DW	0		   ; no functions				 ;AN000;
	       DW	RESULT_BUF	   ; result					 ;AN000;
	       DW	NOVALS		   ; value list 				 ;AN000;
	       DB	0		   ; no keyword/switch synonyms 		 ;AN000;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; PARM control block for third level of nesting.
; ie. complex list from second nesting level
;
; (hwcp)
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

PARMS3_X       LABEL WORD		   ;AN002;
	       DW	PARMSX3_X	   ;AN002;
	       DB	0		   ;AN002; no extra delimeters or EOLs.

PARMSX3_X      LABEL BYTE		   ;AN002;
	       DB	1,1		   ;AN002; min,max positional operands
	       DW	PREPS		   ;AN002; pointer to control block
	       DB	0		   ;AN002; no switches
	       DB	0		   ;AN002; no keywords

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; PARM control block for third level of nesting.
; ie. complex list from second nesting level
;
; (n,m)
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

PARMS3	       LABEL WORD								 ;AN000;
	       DW	PARMSX3 							 ;AN000;
	       DB	0		   ; no extra delimeters or EOLs.		 ;AN000;

PARMSX3        LABEL BYTE								 ;AN000;
	       DB	1,2		   ; min,max positional operands		 ;AN000;
	       DW	PREPS		   ; pointer to control block			 ;AN000;
	       DW	SUBFONTS	   ; pointer to control block			 ;AN000;
	       DB	0		   ; no switches				 ;AN000;
	       DB	0		   ; no keywords				 ;AN000;

PREPS	       LABEL BYTE								 ;AN000;
	       DW	8000H		   ; numeric					 ;AN000;
	       DW	0		   ; no functions				 ;AN000;
	       DW	RESULT_BUF	   ; result					 ;AN000;
	       DW	NOVALS		   ; value list 				 ;AN000;
	       DB	0		   ; no keyword/switch synonyms 		 ;AN000;

SUBFONTS       LABEL BYTE								 ;AN000;
	       DW	8001H		   ; numeric (optional) 			 ;AN000;
	       DW	0		   ; no functions				 ;AN000;
	       DW	RESULT_BUF	   ; result					 ;AN000;
	       DW	NOVALS		   ; no value checking done			 ;AN000;
	       DB	0		   ; no keyword/switch synonyms 		 ;AN000;

; Null VALUE LIST and RESULT BUFFER for all PARSE control blocks			 ;AN000;

NOVALS	       LABEL BYTE								 ;AN000;
	       DB	0		   ; no value checking done			 ;AN000;

RESULT_BUF     LABEL BYTE								 ;AN000;
RESULT_TYPE    DB	?		   ; type returned (number, string, etc.)	 ;AN000;
	       DB	?		   ; matched item tag (if applicable)		 ;AN000;
	       DW	?		   ; synonym ptr (if applicable)		 ;AN000;
RESULT_VAL     DD	?		   ; value					 ;AN000;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; TABLE STRUCTURE FOR RETURNING VALUES TO THE INIT MODULE
;  (ADAPTED FROM VERSION 1.0 DISPLAY.SYS)
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

TABLE	       LABEL	BYTE		   ; table header				 ;AN000;
DEVICE_NUM     DW	ONE		   ; should only be one device			 ;AN000;
TABLE2_PTR     DW	TABLE2		   ; pointer to table 2 			 ;AN000;

TABLE2	       LABEL	WORD								 ;AN000;
OFFSET_NUM     DW	FOUR		   ; 4 pointer follow				 ;AN000;
TABLE3_PTR     DW	TABLE3		   ; pointer to table 3 (device name)		 ;AN000;
TABLE4_PTR     DW	TABLE4		   ; pointer to table 4 (device id)		 ;AN000;
TABLE5_PTR     DW	TABLE5		   ; pointer to table 5 (hwcp's)                 ;AN000;
TABLE6_PTR     DW	TABLE6		   ; pointer to table 6 (num desg's and fonts)   ;AN000;

TABLE3	       LABEL	WORD		   ; device name (ie. CON)			 ;AN000;
T3_LENGTH      DW	EIGHT		   ; length					 ;AN000;
T3_NAME        DB	"CON     "         ; value                                       ;AN000;

TABLE4	       LABEL	WORD		   ; device id. (eg. EGA,MONO...)		 ;AN000;
T4_LENGTH      DW	ZERO		   ; length					 ;AN000;
T4_NAME        DB	"        "         ; value                                       ;AN000;

TABLE5	       LABEL	WORD		   ; hardware code pages			 ;AN000;
T5_NUM	       DW	ZERO		   ; only 1 for CON				 ;AN000;
T5_VALUE       DW	?		   ; value					 ;AN000;

TABLE6	       LABEL	WORD		   ; Designates and fonts			 ;AN000;
T6_NUM	       DW	ZERO		   ; values given (0 - 2 valid) 		 ;AN000;
T6_DESG        DW	?		   ; n value					 ;AN000;
T6_FONT        DW	?		   ; m value					 ;AN000;


OK_FLAG        DB	ON		   ; FLAG INDICATING PARSE STATUS		 ;AN000;
LOOP1	       DB	ZERO								 ;AN000;
LOOP2	       DB	ZERO								 ;AN000;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; PROCEDURE_NAME: PARSER
;
; FUNCTION:
; THIS PROCEDURE PARSES THE DEVICE= PARAMETERS FROM THE INIT REQUEST
; BLOCK.
;
; AT ENTRY: ES:DI POINTS TO REQUEST HEADER
;
; AT EXIT:
;    NORMAL: TABLE SET UP WITH VALUES FOUND
;
;    ERROR: 0 LOADED IN FIRST WORD OF TABLE
;
; AUTHOR: WGR
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

PARSER	PROC	 NEAR									 ;AN000;
	PUSH	 ES									 ;AN000;
	PUSH	 BX									 ;AN000;
	PUSH	 DS			  ;						 ;AN000;
	PUSH	 SI			  ;						 ;AN000;
	LDS	 SI,RH.RH0_BPBA 	  ;						 ;AN000;
	PUSH	 CS			  ; establish ES ..				 ;AN000;
	POP	 ES			  ; addressability to data			 ;AN000;
	LEA	 DI,PARMS1		  ; point to PARMS control block		 ;AN000;
	XOR	 CX,CX			  ; clear both CX and DX for			 ;AN000;
	XOR	 DX,DX			  ;  SYSPARSE					 ;AN000;
	CALL	 SYSPARSE		  ; move pointer past file spec 		 ;AN000;
	CALL	 SYSPARSE		  ; do first parse				 ;AN000;
	.WHILE <AX NE RC_EOL> AND	  ; EOL?...then end parse...and..		 ;AN000;
	.WHILE <OK_FLAG EQ ON>		  ; make sure that flag still ok..		 ;AN000;
	  .IF <AX NE RC_NO_ERROR>	  ; parse error?				 ;AN000;
	    MOV     OK_FLAG,OFF 	  ; yes...reset flag				 ;AN000;
	  .ELSE 			  ; no...process..				 ;AN000;
	    .SELECT			  ;						 ;AN000;
	    .WHEN <RESULT_TYPE EQ COMPLEX> ; complex string found?			 ;AN000;
	      INC    LOOP1		  ; increment count				 ;AN000;
	      .IF <LOOP1 GT ONE>	  ; more than one?				 ;AN000;
		MOV    OK_FLAG,OFF	  ; yes....we have an error			 ;AN000;
	      .ELSE			  ; no ..					 ;AN000;
		CALL   PARSE_MAIN	  ; process complex string..			 ;AN000;
	      .ENDIF			  ;						 ;AN000;
	    .OTHERWISE			  ; not a complex string so..			 ;AN000;
	      MOV    OK_FLAG,OFF	  ; we have a problem...reset flag		 ;AN000;
	    .ENDSELECT			  ;						 ;AN000;
	    CALL   SYSPARSE		  ; continue parsing..				 ;AN000;
	  .ENDIF			  ;						 ;AN000;
	.ENDWHILE			  ;						 ;AN000;
	.IF <OK_FLAG EQ OFF> OR 	  ; flag indicating error?			 ;AN000;
	.IF <LOOP1 EQ ZERO>		  ; or no parameters specified? 		 ;AN000;
	  MOV	DEVICE_NUM,ZERO 	  ; yes...set device number to 0		 ;AN000;
	  STC				  ;						 ;AN000;
	.ELSE				  ;						 ;AN000;
	  CLC				  ;						 ;AN000;
	.ENDIF				  ;						 ;AN000;
	POP    SI			  ;						 ;AN000;
	POP    DS			  ;						 ;AN000;
	POP    BX			  ;						 ;AN000;
	POP    ES			  ;						 ;AN000;
	RET				  ;						 ;AN000;
PARSER	ENDP										 ;AN000;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; PROCEDURE_NAME: PARSE_MAIN
;
; FUNCTION:
; THIS PROCEDURE PARSES THE CON=(    ) COMPLEX LIST DEVICE= LINE FOUND
; IN CONFIG.SYS
;
; AT ENTRY: RESULT BUFFER CONTAINS POINTER TO COMPLEX STRING
;
; AT EXIT:
;    NORMAL: TABLE SET UP WITH VALUES FOUND
;
;    ERROR: OK_FLAG = 0
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

PARSE_MAIN  PROC   NEAR 								 ;AN000;
	    PUSH   DI			  ; setup to parse the nested.. 		 ;AN000;
	    PUSH   DS			  ; complex string...but save.. 		 ;AN000;
	    PUSH   SI			  ; current parsing status.			 ;AN000;
	    PUSH   CX			  ;						 ;AN000;
	    XOR    CX,CX		  ;						 ;AN000;
	    LEA    DI,PARMS2		  ; next control block..			 ;AN000;
	    LDS    SI,RESULT_VAL	  ; point to stored string			 ;AN000;
	    CALL   SYSPARSE		  ;						 ;AN000;
	    .WHILE <AX NE RC_EOL> AND	  ; not EOL?   and..				 ;AN000;
	    .WHILE <OK_FLAG EQ ON>	  ; error flag still ok?			 ;AN000;
	      .IF <AX NE RC_NO_ERROR>	  ; check for parse errors			 ;AN000;
		MOV    OK_FLAG,OFF	  ; yes....reset error flag			 ;AN000;
	      .ELSE			  ; no...process				 ;AN000;
		INC    LOOP2		  ;						 ;AN000;
		.SELECT 		  ;						 ;AN000;
		.WHEN <RESULT_TYPE EQ STRING> ; simple string				 ;AN000;
		  CALL	 PARSE_STR	  ; yes...process				 ;AN000;
		.WHEN <RESULT_TYPE EQ NUMBER> ; number?..				 ;AN000;
		  CALL	 PARSE_NUM	  ; yes...process				 ;AN000;
		.WHEN <RESULT_TYPE EQ COMPLEX> ; complex string?			 ;AN000;
		  CALL	 PARSE_COMPLEX	  ;AN002;
		.OTHERWISE		  ; anything else is..				 ;AN000;
		  MOV	 OK_FLAG,OFF	  ; an error...reset flag.			 ;AN000;
		.ENDSELECT		  ;						 ;AN000;
		CALL   SYSPARSE 	  ; continue parsing				 ;AN000;
	      .ENDIF			  ;						 ;AN000;
	    .ENDWHILE			  ;						 ;AN000;
	    POP    CX			  ; restore original parse..			 ;AN000;
	    POP    SI			  ; registers.					 ;AN000;
	    POP    DS			  ;						 ;AN000;
	    POP    DI			  ;						 ;AN000;
	    RET 			  ;						 ;AN000;
PARSE_MAIN  ENDP

;
PARSE_COMPLEX	PROC		 ;AN002;
	.IF  <LOOP2 EQ TWO>	 ;AN002; Should be for HWCP
	     CALL  PARSE_COMP_X  ;AN002; for (hwcp)
	.ELSE			 ;AN002;
	     CALL   PARSE_COMP	 ; yes...process for (n,m)				 ;AN000;
	.ENDIF			 ;AN002;
	ret			 ;AN002;
PARSE_COMPLEX	ENDP

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; PROCEDURE_NAME: PARSE_COMP_X
;
; FUNCTION:
; THIS PROCEDURE PARSES A COMPLEX LIST FOUND WITHIN THE CON=(	)
; COMPLEX LIST for (hwcp).
;
; AT ENTRY: RESULT BUFFER CONTAINS POINTER TO COMPLEX STRING
;
; AT EXIT:
;    NORMAL: TABLE SET UP WITH VALUES FOUND
;
;    ERROR: OK_FLAG = 0
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

PARSE_COMP_X PROC   NEAR		  ;AN002;
	     PUSH   DI			  ;AN002; setup ro parse the nested..
	     PUSH   DS			  ;AN002; complex string..saving the..
	     PUSH   SI			  ;AN002; current parse status.
	     PUSH   CX			  ;AN002;
	     XOR    CX,CX		  ;AN002;
	     LEA    DI,PARMS3_X 	  ;AN002; next control block
	     LDS    SI,RESULT_VAL	  ;AN002; point to stored string.
	     CALL   SYSPARSE		  ;AN002;
	     .WHILE <AX NE RC_EOL> AND	  ;AN002; not EOL?...and..
	     .WHILE <OK_FLAG EQ ON>	  ;AN002; error flag still okay?
	       .IF <AX NE RC_NO_ERROR> OR ;AN002; parse error?...or..
	       .IF <RESULT_TYPE NE NUMBER> ;AN002; something other than a number..
		 MOV	OK_FLAG,OFF	  ;AN002; found?....yes..reset flag.
	       .ELSE			  ;AN002; no...process..
		 INC	T5_NUM		  ;AN002; increment counter
		 MOV	AX,WORD PTR RESULT_VAL ;AN002; get numeric value into word
		 MOV	T5_VALUE,AX	  ;AN002; yes...number of designates.
		 CALL	SYSPARSE	  ;AN002; continue parsing
	       .ENDIF			  ;AN002;
	     .ENDWHILE			  ;AN002;
	     POP    CX			  ;AN002; restore previous parse..
	     POP    SI			  ;AN002; registers.
	     POP    DS			  ;AN002;
	     POP    DI			  ;AN002;
	     RET			  ;AN002;
PARSE_COMP_X ENDP			  ;AN002;


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; PROCEDURE_NAME: PARSE_COMP
;
; FUNCTION:
; THIS PROCEDURE PARSES A COMPLEX LIST FOUND WITHIN THE CON=(	)
; COMPLEX LIST for (n,m).
;
; AT ENTRY: RESULT BUFFER CONTAINS POINTER TO COMPLEX STRING
;
; AT EXIT:
;    NORMAL: TABLE SET UP WITH VALUES FOUND
;
;    ERROR: OK_FLAG = 0
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

PARSE_COMP   PROC   NEAR								 ;AN000;
	     PUSH   DI			  ; setup ro parse the nested.. 		 ;AN000;
	     PUSH   DS			  ; complex string..saving the..		 ;AN000;
	     PUSH   SI			  ; current parse status.			 ;AN000;
	     PUSH   CX			  ;						 ;AN000;
	     XOR    CX,CX		  ;						 ;AN000;
	     LEA    DI,PARMS3		  ; next control block				 ;AN000;
	     LDS    SI,RESULT_VAL	  ; point to stored string.			 ;AN000;
	     CALL   SYSPARSE		  ;						 ;AN000;
	     .WHILE <AX NE RC_EOL> AND	  ; not EOL?...and..				 ;AN000;
	     .WHILE <OK_FLAG EQ ON>	  ; error flag still okay?			 ;AN000;
	       .IF <AX NE RC_NO_ERROR> OR ; parse error?...or.. 			 ;AN000;
	       .IF <RESULT_TYPE NE NUMBER> ; something other than a number..		 ;AN000;
		 MOV	OK_FLAG,OFF	  ; found?....yes..reset flag.			 ;AN000;
	       .ELSE			  ; no...process..				 ;AN000;
		 INC	T6_NUM		  ; increment counter				 ;AN000;
		 MOV	AX,WORD PTR RESULT_VAL ; get numeric value into word		 ;AN000;
		 .IF <T6_NUM EQ ONE>	  ; first value found?				 ;AN000;
		   MOV	  T6_DESG,AX	  ; yes...number of designates. 		 ;AN000;
		 .ELSE			  ; else..					 ;AN000;
		   MOV	  T6_FONT,AX	  ; second number...number of fonts.		 ;AN000;
		 .ENDIF 		  ;						 ;AN000;
		 CALL	SYSPARSE	  ; continue parsing				 ;AN000;
	       .ENDIF			  ;						 ;AN000;
	     .ENDWHILE			  ;						 ;AN000;
	     POP    CX			  ; restore previous parse..			 ;AN000;
	     POP    SI			  ; registers.					 ;AN000;
	     POP    DS			  ;						 ;AN000;
	     POP    DI			  ;						 ;AN000;
	     RET			  ;						 ;AN000;
PARSE_COMP   ENDP


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; PROCEDURE_NAME: PARSE_STR
;
; FUNCTION:
; THIS PROCEDURE PARSES A STRING FOUND WITHIN THE CON=(   ) STATEMENT
;
; AT ENTRY: RESULT BUFFER POINTS TO ASCIIZ STRING
;
; AT EXIT:
;    NORMAL: TABLE SET UP WITH VALUES FOUND
;
;    ERROR: N/A
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

PARSE_STR    PROC   NEAR								 ;AN000;
	     PUSH   DI			  ; get source and..				 ;AN000;
	     PUSH   DS			  ; destination registers..			 ;AN000;
	     PUSH   SI			  ; setup.					 ;AN000;
	     LDS    SI,RESULT_VAL	  ;						 ;AN000;
	     .IF <<BYTE PTR DS:[SI]> NE ZERO> ; check for null string			 ;AN000;
	       LEA    DI,T4_NAME	  ;						 ;AN000;
	       LODSB			  ; load first character.			 ;AN000;
	       .WHILE <AL NE ZERO>	  ; while not at end of ASCIIZ do..		 ;AN000;
		 STOSB			  ; store..					 ;AN000;
		 LODSB			  ; load next character..			 ;AN000;
	       .ENDWHILE		  ;						 ;AN000;
	       MOV    T4_LENGTH,EIGHT	  ; value found.				 ;AN000;
	     .ENDIF			  ;						 ;AN000;
	     POP    SI			  ; restore registers.				 ;AN000;
	     POP    DS			  ;						 ;AN000;
	     POP    DI			  ;						 ;AN000;
	     RET									 ;AN000;
PARSE_STR    ENDP


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; PROCEDURE_NAME: PARSE_NUM
;
; FUNCTION:
; THIS PROCEDURE PARSES NUMBERS FOUND IN THE CON=(   ) STATEMENT
; BLOCK.
;
; AT ENTRY: RESULT BUFFER CONTAINS A DWORD NUMBER VALUE
;
; AT EXIT:
;    NORMAL: TABLE SET UP WITH VALUES FOUND
;
;    ERROR: N/A
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

PARSE_NUM    PROC   NEAR								 ;AN000;
	     MOV    AX,WORD PTR RESULT_VAL   ; get value into word form 		 ;AN000;
	     .IF <LOOP2 EQ TWO> 	     ; if this is the code page then..		 ;AN000;
		MOV   T5_VALUE,AX	     ; load that value. 			 ;AN000;
		INC   T5_NUM		     ;						 ;AN000;
	     .ELSEIF <LOOP2 EQ THREE>	     ;						 ;AN000;
		MOV   T6_DESG,AX	     ; must be number of designates..		 ;AN000;
		INC   T6_NUM		     ; load and increment count 		 ;AN000;
	     .ENDIF			     ;						 ;AN000;
	     RET			     ;						 ;AN000;
PARSE_NUM    ENDP									 ;AN000;


	     ASSUME CS:CODE,DS:CODE

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; PROCEDURE_NAME: GET_DEVICE_ID
;
; FUNCTION:
; THIS PROCEDURE RETURNS THE DISPLAY DEVICE TO THE INIT ROUTINE WHEN
; A DEVICE ID IS NOT SUPPLIED.
;
; AT ENTRY: N/A
;
; AT EXIT:
;    NORMAL: DEVICE ID PLACED WITHIN THE TABLE. (EGA OR LCD)
;	     CARRY IS CLEARED.
;
;    ERROR:  DEVICE ID IS MONO OR CGA
;	     CARRY IS SET.
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

FUNC_INFO	  INFO_BLOCK <> 							 ;AN000;

DEVICE_N_LENGTH   EQU	EIGHT								 ;AN000;

DEVICE_TYPES	  DB	"EGA     "                                                       ;AN000;
		  DB	"LCD     "                                                       ;AN000;

NUM_DEVICE_TYPES  EQU ($-DEVICE_TYPES)/DEVICE_N_LENGTH					 ;AN000;

DEVICE_FLAG	  DB	00000000B							 ;AN000;


GET_DEVICE_ID  PROC   NEAR								 ;AN000;
	       PUSH   AX								 ;AN000;
	       PUSH   BX			  ;					 ;AN000;
	       PUSH   CX			  ; s					 ;AN000;
	       PUSH   DX			  ;  a	 r				 ;AN000;
	       PUSH   DI			  ;   v   e				 ;AN000;
	       PUSH   SI			  ;    e   g				 ;AN000;
	       PUSH   ES			  ;	    i				 ;AN000;
	       PUSH   DS			  ;	     s				 ;AN000;
	       PUSH   CS			  ;	      t 			 ;AN000;
	       POP    DS			  ;	       e			 ;AN000;
	       PUSH   CS			  ;		r			 ;AN000;
	       POP    ES			  ;		 s			 ;AN000;
	       XOR    AX,AX			  ;					 ;AN000;
	       MOV    AH,FUNC_CALL		  ;					 ;AN000;
	       LEA    DI,FUNC_INFO		  ;					 ;AN000;
	       XOR    BX,BX			  ;					 ;AN000;
	       INT    10H			  ; try VGA functionality call		 ;AN000;
	       .IF <AL EQ FUNC_CALL>		  ; worked?....then			 ;AN000;
		 OR	DEVICE_FLAG,VGA_FOUND	  ; VGA found.				 ;AN000;
	       .ELSE				  ; no VGA...try EGA			 ;AN000;
		 MOV	AH,ALT_SELECT		  ;					 ;AN000;
		 MOV	BL,EGA_INFO_CALL	  ;					 ;AN000;
		 INT	10H			  ;					 ;AN000;
		 .IF <BL NE EGA_INFO_CALL>	  ; if changed then EGA present..	 ;AN000;
		   OR	  DEVICE_FLAG,EGA_FOUND   ; mark as found.			 ;AN000;
		 .ELSE				  ; no EGA...try LCD.			 ;AN000;
		   MOV	  AH,GET_SYS_ID 	  ; get system id..			 ;AN000;
		   INT	  15H			  ; yup....its a convertible..so	 ;AN000;
		   .IF <ES:[BX].MODEL_BYTE EQ LCD_MODEL> AND				 ;AN000;
		   MOV	  AH,GET_STATUS 	  ; check for LCD..			 ;AN000;
		   INT	  15H			  ;					 ;AN000;
		   .IF <BIT AL NAND ON> 	  ; yes....bit says LCD..so..		 ;AN000;
		     OR     DEVICE_FLAG,LCD_FOUND ; mark as LCD.			 ;AN000;
		   .ENDIF			  ;					 ;AN000;
		 .ENDIF 			  ;					 ;AN000;
	       .ENDIF				  ;					 ;AN000;
	       .IF <DEVICE_FLAG NE ZERO>	  ; nothing found?..then exit (eg. MONO) ;AN000;
		 LEA	SI,DEVICE_TYPES 	  ; start of new id's                    ;AN000;
		 SAR	DEVICE_FLAG,ONE 	  ; shift flag into carry bit		 ;AN000;
		 .WHILE NC			  ; carry not set yet.. 		 ;AN000;
		   ADD	  SI,DEVICE_N_LENGTH	  ; next id				 ;AN000;
		   SAR	  DEVICE_FLAG,ONE	  ; next flag...			 ;AN000;
		 .ENDWHILE			  ;					 ;AN000;
		 PUSH	CS			  ; found....transfer id..		 ;AN000;
		 POP	ES			  ; into the table..			 ;AN000;
		 LEA	DI,T4_NAME		  ;					 ;AN000;
		 MOV	CX,DEVICE_N_LENGTH	  ;					 ;AN000;
		 REP	MOVSB			  ;					 ;AN000;
		 MOV	T4_LENGTH,EIGHT 	  ;					 ;AN000;
		 CLC				  ; clear error flag			 ;AN000;
	       .ELSE				  ;					 ;AN000;
		 STC				  ; set error (ie. MONO or CGA found)	 ;AN000;
	       .ENDIF				  ;					 ;AN000;
	       POP    DS			  ; r					 ;AN000;
	       POP    ES			  ;  e	  r				 ;AN000;
	       POP    SI			  ;   s    e				 ;AN000;
	       POP    DI			  ;    t    g				 ;AN000;
	       POP    DX			  ;	o    i				 ;AN000;
	       POP    CX			  ;	 r    s 			 ;AN000;
	       POP    BX			  ;	  e    t			 ;AN000;
	       POP    AX			  ;		e			 ;AN000;
	       RET				  ;		 r			 ;AN000;
GET_DEVICE_ID  ENDP				  ;		  s



CODE	      ENDS
	      END

=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\ega\437-8x14.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
;***************************************************
;  CHARACTER FONT FILE
;  Source Assembler File
;
;        CODE PAGE: 437 
;  FONT RESOLUTION: 8 x 14 
;
;     DATE CREATED:05-28-1987
;
;
; Output file from: MULTIFON, Version 1A
;
;***************************************************
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #0
    Db  000h,000h,000h,07Eh,081h,0A5h,081h,081h,0BDh,099h,081h,07Eh,000h,000h ;   Hex #1
    Db  000h,000h,000h,07Eh,0FFh,0DBh,0FFh,0FFh,0C3h,0E7h,0FFh,07Eh,000h,000h ;   Hex #2
    Db  000h,000h,000h,000h,06Ch,0FEh,0FEh,0FEh,0FEh,07Ch,038h,010h,000h,000h ;   Hex #3
    Db  000h,000h,000h,000h,010h,038h,07Ch,0FEh,07Ch,038h,010h,000h,000h,000h ;   Hex #4
    Db  000h,000h,000h,018h,03Ch,03Ch,0E7h,0E7h,0E7h,018h,018h,03Ch,000h,000h ;   Hex #5
    Db  000h,000h,000h,018h,03Ch,07Eh,0FFh,0FFh,07Eh,018h,018h,03Ch,000h,000h ;   Hex #6
    Db  000h,000h,000h,000h,000h,000h,018h,03Ch,03Ch,018h,000h,000h,000h,000h ;   Hex #7
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0E7h,0C3h,0C3h,0E7h,0FFh,0FFh,0FFh,0FFh ;   Hex #8
    Db  000h,000h,000h,000h,000h,03Ch,066h,042h,042h,066h,03Ch,000h,000h,000h ;   Hex #9
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0C3h,099h,0BDh,0BDh,099h,0C3h,0FFh,0FFh,0FFh ;   Hex #A
    Db  000h,000h,000h,01Eh,00Eh,01Ah,032h,078h,0CCh,0CCh,0CCh,078h,000h,000h ;   Hex #B
    Db  000h,000h,000h,03Ch,066h,066h,066h,03Ch,018h,07Eh,018h,018h,000h,000h ;   Hex #C
    Db  000h,000h,000h,03Fh,033h,03Fh,030h,030h,030h,070h,0F0h,0E0h,000h,000h ;   Hex #D
    Db  000h,000h,000h,07Fh,063h,07Fh,063h,063h,063h,067h,0E7h,0E6h,0C0h,000h ;   Hex #E
    Db  000h,000h,000h,018h,018h,0DBh,03Ch,0E7h,03Ch,0DBh,018h,018h,000h,000h ;   Hex #F
    Db  000h,000h,000h,080h,0C0h,0E0h,0F8h,0FEh,0F8h,0E0h,0C0h,080h,000h,000h ;   Hex #10
    Db  000h,000h,000h,002h,006h,00Eh,03Eh,0FEh,03Eh,00Eh,006h,002h,000h,000h ;   Hex #11
    Db  000h,000h,000h,018h,03Ch,07Eh,018h,018h,018h,07Eh,03Ch,018h,000h,000h ;   Hex #12
    Db  000h,000h,000h,066h,066h,066h,066h,066h,066h,000h,066h,066h,000h,000h ;   Hex #13
    Db  000h,000h,000h,07Fh,0DBh,0DBh,0DBh,07Bh,01Bh,01Bh,01Bh,01Bh,000h,000h ;   Hex #14
    Db  000h,000h,07Ch,0C6h,060h,038h,06Ch,0C6h,0C6h,06Ch,038h,00Ch,0C6h,07Ch ;   Hex #15
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,0FEh,0FEh,0FEh,000h,000h ;   Hex #16
    Db  000h,000h,000h,018h,03Ch,07Eh,018h,018h,018h,07Eh,03Ch,018h,07Eh,000h ;   Hex #17
    Db  000h,000h,000h,018h,03Ch,07Eh,018h,018h,018h,018h,018h,018h,000h,000h ;   Hex #18
    Db  000h,000h,000h,018h,018h,018h,018h,018h,018h,07Eh,03Ch,018h,000h,000h ;   Hex #19
    Db  000h,000h,000h,000h,000h,018h,00Ch,0FEh,00Ch,018h,000h,000h,000h,000h ;   Hex #1A
    Db  000h,000h,000h,000h,000h,030h,060h,0FEh,060h,030h,000h,000h,000h,000h ;   Hex #1B
    Db  000h,000h,000h,000h,000h,000h,0C0h,0C0h,0C0h,0FEh,000h,000h,000h,000h ;   Hex #1C
    Db  000h,000h,000h,000h,000h,028h,06Ch,0FEh,06Ch,028h,000h,000h,000h,000h ;   Hex #1D
    Db  000h,000h,000h,000h,010h,038h,038h,07Ch,07Ch,0FEh,0FEh,000h,000h,000h ;   Hex #1E
    Db  000h,000h,000h,000h,0FEh,0FEh,07Ch,07Ch,038h,038h,010h,000h,000h,000h ;   Hex #1F
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #20
    Db  000h,000h,000h,018h,03Ch,03Ch,03Ch,018h,018h,000h,018h,018h,000h,000h ;   Hex #21
    Db  000h,066h,066h,066h,024h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #22
    Db  000h,000h,000h,06Ch,06Ch,0FEh,06Ch,06Ch,06Ch,0FEh,06Ch,06Ch,000h,000h ;   Hex #23
    Db  000h,018h,018h,07Ch,0C6h,0C2h,0C0h,07Ch,006h,086h,0C6h,07Ch,018h,018h ;   Hex #24
    Db  000h,000h,000h,000h,000h,0C2h,0C6h,00Ch,018h,030h,066h,0C6h,000h,000h ;   Hex #25
    Db  000h,000h,000h,038h,06Ch,06Ch,038h,076h,0DCh,0CCh,0CCh,076h,000h,000h ;   Hex #26
    Db  000h,018h,018h,018h,030h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #27
    Db  000h,000h,000h,00Ch,018h,030h,030h,030h,030h,030h,018h,00Ch,000h,000h ;   Hex #28
    Db  000h,000h,000h,030h,018h,00Ch,00Ch,00Ch,00Ch,00Ch,018h,030h,000h,000h ;   Hex #29
    Db  000h,000h,000h,000h,000h,066h,03Ch,0FFh,03Ch,066h,000h,000h,000h,000h ;   Hex #2A
    Db  000h,000h,000h,000h,000h,018h,018h,07Eh,018h,018h,000h,000h,000h,000h ;   Hex #2B
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,018h,018h,030h,000h ;   Hex #2C
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,000h,000h,000h,000h,000h,000h ;   Hex #2D
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,018h,000h,000h ;   Hex #2E
    Db  000h,000h,000h,002h,006h,00Ch,018h,030h,060h,0C0h,080h,000h,000h,000h ;   Hex #2F
    Db  000h,000h,000h,038h,06Ch,0C6h,0C6h,0D6h,0C6h,0C6h,06Ch,038h,000h,000h ;   Hex #30
    Db  000h,000h,000h,018h,038h,078h,018h,018h,018h,018h,018h,07Eh,000h,000h ;   Hex #31
    Db  000h,000h,000h,07Ch,0C6h,006h,00Ch,018h,030h,060h,0C6h,0FEh,000h,000h ;   Hex #32
    Db  000h,000h,000h,07Ch,0C6h,006h,006h,03Ch,006h,006h,0C6h,07Ch,000h,000h ;   Hex #33
    Db  000h,000h,000h,00Ch,01Ch,03Ch,06Ch,0CCh,0FEh,00Ch,00Ch,01Eh,000h,000h ;   Hex #34
    Db  000h,000h,000h,0FEh,0C0h,0C0h,0C0h,0FCh,006h,006h,0C6h,07Ch,000h,000h ;   Hex #35
    Db  000h,000h,000h,038h,060h,0C0h,0C0h,0FCh,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #36
    Db  000h,000h,000h,0FEh,0C6h,006h,00Ch,018h,030h,030h,030h,030h,000h,000h ;   Hex #37
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0C6h,07Ch,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #38
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0C6h,07Eh,006h,006h,00Ch,078h,000h,000h ;   Hex #39
    Db  000h,000h,000h,000h,018h,018h,000h,000h,000h,018h,018h,000h,000h,000h ;   Hex #3A
    Db  000h,000h,000h,000h,018h,018h,000h,000h,000h,018h,018h,030h,000h,000h ;   Hex #3B
    Db  000h,000h,000h,00Ch,018h,030h,060h,0C0h,060h,030h,018h,00Ch,000h,000h ;   Hex #3C
    Db  000h,000h,000h,000h,000h,000h,07Eh,000h,000h,07Eh,000h,000h,000h,000h ;   Hex #3D
    Db  000h,000h,000h,060h,030h,018h,00Ch,006h,00Ch,018h,030h,060h,000h,000h ;   Hex #3E
    Db  000h,000h,000h,07Ch,0C6h,0C6h,00Ch,018h,018h,000h,018h,018h,000h,000h ;   Hex #3F
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0DEh,0DEh,0DEh,0DCh,0C0h,07Ch,000h,000h ;   Hex #40
    Db  000h,000h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #41
    Db  000h,000h,000h,0FCh,066h,066h,066h,07Ch,066h,066h,066h,0FCh,000h,000h ;   Hex #42
    Db  000h,000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0C0h,0C2h,066h,03Ch,000h,000h ;   Hex #43
    Db  000h,000h,000h,0F8h,06Ch,066h,066h,066h,066h,066h,06Ch,0F8h,000h,000h ;   Hex #44
    Db  000h,000h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h ;   Hex #45
    Db  000h,000h,000h,0FEh,066h,062h,068h,078h,068h,060h,060h,0F0h,000h,000h ;   Hex #46
    Db  000h,000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0DEh,0C6h,066h,03Ah,000h,000h ;   Hex #47
    Db  000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,000h,000h ;   Hex #48
    Db  000h,000h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #49
    Db  000h,000h,000h,01Eh,00Ch,00Ch,00Ch,00Ch,00Ch,0CCh,0CCh,078h,000h,000h ;   Hex #4A
    Db  000h,000h,000h,0E6h,066h,06Ch,06Ch,078h,06Ch,06Ch,066h,0E6h,000h,000h ;   Hex #4B
    Db  000h,000h,000h,0F0h,060h,060h,060h,060h,060h,062h,066h,0FEh,000h,000h ;   Hex #4C
    Db  000h,000h,000h,0C6h,0EEh,0FEh,0D6h,0C6h,0C6h,0C6h,0C6h,0C6h,000h,000h ;   Hex #4D
    Db  000h,000h,000h,0C6h,0E6h,0F6h,0FEh,0DEh,0CEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #4E
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #4F
    Db  000h,000h,000h,0FCh,066h,066h,066h,07Ch,060h,060h,060h,0F0h,000h,000h ;   Hex #50
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0D6h,0DEh,07Ch,00Eh,000h ;   Hex #51
    Db  000h,000h,000h,0FCh,066h,066h,066h,07Ch,06Ch,066h,066h,0E6h,000h,000h ;   Hex #52
    Db  000h,000h,000h,07Ch,0C6h,0C6h,060h,038h,00Ch,0C6h,0C6h,07Ch,000h,000h ;   Hex #53
    Db  000h,000h,000h,07Eh,07Eh,05Ah,018h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #54
    Db  000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #55
    Db  000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,06Ch,038h,010h,000h,000h ;   Hex #56
    Db  000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0D6h,0D6h,0FEh,06Ch,06Ch,000h,000h ;   Hex #57
    Db  000h,000h,000h,0C6h,0C6h,0C6h,07Ch,038h,07Ch,0C6h,0C6h,0C6h,000h,000h ;   Hex #58
    Db  000h,000h,000h,066h,066h,066h,066h,03Ch,018h,018h,018h,03Ch,000h,000h ;   Hex #59
    Db  000h,000h,000h,0FEh,0C6h,08Ch,018h,030h,060h,0C2h,0C6h,0FEh,000h,000h ;   Hex #5A
    Db  000h,000h,000h,03Ch,030h,030h,030h,030h,030h,030h,030h,03Ch,000h,000h ;   Hex #5B
    Db  000h,000h,000h,080h,0C0h,0E0h,070h,038h,01Ch,00Eh,006h,002h,000h,000h ;   Hex #5C
    Db  000h,000h,000h,03Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,03Ch,000h,000h ;   Hex #5D
    Db  010h,038h,06Ch,0C6h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #5E
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,0FFh ;   Hex #5F
    Db  000h,030h,018h,00Ch,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #60
    Db  000h,000h,000h,000h,000h,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #61
    Db  000h,000h,000h,0E0h,060h,060h,078h,06Ch,066h,066h,066h,07Ch,000h,000h ;   Hex #62
    Db  000h,000h,000h,000h,000h,000h,07Ch,0C6h,0C0h,0C0h,0C6h,07Ch,000h,000h ;   Hex #63
    Db  000h,000h,000h,01Ch,00Ch,00Ch,03Ch,06Ch,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #64
    Db  000h,000h,000h,000h,000h,000h,07Ch,0C6h,0FEh,0C0h,0C6h,07Ch,000h,000h ;   Hex #65
    Db  000h,000h,000h,01Ch,036h,032h,030h,07Ch,030h,030h,030h,078h,000h,000h ;   Hex #66
    Db  000h,000h,000h,000h,000h,000h,076h,0CCh,0CCh,0CCh,07Ch,00Ch,0CCh,078h ;   Hex #67
    Db  000h,000h,000h,0E0h,060h,060h,06Ch,076h,066h,066h,066h,0E6h,000h,000h ;   Hex #68
    Db  000h,000h,000h,018h,018h,000h,038h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #69
    Db  000h,000h,000h,006h,006h,000h,00Eh,006h,006h,006h,006h,066h,066h,03Ch ;   Hex #6A
    Db  000h,000h,000h,0E0h,060h,060h,066h,06Ch,078h,06Ch,066h,0E6h,000h,000h ;   Hex #6B
    Db  000h,000h,000h,038h,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #6C
    Db  000h,000h,000h,000h,000h,000h,0ECh,0FEh,0D6h,0D6h,0D6h,0D6h,000h,000h ;   Hex #6D
    Db  000h,000h,000h,000h,000h,000h,0DCh,066h,066h,066h,066h,066h,000h,000h ;   Hex #6E
    Db  000h,000h,000h,000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #6F
    Db  000h,000h,000h,000h,000h,000h,0DCh,066h,066h,066h,07Ch,060h,060h,0F0h ;   Hex #70
    Db  000h,000h,000h,000h,000h,000h,076h,0CCh,0CCh,0CCh,07Ch,00Ch,00Ch,01Eh ;   Hex #71
    Db  000h,000h,000h,000h,000h,000h,0DCh,076h,066h,060h,060h,0F0h,000h,000h ;   Hex #72
    Db  000h,000h,000h,000h,000h,000h,07Ch,0C6h,070h,01Ch,0C6h,07Ch,000h,000h ;   Hex #73
    Db  000h,000h,000h,010h,030h,030h,0FCh,030h,030h,030h,036h,01Ch,000h,000h ;   Hex #74
    Db  000h,000h,000h,000h,000h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #75
    Db  000h,000h,000h,000h,000h,000h,0C6h,0C6h,0C6h,06Ch,038h,010h,000h,000h ;   Hex #76
    Db  000h,000h,000h,000h,000h,000h,0C6h,0C6h,0D6h,0D6h,0FEh,06Ch,000h,000h ;   Hex #77
    Db  000h,000h,000h,000h,000h,000h,0C6h,06Ch,038h,038h,06Ch,0C6h,000h,000h ;   Hex #78
    Db  000h,000h,000h,000h,000h,000h,0C6h,0C6h,0C6h,0C6h,07Eh,006h,00Ch,078h ;   Hex #79
    Db  000h,000h,000h,000h,000h,000h,0FEh,0CCh,018h,030h,066h,0FEh,000h,000h ;   Hex #7A
    Db  000h,000h,000h,00Eh,018h,018h,018h,070h,018h,018h,018h,00Eh,000h,000h ;   Hex #7B
    Db  000h,000h,000h,018h,018h,018h,018h,018h,018h,018h,018h,018h,000h,000h ;   Hex #7C
    Db  000h,000h,000h,070h,018h,018h,018h,00Eh,018h,018h,018h,070h,000h,000h ;   Hex #7D
    Db  000h,076h,0DCh,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #7E
    Db  000h,000h,000h,000h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,000h,000h,000h ;   Hex #7F
    Db  000h,000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0C0h,0C2h,066h,03Ch,00Ch,078h ;   Hex #80
    Db  000h,000h,000h,0CCh,000h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #81
    Db  000h,000h,00Ch,018h,030h,000h,07Ch,0C6h,0FEh,0C0h,0C6h,07Ch,000h,000h ;   Hex #82
    Db  000h,000h,010h,038h,06Ch,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #83
    Db  000h,000h,000h,0C6h,000h,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #84
    Db  000h,000h,060h,030h,018h,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #85
    Db  000h,000h,038h,06Ch,038h,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #86
    Db  000h,000h,000h,000h,000h,000h,07Ch,0C6h,0C0h,0C0h,0C6h,07Ch,00Ch,078h ;   Hex #87
    Db  000h,000h,010h,038h,06Ch,000h,07Ch,0C6h,0FEh,0C0h,0C6h,07Ch,000h,000h ;   Hex #88
    Db  000h,000h,000h,0C6h,000h,000h,07Ch,0C6h,0FEh,0C0h,0C6h,07Ch,000h,000h ;   Hex #89
    Db  000h,000h,060h,030h,018h,000h,07Ch,0C6h,0FEh,0C0h,0C6h,07Ch,000h,000h ;   Hex #8A
    Db  000h,000h,000h,066h,000h,000h,038h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #8B
    Db  000h,000h,018h,03Ch,066h,000h,038h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #8C
    Db  000h,000h,060h,030h,018h,000h,038h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #8D
    Db  000h,0C6h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #8E
    Db  038h,06Ch,038h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #8F
    Db  00Ch,018h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h ;   Hex #90
    Db  000h,000h,000h,000h,000h,000h,0ECh,036h,076h,0DCh,0D8h,06Eh,000h,000h ;   Hex #91
    Db  000h,000h,000h,03Eh,06Ch,0CCh,0CCh,0FEh,0CCh,0CCh,0CCh,0CEh,000h,000h ;   Hex #92
    Db  000h,000h,010h,038h,06Ch,000h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #93
    Db  000h,000h,000h,0C6h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #94
    Db  000h,000h,060h,030h,018h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #95
    Db  000h,000h,030h,078h,0CCh,000h,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #96
    Db  000h,000h,060h,030h,018h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #97
    Db  000h,000h,000h,0C6h,000h,000h,0C6h,0C6h,0C6h,0C6h,07Eh,006h,00Ch,078h ;   Hex #98
    Db  000h,0C6h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #99
    Db  000h,0C6h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #9A
    Db  000h,000h,018h,018h,07Ch,0C6h,0C0h,0C0h,0C6h,07Ch,018h,018h,000h,000h ;   Hex #9B
    Db  000h,000h,038h,06Ch,064h,060h,0F0h,060h,060h,060h,0E6h,0FCh,000h,000h ;   Hex #9C
    Db  000h,000h,000h,066h,066h,03Ch,018h,07Eh,018h,07Eh,018h,018h,000h,000h ;   Hex #9D
    Db  000h,000h,0FCh,066h,066h,07Ch,062h,066h,06Fh,066h,066h,0F3h,000h,000h ;   Hex #9E
    Db  000h,000h,00Eh,01Bh,018h,018h,018h,07Eh,018h,018h,018h,0D8h,070h,000h ;   Hex #9F
    Db  000h,000h,00Ch,018h,030h,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #A0
    Db  000h,000h,00Ch,018h,030h,000h,038h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #A1
    Db  000h,000h,00Ch,018h,030h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #A2
    Db  000h,000h,00Ch,018h,030h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #A3
    Db  000h,000h,000h,076h,0DCh,000h,0DCh,066h,066h,066h,066h,066h,000h,000h ;   Hex #A4
    Db  076h,0DCh,000h,0C6h,0E6h,0F6h,0FEh,0DEh,0CEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #A5
    Db  000h,000h,03Ch,06Ch,06Ch,03Eh,000h,07Eh,000h,000h,000h,000h,000h,000h ;   Hex #A6
    Db  000h,000h,038h,06Ch,06Ch,038h,000h,07Ch,000h,000h,000h,000h,000h,000h ;   Hex #A7
    Db  000h,000h,000h,030h,030h,000h,030h,030h,060h,0C6h,0C6h,07Ch,000h,000h ;   Hex #A8
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,0C0h,0C0h,0C0h,000h,000h,000h ;   Hex #A9
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,006h,006h,006h,000h,000h,000h ;   Hex #AA
    Db  000h,000h,060h,0E0h,063h,066h,06Ch,018h,030h,06Eh,0C3h,006h,00Ch,01Fh ;   Hex #AB
    Db  000h,000h,060h,0E0h,063h,066h,06Ch,01Ah,036h,06Eh,0DAh,03Fh,006h,006h ;   Hex #AC
    Db  000h,000h,000h,018h,018h,000h,018h,018h,03Ch,03Ch,03Ch,018h,000h,000h ;   Hex #AD
    Db  000h,000h,000h,000h,000h,036h,06Ch,0D8h,06Ch,036h,000h,000h,000h,000h ;   Hex #AE
    Db  000h,000h,000h,000h,000h,0D8h,06Ch,036h,06Ch,0D8h,000h,000h,000h,000h ;   Hex #AF
    Db  011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h ;   Hex #B0
    Db  055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh ;   Hex #B1
    Db  0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h ;   Hex #B2
    Db  018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B3
    Db  018h,018h,018h,018h,018h,018h,018h,0F8h,018h,018h,018h,018h,018h,018h ;   Hex #B4
    Db  018h,018h,018h,018h,018h,0F8h,018h,0F8h,018h,018h,018h,018h,018h,018h ;   Hex #B5
    Db  036h,036h,036h,036h,036h,036h,036h,0F6h,036h,036h,036h,036h,036h,036h ;   Hex #B6
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,036h,036h,036h,036h,036h,036h ;   Hex #B7
    Db  000h,000h,000h,000h,000h,0F8h,018h,0F8h,018h,018h,018h,018h,018h,018h ;   Hex #B8
    Db  036h,036h,036h,036h,036h,0F6h,006h,0F6h,036h,036h,036h,036h,036h,036h ;   Hex #B9
    Db  036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #BA
    Db  000h,000h,000h,000h,000h,0FEh,006h,0F6h,036h,036h,036h,036h,036h,036h ;   Hex #BB
    Db  036h,036h,036h,036h,036h,0F6h,006h,0FEh,000h,000h,000h,000h,000h,000h ;   Hex #BC
    Db  036h,036h,036h,036h,036h,036h,036h,0FEh,000h,000h,000h,000h,000h,000h ;   Hex #BD
    Db  018h,018h,018h,018h,018h,0F8h,018h,0F8h,000h,000h,000h,000h,000h,000h ;   Hex #BE
    Db  000h,000h,000h,000h,000h,000h,000h,0F8h,018h,018h,018h,018h,018h,018h ;   Hex #BF
    Db  018h,018h,018h,018h,018h,018h,018h,01Fh,000h,000h,000h,000h,000h,000h ;   Hex #C0
    Db  018h,018h,018h,018h,018h,018h,018h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #C1
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,018h,018h,018h,018h,018h,018h ;   Hex #C2
    Db  018h,018h,018h,018h,018h,018h,018h,01Fh,018h,018h,018h,018h,018h,018h ;   Hex #C3
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #C4
    Db  018h,018h,018h,018h,018h,018h,018h,0FFh,018h,018h,018h,018h,018h,018h ;   Hex #C5
    Db  018h,018h,018h,018h,018h,01Fh,018h,01Fh,018h,018h,018h,018h,018h,018h ;   Hex #C6
    Db  036h,036h,036h,036h,036h,036h,036h,037h,036h,036h,036h,036h,036h,036h ;   Hex #C7
    Db  036h,036h,036h,036h,036h,037h,030h,03Fh,000h,000h,000h,000h,000h,000h ;   Hex #C8
    Db  000h,000h,000h,000h,000h,03Fh,030h,037h,036h,036h,036h,036h,036h,036h ;   Hex #C9
    Db  036h,036h,036h,036h,036h,0F7h,000h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #CA
    Db  000h,000h,000h,000h,000h,0FFh,000h,0F7h,036h,036h,036h,036h,036h,036h ;   Hex #CB
    Db  036h,036h,036h,036h,036h,037h,030h,037h,036h,036h,036h,036h,036h,036h ;   Hex #CC
    Db  000h,000h,000h,000h,000h,0FFh,000h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #CD
    Db  036h,036h,036h,036h,036h,0F7h,000h,0F7h,036h,036h,036h,036h,036h,036h ;   Hex #CE
    Db  018h,018h,018h,018h,018h,0FFh,000h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #CF
    Db  036h,036h,036h,036h,036h,036h,036h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #D0
    Db  000h,000h,000h,000h,000h,0FFh,000h,0FFh,018h,018h,018h,018h,018h,018h ;   Hex #D1
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,036h,036h,036h,036h,036h,036h ;   Hex #D2
    Db  036h,036h,036h,036h,036h,036h,036h,03Fh,000h,000h,000h,000h,000h,000h ;   Hex #D3
    Db  018h,018h,018h,018h,018h,01Fh,018h,01Fh,000h,000h,000h,000h,000h,000h ;   Hex #D4
    Db  000h,000h,000h,000h,000h,01Fh,018h,01Fh,018h,018h,018h,018h,018h,018h ;   Hex #D5
    Db  000h,000h,000h,000h,000h,000h,000h,03Fh,036h,036h,036h,036h,036h,036h ;   Hex #D6
    Db  036h,036h,036h,036h,036h,036h,036h,0FFh,036h,036h,036h,036h,036h,036h ;   Hex #D7
    Db  018h,018h,018h,018h,018h,0FFh,018h,0FFh,018h,018h,018h,018h,018h,018h ;   Hex #D8
    Db  018h,018h,018h,018h,018h,018h,018h,0F8h,000h,000h,000h,000h,000h,000h ;   Hex #D9
    Db  000h,000h,000h,000h,000h,000h,000h,01Fh,018h,018h,018h,018h,018h,018h ;   Hex #DA
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DB
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DC
    Db  0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h ;   Hex #DD
    Db  00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh ;   Hex #DE
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,000h,000h,000h,000h,000h,000h,000h ;   Hex #DF
    Db  000h,000h,000h,000h,000h,000h,076h,0DCh,0D8h,0D8h,0DCh,076h,000h,000h ;   Hex #E0
    Db  000h,000h,000h,078h,0CCh,0CCh,0CCh,0D8h,0CCh,0C6h,0C6h,0CCh,000h,000h ;   Hex #E1
    Db  000h,000h,000h,0FEh,0C6h,0C6h,0C0h,0C0h,0C0h,0C0h,0C0h,0C0h,000h,000h ;   Hex #E2
    Db  000h,000h,000h,000h,000h,000h,0FEh,06Ch,06Ch,06Ch,06Ch,06Ch,000h,000h ;   Hex #E3
    Db  000h,000h,000h,0FEh,0C6h,060h,030h,018h,030h,060h,0C6h,0FEh,000h,000h ;   Hex #E4
    Db  000h,000h,000h,000h,000h,000h,07Eh,0D8h,0D8h,0D8h,0D8h,070h,000h,000h ;   Hex #E5
    Db  000h,000h,000h,000h,000h,000h,066h,066h,066h,066h,066h,07Ch,060h,0C0h ;   Hex #E6
    Db  000h,000h,000h,000h,000h,076h,0DCh,018h,018h,018h,018h,018h,000h,000h ;   Hex #E7
    Db  000h,000h,000h,07Eh,018h,03Ch,066h,066h,066h,03Ch,018h,07Eh,000h,000h ;   Hex #E8
    Db  000h,000h,000h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,06Ch,038h,000h,000h ;   Hex #E9
    Db  000h,000h,000h,038h,06Ch,0C6h,0C6h,0C6h,06Ch,06Ch,06Ch,0EEh,000h,000h ;   Hex #EA
    Db  000h,000h,000h,01Eh,030h,018h,00Ch,03Eh,066h,066h,066h,03Ch,000h,000h ;   Hex #EB
    Db  000h,000h,000h,000h,000h,000h,07Eh,0DBh,0DBh,07Eh,000h,000h,000h,000h ;   Hex #EC
    Db  000h,000h,000h,003h,006h,07Eh,0DBh,0DBh,0F3h,07Eh,060h,0C0h,000h,000h ;   Hex #ED
    Db  000h,000h,000h,01Eh,030h,060h,060h,07Eh,060h,060h,030h,01Eh,000h,000h ;   Hex #EE
    Db  000h,000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,000h,000h ;   Hex #EF
    Db  000h,000h,000h,000h,0FEh,000h,000h,0FEh,000h,000h,0FEh,000h,000h,000h ;   Hex #F0
    Db  000h,000h,000h,000h,018h,018h,07Eh,018h,018h,000h,000h,07Eh,000h,000h ;   Hex #F1
    Db  000h,000h,000h,030h,018h,00Ch,006h,00Ch,018h,030h,000h,07Eh,000h,000h ;   Hex #F2
    Db  000h,000h,000h,00Ch,018h,030h,060h,030h,018h,00Ch,000h,07Eh,000h,000h ;   Hex #F3
    Db  000h,000h,00Eh,01Bh,01Bh,018h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #F4
    Db  018h,018h,018h,018h,018h,018h,018h,018h,0D8h,0D8h,070h,000h,000h,000h ;   Hex #F5
    Db  000h,000h,000h,000h,000h,018h,000h,07Eh,000h,018h,000h,000h,000h,000h ;   Hex #F6
    Db  000h,000h,000h,000h,000h,076h,0DCh,000h,076h,0DCh,000h,000h,000h,000h ;   Hex #F7
    Db  000h,038h,06Ch,06Ch,038h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #F8
    Db  000h,000h,000h,000h,000h,000h,000h,018h,018h,000h,000h,000h,000h,000h ;   Hex #F9
    Db  000h,000h,000h,000h,000h,000h,000h,018h,000h,000h,000h,000h,000h,000h ;   Hex #FA
    Db  000h,00Fh,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,0ECh,06Ch,03Ch,01Ch,000h,000h ;   Hex #FB
    Db  000h,06Ch,036h,036h,036h,036h,036h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FC
    Db  000h,03Ch,066h,00Ch,018h,032h,07Eh,000h,000h,000h,000h,000h,000h,000h ;   Hex #FD
    Db  000h,000h,000h,000h,000h,07Eh,07Eh,07Eh,07Eh,07Eh,07Eh,000h,000h,000h ;   Hex #FE
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FF

=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\macros.inc ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; *** MACROS **** MACROS **** MACROS ****
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
IF1                                     ;
        ;%out .               MACROS  .INC
ENDIF                                   ;
                                        ;
JUMP    MACRO   LBL                     ;
        LOCAL   A                       ;
.XCREF                                  ;
      IFNDEF LBL&_J                     ; IS THIS FIRST INVOKATION
A:       JMP     LBL                    ;
      ELSE                              ;
         IF (LBL&_J GE $) OR ($-LBL&_J GT 126)
A:          JMP     LBL                 ; IS THE JUMP TOO FAR AWAY?
         ELSE                           ;
A:          JMP     LBL&_J              ; PERFORM SHORT JUMP
         ENDIF                          ;
      ENDIF                             ;
LBL&_J=A                                ;
.CREF                                   ;
        ENDM                            ;
.XCREF JUMP                             ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
; *** MACROS **** MACROS **** MACROS ****
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\tables.inc ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	TABLES.INC
;
;	THIS FILE CONTAINS THE CONFIGURATION INFORMATION FOR THE CPS CON
;	DEVICE DRIVER.	THE INFORMATION IS INDEXED USING THE FULL DEVICE
;	SUB-TYPE ID.
;
;	THE TABLE STRUCTURE IS AS FOLLOWS:
;
;	DB	"........"       device sub-type id
;	DB	00000xxxb	 encoded font resolution byte
;	DW	OFFSET modes	 pointer to list of display modes
;	DW	OFFSET fonts	 pointer to list of font resolutions
;
;    Ŀ
;     Loading mechanism bit incoding			    
;    							    
;    	 USER ? 					    
;    	   	  BIOS SUPPORT				    
;    	Ŀ Ŀ 				    
;    							    
;    	7 6 5 4 3 2 1 0 				    
;    	x x x x 0 0 x x 				    
;    	          1 - INT 10 - AX=1100H 	    
;    	        					    
;    	         1 = INT 10 - AX=1400H 	    
;    	    					    
;    	    1 = INT 1FH			    
;    	  						    
;    	   1 = INT 43H			    
;    	 						    
;    	  1 = LCD 1FH handling needed	    
;    							    
;    	 1 = LCD 44H handling needed	    
;    
;
;    Ŀ
;     Memory Requirements				    
;    							    
;    	7 6 5 4 3 2 1 0 				    
;    	0 0 0 0 x x x x 				    
;    		    200 scan lines		    
;    		   350 scan lines		    
;    		  400 scan lines		    
;    		 480 scan lines		    
;    							    
;    
;
;	THE TABLES ARE FILLED BEYOND THE SUPPORTED MODES.  THIS
;	IS 'GUESSING' AT THE APPROACH FOR ANY FUTURE DISPLAY MODES
;	WHICH MAY BE BEYOND THE CON-CPS V1.0 SUPPORT.  TO DATE,
;	NO ADAPTER SUPPORTS THE EXTRA MODES - NOT EVEN <insert IBM codeword>.
;
;	Numerous <insert IBM code words> WOULD USE THE
;	SUBSET OF THE EGA MODES.
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
IF1
        ;%out .               TABLES  .INC
ENDIF
						;
DISPLAY_CONFIG	LABEL	BYTE			;
	DB	"EGA     "                      ; EGA SUPPORT
DC_FONT DB	00000111b			;
	DW	OFFSET EGA_MODES		;
	DW	OFFSET EGA_FONT_SIZE		;
DC_ENTRY	EQU ($-DISPLAY_CONFIG)		;
	DB	"EGA 8   "                      ; EGA (5153)
	DB	00000001b			;
	DW	OFFSET EGA_MODES		;
	DW	OFFSET EGA8_FONT_SIZE		;
	DB	"EGA 14  "                      ; EGA (5154)
	DB	00000011b			;
	DW	OFFSET EGA_MODES		;
	DW	OFFSET EGA14_FONT_SIZE		;
	DB	"EGA 14M "                      ; EGA (5151)
	DB	00000011b			; WGR load 8x8 for > 25.       ;AN000;
	DW	OFFSET EGAM_MODES		;
	DW	OFFSET EGA14_FONT_SIZE		;
	DB	"LCD     "                      ; CONVERTIBLE
	DB	00000001b			;
	DW	OFFSET LCD_MODES		;
	DW	OFFSET LCD_FONT_SIZE		;
	DB	"MONO    "                      ; MONOCHROME ADAPTER
	DB	00000000b			;
	DW	OFFSET MONO_MODES		;
	DW	OFFSET MONO_FONT_SIZE		;
	DB	"CGA     "                      ; COLOUR GRAPHICS ADAPTER
	DB	00000000b			;
	DW	OFFSET MONO_MODES		;
	DW	OFFSET MONO_FONT_SIZE		;
NUM_DISPLAY_CONFIG EQU ($-DISPLAY_CONFIG)/DC_ENTRY
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
EGA_MODES:			;
	DB	00000001b	;0
	DB	00000001b	;1
	DB	00000001b	;2
	DB	00000001b	;3
	DB	00110000b	;4
	DB	00110000b	;5
	DB	00110000b	;6
	DB	00000001b	;7
	DB	11111111b     ;D;8 Ŀ
	DB	11111111b     ;D;9	 
	DB	11111111b     ;D;A    RESERVED
	DB	11111111b     ;D;B	 
	DB	11111111b     ;D;C 
	DB	00110000b	;D
	DB	00110000b	;E
	DB	00100000b	;F
	DB	00100000b	;10
	DB	00100000b	;11
	DB	00100000b	;12
	DB	00110000b	;13
	DB	00110000b	;14
	DB	00110000b	;15
	DB	00110000b	;16
	DB	00110000b	;17
	DB	00110000b	;18
	DB	00110000b	;19
	DB	00110000b	;1A
	DB	00110000b	;1B
	DB	00110000b	;1C
	DB	00110000b	;1D
	DB	00110000b	;1E
	DB	00110000b	;1F
NUM_MODES    EQU ($-EGA_MODES)	;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
EGAM_MODES:			;
	DB	11111111b	;0
	DB	11111111b	;1
	DB	11111111b	;2
	DB	11111111b	;3
	DB	11111111b	;4
	DB	11111111b	;5
	DB	11111111b	;6
	DB	00010001b	;7
	DB	11111111b     ;D;8 Ŀ
	DB	11111111b     ;D;9	 
	DB	11111111b     ;D;A    RESERVED
	DB	11111111b     ;D;B	 
	DB	11111111b     ;D;C 
	DB	11111111b	;D
	DB	11111111b	;E
	DB	00100000b	;F
	DB	11111111b	;10
	DB	11111111b	;11
	DB	11111111b	;12
	DB	11111111b	;13
	DB	11111111b	;14
	DB	11111111b	;15
	DB	11111111b	;16
	DB	11111111b	;17
	DB	11111111b	;18
	DB	11111111b	;19
	DB	11111111b	;1A
	DB	11111111b	;1B
	DB	11111111b	;1C
	DB	11111111b	;1D
	DB	11111111b	;1E
	DB	11111111b	;1F
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LCD_MODES:			;
	DB	00000010b	;0
	DB	00000010b	;1
	DB	00000010b	;2
	DB	00000010b	;3
	DB	11010000b	;4
	DB	11010000b	;5
	DB	11010000b	;6
	DB	00000010b	;7
	DB	11111111b     ;D;8 Ŀ
	DB	11111111b     ;D;9	 
	DB	11111111b     ;D;A    RESERVED
	DB	11111111b     ;D;B	 
	DB	11111111b     ;D;C 
	DB	11010000b	;D
	DB	11010000b	;E
	DB	11010000b	;F
	DB	11010000b	;10
	DB	11010000b	;11
	DB	11010000b	;12
	DB	11010000b	;13
	DB	11010000b	;14
	DB	11010000b	;15
	DB	11010000b	;16
	DB	11010000b	;17
	DB	11010000b	;18
	DB	11010000b	;19
	DB	11010000b	;1A
	DB	11010000b	;1B
	DB	11010000b	;1C
	DB	11010000b	;1D
	DB	11010000b	;1E
	DB	11010000b	;1F
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
MONO_MODES:			;
MONO_FONT_SIZE: 		;
	DB	11111111b	;0
	DB	11111111b	;1
	DB	11111111b	;2
	DB	11111111b	;3
	DB	11111111b	;4
	DB	11111111b	;5
	DB	11111111b	;6
	DB	11111111b	;7
	DB	11111111b     ;D;8 Ŀ
	DB	11111111b     ;D;9	 
	DB	11111111b     ;D;A    RESERVED
	DB	11111111b     ;D;B	 
	DB	11111111b     ;D;C 
	DB	11111111b	;D
	DB	11111111b	;E
	DB	11111111b	;F
	DB	11111111b	;10
	DB	11111111b	;11
	DB	11111111b	;12
	DB	11111111b	;13
	DB	11111111b	;14
	DB	11111111b	;15
	DB	11111111b	;16
	DB	11111111b	;17
	DB	11111111b	;18
	DB	11111111b	;19
	DB	11111111b	;1A
	DB	11111111b	;1B
	DB	11111111b	;1C
	DB	11111111b	;1D
	DB	11111111b	;1E
	DB	11111111b	;1F
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
EGA_FONT_SIZE:			;		this needs to be adjusted
	DB	0		;0		*************************
	DB	0		;1		*************************
	DB	0		;2
	DB	0		;3
	DB	8		;4
	DB	8		;5
	DB	8		;6
	DB	0		;7
	DB	0FFH	      ;D;8 Ŀ
	DB	0FFH	      ;D;9	 
	DB	0FFH	      ;D;A    RESERVED
	DB	0FFH	      ;D;B	 
	DB	0FFH	      ;D;C 
	DB	0		;D
	DB	0		;E
	DB	0		;F
	DB	0		;10
	DB	0		;11
	DB	0		;12
	DB	0		;13
	DB	0		;14
	DB	0		;15
	DB	0		;16
	DB	0		;17
	DB	0		;18
	DB	0		;19
	DB	0		;1A
	DB	0		;1B
	DB	0		;1C
	DB	0		;1D
	DB	0		;1E
	DB	0		;1F
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
EGA8_FONT_SIZE: 		;
	DB	8		;0
	DB	8		;1
	DB	8		;2
	DB	8		;3
	DB	8		;4
	DB	8		;5
	DB	8		;6
	DB	0FFH		;7
	DB	0FFH	      ;D;8 Ŀ
	DB	0FFH	      ;D;9	 
	DB	0FFH	      ;D;A    RESERVED
	DB	0FFH	      ;D;B	 
	DB	0FFH	      ;D;C 
	DB	8		;D
	DB	8		;E
	DB	8		;F
	DB	0FFH		;10
	DB	0FFH		;11
	DB	0FFH		;12
	DB	0FFH		;13
	DB	0FFH		;14
	DB	0FFH		;15
	DB	0FFH		;16
	DB	0FFH		;17
	DB	0FFH		;18
	DB	0FFH		;19
	DB	0FFH		;1A
	DB	0FFH		;1B
	DB	0FFH		;1C
	DB	0FFH		;1D
	DB	0FFH		;1E
	DB	0FFH		;1F
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
EGA14_FONT_SIZE:		;
	DB	14		;0
	DB	14		;1
	DB	14		;2
	DB	14		;3
	DB	 8		;4
	DB	 8		;5
	DB	 8		;6
	DB	14		;7
	DB	0FFH	      ;D;8 Ŀ
	DB	0FFH	      ;D;9	 
	DB	0FFH	      ;D;A    RESERVED
	DB	0FFH	      ;D;B	 
	DB	0FFH	      ;D;C 
	DB	 8		;D
	DB	 8		;E
	DB	14		;F
	DB	14		;10
	DB	0FFH		;11
	DB	0FFH		;12
	DB	0FFH		;13
	DB	0FFH		;14
	DB	0FFH		;15
	DB	0FFH		;16
	DB	0FFH		;17
	DB	0FFH		;18
	DB	0FFH		;19
	DB	0FFH		;1A
	DB	0FFH		;1B
	DB	0FFH		;1C
	DB	0FFH		;1D
	DB	0FFH		;1E
	DB	0FFH		;1F
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
LCD_FONT_SIZE:			;
	DB	8		;0
	DB	8		;1
	DB	8		;2
	DB	8		;3
	DB	8		;4
	DB	8		;5
	DB	8		;6
	DB	8		;7
	DB	0FFH	      ;D;8 Ŀ
	DB	0FFH	      ;D;9	 
	DB	0FFH	      ;D;A    RESERVED
	DB	0FFH	      ;D;B	 
	DB	0FFH	      ;D;C 
	DB	8		;D
	DB	8		;E
	DB	8		;F
	DB	8		;10
	DB	8		;11
	DB	8		;12
	DB	8		;13
	DB	8		;14
	DB	8		;15
	DB	8		;16
	DB	8		;17
	DB	8		;18
	DB	8		;19
	DB	8		;1A
	DB	8		;1B
	DB	8		;1C
	DB	8		;1D
	DB	8		;1E
	DB	8		;1F
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\int2fcom.inc ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;   INTERRUPT 2F HEX COMMUNICATION ROUTINE
;
;   This routine is used to communicate between the CON driver
;   and the Keyboard routine.  The various calls are as follows:
;
;   1) not yet defined
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
IF1					       ;
        ;%out .               INT2FCOM.INC
ENDIF					       ;
	PUBLIC	ROM_INT_2F		       ;
	PUBLIC	INT_2F_COM		       ;
	PUBLIC	ABORT			       ;
					       ;
CON_REQ LABEL WORD			       ; THESE CALLS START AT '00H'
	DW	OFFSET CON_INSTALL	       ;
	DW	OFFSET CON_INVOKE	       ;
	DW	OFFSET CON_QUERY_CP	       ;
	DW	OFFSET CON_QUERY_PARAMETER     ;
CON_MAX EQU	($-CON_REQ)/2		       ;
					       ;
QPARM_TABLE LABEL WORD			       ;
	DW	OFFSET CPD_DESG_N	       ;
	DW	OFFSET CPD_FONTS_N	       ;
	DW	OFFSET CPD_HDWR_N	       ;
QPARM_ENTRY EQU  ($-QPARM_TABLE)/2	       ;
					       ;
ROM_INT_2F	 DW   ? 		       ; Int 2FH vector offset
		 DW   ? 		       ; Int 2FH vector segment

OLD_CPD_ACTIVE	DW	?	; M001 location to store CPD_ACTIVE
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	INTERRUPT 2F HEX
;
;	Communication between the KEYBOARD (KEYB.COM) and the
;	CON Device Driver.
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
INT_2F_COM	PROC  FAR		;
	STI				;
	CMP	AH,0ADH 		; TEST THE SUBFUNCTION CALL
	JNE	I2C_6			; RESERVED FOR THE COM PATH!
					;
	CMP	AL,10H			; WGR				       ;AN000;
	JNE	I2C_0			; WGR				       ;AN000;
	CALL	CHECK_VALID		; WGR				       ;AN000;
	PUSH	SI			; WGR				       ;AN000;
        jmp     short I2C_1                   ; WGR                                  ;AN000;
I2C_0:					; WGR
	CMP	AL,CON_MAX		; TEST IF IT IS ABOVE HIGH
	JAE	I2C_6			; CON CALL?
					;
	PUSH	SI			; FORMULATE THE JUMP POINTER
	PUSH	AX			;
	XOR	AH,AH			;
	MOV	SI,AX			;
	POP	AX			;
	ADD	SI,SI			;
	CALL	CS:CON_REQ[SI]		; call routine to handle the command
I2C_1:					;
	PUSH	AX			; SAVE AX REGISTER TO PLAY WITH STACK
	MOV	SI,SP			;
	MOV	AX,SS:[SI+8]		; ACCOUNT FOR SI & AX ON STACK
	JC	I2C_2			;
	AND	AX,NOT_CY		;
        jmp     short I2C_3                   ;
I2C_2:	OR	AX,CY			;
I2C_3:	MOV	SS:[SI+8],AX		;
	POP	AX			;
	POP	SI			;
ABORT:	IRET				;
I2C_6:	JMP    DWORD PTR CS:ROM_INT_2F	;
INT_2F_COM   ENDP			;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	CON_INSTALL
;
;	A STRAIGHT FORWARD ROUTINE WHICH INDICATES WHETHER OR NOT
;	ANY PC DOS CPS-CON SUPPORT WAS LOADED DURING BOOTSTRAP.
;	THE INTERFACE IS AS PER 'DOS FUNCTIONAL SPEC'
;	(Program Interfaces).
;
;	INPUT:
;		none
;
;	OUTPUT:
;		AX = (-1) if loaded
;		     no change if not....since this is not even loaded!
;		BX = [upper nibble][lower nibble] = MAJOR - MINOR
;		     release number.
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
CON_INSTALL	PROC			;
	MOV	AX,-1			; CHANGE AX TO '0FFFFH' AND BX TO
	MOV	BX,0100H		; MAJOR - MINOR VERSION #
	CLC				; NO ERROR TO INDICATE....
	RET				;
CON_INSTALL	ENDP			;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	CHECK_VALID
;
;	THIS ROUTINE CHECKS TO SEE IF THE CURRENT CODE PAGE HAS BEEN
;	PREPARED FOR AN 8X8 RAM FONT.  THIS IS AN INTERFACE TO ANSI.SYS
;	TO ENSURE THAT A REQUEST FOR > 25 LINES IS VALID.
;
;	INPUT:
;		none
;
;	OUTPUT:
;		CF = 1 IF NOT FONT NOT AVAILABLE
;		   = 0 IF FONT IS AVAILABLE.
;
;	AUTHOR: WGR
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
CHECK_VALID	PROC			;				       ;AN000;
	CMP	CS:CPD_ACTIVE,-1	; see if a code page has been..        ;AN000;
	JNE	CV_1			; selected?			       ;AN000;
	CLC				; no..therefore hardware code page..   ;AN000;
        jmp     short CV_4                    ; okay...exit with carry clear.        ;AN000;
CV_1:					;				       ;AN000;
	PUSH	BX			; s				       ;AN000;
	PUSH	CX			;  a				       ;AN000;
	PUSH	DX			;   v				       ;AN000;
	PUSH	DI			;    e				       ;AN000;
	PUSH	SI			;	r			       ;AN000;
	PUSH	DS			;	 e			       ;AN000;
	PUSH	ES			;	  g			       ;AN000;
	PUSH	CS			;	   s.			       ;AN000;
	POP	DS			; establish addressibility to data     ;AN000;
	MOV	CX,CPD_ACTIVE		; use active code page...	       ;AN000;
	CALL	FIND_CP 		; is the code page prepared?	       ;AN000;
	JC	CV_3			; no....problem..exit with carry set.  ;AN000;
        or      cx,cx                   ; okay...check if hardware code page?  ;AN000;
        jnz     CV_2                    ;                                      ;AN000;
	CLC				; yes...so okay...exit with carry clear;AN000;
        jmp     short CV_3                    ;                                      ;AN000;
CV_2:					;				       ;AN000;
	MOV	DL,CS:BYTES_PER_CHAR	; save current box size..	       ;AN000;
	PUSH	DX			;				       ;AN000;
	MOV	CS:BYTES_PER_CHAR,8	; check for 8x8 box (>25 line support) ;AN000;
	CALL	FIND_FONT		; is font size there??		       ;AN000;
	POP	DX			;				       ;AN000;
	MOV	CS:BYTES_PER_CHAR,DL	; restore old box size...FIND_FONT...  ;AN000;
CV_3:					; will have returned..		       ;AN000;
	POP	ES			; with carry set appropriately	       ;AN000;
	POP	DS			;				       ;AN000;
	POP	SI			; restore			       ;AN000;
	POP	DI			;				       ;AN000;
	POP	DX			;      registers.		       ;AN000;
	POP	CX			;				       ;AN000;
	POP	BX			;				       ;AN000;
CV_4:					;				       ;AN000;
	RET				; return.			       ;AN000;
CHECK_VALID	ENDP			;				       ;AN000;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	CON_INVOKE
;
;	THIS ROUTINE IS A SECOND INTERFACE TO THE CPS CON DEVICE
;	TO ACTIVATE A PARTICULAR CODE PAGE.  THIS MAKE USE OF THE
;	SAME ROUTINES AS THE GENERIC IOCTL CALLS (via INT 21H).
;	A SEMAPHORE IS PROVIDED BY THE IOCTL CALLS TO PREVENT
;	RE-ENTRANCY....WHICH MAY CAUSE INTERESTING RESULTS!!
;
;	INPUT:
;		BX = code page to activate
;
;	OUTPUT:
;		CY = 0 if CP was activated
;		     1 if an error occurred during activation
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
CON_INVOKE	PROC			;
	PUSH	DS			;
	PUSH	ES			;
	CMP	CS:G_IOCTL_SEMA,ONE	; ARE GENERIC IOCTL ROUTINES ACTIVE???

;	JE	CI_3			; M001  IF SO, THEN EXIT WITH ERROR...
	JE	CI_4			; M001  IF SO, THEN EXIT WITH ERROR...
					;
	PUSH	CS			;
	POP	DS			;
	PUSH	CS			;
	POP	ES			;
	PUSH	CPD_ACTIVE		;
	MOV	CPD_ACTIVE,BX		; SET THE ACTIVE CP = REQUESTED
	CALL	TEST_CP 		; FIND OUT IF CP IS THERE....

	; CPD_ACTIVE should remain with the new value of CP for INVOKE_DATA
	; see file CPS-FUNC.INC (fn INVOKE_CP). In case of error, we will
	; restore the CPD_ACTIVE to the old value.

;	POP	CPD_ACTIVE		; M001
	POP	OLD_CPD_ACTIVE		; M001  store the currently active CP

	JC	CI_3			; IF CY=1, THEN LEAVE OLD CP ALONE!
	CALL	INVOKE_DATA		; LOAD THE DATA....
	JC	CI_3			; IF ERROR, THEN FONT NOT AVAILABLE

;	MOV	CPD_ACTIVE,BX		; M001  CPD_ACTIVE has the new CP 
					; M001  already (see above).

	PUSH	DX			;
	MOV	DX,BX			;
	CALL	SIGNAL_KBD_INVK 	;
	POP	DX			;
	JC	CI_3			; SET CARRY IF KEYBOARD ERROR OCCURRED.
	CLC				; NO ERROR TO INDICATE....
	POP	ES			;
	POP	DS			;
	RET	    

CI_3:	PUSH	OLD_CPD_ACTIVE		; M001  Restore CPD_ACTIVE to the 
	POP	CPD_ACTIVE		; M001  value it had before this 
					; M001  call was made as an error
					; M001  occured!

CI_4:	STC				;
	POP	ES			;
	POP	DS			;
	RET				;
CON_INVOKE	ENDP			;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	CON_QUERY_CP
;
;	RETURNS THE ACTIVE CODE PAGE VALUE....CPD_ACTIVE VALUE
;	CHECKED FOR INVALID.
;
;	INPUT:
;		none
;	OUTPUT:
;		BX = CODE PAGE ACTIVATED  <-1 IF NONE ACTIVE>
;		CY = 1 IF CP INVALID (BX = -1)
;		     0 IF CP VALID
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
CON_QUERY_CP	PROC			;
	MOV	BX,CS:CPD_ACTIVE	;
	CMP	BX,-1			;
	JNE	CQCP_0			;
	MOV	AX,ONE			; SET ERROR CONDITION TO (non-active)
	STC				;
	RET				;
CQCP_0: CLC				;
	RET				;
CON_QUERY_CP	ENDP			;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	QUERY PARAMETER INFORMATION
;
;	ENTRY:	ES:DI points to data table
;		CX = max size of table to fill (in bytes)
;	EXIT:	ES:DI filled with formatted data;  DW #DESG,#FONTS,#HDWR,CPx's
;		CY = 1 if problem with table creation
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
CON_QUERY_PARAMETER PROC		;
	PUSH	DS			;
	PUSH	AX			;
	PUSH	BX			;
	PUSH	CX			;
	PUSH	DI			;
					;
	PUSH	CS			;
	POP	DS			;
					; PERFORM CHECK ON LGTH OF BUFFER
	MOV	BX,THREE		; MANDATORY THREE WORD-STARTER
	ADD	BX,CPD_HDWR_N		; ADD # CP's IN HARDWARE
	ADD	BX,CPD_DESG_N		; ADD # CP's IN DESIGNATION
	SHL	BX,1			; CONVERT TO BYTES
	CMP	BX,CX			; VERIFY THAT TABLE WILL FIT...
	JG	CQP_3			; SET ERROR CONDITION!
					;
	LEA	BX,QPARM_TABLE		;
	MOV	CX,QPARM_ENTRY		;
CQP_0:	MOV	SI,[BX] 		;
	MOV	AX,[SI] 		;
	MOV	ES:[DI],AX		;
	INC	BX			;
	INC	BX			;
	INC	DI			;
	INC	DI			;
	LOOP	CQP_0			;
					;
	CALL	GET_HDWR_CP		;
	MOV	CX,[SI] 		;
	OR	CX,CX			;
	JZ	CQP_1			;
	INC	SI			;
	INC	SI			;
	REP	MOVSW			;
					;
CQP_1:	CALL	GET_DESG_CP		;
	MOV	CX,[SI] 		;
	OR	CX,CX			;
	JE	CQP_2			;
	INC	SI			;
	INC	SI			;
	REP	MOVSW			;
					;
CQP_2:                                  ;
	CLC				; CLEAR ERROR CONDITION!
        jmp     short CQP_3b
;       POP     DI                      ;
;       POP     CX                      ;
;       POP     BX                      ;
;       POP     AX                      ;
;       POP     DS                      ;
;       RET                             ;
					;
CQP_3:                                  ;
	STC				; TELL CALLER THAT ERROR OCCURRED!
CQP_3b:
        POP     DI                      ;
	POP	CX			;
	POP	BX			;
	POP	AX			;
	POP	DS			;
	RET				;
CON_QUERY_PARAMETER ENDP		;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;	SIGNAL KEYBOARD THAT INVOKE JUST OCCURRED!
;
;	INPUT:
;		DX = code page just invoked!
;	OUTPUT:
;		none
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SIGNAL_KBD_INVK PROC			;
	PUSH	AX			;
	PUSH	BX			;
	MOV	AX,0AD81H		;
	MOV	BX,DX			;
	CLC				; CLEAR THE CARRY IN CASE NOT THERE
	INT	2FH			;
	POP	BX			;
	POP	AX			;
	RET				;
SIGNAL_KBD_INVK ENDP			;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\f-parser.inc ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */

	PAGE	,132

IF1
        ;%out .               F-PARSER.SRC
ENDIF
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;  FILENAME:	  CPS Device Driver -- Font Parser
;;  MODULE NAME:  CPSFONT
;;  TYPE:	  Font Parser Module
;;  LINK PROCEDURE:	Link CPSPMnn+CPSFONTn+PTRMSGn+CPSPInn into .EXE format.
;;			CPSPM must be first.  CPSPInn must be last.  Everything
;;			before CPSPInn will be resident.
;;  INCLUDE FILES:
;;			CPSPEQU.INC
;;  Remarks :
;;
;;	changes are made in stages : PTRSELLO, PTRSELHI, PTRLENLO, PTRLENHI
;;	as for Display-type of DEVICE_ID, there will be no printer-type of
;;	of DEVICE_TYPE. And these four stages are for the DEVICE_TYPE with
;;	the value of printer-type.
;;
;;	(most codes in the four stages are masked out as comments than real
;;	 codes to save spaces. Also mask out lines that contain the
;;	 following varaibles :
;;		--	PTR_SEL_WORD
;;		--	PTR_SELOB
;;		--	PTR_SEHIB
;;		--	PTR_LEN_WORD
;;		--	PTR_LNLOB
;;		--	PTR_LNHIB
;;		--	PRE_FONT_P0
;;		--	PRE_FONT_P
;;		--	FTB_SELECT
;;		--	FTB_SELLEN
;;
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					;;
;INCLUDE CPSPEQU.INC			 ;;
					;;
STAT_DELETE EQU 08000H			; previous degignate deleted (DST)
					; STAT_DELETE : only for FIFO
STAT_NOFIND EQU 08008H			; codepage,device not found  (DST)
STAT_DEVERR EQU 0800AH			; Device error (DST, IVK, QIV, QLS)
STAT_BADATA EQU 0800CH			; bad font file (DST)
STAT_BADDEN EQU 0800CH			; no DST (DEN)
STAT_TOMANY EQU 0800CH			; too manay codepages (DST)
STAT_DUPLCP EQU 0800CH			; too manay codepages (DST)
STAT_NOCPIV EQU 08007H			; no codepage designated/invoked
STAT_NOCP EQU	08007H			; no codepage designated/invoked
					; (IVK, QIV, QLS)
TYPE_DISPLAY EQU 01H			;; display type device
FLAG_RESTART EQU 000001H		;; bit 1 = restart the parsing

FPKT	EQU	DS:[SI] 		;
FTP	EQU	ES:[BX] 		;
					; ( I=Input  O=Output )
FTBLK	STRUC				;
FTB_LENGTH DW	TYPE FTBLK		; (NOT TO BE CHANGED)
FTB_STATUS DW	0FFFFH			; (O) parsing compelte
FTB_TID DB	'........'              ; (I)
FTB_CP	DW	0FFFFH			; (I)
FTB_TYPE DW	0			; (O)
FTB_MOD DW	0			; (O)
FTB_FONTS DW	0			; (O)
FTB_ROWS  DB	0			;; (O) DISPLAY TYPE DEVICE
FTB_COLS  DB	0			;; (O) DISPLAY TYPE DEVICE
FTB_X	  DB	0			;; (O) DISPLAY TYPE DEVICE
FTB_Y	  DB	0			;; (O) DISPLAY TYPE DEVICE
FTB_COUNT DW	0			;; (O) DISPLAY TYPE DEVICE
FTB_DLEFT DW	0			; (O)  =0, none to come
FTB_DLEN DW	0			; (O)  =0, not in this packet
FTB_DALO DW	0			; (O)  in the DOS "packet" buffer
FTB_DAHI DW	0			; (O)  "  "   "    "       "
TARGET_LO DW	0			;  internal registers
TARGET_HI DW	0			;  internal registers
FTBLK	ENDS				;
					;
FBUFS	STRUC				;
FLAG	DW	0			;
BUFFER_LEN DW	0			;
BUFFER_ADDR DD	0			;
NUM_FTBLK DW	0			; no. of FTBKL entries
FBUFS	ENDS				;
					; STATUS : (in FTB_STATUS)
FSTAT_COMPLETE EQU 0FFFFH		; parsing compeleted. (good status)
FSTAT_FONT  EQU 0FFFEH			; font data is defined and returned
FSTAT_FOUND EQU 0FFFDH			; informations including font-length
FSTAT_MATCH EQU 0FFFCH			; font header matches  FTBLK
FSTAT_SEARCH EQU 0FFFBH 		; seraching for header & font
FSTAT_BOTTOM EQU 0FFF0H 		; below this are the DOS_STATUS.
					;
;; the FSTAT with value lower than 0FFF0H is to be returned to the DOS
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					;;
PUBLIC	FTABLE,FONT_PARSER		;;
					;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;  ************************************
;;  **				      **
;;  **	     Resident Code	      **
;;  **				      **
;;  ************************************
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;	FONT_PARSER data
;;
;;	-- Interface table : FTABLE
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
FTABLE: FBUFS	<0FFFFH,,,>		;; for temporary testing
FTB1    FTBLK   <,,,,,,,,,,,,>          ;; -- at most 6 entries
FTB2	FTBLK	<,,,,,,,,,,,,>		;;
FTB3	FTBLK	<,,,,,,,,,,,,>		;;
FTB4	FTBLK	<,,,,,,,,,,,,>		;;
FTB5	FTBLK	<,,,,,,,,,,,,>		;;
FTB6	FTBLK	<,,,,,,,,,,,,>		;;
;FTB7    FTBLK   <,,,,,,,,,,,,>          ;;
;FTB8    FTBLK   <,,,,,,,,,,,,>          ;;
;FTB9    FTBLK   <,,,,,,,,,,,,>          ;;
;FTBa    FTBLK   <,,,,,,,,,,,,>          ;;
;FTBb    FTBLK   <,,,,,,,,,,,,>          ;;
;FTBc    FTBLK   <,,,,,,,,,,,,>          ;;
					;;
FP_ERROR	DW   0000H		;; internal error register
					;;
					;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					;; the followings are bytes accumulated
					;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
FTAG_LEN	EQU	8		;; FILE TAGE in the font file header
FTAG_COUNT	DW	0000H		;;
					;;
FTAG_PATTERN	LABEL	BYTE		;;
	DB	0FFH			;;
	DB	'FONT   '               ;;
					;;
					;;
					;; POINTER in the font file header
fptr_LOW LABEL	WORD			;;
fptr_LOL DB	00H			;; NEXT
fptr_LOH DB	00H			;;
fptr_HIGH LABEL WORD			;;
fptr_HIL DB	00H			;;
fptr_HIH DB	00H			;;
					;;
					;;
					;;
ENTRY_WORD LABEL WORD			;;
ENTRY_LOB DB	00H			;; ENTRY COUNT
ENTRY_HIB DB	00H			;;
NEXT_LOW LABEL	WORD			;;
NEXT_LOL DB	00H			;; NEXT
NEXT_LOH DB	00H			;;
NEXT_HIGH LABEL WORD			;;
NEXT_HIL DB	00H			;;
NEXT_HIH DB	00H			;;
TYPE_WORD LABEL WORD			;;
TYPE_LOB DB	00H			;; TYPE
TYPE_HIB DB	00H			;;
TID_CNT DW	00000H			;; TYPEID COUNT(0 to 8)
TYPE_ID :	DB '        '           ;; TYPEID
CPG_WORD LABEL	WORD			;;
CPG_LOB DB	00H			;; CODE PAGE
CPG_HIB DB	00H			;;
FONT_LOW LABEL	WORD			;;
FONT_LOL DB	00H			;; FONT ADDRESS
FONT_LOH DB	00H			;;
FONT_HIGH LABEL WORD			;;
FONT_HIL DB	00H			;;
FONT_HIH DB	00H			;;
;; the followings are contained in the font-block in the exact order & length
MOD_WORD LABEL	WORD			;;
MOD_LOB DB	00H			;; MODIFIER
MOD_HIB DB	00H			;;
FONTS_WORD LABEL WORD			;;
FONTS_LOB DB	00H			;; FONTS
FONTS_HIB DB	00H			;;
FDLEN_WORD LABEL WORD			;;
FDLEN_LOB DB	00H			;; FONT DATA LENGTH
FDLEN_HIB DB	00H			;;
PRE_FONT_ND	EQU ($-MOD_WORD)	;; used to update target for font data
					;; to follow. -- for NON-DISPLAY
;DISP_ROWS DB	 00H			 ;; DISPLAY's parameters :
;DISP_COLS DB	 00H			 ;; BOX SIZE
;DISP_X    DB	 00H			 ;; ASPECT RATIO
;DISP_Y    DB	 00H			 ;;
;COUNT_WORD    LABEL WORD		 ;; NO. OF DISPLAY CHARACTERS
;COUNT_LOB DB	 00H			 ;;
;COUNT_HIB DB	 00H			 ;;
;PRE_FONT_D	 EQU ($-MOD_WORD)	 ;; used to update target for font data
					;; to follow. -- for DISPLAY
					;;
;PTR_SEL_WORD	 LABEL WORD		 ;;
;PTR_SELOB DB	 00H			 ;;
;PTR_SEHIB DB	 00H			 ;;
;PRE_FONT_P0	 EQU ($-PTR_SELOB+PRE_FONT_ND) ;; to update target for font data
					;; to follow -- for PRINTER with
					;; selection type = 0.
					;;
;PTR_LEN_WORD	 LABEL WORD		 ;;
;PTR_LNLOB DB	 00H			 ;;
;PTR_LNHIB DB	 00H			 ;;
;PRE_FONT_P	 EQU ($-PTR_SELOB+PRE_FONT_ND) ;; to update target for font data
					;; to follow -- for PRINTER with
					;; selection type <> 0.
					;;
					;;
;; also update STAGE_CASES and indexing constants
					;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					;; the stage the parsing is in :  ;;;;;
					;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					;;
STAGE_CASES LABEL WORD			;; the stage the parsing is in :
					;;
					;; *** INDEXED BY  STAGE-INDEX
					;;
	DW	OFFSET ENTRYLO		;; 0
	DW	OFFSET ENTRYHI		;; 1
	DW	OFFSET NEXTLOL		;; 2
	DW	OFFSET NEXTLOH		;; 3
	DW	OFFSET NEXTHIL		;; 4
	DW	OFFSET NEXTHIH		;; 5
	DW	OFFSET TYPELO		;; 6
	DW	OFFSET TYPEHI		;; 7
	DW	OFFSET TYPEIDS		;; 8
	DW	OFFSET CPGLO		;; 9
	DW	OFFSET CPGHI		;; A
	DW	OFFSET FONTLOL		;; B
	DW	OFFSET FONTLOH		;; C
	DW	OFFSET FONTHIL		;; D
	DW	OFFSET FONTHIH		;; E
	DW	00H			;; MATCH case -- end of SEARCH stages
	DW	00H			;; SCAN  case -- before PRE-FOUND stage
	DW	OFFSET MODLO		;; 11
	DW	OFFSET MODHI		;; 12
	DW	OFFSET FONTSLO		;; 13
	DW	OFFSET FONTSHI		;; 14
	DW	OFFSET FDLENLO		;; 15
	DW	OFFSET FDLENHI		;; 16 -- lead to FONT case,NON- DISPLAY
	DW	OFFSET DSPROWS		;; 17 -- DISPLAY only
	DW	OFFSET DSPCOLS		;; 18
	DW	OFFSET DSPX		;; 19
	DW	OFFSET DSPY		;; 1A
	DW	OFFSET DSPCOUNTLO	;; 1B
	DW	OFFSET DSPCOUNTHI	;; 1C -- lead to FONT case, DISPLAY
	DW	OFFSET PTRSELLO        ;;  1D -- PRINTER only
	DW	OFFSET PTRSELHI        ;;  1E
	DW	OFFSET PTRLENLO        ;;  1F
	DW	OFFSET PTRLENHI        ;;  20 -- lead to FONT case, PRINTER
	DW	00H			;; FOUND    case
	DW	00H			;; GET_FONT case
	DW	00H			;; PASS special stage
	DW	OFFSET FILETAG		;; 24
	DW	OFFSET fptrLOL		;; 25
	DW	OFFSET fptrLOH		;; 26
	DW	OFFSET fptrHIL		;; 27
	DW	OFFSET fptrHIH		;; 28
	DW	00H			;; FPTR_SKIP_CASE
					;;
					;; The followings are individual stage
STAGE_MAX EQU	($-STAGE_CASES)/2	;;  number of stages
					;;
					;; STAGE-INDEX
					;;
					;; **** INDEX TO STAGE_CASES  ****
ENTRY_LOX EQU	00H			;;
ENTRY_HIX EQU	01H			;;
NEXT_LOLX EQU	02H			;; NEXT
NEXT_LOHX EQU	03H			;;
NEXT_HILX EQU	04H			;;
NEXT_HIHX EQU	05H			;;
TYPE_LOBX EQU	06H			;; TYPE
TYPE_HIBX EQU	07H			;;
TYPE_IDX EQU	08H			;; TYPEID
CPG_LOBX EQU	09H			;; CODE PAGE
CPG_HIBX EQU	0AH			;;
FONT_LOLX EQU	0BH			;; FONT ADDRESS
FONT_LOHX EQU	0CH			;;
FONT_HILX EQU	0DH			;;
FONT_HIHX EQU	0EH			;;
					;; ------------------------------
MATCHX	EQU	0FH			;; MATCH is the end of SEARCH's stages
SCANX	EQU	10H			;; SCANX is before the PRE-FOUND stages
					;; ------------------------------
MOD_LOBX EQU	11H			;; MODIFIER
MOD_HIBX EQU	12H			;;
FONTS_LOBX EQU	13H			;; FONTS
FONTS_HIBX EQU	14H			;;
FDLEN_LOBX EQU	15H			;; FONT DATA LENGTH
FDLEN_HIBX EQU	16H			;;
DISP_ROWSX EQU	17H			;; DISPLAY -- CHAR. SIZE
DISP_COLSX EQU	18H			;;
DISP_XX    EQU	19H			;; DISPLAY -- ASPECT RATIO
DISP_YX    EQU	1AH			;;
COUNT_LOBX EQU	1BH			;; DISPLAY -- COUNT
COUNT_HIBX EQU	1CH			;;
PTRSELLOX  EQU	1DH			;;
PTRSELHIX  EQU	1EH			;;
PTRLENLOX  EQU	1FH			;;
PTRLENHIX  EQU	20H			;;
					;;
					;; ------------------------------
FOUNDX	EQU	21H			;; GET_FX is the end of PRE-FOUND stage
GET_FX	EQU	22H			;;
					;; ------------------------------
PASSX	EQU	23H			;; see pass_brk table
					;; ------------------------------
FTAGX	EQU	24H			;; RESTART ==> FILE TAG
					;;
fptr_LOLX EQU	25H			;; POINTER in font file header
fptr_LOHX EQU	26H			;;
fptr_HILX EQU	27H			;;
fptr_HIHX EQU	28H			;; ---------------------------------
					;;
fptr_SKIPX EQU	29H			;; ==> ENTRY_LOX
					;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					;; PASS -- to skip some bytes ;;;;;;
					;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					;; the PASS mechanism is used to skip
					;; a number of bytes between two fields
					;; The numbers are tabulated in
					;; PASS_BRK table in the accumulative
					;; sum. The PASS_POSTX(and PASS_POSTXX)
					;; are used to tell what is the stage
					;; after all the bytes have skipped.
					;;
PASS_POSTX  DW	 STAGE_MAX		;; the stage after pass-stage
					;;
FILE_OFFSET    EQU     0BH	       ;; spaces to be skipped in font file :
					;; ( after TAG, before POINTER)
					;;
PASS_CNT DW	0			;;
PASS_BRK LABEL	WORD			;;
	DW	FILE_OFFSET		;; skip in the font file header
	DW	FILE_OFFSET+2		;; pass header-length, needs to reset
					;; PASS_CNT for each of the font_header
	DW	FILE_OFFSET+8		;; pass header-reserved bytes
PASS_INDX EQU	($-PASS_BRK)/2		;;
					;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					;; the control variables :  ;;;;;;;;
					;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
STAGE	DW	STAGE_MAX		;; of the STAGE-INDEX
					;;
Pre_font_len	DW	00000H		;; no. of bytes before the FONT DATA
					;;
					;;
COUNT_LO DW	00000H			;; no. of bytes parsed so far
COUNT_hI DW	00000H			;;
					;;
HIT_LO	DW	00000H			;; the next byte that is addressed by :
HIT_HI	DW	00000H			;; either NEXT or TARGET in FTBLK.
					;;
HIT_FLAG DW	00000H			;; IF ZERO, the NEXT is approaching
HIT_BX	DW	00000H			;; where FTB is found for nearest hit
					;;
NUM_FTB DW	00000H			;; as defined in the FP_BUFFER
					;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;;	FONT_PARSER routine
;;
;;	-- to be called at every packet received to extract informations
;;	   from Font File on byte basis.
;;
;;	-- Interface though FTABLE
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					;;
FONT_PARSER PROC			;;
	PUSH	DS			;; save all registers Revised
	PUSH	ES			;;
	PUSH	AX			;;
	PUSH	BX			;;
	PUSH	CX			;;
	PUSH	DX			;;
	PUSH	DI			;;
	PUSH	SI			;;
					;; BP isn't used, so it isn't saved
	LEA	BX,FTABLE		;;
	PUSH	CS			;;
	POP	ES			;; ES:[BX]
	LDS	SI,FTP.BUFFER_ADDR	;; DS:[SI]
	MOV	CX,FTP.BUFFER_LEN	;; CX = length of packet
	MOV	DX,FTP.NUM_FTBLK	;; DX = number of FTB
	MOV	cs:num_ftb,DX		   ;;
	AND	DX,DX			;;
	JNZ	VALID_BUFFER		;;
	MOV	cs:fp_error,0020H	   ;; ERROR 0020H
	JMP	FP_RET			;;
VALID_BUFFER :				;;
	MOV	AX,FTP.FLAG		;;
	AND	AX,FLAG_RESTART 	;;
;;;;;   Jnz     has_RESTART             ;;
        jz      NO_RESTART              ;;
					;;
					;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
has_restart :				;;
	PUSH	BX			;; reset all the output fields
	ADD	BX,TYPE FBUFS		;; FTP = FONT BLOCK
	XOR	AX,AX			;;
					;;
	MOV	cs:ftag_count,AX	   ;;
	MOV	cs:fptr_low,AX		   ;;
	MOV	cs:fptr_high,AX 	   ;;
	MOV	cs:pre_font_len,AX	  ;;
	MOV	cs:count_lo,AX		   ;;
	MOV	cs:count_hi,AX		   ;;
	MOV	cs:next_low,AX		   ;;
	MOV	cs:next_high,AX 	   ;;
	MOV	cs:hit_lo,AX		   ;;
	MOV	cs:hit_hi,AX		   ;;
	MOV	cs:hit_flag,AX		   ;;
	MOV	cs:pass_cnt,AX		   ;;
	MOV	cs:pass_postx,STAGE_MAX    ;;
					;;
	MOV	cs:stage,STAGE_MAX	   ;;
					;;
RESET_FTB :				;;
	MOV	FTP.FTB_STATUS,FSTAT_SEARCH

;       MOV     FTP.FTB_TYPE,AX         ;;
;       MOV     FTP.FTB_MOD,AX          ;;
;       MOV     FTP.FTB_FONTS,AX        ;;
;       MOV     FTP.FTB_ROWS,AL         ;;
;       MOV     FTP.FTB_COLS,AL         ;;
;       MOV     FTP.FTB_X,AL            ;;
;       MOV     FTP.FTB_Y,AL            ;;
;       MOV     FTP.FTB_COUNT,AX        ;;
;       MOV     FTP.FTB_DLEFT,AX        ;;
;       MOV     FTP.FTB_DLEN,AX         ;;
;       MOV     FTP.FTB_DALO,AX         ;;
;       MOV     FTP.FTB_DAHI,AX         ;;
;       MOV     FTP.TARGET_LO,AX        ;;
;       MOV     FTP.TARGET_HI,AX        ;;

        push    cx                      ; Replace all these MOVs for
        mov     cx,TYPE FTBLK - 14      ; something smaller
        lea     di,FTP.FTB_TYPE
        rep     stosb
        pop     cx


                                        ;;
        ADD     BX, TYPE FTBLK          ;;
					;;
	DEC	DX			;;
;       AND     DX,DX                   ;;
	JNZ	RESET_FTB		;;
					;;
	POP	BX			;;
NO_RESTART :				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					;; any FTBLKs have their data all
					;; returned ? if so set their status
					;; from FOUND to COMPLETE
	PUSH	BX			;;
	ADD	BX,TYPE FBUFS		;; FTP = FONT BLOCK
					;;
	MOV	DX,cs:num_ftb		   ;;
					;;
SET_COMPLETE :				;;
	MOV	AX,FTP.FTB_STATUS	;;
	CMP	AX,FSTAT_FONT		;;
	JNE	SET_NEXT		;;
					;;
	MOV	AX,FTP.FTB_DLEFT	;;
        AND     AX,AX                   ;;
	JNZ	SET_NEXT		;;
					;;
	MOV	FTP.FTB_STATUS,FSTAT_COMPLETE
					;;
SET_NEXT :				;;
					;;
	ADD	BX,TYPE FTBLK		;;
					;;
	DEC	DX			;;
;       AND     DX,DX                   ;;
	JNZ	SET_COMPLETE		;;
					;;
	POP	BX			;;
					;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	ADD	BX,TYPE FBUFS		;; FTP = FONT BLOCK
					;;
	PUSH	CX			;; STACK 1 = CX
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; DO WHILE CX is not zero :
;;
;; -- on each loop, the CX, COUNTs are updated
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					;;
					;;
FTB_LOOP :				;;
	POP	AX			;; STACK -1
	SUB	AX,CX			;;
	ADD	cs:count_lo,AX		   ;;
	JNC	NO_CARRY		;;
	ADD	cs:count_hi,1000H	   ;;
NO_CARRY :				;;
	PUSH	CX			;; STACK 1 = CX
	AND	CX,CX			;;
	JNZ	FTB_CONT		;;
	JMP	FTB_LPEND		;;
					;; DO CASES :
FTB_CONT :				;; ==========
					;;
	MOV	AX,cs:stage		   ;;
					;;
	CMP	AX,STAGE_MAX		;;
	JNE	FTB_010 		;;
        JMP     short START_CASE              ;; ** RESTART **
					;;
FTB_010 :				;;
	CMP	AX,MATCHX		;;
	JAE	FTB_020 		;;
	JMP	SEARCH_CASE		;; ** SEARCH **
					;;
FTB_020 :				;;
	CMP	AX,MATCHX		;;
	JNE	FTB_030 		;;
	JMP	MATCH_CASE		;; ** MATCH **
					;;
FTB_030 :				;;
	CMP	AX,SCANX		;;
	JNE	FTB_040 		;;
	JMP	SCAN_CASE		;; ** SCAN **
					;;
FTB_040 :				;;
	CMP	AX,FOUNDX		;;
	JAE	FTB_050 		;;
	JMP	PRE_FOUND_CASE		;; ** PRE-FOUND **
					;;
FTB_050 :				;;
	CMP	AX,FOUNDX		;;
	JNE	FTB_060 		;;
	JMP	FOUND_CASE		;; ** FOUND  **
					;;
FTB_060 :				;;
	CMP	AX,GET_FX		;;
	JNE	FTB_070 		;;
	JMP	GETFONT_CASE		;; ** GET_FONT **
					;;
FTB_070 :				;;
	CMP	AX,PASSX		;;
	JNE	FTB_080 		;;
	JMP	PASS			;; ** PASS **
					;;
FTB_080 :				;;
	CMP	AX,FPTR_SKIPX		;;
	JAE	FTB_090 		;;
	JMP	SEARCH_CASE		;; ** SEARCH **
					;;
FTB_090 :				;;
	CMP	AX,FPTR_SKIPX		;;
	JNE	FTB_FFF 		;;
        JMP     short FPTR_SKIP_CASE          ;; ** SEARCH **
					;;
FTB_FFF :				;;
	MOV	FTP.FTB_STATUS,STAT_DEVERR
	JMP	FTB_LPEND		;; ** DEVICE ERROR **
					;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; at the entry of each STAGES /CASES
;;
;; --	DS:[SI]  (FPKT) points to PACKET, of DOS's buffer
;; --	CX	 remaining packet length
;; --	ES:[BX]  points to the first FTBLK
;; --	COUNT_LO, COUNT_HI, upto but and including the address pointed by FPKT
;;
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					;;
;============================================================================
START_CASE :				;; pass the FILE leading bytes
					;;
	MOV	cs:ftag_count,0 	   ;;
	MOV	cs:stage,ftagx		   ;;
	JMP	FTB_LOOP		;;
					;;
;=============================================================================
FPTR_SKIP_CASE :			;; skip until the ENTRY pointed by
					;; POINTER (in FPTR) is reached.
					;;
					;; **************
	MOV	AX,cs:fptr_low		   ;; * HIT = FPTR *
	MOV	cs:hit_lo,AX		   ;; **************
	MOV	DX,cs:fptr_high 	   ;;
	MOV	cs:hit_hi,DX		   ;;
					;;
	CMP	AX,0FFFFH		;;
	JNE	FPTR_SKIP_VALID 	;;
	CMP	DX,0FFFFH		;;
	JNE	FPTR_SKIP_VALID 	;;
					;;
	MOV	FTP.FTB_STATUS,STAT_BADATA ;; returned at the first FTBLK
	JMP	FPTR_SKIP_MORE		;;
					;;
FPTR_SKIP_VALID :			;;
					;; normalised HIT_HI, HIT_LO
	MOV	AX,DX			;;
	AND	AX,00FFFH		;;
	PUSH	CX			;;
	MOV	CX,4			;;
	SHL	AX,CL			;;
	POP	CX			;;
	AND	DX,0F000H		;;
	ADD	AX,cs:hit_lo		   ;;
	JNC	NO_CARRY10		;;
	ADD	DX,01000H		;;
NO_CARRY10:				;;
	MOV	cs:hit_lo,AX		   ;;
	MOV	cs:hit_hi,DX		   ;;
					;; **************************
					;; * compare FPTR and COUNT *
					;; **************************
					;; DX:AX = HIT_HI:HIT_LO (normalised)
					;;
	SUB	AX,cs:count_lo		   ;;
	Jnc	more_fptrlo		;;
	sub	dx,01000h		;;
	jc	fptr_bad		;;
					;;
more_fptrlo :				;;
	SUB	DX,cs:count_hi		   ;;
	JC	fptr_BAD		;;
					;;
	INC	AX			;; COUNT can be at the HIT, then AX=0
	JNC	NO_CARRY11		;; INC AX to make AX comparable to CX
	ADD	DX,01000H		;; i.e. AX = offset + 1
					;;
NO_CARRY11:				;;
	CMP	AX,CX			;;
	JA	fptr_skip_more		;; AX > CX, whole CX to be skipped
					;;
	PUSH	DX			;;  normalise dx:ax
	AND	DX,00FFFH		;;
	PUSH	CX			;;
	MOV	CX,4			;;
	SHL	DX,CL			;;
	POP	CX			;;
	ADD	AX,DX			;;
	POP	DX			;;
	JNC	NO_CARRY13		;;
	ADD	DX,01000H		;;
NO_CARRY13:				;;
	AND	DX,0F000H		;;
					;;
	PUSH	AX			;;
	PUSH	DX			;; STACK +1 : normalosed DX:AX
	SUB	AX,CX			;;
	JNC	NO_BORROW11		;;
	SUB	DX,1000H		;;
	JC	fptr_MORE_CXp		;; dx:ax < cx
NO_BORROW11:				;;
					;; dx:ax >= cx
	AND	AX,AX			;;
	JNE	fptr_skip_MOREP 	;;
	AND	DX,DX			;;
	JNE	fptr_skip_MOREP 	;;
					;; dx:ax = cx, or
					;; offset + 1 = CX
					;;
					;; ************************************
					;; * POINTER is within the current CX *
					;; ************************************
fptr_MORE_CXP : 			;;
	POP	DX			;;
	POP	AX			;; STACK -1
					;;
fptr_MORE_CX :				;; DX = 0,to have more CX than offset+1
	DEC	AX			;; = offset : 0 and above
	SUB	CX,AX			;;
	ADD	SI,AX			;; where the first byte is
					;;
	MOV	cs:stage,entry_lox	   ;; ENTRIES in the font file
					;;
	JMP	FTB_LOOP		;;  ******  RETURN  *******
					;;
					;; ***********************************
					;; * more to skip ==> FPTR_SKIP_CASE *
					;; ***********************************
fptr_skip_morep:			;;
	POP	DX			;;
	POP	AX			;; STACK -1
					;;
fptr_skip_more :			;;
	ADD	SI,CX			;;
	SUB	CX,CX			;;
	JMP	FTB_LOOP		;; ******  RETURN  *****
					;;
					;; ***********************************
					;; * bad POINTER in font file header *
					;; ***********************************
					;;
fptr_bad :				;;
	MOV	cs:fptr_low,0FFFFH	   ;;
	MOV	cs:fptr_high,0FFFFH	   ;;
					;;
	MOV	FTP.FTB_STATUS,STAT_BADATA ;; returned at the first FTBLK
					;;
	JMP	FPTR_SKIP_MORE		;;
					;;
;=============================================================================
SEARCH_CASE :				;;
					;; still looking for header to match
					;; the input : codepage and typeid
					;;
	MOV	DI,cs:stage		   ;;
					;;
	ADD	DI,DI			;; double to index to WORD-offset
					;;
	JMP	CS:STAGE_CASES[DI]	;; call routine to process the stage
					;;
					;;
;===========================================================================
MATCH_CASE :				;;
					;;
	PUSH	BX			;;
	MOV	DX,cs:num_ftb		   ;;
					;;
					;;
MATCH_LOOP :				;;
	MOV	AX,FTP.FTB_STATUS	;;
	CMP	AX,FSTAT_SEARCH 	;;
	JE	MATCH_SEARCH		;;
        JMP     short MATCH_NEXT              ;;
					;;
MATCH_SEARCH :				;;
	MOV	AX,FTP.FTB_CP		;; check the FTB with SEARCH status
	CMP	AX,cs:cpg_word		   ;;
	JNE	MATCH_MORE		;;
	PUSH	DS			;; code page matched
	PUSH	SI			;;
	PUSH	CX			;;
					;;
	PUSH	CS			;;
	POP	DS			;;
	MOV	SI,OFFSET TYPE_ID	;;
	LEA	DI,[BX].FTB_TID 	;;
	MOV	CX,8			;;
	REPE	CMPSB			;;
					;;
	POP	CX			;;
	POP	SI			;;
	POP	DS			;;
					;;
	JNE	MATCH_MORE		;;
					;; MATCH !!!!!	(type_id matched)
	MOV	FTP.FTB_STATUS,FSTAT_MATCH
	MOV	AX,cs:type_word 	   ;;
	MOV	FTP.FTB_TYPE,AX 	;;
	MOV	AX,cs:font_low		   ;;
	MOV	FTP.TARGET_LO,AX	;;
	MOV	AX,cs:font_high 	   ;;
	MOV	FTP.TARGET_HI,AX	;;
					;;
        JMP     short MATCH_NEXT              ;;
					;;
MATCH_MORE :				;; if this is the last rounf ?
					;;
	MOV	AX,cs:next_low		   ;; NEXT = FFFF:FFFF means no more
	CMP	AX,-1			;;	  header to come.
	JNE	MATCH_NEXT		;;
					;;
	MOV	AX,cs:next_high 	   ;;
	CMP	AX,-1			;;
	JNE	MATCH_NEXT		;;
					;;
	MOV	FTP.FTB_STATUS,STAT_NOFIND ;; ERROR : no match
					;;
MATCH_NEXT :				;;
	ADD	BX,FTP.FTB_LENGTH	;;
	DEC	DX			;;
	AND	DX,DX			;;
	JZ	MATCH_ALL		;;
	JMP	MATCH_LOOP		;;
					;;
MATCH_ALL :				;;
	MOV	cs:stage,SCANX		   ;;
					;;
MATCH_DONE :				;;
	POP	BX			;;
	JMP	FTB_LOOP		;;
					;;
;===========================================================================
SCAN_CASE :				;;
					;; **********************************
					;; * determine whether it the font  *
					;; * data(TARGET),or the next font  *
					;; * header(NEXT) that is approaching
					;; **********************************
					;;
	MOV	AX,cs:next_low		   ;;
	MOV	cs:hit_lo,AX		   ;;
	MOV	AX,cs:next_high 	   ;;
	MOV	cs:hit_hi,AX		   ;;
	XOR	AX,AX			;;
	MOV	cs:hit_flag,AX		   ;;
					;;
	MOV	DI,cs:hit_hi		   ;; normalised HIT_HI, HIT_LO
	MOV	AX,DI			;;
	AND	AX,00FFFH		;;
	PUSH	CX			;;
	MOV	CX,4			;;
	SHL	AX,CL			;;
	POP	CX			;;
	AND	DI,0F000H		;;
	ADD	AX,cs:hit_lo		   ;;
	JNC	NO_CARRY2		;;
	ADD	DI,01000H		;;
NO_CARRY2 :				;;
	MOV	cs:hit_lo,AX		   ;;
	MOV	cs:hit_hi,DI		   ;;
					;;
	MOV	DX,cs:num_ftb		   ;;
					;;
	PUSH	BX			;;
SCAN_LOOP :				;;
	MOV	AX,FTP.FTB_STATUS	;;
	CMP	AX,FSTAT_MATCH		;;
	JNE	SCAN_NEXT		;;
					;;
					;;
	MOV	DI,FTP.TARGET_HI	;; NORMALISED TARGET
	MOV	AX,DI			;;
	AND	AX,00FFFH		;;
	PUSH	CX			;;
	MOV	CX,4			;;
	SHL	AX,CL			;;
	POP	CX			;;
	AND	DI,0F000H		;;
	ADD	AX,FTP.TARGET_LO	;;
	JNC	NO_CARRY1		;;
	ADD	DI,01000H		;;
NO_CARRY1 :				;; DI:AX = NORMALISED TARGET
					;;
					;; ** compare the TARGET and the NEXT
					;;
	CMP	DI,cs:hit_hi		   ;;
	JA	SCAN_NEXT		;;
					;;
	JE	SCAN_EQU		;;
        JMP     short NEAR_FONT               ;;
					;;
SCAN_EQU :				;;
	CMP	AX,cs:hit_lo		   ;;
	JA	SCAN_NEXT		;;
	JE	SCAN_ERROR_CHK		;;
					;; **********************************
					;; * the font data is approaching   *
					;; **********************************
NEAR_FONT :				;;
	MOV	cs:hit_flag,-1		   ;;
	MOV	cs:hit_lo,AX		   ;;
	MOV	cs:hit_hi,DI		   ;;
	MOV	cs:hit_bx,BX		   ;; used for BAD_BX and in FOUND_CASE
        JMP     short SCAN_NEXT               ;;
					;;
					;; **********************************
					;; * the NEXT header is approaching *
					;; **********************************
SCAN_ERROR_CHK :			;;
	MOV	AX,cs:hit_flag		   ;;
	AND	AX,AX			;;
	JNZ	SCAN_NEXT		;;
	MOV	FTP.FTB_STATUS,STAT_BADATA ;; next header and font cannot be the
					;; same
					;;
SCAN_NEXT :				;;
	DEC	DX			;;
	AND	DX,DX			;;
	JZ	SCAN_DONE		;;
					;;
	ADD	BX,FTP.FTB_LENGTH	;;
	JMP	SCAN_LOOP		;; ** is there any closer font data ?
					;;
					;; ************************************
					;; * the HIT is either font data(TARGET
					;; * or the font block (NEXT).	      *
					;; ************************************
SCAN_DONE :				;;
	POP	BX			;;
					;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
	MOV	DX,cs:hit_hi		   ;; HIT_FLAG, HIT_LO, HIT_HI defined
	MOV	AX,cs:hit_lo		   ;;
					;;
	CMP	AX,0FFFFH		;;
	JNE	NOT_FFFF_HIT		;;
	CMP	DX,0FFFFH		;;
	JNE	NOT_FFFF_HIT		;;
	JMP	SCAN_MORE		;; stage remained as SCAN, discard data
					;;
NOT_FFFF_HIT :				;;
					;; DX:AX = HIT_HI:HIT_LO (normalised)
	SUB	AX,cs:count_lo		   ;;
	JNC	NO_BORROW		;;
	SUB	DX,01000H		;;
	JC	SCAN_BAD		;;
NO_BORROW:				;;
	SUB	DX,cs:count_hi		   ;;
	JC	SCAN_BAD		;;
					;;
	INC	AX			;; COUNT can be at the HIT, then AX=0
	JNC	NO_CARRYX		;; INC AX to make AX comparable to CX
	ADD	DX,01000H		;; i.e. AX = offset + 1
					;;
NO_CARRYX :				;;
	CMP	AX,CX			;;
	JA	SCAN_MORE		;;
					;;
	PUSH	DX			;;
	AND	DX,00FFFH		;;
	PUSH	CX			;;
	MOV	CX,4			;;
	SHL	DX,CL			;;
	POP	CX			;;
	ADD	AX,DX			;;
	POP	DX			;;
	JNC	NO_CARRY3		;;
	ADD	DX,01000H		;;
NO_CARRY3 :				;;
	AND	DX,0F000H		;;
					;;
					;;
	PUSH	AX			;;
	PUSH	DX			;;
	SUB	AX,CX			;;
	JNC	NO_BORROW1		;;
	SUB	DX,1000H		;;
	JC	MORE_CXp		;;
NO_BORROW1 :				;;
					;; dx:ax >= cx
	AND	AX,AX			;;
	JNE	SCAN_MOREP		;;
	AND	DX,DX			;;
	JNE	SCAN_MOREP		;;
					;;
					;; offset + 1 = CX
					;;
MORE_CXP :				;;
	POP	DX			;;
	POP	AX			;;
					;;
MORE_CX :				;; DX = 0,to have more CX than offset+1
	DEC	AX			;; = offset : 0 and above
	SUB	CX,AX			;;
	ADD	SI,AX			;; where the first byte is
	MOV	AX,cs:hit_flag		   ;;
	AND	AX,AX			;;
	JE	NEXT_REACHED		;;
					;;
	MOV	cs:stage,MOD_LOBX	   ;; font-data reached,
					;;
	JMP	FTB_LOOP		;;  ****** RETURN   *******
					;;
NEXT_REACHED :				;;
	MOV	cs:stage,PASSX		   ;;
	MOV	cs:pass_postx,next_lolX    ;;
	MOV	cs:pass_cnt,FILE_OFFSET    ;;
					;;
					;;
	JMP	FTB_LOOP		;; ******  RETURN   *******
					;;
					;; ***********************************
SCAN_MOREP :				;; * scan more FTBLK for the nearest *
					;; * font data			     *
					;; ***********************************
	POP	DX			;;
	POP	AX			;;
					;;
SCAN_MORE :				;;
	ADD	SI,CX			;;
	SUB	CX,CX			;;
	JMP	FTB_LOOP		;; more SCAN stage
					;;
SCAN_BAD:				;; *************************
	MOV	AX,cs:hit_flag		   ;; * scan is bad	      *
	AND	AX,AX			;; *************************
	JNZ	BAD_BX			;;
	MOV	AX,-1			;; NEXT is pointing backwards
	MOV	cs:next_low,AX		   ;;
	MOV	cs:next_high,AX 	   ;; no more NEXT
	MOV	FTP.FTB_STATUS,STAT_BADATA ;; returned at the first FTBLK
	JMP	FTB_LOOP		;;
					;;
BAD_BX	:				;;
	PUSH	BX			;; FONT is pointing backwards
	MOV	BX,cs:hit_bx		   ;;
	MOV	FTP.FTB_STATUS,STAT_BADATA
	POP	BX			;;
	JMP	FTB_LOOP		;;
					;;
;===========================================================================
PRE_FOUND_CASE :			;;
					;; extract informations from the font
					;; block until font_length is defined
					;;
	MOV	DI,cs:stage		   ;;
					;;
	ADD	DI,DI			;; double to index to WORD-offset
					;;
	JMP	CS:STAGE_CASES[DI]	;; call routine to process the stage
					;;
;===========================================================================
FOUND_CASE :				;;
	MOV	DI,OFFSET FTB_LOOP	;; as FOUND has two places to return to
	PUSH	DI			;;
;===========================================================================
FOUND_DO :				;;
					;; define informations into FTBLK of
					;; HIT_BX defined in the SCAN case
	PUSH	BX			;;
	MOV	BX,cs:hit_bx		   ;;
					;; FTBLK :
	MOV	AX,cs:mod_word		   ;;
	MOV	FTP.FTB_MOD,AX		;;
	MOV	AX,cs:fonts_word	   ;;
	MOV	FTP.FTB_FONTS,AX	;;
					;;
	MOV	AX,cs:fdlen_word	   ;;
	MOV	FTP.FTB_DLEFT,AX	;;
	MOV	FTP.FTB_DLEN,0		;;
	MOV	FTP.FTB_DALO,0		;;
	MOV	FTP.FTB_DAHI,0		;;
					;;
	MOV	FTP.FTB_STATUS,FSTAT_FOUND
					;;
;	CMP	FTP.FTB_TYPE,TYPE_DISPLAY;
;	JNE	CHECK_PTR_TYPE		;;
;	CMP	cs:pre_font_len,PRE_FONT_D ;;
;	JNE	DISPLAY_BAD		;;
;	JMP	DISPLAY_DONE		;;
;					;;
;CHECK_PTR_TYPE :			 ;;
;	CMP	FTP.FTB_TYPE,TYPE_PRINTER;
;	JNE	SET_STAGE		;;
;	CMP	cs:ptr_sel_word,0	   ;;
;	JNE	PRINTER_HAS_SEL 	;;
;	CMP	cs:pre_font_len,PRE_FONT_P0;;
;	JNE	PRINTER_BAD		;;
;	JMP	PRINTER_DONE		;;
;					;;
;PRINTER_HAS_SEL :			 ;;
;	 CMP	 cs:pre_font_len,PRE_FONT_P ;;
;	 JNE	 PRINTER_BAD		 ;;
;	 JMP	 PRINTER_DONE		 ;;
;					 ;;
;DISPLAY_BAD :				 ;;
;					;;
;	MOV	FTP.FTB_STATUS,STAT_BADATA ;the FDLEN_WORD should be 0.
;					;;
;DISPLAY_DONE : 			 ;;
;	MOV	AL,cs:disp_rows 	   ;;
;	MOV	FTP.FTB_ROWS,AL 	;;
;	MOV	AL,cs:disp_cols 	   ;;
;	MOV	FTP.FTB_COLS,AL 	;;
;	MOV	AL,cs:disp_x		   ;;
;	MOV	FTP.FTB_X,AL		;;
;	MOV	AL,cs:disp_y		   ;;
;	MOV	FTP.FTB_Y,AL		;;
;	MOV	AX,cs:count_word	   ;;
;	MOV	FTP.FTB_COUNT,AX	;;
;	JMP	SET_STAGE		;;
					;;
;PRINTER_BAD :				 ;;
;					 ;;
;	 MOV	 FTP.FTB_STATUS,STAT_BADATA ;the FDLEN_WORD should be 0.
;					 ;;
;PRINTER_DONE : 			 ;;
;	 MOV	 AX,cs:ptr_sel_word	    ;;
;	 MOV	 FTP.FTB_SELECT,AX	 ;;
;	 MOV	 AX,cs:ptr_len_word	    ;;
;	 MOV	 FTP.FTB_SELLEN,AX	 ;;
;					 ;;
;SET_STAGE :				 ;; STAGE :
	MOV	AX,cs:fdlen_word	   ;; if no font data to follow
	AND	AX,AX			;;
	JNZ	GET_FDATA		;;
	MOV	cs:stage,SCANX		   ;; then scan for next header or font
        JMP     short FONT_RET                ;;
					;;
GET_FDATA :				;; update the moving target
	MOV	cs:stage,GET_FX 	   ;;
	MOV	AX,cs:pre_font_len	   ;;
	ADD	FTP.TARGET_LO,AX	;;
	JNC	FONT_RET		;;
	ADD	FTP.TARGET_HI,01000H	;;
					;;
FONT_RET :				;;
	POP	BX			;;
	RET				;;
					;;
;===========================================================================
GETFONT_CASE :				;; as ES:[SI], at COUNT, there is font
					;; data
	MOV	DX,cs:num_ftb		   ;;
	PUSH	BX			;;
					;;
	MOV	cs:hit_hi,0		   ;; temp. register
	MOV	cs:hit_flag,0		   ;; assumed can be changed to SCAN stage
					;;
	MOV	DI,cs:count_hi		   ;; normalised COUNT_HI,COUNT_LO
	MOV	AX,DI			;;
	AND	AX,00FFFH		;;
	PUSH	CX			;;
	MOV	CX,4			;;
	SHL	AX,CL			;;
	POP	CX			;;
	AND	DI,0F000H		;;
	ADD	AX,cs:count_lo		   ;;
	JNC	NO_CARRY4		;;
	ADD	DI,01000H		;;
NO_CARRY4 :				;;
	MOV	cs:count_lo,AX		   ;;
	MOV	cs:count_hi,DI		   ;;
					;;
					;;
GETFONT_LOOP :				;;
	MOV	AX,FTP.FTB_STATUS	;;
	CMP	AX,FSTAT_FONT		;;
	JE	GETFONT_CONT		;;
					;;
	CMP	AX,FSTAT_FOUND		;;
	JE	GETFONT_FOUND		;;
					;;
	JMP	NEXT_GETFONT		;;
					;;
GETFONT_FOUND : 			;;
	MOV	AX,FTP.FTB_DLEFT	;;
	AND	AX,AX			;;
	JZ	NEXT_GF 		;;
	MOV	FTP.FTB_STATUS,FSTAT_FONT;
        JMP     short GETFONT_CONT1           ;;
					;;
					;;
GETFONT_CONT :				;;
	MOV	AX,FTP.FTB_DLEFT	;;
	AND	AX,AX			;;
	JNZ	GETFONT_CONT1		;;
NEXT_GF :				;;
	JMP	NEXT_GETFONT		;;
					;; only on FOUND and DLEFT <> 0
GETFONT_CONT1:				;;
	MOV	DI,FTP.TARGET_HI	;; normalised TARGET
	MOV	AX,DI			;;
	AND	AX,00FFFH		;;
	PUSH	CX			;;
	MOV	CX,4			;;
	SHL	AX,CL			;;
	POP	CX			;;
	AND	DI,0F000H		;;
	ADD	AX,FTP.TARGET_LO	;;
	JNC	NO_CARRY5		;;
	ADD	DI,01000H		;;
NO_CARRY5 :				;; DI:AX = TARGET (normalised)
					;;
	CMP	DI,cs:count_hi		   ;;
	JB	GETFONT_BAD		;;
	JNE	NEXT_GETFONT		;;
	CMP	AX,cs:count_lo		   ;;
	JB	GETFONT_BAD		;;
	JNE	NEXT_GETFONT		;;
					;;
	MOV	FTP.FTB_DALO,SI 	;; where the font data is in the packet
	MOV	FTP.FTB_DAHI,DS 	;;
					;;
	MOV	AX,FTP.FTB_DLEFT	;;
	CMP	AX,CX			;;
	JAE	UPTO_CX 		;;
					;; upto FDLEFT
	MOV	FTP.FTB_DLEFT,0 	;;
	MOV	FTP.FTB_DLEN,AX 	;;
	CMP	cs:hit_hi,AX		   ;;
	JNB	NOT_HIGHER0		;;
	MOV	cs:hit_hi,AX		   ;;
NOT_HIGHER0 :				;;
	ADD	FTP.TARGET_LO,AX	;;
	JNC	NEXT_GETFONT		;;
	ADD	FTP.TARGET_HI,01000H	;;
        JMP     short NEXT_GETFONT            ;;
					;;
GETFONT_BAD :				;;
	MOV	FTP.FTB_STATUS,STAT_BADATA ;; pointing backwards
        JMP     short NEXT_GETFONT            ;;
					;;
UPTO_CX :				;;
	SUB	AX,CX			;;
	MOV	FTP.FTB_DLEFT,AX	;;
	MOV	FTP.FTB_DLEN,CX 	;;
	MOV	cs:hit_hi,CX		   ;;
	ADD	FTP.TARGET_LO,CX	;;
	JNC	NO_CARRYOVER		;;
	ADD	FTP.TARGET_HI,01000H	;;
NO_CARRYOVER :				;;
	AND	AX,AX			;; all data have been returned ?
	JZ	NEXT_GETFONT		;;
					;;
	MOV	cs:hit_flag,-1		   ;; no ! stay in the GET_FONT stage
					;;
NEXT_GETFONT :				;;
	ADD	BX,FTP.FTB_LENGTH	;;
	DEC	DX			;;
	AND	DX,DX			;;
	JZ	GETFONT_END		;;
	JMP	GETFONT_LOOP		;;
					;;
GETFONT_END :				;;
	MOV	AX,cs:hit_hi		   ;;
	ADD	SI,AX			;;
	SUB	CX,AX			;;
					;;
	CMP	cs:hit_flag,0		   ;;
	Jne	GETFONT_DONE		;;
	MOV	cs:stage,SCANX		   ;; no more in the GET_FONT stage
					;;
					;;
GETFONT_DONE :				;;
	POP	BX			;;
	JMP	FTB_LOOP		;;
					;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; STAGES --  "called by" SERACH_CASE
;;
;; --	DS:[SI]  (FPKT) points to PACKET, of DOS's buffer
;; --	CX	 remaining packet length
;; --	ES:[BX]  points to the first FTBLK
;; --	COUNT_LO, COUNT_HI, upto but not including the address pointed by FPKT
;;
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					;;+++++++++++++++++++++++++++++++++
filetag :				;;
					;;
;	mov	ax,ftag_len		;;
	cmp	cs:ftag_count,ftag_len	   ;;
	jB	valid_ftag		;;
	JE	FTAG_FAILED		;;
					;;
	mov	ftp.ftb_status,stat_deverr
	mov	cs:fp_error,00022H	   ;; ERROR 0022H
					;;
FTAG_FAILED :				;; discard all the bytes, while
	ADD	SI,CX			;; stage stays as FTAGX
	SUB	CX,CX			;;
	JMP	FTB_LOOP		;; **** RETURN (bytes discarded) ****
					;;
VALID_FTAG :				;;
	MOV	AX,FPKT 		;;
	INC	SI			;;
	DEC	CX			;;
					;;
	MOV	DI,cs:ftag_count	   ;;
	CMP	AL,cs:ftag_pattern[DI]	   ;;
	JE	FTAG_NEXTB		;;
					;;
	mov	ftp.ftb_status,stat_badata
	MOV	ax,ftag_len		;; stays in FTAGX to consume all bytes
	MOV	cs:ftag_count,ax	   ;; stays in FTAGX to consume all bytes
	JMP	FTB_LOOP		;; **** RETURN (FAILED !)  ****
					;;
FTAG_NEXTB :				;;
	INC	DI			;;
	MOV	cs:ftag_count,DI	   ;;
					;;
	CMP	DI,ftag_len		;;
	JE	FTAG_DONE		;;
					;;
	JMP	FTB_LOOP		;; **** RETURN ( MORE TO COME) ****
					;;
FTAG_DONE :				;;
	MOV	cs:pass_cnt,0		   ;;
	MOV	cs:stage,PASSX		   ;;
	MOV	cs:pass_postx,fptr_lolx    ;;
					;;
	JMP	FTB_LOOP		;; **** NEXT STAGE ****
					;;
					;;+++++++++++++++++++++++++++++++++
fptrLOL :				;; STAGE the low byte of the low fptr
	MOV	AX,FPKT 		;;
	INC	SI			;; byte by byte
	DEC	CX			;;
	AND	CX,CX			;;
	JNZ	WORD_fptrLO		;;
	MOV	cs:fptr_lol,AL		   ;;
	MOV	cs:stage,fptr_lohX	   ;;
	JMP	FTB_LOOP		;;
WORD_fptrLO :				;;
	INC	SI			;;
	DEC	CX			;;
	MOV	cs:fptr_low,AX		   ;;
	MOV	cs:stage,fptr_HILX	   ;;
	JMP	FTB_LOOP		;;
					;;+++++++++++++++++++++++++++++++++
fptrLOH :				;; STAGE the high byte of the low fptr
	MOV	AX,FPKT 		;;
	INC	SI			;; byte by byte
	DEC	CX			;;
	MOV	cs:fptr_loh,AL		   ;;
	MOV	cs:stage,fptr_HILX	   ;;
	JMP	FTB_LOOP		;;
					;;+++++++++++++++++++++++++++++++++
fptrHIL :				;; STAGE the low byte of the high fptr
	MOV	AX,FPKT 		;;
	INC	SI			;; byte by byte
	DEC	CX			;;
	AND	CX,CX			;;
	JNZ	WORD_fptrHI		;;
	MOV	cs:fptr_hil,AL		   ;;
	MOV	cs:stage,fptr_hihX	   ;;
	JMP	FTB_LOOP		;;
WORD_fptrHI :				;;
	INC	SI			;;
	DEC	CX			;;
	MOV	cs:fptr_high,AX 	   ;;
	MOV	cs:stage,FPTR_SKIPX	   ;;
	JMP	FTB_LOOP		;;
					;;+++++++++++++++++++++++++++++++++
fptrHIH :				;; STAGE the high byte of the high fptr
	MOV	AX,FPKT 		;;
	INC	SI			;; byte by byte
	DEC	CX			;;
	MOV	cs:fptr_hih,AL		   ;;
	MOV	cs:stage,FPTR_SKIPX	   ;;
	JMP	FTB_LOOP		;;
					;;+++++++++++++++++++++++++++++++++
ENTRYLO :				;; STAGE - ENTRY LOW BYTE
	MOV	AX,FPKT 		;;
	INC	SI			;; byte by byte
	DEC	CX			;;
;       AND     CX,CX                   ;;
	JNZ	WORD_ENTRY		;;
	MOV	cs:entry_lob,AL 	   ;;
	MOV	cs:stage,ENTRY_HIX	   ;;
	JMP	FTB_LOOP		;;
WORD_ENTRY :				;;
	INC	SI			;;
	DEC	CX			;;
	MOV	cs:entry_word,AX	   ;;
	MOV	cs:stage,PASSX		   ;; 2 bytes to be passed
	MOV	cs:pass_postx,NEXT_LOLX    ;;
	JMP	FTB_LOOP		;;
					;;+++++++++++++++++++++++++++++++++
ENTRYHI :				;; stage - ENTRY HIGN BYTE
	MOV	AX,FPKT 		;;
	INC	SI			;; byte by byte
	DEC	CX			;;
	MOV	cs:entry_hib,AL 	   ;;
	MOV	cs:stage,PASSX		   ;; 2 bytes to be passed
	MOV	cs:pass_postx,NEXT_LOLX    ;;
	AND	CX,CX			;;
	JNZ	ENTHI_PASS1		;;
	JMP	FTB_LOOP		;;
ENTHI_PASS1 :				;;
	INC	SI			;;
	INC	cs:pass_cnt		   ;;
	DEC	CX			;;
;       AND     CX,CX                   ;;
	JNZ	ENTHI_PASS2		;;
	JMP	FTB_LOOP		;;
ENTHI_PASS2 :				;;
	INC	SI			;;
	INC	cs:pass_cnt		   ;;
	DEC	CX			;;
	MOV	cs:stage,NEXT_LOLX	   ;;
	JMP	FTB_LOOP		;;
					;;+++++++++++++++++++++++++++++++++
NEXTLOL :				;; STAGE the low byte of the low NEXT
	MOV	AX,FPKT 		;;
	INC	SI			;; byte by byte
	DEC	CX			;;
;       AND     CX,CX                   ;;
	JNZ	WORD_NEXTLO		;;
	MOV	cs:next_lol,AL		   ;;
	MOV	cs:stage,NEXT_LOHX	   ;;
	JMP	FTB_LOOP		;;
WORD_NEXTLO :				;;
	INC	SI			;;
	DEC	CX			;;
	MOV	cs:next_low,AX		   ;;
	MOV	cs:stage,next_hilX	   ;;
	JMP	FTB_LOOP		;;
					;;+++++++++++++++++++++++++++++++++
NEXTLOH :				;; STAGE the high byte of the low NEXT
	MOV	AX,FPKT 		;;
	INC	SI			;; byte by byte
	DEC	CX			;;
	MOV	cs:next_loh,AL		   ;;
	MOV	cs:stage,next_hilX	   ;;
	JMP	FTB_LOOP		;;
					;;+++++++++++++++++++++++++++++++++
NEXTHIL :				;; STAGE the low byte of the high NEXT
	MOV	AX,FPKT 		;;
	INC	SI			;; byte by byte
	DEC	CX			;;
;       AND     CX,CX                   ;;
	JNZ	WORD_NEXTHI		;;
	MOV	cs:next_hil,AL		   ;;
	MOV	cs:stage,NEXT_HIHX	   ;;
	JMP	FTB_LOOP		;;
WORD_NEXTHI :				;;
	INC	SI			;;
	DEC	CX			;;
	MOV	cs:next_high,AX 	   ;;
	MOV	cs:stage,type_lobX	   ;;
	JMP	FTB_LOOP		;;
					;;+++++++++++++++++++++++++++++++++
NEXTHIH :				;; STAGE the high byte of the high NEXT
	MOV	AX,FPKT 		;;
	INC	SI			;; byte by byte
	DEC	CX			;;
	MOV	cs:next_hih,AL		   ;;
	MOV	cs:stage,type_lobX	   ;;
	JMP	FTB_LOOP		;;
					;;+++++++++++++++++++++++++++++++++
TYPELO	:				;; STAGE the low byte of the TYPE
	MOV	AX,FPKT 		;;
	INC	SI			;; byte by byte
	DEC	CX			;;
;       AND     CX,CX                   ;;
	JNZ	WORD_TYPE		;;
	MOV	cs:type_lob,AL		   ;;
	MOV	cs:stage,type_hibX	   ;;
	JMP	FTB_LOOP		;;
WORD_TYPE :				;;
	INC	SI			;;
	DEC	CX			;;
	MOV	cs:type_word,AX 	   ;;
	MOV	cs:stage,type_idX	   ;;
	MOV	cs:tid_cnt,0		   ;;
	JMP	FTB_LOOP		;;
					;;+++++++++++++++++++++++++++++++++
TYPEHI	:				;; STAGE the high byte of the TYPE
	MOV	AX,FPKT 		;;
	INC	SI			;; byte by byte
	DEC	CX			;;
	MOV	cs:type_hib,AL		   ;;
	MOV	cs:stage,TYPE_IDX	   ;;
	MOV	cs:tid_cnt,0		   ;;
	JMP	FTB_LOOP		;;
					;;+++++++++++++++++++++++++++++++++
TYPEIDS :				;; STAGE the type id
	CMP	cs:tid_cnt,8		   ;;
	JNA	VALID_TID		;;
	MOV	FTP.FTB_STATUS,STAT_DEVERR
	MOV	cs:fp_error,00021H	   ;; ERROR 0021H
	ADD	SI,CX			;;
	SUB	CX,CX			;;
	JMP	FTB_LOOP		;;
					;;
VALID_TID :				;;
	MOV	AX,8			;;
	SUB	AX,cs:tid_cnt		   ;;
	CMP	CX,AX			;;
	JNB	TID_ALL 		;;
					;; all data in FPKT are stored
	PUSH	ES			;;
	PUSH	CS			;;
	POP	ES			;;
					;;
	MOV	DI,OFFSET TYPE_ID	;;
	ADD	DI,cs:tid_cnt		   ;;
	ADD	cs:tid_cnt,CX		   ;;
	REP	MOVSB			;; SI is incremented accordingly
	POP	ES			;;
					;;
	MOV	CX,0			;; STAGE remained
	JMP	FTB_LOOP		;;
TID_ALL :				;;
	PUSH	CX			;;
					;;
	PUSH	ES			;;
	PUSH	CS			;;
	POP	ES			;;
					;;
	MOV	DI,OFFSET TYPE_ID	;;
	ADD	DI,cs:tid_cnt		   ;;
	MOV	CX,AX			;;
	REP	MOVSB			;; SI is incremented accordingly
	POP	ES			;;
					;;
	ADD	cs:tid_cnt,AX		   ;;
	POP	CX			;;
	SUB	CX,AX			;;
					;;
	MOV	cs:stage,CPG_LOBX	   ;;
	JMP	FTB_LOOP		;;
					;;+++++++++++++++++++++++++++++++++
CPGLO	:				;; STAGE the low byte of the CODE PAGE
	MOV	AX,FPKT 		;;
	INC	SI			;; byte by byte
	DEC	CX			;;
;       AND     CX,CX                   ;;
	JNZ	WORD_CPG		;;
	MOV	cs:cpg_lob,AL		   ;;
	MOV	cs:stage,CPG_HIBX	   ;;
	JMP	FTB_LOOP		;;
WORD_CPG :				;;
	INC	SI			;;
	DEC	CX			;;
	MOV	cs:cpg_word,AX		   ;;
	MOV	cs:stage,PASSX		   ;;
	MOV	cs:pass_postx,font_lolX    ;;
	JMP	FTB_LOOP		;;
					;;+++++++++++++++++++++++++++++++++
CPGHI	:				;; STAGE the high byte of the CODE PAGE
	MOV	AX,FPKT 		;;
	INC	SI			;; byte by byte
	DEC	CX			;;
	MOV	cs:cpg_hib,AL		   ;;
	MOV	cs:stage,PASSX		   ;;
	MOV	cs:pass_postx,font_lolX    ;;
	JMP	FTB_LOOP		;;
					;;+++++++++++++++++++++++++++++++++
FONTLOL :				;; STAGE the low byte of the low FONT
	MOV	AX,FPKT 		;;
	INC	SI			;; byte by byte
	DEC	CX			;;
;       AND     CX,CX                   ;;
	JNZ	WORD_FONTLO		;;
	MOV	cs:font_lol,AL		   ;;
	MOV	cs:stage,FONT_LOHX	   ;;
	JMP	FTB_LOOP		;;
WORD_FONTLO :				;;
	INC	SI			;;
	DEC	CX			;;
	MOV	cs:font_low,AX		   ;;
	MOV	cs:stage,FONT_HILX	   ;;
	JMP	FTB_LOOP		;;
					;;+++++++++++++++++++++++++++++++++
FONTLOH :				;; STAGE the high byte of the low FONT
	MOV	AX,FPKT 		;;
	INC	SI			;; byte by byte
	DEC	CX			;;
	MOV	cs:font_loh,AL		   ;;
	MOV	cs:stage,FONT_HILX	   ;;
	JMP	FTB_LOOP		;;
					;;+++++++++++++++++++++++++++++++++
FONTHIL :				;; STAGE the low byte of the high FONT
	MOV	AX,FPKT 		;;
	INC	SI			;; byte by byte
	DEC	CX			;;
;       AND     CX,CX                   ;;
	JNZ	WORD_FONTHI		;;
	MOV	cs:font_hil,AL		   ;;
	MOV	cs:stage,FONT_HIHX	   ;;
	JMP	FTB_LOOP		;;
WORD_FONTHI :				;;
	INC	SI			;;
	DEC	CX			;;
	MOV	cs:font_high,AX 	   ;;
;;;;;;	MOV	cs:stage,MOD_LOBX	   ;; end of SCAN
					;; anymore headers to be processed ?
	MOV	cs:stage,MATCHX 	   ;;
	MOV	AX,cs:entry_word	   ;;
	DEC	AX			;;
	MOV	cs:entry_word,AX	   ;;
	AND	AX,AX			;;
	JNZ	CHECK_NEXT		;;
					;; no more header to be processed !
	MOV	AX,-1			;;
	MOV	cs:next_low,AX		   ;;
	MOV	cs:next_high,AX 	   ;; as ENTRY has been consumed
	JMP	FTB_LOOP		;;
					;;
CHECK_NEXT :				;;
	MOV	AX,cs:next_low		   ;;
	AND	AX,AX			;;
	JNZ	MORE_HEADER		;;
	MOV	AX,cs:next_high 	   ;;
	AND	AX,AX			;;
	JNZ	MORE_HEADER		;;
					;; no more header to be processed !
	MOV	AX,-1			;;
	MOV	cs:next_low,AX		   ;; as NEXT is nil
	MOV	cs:next_high,AX 	   ;;
					;;
MORE_HEADER :				;;
	JMP	FTB_LOOP		;;
					;;+++++++++++++++++++++++++++++++++
FONTHIH :				;; STAGE the high byte of the high FONT
	MOV	AX,FPKT 		;;
	INC	SI			;; byte by byte
	DEC	CX			;;
	MOV	cs:font_hih,AL		   ;;
;;;;;	MOV	cs:stage,MOD_LOBX	   ;; end of SCAN
					;;
	MOV	cs:stage,MATCHX 	   ;;
					;; anymore headers to be processed ?
	MOV	AX,cs:entry_word	   ;;
	DEC	AX			;;
	MOV	cs:entry_word,AX	   ;;
	AND	AX,AX			;;
	JNZ	CHECK_NEXT0		;;
					;; no more header to be processed !
	MOV	AX,-1			;;
	MOV	cs:next_low,AX		   ;;
	MOV	cs:next_high,AX 	   ;; as ENTRY has been consumed
	JMP	FTB_LOOP		;;
					;;
CHECK_NEXT0 :				;;
	MOV	AX,cs:next_low		   ;;
	AND	AX,AX			;;
	JNZ	MORE_HEADER0		;;
	MOV	AX,cs:next_high 	   ;;
	AND	AX,AX			;;
	JNZ	MORE_HEADER0		;;
					;; no more header to be processed !
	MOV	AX,-1			;;
	MOV	cs:next_low,AX		   ;; as NEXT is nil
	MOV	cs:next_high,AX 	   ;;
					;;
MORE_HEADER0 :				;;
	JMP	FTB_LOOP		;;
					;;
					;;+++++++++++++++++++++++++++++++++
MODLO	:				;; STAGE the low byte of the MODIFIER
	MOV	AX,FPKT 		;;
	INC	SI			;; byte by byte
	DEC	CX			;;
;       AND     CX,CX                   ;;
	JNZ	WORD_MOD		;;
	MOV	MOD_LOB,AL		;;
	MOV	cs:stage,MOD_HIBX	   ;;
	JMP	FTB_LOOP		;;
WORD_MOD :				;;
	INC	SI			;;
	DEC	CX			;;
	MOV	cs:mod_word,AX		   ;;
	MOV	cs:stage,fonts_lobX	   ;;
	JMP	FTB_LOOP		;;
					;;+++++++++++++++++++++++++++++++++
MODHI	:				;; STAGE the high byte of the MODIFIER
	MOV	AX,FPKT 		;;
	INC	SI			;; byte by byte
	DEC	CX			;;
	MOV	cs:mod_hib,AL		   ;;
	MOV	cs:stage,FONTS_LOBX	   ;;
	JMP	FTB_LOOP		;;
					;;+++++++++++++++++++++++++++++++++
FONTSLO :				;; STAGE the low byte of the FONTS
	MOV	AX,FPKT 		;;
	INC	SI			;; byte by byte
	DEC	CX			;;
;       AND     CX,CX                   ;;
	JNZ	WORD_FONTS		;;
	MOV	cs:fonts_lob,AL 	   ;;
	MOV	cs:stage,FONTS_HIBX	   ;;
	JMP	FTB_LOOP		;;
WORD_FONTS :				;;
	INC	SI			;;
	DEC	CX			;;
	MOV	cs:fonts_word,AX	   ;;
	MOV	cs:stage,FDLEN_LOBX	   ;;
	JMP	FTB_LOOP		;;
					;;+++++++++++++++++++++++++++++++++
FONTSHI :				;; STAGE the high byte of the FONTS
	MOV	AX,FPKT 		;;
	INC	SI			;; byte by byte
	DEC	CX			;;
	MOV	cs:fonts_hib,AL 	   ;;
	MOV	cs:stage,FDLEN_LOBX	   ;;
	JMP	FTB_LOOP		;;
					;;+++++++++++++++++++++++++++++++++
FDLENLO :				;; the low byte of the FONT-LENGTH
	MOV	AX,FPKT 		;;
	INC	SI			;; byte by byte
	DEC	CX			;;
;       AND     CX,CX                   ;;
	JNZ	WORD_FDLEN		;;
	MOV	cs:fdlen_lob,AL 	   ;;
	MOV	cs:stage,FDLEN_HIBX	   ;;
	JMP	FTB_LOOP		;;
WORD_FDLEN :				;;
	INC	SI			;;
	DEC	CX			;;
	MOV	cs:pre_font_len,PRE_FONT_ND;;
	MOV	cs:fdlen_word,AX	   ;;
;	AND	AX,AX			;;
;	JZ	NO_DISP_PTR		;;
;	CMP	cs:type_word,TYPE_DISPLAY  ;;
;	JE	DISPLAY_TYPE1		;;
;	CMP	cs:type_word,TYPE_PRINTER  ;;
;	JE	PRINTER_TYPE1		;;
					;;
;NO_DISP_PTR :				 ;;
	MOV	cs:stage,FOUNDX 	   ;; FSTAT is to be changed
	JMP	FTB_LOOP		;;
;DISPLAY_TYPE1 :			 ;;
;	MOV	cs:stage,DISP_ROWSX	   ;;
;	JMP	FTB_LOOP		;;
;PRINTER_TYPE1 :			 ;;
;	 MOV	 cs:stage,PTRSELLOX	    ;;
;	 JMP	 FTB_LOOP		 ;;
					;;
					;;+++++++++++++++++++++++++++++++++
FDLENHI :				;; STAGE the high byte of the F-LENGTH
	MOV	cs:pre_font_len,PRE_FONT_ND
	MOV	AX,FPKT 		;;
	INC	SI			;; byte by byte
	DEC	CX			;;
	MOV	cs:fdlen_hib,AL 	   ;;
	MOV	AX,cs:fdlen_word	   ;;
;	AND	AX,AX			;;
;	JZ	NO_DISP_PTR2		;;
;	CMP	cs:type_word,TYPE_DISPLAY  ;;
;	JE	DISPLAY_TYPE2		;;
;	 CMP	 cs:type_word,TYPE_PRINTER  ;;
;	 JE	 PRINTER_TYPE2		 ;;
;NO_DISP_PTR2:				 ;;
	MOV	cs:stage,FOUNDX 	   ;; FSTAT is to be changed
	JMP	FTB_LOOP		;;
;DISPLAY_TYPE2 :			 ;;
;	MOV	cs:stage,DISP_ROWSX	   ;;
;	JMP	FTB_LOOP		;;
;PRINTER_TYPE2 :			 ;;
;	 MOV	 cs:stage,PTRSELLOX	    ;;
;	 JMP	 FTB_LOOP		 ;;
					;;
					;;+++++++++++++++++++++++++++++++++
DSPROWS :				;; STAGE : get the rows
;	XOR	AX,AX			;;
;	MOV	cs:disp_rows,AL 	   ;;
;	MOV	cs:disp_cols,AL 	   ;;
;	MOV	cs:DISP_X,AL		   ;;
;	MOV	cs:disp_y,AL		   ;;
;	MOV	cs:count_word,AX	   ;;
;					;;
;	INC	cs:pre_font_len 	  ;;
;	MOV	AX,FPKT 		;;
;	INC	SI			;;
;	DEC	CX			;;
;	MOV	cs:disp_rows,AL 	   ;;
;	MOV	AX,cs:fdlen_word	   ;;
;	DEC	AX			;;
;	MOV	cs:fdlen_word,AX	   ;;
;	JZ	NO_DISP_FONT3		;;
;	MOV	cs:stage,disp_colsX	   ;;
;	JMP	FTB_LOOP		;;
;NO_DISP_FONT3 :			 ;;
;	MOV	cs:stage,FOUNDX 	   ;; FSTAT is to be changed
;	JMP	FTB_LOOP		;;
;					;;+++++++++++++++++++++++++++++++++
DSPCOLS :				;; STAGE : get the COLS
;	INC	cs:pre_font_len 	  ;;
;	MOV	AX,FPKT 		;;
;	INC	SI			;;
;	DEC	CX			;;
;	MOV	cs:disp_cols,AL 	   ;;
;	MOV	AX,cs:fdlen_word	   ;;
;	DEC	AX			;;
;	MOV	cs:fdlen_word,AX	   ;;
;	JZ	NO_DISP_FONT3		;;
;	MOV	cs:stage,DISP_XX	   ;;
;	JMP	FTB_LOOP		;;
					;;+++++++++++++++++++++++++++++++++
 DSPX : 				 ;; STAGE : get the aspect X
;	INC	cs:pre_font_len 	  ;;
;	MOV	AX,FPKT 		;;
;	INC	SI			;;
;	DEC	CX			;;
;	MOV	DISP_X,AL		;;
;	MOV	AX,cs:fdlen_word	   ;;
;	DEC	AX			;;
;	MOV	cs:fdlen_word,AX	   ;;
;	JZ	NO_DISP_FONT3		;;
;	MOV	cs:stage,DISP_YX	   ;;
;	JMP	FTB_LOOP		;;
;					;;+++++++++++++++++++++++++++++++++
 DSPY : 				 ;; STAGE : get the aspect Y
;	INC	cs:pre_font_len 	  ;;
;	MOV	AX,FPKT 		;;
;	INC	SI			;;
;	DEC	CX			;;
;	MOV	cs:disp_y,AL		   ;;
;	MOV	AX,cs:fdlen_word	   ;;
;	DEC	AX			;;
;	MOV	cs:fdlen_word,AX	   ;;
;	JZ	NO_DISP_FONT3		;;
;	MOV	cs:stage,COUNT_LOBX	   ;;
;	JMP	FTB_LOOP		;;
;					;;
					;;+++++++++++++++++++++++++++++++++
 DSPCOUNTLO :				 ;; the low byte of the FONT-LENGTH
;	INC	cs:pre_font_len 	  ;;
;	MOV	AX,FPKT 		;;
;	INC	SI			;; byte by byte
;	DEC	CX			;;
;	PUSH	AX			;; check if length is enough
;	MOV	AX,cs:fdlen_word	   ;;
;	DEC	AX			;;
;	MOV	cs:fdlen_word,AX	   ;;
;	POP	AX			;;
;	JNZ	A_WORD_COUNT		;;
;	JMP	NO_DISP_FONT3		;;
;A_WORD_COUNT : 			 ;;
;	AND	CX,CX			;;
;	JNZ	WORD_COUNT		;;
;	MOV	cs:count_lob,AL 	   ;;
;	MOV	cs:stage,COUNT_HIBX	   ;;
;	JMP	FTB_LOOP		;;
;WORD_COUNT :				 ;;
;	INC	cs:pre_font_len 	  ;;
;	INC	SI			;;
;	DEC	CX			;;
;	MOV	cs:count_word,AX	   ;;
;	MOV	cs:pre_font_len,PRE_FONT_D;
					;;
;	MOV	AX,cs:fdlen_word	   ;;
;	DEC	AX			;;
;	MOV	cs:fdlen_word,AX	   ;;
;	MOV	cs:stage,FOUNDX 	   ;; FSTAT is to be changed
;	JMP	FTB_LOOP		;;
;					;;
;					;;+++++++++++++++++++++++++++++++++
 DSPCOUNTHI :				 ;; STAGE the high byte of the F-LENGTH
;	INC	cs:pre_font_len 	  ;;
;	MOV	AX,FPKT 		;;
;	INC	SI			;; byte by byte
;	DEC	CX			;;
;	MOV	cs:count_hib,AL 	   ;;
;	MOV	cs:pre_font_len,PRE_FONT_D;
					;;
;	MOV	AX,cs:fdlen_word	   ;;
;	DEC	AX			;;
;	MOV	cs:fdlen_word,AX	   ;;
;	MOV	cs:stage,FOUNDX 	   ;; FSTAT is to be changed
;	JMP	FTB_LOOP		;;
;					;;
					;;
					;;+++++++++++++++++++++++++++++++++
PTRSELLO :				;; the low byte of the SELECTION_TYPE
					;;
;	 INC	 cs:pre_font_len	   ;;
;	 MOV	 AX,FPKT		 ;;
;	 INC	 SI			 ;; byte by byte
;	 DEC	 CX			 ;;
;	 PUSH	 AX			 ;; check if length is enough
;	 MOV	 AX,cs:fdlen_word	    ;;
;	 DEC	 AX			 ;;
;	 MOV	 cs:fdlen_word,AX	    ;;
;	 POP	 AX			 ;;
;	 JNZ	 A_WORD_SEL		 ;;
;	 JMP	 NO_PTR_FONT3		 ;;
;A_WORD_SEL :				 ;;
;	 AND	 CX,CX			 ;;
;	 JNZ	 WORD_SEL		 ;;
;	 MOV	 cs:ptr_selob,AL	    ;;
;	 MOV	 cs:stage,PTRSELHIX	    ;;
;	 JMP	 FTB_LOOP		 ;;
;WORD_SEL :				 ;;
;	 INC	 cs:pre_font_len	    ;;
;	 INC	 SI			 ;;
;	 DEC	 CX			 ;;
;	 MOV	 cs:ptr_sel_word,AX	    ;;
;					 ;;
;	 MOV	 AX,cs:fdlen_word	    ;;
;	 DEC	 AX			 ;;
;	 MOV	 cs:fdlen_word,AX	    ;;
;					 ;;
;	 CMP	 cs:ptr_sel_word,0	    ;;
;	 JNE	 PTR_SEL_NOT0		 ;;
;					 ;;
;					 ;;
;	 MOV	 cs:stage,FOUNDX	    ;; FSTAT is to be changed
;	 JMP	 FTB_LOOP		 ;;
;					 ;;
;PTR_SEL_NOT0 : 			 ;;
;	 MOV	 cs:stage,PTRLENLOX	    ;;
;	 JMP	 FTB_LOOP		 ;;
;					 ;;
					;;+++++++++++++++++++++++++++++++++
PTRSELHI:				;; STAGE the high byte of SELECT_TYPE
					;;
;	 INC	 cs:pre_font_len	   ;;
;	 MOV	 AX,FPKT		 ;;
;	 INC	 SI			 ;; byte by byte
;	 DEC	 CX			 ;;
;	 MOV	 cs:ptr_sehib,AL	    ;;
;					 ;;
;	 MOV	 AX,cs:fdlen_word	    ;;
;	 DEC	 AX			 ;;
;	 MOV	 cs:fdlen_word,AX	    ;;
;					 ;;
;	 CMP	 cs:ptr_sel_word,0	    ;;
;	 JNE	 PTR_SEL_NOT0		 ;;
;					 ;;
;					 ;;
;	 MOV	 cs:stage,FOUNDX	    ;; FSTAT is to be changed
;	 JMP	 FTB_LOOP		 ;;
;					 ;;
;					 ;;
					;;+++++++++++++++++++++++++++++++++
PTRLENLO :				;; the low byte of SELECTION_LENGTH
					;;
;	 INC	 cs:pre_font_len	   ;;
;	 MOV	 AX,FPKT		 ;;
;	 INC	 SI			 ;; byte by byte
;	 DEC	 CX			 ;;
;	 PUSH	 AX			 ;; check if length is enough
;	 MOV	 AX,cs:fdlen_word	    ;;
;	 DEC	 AX			 ;;
;	 MOV	 cs:fdlen_word,AX	    ;;
;	 POP	 AX			 ;;
;	 JNZ	 A_WORD_SELEN		 ;;
;	 JMP	 NO_PTR_FONT3		 ;;
;A_WORD_SELEN : 			 ;;
;	 AND	 CX,CX			 ;;
;	 JNZ	 WORD_SELEN		 ;;
;	 MOV	 cs:ptr_lnlob,AL	    ;;
;	 MOV	 cs:stage,PTRLENHIX	    ;;
;	 JMP	 FTB_LOOP		 ;;
;WORD_SELEN :				 ;;
;	 INC	 cs:pre_font_len	    ;;
;	 INC	 SI			 ;;
;	 DEC	 CX			 ;;
;	 MOV	 cs:ptr_len_word,AX	    ;;
;					 ;;
;	 MOV	 AX,cs:fdlen_word	    ;;
;	 DEC	 AX			 ;;
;	 MOV	 cs:fdlen_word,AX	    ;;
;	 MOV	 cs:stage,FOUNDX	    ;; FSTAT is to be changed
;	 JMP	 FTB_LOOP		 ;;
;					 ;;
					 ;;+++++++++++++++++++++++++++++++++
 PTRLENHI :				 ;; STAGE the high byte of SELECT_LENGTH
					 ;;
	SUB	CX,CX			 ;D; added for DISPLAY.SYS version
	MOV	CS:STAGE,STAGE_MAX+1	 ;D; added for DISPLAY.SYS version
	JMP	FTB_LOOP		 ;D; added for DISPLAY.SYS version
					 ;;
					 ;;
;	 INC	 cs:pre_font_len	   ;;
;	 MOV	 AX,FPKT		 ;;
;	 INC	 SI			 ;; byte by byte
;	 DEC	 CX			 ;;
;	 MOV	 cs:ptr_lnhib,AL	    ;;
;					 ;;
;	 MOV	 AX,cs:fdlen_word	    ;;
;	 DEC	 AX			 ;;
;	 MOV	 cs:fdlen_word,AX	    ;;
;	 MOV	 cs:stage,FOUNDX	    ;; FSTAT is to be changed
;	 JMP	 FTB_LOOP		 ;;
;					 ;;
;NO_PTR_FONT3 : 			 ;;
;	 MOV	 cs:stage,FOUNDX	    ;; FSTAT is to be changed
;	 JMP	 FTB_LOOP		 ;;
					;;+++++++++++++++++++++++++++++++++
PASS	:				;; STAGE - PASS DUMMY BYTES
					;;
	PUSH	DX			;;
	PUSH	ES			;;
	PUSH	DI			;;
					;;
	PUSH	CS			;;
	POP	ES			;;
	MOV	DI,OFFSET PASS_BRK	;;
	MOV	DX,PASS_INDX		;;
	MOV	AX,cs:pass_cnt		   ;;
					;;
NEXT_BRK:				;; find the next pass-break
	CMP	AX,ES:[DI]		;;
					;;
	JB	UPTO_BRK		;;
					;;
	DEC	DX			;;
	JZ	PASS_ERR		;;
	INC	DI			;;
	INC	DI			;;
	JMP	NEXT_BRK		;;
					;;
UPTO_BRK :				;; next break point found
	MOV	DX,ES:[DI]		;;
	SUB	DX,AX			;; bytes to be skipped
	CMP	CX,DX			;; all to be skipped ?
	JAE	PASS_ALL		;;
					;;
	ADD	cs:pass_cnt,CX		   ;;
	ADD	SI,CX			;;
	SUB	CX,CX			;;
        JMP     short PASS_END                ;;
					;;
PASS_ALL :				;;
	ADD	cs:pass_cnt,DX		   ;;
	ADD	SI,DX			;;
	SUB	CX,DX			;;
					;;
	MOV	AX,cs:pass_postx	   ;;
	MOV	cs:stage,AX		   ;;
					;;
;	cmp	ax,passx		;; is the next stage a pass-stage ?
;	jne	not_passx		;;
;	mov	ax,pass_postxx		;;
;	mov	pass_postx,ax		;;
;	mov	pass_postxx,stage_max	;; can support only 2 consecutive pass
					;;
;not_passx :				 ;;
					;;
        JMP     short PASS_END                ;;
					;;
PASS_ERR :				;; DEVICE ERROR, wrong stage
	POP	DI			;;
	POP	ES			;;
	POP	DX			;;
	MOV	FTP.FTB_STATUS,STAT_DEVERR
	SUB	CX,CX			;; ignore all the input string
        JMP     short PASS_DONE               ;;
					;;
PASS_END :				;;
	POP	DI			;;
	POP	ES			;;
	POP	DX			;;
PASS_DONE :				;;
	JMP	FTB_LOOP		;;
					;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
					;;
FTB_LPEND :				;;
					;;
	CMP	cs:stage,FOUNDX 	   ;;
	JNE	NOT_FOUNDX		;;
					;;
	CALL	FOUND_DO		;;
					;;
NOT_FOUNDX :				;;
					;;
	POP	CX			;; STACK -1
					;;
FP_RET	:				;;
	POP	SI			;; restore registers
	POP	DI			;;
	POP	DX			;;
	POP	CX			;;
	POP	BX			;;
	POP	AX			;;
	POP	ES			;;
	POP	DS			;;
					;;
	RET				;;
FONT_PARSER ENDP			;;
					;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\cps-func.inc ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;       CODE PAGE DRIVER FUNCTIONS
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
IF1                                     ;
        ;%out .               CPS-FUNC.INC
ENDIF                                   ;
                                        ;
CP_FUNCTION     LABEL   BYTE            ;
        DW   4CH,OFFSET DESIGNATE_BEGIN ;
        DW   4DH,OFFSET DESIGNATE_END   ;
        DW   4AH,OFFSET INVOKE_CP       ;
        DW   6AH,OFFSET QUERY_CP        ;
        DW   6BH,OFFSET QUERY_CP_LIST   ;
NUM_CP_FUNCTION  EQU ($-CP_FUNCTION)/4  ;
                                        ;
DESG_SEMAPHORE  DB      0               ; TEMPORARY
G_IOCTL_SEMA    DB      0               ; SEMAPHORE TO INDICATE IF CPS IS BUSY!
                                        ;
CHAR_HEIGHT     DB      8               ;
                DB     14               ;
                DB     16               ;
                DB     19               ;
                DB      0               ;
                DB      0               ;
                DB      0               ;
                DB      0               ;
NUM_CHAR_HEIGHT EQU ($-CHAR_HEIGHT)     ;
                                        ;
                                        ;
GENERIC_IOCTL PROC                      ; CON OUTPUT
        CLI                           ;S;
        MOV     SI,SP                 ;S;
        MOV     CS:OLD_STACK_O,SI     ;S;
        MOV     SI,SS                 ;S;
        MOV     CS:OLD_STACK_S,SI     ;S;
        MOV     AX,OFFSET STACK_START ;S;
        MOV     SI,CS                 ;S;
        MOV     SS,SI                 ;S;
        MOV     SP,AX                 ;S;
        STI                           ;S;
        PUSH    DS                      ;
                                        ;
        PUSH    CS                      ;
        POP     DS                      ; FROM HERE IN, DS=CS
                                        ;
        LES     DI,DWORD PTR BUF.RH_PTRO; GET RH
                                        ;
GI_1:   MOV     AL,RH.MINOR_F           ; PUT MINOR VERSION IN AL
        XOR     AH,AH                   ; CLEAR OUT HIGH BYTE FOR COMPARES
                                        ;
        PUSH    DI                      ; SAVE POINTER!!!
        PUSH    ES                      ;
        PUSH    CS                      ;
        POP     ES                      ;
        MOV     CX,NUM_CP_FUNCTION      ;
        MOV     DI,OFFSET CP_FUNCTION   ;
GI_1A:  SCASW                           ; SEARCH THROUGH THE LIST OF VALID FN's
        JE      GI_2                    ;
        INC     DI                      ;
        INC     DI                      ;
        LOOP    GI_1A                   ;
        POP     ES                      ;
        POP     DI                      ;
        jmp     short GI_3                    ; NOT FOUND!
GI_2:   POP     ES                      ;
        MOV     SI,DI                   ;
        POP     DI                      ;
                                        ;
        MOV     G_IOCTL_SEMA,ONE        ; SEMAPHORE TO INDICATE CALLS ARE BUSY!
        CALL    [SI]                    ; JMP OFF TO THE APPROPRIATE CALL!
        MOV     G_IOCTL_SEMA,ZERO       ; SEMAPHORE TO INDICATE CALLS ARE DONE!
        STC                             ; SET CY not TO TRY ATTACHED CON!
        jmp     short GI_4                    ;
GI_3:   CLC                             ; CLEAR CY TO TRY ATTACHED CON!
GI_4:   POP     DS                      ;
        CLI                           ;S;
        MOV     AX,CS:OLD_STACK_O     ;S;
        MOV     SI,CS:OLD_STACK_S     ;S;
        MOV     SS,SI                 ;S;
        MOV     SP,AX                 ;S;
        STI                           ;S;
        RET                             ;
GENERIC_IOCTL ENDP                      ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;       DESIGNATE BEGIN
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
DESIGNATE_BEGIN PROC                    ;
        LES     DI,RH.REQUEST_PACKET    ; AND DI TO POINT TO REQUEST PACKET
        MOV     CX,RH.DESG_N            ; MOVE THE NUMBER OF CODE PAGES DESIG'ed
                                        ;
        OR      CX,CX                   ;
        JZ      DB_0C                   ; CHECK IF ZERO CP's DESIGNATED
                                        ; IF SO, THEN THIS IS THE REFRESH CALL
DB_0:   CMP     CX,CPD_DESG_N           ; CHECK IF NUMBER > # CONFIGed
        JA      DB_0B                   ;
        jmp     short DB_1B                   ;
                                        ;
DB_0D:  OR      BUF.STATUS,EIGHT        ; Error>> KEYBOARD ERROR!!
        RET                             ;
DB_2D:  POP     CX                      ; RESTORE STACK ELEMENTS
        POP     BX                      ;
        POP     CX                      ; RESTORE STACK ELEMENTS
        POP     BX                      ;
DB_0B:  OR      BUF.STATUS,TEN          ; Error>> DEVICE ERROR!!
        RET                             ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;       REFRESH ACTIVE CODE PAGE TO DISPLAY
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
DB_0C:  MOV     DESG_SEMAPHORE,TWO      ; SET REFRESH COMMENCED
        MOV     CPD_REQ_DESG,CX         ; SAVE NUMBER OF REQUESTED CP'S (0)
        MOV     DX,CPD_ACTIVE           ; THIS IS THE REFRESH CALL
        CMP     DX,-1                   ; CHECK IF THE ACTIVE_CP = INVALID
        JE      DB_0B                   ;
        CLC                             ; CLEAR OUT THE CARRY FLAG
        CALL    SIGNAL_KBD_INVK         ;
        JC      DB_0D                   ; IF CY SET, THEN KEYBOARD IS WRONG
        CALL    TEST_CP                 ;
        JC      DB_0B                   ;
        CALL    INVOKE_DATA             ;
        JC      DB_0B                   ;
        RET                             ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;       THIS SECTION FORMS THE NEW DESIGNATE CP LIST IN THE
;       CPD_TEMP_DESG.  AT THE SAME TIME THE TOTAL NUMBER OF
;       REQUESTED CP's ARE FOUND.
;
;       DX will contain the real CP's to load
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
DB_1B:  CLD                             ; SET DIRECTION FORWARD
        PUSH    ES                      ;
        PUSH    CX                      ;
        PUSH    DI                      ;
        PUSH    CS                      ;
        POP     ES                      ;
        MOV     CX,CPD_DESG_N           ;
        INC     CX                      ; ACCOUNT FOR NUMBER OF CPS
        LEA     SI,CPD_DESG_N           ; COPY PREPARED CP LIST TO TEMP BUFFER
        LEA     DI,CPD_TEMP_DESG        ;
        REP     MOVSW                   ;
        POP     DI                      ;
        POP     CX                      ;
        POP     ES                      ;
                                        ;
        XOR     DX,DX                   ; SET COUNT OF CP's TO PREPARE = 0
        PUSH    CX                      ;
        PUSH    BX                      ;
        MOV     CPD_REQ_DESG,CX         ; SAVE NUMBER OF REQUESTED CP'S
        MOV     SI,2                    ;
        MOV     BX,SI                   ;
DB_1:   MOV     AX,RH.DESG_N[BX]        ; GET REQUESTED CP
        CMP     AX,-1                   ; TEST IF REQUESTED IS PLACE HOLDER..
        JE      DB_1A                   ;
        INC     DX                      ; ADD ONE TO THE # VALID DESG
        MOV     CPD_TEMP_DESG[SI],AX    ; OVERLAY THE NEWER CP INTO TEMP BUFFER
DB_1A:  MOV     CPD_REQ_DESG[SI],AX     ; COPY TO THE REQ DESG LIST
        INC     SI                      ;
        INC     SI                      ;
        INC     BX                      ;
        INC     BX                      ;
        LOOP    DB_1                    ;
        POP     BX                      ;
        POP     CX                      ;
                                        ;
        OR      DX,DX                   ; ARE THERE NO CP's TO PREPARE?
        JZ      DB_0B                   ; IF NONE TO DESG, THEN ERROR!!
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;       THIS SECTION CHECKS THE LIST OF DESIGed CP's IN THE
;       TEMP BUFFER AND SETS AN ERROR FOR DUPLICATES.
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
DB_2:   PUSH    BX                      ; CHECK THE DESIGNATE LIST FOR DUP's
        PUSH    CX                      ; AND FOR INVALIDS
        MOV     CX,CPD_TEMP_DESG        ;
        DEC     CX                      ; NORMALIZE
        JZ      DB_3                    ; IF ZERO, THEN NONE TO COMPARE
        MOV     BX,2                    ; SET BX TO START OF LIST....
        MOV     SI,2                    ; SETUP SI READY TO MOVE DESG LIST IN!
DB_2A:  PUSH    BX                      ;
        PUSH    CX                      ;
        MOV     AX,CPD_TEMP_DESG[BX]    ; GET CP DESGINATED
        CMP     AX,-1                   ; TEST IF ENTRY = -1
        JE      DB_2E                   ; IF SO, THEN SKIP
DB_2B:  CMP     CX,1                    ; TEST IF IT IS THE ONLY ONE TO COMPARE
        JE      DB_2E                   ; AGAINST!
        INC     BX                      ; ADVANCE POINTER TO NEXT CP DESIGNATED
        INC     BX                      ;
        CMP     AX,CPD_TEMP_DESG[BX]    ; CHECK IF NEXT CP's = ONE TESTED
        JNE     DB_2C                   ; IF error, THEN GET OUT
        JUMP    DB_2D                   ;
                                        ;
DB_2C:  LOOP    DB_2B                   ;
DB_2E:  POP     CX                      ;
        POP     BX                      ;
        INC     BX                      ;
        INC     BX                      ;
        OR      CX,CX                   ;
        JE      DB_3                    ; TEST IF ONLY ONE CP SPECIFIED
        LOOP    DB_2A                   ;
                                        ;
DB_3:   POP     CX                      ;
        POP     BX                      ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;       NOW, THE TEMPORARY BUFFER CONTAINS THE NEW LIST
;       OF DESGINATED CODE PAGES.  COPY THIS TO THE
;       PREPARED CP LIST.
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        PUSH    ES                      ; NOW ALL TESTS ARE SUCCESSFUL,
        PUSH    CX                      ;
        PUSH    DI                      ;
        PUSH    CS                      ;
        POP     ES                      ;
        MOV     CX,CPD_DESG_N           ;
        INC     CX                      ; ACCOUNT FOR NUMBER OF CPS
        LEA     SI,CPD_TEMP_DESG        ; COPY TEMP BUFFER INTO NEW CP LIST
        LEA     DI,CPD_DESG_N           ;
        REP     MOVSW                   ;
        POP     DI                      ;
        POP     CX                      ;
        POP     ES                      ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;       NOW THAT THE LIST IS VALID, THE FONT PARSER & PARSING TABLES
;       ARE PREPARED FOR INITIALIZATION OF DESIGNATION.
;
;       DX is the number of valid CP's
;       CX is the number of CP's desginated
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        PUSH    BX                      ;
        PUSH    ES                      ;
        PUSH    DI                      ;
                                        ; CX=#DESGed, BX=pnter DESG LIST
        MOV     BX,2                    ; SET BX TO POINT TO FIRST CP DESGed
        LEA     DI,FTABLE               ; SET DI TO POINT TO MAIN PARSER TABLE
        PUSH    CS                      ;
        POP     ES                      ; INITIALIZE ES=CS
        MOV     [DI].FLAG,FLAG_RESTART  ; SETUP UP MAIN TABLE FOR F-PARSER.SRC
        MOV     [DI].BUFFER_LEN,0       ; PREPARING FOR START OF DESIGNATION
        MOV     [DI].NUM_FTBLK,DX       ; DX=#DESG TO PARSE OUT
                                        ;
        LEA     SI,CPD_CLASS            ; SET DI TO POINT TO (EGA,LCD) CLASSES
        LEA     DI,FTB1                 ; SET DI TO POINT TO FIRST PARSING TABLE
                                        ;
DB_4:   MOV     AX,CPD_REQ_DESG[BX]     ;
        CMP     AX,-1                   ; CHECK FOR PLACE HOLDER
        JE      DB_5                    ;
        MOV     [DI].FTB_CP,AX          ; COPY THE DESG CP VALUE INTO THE TABLE
        PUSH    CX                      ; AND ALSO THE CPD_CLASS
        PUSH    SI                      ;
        PUSH    DI                      ;
        LEA     DI,[DI].FTB_TID         ;
        MOV     CX,8                    ;
        REP     MOVSB                   ;
        POP     DI                      ;
        POP     SI                      ;
        POP     CX                      ;
                                        ;
        ADD     DI,TYPE FTBLK           ; MOVE POINTERS TO NEXT PARSING TABLE
DB_5:   INC     BX                      ;
        INC     BX                      ; ADVANCE BX TO NEXT DESG CP
        LOOP    DB_4                    ;
                                        ;
        POP     DI                      ;
        POP     ES                      ;
        POP     BX                      ;
                                        ;
        CALL    FONT_PARSER             ; CALL FONT PARSER TO INITIALIZE WRITES
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;       THIS WILL COPY THE START LOCATION OF THE FONTS (set by INIT)
;       INTO THE START LOCATION FOR THE DESIGNATE WRITE, WHICH FOLLOWS!
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        PUSH    SI                      ;
        PUSH    DI                      ;
        PUSH    ES                      ;
        PUSH    CS                      ;
        POP     ES                      ; SET EXTRA SEG ES = CS
        LEA     SI,CPD_FONT_PNTER       ;
        LEA     DI,CPD_FONT_WRITE       ;
        MOV     CX,CPD_DESG_N           ; GET NUMBER OF DESIGNATES
        ADD     CX,CX                   ; DOUBLE FOR SEG:OFFSET
        REP     MOVSW                   ; COPY FONT START LOC's TO START WRITE
        XOR     DI,DI                   ;
        LEA     SI,CPD_FONT_DATA        ; SET THE FONT_DATA COUNTERS BACK TO 0
        MOV     CX,CPD_DESG_N           ;
DB_6:   MOV     [SI],DI                 ;
        INC     SI                      ;
        INC     SI                      ;
        LOOP    DB_6                    ;
        POP     ES                      ;
        POP     DI                      ;
        POP     SI                      ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;       CREATE THE FONT_PRIORITY TABLE
;
;       THIS IS USED TO PLACE PRIORITY ON THE FONTS BEING DESIGNATED
;       ESPECIALLY WHEN THE NUMBER OF DESIGNATED FONTS < FONTS IN THE
;       xxx.CPI FILE.  THIS IS USED TO SELECT THE NEEDED FONTS FOR
;       CP SUPPORT.
;
;       RULE:  PRIORITY 1 = ACTIVE MODE's FONT RESOLUTION
;              PRIORITY 2 = FONT RESOLUTION (non-repeats) OF ALL DISPLAY
;                           MODES - STARTING FROM MODE (0) - MODE (?)
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        PUSH    AX                      ;
        PUSH    BX                      ;
        PUSH    CX                      ;
        PUSH    SI                      ;
        PUSH    DI                      ;
                                        ;
        LEA     DI,FONT_PRIORITY        ;
        MOV     CX,CPD_FONTS_N          ; GET THE NUMBER OF SPECIFIED FONTS
                                        ;
        PUSH    ES                      ;
        PUSH    DI                      ;
        PUSH    CX                      ; OVER-WRITE THE TABLE WITH 0FFH's
        PUSH    CS                      ;
        POP     ES                      ;
        MOV     AL,-1                   ;
        REP     STOSB                   ;
        POP     CX                      ;
        POP     DI                      ;
        POP     ES                      ;
                                        ;
        XOR     AH,AH                   ; AH=0 FOR MODE SET, AL=MODE_TYPE
        MOV     AL,MODE_VALUE           ;
        MOV     SI,AX                   ; ESTABLISH INDEX INTO LOAD_MECH table
        MOV     AL,[SI].FONT_SIZE       ; GET FONT_SIZE FOR THIS MODE_VALUE
        OR      AL,AL                   ; TEST FOR FONT_VALUE=0
        JNZ     DB_8                    ;
        CALL    ASK_BIOS_FONT_SIZE      ; GET BIOS TO INDICATE FONT_SIZE
DB_8:   MOV     CS:[DI],AL              ; PUT ACTIVE FONT RESOLUTION INTO 1ST!
        INC     DI                      ; ADVANCE POINTER TO NEXT POSITION
        DEC     CX                      ; SUBTRACT ONE FONT RESOLUTION...
        JZ      DB_A                    ; IF THERE WAS ONLY 1 FONT...THEN DONE
                                        ;
        XOR     SI,SI                   ; START WITH MODE = 0
DB_8A:  PUSH    CX                      ;
        PUSH    DI                      ;
        MOV     CX,NUM_FONT_PRIORITY    ;
        LEA     DI,FONT_PRIORITY        ; SET DI TO START OF TABLE
        MOV     AL,[SI].FONT_SIZE       ; GET FONT SIZE FOR THIS MODE
        CMP     AL,-1                   ; TEST FOR INVALID FONT SIZE
        JE      DB_9                    ; IF SO, THEN TRY NEXT VALUE
        OR      AL,AL                   ; TEST FOR FONT_VALUE=0
        JNZ     DB_8C                   ;
                                        ; OTHERWISE, ONLY EGA BIOS WOULD KNOW!!!
        CMP     SI,EIGHT                ; ONLY EIGHT DIFFERENT FONTS PERMITTED!!
        JAE     DB_9                    ;
                                        ;
        PUSH    CX                      ;
        CALL    ASK_BIOS_SCAN_LINES     ; GET ENCODED SCAN LINES VALUE!!!
        JC      DB_9                    ;
        MOV     CX,SI                   ; PUT INDEX INTO CX
        INC     CL                      ; NORMALIZE INDEX VALUE (1-8)
        SAR     AL,CL                   ;
        POP     CX                      ;
        JNC     DB_9                    ;
        MOV     AL,CS:CHAR_HEIGHT[SI]   ;
                                        ;
DB_8C:  CMP     AL,CS:[DI]              ;
        JE      DB_9                    ; IF EQUAL, THEN ALREADY IN TABLE
        INC     DI                      ; OTHERWISE, TAKE THIS MODES FONT RES
        LOOP    DB_8C                   ; AND COMPARE AGAINST NEXT PRIOR.VALUE
                                        ;
        POP     DI                      ; NEW RESOLUTION FOUND...ADD TO LIST
        POP     CX                      ;
        MOV     CS:[DI],AL              ; PUT NEW VALUE IN THE TABLE
        INC     DI                      ; AND ADVANCE FOR NEXT FONT RESOLUTION
        jmp     short DB_9A             ; LOOP WILL DECREMENT #FONTS TO FIND
DB_9:   POP     DI                      ;
        POP     CX                      ;
        INC     CX                      ; MATCH FOUND..SO LEAVE #FONT TO PRIOR.
DB_9A:  INC     SI                      ; POINT TO NEXT DISPLAY MODE
        CMP     SI,NUM_FONT_SIZES       ;
        JAE     DB_A                    ;
        LOOP    DB_8A                   ; CONTINUE UNTIL THE #FONTS DESIGNATED
                                        ; HAVE BEEN PRIORITIZED OR ALL MODES
DB_A:   POP     DI                      ; ARE CHECKED OUT!
        POP     SI                      ;
        POP     CX                      ;
        POP     BX                      ;
        POP     AX                      ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        MOV     DESG_SEMAPHORE,ONE      ; SET DESIGNATION TO COMMENCE...
        RET                             ;
DESIGNATE_BEGIN ENDP                    ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;       DESIGNATE END
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
DESIGNATE_END   PROC                    ;
        CMP     DESG_SEMAPHORE,ZERO     ; TEST IF DESG_SEMAPHORE = DATA WRITTEN
        JE      DE_1                    ;
                                        ;
        CMP     CPD_REQ_DESG,ZERO       ; TEST IF ZERO CP's REQUESTED (REFRESH)
        JE      DE_0                    ;
                                        ;
        CALL    VERIFY_FPARSER          ; CALL ROUTINE TO VERIFY THAT THE
        JC      DE_2                    ; FONT PARSER FINISHED OK...
                                        ;
        PUSH    ES                      ; NOW THE DESIGNATE IS OVER...
        PUSH    DI                      ;
        MOV     CX,CPD_ACTIVE           ; CHECK IF ACTIVE_CP IS STILL VALID!
        CALL    FIND_CP                 ; TRY AND FIND CPD_ACTIVE?
        POP     DI                      ;
        POP     ES                      ;
        JNC     DE_0                    ;
        MOV     CX,-1                   ;
        MOV     CPD_ACTIVE,CX           ;
DE_0:   MOV     DESG_SEMAPHORE,ZERO     ;
        RET                             ;
                                        ;
DE_1:   OR      BUF.STATUS,TWELVE       ; Error>> NO DESGINATE START
        JUMP    DE_0                    ;
DE_2:   CALL    HANDLE_WRITE_ERROR      ; RESET ALL DESIGNATED INFORMATION
        OR      BUF.STATUS,FAIL         ; Error>> FONT DATA IS BAD
        JUMP    DE_0                    ;
DESIGNATE_END   ENDP                    ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;       INVOKE
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
INVOKE_CP       PROC                    ;
        LES     DI,RH.REQUEST_PACKET    ; AND DI TO POINT TO REQUEST PACKET
        MOV     CX,RH.INVK_LENGTH       ; GET LENGTH OF REMAINING HEADER
                                        ;
        CMP     CX,TWO                  ; TEST IF LENGTH OF TABLE IS GREATER
        JNE     ICP_2                   ; THAN ONE CP!
                                        ;
        MOV     CX,RH.INVK_CP           ; GET THE CODE PAGE TO INVOKE
        MOV     DX,CX                   ; SAVE CP VALUE
        CMP     CX,-1                   ; TEST FOR INVALID CODE PAGE!
        JE      ICP_1A                  ;
                                        ;
        PUSH    CPD_ACTIVE              ; SAVE ACTIVE_CP, FOR POSSIBLE USE...
        MOV     CPD_ACTIVE,CX           ;
        CALL    TEST_CP                 ; TRY AND LOAD THE REQUESTED CP
        POP     CX                      ;
        JC      ICP_1AA                 ; IF ERROR, THEN RESTORE OLD CP
                                        ;
        CMP     CX,CPD_ACTIVE           ; TEST IF OLD CP=ACTIVE!!!
        JE      ICP_0A                  ;
                                        ;
        CALL    INVOKE_DATA             ; IF EVERYTHING OK, THEN LOAD DATA
        JC      ICP_2A                  ;
                                        ;
ICP_0A: CALL    SIGNAL_KBD_INVK         ; DX CONTAINS CODEPAGE
        JC      ICP_1                   ; IF CY THEN ERROR
        RET                             ;
                                        ;
ICP_1:  OR      BUF.STATUS,EIGHT        ; Error>> KEYB ERROR
        RET                             ;
ICP_1AA:MOV     CPD_ACTIVE,CX           ; PUT OLD CP BACK ACTIVE
ICP_1A: OR      BUF.STATUS,SEVEN        ; Error>> CODE PAGE NOT FOUND
        RET                             ;
ICP_2A: MOV     CPD_ACTIVE,CX           ;
ICP_2:  OR      BUF.STATUS,TEN          ; Error>> DEVICE ERROR
        RET                             ;
INVOKE_CP       ENDP                    ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;       QUERY
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
QUERY_CP        PROC                    ;
        LES     DI,RH.REQUEST_PACKET    ; SETUP ADDRESSING TO HEADER
                                        ;
        MOV     CX,TWO                  ;
        MOV     RH.INVK_LENGTH,CX       ; CREATE RETURN 'N' VALUE
                                        ;
        CALL    TEST_CP                 ; FIND OUT IF CP DATA IS OK!
        MOV     CX,CPD_ACTIVE           ;
        JNC     QCP_A                   ;
        MOV     CX,-1                   ; MAKE THE ACTIVE REPONSE AS INVALID
                                        ;
QCP_A:  MOV     RH.INVK_CP,CX           ; SET THE CODE PAGE IN HEADER
        CMP     CX,-1                   ; TEST IF NO CP SPECIFIED?
        JE      QCP_0                   ;
        RET                             ;
                                        ;
QCP_0:  OR      BUF.STATUS,SEVEN        ; Error>> NOT CODE PAGE SPECIFIED
        RET                             ;
QUERY_CP        ENDP                    ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;       QUERY LIST
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
QUERY_CP_LIST   PROC                    ;
        LES     DI,RH.REQUEST_PACKET    ; AND DI TO POINT TO REQUEST PACKET
                                        ;
        MOV     CX,CPD_HDWR_N           ;
        MOV     RH.QLST_N_HDWR,CX       ;
        ADD     CX,CPD_DESG_N           ;
        ADD     CX,TWO                  ; ACCOUNT FOR LENGTH OF 'N's
        ADD     CX,CX                   ;
        MOV     RH.QLST_LENGTH,CX       ; CREATE RETURN TABLE LENGTH
                                        ;
        PUSH    AX                      ;
        PUSH    BX                      ;
        PUSH    SI                      ;
        MOV     CX,CPD_HDWR_N           ;
        MOV     BX,2                    ;
        OR      CX,CX                   ;
        JE      QCP_3                   ;
QCP_2:  MOV     AX,CPD_HDWR_N[BX]       ;
        MOV     RH.QLST_N_HDWR[BX],AX   ;
        INC     BX                      ;
        INC     BX                      ;
        LOOP    QCP_2                   ;
                                        ;
QCP_3:  MOV     CX,CPD_DESG_N           ; SET TABLE ENTRY FOR DESIGNATE
        MOV     RH.QLST_N_HDWR[BX],CX   ;
        INC     BX                      ;
        INC     BX                      ;
                                        ;
        OR      CX,CX                   ;
        JE      QCP_4A                  ;
        MOV     SI,2                    ;
QCP_4:  MOV     AX,CPD_DESG_N[SI]       ;
        MOV     RH.QLST_N_HDWR[BX],AX   ;
        INC     BX                      ;
        INC     BX                      ;
        INC     SI                      ;
        INC     SI                      ;
        LOOP    QCP_4                   ;
QCP_4A: POP     SI                      ;
        POP     BX                      ;
        POP     AX                      ;
        RET                             ;
QCP_5:  OR      BUF.STATUS,SEVEN        ; Error>> NO CODE PAGE INVOKED
        RET                             ;
QCP_6:  OR      BUF.STATUS,TEN          ; Error>> DEVICE ERROR
        RET                             ;
QUERY_CP_LIST   ENDP                    ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;       GET HARDWARE CODE PAGE TABLE
;
;       INPUT:
;               none
;       OUTPUT:
;               SI = pointer to HARDWARE table (n,h_cp1,h_cp2,...)
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
GET_HDWR_CP     PROC                    ;
        LEA     SI,CP_PNTER_TABLE       ;
        MOV     SI,[SI].HDWR_CP_STRUC   ;
        RET                             ;
GET_HDWR_CP     ENDP                    ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;       GET DESIGNATE CODE PAGE TABLE
;
;       INPUT:  none
;       OUTPUT: SI = pointer to DESIGNATE table (n,d_cp1,d_cp2,...)
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
GET_DESG_CP     PROC                    ;
        LEA     SI,CP_PNTER_TABLE       ;
        MOV     SI,[SI].DESG_CP_STRUC   ;
        RET                             ;
GET_DESG_CP     ENDP                    ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;       GET FONT POINTER TABLE
;
;       INPUT:
;               none
;       OUTPUT:
;               SI = pointer to FONTS table (pnter_cp1,pnter_cp2,...)
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
GET_FONT_CP     PROC                    ;
        LEA     SI,CP_PNTER_TABLE       ;
        MOV     SI,[SI].FONT_CP_STRUC   ;
        RET                             ;
GET_FONT_CP     ENDP                    ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;       GET WRITE POINTER
;
;       INPUT:
;               none
;       OUTPUT:
;               SI = pointer to WRITE pointers
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
GET_WRITE_PNTR  PROC                    ;
        LEA     SI,CP_PNTER_TABLE       ;
        MOV     SI,[SI].WRITE_DATA_STRUC;
        RET                             ;
GET_WRITE_PNTR  ENDP                    ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;       FIND ACTIVE CODE PAGE
;
;       INPUT:
;               CX      = code page to find
;       OUTPUT:
;              'CY'     = 0 if found, 1 if NOT
;               CX      = 0 for hdwr, 1 for designated
;               ES : DI = pointer to FONT data table
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
FIND_CP         PROC                    ;
        PUSH    AX                      ;
        PUSH    BX                      ;
        PUSH    SI                      ;
        MOV     AX,CX                   ;
        CALL    GET_DESG_CP             ; SET BX TO DESG TABLE INFO
        MOV     CX,[SI]                 ; GET THE NUMBER OF DESG CP's
        OR      CX,CX                   ;
        JZ      FCP_1                   ; MOVE ONTO DESG TEST WITH 0 CP's
        MOV     BX,TWO                  ; ELSE, USE SI TO POINT TO 1ST CP
FCP_0:  CMP     AX,[SI+BX]              ; SEARCH FOR CP MATCH
        JE      FCP_4                   ; CP MATCHED!!  SET DESG INFO & EXIT
        INC     BX                      ; ADVANCE SI POINTER TO NEXT CP
        INC     BX                      ;
        LOOP    FCP_0                   ; CHECK ACROSS ALL CP's IN TABLE
FCP_1:  CALL    GET_HDWR_CP             ; NOW, REPEAT SAME OPERATION
        MOV     CX,[SI]                 ; WITH THE HARDWARE CP's
        OR      CX,CX                   ;
        JZ      FCP_3                   ; IF THIS FAR, THEN SET ERROR FOR
        INC     SI                      ;
        INC     SI                      ; ADVANCE POINTER BY TWO...SINCE
        MOV     BX,ZERO                 ; PNTER'S DON'T HAVE 'n'...
FCP_2:  CMP     AX,[SI+BX]              ; SEARCH AGAIN FOR CP MATCH
        JE      FCP_5                   ; CP MATCHED!! SET HDWR INFO & EXIT
        INC     BX                      ; ADVANCE SI POINTER TO NEXT CP
        INC     BX                      ;
        LOOP    FCP_2                   ; REPEAT FOR ALL CP ENTRIES
FCP_3:  XOR     CX,CX                   ; SET RETURN VALUES TO ZERO
        XOR     DI,DI                   ;
        POP     SI                      ;
        POP     BX                      ;
        POP     AX                      ;
        STC                             ; CY=1 FOR ERROR
        RET                             ; EXIT
FCP_4:  MOV     CX,ONE                  ; DESIGNATED CODE PAGE FOUND
        CALL    GET_FONT_CP             ; SET THE BX VALUE TO THE FONT DATA
        SUB     BX,2                    ; NORMALIZE BX VALUE;;;;;;;;;;;;;;;
        ADD     SI,BX                   ; FORMULATE THE SI INDEX BY ADDING
        ADD     SI,BX                   ; BX INDEX x 2 (dword FONT_PNTER)
        MOV     DI,[SI]                 ; TAKE OFFSET DATA FROM font_table
        MOV     ES,[SI+2]               ; AND SEGMENT ALSO!
        POP     SI                      ;
        POP     BX                      ;
        POP     AX                      ;
        CLC                             ; CY=0 FOR OK!
        RET                             ; EXIT
FCP_5:  XOR     CX,CX                   ; HARDWARE CODE PAGE FOUND
        XOR     DI,DI                   ;
        POP     SI                      ;
        POP     BX                      ;
        POP     AX                      ;
        CLC                             ;
        RET                             ; EXIT
FIND_CP         ENDP                    ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;       VERIFY_FPARSER A ROUTINE THAT CHECKS THE
;       FONT_BLOCKS FOR INCOMPLETE DESIGNATES?
;       IF SO, THEN AN ERROR OCCURRED...
;
;       INPUT:
;               FONT_PARSER should be completed parsing
;
;       OUTPUT:
;               CY = 0 if all is correct
;                    1 if one or more designates are incomplete
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
VERIFY_FPARSER  PROC                    ;
        PUSH    AX                      ;
        PUSH    CX                      ;
        PUSH    ES                      ;
        PUSH    DI                      ;
                                        ;
        PUSH    CS                      ;
        POP     ES                      ;
                                        ;
        MOV     CX,CPD_REQ_DESG         ; CX = REQUESTED DESG CP's
        LEA     DI,FTB1                 ; SET DI TO POINT TO FIRST PARSING TABLE
                                        ;
VFP_4:  MOV     AX,[DI].FTB_STATUS      ; GET STATUS OF PARSING TABLE #n
        CMP     AX,FSTAT_COMPLETE       ; FIND OUT IF THIS CP COMPLETED?
        JE      VFP_6                   ;
                                        ;
        CMP     AX,FSTAT_FONT           ; CHECK IF AT LEAST THE FONT DATA FOUND
        JNE     VFP_8                   ; IF NOT, THEN AN ERROR OCCURRED....
        CMP     [DI].FTB_DLEFT,ZERO     ; IF SO, THEN NO DATA CAN BE LEFT....
        JNE     VFP_8                   ; OTHERWISE ANOTHER ERROR ?
VFP_6:  ADD     DI,TYPE FTBLK           ; MOVE POINTERS TO NEXT PARSING TABLE
        LOOP    VFP_4                   ;
        CLC                             ;
        jmp     short VFP_9                   ;
                                        ;
VFP_8:  STC                             ;
VFP_9:  POP     DI                      ;
        POP     ES                      ;
        POP     CX                      ;
        POP     AX                      ;
        RET                             ;
VERIFY_FPARSER  ENDP                    ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\ega\437-8x16.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
;***************************************************
;  CHARACTER FONT FILE
;  Source Assembler File
;
;        CODE PAGE: 437 
;  FONT RESOLUTION: 8 x 16 
;
;     DATE CREATED:05-28-1987
;
;
; Output file from: MULTIFON, Version 1A
;
;***************************************************
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #0
    Db  000h,000h,07Eh,081h,0A5h,081h,081h,0BDh,099h,081h,081h,07Eh,000h,000h,000h,000h ;   Hex #1
    Db  000h,000h,07Eh,0FFh,0DBh,0FFh,0FFh,0C3h,0E7h,0FFh,0FFh,07Eh,000h,000h,000h,000h ;   Hex #2
    Db  000h,000h,000h,000h,06Ch,0FEh,0FEh,0FEh,0FEh,07Ch,038h,010h,000h,000h,000h,000h ;   Hex #3
    Db  000h,000h,000h,000h,010h,038h,07Ch,0FEh,07Ch,038h,010h,000h,000h,000h,000h,000h ;   Hex #4
    Db  000h,000h,000h,018h,03Ch,03Ch,0E7h,0E7h,0E7h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #5
    Db  000h,000h,000h,018h,03Ch,07Eh,0FFh,0FFh,07Eh,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #6
    Db  000h,000h,000h,000h,000h,000h,018h,03Ch,03Ch,018h,000h,000h,000h,000h,000h,000h ;   Hex #7
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0E7h,0C3h,0C3h,0E7h,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #8
    Db  000h,000h,000h,000h,000h,03Ch,066h,042h,042h,066h,03Ch,000h,000h,000h,000h,000h ;   Hex #9
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0C3h,099h,0BDh,0BDh,099h,0C3h,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #A
    Db  000h,000h,01Eh,00Eh,01Ah,032h,078h,0CCh,0CCh,0CCh,0CCh,078h,000h,000h,000h,000h ;   Hex #B
    Db  000h,000h,03Ch,066h,066h,066h,066h,03Ch,018h,07Eh,018h,018h,000h,000h,000h,000h ;   Hex #C
    Db  000h,000h,03Fh,033h,03Fh,030h,030h,030h,030h,070h,0F0h,0E0h,000h,000h,000h,000h ;   Hex #D
    Db  000h,000h,07Fh,063h,07Fh,063h,063h,063h,063h,067h,0E7h,0E6h,0C0h,000h,000h,000h ;   Hex #E
    Db  000h,000h,000h,018h,018h,0DBh,03Ch,0E7h,03Ch,0DBh,018h,018h,000h,000h,000h,000h ;   Hex #F
    Db  000h,080h,0C0h,0E0h,0F0h,0F8h,0FEh,0F8h,0F0h,0E0h,0C0h,080h,000h,000h,000h,000h ;   Hex #10
    Db  000h,002h,006h,00Eh,01Eh,03Eh,0FEh,03Eh,01Eh,00Eh,006h,002h,000h,000h,000h,000h ;   Hex #11
    Db  000h,000h,018h,03Ch,07Eh,018h,018h,018h,07Eh,03Ch,018h,000h,000h,000h,000h,000h ;   Hex #12
    Db  000h,000h,066h,066h,066h,066h,066h,066h,066h,000h,066h,066h,000h,000h,000h,000h ;   Hex #13
    Db  000h,000h,07Fh,0DBh,0DBh,0DBh,07Bh,01Bh,01Bh,01Bh,01Bh,01Bh,000h,000h,000h,000h ;   Hex #14
    Db  000h,07Ch,0C6h,060h,038h,06Ch,0C6h,0C6h,06Ch,038h,00Ch,0C6h,07Ch,000h,000h,000h ;   Hex #15
    Db  000h,000h,000h,000h,000h,000h,000h,000h,0FEh,0FEh,0FEh,0FEh,000h,000h,000h,000h ;   Hex #16
    Db  000h,000h,018h,03Ch,07Eh,018h,018h,018h,07Eh,03Ch,018h,07Eh,000h,000h,000h,000h ;   Hex #17
    Db  000h,000h,018h,03Ch,07Eh,018h,018h,018h,018h,018h,018h,018h,000h,000h,000h,000h ;   Hex #18
    Db  000h,000h,018h,018h,018h,018h,018h,018h,018h,07Eh,03Ch,018h,000h,000h,000h,000h ;   Hex #19
    Db  000h,000h,000h,000h,000h,018h,00Ch,0FEh,00Ch,018h,000h,000h,000h,000h,000h,000h ;   Hex #1A
    Db  000h,000h,000h,000h,000h,030h,060h,0FEh,060h,030h,000h,000h,000h,000h,000h,000h ;   Hex #1B
    Db  000h,000h,000h,000h,000h,000h,0C0h,0C0h,0C0h,0FEh,000h,000h,000h,000h,000h,000h ;   Hex #1C
    Db  000h,000h,000h,000h,000h,028h,06Ch,0FEh,06Ch,028h,000h,000h,000h,000h,000h,000h ;   Hex #1D
    Db  000h,000h,000h,000h,010h,038h,038h,07Ch,07Ch,0FEh,0FEh,000h,000h,000h,000h,000h ;   Hex #1E
    Db  000h,000h,000h,000h,0FEh,0FEh,07Ch,07Ch,038h,038h,010h,000h,000h,000h,000h,000h ;   Hex #1F
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #20
    Db  000h,000h,018h,03Ch,03Ch,03Ch,018h,018h,018h,000h,018h,018h,000h,000h,000h,000h ;   Hex #21
    Db  000h,066h,066h,066h,024h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #22
    Db  000h,000h,000h,06Ch,06Ch,0FEh,06Ch,06Ch,06Ch,0FEh,06Ch,06Ch,000h,000h,000h,000h ;   Hex #23
    Db  018h,018h,07Ch,0C6h,0C2h,0C0h,07Ch,006h,006h,086h,0C6h,07Ch,018h,018h,000h,000h ;   Hex #24
    Db  000h,000h,000h,000h,0C2h,0C6h,00Ch,018h,030h,060h,0C6h,086h,000h,000h,000h,000h ;   Hex #25
    Db  000h,000h,038h,06Ch,06Ch,038h,076h,0DCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #26
    Db  000h,030h,030h,030h,060h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #27
    Db  000h,000h,00Ch,018h,030h,030h,030h,030h,030h,030h,018h,00Ch,000h,000h,000h,000h ;   Hex #28
    Db  000h,000h,030h,018h,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,018h,030h,000h,000h,000h,000h ;   Hex #29
    Db  000h,000h,000h,000h,000h,066h,03Ch,0FFh,03Ch,066h,000h,000h,000h,000h,000h,000h ;   Hex #2A
    Db  000h,000h,000h,000h,000h,018h,018h,07Eh,018h,018h,000h,000h,000h,000h,000h,000h ;   Hex #2B
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,018h,018h,030h,000h,000h,000h ;   Hex #2C
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #2D
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,018h,000h,000h,000h,000h ;   Hex #2E
    Db  000h,000h,000h,000h,002h,006h,00Ch,018h,030h,060h,0C0h,080h,000h,000h,000h,000h ;   Hex #2F
    Db  000h,000h,038h,06Ch,0C6h,0C6h,0D6h,0D6h,0C6h,0C6h,06Ch,038h,000h,000h,000h,000h ;   Hex #30
    Db  000h,000h,018h,038h,078h,018h,018h,018h,018h,018h,018h,07Eh,000h,000h,000h,000h ;   Hex #31
    Db  000h,000h,07Ch,0C6h,006h,00Ch,018h,030h,060h,0C0h,0C6h,0FEh,000h,000h,000h,000h ;   Hex #32
    Db  000h,000h,07Ch,0C6h,006h,006h,03Ch,006h,006h,006h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #33
    Db  000h,000h,00Ch,01Ch,03Ch,06Ch,0CCh,0FEh,00Ch,00Ch,00Ch,01Eh,000h,000h,000h,000h ;   Hex #34
    Db  000h,000h,0FEh,0C0h,0C0h,0C0h,0FCh,006h,006h,006h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #35
    Db  000h,000h,038h,060h,0C0h,0C0h,0FCh,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #36
    Db  000h,000h,0FEh,0C6h,006h,006h,00Ch,018h,030h,030h,030h,030h,000h,000h,000h,000h ;   Hex #37
    Db  000h,000h,07Ch,0C6h,0C6h,0C6h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #38
    Db  000h,000h,07Ch,0C6h,0C6h,0C6h,07Eh,006h,006h,006h,00Ch,078h,000h,000h,000h,000h ;   Hex #39
    Db  000h,000h,000h,000h,018h,018h,000h,000h,000h,018h,018h,000h,000h,000h,000h,000h ;   Hex #3A
    Db  000h,000h,000h,000h,018h,018h,000h,000h,000h,018h,018h,030h,000h,000h,000h,000h ;   Hex #3B
    Db  000h,000h,000h,006h,00Ch,018h,030h,060h,030h,018h,00Ch,006h,000h,000h,000h,000h ;   Hex #3C
    Db  000h,000h,000h,000h,000h,07Eh,000h,000h,07Eh,000h,000h,000h,000h,000h,000h,000h ;   Hex #3D
    Db  000h,000h,000h,060h,030h,018h,00Ch,006h,00Ch,018h,030h,060h,000h,000h,000h,000h ;   Hex #3E
    Db  000h,000h,07Ch,0C6h,0C6h,00Ch,018h,018h,018h,000h,018h,018h,000h,000h,000h,000h ;   Hex #3F
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0DEh,0DEh,0DEh,0DCh,0C0h,07Ch,000h,000h,000h,000h ;   Hex #40
    Db  000h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #41
    Db  000h,000h,0FCh,066h,066h,066h,07Ch,066h,066h,066h,066h,0FCh,000h,000h,000h,000h ;   Hex #42
    Db  000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0C0h,0C0h,0C2h,066h,03Ch,000h,000h,000h,000h ;   Hex #43
    Db  000h,000h,0F8h,06Ch,066h,066h,066h,066h,066h,066h,06Ch,0F8h,000h,000h,000h,000h ;   Hex #44
    Db  000h,000h,0FEh,066h,062h,068h,078h,068h,060h,062h,066h,0FEh,000h,000h,000h,000h ;   Hex #45
    Db  000h,000h,0FEh,066h,062h,068h,078h,068h,060h,060h,060h,0F0h,000h,000h,000h,000h ;   Hex #46
    Db  000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0DEh,0C6h,0C6h,066h,03Ah,000h,000h,000h,000h ;   Hex #47
    Db  000h,000h,0C6h,0C6h,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #48
    Db  000h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #49
    Db  000h,000h,01Eh,00Ch,00Ch,00Ch,00Ch,00Ch,0CCh,0CCh,0CCh,078h,000h,000h,000h,000h ;   Hex #4A
    Db  000h,000h,0E6h,066h,066h,06Ch,078h,078h,06Ch,066h,066h,0E6h,000h,000h,000h,000h ;   Hex #4B
    Db  000h,000h,0F0h,060h,060h,060h,060h,060h,060h,062h,066h,0FEh,000h,000h,000h,000h ;   Hex #4C
    Db  000h,000h,0C6h,0EEh,0FEh,0FEh,0D6h,0C6h,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #4D
    Db  000h,000h,0C6h,0E6h,0F6h,0FEh,0DEh,0CEh,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #4E
    Db  000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #4F
    Db  000h,000h,0FCh,066h,066h,066h,07Ch,060h,060h,060h,060h,0F0h,000h,000h,000h,000h ;   Hex #50
    Db  000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0D6h,0DEh,07Ch,00Ch,00Eh,000h,000h ;   Hex #51
    Db  000h,000h,0FCh,066h,066h,066h,07Ch,06Ch,066h,066h,066h,0E6h,000h,000h,000h,000h ;   Hex #52
    Db  000h,000h,07Ch,0C6h,0C6h,060h,038h,00Ch,006h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #53
    Db  000h,000h,07Eh,07Eh,05Ah,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #54
    Db  000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #55
    Db  000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,06Ch,038h,010h,000h,000h,000h,000h ;   Hex #56
    Db  000h,000h,0C6h,0C6h,0C6h,0C6h,0D6h,0D6h,0D6h,0FEh,0EEh,06Ch,000h,000h,000h,000h ;   Hex #57
    Db  000h,000h,0C6h,0C6h,06Ch,07Ch,038h,038h,07Ch,06Ch,0C6h,0C6h,000h,000h,000h,000h ;   Hex #58
    Db  000h,000h,066h,066h,066h,066h,03Ch,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #59
    Db  000h,000h,0FEh,0C6h,086h,00Ch,018h,030h,060h,0C2h,0C6h,0FEh,000h,000h,000h,000h ;   Hex #5A
    Db  000h,000h,03Ch,030h,030h,030h,030h,030h,030h,030h,030h,03Ch,000h,000h,000h,000h ;   Hex #5B
    Db  000h,000h,000h,080h,0C0h,0E0h,070h,038h,01Ch,00Eh,006h,002h,000h,000h,000h,000h ;   Hex #5C
    Db  000h,000h,03Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,03Ch,000h,000h,000h,000h ;   Hex #5D
    Db  010h,038h,06Ch,0C6h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #5E
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,0FFh,000h,000h ;   Hex #5F
    Db  000h,030h,018h,00Ch,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #60
    Db  000h,000h,000h,000h,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #61
    Db  000h,000h,0E0h,060h,060h,078h,06Ch,066h,066h,066h,066h,07Ch,000h,000h,000h,000h ;   Hex #62
    Db  000h,000h,000h,000h,000h,07Ch,0C6h,0C0h,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #63
    Db  000h,000h,01Ch,00Ch,00Ch,03Ch,06Ch,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #64
    Db  000h,000h,000h,000h,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #65
    Db  000h,000h,01Ch,036h,032h,030h,078h,030h,030h,030h,030h,078h,000h,000h,000h,000h ;   Hex #66
    Db  000h,000h,000h,000h,000h,076h,0CCh,0CCh,0CCh,0CCh,0CCh,07Ch,00Ch,0CCh,078h,000h ;   Hex #67
    Db  000h,000h,0E0h,060h,060h,06Ch,076h,066h,066h,066h,066h,0E6h,000h,000h,000h,000h ;   Hex #68
    Db  000h,000h,018h,018h,000h,038h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #69
    Db  000h,000h,006h,006h,000h,00Eh,006h,006h,006h,006h,006h,006h,066h,066h,03Ch,000h ;   Hex #6A
    Db  000h,000h,0E0h,060h,060h,066h,06Ch,078h,078h,06Ch,066h,0E6h,000h,000h,000h,000h ;   Hex #6B
    Db  000h,000h,038h,018h,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #6C
    Db  000h,000h,000h,000h,000h,0ECh,0FEh,0D6h,0D6h,0D6h,0D6h,0C6h,000h,000h,000h,000h ;   Hex #6D
    Db  000h,000h,000h,000h,000h,0DCh,066h,066h,066h,066h,066h,066h,000h,000h,000h,000h ;   Hex #6E
    Db  000h,000h,000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #6F
    Db  000h,000h,000h,000h,000h,0DCh,066h,066h,066h,066h,066h,07Ch,060h,060h,0F0h,000h ;   Hex #70
    Db  000h,000h,000h,000h,000h,076h,0CCh,0CCh,0CCh,0CCh,0CCh,07Ch,00Ch,00Ch,01Eh,000h ;   Hex #71
    Db  000h,000h,000h,000h,000h,0DCh,076h,066h,060h,060h,060h,0F0h,000h,000h,000h,000h ;   Hex #72
    Db  000h,000h,000h,000h,000h,07Ch,0C6h,060h,038h,00Ch,0C6h,07Ch,000h,000h,000h,000h ;   Hex #73
    Db  000h,000h,010h,030h,030h,0FCh,030h,030h,030h,030h,036h,01Ch,000h,000h,000h,000h ;   Hex #74
    Db  000h,000h,000h,000h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #75
    Db  000h,000h,000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,06Ch,038h,000h,000h,000h,000h ;   Hex #76
    Db  000h,000h,000h,000h,000h,0C6h,0C6h,0D6h,0D6h,0D6h,0FEh,06Ch,000h,000h,000h,000h ;   Hex #77
    Db  000h,000h,000h,000h,000h,0C6h,06Ch,038h,038h,038h,06Ch,0C6h,000h,000h,000h,000h ;   Hex #78
    Db  000h,000h,000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Eh,006h,00Ch,0F8h,000h ;   Hex #79
    Db  000h,000h,000h,000h,000h,0FEh,0CCh,018h,030h,060h,0C6h,0FEh,000h,000h,000h,000h ;   Hex #7A
    Db  000h,000h,00Eh,018h,018h,018h,070h,018h,018h,018h,018h,00Eh,000h,000h,000h,000h ;   Hex #7B
    Db  000h,000h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,000h,000h,000h,000h ;   Hex #7C
    Db  000h,000h,070h,018h,018h,018h,00Eh,018h,018h,018h,018h,070h,000h,000h,000h,000h ;   Hex #7D
    Db  000h,076h,0DCh,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #7E
    Db  000h,000h,000h,000h,010h,038h,06Ch,0C6h,0C6h,0C6h,0FEh,000h,000h,000h,000h,000h ;   Hex #7F
    Db  000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0C0h,0C0h,0C2h,066h,03Ch,018h,070h,000h,000h ;   Hex #80
    Db  000h,000h,0CCh,000h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #81
    Db  000h,00Ch,018h,030h,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #82
    Db  000h,010h,038h,06Ch,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #83
    Db  000h,000h,0CCh,000h,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #84
    Db  000h,060h,030h,018h,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #85
    Db  000h,038h,06Ch,038h,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #86
    Db  000h,000h,000h,000h,000h,07Ch,0C6h,0C0h,0C0h,0C0h,0C6h,07Ch,018h,070h,000h,000h ;   Hex #87
    Db  000h,010h,038h,06Ch,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #88
    Db  000h,000h,0C6h,000h,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #89
    Db  000h,060h,030h,018h,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #8A
    Db  000h,000h,066h,000h,000h,038h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #8B
    Db  000h,018h,03Ch,066h,000h,038h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #8C
    Db  000h,060h,030h,018h,000h,038h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #8D
    Db  000h,0C6h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #8E
    Db  038h,06Ch,038h,010h,038h,06Ch,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #8F
    Db  00Ch,018h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h,000h,000h ;   Hex #90
    Db  000h,000h,000h,000h,000h,0ECh,036h,036h,07Eh,0D8h,0D8h,06Eh,000h,000h,000h,000h ;   Hex #91
    Db  000h,000h,03Eh,06Ch,0CCh,0CCh,0FEh,0CCh,0CCh,0CCh,0CCh,0CEh,000h,000h,000h,000h ;   Hex #92
    Db  000h,010h,038h,06Ch,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #93
    Db  000h,000h,0C6h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #94
    Db  000h,060h,030h,018h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #95
    Db  000h,030h,078h,0CCh,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #96
    Db  000h,060h,030h,018h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #97
    Db  000h,000h,0C6h,000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Eh,006h,00Ch,078h,000h ;   Hex #98
    Db  000h,0C6h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #99
    Db  000h,0C6h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #9A
    Db  000h,018h,018h,07Ch,0C6h,0C0h,0C0h,0C0h,0C6h,07Ch,018h,018h,000h,000h,000h,000h ;   Hex #9B
    Db  000h,038h,06Ch,064h,060h,0F0h,060h,060h,060h,060h,0E6h,0FCh,000h,000h,000h,000h ;   Hex #9C
    Db  000h,000h,066h,066h,03Ch,018h,07Eh,018h,07Eh,018h,018h,018h,000h,000h,000h,000h ;   Hex #9D
    Db  000h,0F8h,0CCh,0CCh,0F8h,0C4h,0CCh,0DEh,0CCh,0CCh,0CCh,0C6h,000h,000h,000h,000h ;   Hex #9E
    Db  000h,00Eh,01Bh,018h,018h,018h,07Eh,018h,018h,018h,0D8h,070h,000h,000h,000h,000h ;   Hex #9F
    Db  000h,018h,030h,060h,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #A0
    Db  000h,00Ch,018h,030h,000h,038h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #A1
    Db  000h,018h,030h,060h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #A2
    Db  000h,018h,030h,060h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #A3
    Db  000h,000h,076h,0DCh,000h,0DCh,066h,066h,066h,066h,066h,066h,000h,000h,000h,000h ;   Hex #A4
    Db  076h,0DCh,000h,0C6h,0E6h,0F6h,0FEh,0DEh,0CEh,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #A5
    Db  000h,000h,03Ch,06Ch,06Ch,03Eh,000h,07Eh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #A6
    Db  000h,000h,038h,06Ch,06Ch,038h,000h,07Ch,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #A7
    Db  000h,000h,030h,030h,000h,030h,030h,060h,0C0h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #A8
    Db  000h,000h,000h,000h,000h,000h,0FEh,0C0h,0C0h,0C0h,0C0h,000h,000h,000h,000h,000h ;   Hex #A9
    Db  000h,000h,000h,000h,000h,000h,0FEh,006h,006h,006h,006h,000h,000h,000h,000h,000h ;   Hex #AA
    Db  000h,060h,0E0h,062h,066h,06Ch,018h,030h,060h,0DCh,086h,00Ch,018h,03Eh,000h,000h ;   Hex #AB
    Db  000h,060h,0E0h,062h,066h,06Ch,018h,030h,066h,0CEh,09Ah,03Fh,006h,006h,000h,000h ;   Hex #AC
    Db  000h,000h,018h,018h,000h,018h,018h,018h,03Ch,03Ch,03Ch,018h,000h,000h,000h,000h ;   Hex #AD
    Db  000h,000h,000h,000h,000h,036h,06Ch,0D8h,06Ch,036h,000h,000h,000h,000h,000h,000h ;   Hex #AE
    Db  000h,000h,000h,000h,000h,0D8h,06Ch,036h,06Ch,0D8h,000h,000h,000h,000h,000h,000h ;   Hex #AF
    Db  011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h ;   Hex #B0
    Db  055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh ;   Hex #B1
    Db  0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h ;   Hex #B2
    Db  018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B3
    Db  018h,018h,018h,018h,018h,018h,018h,0F8h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B4
    Db  018h,018h,018h,018h,018h,0F8h,018h,0F8h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B5
    Db  036h,036h,036h,036h,036h,036h,036h,0F6h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #B6
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #B7
    Db  000h,000h,000h,000h,000h,0F8h,018h,0F8h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B8
    Db  036h,036h,036h,036h,036h,0F6h,006h,0F6h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #B9
    Db  036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #BA
    Db  000h,000h,000h,000h,000h,0FEh,006h,0F6h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #BB
    Db  036h,036h,036h,036h,036h,0F6h,006h,0FEh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #BC
    Db  036h,036h,036h,036h,036h,036h,036h,0FEh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #BD
    Db  018h,018h,018h,018h,018h,0F8h,018h,0F8h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #BE
    Db  000h,000h,000h,000h,000h,000h,000h,0F8h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #BF
    Db  018h,018h,018h,018h,018h,018h,018h,01Fh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #C0
    Db  018h,018h,018h,018h,018h,018h,018h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #C1
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #C2
    Db  018h,018h,018h,018h,018h,018h,018h,01Fh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #C3
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #C4
    Db  018h,018h,018h,018h,018h,018h,018h,0FFh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #C5
    Db  018h,018h,018h,018h,018h,01Fh,018h,01Fh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #C6
    Db  036h,036h,036h,036h,036h,036h,036h,037h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #C7
    Db  036h,036h,036h,036h,036h,037h,030h,03Fh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #C8
    Db  000h,000h,000h,000h,000h,03Fh,030h,037h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #C9
    Db  036h,036h,036h,036h,036h,0F7h,000h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #CA
    Db  000h,000h,000h,000h,000h,0FFh,000h,0F7h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #CB
    Db  036h,036h,036h,036h,036h,037h,030h,037h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #CC
    Db  000h,000h,000h,000h,000h,0FFh,000h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #CD
    Db  036h,036h,036h,036h,036h,0F7h,000h,0F7h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #CE
    Db  018h,018h,018h,018h,018h,0FFh,000h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #CF
    Db  036h,036h,036h,036h,036h,036h,036h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #D0
    Db  000h,000h,000h,000h,000h,0FFh,000h,0FFh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #D1
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #D2
    Db  036h,036h,036h,036h,036h,036h,036h,03Fh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #D3
    Db  018h,018h,018h,018h,018h,01Fh,018h,01Fh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #D4
    Db  000h,000h,000h,000h,000h,01Fh,018h,01Fh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #D5
    Db  000h,000h,000h,000h,000h,000h,000h,03Fh,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #D6
    Db  036h,036h,036h,036h,036h,036h,036h,0FFh,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #D7
    Db  018h,018h,018h,018h,018h,0FFh,018h,0FFh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #D8
    Db  018h,018h,018h,018h,018h,018h,018h,0F8h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #D9
    Db  000h,000h,000h,000h,000h,000h,000h,01Fh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #DA
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DB
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DC
    Db  0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h ;   Hex #DD
    Db  00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh ;   Hex #DE
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #DF
    Db  000h,000h,000h,000h,000h,076h,0DCh,0D8h,0D8h,0D8h,0DCh,076h,000h,000h,000h,000h ;   Hex #E0
    Db  000h,000h,078h,0CCh,0CCh,0CCh,0D8h,0CCh,0C6h,0C6h,0C6h,0CCh,000h,000h,000h,000h ;   Hex #E1
    Db  000h,000h,0FEh,0C6h,0C6h,0C0h,0C0h,0C0h,0C0h,0C0h,0C0h,0C0h,000h,000h,000h,000h ;   Hex #E2
    Db  000h,000h,000h,000h,000h,0FEh,06Ch,06Ch,06Ch,06Ch,06Ch,06Ch,000h,000h,000h,000h ;   Hex #E3
    Db  000h,000h,0FEh,0C6h,060h,030h,018h,018h,030h,060h,0C6h,0FEh,000h,000h,000h,000h ;   Hex #E4
    Db  000h,000h,000h,000h,000h,07Eh,0D8h,0D8h,0D8h,0D8h,0D8h,070h,000h,000h,000h,000h ;   Hex #E5
    Db  000h,000h,000h,000h,000h,066h,066h,066h,066h,066h,066h,07Ch,060h,060h,0C0h,000h ;   Hex #E6
    Db  000h,000h,000h,000h,076h,0DCh,018h,018h,018h,018h,018h,018h,000h,000h,000h,000h ;   Hex #E7
    Db  000h,000h,07Eh,018h,03Ch,066h,066h,066h,066h,03Ch,018h,07Eh,000h,000h,000h,000h ;   Hex #E8
    Db  000h,000h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,06Ch,038h,000h,000h,000h,000h ;   Hex #E9
    Db  000h,000h,038h,06Ch,0C6h,0C6h,0C6h,06Ch,06Ch,06Ch,06Ch,0EEh,000h,000h,000h,000h ;   Hex #EA
    Db  000h,000h,01Eh,030h,018h,00Ch,03Eh,066h,066h,066h,066h,03Ch,000h,000h,000h,000h ;   Hex #EB
    Db  000h,000h,000h,000h,000h,07Eh,0DBh,0DBh,0DBh,07Eh,000h,000h,000h,000h,000h,000h ;   Hex #EC
    Db  000h,000h,000h,003h,006h,07Eh,0DBh,0DBh,0F3h,07Eh,060h,0C0h,000h,000h,000h,000h ;   Hex #ED
    Db  000h,000h,01Ch,030h,060h,060h,07Ch,060h,060h,060h,030h,01Ch,000h,000h,000h,000h ;   Hex #EE
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #EF
    Db  000h,000h,000h,000h,0FEh,000h,000h,0FEh,000h,000h,0FEh,000h,000h,000h,000h,000h ;   Hex #F0
    Db  000h,000h,000h,000h,018h,018h,07Eh,018h,018h,000h,000h,07Eh,000h,000h,000h,000h ;   Hex #F1
    Db  000h,000h,000h,030h,018h,00Ch,006h,00Ch,018h,030h,000h,07Eh,000h,000h,000h,000h ;   Hex #F2
    Db  000h,000h,000h,00Ch,018h,030h,060h,030h,018h,00Ch,000h,07Eh,000h,000h,000h,000h ;   Hex #F3
    Db  000h,000h,00Eh,01Bh,01Bh,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #F4
    Db  018h,018h,018h,018h,018h,018h,018h,018h,018h,0D8h,0D8h,0D8h,070h,000h,000h,000h ;   Hex #F5
    Db  000h,000h,000h,000h,000h,018h,000h,07Eh,000h,018h,000h,000h,000h,000h,000h,000h ;   Hex #F6
    Db  000h,000h,000h,000h,000h,076h,0DCh,000h,076h,0DCh,000h,000h,000h,000h,000h,000h ;   Hex #F7
    Db  000h,038h,06Ch,06Ch,038h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #F8
    Db  000h,000h,000h,000h,000h,000h,000h,018h,018h,000h,000h,000h,000h,000h,000h,000h ;   Hex #F9
    Db  000h,000h,000h,000h,000h,000h,000h,018h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FA
    Db  000h,00Fh,00Ch,00Ch,00Ch,00Ch,00Ch,0ECh,06Ch,06Ch,03Ch,01Ch,000h,000h,000h,000h ;   Hex #FB
    Db  000h,06Ch,036h,036h,036h,036h,036h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FC
    Db  000h,03Ch,066h,00Ch,018h,032h,07Eh,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FD
    Db  000h,000h,000h,000h,07Eh,07Eh,07Eh,07Eh,07Eh,07Eh,07Eh,000h,000h,000h,000h,000h ;   Hex #FE
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FF

=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\ega\437-8x8.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
;***************************************************
;  CHARACTER FONT FILE
;  Source Assembler File
;
;        CODE PAGE: 437 
;  FONT RESOLUTION: 8 x 8 
;
;     DATE CREATED:05-28-1987
;
;
; Output file from: MULTIFON, Version 1A
;
;***************************************************
    Db  000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #0
    Db  07Eh,081h,0A5h,081h,0BDh,099h,081h,07Eh ;   Hex #1
    Db  07Eh,0FFh,0DBh,0FFh,0C3h,0E7h,0FFh,07Eh ;   Hex #2
    Db  06Ch,0FEh,0FEh,0FEh,07Ch,038h,010h,000h ;   Hex #3
    Db  010h,038h,07Ch,0FEh,07Ch,038h,010h,000h ;   Hex #4
    Db  038h,07Ch,038h,0FEh,0FEh,0D6h,010h,038h ;   Hex #5
    Db  010h,038h,07Ch,0FEh,0FEh,07Ch,010h,038h ;   Hex #6
    Db  000h,000h,018h,03Ch,03Ch,018h,000h,000h ;   Hex #7
    Db  0FFh,0FFh,0E7h,0C3h,0C3h,0E7h,0FFh,0FFh ;   Hex #8
    Db  000h,03Ch,066h,042h,042h,066h,03Ch,000h ;   Hex #9
    Db  0FFh,0C3h,099h,0BDh,0BDh,099h,0C3h,0FFh ;   Hex #A
    Db  00Fh,007h,00Fh,07Dh,0CCh,0CCh,0CCh,078h ;   Hex #B
    Db  03Ch,066h,066h,066h,03Ch,018h,07Eh,018h ;   Hex #C
    Db  03Fh,033h,03Fh,030h,030h,070h,0F0h,0E0h ;   Hex #D
    Db  07Fh,063h,07Fh,063h,063h,067h,0E6h,0C0h ;   Hex #E
    Db  018h,0DBh,03Ch,0E7h,0E7h,03Ch,0DBh,018h ;   Hex #F
    Db  080h,0E0h,0F8h,0FEh,0F8h,0E0h,080h,000h ;   Hex #10
    Db  002h,00Eh,03Eh,0FEh,03Eh,00Eh,002h,000h ;   Hex #11
    Db  018h,03Ch,07Eh,018h,018h,07Eh,03Ch,018h ;   Hex #12
    Db  066h,066h,066h,066h,066h,000h,066h,000h ;   Hex #13
    Db  07Fh,0DBh,0DBh,07Bh,01Bh,01Bh,01Bh,000h ;   Hex #14
    Db  03Eh,061h,03Ch,066h,066h,03Ch,086h,07Ch ;   Hex #15
    Db  000h,000h,000h,000h,07Eh,07Eh,07Eh,000h ;   Hex #16
    Db  018h,03Ch,07Eh,018h,07Eh,03Ch,018h,0FFh ;   Hex #17
    Db  018h,03Ch,07Eh,018h,018h,018h,018h,000h ;   Hex #18
    Db  018h,018h,018h,018h,07Eh,03Ch,018h,000h ;   Hex #19
    Db  000h,018h,00Ch,0FEh,00Ch,018h,000h,000h ;   Hex #1A
    Db  000h,030h,060h,0FEh,060h,030h,000h,000h ;   Hex #1B
    Db  000h,000h,0C0h,0C0h,0C0h,0FEh,000h,000h ;   Hex #1C
    Db  000h,024h,066h,0FFh,066h,024h,000h,000h ;   Hex #1D
    Db  000h,018h,03Ch,07Eh,0FFh,0FFh,000h,000h ;   Hex #1E
    Db  000h,0FFh,0FFh,07Eh,03Ch,018h,000h,000h ;   Hex #1F
    Db  000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #20
    Db  018h,03Ch,03Ch,018h,018h,000h,018h,000h ;   Hex #21
    Db  066h,066h,024h,000h,000h,000h,000h,000h ;   Hex #22
    Db  06Ch,06Ch,0FEh,06Ch,0FEh,06Ch,06Ch,000h ;   Hex #23
    Db  018h,03Eh,060h,03Ch,006h,07Ch,018h,000h ;   Hex #24
    Db  000h,0C6h,0CCh,018h,030h,066h,0C6h,000h ;   Hex #25
    Db  038h,06Ch,038h,076h,0DCh,0CCh,076h,000h ;   Hex #26
    Db  018h,018h,030h,000h,000h,000h,000h,000h ;   Hex #27
    Db  00Ch,018h,030h,030h,030h,018h,00Ch,000h ;   Hex #28
    Db  030h,018h,00Ch,00Ch,00Ch,018h,030h,000h ;   Hex #29
    Db  000h,066h,03Ch,0FFh,03Ch,066h,000h,000h ;   Hex #2A
    Db  000h,018h,018h,07Eh,018h,018h,000h,000h ;   Hex #2B
    Db  000h,000h,000h,000h,000h,018h,018h,030h ;   Hex #2C
    Db  000h,000h,000h,07Eh,000h,000h,000h,000h ;   Hex #2D
    Db  000h,000h,000h,000h,000h,018h,018h,000h ;   Hex #2E
    Db  006h,00Ch,018h,030h,060h,0C0h,080h,000h ;   Hex #2F
    Db  038h,06Ch,0C6h,0D6h,0C6h,06Ch,038h,000h ;   Hex #30
    Db  018h,038h,018h,018h,018h,018h,07Eh,000h ;   Hex #31
    Db  07Ch,0C6h,006h,01Ch,030h,066h,0FEh,000h ;   Hex #32
    Db  07Ch,0C6h,006h,03Ch,006h,0C6h,07Ch,000h ;   Hex #33
    Db  01Ch,03Ch,06Ch,0CCh,0FEh,00Ch,01Eh,000h ;   Hex #34
    Db  0FEh,0C0h,0C0h,0FCh,006h,0C6h,07Ch,000h ;   Hex #35
    Db  038h,060h,0C0h,0FCh,0C6h,0C6h,07Ch,000h ;   Hex #36
    Db  0FEh,0C6h,00Ch,018h,030h,030h,030h,000h ;   Hex #37
    Db  07Ch,0C6h,0C6h,07Ch,0C6h,0C6h,07Ch,000h ;   Hex #38
    Db  07Ch,0C6h,0C6h,07Eh,006h,00Ch,078h,000h ;   Hex #39
    Db  000h,018h,018h,000h,000h,018h,018h,000h ;   Hex #3A
    Db  000h,018h,018h,000h,000h,018h,018h,030h ;   Hex #3B
    Db  006h,00Ch,018h,030h,018h,00Ch,006h,000h ;   Hex #3C
    Db  000h,000h,07Eh,000h,000h,07Eh,000h,000h ;   Hex #3D
    Db  060h,030h,018h,00Ch,018h,030h,060h,000h ;   Hex #3E
    Db  07Ch,0C6h,00Ch,018h,018h,000h,018h,000h ;   Hex #3F
    Db  07Ch,0C6h,0DEh,0DEh,0DEh,0C0h,078h,000h ;   Hex #40
    Db  038h,06Ch,0C6h,0FEh,0C6h,0C6h,0C6h,000h ;   Hex #41
    Db  0FCh,066h,066h,07Ch,066h,066h,0FCh,000h ;   Hex #42
    Db  03Ch,066h,0C0h,0C0h,0C0h,066h,03Ch,000h ;   Hex #43
    Db  0F8h,06Ch,066h,066h,066h,06Ch,0F8h,000h ;   Hex #44
    Db  0FEh,062h,068h,078h,068h,062h,0FEh,000h ;   Hex #45
    Db  0FEh,062h,068h,078h,068h,060h,0F0h,000h ;   Hex #46
    Db  03Ch,066h,0C0h,0C0h,0CEh,066h,03Ah,000h ;   Hex #47
    Db  0C6h,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h ;   Hex #48
    Db  03Ch,018h,018h,018h,018h,018h,03Ch,000h ;   Hex #49
    Db  01Eh,00Ch,00Ch,00Ch,0CCh,0CCh,078h,000h ;   Hex #4A
    Db  0E6h,066h,06Ch,078h,06Ch,066h,0E6h,000h ;   Hex #4B
    Db  0F0h,060h,060h,060h,062h,066h,0FEh,000h ;   Hex #4C
    Db  0C6h,0EEh,0FEh,0FEh,0D6h,0C6h,0C6h,000h ;   Hex #4D
    Db  0C6h,0E6h,0F6h,0DEh,0CEh,0C6h,0C6h,000h ;   Hex #4E
    Db  07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #4F
    Db  0FCh,066h,066h,07Ch,060h,060h,0F0h,000h ;   Hex #50
    Db  07Ch,0C6h,0C6h,0C6h,0C6h,0CEh,07Ch,00Eh ;   Hex #51
    Db  0FCh,066h,066h,07Ch,06Ch,066h,0E6h,000h ;   Hex #52
    Db  03Ch,066h,030h,018h,00Ch,066h,03Ch,000h ;   Hex #53
    Db  07Eh,07Eh,05Ah,018h,018h,018h,03Ch,000h ;   Hex #54
    Db  0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #55
    Db  0C6h,0C6h,0C6h,0C6h,0C6h,06Ch,038h,000h ;   Hex #56
    Db  0C6h,0C6h,0C6h,0D6h,0D6h,0FEh,06Ch,000h ;   Hex #57
    Db  0C6h,0C6h,06Ch,038h,06Ch,0C6h,0C6h,000h ;   Hex #58
    Db  066h,066h,066h,03Ch,018h,018h,03Ch,000h ;   Hex #59
    Db  0FEh,0C6h,08Ch,018h,032h,066h,0FEh,000h ;   Hex #5A
    Db  03Ch,030h,030h,030h,030h,030h,03Ch,000h ;   Hex #5B
    Db  0C0h,060h,030h,018h,00Ch,006h,002h,000h ;   Hex #5C
    Db  03Ch,00Ch,00Ch,00Ch,00Ch,00Ch,03Ch,000h ;   Hex #5D
    Db  010h,038h,06Ch,0C6h,000h,000h,000h,000h ;   Hex #5E
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh ;   Hex #5F
    Db  030h,018h,00Ch,000h,000h,000h,000h,000h ;   Hex #60
    Db  000h,000h,078h,00Ch,07Ch,0CCh,076h,000h ;   Hex #61
    Db  0E0h,060h,07Ch,066h,066h,066h,0DCh,000h ;   Hex #62
    Db  000h,000h,07Ch,0C6h,0C0h,0C6h,07Ch,000h ;   Hex #63
    Db  01Ch,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h ;   Hex #64
    Db  000h,000h,07Ch,0C6h,0FEh,0C0h,07Ch,000h ;   Hex #65
    Db  03Ch,066h,060h,0F8h,060h,060h,0F0h,000h ;   Hex #66
    Db  000h,000h,076h,0CCh,0CCh,07Ch,00Ch,0F8h ;   Hex #67
    Db  0E0h,060h,06Ch,076h,066h,066h,0E6h,000h ;   Hex #68
    Db  018h,000h,038h,018h,018h,018h,03Ch,000h ;   Hex #69
    Db  006h,000h,006h,006h,006h,066h,066h,03Ch ;   Hex #6A
    Db  0E0h,060h,066h,06Ch,078h,06Ch,0E6h,000h ;   Hex #6B
    Db  038h,018h,018h,018h,018h,018h,03Ch,000h ;   Hex #6C
    Db  000h,000h,0ECh,0FEh,0D6h,0D6h,0D6h,000h ;   Hex #6D
    Db  000h,000h,0DCh,066h,066h,066h,066h,000h ;   Hex #6E
    Db  000h,000h,07Ch,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #6F
    Db  000h,000h,0DCh,066h,066h,07Ch,060h,0F0h ;   Hex #70
    Db  000h,000h,076h,0CCh,0CCh,07Ch,00Ch,01Eh ;   Hex #71
    Db  000h,000h,0DCh,076h,060h,060h,0F0h,000h ;   Hex #72
    Db  000h,000h,07Eh,0C0h,07Ch,006h,0FCh,000h ;   Hex #73
    Db  030h,030h,0FCh,030h,030h,036h,01Ch,000h ;   Hex #74
    Db  000h,000h,0CCh,0CCh,0CCh,0CCh,076h,000h ;   Hex #75
    Db  000h,000h,0C6h,0C6h,0C6h,06Ch,038h,000h ;   Hex #76
    Db  000h,000h,0C6h,0D6h,0D6h,0FEh,06Ch,000h ;   Hex #77
    Db  000h,000h,0C6h,06Ch,038h,06Ch,0C6h,000h ;   Hex #78
    Db  000h,000h,0C6h,0C6h,0C6h,07Eh,006h,0FCh ;   Hex #79
    Db  000h,000h,07Eh,04Ch,018h,032h,07Eh,000h ;   Hex #7A
    Db  00Eh,018h,018h,070h,018h,018h,00Eh,000h ;   Hex #7B
    Db  018h,018h,018h,018h,018h,018h,018h,000h ;   Hex #7C
    Db  070h,018h,018h,00Eh,018h,018h,070h,000h ;   Hex #7D
    Db  076h,0DCh,000h,000h,000h,000h,000h,000h ;   Hex #7E
    Db  000h,010h,038h,06Ch,0C6h,0C6h,0FEh,000h ;   Hex #7F
    Db  07Ch,0C6h,0C0h,0C0h,0C6h,07Ch,00Ch,078h ;   Hex #80
    Db  0CCh,000h,0CCh,0CCh,0CCh,0CCh,076h,000h ;   Hex #81
    Db  00Ch,018h,07Ch,0C6h,0FEh,0C0h,07Ch,000h ;   Hex #82
    Db  07Ch,082h,078h,00Ch,07Ch,0CCh,076h,000h ;   Hex #83
    Db  0C6h,000h,078h,00Ch,07Ch,0CCh,076h,000h ;   Hex #84
    Db  030h,018h,078h,00Ch,07Ch,0CCh,076h,000h ;   Hex #85
    Db  030h,030h,078h,00Ch,07Ch,0CCh,076h,000h ;   Hex #86
    Db  000h,000h,07Eh,0C0h,0C0h,07Eh,00Ch,038h ;   Hex #87
    Db  07Ch,082h,07Ch,0C6h,0FEh,0C0h,07Ch,000h ;   Hex #88
    Db  0C6h,000h,07Ch,0C6h,0FEh,0C0h,07Ch,000h ;   Hex #89
    Db  030h,018h,07Ch,0C6h,0FEh,0C0h,07Ch,000h ;   Hex #8A
    Db  066h,000h,038h,018h,018h,018h,03Ch,000h ;   Hex #8B
    Db  07Ch,082h,038h,018h,018h,018h,03Ch,000h ;   Hex #8C
    Db  030h,018h,000h,038h,018h,018h,03Ch,000h ;   Hex #8D
    Db  0C6h,038h,06Ch,0C6h,0FEh,0C6h,0C6h,000h ;   Hex #8E
    Db  038h,06Ch,07Ch,0C6h,0FEh,0C6h,0C6h,000h ;   Hex #8F
    Db  018h,030h,0FEh,0C0h,0F8h,0C0h,0FEh,000h ;   Hex #90
    Db  000h,000h,07Eh,018h,07Eh,0D8h,07Eh,000h ;   Hex #91
    Db  03Eh,06Ch,0CCh,0FEh,0CCh,0CCh,0CEh,000h ;   Hex #92
    Db  07Ch,082h,07Ch,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #93
    Db  0C6h,000h,07Ch,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #94
    Db  030h,018h,07Ch,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #95
    Db  078h,084h,000h,0CCh,0CCh,0CCh,076h,000h ;   Hex #96
    Db  060h,030h,0CCh,0CCh,0CCh,0CCh,076h,000h ;   Hex #97
    Db  0C6h,000h,0C6h,0C6h,0C6h,07Eh,006h,0FCh ;   Hex #98
    Db  0C6h,038h,06Ch,0C6h,0C6h,06Ch,038h,000h ;   Hex #99
    Db  0C6h,000h,0C6h,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #9A
    Db  018h,018h,07Eh,0C0h,0C0h,07Eh,018h,018h ;   Hex #9B
    Db  038h,06Ch,064h,0F0h,060h,066h,0FCh,000h ;   Hex #9C
    Db  066h,066h,03Ch,07Eh,018h,07Eh,018h,018h ;   Hex #9D
    Db  0F8h,0CCh,0CCh,0FAh,0C6h,0CFh,0C6h,0C7h ;   Hex #9E
    Db  00Eh,01Bh,018h,03Ch,018h,0D8h,070h,000h ;   Hex #9F
    Db  018h,030h,078h,00Ch,07Ch,0CCh,076h,000h ;   Hex #A0
    Db  00Ch,018h,000h,038h,018h,018h,03Ch,000h ;   Hex #A1
    Db  00Ch,018h,07Ch,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #A2
    Db  018h,030h,0CCh,0CCh,0CCh,0CCh,076h,000h ;   Hex #A3
    Db  076h,0DCh,000h,0DCh,066h,066h,066h,000h ;   Hex #A4
    Db  076h,0DCh,000h,0E6h,0F6h,0DEh,0CEh,000h ;   Hex #A5
    Db  03Ch,06Ch,06Ch,03Eh,000h,07Eh,000h,000h ;   Hex #A6
    Db  038h,06Ch,06Ch,038h,000h,07Ch,000h,000h ;   Hex #A7
    Db  018h,000h,018h,018h,030h,063h,03Eh,000h ;   Hex #A8
    Db  000h,000h,000h,0FEh,0C0h,0C0h,000h,000h ;   Hex #A9
    Db  000h,000h,000h,0FEh,006h,006h,000h,000h ;   Hex #AA
    Db  063h,0E6h,06Ch,07Eh,033h,066h,0CCh,00Fh ;   Hex #AB
    Db  063h,0E6h,06Ch,07Ah,036h,06Ah,0DFh,006h ;   Hex #AC
    Db  018h,000h,018h,018h,03Ch,03Ch,018h,000h ;   Hex #AD
    Db  000h,033h,066h,0CCh,066h,033h,000h,000h ;   Hex #AE
    Db  000h,0CCh,066h,033h,066h,0CCh,000h,000h ;   Hex #AF
    Db  022h,088h,022h,088h,022h,088h,022h,088h ;   Hex #B0
    Db  055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh ;   Hex #B1
    Db  077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh ;   Hex #B2
    Db  018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B3
    Db  018h,018h,018h,018h,0F8h,018h,018h,018h ;   Hex #B4
    Db  018h,018h,0F8h,018h,0F8h,018h,018h,018h ;   Hex #B5
    Db  036h,036h,036h,036h,0F6h,036h,036h,036h ;   Hex #B6
    Db  000h,000h,000h,000h,0FEh,036h,036h,036h ;   Hex #B7
    Db  000h,000h,0F8h,018h,0F8h,018h,018h,018h ;   Hex #B8
    Db  036h,036h,0F6h,006h,0F6h,036h,036h,036h ;   Hex #B9
    Db  036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #BA
    Db  000h,000h,0FEh,006h,0F6h,036h,036h,036h ;   Hex #BB
    Db  036h,036h,0F6h,006h,0FEh,000h,000h,000h ;   Hex #BC
    Db  036h,036h,036h,036h,0FEh,000h,000h,000h ;   Hex #BD
    Db  018h,018h,0F8h,018h,0F8h,000h,000h,000h ;   Hex #BE
    Db  000h,000h,000h,000h,0F8h,018h,018h,018h ;   Hex #BF
    Db  018h,018h,018h,018h,01Fh,000h,000h,000h ;   Hex #C0
    Db  018h,018h,018h,018h,0FFh,000h,000h,000h ;   Hex #C1
    Db  000h,000h,000h,000h,0FFh,018h,018h,018h ;   Hex #C2
    Db  018h,018h,018h,018h,01Fh,018h,018h,018h ;   Hex #C3
    Db  000h,000h,000h,000h,0FFh,000h,000h,000h ;   Hex #C4
    Db  018h,018h,018h,018h,0FFh,018h,018h,018h ;   Hex #C5
    Db  018h,018h,01Fh,018h,01Fh,018h,018h,018h ;   Hex #C6
    Db  036h,036h,036h,036h,037h,036h,036h,036h ;   Hex #C7
    Db  036h,036h,037h,030h,03Fh,000h,000h,000h ;   Hex #C8
    Db  000h,000h,03Fh,030h,037h,036h,036h,036h ;   Hex #C9
    Db  036h,036h,0F7h,000h,0FFh,000h,000h,000h ;   Hex #CA
    Db  000h,000h,0FFh,000h,0F7h,036h,036h,036h ;   Hex #CB
    Db  036h,036h,037h,030h,037h,036h,036h,036h ;   Hex #CC
    Db  000h,000h,0FFh,000h,0FFh,000h,000h,000h ;   Hex #CD
    Db  036h,036h,0F7h,000h,0F7h,036h,036h,036h ;   Hex #CE
    Db  018h,018h,0FFh,000h,0FFh,000h,000h,000h ;   Hex #CF
    Db  036h,036h,036h,036h,0FFh,000h,000h,000h ;   Hex #D0
    Db  000h,000h,0FFh,000h,0FFh,018h,018h,018h ;   Hex #D1
    Db  000h,000h,000h,000h,0FFh,036h,036h,036h ;   Hex #D2
    Db  036h,036h,036h,036h,03Fh,000h,000h,000h ;   Hex #D3
    Db  018h,018h,01Fh,018h,01Fh,000h,000h,000h ;   Hex #D4
    Db  000h,000h,01Fh,018h,01Fh,018h,018h,018h ;   Hex #D5
    Db  000h,000h,000h,000h,03Fh,036h,036h,036h ;   Hex #D6
    Db  036h,036h,036h,036h,0FFh,036h,036h,036h ;   Hex #D7
    Db  018h,018h,0FFh,018h,0FFh,018h,018h,018h ;   Hex #D8
    Db  018h,018h,018h,018h,0F8h,000h,000h,000h ;   Hex #D9
    Db  000h,000h,000h,000h,01Fh,018h,018h,018h ;   Hex #DA
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DB
    Db  000h,000h,000h,000h,0FFh,0FFh,0FFh,0FFh ;   Hex #DC
    Db  0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h ;   Hex #DD
    Db  00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh ;   Hex #DE
    Db  0FFh,0FFh,0FFh,0FFh,000h,000h,000h,000h ;   Hex #DF
    Db  000h,000h,076h,0DCh,0C8h,0DCh,076h,000h ;   Hex #E0
    Db  078h,0CCh,0CCh,0D8h,0CCh,0C6h,0CCh,000h ;   Hex #E1
    Db  0FEh,0C6h,0C0h,0C0h,0C0h,0C0h,0C0h,000h ;   Hex #E2
    Db  000h,000h,0FEh,06Ch,06Ch,06Ch,06Ch,000h ;   Hex #E3
    Db  0FEh,0C6h,060h,030h,060h,0C6h,0FEh,000h ;   Hex #E4
    Db  000h,000h,07Eh,0D8h,0D8h,0D8h,070h,000h ;   Hex #E5
    Db  000h,000h,066h,066h,066h,066h,07Ch,0C0h ;   Hex #E6
    Db  000h,076h,0DCh,018h,018h,018h,018h,000h ;   Hex #E7
    Db  07Eh,018h,03Ch,066h,066h,03Ch,018h,07Eh ;   Hex #E8
    Db  038h,06Ch,0C6h,0FEh,0C6h,06Ch,038h,000h ;   Hex #E9
    Db  038h,06Ch,0C6h,0C6h,06Ch,06Ch,0EEh,000h ;   Hex #EA
    Db  00Eh,018h,00Ch,03Eh,066h,066h,03Ch,000h ;   Hex #EB
    Db  000h,000h,07Eh,0DBh,0DBh,07Eh,000h,000h ;   Hex #EC
    Db  006h,00Ch,07Eh,0DBh,0DBh,07Eh,060h,0C0h ;   Hex #ED
    Db  01Eh,030h,060h,07Eh,060h,030h,01Eh,000h ;   Hex #EE
    Db  000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,000h ;   Hex #EF
    Db  000h,0FEh,000h,0FEh,000h,0FEh,000h,000h ;   Hex #F0
    Db  018h,018h,07Eh,018h,018h,000h,07Eh,000h ;   Hex #F1
    Db  030h,018h,00Ch,018h,030h,000h,07Eh,000h ;   Hex #F2
    Db  00Ch,018h,030h,018h,00Ch,000h,07Eh,000h ;   Hex #F3
    Db  00Eh,01Bh,01Bh,018h,018h,018h,018h,018h ;   Hex #F4
    Db  018h,018h,018h,018h,018h,0D8h,0D8h,070h ;   Hex #F5
    Db  000h,018h,000h,07Eh,000h,018h,000h,000h ;   Hex #F6
    Db  000h,076h,0DCh,000h,076h,0DCh,000h,000h ;   Hex #F7
    Db  038h,06Ch,06Ch,038h,000h,000h,000h,000h ;   Hex #F8
    Db  000h,000h,000h,018h,018h,000h,000h,000h ;   Hex #F9
    Db  000h,000h,000h,018h,000h,000h,000h,000h ;   Hex #FA
    Db  00Fh,00Ch,00Ch,00Ch,0ECh,06Ch,03Ch,01Ch ;   Hex #FB
    Db  06Ch,036h,036h,036h,036h,000h,000h,000h ;   Hex #FC
    Db  078h,00Ch,018h,030h,07Ch,000h,000h,000h ;   Hex #FD
    Db  000h,000h,03Ch,03Ch,03Ch,03Ch,000h,000h ;   Hex #FE
    Db  000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FF


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\ega\437-cpi.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
CODE    SEGMENT BYTE PUBLIC 'CODE'
        ASSUME CS:CODE,DS:CODE

IF1
;        %OUT    EGA.CPI creation file
;        %OUT    .
;        %OUT    CP SRC files:
;        %OUT    .
;        %OUT    .       CODE PAGE:  437
ENDIF

EGA437: DW     LEN_437                  ; SIZE OF ENTRY HEADER
        DW     POST_EGA437,0            ; POINTER TO NEXT HEADER
        DW     1                        ; DEVICE TYPE
        DB     "EGA     "               ; DEVICE SUBTYPE ID
        DW     437                      ; CODE PAGE ID
        DW     3 DUP(0)                 ; RESERVED
        DW     OFFSET DATA437,0         ; POINTER TO FONTS
LEN_437 EQU    ($-EGA437)               ;
                                        ;
DATA437:DW     1                        ; CART/NON-CART
        DW     3                        ; # OF FONTS
        DW     LEN_D437                 ; LENGTH OF DATA
D437:                                   ;
        DB     16,8                     ; CHARACTER BOX SIZE
        DB     0,0                      ; ASPECT RATIO (UNUSED)
        DW     256                      ; NUMBER OF CHARACTERS
                                        ;
        INCLUDE 437-8X16.ASM            ;
                                        ;
        DB     14,8                     ; CHARACTER BOX SIZE
        DB     0,0                      ; ASPECT RATIO (UNUSED)
        DW     256                      ; NUMBER OF CHARACTERS
                                        ;
        INCLUDE 437-8X14.ASM            ;
                                        ;
        DB     8,8                      ; CHARACTER BOX SIZE
        DB     0,0                      ; ASPECT RATIO (UNUSED)
        DW     256                      ; NUMBER OF CHARACTERS
                                        ;
        INCLUDE 437-8X8.ASM             ;
                                        ;
LEN_D437        EQU ($-D437)            ;
                                        ;
POST_EGA437     EQU     $               ;
                                        ;
CODE    ENDS                            ;
        END                             ;


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\write.inc ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;   WRITE ROUTINE FOR DESIGNATE WRITE
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
IF1                                            ;
        ;%out .               WRITE   .INC
ENDIF                                          ;
        PUBLIC  REDUCED_SUPPORT                ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;       WRITE DESIGNATE SUPPORT
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
DESG_WRITE      PROC                    ;
        CMP     CS:DESG_SEMAPHORE,ZERO  ; TEST IF DESIGNATE IS ON...
        JNE     DW_2                    ; PASS ONTO DOS
        CLC                             ;
        RET                             ;
DW_2:   CMP     CS:DESG_SEMAPHORE,ONE   ; CHECK IF PROPER DESIGNATE
        JE      DW_4                    ;
        OR      BUF.STATUS,TEN          ; IF NOT, THEN DEVICE ERROR
        STC                             ;
        RET                             ;
DW_4:   CALL    WRITE                   ;
        RET                             ;
DESG_WRITE   ENDP                       ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
REDUCED_SUPPORT EQU     $               ; THIS IS A MARKER FOR REDUCED CPS
                                        ; SUPPORT WITH 0 DESGINATES (CGA,MONO)
WRITE   PROC                            ;
        PUSH    DS                      ;
                                        ;
        PUSH    CS                      ;
        POP     DS                      ;
                                        ;
        PUSH    SI                    ;S;
        CLI                           ;S;
        MOV     SI,SP                 ;S;
        MOV     OLD_STACK_O,SI        ;S;
        MOV     SI,SS                 ;S;
        MOV     OLD_STACK_S,SI        ;S;
        MOV     AX,OFFSET STACK_START ;S;
        MOV     SI,CS                 ;S;
        MOV     SS,SI                 ;S;
        MOV     SP,AX                 ;S;
        STI                           ;S;
                                        ;
        LES     DI,DWORD PTR BUF.RH_PTRO; RESTORE ES:DI AS REQUEST HEADER PTR
        LEA     SI,FTABLE               ; GET BASE ADDRESS OF PARSER TABLE
                                        ;
        MOV     DS:[SI].FLAG,0          ; NO RESTART
        MOV     AX,RH.RH3_CNT           ;
        MOV     DS:[SI].BUFFER_LEN,AX   ; LENGTH OF REQUEST PACKET
                                        ;
        PUSH    SI                      ;
        LEA     SI,[SI].BUFFER_ADDR     ; PACKET ADDRESS
        MOV     AX,RH.RH3_DTAO          ;
        MOV     DS:[SI],AX              ;
        INC     SI                      ;
        INC     SI                      ;
        MOV     AX,RH.RH3_DTAS          ;
        MOV     DS:[SI],AX              ;
        POP     SI                      ;
                                        ;
        CALL    FONT_PARSER             ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;       FONT PARSER HAS BEEN CALLED, NOW CHECK ALL OF THE
;       APPROPRIATE TABLES FOR DATA INFORMATION, ERROR
;       CONDITIONS, etc....
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        LEA     SI,FTABLE               ; GET BASE ADDRESS OF PARSER TABLE
        MOV     CX,[SI].NUM_FTBLK       ; CX = NUMBER OF PARSING TABLES
        LEA     SI,FTB1                 ; THEN SET SI = FIRST PARSING TABLE
                                        ;
W_1:    MOV     AX,DS:[SI].FTB_STATUS   ;
        CMP     AX,0FFF0H               ; CHECK THE PARSER STATUS
        JNB     W_3                     ;
                                        ;
        OR      BUF.STATUS,FAIL         ; IF THE PARSER FAILED ON THE DATA
        MOV     RH.RHC_STA,AX           ; FILE, THEN SET FLAG AND...
        CALL    HANDLE_WRITE_ERROR      ;
        jmp     short W_7               ; ERROR HAS BEEN FOUND..DON'T CONTINUE
                                        ;
W_3:    CMP     AX,FSTAT_FONT           ;
        JNE     W_6                     ;
                                        ;
        MOV     AX,DS:[SI].FTB_DLEN     ;
        CALL    HANDLE_DATA_WRITE       ;
                                        ;
W_6:    ADD     SI,TYPE FTBLK           ; ADVANCE SI POINTER TO NEXT TABLE
        LOOP    W_1                     ; CHECK OUT ALL PARSING TABLES
                                        ;
W_7:    CLI                           ;S;
        MOV     SI,OLD_STACK_S        ;S;
        MOV     AX,OLD_STACK_O        ;S;
        MOV     SS,SI                 ;S;
        MOV     SP,AX                 ;S;
        STI                           ;S;
        POP     SI                    ;S;
        POP     DS                      ;
        STC                             ; INDICATE NOT TO PASS ON DATA
        RET                             ;
WRITE   ENDP                            ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;       THIS IS USED TO SET THE CPS DRIVER IN THE CASE OF A
;       DESIGNATE ERROR.  IT WILL RESET THE DESIGNATED CP's
;       TO INVALID, AND IF THE ACTIVE_CP WAS A DESIGNATED CP,
;       THEN IT TOO BECOMES INVALID.
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
HANDLE_WRITE_ERROR      PROC            ;
        PUSH    DS                      ;
        PUSH    AX                      ;
        PUSH    CX                      ;
        PUSH    SI                      ;
                                        ;
        MOV     AX,-1                   ; ...SET DESGINATE LIST TO (-1)'S
        MOV     CX,CPD_REQ_DESG         ; GET NUMBER AND
        MOV     SI,2                    ; +2
HWE_3:  CMP     CPD_REQ_DESG[SI],AX     ; CHECK IF REQUESTED PREP WAS VALID
        JE      HWE_4                   ; IF REQUESTED WAS VALID, THEN THE ERROR
        MOV     CPD_DESG_N[SI],AX       ; SETS ACTUAL PREP LIST ENTRY TO INVALID
HWE_4:  INC     SI                      ;
        INC     SI                      ;
        LOOP    HWE_3                   ; REPEAT FOR #DESIGNATES
                                        ;
        MOV     CX,CPD_ACTIVE           ;
        CALL    FIND_CP                 ; CHECK IF ACTIVE_CP=STILL VALID
        JNC     HWE_2                   ;
        MOV     CX,-1                   ;
        MOV     CPD_ACTIVE,CX           ;
                                        ;
HWE_2:  POP     SI                      ;
        POP     CX                      ;
        POP     AX                      ;
        POP     DS                      ;
        RET                             ;
HANDLE_WRITE_ERROR      ENDP            ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;       THIS SUBROUTINE TAKES THE DATA INFORMATION ISOLATED
;       BY THE FONT PARSER AND MOVES INTO THE INTERNAL FONT
;       FONT BUFFERS.  IT COPIES THE DATA BASED ON THE SIZE
;       OF THE INTERNAL FONTS & THE REQUIRED FONT SIZES.
;
;
;       INPUT:
;               AX = LENGTH OF DATA
;               CX = TABLE # TO PARSE
;               DS:SI = POINTER TO 'FTBLK'
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
NUM_DATA_FONTS  DW      ?               ;
TABLE_INDEX     DW      ?               ;
LEN_DATA        DW      ?               ;
INDEX_WRITE_PNTER DW    ?               ;
                                        ;
HANDLE_DATA_WRITE       PROC            ;
        PUSH    AX                      ;
        PUSH    BX                      ;
        PUSH    CX                      ;
        PUSH    SI                      ;
        PUSH    DI                      ;
        PUSH    DS                      ;
        PUSH    ES                      ;
                                        ;
        PUSH    CX                      ;
        MOV     CX,DS:[SI].FTB_FONTS    ; READ IN #FONTS FROM DATA FILE
        MOV     CS:NUM_DATA_FONTS,CX    ;
        POP     CX                      ;
                                        ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;       ROUTINE TO FIND TABLE_INDEX FOR DATA WRITE'S
;       THIS WAS ADDED TO ACCOUNT FOR A REPLACEMENT
;       TECHNIQUE APPROACH.....(Sept 3/86)
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        PUSH    AX                      ;
        PUSH    CX                      ;
        PUSH    ES                      ;
                                        ;
        PUSH    CS                      ;
        POP     ES                      ;
        MOV     AX,DS:[SI].FTB_CP       ; GET THE CODE PAGE OF THIS FONT BLOCK
        MOV     CX,CPD_DESG_N           ; GET THE NUMBER OF CP's TO CHECK
        MOV     DI,TWO                  ;
BBB_0:  CMP     AX,CPD_DESG_N[DI]       ; LOOKING FOR A MATCHED CODE PAGE
        JE      BBB_1                   ;
        INC     DI                      ;
        INC     DI                      ;
        LOOP    BBB_0                   ;
                                        ;
;;;;;;INVALID???;;;;;;;;;;;;;;;;;;;;;;;;;
                                        ;
BBB_1:  MOV     DI,CPD_DESG_N           ;
        SUB     DI,CX                   ;
        MOV     CS:TABLE_INDEX,DI       ;
BBB_2:  POP     ES                      ;
        POP     CX                      ;
        POP     AX                      ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
        PUSH    SI                      ;
        LEA     SI,FTABLE               ; GET BASE ADDRESS OF PARSER TABLE
        SHL     DI,1                    ;
        SHL     DI,1                    ; MULTIPLY INDEX BY FOUR..SEG:OFFSET
        CALL    GET_WRITE_PNTR          ; GET LOCATION OF 1ST FONT_WRITE PNTER
        ADD     DI,SI                   ; DI NOW IS THE POINTER TO WRITE_START
        POP     SI                      ;
                                        ;
        MOV     CS:INDEX_WRITE_PNTER,DI ; SAVE ADDRESS OF INDEX WRITE PNTER
                                        ;
        MOV     ES,CS:[DI+2]            ; SET ES : DI WITH WRITE POINTER!
        MOV     DI,CS:[DI]              ;
                                        ;
        MOV     CX,DS:[SI].FTB_DAHI     ; GET SEGMENT OF DATA
        MOV     SI,DS:[SI].FTB_DALO     ; GET OFFSET OF DATA
        MOV     DS,CX                   ;
                                        ; <<SETUP DESTINATION INFO>>
        MOV     CX,AX                   ; SAVE LENGTH OF DATA TO COPY
        MOV     CS:LEN_DATA,CX          ; SAVE THIS VALUE
        AND     CX,CX                   ; TEST LENGTH OF DATA
        JNZ     TEMP_0                  ;
        JUMP    HDW_8                   ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;       NOW  DS : SI  POINTS TO SOURCE DATA INFORMATION,
;            ES : DI  POINTS TO THE DESTINATION BUFFER!
;            CX = NUMBER OF INFORMATION BYTES AVAILABLE
;       THE DATA MUST BE CHECKED FOR THE FONT RESOLUTIONS
;       AS THEY ARE TO FIT INTO THE INTERNAL BUFFERS.
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
TEMP_0: PUSH    AX                      ;
        PUSH    BX                      ;
        PUSH    CX                      ;
        PUSH    SI                      ;
        PUSH    DI                      ;
                                        ;
        LEA     BX,CPD_FONT_DATA        ; TEST IF THERE IS OUTSTANDING DATA
        ADD     BX,CS:TABLE_INDEX       ; FOR INFORMATION TO COPY or SKIP OVER.
        ADD     BX,CS:TABLE_INDEX       ; (ACCOUNT FOR WORD VALUE)
        MOV     AX,CS:[BX]              ;
        OR      AX,AX                   ;
        JE      HDW_00                  ; IF NOTHING TO CONSIDER, THEN MOVE ON
        TEST    AX,8000H ;;;;SKIP/COPY;;;;; TEST IF OUTSTANDING DATA TO COPY/SKIP
        JNZ     HDW_P0                  ;
        MOV     CX,AX                   ; SET VALUE IN CX....
        MOV     AX,CS:NUM_DATA_FONTS    ;
        PUSH    AX                      ;
        jmp     short HDW_3AA                 ;
HDW_P0: AND     AX,7FFFH                ; STRIP OFF FIRST BIT...
        MOV     CX,AX                   ;
        MOV     AX,CS:NUM_DATA_FONTS    ;
        PUSH    AX                      ;
        jmp     short HDW_5AA                 ;
                                        ;
HDW_00: MOV     CX,CS:NUM_DATA_FONTS    ;
HDW_0:  CMP     CS:LEN_DATA,0           ; TEST IF THERE IS ANY DATA LEFT?
        JNE     HDW_0A                  ;
        jmp     HDW_6                   ; IF 0 LEFT...THEN END...
                                        ;
HDW_0A: MOV     AL,[SI]                 ; GET #ROWS FROM DATA
        PUSH    CX                      ; SAVE COUNT
        MOV     CX,NUM_FONT_PRIORITY    ;
        LEA     BX,FONT_PRIORITY        ; SET DI TO START OF TABLE
HDW_1:  CMP     AL,CS:[BX]              ;
        JE      HDW_3                   ; IF EQUAL, THEN ALREADY IN TABLE
        INC     BX                      ; OTHERWISE, TAKE THIS MODES FONT RES
        LOOP    HDW_1                   ; AND COMPARE AGAINST NEXT PRIOR.VALUE
        jmp     short HDW_5                   ; IF NO MATCH, THEN IGNORE THIS FONT!!!
                                        ;
HDW_3:  XOR     AH,AH                   ; FONT SIZE NEEDED...GET IT!
        MOV     CX,[SI+4]               ; GET THE #CHARACTERS IN TABLE
        PUSH    DX                      ;
        MUL     CX                      ;
        POP     DX                      ;
        ADD     AX,SIX                  ; ACCOUNT FOR DATA HEADER
        MOV     CX,AX                   ; SET COUNT INTO CX....
                                        ;
HDW_3AA:CMP     CX,CS:LEN_DATA          ; TEST IF SUPPLIED DATA>=NEEDED
        JBE     HDW_3A                  ;
        SUB     CX,CS:LEN_DATA          ; IF NOT ENOUGH DATA HERE, THEN FORWARD
        MOV     AX,CX                   ; VALUE TO NEXT DATA CALL.
        CALL    SET_CPD_FONT_DATA       ;
        MOV     CX,CS:LEN_DATA          ;
        jmp     short HDW_3B                  ;
                                        ;
HDW_3A: XOR     AX,AX                   ;
        CALL    SET_CPD_FONT_DATA       ;
HDW_3B: SUB     CS:LEN_DATA,CX          ;
        CLD                             ;
        REP     MOVSB                   ; MOVE THAT RESOLUTION IN...
                                        ;
HDW_4:  POP     CX                      ; RESTORE #FONTS IN DATA
        LOOP    HDW_0                   ;
        jmp     short HDW_6                   ;
                                        ;
HDW_5:  XOR     AH,AH                   ; FONT SIZE NEEDED...GET IT!
        MOV     CX,[SI+4]               ; GET THE #CHARACTERS IN TABLE
        PUSH    DX                      ;
        MUL     CX                      ;
        POP     DX                      ;
        ADD     AX,SIX                  ; ACCOUNT FOR DATA HEADER
        MOV     CX,AX                   ; PUT IN CX FOR NOW
                                        ;
HDW_5AA:CMP     CX,CS:LEN_DATA          ; TEST IF SUPPLIED DATA>=NEEDED
        JBE     HDW_5A                  ;
        SUB     CX,CS:LEN_DATA          ; IF NOT ENOUGH DATA HERE, THEN FORWARD
        MOV     AX,CX                   ; VALUE TO NEXT DATA CALL.
        OR      AX,8000H                ; SET TO SKIP NEXT DATA....
        CALL    SET_CPD_FONT_DATA       ;
        MOV     CX,CS:LEN_DATA          ;
        jmp     short HDW_5B                  ;
                                        ;
HDW_5A: XOR     AX,AX                   ;
        CALL    SET_CPD_FONT_DATA       ;
HDW_5B: SUB     CS:LEN_DATA,CX          ;
        ADD     SI,CX                   ; ADVANCE SOURCE POINTER OVER THIS FONT
        JUMP    HDW_4                   ;
                                        ;
HDW_6:  MOV     SI,CS:INDEX_WRITE_PNTER ;
        MOV     CS:[SI],DI              ;
        MOV     CS:[SI+2],ES            ;
                                        ;
        POP     DI                      ;
        POP     SI                      ;
        POP     CX                      ;
        POP     BX                      ;
        POP     AX                      ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
HDW_8:  POP     ES                      ;
        POP     DS                      ;
        POP     DI                      ;
        POP     SI                      ;
        POP     CX                      ;
        POP     BX                      ;
        POP     AX                      ;
        RET                             ;
HANDLE_DATA_WRITE       ENDP            ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;
;       SET_CPD_FONT_DATA
;
;       THIS ROUTINE IS USED TO SET THE COPY/SKIP VALUE
;       CONTAINED IN 'AX'.
;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
SET_CPD_FONT_DATA       PROC            ;
        PUSH    SI                      ;
        MOV     SI,CS:TABLE_INDEX       ;
        ADD     SI,SI                   ;
        MOV     CS:CPD_FONT_DATA.[SI],AX;
        POP     SI                      ;
        RET                             ;
SET_CPD_FONT_DATA       ENDP            ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\ega\850-8x14.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
;***************************************************
;  CHARACTER FONT FILE
;  Source Assembler File
;
;        CODE PAGE: 850 
;  FONT RESOLUTION: 8 x 14 
;
;     DATE CREATED:05-28-1987
;
;
; Output file from: MULTIFON, Version 1A
;
;***************************************************
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #0
    Db  000h,000h,000h,07Eh,081h,0A5h,081h,081h,0BDh,099h,081h,07Eh,000h,000h ;   Hex #1
    Db  000h,000h,000h,07Eh,0FFh,0DBh,0FFh,0FFh,0C3h,0E7h,0FFh,07Eh,000h,000h ;   Hex #2
    Db  000h,000h,000h,000h,06Ch,0FEh,0FEh,0FEh,0FEh,07Ch,038h,010h,000h,000h ;   Hex #3
    Db  000h,000h,000h,000h,010h,038h,07Ch,0FEh,07Ch,038h,010h,000h,000h,000h ;   Hex #4
    Db  000h,000h,000h,018h,03Ch,03Ch,0E7h,0E7h,0E7h,018h,018h,03Ch,000h,000h ;   Hex #5
    Db  000h,000h,000h,018h,03Ch,07Eh,0FFh,0FFh,07Eh,018h,018h,03Ch,000h,000h ;   Hex #6
    Db  000h,000h,000h,000h,000h,000h,018h,03Ch,03Ch,018h,000h,000h,000h,000h ;   Hex #7
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0E7h,0C3h,0C3h,0E7h,0FFh,0FFh,0FFh,0FFh ;   Hex #8
    Db  000h,000h,000h,000h,000h,03Ch,066h,042h,042h,066h,03Ch,000h,000h,000h ;   Hex #9
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0C3h,099h,0BDh,0BDh,099h,0C3h,0FFh,0FFh,0FFh ;   Hex #A
    Db  000h,000h,000h,01Eh,00Eh,01Ah,032h,078h,0CCh,0CCh,0CCh,078h,000h,000h ;   Hex #B
    Db  000h,000h,000h,03Ch,066h,066h,066h,03Ch,018h,07Eh,018h,018h,000h,000h ;   Hex #C
    Db  000h,000h,000h,03Fh,033h,03Fh,030h,030h,030h,070h,0F0h,0E0h,000h,000h ;   Hex #D
    Db  000h,000h,000h,07Fh,063h,07Fh,063h,063h,063h,067h,0E7h,0E6h,0C0h,000h ;   Hex #E
    Db  000h,000h,000h,018h,018h,0DBh,03Ch,0E7h,03Ch,0DBh,018h,018h,000h,000h ;   Hex #F
    Db  000h,000h,000h,080h,0C0h,0E0h,0F8h,0FEh,0F8h,0E0h,0C0h,080h,000h,000h ;   Hex #10
    Db  000h,000h,000h,002h,006h,00Eh,03Eh,0FEh,03Eh,00Eh,006h,002h,000h,000h ;   Hex #11
    Db  000h,000h,000h,018h,03Ch,07Eh,018h,018h,018h,07Eh,03Ch,018h,000h,000h ;   Hex #12
    Db  000h,000h,000h,066h,066h,066h,066h,066h,066h,000h,066h,066h,000h,000h ;   Hex #13
    Db  000h,000h,000h,07Fh,0DBh,0DBh,0DBh,07Bh,01Bh,01Bh,01Bh,01Bh,000h,000h ;   Hex #14
    Db  000h,000h,07Ch,0C6h,060h,038h,06Ch,0C6h,0C6h,06Ch,038h,00Ch,0C6h,07Ch ;   Hex #15
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,0FEh,0FEh,0FEh,000h,000h ;   Hex #16
    Db  000h,000h,000h,018h,03Ch,07Eh,018h,018h,018h,07Eh,03Ch,018h,07Eh,000h ;   Hex #17
    Db  000h,000h,000h,018h,03Ch,07Eh,018h,018h,018h,018h,018h,018h,000h,000h ;   Hex #18
    Db  000h,000h,000h,018h,018h,018h,018h,018h,018h,07Eh,03Ch,018h,000h,000h ;   Hex #19
    Db  000h,000h,000h,000h,000h,018h,00Ch,0FEh,00Ch,018h,000h,000h,000h,000h ;   Hex #1A
    Db  000h,000h,000h,000h,000h,030h,060h,0FEh,060h,030h,000h,000h,000h,000h ;   Hex #1B
    Db  000h,000h,000h,000h,000h,000h,0C0h,0C0h,0C0h,0FEh,000h,000h,000h,000h ;   Hex #1C
    Db  000h,000h,000h,000h,000h,028h,06Ch,0FEh,06Ch,028h,000h,000h,000h,000h ;   Hex #1D
    Db  000h,000h,000h,000h,010h,038h,038h,07Ch,07Ch,0FEh,0FEh,000h,000h,000h ;   Hex #1E
    Db  000h,000h,000h,000h,0FEh,0FEh,07Ch,07Ch,038h,038h,010h,000h,000h,000h ;   Hex #1F
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #20
    Db  000h,000h,000h,018h,03Ch,03Ch,03Ch,018h,018h,000h,018h,018h,000h,000h ;   Hex #21
    Db  000h,066h,066h,066h,024h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #22
    Db  000h,000h,000h,06Ch,06Ch,0FEh,06Ch,06Ch,06Ch,0FEh,06Ch,06Ch,000h,000h ;   Hex #23
    Db  000h,018h,018h,07Ch,0C6h,0C2h,0C0h,07Ch,006h,086h,0C6h,07Ch,018h,018h ;   Hex #24
    Db  000h,000h,000h,000h,000h,0C2h,0C6h,00Ch,018h,030h,066h,0C6h,000h,000h ;   Hex #25
    Db  000h,000h,000h,038h,06Ch,06Ch,038h,076h,0DCh,0CCh,0CCh,076h,000h,000h ;   Hex #26
    Db  000h,018h,018h,018h,030h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #27
    Db  000h,000h,000h,00Ch,018h,030h,030h,030h,030h,030h,018h,00Ch,000h,000h ;   Hex #28
    Db  000h,000h,000h,030h,018h,00Ch,00Ch,00Ch,00Ch,00Ch,018h,030h,000h,000h ;   Hex #29
    Db  000h,000h,000h,000h,000h,066h,03Ch,0FFh,03Ch,066h,000h,000h,000h,000h ;   Hex #2A
    Db  000h,000h,000h,000h,000h,018h,018h,07Eh,018h,018h,000h,000h,000h,000h ;   Hex #2B
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,018h,018h,030h,000h ;   Hex #2C
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,000h,000h,000h,000h,000h,000h ;   Hex #2D
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,018h,000h,000h ;   Hex #2E
    Db  000h,000h,000h,002h,006h,00Ch,018h,030h,060h,0C0h,080h,000h,000h,000h ;   Hex #2F
    Db  000h,000h,000h,038h,06Ch,0C6h,0C6h,0D6h,0C6h,0C6h,06Ch,038h,000h,000h ;   Hex #30
    Db  000h,000h,000h,018h,038h,078h,018h,018h,018h,018h,018h,07Eh,000h,000h ;   Hex #31
    Db  000h,000h,000h,07Ch,0C6h,006h,00Ch,018h,030h,060h,0C6h,0FEh,000h,000h ;   Hex #32
    Db  000h,000h,000h,07Ch,0C6h,006h,006h,03Ch,006h,006h,0C6h,07Ch,000h,000h ;   Hex #33
    Db  000h,000h,000h,00Ch,01Ch,03Ch,06Ch,0CCh,0FEh,00Ch,00Ch,01Eh,000h,000h ;   Hex #34
    Db  000h,000h,000h,0FEh,0C0h,0C0h,0C0h,0FCh,006h,006h,0C6h,07Ch,000h,000h ;   Hex #35
    Db  000h,000h,000h,038h,060h,0C0h,0C0h,0FCh,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #36
    Db  000h,000h,000h,0FEh,0C6h,006h,00Ch,018h,030h,030h,030h,030h,000h,000h ;   Hex #37
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0C6h,07Ch,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #38
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0C6h,07Eh,006h,006h,00Ch,078h,000h,000h ;   Hex #39
    Db  000h,000h,000h,000h,018h,018h,000h,000h,000h,018h,018h,000h,000h,000h ;   Hex #3A
    Db  000h,000h,000h,000h,018h,018h,000h,000h,000h,018h,018h,030h,000h,000h ;   Hex #3B
    Db  000h,000h,000h,00Ch,018h,030h,060h,0C0h,060h,030h,018h,00Ch,000h,000h ;   Hex #3C
    Db  000h,000h,000h,000h,000h,000h,07Eh,000h,000h,07Eh,000h,000h,000h,000h ;   Hex #3D
    Db  000h,000h,000h,060h,030h,018h,00Ch,006h,00Ch,018h,030h,060h,000h,000h ;   Hex #3E
    Db  000h,000h,000h,07Ch,0C6h,0C6h,00Ch,018h,018h,000h,018h,018h,000h,000h ;   Hex #3F
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0DEh,0DEh,0DEh,0DCh,0C0h,07Ch,000h,000h ;   Hex #40
    Db  000h,000h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #41
    Db  000h,000h,000h,0FCh,066h,066h,066h,07Ch,066h,066h,066h,0FCh,000h,000h ;   Hex #42
    Db  000h,000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0C0h,0C2h,066h,03Ch,000h,000h ;   Hex #43
    Db  000h,000h,000h,0F8h,06Ch,066h,066h,066h,066h,066h,06Ch,0F8h,000h,000h ;   Hex #44
    Db  000h,000h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h ;   Hex #45
    Db  000h,000h,000h,0FEh,066h,062h,068h,078h,068h,060h,060h,0F0h,000h,000h ;   Hex #46
    Db  000h,000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0DEh,0C6h,066h,03Ah,000h,000h ;   Hex #47
    Db  000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,000h,000h ;   Hex #48
    Db  000h,000h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #49
    Db  000h,000h,000h,01Eh,00Ch,00Ch,00Ch,00Ch,00Ch,0CCh,0CCh,078h,000h,000h ;   Hex #4A
    Db  000h,000h,000h,0E6h,066h,06Ch,06Ch,078h,06Ch,06Ch,066h,0E6h,000h,000h ;   Hex #4B
    Db  000h,000h,000h,0F0h,060h,060h,060h,060h,060h,062h,066h,0FEh,000h,000h ;   Hex #4C
    Db  000h,000h,000h,0C6h,0EEh,0FEh,0D6h,0C6h,0C6h,0C6h,0C6h,0C6h,000h,000h ;   Hex #4D
    Db  000h,000h,000h,0C6h,0E6h,0F6h,0FEh,0DEh,0CEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #4E
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #4F
    Db  000h,000h,000h,0FCh,066h,066h,066h,07Ch,060h,060h,060h,0F0h,000h,000h ;   Hex #50
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0D6h,0DEh,07Ch,00Eh,000h ;   Hex #51
    Db  000h,000h,000h,0FCh,066h,066h,066h,07Ch,06Ch,066h,066h,0E6h,000h,000h ;   Hex #52
    Db  000h,000h,000h,07Ch,0C6h,0C6h,060h,038h,00Ch,0C6h,0C6h,07Ch,000h,000h ;   Hex #53
    Db  000h,000h,000h,07Eh,07Eh,05Ah,018h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #54
    Db  000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #55
    Db  000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,06Ch,038h,010h,000h,000h ;   Hex #56
    Db  000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0D6h,0D6h,0FEh,06Ch,06Ch,000h,000h ;   Hex #57
    Db  000h,000h,000h,0C6h,0C6h,0C6h,07Ch,038h,07Ch,0C6h,0C6h,0C6h,000h,000h ;   Hex #58
    Db  000h,000h,000h,066h,066h,066h,066h,03Ch,018h,018h,018h,03Ch,000h,000h ;   Hex #59
    Db  000h,000h,000h,0FEh,0C6h,08Ch,018h,030h,060h,0C2h,0C6h,0FEh,000h,000h ;   Hex #5A
    Db  000h,000h,000h,03Ch,030h,030h,030h,030h,030h,030h,030h,03Ch,000h,000h ;   Hex #5B
    Db  000h,000h,000h,080h,0C0h,0E0h,070h,038h,01Ch,00Eh,006h,002h,000h,000h ;   Hex #5C
    Db  000h,000h,000h,03Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,03Ch,000h,000h ;   Hex #5D
    Db  010h,038h,06Ch,0C6h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #5E
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,0FFh ;   Hex #5F
    Db  000h,030h,018h,00Ch,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #60
    Db  000h,000h,000h,000h,000h,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #61
    Db  000h,000h,000h,0E0h,060h,060h,078h,06Ch,066h,066h,066h,07Ch,000h,000h ;   Hex #62
    Db  000h,000h,000h,000h,000h,000h,07Ch,0C6h,0C0h,0C0h,0C6h,07Ch,000h,000h ;   Hex #63
    Db  000h,000h,000h,01Ch,00Ch,00Ch,03Ch,06Ch,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #64
    Db  000h,000h,000h,000h,000h,000h,07Ch,0C6h,0FEh,0C0h,0C6h,07Ch,000h,000h ;   Hex #65
    Db  000h,000h,000h,01Ch,036h,032h,030h,07Ch,030h,030h,030h,078h,000h,000h ;   Hex #66
    Db  000h,000h,000h,000h,000h,000h,076h,0CCh,0CCh,0CCh,07Ch,00Ch,0CCh,078h ;   Hex #67
    Db  000h,000h,000h,0E0h,060h,060h,06Ch,076h,066h,066h,066h,0E6h,000h,000h ;   Hex #68
    Db  000h,000h,000h,018h,018h,000h,038h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #69
    Db  000h,000h,000h,006h,006h,000h,00Eh,006h,006h,006h,006h,066h,066h,03Ch ;   Hex #6A
    Db  000h,000h,000h,0E0h,060h,060h,066h,06Ch,078h,06Ch,066h,0E6h,000h,000h ;   Hex #6B
    Db  000h,000h,000h,038h,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #6C
    Db  000h,000h,000h,000h,000h,000h,0ECh,0FEh,0D6h,0D6h,0D6h,0D6h,000h,000h ;   Hex #6D
    Db  000h,000h,000h,000h,000h,000h,0DCh,066h,066h,066h,066h,066h,000h,000h ;   Hex #6E
    Db  000h,000h,000h,000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #6F
    Db  000h,000h,000h,000h,000h,000h,0DCh,066h,066h,066h,07Ch,060h,060h,0F0h ;   Hex #70
    Db  000h,000h,000h,000h,000h,000h,076h,0CCh,0CCh,0CCh,07Ch,00Ch,00Ch,01Eh ;   Hex #71
    Db  000h,000h,000h,000h,000h,000h,0DCh,076h,066h,060h,060h,0F0h,000h,000h ;   Hex #72
    Db  000h,000h,000h,000h,000h,000h,07Ch,0C6h,070h,01Ch,0C6h,07Ch,000h,000h ;   Hex #73
    Db  000h,000h,000h,010h,030h,030h,0FCh,030h,030h,030h,036h,01Ch,000h,000h ;   Hex #74
    Db  000h,000h,000h,000h,000h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #75
    Db  000h,000h,000h,000h,000h,000h,0C6h,0C6h,0C6h,06Ch,038h,010h,000h,000h ;   Hex #76
    Db  000h,000h,000h,000h,000h,000h,0C6h,0C6h,0D6h,0D6h,0FEh,06Ch,000h,000h ;   Hex #77
    Db  000h,000h,000h,000h,000h,000h,0C6h,06Ch,038h,038h,06Ch,0C6h,000h,000h ;   Hex #78
    Db  000h,000h,000h,000h,000h,000h,0C6h,0C6h,0C6h,0C6h,07Eh,006h,00Ch,078h ;   Hex #79
    Db  000h,000h,000h,000h,000h,000h,0FEh,0CCh,018h,030h,066h,0FEh,000h,000h ;   Hex #7A
    Db  000h,000h,000h,00Eh,018h,018h,018h,070h,018h,018h,018h,00Eh,000h,000h ;   Hex #7B
    Db  000h,000h,000h,018h,018h,018h,018h,018h,018h,018h,018h,018h,000h,000h ;   Hex #7C
    Db  000h,000h,000h,070h,018h,018h,018h,00Eh,018h,018h,018h,070h,000h,000h ;   Hex #7D
    Db  000h,076h,0DCh,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #7E
    Db  000h,000h,000h,000h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,000h,000h,000h ;   Hex #7F
    Db  000h,000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0C0h,0C2h,066h,03Ch,00Ch,078h ;   Hex #80
    Db  000h,000h,000h,0CCh,000h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #81
    Db  000h,000h,00Ch,018h,030h,000h,07Ch,0C6h,0FEh,0C0h,0C6h,07Ch,000h,000h ;   Hex #82
    Db  000h,000h,010h,038h,06Ch,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #83
    Db  000h,000h,000h,0C6h,000h,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #84
    Db  000h,000h,060h,030h,018h,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #85
    Db  000h,000h,038h,06Ch,038h,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #86
    Db  000h,000h,000h,000h,000h,000h,07Ch,0C6h,0C0h,0C0h,0C6h,07Ch,00Ch,078h ;   Hex #87
    Db  000h,000h,010h,038h,06Ch,000h,07Ch,0C6h,0FEh,0C0h,0C6h,07Ch,000h,000h ;   Hex #88
    Db  000h,000h,000h,0C6h,000h,000h,07Ch,0C6h,0FEh,0C0h,0C6h,07Ch,000h,000h ;   Hex #89
    Db  000h,000h,060h,030h,018h,000h,07Ch,0C6h,0FEh,0C0h,0C6h,07Ch,000h,000h ;   Hex #8A
    Db  000h,000h,000h,066h,000h,000h,038h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #8B
    Db  000h,000h,018h,03Ch,066h,000h,038h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #8C
    Db  000h,000h,060h,030h,018h,000h,038h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #8D
    Db  000h,0C6h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #8E
    Db  038h,06Ch,038h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #8F
    Db  00Ch,018h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h ;   Hex #90
    Db  000h,000h,000h,000h,000h,000h,0ECh,036h,076h,0DCh,0D8h,06Eh,000h,000h ;   Hex #91
    Db  000h,000h,000h,03Eh,06Ch,0CCh,0CCh,0FEh,0CCh,0CCh,0CCh,0CEh,000h,000h ;   Hex #92
    Db  000h,000h,010h,038h,06Ch,000h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #93
    Db  000h,000h,000h,0C6h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #94
    Db  000h,000h,060h,030h,018h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #95
    Db  000h,000h,030h,078h,0CCh,000h,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #96
    Db  000h,000h,060h,030h,018h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #97
    Db  000h,000h,000h,0C6h,000h,000h,0C6h,0C6h,0C6h,0C6h,07Eh,006h,00Ch,078h ;   Hex #98
    Db  000h,0C6h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #99
    Db  000h,0C6h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #9A
    Db  000h,000h,000h,000h,000h,000h,07Ch,0CEh,0DEh,0F6h,0E6h,07Ch,000h,000h ;   Hex #9B
    Db  000h,000h,038h,06Ch,064h,060h,0F0h,060h,060h,060h,0E6h,0FCh,000h,000h ;   Hex #9C
    Db  000h,000h,004h,07Ch,0CEh,0CEh,0D6h,0D6h,0D6h,0E6h,0E6h,07Ch,040h,000h ;   Hex #9D
    Db  000h,000h,000h,000h,000h,0C6h,06Ch,038h,038h,06Ch,0C6h,000h,000h,000h ;   Hex #9E
    Db  000h,000h,00Eh,01Bh,018h,018h,018h,07Eh,018h,018h,018h,0D8h,070h,000h ;   Hex #9F
    Db  000h,000h,00Ch,018h,030h,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #A0
    Db  000h,000h,00Ch,018h,030h,000h,038h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #A1
    Db  000h,000h,00Ch,018h,030h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #A2
    Db  000h,000h,00Ch,018h,030h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #A3
    Db  000h,000h,000h,076h,0DCh,000h,0DCh,066h,066h,066h,066h,066h,000h,000h ;   Hex #A4
    Db  076h,0DCh,000h,0C6h,0E6h,0F6h,0FEh,0DEh,0CEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #A5
    Db  000h,000h,03Ch,06Ch,06Ch,03Eh,000h,07Eh,000h,000h,000h,000h,000h,000h ;   Hex #A6
    Db  000h,000h,038h,06Ch,06Ch,038h,000h,07Ch,000h,000h,000h,000h,000h,000h ;   Hex #A7
    Db  000h,000h,000h,030h,030h,000h,030h,030h,060h,0C6h,0C6h,07Ch,000h,000h ;   Hex #A8
    Db  000h,000h,000h,038h,044h,0BAh,0AAh,0B2h,0AAh,0AAh,044h,038h,000h,000h ;   Hex #A9
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,006h,006h,006h,000h,000h,000h ;   Hex #AA
    Db  000h,000h,060h,0E0h,063h,066h,06Ch,018h,030h,06Eh,0C3h,006h,00Ch,01Fh ;   Hex #AB
    Db  000h,000h,060h,0E0h,063h,066h,06Ch,01Ah,036h,06Eh,0DAh,03Fh,006h,006h ;   Hex #AC
    Db  000h,000h,000h,018h,018h,000h,018h,018h,03Ch,03Ch,03Ch,018h,000h,000h ;   Hex #AD
    Db  000h,000h,000h,000h,000h,036h,06Ch,0D8h,06Ch,036h,000h,000h,000h,000h ;   Hex #AE
    Db  000h,000h,000h,000h,000h,0D8h,06Ch,036h,06Ch,0D8h,000h,000h,000h,000h ;   Hex #AF
    Db  011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h ;   Hex #B0
    Db  055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh ;   Hex #B1
    Db  0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h ;   Hex #B2
    Db  018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B3
    Db  018h,018h,018h,018h,018h,018h,018h,0F8h,018h,018h,018h,018h,018h,018h ;   Hex #B4
    Db  030h,060h,0C0h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #B5
    Db  038h,06Ch,0C6h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #B6
    Db  018h,00Ch,006h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #B7
    Db  000h,000h,000h,038h,044h,09Ah,0A2h,0A2h,0A2h,09Ah,044h,038h,000h,000h ;   Hex #B8
    Db  036h,036h,036h,036h,036h,0F6h,006h,0F6h,036h,036h,036h,036h,036h,036h ;   Hex #B9
    Db  036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #BA
    Db  000h,000h,000h,000h,000h,0FEh,006h,0F6h,036h,036h,036h,036h,036h,036h ;   Hex #BB
    Db  036h,036h,036h,036h,036h,0F6h,006h,0FEh,000h,000h,000h,000h,000h,000h ;   Hex #BC
    Db  000h,000h,018h,018h,07Ch,0C6h,0C0h,0C0h,0C6h,07Ch,018h,018h,000h,000h ;   Hex #BD
    Db  000h,000h,000h,066h,066h,03Ch,018h,07Eh,018h,07Eh,018h,018h,000h,000h ;   Hex #BE
    Db  000h,000h,000h,000h,000h,000h,000h,0F8h,018h,018h,018h,018h,018h,018h ;   Hex #BF
    Db  018h,018h,018h,018h,018h,018h,018h,01Fh,000h,000h,000h,000h,000h,000h ;   Hex #C0
    Db  018h,018h,018h,018h,018h,018h,018h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #C1
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,018h,018h,018h,018h,018h,018h ;   Hex #C2
    Db  018h,018h,018h,018h,018h,018h,018h,01Fh,018h,018h,018h,018h,018h,018h ;   Hex #C3
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #C4
    Db  018h,018h,018h,018h,018h,018h,018h,0FFh,018h,018h,018h,018h,018h,018h ;   Hex #C5
    Db  000h,000h,000h,076h,0DCh,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #C6
    Db  076h,0DCh,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #C7
    Db  036h,036h,036h,036h,036h,037h,030h,03Fh,000h,000h,000h,000h,000h,000h ;   Hex #C8
    Db  000h,000h,000h,000h,000h,03Fh,030h,037h,036h,036h,036h,036h,036h,036h ;   Hex #C9
    Db  036h,036h,036h,036h,036h,0F7h,000h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #CA
    Db  000h,000h,000h,000h,000h,0FFh,000h,0F7h,036h,036h,036h,036h,036h,036h ;   Hex #CB
    Db  036h,036h,036h,036h,036h,037h,030h,037h,036h,036h,036h,036h,036h,036h ;   Hex #CC
    Db  000h,000h,000h,000h,000h,0FFh,000h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #CD
    Db  036h,036h,036h,036h,036h,0F7h,000h,0F7h,036h,036h,036h,036h,036h,036h ;   Hex #CE
    Db  000h,000h,000h,000h,000h,0C6h,07Ch,0C6h,0C6h,0C6h,07Ch,0C6h,000h,000h ;   Hex #CF
    Db  000h,000h,000h,034h,018h,02Ch,006h,03Eh,066h,066h,066h,03Ch,000h,000h ;   Hex #D0
    Db  000h,000h,000h,0F8h,06Ch,066h,066h,0F6h,066h,066h,06Ch,0F8h,000h,000h ;   Hex #D1
    Db  038h,06Ch,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h ;   Hex #D2
    Db  000h,0C6h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h ;   Hex #D3
    Db  030h,018h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h ;   Hex #D4
    Db  000h,000h,000h,000h,000h,000h,038h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #D5
    Db  00Ch,018h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #D6
    Db  03Ch,066h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #D7
    Db  000h,066h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #D8
    Db  018h,018h,018h,018h,018h,018h,018h,0F8h,000h,000h,000h,000h,000h,000h ;   Hex #D9
    Db  000h,000h,000h,000h,000h,000h,000h,01Fh,018h,018h,018h,018h,018h,018h ;   Hex #DA
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DB
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DC
    Db  000h,000h,018h,018h,018h,018h,000h,000h,000h,018h,018h,018h,018h,000h ;   Hex #DD
    Db  030h,018h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #DE
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,000h,000h,000h,000h,000h,000h,000h ;   Hex #DF
    Db  018h,030h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #E0
    Db  000h,000h,000h,078h,0CCh,0CCh,0CCh,0D8h,0CCh,0C6h,0C6h,0CCh,000h,000h ;   Hex #E1
    Db  038h,06Ch,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #E2
    Db  030h,018h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #E3
    Db  000h,000h,000h,076h,0DCh,000h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #E4
    Db  076h,0DCh,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #E5
    Db  000h,000h,000h,000h,000h,000h,066h,066h,066h,066h,066h,07Ch,060h,0C0h ;   Hex #E6
    Db  000h,000h,000h,0E0h,060h,060h,07Ch,066h,066h,066h,066h,07Ch,060h,0F0h ;   Hex #E7
    Db  000h,000h,000h,0F0h,060h,07Ch,066h,066h,066h,07Ch,060h,0F0h,000h,000h ;   Hex #E8
    Db  018h,030h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #E9
    Db  038h,06Ch,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #EA
    Db  030h,018h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #EB
    Db  000h,000h,00Ch,018h,030h,000h,0C6h,0C6h,0C6h,0C6h,07Eh,006h,00Ch,0F8h ;   Hex #EC
    Db  00Ch,018h,000h,066h,066h,066h,066h,03Ch,018h,018h,018h,03Ch,000h,000h ;   Hex #ED
    Db  000h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #EE
    Db  000h,00Ch,018h,030h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #EF
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,000h,000h,000h,000h,000h,000h ;   Hex #F0
    Db  000h,000h,000h,000h,018h,018h,07Eh,018h,018h,000h,000h,07Eh,000h,000h ;   Hex #F1
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,0FFh,000h,0FFh ;   Hex #F2
    Db  000h,0E0h,030h,063h,036h,0ECh,018h,036h,06Eh,0DAh,03Fh,006h,006h,000h ;   Hex #F3
    Db  000h,000h,000h,07Fh,0DBh,0DBh,0DBh,07Bh,01Bh,01Bh,01Bh,01Bh,000h,000h ;   Hex #F4
    Db  000h,000h,07Ch,0C6h,060h,038h,06Ch,0C6h,0C6h,06Ch,038h,00Ch,0C6h,07Ch ;   Hex #F5
    Db  000h,000h,000h,000h,000h,018h,000h,07Eh,000h,018h,000h,000h,000h,000h ;   Hex #F6
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,00Ch,078h ;   Hex #F7
    Db  000h,038h,06Ch,06Ch,038h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #F8
    Db  000h,0C6h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #F9
    Db  000h,000h,000h,000h,000h,000h,000h,018h,000h,000h,000h,000h,000h,000h ;   Hex #FA
    Db  000h,018h,038h,018h,018h,018h,03Ch,000h,000h,000h,000h,000h,000h,000h ;   Hex #FB
    Db  000h,078h,00Ch,038h,00Ch,00Ch,078h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FC
    Db  000h,03Ch,066h,00Ch,018h,032h,07Eh,000h,000h,000h,000h,000h,000h,000h ;   Hex #FD
    Db  000h,000h,000h,000h,000h,07Eh,07Eh,07Eh,07Eh,07Eh,07Eh,000h,000h,000h ;   Hex #FE
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FF


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\ega\850-8x16.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
;***************************************************
;  CHARACTER FONT FILE
;  Source Assembler File
;
;        CODE PAGE: 850 
;  FONT RESOLUTION: 8 x 16 
;
;     DATE CREATED:05-28-1987
;
;
; Output file from: MULTIFON, Version 1A
;
;***************************************************
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #0
    Db  000h,000h,07Eh,081h,0A5h,081h,081h,0BDh,099h,081h,081h,07Eh,000h,000h,000h,000h ;   Hex #1
    Db  000h,000h,07Eh,0FFh,0DBh,0FFh,0FFh,0C3h,0E7h,0FFh,0FFh,07Eh,000h,000h,000h,000h ;   Hex #2
    Db  000h,000h,000h,000h,06Ch,0FEh,0FEh,0FEh,0FEh,07Ch,038h,010h,000h,000h,000h,000h ;   Hex #3
    Db  000h,000h,000h,000h,010h,038h,07Ch,0FEh,07Ch,038h,010h,000h,000h,000h,000h,000h ;   Hex #4
    Db  000h,000h,000h,018h,03Ch,03Ch,0E7h,0E7h,0E7h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #5
    Db  000h,000h,000h,018h,03Ch,07Eh,0FFh,0FFh,07Eh,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #6
    Db  000h,000h,000h,000h,000h,000h,018h,03Ch,03Ch,018h,000h,000h,000h,000h,000h,000h ;   Hex #7
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0E7h,0C3h,0C3h,0E7h,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #8
    Db  000h,000h,000h,000h,000h,03Ch,066h,042h,042h,066h,03Ch,000h,000h,000h,000h,000h ;   Hex #9
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0C3h,099h,0BDh,0BDh,099h,0C3h,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #A
    Db  000h,000h,01Eh,00Eh,01Ah,032h,078h,0CCh,0CCh,0CCh,0CCh,078h,000h,000h,000h,000h ;   Hex #B
    Db  000h,000h,03Ch,066h,066h,066h,066h,03Ch,018h,07Eh,018h,018h,000h,000h,000h,000h ;   Hex #C
    Db  000h,000h,03Fh,033h,03Fh,030h,030h,030h,030h,070h,0F0h,0E0h,000h,000h,000h,000h ;   Hex #D
    Db  000h,000h,07Fh,063h,07Fh,063h,063h,063h,063h,067h,0E7h,0E6h,0C0h,000h,000h,000h ;   Hex #E
    Db  000h,000h,000h,018h,018h,0DBh,03Ch,0E7h,03Ch,0DBh,018h,018h,000h,000h,000h,000h ;   Hex #F
    Db  000h,080h,0C0h,0E0h,0F0h,0F8h,0FEh,0F8h,0F0h,0E0h,0C0h,080h,000h,000h,000h,000h ;   Hex #10
    Db  000h,002h,006h,00Eh,01Eh,03Eh,0FEh,03Eh,01Eh,00Eh,006h,002h,000h,000h,000h,000h ;   Hex #11
    Db  000h,000h,018h,03Ch,07Eh,018h,018h,018h,07Eh,03Ch,018h,000h,000h,000h,000h,000h ;   Hex #12
    Db  000h,000h,066h,066h,066h,066h,066h,066h,066h,000h,066h,066h,000h,000h,000h,000h ;   Hex #13
    Db  000h,000h,07Fh,0DBh,0DBh,0DBh,07Bh,01Bh,01Bh,01Bh,01Bh,01Bh,000h,000h,000h,000h ;   Hex #14
    Db  000h,07Ch,0C6h,060h,038h,06Ch,0C6h,0C6h,06Ch,038h,00Ch,0C6h,07Ch,000h,000h,000h ;   Hex #15
    Db  000h,000h,000h,000h,000h,000h,000h,000h,0FEh,0FEh,0FEh,0FEh,000h,000h,000h,000h ;   Hex #16
    Db  000h,000h,018h,03Ch,07Eh,018h,018h,018h,07Eh,03Ch,018h,07Eh,000h,000h,000h,000h ;   Hex #17
    Db  000h,000h,018h,03Ch,07Eh,018h,018h,018h,018h,018h,018h,018h,000h,000h,000h,000h ;   Hex #18
    Db  000h,000h,018h,018h,018h,018h,018h,018h,018h,07Eh,03Ch,018h,000h,000h,000h,000h ;   Hex #19
    Db  000h,000h,000h,000h,000h,018h,00Ch,0FEh,00Ch,018h,000h,000h,000h,000h,000h,000h ;   Hex #1A
    Db  000h,000h,000h,000h,000h,030h,060h,0FEh,060h,030h,000h,000h,000h,000h,000h,000h ;   Hex #1B
    Db  000h,000h,000h,000h,000h,000h,0C0h,0C0h,0C0h,0FEh,000h,000h,000h,000h,000h,000h ;   Hex #1C
    Db  000h,000h,000h,000h,000h,028h,06Ch,0FEh,06Ch,028h,000h,000h,000h,000h,000h,000h ;   Hex #1D
    Db  000h,000h,000h,000h,010h,038h,038h,07Ch,07Ch,0FEh,0FEh,000h,000h,000h,000h,000h ;   Hex #1E
    Db  000h,000h,000h,000h,0FEh,0FEh,07Ch,07Ch,038h,038h,010h,000h,000h,000h,000h,000h ;   Hex #1F
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #20
    Db  000h,000h,018h,03Ch,03Ch,03Ch,018h,018h,018h,000h,018h,018h,000h,000h,000h,000h ;   Hex #21
    Db  000h,066h,066h,066h,024h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #22
    Db  000h,000h,000h,06Ch,06Ch,0FEh,06Ch,06Ch,06Ch,0FEh,06Ch,06Ch,000h,000h,000h,000h ;   Hex #23
    Db  018h,018h,07Ch,0C6h,0C2h,0C0h,07Ch,006h,006h,086h,0C6h,07Ch,018h,018h,000h,000h ;   Hex #24
    Db  000h,000h,000h,000h,0C2h,0C6h,00Ch,018h,030h,060h,0C6h,086h,000h,000h,000h,000h ;   Hex #25
    Db  000h,000h,038h,06Ch,06Ch,038h,076h,0DCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #26
    Db  000h,030h,030h,030h,060h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #27
    Db  000h,000h,00Ch,018h,030h,030h,030h,030h,030h,030h,018h,00Ch,000h,000h,000h,000h ;   Hex #28
    Db  000h,000h,030h,018h,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,018h,030h,000h,000h,000h,000h ;   Hex #29
    Db  000h,000h,000h,000h,000h,066h,03Ch,0FFh,03Ch,066h,000h,000h,000h,000h,000h,000h ;   Hex #2A
    Db  000h,000h,000h,000h,000h,018h,018h,07Eh,018h,018h,000h,000h,000h,000h,000h,000h ;   Hex #2B
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,018h,018h,030h,000h,000h,000h ;   Hex #2C
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #2D
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,018h,000h,000h,000h,000h ;   Hex #2E
    Db  000h,000h,000h,000h,002h,006h,00Ch,018h,030h,060h,0C0h,080h,000h,000h,000h,000h ;   Hex #2F
    Db  000h,000h,038h,06Ch,0C6h,0C6h,0D6h,0D6h,0C6h,0C6h,06Ch,038h,000h,000h,000h,000h ;   Hex #30
    Db  000h,000h,018h,038h,078h,018h,018h,018h,018h,018h,018h,07Eh,000h,000h,000h,000h ;   Hex #31
    Db  000h,000h,07Ch,0C6h,006h,00Ch,018h,030h,060h,0C0h,0C6h,0FEh,000h,000h,000h,000h ;   Hex #32
    Db  000h,000h,07Ch,0C6h,006h,006h,03Ch,006h,006h,006h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #33
    Db  000h,000h,00Ch,01Ch,03Ch,06Ch,0CCh,0FEh,00Ch,00Ch,00Ch,01Eh,000h,000h,000h,000h ;   Hex #34
    Db  000h,000h,0FEh,0C0h,0C0h,0C0h,0FCh,006h,006h,006h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #35
    Db  000h,000h,038h,060h,0C0h,0C0h,0FCh,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #36
    Db  000h,000h,0FEh,0C6h,006h,006h,00Ch,018h,030h,030h,030h,030h,000h,000h,000h,000h ;   Hex #37
    Db  000h,000h,07Ch,0C6h,0C6h,0C6h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #38
    Db  000h,000h,07Ch,0C6h,0C6h,0C6h,07Eh,006h,006h,006h,00Ch,078h,000h,000h,000h,000h ;   Hex #39
    Db  000h,000h,000h,000h,018h,018h,000h,000h,000h,018h,018h,000h,000h,000h,000h,000h ;   Hex #3A
    Db  000h,000h,000h,000h,018h,018h,000h,000h,000h,018h,018h,030h,000h,000h,000h,000h ;   Hex #3B
    Db  000h,000h,000h,006h,00Ch,018h,030h,060h,030h,018h,00Ch,006h,000h,000h,000h,000h ;   Hex #3C
    Db  000h,000h,000h,000h,000h,07Eh,000h,000h,07Eh,000h,000h,000h,000h,000h,000h,000h ;   Hex #3D
    Db  000h,000h,000h,060h,030h,018h,00Ch,006h,00Ch,018h,030h,060h,000h,000h,000h,000h ;   Hex #3E
    Db  000h,000h,07Ch,0C6h,0C6h,00Ch,018h,018h,018h,000h,018h,018h,000h,000h,000h,000h ;   Hex #3F
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0DEh,0DEh,0DEh,0DCh,0C0h,07Ch,000h,000h,000h,000h ;   Hex #40
    Db  000h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #41
    Db  000h,000h,0FCh,066h,066h,066h,07Ch,066h,066h,066h,066h,0FCh,000h,000h,000h,000h ;   Hex #42
    Db  000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0C0h,0C0h,0C2h,066h,03Ch,000h,000h,000h,000h ;   Hex #43
    Db  000h,000h,0F8h,06Ch,066h,066h,066h,066h,066h,066h,06Ch,0F8h,000h,000h,000h,000h ;   Hex #44
    Db  000h,000h,0FEh,066h,062h,068h,078h,068h,060h,062h,066h,0FEh,000h,000h,000h,000h ;   Hex #45
    Db  000h,000h,0FEh,066h,062h,068h,078h,068h,060h,060h,060h,0F0h,000h,000h,000h,000h ;   Hex #46
    Db  000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0DEh,0C6h,0C6h,066h,03Ah,000h,000h,000h,000h ;   Hex #47
    Db  000h,000h,0C6h,0C6h,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #48
    Db  000h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #49
    Db  000h,000h,01Eh,00Ch,00Ch,00Ch,00Ch,00Ch,0CCh,0CCh,0CCh,078h,000h,000h,000h,000h ;   Hex #4A
    Db  000h,000h,0E6h,066h,066h,06Ch,078h,078h,06Ch,066h,066h,0E6h,000h,000h,000h,000h ;   Hex #4B
    Db  000h,000h,0F0h,060h,060h,060h,060h,060h,060h,062h,066h,0FEh,000h,000h,000h,000h ;   Hex #4C
    Db  000h,000h,0C6h,0EEh,0FEh,0FEh,0D6h,0C6h,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #4D
    Db  000h,000h,0C6h,0E6h,0F6h,0FEh,0DEh,0CEh,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #4E
    Db  000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #4F
    Db  000h,000h,0FCh,066h,066h,066h,07Ch,060h,060h,060h,060h,0F0h,000h,000h,000h,000h ;   Hex #50
    Db  000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0D6h,0DEh,07Ch,00Ch,00Eh,000h,000h ;   Hex #51
    Db  000h,000h,0FCh,066h,066h,066h,07Ch,06Ch,066h,066h,066h,0E6h,000h,000h,000h,000h ;   Hex #52
    Db  000h,000h,07Ch,0C6h,0C6h,060h,038h,00Ch,006h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #53
    Db  000h,000h,07Eh,07Eh,05Ah,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #54
    Db  000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #55
    Db  000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,06Ch,038h,010h,000h,000h,000h,000h ;   Hex #56
    Db  000h,000h,0C6h,0C6h,0C6h,0C6h,0D6h,0D6h,0D6h,0FEh,0EEh,06Ch,000h,000h,000h,000h ;   Hex #57
    Db  000h,000h,0C6h,0C6h,06Ch,07Ch,038h,038h,07Ch,06Ch,0C6h,0C6h,000h,000h,000h,000h ;   Hex #58
    Db  000h,000h,066h,066h,066h,066h,03Ch,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #59
    Db  000h,000h,0FEh,0C6h,086h,00Ch,018h,030h,060h,0C2h,0C6h,0FEh,000h,000h,000h,000h ;   Hex #5A
    Db  000h,000h,03Ch,030h,030h,030h,030h,030h,030h,030h,030h,03Ch,000h,000h,000h,000h ;   Hex #5B
    Db  000h,000h,000h,080h,0C0h,0E0h,070h,038h,01Ch,00Eh,006h,002h,000h,000h,000h,000h ;   Hex #5C
    Db  000h,000h,03Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,03Ch,000h,000h,000h,000h ;   Hex #5D
    Db  010h,038h,06Ch,0C6h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #5E
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,0FFh,000h,000h ;   Hex #5F
    Db  000h,030h,018h,00Ch,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #60
    Db  000h,000h,000h,000h,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #61
    Db  000h,000h,0E0h,060h,060h,078h,06Ch,066h,066h,066h,066h,07Ch,000h,000h,000h,000h ;   Hex #62
    Db  000h,000h,000h,000h,000h,07Ch,0C6h,0C0h,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #63
    Db  000h,000h,01Ch,00Ch,00Ch,03Ch,06Ch,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #64
    Db  000h,000h,000h,000h,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #65
    Db  000h,000h,01Ch,036h,032h,030h,078h,030h,030h,030h,030h,078h,000h,000h,000h,000h ;   Hex #66
    Db  000h,000h,000h,000h,000h,076h,0CCh,0CCh,0CCh,0CCh,0CCh,07Ch,00Ch,0CCh,078h,000h ;   Hex #67
    Db  000h,000h,0E0h,060h,060h,06Ch,076h,066h,066h,066h,066h,0E6h,000h,000h,000h,000h ;   Hex #68
    Db  000h,000h,018h,018h,000h,038h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #69
    Db  000h,000h,006h,006h,000h,00Eh,006h,006h,006h,006h,006h,006h,066h,066h,03Ch,000h ;   Hex #6A
    Db  000h,000h,0E0h,060h,060h,066h,06Ch,078h,078h,06Ch,066h,0E6h,000h,000h,000h,000h ;   Hex #6B
    Db  000h,000h,038h,018h,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #6C
    Db  000h,000h,000h,000h,000h,0ECh,0FEh,0D6h,0D6h,0D6h,0D6h,0C6h,000h,000h,000h,000h ;   Hex #6D
    Db  000h,000h,000h,000h,000h,0DCh,066h,066h,066h,066h,066h,066h,000h,000h,000h,000h ;   Hex #6E
    Db  000h,000h,000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #6F
    Db  000h,000h,000h,000h,000h,0DCh,066h,066h,066h,066h,066h,07Ch,060h,060h,0F0h,000h ;   Hex #70
    Db  000h,000h,000h,000h,000h,076h,0CCh,0CCh,0CCh,0CCh,0CCh,07Ch,00Ch,00Ch,01Eh,000h ;   Hex #71
    Db  000h,000h,000h,000h,000h,0DCh,076h,066h,060h,060h,060h,0F0h,000h,000h,000h,000h ;   Hex #72
    Db  000h,000h,000h,000h,000h,07Ch,0C6h,060h,038h,00Ch,0C6h,07Ch,000h,000h,000h,000h ;   Hex #73
    Db  000h,000h,010h,030h,030h,0FCh,030h,030h,030h,030h,036h,01Ch,000h,000h,000h,000h ;   Hex #74
    Db  000h,000h,000h,000h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #75
    Db  000h,000h,000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,06Ch,038h,000h,000h,000h,000h ;   Hex #76
    Db  000h,000h,000h,000h,000h,0C6h,0C6h,0D6h,0D6h,0D6h,0FEh,06Ch,000h,000h,000h,000h ;   Hex #77
    Db  000h,000h,000h,000h,000h,0C6h,06Ch,038h,038h,038h,06Ch,0C6h,000h,000h,000h,000h ;   Hex #78
    Db  000h,000h,000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Eh,006h,00Ch,0F8h,000h ;   Hex #79
    Db  000h,000h,000h,000h,000h,0FEh,0CCh,018h,030h,060h,0C6h,0FEh,000h,000h,000h,000h ;   Hex #7A
    Db  000h,000h,00Eh,018h,018h,018h,070h,018h,018h,018h,018h,00Eh,000h,000h,000h,000h ;   Hex #7B
    Db  000h,000h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,000h,000h,000h,000h ;   Hex #7C
    Db  000h,000h,070h,018h,018h,018h,00Eh,018h,018h,018h,018h,070h,000h,000h,000h,000h ;   Hex #7D
    Db  000h,076h,0DCh,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #7E
    Db  000h,000h,000h,000h,010h,038h,06Ch,0C6h,0C6h,0C6h,0FEh,000h,000h,000h,000h,000h ;   Hex #7F
    Db  000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0C0h,0C0h,0C2h,066h,03Ch,018h,070h,000h,000h ;   Hex #80
    Db  000h,000h,0CCh,000h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #81
    Db  000h,00Ch,018h,030h,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #82
    Db  000h,010h,038h,06Ch,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #83
    Db  000h,000h,0CCh,000h,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #84
    Db  000h,060h,030h,018h,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #85
    Db  000h,038h,06Ch,038h,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #86
    Db  000h,000h,000h,000h,000h,07Ch,0C6h,0C0h,0C0h,0C0h,0C6h,07Ch,018h,070h,000h,000h ;   Hex #87
    Db  000h,010h,038h,06Ch,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #88
    Db  000h,000h,0C6h,000h,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #89
    Db  000h,060h,030h,018h,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #8A
    Db  000h,000h,066h,000h,000h,038h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #8B
    Db  000h,018h,03Ch,066h,000h,038h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #8C
    Db  000h,060h,030h,018h,000h,038h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #8D
    Db  000h,0C6h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #8E
    Db  038h,06Ch,038h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #8F
    Db  00Ch,018h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h,000h,000h ;   Hex #90
    Db  000h,000h,000h,000h,000h,0ECh,036h,036h,07Eh,0D8h,0D8h,06Eh,000h,000h,000h,000h ;   Hex #91
    Db  000h,000h,03Eh,06Ch,0CCh,0CCh,0FEh,0CCh,0CCh,0CCh,0CCh,0CEh,000h,000h,000h,000h ;   Hex #92
    Db  000h,010h,038h,06Ch,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #93
    Db  000h,000h,0C6h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #94
    Db  000h,060h,030h,018h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #95
    Db  000h,030h,078h,0CCh,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #96
    Db  000h,060h,030h,018h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #97
    Db  000h,000h,0C6h,000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Eh,006h,00Ch,078h,000h ;   Hex #98
    Db  000h,0C6h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #99
    Db  000h,0C6h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #9A
    Db  000h,000h,000h,000h,000h,07Ch,0CEh,0DEh,0F6h,0E6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #9B
    Db  000h,038h,06Ch,064h,060h,0F0h,060h,060h,060h,060h,0E6h,0FCh,000h,000h,000h,000h ;   Hex #9C
    Db  000h,004h,07Ch,0CEh,0CEh,0D6h,0D6h,0D6h,0D6h,0E6h,0E6h,07Ch,040h,000h,000h,000h ;   Hex #9D
    Db  000h,000h,000h,000h,000h,0C6h,06Ch,038h,038h,06Ch,0C6h,000h,000h,000h,000h,000h ;   Hex #9E
    Db  000h,00Eh,01Bh,018h,018h,018h,07Eh,018h,018h,018h,0D8h,070h,000h,000h,000h,000h ;   Hex #9F
    Db  000h,018h,030h,060h,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #A0
    Db  000h,00Ch,018h,030h,000h,038h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #A1
    Db  000h,018h,030h,060h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #A2
    Db  000h,018h,030h,060h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #A3
    Db  000h,000h,076h,0DCh,000h,0DCh,066h,066h,066h,066h,066h,066h,000h,000h,000h,000h ;   Hex #A4
    Db  076h,0DCh,000h,0C6h,0E6h,0F6h,0FEh,0DEh,0CEh,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #A5
    Db  000h,000h,03Ch,06Ch,06Ch,03Eh,000h,07Eh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #A6
    Db  000h,000h,038h,06Ch,06Ch,038h,000h,07Ch,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #A7
    Db  000h,000h,030h,030h,000h,030h,030h,060h,0C0h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #A8
    Db  000h,000h,07Ch,082h,0B2h,0AAh,0B2h,0AAh,0AAh,082h,07Ch,000h,000h,000h,000h,000h ;   Hex #A9
    Db  000h,000h,000h,000h,000h,000h,0FEh,006h,006h,006h,006h,000h,000h,000h,000h,000h ;   Hex #AA
    Db  000h,060h,0E0h,062h,066h,06Ch,018h,030h,060h,0DCh,086h,00Ch,018h,03Eh,000h,000h ;   Hex #AB
    Db  000h,060h,0E0h,062h,066h,06Ch,018h,030h,066h,0CEh,09Ah,03Fh,006h,006h,000h,000h ;   Hex #AC
    Db  000h,000h,018h,018h,000h,018h,018h,018h,03Ch,03Ch,03Ch,018h,000h,000h,000h,000h ;   Hex #AD
    Db  000h,000h,000h,000h,000h,036h,06Ch,0D8h,06Ch,036h,000h,000h,000h,000h,000h,000h ;   Hex #AE
    Db  000h,000h,000h,000h,000h,0D8h,06Ch,036h,06Ch,0D8h,000h,000h,000h,000h,000h,000h ;   Hex #AF
    Db  011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h ;   Hex #B0
    Db  055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh ;   Hex #B1
    Db  0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h ;   Hex #B2
    Db  018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B3
    Db  018h,018h,018h,018h,018h,018h,018h,0F8h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B4
    Db  060h,0C0h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #B5
    Db  07Ch,0C6h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #B6
    Db  00Ch,006h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #B7
    Db  000h,000h,07Ch,082h,09Ah,0A2h,0A2h,0A2h,09Ah,082h,07Ch,000h,000h,000h,000h,000h ;   Hex #B8
    Db  036h,036h,036h,036h,036h,0F6h,006h,0F6h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #B9
    Db  036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #BA
    Db  000h,000h,000h,000h,000h,0FEh,006h,0F6h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #BB
    Db  036h,036h,036h,036h,036h,0F6h,006h,0FEh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #BC
    Db  000h,000h,018h,018h,07Ch,0C6h,0C0h,0C0h,0C6h,07Ch,018h,018h,000h,000h,000h,000h ;   Hex #BD
    Db  000h,000h,000h,066h,066h,03Ch,018h,07Eh,018h,07Eh,018h,018h,000h,000h,000h,000h ;   Hex #BE
    Db  000h,000h,000h,000h,000h,000h,000h,0F8h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #BF
    Db  018h,018h,018h,018h,018h,018h,018h,01Fh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #C0
    Db  018h,018h,018h,018h,018h,018h,018h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #C1
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #C2
    Db  018h,018h,018h,018h,018h,018h,018h,01Fh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #C3
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #C4
    Db  018h,018h,018h,018h,018h,018h,018h,0FFh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #C5
    Db  000h,000h,076h,0DCh,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #C6
    Db  076h,0DCh,000h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #C7
    Db  036h,036h,036h,036h,036h,037h,030h,03Fh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #C8
    Db  000h,000h,000h,000h,000h,03Fh,030h,037h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #C9
    Db  036h,036h,036h,036h,036h,0F7h,000h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #CA
    Db  000h,000h,000h,000h,000h,0FFh,000h,0F7h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #CB
    Db  036h,036h,036h,036h,036h,037h,030h,037h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #CC
    Db  000h,000h,000h,000h,000h,0FFh,000h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #CD
    Db  036h,036h,036h,036h,036h,0F7h,000h,0F7h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #CE
    Db  000h,000h,000h,000h,0C6h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,0C6h,000h,000h,000h,000h ;   Hex #CF
    Db  000h,000h,034h,018h,02Ch,006h,03Eh,066h,066h,066h,066h,03Ch,000h,000h,000h,000h ;   Hex #D0
    Db  000h,000h,0F8h,06Ch,066h,066h,0F6h,066h,066h,066h,06Ch,0F8h,000h,000h,000h,000h ;   Hex #D1
    Db  038h,06Ch,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h,000h,000h ;   Hex #D2
    Db  000h,0C6h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h,000h,000h ;   Hex #D3
    Db  030h,018h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h,000h,000h ;   Hex #D4
    Db  000h,000h,000h,000h,000h,038h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #D5
    Db  00Ch,018h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #D6
    Db  03Ch,066h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #D7
    Db  000h,066h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #D8
    Db  018h,018h,018h,018h,018h,018h,018h,0F8h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #D9
    Db  000h,000h,000h,000h,000h,000h,000h,01Fh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #DA
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DB
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DC
    Db  000h,018h,018h,018h,018h,018h,000h,000h,018h,018h,018h,018h,018h,000h,000h,000h ;   Hex #DD
    Db  030h,018h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #DE
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #DF
    Db  018h,030h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #E0
    Db  000h,000h,078h,0CCh,0CCh,0CCh,0D8h,0CCh,0C6h,0C6h,0C6h,0CCh,000h,000h,000h,000h ;   Hex #E1
    Db  038h,06Ch,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #E2
    Db  030h,018h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #E3
    Db  000h,000h,076h,0DCh,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #E4
    Db  076h,0DCh,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #E5
    Db  000h,000h,000h,000h,000h,066h,066h,066h,066h,066h,066h,07Ch,060h,060h,0C0h,000h ;   Hex #E6
    Db  000h,000h,0E0h,060h,060h,07Ch,066h,066h,066h,066h,066h,07Ch,060h,060h,0F0h,000h ;   Hex #E7
    Db  000h,000h,0F0h,060h,07Ch,066h,066h,066h,066h,07Ch,060h,0F0h,000h,000h,000h,000h ;   Hex #E8
    Db  018h,030h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #E9
    Db  038h,06Ch,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #EA
    Db  030h,018h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #EB
    Db  000h,00Ch,018h,030h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Eh,006h,00Ch,0F8h,000h ;   Hex #EC
    Db  00Ch,018h,000h,066h,066h,066h,066h,03Ch,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #ED
    Db  000h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #EE
    Db  000h,00Ch,018h,030h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #EF
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #F0
    Db  000h,000h,000h,000h,018h,018h,07Eh,018h,018h,000h,000h,07Eh,000h,000h,000h,000h ;   Hex #F1
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,0FFh,000h,0FFh,000h ;   Hex #F2
    Db  000h,0E0h,030h,062h,036h,0ECh,018h,030h,066h,0CEh,09Ah,03Fh,006h,006h,000h,000h ;   Hex #F3
    Db  000h,000h,07Fh,0DBh,0DBh,0DBh,07Bh,01Bh,01Bh,01Bh,01Bh,01Bh,000h,000h,000h,000h ;   Hex #F4
    Db  000h,07Ch,0C6h,060h,038h,06Ch,0C6h,0C6h,06Ch,038h,00Ch,0C6h,07Ch,000h,000h,000h ;   Hex #F5
    Db  000h,000h,000h,000h,000h,018h,000h,07Eh,000h,018h,000h,000h,000h,000h,000h,000h ;   Hex #F6
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,00Ch,078h,000h,000h ;   Hex #F7
    Db  000h,038h,06Ch,06Ch,038h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #F8
    Db  000h,0C6h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #F9
    Db  000h,000h,000h,000h,000h,000h,000h,018h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FA
    Db  000h,018h,038h,018h,018h,018h,03Ch,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FB
    Db  000h,07Ch,006h,03Ch,006h,006h,07Ch,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FC
    Db  000h,03Ch,066h,00Ch,018h,032h,07Eh,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FD
    Db  000h,000h,000h,000h,07Eh,07Eh,07Eh,07Eh,07Eh,07Eh,07Eh,000h,000h,000h,000h,000h ;   Hex #FE
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FF


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\ega\850-8x8.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
;***************************************************
;  CHARACTER FONT FILE
;  Source Assembler File
;
;	 CODE PAGE: 850
;  FONT RESOLUTION: 8 x 8
;
;     DATE CREATED:05-28-1987
;
;
; Output file from: MULTIFON, Version 1A
;
;***************************************************
    Db	000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #0
    Db	07Eh,081h,0A5h,081h,0BDh,099h,081h,07Eh ;   Hex #1
    Db	07Eh,0FFh,0DBh,0FFh,0C3h,0E7h,0FFh,07Eh ;   Hex #2
    Db	06Ch,0FEh,0FEh,0FEh,07Ch,038h,010h,000h ;   Hex #3
    Db	010h,038h,07Ch,0FEh,07Ch,038h,010h,000h ;   Hex #4
    Db	038h,07Ch,038h,0FEh,0FEh,0D6h,010h,038h ;   Hex #5
    Db	010h,038h,07Ch,0FEh,0FEh,07Ch,010h,038h ;   Hex #6
    Db	000h,000h,018h,03Ch,03Ch,018h,000h,000h ;   Hex #7
    Db	0FFh,0FFh,0E7h,0C3h,0C3h,0E7h,0FFh,0FFh ;   Hex #8
    Db	000h,03Ch,066h,042h,042h,066h,03Ch,000h ;   Hex #9
    Db	0FFh,0C3h,099h,0BDh,0BDh,099h,0C3h,0FFh ;   Hex #A
    Db	00Fh,007h,00Fh,07Dh,0CCh,0CCh,0CCh,078h ;   Hex #B
    Db	03Ch,066h,066h,066h,03Ch,018h,07Eh,018h ;   Hex #C
    Db	03Fh,033h,03Fh,030h,030h,070h,0F0h,0E0h ;   Hex #D
    Db	07Fh,063h,07Fh,063h,063h,067h,0E6h,0C0h ;   Hex #E
    Db	018h,0DBh,03Ch,0E7h,0E7h,03Ch,0DBh,018h ;   Hex #F
    Db	080h,0E0h,0F8h,0FEh,0F8h,0E0h,080h,000h ;   Hex #10
    Db	002h,00Eh,03Eh,0FEh,03Eh,00Eh,002h,000h ;   Hex #11
    Db	018h,03Ch,07Eh,018h,018h,07Eh,03Ch,018h ;   Hex #12
    Db	066h,066h,066h,066h,066h,000h,066h,000h ;   Hex #13
    Db	07Fh,0DBh,0DBh,07Bh,01Bh,01Bh,01Bh,000h ;   Hex #14
    Db	03Eh,061h,03Ch,066h,066h,03Ch,086h,07Ch ;   Hex #15
    Db	000h,000h,000h,000h,07Eh,07Eh,07Eh,000h ;   Hex #16
    Db	018h,03Ch,07Eh,018h,07Eh,03Ch,018h,0FFh ;   Hex #17
    Db	018h,03Ch,07Eh,018h,018h,018h,018h,000h ;   Hex #18
    Db	018h,018h,018h,018h,07Eh,03Ch,018h,000h ;   Hex #19
    Db	000h,018h,00Ch,0FEh,00Ch,018h,000h,000h ;   Hex #1A
    Db	000h,030h,060h,0FEh,060h,030h,000h,000h ;   Hex #1B
    Db	000h,000h,0C0h,0C0h,0C0h,0FEh,000h,000h ;   Hex #1C
    Db	000h,024h,066h,0FFh,066h,024h,000h,000h ;   Hex #1D
    Db	000h,018h,03Ch,07Eh,0FFh,0FFh,000h,000h ;   Hex #1E
    Db	000h,0FFh,0FFh,07Eh,03Ch,018h,000h,000h ;   Hex #1F
    Db	000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #20
    Db	018h,03Ch,03Ch,018h,018h,000h,018h,000h ;   Hex #21
    Db	066h,066h,024h,000h,000h,000h,000h,000h ;   Hex #22
    Db	06Ch,06Ch,0FEh,06Ch,0FEh,06Ch,06Ch,000h ;   Hex #23
    Db	018h,03Eh,060h,03Ch,006h,07Ch,018h,000h ;   Hex #24
    Db	000h,0C6h,0CCh,018h,030h,066h,0C6h,000h ;   Hex #25
    Db	038h,06Ch,038h,076h,0DCh,0CCh,076h,000h ;   Hex #26
    Db	018h,018h,030h,000h,000h,000h,000h,000h ;   Hex #27
    Db	00Ch,018h,030h,030h,030h,018h,00Ch,000h ;   Hex #28
    Db	030h,018h,00Ch,00Ch,00Ch,018h,030h,000h ;   Hex #29
    Db	000h,066h,03Ch,0FFh,03Ch,066h,000h,000h ;   Hex #2A
    Db	000h,018h,018h,07Eh,018h,018h,000h,000h ;   Hex #2B
    Db	000h,000h,000h,000h,000h,018h,018h,030h ;   Hex #2C
    Db	000h,000h,000h,07Eh,000h,000h,000h,000h ;   Hex #2D
    Db	000h,000h,000h,000h,000h,018h,018h,000h ;   Hex #2E
    Db	006h,00Ch,018h,030h,060h,0C0h,080h,000h ;   Hex #2F
    Db	038h,06Ch,0C6h,0D6h,0C6h,06Ch,038h,000h ;   Hex #30
    Db	018h,038h,018h,018h,018h,018h,07Eh,000h ;   Hex #31
    Db	07Ch,0C6h,006h,01Ch,030h,066h,0FEh,000h ;   Hex #32
    Db	07Ch,0C6h,006h,03Ch,006h,0C6h,07Ch,000h ;   Hex #33
    Db	01Ch,03Ch,06Ch,0CCh,0FEh,00Ch,01Eh,000h ;   Hex #34
    Db	0FEh,0C0h,0C0h,0FCh,006h,0C6h,07Ch,000h ;   Hex #35
    Db	038h,060h,0C0h,0FCh,0C6h,0C6h,07Ch,000h ;   Hex #36
    Db	0FEh,0C6h,00Ch,018h,030h,030h,030h,000h ;   Hex #37
    Db	07Ch,0C6h,0C6h,07Ch,0C6h,0C6h,07Ch,000h ;   Hex #38
    Db	07Ch,0C6h,0C6h,07Eh,006h,00Ch,078h,000h ;   Hex #39
    Db	000h,018h,018h,000h,000h,018h,018h,000h ;   Hex #3A
    Db	000h,018h,018h,000h,000h,018h,018h,030h ;   Hex #3B
    Db	006h,00Ch,018h,030h,018h,00Ch,006h,000h ;   Hex #3C
    Db	000h,000h,07Eh,000h,000h,07Eh,000h,000h ;   Hex #3D
    Db	060h,030h,018h,00Ch,018h,030h,060h,000h ;   Hex #3E
    Db	07Ch,0C6h,00Ch,018h,018h,000h,018h,000h ;   Hex #3F
    Db	07Ch,0C6h,0DEh,0DEh,0DEh,0C0h,078h,000h ;   Hex #40
    Db	038h,06Ch,0C6h,0FEh,0C6h,0C6h,0C6h,000h ;   Hex #41
    Db	0FCh,066h,066h,07Ch,066h,066h,0FCh,000h ;   Hex #42
    Db	03Ch,066h,0C0h,0C0h,0C0h,066h,03Ch,000h ;   Hex #43
    Db	0F8h,06Ch,066h,066h,066h,06Ch,0F8h,000h ;   Hex #44
    Db	0FEh,062h,068h,078h,068h,062h,0FEh,000h ;   Hex #45
    Db	0FEh,062h,068h,078h,068h,060h,0F0h,000h ;   Hex #46
    Db	03Ch,066h,0C0h,0C0h,0CEh,066h,03Ah,000h ;   Hex #47
    Db	0C6h,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h ;   Hex #48
    Db	03Ch,018h,018h,018h,018h,018h,03Ch,000h ;   Hex #49
    Db	01Eh,00Ch,00Ch,00Ch,0CCh,0CCh,078h,000h ;   Hex #4A
    Db	0E6h,066h,06Ch,078h,06Ch,066h,0E6h,000h ;   Hex #4B
    Db	0F0h,060h,060h,060h,062h,066h,0FEh,000h ;   Hex #4C
    Db	0C6h,0EEh,0FEh,0FEh,0D6h,0C6h,0C6h,000h ;   Hex #4D
    Db	0C6h,0E6h,0F6h,0DEh,0CEh,0C6h,0C6h,000h ;   Hex #4E
    Db	07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #4F
    Db	0FCh,066h,066h,07Ch,060h,060h,0F0h,000h ;   Hex #50
    Db	07Ch,0C6h,0C6h,0C6h,0C6h,0CEh,07Ch,00Eh ;   Hex #51
    Db	0FCh,066h,066h,07Ch,06Ch,066h,0E6h,000h ;   Hex #52
    Db	03Ch,066h,030h,018h,00Ch,066h,03Ch,000h ;   Hex #53
    Db	07Eh,07Eh,05Ah,018h,018h,018h,03Ch,000h ;   Hex #54
    Db	0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #55
    Db	0C6h,0C6h,0C6h,0C6h,0C6h,06Ch,038h,000h ;   Hex #56
    Db	0C6h,0C6h,0C6h,0D6h,0D6h,0FEh,06Ch,000h ;   Hex #57
    Db	0C6h,0C6h,06Ch,038h,06Ch,0C6h,0C6h,000h ;   Hex #58
    Db	066h,066h,066h,03Ch,018h,018h,03Ch,000h ;   Hex #59
    Db	0FEh,0C6h,08Ch,018h,032h,066h,0FEh,000h ;   Hex #5A
    Db	03Ch,030h,030h,030h,030h,030h,03Ch,000h ;   Hex #5B
    Db	0C0h,060h,030h,018h,00Ch,006h,002h,000h ;   Hex #5C
    Db	03Ch,00Ch,00Ch,00Ch,00Ch,00Ch,03Ch,000h ;   Hex #5D
    Db	010h,038h,06Ch,0C6h,000h,000h,000h,000h ;   Hex #5E
    Db	000h,000h,000h,000h,000h,000h,000h,0FFh ;   Hex #5F
    Db	030h,018h,00Ch,000h,000h,000h,000h,000h ;   Hex #60
    Db	000h,000h,078h,00Ch,07Ch,0CCh,076h,000h ;   Hex #61
    Db	0E0h,060h,07Ch,066h,066h,066h,0DCh,000h ;   Hex #62
    Db	000h,000h,07Ch,0C6h,0C0h,0C6h,07Ch,000h ;   Hex #63
    Db	01Ch,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h ;   Hex #64
    Db	000h,000h,07Ch,0C6h,0FEh,0C0h,07Ch,000h ;   Hex #65
    Db	03Ch,066h,060h,0F8h,060h,060h,0F0h,000h ;   Hex #66
    Db	000h,000h,076h,0CCh,0CCh,07Ch,00Ch,0F8h ;   Hex #67
    Db	0E0h,060h,06Ch,076h,066h,066h,0E6h,000h ;   Hex #68
    Db	018h,000h,038h,018h,018h,018h,03Ch,000h ;   Hex #69
    Db	006h,000h,006h,006h,006h,066h,066h,03Ch ;   Hex #6A
    Db	0E0h,060h,066h,06Ch,078h,06Ch,0E6h,000h ;   Hex #6B
    Db	038h,018h,018h,018h,018h,018h,03Ch,000h ;   Hex #6C
    Db	000h,000h,0ECh,0FEh,0D6h,0D6h,0D6h,000h ;   Hex #6D
    Db	000h,000h,0DCh,066h,066h,066h,066h,000h ;   Hex #6E
    Db	000h,000h,07Ch,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #6F
    Db	000h,000h,0DCh,066h,066h,07Ch,060h,0F0h ;   Hex #70
    Db	000h,000h,076h,0CCh,0CCh,07Ch,00Ch,01Eh ;   Hex #71
    Db	000h,000h,0DCh,076h,060h,060h,0F0h,000h ;   Hex #72
    Db	000h,000h,07Eh,0C0h,07Ch,006h,0FCh,000h ;   Hex #73
    Db	030h,030h,0FCh,030h,030h,036h,01Ch,000h ;   Hex #74
    Db	000h,000h,0CCh,0CCh,0CCh,0CCh,076h,000h ;   Hex #75
    Db	000h,000h,0C6h,0C6h,0C6h,06Ch,038h,000h ;   Hex #76
    Db	000h,000h,0C6h,0D6h,0D6h,0FEh,06Ch,000h ;   Hex #77
    Db	000h,000h,0C6h,06Ch,038h,06Ch,0C6h,000h ;   Hex #78
    Db	000h,000h,0C6h,0C6h,0C6h,07Eh,006h,0FCh ;   Hex #79
    Db	000h,000h,07Eh,04Ch,018h,032h,07Eh,000h ;   Hex #7A
    Db	00Eh,018h,018h,070h,018h,018h,00Eh,000h ;   Hex #7B
    Db	018h,018h,018h,018h,018h,018h,018h,000h ;   Hex #7C
    Db	070h,018h,018h,00Eh,018h,018h,070h,000h ;   Hex #7D
    Db	076h,0DCh,000h,000h,000h,000h,000h,000h ;   Hex #7E
    Db	000h,010h,038h,06Ch,0C6h,0C6h,0FEh,000h ;   Hex #7F
    Db	07Ch,0C6h,0C0h,0C0h,0C6h,07Ch,00Ch,078h ;   Hex #80
    Db	0CCh,000h,0CCh,0CCh,0CCh,0CCh,076h,000h ;   Hex #81
    Db	00Ch,018h,07Ch,0C6h,0FEh,0C0h,07Ch,000h ;   Hex #82
    Db	07Ch,082h,078h,00Ch,07Ch,0CCh,076h,000h ;   Hex #83
    Db	0C6h,000h,078h,00Ch,07Ch,0CCh,076h,000h ;   Hex #84
    Db	030h,018h,078h,00Ch,07Ch,0CCh,076h,000h ;   Hex #85
    Db	030h,030h,078h,00Ch,07Ch,0CCh,076h,000h ;   Hex #86
    Db	000h,000h,07Eh,0C0h,0C0h,07Eh,00Ch,038h ;   Hex #87
    Db	07Ch,082h,07Ch,0C6h,0FEh,0C0h,07Ch,000h ;   Hex #88
    Db	0C6h,000h,07Ch,0C6h,0FEh,0C0h,07Ch,000h ;   Hex #89
    Db	030h,018h,07Ch,0C6h,0FEh,0C0h,07Ch,000h ;   Hex #8A
    Db	066h,000h,038h,018h,018h,018h,03Ch,000h ;   Hex #8B
    Db	07Ch,082h,038h,018h,018h,018h,03Ch,000h ;   Hex #8C
    Db	030h,018h,000h,038h,018h,018h,03Ch,000h ;   Hex #8D
    Db	0C6h,038h,06Ch,0C6h,0FEh,0C6h,0C6h,000h ;   Hex #8E
    Db	038h,06Ch,07Ch,0C6h,0FEh,0C6h,0C6h,000h ;   Hex #8F
    Db	018h,030h,0FEh,0C0h,0F8h,0C0h,0FEh,000h ;   Hex #90
    Db	000h,000h,07Eh,012h,0fEh,090h,0fEh,000h ;   Hex #91
    Db	03Eh,06Ch,0CCh,0FEh,0CCh,0CCh,0CEh,000h ;   Hex #92
    Db	07Ch,082h,07Ch,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #93
    Db	0C6h,000h,07Ch,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #94
    Db	030h,018h,07Ch,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #95
    Db	078h,084h,000h,0CCh,0CCh,0CCh,076h,000h ;   Hex #96
    Db	060h,030h,0CCh,0CCh,0CCh,0CCh,076h,000h ;   Hex #97
    Db	0C6h,000h,0C6h,0C6h,0C6h,07Eh,006h,0FCh ;   Hex #98
    Db	0C6h,038h,06Ch,0C6h,0C6h,06Ch,038h,000h ;   Hex #99
    Db	0C6h,000h,0C6h,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #9A
    Db	000h,002h,07Ch,0CEh,0D6h,0E6h,07Ch,080h ;   Hex #9B
    Db	038h,06Ch,064h,0F0h,060h,066h,0FCh,000h ;   Hex #9C
    Db	03Ah,06Ch,0CEh,0D6h,0E6h,06Ch,0B8h,000h ;   Hex #9D
    Db	000h,0C6h,06Ch,038h,06Ch,0C6h,000h,000h ;   Hex #9E
    Db	00Eh,01Bh,018h,03Ch,018h,0D8h,070h,000h ;   Hex #9F
    Db	018h,030h,078h,00Ch,07Ch,0CCh,076h,000h ;   Hex #A0
    Db	00Ch,018h,000h,038h,018h,018h,03Ch,000h ;   Hex #A1
    Db	00Ch,018h,07Ch,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #A2
    Db	018h,030h,0CCh,0CCh,0CCh,0CCh,076h,000h ;   Hex #A3
    Db	076h,0DCh,000h,0DCh,066h,066h,066h,000h ;   Hex #A4
    Db	076h,0DCh,000h,0E6h,0F6h,0DEh,0CEh,000h ;   Hex #A5
    Db	03Ch,06Ch,06Ch,03Eh,000h,07Eh,000h,000h ;   Hex #A6
    Db	038h,06Ch,06Ch,038h,000h,07Ch,000h,000h ;   Hex #A7
    Db	018h,000h,018h,018h,030h,063h,03Eh,000h ;   Hex #A8
    Db	07Eh,081h,0B9h,0A5h,0B9h,0A5h,081h,07Eh ;   Hex #A9
    Db	000h,000h,000h,0FEh,006h,006h,000h,000h ;   Hex #AA
    Db	063h,0E6h,06Ch,07Eh,033h,066h,0CCh,00Fh ;   Hex #AB
    Db	063h,0E6h,06Ch,07Ah,036h,06Ah,0DFh,006h ;   Hex #AC
    Db	018h,000h,018h,018h,03Ch,03Ch,018h,000h ;   Hex #AD
    Db	000h,033h,066h,0CCh,066h,033h,000h,000h ;   Hex #AE
    Db	000h,0CCh,066h,033h,066h,0CCh,000h,000h ;   Hex #AF
    Db	022h,088h,022h,088h,022h,088h,022h,088h ;   Hex #B0
    Db	055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh ;   Hex #B1
    Db	077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh ;   Hex #B2
    Db	018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B3
    Db	018h,018h,018h,018h,0F8h,018h,018h,018h ;   Hex #B4
    Db	030h,060h,038h,06Ch,0C6h,0FEh,0C6h,000h ;   Hex #B5
    Db	07Ch,082h,038h,06Ch,0C6h,0FEh,0C6h,000h ;   Hex #B6
    Db	018h,00Ch,038h,06Ch,0C6h,0FEh,0C6h,000h ;   Hex #B7
    Db	07Eh,081h,09Dh,0A1h,0A1h,09Dh,081h,07Eh ;   Hex #B8
    Db	036h,036h,0F6h,006h,0F6h,036h,036h,036h ;   Hex #B9
    Db	036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #BA
    Db	000h,000h,0FEh,006h,0F6h,036h,036h,036h ;   Hex #BB
    Db	036h,036h,0F6h,006h,0FEh,000h,000h,000h ;   Hex #BC
    Db	018h,018h,07Eh,0C0h,0C0h,07Eh,018h,018h ;   Hex #BD
    Db	066h,066h,03Ch,07Eh,018h,07Eh,018h,018h ;   Hex #BE
    Db	000h,000h,000h,000h,0F8h,018h,018h,018h ;   Hex #BF
    Db	018h,018h,018h,018h,01Fh,000h,000h,000h ;   Hex #C0
    Db	018h,018h,018h,018h,0FFh,000h,000h,000h ;   Hex #C1
    Db	000h,000h,000h,000h,0FFh,018h,018h,018h ;   Hex #C2
    Db	018h,018h,018h,018h,01Fh,018h,018h,018h ;   Hex #C3
    Db	000h,000h,000h,000h,0FFh,000h,000h,000h ;   Hex #C4
    Db	018h,018h,018h,018h,0FFh,018h,018h,018h ;   Hex #C5
    Db	076h,0DCh,07Ch,006h,07Eh,0C6h,07Eh,000h ;   Hex #C6
    Db	076h,0DCh,038h,06Ch,0C6h,0FEh,0C6h,000h ;   Hex #C7
    Db	036h,036h,037h,030h,03Fh,000h,000h,000h ;   Hex #C8
    Db	000h,000h,03Fh,030h,037h,036h,036h,036h ;   Hex #C9
    Db	036h,036h,0F7h,000h,0FFh,000h,000h,000h ;   Hex #CA
    Db	000h,000h,0FFh,000h,0F7h,036h,036h,036h ;   Hex #CB
    Db	036h,036h,037h,030h,037h,036h,036h,036h ;   Hex #CC
    Db	000h,000h,0FFh,000h,0FFh,000h,000h,000h ;   Hex #CD
    Db	036h,036h,0F7h,000h,0F7h,036h,036h,036h ;   Hex #CE
    Db	000h,0C6h,07Ch,0C6h,0C6h,07Ch,0C6h,000h ;   Hex #CF
    Db	030h,07Eh,00Ch,07Ch,0CCh,0CCh,078h,000h ;   Hex #D0
    Db	0F8h,06Ch,066h,0F6h,066h,06Ch,0F8h,000h ;   Hex #D1
    Db	07Ch,082h,0FEh,0C0h,0FCh,0C0h,0FEh,000h ;   Hex #D2
    Db	0C6h,000h,0FEh,0C0h,0FCh,0C0h,0FEh,000h ;   Hex #D3
    Db	030h,018h,0FEh,0C0h,0FCh,0C0h,0FEh,000h ;   Hex #D4
    Db	000h,000h,038h,018h,018h,018h,03Ch,000h ;   Hex #D5
    Db	00Ch,018h,03Ch,018h,018h,018h,03Ch,000h ;   Hex #D6
    Db	03Ch,042h,03Ch,018h,018h,018h,03Ch,000h ;   Hex #D7
    Db	066h,000h,03Ch,018h,018h,018h,03Ch,000h ;   Hex #D8
    Db	018h,018h,018h,018h,0F8h,000h,000h,000h ;   Hex #D9
    Db	000h,000h,000h,000h,01Fh,018h,018h,018h ;   Hex #DA
    Db	0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DB
    Db	000h,000h,000h,000h,0FFh,0FFh,0FFh,0FFh ;   Hex #DC
    Db	018h,018h,018h,000h,000h,018h,018h,018h ;   Hex #DD
    Db	030h,018h,03Ch,018h,018h,018h,03Ch,000h ;   Hex #DE
    Db	0FFh,0FFh,0FFh,0FFh,000h,000h,000h,000h ;   Hex #DF
    Db	030h,060h,038h,06Ch,0C6h,06Ch,038h,000h ;   Hex #E0
    Db	078h,0CCh,0CCh,0D8h,0CCh,0C6h,0CCh,000h ;   Hex #E1
    Db	07Ch,082h,038h,06Ch,0C6h,06Ch,038h,000h ;   Hex #E2
    Db	00Ch,006h,038h,06Ch,0C6h,06Ch,038h,000h ;   Hex #E3
    Db	076h,0DCh,07Ch,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #E4
    Db	076h,0DCh,038h,06Ch,0C6h,06Ch,038h,000h ;   Hex #E5
    Db	000h,000h,066h,066h,066h,066h,07Ch,0C0h ;   Hex #E6
    Db	0E0h,060h,07Ch,066h,066h,07Ch,060h,0F0h ;   Hex #E7
    Db	0F0h,060h,07Ch,066h,07Ch,060h,0F0h,000h ;   Hex #E8
    Db	018h,030h,0C6h,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #E9
    Db	07Ch,082h,000h,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #EA
    Db	060h,030h,0C6h,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #EB
    Db	018h,030h,0C6h,0C6h,0C6h,07Eh,006h,0FCh ;   Hex #EC
    Db	00Ch,018h,066h,066h,03Ch,018h,03Ch,000h ;   Hex #ED
    Db	0FFh,000h,000h,000h,000h,000h,000h,000h ;   Hex #EE
    Db	00Ch,018h,030h,000h,000h,000h,000h,000h ;   Hex #EF
    Db	000h,000h,000h,07Eh,000h,000h,000h,000h ;   Hex #F0
    Db	018h,018h,07Eh,018h,018h,000h,07Eh,000h ;   Hex #F1
    Db	000h,000h,000h,000h,000h,0FFh,000h,0FFh ;   Hex #F2
    Db	0E1h,032h,0E4h,03Ah,0F6h,02Ah,05Fh,086h ;   Hex #F3
    Db	07Fh,0DBh,0DBh,07Bh,01Bh,01Bh,01Bh,000h ;   Hex #F4
    Db	03Eh,061h,03Ch,066h,066h,03Ch,086h,07Ch ;   Hex #F5
    Db	000h,018h,000h,07Eh,000h,018h,000h,000h ;   Hex #F6
    Db	000h,000h,000h,000h,000h,018h,00Ch,038h ;   Hex #F7
    Db	038h,06Ch,06Ch,038h,000h,000h,000h,000h ;   Hex #F8
    Db	000h,0C6h,000h,000h,000h,000h,000h,000h ;   Hex #F9
    Db	000h,000h,000h,018h,000h,000h,000h,000h ;   Hex #FA
    Db	018h,038h,018h,018h,03Ch,000h,000h,000h ;   Hex #FB
    Db	078h,00Ch,038h,00Ch,078h,000h,000h,000h ;   Hex #FC
    Db	078h,00Ch,018h,030h,07Ch,000h,000h,000h ;   Hex #FD
    Db	000h,000h,03Ch,03Ch,03Ch,03Ch,000h,000h ;   Hex #FE
    Db	000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FF


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\ega\852-8x14.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
;***************************************************
;  CHARACTER FONT FILE
;  Source Assembler File
;
;	 CODE PAGE: 852
;  FONT RESOLUTION: 8 x 14 
;
;     DATE CREATED:05-28-1987
;
;
; Output file from: MULTIFON, Version 1A
;
;***************************************************
Db	000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ; CHR 00
Db	000h,000h,07Eh,081h,0A5h,081h,081h,0BDh,099h,081h,081h,07Eh,000h,000h ; CHR 01
Db	000h,000h,07Eh,0FFh,0Dbh,0FFh,0FFh,0C3h,0E7h,0FFh,0FFh,07Eh,000h,000h ; CHR 02
Db	000h,000h,000h,000h,06Ch,0FEh,0FEh,0FEh,0FEh,07Ch,038h,010h,000h,000h ; CHR 03
Db	000h,000h,000h,000h,010h,038h,07Ch,0FEh,07Ch,038h,010h,000h,000h,000h ; CHR 04
Db	000h,000h,000h,018h,03Ch,03Ch,0E7h,0E7h,0E7h,018h,018h,03Ch,000h,000h ; CHR 05
Db	000h,000h,000h,018h,03Ch,07Eh,0FFh,0FFh,07Eh,018h,018h,03Ch,000h,000h ; CHR 06
Db	000h,000h,000h,000h,000h,000h,018h,03Ch,03Ch,018h,000h,000h,000h,000h ; CHR 07
Db	0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0E7h,0C3h,0C3h,0E7h,0FFh,0FFh,0FFh,0FFh ; CHR 08
Db	000h,000h,000h,000h,000h,03Ch,066h,042h,042h,066h,03Ch,000h,000h,000h ; CHR 09
Db	0FFh,0FFh,0FFh,0FFh,0FFh,0C3h,099h,0BDh,0BDh,099h,0C3h,0FFh,0FFh,0FFh ; CHR 0A
Db	000h,000h,01Eh,00Eh,01Ah,032h,078h,0CCh,0CCh,0CCh,0CCh,078h,000h,000h ; CHR 0B
Db	000h,000h,03Ch,066h,066h,066h,066h,03Ch,018h,07Eh,018h,018h,000h,000h ; CHR 0C
Db	000h,000h,03Eh,036h,03Eh,030h,030h,030h,030h,070h,0F0h,0E0h,000h,000h ; CHR 0D
Db	000h,000h,07Eh,066h,07Eh,066h,066h,066h,066h,06Eh,0EEh,0ECh,0C0h,000h ; CHR 0E
Db	000h,000h,000h,018h,018h,0Dbh,03Ch,0E7h,03Ch,0Dbh,018h,018h,000h,000h ; CHR 0F
Db	000h,080h,0C0h,0E0h,0F0h,0F8h,0FEh,0F8h,0F0h,0E0h,0C0h,080h,000h,000h ; CHR 10
Db	000h,002h,006h,00Eh,01Eh,03Eh,0FEh,03Eh,01Eh,00Eh,006h,002h,000h,000h ; CHR 11
Db	000h,000h,018h,03Ch,07Eh,018h,018h,018h,07Eh,03Ch,018h,000h,000h,000h ; CHR 12
Db	000h,000h,066h,066h,066h,066h,066h,066h,066h,000h,066h,066h,000h,000h ; CHR 13
Db	000h,000h,07Fh,0Dbh,0Dbh,0Dbh,07Bh,01Bh,01Bh,01Bh,01Bh,01Bh,000h,000h ; CHR 14
Db	000h,07Ch,0C6h,060h,038h,06Ch,0C6h,0C6h,06Ch,038h,00Ch,0C6h,07Ch,000h ; CHR 15
Db	000h,000h,000h,000h,000h,000h,000h,000h,0FEh,0FEh,0FEh,0FEh,000h,000h ; CHR 16
Db	000h,000h,018h,03Ch,07Eh,018h,018h,018h,07Eh,03Ch,018h,07Eh,000h,000h ; CHR 17
Db	000h,000h,018h,03Ch,07Eh,018h,018h,018h,018h,018h,018h,018h,000h,000h ; CHR 18
Db	000h,000h,018h,018h,018h,018h,018h,018h,018h,07Eh,03Ch,018h,000h,000h ; CHR 19
Db	000h,000h,000h,000h,000h,018h,00Ch,0FEh,00Ch,018h,000h,000h,000h,000h ; CHR 1A
Db	000h,000h,000h,000h,000h,030h,060h,0FEh,060h,030h,000h,000h,000h,000h ; CHR 1B
Db	000h,000h,000h,000h,000h,000h,0C0h,0C0h,0C0h,0FEh,000h,000h,000h,000h ; CHR 1C
Db	000h,000h,000h,000h,000h,028h,06Ch,0FEh,06Ch,028h,000h,000h,000h,000h ; CHR 1D
Db	000h,000h,000h,000h,010h,038h,038h,07Ch,07Ch,0FEh,0FEh,000h,000h,000h ; CHR 1E
Db	000h,000h,000h,000h,0FEh,0FEh,07Ch,07Ch,038h,038h,010h,000h,000h,000h ; CHR 1F
Db	000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ; CHR 20
Db	000h,000h,018h,03Ch,03Ch,03Ch,018h,018h,018h,000h,018h,018h,000h,000h ; CHR 21
Db	000h,0C6h,0C6h,0C6h,044h,000h,000h,000h,000h,000h,000h,000h,000h,000h ; CHR 22
Db	000h,000h,000h,06Ch,06Ch,0FEh,06Ch,06Ch,06Ch,0FEh,06Ch,06Ch,000h,000h ; CHR 23
Db	018h,018h,07Ch,0C6h,0C2h,0C0h,07Ch,006h,006h,086h,0C6h,07Ch,018h,018h ; CHR 24
Db	000h,000h,000h,000h,0C2h,0C6h,00Ch,018h,030h,060h,0C6h,086h,000h,000h ; CHR 25
Db	000h,000h,038h,06Ch,06Ch,038h,076h,0DCh,0CCh,0CCh,0CCh,076h,000h,000h ; CHR 26
Db	000h,030h,030h,030h,060h,000h,000h,000h,000h,000h,000h,000h,000h,000h ; CHR 27
Db	000h,000h,00Ch,018h,030h,030h,030h,030h,030h,030h,018h,00Ch,000h,000h ; CHR 28
Db	000h,000h,030h,018h,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,018h,030h,000h,000h ; CHR 29
Db	000h,000h,000h,000h,000h,066h,03Ch,0FFh,03Ch,066h,000h,000h,000h,000h ; CHR 2A
Db	000h,000h,000h,000h,000h,018h,018h,07Eh,018h,018h,000h,000h,000h,000h ; CHR 2B
Db	000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,018h,018h,030h,000h ; CHR 2C
Db	000h,000h,000h,000h,000h,000h,000h,0FEh,000h,000h,000h,000h,000h,000h ; CHR 2D
Db	000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,018h,000h,000h ; CHR 2E
Db	000h,000h,000h,000h,002h,006h,00Ch,018h,030h,060h,0C0h,080h,000h,000h ; CHR 2F
Db	000h,000h,038h,06Ch,0C6h,0C6h,0D6h,0D6h,0C6h,0C6h,06Ch,038h,000h,000h ; CHR 30
Db	000h,000h,018h,038h,078h,018h,018h,018h,018h,018h,018h,07Eh,000h,000h ; CHR 31
Db	000h,000h,07Ch,0C6h,006h,00Ch,018h,030h,060h,0C0h,0C6h,0FEh,000h,000h ; CHR 32
Db	000h,000h,07Ch,0C6h,006h,006h,03Ch,006h,006h,006h,0C6h,07Ch,000h,000h ; CHR 33
Db	000h,000h,00Ch,01Ch,03Ch,06Ch,0CCh,0FEh,00Ch,00Ch,00Ch,01Eh,000h,000h ; CHR 34
Db	000h,000h,0FEh,0C0h,0C0h,0C0h,0FCh,006h,006h,006h,0C6h,07Ch,000h,000h ; CHR 35
Db	000h,000h,038h,060h,0C0h,0C0h,0FCh,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ; CHR 36
Db	000h,000h,0FEh,0C6h,006h,006h,00Ch,018h,030h,030h,030h,030h,000h,000h ; CHR 37
Db	000h,000h,07Ch,0C6h,0C6h,0C6h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ; CHR 38
Db	000h,000h,07Ch,0C6h,0C6h,0C6h,07Eh,006h,006h,006h,00Ch,078h,000h,000h ; CHR 39
Db	000h,000h,000h,000h,018h,018h,000h,000h,000h,018h,018h,000h,000h,000h ; CHR 3A
Db	000h,000h,000h,000h,018h,018h,000h,000h,000h,018h,018h,030h,000h,000h ; CHR 3B
Db	000h,000h,000h,006h,00Ch,018h,030h,060h,030h,018h,00Ch,006h,000h,000h ; CHR 3C
Db	000h,000h,000h,000h,000h,07Eh,000h,000h,07Eh,000h,000h,000h,000h,000h ; CHR 3D
Db	000h,000h,000h,060h,030h,018h,00Ch,006h,00Ch,018h,030h,060h,000h,000h ; CHR 3E
Db	000h,000h,07Ch,0C6h,0C6h,00Ch,018h,018h,018h,000h,018h,018h,000h,000h ; CHR 3F
Db	000h,000h,000h,07Ch,0C6h,0C6h,0DEh,0DEh,0DCh,0DCh,0C0h,07Ch,000h,000h ; CHR 40
Db	000h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,000h,000h ; CHR 41
Db	000h,000h,0FCh,066h,066h,066h,07Ch,066h,066h,066h,066h,0FCh,000h,000h ; CHR 42
Db	000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0C0h,0C0h,0C2h,066h,03Ch,000h,000h ; CHR 43
Db	000h,000h,0F8h,06Ch,066h,066h,066h,066h,066h,066h,06Ch,0F8h,000h,000h ; CHR 44
Db	000h,000h,0FEh,066h,062h,068h,078h,068h,062h,062h,066h,0FEh,000h,000h ; CHR 45
Db	000h,000h,0FEh,066h,062h,068h,078h,068h,060h,060h,060h,0F0h,000h,000h ; CHR 46
Db	000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0DEh,0C6h,0C6h,066h,03Ah,000h,000h ; CHR 47
Db	000h,000h,0C6h,0C6h,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,0C6h,000h,000h ; CHR 48
Db	000h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h ; CHR 49
Db	000h,000h,01Eh,00Ch,00Ch,00Ch,00Ch,00Ch,0CCh,0CCh,0CCh,078h,000h,000h ; CHR 4A
Db	000h,000h,0E6h,066h,066h,06Ch,078h,078h,06Ch,066h,066h,0E6h,000h,000h ; CHR 4B
Db	000h,000h,0F0h,060h,060h,060h,060h,060h,060h,062h,066h,0FEh,000h,000h ; CHR 4C
Db	000h,000h,0C6h,0EEh,0FEh,0FEh,0D6h,0C6h,0C6h,0C6h,0C6h,0C6h,000h,000h ; CHR 4D
Db	000h,000h,0C6h,0E6h,0F6h,0FEh,0DEh,0CEh,0C6h,0C6h,0C6h,0C6h,000h,000h ; CHR 4E
Db	000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ; CHR 4F
Db	000h,000h,0FCh,066h,066h,066h,07Ch,060h,060h,060h,060h,0F0h,000h,000h ; CHR 50
Db	000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0D6h,0DEh,07Ch,00Ch,00Eh ; CHR 51
Db	000h,000h,0FCh,066h,066h,066h,07Ch,06Ch,066h,066h,066h,0E6h,000h,000h ; CHR 52
Db	000h,000h,07Ch,0C6h,0C6h,060h,038h,00Ch,006h,0C6h,0C6h,07Ch,000h,000h ; CHR 53
Db	000h,000h,07Eh,07Eh,05Ah,018h,018h,018h,018h,018h,018h,03Ch,000h,000h ; CHR 54
Db	000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ; CHR 55
Db	000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,06Ch,038h,010h,000h,000h ; CHR 56
Db	000h,000h,0C6h,0C6h,0C6h,0C6h,0D6h,0D6h,0D6h,0FEh,0EEh,06Ch,000h,000h ; CHR 57
Db	000h,000h,0C6h,0C6h,06Ch,07Ch,038h,038h,07Ch,06Ch,0C6h,0C6h,000h,000h ; CHR 58
Db	000h,000h,066h,066h,066h,066h,03Ch,018h,018h,018h,018h,03Ch,000h,000h ; CHR 59
Db	000h,000h,0FEh,0C6h,086h,00Ch,018h,030h,060h,0C2h,0C6h,0FEh,000h,000h ; CHR 5A
Db	000h,000h,03Ch,030h,030h,030h,030h,030h,030h,030h,030h,03Ch,000h,000h ; CHR 5B
Db	000h,000h,000h,080h,0C0h,0E0h,070h,038h,01Ch,00Eh,006h,002h,000h,000h ; CHR 5C
Db	000h,000h,03Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,03Ch,000h,000h ; CHR 5D
Db	010h,038h,06Ch,0C6h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ; CHR 5E
Db	000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,0FFh ; CHR 5F
Db	030h,030h,018h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ; CHR 60
Db	000h,000h,000h,000h,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h ; CHR 61
Db	000h,000h,0E0h,060h,060h,078h,06Ch,066h,066h,066h,066h,07Ch,000h,000h ; CHR 62
Db	000h,000h,000h,000h,000h,07Ch,0C6h,0C0h,0C0h,0C0h,0C6h,07Ch,000h,000h ; CHR 63
Db	000h,000h,01Ch,00Ch,00Ch,03Ch,06Ch,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ; CHR 64
Db	000h,000h,000h,000h,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h ; CHR 65
Db	000h,000h,01Ch,036h,032h,030h,078h,030h,030h,030h,030h,078h,000h,000h ; CHR 66
Db	000h,000h,000h,000h,000h,076h,0CCh,0CCh,0CCh,0CCh,07Ch,00Ch,0CCh,078h ; CHR 67
Db	000h,000h,0E0h,060h,060h,06Ch,076h,066h,066h,066h,066h,0E6h,000h,000h ; CHR 68
Db	000h,000h,018h,018h,000h,038h,018h,018h,018h,018h,018h,03Ch,000h,000h ; CHR 69
Db	000h,000h,006h,006h,000h,00Eh,006h,006h,006h,006h,006h,066h,066h,03Ch ; CHR 6A
Db	000h,000h,0E0h,060h,060h,066h,06Ch,078h,078h,06Ch,066h,0E6h,000h,000h ; CHR 6B
Db	000h,000h,038h,018h,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h ; CHR 6C
Db	000h,000h,000h,000h,000h,0ECh,0FEh,0D6h,0D6h,0D6h,0D6h,0C6h,000h,000h ; CHR 6D
Db	000h,000h,000h,000h,000h,0DCh,066h,066h,066h,066h,066h,066h,000h,000h ; CHR 6E
Db	000h,000h,000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ; CHR 6F
Db	000h,000h,000h,000h,000h,0DCh,066h,066h,066h,066h,07Ch,060h,060h,0F0h ; CHR 70
Db	000h,000h,000h,000h,000h,076h,0CCh,0CCh,0CCh,0CCh,07Ch,00Ch,00Ch,01Eh ; CHR 71
Db	000h,000h,000h,000h,000h,0DCh,076h,066h,060h,060h,060h,0F0h,000h,000h ; CHR 72
Db	000h,000h,000h,000h,000h,07Ch,0C6h,060h,038h,00Ch,0C6h,07Ch,000h,000h ; CHR 73
Db	000h,000h,010h,030h,030h,0FCh,030h,030h,030h,030h,036h,01Ch,000h,000h ; CHR 74
Db	000h,000h,000h,000h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ; CHR 75
Db	000h,000h,000h,000h,000h,066h,066h,066h,066h,066h,03Ch,018h,000h,000h ; CHR 76
Db	000h,000h,000h,000h,000h,0C6h,0C6h,0D6h,0D6h,0D6h,0FEh,06Ch,000h,000h ; CHR 77
Db	000h,000h,000h,000h,000h,0C6h,06Ch,038h,038h,038h,06Ch,0C6h,000h,000h ; CHR 78
Db	000h,000h,000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,07Eh,006h,00Ch,0F8h ; CHR 79
Db	000h,000h,000h,000h,000h,0FEh,0CCh,018h,030h,060h,0C6h,0FEh,000h,000h ; CHR 7A
Db	000h,000h,00Eh,018h,018h,018h,070h,018h,018h,018h,018h,00Eh,000h,000h ; CHR 7B
Db	000h,000h,018h,018h,018h,018h,000h,018h,018h,018h,018h,018h,000h,000h ; CHR 7C
Db	000h,000h,070h,018h,018h,018h,00Eh,018h,018h,018h,018h,070h,000h,000h ; CHR 7D
Db	000h,000h,076h,0DCh,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ; CHR 7E
Db	000h,000h,000h,000h,010h,038h,06Ch,0C6h,0C6h,0C6h,0FEh,000h,000h,000h ; CHR 7F
Db	000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0C0h,0C2h,066h,03Ch,00Ch,006h,07Ch ; CHR 80
Db	000h,000h,0CCh,000h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ; CHR 81
Db	000h,00Ch,018h,030h,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h ; CHR 82
Db	000h,010h,038h,06Ch,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h ; CHR 83
Db	000h,000h,0CCh,000h,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h ; CHR 84
Db	000h,078h,0CCh,078h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ; CHR 85
Db	000h,00Ch,018h,030h,000h,07Ch,0C6h,0C0h,0C0h,0C0h,0C6h,07Ch,000h,000h ; CHR 86
Db	000h,000h,000h,000h,000h,03Ch,066h,060h,060h,066h,03Ch,00Ch,006h,03Ch ; CHR 87
Db	000h,000h,038h,018h,01Eh,01Ch,018h,038h,078h,0D8h,018h,03Ch,000h,000h ; CHR 88
Db	000h,000h,0C6h,000h,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h ; CHR 89
Db	000h,036h,06Ch,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ; CHR 8A
Db	000h,000h,036h,06Ch,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ; CHR 8B
Db	000h,018h,03Ch,066h,000h,038h,018h,018h,018h,018h,018h,03Ch,000h,000h ; CHR 8C
Db	000h,00Ch,018h,000h,0FEh,086h,00Ch,018h,030h,060h,0C2h,0FEh,000h,000h ; CHR 8D
Db	000h,0C6h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h ; CHR 8E
Db	000h,00Ch,018h,000h,03Ch,066h,0C2h,0C0h,0C0h,0C2h,066h,03Ch,000h,000h ; CHR 8F
Db	000h,030h,060h,000h,0FEh,066h,062h,078h,060h,060h,066h,0FEh,000h,000h ; CHR 90
Db	000h,000h,0F6h,06Ch,060h,060h,060h,060h,060h,062h,066h,0FEh,000h,000h ; CHR 91
Db	000h,006h,0ECh,060h,060h,060h,060h,060h,060h,060h,060h,0F0h,000h,000h ; CHR 92
Db	000h,010h,038h,06Ch,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ; CHR 93
Db	000h,000h,0C6h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ; CHR 94
Db	0D8h,070h,000h,0F0h,060h,060h,060h,060h,060h,062h,066h,0FEh,000h,000h ; CHR 95
Db	000h,01Eh,0ECh,060h,060h,060h,060h,060h,060h,060h,060h,0F0h,000h,000h ; CHR 96
Db	00Ch,018h,000h,07Ch,0C6h,0C6h,060h,038h,00Ch,0C6h,0C6h,07Ch,000h,000h ; CHR 97
Db	000h,000h,00Ch,018h,000h,07Ch,0C6h,060h,038h,00Ch,0C6h,07Ch,000h,000h ; CHR 98
Db	000h,0C6h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ; CHR 99
Db	000h,0C6h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ; CHR 9A
Db	066h,03Ch,018h,07Eh,07Eh,05Ah,018h,018h,018h,018h,018h,03Ch,000h,000h ; CHR 9B
Db	06Ch,038h,000h,010h,030h,030h,0FCh,030h,030h,030h,036h,01Ch,000h,000h ; CHR 9C
Db	000h,000h,078h,030h,03Ch,038h,030h,070h,0F0h,0B2h,036h,07Eh,000h,000h ; CHR 9D
Db	000h,000h,000h,000h,000h,000h,066h,03Ch,018h,03Ch,066h,000h,000h,000h ; CHR 9E
Db	000h,000h,06Ch,038h,000h,07Ch,0C6h,0C0h,0C0h,0C0h,0C6h,07Ch,000h,000h ; CHR 9F
Db	000h,018h,030h,060h,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h ; CHR A0
Db	000h,00Ch,018h,030h,000h,038h,018h,018h,018h,018h,018h,03Ch,000h,000h ; CHR A1
Db	000h,018h,030h,060h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ; CHR A2
Db	000h,018h,030h,060h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ; CHR A3
Db	000h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0CEh,00Ch,006h ; CHR A4
Db	000h,000h,000h,000h,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,00Ch,006h ; CHR A5
Db	000h,066h,03Ch,000h,0FEh,086h,00Ch,018h,030h,060h,0C2h,0FEh,000h,000h ; CHR A6
Db	000h,000h,06Ch,038h,000h,0FEh,0CCh,018h,030h,060h,0C6h,0FEh,000h,000h ; CHR A7
Db	000h,000h,0FEh,066h,062h,068h,078h,068h,062h,062h,066h,0FEh,018h,01Ch ; CHR A8
Db	000h,000h,000h,000h,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,018h,01Ch ; CHR A9
Db	000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ; CHR AA
Db	000h,000h,018h,030h,000h,0FEh,0CCh,018h,030h,060h,0C6h,0FEh,000h,000h ; CHR AB
Db	06Ch,038h,000h,03Ch,066h,0C2h,0C0h,0C0h,0C0h,0C2h,066h,03Ch,000h,000h ; CHR AC
Db	000h,000h,000h,000h,000h,07Ch,0C6h,060h,038h,00Ch,0C6h,07Ch,018h,078h ; CHR AD
Db	000h,000h,000h,000h,000h,036h,06Ch,0D8h,06Ch,036h,000h,000h,000h,000h ; CHR AE
Db	000h,000h,000h,000h,000h,0D8h,06Ch,036h,06Ch,0D8h,000h,000h,000h,000h ; CHR AF
Db	011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h ; CHR B0
Db	055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh ; CHR B1
Db	0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h ; CHR B2
Db	018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h ; CHR B3
Db	018h,018h,018h,018h,018h,018h,018h,0F8h,018h,018h,018h,018h,018h,018h ; CHR B4
Db	00Ch,018h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h ; CHR B5
Db	038h,06Ch,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h ; CHR B6
Db	06Ch,038h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h ; CHR B7
Db	000h,000h,07Ch,0C6h,0C6h,060h,038h,00Ch,006h,0C6h,0C6h,07Ch,018h,070h ; CHR B8
Db	036h,036h,036h,036h,036h,0F6h,006h,0F6h,036h,036h,036h,036h,036h,036h ; CHR B9
Db	036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h ; CHR BA
Db	000h,000h,000h,000h,000h,0FEh,006h,0F6h,036h,036h,036h,036h,036h,036h ; CHR BB
Db	036h,036h,036h,036h,036h,0F6h,006h,0FEh,000h,000h,000h,000h,000h,000h ; CHR BC
Db	010h,038h,010h,0FEh,086h,00Ch,018h,030h,060h,0C2h,0C2h,0FEh,000h,000h ; CHR BD
Db	000h,000h,010h,038h,010h,0FEh,0CCh,018h,030h,060h,0C6h,0FEh,000h,000h ; CHR BE
Db	000h,000h,000h,000h,000h,000h,000h,0F8h,018h,018h,018h,018h,018h,018h ; CHR BF
Db	018h,018h,018h,018h,018h,018h,018h,01Fh,000h,000h,000h,000h,000h,000h ; CHR C0
Db	018h,018h,018h,018h,018h,018h,018h,0FFh,000h,000h,000h,000h,000h,000h ; CHR C1
Db	000h,000h,000h,000h,000h,000h,000h,0FFh,018h,018h,018h,018h,018h,018h ; CHR C2
Db	018h,018h,018h,018h,018h,018h,018h,01Fh,018h,018h,018h,018h,018h,018h ; CHR C3
Db	000h,000h,000h,000h,000h,000h,000h,0FFh,000h,000h,000h,000h,000h,000h ; CHR C4
Db	018h,018h,018h,018h,018h,018h,018h,0FFh,018h,018h,018h,018h,018h,018h ; CHR C5
Db	0C6h,07Ch,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h ; CHR C6
Db	000h,000h,0CCh,078h,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h ; CHR C7
Db	036h,036h,036h,036h,036h,037h,030h,03Fh,000h,000h,000h,000h,000h,000h ; CHR C8
Db	000h,000h,000h,000h,000h,03Fh,030h,037h,036h,036h,036h,036h,036h,036h ; CHR C9
Db	036h,036h,036h,036h,036h,0F7h,000h,0FFh,000h,000h,000h,000h,000h,000h ; CHR CA
Db	000h,000h,000h,000h,000h,0FFh,000h,0F7h,036h,036h,036h,036h,036h,036h ; CHR CB
Db	036h,036h,036h,036h,036h,037h,030h,037h,036h,036h,036h,036h,036h,036h ; CHR CC
Db	000h,000h,000h,000h,000h,0FFh,000h,0FFh,000h,000h,000h,000h,000h,000h ; CHR CD
Db	036h,036h,036h,036h,036h,0F7h,000h,0F7h,036h,036h,036h,036h,036h,036h ; CHR CE
Db	000h,000h,000h,000h,000h,0C6h,07Ch,0C6h,0C6h,0C6h,07Ch,0C6h,000h,000h ; CHR CF
Db	000h,000h,00Ch,07Eh,07Eh,00Ch,03Ch,06Ch,0CCh,0CCh,0CCh,076h,000h,000h ; CHR D0
Db	000h,000h,0F8h,06Ch,066h,066h,0F6h,0F6h,066h,066h,06Ch,0F8h,000h,000h ; CHR D1
Db	0CCh,078h,000h,0F8h,06Ch,066h,066h,066h,066h,066h,06Ch,0F8h,000h,000h ; CHR D2
Db	000h,06Ch,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h ; CHR D3
Db	000h,0D8h,07Ch,02Ch,00Ch,03Ch,06Ch,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ; CHR D4
Db	06Ch,038h,000h,0C6h,0E6h,0F6h,0FEh,0DEh,0CEh,0C6h,0C6h,0C6h,000h,000h ; CHR D5
Db	00Ch,018h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h ; CHR D6
Db	03Ch,066h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h ; CHR D7
Db	000h,000h,06Ch,038h,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h ; CHR D8
Db	018h,018h,018h,018h,018h,018h,018h,0F8h,000h,000h,000h,000h,000h,000h ; CHR D9
Db	000h,000h,000h,000h,000h,000h,000h,01Fh,018h,018h,018h,018h,018h,018h ; CHR DA
Db	0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; CHR Db
Db	000h,000h,000h,000h,000h,000h,000h,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; CHR DC
Db	000h,000h,07Eh,07Eh,05Ah,018h,018h,018h,018h,018h,018h,03Ch,00Ch,038h ; CHR DD
Db	038h,06Ch,038h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ; CHR DE
Db	0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,000h,000h,000h,000h,000h,000h,000h ; CHR DF
Db	018h,030h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ; CHR E0
Db	000h,000h,078h,0CCh,0CCh,0CCh,0D8h,0CCh,0C6h,0C6h,0C6h,0CCh,000h,000h ; CHR E1
Db	038h,06Ch,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ; CHR E2
Db	018h,030h,000h,0C6h,0E6h,0F6h,0FEh,0DEh,0CEh,0C6h,0C6h,0C6h,000h,000h ; CHR E3
Db	000h,000h,018h,030h,000h,0DCh,066h,066h,066h,066h,066h,066h,000h,000h ; CHR E4
Db	000h,000h,06Ch,038h,000h,0DCh,066h,066h,066h,066h,066h,066h,000h,000h ; CHR E5
Db	06Ch,038h,000h,07Ch,0C6h,0C6h,060h,038h,00Ch,006h,0C6h,07Ch,000h,000h ; CHR E6
Db	000h,000h,06Ch,038h,000h,07Ch,0C6h,060h,038h,00Ch,0C6h,07Ch,000h,000h ; CHR E7
Db	00Ch,018h,000h,0FCh,066h,066h,066h,07Ch,06Ch,066h,066h,0E6h,000h,000h ; CHR E8
Db	018h,030h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ; CHR E9
Db	000h,00Ch,018h,030h,000h,0DCh,076h,066h,060h,060h,060h,0F0h,000h,000h ; CHR EA
Db	036h,06Ch,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ; CHR EB
Db	000h,00Ch,018h,030h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,07Eh,006h,00Ch,0F8h ; CHR EC
Db	00Ch,018h,000h,066h,066h,066h,066h,03Ch,018h,018h,018h,03Ch,000h,000h ; CHR ED
Db	000h,000h,010h,030h,030h,0FCh,030h,030h,030h,030h,036h,01Ch,00Ch,038h ; CHR EE
Db	000h,00Ch,018h,030h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ; CHR EF
Db	000h,000h,000h,000h,000h,000h,000h,07Eh,000h,000h,000h,000h,000h,000h ; CHR F0
Db	000h,036h,06Ch,0D8h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ; CHR F1
Db	000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,030h,030h,01Ch ; CHR F2
Db	000h,06Ch,038h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ; CHR F3
Db	000h,0C6h,07Ch,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ; CHR F4
Db	000h,07Ch,0C6h,060h,038h,06Ch,0C6h,0C6h,06Ch,038h,0CEh,0C6h,07Ch,000h ; CHR F5
Db	000h,000h,000h,000h,018h,018h,000h,07Eh,000h,018h,018h,000h,000h,000h ; CHR F6
Db	000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,018h,070h ; CHR F7
Db	000h,038h,06Ch,06Ch,038h,000h,000h,000h,000h,000h,000h,000h,000h,000h ; CHR F8
Db	000h,06Ch,06Ch,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ; CHR F9
Db	000h,018h,018h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ; CHR FA
Db	000h,000h,06Ch,0D8h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ; CHR FB
Db	06Ch,038h,000h,0FCh,066h,066h,066h,07Ch,06Ch,066h,066h,0E6h,000h,000h ; CHR FC
Db	000h,000h,06Ch,038h,000h,0DCh,076h,066h,060h,060h,060h,0F0h,000h,000h ; CHR FD
Db	000h,000h,000h,000h,07Ch,07Ch,07Ch,07Ch,07Ch,07Ch,07Ch,000h,000h,000h ; CHR FE
Db	000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ; CHR FF


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\ega\852-8x16.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
;***************************************************
;  CHARACTER FONT FILE
;  Source Assembler File
;
;        CODE PAGE: 850 
;  FONT RESOLUTION: 8 x 16 
;
;     DATE CREATED:05-28-1987
;
;
; Output file from: MULTIFON, Version 1A
;
;***************************************************
	Db	000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ; CHR 00
	Db	000h,000h,07Eh,081h,0A5h,081h,081h,0BDh,099h,081h,081h,07Eh,000h,000h,000h,000h ; CHR 01
	Db	000h,000h,07Eh,0FFh,0Dbh,0FFh,0FFh,0C3h,0E7h,0FFh,0FFh,07Eh,000h,000h,000h,000h ; CHR 02
	Db	000h,000h,000h,000h,06Ch,0FEh,0FEh,0FEh,0FEh,07Ch,038h,010h,000h,000h,000h,000h ; CHR 03
	Db	000h,000h,000h,000h,010h,038h,07Ch,0FEh,07Ch,038h,010h,000h,000h,000h,000h,000h ; CHR 04
	Db	000h,000h,000h,018h,03Ch,03Ch,0E7h,0E7h,0E7h,018h,018h,03Ch,000h,000h,000h,000h ; CHR 05
	Db	000h,000h,000h,018h,03Ch,07Eh,0FFh,0FFh,07Eh,018h,018h,03Ch,000h,000h,000h,000h ; CHR 06
	Db	000h,000h,000h,000h,000h,000h,018h,03Ch,03Ch,018h,000h,000h,000h,000h,000h,000h ; CHR 07
	Db	0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0E7h,0C3h,0C3h,0E7h,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; CHR 08
	Db	000h,000h,000h,000h,000h,03Ch,066h,042h,042h,066h,03Ch,000h,000h,000h,000h,000h ; CHR 09
	Db	0FFh,0FFh,0FFh,0FFh,0FFh,0C3h,099h,0BDh,0BDh,099h,0C3h,0FFh,0FFh,0FFh,0FFh,0FFh ; CHR 0A
	Db	000h,000h,01Eh,00Eh,01Ah,032h,078h,0CCh,0CCh,0CCh,0CCh,078h,000h,000h,000h,000h ; CHR 0B
	Db	000h,000h,03Ch,066h,066h,066h,066h,03Ch,018h,07Eh,018h,018h,000h,000h,000h,000h ; CHR 0C
	Db	000h,000h,03Eh,036h,03Eh,030h,030h,030h,030h,070h,0F0h,0E0h,000h,000h,000h,000h ; CHR 0D
	Db	000h,000h,07Eh,066h,07Eh,066h,066h,066h,066h,06Eh,0EEh,0ECh,0C0h,000h,000h,000h ; CHR 0E
	Db	000h,000h,000h,018h,018h,0Dbh,03Ch,0E7h,03Ch,0Dbh,018h,018h,000h,000h,000h,000h ; CHR 0F
	Db	000h,080h,0C0h,0E0h,0F0h,0F8h,0FEh,0F8h,0F0h,0E0h,0C0h,080h,000h,000h,000h,000h ; CHR 10
	Db	000h,002h,006h,00Eh,01Eh,03Eh,0FEh,03Eh,01Eh,00Eh,006h,002h,000h,000h,000h,000h ; CHR 11
	Db	000h,000h,018h,03Ch,07Eh,018h,018h,018h,07Eh,03Ch,018h,000h,000h,000h,000h,000h ; CHR 12
	Db	000h,000h,066h,066h,066h,066h,066h,066h,066h,000h,066h,066h,000h,000h,000h,000h ; CHR 13
	Db	000h,000h,07Fh,0Dbh,0Dbh,0Dbh,07Bh,01Bh,01Bh,01Bh,01Bh,01Bh,000h,000h,000h,000h ; CHR 14
	Db	000h,07Ch,0C6h,060h,038h,06Ch,0C6h,0C6h,06Ch,038h,00Ch,0C6h,07Ch,000h,000h,000h ; CHR 15
	Db	000h,000h,000h,000h,000h,000h,000h,000h,0FEh,0FEh,0FEh,0FEh,000h,000h,000h,000h ; CHR 16
	Db	000h,000h,018h,03Ch,07Eh,018h,018h,018h,07Eh,03Ch,018h,07Eh,000h,000h,000h,000h ; CHR 17
	Db	000h,000h,018h,03Ch,07Eh,018h,018h,018h,018h,018h,018h,018h,000h,000h,000h,000h ; CHR 18
	Db	000h,000h,018h,018h,018h,018h,018h,018h,018h,07Eh,03Ch,018h,000h,000h,000h,000h ; CHR 19
	Db	000h,000h,000h,000h,000h,018h,00Ch,0FEh,00Ch,018h,000h,000h,000h,000h,000h,000h ; CHR 1A
	Db	000h,000h,000h,000h,000h,030h,060h,0FCh,060h,030h,000h,000h,000h,000h,000h,000h ; CHR 1B
	Db	000h,000h,000h,000h,000h,000h,0C0h,0C0h,0C0h,0FEh,000h,000h,000h,000h,000h,000h ; CHR 1C
	Db	000h,000h,000h,000h,000h,028h,06Ch,0FEh,06Ch,028h,000h,000h,000h,000h,000h,000h ; CHR 1D
	Db	000h,000h,000h,000h,010h,038h,038h,07Ch,07Ch,0FEh,0FEh,000h,000h,000h,000h,000h ; CHR 1E
	Db	000h,000h,000h,000h,0FEh,0FEh,07Ch,07Ch,038h,038h,010h,000h,000h,000h,000h,000h ; CHR 1F
	Db	000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ; CHR 20
	Db	000h,000h,018h,03Ch,03Ch,03Ch,018h,018h,018h,000h,018h,018h,000h,000h,000h,000h ; CHR 21
	Db	000h,0C6h,0C6h,0C6h,044h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ; CHR 22
	Db	000h,000h,000h,06Ch,06Ch,0FEh,06Ch,06Ch,06Ch,0FEh,06Ch,06Ch,000h,000h,000h,000h ; CHR 23
	Db	018h,018h,07Ch,0C6h,0C2h,0C0h,07Ch,006h,006h,086h,0C6h,07Ch,018h,018h,000h,000h ; CHR 24
	Db	000h,000h,000h,000h,0C2h,0C6h,00Ch,018h,030h,060h,0C6h,086h,000h,000h,000h,000h ; CHR 25
	Db	000h,000h,038h,06Ch,06Ch,038h,076h,0DCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ; CHR 26
	Db	000h,030h,030h,030h,060h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ; CHR 27
	Db	000h,000h,00Ch,018h,030h,030h,030h,030h,030h,030h,018h,00Ch,000h,000h,000h,000h ; CHR 28
	Db	000h,000h,030h,018h,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,018h,030h,000h,000h,000h,000h ; CHR 29
	Db	000h,000h,000h,000h,000h,066h,03Ch,0FFh,03Ch,066h,000h,000h,000h,000h,000h,000h ; CHR 2A
	Db	000h,000h,000h,000h,000h,018h,018h,07Eh,018h,018h,000h,000h,000h,000h,000h,000h ; CHR 2B
	Db	000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,018h,018h,030h,000h,000h,000h ; CHR 2C
	Db	000h,000h,000h,000h,000h,000h,000h,0FEh,000h,000h,000h,000h,000h,000h,000h,000h ; CHR 2D
	Db	000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,018h,000h,000h,000h,000h ; CHR 2E
	Db	000h,000h,000h,000h,002h,006h,00Ch,018h,030h,060h,0C0h,080h,000h,000h,000h,000h ; CHR 2F
	Db	000h,000h,038h,06Ch,0C6h,0C6h,0D6h,0D6h,0C6h,0C6h,06Ch,038h,000h,000h,000h,000h ; CHR 30
	Db	000h,000h,018h,038h,078h,018h,018h,018h,018h,018h,018h,07Eh,000h,000h,000h,000h ; CHR 31
	Db	000h,000h,07Ch,0C6h,006h,00Ch,018h,030h,060h,0C0h,0C6h,0FEh,000h,000h,000h,000h ; CHR 32
	Db	000h,000h,07Ch,0C6h,006h,006h,03Ch,006h,006h,006h,0C6h,07Ch,000h,000h,000h,000h ; CHR 33
	Db	000h,000h,00Ch,01Ch,03Ch,06Ch,0CCh,0FEh,00Ch,00Ch,00Ch,01Eh,000h,000h,000h,000h ; CHR 34
	Db	000h,000h,0FEh,0C0h,0C0h,0C0h,0FCh,006h,006h,006h,0C6h,07Ch,000h,000h,000h,000h ; CHR 35
	Db	000h,000h,038h,060h,0C0h,0C0h,0FCh,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ; CHR 36
	Db	000h,000h,0FEh,0C6h,006h,00Ch,018h,030h,030h,030h,030h,030h,000h,000h,000h,000h ; CHR 37
	Db	000h,000h,07Ch,0C6h,0C6h,0C6h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ; CHR 38
	Db	000h,000h,07Ch,0C6h,0C6h,0C6h,07Eh,006h,006h,006h,00Ch,078h,000h,000h,000h,000h ; CHR 39
	Db	000h,000h,000h,000h,018h,018h,000h,000h,000h,018h,018h,000h,000h,000h,000h,000h ; CHR 3A
	Db	000h,000h,000h,000h,018h,018h,000h,000h,000h,018h,018h,030h,000h,000h,000h,000h ; CHR 3B
	Db	000h,000h,000h,006h,00Ch,018h,030h,060h,030h,018h,00Ch,006h,000h,000h,000h,000h ; CHR 3C
	Db	000h,000h,000h,000h,000h,07Eh,000h,000h,07Eh,000h,000h,000h,000h,000h,000h,000h ; CHR 3D
	Db	000h,000h,000h,060h,030h,018h,00Ch,006h,00Ch,018h,030h,060h,000h,000h,000h,000h ; CHR 3E
	Db	000h,000h,07Ch,0C6h,0C6h,00Ch,018h,018h,018h,000h,018h,018h,000h,000h,000h,000h ; CHR 3F
	Db	000h,000h,000h,07Ch,0C6h,0C6h,0DEh,0DEh,0DEh,0DCh,0C0h,07Ch,000h,000h,000h,000h ; CHR 40
	Db	000h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ; CHR 41
	Db	000h,000h,0FCh,066h,066h,066h,07Ch,066h,066h,066h,066h,0FCh,000h,000h,000h,000h ; CHR 42
	Db	000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0C0h,0C0h,0C2h,066h,03Ch,000h,000h,000h,000h ; CHR 43
	Db	000h,000h,0F8h,06Ch,066h,066h,066h,066h,066h,066h,06Ch,0F8h,000h,000h,000h,000h ; CHR 44
	Db	000h,000h,0FEh,066h,062h,068h,078h,068h,060h,062h,066h,0FEh,000h,000h,000h,000h ; CHR 45
	Db	000h,000h,0FEh,066h,062h,068h,078h,068h,060h,060h,060h,0F0h,000h,000h,000h,000h ; CHR 46
	Db	000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0DEh,0C6h,0C6h,066h,03Ah,000h,000h,000h,000h ; CHR 47
	Db	000h,000h,0C6h,0C6h,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ; CHR 48
	Db	000h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ; CHR 49
	Db	000h,000h,01Eh,00Ch,00Ch,00Ch,00Ch,00Ch,0CCh,0CCh,0CCh,078h,000h,000h,000h,000h ; CHR 4A
	Db	000h,000h,0E6h,066h,066h,06Ch,078h,078h,06Ch,066h,066h,0E6h,000h,000h,000h,000h ; CHR 4B
	Db	000h,000h,0F0h,060h,060h,060h,060h,060h,060h,062h,066h,0FEh,000h,000h,000h,000h ; CHR 4C
	Db	000h,000h,0C6h,0EEh,0FEh,0FEh,0D6h,0C6h,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ; CHR 4D
	Db	000h,000h,0C6h,0E6h,0F6h,0FEh,0DEh,0CEh,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ; CHR 4E
	Db	000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ; CHR 4F
	Db	000h,000h,0FCh,066h,066h,066h,07Ch,060h,060h,060h,060h,0F0h,000h,000h,000h,000h ; CHR 50
	Db	000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0D6h,0DEh,07Ch,00Ch,00Eh,000h,000h ; CHR 51
	Db	000h,000h,0FCh,066h,066h,066h,07Ch,06Ch,066h,066h,066h,0F6h,000h,000h,000h,000h ; CHR 52
	Db	000h,000h,07Ch,0C6h,0C6h,060h,038h,00Ch,006h,0C6h,0C6h,07Ch,000h,000h,000h,000h ; CHR 53
	Db	000h,000h,07Eh,07Eh,05Ah,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ; CHR 54
	Db	000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ; CHR 55
	Db	000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,06Ch,038h,010h,000h,000h,000h,000h ; CHR 56
	Db	000h,000h,0C6h,0C6h,0C6h,0C6h,0D6h,0D6h,0D6h,0FEh,0EEh,06Ch,000h,000h,000h,000h ; CHR 57
	Db	000h,000h,0C6h,0C6h,06Ch,07Ch,038h,038h,07Ch,06Ch,0C6h,0C6h,000h,000h,000h,000h ; CHR 58
	Db	000h,000h,066h,066h,066h,066h,03Ch,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ; CHR 59
	Db	000h,000h,0FEh,0C6h,086h,00Ch,018h,030h,060h,0C2h,0C6h,0FEh,000h,000h,000h,000h ; CHR 5A
	Db	000h,000h,03Ch,030h,030h,030h,030h,030h,030h,030h,030h,03Ch,000h,000h,000h,000h ; CHR 5B
	Db	000h,000h,000h,080h,0C0h,0E0h,070h,038h,01Ch,00Eh,006h,002h,000h,000h,000h,000h ; CHR 5C
	Db	000h,000h,03Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,03Ch,000h,000h,000h,000h ; CHR 5D
	Db	010h,038h,06Ch,0C6h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ; CHR 5E
	Db	000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,0FFh,000h,000h ; CHR 5F
	Db	030h,030h,018h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ; CHR 60
	Db	000h,000h,000h,000h,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ; CHR 61
	Db	000h,000h,0E0h,060h,060h,078h,06Ch,066h,066h,066h,066h,07Ch,000h,000h,000h,000h ; CHR 62
	Db	000h,000h,000h,000h,000h,07Ch,0C6h,0C0h,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ; CHR 63
	Db	000h,000h,01Ch,00Ch,00Ch,03Ch,06Ch,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ; CHR 64
	Db	000h,000h,000h,000h,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ; CHR 65
	Db	000h,000h,01Ch,036h,032h,030h,078h,030h,030h,030h,030h,078h,000h,000h,000h,000h ; CHR 66
	Db	000h,000h,000h,000h,000h,076h,0CCh,0CCh,0CCh,0CCh,0CCh,07Ch,00Ch,0CCh,078h,000h ; CHR 67
	Db	000h,000h,0E0h,060h,060h,06Ch,076h,066h,066h,066h,066h,0E6h,000h,000h,000h,000h ; CHR 68
	Db	000h,000h,018h,018h,000h,038h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ; CHR 69
	Db	000h,000h,006h,006h,000h,00Eh,006h,006h,006h,006h,006h,006h,066h,066h,03Ch,000h ; CHR 6A
	Db	000h,000h,0E0h,060h,060h,066h,06Ch,078h,078h,06Ch,066h,0E6h,000h,000h,000h,000h ; CHR 6B
	Db	000h,000h,038h,018h,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ; CHR 6C
	Db	000h,000h,000h,000h,000h,0ECh,0FEh,0D6h,0D6h,0D6h,0D6h,0C6h,000h,000h,000h,000h ; CHR 6D
	Db	000h,000h,000h,000h,000h,0DCh,066h,066h,066h,066h,066h,066h,000h,000h,000h,000h ; CHR 6E
	Db	000h,000h,000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ; CHR 6F
	Db	000h,000h,000h,000h,000h,0DCh,066h,066h,066h,066h,066h,07Ch,060h,060h,0F0h,000h ; CHR 70
	Db	000h,000h,000h,000h,000h,076h,0CCh,0CCh,0CCh,0CCh,0CCh,07Ch,00Ch,00Ch,01Eh,000h ; CHR 71
	Db	000h,000h,000h,000h,000h,0DCh,076h,066h,060h,060h,060h,0F0h,000h,000h,000h,000h ; CHR 72
	Db	000h,000h,000h,000h,000h,07Ch,0C6h,060h,038h,00Ch,0C6h,07Ch,000h,000h,000h,000h ; CHR 73
	Db	000h,000h,010h,030h,030h,0FCh,030h,030h,030h,030h,036h,01Ch,000h,000h,000h,000h ; CHR 74
	Db	000h,000h,000h,000h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ; CHR 75
	Db	000h,000h,000h,000h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,078h,030h,000h,000h,000h,000h ; CHR 76
	Db	000h,000h,000h,000h,000h,0C6h,0C6h,0D6h,0D6h,0D6h,0FEh,06Ch,000h,000h,000h,000h ; CHR 77
	Db	000h,000h,000h,000h,000h,0C6h,06Ch,038h,038h,038h,06Ch,0C6h,000h,000h,000h,000h ; CHR 78
	Db	000h,000h,000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Eh,006h,00Ch,0F8h,000h ; CHR 79
	Db	000h,000h,000h,000h,000h,0FEh,0CCh,018h,030h,060h,0C6h,0FEh,000h,000h,000h,000h ; CHR 7A
	Db	000h,000h,00Eh,018h,018h,018h,070h,018h,018h,018h,018h,00Eh,000h,000h,000h,000h ; CHR 7B
	Db	000h,000h,018h,018h,018h,018h,000h,018h,018h,018h,018h,018h,000h,000h,000h,000h ; CHR 7C
	Db	000h,000h,070h,018h,018h,018h,00Eh,018h,018h,018h,018h,070h,000h,000h,000h,000h ; CHR 7D
	Db	000h,000h,076h,0DCh,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ; CHR 7E
	Db	000h,000h,000h,000h,010h,038h,06Ch,0C6h,0C6h,0C6h,0FEh,000h,000h,000h,000h,000h ; CHR 7F
	Db	000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0C0h,0C0h,0C2h,066h,03Ch,00Ch,006h,07Ch,000h ; CHR 80
	Db	000h,000h,0CCh,000h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ; CHR 81
	Db	000h,00Ch,018h,030h,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ; CHR 82
	Db	000h,010h,038h,06Ch,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ; CHR 83
	Db	000h,000h,0CCh,000h,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ; CHR 84
	Db	000h,078h,0CCh,078h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ; CHR 85
	Db	000h,00Ch,018h,030h,000h,07Ch,0C6h,0C0h,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ; CHR 86
	Db	000h,000h,000h,000h,000h,07Ch,0C6h,0C0h,0C0h,0C0h,0C6h,07Ch,018h,00Ch,078h,000h ; CHR 87
	Db	000h,000h,038h,01Ah,01Eh,01Ch,018h,038h,078h,058h,018h,03Ch,000h,000h,000h,000h ; CHR 88
	Db	000h,000h,0C6h,000h,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ; CHR 89
	Db	036h,06Ch,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ; CHR 8A
	Db	000h,000h,036h,06Ch,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ; CHR 8B
	Db	000h,018h,03Ch,066h,000h,038h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ; CHR 8C
	Db	018h,030h,000h,0FEh,086h,00Ch,018h,030h,060h,0C2h,0C6h,0FEh,000h,000h,000h,000h ; CHR 8D
	Db	000h,0C6h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ; CHR 8E
	Db	00Ch,018h,000h,03Ch,066h,0C2h,0C0h,0C0h,0C0h,0C2h,066h,03Ch,000h,000h,000h,000h ; CHR 8F
	Db	018h,030h,060h,000h,0FEh,066h,060h,078h,060h,062h,066h,0FEh,000h,000h,000h,000h ; CHR 90
	Db	000h,000h,0F6h,06Ch,060h,060h,060h,060h,060h,062h,066h,0FEh,000h,000h,000h,000h ; CHR 91
	Db	000h,000h,0E6h,06Ch,060h,060h,060h,060h,060h,060h,060h,0F0h,000h,000h,000h,000h ; CHR 92
	Db	000h,010h,038h,06Ch,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ; CHR 93
	Db	000h,000h,0C6h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ; CHR 94
	Db	000h,01Bh,0EEh,060h,060h,060h,060h,060h,060h,062h,066h,0FEh,000h,000h,000h,000h ; CHR 95
	Db	000h,01Bh,0EEh,060h,060h,060h,060h,060h,060h,060h,060h,0F0h,000h,000h,000h,000h ; CHR 96
	Db	018h,030h,000h,07Ch,0C6h,0C6h,060h,038h,00Ch,0C6h,0C6h,07Ch,000h,000h,000h,000h ; CHR 97
	Db	000h,000h,00Ch,018h,000h,07Ch,0C6h,060h,038h,00Ch,0C6h,07Ch,000h,000h,000h,000h ; CHR 98
	Db	000h,0C6h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ; CHR 99
	Db	000h,0C6h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ; CHR 9A
	Db	066h,03Ch,000h,07Eh,07Eh,05Ah,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ; CHR 9B
	Db	06Ch,038h,000h,010h,030h,030h,0FCh,030h,030h,030h,036h,01Ch,000h,000h,000h,000h ; CHR 9C
	Db	000h,000h,0F0h,064h,06Ch,078h,070h,0E0h,0E0h,062h,066h,0FEh,000h,000h,000h,000h ; CHR 9D
	Db	000h,000h,000h,000h,000h,000h,0C6h,06Ch,038h,06Ch,0C6h,000h,000h,000h,000h,000h ; CHR 9E
	Db	000h,000h,06Ch,038h,000h,07Ch,0C6h,0C0h,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ; CHR 9F
	Db	000h,018h,030h,060h,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ; CHR A0
	Db	000h,00Ch,018h,030h,000h,038h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ; CHR A1
	Db	000h,018h,030h,060h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ; CHR A2
	Db	000h,018h,030h,060h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ; CHR A3
	Db	000h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,018h,030h,01Eh,000h ; CHR A4
	Db	000h,000h,000h,000h,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,018h,030h,01Eh,000h ; CHR A5
	Db	06Ch,038h,000h,0FEh,0C6h,08Ch,018h,030h,060h,0C2h,0C6h,0FEh,000h,000h,000h,000h ; CHR A6
	Db	000h,000h,06Ch,038h,000h,0FEh,0CCh,018h,030h,060h,0C6h,0FEh,000h,000h,000h,000h ; CHR A7
	Db	000h,000h,0FEh,066h,062h,068h,078h,068h,060h,062h,066h,0FEh,018h,030h,01Eh,000h ; CHR A8
	Db	000h,000h,000h,000h,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,030h,060h,03Ch,000h ; CHR A9
	Db	000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ; CHR AA
	Db	000h,00Ch,018h,030h,000h,0FEh,0CCh,018h,030h,060h,0C6h,0FEh,000h,000h,000h,000h ; CHR AB
	Db	066h,03Ch,000h,03Ch,066h,0C2h,0C0h,0C0h,0C0h,0C2h,066h,03Ch,000h,000h,000h,000h ; CHR AC
	Db	000h,000h,000h,000h,000h,07Ch,0C6h,060h,038h,00Ch,0C6h,07Ch,018h,00Ch,078h,000h ; CHR AD
	Db	000h,000h,000h,000h,000h,036h,06Ch,0D8h,06Ch,036h,000h,000h,000h,000h,000h,000h ; CHR AE
	Db	000h,000h,000h,000h,000h,06Ch,036h,01Bh,036h,06Ch,000h,000h,000h,000h,000h,000h ; CHR AF
	Db	011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h ; CHR B0
	Db	055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh ; CHR B1
	Db	0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h ; CHR B2
	Db	018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h ; CHR B3
	Db	018h,018h,018h,018h,018h,018h,018h,0F8h,018h,018h,018h,018h,018h,018h,018h,018h ; CHR B4
	Db	018h,030h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h,000h,000h ; CHR B5
	Db	038h,06Ch,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h,000h,000h ; CHR B6
	Db	06Ch,038h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h,000h,000h ; CHR B7
	Db	000h,000h,07Ch,0C6h,0C6h,060h,038h,00Ch,006h,0C6h,0C6h,07Ch,018h,00Ch,078h,000h ; CHR B8
	Db	036h,036h,036h,036h,036h,0F6h,006h,0F6h,036h,036h,036h,036h,036h,036h,036h,036h ; CHR B9
	Db	036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h ; CHR BA
	Db	000h,000h,000h,000h,000h,0FEh,006h,0F6h,036h,036h,036h,036h,036h,036h,036h,036h ; CHR BB
	Db	036h,036h,036h,036h,036h,0F6h,006h,0FEh,000h,000h,000h,000h,000h,000h,000h,000h ; CHR BC
	Db	018h,018h,000h,0FEh,086h,00Ch,018h,030h,060h,0C2h,0C6h,0FEh,000h,000h,000h,000h ; CHR BD
	Db	000h,000h,018h,018h,000h,0FEh,0CCh,018h,030h,060h,0C6h,0FEh,000h,000h,000h,000h ; CHR BE
	Db	000h,000h,000h,000h,000h,000h,000h,0F8h,018h,018h,018h,018h,018h,018h,018h,018h ; CHR BF
	Db	018h,018h,018h,018h,018h,018h,018h,01Fh,000h,000h,000h,000h,000h,000h,000h,000h ; CHR C0
	Db	018h,018h,018h,018h,018h,018h,018h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ; CHR C1
	Db	000h,000h,000h,000h,000h,000h,000h,0FFh,018h,018h,018h,018h,018h,018h,018h,018h ; CHR C2
	Db	018h,018h,018h,018h,018h,018h,018h,01Fh,018h,018h,018h,018h,018h,018h,018h,018h ; CHR C3
	Db	000h,000h,000h,000h,000h,000h,000h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ; CHR C4
	Db	018h,018h,018h,018h,018h,018h,018h,0FFh,018h,018h,018h,018h,018h,018h,018h,018h ; CHR C5
	Db	0C6h,07Ch,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h,000h,000h ; CHR C6
	Db	000h,000h,0C6h,07Ch,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ; CHR C7
	Db	036h,036h,036h,036h,036h,037h,030h,03Fh,000h,000h,000h,000h,000h,000h,000h,000h ; CHR C8
	Db	000h,000h,000h,000h,000h,03Fh,030h,037h,036h,036h,036h,036h,036h,036h,036h,036h ; CHR C9
	Db	036h,036h,036h,036h,036h,0F7h,000h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ; CHR CA
	Db	000h,000h,000h,000h,000h,0FFh,000h,0F7h,036h,036h,036h,036h,036h,036h,036h,036h ; CHR CB
	Db	036h,036h,036h,036h,036h,037h,030h,037h,036h,036h,036h,036h,036h,036h,036h,036h ; CHR CC
	Db	000h,000h,000h,000h,000h,0FFh,000h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ; CHR CD
	Db	036h,036h,036h,036h,036h,0F7h,000h,0F7h,036h,036h,036h,036h,036h,036h,036h,036h ; CHR CE
	Db	000h,000h,000h,000h,000h,0C6h,07Ch,0C6h,0C6h,0C6h,07Ch,0C6h,000h,000h,000h,000h ; CHR CF
	Db	000h,000h,00Ch,00Ch,07Eh,00Ch,03Ch,06Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ; CHR D0
	Db	000h,000h,0F8h,06Ch,066h,066h,0F6h,066h,066h,066h,06Ch,0F8h,000h,000h,000h,000h ; CHR D1
	Db	06Ch,038h,000h,0F8h,06Ch,066h,066h,066h,066h,066h,06Ch,0F8h,000h,000h,000h,000h ; CHR D2
	Db	06Ch,000h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h,000h,000h ; CHR D3
	Db	06Ch,038h,000h,01Ch,00Ch,00Ch,03Ch,06Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ; CHR D4
	Db	06Ch,038h,000h,0C6h,0E6h,0F6h,0FEh,0DEh,0CEh,0C6h,0C6h,0C6h,000h,000h,000h,000h ; CHR D5
	Db	00Ch,018h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ; CHR D6
	Db	03Ch,066h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ; CHR D7
	Db	000h,000h,066h,03Ch,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ; CHR D8
	Db	018h,018h,018h,018h,018h,018h,018h,0F8h,000h,000h,000h,000h,000h,000h,000h,000h ; CHR D9
	Db	000h,000h,000h,000h,000h,000h,000h,01Fh,018h,018h,018h,018h,018h,018h,018h,018h ; CHR DA
	Db	0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; CHR Db
	Db	000h,000h,000h,000h,000h,000h,000h,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; CHR DC
	Db	000h,000h,07Eh,07Eh,05Ah,018h,018h,018h,018h,018h,018h,03Ch,018h,00Ch,078h,000h ; CHR DD
	Db	038h,06Ch,038h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ; CHR DE
	Db	0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,000h,000h,000h,000h,000h,000h,000h,000h,000h ; CHR DF
	Db	00Ch,018h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ; CHR E0
	Db	000h,000h,078h,0CCh,0CCh,0CCh,0D8h,0CCh,0C6h,0C6h,0C6h,0CCh,000h,000h,000h,000h ; CHR E1
	Db	038h,06Ch,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ; CHR E2
	Db	00Ch,018h,000h,0C6h,0E6h,0F6h,0FEh,0DEh,0CEh,0C6h,0C6h,0C6h,000h,000h,000h,000h ; CHR E3
	Db	000h,00Ch,018h,030h,000h,0DCh,066h,066h,066h,066h,066h,066h,000h,000h,000h,000h ; CHR E4
	Db	000h,000h,06Ch,038h,000h,0DCh,066h,066h,066h,066h,066h,066h,000h,000h,000h,000h ; CHR E5
	Db	06Ch,038h,000h,07Ch,0C6h,0C0h,060h,038h,00Ch,006h,0C6h,07Ch,000h,000h,000h,000h ; CHR E6
	Db	000h,000h,06Ch,038h,000h,07Ch,0C6h,060h,038h,00Ch,0C6h,07Ch,000h,000h,000h,000h ; CHR E7
	Db	018h,030h,000h,0FCh,066h,066h,066h,07Ch,06Ch,066h,066h,0F6h,000h,000h,000h,000h ; CHR E8
	Db	018h,030h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ; CHR E9
	Db	000h,00Ch,018h,030h,000h,0DCh,076h,066h,060h,060h,060h,0F0h,000h,000h,000h,000h ; CHR EA
	Db	036h,06Ch,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ; CHR EB
	Db	000h,00Ch,018h,030h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Eh,006h,00Ch,0F8h,000h ; CHR EC
	Db	00Ch,018h,000h,066h,066h,066h,066h,03Ch,018h,018h,018h,03Ch,000h,000h,000h,000h ; CHR ED
	Db	000h,000h,010h,030h,030h,0FCh,030h,030h,030h,030h,036h,01Ch,018h,00Ch,078h,000h ; CHR EE
	Db	000h,00Ch,018h,030h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ; CHR EF
	Db	000h,000h,000h,000h,000h,000h,000h,07Eh,000h,000h,000h,000h,000h,000h,000h,000h ; CHR F0
	Db	000h,036h,06Ch,0D8h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ; CHR F1
	Db	000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,030h,060h,03Ch,000h ; CHR F2
	Db	000h,06Ch,038h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ; CHR F3
	Db	000h,0C6h,07Ch,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ; CHR F4
	Db	000h,07Ch,0C6h,060h,038h,06Ch,0C6h,0C6h,06Ch,038h,00Ch,0C6h,07Ch,000h,000h,000h ; CHR F5
	Db	000h,000h,000h,000h,018h,018h,000h,07Eh,000h,018h,018h,000h,000h,000h,000h,000h ; CHR F6
	Db	000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,00Ch,078h,000h ; CHR F7
	Db	000h,038h,06Ch,06Ch,038h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ; CHR F8
	Db	000h,06Ch,06Ch,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ; CHR F9
	Db	000h,018h,018h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ; CHR FA
	Db	000h,000h,036h,06Ch,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ; CHR FB
	Db	06Ch,038h,000h,0FCh,066h,066h,066h,07Ch,06Ch,066h,066h,0F6h,000h,000h,000h,000h ; CHR FC
	Db	000h,000h,06Ch,038h,000h,0DCh,076h,066h,060h,060h,060h,0F0h,000h,000h,000h,000h ; CHR FD
	Db	000h,000h,000h,000h,07Ch,07Ch,07Ch,07Ch,07Ch,07Ch,07Ch,000h,000h,000h,000h,000h ; CHR FE
	Db	000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ; CHR FF


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\ega\852-8x8.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
;***************************************************
;  CHARACTER FONT FILE
;  Source Assembler File
;
;	 CODE PAGE: 852
;  FONT RESOLUTION: 8 x 8
;
;     DATE CREATED:05-28-1987
;
;
; Output file from: MULTIFON, Version 1A
;
;***************************************************
	Db	000h,000h,000h,000h,000h,000h,000h,000h ; CHR 00
	Db	07Eh,081h,0A5h,081h,0BDh,099h,081h,07Eh ; CHR 01
	Db	07Eh,0FFh,0Dbh,0FFh,0C3h,0E7h,0FFh,07Eh ; CHR 02
	Db	06Ch,0FEh,0FEh,0FEh,07Ch,038h,010h,000h ; CHR 03
	Db	010h,038h,07Ch,0FEh,07Ch,038h,010h,000h ; CHR 04
	Db	038h,07Ch,038h,0FEh,0FEh,0D6h,010h,038h ; CHR 05
	Db	010h,010h,038h,07Ch,0FEh,07Ch,010h,038h ; CHR 06
	Db	000h,000h,018h,03Ch,03Ch,018h,000h,000h ; CHR 07
	Db	0FFh,0FFh,0E7h,0C3h,0C3h,0E7h,0FFh,0FFh ; CHR 08
	Db	000h,03Ch,066h,042h,042h,066h,03Ch,000h ; CHR 09
	Db	0FFh,0C3h,099h,0BDh,0BDh,099h,0C3h,0FFh ; CHR 0A
	Db	00Fh,007h,00Fh,07Dh,0CCh,0CCh,0CCh,078h ; CHR 0B
	Db	03Ch,066h,066h,066h,03Ch,018h,07Eh,018h ; CHR 0C
	Db	03Fh,033h,03Fh,030h,030h,070h,0F0h,0E0h ; CHR 0D
	Db	07Fh,063h,07Fh,063h,063h,067h,0E6h,0C0h ; CHR 0E
	Db	018h,0Dbh,03Ch,0E7h,0E7h,03Ch,0Dbh,018h ; CHR 0F
	Db	080h,0E0h,0F8h,0FEh,0F8h,0E0h,080h,000h ; CHR 10
	Db	002h,00Eh,03Eh,0FEh,03Eh,00Eh,002h,000h ; CHR 11
	Db	018h,03Ch,07Eh,018h,018h,07Eh,03Ch,018h ; CHR 12
	Db	066h,066h,066h,066h,066h,000h,066h,000h ; CHR 13
	Db	07Fh,0Dbh,0Dbh,07Bh,01Bh,01Bh,01Bh,000h ; CHR 14
	Db	03Eh,063h,038h,06Ch,06Ch,038h,0CCh,078h ; CHR 15
	Db	000h,000h,000h,000h,07Eh,07Eh,07Eh,000h ; CHR 16
	Db	018h,03Ch,07Eh,018h,07Eh,03Ch,018h,0FFh ; CHR 17
	Db	018h,03Ch,07Eh,018h,018h,018h,018h,000h ; CHR 18
	Db	018h,018h,018h,018h,07Eh,03Ch,018h,000h ; CHR 19
	Db	000h,018h,00Ch,0FEh,00Ch,018h,000h,000h ; CHR 1A
	Db	000h,030h,060h,0FEh,060h,030h,000h,000h ; CHR 1B
	Db	000h,000h,0C0h,0C0h,0C0h,0FEh,000h,000h ; CHR 1C
	Db	000h,024h,066h,0FFh,066h,024h,000h,000h ; CHR 1D
	Db	000h,018h,03Ch,07Eh,0FFh,0FFh,000h,000h ; CHR 1E
	Db	000h,0FFh,0FFh,07Eh,03Ch,018h,000h,000h ; CHR 1F
	Db	000h,000h,000h,000h,000h,000h,000h,000h ; CHR 20
	Db	030h,078h,078h,030h,030h,000h,030h,000h ; CHR 21
	Db	06Ch,06Ch,06Ch,000h,000h,000h,000h,000h ; CHR 22
	Db	06Ch,06Ch,0FEh,06Ch,0FEh,06Ch,06Ch,000h ; CHR 23
	Db	030h,07Ch,0C0h,078h,00Ch,0F8h,030h,000h ; CHR 24
	Db	000h,0C6h,0CCh,018h,030h,066h,0C6h,000h ; CHR 25
	Db	038h,06Ch,038h,076h,0DCh,0CCh,076h,000h ; CHR 26
	Db	060h,060h,0C0h,000h,000h,000h,000h,000h ; CHR 27
	Db	018h,030h,060h,060h,060h,030h,018h,000h ; CHR 28
	Db	060h,030h,018h,018h,018h,030h,060h,000h ; CHR 29
	Db	000h,066h,03Ch,0FFh,03Ch,066h,000h,000h ; CHR 2A
	Db	000h,030h,030h,0FCh,030h,030h,000h,000h ; CHR 2B
	Db	000h,000h,000h,000h,000h,030h,030h,060h ; CHR 2C
	Db	000h,000h,000h,0FCh,000h,000h,000h,000h ; CHR 2D
	Db	000h,000h,000h,000h,000h,030h,030h,000h ; CHR 2E
	Db	006h,00Ch,018h,030h,060h,0C0h,080h,000h ; CHR 2F
	Db	07Ch,0C6h,0C6h,0D6h,0C6h,0C6h,07Ch,000h ; CHR 30
	Db	030h,070h,030h,030h,030h,030h,0FCh,000h ; CHR 31
	Db	078h,0CCh,00Ch,038h,060h,0CCh,0FCh,000h ; CHR 32
	Db	078h,0CCh,00Ch,038h,00Ch,0CCh,078h,000h ; CHR 33
	Db	01Ch,03Ch,06Ch,0CCh,0FEh,00Ch,01Eh,000h ; CHR 34
	Db	0FCh,0C0h,0F8h,00Ch,00Ch,0CCh,078h,000h ; CHR 35
	Db	038h,060h,0C0h,0F8h,0CCh,0CCh,078h,000h ; CHR 36
	Db	0FCh,0CCh,00Ch,018h,030h,030h,030h,000h ; CHR 37
	Db	078h,0CCh,0CCh,078h,0CCh,0CCh,078h,000h ; CHR 38
	Db	078h,0CCh,0CCh,07Ch,00Ch,018h,070h,000h ; CHR 39
	Db	000h,030h,030h,000h,000h,030h,030h,000h ; CHR 3A
	Db	000h,030h,030h,000h,000h,030h,030h,060h ; CHR 3B
	Db	018h,030h,060h,0C0h,060h,030h,018h,000h ; CHR 3C
	Db	000h,000h,0FCh,000h,000h,0FCh,000h,000h ; CHR 3D
	Db	060h,030h,018h,00Ch,018h,030h,060h,000h ; CHR 3E
	Db	078h,0CCh,00Ch,018h,030h,000h,030h,000h ; CHR 3F
	Db	07Ch,0C6h,0DEh,0DEh,0DEh,0C0h,078h,000h ; CHR 40
	Db	030h,078h,0CCh,0CCh,0FCh,0CCh,0CCh,000h ; CHR 41
	Db	0FCh,066h,066h,07Ch,066h,066h,0FCh,000h ; CHR 42
	Db	03Ch,066h,0C0h,0C0h,0C0h,066h,03Ch,000h ; CHR 43
	Db	0F8h,06Ch,066h,066h,066h,06Ch,0F8h,000h ; CHR 44
	Db	0FEh,062h,068h,078h,068h,062h,0FEh,000h ; CHR 45
	Db	0FEh,062h,068h,078h,068h,060h,0F0h,000h ; CHR 46
	Db	03Ch,066h,0C0h,0C0h,0CEh,066h,03Eh,000h ; CHR 47
	Db	0CCh,0CCh,0CCh,0FCh,0CCh,0CCh,0CCh,000h ; CHR 48
	Db	078h,030h,030h,030h,030h,030h,078h,000h ; CHR 49
	Db	01Eh,00Ch,00Ch,00Ch,0CCh,0CCh,078h,000h ; CHR 4A
	Db	0E6h,066h,06Ch,078h,06Ch,066h,0E6h,000h ; CHR 4B
	Db	0F0h,060h,060h,060h,062h,066h,0FEh,000h ; CHR 4C
	Db	0C6h,0EEh,0FEh,0FEh,0D6h,0C6h,0C6h,000h ; CHR 4D
	Db	0C6h,0E6h,0F6h,0DEh,0CEh,0C6h,0C6h,000h ; CHR 4E
	Db	038h,06Ch,0C6h,0C6h,0C6h,06Ch,038h,000h ; CHR 4F
	Db	0FCh,066h,066h,07Ch,060h,060h,0F0h,000h ; CHR 50
	Db	078h,0CCh,0CCh,0CCh,0DCh,078h,01Ch,000h ; CHR 51
	Db	0FCh,066h,066h,07Ch,06Ch,066h,0E6h,000h ; CHR 52
	Db	078h,0CCh,060h,030h,018h,0CCh,078h,000h ; CHR 53
	Db	0FCh,0B4h,030h,030h,030h,030h,078h,000h ; CHR 54
	Db	0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,0FCh,000h ; CHR 55
	Db	0CCh,0CCh,0CCh,0CCh,0CCh,078h,030h,000h ; CHR 56
	Db	0C6h,0C6h,0C6h,0D6h,0FEh,0EEh,0C6h,000h ; CHR 57
	Db	0C6h,0C6h,06Ch,038h,038h,06Ch,0C6h,000h ; CHR 58
	Db	0CCh,0CCh,0CCh,078h,030h,030h,078h,000h ; CHR 59
	Db	0FEh,0C6h,08Ch,018h,032h,066h,0FEh,000h ; CHR 5A
	Db	078h,060h,060h,060h,060h,060h,078h,000h ; CHR 5B
	Db	0C0h,060h,030h,018h,00Ch,006h,002h,000h ; CHR 5C
	Db	078h,018h,018h,018h,018h,018h,078h,000h ; CHR 5D
	Db	010h,038h,06Ch,0C6h,000h,000h,000h,000h ; CHR 5E
	Db	000h,000h,000h,000h,000h,000h,000h,0FFh ; CHR 5F
	Db	030h,030h,018h,000h,000h,000h,000h,000h ; CHR 60
	Db	000h,000h,078h,00Ch,07Ch,0CCh,076h,000h ; CHR 61
	Db	0E0h,060h,060h,07Ch,066h,066h,0DCh,000h ; CHR 62
	Db	000h,000h,078h,0CCh,0C0h,0CCh,078h,000h ; CHR 63
	Db	01Ch,00Ch,00Ch,07Ch,0CCh,0CCh,076h,000h ; CHR 64
	Db	000h,000h,078h,0CCh,0FCh,0C0h,078h,000h ; CHR 65
	Db	038h,06Ch,060h,0F0h,060h,060h,0F0h,000h ; CHR 66
	Db	000h,000h,076h,0CCh,0CCh,07Ch,00Ch,0F8h ; CHR 67
	Db	0E0h,060h,06Ch,076h,066h,066h,0E6h,000h ; CHR 68
	Db	030h,000h,070h,030h,030h,030h,078h,000h ; CHR 69
	Db	00Ch,000h,00Ch,00Ch,00Ch,0CCh,0CCh,078h ; CHR 6A
	Db	0E0h,060h,066h,06Ch,078h,06Ch,0E6h,000h ; CHR 6B
	Db	070h,030h,030h,030h,030h,030h,078h,000h ; CHR 6C
	Db	000h,000h,0CCh,0FEh,0FEh,0D6h,0C6h,000h ; CHR 6D
	Db	000h,000h,0F8h,0CCh,0CCh,0CCh,0CCh,000h ; CHR 6E
	Db	000h,000h,078h,0CCh,0CCh,0CCh,078h,000h ; CHR 6F
	Db	000h,000h,0DCh,066h,066h,07Ch,060h,0F0h ; CHR 70
	Db	000h,000h,076h,0CCh,0CCh,07Ch,00Ch,01Eh ; CHR 71
	Db	000h,000h,0DCh,076h,066h,060h,0F0h,000h ; CHR 72
	Db	000h,000h,07Ch,0C0h,078h,00Ch,0F8h,000h ; CHR 73
	Db	010h,030h,07Ch,030h,030h,034h,018h,000h ; CHR 74
	Db	000h,000h,0CCh,0CCh,0CCh,0CCh,076h,000h ; CHR 75
	Db	000h,000h,0CCh,0CCh,0CCh,078h,030h,000h ; CHR 76
	Db	000h,000h,0C6h,0D6h,0FEh,0FEh,06Ch,000h ; CHR 77
	Db	000h,000h,0C6h,06Ch,038h,06Ch,0C6h,000h ; CHR 78
	Db	000h,000h,0CCh,0CCh,0CCh,07Ch,00Ch,0F8h ; CHR 79
	Db	000h,000h,0FCh,098h,030h,064h,0FCh,000h ; CHR 7A
	Db	01Ch,030h,030h,0E0h,030h,030h,01Ch,000h ; CHR 7B
	Db	018h,018h,018h,018h,018h,018h,018h,000h ; CHR 7C
	Db	0E0h,030h,030h,01Ch,030h,030h,0E0h,000h ; CHR 7D
	Db	076h,0DCh,000h,000h,000h,000h,000h,000h ; CHR 7E
	Db	010h,028h,044h,082h,082h,082h,0FEh,000h ; CHR 7F
	Db	03Ch,066h,0C0h,0C0h,066h,03Ch,00Ch,038h ; CHR 80
	Db	0CCh,000h,0CCh,0CCh,0CCh,0CCh,076h,000h ; CHR 81
	Db	018h,030h,078h,0CCh,0FCh,0C0h,078h,000h ; CHR 82
	Db	078h,084h,078h,00Ch,07Ch,0CCh,076h,000h ; CHR 83
	Db	0CCh,000h,078h,00Ch,07Ch,0CCh,07Eh,000h ; CHR 84
	Db	030h,0CCh,030h,0CCh,0CCh,0CCh,076h,000h ; CHR 85
	Db	018h,030h,078h,0CCh,0C0h,0CCh,078h,000h ; CHR 86
	Db	000h,000h,078h,0CCh,0C0h,0CCh,078h,018h ; CHR 87
	Db	030h,036h,03Ch,038h,030h,070h,0DCh,000h ; CHR 88
	Db	0CCh,000h,078h,0CCh,0FCh,0C0h,078h,000h ; CHR 89
	Db	066h,0CCh,07Ch,0C6h,0C6h,0C6h,07Ch,000h ; CHR 8A
	Db	000h,066h,0CCh,078h,0CCh,0CCh,078h,000h ; CHR 8B
	Db	070h,088h,070h,030h,030h,030h,078h,000h ; CHR 8C
	Db	00Ch,018h,0FEh,00Ch,030h,060h,0FEh,000h ; CHR 8D
	Db	0C6h,038h,06Ch,0C6h,0FEh,0C6h,0C6h,000h ; CHR 8E
	Db	00Ch,018h,07Ch,0C6h,0C0h,0C6h,07Ch,000h ; CHR 8F
	Db	00Ch,018h,0FCh,060h,078h,060h,0FCh,000h ; CHR 90
	Db	0CCh,0D8h,0C0h,0C0h,0C0h,0C0h,0FEh,000h ; CHR 91
	Db	0CCh,0D8h,0C0h,0C0h,0C0h,0C0h,078h,000h ; CHR 92
	Db	078h,0CCh,000h,078h,0CCh,0CCh,078h,000h ; CHR 93
	Db	0CCh,000h,078h,0CCh,0CCh,0CCh,078h,000h ; CHR 94
	Db	0F6h,0DCh,0C0h,0C0h,0C0h,0C0h,0FEh,000h ; CHR 95
	Db	0F6h,0DCh,0C0h,0C0h,0C0h,0C0h,078h,000h ; CHR 96
	Db	00Ch,018h,07Eh,0C0h,07Ch,006h,0FCh,000h ; CHR 97
	Db	00Ch,018h,03Eh,060h,03Ch,006h,07Ch,000h ; CHR 98
	Db	0C6h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h ; CHR 99
	Db	0C6h,000h,0C6h,0C6h,0C6h,0C6h,07Ch,000h ; CHR 9A
	Db	0CCh,078h,0FCh,030h,030h,030h,030h,000h ; CHR 9B
	Db	0CCh,078h,030h,0FCh,030h,030h,01Eh,000h ; CHR 9C
	Db	060h,06Ch,078h,070h,060h,0E0h,07Eh,000h ; CHR 9D
	Db	000h,0C6h,06Ch,038h,06Ch,0C6h,000h,000h ; CHR 9E
	Db	066h,03Ch,03Ch,066h,060h,066h,03Ch,000h ; CHR 9F
	Db	00Ch,018h,078h,00Ch,07Ch,0CCh,07Eh,000h ; CHR A0
	Db	00Ch,018h,038h,018h,018h,018h,03Ch,000h ; CHR A1
	Db	000h,00Ch,018h,078h,0CCh,0CCh,078h,000h ; CHR A2
	Db	000h,018h,030h,0CCh,0CCh,0CCh,07Eh,000h ; CHR A3
	Db	038h,06Ch,0C6h,0FEh,0C6h,0D6h,018h,00Eh ; CHR A4
	Db	000h,000h,078h,00Ch,07Ch,0CCh,076h,00Fh ; CHR A5
	Db	066h,03Ch,0FEh,00Ch,018h,060h,0FEh,000h ; CHR A6
	Db	066h,03Ch,000h,07Eh,00Ch,030h,07Eh,000h ; CHR A7
	Db	0FEh,0C0h,0C0h,0F8h,0C0h,0C0h,0FEh,01Ch ; CHR A8
	Db	000h,000h,078h,0CCh,0FCh,0C0h,078h,01Ch ; CHR A9
	Db	000h,000h,000h,000h,000h,000h,000h,000h ; CHR AA
	Db	00Ch,018h,000h,07Eh,00Ch,030h,07Eh,000h ; CHR AB
	Db	066h,03Ch,07Ch,0C6h,0C0h,0C6h,07Ch,000h ; CHR AC
	Db	000h,000h,07Ch,0C0h,078h,00Ch,0F8h,038h ; CHR AD
	Db	000h,033h,066h,0CCh,066h,033h,000h,000h ; CHR AE
	Db	000h,0CCh,066h,033h,066h,0CCh,000h,000h ; CHR AF
	Db	022h,088h,022h,088h,022h,088h,022h,088h ; CHR B0
	Db	055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh ; CHR B1
	Db	0Dbh,077h,0Dbh,0EEh,0Dbh,077h,0Dbh,0EEh ; CHR B2
	Db	018h,018h,018h,018h,018h,018h,018h,018h ; CHR B3
	Db	018h,018h,018h,018h,0F8h,018h,018h,018h ; CHR B4
	Db	00Ch,018h,07Ch,0C6h,0FEh,0C6h,0C6h,000h ; CHR B5
	Db	07Ch,082h,07Ch,0C6h,0FEh,0C6h,0C6h,000h ; CHR B6
	Db	0CCh,078h,0FEh,0C0h,0F8h,0C0h,0FEh,000h ; CHR B7
	Db	078h,0CCh,060h,030h,018h,0CCh,078h,030h ; CHR B8
	Db	036h,036h,0F6h,006h,0F6h,036h,036h,036h ; CHR B9
	Db	036h,036h,036h,036h,036h,036h,036h,036h ; CHR BA
	Db	000h,000h,0FEh,006h,0F6h,036h,036h,036h ; CHR BB
	Db	036h,036h,0F6h,006h,0FEh,000h,000h,000h ; CHR BC
	Db	018h,0FEh,0C6h,00Ch,030h,0C6h,0FEh,000h ; CHR BD
	Db	000h,018h,000h,07Ch,018h,030h,07Ch,000h ; CHR BE
	Db	000h,000h,000h,000h,0F8h,018h,018h,018h ; CHR BF
	Db	018h,018h,018h,018h,01Fh,000h,000h,000h ; CHR C0
	Db	018h,018h,018h,018h,0FFh,000h,000h,000h ; CHR C1
	Db	000h,000h,000h,000h,0FFh,018h,018h,018h ; CHR C2
	Db	018h,018h,018h,018h,01Fh,018h,018h,018h ; CHR C3
	Db	000h,000h,000h,000h,0FFh,000h,000h,000h ; CHR C4
	Db	018h,018h,018h,018h,0FFh,018h,018h,018h ; CHR C5
	Db	0C6h,07Ch,07Ch,0C6h,0FEh,0C6h,0C6h,000h ; CHR C6
	Db	0CCh,078h,078h,00Ch,07Ch,0CCh,076h,000h ; CHR C7
	Db	036h,036h,037h,030h,03Fh,000h,000h,000h ; CHR C8
	Db	000h,000h,03Fh,030h,037h,036h,036h,036h ; CHR C9
	Db	036h,036h,0F7h,000h,0FFh,000h,000h,000h ; CHR CA
	Db	000h,000h,0FFh,000h,0F7h,036h,036h,036h ; CHR CB
	Db	036h,036h,037h,030h,037h,036h,036h,036h ; CHR CC
	Db	000h,000h,0FFh,000h,0FFh,000h,000h,000h ; CHR CD
	Db	036h,036h,0F7h,000h,0F7h,036h,036h,036h ; CHR CE
	Db	000h,042h,03Ch,066h,066h,03Ch,042h,000h ; CHR CF
	Db	00Ch,03Eh,00Ch,07Ch,0CCh,0CCh,076h,000h ; CHR D0
	Db	07Ch,066h,066h,0F6h,066h,066h,07Ch,000h ; CHR D1
	Db	0CCh,078h,0FCh,066h,066h,066h,0FCh,000h ; CHR D2
	Db	0CCh,000h,0FCh,060h,078h,060h,0FCh,000h ; CHR D3
	Db	096h,066h,006h,07Eh,0C6h,0C6h,07Eh,000h ; CHR D4
	Db	024h,018h,0E6h,0F6h,0DEh,0CEh,0C6h,000h ; CHR D5
	Db	018h,030h,078h,030h,030h,030h,078h,000h ; CHR D6
	Db	078h,084h,078h,030h,030h,030h,078h,000h ; CHR D7
	Db	0CCh,078h,078h,0CCh,0FCh,0C0h,078h,000h ; CHR D8
	Db	018h,018h,018h,018h,0F8h,000h,000h,000h ; CHR D9
	Db	000h,000h,000h,000h,01Fh,018h,018h,018h ; CHR DA
	Db	0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; CHR Db
	Db	000h,000h,000h,000h,0FFh,0FFh,0FFh,0FFh ; CHR DC
	Db	07Eh,018h,018h,018h,018h,018h,020h,038h ; CHR DD
	Db	010h,028h,0D6h,0C6h,0C6h,0C6h,07Ch,000h ; CHR DE
	Db	0FFh,0FFh,0FFh,0FFh,000h,000h,000h,000h ; CHR DF
	Db	00Ch,018h,07Ch,0C6h,0C6h,0C6h,07Ch,000h ; CHR E0
	Db	000h,078h,0CCh,0F8h,0CCh,0F8h,0C0h,0C0h ; CHR E1
	Db	07Ch,082h,07Ch,0C6h,0C6h,0C6h,07Ch,000h ; CHR E2
	Db	00Ch,018h,0E6h,0F6h,0DEh,0CEh,0C6h,000h ; CHR E3
	Db	00Ch,018h,0DCh,0E6h,0C6h,0C6h,0C6h,000h ; CHR E4
	Db	066h,03Ch,0DCh,0E6h,0C6h,0C6h,0C6h,000h ; CHR E5
	Db	06Ch,038h,07Eh,0E0h,038h,00Eh,0FCh,000h ; CHR E6
	Db	06Ch,038h,07Ch,040h,038h,004h,07Ch,000h ; CHR E7
	Db	00Ch,018h,0FCh,0C6h,0FCh,0D8h,0CCh,000h ; CHR E8
	Db	00Ch,018h,0C6h,0C6h,0C6h,0C6h,07Ch,000h ; CHR E9
	Db	018h,030h,0CEh,0F0h,0E0h,0C0h,0C0h,000h ; CHR EA
	Db	066h,0CCh,0C6h,0C6h,0C6h,0C6h,07Ch,000h ; CHR EB
	Db	00Ch,018h,0C6h,0C6h,066h,03Eh,00Ch,078h ; CHR EC
	Db	00Ch,0DEh,0C6h,066h,03Ch,018h,030h,000h ; CHR ED
	Db	030h,078h,030h,030h,030h,038h,018h,01Eh ; CHR EE
	Db	00Ch,018h,000h,000h,000h,000h,000h,000h ; CHR EF
	Db	000h,000h,000h,03Ch,000h,000h,000h,000h ; CHR F0
	Db	066h,0CCh,000h,000h,000h,000h,000h,000h ; CHR F1
	Db	000h,000h,000h,000h,000h,000h,010h,01Ch ; CHR F2
	Db	0D8h,070h,000h,000h,000h,000h,000h,000h ; CHR F3
	Db	0C6h,07Ch,000h,000h,000h,000h,000h,000h ; CHR F4
	Db	03Ch,066h,038h,06Ch,06Ch,038h,0CCh,078h ; CHR F5
	Db	018h,018h,000h,07Eh,000h,018h,018h,000h ; CHR F6
	Db	000h,000h,000h,000h,000h,000h,004h,01Ch ; CHR F7
	Db	038h,06Ch,06Ch,038h,000h,000h,000h,000h ; CHR F8
	Db	066h,000h,000h,000h,000h,000h,000h,000h ; CHR F9
	Db	018h,000h,000h,000h,000h,000h,000h,000h ; CHR FA
	Db	066h,0CCh,000h,0CCh,0CCh,0CCh,076h,000h ; CHR FB
	Db	0D8h,070h,0FCh,0C6h,0FCh,0D8h,0CCh,000h ; CHR FC
	Db	0D8h,070h,0CEh,0D8h,0E0h,0C0h,0C0h,000h ; CHR FD
	Db	000h,000h,03Ch,03Ch,03Ch,03Ch,000h,000h ; CHR FE
	Db	000h,000h,000h,000h,000h,000h,000h,000h ; CHR FF


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\ega\852-cpi.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
CODE    SEGMENT BYTE PUBLIC 'CODE'
        ASSUME CS:CODE,DS:CODE

IF1
;        %OUT    EGA.CPI creation file
;        %OUT    .
;        %OUT    CP SRC files:
;        %OUT    .
;	 %OUT	 .	 CODE PAGE:  852
ENDIF

EGA852: DW     LEN_852			; SIZE OF ENTRY HEADER
	DW     POST_EGA852,0		; POINTER TO NEXT HEADER
        DW     1                        ; DEVICE TYPE
        DB     "EGA     "               ; DEVICE SUBTYPE ID
	DW     852			; CODE PAGE ID
        DW     3 DUP(0)                 ; RESERVED
	DW     OFFSET DATA852,0 	; POINTER TO FONTS
LEN_852 EQU    ($-EGA852)		;
                                        ;
DATA852:DW     1			; CART/NON-CART
        DW     3                        ; # OF FONTS
	DW     LEN_D852 		; LENGTH OF DATA
D852:					;
        DB     16,8                     ; CHARACTER BOX SIZE
        DB     0,0                      ; ASPECT RATIO (UNUSED)
        DW     256                      ; NUMBER OF CHARACTERS
                                        ;
	INCLUDE 852-8X16.ASM		;
                                        ;
        DB     14,8                     ; CHARACTER BOX SIZE
        DB     0,0                      ; ASPECT RATIO (UNUSED)
        DW     256                      ; NUMBER OF CHARACTERS
                                        ;
	INCLUDE 852-8X14.ASM		;
                                        ;
        DB     8,8                      ; CHARACTER BOX SIZE
        DB     0,0                      ; ASPECT RATIO (UNUSED)
        DW     256                      ; NUMBER OF CHARACTERS
                                        ;
	INCLUDE 852-8X8.ASM		;
                                        ;
LEN_D852	EQU ($-D852)		;
                                        ;
POST_EGA852	EQU	$		;
                                        ;
CODE    ENDS                            ;
        END                             ;


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\ega\850-cpi.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
CODE    SEGMENT BYTE PUBLIC 'CODE'
        ASSUME CS:CODE,DS:CODE

IF1
;        %OUT    EGA.CPI creation file
;        %OUT    .
;        %OUT    CP SRC files:
;        %OUT    .
;        %OUT    .       CODE PAGE:  850
ENDIF

EGA850: DW     LEN_850                  ; SIZE OF ENTRY HEADER
        DW     POST_EGA850,0            ; POINTER TO NEXT HEADER
        DW     1                        ; DEVICE TYPE
        DB     "EGA     "               ; DEVICE SUBTYPE ID
        DW     850                      ; CODE PAGE ID
        DW     3 DUP(0)                 ; RESERVED
        DW     OFFSET DATA850,0         ; POINTER TO FONTS
LEN_850 EQU    ($-EGA850)               ;
                                        ;
DATA850:DW     1                        ; CART/NON-CART
        DW     3                        ; # OF FONTS
        DW     LEN_D850                 ; LENGTH OF DATA
D850:                                   ;
        DB     16,8                     ; CHARACTER BOX SIZE
        DB     0,0                      ; ASPECT RATIO (UNUSED)
        DW     256                      ; NUMBER OF CHARACTERS
                                        ;
        INCLUDE 850-8X16.ASM            ;
                                        ;
        DB     14,8                     ; CHARACTER BOX SIZE
        DB     0,0                      ; ASPECT RATIO (UNUSED)
        DW     256                      ; NUMBER OF CHARACTERS
                                        ;
        INCLUDE 850-8X14.ASM            ;
                                        ;
        DB     8,8                      ; CHARACTER BOX SIZE
        DB     0,0                      ; ASPECT RATIO (UNUSED)
        DW     256                      ; NUMBER OF CHARACTERS
                                        ;
        INCLUDE 850-8X8.ASM             ;
                                        ;
LEN_D850        EQU ($-D850)            ;
                                        ;
POST_EGA850     EQU     $               ;
                                        ;
CODE    ENDS                            ;
        END                             ;


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\ega\860-8x16.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
;***************************************************
;  CHARACTER FONT FILE
;  Source Assembler File
;
;        CODE PAGE: 860 
;  FONT RESOLUTION: 8 x 16 
;
;     DATE CREATED:05-28-1987
;
;
; Output file from: MULTIFON, Version 1A
;
;***************************************************
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #0
    Db  000h,000h,07Eh,081h,0A5h,081h,081h,0BDh,099h,081h,081h,07Eh,000h,000h,000h,000h ;   Hex #1
    Db  000h,000h,07Eh,0FFh,0DBh,0FFh,0FFh,0C3h,0E7h,0FFh,0FFh,07Eh,000h,000h,000h,000h ;   Hex #2
    Db  000h,000h,000h,000h,06Ch,0FEh,0FEh,0FEh,0FEh,07Ch,038h,010h,000h,000h,000h,000h ;   Hex #3
    Db  000h,000h,000h,000h,010h,038h,07Ch,0FEh,07Ch,038h,010h,000h,000h,000h,000h,000h ;   Hex #4
    Db  000h,000h,000h,018h,03Ch,03Ch,0E7h,0E7h,0E7h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #5
    Db  000h,000h,000h,018h,03Ch,07Eh,0FFh,0FFh,07Eh,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #6
    Db  000h,000h,000h,000h,000h,000h,018h,03Ch,03Ch,018h,000h,000h,000h,000h,000h,000h ;   Hex #7
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0E7h,0C3h,0C3h,0E7h,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #8
    Db  000h,000h,000h,000h,000h,03Ch,066h,042h,042h,066h,03Ch,000h,000h,000h,000h,000h ;   Hex #9
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0C3h,099h,0BDh,0BDh,099h,0C3h,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #A
    Db  000h,000h,01Eh,00Eh,01Ah,032h,078h,0CCh,0CCh,0CCh,0CCh,078h,000h,000h,000h,000h ;   Hex #B
    Db  000h,000h,03Ch,066h,066h,066h,066h,03Ch,018h,07Eh,018h,018h,000h,000h,000h,000h ;   Hex #C
    Db  000h,000h,03Fh,033h,03Fh,030h,030h,030h,030h,070h,0F0h,0E0h,000h,000h,000h,000h ;   Hex #D
    Db  000h,000h,07Fh,063h,07Fh,063h,063h,063h,063h,067h,0E7h,0E6h,0C0h,000h,000h,000h ;   Hex #E
    Db  000h,000h,000h,018h,018h,0DBh,03Ch,0E7h,03Ch,0DBh,018h,018h,000h,000h,000h,000h ;   Hex #F
    Db  000h,080h,0C0h,0E0h,0F0h,0F8h,0FEh,0F8h,0F0h,0E0h,0C0h,080h,000h,000h,000h,000h ;   Hex #10
    Db  000h,002h,006h,00Eh,01Eh,03Eh,0FEh,03Eh,01Eh,00Eh,006h,002h,000h,000h,000h,000h ;   Hex #11
    Db  000h,000h,018h,03Ch,07Eh,018h,018h,018h,07Eh,03Ch,018h,000h,000h,000h,000h,000h ;   Hex #12
    Db  000h,000h,066h,066h,066h,066h,066h,066h,066h,000h,066h,066h,000h,000h,000h,000h ;   Hex #13
    Db  000h,000h,07Fh,0DBh,0DBh,0DBh,07Bh,01Bh,01Bh,01Bh,01Bh,01Bh,000h,000h,000h,000h ;   Hex #14
    Db  000h,07Ch,0C6h,060h,038h,06Ch,0C6h,0C6h,06Ch,038h,00Ch,0C6h,07Ch,000h,000h,000h ;   Hex #15
    Db  000h,000h,000h,000h,000h,000h,000h,000h,0FEh,0FEh,0FEh,0FEh,000h,000h,000h,000h ;   Hex #16
    Db  000h,000h,018h,03Ch,07Eh,018h,018h,018h,07Eh,03Ch,018h,07Eh,000h,000h,000h,000h ;   Hex #17
    Db  000h,000h,018h,03Ch,07Eh,018h,018h,018h,018h,018h,018h,018h,000h,000h,000h,000h ;   Hex #18
    Db  000h,000h,018h,018h,018h,018h,018h,018h,018h,07Eh,03Ch,018h,000h,000h,000h,000h ;   Hex #19
    Db  000h,000h,000h,000h,000h,018h,00Ch,0FEh,00Ch,018h,000h,000h,000h,000h,000h,000h ;   Hex #1A
    Db  000h,000h,000h,000h,000h,030h,060h,0FEh,060h,030h,000h,000h,000h,000h,000h,000h ;   Hex #1B
    Db  000h,000h,000h,000h,000h,000h,0C0h,0C0h,0C0h,0FEh,000h,000h,000h,000h,000h,000h ;   Hex #1C
    Db  000h,000h,000h,000h,000h,028h,06Ch,0FEh,06Ch,028h,000h,000h,000h,000h,000h,000h ;   Hex #1D
    Db  000h,000h,000h,000h,010h,038h,038h,07Ch,07Ch,0FEh,0FEh,000h,000h,000h,000h,000h ;   Hex #1E
    Db  000h,000h,000h,000h,0FEh,0FEh,07Ch,07Ch,038h,038h,010h,000h,000h,000h,000h,000h ;   Hex #1F
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #20
    Db  000h,000h,018h,03Ch,03Ch,03Ch,018h,018h,018h,000h,018h,018h,000h,000h,000h,000h ;   Hex #21
    Db  000h,066h,066h,066h,024h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #22
    Db  000h,000h,000h,06Ch,06Ch,0FEh,06Ch,06Ch,06Ch,0FEh,06Ch,06Ch,000h,000h,000h,000h ;   Hex #23
    Db  018h,018h,07Ch,0C6h,0C2h,0C0h,07Ch,006h,006h,086h,0C6h,07Ch,018h,018h,000h,000h ;   Hex #24
    Db  000h,000h,000h,000h,0C2h,0C6h,00Ch,018h,030h,060h,0C6h,086h,000h,000h,000h,000h ;   Hex #25
    Db  000h,000h,038h,06Ch,06Ch,038h,076h,0DCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #26
    Db  000h,030h,030h,030h,060h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #27
    Db  000h,000h,00Ch,018h,030h,030h,030h,030h,030h,030h,018h,00Ch,000h,000h,000h,000h ;   Hex #28
    Db  000h,000h,030h,018h,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,018h,030h,000h,000h,000h,000h ;   Hex #29
    Db  000h,000h,000h,000h,000h,066h,03Ch,0FFh,03Ch,066h,000h,000h,000h,000h,000h,000h ;   Hex #2A
    Db  000h,000h,000h,000h,000h,018h,018h,07Eh,018h,018h,000h,000h,000h,000h,000h,000h ;   Hex #2B
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,018h,018h,030h,000h,000h,000h ;   Hex #2C
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #2D
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,018h,000h,000h,000h,000h ;   Hex #2E
    Db  000h,000h,000h,000h,002h,006h,00Ch,018h,030h,060h,0C0h,080h,000h,000h,000h,000h ;   Hex #2F
    Db  000h,000h,038h,06Ch,0C6h,0C6h,0D6h,0D6h,0C6h,0C6h,06Ch,038h,000h,000h,000h,000h ;   Hex #30
    Db  000h,000h,018h,038h,078h,018h,018h,018h,018h,018h,018h,07Eh,000h,000h,000h,000h ;   Hex #31
    Db  000h,000h,07Ch,0C6h,006h,00Ch,018h,030h,060h,0C0h,0C6h,0FEh,000h,000h,000h,000h ;   Hex #32
    Db  000h,000h,07Ch,0C6h,006h,006h,03Ch,006h,006h,006h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #33
    Db  000h,000h,00Ch,01Ch,03Ch,06Ch,0CCh,0FEh,00Ch,00Ch,00Ch,01Eh,000h,000h,000h,000h ;   Hex #34
    Db  000h,000h,0FEh,0C0h,0C0h,0C0h,0FCh,006h,006h,006h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #35
    Db  000h,000h,038h,060h,0C0h,0C0h,0FCh,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #36
    Db  000h,000h,0FEh,0C6h,006h,006h,00Ch,018h,030h,030h,030h,030h,000h,000h,000h,000h ;   Hex #37
    Db  000h,000h,07Ch,0C6h,0C6h,0C6h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #38
    Db  000h,000h,07Ch,0C6h,0C6h,0C6h,07Eh,006h,006h,006h,00Ch,078h,000h,000h,000h,000h ;   Hex #39
    Db  000h,000h,000h,000h,018h,018h,000h,000h,000h,018h,018h,000h,000h,000h,000h,000h ;   Hex #3A
    Db  000h,000h,000h,000h,018h,018h,000h,000h,000h,018h,018h,030h,000h,000h,000h,000h ;   Hex #3B
    Db  000h,000h,000h,006h,00Ch,018h,030h,060h,030h,018h,00Ch,006h,000h,000h,000h,000h ;   Hex #3C
    Db  000h,000h,000h,000h,000h,07Eh,000h,000h,07Eh,000h,000h,000h,000h,000h,000h,000h ;   Hex #3D
    Db  000h,000h,000h,060h,030h,018h,00Ch,006h,00Ch,018h,030h,060h,000h,000h,000h,000h ;   Hex #3E
    Db  000h,000h,07Ch,0C6h,0C6h,00Ch,018h,018h,018h,000h,018h,018h,000h,000h,000h,000h ;   Hex #3F
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0DEh,0DEh,0DEh,0DCh,0C0h,07Ch,000h,000h,000h,000h ;   Hex #40
    Db  000h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #41
    Db  000h,000h,0FCh,066h,066h,066h,07Ch,066h,066h,066h,066h,0FCh,000h,000h,000h,000h ;   Hex #42
    Db  000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0C0h,0C0h,0C2h,066h,03Ch,000h,000h,000h,000h ;   Hex #43
    Db  000h,000h,0F8h,06Ch,066h,066h,066h,066h,066h,066h,06Ch,0F8h,000h,000h,000h,000h ;   Hex #44
    Db  000h,000h,0FEh,066h,062h,068h,078h,068h,060h,062h,066h,0FEh,000h,000h,000h,000h ;   Hex #45
    Db  000h,000h,0FEh,066h,062h,068h,078h,068h,060h,060h,060h,0F0h,000h,000h,000h,000h ;   Hex #46
    Db  000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0DEh,0C6h,0C6h,066h,03Ah,000h,000h,000h,000h ;   Hex #47
    Db  000h,000h,0C6h,0C6h,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #48
    Db  000h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #49
    Db  000h,000h,01Eh,00Ch,00Ch,00Ch,00Ch,00Ch,0CCh,0CCh,0CCh,078h,000h,000h,000h,000h ;   Hex #4A
    Db  000h,000h,0E6h,066h,066h,06Ch,078h,078h,06Ch,066h,066h,0E6h,000h,000h,000h,000h ;   Hex #4B
    Db  000h,000h,0F0h,060h,060h,060h,060h,060h,060h,062h,066h,0FEh,000h,000h,000h,000h ;   Hex #4C
    Db  000h,000h,0C6h,0EEh,0FEh,0FEh,0D6h,0C6h,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #4D
    Db  000h,000h,0C6h,0E6h,0F6h,0FEh,0DEh,0CEh,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #4E
    Db  000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #4F
    Db  000h,000h,0FCh,066h,066h,066h,07Ch,060h,060h,060h,060h,0F0h,000h,000h,000h,000h ;   Hex #50
    Db  000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0D6h,0DEh,07Ch,00Ch,00Eh,000h,000h ;   Hex #51
    Db  000h,000h,0FCh,066h,066h,066h,07Ch,06Ch,066h,066h,066h,0E6h,000h,000h,000h,000h ;   Hex #52
    Db  000h,000h,07Ch,0C6h,0C6h,060h,038h,00Ch,006h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #53
    Db  000h,000h,07Eh,07Eh,05Ah,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #54
    Db  000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #55
    Db  000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,06Ch,038h,010h,000h,000h,000h,000h ;   Hex #56
    Db  000h,000h,0C6h,0C6h,0C6h,0C6h,0D6h,0D6h,0D6h,0FEh,0EEh,06Ch,000h,000h,000h,000h ;   Hex #57
    Db  000h,000h,0C6h,0C6h,06Ch,07Ch,038h,038h,07Ch,06Ch,0C6h,0C6h,000h,000h,000h,000h ;   Hex #58
    Db  000h,000h,066h,066h,066h,066h,03Ch,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #59
    Db  000h,000h,0FEh,0C6h,086h,00Ch,018h,030h,060h,0C2h,0C6h,0FEh,000h,000h,000h,000h ;   Hex #5A
    Db  000h,000h,03Ch,030h,030h,030h,030h,030h,030h,030h,030h,03Ch,000h,000h,000h,000h ;   Hex #5B
    Db  000h,000h,000h,080h,0C0h,0E0h,070h,038h,01Ch,00Eh,006h,002h,000h,000h,000h,000h ;   Hex #5C
    Db  000h,000h,03Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,03Ch,000h,000h,000h,000h ;   Hex #5D
    Db  010h,038h,06Ch,0C6h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #5E
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,0FFh,000h,000h ;   Hex #5F
    Db  000h,030h,018h,00Ch,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #60
    Db  000h,000h,000h,000h,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #61
    Db  000h,000h,0E0h,060h,060h,078h,06Ch,066h,066h,066h,066h,07Ch,000h,000h,000h,000h ;   Hex #62
    Db  000h,000h,000h,000h,000h,07Ch,0C6h,0C0h,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #63
    Db  000h,000h,01Ch,00Ch,00Ch,03Ch,06Ch,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #64
    Db  000h,000h,000h,000h,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #65
    Db  000h,000h,01Ch,036h,032h,030h,078h,030h,030h,030h,030h,078h,000h,000h,000h,000h ;   Hex #66
    Db  000h,000h,000h,000h,000h,076h,0CCh,0CCh,0CCh,0CCh,0CCh,07Ch,00Ch,0CCh,078h,000h ;   Hex #67
    Db  000h,000h,0E0h,060h,060h,06Ch,076h,066h,066h,066h,066h,0E6h,000h,000h,000h,000h ;   Hex #68
    Db  000h,000h,018h,018h,000h,038h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #69
    Db  000h,000h,006h,006h,000h,00Eh,006h,006h,006h,006h,006h,006h,066h,066h,03Ch,000h ;   Hex #6A
    Db  000h,000h,0E0h,060h,060h,066h,06Ch,078h,078h,06Ch,066h,0E6h,000h,000h,000h,000h ;   Hex #6B
    Db  000h,000h,038h,018h,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #6C
    Db  000h,000h,000h,000h,000h,0ECh,0FEh,0D6h,0D6h,0D6h,0D6h,0C6h,000h,000h,000h,000h ;   Hex #6D
    Db  000h,000h,000h,000h,000h,0DCh,066h,066h,066h,066h,066h,066h,000h,000h,000h,000h ;   Hex #6E
    Db  000h,000h,000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #6F
    Db  000h,000h,000h,000h,000h,0DCh,066h,066h,066h,066h,066h,07Ch,060h,060h,0F0h,000h ;   Hex #70
    Db  000h,000h,000h,000h,000h,076h,0CCh,0CCh,0CCh,0CCh,0CCh,07Ch,00Ch,00Ch,01Eh,000h ;   Hex #71
    Db  000h,000h,000h,000h,000h,0DCh,076h,066h,060h,060h,060h,0F0h,000h,000h,000h,000h ;   Hex #72
    Db  000h,000h,000h,000h,000h,07Ch,0C6h,060h,038h,00Ch,0C6h,07Ch,000h,000h,000h,000h ;   Hex #73
    Db  000h,000h,010h,030h,030h,0FCh,030h,030h,030h,030h,036h,01Ch,000h,000h,000h,000h ;   Hex #74
    Db  000h,000h,000h,000h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #75
    Db  000h,000h,000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,06Ch,038h,000h,000h,000h,000h ;   Hex #76
    Db  000h,000h,000h,000h,000h,0C6h,0C6h,0D6h,0D6h,0D6h,0FEh,06Ch,000h,000h,000h,000h ;   Hex #77
    Db  000h,000h,000h,000h,000h,0C6h,06Ch,038h,038h,038h,06Ch,0C6h,000h,000h,000h,000h ;   Hex #78
    Db  000h,000h,000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Eh,006h,00Ch,0F8h,000h ;   Hex #79
    Db  000h,000h,000h,000h,000h,0FEh,0CCh,018h,030h,060h,0C6h,0FEh,000h,000h,000h,000h ;   Hex #7A
    Db  000h,000h,00Eh,018h,018h,018h,070h,018h,018h,018h,018h,00Eh,000h,000h,000h,000h ;   Hex #7B
    Db  000h,000h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,000h,000h,000h,000h ;   Hex #7C
    Db  000h,000h,070h,018h,018h,018h,00Eh,018h,018h,018h,018h,070h,000h,000h,000h,000h ;   Hex #7D
    Db  000h,076h,0DCh,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #7E
    Db  000h,000h,000h,000h,010h,038h,06Ch,0C6h,0C6h,0C6h,0FEh,000h,000h,000h,000h,000h ;   Hex #7F
    Db  000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0C0h,0C0h,0C2h,066h,03Ch,018h,070h,000h,000h ;   Hex #80
    Db  000h,000h,0CCh,000h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #81
    Db  000h,00Ch,018h,030h,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #82
    Db  000h,010h,038h,06Ch,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #83
    Db  000h,000h,076h,0DCh,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #84
    Db  000h,060h,030h,018h,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #85
    Db  060h,0C0h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #86
    Db  000h,000h,000h,000h,000h,07Ch,0C6h,0C0h,0C0h,0C0h,0C6h,07Ch,018h,070h,000h,000h ;   Hex #87
    Db  000h,010h,038h,06Ch,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #88
    Db  038h,06Ch,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h,000h,000h ;   Hex #89
    Db  000h,060h,030h,018h,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #8A
    Db  00Ch,018h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #8B
    Db  038h,06Ch,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #8C
    Db  000h,060h,030h,018h,000h,038h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #8D
    Db  076h,0DCh,000h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #8E
    Db  038h,06Ch,0C6h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #8F
    Db  00Ch,018h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h,000h,000h ;   Hex #90
    Db  00Ch,006h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #91
    Db  030h,018h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h,000h,000h ;   Hex #92
    Db  000h,010h,038h,06Ch,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #93
    Db  000h,000h,076h,0DCh,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #94
    Db  000h,060h,030h,018h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #95
    Db  018h,030h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #96
    Db  000h,060h,030h,018h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #97
    Db  030h,018h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #98
    Db  076h,0DCh,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #99
    Db  000h,0C6h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #9A
    Db  000h,018h,018h,07Ch,0C6h,0C0h,0C0h,0C0h,0C6h,07Ch,018h,018h,000h,000h,000h,000h ;   Hex #9B
    Db  000h,038h,06Ch,064h,060h,0F0h,060h,060h,060h,060h,0E6h,0FCh,000h,000h,000h,000h ;   Hex #9C
    Db  030h,018h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #9D
    Db  000h,0F8h,0CCh,0CCh,0F8h,0C4h,0CCh,0DEh,0CCh,0CCh,0CCh,0C6h,000h,000h,000h,000h ;   Hex #9E
    Db  018h,030h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #9F
    Db  000h,018h,030h,060h,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #A0
    Db  000h,00Ch,018h,030h,000h,038h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #A1
    Db  000h,018h,030h,060h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #A2
    Db  000h,018h,030h,060h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #A3
    Db  000h,000h,076h,0DCh,000h,0DCh,066h,066h,066h,066h,066h,066h,000h,000h,000h,000h ;   Hex #A4
    Db  076h,0DCh,000h,0C6h,0E6h,0F6h,0FEh,0DEh,0CEh,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #A5
    Db  000h,000h,03Ch,06Ch,06Ch,03Eh,000h,07Eh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #A6
    Db  000h,000h,038h,06Ch,06Ch,038h,000h,07Ch,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #A7
    Db  000h,000h,030h,030h,000h,030h,030h,060h,0C0h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #A8
    Db  030h,018h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #A9
    Db  000h,000h,000h,000h,000h,000h,0FEh,006h,006h,006h,006h,000h,000h,000h,000h,000h ;   Hex #AA
    Db  000h,060h,0E0h,062h,066h,06Ch,018h,030h,060h,0DCh,086h,00Ch,018h,03Eh,000h,000h ;   Hex #AB
    Db  000h,060h,0E0h,062h,066h,06Ch,018h,030h,066h,0CEh,09Ah,03Fh,006h,006h,000h,000h ;   Hex #AC
    Db  000h,000h,018h,018h,000h,018h,018h,018h,03Ch,03Ch,03Ch,018h,000h,000h,000h,000h ;   Hex #AD
    Db  000h,000h,000h,000h,000h,036h,06Ch,0D8h,06Ch,036h,000h,000h,000h,000h,000h,000h ;   Hex #AE
    Db  000h,000h,000h,000h,000h,0D8h,06Ch,036h,06Ch,0D8h,000h,000h,000h,000h,000h,000h ;   Hex #AF
    Db  011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h ;   Hex #B0
    Db  055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh ;   Hex #B1
    Db  0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h ;   Hex #B2
    Db  018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B3
    Db  018h,018h,018h,018h,018h,018h,018h,0F8h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B4
    Db  018h,018h,018h,018h,018h,0F8h,018h,0F8h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B5
    Db  036h,036h,036h,036h,036h,036h,036h,0F6h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #B6
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #B7
    Db  000h,000h,000h,000h,000h,0F8h,018h,0F8h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B8
    Db  036h,036h,036h,036h,036h,0F6h,006h,0F6h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #B9
    Db  036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #BA
    Db  000h,000h,000h,000h,000h,0FEh,006h,0F6h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #BB
    Db  036h,036h,036h,036h,036h,0F6h,006h,0FEh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #BC
    Db  036h,036h,036h,036h,036h,036h,036h,0FEh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #BD
    Db  018h,018h,018h,018h,018h,0F8h,018h,0F8h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #BE
    Db  000h,000h,000h,000h,000h,000h,000h,0F8h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #BF
    Db  018h,018h,018h,018h,018h,018h,018h,01Fh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #C0
    Db  018h,018h,018h,018h,018h,018h,018h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #C1
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #C2
    Db  018h,018h,018h,018h,018h,018h,018h,01Fh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #C3
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #C4
    Db  018h,018h,018h,018h,018h,018h,018h,0FFh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #C5
    Db  018h,018h,018h,018h,018h,01Fh,018h,01Fh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #C6
    Db  036h,036h,036h,036h,036h,036h,036h,037h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #C7
    Db  036h,036h,036h,036h,036h,037h,030h,03Fh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #C8
    Db  000h,000h,000h,000h,000h,03Fh,030h,037h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #C9
    Db  036h,036h,036h,036h,036h,0F7h,000h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #CA
    Db  000h,000h,000h,000h,000h,0FFh,000h,0F7h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #CB
    Db  036h,036h,036h,036h,036h,037h,030h,037h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #CC
    Db  000h,000h,000h,000h,000h,0FFh,000h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #CD
    Db  036h,036h,036h,036h,036h,0F7h,000h,0F7h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #CE
    Db  018h,018h,018h,018h,018h,0FFh,000h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #CF
    Db  036h,036h,036h,036h,036h,036h,036h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #D0
    Db  000h,000h,000h,000h,000h,0FFh,000h,0FFh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #D1
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #D2
    Db  036h,036h,036h,036h,036h,036h,036h,03Fh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #D3
    Db  018h,018h,018h,018h,018h,01Fh,018h,01Fh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #D4
    Db  000h,000h,000h,000h,000h,01Fh,018h,01Fh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #D5
    Db  000h,000h,000h,000h,000h,000h,000h,03Fh,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #D6
    Db  036h,036h,036h,036h,036h,036h,036h,0FFh,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #D7
    Db  018h,018h,018h,018h,018h,0FFh,018h,0FFh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #D8
    Db  018h,018h,018h,018h,018h,018h,018h,0F8h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #D9
    Db  000h,000h,000h,000h,000h,000h,000h,01Fh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #DA
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DB
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DC
    Db  0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h ;   Hex #DD
    Db  00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh ;   Hex #DE
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #DF
    Db  000h,000h,000h,000h,000h,076h,0DCh,0D8h,0D8h,0D8h,0DCh,076h,000h,000h,000h,000h ;   Hex #E0
    Db  000h,000h,078h,0CCh,0CCh,0CCh,0D8h,0CCh,0C6h,0C6h,0C6h,0CCh,000h,000h,000h,000h ;   Hex #E1
    Db  000h,000h,0FEh,0C6h,0C6h,0C0h,0C0h,0C0h,0C0h,0C0h,0C0h,0C0h,000h,000h,000h,000h ;   Hex #E2
    Db  000h,000h,000h,000h,000h,0FEh,06Ch,06Ch,06Ch,06Ch,06Ch,06Ch,000h,000h,000h,000h ;   Hex #E3
    Db  000h,000h,0FEh,0C6h,060h,030h,018h,018h,030h,060h,0C6h,0FEh,000h,000h,000h,000h ;   Hex #E4
    Db  000h,000h,000h,000h,000h,07Eh,0D8h,0D8h,0D8h,0D8h,0D8h,070h,000h,000h,000h,000h ;   Hex #E5
    Db  000h,000h,000h,000h,000h,066h,066h,066h,066h,066h,066h,07Ch,060h,060h,0C0h,000h ;   Hex #E6
    Db  000h,000h,000h,000h,076h,0DCh,018h,018h,018h,018h,018h,018h,000h,000h,000h,000h ;   Hex #E7
    Db  000h,000h,07Eh,018h,03Ch,066h,066h,066h,066h,03Ch,018h,07Eh,000h,000h,000h,000h ;   Hex #E8
    Db  000h,000h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,06Ch,038h,000h,000h,000h,000h ;   Hex #E9
    Db  000h,000h,038h,06Ch,0C6h,0C6h,0C6h,06Ch,06Ch,06Ch,06Ch,0EEh,000h,000h,000h,000h ;   Hex #EA
    Db  000h,000h,01Eh,030h,018h,00Ch,03Eh,066h,066h,066h,066h,03Ch,000h,000h,000h,000h ;   Hex #EB
    Db  000h,000h,000h,000h,000h,07Eh,0DBh,0DBh,0DBh,07Eh,000h,000h,000h,000h,000h,000h ;   Hex #EC
    Db  000h,000h,000h,003h,006h,07Eh,0DBh,0DBh,0F3h,07Eh,060h,0C0h,000h,000h,000h,000h ;   Hex #ED
    Db  000h,000h,01Ch,030h,060h,060h,07Ch,060h,060h,060h,030h,01Ch,000h,000h,000h,000h ;   Hex #EE
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #EF
    Db  000h,000h,000h,000h,0FEh,000h,000h,0FEh,000h,000h,0FEh,000h,000h,000h,000h,000h ;   Hex #F0
    Db  000h,000h,000h,000h,018h,018h,07Eh,018h,018h,000h,000h,07Eh,000h,000h,000h,000h ;   Hex #F1
    Db  000h,000h,000h,030h,018h,00Ch,006h,00Ch,018h,030h,000h,07Eh,000h,000h,000h,000h ;   Hex #F2
    Db  000h,000h,000h,00Ch,018h,030h,060h,030h,018h,00Ch,000h,07Eh,000h,000h,000h,000h ;   Hex #F3
    Db  000h,000h,00Eh,01Bh,01Bh,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #F4
    Db  018h,018h,018h,018h,018h,018h,018h,018h,018h,0D8h,0D8h,0D8h,070h,000h,000h,000h ;   Hex #F5
    Db  000h,000h,000h,000h,000h,018h,000h,07Eh,000h,018h,000h,000h,000h,000h,000h,000h ;   Hex #F6
    Db  000h,000h,000h,000h,000h,076h,0DCh,000h,076h,0DCh,000h,000h,000h,000h,000h,000h ;   Hex #F7
    Db  000h,038h,06Ch,06Ch,038h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #F8
    Db  000h,000h,000h,000h,000h,000h,000h,018h,018h,000h,000h,000h,000h,000h,000h,000h ;   Hex #F9
    Db  000h,000h,000h,000h,000h,000h,000h,018h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FA
    Db  000h,00Fh,00Ch,00Ch,00Ch,00Ch,00Ch,0ECh,06Ch,06Ch,03Ch,01Ch,000h,000h,000h,000h ;   Hex #FB
    Db  000h,06Ch,036h,036h,036h,036h,036h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FC
    Db  000h,03Ch,066h,00Ch,018h,032h,07Eh,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FD
    Db  000h,000h,000h,000h,07Eh,07Eh,07Eh,07Eh,07Eh,07Eh,07Eh,000h,000h,000h,000h,000h ;   Hex #FE
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FF


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\ega\863-8x16.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
;***************************************************
;  CHARACTER FONT FILE
;  Source Assembler File
;
;        CODE PAGE: 863 
;  FONT RESOLUTION: 8 x 16 
;
;     DATE CREATED:05-28-1987
;
;
; Output file from: MULTIFON, Version 1A
;
;***************************************************
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #0
    Db  000h,000h,07Eh,081h,0A5h,081h,081h,0BDh,099h,081h,081h,07Eh,000h,000h,000h,000h ;   Hex #1
    Db  000h,000h,07Eh,0FFh,0DBh,0FFh,0FFh,0C3h,0E7h,0FFh,0FFh,07Eh,000h,000h,000h,000h ;   Hex #2
    Db  000h,000h,000h,000h,06Ch,0FEh,0FEh,0FEh,0FEh,07Ch,038h,010h,000h,000h,000h,000h ;   Hex #3
    Db  000h,000h,000h,000h,010h,038h,07Ch,0FEh,07Ch,038h,010h,000h,000h,000h,000h,000h ;   Hex #4
    Db  000h,000h,000h,018h,03Ch,03Ch,0E7h,0E7h,0E7h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #5
    Db  000h,000h,000h,018h,03Ch,07Eh,0FFh,0FFh,07Eh,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #6
    Db  000h,000h,000h,000h,000h,000h,018h,03Ch,03Ch,018h,000h,000h,000h,000h,000h,000h ;   Hex #7
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0E7h,0C3h,0C3h,0E7h,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #8
    Db  000h,000h,000h,000h,000h,03Ch,066h,042h,042h,066h,03Ch,000h,000h,000h,000h,000h ;   Hex #9
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0C3h,099h,0BDh,0BDh,099h,0C3h,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #A
    Db  000h,000h,01Eh,00Eh,01Ah,032h,078h,0CCh,0CCh,0CCh,0CCh,078h,000h,000h,000h,000h ;   Hex #B
    Db  000h,000h,03Ch,066h,066h,066h,066h,03Ch,018h,07Eh,018h,018h,000h,000h,000h,000h ;   Hex #C
    Db  000h,000h,03Fh,033h,03Fh,030h,030h,030h,030h,070h,0F0h,0E0h,000h,000h,000h,000h ;   Hex #D
    Db  000h,000h,07Fh,063h,07Fh,063h,063h,063h,063h,067h,0E7h,0E6h,0C0h,000h,000h,000h ;   Hex #E
    Db  000h,000h,000h,018h,018h,0DBh,03Ch,0E7h,03Ch,0DBh,018h,018h,000h,000h,000h,000h ;   Hex #F
    Db  000h,080h,0C0h,0E0h,0F0h,0F8h,0FEh,0F8h,0F0h,0E0h,0C0h,080h,000h,000h,000h,000h ;   Hex #10
    Db  000h,002h,006h,00Eh,01Eh,03Eh,0FEh,03Eh,01Eh,00Eh,006h,002h,000h,000h,000h,000h ;   Hex #11
    Db  000h,000h,018h,03Ch,07Eh,018h,018h,018h,07Eh,03Ch,018h,000h,000h,000h,000h,000h ;   Hex #12
    Db  000h,000h,066h,066h,066h,066h,066h,066h,066h,000h,066h,066h,000h,000h,000h,000h ;   Hex #13
    Db  000h,000h,07Fh,0DBh,0DBh,0DBh,07Bh,01Bh,01Bh,01Bh,01Bh,01Bh,000h,000h,000h,000h ;   Hex #14
    Db  000h,07Ch,0C6h,060h,038h,06Ch,0C6h,0C6h,06Ch,038h,00Ch,0C6h,07Ch,000h,000h,000h ;   Hex #15
    Db  000h,000h,000h,000h,000h,000h,000h,000h,0FEh,0FEh,0FEh,0FEh,000h,000h,000h,000h ;   Hex #16
    Db  000h,000h,018h,03Ch,07Eh,018h,018h,018h,07Eh,03Ch,018h,07Eh,000h,000h,000h,000h ;   Hex #17
    Db  000h,000h,018h,03Ch,07Eh,018h,018h,018h,018h,018h,018h,018h,000h,000h,000h,000h ;   Hex #18
    Db  000h,000h,018h,018h,018h,018h,018h,018h,018h,07Eh,03Ch,018h,000h,000h,000h,000h ;   Hex #19
    Db  000h,000h,000h,000h,000h,018h,00Ch,0FEh,00Ch,018h,000h,000h,000h,000h,000h,000h ;   Hex #1A
    Db  000h,000h,000h,000h,000h,030h,060h,0FEh,060h,030h,000h,000h,000h,000h,000h,000h ;   Hex #1B
    Db  000h,000h,000h,000h,000h,000h,0C0h,0C0h,0C0h,0FEh,000h,000h,000h,000h,000h,000h ;   Hex #1C
    Db  000h,000h,000h,000h,000h,028h,06Ch,0FEh,06Ch,028h,000h,000h,000h,000h,000h,000h ;   Hex #1D
    Db  000h,000h,000h,000h,010h,038h,038h,07Ch,07Ch,0FEh,0FEh,000h,000h,000h,000h,000h ;   Hex #1E
    Db  000h,000h,000h,000h,0FEh,0FEh,07Ch,07Ch,038h,038h,010h,000h,000h,000h,000h,000h ;   Hex #1F
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #20
    Db  000h,000h,018h,03Ch,03Ch,03Ch,018h,018h,018h,000h,018h,018h,000h,000h,000h,000h ;   Hex #21
    Db  000h,066h,066h,066h,024h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #22
    Db  000h,000h,000h,06Ch,06Ch,0FEh,06Ch,06Ch,06Ch,0FEh,06Ch,06Ch,000h,000h,000h,000h ;   Hex #23
    Db  018h,018h,07Ch,0C6h,0C2h,0C0h,07Ch,006h,006h,086h,0C6h,07Ch,018h,018h,000h,000h ;   Hex #24
    Db  000h,000h,000h,000h,0C2h,0C6h,00Ch,018h,030h,060h,0C6h,086h,000h,000h,000h,000h ;   Hex #25
    Db  000h,000h,038h,06Ch,06Ch,038h,076h,0DCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #26
    Db  000h,030h,030h,030h,060h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #27
    Db  000h,000h,00Ch,018h,030h,030h,030h,030h,030h,030h,018h,00Ch,000h,000h,000h,000h ;   Hex #28
    Db  000h,000h,030h,018h,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,018h,030h,000h,000h,000h,000h ;   Hex #29
    Db  000h,000h,000h,000h,000h,066h,03Ch,0FFh,03Ch,066h,000h,000h,000h,000h,000h,000h ;   Hex #2A
    Db  000h,000h,000h,000h,000h,018h,018h,07Eh,018h,018h,000h,000h,000h,000h,000h,000h ;   Hex #2B
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,018h,018h,030h,000h,000h,000h ;   Hex #2C
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #2D
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,018h,000h,000h,000h,000h ;   Hex #2E
    Db  000h,000h,000h,000h,002h,006h,00Ch,018h,030h,060h,0C0h,080h,000h,000h,000h,000h ;   Hex #2F
    Db  000h,000h,038h,06Ch,0C6h,0C6h,0D6h,0D6h,0C6h,0C6h,06Ch,038h,000h,000h,000h,000h ;   Hex #30
    Db  000h,000h,018h,038h,078h,018h,018h,018h,018h,018h,018h,07Eh,000h,000h,000h,000h ;   Hex #31
    Db  000h,000h,07Ch,0C6h,006h,00Ch,018h,030h,060h,0C0h,0C6h,0FEh,000h,000h,000h,000h ;   Hex #32
    Db  000h,000h,07Ch,0C6h,006h,006h,03Ch,006h,006h,006h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #33
    Db  000h,000h,00Ch,01Ch,03Ch,06Ch,0CCh,0FEh,00Ch,00Ch,00Ch,01Eh,000h,000h,000h,000h ;   Hex #34
    Db  000h,000h,0FEh,0C0h,0C0h,0C0h,0FCh,006h,006h,006h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #35
    Db  000h,000h,038h,060h,0C0h,0C0h,0FCh,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #36
    Db  000h,000h,0FEh,0C6h,006h,006h,00Ch,018h,030h,030h,030h,030h,000h,000h,000h,000h ;   Hex #37
    Db  000h,000h,07Ch,0C6h,0C6h,0C6h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #38
    Db  000h,000h,07Ch,0C6h,0C6h,0C6h,07Eh,006h,006h,006h,00Ch,078h,000h,000h,000h,000h ;   Hex #39
    Db  000h,000h,000h,000h,018h,018h,000h,000h,000h,018h,018h,000h,000h,000h,000h,000h ;   Hex #3A
    Db  000h,000h,000h,000h,018h,018h,000h,000h,000h,018h,018h,030h,000h,000h,000h,000h ;   Hex #3B
    Db  000h,000h,000h,006h,00Ch,018h,030h,060h,030h,018h,00Ch,006h,000h,000h,000h,000h ;   Hex #3C
    Db  000h,000h,000h,000h,000h,07Eh,000h,000h,07Eh,000h,000h,000h,000h,000h,000h,000h ;   Hex #3D
    Db  000h,000h,000h,060h,030h,018h,00Ch,006h,00Ch,018h,030h,060h,000h,000h,000h,000h ;   Hex #3E
    Db  000h,000h,07Ch,0C6h,0C6h,00Ch,018h,018h,018h,000h,018h,018h,000h,000h,000h,000h ;   Hex #3F
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0DEh,0DEh,0DEh,0DCh,0C0h,07Ch,000h,000h,000h,000h ;   Hex #40
    Db  000h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #41
    Db  000h,000h,0FCh,066h,066h,066h,07Ch,066h,066h,066h,066h,0FCh,000h,000h,000h,000h ;   Hex #42
    Db  000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0C0h,0C0h,0C2h,066h,03Ch,000h,000h,000h,000h ;   Hex #43
    Db  000h,000h,0F8h,06Ch,066h,066h,066h,066h,066h,066h,06Ch,0F8h,000h,000h,000h,000h ;   Hex #44
    Db  000h,000h,0FEh,066h,062h,068h,078h,068h,060h,062h,066h,0FEh,000h,000h,000h,000h ;   Hex #45
    Db  000h,000h,0FEh,066h,062h,068h,078h,068h,060h,060h,060h,0F0h,000h,000h,000h,000h ;   Hex #46
    Db  000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0DEh,0C6h,0C6h,066h,03Ah,000h,000h,000h,000h ;   Hex #47
    Db  000h,000h,0C6h,0C6h,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #48
    Db  000h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #49
    Db  000h,000h,01Eh,00Ch,00Ch,00Ch,00Ch,00Ch,0CCh,0CCh,0CCh,078h,000h,000h,000h,000h ;   Hex #4A
    Db  000h,000h,0E6h,066h,066h,06Ch,078h,078h,06Ch,066h,066h,0E6h,000h,000h,000h,000h ;   Hex #4B
    Db  000h,000h,0F0h,060h,060h,060h,060h,060h,060h,062h,066h,0FEh,000h,000h,000h,000h ;   Hex #4C
    Db  000h,000h,0C6h,0EEh,0FEh,0FEh,0D6h,0C6h,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #4D
    Db  000h,000h,0C6h,0E6h,0F6h,0FEh,0DEh,0CEh,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #4E
    Db  000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #4F
    Db  000h,000h,0FCh,066h,066h,066h,07Ch,060h,060h,060h,060h,0F0h,000h,000h,000h,000h ;   Hex #50
    Db  000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0D6h,0DEh,07Ch,00Ch,00Eh,000h,000h ;   Hex #51
    Db  000h,000h,0FCh,066h,066h,066h,07Ch,06Ch,066h,066h,066h,0E6h,000h,000h,000h,000h ;   Hex #52
    Db  000h,000h,07Ch,0C6h,0C6h,060h,038h,00Ch,006h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #53
    Db  000h,000h,07Eh,07Eh,05Ah,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #54
    Db  000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #55
    Db  000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,06Ch,038h,010h,000h,000h,000h,000h ;   Hex #56
    Db  000h,000h,0C6h,0C6h,0C6h,0C6h,0D6h,0D6h,0D6h,0FEh,0EEh,06Ch,000h,000h,000h,000h ;   Hex #57
    Db  000h,000h,0C6h,0C6h,06Ch,07Ch,038h,038h,07Ch,06Ch,0C6h,0C6h,000h,000h,000h,000h ;   Hex #58
    Db  000h,000h,066h,066h,066h,066h,03Ch,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #59
    Db  000h,000h,0FEh,0C6h,086h,00Ch,018h,030h,060h,0C2h,0C6h,0FEh,000h,000h,000h,000h ;   Hex #5A
    Db  000h,000h,03Ch,030h,030h,030h,030h,030h,030h,030h,030h,03Ch,000h,000h,000h,000h ;   Hex #5B
    Db  000h,000h,000h,080h,0C0h,0E0h,070h,038h,01Ch,00Eh,006h,002h,000h,000h,000h,000h ;   Hex #5C
    Db  000h,000h,03Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,03Ch,000h,000h,000h,000h ;   Hex #5D
    Db  010h,038h,06Ch,0C6h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #5E
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,0FFh,000h,000h ;   Hex #5F
    Db  000h,030h,018h,00Ch,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #60
    Db  000h,000h,000h,000h,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #61
    Db  000h,000h,0E0h,060h,060h,078h,06Ch,066h,066h,066h,066h,07Ch,000h,000h,000h,000h ;   Hex #62
    Db  000h,000h,000h,000h,000h,07Ch,0C6h,0C0h,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #63
    Db  000h,000h,01Ch,00Ch,00Ch,03Ch,06Ch,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #64
    Db  000h,000h,000h,000h,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #65
    Db  000h,000h,01Ch,036h,032h,030h,078h,030h,030h,030h,030h,078h,000h,000h,000h,000h ;   Hex #66
    Db  000h,000h,000h,000h,000h,076h,0CCh,0CCh,0CCh,0CCh,0CCh,07Ch,00Ch,0CCh,078h,000h ;   Hex #67
    Db  000h,000h,0E0h,060h,060h,06Ch,076h,066h,066h,066h,066h,0E6h,000h,000h,000h,000h ;   Hex #68
    Db  000h,000h,018h,018h,000h,038h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #69
    Db  000h,000h,006h,006h,000h,00Eh,006h,006h,006h,006h,006h,006h,066h,066h,03Ch,000h ;   Hex #6A
    Db  000h,000h,0E0h,060h,060h,066h,06Ch,078h,078h,06Ch,066h,0E6h,000h,000h,000h,000h ;   Hex #6B
    Db  000h,000h,038h,018h,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #6C
    Db  000h,000h,000h,000h,000h,0ECh,0FEh,0D6h,0D6h,0D6h,0D6h,0C6h,000h,000h,000h,000h ;   Hex #6D
    Db  000h,000h,000h,000h,000h,0DCh,066h,066h,066h,066h,066h,066h,000h,000h,000h,000h ;   Hex #6E
    Db  000h,000h,000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #6F
    Db  000h,000h,000h,000h,000h,0DCh,066h,066h,066h,066h,066h,07Ch,060h,060h,0F0h,000h ;   Hex #70
    Db  000h,000h,000h,000h,000h,076h,0CCh,0CCh,0CCh,0CCh,0CCh,07Ch,00Ch,00Ch,01Eh,000h ;   Hex #71
    Db  000h,000h,000h,000h,000h,0DCh,076h,066h,060h,060h,060h,0F0h,000h,000h,000h,000h ;   Hex #72
    Db  000h,000h,000h,000h,000h,07Ch,0C6h,060h,038h,00Ch,0C6h,07Ch,000h,000h,000h,000h ;   Hex #73
    Db  000h,000h,010h,030h,030h,0FCh,030h,030h,030h,030h,036h,01Ch,000h,000h,000h,000h ;   Hex #74
    Db  000h,000h,000h,000h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #75
    Db  000h,000h,000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,06Ch,038h,000h,000h,000h,000h ;   Hex #76
    Db  000h,000h,000h,000h,000h,0C6h,0C6h,0D6h,0D6h,0D6h,0FEh,06Ch,000h,000h,000h,000h ;   Hex #77
    Db  000h,000h,000h,000h,000h,0C6h,06Ch,038h,038h,038h,06Ch,0C6h,000h,000h,000h,000h ;   Hex #78
    Db  000h,000h,000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Eh,006h,00Ch,0F8h,000h ;   Hex #79
    Db  000h,000h,000h,000h,000h,0FEh,0CCh,018h,030h,060h,0C6h,0FEh,000h,000h,000h,000h ;   Hex #7A
    Db  000h,000h,00Eh,018h,018h,018h,070h,018h,018h,018h,018h,00Eh,000h,000h,000h,000h ;   Hex #7B
    Db  000h,000h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,000h,000h,000h,000h ;   Hex #7C
    Db  000h,000h,070h,018h,018h,018h,00Eh,018h,018h,018h,018h,070h,000h,000h,000h,000h ;   Hex #7D
    Db  000h,076h,0DCh,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #7E
    Db  000h,000h,000h,000h,010h,038h,06Ch,0C6h,0C6h,0C6h,0FEh,000h,000h,000h,000h,000h ;   Hex #7F
    Db  000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0C0h,0C0h,0C2h,066h,03Ch,018h,070h,000h,000h ;   Hex #80
    Db  000h,000h,0CCh,000h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #81
    Db  000h,00Ch,018h,030h,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #82
    Db  000h,010h,038h,06Ch,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #83
    Db  038h,06Ch,0C6h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #84
    Db  000h,060h,030h,018h,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #85
    Db  000h,000h,000h,07Fh,0DBh,0DBh,0DBh,07Bh,01Bh,01Bh,01Bh,01Bh,000h,000h,000h,000h ;   Hex #86
    Db  000h,000h,000h,000h,000h,07Ch,0C6h,0C0h,0C0h,0C0h,0C6h,07Ch,018h,070h,000h,000h ;   Hex #87
    Db  000h,010h,038h,06Ch,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #88
    Db  000h,000h,0C6h,000h,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #89
    Db  000h,060h,030h,018h,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #8A
    Db  000h,000h,066h,000h,000h,038h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #8B
    Db  000h,018h,03Ch,066h,000h,038h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #8C
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,0FFh,000h,0FFh,000h ;   Hex #8D
    Db  018h,00Ch,006h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #8E
    Db  000h,07Ch,0C6h,060h,038h,06Ch,0C6h,0C6h,06Ch,038h,00Ch,0C6h,07Ch,000h,000h,000h ;   Hex #8F
    Db  00Ch,018h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h,000h,000h ;   Hex #90
    Db  030h,018h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h,000h,000h ;   Hex #91
    Db  038h,06Ch,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h,000h,000h ;   Hex #92
    Db  000h,010h,038h,06Ch,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #93
    Db  000h,0C6h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h,000h,000h ;   Hex #94
    Db  000h,066h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #95
    Db  000h,030h,078h,0CCh,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #96
    Db  000h,060h,030h,018h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #97
    Db  000h,000h,000h,000h,0C6h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,0C6h,000h,000h,000h,000h ;   Hex #98
    Db  038h,06Ch,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #99
    Db  000h,0C6h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #9A
    Db  000h,018h,018h,07Ch,0C6h,0C0h,0C0h,0C0h,0C6h,07Ch,018h,018h,000h,000h,000h,000h ;   Hex #9B
    Db  000h,038h,06Ch,064h,060h,0F0h,060h,060h,060h,060h,0E6h,0FCh,000h,000h,000h,000h ;   Hex #9C
    Db  030h,018h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #9D
    Db  038h,06Ch,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #9E
    Db  000h,00Eh,01Bh,018h,018h,018h,07Eh,018h,018h,018h,0D8h,070h,000h,000h,000h,000h ;   Hex #9F
    Db  000h,018h,018h,018h,018h,018h,000h,000h,018h,018h,018h,018h,018h,000h,000h,000h ;   Hex #A0
    Db  000h,00Ch,018h,030h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #A1
    Db  000h,018h,030h,060h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #A2
    Db  000h,018h,030h,060h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #A3
    Db  000h,0C6h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #A4
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,00Ch,078h,000h,000h ;   Hex #A5
    Db  000h,07Ch,006h,03Ch,006h,006h,07Ch,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #A6
    Db  000h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #A7
    Db  03Ch,066h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #A8
    Db  000h,000h,000h,000h,000h,000h,0FEh,0C0h,0C0h,0C0h,0C0h,000h,000h,000h,000h,000h ;   Hex #A9
    Db  000h,000h,000h,000h,000h,000h,0FEh,006h,006h,006h,006h,000h,000h,000h,000h,000h ;   Hex #AA
    Db  000h,060h,0E0h,062h,066h,06Ch,018h,030h,060h,0DCh,086h,00Ch,018h,03Eh,000h,000h ;   Hex #AB
    Db  000h,060h,0E0h,062h,066h,06Ch,018h,030h,066h,0CEh,09Ah,03Fh,006h,006h,000h,000h ;   Hex #AC
    Db  000h,0E0h,030h,0E2h,036h,0ECh,018h,030h,066h,0CEh,09Ah,03Fh,006h,006h,000h,000h ;   Hex #AD
    Db  000h,000h,000h,000h,000h,036h,06Ch,0D8h,06Ch,036h,000h,000h,000h,000h,000h,000h ;   Hex #AE
    Db  000h,000h,000h,000h,000h,0D8h,06Ch,036h,06Ch,0D8h,000h,000h,000h,000h,000h,000h ;   Hex #AF
    Db  011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h ;   Hex #B0
    Db  055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh ;   Hex #B1
    Db  0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h ;   Hex #B2
    Db  018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B3
    Db  018h,018h,018h,018h,018h,018h,018h,0F8h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B4
    Db  018h,018h,018h,018h,018h,0F8h,018h,0F8h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B5
    Db  036h,036h,036h,036h,036h,036h,036h,0F6h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #B6
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #B7
    Db  000h,000h,000h,000h,000h,0F8h,018h,0F8h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B8
    Db  036h,036h,036h,036h,036h,0F6h,006h,0F6h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #B9
    Db  036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #BA
    Db  000h,000h,000h,000h,000h,0FEh,006h,0F6h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #BB
    Db  036h,036h,036h,036h,036h,0F6h,006h,0FEh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #BC
    Db  036h,036h,036h,036h,036h,036h,036h,0FEh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #BD
    Db  018h,018h,018h,018h,018h,0F8h,018h,0F8h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #BE
    Db  000h,000h,000h,000h,000h,000h,000h,0F8h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #BF
    Db  018h,018h,018h,018h,018h,018h,018h,01Fh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #C0
    Db  018h,018h,018h,018h,018h,018h,018h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #C1
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #C2
    Db  018h,018h,018h,018h,018h,018h,018h,01Fh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #C3
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #C4
    Db  018h,018h,018h,018h,018h,018h,018h,0FFh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #C5
    Db  018h,018h,018h,018h,018h,01Fh,018h,01Fh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #C6
    Db  036h,036h,036h,036h,036h,036h,036h,037h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #C7
    Db  036h,036h,036h,036h,036h,037h,030h,03Fh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #C8
    Db  000h,000h,000h,000h,000h,03Fh,030h,037h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #C9
    Db  036h,036h,036h,036h,036h,0F7h,000h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #CA
    Db  000h,000h,000h,000h,000h,0FFh,000h,0F7h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #CB
    Db  036h,036h,036h,036h,036h,037h,030h,037h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #CC
    Db  000h,000h,000h,000h,000h,0FFh,000h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #CD
    Db  036h,036h,036h,036h,036h,0F7h,000h,0F7h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #CE
    Db  018h,018h,018h,018h,018h,0FFh,000h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #CF
    Db  036h,036h,036h,036h,036h,036h,036h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #D0
    Db  000h,000h,000h,000h,000h,0FFh,000h,0FFh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #D1
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #D2
    Db  036h,036h,036h,036h,036h,036h,036h,03Fh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #D3
    Db  018h,018h,018h,018h,018h,01Fh,018h,01Fh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #D4
    Db  000h,000h,000h,000h,000h,01Fh,018h,01Fh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #D5
    Db  000h,000h,000h,000h,000h,000h,000h,03Fh,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #D6
    Db  036h,036h,036h,036h,036h,036h,036h,0FFh,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #D7
    Db  018h,018h,018h,018h,018h,0FFh,018h,0FFh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #D8
    Db  018h,018h,018h,018h,018h,018h,018h,0F8h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #D9
    Db  000h,000h,000h,000h,000h,000h,000h,01Fh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #DA
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DB
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DC
    Db  0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h ;   Hex #DD
    Db  00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh ;   Hex #DE
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #DF
    Db  000h,000h,000h,000h,000h,076h,0DCh,0D8h,0D8h,0D8h,0DCh,076h,000h,000h,000h,000h ;   Hex #E0
    Db  000h,000h,078h,0CCh,0CCh,0CCh,0D8h,0CCh,0C6h,0C6h,0C6h,0CCh,000h,000h,000h,000h ;   Hex #E1
    Db  000h,000h,0FEh,0C6h,0C6h,0C0h,0C0h,0C0h,0C0h,0C0h,0C0h,0C0h,000h,000h,000h,000h ;   Hex #E2
    Db  000h,000h,000h,000h,000h,0FEh,06Ch,06Ch,06Ch,06Ch,06Ch,06Ch,000h,000h,000h,000h ;   Hex #E3
    Db  000h,000h,0FEh,0C6h,060h,030h,018h,018h,030h,060h,0C6h,0FEh,000h,000h,000h,000h ;   Hex #E4
    Db  000h,000h,000h,000h,000h,07Eh,0D8h,0D8h,0D8h,0D8h,0D8h,070h,000h,000h,000h,000h ;   Hex #E5
    Db  000h,000h,000h,000h,000h,066h,066h,066h,066h,066h,066h,07Ch,060h,060h,0C0h,000h ;   Hex #E6
    Db  000h,000h,000h,000h,076h,0DCh,018h,018h,018h,018h,018h,018h,000h,000h,000h,000h ;   Hex #E7
    Db  000h,000h,07Eh,018h,03Ch,066h,066h,066h,066h,03Ch,018h,07Eh,000h,000h,000h,000h ;   Hex #E8
    Db  000h,000h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,06Ch,038h,000h,000h,000h,000h ;   Hex #E9
    Db  000h,000h,038h,06Ch,0C6h,0C6h,0C6h,06Ch,06Ch,06Ch,06Ch,0EEh,000h,000h,000h,000h ;   Hex #EA
    Db  000h,000h,01Eh,030h,018h,00Ch,03Eh,066h,066h,066h,066h,03Ch,000h,000h,000h,000h ;   Hex #EB
    Db  000h,000h,000h,000h,000h,07Eh,0DBh,0DBh,0DBh,07Eh,000h,000h,000h,000h,000h,000h ;   Hex #EC
    Db  000h,000h,000h,003h,006h,07Eh,0DBh,0DBh,0F3h,07Eh,060h,0C0h,000h,000h,000h,000h ;   Hex #ED
    Db  000h,000h,01Ch,030h,060h,060h,07Ch,060h,060h,060h,030h,01Ch,000h,000h,000h,000h ;   Hex #EE
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #EF
    Db  000h,000h,000h,000h,0FEh,000h,000h,0FEh,000h,000h,0FEh,000h,000h,000h,000h,000h ;   Hex #F0
    Db  000h,000h,000h,000h,018h,018h,07Eh,018h,018h,000h,000h,07Eh,000h,000h,000h,000h ;   Hex #F1
    Db  000h,000h,000h,030h,018h,00Ch,006h,00Ch,018h,030h,000h,07Eh,000h,000h,000h,000h ;   Hex #F2
    Db  000h,000h,000h,00Ch,018h,030h,060h,030h,018h,00Ch,000h,07Eh,000h,000h,000h,000h ;   Hex #F3
    Db  000h,000h,00Eh,01Bh,01Bh,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #F4
    Db  018h,018h,018h,018h,018h,018h,018h,018h,018h,0D8h,0D8h,0D8h,070h,000h,000h,000h ;   Hex #F5
    Db  000h,000h,000h,000h,000h,018h,000h,07Eh,000h,018h,000h,000h,000h,000h,000h,000h ;   Hex #F6
    Db  000h,000h,000h,000h,000h,076h,0DCh,000h,076h,0DCh,000h,000h,000h,000h,000h,000h ;   Hex #F7
    Db  000h,038h,06Ch,06Ch,038h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #F8
    Db  000h,000h,000h,000h,000h,000h,000h,018h,018h,000h,000h,000h,000h,000h,000h,000h ;   Hex #F9
    Db  000h,000h,000h,000h,000h,000h,000h,018h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FA
    Db  000h,00Fh,00Ch,00Ch,00Ch,00Ch,00Ch,0ECh,06Ch,06Ch,03Ch,01Ch,000h,000h,000h,000h ;   Hex #FB
    Db  000h,06Ch,036h,036h,036h,036h,036h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FC
    Db  000h,03Ch,066h,00Ch,018h,032h,07Eh,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FD
    Db  000h,000h,000h,000h,07Eh,07Eh,07Eh,07Eh,07Eh,07Eh,07Eh,000h,000h,000h,000h,000h ;   Hex #FE
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FF


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\ega\860-8x14.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
;***************************************************
;  CHARACTER FONT FILE
;  Source Assembler File
;
;        CODE PAGE: 860 
;  FONT RESOLUTION: 8 x 14 
;
;     DATE CREATED:05-28-1987
;
;
; Output file from: MULTIFON, Version 1A
;
;***************************************************
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #0
    Db  000h,000h,000h,07Eh,081h,0A5h,081h,081h,0BDh,099h,081h,07Eh,000h,000h ;   Hex #1
    Db  000h,000h,000h,07Eh,0FFh,0DBh,0FFh,0FFh,0C3h,0E7h,0FFh,07Eh,000h,000h ;   Hex #2
    Db  000h,000h,000h,000h,06Ch,0FEh,0FEh,0FEh,0FEh,07Ch,038h,010h,000h,000h ;   Hex #3
    Db  000h,000h,000h,000h,010h,038h,07Ch,0FEh,07Ch,038h,010h,000h,000h,000h ;   Hex #4
    Db  000h,000h,000h,018h,03Ch,03Ch,0E7h,0E7h,0E7h,018h,018h,03Ch,000h,000h ;   Hex #5
    Db  000h,000h,000h,018h,03Ch,07Eh,0FFh,0FFh,07Eh,018h,018h,03Ch,000h,000h ;   Hex #6
    Db  000h,000h,000h,000h,000h,000h,018h,03Ch,03Ch,018h,000h,000h,000h,000h ;   Hex #7
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0E7h,0C3h,0C3h,0E7h,0FFh,0FFh,0FFh,0FFh ;   Hex #8
    Db  000h,000h,000h,000h,000h,03Ch,066h,042h,042h,066h,03Ch,000h,000h,000h ;   Hex #9
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0C3h,099h,0BDh,0BDh,099h,0C3h,0FFh,0FFh,0FFh ;   Hex #A
    Db  000h,000h,000h,01Eh,00Eh,01Ah,032h,078h,0CCh,0CCh,0CCh,078h,000h,000h ;   Hex #B
    Db  000h,000h,000h,03Ch,066h,066h,066h,03Ch,018h,07Eh,018h,018h,000h,000h ;   Hex #C
    Db  000h,000h,000h,03Fh,033h,03Fh,030h,030h,030h,070h,0F0h,0E0h,000h,000h ;   Hex #D
    Db  000h,000h,000h,07Fh,063h,07Fh,063h,063h,063h,067h,0E7h,0E6h,0C0h,000h ;   Hex #E
    Db  000h,000h,000h,018h,018h,0DBh,03Ch,0E7h,03Ch,0DBh,018h,018h,000h,000h ;   Hex #F
    Db  000h,000h,000h,080h,0C0h,0E0h,0F8h,0FEh,0F8h,0E0h,0C0h,080h,000h,000h ;   Hex #10
    Db  000h,000h,000h,002h,006h,00Eh,03Eh,0FEh,03Eh,00Eh,006h,002h,000h,000h ;   Hex #11
    Db  000h,000h,000h,018h,03Ch,07Eh,018h,018h,018h,07Eh,03Ch,018h,000h,000h ;   Hex #12
    Db  000h,000h,000h,066h,066h,066h,066h,066h,066h,000h,066h,066h,000h,000h ;   Hex #13
    Db  000h,000h,000h,07Fh,0DBh,0DBh,0DBh,07Bh,01Bh,01Bh,01Bh,01Bh,000h,000h ;   Hex #14
    Db  000h,000h,07Ch,0C6h,060h,038h,06Ch,0C6h,0C6h,06Ch,038h,00Ch,0C6h,07Ch ;   Hex #15
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,0FEh,0FEh,0FEh,000h,000h ;   Hex #16
    Db  000h,000h,000h,018h,03Ch,07Eh,018h,018h,018h,07Eh,03Ch,018h,07Eh,000h ;   Hex #17
    Db  000h,000h,000h,018h,03Ch,07Eh,018h,018h,018h,018h,018h,018h,000h,000h ;   Hex #18
    Db  000h,000h,000h,018h,018h,018h,018h,018h,018h,07Eh,03Ch,018h,000h,000h ;   Hex #19
    Db  000h,000h,000h,000h,000h,018h,00Ch,0FEh,00Ch,018h,000h,000h,000h,000h ;   Hex #1A
    Db  000h,000h,000h,000h,000h,030h,060h,0FEh,060h,030h,000h,000h,000h,000h ;   Hex #1B
    Db  000h,000h,000h,000h,000h,000h,0C0h,0C0h,0C0h,0FEh,000h,000h,000h,000h ;   Hex #1C
    Db  000h,000h,000h,000h,000h,028h,06Ch,0FEh,06Ch,028h,000h,000h,000h,000h ;   Hex #1D
    Db  000h,000h,000h,000h,010h,038h,038h,07Ch,07Ch,0FEh,0FEh,000h,000h,000h ;   Hex #1E
    Db  000h,000h,000h,000h,0FEh,0FEh,07Ch,07Ch,038h,038h,010h,000h,000h,000h ;   Hex #1F
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #20
    Db  000h,000h,000h,018h,03Ch,03Ch,03Ch,018h,018h,000h,018h,018h,000h,000h ;   Hex #21
    Db  000h,066h,066h,066h,024h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #22
    Db  000h,000h,000h,06Ch,06Ch,0FEh,06Ch,06Ch,06Ch,0FEh,06Ch,06Ch,000h,000h ;   Hex #23
    Db  000h,018h,018h,07Ch,0C6h,0C2h,0C0h,07Ch,006h,086h,0C6h,07Ch,018h,018h ;   Hex #24
    Db  000h,000h,000h,000h,000h,0C2h,0C6h,00Ch,018h,030h,066h,0C6h,000h,000h ;   Hex #25
    Db  000h,000h,000h,038h,06Ch,06Ch,038h,076h,0DCh,0CCh,0CCh,076h,000h,000h ;   Hex #26
    Db  000h,018h,018h,018h,030h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #27
    Db  000h,000h,000h,00Ch,018h,030h,030h,030h,030h,030h,018h,00Ch,000h,000h ;   Hex #28
    Db  000h,000h,000h,030h,018h,00Ch,00Ch,00Ch,00Ch,00Ch,018h,030h,000h,000h ;   Hex #29
    Db  000h,000h,000h,000h,000h,066h,03Ch,0FFh,03Ch,066h,000h,000h,000h,000h ;   Hex #2A
    Db  000h,000h,000h,000h,000h,018h,018h,07Eh,018h,018h,000h,000h,000h,000h ;   Hex #2B
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,018h,018h,030h,000h ;   Hex #2C
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,000h,000h,000h,000h,000h,000h ;   Hex #2D
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,018h,000h,000h ;   Hex #2E
    Db  000h,000h,000h,002h,006h,00Ch,018h,030h,060h,0C0h,080h,000h,000h,000h ;   Hex #2F
    Db  000h,000h,000h,038h,06Ch,0C6h,0C6h,0D6h,0C6h,0C6h,06Ch,038h,000h,000h ;   Hex #30
    Db  000h,000h,000h,018h,038h,078h,018h,018h,018h,018h,018h,07Eh,000h,000h ;   Hex #31
    Db  000h,000h,000h,07Ch,0C6h,006h,00Ch,018h,030h,060h,0C6h,0FEh,000h,000h ;   Hex #32
    Db  000h,000h,000h,07Ch,0C6h,006h,006h,03Ch,006h,006h,0C6h,07Ch,000h,000h ;   Hex #33
    Db  000h,000h,000h,00Ch,01Ch,03Ch,06Ch,0CCh,0FEh,00Ch,00Ch,01Eh,000h,000h ;   Hex #34
    Db  000h,000h,000h,0FEh,0C0h,0C0h,0C0h,0FCh,006h,006h,0C6h,07Ch,000h,000h ;   Hex #35
    Db  000h,000h,000h,038h,060h,0C0h,0C0h,0FCh,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #36
    Db  000h,000h,000h,0FEh,0C6h,006h,00Ch,018h,030h,030h,030h,030h,000h,000h ;   Hex #37
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0C6h,07Ch,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #38
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0C6h,07Eh,006h,006h,00Ch,078h,000h,000h ;   Hex #39
    Db  000h,000h,000h,000h,018h,018h,000h,000h,000h,018h,018h,000h,000h,000h ;   Hex #3A
    Db  000h,000h,000h,000h,018h,018h,000h,000h,000h,018h,018h,030h,000h,000h ;   Hex #3B
    Db  000h,000h,000h,00Ch,018h,030h,060h,0C0h,060h,030h,018h,00Ch,000h,000h ;   Hex #3C
    Db  000h,000h,000h,000h,000h,000h,07Eh,000h,000h,07Eh,000h,000h,000h,000h ;   Hex #3D
    Db  000h,000h,000h,060h,030h,018h,00Ch,006h,00Ch,018h,030h,060h,000h,000h ;   Hex #3E
    Db  000h,000h,000h,07Ch,0C6h,0C6h,00Ch,018h,018h,000h,018h,018h,000h,000h ;   Hex #3F
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0DEh,0DEh,0DEh,0DCh,0C0h,07Ch,000h,000h ;   Hex #40
    Db  000h,000h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #41
    Db  000h,000h,000h,0FCh,066h,066h,066h,07Ch,066h,066h,066h,0FCh,000h,000h ;   Hex #42
    Db  000h,000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0C0h,0C2h,066h,03Ch,000h,000h ;   Hex #43
    Db  000h,000h,000h,0F8h,06Ch,066h,066h,066h,066h,066h,06Ch,0F8h,000h,000h ;   Hex #44
    Db  000h,000h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h ;   Hex #45
    Db  000h,000h,000h,0FEh,066h,062h,068h,078h,068h,060h,060h,0F0h,000h,000h ;   Hex #46
    Db  000h,000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0DEh,0C6h,066h,03Ah,000h,000h ;   Hex #47
    Db  000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,000h,000h ;   Hex #48
    Db  000h,000h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #49
    Db  000h,000h,000h,01Eh,00Ch,00Ch,00Ch,00Ch,00Ch,0CCh,0CCh,078h,000h,000h ;   Hex #4A
    Db  000h,000h,000h,0E6h,066h,06Ch,06Ch,078h,06Ch,06Ch,066h,0E6h,000h,000h ;   Hex #4B
    Db  000h,000h,000h,0F0h,060h,060h,060h,060h,060h,062h,066h,0FEh,000h,000h ;   Hex #4C
    Db  000h,000h,000h,0C6h,0EEh,0FEh,0D6h,0C6h,0C6h,0C6h,0C6h,0C6h,000h,000h ;   Hex #4D
    Db  000h,000h,000h,0C6h,0E6h,0F6h,0FEh,0DEh,0CEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #4E
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #4F
    Db  000h,000h,000h,0FCh,066h,066h,066h,07Ch,060h,060h,060h,0F0h,000h,000h ;   Hex #50
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0D6h,0DEh,07Ch,00Eh,000h ;   Hex #51
    Db  000h,000h,000h,0FCh,066h,066h,066h,07Ch,06Ch,066h,066h,0E6h,000h,000h ;   Hex #52
    Db  000h,000h,000h,07Ch,0C6h,0C6h,060h,038h,00Ch,0C6h,0C6h,07Ch,000h,000h ;   Hex #53
    Db  000h,000h,000h,07Eh,07Eh,05Ah,018h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #54
    Db  000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #55
    Db  000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,06Ch,038h,010h,000h,000h ;   Hex #56
    Db  000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0D6h,0D6h,0FEh,06Ch,06Ch,000h,000h ;   Hex #57
    Db  000h,000h,000h,0C6h,0C6h,0C6h,07Ch,038h,07Ch,0C6h,0C6h,0C6h,000h,000h ;   Hex #58
    Db  000h,000h,000h,066h,066h,066h,066h,03Ch,018h,018h,018h,03Ch,000h,000h ;   Hex #59
    Db  000h,000h,000h,0FEh,0C6h,08Ch,018h,030h,060h,0C2h,0C6h,0FEh,000h,000h ;   Hex #5A
    Db  000h,000h,000h,03Ch,030h,030h,030h,030h,030h,030h,030h,03Ch,000h,000h ;   Hex #5B
    Db  000h,000h,000h,080h,0C0h,0E0h,070h,038h,01Ch,00Eh,006h,002h,000h,000h ;   Hex #5C
    Db  000h,000h,000h,03Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,03Ch,000h,000h ;   Hex #5D
    Db  010h,038h,06Ch,0C6h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #5E
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,0FFh ;   Hex #5F
    Db  000h,030h,018h,00Ch,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #60
    Db  000h,000h,000h,000h,000h,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #61
    Db  000h,000h,000h,0E0h,060h,060h,078h,06Ch,066h,066h,066h,07Ch,000h,000h ;   Hex #62
    Db  000h,000h,000h,000h,000h,000h,07Ch,0C6h,0C0h,0C0h,0C6h,07Ch,000h,000h ;   Hex #63
    Db  000h,000h,000h,01Ch,00Ch,00Ch,03Ch,06Ch,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #64
    Db  000h,000h,000h,000h,000h,000h,07Ch,0C6h,0FEh,0C0h,0C6h,07Ch,000h,000h ;   Hex #65
    Db  000h,000h,000h,01Ch,036h,032h,030h,07Ch,030h,030h,030h,078h,000h,000h ;   Hex #66
    Db  000h,000h,000h,000h,000h,000h,076h,0CCh,0CCh,0CCh,07Ch,00Ch,0CCh,078h ;   Hex #67
    Db  000h,000h,000h,0E0h,060h,060h,06Ch,076h,066h,066h,066h,0E6h,000h,000h ;   Hex #68
    Db  000h,000h,000h,018h,018h,000h,038h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #69
    Db  000h,000h,000h,006h,006h,000h,00Eh,006h,006h,006h,006h,066h,066h,03Ch ;   Hex #6A
    Db  000h,000h,000h,0E0h,060h,060h,066h,06Ch,078h,06Ch,066h,0E6h,000h,000h ;   Hex #6B
    Db  000h,000h,000h,038h,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #6C
    Db  000h,000h,000h,000h,000h,000h,0ECh,0FEh,0D6h,0D6h,0D6h,0D6h,000h,000h ;   Hex #6D
    Db  000h,000h,000h,000h,000h,000h,0DCh,066h,066h,066h,066h,066h,000h,000h ;   Hex #6E
    Db  000h,000h,000h,000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #6F
    Db  000h,000h,000h,000h,000h,000h,0DCh,066h,066h,066h,07Ch,060h,060h,0F0h ;   Hex #70
    Db  000h,000h,000h,000h,000h,000h,076h,0CCh,0CCh,0CCh,07Ch,00Ch,00Ch,01Eh ;   Hex #71
    Db  000h,000h,000h,000h,000h,000h,0DCh,076h,066h,060h,060h,0F0h,000h,000h ;   Hex #72
    Db  000h,000h,000h,000h,000h,000h,07Ch,0C6h,070h,01Ch,0C6h,07Ch,000h,000h ;   Hex #73
    Db  000h,000h,000h,010h,030h,030h,0FCh,030h,030h,030h,036h,01Ch,000h,000h ;   Hex #74
    Db  000h,000h,000h,000h,000h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #75
    Db  000h,000h,000h,000h,000h,000h,0C6h,0C6h,0C6h,06Ch,038h,010h,000h,000h ;   Hex #76
    Db  000h,000h,000h,000h,000h,000h,0C6h,0C6h,0D6h,0D6h,0FEh,06Ch,000h,000h ;   Hex #77
    Db  000h,000h,000h,000h,000h,000h,0C6h,06Ch,038h,038h,06Ch,0C6h,000h,000h ;   Hex #78
    Db  000h,000h,000h,000h,000h,000h,0C6h,0C6h,0C6h,0C6h,07Eh,006h,00Ch,078h ;   Hex #79
    Db  000h,000h,000h,000h,000h,000h,0FEh,0CCh,018h,030h,066h,0FEh,000h,000h ;   Hex #7A
    Db  000h,000h,000h,00Eh,018h,018h,018h,070h,018h,018h,018h,00Eh,000h,000h ;   Hex #7B
    Db  000h,000h,000h,018h,018h,018h,018h,018h,018h,018h,018h,018h,000h,000h ;   Hex #7C
    Db  000h,000h,000h,070h,018h,018h,018h,00Eh,018h,018h,018h,070h,000h,000h ;   Hex #7D
    Db  000h,076h,0DCh,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #7E
    Db  000h,000h,000h,000h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,000h,000h,000h ;   Hex #7F
    Db  000h,000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0C0h,0C2h,066h,03Ch,00Ch,078h ;   Hex #80
    Db  000h,000h,000h,0CCh,000h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #81
    Db  000h,000h,00Ch,018h,030h,000h,07Ch,0C6h,0FEh,0C0h,0C6h,07Ch,000h,000h ;   Hex #82
    Db  000h,000h,010h,038h,06Ch,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #83
    Db  000h,000h,000h,076h,0DCh,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #84
    Db  000h,000h,060h,030h,018h,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #85
    Db  030h,060h,0C0h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #86
    Db  000h,000h,000h,000h,000h,000h,07Ch,0C6h,0C0h,0C0h,0C6h,07Ch,00Ch,078h ;   Hex #87
    Db  000h,000h,010h,038h,06Ch,000h,07Ch,0C6h,0FEh,0C0h,0C6h,07Ch,000h,000h ;   Hex #88
    Db  038h,06Ch,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h ;   Hex #89
    Db  000h,000h,060h,030h,018h,000h,07Ch,0C6h,0FEh,0C0h,0C6h,07Ch,000h,000h ;   Hex #8A
    Db  00Ch,018h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #8B
    Db  038h,06Ch,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #8C
    Db  000h,000h,060h,030h,018h,000h,038h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #8D
    Db  076h,0DCh,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #8E
    Db  038h,06Ch,0C6h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #8F
    Db  00Ch,018h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h ;   Hex #90
    Db  018h,00Ch,006h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #91
    Db  030h,018h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h ;   Hex #92
    Db  000h,000h,010h,038h,06Ch,000h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #93
    Db  000h,000h,000h,076h,0DCh,000h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #94
    Db  000h,000h,060h,030h,018h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #95
    Db  018h,030h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #96
    Db  000h,000h,060h,030h,018h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #97
    Db  030h,018h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #98
    Db  076h,0DCh,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #99
    Db  000h,0C6h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #9A
    Db  000h,000h,018h,018h,07Ch,0C6h,0C0h,0C0h,0C6h,07Ch,018h,018h,000h,000h ;   Hex #9B
    Db  000h,000h,038h,06Ch,064h,060h,0F0h,060h,060h,060h,0E6h,0FCh,000h,000h ;   Hex #9C
    Db  030h,018h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #9D
    Db  000h,000h,0FCh,066h,066h,07Ch,062h,066h,06Fh,066h,066h,0F3h,000h,000h ;   Hex #9E
    Db  00Ch,018h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #9F
    Db  000h,000h,00Ch,018h,030h,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #A0
    Db  000h,000h,00Ch,018h,030h,000h,038h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #A1
    Db  000h,000h,00Ch,018h,030h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #A2
    Db  000h,000h,00Ch,018h,030h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #A3
    Db  000h,000h,000h,076h,0DCh,000h,0DCh,066h,066h,066h,066h,066h,000h,000h ;   Hex #A4
    Db  076h,0DCh,000h,0C6h,0E6h,0F6h,0FEh,0DEh,0CEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #A5
    Db  000h,000h,03Ch,06Ch,06Ch,03Eh,000h,07Eh,000h,000h,000h,000h,000h,000h ;   Hex #A6
    Db  000h,000h,038h,06Ch,06Ch,038h,000h,07Ch,000h,000h,000h,000h,000h,000h ;   Hex #A7
    Db  000h,000h,000h,030h,030h,000h,030h,030h,060h,0C6h,0C6h,07Ch,000h,000h ;   Hex #A8
    Db  030h,018h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #A9
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,006h,006h,006h,000h,000h,000h ;   Hex #AA
    Db  000h,000h,060h,0E0h,063h,066h,06Ch,018h,030h,06Eh,0C3h,006h,00Ch,01Fh ;   Hex #AB
    Db  000h,000h,060h,0E0h,063h,066h,06Ch,01Ah,036h,06Eh,0DAh,03Fh,006h,006h ;   Hex #AC
    Db  000h,000h,000h,018h,018h,000h,018h,018h,03Ch,03Ch,03Ch,018h,000h,000h ;   Hex #AD
    Db  000h,000h,000h,000h,000h,036h,06Ch,0D8h,06Ch,036h,000h,000h,000h,000h ;   Hex #AE
    Db  000h,000h,000h,000h,000h,0D8h,06Ch,036h,06Ch,0D8h,000h,000h,000h,000h ;   Hex #AF
    Db  011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h ;   Hex #B0
    Db  055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh ;   Hex #B1
    Db  0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h ;   Hex #B2
    Db  018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B3
    Db  018h,018h,018h,018h,018h,018h,018h,0F8h,018h,018h,018h,018h,018h,018h ;   Hex #B4
    Db  018h,018h,018h,018h,018h,0F8h,018h,0F8h,018h,018h,018h,018h,018h,018h ;   Hex #B5
    Db  036h,036h,036h,036h,036h,036h,036h,0F6h,036h,036h,036h,036h,036h,036h ;   Hex #B6
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,036h,036h,036h,036h,036h,036h ;   Hex #B7
    Db  000h,000h,000h,000h,000h,0F8h,018h,0F8h,018h,018h,018h,018h,018h,018h ;   Hex #B8
    Db  036h,036h,036h,036h,036h,0F6h,006h,0F6h,036h,036h,036h,036h,036h,036h ;   Hex #B9
    Db  036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #BA
    Db  000h,000h,000h,000h,000h,0FEh,006h,0F6h,036h,036h,036h,036h,036h,036h ;   Hex #BB
    Db  036h,036h,036h,036h,036h,0F6h,006h,0FEh,000h,000h,000h,000h,000h,000h ;   Hex #BC
    Db  036h,036h,036h,036h,036h,036h,036h,0FEh,000h,000h,000h,000h,000h,000h ;   Hex #BD
    Db  018h,018h,018h,018h,018h,0F8h,018h,0F8h,000h,000h,000h,000h,000h,000h ;   Hex #BE
    Db  000h,000h,000h,000h,000h,000h,000h,0F8h,018h,018h,018h,018h,018h,018h ;   Hex #BF
    Db  018h,018h,018h,018h,018h,018h,018h,01Fh,000h,000h,000h,000h,000h,000h ;   Hex #C0
    Db  018h,018h,018h,018h,018h,018h,018h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #C1
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,018h,018h,018h,018h,018h,018h ;   Hex #C2
    Db  018h,018h,018h,018h,018h,018h,018h,01Fh,018h,018h,018h,018h,018h,018h ;   Hex #C3
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #C4
    Db  018h,018h,018h,018h,018h,018h,018h,0FFh,018h,018h,018h,018h,018h,018h ;   Hex #C5
    Db  018h,018h,018h,018h,018h,01Fh,018h,01Fh,018h,018h,018h,018h,018h,018h ;   Hex #C6
    Db  036h,036h,036h,036h,036h,036h,036h,037h,036h,036h,036h,036h,036h,036h ;   Hex #C7
    Db  036h,036h,036h,036h,036h,037h,030h,03Fh,000h,000h,000h,000h,000h,000h ;   Hex #C8
    Db  000h,000h,000h,000h,000h,03Fh,030h,037h,036h,036h,036h,036h,036h,036h ;   Hex #C9
    Db  036h,036h,036h,036h,036h,0F7h,000h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #CA
    Db  000h,000h,000h,000h,000h,0FFh,000h,0F7h,036h,036h,036h,036h,036h,036h ;   Hex #CB
    Db  036h,036h,036h,036h,036h,037h,030h,037h,036h,036h,036h,036h,036h,036h ;   Hex #CC
    Db  000h,000h,000h,000h,000h,0FFh,000h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #CD
    Db  036h,036h,036h,036h,036h,0F7h,000h,0F7h,036h,036h,036h,036h,036h,036h ;   Hex #CE
    Db  018h,018h,018h,018h,018h,0FFh,000h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #CF
    Db  036h,036h,036h,036h,036h,036h,036h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #D0
    Db  000h,000h,000h,000h,000h,0FFh,000h,0FFh,018h,018h,018h,018h,018h,018h ;   Hex #D1
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,036h,036h,036h,036h,036h,036h ;   Hex #D2
    Db  036h,036h,036h,036h,036h,036h,036h,03Fh,000h,000h,000h,000h,000h,000h ;   Hex #D3
    Db  018h,018h,018h,018h,018h,01Fh,018h,01Fh,000h,000h,000h,000h,000h,000h ;   Hex #D4
    Db  000h,000h,000h,000h,000h,01Fh,018h,01Fh,018h,018h,018h,018h,018h,018h ;   Hex #D5
    Db  000h,000h,000h,000h,000h,000h,000h,03Fh,036h,036h,036h,036h,036h,036h ;   Hex #D6
    Db  036h,036h,036h,036h,036h,036h,036h,0FFh,036h,036h,036h,036h,036h,036h ;   Hex #D7
    Db  018h,018h,018h,018h,018h,0FFh,018h,0FFh,018h,018h,018h,018h,018h,018h ;   Hex #D8
    Db  018h,018h,018h,018h,018h,018h,018h,0F8h,000h,000h,000h,000h,000h,000h ;   Hex #D9
    Db  000h,000h,000h,000h,000h,000h,000h,01Fh,018h,018h,018h,018h,018h,018h ;   Hex #DA
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DB
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DC
    Db  0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h ;   Hex #DD
    Db  00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh ;   Hex #DE
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,000h,000h,000h,000h,000h,000h,000h ;   Hex #DF
    Db  000h,000h,000h,000h,000h,000h,076h,0DCh,0D8h,0D8h,0DCh,076h,000h,000h ;   Hex #E0
    Db  000h,000h,000h,078h,0CCh,0CCh,0CCh,0D8h,0CCh,0C6h,0C6h,0CCh,000h,000h ;   Hex #E1
    Db  000h,000h,000h,0FEh,0C6h,0C6h,0C0h,0C0h,0C0h,0C0h,0C0h,0C0h,000h,000h ;   Hex #E2
    Db  000h,000h,000h,000h,000h,000h,0FEh,06Ch,06Ch,06Ch,06Ch,06Ch,000h,000h ;   Hex #E3
    Db  000h,000h,000h,0FEh,0C6h,060h,030h,018h,030h,060h,0C6h,0FEh,000h,000h ;   Hex #E4
    Db  000h,000h,000h,000h,000h,000h,07Eh,0D8h,0D8h,0D8h,0D8h,070h,000h,000h ;   Hex #E5
    Db  000h,000h,000h,000h,000h,000h,066h,066h,066h,066h,066h,07Ch,060h,0C0h ;   Hex #E6
    Db  000h,000h,000h,000h,000h,076h,0DCh,018h,018h,018h,018h,018h,000h,000h ;   Hex #E7
    Db  000h,000h,000h,07Eh,018h,03Ch,066h,066h,066h,03Ch,018h,07Eh,000h,000h ;   Hex #E8
    Db  000h,000h,000h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,06Ch,038h,000h,000h ;   Hex #E9
    Db  000h,000h,000h,038h,06Ch,0C6h,0C6h,0C6h,06Ch,06Ch,06Ch,0EEh,000h,000h ;   Hex #EA
    Db  000h,000h,000h,01Eh,030h,018h,00Ch,03Eh,066h,066h,066h,03Ch,000h,000h ;   Hex #EB
    Db  000h,000h,000h,000h,000h,000h,07Eh,0DBh,0DBh,07Eh,000h,000h,000h,000h ;   Hex #EC
    Db  000h,000h,000h,003h,006h,07Eh,0DBh,0DBh,0F3h,07Eh,060h,0C0h,000h,000h ;   Hex #ED
    Db  000h,000h,000h,01Eh,030h,060h,060h,07Eh,060h,060h,030h,01Eh,000h,000h ;   Hex #EE
    Db  000h,000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,000h,000h ;   Hex #EF
    Db  000h,000h,000h,000h,0FEh,000h,000h,0FEh,000h,000h,0FEh,000h,000h,000h ;   Hex #F0
    Db  000h,000h,000h,000h,018h,018h,07Eh,018h,018h,000h,000h,07Eh,000h,000h ;   Hex #F1
    Db  000h,000h,000h,030h,018h,00Ch,006h,00Ch,018h,030h,000h,07Eh,000h,000h ;   Hex #F2
    Db  000h,000h,000h,00Ch,018h,030h,060h,030h,018h,00Ch,000h,07Eh,000h,000h ;   Hex #F3
    Db  000h,000h,00Eh,01Bh,01Bh,018h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #F4
    Db  018h,018h,018h,018h,018h,018h,018h,018h,0D8h,0D8h,070h,000h,000h,000h ;   Hex #F5
    Db  000h,000h,000h,000h,000h,018h,000h,07Eh,000h,018h,000h,000h,000h,000h ;   Hex #F6
    Db  000h,000h,000h,000h,000h,076h,0DCh,000h,076h,0DCh,000h,000h,000h,000h ;   Hex #F7
    Db  000h,038h,06Ch,06Ch,038h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #F8
    Db  000h,000h,000h,000h,000h,000h,000h,018h,018h,000h,000h,000h,000h,000h ;   Hex #F9
    Db  000h,000h,000h,000h,000h,000h,000h,018h,000h,000h,000h,000h,000h,000h ;   Hex #FA
    Db  000h,00Fh,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,0ECh,06Ch,03Ch,01Ch,000h,000h ;   Hex #FB
    Db  000h,06Ch,036h,036h,036h,036h,036h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FC
    Db  000h,03Ch,066h,00Ch,018h,032h,07Eh,000h,000h,000h,000h,000h,000h,000h ;   Hex #FD
    Db  000h,000h,000h,000h,000h,07Eh,07Eh,07Eh,07Eh,07Eh,07Eh,000h,000h,000h ;   Hex #FE
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FF


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\ega\863-8x14.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
;***************************************************
;  CHARACTER FONT FILE
;  Source Assembler File
;
;        CODE PAGE: 863 
;  FONT RESOLUTION: 8 x 14 
;
;     DATE CREATED:05-28-1987
;
;
; Output file from: MULTIFON, Version 1A
;
;***************************************************
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #0
    Db  000h,000h,000h,07Eh,081h,0A5h,081h,081h,0BDh,099h,081h,07Eh,000h,000h ;   Hex #1
    Db  000h,000h,000h,07Eh,0FFh,0DBh,0FFh,0FFh,0C3h,0E7h,0FFh,07Eh,000h,000h ;   Hex #2
    Db  000h,000h,000h,000h,06Ch,0FEh,0FEh,0FEh,0FEh,07Ch,038h,010h,000h,000h ;   Hex #3
    Db  000h,000h,000h,000h,010h,038h,07Ch,0FEh,07Ch,038h,010h,000h,000h,000h ;   Hex #4
    Db  000h,000h,000h,018h,03Ch,03Ch,0E7h,0E7h,0E7h,018h,018h,03Ch,000h,000h ;   Hex #5
    Db  000h,000h,000h,018h,03Ch,07Eh,0FFh,0FFh,07Eh,018h,018h,03Ch,000h,000h ;   Hex #6
    Db  000h,000h,000h,000h,000h,000h,018h,03Ch,03Ch,018h,000h,000h,000h,000h ;   Hex #7
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0E7h,0C3h,0C3h,0E7h,0FFh,0FFh,0FFh,0FFh ;   Hex #8
    Db  000h,000h,000h,000h,000h,03Ch,066h,042h,042h,066h,03Ch,000h,000h,000h ;   Hex #9
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0C3h,099h,0BDh,0BDh,099h,0C3h,0FFh,0FFh,0FFh ;   Hex #A
    Db  000h,000h,000h,01Eh,00Eh,01Ah,032h,078h,0CCh,0CCh,0CCh,078h,000h,000h ;   Hex #B
    Db  000h,000h,000h,03Ch,066h,066h,066h,03Ch,018h,07Eh,018h,018h,000h,000h ;   Hex #C
    Db  000h,000h,000h,03Fh,033h,03Fh,030h,030h,030h,070h,0F0h,0E0h,000h,000h ;   Hex #D
    Db  000h,000h,000h,07Fh,063h,07Fh,063h,063h,063h,067h,0E7h,0E6h,0C0h,000h ;   Hex #E
    Db  000h,000h,000h,018h,018h,0DBh,03Ch,0E7h,03Ch,0DBh,018h,018h,000h,000h ;   Hex #F
    Db  000h,000h,000h,080h,0C0h,0E0h,0F8h,0FEh,0F8h,0E0h,0C0h,080h,000h,000h ;   Hex #10
    Db  000h,000h,000h,002h,006h,00Eh,03Eh,0FEh,03Eh,00Eh,006h,002h,000h,000h ;   Hex #11
    Db  000h,000h,000h,018h,03Ch,07Eh,018h,018h,018h,07Eh,03Ch,018h,000h,000h ;   Hex #12
    Db  000h,000h,000h,066h,066h,066h,066h,066h,066h,000h,066h,066h,000h,000h ;   Hex #13
    Db  000h,000h,000h,07Fh,0DBh,0DBh,0DBh,07Bh,01Bh,01Bh,01Bh,01Bh,000h,000h ;   Hex #14
    Db  000h,000h,07Ch,0C6h,060h,038h,06Ch,0C6h,0C6h,06Ch,038h,00Ch,0C6h,07Ch ;   Hex #15
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,0FEh,0FEh,0FEh,000h,000h ;   Hex #16
    Db  000h,000h,000h,018h,03Ch,07Eh,018h,018h,018h,07Eh,03Ch,018h,07Eh,000h ;   Hex #17
    Db  000h,000h,000h,018h,03Ch,07Eh,018h,018h,018h,018h,018h,018h,000h,000h ;   Hex #18
    Db  000h,000h,000h,018h,018h,018h,018h,018h,018h,07Eh,03Ch,018h,000h,000h ;   Hex #19
    Db  000h,000h,000h,000h,000h,018h,00Ch,0FEh,00Ch,018h,000h,000h,000h,000h ;   Hex #1A
    Db  000h,000h,000h,000h,000h,030h,060h,0FEh,060h,030h,000h,000h,000h,000h ;   Hex #1B
    Db  000h,000h,000h,000h,000h,000h,0C0h,0C0h,0C0h,0FEh,000h,000h,000h,000h ;   Hex #1C
    Db  000h,000h,000h,000h,000h,028h,06Ch,0FEh,06Ch,028h,000h,000h,000h,000h ;   Hex #1D
    Db  000h,000h,000h,000h,010h,038h,038h,07Ch,07Ch,0FEh,0FEh,000h,000h,000h ;   Hex #1E
    Db  000h,000h,000h,000h,0FEh,0FEh,07Ch,07Ch,038h,038h,010h,000h,000h,000h ;   Hex #1F
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #20
    Db  000h,000h,000h,018h,03Ch,03Ch,03Ch,018h,018h,000h,018h,018h,000h,000h ;   Hex #21
    Db  000h,066h,066h,066h,024h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #22
    Db  000h,000h,000h,06Ch,06Ch,0FEh,06Ch,06Ch,06Ch,0FEh,06Ch,06Ch,000h,000h ;   Hex #23
    Db  000h,018h,018h,07Ch,0C6h,0C2h,0C0h,07Ch,006h,086h,0C6h,07Ch,018h,018h ;   Hex #24
    Db  000h,000h,000h,000h,000h,0C2h,0C6h,00Ch,018h,030h,066h,0C6h,000h,000h ;   Hex #25
    Db  000h,000h,000h,038h,06Ch,06Ch,038h,076h,0DCh,0CCh,0CCh,076h,000h,000h ;   Hex #26
    Db  000h,018h,018h,018h,030h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #27
    Db  000h,000h,000h,00Ch,018h,030h,030h,030h,030h,030h,018h,00Ch,000h,000h ;   Hex #28
    Db  000h,000h,000h,030h,018h,00Ch,00Ch,00Ch,00Ch,00Ch,018h,030h,000h,000h ;   Hex #29
    Db  000h,000h,000h,000h,000h,066h,03Ch,0FFh,03Ch,066h,000h,000h,000h,000h ;   Hex #2A
    Db  000h,000h,000h,000h,000h,018h,018h,07Eh,018h,018h,000h,000h,000h,000h ;   Hex #2B
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,018h,018h,030h,000h ;   Hex #2C
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,000h,000h,000h,000h,000h,000h ;   Hex #2D
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,018h,000h,000h ;   Hex #2E
    Db  000h,000h,000h,002h,006h,00Ch,018h,030h,060h,0C0h,080h,000h,000h,000h ;   Hex #2F
    Db  000h,000h,000h,038h,06Ch,0C6h,0C6h,0D6h,0C6h,0C6h,06Ch,038h,000h,000h ;   Hex #30
    Db  000h,000h,000h,018h,038h,078h,018h,018h,018h,018h,018h,07Eh,000h,000h ;   Hex #31
    Db  000h,000h,000h,07Ch,0C6h,006h,00Ch,018h,030h,060h,0C6h,0FEh,000h,000h ;   Hex #32
    Db  000h,000h,000h,07Ch,0C6h,006h,006h,03Ch,006h,006h,0C6h,07Ch,000h,000h ;   Hex #33
    Db  000h,000h,000h,00Ch,01Ch,03Ch,06Ch,0CCh,0FEh,00Ch,00Ch,01Eh,000h,000h ;   Hex #34
    Db  000h,000h,000h,0FEh,0C0h,0C0h,0C0h,0FCh,006h,006h,0C6h,07Ch,000h,000h ;   Hex #35
    Db  000h,000h,000h,038h,060h,0C0h,0C0h,0FCh,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #36
    Db  000h,000h,000h,0FEh,0C6h,006h,00Ch,018h,030h,030h,030h,030h,000h,000h ;   Hex #37
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0C6h,07Ch,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #38
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0C6h,07Eh,006h,006h,00Ch,078h,000h,000h ;   Hex #39
    Db  000h,000h,000h,000h,018h,018h,000h,000h,000h,018h,018h,000h,000h,000h ;   Hex #3A
    Db  000h,000h,000h,000h,018h,018h,000h,000h,000h,018h,018h,030h,000h,000h ;   Hex #3B
    Db  000h,000h,000h,00Ch,018h,030h,060h,0C0h,060h,030h,018h,00Ch,000h,000h ;   Hex #3C
    Db  000h,000h,000h,000h,000h,000h,07Eh,000h,000h,07Eh,000h,000h,000h,000h ;   Hex #3D
    Db  000h,000h,000h,060h,030h,018h,00Ch,006h,00Ch,018h,030h,060h,000h,000h ;   Hex #3E
    Db  000h,000h,000h,07Ch,0C6h,0C6h,00Ch,018h,018h,000h,018h,018h,000h,000h ;   Hex #3F
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0DEh,0DEh,0DEh,0DCh,0C0h,07Ch,000h,000h ;   Hex #40
    Db  000h,000h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #41
    Db  000h,000h,000h,0FCh,066h,066h,066h,07Ch,066h,066h,066h,0FCh,000h,000h ;   Hex #42
    Db  000h,000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0C0h,0C2h,066h,03Ch,000h,000h ;   Hex #43
    Db  000h,000h,000h,0F8h,06Ch,066h,066h,066h,066h,066h,06Ch,0F8h,000h,000h ;   Hex #44
    Db  000h,000h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h ;   Hex #45
    Db  000h,000h,000h,0FEh,066h,062h,068h,078h,068h,060h,060h,0F0h,000h,000h ;   Hex #46
    Db  000h,000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0DEh,0C6h,066h,03Ah,000h,000h ;   Hex #47
    Db  000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,000h,000h ;   Hex #48
    Db  000h,000h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #49
    Db  000h,000h,000h,01Eh,00Ch,00Ch,00Ch,00Ch,00Ch,0CCh,0CCh,078h,000h,000h ;   Hex #4A
    Db  000h,000h,000h,0E6h,066h,06Ch,06Ch,078h,06Ch,06Ch,066h,0E6h,000h,000h ;   Hex #4B
    Db  000h,000h,000h,0F0h,060h,060h,060h,060h,060h,062h,066h,0FEh,000h,000h ;   Hex #4C
    Db  000h,000h,000h,0C6h,0EEh,0FEh,0D6h,0C6h,0C6h,0C6h,0C6h,0C6h,000h,000h ;   Hex #4D
    Db  000h,000h,000h,0C6h,0E6h,0F6h,0FEh,0DEh,0CEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #4E
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #4F
    Db  000h,000h,000h,0FCh,066h,066h,066h,07Ch,060h,060h,060h,0F0h,000h,000h ;   Hex #50
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0D6h,0DEh,07Ch,00Eh,000h ;   Hex #51
    Db  000h,000h,000h,0FCh,066h,066h,066h,07Ch,06Ch,066h,066h,0E6h,000h,000h ;   Hex #52
    Db  000h,000h,000h,07Ch,0C6h,0C6h,060h,038h,00Ch,0C6h,0C6h,07Ch,000h,000h ;   Hex #53
    Db  000h,000h,000h,07Eh,07Eh,05Ah,018h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #54
    Db  000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #55
    Db  000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,06Ch,038h,010h,000h,000h ;   Hex #56
    Db  000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0D6h,0D6h,0FEh,06Ch,06Ch,000h,000h ;   Hex #57
    Db  000h,000h,000h,0C6h,0C6h,0C6h,07Ch,038h,07Ch,0C6h,0C6h,0C6h,000h,000h ;   Hex #58
    Db  000h,000h,000h,066h,066h,066h,066h,03Ch,018h,018h,018h,03Ch,000h,000h ;   Hex #59
    Db  000h,000h,000h,0FEh,0C6h,08Ch,018h,030h,060h,0C2h,0C6h,0FEh,000h,000h ;   Hex #5A
    Db  000h,000h,000h,03Ch,030h,030h,030h,030h,030h,030h,030h,03Ch,000h,000h ;   Hex #5B
    Db  000h,000h,000h,080h,0C0h,0E0h,070h,038h,01Ch,00Eh,006h,002h,000h,000h ;   Hex #5C
    Db  000h,000h,000h,03Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,03Ch,000h,000h ;   Hex #5D
    Db  010h,038h,06Ch,0C6h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #5E
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,0FFh ;   Hex #5F
    Db  000h,030h,018h,00Ch,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #60
    Db  000h,000h,000h,000h,000h,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #61
    Db  000h,000h,000h,0E0h,060h,060h,078h,06Ch,066h,066h,066h,07Ch,000h,000h ;   Hex #62
    Db  000h,000h,000h,000h,000h,000h,07Ch,0C6h,0C0h,0C0h,0C6h,07Ch,000h,000h ;   Hex #63
    Db  000h,000h,000h,01Ch,00Ch,00Ch,03Ch,06Ch,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #64
    Db  000h,000h,000h,000h,000h,000h,07Ch,0C6h,0FEh,0C0h,0C6h,07Ch,000h,000h ;   Hex #65
    Db  000h,000h,000h,01Ch,036h,032h,030h,07Ch,030h,030h,030h,078h,000h,000h ;   Hex #66
    Db  000h,000h,000h,000h,000h,000h,076h,0CCh,0CCh,0CCh,07Ch,00Ch,0CCh,078h ;   Hex #67
    Db  000h,000h,000h,0E0h,060h,060h,06Ch,076h,066h,066h,066h,0E6h,000h,000h ;   Hex #68
    Db  000h,000h,000h,018h,018h,000h,038h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #69
    Db  000h,000h,000h,006h,006h,000h,00Eh,006h,006h,006h,006h,066h,066h,03Ch ;   Hex #6A
    Db  000h,000h,000h,0E0h,060h,060h,066h,06Ch,078h,06Ch,066h,0E6h,000h,000h ;   Hex #6B
    Db  000h,000h,000h,038h,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #6C
    Db  000h,000h,000h,000h,000h,000h,0ECh,0FEh,0D6h,0D6h,0D6h,0D6h,000h,000h ;   Hex #6D
    Db  000h,000h,000h,000h,000h,000h,0DCh,066h,066h,066h,066h,066h,000h,000h ;   Hex #6E
    Db  000h,000h,000h,000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #6F
    Db  000h,000h,000h,000h,000h,000h,0DCh,066h,066h,066h,07Ch,060h,060h,0F0h ;   Hex #70
    Db  000h,000h,000h,000h,000h,000h,076h,0CCh,0CCh,0CCh,07Ch,00Ch,00Ch,01Eh ;   Hex #71
    Db  000h,000h,000h,000h,000h,000h,0DCh,076h,066h,060h,060h,0F0h,000h,000h ;   Hex #72
    Db  000h,000h,000h,000h,000h,000h,07Ch,0C6h,070h,01Ch,0C6h,07Ch,000h,000h ;   Hex #73
    Db  000h,000h,000h,010h,030h,030h,0FCh,030h,030h,030h,036h,01Ch,000h,000h ;   Hex #74
    Db  000h,000h,000h,000h,000h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #75
    Db  000h,000h,000h,000h,000h,000h,0C6h,0C6h,0C6h,06Ch,038h,010h,000h,000h ;   Hex #76
    Db  000h,000h,000h,000h,000h,000h,0C6h,0C6h,0D6h,0D6h,0FEh,06Ch,000h,000h ;   Hex #77
    Db  000h,000h,000h,000h,000h,000h,0C6h,06Ch,038h,038h,06Ch,0C6h,000h,000h ;   Hex #78
    Db  000h,000h,000h,000h,000h,000h,0C6h,0C6h,0C6h,0C6h,07Eh,006h,00Ch,078h ;   Hex #79
    Db  000h,000h,000h,000h,000h,000h,0FEh,0CCh,018h,030h,066h,0FEh,000h,000h ;   Hex #7A
    Db  000h,000h,000h,00Eh,018h,018h,018h,070h,018h,018h,018h,00Eh,000h,000h ;   Hex #7B
    Db  000h,000h,000h,018h,018h,018h,018h,018h,018h,018h,018h,018h,000h,000h ;   Hex #7C
    Db  000h,000h,000h,070h,018h,018h,018h,00Eh,018h,018h,018h,070h,000h,000h ;   Hex #7D
    Db  000h,076h,0DCh,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #7E
    Db  000h,000h,000h,000h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,000h,000h,000h ;   Hex #7F
    Db  000h,000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0C0h,0C2h,066h,03Ch,00Ch,078h ;   Hex #80
    Db  000h,000h,000h,0CCh,000h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #81
    Db  000h,000h,00Ch,018h,030h,000h,07Ch,0C6h,0FEh,0C0h,0C6h,07Ch,000h,000h ;   Hex #82
    Db  000h,000h,010h,038h,06Ch,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #83
    Db  038h,06Ch,0C6h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #84
    Db  000h,000h,060h,030h,018h,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #85
    Db  000h,000h,000h,07Fh,0DBh,0DBh,0DBh,07Bh,01Bh,01Bh,01Bh,01Bh,000h,000h ;   Hex #86
    Db  000h,000h,000h,000h,000h,000h,07Ch,0C6h,0C0h,0C0h,0C6h,07Ch,00Ch,078h ;   Hex #87
    Db  000h,000h,010h,038h,06Ch,000h,07Ch,0C6h,0FEh,0C0h,0C6h,07Ch,000h,000h ;   Hex #88
    Db  000h,000h,000h,0C6h,000h,000h,07Ch,0C6h,0FEh,0C0h,0C6h,07Ch,000h,000h ;   Hex #89
    Db  000h,000h,060h,030h,018h,000h,07Ch,0C6h,0FEh,0C0h,0C6h,07Ch,000h,000h ;   Hex #8A
    Db  000h,000h,000h,066h,000h,000h,038h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #8B
    Db  000h,000h,018h,03Ch,066h,000h,038h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #8C
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,0FFh,000h,0FFh ;   Hex #8D
    Db  018h,00Ch,006h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #8E
    Db  000h,07Ch,0C6h,060h,038h,06Ch,0C6h,0C6h,06Ch,038h,00Ch,0C6h,07Ch,000h ;   Hex #8F
    Db  00Ch,018h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h ;   Hex #90
    Db  030h,018h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h ;   Hex #91
    Db  038h,06Ch,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h ;   Hex #92
    Db  000h,000h,010h,038h,06Ch,000h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #93
    Db  000h,0C6h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h ;   Hex #94
    Db  000h,066h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #95
    Db  000h,000h,030h,078h,0CCh,000h,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #96
    Db  000h,000h,060h,030h,018h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #97
    Db  000h,000h,000h,000h,000h,0C6h,07Ch,0C6h,0C6h,0C6h,07Ch,0C6h,000h,000h ;   Hex #98
    Db  038h,06Ch,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #99
    Db  000h,0C6h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #9A
    Db  000h,000h,018h,018h,07Ch,0C6h,0C0h,0C0h,0C6h,07Ch,018h,018h,000h,000h ;   Hex #9B
    Db  000h,000h,038h,06Ch,064h,060h,0F0h,060h,060h,060h,0E6h,0FCh,000h,000h ;   Hex #9C
    Db  030h,018h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #9D
    Db  038h,06Ch,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #9E
    Db  000h,000h,00Eh,01Bh,018h,018h,018h,07Eh,018h,018h,018h,0D8h,070h,000h ;   Hex #9F
    Db  000h,000h,018h,018h,018h,018h,000h,000h,000h,018h,018h,018h,018h,000h ;   Hex #A0
    Db  000h,00Ch,018h,030h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #A1
    Db  000h,000h,00Ch,018h,030h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #A2
    Db  000h,000h,00Ch,018h,030h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #A3
    Db  000h,0C6h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #A4
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,00Ch,078h ;   Hex #A5
    Db  000h,078h,00Ch,038h,00Ch,00Ch,078h,000h,000h,000h,000h,000h,000h,000h ;   Hex #A6
    Db  000h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #A7
    Db  03Ch,066h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #A8
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,0C0h,0C0h,0C0h,000h,000h,000h ;   Hex #A9
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,006h,006h,006h,000h,000h,000h ;   Hex #AA
    Db  000h,000h,060h,0E0h,063h,066h,06Ch,018h,030h,06Eh,0C3h,006h,00Ch,01Fh ;   Hex #AB
    Db  000h,000h,060h,0E0h,063h,066h,06Ch,01Ah,036h,06Eh,0DAh,03Fh,006h,006h ;   Hex #AC
    Db  000h,0E0h,030h,0E3h,036h,0ECh,018h,036h,06Eh,0DAh,03Fh,006h,006h,000h ;   Hex #AD
    Db  000h,000h,000h,000h,000h,036h,06Ch,0D8h,06Ch,036h,000h,000h,000h,000h ;   Hex #AE
    Db  000h,000h,000h,000h,000h,0D8h,06Ch,036h,06Ch,0D8h,000h,000h,000h,000h ;   Hex #AF
    Db  011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h ;   Hex #B0
    Db  055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh ;   Hex #B1
    Db  0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h ;   Hex #B2
    Db  018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B3
    Db  018h,018h,018h,018h,018h,018h,018h,0F8h,018h,018h,018h,018h,018h,018h ;   Hex #B4
    Db  018h,018h,018h,018h,018h,0F8h,018h,0F8h,018h,018h,018h,018h,018h,018h ;   Hex #B5
    Db  036h,036h,036h,036h,036h,036h,036h,0F6h,036h,036h,036h,036h,036h,036h ;   Hex #B6
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,036h,036h,036h,036h,036h,036h ;   Hex #B7
    Db  000h,000h,000h,000h,000h,0F8h,018h,0F8h,018h,018h,018h,018h,018h,018h ;   Hex #B8
    Db  036h,036h,036h,036h,036h,0F6h,006h,0F6h,036h,036h,036h,036h,036h,036h ;   Hex #B9
    Db  036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #BA
    Db  000h,000h,000h,000h,000h,0FEh,006h,0F6h,036h,036h,036h,036h,036h,036h ;   Hex #BB
    Db  036h,036h,036h,036h,036h,0F6h,006h,0FEh,000h,000h,000h,000h,000h,000h ;   Hex #BC
    Db  036h,036h,036h,036h,036h,036h,036h,0FEh,000h,000h,000h,000h,000h,000h ;   Hex #BD
    Db  018h,018h,018h,018h,018h,0F8h,018h,0F8h,000h,000h,000h,000h,000h,000h ;   Hex #BE
    Db  000h,000h,000h,000h,000h,000h,000h,0F8h,018h,018h,018h,018h,018h,018h ;   Hex #BF
    Db  018h,018h,018h,018h,018h,018h,018h,01Fh,000h,000h,000h,000h,000h,000h ;   Hex #C0
    Db  018h,018h,018h,018h,018h,018h,018h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #C1
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,018h,018h,018h,018h,018h,018h ;   Hex #C2
    Db  018h,018h,018h,018h,018h,018h,018h,01Fh,018h,018h,018h,018h,018h,018h ;   Hex #C3
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #C4
    Db  018h,018h,018h,018h,018h,018h,018h,0FFh,018h,018h,018h,018h,018h,018h ;   Hex #C5
    Db  018h,018h,018h,018h,018h,01Fh,018h,01Fh,018h,018h,018h,018h,018h,018h ;   Hex #C6
    Db  036h,036h,036h,036h,036h,036h,036h,037h,036h,036h,036h,036h,036h,036h ;   Hex #C7
    Db  036h,036h,036h,036h,036h,037h,030h,03Fh,000h,000h,000h,000h,000h,000h ;   Hex #C8
    Db  000h,000h,000h,000h,000h,03Fh,030h,037h,036h,036h,036h,036h,036h,036h ;   Hex #C9
    Db  036h,036h,036h,036h,036h,0F7h,000h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #CA
    Db  000h,000h,000h,000h,000h,0FFh,000h,0F7h,036h,036h,036h,036h,036h,036h ;   Hex #CB
    Db  036h,036h,036h,036h,036h,037h,030h,037h,036h,036h,036h,036h,036h,036h ;   Hex #CC
    Db  000h,000h,000h,000h,000h,0FFh,000h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #CD
    Db  036h,036h,036h,036h,036h,0F7h,000h,0F7h,036h,036h,036h,036h,036h,036h ;   Hex #CE
    Db  018h,018h,018h,018h,018h,0FFh,000h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #CF
    Db  036h,036h,036h,036h,036h,036h,036h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #D0
    Db  000h,000h,000h,000h,000h,0FFh,000h,0FFh,018h,018h,018h,018h,018h,018h ;   Hex #D1
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,036h,036h,036h,036h,036h,036h ;   Hex #D2
    Db  036h,036h,036h,036h,036h,036h,036h,03Fh,000h,000h,000h,000h,000h,000h ;   Hex #D3
    Db  018h,018h,018h,018h,018h,01Fh,018h,01Fh,000h,000h,000h,000h,000h,000h ;   Hex #D4
    Db  000h,000h,000h,000h,000h,01Fh,018h,01Fh,018h,018h,018h,018h,018h,018h ;   Hex #D5
    Db  000h,000h,000h,000h,000h,000h,000h,03Fh,036h,036h,036h,036h,036h,036h ;   Hex #D6
    Db  036h,036h,036h,036h,036h,036h,036h,0FFh,036h,036h,036h,036h,036h,036h ;   Hex #D7
    Db  018h,018h,018h,018h,018h,0FFh,018h,0FFh,018h,018h,018h,018h,018h,018h ;   Hex #D8
    Db  018h,018h,018h,018h,018h,018h,018h,0F8h,000h,000h,000h,000h,000h,000h ;   Hex #D9
    Db  000h,000h,000h,000h,000h,000h,000h,01Fh,018h,018h,018h,018h,018h,018h ;   Hex #DA
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DB
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DC
    Db  0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h ;   Hex #DD
    Db  00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh ;   Hex #DE
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,000h,000h,000h,000h,000h,000h,000h ;   Hex #DF
    Db  000h,000h,000h,000h,000h,000h,076h,0DCh,0D8h,0D8h,0DCh,076h,000h,000h ;   Hex #E0
    Db  000h,000h,000h,078h,0CCh,0CCh,0CCh,0D8h,0CCh,0C6h,0C6h,0CCh,000h,000h ;   Hex #E1
    Db  000h,000h,000h,0FEh,0C6h,0C6h,0C0h,0C0h,0C0h,0C0h,0C0h,0C0h,000h,000h ;   Hex #E2
    Db  000h,000h,000h,000h,000h,000h,0FEh,06Ch,06Ch,06Ch,06Ch,06Ch,000h,000h ;   Hex #E3
    Db  000h,000h,000h,0FEh,0C6h,060h,030h,018h,030h,060h,0C6h,0FEh,000h,000h ;   Hex #E4
    Db  000h,000h,000h,000h,000h,000h,07Eh,0D8h,0D8h,0D8h,0D8h,070h,000h,000h ;   Hex #E5
    Db  000h,000h,000h,000h,000h,000h,066h,066h,066h,066h,066h,07Ch,060h,0C0h ;   Hex #E6
    Db  000h,000h,000h,000h,000h,076h,0DCh,018h,018h,018h,018h,018h,000h,000h ;   Hex #E7
    Db  000h,000h,000h,07Eh,018h,03Ch,066h,066h,066h,03Ch,018h,07Eh,000h,000h ;   Hex #E8
    Db  000h,000h,000h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,06Ch,038h,000h,000h ;   Hex #E9
    Db  000h,000h,000h,038h,06Ch,0C6h,0C6h,0C6h,06Ch,06Ch,06Ch,0EEh,000h,000h ;   Hex #EA
    Db  000h,000h,000h,01Eh,030h,018h,00Ch,03Eh,066h,066h,066h,03Ch,000h,000h ;   Hex #EB
    Db  000h,000h,000h,000h,000h,000h,07Eh,0DBh,0DBh,07Eh,000h,000h,000h,000h ;   Hex #EC
    Db  000h,000h,000h,003h,006h,07Eh,0DBh,0DBh,0F3h,07Eh,060h,0C0h,000h,000h ;   Hex #ED
    Db  000h,000h,000h,01Eh,030h,060h,060h,07Eh,060h,060h,030h,01Eh,000h,000h ;   Hex #EE
    Db  000h,000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,000h,000h ;   Hex #EF
    Db  000h,000h,000h,000h,0FEh,000h,000h,0FEh,000h,000h,0FEh,000h,000h,000h ;   Hex #F0
    Db  000h,000h,000h,000h,018h,018h,07Eh,018h,018h,000h,000h,07Eh,000h,000h ;   Hex #F1
    Db  000h,000h,000h,030h,018h,00Ch,006h,00Ch,018h,030h,000h,07Eh,000h,000h ;   Hex #F2
    Db  000h,000h,000h,00Ch,018h,030h,060h,030h,018h,00Ch,000h,07Eh,000h,000h ;   Hex #F3
    Db  000h,000h,00Eh,01Bh,01Bh,018h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #F4
    Db  018h,018h,018h,018h,018h,018h,018h,018h,0D8h,0D8h,070h,000h,000h,000h ;   Hex #F5
    Db  000h,000h,000h,000h,000h,018h,000h,07Eh,000h,018h,000h,000h,000h,000h ;   Hex #F6
    Db  000h,000h,000h,000h,000h,076h,0DCh,000h,076h,0DCh,000h,000h,000h,000h ;   Hex #F7
    Db  000h,038h,06Ch,06Ch,038h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #F8
    Db  000h,000h,000h,000h,000h,000h,000h,018h,018h,000h,000h,000h,000h,000h ;   Hex #F9
    Db  000h,000h,000h,000h,000h,000h,000h,018h,000h,000h,000h,000h,000h,000h ;   Hex #FA
    Db  000h,00Fh,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,0ECh,06Ch,03Ch,01Ch,000h,000h ;   Hex #FB
    Db  000h,06Ch,036h,036h,036h,036h,036h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FC
    Db  000h,03Ch,066h,00Ch,018h,032h,07Eh,000h,000h,000h,000h,000h,000h,000h ;   Hex #FD
    Db  000h,000h,000h,000h,000h,07Eh,07Eh,07Eh,07Eh,07Eh,07Eh,000h,000h,000h ;   Hex #FE
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FF


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\ega\860-cpi.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
CODE    SEGMENT BYTE PUBLIC 'CODE'
        ASSUME CS:CODE,DS:CODE

IF1
;        %OUT    EGA.CPI creation file
;        %OUT    .
;        %OUT    CP SRC files:
;        %OUT    .
;        %OUT    .       CODE PAGE:  860
ENDIF

EGA860: DW     LEN_860                  ; SIZE OF ENTRY HEADER
        DW     POST_EGA860,0            ; POINTER TO NEXT HEADER
        DW     1                        ; DEVICE TYPE
        DB     "EGA     "               ; DEVICE SUBTYPE ID
        DW     860                      ; CODE PAGE ID
        DW     3 DUP(0)                 ; RESERVED
        DW     OFFSET DATA860,0         ; POINTER TO FONTS
LEN_860 EQU    ($-EGA860)               ;
                                        ;
DATA860:DW     1                        ; CART/NON-CART
        DW     3                        ; # OF FONTS
        DW     LEN_D860                 ; LENGTH OF DATA
D860:                                   ;
        DB     16,8                     ; CHARACTER BOX SIZE
        DB     0,0                      ; ASPECT RATIO (UNUSED)
        DW     256                      ; NUMBER OF CHARACTERS
                                        ;
        INCLUDE 860-8X16.ASM            ;
                                        ;
        DB     14,8                     ; CHARACTER BOX SIZE
        DB     0,0                      ; ASPECT RATIO (UNUSED)
        DW     256                      ; NUMBER OF CHARACTERS
                                        ;
        INCLUDE 860-8X14.ASM            ;
                                        ;
        DB     8,8                      ; CHARACTER BOX SIZE
        DB     0,0                      ; ASPECT RATIO (UNUSED)
        DW     256                      ; NUMBER OF CHARACTERS
                                        ;
        INCLUDE 860-8X8.ASM             ;
                                        ;
LEN_D860        EQU ($-D860)            ;
                                        ;
POST_EGA860     EQU     $               ;
                                        ;
CODE    ENDS                            ;
        END                             ;


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\ega\863-8x8.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
;***************************************************
;  CHARACTER FONT FILE
;  Source Assembler File
;
;        CODE PAGE: 863 
;  FONT RESOLUTION: 8 x 8 
;
;     DATE CREATED:05-28-1987
;
;
; Output file from: MULTIFON, Version 1A
;
;***************************************************
    Db  000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #0
    Db  07Eh,081h,0A5h,081h,0BDh,099h,081h,07Eh ;   Hex #1
    Db  07Eh,0FFh,0DBh,0FFh,0C3h,0E7h,0FFh,07Eh ;   Hex #2
    Db  06Ch,0FEh,0FEh,0FEh,07Ch,038h,010h,000h ;   Hex #3
    Db  010h,038h,07Ch,0FEh,07Ch,038h,010h,000h ;   Hex #4
    Db  038h,07Ch,038h,0FEh,0FEh,0D6h,010h,038h ;   Hex #5
    Db  010h,038h,07Ch,0FEh,0FEh,07Ch,010h,038h ;   Hex #6
    Db  000h,000h,018h,03Ch,03Ch,018h,000h,000h ;   Hex #7
    Db  0FFh,0FFh,0E7h,0C3h,0C3h,0E7h,0FFh,0FFh ;   Hex #8
    Db  000h,03Ch,066h,042h,042h,066h,03Ch,000h ;   Hex #9
    Db  0FFh,0C3h,099h,0BDh,0BDh,099h,0C3h,0FFh ;   Hex #A
    Db  00Fh,007h,00Fh,07Dh,0CCh,0CCh,0CCh,078h ;   Hex #B
    Db  03Ch,066h,066h,066h,03Ch,018h,07Eh,018h ;   Hex #C
    Db  03Fh,033h,03Fh,030h,030h,070h,0F0h,0E0h ;   Hex #D
    Db  07Fh,063h,07Fh,063h,063h,067h,0E6h,0C0h ;   Hex #E
    Db  018h,0DBh,03Ch,0E7h,0E7h,03Ch,0DBh,018h ;   Hex #F
    Db  080h,0E0h,0F8h,0FEh,0F8h,0E0h,080h,000h ;   Hex #10
    Db  002h,00Eh,03Eh,0FEh,03Eh,00Eh,002h,000h ;   Hex #11
    Db  018h,03Ch,07Eh,018h,018h,07Eh,03Ch,018h ;   Hex #12
    Db  066h,066h,066h,066h,066h,000h,066h,000h ;   Hex #13
    Db  07Fh,0DBh,0DBh,07Bh,01Bh,01Bh,01Bh,000h ;   Hex #14
    Db  03Eh,061h,03Ch,066h,066h,03Ch,086h,07Ch ;   Hex #15
    Db  000h,000h,000h,000h,07Eh,07Eh,07Eh,000h ;   Hex #16
    Db  018h,03Ch,07Eh,018h,07Eh,03Ch,018h,0FFh ;   Hex #17
    Db  018h,03Ch,07Eh,018h,018h,018h,018h,000h ;   Hex #18
    Db  018h,018h,018h,018h,07Eh,03Ch,018h,000h ;   Hex #19
    Db  000h,018h,00Ch,0FEh,00Ch,018h,000h,000h ;   Hex #1A
    Db  000h,030h,060h,0FEh,060h,030h,000h,000h ;   Hex #1B
    Db  000h,000h,0C0h,0C0h,0C0h,0FEh,000h,000h ;   Hex #1C
    Db  000h,024h,066h,0FFh,066h,024h,000h,000h ;   Hex #1D
    Db  000h,018h,03Ch,07Eh,0FFh,0FFh,000h,000h ;   Hex #1E
    Db  000h,0FFh,0FFh,07Eh,03Ch,018h,000h,000h ;   Hex #1F
    Db  000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #20
    Db  018h,03Ch,03Ch,018h,018h,000h,018h,000h ;   Hex #21
    Db  066h,066h,024h,000h,000h,000h,000h,000h ;   Hex #22
    Db  06Ch,06Ch,0FEh,06Ch,0FEh,06Ch,06Ch,000h ;   Hex #23
    Db  018h,03Eh,060h,03Ch,006h,07Ch,018h,000h ;   Hex #24
    Db  000h,0C6h,0CCh,018h,030h,066h,0C6h,000h ;   Hex #25
    Db  038h,06Ch,038h,076h,0DCh,0CCh,076h,000h ;   Hex #26
    Db  018h,018h,030h,000h,000h,000h,000h,000h ;   Hex #27
    Db  00Ch,018h,030h,030h,030h,018h,00Ch,000h ;   Hex #28
    Db  030h,018h,00Ch,00Ch,00Ch,018h,030h,000h ;   Hex #29
    Db  000h,066h,03Ch,0FFh,03Ch,066h,000h,000h ;   Hex #2A
    Db  000h,018h,018h,07Eh,018h,018h,000h,000h ;   Hex #2B
    Db  000h,000h,000h,000h,000h,018h,018h,030h ;   Hex #2C
    Db  000h,000h,000h,07Eh,000h,000h,000h,000h ;   Hex #2D
    Db  000h,000h,000h,000h,000h,018h,018h,000h ;   Hex #2E
    Db  006h,00Ch,018h,030h,060h,0C0h,080h,000h ;   Hex #2F
    Db  038h,06Ch,0C6h,0D6h,0C6h,06Ch,038h,000h ;   Hex #30
    Db  018h,038h,018h,018h,018h,018h,07Eh,000h ;   Hex #31
    Db  07Ch,0C6h,006h,01Ch,030h,066h,0FEh,000h ;   Hex #32
    Db  07Ch,0C6h,006h,03Ch,006h,0C6h,07Ch,000h ;   Hex #33
    Db  01Ch,03Ch,06Ch,0CCh,0FEh,00Ch,01Eh,000h ;   Hex #34
    Db  0FEh,0C0h,0C0h,0FCh,006h,0C6h,07Ch,000h ;   Hex #35
    Db  038h,060h,0C0h,0FCh,0C6h,0C6h,07Ch,000h ;   Hex #36
    Db  0FEh,0C6h,00Ch,018h,030h,030h,030h,000h ;   Hex #37
    Db  07Ch,0C6h,0C6h,07Ch,0C6h,0C6h,07Ch,000h ;   Hex #38
    Db  07Ch,0C6h,0C6h,07Eh,006h,00Ch,078h,000h ;   Hex #39
    Db  000h,018h,018h,000h,000h,018h,018h,000h ;   Hex #3A
    Db  000h,018h,018h,000h,000h,018h,018h,030h ;   Hex #3B
    Db  006h,00Ch,018h,030h,018h,00Ch,006h,000h ;   Hex #3C
    Db  000h,000h,07Eh,000h,000h,07Eh,000h,000h ;   Hex #3D
    Db  060h,030h,018h,00Ch,018h,030h,060h,000h ;   Hex #3E
    Db  07Ch,0C6h,00Ch,018h,018h,000h,018h,000h ;   Hex #3F
    Db  07Ch,0C6h,0DEh,0DEh,0DEh,0C0h,078h,000h ;   Hex #40
    Db  038h,06Ch,0C6h,0FEh,0C6h,0C6h,0C6h,000h ;   Hex #41
    Db  0FCh,066h,066h,07Ch,066h,066h,0FCh,000h ;   Hex #42
    Db  03Ch,066h,0C0h,0C0h,0C0h,066h,03Ch,000h ;   Hex #43
    Db  0F8h,06Ch,066h,066h,066h,06Ch,0F8h,000h ;   Hex #44
    Db  0FEh,062h,068h,078h,068h,062h,0FEh,000h ;   Hex #45
    Db  0FEh,062h,068h,078h,068h,060h,0F0h,000h ;   Hex #46
    Db  03Ch,066h,0C0h,0C0h,0CEh,066h,03Ah,000h ;   Hex #47
    Db  0C6h,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h ;   Hex #48
    Db  03Ch,018h,018h,018h,018h,018h,03Ch,000h ;   Hex #49
    Db  01Eh,00Ch,00Ch,00Ch,0CCh,0CCh,078h,000h ;   Hex #4A
    Db  0E6h,066h,06Ch,078h,06Ch,066h,0E6h,000h ;   Hex #4B
    Db  0F0h,060h,060h,060h,062h,066h,0FEh,000h ;   Hex #4C
    Db  0C6h,0EEh,0FEh,0FEh,0D6h,0C6h,0C6h,000h ;   Hex #4D
    Db  0C6h,0E6h,0F6h,0DEh,0CEh,0C6h,0C6h,000h ;   Hex #4E
    Db  07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #4F
    Db  0FCh,066h,066h,07Ch,060h,060h,0F0h,000h ;   Hex #50
    Db  07Ch,0C6h,0C6h,0C6h,0C6h,0CEh,07Ch,00Eh ;   Hex #51
    Db  0FCh,066h,066h,07Ch,06Ch,066h,0E6h,000h ;   Hex #52
    Db  03Ch,066h,030h,018h,00Ch,066h,03Ch,000h ;   Hex #53
    Db  07Eh,07Eh,05Ah,018h,018h,018h,03Ch,000h ;   Hex #54
    Db  0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #55
    Db  0C6h,0C6h,0C6h,0C6h,0C6h,06Ch,038h,000h ;   Hex #56
    Db  0C6h,0C6h,0C6h,0D6h,0D6h,0FEh,06Ch,000h ;   Hex #57
    Db  0C6h,0C6h,06Ch,038h,06Ch,0C6h,0C6h,000h ;   Hex #58
    Db  066h,066h,066h,03Ch,018h,018h,03Ch,000h ;   Hex #59
    Db  0FEh,0C6h,08Ch,018h,032h,066h,0FEh,000h ;   Hex #5A
    Db  03Ch,030h,030h,030h,030h,030h,03Ch,000h ;   Hex #5B
    Db  0C0h,060h,030h,018h,00Ch,006h,002h,000h ;   Hex #5C
    Db  03Ch,00Ch,00Ch,00Ch,00Ch,00Ch,03Ch,000h ;   Hex #5D
    Db  010h,038h,06Ch,0C6h,000h,000h,000h,000h ;   Hex #5E
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh ;   Hex #5F
    Db  030h,018h,00Ch,000h,000h,000h,000h,000h ;   Hex #60
    Db  000h,000h,078h,00Ch,07Ch,0CCh,076h,000h ;   Hex #61
    Db  0E0h,060h,07Ch,066h,066h,066h,0DCh,000h ;   Hex #62
    Db  000h,000h,07Ch,0C6h,0C0h,0C6h,07Ch,000h ;   Hex #63
    Db  01Ch,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h ;   Hex #64
    Db  000h,000h,07Ch,0C6h,0FEh,0C0h,07Ch,000h ;   Hex #65
    Db  03Ch,066h,060h,0F8h,060h,060h,0F0h,000h ;   Hex #66
    Db  000h,000h,076h,0CCh,0CCh,07Ch,00Ch,0F8h ;   Hex #67
    Db  0E0h,060h,06Ch,076h,066h,066h,0E6h,000h ;   Hex #68
    Db  018h,000h,038h,018h,018h,018h,03Ch,000h ;   Hex #69
    Db  006h,000h,006h,006h,006h,066h,066h,03Ch ;   Hex #6A
    Db  0E0h,060h,066h,06Ch,078h,06Ch,0E6h,000h ;   Hex #6B
    Db  038h,018h,018h,018h,018h,018h,03Ch,000h ;   Hex #6C
    Db  000h,000h,0ECh,0FEh,0D6h,0D6h,0D6h,000h ;   Hex #6D
    Db  000h,000h,0DCh,066h,066h,066h,066h,000h ;   Hex #6E
    Db  000h,000h,07Ch,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #6F
    Db  000h,000h,0DCh,066h,066h,07Ch,060h,0F0h ;   Hex #70
    Db  000h,000h,076h,0CCh,0CCh,07Ch,00Ch,01Eh ;   Hex #71
    Db  000h,000h,0DCh,076h,060h,060h,0F0h,000h ;   Hex #72
    Db  000h,000h,07Eh,0C0h,07Ch,006h,0FCh,000h ;   Hex #73
    Db  030h,030h,0FCh,030h,030h,036h,01Ch,000h ;   Hex #74
    Db  000h,000h,0CCh,0CCh,0CCh,0CCh,076h,000h ;   Hex #75
    Db  000h,000h,0C6h,0C6h,0C6h,06Ch,038h,000h ;   Hex #76
    Db  000h,000h,0C6h,0D6h,0D6h,0FEh,06Ch,000h ;   Hex #77
    Db  000h,000h,0C6h,06Ch,038h,06Ch,0C6h,000h ;   Hex #78
    Db  000h,000h,0C6h,0C6h,0C6h,07Eh,006h,0FCh ;   Hex #79
    Db  000h,000h,07Eh,04Ch,018h,032h,07Eh,000h ;   Hex #7A
    Db  00Eh,018h,018h,070h,018h,018h,00Eh,000h ;   Hex #7B
    Db  018h,018h,018h,018h,018h,018h,018h,000h ;   Hex #7C
    Db  070h,018h,018h,00Eh,018h,018h,070h,000h ;   Hex #7D
    Db  076h,0DCh,000h,000h,000h,000h,000h,000h ;   Hex #7E
    Db  000h,010h,038h,06Ch,0C6h,0C6h,0FEh,000h ;   Hex #7F
    Db  07Ch,0C6h,0C0h,0C0h,0C6h,07Ch,00Ch,078h ;   Hex #80
    Db  0CCh,000h,0CCh,0CCh,0CCh,0CCh,076h,000h ;   Hex #81
    Db  00Ch,018h,07Ch,0C6h,0FEh,0C0h,07Ch,000h ;   Hex #82
    Db  07Ch,082h,078h,00Ch,07Ch,0CCh,076h,000h ;   Hex #83
    Db  07Ch,082h,038h,06Ch,0C6h,0FEh,0C6h,000h ;   Hex #84
    Db  030h,018h,078h,00Ch,07Ch,0CCh,076h,000h ;   Hex #85
    Db  07Fh,0DBh,0DBh,07Bh,01Bh,01Bh,01Bh,000h ;   Hex #86
    Db  000h,000h,07Eh,0C0h,0C0h,07Eh,00Ch,038h ;   Hex #87
    Db  07Ch,082h,07Ch,0C6h,0FEh,0C0h,07Ch,000h ;   Hex #88
    Db  0C6h,000h,07Ch,0C6h,0FEh,0C0h,07Ch,000h ;   Hex #89
    Db  030h,018h,07Ch,0C6h,0FEh,0C0h,07Ch,000h ;   Hex #8A
    Db  066h,000h,038h,018h,018h,018h,03Ch,000h ;   Hex #8B
    Db  07Ch,082h,038h,018h,018h,018h,03Ch,000h ;   Hex #8C
    Db  000h,000h,000h,000h,000h,0FFh,000h,0FFh ;   Hex #8D
    Db  018h,00Ch,038h,06Ch,0C6h,0FEh,0C6h,000h ;   Hex #8E
    Db  03Eh,061h,03Ch,066h,066h,03Ch,086h,07Ch ;   Hex #8F
    Db  018h,030h,0FEh,0C0h,0F8h,0C0h,0FEh,000h ;   Hex #90
    Db  030h,018h,0FEh,0C0h,0FCh,0C0h,0FEh,000h ;   Hex #91
    Db  038h,044h,0FEh,0C0h,0FCh,0C0h,0FEh,000h ;   Hex #92
    Db  07Ch,082h,07Ch,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #93
    Db  0C6h,000h,0FEh,0C0h,0FCh,0C0h,0FEh,000h ;   Hex #94
    Db  066h,000h,03Ch,018h,018h,018h,03Ch,000h ;   Hex #95
    Db  078h,084h,000h,0CCh,0CCh,0CCh,076h,000h ;   Hex #96
    Db  060h,030h,0CCh,0CCh,0CCh,0CCh,076h,000h ;   Hex #97
    Db  000h,0C6h,07Ch,0C6h,0C6h,07Ch,0C6h,000h ;   Hex #98
    Db  07Ch,082h,038h,06Ch,0C6h,06Ch,038h,000h ;   Hex #99
    Db  0C6h,000h,0C6h,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #9A
    Db  018h,018h,07Eh,0C0h,0C0h,07Eh,018h,018h ;   Hex #9B
    Db  038h,06Ch,064h,0F0h,060h,066h,0FCh,000h ;   Hex #9C
    Db  060h,030h,0C6h,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #9D
    Db  07Ch,082h,000h,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #9E
    Db  00Eh,01Bh,018h,03Ch,018h,0D8h,070h,000h ;   Hex #9F
    Db  018h,018h,018h,000h,000h,018h,018h,018h ;   Hex #A0
    Db  00Ch,018h,030h,000h,000h,000h,000h,000h ;   Hex #A1
    Db  00Ch,018h,07Ch,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #A2
    Db  018h,030h,0CCh,0CCh,0CCh,0CCh,076h,000h ;   Hex #A3
    Db  000h,0C6h,000h,000h,000h,000h,000h,000h ;   Hex #A4
    Db  000h,000h,000h,000h,000h,018h,00Ch,078h ;   Hex #A5
    Db  078h,00Ch,038h,00Ch,078h,000h,000h,000h ;   Hex #A6
    Db  0FFh,000h,000h,000h,000h,000h,000h,000h ;   Hex #A7
    Db  07Eh,081h,03Ch,018h,018h,018h,03Ch,000h ;   Hex #A8
    Db  000h,000h,000h,0FEh,0C0h,0C0h,000h,000h ;   Hex #A9
    Db  000h,000h,000h,0FEh,006h,006h,000h,000h ;   Hex #AA
    Db  063h,0E6h,06Ch,07Eh,033h,066h,0CCh,00Fh ;   Hex #AB
    Db  063h,0E6h,06Ch,07Ah,036h,06Ah,0DFh,006h ;   Hex #AC
    Db  0E1h,032h,064h,03Ah,0F6h,02Ah,05Fh,082h ;   Hex #AD
    Db  000h,033h,066h,0CCh,066h,033h,000h,000h ;   Hex #AE
    Db  000h,0CCh,066h,033h,066h,0CCh,000h,000h ;   Hex #AF
    Db  022h,088h,022h,088h,022h,088h,022h,088h ;   Hex #B0
    Db  055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh ;   Hex #B1
    Db  077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh ;   Hex #B2
    Db  018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B3
    Db  018h,018h,018h,018h,0F8h,018h,018h,018h ;   Hex #B4
    Db  018h,018h,0F8h,018h,0F8h,018h,018h,018h ;   Hex #B5
    Db  036h,036h,036h,036h,0F6h,036h,036h,036h ;   Hex #B6
    Db  000h,000h,000h,000h,0FEh,036h,036h,036h ;   Hex #B7
    Db  000h,000h,0F8h,018h,0F8h,018h,018h,018h ;   Hex #B8
    Db  036h,036h,0F6h,006h,0F6h,036h,036h,036h ;   Hex #B9
    Db  036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #BA
    Db  000h,000h,0FEh,006h,0F6h,036h,036h,036h ;   Hex #BB
    Db  036h,036h,0F6h,006h,0FEh,000h,000h,000h ;   Hex #BC
    Db  036h,036h,036h,036h,0FEh,000h,000h,000h ;   Hex #BD
    Db  018h,018h,0F8h,018h,0F8h,000h,000h,000h ;   Hex #BE
    Db  000h,000h,000h,000h,0F8h,018h,018h,018h ;   Hex #BF
    Db  018h,018h,018h,018h,01Fh,000h,000h,000h ;   Hex #C0
    Db  018h,018h,018h,018h,0FFh,000h,000h,000h ;   Hex #C1
    Db  000h,000h,000h,000h,0FFh,018h,018h,018h ;   Hex #C2
    Db  018h,018h,018h,018h,01Fh,018h,018h,018h ;   Hex #C3
    Db  000h,000h,000h,000h,0FFh,000h,000h,000h ;   Hex #C4
    Db  018h,018h,018h,018h,0FFh,018h,018h,018h ;   Hex #C5
    Db  018h,018h,01Fh,018h,01Fh,018h,018h,018h ;   Hex #C6
    Db  036h,036h,036h,036h,037h,036h,036h,036h ;   Hex #C7
    Db  036h,036h,037h,030h,03Fh,000h,000h,000h ;   Hex #C8
    Db  000h,000h,03Fh,030h,037h,036h,036h,036h ;   Hex #C9
    Db  036h,036h,0F7h,000h,0FFh,000h,000h,000h ;   Hex #CA
    Db  000h,000h,0FFh,000h,0F7h,036h,036h,036h ;   Hex #CB
    Db  036h,036h,037h,030h,037h,036h,036h,036h ;   Hex #CC
    Db  000h,000h,0FFh,000h,0FFh,000h,000h,000h ;   Hex #CD
    Db  036h,036h,0F7h,000h,0F7h,036h,036h,036h ;   Hex #CE
    Db  018h,018h,0FFh,000h,0FFh,000h,000h,000h ;   Hex #CF
    Db  036h,036h,036h,036h,0FFh,000h,000h,000h ;   Hex #D0
    Db  000h,000h,0FFh,000h,0FFh,018h,018h,018h ;   Hex #D1
    Db  000h,000h,000h,000h,0FFh,036h,036h,036h ;   Hex #D2
    Db  036h,036h,036h,036h,03Fh,000h,000h,000h ;   Hex #D3
    Db  018h,018h,01Fh,018h,01Fh,000h,000h,000h ;   Hex #D4
    Db  000h,000h,01Fh,018h,01Fh,018h,018h,018h ;   Hex #D5
    Db  000h,000h,000h,000h,03Fh,036h,036h,036h ;   Hex #D6
    Db  036h,036h,036h,036h,0FFh,036h,036h,036h ;   Hex #D7
    Db  018h,018h,0FFh,018h,0FFh,018h,018h,018h ;   Hex #D8
    Db  018h,018h,018h,018h,0F8h,000h,000h,000h ;   Hex #D9
    Db  000h,000h,000h,000h,01Fh,018h,018h,018h ;   Hex #DA
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DB
    Db  000h,000h,000h,000h,0FFh,0FFh,0FFh,0FFh ;   Hex #DC
    Db  0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h ;   Hex #DD
    Db  00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh ;   Hex #DE
    Db  0FFh,0FFh,0FFh,0FFh,000h,000h,000h,000h ;   Hex #DF
    Db  000h,000h,076h,0DCh,0C8h,0DCh,076h,000h ;   Hex #E0
    Db  078h,0CCh,0CCh,0D8h,0CCh,0C6h,0CCh,000h ;   Hex #E1
    Db  0FEh,0C6h,0C0h,0C0h,0C0h,0C0h,0C0h,000h ;   Hex #E2
    Db  000h,000h,0FEh,06Ch,06Ch,06Ch,06Ch,000h ;   Hex #E3
    Db  0FEh,0C6h,060h,030h,060h,0C6h,0FEh,000h ;   Hex #E4
    Db  000h,000h,07Eh,0D8h,0D8h,0D8h,070h,000h ;   Hex #E5
    Db  000h,000h,066h,066h,066h,066h,07Ch,0C0h ;   Hex #E6
    Db  000h,076h,0DCh,018h,018h,018h,018h,000h ;   Hex #E7
    Db  07Eh,018h,03Ch,066h,066h,03Ch,018h,07Eh ;   Hex #E8
    Db  038h,06Ch,0C6h,0FEh,0C6h,06Ch,038h,000h ;   Hex #E9
    Db  038h,06Ch,0C6h,0C6h,06Ch,06Ch,0EEh,000h ;   Hex #EA
    Db  00Eh,018h,00Ch,03Eh,066h,066h,03Ch,000h ;   Hex #EB
    Db  000h,000h,07Eh,0DBh,0DBh,07Eh,000h,000h ;   Hex #EC
    Db  006h,00Ch,07Eh,0DBh,0DBh,07Eh,060h,0C0h ;   Hex #ED
    Db  01Eh,030h,060h,07Eh,060h,030h,01Eh,000h ;   Hex #EE
    Db  000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,000h ;   Hex #EF
    Db  000h,0FEh,000h,0FEh,000h,0FEh,000h,000h ;   Hex #F0
    Db  018h,018h,07Eh,018h,018h,000h,07Eh,000h ;   Hex #F1
    Db  030h,018h,00Ch,018h,030h,000h,07Eh,000h ;   Hex #F2
    Db  00Ch,018h,030h,018h,00Ch,000h,07Eh,000h ;   Hex #F3
    Db  00Eh,01Bh,01Bh,018h,018h,018h,018h,018h ;   Hex #F4
    Db  018h,018h,018h,018h,018h,0D8h,0D8h,070h ;   Hex #F5
    Db  000h,018h,000h,07Eh,000h,018h,000h,000h ;   Hex #F6
    Db  000h,076h,0DCh,000h,076h,0DCh,000h,000h ;   Hex #F7
    Db  038h,06Ch,06Ch,038h,000h,000h,000h,000h ;   Hex #F8
    Db  000h,000h,000h,018h,018h,000h,000h,000h ;   Hex #F9
    Db  000h,000h,000h,018h,000h,000h,000h,000h ;   Hex #FA
    Db  00Fh,00Ch,00Ch,00Ch,0ECh,06Ch,03Ch,01Ch ;   Hex #FB
    Db  06Ch,036h,036h,036h,036h,000h,000h,000h ;   Hex #FC
    Db  078h,00Ch,018h,030h,07Ch,000h,000h,000h ;   Hex #FD
    Db  000h,000h,03Ch,03Ch,03Ch,03Ch,000h,000h ;   Hex #FE
    Db  000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FF


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\ega\860-8x8.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
;***************************************************
;  CHARACTER FONT FILE
;  Source Assembler File
;
;        CODE PAGE: 860 
;  FONT RESOLUTION: 8 x 8 
;
;     DATE CREATED:05-28-1987
;
;
; Output file from: MULTIFON, Version 1A
;
;***************************************************
    Db  000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #0
    Db  07Eh,081h,0A5h,081h,0BDh,099h,081h,07Eh ;   Hex #1
    Db  07Eh,0FFh,0DBh,0FFh,0C3h,0E7h,0FFh,07Eh ;   Hex #2
    Db  06Ch,0FEh,0FEh,0FEh,07Ch,038h,010h,000h ;   Hex #3
    Db  010h,038h,07Ch,0FEh,07Ch,038h,010h,000h ;   Hex #4
    Db  038h,07Ch,038h,0FEh,0FEh,0D6h,010h,038h ;   Hex #5
    Db  010h,038h,07Ch,0FEh,0FEh,07Ch,010h,038h ;   Hex #6
    Db  000h,000h,018h,03Ch,03Ch,018h,000h,000h ;   Hex #7
    Db  0FFh,0FFh,0E7h,0C3h,0C3h,0E7h,0FFh,0FFh ;   Hex #8
    Db  000h,03Ch,066h,042h,042h,066h,03Ch,000h ;   Hex #9
    Db  0FFh,0C3h,099h,0BDh,0BDh,099h,0C3h,0FFh ;   Hex #A
    Db  00Fh,007h,00Fh,07Dh,0CCh,0CCh,0CCh,078h ;   Hex #B
    Db  03Ch,066h,066h,066h,03Ch,018h,07Eh,018h ;   Hex #C
    Db  03Fh,033h,03Fh,030h,030h,070h,0F0h,0E0h ;   Hex #D
    Db  07Fh,063h,07Fh,063h,063h,067h,0E6h,0C0h ;   Hex #E
    Db  018h,0DBh,03Ch,0E7h,0E7h,03Ch,0DBh,018h ;   Hex #F
    Db  080h,0E0h,0F8h,0FEh,0F8h,0E0h,080h,000h ;   Hex #10
    Db  002h,00Eh,03Eh,0FEh,03Eh,00Eh,002h,000h ;   Hex #11
    Db  018h,03Ch,07Eh,018h,018h,07Eh,03Ch,018h ;   Hex #12
    Db  066h,066h,066h,066h,066h,000h,066h,000h ;   Hex #13
    Db  07Fh,0DBh,0DBh,07Bh,01Bh,01Bh,01Bh,000h ;   Hex #14
    Db  03Eh,061h,03Ch,066h,066h,03Ch,086h,07Ch ;   Hex #15
    Db  000h,000h,000h,000h,07Eh,07Eh,07Eh,000h ;   Hex #16
    Db  018h,03Ch,07Eh,018h,07Eh,03Ch,018h,0FFh ;   Hex #17
    Db  018h,03Ch,07Eh,018h,018h,018h,018h,000h ;   Hex #18
    Db  018h,018h,018h,018h,07Eh,03Ch,018h,000h ;   Hex #19
    Db  000h,018h,00Ch,0FEh,00Ch,018h,000h,000h ;   Hex #1A
    Db  000h,030h,060h,0FEh,060h,030h,000h,000h ;   Hex #1B
    Db  000h,000h,0C0h,0C0h,0C0h,0FEh,000h,000h ;   Hex #1C
    Db  000h,024h,066h,0FFh,066h,024h,000h,000h ;   Hex #1D
    Db  000h,018h,03Ch,07Eh,0FFh,0FFh,000h,000h ;   Hex #1E
    Db  000h,0FFh,0FFh,07Eh,03Ch,018h,000h,000h ;   Hex #1F
    Db  000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #20
    Db  018h,03Ch,03Ch,018h,018h,000h,018h,000h ;   Hex #21
    Db  066h,066h,024h,000h,000h,000h,000h,000h ;   Hex #22
    Db  06Ch,06Ch,0FEh,06Ch,0FEh,06Ch,06Ch,000h ;   Hex #23
    Db  018h,03Eh,060h,03Ch,006h,07Ch,018h,000h ;   Hex #24
    Db  000h,0C6h,0CCh,018h,030h,066h,0C6h,000h ;   Hex #25
    Db  038h,06Ch,038h,076h,0DCh,0CCh,076h,000h ;   Hex #26
    Db  018h,018h,030h,000h,000h,000h,000h,000h ;   Hex #27
    Db  00Ch,018h,030h,030h,030h,018h,00Ch,000h ;   Hex #28
    Db  030h,018h,00Ch,00Ch,00Ch,018h,030h,000h ;   Hex #29
    Db  000h,066h,03Ch,0FFh,03Ch,066h,000h,000h ;   Hex #2A
    Db  000h,018h,018h,07Eh,018h,018h,000h,000h ;   Hex #2B
    Db  000h,000h,000h,000h,000h,018h,018h,030h ;   Hex #2C
    Db  000h,000h,000h,07Eh,000h,000h,000h,000h ;   Hex #2D
    Db  000h,000h,000h,000h,000h,018h,018h,000h ;   Hex #2E
    Db  006h,00Ch,018h,030h,060h,0C0h,080h,000h ;   Hex #2F
    Db  038h,06Ch,0C6h,0D6h,0C6h,06Ch,038h,000h ;   Hex #30
    Db  018h,038h,018h,018h,018h,018h,07Eh,000h ;   Hex #31
    Db  07Ch,0C6h,006h,01Ch,030h,066h,0FEh,000h ;   Hex #32
    Db  07Ch,0C6h,006h,03Ch,006h,0C6h,07Ch,000h ;   Hex #33
    Db  01Ch,03Ch,06Ch,0CCh,0FEh,00Ch,01Eh,000h ;   Hex #34
    Db  0FEh,0C0h,0C0h,0FCh,006h,0C6h,07Ch,000h ;   Hex #35
    Db  038h,060h,0C0h,0FCh,0C6h,0C6h,07Ch,000h ;   Hex #36
    Db  0FEh,0C6h,00Ch,018h,030h,030h,030h,000h ;   Hex #37
    Db  07Ch,0C6h,0C6h,07Ch,0C6h,0C6h,07Ch,000h ;   Hex #38
    Db  07Ch,0C6h,0C6h,07Eh,006h,00Ch,078h,000h ;   Hex #39
    Db  000h,018h,018h,000h,000h,018h,018h,000h ;   Hex #3A
    Db  000h,018h,018h,000h,000h,018h,018h,030h ;   Hex #3B
    Db  006h,00Ch,018h,030h,018h,00Ch,006h,000h ;   Hex #3C
    Db  000h,000h,07Eh,000h,000h,07Eh,000h,000h ;   Hex #3D
    Db  060h,030h,018h,00Ch,018h,030h,060h,000h ;   Hex #3E
    Db  07Ch,0C6h,00Ch,018h,018h,000h,018h,000h ;   Hex #3F
    Db  07Ch,0C6h,0DEh,0DEh,0DEh,0C0h,078h,000h ;   Hex #40
    Db  038h,06Ch,0C6h,0FEh,0C6h,0C6h,0C6h,000h ;   Hex #41
    Db  0FCh,066h,066h,07Ch,066h,066h,0FCh,000h ;   Hex #42
    Db  03Ch,066h,0C0h,0C0h,0C0h,066h,03Ch,000h ;   Hex #43
    Db  0F8h,06Ch,066h,066h,066h,06Ch,0F8h,000h ;   Hex #44
    Db  0FEh,062h,068h,078h,068h,062h,0FEh,000h ;   Hex #45
    Db  0FEh,062h,068h,078h,068h,060h,0F0h,000h ;   Hex #46
    Db  03Ch,066h,0C0h,0C0h,0CEh,066h,03Ah,000h ;   Hex #47
    Db  0C6h,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h ;   Hex #48
    Db  03Ch,018h,018h,018h,018h,018h,03Ch,000h ;   Hex #49
    Db  01Eh,00Ch,00Ch,00Ch,0CCh,0CCh,078h,000h ;   Hex #4A
    Db  0E6h,066h,06Ch,078h,06Ch,066h,0E6h,000h ;   Hex #4B
    Db  0F0h,060h,060h,060h,062h,066h,0FEh,000h ;   Hex #4C
    Db  0C6h,0EEh,0FEh,0FEh,0D6h,0C6h,0C6h,000h ;   Hex #4D
    Db  0C6h,0E6h,0F6h,0DEh,0CEh,0C6h,0C6h,000h ;   Hex #4E
    Db  07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #4F
    Db  0FCh,066h,066h,07Ch,060h,060h,0F0h,000h ;   Hex #50
    Db  07Ch,0C6h,0C6h,0C6h,0C6h,0CEh,07Ch,00Eh ;   Hex #51
    Db  0FCh,066h,066h,07Ch,06Ch,066h,0E6h,000h ;   Hex #52
    Db  03Ch,066h,030h,018h,00Ch,066h,03Ch,000h ;   Hex #53
    Db  07Eh,07Eh,05Ah,018h,018h,018h,03Ch,000h ;   Hex #54
    Db  0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #55
    Db  0C6h,0C6h,0C6h,0C6h,0C6h,06Ch,038h,000h ;   Hex #56
    Db  0C6h,0C6h,0C6h,0D6h,0D6h,0FEh,06Ch,000h ;   Hex #57
    Db  0C6h,0C6h,06Ch,038h,06Ch,0C6h,0C6h,000h ;   Hex #58
    Db  066h,066h,066h,03Ch,018h,018h,03Ch,000h ;   Hex #59
    Db  0FEh,0C6h,08Ch,018h,032h,066h,0FEh,000h ;   Hex #5A
    Db  03Ch,030h,030h,030h,030h,030h,03Ch,000h ;   Hex #5B
    Db  0C0h,060h,030h,018h,00Ch,006h,002h,000h ;   Hex #5C
    Db  03Ch,00Ch,00Ch,00Ch,00Ch,00Ch,03Ch,000h ;   Hex #5D
    Db  010h,038h,06Ch,0C6h,000h,000h,000h,000h ;   Hex #5E
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh ;   Hex #5F
    Db  030h,018h,00Ch,000h,000h,000h,000h,000h ;   Hex #60
    Db  000h,000h,078h,00Ch,07Ch,0CCh,076h,000h ;   Hex #61
    Db  0E0h,060h,07Ch,066h,066h,066h,0DCh,000h ;   Hex #62
    Db  000h,000h,07Ch,0C6h,0C0h,0C6h,07Ch,000h ;   Hex #63
    Db  01Ch,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h ;   Hex #64
    Db  000h,000h,07Ch,0C6h,0FEh,0C0h,07Ch,000h ;   Hex #65
    Db  03Ch,066h,060h,0F8h,060h,060h,0F0h,000h ;   Hex #66
    Db  000h,000h,076h,0CCh,0CCh,07Ch,00Ch,0F8h ;   Hex #67
    Db  0E0h,060h,06Ch,076h,066h,066h,0E6h,000h ;   Hex #68
    Db  018h,000h,038h,018h,018h,018h,03Ch,000h ;   Hex #69
    Db  006h,000h,006h,006h,006h,066h,066h,03Ch ;   Hex #6A
    Db  0E0h,060h,066h,06Ch,078h,06Ch,0E6h,000h ;   Hex #6B
    Db  038h,018h,018h,018h,018h,018h,03Ch,000h ;   Hex #6C
    Db  000h,000h,0ECh,0FEh,0D6h,0D6h,0D6h,000h ;   Hex #6D
    Db  000h,000h,0DCh,066h,066h,066h,066h,000h ;   Hex #6E
    Db  000h,000h,07Ch,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #6F
    Db  000h,000h,0DCh,066h,066h,07Ch,060h,0F0h ;   Hex #70
    Db  000h,000h,076h,0CCh,0CCh,07Ch,00Ch,01Eh ;   Hex #71
    Db  000h,000h,0DCh,076h,060h,060h,0F0h,000h ;   Hex #72
    Db  000h,000h,07Eh,0C0h,07Ch,006h,0FCh,000h ;   Hex #73
    Db  030h,030h,0FCh,030h,030h,036h,01Ch,000h ;   Hex #74
    Db  000h,000h,0CCh,0CCh,0CCh,0CCh,076h,000h ;   Hex #75
    Db  000h,000h,0C6h,0C6h,0C6h,06Ch,038h,000h ;   Hex #76
    Db  000h,000h,0C6h,0D6h,0D6h,0FEh,06Ch,000h ;   Hex #77
    Db  000h,000h,0C6h,06Ch,038h,06Ch,0C6h,000h ;   Hex #78
    Db  000h,000h,0C6h,0C6h,0C6h,07Eh,006h,0FCh ;   Hex #79
    Db  000h,000h,07Eh,04Ch,018h,032h,07Eh,000h ;   Hex #7A
    Db  00Eh,018h,018h,070h,018h,018h,00Eh,000h ;   Hex #7B
    Db  018h,018h,018h,018h,018h,018h,018h,000h ;   Hex #7C
    Db  070h,018h,018h,00Eh,018h,018h,070h,000h ;   Hex #7D
    Db  076h,0DCh,000h,000h,000h,000h,000h,000h ;   Hex #7E
    Db  000h,010h,038h,06Ch,0C6h,0C6h,0FEh,000h ;   Hex #7F
    Db  07Ch,0C6h,0C0h,0C0h,0C6h,07Ch,00Ch,078h ;   Hex #80
    Db  0CCh,000h,0CCh,0CCh,0CCh,0CCh,076h,000h ;   Hex #81
    Db  00Ch,018h,07Ch,0C6h,0FEh,0C0h,07Ch,000h ;   Hex #82
    Db  07Ch,082h,078h,00Ch,07Ch,0CCh,076h,000h ;   Hex #83
    Db  076h,0DCh,078h,00Ch,07Ch,0CCh,076h,000h ;   Hex #84
    Db  030h,018h,078h,00Ch,07Ch,0CCh,076h,000h ;   Hex #85
    Db  030h,060h,038h,06Ch,0C6h,0FEh,0C6h,000h ;   Hex #86
    Db  000h,000h,07Eh,0C0h,0C0h,07Eh,00Ch,038h ;   Hex #87
    Db  07Ch,082h,07Ch,0C6h,0FEh,0C0h,07Ch,000h ;   Hex #88
    Db  07Ch,082h,0FEh,0C0h,0F8h,0C0h,0FEh,000h ;   Hex #89
    Db  030h,018h,07Ch,0C6h,0FEh,0C0h,07Ch,000h ;   Hex #8A
    Db  00Ch,018h,03Ch,018h,018h,018h,03Ch,000h ;   Hex #8B
    Db  07Ch,082h,038h,06Ch,0C6h,06Ch,038h,000h ;   Hex #8C
    Db  030h,018h,000h,038h,018h,018h,03Ch,000h ;   Hex #8D
    Db  076h,0DCh,038h,06Ch,0C6h,0FEh,0C6h,000h ;   Hex #8E
    Db  07Ch,082h,038h,06Ch,0C6h,0FEh,0C6h,000h ;   Hex #8F
    Db  018h,030h,0FEh,0C0h,0F8h,0C0h,0FEh,000h ;   Hex #90
    Db  060h,030h,038h,06Ch,0C6h,0FEh,0C6h,000h ;   Hex #91
    Db  030h,018h,0FEh,0C0h,0F8h,0C0h,0FEh,000h ;   Hex #92
    Db  07Ch,082h,07Ch,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #93
    Db  076h,0DCh,07Ch,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #94
    Db  030h,018h,07Ch,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #95
    Db  00Ch,018h,0C6h,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #96
    Db  060h,030h,0CCh,0CCh,0CCh,0CCh,076h,000h ;   Hex #97
    Db  030h,018h,03Ch,018h,018h,018h,03Ch,000h ;   Hex #98
    Db  076h,0DCh,038h,06Ch,0C6h,06Ch,038h,000h ;   Hex #99
    Db  0C6h,000h,0C6h,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #9A
    Db  018h,018h,07Eh,0C0h,0C0h,07Eh,018h,018h ;   Hex #9B
    Db  038h,06Ch,064h,0F0h,060h,066h,0FCh,000h ;   Hex #9C
    Db  030h,018h,0C6h,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #9D
    Db  0F8h,0CCh,0CCh,0FAh,0C6h,0CFh,0C6h,0C7h ;   Hex #9E
    Db  00Ch,018h,038h,06Ch,0C6h,06Ch,038h,000h ;   Hex #9F
    Db  018h,030h,078h,00Ch,07Ch,0CCh,076h,000h ;   Hex #A0
    Db  00Ch,018h,000h,038h,018h,018h,03Ch,000h ;   Hex #A1
    Db  00Ch,018h,07Ch,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #A2
    Db  018h,030h,0CCh,0CCh,0CCh,0CCh,076h,000h ;   Hex #A3
    Db  076h,0DCh,000h,0DCh,066h,066h,066h,000h ;   Hex #A4
    Db  076h,0DCh,000h,0E6h,0F6h,0DEh,0CEh,000h ;   Hex #A5
    Db  03Ch,06Ch,06Ch,03Eh,000h,07Eh,000h,000h ;   Hex #A6
    Db  038h,06Ch,06Ch,038h,000h,07Ch,000h,000h ;   Hex #A7
    Db  018h,000h,018h,018h,030h,063h,03Eh,000h ;   Hex #A8
    Db  030h,018h,038h,06Ch,0C6h,06Ch,038h,000h ;   Hex #A9
    Db  000h,000h,000h,0FEh,006h,006h,000h,000h ;   Hex #AA
    Db  063h,0E6h,06Ch,07Eh,033h,066h,0CCh,00Fh ;   Hex #AB
    Db  063h,0E6h,06Ch,07Ah,036h,06Ah,0DFh,006h ;   Hex #AC
    Db  018h,000h,018h,018h,03Ch,03Ch,018h,000h ;   Hex #AD
    Db  000h,033h,066h,0CCh,066h,033h,000h,000h ;   Hex #AE
    Db  000h,0CCh,066h,033h,066h,0CCh,000h,000h ;   Hex #AF
    Db  022h,088h,022h,088h,022h,088h,022h,088h ;   Hex #B0
    Db  055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh ;   Hex #B1
    Db  077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh ;   Hex #B2
    Db  018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B3
    Db  018h,018h,018h,018h,0F8h,018h,018h,018h ;   Hex #B4
    Db  018h,018h,0F8h,018h,0F8h,018h,018h,018h ;   Hex #B5
    Db  036h,036h,036h,036h,0F6h,036h,036h,036h ;   Hex #B6
    Db  000h,000h,000h,000h,0FEh,036h,036h,036h ;   Hex #B7
    Db  000h,000h,0F8h,018h,0F8h,018h,018h,018h ;   Hex #B8
    Db  036h,036h,0F6h,006h,0F6h,036h,036h,036h ;   Hex #B9
    Db  036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #BA
    Db  000h,000h,0FEh,006h,0F6h,036h,036h,036h ;   Hex #BB
    Db  036h,036h,0F6h,006h,0FEh,000h,000h,000h ;   Hex #BC
    Db  036h,036h,036h,036h,0FEh,000h,000h,000h ;   Hex #BD
    Db  018h,018h,0F8h,018h,0F8h,000h,000h,000h ;   Hex #BE
    Db  000h,000h,000h,000h,0F8h,018h,018h,018h ;   Hex #BF
    Db  018h,018h,018h,018h,01Fh,000h,000h,000h ;   Hex #C0
    Db  018h,018h,018h,018h,0FFh,000h,000h,000h ;   Hex #C1
    Db  000h,000h,000h,000h,0FFh,018h,018h,018h ;   Hex #C2
    Db  018h,018h,018h,018h,01Fh,018h,018h,018h ;   Hex #C3
    Db  000h,000h,000h,000h,0FFh,000h,000h,000h ;   Hex #C4
    Db  018h,018h,018h,018h,0FFh,018h,018h,018h ;   Hex #C5
    Db  018h,018h,01Fh,018h,01Fh,018h,018h,018h ;   Hex #C6
    Db  036h,036h,036h,036h,037h,036h,036h,036h ;   Hex #C7
    Db  036h,036h,037h,030h,03Fh,000h,000h,000h ;   Hex #C8
    Db  000h,000h,03Fh,030h,037h,036h,036h,036h ;   Hex #C9
    Db  036h,036h,0F7h,000h,0FFh,000h,000h,000h ;   Hex #CA
    Db  000h,000h,0FFh,000h,0F7h,036h,036h,036h ;   Hex #CB
    Db  036h,036h,037h,030h,037h,036h,036h,036h ;   Hex #CC
    Db  000h,000h,0FFh,000h,0FFh,000h,000h,000h ;   Hex #CD
    Db  036h,036h,0F7h,000h,0F7h,036h,036h,036h ;   Hex #CE
    Db  018h,018h,0FFh,000h,0FFh,000h,000h,000h ;   Hex #CF
    Db  036h,036h,036h,036h,0FFh,000h,000h,000h ;   Hex #D0
    Db  000h,000h,0FFh,000h,0FFh,018h,018h,018h ;   Hex #D1
    Db  000h,000h,000h,000h,0FFh,036h,036h,036h ;   Hex #D2
    Db  036h,036h,036h,036h,03Fh,000h,000h,000h ;   Hex #D3
    Db  018h,018h,01Fh,018h,01Fh,000h,000h,000h ;   Hex #D4
    Db  000h,000h,01Fh,018h,01Fh,018h,018h,018h ;   Hex #D5
    Db  000h,000h,000h,000h,03Fh,036h,036h,036h ;   Hex #D6
    Db  036h,036h,036h,036h,0FFh,036h,036h,036h ;   Hex #D7
    Db  018h,018h,0FFh,018h,0FFh,018h,018h,018h ;   Hex #D8
    Db  018h,018h,018h,018h,0F8h,000h,000h,000h ;   Hex #D9
    Db  000h,000h,000h,000h,01Fh,018h,018h,018h ;   Hex #DA
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DB
    Db  000h,000h,000h,000h,0FFh,0FFh,0FFh,0FFh ;   Hex #DC
    Db  0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h ;   Hex #DD
    Db  00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh ;   Hex #DE
    Db  0FFh,0FFh,0FFh,0FFh,000h,000h,000h,000h ;   Hex #DF
    Db  000h,000h,076h,0DCh,0C8h,0DCh,076h,000h ;   Hex #E0
    Db  078h,0CCh,0CCh,0D8h,0CCh,0C6h,0CCh,000h ;   Hex #E1
    Db  0FEh,0C6h,0C0h,0C0h,0C0h,0C0h,0C0h,000h ;   Hex #E2
    Db  000h,000h,0FEh,06Ch,06Ch,06Ch,06Ch,000h ;   Hex #E3
    Db  0FEh,0C6h,060h,030h,060h,0C6h,0FEh,000h ;   Hex #E4
    Db  000h,000h,07Eh,0D8h,0D8h,0D8h,070h,000h ;   Hex #E5
    Db  000h,000h,066h,066h,066h,066h,07Ch,0C0h ;   Hex #E6
    Db  000h,076h,0DCh,018h,018h,018h,018h,000h ;   Hex #E7
    Db  07Eh,018h,03Ch,066h,066h,03Ch,018h,07Eh ;   Hex #E8
    Db  038h,06Ch,0C6h,0FEh,0C6h,06Ch,038h,000h ;   Hex #E9
    Db  038h,06Ch,0C6h,0C6h,06Ch,06Ch,0EEh,000h ;   Hex #EA
    Db  00Eh,018h,00Ch,03Eh,066h,066h,03Ch,000h ;   Hex #EB
    Db  000h,000h,07Eh,0DBh,0DBh,07Eh,000h,000h ;   Hex #EC
    Db  006h,00Ch,07Eh,0DBh,0DBh,07Eh,060h,0C0h ;   Hex #ED
    Db  01Eh,030h,060h,07Eh,060h,030h,01Eh,000h ;   Hex #EE
    Db  000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,000h ;   Hex #EF
    Db  000h,0FEh,000h,0FEh,000h,0FEh,000h,000h ;   Hex #F0
    Db  018h,018h,07Eh,018h,018h,000h,07Eh,000h ;   Hex #F1
    Db  030h,018h,00Ch,018h,030h,000h,07Eh,000h ;   Hex #F2
    Db  00Ch,018h,030h,018h,00Ch,000h,07Eh,000h ;   Hex #F3
    Db  00Eh,01Bh,01Bh,018h,018h,018h,018h,018h ;   Hex #F4
    Db  018h,018h,018h,018h,018h,0D8h,0D8h,070h ;   Hex #F5
    Db  000h,018h,000h,07Eh,000h,018h,000h,000h ;   Hex #F6
    Db  000h,076h,0DCh,000h,076h,0DCh,000h,000h ;   Hex #F7
    Db  038h,06Ch,06Ch,038h,000h,000h,000h,000h ;   Hex #F8
    Db  000h,000h,000h,018h,018h,000h,000h,000h ;   Hex #F9
    Db  000h,000h,000h,018h,000h,000h,000h,000h ;   Hex #FA
    Db  00Fh,00Ch,00Ch,00Ch,0ECh,06Ch,03Ch,01Ch ;   Hex #FB
    Db  06Ch,036h,036h,036h,036h,000h,000h,000h ;   Hex #FC
    Db  078h,00Ch,018h,030h,07Ch,000h,000h,000h ;   Hex #FD
    Db  000h,000h,03Ch,03Ch,03Ch,03Ch,000h,000h ;   Hex #FE
    Db  000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FF


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\ega\865-8x14.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
;***************************************************
;  CHARACTER FONT FILE
;  Source Assembler File
;
;        CODE PAGE: 865 
;  FONT RESOLUTION: 8 x 14 
;
;     DATE CREATED:05-28-1987
;
;
; Output file from: MULTIFON, Version 1A
;
;***************************************************
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #0
    Db  000h,000h,000h,07Eh,081h,0A5h,081h,081h,0BDh,099h,081h,07Eh,000h,000h ;   Hex #1
    Db  000h,000h,000h,07Eh,0FFh,0DBh,0FFh,0FFh,0C3h,0E7h,0FFh,07Eh,000h,000h ;   Hex #2
    Db  000h,000h,000h,000h,06Ch,0FEh,0FEh,0FEh,0FEh,07Ch,038h,010h,000h,000h ;   Hex #3
    Db  000h,000h,000h,000h,010h,038h,07Ch,0FEh,07Ch,038h,010h,000h,000h,000h ;   Hex #4
    Db  000h,000h,000h,018h,03Ch,03Ch,0E7h,0E7h,0E7h,018h,018h,03Ch,000h,000h ;   Hex #5
    Db  000h,000h,000h,018h,03Ch,07Eh,0FFh,0FFh,07Eh,018h,018h,03Ch,000h,000h ;   Hex #6
    Db  000h,000h,000h,000h,000h,000h,018h,03Ch,03Ch,018h,000h,000h,000h,000h ;   Hex #7
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0E7h,0C3h,0C3h,0E7h,0FFh,0FFh,0FFh,0FFh ;   Hex #8
    Db  000h,000h,000h,000h,000h,03Ch,066h,042h,042h,066h,03Ch,000h,000h,000h ;   Hex #9
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0C3h,099h,0BDh,0BDh,099h,0C3h,0FFh,0FFh,0FFh ;   Hex #A
    Db  000h,000h,000h,01Eh,00Eh,01Ah,032h,078h,0CCh,0CCh,0CCh,078h,000h,000h ;   Hex #B
    Db  000h,000h,000h,03Ch,066h,066h,066h,03Ch,018h,07Eh,018h,018h,000h,000h ;   Hex #C
    Db  000h,000h,000h,03Fh,033h,03Fh,030h,030h,030h,070h,0F0h,0E0h,000h,000h ;   Hex #D
    Db  000h,000h,000h,07Fh,063h,07Fh,063h,063h,063h,067h,0E7h,0E6h,0C0h,000h ;   Hex #E
    Db  000h,000h,000h,018h,018h,0DBh,03Ch,0E7h,03Ch,0DBh,018h,018h,000h,000h ;   Hex #F
    Db  000h,000h,000h,080h,0C0h,0E0h,0F8h,0FEh,0F8h,0E0h,0C0h,080h,000h,000h ;   Hex #10
    Db  000h,000h,000h,002h,006h,00Eh,03Eh,0FEh,03Eh,00Eh,006h,002h,000h,000h ;   Hex #11
    Db  000h,000h,000h,018h,03Ch,07Eh,018h,018h,018h,07Eh,03Ch,018h,000h,000h ;   Hex #12
    Db  000h,000h,000h,066h,066h,066h,066h,066h,066h,000h,066h,066h,000h,000h ;   Hex #13
    Db  000h,000h,000h,07Fh,0DBh,0DBh,0DBh,07Bh,01Bh,01Bh,01Bh,01Bh,000h,000h ;   Hex #14
    Db  000h,000h,07Ch,0C6h,060h,038h,06Ch,0C6h,0C6h,06Ch,038h,00Ch,0C6h,07Ch ;   Hex #15
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,0FEh,0FEh,0FEh,000h,000h ;   Hex #16
    Db  000h,000h,000h,018h,03Ch,07Eh,018h,018h,018h,07Eh,03Ch,018h,07Eh,000h ;   Hex #17
    Db  000h,000h,000h,018h,03Ch,07Eh,018h,018h,018h,018h,018h,018h,000h,000h ;   Hex #18
    Db  000h,000h,000h,018h,018h,018h,018h,018h,018h,07Eh,03Ch,018h,000h,000h ;   Hex #19
    Db  000h,000h,000h,000h,000h,018h,00Ch,0FEh,00Ch,018h,000h,000h,000h,000h ;   Hex #1A
    Db  000h,000h,000h,000h,000h,030h,060h,0FEh,060h,030h,000h,000h,000h,000h ;   Hex #1B
    Db  000h,000h,000h,000h,000h,000h,0C0h,0C0h,0C0h,0FEh,000h,000h,000h,000h ;   Hex #1C
    Db  000h,000h,000h,000h,000h,028h,06Ch,0FEh,06Ch,028h,000h,000h,000h,000h ;   Hex #1D
    Db  000h,000h,000h,000h,010h,038h,038h,07Ch,07Ch,0FEh,0FEh,000h,000h,000h ;   Hex #1E
    Db  000h,000h,000h,000h,0FEh,0FEh,07Ch,07Ch,038h,038h,010h,000h,000h,000h ;   Hex #1F
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #20
    Db  000h,000h,000h,018h,03Ch,03Ch,03Ch,018h,018h,000h,018h,018h,000h,000h ;   Hex #21
    Db  000h,066h,066h,066h,024h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #22
    Db  000h,000h,000h,06Ch,06Ch,0FEh,06Ch,06Ch,06Ch,0FEh,06Ch,06Ch,000h,000h ;   Hex #23
    Db  000h,018h,018h,07Ch,0C6h,0C2h,0C0h,07Ch,006h,086h,0C6h,07Ch,018h,018h ;   Hex #24
    Db  000h,000h,000h,000h,000h,0C2h,0C6h,00Ch,018h,030h,066h,0C6h,000h,000h ;   Hex #25
    Db  000h,000h,000h,038h,06Ch,06Ch,038h,076h,0DCh,0CCh,0CCh,076h,000h,000h ;   Hex #26
    Db  000h,018h,018h,018h,030h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #27
    Db  000h,000h,000h,00Ch,018h,030h,030h,030h,030h,030h,018h,00Ch,000h,000h ;   Hex #28
    Db  000h,000h,000h,030h,018h,00Ch,00Ch,00Ch,00Ch,00Ch,018h,030h,000h,000h ;   Hex #29
    Db  000h,000h,000h,000h,000h,066h,03Ch,0FFh,03Ch,066h,000h,000h,000h,000h ;   Hex #2A
    Db  000h,000h,000h,000h,000h,018h,018h,07Eh,018h,018h,000h,000h,000h,000h ;   Hex #2B
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,018h,018h,030h,000h ;   Hex #2C
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,000h,000h,000h,000h,000h,000h ;   Hex #2D
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,018h,000h,000h ;   Hex #2E
    Db  000h,000h,000h,002h,006h,00Ch,018h,030h,060h,0C0h,080h,000h,000h,000h ;   Hex #2F
    Db  000h,000h,000h,038h,06Ch,0C6h,0C6h,0D6h,0C6h,0C6h,06Ch,038h,000h,000h ;   Hex #30
    Db  000h,000h,000h,018h,038h,078h,018h,018h,018h,018h,018h,07Eh,000h,000h ;   Hex #31
    Db  000h,000h,000h,07Ch,0C6h,006h,00Ch,018h,030h,060h,0C6h,0FEh,000h,000h ;   Hex #32
    Db  000h,000h,000h,07Ch,0C6h,006h,006h,03Ch,006h,006h,0C6h,07Ch,000h,000h ;   Hex #33
    Db  000h,000h,000h,00Ch,01Ch,03Ch,06Ch,0CCh,0FEh,00Ch,00Ch,01Eh,000h,000h ;   Hex #34
    Db  000h,000h,000h,0FEh,0C0h,0C0h,0C0h,0FCh,006h,006h,0C6h,07Ch,000h,000h ;   Hex #35
    Db  000h,000h,000h,038h,060h,0C0h,0C0h,0FCh,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #36
    Db  000h,000h,000h,0FEh,0C6h,006h,00Ch,018h,030h,030h,030h,030h,000h,000h ;   Hex #37
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0C6h,07Ch,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #38
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0C6h,07Eh,006h,006h,00Ch,078h,000h,000h ;   Hex #39
    Db  000h,000h,000h,000h,018h,018h,000h,000h,000h,018h,018h,000h,000h,000h ;   Hex #3A
    Db  000h,000h,000h,000h,018h,018h,000h,000h,000h,018h,018h,030h,000h,000h ;   Hex #3B
    Db  000h,000h,000h,00Ch,018h,030h,060h,0C0h,060h,030h,018h,00Ch,000h,000h ;   Hex #3C
    Db  000h,000h,000h,000h,000h,000h,07Eh,000h,000h,07Eh,000h,000h,000h,000h ;   Hex #3D
    Db  000h,000h,000h,060h,030h,018h,00Ch,006h,00Ch,018h,030h,060h,000h,000h ;   Hex #3E
    Db  000h,000h,000h,07Ch,0C6h,0C6h,00Ch,018h,018h,000h,018h,018h,000h,000h ;   Hex #3F
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0DEh,0DEh,0DEh,0DCh,0C0h,07Ch,000h,000h ;   Hex #40
    Db  000h,000h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #41
    Db  000h,000h,000h,0FCh,066h,066h,066h,07Ch,066h,066h,066h,0FCh,000h,000h ;   Hex #42
    Db  000h,000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0C0h,0C2h,066h,03Ch,000h,000h ;   Hex #43
    Db  000h,000h,000h,0F8h,06Ch,066h,066h,066h,066h,066h,06Ch,0F8h,000h,000h ;   Hex #44
    Db  000h,000h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h ;   Hex #45
    Db  000h,000h,000h,0FEh,066h,062h,068h,078h,068h,060h,060h,0F0h,000h,000h ;   Hex #46
    Db  000h,000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0DEh,0C6h,066h,03Ah,000h,000h ;   Hex #47
    Db  000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,000h,000h ;   Hex #48
    Db  000h,000h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #49
    Db  000h,000h,000h,01Eh,00Ch,00Ch,00Ch,00Ch,00Ch,0CCh,0CCh,078h,000h,000h ;   Hex #4A
    Db  000h,000h,000h,0E6h,066h,06Ch,06Ch,078h,06Ch,06Ch,066h,0E6h,000h,000h ;   Hex #4B
    Db  000h,000h,000h,0F0h,060h,060h,060h,060h,060h,062h,066h,0FEh,000h,000h ;   Hex #4C
    Db  000h,000h,000h,0C6h,0EEh,0FEh,0D6h,0C6h,0C6h,0C6h,0C6h,0C6h,000h,000h ;   Hex #4D
    Db  000h,000h,000h,0C6h,0E6h,0F6h,0FEh,0DEh,0CEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #4E
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #4F
    Db  000h,000h,000h,0FCh,066h,066h,066h,07Ch,060h,060h,060h,0F0h,000h,000h ;   Hex #50
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0D6h,0DEh,07Ch,00Eh,000h ;   Hex #51
    Db  000h,000h,000h,0FCh,066h,066h,066h,07Ch,06Ch,066h,066h,0E6h,000h,000h ;   Hex #52
    Db  000h,000h,000h,07Ch,0C6h,0C6h,060h,038h,00Ch,0C6h,0C6h,07Ch,000h,000h ;   Hex #53
    Db  000h,000h,000h,07Eh,07Eh,05Ah,018h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #54
    Db  000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #55
    Db  000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,06Ch,038h,010h,000h,000h ;   Hex #56
    Db  000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0D6h,0D6h,0FEh,06Ch,06Ch,000h,000h ;   Hex #57
    Db  000h,000h,000h,0C6h,0C6h,0C6h,07Ch,038h,07Ch,0C6h,0C6h,0C6h,000h,000h ;   Hex #58
    Db  000h,000h,000h,066h,066h,066h,066h,03Ch,018h,018h,018h,03Ch,000h,000h ;   Hex #59
    Db  000h,000h,000h,0FEh,0C6h,08Ch,018h,030h,060h,0C2h,0C6h,0FEh,000h,000h ;   Hex #5A
    Db  000h,000h,000h,03Ch,030h,030h,030h,030h,030h,030h,030h,03Ch,000h,000h ;   Hex #5B
    Db  000h,000h,000h,080h,0C0h,0E0h,070h,038h,01Ch,00Eh,006h,002h,000h,000h ;   Hex #5C
    Db  000h,000h,000h,03Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,03Ch,000h,000h ;   Hex #5D
    Db  010h,038h,06Ch,0C6h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #5E
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,0FFh ;   Hex #5F
    Db  000h,030h,018h,00Ch,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #60
    Db  000h,000h,000h,000h,000h,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #61
    Db  000h,000h,000h,0E0h,060h,060h,078h,06Ch,066h,066h,066h,07Ch,000h,000h ;   Hex #62
    Db  000h,000h,000h,000h,000h,000h,07Ch,0C6h,0C0h,0C0h,0C6h,07Ch,000h,000h ;   Hex #63
    Db  000h,000h,000h,01Ch,00Ch,00Ch,03Ch,06Ch,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #64
    Db  000h,000h,000h,000h,000h,000h,07Ch,0C6h,0FEh,0C0h,0C6h,07Ch,000h,000h ;   Hex #65
    Db  000h,000h,000h,01Ch,036h,032h,030h,07Ch,030h,030h,030h,078h,000h,000h ;   Hex #66
    Db  000h,000h,000h,000h,000h,000h,076h,0CCh,0CCh,0CCh,07Ch,00Ch,0CCh,078h ;   Hex #67
    Db  000h,000h,000h,0E0h,060h,060h,06Ch,076h,066h,066h,066h,0E6h,000h,000h ;   Hex #68
    Db  000h,000h,000h,018h,018h,000h,038h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #69
    Db  000h,000h,000h,006h,006h,000h,00Eh,006h,006h,006h,006h,066h,066h,03Ch ;   Hex #6A
    Db  000h,000h,000h,0E0h,060h,060h,066h,06Ch,078h,06Ch,066h,0E6h,000h,000h ;   Hex #6B
    Db  000h,000h,000h,038h,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #6C
    Db  000h,000h,000h,000h,000h,000h,0ECh,0FEh,0D6h,0D6h,0D6h,0D6h,000h,000h ;   Hex #6D
    Db  000h,000h,000h,000h,000h,000h,0DCh,066h,066h,066h,066h,066h,000h,000h ;   Hex #6E
    Db  000h,000h,000h,000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #6F
    Db  000h,000h,000h,000h,000h,000h,0DCh,066h,066h,066h,07Ch,060h,060h,0F0h ;   Hex #70
    Db  000h,000h,000h,000h,000h,000h,076h,0CCh,0CCh,0CCh,07Ch,00Ch,00Ch,01Eh ;   Hex #71
    Db  000h,000h,000h,000h,000h,000h,0DCh,076h,066h,060h,060h,0F0h,000h,000h ;   Hex #72
    Db  000h,000h,000h,000h,000h,000h,07Ch,0C6h,070h,01Ch,0C6h,07Ch,000h,000h ;   Hex #73
    Db  000h,000h,000h,010h,030h,030h,0FCh,030h,030h,030h,036h,01Ch,000h,000h ;   Hex #74
    Db  000h,000h,000h,000h,000h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #75
    Db  000h,000h,000h,000h,000h,000h,0C6h,0C6h,0C6h,06Ch,038h,010h,000h,000h ;   Hex #76
    Db  000h,000h,000h,000h,000h,000h,0C6h,0C6h,0D6h,0D6h,0FEh,06Ch,000h,000h ;   Hex #77
    Db  000h,000h,000h,000h,000h,000h,0C6h,06Ch,038h,038h,06Ch,0C6h,000h,000h ;   Hex #78
    Db  000h,000h,000h,000h,000h,000h,0C6h,0C6h,0C6h,0C6h,07Eh,006h,00Ch,078h ;   Hex #79
    Db  000h,000h,000h,000h,000h,000h,0FEh,0CCh,018h,030h,066h,0FEh,000h,000h ;   Hex #7A
    Db  000h,000h,000h,00Eh,018h,018h,018h,070h,018h,018h,018h,00Eh,000h,000h ;   Hex #7B
    Db  000h,000h,000h,018h,018h,018h,018h,018h,018h,018h,018h,018h,000h,000h ;   Hex #7C
    Db  000h,000h,000h,070h,018h,018h,018h,00Eh,018h,018h,018h,070h,000h,000h ;   Hex #7D
    Db  000h,076h,0DCh,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #7E
    Db  000h,000h,000h,000h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,000h,000h,000h ;   Hex #7F
    Db  000h,000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0C0h,0C2h,066h,03Ch,00Ch,078h ;   Hex #80
    Db  000h,000h,000h,0CCh,000h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #81
    Db  000h,000h,00Ch,018h,030h,000h,07Ch,0C6h,0FEh,0C0h,0C6h,07Ch,000h,000h ;   Hex #82
    Db  000h,000h,010h,038h,06Ch,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #83
    Db  000h,000h,000h,0C6h,000h,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #84
    Db  000h,000h,060h,030h,018h,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #85
    Db  000h,000h,038h,06Ch,038h,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #86
    Db  000h,000h,000h,000h,000h,000h,07Ch,0C6h,0C0h,0C0h,0C6h,07Ch,00Ch,078h ;   Hex #87
    Db  000h,000h,010h,038h,06Ch,000h,07Ch,0C6h,0FEh,0C0h,0C6h,07Ch,000h,000h ;   Hex #88
    Db  000h,000h,000h,0C6h,000h,000h,07Ch,0C6h,0FEh,0C0h,0C6h,07Ch,000h,000h ;   Hex #89
    Db  000h,000h,060h,030h,018h,000h,07Ch,0C6h,0FEh,0C0h,0C6h,07Ch,000h,000h ;   Hex #8A
    Db  000h,000h,000h,066h,000h,000h,038h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #8B
    Db  000h,000h,018h,03Ch,066h,000h,038h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #8C
    Db  000h,000h,060h,030h,018h,000h,038h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #8D
    Db  000h,0C6h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #8E
    Db  038h,06Ch,038h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #8F
    Db  00Ch,018h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h ;   Hex #90
    Db  000h,000h,000h,000h,000h,000h,0ECh,036h,076h,0DCh,0D8h,06Eh,000h,000h ;   Hex #91
    Db  000h,000h,000h,03Eh,06Ch,0CCh,0CCh,0FEh,0CCh,0CCh,0CCh,0CEh,000h,000h ;   Hex #92
    Db  000h,000h,010h,038h,06Ch,000h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #93
    Db  000h,000h,000h,0C6h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #94
    Db  000h,000h,060h,030h,018h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #95
    Db  000h,000h,030h,078h,0CCh,000h,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #96
    Db  000h,000h,060h,030h,018h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #97
    Db  000h,000h,000h,0C6h,000h,000h,0C6h,0C6h,0C6h,0C6h,07Eh,006h,00Ch,078h ;   Hex #98
    Db  000h,0C6h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #99
    Db  000h,0C6h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #9A
    Db  000h,000h,000h,000h,000h,000h,07Ch,0CEh,0DEh,0F6h,0E6h,07Ch,000h,000h ;   Hex #9B
    Db  000h,000h,038h,06Ch,064h,060h,0F0h,060h,060h,060h,0E6h,0FCh,000h,000h ;   Hex #9C
    Db  000h,000h,004h,07Ch,0CEh,0CEh,0D6h,0D6h,0D6h,0E6h,0E6h,07Ch,040h,000h ;   Hex #9D
    Db  000h,000h,0FCh,066h,066h,07Ch,062h,066h,06Fh,066h,066h,0F3h,000h,000h ;   Hex #9E
    Db  000h,000h,00Eh,01Bh,018h,018h,018h,07Eh,018h,018h,018h,0D8h,070h,000h ;   Hex #9F
    Db  000h,000h,00Ch,018h,030h,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #A0
    Db  000h,000h,00Ch,018h,030h,000h,038h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #A1
    Db  000h,000h,00Ch,018h,030h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #A2
    Db  000h,000h,00Ch,018h,030h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #A3
    Db  000h,000h,000h,076h,0DCh,000h,0DCh,066h,066h,066h,066h,066h,000h,000h ;   Hex #A4
    Db  076h,0DCh,000h,0C6h,0E6h,0F6h,0FEh,0DEh,0CEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #A5
    Db  000h,000h,03Ch,06Ch,06Ch,03Eh,000h,07Eh,000h,000h,000h,000h,000h,000h ;   Hex #A6
    Db  000h,000h,038h,06Ch,06Ch,038h,000h,07Ch,000h,000h,000h,000h,000h,000h ;   Hex #A7
    Db  000h,000h,000h,030h,030h,000h,030h,030h,060h,0C6h,0C6h,07Ch,000h,000h ;   Hex #A8
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,0C0h,0C0h,0C0h,000h,000h,000h ;   Hex #A9
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,006h,006h,006h,000h,000h,000h ;   Hex #AA
    Db  000h,000h,060h,0E0h,063h,066h,06Ch,018h,030h,06Eh,0C3h,006h,00Ch,01Fh ;   Hex #AB
    Db  000h,000h,060h,0E0h,063h,066h,06Ch,01Ah,036h,06Eh,0DAh,03Fh,006h,006h ;   Hex #AC
    Db  000h,000h,000h,018h,018h,000h,018h,018h,03Ch,03Ch,03Ch,018h,000h,000h ;   Hex #AD
    Db  000h,000h,000h,000h,000h,036h,06Ch,0D8h,06Ch,036h,000h,000h,000h,000h ;   Hex #AE
    Db  000h,000h,000h,000h,000h,0C6h,07Ch,0C6h,0C6h,0C6h,07Ch,0C6h,000h,000h ;   Hex #AF
    Db  011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h ;   Hex #B0
    Db  055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh ;   Hex #B1
    Db  0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h ;   Hex #B2
    Db  018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B3
    Db  018h,018h,018h,018h,018h,018h,018h,0F8h,018h,018h,018h,018h,018h,018h ;   Hex #B4
    Db  018h,018h,018h,018h,018h,0F8h,018h,0F8h,018h,018h,018h,018h,018h,018h ;   Hex #B5
    Db  036h,036h,036h,036h,036h,036h,036h,0F6h,036h,036h,036h,036h,036h,036h ;   Hex #B6
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,036h,036h,036h,036h,036h,036h ;   Hex #B7
    Db  000h,000h,000h,000h,000h,0F8h,018h,0F8h,018h,018h,018h,018h,018h,018h ;   Hex #B8
    Db  036h,036h,036h,036h,036h,0F6h,006h,0F6h,036h,036h,036h,036h,036h,036h ;   Hex #B9
    Db  036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #BA
    Db  000h,000h,000h,000h,000h,0FEh,006h,0F6h,036h,036h,036h,036h,036h,036h ;   Hex #BB
    Db  036h,036h,036h,036h,036h,0F6h,006h,0FEh,000h,000h,000h,000h,000h,000h ;   Hex #BC
    Db  036h,036h,036h,036h,036h,036h,036h,0FEh,000h,000h,000h,000h,000h,000h ;   Hex #BD
    Db  018h,018h,018h,018h,018h,0F8h,018h,0F8h,000h,000h,000h,000h,000h,000h ;   Hex #BE
    Db  000h,000h,000h,000h,000h,000h,000h,0F8h,018h,018h,018h,018h,018h,018h ;   Hex #BF
    Db  018h,018h,018h,018h,018h,018h,018h,01Fh,000h,000h,000h,000h,000h,000h ;   Hex #C0
    Db  018h,018h,018h,018h,018h,018h,018h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #C1
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,018h,018h,018h,018h,018h,018h ;   Hex #C2
    Db  018h,018h,018h,018h,018h,018h,018h,01Fh,018h,018h,018h,018h,018h,018h ;   Hex #C3
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #C4
    Db  018h,018h,018h,018h,018h,018h,018h,0FFh,018h,018h,018h,018h,018h,018h ;   Hex #C5
    Db  018h,018h,018h,018h,018h,01Fh,018h,01Fh,018h,018h,018h,018h,018h,018h ;   Hex #C6
    Db  036h,036h,036h,036h,036h,036h,036h,037h,036h,036h,036h,036h,036h,036h ;   Hex #C7
    Db  036h,036h,036h,036h,036h,037h,030h,03Fh,000h,000h,000h,000h,000h,000h ;   Hex #C8
    Db  000h,000h,000h,000h,000h,03Fh,030h,037h,036h,036h,036h,036h,036h,036h ;   Hex #C9
    Db  036h,036h,036h,036h,036h,0F7h,000h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #CA
    Db  000h,000h,000h,000h,000h,0FFh,000h,0F7h,036h,036h,036h,036h,036h,036h ;   Hex #CB
    Db  036h,036h,036h,036h,036h,037h,030h,037h,036h,036h,036h,036h,036h,036h ;   Hex #CC
    Db  000h,000h,000h,000h,000h,0FFh,000h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #CD
    Db  036h,036h,036h,036h,036h,0F7h,000h,0F7h,036h,036h,036h,036h,036h,036h ;   Hex #CE
    Db  018h,018h,018h,018h,018h,0FFh,000h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #CF
    Db  036h,036h,036h,036h,036h,036h,036h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #D0
    Db  000h,000h,000h,000h,000h,0FFh,000h,0FFh,018h,018h,018h,018h,018h,018h ;   Hex #D1
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,036h,036h,036h,036h,036h,036h ;   Hex #D2
    Db  036h,036h,036h,036h,036h,036h,036h,03Fh,000h,000h,000h,000h,000h,000h ;   Hex #D3
    Db  018h,018h,018h,018h,018h,01Fh,018h,01Fh,000h,000h,000h,000h,000h,000h ;   Hex #D4
    Db  000h,000h,000h,000h,000h,01Fh,018h,01Fh,018h,018h,018h,018h,018h,018h ;   Hex #D5
    Db  000h,000h,000h,000h,000h,000h,000h,03Fh,036h,036h,036h,036h,036h,036h ;   Hex #D6
    Db  036h,036h,036h,036h,036h,036h,036h,0FFh,036h,036h,036h,036h,036h,036h ;   Hex #D7
    Db  018h,018h,018h,018h,018h,0FFh,018h,0FFh,018h,018h,018h,018h,018h,018h ;   Hex #D8
    Db  018h,018h,018h,018h,018h,018h,018h,0F8h,000h,000h,000h,000h,000h,000h ;   Hex #D9
    Db  000h,000h,000h,000h,000h,000h,000h,01Fh,018h,018h,018h,018h,018h,018h ;   Hex #DA
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DB
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DC
    Db  0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h ;   Hex #DD
    Db  00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh ;   Hex #DE
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,000h,000h,000h,000h,000h,000h,000h ;   Hex #DF
    Db  000h,000h,000h,000h,000h,000h,076h,0DCh,0D8h,0D8h,0DCh,076h,000h,000h ;   Hex #E0
    Db  000h,000h,000h,078h,0CCh,0CCh,0CCh,0D8h,0CCh,0C6h,0C6h,0CCh,000h,000h ;   Hex #E1
    Db  000h,000h,000h,0FEh,0C6h,0C6h,0C0h,0C0h,0C0h,0C0h,0C0h,0C0h,000h,000h ;   Hex #E2
    Db  000h,000h,000h,000h,000h,000h,0FEh,06Ch,06Ch,06Ch,06Ch,06Ch,000h,000h ;   Hex #E3
    Db  000h,000h,000h,0FEh,0C6h,060h,030h,018h,030h,060h,0C6h,0FEh,000h,000h ;   Hex #E4
    Db  000h,000h,000h,000h,000h,000h,07Eh,0D8h,0D8h,0D8h,0D8h,070h,000h,000h ;   Hex #E5
    Db  000h,000h,000h,000h,000h,000h,066h,066h,066h,066h,066h,07Ch,060h,0C0h ;   Hex #E6
    Db  000h,000h,000h,000h,000h,076h,0DCh,018h,018h,018h,018h,018h,000h,000h ;   Hex #E7
    Db  000h,000h,000h,07Eh,018h,03Ch,066h,066h,066h,03Ch,018h,07Eh,000h,000h ;   Hex #E8
    Db  000h,000h,000h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,06Ch,038h,000h,000h ;   Hex #E9
    Db  000h,000h,000h,038h,06Ch,0C6h,0C6h,0C6h,06Ch,06Ch,06Ch,0EEh,000h,000h ;   Hex #EA
    Db  000h,000h,000h,01Eh,030h,018h,00Ch,03Eh,066h,066h,066h,03Ch,000h,000h ;   Hex #EB
    Db  000h,000h,000h,000h,000h,000h,07Eh,0DBh,0DBh,07Eh,000h,000h,000h,000h ;   Hex #EC
    Db  000h,000h,000h,003h,006h,07Eh,0DBh,0DBh,0F3h,07Eh,060h,0C0h,000h,000h ;   Hex #ED
    Db  000h,000h,000h,01Eh,030h,060h,060h,07Eh,060h,060h,030h,01Eh,000h,000h ;   Hex #EE
    Db  000h,000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,000h,000h ;   Hex #EF
    Db  000h,000h,000h,000h,0FEh,000h,000h,0FEh,000h,000h,0FEh,000h,000h,000h ;   Hex #F0
    Db  000h,000h,000h,000h,018h,018h,07Eh,018h,018h,000h,000h,07Eh,000h,000h ;   Hex #F1
    Db  000h,000h,000h,030h,018h,00Ch,006h,00Ch,018h,030h,000h,07Eh,000h,000h ;   Hex #F2
    Db  000h,000h,000h,00Ch,018h,030h,060h,030h,018h,00Ch,000h,07Eh,000h,000h ;   Hex #F3
    Db  000h,000h,00Eh,01Bh,01Bh,018h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #F4
    Db  018h,018h,018h,018h,018h,018h,018h,018h,0D8h,0D8h,070h,000h,000h,000h ;   Hex #F5
    Db  000h,000h,000h,000h,000h,018h,000h,07Eh,000h,018h,000h,000h,000h,000h ;   Hex #F6
    Db  000h,000h,000h,000h,000h,076h,0DCh,000h,076h,0DCh,000h,000h,000h,000h ;   Hex #F7
    Db  000h,038h,06Ch,06Ch,038h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #F8
    Db  000h,000h,000h,000h,000h,000h,000h,018h,018h,000h,000h,000h,000h,000h ;   Hex #F9
    Db  000h,000h,000h,000h,000h,000h,000h,018h,000h,000h,000h,000h,000h,000h ;   Hex #FA
    Db  000h,00Fh,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,0ECh,06Ch,03Ch,01Ch,000h,000h ;   Hex #FB
    Db  000h,06Ch,036h,036h,036h,036h,036h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FC
    Db  000h,03Ch,066h,00Ch,018h,032h,07Eh,000h,000h,000h,000h,000h,000h,000h ;   Hex #FD
    Db  000h,000h,000h,000h,000h,07Eh,07Eh,07Eh,07Eh,07Eh,07Eh,000h,000h,000h ;   Hex #FE
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FF


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\ega\863-cpi.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
CODE    SEGMENT BYTE PUBLIC 'CODE'
        ASSUME CS:CODE,DS:CODE

IF1
;        %OUT    EGA.CPI creation file
;        %OUT    .
;        %OUT    CP SRC files:
;        %OUT    .
;        %OUT    .       CODE PAGE:  863
ENDIF

EGA863: DW     LEN_863                  ; SIZE OF ENTRY HEADER
        DW     POST_EGA863,0            ; POINTER TO NEXT HEADER
        DW     1                        ; DEVICE TYPE
        DB     "EGA     "               ; DEVICE SUBTYPE ID
        DW     863                      ; CODE PAGE ID
        DW     3 DUP(0)                 ; RESERVED
        DW     OFFSET DATA863,0         ; POINTER TO FONTS
LEN_863 EQU    ($-EGA863)               ;
                                        ;
DATA863:DW     1                        ; CART/NON-CART
        DW     3                        ; # OF FONTS
        DW     LEN_D863                 ; LENGTH OF DATA
D863:                                   ;
        DB     16,8                     ; CHARACTER BOX SIZE
        DB     0,0                      ; ASPECT RATIO (UNUSED)
        DW     256                      ; NUMBER OF CHARACTERS
                                        ;
        INCLUDE 863-8X16.ASM            ;
                                        ;
        DB     14,8                     ; CHARACTER BOX SIZE
        DB     0,0                      ; ASPECT RATIO (UNUSED)
        DW     256                      ; NUMBER OF CHARACTERS
                                        ;
        INCLUDE 863-8X14.ASM            ;
                                        ;
        DB     8,8                      ; CHARACTER BOX SIZE
        DB     0,0                      ; ASPECT RATIO (UNUSED)
        DW     256                      ; NUMBER OF CHARACTERS
                                        ;
        INCLUDE 863-8X8.ASM             ;
                                        ;
LEN_D863        EQU ($-D863)            ;
                                        ;
POST_EGA863     EQU     $               ;
                                        ;
CODE    ENDS                            ;
        END                             ;


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\ega\865-8x16.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
;***************************************************
;  CHARACTER FONT FILE
;  Source Assembler File
;
;        CODE PAGE: 865 
;  FONT RESOLUTION: 8 x 16 
;
;     DATE CREATED:05-28-1987
;
;
; Output file from: MULTIFON, Version 1A
;
;***************************************************
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #0
    Db  000h,000h,07Eh,081h,0A5h,081h,081h,0BDh,099h,081h,081h,07Eh,000h,000h,000h,000h ;   Hex #1
    Db  000h,000h,07Eh,0FFh,0DBh,0FFh,0FFh,0C3h,0E7h,0FFh,0FFh,07Eh,000h,000h,000h,000h ;   Hex #2
    Db  000h,000h,000h,000h,06Ch,0FEh,0FEh,0FEh,0FEh,07Ch,038h,010h,000h,000h,000h,000h ;   Hex #3
    Db  000h,000h,000h,000h,010h,038h,07Ch,0FEh,07Ch,038h,010h,000h,000h,000h,000h,000h ;   Hex #4
    Db  000h,000h,000h,018h,03Ch,03Ch,0E7h,0E7h,0E7h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #5
    Db  000h,000h,000h,018h,03Ch,07Eh,0FFh,0FFh,07Eh,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #6
    Db  000h,000h,000h,000h,000h,000h,018h,03Ch,03Ch,018h,000h,000h,000h,000h,000h,000h ;   Hex #7
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0E7h,0C3h,0C3h,0E7h,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #8
    Db  000h,000h,000h,000h,000h,03Ch,066h,042h,042h,066h,03Ch,000h,000h,000h,000h,000h ;   Hex #9
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0C3h,099h,0BDh,0BDh,099h,0C3h,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #A
    Db  000h,000h,01Eh,00Eh,01Ah,032h,078h,0CCh,0CCh,0CCh,0CCh,078h,000h,000h,000h,000h ;   Hex #B
    Db  000h,000h,03Ch,066h,066h,066h,066h,03Ch,018h,07Eh,018h,018h,000h,000h,000h,000h ;   Hex #C
    Db  000h,000h,03Fh,033h,03Fh,030h,030h,030h,030h,070h,0F0h,0E0h,000h,000h,000h,000h ;   Hex #D
    Db  000h,000h,07Fh,063h,07Fh,063h,063h,063h,063h,067h,0E7h,0E6h,0C0h,000h,000h,000h ;   Hex #E
    Db  000h,000h,000h,018h,018h,0DBh,03Ch,0E7h,03Ch,0DBh,018h,018h,000h,000h,000h,000h ;   Hex #F
    Db  000h,080h,0C0h,0E0h,0F0h,0F8h,0FEh,0F8h,0F0h,0E0h,0C0h,080h,000h,000h,000h,000h ;   Hex #10
    Db  000h,002h,006h,00Eh,01Eh,03Eh,0FEh,03Eh,01Eh,00Eh,006h,002h,000h,000h,000h,000h ;   Hex #11
    Db  000h,000h,018h,03Ch,07Eh,018h,018h,018h,07Eh,03Ch,018h,000h,000h,000h,000h,000h ;   Hex #12
    Db  000h,000h,066h,066h,066h,066h,066h,066h,066h,000h,066h,066h,000h,000h,000h,000h ;   Hex #13
    Db  000h,000h,07Fh,0DBh,0DBh,0DBh,07Bh,01Bh,01Bh,01Bh,01Bh,01Bh,000h,000h,000h,000h ;   Hex #14
    Db  000h,07Ch,0C6h,060h,038h,06Ch,0C6h,0C6h,06Ch,038h,00Ch,0C6h,07Ch,000h,000h,000h ;   Hex #15
    Db  000h,000h,000h,000h,000h,000h,000h,000h,0FEh,0FEh,0FEh,0FEh,000h,000h,000h,000h ;   Hex #16
    Db  000h,000h,018h,03Ch,07Eh,018h,018h,018h,07Eh,03Ch,018h,07Eh,000h,000h,000h,000h ;   Hex #17
    Db  000h,000h,018h,03Ch,07Eh,018h,018h,018h,018h,018h,018h,018h,000h,000h,000h,000h ;   Hex #18
    Db  000h,000h,018h,018h,018h,018h,018h,018h,018h,07Eh,03Ch,018h,000h,000h,000h,000h ;   Hex #19
    Db  000h,000h,000h,000h,000h,018h,00Ch,0FEh,00Ch,018h,000h,000h,000h,000h,000h,000h ;   Hex #1A
    Db  000h,000h,000h,000h,000h,030h,060h,0FEh,060h,030h,000h,000h,000h,000h,000h,000h ;   Hex #1B
    Db  000h,000h,000h,000h,000h,000h,0C0h,0C0h,0C0h,0FEh,000h,000h,000h,000h,000h,000h ;   Hex #1C
    Db  000h,000h,000h,000h,000h,028h,06Ch,0FEh,06Ch,028h,000h,000h,000h,000h,000h,000h ;   Hex #1D
    Db  000h,000h,000h,000h,010h,038h,038h,07Ch,07Ch,0FEh,0FEh,000h,000h,000h,000h,000h ;   Hex #1E
    Db  000h,000h,000h,000h,0FEh,0FEh,07Ch,07Ch,038h,038h,010h,000h,000h,000h,000h,000h ;   Hex #1F
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #20
    Db  000h,000h,018h,03Ch,03Ch,03Ch,018h,018h,018h,000h,018h,018h,000h,000h,000h,000h ;   Hex #21
    Db  000h,066h,066h,066h,024h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #22
    Db  000h,000h,000h,06Ch,06Ch,0FEh,06Ch,06Ch,06Ch,0FEh,06Ch,06Ch,000h,000h,000h,000h ;   Hex #23
    Db  018h,018h,07Ch,0C6h,0C2h,0C0h,07Ch,006h,006h,086h,0C6h,07Ch,018h,018h,000h,000h ;   Hex #24
    Db  000h,000h,000h,000h,0C2h,0C6h,00Ch,018h,030h,060h,0C6h,086h,000h,000h,000h,000h ;   Hex #25
    Db  000h,000h,038h,06Ch,06Ch,038h,076h,0DCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #26
    Db  000h,030h,030h,030h,060h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #27
    Db  000h,000h,00Ch,018h,030h,030h,030h,030h,030h,030h,018h,00Ch,000h,000h,000h,000h ;   Hex #28
    Db  000h,000h,030h,018h,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,018h,030h,000h,000h,000h,000h ;   Hex #29
    Db  000h,000h,000h,000h,000h,066h,03Ch,0FFh,03Ch,066h,000h,000h,000h,000h,000h,000h ;   Hex #2A
    Db  000h,000h,000h,000h,000h,018h,018h,07Eh,018h,018h,000h,000h,000h,000h,000h,000h ;   Hex #2B
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,018h,018h,030h,000h,000h,000h ;   Hex #2C
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #2D
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,018h,000h,000h,000h,000h ;   Hex #2E
    Db  000h,000h,000h,000h,002h,006h,00Ch,018h,030h,060h,0C0h,080h,000h,000h,000h,000h ;   Hex #2F
    Db  000h,000h,038h,06Ch,0C6h,0C6h,0D6h,0D6h,0C6h,0C6h,06Ch,038h,000h,000h,000h,000h ;   Hex #30
    Db  000h,000h,018h,038h,078h,018h,018h,018h,018h,018h,018h,07Eh,000h,000h,000h,000h ;   Hex #31
    Db  000h,000h,07Ch,0C6h,006h,00Ch,018h,030h,060h,0C0h,0C6h,0FEh,000h,000h,000h,000h ;   Hex #32
    Db  000h,000h,07Ch,0C6h,006h,006h,03Ch,006h,006h,006h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #33
    Db  000h,000h,00Ch,01Ch,03Ch,06Ch,0CCh,0FEh,00Ch,00Ch,00Ch,01Eh,000h,000h,000h,000h ;   Hex #34
    Db  000h,000h,0FEh,0C0h,0C0h,0C0h,0FCh,006h,006h,006h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #35
    Db  000h,000h,038h,060h,0C0h,0C0h,0FCh,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #36
    Db  000h,000h,0FEh,0C6h,006h,006h,00Ch,018h,030h,030h,030h,030h,000h,000h,000h,000h ;   Hex #37
    Db  000h,000h,07Ch,0C6h,0C6h,0C6h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #38
    Db  000h,000h,07Ch,0C6h,0C6h,0C6h,07Eh,006h,006h,006h,00Ch,078h,000h,000h,000h,000h ;   Hex #39
    Db  000h,000h,000h,000h,018h,018h,000h,000h,000h,018h,018h,000h,000h,000h,000h,000h ;   Hex #3A
    Db  000h,000h,000h,000h,018h,018h,000h,000h,000h,018h,018h,030h,000h,000h,000h,000h ;   Hex #3B
    Db  000h,000h,000h,006h,00Ch,018h,030h,060h,030h,018h,00Ch,006h,000h,000h,000h,000h ;   Hex #3C
    Db  000h,000h,000h,000h,000h,07Eh,000h,000h,07Eh,000h,000h,000h,000h,000h,000h,000h ;   Hex #3D
    Db  000h,000h,000h,060h,030h,018h,00Ch,006h,00Ch,018h,030h,060h,000h,000h,000h,000h ;   Hex #3E
    Db  000h,000h,07Ch,0C6h,0C6h,00Ch,018h,018h,018h,000h,018h,018h,000h,000h,000h,000h ;   Hex #3F
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0DEh,0DEh,0DEh,0DCh,0C0h,07Ch,000h,000h,000h,000h ;   Hex #40
    Db  000h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #41
    Db  000h,000h,0FCh,066h,066h,066h,07Ch,066h,066h,066h,066h,0FCh,000h,000h,000h,000h ;   Hex #42
    Db  000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0C0h,0C0h,0C2h,066h,03Ch,000h,000h,000h,000h ;   Hex #43
    Db  000h,000h,0F8h,06Ch,066h,066h,066h,066h,066h,066h,06Ch,0F8h,000h,000h,000h,000h ;   Hex #44
    Db  000h,000h,0FEh,066h,062h,068h,078h,068h,060h,062h,066h,0FEh,000h,000h,000h,000h ;   Hex #45
    Db  000h,000h,0FEh,066h,062h,068h,078h,068h,060h,060h,060h,0F0h,000h,000h,000h,000h ;   Hex #46
    Db  000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0DEh,0C6h,0C6h,066h,03Ah,000h,000h,000h,000h ;   Hex #47
    Db  000h,000h,0C6h,0C6h,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #48
    Db  000h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #49
    Db  000h,000h,01Eh,00Ch,00Ch,00Ch,00Ch,00Ch,0CCh,0CCh,0CCh,078h,000h,000h,000h,000h ;   Hex #4A
    Db  000h,000h,0E6h,066h,066h,06Ch,078h,078h,06Ch,066h,066h,0E6h,000h,000h,000h,000h ;   Hex #4B
    Db  000h,000h,0F0h,060h,060h,060h,060h,060h,060h,062h,066h,0FEh,000h,000h,000h,000h ;   Hex #4C
    Db  000h,000h,0C6h,0EEh,0FEh,0FEh,0D6h,0C6h,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #4D
    Db  000h,000h,0C6h,0E6h,0F6h,0FEh,0DEh,0CEh,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #4E
    Db  000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #4F
    Db  000h,000h,0FCh,066h,066h,066h,07Ch,060h,060h,060h,060h,0F0h,000h,000h,000h,000h ;   Hex #50
    Db  000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0D6h,0DEh,07Ch,00Ch,00Eh,000h,000h ;   Hex #51
    Db  000h,000h,0FCh,066h,066h,066h,07Ch,06Ch,066h,066h,066h,0E6h,000h,000h,000h,000h ;   Hex #52
    Db  000h,000h,07Ch,0C6h,0C6h,060h,038h,00Ch,006h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #53
    Db  000h,000h,07Eh,07Eh,05Ah,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #54
    Db  000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #55
    Db  000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,06Ch,038h,010h,000h,000h,000h,000h ;   Hex #56
    Db  000h,000h,0C6h,0C6h,0C6h,0C6h,0D6h,0D6h,0D6h,0FEh,0EEh,06Ch,000h,000h,000h,000h ;   Hex #57
    Db  000h,000h,0C6h,0C6h,06Ch,07Ch,038h,038h,07Ch,06Ch,0C6h,0C6h,000h,000h,000h,000h ;   Hex #58
    Db  000h,000h,066h,066h,066h,066h,03Ch,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #59
    Db  000h,000h,0FEh,0C6h,086h,00Ch,018h,030h,060h,0C2h,0C6h,0FEh,000h,000h,000h,000h ;   Hex #5A
    Db  000h,000h,03Ch,030h,030h,030h,030h,030h,030h,030h,030h,03Ch,000h,000h,000h,000h ;   Hex #5B
    Db  000h,000h,000h,080h,0C0h,0E0h,070h,038h,01Ch,00Eh,006h,002h,000h,000h,000h,000h ;   Hex #5C
    Db  000h,000h,03Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,03Ch,000h,000h,000h,000h ;   Hex #5D
    Db  010h,038h,06Ch,0C6h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #5E
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,0FFh,000h,000h ;   Hex #5F
    Db  000h,030h,018h,00Ch,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #60
    Db  000h,000h,000h,000h,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #61
    Db  000h,000h,0E0h,060h,060h,078h,06Ch,066h,066h,066h,066h,07Ch,000h,000h,000h,000h ;   Hex #62
    Db  000h,000h,000h,000h,000h,07Ch,0C6h,0C0h,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #63
    Db  000h,000h,01Ch,00Ch,00Ch,03Ch,06Ch,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #64
    Db  000h,000h,000h,000h,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #65
    Db  000h,000h,01Ch,036h,032h,030h,078h,030h,030h,030h,030h,078h,000h,000h,000h,000h ;   Hex #66
    Db  000h,000h,000h,000h,000h,076h,0CCh,0CCh,0CCh,0CCh,0CCh,07Ch,00Ch,0CCh,078h,000h ;   Hex #67
    Db  000h,000h,0E0h,060h,060h,06Ch,076h,066h,066h,066h,066h,0E6h,000h,000h,000h,000h ;   Hex #68
    Db  000h,000h,018h,018h,000h,038h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #69
    Db  000h,000h,006h,006h,000h,00Eh,006h,006h,006h,006h,006h,006h,066h,066h,03Ch,000h ;   Hex #6A
    Db  000h,000h,0E0h,060h,060h,066h,06Ch,078h,078h,06Ch,066h,0E6h,000h,000h,000h,000h ;   Hex #6B
    Db  000h,000h,038h,018h,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #6C
    Db  000h,000h,000h,000h,000h,0ECh,0FEh,0D6h,0D6h,0D6h,0D6h,0C6h,000h,000h,000h,000h ;   Hex #6D
    Db  000h,000h,000h,000h,000h,0DCh,066h,066h,066h,066h,066h,066h,000h,000h,000h,000h ;   Hex #6E
    Db  000h,000h,000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #6F
    Db  000h,000h,000h,000h,000h,0DCh,066h,066h,066h,066h,066h,07Ch,060h,060h,0F0h,000h ;   Hex #70
    Db  000h,000h,000h,000h,000h,076h,0CCh,0CCh,0CCh,0CCh,0CCh,07Ch,00Ch,00Ch,01Eh,000h ;   Hex #71
    Db  000h,000h,000h,000h,000h,0DCh,076h,066h,060h,060h,060h,0F0h,000h,000h,000h,000h ;   Hex #72
    Db  000h,000h,000h,000h,000h,07Ch,0C6h,060h,038h,00Ch,0C6h,07Ch,000h,000h,000h,000h ;   Hex #73
    Db  000h,000h,010h,030h,030h,0FCh,030h,030h,030h,030h,036h,01Ch,000h,000h,000h,000h ;   Hex #74
    Db  000h,000h,000h,000h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #75
    Db  000h,000h,000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,06Ch,038h,000h,000h,000h,000h ;   Hex #76
    Db  000h,000h,000h,000h,000h,0C6h,0C6h,0D6h,0D6h,0D6h,0FEh,06Ch,000h,000h,000h,000h ;   Hex #77
    Db  000h,000h,000h,000h,000h,0C6h,06Ch,038h,038h,038h,06Ch,0C6h,000h,000h,000h,000h ;   Hex #78
    Db  000h,000h,000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Eh,006h,00Ch,0F8h,000h ;   Hex #79
    Db  000h,000h,000h,000h,000h,0FEh,0CCh,018h,030h,060h,0C6h,0FEh,000h,000h,000h,000h ;   Hex #7A
    Db  000h,000h,00Eh,018h,018h,018h,070h,018h,018h,018h,018h,00Eh,000h,000h,000h,000h ;   Hex #7B
    Db  000h,000h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,000h,000h,000h,000h ;   Hex #7C
    Db  000h,000h,070h,018h,018h,018h,00Eh,018h,018h,018h,018h,070h,000h,000h,000h,000h ;   Hex #7D
    Db  000h,076h,0DCh,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #7E
    Db  000h,000h,000h,000h,010h,038h,06Ch,0C6h,0C6h,0C6h,0FEh,000h,000h,000h,000h,000h ;   Hex #7F
    Db  000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0C0h,0C0h,0C2h,066h,03Ch,018h,070h,000h,000h ;   Hex #80
    Db  000h,000h,0CCh,000h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #81
    Db  000h,00Ch,018h,030h,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #82
    Db  000h,010h,038h,06Ch,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #83
    Db  000h,000h,0CCh,000h,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #84
    Db  000h,060h,030h,018h,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #85
    Db  000h,038h,06Ch,038h,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #86
    Db  000h,000h,000h,000h,000h,07Ch,0C6h,0C0h,0C0h,0C0h,0C6h,07Ch,018h,070h,000h,000h ;   Hex #87
    Db  000h,010h,038h,06Ch,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #88
    Db  000h,000h,0C6h,000h,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #89
    Db  000h,060h,030h,018h,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #8A
    Db  000h,000h,066h,000h,000h,038h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #8B
    Db  000h,018h,03Ch,066h,000h,038h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #8C
    Db  000h,060h,030h,018h,000h,038h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #8D
    Db  000h,0C6h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #8E
    Db  038h,06Ch,038h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #8F
    Db  00Ch,018h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h,000h,000h ;   Hex #90
    Db  000h,000h,000h,000h,000h,0ECh,036h,036h,07Eh,0D8h,0D8h,06Eh,000h,000h,000h,000h ;   Hex #91
    Db  000h,000h,03Eh,06Ch,0CCh,0CCh,0FEh,0CCh,0CCh,0CCh,0CCh,0CEh,000h,000h,000h,000h ;   Hex #92
    Db  000h,010h,038h,06Ch,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #93
    Db  000h,000h,0C6h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #94
    Db  000h,060h,030h,018h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #95
    Db  000h,030h,078h,0CCh,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #96
    Db  000h,060h,030h,018h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #97
    Db  000h,000h,0C6h,000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Eh,006h,00Ch,078h,000h ;   Hex #98
    Db  000h,0C6h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #99
    Db  000h,0C6h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #9A
    Db  000h,000h,000h,000h,000h,07Ch,0C6h,0CEh,0D6h,0E6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #9B
    Db  000h,038h,06Ch,064h,060h,0F0h,060h,060h,060h,060h,0E6h,0FCh,000h,000h,000h,000h ;   Hex #9C
    Db  000h,004h,07Ch,0CEh,0CEh,0D6h,0D6h,0D6h,0D6h,0E6h,0E6h,07Ch,040h,000h,000h,000h ;   Hex #9D
    Db  000h,0F8h,0CCh,0CCh,0F8h,0C4h,0CCh,0DEh,0CCh,0CCh,0CCh,0C6h,000h,000h,000h,000h ;   Hex #9E
    Db  000h,00Eh,01Bh,018h,018h,018h,07Eh,018h,018h,018h,0D8h,070h,000h,000h,000h,000h ;   Hex #9F
    Db  000h,018h,030h,060h,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #A0
    Db  000h,00Ch,018h,030h,000h,038h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #A1
    Db  000h,018h,030h,060h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #A2
    Db  000h,018h,030h,060h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #A3
    Db  000h,000h,076h,0DCh,000h,0DCh,066h,066h,066h,066h,066h,066h,000h,000h,000h,000h ;   Hex #A4
    Db  076h,0DCh,000h,0C6h,0E6h,0F6h,0FEh,0DEh,0CEh,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #A5
    Db  000h,000h,03Ch,06Ch,06Ch,03Eh,000h,07Eh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #A6
    Db  000h,000h,038h,06Ch,06Ch,038h,000h,07Ch,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #A7
    Db  000h,000h,030h,030h,000h,030h,030h,060h,0C0h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #A8
    Db  000h,000h,000h,000h,000h,000h,0FEh,0C0h,0C0h,0C0h,0C0h,000h,000h,000h,000h,000h ;   Hex #A9
    Db  000h,000h,000h,000h,000h,000h,0FEh,006h,006h,006h,006h,000h,000h,000h,000h,000h ;   Hex #AA
    Db  000h,060h,0E0h,062h,066h,06Ch,018h,030h,060h,0DCh,086h,00Ch,018h,03Eh,000h,000h ;   Hex #AB
    Db  000h,060h,0E0h,062h,066h,06Ch,018h,030h,066h,0CEh,09Ah,03Fh,006h,006h,000h,000h ;   Hex #AC
    Db  000h,000h,018h,018h,000h,018h,018h,018h,03Ch,03Ch,03Ch,018h,000h,000h,000h,000h ;   Hex #AD
    Db  000h,000h,000h,000h,000h,036h,06Ch,0D8h,06Ch,036h,000h,000h,000h,000h,000h,000h ;   Hex #AE
    Db  000h,000h,000h,000h,0C6h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,0C6h,000h,000h,000h,000h ;   Hex #AF
    Db  011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h ;   Hex #B0
    Db  055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh ;   Hex #B1
    Db  0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h ;   Hex #B2
    Db  018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B3
    Db  018h,018h,018h,018h,018h,018h,018h,0F8h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B4
    Db  018h,018h,018h,018h,018h,0F8h,018h,0F8h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B5
    Db  036h,036h,036h,036h,036h,036h,036h,0F6h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #B6
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #B7
    Db  000h,000h,000h,000h,000h,0F8h,018h,0F8h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B8
    Db  036h,036h,036h,036h,036h,0F6h,006h,0F6h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #B9
    Db  036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #BA
    Db  000h,000h,000h,000h,000h,0FEh,006h,0F6h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #BB
    Db  036h,036h,036h,036h,036h,0F6h,006h,0FEh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #BC
    Db  036h,036h,036h,036h,036h,036h,036h,0FEh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #BD
    Db  018h,018h,018h,018h,018h,0F8h,018h,0F8h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #BE
    Db  000h,000h,000h,000h,000h,000h,000h,0F8h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #BF
    Db  018h,018h,018h,018h,018h,018h,018h,01Fh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #C0
    Db  018h,018h,018h,018h,018h,018h,018h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #C1
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #C2
    Db  018h,018h,018h,018h,018h,018h,018h,01Fh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #C3
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #C4
    Db  018h,018h,018h,018h,018h,018h,018h,0FFh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #C5
    Db  018h,018h,018h,018h,018h,01Fh,018h,01Fh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #C6
    Db  036h,036h,036h,036h,036h,036h,036h,037h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #C7
    Db  036h,036h,036h,036h,036h,037h,030h,03Fh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #C8
    Db  000h,000h,000h,000h,000h,03Fh,030h,037h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #C9
    Db  036h,036h,036h,036h,036h,0F7h,000h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #CA
    Db  000h,000h,000h,000h,000h,0FFh,000h,0F7h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #CB
    Db  036h,036h,036h,036h,036h,037h,030h,037h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #CC
    Db  000h,000h,000h,000h,000h,0FFh,000h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #CD
    Db  036h,036h,036h,036h,036h,0F7h,000h,0F7h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #CE
    Db  018h,018h,018h,018h,018h,0FFh,000h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #CF
    Db  036h,036h,036h,036h,036h,036h,036h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #D0
    Db  000h,000h,000h,000h,000h,0FFh,000h,0FFh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #D1
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #D2
    Db  036h,036h,036h,036h,036h,036h,036h,03Fh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #D3
    Db  018h,018h,018h,018h,018h,01Fh,018h,01Fh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #D4
    Db  000h,000h,000h,000h,000h,01Fh,018h,01Fh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #D5
    Db  000h,000h,000h,000h,000h,000h,000h,03Fh,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #D6
    Db  036h,036h,036h,036h,036h,036h,036h,0FFh,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #D7
    Db  018h,018h,018h,018h,018h,0FFh,018h,0FFh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #D8
    Db  018h,018h,018h,018h,018h,018h,018h,0F8h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #D9
    Db  000h,000h,000h,000h,000h,000h,000h,01Fh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #DA
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DB
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DC
    Db  0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h ;   Hex #DD
    Db  00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh ;   Hex #DE
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #DF
    Db  000h,000h,000h,000h,000h,076h,0DCh,0D8h,0D8h,0D8h,0DCh,076h,000h,000h,000h,000h ;   Hex #E0
    Db  000h,000h,078h,0CCh,0CCh,0CCh,0D8h,0CCh,0C6h,0C6h,0C6h,0CCh,000h,000h,000h,000h ;   Hex #E1
    Db  000h,000h,0FEh,0C6h,0C6h,0C0h,0C0h,0C0h,0C0h,0C0h,0C0h,0C0h,000h,000h,000h,000h ;   Hex #E2
    Db  000h,000h,000h,000h,000h,0FEh,06Ch,06Ch,06Ch,06Ch,06Ch,06Ch,000h,000h,000h,000h ;   Hex #E3
    Db  000h,000h,0FEh,0C6h,060h,030h,018h,018h,030h,060h,0C6h,0FEh,000h,000h,000h,000h ;   Hex #E4
    Db  000h,000h,000h,000h,000h,07Eh,0D8h,0D8h,0D8h,0D8h,0D8h,070h,000h,000h,000h,000h ;   Hex #E5
    Db  000h,000h,000h,000h,000h,066h,066h,066h,066h,066h,066h,07Ch,060h,060h,0C0h,000h ;   Hex #E6
    Db  000h,000h,000h,000h,076h,0DCh,018h,018h,018h,018h,018h,018h,000h,000h,000h,000h ;   Hex #E7
    Db  000h,000h,07Eh,018h,03Ch,066h,066h,066h,066h,03Ch,018h,07Eh,000h,000h,000h,000h ;   Hex #E8
    Db  000h,000h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,06Ch,038h,000h,000h,000h,000h ;   Hex #E9
    Db  000h,000h,038h,06Ch,0C6h,0C6h,0C6h,06Ch,06Ch,06Ch,06Ch,0EEh,000h,000h,000h,000h ;   Hex #EA
    Db  000h,000h,01Eh,030h,018h,00Ch,03Eh,066h,066h,066h,066h,03Ch,000h,000h,000h,000h ;   Hex #EB
    Db  000h,000h,000h,000h,000h,07Eh,0DBh,0DBh,0DBh,07Eh,000h,000h,000h,000h,000h,000h ;   Hex #EC
    Db  000h,000h,000h,003h,006h,07Eh,0DBh,0DBh,0F3h,07Eh,060h,0C0h,000h,000h,000h,000h ;   Hex #ED
    Db  000h,000h,01Ch,030h,060h,060h,07Ch,060h,060h,060h,030h,01Ch,000h,000h,000h,000h ;   Hex #EE
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #EF
    Db  000h,000h,000h,000h,0FEh,000h,000h,0FEh,000h,000h,0FEh,000h,000h,000h,000h,000h ;   Hex #F0
    Db  000h,000h,000h,000h,018h,018h,07Eh,018h,018h,000h,000h,07Eh,000h,000h,000h,000h ;   Hex #F1
    Db  000h,000h,000h,030h,018h,00Ch,006h,00Ch,018h,030h,000h,07Eh,000h,000h,000h,000h ;   Hex #F2
    Db  000h,000h,000h,00Ch,018h,030h,060h,030h,018h,00Ch,000h,07Eh,000h,000h,000h,000h ;   Hex #F3
    Db  000h,000h,00Eh,01Bh,01Bh,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #F4
    Db  018h,018h,018h,018h,018h,018h,018h,018h,018h,0D8h,0D8h,0D8h,070h,000h,000h,000h ;   Hex #F5
    Db  000h,000h,000h,000h,000h,018h,000h,07Eh,000h,018h,000h,000h,000h,000h,000h,000h ;   Hex #F6
    Db  000h,000h,000h,000h,000h,076h,0DCh,000h,076h,0DCh,000h,000h,000h,000h,000h,000h ;   Hex #F7
    Db  000h,038h,06Ch,06Ch,038h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #F8
    Db  000h,000h,000h,000h,000h,000h,000h,018h,018h,000h,000h,000h,000h,000h,000h,000h ;   Hex #F9
    Db  000h,000h,000h,000h,000h,000h,000h,018h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FA
    Db  000h,00Fh,00Ch,00Ch,00Ch,00Ch,00Ch,0ECh,06Ch,06Ch,03Ch,01Ch,000h,000h,000h,000h ;   Hex #FB
    Db  000h,06Ch,036h,036h,036h,036h,036h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FC
    Db  000h,03Ch,066h,00Ch,018h,032h,07Eh,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FD
    Db  000h,000h,000h,000h,07Eh,07Eh,07Eh,07Eh,07Eh,07Eh,07Eh,000h,000h,000h,000h,000h ;   Hex #FE
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FF


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\ega\865-8x8.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
;***************************************************
;  CHARACTER FONT FILE
;  Source Assembler File
;
;	 CODE PAGE: 865
;  FONT RESOLUTION: 8 x 8
;
;     DATE CREATED:05-28-1987
;
;
; Output file from: MULTIFON, Version 1A
;
;***************************************************
    Db	000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #0
    Db	07Eh,081h,0A5h,081h,0BDh,099h,081h,07Eh ;   Hex #1
    Db	07Eh,0FFh,0DBh,0FFh,0C3h,0E7h,0FFh,07Eh ;   Hex #2
    Db	06Ch,0FEh,0FEh,0FEh,07Ch,038h,010h,000h ;   Hex #3
    Db	010h,038h,07Ch,0FEh,07Ch,038h,010h,000h ;   Hex #4
    Db	038h,07Ch,038h,0FEh,0FEh,0D6h,010h,038h ;   Hex #5
    Db	010h,038h,07Ch,0FEh,0FEh,07Ch,010h,038h ;   Hex #6
    Db	000h,000h,018h,03Ch,03Ch,018h,000h,000h ;   Hex #7
    Db	0FFh,0FFh,0E7h,0C3h,0C3h,0E7h,0FFh,0FFh ;   Hex #8
    Db	000h,03Ch,066h,042h,042h,066h,03Ch,000h ;   Hex #9
    Db	0FFh,0C3h,099h,0BDh,0BDh,099h,0C3h,0FFh ;   Hex #A
    Db	00Fh,007h,00Fh,07Dh,0CCh,0CCh,0CCh,078h ;   Hex #B
    Db	03Ch,066h,066h,066h,03Ch,018h,07Eh,018h ;   Hex #C
    Db	03Fh,033h,03Fh,030h,030h,070h,0F0h,0E0h ;   Hex #D
    Db	07Fh,063h,07Fh,063h,063h,067h,0E6h,0C0h ;   Hex #E
    Db	018h,0DBh,03Ch,0E7h,0E7h,03Ch,0DBh,018h ;   Hex #F
    Db	080h,0E0h,0F8h,0FEh,0F8h,0E0h,080h,000h ;   Hex #10
    Db	002h,00Eh,03Eh,0FEh,03Eh,00Eh,002h,000h ;   Hex #11
    Db	018h,03Ch,07Eh,018h,018h,07Eh,03Ch,018h ;   Hex #12
    Db	066h,066h,066h,066h,066h,000h,066h,000h ;   Hex #13
    Db	07Fh,0DBh,0DBh,07Bh,01Bh,01Bh,01Bh,000h ;   Hex #14
    Db	03Eh,061h,03Ch,066h,066h,03Ch,086h,07Ch ;   Hex #15
    Db	000h,000h,000h,000h,07Eh,07Eh,07Eh,000h ;   Hex #16
    Db	018h,03Ch,07Eh,018h,07Eh,03Ch,018h,0FFh ;   Hex #17
    Db	018h,03Ch,07Eh,018h,018h,018h,018h,000h ;   Hex #18
    Db	018h,018h,018h,018h,07Eh,03Ch,018h,000h ;   Hex #19
    Db	000h,018h,00Ch,0FEh,00Ch,018h,000h,000h ;   Hex #1A
    Db	000h,030h,060h,0FEh,060h,030h,000h,000h ;   Hex #1B
    Db	000h,000h,0C0h,0C0h,0C0h,0FEh,000h,000h ;   Hex #1C
    Db	000h,024h,066h,0FFh,066h,024h,000h,000h ;   Hex #1D
    Db	000h,018h,03Ch,07Eh,0FFh,0FFh,000h,000h ;   Hex #1E
    Db	000h,0FFh,0FFh,07Eh,03Ch,018h,000h,000h ;   Hex #1F
    Db	000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #20
    Db	018h,03Ch,03Ch,018h,018h,000h,018h,000h ;   Hex #21
    Db	066h,066h,024h,000h,000h,000h,000h,000h ;   Hex #22
    Db	06Ch,06Ch,0FEh,06Ch,0FEh,06Ch,06Ch,000h ;   Hex #23
    Db	018h,03Eh,060h,03Ch,006h,07Ch,018h,000h ;   Hex #24
    Db	000h,0C6h,0CCh,018h,030h,066h,0C6h,000h ;   Hex #25
    Db	038h,06Ch,038h,076h,0DCh,0CCh,076h,000h ;   Hex #26
    Db	018h,018h,030h,000h,000h,000h,000h,000h ;   Hex #27
    Db	00Ch,018h,030h,030h,030h,018h,00Ch,000h ;   Hex #28
    Db	030h,018h,00Ch,00Ch,00Ch,018h,030h,000h ;   Hex #29
    Db	000h,066h,03Ch,0FFh,03Ch,066h,000h,000h ;   Hex #2A
    Db	000h,018h,018h,07Eh,018h,018h,000h,000h ;   Hex #2B
    Db	000h,000h,000h,000h,000h,018h,018h,030h ;   Hex #2C
    Db	000h,000h,000h,07Eh,000h,000h,000h,000h ;   Hex #2D
    Db	000h,000h,000h,000h,000h,018h,018h,000h ;   Hex #2E
    Db	006h,00Ch,018h,030h,060h,0C0h,080h,000h ;   Hex #2F
    Db	038h,06Ch,0C6h,0D6h,0C6h,06Ch,038h,000h ;   Hex #30
    Db	018h,038h,018h,018h,018h,018h,07Eh,000h ;   Hex #31
    Db	07Ch,0C6h,006h,01Ch,030h,066h,0FEh,000h ;   Hex #32
    Db	07Ch,0C6h,006h,03Ch,006h,0C6h,07Ch,000h ;   Hex #33
    Db	01Ch,03Ch,06Ch,0CCh,0FEh,00Ch,01Eh,000h ;   Hex #34
    Db	0FEh,0C0h,0C0h,0FCh,006h,0C6h,07Ch,000h ;   Hex #35
    Db	038h,060h,0C0h,0FCh,0C6h,0C6h,07Ch,000h ;   Hex #36
    Db	0FEh,0C6h,00Ch,018h,030h,030h,030h,000h ;   Hex #37
    Db	07Ch,0C6h,0C6h,07Ch,0C6h,0C6h,07Ch,000h ;   Hex #38
    Db	07Ch,0C6h,0C6h,07Eh,006h,00Ch,078h,000h ;   Hex #39
    Db	000h,018h,018h,000h,000h,018h,018h,000h ;   Hex #3A
    Db	000h,018h,018h,000h,000h,018h,018h,030h ;   Hex #3B
    Db	006h,00Ch,018h,030h,018h,00Ch,006h,000h ;   Hex #3C
    Db	000h,000h,07Eh,000h,000h,07Eh,000h,000h ;   Hex #3D
    Db	060h,030h,018h,00Ch,018h,030h,060h,000h ;   Hex #3E
    Db	07Ch,0C6h,00Ch,018h,018h,000h,018h,000h ;   Hex #3F
    Db	07Ch,0C6h,0DEh,0DEh,0DEh,0C0h,078h,000h ;   Hex #40
    Db	038h,06Ch,0C6h,0FEh,0C6h,0C6h,0C6h,000h ;   Hex #41
    Db	0FCh,066h,066h,07Ch,066h,066h,0FCh,000h ;   Hex #42
    Db	03Ch,066h,0C0h,0C0h,0C0h,066h,03Ch,000h ;   Hex #43
    Db	0F8h,06Ch,066h,066h,066h,06Ch,0F8h,000h ;   Hex #44
    Db	0FEh,062h,068h,078h,068h,062h,0FEh,000h ;   Hex #45
    Db	0FEh,062h,068h,078h,068h,060h,0F0h,000h ;   Hex #46
    Db	03Ch,066h,0C0h,0C0h,0CEh,066h,03Ah,000h ;   Hex #47
    Db	0C6h,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h ;   Hex #48
    Db	03Ch,018h,018h,018h,018h,018h,03Ch,000h ;   Hex #49
    Db	01Eh,00Ch,00Ch,00Ch,0CCh,0CCh,078h,000h ;   Hex #4A
    Db	0E6h,066h,06Ch,078h,06Ch,066h,0E6h,000h ;   Hex #4B
    Db	0F0h,060h,060h,060h,062h,066h,0FEh,000h ;   Hex #4C
    Db	0C6h,0EEh,0FEh,0FEh,0D6h,0C6h,0C6h,000h ;   Hex #4D
    Db	0C6h,0E6h,0F6h,0DEh,0CEh,0C6h,0C6h,000h ;   Hex #4E
    Db	07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #4F
    Db	0FCh,066h,066h,07Ch,060h,060h,0F0h,000h ;   Hex #50
    Db	07Ch,0C6h,0C6h,0C6h,0C6h,0CEh,07Ch,00Eh ;   Hex #51
    Db	0FCh,066h,066h,07Ch,06Ch,066h,0E6h,000h ;   Hex #52
    Db	03Ch,066h,030h,018h,00Ch,066h,03Ch,000h ;   Hex #53
    Db	07Eh,07Eh,05Ah,018h,018h,018h,03Ch,000h ;   Hex #54
    Db	0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #55
    Db	0C6h,0C6h,0C6h,0C6h,0C6h,06Ch,038h,000h ;   Hex #56
    Db	0C6h,0C6h,0C6h,0D6h,0D6h,0FEh,06Ch,000h ;   Hex #57
    Db	0C6h,0C6h,06Ch,038h,06Ch,0C6h,0C6h,000h ;   Hex #58
    Db	066h,066h,066h,03Ch,018h,018h,03Ch,000h ;   Hex #59
    Db	0FEh,0C6h,08Ch,018h,032h,066h,0FEh,000h ;   Hex #5A
    Db	03Ch,030h,030h,030h,030h,030h,03Ch,000h ;   Hex #5B
    Db	0C0h,060h,030h,018h,00Ch,006h,002h,000h ;   Hex #5C
    Db	03Ch,00Ch,00Ch,00Ch,00Ch,00Ch,03Ch,000h ;   Hex #5D
    Db	010h,038h,06Ch,0C6h,000h,000h,000h,000h ;   Hex #5E
    Db	000h,000h,000h,000h,000h,000h,000h,0FFh ;   Hex #5F
    Db	030h,018h,00Ch,000h,000h,000h,000h,000h ;   Hex #60
    Db	000h,000h,078h,00Ch,07Ch,0CCh,076h,000h ;   Hex #61
    Db	0E0h,060h,07Ch,066h,066h,066h,0DCh,000h ;   Hex #62
    Db	000h,000h,07Ch,0C6h,0C0h,0C6h,07Ch,000h ;   Hex #63
    Db	01Ch,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h ;   Hex #64
    Db	000h,000h,07Ch,0C6h,0FEh,0C0h,07Ch,000h ;   Hex #65
    Db	03Ch,066h,060h,0F8h,060h,060h,0F0h,000h ;   Hex #66
    Db	000h,000h,076h,0CCh,0CCh,07Ch,00Ch,0F8h ;   Hex #67
    Db	0E0h,060h,06Ch,076h,066h,066h,0E6h,000h ;   Hex #68
    Db	018h,000h,038h,018h,018h,018h,03Ch,000h ;   Hex #69
    Db	006h,000h,006h,006h,006h,066h,066h,03Ch ;   Hex #6A
    Db	0E0h,060h,066h,06Ch,078h,06Ch,0E6h,000h ;   Hex #6B
    Db	038h,018h,018h,018h,018h,018h,03Ch,000h ;   Hex #6C
    Db	000h,000h,0ECh,0FEh,0D6h,0D6h,0D6h,000h ;   Hex #6D
    Db	000h,000h,0DCh,066h,066h,066h,066h,000h ;   Hex #6E
    Db	000h,000h,07Ch,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #6F
    Db	000h,000h,0DCh,066h,066h,07Ch,060h,0F0h ;   Hex #70
    Db	000h,000h,076h,0CCh,0CCh,07Ch,00Ch,01Eh ;   Hex #71
    Db	000h,000h,0DCh,076h,060h,060h,0F0h,000h ;   Hex #72
    Db	000h,000h,07Eh,0C0h,07Ch,006h,0FCh,000h ;   Hex #73
    Db	030h,030h,0FCh,030h,030h,036h,01Ch,000h ;   Hex #74
    Db	000h,000h,0CCh,0CCh,0CCh,0CCh,076h,000h ;   Hex #75
    Db	000h,000h,0C6h,0C6h,0C6h,06Ch,038h,000h ;   Hex #76
    Db	000h,000h,0C6h,0D6h,0D6h,0FEh,06Ch,000h ;   Hex #77
    Db	000h,000h,0C6h,06Ch,038h,06Ch,0C6h,000h ;   Hex #78
    Db	000h,000h,0C6h,0C6h,0C6h,07Eh,006h,0FCh ;   Hex #79
    Db	000h,000h,07Eh,04Ch,018h,032h,07Eh,000h ;   Hex #7A
    Db	00Eh,018h,018h,070h,018h,018h,00Eh,000h ;   Hex #7B
    Db	018h,018h,018h,018h,018h,018h,018h,000h ;   Hex #7C
    Db	070h,018h,018h,00Eh,018h,018h,070h,000h ;   Hex #7D
    Db	076h,0DCh,000h,000h,000h,000h,000h,000h ;   Hex #7E
    Db	000h,010h,038h,06Ch,0C6h,0C6h,0FEh,000h ;   Hex #7F
    Db	07Ch,0C6h,0C0h,0C0h,0C6h,07Ch,00Ch,078h ;   Hex #80
    Db	0CCh,000h,0CCh,0CCh,0CCh,0CCh,076h,000h ;   Hex #81
    Db	00Ch,018h,07Ch,0C6h,0FEh,0C0h,07Ch,000h ;   Hex #82
    Db	07Ch,082h,078h,00Ch,07Ch,0CCh,076h,000h ;   Hex #83
    Db	0C6h,000h,078h,00Ch,07Ch,0CCh,076h,000h ;   Hex #84
    Db	030h,018h,078h,00Ch,07Ch,0CCh,076h,000h ;   Hex #85
    Db	030h,030h,078h,00Ch,07Ch,0CCh,076h,000h ;   Hex #86
    Db	000h,000h,07Eh,0C0h,0C0h,07Eh,00Ch,038h ;   Hex #87
    Db	07Ch,082h,07Ch,0C6h,0FEh,0C0h,07Ch,000h ;   Hex #88
    Db	0C6h,000h,07Ch,0C6h,0FEh,0C0h,07Ch,000h ;   Hex #89
    Db	030h,018h,07Ch,0C6h,0FEh,0C0h,07Ch,000h ;   Hex #8A
    Db	066h,000h,038h,018h,018h,018h,03Ch,000h ;   Hex #8B
    Db	07Ch,082h,038h,018h,018h,018h,03Ch,000h ;   Hex #8C
    Db	030h,018h,000h,038h,018h,018h,03Ch,000h ;   Hex #8D
    Db	0C6h,038h,06Ch,0C6h,0FEh,0C6h,0C6h,000h ;   Hex #8E
    Db	038h,06Ch,07Ch,0C6h,0FEh,0C6h,0C6h,000h ;   Hex #8F
    Db	018h,030h,0FEh,0C0h,0F8h,0C0h,0FEh,000h ;   Hex #90
    Db	000h,000h,07Eh,012h,0feh,090h,0fEh,000h ;   Hex #91
    Db	03Eh,06Ch,0CCh,0FEh,0CCh,0CCh,0CEh,000h ;   Hex #92
    Db	07Ch,082h,07Ch,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #93
    Db	0C6h,000h,07Ch,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #94
    Db	030h,018h,07Ch,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #95
    Db	078h,084h,000h,0CCh,0CCh,0CCh,076h,000h ;   Hex #96
    Db	060h,030h,0CCh,0CCh,0CCh,0CCh,076h,000h ;   Hex #97
    Db	0C6h,000h,0C6h,0C6h,0C6h,07Eh,006h,0FCh ;   Hex #98
    Db	0C6h,038h,06Ch,0C6h,0C6h,06Ch,038h,000h ;   Hex #99
    Db	0C6h,000h,0C6h,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #9A
    Db	000h,002h,07Ch,0CEh,0D6h,0E6h,07Ch,080h ;   Hex #9B
    Db	038h,06Ch,064h,0F0h,060h,066h,0FCh,000h ;   Hex #9C
    Db	03Ah,06Ch,0CEh,0D6h,0E6h,06Ch,0B8h,000h ;   Hex #9D
    Db	0F8h,0CCh,0CCh,0FAh,0C6h,0CFh,0C6h,0C7h ;   Hex #9E
    Db	00Eh,01Bh,018h,03Ch,018h,0D8h,070h,000h ;   Hex #9F
    Db	018h,030h,078h,00Ch,07Ch,0CCh,076h,000h ;   Hex #A0
    Db	00Ch,018h,000h,038h,018h,018h,03Ch,000h ;   Hex #A1
    Db	00Ch,018h,07Ch,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #A2
    Db	018h,030h,0CCh,0CCh,0CCh,0CCh,076h,000h ;   Hex #A3
    Db	076h,0DCh,000h,0DCh,066h,066h,066h,000h ;   Hex #A4
    Db	076h,0DCh,000h,0E6h,0F6h,0DEh,0CEh,000h ;   Hex #A5
    Db	03Ch,06Ch,06Ch,03Eh,000h,07Eh,000h,000h ;   Hex #A6
    Db	038h,06Ch,06Ch,038h,000h,07Ch,000h,000h ;   Hex #A7
    Db	018h,000h,018h,018h,030h,063h,03Eh,000h ;   Hex #A8
    Db	000h,000h,000h,0FEh,0C0h,0C0h,000h,000h ;   Hex #A9
    Db	000h,000h,000h,0FEh,006h,006h,000h,000h ;   Hex #AA
    Db	063h,0E6h,06Ch,07Eh,033h,066h,0CCh,00Fh ;   Hex #AB
    Db	063h,0E6h,06Ch,07Ah,036h,06Ah,0DFh,006h ;   Hex #AC
    Db	018h,000h,018h,018h,03Ch,03Ch,018h,000h ;   Hex #AD
    Db	000h,033h,066h,0CCh,066h,033h,000h,000h ;   Hex #AE
    Db	000h,0C6h,07Ch,0C6h,0C6h,07Ch,0C6h,000h ;   Hex #AF
    Db	022h,088h,022h,088h,022h,088h,022h,088h ;   Hex #B0
    Db	055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh ;   Hex #B1
    Db	077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh ;   Hex #B2
    Db	018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B3
    Db	018h,018h,018h,018h,0F8h,018h,018h,018h ;   Hex #B4
    Db	018h,018h,0F8h,018h,0F8h,018h,018h,018h ;   Hex #B5
    Db	036h,036h,036h,036h,0F6h,036h,036h,036h ;   Hex #B6
    Db	000h,000h,000h,000h,0FEh,036h,036h,036h ;   Hex #B7
    Db	000h,000h,0F8h,018h,0F8h,018h,018h,018h ;   Hex #B8
    Db	036h,036h,0F6h,006h,0F6h,036h,036h,036h ;   Hex #B9
    Db	036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #BA
    Db	000h,000h,0FEh,006h,0F6h,036h,036h,036h ;   Hex #BB
    Db	036h,036h,0F6h,006h,0FEh,000h,000h,000h ;   Hex #BC
    Db	036h,036h,036h,036h,0FEh,000h,000h,000h ;   Hex #BD
    Db	018h,018h,0F8h,018h,0F8h,000h,000h,000h ;   Hex #BE
    Db	000h,000h,000h,000h,0F8h,018h,018h,018h ;   Hex #BF
    Db	018h,018h,018h,018h,01Fh,000h,000h,000h ;   Hex #C0
    Db	018h,018h,018h,018h,0FFh,000h,000h,000h ;   Hex #C1
    Db	000h,000h,000h,000h,0FFh,018h,018h,018h ;   Hex #C2
    Db	018h,018h,018h,018h,01Fh,018h,018h,018h ;   Hex #C3
    Db	000h,000h,000h,000h,0FFh,000h,000h,000h ;   Hex #C4
    Db	018h,018h,018h,018h,0FFh,018h,018h,018h ;   Hex #C5
    Db	018h,018h,01Fh,018h,01Fh,018h,018h,018h ;   Hex #C6
    Db	036h,036h,036h,036h,037h,036h,036h,036h ;   Hex #C7
    Db	036h,036h,037h,030h,03Fh,000h,000h,000h ;   Hex #C8
    Db	000h,000h,03Fh,030h,037h,036h,036h,036h ;   Hex #C9
    Db	036h,036h,0F7h,000h,0FFh,000h,000h,000h ;   Hex #CA
    Db	000h,000h,0FFh,000h,0F7h,036h,036h,036h ;   Hex #CB
    Db	036h,036h,037h,030h,037h,036h,036h,036h ;   Hex #CC
    Db	000h,000h,0FFh,000h,0FFh,000h,000h,000h ;   Hex #CD
    Db	036h,036h,0F7h,000h,0F7h,036h,036h,036h ;   Hex #CE
    Db	018h,018h,0FFh,000h,0FFh,000h,000h,000h ;   Hex #CF
    Db	036h,036h,036h,036h,0FFh,000h,000h,000h ;   Hex #D0
    Db	000h,000h,0FFh,000h,0FFh,018h,018h,018h ;   Hex #D1
    Db	000h,000h,000h,000h,0FFh,036h,036h,036h ;   Hex #D2
    Db	036h,036h,036h,036h,03Fh,000h,000h,000h ;   Hex #D3
    Db	018h,018h,01Fh,018h,01Fh,000h,000h,000h ;   Hex #D4
    Db	000h,000h,01Fh,018h,01Fh,018h,018h,018h ;   Hex #D5
    Db	000h,000h,000h,000h,03Fh,036h,036h,036h ;   Hex #D6
    Db	036h,036h,036h,036h,0FFh,036h,036h,036h ;   Hex #D7
    Db	018h,018h,0FFh,018h,0FFh,018h,018h,018h ;   Hex #D8
    Db	018h,018h,018h,018h,0F8h,000h,000h,000h ;   Hex #D9
    Db	000h,000h,000h,000h,01Fh,018h,018h,018h ;   Hex #DA
    Db	0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DB
    Db	000h,000h,000h,000h,0FFh,0FFh,0FFh,0FFh ;   Hex #DC
    Db	0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h ;   Hex #DD
    Db	00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh ;   Hex #DE
    Db	0FFh,0FFh,0FFh,0FFh,000h,000h,000h,000h ;   Hex #DF
    Db	000h,000h,076h,0DCh,0C8h,0DCh,076h,000h ;   Hex #E0
    Db	078h,0CCh,0CCh,0D8h,0CCh,0C6h,0CCh,000h ;   Hex #E1
    Db	0FEh,0C6h,0C0h,0C0h,0C0h,0C0h,0C0h,000h ;   Hex #E2
    Db	000h,000h,0FEh,06Ch,06Ch,06Ch,06Ch,000h ;   Hex #E3
    Db	0FEh,0C6h,060h,030h,060h,0C6h,0FEh,000h ;   Hex #E4
    Db	000h,000h,07Eh,0D8h,0D8h,0D8h,070h,000h ;   Hex #E5
    Db	000h,000h,066h,066h,066h,066h,07Ch,0C0h ;   Hex #E6
    Db	000h,076h,0DCh,018h,018h,018h,018h,000h ;   Hex #E7
    Db	07Eh,018h,03Ch,066h,066h,03Ch,018h,07Eh ;   Hex #E8
    Db	038h,06Ch,0C6h,0FEh,0C6h,06Ch,038h,000h ;   Hex #E9
    Db	038h,06Ch,0C6h,0C6h,06Ch,06Ch,0EEh,000h ;   Hex #EA
    Db	00Eh,018h,00Ch,03Eh,066h,066h,03Ch,000h ;   Hex #EB
    Db	000h,000h,07Eh,0DBh,0DBh,07Eh,000h,000h ;   Hex #EC
    Db	006h,00Ch,07Eh,0DBh,0DBh,07Eh,060h,0C0h ;   Hex #ED
    Db	01Eh,030h,060h,07Eh,060h,030h,01Eh,000h ;   Hex #EE
    Db	000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,000h ;   Hex #EF
    Db	000h,0FEh,000h,0FEh,000h,0FEh,000h,000h ;   Hex #F0
    Db	018h,018h,07Eh,018h,018h,000h,07Eh,000h ;   Hex #F1
    Db	030h,018h,00Ch,018h,030h,000h,07Eh,000h ;   Hex #F2
    Db	00Ch,018h,030h,018h,00Ch,000h,07Eh,000h ;   Hex #F3
    Db	00Eh,01Bh,01Bh,018h,018h,018h,018h,018h ;   Hex #F4
    Db	018h,018h,018h,018h,018h,0D8h,0D8h,070h ;   Hex #F5
    Db	000h,018h,000h,07Eh,000h,018h,000h,000h ;   Hex #F6
    Db	000h,076h,0DCh,000h,076h,0DCh,000h,000h ;   Hex #F7
    Db	038h,06Ch,06Ch,038h,000h,000h,000h,000h ;   Hex #F8
    Db	000h,000h,000h,018h,018h,000h,000h,000h ;   Hex #F9
    Db	000h,000h,000h,018h,000h,000h,000h,000h ;   Hex #FA
    Db	00Fh,00Ch,00Ch,00Ch,0ECh,06Ch,03Ch,01Ch ;   Hex #FB
    Db	06Ch,036h,036h,036h,036h,000h,000h,000h ;   Hex #FC
    Db	078h,00Ch,018h,030h,07Ch,000h,000h,000h ;   Hex #FD
    Db	000h,000h,03Ch,03Ch,03Ch,03Ch,000h,000h ;   Hex #FE
    Db	000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FF


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\ega2\437-cpi.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
CODE    SEGMENT BYTE PUBLIC 'CODE'
        ASSUME CS:CODE,DS:CODE

IF1
;        %OUT    EGA.CPI creation file
;        %OUT    .
;        %OUT    CP SRC files:
;        %OUT    .
;        %OUT    .       CODE PAGE:  437
ENDIF

EGA437: DW     LEN_437                  ; SIZE OF ENTRY HEADER
        DW     POST_EGA437,0            ; POINTER TO NEXT HEADER
        DW     1                        ; DEVICE TYPE
        DB     "EGA     "               ; DEVICE SUBTYPE ID
        DW     437                      ; CODE PAGE ID
        DW     3 DUP(0)                 ; RESERVED
        DW     OFFSET DATA437,0         ; POINTER TO FONTS
LEN_437 EQU    ($-EGA437)               ;
                                        ;
DATA437:DW     1                        ; CART/NON-CART
        DW     3                        ; # OF FONTS
        DW     LEN_D437                 ; LENGTH OF DATA
D437:                                   ;
        DB     16,8                     ; CHARACTER BOX SIZE
        DB     0,0                      ; ASPECT RATIO (UNUSED)
        DW     256                      ; NUMBER OF CHARACTERS
                                        ;
        INCLUDE 437-8X16.ASM            ;
                                        ;
        DB     14,8                     ; CHARACTER BOX SIZE
        DB     0,0                      ; ASPECT RATIO (UNUSED)
        DW     256                      ; NUMBER OF CHARACTERS
                                        ;
        INCLUDE 437-8X14.ASM            ;
                                        ;
        DB     8,8                      ; CHARACTER BOX SIZE
        DB     0,0                      ; ASPECT RATIO (UNUSED)
        DW     256                      ; NUMBER OF CHARACTERS
                                        ;
        INCLUDE 437-8X8.ASM             ;
                                        ;
LEN_D437        EQU ($-D437)            ;
                                        ;
POST_EGA437     EQU     $               ;
                                        ;
CODE    ENDS                            ;
        END                             ;


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\ega\cpi-head.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
CODE    SEGMENT BYTE PUBLIC 'CODE'
        ASSUME CS:CODE,DS:CODE

BEGIN:  ORG    0

FNTHEAD:DB     0FFH,"FONT   "           ;FILE TAG
        DB     8 DUP(0)                 ;RESERVED
        DW     1                        ;CNT OF POINTERS IN HEADER
        DB     1                        ;TYPE FOR INFO POINTER
        DW     OFFSET INFO,0            ;POINTER TO INFO IN FILE
INFO:	DW     6			;COUNT OF ENTRIES

CODE    ENDS
        END


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\ega\copyrigh.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
CODE	SEGMENT BYTE PUBLIC 'CODE'
	ASSUME CS:CODE,DS:CODE

	DB	13,10
	DB	"Microsoft MS-DOS (R)  EGA Display Font File",13,10
include copyrigh.inc
	DB	1Ah

CODE	ENDS
	END


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\ega2\437-8x14.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
;***************************************************
;  CHARACTER FONT FILE
;  Source Assembler File
;
;        CODE PAGE: 437 
;  FONT RESOLUTION: 8 x 14 
;
;     DATE CREATED:05-28-1987
;
;
; Output file from: MULTIFON, Version 1A
;
;***************************************************
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #0
    Db  000h,000h,000h,07Eh,081h,0A5h,081h,081h,0BDh,099h,081h,07Eh,000h,000h ;   Hex #1
    Db  000h,000h,000h,07Eh,0FFh,0DBh,0FFh,0FFh,0C3h,0E7h,0FFh,07Eh,000h,000h ;   Hex #2
    Db  000h,000h,000h,000h,06Ch,0FEh,0FEh,0FEh,0FEh,07Ch,038h,010h,000h,000h ;   Hex #3
    Db  000h,000h,000h,000h,010h,038h,07Ch,0FEh,07Ch,038h,010h,000h,000h,000h ;   Hex #4
    Db  000h,000h,000h,018h,03Ch,03Ch,0E7h,0E7h,0E7h,018h,018h,03Ch,000h,000h ;   Hex #5
    Db  000h,000h,000h,018h,03Ch,07Eh,0FFh,0FFh,07Eh,018h,018h,03Ch,000h,000h ;   Hex #6
    Db  000h,000h,000h,000h,000h,000h,018h,03Ch,03Ch,018h,000h,000h,000h,000h ;   Hex #7
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0E7h,0C3h,0C3h,0E7h,0FFh,0FFh,0FFh,0FFh ;   Hex #8
    Db  000h,000h,000h,000h,000h,03Ch,066h,042h,042h,066h,03Ch,000h,000h,000h ;   Hex #9
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0C3h,099h,0BDh,0BDh,099h,0C3h,0FFh,0FFh,0FFh ;   Hex #A
    Db  000h,000h,000h,01Eh,00Eh,01Ah,032h,078h,0CCh,0CCh,0CCh,078h,000h,000h ;   Hex #B
    Db  000h,000h,000h,03Ch,066h,066h,066h,03Ch,018h,07Eh,018h,018h,000h,000h ;   Hex #C
    Db  000h,000h,000h,03Fh,033h,03Fh,030h,030h,030h,070h,0F0h,0E0h,000h,000h ;   Hex #D
    Db  000h,000h,000h,07Fh,063h,07Fh,063h,063h,063h,067h,0E7h,0E6h,0C0h,000h ;   Hex #E
    Db  000h,000h,000h,018h,018h,0DBh,03Ch,0E7h,03Ch,0DBh,018h,018h,000h,000h ;   Hex #F
    Db  000h,000h,000h,080h,0C0h,0E0h,0F8h,0FEh,0F8h,0E0h,0C0h,080h,000h,000h ;   Hex #10
    Db  000h,000h,000h,002h,006h,00Eh,03Eh,0FEh,03Eh,00Eh,006h,002h,000h,000h ;   Hex #11
    Db  000h,000h,000h,018h,03Ch,07Eh,018h,018h,018h,07Eh,03Ch,018h,000h,000h ;   Hex #12
    Db  000h,000h,000h,066h,066h,066h,066h,066h,066h,000h,066h,066h,000h,000h ;   Hex #13
    Db  000h,000h,000h,07Fh,0DBh,0DBh,0DBh,07Bh,01Bh,01Bh,01Bh,01Bh,000h,000h ;   Hex #14
    Db  000h,000h,07Ch,0C6h,060h,038h,06Ch,0C6h,0C6h,06Ch,038h,00Ch,0C6h,07Ch ;   Hex #15
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,0FEh,0FEh,0FEh,000h,000h ;   Hex #16
    Db  000h,000h,000h,018h,03Ch,07Eh,018h,018h,018h,07Eh,03Ch,018h,07Eh,000h ;   Hex #17
    Db  000h,000h,000h,018h,03Ch,07Eh,018h,018h,018h,018h,018h,018h,000h,000h ;   Hex #18
    Db  000h,000h,000h,018h,018h,018h,018h,018h,018h,07Eh,03Ch,018h,000h,000h ;   Hex #19
    Db  000h,000h,000h,000h,000h,018h,00Ch,0FEh,00Ch,018h,000h,000h,000h,000h ;   Hex #1A
    Db  000h,000h,000h,000h,000h,030h,060h,0FEh,060h,030h,000h,000h,000h,000h ;   Hex #1B
    Db  000h,000h,000h,000h,000h,000h,0C0h,0C0h,0C0h,0FEh,000h,000h,000h,000h ;   Hex #1C
    Db  000h,000h,000h,000h,000h,028h,06Ch,0FEh,06Ch,028h,000h,000h,000h,000h ;   Hex #1D
    Db  000h,000h,000h,000h,010h,038h,038h,07Ch,07Ch,0FEh,0FEh,000h,000h,000h ;   Hex #1E
    Db  000h,000h,000h,000h,0FEh,0FEh,07Ch,07Ch,038h,038h,010h,000h,000h,000h ;   Hex #1F
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #20
    Db  000h,000h,000h,018h,03Ch,03Ch,03Ch,018h,018h,000h,018h,018h,000h,000h ;   Hex #21
    Db  000h,066h,066h,066h,024h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #22
    Db  000h,000h,000h,06Ch,06Ch,0FEh,06Ch,06Ch,06Ch,0FEh,06Ch,06Ch,000h,000h ;   Hex #23
    Db  000h,018h,018h,07Ch,0C6h,0C2h,0C0h,07Ch,006h,086h,0C6h,07Ch,018h,018h ;   Hex #24
    Db  000h,000h,000h,000h,000h,0C2h,0C6h,00Ch,018h,030h,066h,0C6h,000h,000h ;   Hex #25
    Db  000h,000h,000h,038h,06Ch,06Ch,038h,076h,0DCh,0CCh,0CCh,076h,000h,000h ;   Hex #26
    Db  000h,018h,018h,018h,030h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #27
    Db  000h,000h,000h,00Ch,018h,030h,030h,030h,030h,030h,018h,00Ch,000h,000h ;   Hex #28
    Db  000h,000h,000h,030h,018h,00Ch,00Ch,00Ch,00Ch,00Ch,018h,030h,000h,000h ;   Hex #29
    Db  000h,000h,000h,000h,000h,066h,03Ch,0FFh,03Ch,066h,000h,000h,000h,000h ;   Hex #2A
    Db  000h,000h,000h,000h,000h,018h,018h,07Eh,018h,018h,000h,000h,000h,000h ;   Hex #2B
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,018h,018h,030h,000h ;   Hex #2C
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,000h,000h,000h,000h,000h,000h ;   Hex #2D
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,018h,000h,000h ;   Hex #2E
    Db  000h,000h,000h,002h,006h,00Ch,018h,030h,060h,0C0h,080h,000h,000h,000h ;   Hex #2F
    Db  000h,000h,000h,038h,06Ch,0C6h,0C6h,0D6h,0C6h,0C6h,06Ch,038h,000h,000h ;   Hex #30
    Db  000h,000h,000h,018h,038h,078h,018h,018h,018h,018h,018h,07Eh,000h,000h ;   Hex #31
    Db  000h,000h,000h,07Ch,0C6h,006h,00Ch,018h,030h,060h,0C6h,0FEh,000h,000h ;   Hex #32
    Db  000h,000h,000h,07Ch,0C6h,006h,006h,03Ch,006h,006h,0C6h,07Ch,000h,000h ;   Hex #33
    Db  000h,000h,000h,00Ch,01Ch,03Ch,06Ch,0CCh,0FEh,00Ch,00Ch,01Eh,000h,000h ;   Hex #34
    Db  000h,000h,000h,0FEh,0C0h,0C0h,0C0h,0FCh,006h,006h,0C6h,07Ch,000h,000h ;   Hex #35
    Db  000h,000h,000h,038h,060h,0C0h,0C0h,0FCh,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #36
    Db  000h,000h,000h,0FEh,0C6h,006h,00Ch,018h,030h,030h,030h,030h,000h,000h ;   Hex #37
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0C6h,07Ch,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #38
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0C6h,07Eh,006h,006h,00Ch,078h,000h,000h ;   Hex #39
    Db  000h,000h,000h,000h,018h,018h,000h,000h,000h,018h,018h,000h,000h,000h ;   Hex #3A
    Db  000h,000h,000h,000h,018h,018h,000h,000h,000h,018h,018h,030h,000h,000h ;   Hex #3B
    Db  000h,000h,000h,00Ch,018h,030h,060h,0C0h,060h,030h,018h,00Ch,000h,000h ;   Hex #3C
    Db  000h,000h,000h,000h,000h,000h,07Eh,000h,000h,07Eh,000h,000h,000h,000h ;   Hex #3D
    Db  000h,000h,000h,060h,030h,018h,00Ch,006h,00Ch,018h,030h,060h,000h,000h ;   Hex #3E
    Db  000h,000h,000h,07Ch,0C6h,0C6h,00Ch,018h,018h,000h,018h,018h,000h,000h ;   Hex #3F
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0DEh,0DEh,0DEh,0DCh,0C0h,07Ch,000h,000h ;   Hex #40
    Db  000h,000h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #41
    Db  000h,000h,000h,0FCh,066h,066h,066h,07Ch,066h,066h,066h,0FCh,000h,000h ;   Hex #42
    Db  000h,000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0C0h,0C2h,066h,03Ch,000h,000h ;   Hex #43
    Db  000h,000h,000h,0F8h,06Ch,066h,066h,066h,066h,066h,06Ch,0F8h,000h,000h ;   Hex #44
    Db  000h,000h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h ;   Hex #45
    Db  000h,000h,000h,0FEh,066h,062h,068h,078h,068h,060h,060h,0F0h,000h,000h ;   Hex #46
    Db  000h,000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0DEh,0C6h,066h,03Ah,000h,000h ;   Hex #47
    Db  000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,000h,000h ;   Hex #48
    Db  000h,000h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #49
    Db  000h,000h,000h,01Eh,00Ch,00Ch,00Ch,00Ch,00Ch,0CCh,0CCh,078h,000h,000h ;   Hex #4A
    Db  000h,000h,000h,0E6h,066h,06Ch,06Ch,078h,06Ch,06Ch,066h,0E6h,000h,000h ;   Hex #4B
    Db  000h,000h,000h,0F0h,060h,060h,060h,060h,060h,062h,066h,0FEh,000h,000h ;   Hex #4C
    Db  000h,000h,000h,0C6h,0EEh,0FEh,0D6h,0C6h,0C6h,0C6h,0C6h,0C6h,000h,000h ;   Hex #4D
    Db  000h,000h,000h,0C6h,0E6h,0F6h,0FEh,0DEh,0CEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #4E
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #4F
    Db  000h,000h,000h,0FCh,066h,066h,066h,07Ch,060h,060h,060h,0F0h,000h,000h ;   Hex #50
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0D6h,0DEh,07Ch,00Eh,000h ;   Hex #51
    Db  000h,000h,000h,0FCh,066h,066h,066h,07Ch,06Ch,066h,066h,0E6h,000h,000h ;   Hex #52
    Db  000h,000h,000h,07Ch,0C6h,0C6h,060h,038h,00Ch,0C6h,0C6h,07Ch,000h,000h ;   Hex #53
    Db  000h,000h,000h,07Eh,07Eh,05Ah,018h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #54
    Db  000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #55
    Db  000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,06Ch,038h,010h,000h,000h ;   Hex #56
    Db  000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0D6h,0D6h,0FEh,06Ch,06Ch,000h,000h ;   Hex #57
    Db  000h,000h,000h,0C6h,0C6h,0C6h,07Ch,038h,07Ch,0C6h,0C6h,0C6h,000h,000h ;   Hex #58
    Db  000h,000h,000h,066h,066h,066h,066h,03Ch,018h,018h,018h,03Ch,000h,000h ;   Hex #59
    Db  000h,000h,000h,0FEh,0C6h,08Ch,018h,030h,060h,0C2h,0C6h,0FEh,000h,000h ;   Hex #5A
    Db  000h,000h,000h,03Ch,030h,030h,030h,030h,030h,030h,030h,03Ch,000h,000h ;   Hex #5B
    Db  000h,000h,000h,080h,0C0h,0E0h,070h,038h,01Ch,00Eh,006h,002h,000h,000h ;   Hex #5C
    Db  000h,000h,000h,03Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,03Ch,000h,000h ;   Hex #5D
    Db  010h,038h,06Ch,0C6h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #5E
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,0FFh ;   Hex #5F
    Db  000h,030h,018h,00Ch,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #60
    Db  000h,000h,000h,000h,000h,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #61
    Db  000h,000h,000h,0E0h,060h,060h,078h,06Ch,066h,066h,066h,07Ch,000h,000h ;   Hex #62
    Db  000h,000h,000h,000h,000h,000h,07Ch,0C6h,0C0h,0C0h,0C6h,07Ch,000h,000h ;   Hex #63
    Db  000h,000h,000h,01Ch,00Ch,00Ch,03Ch,06Ch,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #64
    Db  000h,000h,000h,000h,000h,000h,07Ch,0C6h,0FEh,0C0h,0C6h,07Ch,000h,000h ;   Hex #65
    Db  000h,000h,000h,01Ch,036h,032h,030h,07Ch,030h,030h,030h,078h,000h,000h ;   Hex #66
    Db  000h,000h,000h,000h,000h,000h,076h,0CCh,0CCh,0CCh,07Ch,00Ch,0CCh,078h ;   Hex #67
    Db  000h,000h,000h,0E0h,060h,060h,06Ch,076h,066h,066h,066h,0E6h,000h,000h ;   Hex #68
    Db  000h,000h,000h,018h,018h,000h,038h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #69
    Db  000h,000h,000h,006h,006h,000h,00Eh,006h,006h,006h,006h,066h,066h,03Ch ;   Hex #6A
    Db  000h,000h,000h,0E0h,060h,060h,066h,06Ch,078h,06Ch,066h,0E6h,000h,000h ;   Hex #6B
    Db  000h,000h,000h,038h,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #6C
    Db  000h,000h,000h,000h,000h,000h,0ECh,0FEh,0D6h,0D6h,0D6h,0D6h,000h,000h ;   Hex #6D
    Db  000h,000h,000h,000h,000h,000h,0DCh,066h,066h,066h,066h,066h,000h,000h ;   Hex #6E
    Db  000h,000h,000h,000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #6F
    Db  000h,000h,000h,000h,000h,000h,0DCh,066h,066h,066h,07Ch,060h,060h,0F0h ;   Hex #70
    Db  000h,000h,000h,000h,000h,000h,076h,0CCh,0CCh,0CCh,07Ch,00Ch,00Ch,01Eh ;   Hex #71
    Db  000h,000h,000h,000h,000h,000h,0DCh,076h,066h,060h,060h,0F0h,000h,000h ;   Hex #72
    Db  000h,000h,000h,000h,000h,000h,07Ch,0C6h,070h,01Ch,0C6h,07Ch,000h,000h ;   Hex #73
    Db  000h,000h,000h,010h,030h,030h,0FCh,030h,030h,030h,036h,01Ch,000h,000h ;   Hex #74
    Db  000h,000h,000h,000h,000h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #75
    Db  000h,000h,000h,000h,000h,000h,0C6h,0C6h,0C6h,06Ch,038h,010h,000h,000h ;   Hex #76
    Db  000h,000h,000h,000h,000h,000h,0C6h,0C6h,0D6h,0D6h,0FEh,06Ch,000h,000h ;   Hex #77
    Db  000h,000h,000h,000h,000h,000h,0C6h,06Ch,038h,038h,06Ch,0C6h,000h,000h ;   Hex #78
    Db  000h,000h,000h,000h,000h,000h,0C6h,0C6h,0C6h,0C6h,07Eh,006h,00Ch,078h ;   Hex #79
    Db  000h,000h,000h,000h,000h,000h,0FEh,0CCh,018h,030h,066h,0FEh,000h,000h ;   Hex #7A
    Db  000h,000h,000h,00Eh,018h,018h,018h,070h,018h,018h,018h,00Eh,000h,000h ;   Hex #7B
    Db  000h,000h,000h,018h,018h,018h,018h,018h,018h,018h,018h,018h,000h,000h ;   Hex #7C
    Db  000h,000h,000h,070h,018h,018h,018h,00Eh,018h,018h,018h,070h,000h,000h ;   Hex #7D
    Db  000h,076h,0DCh,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #7E
    Db  000h,000h,000h,000h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,000h,000h,000h ;   Hex #7F
    Db  000h,000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0C0h,0C2h,066h,03Ch,00Ch,078h ;   Hex #80
    Db  000h,000h,000h,0CCh,000h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #81
    Db  000h,000h,00Ch,018h,030h,000h,07Ch,0C6h,0FEh,0C0h,0C6h,07Ch,000h,000h ;   Hex #82
    Db  000h,000h,010h,038h,06Ch,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #83
    Db  000h,000h,000h,0C6h,000h,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #84
    Db  000h,000h,060h,030h,018h,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #85
    Db  000h,000h,038h,06Ch,038h,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #86
    Db  000h,000h,000h,000h,000h,000h,07Ch,0C6h,0C0h,0C0h,0C6h,07Ch,00Ch,078h ;   Hex #87
    Db  000h,000h,010h,038h,06Ch,000h,07Ch,0C6h,0FEh,0C0h,0C6h,07Ch,000h,000h ;   Hex #88
    Db  000h,000h,000h,0C6h,000h,000h,07Ch,0C6h,0FEh,0C0h,0C6h,07Ch,000h,000h ;   Hex #89
    Db  000h,000h,060h,030h,018h,000h,07Ch,0C6h,0FEh,0C0h,0C6h,07Ch,000h,000h ;   Hex #8A
    Db  000h,000h,000h,066h,000h,000h,038h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #8B
    Db  000h,000h,018h,03Ch,066h,000h,038h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #8C
    Db  000h,000h,060h,030h,018h,000h,038h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #8D
    Db  000h,0C6h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #8E
    Db  038h,06Ch,038h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #8F
    Db  00Ch,018h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h ;   Hex #90
    Db  000h,000h,000h,000h,000h,000h,0ECh,036h,076h,0DCh,0D8h,06Eh,000h,000h ;   Hex #91
    Db  000h,000h,000h,03Eh,06Ch,0CCh,0CCh,0FEh,0CCh,0CCh,0CCh,0CEh,000h,000h ;   Hex #92
    Db  000h,000h,010h,038h,06Ch,000h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #93
    Db  000h,000h,000h,0C6h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #94
    Db  000h,000h,060h,030h,018h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #95
    Db  000h,000h,030h,078h,0CCh,000h,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #96
    Db  000h,000h,060h,030h,018h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #97
    Db  000h,000h,000h,0C6h,000h,000h,0C6h,0C6h,0C6h,0C6h,07Eh,006h,00Ch,078h ;   Hex #98
    Db  000h,0C6h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #99
    Db  000h,0C6h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #9A
    Db  000h,000h,018h,018h,07Ch,0C6h,0C0h,0C0h,0C6h,07Ch,018h,018h,000h,000h ;   Hex #9B
    Db  000h,000h,038h,06Ch,064h,060h,0F0h,060h,060h,060h,0E6h,0FCh,000h,000h ;   Hex #9C
    Db  000h,000h,000h,066h,066h,03Ch,018h,07Eh,018h,07Eh,018h,018h,000h,000h ;   Hex #9D
    Db  000h,000h,0FCh,066h,066h,07Ch,062h,066h,06Fh,066h,066h,0F3h,000h,000h ;   Hex #9E
    Db  000h,000h,00Eh,01Bh,018h,018h,018h,07Eh,018h,018h,018h,0D8h,070h,000h ;   Hex #9F
    Db  000h,000h,00Ch,018h,030h,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #A0
    Db  000h,000h,00Ch,018h,030h,000h,038h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #A1
    Db  000h,000h,00Ch,018h,030h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #A2
    Db  000h,000h,00Ch,018h,030h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #A3
    Db  000h,000h,000h,076h,0DCh,000h,0DCh,066h,066h,066h,066h,066h,000h,000h ;   Hex #A4
    Db  076h,0DCh,000h,0C6h,0E6h,0F6h,0FEh,0DEh,0CEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #A5
    Db  000h,000h,03Ch,06Ch,06Ch,03Eh,000h,07Eh,000h,000h,000h,000h,000h,000h ;   Hex #A6
    Db  000h,000h,038h,06Ch,06Ch,038h,000h,07Ch,000h,000h,000h,000h,000h,000h ;   Hex #A7
    Db  000h,000h,000h,030h,030h,000h,030h,030h,060h,0C6h,0C6h,07Ch,000h,000h ;   Hex #A8
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,0C0h,0C0h,0C0h,000h,000h,000h ;   Hex #A9
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,006h,006h,006h,000h,000h,000h ;   Hex #AA
    Db  000h,000h,060h,0E0h,063h,066h,06Ch,018h,030h,06Eh,0C3h,006h,00Ch,01Fh ;   Hex #AB
    Db  000h,000h,060h,0E0h,063h,066h,06Ch,01Ah,036h,06Eh,0DAh,03Fh,006h,006h ;   Hex #AC
    Db  000h,000h,000h,018h,018h,000h,018h,018h,03Ch,03Ch,03Ch,018h,000h,000h ;   Hex #AD
    Db  000h,000h,000h,000h,000h,036h,06Ch,0D8h,06Ch,036h,000h,000h,000h,000h ;   Hex #AE
    Db  000h,000h,000h,000h,000h,0D8h,06Ch,036h,06Ch,0D8h,000h,000h,000h,000h ;   Hex #AF
    Db  011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h ;   Hex #B0
    Db  055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh ;   Hex #B1
    Db  0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h ;   Hex #B2
    Db  018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B3
    Db  018h,018h,018h,018h,018h,018h,018h,0F8h,018h,018h,018h,018h,018h,018h ;   Hex #B4
    Db  018h,018h,018h,018h,018h,0F8h,018h,0F8h,018h,018h,018h,018h,018h,018h ;   Hex #B5
    Db  036h,036h,036h,036h,036h,036h,036h,0F6h,036h,036h,036h,036h,036h,036h ;   Hex #B6
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,036h,036h,036h,036h,036h,036h ;   Hex #B7
    Db  000h,000h,000h,000h,000h,0F8h,018h,0F8h,018h,018h,018h,018h,018h,018h ;   Hex #B8
    Db  036h,036h,036h,036h,036h,0F6h,006h,0F6h,036h,036h,036h,036h,036h,036h ;   Hex #B9
    Db  036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #BA
    Db  000h,000h,000h,000h,000h,0FEh,006h,0F6h,036h,036h,036h,036h,036h,036h ;   Hex #BB
    Db  036h,036h,036h,036h,036h,0F6h,006h,0FEh,000h,000h,000h,000h,000h,000h ;   Hex #BC
    Db  036h,036h,036h,036h,036h,036h,036h,0FEh,000h,000h,000h,000h,000h,000h ;   Hex #BD
    Db  018h,018h,018h,018h,018h,0F8h,018h,0F8h,000h,000h,000h,000h,000h,000h ;   Hex #BE
    Db  000h,000h,000h,000h,000h,000h,000h,0F8h,018h,018h,018h,018h,018h,018h ;   Hex #BF
    Db  018h,018h,018h,018h,018h,018h,018h,01Fh,000h,000h,000h,000h,000h,000h ;   Hex #C0
    Db  018h,018h,018h,018h,018h,018h,018h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #C1
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,018h,018h,018h,018h,018h,018h ;   Hex #C2
    Db  018h,018h,018h,018h,018h,018h,018h,01Fh,018h,018h,018h,018h,018h,018h ;   Hex #C3
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #C4
    Db  018h,018h,018h,018h,018h,018h,018h,0FFh,018h,018h,018h,018h,018h,018h ;   Hex #C5
    Db  018h,018h,018h,018h,018h,01Fh,018h,01Fh,018h,018h,018h,018h,018h,018h ;   Hex #C6
    Db  036h,036h,036h,036h,036h,036h,036h,037h,036h,036h,036h,036h,036h,036h ;   Hex #C7
    Db  036h,036h,036h,036h,036h,037h,030h,03Fh,000h,000h,000h,000h,000h,000h ;   Hex #C8
    Db  000h,000h,000h,000h,000h,03Fh,030h,037h,036h,036h,036h,036h,036h,036h ;   Hex #C9
    Db  036h,036h,036h,036h,036h,0F7h,000h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #CA
    Db  000h,000h,000h,000h,000h,0FFh,000h,0F7h,036h,036h,036h,036h,036h,036h ;   Hex #CB
    Db  036h,036h,036h,036h,036h,037h,030h,037h,036h,036h,036h,036h,036h,036h ;   Hex #CC
    Db  000h,000h,000h,000h,000h,0FFh,000h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #CD
    Db  036h,036h,036h,036h,036h,0F7h,000h,0F7h,036h,036h,036h,036h,036h,036h ;   Hex #CE
    Db  018h,018h,018h,018h,018h,0FFh,000h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #CF
    Db  036h,036h,036h,036h,036h,036h,036h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #D0
    Db  000h,000h,000h,000h,000h,0FFh,000h,0FFh,018h,018h,018h,018h,018h,018h ;   Hex #D1
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,036h,036h,036h,036h,036h,036h ;   Hex #D2
    Db  036h,036h,036h,036h,036h,036h,036h,03Fh,000h,000h,000h,000h,000h,000h ;   Hex #D3
    Db  018h,018h,018h,018h,018h,01Fh,018h,01Fh,000h,000h,000h,000h,000h,000h ;   Hex #D4
    Db  000h,000h,000h,000h,000h,01Fh,018h,01Fh,018h,018h,018h,018h,018h,018h ;   Hex #D5
    Db  000h,000h,000h,000h,000h,000h,000h,03Fh,036h,036h,036h,036h,036h,036h ;   Hex #D6
    Db  036h,036h,036h,036h,036h,036h,036h,0FFh,036h,036h,036h,036h,036h,036h ;   Hex #D7
    Db  018h,018h,018h,018h,018h,0FFh,018h,0FFh,018h,018h,018h,018h,018h,018h ;   Hex #D8
    Db  018h,018h,018h,018h,018h,018h,018h,0F8h,000h,000h,000h,000h,000h,000h ;   Hex #D9
    Db  000h,000h,000h,000h,000h,000h,000h,01Fh,018h,018h,018h,018h,018h,018h ;   Hex #DA
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DB
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DC
    Db  0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h ;   Hex #DD
    Db  00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh ;   Hex #DE
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,000h,000h,000h,000h,000h,000h,000h ;   Hex #DF
    Db  000h,000h,000h,000h,000h,000h,076h,0DCh,0D8h,0D8h,0DCh,076h,000h,000h ;   Hex #E0
    Db  000h,000h,000h,078h,0CCh,0CCh,0CCh,0D8h,0CCh,0C6h,0C6h,0CCh,000h,000h ;   Hex #E1
    Db  000h,000h,000h,0FEh,0C6h,0C6h,0C0h,0C0h,0C0h,0C0h,0C0h,0C0h,000h,000h ;   Hex #E2
    Db  000h,000h,000h,000h,000h,000h,0FEh,06Ch,06Ch,06Ch,06Ch,06Ch,000h,000h ;   Hex #E3
    Db  000h,000h,000h,0FEh,0C6h,060h,030h,018h,030h,060h,0C6h,0FEh,000h,000h ;   Hex #E4
    Db  000h,000h,000h,000h,000h,000h,07Eh,0D8h,0D8h,0D8h,0D8h,070h,000h,000h ;   Hex #E5
    Db  000h,000h,000h,000h,000h,000h,066h,066h,066h,066h,066h,07Ch,060h,0C0h ;   Hex #E6
    Db  000h,000h,000h,000h,000h,076h,0DCh,018h,018h,018h,018h,018h,000h,000h ;   Hex #E7
    Db  000h,000h,000h,07Eh,018h,03Ch,066h,066h,066h,03Ch,018h,07Eh,000h,000h ;   Hex #E8
    Db  000h,000h,000h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,06Ch,038h,000h,000h ;   Hex #E9
    Db  000h,000h,000h,038h,06Ch,0C6h,0C6h,0C6h,06Ch,06Ch,06Ch,0EEh,000h,000h ;   Hex #EA
    Db  000h,000h,000h,01Eh,030h,018h,00Ch,03Eh,066h,066h,066h,03Ch,000h,000h ;   Hex #EB
    Db  000h,000h,000h,000h,000h,000h,07Eh,0DBh,0DBh,07Eh,000h,000h,000h,000h ;   Hex #EC
    Db  000h,000h,000h,003h,006h,07Eh,0DBh,0DBh,0F3h,07Eh,060h,0C0h,000h,000h ;   Hex #ED
    Db  000h,000h,000h,01Eh,030h,060h,060h,07Eh,060h,060h,030h,01Eh,000h,000h ;   Hex #EE
    Db  000h,000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,000h,000h ;   Hex #EF
    Db  000h,000h,000h,000h,0FEh,000h,000h,0FEh,000h,000h,0FEh,000h,000h,000h ;   Hex #F0
    Db  000h,000h,000h,000h,018h,018h,07Eh,018h,018h,000h,000h,07Eh,000h,000h ;   Hex #F1
    Db  000h,000h,000h,030h,018h,00Ch,006h,00Ch,018h,030h,000h,07Eh,000h,000h ;   Hex #F2
    Db  000h,000h,000h,00Ch,018h,030h,060h,030h,018h,00Ch,000h,07Eh,000h,000h ;   Hex #F3
    Db  000h,000h,00Eh,01Bh,01Bh,018h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #F4
    Db  018h,018h,018h,018h,018h,018h,018h,018h,0D8h,0D8h,070h,000h,000h,000h ;   Hex #F5
    Db  000h,000h,000h,000h,000h,018h,000h,07Eh,000h,018h,000h,000h,000h,000h ;   Hex #F6
    Db  000h,000h,000h,000h,000h,076h,0DCh,000h,076h,0DCh,000h,000h,000h,000h ;   Hex #F7
    Db  000h,038h,06Ch,06Ch,038h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #F8
    Db  000h,000h,000h,000h,000h,000h,000h,018h,018h,000h,000h,000h,000h,000h ;   Hex #F9
    Db  000h,000h,000h,000h,000h,000h,000h,018h,000h,000h,000h,000h,000h,000h ;   Hex #FA
    Db  000h,00Fh,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,0ECh,06Ch,03Ch,01Ch,000h,000h ;   Hex #FB
    Db  000h,06Ch,036h,036h,036h,036h,036h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FC
    Db  000h,03Ch,066h,00Ch,018h,032h,07Eh,000h,000h,000h,000h,000h,000h,000h ;   Hex #FD
    Db  000h,000h,000h,000h,000h,07Eh,07Eh,07Eh,07Eh,07Eh,07Eh,000h,000h,000h ;   Hex #FE
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FF

=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\ega2\850-cpi.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
CODE    SEGMENT BYTE PUBLIC 'CODE'
        ASSUME CS:CODE,DS:CODE

IF1
;        %OUT    EGA.CPI creation file
;        %OUT    .
;        %OUT    CP SRC files:
;        %OUT    .
;        %OUT    .       CODE PAGE:  850
ENDIF

EGA850: DW     LEN_850                  ; SIZE OF ENTRY HEADER
        DW     POST_EGA850,0            ; POINTER TO NEXT HEADER
        DW     1                        ; DEVICE TYPE
        DB     "EGA     "               ; DEVICE SUBTYPE ID
        DW     850                      ; CODE PAGE ID
        DW     3 DUP(0)                 ; RESERVED
        DW     OFFSET DATA850,0         ; POINTER TO FONTS
LEN_850 EQU    ($-EGA850)               ;
                                        ;
DATA850:DW     1                        ; CART/NON-CART
        DW     3                        ; # OF FONTS
        DW     LEN_D850                 ; LENGTH OF DATA
D850:                                   ;
        DB     16,8                     ; CHARACTER BOX SIZE
        DB     0,0                      ; ASPECT RATIO (UNUSED)
        DW     256                      ; NUMBER OF CHARACTERS
                                        ;
        INCLUDE 850-8X16.ASM            ;
                                        ;
        DB     14,8                     ; CHARACTER BOX SIZE
        DB     0,0                      ; ASPECT RATIO (UNUSED)
        DW     256                      ; NUMBER OF CHARACTERS
                                        ;
        INCLUDE 850-8X14.ASM            ;
                                        ;
        DB     8,8                      ; CHARACTER BOX SIZE
        DB     0,0                      ; ASPECT RATIO (UNUSED)
        DW     256                      ; NUMBER OF CHARACTERS
                                        ;
        INCLUDE 850-8X8.ASM             ;
                                        ;
LEN_D850        EQU ($-D850)            ;
                                        ;
POST_EGA850     EQU     $               ;
                                        ;
CODE    ENDS                            ;
        END                             ;


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\ega\865-cpi.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
CODE    SEGMENT BYTE PUBLIC 'CODE'
        ASSUME CS:CODE,DS:CODE

IF1
;        %OUT    EGA.CPI creation file
;        %OUT    .
;        %OUT    CP SRC files:
;        %OUT    .
;        %OUT    .       CODE PAGE:  865
ENDIF

EGA865: DW     LEN_865                  ; SIZE OF ENTRY HEADER
        DW     POST_EGA865,0            ; POINTER TO NEXT HEADER
        DW     1                        ; DEVICE TYPE
        DB     "EGA     "               ; DEVICE SUBTYPE ID
        DW     865                      ; CODE PAGE ID
        DW     3 DUP(0)                 ; RESERVED
        DW     OFFSET DATA865,0         ; POINTER TO FONTS
LEN_865 EQU    ($-EGA865)               ;
                                        ;
DATA865:DW     1                        ; CART/NON-CART
        DW     3                        ; # OF FONTS
        DW     LEN_D865                 ; LENGTH OF DATA
D865:                                   ;
        DB     16,8                     ; CHARACTER BOX SIZE
        DB     0,0                      ; ASPECT RATIO (UNUSED)
        DW     256                      ; NUMBER OF CHARACTERS
                                        ;
        INCLUDE 865-8X16.ASM            ;
                                        ;
        DB     14,8                     ; CHARACTER BOX SIZE
        DB     0,0                      ; ASPECT RATIO (UNUSED)
        DW     256                      ; NUMBER OF CHARACTERS
                                        ;
        INCLUDE 865-8X14.ASM            ;
                                        ;
        DB     8,8                      ; CHARACTER BOX SIZE
        DB     0,0                      ; ASPECT RATIO (UNUSED)
        DW     256                      ; NUMBER OF CHARACTERS
                                        ;
        INCLUDE 865-8X8.ASM             ;
                                        ;
LEN_D865        EQU ($-D865)            ;
                                        ;
POST_EGA865     EQU     $               ;
                                        ;
CODE    ENDS                            ;
        END                             ;


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\ega2\437-8x16.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
;***************************************************
;  CHARACTER FONT FILE
;  Source Assembler File
;
;        CODE PAGE: 437 
;  FONT RESOLUTION: 8 x 16 
;
;     DATE CREATED:05-28-1987
;
;
; Output file from: MULTIFON, Version 1A
;
;***************************************************
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #0
    Db  000h,000h,07Eh,081h,0A5h,081h,081h,0BDh,099h,081h,081h,07Eh,000h,000h,000h,000h ;   Hex #1
    Db  000h,000h,07Eh,0FFh,0DBh,0FFh,0FFh,0C3h,0E7h,0FFh,0FFh,07Eh,000h,000h,000h,000h ;   Hex #2
    Db  000h,000h,000h,000h,06Ch,0FEh,0FEh,0FEh,0FEh,07Ch,038h,010h,000h,000h,000h,000h ;   Hex #3
    Db  000h,000h,000h,000h,010h,038h,07Ch,0FEh,07Ch,038h,010h,000h,000h,000h,000h,000h ;   Hex #4
    Db  000h,000h,000h,018h,03Ch,03Ch,0E7h,0E7h,0E7h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #5
    Db  000h,000h,000h,018h,03Ch,07Eh,0FFh,0FFh,07Eh,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #6
    Db  000h,000h,000h,000h,000h,000h,018h,03Ch,03Ch,018h,000h,000h,000h,000h,000h,000h ;   Hex #7
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0E7h,0C3h,0C3h,0E7h,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #8
    Db  000h,000h,000h,000h,000h,03Ch,066h,042h,042h,066h,03Ch,000h,000h,000h,000h,000h ;   Hex #9
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0C3h,099h,0BDh,0BDh,099h,0C3h,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #A
    Db  000h,000h,01Eh,00Eh,01Ah,032h,078h,0CCh,0CCh,0CCh,0CCh,078h,000h,000h,000h,000h ;   Hex #B
    Db  000h,000h,03Ch,066h,066h,066h,066h,03Ch,018h,07Eh,018h,018h,000h,000h,000h,000h ;   Hex #C
    Db  000h,000h,03Fh,033h,03Fh,030h,030h,030h,030h,070h,0F0h,0E0h,000h,000h,000h,000h ;   Hex #D
    Db  000h,000h,07Fh,063h,07Fh,063h,063h,063h,063h,067h,0E7h,0E6h,0C0h,000h,000h,000h ;   Hex #E
    Db  000h,000h,000h,018h,018h,0DBh,03Ch,0E7h,03Ch,0DBh,018h,018h,000h,000h,000h,000h ;   Hex #F
    Db  000h,080h,0C0h,0E0h,0F0h,0F8h,0FEh,0F8h,0F0h,0E0h,0C0h,080h,000h,000h,000h,000h ;   Hex #10
    Db  000h,002h,006h,00Eh,01Eh,03Eh,0FEh,03Eh,01Eh,00Eh,006h,002h,000h,000h,000h,000h ;   Hex #11
    Db  000h,000h,018h,03Ch,07Eh,018h,018h,018h,07Eh,03Ch,018h,000h,000h,000h,000h,000h ;   Hex #12
    Db  000h,000h,066h,066h,066h,066h,066h,066h,066h,000h,066h,066h,000h,000h,000h,000h ;   Hex #13
    Db  000h,000h,07Fh,0DBh,0DBh,0DBh,07Bh,01Bh,01Bh,01Bh,01Bh,01Bh,000h,000h,000h,000h ;   Hex #14
    Db  000h,07Ch,0C6h,060h,038h,06Ch,0C6h,0C6h,06Ch,038h,00Ch,0C6h,07Ch,000h,000h,000h ;   Hex #15
    Db  000h,000h,000h,000h,000h,000h,000h,000h,0FEh,0FEh,0FEh,0FEh,000h,000h,000h,000h ;   Hex #16
    Db  000h,000h,018h,03Ch,07Eh,018h,018h,018h,07Eh,03Ch,018h,07Eh,000h,000h,000h,000h ;   Hex #17
    Db  000h,000h,018h,03Ch,07Eh,018h,018h,018h,018h,018h,018h,018h,000h,000h,000h,000h ;   Hex #18
    Db  000h,000h,018h,018h,018h,018h,018h,018h,018h,07Eh,03Ch,018h,000h,000h,000h,000h ;   Hex #19
    Db  000h,000h,000h,000h,000h,018h,00Ch,0FEh,00Ch,018h,000h,000h,000h,000h,000h,000h ;   Hex #1A
    Db  000h,000h,000h,000h,000h,030h,060h,0FEh,060h,030h,000h,000h,000h,000h,000h,000h ;   Hex #1B
    Db  000h,000h,000h,000h,000h,000h,0C0h,0C0h,0C0h,0FEh,000h,000h,000h,000h,000h,000h ;   Hex #1C
    Db  000h,000h,000h,000h,000h,028h,06Ch,0FEh,06Ch,028h,000h,000h,000h,000h,000h,000h ;   Hex #1D
    Db  000h,000h,000h,000h,010h,038h,038h,07Ch,07Ch,0FEh,0FEh,000h,000h,000h,000h,000h ;   Hex #1E
    Db  000h,000h,000h,000h,0FEh,0FEh,07Ch,07Ch,038h,038h,010h,000h,000h,000h,000h,000h ;   Hex #1F
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #20
    Db  000h,000h,018h,03Ch,03Ch,03Ch,018h,018h,018h,000h,018h,018h,000h,000h,000h,000h ;   Hex #21
    Db  000h,066h,066h,066h,024h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #22
    Db  000h,000h,000h,06Ch,06Ch,0FEh,06Ch,06Ch,06Ch,0FEh,06Ch,06Ch,000h,000h,000h,000h ;   Hex #23
    Db  018h,018h,07Ch,0C6h,0C2h,0C0h,07Ch,006h,006h,086h,0C6h,07Ch,018h,018h,000h,000h ;   Hex #24
    Db  000h,000h,000h,000h,0C2h,0C6h,00Ch,018h,030h,060h,0C6h,086h,000h,000h,000h,000h ;   Hex #25
    Db  000h,000h,038h,06Ch,06Ch,038h,076h,0DCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #26
    Db  000h,030h,030h,030h,060h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #27
    Db  000h,000h,00Ch,018h,030h,030h,030h,030h,030h,030h,018h,00Ch,000h,000h,000h,000h ;   Hex #28
    Db  000h,000h,030h,018h,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,018h,030h,000h,000h,000h,000h ;   Hex #29
    Db  000h,000h,000h,000h,000h,066h,03Ch,0FFh,03Ch,066h,000h,000h,000h,000h,000h,000h ;   Hex #2A
    Db  000h,000h,000h,000h,000h,018h,018h,07Eh,018h,018h,000h,000h,000h,000h,000h,000h ;   Hex #2B
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,018h,018h,030h,000h,000h,000h ;   Hex #2C
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #2D
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,018h,000h,000h,000h,000h ;   Hex #2E
    Db  000h,000h,000h,000h,002h,006h,00Ch,018h,030h,060h,0C0h,080h,000h,000h,000h,000h ;   Hex #2F
    Db  000h,000h,038h,06Ch,0C6h,0C6h,0D6h,0D6h,0C6h,0C6h,06Ch,038h,000h,000h,000h,000h ;   Hex #30
    Db  000h,000h,018h,038h,078h,018h,018h,018h,018h,018h,018h,07Eh,000h,000h,000h,000h ;   Hex #31
    Db  000h,000h,07Ch,0C6h,006h,00Ch,018h,030h,060h,0C0h,0C6h,0FEh,000h,000h,000h,000h ;   Hex #32
    Db  000h,000h,07Ch,0C6h,006h,006h,03Ch,006h,006h,006h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #33
    Db  000h,000h,00Ch,01Ch,03Ch,06Ch,0CCh,0FEh,00Ch,00Ch,00Ch,01Eh,000h,000h,000h,000h ;   Hex #34
    Db  000h,000h,0FEh,0C0h,0C0h,0C0h,0FCh,006h,006h,006h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #35
    Db  000h,000h,038h,060h,0C0h,0C0h,0FCh,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #36
    Db  000h,000h,0FEh,0C6h,006h,006h,00Ch,018h,030h,030h,030h,030h,000h,000h,000h,000h ;   Hex #37
    Db  000h,000h,07Ch,0C6h,0C6h,0C6h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #38
    Db  000h,000h,07Ch,0C6h,0C6h,0C6h,07Eh,006h,006h,006h,00Ch,078h,000h,000h,000h,000h ;   Hex #39
    Db  000h,000h,000h,000h,018h,018h,000h,000h,000h,018h,018h,000h,000h,000h,000h,000h ;   Hex #3A
    Db  000h,000h,000h,000h,018h,018h,000h,000h,000h,018h,018h,030h,000h,000h,000h,000h ;   Hex #3B
    Db  000h,000h,000h,006h,00Ch,018h,030h,060h,030h,018h,00Ch,006h,000h,000h,000h,000h ;   Hex #3C
    Db  000h,000h,000h,000h,000h,07Eh,000h,000h,07Eh,000h,000h,000h,000h,000h,000h,000h ;   Hex #3D
    Db  000h,000h,000h,060h,030h,018h,00Ch,006h,00Ch,018h,030h,060h,000h,000h,000h,000h ;   Hex #3E
    Db  000h,000h,07Ch,0C6h,0C6h,00Ch,018h,018h,018h,000h,018h,018h,000h,000h,000h,000h ;   Hex #3F
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0DEh,0DEh,0DEh,0DCh,0C0h,07Ch,000h,000h,000h,000h ;   Hex #40
    Db  000h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #41
    Db  000h,000h,0FCh,066h,066h,066h,07Ch,066h,066h,066h,066h,0FCh,000h,000h,000h,000h ;   Hex #42
    Db  000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0C0h,0C0h,0C2h,066h,03Ch,000h,000h,000h,000h ;   Hex #43
    Db  000h,000h,0F8h,06Ch,066h,066h,066h,066h,066h,066h,06Ch,0F8h,000h,000h,000h,000h ;   Hex #44
    Db  000h,000h,0FEh,066h,062h,068h,078h,068h,060h,062h,066h,0FEh,000h,000h,000h,000h ;   Hex #45
    Db  000h,000h,0FEh,066h,062h,068h,078h,068h,060h,060h,060h,0F0h,000h,000h,000h,000h ;   Hex #46
    Db  000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0DEh,0C6h,0C6h,066h,03Ah,000h,000h,000h,000h ;   Hex #47
    Db  000h,000h,0C6h,0C6h,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #48
    Db  000h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #49
    Db  000h,000h,01Eh,00Ch,00Ch,00Ch,00Ch,00Ch,0CCh,0CCh,0CCh,078h,000h,000h,000h,000h ;   Hex #4A
    Db  000h,000h,0E6h,066h,066h,06Ch,078h,078h,06Ch,066h,066h,0E6h,000h,000h,000h,000h ;   Hex #4B
    Db  000h,000h,0F0h,060h,060h,060h,060h,060h,060h,062h,066h,0FEh,000h,000h,000h,000h ;   Hex #4C
    Db  000h,000h,0C6h,0EEh,0FEh,0FEh,0D6h,0C6h,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #4D
    Db  000h,000h,0C6h,0E6h,0F6h,0FEh,0DEh,0CEh,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #4E
    Db  000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #4F
    Db  000h,000h,0FCh,066h,066h,066h,07Ch,060h,060h,060h,060h,0F0h,000h,000h,000h,000h ;   Hex #50
    Db  000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0D6h,0DEh,07Ch,00Ch,00Eh,000h,000h ;   Hex #51
    Db  000h,000h,0FCh,066h,066h,066h,07Ch,06Ch,066h,066h,066h,0E6h,000h,000h,000h,000h ;   Hex #52
    Db  000h,000h,07Ch,0C6h,0C6h,060h,038h,00Ch,006h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #53
    Db  000h,000h,07Eh,07Eh,05Ah,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #54
    Db  000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #55
    Db  000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,06Ch,038h,010h,000h,000h,000h,000h ;   Hex #56
    Db  000h,000h,0C6h,0C6h,0C6h,0C6h,0D6h,0D6h,0D6h,0FEh,0EEh,06Ch,000h,000h,000h,000h ;   Hex #57
    Db  000h,000h,0C6h,0C6h,06Ch,07Ch,038h,038h,07Ch,06Ch,0C6h,0C6h,000h,000h,000h,000h ;   Hex #58
    Db  000h,000h,066h,066h,066h,066h,03Ch,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #59
    Db  000h,000h,0FEh,0C6h,086h,00Ch,018h,030h,060h,0C2h,0C6h,0FEh,000h,000h,000h,000h ;   Hex #5A
    Db  000h,000h,03Ch,030h,030h,030h,030h,030h,030h,030h,030h,03Ch,000h,000h,000h,000h ;   Hex #5B
    Db  000h,000h,000h,080h,0C0h,0E0h,070h,038h,01Ch,00Eh,006h,002h,000h,000h,000h,000h ;   Hex #5C
    Db  000h,000h,03Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,03Ch,000h,000h,000h,000h ;   Hex #5D
    Db  010h,038h,06Ch,0C6h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #5E
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,0FFh,000h,000h ;   Hex #5F
    Db  000h,030h,018h,00Ch,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #60
    Db  000h,000h,000h,000h,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #61
    Db  000h,000h,0E0h,060h,060h,078h,06Ch,066h,066h,066h,066h,07Ch,000h,000h,000h,000h ;   Hex #62
    Db  000h,000h,000h,000h,000h,07Ch,0C6h,0C0h,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #63
    Db  000h,000h,01Ch,00Ch,00Ch,03Ch,06Ch,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #64
    Db  000h,000h,000h,000h,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #65
    Db  000h,000h,01Ch,036h,032h,030h,078h,030h,030h,030h,030h,078h,000h,000h,000h,000h ;   Hex #66
    Db  000h,000h,000h,000h,000h,076h,0CCh,0CCh,0CCh,0CCh,0CCh,07Ch,00Ch,0CCh,078h,000h ;   Hex #67
    Db  000h,000h,0E0h,060h,060h,06Ch,076h,066h,066h,066h,066h,0E6h,000h,000h,000h,000h ;   Hex #68
    Db  000h,000h,018h,018h,000h,038h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #69
    Db  000h,000h,006h,006h,000h,00Eh,006h,006h,006h,006h,006h,006h,066h,066h,03Ch,000h ;   Hex #6A
    Db  000h,000h,0E0h,060h,060h,066h,06Ch,078h,078h,06Ch,066h,0E6h,000h,000h,000h,000h ;   Hex #6B
    Db  000h,000h,038h,018h,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #6C
    Db  000h,000h,000h,000h,000h,0ECh,0FEh,0D6h,0D6h,0D6h,0D6h,0C6h,000h,000h,000h,000h ;   Hex #6D
    Db  000h,000h,000h,000h,000h,0DCh,066h,066h,066h,066h,066h,066h,000h,000h,000h,000h ;   Hex #6E
    Db  000h,000h,000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #6F
    Db  000h,000h,000h,000h,000h,0DCh,066h,066h,066h,066h,066h,07Ch,060h,060h,0F0h,000h ;   Hex #70
    Db  000h,000h,000h,000h,000h,076h,0CCh,0CCh,0CCh,0CCh,0CCh,07Ch,00Ch,00Ch,01Eh,000h ;   Hex #71
    Db  000h,000h,000h,000h,000h,0DCh,076h,066h,060h,060h,060h,0F0h,000h,000h,000h,000h ;   Hex #72
    Db  000h,000h,000h,000h,000h,07Ch,0C6h,060h,038h,00Ch,0C6h,07Ch,000h,000h,000h,000h ;   Hex #73
    Db  000h,000h,010h,030h,030h,0FCh,030h,030h,030h,030h,036h,01Ch,000h,000h,000h,000h ;   Hex #74
    Db  000h,000h,000h,000h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #75
    Db  000h,000h,000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,06Ch,038h,000h,000h,000h,000h ;   Hex #76
    Db  000h,000h,000h,000h,000h,0C6h,0C6h,0D6h,0D6h,0D6h,0FEh,06Ch,000h,000h,000h,000h ;   Hex #77
    Db  000h,000h,000h,000h,000h,0C6h,06Ch,038h,038h,038h,06Ch,0C6h,000h,000h,000h,000h ;   Hex #78
    Db  000h,000h,000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Eh,006h,00Ch,0F8h,000h ;   Hex #79
    Db  000h,000h,000h,000h,000h,0FEh,0CCh,018h,030h,060h,0C6h,0FEh,000h,000h,000h,000h ;   Hex #7A
    Db  000h,000h,00Eh,018h,018h,018h,070h,018h,018h,018h,018h,00Eh,000h,000h,000h,000h ;   Hex #7B
    Db  000h,000h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,000h,000h,000h,000h ;   Hex #7C
    Db  000h,000h,070h,018h,018h,018h,00Eh,018h,018h,018h,018h,070h,000h,000h,000h,000h ;   Hex #7D
    Db  000h,076h,0DCh,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #7E
    Db  000h,000h,000h,000h,010h,038h,06Ch,0C6h,0C6h,0C6h,0FEh,000h,000h,000h,000h,000h ;   Hex #7F
    Db  000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0C0h,0C0h,0C2h,066h,03Ch,018h,070h,000h,000h ;   Hex #80
    Db  000h,000h,0CCh,000h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #81
    Db  000h,00Ch,018h,030h,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #82
    Db  000h,010h,038h,06Ch,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #83
    Db  000h,000h,0CCh,000h,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #84
    Db  000h,060h,030h,018h,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #85
    Db  000h,038h,06Ch,038h,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #86
    Db  000h,000h,000h,000h,000h,07Ch,0C6h,0C0h,0C0h,0C0h,0C6h,07Ch,018h,070h,000h,000h ;   Hex #87
    Db  000h,010h,038h,06Ch,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #88
    Db  000h,000h,0C6h,000h,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #89
    Db  000h,060h,030h,018h,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #8A
    Db  000h,000h,066h,000h,000h,038h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #8B
    Db  000h,018h,03Ch,066h,000h,038h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #8C
    Db  000h,060h,030h,018h,000h,038h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #8D
    Db  000h,0C6h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #8E
    Db  038h,06Ch,038h,010h,038h,06Ch,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #8F
    Db  00Ch,018h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h,000h,000h ;   Hex #90
    Db  000h,000h,000h,000h,000h,0ECh,036h,036h,07Eh,0D8h,0D8h,06Eh,000h,000h,000h,000h ;   Hex #91
    Db  000h,000h,03Eh,06Ch,0CCh,0CCh,0FEh,0CCh,0CCh,0CCh,0CCh,0CEh,000h,000h,000h,000h ;   Hex #92
    Db  000h,010h,038h,06Ch,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #93
    Db  000h,000h,0C6h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #94
    Db  000h,060h,030h,018h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #95
    Db  000h,030h,078h,0CCh,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #96
    Db  000h,060h,030h,018h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #97
    Db  000h,000h,0C6h,000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Eh,006h,00Ch,078h,000h ;   Hex #98
    Db  000h,0C6h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #99
    Db  000h,0C6h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #9A
    Db  000h,018h,018h,07Ch,0C6h,0C0h,0C0h,0C0h,0C6h,07Ch,018h,018h,000h,000h,000h,000h ;   Hex #9B
    Db  000h,038h,06Ch,064h,060h,0F0h,060h,060h,060h,060h,0E6h,0FCh,000h,000h,000h,000h ;   Hex #9C
    Db  000h,000h,066h,066h,03Ch,018h,07Eh,018h,07Eh,018h,018h,018h,000h,000h,000h,000h ;   Hex #9D
    Db  000h,0F8h,0CCh,0CCh,0F8h,0C4h,0CCh,0DEh,0CCh,0CCh,0CCh,0C6h,000h,000h,000h,000h ;   Hex #9E
    Db  000h,00Eh,01Bh,018h,018h,018h,07Eh,018h,018h,018h,0D8h,070h,000h,000h,000h,000h ;   Hex #9F
    Db  000h,018h,030h,060h,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #A0
    Db  000h,00Ch,018h,030h,000h,038h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #A1
    Db  000h,018h,030h,060h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #A2
    Db  000h,018h,030h,060h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #A3
    Db  000h,000h,076h,0DCh,000h,0DCh,066h,066h,066h,066h,066h,066h,000h,000h,000h,000h ;   Hex #A4
    Db  076h,0DCh,000h,0C6h,0E6h,0F6h,0FEh,0DEh,0CEh,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #A5
    Db  000h,000h,03Ch,06Ch,06Ch,03Eh,000h,07Eh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #A6
    Db  000h,000h,038h,06Ch,06Ch,038h,000h,07Ch,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #A7
    Db  000h,000h,030h,030h,000h,030h,030h,060h,0C0h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #A8
    Db  000h,000h,000h,000h,000h,000h,0FEh,0C0h,0C0h,0C0h,0C0h,000h,000h,000h,000h,000h ;   Hex #A9
    Db  000h,000h,000h,000h,000h,000h,0FEh,006h,006h,006h,006h,000h,000h,000h,000h,000h ;   Hex #AA
    Db  000h,060h,0E0h,062h,066h,06Ch,018h,030h,060h,0DCh,086h,00Ch,018h,03Eh,000h,000h ;   Hex #AB
    Db  000h,060h,0E0h,062h,066h,06Ch,018h,030h,066h,0CEh,09Ah,03Fh,006h,006h,000h,000h ;   Hex #AC
    Db  000h,000h,018h,018h,000h,018h,018h,018h,03Ch,03Ch,03Ch,018h,000h,000h,000h,000h ;   Hex #AD
    Db  000h,000h,000h,000h,000h,036h,06Ch,0D8h,06Ch,036h,000h,000h,000h,000h,000h,000h ;   Hex #AE
    Db  000h,000h,000h,000h,000h,0D8h,06Ch,036h,06Ch,0D8h,000h,000h,000h,000h,000h,000h ;   Hex #AF
    Db  011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h ;   Hex #B0
    Db  055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh ;   Hex #B1
    Db  0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h ;   Hex #B2
    Db  018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B3
    Db  018h,018h,018h,018h,018h,018h,018h,0F8h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B4
    Db  018h,018h,018h,018h,018h,0F8h,018h,0F8h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B5
    Db  036h,036h,036h,036h,036h,036h,036h,0F6h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #B6
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #B7
    Db  000h,000h,000h,000h,000h,0F8h,018h,0F8h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B8
    Db  036h,036h,036h,036h,036h,0F6h,006h,0F6h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #B9
    Db  036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #BA
    Db  000h,000h,000h,000h,000h,0FEh,006h,0F6h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #BB
    Db  036h,036h,036h,036h,036h,0F6h,006h,0FEh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #BC
    Db  036h,036h,036h,036h,036h,036h,036h,0FEh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #BD
    Db  018h,018h,018h,018h,018h,0F8h,018h,0F8h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #BE
    Db  000h,000h,000h,000h,000h,000h,000h,0F8h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #BF
    Db  018h,018h,018h,018h,018h,018h,018h,01Fh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #C0
    Db  018h,018h,018h,018h,018h,018h,018h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #C1
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #C2
    Db  018h,018h,018h,018h,018h,018h,018h,01Fh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #C3
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #C4
    Db  018h,018h,018h,018h,018h,018h,018h,0FFh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #C5
    Db  018h,018h,018h,018h,018h,01Fh,018h,01Fh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #C6
    Db  036h,036h,036h,036h,036h,036h,036h,037h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #C7
    Db  036h,036h,036h,036h,036h,037h,030h,03Fh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #C8
    Db  000h,000h,000h,000h,000h,03Fh,030h,037h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #C9
    Db  036h,036h,036h,036h,036h,0F7h,000h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #CA
    Db  000h,000h,000h,000h,000h,0FFh,000h,0F7h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #CB
    Db  036h,036h,036h,036h,036h,037h,030h,037h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #CC
    Db  000h,000h,000h,000h,000h,0FFh,000h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #CD
    Db  036h,036h,036h,036h,036h,0F7h,000h,0F7h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #CE
    Db  018h,018h,018h,018h,018h,0FFh,000h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #CF
    Db  036h,036h,036h,036h,036h,036h,036h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #D0
    Db  000h,000h,000h,000h,000h,0FFh,000h,0FFh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #D1
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #D2
    Db  036h,036h,036h,036h,036h,036h,036h,03Fh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #D3
    Db  018h,018h,018h,018h,018h,01Fh,018h,01Fh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #D4
    Db  000h,000h,000h,000h,000h,01Fh,018h,01Fh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #D5
    Db  000h,000h,000h,000h,000h,000h,000h,03Fh,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #D6
    Db  036h,036h,036h,036h,036h,036h,036h,0FFh,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #D7
    Db  018h,018h,018h,018h,018h,0FFh,018h,0FFh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #D8
    Db  018h,018h,018h,018h,018h,018h,018h,0F8h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #D9
    Db  000h,000h,000h,000h,000h,000h,000h,01Fh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #DA
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DB
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DC
    Db  0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h ;   Hex #DD
    Db  00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh ;   Hex #DE
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #DF
    Db  000h,000h,000h,000h,000h,076h,0DCh,0D8h,0D8h,0D8h,0DCh,076h,000h,000h,000h,000h ;   Hex #E0
    Db  000h,000h,078h,0CCh,0CCh,0CCh,0D8h,0CCh,0C6h,0C6h,0C6h,0CCh,000h,000h,000h,000h ;   Hex #E1
    Db  000h,000h,0FEh,0C6h,0C6h,0C0h,0C0h,0C0h,0C0h,0C0h,0C0h,0C0h,000h,000h,000h,000h ;   Hex #E2
    Db  000h,000h,000h,000h,000h,0FEh,06Ch,06Ch,06Ch,06Ch,06Ch,06Ch,000h,000h,000h,000h ;   Hex #E3
    Db  000h,000h,0FEh,0C6h,060h,030h,018h,018h,030h,060h,0C6h,0FEh,000h,000h,000h,000h ;   Hex #E4
    Db  000h,000h,000h,000h,000h,07Eh,0D8h,0D8h,0D8h,0D8h,0D8h,070h,000h,000h,000h,000h ;   Hex #E5
    Db  000h,000h,000h,000h,000h,066h,066h,066h,066h,066h,066h,07Ch,060h,060h,0C0h,000h ;   Hex #E6
    Db  000h,000h,000h,000h,076h,0DCh,018h,018h,018h,018h,018h,018h,000h,000h,000h,000h ;   Hex #E7
    Db  000h,000h,07Eh,018h,03Ch,066h,066h,066h,066h,03Ch,018h,07Eh,000h,000h,000h,000h ;   Hex #E8
    Db  000h,000h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,06Ch,038h,000h,000h,000h,000h ;   Hex #E9
    Db  000h,000h,038h,06Ch,0C6h,0C6h,0C6h,06Ch,06Ch,06Ch,06Ch,0EEh,000h,000h,000h,000h ;   Hex #EA
    Db  000h,000h,01Eh,030h,018h,00Ch,03Eh,066h,066h,066h,066h,03Ch,000h,000h,000h,000h ;   Hex #EB
    Db  000h,000h,000h,000h,000h,07Eh,0DBh,0DBh,0DBh,07Eh,000h,000h,000h,000h,000h,000h ;   Hex #EC
    Db  000h,000h,000h,003h,006h,07Eh,0DBh,0DBh,0F3h,07Eh,060h,0C0h,000h,000h,000h,000h ;   Hex #ED
    Db  000h,000h,01Ch,030h,060h,060h,07Ch,060h,060h,060h,030h,01Ch,000h,000h,000h,000h ;   Hex #EE
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #EF
    Db  000h,000h,000h,000h,0FEh,000h,000h,0FEh,000h,000h,0FEh,000h,000h,000h,000h,000h ;   Hex #F0
    Db  000h,000h,000h,000h,018h,018h,07Eh,018h,018h,000h,000h,07Eh,000h,000h,000h,000h ;   Hex #F1
    Db  000h,000h,000h,030h,018h,00Ch,006h,00Ch,018h,030h,000h,07Eh,000h,000h,000h,000h ;   Hex #F2
    Db  000h,000h,000h,00Ch,018h,030h,060h,030h,018h,00Ch,000h,07Eh,000h,000h,000h,000h ;   Hex #F3
    Db  000h,000h,00Eh,01Bh,01Bh,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #F4
    Db  018h,018h,018h,018h,018h,018h,018h,018h,018h,0D8h,0D8h,0D8h,070h,000h,000h,000h ;   Hex #F5
    Db  000h,000h,000h,000h,000h,018h,000h,07Eh,000h,018h,000h,000h,000h,000h,000h,000h ;   Hex #F6
    Db  000h,000h,000h,000h,000h,076h,0DCh,000h,076h,0DCh,000h,000h,000h,000h,000h,000h ;   Hex #F7
    Db  000h,038h,06Ch,06Ch,038h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #F8
    Db  000h,000h,000h,000h,000h,000h,000h,018h,018h,000h,000h,000h,000h,000h,000h,000h ;   Hex #F9
    Db  000h,000h,000h,000h,000h,000h,000h,018h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FA
    Db  000h,00Fh,00Ch,00Ch,00Ch,00Ch,00Ch,0ECh,06Ch,06Ch,03Ch,01Ch,000h,000h,000h,000h ;   Hex #FB
    Db  000h,06Ch,036h,036h,036h,036h,036h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FC
    Db  000h,03Ch,066h,00Ch,018h,032h,07Eh,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FD
    Db  000h,000h,000h,000h,07Eh,07Eh,07Eh,07Eh,07Eh,07Eh,07Eh,000h,000h,000h,000h,000h ;   Hex #FE
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FF

=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\ega2\850-8x14.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
;***************************************************
;  CHARACTER FONT FILE
;  Source Assembler File
;
;        CODE PAGE: 850 
;  FONT RESOLUTION: 8 x 14 
;
;     DATE CREATED:05-28-1987
;
;
; Output file from: MULTIFON, Version 1A
;
;***************************************************
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #0
    Db  000h,000h,000h,07Eh,081h,0A5h,081h,081h,0BDh,099h,081h,07Eh,000h,000h ;   Hex #1
    Db  000h,000h,000h,07Eh,0FFh,0DBh,0FFh,0FFh,0C3h,0E7h,0FFh,07Eh,000h,000h ;   Hex #2
    Db  000h,000h,000h,000h,06Ch,0FEh,0FEh,0FEh,0FEh,07Ch,038h,010h,000h,000h ;   Hex #3
    Db  000h,000h,000h,000h,010h,038h,07Ch,0FEh,07Ch,038h,010h,000h,000h,000h ;   Hex #4
    Db  000h,000h,000h,018h,03Ch,03Ch,0E7h,0E7h,0E7h,018h,018h,03Ch,000h,000h ;   Hex #5
    Db  000h,000h,000h,018h,03Ch,07Eh,0FFh,0FFh,07Eh,018h,018h,03Ch,000h,000h ;   Hex #6
    Db  000h,000h,000h,000h,000h,000h,018h,03Ch,03Ch,018h,000h,000h,000h,000h ;   Hex #7
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0E7h,0C3h,0C3h,0E7h,0FFh,0FFh,0FFh,0FFh ;   Hex #8
    Db  000h,000h,000h,000h,000h,03Ch,066h,042h,042h,066h,03Ch,000h,000h,000h ;   Hex #9
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0C3h,099h,0BDh,0BDh,099h,0C3h,0FFh,0FFh,0FFh ;   Hex #A
    Db  000h,000h,000h,01Eh,00Eh,01Ah,032h,078h,0CCh,0CCh,0CCh,078h,000h,000h ;   Hex #B
    Db  000h,000h,000h,03Ch,066h,066h,066h,03Ch,018h,07Eh,018h,018h,000h,000h ;   Hex #C
    Db  000h,000h,000h,03Fh,033h,03Fh,030h,030h,030h,070h,0F0h,0E0h,000h,000h ;   Hex #D
    Db  000h,000h,000h,07Fh,063h,07Fh,063h,063h,063h,067h,0E7h,0E6h,0C0h,000h ;   Hex #E
    Db  000h,000h,000h,018h,018h,0DBh,03Ch,0E7h,03Ch,0DBh,018h,018h,000h,000h ;   Hex #F
    Db  000h,000h,000h,080h,0C0h,0E0h,0F8h,0FEh,0F8h,0E0h,0C0h,080h,000h,000h ;   Hex #10
    Db  000h,000h,000h,002h,006h,00Eh,03Eh,0FEh,03Eh,00Eh,006h,002h,000h,000h ;   Hex #11
    Db  000h,000h,000h,018h,03Ch,07Eh,018h,018h,018h,07Eh,03Ch,018h,000h,000h ;   Hex #12
    Db  000h,000h,000h,066h,066h,066h,066h,066h,066h,000h,066h,066h,000h,000h ;   Hex #13
    Db  000h,000h,000h,07Fh,0DBh,0DBh,0DBh,07Bh,01Bh,01Bh,01Bh,01Bh,000h,000h ;   Hex #14
    Db  000h,000h,07Ch,0C6h,060h,038h,06Ch,0C6h,0C6h,06Ch,038h,00Ch,0C6h,07Ch ;   Hex #15
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,0FEh,0FEh,0FEh,000h,000h ;   Hex #16
    Db  000h,000h,000h,018h,03Ch,07Eh,018h,018h,018h,07Eh,03Ch,018h,07Eh,000h ;   Hex #17
    Db  000h,000h,000h,018h,03Ch,07Eh,018h,018h,018h,018h,018h,018h,000h,000h ;   Hex #18
    Db  000h,000h,000h,018h,018h,018h,018h,018h,018h,07Eh,03Ch,018h,000h,000h ;   Hex #19
    Db  000h,000h,000h,000h,000h,018h,00Ch,0FEh,00Ch,018h,000h,000h,000h,000h ;   Hex #1A
    Db  000h,000h,000h,000h,000h,030h,060h,0FEh,060h,030h,000h,000h,000h,000h ;   Hex #1B
    Db  000h,000h,000h,000h,000h,000h,0C0h,0C0h,0C0h,0FEh,000h,000h,000h,000h ;   Hex #1C
    Db  000h,000h,000h,000h,000h,028h,06Ch,0FEh,06Ch,028h,000h,000h,000h,000h ;   Hex #1D
    Db  000h,000h,000h,000h,010h,038h,038h,07Ch,07Ch,0FEh,0FEh,000h,000h,000h ;   Hex #1E
    Db  000h,000h,000h,000h,0FEh,0FEh,07Ch,07Ch,038h,038h,010h,000h,000h,000h ;   Hex #1F
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #20
    Db  000h,000h,000h,018h,03Ch,03Ch,03Ch,018h,018h,000h,018h,018h,000h,000h ;   Hex #21
    Db  000h,066h,066h,066h,024h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #22
    Db  000h,000h,000h,06Ch,06Ch,0FEh,06Ch,06Ch,06Ch,0FEh,06Ch,06Ch,000h,000h ;   Hex #23
    Db  000h,018h,018h,07Ch,0C6h,0C2h,0C0h,07Ch,006h,086h,0C6h,07Ch,018h,018h ;   Hex #24
    Db  000h,000h,000h,000h,000h,0C2h,0C6h,00Ch,018h,030h,066h,0C6h,000h,000h ;   Hex #25
    Db  000h,000h,000h,038h,06Ch,06Ch,038h,076h,0DCh,0CCh,0CCh,076h,000h,000h ;   Hex #26
    Db  000h,018h,018h,018h,030h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #27
    Db  000h,000h,000h,00Ch,018h,030h,030h,030h,030h,030h,018h,00Ch,000h,000h ;   Hex #28
    Db  000h,000h,000h,030h,018h,00Ch,00Ch,00Ch,00Ch,00Ch,018h,030h,000h,000h ;   Hex #29
    Db  000h,000h,000h,000h,000h,066h,03Ch,0FFh,03Ch,066h,000h,000h,000h,000h ;   Hex #2A
    Db  000h,000h,000h,000h,000h,018h,018h,07Eh,018h,018h,000h,000h,000h,000h ;   Hex #2B
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,018h,018h,030h,000h ;   Hex #2C
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,000h,000h,000h,000h,000h,000h ;   Hex #2D
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,018h,000h,000h ;   Hex #2E
    Db  000h,000h,000h,002h,006h,00Ch,018h,030h,060h,0C0h,080h,000h,000h,000h ;   Hex #2F
    Db  000h,000h,000h,038h,06Ch,0C6h,0C6h,0D6h,0C6h,0C6h,06Ch,038h,000h,000h ;   Hex #30
    Db  000h,000h,000h,018h,038h,078h,018h,018h,018h,018h,018h,07Eh,000h,000h ;   Hex #31
    Db  000h,000h,000h,07Ch,0C6h,006h,00Ch,018h,030h,060h,0C6h,0FEh,000h,000h ;   Hex #32
    Db  000h,000h,000h,07Ch,0C6h,006h,006h,03Ch,006h,006h,0C6h,07Ch,000h,000h ;   Hex #33
    Db  000h,000h,000h,00Ch,01Ch,03Ch,06Ch,0CCh,0FEh,00Ch,00Ch,01Eh,000h,000h ;   Hex #34
    Db  000h,000h,000h,0FEh,0C0h,0C0h,0C0h,0FCh,006h,006h,0C6h,07Ch,000h,000h ;   Hex #35
    Db  000h,000h,000h,038h,060h,0C0h,0C0h,0FCh,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #36
    Db  000h,000h,000h,0FEh,0C6h,006h,00Ch,018h,030h,030h,030h,030h,000h,000h ;   Hex #37
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0C6h,07Ch,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #38
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0C6h,07Eh,006h,006h,00Ch,078h,000h,000h ;   Hex #39
    Db  000h,000h,000h,000h,018h,018h,000h,000h,000h,018h,018h,000h,000h,000h ;   Hex #3A
    Db  000h,000h,000h,000h,018h,018h,000h,000h,000h,018h,018h,030h,000h,000h ;   Hex #3B
    Db  000h,000h,000h,00Ch,018h,030h,060h,0C0h,060h,030h,018h,00Ch,000h,000h ;   Hex #3C
    Db  000h,000h,000h,000h,000h,000h,07Eh,000h,000h,07Eh,000h,000h,000h,000h ;   Hex #3D
    Db  000h,000h,000h,060h,030h,018h,00Ch,006h,00Ch,018h,030h,060h,000h,000h ;   Hex #3E
    Db  000h,000h,000h,07Ch,0C6h,0C6h,00Ch,018h,018h,000h,018h,018h,000h,000h ;   Hex #3F
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0DEh,0DEh,0DEh,0DCh,0C0h,07Ch,000h,000h ;   Hex #40
    Db  000h,000h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #41
    Db  000h,000h,000h,0FCh,066h,066h,066h,07Ch,066h,066h,066h,0FCh,000h,000h ;   Hex #42
    Db  000h,000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0C0h,0C2h,066h,03Ch,000h,000h ;   Hex #43
    Db  000h,000h,000h,0F8h,06Ch,066h,066h,066h,066h,066h,06Ch,0F8h,000h,000h ;   Hex #44
    Db  000h,000h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h ;   Hex #45
    Db  000h,000h,000h,0FEh,066h,062h,068h,078h,068h,060h,060h,0F0h,000h,000h ;   Hex #46
    Db  000h,000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0DEh,0C6h,066h,03Ah,000h,000h ;   Hex #47
    Db  000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,000h,000h ;   Hex #48
    Db  000h,000h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #49
    Db  000h,000h,000h,01Eh,00Ch,00Ch,00Ch,00Ch,00Ch,0CCh,0CCh,078h,000h,000h ;   Hex #4A
    Db  000h,000h,000h,0E6h,066h,06Ch,06Ch,078h,06Ch,06Ch,066h,0E6h,000h,000h ;   Hex #4B
    Db  000h,000h,000h,0F0h,060h,060h,060h,060h,060h,062h,066h,0FEh,000h,000h ;   Hex #4C
    Db  000h,000h,000h,0C6h,0EEh,0FEh,0D6h,0C6h,0C6h,0C6h,0C6h,0C6h,000h,000h ;   Hex #4D
    Db  000h,000h,000h,0C6h,0E6h,0F6h,0FEh,0DEh,0CEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #4E
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #4F
    Db  000h,000h,000h,0FCh,066h,066h,066h,07Ch,060h,060h,060h,0F0h,000h,000h ;   Hex #50
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0D6h,0DEh,07Ch,00Eh,000h ;   Hex #51
    Db  000h,000h,000h,0FCh,066h,066h,066h,07Ch,06Ch,066h,066h,0E6h,000h,000h ;   Hex #52
    Db  000h,000h,000h,07Ch,0C6h,0C6h,060h,038h,00Ch,0C6h,0C6h,07Ch,000h,000h ;   Hex #53
    Db  000h,000h,000h,07Eh,07Eh,05Ah,018h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #54
    Db  000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #55
    Db  000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,06Ch,038h,010h,000h,000h ;   Hex #56
    Db  000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0D6h,0D6h,0FEh,06Ch,06Ch,000h,000h ;   Hex #57
    Db  000h,000h,000h,0C6h,0C6h,0C6h,07Ch,038h,07Ch,0C6h,0C6h,0C6h,000h,000h ;   Hex #58
    Db  000h,000h,000h,066h,066h,066h,066h,03Ch,018h,018h,018h,03Ch,000h,000h ;   Hex #59
    Db  000h,000h,000h,0FEh,0C6h,08Ch,018h,030h,060h,0C2h,0C6h,0FEh,000h,000h ;   Hex #5A
    Db  000h,000h,000h,03Ch,030h,030h,030h,030h,030h,030h,030h,03Ch,000h,000h ;   Hex #5B
    Db  000h,000h,000h,080h,0C0h,0E0h,070h,038h,01Ch,00Eh,006h,002h,000h,000h ;   Hex #5C
    Db  000h,000h,000h,03Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,03Ch,000h,000h ;   Hex #5D
    Db  010h,038h,06Ch,0C6h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #5E
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,0FFh ;   Hex #5F
    Db  000h,030h,018h,00Ch,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #60
    Db  000h,000h,000h,000h,000h,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #61
    Db  000h,000h,000h,0E0h,060h,060h,078h,06Ch,066h,066h,066h,07Ch,000h,000h ;   Hex #62
    Db  000h,000h,000h,000h,000h,000h,07Ch,0C6h,0C0h,0C0h,0C6h,07Ch,000h,000h ;   Hex #63
    Db  000h,000h,000h,01Ch,00Ch,00Ch,03Ch,06Ch,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #64
    Db  000h,000h,000h,000h,000h,000h,07Ch,0C6h,0FEh,0C0h,0C6h,07Ch,000h,000h ;   Hex #65
    Db  000h,000h,000h,01Ch,036h,032h,030h,07Ch,030h,030h,030h,078h,000h,000h ;   Hex #66
    Db  000h,000h,000h,000h,000h,000h,076h,0CCh,0CCh,0CCh,07Ch,00Ch,0CCh,078h ;   Hex #67
    Db  000h,000h,000h,0E0h,060h,060h,06Ch,076h,066h,066h,066h,0E6h,000h,000h ;   Hex #68
    Db  000h,000h,000h,018h,018h,000h,038h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #69
    Db  000h,000h,000h,006h,006h,000h,00Eh,006h,006h,006h,006h,066h,066h,03Ch ;   Hex #6A
    Db  000h,000h,000h,0E0h,060h,060h,066h,06Ch,078h,06Ch,066h,0E6h,000h,000h ;   Hex #6B
    Db  000h,000h,000h,038h,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #6C
    Db  000h,000h,000h,000h,000h,000h,0ECh,0FEh,0D6h,0D6h,0D6h,0D6h,000h,000h ;   Hex #6D
    Db  000h,000h,000h,000h,000h,000h,0DCh,066h,066h,066h,066h,066h,000h,000h ;   Hex #6E
    Db  000h,000h,000h,000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #6F
    Db  000h,000h,000h,000h,000h,000h,0DCh,066h,066h,066h,07Ch,060h,060h,0F0h ;   Hex #70
    Db  000h,000h,000h,000h,000h,000h,076h,0CCh,0CCh,0CCh,07Ch,00Ch,00Ch,01Eh ;   Hex #71
    Db  000h,000h,000h,000h,000h,000h,0DCh,076h,066h,060h,060h,0F0h,000h,000h ;   Hex #72
    Db  000h,000h,000h,000h,000h,000h,07Ch,0C6h,070h,01Ch,0C6h,07Ch,000h,000h ;   Hex #73
    Db  000h,000h,000h,010h,030h,030h,0FCh,030h,030h,030h,036h,01Ch,000h,000h ;   Hex #74
    Db  000h,000h,000h,000h,000h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #75
    Db  000h,000h,000h,000h,000h,000h,0C6h,0C6h,0C6h,06Ch,038h,010h,000h,000h ;   Hex #76
    Db  000h,000h,000h,000h,000h,000h,0C6h,0C6h,0D6h,0D6h,0FEh,06Ch,000h,000h ;   Hex #77
    Db  000h,000h,000h,000h,000h,000h,0C6h,06Ch,038h,038h,06Ch,0C6h,000h,000h ;   Hex #78
    Db  000h,000h,000h,000h,000h,000h,0C6h,0C6h,0C6h,0C6h,07Eh,006h,00Ch,078h ;   Hex #79
    Db  000h,000h,000h,000h,000h,000h,0FEh,0CCh,018h,030h,066h,0FEh,000h,000h ;   Hex #7A
    Db  000h,000h,000h,00Eh,018h,018h,018h,070h,018h,018h,018h,00Eh,000h,000h ;   Hex #7B
    Db  000h,000h,000h,018h,018h,018h,018h,018h,018h,018h,018h,018h,000h,000h ;   Hex #7C
    Db  000h,000h,000h,070h,018h,018h,018h,00Eh,018h,018h,018h,070h,000h,000h ;   Hex #7D
    Db  000h,076h,0DCh,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #7E
    Db  000h,000h,000h,000h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,000h,000h,000h ;   Hex #7F
    Db  000h,000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0C0h,0C2h,066h,03Ch,00Ch,078h ;   Hex #80
    Db  000h,000h,000h,0CCh,000h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #81
    Db  000h,000h,00Ch,018h,030h,000h,07Ch,0C6h,0FEh,0C0h,0C6h,07Ch,000h,000h ;   Hex #82
    Db  000h,000h,010h,038h,06Ch,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #83
    Db  000h,000h,000h,0C6h,000h,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #84
    Db  000h,000h,060h,030h,018h,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #85
    Db  000h,000h,038h,06Ch,038h,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #86
    Db  000h,000h,000h,000h,000h,000h,07Ch,0C6h,0C0h,0C0h,0C6h,07Ch,00Ch,078h ;   Hex #87
    Db  000h,000h,010h,038h,06Ch,000h,07Ch,0C6h,0FEh,0C0h,0C6h,07Ch,000h,000h ;   Hex #88
    Db  000h,000h,000h,0C6h,000h,000h,07Ch,0C6h,0FEh,0C0h,0C6h,07Ch,000h,000h ;   Hex #89
    Db  000h,000h,060h,030h,018h,000h,07Ch,0C6h,0FEh,0C0h,0C6h,07Ch,000h,000h ;   Hex #8A
    Db  000h,000h,000h,066h,000h,000h,038h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #8B
    Db  000h,000h,018h,03Ch,066h,000h,038h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #8C
    Db  000h,000h,060h,030h,018h,000h,038h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #8D
    Db  000h,0C6h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #8E
    Db  038h,06Ch,038h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #8F
    Db  00Ch,018h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h ;   Hex #90
    Db  000h,000h,000h,000h,000h,000h,0ECh,036h,076h,0DCh,0D8h,06Eh,000h,000h ;   Hex #91
    Db  000h,000h,000h,03Eh,06Ch,0CCh,0CCh,0FEh,0CCh,0CCh,0CCh,0CEh,000h,000h ;   Hex #92
    Db  000h,000h,010h,038h,06Ch,000h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #93
    Db  000h,000h,000h,0C6h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #94
    Db  000h,000h,060h,030h,018h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #95
    Db  000h,000h,030h,078h,0CCh,000h,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #96
    Db  000h,000h,060h,030h,018h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #97
    Db  000h,000h,000h,0C6h,000h,000h,0C6h,0C6h,0C6h,0C6h,07Eh,006h,00Ch,078h ;   Hex #98
    Db  000h,0C6h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #99
    Db  000h,0C6h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #9A
    Db  000h,000h,000h,000h,000h,000h,07Ch,0CEh,0DEh,0F6h,0E6h,07Ch,000h,000h ;   Hex #9B
    Db  000h,000h,038h,06Ch,064h,060h,0F0h,060h,060h,060h,0E6h,0FCh,000h,000h ;   Hex #9C
    Db  000h,000h,004h,07Ch,0CEh,0CEh,0D6h,0D6h,0D6h,0E6h,0E6h,07Ch,040h,000h ;   Hex #9D
    Db  000h,000h,000h,000h,000h,0C6h,06Ch,038h,038h,06Ch,0C6h,000h,000h,000h ;   Hex #9E
    Db  000h,000h,00Eh,01Bh,018h,018h,018h,07Eh,018h,018h,018h,0D8h,070h,000h ;   Hex #9F
    Db  000h,000h,00Ch,018h,030h,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #A0
    Db  000h,000h,00Ch,018h,030h,000h,038h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #A1
    Db  000h,000h,00Ch,018h,030h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #A2
    Db  000h,000h,00Ch,018h,030h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #A3
    Db  000h,000h,000h,076h,0DCh,000h,0DCh,066h,066h,066h,066h,066h,000h,000h ;   Hex #A4
    Db  076h,0DCh,000h,0C6h,0E6h,0F6h,0FEh,0DEh,0CEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #A5
    Db  000h,000h,03Ch,06Ch,06Ch,03Eh,000h,07Eh,000h,000h,000h,000h,000h,000h ;   Hex #A6
    Db  000h,000h,038h,06Ch,06Ch,038h,000h,07Ch,000h,000h,000h,000h,000h,000h ;   Hex #A7
    Db  000h,000h,000h,030h,030h,000h,030h,030h,060h,0C6h,0C6h,07Ch,000h,000h ;   Hex #A8
    Db  000h,000h,000h,038h,044h,0BAh,0AAh,0B2h,0AAh,0AAh,044h,038h,000h,000h ;   Hex #A9
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,006h,006h,006h,000h,000h,000h ;   Hex #AA
    Db  000h,000h,060h,0E0h,063h,066h,06Ch,018h,030h,06Eh,0C3h,006h,00Ch,01Fh ;   Hex #AB
    Db  000h,000h,060h,0E0h,063h,066h,06Ch,01Ah,036h,06Eh,0DAh,03Fh,006h,006h ;   Hex #AC
    Db  000h,000h,000h,018h,018h,000h,018h,018h,03Ch,03Ch,03Ch,018h,000h,000h ;   Hex #AD
    Db  000h,000h,000h,000h,000h,036h,06Ch,0D8h,06Ch,036h,000h,000h,000h,000h ;   Hex #AE
    Db  000h,000h,000h,000h,000h,0D8h,06Ch,036h,06Ch,0D8h,000h,000h,000h,000h ;   Hex #AF
    Db  011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h ;   Hex #B0
    Db  055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh ;   Hex #B1
    Db  0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h ;   Hex #B2
    Db  018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B3
    Db  018h,018h,018h,018h,018h,018h,018h,0F8h,018h,018h,018h,018h,018h,018h ;   Hex #B4
    Db  030h,060h,0C0h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #B5
    Db  038h,06Ch,0C6h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #B6
    Db  018h,00Ch,006h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #B7
    Db  000h,000h,000h,038h,044h,09Ah,0A2h,0A2h,0A2h,09Ah,044h,038h,000h,000h ;   Hex #B8
    Db  036h,036h,036h,036h,036h,0F6h,006h,0F6h,036h,036h,036h,036h,036h,036h ;   Hex #B9
    Db  036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #BA
    Db  000h,000h,000h,000h,000h,0FEh,006h,0F6h,036h,036h,036h,036h,036h,036h ;   Hex #BB
    Db  036h,036h,036h,036h,036h,0F6h,006h,0FEh,000h,000h,000h,000h,000h,000h ;   Hex #BC
    Db  000h,000h,018h,018h,07Ch,0C6h,0C0h,0C0h,0C6h,07Ch,018h,018h,000h,000h ;   Hex #BD
    Db  000h,000h,000h,066h,066h,03Ch,018h,07Eh,018h,07Eh,018h,018h,000h,000h ;   Hex #BE
    Db  000h,000h,000h,000h,000h,000h,000h,0F8h,018h,018h,018h,018h,018h,018h ;   Hex #BF
    Db  018h,018h,018h,018h,018h,018h,018h,01Fh,000h,000h,000h,000h,000h,000h ;   Hex #C0
    Db  018h,018h,018h,018h,018h,018h,018h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #C1
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,018h,018h,018h,018h,018h,018h ;   Hex #C2
    Db  018h,018h,018h,018h,018h,018h,018h,01Fh,018h,018h,018h,018h,018h,018h ;   Hex #C3
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #C4
    Db  018h,018h,018h,018h,018h,018h,018h,0FFh,018h,018h,018h,018h,018h,018h ;   Hex #C5
    Db  000h,000h,000h,076h,0DCh,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #C6
    Db  076h,0DCh,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #C7
    Db  036h,036h,036h,036h,036h,037h,030h,03Fh,000h,000h,000h,000h,000h,000h ;   Hex #C8
    Db  000h,000h,000h,000h,000h,03Fh,030h,037h,036h,036h,036h,036h,036h,036h ;   Hex #C9
    Db  036h,036h,036h,036h,036h,0F7h,000h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #CA
    Db  000h,000h,000h,000h,000h,0FFh,000h,0F7h,036h,036h,036h,036h,036h,036h ;   Hex #CB
    Db  036h,036h,036h,036h,036h,037h,030h,037h,036h,036h,036h,036h,036h,036h ;   Hex #CC
    Db  000h,000h,000h,000h,000h,0FFh,000h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #CD
    Db  036h,036h,036h,036h,036h,0F7h,000h,0F7h,036h,036h,036h,036h,036h,036h ;   Hex #CE
    Db  000h,000h,000h,000h,000h,0C6h,07Ch,0C6h,0C6h,0C6h,07Ch,0C6h,000h,000h ;   Hex #CF
    Db  000h,000h,000h,034h,018h,02Ch,006h,03Eh,066h,066h,066h,03Ch,000h,000h ;   Hex #D0
    Db  000h,000h,000h,0F8h,06Ch,066h,066h,0F6h,066h,066h,06Ch,0F8h,000h,000h ;   Hex #D1
    Db  038h,06Ch,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h ;   Hex #D2
    Db  000h,0C6h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h ;   Hex #D3
    Db  030h,018h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h ;   Hex #D4
    Db  000h,000h,000h,000h,000h,000h,038h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #D5
    Db  00Ch,018h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #D6
    Db  03Ch,066h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #D7
    Db  000h,066h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #D8
    Db  018h,018h,018h,018h,018h,018h,018h,0F8h,000h,000h,000h,000h,000h,000h ;   Hex #D9
    Db  000h,000h,000h,000h,000h,000h,000h,01Fh,018h,018h,018h,018h,018h,018h ;   Hex #DA
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DB
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DC
    Db  000h,000h,018h,018h,018h,018h,000h,000h,000h,018h,018h,018h,018h,000h ;   Hex #DD
    Db  030h,018h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #DE
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,000h,000h,000h,000h,000h,000h,000h ;   Hex #DF
    Db  018h,030h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #E0
    Db  000h,000h,000h,078h,0CCh,0CCh,0CCh,0D8h,0CCh,0C6h,0C6h,0CCh,000h,000h ;   Hex #E1
    Db  038h,06Ch,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #E2
    Db  030h,018h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #E3
    Db  000h,000h,000h,076h,0DCh,000h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #E4
    Db  076h,0DCh,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #E5
    Db  000h,000h,000h,000h,000h,000h,066h,066h,066h,066h,066h,07Ch,060h,0C0h ;   Hex #E6
    Db  000h,000h,000h,0E0h,060h,060h,07Ch,066h,066h,066h,066h,07Ch,060h,0F0h ;   Hex #E7
    Db  000h,000h,000h,0F0h,060h,07Ch,066h,066h,066h,07Ch,060h,0F0h,000h,000h ;   Hex #E8
    Db  018h,030h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #E9
    Db  038h,06Ch,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #EA
    Db  030h,018h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #EB
    Db  000h,000h,00Ch,018h,030h,000h,0C6h,0C6h,0C6h,0C6h,07Eh,006h,00Ch,0F8h ;   Hex #EC
    Db  00Ch,018h,000h,066h,066h,066h,066h,03Ch,018h,018h,018h,03Ch,000h,000h ;   Hex #ED
    Db  000h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #EE
    Db  000h,00Ch,018h,030h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #EF
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,000h,000h,000h,000h,000h,000h ;   Hex #F0
    Db  000h,000h,000h,000h,018h,018h,07Eh,018h,018h,000h,000h,07Eh,000h,000h ;   Hex #F1
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,0FFh,000h,0FFh ;   Hex #F2
    Db  000h,0E0h,030h,063h,036h,0ECh,018h,036h,06Eh,0DAh,03Fh,006h,006h,000h ;   Hex #F3
    Db  000h,000h,000h,07Fh,0DBh,0DBh,0DBh,07Bh,01Bh,01Bh,01Bh,01Bh,000h,000h ;   Hex #F4
    Db  000h,000h,07Ch,0C6h,060h,038h,06Ch,0C6h,0C6h,06Ch,038h,00Ch,0C6h,07Ch ;   Hex #F5
    Db  000h,000h,000h,000h,000h,018h,000h,07Eh,000h,018h,000h,000h,000h,000h ;   Hex #F6
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,00Ch,078h ;   Hex #F7
    Db  000h,038h,06Ch,06Ch,038h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #F8
    Db  000h,0C6h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #F9
    Db  000h,000h,000h,000h,000h,000h,000h,018h,000h,000h,000h,000h,000h,000h ;   Hex #FA
    Db  000h,018h,038h,018h,018h,018h,03Ch,000h,000h,000h,000h,000h,000h,000h ;   Hex #FB
    Db  000h,078h,00Ch,038h,00Ch,00Ch,078h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FC
    Db  000h,03Ch,066h,00Ch,018h,032h,07Eh,000h,000h,000h,000h,000h,000h,000h ;   Hex #FD
    Db  000h,000h,000h,000h,000h,07Eh,07Eh,07Eh,07Eh,07Eh,07Eh,000h,000h,000h ;   Hex #FE
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FF


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\ega2\850-8x8.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
;***************************************************
;  CHARACTER FONT FILE
;  Source Assembler File
;
;	 CODE PAGE: 850
;  FONT RESOLUTION: 8 x 8
;
;     DATE CREATED:05-28-1987
;
;
; Output file from: MULTIFON, Version 1A
;
;***************************************************
    Db	000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #0
    Db	07Eh,081h,0A5h,081h,0BDh,099h,081h,07Eh ;   Hex #1
    Db	07Eh,0FFh,0DBh,0FFh,0C3h,0E7h,0FFh,07Eh ;   Hex #2
    Db	06Ch,0FEh,0FEh,0FEh,07Ch,038h,010h,000h ;   Hex #3
    Db	010h,038h,07Ch,0FEh,07Ch,038h,010h,000h ;   Hex #4
    Db	038h,07Ch,038h,0FEh,0FEh,0D6h,010h,038h ;   Hex #5
    Db	010h,038h,07Ch,0FEh,0FEh,07Ch,010h,038h ;   Hex #6
    Db	000h,000h,018h,03Ch,03Ch,018h,000h,000h ;   Hex #7
    Db	0FFh,0FFh,0E7h,0C3h,0C3h,0E7h,0FFh,0FFh ;   Hex #8
    Db	000h,03Ch,066h,042h,042h,066h,03Ch,000h ;   Hex #9
    Db	0FFh,0C3h,099h,0BDh,0BDh,099h,0C3h,0FFh ;   Hex #A
    Db	00Fh,007h,00Fh,07Dh,0CCh,0CCh,0CCh,078h ;   Hex #B
    Db	03Ch,066h,066h,066h,03Ch,018h,07Eh,018h ;   Hex #C
    Db	03Fh,033h,03Fh,030h,030h,070h,0F0h,0E0h ;   Hex #D
    Db	07Fh,063h,07Fh,063h,063h,067h,0E6h,0C0h ;   Hex #E
    Db	018h,0DBh,03Ch,0E7h,0E7h,03Ch,0DBh,018h ;   Hex #F
    Db	080h,0E0h,0F8h,0FEh,0F8h,0E0h,080h,000h ;   Hex #10
    Db	002h,00Eh,03Eh,0FEh,03Eh,00Eh,002h,000h ;   Hex #11
    Db	018h,03Ch,07Eh,018h,018h,07Eh,03Ch,018h ;   Hex #12
    Db	066h,066h,066h,066h,066h,000h,066h,000h ;   Hex #13
    Db	07Fh,0DBh,0DBh,07Bh,01Bh,01Bh,01Bh,000h ;   Hex #14
    Db	03Eh,061h,03Ch,066h,066h,03Ch,086h,07Ch ;   Hex #15
    Db	000h,000h,000h,000h,07Eh,07Eh,07Eh,000h ;   Hex #16
    Db	018h,03Ch,07Eh,018h,07Eh,03Ch,018h,0FFh ;   Hex #17
    Db	018h,03Ch,07Eh,018h,018h,018h,018h,000h ;   Hex #18
    Db	018h,018h,018h,018h,07Eh,03Ch,018h,000h ;   Hex #19
    Db	000h,018h,00Ch,0FEh,00Ch,018h,000h,000h ;   Hex #1A
    Db	000h,030h,060h,0FEh,060h,030h,000h,000h ;   Hex #1B
    Db	000h,000h,0C0h,0C0h,0C0h,0FEh,000h,000h ;   Hex #1C
    Db	000h,024h,066h,0FFh,066h,024h,000h,000h ;   Hex #1D
    Db	000h,018h,03Ch,07Eh,0FFh,0FFh,000h,000h ;   Hex #1E
    Db	000h,0FFh,0FFh,07Eh,03Ch,018h,000h,000h ;   Hex #1F
    Db	000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #20
    Db	018h,03Ch,03Ch,018h,018h,000h,018h,000h ;   Hex #21
    Db	066h,066h,024h,000h,000h,000h,000h,000h ;   Hex #22
    Db	06Ch,06Ch,0FEh,06Ch,0FEh,06Ch,06Ch,000h ;   Hex #23
    Db	018h,03Eh,060h,03Ch,006h,07Ch,018h,000h ;   Hex #24
    Db	000h,0C6h,0CCh,018h,030h,066h,0C6h,000h ;   Hex #25
    Db	038h,06Ch,038h,076h,0DCh,0CCh,076h,000h ;   Hex #26
    Db	018h,018h,030h,000h,000h,000h,000h,000h ;   Hex #27
    Db	00Ch,018h,030h,030h,030h,018h,00Ch,000h ;   Hex #28
    Db	030h,018h,00Ch,00Ch,00Ch,018h,030h,000h ;   Hex #29
    Db	000h,066h,03Ch,0FFh,03Ch,066h,000h,000h ;   Hex #2A
    Db	000h,018h,018h,07Eh,018h,018h,000h,000h ;   Hex #2B
    Db	000h,000h,000h,000h,000h,018h,018h,030h ;   Hex #2C
    Db	000h,000h,000h,07Eh,000h,000h,000h,000h ;   Hex #2D
    Db	000h,000h,000h,000h,000h,018h,018h,000h ;   Hex #2E
    Db	006h,00Ch,018h,030h,060h,0C0h,080h,000h ;   Hex #2F
    Db	038h,06Ch,0C6h,0D6h,0C6h,06Ch,038h,000h ;   Hex #30
    Db	018h,038h,018h,018h,018h,018h,07Eh,000h ;   Hex #31
    Db	07Ch,0C6h,006h,01Ch,030h,066h,0FEh,000h ;   Hex #32
    Db	07Ch,0C6h,006h,03Ch,006h,0C6h,07Ch,000h ;   Hex #33
    Db	01Ch,03Ch,06Ch,0CCh,0FEh,00Ch,01Eh,000h ;   Hex #34
    Db	0FEh,0C0h,0C0h,0FCh,006h,0C6h,07Ch,000h ;   Hex #35
    Db	038h,060h,0C0h,0FCh,0C6h,0C6h,07Ch,000h ;   Hex #36
    Db	0FEh,0C6h,00Ch,018h,030h,030h,030h,000h ;   Hex #37
    Db	07Ch,0C6h,0C6h,07Ch,0C6h,0C6h,07Ch,000h ;   Hex #38
    Db	07Ch,0C6h,0C6h,07Eh,006h,00Ch,078h,000h ;   Hex #39
    Db	000h,018h,018h,000h,000h,018h,018h,000h ;   Hex #3A
    Db	000h,018h,018h,000h,000h,018h,018h,030h ;   Hex #3B
    Db	006h,00Ch,018h,030h,018h,00Ch,006h,000h ;   Hex #3C
    Db	000h,000h,07Eh,000h,000h,07Eh,000h,000h ;   Hex #3D
    Db	060h,030h,018h,00Ch,018h,030h,060h,000h ;   Hex #3E
    Db	07Ch,0C6h,00Ch,018h,018h,000h,018h,000h ;   Hex #3F
    Db	07Ch,0C6h,0DEh,0DEh,0DEh,0C0h,078h,000h ;   Hex #40
    Db	038h,06Ch,0C6h,0FEh,0C6h,0C6h,0C6h,000h ;   Hex #41
    Db	0FCh,066h,066h,07Ch,066h,066h,0FCh,000h ;   Hex #42
    Db	03Ch,066h,0C0h,0C0h,0C0h,066h,03Ch,000h ;   Hex #43
    Db	0F8h,06Ch,066h,066h,066h,06Ch,0F8h,000h ;   Hex #44
    Db	0FEh,062h,068h,078h,068h,062h,0FEh,000h ;   Hex #45
    Db	0FEh,062h,068h,078h,068h,060h,0F0h,000h ;   Hex #46
    Db	03Ch,066h,0C0h,0C0h,0CEh,066h,03Ah,000h ;   Hex #47
    Db	0C6h,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h ;   Hex #48
    Db	03Ch,018h,018h,018h,018h,018h,03Ch,000h ;   Hex #49
    Db	01Eh,00Ch,00Ch,00Ch,0CCh,0CCh,078h,000h ;   Hex #4A
    Db	0E6h,066h,06Ch,078h,06Ch,066h,0E6h,000h ;   Hex #4B
    Db	0F0h,060h,060h,060h,062h,066h,0FEh,000h ;   Hex #4C
    Db	0C6h,0EEh,0FEh,0FEh,0D6h,0C6h,0C6h,000h ;   Hex #4D
    Db	0C6h,0E6h,0F6h,0DEh,0CEh,0C6h,0C6h,000h ;   Hex #4E
    Db	07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #4F
    Db	0FCh,066h,066h,07Ch,060h,060h,0F0h,000h ;   Hex #50
    Db	07Ch,0C6h,0C6h,0C6h,0C6h,0CEh,07Ch,00Eh ;   Hex #51
    Db	0FCh,066h,066h,07Ch,06Ch,066h,0E6h,000h ;   Hex #52
    Db	03Ch,066h,030h,018h,00Ch,066h,03Ch,000h ;   Hex #53
    Db	07Eh,07Eh,05Ah,018h,018h,018h,03Ch,000h ;   Hex #54
    Db	0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #55
    Db	0C6h,0C6h,0C6h,0C6h,0C6h,06Ch,038h,000h ;   Hex #56
    Db	0C6h,0C6h,0C6h,0D6h,0D6h,0FEh,06Ch,000h ;   Hex #57
    Db	0C6h,0C6h,06Ch,038h,06Ch,0C6h,0C6h,000h ;   Hex #58
    Db	066h,066h,066h,03Ch,018h,018h,03Ch,000h ;   Hex #59
    Db	0FEh,0C6h,08Ch,018h,032h,066h,0FEh,000h ;   Hex #5A
    Db	03Ch,030h,030h,030h,030h,030h,03Ch,000h ;   Hex #5B
    Db	0C0h,060h,030h,018h,00Ch,006h,002h,000h ;   Hex #5C
    Db	03Ch,00Ch,00Ch,00Ch,00Ch,00Ch,03Ch,000h ;   Hex #5D
    Db	010h,038h,06Ch,0C6h,000h,000h,000h,000h ;   Hex #5E
    Db	000h,000h,000h,000h,000h,000h,000h,0FFh ;   Hex #5F
    Db	030h,018h,00Ch,000h,000h,000h,000h,000h ;   Hex #60
    Db	000h,000h,078h,00Ch,07Ch,0CCh,076h,000h ;   Hex #61
    Db	0E0h,060h,07Ch,066h,066h,066h,0DCh,000h ;   Hex #62
    Db	000h,000h,07Ch,0C6h,0C0h,0C6h,07Ch,000h ;   Hex #63
    Db	01Ch,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h ;   Hex #64
    Db	000h,000h,07Ch,0C6h,0FEh,0C0h,07Ch,000h ;   Hex #65
    Db	03Ch,066h,060h,0F8h,060h,060h,0F0h,000h ;   Hex #66
    Db	000h,000h,076h,0CCh,0CCh,07Ch,00Ch,0F8h ;   Hex #67
    Db	0E0h,060h,06Ch,076h,066h,066h,0E6h,000h ;   Hex #68
    Db	018h,000h,038h,018h,018h,018h,03Ch,000h ;   Hex #69
    Db	006h,000h,006h,006h,006h,066h,066h,03Ch ;   Hex #6A
    Db	0E0h,060h,066h,06Ch,078h,06Ch,0E6h,000h ;   Hex #6B
    Db	038h,018h,018h,018h,018h,018h,03Ch,000h ;   Hex #6C
    Db	000h,000h,0ECh,0FEh,0D6h,0D6h,0D6h,000h ;   Hex #6D
    Db	000h,000h,0DCh,066h,066h,066h,066h,000h ;   Hex #6E
    Db	000h,000h,07Ch,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #6F
    Db	000h,000h,0DCh,066h,066h,07Ch,060h,0F0h ;   Hex #70
    Db	000h,000h,076h,0CCh,0CCh,07Ch,00Ch,01Eh ;   Hex #71
    Db	000h,000h,0DCh,076h,060h,060h,0F0h,000h ;   Hex #72
    Db	000h,000h,07Eh,0C0h,07Ch,006h,0FCh,000h ;   Hex #73
    Db	030h,030h,0FCh,030h,030h,036h,01Ch,000h ;   Hex #74
    Db	000h,000h,0CCh,0CCh,0CCh,0CCh,076h,000h ;   Hex #75
    Db	000h,000h,0C6h,0C6h,0C6h,06Ch,038h,000h ;   Hex #76
    Db	000h,000h,0C6h,0D6h,0D6h,0FEh,06Ch,000h ;   Hex #77
    Db	000h,000h,0C6h,06Ch,038h,06Ch,0C6h,000h ;   Hex #78
    Db	000h,000h,0C6h,0C6h,0C6h,07Eh,006h,0FCh ;   Hex #79
    Db	000h,000h,07Eh,04Ch,018h,032h,07Eh,000h ;   Hex #7A
    Db	00Eh,018h,018h,070h,018h,018h,00Eh,000h ;   Hex #7B
    Db	018h,018h,018h,018h,018h,018h,018h,000h ;   Hex #7C
    Db	070h,018h,018h,00Eh,018h,018h,070h,000h ;   Hex #7D
    Db	076h,0DCh,000h,000h,000h,000h,000h,000h ;   Hex #7E
    Db	000h,010h,038h,06Ch,0C6h,0C6h,0FEh,000h ;   Hex #7F
    Db	07Ch,0C6h,0C0h,0C0h,0C6h,07Ch,00Ch,078h ;   Hex #80
    Db	0CCh,000h,0CCh,0CCh,0CCh,0CCh,076h,000h ;   Hex #81
    Db	00Ch,018h,07Ch,0C6h,0FEh,0C0h,07Ch,000h ;   Hex #82
    Db	07Ch,082h,078h,00Ch,07Ch,0CCh,076h,000h ;   Hex #83
    Db	0C6h,000h,078h,00Ch,07Ch,0CCh,076h,000h ;   Hex #84
    Db	030h,018h,078h,00Ch,07Ch,0CCh,076h,000h ;   Hex #85
    Db	030h,030h,078h,00Ch,07Ch,0CCh,076h,000h ;   Hex #86
    Db	000h,000h,07Eh,0C0h,0C0h,07Eh,00Ch,038h ;   Hex #87
    Db	07Ch,082h,07Ch,0C6h,0FEh,0C0h,07Ch,000h ;   Hex #88
    Db	0C6h,000h,07Ch,0C6h,0FEh,0C0h,07Ch,000h ;   Hex #89
    Db	030h,018h,07Ch,0C6h,0FEh,0C0h,07Ch,000h ;   Hex #8A
    Db	066h,000h,038h,018h,018h,018h,03Ch,000h ;   Hex #8B
    Db	07Ch,082h,038h,018h,018h,018h,03Ch,000h ;   Hex #8C
    Db	030h,018h,000h,038h,018h,018h,03Ch,000h ;   Hex #8D
    Db	0C6h,038h,06Ch,0C6h,0FEh,0C6h,0C6h,000h ;   Hex #8E
    Db	038h,06Ch,07Ch,0C6h,0FEh,0C6h,0C6h,000h ;   Hex #8F
    Db	018h,030h,0FEh,0C0h,0F8h,0C0h,0FEh,000h ;   Hex #90
    Db	000h,000h,07Eh,012h,0fEh,090h,0fEh,000h ;   Hex #91
    Db	03Eh,06Ch,0CCh,0FEh,0CCh,0CCh,0CEh,000h ;   Hex #92
    Db	07Ch,082h,07Ch,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #93
    Db	0C6h,000h,07Ch,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #94
    Db	030h,018h,07Ch,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #95
    Db	078h,084h,000h,0CCh,0CCh,0CCh,076h,000h ;   Hex #96
    Db	060h,030h,0CCh,0CCh,0CCh,0CCh,076h,000h ;   Hex #97
    Db	0C6h,000h,0C6h,0C6h,0C6h,07Eh,006h,0FCh ;   Hex #98
    Db	0C6h,038h,06Ch,0C6h,0C6h,06Ch,038h,000h ;   Hex #99
    Db	0C6h,000h,0C6h,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #9A
    Db	000h,002h,07Ch,0CEh,0D6h,0E6h,07Ch,080h ;   Hex #9B
    Db	038h,06Ch,064h,0F0h,060h,066h,0FCh,000h ;   Hex #9C
    Db	03Ah,06Ch,0CEh,0D6h,0E6h,06Ch,0B8h,000h ;   Hex #9D
    Db	000h,0C6h,06Ch,038h,06Ch,0C6h,000h,000h ;   Hex #9E
    Db	00Eh,01Bh,018h,03Ch,018h,0D8h,070h,000h ;   Hex #9F
    Db	018h,030h,078h,00Ch,07Ch,0CCh,076h,000h ;   Hex #A0
    Db	00Ch,018h,000h,038h,018h,018h,03Ch,000h ;   Hex #A1
    Db	00Ch,018h,07Ch,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #A2
    Db	018h,030h,0CCh,0CCh,0CCh,0CCh,076h,000h ;   Hex #A3
    Db	076h,0DCh,000h,0DCh,066h,066h,066h,000h ;   Hex #A4
    Db	076h,0DCh,000h,0E6h,0F6h,0DEh,0CEh,000h ;   Hex #A5
    Db	03Ch,06Ch,06Ch,03Eh,000h,07Eh,000h,000h ;   Hex #A6
    Db	038h,06Ch,06Ch,038h,000h,07Ch,000h,000h ;   Hex #A7
    Db	018h,000h,018h,018h,030h,063h,03Eh,000h ;   Hex #A8
    Db	07Eh,081h,0B9h,0A5h,0B9h,0A5h,081h,07Eh ;   Hex #A9
    Db	000h,000h,000h,0FEh,006h,006h,000h,000h ;   Hex #AA
    Db	063h,0E6h,06Ch,07Eh,033h,066h,0CCh,00Fh ;   Hex #AB
    Db	063h,0E6h,06Ch,07Ah,036h,06Ah,0DFh,006h ;   Hex #AC
    Db	018h,000h,018h,018h,03Ch,03Ch,018h,000h ;   Hex #AD
    Db	000h,033h,066h,0CCh,066h,033h,000h,000h ;   Hex #AE
    Db	000h,0CCh,066h,033h,066h,0CCh,000h,000h ;   Hex #AF
    Db	022h,088h,022h,088h,022h,088h,022h,088h ;   Hex #B0
    Db	055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh ;   Hex #B1
    Db	077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh ;   Hex #B2
    Db	018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B3
    Db	018h,018h,018h,018h,0F8h,018h,018h,018h ;   Hex #B4
    Db	030h,060h,038h,06Ch,0C6h,0FEh,0C6h,000h ;   Hex #B5
    Db	07Ch,082h,038h,06Ch,0C6h,0FEh,0C6h,000h ;   Hex #B6
    Db	018h,00Ch,038h,06Ch,0C6h,0FEh,0C6h,000h ;   Hex #B7
    Db	07Eh,081h,09Dh,0A1h,0A1h,09Dh,081h,07Eh ;   Hex #B8
    Db	036h,036h,0F6h,006h,0F6h,036h,036h,036h ;   Hex #B9
    Db	036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #BA
    Db	000h,000h,0FEh,006h,0F6h,036h,036h,036h ;   Hex #BB
    Db	036h,036h,0F6h,006h,0FEh,000h,000h,000h ;   Hex #BC
    Db	018h,018h,07Eh,0C0h,0C0h,07Eh,018h,018h ;   Hex #BD
    Db	066h,066h,03Ch,07Eh,018h,07Eh,018h,018h ;   Hex #BE
    Db	000h,000h,000h,000h,0F8h,018h,018h,018h ;   Hex #BF
    Db	018h,018h,018h,018h,01Fh,000h,000h,000h ;   Hex #C0
    Db	018h,018h,018h,018h,0FFh,000h,000h,000h ;   Hex #C1
    Db	000h,000h,000h,000h,0FFh,018h,018h,018h ;   Hex #C2
    Db	018h,018h,018h,018h,01Fh,018h,018h,018h ;   Hex #C3
    Db	000h,000h,000h,000h,0FFh,000h,000h,000h ;   Hex #C4
    Db	018h,018h,018h,018h,0FFh,018h,018h,018h ;   Hex #C5
    Db	076h,0DCh,07Ch,006h,07Eh,0C6h,07Eh,000h ;   Hex #C6
    Db	076h,0DCh,038h,06Ch,0C6h,0FEh,0C6h,000h ;   Hex #C7
    Db	036h,036h,037h,030h,03Fh,000h,000h,000h ;   Hex #C8
    Db	000h,000h,03Fh,030h,037h,036h,036h,036h ;   Hex #C9
    Db	036h,036h,0F7h,000h,0FFh,000h,000h,000h ;   Hex #CA
    Db	000h,000h,0FFh,000h,0F7h,036h,036h,036h ;   Hex #CB
    Db	036h,036h,037h,030h,037h,036h,036h,036h ;   Hex #CC
    Db	000h,000h,0FFh,000h,0FFh,000h,000h,000h ;   Hex #CD
    Db	036h,036h,0F7h,000h,0F7h,036h,036h,036h ;   Hex #CE
    Db	000h,0C6h,07Ch,0C6h,0C6h,07Ch,0C6h,000h ;   Hex #CF
    Db	030h,07Eh,00Ch,07Ch,0CCh,0CCh,078h,000h ;   Hex #D0
    Db	0F8h,06Ch,066h,0F6h,066h,06Ch,0F8h,000h ;   Hex #D1
    Db	07Ch,082h,0FEh,0C0h,0FCh,0C0h,0FEh,000h ;   Hex #D2
    Db	0C6h,000h,0FEh,0C0h,0FCh,0C0h,0FEh,000h ;   Hex #D3
    Db	030h,018h,0FEh,0C0h,0FCh,0C0h,0FEh,000h ;   Hex #D4
    Db	000h,000h,038h,018h,018h,018h,03Ch,000h ;   Hex #D5
    Db	00Ch,018h,03Ch,018h,018h,018h,03Ch,000h ;   Hex #D6
    Db	03Ch,042h,03Ch,018h,018h,018h,03Ch,000h ;   Hex #D7
    Db	066h,000h,03Ch,018h,018h,018h,03Ch,000h ;   Hex #D8
    Db	018h,018h,018h,018h,0F8h,000h,000h,000h ;   Hex #D9
    Db	000h,000h,000h,000h,01Fh,018h,018h,018h ;   Hex #DA
    Db	0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DB
    Db	000h,000h,000h,000h,0FFh,0FFh,0FFh,0FFh ;   Hex #DC
    Db	018h,018h,018h,000h,000h,018h,018h,018h ;   Hex #DD
    Db	030h,018h,03Ch,018h,018h,018h,03Ch,000h ;   Hex #DE
    Db	0FFh,0FFh,0FFh,0FFh,000h,000h,000h,000h ;   Hex #DF
    Db	030h,060h,038h,06Ch,0C6h,06Ch,038h,000h ;   Hex #E0
    Db	078h,0CCh,0CCh,0D8h,0CCh,0C6h,0CCh,000h ;   Hex #E1
    Db	07Ch,082h,038h,06Ch,0C6h,06Ch,038h,000h ;   Hex #E2
    Db	00Ch,006h,038h,06Ch,0C6h,06Ch,038h,000h ;   Hex #E3
    Db	076h,0DCh,07Ch,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #E4
    Db	076h,0DCh,038h,06Ch,0C6h,06Ch,038h,000h ;   Hex #E5
    Db	000h,000h,066h,066h,066h,066h,07Ch,0C0h ;   Hex #E6
    Db	0E0h,060h,07Ch,066h,066h,07Ch,060h,0F0h ;   Hex #E7
    Db	0F0h,060h,07Ch,066h,07Ch,060h,0F0h,000h ;   Hex #E8
    Db	018h,030h,0C6h,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #E9
    Db	07Ch,082h,000h,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #EA
    Db	060h,030h,0C6h,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #EB
    Db	018h,030h,0C6h,0C6h,0C6h,07Eh,006h,0FCh ;   Hex #EC
    Db	00Ch,018h,066h,066h,03Ch,018h,03Ch,000h ;   Hex #ED
    Db	0FFh,000h,000h,000h,000h,000h,000h,000h ;   Hex #EE
    Db	00Ch,018h,030h,000h,000h,000h,000h,000h ;   Hex #EF
    Db	000h,000h,000h,07Eh,000h,000h,000h,000h ;   Hex #F0
    Db	018h,018h,07Eh,018h,018h,000h,07Eh,000h ;   Hex #F1
    Db	000h,000h,000h,000h,000h,0FFh,000h,0FFh ;   Hex #F2
    Db	0E1h,032h,0E4h,03Ah,0F6h,02Ah,05Fh,086h ;   Hex #F3
    Db	07Fh,0DBh,0DBh,07Bh,01Bh,01Bh,01Bh,000h ;   Hex #F4
    Db	03Eh,061h,03Ch,066h,066h,03Ch,086h,07Ch ;   Hex #F5
    Db	000h,018h,000h,07Eh,000h,018h,000h,000h ;   Hex #F6
    Db	000h,000h,000h,000h,000h,018h,00Ch,038h ;   Hex #F7
    Db	038h,06Ch,06Ch,038h,000h,000h,000h,000h ;   Hex #F8
    Db	000h,0C6h,000h,000h,000h,000h,000h,000h ;   Hex #F9
    Db	000h,000h,000h,018h,000h,000h,000h,000h ;   Hex #FA
    Db	018h,038h,018h,018h,03Ch,000h,000h,000h ;   Hex #FB
    Db	078h,00Ch,038h,00Ch,078h,000h,000h,000h ;   Hex #FC
    Db	078h,00Ch,018h,030h,07Ch,000h,000h,000h ;   Hex #FD
    Db	000h,000h,03Ch,03Ch,03Ch,03Ch,000h,000h ;   Hex #FE
    Db	000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FF


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\ega2\850-8x16.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
;***************************************************
;  CHARACTER FONT FILE
;  Source Assembler File
;
;        CODE PAGE: 850 
;  FONT RESOLUTION: 8 x 16 
;
;     DATE CREATED:05-28-1987
;
;
; Output file from: MULTIFON, Version 1A
;
;***************************************************
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #0
    Db  000h,000h,07Eh,081h,0A5h,081h,081h,0BDh,099h,081h,081h,07Eh,000h,000h,000h,000h ;   Hex #1
    Db  000h,000h,07Eh,0FFh,0DBh,0FFh,0FFh,0C3h,0E7h,0FFh,0FFh,07Eh,000h,000h,000h,000h ;   Hex #2
    Db  000h,000h,000h,000h,06Ch,0FEh,0FEh,0FEh,0FEh,07Ch,038h,010h,000h,000h,000h,000h ;   Hex #3
    Db  000h,000h,000h,000h,010h,038h,07Ch,0FEh,07Ch,038h,010h,000h,000h,000h,000h,000h ;   Hex #4
    Db  000h,000h,000h,018h,03Ch,03Ch,0E7h,0E7h,0E7h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #5
    Db  000h,000h,000h,018h,03Ch,07Eh,0FFh,0FFh,07Eh,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #6
    Db  000h,000h,000h,000h,000h,000h,018h,03Ch,03Ch,018h,000h,000h,000h,000h,000h,000h ;   Hex #7
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0E7h,0C3h,0C3h,0E7h,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #8
    Db  000h,000h,000h,000h,000h,03Ch,066h,042h,042h,066h,03Ch,000h,000h,000h,000h,000h ;   Hex #9
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0C3h,099h,0BDh,0BDh,099h,0C3h,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #A
    Db  000h,000h,01Eh,00Eh,01Ah,032h,078h,0CCh,0CCh,0CCh,0CCh,078h,000h,000h,000h,000h ;   Hex #B
    Db  000h,000h,03Ch,066h,066h,066h,066h,03Ch,018h,07Eh,018h,018h,000h,000h,000h,000h ;   Hex #C
    Db  000h,000h,03Fh,033h,03Fh,030h,030h,030h,030h,070h,0F0h,0E0h,000h,000h,000h,000h ;   Hex #D
    Db  000h,000h,07Fh,063h,07Fh,063h,063h,063h,063h,067h,0E7h,0E6h,0C0h,000h,000h,000h ;   Hex #E
    Db  000h,000h,000h,018h,018h,0DBh,03Ch,0E7h,03Ch,0DBh,018h,018h,000h,000h,000h,000h ;   Hex #F
    Db  000h,080h,0C0h,0E0h,0F0h,0F8h,0FEh,0F8h,0F0h,0E0h,0C0h,080h,000h,000h,000h,000h ;   Hex #10
    Db  000h,002h,006h,00Eh,01Eh,03Eh,0FEh,03Eh,01Eh,00Eh,006h,002h,000h,000h,000h,000h ;   Hex #11
    Db  000h,000h,018h,03Ch,07Eh,018h,018h,018h,07Eh,03Ch,018h,000h,000h,000h,000h,000h ;   Hex #12
    Db  000h,000h,066h,066h,066h,066h,066h,066h,066h,000h,066h,066h,000h,000h,000h,000h ;   Hex #13
    Db  000h,000h,07Fh,0DBh,0DBh,0DBh,07Bh,01Bh,01Bh,01Bh,01Bh,01Bh,000h,000h,000h,000h ;   Hex #14
    Db  000h,07Ch,0C6h,060h,038h,06Ch,0C6h,0C6h,06Ch,038h,00Ch,0C6h,07Ch,000h,000h,000h ;   Hex #15
    Db  000h,000h,000h,000h,000h,000h,000h,000h,0FEh,0FEh,0FEh,0FEh,000h,000h,000h,000h ;   Hex #16
    Db  000h,000h,018h,03Ch,07Eh,018h,018h,018h,07Eh,03Ch,018h,07Eh,000h,000h,000h,000h ;   Hex #17
    Db  000h,000h,018h,03Ch,07Eh,018h,018h,018h,018h,018h,018h,018h,000h,000h,000h,000h ;   Hex #18
    Db  000h,000h,018h,018h,018h,018h,018h,018h,018h,07Eh,03Ch,018h,000h,000h,000h,000h ;   Hex #19
    Db  000h,000h,000h,000h,000h,018h,00Ch,0FEh,00Ch,018h,000h,000h,000h,000h,000h,000h ;   Hex #1A
    Db  000h,000h,000h,000h,000h,030h,060h,0FEh,060h,030h,000h,000h,000h,000h,000h,000h ;   Hex #1B
    Db  000h,000h,000h,000h,000h,000h,0C0h,0C0h,0C0h,0FEh,000h,000h,000h,000h,000h,000h ;   Hex #1C
    Db  000h,000h,000h,000h,000h,028h,06Ch,0FEh,06Ch,028h,000h,000h,000h,000h,000h,000h ;   Hex #1D
    Db  000h,000h,000h,000h,010h,038h,038h,07Ch,07Ch,0FEh,0FEh,000h,000h,000h,000h,000h ;   Hex #1E
    Db  000h,000h,000h,000h,0FEh,0FEh,07Ch,07Ch,038h,038h,010h,000h,000h,000h,000h,000h ;   Hex #1F
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #20
    Db  000h,000h,018h,03Ch,03Ch,03Ch,018h,018h,018h,000h,018h,018h,000h,000h,000h,000h ;   Hex #21
    Db  000h,066h,066h,066h,024h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #22
    Db  000h,000h,000h,06Ch,06Ch,0FEh,06Ch,06Ch,06Ch,0FEh,06Ch,06Ch,000h,000h,000h,000h ;   Hex #23
    Db  018h,018h,07Ch,0C6h,0C2h,0C0h,07Ch,006h,006h,086h,0C6h,07Ch,018h,018h,000h,000h ;   Hex #24
    Db  000h,000h,000h,000h,0C2h,0C6h,00Ch,018h,030h,060h,0C6h,086h,000h,000h,000h,000h ;   Hex #25
    Db  000h,000h,038h,06Ch,06Ch,038h,076h,0DCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #26
    Db  000h,030h,030h,030h,060h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #27
    Db  000h,000h,00Ch,018h,030h,030h,030h,030h,030h,030h,018h,00Ch,000h,000h,000h,000h ;   Hex #28
    Db  000h,000h,030h,018h,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,018h,030h,000h,000h,000h,000h ;   Hex #29
    Db  000h,000h,000h,000h,000h,066h,03Ch,0FFh,03Ch,066h,000h,000h,000h,000h,000h,000h ;   Hex #2A
    Db  000h,000h,000h,000h,000h,018h,018h,07Eh,018h,018h,000h,000h,000h,000h,000h,000h ;   Hex #2B
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,018h,018h,030h,000h,000h,000h ;   Hex #2C
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #2D
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,018h,000h,000h,000h,000h ;   Hex #2E
    Db  000h,000h,000h,000h,002h,006h,00Ch,018h,030h,060h,0C0h,080h,000h,000h,000h,000h ;   Hex #2F
    Db  000h,000h,038h,06Ch,0C6h,0C6h,0D6h,0D6h,0C6h,0C6h,06Ch,038h,000h,000h,000h,000h ;   Hex #30
    Db  000h,000h,018h,038h,078h,018h,018h,018h,018h,018h,018h,07Eh,000h,000h,000h,000h ;   Hex #31
    Db  000h,000h,07Ch,0C6h,006h,00Ch,018h,030h,060h,0C0h,0C6h,0FEh,000h,000h,000h,000h ;   Hex #32
    Db  000h,000h,07Ch,0C6h,006h,006h,03Ch,006h,006h,006h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #33
    Db  000h,000h,00Ch,01Ch,03Ch,06Ch,0CCh,0FEh,00Ch,00Ch,00Ch,01Eh,000h,000h,000h,000h ;   Hex #34
    Db  000h,000h,0FEh,0C0h,0C0h,0C0h,0FCh,006h,006h,006h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #35
    Db  000h,000h,038h,060h,0C0h,0C0h,0FCh,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #36
    Db  000h,000h,0FEh,0C6h,006h,006h,00Ch,018h,030h,030h,030h,030h,000h,000h,000h,000h ;   Hex #37
    Db  000h,000h,07Ch,0C6h,0C6h,0C6h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #38
    Db  000h,000h,07Ch,0C6h,0C6h,0C6h,07Eh,006h,006h,006h,00Ch,078h,000h,000h,000h,000h ;   Hex #39
    Db  000h,000h,000h,000h,018h,018h,000h,000h,000h,018h,018h,000h,000h,000h,000h,000h ;   Hex #3A
    Db  000h,000h,000h,000h,018h,018h,000h,000h,000h,018h,018h,030h,000h,000h,000h,000h ;   Hex #3B
    Db  000h,000h,000h,006h,00Ch,018h,030h,060h,030h,018h,00Ch,006h,000h,000h,000h,000h ;   Hex #3C
    Db  000h,000h,000h,000h,000h,07Eh,000h,000h,07Eh,000h,000h,000h,000h,000h,000h,000h ;   Hex #3D
    Db  000h,000h,000h,060h,030h,018h,00Ch,006h,00Ch,018h,030h,060h,000h,000h,000h,000h ;   Hex #3E
    Db  000h,000h,07Ch,0C6h,0C6h,00Ch,018h,018h,018h,000h,018h,018h,000h,000h,000h,000h ;   Hex #3F
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0DEh,0DEh,0DEh,0DCh,0C0h,07Ch,000h,000h,000h,000h ;   Hex #40
    Db  000h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #41
    Db  000h,000h,0FCh,066h,066h,066h,07Ch,066h,066h,066h,066h,0FCh,000h,000h,000h,000h ;   Hex #42
    Db  000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0C0h,0C0h,0C2h,066h,03Ch,000h,000h,000h,000h ;   Hex #43
    Db  000h,000h,0F8h,06Ch,066h,066h,066h,066h,066h,066h,06Ch,0F8h,000h,000h,000h,000h ;   Hex #44
    Db  000h,000h,0FEh,066h,062h,068h,078h,068h,060h,062h,066h,0FEh,000h,000h,000h,000h ;   Hex #45
    Db  000h,000h,0FEh,066h,062h,068h,078h,068h,060h,060h,060h,0F0h,000h,000h,000h,000h ;   Hex #46
    Db  000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0DEh,0C6h,0C6h,066h,03Ah,000h,000h,000h,000h ;   Hex #47
    Db  000h,000h,0C6h,0C6h,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #48
    Db  000h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #49
    Db  000h,000h,01Eh,00Ch,00Ch,00Ch,00Ch,00Ch,0CCh,0CCh,0CCh,078h,000h,000h,000h,000h ;   Hex #4A
    Db  000h,000h,0E6h,066h,066h,06Ch,078h,078h,06Ch,066h,066h,0E6h,000h,000h,000h,000h ;   Hex #4B
    Db  000h,000h,0F0h,060h,060h,060h,060h,060h,060h,062h,066h,0FEh,000h,000h,000h,000h ;   Hex #4C
    Db  000h,000h,0C6h,0EEh,0FEh,0FEh,0D6h,0C6h,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #4D
    Db  000h,000h,0C6h,0E6h,0F6h,0FEh,0DEh,0CEh,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #4E
    Db  000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #4F
    Db  000h,000h,0FCh,066h,066h,066h,07Ch,060h,060h,060h,060h,0F0h,000h,000h,000h,000h ;   Hex #50
    Db  000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0D6h,0DEh,07Ch,00Ch,00Eh,000h,000h ;   Hex #51
    Db  000h,000h,0FCh,066h,066h,066h,07Ch,06Ch,066h,066h,066h,0E6h,000h,000h,000h,000h ;   Hex #52
    Db  000h,000h,07Ch,0C6h,0C6h,060h,038h,00Ch,006h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #53
    Db  000h,000h,07Eh,07Eh,05Ah,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #54
    Db  000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #55
    Db  000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,06Ch,038h,010h,000h,000h,000h,000h ;   Hex #56
    Db  000h,000h,0C6h,0C6h,0C6h,0C6h,0D6h,0D6h,0D6h,0FEh,0EEh,06Ch,000h,000h,000h,000h ;   Hex #57
    Db  000h,000h,0C6h,0C6h,06Ch,07Ch,038h,038h,07Ch,06Ch,0C6h,0C6h,000h,000h,000h,000h ;   Hex #58
    Db  000h,000h,066h,066h,066h,066h,03Ch,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #59
    Db  000h,000h,0FEh,0C6h,086h,00Ch,018h,030h,060h,0C2h,0C6h,0FEh,000h,000h,000h,000h ;   Hex #5A
    Db  000h,000h,03Ch,030h,030h,030h,030h,030h,030h,030h,030h,03Ch,000h,000h,000h,000h ;   Hex #5B
    Db  000h,000h,000h,080h,0C0h,0E0h,070h,038h,01Ch,00Eh,006h,002h,000h,000h,000h,000h ;   Hex #5C
    Db  000h,000h,03Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,03Ch,000h,000h,000h,000h ;   Hex #5D
    Db  010h,038h,06Ch,0C6h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #5E
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,0FFh,000h,000h ;   Hex #5F
    Db  000h,030h,018h,00Ch,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #60
    Db  000h,000h,000h,000h,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #61
    Db  000h,000h,0E0h,060h,060h,078h,06Ch,066h,066h,066h,066h,07Ch,000h,000h,000h,000h ;   Hex #62
    Db  000h,000h,000h,000h,000h,07Ch,0C6h,0C0h,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #63
    Db  000h,000h,01Ch,00Ch,00Ch,03Ch,06Ch,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #64
    Db  000h,000h,000h,000h,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #65
    Db  000h,000h,01Ch,036h,032h,030h,078h,030h,030h,030h,030h,078h,000h,000h,000h,000h ;   Hex #66
    Db  000h,000h,000h,000h,000h,076h,0CCh,0CCh,0CCh,0CCh,0CCh,07Ch,00Ch,0CCh,078h,000h ;   Hex #67
    Db  000h,000h,0E0h,060h,060h,06Ch,076h,066h,066h,066h,066h,0E6h,000h,000h,000h,000h ;   Hex #68
    Db  000h,000h,018h,018h,000h,038h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #69
    Db  000h,000h,006h,006h,000h,00Eh,006h,006h,006h,006h,006h,006h,066h,066h,03Ch,000h ;   Hex #6A
    Db  000h,000h,0E0h,060h,060h,066h,06Ch,078h,078h,06Ch,066h,0E6h,000h,000h,000h,000h ;   Hex #6B
    Db  000h,000h,038h,018h,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #6C
    Db  000h,000h,000h,000h,000h,0ECh,0FEh,0D6h,0D6h,0D6h,0D6h,0C6h,000h,000h,000h,000h ;   Hex #6D
    Db  000h,000h,000h,000h,000h,0DCh,066h,066h,066h,066h,066h,066h,000h,000h,000h,000h ;   Hex #6E
    Db  000h,000h,000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #6F
    Db  000h,000h,000h,000h,000h,0DCh,066h,066h,066h,066h,066h,07Ch,060h,060h,0F0h,000h ;   Hex #70
    Db  000h,000h,000h,000h,000h,076h,0CCh,0CCh,0CCh,0CCh,0CCh,07Ch,00Ch,00Ch,01Eh,000h ;   Hex #71
    Db  000h,000h,000h,000h,000h,0DCh,076h,066h,060h,060h,060h,0F0h,000h,000h,000h,000h ;   Hex #72
    Db  000h,000h,000h,000h,000h,07Ch,0C6h,060h,038h,00Ch,0C6h,07Ch,000h,000h,000h,000h ;   Hex #73
    Db  000h,000h,010h,030h,030h,0FCh,030h,030h,030h,030h,036h,01Ch,000h,000h,000h,000h ;   Hex #74
    Db  000h,000h,000h,000h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #75
    Db  000h,000h,000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,06Ch,038h,000h,000h,000h,000h ;   Hex #76
    Db  000h,000h,000h,000h,000h,0C6h,0C6h,0D6h,0D6h,0D6h,0FEh,06Ch,000h,000h,000h,000h ;   Hex #77
    Db  000h,000h,000h,000h,000h,0C6h,06Ch,038h,038h,038h,06Ch,0C6h,000h,000h,000h,000h ;   Hex #78
    Db  000h,000h,000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Eh,006h,00Ch,0F8h,000h ;   Hex #79
    Db  000h,000h,000h,000h,000h,0FEh,0CCh,018h,030h,060h,0C6h,0FEh,000h,000h,000h,000h ;   Hex #7A
    Db  000h,000h,00Eh,018h,018h,018h,070h,018h,018h,018h,018h,00Eh,000h,000h,000h,000h ;   Hex #7B
    Db  000h,000h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,000h,000h,000h,000h ;   Hex #7C
    Db  000h,000h,070h,018h,018h,018h,00Eh,018h,018h,018h,018h,070h,000h,000h,000h,000h ;   Hex #7D
    Db  000h,076h,0DCh,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #7E
    Db  000h,000h,000h,000h,010h,038h,06Ch,0C6h,0C6h,0C6h,0FEh,000h,000h,000h,000h,000h ;   Hex #7F
    Db  000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0C0h,0C0h,0C2h,066h,03Ch,018h,070h,000h,000h ;   Hex #80
    Db  000h,000h,0CCh,000h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #81
    Db  000h,00Ch,018h,030h,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #82
    Db  000h,010h,038h,06Ch,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #83
    Db  000h,000h,0CCh,000h,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #84
    Db  000h,060h,030h,018h,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #85
    Db  000h,038h,06Ch,038h,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #86
    Db  000h,000h,000h,000h,000h,07Ch,0C6h,0C0h,0C0h,0C0h,0C6h,07Ch,018h,070h,000h,000h ;   Hex #87
    Db  000h,010h,038h,06Ch,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #88
    Db  000h,000h,0C6h,000h,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #89
    Db  000h,060h,030h,018h,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #8A
    Db  000h,000h,066h,000h,000h,038h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #8B
    Db  000h,018h,03Ch,066h,000h,038h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #8C
    Db  000h,060h,030h,018h,000h,038h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #8D
    Db  000h,0C6h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #8E
    Db  038h,06Ch,038h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #8F
    Db  00Ch,018h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h,000h,000h ;   Hex #90
    Db  000h,000h,000h,000h,000h,0ECh,036h,036h,07Eh,0D8h,0D8h,06Eh,000h,000h,000h,000h ;   Hex #91
    Db  000h,000h,03Eh,06Ch,0CCh,0CCh,0FEh,0CCh,0CCh,0CCh,0CCh,0CEh,000h,000h,000h,000h ;   Hex #92
    Db  000h,010h,038h,06Ch,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #93
    Db  000h,000h,0C6h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #94
    Db  000h,060h,030h,018h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #95
    Db  000h,030h,078h,0CCh,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #96
    Db  000h,060h,030h,018h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #97
    Db  000h,000h,0C6h,000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Eh,006h,00Ch,078h,000h ;   Hex #98
    Db  000h,0C6h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #99
    Db  000h,0C6h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #9A
    Db  000h,000h,000h,000h,000h,07Ch,0CEh,0DEh,0F6h,0E6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #9B
    Db  000h,038h,06Ch,064h,060h,0F0h,060h,060h,060h,060h,0E6h,0FCh,000h,000h,000h,000h ;   Hex #9C
    Db  000h,004h,07Ch,0CEh,0CEh,0D6h,0D6h,0D6h,0D6h,0E6h,0E6h,07Ch,040h,000h,000h,000h ;   Hex #9D
    Db  000h,000h,000h,000h,000h,0C6h,06Ch,038h,038h,06Ch,0C6h,000h,000h,000h,000h,000h ;   Hex #9E
    Db  000h,00Eh,01Bh,018h,018h,018h,07Eh,018h,018h,018h,0D8h,070h,000h,000h,000h,000h ;   Hex #9F
    Db  000h,018h,030h,060h,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #A0
    Db  000h,00Ch,018h,030h,000h,038h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #A1
    Db  000h,018h,030h,060h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #A2
    Db  000h,018h,030h,060h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #A3
    Db  000h,000h,076h,0DCh,000h,0DCh,066h,066h,066h,066h,066h,066h,000h,000h,000h,000h ;   Hex #A4
    Db  076h,0DCh,000h,0C6h,0E6h,0F6h,0FEh,0DEh,0CEh,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #A5
    Db  000h,000h,03Ch,06Ch,06Ch,03Eh,000h,07Eh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #A6
    Db  000h,000h,038h,06Ch,06Ch,038h,000h,07Ch,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #A7
    Db  000h,000h,030h,030h,000h,030h,030h,060h,0C0h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #A8
    Db  000h,000h,07Ch,082h,0B2h,0AAh,0B2h,0AAh,0AAh,082h,07Ch,000h,000h,000h,000h,000h ;   Hex #A9
    Db  000h,000h,000h,000h,000h,000h,0FEh,006h,006h,006h,006h,000h,000h,000h,000h,000h ;   Hex #AA
    Db  000h,060h,0E0h,062h,066h,06Ch,018h,030h,060h,0DCh,086h,00Ch,018h,03Eh,000h,000h ;   Hex #AB
    Db  000h,060h,0E0h,062h,066h,06Ch,018h,030h,066h,0CEh,09Ah,03Fh,006h,006h,000h,000h ;   Hex #AC
    Db  000h,000h,018h,018h,000h,018h,018h,018h,03Ch,03Ch,03Ch,018h,000h,000h,000h,000h ;   Hex #AD
    Db  000h,000h,000h,000h,000h,036h,06Ch,0D8h,06Ch,036h,000h,000h,000h,000h,000h,000h ;   Hex #AE
    Db  000h,000h,000h,000h,000h,0D8h,06Ch,036h,06Ch,0D8h,000h,000h,000h,000h,000h,000h ;   Hex #AF
    Db  011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h ;   Hex #B0
    Db  055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh ;   Hex #B1
    Db  0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h ;   Hex #B2
    Db  018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B3
    Db  018h,018h,018h,018h,018h,018h,018h,0F8h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B4
    Db  060h,0C0h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #B5
    Db  07Ch,0C6h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #B6
    Db  00Ch,006h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #B7
    Db  000h,000h,07Ch,082h,09Ah,0A2h,0A2h,0A2h,09Ah,082h,07Ch,000h,000h,000h,000h,000h ;   Hex #B8
    Db  036h,036h,036h,036h,036h,0F6h,006h,0F6h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #B9
    Db  036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #BA
    Db  000h,000h,000h,000h,000h,0FEh,006h,0F6h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #BB
    Db  036h,036h,036h,036h,036h,0F6h,006h,0FEh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #BC
    Db  000h,000h,018h,018h,07Ch,0C6h,0C0h,0C0h,0C6h,07Ch,018h,018h,000h,000h,000h,000h ;   Hex #BD
    Db  000h,000h,000h,066h,066h,03Ch,018h,07Eh,018h,07Eh,018h,018h,000h,000h,000h,000h ;   Hex #BE
    Db  000h,000h,000h,000h,000h,000h,000h,0F8h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #BF
    Db  018h,018h,018h,018h,018h,018h,018h,01Fh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #C0
    Db  018h,018h,018h,018h,018h,018h,018h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #C1
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #C2
    Db  018h,018h,018h,018h,018h,018h,018h,01Fh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #C3
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #C4
    Db  018h,018h,018h,018h,018h,018h,018h,0FFh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #C5
    Db  000h,000h,076h,0DCh,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #C6
    Db  076h,0DCh,000h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #C7
    Db  036h,036h,036h,036h,036h,037h,030h,03Fh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #C8
    Db  000h,000h,000h,000h,000h,03Fh,030h,037h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #C9
    Db  036h,036h,036h,036h,036h,0F7h,000h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #CA
    Db  000h,000h,000h,000h,000h,0FFh,000h,0F7h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #CB
    Db  036h,036h,036h,036h,036h,037h,030h,037h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #CC
    Db  000h,000h,000h,000h,000h,0FFh,000h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #CD
    Db  036h,036h,036h,036h,036h,0F7h,000h,0F7h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #CE
    Db  000h,000h,000h,000h,0C6h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,0C6h,000h,000h,000h,000h ;   Hex #CF
    Db  000h,000h,034h,018h,02Ch,006h,03Eh,066h,066h,066h,066h,03Ch,000h,000h,000h,000h ;   Hex #D0
    Db  000h,000h,0F8h,06Ch,066h,066h,0F6h,066h,066h,066h,06Ch,0F8h,000h,000h,000h,000h ;   Hex #D1
    Db  038h,06Ch,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h,000h,000h ;   Hex #D2
    Db  000h,0C6h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h,000h,000h ;   Hex #D3
    Db  030h,018h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h,000h,000h ;   Hex #D4
    Db  000h,000h,000h,000h,000h,038h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #D5
    Db  00Ch,018h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #D6
    Db  03Ch,066h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #D7
    Db  000h,066h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #D8
    Db  018h,018h,018h,018h,018h,018h,018h,0F8h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #D9
    Db  000h,000h,000h,000h,000h,000h,000h,01Fh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #DA
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DB
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DC
    Db  000h,018h,018h,018h,018h,018h,000h,000h,018h,018h,018h,018h,018h,000h,000h,000h ;   Hex #DD
    Db  030h,018h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #DE
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #DF
    Db  018h,030h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #E0
    Db  000h,000h,078h,0CCh,0CCh,0CCh,0D8h,0CCh,0C6h,0C6h,0C6h,0CCh,000h,000h,000h,000h ;   Hex #E1
    Db  038h,06Ch,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #E2
    Db  030h,018h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #E3
    Db  000h,000h,076h,0DCh,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #E4
    Db  076h,0DCh,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #E5
    Db  000h,000h,000h,000h,000h,066h,066h,066h,066h,066h,066h,07Ch,060h,060h,0C0h,000h ;   Hex #E6
    Db  000h,000h,0E0h,060h,060h,07Ch,066h,066h,066h,066h,066h,07Ch,060h,060h,0F0h,000h ;   Hex #E7
    Db  000h,000h,0F0h,060h,07Ch,066h,066h,066h,066h,07Ch,060h,0F0h,000h,000h,000h,000h ;   Hex #E8
    Db  018h,030h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #E9
    Db  038h,06Ch,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #EA
    Db  030h,018h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #EB
    Db  000h,00Ch,018h,030h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Eh,006h,00Ch,0F8h,000h ;   Hex #EC
    Db  00Ch,018h,000h,066h,066h,066h,066h,03Ch,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #ED
    Db  000h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #EE
    Db  000h,00Ch,018h,030h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #EF
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #F0
    Db  000h,000h,000h,000h,018h,018h,07Eh,018h,018h,000h,000h,07Eh,000h,000h,000h,000h ;   Hex #F1
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,0FFh,000h,0FFh,000h ;   Hex #F2
    Db  000h,0E0h,030h,062h,036h,0ECh,018h,030h,066h,0CEh,09Ah,03Fh,006h,006h,000h,000h ;   Hex #F3
    Db  000h,000h,07Fh,0DBh,0DBh,0DBh,07Bh,01Bh,01Bh,01Bh,01Bh,01Bh,000h,000h,000h,000h ;   Hex #F4
    Db  000h,07Ch,0C6h,060h,038h,06Ch,0C6h,0C6h,06Ch,038h,00Ch,0C6h,07Ch,000h,000h,000h ;   Hex #F5
    Db  000h,000h,000h,000h,000h,018h,000h,07Eh,000h,018h,000h,000h,000h,000h,000h,000h ;   Hex #F6
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,00Ch,078h,000h,000h ;   Hex #F7
    Db  000h,038h,06Ch,06Ch,038h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #F8
    Db  000h,0C6h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #F9
    Db  000h,000h,000h,000h,000h,000h,000h,018h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FA
    Db  000h,018h,038h,018h,018h,018h,03Ch,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FB
    Db  000h,07Ch,006h,03Ch,006h,006h,07Ch,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FC
    Db  000h,03Ch,066h,00Ch,018h,032h,07Eh,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FD
    Db  000h,000h,000h,000h,07Eh,07Eh,07Eh,07Eh,07Eh,07Eh,07Eh,000h,000h,000h,000h,000h ;   Hex #FE
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FF


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\ega2\437-8x8.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
;***************************************************
;  CHARACTER FONT FILE
;  Source Assembler File
;
;        CODE PAGE: 437 
;  FONT RESOLUTION: 8 x 8 
;
;     DATE CREATED:05-28-1987
;
;
; Output file from: MULTIFON, Version 1A
;
;***************************************************
    Db  000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #0
    Db  07Eh,081h,0A5h,081h,0BDh,099h,081h,07Eh ;   Hex #1
    Db  07Eh,0FFh,0DBh,0FFh,0C3h,0E7h,0FFh,07Eh ;   Hex #2
    Db  06Ch,0FEh,0FEh,0FEh,07Ch,038h,010h,000h ;   Hex #3
    Db  010h,038h,07Ch,0FEh,07Ch,038h,010h,000h ;   Hex #4
    Db  038h,07Ch,038h,0FEh,0FEh,0D6h,010h,038h ;   Hex #5
    Db  010h,038h,07Ch,0FEh,0FEh,07Ch,010h,038h ;   Hex #6
    Db  000h,000h,018h,03Ch,03Ch,018h,000h,000h ;   Hex #7
    Db  0FFh,0FFh,0E7h,0C3h,0C3h,0E7h,0FFh,0FFh ;   Hex #8
    Db  000h,03Ch,066h,042h,042h,066h,03Ch,000h ;   Hex #9
    Db  0FFh,0C3h,099h,0BDh,0BDh,099h,0C3h,0FFh ;   Hex #A
    Db  00Fh,007h,00Fh,07Dh,0CCh,0CCh,0CCh,078h ;   Hex #B
    Db  03Ch,066h,066h,066h,03Ch,018h,07Eh,018h ;   Hex #C
    Db  03Fh,033h,03Fh,030h,030h,070h,0F0h,0E0h ;   Hex #D
    Db  07Fh,063h,07Fh,063h,063h,067h,0E6h,0C0h ;   Hex #E
    Db  018h,0DBh,03Ch,0E7h,0E7h,03Ch,0DBh,018h ;   Hex #F
    Db  080h,0E0h,0F8h,0FEh,0F8h,0E0h,080h,000h ;   Hex #10
    Db  002h,00Eh,03Eh,0FEh,03Eh,00Eh,002h,000h ;   Hex #11
    Db  018h,03Ch,07Eh,018h,018h,07Eh,03Ch,018h ;   Hex #12
    Db  066h,066h,066h,066h,066h,000h,066h,000h ;   Hex #13
    Db  07Fh,0DBh,0DBh,07Bh,01Bh,01Bh,01Bh,000h ;   Hex #14
    Db  03Eh,061h,03Ch,066h,066h,03Ch,086h,07Ch ;   Hex #15
    Db  000h,000h,000h,000h,07Eh,07Eh,07Eh,000h ;   Hex #16
    Db  018h,03Ch,07Eh,018h,07Eh,03Ch,018h,0FFh ;   Hex #17
    Db  018h,03Ch,07Eh,018h,018h,018h,018h,000h ;   Hex #18
    Db  018h,018h,018h,018h,07Eh,03Ch,018h,000h ;   Hex #19
    Db  000h,018h,00Ch,0FEh,00Ch,018h,000h,000h ;   Hex #1A
    Db  000h,030h,060h,0FEh,060h,030h,000h,000h ;   Hex #1B
    Db  000h,000h,0C0h,0C0h,0C0h,0FEh,000h,000h ;   Hex #1C
    Db  000h,024h,066h,0FFh,066h,024h,000h,000h ;   Hex #1D
    Db  000h,018h,03Ch,07Eh,0FFh,0FFh,000h,000h ;   Hex #1E
    Db  000h,0FFh,0FFh,07Eh,03Ch,018h,000h,000h ;   Hex #1F
    Db  000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #20
    Db  018h,03Ch,03Ch,018h,018h,000h,018h,000h ;   Hex #21
    Db  066h,066h,024h,000h,000h,000h,000h,000h ;   Hex #22
    Db  06Ch,06Ch,0FEh,06Ch,0FEh,06Ch,06Ch,000h ;   Hex #23
    Db  018h,03Eh,060h,03Ch,006h,07Ch,018h,000h ;   Hex #24
    Db  000h,0C6h,0CCh,018h,030h,066h,0C6h,000h ;   Hex #25
    Db  038h,06Ch,038h,076h,0DCh,0CCh,076h,000h ;   Hex #26
    Db  018h,018h,030h,000h,000h,000h,000h,000h ;   Hex #27
    Db  00Ch,018h,030h,030h,030h,018h,00Ch,000h ;   Hex #28
    Db  030h,018h,00Ch,00Ch,00Ch,018h,030h,000h ;   Hex #29
    Db  000h,066h,03Ch,0FFh,03Ch,066h,000h,000h ;   Hex #2A
    Db  000h,018h,018h,07Eh,018h,018h,000h,000h ;   Hex #2B
    Db  000h,000h,000h,000h,000h,018h,018h,030h ;   Hex #2C
    Db  000h,000h,000h,07Eh,000h,000h,000h,000h ;   Hex #2D
    Db  000h,000h,000h,000h,000h,018h,018h,000h ;   Hex #2E
    Db  006h,00Ch,018h,030h,060h,0C0h,080h,000h ;   Hex #2F
    Db  038h,06Ch,0C6h,0D6h,0C6h,06Ch,038h,000h ;   Hex #30
    Db  018h,038h,018h,018h,018h,018h,07Eh,000h ;   Hex #31
    Db  07Ch,0C6h,006h,01Ch,030h,066h,0FEh,000h ;   Hex #32
    Db  07Ch,0C6h,006h,03Ch,006h,0C6h,07Ch,000h ;   Hex #33
    Db  01Ch,03Ch,06Ch,0CCh,0FEh,00Ch,01Eh,000h ;   Hex #34
    Db  0FEh,0C0h,0C0h,0FCh,006h,0C6h,07Ch,000h ;   Hex #35
    Db  038h,060h,0C0h,0FCh,0C6h,0C6h,07Ch,000h ;   Hex #36
    Db  0FEh,0C6h,00Ch,018h,030h,030h,030h,000h ;   Hex #37
    Db  07Ch,0C6h,0C6h,07Ch,0C6h,0C6h,07Ch,000h ;   Hex #38
    Db  07Ch,0C6h,0C6h,07Eh,006h,00Ch,078h,000h ;   Hex #39
    Db  000h,018h,018h,000h,000h,018h,018h,000h ;   Hex #3A
    Db  000h,018h,018h,000h,000h,018h,018h,030h ;   Hex #3B
    Db  006h,00Ch,018h,030h,018h,00Ch,006h,000h ;   Hex #3C
    Db  000h,000h,07Eh,000h,000h,07Eh,000h,000h ;   Hex #3D
    Db  060h,030h,018h,00Ch,018h,030h,060h,000h ;   Hex #3E
    Db  07Ch,0C6h,00Ch,018h,018h,000h,018h,000h ;   Hex #3F
    Db  07Ch,0C6h,0DEh,0DEh,0DEh,0C0h,078h,000h ;   Hex #40
    Db  038h,06Ch,0C6h,0FEh,0C6h,0C6h,0C6h,000h ;   Hex #41
    Db  0FCh,066h,066h,07Ch,066h,066h,0FCh,000h ;   Hex #42
    Db  03Ch,066h,0C0h,0C0h,0C0h,066h,03Ch,000h ;   Hex #43
    Db  0F8h,06Ch,066h,066h,066h,06Ch,0F8h,000h ;   Hex #44
    Db  0FEh,062h,068h,078h,068h,062h,0FEh,000h ;   Hex #45
    Db  0FEh,062h,068h,078h,068h,060h,0F0h,000h ;   Hex #46
    Db  03Ch,066h,0C0h,0C0h,0CEh,066h,03Ah,000h ;   Hex #47
    Db  0C6h,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h ;   Hex #48
    Db  03Ch,018h,018h,018h,018h,018h,03Ch,000h ;   Hex #49
    Db  01Eh,00Ch,00Ch,00Ch,0CCh,0CCh,078h,000h ;   Hex #4A
    Db  0E6h,066h,06Ch,078h,06Ch,066h,0E6h,000h ;   Hex #4B
    Db  0F0h,060h,060h,060h,062h,066h,0FEh,000h ;   Hex #4C
    Db  0C6h,0EEh,0FEh,0FEh,0D6h,0C6h,0C6h,000h ;   Hex #4D
    Db  0C6h,0E6h,0F6h,0DEh,0CEh,0C6h,0C6h,000h ;   Hex #4E
    Db  07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #4F
    Db  0FCh,066h,066h,07Ch,060h,060h,0F0h,000h ;   Hex #50
    Db  07Ch,0C6h,0C6h,0C6h,0C6h,0CEh,07Ch,00Eh ;   Hex #51
    Db  0FCh,066h,066h,07Ch,06Ch,066h,0E6h,000h ;   Hex #52
    Db  03Ch,066h,030h,018h,00Ch,066h,03Ch,000h ;   Hex #53
    Db  07Eh,07Eh,05Ah,018h,018h,018h,03Ch,000h ;   Hex #54
    Db  0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #55
    Db  0C6h,0C6h,0C6h,0C6h,0C6h,06Ch,038h,000h ;   Hex #56
    Db  0C6h,0C6h,0C6h,0D6h,0D6h,0FEh,06Ch,000h ;   Hex #57
    Db  0C6h,0C6h,06Ch,038h,06Ch,0C6h,0C6h,000h ;   Hex #58
    Db  066h,066h,066h,03Ch,018h,018h,03Ch,000h ;   Hex #59
    Db  0FEh,0C6h,08Ch,018h,032h,066h,0FEh,000h ;   Hex #5A
    Db  03Ch,030h,030h,030h,030h,030h,03Ch,000h ;   Hex #5B
    Db  0C0h,060h,030h,018h,00Ch,006h,002h,000h ;   Hex #5C
    Db  03Ch,00Ch,00Ch,00Ch,00Ch,00Ch,03Ch,000h ;   Hex #5D
    Db  010h,038h,06Ch,0C6h,000h,000h,000h,000h ;   Hex #5E
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh ;   Hex #5F
    Db  030h,018h,00Ch,000h,000h,000h,000h,000h ;   Hex #60
    Db  000h,000h,078h,00Ch,07Ch,0CCh,076h,000h ;   Hex #61
    Db  0E0h,060h,07Ch,066h,066h,066h,0DCh,000h ;   Hex #62
    Db  000h,000h,07Ch,0C6h,0C0h,0C6h,07Ch,000h ;   Hex #63
    Db  01Ch,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h ;   Hex #64
    Db  000h,000h,07Ch,0C6h,0FEh,0C0h,07Ch,000h ;   Hex #65
    Db  03Ch,066h,060h,0F8h,060h,060h,0F0h,000h ;   Hex #66
    Db  000h,000h,076h,0CCh,0CCh,07Ch,00Ch,0F8h ;   Hex #67
    Db  0E0h,060h,06Ch,076h,066h,066h,0E6h,000h ;   Hex #68
    Db  018h,000h,038h,018h,018h,018h,03Ch,000h ;   Hex #69
    Db  006h,000h,006h,006h,006h,066h,066h,03Ch ;   Hex #6A
    Db  0E0h,060h,066h,06Ch,078h,06Ch,0E6h,000h ;   Hex #6B
    Db  038h,018h,018h,018h,018h,018h,03Ch,000h ;   Hex #6C
    Db  000h,000h,0ECh,0FEh,0D6h,0D6h,0D6h,000h ;   Hex #6D
    Db  000h,000h,0DCh,066h,066h,066h,066h,000h ;   Hex #6E
    Db  000h,000h,07Ch,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #6F
    Db  000h,000h,0DCh,066h,066h,07Ch,060h,0F0h ;   Hex #70
    Db  000h,000h,076h,0CCh,0CCh,07Ch,00Ch,01Eh ;   Hex #71
    Db  000h,000h,0DCh,076h,060h,060h,0F0h,000h ;   Hex #72
    Db  000h,000h,07Eh,0C0h,07Ch,006h,0FCh,000h ;   Hex #73
    Db  030h,030h,0FCh,030h,030h,036h,01Ch,000h ;   Hex #74
    Db  000h,000h,0CCh,0CCh,0CCh,0CCh,076h,000h ;   Hex #75
    Db  000h,000h,0C6h,0C6h,0C6h,06Ch,038h,000h ;   Hex #76
    Db  000h,000h,0C6h,0D6h,0D6h,0FEh,06Ch,000h ;   Hex #77
    Db  000h,000h,0C6h,06Ch,038h,06Ch,0C6h,000h ;   Hex #78
    Db  000h,000h,0C6h,0C6h,0C6h,07Eh,006h,0FCh ;   Hex #79
    Db  000h,000h,07Eh,04Ch,018h,032h,07Eh,000h ;   Hex #7A
    Db  00Eh,018h,018h,070h,018h,018h,00Eh,000h ;   Hex #7B
    Db  018h,018h,018h,018h,018h,018h,018h,000h ;   Hex #7C
    Db  070h,018h,018h,00Eh,018h,018h,070h,000h ;   Hex #7D
    Db  076h,0DCh,000h,000h,000h,000h,000h,000h ;   Hex #7E
    Db  000h,010h,038h,06Ch,0C6h,0C6h,0FEh,000h ;   Hex #7F
    Db  07Ch,0C6h,0C0h,0C0h,0C6h,07Ch,00Ch,078h ;   Hex #80
    Db  0CCh,000h,0CCh,0CCh,0CCh,0CCh,076h,000h ;   Hex #81
    Db  00Ch,018h,07Ch,0C6h,0FEh,0C0h,07Ch,000h ;   Hex #82
    Db  07Ch,082h,078h,00Ch,07Ch,0CCh,076h,000h ;   Hex #83
    Db  0C6h,000h,078h,00Ch,07Ch,0CCh,076h,000h ;   Hex #84
    Db  030h,018h,078h,00Ch,07Ch,0CCh,076h,000h ;   Hex #85
    Db  030h,030h,078h,00Ch,07Ch,0CCh,076h,000h ;   Hex #86
    Db  000h,000h,07Eh,0C0h,0C0h,07Eh,00Ch,038h ;   Hex #87
    Db  07Ch,082h,07Ch,0C6h,0FEh,0C0h,07Ch,000h ;   Hex #88
    Db  0C6h,000h,07Ch,0C6h,0FEh,0C0h,07Ch,000h ;   Hex #89
    Db  030h,018h,07Ch,0C6h,0FEh,0C0h,07Ch,000h ;   Hex #8A
    Db  066h,000h,038h,018h,018h,018h,03Ch,000h ;   Hex #8B
    Db  07Ch,082h,038h,018h,018h,018h,03Ch,000h ;   Hex #8C
    Db  030h,018h,000h,038h,018h,018h,03Ch,000h ;   Hex #8D
    Db  0C6h,038h,06Ch,0C6h,0FEh,0C6h,0C6h,000h ;   Hex #8E
    Db  038h,06Ch,07Ch,0C6h,0FEh,0C6h,0C6h,000h ;   Hex #8F
    Db  018h,030h,0FEh,0C0h,0F8h,0C0h,0FEh,000h ;   Hex #90
    Db  000h,000h,07Eh,018h,07Eh,0D8h,07Eh,000h ;   Hex #91
    Db  03Eh,06Ch,0CCh,0FEh,0CCh,0CCh,0CEh,000h ;   Hex #92
    Db  07Ch,082h,07Ch,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #93
    Db  0C6h,000h,07Ch,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #94
    Db  030h,018h,07Ch,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #95
    Db  078h,084h,000h,0CCh,0CCh,0CCh,076h,000h ;   Hex #96
    Db  060h,030h,0CCh,0CCh,0CCh,0CCh,076h,000h ;   Hex #97
    Db  0C6h,000h,0C6h,0C6h,0C6h,07Eh,006h,0FCh ;   Hex #98
    Db  0C6h,038h,06Ch,0C6h,0C6h,06Ch,038h,000h ;   Hex #99
    Db  0C6h,000h,0C6h,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #9A
    Db  018h,018h,07Eh,0C0h,0C0h,07Eh,018h,018h ;   Hex #9B
    Db  038h,06Ch,064h,0F0h,060h,066h,0FCh,000h ;   Hex #9C
    Db  066h,066h,03Ch,07Eh,018h,07Eh,018h,018h ;   Hex #9D
    Db  0F8h,0CCh,0CCh,0FAh,0C6h,0CFh,0C6h,0C7h ;   Hex #9E
    Db  00Eh,01Bh,018h,03Ch,018h,0D8h,070h,000h ;   Hex #9F
    Db  018h,030h,078h,00Ch,07Ch,0CCh,076h,000h ;   Hex #A0
    Db  00Ch,018h,000h,038h,018h,018h,03Ch,000h ;   Hex #A1
    Db  00Ch,018h,07Ch,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #A2
    Db  018h,030h,0CCh,0CCh,0CCh,0CCh,076h,000h ;   Hex #A3
    Db  076h,0DCh,000h,0DCh,066h,066h,066h,000h ;   Hex #A4
    Db  076h,0DCh,000h,0E6h,0F6h,0DEh,0CEh,000h ;   Hex #A5
    Db  03Ch,06Ch,06Ch,03Eh,000h,07Eh,000h,000h ;   Hex #A6
    Db  038h,06Ch,06Ch,038h,000h,07Ch,000h,000h ;   Hex #A7
    Db  018h,000h,018h,018h,030h,063h,03Eh,000h ;   Hex #A8
    Db  000h,000h,000h,0FEh,0C0h,0C0h,000h,000h ;   Hex #A9
    Db  000h,000h,000h,0FEh,006h,006h,000h,000h ;   Hex #AA
    Db  063h,0E6h,06Ch,07Eh,033h,066h,0CCh,00Fh ;   Hex #AB
    Db  063h,0E6h,06Ch,07Ah,036h,06Ah,0DFh,006h ;   Hex #AC
    Db  018h,000h,018h,018h,03Ch,03Ch,018h,000h ;   Hex #AD
    Db  000h,033h,066h,0CCh,066h,033h,000h,000h ;   Hex #AE
    Db  000h,0CCh,066h,033h,066h,0CCh,000h,000h ;   Hex #AF
    Db  022h,088h,022h,088h,022h,088h,022h,088h ;   Hex #B0
    Db  055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh ;   Hex #B1
    Db  077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh ;   Hex #B2
    Db  018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B3
    Db  018h,018h,018h,018h,0F8h,018h,018h,018h ;   Hex #B4
    Db  018h,018h,0F8h,018h,0F8h,018h,018h,018h ;   Hex #B5
    Db  036h,036h,036h,036h,0F6h,036h,036h,036h ;   Hex #B6
    Db  000h,000h,000h,000h,0FEh,036h,036h,036h ;   Hex #B7
    Db  000h,000h,0F8h,018h,0F8h,018h,018h,018h ;   Hex #B8
    Db  036h,036h,0F6h,006h,0F6h,036h,036h,036h ;   Hex #B9
    Db  036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #BA
    Db  000h,000h,0FEh,006h,0F6h,036h,036h,036h ;   Hex #BB
    Db  036h,036h,0F6h,006h,0FEh,000h,000h,000h ;   Hex #BC
    Db  036h,036h,036h,036h,0FEh,000h,000h,000h ;   Hex #BD
    Db  018h,018h,0F8h,018h,0F8h,000h,000h,000h ;   Hex #BE
    Db  000h,000h,000h,000h,0F8h,018h,018h,018h ;   Hex #BF
    Db  018h,018h,018h,018h,01Fh,000h,000h,000h ;   Hex #C0
    Db  018h,018h,018h,018h,0FFh,000h,000h,000h ;   Hex #C1
    Db  000h,000h,000h,000h,0FFh,018h,018h,018h ;   Hex #C2
    Db  018h,018h,018h,018h,01Fh,018h,018h,018h ;   Hex #C3
    Db  000h,000h,000h,000h,0FFh,000h,000h,000h ;   Hex #C4
    Db  018h,018h,018h,018h,0FFh,018h,018h,018h ;   Hex #C5
    Db  018h,018h,01Fh,018h,01Fh,018h,018h,018h ;   Hex #C6
    Db  036h,036h,036h,036h,037h,036h,036h,036h ;   Hex #C7
    Db  036h,036h,037h,030h,03Fh,000h,000h,000h ;   Hex #C8
    Db  000h,000h,03Fh,030h,037h,036h,036h,036h ;   Hex #C9
    Db  036h,036h,0F7h,000h,0FFh,000h,000h,000h ;   Hex #CA
    Db  000h,000h,0FFh,000h,0F7h,036h,036h,036h ;   Hex #CB
    Db  036h,036h,037h,030h,037h,036h,036h,036h ;   Hex #CC
    Db  000h,000h,0FFh,000h,0FFh,000h,000h,000h ;   Hex #CD
    Db  036h,036h,0F7h,000h,0F7h,036h,036h,036h ;   Hex #CE
    Db  018h,018h,0FFh,000h,0FFh,000h,000h,000h ;   Hex #CF
    Db  036h,036h,036h,036h,0FFh,000h,000h,000h ;   Hex #D0
    Db  000h,000h,0FFh,000h,0FFh,018h,018h,018h ;   Hex #D1
    Db  000h,000h,000h,000h,0FFh,036h,036h,036h ;   Hex #D2
    Db  036h,036h,036h,036h,03Fh,000h,000h,000h ;   Hex #D3
    Db  018h,018h,01Fh,018h,01Fh,000h,000h,000h ;   Hex #D4
    Db  000h,000h,01Fh,018h,01Fh,018h,018h,018h ;   Hex #D5
    Db  000h,000h,000h,000h,03Fh,036h,036h,036h ;   Hex #D6
    Db  036h,036h,036h,036h,0FFh,036h,036h,036h ;   Hex #D7
    Db  018h,018h,0FFh,018h,0FFh,018h,018h,018h ;   Hex #D8
    Db  018h,018h,018h,018h,0F8h,000h,000h,000h ;   Hex #D9
    Db  000h,000h,000h,000h,01Fh,018h,018h,018h ;   Hex #DA
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DB
    Db  000h,000h,000h,000h,0FFh,0FFh,0FFh,0FFh ;   Hex #DC
    Db  0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h ;   Hex #DD
    Db  00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh ;   Hex #DE
    Db  0FFh,0FFh,0FFh,0FFh,000h,000h,000h,000h ;   Hex #DF
    Db  000h,000h,076h,0DCh,0C8h,0DCh,076h,000h ;   Hex #E0
    Db  078h,0CCh,0CCh,0D8h,0CCh,0C6h,0CCh,000h ;   Hex #E1
    Db  0FEh,0C6h,0C0h,0C0h,0C0h,0C0h,0C0h,000h ;   Hex #E2
    Db  000h,000h,0FEh,06Ch,06Ch,06Ch,06Ch,000h ;   Hex #E3
    Db  0FEh,0C6h,060h,030h,060h,0C6h,0FEh,000h ;   Hex #E4
    Db  000h,000h,07Eh,0D8h,0D8h,0D8h,070h,000h ;   Hex #E5
    Db  000h,000h,066h,066h,066h,066h,07Ch,0C0h ;   Hex #E6
    Db  000h,076h,0DCh,018h,018h,018h,018h,000h ;   Hex #E7
    Db  07Eh,018h,03Ch,066h,066h,03Ch,018h,07Eh ;   Hex #E8
    Db  038h,06Ch,0C6h,0FEh,0C6h,06Ch,038h,000h ;   Hex #E9
    Db  038h,06Ch,0C6h,0C6h,06Ch,06Ch,0EEh,000h ;   Hex #EA
    Db  00Eh,018h,00Ch,03Eh,066h,066h,03Ch,000h ;   Hex #EB
    Db  000h,000h,07Eh,0DBh,0DBh,07Eh,000h,000h ;   Hex #EC
    Db  006h,00Ch,07Eh,0DBh,0DBh,07Eh,060h,0C0h ;   Hex #ED
    Db  01Eh,030h,060h,07Eh,060h,030h,01Eh,000h ;   Hex #EE
    Db  000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,000h ;   Hex #EF
    Db  000h,0FEh,000h,0FEh,000h,0FEh,000h,000h ;   Hex #F0
    Db  018h,018h,07Eh,018h,018h,000h,07Eh,000h ;   Hex #F1
    Db  030h,018h,00Ch,018h,030h,000h,07Eh,000h ;   Hex #F2
    Db  00Ch,018h,030h,018h,00Ch,000h,07Eh,000h ;   Hex #F3
    Db  00Eh,01Bh,01Bh,018h,018h,018h,018h,018h ;   Hex #F4
    Db  018h,018h,018h,018h,018h,0D8h,0D8h,070h ;   Hex #F5
    Db  000h,018h,000h,07Eh,000h,018h,000h,000h ;   Hex #F6
    Db  000h,076h,0DCh,000h,076h,0DCh,000h,000h ;   Hex #F7
    Db  038h,06Ch,06Ch,038h,000h,000h,000h,000h ;   Hex #F8
    Db  000h,000h,000h,018h,018h,000h,000h,000h ;   Hex #F9
    Db  000h,000h,000h,018h,000h,000h,000h,000h ;   Hex #FA
    Db  00Fh,00Ch,00Ch,00Ch,0ECh,06Ch,03Ch,01Ch ;   Hex #FB
    Db  06Ch,036h,036h,036h,036h,000h,000h,000h ;   Hex #FC
    Db  078h,00Ch,018h,030h,07Ch,000h,000h,000h ;   Hex #FD
    Db  000h,000h,03Ch,03Ch,03Ch,03Ch,000h,000h ;   Hex #FE
    Db  000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FF


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\ega2\852-cpi.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
CODE    SEGMENT BYTE PUBLIC 'CODE'
        ASSUME CS:CODE,DS:CODE

IF1
;        %OUT    EGA.CPI creation file
;        %OUT    .
;        %OUT    CP SRC files:
;        %OUT    .
;	 %OUT	 .	 CODE PAGE:  852
ENDIF

EGA852: DW     LEN_852			; SIZE OF ENTRY HEADER
	DW     POST_EGA852,0		; POINTER TO NEXT HEADER
        DW     1                        ; DEVICE TYPE
        DB     "EGA     "               ; DEVICE SUBTYPE ID
	DW     852			; CODE PAGE ID
        DW     3 DUP(0)                 ; RESERVED
	DW     OFFSET DATA852,0 	; POINTER TO FONTS
LEN_852 EQU    ($-EGA852)		;
                                        ;
DATA852:DW     1			; CART/NON-CART
        DW     3                        ; # OF FONTS
	DW     LEN_D852 		; LENGTH OF DATA
D852:					;
        DB     16,8                     ; CHARACTER BOX SIZE
        DB     0,0                      ; ASPECT RATIO (UNUSED)
        DW     256                      ; NUMBER OF CHARACTERS
                                        ;
	INCLUDE 852-8X16.ASM		;
                                        ;
        DB     14,8                     ; CHARACTER BOX SIZE
        DB     0,0                      ; ASPECT RATIO (UNUSED)
        DW     256                      ; NUMBER OF CHARACTERS
                                        ;
	INCLUDE 852-8X14.ASM		;
                                        ;
        DB     8,8                      ; CHARACTER BOX SIZE
        DB     0,0                      ; ASPECT RATIO (UNUSED)
        DW     256                      ; NUMBER OF CHARACTERS
                                        ;
	INCLUDE 852-8X8.ASM		;
                                        ;
LEN_D852	EQU ($-D852)		;
                                        ;
POST_EGA852	EQU	$		;
                                        ;
CODE    ENDS                            ;
        END                             ;


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\ega2\860-cpi.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
CODE    SEGMENT BYTE PUBLIC 'CODE'
        ASSUME CS:CODE,DS:CODE

IF1
;        %OUT    EGA.CPI creation file
;        %OUT    .
;        %OUT    CP SRC files:
;        %OUT    .
;        %OUT    .       CODE PAGE:  860
ENDIF

EGA860: DW     LEN_860                  ; SIZE OF ENTRY HEADER
        DW     POST_EGA860,0            ; POINTER TO NEXT HEADER
        DW     1                        ; DEVICE TYPE
        DB     "EGA     "               ; DEVICE SUBTYPE ID
        DW     860                      ; CODE PAGE ID
        DW     3 DUP(0)                 ; RESERVED
        DW     OFFSET DATA860,0         ; POINTER TO FONTS
LEN_860 EQU    ($-EGA860)               ;
                                        ;
DATA860:DW     1                        ; CART/NON-CART
        DW     3                        ; # OF FONTS
        DW     LEN_D860                 ; LENGTH OF DATA
D860:                                   ;
        DB     16,8                     ; CHARACTER BOX SIZE
        DB     0,0                      ; ASPECT RATIO (UNUSED)
        DW     256                      ; NUMBER OF CHARACTERS
                                        ;
        INCLUDE 860-8X16.ASM            ;
                                        ;
        DB     14,8                     ; CHARACTER BOX SIZE
        DB     0,0                      ; ASPECT RATIO (UNUSED)
        DW     256                      ; NUMBER OF CHARACTERS
                                        ;
        INCLUDE 860-8X14.ASM            ;
                                        ;
        DB     8,8                      ; CHARACTER BOX SIZE
        DB     0,0                      ; ASPECT RATIO (UNUSED)
        DW     256                      ; NUMBER OF CHARACTERS
                                        ;
        INCLUDE 860-8X8.ASM             ;
                                        ;
LEN_D860        EQU ($-D860)            ;
                                        ;
POST_EGA860     EQU     $               ;
                                        ;
CODE    ENDS                            ;
        END                             ;


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\ega2\852-8x16.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
;***************************************************
;  CHARACTER FONT FILE
;  Source Assembler File
;
;	 CODE PAGE: 852
;  FONT RESOLUTION: 8 x 8
;
;     DATE CREATED:05-28-1987
;
;
; Output file from: MULTIFON, Version 1A
;
;***************************************************
	Db	0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh; 000
	Db	000h,000h,07Eh,081h,0A5h,081h,081h,0BDh,099h,081h,081h,07Eh,000h,000h,000h,000h; 001
	Db	000h,000h,07Eh,0FFh,0Dbh,0FFh,0FFh,0C3h,0E7h,0FFh,0FFh,07Eh,000h,000h,000h,000h; 002
	Db	000h,000h,000h,000h,06Ch,0FEh,0FEh,0FEh,0FEh,07Ch,038h,010h,000h,000h,000h,000h; 003
	Db	000h,000h,000h,000h,010h,038h,07Ch,0FEh,07Ch,038h,010h,000h,000h,000h,000h,000h; 004
	Db	000h,000h,000h,018h,03Ch,03Ch,0E7h,0E7h,0E7h,018h,018h,03Ch,000h,000h,000h,000h; 005
	Db	000h,000h,000h,018h,03Ch,07Eh,0FFh,0FFh,07Eh,018h,018h,03Ch,000h,000h,000h,000h; 006
	Db	000h,000h,000h,000h,000h,000h,018h,03Ch,03Ch,018h,000h,000h,000h,000h,000h,000h; 007
	Db	0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0E7h,0C3h,0C3h,0E7h,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh; 008
	Db	000h,000h,000h,000h,000h,03Ch,066h,042h,042h,066h,03Ch,000h,000h,000h,000h,000h; 009
	Db	0FFh,0FFh,0FFh,0FFh,0FFh,0C3h,099h,0BDh,0BDh,099h,0C3h,0FFh,0FFh,0FFh,0FFh,0FFh; 00A
	Db	000h,000h,01Eh,00Eh,01Ah,032h,078h,0CCh,0CCh,0CCh,0CCh,078h,000h,000h,000h,000h; 00B
	Db	000h,000h,03Ch,066h,066h,066h,066h,03Ch,018h,07Eh,018h,018h,000h,000h,000h,000h; 00C
	Db	000h,000h,03Eh,036h,03Eh,030h,030h,030h,030h,070h,0F0h,0E0h,000h,000h,000h,000h; 00D
	Db	000h,000h,07Eh,066h,07Eh,066h,066h,066h,066h,06Eh,0EEh,0ECh,0C0h,000h,000h,000h; 00E
	Db	000h,000h,000h,018h,018h,0Dbh,03Ch,0E7h,03Ch,0Dbh,018h,018h,000h,000h,000h,000h; 00F
	Db	000h,080h,0C0h,0E0h,0F0h,0F8h,0FEh,0F8h,0F0h,0E0h,0C0h,080h,000h,000h,000h,000h; 010
	Db	000h,002h,006h,00Eh,01Eh,03Eh,0FEh,03Eh,01Eh,00Eh,006h,002h,000h,000h,000h,000h; 011
	Db	000h,000h,018h,03Ch,07Eh,018h,018h,018h,07Eh,03Ch,018h,000h,000h,000h,000h,000h; 012
	Db	000h,000h,066h,066h,066h,066h,066h,066h,066h,000h,066h,066h,000h,000h,000h,000h; 013
	Db	000h,000h,07Fh,0Dbh,0DBh,0DBh,07Bh,01Bh,01Bh,01Bh,01Bh,01Bh,000h,000h,000h,000h; 014
	Db	000h,07Ch,0C6h,060h,038h,06Ch,0C6h,0C6h,06Ch,038h,00Ch,0C6h,07Ch,000h,000h,000h; 015
	Db	000h,000h,000h,000h,000h,000h,000h,000h,0FEh,0FEh,0FEh,0FEh,000h,000h,000h,000h; 016
	Db	000h,000h,018h,03Ch,07Eh,018h,018h,018h,07Eh,03Ch,018h,07Eh,000h,000h,000h,000h; 017
	Db	000h,000h,018h,03Ch,07Eh,018h,018h,018h,018h,018h,018h,018h,000h,000h,000h,000h; 018
	Db	000h,000h,018h,018h,018h,018h,018h,018h,018h,07Eh,03Ch,018h,000h,000h,000h,000h; 019
	Db	000h,000h,000h,000h,000h,018h,00Ch,0FEh,00Ch,018h,000h,000h,000h,000h,000h,000h; 01A
	Db	000h,000h,000h,000h,000h,030h,060h,0FCh,060h,030h,000h,000h,000h,000h,000h,000h; 01B
	Db	000h,000h,000h,000h,000h,000h,0C0h,0C0h,0C0h,0FEh,000h,000h,000h,000h,000h,000h; 01C
	Db	000h,000h,000h,000h,000h,028h,06Ch,0FEh,06Ch,028h,000h,000h,000h,000h,000h,000h; 01D
	Db	000h,000h,000h,000h,010h,038h,038h,07Ch,07Ch,0FEh,0FEh,000h,000h,000h,000h,000h; 01E
	Db	000h,000h,000h,000h,0FEh,0FEh,07Ch,07Ch,038h,038h,010h,000h,000h,000h,000h,000h; 01F
	Db	000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h; 020
	Db	000h,000h,018h,03Ch,03Ch,03Ch,018h,018h,018h,000h,018h,018h,000h,000h,000h,000h; 021
	Db	000h,0C6h,0C6h,0C6h,044h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h; 022
	Db	000h,000h,000h,06Ch,06Ch,0FEh,06Ch,06Ch,06Ch,0FEh,06Ch,06Ch,000h,000h,000h,000h; 023
	Db	018h,018h,07Ch,0C6h,0C2h,0C0h,07Ch,006h,006h,086h,0C6h,07Ch,018h,018h,000h,000h; 024
	Db	000h,000h,000h,000h,0C2h,0C6h,00Ch,018h,030h,060h,0C6h,086h,000h,000h,000h,000h; 025
	Db	000h,000h,038h,06Ch,06Ch,038h,076h,0DCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h; 026
	Db	000h,030h,030h,030h,060h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h; 027
	Db	000h,000h,00Ch,018h,030h,030h,030h,030h,030h,030h,018h,00Ch,000h,000h,000h,000h; 028
	Db	000h,000h,030h,018h,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,018h,030h,000h,000h,000h,000h; 029
	Db	000h,000h,000h,000h,000h,066h,03Ch,0FFh,03Ch,066h,000h,000h,000h,000h,000h,000h; 02A
	Db	000h,000h,000h,000h,000h,018h,018h,07Eh,018h,018h,000h,000h,000h,000h,000h,000h; 02B
	Db	000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,018h,018h,030h,000h,000h,000h; 02C
	Db	000h,000h,000h,000h,000h,000h,000h,0FEh,000h,000h,000h,000h,000h,000h,000h,000h; 02D
	Db	000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,018h,000h,000h,000h,000h; 02E
	Db	000h,000h,000h,000h,002h,006h,00Ch,018h,030h,060h,0C0h,080h,000h,000h,000h,000h; 02F
	Db	000h,000h,038h,06Ch,0C6h,0C6h,0D6h,0D6h,0C6h,0C6h,06Ch,038h,000h,000h,000h,000h; 030
	Db	000h,000h,018h,038h,078h,018h,018h,018h,018h,018h,018h,07Eh,000h,000h,000h,000h; 031
	Db	000h,000h,07Ch,0C6h,006h,00Ch,018h,030h,060h,0C0h,0C6h,0FEh,000h,000h,000h,000h; 032
	Db	000h,000h,07Ch,0C6h,006h,006h,03Ch,006h,006h,006h,0C6h,07Ch,000h,000h,000h,000h; 033
	Db	000h,000h,00Ch,01Ch,03Ch,06Ch,0CCh,0FEh,00Ch,00Ch,00Ch,01Eh,000h,000h,000h,000h; 034
	Db	000h,000h,0FEh,0C0h,0C0h,0C0h,0FCh,006h,006h,006h,0C6h,07Ch,000h,000h,000h,000h; 035
	Db	000h,000h,038h,060h,0C0h,0C0h,0FCh,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h; 036
	Db	000h,000h,0FEh,0C6h,006h,00Ch,018h,030h,030h,030h,030h,030h,000h,000h,000h,000h; 037
	Db	000h,000h,07Ch,0C6h,0C6h,0C6h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h; 038
	Db	000h,000h,07Ch,0C6h,0C6h,0C6h,07Eh,006h,006h,006h,00Ch,078h,000h,000h,000h,000h; 039
	Db	000h,000h,000h,000h,018h,018h,000h,000h,000h,018h,018h,000h,000h,000h,000h,000h; 03A
	Db	000h,000h,000h,000h,018h,018h,000h,000h,000h,018h,018h,030h,000h,000h,000h,000h; 03B
	Db	000h,000h,000h,006h,00Ch,018h,030h,060h,030h,018h,00Ch,006h,000h,000h,000h,000h; 03C
	Db	000h,000h,000h,000h,000h,07Eh,000h,000h,07Eh,000h,000h,000h,000h,000h,000h,000h; 03D
	Db	000h,000h,000h,060h,030h,018h,00Ch,006h,00Ch,018h,030h,060h,000h,000h,000h,000h; 03E
	Db	000h,000h,07Ch,0C6h,0C6h,00Ch,018h,018h,018h,000h,018h,018h,000h,000h,000h,000h; 03F
	Db	000h,000h,000h,07Ch,0C6h,0C6h,0DEh,0DEh,0DEh,0DCh,0C0h,07Ch,000h,000h,000h,000h; 040
	Db	000h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h; 041
	Db	000h,000h,0FCh,066h,066h,066h,07Ch,066h,066h,066h,066h,0FCh,000h,000h,000h,000h; 042
	Db	000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0C0h,0C0h,0C2h,066h,03Ch,000h,000h,000h,000h; 043
	Db	000h,000h,0F8h,06Ch,066h,066h,066h,066h,066h,066h,06Ch,0F8h,000h,000h,000h,000h; 044
	Db	000h,000h,0FEh,066h,062h,068h,078h,068h,060h,062h,066h,0FEh,000h,000h,000h,000h; 045
	Db	000h,000h,0FEh,066h,062h,068h,078h,068h,060h,060h,060h,0F0h,000h,000h,000h,000h; 046
	Db	000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0DEh,0C6h,0C6h,066h,03Ah,000h,000h,000h,000h; 047
	Db	000h,000h,0C6h,0C6h,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h; 048
	Db	000h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h; 049
	Db	000h,000h,01Eh,00Ch,00Ch,00Ch,00Ch,00Ch,0CCh,0CCh,0CCh,078h,000h,000h,000h,000h; 04A
	Db	000h,000h,0E6h,066h,066h,06Ch,078h,078h,06Ch,066h,066h,0E6h,000h,000h,000h,000h; 04B
	Db	000h,000h,0F0h,060h,060h,060h,060h,060h,060h,062h,066h,0FEh,000h,000h,000h,000h; 04C
	Db	000h,000h,0C6h,0EEh,0FEh,0FEh,0D6h,0C6h,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h; 04D
	Db	000h,000h,0C6h,0E6h,0F6h,0FEh,0DEh,0CEh,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h; 04E
	Db	000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h; 04F
	Db	000h,000h,0FCh,066h,066h,066h,07Ch,060h,060h,060h,060h,0F0h,000h,000h,000h,000h; 050
	Db	000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0D6h,0DEh,07Ch,00Ch,00Eh,000h,000h; 051
	Db	000h,000h,0FCh,066h,066h,066h,07Ch,06Ch,066h,066h,066h,0F6h,000h,000h,000h,000h; 052
	Db	000h,000h,07Ch,0C6h,0C6h,060h,038h,00Ch,006h,0C6h,0C6h,07Ch,000h,000h,000h,000h; 053
	Db	000h,000h,07Eh,07Eh,05Ah,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h; 054
	Db	000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h; 055
	Db	000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,06Ch,038h,010h,000h,000h,000h,000h; 056
	Db	000h,000h,0C6h,0C6h,0C6h,0C6h,0D6h,0D6h,0D6h,0FEh,0EEh,06Ch,000h,000h,000h,000h; 057
	Db	000h,000h,0C6h,0C6h,06Ch,07Ch,038h,038h,07Ch,06Ch,0C6h,0C6h,000h,000h,000h,000h; 058
	Db	000h,000h,066h,066h,066h,066h,03Ch,018h,018h,018h,018h,03Ch,000h,000h,000h,000h; 059
	Db	000h,000h,0FEh,0C6h,086h,00Ch,018h,030h,060h,0C2h,0C6h,0FEh,000h,000h,000h,000h; 05A
	Db	000h,000h,03Ch,030h,030h,030h,030h,030h,030h,030h,030h,03Ch,000h,000h,000h,000h; 05B
	Db	000h,000h,000h,080h,0C0h,0E0h,070h,038h,01Ch,00Eh,006h,002h,000h,000h,000h,000h; 05C
	Db	000h,000h,03Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,03Ch,000h,000h,000h,000h; 05D
	Db	010h,038h,06Ch,0C6h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h; 05E
	Db	000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,0FFh,000h,000h; 05F
	Db	030h,030h,018h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h; 060
	Db	000h,000h,000h,000h,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h; 061
	Db	000h,000h,0E0h,060h,060h,078h,06Ch,066h,066h,066h,066h,07Ch,000h,000h,000h,000h; 062
	Db	000h,000h,000h,000h,000h,07Ch,0C6h,0C0h,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h; 063
	Db	000h,000h,01Ch,00Ch,00Ch,03Ch,06Ch,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h; 064
	Db	000h,000h,000h,000h,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h; 065
	Db	000h,000h,01Ch,036h,032h,030h,078h,030h,030h,030h,030h,078h,000h,000h,000h,000h; 066
	Db	000h,000h,000h,000h,000h,076h,0CCh,0CCh,0CCh,0CCh,0CCh,07Ch,00Ch,0CCh,078h,000h; 067
	Db	000h,000h,0E0h,060h,060h,06Ch,076h,066h,066h,066h,066h,0E6h,000h,000h,000h,000h; 068
	Db	000h,000h,018h,018h,000h,038h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h; 069
	Db	000h,000h,006h,006h,000h,00Eh,006h,006h,006h,006h,006h,006h,066h,066h,03Ch,000h; 06A
	Db	000h,000h,0E0h,060h,060h,066h,06Ch,078h,078h,06Ch,066h,0E6h,000h,000h,000h,000h; 06B
	Db	000h,000h,038h,018h,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h; 06C
	Db	000h,000h,000h,000h,000h,0ECh,0FEh,0D6h,0D6h,0D6h,0D6h,0C6h,000h,000h,000h,000h; 06D
	Db	000h,000h,000h,000h,000h,0DCh,066h,066h,066h,066h,066h,066h,000h,000h,000h,000h; 06E
	Db	000h,000h,000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h; 06F
	Db	000h,000h,000h,000h,000h,0DCh,066h,066h,066h,066h,066h,07Ch,060h,060h,0F0h,000h; 070
	Db	000h,000h,000h,000h,000h,076h,0CCh,0CCh,0CCh,0CCh,0CCh,07Ch,00Ch,00Ch,01Eh,000h; 071
	Db	000h,000h,000h,000h,000h,0DCh,076h,066h,060h,060h,060h,0F0h,000h,000h,000h,000h; 072
	Db	000h,000h,000h,000h,000h,07Ch,0C6h,060h,038h,00Ch,0C6h,07Ch,000h,000h,000h,000h; 073
	Db	000h,000h,010h,030h,030h,0FCh,030h,030h,030h,030h,036h,01Ch,000h,000h,000h,000h; 074
	Db	000h,000h,000h,000h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h; 075
	Db	000h,000h,000h,000h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,078h,030h,000h,000h,000h,000h; 076
	Db	000h,000h,000h,000h,000h,0C6h,0C6h,0D6h,0D6h,0D6h,0FEh,06Ch,000h,000h,000h,000h; 077
	Db	000h,000h,000h,000h,000h,0C6h,06Ch,038h,038h,038h,06Ch,0C6h,000h,000h,000h,000h; 078
	Db	000h,000h,000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Eh,006h,00Ch,0F8h,000h; 079
	Db	000h,000h,000h,000h,000h,0FEh,0CCh,018h,030h,060h,0C6h,0FEh,000h,000h,000h,000h; 07A
	Db	000h,000h,00Eh,018h,018h,018h,070h,018h,018h,018h,018h,00Eh,000h,000h,000h,000h; 07B
	Db	000h,000h,018h,018h,018h,018h,000h,018h,018h,018h,018h,018h,000h,000h,000h,000h; 07C
	Db	000h,000h,070h,018h,018h,018h,00Eh,018h,018h,018h,018h,070h,000h,000h,000h,000h; 07D
	Db	000h,000h,076h,0DCh,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h; 07E
	Db	000h,000h,000h,000h,010h,038h,06Ch,0C6h,0C6h,0C6h,0FEh,000h,000h,000h,000h,000h; 07F
	Db	000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0C0h,0C0h,0C2h,066h,03Ch,00Ch,006h,07Ch,000h; 080
	Db	000h,000h,0CCh,000h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h; 081
	Db	000h,00Ch,018h,030h,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h; 082
	Db	000h,010h,038h,06Ch,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h; 083
	Db	000h,000h,0CCh,000h,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h; 084
	Db	000h,078h,0CCh,078h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h; 085
	Db	000h,00Ch,018h,030h,000h,07Ch,0C6h,0C0h,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h; 086
	Db	000h,000h,000h,000h,000h,07Ch,0C6h,0C0h,0C0h,0C0h,0C6h,07Ch,018h,00Ch,078h,000h; 087
	Db	000h,000h,038h,01Ah,01Eh,01Ch,018h,038h,078h,058h,018h,03Ch,000h,000h,000h,000h; 088
	Db	000h,000h,0C6h,000h,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h; 089
	Db	036h,06Ch,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h; 08A
	Db	000h,000h,036h,06Ch,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h; 08B
	Db	000h,018h,03Ch,066h,000h,038h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h; 08C
	Db	018h,030h,000h,0FEh,086h,00Ch,018h,030h,060h,0C2h,0C6h,0FEh,000h,000h,000h,000h; 08D
	Db	000h,0C6h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h; 08E
	Db	00Ch,018h,000h,03Ch,066h,0C2h,0C0h,0C0h,0C0h,0C2h,066h,03Ch,000h,000h,000h,000h; 08F
	Db	018h,030h,060h,000h,0FEh,066h,060h,078h,060h,062h,066h,0FEh,000h,000h,000h,000h; 090
	Db	030h,060h,000h,0F0h,060h,060h,060h,060h,060h,062h,066h,0FEh,000h,000h,000h,000h; 091
	Db	030h,060h,000h,0E0h,060h,060h,060h,060h,060h,060h,060h,0F0h,000h,000h,000h,000h; 092
	Db	000h,010h,038h,06Ch,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h; 093
	Db	000h,000h,0C6h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h; 094
	Db	000h,000h,0F6h,062h,064h,060h,060h,060h,060h,062h,066h,0FEh,000h,000h,000h,000h; 095
	Db	000h,000h,0ECh,064h,068h,060h,060h,060h,060h,060h,060h,0F0h,000h,000h,000h,000h; 096
	Db	018h,030h,000h,07Ch,0C6h,0C6h,060h,038h,00Ch,0C6h,0C6h,07Ch,000h,000h,000h,000h; 097
	Db	000h,000h,00Ch,018h,000h,07Ch,0C6h,060h,038h,00Ch,0C6h,07Ch,000h,000h,000h,000h; 098
	Db	000h,0C6h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h; 099
	Db	000h,0C6h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h; 09A
	Db	066h,03Ch,000h,07Eh,07Eh,05Ah,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h; 09B
	Db	000h,006h,012h,034h,030h,0FCh,030h,030h,030h,030h,036h,01Ch,000h,000h,000h,000h; 09C
	Db	000h,000h,0F0h,064h,06Ch,078h,070h,0E0h,0E0h,062h,066h,0FEh,000h,000h,000h,000h; 09D
	Db	000h,000h,000h,000h,000h,000h,0C6h,06Ch,038h,06Ch,0C6h,000h,000h,000h,000h,000h; 09E
	Db	000h,000h,06Ch,038h,000h,07Ch,0C6h,0C0h,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h; 09F
	Db	000h,018h,030h,060h,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h; 0A0
	Db	000h,00Ch,018h,030h,000h,038h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h; 0A1
	Db	000h,018h,030h,060h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h; 0A2
	Db	000h,018h,030h,060h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h; 0A3
	Db	000h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,018h,030h,01Eh,000h; 0A4
	Db	000h,000h,000h,000h,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,018h,030h,01Eh,000h; 0A5
	Db	06Ch,038h,000h,0FEh,0C6h,08Ch,018h,030h,060h,0C2h,0C6h,0FEh,000h,000h,000h,000h; 0A6
	Db	000h,000h,06Ch,038h,000h,0FEh,0CCh,018h,030h,060h,0C6h,0FEh,000h,000h,000h,000h; 0A7
	Db	000h,000h,0FEh,066h,062h,068h,078h,068h,060h,062h,066h,0FEh,018h,030h,01Eh,000h; 0A8
	Db	000h,000h,000h,000h,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,030h,060h,03Ch,000h; 0A9
	Db	000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h; 0AA
	Db	000h,00Ch,018h,030h,000h,0FEh,0CCh,018h,030h,060h,0C6h,0FEh,000h,000h,000h,000h; 0AB
	Db	066h,03Ch,000h,03Ch,066h,0C2h,0C0h,0C0h,0C0h,0C2h,066h,03Ch,000h,000h,000h,000h; 0AC
	Db	000h,000h,000h,000h,000h,07Ch,0C6h,060h,038h,00Ch,0C6h,07Ch,018h,00Ch,078h,000h; 0AD
	Db	000h,000h,000h,000h,000h,036h,06Ch,0D8h,06Ch,036h,000h,000h,000h,000h,000h,000h; 0AE
	Db	000h,000h,000h,000h,000h,06Ch,036h,01Bh,036h,06Ch,000h,000h,000h,000h,000h,000h; 0AF
	Db	011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h; 0B0
	Db	055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh; 0B1
	Db	0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h; 0B2
	Db	018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h; 0B3
	Db	018h,018h,018h,018h,018h,018h,018h,0F8h,018h,018h,018h,018h,018h,018h,018h,018h; 0B4
	Db	018h,030h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h,000h,000h; 0B5
	Db	038h,06Ch,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h,000h,000h; 0B6
	Db	06Ch,038h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h,000h,000h; 0B7
	Db	000h,000h,07Ch,0C6h,0C6h,060h,038h,00Ch,006h,0C6h,0C6h,07Ch,018h,00Ch,078h,000h; 0B8
	Db	036h,036h,036h,036h,036h,0F6h,006h,0F6h,036h,036h,036h,036h,036h,036h,036h,036h; 0B9
	Db	036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h; 0BA
	Db	000h,000h,000h,000h,000h,0FEh,006h,0F6h,036h,036h,036h,036h,036h,036h,036h,036h; 0BB
	Db	036h,036h,036h,036h,036h,0F6h,006h,0FEh,000h,000h,000h,000h,000h,000h,000h,000h; 0BC
	Db	018h,018h,000h,0FEh,086h,00Ch,018h,030h,060h,0C2h,0C6h,0FEh,000h,000h,000h,000h; 0BD
	Db	000h,000h,018h,018h,000h,0FEh,0CCh,018h,030h,060h,0C6h,0FEh,000h,000h,000h,000h; 0BE
	Db	000h,000h,000h,000h,000h,000h,000h,0F8h,018h,018h,018h,018h,018h,018h,018h,018h; 0BF
	Db	018h,018h,018h,018h,018h,018h,018h,01Fh,000h,000h,000h,000h,000h,000h,000h,000h; 0C0
	Db	018h,018h,018h,018h,018h,018h,018h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h; 0C1
	Db	000h,000h,000h,000h,000h,000h,000h,0FFh,018h,018h,018h,018h,018h,018h,018h,018h; 0C2
	Db	018h,018h,018h,018h,018h,018h,018h,01Fh,018h,018h,018h,018h,018h,018h,018h,018h; 0C3
	Db	000h,000h,000h,000h,000h,000h,000h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h; 0C4
	Db	018h,018h,018h,018h,018h,018h,018h,0FFh,018h,018h,018h,018h,018h,018h,018h,018h; 0C5
	Db	0C6h,07Ch,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h,000h,000h; 0C6
	Db	000h,000h,0C6h,07Ch,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h; 0C7
	Db	036h,036h,036h,036h,036h,037h,030h,03Fh,000h,000h,000h,000h,000h,000h,000h,000h; 0C8
	Db	000h,000h,000h,000h,000h,03Fh,030h,037h,036h,036h,036h,036h,036h,036h,036h,036h; 0C9
	Db	036h,036h,036h,036h,036h,0F7h,000h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h; 0CA
	Db	000h,000h,000h,000h,000h,0FFh,000h,0F7h,036h,036h,036h,036h,036h,036h,036h,036h; 0CB
	Db	036h,036h,036h,036h,036h,037h,030h,037h,036h,036h,036h,036h,036h,036h,036h,036h; 0CC
	Db	000h,000h,000h,000h,000h,0FFh,000h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h; 0CD
	Db	036h,036h,036h,036h,036h,0F7h,000h,0F7h,036h,036h,036h,036h,036h,036h,036h,036h; 0CE
	Db	000h,000h,000h,000h,000h,0C6h,07Ch,0C6h,0C6h,0C6h,07Ch,0C6h,000h,000h,000h,000h; 0CF
	Db	000h,000h,00Ch,00Ch,07Eh,00Ch,03Ch,06Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h; 0D0
	Db	000h,000h,0F8h,06Ch,066h,066h,0F6h,066h,066h,066h,06Ch,0F8h,000h,000h,000h,000h; 0D1
	Db	06Ch,038h,000h,0F8h,06Ch,066h,066h,066h,066h,066h,06Ch,0F8h,000h,000h,000h,000h; 0D2
	Db	06Ch,000h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h,000h,000h; 0D3
	Db	000h,000h,01Dh,00Dh,00Dh,03Ch,06Ch,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h; 0D4
	Db	06Ch,038h,000h,0C6h,0E6h,0F6h,0FEh,0DEh,0CEh,0C6h,0C6h,0C6h,000h,000h,000h,000h; 0D5
	Db	00Ch,018h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h; 0D6
	Db	03Ch,066h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h; 0D7
	Db	000h,000h,066h,03Ch,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h; 0D8
	Db	018h,018h,018h,018h,018h,018h,018h,0F8h,000h,000h,000h,000h,000h,000h,000h,000h; 0D9
	Db	000h,000h,000h,000h,000h,000h,000h,01Fh,018h,018h,018h,018h,018h,018h,018h,018h; 0DA
	Db	0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh; 0	 Db
	Db	000h,000h,000h,000h,000h,000h,000h,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh; 0DC
	Db	000h,000h,07Eh,07Eh,05Ah,018h,018h,018h,018h,018h,018h,03Ch,018h,00Ch,078h,000h; 0DD
	Db	038h,06Ch,038h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h; 0DE
	Db	0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,000h,000h,000h,000h,000h,000h,000h,000h,000h; 0DF
	Db	00Ch,018h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h; 0E0
	Db	000h,000h,078h,0CCh,0CCh,0CCh,0D8h,0CCh,0C6h,0C6h,0C6h,0CCh,000h,000h,000h,000h; 0E1
	Db	038h,06Ch,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h; 0E2
	Db	00Ch,018h,000h,0C6h,0E6h,0F6h,0FEh,0DEh,0CEh,0C6h,0C6h,0C6h,000h,000h,000h,000h; 0E3
	Db	000h,00Ch,018h,030h,000h,0DCh,066h,066h,066h,066h,066h,066h,000h,000h,000h,000h; 0E4
	Db	000h,000h,06Ch,038h,000h,0DCh,066h,066h,066h,066h,066h,066h,000h,000h,000h,000h; 0E5
	Db	06Ch,038h,000h,07Ch,0C6h,0C0h,060h,038h,00Ch,006h,0C6h,07Ch,000h,000h,000h,000h; 0E6
	Db	000h,000h,06Ch,038h,000h,07Ch,0C6h,060h,038h,00Ch,0C6h,07Ch,000h,000h,000h,000h; 0E7
	Db	018h,030h,000h,0FCh,066h,066h,066h,07Ch,06Ch,066h,066h,0F6h,000h,000h,000h,000h; 0E8
	Db	018h,030h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h; 0E9
	Db	000h,00Ch,018h,030h,000h,0DCh,076h,066h,060h,060h,060h,0F0h,000h,000h,000h,000h; 0EA
	Db	036h,06Ch,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h; 0EB
	Db	000h,00Ch,018h,030h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Eh,006h,00Ch,0F8h,000h; 0EC
	Db	00Ch,018h,000h,066h,066h,066h,066h,03Ch,018h,018h,018h,03Ch,000h,000h,000h,000h; 0ED
	Db	000h,000h,010h,030h,030h,0FCh,030h,030h,030h,030h,036h,01Ch,018h,00Ch,078h,000h; 0EE
	Db	000h,00Ch,018h,030h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h; 0EF
	Db	000h,000h,000h,000h,000h,000h,000h,07Eh,000h,000h,000h,000h,000h,000h,000h,000h; 0F0
	Db	000h,036h,06Ch,0D8h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h; 0F1
	Db	000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,030h,060h,03Ch,000h; 0F2
	Db	000h,06Ch,038h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h; 0F3
	Db	000h,0C6h,07Ch,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h; 0F4
	Db	000h,07Ch,0C6h,060h,038h,06Ch,0C6h,0C6h,06Ch,038h,00Ch,0C6h,07Ch,000h,000h,000h; 0F5
	Db	000h,000h,000h,000h,018h,018h,000h,07Eh,000h,018h,018h,000h,000h,000h,000h,000h; 0F6
	Db	000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,00Ch,078h,000h; 0F7
	Db	000h,038h,06Ch,06Ch,038h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h; 0F8
	Db	000h,06Ch,06Ch,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h; 0F9
	Db	000h,018h,018h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h; 0FA
	Db	000h,000h,036h,06Ch,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h; 0FB
	Db	06Ch,038h,000h,0FCh,066h,066h,066h,07Ch,06Ch,066h,066h,0F6h,000h,000h,000h,000h; 0FC
	Db	000h,000h,06Ch,038h,000h,0DCh,076h,066h,060h,060h,060h,0F0h,000h,000h,000h,000h; 0FD
	Db	000h,000h,000h,000h,07Ch,07Ch,07Ch,07Ch,07Ch,07Ch,07Ch,000h,000h,000h,000h,000h; 0FE
	Db	000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h; 0FF
=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\ega2\852-8x14.asm ===
db 000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h; 000
 db 000h,000h,07Eh,081h,0A5h,081h,081h,0BDh,099h,081h,07Eh,000h,000h,000h; 001
 db 000h,000h,07Eh,0FFh,0DBh,0FFh,0FFh,0C3h,0E7h,0FFh,07Eh,000h,000h,000h; 002
 db 000h,000h,000h,06Ch,0FEh,0FEh,0FEh,0FEh,07Ch,038h,010h,000h,000h,000h; 003
 db 000h,000h,000h,010h,038h,07Ch,0FEh,07Ch,038h,010h,000h,000h,000h,000h; 004
 db 000h,000h,018h,03Ch,03Ch,0E7h,0E7h,0E7h,018h,018h,03Ch,000h,000h,000h; 005
 db 000h,000h,018h,03Ch,07Eh,0FFh,0FFh,07Eh,018h,018h,03Ch,000h,000h,000h; 006
 db 000h,000h,000h,000h,000h,018h,03Ch,03Ch,018h,000h,000h,000h,000h,000h; 007
 db 0FFh,0FFh,0FFh,0FFh,0FFh,0E7h,0C3h,0C3h,0E7h,0FFh,0FFh,0FFh,0FFh,0FFh; 008
 db 000h,000h,000h,000h,03Ch,066h,042h,042h,066h,03Ch,000h,000h,000h,000h; 009
 db 0FFh,0FFh,0FFh,0FFh,0C3h,099h,0BDh,0BDh,099h,0C3h,0FFh,0FFh,0FFh,0FFh; 00A
 db 000h,000h,01Eh,00Eh,01Ah,032h,078h,0CCh,0CCh,0CCh,078h,000h,000h,000h; 00B
 db 000h,000h,03Ch,066h,066h,066h,03Ch,018h,07Eh,018h,018h,000h,000h,000h; 00C
 db 000h,000h,03Fh,033h,03Fh,030h,030h,030h,070h,0F0h,0E0h,000h,000h,000h; 00D
 db 000h,000h,07Fh,063h,07Fh,063h,063h,063h,067h,0E7h,0E6h,0C0h,000h,000h; 00E
 db 000h,000h,018h,018h,0DBh,03Ch,0E7h,03Ch,0DBh,018h,018h,000h,000h,000h; 00F
 db 000h,000h,080h,0C0h,0E0h,0F8h,0FEh,0F8h,0E0h,0C0h,080h,000h,000h,000h; 010
 db 000h,000h,002h,006h,00Eh,03Eh,0FEh,03Eh,00Eh,006h,002h,000h,000h,000h; 011
 db 000h,000h,018h,03Ch,07Eh,018h,018h,018h,07Eh,03Ch,018h,000h,000h,000h; 012
 db 000h,000h,066h,066h,066h,066h,066h,066h,000h,066h,066h,000h,000h,000h; 013
 db 000h,000h,07Fh,0DBh,0DBh,0DBh,07Bh,01Bh,01Bh,01Bh,01Bh,000h,000h,000h; 014
 db 000h,07Ch,0C6h,060h,038h,06Ch,0C6h,0C6h,06Ch,038h,00Ch,0C6h,07Ch,000h; 015
 db 000h,000h,000h,000h,000h,000h,000h,000h,0FEh,0FEh,0FEh,000h,000h,000h; 016
 db 000h,000h,018h,03Ch,07Eh,018h,018h,018h,07Eh,03Ch,018h,07Eh,000h,000h; 017
 db 000h,000h,018h,03Ch,07Eh,018h,018h,018h,018h,018h,018h,000h,000h,000h; 018
 db 000h,000h,018h,018h,018h,018h,018h,018h,07Eh,03Ch,018h,000h,000h,000h; 019
 db 000h,000h,000h,000h,018h,00Ch,0FEh,00Ch,018h,000h,000h,000h,000h,000h; 01A
 db 000h,000h,000h,000h,030h,060h,0FEh,060h,030h,000h,000h,000h,000h,000h; 01B
 db 000h,000h,000h,000h,000h,0C0h,0C0h,0C0h,0FEh,000h,000h,000h,000h,000h; 01C
 db 000h,000h,000h,000h,028h,06Ch,0FEh,06Ch,028h,000h,000h,000h,000h,000h; 01D
 db 000h,000h,000h,010h,038h,038h,07Ch,07Ch,0FEh,0FEh,000h,000h,000h,000h; 01E
 db 000h,000h,000h,0FEh,0FEh,07Ch,07Ch,038h,038h,010h,000h,000h,000h,000h; 01F
 db 000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h; 020
 db 000h,000h,018h,03Ch,03Ch,03Ch,018h,018h,000h,018h,018h,000h,000h,000h; 021
 db 000h,066h,066h,066h,024h,000h,000h,000h,000h,000h,000h,000h,000h,000h; 022
 db 000h,000h,06Ch,06Ch,0FEh,06Ch,06Ch,06Ch,0FEh,06Ch,06Ch,000h,000h,000h; 023
 db 018h,018h,07Ch,0C6h,0C2h,0C0h,07Ch,006h,086h,0C6h,07Ch,018h,018h,000h; 024
 db 000h,000h,000h,000h,0C2h,0C6h,00Ch,018h,030h,066h,0C6h,000h,000h,000h; 025
 db 000h,000h,038h,06Ch,06Ch,038h,076h,0DCh,0CCh,0CCh,076h,000h,000h,000h; 026
 db 000h,030h,030h,030h,060h,000h,000h,000h,000h,000h,000h,000h,000h,000h; 027
 db 000h,000h,00Ch,018h,030h,030h,030h,030h,030h,018h,00Ch,000h,000h,000h; 028
 db 000h,000h,030h,018h,00Ch,00Ch,00Ch,00Ch,00Ch,018h,030h,000h,000h,000h; 029
 db 000h,000h,000h,000h,066h,03Ch,0FFh,03Ch,066h,000h,000h,000h,000h,000h; 02A
 db 000h,000h,000h,000h,018h,018h,07Eh,018h,018h,000h,000h,000h,000h,000h; 02B
 db 000h,000h,000h,000h,000h,000h,000h,000h,018h,018h,018h,030h,000h,000h; 02C
 db 000h,000h,000h,000h,000h,000h,0FEh,000h,000h,000h,000h,000h,000h,000h; 02D
 db 000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,018h,000h,000h,000h; 02E
 db 000h,000h,002h,006h,00Ch,018h,030h,060h,0C0h,080h,000h,000h,000h,000h; 02F
 db 000h,000h,07Ch,0C6h,0CEh,0DEh,0F6h,0E6h,0C6h,0C6h,07Ch,000h,000h,000h; 030
 db 000h,000h,018h,038h,078h,018h,018h,018h,018h,018h,07Eh,000h,000h,000h; 031
 db 000h,000h,07Ch,0C6h,006h,00Ch,018h,030h,060h,0C6h,0FEh,000h,000h,000h; 032
 db 000h,000h,07Ch,0C6h,006h,006h,03Ch,006h,006h,0C6h,07Ch,000h,000h,000h; 033
 db 000h,000h,00Ch,01Ch,03Ch,06Ch,0CCh,0FEh,00Ch,00Ch,01Eh,000h,000h,000h; 034
 db 000h,000h,0FEh,0C0h,0C0h,0C0h,0FCh,006h,006h,0C6h,07Ch,000h,000h,000h; 035
 db 000h,000h,038h,060h,0C0h,0C0h,0FCh,0C6h,0C6h,0C6h,07Ch,000h,000h,000h; 036
 db 000h,000h,0FEh,0C6h,006h,00Ch,018h,030h,030h,030h,030h,000h,000h,000h; 037
 db 000h,000h,07Ch,0C6h,0C6h,0C6h,07Ch,0C6h,0C6h,0C6h,07Ch,000h,000h,000h; 038
 db 000h,000h,07Ch,0C6h,0C6h,0C6h,07Eh,006h,006h,00Ch,078h,000h,000h,000h; 039
 db 000h,000h,000h,018h,018h,000h,000h,000h,018h,018h,000h,000h,000h,000h; 03A
 db 000h,000h,000h,018h,018h,000h,000h,000h,018h,018h,030h,000h,000h,000h; 03B
 db 000h,000h,006h,00Ch,018h,030h,060h,030h,018h,00Ch,006h,000h,000h,000h; 03C
 db 000h,000h,000h,000h,000h,07Eh,000h,000h,07Eh,000h,000h,000h,000h,000h; 03D
 db 000h,000h,060h,030h,018h,00Ch,006h,00Ch,018h,030h,060h,000h,000h,000h; 03E
 db 000h,000h,07Ch,0C6h,0C6h,00Ch,018h,018h,000h,018h,018h,000h,000h,000h; 03F
 db 000h,000h,07Ch,0C6h,0C6h,0DEh,0DEh,0DEh,0DCh,0C0h,07Ch,000h,000h,000h; 040
 db 000h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h,000h; 041
 db 000h,000h,0FCh,066h,066h,066h,07Ch,066h,066h,066h,0FCh,000h,000h,000h; 042
 db 000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0C0h,0C2h,066h,03Ch,000h,000h,000h; 043
 db 000h,000h,0F8h,06Ch,066h,066h,066h,066h,066h,06Ch,0F8h,000h,000h,000h; 044
 db 000h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h,000h; 045
 db 000h,000h,0FEh,066h,062h,068h,078h,068h,060h,060h,0F0h,000h,000h,000h; 046
 db 000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0DEh,0C6h,066h,03Ah,000h,000h,000h; 047
 db 000h,000h,0C6h,0C6h,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,000h,000h,000h; 048
 db 000h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h; 049
 db 000h,000h,01Eh,00Ch,00Ch,00Ch,00Ch,00Ch,0CCh,0CCh,078h,000h,000h,000h; 04A
 db 000h,000h,0E6h,066h,06Ch,06Ch,078h,06Ch,06Ch,066h,0E6h,000h,000h,000h; 04B
 db 000h,000h,0F0h,060h,060h,060h,060h,060h,062h,066h,0FEh,000h,000h,000h; 04C
 db 000h,000h,0C6h,0EEh,0FEh,0FEh,0D6h,0C6h,0C6h,0C6h,0C6h,000h,000h,000h; 04D
 db 000h,000h,0C6h,0E6h,0F6h,0FEh,0DEh,0CEh,0C6h,0C6h,0C6h,000h,000h,000h; 04E
 db 000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h; 04F
 db 000h,000h,0FCh,066h,066h,066h,07Ch,060h,060h,060h,0F0h,000h,000h,000h; 050
 db 000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0D6h,0DEh,07Ch,00Ch,00Eh,000h,000h; 051
 db 000h,000h,0FCh,066h,066h,066h,07Ch,06Ch,066h,066h,0E6h,000h,000h,000h; 052
 db 000h,000h,07Ch,0C6h,0C6h,060h,038h,00Ch,0C6h,0C6h,07Ch,000h,000h,000h; 053
 db 000h,000h,07Eh,07Eh,05Ah,018h,018h,018h,018h,018h,03Ch,000h,000h,000h; 054
 db 000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h; 055
 db 000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,06Ch,038h,010h,000h,000h,000h; 056
 db 000h,000h,0C6h,0C6h,0C6h,0C6h,0D6h,0D6h,0FEh,07Ch,06Ch,000h,000h,000h; 057
 db 000h,000h,0C6h,0C6h,06Ch,038h,038h,038h,06Ch,0C6h,0C6h,000h,000h,000h; 058
 db 000h,000h,066h,066h,066h,066h,03Ch,018h,018h,018h,03Ch,000h,000h,000h; 059
 db 000h,000h,0FEh,0C6h,08Ch,018h,030h,060h,0C2h,0C6h,0FEh,000h,000h,000h; 05A
 db 000h,000h,03Ch,030h,030h,030h,030h,030h,030h,030h,03Ch,000h,000h,000h; 05B
 db 000h,000h,080h,0C0h,0E0h,070h,038h,01Ch,00Eh,006h,002h,000h,000h,000h; 05C
 db 000h,000h,03Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,03Ch,000h,000h,000h; 05D
 db 010h,038h,06Ch,0C6h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h; 05E
 db 000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,0FFh,000h; 05F
 db 030h,030h,018h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h; 060
 db 000h,000h,000h,000h,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h,000h; 061
 db 000h,000h,0E0h,060h,060h,078h,06Ch,066h,066h,066h,07Ch,000h,000h,000h; 062
 db 000h,000h,000h,000h,000h,07Ch,0C6h,0C0h,0C0h,0C6h,07Ch,000h,000h,000h; 063
 db 000h,000h,01Ch,00Ch,00Ch,03Ch,06Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h; 064
 db 000h,000h,000h,000h,000h,07Ch,0C6h,0FEh,0C0h,0C6h,07Ch,000h,000h,000h; 065
 db 000h,000h,038h,06Ch,064h,060h,0F0h,060h,060h,060h,0F0h,000h,000h,000h; 066
 db 000h,000h,000h,000h,000h,076h,0CCh,0CCh,0CCh,07Ch,00Ch,0CCh,078h,000h; 067
 db 000h,000h,0E0h,060h,060h,06Ch,076h,066h,066h,066h,0E6h,000h,000h,000h; 068
 db 000h,000h,018h,018h,000h,038h,018h,018h,018h,018h,03Ch,000h,000h,000h; 069
 db 000h,000h,006h,006h,000h,00Eh,006h,006h,006h,006h,066h,066h,03Ch,000h; 06A
 db 000h,000h,0E0h,060h,060h,066h,06Ch,078h,06Ch,066h,0E6h,000h,000h,000h; 06B
 db 000h,000h,038h,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h; 06C
 db 000h,000h,000h,000h,000h,0ECh,0FEh,0D6h,0D6h,0D6h,0C6h,000h,000h,000h; 06D
 db 000h,000h,000h,000h,000h,0DCh,066h,066h,066h,066h,066h,000h,000h,000h; 06E
 db 000h,000h,000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h; 06F
 db 000h,000h,000h,000h,000h,0DCh,066h,066h,066h,07Ch,060h,060h,0F0h,000h; 070
 db 000h,000h,000h,000h,000h,076h,0CCh,0CCh,0CCh,07Ch,00Ch,00Ch,01Eh,000h; 071
 db 000h,000h,000h,000h,000h,0DCh,076h,066h,060h,060h,0F0h,000h,000h,000h; 072
 db 000h,000h,000h,000h,000h,07Ch,0C6h,070h,01Ch,0C6h,07Ch,000h,000h,000h; 073
 db 000h,000h,010h,030h,030h,0FCh,030h,030h,030h,036h,01Ch,000h,000h,000h; 074
 db 000h,000h,000h,000h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h; 075
 db 000h,000h,000h,000h,000h,066h,066h,066h,066h,03Ch,018h,000h,000h,000h; 076
 db 000h,000h,000h,000h,000h,0C6h,0C6h,0D6h,0D6h,0FEh,06Ch,000h,000h,000h; 077
 db 000h,000h,000h,000h,000h,0C6h,06Ch,038h,038h,06Ch,0C6h,000h,000h,000h; 078
 db 000h,000h,000h,000h,000h,0C6h,0C6h,0C6h,0C6h,07Eh,006h,00Ch,0F8h,000h; 079
 db 000h,000h,000h,000h,000h,0FEh,0CCh,018h,030h,066h,0FEh,000h,000h,000h; 07A
 db 000h,000h,00Eh,018h,018h,018h,070h,018h,018h,018h,00Eh,000h,000h,000h; 07B
 db 000h,000h,018h,018h,018h,018h,000h,018h,018h,018h,018h,000h,000h,000h; 07C
 db 000h,000h,070h,018h,018h,018h,00Eh,018h,018h,018h,070h,000h,000h,000h; 07D
 db 000h,000h,076h,0DCh,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h; 07E
 db 000h,000h,000h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,000h,000h,000h,000h; 07F
 db 000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0C2h,066h,03Ch,00Ch,006h,07Ch,000h; 080
 db 000h,000h,000h,0CCh,000h,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h; 081
 db 000h,00Ch,018h,030h,000h,07Ch,0C6h,0FEh,0C0h,0C6h,07Ch,000h,000h,000h; 082
 db 000h,010h,038h,06Ch,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h,000h; 083
 db 000h,000h,000h,06Ch,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h,000h; 084
 db 000h,038h,06Ch,038h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h; 085
 db 000h,00Ch,018h,030h,000h,07Ch,0C6h,0C0h,0C0h,0C6h,07Ch,000h,000h,000h; 086
 db 000h,000h,000h,000h,03Ch,066h,060h,066h,03Ch,00Ch,006h,03Ch,000h,000h; 087
 db 000h,000h,038h,01Ah,01Eh,01Ch,018h,038h,078h,018h,03Ch,000h,000h,000h; 088
 db 000h,000h,000h,06Ch,000h,07Ch,0C6h,0FEh,0C0h,0C6h,07Ch,000h,000h,000h; 089
 db 036h,06Ch,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h; 08A
 db 000h,000h,033h,066h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h; 08B
 db 000h,018h,03Ch,066h,000h,038h,018h,018h,018h,018h,03Ch,000h,000h,000h; 08C
 db 00Ch,018h,010h,0FEh,0C6h,08Ch,018h,030h,062h,0C6h,0FEh,000h,000h,000h; 08D
 db 000h,0C6h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h,000h; 08E
 db 00Ch,018h,010h,03Ch,066h,0C2h,0C0h,0C0h,0C2h,066h,03Ch,000h,000h,000h; 08F
 db 018h,030h,020h,0FEh,062h,068h,078h,068h,062h,066h,0FEh,000h,000h,000h; 090
 db 030h,060h,040h,0F0h,060h,060h,060h,060h,062h,066h,0FEh,000h,000h,000h; 091
 db 030h,060h,040h,0E0h,060h,060h,060h,060h,060h,060h,0F0h,000h,000h,000h; 092
 db 000h,010h,038h,06Ch,000h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h; 093
 db 000h,000h,000h,0C6h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h; 094
 db 000h,000h,0F6h,062h,064h,060h,060h,060h,062h,066h,0FEh,000h,000h,000h; 095
 db 000h,000h,0ECh,064h,068h,060h,060h,060h,060h,060h,0F0h,000h,000h,000h; 096
 db 00Ch,018h,010h,07Ch,0C6h,0C6h,070h,01Ch,0C6h,0C6h,07Ch,000h,000h,000h; 097
 db 000h,00Ch,018h,030h,000h,07Ch,0C6h,070h,01Ch,0C6h,07Ch,000h,000h,000h; 098
 db 000h,0C6h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h; 099
 db 000h,0C6h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h; 09A
 db 066h,03Ch,018h,07Eh,07Eh,05Ah,018h,018h,018h,018h,03Ch,000h,000h,000h; 09B
 db 000h,006h,012h,034h,030h,0FCh,030h,030h,030h,036h,01Ch,000h,000h,000h; 09C
 db 000h,000h,078h,030h,036h,03Ch,038h,070h,0F2h,036h,07Eh,000h,000h,000h; 09D
 db 000h,000h,000h,000h,066h,03Ch,018h,03Ch,066h,000h,000h,000h,000h,000h; 09E
 db 000h,000h,06Ch,038h,000h,07Ch,0C6h,0C0h,0C0h,0C6h,07Ch,000h,000h,000h; 09F
 db 000h,018h,030h,060h,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h,000h; 0A0
 db 000h,00Ch,018h,030h,000h,038h,018h,018h,018h,018h,03Ch,000h,000h,000h; 0A1
 db 000h,018h,030h,060h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h; 0A2
 db 000h,018h,030h,060h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h; 0A3
 db 000h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,004h,00Ch,007h; 0A4
 db 000h,000h,000h,000h,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,004h,00Ch,007h; 0A5
 db 06Ch,038h,000h,0FEh,0C6h,08Ch,018h,030h,062h,0C6h,0FEh,000h,000h,000h; 0A6
 db 000h,000h,06Ch,038h,000h,0FEh,0CCh,018h,030h,066h,0FEh,000h,000h,000h; 0A7
 db 000h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,008h,018h,00Eh; 0A8
 db 000h,000h,000h,000h,000h,07Ch,0C6h,0FEh,0C0h,0C6h,07Ch,010h,030h,01Ch; 0A9
 db 000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h; 0AA
 db 000h,00Ch,018h,030h,000h,0FEh,0CCh,018h,030h,066h,0FEh,000h,000h,000h; 0AB
 db 06Ch,038h,000h,03Ch,066h,0C2h,0C0h,0C0h,0C2h,066h,03Ch,000h,000h,000h; 0AC
 db 000h,000h,000h,000h,000h,07Ch,0C6h,070h,01Ch,0C6h,07Ch,010h,018h,070h; 0AD
 db 000h,000h,000h,000h,036h,06Ch,0D8h,06Ch,036h,000h,000h,000h,000h,000h; 0AE
 db 000h,000h,000h,000h,0D8h,06Ch,036h,06Ch,0D8h,000h,000h,000h,000h,000h; 0AF
 db 011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h; 0B0
 db 055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh; 0B1
 db 0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h; 0B2
 db 018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h; 0B3
 db 018h,018h,018h,018h,018h,018h,018h,0F8h,018h,018h,018h,018h,018h,018h; 0B4
 db 018h,030h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h,000h; 0B5
 db 038h,06Ch,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h,000h; 0B6
 db 06Ch,038h,000h,0FEh,062h,068h,078h,068h,062h,066h,0FEh,000h,000h,000h; 0B7
 db 000h,000h,07Ch,0C6h,0C6h,060h,038h,00Ch,0C6h,0C6h,07Ch,010h,018h,070h; 0B8
 db 036h,036h,036h,036h,036h,0F6h,006h,0F6h,036h,036h,036h,036h,036h,036h; 0B9
 db 036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h; 0BA
 db 000h,000h,000h,000h,000h,0FEh,006h,0F6h,036h,036h,036h,036h,036h,036h; 0BB
 db 036h,036h,036h,036h,036h,0F6h,006h,0FEh,000h,000h,000h,000h,000h,000h; 0BC
 db 018h,018h,000h,0FEh,0C6h,08Ch,018h,030h,062h,0C6h,0FEh,000h,000h,000h; 0BD
 db 000h,000h,018h,018h,000h,0FEh,0CCh,018h,030h,066h,0FEh,000h,000h,000h; 0BE
 db 000h,000h,000h,000h,000h,000h,000h,0F8h,018h,018h,018h,018h,018h,018h; 0BF
 db 018h,018h,018h,018h,018h,018h,018h,01Fh,000h,000h,000h,000h,000h,000h; 0C0
 db 018h,018h,018h,018h,018h,018h,018h,0FFh,000h,000h,000h,000h,000h,000h; 0C1
 db 000h,000h,000h,000h,000h,000h,000h,0FFh,018h,018h,018h,018h,018h,018h; 0C2
 db 018h,018h,018h,018h,018h,018h,018h,01Fh,018h,018h,018h,018h,018h,018h; 0C3
 db 000h,000h,000h,000h,000h,000h,000h,0FFh,000h,000h,000h,000h,000h,000h; 0C4
 db 018h,018h,018h,018h,018h,018h,018h,0FFh,018h,018h,018h,018h,018h,018h; 0C5
 db 0C6h,07Ch,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h,000h; 0C6
 db 000h,000h,0CCh,078h,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h,000h; 0C7
 db 036h,036h,036h,036h,036h,037h,030h,03Fh,000h,000h,000h,000h,000h,000h; 0C8
 db 000h,000h,000h,000h,000h,03Fh,030h,037h,036h,036h,036h,036h,036h,036h; 0C9
 db 036h,036h,036h,036h,036h,0F7h,000h,0FFh,000h,000h,000h,000h,000h,000h; 0CA
 db 000h,000h,000h,000h,000h,0FFh,000h,0F7h,036h,036h,036h,036h,036h,036h; 0CB
 db 036h,036h,036h,036h,036h,037h,030h,037h,036h,036h,036h,036h,036h,036h; 0CC
 db 000h,000h,000h,000h,000h,0FFh,000h,0FFh,000h,000h,000h,000h,000h,000h; 0CD
 db 036h,036h,036h,036h,036h,0F7h,000h,0F7h,036h,036h,036h,036h,036h,036h; 0CE
 db 000h,000h,000h,000h,0C6h,07Ch,0C6h,0C6h,0C6h,07Ch,0C6h,000h,000h,000h; 0CF
 db 000h,000h,00Ch,07Eh,00Ch,03Ch,06Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h; 0D0
 db 000h,000h,0F8h,06Ch,066h,066h,0F6h,066h,066h,06Ch,0F8h,000h,000h,000h; 0D1
 db 0CCh,078h,000h,0F8h,06Ch,066h,066h,066h,066h,06Ch,0F8h,000h,000h,000h; 0D2
 db 000h,06Ch,000h,0FEh,062h,068h,078h,068h,062h,066h,0FEh,000h,000h,000h; 0D3
 db 000h,000h,01Dh,00Dh,00Dh,03Ch,06Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h; 0D4
 db 06Ch,038h,000h,0C6h,0E6h,0F6h,0FEh,0DEh,0CEh,0C6h,0C6h,000h,000h,000h; 0D5
 db 00Ch,018h,010h,03Ch,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h; 0D6
 db 03Ch,066h,000h,03Ch,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h; 0D7
 db 000h,000h,06Ch,038h,000h,07Ch,0C6h,0FEh,0C0h,0C6h,07Ch,000h,000h,000h; 0D8
 db 018h,018h,018h,018h,018h,018h,018h,0F8h,000h,000h,000h,000h,000h,000h; 0D9
 db 000h,000h,000h,000h,000h,000h,000h,01Fh,018h,018h,018h,018h,018h,018h; 0DA
 db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh; 0DB
 db 000h,000h,000h,000h,000h,000h,000h,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh; 0DC
 db 000h,000h,07Eh,07Eh,05Ah,018h,018h,018h,018h,018h,03Ch,008h,00Ch,038h; 0DD
 db 038h,06Ch,038h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h; 0DE
 db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,000h,000h,000h,000h,000h,000h,000h; 0DF
 db 018h,030h,020h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h; 0E0
 db 000h,000h,078h,0CCh,0CCh,0CCh,0D8h,0CCh,0C6h,0C6h,0CCh,000h,000h,000h; 0E1
 db 038h,06Ch,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h; 0E2
 db 018h,030h,000h,0C6h,0E6h,0F6h,0FEh,0DEh,0CEh,0C6h,0C6h,000h,000h,000h; 0E3
 db 000h,000h,018h,030h,020h,0DCh,066h,066h,066h,066h,066h,000h,000h,000h; 0E4
 db 000h,000h,06Ch,038h,000h,0DCh,066h,066h,066h,066h,066h,000h,000h,000h; 0E5
 db 06Ch,038h,000h,07Ch,0C6h,0C6h,070h,01Ch,0C6h,0C6h,07Ch,000h,000h,000h; 0E6
 db 000h,000h,06Ch,038h,000h,07Ch,0C6h,070h,01Ch,0C6h,07Ch,000h,000h,000h; 0E7
 db 00Ch,018h,030h,0FCh,066h,066h,066h,07Ch,06Ch,066h,0E6h,000h,000h,000h; 0E8
 db 018h,030h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h; 0E9
 db 000h,00Ch,018h,030h,000h,0DCh,076h,066h,060h,060h,0F0h,000h,000h,000h; 0EA
 db 036h,06Ch,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h; 0EB
 db 000h,00Ch,018h,030h,000h,0C6h,0C6h,0C6h,0C6h,07Eh,006h,00Ch,0F8h,000h; 0EC
 db 00Ch,018h,010h,066h,066h,066h,066h,03Ch,018h,018h,03Ch,000h,000h,000h; 0ED
 db 000h,000h,010h,030h,030h,0FCh,030h,030h,030h,036h,01Ch,008h,00Ch,038h; 0EE
 db 000h,00Ch,018h,030h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h; 0EF
 db 000h,000h,000h,000h,000h,000h,07Eh,000h,000h,000h,000h,000h,000h,000h; 0F0
 db 000h,036h,06Ch,0D8h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h; 0F1
 db 000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,010h,010h,030h,01Ch; 0F2
 db 000h,06Ch,038h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h; 0F3
 db 000h,0C6h,07Ch,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h; 0F4
 db 000h,07Ch,0C6h,060h,038h,06Ch,0C6h,0C6h,06Ch,038h,00Ch,0C6h,07Ch,000h; 0F5
 db 000h,000h,000h,018h,018h,000h,07Eh,000h,018h,018h,000h,000h,000h,000h; 0F6
 db 000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,010h,010h,018h,070h; 0F7
 db 000h,038h,06Ch,06Ch,038h,000h,000h,000h,000h,000h,000h,000h,000h,000h; 0F8
 db 000h,06Ch,06Ch,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h; 0F9
 db 000h,018h,018h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h; 0FA
 db 000h,036h,06Ch,0D8h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h; 0FB
 db 06Ch,038h,000h,0FCh,066h,066h,066h,07Ch,06Ch,066h,0E6h,000h,000h,000h; 0FC
 db 000h,000h,06Ch,038h,000h,0DCh,076h,066h,060h,060h,0F0h,000h,000h,000h; 0FD
 db 000h,000h,000h,000h,07Ch,07Ch,07Ch,07Ch,07Ch,07Ch,000h,000h,000h,000h; 0FE
 db 000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h; 0FF
=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\ega2\863-cpi.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
CODE    SEGMENT BYTE PUBLIC 'CODE'
        ASSUME CS:CODE,DS:CODE

IF1
;        %OUT    EGA.CPI creation file
;        %OUT    .
;        %OUT    CP SRC files:
;        %OUT    .
;        %OUT    .       CODE PAGE:  863
ENDIF

EGA863: DW     LEN_863                  ; SIZE OF ENTRY HEADER
        DW     POST_EGA863,0            ; POINTER TO NEXT HEADER
        DW     1                        ; DEVICE TYPE
        DB     "EGA     "               ; DEVICE SUBTYPE ID
        DW     863                      ; CODE PAGE ID
        DW     3 DUP(0)                 ; RESERVED
        DW     OFFSET DATA863,0         ; POINTER TO FONTS
LEN_863 EQU    ($-EGA863)               ;
                                        ;
DATA863:DW     1                        ; CART/NON-CART
        DW     3                        ; # OF FONTS
        DW     LEN_D863                 ; LENGTH OF DATA
D863:                                   ;
        DB     16,8                     ; CHARACTER BOX SIZE
        DB     0,0                      ; ASPECT RATIO (UNUSED)
        DW     256                      ; NUMBER OF CHARACTERS
                                        ;
        INCLUDE 863-8X16.ASM            ;
                                        ;
        DB     14,8                     ; CHARACTER BOX SIZE
        DB     0,0                      ; ASPECT RATIO (UNUSED)
        DW     256                      ; NUMBER OF CHARACTERS
                                        ;
        INCLUDE 863-8X14.ASM            ;
                                        ;
        DB     8,8                      ; CHARACTER BOX SIZE
        DB     0,0                      ; ASPECT RATIO (UNUSED)
        DW     256                      ; NUMBER OF CHARACTERS
                                        ;
        INCLUDE 863-8X8.ASM             ;
                                        ;
LEN_D863        EQU ($-D863)            ;
                                        ;
POST_EGA863     EQU     $               ;
                                        ;
CODE    ENDS                            ;
        END                             ;


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\ega2\852-8x8.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
;***************************************************
;  CHARACTER FONT FILE
;  Source Assembler File
;
;	 CODE PAGE: 852
;  FONT RESOLUTION: 8 x 8
;
;     DATE CREATED:05-28-1987
;
;
; Output file from: MULTIFON, Version 1A
;
;***************************************************
	Db	000h,000h,000h,000h,000h,000h,000h,000h; 000
	Db	07Eh,081h,0A5h,081h,0BDh,099h,081h,07Eh; 001
	Db	07Eh,0FFh,0DBh,0FFh,0C3h,0E7h,0FFh,07Eh; 002
	Db	06Ch,0FEh,0FEh,0FEh,07Ch,038h,010h,000h; 003
	Db	010h,038h,07Ch,0FEh,07Ch,038h,010h,000h; 004
	Db	038h,07Ch,038h,0FEh,0FEh,0D6h,010h,038h; 005
	Db	010h,010h,038h,07Ch,0FEh,07Ch,010h,038h; 006
	Db	000h,000h,018h,03Ch,03Ch,018h,000h,000h; 007
	Db	0FFh,0FFh,0E7h,0C3h,0C3h,0E7h,0FFh,0FFh; 008
	Db	000h,03Ch,066h,042h,042h,066h,03Ch,000h; 009
	Db	0FFh,0C3h,099h,0BDh,0BDh,099h,0C3h,0FFh; 00A
	Db	00Fh,007h,00Fh,07Dh,0CCh,0CCh,0CCh,078h; 00B
	Db	03Ch,066h,066h,066h,03Ch,018h,07Eh,018h; 00C
	Db	03Fh,033h,03Fh,030h,030h,070h,0F0h,0E0h; 00D
	Db	07Fh,063h,07Fh,063h,063h,067h,0E6h,0C0h; 00E
	Db	018h,0DBh,03Ch,0E7h,0E7h,03Ch,0DBh,018h; 00F
	Db	080h,0E0h,0F8h,0FEh,0F8h,0E0h,080h,000h; 010
	Db	002h,00Eh,03Eh,0FEh,03Eh,00Eh,002h,000h; 011
	Db	018h,03Ch,07Eh,018h,018h,07Eh,03Ch,018h; 012
	Db	066h,066h,066h,066h,066h,000h,066h,000h; 013
	Db	07Fh,0DBh,0DBh,07Bh,01Bh,01Bh,01Bh,000h; 014
	Db	03Eh,063h,038h,06Ch,06Ch,038h,0CCh,078h; 015
	Db	000h,000h,000h,000h,07Eh,07Eh,07Eh,000h; 016
	Db	018h,03Ch,07Eh,018h,07Eh,03Ch,018h,0FFh; 017
	Db	018h,03Ch,07Eh,018h,018h,018h,018h,000h; 018
	Db	018h,018h,018h,018h,07Eh,03Ch,018h,000h; 019
	Db	000h,018h,00Ch,0FEh,00Ch,018h,000h,000h; 01A
	Db	000h,030h,060h,0FEh,060h,030h,000h,000h; 01B
	Db	000h,000h,0C0h,0C0h,0C0h,0FEh,000h,000h; 01C
	Db	000h,024h,066h,0FFh,066h,024h,000h,000h; 01D
	Db	000h,018h,03Ch,07Eh,0FFh,0FFh,000h,000h; 01E
	Db	000h,0FFh,0FFh,07Eh,03Ch,018h,000h,000h; 01F
	Db	000h,000h,000h,000h,000h,000h,000h,000h; 020
	Db	030h,078h,078h,030h,030h,000h,030h,000h; 021
	Db	06Ch,06Ch,06Ch,000h,000h,000h,000h,000h; 022
	Db	06Ch,06Ch,0FEh,06Ch,0FEh,06Ch,06Ch,000h; 023
	Db	030h,07Ch,0C0h,078h,00Ch,0F8h,030h,000h; 024
	Db	000h,0C6h,0CCh,018h,030h,066h,0C6h,000h; 025
	Db	038h,06Ch,038h,076h,0DCh,0CCh,076h,000h; 026
	Db	060h,060h,0C0h,000h,000h,000h,000h,000h; 027
	Db	018h,030h,060h,060h,060h,030h,018h,000h; 028
	Db	060h,030h,018h,018h,018h,030h,060h,000h; 029
	Db	000h,066h,03Ch,0FFh,03Ch,066h,000h,000h; 02A
	Db	000h,030h,030h,0FCh,030h,030h,000h,000h; 02B
	Db	000h,000h,000h,000h,000h,030h,030h,060h; 02C
	Db	000h,000h,000h,0FCh,000h,000h,000h,000h; 02D
	Db	000h,000h,000h,000h,000h,030h,030h,000h; 02E
	Db	006h,00Ch,018h,030h,060h,0C0h,080h,000h; 02F
	Db	07Ch,0C6h,0C6h,0D6h,0C6h,0C6h,07Ch,000h; 030
	Db	030h,070h,030h,030h,030h,030h,0FCh,000h; 031
	Db	078h,0CCh,00Ch,038h,060h,0CCh,0FCh,000h; 032
	Db	078h,0CCh,00Ch,038h,00Ch,0CCh,078h,000h; 033
	Db	01Ch,03Ch,06Ch,0CCh,0FEh,00Ch,01Eh,000h; 034
	Db	0FCh,0C0h,0F8h,00Ch,00Ch,0CCh,078h,000h; 035
	Db	038h,060h,0C0h,0F8h,0CCh,0CCh,078h,000h; 036
	Db	0FCh,0CCh,00Ch,018h,030h,030h,030h,000h; 037
	Db	078h,0CCh,0CCh,078h,0CCh,0CCh,078h,000h; 038
	Db	078h,0CCh,0CCh,07Ch,00Ch,018h,070h,000h; 039
	Db	000h,030h,030h,000h,000h,030h,030h,000h; 03A
	Db	000h,030h,030h,000h,000h,030h,030h,060h; 03B
	Db	018h,030h,060h,0C0h,060h,030h,018h,000h; 03C
	Db	000h,000h,0FCh,000h,000h,0FCh,000h,000h; 03D
	Db	060h,030h,018h,00Ch,018h,030h,060h,000h; 03E
	Db	078h,0CCh,00Ch,018h,030h,000h,030h,000h; 03F
	Db	07Ch,0C6h,0DEh,0DEh,0DEh,0C0h,078h,000h; 040
	Db	030h,078h,0CCh,0CCh,0FCh,0CCh,0CCh,000h; 041
	Db	0FCh,066h,066h,07Ch,066h,066h,0FCh,000h; 042
	Db	03Ch,066h,0C0h,0C0h,0C0h,066h,03Ch,000h; 043
	Db	0F8h,06Ch,066h,066h,066h,06Ch,0F8h,000h; 044
	Db	0FEh,062h,068h,078h,068h,062h,0FEh,000h; 045
	Db	0FEh,062h,068h,078h,068h,060h,0F0h,000h; 046
	Db	03Ch,066h,0C0h,0C0h,0CEh,066h,03Eh,000h; 047
	Db	0CCh,0CCh,0CCh,0FCh,0CCh,0CCh,0CCh,000h; 048
	Db	078h,030h,030h,030h,030h,030h,078h,000h; 049
	Db	01Eh,00Ch,00Ch,00Ch,0CCh,0CCh,078h,000h; 04A
	Db	0E6h,066h,06Ch,078h,06Ch,066h,0E6h,000h; 04B
	Db	0F0h,060h,060h,060h,062h,066h,0FEh,000h; 04C
	Db	0C6h,0EEh,0FEh,0FEh,0D6h,0C6h,0C6h,000h; 04D
	Db	0C6h,0E6h,0F6h,0DEh,0CEh,0C6h,0C6h,000h; 04E
	Db	038h,06Ch,0C6h,0C6h,0C6h,06Ch,038h,000h; 04F
	Db	0FCh,066h,066h,07Ch,060h,060h,0F0h,000h; 050
	Db	078h,0CCh,0CCh,0CCh,0DCh,078h,01Ch,000h; 051
	Db	0FCh,066h,066h,07Ch,06Ch,066h,0E6h,000h; 052
	Db	078h,0CCh,060h,030h,018h,0CCh,078h,000h; 053
	Db	0FCh,0B4h,030h,030h,030h,030h,078h,000h; 054
	Db	0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,0FCh,000h; 055
	Db	0CCh,0CCh,0CCh,0CCh,0CCh,078h,030h,000h; 056
	Db	0C6h,0C6h,0C6h,0D6h,0FEh,0EEh,0C6h,000h; 057
	Db	0C6h,0C6h,06Ch,038h,038h,06Ch,0C6h,000h; 058
	Db	0CCh,0CCh,0CCh,078h,030h,030h,078h,000h; 059
	Db	0FEh,0C6h,08Ch,018h,032h,066h,0FEh,000h; 05A
	Db	078h,060h,060h,060h,060h,060h,078h,000h; 05B
	Db	0C0h,060h,030h,018h,00Ch,006h,002h,000h; 05C
	Db	078h,018h,018h,018h,018h,018h,078h,000h; 05D
	Db	010h,038h,06Ch,0C6h,000h,000h,000h,000h; 05E
	Db	000h,000h,000h,000h,000h,000h,000h,0FFh; 05F
	Db	030h,030h,018h,000h,000h,000h,000h,000h; 060
	Db	000h,000h,078h,00Ch,07Ch,0CCh,076h,000h; 061
	Db	0E0h,060h,060h,07Ch,066h,066h,0DCh,000h; 062
	Db	000h,000h,078h,0CCh,0C0h,0CCh,078h,000h; 063
	Db	01Ch,00Ch,00Ch,07Ch,0CCh,0CCh,076h,000h; 064
	Db	000h,000h,078h,0CCh,0FCh,0C0h,078h,000h; 065
	Db	038h,06Ch,060h,0F0h,060h,060h,0F0h,000h; 066
	Db	000h,000h,076h,0CCh,0CCh,07Ch,00Ch,0F8h; 067
	Db	0E0h,060h,06Ch,076h,066h,066h,0E6h,000h; 068
	Db	030h,000h,070h,030h,030h,030h,078h,000h; 069
	Db	00Ch,000h,00Ch,00Ch,00Ch,0CCh,0CCh,078h; 06A
	Db	0E0h,060h,066h,06Ch,078h,06Ch,0E6h,000h; 06B
	Db	070h,030h,030h,030h,030h,030h,078h,000h; 06C
	Db	000h,000h,0CCh,0FEh,0FEh,0D6h,0C6h,000h; 06D
	Db	000h,000h,0F8h,0CCh,0CCh,0CCh,0CCh,000h; 06E
	Db	000h,000h,078h,0CCh,0CCh,0CCh,078h,000h; 06F
	Db	000h,000h,0DCh,066h,066h,07Ch,060h,0F0h; 070
	Db	000h,000h,076h,0CCh,0CCh,07Ch,00Ch,01Eh; 071
	Db	000h,000h,0DCh,076h,066h,060h,0F0h,000h; 072
	Db	000h,000h,07Ch,0C0h,078h,00Ch,0F8h,000h; 073
	Db	010h,030h,07Ch,030h,030h,034h,018h,000h; 074
	Db	000h,000h,0CCh,0CCh,0CCh,0CCh,076h,000h; 075
	Db	000h,000h,0CCh,0CCh,0CCh,078h,030h,000h; 076
	Db	000h,000h,0C6h,0D6h,0FEh,0FEh,06Ch,000h; 077
	Db	000h,000h,0C6h,06Ch,038h,06Ch,0C6h,000h; 078
	Db	000h,000h,0CCh,0CCh,0CCh,07Ch,00Ch,0F8h; 079
	Db	000h,000h,0FCh,098h,030h,064h,0FCh,000h; 07A
	Db	01Ch,030h,030h,0E0h,030h,030h,01Ch,000h; 07B
	Db	018h,018h,018h,018h,018h,018h,018h,000h; 07C
	Db	0E0h,030h,030h,01Ch,030h,030h,0E0h,000h; 07D
	Db	076h,0DCh,000h,000h,000h,000h,000h,000h; 07E
	Db	010h,028h,044h,082h,082h,082h,0FEh,000h; 07F
	Db	03Ch,066h,0C0h,0C0h,066h,03Ch,00Ch,038h; 080
	Db	0CCh,000h,0CCh,0CCh,0CCh,0CCh,076h,000h; 081
	Db	018h,030h,078h,0CCh,0FCh,0C0h,078h,000h; 082
	Db	078h,084h,078h,00Ch,07Ch,0CCh,076h,000h; 083
	Db	0CCh,000h,078h,00Ch,07Ch,0CCh,07Eh,000h; 084
	Db	030h,0CCh,030h,0CCh,0CCh,0CCh,076h,000h; 085
	Db	018h,030h,078h,0CCh,0C0h,0CCh,078h,000h; 086
	Db	000h,000h,078h,0CCh,0C0h,0CCh,078h,018h; 087
	Db	030h,036h,03Ch,038h,030h,070h,0DCh,000h; 088
	Db	0CCh,000h,078h,0CCh,0FCh,0C0h,078h,000h; 089
	Db	066h,0CCh,07Ch,0C6h,0C6h,0C6h,07Ch,000h; 08A
	Db	000h,066h,0CCh,078h,0CCh,0CCh,078h,000h; 08B
	Db	070h,088h,070h,030h,030h,030h,078h,000h; 08C
	Db	00Ch,018h,0FEh,00Ch,030h,060h,0FEh,000h; 08D
	Db	0C6h,038h,06Ch,0C6h,0FEh,0C6h,0C6h,000h; 08E
	Db	00Ch,018h,07Ch,0C6h,0C0h,0C6h,07Ch,000h; 08F
	Db	00Ch,018h,0FCh,060h,078h,060h,0FCh,000h; 090
	Db	0CCh,0D8h,0C0h,0C0h,0C0h,0C0h,0FEh,000h; 091
	Db	0CCh,0D8h,0C0h,0C0h,0C0h,0C0h,078h,000h; 092
	Db	078h,0CCh,000h,078h,0CCh,0CCh,078h,000h; 093
	Db	0CCh,000h,078h,0CCh,0CCh,0CCh,078h,000h; 094
	Db	0CCh,0C4h,0C8h,0C0h,0C0h,0C0h,0FEh,000h; 095
	Db	0CCh,0C4h,0C8h,0C0h,0C0h,0C0h,078h,000h; 096
	Db	00Ch,018h,07Eh,0C0h,07Ch,006h,0FCh,000h; 097
	Db	00Ch,018h,03Eh,060h,03Ch,006h,07Ch,000h; 098
	Db	0C6h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h; 099
	Db	0C6h,000h,0C6h,0C6h,0C6h,0C6h,07Ch,000h; 09A
	Db	0CCh,078h,0FCh,030h,030h,030h,030h,000h; 09B
	Db	013h,031h,07Ah,030h,030h,034h,018h,000h; 09C
	Db	060h,06Ch,078h,070h,060h,0E0h,07Eh,000h; 09D
	Db	000h,0C6h,06Ch,038h,06Ch,0C6h,000h,000h; 09E
	Db	066h,03Ch,03Ch,066h,060h,066h,03Ch,000h; 09F
	Db	00Ch,018h,078h,00Ch,07Ch,0CCh,07Eh,000h; 0A0
	Db	00Ch,018h,038h,018h,018h,018h,03Ch,000h; 0A1
	Db	000h,00Ch,018h,078h,0CCh,0CCh,078h,000h; 0A2
	Db	000h,018h,030h,0CCh,0CCh,0CCh,07Eh,000h; 0A3
	Db	038h,06Ch,0C6h,0FEh,0C6h,0D6h,018h,00Eh; 0A4
	Db	000h,000h,078h,00Ch,07Ch,0CCh,076h,00Fh; 0A5
	Db	066h,03Ch,0FEh,00Ch,018h,060h,0FEh,000h; 0A6
	Db	066h,03Ch,000h,07Eh,00Ch,030h,07Eh,000h; 0A7
	Db	0FEh,0C0h,0C0h,0F8h,0C0h,0C0h,0FEh,01Ch; 0A8
	Db	000h,000h,078h,0CCh,0FCh,0C0h,078h,01Ch; 0A9
	Db	000h,000h,000h,000h,000h,000h,000h,000h; 0AA
	Db	00Ch,018h,000h,07Eh,00Ch,030h,07Eh,000h; 0AB
	Db	066h,03Ch,07Ch,0C6h,0C0h,0C6h,07Ch,000h; 0AC
	Db	000h,000h,07Ch,0C0h,078h,00Ch,0F8h,038h; 0AD
	Db	000h,033h,066h,0CCh,066h,033h,000h,000h; 0AE
	Db	000h,0CCh,066h,033h,066h,0CCh,000h,000h; 0AF
	Db	022h,088h,022h,088h,022h,088h,022h,088h; 0B0
	Db	055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh; 0B1
	Db	0Dbh,077h,0DBh,0EEh,0DBh,077h,0DBh,0EEh; 0B2
	Db	018h,018h,018h,018h,018h,018h,018h,018h; 0B3
	Db	018h,018h,018h,018h,0F8h,018h,018h,018h; 0B4
	Db	00Ch,018h,07Ch,0C6h,0FEh,0C6h,0C6h,000h; 0B5
	Db	07Ch,082h,07Ch,0C6h,0FEh,0C6h,0C6h,000h; 0B6
	Db	0CCh,078h,0FEh,0C0h,0F8h,0C0h,0FEh,000h; 0B7
	Db	078h,0CCh,060h,030h,018h,0CCh,078h,030h; 0B8
	Db	036h,036h,0F6h,006h,0F6h,036h,036h,036h; 0B9
	Db	036h,036h,036h,036h,036h,036h,036h,036h; 0BA
	Db	000h,000h,0FEh,006h,0F6h,036h,036h,036h; 0BB
	Db	036h,036h,0F6h,006h,0FEh,000h,000h,000h; 0BC
	Db	018h,0FEh,0C6h,00Ch,030h,0C6h,0FEh,000h; 0BD
	Db	000h,018h,000h,07Ch,018h,030h,07Ch,000h; 0BE
	Db	000h,000h,000h,000h,0F8h,018h,018h,018h; 0BF
	Db	018h,018h,018h,018h,01Fh,000h,000h,000h; 0C0
	Db	018h,018h,018h,018h,0FFh,000h,000h,000h; 0C1
	Db	000h,000h,000h,000h,0FFh,018h,018h,018h; 0C2
	Db	018h,018h,018h,018h,01Fh,018h,018h,018h; 0C3
	Db	000h,000h,000h,000h,0FFh,000h,000h,000h; 0C4
	Db	018h,018h,018h,018h,0FFh,018h,018h,018h; 0C5
	Db	0C6h,07Ch,07Ch,0C6h,0FEh,0C6h,0C6h,000h; 0C6
	Db	0CCh,078h,078h,00Ch,07Ch,0CCh,076h,000h; 0C7
	Db	036h,036h,037h,030h,03Fh,000h,000h,000h; 0C8
	Db	000h,000h,03Fh,030h,037h,036h,036h,036h; 0C9
	Db	036h,036h,0F7h,000h,0FFh,000h,000h,000h; 0CA
	Db	000h,000h,0FFh,000h,0F7h,036h,036h,036h; 0CB
	Db	036h,036h,037h,030h,037h,036h,036h,036h; 0CC
	Db	000h,000h,0FFh,000h,0FFh,000h,000h,000h; 0CD
	Db	036h,036h,0F7h,000h,0F7h,036h,036h,036h; 0CE
	Db	000h,042h,03Ch,066h,066h,03Ch,042h,000h; 0CF
	Db	00Ch,03Eh,00Ch,07Ch,0CCh,0CCh,076h,000h; 0D0
	Db	07Ch,066h,066h,0F6h,066h,066h,07Ch,000h; 0D1
	Db	0CCh,078h,0FCh,066h,066h,066h,0FCh,000h; 0D2
	Db	0CCh,000h,0FCh,060h,078h,060h,0FCh,000h; 0D3
	Db	01Dh,00Dh,00Ch,07Ch,0CCh,0CCh,076h,000h; 0D4
	Db	024h,018h,0E6h,0F6h,0DEh,0CEh,0C6h,000h; 0D5
	Db	018h,030h,078h,030h,030h,030h,078h,000h; 0D6
	Db	078h,084h,078h,030h,030h,030h,078h,000h; 0D7
	Db	0CCh,078h,078h,0CCh,0FCh,0C0h,078h,000h; 0D8
	Db	018h,018h,018h,018h,0F8h,000h,000h,000h; 0D9
	Db	000h,000h,000h,000h,01Fh,018h,018h,018h; 0DA
	Db	0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh; 0Db
	Db	000h,000h,000h,000h,0FFh,0FFh,0FFh,0FFh; 0DC
	Db	07Eh,018h,018h,018h,018h,018h,020h,038h; 0DD
	Db	010h,028h,0D6h,0C6h,0C6h,0C6h,07Ch,000h; 0DE
	Db	0FFh,0FFh,0FFh,0FFh,000h,000h,000h,000h; 0DF
	Db	00Ch,018h,07Ch,0C6h,0C6h,0C6h,07Ch,000h; 0E0
	Db	000h,078h,0CCh,0F8h,0CCh,0F8h,0C0h,0C0h; 0E1
	Db	07Ch,082h,07Ch,0C6h,0C6h,0C6h,07Ch,000h; 0E2
	Db	00Ch,018h,0E6h,0F6h,0DEh,0CEh,0C6h,000h; 0E3
	Db	00Ch,018h,0DCh,0E6h,0C6h,0C6h,0C6h,000h; 0E4
	Db	066h,03Ch,0DCh,0E6h,0C6h,0C6h,0C6h,000h; 0E5
	Db	06Ch,038h,07Eh,0E0h,038h,00Eh,0FCh,000h; 0E6
	Db	06Ch,038h,07Ch,040h,038h,004h,07Ch,000h; 0E7
	Db	00Ch,018h,0FCh,0C6h,0FCh,0D8h,0CCh,000h; 0E8
	Db	00Ch,018h,0C6h,0C6h,0C6h,0C6h,07Ch,000h; 0E9
	Db	018h,030h,0CEh,0F0h,0E0h,0C0h,0C0h,000h; 0EA
	Db	066h,0CCh,0C6h,0C6h,0C6h,0C6h,07Ch,000h; 0EB
	Db	00Ch,018h,0C6h,0C6h,066h,03Eh,00Ch,078h; 0EC
	Db	00Ch,0DEh,0C6h,066h,03Ch,018h,030h,000h; 0ED
	Db	030h,078h,030h,030h,030h,038h,018h,01Eh; 0EE
	Db	00Ch,018h,000h,000h,000h,000h,000h,000h; 0EF
	Db	000h,000h,000h,03Ch,000h,000h,000h,000h; 0F0
	Db	066h,0CCh,000h,000h,000h,000h,000h,000h; 0F1
	Db	000h,000h,000h,000h,000h,000h,010h,01Ch; 0F2
	Db	0D8h,070h,000h,000h,000h,000h,000h,000h; 0F3
	Db	0C6h,07Ch,000h,000h,000h,000h,000h,000h; 0F4
	Db	03Ch,066h,038h,06Ch,06Ch,038h,0CCh,078h; 0F5
	Db	018h,018h,000h,07Eh,000h,018h,018h,000h; 0F6
	Db	000h,000h,000h,000h,000h,000h,004h,01Ch; 0F7
	Db	038h,06Ch,06Ch,038h,000h,000h,000h,000h; 0F8
	Db	066h,000h,000h,000h,000h,000h,000h,000h; 0F9
	Db	018h,000h,000h,000h,000h,000h,000h,000h; 0FA
	Db	066h,0CCh,000h,0CCh,0CCh,0CCh,076h,000h; 0FB
	Db	0D8h,070h,0FCh,0C6h,0FCh,0D8h,0CCh,000h; 0FC
	Db	0D8h,070h,0CEh,0D8h,0E0h,0C0h,0C0h,000h; 0FD
	Db	000h,000h,03Ch,03Ch,03Ch,03Ch,000h,000h; 0FE
	Db	000h,000h,000h,000h,000h,000h,000h,000h; 0FF
=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\ega2\860-8x14.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
;***************************************************
;  CHARACTER FONT FILE
;  Source Assembler File
;
;        CODE PAGE: 860 
;  FONT RESOLUTION: 8 x 14 
;
;     DATE CREATED:05-28-1987
;
;
; Output file from: MULTIFON, Version 1A
;
;***************************************************
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #0
    Db  000h,000h,000h,07Eh,081h,0A5h,081h,081h,0BDh,099h,081h,07Eh,000h,000h ;   Hex #1
    Db  000h,000h,000h,07Eh,0FFh,0DBh,0FFh,0FFh,0C3h,0E7h,0FFh,07Eh,000h,000h ;   Hex #2
    Db  000h,000h,000h,000h,06Ch,0FEh,0FEh,0FEh,0FEh,07Ch,038h,010h,000h,000h ;   Hex #3
    Db  000h,000h,000h,000h,010h,038h,07Ch,0FEh,07Ch,038h,010h,000h,000h,000h ;   Hex #4
    Db  000h,000h,000h,018h,03Ch,03Ch,0E7h,0E7h,0E7h,018h,018h,03Ch,000h,000h ;   Hex #5
    Db  000h,000h,000h,018h,03Ch,07Eh,0FFh,0FFh,07Eh,018h,018h,03Ch,000h,000h ;   Hex #6
    Db  000h,000h,000h,000h,000h,000h,018h,03Ch,03Ch,018h,000h,000h,000h,000h ;   Hex #7
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0E7h,0C3h,0C3h,0E7h,0FFh,0FFh,0FFh,0FFh ;   Hex #8
    Db  000h,000h,000h,000h,000h,03Ch,066h,042h,042h,066h,03Ch,000h,000h,000h ;   Hex #9
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0C3h,099h,0BDh,0BDh,099h,0C3h,0FFh,0FFh,0FFh ;   Hex #A
    Db  000h,000h,000h,01Eh,00Eh,01Ah,032h,078h,0CCh,0CCh,0CCh,078h,000h,000h ;   Hex #B
    Db  000h,000h,000h,03Ch,066h,066h,066h,03Ch,018h,07Eh,018h,018h,000h,000h ;   Hex #C
    Db  000h,000h,000h,03Fh,033h,03Fh,030h,030h,030h,070h,0F0h,0E0h,000h,000h ;   Hex #D
    Db  000h,000h,000h,07Fh,063h,07Fh,063h,063h,063h,067h,0E7h,0E6h,0C0h,000h ;   Hex #E
    Db  000h,000h,000h,018h,018h,0DBh,03Ch,0E7h,03Ch,0DBh,018h,018h,000h,000h ;   Hex #F
    Db  000h,000h,000h,080h,0C0h,0E0h,0F8h,0FEh,0F8h,0E0h,0C0h,080h,000h,000h ;   Hex #10
    Db  000h,000h,000h,002h,006h,00Eh,03Eh,0FEh,03Eh,00Eh,006h,002h,000h,000h ;   Hex #11
    Db  000h,000h,000h,018h,03Ch,07Eh,018h,018h,018h,07Eh,03Ch,018h,000h,000h ;   Hex #12
    Db  000h,000h,000h,066h,066h,066h,066h,066h,066h,000h,066h,066h,000h,000h ;   Hex #13
    Db  000h,000h,000h,07Fh,0DBh,0DBh,0DBh,07Bh,01Bh,01Bh,01Bh,01Bh,000h,000h ;   Hex #14
    Db  000h,000h,07Ch,0C6h,060h,038h,06Ch,0C6h,0C6h,06Ch,038h,00Ch,0C6h,07Ch ;   Hex #15
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,0FEh,0FEh,0FEh,000h,000h ;   Hex #16
    Db  000h,000h,000h,018h,03Ch,07Eh,018h,018h,018h,07Eh,03Ch,018h,07Eh,000h ;   Hex #17
    Db  000h,000h,000h,018h,03Ch,07Eh,018h,018h,018h,018h,018h,018h,000h,000h ;   Hex #18
    Db  000h,000h,000h,018h,018h,018h,018h,018h,018h,07Eh,03Ch,018h,000h,000h ;   Hex #19
    Db  000h,000h,000h,000h,000h,018h,00Ch,0FEh,00Ch,018h,000h,000h,000h,000h ;   Hex #1A
    Db  000h,000h,000h,000h,000h,030h,060h,0FEh,060h,030h,000h,000h,000h,000h ;   Hex #1B
    Db  000h,000h,000h,000h,000h,000h,0C0h,0C0h,0C0h,0FEh,000h,000h,000h,000h ;   Hex #1C
    Db  000h,000h,000h,000h,000h,028h,06Ch,0FEh,06Ch,028h,000h,000h,000h,000h ;   Hex #1D
    Db  000h,000h,000h,000h,010h,038h,038h,07Ch,07Ch,0FEh,0FEh,000h,000h,000h ;   Hex #1E
    Db  000h,000h,000h,000h,0FEh,0FEh,07Ch,07Ch,038h,038h,010h,000h,000h,000h ;   Hex #1F
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #20
    Db  000h,000h,000h,018h,03Ch,03Ch,03Ch,018h,018h,000h,018h,018h,000h,000h ;   Hex #21
    Db  000h,066h,066h,066h,024h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #22
    Db  000h,000h,000h,06Ch,06Ch,0FEh,06Ch,06Ch,06Ch,0FEh,06Ch,06Ch,000h,000h ;   Hex #23
    Db  000h,018h,018h,07Ch,0C6h,0C2h,0C0h,07Ch,006h,086h,0C6h,07Ch,018h,018h ;   Hex #24
    Db  000h,000h,000h,000h,000h,0C2h,0C6h,00Ch,018h,030h,066h,0C6h,000h,000h ;   Hex #25
    Db  000h,000h,000h,038h,06Ch,06Ch,038h,076h,0DCh,0CCh,0CCh,076h,000h,000h ;   Hex #26
    Db  000h,018h,018h,018h,030h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #27
    Db  000h,000h,000h,00Ch,018h,030h,030h,030h,030h,030h,018h,00Ch,000h,000h ;   Hex #28
    Db  000h,000h,000h,030h,018h,00Ch,00Ch,00Ch,00Ch,00Ch,018h,030h,000h,000h ;   Hex #29
    Db  000h,000h,000h,000h,000h,066h,03Ch,0FFh,03Ch,066h,000h,000h,000h,000h ;   Hex #2A
    Db  000h,000h,000h,000h,000h,018h,018h,07Eh,018h,018h,000h,000h,000h,000h ;   Hex #2B
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,018h,018h,030h,000h ;   Hex #2C
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,000h,000h,000h,000h,000h,000h ;   Hex #2D
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,018h,000h,000h ;   Hex #2E
    Db  000h,000h,000h,002h,006h,00Ch,018h,030h,060h,0C0h,080h,000h,000h,000h ;   Hex #2F
    Db  000h,000h,000h,038h,06Ch,0C6h,0C6h,0D6h,0C6h,0C6h,06Ch,038h,000h,000h ;   Hex #30
    Db  000h,000h,000h,018h,038h,078h,018h,018h,018h,018h,018h,07Eh,000h,000h ;   Hex #31
    Db  000h,000h,000h,07Ch,0C6h,006h,00Ch,018h,030h,060h,0C6h,0FEh,000h,000h ;   Hex #32
    Db  000h,000h,000h,07Ch,0C6h,006h,006h,03Ch,006h,006h,0C6h,07Ch,000h,000h ;   Hex #33
    Db  000h,000h,000h,00Ch,01Ch,03Ch,06Ch,0CCh,0FEh,00Ch,00Ch,01Eh,000h,000h ;   Hex #34
    Db  000h,000h,000h,0FEh,0C0h,0C0h,0C0h,0FCh,006h,006h,0C6h,07Ch,000h,000h ;   Hex #35
    Db  000h,000h,000h,038h,060h,0C0h,0C0h,0FCh,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #36
    Db  000h,000h,000h,0FEh,0C6h,006h,00Ch,018h,030h,030h,030h,030h,000h,000h ;   Hex #37
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0C6h,07Ch,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #38
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0C6h,07Eh,006h,006h,00Ch,078h,000h,000h ;   Hex #39
    Db  000h,000h,000h,000h,018h,018h,000h,000h,000h,018h,018h,000h,000h,000h ;   Hex #3A
    Db  000h,000h,000h,000h,018h,018h,000h,000h,000h,018h,018h,030h,000h,000h ;   Hex #3B
    Db  000h,000h,000h,00Ch,018h,030h,060h,0C0h,060h,030h,018h,00Ch,000h,000h ;   Hex #3C
    Db  000h,000h,000h,000h,000h,000h,07Eh,000h,000h,07Eh,000h,000h,000h,000h ;   Hex #3D
    Db  000h,000h,000h,060h,030h,018h,00Ch,006h,00Ch,018h,030h,060h,000h,000h ;   Hex #3E
    Db  000h,000h,000h,07Ch,0C6h,0C6h,00Ch,018h,018h,000h,018h,018h,000h,000h ;   Hex #3F
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0DEh,0DEh,0DEh,0DCh,0C0h,07Ch,000h,000h ;   Hex #40
    Db  000h,000h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #41
    Db  000h,000h,000h,0FCh,066h,066h,066h,07Ch,066h,066h,066h,0FCh,000h,000h ;   Hex #42
    Db  000h,000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0C0h,0C2h,066h,03Ch,000h,000h ;   Hex #43
    Db  000h,000h,000h,0F8h,06Ch,066h,066h,066h,066h,066h,06Ch,0F8h,000h,000h ;   Hex #44
    Db  000h,000h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h ;   Hex #45
    Db  000h,000h,000h,0FEh,066h,062h,068h,078h,068h,060h,060h,0F0h,000h,000h ;   Hex #46
    Db  000h,000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0DEh,0C6h,066h,03Ah,000h,000h ;   Hex #47
    Db  000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,000h,000h ;   Hex #48
    Db  000h,000h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #49
    Db  000h,000h,000h,01Eh,00Ch,00Ch,00Ch,00Ch,00Ch,0CCh,0CCh,078h,000h,000h ;   Hex #4A
    Db  000h,000h,000h,0E6h,066h,06Ch,06Ch,078h,06Ch,06Ch,066h,0E6h,000h,000h ;   Hex #4B
    Db  000h,000h,000h,0F0h,060h,060h,060h,060h,060h,062h,066h,0FEh,000h,000h ;   Hex #4C
    Db  000h,000h,000h,0C6h,0EEh,0FEh,0D6h,0C6h,0C6h,0C6h,0C6h,0C6h,000h,000h ;   Hex #4D
    Db  000h,000h,000h,0C6h,0E6h,0F6h,0FEh,0DEh,0CEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #4E
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #4F
    Db  000h,000h,000h,0FCh,066h,066h,066h,07Ch,060h,060h,060h,0F0h,000h,000h ;   Hex #50
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0D6h,0DEh,07Ch,00Eh,000h ;   Hex #51
    Db  000h,000h,000h,0FCh,066h,066h,066h,07Ch,06Ch,066h,066h,0E6h,000h,000h ;   Hex #52
    Db  000h,000h,000h,07Ch,0C6h,0C6h,060h,038h,00Ch,0C6h,0C6h,07Ch,000h,000h ;   Hex #53
    Db  000h,000h,000h,07Eh,07Eh,05Ah,018h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #54
    Db  000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #55
    Db  000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,06Ch,038h,010h,000h,000h ;   Hex #56
    Db  000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0D6h,0D6h,0FEh,06Ch,06Ch,000h,000h ;   Hex #57
    Db  000h,000h,000h,0C6h,0C6h,0C6h,07Ch,038h,07Ch,0C6h,0C6h,0C6h,000h,000h ;   Hex #58
    Db  000h,000h,000h,066h,066h,066h,066h,03Ch,018h,018h,018h,03Ch,000h,000h ;   Hex #59
    Db  000h,000h,000h,0FEh,0C6h,08Ch,018h,030h,060h,0C2h,0C6h,0FEh,000h,000h ;   Hex #5A
    Db  000h,000h,000h,03Ch,030h,030h,030h,030h,030h,030h,030h,03Ch,000h,000h ;   Hex #5B
    Db  000h,000h,000h,080h,0C0h,0E0h,070h,038h,01Ch,00Eh,006h,002h,000h,000h ;   Hex #5C
    Db  000h,000h,000h,03Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,03Ch,000h,000h ;   Hex #5D
    Db  010h,038h,06Ch,0C6h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #5E
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,0FFh ;   Hex #5F
    Db  000h,030h,018h,00Ch,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #60
    Db  000h,000h,000h,000h,000h,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #61
    Db  000h,000h,000h,0E0h,060h,060h,078h,06Ch,066h,066h,066h,07Ch,000h,000h ;   Hex #62
    Db  000h,000h,000h,000h,000h,000h,07Ch,0C6h,0C0h,0C0h,0C6h,07Ch,000h,000h ;   Hex #63
    Db  000h,000h,000h,01Ch,00Ch,00Ch,03Ch,06Ch,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #64
    Db  000h,000h,000h,000h,000h,000h,07Ch,0C6h,0FEh,0C0h,0C6h,07Ch,000h,000h ;   Hex #65
    Db  000h,000h,000h,01Ch,036h,032h,030h,07Ch,030h,030h,030h,078h,000h,000h ;   Hex #66
    Db  000h,000h,000h,000h,000h,000h,076h,0CCh,0CCh,0CCh,07Ch,00Ch,0CCh,078h ;   Hex #67
    Db  000h,000h,000h,0E0h,060h,060h,06Ch,076h,066h,066h,066h,0E6h,000h,000h ;   Hex #68
    Db  000h,000h,000h,018h,018h,000h,038h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #69
    Db  000h,000h,000h,006h,006h,000h,00Eh,006h,006h,006h,006h,066h,066h,03Ch ;   Hex #6A
    Db  000h,000h,000h,0E0h,060h,060h,066h,06Ch,078h,06Ch,066h,0E6h,000h,000h ;   Hex #6B
    Db  000h,000h,000h,038h,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #6C
    Db  000h,000h,000h,000h,000h,000h,0ECh,0FEh,0D6h,0D6h,0D6h,0D6h,000h,000h ;   Hex #6D
    Db  000h,000h,000h,000h,000h,000h,0DCh,066h,066h,066h,066h,066h,000h,000h ;   Hex #6E
    Db  000h,000h,000h,000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #6F
    Db  000h,000h,000h,000h,000h,000h,0DCh,066h,066h,066h,07Ch,060h,060h,0F0h ;   Hex #70
    Db  000h,000h,000h,000h,000h,000h,076h,0CCh,0CCh,0CCh,07Ch,00Ch,00Ch,01Eh ;   Hex #71
    Db  000h,000h,000h,000h,000h,000h,0DCh,076h,066h,060h,060h,0F0h,000h,000h ;   Hex #72
    Db  000h,000h,000h,000h,000h,000h,07Ch,0C6h,070h,01Ch,0C6h,07Ch,000h,000h ;   Hex #73
    Db  000h,000h,000h,010h,030h,030h,0FCh,030h,030h,030h,036h,01Ch,000h,000h ;   Hex #74
    Db  000h,000h,000h,000h,000h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #75
    Db  000h,000h,000h,000h,000h,000h,0C6h,0C6h,0C6h,06Ch,038h,010h,000h,000h ;   Hex #76
    Db  000h,000h,000h,000h,000h,000h,0C6h,0C6h,0D6h,0D6h,0FEh,06Ch,000h,000h ;   Hex #77
    Db  000h,000h,000h,000h,000h,000h,0C6h,06Ch,038h,038h,06Ch,0C6h,000h,000h ;   Hex #78
    Db  000h,000h,000h,000h,000h,000h,0C6h,0C6h,0C6h,0C6h,07Eh,006h,00Ch,078h ;   Hex #79
    Db  000h,000h,000h,000h,000h,000h,0FEh,0CCh,018h,030h,066h,0FEh,000h,000h ;   Hex #7A
    Db  000h,000h,000h,00Eh,018h,018h,018h,070h,018h,018h,018h,00Eh,000h,000h ;   Hex #7B
    Db  000h,000h,000h,018h,018h,018h,018h,018h,018h,018h,018h,018h,000h,000h ;   Hex #7C
    Db  000h,000h,000h,070h,018h,018h,018h,00Eh,018h,018h,018h,070h,000h,000h ;   Hex #7D
    Db  000h,076h,0DCh,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #7E
    Db  000h,000h,000h,000h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,000h,000h,000h ;   Hex #7F
    Db  000h,000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0C0h,0C2h,066h,03Ch,00Ch,078h ;   Hex #80
    Db  000h,000h,000h,0CCh,000h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #81
    Db  000h,000h,00Ch,018h,030h,000h,07Ch,0C6h,0FEh,0C0h,0C6h,07Ch,000h,000h ;   Hex #82
    Db  000h,000h,010h,038h,06Ch,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #83
    Db  000h,000h,000h,076h,0DCh,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #84
    Db  000h,000h,060h,030h,018h,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #85
    Db  030h,060h,0C0h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #86
    Db  000h,000h,000h,000h,000h,000h,07Ch,0C6h,0C0h,0C0h,0C6h,07Ch,00Ch,078h ;   Hex #87
    Db  000h,000h,010h,038h,06Ch,000h,07Ch,0C6h,0FEh,0C0h,0C6h,07Ch,000h,000h ;   Hex #88
    Db  038h,06Ch,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h ;   Hex #89
    Db  000h,000h,060h,030h,018h,000h,07Ch,0C6h,0FEh,0C0h,0C6h,07Ch,000h,000h ;   Hex #8A
    Db  00Ch,018h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #8B
    Db  038h,06Ch,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #8C
    Db  000h,000h,060h,030h,018h,000h,038h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #8D
    Db  076h,0DCh,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #8E
    Db  038h,06Ch,0C6h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #8F
    Db  00Ch,018h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h ;   Hex #90
    Db  018h,00Ch,006h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #91
    Db  030h,018h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h ;   Hex #92
    Db  000h,000h,010h,038h,06Ch,000h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #93
    Db  000h,000h,000h,076h,0DCh,000h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #94
    Db  000h,000h,060h,030h,018h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #95
    Db  018h,030h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #96
    Db  000h,000h,060h,030h,018h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #97
    Db  030h,018h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #98
    Db  076h,0DCh,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #99
    Db  000h,0C6h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #9A
    Db  000h,000h,018h,018h,07Ch,0C6h,0C0h,0C0h,0C6h,07Ch,018h,018h,000h,000h ;   Hex #9B
    Db  000h,000h,038h,06Ch,064h,060h,0F0h,060h,060h,060h,0E6h,0FCh,000h,000h ;   Hex #9C
    Db  030h,018h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #9D
    Db  000h,000h,0FCh,066h,066h,07Ch,062h,066h,06Fh,066h,066h,0F3h,000h,000h ;   Hex #9E
    Db  00Ch,018h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #9F
    Db  000h,000h,00Ch,018h,030h,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #A0
    Db  000h,000h,00Ch,018h,030h,000h,038h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #A1
    Db  000h,000h,00Ch,018h,030h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #A2
    Db  000h,000h,00Ch,018h,030h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #A3
    Db  000h,000h,000h,076h,0DCh,000h,0DCh,066h,066h,066h,066h,066h,000h,000h ;   Hex #A4
    Db  076h,0DCh,000h,0C6h,0E6h,0F6h,0FEh,0DEh,0CEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #A5
    Db  000h,000h,03Ch,06Ch,06Ch,03Eh,000h,07Eh,000h,000h,000h,000h,000h,000h ;   Hex #A6
    Db  000h,000h,038h,06Ch,06Ch,038h,000h,07Ch,000h,000h,000h,000h,000h,000h ;   Hex #A7
    Db  000h,000h,000h,030h,030h,000h,030h,030h,060h,0C6h,0C6h,07Ch,000h,000h ;   Hex #A8
    Db  030h,018h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #A9
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,006h,006h,006h,000h,000h,000h ;   Hex #AA
    Db  000h,000h,060h,0E0h,063h,066h,06Ch,018h,030h,06Eh,0C3h,006h,00Ch,01Fh ;   Hex #AB
    Db  000h,000h,060h,0E0h,063h,066h,06Ch,01Ah,036h,06Eh,0DAh,03Fh,006h,006h ;   Hex #AC
    Db  000h,000h,000h,018h,018h,000h,018h,018h,03Ch,03Ch,03Ch,018h,000h,000h ;   Hex #AD
    Db  000h,000h,000h,000h,000h,036h,06Ch,0D8h,06Ch,036h,000h,000h,000h,000h ;   Hex #AE
    Db  000h,000h,000h,000h,000h,0D8h,06Ch,036h,06Ch,0D8h,000h,000h,000h,000h ;   Hex #AF
    Db  011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h ;   Hex #B0
    Db  055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh ;   Hex #B1
    Db  0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h ;   Hex #B2
    Db  018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B3
    Db  018h,018h,018h,018h,018h,018h,018h,0F8h,018h,018h,018h,018h,018h,018h ;   Hex #B4
    Db  018h,018h,018h,018h,018h,0F8h,018h,0F8h,018h,018h,018h,018h,018h,018h ;   Hex #B5
    Db  036h,036h,036h,036h,036h,036h,036h,0F6h,036h,036h,036h,036h,036h,036h ;   Hex #B6
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,036h,036h,036h,036h,036h,036h ;   Hex #B7
    Db  000h,000h,000h,000h,000h,0F8h,018h,0F8h,018h,018h,018h,018h,018h,018h ;   Hex #B8
    Db  036h,036h,036h,036h,036h,0F6h,006h,0F6h,036h,036h,036h,036h,036h,036h ;   Hex #B9
    Db  036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #BA
    Db  000h,000h,000h,000h,000h,0FEh,006h,0F6h,036h,036h,036h,036h,036h,036h ;   Hex #BB
    Db  036h,036h,036h,036h,036h,0F6h,006h,0FEh,000h,000h,000h,000h,000h,000h ;   Hex #BC
    Db  036h,036h,036h,036h,036h,036h,036h,0FEh,000h,000h,000h,000h,000h,000h ;   Hex #BD
    Db  018h,018h,018h,018h,018h,0F8h,018h,0F8h,000h,000h,000h,000h,000h,000h ;   Hex #BE
    Db  000h,000h,000h,000h,000h,000h,000h,0F8h,018h,018h,018h,018h,018h,018h ;   Hex #BF
    Db  018h,018h,018h,018h,018h,018h,018h,01Fh,000h,000h,000h,000h,000h,000h ;   Hex #C0
    Db  018h,018h,018h,018h,018h,018h,018h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #C1
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,018h,018h,018h,018h,018h,018h ;   Hex #C2
    Db  018h,018h,018h,018h,018h,018h,018h,01Fh,018h,018h,018h,018h,018h,018h ;   Hex #C3
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #C4
    Db  018h,018h,018h,018h,018h,018h,018h,0FFh,018h,018h,018h,018h,018h,018h ;   Hex #C5
    Db  018h,018h,018h,018h,018h,01Fh,018h,01Fh,018h,018h,018h,018h,018h,018h ;   Hex #C6
    Db  036h,036h,036h,036h,036h,036h,036h,037h,036h,036h,036h,036h,036h,036h ;   Hex #C7
    Db  036h,036h,036h,036h,036h,037h,030h,03Fh,000h,000h,000h,000h,000h,000h ;   Hex #C8
    Db  000h,000h,000h,000h,000h,03Fh,030h,037h,036h,036h,036h,036h,036h,036h ;   Hex #C9
    Db  036h,036h,036h,036h,036h,0F7h,000h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #CA
    Db  000h,000h,000h,000h,000h,0FFh,000h,0F7h,036h,036h,036h,036h,036h,036h ;   Hex #CB
    Db  036h,036h,036h,036h,036h,037h,030h,037h,036h,036h,036h,036h,036h,036h ;   Hex #CC
    Db  000h,000h,000h,000h,000h,0FFh,000h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #CD
    Db  036h,036h,036h,036h,036h,0F7h,000h,0F7h,036h,036h,036h,036h,036h,036h ;   Hex #CE
    Db  018h,018h,018h,018h,018h,0FFh,000h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #CF
    Db  036h,036h,036h,036h,036h,036h,036h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #D0
    Db  000h,000h,000h,000h,000h,0FFh,000h,0FFh,018h,018h,018h,018h,018h,018h ;   Hex #D1
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,036h,036h,036h,036h,036h,036h ;   Hex #D2
    Db  036h,036h,036h,036h,036h,036h,036h,03Fh,000h,000h,000h,000h,000h,000h ;   Hex #D3
    Db  018h,018h,018h,018h,018h,01Fh,018h,01Fh,000h,000h,000h,000h,000h,000h ;   Hex #D4
    Db  000h,000h,000h,000h,000h,01Fh,018h,01Fh,018h,018h,018h,018h,018h,018h ;   Hex #D5
    Db  000h,000h,000h,000h,000h,000h,000h,03Fh,036h,036h,036h,036h,036h,036h ;   Hex #D6
    Db  036h,036h,036h,036h,036h,036h,036h,0FFh,036h,036h,036h,036h,036h,036h ;   Hex #D7
    Db  018h,018h,018h,018h,018h,0FFh,018h,0FFh,018h,018h,018h,018h,018h,018h ;   Hex #D8
    Db  018h,018h,018h,018h,018h,018h,018h,0F8h,000h,000h,000h,000h,000h,000h ;   Hex #D9
    Db  000h,000h,000h,000h,000h,000h,000h,01Fh,018h,018h,018h,018h,018h,018h ;   Hex #DA
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DB
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DC
    Db  0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h ;   Hex #DD
    Db  00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh ;   Hex #DE
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,000h,000h,000h,000h,000h,000h,000h ;   Hex #DF
    Db  000h,000h,000h,000h,000h,000h,076h,0DCh,0D8h,0D8h,0DCh,076h,000h,000h ;   Hex #E0
    Db  000h,000h,000h,078h,0CCh,0CCh,0CCh,0D8h,0CCh,0C6h,0C6h,0CCh,000h,000h ;   Hex #E1
    Db  000h,000h,000h,0FEh,0C6h,0C6h,0C0h,0C0h,0C0h,0C0h,0C0h,0C0h,000h,000h ;   Hex #E2
    Db  000h,000h,000h,000h,000h,000h,0FEh,06Ch,06Ch,06Ch,06Ch,06Ch,000h,000h ;   Hex #E3
    Db  000h,000h,000h,0FEh,0C6h,060h,030h,018h,030h,060h,0C6h,0FEh,000h,000h ;   Hex #E4
    Db  000h,000h,000h,000h,000h,000h,07Eh,0D8h,0D8h,0D8h,0D8h,070h,000h,000h ;   Hex #E5
    Db  000h,000h,000h,000h,000h,000h,066h,066h,066h,066h,066h,07Ch,060h,0C0h ;   Hex #E6
    Db  000h,000h,000h,000h,000h,076h,0DCh,018h,018h,018h,018h,018h,000h,000h ;   Hex #E7
    Db  000h,000h,000h,07Eh,018h,03Ch,066h,066h,066h,03Ch,018h,07Eh,000h,000h ;   Hex #E8
    Db  000h,000h,000h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,06Ch,038h,000h,000h ;   Hex #E9
    Db  000h,000h,000h,038h,06Ch,0C6h,0C6h,0C6h,06Ch,06Ch,06Ch,0EEh,000h,000h ;   Hex #EA
    Db  000h,000h,000h,01Eh,030h,018h,00Ch,03Eh,066h,066h,066h,03Ch,000h,000h ;   Hex #EB
    Db  000h,000h,000h,000h,000h,000h,07Eh,0DBh,0DBh,07Eh,000h,000h,000h,000h ;   Hex #EC
    Db  000h,000h,000h,003h,006h,07Eh,0DBh,0DBh,0F3h,07Eh,060h,0C0h,000h,000h ;   Hex #ED
    Db  000h,000h,000h,01Eh,030h,060h,060h,07Eh,060h,060h,030h,01Eh,000h,000h ;   Hex #EE
    Db  000h,000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,000h,000h ;   Hex #EF
    Db  000h,000h,000h,000h,0FEh,000h,000h,0FEh,000h,000h,0FEh,000h,000h,000h ;   Hex #F0
    Db  000h,000h,000h,000h,018h,018h,07Eh,018h,018h,000h,000h,07Eh,000h,000h ;   Hex #F1
    Db  000h,000h,000h,030h,018h,00Ch,006h,00Ch,018h,030h,000h,07Eh,000h,000h ;   Hex #F2
    Db  000h,000h,000h,00Ch,018h,030h,060h,030h,018h,00Ch,000h,07Eh,000h,000h ;   Hex #F3
    Db  000h,000h,00Eh,01Bh,01Bh,018h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #F4
    Db  018h,018h,018h,018h,018h,018h,018h,018h,0D8h,0D8h,070h,000h,000h,000h ;   Hex #F5
    Db  000h,000h,000h,000h,000h,018h,000h,07Eh,000h,018h,000h,000h,000h,000h ;   Hex #F6
    Db  000h,000h,000h,000h,000h,076h,0DCh,000h,076h,0DCh,000h,000h,000h,000h ;   Hex #F7
    Db  000h,038h,06Ch,06Ch,038h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #F8
    Db  000h,000h,000h,000h,000h,000h,000h,018h,018h,000h,000h,000h,000h,000h ;   Hex #F9
    Db  000h,000h,000h,000h,000h,000h,000h,018h,000h,000h,000h,000h,000h,000h ;   Hex #FA
    Db  000h,00Fh,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,0ECh,06Ch,03Ch,01Ch,000h,000h ;   Hex #FB
    Db  000h,06Ch,036h,036h,036h,036h,036h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FC
    Db  000h,03Ch,066h,00Ch,018h,032h,07Eh,000h,000h,000h,000h,000h,000h,000h ;   Hex #FD
    Db  000h,000h,000h,000h,000h,07Eh,07Eh,07Eh,07Eh,07Eh,07Eh,000h,000h,000h ;   Hex #FE
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FF


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\ega2\860-8x8.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
;***************************************************
;  CHARACTER FONT FILE
;  Source Assembler File
;
;        CODE PAGE: 860 
;  FONT RESOLUTION: 8 x 8 
;
;     DATE CREATED:05-28-1987
;
;
; Output file from: MULTIFON, Version 1A
;
;***************************************************
    Db  000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #0
    Db  07Eh,081h,0A5h,081h,0BDh,099h,081h,07Eh ;   Hex #1
    Db  07Eh,0FFh,0DBh,0FFh,0C3h,0E7h,0FFh,07Eh ;   Hex #2
    Db  06Ch,0FEh,0FEh,0FEh,07Ch,038h,010h,000h ;   Hex #3
    Db  010h,038h,07Ch,0FEh,07Ch,038h,010h,000h ;   Hex #4
    Db  038h,07Ch,038h,0FEh,0FEh,0D6h,010h,038h ;   Hex #5
    Db  010h,038h,07Ch,0FEh,0FEh,07Ch,010h,038h ;   Hex #6
    Db  000h,000h,018h,03Ch,03Ch,018h,000h,000h ;   Hex #7
    Db  0FFh,0FFh,0E7h,0C3h,0C3h,0E7h,0FFh,0FFh ;   Hex #8
    Db  000h,03Ch,066h,042h,042h,066h,03Ch,000h ;   Hex #9
    Db  0FFh,0C3h,099h,0BDh,0BDh,099h,0C3h,0FFh ;   Hex #A
    Db  00Fh,007h,00Fh,07Dh,0CCh,0CCh,0CCh,078h ;   Hex #B
    Db  03Ch,066h,066h,066h,03Ch,018h,07Eh,018h ;   Hex #C
    Db  03Fh,033h,03Fh,030h,030h,070h,0F0h,0E0h ;   Hex #D
    Db  07Fh,063h,07Fh,063h,063h,067h,0E6h,0C0h ;   Hex #E
    Db  018h,0DBh,03Ch,0E7h,0E7h,03Ch,0DBh,018h ;   Hex #F
    Db  080h,0E0h,0F8h,0FEh,0F8h,0E0h,080h,000h ;   Hex #10
    Db  002h,00Eh,03Eh,0FEh,03Eh,00Eh,002h,000h ;   Hex #11
    Db  018h,03Ch,07Eh,018h,018h,07Eh,03Ch,018h ;   Hex #12
    Db  066h,066h,066h,066h,066h,000h,066h,000h ;   Hex #13
    Db  07Fh,0DBh,0DBh,07Bh,01Bh,01Bh,01Bh,000h ;   Hex #14
    Db  03Eh,061h,03Ch,066h,066h,03Ch,086h,07Ch ;   Hex #15
    Db  000h,000h,000h,000h,07Eh,07Eh,07Eh,000h ;   Hex #16
    Db  018h,03Ch,07Eh,018h,07Eh,03Ch,018h,0FFh ;   Hex #17
    Db  018h,03Ch,07Eh,018h,018h,018h,018h,000h ;   Hex #18
    Db  018h,018h,018h,018h,07Eh,03Ch,018h,000h ;   Hex #19
    Db  000h,018h,00Ch,0FEh,00Ch,018h,000h,000h ;   Hex #1A
    Db  000h,030h,060h,0FEh,060h,030h,000h,000h ;   Hex #1B
    Db  000h,000h,0C0h,0C0h,0C0h,0FEh,000h,000h ;   Hex #1C
    Db  000h,024h,066h,0FFh,066h,024h,000h,000h ;   Hex #1D
    Db  000h,018h,03Ch,07Eh,0FFh,0FFh,000h,000h ;   Hex #1E
    Db  000h,0FFh,0FFh,07Eh,03Ch,018h,000h,000h ;   Hex #1F
    Db  000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #20
    Db  018h,03Ch,03Ch,018h,018h,000h,018h,000h ;   Hex #21
    Db  066h,066h,024h,000h,000h,000h,000h,000h ;   Hex #22
    Db  06Ch,06Ch,0FEh,06Ch,0FEh,06Ch,06Ch,000h ;   Hex #23
    Db  018h,03Eh,060h,03Ch,006h,07Ch,018h,000h ;   Hex #24
    Db  000h,0C6h,0CCh,018h,030h,066h,0C6h,000h ;   Hex #25
    Db  038h,06Ch,038h,076h,0DCh,0CCh,076h,000h ;   Hex #26
    Db  018h,018h,030h,000h,000h,000h,000h,000h ;   Hex #27
    Db  00Ch,018h,030h,030h,030h,018h,00Ch,000h ;   Hex #28
    Db  030h,018h,00Ch,00Ch,00Ch,018h,030h,000h ;   Hex #29
    Db  000h,066h,03Ch,0FFh,03Ch,066h,000h,000h ;   Hex #2A
    Db  000h,018h,018h,07Eh,018h,018h,000h,000h ;   Hex #2B
    Db  000h,000h,000h,000h,000h,018h,018h,030h ;   Hex #2C
    Db  000h,000h,000h,07Eh,000h,000h,000h,000h ;   Hex #2D
    Db  000h,000h,000h,000h,000h,018h,018h,000h ;   Hex #2E
    Db  006h,00Ch,018h,030h,060h,0C0h,080h,000h ;   Hex #2F
    Db  038h,06Ch,0C6h,0D6h,0C6h,06Ch,038h,000h ;   Hex #30
    Db  018h,038h,018h,018h,018h,018h,07Eh,000h ;   Hex #31
    Db  07Ch,0C6h,006h,01Ch,030h,066h,0FEh,000h ;   Hex #32
    Db  07Ch,0C6h,006h,03Ch,006h,0C6h,07Ch,000h ;   Hex #33
    Db  01Ch,03Ch,06Ch,0CCh,0FEh,00Ch,01Eh,000h ;   Hex #34
    Db  0FEh,0C0h,0C0h,0FCh,006h,0C6h,07Ch,000h ;   Hex #35
    Db  038h,060h,0C0h,0FCh,0C6h,0C6h,07Ch,000h ;   Hex #36
    Db  0FEh,0C6h,00Ch,018h,030h,030h,030h,000h ;   Hex #37
    Db  07Ch,0C6h,0C6h,07Ch,0C6h,0C6h,07Ch,000h ;   Hex #38
    Db  07Ch,0C6h,0C6h,07Eh,006h,00Ch,078h,000h ;   Hex #39
    Db  000h,018h,018h,000h,000h,018h,018h,000h ;   Hex #3A
    Db  000h,018h,018h,000h,000h,018h,018h,030h ;   Hex #3B
    Db  006h,00Ch,018h,030h,018h,00Ch,006h,000h ;   Hex #3C
    Db  000h,000h,07Eh,000h,000h,07Eh,000h,000h ;   Hex #3D
    Db  060h,030h,018h,00Ch,018h,030h,060h,000h ;   Hex #3E
    Db  07Ch,0C6h,00Ch,018h,018h,000h,018h,000h ;   Hex #3F
    Db  07Ch,0C6h,0DEh,0DEh,0DEh,0C0h,078h,000h ;   Hex #40
    Db  038h,06Ch,0C6h,0FEh,0C6h,0C6h,0C6h,000h ;   Hex #41
    Db  0FCh,066h,066h,07Ch,066h,066h,0FCh,000h ;   Hex #42
    Db  03Ch,066h,0C0h,0C0h,0C0h,066h,03Ch,000h ;   Hex #43
    Db  0F8h,06Ch,066h,066h,066h,06Ch,0F8h,000h ;   Hex #44
    Db  0FEh,062h,068h,078h,068h,062h,0FEh,000h ;   Hex #45
    Db  0FEh,062h,068h,078h,068h,060h,0F0h,000h ;   Hex #46
    Db  03Ch,066h,0C0h,0C0h,0CEh,066h,03Ah,000h ;   Hex #47
    Db  0C6h,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h ;   Hex #48
    Db  03Ch,018h,018h,018h,018h,018h,03Ch,000h ;   Hex #49
    Db  01Eh,00Ch,00Ch,00Ch,0CCh,0CCh,078h,000h ;   Hex #4A
    Db  0E6h,066h,06Ch,078h,06Ch,066h,0E6h,000h ;   Hex #4B
    Db  0F0h,060h,060h,060h,062h,066h,0FEh,000h ;   Hex #4C
    Db  0C6h,0EEh,0FEh,0FEh,0D6h,0C6h,0C6h,000h ;   Hex #4D
    Db  0C6h,0E6h,0F6h,0DEh,0CEh,0C6h,0C6h,000h ;   Hex #4E
    Db  07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #4F
    Db  0FCh,066h,066h,07Ch,060h,060h,0F0h,000h ;   Hex #50
    Db  07Ch,0C6h,0C6h,0C6h,0C6h,0CEh,07Ch,00Eh ;   Hex #51
    Db  0FCh,066h,066h,07Ch,06Ch,066h,0E6h,000h ;   Hex #52
    Db  03Ch,066h,030h,018h,00Ch,066h,03Ch,000h ;   Hex #53
    Db  07Eh,07Eh,05Ah,018h,018h,018h,03Ch,000h ;   Hex #54
    Db  0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #55
    Db  0C6h,0C6h,0C6h,0C6h,0C6h,06Ch,038h,000h ;   Hex #56
    Db  0C6h,0C6h,0C6h,0D6h,0D6h,0FEh,06Ch,000h ;   Hex #57
    Db  0C6h,0C6h,06Ch,038h,06Ch,0C6h,0C6h,000h ;   Hex #58
    Db  066h,066h,066h,03Ch,018h,018h,03Ch,000h ;   Hex #59
    Db  0FEh,0C6h,08Ch,018h,032h,066h,0FEh,000h ;   Hex #5A
    Db  03Ch,030h,030h,030h,030h,030h,03Ch,000h ;   Hex #5B
    Db  0C0h,060h,030h,018h,00Ch,006h,002h,000h ;   Hex #5C
    Db  03Ch,00Ch,00Ch,00Ch,00Ch,00Ch,03Ch,000h ;   Hex #5D
    Db  010h,038h,06Ch,0C6h,000h,000h,000h,000h ;   Hex #5E
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh ;   Hex #5F
    Db  030h,018h,00Ch,000h,000h,000h,000h,000h ;   Hex #60
    Db  000h,000h,078h,00Ch,07Ch,0CCh,076h,000h ;   Hex #61
    Db  0E0h,060h,07Ch,066h,066h,066h,0DCh,000h ;   Hex #62
    Db  000h,000h,07Ch,0C6h,0C0h,0C6h,07Ch,000h ;   Hex #63
    Db  01Ch,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h ;   Hex #64
    Db  000h,000h,07Ch,0C6h,0FEh,0C0h,07Ch,000h ;   Hex #65
    Db  03Ch,066h,060h,0F8h,060h,060h,0F0h,000h ;   Hex #66
    Db  000h,000h,076h,0CCh,0CCh,07Ch,00Ch,0F8h ;   Hex #67
    Db  0E0h,060h,06Ch,076h,066h,066h,0E6h,000h ;   Hex #68
    Db  018h,000h,038h,018h,018h,018h,03Ch,000h ;   Hex #69
    Db  006h,000h,006h,006h,006h,066h,066h,03Ch ;   Hex #6A
    Db  0E0h,060h,066h,06Ch,078h,06Ch,0E6h,000h ;   Hex #6B
    Db  038h,018h,018h,018h,018h,018h,03Ch,000h ;   Hex #6C
    Db  000h,000h,0ECh,0FEh,0D6h,0D6h,0D6h,000h ;   Hex #6D
    Db  000h,000h,0DCh,066h,066h,066h,066h,000h ;   Hex #6E
    Db  000h,000h,07Ch,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #6F
    Db  000h,000h,0DCh,066h,066h,07Ch,060h,0F0h ;   Hex #70
    Db  000h,000h,076h,0CCh,0CCh,07Ch,00Ch,01Eh ;   Hex #71
    Db  000h,000h,0DCh,076h,060h,060h,0F0h,000h ;   Hex #72
    Db  000h,000h,07Eh,0C0h,07Ch,006h,0FCh,000h ;   Hex #73
    Db  030h,030h,0FCh,030h,030h,036h,01Ch,000h ;   Hex #74
    Db  000h,000h,0CCh,0CCh,0CCh,0CCh,076h,000h ;   Hex #75
    Db  000h,000h,0C6h,0C6h,0C6h,06Ch,038h,000h ;   Hex #76
    Db  000h,000h,0C6h,0D6h,0D6h,0FEh,06Ch,000h ;   Hex #77
    Db  000h,000h,0C6h,06Ch,038h,06Ch,0C6h,000h ;   Hex #78
    Db  000h,000h,0C6h,0C6h,0C6h,07Eh,006h,0FCh ;   Hex #79
    Db  000h,000h,07Eh,04Ch,018h,032h,07Eh,000h ;   Hex #7A
    Db  00Eh,018h,018h,070h,018h,018h,00Eh,000h ;   Hex #7B
    Db  018h,018h,018h,018h,018h,018h,018h,000h ;   Hex #7C
    Db  070h,018h,018h,00Eh,018h,018h,070h,000h ;   Hex #7D
    Db  076h,0DCh,000h,000h,000h,000h,000h,000h ;   Hex #7E
    Db  000h,010h,038h,06Ch,0C6h,0C6h,0FEh,000h ;   Hex #7F
    Db  07Ch,0C6h,0C0h,0C0h,0C6h,07Ch,00Ch,078h ;   Hex #80
    Db  0CCh,000h,0CCh,0CCh,0CCh,0CCh,076h,000h ;   Hex #81
    Db  00Ch,018h,07Ch,0C6h,0FEh,0C0h,07Ch,000h ;   Hex #82
    Db  07Ch,082h,078h,00Ch,07Ch,0CCh,076h,000h ;   Hex #83
    Db  076h,0DCh,078h,00Ch,07Ch,0CCh,076h,000h ;   Hex #84
    Db  030h,018h,078h,00Ch,07Ch,0CCh,076h,000h ;   Hex #85
    Db  030h,060h,038h,06Ch,0C6h,0FEh,0C6h,000h ;   Hex #86
    Db  000h,000h,07Eh,0C0h,0C0h,07Eh,00Ch,038h ;   Hex #87
    Db  07Ch,082h,07Ch,0C6h,0FEh,0C0h,07Ch,000h ;   Hex #88
    Db  07Ch,082h,0FEh,0C0h,0F8h,0C0h,0FEh,000h ;   Hex #89
    Db  030h,018h,07Ch,0C6h,0FEh,0C0h,07Ch,000h ;   Hex #8A
    Db  00Ch,018h,03Ch,018h,018h,018h,03Ch,000h ;   Hex #8B
    Db  07Ch,082h,038h,06Ch,0C6h,06Ch,038h,000h ;   Hex #8C
    Db  030h,018h,000h,038h,018h,018h,03Ch,000h ;   Hex #8D
    Db  076h,0DCh,038h,06Ch,0C6h,0FEh,0C6h,000h ;   Hex #8E
    Db  07Ch,082h,038h,06Ch,0C6h,0FEh,0C6h,000h ;   Hex #8F
    Db  018h,030h,0FEh,0C0h,0F8h,0C0h,0FEh,000h ;   Hex #90
    Db  060h,030h,038h,06Ch,0C6h,0FEh,0C6h,000h ;   Hex #91
    Db  030h,018h,0FEh,0C0h,0F8h,0C0h,0FEh,000h ;   Hex #92
    Db  07Ch,082h,07Ch,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #93
    Db  076h,0DCh,07Ch,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #94
    Db  030h,018h,07Ch,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #95
    Db  00Ch,018h,0C6h,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #96
    Db  060h,030h,0CCh,0CCh,0CCh,0CCh,076h,000h ;   Hex #97
    Db  030h,018h,03Ch,018h,018h,018h,03Ch,000h ;   Hex #98
    Db  076h,0DCh,038h,06Ch,0C6h,06Ch,038h,000h ;   Hex #99
    Db  0C6h,000h,0C6h,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #9A
    Db  018h,018h,07Eh,0C0h,0C0h,07Eh,018h,018h ;   Hex #9B
    Db  038h,06Ch,064h,0F0h,060h,066h,0FCh,000h ;   Hex #9C
    Db  030h,018h,0C6h,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #9D
    Db  0F8h,0CCh,0CCh,0FAh,0C6h,0CFh,0C6h,0C7h ;   Hex #9E
    Db  00Ch,018h,038h,06Ch,0C6h,06Ch,038h,000h ;   Hex #9F
    Db  018h,030h,078h,00Ch,07Ch,0CCh,076h,000h ;   Hex #A0
    Db  00Ch,018h,000h,038h,018h,018h,03Ch,000h ;   Hex #A1
    Db  00Ch,018h,07Ch,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #A2
    Db  018h,030h,0CCh,0CCh,0CCh,0CCh,076h,000h ;   Hex #A3
    Db  076h,0DCh,000h,0DCh,066h,066h,066h,000h ;   Hex #A4
    Db  076h,0DCh,000h,0E6h,0F6h,0DEh,0CEh,000h ;   Hex #A5
    Db  03Ch,06Ch,06Ch,03Eh,000h,07Eh,000h,000h ;   Hex #A6
    Db  038h,06Ch,06Ch,038h,000h,07Ch,000h,000h ;   Hex #A7
    Db  018h,000h,018h,018h,030h,063h,03Eh,000h ;   Hex #A8
    Db  030h,018h,038h,06Ch,0C6h,06Ch,038h,000h ;   Hex #A9
    Db  000h,000h,000h,0FEh,006h,006h,000h,000h ;   Hex #AA
    Db  063h,0E6h,06Ch,07Eh,033h,066h,0CCh,00Fh ;   Hex #AB
    Db  063h,0E6h,06Ch,07Ah,036h,06Ah,0DFh,006h ;   Hex #AC
    Db  018h,000h,018h,018h,03Ch,03Ch,018h,000h ;   Hex #AD
    Db  000h,033h,066h,0CCh,066h,033h,000h,000h ;   Hex #AE
    Db  000h,0CCh,066h,033h,066h,0CCh,000h,000h ;   Hex #AF
    Db  022h,088h,022h,088h,022h,088h,022h,088h ;   Hex #B0
    Db  055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh ;   Hex #B1
    Db  077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh ;   Hex #B2
    Db  018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B3
    Db  018h,018h,018h,018h,0F8h,018h,018h,018h ;   Hex #B4
    Db  018h,018h,0F8h,018h,0F8h,018h,018h,018h ;   Hex #B5
    Db  036h,036h,036h,036h,0F6h,036h,036h,036h ;   Hex #B6
    Db  000h,000h,000h,000h,0FEh,036h,036h,036h ;   Hex #B7
    Db  000h,000h,0F8h,018h,0F8h,018h,018h,018h ;   Hex #B8
    Db  036h,036h,0F6h,006h,0F6h,036h,036h,036h ;   Hex #B9
    Db  036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #BA
    Db  000h,000h,0FEh,006h,0F6h,036h,036h,036h ;   Hex #BB
    Db  036h,036h,0F6h,006h,0FEh,000h,000h,000h ;   Hex #BC
    Db  036h,036h,036h,036h,0FEh,000h,000h,000h ;   Hex #BD
    Db  018h,018h,0F8h,018h,0F8h,000h,000h,000h ;   Hex #BE
    Db  000h,000h,000h,000h,0F8h,018h,018h,018h ;   Hex #BF
    Db  018h,018h,018h,018h,01Fh,000h,000h,000h ;   Hex #C0
    Db  018h,018h,018h,018h,0FFh,000h,000h,000h ;   Hex #C1
    Db  000h,000h,000h,000h,0FFh,018h,018h,018h ;   Hex #C2
    Db  018h,018h,018h,018h,01Fh,018h,018h,018h ;   Hex #C3
    Db  000h,000h,000h,000h,0FFh,000h,000h,000h ;   Hex #C4
    Db  018h,018h,018h,018h,0FFh,018h,018h,018h ;   Hex #C5
    Db  018h,018h,01Fh,018h,01Fh,018h,018h,018h ;   Hex #C6
    Db  036h,036h,036h,036h,037h,036h,036h,036h ;   Hex #C7
    Db  036h,036h,037h,030h,03Fh,000h,000h,000h ;   Hex #C8
    Db  000h,000h,03Fh,030h,037h,036h,036h,036h ;   Hex #C9
    Db  036h,036h,0F7h,000h,0FFh,000h,000h,000h ;   Hex #CA
    Db  000h,000h,0FFh,000h,0F7h,036h,036h,036h ;   Hex #CB
    Db  036h,036h,037h,030h,037h,036h,036h,036h ;   Hex #CC
    Db  000h,000h,0FFh,000h,0FFh,000h,000h,000h ;   Hex #CD
    Db  036h,036h,0F7h,000h,0F7h,036h,036h,036h ;   Hex #CE
    Db  018h,018h,0FFh,000h,0FFh,000h,000h,000h ;   Hex #CF
    Db  036h,036h,036h,036h,0FFh,000h,000h,000h ;   Hex #D0
    Db  000h,000h,0FFh,000h,0FFh,018h,018h,018h ;   Hex #D1
    Db  000h,000h,000h,000h,0FFh,036h,036h,036h ;   Hex #D2
    Db  036h,036h,036h,036h,03Fh,000h,000h,000h ;   Hex #D3
    Db  018h,018h,01Fh,018h,01Fh,000h,000h,000h ;   Hex #D4
    Db  000h,000h,01Fh,018h,01Fh,018h,018h,018h ;   Hex #D5
    Db  000h,000h,000h,000h,03Fh,036h,036h,036h ;   Hex #D6
    Db  036h,036h,036h,036h,0FFh,036h,036h,036h ;   Hex #D7
    Db  018h,018h,0FFh,018h,0FFh,018h,018h,018h ;   Hex #D8
    Db  018h,018h,018h,018h,0F8h,000h,000h,000h ;   Hex #D9
    Db  000h,000h,000h,000h,01Fh,018h,018h,018h ;   Hex #DA
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DB
    Db  000h,000h,000h,000h,0FFh,0FFh,0FFh,0FFh ;   Hex #DC
    Db  0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h ;   Hex #DD
    Db  00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh ;   Hex #DE
    Db  0FFh,0FFh,0FFh,0FFh,000h,000h,000h,000h ;   Hex #DF
    Db  000h,000h,076h,0DCh,0C8h,0DCh,076h,000h ;   Hex #E0
    Db  078h,0CCh,0CCh,0D8h,0CCh,0C6h,0CCh,000h ;   Hex #E1
    Db  0FEh,0C6h,0C0h,0C0h,0C0h,0C0h,0C0h,000h ;   Hex #E2
    Db  000h,000h,0FEh,06Ch,06Ch,06Ch,06Ch,000h ;   Hex #E3
    Db  0FEh,0C6h,060h,030h,060h,0C6h,0FEh,000h ;   Hex #E4
    Db  000h,000h,07Eh,0D8h,0D8h,0D8h,070h,000h ;   Hex #E5
    Db  000h,000h,066h,066h,066h,066h,07Ch,0C0h ;   Hex #E6
    Db  000h,076h,0DCh,018h,018h,018h,018h,000h ;   Hex #E7
    Db  07Eh,018h,03Ch,066h,066h,03Ch,018h,07Eh ;   Hex #E8
    Db  038h,06Ch,0C6h,0FEh,0C6h,06Ch,038h,000h ;   Hex #E9
    Db  038h,06Ch,0C6h,0C6h,06Ch,06Ch,0EEh,000h ;   Hex #EA
    Db  00Eh,018h,00Ch,03Eh,066h,066h,03Ch,000h ;   Hex #EB
    Db  000h,000h,07Eh,0DBh,0DBh,07Eh,000h,000h ;   Hex #EC
    Db  006h,00Ch,07Eh,0DBh,0DBh,07Eh,060h,0C0h ;   Hex #ED
    Db  01Eh,030h,060h,07Eh,060h,030h,01Eh,000h ;   Hex #EE
    Db  000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,000h ;   Hex #EF
    Db  000h,0FEh,000h,0FEh,000h,0FEh,000h,000h ;   Hex #F0
    Db  018h,018h,07Eh,018h,018h,000h,07Eh,000h ;   Hex #F1
    Db  030h,018h,00Ch,018h,030h,000h,07Eh,000h ;   Hex #F2
    Db  00Ch,018h,030h,018h,00Ch,000h,07Eh,000h ;   Hex #F3
    Db  00Eh,01Bh,01Bh,018h,018h,018h,018h,018h ;   Hex #F4
    Db  018h,018h,018h,018h,018h,0D8h,0D8h,070h ;   Hex #F5
    Db  000h,018h,000h,07Eh,000h,018h,000h,000h ;   Hex #F6
    Db  000h,076h,0DCh,000h,076h,0DCh,000h,000h ;   Hex #F7
    Db  038h,06Ch,06Ch,038h,000h,000h,000h,000h ;   Hex #F8
    Db  000h,000h,000h,018h,018h,000h,000h,000h ;   Hex #F9
    Db  000h,000h,000h,018h,000h,000h,000h,000h ;   Hex #FA
    Db  00Fh,00Ch,00Ch,00Ch,0ECh,06Ch,03Ch,01Ch ;   Hex #FB
    Db  06Ch,036h,036h,036h,036h,000h,000h,000h ;   Hex #FC
    Db  078h,00Ch,018h,030h,07Ch,000h,000h,000h ;   Hex #FD
    Db  000h,000h,03Ch,03Ch,03Ch,03Ch,000h,000h ;   Hex #FE
    Db  000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FF


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\ega2\865-cpi.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
CODE    SEGMENT BYTE PUBLIC 'CODE'
        ASSUME CS:CODE,DS:CODE

IF1
;        %OUT    EGA.CPI creation file
;        %OUT    .
;        %OUT    CP SRC files:
;        %OUT    .
;        %OUT    .       CODE PAGE:  865
ENDIF

EGA865: DW     LEN_865                  ; SIZE OF ENTRY HEADER
        DW     POST_EGA865,0            ; POINTER TO NEXT HEADER
        DW     1                        ; DEVICE TYPE
        DB     "EGA     "               ; DEVICE SUBTYPE ID
        DW     865                      ; CODE PAGE ID
        DW     3 DUP(0)                 ; RESERVED
        DW     OFFSET DATA865,0         ; POINTER TO FONTS
LEN_865 EQU    ($-EGA865)               ;
                                        ;
DATA865:DW     1                        ; CART/NON-CART
        DW     3                        ; # OF FONTS
        DW     LEN_D865                 ; LENGTH OF DATA
D865:                                   ;
        DB     16,8                     ; CHARACTER BOX SIZE
        DB     0,0                      ; ASPECT RATIO (UNUSED)
        DW     256                      ; NUMBER OF CHARACTERS
                                        ;
        INCLUDE 865-8X16.ASM            ;
                                        ;
        DB     14,8                     ; CHARACTER BOX SIZE
        DB     0,0                      ; ASPECT RATIO (UNUSED)
        DW     256                      ; NUMBER OF CHARACTERS
                                        ;
        INCLUDE 865-8X14.ASM            ;
                                        ;
        DB     8,8                      ; CHARACTER BOX SIZE
        DB     0,0                      ; ASPECT RATIO (UNUSED)
        DW     256                      ; NUMBER OF CHARACTERS
                                        ;
        INCLUDE 865-8X8.ASM             ;
                                        ;
LEN_D865        EQU ($-D865)            ;
                                        ;
POST_EGA865     EQU     $               ;
                                        ;
CODE    ENDS                            ;
        END                             ;


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\ega2\863-8x16.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
;***************************************************
;  CHARACTER FONT FILE
;  Source Assembler File
;
;        CODE PAGE: 863 
;  FONT RESOLUTION: 8 x 16 
;
;     DATE CREATED:05-28-1987
;
;
; Output file from: MULTIFON, Version 1A
;
;***************************************************
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #0
    Db  000h,000h,07Eh,081h,0A5h,081h,081h,0BDh,099h,081h,081h,07Eh,000h,000h,000h,000h ;   Hex #1
    Db  000h,000h,07Eh,0FFh,0DBh,0FFh,0FFh,0C3h,0E7h,0FFh,0FFh,07Eh,000h,000h,000h,000h ;   Hex #2
    Db  000h,000h,000h,000h,06Ch,0FEh,0FEh,0FEh,0FEh,07Ch,038h,010h,000h,000h,000h,000h ;   Hex #3
    Db  000h,000h,000h,000h,010h,038h,07Ch,0FEh,07Ch,038h,010h,000h,000h,000h,000h,000h ;   Hex #4
    Db  000h,000h,000h,018h,03Ch,03Ch,0E7h,0E7h,0E7h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #5
    Db  000h,000h,000h,018h,03Ch,07Eh,0FFh,0FFh,07Eh,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #6
    Db  000h,000h,000h,000h,000h,000h,018h,03Ch,03Ch,018h,000h,000h,000h,000h,000h,000h ;   Hex #7
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0E7h,0C3h,0C3h,0E7h,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #8
    Db  000h,000h,000h,000h,000h,03Ch,066h,042h,042h,066h,03Ch,000h,000h,000h,000h,000h ;   Hex #9
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0C3h,099h,0BDh,0BDh,099h,0C3h,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #A
    Db  000h,000h,01Eh,00Eh,01Ah,032h,078h,0CCh,0CCh,0CCh,0CCh,078h,000h,000h,000h,000h ;   Hex #B
    Db  000h,000h,03Ch,066h,066h,066h,066h,03Ch,018h,07Eh,018h,018h,000h,000h,000h,000h ;   Hex #C
    Db  000h,000h,03Fh,033h,03Fh,030h,030h,030h,030h,070h,0F0h,0E0h,000h,000h,000h,000h ;   Hex #D
    Db  000h,000h,07Fh,063h,07Fh,063h,063h,063h,063h,067h,0E7h,0E6h,0C0h,000h,000h,000h ;   Hex #E
    Db  000h,000h,000h,018h,018h,0DBh,03Ch,0E7h,03Ch,0DBh,018h,018h,000h,000h,000h,000h ;   Hex #F
    Db  000h,080h,0C0h,0E0h,0F0h,0F8h,0FEh,0F8h,0F0h,0E0h,0C0h,080h,000h,000h,000h,000h ;   Hex #10
    Db  000h,002h,006h,00Eh,01Eh,03Eh,0FEh,03Eh,01Eh,00Eh,006h,002h,000h,000h,000h,000h ;   Hex #11
    Db  000h,000h,018h,03Ch,07Eh,018h,018h,018h,07Eh,03Ch,018h,000h,000h,000h,000h,000h ;   Hex #12
    Db  000h,000h,066h,066h,066h,066h,066h,066h,066h,000h,066h,066h,000h,000h,000h,000h ;   Hex #13
    Db  000h,000h,07Fh,0DBh,0DBh,0DBh,07Bh,01Bh,01Bh,01Bh,01Bh,01Bh,000h,000h,000h,000h ;   Hex #14
    Db  000h,07Ch,0C6h,060h,038h,06Ch,0C6h,0C6h,06Ch,038h,00Ch,0C6h,07Ch,000h,000h,000h ;   Hex #15
    Db  000h,000h,000h,000h,000h,000h,000h,000h,0FEh,0FEh,0FEh,0FEh,000h,000h,000h,000h ;   Hex #16
    Db  000h,000h,018h,03Ch,07Eh,018h,018h,018h,07Eh,03Ch,018h,07Eh,000h,000h,000h,000h ;   Hex #17
    Db  000h,000h,018h,03Ch,07Eh,018h,018h,018h,018h,018h,018h,018h,000h,000h,000h,000h ;   Hex #18
    Db  000h,000h,018h,018h,018h,018h,018h,018h,018h,07Eh,03Ch,018h,000h,000h,000h,000h ;   Hex #19
    Db  000h,000h,000h,000h,000h,018h,00Ch,0FEh,00Ch,018h,000h,000h,000h,000h,000h,000h ;   Hex #1A
    Db  000h,000h,000h,000h,000h,030h,060h,0FEh,060h,030h,000h,000h,000h,000h,000h,000h ;   Hex #1B
    Db  000h,000h,000h,000h,000h,000h,0C0h,0C0h,0C0h,0FEh,000h,000h,000h,000h,000h,000h ;   Hex #1C
    Db  000h,000h,000h,000h,000h,028h,06Ch,0FEh,06Ch,028h,000h,000h,000h,000h,000h,000h ;   Hex #1D
    Db  000h,000h,000h,000h,010h,038h,038h,07Ch,07Ch,0FEh,0FEh,000h,000h,000h,000h,000h ;   Hex #1E
    Db  000h,000h,000h,000h,0FEh,0FEh,07Ch,07Ch,038h,038h,010h,000h,000h,000h,000h,000h ;   Hex #1F
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #20
    Db  000h,000h,018h,03Ch,03Ch,03Ch,018h,018h,018h,000h,018h,018h,000h,000h,000h,000h ;   Hex #21
    Db  000h,066h,066h,066h,024h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #22
    Db  000h,000h,000h,06Ch,06Ch,0FEh,06Ch,06Ch,06Ch,0FEh,06Ch,06Ch,000h,000h,000h,000h ;   Hex #23
    Db  018h,018h,07Ch,0C6h,0C2h,0C0h,07Ch,006h,006h,086h,0C6h,07Ch,018h,018h,000h,000h ;   Hex #24
    Db  000h,000h,000h,000h,0C2h,0C6h,00Ch,018h,030h,060h,0C6h,086h,000h,000h,000h,000h ;   Hex #25
    Db  000h,000h,038h,06Ch,06Ch,038h,076h,0DCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #26
    Db  000h,030h,030h,030h,060h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #27
    Db  000h,000h,00Ch,018h,030h,030h,030h,030h,030h,030h,018h,00Ch,000h,000h,000h,000h ;   Hex #28
    Db  000h,000h,030h,018h,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,018h,030h,000h,000h,000h,000h ;   Hex #29
    Db  000h,000h,000h,000h,000h,066h,03Ch,0FFh,03Ch,066h,000h,000h,000h,000h,000h,000h ;   Hex #2A
    Db  000h,000h,000h,000h,000h,018h,018h,07Eh,018h,018h,000h,000h,000h,000h,000h,000h ;   Hex #2B
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,018h,018h,030h,000h,000h,000h ;   Hex #2C
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #2D
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,018h,000h,000h,000h,000h ;   Hex #2E
    Db  000h,000h,000h,000h,002h,006h,00Ch,018h,030h,060h,0C0h,080h,000h,000h,000h,000h ;   Hex #2F
    Db  000h,000h,038h,06Ch,0C6h,0C6h,0D6h,0D6h,0C6h,0C6h,06Ch,038h,000h,000h,000h,000h ;   Hex #30
    Db  000h,000h,018h,038h,078h,018h,018h,018h,018h,018h,018h,07Eh,000h,000h,000h,000h ;   Hex #31
    Db  000h,000h,07Ch,0C6h,006h,00Ch,018h,030h,060h,0C0h,0C6h,0FEh,000h,000h,000h,000h ;   Hex #32
    Db  000h,000h,07Ch,0C6h,006h,006h,03Ch,006h,006h,006h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #33
    Db  000h,000h,00Ch,01Ch,03Ch,06Ch,0CCh,0FEh,00Ch,00Ch,00Ch,01Eh,000h,000h,000h,000h ;   Hex #34
    Db  000h,000h,0FEh,0C0h,0C0h,0C0h,0FCh,006h,006h,006h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #35
    Db  000h,000h,038h,060h,0C0h,0C0h,0FCh,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #36
    Db  000h,000h,0FEh,0C6h,006h,006h,00Ch,018h,030h,030h,030h,030h,000h,000h,000h,000h ;   Hex #37
    Db  000h,000h,07Ch,0C6h,0C6h,0C6h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #38
    Db  000h,000h,07Ch,0C6h,0C6h,0C6h,07Eh,006h,006h,006h,00Ch,078h,000h,000h,000h,000h ;   Hex #39
    Db  000h,000h,000h,000h,018h,018h,000h,000h,000h,018h,018h,000h,000h,000h,000h,000h ;   Hex #3A
    Db  000h,000h,000h,000h,018h,018h,000h,000h,000h,018h,018h,030h,000h,000h,000h,000h ;   Hex #3B
    Db  000h,000h,000h,006h,00Ch,018h,030h,060h,030h,018h,00Ch,006h,000h,000h,000h,000h ;   Hex #3C
    Db  000h,000h,000h,000h,000h,07Eh,000h,000h,07Eh,000h,000h,000h,000h,000h,000h,000h ;   Hex #3D
    Db  000h,000h,000h,060h,030h,018h,00Ch,006h,00Ch,018h,030h,060h,000h,000h,000h,000h ;   Hex #3E
    Db  000h,000h,07Ch,0C6h,0C6h,00Ch,018h,018h,018h,000h,018h,018h,000h,000h,000h,000h ;   Hex #3F
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0DEh,0DEh,0DEh,0DCh,0C0h,07Ch,000h,000h,000h,000h ;   Hex #40
    Db  000h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #41
    Db  000h,000h,0FCh,066h,066h,066h,07Ch,066h,066h,066h,066h,0FCh,000h,000h,000h,000h ;   Hex #42
    Db  000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0C0h,0C0h,0C2h,066h,03Ch,000h,000h,000h,000h ;   Hex #43
    Db  000h,000h,0F8h,06Ch,066h,066h,066h,066h,066h,066h,06Ch,0F8h,000h,000h,000h,000h ;   Hex #44
    Db  000h,000h,0FEh,066h,062h,068h,078h,068h,060h,062h,066h,0FEh,000h,000h,000h,000h ;   Hex #45
    Db  000h,000h,0FEh,066h,062h,068h,078h,068h,060h,060h,060h,0F0h,000h,000h,000h,000h ;   Hex #46
    Db  000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0DEh,0C6h,0C6h,066h,03Ah,000h,000h,000h,000h ;   Hex #47
    Db  000h,000h,0C6h,0C6h,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #48
    Db  000h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #49
    Db  000h,000h,01Eh,00Ch,00Ch,00Ch,00Ch,00Ch,0CCh,0CCh,0CCh,078h,000h,000h,000h,000h ;   Hex #4A
    Db  000h,000h,0E6h,066h,066h,06Ch,078h,078h,06Ch,066h,066h,0E6h,000h,000h,000h,000h ;   Hex #4B
    Db  000h,000h,0F0h,060h,060h,060h,060h,060h,060h,062h,066h,0FEh,000h,000h,000h,000h ;   Hex #4C
    Db  000h,000h,0C6h,0EEh,0FEh,0FEh,0D6h,0C6h,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #4D
    Db  000h,000h,0C6h,0E6h,0F6h,0FEh,0DEh,0CEh,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #4E
    Db  000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #4F
    Db  000h,000h,0FCh,066h,066h,066h,07Ch,060h,060h,060h,060h,0F0h,000h,000h,000h,000h ;   Hex #50
    Db  000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0D6h,0DEh,07Ch,00Ch,00Eh,000h,000h ;   Hex #51
    Db  000h,000h,0FCh,066h,066h,066h,07Ch,06Ch,066h,066h,066h,0E6h,000h,000h,000h,000h ;   Hex #52
    Db  000h,000h,07Ch,0C6h,0C6h,060h,038h,00Ch,006h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #53
    Db  000h,000h,07Eh,07Eh,05Ah,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #54
    Db  000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #55
    Db  000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,06Ch,038h,010h,000h,000h,000h,000h ;   Hex #56
    Db  000h,000h,0C6h,0C6h,0C6h,0C6h,0D6h,0D6h,0D6h,0FEh,0EEh,06Ch,000h,000h,000h,000h ;   Hex #57
    Db  000h,000h,0C6h,0C6h,06Ch,07Ch,038h,038h,07Ch,06Ch,0C6h,0C6h,000h,000h,000h,000h ;   Hex #58
    Db  000h,000h,066h,066h,066h,066h,03Ch,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #59
    Db  000h,000h,0FEh,0C6h,086h,00Ch,018h,030h,060h,0C2h,0C6h,0FEh,000h,000h,000h,000h ;   Hex #5A
    Db  000h,000h,03Ch,030h,030h,030h,030h,030h,030h,030h,030h,03Ch,000h,000h,000h,000h ;   Hex #5B
    Db  000h,000h,000h,080h,0C0h,0E0h,070h,038h,01Ch,00Eh,006h,002h,000h,000h,000h,000h ;   Hex #5C
    Db  000h,000h,03Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,03Ch,000h,000h,000h,000h ;   Hex #5D
    Db  010h,038h,06Ch,0C6h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #5E
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,0FFh,000h,000h ;   Hex #5F
    Db  000h,030h,018h,00Ch,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #60
    Db  000h,000h,000h,000h,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #61
    Db  000h,000h,0E0h,060h,060h,078h,06Ch,066h,066h,066h,066h,07Ch,000h,000h,000h,000h ;   Hex #62
    Db  000h,000h,000h,000h,000h,07Ch,0C6h,0C0h,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #63
    Db  000h,000h,01Ch,00Ch,00Ch,03Ch,06Ch,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #64
    Db  000h,000h,000h,000h,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #65
    Db  000h,000h,01Ch,036h,032h,030h,078h,030h,030h,030h,030h,078h,000h,000h,000h,000h ;   Hex #66
    Db  000h,000h,000h,000h,000h,076h,0CCh,0CCh,0CCh,0CCh,0CCh,07Ch,00Ch,0CCh,078h,000h ;   Hex #67
    Db  000h,000h,0E0h,060h,060h,06Ch,076h,066h,066h,066h,066h,0E6h,000h,000h,000h,000h ;   Hex #68
    Db  000h,000h,018h,018h,000h,038h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #69
    Db  000h,000h,006h,006h,000h,00Eh,006h,006h,006h,006h,006h,006h,066h,066h,03Ch,000h ;   Hex #6A
    Db  000h,000h,0E0h,060h,060h,066h,06Ch,078h,078h,06Ch,066h,0E6h,000h,000h,000h,000h ;   Hex #6B
    Db  000h,000h,038h,018h,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #6C
    Db  000h,000h,000h,000h,000h,0ECh,0FEh,0D6h,0D6h,0D6h,0D6h,0C6h,000h,000h,000h,000h ;   Hex #6D
    Db  000h,000h,000h,000h,000h,0DCh,066h,066h,066h,066h,066h,066h,000h,000h,000h,000h ;   Hex #6E
    Db  000h,000h,000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #6F
    Db  000h,000h,000h,000h,000h,0DCh,066h,066h,066h,066h,066h,07Ch,060h,060h,0F0h,000h ;   Hex #70
    Db  000h,000h,000h,000h,000h,076h,0CCh,0CCh,0CCh,0CCh,0CCh,07Ch,00Ch,00Ch,01Eh,000h ;   Hex #71
    Db  000h,000h,000h,000h,000h,0DCh,076h,066h,060h,060h,060h,0F0h,000h,000h,000h,000h ;   Hex #72
    Db  000h,000h,000h,000h,000h,07Ch,0C6h,060h,038h,00Ch,0C6h,07Ch,000h,000h,000h,000h ;   Hex #73
    Db  000h,000h,010h,030h,030h,0FCh,030h,030h,030h,030h,036h,01Ch,000h,000h,000h,000h ;   Hex #74
    Db  000h,000h,000h,000h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #75
    Db  000h,000h,000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,06Ch,038h,000h,000h,000h,000h ;   Hex #76
    Db  000h,000h,000h,000h,000h,0C6h,0C6h,0D6h,0D6h,0D6h,0FEh,06Ch,000h,000h,000h,000h ;   Hex #77
    Db  000h,000h,000h,000h,000h,0C6h,06Ch,038h,038h,038h,06Ch,0C6h,000h,000h,000h,000h ;   Hex #78
    Db  000h,000h,000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Eh,006h,00Ch,0F8h,000h ;   Hex #79
    Db  000h,000h,000h,000h,000h,0FEh,0CCh,018h,030h,060h,0C6h,0FEh,000h,000h,000h,000h ;   Hex #7A
    Db  000h,000h,00Eh,018h,018h,018h,070h,018h,018h,018h,018h,00Eh,000h,000h,000h,000h ;   Hex #7B
    Db  000h,000h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,000h,000h,000h,000h ;   Hex #7C
    Db  000h,000h,070h,018h,018h,018h,00Eh,018h,018h,018h,018h,070h,000h,000h,000h,000h ;   Hex #7D
    Db  000h,076h,0DCh,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #7E
    Db  000h,000h,000h,000h,010h,038h,06Ch,0C6h,0C6h,0C6h,0FEh,000h,000h,000h,000h,000h ;   Hex #7F
    Db  000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0C0h,0C0h,0C2h,066h,03Ch,018h,070h,000h,000h ;   Hex #80
    Db  000h,000h,0CCh,000h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #81
    Db  000h,00Ch,018h,030h,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #82
    Db  000h,010h,038h,06Ch,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #83
    Db  038h,06Ch,0C6h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #84
    Db  000h,060h,030h,018h,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #85
    Db  000h,000h,000h,07Fh,0DBh,0DBh,0DBh,07Bh,01Bh,01Bh,01Bh,01Bh,000h,000h,000h,000h ;   Hex #86
    Db  000h,000h,000h,000h,000h,07Ch,0C6h,0C0h,0C0h,0C0h,0C6h,07Ch,018h,070h,000h,000h ;   Hex #87
    Db  000h,010h,038h,06Ch,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #88
    Db  000h,000h,0C6h,000h,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #89
    Db  000h,060h,030h,018h,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #8A
    Db  000h,000h,066h,000h,000h,038h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #8B
    Db  000h,018h,03Ch,066h,000h,038h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #8C
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,0FFh,000h,0FFh,000h ;   Hex #8D
    Db  018h,00Ch,006h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #8E
    Db  000h,07Ch,0C6h,060h,038h,06Ch,0C6h,0C6h,06Ch,038h,00Ch,0C6h,07Ch,000h,000h,000h ;   Hex #8F
    Db  00Ch,018h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h,000h,000h ;   Hex #90
    Db  030h,018h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h,000h,000h ;   Hex #91
    Db  038h,06Ch,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h,000h,000h ;   Hex #92
    Db  000h,010h,038h,06Ch,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #93
    Db  000h,0C6h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h,000h,000h ;   Hex #94
    Db  000h,066h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #95
    Db  000h,030h,078h,0CCh,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #96
    Db  000h,060h,030h,018h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #97
    Db  000h,000h,000h,000h,0C6h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,0C6h,000h,000h,000h,000h ;   Hex #98
    Db  038h,06Ch,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #99
    Db  000h,0C6h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #9A
    Db  000h,018h,018h,07Ch,0C6h,0C0h,0C0h,0C0h,0C6h,07Ch,018h,018h,000h,000h,000h,000h ;   Hex #9B
    Db  000h,038h,06Ch,064h,060h,0F0h,060h,060h,060h,060h,0E6h,0FCh,000h,000h,000h,000h ;   Hex #9C
    Db  030h,018h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #9D
    Db  038h,06Ch,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #9E
    Db  000h,00Eh,01Bh,018h,018h,018h,07Eh,018h,018h,018h,0D8h,070h,000h,000h,000h,000h ;   Hex #9F
    Db  000h,018h,018h,018h,018h,018h,000h,000h,018h,018h,018h,018h,018h,000h,000h,000h ;   Hex #A0
    Db  000h,00Ch,018h,030h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #A1
    Db  000h,018h,030h,060h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #A2
    Db  000h,018h,030h,060h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #A3
    Db  000h,0C6h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #A4
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,00Ch,078h,000h,000h ;   Hex #A5
    Db  000h,07Ch,006h,03Ch,006h,006h,07Ch,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #A6
    Db  000h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #A7
    Db  03Ch,066h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #A8
    Db  000h,000h,000h,000h,000h,000h,0FEh,0C0h,0C0h,0C0h,0C0h,000h,000h,000h,000h,000h ;   Hex #A9
    Db  000h,000h,000h,000h,000h,000h,0FEh,006h,006h,006h,006h,000h,000h,000h,000h,000h ;   Hex #AA
    Db  000h,060h,0E0h,062h,066h,06Ch,018h,030h,060h,0DCh,086h,00Ch,018h,03Eh,000h,000h ;   Hex #AB
    Db  000h,060h,0E0h,062h,066h,06Ch,018h,030h,066h,0CEh,09Ah,03Fh,006h,006h,000h,000h ;   Hex #AC
    Db  000h,0E0h,030h,0E2h,036h,0ECh,018h,030h,066h,0CEh,09Ah,03Fh,006h,006h,000h,000h ;   Hex #AD
    Db  000h,000h,000h,000h,000h,036h,06Ch,0D8h,06Ch,036h,000h,000h,000h,000h,000h,000h ;   Hex #AE
    Db  000h,000h,000h,000h,000h,0D8h,06Ch,036h,06Ch,0D8h,000h,000h,000h,000h,000h,000h ;   Hex #AF
    Db  011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h ;   Hex #B0
    Db  055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh ;   Hex #B1
    Db  0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h ;   Hex #B2
    Db  018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B3
    Db  018h,018h,018h,018h,018h,018h,018h,0F8h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B4
    Db  018h,018h,018h,018h,018h,0F8h,018h,0F8h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B5
    Db  036h,036h,036h,036h,036h,036h,036h,0F6h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #B6
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #B7
    Db  000h,000h,000h,000h,000h,0F8h,018h,0F8h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B8
    Db  036h,036h,036h,036h,036h,0F6h,006h,0F6h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #B9
    Db  036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #BA
    Db  000h,000h,000h,000h,000h,0FEh,006h,0F6h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #BB
    Db  036h,036h,036h,036h,036h,0F6h,006h,0FEh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #BC
    Db  036h,036h,036h,036h,036h,036h,036h,0FEh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #BD
    Db  018h,018h,018h,018h,018h,0F8h,018h,0F8h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #BE
    Db  000h,000h,000h,000h,000h,000h,000h,0F8h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #BF
    Db  018h,018h,018h,018h,018h,018h,018h,01Fh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #C0
    Db  018h,018h,018h,018h,018h,018h,018h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #C1
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #C2
    Db  018h,018h,018h,018h,018h,018h,018h,01Fh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #C3
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #C4
    Db  018h,018h,018h,018h,018h,018h,018h,0FFh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #C5
    Db  018h,018h,018h,018h,018h,01Fh,018h,01Fh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #C6
    Db  036h,036h,036h,036h,036h,036h,036h,037h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #C7
    Db  036h,036h,036h,036h,036h,037h,030h,03Fh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #C8
    Db  000h,000h,000h,000h,000h,03Fh,030h,037h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #C9
    Db  036h,036h,036h,036h,036h,0F7h,000h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #CA
    Db  000h,000h,000h,000h,000h,0FFh,000h,0F7h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #CB
    Db  036h,036h,036h,036h,036h,037h,030h,037h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #CC
    Db  000h,000h,000h,000h,000h,0FFh,000h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #CD
    Db  036h,036h,036h,036h,036h,0F7h,000h,0F7h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #CE
    Db  018h,018h,018h,018h,018h,0FFh,000h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #CF
    Db  036h,036h,036h,036h,036h,036h,036h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #D0
    Db  000h,000h,000h,000h,000h,0FFh,000h,0FFh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #D1
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #D2
    Db  036h,036h,036h,036h,036h,036h,036h,03Fh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #D3
    Db  018h,018h,018h,018h,018h,01Fh,018h,01Fh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #D4
    Db  000h,000h,000h,000h,000h,01Fh,018h,01Fh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #D5
    Db  000h,000h,000h,000h,000h,000h,000h,03Fh,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #D6
    Db  036h,036h,036h,036h,036h,036h,036h,0FFh,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #D7
    Db  018h,018h,018h,018h,018h,0FFh,018h,0FFh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #D8
    Db  018h,018h,018h,018h,018h,018h,018h,0F8h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #D9
    Db  000h,000h,000h,000h,000h,000h,000h,01Fh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #DA
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DB
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DC
    Db  0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h ;   Hex #DD
    Db  00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh ;   Hex #DE
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #DF
    Db  000h,000h,000h,000h,000h,076h,0DCh,0D8h,0D8h,0D8h,0DCh,076h,000h,000h,000h,000h ;   Hex #E0
    Db  000h,000h,078h,0CCh,0CCh,0CCh,0D8h,0CCh,0C6h,0C6h,0C6h,0CCh,000h,000h,000h,000h ;   Hex #E1
    Db  000h,000h,0FEh,0C6h,0C6h,0C0h,0C0h,0C0h,0C0h,0C0h,0C0h,0C0h,000h,000h,000h,000h ;   Hex #E2
    Db  000h,000h,000h,000h,000h,0FEh,06Ch,06Ch,06Ch,06Ch,06Ch,06Ch,000h,000h,000h,000h ;   Hex #E3
    Db  000h,000h,0FEh,0C6h,060h,030h,018h,018h,030h,060h,0C6h,0FEh,000h,000h,000h,000h ;   Hex #E4
    Db  000h,000h,000h,000h,000h,07Eh,0D8h,0D8h,0D8h,0D8h,0D8h,070h,000h,000h,000h,000h ;   Hex #E5
    Db  000h,000h,000h,000h,000h,066h,066h,066h,066h,066h,066h,07Ch,060h,060h,0C0h,000h ;   Hex #E6
    Db  000h,000h,000h,000h,076h,0DCh,018h,018h,018h,018h,018h,018h,000h,000h,000h,000h ;   Hex #E7
    Db  000h,000h,07Eh,018h,03Ch,066h,066h,066h,066h,03Ch,018h,07Eh,000h,000h,000h,000h ;   Hex #E8
    Db  000h,000h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,06Ch,038h,000h,000h,000h,000h ;   Hex #E9
    Db  000h,000h,038h,06Ch,0C6h,0C6h,0C6h,06Ch,06Ch,06Ch,06Ch,0EEh,000h,000h,000h,000h ;   Hex #EA
    Db  000h,000h,01Eh,030h,018h,00Ch,03Eh,066h,066h,066h,066h,03Ch,000h,000h,000h,000h ;   Hex #EB
    Db  000h,000h,000h,000h,000h,07Eh,0DBh,0DBh,0DBh,07Eh,000h,000h,000h,000h,000h,000h ;   Hex #EC
    Db  000h,000h,000h,003h,006h,07Eh,0DBh,0DBh,0F3h,07Eh,060h,0C0h,000h,000h,000h,000h ;   Hex #ED
    Db  000h,000h,01Ch,030h,060h,060h,07Ch,060h,060h,060h,030h,01Ch,000h,000h,000h,000h ;   Hex #EE
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #EF
    Db  000h,000h,000h,000h,0FEh,000h,000h,0FEh,000h,000h,0FEh,000h,000h,000h,000h,000h ;   Hex #F0
    Db  000h,000h,000h,000h,018h,018h,07Eh,018h,018h,000h,000h,07Eh,000h,000h,000h,000h ;   Hex #F1
    Db  000h,000h,000h,030h,018h,00Ch,006h,00Ch,018h,030h,000h,07Eh,000h,000h,000h,000h ;   Hex #F2
    Db  000h,000h,000h,00Ch,018h,030h,060h,030h,018h,00Ch,000h,07Eh,000h,000h,000h,000h ;   Hex #F3
    Db  000h,000h,00Eh,01Bh,01Bh,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #F4
    Db  018h,018h,018h,018h,018h,018h,018h,018h,018h,0D8h,0D8h,0D8h,070h,000h,000h,000h ;   Hex #F5
    Db  000h,000h,000h,000h,000h,018h,000h,07Eh,000h,018h,000h,000h,000h,000h,000h,000h ;   Hex #F6
    Db  000h,000h,000h,000h,000h,076h,0DCh,000h,076h,0DCh,000h,000h,000h,000h,000h,000h ;   Hex #F7
    Db  000h,038h,06Ch,06Ch,038h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #F8
    Db  000h,000h,000h,000h,000h,000h,000h,018h,018h,000h,000h,000h,000h,000h,000h,000h ;   Hex #F9
    Db  000h,000h,000h,000h,000h,000h,000h,018h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FA
    Db  000h,00Fh,00Ch,00Ch,00Ch,00Ch,00Ch,0ECh,06Ch,06Ch,03Ch,01Ch,000h,000h,000h,000h ;   Hex #FB
    Db  000h,06Ch,036h,036h,036h,036h,036h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FC
    Db  000h,03Ch,066h,00Ch,018h,032h,07Eh,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FD
    Db  000h,000h,000h,000h,07Eh,07Eh,07Eh,07Eh,07Eh,07Eh,07Eh,000h,000h,000h,000h,000h ;   Hex #FE
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FF


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\ega2\860-8x16.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
;***************************************************
;  CHARACTER FONT FILE
;  Source Assembler File
;
;        CODE PAGE: 860 
;  FONT RESOLUTION: 8 x 16 
;
;     DATE CREATED:05-28-1987
;
;
; Output file from: MULTIFON, Version 1A
;
;***************************************************
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #0
    Db  000h,000h,07Eh,081h,0A5h,081h,081h,0BDh,099h,081h,081h,07Eh,000h,000h,000h,000h ;   Hex #1
    Db  000h,000h,07Eh,0FFh,0DBh,0FFh,0FFh,0C3h,0E7h,0FFh,0FFh,07Eh,000h,000h,000h,000h ;   Hex #2
    Db  000h,000h,000h,000h,06Ch,0FEh,0FEh,0FEh,0FEh,07Ch,038h,010h,000h,000h,000h,000h ;   Hex #3
    Db  000h,000h,000h,000h,010h,038h,07Ch,0FEh,07Ch,038h,010h,000h,000h,000h,000h,000h ;   Hex #4
    Db  000h,000h,000h,018h,03Ch,03Ch,0E7h,0E7h,0E7h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #5
    Db  000h,000h,000h,018h,03Ch,07Eh,0FFh,0FFh,07Eh,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #6
    Db  000h,000h,000h,000h,000h,000h,018h,03Ch,03Ch,018h,000h,000h,000h,000h,000h,000h ;   Hex #7
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0E7h,0C3h,0C3h,0E7h,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #8
    Db  000h,000h,000h,000h,000h,03Ch,066h,042h,042h,066h,03Ch,000h,000h,000h,000h,000h ;   Hex #9
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0C3h,099h,0BDh,0BDh,099h,0C3h,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #A
    Db  000h,000h,01Eh,00Eh,01Ah,032h,078h,0CCh,0CCh,0CCh,0CCh,078h,000h,000h,000h,000h ;   Hex #B
    Db  000h,000h,03Ch,066h,066h,066h,066h,03Ch,018h,07Eh,018h,018h,000h,000h,000h,000h ;   Hex #C
    Db  000h,000h,03Fh,033h,03Fh,030h,030h,030h,030h,070h,0F0h,0E0h,000h,000h,000h,000h ;   Hex #D
    Db  000h,000h,07Fh,063h,07Fh,063h,063h,063h,063h,067h,0E7h,0E6h,0C0h,000h,000h,000h ;   Hex #E
    Db  000h,000h,000h,018h,018h,0DBh,03Ch,0E7h,03Ch,0DBh,018h,018h,000h,000h,000h,000h ;   Hex #F
    Db  000h,080h,0C0h,0E0h,0F0h,0F8h,0FEh,0F8h,0F0h,0E0h,0C0h,080h,000h,000h,000h,000h ;   Hex #10
    Db  000h,002h,006h,00Eh,01Eh,03Eh,0FEh,03Eh,01Eh,00Eh,006h,002h,000h,000h,000h,000h ;   Hex #11
    Db  000h,000h,018h,03Ch,07Eh,018h,018h,018h,07Eh,03Ch,018h,000h,000h,000h,000h,000h ;   Hex #12
    Db  000h,000h,066h,066h,066h,066h,066h,066h,066h,000h,066h,066h,000h,000h,000h,000h ;   Hex #13
    Db  000h,000h,07Fh,0DBh,0DBh,0DBh,07Bh,01Bh,01Bh,01Bh,01Bh,01Bh,000h,000h,000h,000h ;   Hex #14
    Db  000h,07Ch,0C6h,060h,038h,06Ch,0C6h,0C6h,06Ch,038h,00Ch,0C6h,07Ch,000h,000h,000h ;   Hex #15
    Db  000h,000h,000h,000h,000h,000h,000h,000h,0FEh,0FEh,0FEh,0FEh,000h,000h,000h,000h ;   Hex #16
    Db  000h,000h,018h,03Ch,07Eh,018h,018h,018h,07Eh,03Ch,018h,07Eh,000h,000h,000h,000h ;   Hex #17
    Db  000h,000h,018h,03Ch,07Eh,018h,018h,018h,018h,018h,018h,018h,000h,000h,000h,000h ;   Hex #18
    Db  000h,000h,018h,018h,018h,018h,018h,018h,018h,07Eh,03Ch,018h,000h,000h,000h,000h ;   Hex #19
    Db  000h,000h,000h,000h,000h,018h,00Ch,0FEh,00Ch,018h,000h,000h,000h,000h,000h,000h ;   Hex #1A
    Db  000h,000h,000h,000h,000h,030h,060h,0FEh,060h,030h,000h,000h,000h,000h,000h,000h ;   Hex #1B
    Db  000h,000h,000h,000h,000h,000h,0C0h,0C0h,0C0h,0FEh,000h,000h,000h,000h,000h,000h ;   Hex #1C
    Db  000h,000h,000h,000h,000h,028h,06Ch,0FEh,06Ch,028h,000h,000h,000h,000h,000h,000h ;   Hex #1D
    Db  000h,000h,000h,000h,010h,038h,038h,07Ch,07Ch,0FEh,0FEh,000h,000h,000h,000h,000h ;   Hex #1E
    Db  000h,000h,000h,000h,0FEh,0FEh,07Ch,07Ch,038h,038h,010h,000h,000h,000h,000h,000h ;   Hex #1F
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #20
    Db  000h,000h,018h,03Ch,03Ch,03Ch,018h,018h,018h,000h,018h,018h,000h,000h,000h,000h ;   Hex #21
    Db  000h,066h,066h,066h,024h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #22
    Db  000h,000h,000h,06Ch,06Ch,0FEh,06Ch,06Ch,06Ch,0FEh,06Ch,06Ch,000h,000h,000h,000h ;   Hex #23
    Db  018h,018h,07Ch,0C6h,0C2h,0C0h,07Ch,006h,006h,086h,0C6h,07Ch,018h,018h,000h,000h ;   Hex #24
    Db  000h,000h,000h,000h,0C2h,0C6h,00Ch,018h,030h,060h,0C6h,086h,000h,000h,000h,000h ;   Hex #25
    Db  000h,000h,038h,06Ch,06Ch,038h,076h,0DCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #26
    Db  000h,030h,030h,030h,060h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #27
    Db  000h,000h,00Ch,018h,030h,030h,030h,030h,030h,030h,018h,00Ch,000h,000h,000h,000h ;   Hex #28
    Db  000h,000h,030h,018h,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,018h,030h,000h,000h,000h,000h ;   Hex #29
    Db  000h,000h,000h,000h,000h,066h,03Ch,0FFh,03Ch,066h,000h,000h,000h,000h,000h,000h ;   Hex #2A
    Db  000h,000h,000h,000h,000h,018h,018h,07Eh,018h,018h,000h,000h,000h,000h,000h,000h ;   Hex #2B
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,018h,018h,030h,000h,000h,000h ;   Hex #2C
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #2D
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,018h,000h,000h,000h,000h ;   Hex #2E
    Db  000h,000h,000h,000h,002h,006h,00Ch,018h,030h,060h,0C0h,080h,000h,000h,000h,000h ;   Hex #2F
    Db  000h,000h,038h,06Ch,0C6h,0C6h,0D6h,0D6h,0C6h,0C6h,06Ch,038h,000h,000h,000h,000h ;   Hex #30
    Db  000h,000h,018h,038h,078h,018h,018h,018h,018h,018h,018h,07Eh,000h,000h,000h,000h ;   Hex #31
    Db  000h,000h,07Ch,0C6h,006h,00Ch,018h,030h,060h,0C0h,0C6h,0FEh,000h,000h,000h,000h ;   Hex #32
    Db  000h,000h,07Ch,0C6h,006h,006h,03Ch,006h,006h,006h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #33
    Db  000h,000h,00Ch,01Ch,03Ch,06Ch,0CCh,0FEh,00Ch,00Ch,00Ch,01Eh,000h,000h,000h,000h ;   Hex #34
    Db  000h,000h,0FEh,0C0h,0C0h,0C0h,0FCh,006h,006h,006h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #35
    Db  000h,000h,038h,060h,0C0h,0C0h,0FCh,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #36
    Db  000h,000h,0FEh,0C6h,006h,006h,00Ch,018h,030h,030h,030h,030h,000h,000h,000h,000h ;   Hex #37
    Db  000h,000h,07Ch,0C6h,0C6h,0C6h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #38
    Db  000h,000h,07Ch,0C6h,0C6h,0C6h,07Eh,006h,006h,006h,00Ch,078h,000h,000h,000h,000h ;   Hex #39
    Db  000h,000h,000h,000h,018h,018h,000h,000h,000h,018h,018h,000h,000h,000h,000h,000h ;   Hex #3A
    Db  000h,000h,000h,000h,018h,018h,000h,000h,000h,018h,018h,030h,000h,000h,000h,000h ;   Hex #3B
    Db  000h,000h,000h,006h,00Ch,018h,030h,060h,030h,018h,00Ch,006h,000h,000h,000h,000h ;   Hex #3C
    Db  000h,000h,000h,000h,000h,07Eh,000h,000h,07Eh,000h,000h,000h,000h,000h,000h,000h ;   Hex #3D
    Db  000h,000h,000h,060h,030h,018h,00Ch,006h,00Ch,018h,030h,060h,000h,000h,000h,000h ;   Hex #3E
    Db  000h,000h,07Ch,0C6h,0C6h,00Ch,018h,018h,018h,000h,018h,018h,000h,000h,000h,000h ;   Hex #3F
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0DEh,0DEh,0DEh,0DCh,0C0h,07Ch,000h,000h,000h,000h ;   Hex #40
    Db  000h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #41
    Db  000h,000h,0FCh,066h,066h,066h,07Ch,066h,066h,066h,066h,0FCh,000h,000h,000h,000h ;   Hex #42
    Db  000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0C0h,0C0h,0C2h,066h,03Ch,000h,000h,000h,000h ;   Hex #43
    Db  000h,000h,0F8h,06Ch,066h,066h,066h,066h,066h,066h,06Ch,0F8h,000h,000h,000h,000h ;   Hex #44
    Db  000h,000h,0FEh,066h,062h,068h,078h,068h,060h,062h,066h,0FEh,000h,000h,000h,000h ;   Hex #45
    Db  000h,000h,0FEh,066h,062h,068h,078h,068h,060h,060h,060h,0F0h,000h,000h,000h,000h ;   Hex #46
    Db  000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0DEh,0C6h,0C6h,066h,03Ah,000h,000h,000h,000h ;   Hex #47
    Db  000h,000h,0C6h,0C6h,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #48
    Db  000h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #49
    Db  000h,000h,01Eh,00Ch,00Ch,00Ch,00Ch,00Ch,0CCh,0CCh,0CCh,078h,000h,000h,000h,000h ;   Hex #4A
    Db  000h,000h,0E6h,066h,066h,06Ch,078h,078h,06Ch,066h,066h,0E6h,000h,000h,000h,000h ;   Hex #4B
    Db  000h,000h,0F0h,060h,060h,060h,060h,060h,060h,062h,066h,0FEh,000h,000h,000h,000h ;   Hex #4C
    Db  000h,000h,0C6h,0EEh,0FEh,0FEh,0D6h,0C6h,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #4D
    Db  000h,000h,0C6h,0E6h,0F6h,0FEh,0DEh,0CEh,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #4E
    Db  000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #4F
    Db  000h,000h,0FCh,066h,066h,066h,07Ch,060h,060h,060h,060h,0F0h,000h,000h,000h,000h ;   Hex #50
    Db  000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0D6h,0DEh,07Ch,00Ch,00Eh,000h,000h ;   Hex #51
    Db  000h,000h,0FCh,066h,066h,066h,07Ch,06Ch,066h,066h,066h,0E6h,000h,000h,000h,000h ;   Hex #52
    Db  000h,000h,07Ch,0C6h,0C6h,060h,038h,00Ch,006h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #53
    Db  000h,000h,07Eh,07Eh,05Ah,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #54
    Db  000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #55
    Db  000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,06Ch,038h,010h,000h,000h,000h,000h ;   Hex #56
    Db  000h,000h,0C6h,0C6h,0C6h,0C6h,0D6h,0D6h,0D6h,0FEh,0EEh,06Ch,000h,000h,000h,000h ;   Hex #57
    Db  000h,000h,0C6h,0C6h,06Ch,07Ch,038h,038h,07Ch,06Ch,0C6h,0C6h,000h,000h,000h,000h ;   Hex #58
    Db  000h,000h,066h,066h,066h,066h,03Ch,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #59
    Db  000h,000h,0FEh,0C6h,086h,00Ch,018h,030h,060h,0C2h,0C6h,0FEh,000h,000h,000h,000h ;   Hex #5A
    Db  000h,000h,03Ch,030h,030h,030h,030h,030h,030h,030h,030h,03Ch,000h,000h,000h,000h ;   Hex #5B
    Db  000h,000h,000h,080h,0C0h,0E0h,070h,038h,01Ch,00Eh,006h,002h,000h,000h,000h,000h ;   Hex #5C
    Db  000h,000h,03Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,03Ch,000h,000h,000h,000h ;   Hex #5D
    Db  010h,038h,06Ch,0C6h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #5E
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,0FFh,000h,000h ;   Hex #5F
    Db  000h,030h,018h,00Ch,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #60
    Db  000h,000h,000h,000h,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #61
    Db  000h,000h,0E0h,060h,060h,078h,06Ch,066h,066h,066h,066h,07Ch,000h,000h,000h,000h ;   Hex #62
    Db  000h,000h,000h,000h,000h,07Ch,0C6h,0C0h,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #63
    Db  000h,000h,01Ch,00Ch,00Ch,03Ch,06Ch,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #64
    Db  000h,000h,000h,000h,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #65
    Db  000h,000h,01Ch,036h,032h,030h,078h,030h,030h,030h,030h,078h,000h,000h,000h,000h ;   Hex #66
    Db  000h,000h,000h,000h,000h,076h,0CCh,0CCh,0CCh,0CCh,0CCh,07Ch,00Ch,0CCh,078h,000h ;   Hex #67
    Db  000h,000h,0E0h,060h,060h,06Ch,076h,066h,066h,066h,066h,0E6h,000h,000h,000h,000h ;   Hex #68
    Db  000h,000h,018h,018h,000h,038h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #69
    Db  000h,000h,006h,006h,000h,00Eh,006h,006h,006h,006h,006h,006h,066h,066h,03Ch,000h ;   Hex #6A
    Db  000h,000h,0E0h,060h,060h,066h,06Ch,078h,078h,06Ch,066h,0E6h,000h,000h,000h,000h ;   Hex #6B
    Db  000h,000h,038h,018h,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #6C
    Db  000h,000h,000h,000h,000h,0ECh,0FEh,0D6h,0D6h,0D6h,0D6h,0C6h,000h,000h,000h,000h ;   Hex #6D
    Db  000h,000h,000h,000h,000h,0DCh,066h,066h,066h,066h,066h,066h,000h,000h,000h,000h ;   Hex #6E
    Db  000h,000h,000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #6F
    Db  000h,000h,000h,000h,000h,0DCh,066h,066h,066h,066h,066h,07Ch,060h,060h,0F0h,000h ;   Hex #70
    Db  000h,000h,000h,000h,000h,076h,0CCh,0CCh,0CCh,0CCh,0CCh,07Ch,00Ch,00Ch,01Eh,000h ;   Hex #71
    Db  000h,000h,000h,000h,000h,0DCh,076h,066h,060h,060h,060h,0F0h,000h,000h,000h,000h ;   Hex #72
    Db  000h,000h,000h,000h,000h,07Ch,0C6h,060h,038h,00Ch,0C6h,07Ch,000h,000h,000h,000h ;   Hex #73
    Db  000h,000h,010h,030h,030h,0FCh,030h,030h,030h,030h,036h,01Ch,000h,000h,000h,000h ;   Hex #74
    Db  000h,000h,000h,000h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #75
    Db  000h,000h,000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,06Ch,038h,000h,000h,000h,000h ;   Hex #76
    Db  000h,000h,000h,000h,000h,0C6h,0C6h,0D6h,0D6h,0D6h,0FEh,06Ch,000h,000h,000h,000h ;   Hex #77
    Db  000h,000h,000h,000h,000h,0C6h,06Ch,038h,038h,038h,06Ch,0C6h,000h,000h,000h,000h ;   Hex #78
    Db  000h,000h,000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Eh,006h,00Ch,0F8h,000h ;   Hex #79
    Db  000h,000h,000h,000h,000h,0FEh,0CCh,018h,030h,060h,0C6h,0FEh,000h,000h,000h,000h ;   Hex #7A
    Db  000h,000h,00Eh,018h,018h,018h,070h,018h,018h,018h,018h,00Eh,000h,000h,000h,000h ;   Hex #7B
    Db  000h,000h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,000h,000h,000h,000h ;   Hex #7C
    Db  000h,000h,070h,018h,018h,018h,00Eh,018h,018h,018h,018h,070h,000h,000h,000h,000h ;   Hex #7D
    Db  000h,076h,0DCh,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #7E
    Db  000h,000h,000h,000h,010h,038h,06Ch,0C6h,0C6h,0C6h,0FEh,000h,000h,000h,000h,000h ;   Hex #7F
    Db  000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0C0h,0C0h,0C2h,066h,03Ch,018h,070h,000h,000h ;   Hex #80
    Db  000h,000h,0CCh,000h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #81
    Db  000h,00Ch,018h,030h,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #82
    Db  000h,010h,038h,06Ch,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #83
    Db  000h,000h,076h,0DCh,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #84
    Db  000h,060h,030h,018h,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #85
    Db  060h,0C0h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #86
    Db  000h,000h,000h,000h,000h,07Ch,0C6h,0C0h,0C0h,0C0h,0C6h,07Ch,018h,070h,000h,000h ;   Hex #87
    Db  000h,010h,038h,06Ch,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #88
    Db  038h,06Ch,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h,000h,000h ;   Hex #89
    Db  000h,060h,030h,018h,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #8A
    Db  00Ch,018h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #8B
    Db  038h,06Ch,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #8C
    Db  000h,060h,030h,018h,000h,038h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #8D
    Db  076h,0DCh,000h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #8E
    Db  038h,06Ch,0C6h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #8F
    Db  00Ch,018h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h,000h,000h ;   Hex #90
    Db  00Ch,006h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #91
    Db  030h,018h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h,000h,000h ;   Hex #92
    Db  000h,010h,038h,06Ch,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #93
    Db  000h,000h,076h,0DCh,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #94
    Db  000h,060h,030h,018h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #95
    Db  018h,030h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #96
    Db  000h,060h,030h,018h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #97
    Db  030h,018h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #98
    Db  076h,0DCh,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #99
    Db  000h,0C6h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #9A
    Db  000h,018h,018h,07Ch,0C6h,0C0h,0C0h,0C0h,0C6h,07Ch,018h,018h,000h,000h,000h,000h ;   Hex #9B
    Db  000h,038h,06Ch,064h,060h,0F0h,060h,060h,060h,060h,0E6h,0FCh,000h,000h,000h,000h ;   Hex #9C
    Db  030h,018h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #9D
    Db  000h,0F8h,0CCh,0CCh,0F8h,0C4h,0CCh,0DEh,0CCh,0CCh,0CCh,0C6h,000h,000h,000h,000h ;   Hex #9E
    Db  018h,030h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #9F
    Db  000h,018h,030h,060h,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #A0
    Db  000h,00Ch,018h,030h,000h,038h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #A1
    Db  000h,018h,030h,060h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #A2
    Db  000h,018h,030h,060h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #A3
    Db  000h,000h,076h,0DCh,000h,0DCh,066h,066h,066h,066h,066h,066h,000h,000h,000h,000h ;   Hex #A4
    Db  076h,0DCh,000h,0C6h,0E6h,0F6h,0FEh,0DEh,0CEh,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #A5
    Db  000h,000h,03Ch,06Ch,06Ch,03Eh,000h,07Eh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #A6
    Db  000h,000h,038h,06Ch,06Ch,038h,000h,07Ch,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #A7
    Db  000h,000h,030h,030h,000h,030h,030h,060h,0C0h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #A8
    Db  030h,018h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #A9
    Db  000h,000h,000h,000h,000h,000h,0FEh,006h,006h,006h,006h,000h,000h,000h,000h,000h ;   Hex #AA
    Db  000h,060h,0E0h,062h,066h,06Ch,018h,030h,060h,0DCh,086h,00Ch,018h,03Eh,000h,000h ;   Hex #AB
    Db  000h,060h,0E0h,062h,066h,06Ch,018h,030h,066h,0CEh,09Ah,03Fh,006h,006h,000h,000h ;   Hex #AC
    Db  000h,000h,018h,018h,000h,018h,018h,018h,03Ch,03Ch,03Ch,018h,000h,000h,000h,000h ;   Hex #AD
    Db  000h,000h,000h,000h,000h,036h,06Ch,0D8h,06Ch,036h,000h,000h,000h,000h,000h,000h ;   Hex #AE
    Db  000h,000h,000h,000h,000h,0D8h,06Ch,036h,06Ch,0D8h,000h,000h,000h,000h,000h,000h ;   Hex #AF
    Db  011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h ;   Hex #B0
    Db  055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh ;   Hex #B1
    Db  0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h ;   Hex #B2
    Db  018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B3
    Db  018h,018h,018h,018h,018h,018h,018h,0F8h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B4
    Db  018h,018h,018h,018h,018h,0F8h,018h,0F8h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B5
    Db  036h,036h,036h,036h,036h,036h,036h,0F6h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #B6
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #B7
    Db  000h,000h,000h,000h,000h,0F8h,018h,0F8h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B8
    Db  036h,036h,036h,036h,036h,0F6h,006h,0F6h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #B9
    Db  036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #BA
    Db  000h,000h,000h,000h,000h,0FEh,006h,0F6h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #BB
    Db  036h,036h,036h,036h,036h,0F6h,006h,0FEh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #BC
    Db  036h,036h,036h,036h,036h,036h,036h,0FEh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #BD
    Db  018h,018h,018h,018h,018h,0F8h,018h,0F8h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #BE
    Db  000h,000h,000h,000h,000h,000h,000h,0F8h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #BF
    Db  018h,018h,018h,018h,018h,018h,018h,01Fh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #C0
    Db  018h,018h,018h,018h,018h,018h,018h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #C1
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #C2
    Db  018h,018h,018h,018h,018h,018h,018h,01Fh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #C3
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #C4
    Db  018h,018h,018h,018h,018h,018h,018h,0FFh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #C5
    Db  018h,018h,018h,018h,018h,01Fh,018h,01Fh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #C6
    Db  036h,036h,036h,036h,036h,036h,036h,037h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #C7
    Db  036h,036h,036h,036h,036h,037h,030h,03Fh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #C8
    Db  000h,000h,000h,000h,000h,03Fh,030h,037h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #C9
    Db  036h,036h,036h,036h,036h,0F7h,000h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #CA
    Db  000h,000h,000h,000h,000h,0FFh,000h,0F7h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #CB
    Db  036h,036h,036h,036h,036h,037h,030h,037h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #CC
    Db  000h,000h,000h,000h,000h,0FFh,000h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #CD
    Db  036h,036h,036h,036h,036h,0F7h,000h,0F7h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #CE
    Db  018h,018h,018h,018h,018h,0FFh,000h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #CF
    Db  036h,036h,036h,036h,036h,036h,036h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #D0
    Db  000h,000h,000h,000h,000h,0FFh,000h,0FFh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #D1
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #D2
    Db  036h,036h,036h,036h,036h,036h,036h,03Fh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #D3
    Db  018h,018h,018h,018h,018h,01Fh,018h,01Fh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #D4
    Db  000h,000h,000h,000h,000h,01Fh,018h,01Fh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #D5
    Db  000h,000h,000h,000h,000h,000h,000h,03Fh,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #D6
    Db  036h,036h,036h,036h,036h,036h,036h,0FFh,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #D7
    Db  018h,018h,018h,018h,018h,0FFh,018h,0FFh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #D8
    Db  018h,018h,018h,018h,018h,018h,018h,0F8h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #D9
    Db  000h,000h,000h,000h,000h,000h,000h,01Fh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #DA
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DB
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DC
    Db  0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h ;   Hex #DD
    Db  00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh ;   Hex #DE
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #DF
    Db  000h,000h,000h,000h,000h,076h,0DCh,0D8h,0D8h,0D8h,0DCh,076h,000h,000h,000h,000h ;   Hex #E0
    Db  000h,000h,078h,0CCh,0CCh,0CCh,0D8h,0CCh,0C6h,0C6h,0C6h,0CCh,000h,000h,000h,000h ;   Hex #E1
    Db  000h,000h,0FEh,0C6h,0C6h,0C0h,0C0h,0C0h,0C0h,0C0h,0C0h,0C0h,000h,000h,000h,000h ;   Hex #E2
    Db  000h,000h,000h,000h,000h,0FEh,06Ch,06Ch,06Ch,06Ch,06Ch,06Ch,000h,000h,000h,000h ;   Hex #E3
    Db  000h,000h,0FEh,0C6h,060h,030h,018h,018h,030h,060h,0C6h,0FEh,000h,000h,000h,000h ;   Hex #E4
    Db  000h,000h,000h,000h,000h,07Eh,0D8h,0D8h,0D8h,0D8h,0D8h,070h,000h,000h,000h,000h ;   Hex #E5
    Db  000h,000h,000h,000h,000h,066h,066h,066h,066h,066h,066h,07Ch,060h,060h,0C0h,000h ;   Hex #E6
    Db  000h,000h,000h,000h,076h,0DCh,018h,018h,018h,018h,018h,018h,000h,000h,000h,000h ;   Hex #E7
    Db  000h,000h,07Eh,018h,03Ch,066h,066h,066h,066h,03Ch,018h,07Eh,000h,000h,000h,000h ;   Hex #E8
    Db  000h,000h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,06Ch,038h,000h,000h,000h,000h ;   Hex #E9
    Db  000h,000h,038h,06Ch,0C6h,0C6h,0C6h,06Ch,06Ch,06Ch,06Ch,0EEh,000h,000h,000h,000h ;   Hex #EA
    Db  000h,000h,01Eh,030h,018h,00Ch,03Eh,066h,066h,066h,066h,03Ch,000h,000h,000h,000h ;   Hex #EB
    Db  000h,000h,000h,000h,000h,07Eh,0DBh,0DBh,0DBh,07Eh,000h,000h,000h,000h,000h,000h ;   Hex #EC
    Db  000h,000h,000h,003h,006h,07Eh,0DBh,0DBh,0F3h,07Eh,060h,0C0h,000h,000h,000h,000h ;   Hex #ED
    Db  000h,000h,01Ch,030h,060h,060h,07Ch,060h,060h,060h,030h,01Ch,000h,000h,000h,000h ;   Hex #EE
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #EF
    Db  000h,000h,000h,000h,0FEh,000h,000h,0FEh,000h,000h,0FEh,000h,000h,000h,000h,000h ;   Hex #F0
    Db  000h,000h,000h,000h,018h,018h,07Eh,018h,018h,000h,000h,07Eh,000h,000h,000h,000h ;   Hex #F1
    Db  000h,000h,000h,030h,018h,00Ch,006h,00Ch,018h,030h,000h,07Eh,000h,000h,000h,000h ;   Hex #F2
    Db  000h,000h,000h,00Ch,018h,030h,060h,030h,018h,00Ch,000h,07Eh,000h,000h,000h,000h ;   Hex #F3
    Db  000h,000h,00Eh,01Bh,01Bh,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #F4
    Db  018h,018h,018h,018h,018h,018h,018h,018h,018h,0D8h,0D8h,0D8h,070h,000h,000h,000h ;   Hex #F5
    Db  000h,000h,000h,000h,000h,018h,000h,07Eh,000h,018h,000h,000h,000h,000h,000h,000h ;   Hex #F6
    Db  000h,000h,000h,000h,000h,076h,0DCh,000h,076h,0DCh,000h,000h,000h,000h,000h,000h ;   Hex #F7
    Db  000h,038h,06Ch,06Ch,038h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #F8
    Db  000h,000h,000h,000h,000h,000h,000h,018h,018h,000h,000h,000h,000h,000h,000h,000h ;   Hex #F9
    Db  000h,000h,000h,000h,000h,000h,000h,018h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FA
    Db  000h,00Fh,00Ch,00Ch,00Ch,00Ch,00Ch,0ECh,06Ch,06Ch,03Ch,01Ch,000h,000h,000h,000h ;   Hex #FB
    Db  000h,06Ch,036h,036h,036h,036h,036h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FC
    Db  000h,03Ch,066h,00Ch,018h,032h,07Eh,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FD
    Db  000h,000h,000h,000h,07Eh,07Eh,07Eh,07Eh,07Eh,07Eh,07Eh,000h,000h,000h,000h,000h ;   Hex #FE
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FF


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\ega2\copyrigh.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
CODE	SEGMENT BYTE PUBLIC 'CODE'
	ASSUME CS:CODE,DS:CODE

	DB	13,10
	DB	"Microsoft MS-DOS (R)  EGA Display Font File",13,10
include copyrigh.inc
	DB	1Ah

CODE	ENDS
	END


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\ega2\cpi-head.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
CODE    SEGMENT BYTE PUBLIC 'CODE'
        ASSUME CS:CODE,DS:CODE

BEGIN:  ORG    0

FNTHEAD:DB     0FFH,"FONT   "           ;FILE TAG
        DB     8 DUP(0)                 ;RESERVED
        DW     1                        ;CNT OF POINTERS IN HEADER
        DB     1                        ;TYPE FOR INFO POINTER
        DW     OFFSET INFO,0            ;POINTER TO INFO IN FILE
INFO:	DW     6			;COUNT OF ENTRIES

CODE    ENDS
        END


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\ega2\863-8x14.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
;***************************************************
;  CHARACTER FONT FILE
;  Source Assembler File
;
;        CODE PAGE: 863 
;  FONT RESOLUTION: 8 x 14 
;
;     DATE CREATED:05-28-1987
;
;
; Output file from: MULTIFON, Version 1A
;
;***************************************************
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #0
    Db  000h,000h,000h,07Eh,081h,0A5h,081h,081h,0BDh,099h,081h,07Eh,000h,000h ;   Hex #1
    Db  000h,000h,000h,07Eh,0FFh,0DBh,0FFh,0FFh,0C3h,0E7h,0FFh,07Eh,000h,000h ;   Hex #2
    Db  000h,000h,000h,000h,06Ch,0FEh,0FEh,0FEh,0FEh,07Ch,038h,010h,000h,000h ;   Hex #3
    Db  000h,000h,000h,000h,010h,038h,07Ch,0FEh,07Ch,038h,010h,000h,000h,000h ;   Hex #4
    Db  000h,000h,000h,018h,03Ch,03Ch,0E7h,0E7h,0E7h,018h,018h,03Ch,000h,000h ;   Hex #5
    Db  000h,000h,000h,018h,03Ch,07Eh,0FFh,0FFh,07Eh,018h,018h,03Ch,000h,000h ;   Hex #6
    Db  000h,000h,000h,000h,000h,000h,018h,03Ch,03Ch,018h,000h,000h,000h,000h ;   Hex #7
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0E7h,0C3h,0C3h,0E7h,0FFh,0FFh,0FFh,0FFh ;   Hex #8
    Db  000h,000h,000h,000h,000h,03Ch,066h,042h,042h,066h,03Ch,000h,000h,000h ;   Hex #9
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0C3h,099h,0BDh,0BDh,099h,0C3h,0FFh,0FFh,0FFh ;   Hex #A
    Db  000h,000h,000h,01Eh,00Eh,01Ah,032h,078h,0CCh,0CCh,0CCh,078h,000h,000h ;   Hex #B
    Db  000h,000h,000h,03Ch,066h,066h,066h,03Ch,018h,07Eh,018h,018h,000h,000h ;   Hex #C
    Db  000h,000h,000h,03Fh,033h,03Fh,030h,030h,030h,070h,0F0h,0E0h,000h,000h ;   Hex #D
    Db  000h,000h,000h,07Fh,063h,07Fh,063h,063h,063h,067h,0E7h,0E6h,0C0h,000h ;   Hex #E
    Db  000h,000h,000h,018h,018h,0DBh,03Ch,0E7h,03Ch,0DBh,018h,018h,000h,000h ;   Hex #F
    Db  000h,000h,000h,080h,0C0h,0E0h,0F8h,0FEh,0F8h,0E0h,0C0h,080h,000h,000h ;   Hex #10
    Db  000h,000h,000h,002h,006h,00Eh,03Eh,0FEh,03Eh,00Eh,006h,002h,000h,000h ;   Hex #11
    Db  000h,000h,000h,018h,03Ch,07Eh,018h,018h,018h,07Eh,03Ch,018h,000h,000h ;   Hex #12
    Db  000h,000h,000h,066h,066h,066h,066h,066h,066h,000h,066h,066h,000h,000h ;   Hex #13
    Db  000h,000h,000h,07Fh,0DBh,0DBh,0DBh,07Bh,01Bh,01Bh,01Bh,01Bh,000h,000h ;   Hex #14
    Db  000h,000h,07Ch,0C6h,060h,038h,06Ch,0C6h,0C6h,06Ch,038h,00Ch,0C6h,07Ch ;   Hex #15
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,0FEh,0FEh,0FEh,000h,000h ;   Hex #16
    Db  000h,000h,000h,018h,03Ch,07Eh,018h,018h,018h,07Eh,03Ch,018h,07Eh,000h ;   Hex #17
    Db  000h,000h,000h,018h,03Ch,07Eh,018h,018h,018h,018h,018h,018h,000h,000h ;   Hex #18
    Db  000h,000h,000h,018h,018h,018h,018h,018h,018h,07Eh,03Ch,018h,000h,000h ;   Hex #19
    Db  000h,000h,000h,000h,000h,018h,00Ch,0FEh,00Ch,018h,000h,000h,000h,000h ;   Hex #1A
    Db  000h,000h,000h,000h,000h,030h,060h,0FEh,060h,030h,000h,000h,000h,000h ;   Hex #1B
    Db  000h,000h,000h,000h,000h,000h,0C0h,0C0h,0C0h,0FEh,000h,000h,000h,000h ;   Hex #1C
    Db  000h,000h,000h,000h,000h,028h,06Ch,0FEh,06Ch,028h,000h,000h,000h,000h ;   Hex #1D
    Db  000h,000h,000h,000h,010h,038h,038h,07Ch,07Ch,0FEh,0FEh,000h,000h,000h ;   Hex #1E
    Db  000h,000h,000h,000h,0FEh,0FEh,07Ch,07Ch,038h,038h,010h,000h,000h,000h ;   Hex #1F
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #20
    Db  000h,000h,000h,018h,03Ch,03Ch,03Ch,018h,018h,000h,018h,018h,000h,000h ;   Hex #21
    Db  000h,066h,066h,066h,024h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #22
    Db  000h,000h,000h,06Ch,06Ch,0FEh,06Ch,06Ch,06Ch,0FEh,06Ch,06Ch,000h,000h ;   Hex #23
    Db  000h,018h,018h,07Ch,0C6h,0C2h,0C0h,07Ch,006h,086h,0C6h,07Ch,018h,018h ;   Hex #24
    Db  000h,000h,000h,000h,000h,0C2h,0C6h,00Ch,018h,030h,066h,0C6h,000h,000h ;   Hex #25
    Db  000h,000h,000h,038h,06Ch,06Ch,038h,076h,0DCh,0CCh,0CCh,076h,000h,000h ;   Hex #26
    Db  000h,018h,018h,018h,030h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #27
    Db  000h,000h,000h,00Ch,018h,030h,030h,030h,030h,030h,018h,00Ch,000h,000h ;   Hex #28
    Db  000h,000h,000h,030h,018h,00Ch,00Ch,00Ch,00Ch,00Ch,018h,030h,000h,000h ;   Hex #29
    Db  000h,000h,000h,000h,000h,066h,03Ch,0FFh,03Ch,066h,000h,000h,000h,000h ;   Hex #2A
    Db  000h,000h,000h,000h,000h,018h,018h,07Eh,018h,018h,000h,000h,000h,000h ;   Hex #2B
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,018h,018h,030h,000h ;   Hex #2C
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,000h,000h,000h,000h,000h,000h ;   Hex #2D
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,018h,000h,000h ;   Hex #2E
    Db  000h,000h,000h,002h,006h,00Ch,018h,030h,060h,0C0h,080h,000h,000h,000h ;   Hex #2F
    Db  000h,000h,000h,038h,06Ch,0C6h,0C6h,0D6h,0C6h,0C6h,06Ch,038h,000h,000h ;   Hex #30
    Db  000h,000h,000h,018h,038h,078h,018h,018h,018h,018h,018h,07Eh,000h,000h ;   Hex #31
    Db  000h,000h,000h,07Ch,0C6h,006h,00Ch,018h,030h,060h,0C6h,0FEh,000h,000h ;   Hex #32
    Db  000h,000h,000h,07Ch,0C6h,006h,006h,03Ch,006h,006h,0C6h,07Ch,000h,000h ;   Hex #33
    Db  000h,000h,000h,00Ch,01Ch,03Ch,06Ch,0CCh,0FEh,00Ch,00Ch,01Eh,000h,000h ;   Hex #34
    Db  000h,000h,000h,0FEh,0C0h,0C0h,0C0h,0FCh,006h,006h,0C6h,07Ch,000h,000h ;   Hex #35
    Db  000h,000h,000h,038h,060h,0C0h,0C0h,0FCh,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #36
    Db  000h,000h,000h,0FEh,0C6h,006h,00Ch,018h,030h,030h,030h,030h,000h,000h ;   Hex #37
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0C6h,07Ch,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #38
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0C6h,07Eh,006h,006h,00Ch,078h,000h,000h ;   Hex #39
    Db  000h,000h,000h,000h,018h,018h,000h,000h,000h,018h,018h,000h,000h,000h ;   Hex #3A
    Db  000h,000h,000h,000h,018h,018h,000h,000h,000h,018h,018h,030h,000h,000h ;   Hex #3B
    Db  000h,000h,000h,00Ch,018h,030h,060h,0C0h,060h,030h,018h,00Ch,000h,000h ;   Hex #3C
    Db  000h,000h,000h,000h,000h,000h,07Eh,000h,000h,07Eh,000h,000h,000h,000h ;   Hex #3D
    Db  000h,000h,000h,060h,030h,018h,00Ch,006h,00Ch,018h,030h,060h,000h,000h ;   Hex #3E
    Db  000h,000h,000h,07Ch,0C6h,0C6h,00Ch,018h,018h,000h,018h,018h,000h,000h ;   Hex #3F
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0DEh,0DEh,0DEh,0DCh,0C0h,07Ch,000h,000h ;   Hex #40
    Db  000h,000h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #41
    Db  000h,000h,000h,0FCh,066h,066h,066h,07Ch,066h,066h,066h,0FCh,000h,000h ;   Hex #42
    Db  000h,000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0C0h,0C2h,066h,03Ch,000h,000h ;   Hex #43
    Db  000h,000h,000h,0F8h,06Ch,066h,066h,066h,066h,066h,06Ch,0F8h,000h,000h ;   Hex #44
    Db  000h,000h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h ;   Hex #45
    Db  000h,000h,000h,0FEh,066h,062h,068h,078h,068h,060h,060h,0F0h,000h,000h ;   Hex #46
    Db  000h,000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0DEh,0C6h,066h,03Ah,000h,000h ;   Hex #47
    Db  000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,000h,000h ;   Hex #48
    Db  000h,000h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #49
    Db  000h,000h,000h,01Eh,00Ch,00Ch,00Ch,00Ch,00Ch,0CCh,0CCh,078h,000h,000h ;   Hex #4A
    Db  000h,000h,000h,0E6h,066h,06Ch,06Ch,078h,06Ch,06Ch,066h,0E6h,000h,000h ;   Hex #4B
    Db  000h,000h,000h,0F0h,060h,060h,060h,060h,060h,062h,066h,0FEh,000h,000h ;   Hex #4C
    Db  000h,000h,000h,0C6h,0EEh,0FEh,0D6h,0C6h,0C6h,0C6h,0C6h,0C6h,000h,000h ;   Hex #4D
    Db  000h,000h,000h,0C6h,0E6h,0F6h,0FEh,0DEh,0CEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #4E
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #4F
    Db  000h,000h,000h,0FCh,066h,066h,066h,07Ch,060h,060h,060h,0F0h,000h,000h ;   Hex #50
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0D6h,0DEh,07Ch,00Eh,000h ;   Hex #51
    Db  000h,000h,000h,0FCh,066h,066h,066h,07Ch,06Ch,066h,066h,0E6h,000h,000h ;   Hex #52
    Db  000h,000h,000h,07Ch,0C6h,0C6h,060h,038h,00Ch,0C6h,0C6h,07Ch,000h,000h ;   Hex #53
    Db  000h,000h,000h,07Eh,07Eh,05Ah,018h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #54
    Db  000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #55
    Db  000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,06Ch,038h,010h,000h,000h ;   Hex #56
    Db  000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0D6h,0D6h,0FEh,06Ch,06Ch,000h,000h ;   Hex #57
    Db  000h,000h,000h,0C6h,0C6h,0C6h,07Ch,038h,07Ch,0C6h,0C6h,0C6h,000h,000h ;   Hex #58
    Db  000h,000h,000h,066h,066h,066h,066h,03Ch,018h,018h,018h,03Ch,000h,000h ;   Hex #59
    Db  000h,000h,000h,0FEh,0C6h,08Ch,018h,030h,060h,0C2h,0C6h,0FEh,000h,000h ;   Hex #5A
    Db  000h,000h,000h,03Ch,030h,030h,030h,030h,030h,030h,030h,03Ch,000h,000h ;   Hex #5B
    Db  000h,000h,000h,080h,0C0h,0E0h,070h,038h,01Ch,00Eh,006h,002h,000h,000h ;   Hex #5C
    Db  000h,000h,000h,03Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,03Ch,000h,000h ;   Hex #5D
    Db  010h,038h,06Ch,0C6h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #5E
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,0FFh ;   Hex #5F
    Db  000h,030h,018h,00Ch,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #60
    Db  000h,000h,000h,000h,000h,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #61
    Db  000h,000h,000h,0E0h,060h,060h,078h,06Ch,066h,066h,066h,07Ch,000h,000h ;   Hex #62
    Db  000h,000h,000h,000h,000h,000h,07Ch,0C6h,0C0h,0C0h,0C6h,07Ch,000h,000h ;   Hex #63
    Db  000h,000h,000h,01Ch,00Ch,00Ch,03Ch,06Ch,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #64
    Db  000h,000h,000h,000h,000h,000h,07Ch,0C6h,0FEh,0C0h,0C6h,07Ch,000h,000h ;   Hex #65
    Db  000h,000h,000h,01Ch,036h,032h,030h,07Ch,030h,030h,030h,078h,000h,000h ;   Hex #66
    Db  000h,000h,000h,000h,000h,000h,076h,0CCh,0CCh,0CCh,07Ch,00Ch,0CCh,078h ;   Hex #67
    Db  000h,000h,000h,0E0h,060h,060h,06Ch,076h,066h,066h,066h,0E6h,000h,000h ;   Hex #68
    Db  000h,000h,000h,018h,018h,000h,038h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #69
    Db  000h,000h,000h,006h,006h,000h,00Eh,006h,006h,006h,006h,066h,066h,03Ch ;   Hex #6A
    Db  000h,000h,000h,0E0h,060h,060h,066h,06Ch,078h,06Ch,066h,0E6h,000h,000h ;   Hex #6B
    Db  000h,000h,000h,038h,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #6C
    Db  000h,000h,000h,000h,000h,000h,0ECh,0FEh,0D6h,0D6h,0D6h,0D6h,000h,000h ;   Hex #6D
    Db  000h,000h,000h,000h,000h,000h,0DCh,066h,066h,066h,066h,066h,000h,000h ;   Hex #6E
    Db  000h,000h,000h,000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #6F
    Db  000h,000h,000h,000h,000h,000h,0DCh,066h,066h,066h,07Ch,060h,060h,0F0h ;   Hex #70
    Db  000h,000h,000h,000h,000h,000h,076h,0CCh,0CCh,0CCh,07Ch,00Ch,00Ch,01Eh ;   Hex #71
    Db  000h,000h,000h,000h,000h,000h,0DCh,076h,066h,060h,060h,0F0h,000h,000h ;   Hex #72
    Db  000h,000h,000h,000h,000h,000h,07Ch,0C6h,070h,01Ch,0C6h,07Ch,000h,000h ;   Hex #73
    Db  000h,000h,000h,010h,030h,030h,0FCh,030h,030h,030h,036h,01Ch,000h,000h ;   Hex #74
    Db  000h,000h,000h,000h,000h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #75
    Db  000h,000h,000h,000h,000h,000h,0C6h,0C6h,0C6h,06Ch,038h,010h,000h,000h ;   Hex #76
    Db  000h,000h,000h,000h,000h,000h,0C6h,0C6h,0D6h,0D6h,0FEh,06Ch,000h,000h ;   Hex #77
    Db  000h,000h,000h,000h,000h,000h,0C6h,06Ch,038h,038h,06Ch,0C6h,000h,000h ;   Hex #78
    Db  000h,000h,000h,000h,000h,000h,0C6h,0C6h,0C6h,0C6h,07Eh,006h,00Ch,078h ;   Hex #79
    Db  000h,000h,000h,000h,000h,000h,0FEh,0CCh,018h,030h,066h,0FEh,000h,000h ;   Hex #7A
    Db  000h,000h,000h,00Eh,018h,018h,018h,070h,018h,018h,018h,00Eh,000h,000h ;   Hex #7B
    Db  000h,000h,000h,018h,018h,018h,018h,018h,018h,018h,018h,018h,000h,000h ;   Hex #7C
    Db  000h,000h,000h,070h,018h,018h,018h,00Eh,018h,018h,018h,070h,000h,000h ;   Hex #7D
    Db  000h,076h,0DCh,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #7E
    Db  000h,000h,000h,000h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,000h,000h,000h ;   Hex #7F
    Db  000h,000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0C0h,0C2h,066h,03Ch,00Ch,078h ;   Hex #80
    Db  000h,000h,000h,0CCh,000h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #81
    Db  000h,000h,00Ch,018h,030h,000h,07Ch,0C6h,0FEh,0C0h,0C6h,07Ch,000h,000h ;   Hex #82
    Db  000h,000h,010h,038h,06Ch,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #83
    Db  038h,06Ch,0C6h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #84
    Db  000h,000h,060h,030h,018h,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #85
    Db  000h,000h,000h,07Fh,0DBh,0DBh,0DBh,07Bh,01Bh,01Bh,01Bh,01Bh,000h,000h ;   Hex #86
    Db  000h,000h,000h,000h,000h,000h,07Ch,0C6h,0C0h,0C0h,0C6h,07Ch,00Ch,078h ;   Hex #87
    Db  000h,000h,010h,038h,06Ch,000h,07Ch,0C6h,0FEh,0C0h,0C6h,07Ch,000h,000h ;   Hex #88
    Db  000h,000h,000h,0C6h,000h,000h,07Ch,0C6h,0FEh,0C0h,0C6h,07Ch,000h,000h ;   Hex #89
    Db  000h,000h,060h,030h,018h,000h,07Ch,0C6h,0FEh,0C0h,0C6h,07Ch,000h,000h ;   Hex #8A
    Db  000h,000h,000h,066h,000h,000h,038h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #8B
    Db  000h,000h,018h,03Ch,066h,000h,038h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #8C
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,0FFh,000h,0FFh ;   Hex #8D
    Db  018h,00Ch,006h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #8E
    Db  000h,07Ch,0C6h,060h,038h,06Ch,0C6h,0C6h,06Ch,038h,00Ch,0C6h,07Ch,000h ;   Hex #8F
    Db  00Ch,018h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h ;   Hex #90
    Db  030h,018h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h ;   Hex #91
    Db  038h,06Ch,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h ;   Hex #92
    Db  000h,000h,010h,038h,06Ch,000h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #93
    Db  000h,0C6h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h ;   Hex #94
    Db  000h,066h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #95
    Db  000h,000h,030h,078h,0CCh,000h,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #96
    Db  000h,000h,060h,030h,018h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #97
    Db  000h,000h,000h,000h,000h,0C6h,07Ch,0C6h,0C6h,0C6h,07Ch,0C6h,000h,000h ;   Hex #98
    Db  038h,06Ch,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #99
    Db  000h,0C6h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #9A
    Db  000h,000h,018h,018h,07Ch,0C6h,0C0h,0C0h,0C6h,07Ch,018h,018h,000h,000h ;   Hex #9B
    Db  000h,000h,038h,06Ch,064h,060h,0F0h,060h,060h,060h,0E6h,0FCh,000h,000h ;   Hex #9C
    Db  030h,018h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #9D
    Db  038h,06Ch,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #9E
    Db  000h,000h,00Eh,01Bh,018h,018h,018h,07Eh,018h,018h,018h,0D8h,070h,000h ;   Hex #9F
    Db  000h,000h,018h,018h,018h,018h,000h,000h,000h,018h,018h,018h,018h,000h ;   Hex #A0
    Db  000h,00Ch,018h,030h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #A1
    Db  000h,000h,00Ch,018h,030h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #A2
    Db  000h,000h,00Ch,018h,030h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #A3
    Db  000h,0C6h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #A4
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,00Ch,078h ;   Hex #A5
    Db  000h,078h,00Ch,038h,00Ch,00Ch,078h,000h,000h,000h,000h,000h,000h,000h ;   Hex #A6
    Db  000h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #A7
    Db  03Ch,066h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #A8
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,0C0h,0C0h,0C0h,000h,000h,000h ;   Hex #A9
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,006h,006h,006h,000h,000h,000h ;   Hex #AA
    Db  000h,000h,060h,0E0h,063h,066h,06Ch,018h,030h,06Eh,0C3h,006h,00Ch,01Fh ;   Hex #AB
    Db  000h,000h,060h,0E0h,063h,066h,06Ch,01Ah,036h,06Eh,0DAh,03Fh,006h,006h ;   Hex #AC
    Db  000h,0E0h,030h,0E3h,036h,0ECh,018h,036h,06Eh,0DAh,03Fh,006h,006h,000h ;   Hex #AD
    Db  000h,000h,000h,000h,000h,036h,06Ch,0D8h,06Ch,036h,000h,000h,000h,000h ;   Hex #AE
    Db  000h,000h,000h,000h,000h,0D8h,06Ch,036h,06Ch,0D8h,000h,000h,000h,000h ;   Hex #AF
    Db  011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h ;   Hex #B0
    Db  055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh ;   Hex #B1
    Db  0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h ;   Hex #B2
    Db  018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B3
    Db  018h,018h,018h,018h,018h,018h,018h,0F8h,018h,018h,018h,018h,018h,018h ;   Hex #B4
    Db  018h,018h,018h,018h,018h,0F8h,018h,0F8h,018h,018h,018h,018h,018h,018h ;   Hex #B5
    Db  036h,036h,036h,036h,036h,036h,036h,0F6h,036h,036h,036h,036h,036h,036h ;   Hex #B6
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,036h,036h,036h,036h,036h,036h ;   Hex #B7
    Db  000h,000h,000h,000h,000h,0F8h,018h,0F8h,018h,018h,018h,018h,018h,018h ;   Hex #B8
    Db  036h,036h,036h,036h,036h,0F6h,006h,0F6h,036h,036h,036h,036h,036h,036h ;   Hex #B9
    Db  036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #BA
    Db  000h,000h,000h,000h,000h,0FEh,006h,0F6h,036h,036h,036h,036h,036h,036h ;   Hex #BB
    Db  036h,036h,036h,036h,036h,0F6h,006h,0FEh,000h,000h,000h,000h,000h,000h ;   Hex #BC
    Db  036h,036h,036h,036h,036h,036h,036h,0FEh,000h,000h,000h,000h,000h,000h ;   Hex #BD
    Db  018h,018h,018h,018h,018h,0F8h,018h,0F8h,000h,000h,000h,000h,000h,000h ;   Hex #BE
    Db  000h,000h,000h,000h,000h,000h,000h,0F8h,018h,018h,018h,018h,018h,018h ;   Hex #BF
    Db  018h,018h,018h,018h,018h,018h,018h,01Fh,000h,000h,000h,000h,000h,000h ;   Hex #C0
    Db  018h,018h,018h,018h,018h,018h,018h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #C1
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,018h,018h,018h,018h,018h,018h ;   Hex #C2
    Db  018h,018h,018h,018h,018h,018h,018h,01Fh,018h,018h,018h,018h,018h,018h ;   Hex #C3
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #C4
    Db  018h,018h,018h,018h,018h,018h,018h,0FFh,018h,018h,018h,018h,018h,018h ;   Hex #C5
    Db  018h,018h,018h,018h,018h,01Fh,018h,01Fh,018h,018h,018h,018h,018h,018h ;   Hex #C6
    Db  036h,036h,036h,036h,036h,036h,036h,037h,036h,036h,036h,036h,036h,036h ;   Hex #C7
    Db  036h,036h,036h,036h,036h,037h,030h,03Fh,000h,000h,000h,000h,000h,000h ;   Hex #C8
    Db  000h,000h,000h,000h,000h,03Fh,030h,037h,036h,036h,036h,036h,036h,036h ;   Hex #C9
    Db  036h,036h,036h,036h,036h,0F7h,000h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #CA
    Db  000h,000h,000h,000h,000h,0FFh,000h,0F7h,036h,036h,036h,036h,036h,036h ;   Hex #CB
    Db  036h,036h,036h,036h,036h,037h,030h,037h,036h,036h,036h,036h,036h,036h ;   Hex #CC
    Db  000h,000h,000h,000h,000h,0FFh,000h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #CD
    Db  036h,036h,036h,036h,036h,0F7h,000h,0F7h,036h,036h,036h,036h,036h,036h ;   Hex #CE
    Db  018h,018h,018h,018h,018h,0FFh,000h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #CF
    Db  036h,036h,036h,036h,036h,036h,036h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #D0
    Db  000h,000h,000h,000h,000h,0FFh,000h,0FFh,018h,018h,018h,018h,018h,018h ;   Hex #D1
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,036h,036h,036h,036h,036h,036h ;   Hex #D2
    Db  036h,036h,036h,036h,036h,036h,036h,03Fh,000h,000h,000h,000h,000h,000h ;   Hex #D3
    Db  018h,018h,018h,018h,018h,01Fh,018h,01Fh,000h,000h,000h,000h,000h,000h ;   Hex #D4
    Db  000h,000h,000h,000h,000h,01Fh,018h,01Fh,018h,018h,018h,018h,018h,018h ;   Hex #D5
    Db  000h,000h,000h,000h,000h,000h,000h,03Fh,036h,036h,036h,036h,036h,036h ;   Hex #D6
    Db  036h,036h,036h,036h,036h,036h,036h,0FFh,036h,036h,036h,036h,036h,036h ;   Hex #D7
    Db  018h,018h,018h,018h,018h,0FFh,018h,0FFh,018h,018h,018h,018h,018h,018h ;   Hex #D8
    Db  018h,018h,018h,018h,018h,018h,018h,0F8h,000h,000h,000h,000h,000h,000h ;   Hex #D9
    Db  000h,000h,000h,000h,000h,000h,000h,01Fh,018h,018h,018h,018h,018h,018h ;   Hex #DA
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DB
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DC
    Db  0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h ;   Hex #DD
    Db  00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh ;   Hex #DE
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,000h,000h,000h,000h,000h,000h,000h ;   Hex #DF
    Db  000h,000h,000h,000h,000h,000h,076h,0DCh,0D8h,0D8h,0DCh,076h,000h,000h ;   Hex #E0
    Db  000h,000h,000h,078h,0CCh,0CCh,0CCh,0D8h,0CCh,0C6h,0C6h,0CCh,000h,000h ;   Hex #E1
    Db  000h,000h,000h,0FEh,0C6h,0C6h,0C0h,0C0h,0C0h,0C0h,0C0h,0C0h,000h,000h ;   Hex #E2
    Db  000h,000h,000h,000h,000h,000h,0FEh,06Ch,06Ch,06Ch,06Ch,06Ch,000h,000h ;   Hex #E3
    Db  000h,000h,000h,0FEh,0C6h,060h,030h,018h,030h,060h,0C6h,0FEh,000h,000h ;   Hex #E4
    Db  000h,000h,000h,000h,000h,000h,07Eh,0D8h,0D8h,0D8h,0D8h,070h,000h,000h ;   Hex #E5
    Db  000h,000h,000h,000h,000h,000h,066h,066h,066h,066h,066h,07Ch,060h,0C0h ;   Hex #E6
    Db  000h,000h,000h,000h,000h,076h,0DCh,018h,018h,018h,018h,018h,000h,000h ;   Hex #E7
    Db  000h,000h,000h,07Eh,018h,03Ch,066h,066h,066h,03Ch,018h,07Eh,000h,000h ;   Hex #E8
    Db  000h,000h,000h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,06Ch,038h,000h,000h ;   Hex #E9
    Db  000h,000h,000h,038h,06Ch,0C6h,0C6h,0C6h,06Ch,06Ch,06Ch,0EEh,000h,000h ;   Hex #EA
    Db  000h,000h,000h,01Eh,030h,018h,00Ch,03Eh,066h,066h,066h,03Ch,000h,000h ;   Hex #EB
    Db  000h,000h,000h,000h,000h,000h,07Eh,0DBh,0DBh,07Eh,000h,000h,000h,000h ;   Hex #EC
    Db  000h,000h,000h,003h,006h,07Eh,0DBh,0DBh,0F3h,07Eh,060h,0C0h,000h,000h ;   Hex #ED
    Db  000h,000h,000h,01Eh,030h,060h,060h,07Eh,060h,060h,030h,01Eh,000h,000h ;   Hex #EE
    Db  000h,000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,000h,000h ;   Hex #EF
    Db  000h,000h,000h,000h,0FEh,000h,000h,0FEh,000h,000h,0FEh,000h,000h,000h ;   Hex #F0
    Db  000h,000h,000h,000h,018h,018h,07Eh,018h,018h,000h,000h,07Eh,000h,000h ;   Hex #F1
    Db  000h,000h,000h,030h,018h,00Ch,006h,00Ch,018h,030h,000h,07Eh,000h,000h ;   Hex #F2
    Db  000h,000h,000h,00Ch,018h,030h,060h,030h,018h,00Ch,000h,07Eh,000h,000h ;   Hex #F3
    Db  000h,000h,00Eh,01Bh,01Bh,018h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #F4
    Db  018h,018h,018h,018h,018h,018h,018h,018h,0D8h,0D8h,070h,000h,000h,000h ;   Hex #F5
    Db  000h,000h,000h,000h,000h,018h,000h,07Eh,000h,018h,000h,000h,000h,000h ;   Hex #F6
    Db  000h,000h,000h,000h,000h,076h,0DCh,000h,076h,0DCh,000h,000h,000h,000h ;   Hex #F7
    Db  000h,038h,06Ch,06Ch,038h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #F8
    Db  000h,000h,000h,000h,000h,000h,000h,018h,018h,000h,000h,000h,000h,000h ;   Hex #F9
    Db  000h,000h,000h,000h,000h,000h,000h,018h,000h,000h,000h,000h,000h,000h ;   Hex #FA
    Db  000h,00Fh,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,0ECh,06Ch,03Ch,01Ch,000h,000h ;   Hex #FB
    Db  000h,06Ch,036h,036h,036h,036h,036h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FC
    Db  000h,03Ch,066h,00Ch,018h,032h,07Eh,000h,000h,000h,000h,000h,000h,000h ;   Hex #FD
    Db  000h,000h,000h,000h,000h,07Eh,07Eh,07Eh,07Eh,07Eh,07Eh,000h,000h,000h ;   Hex #FE
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FF


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\ega2\865-8x14.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
;***************************************************
;  CHARACTER FONT FILE
;  Source Assembler File
;
;        CODE PAGE: 865 
;  FONT RESOLUTION: 8 x 14 
;
;     DATE CREATED:05-28-1987
;
;
; Output file from: MULTIFON, Version 1A
;
;***************************************************
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #0
    Db  000h,000h,000h,07Eh,081h,0A5h,081h,081h,0BDh,099h,081h,07Eh,000h,000h ;   Hex #1
    Db  000h,000h,000h,07Eh,0FFh,0DBh,0FFh,0FFh,0C3h,0E7h,0FFh,07Eh,000h,000h ;   Hex #2
    Db  000h,000h,000h,000h,06Ch,0FEh,0FEh,0FEh,0FEh,07Ch,038h,010h,000h,000h ;   Hex #3
    Db  000h,000h,000h,000h,010h,038h,07Ch,0FEh,07Ch,038h,010h,000h,000h,000h ;   Hex #4
    Db  000h,000h,000h,018h,03Ch,03Ch,0E7h,0E7h,0E7h,018h,018h,03Ch,000h,000h ;   Hex #5
    Db  000h,000h,000h,018h,03Ch,07Eh,0FFh,0FFh,07Eh,018h,018h,03Ch,000h,000h ;   Hex #6
    Db  000h,000h,000h,000h,000h,000h,018h,03Ch,03Ch,018h,000h,000h,000h,000h ;   Hex #7
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0E7h,0C3h,0C3h,0E7h,0FFh,0FFh,0FFh,0FFh ;   Hex #8
    Db  000h,000h,000h,000h,000h,03Ch,066h,042h,042h,066h,03Ch,000h,000h,000h ;   Hex #9
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0C3h,099h,0BDh,0BDh,099h,0C3h,0FFh,0FFh,0FFh ;   Hex #A
    Db  000h,000h,000h,01Eh,00Eh,01Ah,032h,078h,0CCh,0CCh,0CCh,078h,000h,000h ;   Hex #B
    Db  000h,000h,000h,03Ch,066h,066h,066h,03Ch,018h,07Eh,018h,018h,000h,000h ;   Hex #C
    Db  000h,000h,000h,03Fh,033h,03Fh,030h,030h,030h,070h,0F0h,0E0h,000h,000h ;   Hex #D
    Db  000h,000h,000h,07Fh,063h,07Fh,063h,063h,063h,067h,0E7h,0E6h,0C0h,000h ;   Hex #E
    Db  000h,000h,000h,018h,018h,0DBh,03Ch,0E7h,03Ch,0DBh,018h,018h,000h,000h ;   Hex #F
    Db  000h,000h,000h,080h,0C0h,0E0h,0F8h,0FEh,0F8h,0E0h,0C0h,080h,000h,000h ;   Hex #10
    Db  000h,000h,000h,002h,006h,00Eh,03Eh,0FEh,03Eh,00Eh,006h,002h,000h,000h ;   Hex #11
    Db  000h,000h,000h,018h,03Ch,07Eh,018h,018h,018h,07Eh,03Ch,018h,000h,000h ;   Hex #12
    Db  000h,000h,000h,066h,066h,066h,066h,066h,066h,000h,066h,066h,000h,000h ;   Hex #13
    Db  000h,000h,000h,07Fh,0DBh,0DBh,0DBh,07Bh,01Bh,01Bh,01Bh,01Bh,000h,000h ;   Hex #14
    Db  000h,000h,07Ch,0C6h,060h,038h,06Ch,0C6h,0C6h,06Ch,038h,00Ch,0C6h,07Ch ;   Hex #15
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,0FEh,0FEh,0FEh,000h,000h ;   Hex #16
    Db  000h,000h,000h,018h,03Ch,07Eh,018h,018h,018h,07Eh,03Ch,018h,07Eh,000h ;   Hex #17
    Db  000h,000h,000h,018h,03Ch,07Eh,018h,018h,018h,018h,018h,018h,000h,000h ;   Hex #18
    Db  000h,000h,000h,018h,018h,018h,018h,018h,018h,07Eh,03Ch,018h,000h,000h ;   Hex #19
    Db  000h,000h,000h,000h,000h,018h,00Ch,0FEh,00Ch,018h,000h,000h,000h,000h ;   Hex #1A
    Db  000h,000h,000h,000h,000h,030h,060h,0FEh,060h,030h,000h,000h,000h,000h ;   Hex #1B
    Db  000h,000h,000h,000h,000h,000h,0C0h,0C0h,0C0h,0FEh,000h,000h,000h,000h ;   Hex #1C
    Db  000h,000h,000h,000h,000h,028h,06Ch,0FEh,06Ch,028h,000h,000h,000h,000h ;   Hex #1D
    Db  000h,000h,000h,000h,010h,038h,038h,07Ch,07Ch,0FEh,0FEh,000h,000h,000h ;   Hex #1E
    Db  000h,000h,000h,000h,0FEh,0FEh,07Ch,07Ch,038h,038h,010h,000h,000h,000h ;   Hex #1F
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #20
    Db  000h,000h,000h,018h,03Ch,03Ch,03Ch,018h,018h,000h,018h,018h,000h,000h ;   Hex #21
    Db  000h,066h,066h,066h,024h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #22
    Db  000h,000h,000h,06Ch,06Ch,0FEh,06Ch,06Ch,06Ch,0FEh,06Ch,06Ch,000h,000h ;   Hex #23
    Db  000h,018h,018h,07Ch,0C6h,0C2h,0C0h,07Ch,006h,086h,0C6h,07Ch,018h,018h ;   Hex #24
    Db  000h,000h,000h,000h,000h,0C2h,0C6h,00Ch,018h,030h,066h,0C6h,000h,000h ;   Hex #25
    Db  000h,000h,000h,038h,06Ch,06Ch,038h,076h,0DCh,0CCh,0CCh,076h,000h,000h ;   Hex #26
    Db  000h,018h,018h,018h,030h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #27
    Db  000h,000h,000h,00Ch,018h,030h,030h,030h,030h,030h,018h,00Ch,000h,000h ;   Hex #28
    Db  000h,000h,000h,030h,018h,00Ch,00Ch,00Ch,00Ch,00Ch,018h,030h,000h,000h ;   Hex #29
    Db  000h,000h,000h,000h,000h,066h,03Ch,0FFh,03Ch,066h,000h,000h,000h,000h ;   Hex #2A
    Db  000h,000h,000h,000h,000h,018h,018h,07Eh,018h,018h,000h,000h,000h,000h ;   Hex #2B
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,018h,018h,030h,000h ;   Hex #2C
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,000h,000h,000h,000h,000h,000h ;   Hex #2D
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,018h,000h,000h ;   Hex #2E
    Db  000h,000h,000h,002h,006h,00Ch,018h,030h,060h,0C0h,080h,000h,000h,000h ;   Hex #2F
    Db  000h,000h,000h,038h,06Ch,0C6h,0C6h,0D6h,0C6h,0C6h,06Ch,038h,000h,000h ;   Hex #30
    Db  000h,000h,000h,018h,038h,078h,018h,018h,018h,018h,018h,07Eh,000h,000h ;   Hex #31
    Db  000h,000h,000h,07Ch,0C6h,006h,00Ch,018h,030h,060h,0C6h,0FEh,000h,000h ;   Hex #32
    Db  000h,000h,000h,07Ch,0C6h,006h,006h,03Ch,006h,006h,0C6h,07Ch,000h,000h ;   Hex #33
    Db  000h,000h,000h,00Ch,01Ch,03Ch,06Ch,0CCh,0FEh,00Ch,00Ch,01Eh,000h,000h ;   Hex #34
    Db  000h,000h,000h,0FEh,0C0h,0C0h,0C0h,0FCh,006h,006h,0C6h,07Ch,000h,000h ;   Hex #35
    Db  000h,000h,000h,038h,060h,0C0h,0C0h,0FCh,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #36
    Db  000h,000h,000h,0FEh,0C6h,006h,00Ch,018h,030h,030h,030h,030h,000h,000h ;   Hex #37
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0C6h,07Ch,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #38
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0C6h,07Eh,006h,006h,00Ch,078h,000h,000h ;   Hex #39
    Db  000h,000h,000h,000h,018h,018h,000h,000h,000h,018h,018h,000h,000h,000h ;   Hex #3A
    Db  000h,000h,000h,000h,018h,018h,000h,000h,000h,018h,018h,030h,000h,000h ;   Hex #3B
    Db  000h,000h,000h,00Ch,018h,030h,060h,0C0h,060h,030h,018h,00Ch,000h,000h ;   Hex #3C
    Db  000h,000h,000h,000h,000h,000h,07Eh,000h,000h,07Eh,000h,000h,000h,000h ;   Hex #3D
    Db  000h,000h,000h,060h,030h,018h,00Ch,006h,00Ch,018h,030h,060h,000h,000h ;   Hex #3E
    Db  000h,000h,000h,07Ch,0C6h,0C6h,00Ch,018h,018h,000h,018h,018h,000h,000h ;   Hex #3F
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0DEh,0DEh,0DEh,0DCh,0C0h,07Ch,000h,000h ;   Hex #40
    Db  000h,000h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #41
    Db  000h,000h,000h,0FCh,066h,066h,066h,07Ch,066h,066h,066h,0FCh,000h,000h ;   Hex #42
    Db  000h,000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0C0h,0C2h,066h,03Ch,000h,000h ;   Hex #43
    Db  000h,000h,000h,0F8h,06Ch,066h,066h,066h,066h,066h,06Ch,0F8h,000h,000h ;   Hex #44
    Db  000h,000h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h ;   Hex #45
    Db  000h,000h,000h,0FEh,066h,062h,068h,078h,068h,060h,060h,0F0h,000h,000h ;   Hex #46
    Db  000h,000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0DEh,0C6h,066h,03Ah,000h,000h ;   Hex #47
    Db  000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,000h,000h ;   Hex #48
    Db  000h,000h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #49
    Db  000h,000h,000h,01Eh,00Ch,00Ch,00Ch,00Ch,00Ch,0CCh,0CCh,078h,000h,000h ;   Hex #4A
    Db  000h,000h,000h,0E6h,066h,06Ch,06Ch,078h,06Ch,06Ch,066h,0E6h,000h,000h ;   Hex #4B
    Db  000h,000h,000h,0F0h,060h,060h,060h,060h,060h,062h,066h,0FEh,000h,000h ;   Hex #4C
    Db  000h,000h,000h,0C6h,0EEh,0FEh,0D6h,0C6h,0C6h,0C6h,0C6h,0C6h,000h,000h ;   Hex #4D
    Db  000h,000h,000h,0C6h,0E6h,0F6h,0FEh,0DEh,0CEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #4E
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #4F
    Db  000h,000h,000h,0FCh,066h,066h,066h,07Ch,060h,060h,060h,0F0h,000h,000h ;   Hex #50
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0D6h,0DEh,07Ch,00Eh,000h ;   Hex #51
    Db  000h,000h,000h,0FCh,066h,066h,066h,07Ch,06Ch,066h,066h,0E6h,000h,000h ;   Hex #52
    Db  000h,000h,000h,07Ch,0C6h,0C6h,060h,038h,00Ch,0C6h,0C6h,07Ch,000h,000h ;   Hex #53
    Db  000h,000h,000h,07Eh,07Eh,05Ah,018h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #54
    Db  000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #55
    Db  000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,06Ch,038h,010h,000h,000h ;   Hex #56
    Db  000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0D6h,0D6h,0FEh,06Ch,06Ch,000h,000h ;   Hex #57
    Db  000h,000h,000h,0C6h,0C6h,0C6h,07Ch,038h,07Ch,0C6h,0C6h,0C6h,000h,000h ;   Hex #58
    Db  000h,000h,000h,066h,066h,066h,066h,03Ch,018h,018h,018h,03Ch,000h,000h ;   Hex #59
    Db  000h,000h,000h,0FEh,0C6h,08Ch,018h,030h,060h,0C2h,0C6h,0FEh,000h,000h ;   Hex #5A
    Db  000h,000h,000h,03Ch,030h,030h,030h,030h,030h,030h,030h,03Ch,000h,000h ;   Hex #5B
    Db  000h,000h,000h,080h,0C0h,0E0h,070h,038h,01Ch,00Eh,006h,002h,000h,000h ;   Hex #5C
    Db  000h,000h,000h,03Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,03Ch,000h,000h ;   Hex #5D
    Db  010h,038h,06Ch,0C6h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #5E
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,0FFh ;   Hex #5F
    Db  000h,030h,018h,00Ch,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #60
    Db  000h,000h,000h,000h,000h,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #61
    Db  000h,000h,000h,0E0h,060h,060h,078h,06Ch,066h,066h,066h,07Ch,000h,000h ;   Hex #62
    Db  000h,000h,000h,000h,000h,000h,07Ch,0C6h,0C0h,0C0h,0C6h,07Ch,000h,000h ;   Hex #63
    Db  000h,000h,000h,01Ch,00Ch,00Ch,03Ch,06Ch,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #64
    Db  000h,000h,000h,000h,000h,000h,07Ch,0C6h,0FEh,0C0h,0C6h,07Ch,000h,000h ;   Hex #65
    Db  000h,000h,000h,01Ch,036h,032h,030h,07Ch,030h,030h,030h,078h,000h,000h ;   Hex #66
    Db  000h,000h,000h,000h,000h,000h,076h,0CCh,0CCh,0CCh,07Ch,00Ch,0CCh,078h ;   Hex #67
    Db  000h,000h,000h,0E0h,060h,060h,06Ch,076h,066h,066h,066h,0E6h,000h,000h ;   Hex #68
    Db  000h,000h,000h,018h,018h,000h,038h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #69
    Db  000h,000h,000h,006h,006h,000h,00Eh,006h,006h,006h,006h,066h,066h,03Ch ;   Hex #6A
    Db  000h,000h,000h,0E0h,060h,060h,066h,06Ch,078h,06Ch,066h,0E6h,000h,000h ;   Hex #6B
    Db  000h,000h,000h,038h,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #6C
    Db  000h,000h,000h,000h,000h,000h,0ECh,0FEh,0D6h,0D6h,0D6h,0D6h,000h,000h ;   Hex #6D
    Db  000h,000h,000h,000h,000h,000h,0DCh,066h,066h,066h,066h,066h,000h,000h ;   Hex #6E
    Db  000h,000h,000h,000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #6F
    Db  000h,000h,000h,000h,000h,000h,0DCh,066h,066h,066h,07Ch,060h,060h,0F0h ;   Hex #70
    Db  000h,000h,000h,000h,000h,000h,076h,0CCh,0CCh,0CCh,07Ch,00Ch,00Ch,01Eh ;   Hex #71
    Db  000h,000h,000h,000h,000h,000h,0DCh,076h,066h,060h,060h,0F0h,000h,000h ;   Hex #72
    Db  000h,000h,000h,000h,000h,000h,07Ch,0C6h,070h,01Ch,0C6h,07Ch,000h,000h ;   Hex #73
    Db  000h,000h,000h,010h,030h,030h,0FCh,030h,030h,030h,036h,01Ch,000h,000h ;   Hex #74
    Db  000h,000h,000h,000h,000h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #75
    Db  000h,000h,000h,000h,000h,000h,0C6h,0C6h,0C6h,06Ch,038h,010h,000h,000h ;   Hex #76
    Db  000h,000h,000h,000h,000h,000h,0C6h,0C6h,0D6h,0D6h,0FEh,06Ch,000h,000h ;   Hex #77
    Db  000h,000h,000h,000h,000h,000h,0C6h,06Ch,038h,038h,06Ch,0C6h,000h,000h ;   Hex #78
    Db  000h,000h,000h,000h,000h,000h,0C6h,0C6h,0C6h,0C6h,07Eh,006h,00Ch,078h ;   Hex #79
    Db  000h,000h,000h,000h,000h,000h,0FEh,0CCh,018h,030h,066h,0FEh,000h,000h ;   Hex #7A
    Db  000h,000h,000h,00Eh,018h,018h,018h,070h,018h,018h,018h,00Eh,000h,000h ;   Hex #7B
    Db  000h,000h,000h,018h,018h,018h,018h,018h,018h,018h,018h,018h,000h,000h ;   Hex #7C
    Db  000h,000h,000h,070h,018h,018h,018h,00Eh,018h,018h,018h,070h,000h,000h ;   Hex #7D
    Db  000h,076h,0DCh,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #7E
    Db  000h,000h,000h,000h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,000h,000h,000h ;   Hex #7F
    Db  000h,000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0C0h,0C2h,066h,03Ch,00Ch,078h ;   Hex #80
    Db  000h,000h,000h,0CCh,000h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #81
    Db  000h,000h,00Ch,018h,030h,000h,07Ch,0C6h,0FEh,0C0h,0C6h,07Ch,000h,000h ;   Hex #82
    Db  000h,000h,010h,038h,06Ch,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #83
    Db  000h,000h,000h,0C6h,000h,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #84
    Db  000h,000h,060h,030h,018h,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #85
    Db  000h,000h,038h,06Ch,038h,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #86
    Db  000h,000h,000h,000h,000h,000h,07Ch,0C6h,0C0h,0C0h,0C6h,07Ch,00Ch,078h ;   Hex #87
    Db  000h,000h,010h,038h,06Ch,000h,07Ch,0C6h,0FEh,0C0h,0C6h,07Ch,000h,000h ;   Hex #88
    Db  000h,000h,000h,0C6h,000h,000h,07Ch,0C6h,0FEh,0C0h,0C6h,07Ch,000h,000h ;   Hex #89
    Db  000h,000h,060h,030h,018h,000h,07Ch,0C6h,0FEh,0C0h,0C6h,07Ch,000h,000h ;   Hex #8A
    Db  000h,000h,000h,066h,000h,000h,038h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #8B
    Db  000h,000h,018h,03Ch,066h,000h,038h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #8C
    Db  000h,000h,060h,030h,018h,000h,038h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #8D
    Db  000h,0C6h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #8E
    Db  038h,06Ch,038h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #8F
    Db  00Ch,018h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h ;   Hex #90
    Db  000h,000h,000h,000h,000h,000h,0ECh,036h,076h,0DCh,0D8h,06Eh,000h,000h ;   Hex #91
    Db  000h,000h,000h,03Eh,06Ch,0CCh,0CCh,0FEh,0CCh,0CCh,0CCh,0CEh,000h,000h ;   Hex #92
    Db  000h,000h,010h,038h,06Ch,000h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #93
    Db  000h,000h,000h,0C6h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #94
    Db  000h,000h,060h,030h,018h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #95
    Db  000h,000h,030h,078h,0CCh,000h,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #96
    Db  000h,000h,060h,030h,018h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #97
    Db  000h,000h,000h,0C6h,000h,000h,0C6h,0C6h,0C6h,0C6h,07Eh,006h,00Ch,078h ;   Hex #98
    Db  000h,0C6h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #99
    Db  000h,0C6h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #9A
    Db  000h,000h,000h,000h,000h,000h,07Ch,0CEh,0DEh,0F6h,0E6h,07Ch,000h,000h ;   Hex #9B
    Db  000h,000h,038h,06Ch,064h,060h,0F0h,060h,060h,060h,0E6h,0FCh,000h,000h ;   Hex #9C
    Db  000h,000h,004h,07Ch,0CEh,0CEh,0D6h,0D6h,0D6h,0E6h,0E6h,07Ch,040h,000h ;   Hex #9D
    Db  000h,000h,0FCh,066h,066h,07Ch,062h,066h,06Fh,066h,066h,0F3h,000h,000h ;   Hex #9E
    Db  000h,000h,00Eh,01Bh,018h,018h,018h,07Eh,018h,018h,018h,0D8h,070h,000h ;   Hex #9F
    Db  000h,000h,00Ch,018h,030h,000h,078h,00Ch,07Ch,0CCh,0CCh,076h,000h,000h ;   Hex #A0
    Db  000h,000h,00Ch,018h,030h,000h,038h,018h,018h,018h,018h,03Ch,000h,000h ;   Hex #A1
    Db  000h,000h,00Ch,018h,030h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h ;   Hex #A2
    Db  000h,000h,00Ch,018h,030h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h ;   Hex #A3
    Db  000h,000h,000h,076h,0DCh,000h,0DCh,066h,066h,066h,066h,066h,000h,000h ;   Hex #A4
    Db  076h,0DCh,000h,0C6h,0E6h,0F6h,0FEh,0DEh,0CEh,0C6h,0C6h,0C6h,000h,000h ;   Hex #A5
    Db  000h,000h,03Ch,06Ch,06Ch,03Eh,000h,07Eh,000h,000h,000h,000h,000h,000h ;   Hex #A6
    Db  000h,000h,038h,06Ch,06Ch,038h,000h,07Ch,000h,000h,000h,000h,000h,000h ;   Hex #A7
    Db  000h,000h,000h,030h,030h,000h,030h,030h,060h,0C6h,0C6h,07Ch,000h,000h ;   Hex #A8
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,0C0h,0C0h,0C0h,000h,000h,000h ;   Hex #A9
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,006h,006h,006h,000h,000h,000h ;   Hex #AA
    Db  000h,000h,060h,0E0h,063h,066h,06Ch,018h,030h,06Eh,0C3h,006h,00Ch,01Fh ;   Hex #AB
    Db  000h,000h,060h,0E0h,063h,066h,06Ch,01Ah,036h,06Eh,0DAh,03Fh,006h,006h ;   Hex #AC
    Db  000h,000h,000h,018h,018h,000h,018h,018h,03Ch,03Ch,03Ch,018h,000h,000h ;   Hex #AD
    Db  000h,000h,000h,000h,000h,036h,06Ch,0D8h,06Ch,036h,000h,000h,000h,000h ;   Hex #AE
    Db  000h,000h,000h,000h,000h,0C6h,07Ch,0C6h,0C6h,0C6h,07Ch,0C6h,000h,000h ;   Hex #AF
    Db  011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h ;   Hex #B0
    Db  055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh ;   Hex #B1
    Db  0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h ;   Hex #B2
    Db  018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B3
    Db  018h,018h,018h,018h,018h,018h,018h,0F8h,018h,018h,018h,018h,018h,018h ;   Hex #B4
    Db  018h,018h,018h,018h,018h,0F8h,018h,0F8h,018h,018h,018h,018h,018h,018h ;   Hex #B5
    Db  036h,036h,036h,036h,036h,036h,036h,0F6h,036h,036h,036h,036h,036h,036h ;   Hex #B6
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,036h,036h,036h,036h,036h,036h ;   Hex #B7
    Db  000h,000h,000h,000h,000h,0F8h,018h,0F8h,018h,018h,018h,018h,018h,018h ;   Hex #B8
    Db  036h,036h,036h,036h,036h,0F6h,006h,0F6h,036h,036h,036h,036h,036h,036h ;   Hex #B9
    Db  036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #BA
    Db  000h,000h,000h,000h,000h,0FEh,006h,0F6h,036h,036h,036h,036h,036h,036h ;   Hex #BB
    Db  036h,036h,036h,036h,036h,0F6h,006h,0FEh,000h,000h,000h,000h,000h,000h ;   Hex #BC
    Db  036h,036h,036h,036h,036h,036h,036h,0FEh,000h,000h,000h,000h,000h,000h ;   Hex #BD
    Db  018h,018h,018h,018h,018h,0F8h,018h,0F8h,000h,000h,000h,000h,000h,000h ;   Hex #BE
    Db  000h,000h,000h,000h,000h,000h,000h,0F8h,018h,018h,018h,018h,018h,018h ;   Hex #BF
    Db  018h,018h,018h,018h,018h,018h,018h,01Fh,000h,000h,000h,000h,000h,000h ;   Hex #C0
    Db  018h,018h,018h,018h,018h,018h,018h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #C1
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,018h,018h,018h,018h,018h,018h ;   Hex #C2
    Db  018h,018h,018h,018h,018h,018h,018h,01Fh,018h,018h,018h,018h,018h,018h ;   Hex #C3
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #C4
    Db  018h,018h,018h,018h,018h,018h,018h,0FFh,018h,018h,018h,018h,018h,018h ;   Hex #C5
    Db  018h,018h,018h,018h,018h,01Fh,018h,01Fh,018h,018h,018h,018h,018h,018h ;   Hex #C6
    Db  036h,036h,036h,036h,036h,036h,036h,037h,036h,036h,036h,036h,036h,036h ;   Hex #C7
    Db  036h,036h,036h,036h,036h,037h,030h,03Fh,000h,000h,000h,000h,000h,000h ;   Hex #C8
    Db  000h,000h,000h,000h,000h,03Fh,030h,037h,036h,036h,036h,036h,036h,036h ;   Hex #C9
    Db  036h,036h,036h,036h,036h,0F7h,000h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #CA
    Db  000h,000h,000h,000h,000h,0FFh,000h,0F7h,036h,036h,036h,036h,036h,036h ;   Hex #CB
    Db  036h,036h,036h,036h,036h,037h,030h,037h,036h,036h,036h,036h,036h,036h ;   Hex #CC
    Db  000h,000h,000h,000h,000h,0FFh,000h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #CD
    Db  036h,036h,036h,036h,036h,0F7h,000h,0F7h,036h,036h,036h,036h,036h,036h ;   Hex #CE
    Db  018h,018h,018h,018h,018h,0FFh,000h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #CF
    Db  036h,036h,036h,036h,036h,036h,036h,0FFh,000h,000h,000h,000h,000h,000h ;   Hex #D0
    Db  000h,000h,000h,000h,000h,0FFh,000h,0FFh,018h,018h,018h,018h,018h,018h ;   Hex #D1
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,036h,036h,036h,036h,036h,036h ;   Hex #D2
    Db  036h,036h,036h,036h,036h,036h,036h,03Fh,000h,000h,000h,000h,000h,000h ;   Hex #D3
    Db  018h,018h,018h,018h,018h,01Fh,018h,01Fh,000h,000h,000h,000h,000h,000h ;   Hex #D4
    Db  000h,000h,000h,000h,000h,01Fh,018h,01Fh,018h,018h,018h,018h,018h,018h ;   Hex #D5
    Db  000h,000h,000h,000h,000h,000h,000h,03Fh,036h,036h,036h,036h,036h,036h ;   Hex #D6
    Db  036h,036h,036h,036h,036h,036h,036h,0FFh,036h,036h,036h,036h,036h,036h ;   Hex #D7
    Db  018h,018h,018h,018h,018h,0FFh,018h,0FFh,018h,018h,018h,018h,018h,018h ;   Hex #D8
    Db  018h,018h,018h,018h,018h,018h,018h,0F8h,000h,000h,000h,000h,000h,000h ;   Hex #D9
    Db  000h,000h,000h,000h,000h,000h,000h,01Fh,018h,018h,018h,018h,018h,018h ;   Hex #DA
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DB
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DC
    Db  0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h ;   Hex #DD
    Db  00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh ;   Hex #DE
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,000h,000h,000h,000h,000h,000h,000h ;   Hex #DF
    Db  000h,000h,000h,000h,000h,000h,076h,0DCh,0D8h,0D8h,0DCh,076h,000h,000h ;   Hex #E0
    Db  000h,000h,000h,078h,0CCh,0CCh,0CCh,0D8h,0CCh,0C6h,0C6h,0CCh,000h,000h ;   Hex #E1
    Db  000h,000h,000h,0FEh,0C6h,0C6h,0C0h,0C0h,0C0h,0C0h,0C0h,0C0h,000h,000h ;   Hex #E2
    Db  000h,000h,000h,000h,000h,000h,0FEh,06Ch,06Ch,06Ch,06Ch,06Ch,000h,000h ;   Hex #E3
    Db  000h,000h,000h,0FEh,0C6h,060h,030h,018h,030h,060h,0C6h,0FEh,000h,000h ;   Hex #E4
    Db  000h,000h,000h,000h,000h,000h,07Eh,0D8h,0D8h,0D8h,0D8h,070h,000h,000h ;   Hex #E5
    Db  000h,000h,000h,000h,000h,000h,066h,066h,066h,066h,066h,07Ch,060h,0C0h ;   Hex #E6
    Db  000h,000h,000h,000h,000h,076h,0DCh,018h,018h,018h,018h,018h,000h,000h ;   Hex #E7
    Db  000h,000h,000h,07Eh,018h,03Ch,066h,066h,066h,03Ch,018h,07Eh,000h,000h ;   Hex #E8
    Db  000h,000h,000h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,06Ch,038h,000h,000h ;   Hex #E9
    Db  000h,000h,000h,038h,06Ch,0C6h,0C6h,0C6h,06Ch,06Ch,06Ch,0EEh,000h,000h ;   Hex #EA
    Db  000h,000h,000h,01Eh,030h,018h,00Ch,03Eh,066h,066h,066h,03Ch,000h,000h ;   Hex #EB
    Db  000h,000h,000h,000h,000h,000h,07Eh,0DBh,0DBh,07Eh,000h,000h,000h,000h ;   Hex #EC
    Db  000h,000h,000h,003h,006h,07Eh,0DBh,0DBh,0F3h,07Eh,060h,0C0h,000h,000h ;   Hex #ED
    Db  000h,000h,000h,01Eh,030h,060h,060h,07Eh,060h,060h,030h,01Eh,000h,000h ;   Hex #EE
    Db  000h,000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,000h,000h ;   Hex #EF
    Db  000h,000h,000h,000h,0FEh,000h,000h,0FEh,000h,000h,0FEh,000h,000h,000h ;   Hex #F0
    Db  000h,000h,000h,000h,018h,018h,07Eh,018h,018h,000h,000h,07Eh,000h,000h ;   Hex #F1
    Db  000h,000h,000h,030h,018h,00Ch,006h,00Ch,018h,030h,000h,07Eh,000h,000h ;   Hex #F2
    Db  000h,000h,000h,00Ch,018h,030h,060h,030h,018h,00Ch,000h,07Eh,000h,000h ;   Hex #F3
    Db  000h,000h,00Eh,01Bh,01Bh,018h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #F4
    Db  018h,018h,018h,018h,018h,018h,018h,018h,0D8h,0D8h,070h,000h,000h,000h ;   Hex #F5
    Db  000h,000h,000h,000h,000h,018h,000h,07Eh,000h,018h,000h,000h,000h,000h ;   Hex #F6
    Db  000h,000h,000h,000h,000h,076h,0DCh,000h,076h,0DCh,000h,000h,000h,000h ;   Hex #F7
    Db  000h,038h,06Ch,06Ch,038h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #F8
    Db  000h,000h,000h,000h,000h,000h,000h,018h,018h,000h,000h,000h,000h,000h ;   Hex #F9
    Db  000h,000h,000h,000h,000h,000h,000h,018h,000h,000h,000h,000h,000h,000h ;   Hex #FA
    Db  000h,00Fh,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,0ECh,06Ch,03Ch,01Ch,000h,000h ;   Hex #FB
    Db  000h,06Ch,036h,036h,036h,036h,036h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FC
    Db  000h,03Ch,066h,00Ch,018h,032h,07Eh,000h,000h,000h,000h,000h,000h,000h ;   Hex #FD
    Db  000h,000h,000h,000h,000h,07Eh,07Eh,07Eh,07Eh,07Eh,07Eh,000h,000h,000h ;   Hex #FE
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FF


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\ega2\863-8x8.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
;***************************************************
;  CHARACTER FONT FILE
;  Source Assembler File
;
;        CODE PAGE: 863 
;  FONT RESOLUTION: 8 x 8 
;
;     DATE CREATED:05-28-1987
;
;
; Output file from: MULTIFON, Version 1A
;
;***************************************************
    Db  000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #0
    Db  07Eh,081h,0A5h,081h,0BDh,099h,081h,07Eh ;   Hex #1
    Db  07Eh,0FFh,0DBh,0FFh,0C3h,0E7h,0FFh,07Eh ;   Hex #2
    Db  06Ch,0FEh,0FEh,0FEh,07Ch,038h,010h,000h ;   Hex #3
    Db  010h,038h,07Ch,0FEh,07Ch,038h,010h,000h ;   Hex #4
    Db  038h,07Ch,038h,0FEh,0FEh,0D6h,010h,038h ;   Hex #5
    Db  010h,038h,07Ch,0FEh,0FEh,07Ch,010h,038h ;   Hex #6
    Db  000h,000h,018h,03Ch,03Ch,018h,000h,000h ;   Hex #7
    Db  0FFh,0FFh,0E7h,0C3h,0C3h,0E7h,0FFh,0FFh ;   Hex #8
    Db  000h,03Ch,066h,042h,042h,066h,03Ch,000h ;   Hex #9
    Db  0FFh,0C3h,099h,0BDh,0BDh,099h,0C3h,0FFh ;   Hex #A
    Db  00Fh,007h,00Fh,07Dh,0CCh,0CCh,0CCh,078h ;   Hex #B
    Db  03Ch,066h,066h,066h,03Ch,018h,07Eh,018h ;   Hex #C
    Db  03Fh,033h,03Fh,030h,030h,070h,0F0h,0E0h ;   Hex #D
    Db  07Fh,063h,07Fh,063h,063h,067h,0E6h,0C0h ;   Hex #E
    Db  018h,0DBh,03Ch,0E7h,0E7h,03Ch,0DBh,018h ;   Hex #F
    Db  080h,0E0h,0F8h,0FEh,0F8h,0E0h,080h,000h ;   Hex #10
    Db  002h,00Eh,03Eh,0FEh,03Eh,00Eh,002h,000h ;   Hex #11
    Db  018h,03Ch,07Eh,018h,018h,07Eh,03Ch,018h ;   Hex #12
    Db  066h,066h,066h,066h,066h,000h,066h,000h ;   Hex #13
    Db  07Fh,0DBh,0DBh,07Bh,01Bh,01Bh,01Bh,000h ;   Hex #14
    Db  03Eh,061h,03Ch,066h,066h,03Ch,086h,07Ch ;   Hex #15
    Db  000h,000h,000h,000h,07Eh,07Eh,07Eh,000h ;   Hex #16
    Db  018h,03Ch,07Eh,018h,07Eh,03Ch,018h,0FFh ;   Hex #17
    Db  018h,03Ch,07Eh,018h,018h,018h,018h,000h ;   Hex #18
    Db  018h,018h,018h,018h,07Eh,03Ch,018h,000h ;   Hex #19
    Db  000h,018h,00Ch,0FEh,00Ch,018h,000h,000h ;   Hex #1A
    Db  000h,030h,060h,0FEh,060h,030h,000h,000h ;   Hex #1B
    Db  000h,000h,0C0h,0C0h,0C0h,0FEh,000h,000h ;   Hex #1C
    Db  000h,024h,066h,0FFh,066h,024h,000h,000h ;   Hex #1D
    Db  000h,018h,03Ch,07Eh,0FFh,0FFh,000h,000h ;   Hex #1E
    Db  000h,0FFh,0FFh,07Eh,03Ch,018h,000h,000h ;   Hex #1F
    Db  000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #20
    Db  018h,03Ch,03Ch,018h,018h,000h,018h,000h ;   Hex #21
    Db  066h,066h,024h,000h,000h,000h,000h,000h ;   Hex #22
    Db  06Ch,06Ch,0FEh,06Ch,0FEh,06Ch,06Ch,000h ;   Hex #23
    Db  018h,03Eh,060h,03Ch,006h,07Ch,018h,000h ;   Hex #24
    Db  000h,0C6h,0CCh,018h,030h,066h,0C6h,000h ;   Hex #25
    Db  038h,06Ch,038h,076h,0DCh,0CCh,076h,000h ;   Hex #26
    Db  018h,018h,030h,000h,000h,000h,000h,000h ;   Hex #27
    Db  00Ch,018h,030h,030h,030h,018h,00Ch,000h ;   Hex #28
    Db  030h,018h,00Ch,00Ch,00Ch,018h,030h,000h ;   Hex #29
    Db  000h,066h,03Ch,0FFh,03Ch,066h,000h,000h ;   Hex #2A
    Db  000h,018h,018h,07Eh,018h,018h,000h,000h ;   Hex #2B
    Db  000h,000h,000h,000h,000h,018h,018h,030h ;   Hex #2C
    Db  000h,000h,000h,07Eh,000h,000h,000h,000h ;   Hex #2D
    Db  000h,000h,000h,000h,000h,018h,018h,000h ;   Hex #2E
    Db  006h,00Ch,018h,030h,060h,0C0h,080h,000h ;   Hex #2F
    Db  038h,06Ch,0C6h,0D6h,0C6h,06Ch,038h,000h ;   Hex #30
    Db  018h,038h,018h,018h,018h,018h,07Eh,000h ;   Hex #31
    Db  07Ch,0C6h,006h,01Ch,030h,066h,0FEh,000h ;   Hex #32
    Db  07Ch,0C6h,006h,03Ch,006h,0C6h,07Ch,000h ;   Hex #33
    Db  01Ch,03Ch,06Ch,0CCh,0FEh,00Ch,01Eh,000h ;   Hex #34
    Db  0FEh,0C0h,0C0h,0FCh,006h,0C6h,07Ch,000h ;   Hex #35
    Db  038h,060h,0C0h,0FCh,0C6h,0C6h,07Ch,000h ;   Hex #36
    Db  0FEh,0C6h,00Ch,018h,030h,030h,030h,000h ;   Hex #37
    Db  07Ch,0C6h,0C6h,07Ch,0C6h,0C6h,07Ch,000h ;   Hex #38
    Db  07Ch,0C6h,0C6h,07Eh,006h,00Ch,078h,000h ;   Hex #39
    Db  000h,018h,018h,000h,000h,018h,018h,000h ;   Hex #3A
    Db  000h,018h,018h,000h,000h,018h,018h,030h ;   Hex #3B
    Db  006h,00Ch,018h,030h,018h,00Ch,006h,000h ;   Hex #3C
    Db  000h,000h,07Eh,000h,000h,07Eh,000h,000h ;   Hex #3D
    Db  060h,030h,018h,00Ch,018h,030h,060h,000h ;   Hex #3E
    Db  07Ch,0C6h,00Ch,018h,018h,000h,018h,000h ;   Hex #3F
    Db  07Ch,0C6h,0DEh,0DEh,0DEh,0C0h,078h,000h ;   Hex #40
    Db  038h,06Ch,0C6h,0FEh,0C6h,0C6h,0C6h,000h ;   Hex #41
    Db  0FCh,066h,066h,07Ch,066h,066h,0FCh,000h ;   Hex #42
    Db  03Ch,066h,0C0h,0C0h,0C0h,066h,03Ch,000h ;   Hex #43
    Db  0F8h,06Ch,066h,066h,066h,06Ch,0F8h,000h ;   Hex #44
    Db  0FEh,062h,068h,078h,068h,062h,0FEh,000h ;   Hex #45
    Db  0FEh,062h,068h,078h,068h,060h,0F0h,000h ;   Hex #46
    Db  03Ch,066h,0C0h,0C0h,0CEh,066h,03Ah,000h ;   Hex #47
    Db  0C6h,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h ;   Hex #48
    Db  03Ch,018h,018h,018h,018h,018h,03Ch,000h ;   Hex #49
    Db  01Eh,00Ch,00Ch,00Ch,0CCh,0CCh,078h,000h ;   Hex #4A
    Db  0E6h,066h,06Ch,078h,06Ch,066h,0E6h,000h ;   Hex #4B
    Db  0F0h,060h,060h,060h,062h,066h,0FEh,000h ;   Hex #4C
    Db  0C6h,0EEh,0FEh,0FEh,0D6h,0C6h,0C6h,000h ;   Hex #4D
    Db  0C6h,0E6h,0F6h,0DEh,0CEh,0C6h,0C6h,000h ;   Hex #4E
    Db  07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #4F
    Db  0FCh,066h,066h,07Ch,060h,060h,0F0h,000h ;   Hex #50
    Db  07Ch,0C6h,0C6h,0C6h,0C6h,0CEh,07Ch,00Eh ;   Hex #51
    Db  0FCh,066h,066h,07Ch,06Ch,066h,0E6h,000h ;   Hex #52
    Db  03Ch,066h,030h,018h,00Ch,066h,03Ch,000h ;   Hex #53
    Db  07Eh,07Eh,05Ah,018h,018h,018h,03Ch,000h ;   Hex #54
    Db  0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #55
    Db  0C6h,0C6h,0C6h,0C6h,0C6h,06Ch,038h,000h ;   Hex #56
    Db  0C6h,0C6h,0C6h,0D6h,0D6h,0FEh,06Ch,000h ;   Hex #57
    Db  0C6h,0C6h,06Ch,038h,06Ch,0C6h,0C6h,000h ;   Hex #58
    Db  066h,066h,066h,03Ch,018h,018h,03Ch,000h ;   Hex #59
    Db  0FEh,0C6h,08Ch,018h,032h,066h,0FEh,000h ;   Hex #5A
    Db  03Ch,030h,030h,030h,030h,030h,03Ch,000h ;   Hex #5B
    Db  0C0h,060h,030h,018h,00Ch,006h,002h,000h ;   Hex #5C
    Db  03Ch,00Ch,00Ch,00Ch,00Ch,00Ch,03Ch,000h ;   Hex #5D
    Db  010h,038h,06Ch,0C6h,000h,000h,000h,000h ;   Hex #5E
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh ;   Hex #5F
    Db  030h,018h,00Ch,000h,000h,000h,000h,000h ;   Hex #60
    Db  000h,000h,078h,00Ch,07Ch,0CCh,076h,000h ;   Hex #61
    Db  0E0h,060h,07Ch,066h,066h,066h,0DCh,000h ;   Hex #62
    Db  000h,000h,07Ch,0C6h,0C0h,0C6h,07Ch,000h ;   Hex #63
    Db  01Ch,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h ;   Hex #64
    Db  000h,000h,07Ch,0C6h,0FEh,0C0h,07Ch,000h ;   Hex #65
    Db  03Ch,066h,060h,0F8h,060h,060h,0F0h,000h ;   Hex #66
    Db  000h,000h,076h,0CCh,0CCh,07Ch,00Ch,0F8h ;   Hex #67
    Db  0E0h,060h,06Ch,076h,066h,066h,0E6h,000h ;   Hex #68
    Db  018h,000h,038h,018h,018h,018h,03Ch,000h ;   Hex #69
    Db  006h,000h,006h,006h,006h,066h,066h,03Ch ;   Hex #6A
    Db  0E0h,060h,066h,06Ch,078h,06Ch,0E6h,000h ;   Hex #6B
    Db  038h,018h,018h,018h,018h,018h,03Ch,000h ;   Hex #6C
    Db  000h,000h,0ECh,0FEh,0D6h,0D6h,0D6h,000h ;   Hex #6D
    Db  000h,000h,0DCh,066h,066h,066h,066h,000h ;   Hex #6E
    Db  000h,000h,07Ch,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #6F
    Db  000h,000h,0DCh,066h,066h,07Ch,060h,0F0h ;   Hex #70
    Db  000h,000h,076h,0CCh,0CCh,07Ch,00Ch,01Eh ;   Hex #71
    Db  000h,000h,0DCh,076h,060h,060h,0F0h,000h ;   Hex #72
    Db  000h,000h,07Eh,0C0h,07Ch,006h,0FCh,000h ;   Hex #73
    Db  030h,030h,0FCh,030h,030h,036h,01Ch,000h ;   Hex #74
    Db  000h,000h,0CCh,0CCh,0CCh,0CCh,076h,000h ;   Hex #75
    Db  000h,000h,0C6h,0C6h,0C6h,06Ch,038h,000h ;   Hex #76
    Db  000h,000h,0C6h,0D6h,0D6h,0FEh,06Ch,000h ;   Hex #77
    Db  000h,000h,0C6h,06Ch,038h,06Ch,0C6h,000h ;   Hex #78
    Db  000h,000h,0C6h,0C6h,0C6h,07Eh,006h,0FCh ;   Hex #79
    Db  000h,000h,07Eh,04Ch,018h,032h,07Eh,000h ;   Hex #7A
    Db  00Eh,018h,018h,070h,018h,018h,00Eh,000h ;   Hex #7B
    Db  018h,018h,018h,018h,018h,018h,018h,000h ;   Hex #7C
    Db  070h,018h,018h,00Eh,018h,018h,070h,000h ;   Hex #7D
    Db  076h,0DCh,000h,000h,000h,000h,000h,000h ;   Hex #7E
    Db  000h,010h,038h,06Ch,0C6h,0C6h,0FEh,000h ;   Hex #7F
    Db  07Ch,0C6h,0C0h,0C0h,0C6h,07Ch,00Ch,078h ;   Hex #80
    Db  0CCh,000h,0CCh,0CCh,0CCh,0CCh,076h,000h ;   Hex #81
    Db  00Ch,018h,07Ch,0C6h,0FEh,0C0h,07Ch,000h ;   Hex #82
    Db  07Ch,082h,078h,00Ch,07Ch,0CCh,076h,000h ;   Hex #83
    Db  07Ch,082h,038h,06Ch,0C6h,0FEh,0C6h,000h ;   Hex #84
    Db  030h,018h,078h,00Ch,07Ch,0CCh,076h,000h ;   Hex #85
    Db  07Fh,0DBh,0DBh,07Bh,01Bh,01Bh,01Bh,000h ;   Hex #86
    Db  000h,000h,07Eh,0C0h,0C0h,07Eh,00Ch,038h ;   Hex #87
    Db  07Ch,082h,07Ch,0C6h,0FEh,0C0h,07Ch,000h ;   Hex #88
    Db  0C6h,000h,07Ch,0C6h,0FEh,0C0h,07Ch,000h ;   Hex #89
    Db  030h,018h,07Ch,0C6h,0FEh,0C0h,07Ch,000h ;   Hex #8A
    Db  066h,000h,038h,018h,018h,018h,03Ch,000h ;   Hex #8B
    Db  07Ch,082h,038h,018h,018h,018h,03Ch,000h ;   Hex #8C
    Db  000h,000h,000h,000h,000h,0FFh,000h,0FFh ;   Hex #8D
    Db  018h,00Ch,038h,06Ch,0C6h,0FEh,0C6h,000h ;   Hex #8E
    Db  03Eh,061h,03Ch,066h,066h,03Ch,086h,07Ch ;   Hex #8F
    Db  018h,030h,0FEh,0C0h,0F8h,0C0h,0FEh,000h ;   Hex #90
    Db  030h,018h,0FEh,0C0h,0FCh,0C0h,0FEh,000h ;   Hex #91
    Db  038h,044h,0FEh,0C0h,0FCh,0C0h,0FEh,000h ;   Hex #92
    Db  07Ch,082h,07Ch,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #93
    Db  0C6h,000h,0FEh,0C0h,0FCh,0C0h,0FEh,000h ;   Hex #94
    Db  066h,000h,03Ch,018h,018h,018h,03Ch,000h ;   Hex #95
    Db  078h,084h,000h,0CCh,0CCh,0CCh,076h,000h ;   Hex #96
    Db  060h,030h,0CCh,0CCh,0CCh,0CCh,076h,000h ;   Hex #97
    Db  000h,0C6h,07Ch,0C6h,0C6h,07Ch,0C6h,000h ;   Hex #98
    Db  07Ch,082h,038h,06Ch,0C6h,06Ch,038h,000h ;   Hex #99
    Db  0C6h,000h,0C6h,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #9A
    Db  018h,018h,07Eh,0C0h,0C0h,07Eh,018h,018h ;   Hex #9B
    Db  038h,06Ch,064h,0F0h,060h,066h,0FCh,000h ;   Hex #9C
    Db  060h,030h,0C6h,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #9D
    Db  07Ch,082h,000h,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #9E
    Db  00Eh,01Bh,018h,03Ch,018h,0D8h,070h,000h ;   Hex #9F
    Db  018h,018h,018h,000h,000h,018h,018h,018h ;   Hex #A0
    Db  00Ch,018h,030h,000h,000h,000h,000h,000h ;   Hex #A1
    Db  00Ch,018h,07Ch,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #A2
    Db  018h,030h,0CCh,0CCh,0CCh,0CCh,076h,000h ;   Hex #A3
    Db  000h,0C6h,000h,000h,000h,000h,000h,000h ;   Hex #A4
    Db  000h,000h,000h,000h,000h,018h,00Ch,078h ;   Hex #A5
    Db  078h,00Ch,038h,00Ch,078h,000h,000h,000h ;   Hex #A6
    Db  0FFh,000h,000h,000h,000h,000h,000h,000h ;   Hex #A7
    Db  07Eh,081h,03Ch,018h,018h,018h,03Ch,000h ;   Hex #A8
    Db  000h,000h,000h,0FEh,0C0h,0C0h,000h,000h ;   Hex #A9
    Db  000h,000h,000h,0FEh,006h,006h,000h,000h ;   Hex #AA
    Db  063h,0E6h,06Ch,07Eh,033h,066h,0CCh,00Fh ;   Hex #AB
    Db  063h,0E6h,06Ch,07Ah,036h,06Ah,0DFh,006h ;   Hex #AC
    Db  0E1h,032h,064h,03Ah,0F6h,02Ah,05Fh,082h ;   Hex #AD
    Db  000h,033h,066h,0CCh,066h,033h,000h,000h ;   Hex #AE
    Db  000h,0CCh,066h,033h,066h,0CCh,000h,000h ;   Hex #AF
    Db  022h,088h,022h,088h,022h,088h,022h,088h ;   Hex #B0
    Db  055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh ;   Hex #B1
    Db  077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh ;   Hex #B2
    Db  018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B3
    Db  018h,018h,018h,018h,0F8h,018h,018h,018h ;   Hex #B4
    Db  018h,018h,0F8h,018h,0F8h,018h,018h,018h ;   Hex #B5
    Db  036h,036h,036h,036h,0F6h,036h,036h,036h ;   Hex #B6
    Db  000h,000h,000h,000h,0FEh,036h,036h,036h ;   Hex #B7
    Db  000h,000h,0F8h,018h,0F8h,018h,018h,018h ;   Hex #B8
    Db  036h,036h,0F6h,006h,0F6h,036h,036h,036h ;   Hex #B9
    Db  036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #BA
    Db  000h,000h,0FEh,006h,0F6h,036h,036h,036h ;   Hex #BB
    Db  036h,036h,0F6h,006h,0FEh,000h,000h,000h ;   Hex #BC
    Db  036h,036h,036h,036h,0FEh,000h,000h,000h ;   Hex #BD
    Db  018h,018h,0F8h,018h,0F8h,000h,000h,000h ;   Hex #BE
    Db  000h,000h,000h,000h,0F8h,018h,018h,018h ;   Hex #BF
    Db  018h,018h,018h,018h,01Fh,000h,000h,000h ;   Hex #C0
    Db  018h,018h,018h,018h,0FFh,000h,000h,000h ;   Hex #C1
    Db  000h,000h,000h,000h,0FFh,018h,018h,018h ;   Hex #C2
    Db  018h,018h,018h,018h,01Fh,018h,018h,018h ;   Hex #C3
    Db  000h,000h,000h,000h,0FFh,000h,000h,000h ;   Hex #C4
    Db  018h,018h,018h,018h,0FFh,018h,018h,018h ;   Hex #C5
    Db  018h,018h,01Fh,018h,01Fh,018h,018h,018h ;   Hex #C6
    Db  036h,036h,036h,036h,037h,036h,036h,036h ;   Hex #C7
    Db  036h,036h,037h,030h,03Fh,000h,000h,000h ;   Hex #C8
    Db  000h,000h,03Fh,030h,037h,036h,036h,036h ;   Hex #C9
    Db  036h,036h,0F7h,000h,0FFh,000h,000h,000h ;   Hex #CA
    Db  000h,000h,0FFh,000h,0F7h,036h,036h,036h ;   Hex #CB
    Db  036h,036h,037h,030h,037h,036h,036h,036h ;   Hex #CC
    Db  000h,000h,0FFh,000h,0FFh,000h,000h,000h ;   Hex #CD
    Db  036h,036h,0F7h,000h,0F7h,036h,036h,036h ;   Hex #CE
    Db  018h,018h,0FFh,000h,0FFh,000h,000h,000h ;   Hex #CF
    Db  036h,036h,036h,036h,0FFh,000h,000h,000h ;   Hex #D0
    Db  000h,000h,0FFh,000h,0FFh,018h,018h,018h ;   Hex #D1
    Db  000h,000h,000h,000h,0FFh,036h,036h,036h ;   Hex #D2
    Db  036h,036h,036h,036h,03Fh,000h,000h,000h ;   Hex #D3
    Db  018h,018h,01Fh,018h,01Fh,000h,000h,000h ;   Hex #D4
    Db  000h,000h,01Fh,018h,01Fh,018h,018h,018h ;   Hex #D5
    Db  000h,000h,000h,000h,03Fh,036h,036h,036h ;   Hex #D6
    Db  036h,036h,036h,036h,0FFh,036h,036h,036h ;   Hex #D7
    Db  018h,018h,0FFh,018h,0FFh,018h,018h,018h ;   Hex #D8
    Db  018h,018h,018h,018h,0F8h,000h,000h,000h ;   Hex #D9
    Db  000h,000h,000h,000h,01Fh,018h,018h,018h ;   Hex #DA
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DB
    Db  000h,000h,000h,000h,0FFh,0FFh,0FFh,0FFh ;   Hex #DC
    Db  0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h ;   Hex #DD
    Db  00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh ;   Hex #DE
    Db  0FFh,0FFh,0FFh,0FFh,000h,000h,000h,000h ;   Hex #DF
    Db  000h,000h,076h,0DCh,0C8h,0DCh,076h,000h ;   Hex #E0
    Db  078h,0CCh,0CCh,0D8h,0CCh,0C6h,0CCh,000h ;   Hex #E1
    Db  0FEh,0C6h,0C0h,0C0h,0C0h,0C0h,0C0h,000h ;   Hex #E2
    Db  000h,000h,0FEh,06Ch,06Ch,06Ch,06Ch,000h ;   Hex #E3
    Db  0FEh,0C6h,060h,030h,060h,0C6h,0FEh,000h ;   Hex #E4
    Db  000h,000h,07Eh,0D8h,0D8h,0D8h,070h,000h ;   Hex #E5
    Db  000h,000h,066h,066h,066h,066h,07Ch,0C0h ;   Hex #E6
    Db  000h,076h,0DCh,018h,018h,018h,018h,000h ;   Hex #E7
    Db  07Eh,018h,03Ch,066h,066h,03Ch,018h,07Eh ;   Hex #E8
    Db  038h,06Ch,0C6h,0FEh,0C6h,06Ch,038h,000h ;   Hex #E9
    Db  038h,06Ch,0C6h,0C6h,06Ch,06Ch,0EEh,000h ;   Hex #EA
    Db  00Eh,018h,00Ch,03Eh,066h,066h,03Ch,000h ;   Hex #EB
    Db  000h,000h,07Eh,0DBh,0DBh,07Eh,000h,000h ;   Hex #EC
    Db  006h,00Ch,07Eh,0DBh,0DBh,07Eh,060h,0C0h ;   Hex #ED
    Db  01Eh,030h,060h,07Eh,060h,030h,01Eh,000h ;   Hex #EE
    Db  000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,000h ;   Hex #EF
    Db  000h,0FEh,000h,0FEh,000h,0FEh,000h,000h ;   Hex #F0
    Db  018h,018h,07Eh,018h,018h,000h,07Eh,000h ;   Hex #F1
    Db  030h,018h,00Ch,018h,030h,000h,07Eh,000h ;   Hex #F2
    Db  00Ch,018h,030h,018h,00Ch,000h,07Eh,000h ;   Hex #F3
    Db  00Eh,01Bh,01Bh,018h,018h,018h,018h,018h ;   Hex #F4
    Db  018h,018h,018h,018h,018h,0D8h,0D8h,070h ;   Hex #F5
    Db  000h,018h,000h,07Eh,000h,018h,000h,000h ;   Hex #F6
    Db  000h,076h,0DCh,000h,076h,0DCh,000h,000h ;   Hex #F7
    Db  038h,06Ch,06Ch,038h,000h,000h,000h,000h ;   Hex #F8
    Db  000h,000h,000h,018h,018h,000h,000h,000h ;   Hex #F9
    Db  000h,000h,000h,018h,000h,000h,000h,000h ;   Hex #FA
    Db  00Fh,00Ch,00Ch,00Ch,0ECh,06Ch,03Ch,01Ch ;   Hex #FB
    Db  06Ch,036h,036h,036h,036h,000h,000h,000h ;   Hex #FC
    Db  078h,00Ch,018h,030h,07Ch,000h,000h,000h ;   Hex #FD
    Db  000h,000h,03Ch,03Ch,03Ch,03Ch,000h,000h ;   Hex #FE
    Db  000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FF


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\ega2\865-8x16.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
;***************************************************
;  CHARACTER FONT FILE
;  Source Assembler File
;
;        CODE PAGE: 865 
;  FONT RESOLUTION: 8 x 16 
;
;     DATE CREATED:05-28-1987
;
;
; Output file from: MULTIFON, Version 1A
;
;***************************************************
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #0
    Db  000h,000h,07Eh,081h,0A5h,081h,081h,0BDh,099h,081h,081h,07Eh,000h,000h,000h,000h ;   Hex #1
    Db  000h,000h,07Eh,0FFh,0DBh,0FFh,0FFh,0C3h,0E7h,0FFh,0FFh,07Eh,000h,000h,000h,000h ;   Hex #2
    Db  000h,000h,000h,000h,06Ch,0FEh,0FEh,0FEh,0FEh,07Ch,038h,010h,000h,000h,000h,000h ;   Hex #3
    Db  000h,000h,000h,000h,010h,038h,07Ch,0FEh,07Ch,038h,010h,000h,000h,000h,000h,000h ;   Hex #4
    Db  000h,000h,000h,018h,03Ch,03Ch,0E7h,0E7h,0E7h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #5
    Db  000h,000h,000h,018h,03Ch,07Eh,0FFh,0FFh,07Eh,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #6
    Db  000h,000h,000h,000h,000h,000h,018h,03Ch,03Ch,018h,000h,000h,000h,000h,000h,000h ;   Hex #7
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0E7h,0C3h,0C3h,0E7h,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #8
    Db  000h,000h,000h,000h,000h,03Ch,066h,042h,042h,066h,03Ch,000h,000h,000h,000h,000h ;   Hex #9
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0C3h,099h,0BDh,0BDh,099h,0C3h,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #A
    Db  000h,000h,01Eh,00Eh,01Ah,032h,078h,0CCh,0CCh,0CCh,0CCh,078h,000h,000h,000h,000h ;   Hex #B
    Db  000h,000h,03Ch,066h,066h,066h,066h,03Ch,018h,07Eh,018h,018h,000h,000h,000h,000h ;   Hex #C
    Db  000h,000h,03Fh,033h,03Fh,030h,030h,030h,030h,070h,0F0h,0E0h,000h,000h,000h,000h ;   Hex #D
    Db  000h,000h,07Fh,063h,07Fh,063h,063h,063h,063h,067h,0E7h,0E6h,0C0h,000h,000h,000h ;   Hex #E
    Db  000h,000h,000h,018h,018h,0DBh,03Ch,0E7h,03Ch,0DBh,018h,018h,000h,000h,000h,000h ;   Hex #F
    Db  000h,080h,0C0h,0E0h,0F0h,0F8h,0FEh,0F8h,0F0h,0E0h,0C0h,080h,000h,000h,000h,000h ;   Hex #10
    Db  000h,002h,006h,00Eh,01Eh,03Eh,0FEh,03Eh,01Eh,00Eh,006h,002h,000h,000h,000h,000h ;   Hex #11
    Db  000h,000h,018h,03Ch,07Eh,018h,018h,018h,07Eh,03Ch,018h,000h,000h,000h,000h,000h ;   Hex #12
    Db  000h,000h,066h,066h,066h,066h,066h,066h,066h,000h,066h,066h,000h,000h,000h,000h ;   Hex #13
    Db  000h,000h,07Fh,0DBh,0DBh,0DBh,07Bh,01Bh,01Bh,01Bh,01Bh,01Bh,000h,000h,000h,000h ;   Hex #14
    Db  000h,07Ch,0C6h,060h,038h,06Ch,0C6h,0C6h,06Ch,038h,00Ch,0C6h,07Ch,000h,000h,000h ;   Hex #15
    Db  000h,000h,000h,000h,000h,000h,000h,000h,0FEh,0FEh,0FEh,0FEh,000h,000h,000h,000h ;   Hex #16
    Db  000h,000h,018h,03Ch,07Eh,018h,018h,018h,07Eh,03Ch,018h,07Eh,000h,000h,000h,000h ;   Hex #17
    Db  000h,000h,018h,03Ch,07Eh,018h,018h,018h,018h,018h,018h,018h,000h,000h,000h,000h ;   Hex #18
    Db  000h,000h,018h,018h,018h,018h,018h,018h,018h,07Eh,03Ch,018h,000h,000h,000h,000h ;   Hex #19
    Db  000h,000h,000h,000h,000h,018h,00Ch,0FEh,00Ch,018h,000h,000h,000h,000h,000h,000h ;   Hex #1A
    Db  000h,000h,000h,000h,000h,030h,060h,0FEh,060h,030h,000h,000h,000h,000h,000h,000h ;   Hex #1B
    Db  000h,000h,000h,000h,000h,000h,0C0h,0C0h,0C0h,0FEh,000h,000h,000h,000h,000h,000h ;   Hex #1C
    Db  000h,000h,000h,000h,000h,028h,06Ch,0FEh,06Ch,028h,000h,000h,000h,000h,000h,000h ;   Hex #1D
    Db  000h,000h,000h,000h,010h,038h,038h,07Ch,07Ch,0FEh,0FEh,000h,000h,000h,000h,000h ;   Hex #1E
    Db  000h,000h,000h,000h,0FEh,0FEh,07Ch,07Ch,038h,038h,010h,000h,000h,000h,000h,000h ;   Hex #1F
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #20
    Db  000h,000h,018h,03Ch,03Ch,03Ch,018h,018h,018h,000h,018h,018h,000h,000h,000h,000h ;   Hex #21
    Db  000h,066h,066h,066h,024h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #22
    Db  000h,000h,000h,06Ch,06Ch,0FEh,06Ch,06Ch,06Ch,0FEh,06Ch,06Ch,000h,000h,000h,000h ;   Hex #23
    Db  018h,018h,07Ch,0C6h,0C2h,0C0h,07Ch,006h,006h,086h,0C6h,07Ch,018h,018h,000h,000h ;   Hex #24
    Db  000h,000h,000h,000h,0C2h,0C6h,00Ch,018h,030h,060h,0C6h,086h,000h,000h,000h,000h ;   Hex #25
    Db  000h,000h,038h,06Ch,06Ch,038h,076h,0DCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #26
    Db  000h,030h,030h,030h,060h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #27
    Db  000h,000h,00Ch,018h,030h,030h,030h,030h,030h,030h,018h,00Ch,000h,000h,000h,000h ;   Hex #28
    Db  000h,000h,030h,018h,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,018h,030h,000h,000h,000h,000h ;   Hex #29
    Db  000h,000h,000h,000h,000h,066h,03Ch,0FFh,03Ch,066h,000h,000h,000h,000h,000h,000h ;   Hex #2A
    Db  000h,000h,000h,000h,000h,018h,018h,07Eh,018h,018h,000h,000h,000h,000h,000h,000h ;   Hex #2B
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,018h,018h,030h,000h,000h,000h ;   Hex #2C
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #2D
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,018h,018h,000h,000h,000h,000h ;   Hex #2E
    Db  000h,000h,000h,000h,002h,006h,00Ch,018h,030h,060h,0C0h,080h,000h,000h,000h,000h ;   Hex #2F
    Db  000h,000h,038h,06Ch,0C6h,0C6h,0D6h,0D6h,0C6h,0C6h,06Ch,038h,000h,000h,000h,000h ;   Hex #30
    Db  000h,000h,018h,038h,078h,018h,018h,018h,018h,018h,018h,07Eh,000h,000h,000h,000h ;   Hex #31
    Db  000h,000h,07Ch,0C6h,006h,00Ch,018h,030h,060h,0C0h,0C6h,0FEh,000h,000h,000h,000h ;   Hex #32
    Db  000h,000h,07Ch,0C6h,006h,006h,03Ch,006h,006h,006h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #33
    Db  000h,000h,00Ch,01Ch,03Ch,06Ch,0CCh,0FEh,00Ch,00Ch,00Ch,01Eh,000h,000h,000h,000h ;   Hex #34
    Db  000h,000h,0FEh,0C0h,0C0h,0C0h,0FCh,006h,006h,006h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #35
    Db  000h,000h,038h,060h,0C0h,0C0h,0FCh,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #36
    Db  000h,000h,0FEh,0C6h,006h,006h,00Ch,018h,030h,030h,030h,030h,000h,000h,000h,000h ;   Hex #37
    Db  000h,000h,07Ch,0C6h,0C6h,0C6h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #38
    Db  000h,000h,07Ch,0C6h,0C6h,0C6h,07Eh,006h,006h,006h,00Ch,078h,000h,000h,000h,000h ;   Hex #39
    Db  000h,000h,000h,000h,018h,018h,000h,000h,000h,018h,018h,000h,000h,000h,000h,000h ;   Hex #3A
    Db  000h,000h,000h,000h,018h,018h,000h,000h,000h,018h,018h,030h,000h,000h,000h,000h ;   Hex #3B
    Db  000h,000h,000h,006h,00Ch,018h,030h,060h,030h,018h,00Ch,006h,000h,000h,000h,000h ;   Hex #3C
    Db  000h,000h,000h,000h,000h,07Eh,000h,000h,07Eh,000h,000h,000h,000h,000h,000h,000h ;   Hex #3D
    Db  000h,000h,000h,060h,030h,018h,00Ch,006h,00Ch,018h,030h,060h,000h,000h,000h,000h ;   Hex #3E
    Db  000h,000h,07Ch,0C6h,0C6h,00Ch,018h,018h,018h,000h,018h,018h,000h,000h,000h,000h ;   Hex #3F
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0DEh,0DEh,0DEh,0DCh,0C0h,07Ch,000h,000h,000h,000h ;   Hex #40
    Db  000h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #41
    Db  000h,000h,0FCh,066h,066h,066h,07Ch,066h,066h,066h,066h,0FCh,000h,000h,000h,000h ;   Hex #42
    Db  000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0C0h,0C0h,0C2h,066h,03Ch,000h,000h,000h,000h ;   Hex #43
    Db  000h,000h,0F8h,06Ch,066h,066h,066h,066h,066h,066h,06Ch,0F8h,000h,000h,000h,000h ;   Hex #44
    Db  000h,000h,0FEh,066h,062h,068h,078h,068h,060h,062h,066h,0FEh,000h,000h,000h,000h ;   Hex #45
    Db  000h,000h,0FEh,066h,062h,068h,078h,068h,060h,060h,060h,0F0h,000h,000h,000h,000h ;   Hex #46
    Db  000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0DEh,0C6h,0C6h,066h,03Ah,000h,000h,000h,000h ;   Hex #47
    Db  000h,000h,0C6h,0C6h,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #48
    Db  000h,000h,03Ch,018h,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #49
    Db  000h,000h,01Eh,00Ch,00Ch,00Ch,00Ch,00Ch,0CCh,0CCh,0CCh,078h,000h,000h,000h,000h ;   Hex #4A
    Db  000h,000h,0E6h,066h,066h,06Ch,078h,078h,06Ch,066h,066h,0E6h,000h,000h,000h,000h ;   Hex #4B
    Db  000h,000h,0F0h,060h,060h,060h,060h,060h,060h,062h,066h,0FEh,000h,000h,000h,000h ;   Hex #4C
    Db  000h,000h,0C6h,0EEh,0FEh,0FEh,0D6h,0C6h,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #4D
    Db  000h,000h,0C6h,0E6h,0F6h,0FEh,0DEh,0CEh,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #4E
    Db  000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #4F
    Db  000h,000h,0FCh,066h,066h,066h,07Ch,060h,060h,060h,060h,0F0h,000h,000h,000h,000h ;   Hex #50
    Db  000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0D6h,0DEh,07Ch,00Ch,00Eh,000h,000h ;   Hex #51
    Db  000h,000h,0FCh,066h,066h,066h,07Ch,06Ch,066h,066h,066h,0E6h,000h,000h,000h,000h ;   Hex #52
    Db  000h,000h,07Ch,0C6h,0C6h,060h,038h,00Ch,006h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #53
    Db  000h,000h,07Eh,07Eh,05Ah,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #54
    Db  000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #55
    Db  000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,06Ch,038h,010h,000h,000h,000h,000h ;   Hex #56
    Db  000h,000h,0C6h,0C6h,0C6h,0C6h,0D6h,0D6h,0D6h,0FEh,0EEh,06Ch,000h,000h,000h,000h ;   Hex #57
    Db  000h,000h,0C6h,0C6h,06Ch,07Ch,038h,038h,07Ch,06Ch,0C6h,0C6h,000h,000h,000h,000h ;   Hex #58
    Db  000h,000h,066h,066h,066h,066h,03Ch,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #59
    Db  000h,000h,0FEh,0C6h,086h,00Ch,018h,030h,060h,0C2h,0C6h,0FEh,000h,000h,000h,000h ;   Hex #5A
    Db  000h,000h,03Ch,030h,030h,030h,030h,030h,030h,030h,030h,03Ch,000h,000h,000h,000h ;   Hex #5B
    Db  000h,000h,000h,080h,0C0h,0E0h,070h,038h,01Ch,00Eh,006h,002h,000h,000h,000h,000h ;   Hex #5C
    Db  000h,000h,03Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,00Ch,03Ch,000h,000h,000h,000h ;   Hex #5D
    Db  010h,038h,06Ch,0C6h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #5E
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,0FFh,000h,000h ;   Hex #5F
    Db  000h,030h,018h,00Ch,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #60
    Db  000h,000h,000h,000h,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #61
    Db  000h,000h,0E0h,060h,060h,078h,06Ch,066h,066h,066h,066h,07Ch,000h,000h,000h,000h ;   Hex #62
    Db  000h,000h,000h,000h,000h,07Ch,0C6h,0C0h,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #63
    Db  000h,000h,01Ch,00Ch,00Ch,03Ch,06Ch,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #64
    Db  000h,000h,000h,000h,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #65
    Db  000h,000h,01Ch,036h,032h,030h,078h,030h,030h,030h,030h,078h,000h,000h,000h,000h ;   Hex #66
    Db  000h,000h,000h,000h,000h,076h,0CCh,0CCh,0CCh,0CCh,0CCh,07Ch,00Ch,0CCh,078h,000h ;   Hex #67
    Db  000h,000h,0E0h,060h,060h,06Ch,076h,066h,066h,066h,066h,0E6h,000h,000h,000h,000h ;   Hex #68
    Db  000h,000h,018h,018h,000h,038h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #69
    Db  000h,000h,006h,006h,000h,00Eh,006h,006h,006h,006h,006h,006h,066h,066h,03Ch,000h ;   Hex #6A
    Db  000h,000h,0E0h,060h,060h,066h,06Ch,078h,078h,06Ch,066h,0E6h,000h,000h,000h,000h ;   Hex #6B
    Db  000h,000h,038h,018h,018h,018h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #6C
    Db  000h,000h,000h,000h,000h,0ECh,0FEh,0D6h,0D6h,0D6h,0D6h,0C6h,000h,000h,000h,000h ;   Hex #6D
    Db  000h,000h,000h,000h,000h,0DCh,066h,066h,066h,066h,066h,066h,000h,000h,000h,000h ;   Hex #6E
    Db  000h,000h,000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #6F
    Db  000h,000h,000h,000h,000h,0DCh,066h,066h,066h,066h,066h,07Ch,060h,060h,0F0h,000h ;   Hex #70
    Db  000h,000h,000h,000h,000h,076h,0CCh,0CCh,0CCh,0CCh,0CCh,07Ch,00Ch,00Ch,01Eh,000h ;   Hex #71
    Db  000h,000h,000h,000h,000h,0DCh,076h,066h,060h,060h,060h,0F0h,000h,000h,000h,000h ;   Hex #72
    Db  000h,000h,000h,000h,000h,07Ch,0C6h,060h,038h,00Ch,0C6h,07Ch,000h,000h,000h,000h ;   Hex #73
    Db  000h,000h,010h,030h,030h,0FCh,030h,030h,030h,030h,036h,01Ch,000h,000h,000h,000h ;   Hex #74
    Db  000h,000h,000h,000h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #75
    Db  000h,000h,000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,06Ch,038h,000h,000h,000h,000h ;   Hex #76
    Db  000h,000h,000h,000h,000h,0C6h,0C6h,0D6h,0D6h,0D6h,0FEh,06Ch,000h,000h,000h,000h ;   Hex #77
    Db  000h,000h,000h,000h,000h,0C6h,06Ch,038h,038h,038h,06Ch,0C6h,000h,000h,000h,000h ;   Hex #78
    Db  000h,000h,000h,000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Eh,006h,00Ch,0F8h,000h ;   Hex #79
    Db  000h,000h,000h,000h,000h,0FEh,0CCh,018h,030h,060h,0C6h,0FEh,000h,000h,000h,000h ;   Hex #7A
    Db  000h,000h,00Eh,018h,018h,018h,070h,018h,018h,018h,018h,00Eh,000h,000h,000h,000h ;   Hex #7B
    Db  000h,000h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,000h,000h,000h,000h ;   Hex #7C
    Db  000h,000h,070h,018h,018h,018h,00Eh,018h,018h,018h,018h,070h,000h,000h,000h,000h ;   Hex #7D
    Db  000h,076h,0DCh,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #7E
    Db  000h,000h,000h,000h,010h,038h,06Ch,0C6h,0C6h,0C6h,0FEh,000h,000h,000h,000h,000h ;   Hex #7F
    Db  000h,000h,03Ch,066h,0C2h,0C0h,0C0h,0C0h,0C0h,0C2h,066h,03Ch,018h,070h,000h,000h ;   Hex #80
    Db  000h,000h,0CCh,000h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #81
    Db  000h,00Ch,018h,030h,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #82
    Db  000h,010h,038h,06Ch,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #83
    Db  000h,000h,0CCh,000h,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #84
    Db  000h,060h,030h,018h,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #85
    Db  000h,038h,06Ch,038h,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #86
    Db  000h,000h,000h,000h,000h,07Ch,0C6h,0C0h,0C0h,0C0h,0C6h,07Ch,018h,070h,000h,000h ;   Hex #87
    Db  000h,010h,038h,06Ch,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #88
    Db  000h,000h,0C6h,000h,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #89
    Db  000h,060h,030h,018h,000h,07Ch,0C6h,0FEh,0C0h,0C0h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #8A
    Db  000h,000h,066h,000h,000h,038h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #8B
    Db  000h,018h,03Ch,066h,000h,038h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #8C
    Db  000h,060h,030h,018h,000h,038h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #8D
    Db  000h,0C6h,000h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #8E
    Db  038h,06Ch,038h,010h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #8F
    Db  00Ch,018h,000h,0FEh,066h,062h,068h,078h,068h,062h,066h,0FEh,000h,000h,000h,000h ;   Hex #90
    Db  000h,000h,000h,000h,000h,0ECh,036h,036h,07Eh,0D8h,0D8h,06Eh,000h,000h,000h,000h ;   Hex #91
    Db  000h,000h,03Eh,06Ch,0CCh,0CCh,0FEh,0CCh,0CCh,0CCh,0CCh,0CEh,000h,000h,000h,000h ;   Hex #92
    Db  000h,010h,038h,06Ch,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #93
    Db  000h,000h,0C6h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #94
    Db  000h,060h,030h,018h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #95
    Db  000h,030h,078h,0CCh,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #96
    Db  000h,060h,030h,018h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #97
    Db  000h,000h,0C6h,000h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Eh,006h,00Ch,078h,000h ;   Hex #98
    Db  000h,0C6h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #99
    Db  000h,0C6h,000h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #9A
    Db  000h,000h,000h,000h,000h,07Ch,0C6h,0CEh,0D6h,0E6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #9B
    Db  000h,038h,06Ch,064h,060h,0F0h,060h,060h,060h,060h,0E6h,0FCh,000h,000h,000h,000h ;   Hex #9C
    Db  000h,004h,07Ch,0CEh,0CEh,0D6h,0D6h,0D6h,0D6h,0E6h,0E6h,07Ch,040h,000h,000h,000h ;   Hex #9D
    Db  000h,0F8h,0CCh,0CCh,0F8h,0C4h,0CCh,0DEh,0CCh,0CCh,0CCh,0C6h,000h,000h,000h,000h ;   Hex #9E
    Db  000h,00Eh,01Bh,018h,018h,018h,07Eh,018h,018h,018h,0D8h,070h,000h,000h,000h,000h ;   Hex #9F
    Db  000h,018h,030h,060h,000h,078h,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #A0
    Db  000h,00Ch,018h,030h,000h,038h,018h,018h,018h,018h,018h,03Ch,000h,000h,000h,000h ;   Hex #A1
    Db  000h,018h,030h,060h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #A2
    Db  000h,018h,030h,060h,000h,0CCh,0CCh,0CCh,0CCh,0CCh,0CCh,076h,000h,000h,000h,000h ;   Hex #A3
    Db  000h,000h,076h,0DCh,000h,0DCh,066h,066h,066h,066h,066h,066h,000h,000h,000h,000h ;   Hex #A4
    Db  076h,0DCh,000h,0C6h,0E6h,0F6h,0FEh,0DEh,0CEh,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #A5
    Db  000h,000h,03Ch,06Ch,06Ch,03Eh,000h,07Eh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #A6
    Db  000h,000h,038h,06Ch,06Ch,038h,000h,07Ch,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #A7
    Db  000h,000h,030h,030h,000h,030h,030h,060h,0C0h,0C6h,0C6h,07Ch,000h,000h,000h,000h ;   Hex #A8
    Db  000h,000h,000h,000h,000h,000h,0FEh,0C0h,0C0h,0C0h,0C0h,000h,000h,000h,000h,000h ;   Hex #A9
    Db  000h,000h,000h,000h,000h,000h,0FEh,006h,006h,006h,006h,000h,000h,000h,000h,000h ;   Hex #AA
    Db  000h,060h,0E0h,062h,066h,06Ch,018h,030h,060h,0DCh,086h,00Ch,018h,03Eh,000h,000h ;   Hex #AB
    Db  000h,060h,0E0h,062h,066h,06Ch,018h,030h,066h,0CEh,09Ah,03Fh,006h,006h,000h,000h ;   Hex #AC
    Db  000h,000h,018h,018h,000h,018h,018h,018h,03Ch,03Ch,03Ch,018h,000h,000h,000h,000h ;   Hex #AD
    Db  000h,000h,000h,000h,000h,036h,06Ch,0D8h,06Ch,036h,000h,000h,000h,000h,000h,000h ;   Hex #AE
    Db  000h,000h,000h,000h,0C6h,07Ch,0C6h,0C6h,0C6h,0C6h,07Ch,0C6h,000h,000h,000h,000h ;   Hex #AF
    Db  011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h,011h,044h ;   Hex #B0
    Db  055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh ;   Hex #B1
    Db  0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh,077h ;   Hex #B2
    Db  018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B3
    Db  018h,018h,018h,018h,018h,018h,018h,0F8h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B4
    Db  018h,018h,018h,018h,018h,0F8h,018h,0F8h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B5
    Db  036h,036h,036h,036h,036h,036h,036h,0F6h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #B6
    Db  000h,000h,000h,000h,000h,000h,000h,0FEh,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #B7
    Db  000h,000h,000h,000h,000h,0F8h,018h,0F8h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B8
    Db  036h,036h,036h,036h,036h,0F6h,006h,0F6h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #B9
    Db  036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #BA
    Db  000h,000h,000h,000h,000h,0FEh,006h,0F6h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #BB
    Db  036h,036h,036h,036h,036h,0F6h,006h,0FEh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #BC
    Db  036h,036h,036h,036h,036h,036h,036h,0FEh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #BD
    Db  018h,018h,018h,018h,018h,0F8h,018h,0F8h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #BE
    Db  000h,000h,000h,000h,000h,000h,000h,0F8h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #BF
    Db  018h,018h,018h,018h,018h,018h,018h,01Fh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #C0
    Db  018h,018h,018h,018h,018h,018h,018h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #C1
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #C2
    Db  018h,018h,018h,018h,018h,018h,018h,01Fh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #C3
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #C4
    Db  018h,018h,018h,018h,018h,018h,018h,0FFh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #C5
    Db  018h,018h,018h,018h,018h,01Fh,018h,01Fh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #C6
    Db  036h,036h,036h,036h,036h,036h,036h,037h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #C7
    Db  036h,036h,036h,036h,036h,037h,030h,03Fh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #C8
    Db  000h,000h,000h,000h,000h,03Fh,030h,037h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #C9
    Db  036h,036h,036h,036h,036h,0F7h,000h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #CA
    Db  000h,000h,000h,000h,000h,0FFh,000h,0F7h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #CB
    Db  036h,036h,036h,036h,036h,037h,030h,037h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #CC
    Db  000h,000h,000h,000h,000h,0FFh,000h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #CD
    Db  036h,036h,036h,036h,036h,0F7h,000h,0F7h,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #CE
    Db  018h,018h,018h,018h,018h,0FFh,000h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #CF
    Db  036h,036h,036h,036h,036h,036h,036h,0FFh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #D0
    Db  000h,000h,000h,000h,000h,0FFh,000h,0FFh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #D1
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #D2
    Db  036h,036h,036h,036h,036h,036h,036h,03Fh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #D3
    Db  018h,018h,018h,018h,018h,01Fh,018h,01Fh,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #D4
    Db  000h,000h,000h,000h,000h,01Fh,018h,01Fh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #D5
    Db  000h,000h,000h,000h,000h,000h,000h,03Fh,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #D6
    Db  036h,036h,036h,036h,036h,036h,036h,0FFh,036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #D7
    Db  018h,018h,018h,018h,018h,0FFh,018h,0FFh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #D8
    Db  018h,018h,018h,018h,018h,018h,018h,0F8h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #D9
    Db  000h,000h,000h,000h,000h,000h,000h,01Fh,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #DA
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DB
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DC
    Db  0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h ;   Hex #DD
    Db  00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh ;   Hex #DE
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #DF
    Db  000h,000h,000h,000h,000h,076h,0DCh,0D8h,0D8h,0D8h,0DCh,076h,000h,000h,000h,000h ;   Hex #E0
    Db  000h,000h,078h,0CCh,0CCh,0CCh,0D8h,0CCh,0C6h,0C6h,0C6h,0CCh,000h,000h,000h,000h ;   Hex #E1
    Db  000h,000h,0FEh,0C6h,0C6h,0C0h,0C0h,0C0h,0C0h,0C0h,0C0h,0C0h,000h,000h,000h,000h ;   Hex #E2
    Db  000h,000h,000h,000h,000h,0FEh,06Ch,06Ch,06Ch,06Ch,06Ch,06Ch,000h,000h,000h,000h ;   Hex #E3
    Db  000h,000h,0FEh,0C6h,060h,030h,018h,018h,030h,060h,0C6h,0FEh,000h,000h,000h,000h ;   Hex #E4
    Db  000h,000h,000h,000h,000h,07Eh,0D8h,0D8h,0D8h,0D8h,0D8h,070h,000h,000h,000h,000h ;   Hex #E5
    Db  000h,000h,000h,000h,000h,066h,066h,066h,066h,066h,066h,07Ch,060h,060h,0C0h,000h ;   Hex #E6
    Db  000h,000h,000h,000h,076h,0DCh,018h,018h,018h,018h,018h,018h,000h,000h,000h,000h ;   Hex #E7
    Db  000h,000h,07Eh,018h,03Ch,066h,066h,066h,066h,03Ch,018h,07Eh,000h,000h,000h,000h ;   Hex #E8
    Db  000h,000h,038h,06Ch,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,06Ch,038h,000h,000h,000h,000h ;   Hex #E9
    Db  000h,000h,038h,06Ch,0C6h,0C6h,0C6h,06Ch,06Ch,06Ch,06Ch,0EEh,000h,000h,000h,000h ;   Hex #EA
    Db  000h,000h,01Eh,030h,018h,00Ch,03Eh,066h,066h,066h,066h,03Ch,000h,000h,000h,000h ;   Hex #EB
    Db  000h,000h,000h,000h,000h,07Eh,0DBh,0DBh,0DBh,07Eh,000h,000h,000h,000h,000h,000h ;   Hex #EC
    Db  000h,000h,000h,003h,006h,07Eh,0DBh,0DBh,0F3h,07Eh,060h,0C0h,000h,000h,000h,000h ;   Hex #ED
    Db  000h,000h,01Ch,030h,060h,060h,07Ch,060h,060h,060h,030h,01Ch,000h,000h,000h,000h ;   Hex #EE
    Db  000h,000h,000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,000h,000h,000h,000h ;   Hex #EF
    Db  000h,000h,000h,000h,0FEh,000h,000h,0FEh,000h,000h,0FEh,000h,000h,000h,000h,000h ;   Hex #F0
    Db  000h,000h,000h,000h,018h,018h,07Eh,018h,018h,000h,000h,07Eh,000h,000h,000h,000h ;   Hex #F1
    Db  000h,000h,000h,030h,018h,00Ch,006h,00Ch,018h,030h,000h,07Eh,000h,000h,000h,000h ;   Hex #F2
    Db  000h,000h,000h,00Ch,018h,030h,060h,030h,018h,00Ch,000h,07Eh,000h,000h,000h,000h ;   Hex #F3
    Db  000h,000h,00Eh,01Bh,01Bh,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #F4
    Db  018h,018h,018h,018h,018h,018h,018h,018h,018h,0D8h,0D8h,0D8h,070h,000h,000h,000h ;   Hex #F5
    Db  000h,000h,000h,000h,000h,018h,000h,07Eh,000h,018h,000h,000h,000h,000h,000h,000h ;   Hex #F6
    Db  000h,000h,000h,000h,000h,076h,0DCh,000h,076h,0DCh,000h,000h,000h,000h,000h,000h ;   Hex #F7
    Db  000h,038h,06Ch,06Ch,038h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #F8
    Db  000h,000h,000h,000h,000h,000h,000h,018h,018h,000h,000h,000h,000h,000h,000h,000h ;   Hex #F9
    Db  000h,000h,000h,000h,000h,000h,000h,018h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FA
    Db  000h,00Fh,00Ch,00Ch,00Ch,00Ch,00Ch,0ECh,06Ch,06Ch,03Ch,01Ch,000h,000h,000h,000h ;   Hex #FB
    Db  000h,06Ch,036h,036h,036h,036h,036h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FC
    Db  000h,03Ch,066h,00Ch,018h,032h,07Eh,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FD
    Db  000h,000h,000h,000h,07Eh,07Eh,07Eh,07Eh,07Eh,07Eh,07Eh,000h,000h,000h,000h,000h ;   Hex #FE
    Db  000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FF


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\lcd\437-cpi.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
CODE    SEGMENT BYTE PUBLIC 'CODE'
        ASSUME CS:CODE,DS:CODE

IF1
;        %OUT    EGA.CPI creation file
;        %OUT    .
;        %OUT    CP SRC files:
;        %OUT    .
;        %OUT    .       CODE PAGE:  437
ENDIF

EGA437: DW     LEN_437                  ;SIZE OF ENTRY HEADER
        DW     POST_EGA437,0            ;POINTER TO NEXT HEADER
        DW     1                        ;DEVICE TYPE
        DB     "LCD     "               ;DEVICE SUBTYPE ID
        DW     437                      ;CODE PAGE ID
        DW     3 DUP(0)                 ;RESERVED
        DW     OFFSET DATA437,0         ;POINTER TO FONTS
LEN_437 EQU    ($-EGA437)

DATA437:DW     1                        ;CART/NON-CART
        DW     1                        ;# OF FONTS
        DW     LEN_D437                 ;LENGTH OF DATA
D437:                                   ;
        DB     8,8                      ;CHARACTER BOX SIZE
        DB     0,0                      ;ASPECT RATIO (UNUSED)
        DW     256                      ;NUMBER OF CHARACTERS
    Db  000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #0
    Db  03Ch,042h,0A5h,0A5h,081h,0BDh,05Ah,03Ch ;   Hex #1
    Db  03Ch,07Eh,0DBh,0DBh,0FFh,0C3h,066h,03Ch ;   Hex #2
    Db  036h,07Fh,07Fh,07Fh,03Eh,01Ch,008h,000h ;   Hex #3
    Db  008h,01Ch,03Eh,07Fh,03Eh,01Ch,008h,000h ;   Hex #4
    Db  01Ch,03Eh,01Ch,07Fh,07Fh,036h,008h,01Ch ;   Hex #5
    Db  008h,01Ch,03Eh,07Fh,07Fh,036h,008h,01Ch ;   Hex #6
    Db  000h,000h,018h,03Ch,03Ch,018h,000h,000h ;   Hex #7
    Db  0FFh,0FFh,0E7h,0C3h,0C3h,0E7h,0FFh,0FFh ;   Hex #8
    Db  000h,000h,03Ch,066h,066h,03Ch,000h,000h ;   Hex #9
    Db  0FFh,0FFh,0C3h,099h,099h,0C3h,0FFh,0FFh ;   Hex #A
    Db  007h,003h,03Eh,066h,066h,066h,03Ch,000h ;   Hex #B
    Db  03Ch,066h,066h,066h,03Ch,018h,03Ch,018h ;   Hex #C
    Db  008h,00Ch,00Eh,00Ah,00Ah,008h,038h,030h ;   Hex #D
    Db  018h,016h,019h,017h,071h,061h,007h,006h ;   Hex #E
    Db  048h,06Bh,03Eh,0E4h,027h,07Ch,0D6h,012h ;   Hex #F
    Db  040h,070h,07Ch,07Fh,07Ch,070h,040h,000h ;   Hex #10
    Db  001h,007h,01Fh,07Fh,01Fh,007h,001h,000h ;   Hex #11
    Db  018h,03Ch,07Eh,018h,018h,07Eh,03Ch,018h ;   Hex #12
    Db  036h,036h,036h,036h,036h,000h,036h,000h ;   Hex #13
    Db  03Fh,06Ah,06Ah,03Ah,00Ah,00Ah,01Ah,000h ;   Hex #14
    Db  03Ch,076h,038h,06Ch,036h,01Ch,06Eh,03Ch ;   Hex #15
    Db  000h,000h,000h,07Fh,07Fh,07Fh,000h,000h ;   Hex #16
    Db  018h,03Ch,07Eh,018h,07Eh,03Ch,018h,0FFh ;   Hex #17
    Db  018h,03Ch,07Eh,05Ah,018h,018h,018h,000h ;   Hex #18
    Db  018h,018h,018h,05Ah,07Eh,03Ch,018h,000h ;   Hex #19
    Db  000h,00Ch,006h,07Fh,07Fh,006h,00Ch,000h ;   Hex #1A
    Db  000h,018h,030h,07Fh,07Fh,030h,018h,000h ;   Hex #1B
    Db  000h,000h,060h,060h,07Fh,07Fh,000h,000h ;   Hex #1C
    Db  000h,014h,036h,07Fh,07Fh,036h,014h,000h ;   Hex #1D
    Db  008h,008h,01Ch,01Ch,03Eh,03Eh,07Fh,000h ;   Hex #1E
    Db  07Fh,03Eh,03Eh,01Ch,01Ch,008h,008h,000h ;   Hex #1F
    Db  000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #20
    Db  018h,018h,018h,018h,018h,000h,018h,000h ;   Hex #21
    Db  036h,036h,014h,000h,000h,000h,000h,000h ;   Hex #22
    Db  00Ah,00Ah,03Fh,014h,07Eh,028h,028h,000h ;   Hex #23
    Db  008h,03Eh,068h,03Eh,00Bh,07Eh,008h,000h ;   Hex #24
    Db  001h,03Fh,052h,06Ch,01Bh,035h,076h,000h ;   Hex #25
    Db  01Ch,036h,01Ch,03Bh,06Eh,066h,03Bh,000h ;   Hex #26
    Db  018h,018h,030h,000h,000h,000h,000h,000h ;   Hex #27
    Db  006h,00Ch,018h,018h,018h,00Ch,006h,000h ;   Hex #28
    Db  030h,018h,00Ch,00Ch,00Ch,018h,030h,000h ;   Hex #29
    Db  000h,036h,01Ch,07Fh,01Ch,036h,000h,000h ;   Hex #2A
    Db  000h,018h,018h,07Eh,018h,018h,000h,000h ;   Hex #2B
    Db  000h,000h,000h,000h,000h,018h,018h,030h ;   Hex #2C
    Db  000h,000h,000h,07Eh,000h,000h,000h,000h ;   Hex #2D
    Db  000h,000h,000h,000h,000h,018h,018h,000h ;   Hex #2E
    Db  003h,006h,00Ch,018h,030h,060h,040h,000h ;   Hex #2F
    Db  018h,02Ch,066h,066h,066h,034h,018h,000h ;   Hex #30
    Db  018h,018h,038h,018h,018h,018h,03Ch,000h ;   Hex #31
    Db  03Ch,066h,066h,00Ch,018h,032h,07Eh,000h ;   Hex #32
    Db  03Ch,066h,00Ch,01Ch,006h,066h,03Ch,000h ;   Hex #33
    Db  00Ch,01Ch,02Ch,06Ch,07Eh,00Ch,01Eh,000h ;   Hex #34
    Db  07Eh,060h,07Ch,066h,006h,066h,03Ch,000h ;   Hex #35
    Db  01Ch,030h,060h,07Ch,066h,066h,03Ch,000h ;   Hex #36
    Db  07Eh,066h,04Ch,00Ch,018h,018h,038h,000h ;   Hex #37
    Db  03Ch,066h,076h,03Ch,06Eh,066h,03Ch,000h ;   Hex #38
    Db  03Ch,066h,066h,03Eh,006h,00Ch,038h,000h ;   Hex #39
    Db  000h,018h,018h,000h,000h,018h,018h,000h ;   Hex #3A
    Db  000h,018h,018h,000h,000h,018h,018h,030h ;   Hex #3B
    Db  006h,00Ch,018h,030h,018h,00Ch,006h,000h ;   Hex #3C
    Db  000h,000h,07Eh,000h,07Eh,000h,000h,000h ;   Hex #3D
    Db  030h,018h,00Ch,006h,00Ch,018h,030h,000h ;   Hex #3E
    Db  03Ch,066h,026h,00Ch,018h,000h,018h,000h ;   Hex #3F
    Db  03Eh,041h,05Dh,055h,05Fh,040h,03Eh,000h ;   Hex #40
    Db  01Ch,00Ch,01Ch,016h,03Eh,023h,063h,000h ;   Hex #41
    Db  07Ch,036h,036h,03Eh,033h,033h,07Eh,000h ;   Hex #42
    Db  01Dh,033h,061h,060h,060h,031h,01Eh,000h ;   Hex #43
    Db  07Ch,036h,033h,033h,033h,036h,07Ch,000h ;   Hex #44
    Db  07Fh,031h,034h,03Ch,034h,031h,07Fh,000h ;   Hex #45
    Db  07Fh,031h,034h,03Ch,034h,030h,078h,000h ;   Hex #46
    Db  01Dh,033h,061h,060h,067h,033h,01Fh,000h ;   Hex #47
    Db  066h,066h,066h,07Eh,066h,066h,066h,000h ;   Hex #48
    Db  03Ch,018h,018h,018h,018h,018h,03Ch,000h ;   Hex #49
    Db  01Fh,006h,006h,006h,066h,066h,03Ch,000h ;   Hex #4A
    Db  067h,066h,06Ch,078h,06Ch,066h,067h,000h ;   Hex #4B
    Db  078h,030h,030h,030h,031h,033h,07Fh,000h ;   Hex #4C
    Db  041h,063h,077h,07Fh,06Bh,063h,063h,000h ;   Hex #4D
    Db  043h,063h,073h,07Bh,06Fh,067h,063h,000h ;   Hex #4E
    Db  01Ch,036h,063h,063h,063h,036h,01Ch,000h ;   Hex #4F
    Db  07Eh,033h,033h,03Eh,030h,030h,078h,000h ;   Hex #50
    Db  01Ch,036h,063h,063h,06Bh,036h,01Ch,007h ;   Hex #51
    Db  07Ch,066h,066h,07Ch,06Ch,066h,067h,000h ;   Hex #52
    Db  03Eh,066h,070h,03Ch,00Eh,066h,07Ch,000h ;   Hex #53
    Db  07Eh,05Ah,018h,018h,018h,018h,03Ch,000h ;   Hex #54
    Db  063h,063h,063h,063h,063h,063h,03Eh,000h ;   Hex #55
    Db  077h,062h,036h,034h,01Ch,018h,008h,000h ;   Hex #56
    Db  063h,063h,06Bh,06Bh,03Eh,036h,022h,000h ;   Hex #57
    Db  066h,066h,03Ch,018h,03Ch,066h,066h,000h ;   Hex #58
    Db  0E7h,066h,034h,018h,018h,018h,03Ch,000h ;   Hex #59
    Db  07Eh,066h,04Ch,018h,032h,066h,07Eh,000h ;   Hex #5A
    Db  01Eh,018h,018h,018h,018h,018h,01Eh,000h ;   Hex #5B
    Db  060h,030h,018h,00Ch,006h,003h,001h,000h ;   Hex #5C
    Db  03Ch,00Ch,00Ch,00Ch,00Ch,00Ch,03Ch,000h ;   Hex #5D
    Db  008h,01Ch,036h,000h,000h,000h,000h,000h ;   Hex #5E
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh ;   Hex #5F
    Db  030h,018h,00Ch,000h,000h,000h,000h,000h ;   Hex #60
    Db  000h,000h,03Ch,066h,01Eh,066h,07Bh,000h ;   Hex #61
    Db  070h,030h,03Eh,03Bh,033h,03Bh,06Eh,000h ;   Hex #62
    Db  000h,000h,03Eh,066h,060h,066h,03Ch,000h ;   Hex #63
    Db  00Eh,006h,036h,06Eh,066h,066h,03Bh,000h ;   Hex #64
    Db  000h,000h,03Ch,066h,07Eh,060h,03Eh,000h ;   Hex #65
    Db  00Eh,01Bh,018h,03Eh,018h,018h,03Ch,000h ;   Hex #66
    Db  000h,000h,03Dh,066h,038h,03Eh,063h,03Eh ;   Hex #67
    Db  070h,030h,036h,03Bh,033h,033h,073h,000h ;   Hex #68
    Db  018h,000h,038h,018h,018h,018h,03Ch,000h ;   Hex #69
    Db  00Ch,000h,01Ch,00Ch,00Ch,06Ch,06Ch,038h ;   Hex #6A
    Db  070h,030h,033h,036h,03Ch,036h,077h,000h ;   Hex #6B
    Db  038h,018h,018h,018h,018h,018h,03Ch,000h ;   Hex #6C
    Db  000h,000h,076h,07Fh,06Bh,06Bh,06Bh,000h ;   Hex #6D
    Db  000h,000h,076h,03Bh,033h,033h,073h,000h ;   Hex #6E
    Db  000h,000h,03Ch,066h,066h,066h,03Ch,000h ;   Hex #6F
    Db  000h,000h,06Eh,033h,033h,03Eh,030h,078h ;   Hex #70
    Db  000h,000h,03Ah,066h,066h,03Eh,006h,00Fh ;   Hex #71
    Db  000h,000h,06Eh,03Bh,033h,030h,078h,000h ;   Hex #72
    Db  000h,000h,03Eh,070h,03Ch,00Eh,07Ch,000h ;   Hex #73
    Db  008h,018h,03Eh,018h,018h,01Ah,00Ch,000h ;   Hex #74
    Db  000h,000h,066h,066h,066h,066h,03Bh,000h ;   Hex #75
    Db  000h,000h,073h,032h,036h,01Ch,008h,000h ;   Hex #76
    Db  000h,000h,06Bh,06Bh,07Fh,036h,022h,000h ;   Hex #77
    Db  000h,000h,073h,036h,01Ch,036h,067h,000h ;   Hex #78
    Db  000h,000h,077h,033h,01Ah,00Ch,06Ch,038h ;   Hex #79
    Db  000h,000h,07Eh,04Ch,018h,032h,07Eh,000h ;   Hex #7A
    Db  00Eh,018h,018h,070h,018h,018h,00Eh,000h ;   Hex #7B
    Db  018h,018h,018h,018h,018h,018h,018h,000h ;   Hex #7C
    Db  070h,018h,018h,00Eh,018h,018h,070h,000h ;   Hex #7D
    Db  039h,04Eh,000h,000h,000h,000h,000h,000h ;   Hex #7E
    Db  008h,01Ch,01Ch,036h,026h,063h,07Fh,07Fh ;   Hex #7F
    Db  01Dh,033h,061h,060h,060h,031h,00Eh,01Ch ;   Hex #80
    Db  06Ch,000h,066h,066h,066h,066h,03Bh,000h ;   Hex #81
    Db  00Eh,018h,03Ch,066h,07Eh,060h,03Eh,000h ;   Hex #82
    Db  018h,03Ch,03Ch,066h,01Eh,066h,07Bh,000h ;   Hex #83
    Db  036h,000h,03Ch,066h,01Eh,066h,07Bh,000h ;   Hex #84
    Db  030h,018h,03Ch,066h,01Eh,066h,07Bh,000h ;   Hex #85
    Db  018h,018h,03Ch,066h,01Eh,066h,07Bh,000h ;   Hex #86
    Db  000h,000h,03Eh,066h,060h,036h,01Ch,038h ;   Hex #87
    Db  018h,03Ch,03Ch,066h,07Eh,060h,03Eh,000h ;   Hex #88
    Db  036h,000h,03Ch,066h,07Eh,060h,03Eh,000h ;   Hex #89
    Db  030h,018h,03Ch,066h,07Eh,060h,03Eh,000h ;   Hex #8A
    Db  06Ch,000h,038h,018h,018h,018h,03Ch,000h ;   Hex #8B
    Db  018h,03Ch,000h,038h,018h,018h,03Ch,000h ;   Hex #8C
    Db  030h,018h,000h,038h,018h,018h,03Ch,000h ;   Hex #8D
    Db  036h,008h,01Ch,016h,036h,03Fh,063h,000h ;   Hex #8E
    Db  01Ch,014h,01Ch,01Eh,036h,03Fh,063h,000h ;   Hex #8F
    Db  007h,00Ch,07Fh,031h,03Ch,031h,07Fh,000h ;   Hex #90
    Db  000h,000h,076h,01Bh,03Fh,06Ch,077h,000h ;   Hex #91
    Db  03Fh,03Dh,02Ch,03Eh,06Ch,06Dh,06Fh,000h ;   Hex #92
    Db  018h,03Ch,03Ch,066h,066h,066h,03Ch,000h ;   Hex #93
    Db  066h,000h,03Ch,066h,066h,066h,03Ch,000h ;   Hex #94
    Db  070h,018h,03Ch,066h,066h,066h,03Ch,000h ;   Hex #95
    Db  018h,03Ch,042h,066h,066h,066h,03Bh,000h ;   Hex #96
    Db  070h,018h,066h,066h,066h,066h,03Bh,000h ;   Hex #97
    Db  036h,000h,077h,033h,01Ah,00Ch,06Ch,038h ;   Hex #98
    Db  063h,01Ch,036h,063h,063h,036h,01Ch,000h ;   Hex #99
    Db  036h,041h,063h,063h,063h,063h,03Eh,000h ;   Hex #9A
    Db  006h,004h,03Ch,06Eh,068h,06Ah,03Ch,030h ;   Hex #9B
    Db  01Eh,033h,033h,07Ch,039h,05Bh,076h,000h ;   Hex #9C
    Db  066h,066h,03Ch,07Eh,018h,07Eh,018h,000h ;   Hex #9D
    Db  078h,06Ch,06Ch,07Ah,066h,06Fh,066h,003h ;   Hex #9E
    Db  00Eh,01Bh,018h,03Eh,018h,018h,058h,070h ;   Hex #9F
    Db  00Eh,018h,03Ch,066h,01Eh,066h,07Bh,000h ;   Hex #A0
    Db  01Ch,030h,000h,038h,018h,018h,03Ch,000h ;   Hex #A1
    Db  00Eh,018h,03Ch,066h,066h,066h,03Ch,000h ;   Hex #A2
    Db  00Eh,018h,066h,066h,066h,066h,03Bh,000h ;   Hex #A3
    Db  01Ah,02Ch,076h,03Bh,033h,033h,073h,000h ;   Hex #A4
    Db  01Ah,02Ch,073h,07Bh,06Fh,067h,063h,000h ;   Hex #A5
    Db  01Eh,036h,036h,01Fh,000h,03Fh,000h,000h ;   Hex #A6
    Db  01Ch,036h,036h,01Ch,000h,03Eh,000h,000h ;   Hex #A7
    Db  018h,000h,018h,030h,064h,066h,03Ch,000h ;   Hex #A8
    Db  000h,000h,000h,07Eh,060h,060h,000h,000h ;   Hex #A9
    Db  000h,000h,000h,07Eh,006h,006h,000h,000h ;   Hex #AA
    Db  060h,066h,06Ch,07Eh,03Bh,066h,04Ch,00Fh ;   Hex #AB
    Db  060h,066h,06Ch,07Bh,037h,06Bh,04Fh,003h ;   Hex #AC
    Db  018h,000h,018h,018h,018h,018h,018h,000h ;   Hex #AD
    Db  000h,01Bh,036h,06Ch,06Ch,036h,01Bh,000h ;   Hex #AE
    Db  000h,06Ch,036h,01Bh,01Bh,036h,06Ch,000h ;   Hex #AF
    Db  011h,044h,011h,044h,011h,044h,011h,044h ;   Hex #B0
    Db  055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh ;   Hex #B1
    Db  0EEh,0BBh,0EEh,0BBh,0EEh,0BBh,0EEh,0BBh ;   Hex #B2
    Db  018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B3
    Db  018h,018h,018h,0F8h,0F8h,018h,018h,018h ;   Hex #B4
    Db  018h,018h,0F8h,0F8h,018h,0F8h,018h,018h ;   Hex #B5
    Db  034h,034h,034h,0F4h,0F4h,034h,034h,034h ;   Hex #B6
    Db  000h,000h,000h,0F8h,0FCh,034h,034h,034h ;   Hex #B7
    Db  000h,000h,0F0h,0F8h,018h,0F8h,018h,018h ;   Hex #B8
    Db  034h,034h,0F4h,0F4h,004h,0F4h,034h,034h ;   Hex #B9
    Db  034h,034h,034h,034h,034h,034h,034h,034h ;   Hex #BA
    Db  000h,000h,0F8h,0FCh,004h,0F4h,034h,034h ;   Hex #BB
    Db  034h,034h,0F4h,0F4h,004h,0FCh,000h,000h ;   Hex #BC
    Db  034h,034h,034h,0FCh,0FCh,000h,000h,000h ;   Hex #BD
    Db  018h,018h,0F8h,0F8h,018h,0F8h,000h,000h ;   Hex #BE
    Db  000h,000h,000h,0F8h,0F8h,018h,018h,018h ;   Hex #BF
    Db  018h,018h,018h,01Fh,01Fh,000h,000h,000h ;   Hex #C0
    Db  018h,018h,018h,0FFh,0FFh,000h,000h,000h ;   Hex #C1
    Db  000h,000h,000h,0FFh,0FFh,018h,018h,018h ;   Hex #C2
    Db  018h,018h,018h,01Fh,01Fh,018h,018h,018h ;   Hex #C3
    Db  000h,000h,000h,0FFh,0FFh,000h,000h,000h ;   Hex #C4
    Db  018h,018h,018h,0FFh,0FFh,018h,018h,018h ;   Hex #C5
    Db  018h,018h,01Fh,01Fh,018h,01Fh,018h,018h ;   Hex #C6
    Db  034h,034h,034h,037h,037h,034h,034h,034h ;   Hex #C7
    Db  034h,034h,037h,037h,030h,01Fh,000h,000h ;   Hex #C8
    Db  000h,000h,03Fh,03Fh,030h,037h,034h,034h ;   Hex #C9
    Db  034h,034h,0F7h,0F7h,000h,0FFh,000h,000h ;   Hex #CA
    Db  000h,000h,0FFh,0FFh,000h,0F7h,034h,034h ;   Hex #CB
    Db  034h,034h,037h,037h,030h,037h,034h,034h ;   Hex #CC
    Db  000h,000h,0FFh,0FFh,000h,0FFh,000h,000h ;   Hex #CD
    Db  034h,034h,0F7h,0F7h,000h,0F7h,034h,034h ;   Hex #CE
    Db  018h,018h,0FFh,0FFh,000h,0FFh,000h,000h ;   Hex #CF
    Db  034h,034h,034h,0FFh,0FFh,000h,000h,000h ;   Hex #D0
    Db  000h,000h,0FFh,0FFh,000h,0FFh,018h,018h ;   Hex #D1
    Db  000h,000h,000h,0FFh,0FFh,034h,034h,034h ;   Hex #D2
    Db  034h,034h,034h,03Fh,01Fh,000h,000h,000h ;   Hex #D3
    Db  018h,018h,01Fh,01Fh,018h,00Fh,000h,000h ;   Hex #D4
    Db  000h,000h,01Fh,01Fh,018h,01Fh,018h,018h ;   Hex #D5
    Db  000h,000h,000h,03Fh,03Fh,034h,034h,034h ;   Hex #D6
    Db  034h,034h,034h,0FFh,0FFh,034h,034h,034h ;   Hex #D7
    Db  018h,018h,0FFh,0FFh,018h,0FFh,018h,018h ;   Hex #D8
    Db  018h,018h,018h,0F8h,0F8h,000h,000h,000h ;   Hex #D9
    Db  000h,000h,000h,01Fh,01Fh,018h,018h,018h ;   Hex #DA
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DB
    Db  000h,000h,000h,000h,0FFh,0FFh,0FFh,0FFh ;   Hex #DC
    Db  0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h ;   Hex #DD
    Db  00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh ;   Hex #DE
    Db  0FFh,0FFh,0FFh,0FFh,000h,000h,000h,000h ;   Hex #DF
    Db  000h,000h,03Dh,06Eh,066h,06Eh,03Bh,000h ;   Hex #E0
    Db  03Ch,066h,06Ch,066h,063h,07Bh,06Eh,000h ;   Hex #E1
    Db  07Fh,033h,031h,030h,030h,030h,078h,000h ;   Hex #E2
    Db  000h,03Fh,07Eh,054h,014h,036h,066h,000h ;   Hex #E3
    Db  07Fh,033h,018h,00Ch,018h,033h,07Fh,000h ;   Hex #E4
    Db  000h,000h,03Fh,06Ch,06Ch,06Ch,038h,000h ;   Hex #E5
    Db  000h,000h,033h,033h,033h,037h,06Dh,060h ;   Hex #E6
    Db  000h,03Fh,07Eh,050h,018h,01Ch,00Ch,000h ;   Hex #E7
    Db  01Ch,008h,03Eh,06Bh,03Eh,008h,01Ch,000h ;   Hex #E8
    Db  01Ch,036h,063h,07Fh,063h,036h,01Ch,000h ;   Hex #E9
    Db  01Ch,036h,063h,063h,036h,055h,077h,000h ;   Hex #EA
    Db  01Ch,030h,018h,02Ch,066h,066h,03Ch,000h ;   Hex #EB
    Db  000h,036h,07Fh,04Dh,059h,07Fh,036h,000h ;   Hex #EC
    Db  001h,003h,03Eh,067h,06Bh,073h,03Eh,040h ;   Hex #ED
    Db  000h,000h,01Eh,030h,03Eh,030h,01Eh,000h ;   Hex #EE
    Db  03Ch,066h,066h,066h,066h,066h,066h,000h ;   Hex #EF
    Db  000h,07Eh,000h,07Eh,000h,07Eh,000h,000h ;   Hex #F0
    Db  018h,018h,07Eh,018h,018h,000h,07Eh,000h ;   Hex #F1
    Db  060h,038h,00Eh,038h,060h,000h,07Eh,000h ;   Hex #F2
    Db  006h,01Ch,070h,01Ch,006h,000h,07Eh,000h ;   Hex #F3
    Db  00Eh,01Bh,01Ah,018h,018h,018h,018h,018h ;   Hex #F4
    Db  018h,018h,018h,018h,058h,0D8h,070h,000h ;   Hex #F5
    Db  018h,018h,000h,07Eh,000h,018h,018h,000h ;   Hex #F6
    Db  000h,03Bh,06Eh,000h,03Bh,06Eh,000h,000h ;   Hex #F7
    Db  01Ch,036h,036h,01Ch,000h,000h,000h,000h ;   Hex #F8
    Db  000h,000h,018h,03Ch,018h,000h,000h,000h ;   Hex #F9
    Db  000h,000h,000h,018h,000h,000h,000h,000h ;   Hex #FA
    Db  003h,002h,006h,024h,06Ch,038h,018h,010h ;   Hex #FB
    Db  076h,03Bh,033h,033h,033h,000h,000h,000h ;   Hex #FC
    Db  03Ch,066h,00Ch,038h,07Eh,000h,000h,000h ;   Hex #FD
    Db  000h,000h,03Ch,03Ch,03Ch,03Ch,000h,000h ;   Hex #FE
    Db  000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FF
LEN_D437        EQU ($-D437)
                                        ;
POST_EGA437     EQU     $               ;
                                        ;
CODE    ENDS
        END


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\lcd\850-cpi.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
CODE    SEGMENT BYTE PUBLIC 'CODE'
        ASSUME CS:CODE,DS:CODE

IF1
;        %OUT    EGA.CPI creation file
;        %OUT    .
;        %OUT    CP SRC files:
;        %OUT    .
;        %OUT .          CODE PAGE:  850
ENDIF

EGA850: DW     LEN_850                  ;SIZE OF ENTRY HEADER
        DW     POST_EGA850,0            ;POINTER TO NEXT HEADER
        DW     1                        ;DEVICE TYPE
        DB     "LCD     "               ;DEVICE SUBTYPE ID
        DW     850                      ;CODE PAGE ID
        DW     3 DUP(0)                 ;RESERVED
        DW     OFFSET DATA850,0         ;POINTER TO FONTS
LEN_850 EQU    ($-EGA850)

DATA850:DW     1                        ;CART/NON-CART
        DW     1                        ;# OF FONTS
        DW     LEN_D850                 ;LENGTH OF DATA
D850:                                   ;
        DB     8,8                      ;CHARACTER BOX SIZE
        DB     0,0                      ;ASPECT RATIO (UNUSED)
        DW     256                      ;NUMBER OF CHARACTERS
    Db  000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #0
    Db  03Ch,042h,0A5h,0A5h,081h,0BDh,05Ah,03Ch ;   Hex #1
    Db  03Ch,07Eh,0DBh,0DBh,0FFh,0C3h,066h,03Ch ;   Hex #2
    Db  036h,07Fh,07Fh,07Fh,03Eh,01Ch,008h,000h ;   Hex #3
    Db  008h,01Ch,03Eh,07Fh,03Eh,01Ch,008h,000h ;   Hex #4
    Db  01Ch,03Eh,01Ch,07Fh,07Fh,036h,008h,01Ch ;   Hex #5
    Db  008h,01Ch,03Eh,07Fh,07Fh,036h,008h,01Ch ;   Hex #6
    Db  000h,000h,018h,03Ch,03Ch,018h,000h,000h ;   Hex #7
    Db  0FFh,0FFh,0E7h,0C3h,0C3h,0E7h,0FFh,0FFh ;   Hex #8
    Db  000h,000h,03Ch,066h,066h,03Ch,000h,000h ;   Hex #9
    Db  0FFh,0FFh,0C3h,099h,099h,0C3h,0FFh,0FFh ;   Hex #A
    Db  007h,003h,03Eh,066h,066h,066h,03Ch,000h ;   Hex #B
    Db  03Ch,066h,066h,066h,03Ch,018h,03Ch,018h ;   Hex #C
    Db  008h,00Ch,00Eh,00Ah,00Ah,008h,038h,030h ;   Hex #D
    Db  018h,016h,019h,017h,071h,061h,007h,006h ;   Hex #E
    Db  048h,06Bh,03Eh,0E4h,027h,07Ch,0D6h,012h ;   Hex #F
    Db  040h,070h,07Ch,07Fh,07Ch,070h,040h,000h ;   Hex #10
    Db  001h,007h,01Fh,07Fh,01Fh,007h,001h,000h ;   Hex #11
    Db  018h,03Ch,07Eh,018h,018h,07Eh,03Ch,018h ;   Hex #12
    Db  036h,036h,036h,036h,036h,000h,036h,000h ;   Hex #13
    Db  03Fh,06Ah,06Ah,03Ah,00Ah,00Ah,01Ah,000h ;   Hex #14
    Db  03Ch,076h,038h,06Ch,036h,01Ch,06Eh,03Ch ;   Hex #15
    Db  000h,000h,000h,07Fh,07Fh,07Fh,000h,000h ;   Hex #16
    Db  018h,03Ch,07Eh,018h,07Eh,03Ch,018h,0FFh ;   Hex #17
    Db  018h,03Ch,07Eh,05Ah,018h,018h,018h,000h ;   Hex #18
    Db  018h,018h,018h,05Ah,07Eh,03Ch,018h,000h ;   Hex #19
    Db  000h,00Ch,006h,07Fh,07Fh,006h,00Ch,000h ;   Hex #1A
    Db  000h,018h,030h,07Fh,07Fh,030h,018h,000h ;   Hex #1B
    Db  000h,000h,060h,060h,07Fh,07Fh,000h,000h ;   Hex #1C
    Db  000h,014h,036h,07Fh,07Fh,036h,014h,000h ;   Hex #1D
    Db  008h,008h,01Ch,01Ch,03Eh,03Eh,07Fh,000h ;   Hex #1E
    Db  07Fh,03Eh,03Eh,01Ch,01Ch,008h,008h,000h ;   Hex #1F
    Db  000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #20
    Db  018h,018h,018h,018h,018h,000h,018h,000h ;   Hex #21
    Db  036h,036h,014h,000h,000h,000h,000h,000h ;   Hex #22
    Db  00Ah,00Ah,03Fh,014h,07Eh,028h,028h,000h ;   Hex #23
    Db  008h,03Eh,068h,03Eh,00Bh,07Eh,008h,000h ;   Hex #24
    Db  001h,03Fh,052h,06Ch,01Bh,035h,076h,000h ;   Hex #25
    Db  01Ch,036h,01Ch,03Bh,06Eh,066h,03Bh,000h ;   Hex #26
    Db  018h,018h,030h,000h,000h,000h,000h,000h ;   Hex #27
    Db  006h,00Ch,018h,018h,018h,00Ch,006h,000h ;   Hex #28
    Db  030h,018h,00Ch,00Ch,00Ch,018h,030h,000h ;   Hex #29
    Db  000h,036h,01Ch,07Fh,01Ch,036h,000h,000h ;   Hex #2A
    Db  000h,018h,018h,07Eh,018h,018h,000h,000h ;   Hex #2B
    Db  000h,000h,000h,000h,000h,018h,018h,030h ;   Hex #2C
    Db  000h,000h,000h,07Eh,000h,000h,000h,000h ;   Hex #2D
    Db  000h,000h,000h,000h,000h,018h,018h,000h ;   Hex #2E
    Db  003h,006h,00Ch,018h,030h,060h,040h,000h ;   Hex #2F
    Db  018h,02Ch,066h,066h,066h,034h,018h,000h ;   Hex #30
    Db  018h,018h,038h,018h,018h,018h,03Ch,000h ;   Hex #31
    Db  03Ch,066h,066h,00Ch,018h,032h,07Eh,000h ;   Hex #32
    Db  03Ch,066h,00Ch,01Ch,006h,066h,03Ch,000h ;   Hex #33
    Db  00Ch,01Ch,02Ch,06Ch,07Eh,00Ch,01Eh,000h ;   Hex #34
    Db  07Eh,060h,07Ch,066h,006h,066h,03Ch,000h ;   Hex #35
    Db  01Ch,030h,060h,07Ch,066h,066h,03Ch,000h ;   Hex #36
    Db  07Eh,066h,04Ch,00Ch,018h,018h,038h,000h ;   Hex #37
    Db  03Ch,066h,076h,03Ch,06Eh,066h,03Ch,000h ;   Hex #38
    Db  03Ch,066h,066h,03Eh,006h,00Ch,038h,000h ;   Hex #39
    Db  000h,018h,018h,000h,000h,018h,018h,000h ;   Hex #3A
    Db  000h,018h,018h,000h,000h,018h,018h,030h ;   Hex #3B
    Db  006h,00Ch,018h,030h,018h,00Ch,006h,000h ;   Hex #3C
    Db  000h,000h,07Eh,000h,07Eh,000h,000h,000h ;   Hex #3D
    Db  030h,018h,00Ch,006h,00Ch,018h,030h,000h ;   Hex #3E
    Db  03Ch,066h,026h,00Ch,018h,000h,018h,000h ;   Hex #3F
    Db  03Eh,041h,05Dh,055h,05Fh,040h,03Eh,000h ;   Hex #40
    Db  01Ch,00Ch,01Ch,016h,03Eh,023h,063h,000h ;   Hex #41
    Db  07Ch,036h,036h,03Eh,033h,033h,07Eh,000h ;   Hex #42
    Db  01Dh,033h,061h,060h,060h,031h,01Eh,000h ;   Hex #43
    Db  07Ch,036h,033h,033h,033h,036h,07Ch,000h ;   Hex #44
    Db  07Fh,031h,034h,03Ch,034h,031h,07Fh,000h ;   Hex #45
    Db  07Fh,031h,034h,03Ch,034h,030h,078h,000h ;   Hex #46
    Db  01Dh,033h,061h,060h,067h,033h,01Fh,000h ;   Hex #47
    Db  066h,066h,066h,07Eh,066h,066h,066h,000h ;   Hex #48
    Db  03Ch,018h,018h,018h,018h,018h,03Ch,000h ;   Hex #49
    Db  01Fh,006h,006h,006h,066h,066h,03Ch,000h ;   Hex #4A
    Db  067h,066h,06Ch,078h,06Ch,066h,067h,000h ;   Hex #4B
    Db  078h,030h,030h,030h,031h,033h,07Fh,000h ;   Hex #4C
    Db  041h,063h,077h,07Fh,06Bh,063h,063h,000h ;   Hex #4D
    Db  043h,063h,073h,07Bh,06Fh,067h,063h,000h ;   Hex #4E
    Db  01Ch,036h,063h,063h,063h,036h,01Ch,000h ;   Hex #4F
    Db  07Eh,033h,033h,03Eh,030h,030h,078h,000h ;   Hex #50
    Db  01Ch,036h,063h,063h,06Bh,036h,01Ch,007h ;   Hex #51
    Db  07Ch,066h,066h,07Ch,06Ch,066h,067h,000h ;   Hex #52
    Db  03Eh,066h,070h,03Ch,00Eh,066h,07Ch,000h ;   Hex #53
    Db  07Eh,05Ah,018h,018h,018h,018h,03Ch,000h ;   Hex #54
    Db  063h,063h,063h,063h,063h,063h,03Eh,000h ;   Hex #55
    Db  077h,062h,036h,034h,01Ch,018h,008h,000h ;   Hex #56
    Db  063h,063h,06Bh,06Bh,03Eh,036h,022h,000h ;   Hex #57
    Db  066h,066h,03Ch,018h,03Ch,066h,066h,000h ;   Hex #58
    Db  0E7h,066h,034h,018h,018h,018h,03Ch,000h ;   Hex #59
    Db  07Eh,066h,04Ch,018h,032h,066h,07Eh,000h ;   Hex #5A
    Db  01Eh,018h,018h,018h,018h,018h,01Eh,000h ;   Hex #5B
    Db  060h,030h,018h,00Ch,006h,003h,001h,000h ;   Hex #5C
    Db  03Ch,00Ch,00Ch,00Ch,00Ch,00Ch,03Ch,000h ;   Hex #5D
    Db  008h,01Ch,036h,000h,000h,000h,000h,000h ;   Hex #5E
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh ;   Hex #5F
    Db  030h,018h,00Ch,000h,000h,000h,000h,000h ;   Hex #60
    Db  000h,000h,03Ch,066h,01Eh,066h,07Bh,000h ;   Hex #61
    Db  070h,030h,03Eh,03Bh,033h,03Bh,06Eh,000h ;   Hex #62
    Db  000h,000h,03Eh,066h,060h,066h,03Ch,000h ;   Hex #63
    Db  00Eh,006h,036h,06Eh,066h,066h,03Bh,000h ;   Hex #64
    Db  000h,000h,03Ch,066h,07Eh,060h,03Eh,000h ;   Hex #65
    Db  00Eh,01Bh,018h,03Eh,018h,018h,03Ch,000h ;   Hex #66
    Db  000h,000h,03Dh,066h,038h,03Eh,063h,03Eh ;   Hex #67
    Db  070h,030h,036h,03Bh,033h,033h,073h,000h ;   Hex #68
    Db  018h,000h,038h,018h,018h,018h,03Ch,000h ;   Hex #69
    Db  00Ch,000h,01Ch,00Ch,00Ch,06Ch,06Ch,038h ;   Hex #6A
    Db  070h,030h,033h,036h,03Ch,036h,077h,000h ;   Hex #6B
    Db  038h,018h,018h,018h,018h,018h,03Ch,000h ;   Hex #6C
    Db  000h,000h,076h,07Fh,06Bh,06Bh,06Bh,000h ;   Hex #6D
    Db  000h,000h,076h,03Bh,033h,033h,073h,000h ;   Hex #6E
    Db  000h,000h,03Ch,066h,066h,066h,03Ch,000h ;   Hex #6F
    Db  000h,000h,06Eh,033h,033h,03Eh,030h,078h ;   Hex #70
    Db  000h,000h,03Ah,066h,066h,03Eh,006h,00Fh ;   Hex #71
    Db  000h,000h,06Eh,03Bh,033h,030h,078h,000h ;   Hex #72
    Db  000h,000h,03Eh,070h,03Ch,00Eh,07Ch,000h ;   Hex #73
    Db  008h,018h,03Eh,018h,018h,01Ah,00Ch,000h ;   Hex #74
    Db  000h,000h,066h,066h,066h,066h,03Bh,000h ;   Hex #75
    Db  000h,000h,073h,032h,036h,01Ch,008h,000h ;   Hex #76
    Db  000h,000h,06Bh,06Bh,07Fh,036h,022h,000h ;   Hex #77
    Db  000h,000h,073h,036h,01Ch,036h,067h,000h ;   Hex #78
    Db  000h,000h,077h,033h,01Ah,00Ch,06Ch,038h ;   Hex #79
    Db  000h,000h,07Eh,04Ch,018h,032h,07Eh,000h ;   Hex #7A
    Db  00Eh,018h,018h,070h,018h,018h,00Eh,000h ;   Hex #7B
    Db  018h,018h,018h,018h,018h,018h,018h,000h ;   Hex #7C
    Db  070h,018h,018h,00Eh,018h,018h,070h,000h ;   Hex #7D
    Db  039h,04Eh,000h,000h,000h,000h,000h,000h ;   Hex #7E
    Db  008h,01Ch,01Ch,036h,026h,063h,07Fh,07Fh ;   Hex #7F
    Db  01Dh,033h,061h,060h,060h,031h,00Eh,01Ch ;   Hex #80
    Db  06Ch,000h,066h,066h,066h,066h,03Bh,000h ;   Hex #81
    Db  00Ch,018h,03Ch,066h,07Eh,060h,03Eh,000h ;   Hex #82
    Db  018h,03Ch,03Ch,066h,01Eh,066h,07Bh,000h ;   Hex #83
    Db  036h,000h,03Ch,066h,01Eh,066h,07Bh,000h ;   Hex #84
    Db  030h,018h,03Ch,066h,01Eh,066h,07Bh,000h ;   Hex #85
    Db  018h,018h,03Ch,066h,01Eh,066h,07Bh,000h ;   Hex #86
    Db  000h,000h,03Eh,066h,060h,036h,01Ch,038h ;   Hex #87
    Db  018h,03Ch,03Ch,066h,07Eh,060h,03Eh,000h ;   Hex #88
    Db  036h,000h,03Ch,066h,07Eh,060h,03Eh,000h ;   Hex #89
    Db  030h,018h,03Ch,066h,07Eh,060h,03Eh,000h ;   Hex #8A
    Db  06Ch,000h,038h,018h,018h,018h,03Ch,000h ;   Hex #8B
    Db  018h,03Ch,000h,038h,018h,018h,03Ch,000h ;   Hex #8C
    Db  030h,018h,000h,038h,018h,018h,03Ch,000h ;   Hex #8D
    Db  036h,008h,01Ch,016h,036h,03Fh,063h,000h ;   Hex #8E
    Db  01Ch,014h,01Ch,01Eh,036h,03Fh,063h,000h ;   Hex #8F
    Db  006h,00Ch,07Fh,031h,03Ch,031h,07Fh,000h ;   Hex #90
    Db  000h,000h,076h,01Bh,03Fh,06Ch,077h,000h ;   Hex #91
    Db  03Fh,03Dh,02Ch,03Eh,06Ch,06Dh,06Fh,000h ;   Hex #92
    Db  018h,03Ch,03Ch,066h,066h,066h,03Ch,000h ;   Hex #93
    Db  066h,000h,03Ch,066h,066h,066h,03Ch,000h ;   Hex #94
    Db  030h,018h,03Ch,066h,066h,066h,03Ch,000h ;   Hex #95
    Db  018h,03Ch,042h,066h,066h,066h,03Bh,000h ;   Hex #96
    Db  030h,018h,066h,066h,066h,066h,03Bh,000h ;   Hex #97
    Db  036h,000h,077h,033h,01Ah,00Ch,06Ch,038h ;   Hex #98
    Db  063h,01Ch,036h,063h,063h,036h,01Ch,000h ;   Hex #99
    Db  036h,041h,063h,063h,063h,063h,03Eh,000h ;   Hex #9A
    Db  000h,004h,03Ch,06Eh,07Eh,076h,03Ch,020h ;   Hex #9B
    Db  01Eh,033h,033h,07Ch,039h,05Bh,076h,000h ;   Hex #9C
    Db  01Dh,036h,067h,06Bh,073h,036h,05Ch,000h ;   Hex #9D
    Db  000h,066h,03Ch,018h,03Ch,066h,000h,000h ;   Hex #9E
    Db  00Eh,01Bh,018h,03Eh,018h,018h,058h,070h ;   Hex #9F
    Db  00Ch,018h,03Ch,066h,01Eh,066h,07Bh,000h ;   Hex #A0
    Db  018h,030h,000h,038h,018h,018h,03Ch,000h ;   Hex #A1
    Db  00Ch,018h,03Ch,066h,066h,066h,03Ch,000h ;   Hex #A2
    Db  00Ch,018h,066h,066h,066h,066h,03Bh,000h ;   Hex #A3
    Db  01Ah,02Ch,076h,03Bh,033h,033h,073h,000h ;   Hex #A4
    Db  01Ah,02Ch,073h,07Bh,06Fh,067h,063h,000h ;   Hex #A5
    Db  01Eh,036h,036h,01Fh,000h,03Fh,000h,000h ;   Hex #A6
    Db  01Ch,036h,036h,01Ch,000h,03Eh,000h,000h ;   Hex #A7
    Db  018h,000h,018h,030h,064h,066h,03Ch,000h ;   Hex #A8
    Db  03Eh,07Bh,055h,059h,05Dh,077h,03Eh,000h ;   Hex #A9
    Db  000h,000h,000h,07Eh,006h,006h,000h,000h ;   Hex #AA
    Db  060h,066h,06Ch,07Eh,03Bh,066h,04Ch,00Fh ;   Hex #AB
    Db  060h,066h,06Ch,07Bh,037h,06Bh,04Fh,003h ;   Hex #AC
    Db  018h,000h,018h,018h,018h,018h,018h,000h ;   Hex #AD
    Db  000h,01Bh,036h,06Ch,06Ch,036h,01Bh,000h ;   Hex #AE
    Db  000h,06Ch,036h,01Bh,01Bh,036h,06Ch,000h ;   Hex #AF
    Db  011h,044h,011h,044h,011h,044h,011h,044h ;   Hex #B0
    Db  055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh ;   Hex #B1
    Db  0EEh,0BBh,0EEh,0BBh,0EEh,0BBh,0EEh,0BBh ;   Hex #B2
    Db  018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B3
    Db  018h,018h,018h,0F8h,0F8h,018h,018h,018h ;   Hex #B4
    Db  00Ch,018h,01Ch,016h,036h,03Fh,063h,000h ;   Hex #B5
    Db  01Ch,036h,008h,01Eh,036h,03Fh,063h,000h ;   Hex #B6
    Db  01Ch,006h,01Ch,016h,036h,03Fh,063h,000h ;   Hex #B7
    Db  03Eh,06Bh,05Dh,051h,05Dh,06Bh,03Eh,000h ;   Hex #B8
    Db  034h,034h,0F4h,0F4h,004h,0F4h,034h,034h ;   Hex #B9
    Db  034h,034h,034h,034h,034h,034h,034h,034h ;   Hex #BA
    Db  000h,000h,0F8h,0FCh,004h,0F4h,034h,034h ;   Hex #BB
    Db  034h,034h,0F4h,0F4h,004h,0FCh,000h,000h ;   Hex #BC
    Db  006h,004h,03Ch,06Eh,068h,06Ah,03Ch,030h ;   Hex #BD
    Db  066h,066h,03Ch,07Eh,018h,07Eh,018h,000h ;   Hex #BE
    Db  000h,000h,000h,0F8h,0F8h,018h,018h,018h ;   Hex #BF
    Db  018h,018h,018h,01Fh,01Fh,000h,000h,000h ;   Hex #C0
    Db  018h,018h,018h,0FFh,0FFh,000h,000h,000h ;   Hex #C1
    Db  000h,000h,000h,0FFh,0FFh,018h,018h,018h ;   Hex #C2
    Db  018h,018h,018h,01Fh,01Fh,018h,018h,018h ;   Hex #C3
    Db  000h,000h,000h,0FFh,0FFh,000h,000h,000h ;   Hex #C4
    Db  018h,018h,018h,0FFh,0FFh,018h,018h,018h ;   Hex #C5
    Db  039h,04Eh,03Ch,066h,01Eh,066h,07Bh,000h ;   Hex #C6
    Db  03Bh,06Eh,01Ch,016h,036h,03Fh,063h,000h ;   Hex #C7
    Db  034h,034h,037h,037h,030h,01Fh,000h,000h ;   Hex #C8
    Db  000h,000h,03Fh,03Fh,030h,037h,034h,034h ;   Hex #C9
    Db  034h,034h,0F7h,0F7h,000h,0FFh,000h,000h ;   Hex #CA
    Db  000h,000h,0FFh,0FFh,000h,0F7h,034h,034h ;   Hex #CB
    Db  034h,034h,037h,037h,030h,037h,034h,034h ;   Hex #CC
    Db  000h,000h,0FFh,0FFh,000h,0FFh,000h,000h ;   Hex #CD
    Db  034h,034h,0F7h,0F7h,000h,0F7h,034h,034h ;   Hex #CE
    Db  000h,066h,07Eh,024h,024h,07Eh,066h,000h ;   Hex #CF
    Db  036h,018h,06Ch,036h,066h,066h,03Ch,000h ;   Hex #D0
    Db  07Ch,036h,033h,07Bh,033h,036h,07Ch,000h ;   Hex #D1
    Db  01Ch,036h,07Fh,031h,03Ch,031h,07Fh,000h ;   Hex #D2
    Db  036h,000h,07Fh,031h,03Ch,031h,07Fh,000h ;   Hex #D3
    Db  018h,00Ch,07Fh,031h,03Ch,031h,07Fh,000h ;   Hex #D4
    Db  000h,000h,038h,018h,018h,018h,03Ch,000h ;   Hex #D5
    Db  00Ch,018h,03Ch,018h,018h,018h,03Ch,000h ;   Hex #D6
    Db  018h,024h,03Ch,018h,018h,018h,03Ch,000h ;   Hex #D7
    Db  066h,000h,03Ch,018h,018h,018h,03Ch,000h ;   Hex #D8
    Db  018h,018h,018h,0F8h,0F8h,000h,000h,000h ;   Hex #D9
    Db  000h,000h,000h,01Fh,01Fh,018h,018h,018h ;   Hex #DA
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DB
    Db  000h,000h,000h,000h,0FFh,0FFh,0FFh,0FFh ;   Hex #DC
    Db  018h,018h,018h,000h,000h,018h,018h,018h ;   Hex #DD
    Db  030h,018h,03Ch,018h,018h,018h,03Ch,000h ;   Hex #DE
    Db  0FFh,0FFh,0FFh,0FFh,000h,000h,000h,000h ;   Hex #DF
    Db  006h,00Ch,036h,063h,063h,036h,01Ch,000h ;   Hex #E0
    Db  03Ch,066h,06Ch,06Eh,063h,07Bh,06Eh,000h ;   Hex #E1
    Db  01Ch,036h,03Eh,063h,063h,036h,01Ch,000h ;   Hex #E2
    Db  018h,00Ch,036h,063h,063h,036h,01Ch,000h ;   Hex #E3
    Db  03Ah,06Eh,03Ch,066h,066h,066h,03Ch,000h ;   Hex #E4
    Db  03Bh,06Eh,036h,063h,063h,036h,01Ch,000h ;   Hex #E5
    Db  000h,000h,033h,033h,033h,037h,06Dh,060h ;   Hex #E6
    Db  070h,030h,03Eh,033h,033h,03Eh,030h,078h ;   Hex #E7
    Db  078h,03Eh,033h,033h,03Eh,030h,078h,000h ;   Hex #E8
    Db  00Ch,05Bh,063h,063h,063h,063h,03Eh,000h ;   Hex #E9
    Db  01Ch,077h,063h,063h,063h,063h,03Eh,000h ;   Hex #EA
    Db  018h,06Dh,063h,063h,063h,063h,03Eh,000h ;   Hex #EB
    Db  006h,00Ch,077h,033h,01Ah,00Ch,06Ch,038h ;   Hex #EC
    Db  00Ch,0DBh,066h,034h,018h,018h,03Ch,000h ;   Hex #ED
    Db  0FFh,000h,000h,000h,000h,000h,000h,000h ;   Hex #EE
    Db  00Ch,018h,030h,000h,000h,000h,000h,000h ;   Hex #EF
    Db  000h,000h,000h,07Eh,000h,000h,000h,000h ;   Hex #F0
    Db  018h,018h,07Eh,018h,018h,000h,07Eh,000h ;   Hex #F1
    Db  000h,000h,000h,000h,000h,0FFh,000h,0FFh ;   Hex #F2
    Db  070h,05Bh,036h,05Fh,07Fh,03Bh,06Fh,043h ;   Hex #F3
    Db  03Fh,06Ah,06Ah,03Ah,00Ah,00Ah,01Ah,000h ;   Hex #F4
    Db  03Ch,076h,038h,06Ch,036h,01Ch,06Eh,03Ch ;   Hex #F5
    Db  018h,018h,000h,07Eh,000h,018h,018h,000h ;   Hex #F6
    Db  000h,000h,000h,000h,000h,000h,00Eh,01Ch ;   Hex #F7
    Db  01Ch,036h,036h,01Ch,000h,000h,000h,000h ;   Hex #F8
    Db  036h,000h,000h,000h,000h,000h,000h,000h ;   Hex #F9
    Db  000h,000h,000h,018h,000h,000h,000h,000h ;   Hex #FA
    Db  018h,038h,018h,018h,03Ch,000h,000h,000h ;   Hex #FB
    Db  03Ch,066h,01Ch,066h,03Ch,000h,000h,000h ;   Hex #FC
    Db  03Ch,066h,00Ch,038h,07Eh,000h,000h,000h ;   Hex #FD
    Db  000h,000h,03Ch,03Ch,03Ch,03Ch,000h,000h ;   Hex #FE
    Db  000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FF
LEN_D850        EQU ($-D850)
                                        ;
POST_EGA850     EQU     $               ;
                                        ;
CODE    ENDS
        END


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\ega2\865-8x8.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
;***************************************************
;  CHARACTER FONT FILE
;  Source Assembler File
;
;	 CODE PAGE: 865
;  FONT RESOLUTION: 8 x 8
;
;     DATE CREATED:05-28-1987
;
;
; Output file from: MULTIFON, Version 1A
;
;***************************************************
    Db	000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #0
    Db	07Eh,081h,0A5h,081h,0BDh,099h,081h,07Eh ;   Hex #1
    Db	07Eh,0FFh,0DBh,0FFh,0C3h,0E7h,0FFh,07Eh ;   Hex #2
    Db	06Ch,0FEh,0FEh,0FEh,07Ch,038h,010h,000h ;   Hex #3
    Db	010h,038h,07Ch,0FEh,07Ch,038h,010h,000h ;   Hex #4
    Db	038h,07Ch,038h,0FEh,0FEh,0D6h,010h,038h ;   Hex #5
    Db	010h,038h,07Ch,0FEh,0FEh,07Ch,010h,038h ;   Hex #6
    Db	000h,000h,018h,03Ch,03Ch,018h,000h,000h ;   Hex #7
    Db	0FFh,0FFh,0E7h,0C3h,0C3h,0E7h,0FFh,0FFh ;   Hex #8
    Db	000h,03Ch,066h,042h,042h,066h,03Ch,000h ;   Hex #9
    Db	0FFh,0C3h,099h,0BDh,0BDh,099h,0C3h,0FFh ;   Hex #A
    Db	00Fh,007h,00Fh,07Dh,0CCh,0CCh,0CCh,078h ;   Hex #B
    Db	03Ch,066h,066h,066h,03Ch,018h,07Eh,018h ;   Hex #C
    Db	03Fh,033h,03Fh,030h,030h,070h,0F0h,0E0h ;   Hex #D
    Db	07Fh,063h,07Fh,063h,063h,067h,0E6h,0C0h ;   Hex #E
    Db	018h,0DBh,03Ch,0E7h,0E7h,03Ch,0DBh,018h ;   Hex #F
    Db	080h,0E0h,0F8h,0FEh,0F8h,0E0h,080h,000h ;   Hex #10
    Db	002h,00Eh,03Eh,0FEh,03Eh,00Eh,002h,000h ;   Hex #11
    Db	018h,03Ch,07Eh,018h,018h,07Eh,03Ch,018h ;   Hex #12
    Db	066h,066h,066h,066h,066h,000h,066h,000h ;   Hex #13
    Db	07Fh,0DBh,0DBh,07Bh,01Bh,01Bh,01Bh,000h ;   Hex #14
    Db	03Eh,061h,03Ch,066h,066h,03Ch,086h,07Ch ;   Hex #15
    Db	000h,000h,000h,000h,07Eh,07Eh,07Eh,000h ;   Hex #16
    Db	018h,03Ch,07Eh,018h,07Eh,03Ch,018h,0FFh ;   Hex #17
    Db	018h,03Ch,07Eh,018h,018h,018h,018h,000h ;   Hex #18
    Db	018h,018h,018h,018h,07Eh,03Ch,018h,000h ;   Hex #19
    Db	000h,018h,00Ch,0FEh,00Ch,018h,000h,000h ;   Hex #1A
    Db	000h,030h,060h,0FEh,060h,030h,000h,000h ;   Hex #1B
    Db	000h,000h,0C0h,0C0h,0C0h,0FEh,000h,000h ;   Hex #1C
    Db	000h,024h,066h,0FFh,066h,024h,000h,000h ;   Hex #1D
    Db	000h,018h,03Ch,07Eh,0FFh,0FFh,000h,000h ;   Hex #1E
    Db	000h,0FFh,0FFh,07Eh,03Ch,018h,000h,000h ;   Hex #1F
    Db	000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #20
    Db	018h,03Ch,03Ch,018h,018h,000h,018h,000h ;   Hex #21
    Db	066h,066h,024h,000h,000h,000h,000h,000h ;   Hex #22
    Db	06Ch,06Ch,0FEh,06Ch,0FEh,06Ch,06Ch,000h ;   Hex #23
    Db	018h,03Eh,060h,03Ch,006h,07Ch,018h,000h ;   Hex #24
    Db	000h,0C6h,0CCh,018h,030h,066h,0C6h,000h ;   Hex #25
    Db	038h,06Ch,038h,076h,0DCh,0CCh,076h,000h ;   Hex #26
    Db	018h,018h,030h,000h,000h,000h,000h,000h ;   Hex #27
    Db	00Ch,018h,030h,030h,030h,018h,00Ch,000h ;   Hex #28
    Db	030h,018h,00Ch,00Ch,00Ch,018h,030h,000h ;   Hex #29
    Db	000h,066h,03Ch,0FFh,03Ch,066h,000h,000h ;   Hex #2A
    Db	000h,018h,018h,07Eh,018h,018h,000h,000h ;   Hex #2B
    Db	000h,000h,000h,000h,000h,018h,018h,030h ;   Hex #2C
    Db	000h,000h,000h,07Eh,000h,000h,000h,000h ;   Hex #2D
    Db	000h,000h,000h,000h,000h,018h,018h,000h ;   Hex #2E
    Db	006h,00Ch,018h,030h,060h,0C0h,080h,000h ;   Hex #2F
    Db	038h,06Ch,0C6h,0D6h,0C6h,06Ch,038h,000h ;   Hex #30
    Db	018h,038h,018h,018h,018h,018h,07Eh,000h ;   Hex #31
    Db	07Ch,0C6h,006h,01Ch,030h,066h,0FEh,000h ;   Hex #32
    Db	07Ch,0C6h,006h,03Ch,006h,0C6h,07Ch,000h ;   Hex #33
    Db	01Ch,03Ch,06Ch,0CCh,0FEh,00Ch,01Eh,000h ;   Hex #34
    Db	0FEh,0C0h,0C0h,0FCh,006h,0C6h,07Ch,000h ;   Hex #35
    Db	038h,060h,0C0h,0FCh,0C6h,0C6h,07Ch,000h ;   Hex #36
    Db	0FEh,0C6h,00Ch,018h,030h,030h,030h,000h ;   Hex #37
    Db	07Ch,0C6h,0C6h,07Ch,0C6h,0C6h,07Ch,000h ;   Hex #38
    Db	07Ch,0C6h,0C6h,07Eh,006h,00Ch,078h,000h ;   Hex #39
    Db	000h,018h,018h,000h,000h,018h,018h,000h ;   Hex #3A
    Db	000h,018h,018h,000h,000h,018h,018h,030h ;   Hex #3B
    Db	006h,00Ch,018h,030h,018h,00Ch,006h,000h ;   Hex #3C
    Db	000h,000h,07Eh,000h,000h,07Eh,000h,000h ;   Hex #3D
    Db	060h,030h,018h,00Ch,018h,030h,060h,000h ;   Hex #3E
    Db	07Ch,0C6h,00Ch,018h,018h,000h,018h,000h ;   Hex #3F
    Db	07Ch,0C6h,0DEh,0DEh,0DEh,0C0h,078h,000h ;   Hex #40
    Db	038h,06Ch,0C6h,0FEh,0C6h,0C6h,0C6h,000h ;   Hex #41
    Db	0FCh,066h,066h,07Ch,066h,066h,0FCh,000h ;   Hex #42
    Db	03Ch,066h,0C0h,0C0h,0C0h,066h,03Ch,000h ;   Hex #43
    Db	0F8h,06Ch,066h,066h,066h,06Ch,0F8h,000h ;   Hex #44
    Db	0FEh,062h,068h,078h,068h,062h,0FEh,000h ;   Hex #45
    Db	0FEh,062h,068h,078h,068h,060h,0F0h,000h ;   Hex #46
    Db	03Ch,066h,0C0h,0C0h,0CEh,066h,03Ah,000h ;   Hex #47
    Db	0C6h,0C6h,0C6h,0FEh,0C6h,0C6h,0C6h,000h ;   Hex #48
    Db	03Ch,018h,018h,018h,018h,018h,03Ch,000h ;   Hex #49
    Db	01Eh,00Ch,00Ch,00Ch,0CCh,0CCh,078h,000h ;   Hex #4A
    Db	0E6h,066h,06Ch,078h,06Ch,066h,0E6h,000h ;   Hex #4B
    Db	0F0h,060h,060h,060h,062h,066h,0FEh,000h ;   Hex #4C
    Db	0C6h,0EEh,0FEh,0FEh,0D6h,0C6h,0C6h,000h ;   Hex #4D
    Db	0C6h,0E6h,0F6h,0DEh,0CEh,0C6h,0C6h,000h ;   Hex #4E
    Db	07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #4F
    Db	0FCh,066h,066h,07Ch,060h,060h,0F0h,000h ;   Hex #50
    Db	07Ch,0C6h,0C6h,0C6h,0C6h,0CEh,07Ch,00Eh ;   Hex #51
    Db	0FCh,066h,066h,07Ch,06Ch,066h,0E6h,000h ;   Hex #52
    Db	03Ch,066h,030h,018h,00Ch,066h,03Ch,000h ;   Hex #53
    Db	07Eh,07Eh,05Ah,018h,018h,018h,03Ch,000h ;   Hex #54
    Db	0C6h,0C6h,0C6h,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #55
    Db	0C6h,0C6h,0C6h,0C6h,0C6h,06Ch,038h,000h ;   Hex #56
    Db	0C6h,0C6h,0C6h,0D6h,0D6h,0FEh,06Ch,000h ;   Hex #57
    Db	0C6h,0C6h,06Ch,038h,06Ch,0C6h,0C6h,000h ;   Hex #58
    Db	066h,066h,066h,03Ch,018h,018h,03Ch,000h ;   Hex #59
    Db	0FEh,0C6h,08Ch,018h,032h,066h,0FEh,000h ;   Hex #5A
    Db	03Ch,030h,030h,030h,030h,030h,03Ch,000h ;   Hex #5B
    Db	0C0h,060h,030h,018h,00Ch,006h,002h,000h ;   Hex #5C
    Db	03Ch,00Ch,00Ch,00Ch,00Ch,00Ch,03Ch,000h ;   Hex #5D
    Db	010h,038h,06Ch,0C6h,000h,000h,000h,000h ;   Hex #5E
    Db	000h,000h,000h,000h,000h,000h,000h,0FFh ;   Hex #5F
    Db	030h,018h,00Ch,000h,000h,000h,000h,000h ;   Hex #60
    Db	000h,000h,078h,00Ch,07Ch,0CCh,076h,000h ;   Hex #61
    Db	0E0h,060h,07Ch,066h,066h,066h,0DCh,000h ;   Hex #62
    Db	000h,000h,07Ch,0C6h,0C0h,0C6h,07Ch,000h ;   Hex #63
    Db	01Ch,00Ch,07Ch,0CCh,0CCh,0CCh,076h,000h ;   Hex #64
    Db	000h,000h,07Ch,0C6h,0FEh,0C0h,07Ch,000h ;   Hex #65
    Db	03Ch,066h,060h,0F8h,060h,060h,0F0h,000h ;   Hex #66
    Db	000h,000h,076h,0CCh,0CCh,07Ch,00Ch,0F8h ;   Hex #67
    Db	0E0h,060h,06Ch,076h,066h,066h,0E6h,000h ;   Hex #68
    Db	018h,000h,038h,018h,018h,018h,03Ch,000h ;   Hex #69
    Db	006h,000h,006h,006h,006h,066h,066h,03Ch ;   Hex #6A
    Db	0E0h,060h,066h,06Ch,078h,06Ch,0E6h,000h ;   Hex #6B
    Db	038h,018h,018h,018h,018h,018h,03Ch,000h ;   Hex #6C
    Db	000h,000h,0ECh,0FEh,0D6h,0D6h,0D6h,000h ;   Hex #6D
    Db	000h,000h,0DCh,066h,066h,066h,066h,000h ;   Hex #6E
    Db	000h,000h,07Ch,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #6F
    Db	000h,000h,0DCh,066h,066h,07Ch,060h,0F0h ;   Hex #70
    Db	000h,000h,076h,0CCh,0CCh,07Ch,00Ch,01Eh ;   Hex #71
    Db	000h,000h,0DCh,076h,060h,060h,0F0h,000h ;   Hex #72
    Db	000h,000h,07Eh,0C0h,07Ch,006h,0FCh,000h ;   Hex #73
    Db	030h,030h,0FCh,030h,030h,036h,01Ch,000h ;   Hex #74
    Db	000h,000h,0CCh,0CCh,0CCh,0CCh,076h,000h ;   Hex #75
    Db	000h,000h,0C6h,0C6h,0C6h,06Ch,038h,000h ;   Hex #76
    Db	000h,000h,0C6h,0D6h,0D6h,0FEh,06Ch,000h ;   Hex #77
    Db	000h,000h,0C6h,06Ch,038h,06Ch,0C6h,000h ;   Hex #78
    Db	000h,000h,0C6h,0C6h,0C6h,07Eh,006h,0FCh ;   Hex #79
    Db	000h,000h,07Eh,04Ch,018h,032h,07Eh,000h ;   Hex #7A
    Db	00Eh,018h,018h,070h,018h,018h,00Eh,000h ;   Hex #7B
    Db	018h,018h,018h,018h,018h,018h,018h,000h ;   Hex #7C
    Db	070h,018h,018h,00Eh,018h,018h,070h,000h ;   Hex #7D
    Db	076h,0DCh,000h,000h,000h,000h,000h,000h ;   Hex #7E
    Db	000h,010h,038h,06Ch,0C6h,0C6h,0FEh,000h ;   Hex #7F
    Db	07Ch,0C6h,0C0h,0C0h,0C6h,07Ch,00Ch,078h ;   Hex #80
    Db	0CCh,000h,0CCh,0CCh,0CCh,0CCh,076h,000h ;   Hex #81
    Db	00Ch,018h,07Ch,0C6h,0FEh,0C0h,07Ch,000h ;   Hex #82
    Db	07Ch,082h,078h,00Ch,07Ch,0CCh,076h,000h ;   Hex #83
    Db	0C6h,000h,078h,00Ch,07Ch,0CCh,076h,000h ;   Hex #84
    Db	030h,018h,078h,00Ch,07Ch,0CCh,076h,000h ;   Hex #85
    Db	030h,030h,078h,00Ch,07Ch,0CCh,076h,000h ;   Hex #86
    Db	000h,000h,07Eh,0C0h,0C0h,07Eh,00Ch,038h ;   Hex #87
    Db	07Ch,082h,07Ch,0C6h,0FEh,0C0h,07Ch,000h ;   Hex #88
    Db	0C6h,000h,07Ch,0C6h,0FEh,0C0h,07Ch,000h ;   Hex #89
    Db	030h,018h,07Ch,0C6h,0FEh,0C0h,07Ch,000h ;   Hex #8A
    Db	066h,000h,038h,018h,018h,018h,03Ch,000h ;   Hex #8B
    Db	07Ch,082h,038h,018h,018h,018h,03Ch,000h ;   Hex #8C
    Db	030h,018h,000h,038h,018h,018h,03Ch,000h ;   Hex #8D
    Db	0C6h,038h,06Ch,0C6h,0FEh,0C6h,0C6h,000h ;   Hex #8E
    Db	038h,06Ch,07Ch,0C6h,0FEh,0C6h,0C6h,000h ;   Hex #8F
    Db	018h,030h,0FEh,0C0h,0F8h,0C0h,0FEh,000h ;   Hex #90
    Db	000h,000h,07Eh,012h,0feh,090h,0fEh,000h ;   Hex #91
    Db	03Eh,06Ch,0CCh,0FEh,0CCh,0CCh,0CEh,000h ;   Hex #92
    Db	07Ch,082h,07Ch,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #93
    Db	0C6h,000h,07Ch,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #94
    Db	030h,018h,07Ch,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #95
    Db	078h,084h,000h,0CCh,0CCh,0CCh,076h,000h ;   Hex #96
    Db	060h,030h,0CCh,0CCh,0CCh,0CCh,076h,000h ;   Hex #97
    Db	0C6h,000h,0C6h,0C6h,0C6h,07Eh,006h,0FCh ;   Hex #98
    Db	0C6h,038h,06Ch,0C6h,0C6h,06Ch,038h,000h ;   Hex #99
    Db	0C6h,000h,0C6h,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #9A
    Db	000h,002h,07Ch,0CEh,0D6h,0E6h,07Ch,080h ;   Hex #9B
    Db	038h,06Ch,064h,0F0h,060h,066h,0FCh,000h ;   Hex #9C
    Db	03Ah,06Ch,0CEh,0D6h,0E6h,06Ch,0B8h,000h ;   Hex #9D
    Db	0F8h,0CCh,0CCh,0FAh,0C6h,0CFh,0C6h,0C7h ;   Hex #9E
    Db	00Eh,01Bh,018h,03Ch,018h,0D8h,070h,000h ;   Hex #9F
    Db	018h,030h,078h,00Ch,07Ch,0CCh,076h,000h ;   Hex #A0
    Db	00Ch,018h,000h,038h,018h,018h,03Ch,000h ;   Hex #A1
    Db	00Ch,018h,07Ch,0C6h,0C6h,0C6h,07Ch,000h ;   Hex #A2
    Db	018h,030h,0CCh,0CCh,0CCh,0CCh,076h,000h ;   Hex #A3
    Db	076h,0DCh,000h,0DCh,066h,066h,066h,000h ;   Hex #A4
    Db	076h,0DCh,000h,0E6h,0F6h,0DEh,0CEh,000h ;   Hex #A5
    Db	03Ch,06Ch,06Ch,03Eh,000h,07Eh,000h,000h ;   Hex #A6
    Db	038h,06Ch,06Ch,038h,000h,07Ch,000h,000h ;   Hex #A7
    Db	018h,000h,018h,018h,030h,063h,03Eh,000h ;   Hex #A8
    Db	000h,000h,000h,0FEh,0C0h,0C0h,000h,000h ;   Hex #A9
    Db	000h,000h,000h,0FEh,006h,006h,000h,000h ;   Hex #AA
    Db	063h,0E6h,06Ch,07Eh,033h,066h,0CCh,00Fh ;   Hex #AB
    Db	063h,0E6h,06Ch,07Ah,036h,06Ah,0DFh,006h ;   Hex #AC
    Db	018h,000h,018h,018h,03Ch,03Ch,018h,000h ;   Hex #AD
    Db	000h,033h,066h,0CCh,066h,033h,000h,000h ;   Hex #AE
    Db	000h,0C6h,07Ch,0C6h,0C6h,07Ch,0C6h,000h ;   Hex #AF
    Db	022h,088h,022h,088h,022h,088h,022h,088h ;   Hex #B0
    Db	055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh ;   Hex #B1
    Db	077h,0DDh,077h,0DDh,077h,0DDh,077h,0DDh ;   Hex #B2
    Db	018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B3
    Db	018h,018h,018h,018h,0F8h,018h,018h,018h ;   Hex #B4
    Db	018h,018h,0F8h,018h,0F8h,018h,018h,018h ;   Hex #B5
    Db	036h,036h,036h,036h,0F6h,036h,036h,036h ;   Hex #B6
    Db	000h,000h,000h,000h,0FEh,036h,036h,036h ;   Hex #B7
    Db	000h,000h,0F8h,018h,0F8h,018h,018h,018h ;   Hex #B8
    Db	036h,036h,0F6h,006h,0F6h,036h,036h,036h ;   Hex #B9
    Db	036h,036h,036h,036h,036h,036h,036h,036h ;   Hex #BA
    Db	000h,000h,0FEh,006h,0F6h,036h,036h,036h ;   Hex #BB
    Db	036h,036h,0F6h,006h,0FEh,000h,000h,000h ;   Hex #BC
    Db	036h,036h,036h,036h,0FEh,000h,000h,000h ;   Hex #BD
    Db	018h,018h,0F8h,018h,0F8h,000h,000h,000h ;   Hex #BE
    Db	000h,000h,000h,000h,0F8h,018h,018h,018h ;   Hex #BF
    Db	018h,018h,018h,018h,01Fh,000h,000h,000h ;   Hex #C0
    Db	018h,018h,018h,018h,0FFh,000h,000h,000h ;   Hex #C1
    Db	000h,000h,000h,000h,0FFh,018h,018h,018h ;   Hex #C2
    Db	018h,018h,018h,018h,01Fh,018h,018h,018h ;   Hex #C3
    Db	000h,000h,000h,000h,0FFh,000h,000h,000h ;   Hex #C4
    Db	018h,018h,018h,018h,0FFh,018h,018h,018h ;   Hex #C5
    Db	018h,018h,01Fh,018h,01Fh,018h,018h,018h ;   Hex #C6
    Db	036h,036h,036h,036h,037h,036h,036h,036h ;   Hex #C7
    Db	036h,036h,037h,030h,03Fh,000h,000h,000h ;   Hex #C8
    Db	000h,000h,03Fh,030h,037h,036h,036h,036h ;   Hex #C9
    Db	036h,036h,0F7h,000h,0FFh,000h,000h,000h ;   Hex #CA
    Db	000h,000h,0FFh,000h,0F7h,036h,036h,036h ;   Hex #CB
    Db	036h,036h,037h,030h,037h,036h,036h,036h ;   Hex #CC
    Db	000h,000h,0FFh,000h,0FFh,000h,000h,000h ;   Hex #CD
    Db	036h,036h,0F7h,000h,0F7h,036h,036h,036h ;   Hex #CE
    Db	018h,018h,0FFh,000h,0FFh,000h,000h,000h ;   Hex #CF
    Db	036h,036h,036h,036h,0FFh,000h,000h,000h ;   Hex #D0
    Db	000h,000h,0FFh,000h,0FFh,018h,018h,018h ;   Hex #D1
    Db	000h,000h,000h,000h,0FFh,036h,036h,036h ;   Hex #D2
    Db	036h,036h,036h,036h,03Fh,000h,000h,000h ;   Hex #D3
    Db	018h,018h,01Fh,018h,01Fh,000h,000h,000h ;   Hex #D4
    Db	000h,000h,01Fh,018h,01Fh,018h,018h,018h ;   Hex #D5
    Db	000h,000h,000h,000h,03Fh,036h,036h,036h ;   Hex #D6
    Db	036h,036h,036h,036h,0FFh,036h,036h,036h ;   Hex #D7
    Db	018h,018h,0FFh,018h,0FFh,018h,018h,018h ;   Hex #D8
    Db	018h,018h,018h,018h,0F8h,000h,000h,000h ;   Hex #D9
    Db	000h,000h,000h,000h,01Fh,018h,018h,018h ;   Hex #DA
    Db	0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DB
    Db	000h,000h,000h,000h,0FFh,0FFh,0FFh,0FFh ;   Hex #DC
    Db	0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h ;   Hex #DD
    Db	00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh ;   Hex #DE
    Db	0FFh,0FFh,0FFh,0FFh,000h,000h,000h,000h ;   Hex #DF
    Db	000h,000h,076h,0DCh,0C8h,0DCh,076h,000h ;   Hex #E0
    Db	078h,0CCh,0CCh,0D8h,0CCh,0C6h,0CCh,000h ;   Hex #E1
    Db	0FEh,0C6h,0C0h,0C0h,0C0h,0C0h,0C0h,000h ;   Hex #E2
    Db	000h,000h,0FEh,06Ch,06Ch,06Ch,06Ch,000h ;   Hex #E3
    Db	0FEh,0C6h,060h,030h,060h,0C6h,0FEh,000h ;   Hex #E4
    Db	000h,000h,07Eh,0D8h,0D8h,0D8h,070h,000h ;   Hex #E5
    Db	000h,000h,066h,066h,066h,066h,07Ch,0C0h ;   Hex #E6
    Db	000h,076h,0DCh,018h,018h,018h,018h,000h ;   Hex #E7
    Db	07Eh,018h,03Ch,066h,066h,03Ch,018h,07Eh ;   Hex #E8
    Db	038h,06Ch,0C6h,0FEh,0C6h,06Ch,038h,000h ;   Hex #E9
    Db	038h,06Ch,0C6h,0C6h,06Ch,06Ch,0EEh,000h ;   Hex #EA
    Db	00Eh,018h,00Ch,03Eh,066h,066h,03Ch,000h ;   Hex #EB
    Db	000h,000h,07Eh,0DBh,0DBh,07Eh,000h,000h ;   Hex #EC
    Db	006h,00Ch,07Eh,0DBh,0DBh,07Eh,060h,0C0h ;   Hex #ED
    Db	01Eh,030h,060h,07Eh,060h,030h,01Eh,000h ;   Hex #EE
    Db	000h,07Ch,0C6h,0C6h,0C6h,0C6h,0C6h,000h ;   Hex #EF
    Db	000h,0FEh,000h,0FEh,000h,0FEh,000h,000h ;   Hex #F0
    Db	018h,018h,07Eh,018h,018h,000h,07Eh,000h ;   Hex #F1
    Db	030h,018h,00Ch,018h,030h,000h,07Eh,000h ;   Hex #F2
    Db	00Ch,018h,030h,018h,00Ch,000h,07Eh,000h ;   Hex #F3
    Db	00Eh,01Bh,01Bh,018h,018h,018h,018h,018h ;   Hex #F4
    Db	018h,018h,018h,018h,018h,0D8h,0D8h,070h ;   Hex #F5
    Db	000h,018h,000h,07Eh,000h,018h,000h,000h ;   Hex #F6
    Db	000h,076h,0DCh,000h,076h,0DCh,000h,000h ;   Hex #F7
    Db	038h,06Ch,06Ch,038h,000h,000h,000h,000h ;   Hex #F8
    Db	000h,000h,000h,018h,018h,000h,000h,000h ;   Hex #F9
    Db	000h,000h,000h,018h,000h,000h,000h,000h ;   Hex #FA
    Db	00Fh,00Ch,00Ch,00Ch,0ECh,06Ch,03Ch,01Ch ;   Hex #FB
    Db	06Ch,036h,036h,036h,036h,000h,000h,000h ;   Hex #FC
    Db	078h,00Ch,018h,030h,07Ch,000h,000h,000h ;   Hex #FD
    Db	000h,000h,03Ch,03Ch,03Ch,03Ch,000h,000h ;   Hex #FE
    Db	000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FF


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\lcd\863-cpi.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
CODE	SEGMENT BYTE PUBLIC 'CODE'
	ASSUME CS:CODE,DS:CODE

IF1
;        %OUT    EGA.CPI creation file
;        %OUT    .
;        %OUT    CP SRC files:
;        %OUT    .
;        %OUT .          CODE PAGE:  863
ENDIF

EGA863: DW     LEN_863			;SIZE OF ENTRY HEADER
	DW     POST_EGA863,0		;POINTER TO NEXT HEADER
	DW     1			;DEVICE TYPE
	DB     "LCD     "               ;DEVICE SUBTYPE ID
	DW     863			;CODE PAGE ID
	DW     3 DUP(0) 		;RESERVED
	DW     OFFSET DATA863,0 	;POINTER TO FONTS
LEN_863 EQU    ($-EGA863)

DATA863:DW     1			;CART/NON-CART
	DW     1			;# OF FONTS
	DW     LEN_D863 		;LENGTH OF DATA
D863:					;
	DB     8,8			;CHARACTER BOX SIZE
	DB     0,0			;ASPECT RATIO (UNUSED)
	DW     256			;NUMBER OF CHARACTERS
    Db	000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #0
    Db	03Ch,042h,0A5h,0A5h,081h,0BDh,05Ah,03Ch ;   Hex #1
    Db	03Ch,07Eh,0DBh,0DBh,0FFh,0C3h,066h,03Ch ;   Hex #2
    Db	036h,07Fh,07Fh,07Fh,03Eh,01Ch,008h,000h ;   Hex #3
    Db	008h,01Ch,03Eh,07Fh,03Eh,01Ch,008h,000h ;   Hex #4
    Db	01Ch,03Eh,01Ch,07Fh,07Fh,036h,008h,01Ch ;   Hex #5
    Db	008h,01Ch,03Eh,07Fh,07Fh,036h,008h,01Ch ;   Hex #6
    Db	000h,000h,018h,03Ch,03Ch,018h,000h,000h ;   Hex #7
    Db	0FFh,0FFh,0E7h,0C3h,0C3h,0E7h,0FFh,0FFh ;   Hex #8
    Db	000h,000h,03Ch,066h,066h,03Ch,000h,000h ;   Hex #9
    Db	0FFh,0FFh,0C3h,099h,099h,0C3h,0FFh,0FFh ;   Hex #A
    Db	007h,003h,03Eh,066h,066h,066h,03Ch,000h ;   Hex #B
    Db	03Ch,066h,066h,066h,03Ch,018h,03Ch,018h ;   Hex #C
    Db	008h,00Ch,00Eh,00Ah,00Ah,008h,038h,030h ;   Hex #D
    Db	018h,016h,019h,017h,071h,061h,007h,006h ;   Hex #E
    Db	048h,06Bh,03Eh,0E4h,027h,07Ch,0D6h,012h ;   Hex #F
    Db	040h,070h,07Ch,07Fh,07Ch,070h,040h,000h ;   Hex #10
    Db	001h,007h,01Fh,07Fh,01Fh,007h,001h,000h ;   Hex #11
    Db	018h,03Ch,07Eh,018h,018h,07Eh,03Ch,018h ;   Hex #12
    Db	036h,036h,036h,036h,036h,000h,036h,000h ;   Hex #13
    Db	03Fh,06Ah,06Ah,03Ah,00Ah,00Ah,01Ah,000h ;   Hex #14
    Db	03Ch,076h,038h,06Ch,036h,01Ch,06Eh,03Ch ;   Hex #15
    Db	000h,000h,000h,07Fh,07Fh,07Fh,000h,000h ;   Hex #16
    Db	018h,03Ch,07Eh,018h,07Eh,03Ch,018h,0FFh ;   Hex #17
    Db	018h,03Ch,07Eh,05Ah,018h,018h,018h,000h ;   Hex #18
    Db	018h,018h,018h,05Ah,07Eh,03Ch,018h,000h ;   Hex #19
    Db	000h,00Ch,006h,07Fh,07Fh,006h,00Ch,000h ;   Hex #1A
    Db	000h,018h,030h,07Fh,07Fh,030h,018h,000h ;   Hex #1B
    Db	000h,000h,060h,060h,07Fh,07Fh,000h,000h ;   Hex #1C
    Db	000h,014h,036h,07Fh,07Fh,036h,014h,000h ;   Hex #1D
    Db	008h,008h,01Ch,01Ch,03Eh,03Eh,07Fh,000h ;   Hex #1E
    Db	07Fh,03Eh,03Eh,01Ch,01Ch,008h,008h,000h ;   Hex #1F
    Db	000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #20
    Db	018h,018h,018h,018h,018h,000h,018h,000h ;   Hex #21
    Db	036h,036h,014h,000h,000h,000h,000h,000h ;   Hex #22
    Db	00Ah,00Ah,03Fh,014h,07Eh,028h,028h,000h ;   Hex #23
    Db	008h,03Eh,068h,03Eh,00Bh,07Eh,008h,000h ;   Hex #24
    Db	001h,03Fh,052h,06Ch,01Bh,035h,076h,000h ;   Hex #25
    Db	01Ch,036h,01Ch,03Bh,06Eh,066h,03Bh,000h ;   Hex #26
    Db	018h,018h,030h,000h,000h,000h,000h,000h ;   Hex #27
    Db	006h,00Ch,018h,018h,018h,00Ch,006h,000h ;   Hex #28
    Db	030h,018h,00Ch,00Ch,00Ch,018h,030h,000h ;   Hex #29
    Db	000h,036h,01Ch,07Fh,01Ch,036h,000h,000h ;   Hex #2A
    Db	000h,018h,018h,07Eh,018h,018h,000h,000h ;   Hex #2B
    Db	000h,000h,000h,000h,000h,018h,018h,030h ;   Hex #2C
    Db	000h,000h,000h,07Eh,000h,000h,000h,000h ;   Hex #2D
    Db	000h,000h,000h,000h,000h,018h,018h,000h ;   Hex #2E
    Db	003h,006h,00Ch,018h,030h,060h,040h,000h ;   Hex #2F
    Db	018h,02Ch,066h,066h,066h,034h,018h,000h ;   Hex #30
    Db	018h,018h,038h,018h,018h,018h,03Ch,000h ;   Hex #31
    Db	03Ch,066h,066h,00Ch,018h,032h,07Eh,000h ;   Hex #32
    Db	03Ch,066h,00Ch,01Ch,006h,066h,03Ch,000h ;   Hex #33
    Db	00Ch,01Ch,02Ch,06Ch,07Eh,00Ch,01Eh,000h ;   Hex #34
    Db	07Eh,060h,07Ch,066h,006h,066h,03Ch,000h ;   Hex #35
    Db	01Ch,030h,060h,07Ch,066h,066h,03Ch,000h ;   Hex #36
    Db	07Eh,066h,04Ch,00Ch,018h,018h,038h,000h ;   Hex #37
    Db	03Ch,066h,076h,03Ch,06Eh,066h,03Ch,000h ;   Hex #38
    Db	03Ch,066h,066h,03Eh,006h,00Ch,038h,000h ;   Hex #39
    Db	000h,018h,018h,000h,000h,018h,018h,000h ;   Hex #3A
    Db	000h,018h,018h,000h,000h,018h,018h,030h ;   Hex #3B
    Db	006h,00Ch,018h,030h,018h,00Ch,006h,000h ;   Hex #3C
    Db	000h,000h,07Eh,000h,07Eh,000h,000h,000h ;   Hex #3D
    Db	030h,018h,00Ch,006h,00Ch,018h,030h,000h ;   Hex #3E
    Db	03Ch,066h,026h,00Ch,018h,000h,018h,000h ;   Hex #3F
    Db	03Eh,041h,05Dh,055h,05Fh,040h,03Eh,000h ;   Hex #40
    Db	01Ch,00Ch,01Ch,016h,03Eh,023h,063h,000h ;   Hex #41
    Db	07Ch,036h,036h,03Eh,033h,033h,07Eh,000h ;   Hex #42
    Db	01Dh,033h,061h,060h,060h,031h,01Eh,000h ;   Hex #43
    Db	07Ch,036h,033h,033h,033h,036h,07Ch,000h ;   Hex #44
    Db	07Fh,031h,034h,03Ch,034h,031h,07Fh,000h ;   Hex #45
    Db	07Fh,031h,034h,03Ch,034h,030h,078h,000h ;   Hex #46
    Db	01Dh,033h,061h,060h,067h,033h,01Fh,000h ;   Hex #47
    Db	066h,066h,066h,07Eh,066h,066h,066h,000h ;   Hex #48
    Db	03Ch,018h,018h,018h,018h,018h,03Ch,000h ;   Hex #49
    Db	01Fh,006h,006h,006h,066h,066h,03Ch,000h ;   Hex #4A
    Db	067h,066h,06Ch,078h,06Ch,066h,067h,000h ;   Hex #4B
    Db	078h,030h,030h,030h,031h,033h,07Fh,000h ;   Hex #4C
    Db	041h,063h,077h,07Fh,06Bh,063h,063h,000h ;   Hex #4D
    Db	043h,063h,073h,07Bh,06Fh,067h,063h,000h ;   Hex #4E
    Db	01Ch,036h,063h,063h,063h,036h,01Ch,000h ;   Hex #4F
    Db	07Eh,033h,033h,03Eh,030h,030h,078h,000h ;   Hex #50
    Db	01Ch,036h,063h,063h,06Bh,036h,01Ch,007h ;   Hex #51
    Db	07Ch,066h,066h,07Ch,06Ch,066h,067h,000h ;   Hex #52
    Db	03Eh,066h,070h,03Ch,00Eh,066h,07Ch,000h ;   Hex #53
    Db	07Eh,05Ah,018h,018h,018h,018h,03Ch,000h ;   Hex #54
    Db	063h,063h,063h,063h,063h,063h,03Eh,000h ;   Hex #55
    Db	077h,062h,036h,034h,01Ch,018h,008h,000h ;   Hex #56
    Db	063h,063h,06Bh,06Bh,03Eh,036h,022h,000h ;   Hex #57
    Db	066h,066h,03Ch,018h,03Ch,066h,066h,000h ;   Hex #58
    Db	0E7h,066h,034h,018h,018h,018h,03Ch,000h ;   Hex #59
    Db	07Eh,066h,04Ch,018h,032h,066h,07Eh,000h ;   Hex #5A
    Db	01Eh,018h,018h,018h,018h,018h,01Eh,000h ;   Hex #5B
    Db	060h,030h,018h,00Ch,006h,003h,001h,000h ;   Hex #5C
    Db	03Ch,00Ch,00Ch,00Ch,00Ch,00Ch,03Ch,000h ;   Hex #5D
    Db	008h,01Ch,036h,000h,000h,000h,000h,000h ;   Hex #5E
    Db	000h,000h,000h,000h,000h,000h,000h,0FFh ;   Hex #5F
    Db	030h,018h,00Ch,000h,000h,000h,000h,000h ;   Hex #60
    Db	000h,000h,03Ch,066h,01Eh,066h,07Bh,000h ;   Hex #61
    Db	070h,030h,03Eh,03Bh,033h,03Bh,06Eh,000h ;   Hex #62
    Db	000h,000h,03Eh,066h,060h,066h,03Ch,000h ;   Hex #63
    Db	00Eh,006h,036h,06Eh,066h,066h,03Bh,000h ;   Hex #64
    Db	000h,000h,03Ch,066h,07Eh,060h,03Eh,000h ;   Hex #65
    Db	00Eh,01Bh,018h,03Eh,018h,018h,03Ch,000h ;   Hex #66
    Db	000h,000h,03Dh,066h,038h,03Eh,063h,03Eh ;   Hex #67
    Db	070h,030h,036h,03Bh,033h,033h,073h,000h ;   Hex #68
    Db	018h,000h,038h,018h,018h,018h,03Ch,000h ;   Hex #69
    Db	00Ch,000h,01Ch,00Ch,00Ch,06Ch,06Ch,038h ;   Hex #6A
    Db	070h,030h,033h,036h,03Ch,036h,077h,000h ;   Hex #6B
    Db	038h,018h,018h,018h,018h,018h,03Ch,000h ;   Hex #6C
    Db	000h,000h,076h,07Fh,06Bh,06Bh,06Bh,000h ;   Hex #6D
    Db	000h,000h,076h,03Bh,033h,033h,073h,000h ;   Hex #6E
    Db	000h,000h,03Ch,066h,066h,066h,03Ch,000h ;   Hex #6F
    Db	000h,000h,06Eh,033h,033h,03Eh,030h,078h ;   Hex #70
    Db	000h,000h,03Ah,066h,066h,03Eh,006h,00Fh ;   Hex #71
    Db	000h,000h,06Eh,03Bh,033h,030h,078h,000h ;   Hex #72
    Db	000h,000h,03Eh,070h,03Ch,00Eh,07Ch,000h ;   Hex #73
    Db	008h,018h,03Eh,018h,018h,01Ah,00Ch,000h ;   Hex #74
    Db	000h,000h,066h,066h,066h,066h,03Bh,000h ;   Hex #75
    Db	000h,000h,073h,032h,036h,01Ch,008h,000h ;   Hex #76
    Db	000h,000h,06Bh,06Bh,07Fh,036h,022h,000h ;   Hex #77
    Db	000h,000h,073h,036h,01Ch,036h,067h,000h ;   Hex #78
    Db	000h,000h,077h,033h,01Ah,00Ch,06Ch,038h ;   Hex #79
    Db	000h,000h,07Eh,04Ch,018h,032h,07Eh,000h ;   Hex #7A
    Db	00Eh,018h,018h,070h,018h,018h,00Eh,000h ;   Hex #7B
    Db	018h,018h,018h,018h,018h,018h,018h,000h ;   Hex #7C
    Db	070h,018h,018h,00Eh,018h,018h,070h,000h ;   Hex #7D
    Db	039h,04Eh,000h,000h,000h,000h,000h,000h ;   Hex #7E
    Db	008h,01Ch,01Ch,036h,026h,063h,07Fh,07Fh ;   Hex #7F
    Db	01Dh,033h,061h,060h,060h,031h,00Eh,01Ch ;   Hex #80
    Db	06Ch,000h,066h,066h,066h,066h,03Bh,000h ;   Hex #81
    Db	00Ch,018h,03Ch,066h,07Eh,060h,03Eh,000h ;   Hex #82
    Db	018h,03Ch,03Ch,066h,01Eh,066h,07Bh,000h ;   Hex #83
    Db	01Ch,036h,008h,01Eh,036h,03Fh,063h,000h ;   Hex #84
    Db	030h,018h,03Ch,066h,01Eh,066h,07Bh,000h ;   Hex #85
    Db	03Fh,06Ah,06Ah,03Ah,00Ah,00Ah,01Ah,000h ;   Hex #86
    Db	000h,000h,03Eh,066h,060h,036h,01Ch,038h ;   Hex #87
    Db	018h,03Ch,03Ch,066h,07Eh,060h,03Eh,000h ;   Hex #88
    Db	036h,000h,03Ch,066h,07Eh,060h,03Eh,000h ;   Hex #89
    Db	030h,018h,03Ch,066h,07Eh,060h,03Eh,000h ;   Hex #8A
    Db	06Ch,000h,038h,018h,018h,018h,03Ch,000h ;   Hex #8B
    Db	018h,03Ch,000h,038h,018h,018h,03Ch,000h ;   Hex #8C
    Db	000h,000h,000h,000h,000h,0FFh,000h,0FFh ;   Hex #8D
    Db	01Ch,006h,01Ch,016h,036h,03Fh,063h,000h ;   Hex #8E
    Db	03Ch,076h,038h,06Ch,036h,01Ch,06Eh,03Ch ;   Hex #8F
    Db	006h,00Ch,07Fh,031h,03Ch,031h,07Fh,000h ;   Hex #90
    Db	018h,00Ch,07Fh,031h,03Ch,031h,07Fh,000h ;   Hex #91
    Db	01Ch,036h,07Fh,031h,03Ch,031h,07Fh,000h ;   Hex #92
    Db	018h,03Ch,03Ch,066h,066h,066h,03Ch,000h ;   Hex #93
    Db	036h,000h,07Fh,031h,03Ch,031h,07Fh,000h ;   Hex #94
    Db	066h,000h,03Ch,018h,018h,018h,03Ch,000h ;   Hex #95
    Db	018h,03Ch,042h,066h,066h,066h,03Bh,000h ;   Hex #96
    Db	030h,018h,066h,066h,066h,066h,03Bh,000h ;   Hex #97
    Db	000h,066h,07Eh,024h,024h,07Eh,066h,000h ;   Hex #98
    Db	01Ch,036h,03Eh,063h,063h,036h,01Ch,000h ;   Hex #99
    Db	036h,041h,063h,063h,063h,063h,03Eh,000h ;   Hex #9A
    Db	006h,004h,03Ch,06Eh,068h,06Ah,03Ch,030h ;   Hex #9B
    Db	01Eh,033h,033h,07Ch,039h,05Bh,076h,000h ;   Hex #9C
    Db	018h,06Dh,063h,063h,063h,063h,03Eh,000h ;   Hex #9D
    Db	01Ch,036h,041h,063h,063h,063h,03Eh,000h ;   Hex #9E
    Db	00Eh,01Bh,018h,03Eh,018h,018h,058h,070h ;   Hex #9F
    Db	018h,018h,018h,000h,000h,018h,018h,018h ;   Hex #A0
    Db	00Ch,018h,030h,000h,000h,000h,000h,000h ;   Hex #A1
    Db	00Ch,018h,03Ch,066h,066h,066h,03Ch,000h ;   Hex #A2
    Db	00Ch,018h,066h,066h,066h,066h,03Bh,000h ;   Hex #A3
    Db	036h,000h,000h,000h,000h,000h,000h,000h ;   Hex #A4
    Db	000h,000h,000h,000h,000h,000h,00Eh,01Ch ;   Hex #A5
    Db	03Ch,066h,01Ch,066h,03Ch,000h,000h,000h ;   Hex #A6
    Db	0FFh,000h,000h,000h,000h,000h,000h,000h ;   Hex #A7
    Db	018h,024h,03Ch,018h,018h,018h,03Ch,000h ;   Hex #A8
    Db	000h,000h,000h,07Eh,060h,060h,000h,000h ;   Hex #A9
    Db	000h,000h,000h,07Eh,006h,006h,000h,000h ;   Hex #AA
    Db	060h,066h,06Ch,07Eh,03Bh,066h,04Ch,00Fh ;   Hex #AB
    Db	060h,066h,06Ch,07Bh,037h,06Bh,04Fh,003h ;   Hex #AC
    Db	070h,05Bh,036h,05Fh,07Fh,03Bh,06Fh,043h ;   Hex #AD
    Db	000h,01Bh,036h,06Ch,06Ch,036h,01Bh,000h ;   Hex #AE
    Db	000h,06Ch,036h,01Bh,01Bh,036h,06Ch,000h ;   Hex #AF
    Db	011h,044h,011h,044h,011h,044h,011h,044h ;   Hex #B0
    Db	055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh ;   Hex #B1
    Db	0EEh,0BBh,0EEh,0BBh,0EEh,0BBh,0EEh,0BBh ;   Hex #B2
    Db	018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B3
    Db	018h,018h,018h,0F8h,0F8h,018h,018h,018h ;   Hex #B4
    Db	018h,018h,0F8h,0F8h,018h,0F8h,018h,018h ;   Hex #B5
    Db	034h,034h,034h,0F4h,0F4h,034h,034h,034h ;   Hex #B6
    Db	000h,000h,000h,0F8h,0FCh,034h,034h,034h ;   Hex #B7
    Db	000h,000h,0F0h,0F8h,018h,0F8h,018h,018h ;   Hex #B8
    Db	034h,034h,0F4h,0F4h,004h,0F4h,034h,034h ;   Hex #B9
    Db	034h,034h,034h,034h,034h,034h,034h,034h ;   Hex #BA
    Db	000h,000h,0F8h,0FCh,004h,0F4h,034h,034h ;   Hex #BB
    Db	034h,034h,0F4h,0F4h,004h,0FCh,000h,000h ;   Hex #BC
    Db	034h,034h,034h,0FCh,0FCh,000h,000h,000h ;   Hex #BD
    Db	018h,018h,0F8h,0F8h,018h,0F8h,000h,000h ;   Hex #BE
    Db	000h,000h,000h,0F8h,0F8h,018h,018h,018h ;   Hex #BF
    Db	018h,018h,018h,01Fh,01Fh,000h,000h,000h ;   Hex #C0
    Db	018h,018h,018h,0FFh,0FFh,000h,000h,000h ;   Hex #C1
    Db	000h,000h,000h,0FFh,0FFh,018h,018h,018h ;   Hex #C2
    Db	018h,018h,018h,01Fh,01Fh,018h,018h,018h ;   Hex #C3
    Db	000h,000h,000h,0FFh,0FFh,000h,000h,000h ;   Hex #C4
    Db	018h,018h,018h,0FFh,0FFh,018h,018h,018h ;   Hex #C5
    Db	018h,018h,01Fh,01Fh,018h,01Fh,018h,018h ;   Hex #C6
    Db	034h,034h,034h,037h,037h,034h,034h,034h ;   Hex #C7
    Db	034h,034h,037h,037h,030h,01Fh,000h,000h ;   Hex #C8
    Db	000h,000h,03Fh,03Fh,030h,037h,034h,034h ;   Hex #C9
    Db	034h,034h,0F7h,0F7h,000h,0FFh,000h,000h ;   Hex #CA
    Db	000h,000h,0FFh,0FFh,000h,0F7h,034h,034h ;   Hex #CB
    Db	034h,034h,037h,037h,030h,037h,034h,034h ;   Hex #CC
    Db	000h,000h,0FFh,0FFh,000h,0FFh,000h,000h ;   Hex #CD
    Db	034h,034h,0F7h,0F7h,000h,0F7h,034h,034h ;   Hex #CE
    Db	018h,018h,0FFh,0FFh,000h,0FFh,000h,000h ;   Hex #CF
    Db	034h,034h,034h,0FFh,0FFh,000h,000h,000h ;   Hex #D0
    Db	000h,000h,0FFh,0FFh,000h,0FFh,018h,018h ;   Hex #D1
    Db	000h,000h,000h,0FFh,0FFh,034h,034h,034h ;   Hex #D2
    Db	034h,034h,034h,03Fh,01Fh,000h,000h,000h ;   Hex #D3
    Db	018h,018h,01Fh,01Fh,018h,00Fh,000h,000h ;   Hex #D4
    Db	000h,000h,01Fh,01Fh,018h,01Fh,018h,018h ;   Hex #D5
    Db	000h,000h,000h,03Fh,03Fh,034h,034h,034h ;   Hex #D6
    Db	034h,034h,034h,0FFh,0FFh,034h,034h,034h ;   Hex #D7
    Db	018h,018h,0FFh,0FFh,018h,0FFh,018h,018h ;   Hex #D8
    Db	018h,018h,018h,0F8h,0F8h,000h,000h,000h ;   Hex #D9
    Db	000h,000h,000h,01Fh,01Fh,018h,018h,018h ;   Hex #DA
    Db	0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DB
    Db	000h,000h,000h,000h,0FFh,0FFh,0FFh,0FFh ;   Hex #DC
    Db	0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h ;   Hex #DD
    Db	00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh ;   Hex #DE
    Db	0FFh,0FFh,0FFh,0FFh,000h,000h,000h,000h ;   Hex #DF
    Db	000h,000h,03Dh,06Eh,066h,06Eh,03Bh,000h ;   Hex #E0
    Db	03Ch,066h,06Ch,066h,063h,07Bh,06Eh,000h ;   Hex #E1
    Db	07Fh,033h,031h,030h,030h,030h,078h,000h ;   Hex #E2
    Db	000h,03Fh,07Eh,054h,014h,036h,066h,000h ;   Hex #E3
    Db	07Fh,033h,018h,00Ch,018h,033h,07Fh,000h ;   Hex #E4
    Db	000h,000h,03Fh,06Ch,06Ch,06Ch,038h,000h ;   Hex #E5
    Db	000h,000h,033h,033h,033h,037h,06Dh,060h ;   Hex #E6
    Db	000h,03Fh,07Eh,050h,018h,01Ch,00Ch,000h ;   Hex #E7
    Db	01Ch,008h,03Eh,06Bh,03Eh,008h,01Ch,000h ;   Hex #E8
    Db	01Ch,036h,063h,07Fh,063h,036h,01Ch,000h ;   Hex #E9
    Db	01Ch,036h,063h,063h,036h,055h,077h,000h ;   Hex #EA
    Db	01Ch,030h,018h,02Ch,066h,066h,03Ch,000h ;   Hex #EB
    Db	000h,036h,07Fh,04Dh,059h,07Fh,036h,000h ;   Hex #EC
    Db	000h,000h,036h,06Fh,06Bh,03Eh,008h,00Ch ;   Hex #ED
    Db	000h,000h,01Eh,030h,03Eh,030h,01Eh,000h ;   Hex #EE
    Db	03Ch,066h,066h,066h,066h,066h,066h,000h ;   Hex #EF
    Db	000h,07Eh,000h,07Eh,000h,07Eh,000h,000h ;   Hex #F0
    Db	018h,018h,07Eh,018h,018h,000h,07Eh,000h ;   Hex #F1
    Db	060h,038h,00Eh,038h,060h,000h,07Eh,000h ;   Hex #F2
    Db	006h,01Ch,070h,01Ch,006h,000h,07Eh,000h ;   Hex #F3
    Db	00Eh,01Bh,01Ah,018h,018h,018h,018h,018h ;   Hex #F4
    Db	018h,018h,018h,018h,058h,0D8h,070h,000h ;   Hex #F5
    Db	018h,018h,000h,07Eh,000h,018h,018h,000h ;   Hex #F6
    Db	000h,03Bh,06Eh,000h,03Bh,06Eh,000h,000h ;   Hex #F7
    Db	01Ch,036h,036h,01Ch,000h,000h,000h,000h ;   Hex #F8
    Db	000h,000h,018h,03Ch,018h,000h,000h,000h ;   Hex #F9
    Db	000h,000h,000h,018h,000h,000h,000h,000h ;   Hex #FA
    Db	003h,002h,006h,024h,06Ch,038h,018h,010h ;   Hex #FB
    Db	076h,03Bh,033h,033h,033h,000h,000h,000h ;   Hex #FC
    Db	03Ch,066h,00Ch,038h,07Eh,000h,000h,000h ;   Hex #FD
    Db	000h,000h,03Ch,03Ch,03Ch,03Ch,000h,000h ;   Hex #FE
    Db	000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FF
LEN_D863	EQU ($-D863)
					;
POST_EGA863	EQU	$		;
					;
					;
CODE	ENDS				;
	END				;

=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\lcd\865-cpi.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
CODE	SEGMENT BYTE PUBLIC 'CODE'
	ASSUME CS:CODE,DS:CODE

IF1
;        %OUT    EGA.CPI creation file
;        %OUT    .
;        %OUT    CP SRC files:
;        %OUT    .
;        %OUT .          CODE PAGE:  865
ENDIF

EGA865: DW     LEN_865			;SIZE OF ENTRY HEADER
;;;;;;;;DW     POST_EGA865,0		;POINTER TO NEXT HEADER
	DW     -1,-1			;NO MORE TO COME......LAST ENTRY
	DW     1			;DEVICE TYPE
	DB     "LCD     "               ;DEVICE SUBTYPE ID
	DW     865			;CODE PAGE ID
	DW     3 DUP(0) 		;RESERVED
	DW     OFFSET DATA865,0 	;POINTER TO FONTS
LEN_865 EQU    ($-EGA865)

DATA865:DW     1			;CART/NON-CART
	DW     1			;# OF FONTS
	DW     LEN_D865 		;LENGTH OF DATA
D865:					;
	DB     8,8			;CHARACTER BOX SIZE
	DB     0,0			;ASPECT RATIO (UNUSED)
	DW     256			;NUMBER OF CHARACTERS
    Db	000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #0
    Db	03Ch,042h,0A5h,0A5h,081h,0BDh,05Ah,03Ch ;   Hex #1
    Db	03Ch,07Eh,0DBh,0DBh,0FFh,0C3h,066h,03Ch ;   Hex #2
    Db	036h,07Fh,07Fh,07Fh,03Eh,01Ch,008h,000h ;   Hex #3
    Db	008h,01Ch,03Eh,07Fh,03Eh,01Ch,008h,000h ;   Hex #4
    Db	01Ch,03Eh,01Ch,07Fh,07Fh,036h,008h,01Ch ;   Hex #5
    Db	008h,01Ch,03Eh,07Fh,07Fh,036h,008h,01Ch ;   Hex #6
    Db	000h,000h,018h,03Ch,03Ch,018h,000h,000h ;   Hex #7
    Db	0FFh,0FFh,0E7h,0C3h,0C3h,0E7h,0FFh,0FFh ;   Hex #8
    Db	000h,000h,03Ch,066h,066h,03Ch,000h,000h ;   Hex #9
    Db	0FFh,0FFh,0C3h,099h,099h,0C3h,0FFh,0FFh ;   Hex #A
    Db	007h,003h,03Eh,066h,066h,066h,03Ch,000h ;   Hex #B
    Db	03Ch,066h,066h,066h,03Ch,018h,03Ch,018h ;   Hex #C
    Db	008h,00Ch,00Eh,00Ah,00Ah,008h,038h,030h ;   Hex #D
    Db	018h,016h,019h,017h,071h,061h,007h,006h ;   Hex #E
    Db	048h,06Bh,03Eh,0E4h,027h,07Ch,0D6h,012h ;   Hex #F
    Db	040h,070h,07Ch,07Fh,07Ch,070h,040h,000h ;   Hex #10
    Db	001h,007h,01Fh,07Fh,01Fh,007h,001h,000h ;   Hex #11
    Db	018h,03Ch,07Eh,018h,018h,07Eh,03Ch,018h ;   Hex #12
    Db	036h,036h,036h,036h,036h,000h,036h,000h ;   Hex #13
    Db	03Fh,06Ah,06Ah,03Ah,00Ah,00Ah,01Ah,000h ;   Hex #14
    Db	03Ch,076h,038h,06Ch,036h,01Ch,06Eh,03Ch ;   Hex #15
    Db	000h,000h,000h,07Fh,07Fh,07Fh,000h,000h ;   Hex #16
    Db	018h,03Ch,07Eh,018h,07Eh,03Ch,018h,0FFh ;   Hex #17
    Db	018h,03Ch,07Eh,05Ah,018h,018h,018h,000h ;   Hex #18
    Db	018h,018h,018h,05Ah,07Eh,03Ch,018h,000h ;   Hex #19
    Db	000h,00Ch,006h,07Fh,07Fh,006h,00Ch,000h ;   Hex #1A
    Db	000h,018h,030h,07Fh,07Fh,030h,018h,000h ;   Hex #1B
    Db	000h,000h,060h,060h,07Fh,07Fh,000h,000h ;   Hex #1C
    Db	000h,014h,036h,07Fh,07Fh,036h,014h,000h ;   Hex #1D
    Db	008h,008h,01Ch,01Ch,03Eh,03Eh,07Fh,000h ;   Hex #1E
    Db	07Fh,03Eh,03Eh,01Ch,01Ch,008h,008h,000h ;   Hex #1F
    Db	000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #20
    Db	018h,018h,018h,018h,018h,000h,018h,000h ;   Hex #21
    Db	036h,036h,014h,000h,000h,000h,000h,000h ;   Hex #22
    Db	00Ah,00Ah,03Fh,014h,07Eh,028h,028h,000h ;   Hex #23
    Db	008h,03Eh,068h,03Eh,00Bh,07Eh,008h,000h ;   Hex #24
    Db	001h,03Fh,052h,06Ch,01Bh,035h,076h,000h ;   Hex #25
    Db	01Ch,036h,01Ch,03Bh,06Eh,066h,03Bh,000h ;   Hex #26
    Db	018h,018h,030h,000h,000h,000h,000h,000h ;   Hex #27
    Db	006h,00Ch,018h,018h,018h,00Ch,006h,000h ;   Hex #28
    Db	030h,018h,00Ch,00Ch,00Ch,018h,030h,000h ;   Hex #29
    Db	000h,036h,01Ch,07Fh,01Ch,036h,000h,000h ;   Hex #2A
    Db	000h,018h,018h,07Eh,018h,018h,000h,000h ;   Hex #2B
    Db	000h,000h,000h,000h,000h,018h,018h,030h ;   Hex #2C
    Db	000h,000h,000h,07Eh,000h,000h,000h,000h ;   Hex #2D
    Db	000h,000h,000h,000h,000h,018h,018h,000h ;   Hex #2E
    Db	003h,006h,00Ch,018h,030h,060h,040h,000h ;   Hex #2F
    Db	018h,02Ch,066h,066h,066h,034h,018h,000h ;   Hex #30
    Db	018h,018h,038h,018h,018h,018h,03Ch,000h ;   Hex #31
    Db	03Ch,066h,066h,00Ch,018h,032h,07Eh,000h ;   Hex #32
    Db	03Ch,066h,00Ch,01Ch,006h,066h,03Ch,000h ;   Hex #33
    Db	00Ch,01Ch,02Ch,06Ch,07Eh,00Ch,01Eh,000h ;   Hex #34
    Db	07Eh,060h,07Ch,066h,006h,066h,03Ch,000h ;   Hex #35
    Db	01Ch,030h,060h,07Ch,066h,066h,03Ch,000h ;   Hex #36
    Db	07Eh,066h,04Ch,00Ch,018h,018h,038h,000h ;   Hex #37
    Db	03Ch,066h,076h,03Ch,06Eh,066h,03Ch,000h ;   Hex #38
    Db	03Ch,066h,066h,03Eh,006h,00Ch,038h,000h ;   Hex #39
    Db	000h,018h,018h,000h,000h,018h,018h,000h ;   Hex #3A
    Db	000h,018h,018h,000h,000h,018h,018h,030h ;   Hex #3B
    Db	006h,00Ch,018h,030h,018h,00Ch,006h,000h ;   Hex #3C
    Db	000h,000h,07Eh,000h,07Eh,000h,000h,000h ;   Hex #3D
    Db	030h,018h,00Ch,006h,00Ch,018h,030h,000h ;   Hex #3E
    Db	03Ch,066h,026h,00Ch,018h,000h,018h,000h ;   Hex #3F
    Db	03Eh,041h,05Dh,055h,05Fh,040h,03Eh,000h ;   Hex #40
    Db	01Ch,00Ch,01Ch,016h,03Eh,023h,063h,000h ;   Hex #41
    Db	07Ch,036h,036h,03Eh,033h,033h,07Eh,000h ;   Hex #42
    Db	01Dh,033h,061h,060h,060h,031h,01Eh,000h ;   Hex #43
    Db	07Ch,036h,033h,033h,033h,036h,07Ch,000h ;   Hex #44
    Db	07Fh,031h,034h,03Ch,034h,031h,07Fh,000h ;   Hex #45
    Db	07Fh,031h,034h,03Ch,034h,030h,078h,000h ;   Hex #46
    Db	01Dh,033h,061h,060h,067h,033h,01Fh,000h ;   Hex #47
    Db	066h,066h,066h,07Eh,066h,066h,066h,000h ;   Hex #48
    Db	03Ch,018h,018h,018h,018h,018h,03Ch,000h ;   Hex #49
    Db	01Fh,006h,006h,006h,066h,066h,03Ch,000h ;   Hex #4A
    Db	067h,066h,06Ch,078h,06Ch,066h,067h,000h ;   Hex #4B
    Db	078h,030h,030h,030h,031h,033h,07Fh,000h ;   Hex #4C
    Db	041h,063h,077h,07Fh,06Bh,063h,063h,000h ;   Hex #4D
    Db	043h,063h,073h,07Bh,06Fh,067h,063h,000h ;   Hex #4E
    Db	01Ch,036h,063h,063h,063h,036h,01Ch,000h ;   Hex #4F
    Db	07Eh,033h,033h,03Eh,030h,030h,078h,000h ;   Hex #50
    Db	01Ch,036h,063h,063h,06Bh,036h,01Ch,007h ;   Hex #51
    Db	07Ch,066h,066h,07Ch,06Ch,066h,067h,000h ;   Hex #52
    Db	03Eh,066h,070h,03Ch,00Eh,066h,07Ch,000h ;   Hex #53
    Db	07Eh,05Ah,018h,018h,018h,018h,03Ch,000h ;   Hex #54
    Db	063h,063h,063h,063h,063h,063h,03Eh,000h ;   Hex #55
    Db	077h,062h,036h,034h,01Ch,018h,008h,000h ;   Hex #56
    Db	063h,063h,06Bh,06Bh,03Eh,036h,022h,000h ;   Hex #57
    Db	066h,066h,03Ch,018h,03Ch,066h,066h,000h ;   Hex #58
    Db	0E7h,066h,034h,018h,018h,018h,03Ch,000h ;   Hex #59
    Db	07Eh,066h,04Ch,018h,032h,066h,07Eh,000h ;   Hex #5A
    Db	01Eh,018h,018h,018h,018h,018h,01Eh,000h ;   Hex #5B
    Db	060h,030h,018h,00Ch,006h,003h,001h,000h ;   Hex #5C
    Db	03Ch,00Ch,00Ch,00Ch,00Ch,00Ch,03Ch,000h ;   Hex #5D
    Db	008h,01Ch,036h,000h,000h,000h,000h,000h ;   Hex #5E
    Db	000h,000h,000h,000h,000h,000h,000h,0FFh ;   Hex #5F
    Db	030h,018h,00Ch,000h,000h,000h,000h,000h ;   Hex #60
    Db	000h,000h,03Ch,066h,01Eh,066h,07Bh,000h ;   Hex #61
    Db	070h,030h,03Eh,03Bh,033h,03Bh,06Eh,000h ;   Hex #62
    Db	000h,000h,03Eh,066h,060h,066h,03Ch,000h ;   Hex #63
    Db	00Eh,006h,036h,06Eh,066h,066h,03Bh,000h ;   Hex #64
    Db	000h,000h,03Ch,066h,07Eh,060h,03Eh,000h ;   Hex #65
    Db	00Eh,01Bh,018h,03Eh,018h,018h,03Ch,000h ;   Hex #66
    Db	000h,000h,03Dh,066h,038h,03Eh,063h,03Eh ;   Hex #67
    Db	070h,030h,036h,03Bh,033h,033h,073h,000h ;   Hex #68
    Db	018h,000h,038h,018h,018h,018h,03Ch,000h ;   Hex #69
    Db	00Ch,000h,01Ch,00Ch,00Ch,06Ch,06Ch,038h ;   Hex #6A
    Db	070h,030h,033h,036h,03Ch,036h,077h,000h ;   Hex #6B
    Db	038h,018h,018h,018h,018h,018h,03Ch,000h ;   Hex #6C
    Db	000h,000h,076h,07Fh,06Bh,06Bh,06Bh,000h ;   Hex #6D
    Db	000h,000h,076h,03Bh,033h,033h,073h,000h ;   Hex #6E
    Db	000h,000h,03Ch,066h,066h,066h,03Ch,000h ;   Hex #6F
    Db	000h,000h,06Eh,033h,033h,03Eh,030h,078h ;   Hex #70
    Db	000h,000h,03Ah,066h,066h,03Eh,006h,00Fh ;   Hex #71
    Db	000h,000h,06Eh,03Bh,033h,030h,078h,000h ;   Hex #72
    Db	000h,000h,03Eh,070h,03Ch,00Eh,07Ch,000h ;   Hex #73
    Db	008h,018h,03Eh,018h,018h,01Ah,00Ch,000h ;   Hex #74
    Db	000h,000h,066h,066h,066h,066h,03Bh,000h ;   Hex #75
    Db	000h,000h,073h,032h,036h,01Ch,008h,000h ;   Hex #76
    Db	000h,000h,06Bh,06Bh,07Fh,036h,022h,000h ;   Hex #77
    Db	000h,000h,073h,036h,01Ch,036h,067h,000h ;   Hex #78
    Db	000h,000h,077h,033h,01Ah,00Ch,06Ch,038h ;   Hex #79
    Db	000h,000h,07Eh,04Ch,018h,032h,07Eh,000h ;   Hex #7A
    Db	00Eh,018h,018h,070h,018h,018h,00Eh,000h ;   Hex #7B
    Db	018h,018h,018h,018h,018h,018h,018h,000h ;   Hex #7C
    Db	070h,018h,018h,00Eh,018h,018h,070h,000h ;   Hex #7D
    Db	039h,04Eh,000h,000h,000h,000h,000h,000h ;   Hex #7E
    Db	008h,01Ch,01Ch,036h,026h,063h,07Fh,07Fh ;   Hex #7F
    Db	01Dh,033h,061h,060h,060h,031h,00Eh,01Ch ;   Hex #80
    Db	06Ch,000h,066h,066h,066h,066h,03Bh,000h ;   Hex #81
    Db	00Ch,018h,03Ch,066h,07Eh,060h,03Eh,000h ;   Hex #82
    Db	018h,03Ch,03Ch,066h,01Eh,066h,07Bh,000h ;   Hex #83
    Db	036h,000h,03Ch,066h,01Eh,066h,07Bh,000h ;   Hex #84
    Db	030h,018h,03Ch,066h,01Eh,066h,07Bh,000h ;   Hex #85
    Db	018h,018h,03Ch,066h,01Eh,066h,07Bh,000h ;   Hex #86
    Db	000h,000h,03Eh,066h,060h,036h,01Ch,038h ;   Hex #87
    Db	018h,03Ch,03Ch,066h,07Eh,060h,03Eh,000h ;   Hex #88
    Db	036h,000h,03Ch,066h,07Eh,060h,03Eh,000h ;   Hex #89
    Db	030h,018h,03Ch,066h,07Eh,060h,03Eh,000h ;   Hex #8A
    Db	06Ch,000h,038h,018h,018h,018h,03Ch,000h ;   Hex #8B
    Db	018h,03Ch,000h,038h,018h,018h,03Ch,000h ;   Hex #8C
    Db	030h,018h,000h,038h,018h,018h,03Ch,000h ;   Hex #8D
    Db	036h,008h,01Ch,016h,036h,03Fh,063h,000h ;   Hex #8E
    Db	01Ch,014h,01Ch,01Eh,036h,03Fh,063h,000h ;   Hex #8F
    Db	006h,00Ch,07Fh,031h,03Ch,031h,07Fh,000h ;   Hex #90
    Db	000h,000h,076h,01Bh,03Fh,06Ch,077h,000h ;   Hex #91
    Db	03Fh,03Dh,02Ch,03Eh,06Ch,06Dh,06Fh,000h ;   Hex #92
    Db	018h,03Ch,03Ch,066h,066h,066h,03Ch,000h ;   Hex #93
    Db	066h,000h,03Ch,066h,066h,066h,03Ch,000h ;   Hex #94
    Db	030h,018h,03Ch,066h,066h,066h,03Ch,000h ;   Hex #95
    Db	018h,03Ch,042h,066h,066h,066h,03Bh,000h ;   Hex #96
    Db	030h,018h,066h,066h,066h,066h,03Bh,000h ;   Hex #97
    Db	036h,000h,077h,033h,01Ah,00Ch,06Ch,038h ;   Hex #98
    Db	063h,01Ch,036h,063h,063h,036h,01Ch,000h ;   Hex #99
    Db	036h,041h,063h,063h,063h,063h,03Eh,000h ;   Hex #9A
    Db	000h,004h,03Ch,06Eh,07Eh,076h,03Ch,020h ;   Hex #9B
    Db	01Eh,033h,033h,07Ch,039h,05Bh,076h,000h ;   Hex #9C
    Db	01Dh,036h,067h,06Bh,073h,036h,05Ch,000h ;   Hex #9D
    Db	078h,06Ch,06Ch,07Ah,066h,06Fh,066h,003h ;   Hex #9E
    Db	00Eh,01Bh,018h,03Eh,018h,018h,058h,070h ;   Hex #9F
    Db	00Ch,018h,03Ch,066h,01Eh,066h,07Bh,000h ;   Hex #A0
    Db	018h,030h,000h,038h,018h,018h,03Ch,000h ;   Hex #A1
    Db	00Ch,018h,03Ch,066h,066h,066h,03Ch,000h ;   Hex #A2
    Db	00Ch,018h,066h,066h,066h,066h,03Bh,000h ;   Hex #A3
    Db	01Ah,02Ch,076h,03Bh,033h,033h,073h,000h ;   Hex #A4
    Db	01Ah,02Ch,073h,07Bh,06Fh,067h,063h,000h ;   Hex #A5
    Db	01Eh,036h,036h,01Fh,000h,03Fh,000h,000h ;   Hex #A6
    Db	01Ch,036h,036h,01Ch,000h,03Eh,000h,000h ;   Hex #A7
    Db	018h,000h,018h,030h,064h,066h,03Ch,000h ;   Hex #A8
    Db	000h,000h,000h,07Eh,060h,060h,000h,000h ;   Hex #A9
    Db	000h,000h,000h,07Eh,006h,006h,000h,000h ;   Hex #AA
    Db	060h,066h,06Ch,07Eh,03Bh,066h,04Ch,00Fh ;   Hex #AB
    Db	060h,066h,06Ch,07Bh,037h,06Bh,04Fh,003h ;   Hex #AC
    Db	018h,000h,018h,018h,018h,018h,018h,000h ;   Hex #AD
    Db	000h,01Bh,036h,06Ch,06Ch,036h,01Bh,000h ;   Hex #AE
    Db	000h,066h,07Eh,024h,024h,07Eh,066h,000h ;   Hex #AF
    Db	011h,044h,011h,044h,011h,044h,011h,044h ;   Hex #B0
    Db	055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh ;   Hex #B1
    Db	0EEh,0BBh,0EEh,0BBh,0EEh,0BBh,0EEh,0BBh ;   Hex #B2
    Db	018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B3
    Db	018h,018h,018h,0F8h,0F8h,018h,018h,018h ;   Hex #B4
    Db	018h,018h,0F8h,0F8h,018h,0F8h,018h,018h ;   Hex #B5
    Db	034h,034h,034h,0F4h,0F4h,034h,034h,034h ;   Hex #B6
    Db	000h,000h,000h,0F8h,0FCh,034h,034h,034h ;   Hex #B7
    Db	000h,000h,0F0h,0F8h,018h,0F8h,018h,018h ;   Hex #B8
    Db	034h,034h,0F4h,0F4h,004h,0F4h,034h,034h ;   Hex #B9
    Db	034h,034h,034h,034h,034h,034h,034h,034h ;   Hex #BA
    Db	000h,000h,0F8h,0FCh,004h,0F4h,034h,034h ;   Hex #BB
    Db	034h,034h,0F4h,0F4h,004h,0FCh,000h,000h ;   Hex #BC
    Db	034h,034h,034h,0FCh,0FCh,000h,000h,000h ;   Hex #BD
    Db	018h,018h,0F8h,0F8h,018h,0F8h,000h,000h ;   Hex #BE
    Db	000h,000h,000h,0F8h,0F8h,018h,018h,018h ;   Hex #BF
    Db	018h,018h,018h,01Fh,01Fh,000h,000h,000h ;   Hex #C0
    Db	018h,018h,018h,0FFh,0FFh,000h,000h,000h ;   Hex #C1
    Db	000h,000h,000h,0FFh,0FFh,018h,018h,018h ;   Hex #C2
    Db	018h,018h,018h,01Fh,01Fh,018h,018h,018h ;   Hex #C3
    Db	000h,000h,000h,0FFh,0FFh,000h,000h,000h ;   Hex #C4
    Db	018h,018h,018h,0FFh,0FFh,018h,018h,018h ;   Hex #C5
    Db	018h,018h,01Fh,01Fh,018h,01Fh,018h,018h ;   Hex #C6
    Db	034h,034h,034h,037h,037h,034h,034h,034h ;   Hex #C7
    Db	034h,034h,037h,037h,030h,01Fh,000h,000h ;   Hex #C8
    Db	000h,000h,03Fh,03Fh,030h,037h,034h,034h ;   Hex #C9
    Db	034h,034h,0F7h,0F7h,000h,0FFh,000h,000h ;   Hex #CA
    Db	000h,000h,0FFh,0FFh,000h,0F7h,034h,034h ;   Hex #CB
    Db	034h,034h,037h,037h,030h,037h,034h,034h ;   Hex #CC
    Db	000h,000h,0FFh,0FFh,000h,0FFh,000h,000h ;   Hex #CD
    Db	034h,034h,0F7h,0F7h,000h,0F7h,034h,034h ;   Hex #CE
    Db	018h,018h,0FFh,0FFh,000h,0FFh,000h,000h ;   Hex #CF
    Db	034h,034h,034h,0FFh,0FFh,000h,000h,000h ;   Hex #D0
    Db	000h,000h,0FFh,0FFh,000h,0FFh,018h,018h ;   Hex #D1
    Db	000h,000h,000h,0FFh,0FFh,034h,034h,034h ;   Hex #D2
    Db	034h,034h,034h,03Fh,01Fh,000h,000h,000h ;   Hex #D3
    Db	018h,018h,01Fh,01Fh,018h,00Fh,000h,000h ;   Hex #D4
    Db	000h,000h,01Fh,01Fh,018h,01Fh,018h,018h ;   Hex #D5
    Db	000h,000h,000h,03Fh,03Fh,034h,034h,034h ;   Hex #D6
    Db	034h,034h,034h,0FFh,0FFh,034h,034h,034h ;   Hex #D7
    Db	018h,018h,0FFh,0FFh,018h,0FFh,018h,018h ;   Hex #D8
    Db	018h,018h,018h,0F8h,0F8h,000h,000h,000h ;   Hex #D9
    Db	000h,000h,000h,01Fh,01Fh,018h,018h,018h ;   Hex #DA
    Db	0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DB
    Db	000h,000h,000h,000h,0FFh,0FFh,0FFh,0FFh ;   Hex #DC
    Db	0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h ;   Hex #DD
    Db	00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh ;   Hex #DE
    Db	0FFh,0FFh,0FFh,0FFh,000h,000h,000h,000h ;   Hex #DF
    Db	000h,000h,03Dh,06Eh,066h,06Eh,03Bh,000h ;   Hex #E0
    Db	03Ch,066h,06Ch,066h,063h,07Bh,06Eh,000h ;   Hex #E1
    Db	07Fh,033h,031h,030h,030h,030h,078h,000h ;   Hex #E2
    Db	000h,03Fh,07Eh,054h,014h,036h,066h,000h ;   Hex #E3
    Db	07Fh,033h,018h,00Ch,018h,033h,07Fh,000h ;   Hex #E4
    Db	000h,000h,03Fh,06Ch,06Ch,06Ch,038h,000h ;   Hex #E5
    Db	000h,000h,033h,033h,033h,037h,06Dh,060h ;   Hex #E6
    Db	000h,03Fh,07Eh,050h,018h,01Ch,00Ch,000h ;   Hex #E7
    Db	01Ch,008h,03Eh,06Bh,03Eh,008h,01Ch,000h ;   Hex #E8
    Db	01Ch,036h,063h,07Fh,063h,036h,01Ch,000h ;   Hex #E9
    Db	01Ch,036h,063h,063h,036h,055h,077h,000h ;   Hex #EA
    Db	01Ch,030h,018h,02Ch,066h,066h,03Ch,000h ;   Hex #EB
    Db	000h,036h,07Fh,04Dh,059h,07Fh,036h,000h ;   Hex #EC
    Db	001h,003h,03Eh,067h,06Bh,073h,03Eh,040h ;   Hex #ED
    Db	000h,000h,01Eh,030h,03Eh,030h,01Eh,000h ;   Hex #EE
    Db	03Ch,066h,066h,066h,066h,066h,066h,000h ;   Hex #EF
    Db	000h,07Eh,000h,07Eh,000h,07Eh,000h,000h ;   Hex #F0
    Db	018h,018h,07Eh,018h,018h,000h,07Eh,000h ;   Hex #F1
    Db	060h,038h,00Eh,038h,060h,000h,07Eh,000h ;   Hex #F2
    Db	006h,01Ch,070h,01Ch,006h,000h,07Eh,000h ;   Hex #F3
    Db	00Eh,01Bh,01Ah,018h,018h,018h,018h,018h ;   Hex #F4
    Db	018h,018h,018h,018h,058h,0D8h,070h,000h ;   Hex #F5
    Db	018h,018h,000h,07Eh,000h,018h,018h,000h ;   Hex #F6
    Db	000h,03Bh,06Eh,000h,03Bh,06Eh,000h,000h ;   Hex #F7
    Db	01Ch,036h,036h,01Ch,000h,000h,000h,000h ;   Hex #F8
    Db	000h,000h,018h,03Ch,018h,000h,000h,000h ;   Hex #F9
    Db	000h,000h,000h,018h,000h,000h,000h,000h ;   Hex #FA
    Db	003h,002h,006h,024h,06Ch,038h,018h,010h ;   Hex #FB
    Db	076h,03Bh,033h,033h,033h,000h,000h,000h ;   Hex #FC
    Db	03Ch,066h,00Ch,038h,07Eh,000h,000h,000h ;   Hex #FD
    Db	000h,000h,03Ch,03Ch,03Ch,03Ch,000h,000h ;   Hex #FE
    Db	000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FF
LEN_D865	EQU ($-D865)
					;
POST_EGA865	EQU	$		;
					;
include copyrigh.inc

CODE	ENDS
	END

=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\lcd\860-cpi.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
CODE    SEGMENT BYTE PUBLIC 'CODE'
        ASSUME CS:CODE,DS:CODE

IF1
;        %OUT    EGA.CPI creation file
;        %OUT    .
;        %OUT    CP SRC files:
;        %OUT    .
;        %OUT .          CODE PAGE:  860
ENDIF
                                        ;
EGA860: DW     LEN_860                  ;SIZE OF ENTRY HEADER
        DW     POST_EGA860,0            ;POINTER TO NEXT HEADER
        DW     1                        ;DEVICE TYPE
        DB     "LCD     "               ;DEVICE SUBTYPE ID
        DW     860                      ;CODE PAGE ID
        DW     3 DUP(0)                 ;RESERVED
        DW     OFFSET DATA860,0         ;POINTER TO FONTS
LEN_860 EQU    ($-EGA860)

DATA860:DW     1                        ;CART/NON-CART
        DW     1                        ;# OF FONTS
        DW     LEN_D860                 ;LENGTH OF DATA
D860:                                   ;
        DB     8,8                      ;CHARACTER BOX SIZE
        DB     0,0                      ;ASPECT RATIO (UNUSED)
        DW     256                      ;NUMBER OF CHARACTERS
    Db  000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #0
    Db  03Ch,042h,0A5h,0A5h,081h,0BDh,05Ah,03Ch ;   Hex #1
    Db  03Ch,07Eh,0DBh,0DBh,0FFh,0C3h,066h,03Ch ;   Hex #2
    Db  036h,07Fh,07Fh,07Fh,03Eh,01Ch,008h,000h ;   Hex #3
    Db  008h,01Ch,03Eh,07Fh,03Eh,01Ch,008h,000h ;   Hex #4
    Db  01Ch,03Eh,01Ch,07Fh,07Fh,036h,008h,01Ch ;   Hex #5
    Db  008h,01Ch,03Eh,07Fh,07Fh,036h,008h,01Ch ;   Hex #6
    Db  000h,000h,018h,03Ch,03Ch,018h,000h,000h ;   Hex #7
    Db  0FFh,0FFh,0E7h,0C3h,0C3h,0E7h,0FFh,0FFh ;   Hex #8
    Db  000h,000h,03Ch,066h,066h,03Ch,000h,000h ;   Hex #9
    Db  0FFh,0FFh,0C3h,099h,099h,0C3h,0FFh,0FFh ;   Hex #A
    Db  007h,003h,03Eh,066h,066h,066h,03Ch,000h ;   Hex #B
    Db  03Ch,066h,066h,066h,03Ch,018h,03Ch,018h ;   Hex #C
    Db  008h,00Ch,00Eh,00Ah,00Ah,008h,038h,030h ;   Hex #D
    Db  018h,016h,019h,017h,071h,061h,007h,006h ;   Hex #E
    Db  048h,06Bh,03Eh,0E4h,027h,07Ch,0D6h,012h ;   Hex #F
    Db  040h,070h,07Ch,07Fh,07Ch,070h,040h,000h ;   Hex #10
    Db  001h,007h,01Fh,07Fh,01Fh,007h,001h,000h ;   Hex #11
    Db  018h,03Ch,07Eh,018h,018h,07Eh,03Ch,018h ;   Hex #12
    Db  036h,036h,036h,036h,036h,000h,036h,000h ;   Hex #13
    Db  03Fh,06Ah,06Ah,03Ah,00Ah,00Ah,01Ah,000h ;   Hex #14
    Db  03Ch,076h,038h,06Ch,036h,01Ch,06Eh,03Ch ;   Hex #15
    Db  000h,000h,000h,07Fh,07Fh,07Fh,000h,000h ;   Hex #16
    Db  018h,03Ch,07Eh,018h,07Eh,03Ch,018h,0FFh ;   Hex #17
    Db  018h,03Ch,07Eh,05Ah,018h,018h,018h,000h ;   Hex #18
    Db  018h,018h,018h,05Ah,07Eh,03Ch,018h,000h ;   Hex #19
    Db  000h,00Ch,006h,07Fh,07Fh,006h,00Ch,000h ;   Hex #1A
    Db  000h,018h,030h,07Fh,07Fh,030h,018h,000h ;   Hex #1B
    Db  000h,000h,060h,060h,07Fh,07Fh,000h,000h ;   Hex #1C
    Db  000h,014h,036h,07Fh,07Fh,036h,014h,000h ;   Hex #1D
    Db  008h,008h,01Ch,01Ch,03Eh,03Eh,07Fh,000h ;   Hex #1E
    Db  07Fh,03Eh,03Eh,01Ch,01Ch,008h,008h,000h ;   Hex #1F
    Db  000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #20
    Db  018h,018h,018h,018h,018h,000h,018h,000h ;   Hex #21
    Db  036h,036h,014h,000h,000h,000h,000h,000h ;   Hex #22
    Db  00Ah,00Ah,03Fh,014h,07Eh,028h,028h,000h ;   Hex #23
    Db  008h,03Eh,068h,03Eh,00Bh,07Eh,008h,000h ;   Hex #24
    Db  001h,03Fh,052h,06Ch,01Bh,035h,076h,000h ;   Hex #25
    Db  01Ch,036h,01Ch,03Bh,06Eh,066h,03Bh,000h ;   Hex #26
    Db  018h,018h,030h,000h,000h,000h,000h,000h ;   Hex #27
    Db  006h,00Ch,018h,018h,018h,00Ch,006h,000h ;   Hex #28
    Db  030h,018h,00Ch,00Ch,00Ch,018h,030h,000h ;   Hex #29
    Db  000h,036h,01Ch,07Fh,01Ch,036h,000h,000h ;   Hex #2A
    Db  000h,018h,018h,07Eh,018h,018h,000h,000h ;   Hex #2B
    Db  000h,000h,000h,000h,000h,018h,018h,030h ;   Hex #2C
    Db  000h,000h,000h,07Eh,000h,000h,000h,000h ;   Hex #2D
    Db  000h,000h,000h,000h,000h,018h,018h,000h ;   Hex #2E
    Db  003h,006h,00Ch,018h,030h,060h,040h,000h ;   Hex #2F
    Db  018h,02Ch,066h,066h,066h,034h,018h,000h ;   Hex #30
    Db  018h,018h,038h,018h,018h,018h,03Ch,000h ;   Hex #31
    Db  03Ch,066h,066h,00Ch,018h,032h,07Eh,000h ;   Hex #32
    Db  03Ch,066h,00Ch,01Ch,006h,066h,03Ch,000h ;   Hex #33
    Db  00Ch,01Ch,02Ch,06Ch,07Eh,00Ch,01Eh,000h ;   Hex #34
    Db  07Eh,060h,07Ch,066h,006h,066h,03Ch,000h ;   Hex #35
    Db  01Ch,030h,060h,07Ch,066h,066h,03Ch,000h ;   Hex #36
    Db  07Eh,066h,04Ch,00Ch,018h,018h,038h,000h ;   Hex #37
    Db  03Ch,066h,076h,03Ch,06Eh,066h,03Ch,000h ;   Hex #38
    Db  03Ch,066h,066h,03Eh,006h,00Ch,038h,000h ;   Hex #39
    Db  000h,018h,018h,000h,000h,018h,018h,000h ;   Hex #3A
    Db  000h,018h,018h,000h,000h,018h,018h,030h ;   Hex #3B
    Db  006h,00Ch,018h,030h,018h,00Ch,006h,000h ;   Hex #3C
    Db  000h,000h,07Eh,000h,07Eh,000h,000h,000h ;   Hex #3D
    Db  030h,018h,00Ch,006h,00Ch,018h,030h,000h ;   Hex #3E
    Db  03Ch,066h,026h,00Ch,018h,000h,018h,000h ;   Hex #3F
    Db  03Eh,041h,05Dh,055h,05Fh,040h,03Eh,000h ;   Hex #40
    Db  01Ch,00Ch,01Ch,016h,03Eh,023h,063h,000h ;   Hex #41
    Db  07Ch,036h,036h,03Eh,033h,033h,07Eh,000h ;   Hex #42
    Db  01Dh,033h,061h,060h,060h,031h,01Eh,000h ;   Hex #43
    Db  07Ch,036h,033h,033h,033h,036h,07Ch,000h ;   Hex #44
    Db  07Fh,031h,034h,03Ch,034h,031h,07Fh,000h ;   Hex #45
    Db  07Fh,031h,034h,03Ch,034h,030h,078h,000h ;   Hex #46
    Db  01Dh,033h,061h,060h,067h,033h,01Fh,000h ;   Hex #47
    Db  066h,066h,066h,07Eh,066h,066h,066h,000h ;   Hex #48
    Db  03Ch,018h,018h,018h,018h,018h,03Ch,000h ;   Hex #49
    Db  01Fh,006h,006h,006h,066h,066h,03Ch,000h ;   Hex #4A
    Db  067h,066h,06Ch,078h,06Ch,066h,067h,000h ;   Hex #4B
    Db  078h,030h,030h,030h,031h,033h,07Fh,000h ;   Hex #4C
    Db  041h,063h,077h,07Fh,06Bh,063h,063h,000h ;   Hex #4D
    Db  043h,063h,073h,07Bh,06Fh,067h,063h,000h ;   Hex #4E
    Db  01Ch,036h,063h,063h,063h,036h,01Ch,000h ;   Hex #4F
    Db  07Eh,033h,033h,03Eh,030h,030h,078h,000h ;   Hex #50
    Db  01Ch,036h,063h,063h,06Bh,036h,01Ch,007h ;   Hex #51
    Db  07Ch,066h,066h,07Ch,06Ch,066h,067h,000h ;   Hex #52
    Db  03Eh,066h,070h,03Ch,00Eh,066h,07Ch,000h ;   Hex #53
    Db  07Eh,05Ah,018h,018h,018h,018h,03Ch,000h ;   Hex #54
    Db  063h,063h,063h,063h,063h,063h,03Eh,000h ;   Hex #55
    Db  077h,062h,036h,034h,01Ch,018h,008h,000h ;   Hex #56
    Db  063h,063h,06Bh,06Bh,03Eh,036h,022h,000h ;   Hex #57
    Db  066h,066h,03Ch,018h,03Ch,066h,066h,000h ;   Hex #58
    Db  0E7h,066h,034h,018h,018h,018h,03Ch,000h ;   Hex #59
    Db  07Eh,066h,04Ch,018h,032h,066h,07Eh,000h ;   Hex #5A
    Db  01Eh,018h,018h,018h,018h,018h,01Eh,000h ;   Hex #5B
    Db  060h,030h,018h,00Ch,006h,003h,001h,000h ;   Hex #5C
    Db  03Ch,00Ch,00Ch,00Ch,00Ch,00Ch,03Ch,000h ;   Hex #5D
    Db  008h,01Ch,036h,000h,000h,000h,000h,000h ;   Hex #5E
    Db  000h,000h,000h,000h,000h,000h,000h,0FFh ;   Hex #5F
    Db  030h,018h,00Ch,000h,000h,000h,000h,000h ;   Hex #60
    Db  000h,000h,03Ch,066h,01Eh,066h,07Bh,000h ;   Hex #61
    Db  070h,030h,03Eh,03Bh,033h,03Bh,06Eh,000h ;   Hex #62
    Db  000h,000h,03Eh,066h,060h,066h,03Ch,000h ;   Hex #63
    Db  00Eh,006h,036h,06Eh,066h,066h,03Bh,000h ;   Hex #64
    Db  000h,000h,03Ch,066h,07Eh,060h,03Eh,000h ;   Hex #65
    Db  00Eh,01Bh,018h,03Eh,018h,018h,03Ch,000h ;   Hex #66
    Db  000h,000h,03Dh,066h,038h,03Eh,063h,03Eh ;   Hex #67
    Db  070h,030h,036h,03Bh,033h,033h,073h,000h ;   Hex #68
    Db  018h,000h,038h,018h,018h,018h,03Ch,000h ;   Hex #69
    Db  00Ch,000h,01Ch,00Ch,00Ch,06Ch,06Ch,038h ;   Hex #6A
    Db  070h,030h,033h,036h,03Ch,036h,077h,000h ;   Hex #6B
    Db  038h,018h,018h,018h,018h,018h,03Ch,000h ;   Hex #6C
    Db  000h,000h,076h,07Fh,06Bh,06Bh,06Bh,000h ;   Hex #6D
    Db  000h,000h,076h,03Bh,033h,033h,073h,000h ;   Hex #6E
    Db  000h,000h,03Ch,066h,066h,066h,03Ch,000h ;   Hex #6F
    Db  000h,000h,06Eh,033h,033h,03Eh,030h,078h ;   Hex #70
    Db  000h,000h,03Ah,066h,066h,03Eh,006h,00Fh ;   Hex #71
    Db  000h,000h,06Eh,03Bh,033h,030h,078h,000h ;   Hex #72
    Db  000h,000h,03Eh,070h,03Ch,00Eh,07Ch,000h ;   Hex #73
    Db  008h,018h,03Eh,018h,018h,01Ah,00Ch,000h ;   Hex #74
    Db  000h,000h,066h,066h,066h,066h,03Bh,000h ;   Hex #75
    Db  000h,000h,073h,032h,036h,01Ch,008h,000h ;   Hex #76
    Db  000h,000h,06Bh,06Bh,07Fh,036h,022h,000h ;   Hex #77
    Db  000h,000h,073h,036h,01Ch,036h,067h,000h ;   Hex #78
    Db  000h,000h,077h,033h,01Ah,00Ch,06Ch,038h ;   Hex #79
    Db  000h,000h,07Eh,04Ch,018h,032h,07Eh,000h ;   Hex #7A
    Db  00Eh,018h,018h,070h,018h,018h,00Eh,000h ;   Hex #7B
    Db  018h,018h,018h,018h,018h,018h,018h,000h ;   Hex #7C
    Db  070h,018h,018h,00Eh,018h,018h,070h,000h ;   Hex #7D
    Db  039h,04Eh,000h,000h,000h,000h,000h,000h ;   Hex #7E
    Db  008h,01Ch,01Ch,036h,026h,063h,07Fh,07Fh ;   Hex #7F
    Db  01Dh,033h,061h,060h,060h,031h,00Eh,01Ch ;   Hex #80
    Db  06Ch,000h,066h,066h,066h,066h,03Bh,000h ;   Hex #81
    Db  00Ch,018h,03Ch,066h,07Eh,060h,03Eh,000h ;   Hex #82
    Db  018h,03Ch,03Ch,066h,01Eh,066h,07Bh,000h ;   Hex #83
    Db  039h,04Eh,03Ch,066h,01Eh,066h,07Bh,000h ;   Hex #84
    Db  030h,018h,03Ch,066h,01Eh,066h,07Bh,000h ;   Hex #85
    Db  00Ch,018h,01Ch,016h,036h,03Fh,063h,000h ;   Hex #86
    Db  000h,000h,03Eh,066h,060h,036h,01Ch,038h ;   Hex #87
    Db  018h,03Ch,03Ch,066h,07Eh,060h,03Eh,000h ;   Hex #88
    Db  01Ch,036h,07Fh,031h,03Ch,031h,07Fh,000h ;   Hex #89
    Db  030h,018h,03Ch,066h,07Eh,060h,03Eh,000h ;   Hex #8A
    Db  00Ch,018h,03Ch,018h,018h,018h,03Ch,000h ;   Hex #8B
    Db  01Ch,036h,03Eh,063h,063h,036h,01Ch,000h ;   Hex #8C
    Db  030h,018h,000h,038h,018h,018h,03Ch,000h ;   Hex #8D
    Db  03Bh,06Eh,01Ch,016h,036h,03Fh,063h,000h ;   Hex #8E
    Db  01Ch,036h,008h,01Eh,036h,03Fh,063h,000h ;   Hex #8F
    Db  006h,00Ch,07Fh,031h,03Ch,031h,07Fh,000h ;   Hex #90
    Db  01Ch,006h,01Ch,016h,036h,03Fh,063h,000h ;   Hex #91
    Db  018h,00Ch,07Fh,031h,03Ch,031h,07Fh,000h ;   Hex #92
    Db  018h,03Ch,03Ch,066h,066h,066h,03Ch,000h ;   Hex #93
    Db  03Ah,06Eh,03Ch,066h,066h,066h,03Ch,000h ;   Hex #94
    Db  030h,018h,03Ch,066h,066h,066h,03Ch,000h ;   Hex #95
    Db  00Ch,05Bh,063h,063h,063h,063h,03Eh,000h ;   Hex #96
    Db  030h,018h,066h,066h,066h,066h,03Bh,000h ;   Hex #97
    Db  030h,018h,03Ch,018h,018h,018h,03Ch,000h ;   Hex #98
    Db  03Bh,06Eh,036h,063h,063h,036h,01Ch,000h ;   Hex #99
    Db  036h,041h,063h,063h,063h,063h,03Eh,000h ;   Hex #9A
    Db  006h,004h,03Ch,06Eh,068h,06Ah,03Ch,030h ;   Hex #9B
    Db  01Eh,033h,033h,07Ch,039h,05Bh,076h,000h ;   Hex #9C
    Db  018h,06Dh,063h,063h,063h,063h,03Eh,000h ;   Hex #9D
    Db  078h,06Ch,06Ch,07Ah,066h,06Fh,066h,003h ;   Hex #9E
    Db  006h,00Ch,036h,063h,063h,036h,01Ch,000h ;   Hex #9F
    Db  00Ch,018h,03Ch,066h,01Eh,066h,07Bh,000h ;   Hex #A0
    Db  018h,030h,000h,038h,018h,018h,03Ch,000h ;   Hex #A1
    Db  00Ch,018h,03Ch,066h,066h,066h,03Ch,000h ;   Hex #A2
    Db  00Ch,018h,066h,066h,066h,066h,03Bh,000h ;   Hex #A3
    Db  01Ah,02Ch,076h,03Bh,033h,033h,073h,000h ;   Hex #A4
    Db  01Ah,02Ch,073h,07Bh,06Fh,067h,063h,000h ;   Hex #A5
    Db  01Eh,036h,036h,01Fh,000h,03Fh,000h,000h ;   Hex #A6
    Db  01Ch,036h,036h,01Ch,000h,03Eh,000h,000h ;   Hex #A7
    Db  018h,000h,018h,030h,064h,066h,03Ch,000h ;   Hex #A8
    Db  018h,00Ch,036h,063h,063h,036h,01Ch,000h ;   Hex #A9
    Db  000h,000h,000h,07Eh,006h,006h,000h,000h ;   Hex #AA
    Db  060h,066h,06Ch,07Eh,03Bh,066h,04Ch,00Fh ;   Hex #AB
    Db  060h,066h,06Ch,07Bh,037h,06Bh,04Fh,003h ;   Hex #AC
    Db  018h,000h,018h,018h,018h,018h,018h,000h ;   Hex #AD
    Db  000h,01Bh,036h,06Ch,06Ch,036h,01Bh,000h ;   Hex #AE
    Db  000h,06Ch,036h,01Bh,01Bh,036h,06Ch,000h ;   Hex #AF
    Db  011h,044h,011h,044h,011h,044h,011h,044h ;   Hex #B0
    Db  055h,0AAh,055h,0AAh,055h,0AAh,055h,0AAh ;   Hex #B1
    Db  0EEh,0BBh,0EEh,0BBh,0EEh,0BBh,0EEh,0BBh ;   Hex #B2
    Db  018h,018h,018h,018h,018h,018h,018h,018h ;   Hex #B3
    Db  018h,018h,018h,0F8h,0F8h,018h,018h,018h ;   Hex #B4
    Db  018h,018h,0F8h,0F8h,018h,0F8h,018h,018h ;   Hex #B5
    Db  034h,034h,034h,0F4h,0F4h,034h,034h,034h ;   Hex #B6
    Db  000h,000h,000h,0F8h,0FCh,034h,034h,034h ;   Hex #B7
    Db  000h,000h,0F0h,0F8h,018h,0F8h,018h,018h ;   Hex #B8
    Db  034h,034h,0F4h,0F4h,004h,0F4h,034h,034h ;   Hex #B9
    Db  034h,034h,034h,034h,034h,034h,034h,034h ;   Hex #BA
    Db  000h,000h,0F8h,0FCh,004h,0F4h,034h,034h ;   Hex #BB
    Db  034h,034h,0F4h,0F4h,004h,0FCh,000h,000h ;   Hex #BC
    Db  034h,034h,034h,0FCh,0FCh,000h,000h,000h ;   Hex #BD
    Db  018h,018h,0F8h,0F8h,018h,0F8h,000h,000h ;   Hex #BE
    Db  000h,000h,000h,0F8h,0F8h,018h,018h,018h ;   Hex #BF
    Db  018h,018h,018h,01Fh,01Fh,000h,000h,000h ;   Hex #C0
    Db  018h,018h,018h,0FFh,0FFh,000h,000h,000h ;   Hex #C1
    Db  000h,000h,000h,0FFh,0FFh,018h,018h,018h ;   Hex #C2
    Db  018h,018h,018h,01Fh,01Fh,018h,018h,018h ;   Hex #C3
    Db  000h,000h,000h,0FFh,0FFh,000h,000h,000h ;   Hex #C4
    Db  018h,018h,018h,0FFh,0FFh,018h,018h,018h ;   Hex #C5
    Db  018h,018h,01Fh,01Fh,018h,01Fh,018h,018h ;   Hex #C6
    Db  034h,034h,034h,037h,037h,034h,034h,034h ;   Hex #C7
    Db  034h,034h,037h,037h,030h,01Fh,000h,000h ;   Hex #C8
    Db  000h,000h,03Fh,03Fh,030h,037h,034h,034h ;   Hex #C9
    Db  034h,034h,0F7h,0F7h,000h,0FFh,000h,000h ;   Hex #CA
    Db  000h,000h,0FFh,0FFh,000h,0F7h,034h,034h ;   Hex #CB
    Db  034h,034h,037h,037h,030h,037h,034h,034h ;   Hex #CC
    Db  000h,000h,0FFh,0FFh,000h,0FFh,000h,000h ;   Hex #CD
    Db  034h,034h,0F7h,0F7h,000h,0F7h,034h,034h ;   Hex #CE
    Db  018h,018h,0FFh,0FFh,000h,0FFh,000h,000h ;   Hex #CF
    Db  034h,034h,034h,0FFh,0FFh,000h,000h,000h ;   Hex #D0
    Db  000h,000h,0FFh,0FFh,000h,0FFh,018h,018h ;   Hex #D1
    Db  000h,000h,000h,0FFh,0FFh,034h,034h,034h ;   Hex #D2
    Db  034h,034h,034h,03Fh,01Fh,000h,000h,000h ;   Hex #D3
    Db  018h,018h,01Fh,01Fh,018h,00Fh,000h,000h ;   Hex #D4
    Db  000h,000h,01Fh,01Fh,018h,01Fh,018h,018h ;   Hex #D5
    Db  000h,000h,000h,03Fh,03Fh,034h,034h,034h ;   Hex #D6
    Db  034h,034h,034h,0FFh,0FFh,034h,034h,034h ;   Hex #D7
    Db  018h,018h,0FFh,0FFh,018h,0FFh,018h,018h ;   Hex #D8
    Db  018h,018h,018h,0F8h,0F8h,000h,000h,000h ;   Hex #D9
    Db  000h,000h,000h,01Fh,01Fh,018h,018h,018h ;   Hex #DA
    Db  0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ;   Hex #DB
    Db  000h,000h,000h,000h,0FFh,0FFh,0FFh,0FFh ;   Hex #DC
    Db  0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h,0F0h ;   Hex #DD
    Db  00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh,00Fh ;   Hex #DE
    Db  0FFh,0FFh,0FFh,0FFh,000h,000h,000h,000h ;   Hex #DF
    Db  000h,000h,03Dh,06Eh,066h,06Eh,03Bh,000h ;   Hex #E0
    Db  03Ch,066h,06Ch,066h,063h,07Bh,06Eh,000h ;   Hex #E1
    Db  07Fh,033h,031h,030h,030h,030h,078h,000h ;   Hex #E2
    Db  000h,03Fh,07Eh,054h,014h,036h,066h,000h ;   Hex #E3
    Db  07Fh,033h,018h,00Ch,018h,033h,07Fh,000h ;   Hex #E4
    Db  000h,000h,03Fh,06Ch,06Ch,06Ch,038h,000h ;   Hex #E5
    Db  000h,000h,033h,033h,033h,037h,06Dh,060h ;   Hex #E6
    Db  000h,03Fh,07Eh,050h,018h,01Ch,00Ch,000h ;   Hex #E7
    Db  01Ch,008h,03Eh,06Bh,03Eh,008h,01Ch,000h ;   Hex #E8
    Db  01Ch,036h,063h,07Fh,063h,036h,01Ch,000h ;   Hex #E9
    Db  01Ch,036h,063h,063h,036h,055h,077h,000h ;   Hex #EA
    Db  01Ch,030h,018h,02Ch,066h,066h,03Ch,000h ;   Hex #EB
    Db  000h,036h,07Fh,04Dh,059h,07Fh,036h,000h ;   Hex #EC
    Db  000h,000h,036h,06Fh,06Bh,03Eh,008h,00Ch ;   Hex #ED
    Db  000h,000h,01Eh,030h,03Eh,030h,01Eh,000h ;   Hex #EE
    Db  03Ch,066h,066h,066h,066h,066h,066h,000h ;   Hex #EF
    Db  000h,07Eh,000h,07Eh,000h,07Eh,000h,000h ;   Hex #F0
    Db  018h,018h,07Eh,018h,018h,000h,07Eh,000h ;   Hex #F1
    Db  060h,038h,00Eh,038h,060h,000h,07Eh,000h ;   Hex #F2
    Db  006h,01Ch,070h,01Ch,006h,000h,07Eh,000h ;   Hex #F3
    Db  00Eh,01Bh,01Ah,018h,018h,018h,018h,018h ;   Hex #F4
    Db  018h,018h,018h,018h,058h,0D8h,070h,000h ;   Hex #F5
    Db  018h,018h,000h,07Eh,000h,018h,018h,000h ;   Hex #F6
    Db  000h,03Bh,06Eh,000h,03Bh,06Eh,000h,000h ;   Hex #F7
    Db  01Ch,036h,036h,01Ch,000h,000h,000h,000h ;   Hex #F8
    Db  000h,000h,018h,03Ch,018h,000h,000h,000h ;   Hex #F9
    Db  000h,000h,000h,018h,000h,000h,000h,000h ;   Hex #FA
    Db  003h,002h,006h,024h,06Ch,038h,018h,010h ;   Hex #FB
    Db  076h,03Bh,033h,033h,033h,000h,000h,000h ;   Hex #FC
    Db  03Ch,066h,00Ch,038h,07Eh,000h,000h,000h ;   Hex #FD
    Db  000h,000h,03Ch,03Ch,03Ch,03Ch,000h,000h ;   Hex #FE
    Db  000h,000h,000h,000h,000h,000h,000h,000h ;   Hex #FF
LEN_D860        EQU ($-D860)
                                        ;
POST_EGA860     EQU     $               ;
                                        ;
CODE    ENDS
        END


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\lcd\copyrigh.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
CODE	SEGMENT BYTE PUBLIC 'CODE'
	ASSUME CS:CODE,DS:CODE

	DB	13,10
	DB	"Microsoft MS-DOS (R)  LCD Display Font File",13,10
include copyrigh.inc
	DB	1Ah

CODE	ENDS
	END

=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\display\lcd\font-r3.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
CODE	SEGMENT BYTE PUBLIC 'CODE'
	ASSUME CS:CODE,DS:CODE

BEGIN:	ORG    0

FNTHEAD:DB     0FFH,"FONT   "           ;FILE TAG
	DB     8 DUP(0) 		;RESERVED
	DW     1			;CNT OF POINTERS IN HEADER
	DB     1			;TYPE FOR INFO POINTER
	DW     OFFSET INFO,0		;POINTER TO INFO IN FILE
INFO:	DW     5			;COUNT OF ENTRIES

CODE	ENDS
	END

=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\ega\ega.asm ===
page	56,132
	name	EGASYS
	title	EGA Screen Device Driver
	subttl	Header

IFDEF	OS2
	.286				; Oh goody, can use 80286 instructions
ELSE	; NOT OS2
	.8086				; Have to support everything
ENDIF	; NOT OS2

;
; I N C L U D E S
;

	include	ega.inc

;
; C O D E
;

IFDEF	OS2				; Start of OS/2 functions

;
; DoSave - Save state of EGA
;
; ENTRY
;	ds = cs
;
; EXIT
;	ax = 0, operation complete
;
; DESTROYS
;	bx, si
;

	assume	cs:CODE, ds:CODE, es:nothing, ss:nothing

DoSave		proc	near

	mov	ax,cs
	mov	es,ax
	assume	es:CODE
	mov	ax,0F901h		; Select new context subfunction
	jmp	short DoCommon

DoSave		endp

;
; DoRestore - Restore state of EGA
;
; ENTRY
;	ds = cs
;
; EXIT
;	ax = 0, operation complete
;
; DESTROYS
;	bx, si, ds
;

	assume	cs:CODE, ds:CODE, es:nothing, ss:nothing

DoRestore	proc	near

	mov	ax,cs
	mov	es,ax
	assume	es:CODE
	mov	ax,0F902h		; Select new context subfunction

DoCommon:
	mov	bx,offset ContextCopy
	int	10h			; Restore from ContextCopy

if2	; Pass 2 of the assembler
.errnz		($ - StatusComplete)	; Drop into StatusComplete
endif	; Pass 2 of the assembler

DoRestore	endp

ENDIF	; OS2

;
; StatusComplete - Set completion status
;
; ENTRY
;	none
;
; EXIT
;	ax = 0, request completed
;
; DESTROYS
;	None
;

	assume	cs:CODE, ds:nothing, es:nothing, ss:nothing

StatusComplete	proc	near

	sub	ax,ax			; AX = 0, complete
	ret

StatusComplete	endp

ENDIF	; SYS

	subttl	Miscellaneous Code
	page

;
; UpdateCRTCMap - get the latest values for certain readable CRTC regs
;
;	Called by all routines that return register values to the user,
;	this function updates the current CRTC shadow map with the latest
;	values of the readable CRTC StartAddress (00Ch, 00Dh) and
;	CursorPosition (00Eh, 00Fh).
;
;	Of the numerous EGA regs that are write only, the CRTC contains a
;	handful of readable regs.  Normally, for readable regs like Input
;	Status 1, EGA.SYS requires the user keep track of its value.  But if
;	the goal is for the user of EGA.SYS to be able to rely 100% on the
;	shadow maps, we must properly update readables that we do return.
;	Note that the CRTC lightpen regs do not fall into this category,
;	since we shadow writes to that index, which is really the vertical
;	sync start/stop regs.
;
; ENTRY
;	none
; EXIT
;	none
; DESTROYS
;	AX, SI (if VGA)
;

	assume	cs:CODE, ds:CODE, es:nothing, ss:nothing

UpdateCRTCMap	proc	near

	push	dx			; Save environment
	mov	dx,[PortTable][0].prPortAddr
	mov	ax,0C0Dh
	pushf				; Save interrupt flag state
	CLI				; Disable interrupts
	out	dx,al			; Address CRTCStart high
	IOdelay
	inc	dx
	in	al,dx			; Get CRTCStart high
	IOdelay
	dec	dx
	xchg	al,ah
	out	dx,al			; Address CRTCStart low
	IOdelay
	inc	dx
	in	al,dx			; Get CRTCStart low
	IOdelay
	mov	word ptr [CRTCRegs][00Ch],ax ; Stash low:high
	dec	dx
	mov	ax,00E0Fh
	out	dx,al			; Address CRTCCursor pos high
	IOdelay
	inc	dx
	in	al,dx			; Get CRTCCursor pos high
	IOdelay
	dec	dx
	xchg	al,ah
	out	dx,al			; Address CRTCCursor pos low
	IOdelay
	inc	dx
	in	al,dx			; Get CRTCCursor pos low
	popf				; Restore interrupt flag state
	mov	word ptr [CRTCRegs][00Eh],ax ; Stash low:high
	cmp	[fVga],false		; On VGA card?
	je	UpdateCRTCMapDone	; No - skip
	xor	si,si			; Don't change default save maps
	push	bx			; Save environment
	push	cx			; Save environment
	call	ReadVGARegs
	mov	[fPalette],cl		; fPalette = FALSE
	pop	cx			; Restore environment
	pop	bx			; Restore environment

UpdateCRTCMapDone:
	pop	dx			; Restore environment
	ret

UpdateCRTCMap	endp

	assume	cs:CODE, ds:CODE, es:nothing, ss:nothing

ReadVGARegs	proc	near

;
; Save Miscellaneous Output Register
;

	MOV	DX,MiscOutputRegR	; Get Miscellaneous Output Register
	IN	AL,DX			; Get current state of the register
	IOdelay
	MOV	[MiscOutReg],AL		; value
	or	si,si			; Change default save map?
	jz	@F			; No - skip
	MOV	[DefMiscOutReg],AL	; Save initial

;
; Save Feature Control Register
;

@@:
	MOV	DL,FeatureCtrlReg AND 0FFH ; Get Feature Control Register
	IN	AL,DX			; Get current state of the register
	MOV	[FeatureReg],AL		; value
	or	si,si			; Change default save map?
	jz	@F			; No - skip
	MOV	[DefFeatureReg],AL	; Save initial

;
; Save Sequencer Registers
;

@@:
	MOV	CX,NumSeqRegs		; Initialize 5H registers
	MOV	DL,(EGA_BASE + SEQ_ADDR) AND 0FFH ; Get Sequencer Register
	XOR	BX,BX			; Code to select reset reg
	pushf				; Save interrupt flag state

SaveSequencerRegs:
	MOV	AL,BL			; Get index
	CLI				; Disable interrupts
	OUT	DX,AL			; Send index to the Address Register
	IOdelay
	INC	DX			; Choose read only register
	IN	AL,DX			; Get current state of the register
	STI				; Enable interrupts
	DEC	DX			; Choose index register
	MOV	[SeqRegs][BX],AL	; value
	or	si,si			; Change default save map?
	jz	@F			; No - skip
	MOV	[DefSeqRegs][BX],AL	; Save initial

@@:
	INC	BX			; Move to the next index register
	LOOP	SaveSequencerRegs	; Loop back and initialize another reg

;
; Save Graphics Controller Registers
;

	MOV	BX,CX			; Code to select enable set/reset reg
	MOV	CL,NumGraphicsRegs	; Initialize 9H registers
	MOV	DL,(EGA_BASE + GRAF_CONT) AND 0FFH
					; Get Graphics Control Addr Reg

SaveGraphicsContRegs:
	MOV	AL,BL			; Get index
	CLI				; Disable interrupts
	OUT	DX,AL			; Send index to the Address Register
	IOdelay
	INC	DX			; Choose read only register
	IN	AL,DX			; Get current state of the register
	STI				; Enable interrupts
	DEC	DX			; Choose index register
	MOV	[GraphicsRegs][BX],AL	; value
	or	si,si			; Change default save map?
	jz	@F			; No - skip
	MOV	[DefGraphicsRegs][BX],AL ; Save initial

@@:
	INC	BX			; Move to the next index register
	LOOP	SaveGraphicsContRegs	; Loop back and initialize another reg

;
; Save Attribute Controller Registers
;

	MOV	BX,CX			; Code to select Palette
					; Register and keep video disabled
	MOV	CL,NumAttrRegs		; Initialize 15H registers

SaveAttributeContRegs:
	MOV	DL,BYTE PTR [PortTable][5 * SIZE PortRec].PRPortAddr
	CLI				; Disable interrupts
	IN	AL,DX			; Initialize flip-flop to select address
	MOV	AL,BL			; Get index
	CMP	AL,10H			; Past palette registers?
	JB	PaletteCheckDone	; No - skip
	OR	AL,PaletteAddressSource	; Code to enable video
	jmp	short GetAttrReg

;
;	We are stuck.  In order to correctly read the Palette registers
;	on a VGA, the Palette address source bit (bit 5 of the Attribute
;	Address Register) needs to be 0, but making this 0 will disable
;	video.  Then after reading the Palette registers, we need to
;	re-enable video.  But this happens so often that the screen
;	flashes.  So, we can only read these registers at init time.
;	Only loss of functionality is if the palette registers get
;	out of sync with the shadow maps after init time.
;

PaletteCheckDone:
	cmp	[fPalette],ch		; Did user request the palette regs?
	jne	GetAttrReg		; Yes - skip
	or	si,si			; Init?
	jz	NextAttrReg		; No - skip

GetAttrReg:
	MOV	DL,AttCtrlAddrReg AND 0FFH ; Get Attribute Control Address Reg
	OUT	DX,AL			; Send index to the Address Register
	IOdelay
	INC	DX			; Choose read only register
	IN	AL,DX			; Get current state of the register
	MOV	[AttrRegs][BX],AL	; value
	or	si,si			; Change default save map?
	jz	NextAttrReg		; No - skip
	MOV	[DefAttrRegs][BX],AL	; Save initial

NextAttrReg:
	STI				; Enable interrupts
	INC	BX			; Move to the next index register
	LOOP	SaveAttributeContRegs	; Loop back and initialize another reg

;
; Save CRT Controller Registers
;

	MOV	BX,CX			; Code to select horizontal total reg
	MOV	CL,NumCRTCRegs		; Initialize 19H registers
	MOV	DL,BYTE PTR [PortTable][5 * SIZE PortRec].PRPortAddr
	CLI				; Disable interrupts
	IN	AL,DX			; So that we get back to index again
	IOdelay
	SUB	DL,6			; Get CRT Controller Address Reg

SaveCRTContRegs:
	CLI				; Disable interrupts
	MOV	AL,BL			; Get index
	OUT	DX,AL			; Send index to the Address Register
	IOdelay
	INC	DX			; Choose read only register
	IN	AL,DX			; Get current state of the register
	STI				; Enable interrupts
	DEC	DX			; Choose index register
	MOV	[CRTCRegs][BX],AL	; value
	or	si,si			; Change default save map?
	jz	@F			; No - skip
	MOV	[DefCRTCRegs][BX],AL	; Save initial

@@:
	INC	BX			; Move to the next index register
	LOOP	SaveCRTContRegs		; Loop back and initialize another reg
	popf				; Restore interrupt flag state
	ret

ReadVGARegs	endp

	page

;
; BrstDet - determine number of scan lines for raster
;
;	BrstDet, similar to the IBM function by the same name, determines
;	whether the current raster should be 200 or 350 scanlines based on
;	the switch settings on the rear of the EGA card.  In a nutshell,
;	switch settings 0011 or 1001 indicate 350 lines, otherwise 200 lines.
;
; EXIT
;	cy	=  200 scanlines
;	nc	=  350 scanlines
; DESTROYS
;	None
;

	assume	cs:CODE, ds:nothing, es:nothing, ss:nothing

BrstDet 	proc	near

	push	ax
	mov	al,[biosinfo3]		; Get feature and switch info
	and	al,00001111b		; Mask for switches
	cmp	al,00001001b		; Most common config
	je	@F
	cmp	al,00000011b		; Less common
	je	@F
	stc				; Else set carry

@@:
	pop	ax
	ret

BrstDet 	endp

	page

;
; MakeBase - find proper video params for given mode
;
;	MakeBase, similar to the IBM function by the same name, will return
;	a pointer to the correct table of video parameters to use when
;	initializing the EGA for a given mode.	The root of the list of tables
;	is derived from the ParmPtr in the SavePtr table.
;
; ENTRY
;	ah	=  video mode
;	ds	=  0
; EXIT
;	es:si	-> base of correct parameter table
; DESTROYS
;	ax, flags
;

	assume	cs:CODE, ds:INTVEC, es:nothing, ss:nothing

MakeBase	proc	near

	les	si,[lpSavePtr]		; Load up SavePtr
	assume	es:nothing
	les	si,es:[si]		; Load up ParmPtr
	assume	es:nothing
	test	[Info],01100000b	; If 64K video memory,
	jz	mb64K			;  skip special graphics tests
	add	si,440h			; Bump to alt 640x350x1
	cmp	ah,0Fh 			; If this is what we want,
	je	mbX			;  we are done
	add	si,40h			; Bump to alt 640x350x4
	cmp	ah,10h 			; If this is what we want,
	je	mbX			;  we are done

;
; I assume that the special VGA modes 11h, 12h, and 13h are
;	contiguous and lie after the last EGA table in memory, but
;	I don't know this for sure.
;

	add	si,140h			; Bump for VGA modes 11h, 12h, 13h
	cmp	ah,11h			; Is it a VGA mode 11h?
	je	mbx			; Yes - skip
	add	si,40h			; Bump for VGA mode 12h
	cmp	ah,12h			; Is it a VGA mode 12h?
	je	mbx			; Yes - skip
	add	si,40h			; Bump for VGA mode 13h
	cmp	ah,13h			; Is it a VGA mode 13h?
	je	mbx			; Yes - skip
	sub	si,640h			; Nope, not special graphics

mb64K:
	cmp	ah,3h 			; If not alpha,
	ja	@F			;  skip special alpha tests
	call	BrstDet 		; If not enhanced config,
	jc	@F			;  no adjustment needed
	add	si,4C0h			; Bump to enhanced alpha parms

@@:
	xor	al,al			; Now use mode as final index

ifdef	OS2
	shr	ax,2
else	; NOT OS2
	shr	ax,1			; Funky math does the job
	shr	ax,1
endif	; NOT OS2

	add	si,ax

mbX:
	ret				; ES:SI -> correct table

MakeBase	endp

;-----------------------------------------------------------------------
; HandleIODelay -- Delay for doing close together I/O for hardware
;			to catch it's breath
;
; Entry: None
;
; Exit:  None
;
; Alters: None
;
; Note:	This was implemented because processors (e.g. 80486) keep
;		getting faster and smarter (prefetch and caching)
;		and ruin our old jmp $+2 scheme, so this is a better
;		(i.e. more processor independent) method.
;
;-----------------------------------------------------------------------

	assume	cs:CODE, ds:nothing, es:nothing, ss:nothing

HandleIODelay	proc	near

	push	ax			; Save environment
	in	al,43h			; Delay by reading status register
	in	al,43h			; Delay by reading status register
	pop	ax			; Restore environment
	ret

HandleIODelay	endp

	page

;
; ChangeRegs - reinitialize all shadow maps and EGA state info
;
; ENTRY
;	ah	=  video mode
;	al	=  low byte of CRTC io address
;			Used in EGAChooseMonoColorDisplay macro
; EXIT
;	ds	=  cs
; DESTROYS
;	ax, si
;

	assume	cs:CODE, ds:INTVEC, es:nothing, ss:nothing

ChangeRegs	proc	near

	push	cx			; Save environment
	push	di			; Save environment
	PUSH	BX			; Save environment

ifdef	OS2
	mov	cx,cs			; DS = Code segment
	mov	ds,cx			; Two instructions needed
	assume	ds:CODE
	EGAChooseMonoColorDisplay	; Validate CRTC address
endif	; OS2

	CMP	[fVga],FALSE		; Do we have a VGA Card?
	JE	HandleEGA		; No - skip
	PUSH	DX			; Save environment

ifndef	OS2
	mov	cx,cs			; DS = Code segment
	mov	ds,cx			; Two instructions needed
	assume	ds:CODE
	VGAChooseMonoColorDisplay	; Validate CRTC address
endif	; NOT OS2

	mov	si,1			; Change default save maps
	call	ReadVGARegs
	POP	DX			; Restore environment
	JMP	SHORT FinishChangeRegs

HandleEGA:

ifdef	OS2
	PUSH	ES			; Save environment
	xor	si,si			; DS = Segment 0
	mov	ds,si			; Two instructions needed
	assume	ds:INTVEC
else	; NOT OS2
	assume	ds:INTVEC
	PUSH	ES			; Save environment
	EGAChooseMonoColorDisplay	; Validate CRTC address
endif	; NOT OS2

	call	MakeBase		; ES:SI -> correct table on exit
	assume	es:nothing
	mov	ax,es
	mov	ds,ax			; DS = ES
	assume	ds:nothing
	mov	ax,cs
	mov	es,ax			; ES = CS
	assume	es:CODE
	add	si,5			; Bump past BIOS misc junk
	mov	di,offset StartShadowMaps
	mov	al,3			; Always stash 3 in seq reset reg
	stosb
	mov	cx,(VGAPatch - 2) / 2	; Move data up to extra VGA reg

if	(VGAPatch - 2) AND 1
	movsb				; Odd count adjust
endif	; (VGAPatch - 2) AND 1

rep	movsw
	inc	di			; Bump past VGA reg
	mov	cl,NumGraphicsRegs / 2	; Finish up grph ctrlr regs

if	NumGraphicsRegs AND 1
	movsb				; Odd count adjust
endif	; NumGraphicsRegs AND 1

rep	movsw

	sub	si,(SizeShadowMaps - 2) ; Drop back to beginning
	stosb				; Always stash 3 in seq reset reg
	mov	cl,(VGAPatch - 2) / 2	; Move data up extra VGA reg

if	(VGAPatch - 2) AND 1
	movsb				; Odd count adjust
endif	; (VGAPatch - 2) AND 1

rep	movsw
	inc	di			; Bump past VGA reg
	mov	cl,NumGraphicsRegs / 2	; Finish up grph ctrlr regs

if	NumGraphicsRegs AND 1
	movsb				; Odd count adjust
endif	; NumGraphicsRegs AND 1

rep	movsw
	mov	ax,cs
	mov	ds,ax
	assume	ds:CODE 		; DS = CS
	mov	[PortTable][3 * SIZE PortRec].prNumRegs,NumAttrRegs - 1
					; Adjust size for EGA
	xor	ax,ax			; Get a zero value
	mov	[Gr1PosReg],al		; AX = 0, init Gr1PosRegs
	mov	[DefGr1PosReg],al
	inc	ax
	mov	[Gr2PosReg],al		; AX = 1, init Gr2PosRegs
	mov	[DefGr2PosReg],al
	POP	ES			; Restore environment
	assume	es:nothing

FinishChangeRegs:
	assume	ds:CODE
	xor	ax,ax
	mov	di,ax			; Now clear all dirty flags
	mov	cl,NumPtrData
	mov	bx,offset PortTable	; Start at beginning

@@:
	mov	code:[bx][di].prModFlag,al
	add	di,SIZE PortRec
	loop	@B
	mov	[SingleRegMod],al
	POP	BX			; Restore environment
	pop	di			; Restore environment
	pop	cx			; Restore environment
	ret

ChangeRegs	endp

	subttl	SetMode
	page

;
; SetMode - shadow int 10h SetMode functionality (subfunction 00h)
;
;	This code is executed when a BIOS setmode call is made.  It must
;	predict which mode table the BIOS will use, so the BIOS decision
;	logic is duplicated here.
;
; ENTRY
;	SaveAX		=  original ax on entry with mode in al
;	ds		=  cs
; EXIT
;	none
; DESTROYS
;	ax, si, ds, flags
;

	assume	cs:CODE, ds:CODE, es:nothing, ss:nothing

SetMode 	proc	near

	xor	ax,ax
	mov	ds,ax
	assume	ds:INTVEC
	mov	al,byte ptr [EquipFlag]	; Get planar switch setting
	mov	ah,byte ptr [SaveAX]	; AH = mode
	and	ah,01111111b		; Reset noclear bit
	test	[Info],00000010b	; If EGA has color monitor
	jz	smNoMonochrome		;  skip mono tests
	test	al,030h 		; If default video is color,
	jnz	smNoChange		;  get out now
	mov	al,0B4h 		; IO addr = 3Bx
	cmp	ah,00Fh 		; If mono hi-res graphics,
	je	@F			;  do it
	mov	ah,007h 		; Else force mono alpha
	jmp	short @F		;  do it

smNoMonochrome:
	test	al,030h 		; If default video mono,
	jz	smNoChange		;  get out now
	mov	al,0D4h 		; IO addr = 3Dx

@@:
	push	ax			; Save video mode
	call	ChangeRegs		; Initialize shadow maps
	assume	ds:CODE
	pop	ax			; Recover mode
	push	bx			; We need it
	mov	bx,0FF01h		; Assume mono 8x14 font
	cmp	[fVga],FALSE		; Do we have a VGA Card?
	je	@F			; No - skip
	mov	bl,4			; Assume mono 8x16 font

@@:
	cmp	ah,7			; If mode is mono alpha,
	je	smDoFonts		;  do it
	mov	bl,0FFh 		; Assume no fonts (graphics)
	cmp	ah,3			; If mode is graphics,
	ja	smDoFonts		;  do it
	mov	bl,001h 		; Assume 8x14 font
	cmp	[fVga],FALSE		; Do we have a VGA Card?
	je	@F			; No - skip
	mov	bl,004h 		; Assume 8x16 font

@@:
	call	BrstDet 		; If 350 scanlines,
	jnc	smDoFonts		;  do it
	mov	bl,2			; Else show 8x8 font

smDoFonts:
	mov	word ptr [FontBank][0],bx ; Stash bl:bh
	mov	word ptr [FontBank][2],0FFFFh ; Stash 0FFh:0FFh
	pop	bx

smNoChange:
	assume	ds:nothing
	ret

SetMode 	endp

if	CallTableNeeded

	subttl	SetCursorType
	page

;
; SetCursorType - shadow int 10h SetCursorType functionality (subfunction 01h)
;
; ENTRY
;	ch	=  bits 0-4: start scanline for cursor
;		   bits 5-6: visibility attributes
;	cl	=  bits 0-4: stop scanline for cursor
;	ds	=  cs
; EXIT
;	none
; DESTROYS
;	ax, flags
;

	assume	cs:CODE, ds:CODE, es:nothing, ss:nothing

SetCursorType	proc	near

	push	bx			; Save environment
	push	ds			; Save environment
	xor	ax,ax
	mov	ds,ax
	assume	ds:INTVEC
	mov	bx,cx			; BX = cursor type
	test	[Info],00001000b	; If EGA not active,
	jnz	sctStash		;  just stash the raw values
	mov	al,bh			; AL = raw start
	and	al,01100000b		; Extract visibility attributes
	cmp	al,00100000b		; If cursor-off flag not set,
	jne	@F			;  continue
	mov	bx,01E00h		; Else emulate cursor off
	jmp	short sctStash

@@:
	test	[Info],00000001b	; If not emulating cursor,
	jnz	sctStash		;  just stash the raw values
	cmp	[CrtMode],3		; If not alpha mode,
	ja	sctNoBump2		;  avoid special alpha tests
	call	BrstDet 		; If 200 lines,
	jc	sctNoBump2		;  avoid 350 line heuristics
	mov	al,005h 		; Magic number
	cmp	bh,al			; If start < 5,
	jb	@F			;  leave it alone
	add	bh,al			; Else bump it up

@@:
	cmp	bl,al			; If stop < 5,
	jb	sctNoBump2		;  leave it alone
	add	bl,al			; Else bump it up

sctNoBump2:
	inc	bl			; Bump stop
	or	bh,bh			; If start = 0,
	jz	@F			;  check for wraparound
	cmp	bl,byte ptr [Points]	; If stop < char cell height,
	jb	@F			;  proceed to final test
	xor	bl,bl			; Else stop = 0

@@:
	mov	ax,bx			; Get copy into ax
	sub	al,ah
	cmp	al,16			; If stop - start != magic
	jne	sctStash		;  continue
	inc	bl			; Else bump stop

sctStash:
	pop	ds			; Restore environment
	assume	ds:CODE
	xchg	bh,bl			; Flip start/stop
	mov	word ptr [CRTCRegs][10],bx ; Stash computed value
	pop	bx			; Restore environment

if2	; Pass 2 of the assembler
.ERRNZ		($ - Ignore)		; Drop into Ignore
endif	; Pass 2 of the assembler

SetCursorType	endp

;
; Ignore - Unsupported device driver calls enter here
;
; ENTRY
;	none
; EXIT
;	none
; DESTROYS
;	none
; NOTE:
;	We are using the RET instruction from SetMode above
;

	assume	cs:CODE, ds:nothing, es:nothing, ss:nothing

Ignore		proc	near		; Enter here just to use the ret

	ret

Ignore		endp

	subttl	ScrollUpDown
	page

;
; ScrollUpDown - shadow int 10h Scroll functionality (subfunctions 06h, 07h)
;
; ENTRY
;	al  =	current video mode
;	ah  =	static copy of ega info byte
;
; EXIT
;	none
; DESTROYS
;	ax, flags
;

	assume	cs:CODE, ds:CODE, es:nothing, ss:nothing

ScrollUpDown	proc	near

	push	bp
	mov	bp,sp			; Watch out for stack!
	push	bx
	mov	bh,byte ptr [bp].userAX ; BH = num lines to scroll
	or	bh,bh			; If bh = 0,
	jz	sudSetSeq		;  only change sequencer
	mov	bl,dh			; BL = lower row of window
	sub	bl,ch			; BL = lower row - upper row
	inc	bx			; Make 1-based
	cmp	bl,bh			; If size window = num lines,
	je	sudSetSeq		;  treat as blank whole window
	mov	bl,010h 		; Assume odd/even addressing
	cmp	al,00Fh 		; If mode < 0Fh,
	jb	@F			;  assumption is correct
	test	ah,01100000b		; If EGA memory is 64K,
	jz	@F			;  assumption is correct
	xor	bl,bl			; Else use enhanced default

@@:
	mov	[GraphicsRegs][005h],bl	; Stash the default

sudSetSeq:
	mov	[SeqRegs][002h],00Fh	; Stash another default
	pop	bx
	pop	bp
	ret

ScrollUpDown	endp

	subttl	ReadChar
	page

;
; ReadChar - shadow int 10h ReadChar functionality (subfunction 08h)
;
; ENTRY
;	al  =	current video mode
;	ah  =	static copy of ega info byte
;
; EXIT
;	none
; DESTROYS
;	ax, flags
;

	assume	cs:CODE, ds:CODE, es:nothing, ss:nothing

ReadChar	proc	near

	cmp	al,00Fh 		; If mode <  0Fh,
	mov	al,0			; (reuse al and assume default)
	jb	@F			;  no more processing needed
	test	ah,0110000b		; If EGA memory >64K
	jnz	@F			;  no more processing needed
	mov	al,010h 		; Else use crippled default

@@:
	mov	[GraphicsRegs][005h],al	; Put al in r/w mode reg
	ret

ReadChar	endp

	subttl	WriteChar
	page

;
; WriteChar - shadow int 10h WriteChar functionality (subfunctions 09h, 0Ah)
;
; ENTRY
;	al  =	current video mode
;	ah  =	static copy of ega info byte
;
; EXIT
;	none
; DESTROYS
;	ax, flags
;

	assume	cs:CODE, ds:CODE, es:nothing, ss:nothing

WriteChar	proc	near

	mov	[GraphicsRegs][003h],0	; Put 000h in data rotate reg
	mov	[SeqRegs][002h],00Fh	; Put 00Fh in map mask reg

scpGetOut:				; Mind if we use your ret?  Thanks.
	assume	ds:nothing
	ret

WriteChar	endp

	subttl	SetCGAPalette
	page

;
; SetCGAPalette - shadow int 10h SetCGAPalette functionality (subfunction 0Bh)
;
;	SetCGAPalette is a quirky function, even on a CGA system.  Note the
;	following points carefully:
;
;	1.  When using bh = 0 to set background/overscan, the call will fall
;	    through to the bh = 1 code because bit 4 is the palette intensity
;	    which must be combined with the current palette selection.	Thus
;	    when making a set background call, you are also implicitly making
;	    a set palette intensity call (subject to constraints that follow).
;
;	2.  In alpha modes, you may only set the overscan color if you are in
;	    a CGA compatible (200 lines, 15KHz) sweep mode.  Attempting to do
;	    this in 350 line alpha will cause display problems and therefore is
;	    a nop in this function.  It is also meaningless to set the palette
;	    and the background color in either alpha sweep mode, and thus is a
;	    nop.
;
; ENTRY
;	bh	=  0: set background/overscan color
;		bl	=  bits 0-3: irgb color for background/overscan
;			   bit	  4: palette intensity
;			   bits 5-7: unused
;	bh	=  1: set foreground palette
;		bl	=  0: set palette 0 (green/red/brown)
;			   1: set palette 1 (cyan/magenta/white)
;	ds	=  cs
; EXIT
;	none
; DESTROYS
;	ax, si, ds, flags
;

	assume	cs:CODE, ds:CODE, es:nothing, ss:nothing

SetCgaPalette	proc	near

	xor	ax,ax
	mov	ds,ax
	assume	ds:INTVEC
	cmp	byte ptr [Addr6845],0B4h; If mono active,
	je	scpGetOut		;  get out
	test	[Info],00000010b	; If EGA has no color monitor,
	jnz	scpGetOut		;  get out
	mov	ah,[CrtMode]		; AH = video mode
	mov	al,[CrtPalette] 	; AL = CGA palette byte
	mov	si,cs			; DS = Code segment
	mov	ds,si			; Two instructions needed
	assume	ds:CODE
	push	bx
	or	bh,bh			; If bh != 0,
	jnz	scpPal			;  go set CGA palette colors
	and	al,11100000b		; Clear old backgnd, pal intense
	and	bl,00011111b		; Isolate new backgnd, pal int
	or	al,bl			; AL = new palette byte
	mov	bh,bl			; Get a copy into bh
	shl	bl,1			; Shift intensity into position
	and	bx,0000011100010000b	; And isolate it
					; Isolate rgb in bh
	or	bh,bl			; BH = EGA compatible background
	cmp	ah,3			; If in graphics mode,
	ja	@F			;  do background and overscan
	call	BrstDet 		; If 200 lines,
	jc	scpOverScan		;  do overscan only
	jmp	short scpX		; Else nothing left to do

@@:
	mov	[AttrRegs][000h],bh	; Stash background

scpOverScan:
	mov	[AttrRegs][011h],bh	; Stash overscan
	mov	bl,al			; Recover new palette byte
	and	bl,00100000b		; Isolate palette bit

ifdef	OS2
	rol	bl,3			; And get into bit 0
else	; NOT OS2
	rol	bl,1			; And get into bit 0
	rol	bl,1
	rol	bl,1
endif	; NOT OS2

scpPal:
	cmp	ah,3			; If in alpha mode,
	jbe	scpX			;  don't bother with palettes
	and	bl,00000001b		; Only allow palettes 0 and 1
	and	al,00010000b		; Isolate palette intensity bit
	or	al,bl			; Or intensity into palette
	or	al,2			; Green (2) or cyan (3)
	mov	[AttrRegs][001h],al	; Stash color 1
	inc	ax			; Red (4) or magenta (5)
	inc	ax			; "
	mov	[AttrRegs][002h],al	; Stash color 2
	inc	ax			; Brown/yellow (6) or white (7)
	inc	ax			; "
	mov	[AttrRegs][003h],al	; Stash color 3

scpX:
	pop	bx
	ret

SetCgaPalette	endp

	subttl	WriteDot
	page

;
; WriteDot - shadow int 10h WriteDot functionality (subfunction 0Ch)
;
; ENTRY
;	al  =	current video mode
;	ah  =	static copy of ega info byte
;
; EXIT
;	none
; DESTROYS
;	ax, flags
;

	assume	cs:CODE, ds:CODE, es:nothing, ss:nothing

WriteDot	proc	near

	mov	al,0FFh
	mov	[GraphicsRegs][003h],ah	; Put 000h in data rotate reg
	mov	[GraphicsRegs][008h],al	; Put 0FFh in bit mask reg
	mov	[SeqRegs][002h],al	; Put 0FFh in map mask reg
	ret

WriteDot	endp

	subttl	ReadDot
	page

;
; ReadDot - shadow int 10h ReadDot functionality (subfunction 0Dh)
;
; ENTRY
;	al  =	current video mode
;	ah  =	static copy of ega info byte
;
; EXIT
;	none
; DESTROYS
;	ax, flags
;

	assume	cs:CODE, ds:CODE, es:nothing, ss:nothing

ReadDot 	proc	near

	push	bx
	mov	bl,003h 		; Assume >64K or modes 0Dh/0Eh
	cmp	al,00Fh 		; If mode < 0Fh,
	jb	@F			;  assumption is correct
	test	ah,01100000b		; If EGA memory > 64K,
	jnz	@F			;  assumption is correct
	dec	bx			; Else use crippled default

@@:
	mov	[GraphicsRegs][004h],bl	; Put in read map reg
	pop	bx
	ret

ReadDot 	endp

	subttl	SetEGAPalette
	page

;
; SetEGAPalette - shadow int 10h SetEGAPalette functionality (subfunction 10h)
;
; ENTRY
;	(Source - Direct quote from IBM Enhanced Graphics Adapter manual)
;   SubFunctions:
;	(AL) = 0               Set individual palette register
;	 BL = Palette register to be set
;	 BH = Value to set
;
;	AL = 1                Set overscan register
;	BH = Value to set
;
;	AL = 2                Set all palette register and overscan
;	ES:BX points to a 17 byte table
;	Bytes 0 - 15 are the palette values, respectively
;	Byte 16 is the overscan value
;
;	AL = 3                Toggle intensity/blinking bit
;		BL - 0        Enable intensity
;		BL - 1        Enable blinking
;
; EXIT
;	none
; DESTROYS
;	ax, si, ds, flags
;

	assume	cs:CODE, ds:CODE, es:nothing, ss:nothing

SetEgaPalette	proc	near

	push	bp
	mov	bp,sp
	xor	ax,ax
	mov	ds,ax
	assume	ds:INTVEC
	mov	al,0D4h 		; Assume color
	test	[Info],00000010b	; If EGA has color monitor,
	jz	@F			;  go check Addr6845
	mov	al,0B4h 		; Else try mono

@@:
	cmp	byte ptr [Addr6845],al	; If no agreement with Addr6845,
	jne	sepX0			;  get out
	push	bx
	mov	al,byte ptr [bp].userAX ; AL = original subfunction
	xor	ah,ah			; Allows dec ax instruction
	or	al,al			; If al != 0 (set one reg),
	jnz	@F			;  try next subfunction
	cmp	bl,NumAttrRegs - 1	; If user gave us bogus index,
	ja	sepX1			;  get out or we'll lunch
	mov	al,bh			; Copy data
	xor	bh,bh			; Zero bh for the index
	mov	[AttrRegs][bx],al	; Stash it
	jmp	short sepX1

@@:
	dec	ax			; If al != 1 (set overscan reg),
	jnz	@F			;  try next subfunction
	mov	[AttrRegs][011h],bh	; Stash overscan reg
	jmp	short sepX1

@@:
	push	es
	dec	ax			; If al != 2 (set all regs),
	jnz	@F			;  try next subfunction
	push	cx
	push	di
	mov	ax,es
	mov	ds,ax			; DS = ES
	assume	ds:nothing
	mov	ax,cs
	mov	es,ax			; ES = CS
	assume	es:CODE
	mov	si,dx			; DS:SI -> src table
	mov	di,offset AttrRegs	; ES:DI -> AttrReg array
	mov	cx,8			; Do first 16 bytes
rep	movsw
	inc	di			; Bump past mode control
	movsb				; Stash overscan
	pop	di
	pop	cx
	jmp	short sepX

@@:
	assume	ds:INTVEC, es:nothing
	dec	ax			; If al != 3 (toggle blink),
	jnz	sepX			;  get out

;
; Legal values of bl (0 or 1) should be used to act NOT on the current
; setting of the mode reg, but on the default value pointed to by the parm
; ptr in the save ptr table.  Illegal values for bl cause this reg to be
; restored to the default value given by the parm ptr.	See IBM EGA BIOS
; pg.  148
;

	mov	ah,[CrtMode]		; AH = video mode
	call	MakeBase
	assume	es:nothing
	mov	al,es:[si][51]		; Get default attr mode value
	or	bl,bl			; If bl != 0 (reset bit)
	jnz	@F			;  try next subfunction
	and	al,11110111b		; Reset blink bit
	jmp	short sepStoreBit

@@:
	dec	bl			; If bl still not 0,
	jnz	sepStoreBit		;  give'em a default
	or	al,00001000b		; Set blink bit

sepStoreBit:
	mov	[AttrRegs][010h],al

sepX:
	assume	ds:nothing, es:nothing
	pop	es
	assume	es:nothing

sepX1:
	pop	bx

sepX0:
	assume	ds:INTVEC, es:nothing
	pop	bp
	ret

SetEgaPalette	endp

	subttl	DownloadFont
	page

;
; DownloadFont - shadow int 10h DownloadFont functionality (subfunction 11h)
;
; ENTRY
;	(Source - Direct quote from IBM Enhanced Graphics Adapter manual)
;   SubFunctions:
;	Note: This call will initiate a mode set, completely
;		resetting the video environment but maintaining
;		the regen buffer.
;
;	AL = 00   User alpha load
;		ES:BP - Pointer to user table
;		CX    - Count to store
;		DX    - Character offset into table
;		BL    - Block to load
;		BH    - Number of bytes per character
;	AL = 01   ROM monochrome set
;		BL    - Block to load
;	AL = 02   ROM 8x8 double dot
;		BL    - Block to load
;	AL = 03   Set block specifier
;		BL    - Char gen block specifier
;			D3-D2  Attr bit 3 one,   char gen 0-3
;			D1-D0  Attr bit 3 zero,  char gen 0-3
;			Note:  When using AL = 03 a function call
;				AX = 1000H
;				BX = 0712H
;				is recommended to set the color planes
;				resulting in 512 characters and eight
;				consistant colors
;
; Note : The following interface (AL=1X) is similar in function
;	to (AL=0X) except that :
;		- Page zero must be active
;		- Points (bytes/char) will be recalculated
;		- Rows will be calculated from the following:
;			INT((200 or 350) / points) - 1
;		- CRT_LEN will be calculated from :
;			(rows + 1) * CRT_COLS * 2
;		- The CRTC will be reprogrammed as follows :
;			R09H = points - 1       Max scan line
;				R09H done only in mode 7
;			R0AH = points  2        Cursor start
;			R0BH = 0                Cursor end
;			R12H =                  Vert disp end
;				((rows + 1) * points) - 1
;			R14H = points           Underline loc
;
;	The above register calculations must be close to the
;	original table values or undetermined results will
;	occur.
;
;	Note : The following interface is designed to be
;		called only immediately after a mode set has
;		been issued.  Failure to adhere to this practice
;		may cause undetermined results.
;
;	AL = 10   User alpha load
;		ES:BP - Pointer to user table
;		CX    - Count to store
;		DX    - Character offset into table
;		BL    - Block to load
;		BH    - Number of bytes per character
;	AL = 11   ROM monochrome set
;		BL    - Block to load
;	AL = 12   ROM 8x8 double dot
;		BL    - Block to load
;
;	Note : The following interface is designed to be
;		called only immediately after a mode set has
;		been issued.  Failure to adhere to this practice
;		may cause undetermined results.
;
;	AL = 20   User graphics chars   INT 01FH (8x8)
;		ES:BP - Pointer to user table
;	AL = 21   User graphics chars
;		ES:BP - Pointer to user table
;		CX    - Points (bytes per character)
;		BL    - Row specifier
;
;			BL = 0  User
;				DL - Rows
;			BL = 1  14 (0EH)
;			BL = 2  25 (19H)
;			BL = 3  43 (28H)
;
;	AL = 22   ROM 8 x 14 set
;		BL    - Row specifier
;	AL = 23   ROM 8 x 8 double dot
;		BL    - Row specifier
;
;	AL = 30   Information
;			CX    - Points
;			DL    - Rows
;		BH    - 0       Return current INT 1FH Ptr
;			ES:BP - Ptr to table
;		BH    - 1       Return current INT 44H Ptr
;			ES:BP - Ptr to table
;		BH    - 2       Return ROM 8 x 14 Ptr
;			ES:BP - Ptr to table
;		BH    - 3       Return ROM double dot Ptr
;			ES:BP - Ptr to table
;		BH    - 4       Return ROM double dot Ptr (TOP)
;			ES:BP - Ptr to table
;		BH    - 5       Return ROM alpha alternate 9 x 14
;			ES:BP - Ptr to table
;
; EXIT
;	None
;
; DESTROYS
;	AX, SI
;

	assume	cs:CODE, ds:CODE, es:nothing, ss:nothing

DownloadFont	proc	near

	push	bp			; Save environment
	mov	bp,sp
	mov	al,byte ptr [bp].userAX ; Recover original subfunction
	cmp	al,20h			; If not one of the alpha loads,
	jae	dfX0			;  get out
	cmp	al,3			; If only changing banks,
	je	dfSetBlock		;  go do it
	and	al,00001111b		; Else extract sub-subfunction
	cmp	al,3			; If not 0, 1, or 2,
	jae	dfX0			;   get out
	mov	si,bx			; Get row specifier
	and	si,000000000000011b	; Extract font bank
	mov	byte ptr [FontBank][si],al ; Stash font id in table
	xor	ax,ax
	mov	ds,ax			; DS = 0
	assume	ds:INTVEC
	mov	ah,[CrtMode]		; Get current video mode
	push	bx			; Save environment
	mov	bl,ah			; Save a copy for later
	mov	al,byte ptr [Addr6845]	; Get low byte CRTC io address
	call	ChangeRegs		; Re-initialize all regs
	assume	ds:CODE
	mov	al,byte ptr [bp].userAX ; Get original subfunction
	sub	al,010h 		; Check 1x series
	js	dfX			; If not 1x series, we're done
	jz	dfSetUnderLine		; If al was 10h, bh set by user
	mov	bh,14			; Assume 8x14 font
	cmp	[fVga],FALSE		; Do we have a VGA Card?
	je	@F			; No - skip
	mov	bh,16			; Assume 8x16 font

@@:
	dec	al			; If al was 11h,
	jz	dfSetUnderLine		;  go check underline
	mov	bh,008h 		; Assume 8x8 font
	dec	al			; If al was not 12h,
	jnz	dfX			;  then invalid code

dfSetUnderLine:
	cmp	bl,007h 		; If not mono alpha,
	jne	@F			;  don't set underline
	mov	[CRTCRegs][014h],bh	; Set underline position

@@:
	dec	bh			; Make 0-based
	mov	[CRTCRegs][009h],bh	; Set last char line
	mov	ax,350			; Assume 350 total scan lines
	cmp	bl,003h 		; If not color alpha,
	ja	@F			;  skip special alpha tests
	call	BrstDet 		; If 350 lines,
	jnc	@F			;  our assumption was good
	mov	ax,200			; Else show 200 lines

@@:
	inc	bh			; Make char lines 1-based
	div	bh
	mul	bh
	dec	ax			; Make total lines 0-based
	mov	[CRTCRegs][012h],al	; Stash new vertical total

dfX:
	pop	bx			; Restore environment

dfX0:
	pop	bp			; Restore environment
	ret

dfSetBlock:
	mov	[SeqRegs][003h],bl	; Stash new font bank selection
	pop	bp			; Restore environment
	ret

DownloadFont	endp

endif	; CallTableNeeded

	subttl	Read Register
	page

;
; ReadReg - Read a single EGA register from shadow maps
;
; ENTRY
;	urAH	=  0F0h
;	bx	=  register index		if register id is indexed chip
;		   ignored			if register id is single reg
;	dx	=  register id
; EXIT
;	bl	=  current register data
; DESTROYS
;	ax, si, flags
;

	assume	cs:CODE, ds:CODE, es:nothing, ss:nothing

ReadReg		proc	near

	cmp	dl,18h			; Is it Attr reg?
	jne	@F			; No - skip
	cmp	bl,10h			; Is it palette reg?
	jae	@F			; No - skip
	mov	[fPalette],dl		; fPalette = TRUE

@@:
	call	UpdateCRTCMap		; Get latest readable regs
	mov	si,dx			; Reg id indexes PortTable
	mov	si,[PortTable][si].prCurrTable
	cmp	dl,NumPtrData * SIZE PortRec ; If not a chip,
	jae	@F			;  no need for bx
	mov	bl,CODE:[si][bx]	; Read indexed chip data
	ret

@@:
	mov	bl,CODE:[si] 		; Read a single reg
	ret

ReadReg		endp

	subttl	Write Register
	page

;
; WriteReg - write to a single EGA register and update shadow maps
;
; ENTRY
;	urAH	=  0F1h
;	bl	=  register index		if register id is indexed chip
;		   data to be written		if register id is single reg
;	bh	=  data to be written		if register id is indexed chip
;		=  ignored			if register id is single reg
;	dx	=  register id
; EXIT
;	none
; DESTROYS
;	ax, bh, dx, si, flags
;

	assume	cs:CODE, ds:CODE, es:nothing, ss:nothing

WriteReg	proc	near

	mov	ax,bx
	mov	si,dx			; Reg id indexes PortTable
	cli				; Disable interrupts
	or	[PortTable][si].prModFlag,3
	cmp	dl,NumPtrData * SIZE PortRec ; If not a chip,
	mov	dx,[PortTable][si].prPortAddr
	mov	si,[PortTable][si].prCurrTable
	jae	WRegNotPtr		; Just write it directly
	xor	bh,bh			; Zero bh for indexing
	mov	CODE:[si][bx],ah	; Update shadow map
	cmp	dl,AttCtrlAddrReg AND 0FFh ; If not attribute chip,
	jne	@F			; Skip special processing
	OutWordAttr ax,NoInts		; Write index/data to AttrAddr
	sti				; Restore interrupt state
	ret

@@:
	OutWord	NoInts,DestroyAX,DestroyDX
	sti				; Restore interrupt state
	ret

WRegNotPtr:
	mov	CODE:[si],al 		; Update shadow map
	or	[SingleRegMod],3	; Show a single reg is dirty
	out	dx,al			; And finally send out data
	sti				; Restore interrupt state
	ret

WriteReg	endp

	subttl	Read Register Range
	page

;
; ReadRange - read a range of EGA registers from shadow maps
;
; ENTRY
;	urAH	=  0F2h
;	dx	=  register id			(must be an indexed chip!)
;	cl	=  # of registers to read	(must be > 1 !)
;	ch	=  starting register index
;	es:bx	-> buffer to put reg data
; EXIT
;	none
; DESTROYS
;	ax, cx, si, flags
;

	assume	cs:CODE, ds:CODE, es:nothing, ss:nothing

ReadRange	proc	near

	cmp	dl,18h			; Is it Attr reg?
	jne	@F			; No - skip
	cmp	ch,10h			; Is it palette reg?
	jae	@F			; No - skip
	mov	[fPalette],dl		; fPalette = TRUE

@@:
	call	UpdateCRTCMap		; Get latest readable regs
	push	di
	mov	di,bx			; DI = ptr to user table
	mov	si,dx			; Reg id indexes PortTable
	mov	si,[PortTable][si].prCurrTable
	xor	ax,ax			; AX = 0
	xchg	al,ch			; AX = reg offset, ch = 0
	add	si,ax			; Adjust si for offset
	shr	cx,1			; CX now has reg count
rep	movsw				; Blast shadow map to user table
	rcl	cx,1
rep	movsb
	pop	di
	ret

ReadRange	endp

	subttl	Write Register Range
	page

;
; WriteRange - write to a range of EGA registers and update shadow maps
;
; ENTRY
;	urAH	=  0F3h
;	dx	=  register id			(must be an indexed chip!)
;	cl	=  # of registers to write	(must be > 1 !)
;	ch	=  starting register index
;	es:bx	-> buffer to get reg data
; EXIT
;	none
; DESTROYS
;	ax, bx, dx, si, flags
;

	assume	cs:CODE, ds:CODE, es:nothing, ss:nothing

WriteRange	proc	near

	push	di
	push	es
	mov	si,bx			; SI = ptr to user table
	mov	di,dx			; Reg id indexes PortTable
	mov	bx,offset PortTable	; Start at beginning
	cli				; Disable interrupts
	or	code:[bx][di].prModFlag,3
	mov	dx,code:[bx][di].prPortAddr
	mov	di,code:[bx][di].prCurrTable ; DI = ptr to shadow map
	mov	ax,es			; XCHG ES,DS
	mov	bx,ds
	mov	es,bx
	assume	es:CODE
	mov	ds,ax
	assume	ds:nothing
	xor	ax,ax			; AX = 0
	xchg	al,ch			; AX = reg offset, ch = 0
	add	di,ax			; Adjust di for offset
	push	cx			; CX now has reg count
	shr	cx,1
rep	movsw				; Blast table to shadow map
	rcl	cx,1
rep	movsb
	mov	ds,bx			; DS = CS
	assume	ds:CODE
	pop	cx			; Restore reg count
	sub	di,cx			; Rewind di
	cmp	dl,AttCtrlAddrReg AND 0FFh ; If not attribute chip,
	jne	WRangeNotAttr		; Skip special processing

@@:
	mov	ah,CODE:[di] 		; AH = reg data, al = reg index
	IODelay
	OutWordAttr	,NoInts		; Write index/data to AttrAddr
	inc	di
	inc	ax			; INC reg index (al)
	loop	@B
	jmp	short @F		; All done for this chip

WRangeNotAttr:
	mov	ah,CODE:[di] 		; AH = reg data, al = reg index
	IODelay
	OutWord	NoInts
	inc	di
	inc	ax			; INC reg index (al)
	loop	WRangeNotAttr

@@:
	pop	es
	assume	es:nothing
	pop	di
	sti				; Restore interrupt state
	ret

WriteRange	endp

	subttl	Read Register Set
	page

;
; ReadSet - read a set of EGA registers from shadow maps
;
; ENTRY
;	urAH	=  0F4h
;	cx	=  # of registers to read	(must be > 1 !)
;	es:bx	-> buffer of contiguous SetRec
;		   structures, one for each register
;		   to be read
; EXIT
;	none
; DESTROYS
;	ax, cx, si, flags
;

	assume	cs:CODE, ds:CODE, es:nothing, ss:nothing

ReadSet 	proc	near

	push	cx			; Save count
	push	bx			; Save buffer address

LookForPalette:
	cmp	byte ptr es:[bx][0],18h	; Is it Attr reg?
	jne	@F			; No - skip
	cmp	byte ptr es:[bx][2],10h	; Is it palette reg?
	jae	@F			; No - skip
	mov	[fPalette],cl		; fPalette = TRUE
	jmp	short LookForPaletteDone

@@:
	add	bx,4			; Next entry
	loop	LookForPalette		; Continue through the list

LookForPaletteDone:
	pop	bx			; Restore buffer address
	pop	cx			; Restore count
	call	UpdateCRTCMap		; Get latest readable regs
	push	di
	mov	di,bx

@@:
	mov	si,es:[di].srPortNum	; SI =  reg id
	mov	si,[PortTable][si].prCurrTable ; SI -> our shadow map
	mov	al,es:[di].srPtr	; AL =  reg index
	cbw
	add	si,ax			; Adjust si for index
	add	di,srData		; DI -> stash location
	movsb
	loop	@B
	pop	di
	ret

ReadSet 	endp

	subttl	Write Register Set
	page

;
; WriteSet - write to a set of EGA registers and update shadow maps
;
; ENTRY
;	urAH	=  0F5h
;	cx	=  # of registers to write	(must be > 1 !)
;	es:bx	-> buffer of contiguous SetRec
;		   structures, one for each register
;		   to be written
; EXIT
;	none
; DESTROYS
;	ax, cx, si, flags
;

	assume	cs:CODE, ds:CODE, es:nothing, ss:nothing

WriteSet	proc	near

	push	di
	push	dx
	mov	di,bx
	cli				; Disable interrupts

WSetNextEntry:
	mov	si,es:[di].srPortNum	; SI =  reg id
	or	[PortTable][si].prModFlag,3
	mov	dx,[PortTable][si].prPortAddr
	mov	si,[PortTable][si].prCurrTable ; SI -> our shadow map
	mov	al,es:[di].srPtr	; AL =  reg index
	cbw
	add	si,ax			; Adjust si for index
	mov	ah,es:[di].srData	; AH = reg data
	mov	CODE:[si],ah 		; Update shadow map
	cmp	dl,AttCtrlAddrReg AND 0FFh ; If not attribute chip,
	jne	WSetNotAttr		; Skip special processing
	OutWordAttr ax,NoInts		; Write index/data to AttrAddr
	jmp	short @F		; All done for this register

WSetNotAttr:
	OutWord	NoInts,DestroyAX,DestroyDX

@@:
	add	di,SIZE SetRec		; Bump to next record
	loop	WSetNextEntry
	pop	dx
	pop	di
	sti				; Restore interrupt state

DDefExit:				; Mind if we use your ret?  Thanks.
	ret

WriteSet	endp

	subttl	Define Default Shadow Maps
	page

;
; DefineDefault - load up default shadow maps from user buffer
;
; ENTRY
;	urAH	=  0F7h
;	cx	=  'TH' if user wants to program VGA specific color select
;			register.  This was added version 2.07.12.
;	dx	=  register id
;		   If high bit of dx set, an internal RevertDefault will
;		   occur after the default shadow maps have been updated.
;
;	es:bx	-> buffer of default values for specified register id.
;		   If register id is a chip, all values must be present.
; EXIT
;	none
; DESTROYS
;	ax, bx, si, flags
;

	assume	cs:CODE, ds:CODE, es:nothing, ss:nothing

DefineDefault	proc	near

	push	di
	push	cx
	mov	di,dx			; Reg id indexes PortTable
	and	di,7FFFh		; Strip "revert" flag
	mov	si,cx			; SI = Possible special VGA code
	xor	ch,ch			; No high byte
	mov	cl,[PortTable][di].prNumRegs
	cmp	[fVGA],ch		; Are we on a VGA?
	je	@F			; No - skip
	cmp	di,18h			; Is it the attribute controller regs?
	jne	@F			; No - skip
	cmp	si,'TH'			; Is it code for VGA color select?
	je	@F			; Yes - skip
	dec	cx			; Don't deal with color select register

@@:
	mov	si,bx			; SI -> user buffer
	mov	al,1
	mov	bx,offset PortTable	; Start at beginning
	or	code:[bx][di].prModFlag,al
	or	[SingleRegMod],al
	mov	di,code:[bx][di].prDefTable ; DI -> default shadow map
	mov	ax,es			; XCHG ES,DS
	mov	bx,ds
	mov	es,bx
	assume	es:CODE
	mov	ds,ax
	assume	ds:nothing
	shr	cx,1
rep	movsw				; Blast to default shadow map
	rcl	cx,1
rep	movsb
	mov	es,ax			; Recover old es
	assume	es:NOTHING
	mov	ds,bx			; DS = CS
	assume	ds:CODE
	pop	cx
	pop	di
	or	dh,dh			; If not "revert" flag,
	jns	DDefExit		;  just leave
					; Else make defaults active

if2	; Pass 2 of the assembler
.errnz		($ - RevertDefault)	; Drop into RevertDefault
endif	; Pass 2 of the assembler

DefineDefault	endp

	subttl	Revert to Default Shadow Maps
	page

;
; RevertDefault - blast default shadow maps to EGA and update shadow maps
;
; ENTRY
;	urAH	=  0F6h
; EXIT
;	none
; DESTROYS
;	ax, si, flags
;

	assume	cs:CODE, ds:CODE, es:nothing, ss:nothing

RevertDefault	proc	near

	push	di			; Save environment
	push	es			; Save environment
	push	dx			; Save environment
	push	cx			; Save environment
	push	bx			; Save environment
	mov	ax,ds
	mov	es,ax			; ES = DS = CS
	assume	es:CODE
	mov	bx,offset PortTable	; Start at beginning
	xor	cx,cx

RDefNextPtrData:
	test	CODE:[bx].prModFlag,1	; If dirty flag = 0,
	jz	ToRDefNotModified	;  done with this map
	mov	CODE:[bx].prModFlag,2	; Else clear dirty flag
	mov	cl,CODE:[bx].prNumRegs
	mov	di,CODE:[bx].prCurrTable
	mov	si,CODE:[bx].prDefTable
	mov	dl,cl			; Save count
	shr	cx,1
rep	movsw				; Blast default map to current map
	rcl	cx,1
rep	movsb
	mov	al,ch			; CH still 0 from above
	mov	cl,dl			; Restore count
	sub	si,cx			; Rewind si
	mov	dx,CODE:[bx].prPortAddr
	cmp	dl,AttCtrlAddrReg AND 0FFh ; If not attribute chip,
	jne	RDefNotAttr		; Skip special processing
	pushf				; Save interrupt flag state
	WaitRetrace			; Also disables interrupts
	mov	al,ch			; Restore index (0)
	mov	dl,AttCtrlAddrReg AND 0FFh ; Restore dx to AttrAddr

@@:
	mov	ah,CODE:[si] 		; Get data
	OutWordAttr	,NoInts		; Write index/data to AttrAddr
	IODelay
	inc	si
	inc	ax
	loop	@B
	mov	al,PaletteAddressSource	; Since dx still has AttrAddr,
	out	dx,al			;  Enable video now
	IOdelay
	InitFlipFlop	NoSaveAX	; Be sure to reset the flip-flop
	popf				; Restore interrupt flag state

ToRDefNotModified:
	jmp	short RDefNotModified	; All done for Attr chip

RDefNotAttr:
	mov	ah,CODE:[si]
	cmp	dl,(EGA_BASE + SEQ_ADDR) AND 0FFh ; SAS 06/09/86
	jne	RDefNotAttr1		; SAS 06/09/86
	cmp	al,SeqClMReg		; SAS 06/09/86
	je	@F			; SAS 06/09/86

RDefNotAttr1:
	cmp	dl,(EGA_BASE + GRAF_CONT) AND 0FFh
	jne	RDefOut
	cmp	al,GRAF_MISC_REG
	je	@F

RDefOut:
	OutWord

@@:
	inc	si
	inc	ax
	loop	RDefNotAttr

RDefNotModified:
	add	bx,SIZE PortRec
	cmp	bx,offset PortTable + (NumPtrData * SIZE PortRec)
	jnb	@F
	jmp	RDefNextPtrData

@@:
	InitFlipFlop	NoSaveAX	; Reset FF and get FeatAddr!
	IOdelay
	test	[SingleRegMod],1	; If singles dirty flag = 0,
	jz	@F			;  we're done
	mov	[SingleRegMod],2	; Clear singles dirty flag
	mov	al,[DefFeatureReg]
	mov	[FeatureReg],al 	; Since dx still has FeatAddr,
	out	dx,al			;  program it now
	IOdelay
	mov	dl,MiscAddr AND 0FFh	; Deal with MiscOut reg
	mov	al,[DefMiscOutReg]
	mov	[MiscOutReg],al
	out	dx,al
	IOdelay
	cmp	[fVga],CL		; If VGA is present,
	jne	@F			;  skip GR1&2 processing
	mov	dl,Gr1PosAddr AND 0FFh
	mov	al,[DefGR1PosReg]
	mov	[GR1PosReg],al
	out	dx,al
	IOdelay
	mov	dl,Gr2PosAddr AND 0FFh
	mov	al,[DefGR2PosReg]
	mov	[GR2PosReg],al
	out	dx,al

@@:
	pop	bx			; Restore environment
	pop	cx			; Restore environment
	pop	dx			; Restore environment
	pop	es			; Restore environment
	assume	es:nothing
	pop	di			; Restore environment
	ret

RevertDefault	endp

	subttl	Get Default Shadow Maps
	page

;
; GetDefault - dump default shadow maps to user buffer
;
; ENTRY
;	urAH	=  0F8h
;	dx	=  register id
;	es:bx	-> buffer to receive default values
;		   If register id is a chip, table must have room for all
;		   regs in chip.
; EXIT
;	none
; DESTROYS
;	ax, si, flags
;

	assume	cs:CODE, ds:CODE, es:nothing, ss:nothing

GetDefault	proc	near

	push	di
	push	cx
	mov	di,bx			; DI -> user buffer
	mov	si,dx			; Reg id indexes PortTable
	xor	ch,ch
	mov	cl,[PortTable][si].prNumRegs
	mov	si,[PortTable][si].prDefTable ; SI -> default shadow map
	shr	cx,1
rep	movsw				; Blast default map to user buffer
	rcl	cx,1
rep	movsb
	pop	cx
	pop	di
	ret

GetDefault	endp

	subttl	EGA Context Functions
	page

;
; ContextInfo - Save/Restore full EGA.SYS context information
;
;	This entrypoint was added for TSR's and environment managers like
;	Windows and Presentation Manager that must be able to save/restore the
;	EGA.SYS context information as well as the state of the EGA hardware.
;	Without this functionality, Windows is unable to properly preserve the
;	state of variables internal to EGA.SYS such as the dirty flags and/or
;	the state of the EGA data latches.  It also provides software
;	developers a more rapid mechanism for context switching the EGA, as it
;	dispenses with the need to make numerous Read/WriteRange and
;	Read/WriteSet calls.
;
;	Secondly, there are two types of context information that developers
;	must implicitly handle:  1) the screen data, and 2) the font data (for
;	alpha modes).  Since shadowing the EGA registers alone does not
;	provide sufficient information for efficiently handling downloaded
;	font data, a call has been added to retrieve the current status of
;	each alpha font bank programmed through int 010h, subfunction 011h.
;
; ENTRY
;	urAH	=  0F9h
;	urAL	=  000h  GetContextSize
;		=  001h  SaveContext
;		=  002h  RestoreContext
;		=  003h  GetFontInfo
;		=  004h  GetInBiosFlag
;
;	other regs per function being called
; EXIT
;	per function being called
; DESTROYS
;	ax, si for this particular procedure,
;	otherwise,  per function being called
;

	assume	cs:CODE, ds:CODE, es:nothing, ss:nothing

ContextInfo	proc	near

	push	bp			; Save environment
	mov	bp,sp			; Set up stack addressing
	mov	al,byte ptr [bp].userAX	; Get old ax from stack
	pop	bp			; Restore environment
	cmp	al,MaxContextCall	; If not one of our subfunctions,
	ja	ciX			;  get out now
	xor	ah,ah			; Reset ah for dispatch
	shl	ax,1			; *2 for word addresses
	mov	si,ax
	jmp	[ContextTable][si]	; MUST jmp for stack integrity

ContextInfo	endp

;
; GetContextSize - return size in bytes needed to save EGA.SYS context
;
; ENTRY
;	none
; EXIT
;	userAX	=  size in bytes needed to save EGA.SYS context
; DESTROYS
;	AX
;

	assume	cs:CODE, ds:CODE, es:nothing, ss:nothing

GetContextSize	proc	near

	push	bp			; Save environment
	mov	bp,sp			; Set up stack addressing
	mov	[bp].userAX,SizeEGAContext ; Stash size on stack for ax
	pop	bp			; Restore environment

ciX:					; Mind if we use your ret?  Thanks.
	ret

GetContextSize	endp

	page

;
; SaveContext - dump current EGA.SYS context data to user buffer
;
;	If an app or TSR must change the EGA regs, but wants to restore
;	EGA.SYS and the hardware to the original state on entry, it should
;	first call GetContextSize.  Based on the value returned, it should
;	allocate the necessary buffer (possibly on the stack), set es:bx to
;	point to it, and issue this call.  The app is then free to issue other
;	EGA.SYS or int 10h calls at will.  When finished, it should call
;	RestoreContext data with a pointer to the saved context data.  Since
;	the current state of the dirty flags is included in the context data,
;	these too will be properly restored.
;
;	Note that apps must not assume a given size for the context data.
;	An app should call GetContextSize at least once, beforehand, to
;	determine how much memory to provide.  Also, apps must not assume a
;	given structure for the context data or modify it in any way.
;
;	If an app or TSR plans to make semi-permanent changes to the EGA regs,
;	it may avoid the Save/Restore context calls.  EGA.SYS will shadow any
;	int 10h calls that modify the EGA regs, updating both the default and
;	current shadow maps, but not touching any of the dirty flags.  This
;	allows the interrupted app to continue making RevertDefault calls, yet
;	keeps the new changes in effect until the app explicitly changes a reg
;	which the TSR modified.
;
; ENTRY
;	es:bx	->  user save area buffer for EGA context
; EXIT
;	none
; DESTROYS
;	ax, si, ds, flags
;

	assume	cs:CODE, ds:CODE, es:nothing, ss:nothing

SaveContext	proc	near

	push	cx			; Save environment
	push	dx			; Save environment
	push	di			; Save environment
	push	bx			; Save environment
	call	GetLatchLocation	; Get EGA/VGA latch save location
	or	di,di			; Are we in text mode?
	jz	@F			; Yes - skip

;
; Save the EGA/VGA latches
;

	mov	ah,ReadRegNum		; Read 1 register
	mov	dx,10h			; Graphics port register
	mov	bx,5			; Index 5
	int	10h			; Get it
	mov	si,ds			; Find a place for our byte
					; in vram, past visible memory
	mov	dx,egamem
	mov	ds,dx
	assume	ds:egamem
	mov	ax,(MR_SET shl 8) or GRAF_MODE_REG ; Set mode reg
					; to writethrough (mode 1)
	mov	dx,EGA_BASE + GRAF_CONT ; Set the port
	OutWord	,DestroyAX,DestroyDX
	mov	egamem:[di],al		; Actually write to vram and store
					; latches at offset [bx]
	mov	bh,bl			; Position it properly
	mov	bl,5			; Index 5
	mov	ah,WriteRegNum		; Write 1 register
	mov	dx,10h			; Graphics port register
	int	10h			; Restore original port value
	mov	ds,si
	assume	ds:CODE

;
; Save the EGA/VGA registers
;

@@:
	call	UpdateCRTCMap		; Get latest readable regs
	pop	bx			; Restore environment
	mov	di,bx
	mov	si,offset StartEGAContext
	mov	cx,SizeEGAContext / 2

if	SizeEgaContext AND 1
	movsb
endif	; SizeEgaContext AND 1

rep	movsw
	pop	di			; Restore environment
	pop	dx			; Restore environment
	pop	cx			; Restore environment
	ret

SaveContext	endp

	page

;
; RestoreContext - restore EGA.SYS context data from user buffer
;
;	RestoreContext copies a previously saved EGA context pointed to by
;	es:bx to the internal data areas of EGA.SYS and updates the hardware
;	to reflect the restored state.	The only caveat is that the state of
;	the Attribute index/data flip-flop is reset to the "index" state since
;	SaveContext is unable to save this information.  Note that this should
;	not be a problem if the caller checks the fInBIOS flag before
;	attempting to reprogram the EGA and if the interrupted application
;	only uses EGA.SYS or int 010h to modify the hardware.  This is because
;	EGA.SYS and int 010h always reset this flip-flop to the "index" state
;	on return.
;
; ENTRY
;	es:bx	-> previously saved EGA context
; EXIT
;	none
; DESTROYS
;	ax, si, ds, flags
;

	assume	cs:CODE, ds:CODE, es:nothing, ss:nothing

RestoreContext	proc	near

	push	cx			; Save environment
	push	dx			; Save environment
	push	di			; Save environment
	push	es			; Save environment

;
; Restore the EGA/VGA latches
;

	call	GetLatchLocation	; Get EGA/VGA latch save location
	or	di,di			; Are we in text mode?
	jz	@F			; Yes - skip
	mov	dx,egamem
	mov	ds,dx
	assume	ds:egamem
	mov	dx,EGA_BASE + GRAF_ADDR	; Setup for writethrough mode
	mov	ax,(DR_SET shl 8) or GRAF_DATA_ROT
	pushf				; Save interrupt flag state
	cli				; No interrupts while changing regs
	OutWord	NoInts,DestroyAX
	IOdelay
	mov	ax,(0ffh shl 8) or GRAF_BIT_MASK ; Don't mask any bits
	OutWord	NoInts,DestroyAX,DestroyDX
	IOdelay
					; DH already set correctly
	mov	dl,SEQ_ADDR		; Enable all planes, set seq
	mov 	ax,(MM_ALL shl 8) or SEQ_MAP_MASK ; Addr reg to point
	OutWord	NoInts,DestroyAX,DestroyDX ; to map mask reg
	popf				; Restore interrupt flag state
	mov	al,egamem:[di]		; Actually write to vram to
					; restore the latches

@@:
	mov	si,bx
	mov	di,offset StartEGAContext
	mov	ax,es			; ES = CS
	mov	dx,cs			; DS = Old ES
	mov	es,dx			; "
	assume	es:CODE
	mov	ds,ax			; Get new clocking mode 1st
	assume	ds:nothing
	mov	al,ds:[si + offset SeqRegs - offset StartEgaContext + 01h]
	cmp	al,CODE:[di + offset SeqRegs - offset StartEgaContext + 01h]
	jne	@F			; If same, compare mem mode
	mov	al,ds:[si + offset SeqRegs - offset StartEgaContext + 04h]
	cmp	al,CODE:[di + offset SeqRegs - offset StartEgaContext + 04h]
	jne	@F			; If same, compare misc regs
	mov	al,ds:[si + offset GraphicsRegs - offset StartEgaContext + 06h]
	cmp	al,CODE:[di + offset GraphicsRegs - offset StartEgaContext + 06h]

@@:
	mov	cx,SizeEGAContext / 2

if	SizeEgaContext AND 1
	movsb
endif	; SizeEgaContext AND 1

rep	movsw
	pop	es			; ES = old ES
	assume	es:nothing
	mov	ds,dx			; DS = CS
	assume	ds:CODE
	mov	cl,NumSeqRegs - 2 	; Don't do clocking/memory modes
	mov	dh,3			; "prefix" for port addresses
	mov	si,offset SeqRegs
	je	@F	 		; Jump if no changes here
	mov	ax,0100h
	mov	dl,(EGA_BASE + SEQ_ADDR) AND 0FFh
	pushf				; Save interrupt flag state
	cli				; RAM refresh will be off now!
	OutWord	NoInts			; Synchronous reset to sequencer
	IOdelay
	inc	ax			; Now select clocking mode reg
	mov	ah,CODE:[si + 01h]
	OutWord	NoInts,DestroyAX	; Write its new value (in ah)
	IOdelay
	mov	al,04h			; Now select memory mode reg
	mov	ah,CODE:[si + 04h]
	OutWord	NoInts,DestroyAX,DestroyDX ; Write its new value (in ah)
	IOdelay
	mov	dl,(EGA_BASE + GRAF_CONT) AND 0FFh
	mov	al,06h			; Now select grphx misc reg
	mov	ah,[GraphicsRegs + 06h]
	OutWord	NoInts,DestroyAX,DestroyDX ; Write its new value, too (ah)
	popf				; Restore interrupt flag state

@@:
	mov	dl,(EGA_BASE + SEQ_ADDR) AND 0FFh ; Setup for seq loop
	mov	al,ch			; AL = 0

recSeqLoop:
	mov	ah,CODE:[si]
	IOdelay
	OutWord 			; No ints can occur until after

@@:
	inc	si
	inc	ax
	cmp	al,01h			; Clocking mode reg next?
	je	@B			; If so, skip it
	loop	recSeqLoop		; Otherwise continue if more
	mov	al,cl			; AL = 0
	mov	cl,NumGraphicsRegs - 1
	mov	si,offset GraphicsRegs
	mov	dl,(EGA_BASE + GRAF_CONT) AND 0FFh

recGrphLoop:
	mov	ah,CODE:[si]
	IOdelay
	OutWord

@@:
	inc	si
	inc	ax
	cmp	al,06h			; Grphx misc reg next?
	je	@B			; If so, skip it
	loop	recGrphLoop		; Otherwise continue if more
	mov	al,cl			; AL = 0
	mov	cl,NumCRTCRegs
	mov	dl,byte ptr [PortTable][0].prPortAddr
	mov	si,offset CRTCRegs

@@:
	mov	ah,CODE:[si]
	IOdelay
	OutWord
	inc	si
	inc	ax
	loop	@B
	mov	cl,[PortTable][3 * SIZE PortRec].prNumRegs
	mov	si,offset AttrRegs
	pushf				; Save interrupt flag state
	WaitRetrace			; Also disables interrupts
	mov	al,ch			; Restore index (0)
	mov	dl,AttCtrlAddrReg AND 0FFh ; Restore dx to AttrAddr

@@:
	mov	ah,CODE:[si] 		; Get data
	IOdelay
	OutWordAttr	,NoInts		; Write index/data to AttrAddr
	inc	si
	inc	ax
	loop	@B
	mov	al,PaletteAddressSource	; Since dx still has AttrAddr,
	IOdelay
	out	dx,al			; enable video now
	IOdelay
	InitFlipFlop	NoSaveAX	; Reset FF and get FeatAddr!
	popf				; Restore interrupt flag state
	IOdelay
	mov	al,[FeatureReg] 	; Since dx still has FeatAddr,
	out	dx,al			; program it now
	IOdelay
	mov	dl,MiscAddr AND 0FFh
	mov	al,[MiscOutReg]
	out	dx,al
	cmp	[fVga],CL		; If VGA is present,
	jne	@F			;  skip GR1&2 processing
	mov	dl,Gr1PosAddr AND 0FFh
	mov	al,[GR1PosReg]
	IOdelay
	out	dx,al
	IOdelay
	mov	dl,Gr2PosAddr AND 0FFh
	mov	al,[GR2PosReg]
	out	dx,al

@@:
	pop	di			; Restore environment
	pop	dx			; Restore environment
	pop	cx			; Restore environment
	ret

RestoreContext	endp

	page

;
; GetLatchLocation - dump current EGA.SYS context data to user buffer
;
; ENTRY
;	None
; EXIT
;	If currently in graphics mode
;		DI -> Latch location
;	Else (Text mode)
;		DI = 0
; DESTROYS
;	AX
;

	assume	cs:CODE, ds:CODE, es:nothing, ss:nothing

GetLatchLocation	proc	near

	xor	di,di			; Assume text mode
	mov	al,[biosmode]		; Get current video mode
	and	al,01111111b		; Reset noclear bit
	cmp	al,13h			; Is it a mode we can handle?
	ja	@F			; No - skip (fake text mode)
	sub	al,0dh			; Adjust to zero base
	js	@F			; Skip if text mode
	xor	ah,ah			; No high byte
	add	di,ax			; Position to video mode in table
	mov	di,CODE:[di] + offset EGALatchTable ; Get desired latch location

@@:
	ret

GetLatchLocation	endp

	page

;
; GetFontInfo - dump current font data in FontInfo format to user buffer
;
;	GetInfo is provided for environments like Windows that need to know
;	which alpha fonts have been downloaded and which banks they are in.
;
;	This call copies the current EGA.SYS FontInfo structure to a user
;	buffer pointed to by es:bx.  Based on this information, the caller can
;	determine the need to save alpha font data in plane 2, as well as
;	determine the most efficient way to do it.  For example, font ID's
;	001h and 002h need not be saved since a copy exists in the EGA ROM.
;
;	Graphics font data is maintained by the EGA BIOS via int 01Fh and int
;	043h and does not exist in the EGA hardware.  Since these interrupts
;	can be directly manipulated for Save/Restore operations, EGA.SYS does
;	not attempt to record any graphics font information.
;
;	FontInfo format:
;
;	FontInfo	struc
;	  fibank0	db	?
;	  fibank1	db	?
;	  fibank2	db	?
;	  fibank3	db	?
;	FontInfo	ends
;
;	where each fiBankx contains a byte defined as follows:
;
;	000h	-  user font in specified bank
;	001h	-  08x14 ROM font in specified bank (Default for EGA)
;	002h	-  08x08 ROM font in specified bank
;	004h	-  08x16 ROM font in specified bank (Default for VGA)
;	0FFh	-  empty bank
;
; ENTRY
;	es:bx	-> user buffer for FontInfo
; EXIT
;	none
; DESTROYS
;	ax
;

	assume	cs:CODE, ds:CODE, es:nothing, ss:nothing

GetFontInfo	proc	near

	mov	ax,word ptr [FontBank][0]
	mov	es:[bx],ax
	mov	ax,word ptr [FontBank][2]
	mov	es:[bx][2],ax
	ret

GetFontInfo	endp

;
; GetInBiosFlag - return segment:offset of the InBiosFlag
;
; ENTRY
;	none
; EXIT
;	es:bx	->  InBiosFlag
; DESTROYS
;	none
;

	assume	cs:CODE, ds:CODE, es:nothing, ss:nothing

GetInBiosFlag	proc	near

	mov	bx,cs
	mov	es,bx
	assume	es:CODE
	mov	bx,offset fInBIOS
	ret

GetInBiosFlag	endp

	subttl	InquireDriver
	page

;
; InquireDriver - return ptr to driver version number
;
; ENTRY
;	none
; EXIT
;	es:bx	-> DriverInfo data area
; DESTROYS
;	None
;

	assume	cs:CODE, ds:CODE, es:nothing, ss:nothing

InquireDriver	proc	near

	mov	bx,ds
	mov	es,bx
	assume	es:CODE
	mov	bx,offset DriverInfo
	ret

InquireDriver	endp

ifdef	Sys
	include	int10rtn.inc		; Contains Int10Routine and Int2FRoutine
					; Also in load.inc for .COM version
endif	; Sys

EndOfResidentCode	label	near

;
; I N C L U D E S
;

	include	load.inc

CODE	ends

	end	main
=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\driver\driver.asm ===
;/*
; *                      Microsoft Confidential
; *                      Copyright (C) Microsoft Corporation 1991
; *                      All Rights Reserved.
; */
	PAGE 64,132
;
; External block device driver
; Hooks into existing routines in IBMBIO block driver via Int 2F mpx # 8.
; This technique minimizes the size of the driver.
;

; Revised Try_h: to test for flagheads  as msg was being displayed on bds_formfactor
;  this caused the bds_formfactor to be set in the Head
; Revised the # of sectors/cluster for F0h to 1
;
;	Revision History
;	================
;
;	M000	SR	10/19/90	Changed F_Val to handle the formfactor
;				value 9 for 2.88M media.
;
;


code segment byte public
assume cs:code,ds:code,es:code

;
.xlist
include SYSMSG.INC			;equates and macros
.list
MSG_UTILNAME <DRIVER>

iTEST = 0
;---------------------------------------------------
;
;	Device entry point
;
DSKDEV	LABEL	WORD
	DW	-1,-1			; link to next device
	DW	0000100001000000B	; bit 6 indicates DOS 3.20 driver
	DW	STRATEGY
	DW	DSK$IN
DRVMAX	DB	1

;
; Various equates
;
CMDLEN	equ	0			;LENGTH OF THIS COMMAND
UNIT	equ	1			;SUB UNIT SPECIFIER
CMD	equ	2			;COMMAND CODE
STATUS	equ	3			;STATUS
MEDIA	equ	13			;MEDIA DESCRIPTOR
TRANS	equ	14			;TRANSFER ADDRESS
COUNT	equ	18			;COUNT OF BLOCKS OR CHARACTERS
START	equ	20			;FIRST BLOCK TO TRANSFER
EXTRA	equ	22			;Usually a pointer to Vol Id for error 15
CONFIG_ERRMSG  equ     23		; To set this field to Non-zero
					;	to display "Error in CONFIG.SYS..."

PTRSAV	DD	0


STRATP PROC FAR

STRATEGY:
	MOV	WORD PTR CS:[PTRSAV],BX
	MOV	WORD PTR CS:[PTRSAV+2],ES
	RET

STRATP ENDP

DSK$IN:
	push	es
	push	bx
	push	ax
	les	bx,cs:[ptrsav]
	cmp	byte ptr es:[bx].cmd,0
	jnz	Not_Init
	jmp	DSK$INIT

not_init:
; Because we are passing the call onto the block driver in IBMBIO, we need to
; ensure that the unit number corresponds to the logical (DOS) unit number, as
; opposed to the one that is relevant to this device driver.
	mov	al,byte ptr cs:[DOS_Drive_Letter]
	mov	byte ptr es:[bx].UNIT,al
	mov	ax,0802H
	int	2fH
;
; We need to preserve the flags that are returned by IBMBIO. YUK!!!!!
;
	pushf
	pop	bx
	add	sp,2
	push	bx
	popf

exitp	proc	far
DOS_Exit:
	pop	ax
	POP	BX
	POP	ES
	RET				;RESTORE REGS AND RETURN
EXITP	ENDP

TINY_BPB	=	1	; use short form of bpb.inc
TINY_BDS	=	1	; use short form of msbds.inc
include	bpb.inc				; include BPB structure
include msbds.inc			; include BDS structures

BDS	DW	-1			;Link to next structure
	DW	-1
	DB	1			;Int 13 Drive Number
	DB	3			;Logical Drive Letter
FDRIVE:
	DW	512			;Physical sector size in bytes
	DB	-1			;Sectors/allocation unit
	DW	1			;Reserved sectors for DOS
	DB	2			;No. allocation tables
	DW	64			;Number directory entries
	DW	9*40			;Number sectors (at 512 bytes ea.)
	DB	00000000B		;Media descriptor, initially 00H.
	DW	2			;Number of FAT sectors
	DW	9			;Sector limit
	DW	1			;Head limit
	DW	0			;Hidden sector count
	dw	0			; Hidden sector count (High)
	dw	0			; Number sectors (low)
	dw	0			; Number sectors (high)
	DB	0			; TRUE => Large fats
OPCNT1	DW	0			;Open Ref. Count
	DB	2			;Form factor
FLAGS1	DW	0020H			;Various flags
	DW	80			;Number of cylinders in device
RecBPB1 DW	512			; default is that of 3.5" disk
	DB	2
	DW	1
	DB	2
	DW	70h
	DW	2*9*80
	DB	0F9H
	DW	3
	DW	9
	DW	2
	DW	0
	dw	0	
	dw	0	
	dw	0	
	db	6 dup (0)		;AC000;
TRACK1	DB	-1			;Last track accessed on this drive
TIM_LO1 DW	-1			;Keep these two contiguous (?)
TIM_HI1 DW	-1
VOLID1	DB	"NO NAME    ",0         ;Volume ID for this disk
VOLSER	dd	0	
FILE_ID db	"FAT12   ",0            ;

DOS_Drive_Letter	db	?	; Logical drive associated with this unit

ENDCODE LABEL WORD			; Everything below this is thrown away
					; after initialisation.

DskDrv	    dw	    offset FDRIVE	; "array" of BPBs

; For system parser;

FarSW	equ	0	; Near call expected

DateSW	equ	0	; Check date format

TimeSW	equ	0	; Check time format

FileSW	equ	0	; Check file specification

CAPSW	equ	0	; Perform CAPS if specified

CmpxSW	equ	0	; Check complex list

NumSW	equ	1	; Check numeric value

KeySW	equ	0	; Support keywords

SwSW	equ	1	; Support switches

Val1SW	equ	1	; Support value definition 1

Val2SW	equ	1	; Support value definition 2

Val3SW	equ	0	; Support value definition 3

DrvSW	equ	0	; Support drive only format

QusSW	equ	0	; Support quoted string format
;---------------------------------------------------
;.xlist
assume ds:nothing				;!!!Parse.ASM sometimes assumes DS
                                                ;      to access its own variable!!!
        include version.inc
	include PARSE.ASM			;together with PSDATA.INC
assume ds:code			
;.list
;Control block definitions for PARSER.
;---------------------------------------------------
Parms	label	byte
	dw	Parmsx
	db	0		;No extras

Parmsx	label	byte
	db	0,0		;No positionals
	db	5		;5 switch control definitions
	dw	D_Control	;/D
	dw	T_Control	;/T
	dw	HS_Control	;/H, /S
	dw	CN_Control	;/C, /N
	dw	F_Control	;/F
	db	0		;no keywords

D_Control	label	word
	dw	8000h		;numeric value
	dw	0		;no functions
	dw	Result_Val	;result buffer
	dw	D_Val		;value defintions
	db	1		;# of switch in the following list
Switch_D	label	byte
	db	'/D',0          ;

D_Val	label	byte
	db	1		;# of value defintions
	db	1		;# of ranges
	db	1		;Tag value when match
;	 dd	 0,255		 ;
	dd	0,127		;Do not allow a Fixed disk.

Result_Val	label	byte
	db	?
Item_Tag	label	byte
	db	?
Synonym_ptr	label	word
	dw	?		;es:offset -> found Synonym
RV_Byte 	label	byte
RV_Word 	label	word
RV_Dword	label	dword
	dd	?		;value if number, or seg:off to string

T_Control	label	word
	dw	8000h		;numeric value
	dw	0		;no functions
	dw	Result_Val	;result buffer
	dw	T_Val		;value defintions
	db	1		;# of switch in the following list
Switch_T	label	byte
	db	'/T',0          ;

T_Val	label	byte
	db	1		;# of value defintions
	db	1		;# of ranges
	db	1		;Tag value when match
	dd	1,999

HS_Control	label	word
	dw	8000h		;numeric value
	dw	0		;no function flag
	dw	Result_Val	;Result_buffer
	dw	HS_VAL		;value definition
	db	2		;# of switch in following list
Switch_H	label	byte
	db	'/H',0          ;
Switch_S	label	byte
	db	'/S',0          ;

HS_Val	 label	 byte
	db	1		;# of value defintions
	db	1		;# of ranges
	db	1		;Tag value when match
	dd	1,99

CN_Control	 label	 word
	dw	0		;no match flags
	dw	0		;no function flag
	dw	Result_Val	;no values returned
	dw	NoVal		;no value definition
;	 db	 2		 ;# of switch in following list
	db	1
Switch_C	label	byte
	db	'/C',0          ;
;Switch_N	 label	 byte	 ;
;	 db	 '/N',0          ;

Noval	db	0

F_Control	label	word
	dw	8000h		;numeric value
	dw	0		;no function flag
	dw	Result_Val	;Result_buffer
	dw	F_VAL		;value definition
	db	1		;# of switch in following list
Switch_F	label	byte
	db	'/F',0          ;

F_Val		label	byte
	db	2		;# of value definitions (Order dependent)
	db	0		;no ranges
	db	5		;# of numeric choices ;M000; 5 now
F_Choices	label	byte
	db	1		;1st choice (item tag)
	dd	0		;0
	db	2		;2nd choice
	dd	1		;1
	db	3		;3rd choice
	dd	2		;2
	db	4		;4th choice
	dd	7		;7
	db	5		;5th choice ;M000
	dd	9		;9 ;M000


;System messages handler data
;Put the data here
.sall
MSG_SERVICES <MSGDATA>

;Place the messages here
MSG_SERVICES <DRIVER.CL1, DRIVER.CL2, DRIVER.CLA>

;Put messages handler code here.
MSG_SERVICES <LOADmsg,DISPLAYmsg,CHARmsg>
.xall

;
; Sets ds:di -> BDS for this drive
;
SetDrive:
	push	cs
	pop	ds
	mov	di,offset BDS
	ret

;
; Place for DSK$INIT to exit
;
ERR$EXIT:
	MOV	AH,10000001B			   ;MARK ERROR RETURN
	lds	bx, cs:[ptrsav]
	mov	byte ptr ds:[bx.MEDIA], 0	   ; # of units
	mov	word ptr ds:[bx.CONFIG_ERRMSG], -1 ;Show IBMBIO error message too.
	JMP	SHORT ERR1

Public EXIT
EXIT:	MOV	AH,00000001B
ERR1:	LDS	BX,CS:[PTRSAV]
	MOV	WORD PTR [BX].STATUS,AX ;MARK OPERATION COMPLETE

RestoreRegsAndReturn:
	POP	DS
	POP	BP
	POP	DI
	POP	DX
	POP	CX
	POP	AX
	POP	SI
	jmp	dos_exit


drivenumb   db	    5
cyln	    dw	    80
heads	    dw	    2
ffactor     db	    2
slim	    dw	    9

Switches    dw	0

Drive_Let_Sublist	label	dword
	db     11	;length of this table
	db	0	;reserved
	dw	D_Letter;
D_Seg	dw	?	;Segment value. Should be CS
	db	1	;DRIVER.SYS has only %1
	db	00000000b ;left align(in fact, Don't care), a character.
	db	1	;max field width 1
	db	1	;min field width 1
	db	' '     ;character for pad field (Don't care).

D_Letter	db	"A"

if iTEST
Message:
	push	ax
	push	ds
	push	cs
	pop	ds
	mov	ah,9
	int	21h
	pop	ds
	pop	ax
	ret
extrn	nodrive:byte,loadokmsg:byte,letter:byte, badvermsg:byte
endif


if iTEST
%OUT Testing On
initmsg     db	    "Initializing device driver",13,10,"$"
stratmsg    db	    "In strategy of driver",10,13,"$"
dskinmsg    db	    "In DSKIN part of driver",10,13,"$"
outinitmsg  db	    "Out of init code ",10,13,"$"
exitmsg     db	    "Exiting from driver",10,13,"$"
parsemsg    db	    "Parsing switches",10,13,"$"
errmsg	    db	    "Error occurred",10,13,"$"
linemsg     db	    "Parsed line",10,13,"$"
int2fokmsg  db	    "****************Int2f loaded**************",10,13,"$"
mediamsg    db	    "Media check ok",10,13,"$"
getbpbmsg   db	    "getbpb ok",10,13,"$"
iookmsg     db	    "Successful I/O",10,13,"$"
parseokmsg  db	    "Parsing done fine",10,13,"$"
nummsg	    db	    "Number read is "
number	    db	    "00  ",10,13,"$"
drvmsg	    db	    "Process drive "
driven	    db	    "0",10,13,"$"
cylnmsg     db	    "Process cylinder ",10,13,"$"
slimmsg     db	    "Process sec/trk ",10,13,"$"
hdmsg	    db	    "Process head "
hdnum	    db	    "0",10,13,"$"
ffmsg	    db	    "Process form factor "
ffnum	    db	    "0",10,13,"$"
nxtmsg	    db	    "Next switch ",10,13,"$"
msg48tpi    db	    "Got a 48 tpi drive",10,13,"$"

ENDIF

DSK$INIT:
	PUSH	SI
	PUSH	AX
	PUSH	CX
	PUSH	DX
	PUSH	DI
	PUSH	BP
	PUSH	DS

	LDS	BX,CS:[PTRSAV]		;GET POINTER TO I/O PACKET

	MOV	AL,BYTE PTR DS:[BX].UNIT    ;AL = UNIT CODE
	MOV	AH,BYTE PTR DS:[BX].MEDIA   ;AH = MEDIA DESCRIP
	MOV	CX,WORD PTR DS:[BX].COUNT   ;CX = COUNT
	MOV	DX,WORD PTR DS:[BX].START   ;DX = START SECTOR

	LES	DI,DWORD PTR DS:[BX].TRANS

	PUSH	CS
	POP	DS

	ASSUME	DS:CODE

	cld
	push	cs			; Initialize Segment of Sub list.
	pop	[D_Seg] 
	call	SYSLOADMSG		; linitialize message handler
	jnc	GoodVer 		; Error. Do not install driver.
	mov	cx, 0			; No substitution
	mov	dh, -1			; Utility message
	call	Show_Message		; Show message
	jmp	short err$exitj2	;  and exit

;; check for correct DOS version
;	 mov	 ah,30h
;	 int	 21H

;	 cmp	 ax,expected_version
;	 je	 GoodVer

;	cmp	al,DOSVER_HI
;	jnz	BadDOSVer
;	cmp	ah,DOSVER_LO
;	jz	GoodVer

;BadDOSVer:
;	 Mov	 dx,offset BadVerMsg
;	 call	 message
;	 jmp	 err$exitj2		 ; do not install driver

GoodVer:
	mov	ax,0800H
	int	2fH			    ; see if installed
	cmp	al,0FFH
	jnz	err$exitj2		    ; do not install driver if not present
	lds	bx,[ptrsav]
	mov	si,word ptr [bx].count	    ; get pointer to line to be parsed
	mov	ax,word ptr [bx].count+2
	mov	ds,ax
	call	Skip_Over_Name		    ; skip over file name of driver
	mov	di,offset BDS		    ; point to BDS for drive
	push	cs
	pop	es			    ; es:di -> BDS
	Call	ParseLine
	jc	err$exitj2
	LDS	BX,cs:[PTRSAV]
	mov	al,byte ptr [bx].extra	; get DOS drive letter
	mov	byte ptr es:[di].bds_drivelet,al
	mov	cs:[DOS_Drive_Letter],al
	add	al,"A"
;	 mov	 cs:[letter],al 	 ; set up for printing final message
	mov	cs:[D_Letter], al
	call	SetDrvParms		; Set up BDS according to switches
	jc	err$exitj2
	mov	ah,8			; Int 2f multiplex number
	mov	al,1			; install the BDS into the list
	push	cs
	pop	ds			; ds:di -> BDS for drive
	mov	di,offset BDS
	int	2FH
	lds	bx,dword ptr cs:[ptrsav]
	mov	ah,1
	mov	cs:[DRVMAX],ah
	mov	byte ptr [bx].media,ah
	mov	ax,offset ENDCODE
	mov	word ptr [bx].TRANS,AX	    ; set address of end of code
	mov	word ptr [bx].TRANS+2,CS
	mov	word ptr [bx].count,offset DskDrv
	mov	word ptr [bx].count+2,cs

	push	dx
	push	cs
	pop	ds
	mov	si, offset Drive_Let_SubList  ;AC000;
	mov	ax, LOADOK_MSG_NUM	;load ok message
	mov	cx, 1			; 1 substitution
	mov	dh, -1			; utility message
	call	Show_Message
;	 mov	 dx,offset loadokmsg
;	 call	 message
	pop	dx
	jmp	EXIT

err$exitj2:
	stc
	jmp	err$exit

;
; Skips over characters at ds:si until it hits a `/` which indicates a switch
; J.K. If it hits 0Ah or 0Dh, then will return with SI points to that character.
Skip_Over_Name:
	call	scanblanks
loop_name:
	lodsb
	cmp	al,CR		
	je	End_SkipName	
	cmp	al,LF		
	je	End_SkipName	
	cmp	al,'/'
	jnz	loop_name
End_SkipName:			
	dec	si			    ; go back one character
	RET

;ParseLine:
;	 push	 di
;	 push	 ds
;	 push	 si
;	 push	 es
;Next_Swt:
;IF iTEST
;	 mov	 dx,offset nxtmsg
;	 call	 message
;ENDIF
;	 call	 ScanBlanks
;	 lodsb
;	 cmp	 al,'/'
;	 jz	 getparm
;	 cmp	 al,13		     ; carriage return
;	 jz	 done_line
;	 CMP	 AL,10		     ; line feed
;	 jz	 done_line
;	 cmp	 al,0		     ; null string
;	 jz	 done_line
;	 mov	 ax,-2		     ; mark error invalid-character-in-input
;	 stc
;	 jmp	 short exitparse
;
;getparm:
;	 call	 Check_Switch
;	 mov	 cs:Switches,BX      ; save switches read so far
;	 jnc	 Next_Swt
;	 cmp	 ax,-1		     ; mark error number-too-large
;	 stc
;	 jz	 exitparse
;	 mov	 ax,-2		     ; mark invalid parameter
;	 stc
;	 jmp	 short exitparse
;
;done_line:
;	 test	 cs:Switches,flagdrive	   ; see if drive specified
;	 jnz	 okay
;	 push	 dx
;	 mov	 ax, 2
;	 call	 Show_Message
;	 mov	 dx,offset nodrive
;	 call	 message
;	 pop	 dx
;	 mov	 ax,-3		     ; mark error no-drive-specified
;	 stc
;	 jmp	 short exitparse
;
;okay:
;	 call	 SetDrive			; ds:di points to BDS now.
;	 mov	 ax,cs:Switches
;	 and	 ax,fChangeline+fNon_Removable	; get switches for Non_Removable and Changeline
;	 or	 ds:[di].flags,ax
;	 xor	 ax,ax		     ; everything is fine
;
;;
;; Can detect status of parsing by examining value in AX.
;;	 0  ==>  Successful
;;	 -1 ==>  Number too large
;;	 -2 ==>  Invalid character in input
;;	 -3 ==>  No drive specified
;
;	 clc
;exitparse:
;	 pop	 es
;	 pop	 si
;	 pop	 ds
;	 pop	 di
;	 ret



ParseLine	proc	near
;In) DS:SI -> Input string
;    ES = CS
;    ES:DI -> BDS table inside this program
;
;Out)
;	if successfule, then {	AX will be set according to the switch
;				flag value.  BDS.Flag, Drivenumb, cylin,
;				slim, heads ffactor are set }
;	else
;	   {
;	    If (no drive specified) then { display messages };
;	    Set carry;
;	   }
;
;Subroutine to be called:
;	SYSPARSE:NEAR, SHOW_MESSAGE:NEAR, GET_RESULT:NEAR
;
;Logic:
;{	While (Not end_of_Line)
;	 {
;	  SYSPARSE ();
;	  if (no error) then
;	      GET_RESULT ()
;	else
;	      Set carry;
;	  };
;
;	if (carry set) then Exit;	/* Initialization failed */
;	if (No drive number entered)	/* Drive number is a requirement */
;	 then { Show_Message ();
;		exit;
;	      };
;
	assume	ds:nothing		;make sure
	push	di			;save BDS pointer
	mov	di, offset PARMS	;now, es:di -> parse control definition
SysP_While:		
	xor	cx, cx			; I don't have positionals.
	xor	dx, dx	
	call	SYSPARSE
	cmp	ax, $P_RC_EOL		;end of line?
	je	SysP_End
	cmp	ax, $P_NO_ERROR 	;no error?
	jne	SysP_Fail
	call	Get_Result
	jmp	SysP_While
SysP_End:		
	test	Switches, FLAGDRIVE	;drive number specified?
	jnz	SysP_Ok 		;Drive number is a requirement
	push	ds	
	mov	ax, NODRIVE_MSG_NUM	;no drive specification
	mov	cx, 0			;no substitutions
	mov	dh, -1			;utility message
	call	Show_Message
	pop	ds	
	jmp short SysP_Err
SysP_Fail:		
	mov	dh, 2			; parse error
	mov	cx, 0	
	call	Show_Message		; Show parse error
SysP_Err:		
	stc		
	jmp short PL_Ret
SysP_Ok:		
	clc		
PL_Ret: 		
	pop	di			;restore BDS pointer
	ret		
ParseLine	endp

;
Get_Result	proc	near
;In) A successful result of SYSPARSE in Result_Val
;    es = cs, ds = command line segment
;Out)
;   Switches set according to the user option.
;   Drivenumb, Cyln, Heads, Slim, ffactor set if specified.
;Logic)
;   Switch (Synonym_Ptr)
;	{ case Switch_D: Switches = Switches | FLAGDRIVE; /* Set switches */
;			 Drivenumb = Reg_DX.Value_L;
;			 break;
;
;	  case Switch_T: Switches = Switches | Flagcyln;
;			 Cyln	= Reg_DX.Value_L;
;			 break;
;
;	  case Switch_H: Switches = Switches | Flagheads;
;			 Heads	= Reg_DX.Value_L;
;			 break;
;
;	  case Switch_S: Switches = Switches | FlagSecLim;
;			 Slim	= Reg_DX.Value_L;
;			 break;
;
;	  case Switch_C: Switches = Switches | fChangeline;
;			 break;
;
;;	   case Switch_N: Switches = Switches | fNon_Removable;
;;			  break;
;
;	  case Switch_F: Switches = Switches | Flagff;
;			 Reg_DX = (Reg_DX.ITEM_Tag - 1)*5;/*Get the offset of
;							  /*the choice.
;			 ffactor = byte ptr (F_Choices + DX + 1);
;					/*Get the value of it */
;			 break;
;
;	}
;


	mov	ax, Synonym_Ptr 
	push	ax			; save Synonym_ptr
	cmp	ax, offset Switch_D
	jne	Stch_T	
	or	Switches, FLAGDRIVE
	mov	al, RV_Byte
	mov	Drivenumb, al
	jmp	short GR_Ret
Stch_T: 		
	cmp	ax, offset Switch_T
	jne	Stch_H	
	or	Switches, FLAGCYLN
	mov	ax, RV_Word
	mov	Cyln, ax
	jmp	short GR_Ret
Stch_H: 		
	cmp	ax, offset Switch_H
	jne	Stch_S	
	or	Switches, FLAGHEADS
	mov	ax, RV_Word
	mov	Heads, ax
	jmp	short GR_Ret
Stch_S: 		
	cmp	ax, offset Switch_S
	jne	Stch_C	
	or	Switches, FLAGSECLIM
	mov	ax, RV_Word
	mov	Slim, ax
	jmp	short GR_Ret
Stch_C: 		
	cmp	ax, offset Switch_C
;	 jne	 Stch_N 		 ;
	jne	Stch_F	
	or	Switches, fCHANGELINE
	jmp	short GR_Ret
;Stch_N:				 ;
;	 cmp	 ax, offset Switch_N	 ;
;	 jne	 Stch_F 		 ;
;	 or	 Switches, fNON_REMOVABLE  ;
;	 jmp	 GR_Ret 		 ;
Stch_F: 		
	cmp	ax, offset Switch_F
	jne	GR_Not_Found_Ret	;error in SYSPARSE
	or	Switches, FLAGFF
	push	si	
	mov	si, offset F_Choices
	xor	ax, ax	
	mov	al, Item_Tag
	dec	al	
	mov	cl, 5	
	mul	cl	
	add	si, ax	
	mov	al, byte ptr es:[si+1]	;get the result of choices
	mov	ffactor, al		;set form factor
	pop	si	
GR_Ret: 		
	pop	ax			; Restore Synonym ptr
	push	di			; Save di
	push	ax	
	pop	di	
	mov	byte ptr es:[di], ' '   ;We don't have this switch any more.
	pop	di	
	jmp	short Gr_Done_Ret
GR_Not_Found_Ret:
	pop	ax			;adjust stack
GR_Done_Ret:
	ret		
Get_Result	endp


;
; Scans an input line for blank or tab characters. On return, the line pointer
; will be pointing to the next non-blank character.
;
ScanBlanks:
	lodsb
	cmp	al,' '
	jz	ScanBlanks
	cmp	al,9		    ; Tab character
	jz	ScanBlanks
	dec	si
	ret

;
; Gets a number from the input stream, reading it as a string of characters.
; It returns the number in AX. It assumes the end of the number in the input
; stream when the first non-numeric character is read. It is considered an error
; if the number is too large to be held in a 16 bit register. In this case, AX
; contains -1 on return.
;
;GetNum:
;	 push	 bx
;	 push	 dx
;	 xor	 ax,ax
;	 xor	 bx,bx
;	 xor	 dx,dx
;
;next_char:
;	 lodsb
;	 cmp	 al,'0'              ; check for valid numeric input
;	 jb	 num_ret
;	 cmp	 al,'9'
;	 ja	 num_ret
;	 sub	 al,'0'
;	 xchg	 ax,bx		     ; save intermediate value
;	 push	 bx
;	 mov	 bx,10
;	 mul	 bx
;	 pop	 bx
;	 add	 al,bl
;	 adc	 ah,0
;	 xchg	 ax,bx		     ; stash total
;	 jc	 got_large
;	 cmp	 dx,0
;	 jz	 next_char
;got_large:
;	 mov	 ax,-1
;	 jmp	 short get_ret
;
;num_ret:
;	 mov	 ax,bx
;	 dec	 si		     ; put last character back into buffer
;
;get_ret:
;	 pop	 dx
;	 pop	 bx
;	 ret


;
; Processes a switch in the input. It ensures that the switch is valid, and
; gets the number, if any required, following the switch. The switch and the
; number *must* be separated by a colon. Carry is set if there is any kind of
; error.
;
;Check_Switch:
;	 lodsb
;	 and	 al,0DFH	     ; convert it to upper case
;	 cmp	 al,'A'
;	 jb	 err_swtch
;	 cmp	 al,'Z'
;	 ja	 err_swtch
;	 mov	 cl,cs:switchlist    ; get number of valid switches
;	 mov	 ch,0
;	 push	 es
;	 push	 cs
;	 pop	 es			 ; set es:di -> switches
;	 push	 di
;	 mov	 di,1+offset switchlist  ; point to string of valid switches
;	 repne	 scasb
;	 pop	 di
;	 pop	 es
;	 jnz	 err_swtch
;	 mov	 ax,1
;	 shl	 ax,cl		 ; set bit to indicate switch
;	 mov	 bx,cs:switches
;	 or	 bx,ax		 ; save this with other switches
;	 mov	 cx,ax
;	 test	 ax,7cH 	 ; test against switches that require number to follow
;	 jz	 done_swtch
;	 lodsb
;	 cmp	 al,':'
;	 jnz	 reset_swtch
;	 call	 ScanBlanks
;	 call	 GetNum
;	 cmp	 ax,-1		 ; was number too large?
;	 jz	 reset_swtch
;IF iTEST
;	 push	 ax
;	 add	 al,'0'
;	 add	 ah,'0'
;	 mov	 cs:number,ah
;	 mov	 cs:number+1,al
;	 mov	 dx,offset nummsg
;	 call	 message
;	 pop	 ax
;ENDIF
;	 call	 Process_Num
;
;done_swtch:
;	 ret
;
;reset_swtch:
;	 xor	 bx,cx			 ; remove this switch from the records
;err_swtch:
;	 stc
;	 jmp	 short done_swtch

;
; This routine takes the switch just input, and the number following (if any),
; and sets the value in the appropriate variable. If the number input is zero
; then it does nothing - it assumes the default value that is present in the
; variable at the beginning.
;
;Process_Num:
;	 push	 ds
;	 push	 cs
;	 pop	 ds
;	 test	 Switches,cx	     ; if this switch has been done before,
;	 jnz	 done_ret	     ; ignore this one.
;	 test	 cx,flagdrive
;	 jz	 try_f
;	 mov	 drivenumb,al
;IF iTEST
;	 add	 al,"0"
;	 mov	 driven,al
;	 mov	 dx,offset drvmsg
;	 call	 message
;ENDIF
;	 jmp	 short done_ret
;
;try_f:
;	 test	 cx,flagff
;	 jz	 try_t
;	 mov	 ffactor,al
;IF iTEST
;	 add	 al,"0"
;	 mov	 ffnum,al
;	 mov	 dx,offset ffmsg
;	 call	 message
;ENDIF
;
;try_t:
;	 cmp	 ax,0
;	 jz	 done_ret	     ; if number entered was 0, assume default value
;	 test	 cx,flagcyln
;	 jz	 try_s
;	 mov	 cyln,ax
;IF iTEST
;	 mov	 dx,offset cylnmsg
;	 call	 message
;ENDIF
;	 jmp	 short done_ret
;
;try_s:
;	 test	 cx,flagseclim
;	 jz	 try_h
;	 mov	 slim,ax
;IF iTEST
;	 mov	 dx,offset slimmsg
;	 call	 message
;ENDIF
;	 jmp	 short done_ret
;
;; Switch must be one for number of Heads.
;try_h:
;	 test	 cx,flagheads
;	 jz	 done_ret
;	 mov	 heads,ax
;IF iTEST
;	 add	 al,"0"
;	 mov	 hdnum,al
;	 mov	 dx,offset hdmsg
;	 call	 message
;ENDIF
;
;done_ret:
;	 pop	 ds
;	 ret

;
; SetDrvParms sets up the recommended BPB in each BDS in the system based on
; the form factor. It is assumed that the BPBs for the various form factors
; are present in the BPBTable. For hard files, the Recommended BPB is the same
; as the BPB on the drive.
; No attempt is made to preserve registers since we are going to jump to
; SYSINIT straight after this routine.
;
SetDrvParms:
	push	cs
	pop	es
	xor	bx,bx
	call	SetDrive		; ds:di -> BDS
	mov	bl,cs:[ffactor]
	mov	byte ptr [di].bds_formfactor,bl   ; replace with new value
formfcont:
	mov	bl,[di].bds_formfactor
	cmp	bl,ff48tpi
	jnz	Got_80_cyln
IF iTEST
	mov	dx,offset msg48tpi
	call	message
ENDIF
	mov	cx,40
	mov	cs:[cyln],cx
Got_80_cyln:
	shl	bx,1			; bx is word index into table of BPBs
	mov	si,ds:word ptr BPBTable[bx]	; get address of BPB
Set_RecBPB:
	add	di,BDS_RBPB		; es:di -> Recommended BPB
	mov	cx,size A_BPB - 12	; don't move whole thing!!!!!
	cld
	repe	movsb

	call	Handle_Switches 	; replace with 'new' values as
					; specified in switches.
;
; We need to set the media byte and the total number of sectors to reflect the
; number of heads. We do this by multiplying the number of heads by the number
; of 'sectors per head'. This is not a fool-proof scheme!!
;
	mov	ax,[di].BDS_RBPB.BPB_TOTALSECTORS  ; this is OK for two heads
	sar	ax,1			; ax contains # of sectors/head
	mov	cx,[di].BDS_RBPB.BPB_HEADS
	dec	cl			; get it 0-based
	sal	ax,cl
	jc	Set_All_Done_BRG	; We have too many sectors - overflow!!

	mov	[di].BDS_RBPB.BPB_TOTALSECTORS,ax
	cmp	cl,1

; We use media descriptor byte F0H for any type of medium that is not currently
; defined i.e. one that does not fall into the categories defined by media
; bytes F8H, F9H, FCH-FFH.

	JE	HEAD_2_DRV

	MOV	AL, 1				;1 sector/cluster
	MOV	BL, [DI].BDS_RBPB.BPB_MEDIADESCRIPTOR
	CMP	BYTE PTR [DI].bds_formfactor, ffOther
	JE	GOT_CORRECT_MEDIAD
	MOV	CH, BYTE PTR [DI].bds_formfactor
	CMP	CH, ff48tpi
	JE	SINGLE_MEDIAD
	MOV	BL, 0F0h
	JMP	short GOT_CORRECT_MEDIAD

Set_All_Done_BRG:
	jmp	short Set_All_Done

SINGLE_MEDIAD:
	CMP	[DI].BDS_RBPB.BPB_SECTORSPERTRACK, 8	;8 SEC/TRACK?
	JNE	SINGLE_9_SEC
	MOV	BL, 0FEh
	JMP	short GOT_CORRECT_MEDIAD

SINGLE_9_SEC:
	MOV	BL, 0FCh
	JMP	short GOT_CORRECT_MEDIAD

HEAD_2_DRV:
	MOV	BL, 0F0h		;default 0F0h
	MOV	AL, 1			;1 sec/cluster
	CMP	BYTE PTR [DI].bds_formfactor, ffOther
	JE	GOT_CORRECT_MEDIAD
	CMP	BYTE PTR [DI].bds_formfactor, ff48tpi
	JNE	NOT_48TPI
	MOV	AL, 2
	CMP	[DI].BDS_RBPB.BPB_SECTORSPERTRACK, 8	;8 SEC/TRACK?
	JNE	DOUBLE_9_SEC
	MOV	BL, 0FFh
	JMP	short GOT_CORRECT_MEDIAD

DOUBLE_9_SEC:
	MOV	BL, 0FDh
	JMP	short GOT_CORRECT_MEDIAD

NOT_48TPI:
	CMP	BYTE PTR [DI].bds_formfactor, ff96tpi
	JNE	NOT_96TPI
	MOV	AL, 1			;1 sec/cluster
	MOV	BL, 0F9h
	JMP	short GOT_CORRECT_MEDIAD

NOT_96TPI:
	CMP	BYTE PTR [DI].bds_formfactor, ffSmall	;3-1/2, 720kb
	JNE	GOT_CORRECT_MEDIAD	;Not ffSmall. Strange Media device.
	MOV	AL, 2			;2 sec/cluster
	MOV	BL, 0F9h


Got_Correct_Mediad:
	mov	[di].BDS_RBPB.BPB_SECTORSPERCLUSTER,al
	mov	[di].BDS_RBPB.BPB_MEDIADESCRIPTOR,bl
; Calculate the correct number of Total Sectors on medium
	mov	ax,[di].bds_ccyln
	mov	bx,[di].BDS_RBPB.BPB_HEADS
	mul	bx
	mov	bx,[di].BDS_RBPB.BPB_SECTORSPERTRACK
	mul	bx
; AX contains the total number of sectors on the disk
	mov	[di].BDS_RBPB.BPB_TOTALSECTORS,ax
;J.K. For ffOther type of media, we should set Sec/FAT, and # of Root directory
;J.K. accordingly.
	cmp	byte ptr [di].bds_formfactor, ffOther  ;
	jne	Set_All_Ok	
	xor	dx, dx		
	dec	ax				; TOTALSECTORS - 1.
	mov	bx, 3				; Assume 12 bit fat.
	mul	bx				;  = 1.5 byte
	mov	bx, 2		
	div	bx		
	xor	dx, dx		
	mov	bx, 512 	
	div	bx		
	inc	ax		
	mov	[di].BDS_RBPB.BPB_SECTORSPERFAT, ax
	mov	[di].BDS_RBPB.BPB_ROOTENTRIES, 0E0h	; directory entry # = 224
Set_All_Ok:			
	clc
Set_All_Done:
	RET

;
; Handle_Switches replaces the values that were entered on the command line in
; config.sys into the recommended BPB area in the BDS.
; NOTE:
;	No checking is done for a valid BPB here.
;
Handle_Switches:
	call	setdrive		; ds:di -> BDS
	test	cs:switches,flagdrive
	jz	done_handle		    ; if drive not specified, exit
	mov	al,cs:[drivenumb]
	mov	byte ptr [di].bds_drivenum,al
;	 test	 cs:switches,flagcyln
;	 jz	 no_cyln
	mov	ax,cs:[cyln]
	mov	[di].bds_ccyln,ax
no_cyln:
	test	cs:switches,flagseclim
	jz	no_seclim
	mov	ax,cs:[slim]
	mov	[di].BDS_RBPB.BPB_SECTORSPERTRACK,ax
no_seclim:
	test	cs:switches,flagheads
	jz	done_handle
	mov	ax,cs:[heads]
	mov	[di].BDS_RBPB.BPB_HEADS,ax
done_handle:
	RET


Show_Message	proc	near
;In) AX = message number
;    DS:SI -> Substitution list if necessary.
;    CX = 0 or n depending on the substitution number
;    DH = -1 FOR UTILITY MSG CLASS, 2 FOR PARSE ERROR
;Out) Message displayed using DOS function 9 with no keyboard input.
	push	cs
	pop	ds
	mov	bx, -1
	mov	dl, 0		;no input
	call	SYSDISPMSG
	ret	
Show_Message	endp

;
; The following are the recommended BPBs for the media that we know of so
; far.

; 48 tpi diskettes

BPB48T	DW	512
	DB	2
	DW	1
	DB	2
	DW	112
	DW	2*9*40
	DB	0FDH
	DW	2
	DW	9
	DW	2
	DW	0

; 96tpi diskettes

BPB96T	DW	512
	DB	1
	DW	1
	DB	2
	DW	224
	DW	2*15*80
	DB	0F9H
	DW	7
	DW	15
	DW	2
	DW	0


; 3 1/2 inch diskette BPB

BPB35	DW	512
	DB	2
	DW	1			; Double sided with 9 sec/trk
	DB	2
	DW	70h
	DW	2*9*80
	DB	0F9H
	DW	3
	DW	9
	DW	2
	DW	0

bpb35h	dw	0200h
	db	01h
	dw	0001h
	db	02h
	dw	0e0h
	dw	0b40h
	db	0f0h
	dw	0009h
	dw	0012h
	dw	0002h
	dd	0
        dd      0


bpb288	dw	0200h
	db	02h
	dw	0001h
	db	02h
	dw	240
	dw	2*36*80
	db	0f0h
	dw	0009h
	dw	36
	dw	0002h
	dd	0
        dd      0


BPBTable    dw	    BPB48T		; 48tpi drives
	    dw	    BPB96T		; 96tpi drives
	    dw	    BPB35		; 3.5" drives
; The following are not supported, so we default to 3.5" layout
	    dw	    BPB35		; Not used - 8" drives
	    dw	    BPB35		; Not Used - 8" drives
	    dw	    BPB35		; Not Used - hard files
	    dw	    BPB35		; Not Used - tape drives
	    dw	    bpb35h		; 3.5" - 1.44 MB diskette
	    dw	    BPB35		; ERIMO
	    dw	    bpb288		; 2.88 mb diskette

switchlist  db	7,"FHSTDCN"         ; Preserve the positions of N and C.

; The following depend on the positions of the various letters in SwitchList

flagdrive   equ     0004H
flagcyln    equ     0008H
flagseclim  equ     0010H
flagheads   equ     0020H
flagff	    equ     0040H

;
;Equates for message number
NODRIVE_MSG_NUM   equ	2
LOADOK_MSG_NUM	  equ	3

code ends

end


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\ega\ega.inc ===
;
; NAME
;	EGA.SYS
;	Video Subsystem EGA Screen Device Driver
;
;	Copyright (C) Microsoft Corporation 1984-1990
;	Copyright (C) IBM 1986-1987
;	Portions Copyright (C) Hewlett-Packard Co. 1987 (by Jim Christy)
;
; WORK-IN-PROGRESS
;	To become version 2.10, this copy still needs :
;	[1] saving/restoring of memory latches in savecontext/restorecontext 
;	    subfunctions	DONE. Marc Pawliger (6/88)
;	[2] alternate save/restore logic in those functions whenever another,
;	    pre-2.0, version of this interface has been loaded on top of us
;	    (this MUST be detected by temporarily locking out our Int10Routine
;	    and issuing an InquireDriver call; only known culprit currently is
;	    Word 3.11) 
;	[3] fully functional VGA support 
;	[4] to be fully tested!
;
; PURPOSE
;	To provide a means of shadowing the state of the EGA's write-only
;	registers, so that the state of the card can be determined at
;	any instant, whether by a Real-mode-only mouse package, a Real-
;	mode pop-up (TSR), or a video manager as found in Windows or OS/2.
;
;	This is done by providing an Extended Int 10h interface (called
;	the EGA Register Interface) for new and existing Real-mode apps,
;	and by providing a set of device driver functions for the video
;	managers.
;
;	If "SYS" is defined, a device driver model is assembled.  Otherwise,
;	a COM file model is assumed, for TSR operation.  If "OS2" is
;	defined, then "SYS" will automatically be defined, and the generated
;	driver will contain the READ and WRITE functions required for OS/2.
;
; SYNOPSIS
;	EGA.SYS is an interface to the EGA card which allows all of the w/o
;	registers to be read from as well as written to.  This is a
;	requirement in order to use interrupt-driven graphics (such as cursor
;	update code).  Interrupt-driven graphics can be implemented on the EGA
;	if both the synchronous app and the interrupt code use the EGA.SYS
;	interface to the EGA registers.  The Microsoft mouse driver (versions
;	3.0 and greater) use the EGA.SYS interface to the EGA card.
;
;	This file contains the code that intercepts the int 10's and keeps
;	shadow maps of all EGA registers so that these registers can be read
;	as well as written.  Note that the primary consideration was speed,
;	some of the calls need to be made in tight graphics loops.  For this
;	reason, the interface may seem arbitrary and the code may seem
;	unnecessarily "tricky" at times.  I've tried to document all such
;	instances.  Also keep in mind that there is no error checking of
;	parameters.  Illegal parameters may cause unpredictable results,
;	including possibly a system crash.
;
; DESCRIPTION
;	The EGA.SYS interface spec follows.  For a more detailed description,
;	see each function header.  Bear in mind that function headers may
;	report a different register usage then that shown here.  They reflect
;	the state of the machine on entry and exit to that particular function
;	when in fact, some regs are restored by the dispatcher and thus do not
;	impact the caller.  For this release, ax, si, and ds will always be
;	restored by the dispatcher unless the spec indicates it specifically
;	returns a value in these regs.
;
;	In most of the following calls, dx is expected to point to a "register
;	id" which identifies the exact EGA chip to be addressed.  Since the 4
;	LSI chips contain multiple regs, the register index (usually in bl) is
;	also required for these chips.	The valid register ids for dx are:
;
;		port	chips/regs		 id
;		----	--------------		----
;		3x4h	crtc chip		000h
;		3C4h	sequencer chip		008h
;		3CEh	graphics chips		010h
;		3C0h	attribute chip		018h
;		3C2h	misc out reg		020h
;		3xAh	feature reg		028h
;		3CCh	gr 1 pos reg		030h
;		3CAh	gr 2 pos reg		038h
;
;
;	ReadReg - read a single EGA register from shadow maps
;
;	ENTRY
;	      ah      =  0F0h
;	      bx      =  register index 	      if reg id is indexd chip
;			 ignored		      if reg id is single reg
;	      dx      =  register id
;	EXIT
;	      bl      =  current register data
;	DESTROYS
;		None
;
;
;	WriteReg - write to a single EGA register and update shadow maps
;
;	ENTRY
;	      ah      =  0F1h
;	      bl      =  register index 	      if reg id is indexd chip
;			 data to be written	      if reg id is single reg
;	      bh      =  data to be written	      if reg id is indexd chip
;		      =  ignored		      if reg id is single reg
;	      dx      =  register id
;	EXIT
;	      none
;	DESTROYS
;	      bh, dx
;
;
;	ReadRange - read a range of EGA registers from shadow maps
;
;	ENTRY
;	      ah      =  0F2h
;	      dx      =  register id		      must be an indexed chip
;	      cl      =  # of registers to read       (must be > 1 !)
;	      ch      =  starting register index
;	      es:bx   -> buffer to put reg data
;	EXIT
;	      none
;	DESTROYS
;	      cx
;
;
;	WriteRange - write to a range of EGA registers and update shadow maps
;
;	ENTRY
;	      ah      =  0F3h
;	      dx      =  register id		      must be an indexed chip!
;	      cl      =  # of registers to write      (must be > 1 !)
;	      ch      =  starting register index
;	      es:bx   -> buffer to get reg data
;	EXIT
;	      none
;	DESTROYS
;	      bx, cx, dx
;
;
;	ReadSet - read a set of EGA registers from shadow maps
;
;	ENTRY
;	      ah      =  0F4h
;	      cx      =  # of registers to read       (must be > 1 !)
;	      es:bx   -> buffer of contiguous SetRec
;			 structures, one for each register
;			 to be read
;	EXIT
;	      none
;	DESTROYS
;	      cx
;
;
;	WriteSet - write to a set of EGA registers and update shadow maps
;
;	ENTRY
;	      ah      =  0F5h
;	      cx      =  # of registers to write      (must be > 1 !)
;	      es:bx   -> buffer of contiguous SetRec
;			 structures, one for each register
;			 to be written
;	EXIT
;	      none
;	DESTROYS
;	      cx
;
;
;	RevertDefault - blast default shadow maps to EGA, update shadow maps
;
;	ENTRY
;	      ah      =  0F6h
;	EXIT
;	      none
;	DESTROYS
;	      none
;
;
;	DefineDefault - load up default shadow maps from user buffer
;
;	ENTRY
;	      ah      =  0F7h
;	      cx      =  'TH' if user wants to program VGA specific color select
;			 register.  This was added version 2.07.12.
;			 Only checked if on a VGA and defining Attribute
;			 Controller Register.
;	      dx      =  register id
;			 If high bit of dx set, an internal RevertDefault will
;			 occur after the default shadow maps have been updated
;
;	      es:bx   -> buffer of default values for specified register id.
;			 If register id is a chip, all values must be present.
;	EXIT
;	      none
;	DESTROYS
;	      bx
;
;
;	GetDefault - dump default shadow maps to user buffer
;
;	ENTRY
;	      ah      =  0F8h
;	      dx      =  register id
;	      es:bx   -> buffer to receive default values
;			 If register id is a chip,table must have room for all
;			 regs in chip.
;	EXIT
;	      none
;	DESTROYS
;	      none
;
;
;	ContextInfo - Save/Restore full EGA.SYS context information
;
;	ENTRY
;	      ah      =  0F9h
;	      al      =  000h  GetContextSize
;		      =  001h  SaveContext
;		      =  002h  RestoreContext
;		      =  003h  GetFontInfo
;		      =  004h  GetInBiosFlag
;
;	      GetContextSize - return size in bytes needed to save 
;			       EGA.SYS context
;
;	      ENTRY
;		    none
;	      EXIT
;		    ax	    =  size in bytes needed to save EGA.SYS context
;	      DESTROYS
;		    none
;
;
;	      SaveContext - dump current EGA.SYS context data to user buffer
;
;	      ENTRY
;		    es:bx   ->	user save area buffer for EGA context
;	      EXIT
;		    none
;	      DESTROYS
;		    none
;
;
;	      RestoreContext - restore EGA.SYS context data from user buffer
;
;	      ENTRY
;		    es:bx   -> previously saved EGA context
;	      EXIT
;		    none
;	      DESTROYS
;		    none
;
;
;	      GetFontInfo - dump current font data in FontInfo format to 
;			    user buffer
;
;	      ENTRY
;		    es:bx   -> user buffer for FontInfo
;	      EXIT
;		    none
;	      DESTROYS
;		    none
;
;
;	      GetInBiosFlag - return segment:offset of the InBiosFlag
;
;	      ENTRY
;		    none
;	      EXIT
;		    es:bx   -> InBiosFlag
;	      DESTROYS
;		    none
;
;
;	InquireDriver - return ptr to driver version number
;
;	ENTRY
;	      ah      =  0FAh
;	EXIT
;	      es:bx   -> DriverInfo data area
;	DESTROYS
;	      bx, es
;
;
;	Calls 0FBh - 0FDh are reserved. 0FEh & 0FFh are used by
;	environments such as Windows, TopView, and Mondrian.
;
; Added new INT 2FH handler for interprocess communication in 2.07.11
;
; This handler is used to allow new copies to communicate with a previously
;	installed copy.  We support:
;
;	Function 0 - Return AL = 0FFH indicating installed
;	Function 6 - Return version number
;		CH = Major version number
;		CL = Minor version number
;		DL = Beta version number (or 0 for no Beta version)
;	Function 7 - Return end of installed code in paragraphs
;		CX = Paragraph value of code end (rounded up)
;		SI = Code segment (side-effect)
;	Function 8 - Return INT 2FH vector
;		CX = Offset of current vector
;		DX = Segment of current vector
;		DI = Offset of original vector
;		ES = Segment of original vector
;	Function 9 - Return INT 10H vector
;		CX = Offset of current vector
;		DX = Segment of current vector
;		DI = Offset of original vector
;		ES = Segment of original vector
;
;	All functions return BX = 'AH' for COM driver and BX = 'TV' for SYS
;		driver.  See cute comments in equate section.
;
; NOTES
;	EGA.SYS is reentrant.  This means that it is legal for an interrupt
;	routine to call EGA.SYS while the synchronous program is in the middle
;	of one of its calls to EGA.SYS.  [currently, this is only true if the
;	interrupt routine only saves and restores registers (i.e.  makes no
;	permanent changes) but this could be changed to accomodate interrupt
;	routines that make permanent changes (e.g.  an interrupt routine that
;	changed the palette on a vertical retrace)].
;
;	A special note about the attribute chip registers:  the flip-flop
;	which determines whether 003C0h is the address or data register will
;	always be left in the "address" state on return from EGA.SYS.  Any
;	code which sets the flip flop to "data" and then depends on it being
;	set that way must disable interrupts for the length of time between
;	setting it to "data" and the last time it is assumed to be "data".
;
;	Writing to the sequencer memory mode register is tricky because on
;	some vendors cards the sequencer will produce a 20 ns glitch on the
;	CAS lines when this register is accessed, which seems to have a chance
;	of glitching VRAM even though write enable is never asserted.
;	Therefore, when writing to this register, it is suggested that you
;	first synchronously reset the sequencer by writing a 001h to the
;	sequencer reset register (index 000h), then write your data to the
;	memory mode register, and finally write a 003h back to the reset
;	register.  Not that interrupts MUST be disabled during this whole
;	operation, as EGA RAM is not being refreshed when the sequencer is in
;	a reset state.
;
;	The clocking mode register in the sequencer has also appeared to cause
;	similar problems on IBM boards with slow memory on the daughterboard.
;	The same procedure as above is recommended, though may not be strictly
;	necessary.
;
;	And the same caveat applies to the graphics controller miscellaneous
;	register because it appears to cause a glitch on the CAS lines in a
;	similar to the sequencer memory mode register.	This problem is
;	particularly insideous because it will only show up on EGA cards with
;	the add on memory cards that have INMOS RAM chips.  Beware!!!
;
;	Due to these problems, the RevertDefault function does not restore
;	either the clocking mode register or the miscellaneous register (at
;	least in this release).  Since the ability to context switch the
;	EGA is a must, the RestoreContext subfunction of ContextInfo does
;	handle all three registers in a manner described above.
;
;	This code has no provisions for reading the input status registers on
;	the EGA.  Any code that wants to read either of the input status
;	registers should do so directly.  It does however return the most
;	up-to-date information about the cursor position and CRTC start
;	address (these are readable) when reading the CRTC shadow map.
;
; HISTORY
;	12/24/84  1.40	brian conte	epoch
;
;	11/11/85  1.50	steve shaiman	mod to RevertDefault for glitch in in
;					graphics controller misc. register
;
;	02/14/86  1.51	steve shaiman	mod to ChangeRegs to clear direction
;					flag instead of assuming it's cleared
;
;	02/21/86  1.52	steve shaiman	made pOldInt10, ChangeRegs,
;					Int10Routine public as needed by erice
;
;	06/09/86  1.53	steve shaiman	mod to RevertDefault for glitch in
;					sequencer clocking mode register
;
;	10/30/86  1.60	steve shaiman	added GetDefault as function 0F8h;
;					added SimWriteReg & SimWriteSet for
;					use by routines that intercept
;					standard int 010h calls and want to
;					modify the shadows regs (but not the
;					actual hardware regs);
;					added int 010h BIOS support for
;					functions 005h (set display page),
;					00Bh (set CGA palette registers), &
;					010h (set EGA palette registers)
;
;	04/20/87  2.00	jim christy	added remainder of int 010h shadow
;					functions;
;					cleaned up original shadow functions;
;					merged tom hensel's VGA code from
;					"other" EGA.SYS into this one;
;					added revert immediate bit for
;					DefineDefault per shaiman's request
;
;	05/04/87  2.01	jim christy	added ContextInfo functions (0F9h)
;					needed by Windows and TSR's;
;					changed stack handling by Int10Routine
;					and friends to be cleaner, avoiding
;					static SaveAX-style variables (truly
;					re-entrant now);
;					optimized all write reg functions and
;					RevertDefault to avoid redundent
;					special casing of the attribute
;					controller;
;					changed from an "include" file to a
;					device driver format;
;					added more comments, optimiziation,
;					fixed bugs introduced in v2.00
;
;	05/14/87  2.02	Jeff Parsons	Added GetInBiosFlag ContextInfo
;					subfunction (F904h).  Added device
;					driver interface and OS2 conditional
;					assembly.  Added wait for vert retrace
;					before writing attribute controller.
;					Optimized rep-movs to avoid jumps, and
;					added/modified some IN/OUT macros.
;
;	08/11/87  2.03	Jeff Parsons	Converted dirty byte-flag into bit
;					flags (bit 0 maintained same as old
;					dirty flag, bit 1 always set when 0
;					set but never cleared until mode set).
;					Bit 1 now a "truly-dirty" bit, to be
;					used in future revisions.  Optimized
;					path for shadowed Int 10h calls to
;					minimize performance impact, effected
;					in part through the addition of
;					biosmode, biosinfo, and biostable in
;					the local ds.  Cleaned up CheckEga and
;					the install logic to address all of
;					Jim Christy's concerns.  Modified
;					meaning of fInBIOS flag (only set for
;					actual ROM BIOS calls).  Protected all
;					sections where attr cont flip-flop is
;					data state.  Added workaround for
;					driver install bug on non-ega systems.
;
;	03/16/88  2.04  Tom Hensel	Fixed "Green screen" problem on VGA.
;					This only appears on a Compaq VGA so
;					far, but could occur on any VGA which
;					can switch between monochrome and
;					color.  The problem is that we need
;					to do the BIOS set mode call before
;					we call our SetMode routine in order
;					to correctly determine if we have
;					monochrome or color (which affects
;					the value of the CRT controller port
;					address).
;
;	04/14/88  2.05  Tom Hensel	Fixed VGA shadow register map
;					initialization by reading values
;					directly from the port registers
;					rather than relying on the "magical"
;					BIOS register mode init table.
;
;	04/22/88  2.06  Tom Hensel	ChangeRegs didn't handle color/mono
;					properly for VGA
;
;	06/27/88  2.07  Marc Pawliger	Added save/restore ega latches on 
;		  Beta 2		a save/restore context call. Latches
;					are stored in all planes at offset
;					9600H plus an added offset used by the
;					mouse driver for its internal data.
;					9600 is just past the memory used by
;					the VGA at highest resolution.
;
;	07/06/88  2.07	Marc Pawliger	OK, OK.  The 9600H scheme didn't work.
;		  Beta 3		So in the true pioneering spirit, the
;					memory at A000:CBEA was chosen since
;					it's right in the middle of free vram.
;					It ain't scientific, but it works.
;
;	07/13/88  2.07	Marc Pawliger	Well, so much for pioneering.  We now
;		  Beta 4		use 7FFF for storage in all but the
;					high-res VGA modes, when FFFF is used.
;					These work for all EGA modes, including
;					mode FH and 10H on a 64K EGA.
;
;	08/02/88  2.07  Tom Hensel	Bad video mode value for INT 10H
;		  Beta 5		VGA initialization fixed
;					Bug fix for EGA latch code in
;					RestoreContext.
;
;	08/31/88  2.07  Tom Hensel	DX register was being destroyed in
;		  Beta 6		SaveContext routine.  Fix stack
;					problems in RestoreContext.
;
;	09/06/88  2.07  Tom Hensel	Don't let EGA latch code change EGA
;		  Beta 7		state in SaveContext routine.
;
;	09/14/88  2.07  Tom Hensel	Choose a different latch location
;		  Beta 8		based on video mode.
;
;	09/15/88  2.07  Tom Hensel	Some more non visible video memory work
;		  Beta 9
;
;	10/19/88  2.07  Tom Hensel	General Cleanup for efficiency
;		  Beta 10		Added better method (although DOS
;					version dependent) to error exit
;					from Init with least amount of
;					resident code for sys driver.
;
;	11/01/88  2.07  Tom Hensel	General Cleanup for efficiency
;		  Beta 11		Added ability to unload .COM version
;					Side effect is new INT 2FH handler
;					Added 80286 instructions for OS/2
;
;	11/02/88  2.07  Tom Hensel	Fix register corruption bug in
;		  Beta 12		DownloadFont from last beta
;					Added CX='TH' input to acknowledge
;					use of VGA specific color select
;					register in Define Defaults call.
;
;	11/03/88  2.07  Tom Hensel	Efficiency
;		  Beta 13
;
;	11/06/88  2.07  Tom Hensel	No messages for OS/2
;		  Beta 14
;
;	11/19/88  2.07  Tom Hensel	Added ChooseMonoColorDisplay macro
;		  Beta 15		to fix bug reported for OS/2 with
;					a Video Seven V-RAM VEGA VGA card
;					version 1.04.  My guess is that the
;					INT 10H to find out color/mono
;					caused the problem.
;
;	11/20/88  2.07  Tom Hensel	Last fix broke DOS version
;		  Beta 16
;
;	01/19/89  2.08  Tom Hensel	Fix warning message
;		  Beta 1
;
;	01/25/89  2.08  Tom Hensel	True blue IBM VGA cards don't
;		  Beta 2		handle read/write for the Attribute
;					Controller Registers (thus violating
;					their own spec), so we have to
;					initialize these like we do the EGA
;					(by reaching into a hardcoded BIOS
;					location, yuck!)
;
;					SetMode for VGA handled incorrectly.
;					Was doing it twice, with a bogus
;					video mode the second time.
;
;	02/09/89  2.09  Tom Hensel	Added queue for message pointers
;					Needed since VGA does a set mode
;					near the end, so we need to queue
;					up the messages and display them
;					on the cleared screen (and avoid
;					having the messages wiped out)
;
;	06/20/89  2.10  Tom Hensel	Efficiency
;		  Beta 1
;
;	06/28/89  2.10  Tom Hensel	Bug fix for open file handles
;		  Beta 2
;
;	07/19/89  2.10  Tom Hensel	Efficiency
;		  Beta 3
;
;	08/08/89  2.10  Tom Hensel	Fix stack bugs in ContextInfo and
;		  Beta 4		GetContextSize caused by efficiency
;
;	08/08/89  2.10  Tom Hensel	Fix problem with FontBank for VGA
;		  Beta 5
;
;	08/14/89  2.10  Tom Hensel	Efficiency
;		  Beta 6
;
;	08/15/89  2.10  Tom Hensel	Handle IBM kludge correctly
;		  Beta 7
;
;	08/16/89  2.10  Tom Hensel	Beef up IOdelay usage (machines are
;		  Beta 8		getting faster these days)
;
;	09/21/89  2.10  Tom Hensel	Handle interrupt flag state better
;		  Beta 9
;
;	11/07/89  2.10  Tom Hensel	Initialize biosinfo3 earlier since
;		  Beta 10		ChangeRegs needs it
;
;	11/16/89  2.10  Tom Hensel	Fix bug in WriteChar and bug in
;		  Beta 11		Int10Routine reported by amitc
;
;	11/30/89  2.10  Tom Hensel	Still some problems with noclear bit
;		  Beta 12
;
;	12/01/89  2.10  Tom Hensel	Added ReadVGARegs routine
;		  Beta 13
;
;	12/04/89  2.10  Tom Hensel	Fix label problem from Beta 13
;		  Beta 14
;
;	12/05/89  2.10  Tom Hensel	Better method of passing AL
;		  Beta 15		to ChangeRegs.  Fix biosmode problem
;					Boundary check in GetLatchLocation
;
;	12/20/89  2.10	Tom Hensel	Fix bad initialization of Attr regs
;		  Beta 16
;
;	1/3/90	  2.10	Tom Hensel	Another try to fix Beta 16 problem
;		  Beta 17
;
;	1/29/90   2.10  Ken Robertson	Enable interrupts whenever possible
;		  Beta 18		during ReadVGARegs.
;
;	4/5/90    2.11  Ken Robertson	Disable interrupts during register
;		  Beta 1		write routines.
;
;	6/4/90    2.11  Tom Hensel	Add INT 2FH instance code for Win 3.0
;		  Beta 2
;
;	6/13/90   2.11  Tom Hensel	Efficiency
;		  Beta 3
;
;	7/16/90   2.11  Tom Hensel	Fix INT 2FH instance code for Win 3.0
;		  Beta 4
;
;	7/27/90   2.11  Tom Hensel	Move Int10Routine into PSP for .COM
;		  Beta 5		for space efficiency
;
;	7/31/90   2.11  Tom Hensel	Efficiency
;		  Beta 6
;
;	8/07/90   2.11  Tom Hensel	Efficiency
;		  Beta 7
;
;	8/14/90   2.11  Tom Hensel	Created CallTableNeeded flag and
;		  Beta 8		turn it off for OS/2
;
;	9/06/90   2.11  Tom Hensel	Efficiency.  Better IODelay method
;		  Beta 9
;

;*****************************************************************************
;
; NOTE: When updating version numbers: comment out the BETA line if the build
;	is for a non-beta version
;
;*****************************************************************************

CODE	segment word public 'CODE'

	assume	cs:CODE, ds:nothing, es:nothing, ss:nothing

;
; E Q U A T E S
;

;/*---------------------------------------------------------------------*/
;/* Mouse Driver and Mouse Utility version number file, VERSNUMS.INC	*/
;/* 									*/
;/* This file can be included both in C and assembly language source	*/
;/* files.  It defines in decimal the values for the major, minor,	*/
;/* and beta version numbers.  To create a release version, comment	*/
;/* out the line with BetaVers using ;/* for the comment delimeter.	*/
;/*									*/
;/* NOTE: The Major and Beta numbers are in decimal, the tens digit of	*/
;/* the Minor number is in the high byte, ones digit in the low byte.	*/
;/*									*/
;/*	Thus version 7.43.65 is written as:				*/
;/*									*/
;/*		MajVersion  = 7;					*/
;/*		MinVersion  = 43;					*/
;/*		BetaVersion = 65;					*/
;/*									*/
;/*---------------------------------------------------------------------*/

MajVersion	=	2;
MinVersion	=	11;
BetaVersion	=	9;

MajVerCharTens	equ	<(MajVersion / 10) + "0">
MajVerCharOnes	equ	<(MajVersion MOD 10) + "0">
MinVerCharTens	equ	<(MinVersion / 10) + "0">
MinVerCharOnes	equ	<(MinVersion MOD 10) + "0">

ifdef	BetaVersion
BetaVerCharTens	equ	<(BetaVersion / 10) + "0">
BetaVerCharOnes	equ	<(BetaVersion MOD 10) + "0">
endif	; BetaVersion

FALSE		EQU	0
TRUE		EQU	(NOT FALSE)

IF1	; Pass 1 of the assembler

IFDEF	OS2
	%out	Assembling as driver for OS/2

IFNDEF	SYS
SYS		equ	OS2		; OS2 implies SYS driver model
ENDIF	; NOT SYS

ELSE	; NOT OS2

IFDEF	SYS
	%out	Assembling as driver for DOS
ELSE	; NOT SYS
	%out	Assembling as COM file for DOS
ENDIF	; NOT SYS

ENDIF	; NOT OS2

	%out		Pass 1
ELSE	; Pass 2 of the assembler
	%out		Pass 2
ENDIF	; Pass 2 of the assembler

PrintQueueSize	equ	7		; Never need more than 7 messages
					; queued up at any given time
					; (Actually, could probably get by
					; on 5, but burn a couple because
					; of the way the QUEUEPRINT macro
					; works.  Also safer, and only used
					; at init time).
CR		equ	13		; ASCII code for carriage return
LF		equ	10		; ASCII code for line feed

	subttl	Equate definitions for EGA/VGA i/o ports
	page

EGA_BASE	equ	300h

SEQ_ADDR	equ	0C4h		; Sequencer addr register
SEQ_DATA	equ	0C5h		; Sequencer data register

SEQ_MAP_MASK	equ	02H		; Write plane enable mask
MM_ALL		equ	00001111b	; Enable all planes

GRAF_CONT	equ	0CEh		; Port for graphics controller
GRAF_ADDR	equ	0CEh		; Controller addr register

GRAF_DATA_ROT	equ	03H		; Graphics rotate register
DR_SET		equ	0h		; Unmodified passthrough

GRAF_MODE_REG	equ	05h
MR_SET		equ	01h		; Writethrough mode

GRAF_MISC_REG	EQU	6h		; Graphics misc register
NumGraphicsRegs	EQU	9h

GRAF_BIT_MASK	equ	08h		; Bit mask register

NumSeqRegs	EQU	5h		; Note BIOS only has data for 4
SeqClMReg	EQU	1h

CRTCAddr	EQU	3D4h		; Will change to 003B4 if mono
NumCRTCRegs	EQU	19h

AttCtrlAddrReg	EQU	3C0h
NumAttrRegs	EQU	15h		; Note extra one for VGA
PaletteAddressSource EQU	00100000b

MiscAddr	EQU	3C2h
MiscOutputRegR	EQU	3CCH
FeatureCtrlReg	EQU	3CAH
FeatAddr	EQU	3DAh		; Will change to 003BA if mono
Gr1PosAddr	EQU	3CCh
Gr2PosAddr	EQU	3CAh

NumPtrData	EQU	4		; Number of chips using indices

ReadRegNum	EQU	0F0H
WriteRegNum	EQU	0F1H
InquireDriverNum EQU	0FAH

EGAShadowStart	EQU	0F0H
EGAShadowEnd	EQU	0FAH

ifdef	OS2
CallTableNeeded		EQU	false	; TRUE if int 10h call table needed
					; (Because > 1 routine supported)
else	; NOT OS2
CallTableNeeded		EQU	true	; TRUE if int 10h call table needed
					; (Because > 1 routine supported)
endif	; NOT OS2

;
; Non visible EGA/VGA memory layout
;
; Basic Interpreter gets first two bytes for current use (reserved space)
; Basic Interpreter gets next two bytes for future use (reserved space)
; EGA.SYS latch save area byte (reserved space)
; Mouse latch save area byte (reserved space)
; Remaining reserved space
; Cursor save area
; Buffer for screen under the cursor
;

NonVisibleStartOff_D EQU (320 / 8) * 200
NonVisibleStartOff_E EQU (640 / 8) * 200
NonVisibleStartOff_F_10 EQU (640 / 8) * 350
NonVisibleStartOff_11 EQU (640 / 8) * 480
NonVisibleStartOff_12 EQU (640 / 8) * 480
NonVisibleStartOff_13 EQU (320 / 8) * 200 * 8	; * 8 because of 256 colors

EGALatchOff_D	EQU	NonVisibleStartOff_D + 4
EGALatchOff_E	EQU	NonVisibleStartOff_E + 4
EGALatchOff_F_10 EQU	NonVisibleStartOff_F_10 + 4
EGALatchOff_11	EQU	NonVisibleStartOff_11 + 4
EGALatchOff_12	EQU	NonVisibleStartOff_12 + 4
EGALatchOff_13	EQU	NonVisibleStartOff_13 + 4

;
; The following equates are device driver definitions
;

IFDEF	SYS
B$DONE		EQU	0000000100000000B
;B$BUSY		EQU	0000001000000000B
B$ERROR		EQU	1000000000000000B
B$UnknownUnit	EQU	1
B$DNR		EQU	2
B$UnknownCommand EQU	3
B$GeneralFailure EQU	0CH
MAX_FUNCTION	EQU	16		; Maximum function number
					; (Output Until Busy function)
ENDIF	; SYS

IFNDEF	OS2

ifndef	sys
GetCodeLength	EQU	7		; Return length of resident code
GetINT2F	EQU	8		; Return original vector function code
GetINT10	EQU	9		; Return original vector function code
Int2FPatternCom	EQU	'AH'		; Choose my sister's initials
					; to identify us
OpIntRoutineLength	=	0EAh	; Size of Int10Routine

if	CallTableNeeded
OpIntRoutineLength	=	OpIntRoutineLength + 37h
endif	; CallTableNeeded

OrgStartOfData	equ	5CH + OpIntRoutineLength ; Location to start data at
					; This is because of relocation into
					; PSP of Int10Routine
endif	; NOT sys

GetInstalledState EQU	0		; Return installed state function code
GetVersionNumber EQU	6		; Return version number
MyInt2FNumber	EQU	0BCH		; An arbitrary choice
MinValidNumber	EQU	80H		; DOS gets 00 - 7F (AH)
MaxValidFunction EQU	0F7H		; DOS gets F8 - FF (AL)
Int2FPatternSys	EQU	'TV'		; Choose Tina Vandersteel's initials to
					; identify us (Who's Tina Vandersteel?
					; Tina is Ann's sister.
					; Who's Ann Vandersteel?
					; Think beautiful blonde California
					; type and you'll be on the right
					; track, but that's another story...)
ENDIF	; NOT OS2

;
; M A C R O S
;

	subttl	Macro definitions
	page

IOdelay		macro

	call	HandleIODelay

		endm

DoVersion	macro

if	MajVerCharTens - "0"
		db	MajVerCharTens
endif	; MajVerCharTens - "0"

		db	MajVerCharOnes
		db	'.'
		db	MinVerCharTens, MinVerCharOnes

ifdef	BetaVersion
		db	'.'
		db	BetaVerCharTens, BetaVerCharOnes
endif	; BetaVersion

		endm

;
; It has been found that some systems cannot handle the rapid back-to-back io
; writes that occur when an out dx,ax is executed to an 8-bit device (such as
; the EGA).  Furthermore, Video-7 reports problems running on Olivetti/AT&T
; machines with this opcode due to a "byte reversal problem".  Therefore, it
; has been implemented has a macro expansion.
;

OutWord 	macro	NoInts,DestroyAX,DestroyDX

ifb	<NoInts>
	pushf				; Save interrupt flag state
	cli
endif	; ifb <NoInts>

	out	dx,al
	IOdelay
	inc	dx
	xchg	al,ah
	out	dx,al

ifb	<NoInts>
	popf				; Restore interrupt flag state
endif	; ifb <NoInts>

ifb	<DestroyDX>
	dec	dx
endif	; ifb <DestroyDX>

ifb	<DestroyAX>
	xchg	al,ah
endif	; ifb <DestroyAX>

		endm

;
; Since IBM has documented that the VGA does NOT support 16-bit I/O to
; the Attribute Controller, we abide by this restriction (even though it
; would appear to work on certain models.)  Also, if ax is passed for the
; scratch argument, it is assumed ax need not be preserved. -JTP
;

OutWordAttr	macro	scratch,NoInts

ifb	<NoInts>
	pushf				; Save interrupt flag state
	cli
endif	; ifb <NoInts>

	InitFlipFlop
	mov	dl,AttCtrlAddrReg AND 0FFh ; Restore AttrAddr
	out	dx,al
	IOdelay

ifidn	<scratch>,<ax>
	mov	al,ah
else	; NOT idn <scratch>,<ax>
	xchg	al,ah
endif	; NOT idn <scratch>,<ax>

	out	dx,al

ifb	<NoInts>
	popf				; Restore interrupt flag state
endif	; ifb <NoInts>

ifdif	<scratch>,<ax>
	xchg	al,ah
endif	; dif <scratch>,<ax>

		endm

comment	\	Not currently used
InByteAttr	macro	NoInts

ifb	<NoInts>
	pushf				; Save interrupt flag state
	cli
endif	; ifb <NoInts>

	InitFlipFlop
	IOdelay
	mov	dl,AttCtrlAddrReg AND 0FFh ; Restore AttrAddr
	out	dx,al			; Tell 3C0 which index
	IOdelay
	inc	dx
	in	al,dx			; 3C1 returns reg data
	IOdelay
	dec	dx
	out	dx,al			; Restore flip-flop state

ifb	<NoInts>
	popf				; Restore interrupt flag state
endif	; ifb <NoInts>

		endm
\

;
; Since initialization of the Attribute Controller flip-flop is so common,
; it appears here as a macro.  It assumes dh = 03, ds = cs, and that al can
; be trashed.
;

InitFlipFlop	macro	NoSaveAX

ifndef	NoSaveAX
	PUSH	AX			; Save environment
endif	; NoSaveAX

	mov	dl,byte ptr [PortTable][5 * SIZE PortRec].prPortAddr
	in	al,dx

ifndef	NoSaveAX
	POP	AX			; Restore environment
endif	; NoSaveAX

		endm

;
; This is also a common operation that appears here as a macro, with the
; same assumptions as above.  If dx is passed for the scratch register, it
; is assumed dx need not be preserved; otherwise the scratch register will be
; used to preserve dx. -JTP
;

WaitRetrace	macro	scratch
	local	t1

ifnb	<scratch>

ifdif	<scratch>,<dx>
	mov	scratch,dx
endif	; dif <scratch>,<dx>

endif	; nb <scratch>

	mov	dl,byte ptr [PortTable][5 * SIZE PortRec].prPortAddr

t1:
	in	al,dx			; Read status reg
	test	al,08h			; Vert retrace bit on?
	jz	t1			; Not yet
	cli				; Disable interrupts asap

ifnb	<scratch>

ifdif	<scratch>,<dx>
	mov	dx,scratch
endif	; dif <scratch>,<ax>

endif	; nb <scratch>

		endm

EGAChooseMonoColorDisplay	macro

	mov	bx,offset PortTable
	mov	byte ptr code:[bx][0].prPortAddr,al
	add	al,6
	mov	byte ptr code:[bx][5 * SIZE PortRec].prPortAddr,al

				endm

IFDEF	OS2

comment	\ Not currently used
PRINT 	macro	message			; OS/2 Device drivers need to
	local	t1, t2			; refrain from using Int 21h

ifnb	<message>
	mov	si,offset message	; DS:SI -> Message to display
endif	; ifnb <message>

	jmp	short t2

 t1:
	mov	ah,14
	int	10h

 t2:
	lodsb
	or	al,al
	jnz	t1

		endm
\

ELSE	; NOT OS2

QueuePrint	macro	message

	mov	bx,[pPrintQueue]	; Get current pointer into PrintQueue

ifb	<message>
	mov	[PrintQueue][bx],dx	; Save message pointer
else	; NOT ifb <message>
	mov	[PrintQueue][bx],offset message ; Save message pointer
endif	; NOT ifb <message>

	add	[pPrintQueue],2		; Move to next spot in PrintQueue

		endm

PRINT		MACRO	message

	mov	ah,9			; Command code to print string

ifnb	<message>
	mov	dx,offset message	; DS:DX -> Message to display
endif	; ifnb <message>

	int	21h			; Let DOS print the message for us

		ENDM

UpperCase	MACRO	char
	local	UpperCaseDone

	cmp	char,'a'		; Is it in range?
	jb	UpperCaseDone		; No - skip
	cmp	char,'z'		; Is it in range?
	ja	UpperCaseDone		; No - skip
	and	char,NOT 20h		; Convert to upper case

UpperCaseDone:

		ENDM

VGAChooseMonoColorDisplay	macro
	local	DisplayCheckDone

	mov	bx,offset PortTable
	MOV	BYTE PTR code:[bx][0].PRPortAddr,0D4H
	MOV	BYTE PTR code:[bx][5 * SIZE PortRec].PRPortAddr,0DAH
	MOV	AH,12H			; Command code to get EGA information
	MOV	BL,10H			; Command code to get EGA information
	INT	10H			; Find out if currently mono or color
	OR	BH,BH			; Is it color
	JZ	DisplayCheckDone	; Yes - skip
	mov	bx,offset PortTable
	MOV	BYTE PTR code:[bx][0].PRPortAddr,0B4H
	MOV	BYTE PTR code:[bx][5 * SIZE PortRec].PRPortAddr,0BAH

DisplayCheckDone:

				endm

ENDIF	; NOT OS2

;
; S T R U C T U R E S
;

	subttl	Structure definitions
	page

;
; UserRegs is used by various context functions to access the original
; regs placed on the stack by the Int10Routine.  If you change the stack
; format, BE SURE TO UPDATE this structure!
;

UserRegs	struc

userBP		dw	?		; Offset of user's bp
userRTN		dw	?		; Return address for near CALL
userDS		dw	?		; Offset of user's ds
userSI		dw	?		; Offset of user's si
userAX		dw	?		; Offset of user's ax

UserRegs	ends

FontInfo	struc			; See GetFontInfo for details

fibank0		db	?
fibank1		db	?
fibank2		db	?
fibank3		db	?

FontInfo	ends

SetRec		struc			; Used in read/write set calls

srPortNum	dw	?		; Register id
srPtr		db	?		; Register index
srData		db	?		; Register data

SetRec		ends

PortRec 	struc

prPortAddr	dw	?		; IO port address (can change)
prCurrTable	dw	?		; Current shadow map table
prDefTable	dw	?		; Default shadow map table
prNumRegs	db	?		; Number of data regs
prModFlag	db	?		; Modified since last "rev def"

PortRec 	ends

IFNDEF	OS2

Win386_Startup_Info_Struc	STRUC

SIS_Version			db	3, 0
SIS_Next_Dev_Ptr		dd	?
SIS_Virt_Dev_File_Ptr		dd	0
SIS_Reference_Data		dd	?
SIS_Instance_Data_Off_Ptr	dw	?
SIS_Instance_Data_Seg_Ptr	dw	?

Win386_Startup_Info_Struc	ENDS

Instance_Item_Struc	STRUC

IIS_Off_Ptr	dw	?
IIS_Seg_Ptr	dw	?
IIS_Size	dw	?

Instance_Item_Struc	ENDS

ENDIF	; NOT OS2

;
; The following structures are device driver definitions
;

IFDEF	SYS

REQUEST_HEADER	STRUC

RHLength	DB	?
UnitCode	DB	?
CommandCode	DB	?
Status		DW	?
Reserved	DB	8 DUP (?)

REQUEST_HEADER	ENDS

INIT_STRUCT	STRUC

REQ_HEADER	DB	SIZE REQUEST_HEADER DUP (?)
NumberOfUnits	DB	?
pEndResidentProgramCode DD ?
pBPB		DD	?
DriveNumber	DB	?

INIT_STRUCT	ENDS

ENDIF	; SYS

;
; S E G M E N T S
;

;*****************************************************************************
; Here we set up a segment in vram.  We mark a byte for storage of the
; hardware latches during the SaveState and RestoreState routines.
;
; Non-visible EGA/VGA memory usage:
;
; EGA.SYS latch save area byte is first byte after visible memory
; Mouse latch save area byte is next byte
; Cursor save area comes next
; Screen buffer for area under the cursor comes next
;

egamem	segment at 0a000h

egamem	ends

	subttl	Data segment definitions for BIOS data
	page

INTVEC		segment at 0000h

	org	10h * 4

IV_VIDEO	LABEL	DWORD

IV_VIDEO_OFF	dw	?		; Video vector
IV_VIDEO_SEG	dw	?		; Video vector

.ERRNZ		($ - IV_VIDEO) - 4	; Keep the vector together

ifndef	OS2

	ORG	4 * 2FH

IV_MULTIPLEX	LABEL	DWORD		; Multiplex interrupt

IV_MULTIPLEX_OFF DW	?
IV_MULTIPLEX_SEG DW	?

.ERRNZ		($ - IV_MULTIPLEX) - 4	; Keep vector together

endif	; NOT OS2

	org	400h + 010h

EquipFlag	dw	?

	org	400h + 049h

CrtMode 	db	?
CrtCols 	dw	?
CrtLen		dw	?
CrtStart	dw	?
CursorPosn	dw	8 dup (?)
CursorMode	dw	?
ActivePage	db	?
Addr6845	dw	?
CrtModeSet	db	?
CrtPalette	db	?

	org	400h + 084h

Rows		db	?
Points		dw	?
Info		db	?
Info3		db	?

	org	400h + 0A8h

lpSavePtr	label	dword

oSavePtr	dw	?
sSavePtr	dw	?

.ERRNZ		($ - lpSavePtr) - 4	; Keep the vector together

INTVEC		ends

;
; E N T R Y   P O I N T
;

IFDEF	SYS

	org	0000h			; Header for device driver model

main:
pNextDevice	dd	-1
Attribute	dw	8000h
pDevStrategy	dw	DevStrategy
pDevInterrupt	dw	DevInterrupt
DevName 	db	"EGA$    "

.ERRNZ		($ - main) - 18		; Keep device driver block together

pRequestHeader	LABEL	DWORD

ReqHeaderOff	DW	?
ReqHeaderSeg	DW	?

.ERRNZ		($ - pRequestHeader) - 4	; Keep vector together

;
; DevStrategy - Device driver strategy entry point
;
; ENTRY
;	es:bx	-> request packet
;
; EXIT
;	packet updated as appropriate
;
; DESTROYS
;	none
;

	assume	cs:CODE, ds:nothing, es:nothing, ss:nothing

DevStrategy	proc	far

	mov	[ReqHeaderOff],BX	; Save offset to request header
	mov	[ReqHeaderSeg],ES	; Save segment to request header
	ret				; Return to DOS

DevStrategy	endp

;
; DevInterrupt - Device driver interrupt entry point
;
; ENTRY
;
; EXIT
;	packet updated as appropriate
;
; DESTROYS
;	none
;

	assume	cs:CODE, ds:nothing, es:nothing, ss:nothing

DevInterrupt	proc	far

	pushf				; Save environment

ifdef	OS2
	pusha				; Save environment
else	; NOT OS2
	push	ax			; Save environment
	push	bx			; Save environment
endif	; NOT OS2

	push	ds			; Save environment
	lds	bx,[pRequestHeader]	; DS:BX -> Request header
	assume	ds:nothing		; But actually request header segment
	mov	al,ds:[bx].CommandCode	; AL = command
	cmp	al,MAX_FUNCTION		; Invalid command?
	ja	DevIntDone2		; Yes - skip
	cmp	al,8			; Can we handle the command?
	ja	DevIntDone1		; No - skip

ifndef	OS2
	push	cx			; Save environment
	push	dx			; Save environment
	push	bp			; Save environment
	push	di			; Save environment
	push	si			; Save environment
endif	; NOT OS2

	push	es			; Save environment
	cbw				; AX = command
	mov	si,ax			; SI = command
	shl	si,1			; SI = command table offset
	mov	ax,cs			; DS = Code segment
	mov	ds,ax			; Two instructions needed
	assume	ds:CODE
	call	[CmdTable][si]		; Call handler for command
	assume	ds:nothing, es:nothing
	or	ax,B$DONE 		; Set done bit
	lds	bx,[pRequestHeader]	; DS:BX -> Request header
	assume	ds:nothing		; But actually request header segment
	mov	ds:[bx].Status,AX	; Store status word in packet
	pop	es			; Restore environment
	assume	es:nothing

ifndef	OS2
	pop	si			; Restore environment
	pop	di			; Restore environment
	pop	bp			; Restore environment
	pop	dx			; Restore environment
	pop	cx			; Restore environment
endif	; NOT OS2

	jmp	short DevIntDone3	; Skip the error status

DevIntDone1:
	assume	ds:nothing		; But actually request header segment
	mov	ds:[bx].Status,B$DONE	; Return done with no error status
	jmp	short DevIntDone3	; Skip the error status

DevIntDone2:
	assume	ds:nothing		; But actually request header segment
	mov	ds:[bx].Status,B$DONE OR B$ERROR OR B$UnknownCommand
					; Return unknown command error

DevIntDone3:
	assume	ds:nothing
	pop	ds			; Restore environment
	assume	ds:nothing

ifdef	OS2
	popa				; Restore environment
else	; NOT OS2
	pop	bx			; Restore environment
	pop	ax			; Restore environment
endif	; NOT OS2

	popf				; Restore environment
	ret				; Return to DOS

DevInterrupt	endp

ForcedResidentEnd	label	near

ELSE	; NOT SYS

	ORG	2CH

pEnvSeg		DW	?		; Segment address of environment

	ORG	5CH

FCB1		DB	16 DUP (?)	; File Control Block 1
					; This marks the first spot in the PSP
					; where we are allowed to destroy
					; We relocate Int10Routine into the
					; PSP starting at this point

	ORG	80H

ParmLength	DB	?		; Length of command line

	ORG	81H

pComLine	DB	127 DUP (?)	; Actual command line

	org	100h			; Just call Init if TSR model

main:
	jmp	Init			; Init will vary depending on model

	org	OrgStartOfData		; Because Int10Routine is getting
					; Relocated in the PSP occupying
					; from 5ch to here

if2	; Pass 2 of the assembler
.errnz	(offset StartOfData - offset FCB1) - OpIntRoutineLength ; Exact fit
.errnz	OpIntRoutineLength LT 167	; Make full use of PSP
endif	; Pass 2 of the assembler

ENDIF	; NOT SYS

;
; V A R I A B L E S
;

	subttl	Data definitions for EGA.SYS (shadow maps)
	page

IFNDEF	OS2

StartOfData	equ	$

ENDIF	; NOT OS2

StartEGAContext label	near

PortTable	label	word		; Code dependent on order

PortRec 	<CRTCAddr, CRTCRegs, DefCRTCRegs, NumCRTCRegs, 0>
PortRec 	<(EGA_BASE + SEQ_ADDR), SeqRegs, DefSeqRegs, NumSeqRegs, 0>
PortRec 	<(EGA_BASE + GRAF_CONT), GraphicsRegs, DefGraphicsRegs, NumGraphicsRegs, 0>
PortRec 	<AttCtrlAddrReg, AttrRegs, DefAttrRegs, NumAttrRegs, 0>
PortRec 	<MiscAddr, MiscOutReg, DefMiscOutReg, 1, 0>
PortRec 	<FeatAddr, FeatureReg, DefFeatureReg, 1, 0>
PortRec 	<Gr1PosAddr, Gr1PosReg, DefGr1PosReg, 1, 0>
PortRec 	<Gr2PosAddr, Gr2PosReg, DefGr2PosReg, 1, 0>

.ERRNZ		($ - PortTable) - (8 * SIZE PortRec) ; Keep table together

SingleRegMod	db	0		; >0 if a single reg modified

;
; This is the current shadow map table...order MUST be same as BIOS
;

StartShadowMaps label	byte

SeqRegs 	db	NumSeqRegs	dup (?)
MiscOutReg 	db	1		dup (?)
CRTCRegs	db	NumCRTCRegs	dup (?)
AttrRegs	db	NumAttrRegs	dup (?)

VGAPatch	EQU	$ - StartShadowMaps

GraphicsRegs	db	NumGraphicsRegs	dup (?)

SizeShadowMaps	EQU	$ - StartShadowMaps

;
; This is the default shadow map table...order MUST be same as BIOS
;

DefSeqRegs	db	NumSeqRegs	dup (?)
DefMiscOutReg	db	1		dup (?)
DefCRTCRegs	db	NumCRTCRegs	dup (?)
DefAttrRegs	db	NumAttrRegs	dup (?)
DefGraphicsRegs	db	NumGraphicsRegs	dup (?)

Gr1PosReg	db	0		; These aren't included in bios
Gr2PosReg	db	1
FeatureReg	db	0		; Never changed
DefGr1PosReg	db	0
DefGr2PosReg	db	1
DefFeatureReg	db	0		; Never changed

.ERRNZ		($ - StartShadowMaps) - ((NumSeqRegs * 2) + (NumCRTCRegs * 2) + (NumAttrRegs * 2) + (NumGraphicsRegs * 2) + 8)

FontBank	FontInfo	<>	; Font ids for 4 banks

SizeEGAContext	EQU	($ - StartEGAContext)

fVga		db	FALSE		; VGA presence flag
SaveAX		dw	?		; Temp variables
biosmode	db	?		; Current video mode #
biosinfo	db	?		; Static copy of ega info byte
biosinfo3	db	?		; Static copy of ega info3 byte

pOldInt10	label	dword

pOldInt10Off	dw	?		; Offset of old INT 10H vector
pOldInt10Seg	dw	?		; Segment of old INT 10H vector

.ERRNZ		($ - pOldInt10) - 4	; Keep vector together

fPalette	db	false		; This is used to flag when the user
					; has requested to read the palette
					; regs.  This is needed for VGA
					; to overcome a problem of rapid
					; video enable/disable needed to
					; read the palette registers

DriverInfo	label	byte		; A historic data area

Version 	db	MajVersion, MinVersion
CopyrightMsg	dw	offset Copyright
CheckSum	dw	0		; Why this ?
CheckSumStart	dw	offset SetMode	; Why this ?
fInBIOS 	db	0
Copyright	db	"*** This is Copyright (c) 1984-1990 Microsoft ***"

.errnz		($ - DriverInfo) - (9 + 49)

IFDEF	OS2
ContextCopy	db	SizeEGAContext dup (?) ; Enough storage for 1 context
ELSE	; NOT OS2

pOldINT2F	LABEL	DWORD

pOldINT2FOff	DW	?
pOldINT2FSeg	DW	?

.ERRNZ		($ - pOldINT2F) - 4	; Keep vector together

Int2FNumber	db	MyInt2FNumber	; User can change this value using
					; FUNC=XX command line parameter
					; (where XX is 80 through FF
					; hexadecimal inclusive)
					;
					; For example:  EGA FUNC=AC

Win386_Startup_Info	Win386_Startup_Info_Struc	<, ?, 0, ?, offset Instance_Item, ?>

Instance_Item		label	byte

RegData		Instance_Item_Struc	<offset StartOfData, ?, SizeOfData>

		dd	0		; Termination code

.errnz		($ - Instance_Item) - (4 + SIZE Instance_Item_Struc)

SizeOfData	equ	($ - StartOfData)

ENDIF	; NOT OS2

;
; Start of non-instance data (data which is not modified)
;

	subttl	Data definitions for EGA.SYS (dispatch tables)
	page

;
; The following table is used to look up the location to save the EGA/VGA
;	latch state depending on the video mode.  The mouse driver does
;	the same thing and uses the byte after the byte we use.
;

EGALatchTable	dw	EGALatchOff_D
		dw	EGALatchOff_E
		dw	EGALatchOff_F_10
		dw	EGALatchOff_F_10
		dw	EGALatchOff_11
		dw	EGALatchOff_12
		dw	EGALatchOff_13

.errnz		($ - EGALatchTable) - 14 ; Keep table together

ContextTable	label	word		; Jump table for ContextInfo

		dw	GetContextSize	; Func 000h
		dw	SaveContext	; Func 001h
		dw	RestoreContext	; Func 002h
		dw	GetFontInfo	; Func 003h
		dw	GetInBiosFlag	; Func 004h

MaxContextCall	EQU	($ - ContextTable) / 2 - 1

.ERRNZ		($ - ContextTable) - (5 * 2) ; Keep table together

MyCallTable	label	word

		dw	offset ReadReg	; Call 0F0h
		dw	offset WriteReg	; Call 0F1h
		dw	offset ReadRange ; Call 0F2h
		dw	offset WriteRange ; Call 0F3h
		dw	offset ReadSet	; Call 0F4h
		dw	offset WriteSet	; Call 0F5h
		dw	offset RevertDefault ; Call 0F6h
		dw	offset DefineDefault ; Call 0F7h
		dw	offset GetDefault ; Call 0F8h
		dw	offset ContextInfo ; Call 0F9h
		dw	offset InquireDriver ; Call 0FAh

MaxMyCall	EQU	($ - MyCallTable) / 2 - 1

.ERRNZ		($ - MyCallTable) - (11 * 2) ; Keep table together

;
; Note that the following table of shadow routines is now complete.  Some
; entries still point to "Ignore" only because the BIOS either never
; changes the EGA regs for these routines, or it calls other int 10h
; functions which are already shadowed to do its work.	An exception to
; this are the entries marked (nop)*.  These entries change the readable
; regs in the CRTC chip, thus shadowing of these functions is simply a
; matter of reading those registers.  That functionality has been delegated
; to the routine UpdateCRTCMaps, which gets called by all of the READ
; procedures before returning any data.
;
; WARNING: If a new routine is added to this list, or if the shadowing
; logic in any of these is modified, you may need to update biostable.	It
; contains the lowest video mode # for which shadowing is performed for each
; BIOS function.
;

if	CallTableNeeded

BIOSCallTable	label	word

		dw	offset SetMode	; Set display mode
		dw	offset SetCursorType ; Set cursor shape
		dw	offset Ignore	; Set cursor position	(nop)*
		dw	offset Ignore	; Get cursor position	(nop)
		dw	offset Ignore	; Get light-pen pos	(nop)
		dw	offset Ignore	; Set display page	(nop)*
		dw	offset ScrollUpDown ; Scroll up
		dw	offset ScrollUpDown ; Scroll down
		dw	offset ReadChar	; Read  attr/char
		dw	offset WriteChar ; Write attr/char
		dw	offset WriteChar ; Write char only
		dw	offset SetCgaPalette ; Set CGA palette regs
		dw	offset WriteDot ; Write dot
		dw	offset ReadDot	; Read  dot
		dw	offset Ignore	; Write tty		(nop)
		dw	offset Ignore	; Get video state	(nop)
		dw	offset SetEgaPalette ; Set EGA palette regs
		dw	offset DownloadFont ; Download EGA fonts
		dw	offset Ignore	; Alternate select	(nop)
		dw	offset Ignore	; Write string		(nop)

MaxBIOSCall	EQU	($ - BIOSCallTable) / 2 - 1

.ERRNZ		($ - BIOSCallTable) - (20 * 2) ; Keep table together

biostable	db	0,0,-1,-1,-1,-1,0Dh,0Dh,8,8,8,0,8,8,-1,-1,0,0,-1,-1

.errnz	($ - biostable) - (MaxBIOSCall + 1)

else	; NOT CallTableNeeded

MaxBIOSCall	EQU	1

endif	; NOT CallTableNeeded

	subttl	Device Driver Code
	page

IFDEF	SYS

;
; Request packet command dispatch table
;

CmdTable	dw	Init		; 0  Initialization
		dw	StatusComplete	; 1  Media Check
		dw	StatusComplete	; 2  Build BPB
		dw	StatusComplete	; 3  Reserved

IFDEF	OS2
		dw	DoSave		; 4  Input (Read)
ELSE	; NOT OS2
		dw	StatusComplete	; 4  Input (Read)
ENDIF	; NOT OS2

		dw	StatusComplete	; 5  Non-Destructive read
		dw	StatusComplete	; 6  Input Status
		dw	StatusComplete	; 7  Input Flush

IFDEF	OS2
		dw	DoRestore	; 8  Output (Write)
ELSE	; NOT OS2
		dw	StatusComplete	; 8  Output (Write)
ENDIF	; NOT OS2

.ERRNZ		($ - CmdTable) - (9 * 2) ; Keep table together
=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\emm386\a20trap.asm ===
.386p
page	58,132
;******************************************************************************
	title	A20TRAP.ASM - I/O trap handlers for watching the A20 line.
;******************************************************************************
;
;   (C) Copyright MICROSOFT Corp. 1986-1991
;   (C) Copyright COMPAQ Computer Corp. 1986-1991
;
;   Title:    EMM386.EXE - MICROSOFT Expanded Memory Manager 386 Driver
;
;   Module:   A20TRAP.ASM - I/O trap handlers for watching the A20 line.
;
;   Version:  2.00
;
;   Date:     June 1, 1986
;
;   Author:   Steve Preston
;
;******************************************************************************
;
;   Change log:
;
;     DATE    REVISION			DESCRIPTION
;   --------  --------	-------------------------------------------------------
;   07/03/86  0.03	From ChkDisA20 routine in VMINST.
;   05/20/87  2.00	Fixed KybdWatch to save BH (SBP).
;   05/31/87  2.00	Added A20 state update (SBP).
;
;   09/26/89		Added P92_Handler for PS2s
;   05/14/90            Hook XMM for A20 management (MS only)
;
;******************************************************************************
;
;   Functional Description:
;	This module contains the I/O trap handlers for the A20 line watching
;   logic.
;
;
;******************************************************************************
.lfcond 				; list false conditionals
	page
;******************************************************************************
;			P U B L I C   D E C L A R A T I O N S
;******************************************************************************
;
	public	P64_Handler
	public	P60_Handler
	public	P92_Handler	; HKN
	public	Kybd_Watch
;
;******************************************************************************
;			I N C L U D E S  &  E Q U A T E S
;******************************************************************************
	include vdmseg.inc
	include vdmsel.inc
	include desc.inc
	include vm386.inc
	include	emm386.inc
	include emmfunct.inc
	include emmdata.inc
	include oemdep.inc

;******************************************************************************
;			E X T E R N A L   R E F E R E N C E S
;******************************************************************************
_TEXT	segment
	extrn	PortTrap:near
	extrn	PortClear:near
	extrn	UpdateHMA:near
ifdef MSFLAG
	extrn	UpdateHMAfar:far
endif
_TEXT	ends

ifdef 900720
ifdef MSFLAG
R_CODE	segment
	extrn	GoVirtualMode:near
	extrn	Virt_to_Prot:near
	extrn	Prot_to_Virt:near

PrevXmm		dd	?	; previous XMM handler's entry point
fCanChangeA20	db	1
EnableCount	dw	0	; A20 enable/disable counter
fGlobalEnable	dw	0	; Global A20 enable/disable call

R_CODE	ends
endif
endif

_DATA	segment
SysPortA	db	0
_DATA	ends

HALT	equ	0F4h	; HLT instruction
ERR_A20	equ	082h

;******************************************************************************
;			S E G M E N T	D E F I N I T I O N
;******************************************************************************

	page
;------------------------------------------------------------------------------
_TEXT	segment
	assume	cs:_TEXT,ds:_DATA,es:_DATA,gs:R_CODE,ss:STACK

;******************************************************************************
;   P60_Handler - I/O trap handler for port 60h - kybd data port
;
;   ENTRY: Protected Mode Ring 0
;		AL = byte to output to port.
;		BX == 2 * port address
;		DX == 0  => Emulate input
;		   <> 0  => Emulate output
;		DS = _DATA
;		GS = R_CODE
;		SS:BP = points to stack frame on entry to GP fault handler
;
;   EXIT:
;		CLC => I/O emulated.
;		STC => I/O NOT emulated.
;
;   USED:  BX,Flags
;   STACK:
;------------------------------------------------------------------------------
P60_Handler	proc	near
;
	or	dx,dx			;Q: Output ?
	jnz	SHORT P60_Dwrite	;  Y: check for write to output port

ifndef LC910611
	test	[GenFlags],fVir8042	;Q: Virtualize keyboard?
	jnz	short P60_VirKB		; Y: read value from virtual port 60h

P60noEmulate:
endif
	stc				; N: don't bother to emulate it
	ret

ifndef LC910611
;
;  Virtual keyboard input data register.  This routine will read the keyboard
;  only once after an IRQ1 has ocurred.  Any subsequent reads, before another
;  IRQ 1, will result in reading a virtual port 60h register (the contents of
;  which will remain the same in between IRQ 1s).
;
P60_VirKB:
	cmp	[p64data],KYBD_RD_OUTPUT;Q: Did client want to read keyboard scan code?
	jne	short P60noEmulate	; N: don't emulate

	cmp	[IRQ1Event],TRUE	;Q: Has an IRQ 1 ocurred since last read?
	je	short P60VreadKB	; Y: read physical 8042
	mov	al,[p60data]		; N: read virtual 8042
	jmp	P60_exit

P60VreadKB:
	mov	[IRQ1Event],FALSE	; mark this IRQ 1
	in	al,KbdDataPort		; read physical 8042
	mov	[p60data],al		; put in virtual port 60h
	jmp	P60_exit
endif

;
;  data write
;
P60_Dwrite:
ifndef LC910611
	cmp	[p64data],KYBD_WR_OUTPUT	;Q: write to output port?
	mov	[p64data],0			; data port write => no CMD

	je	SHORT P60_wr_out		;  Y: filter client's data
	stc					;  N: don't bother to emulate it
	ret
endif
;
;   here if Output Port write
;	Update page table wraparound area to reflect the current state
;	of A20.
;
P60_wr_out:
	push	ax				;
	push	bx
	push	ds
	push	RCODEA_GSEL
	pop	ds					; DS-> R_CODE
	ASSUME	ds:R_CODE

	and	[Current_State],NOT fState_A20Ena	; assume disabled
	test	al, ENABLE_A20			;Q: enabling A20 ?
	jz	SHORT P60_wr_okstate		;  N: state is ok
	or	[Current_State],fState_A20Ena	;  Y: set state to A20 enabled

P60_wr_okstate:
	call	UpdateHMA		; update page table wraparound area

	pop	ds
	ASSUME	ds:_DATA

	or	al, ENABLE_A20			;   to leave A20 enabled
	out	KbdDataPort,al			; "emulate" it

ifndef LC910611
	test	[GenFlags],fVir8042		;Q: Are we virtualizing the 8042?
	jnz	short @f			; Y: don't clear trap
endif
	xor	bx,bx
	mov	ax,KbdDataPort
	call	PortClear
@@:
	pop	bx
	pop	ax				; restore client's byte
P60_exit:
	clc					;  emulated
	ret
P60_Handler	endp

;******************************************************************************
;   P64_Handler - I/O trap handler for port 64h - kybd command port
;
;   ENTRY: Protected Mode Ring 0
;		AL = byte to output to port.
;		BX == 2 * port address
;		DX == 0  => Emulate input
;		   <> 0  => Emulate output
;		DS = _DATA
;		GS = R_CODE
;		SS:BP = points to stack frame on entry to GP fault handler
;
;   EXIT:
;		CLC => I/O emulated.
;		STC => I/O NOT emulated.
;
;   USED:  Flags
;   STACK:
;------------------------------------------------------------------------------
P64_Handler	proc	near
	push	ax
	push	bx

	or	dx,dx			;Q: Output ?
	jz	short P64_exit		;  N: leave
	mov	[p64data],al		;  Y: save new port 64 byte


	cmp	al,0FEh			;Q: Reset CPU?
	jne	short P64chkOutPut	; N: check if it's a output command
;
;  If next instruction is HLT (halt), then halt the CPU
;
	push	si			; save SI
	push	VM2_GSEL
	pop	fs			; FS = selector for VM code segment
	mov	si,[bp][VTFOE].VMTF_EIP	; FS:SI = VM CS:IP
	cmp	byte ptr fs:[si],HALT	;Q: Is reset CPU followed by a HALT?
	pop	si
	jne	short P64_exit		; N: leave
	out	64h,al			; Y: reset CPU and...
	hlt				; HALT the CPU!
;
;  Check if the client is trying an output to keyboard.  If so, need to trap
;  port 60h to determine the value being written (for A20 state).  If not,
;  make sure that port 60h is not being trapped.  This is to prevent a long
;  delay if multiple IRQ 1 handlers are trying to read the scan code.
;
P64chkOutPut:
ifndef LC910611
	test	gs:[GenFlags],fVir8042	;Q: Are we virtualizing the keyboard?
	jz	short @f		; N: continue
	cmp	al,KYBD_RD_ECHO		;Q: Is this a KB echo command?
	jne	short P64_exit		; N: don't clear any trap ports
	mov	[IRQ1Event],TRUE	; Y: assume an IRQ 1 has ocurred
	jmp	short P64_exit		; don't clear any trap ports
@@:
endif
	xor	bx,bx

	cmp	al,KYBD_WR_OUTPUT	;Q: Keyboard output?
	jne	short P64ClearP60	; N: clear port 60h trap
	mov	ax,KbdDataPort		; Y: trap port 60h
	call	PortTrap

ifdef LC910611
	jmp	short P64_exit
endif

P64ClearP60:
ifdef 901108	; Not needed because bit is cleared after P60 trap.  Also,
		; need to speed up access to P64h.
	mov	ax,KbdDataPort
	call	PortClear
endif
P64_exit:
	pop	bx
	pop	ax
	stc				; don't bother to emulate it
	ret
;
P64_Handler	endp

;******************************************************************************
;   P92_Handler - I/O trap handler for port 92h
;
;   ENTRY: Protected Mode Ring 0
;		AL = byte to output to port.
;		BX == 2 * port address
;		DX == 0  => Emulate input
;		   <> 0  => Emulate output
;		DS = _DATA
;		GS = R_CODE
;		SS:BP = points to stack frame on entry to GP fault handler
;
;   EXIT:
;		CLC => I/O emulated.
;		STC => I/O NOT emulated.
;
;   USED:  BX,Flags
;   STACK:
;------------------------------------------------------------------------------

P92_Handler	proc	near

	or	dx,dx			;Q: Output ?
	jnz	SHORT A20_PS2_Write	;  Y: check for write to output port

	mov	al,[SysPortA]		;  N: return shadow

	push	ds
	push	RCODEA_GSEL
	pop	ds
	assume	ds:R_CODE

	and	al,not ENABLE_A20	      ; assume virtual A20 is off
	test	[Current_State],fState_A20Ena ;Q: Is virtual A20 off?
	jz	short P92Rcont		      ; Y: asssumption correct
	or	al,ENABLE_A20	      	      ; N: virtual A20 is on

P92Rcont:
	pop	ds
	assume	ds:_DATA
	clc
	ret

A20_PS2_Write:
	mov	[SysPortA],al		; save it in the shadow

	push	ax
	push	ds
	push	RCODEA_GSEL
	pop	ds			; DS-> R_CODE
	ASSUME	ds:R_CODE

	and	[Current_State],NOT fState_A20Ena	; assume disabled
	test	al,ENABLE_A20			;Q: enabling A20 ?
	jz	SHORT P92_wr_okstate		; N: state is ok
	or	[Current_State],fState_A20Ena	; Y: set state to A20 enabled

P92_wr_okstate:
	call	UpdateHMA		; update page table wraparound area

	pop	ds
	ASSUME	ds:_DATA

	or	al, ENABLE_A20			; to leave A20 enabled
	out	PS2_PORTA,al			; "emulate" it
	pop	ax				; restore client's byte
	clc					;  emulated
	ret

P92_Handler 	endp
;
;******************************************************************************
;   Kybd_Watch - turn on I/O bit map trapping for Kybd A20 line watching
;
;   ENTRY: DS -> _DATA   - real,virtual, or protected mode
;TSSQLEO   ES -> TSS segment
;	   GS = R_CODE
;
;   EXIT: IO_BitMap Updated to trap ports 60h and 64h.
;
;   USED:  AX,Flags
;   STACK:
;------------------------------------------------------------------------------
Kybd_Watch	proc	near
	push	ax
	push	bx

ifndef LC910611
	test	gs:[GenFlags],fNoA20Trap;Q: Trap A20 switching?
	jnz	short KWexit		; N: leave keyboard alone
endif

	xor	bh,bh 		    	; assume EISA/MCA and don't set every 1k

ifdef ROMIDMCA
	cmp	[ROMID],ROMIDISA	;Q: ISA machine?
	jne	short KWPS2		; N: PS2 machine
;LEO	xor	bh,bh 		    	; assume EISA and don't set every 1k
endif

	test	gs:[GenFlags],fEISA+fMCA;Q: EISA or MCA machine?
	jnz	short KWcont		; Y: EISA or MCA
	mov	bh,80h			; N: ISA, reflect every 1K in IO space

KWcont:
;
;  reset flag
;
	mov	[p64data],0
;
;   Set IOBM traps to look for client's disabling of the A20 line
;
ifndef LC910611
	test	gs:[GenFlags],fVir8042	;Q: Trap 8042 data port?
	jz	short @f		; N: leave keyboard alone
	mov	ax, KbdDataPort		; Y: trap data port
	call	PortTrap    		; set traps on keyboard ports
@@:
endif

	mov	ax, KbdCmdPort		    	; in case client
	call	PortTrap    			; set traps on keyboard ports

KWPS2:
	in	al, PS2_PORTA			; get from System Port
	mov	[SysPortA], al			; for PS/2
	mov	ax, PS2_PORTA			; do the same for PS/2 machines
	call	PortTrap

KWexit:
	pop	bx
	pop	ax
	ret

Kybd_Watch	endp

_TEXT	ends				; end of segment

END

=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\emm386\allocmem.asm ===
.386p
	page 58,132
;=============================================================================
	title	A L L O C M E M - allocates memory above 1MB for CEMM
;=============================================================================
;==
;== (C) Copyright MICROSOFT Corp. 1989-1991
;== (C) Copyright COMPAQ Computer Corp. 1989-1991
;==
;==	Title:	EMM386.EXE - MICROSOFT Expanded Memory Manager 386 Driver
;==
;==	Module: AllocMem - Extended memory allocation routines for EMS pool
;==			   and work space.
;==
;==	Version: 1.00
;==
;==	Date:	August 22,1989
;==
;==	Author: Leo Cohen
;==
;=============================================================================
;==
;==	Change Log:
;==
;==	DATE	 REVISION	Description
;==	-------- --------	--------------------------------------------
;==     08/22/89 0.00	        Original
;==
;=============================================================================
;==
;==   Functional Description:
;==
;==   This module was designed to buffer CEMM.EXE from the different allocation
;==   methods which exist for obtaining memory above 1MB.  Three modules
;==   interface to CEMM.EXE:
;==
;==   MemInit: This subroutine is used to initialize data structures which
;==	       will be used by the MemGet routine.  It creates a linked list
;==	       of all available memory above 1 meg in the system (free memory
;==	       list).  It returns in EAX a zero if no free memory is available
;==	       or the top of physical memory if non-zero.
;==
;==   MemGet:  This subroutine is called by CEMM.EXE when memory above 1MB
;==	       is required.  It searches thru the free memory list to find
;== 	       a contiguous memory range to give back.  If a contiguous memory
;==	       range is not found, it will return the largest one found.
;==
;==   MemExit: This subroutine will terminate the allocation process.  It will
;==	       return all free memory and allocate all used memory.  Then it
;==	       will restore all entries to the null list.  It must be
;==	       called before any other program allocates memory.
;==
;==
;==   This may be an overkill, but future PCs may have up to 4GBs of memory,
;==   which may be fragmented throughout the 4GB address space.  Also, bus
;==   master/DMA devices may cause nightmarish boundary restrictions on buffers.
;==   Thus, the complexity of this module allows CEMM maximum flexibility in
;==   allocating memory efficiently.
;==
;==
;==
;==
;=============================================================================
;==	P U B L I C   D E C L A R A T I O N S
;=============================================================================
	public	MemInit
	public	MemGet
	public	MemExit
	public	TotalFreeMem
	public	DoMoveBlock
ifdef ROMcomp
	public	ProtectROM
	public	UnProtectROM
endif
	public	fRSRVD
	public	fXMSMem
	public	fBIMMem
	public	fExtMem
	public	fSupExt

	public	PARA_BOUNDARY
	public	PAGE_BOUNDARY
	public	EMS_BOUNDARY
	public	DMA_BOUNDARY
;=============================================================================
;==	E X T E R N A L  D E C L A R A T I O N S
;=============================================================================
R_CODE	segment
	extrn	ext_rem:word
R_CODE	ends
;=============================================================================
;==	L O C A L   C O N S T A N T S
;=============================================================================
	include vdmseg.inc
	include desc.inc
	include oemdep.inc
	include vdisk.inc
	include	xmm.inc
;=============================================================================
;==	D A T A   S T R U C T U R E S
;=============================================================================
sHeadCell	struc
 HCnext		dw	$	; Pointer to next MCS
 HCprev		dw   $-HCprev	; Pointer to previous MCS
ifndef LC910610
 HCcount	dw	0       ; Linked list count (initially null)
else
 HCcount	db	0       ; Linked list count (initially null)
endif
sHeadCell	ends

sMemConStr	struc
 MCSnext	dw	-1	; Pointer to next MCS
 MCSprev	dw	-1	; Pointer to previous MCS
 MCSflags	dw	0	; Flags for type of memory (below)
 MCShandle	dw	0	; XMS handle
 MCSlen		dd	0	; Length of memory block in bytes
 MCSbase	dd	0	; Base address of memory block
sMemConStr	ends
;
; MCSflags			; Flags for type of memory
;
fRSRVD	equ	00000001b	; reserved
fXMSMem equ	00000010b	; XMS memory
fBIMMem	equ	00000100b	; BIM memory
fExtMem	equ	00001000b 	; Extended memory
fSupExt	equ	00010000b	; Super extended memory
;=============================================================================
;==	C O D E  S E G M E N T
;=============================================================================
LAST	segment
	assume	cs:LAST,ds:LAST
;=============================================================================
;==	L O C A	L   D A T A
;=============================================================================
MemFlags	dw	0	; Flags which control program flow
 fBottomTop	equ	fRSRVD	; bottom to top allocation (int 15 & BIM)
 fXMSused	equ	fXMSMem	; XMS blocks used
 fBIMused	equ	fBIMMem	; BIM was used
 fI15used	equ	fExtMem	; Int 15h memory was used

XMScontrol	dd	0	; Entry point for XMM
XMSversion      dw      0       ; XMS version
XMSintrev       dw      0       ; XMM internal revision number

TopOfMemory	dd	1000000h; default to 16MB

PARA_BOUNDARY	equ	0	; paragraph boundary conditions
PAGE_BOUNDARY	equ	1	; 4K boundary condition
EMS_BOUNDARY	equ	2	; 16K boundary condition
DMA_BOUNDARY	equ	3	; no 64K or 128K boundary crossings

Alignment label	dword
	dd	10h
	dd	1000h
	dd	4000h

MGTBfunc:
	dw	offset TBalignX
	dw	offset TBalignX
	dw	offset TBalignX
	dw	offset TBDMABound
LAST_BOUND	equ	($-MGTBfunc)/2

MGBTfunc:
	dw	offset BTalignX
	dw	offset BTalignX
	dw	offset BTalignX
	dw	offset BTDMABound

;==============================================================================
;==
;==  MemInit: This procedure will initialize data required for use by the
;==	      MemGet routine to obtain extended memory.  It returns in EAX
;==	      a zero if no free memory is available or if non-zero it returns
;==	      the top of physical memory (last addressable byte of physical
;==	      memory).
;==
;==  Entry: (Real Mode)
;==	EAX = EMS pool size requested
;==
;==  Exit:
;==	EAX = Top of physical memory.  Zero, if no memory is available.
;==
;==============================================================================

MemInit	proc	near
	push	esp
	push	ds
	push	eax

	movzx	esp,sp			; access only 64K

	push	cs			; proper data segment
	pop	ds

	or	[MemFlags],fBottomTop	; assume XMS allocation
	call	ChkXMS			; allocate via XMS
	jnc	short MITop		; if OK, exit

	and	[MemFlags],not fBottomTop ; assume INT 15h allocation
	call	ChkInt15Mem		; check extended memory
	call	ChkBIM			; check for BIM

ifdef 910317	; If XMM, allocate memory via XMS
	call	ChkInt15Mem		; check extended memory
ifndef MSFLAG
	call	ChkBIM			; check for BIM
endif
	cmp	[FreeHC].HCcount,0 	;Q: Any free memory available?
	ja	short MItotal		; Y: make sure we have some
MIXMS:
	or	[MemFlags],fBottomTop	; try XMS allocation
	call	ChkXMS
MItotal:
	call	TotalFreeMem
	or	eax,eax			;Q: Any free memory available?
	jz	short MIexit		; N: return a zero

	cmp	eax,[esp]		;Q: Enough for EMS pool?
	ja	short MITop		; Y: get top of memory

	test	[MemFlags],fXMSused	;Q: XMS already used?
	jnz	short MITop 		; Y: get top of memory

	call	ChkXMM			;Q: XMM present?
	jnc	short MITryXMS		; Y: abort Int 15/BIM and try via XMS
endif

MITop:
	mov	eax,[TopOfMemory]       ; top of physical memory
	dec	eax			; last addressable physical memory

MIexit:
	add	sp,4
	pop	ds
	pop	esp
	ret

ifdef 910317
MITryXMS:
	mov	eax,-1			; abort Int15/BIM allocation
	call	MemExit
	jmp	short MIXMS
endif

MemInit	endp

;==============================================================================
;==
;==  MemGet: This procedure returns contiguous memory available.
;==
;==  Entry: (Real Mode)
;==  	EAX = Number of Bytes needed.
;==	 BX = 0 : Paragraph boundary
;==           1 : 4K boundary
;==           2 : DMA boundaries: Don't cross 64K or 128K boundary
;==	EBX = Type of memory (shl 16 fBIMMem,fExtMem,or/and fSupExt)
;==
;==  Exit:
;==  	EAX = Number of Bytes given. (carry flag set if less than asked for.)
;==	EBX = Starting address (flags if carry flag set)
;==
;==============================================================================

MemGet	proc	near
	push	ecx
	push	edx
	push	esi
	push	edi
	push	ds
	push	ebx

	push	cs			; proper data segment
	pop	ds

	cmp	bx,LAST_BOUND		;Q: Correct boundary condition?
	jb	short MGbound		; Y: continue
	xor	ebx,ebx			; N: default to no boundary conditions

MGbound:
	movzx	edi,bx			; move boundary condition flags

	shr	ebx,16			; type of memory to search for
	or	bx,bx			;Q: Specific types required?
	jnz	short MGflags 		; Y: leave specific mask
	not	bx			; N: allow all types
MGflags:
	xor	edx,edx			; init largest block to zero

	test	[MemFlags],fBottomTop	;Q: Allocating from bottom to top (XMS)?
	jnz	short MGBotTop		; Y: search free list from bottom

;
;  Search for contiguous block from top of memory in free list
;
	movzx	esi,[FreeHC].HCprev
	movzx	ecx,[FreeHC].HCcount    ;Q: Any free entries?
	jcxz	MGnotEnough		; N: no memory to give

MGTBloop:
	push	ebx
	test	[esi].MCSflags,bx	;Q: Correct type of memory?
	jz      short MGTBnext		; N: try next entry

	call	word ptr [MGTBfunc][edi*2] ;Q: Satisfy boundary conditions?
	jnc	short MGfound		; Y: found block

	cmp	edx,ebx			;Q: Largest free block so far?
	jae	short MGTBnext		; N: next entry
	mov	edx,ebx			; Y: save the size

MGTBnext:
	pop	ebx
	movzx	esi,[esi].MCSprev
	loop	MGTBloop

	jmp	short MGnotEnough

;
;  Search for contiguous block from bottom of memory in free list (XMS)
;
MGBotTop:
	movzx	esi,[FreeHC].HCnext
	movzx	ecx,[FreeHC].HCcount    ;Q: Any free entries?
	jcxz	MGnotEnough		; N: no memory to give

MGBTloop:
	push	ebx
	test	[esi].MCSflags,bx	;Q: Correct type of memory?
	jz      short MGBTnext		; N: try next entry

	call	word ptr [MGBTfunc][edi*2] ;Q: Satisfy boundary conditions?
	jnc	short MGfound		; Y: found block

	cmp	edx,ebx			;Q: Largest free block so far?
	jae	short MGBTnext		; N: next entry
	mov	edx,ebx			; Y: save the size

MGBTnext:
	pop	ebx
	movzx	esi,[esi].MCSnext
	loop	MGBTloop

;
;  EDX = size of largest block found
;
MGnotEnough:
	mov	eax,edx	    		; largest block available
	pop	ebx			; restore original flags
	stc                             ; error
	jmp	short MGexit

;
;  Found memory.  Delete from free list and add to used list.
;
MGfound:
	mov	ecx,eax
	mov	eax,dword ptr [esi].MCSflags
	call	AddUsedEntry
	or	[MemFlags],ax		; indicate usage of this type of memory
	mov	eax,ecx
	add	esp,8			; restore stack
	clc

MGexit:
	pop	ds
	pop	edi
	pop	esi
	pop	edx
	pop	ecx
	ret
MemGet	endp

;==============================================================================
;==
;==  MemExit: This procedure will allocate all memory received by the
;==	      MemGet routine.
;==	      * The only dependence to the rest of CEMM is that the amount
;==		of INT 15h memory allocated is placed in R_CODE:[ext_rem] *
;==
;==  Entry: (Real Mode)
;==	EAX = -1: abort, <>-1: allocate
;==
;==  Exit:
;==
;==
;==============================================================================

MemExit	proc	near
	push	ds

	push	cs			; proper data segment
	pop	ds

	test	[MemFlags],fXMSused 	;Q: Using XMS allocation?
	jz	short MEint15	    	; N: allocate int 15 and BIM

	call	AllocXMS		; allocate via XMS
	jmp	short MEexit

MEint15:
	cmp	eax,-1			;Q: Abort in progress?
	je	short MEexit		; Y: return all entries to null list

	test	[MemFlags],fI15used 	;Q: Was INT 15h memory used?
	jz	short MEBIM	    	; N: no need to update INT 15h handler

	call	AllocInt15		; allocate extended memory via INT 15h

MEBIM:
	test	[MemFlags],fBIMused 	;Q: Was BIM memory used?
	jz	short MEexit	    	; N: no need to update BIM data structure

	call	AllocBIM		; allocate BIM

MEexit:
	call	ResNullList		; just incase we pass through again

	pop	ds
	ret
MemExit	endp

;==============================================================================
;==
;==  TotalFreeMem: This procedure adds all the free memory in the free list.
;==
;==  Entry: (Real Mode)
;==
;==  Exit:
;==	EAX = Total free memory
;==
;==============================================================================

TotalFreeMem	proc	near
	push	ecx
	push	esi
	push	ds

	mov	ax,seg LAST
	mov	ds,ax

	xor	eax,eax			; initialize free memory amount

;
;  For each entry in the free memory list, add its size
;
	movzx	esi,[FreeHC].HCnext
	movzx	ecx,[FreeHC].HCcount	;Q: Any entries?
	jcxz	short TFMexit		; N: no free memory

TFMnextEntry:
	add	eax,[esi].MCSlen	; add free memory
	movzx	esi,[esi].MCSnext	; next entry
	loop	TFMnextEntry

TFMexit:
	pop	ds
	pop	esi
	pop	ecx
	ret
TotalFreeMem	endp

;==============================================================================
;==
;==  ChkInt15Mem: This procedure adds any extended memory to free memory list
;==
;==  Entry: (Real Mode)
;==
;==  Exit:
;==
;==============================================================================

ChkInt15Mem 	proc near
	push	eax
	push	ebx
	push	ecx
	push	es

	mov	ah,88h 			; Get amount of extended memory
	int	15h

	or	ax,ax	        	;Q: Any extended memory?
	jz	short CIexit		; N: exit

	push	seg R_CODE
	pop	es

assume	es:R_CODE
	mov	es:[ext_rem],ax		; save for CEMM's INT 15h handler
assume	es:LAST

;
;  Add extended memory to free memory list
;
	mov	ebx,100000h		; base address at 1 meg
	movzx	ecx,ax			; length of extended in 1K blocks
	shl	ecx,10			; now in bytes
	mov	eax,fExtMem 	   	; flags: extended memory
ifndef MSFLAG
	call    AddFreeEntry
	call	ChkVDISK		; subtract any VDISK memory
endif
CIexit:
	pop	es
	pop	ecx
	pop	ebx
	pop	eax
	ret
ChkInt15Mem 	endp

;==============================================================================
;==
;==  ChkVDISK: This procedure checks for existing VDISK style allocation and
;==	       if found, deletes it from free memory list.
;==
;==  Entry: (Real Mode)
;==
;==  Exit:
;==
;==============================================================================

ChkVDISK proc	near
	push	eax
	push	ebx
	push	ecx
	push	si
	push	di
	push	es

	les	di,pINT19Vec		; es:di address of int 19h vector
	les	di,es:[di]		; es:di contains int 19h vector
	cld

;
;  Check for "VDISK" string
;
	mov	di,offset V_VDISK	; point to VDISK header
	mov	si,offset VDISK_name	; ds:si points to "VDISK"
	mov	cx,5			; length of "VDISK" string
	repe	cmpsb			;Q: Match?
	jne	short CVexit		; N: no VDISK!

;
;  Now for VDISK type "28h"
;
	mov	di,offset V_TYPE	; point to VDISK type byte
	mov	si,offset VDISK_type
	cmpsb				;Q: vol label attr match?
	jne	short CVexit		; N: not a vdisk
					; Y: must deduct VDISK memory

;
;  Deduct VDISK memory from free list and put it in used list
;
	mov	ebx,100000h		; base address of VDISK's
	movzx	eax,es:[V_ADDRHI] 	; bits 23:16 of last addr used by VDISK
	shl	eax,16			; high byte
	mov	ax,es:[V_ADDRLO] 	; bits 15:00 of last addr used by VDISK
	sub	eax,ebx			; length of VDISKs

;
;  Adjust free memory so VDISK memory is not included
;
	mov	si,[FreeHC].HCnext
ifndef LC910610
	mov	cx,[FreeHC].HCcount	;Q: Any free entries?
else
	movzx	cx,[FreeHC].HCcount	;Q: Any free entries?
endif
	jcxz	short CVerror		; N: error, where did VDISK come from?

	cmp	[si].MCSbase,ebx	;Q: Memory starting @ 1M?
	jne	short CVerror		; N: error, where did VDISK come from?

	add	[si].MCSbase,eax	; new base for free extended memory

	sub	[si].MCSlen,eax		;Q: Enough memory for VDISK?
	jb	short CVerror		; N: error, where did VDISK come from?
	ja	short CVexit		; Y: leave remaining free memory

	call	DelFreeEntry		; it all belongs to the VDISK

CVexit:
	pop	es
	pop	di
	pop	si
	pop	ecx
	pop	ebx
	pop	eax
	ret

CVerror:
;int 1	;error
	jmp	short CVexit
ChkVDISK	endp

;==============================================================================
;==
;==  ChkBIM: This procedure checks available BIM on a COMPAQ 386 machine and
;==	     if available memory is found, it's added to the free list.
;==
;==  Entry: (Real Mode)
;==
;==  Exit:
;==
;==============================================================================

ChkBIM  proc	near
	push	eax
	push	ebx
	push	ecx
	push	si
	push	di
	push	es

;
;  Check to see if we're on a Compaq 386 machine
;
	les	di,[pCOMPAQ]		; es:di points to possible COMPAQ signature
	mov	si,offset szCOMPAQ 	; "03COMPAQ"
	mov	cx,8
	cld
	rep	cmpsb			;Q: COMPAQ 386 machine?
	jne	short CBexit		; N: no BIM on this machine

	mov	bx,pBIMCtlStruct	; Y: es:bx points to ptr of BIM data structure
	mov	bx,es:[bx]		; es:bx points to BIM data structure

	cmp	es:[bx].AVAILABLE,-1	;Q: Is there a 32-bit memory installed?
	je	short CBexit		; N: return
	movzx	ecx,es:[bx].AVAILBIM 	;Q: Any BIM available?
	jcxz	short CBexit		; N: return
ifndef LC910611
	cmp	cx,es:[bx].TOTALBIM 	;Q: Is there more avail than total?
	ja	short CBexit		; Y: something is wrong!
endif					; N: add to free memory list

;
;  Add available BIM to free memory list
;

	shl	ecx,4		    	; size in bytes
	mov	ax,es:[bx].LASTUSED 	; last used paragraph
	sub	ax,es:[bx].AVAILBIM
;
;  One more check, some dirty programs (i.e., NORTON's PCSHADOW.SYS) will not
;  leave the BIM data structure in a stable state.
;
	add	ax,es:[bx].TOTALBIM	;Q: Can never be above 16MB!
	jc	short CBexit		; Y: it is, don't add memory
	cmp	ax,0E000h		;Q: BIM can never be above 16MB-128K!
	ja	short CBexit		; Y: it is, don't add memory
	sub	ax,es:[bx].TOTALBIM

	movzx	ebx,ax
 	add	ebx,0F0000h		; starting paragraph address for BIM
	shl	ebx,4			; starting address of BIM

	mov	eax,fBIMMem     	; flags: BIM memory
	call	AddFreeEntry		; EAX=flags, EBX=start, ECX=size

CBexit:
	pop	es
	pop	di
	pop	si
	pop	ecx
	pop	ebx
	pop	eax
	ret
ChkBIM	endp

;==============================================================================
;==
;==  ChkXMS: This procedure checks if XMS memory is available, and if it's
;==	     found, it's added to the free memory list.
;==
;==  Entry: (Real Mode)
;==
;==  Exit:
;==
;==============================================================================

ChkXMS	proc	near
	pushad

	call	ChkXMM			;Q: Is XMM installed?
	jc	CXexitX			; N: exit (no XMS memory) set carry
;910317	jc	CXexit			; N: exit (no XMS memory)
					; Y: get XMM entry point
;
;  XMM is installed
;
	mov	ax,4310h	        ; get XMM routine address
	int	2fh
	mov	word ptr [XMScontrol],bx; save entry point
	mov	word ptr [XMScontrol+2],es

	mov	ah,XMM_GET_VERSION	; get XMS version number
	call	[XMScontrol]	        ; (note: due to problems with HIMEM.SYS
	mov	[XMSversion],ax	        ;  prior to VER 2.06, we might not want
	mov	[XMSintrev],bx 	        ;  to use anything lower).

;
;  Grab all free blocks from the XMM and place them in the free list
;
CXloop:
	mov	ah,XMM_QUERY_FREE_EXTMEM; query largest contiguous block size
	call	[XMScontrol]
	movzx	ecx,ax			;Q: Any more free memory?
	jcxz    short CXunlock		; N: unlock all the blocks allocated

	mov	ah,XMM_ALLOC_EMB	; allocate this block
	mov	dx,cx			; size to allocate
	call	[XMScontrol]
	or	ax,ax			;Q: Did we allocate the block?
	jz	short CXerror		; N: this should never happen

	mov	ah,XMM_LOCK_EMB		; lock the address of this block
	mov	si,dx			; save handle for later use

	call	[XMScontrol]
	or	ax,ax			;Q: Did we lock the block?
	jz	short CXerror		; N: this should never happen

	mov	ax,si			; fill in info about block
	shl	eax,16			; handle
	or	eax,fXMSMem		; flag indicating XMS memory
	shl	edx,16                  ; base address
	and	ebx,0FFFFh
	or	ebx,edx
	cmp	ebx,1000000h		;Q: Super extended (>16MB)?
	jb	short CXTopMem		; N: check if top of memory
	or	eax,fSupExt		; Y: flag it
CXTopMem:
	shl	ecx,10			; size in bytes
	add	ebx,ecx			; top of block
	cmp	ebx,[TopOfMemory]	;Q: New top of memory?
	jbe	short CXAddEntry	; N: don't update
	mov	[TopOfMemory],ebx	; Y: new top of memory
CXAddEntry:
	sub	ebx,ecx			; restore base
	call	AddFreeEntry		; add to free memory list
	or	[MemFlags],fXMSused	; indicate allocation via XMS

	jmp	short CXloop 		; next free memory block

CXunlock:
;
;  Unlock all the blocks (The addresses and lengths are all known)
;
	movzx	esi,[FreeHC].HCnext
	movzx	ecx,[FreeHC].HCcount	;Q: Any entries?
	jcxz	short CXexit		; N: no XMS blocks allocated

CXnextEntry:
	mov	ah,13			; unlock function
	mov	dx ,[esi].MCShandle	; get handle
	call	[XMScontrol]
	or	ax,ax			;Q: Did we unlock the block?
	jz	short CXerror		; N: this should never happen

	movzx	esi,[esi].MCSnext	; next entry
	loop	CXnextEntry

CXexit:
	clc
CXexitX:
	popad
	ret

CXerror:
int 1;QLEO ;error	; If errors are ever allowed in this subroutine,
	stc		; we must unlock the handles already allocated before
	popad		; leaving!!!
	ret
ChkXMS	endp

;==============================================================================
;==
;==  ChkXMM: This procedure checks if an XMM is installed on the system.
;==
;==  Entry: (Real Mode)
;==
;==  Exit:
;==
;==============================================================================

ChkXMM	proc	near
	push	ax

	mov	ax,4300h		; XMM detect function
	int	2fh
	cmp	al,80h			;Q: Is XMM installed?
	pop	ax
	jne	CXnotInstalled		; N: exit (no XMS memory)
	clc				; Y: indicate an XMM present
	ret

CXnotInstalled:
	stc
	ret
ChkXMM	endp

;==============================================================================
;==
;==  AllocXMS: This procedure allocates via XMS.  If an abort is in progress,
;==	       a release of all blocks will occur.  If no abort, a block will
;==	       either be resized or released.
;==
;==  Entry: (Real Mode)
;==
;==  Exit:
;==
;==============================================================================

AllocXMS proc	near

	cmp	eax,-1			;Q: Abort in progress?
	je	short AXabort		; Y: release all handles/blocks

	call	AllocXMSused		; release free XMS memory
	jmp	short AXexit

AXabort:
	call	ReleaseXMS              ; release all XMS memory

AXexit:
	ret
AllocXMS	endp

;==============================================================================
;==
;==  AllocInt15: This procedure allocates Int 15h memory.
;==	         * The only dependence to the rest of CEMM is that the amount
;==		   of INT 15h memory remaining free is placed in
;==		   R_CODE:[ext_rem]. *
;==
;==  Entry: (Real Mode)
;==
;==  Exit:
;==
;==============================================================================

AllocInt15 proc	near
	push	eax
	push	ebx
	push	edx
	push	edi
	push	es

;
;  Get the range of used INT 15h memory
;
	mov	edi,offset UsedHC	; used memory list
	mov	edx,fExtMem		; extended memory flag
	call	MemRange

;
;  EBX = starting address of used extended memory (INT 15h)
;
	sub	ebx,100000h		; number of bytes still free
	shr	ebx,10			; round down to 1k blocks

	mov	ax,seg R_CODE
	mov	es,ax

assume	es:R_CODE

	mov	es:[ext_rem],bx		; save for CEMM's INT 15h handler

assume	es:LAST

	pop	es
	pop	edi
	pop	edx
	pop	ebx
	pop	eax
	ret
AllocInt15	endp

;==============================================================================
;==
;==  AllocBIM: This procedure allocates needed BIM
;==
;==  Entry: (Real Mode)
;==
;==  Exit:
;==
;==============================================================================

AllocBIM proc	near
	push	eax
	push	ebx
	push    edx
	push	di
	push	es

;
;  Get the range of used BIM memory
;
	mov	edi,offset UsedHC	; used memory list
	mov	edx,fBIMMem		; BIM memory flag
	call	MemRange

;
;  EBX = starting address of used BIM memory
;
	sub	ebx,0F00000h		; get paragraph starting address
	shr	ebx,4

	mov	di,RomSeg		; put ROM segment in ES
	mov	es,di
	mov	di,pBIMCtlStruct	; es:bx points to ptr of BIM data structure
	mov	di,es:[di]		; es:bx points to BIM data structure
ifdef ROMcomp
	cmp	es:[di].AVAILABLE,-1	;Q: If ROM compression is BIM available?
	je	short ABexit		; N: exit, don't mark allocated
endif
	sub	bx,es:[di].LASTUSED 	; number of paragraphs used

	call	UnProtectROM

	add	es:[di].AVAILBIM,bx 	; free BIM
	add	es:[di].LASTUSED,bx 	; last used paragraph

	call	ProtectROM

ifdef ROMcomp
ABexit:
endif
	pop	es
	pop	di
	pop	edx
	pop	ebx
	pop	eax
	ret
AllocBIM	endp

;==============================================================================
;==
;==  AllocXMSused: This procedure allocates used memory via XMS.  All allocated
;==	           XMS blocks will either be released, resized, or unchanged.
;==
;==  Entry: (Real Mode)
;==
;==  Exit:
;==
;==============================================================================

AllocXMSused proc	near
	pushad
	push	esp
	push	es

assume	es:R_CODE
	mov	ax,seg R_CODE
	mov	es,ax
	mov	ah,88h
	int	15h			; don't change current INT 15h reading
	mov	es:[ext_rem],ax		; save for CEMM's INT 15h handler
	pop	es
assume	es:LAST

	movzx	esp,sp			; access only 64K
	xor	edx,edx
;
;  For each handle in the free memory block, either resize it or release it
;

	mov	edi,offset FreeHC
	movzx	ecx,[edi].HCcount
	or	cx,cx			;Q: Any entries?
	jz	AXuExit			; N: all free memory allocated

	movzx	esi,[edi].HCnext	; first entry

AXuNextEntry:
	cmp	edx,dword ptr [esi].MCSflags ;Q: Same handle?
	jne	short AXuNewHandle	     ; N: process this handle
AXuCont:
	movzx	esi,[esi].MCSnext	     ; Y: get next handle
	loop	AXuNextEntry

	jmp	AXuExit			; finished all handles

;
;  Get this handles range in the free memory list
;
AXuNewHandle:
	mov	edx,dword ptr [esi].MCSflags ; get handle/flags

	call	MemRange		;Q: Handle range in this (free) list?
	jc	AXuError		; N: we know the handle is in free list

	push	eax
	push	ebx
	push	edi

;
;  Get this handle's range in the used memory list
;
	mov	edi,offset UsedHC
	call	MemRange	      	;Q: Handle range in used list?
	pop	edi
	jc	short AXuRelease	; N: handle must be released

;
;  Figure out the used size of the handle
;
	sub	ebx,[esp][0]		;Q: Do we have the original base?
	jbe	short AXuResize		; Y: conitnue
	add     eax,ebx			; N: increase length
	xor	ebx,ebx			; set up to get original base

AXuResize:
	add	ebx,[esp][0]		; now we have original handle base

	add	eax,400h-1		; round to 1K boundary
	and	eax,not (400h-1)

;
;  Resize this handle to the amount used
;
	shr	eax,10			; 1K blocks
	mov	bx,ax
	push	edx			; save handle/flags
	shr	edx,16			; handle
	mov	ah,15			; resize function
	call	[XMScontrol]
	pop	edx
	or	ax,ax			;Q: Did the resize occur?
	jz	short AXuErrorX		; N: CEMM will keep the entire block
	jmp	short AXuStack		; Y: clean up stack

;
;  Release this handle
;
AXuRelease:
	push	edx			; save handle/flags
	shr	edx,16			; handle
	mov	ah,10			; release this handle (free block)
	call	[XMScontrol]
	pop	edx
	or	ax,ax			;Q: Is the memory free?
	jz	short AXuErrorX		; N: CEMM will hog all of memory

AXuStack:
	add	esp,8			; clean up stack
	jmp	AXuCont			; get next entry

AXuExit:
	clc
	pop	esp
	popad
	ret

AXuErrorX:
	add	esp,8			; clean up stack
AXuError:
;int 1	;error
	stc
	pop	esp
	popad
	ret
AllocXMSused	endp

;==============================================================================
;==
;==  ReleaseXMS: This procedure releases all XMS handles.  No error checking
;==		 because it may release the same handle multiple times.  This
;==		 will cause errors on releases after the first.
;==
;==  Entry: (Real Mode)
;==
;==  Exit:
;==
;==============================================================================

ReleaseXMS proc	near
	push	ax
	push	dx
	push	ecx
	push	esi

;
;  For each handle in the free memory block, release it!
;
	movzx	esi,[FreeHC].HCnext
	movzx	ecx,[FreeHC].HCcount	;Q: Any entries?
	jcxz	short RXused		; N: all free memory allocated

RXnextFree:
	mov	ah,10			; free memory function
	mov	dx ,[esi].MCShandle	; get handle to release
 	call	[XMScontrol]

	movzx	esi,[esi].MCSnext	; next entry
	loop	RXnextFree

;
;  For each handle in the used memory block, release it!
;
RXused:
	movzx	esi,[UsedHC].HCnext
	movzx	ecx,[UsedHC].HCcount	;Q: Any entries?
	jcxz	short RXexit		; N: all free memory allocated

RXnextUsed:
	mov	ah,10			; free memory function
	mov	dx ,[esi].MCShandle	; get handle to release
	call	[XMScontrol]

	movzx	esi,[esi].MCSnext	; next entry
	loop	RXnextUsed

RXexit:
	pop	esi
	pop	ecx
	pop	dx
	pop	ax
	ret
ReleaseXMS	endp

;==============================================================================
;==
;==  TBalignX: Returns the first block of memory satisfying the alignment
;==	      criteria (starting at the top of memory). Or the largest
;==	      contiguous block.
;==
;==  Entry: (Real Mode)
;==	EAX = Size of contiguous memory required
;==     ESI = Free entry pointer
;==	EDI = Boundary condition
;==
;==  Exit:
;==	EAX = Size  (carry not set)
;==	EBX = Base Address
;==     ESI = Free entry pointer
;==
;==	EAX = same  (carry set)
;==	EBX = Size of largest contiguous block
;==     ESI = Free entry pointer
;==
;==============================================================================

TBalignX	proc	near
	push	edx
;
;  Get upper block (top)
;
	mov	edx,cs:[Alignment][edi*4] ; alignment
	call	TBAlign

	pop	edx
	ret
TBalignX	endp

;==============================================================================
;==
;==  BTalignX: Returns the first block of memory satisfying the alignment
;==	      criteria (starting at the bottom of memory). Or the largest
;==	      contiguous block.
;==
;==  Entry: (Real Mode)
;==	EAX = Size of contiguous memory required
;==     ESI = Free entry pointer
;==	EDI = Boundary condition
;==
;==  Exit:
;==	EAX = Size  (carry not set)
;==	EBX = Base Address
;==     ESI = Free entry pointer
;==
;==	EAX = same  (carry set)
;==	EBX = Size of largest contiguous block
;==     ESI = Free entry pointer
;==
;==============================================================================

BTalignX	proc	near
	push	edx
;
;  Get lower block (bottom)
;
	mov	edx,cs:[Alignment][edi*4] ; alignment
	call	BTAlign

	pop	edx
	ret
BTalignX	endp

ifdef QEMS
;==============================================================================
;==
;==  TBParaBound: Returns the top portion of the memory block required or the
;==		  largest contiguous block.
;==
;==  Entry: (Real Mode)
;==	EAX = Size of contiguous memory required
;==     ESI = Free entry pointer
;==
;==  Exit:
;==	EAX = Size  (carry not set)
;==	EBX = Base Address
;==     ESI = Free entry pointer
;==
;==	EAX = same  (carry set)
;==	EBX = Size of largest contiguous block
;==     ESI = Free entry pointer
;==
;==============================================================================

TBParaBound proc	near
	push	edx
;
;  Get upper block (top)
;
	mov	edx,10h			; paragraph alignment
	call	TBAlign

	pop	edx
	ret
TBParaBound	endp

;==============================================================================
;==
;==  BTParaBound: Returns the bottom portion of the memory block required or the
;==		  largest contiguous block.
;==
;==  Entry: (Real Mode)
;==	EAX = Size of contiguous memory required
;==     ESI = Free entry pointer
;==
;==  Exit:
;==	EAX = Size  (carry not set)
;==	EBX = Base Address
;==     ESI = Free entry pointer
;==
;==	EAX = same  (carry set)
;==	EBX = Size of largest contiguous block
;==     ESI = Free entry pointer
;==
;==============================================================================

BTParaBound proc	near
	push	edx
;
;  Get lower block (bottom)
;
	mov	edx,10h			; paragraph alignment for i486
	call	BTAlign

	pop	edx
	ret
BTParaBound	endp

;==============================================================================
;==
;==  TBPageBound: Returns the top 4K page aloigned memory block in the free
;==		  entry or the largest 4K page aligned contiguous block.
;==
;==  Entry: (Real Mode)
;==	EAX = Size of contiguous memory required
;==     ESI = Free entry pointer
;==
;==  Exit:
;==	EAX = Size  (carry not set)
;==	EBX = Base Address
;==     ESI = Free entry pointer
;==
;==	EAX = same  (carry set)
;==	EBX = Size of largest contiguous block
;==     ESI = Free entry pointer
;==
;==============================================================================

TBPageBound proc	near
	push	edx
;
;  Get upper 4K aligned block (top)
;
	mov	edx,1000h		; 4K byte (page) alignment
	call	TBAlign

	pop	edx
	ret
TBPageBound	endp

;==============================================================================
;==
;==  BTPageBound: Returns the bottom 4K page aligned block int the free entry
;==		  or the largest 4K page aligned contiguous block.
;==
;==  Entry: (Real Mode)
;==	EAX = Size of contiguous memory required
;==     ESI = Free entry pointer
;==
;==  Exit:
;==	EAX = Size  (carry not set)
;==	EBX = Base Address
;==     ESI = Free entry pointer
;==
;==	EAX = same  (carry set)
;==	EBX = Size of largest contiguous block
;==     ESI = Free entry pointer
;==
;==============================================================================

BTPageBound proc	near
	push	edx
;
;  Get lower 4K aligned block (bottom)
;
	mov	edx,1000h		; 4K byte (page) alignment
	call	BTAlign

	pop	edx
	ret
BTPageBound	endp
endif

;==============================================================================
;==
;==  TBDMABound: Returns the top portion of memory which does not cross a
;==		 64/128K boundary.  If larger than 64K, it will be 128K aligned.
;==		 If not found, the size of the largest block which meets the
;==		 above criteria will be returned.
;==
;==  Entry: (Real Mode)
;==	EAX = Size of contiguous memory required
;==     ESI = Free entry pointer
;==
;==  Exit:
;==	EAX = Size  (carry not set)
;==	EBX = Base Address
;==     ESI = Free entry pointer
;==
;==	EAX = same  (carry set)
;==	EBX = Size of largest contiguous block
;==     ESI = Free entry pointer
;==
;==============================================================================

TBDMABound proc	near
	push	edx

	cmp	eax,10000h		;Q: Less than a 64K buffer needed?
	jle	short TBDB64K		; Y: don't cross a 64K boundary.

;
;  DMA buffer > 64K is needed. For it to be useful it must be 128K aligned.
;
	mov	edx,20000h		; 128K aligned block
	call	TBAlign

	jmp	short TBDBexit

;
;  DMA buffer < 64K is needed. It may not cross a 64K boundary.
;
TBDB64K:
	mov	edx,10000h		; don't cross a 64K boundary
	call	TBNoCross

TBDBexit:
	pop	edx
	ret
TBDMABound	endp

;==============================================================================
;==
;==  BTDMABound: Returns the bottom portion of memory which does not cross a
;==		 64/128K boundary.  If larger than 64K, it will be 128K aligned.
;==		 If not found, the size of the largest block which meets the
;==		 above criteria will be returned.
;==
;==  Entry: (Real Mode)
;==	EAX = Size of contiguous memory required
;==     ESI = Free entry pointer
;==
;==  Exit:
;==	EAX = Size  (carry not set)
;==	EBX = Base Address
;==     ESI = Free entry pointer
;==
;==	EAX = same  (carry set)
;==	EBX = Size of largest contiguous block
;==     ESI = Free entry pointer
;==
;==============================================================================

BTDMABound proc	near
	push	edx

	cmp	eax,10000h		;Q: Less than a 64K buffer needed?
	jle	short BTDB64K		; Y: don't cross a 64K boundary.

;
;  A DMA buffer > 64K is needed. For it to be useful it must be 128K aligned.
;
	mov	edx,20000h		; 128K aligned block
	call	BTAlign

	jmp	short BTDBexit

;
;  DMA buffer < 64K is needed. It may not cross a 64K boundary.
;
BTDB64K:
	mov	edx,10000h		; don't cross a 64K boundary
	call	BTNoCross

BTDBexit:
	pop	edx
	ret
BTDMABound	endp

;==============================================================================
;==
;==  TBAlign: Returns the top aligned memory block in the free entry or the
;==	      largest aligned contiguous block.
;==
;==  Entry: (Real Mode)
;==	EAX = Size of contiguous memory required
;==	EDX = Alignment required
;==     ESI = Free entry pointer
;==
;==  Exit:
;==	EAX = Size  (carry not set)
;==	EBX = Base Address
;==	EDX = undefined
;==     ESI = Free entry pointer
;==
;==	EAX = same  (carry set)
;==	EBX = Size of largest contiguous block
;==	EDX = Alignment required
;==     ESI = Free entry pointer
;==
;==============================================================================

TBAlign proc	near

;
;  Get upper aligned block (top)
;
	mov	ebx,[esi].MCSbase  	; starting address of free memory range
	add	ebx,[esi].MCSlen	; ending address of free memory range
	neg	edx			; mask to round down for alignment

	sub	ebx,eax			;Q: Possible starting address > 0
	jbe	short TBAnotEnough	; N: definitely not enough

	and	ebx,edx			; aligned address

	cmp	ebx,[esi].MCSbase       ;Q: Still in free memory range?
	jb	short TBAnotEnough	; N: get largest block with alignment
	neg	edx			; Y: found an aligned block
	clc
	jmp	short TBAexit

TBAnotEnough:
	mov	ebx,[esi].MCSbase	; starting address of free memory range
	dec	ebx
	and	ebx,edx			; low alignement
	neg	edx			; alignemnt
	add	ebx,edx			; correct alignment
	sub	ebx,[esi].MCSbase	; amount lost due to alignment

	cmp	ebx,[esi].MCSlen	;Q: Used up all memory during alignment?
	jbe	short TBAmax		; N: get max size
	xor	ebx,ebx			; Y: no memory available with this alignment
	stc
	jmp	short TBAexit

TBAmax:
	neg	ebx
	add	ebx,[esi].MCSlen	; largest aligned block allowed
	stc

TBAexit:
	ret
TBAlign	endp

;==============================================================================
;==
;==  BTAlign: Returns the bottom aligned block in the free entry or the
;==	      largest aligned contiguous block.
;==
;==  Entry: (Real Mode)
;==	EAX = Size of contiguous memory required
;==	EDX = Alignment required
;==     ESI = Free entry pointer
;==
;==  Exit:
;==	EAX = Size  (carry not set)
;==	EBX = Base Address
;==	EDX = undefined
;==     ESI = Free entry pointer
;==
;==	EAX = same  (carry set)
;==	EBX = Size of largest contiguous block
;==	EDX = Alignment required
;==     ESI = Free entry pointer
;==
;==============================================================================

BTAlign proc	near
;
;  Get lower aligned block
;
	neg	edx			; mask for alignement
	mov	ebx,[esi].MCSbase	; starting address of free memory range
	dec	ebx
	and	ebx,edx			; low alignement
	neg	edx			; alignemnt
	add	ebx,edx			; correct alignment
	sub	ebx,[esi].MCSbase	; amount lost due to alignment

	cmp	ebx,[esi].MCSlen	;Q: Used up all memory during alignment?
	jb	short BTAmax		; N: get max size
	xor	ebx,ebx			; Y: no memory available with this alignment
	stc
	jmp	short BTAexit

BTAmax:
	neg	ebx
	add	ebx,[esi].MCSlen	; largest aligned block allowed

	cmp	ebx,eax			;Q: Enough for request?
	jae	short BTAfound		; Y: get starting address
	stc				; N: return largest size available
	jmp	short BTAexit

BTAfound:
	neg	edx			; mask for alignement
	mov	ebx,[esi].MCSbase	; starting address of free memory range
	dec	ebx
	and	ebx,edx			; low alignement
	neg	edx			; alignemnt
	add	ebx,edx			; correct alignment
	clc

BTAexit:
	ret
BTAlign	endp

;==============================================================================
;==
;==  TBNoCross: Returns the top memory block in the free entry or the largest
;==	      	contiguous block which does not cross a boundary.
;==		NOTE: EAX <= EDX must hold for this routine to make any sense!
;==
;==  Entry: (Real Mode)
;==	EAX = Size of contiguous memory required
;==	EDX = Boundary not to cross
;==     ESI = Free entry pointer
;==
;==  Exit:
;==	EAX = Size  (carry not set)
;==	EBX = Base Address
;==	EDX = undefined
;==     ESI = Free entry pointer
;==
;==	EAX = same  (carry set)
;==	EBX = Size of largest contiguous block
;==	EDX = Boundary not to cross
;==     ESI = Free entry pointer
;==
;==============================================================================

TBNoCross proc	near
	push	ecx
	push	edx

	mov	ebx,[esi].MCSbase
	add	ebx,[esi].MCSlen
	mov	ecx,ebx			; end of free memory block
	dec	ecx
	neg	edx
	and	ecx,edx			; top boundary
	sub	ebx,eax                 ; possible starting address

	cmp	ebx,ecx			;Q: Did it cross a boundary?
	jb	short TBNCTopMax	; Y: get maximum above boundary

	cmp	ebx,[esi].MCSbase	;Q: Within range?
	jae	short TBNCFound		; Y: found a block
	mov	ebx,[esi].MCSlen        ; N: largest available size

	jmp	short TBNCLargest

TBNCTopMax:
	mov	edx,[esi].MCSbase	; get largest block above boundary
	add	edx,[esi].MCSlen
	sub	edx,ecx

;
;  Try below the boundary address (ECX).
;
	mov	ebx,ecx
	sub	ebx,eax                 ; possible starting address

	cmp	ebx,[esi].MCSbase	;Q: Within range?
	jae	short TBNCFound		; Y: found a block
	mov	ebx,ecx			; N: get largest block below boundary

	sub	ebx,[esi].MCSbase

;
;  Figure out which block was larger, above or below the boundary.
;

	cmp	edx,ebx			;Q: Above the boundary?
	jae	short TBNCAbove		; Y: get largest size above 64K alignment
					; N: largest block below 64K alignment
	jmp	short TBNCLargest

TBNCAbove:
	mov	ebx,edx			; largest block above 64K alignment

;
;  Requested size not found, will return the largest available.
;
TBNCLargest:
	stc
	jmp 	short TBNCexit

;
;  Block was found
;
TBNCFound:
	clc

TBNCexit:
	pop	edx
	pop	ecx
	ret
TBNoCross	endp

;==============================================================================
;==
;==  BTNoCross: Returns the lowest memory block in the free entry or the
;==	      	largest contiguous block which does not cross a boundary.
;==		NOTE: EAX <= EDX must hold for this routine to make any sense!
;==
;==  Entry: (Real Mode)
;==	EAX = Size of contiguous memory required
;==	EDX = Boundary not to cross
;==     ESI = Free entry pointer
;==
;==  Exit:
;==	EAX = Size  (carry not set)
;==	EBX = Base Address
;==	EDX = undefined
;==     ESI = Free entry pointer
;==
;==	EAX = same  (carry set)
;==	EBX = Size of largest contiguous block
;==	EDX = Boundary not to cross
;==     ESI = Free entry pointer
;==
;==============================================================================

BTNoCross proc	near
	push	ecx
	push	edx

	mov	ebx,[esi].MCSbase	; starting address
	mov	ecx,ebx			; get lowest boundary
	dec	edx
	add	ecx,edx
	not	edx
	and	ecx,edx
	mov	edx,ecx
	sub	edx,ebx			; size before hitting boundary

	cmp	edx,eax			;Q: Enough room below boundary?
	jb	short BTNCBotMax	; N: get maximum size below boundary

	cmp	edx,[esi].MCSlen	;Q: Enough room in free entry?
	jbe	short BTNCFound		; Y: found the block

	mov	ebx,[esi].MCSlen	; largest block available
	jmp	short BTNCLargest

;
;  Find largest size below boundary
;
BTNCBotMax:
	cmp	edx,[esi].MCSlen	;Q: Enough room in free entry?
	jbe	short BTNCTop		; Y: get size above boundary
	mov	ebx,[esi].MCSlen	; N: largest block
	jmp	short BTNCLargest

;
;  Get size above the boundary
;
BTNCTop:
	mov	ebx,ecx			; boundary
	sub	ecx,[esi].MCSbase	; amount lost by boundary
	neg	ecx
	add	ecx,[esi].MCSlen	; amount above boundary

	cmp	ecx,eax			;Q: Enough memory to fulfill request?
	jae	short BTNCFound		; Y: found the block

	mov	ebx,ecx                 ; size of buffer above boundary

	cmp	ebx,edx			;Q: Largest buffer above boundary?
	ja	short BTNCLargest	; Y: return size
	mov	ebx,edx			; N: get size of buffer below boundary

;
;  Requested size not found, will return the largest available.
;
BTNCLargest:
	stc
	jmp	short BTNCexit

;
;  Block was found
;
BTNCFound:
	clc

BTNCexit:
	pop	edx
	pop	ecx
	ret
BTNoCross	endp

;==============================================================================
;==
;==  MemRange: This procedure returns the range of a specific memory in a list
;==
;==  Entry: (Real Mode)
;==     EDI = Head cell for list
;==	EDX = Flags/handle
;==
;==  Exit:
;==	EAX = Size
;==	EBX = Base Address
;==
;==============================================================================

MemRange proc	near
	push	ecx
	push	edi

	xor	eax,eax 		; initialize
	xor	ebx,ebx

	movzx	ecx,[edi].HCcount	;Q: Any entries?
	jcxz	short MRerror		; N: should not happen

;
;  Find an entry with the handle in list
;
MRfindHandle:
	movzx	edi,[edi].MCSnext
	cmp	edx,dword ptr [edi].MCSflags ;Q: Correct handle?
	je	short MRfoundHandle	     ; Y: found handle
	loop	MRfindHandle

	jmp	short MRnotFound	; handle not found
;
;  Handle was found in list.
;
MRfoundHandle:
	mov	ebx,[edi].MCSbase       ; first handle is base
	jmp	short MRcont

MRnextEntry:
	movzx	edi,[edi].MCSnext
	cmp	edx,dword ptr [edi].MCSflags ;Q: Same handle?
	jne	short MRlast		     ; N: done for this handle
MRcont:
	mov	eax,[edi].MCSlen
	add	eax,[edi].MCSbase       ; last address of memory range
	loop	MRnextEntry

MRlast:
	sub	eax,ebx			; size of range

	clc
	pop	edi
	pop	ecx
	ret

MRerror:
;int 1	;error
MRnotFound:
	stc
	pop	edi
	pop	ecx
	ret
MemRange	endp

;==============================================================================
;==
;==  ResNullList: This procedure deletes all entries from the used and free
;==		  lists and enters them in the null list
;==
;==  Entry: (Real Mode)
;==
;==  Exit:  (same)
;==
;==============================================================================

ResNullList 	proc	near
	push	eax
	push	ecx
	push    esi
	push	edi

;
;  Delete all free list entries
;
	mov	edi,offset FreeHC
	movzx	ecx,[edi].HCcount	;Q: Any entries?
	jcxz    short RNLused		; N: delete used entries
	movzx	esi,[edi].HCnext        ; Y: get first entry
RNLnxtFree:
	movzx	eax,[esi].MCSnext       ; save next entry (before unlinking)
	cmp	esi,edi			;Q: Head cell?
	je	short RNLerror		; Y: the count was wrong
	call	DelFreeEntry		; N: delete this entry
	mov	esi,eax			; get next entry
	loop	RNLnxtFree

;
;  Delete all used list entries
;
RNLused:
	mov	edi,offset UsedHC
	movzx	ecx,[edi].HCcount	;Q: Any entries?
	jcxz    short RNLexit		; N: exit
	movzx	esi,[edi].HCnext        ; Y: get first entry
RNLnxtUsed:
	movzx	eax,[esi].MCSnext       ; save next entry (before unlinking)
	cmp	esi,edi			;Q: Head cell?
	je	short RNLerror		; Y: the count was wrong
	call	DelUsedEntry		; N: delete this entry
	mov	esi,eax			; get next entry
	loop	RNLnxtUsed

RNLexit:
	clc
	pop	edi
	pop	esi
	pop	ecx
	pop	eax
	ret

RNLerror:
	stc
	pop	edi
	pop	esi
	pop	ecx
	pop	eax
	ret

ResNullList	endp

;==============================================================================
;==
;==  AddUsedEntry: This procedure is passed a used memory range found within
;==		   a free memory range.  It then removes the used memory from
;==		   the free MCS entry and links the entry into the used list.
;==		   The original free MCS entry may need to be: 1) removed from
;==		   the free MCS list (if the used entry encompasses all of its
;==		   memory range), 2) resized (if the used entry's range is at
;==		   beginning or the end of the free entry's range), and 3) split
;==		   into two entries (if the used entry's range splits the old
;==		   free entry's range into two non-contiguous regions).
;==
;==  Entry: (Real Mode)
;==	EAX = Flags in low 16 bits, XMS handle in high 16 bits
;==  	EBX = Base address of memory block
;==	ECX = Length of memory block
;==
;==  Exit:  (same)
;==
;==============================================================================

AddUsedEntry	proc	near
	push	eax
	push	ebx
	push	ecx
	push	esi
	push	edi

	call	GetNullEntry      	; get an MCS entry

	mov	[esi].MCSbase,ebx       ; fill in info
	mov	[esi].MCSlen,ecx
	mov	dword ptr [esi].MCSflags,eax

	mov	edi,offset UsedHC	; link entry into used list
	call	LinkEntry

;
;  Look for free entry corresponding to used entry: [ESI]
;
	mov	ebx,offset FreeHC	; free chain HC
	movzx	ecx,[ebx].HCcount	;Q: Any entries?
	jcxz	short AUEerror		; N: error
AUEloop:                                ; Y: search thru them
	movzx	ebx,[ebx].MCSnext       ; get next MCS entry in chain
	mov	eax,[ebx].MCSbase	; get base address
	add	eax,[ebx].MCSlen	; ending address
	sub	eax,[esi].MCSbase	;Q: In this range?
	ja	short AUEchkHi		; Y: found the correct entry
	loop	AUEloop			; N: try next entry

	jmp	short AUEerror		; error! did not find a matching entry

;
;  Free entry has been found
;
AUEchkHi:
	sub	eax,[esi].MCSlen	;Q: Used the latter part of the range?
	je	short AUEchkLo		; Y: no fragmentation ocurred.
	jb	short AUEerror		; -: error, larger than free range!
					; N: create new free entry: EAX=size
;
;  Create an entry for the tail portion of the free range
;
	push	ebx			; save original free entry

	mov	ecx,eax			; size of new free range
	mov	eax,dword ptr [ebx].MCSflags ; flags/handle from original
	mov	ebx,[esi].MCSbase	; start of used range
	add	ebx,[esi].MCSlen	; start of new free range

	call	AddFreeEntry		; add to free entry list
 	pop	ebx			; restore original free entry

AUEchkLo:
	mov	eax,[esi].MCSbase	; get base address of used entry
	sub	eax,[ebx].MCSbase	;Q: Used first portion of range?
	ja	short AUEresize		; N: need to resize
	jb	short AUEerror		; -: error, not within free range!
;
;  Free entry no longer needed, unlink from free list and link to null list
;
	xchg	ebx,esi			; free entry in esi and used in ebx
	call	DelFreeEntry
	mov	esi,ebx
	jmp	short AUEexit

AUEresize:
	mov	[ebx].MCSlen,eax	; resize free entry

AUEexit:
	clc
	pop	edi
	pop	esi
	pop	ecx
	pop	ebx
	pop	eax
	ret

AUEerror:
;int 1	;error
	stc
	pop	edi
	pop	ecx
	pop	ebx
	pop	eax
	ret

AddUsedEntry	endp

;==============================================================================
;==
;==  DelUsedEntry: This procedure deletes a used memory block from the used
;==		   MCS list and places it in the null MCS list.
;==
;==  Entry: (Real Mode)
;==  	ESI = Address of MCS entry
;==
;==  Exit:  (same)
;==
;==============================================================================

DelUsedEntry	proc	near
	push	edi

	mov	edi,offset UsedHC	; unlink from used list
	call	UnlinkEntry

	mov	edi,offset NullHC	; link to null list
	call	LinkEntry

	pop	edi
	ret
DelUsedEntry	endp

;==============================================================================
;==
;==  AddFreeEntry: This procedure adds a free memory block to the free MCS
;==		   linked list.
;==
;==  Entry: (Real Mode)
;==	EAX = Flags in low 16 bits, XMS handle in high 16 bits
;==  	EBX = Base address of memory block
;==	ECX = Length of memory block
;==
;==  Exit:  (same)
;==
;==============================================================================

AddFreeEntry	proc	near
	push	esi
	push	edi

	call	GetNullEntry      	; get an MCS entry

	mov	[esi].MCSbase,ebx       ; fill in info
	mov	[esi].MCSlen,ecx
	mov	dword ptr [esi].MCSflags,eax

	mov	edi,offset FreeHC       ; link into free chain
	call	LinkEntry

	pop	edi
	pop	esi
	ret
AddFreeEntry	endp

;==============================================================================
;==
;==  DelFreeEntry: This procedure deletes a free memory block from the free
;==		   MCS list and places it in the null MCS list.
;==
;==  Entry: (Real Mode)
;==  	ESI = Address of MCS entry
;==
;==  Exit:  (same)
;==
;==============================================================================

DelFreeEntry	proc	near
	push	edi

	mov	edi,offset FreeHC	; unlink from free list
	call	UnlinkEntry

	mov	edi,offset NullHC	; link to null list
	call	LinkEntry

	pop	edi
	ret
DelFreeEntry	endp

;==============================================================================
;==
;==  GetNullEntry: This procedure gets the first null MCS entry available.
;==
;==  Entry: (Real Mode)
;==
;==  Exit:  (Real Mode)
;==  	ESI = Address of MCS entry
;==
;==============================================================================

GetNullEntry	proc	near
	push	edi

	mov	edi,offset NullHC 	; HC for null chain
	movzx	esi,[edi].HCnext	; first entry
	call	UnlinkEntry

	pop	edi
	ret
GetNullEntry    endp

;==============================================================================
;==
;==  UnlinkEntry: Unlinks an entry from a double linked list
;==
;==  Entry: (Real Mode)
;==	ESI = Entry address
;==	EDI = Chain head cell address
;==
;==  Exit:  (Real Mode)
;==  	ESI = Entry address (unlinked from chain)
;==  	[EDI].HCcount = decremented by one
;==
;==============================================================================

UnlinkEntry	proc	near
	push	eax
	push	ebx

	cmp	[edi].HCcount,0		;Q: Any entries
	je      short UEerror		; N: it should never happen!

	movzx	ebx,[esi].MCSnext	; get next MCS address
	movzx	eax,[esi].MCSprev       ; get prev MCS address

	mov	[eax].MCSnext,bx        ; next MCS address in prev's next field
	mov	[ebx].MCSprev,ax        ; prev MCS address in next's prev field

	dec	[edi].HCcount           ; decrement HC count
	clc				; indicate no error

	pop	ebx
	pop	eax
	ret

UEerror:				; just for debugging purposes!
;int 1	;error
	stc
	pop	ebx
	pop	eax
	ret

UnlinkEntry	endp

;==============================================================================
;==
;==  LinkEntry: Link a MCS entry in ascending base address order
;==
;==  Entry: (Real Mode)
;==	ESI = Entry address
;==	EDI = Destination chain head cell address
;==
;==  Exit:  (Real Mode)
;==  	[EDI].HCcount = incremented by one
;==
;==============================================================================

LinkEntry	proc	near
	push	eax
	push	ebx

	mov	ebx,edi			; HC address in ebx
	mov	eax,[esi].MCSbase       ; base address of memory block to link

LEloop:
	movzx	ebx,[ebx].MCSnext       ; get next MCS entry in chain
	cmp	ebx,edi                 ;Q: Is it the HC?
	je	short LElink		; Y: link this entry last
	cmp	[ebx].MCSbase,eax       ;Q: Should we link here?
	jbe	LEloop                  ; N: check next MCS entry
					; Y: link the entry between this one
LElink:                                 ;    and the prevoius one.
	movzx	eax,[ebx].MCSprev       ; get prevoius entry address

	mov	[esi].MCSnext,bx        ; update pointers on entry to be linked
	mov	[esi].MCSprev,ax

	mov	[eax].MCSnext,si        ; update pointers on prev and next entries
	mov	[ebx].MCSprev,si

	inc	[edi].HCcount

	pop	ebx
	pop	eax
	ret
LinkEntry	endp

;=============================================================================
;==
;==  UnProtectROM: Allow writes to system RAM which is mapped in ROM space.
;==
;==  Entry: (Real Mode)
;==
;==  Exit:
;==
;==
;=============================================================================

UnProtectROM 	proc	near

	mov	cs:[RAMRelocBuffer],UNLOCK_ROM	; unprotect command

	call	WriteRAMRelReg

	ret
UnProtectROM	endp

;=============================================================================
;==
;==  ProtectROM: Write protect system RAM which is mapped in ROM space.
;==
;==  Entry: (Real Mode)
;==
;==  Exit:
;==
;==
;=============================================================================

ProtectROM 	proc	near

	mov	cs:[RAMRelocBuffer],LOCK_ROM	; write protect command

	call	WriteRAMRelReg

	ret
ProtectROM 	endp

;=============================================================================
;==
;==  WriteRAMRelReg: Write to RAM Relocation Register (80C00000h).
;==
;==  Entry: (Real Mode)
;==
;==  Exit:
;==
;==
;=============================================================================

WriteRAMRelReg 	proc	near
	push	esi
	push	edi
	push	cx


	mov	si,seg LAST		; source: [RAMRelocBuffer]
	and	esi,0FFFFh
	shl	esi,4
	add	esi,offset LAST:RAMRelocBuffer

	mov	edi,80C00000h		; destination: RAM Relocation register

	mov	cx,2            	; 1 word transfer

	call	DoMoveBlock

	pop	cx
	pop	edi
	pop	esi
	ret
WriteRAMRelReg	endp

;=============================================================================
;==
;==  DoMoveBlock: Do Int 15h, AH=87h move block.
;==
;==  Entry: (Real Mode)
;==	ESI = Source address (32-bit)
;==	EDI = Destination address (32-bit)
;==	 CX = Byte count
;==
;==  Exit:
;==	(same)
;==     CY = Set if an error occurred
;==
;=============================================================================

DoMoveBlock	proc	near
	pushad
	push	ds
	push	es

	mov	ax,seg LAST
	mov	ds,ax
	mov	es,ax

	mov	eax,esi			; set source descriptor
	call	SetSrcSel

	mov	eax,edi			; set destination descriptor
	call	SetDesSel

	inc	cx			; convert bytes to words
	shr	cx,1

	lea	si,MoveBlockGDT		; es:si points to GDT

	mov	ah,87h			; move block function
	clc
	push	gs			; possible bug in IBM ROM BIOS!
	int	15h  			;Q: Was move block succesful?
	pop	gs
	jc	short DMBerror		; N: report error

	pop	es
	pop	ds
	popad
	ret

DMBerror:
;int 1	;error
	pop	es
	pop	ds
	popad
	ret
DoMoveBlock	endp

;=============================================================================
;==
;==  SetSrcSel: Set source selector in MoveBlockGDT
;==
;==  Entry: (Real Mode)
;==	EAX = 32 bit address of source
;==	 CX = Number of bytes
;==
;==  Exit:
;==	(same)
;==
;=============================================================================

SetSrcSel proc	near
	push	eax
	push	bx

	mov	bx,size sDescriptor * 2		; source descriptor offset

	jmp	short SetSelector
SetSrcSel	endp

;=============================================================================
;==
;==  SetDesSel: Set destination selector in MoveBlockGDT
;==
;==  Entry: (Real Mode)
;==	EAX = 32 bit address of destination
;==	 CX = Number of bytes
;==
;==  Exit:
;==	(same)
;==
;=============================================================================

SetDesSel proc	near
	push	eax
	push	bx

	mov	bx,size sDescriptor * 3		; destination descriptor offset

;
;  Set appropriate selector
;
SetSelector:

	mov	word ptr [MoveBlockGDT][bx][BaseL],ax	; bits 0.15
	shr	eax,16
	mov	byte ptr [MoveBlockGDT][bx][BaseH],al	; bits 16.23
	mov	byte ptr [MoveBlockGDT][bx][BaseX],ah	; bits 24.31

	mov	word ptr [MoveBlockGDT][bx][LimitF],cx	; size in bytes

	pop	bx
	pop	eax
	ret
SetDesSel	endp

;=============================================================================
;==	VDISK Variables: Used for searching previously installed VDISK's
;=============================================================================

VDISK_name	db	'VDISK'		; 1st 5 bytes of header name
VDISK_type	db	28h		; 1st byte of label2 (header type)

pINT19Vec 	label	dword	; Pointer to int 19 Vector in IVT
		dw	19h*4   ; Offset
		dw	0       ; Segment zero

;=============================================================================
;==			BIM Control Structure
;=============================================================================
pBIMCtlStruct  	equ     0FFE0h

BIMCtlStruct  	struc
    AVAILABLE   dw	0	; Set to -1 if BIM isn't around
    TOTALBIM    dw     	0	; Total amount of BIM in the system
    AVAILBIM    dw     	0	; Amount of BIM available in paragraphs
    LASTUSED    dw     	0	; Paragraph address of last (lowest) used
BIMCtlStruct  	ends

;=============================================================================
;==	BIM Variables: Used for locating COMPAQ BIM
;=============================================================================
pCOMPAQ 	label	dword		; Pointer to COMPAQ signature
		dw	0FFE8h
RomSeg		dw	0F000h

szCOMPAQ    	db     '03COMPAQ'	; COMPAQ signature

RAMRelocBuffer	dw	 0

sDescriptor	struc
 LimitF	dw	0 	 		; limit
 BaseL	dw	0       		; base 0..15
 BaseH	db	0       		; base 16.23
	db	0       		; type
	db	0       		; reserved
 BaseX	db	0       		; base 24.31
sDescriptor	ends

MoveBlockGDT	label	dword
	sDescriptor<>
	sDescriptor<>
	sDescriptor<1,0,0,D_DATA3,0,0>	; source selector
	sDescriptor<1,0,0,D_DATA3,0,0>	; destination selector
	sDescriptor<>
	sDescriptor<>

;=============================================================================
;==	Memory Control Structures Double Linked List
;=============================================================================
NUM_MCS_ENTRIES equ	500

FreeHC	sHeadCell	<$,$,0>	; Free memory head cell

UsedHC	sHeadCell 	<$,$,0>	; Used memory head cell

NullHC 	sHeadCell <FirstMCS,LastMCS,NUM_MCS_ENTRIES> ; Null MCS entries list

ALIGN	4			; align in DWORD boundary
MCSPool	label	byte            ; start of MCS pool

FirstMCS sMemConStr <$+size sMemConStr,NullHC,0,0,0,0> ; first MCS entry
rept	NUM_MCS_ENTRIES-2
 sMemConStr <$+size sMemConStr,$-size sMemConStr,0,0,0,0> ; Space for MCS entries
endm
LastMCS sMemConStr <NullHC,$-size sMemConStr,0,0,0,0>  ; last MCS entry

LAST	ends
	end

=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\ega\int10rtn.inc ===
subttl	Int10Routine
	page

;
; Int10Routine - int 10h ISR dispatcher for EGA.SYS
;
;	As THE entrypoint for EGA.SYS, this routine must be as efficient
;	as possible.  For this reason, there is some duplication of code for
;	each possible thread of execution.  This is faster however, than
;	inserting numerous cmp's and conditional jumps in a single thread.
;
;	Hardware ISR's may call GetInBiosFlag (function 9, subfunction 4)
;	during their initialization to obtain a pointer to the fInBIOS flag
;	via es:bx.  They may subsequently test it themselves for a non-zero
;	value to see if they risk re-entering a video bios call.
;
;	This routine enables interrupts for all of EGA.SYS.  Function calls
;	that cannot tolerate this must explicitly cli themselves.  Also,
;	direction flag is cleared here to prevent having to do it about 12
;	times all over the place.
;
; ENTRY
;	ah	=  major function code
;	all other regs per function being called
; EXIT
;	per function being called
; DESTROYS
;	none, for this ISR itself
;	otherwise, per function being called
;

	assume	cs:CODE, ds:nothing, es:nothing, ss:nothing

Int10Routine	proc	far

	sti
	cmp	ah,EGAShadowStart 	; If not one of our functions,
	jb	NotMine 		;  go check BIOS functions
	cmp	ah,EGAShadowEnd
	ja	ExitInt10
.errnz	(MaxBIOSCall gt EGAShadowEnd)	; Verify we need not go NotMine
	cld
	push	ax			; Many procs depend on this
	push	si			; stack structure!
	push	ds
	mov	al,ah			; Get subfunction into al
	and	ax,000Fh		; Reset ah and mask for dispatch
	shl	ax,1			; *2 for word addresses
	mov	si,ax
	mov	ax,cs
	mov	ds,ax			; DS = CS
	assume	ds:CODE
	call	[MyCallTable][si] 	; Dispatch
	assume	ds:nothing
	pop	ds			; Procs don't need to save these
	assume	ds:nothing
	pop	si			; regs since we restore them
	pop	ax
	iret

SkipInt10:
	assume	ds:nothing
	pop	si			; Restore all regs
	pop	ax			; For hasty exit

ExitInt10:
	assume	ds:nothing
	cli
	jmp	[pOldInt10]		; Where to go if nothing doing

NotMine:
	assume	ds:nothing

if	CallTableNeeded
	cmp	ah,MaxBIOSCall		; If not a function we shadow,
else	; NOT CallTableNeeded
	or	ah,ah			; If not SetMode call,
endif	; NOT CallTableNeeded

	ja	ExitInt10		; just give it to old int 10h
	mov	[SaveAX],ax		; Used by SetMode

if	CallTableNeeded
	or	ah,ah			; Is it a mode init function?
	jnz	@F			; No - skip
endif	; CallTableNeeded

	cmp	[fVga],ah		; Do we have a VGA Card?
	jne	HaveSetMode		; Yes - skip

@@:
	push	ax
	push	si

if	CallTableNeeded
	mov	al,ah			; Get function into al
	cbw				; Reset ah for the dispatch
.errnz	(MaxBIOSCall gt 07Fh)		; Insure CBW is allowed
	mov	si,ax
	mov	al,[biosmode]		; Get current mode
	and	al,01111111b		; Reset noclear bit
	cmp	al,[biostable][si]	; Do we shadow for this mode?
	jb	SkipInt10		; No, GET OUT
	shl	si,1			; *2 for word addresses
endif	; CallTableNeeded

	push	ds
	push	cs
	pop	ds			; DS = CS
	assume	ds:CODE
	inc	[fInBIOS]		; Show video bios is busy
	cld

if	CallTableNeeded
	mov	ah,[biosinfo]		; Get static copy of info byte
	call	[BIOSCallTable][si]	; Dispatch with al=mode/ah=info
else	; NOT CallTableNeeded

ifndef	SYS

PatchSetMode2	equ	$ + 1		; Need to patch because of relocation

endif	; NOT SYS

	call	SetMode
endif	; NOT CallTableNeeded

	assume	ds:nothing
	pop	ds
	assume	ds:nothing
	pop	si
	pop	ax

if	CallTableNeeded
	or	ah,ah			; Watch for setmode
	jnz	@F
endif	; CallTableNeeded

HaveSetMode:
	assume	ds:nothing

if	CallTableNeeded
	or	ah,ah			; Set zero flag
endif	; CallTableNeeded

	mov	[biosmode],al		; Save the mode before we do it

@@:

if	CallTableNeeded
	pushf				; Save flags
endif	; CallTableNeeded

	pushf				; Fake an interrupt
	cli				; (do a good job! -JTP)
	call	[pOldInt10]

if	CallTableNeeded
	popf				; Restore flags
	jz	@F			; Branch if set mode
	dec	[fInBIOS]		; Record that video bios is done
	iret

@@:
endif	; CallTableNeeded

	push	cx
	push	ax			; Currently, same stack as
	push	si			; above is NOT required since SetMode
	push	ds			; gets video mode from SaveAX
	MOV	CX,CS
	MOV	DS,CX			; DS = CS
	assume	ds:CODE

if	CallTableNeeded
	mov	cx,word ptr [CRTCRegs][10] ; Must compute actual cursor
	xchg	cl,ch			; Change to proper format

ifndef	SYS

PatchSetCursorType	equ	$ + 1	; Need to patch because of relocation

endif	; NOT SYS

	call	SetCursorType
endif	; CallTableNeeded

	cmp	[fVga],FALSE		; If VGA not present,
	je	@F	 		;  extended processing done
	CLD				; Do searches forward

ifndef	SYS

PatchSetMode	equ	$ + 1		; Need to patch because of relocation

endif	; NOT SYS

	call	SetMode			; Correct CRT controller addr
	assume	ds:nothing

@@:
	pop	ds
	assume	ds:nothing
	pop	si
	pop	ax
	pop	cx
	dec	[fInBIOS]		; Record that video bios is done
	iret

ifndef	Sys

Int10RoutineLength	equ	($ - Int10Routine)

ifndef	OS2

if2	; Pass 2 of the assembler
.errnz		($ - Int2FHandler)	; Keep these together
endif	; Pass 2 of the assembler

endif	; NOT OS2

endif	; NOT Sys

Int10Routine	endp

ifndef	OS2

;
; This handler is used to allow new copies to communicate with a previously
;	installed copy.  We support:
;
;	Function 0 - Return AL = 0FFH indicating installed
;	Function 6 - Return version number
;		CH = Major version number
;		CL = Minor version number
;		DL = Beta version number (or 0 for no Beta version)
;	Function 7 - Return end of installed code in paragraphs
;		CX = Paragraph value of code end (rounded up)
;		SI = Code segment (side-effect)
;	Function 8 - Return INT 2FH vector
;		CX = Offset of current vector
;		DX = Segment of current vector
;		DI = Offset of original vector
;		ES = Segment of original vector
;	Function 9 - Return INT 10H vector
;		CX = Offset of current vector
;		DX = Segment of current vector
;		DI = Offset of original vector
;		ES = Segment of original vector
;
;	All functions return BX = 'AH' for COM driver and BX = 'TV' for SYS
;		driver.  See cute comments in equate section.
;

	assume	cs:code, ds:nothing, es:nothing, ss:nothing

Int2FHandler	proc	far

	cmp	ah,[INT2FNumber]	; Is this call for me?
	jne	NotMyINT2FNumber	; No - skip
	cmp	al,MaxValidFunction	; Is it a valid function call?
	ja	Int2FHandlerEnd		; No - skip

ifdef	sys
	mov	bx,Int2FPatternSys	; Return our special pattern
else	; NOT sys
	mov	bx,Int2FPatternCom	; Return our special pattern
endif	; NOT sys

.ERRNZ	GetInstalledState		; cmp al,GetInstalledState
	or	al,al			; Is it get installed state function?
	jz	GetStateFunction	; Yes - skip
	cmp	al,GetVersionNumber	; Should we return version number?

ifdef	sys
	jne	Int2FHandlerEnd		; No - skip
else	; NOT sys
	jne	@F			; No - skip
endif	; NOT sys

	mov	cx,(MajVersion shl 8) OR MinVersion ; Return major,minor

ifdef	BetaVersion
	mov	dl,BetaVersion		; Return Beta version
else	; NOT BetaVersion
	xor	dl,dl			; Return no Beta version
endif	; NOT BetaVersion

ifndef	sys
	iret				; All done

@@:
	cmp	al,GetCodeLength	; Should we return code length?
	jne	@F			; No - skip
	mov	cx,offset EndOfResidentCode + 15 ; Get end of the installed code
	shr	cx,1			; Convert to paragraphs
	shr	cx,1			; "
	shr	cx,1			; "
	shr	cx,1			; "
	mov	si,cs			; Can't add CS directly
	add	cx,si			; Add in segment base
	iret				; All done

@@:
	cmp	al,GetINT2F		; Should we return vector?
	jne	@F			; No - skip
;	mov	cx,offset Int2FHandler	; Return offset of current vector
	mov	cx,offset FCB1 + Int10RoutineLength ; Return offset of
					; current vector
	mov	dx,cs			; Return segment of current vector
	les	di,[pOldINT2F]		; Return original vector
	assume	es:nothing
	iret				; All done

@@:
	assume	es:nothing
	cmp	al,GetINT10		; Should we return vector?
	jne	Int2FHandlerEnd		; No - skip
;	mov	cx,offset Int10Routine	; Return offset of current vector
	mov	cx,offset FCB1		; Return offset of current vector
					; (Because Int10Routine is relocated)
	mov	dx,cs			; Return segment of current vector
	les	di,[pOldINT10]		; Return original vector
	assume	es:nothing
endif	; NOT sys

Int2FHandlerEnd:
	assume	es:nothing
	iret				; All done

GetStateFunction:
	not	al			; Say I'm here
	iret				; All done

NotMyINT2FNumber:
	cmp	ah,16h
	jne	Chain_To_Next_2F
	cmp	al,05h
	je	Do_Startup_Instance_Stuff

Chain_To_Next_2F:
	jmp	[pOldINT2F]		; Continue down the chain

Do_Startup_Instance_Stuff:
	pushf
	call	[pOldINT2F]		; Continue down the chain
	assume	es:nothing
	mov	word ptr [Win386_Startup_Info].SIS_Next_Dev_Ptr[0],bx
	mov	word ptr [Win386_Startup_Info].SIS_Next_Dev_Ptr[2],es
	mov	bx,cs
	mov	es,bx
	assume	es:code
	mov	bx,offset Win386_Startup_Info
	iret

ifndef	Sys

Int2FRoutineLength	equ	($ - Int2FHandler)

.errnz		(OpIntRoutineLength - (Int10RoutineLength + Int2FRoutineLength))

endif	; NOT Sys

Int2FHandler	endp

endif	; NOT OS2
=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\emm386\allocmem.inc ===
;=============================================================================
;== (C) Copyright MICROSOFT Corp. 1989-1991
;=============================================================================
;=============================================================================
;==	E X T E R N A L  D E C L A R A T I O N S
;=============================================================================
LAST	segment
	extrn	MemInit:near
	extrn	MemGet:near
	extrn	MemExit:near
	extrn	TotalFreeMem:near
LAST	ends

;=============================================================================
;==	T Y P E   O F   M E M O R Y :   M e m G e t
;=============================================================================
	extrn	fRSRVD:abs
	extrn	fXMSMem:abs				; XMS memory
	extrn	fBIMMem:abs       ; BIM memory
	extrn	fExtMem:abs       ; Extended memory
	extrn	fSupExt:abs       ; Super extended memory

;=============================================================================
;==	B O U N D A R Y   C O N D I T I O N S :   M e m G e t
;=============================================================================
	extrn	PARA_BOUNDARY:abs	; paragraph boundary conditions
	extrn	PAGE_BOUNDARY:abs	; 4K boundary condition
	extrn	EMS_BOUNDARY:abs	; 16K boundary condition
	extrn	DMA_BOUNDARY:abs	; no 64K or 128K boundary crossings

=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\emm386\dbg.inc ===
R_CODE	SEGMENT

	extrn	dbgr:near

R_CODE	ENDS

_TEXT	SEGMENT

	extrn	pdbgr:near

_TEXT	ENDS

dump	macro	message, reg
	local	x,y,z,a,b,c,d

	push	ebp
	push	reg
	mov	ebp, esp
	push	eax
	push	edx
	push	ecx
	push	esi
	
	xor	eax, eax
	mov	esi, eax
c:	mov	al, byte ptr cs:[a+esi]
	cmp	al, 0
	je	d
	dbg	al
	inc	esi
	jmp	short c
	
d:	

	mov	eax, [bp]
	mov	cx, 8
z:	xor	edx, edx
	shld	edx, eax, 4
	shl	eax, 4
	cmp	dl, 0ah
	jb	x
	sub	dl, 09h
	add	dl, 040h
	jmp	short y
x:	add	dl, 030h
y:	dbg	dl
	loop	z

	dbg	0ah
	dbg	0dh

	pop	esi
	pop	ecx
	pop	edx
	pop	eax
	pop	ebp
	pop	ebp
	
	jmp	short b
a	DB	message,0
b:

endm

dbg	macro	char

	push	ax
	mov	al, char
	call	dbgr
	pop	ax

endm

pdump	macro	message, reg
	local	x,y,z,a,b,c,d

	push	ebp
	push	reg
	mov	ebp, esp
	push	eax
	push	edx
	push	ecx
	push	esi
	
	xor	eax, eax
	mov	esi, eax
c:	mov	al, byte ptr cs:[a+esi]
	cmp	al, 0
	je	d
	pdbg	al
	inc	esi
	jmp	short c
	
d:	

	mov	eax, [bp]
	mov	cx, 8
z:	xor	edx, edx
	shld	edx, eax, 4
	shl	eax, 4
	cmp	dl, 0ah
	jb	x
	sub	dl, 09h
	add	dl, 040h
	jmp	short y
x:	add	dl, 030h
y:	pdbg	dl
	loop	z

	pdbg	0ah
	pdbg	0dh

	mov	ecx, 0ffffh
	loop	$	
	mov	ecx, 0ffffh
	loop	$	
	mov	ecx, 0ffffh
	loop	$	


	pop	esi
	pop	ecx
	pop	edx
	pop	eax
	pop	ebp
	pop	ebp
	
	jmp	short b
a	DB	message,0
b:

endm

pdbg	macro	char

	push	ax
	mov	al, char
	call	pdbgr
	pop	ax

endm




=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\emm386\debmac.inc ===
ifndef INC_LIST
.xlist
endif
;******************************************************************************
;
;   (C) Copyright MICROSOFT Corp. 1992
;
;	DEBMAC.inc -- Debugging macros for EMM386
;
;******************************************************************************


;***	pDebugF
;
;	Protected mode debug printf routine.
;
;	This macro can correctly accept 32 bit registers
;	as arguments.
;
;	See WDEB386 documentation for formating options.
;

pDebugF macro	str, args
	local	strptr
ifdef	DEBUG
_DATA	segment
strptr	db	str, 0
_DATA	ends
	ifb	<args>
	pDCall pDebugPrintf,<offset _DATA:strptr>
	else
	pDCall pDebugPrintf,<offset _DATA:strptr, args>
	endif
endif
	endm


;***	rDebugF
;
;	Real/Virtual mode debug printf routine.
;
;	This macro can correctly accept 32 bit registers
;	as arguments.
;
;	See WDEB386 documentation for formating options.
;

rDebugF macro	str, args
	local	strptr, flarp
ifdef	DEBUG
% ifidni <@curseg>,<R_CODE>
	jmp	short flarp
strptr	db	str, 0
flarp:
else
R_CODE	segment
strptr	db	str, 0
R_CODE	ends
endif
	ifb	<args>
	rDCall rDebugPrintf,<offset R_CODE:strptr>
	else
	rDCall rDebugPrintf,<offset R_CODE:strptr, args>
	endif
endif
	endm

;***	pDebugBreak
;
;	Protected mode debug break routine.
;
;	Causes a debuger trap to the next instruction if
;	a supported debugger is loaded.
;

pDebugBreak macro
	local	flarp
ifdef	DEBUG
	pushf
	Pcall	VDMC_GSEL,_TEXT:pTestDbgIns
	jnc	flarp
	int	1
flarp:
	popf
endif
	endm


;***	rDebugBreak
;
;	Real/Virtual mode debug break routine.
;
;	Causes a debuger trap to the next instruction if
;	a supported debugger is loaded.
;

rDebugBreak macro
	local	flarp
ifdef	DEBUG
	pushf
	call	rTestDbgIns
	jnc	flarp
	int	1
flarp:
	popf
endif
	endm


;***	Dcall
;
;	Call a debug procedure using C conventions.  The call
;	will be near. Uses "C" argument pushing convention and
;	removes the arguments after the call.
;
;	This macro can correctly accept 32 bit registers
;	as arguments.
;
;	USES: Flags.


pDCall	macro	name, arglst
	pushf
	?arg	<arglst>
	Pcall	VDMC_GSEL,_TEXT:name
	if	?argc ne 0
		add	sp,(?argc * 2)
	endif
	popf
	endm
	.xcref	pDcall

rDCall	macro	name, arglst
	pushf
	?arg	<arglst>
	call	name
	if	?argc ne 0
		add	sp,(?argc * 2)
	endif
	popf
	endm
	.xcref	rDcall

; Processes argument list - used by Dcall only

?arg	macro	arglst
	?argc = 0			;; number of words on stack (global)
	?numpush = 0			;; number of objects to push
	irp	x,<arglst>
		?dwordarg = FALSE
		irp	reg,<eax,ebx,ecx,edx,ebp,esp,esi,edi>
			ifidni	<x>,<reg>
				?dwordarg = TRUE
				exitm
			endif
		endm
		?argc = ?argc + 1
		if ?dwordarg
			?argc = ?argc + 1
		endif
		?numpush = ?numpush + 1
		?marg	<x>,%?numpush
	endm
	?count = ?numpush
	rept	?numpush
		?invprg <?AM>,%?count
		?count = ?count - 1
	endm
	endm
	.xcref	?arg

; Makes a macro that will push argment when invoked - used by Dcall only

?marg	macro	name, num
	.xcref
	.xcref	?AM&num
	.cref
	?AM&num &macro
		push	name
		&endm
	endm
	.xcref	?marg

; Concatenates, invokes and purges a macro name - used by Dcall and ArgVar

?invprg macro	name1, name2
	name1&name2
	purge	name1&name2
	endm
	.xcref	?invprg


;  Assert Segment Register contains expected value

AssertSegReg	MACRO	reg, value
	local	flarp
ifdef DEBUG
	push	ax
	mov	ax, reg
	cmp	ax, value
	je	short flarp
	INT	3
flarp:	pop	ax
endif
	endm

IFDEF DEBUG
DebFar	EQU	NEAR PTR
ELSE
DebFar	EQU	SHORT
ENDIF

.list	; end of DEBMAC.inc
=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\emm386\dbg.asm ===
.386p

include emm386.inc
include emmdata.inc
include vdmseg.inc
include vdmsel.inc

ifdef DEBUG

_TEXT	segment
	assume	cs:_TEXT, ds:NOTHING, es:NOTHING, fs:NOTHING, gs:NOTHING

	public	pDebugPrintf

pDebugPrintf	proc	far

	Pcall	VDMC_GSEL,pTestDbgIns
	jnc	pDP_skip_it

	push	bp
	mov	bp, sp
	push	es
	push	ds
	push	si
	push	di
	push	ax
	mov	ax, 074h
	push	VDMD_GSEL
	pop	ds
	mov	si, [bp+6]
	push	ss
	pop	es
	lea	di, [bp+8]
	int	41h
	pop	ax
	pop	di
	pop	si
	pop	ds
	pop	es
	pop	bp

pDP_skip_it:
	ret

pDebugPrintf	endp

	public	pTestDbgIns

pTestDbgIns	proc	far

	push	ds
	push	RCODEA_GSEL
	pop	ds
	bt	ds:[GenFlags], fDebugActiveBit
	pop	ds
	ret

pTestDbgIns	endp

_TEXT	ends


R_CODE	segment
	assume	cs:R_CODE, ds:NOTHING, es:NOTHING, fs:NOTHING, gs:NOTHING

	public	rDebugPrintf

rDebugPrintf	proc	far

	call	far ptr rTestDbgIns
	jnc	rDP_skip_it

	push	bp
	mov	bp, sp
	push	es
	push	ds
	push	si
	push	di
	push	ax
	mov	ah, 057h
	push	cs
	pop	ds
	mov	si, [bp+6]
	push	ss
	pop	es
	lea	di, [bp+8]
	int	68h
	pop	ax
	pop	di
	pop	si
	pop	ds
	pop	es
	pop	bp

rDP_skip_it:
	ret

rDebugPrintf	endp

	public	rTestDbgIns

rTestDbgIns	proc	far

	bt	cs:[GenFlags], fDebugActiveBit
	ret

rTestDbgIns	endp

R_CODE	ends


endif	;DEBUG

if 0	;----------------------------------------------------------------

	public	dbgr
	public	pdbgr

R_CODE	SEGMENT
	assume cs:R_CODE,ds:R_CODE,es:R_CODE

dbgr	proc	near
	
	push	bx
	push	cx
	push	dx
	push	bp

	mov	dx, 02f8h	; com2
;	mov	dx, 03f8h	; com1

	push	ax
	add	dx, 4
	mov	al, 3
	out	dx, al
	inc	dx
	inc	dx
	mov	bh, 30h
	call	wait_status
	je	a9
a7:	pop	cx
	mov	al, cl
a8:	or	ah, 80
	jmp	a3
a9:	dec	dx
a10:	mov	bh, 20h
	call	wait_status
	jne	a7
a11:	sub	dx,5
	pop	cx
	mov	al, cl
	out	dx, al
a3:	pop	bp
	pop	dx
	pop	cx
	pop	bx
	ret

dbgr	endp

wait_status:
	push	bp
	push	bx
	pop	bp
	and 	bp, 0ffh	
	rcl	bp, 1
	rcl	bp, 1
wfs0:	sub	cx,cx
wfs1:	in	al, dx
	mov	ah,al
	and	al, bh
	cmp	al, bh
	je	wfsend
	loop	wfs1
	dec	bp
	jne	wfs0
	or	bh,bh
wfsend:	pop	bp
	ret

R_CODE	ENDS

_TEXT	SEGMENT
	assume cs:_TEXT

pdbgr	proc	near
	
	push	bx
	push	cx
	push	dx
	push	bp

	mov	dx, 02f8h	; com2
;	mov	dx, 03f8h	; com1

	push	ax
	add	dx, 4
	mov	al, 3
	out	dx, al
	inc	dx
	inc	dx
	mov	bh, 30h
	call	pwait_status
	je	pa9
pa7:	pop	cx
	mov	al, cl
pa8:	or	ah, 80
	jmp	pa3
pa9:	dec	dx
pa10:	mov	bh, 20h
	call	pwait_status
	jne	pa7
pa11:	sub	dx,5
	pop	cx
	mov	al, cl
	out	dx, al
pa3:	pop	bp
	pop	dx
	pop	cx
	pop	bx
	ret

pdbgr	endp

pwait_status:
	push	bp
	push	bx
	pop	bp
	and 	bp, 0ffh	
	rcl	bp, 1
	rcl	bp, 1
pwfs0:	sub	cx,cx
pwfs1:	
	in	al, dx
	mov	ah,al
	and	al, bh
	cmp	al, bh
	je	pwfsend
	loop	pwfs1
	dec	bp
	jne	pwfs0
	or	bh,bh
pwfsend:	pop	bp
	ret

_TEXT	ENDS

endif	;----------------------------------------------------------------

	END

=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\emm386\desc.inc ===
ifndef INC_LIST
.xlist
endif
;******************************************************************************
;
;   (C) Copyright MICROSOFT Corp. 1986-1991
;   (C) Copyright COMPAQ Computer Corp. 1986-1991
;
;   Title:    EMM386 - MICROSOFT Expanded Memory Manager 386
;
;   Module:   DESC.INC - Descriptor Table Definitions for 286/386
;
;   Version:  0.02
;
;   Date:     January 31, 1986
;
;   Author:
;
;******************************************************************************
;
;   Change log:
;
;     DATE    REVISION			DESCRIPTION
;   --------  --------	-------------------------------------------------------
;   01/31/86  Original
;   04/07/86  A-SBP	added bit map base to 386 TSS
;   05/12/86  B-RRH	Cleanup and segment reorganization
;   06/25/86  0.02	removed A0 macros (SBP).
;   06/28/86  0.02	Name change from CEMM386 to CEMM (SBP).
;
;******************************************************************************
; ---------------------------------------------------
;
; Definitions for the access byte in a descriptor
;
; ---------------------------------------------------


; Following fields are common to segment and control descriptors

D_PRES		equ	080h		; present in memory
D_NOTPRES	equ	0		; not present in memory

D_DPL0		equ	0		; Ring 0
D_DPL1		equ	020h		; Ring 1
D_DPL2		equ	040h		; Ring 2
D_DPL3		equ	060h		; Ring 3

D_SEG		equ	010h		; Segment descriptor
D_CTRL		equ	0		; Control descriptor


; Following fields are specific to control descriptors

D_TSS		equ	01h		; A Free TSS
D_LDT		equ	02h		; LDT
D_TSS_BUSY	equ	03h		; A Busy TSS
D_CALLGATE	equ	04h		; call gate
D_TASKGATE	equ	05h		; task gate
D_INTGATE	equ	06h		; interrupt gate
D_TRAPGATE	equ	07h		; trap gate
													; 8 is invalid
D_386TSS	equ	9		; available 386 TSS
													; 0ah - Intel Reserved
D_BUSY386TSS	equ	0bh		; busy 386 TSS
D_386CALL_GATE	equ	0ch		; 386 call gate
													; 0dh - Intel Reserved
D_386INT_GATE	equ	0eh		; 386 interrupt gate
D_386TRAP_GATE	equ	0fh		; 386 trap gate

; Following fields are specific to segment descriptors

D_CODE		equ	08h		; code
D_DATA		equ	0		; data

D_CONFORM	equ	04h		; if code, conforming
D_EXPDN 	equ	04h		; if data, expand down

D_RX		equ	02h		; if code, readable
D_X		equ	0		; if code, exec only
D_W		equ	02h		; if data, writable
D_R		equ	0		; if data, read only

D_ACCESSED	equ	1		; segment accessed bit


; Useful combination access rights bytes

D_DATA0 	equ	(D_PRES+D_DPL0+D_SEG+D_DATA+D_W)  ; Ring 0 rw data
D_CODE0 	equ	(D_PRES+D_DPL0+D_SEG+D_CODE+D_RX) ; Ring 0 rx code
D_TRAP0 	equ	(D_PRES+D_DPL0+D_CTRL+D_TRAPGATE) ; Ring 0 trap gate
D_INT0		equ	(D_PRES+D_DPL0+D_CTRL+D_INTGATE)  ; Ring 0 int gate
D_TSS0		equ	(D_PRES+D_DPL0+D_CTRL+D_TSS)	  	; Ring 0 TSS
D_386TSS0	equ	(D_PRES+D_DPL0+D_CTRL+D_386TSS)   ; Ring 0 TSS
D_LDT0		equ	(D_PRES+D_DPL0+D_CTRL+D_LDT)	  	; Ring 0 LDT
D_386INT0	equ	(D_PRES+D_DPL0+D_CTRL+D_386INT_GATE) ; Ring 0 int gate

;D_DATA1	equ	(D_PRES+D_DPL1+D_SEG+D_DATA+D_W)  ; Ring 1 rw data
;D_CODE1	equ	(D_PRES+D_DPL1+D_SEG+D_CODE+D_RX) ; Ring 1 rx code

;D_DATA2	equ	(D_PRES+D_DPL2+D_SEG+D_DATA+D_W)  ; Ring 2 rw data
;D_CODE2	equ	(D_PRES+D_DPL2+D_SEG+D_CODE+D_RX) ; Ring 2 rx code

D_DATA3 	equ	(D_PRES+D_DPL3+D_SEG+D_DATA+D_W)  ; Ring 3 rw data
D_CODE3 	equ	(D_PRES+D_DPL3+D_SEG+D_CODE+D_RX) ; Ring 3 rx code
D_INT3		equ	(D_PRES+D_DPL3+D_CTRL+D_INTGATE)  ; Ring 3 int gate
D_GATE3 	equ	(D_PRES+D_DPL3+D_CTRL+D_CALLGATE) ; Ring 3 call gate
D_386INT3	equ	(D_PRES+D_DPL3+D_CTRL+D_386INT_GATE) ; Ring 3 int gate

; 386 Extensions

D_B_BIT 	equ	(1 SHL 6)	; 32 bit stack offsets


; Masks for selector fields

SELECTOR_MASK	equ	0fff8h		; selector index
SEL_LOW_MASK	equ	0f8h		; mask for low byte of sel indx
TABLE_MASK	equ	04h		; table bit
RPL_MASK	equ	03h		; privilige bits
; RPL_CLEAR 	equ	not 03h 	; clear ring bits


; Machine Status Word bits

MSW_PROTECT	equ	1		; virtual mode bit


; System IOPL

SYS_IOPL	equ	3000h		; wide open
CLEAR_IOPL	equ	0cfffh		; mask to remove IOPL bits

; Kernel Stack Size (TO BE ADDED)

STK_SIZE	equ	4000h		; TO BE ADDED

; --------------------------------------------------
;
; Macros for creating descriptor table entries
;
; --------------------------------------------------


; IDT_ENTRY - for interrupt and task gate definitions in IDT

IDT_ENTRY	macro	sel, off, acc
		dw	off		; offset
		dw	sel		; selector
		db	0		; word count, unused for trap/int gates
		db	acc		; access rights byte
		dw	0		; reserved, must be 0 for 386
endm


; GDT_ENTRY - for static initialisation of GDT entries

GDT_ENTRY	macro	BaseLow, BaseHi, Size, Access
		dw	Size - 1	; segment limit
		dw	BaseLow 	; low word of 24 bit base address
		db	BaseHi		; high byte of base address
		db	Access		; access rights byte
		dw	0		; reserved, must be 0 for 386
endm


; LDT_ENTRY - for static initialisation of LDT entries

LDT_ENTRY	macro	BaseLow, BaseHi, Size, Access
		dw	Size - 1	; segment limit
		dw	BaseLow 	; low word of 24 bit base address
		db	BaseHi		; high byte of base address
		db	Access		; access rights byte
		dw	0		; reserved, must be 0 for 386
endm


;***	286 TSS Format
;

TSS286STRUC	struc

  TSS286_BackLink	dw	0		; back link selector to TSS
  TSS286_SP0	  	dw	0		; ring 0 sp
  TSS286_SS0	  	dw	0		; ring 0 ss
  TSS286_SP1	  	dw	0		; ring 1 sp
  TSS286_SS1		dw	0		; ring 1 ss
  TSS286_SP2		dw	0		; ring 2 sp
  TSS286_SS2		dw	0		; ring 2 ss
  TSS286_IP		dw	0		; entry point IP
  TSS286_Flags		dw	0		; flag word
  TSS286_AX		dw	0		; AX
  TSS286_CX		dw	0		; CX
  TSS286_DX		dw	0		; DX
  TSS286_BX		dw	0		; BX
  TSS286_SP		dw	0		; SP
  TSS286_BP		dw	0		; BP
  TSS286_SI		dw	0		; SI
  TSS286_DI		dw	0		; DI
  TSS286_ES		dw	0		; ES
  TSS286_CS		dw	0		; CS
  TSS286_SS		dw	0		; SS
  TSS286_DS		dw	0		; DS
  TSS286_LDT		dw	0		; LDT

TSS286STRUC	ends

;***	386 TSS Format
;

TSS386STRUC	struc

  TSS386_BackLink	dw	0		; back link selector to TSS
  TSS386_Unused1	dw	0		; unused
  TSS386_ESP0		dd	0		; ring 0 ESP low word
  TSS386_SS0		dw	0		; ring 0 SS
  TSS386_Unused2	dw	0		; unused
  TSS386_ESP1		dd	0		; ring 1 ESP
  TSS386_SS1		dw	0		; ring 1 SS
  TSS386_Unused3	dw	0		; unused
  TSS386_ESP2		dd	0		; ring 2 ESP
  TSS386_SS2		dw	0		; ring 2 SS
  TSS386_Unused4	dw	0		; unused
  TSS386_CR3		dd	0		; CR3
  TSS386_EIP		dd	0		; EIP
  TSS386_EFLAGS		dd	0		; EFLAGS
  TSS386_EAX		dd	0		; EAX
  TSS386_ECX		dd	0		; ECX
  TSS386_EDX		dd	0		; EDX
  TSS386_EBX		dd	0		; EBX
  TSS386_ESP		dd	0		; ESP
  TSS386_EBP		dd	0		; EBP
  TSS386_ESI		dd	0		; ESI
  TSS386_EDI		dd	0		; EDI
  TSS386_ES		dw	0		; ES
  TSS386_Unused5	dw	0		; Unused
  TSS386_CS		dw	0		; CS
  TSS386_Unused6	dw	0		; Unused
  TSS386_SS		dw	0		; SS
  TSS386_Unused7	dw	0		; Unused
  TSS386_DS		dw	0		; DS
  TSS386_Unused8	dw	0		; Unused
  TSS386_FS		dw	0		; FS
  TSS386_Unused9	dw	0		; Unused
  TSS386_GS		dw	0		; GS
  TSS386_Unused10 	dw	0		; Unused
  TSS386_LDT		dw	0		; LDT
  TSS386_Unused11 	dw	0		; Unused
  TaskAttributes	dw	0		; Task Attributes
  BitMapBase		dw	0		; offset of Base of Bit Map

TSS386STRUC	ends

.list	; end of Desc.inc

=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\emm386\dmaeisa.asm ===
.386p
	page 58,132
;=============================================================================
	title	D M A E I S A - EISA DMA Emulation
;=============================================================================
;==
;== (C) Copyright MICROSOFT Corp. 1989-1991
;== (C) Copyright COMPAQ Computer Corp. 1989-1991
;==
;==	Title:	EMM386.EXE - MICROSOFT Expanded Memory Manager 386 Driver
;==
;==	Module: DMAEISA  - EISA DMA Emulation
;==
;==	Version: 1.00
;==
;==	Date:	August 26,1989
;==
;==	Author: Leo Cohen
;==
;=============================================================================
;==
;==	Change Log:
;==
;==	DATE	 REVISION	Description
;==	-------- --------	--------------------------------------------
;==     08/26/89 0.00	        Original
;==
;=============================================================================
;=============================================================================
;==	P U B L I C   D E C L A R A T I O N S
;=============================================================================
	public	DMAEISACnt0
	public	DMAEISACnt1
	public	DMAEISACnt2
	public	DMAEISACnt3
	public	DMAEISACnt5
	public	DMAEISACnt6
	public	DMAEISACnt7
	public	DMAEISAPg0
	public	DMAEISAPg1
	public	DMAEISAPg2
	public	DMAEISAPg3
	public	DMAEISAPg5
	public	DMAEISAPg6
	public	DMAEISAPg7
	public	DMAEISAExt1
	public	DMAEISAChain1
	public	DMAEISAExt2
	public	DMAEISAChain2
;=============================================================================
;==	L O C A L   C O N S T A N T S
;=============================================================================
	include vdmseg.inc
	include vdmsel.inc
	include dma.inc
	include	emmdata.inc
;=============================================================================
;==	E X T E R N A L   R E F E R E N C E S
;=============================================================================
_TEXT	segment
	extrn	DMACheckTC:near
	extrn	DMABeginChannel:near
	extrn	DMATrapExit:near
_TEXT	ends

_DATA	segment
	extrn	DMARegSav:byte
_DATA	ends
;=============================================================================
;==	C O D E  S E G M E N T
;=============================================================================
_TEXT	segment
	assume	cs:_TEXT,ds:_DATA,es:_DATA,gs:R_CODE,ss:STACK
;==============================================================================
;==
;== EISA DMA Channel Interrupt Status Register: (READ) (40Ah)
;==
;== 76543210
;== xxxxxxxx> Interrupt on channel 0
;== > Interrupt on channel 1
;== > Interrupt on channel 2
;== > Interrupt on channel 3
;== > reserved
;== > Interrupt on channel 5
;== > Interrupt on channel 6
;== > Interrupt on channel 7
;==
;== EISA DMA Chaining Mode Status Register: (READ) (4D4h)
;==
;== 76543210
;== xxxxxxxx> Channel 0 enabled
;== > Channel 1 enabled
;== > Channel 2 enabled
;== > Channel 3 enabled
;== > reserved
;== > Channel 5 enabled
;== > Channel 6 enabled
;== > Channel 7 enabled
;==
;== EISA DMA Chaining Mode Register: (WRITE) (40Ah & 4D4h)
;==
;== 76543210
;== xxxxxxxx
;== > Channel 0-3 selected
;== > 0-Disable, 1-Enable, 2-illegal, 3-Programming complete
;== > reserved
;==
;==============================================================================
DMA_E_IS	equ	40Ah 	; Channel interrupt status register (read only)
DMA_E_CS	equ	4D4h 	; Chaining mode status register (read only)

DMA_E_CH1	equ	40Ah	; ChainMode for channels 0-3 (write only)
DMA_E_CH2	equ	4D4h	; ChainMode for channels 5-7 (write only)

DMAEISAChain1:
	push	si
	lea	si,[DMARegSav].Chnl0	; channel 0 on controller 1
	jmp	short DMAEISAChain

DMAEISAChain2:
	push	si
	lea	si,[DMARegSav].Chnl4	; channel 0 on controller 2

DMAEISAChain:
	push	cx
	call	DMACheckTC

	or	dx,dx			;Q: Emulate output?
	jz	short DECNoEm	 	; N: no emulation

	mov	cl,al			; get channel being used
	and	cx,00000011b            ;Q: Channel 0?
	jcxz	DECChannel		; Y: have channel 0 context
DECFindChannel:
	add	si,size DMARegRec	; next channel
	loop	DECFindChannel		;Q: Channel found? (if not, loop)
					; Y: channel context at [SI]
DECChannel:
;
;  If DMA buffer is used by any buffer in the buffer chain (except for the
;  last one), it will cause data integrity problems.  This can be solved by
;  using buffer chaining to emulate a scatter/gather implementation. **QLEO?**
;
	call	DMABeginChannel

DECNoEm:
	stc
	pop	cx
	pop	si
	ret

;==============================================================================
;==
;== EISA DMA Extended Mode Register: (WRITE) (40Bh & 4D6h)
;==
;== 76543210
;== xxxxxxxx
;== > Channel 0-3 selected
;== > 0-8/byte, 1-16/word, 2-32/byte, 3-16/byte
;== > 0-ISA, 1-"A", 2-"B", 3-"C" (Burst)
;== > T-C is an input for this channel
;== > Stop register disabled
;==
;==============================================================================
fWordMode	equ 00000100b
fNotWordMode	equ 00001000b

DMAEISAExt1:
	push	si
	lea	si,[DMARegSav].Chnl0	; channel 0 on controller 1
	jmp	short DMAEISAExtended

DMAEISAExt2:
	push	si
	lea	si,[DMARegSav].Chnl4	; channel 0 on controller 2

DMAEISAExtended:
	push	cx
	call	DMACheckTC

	or	dx,dx			;Q: Emulate output?
	jz	short DEENoEm	 	; N: no emulation

	mov	cl,al			; get channel being used
	and	cx,00000011b            ;Q: Channel 0?
	jcxz	DEEChannel		; Y: have channel 0 context
DEEFindChannel:
	add	si,size DMARegRec	; next channel
	loop	DEEFindChannel		;Q: Channel found? (if not, loop)
					; Y: channel context at [SI]
DEEChannel:
	and	[si].DMAChnFlgs,not fWordTx ; assume byte count

	test	al,fNotWordMode		;Q: Word count?
	jnz	short DEENoEm		; N: byte count

	test	al,fWordMode		;Q: Word count?
	jz	short DEENoEm		; N: byte count
	or	[si].DMAChnFlgs,fWordTx ; Y: word count

DEENoEm:
	stc
	pop	cx			; N: program 8237
	pop	si
	ret
;==============================================================================
;==
;==  DMAEISACnt(0-7) - Write/Read EISA DMA Channel High Count Register
;==
;==  Entry: (Protected Mode Ring 0)
;==	AL = byte to output to port.
;==	DS = _DATA
;==	GS = R_CODE
;==	BX = port address
;==	DX = 0 => Emulate Input.
;==	   <>0 => Emulate Output.
;==
;==  Exit:  (Protected Mode Ring 0)
;==	SI = pts to proper DMARegRec channel
;==	DI = Controller index
;==
;==============================================================================
DMAEISACnt0:
	push	si
	lea	si,[DMARegSav].Chnl0
	jmp	SHORT DMAEISACnt

DMAEISACnt1:
	push	si
	lea	si,[DMARegSav].Chnl1
	jmp	SHORT DMAEISACnt

DMAEISACnt2:
	push	si
	lea	si,[DMARegSav].Chnl2
	jmp	SHORT DMAEISACnt

DMAEISACnt3:
	push	si
	lea	si,[DMARegSav].Chnl3
	jmp	SHORT DMAEISACnt

DMAEISACnt5:
	push	si
	lea	si,[DMARegSav].Chnl5
	jmp	SHORT DMAEISACnt

DMAEISACnt6:
	push	si
	lea	si,[DMARegSav].Chnl6
	jmp	SHORT DMAEISACnt

DMAEISACnt7:
	push	si
	lea	si,[DMARegSav].Chnl7
	jmp	SHORT DMAEISACnt

;==============================================================================
;==
;==  DMAEISAPg(0-7) - Write/Read EISA DMA Channel High Page Register
;==
;==  Entry: (Protected Mode Ring 0)
;==	AL = byte to output to port.
;==	DS = _DATA
;==	GS = R_CODE
;==	BX = port address
;==	DX = 0 => Emulate Input.
;==	   <>0 => Emulate Output.
;==
;==  Exit:  (Protected Mode Ring 0)
;==	SI = pts to proper DMARegRec channel
;==	AL = DMA address bits 24-31
;==
;==============================================================================
DMAEISAPg0:
	push	si
	lea	si,[DMARegSav].Chnl0
	jmp	short DMAEISAPg

DMAEISAPg1:
	push	si
	lea	si,[DMARegSav].Chnl1
	jmp	short DMAEISAPg

DMAEISAPg2:
	push	si
	lea	si,[DMARegSav].Chnl2
	jmp	short DMAEISAPg

DMAEISAPg3:
	push	si
	lea	si,[DMARegSav].Chnl3
	jmp	short DMAEISAPg

DMAEISAPg5:
	push	si
	lea	si,[DMARegSav].Chnl5
	jmp	short DMAEISAPg

DMAEISAPg6:
	push	si
	lea	si,[DMARegSav].Chnl6
	jmp	short DMAEISAPg

DMAEISAPg7:
	push	si
	lea	si,[DMARegSav].Chnl7
	jmp	short DMAEISAPg

;==============================================================================
;==
;==  DMAEISACnt - Write/Read EISA DMA Channel N High Count Register
;==
;==  Entry: (Protected Mode Ring 0), DX, DS & DI on stack
;==	AL = byte to output to port.
;==	DS:SI pts to the DMA save area of interest
;==	DI = Controller index
;==	DX = 0 => Emulate Input.
;==	   <>0 => Emulate Output.
;==
;==  Exit:  (Protected Mode Ring 0)
;==	AL  =  emulated input value from port.
;==	CLC => I/O emulated by DMATrap.
;==	STC => I/O NOT emulated by DMATrap.
;==
;==	DMA_E_C0   equ	401h	; HiCount0 (Bits: <23.16>)
;==	DMA_E_C1   equ	403h	; HiCount1
;==	DMA_E_C2   equ	405h	; HiCount2
;==	DMA_E_C3   equ	401h	; HiCount3
;==	DMA_E_C5   equ	4C6h	; HiCount5
;==	DMA_E_C6   equ	4CAh	; HiCount6
;==	DMA_E_C7   equ	4CEh	; HiCount7
;==
;==============================================================================
DMAEISACnt:
	push	di
	push	eax
	push	ecx
	push	dx
	push	es

	push	ds
	pop	es				; ES = _DATA

	call	DMACheckTC

	or	dx,dx				;Q: Input ?
	jz	short DECNRead			; Y: do Read operation

	and	ax,0FFh
	or	[si].DMAChnFlgs,fExtPI+fDirtyCount ; EISA extended mode
	mov	word ptr [si][2].DMACount,ax
	jmp	DMATrapExit

DECNRead:
	test	[si].DMAChnFlgs,fDirtyCount	;Q: virtual => physical?
	jz	short DECNRphys			; Y: physical read
	mov	al,byte ptr [si].DMACount[2]	; N: virtual count
	jmp	DMATrapExit

DECNRphys:
	movzx	ecx,[si].DMAChnlNum	; get port # for EISA count register
	mov	dx,[DMA_EISA_HighCountPort][ecx*2]
	in	al,dx			; get byte from EISA count register
	jmp	DMATrapExit
;==============================================================================
;==
;==  DMAEISAPg - Write/Read EISA DMA Channel N High Page Register
;==
;==  Entry: (Protected Mode Ring 0), DX, DS & DI on stack
;==	AL = byte to output to port.
;==	BX = port address for I/O * 2
;==	DS:SI pts to the DMA save area of interest
;==	DX = 0 => Emulate Input.
;==	   <>0 => Emulate Output.
;==
;==  Exit:  (Protected Mode Ring 0)
;==	AL  =  emulated input value from port.
;==	CLC => I/O emulated by DMATrap.
;==	STC => I/O NOT emulated by DMATrap.
;==
;==  DMA_E_P0  equ   487h	; HiPage0 (Bits: <31.24>)
;==  DMA_E_P1  equ   483h	; HiPage1
;==  DMA_E_P2  equ   481h	; HiPage2
;==  DMA_E_P3  equ   482h	; HiPage3
;==  DMA_E_P5  equ   48Bh	; HiPage5
;==  DMA_E_P6  equ   489h	; HiPage6
;==  DMA_E_P7  equ   48Ah	; HiPage7
;==
;==============================================================================
DMAEISAPg:
	push	di
	push	eax
	push	ecx
	push	dx
	push	es

	push	ds
	pop	es			; ES = _DATA

	call	DMACheckTC

	or	dx,dx			;Q: Input ?
	jz	short DEPNRead		; Y: do Read operation

	or	[si].DMAChnFlgs,fExtPI+fDirtyAddr ; EISA extended mode
	mov	byte ptr [si][3].DMALinAdr,al
	jmp	DMATrapExit

DEPNRead:
	test	[si].DMAChnFlgs,fDirtyAddr	;Q: virtual => physical?
	jz	short DEPNRphys			; Y: physical read
	mov	al,byte ptr [si].DMALinAdr[3]   ; N: virtual high page
	jmp	DMATrapExit

DEPNRphys:
	movzx	ecx,[si].DMAChnlNum	; get port # for EISA high page register
	mov	dx,[DMA_EISA_HighPagePort][ecx*2]
	in	al,dx			; get byte from EISA count register
	sub	al,byte ptr [si].DMAPhyAdr[3] ; Y: get starting physical address
	add	al,byte ptr [si].DMALinAdr[3] ; get starting linear address
	jmp	DMATrapExit

_TEXT	ends

	end				; end of module

=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\emm386\dmaserv.asm ===
.386p
	page 58,132
;=============================================================================
	title	D M A S E R V - DMA/bus master services under Virtual 8086 mode
;=============================================================================
;==
;== (C) Copyright MICROSOFT Corp. 1989-1991
;== (C) Copyright COMPAQ Computer Corp. 1989-1991
;==
;==	Title:	EMM386.EXE - MICROSOFT Expanded Memory Manager 386 Driver
;==
;==	Module: DMAServ  - DMA/bus master services under Virtual 8086 mode
;==
;==	Version: 1.00
;==
;==	Date:	September 22,1989
;==
;==	Author: Leo Cohen
;==
;=============================================================================
;==
;==	Change Log:
;==
;==	DATE	 REVISION	Description
;==	-------- --------	--------------------------------------------
;==     09/22/89 0.00	        Original
;==
;=============================================================================
;==
;==   Functional Description:
;==
;==   This module provides DMA/bus master services while in Virtual 8086 mode.
;==
;=============================================================================
;==	P U B L I C   D E C L A R A T I O N S
;=============================================================================
	public	pINT4BhHandler
;;	public	rINT4BhHandler
;=============================================================================
;==	L O C A L   C O N S T A N T S
;=============================================================================
	include allocmem.inc
	include vdmseg.inc
	include vdmsel.inc
	include desc.inc
	include dma.inc
	include page.inc
	include oemdep.inc
	include vm386.inc
	include	emm386.inc
	include	emmfunct.inc
	include	emmdata.inc
;=============================================================================
;==	E X T E R N A L   R E F E R E N C E S
;=============================================================================
_TEXT	segment
	extrn	ReflectInterrupt:near
	extrn	MoveBuffer:near
	extrn	ContigCheck:near
_TEXT	ends

_DATA	segment
	extrn	DMARegSav:byte
_DATA	ends
;=============================================================================
;==	L O C A	L   D A T A
;=============================================================================
_DATA	segment

DMABuffID   dw	0		; Current DMA buffer ID
DBSDisTable db	8 dup (0)	; disable translation count per channel

DBSTable label	word
	dw	offset _TEXT:DBSInvalidFunction	; AL=0  reserved
	dw	offset _TEXT:DBSInvalidFunction	; AL=1  reserved
	dw	offset _TEXT:DBSGetVersion	; AL=2  Get Version Function
	dw	offset _TEXT:DBSLockDMARegion	; AL=3  Lock DMA Region
	dw	offset _TEXT:DBSUnlockDMARegion	; AL=4  Unlock DMA Region
	dw	offset _TEXT:DBSScatGathLock	; AL=5  Scatter/Gather Lock Region
	dw	offset _TEXT:DBSScatGathUnlock	; AL=6  Scatter/Gather Unlock Region
	dw	offset _TEXT:DBSReqDMABuffer	; AL=7  Request DMA Buffer
	dw	offset _TEXT:DBSRelDMABuffer	; AL=8  Release DMA Buffer
	dw	offset _TEXT:DBSCopyToBuffer	; AL=9  Copy to DMA Buffer
	dw	offset _TEXT:DBSCopyFromBuffer	; AL=10 Copy from DMA Buffer
	dw	offset _TEXT:DBSDisDMATrans	; AL=11 Disable DMA Translation
	dw	offset _TEXT:DBSEnaDMATrans	; AL=12 Enable DMA Translation
DBSLastFunc	equ	($-DBSTable)/2
	dw	offset _TEXT:DBSInvalidFunction	; AL=>13 reserved
_DATA	ends
;=============================================================================
;==	C O D E  S E G M E N T
;=============================================================================
_TEXT	segment
	assume	cs:_TEXT,ds:_DATA,es:_DATA,ss:STACK
;==============================================================================
;==
;==  DBSdipatcher - Dispatches DMA/bus master virtual mode services functions
;==
;==  Entry: (Protected Mode Ring 0)
;==	AH = 81h
;==	AL = Function number
;==	DX = Flags
;==	ES:EDI    = DMA Descriptor Structure (DDS)
;==	BX:CX/ECX = May be a buffer offset
;==	EBP= Virtual mode stack 0 image
;==	DS = _DATA
;==	GS = R_CODE
;==
;==  Exit:  (Protected Mode Ring 0)
;==	AL = Status
;==	CY = clear if OK, set if error
;==
;==============================================================================
DBSdispatcher	proc	near

	cmp	al,2			;Q: Get version function?
	je	short DBSGetVersion	; Y: go get it
					; N: dispatch to proper function
	pushad
	movzx	esp,sp			; access only 64K
	mov	[ebp][-4],esp		; pointer to PUSHAD image
	push	es

	push	DATA32_GSEL		; access all of memory
	pop	es

	cmp	al,DBSLastFunc		;Q: Valid function?
	jb	short DBSDindex		; Y: index into function
	mov	al,DBSLastFunc		; N: invalid function

DBSDindex:
	and	eax,0FFh		; clear all but function number
	call	[DBSTable][eax*2]       ; vector to proper function
	mov	ebx,[ebp][-4]		; pointer to PUSHAD image
	mov	byte ptr ss:[ebx].reg_EAX,al ; return correct status code

	and	[ebp][VTFO].VMTF_EFLAGS,not FLAGS_CF ; assume success
	or	al,al				     ;Q: Need to set carry?
	jz	short DBSDexit			     ; N: exit
	or	[ebp][VTFO].VMTF_EFLAGS,FLAGS_CF     ; Y: set carry

DBSDexit:
	pop	es
	popad
	ret
DBSdispatcher	endp
;==============================================================================
;==
;==  DBSInvalidFunction - Invalid function number.
;==
;==  Entry: (Protected Mode Ring 0)
;==	AL = 0,1,13,14,15,...
;==
;==  Exit:  (Protected Mode Ring 0)
;==	AL = 15, illegal function
;==	CY = set
;==
;==============================================================================
DBSInvalidFunction proc	near

	mov	al,eDBSInvalidFunc	; error return, invalid function
	ret

DBSInvalidFunction	endp
;==============================================================================
;==
;==  DBSGetVersion - returns version of the DMA bus/master services.
;==
;==  Entry: (Real Mode)
;==	AL = 2
;==	DX = 0
;==
;==  Exit:  (Real Mode)
;==	AH = Major version
;==	AL = Minor version
;==	BH = OEM number
;==	BL = OEM revision
;==
;==	SI:DI = Maximum DMA buffer size
;==	DX = Bit 1 set: if DMA buffer is located below 1 megabyte
;==
;==============================================================================
fDBSLegal=0
DBSGetVersion	proc	near

	test	dx,not fDBSLegal	;Q: Illegal flags used?
	jnz	short DGVbadFlags	; Y: return error

	mov	ah,DBSMajVer		; major version
	mov	al,DBSMinVer		; minor version

	mov	di,word ptr [DMABufferSize]	; size of DMA buffer
	mov	si,word ptr [DMABufferSize+2]
	mov	bx,DBSNumOEM		; OEM number
	mov	cx,DBSRevOEM		; OEM revision

	xor	dx,dx			; no flags
	test	[DMAFlags],fDMABuffXT	;Q: Buffer below 1 meg?
	jz	short DGVexit		; N: exit
	mov	dx,DBSDMAXT		; Y: PC/XT architecture supported

DGVexit:
	and	[ebp][VTFO].VMTF_EFLAGS,not FLAGS_CF ; success: clear carry
	ret

DGVbadFlags:
	mov	al,eDBSInvalidFlag		; error return
	or	[ebp][VTFO].VMTF_EFLAGS,FLAGS_CF; set carry
	ret
DBSGetVersion	endp
;==============================================================================
;==
;==  DBSLockDMARegion - Attempts to get a physical buffer.
;==
;==  Entry: (Protected Mode Ring 0)
;==	AL = 3
;==	DX = Flags: bit
;==		    1 = copy to buffer (invalid: 2=1/DMA buffer not used)
;==		    2 = If not contiguous DMA buffer should not be allocated
;==		    3 = auto remap invalid
;==		    4 = 64K aligned
;==		    5 = 128K aligned
;==	ES:(E)DI = pointer to DDS
;==
;==  Exit:  (Protected Mode Ring 0)
;==	AL = status value
;==	CY clear:   0 = OK
;==	CY set:	    1 = region not contiguous
;==		    2 = alignment crossed
;==		    3 = unable to lock pages
;==		    4 = no buffer available
;==		    5 = DMA buffer is too small
;==		    6 = DMA buffer currently in use
;==		   10h= illegal flags requested
;==
;==============================================================================
fDBSLegal=fDBSBufferCopy+fDBSDisAutoBuff+fDBSDisAutoRem+fDBS64kAlign+fDBS128kAlign
DBSLockDMARegion proc	near

	test	dx,not fDBSLegal	;Q: Illegal flags used?
	jz	short DLDRptr		; N: continue
	mov	al,eDBSInvalidFlag	; Y: error return
	jmp	DLDRexit

DLDRptr:
	movzx	edi,di			; convert to 32 bit pointer
	call	GetDDSPtr		; convert V86 ES:EDI to protected ES:EBX
	mov	es:[ebx].DDSBuffID,0	; asssume DMA buffer not used

	call	GetUserBufferPtr	; ESI/ECX is user buffer ptr/size
	mov	eax,esi

	mov	edi,edx			; save flags
	xor	edx,edx			; assume no boundary restrictions

	test	edi,fDBS64kAlign+fDBS128kAlign ;Q: Any boundary conditions?
	jz	short DLDRbound		       ; N: continue with no restrictions
	mov	edx,20000h		       ; Y: assume a 128K restriction

	test	edi,fDBS64kAlign	;Q: Is it a 64K restriction?
	jz	short DLDRbound		; N: go with 128K restriction
	shr	edx,1			; Y: change to 64K restriction

DLDRbound:
	call	ContigCheck		;Q: Is user buffer OK?
	jnc	short DLDRok		; Y: easy, fill in DDS
	xchg	ecx,es:[ebx].DDSSize	; N: contiguous size in DDS

	test	edi,fDBSDisAutoBuff	;Q: Disable auto DMA buffer allocation?
	jz	short DLDRsizeDMAbuff	; N: check if DMA buffer size is OK
	mov	al,eDBSNotContig	; Y: assume user buffer not contiguous

	or	edx,edx			;Q: Boundary crossing?
	jz	short DLDRexit		; N: buffer is not contiguous
	mov	al,eDBSBoundCross	; Y: boundary crossed error code
	jmp	short DLDRexit

DLDRsizeDMAbuff:
	cmp	ecx,[DMABufferSize]	;Q: Smaller than DMA buffer
	jbe	short DLDRcheckDMAbuff	; Y: check DMA buffer status
	mov	al,eDBSBufferSize	; N: can't use DMA buffer due to size
	jmp	short DLDRexit		;    being too small

DLDRcheckDMAbuff:
	bts	[DMAFlags],fDMABufferBusyBit ;Q: Is the DMA buffer in use?
	jnc	short DLDRallocDMAbuff	     ; N: allocate it
	mov	al,eDBSBufferBusy	     ; Y: return DMA buffer busy status
	jmp	short DLDRexit

DLDRallocDMAbuff:
	mov	es:[ebx].DDSSize,ecx	; restore original buffer size
	mov	edx,edi			; restore flags

	test	edx,fDBSBufferCopy	;Q: Need to copy data to DMA buffer?
	jz	short DLDRuseDMAbuff	; N: use DMA buffer (get address)
	call	GetUserBufferPtr	; Y: get source address and size
	mov	edi,[DMABufferAddress]	;    get destination
	call	MoveBuffer

DLDRuseDMAbuff:
	call	GetBufferID		; get a Buffer ID
	mov	es:[ebx].DDSBuffID,ax	; fill in DMA buffer ID
	mov	eax,[DMABufferAddress]	; DMA buffer physical address

DLDRok:
	mov	es:[ebx].DDSPhyAddr,eax	; fill in physical address in DDS
	xor	al,al			; no error

DLDRexit:
	ret

DBSLockDMARegion	endp
;==============================================================================
;==
;==  DBSUnlockDMARegion - Unlocks previously locked buffer.
;==
;==  Entry: (Protected Mode Ring 0)
;==	AL = 4
;==	DX = Flags: bit
;==		    1 = copy from buffer
;==	ES:(E)DI = pointer to DDS
;==
;==  Exit:  (Protected Mode Ring 0)
;==	AL = status value
;==	CY clear:   0h = OK
;==	CY set:	   08h = memory was not locked
;==		   0Ah = invalid buffer ID
;==		   10h = illegal flags requested
;==
;==============================================================================
fDBSLegal=fDBSBufferCopy
DBSUnlockDMARegion proc	near

	test	dx,not fDBSLegal	;Q: Illegal flags used?
	jz	short DUDRptr		; N: continue
	mov	al,eDBSInvalidFlag	; Y: error return
	jmp	short DUDRexit

DUDRptr:
	movzx	edi,di			; convert to 32 bit pointer
	call	GetDDSPtr		; convert V86 ES:EDI to protected ES:EBX
	mov	edi,[DMABufferAddress]	; get address of DMA buffer

	cmp	es:[ebx].DDSPhyAddr,edi	;Q: DMA buffer address?
	je	short DUDRbuffID	; Y: check for DMA buffer ID

	test	dx,fDBSBufferCopy	;Q: Buffer copy flag?
	jnz	short DUDRInvBuffID	; Y: error, invalid buffer ID

	cmp	es:[ebx].DDSBuffID,0	;Q: Non-DMA buffer ID?
	je	short DUDRok		; Y: unlock region
DUDRInvBuffID:
	mov	al,eDBSInvalidBuff	; N: invalid buffer ID
	jmp	short DUDRexit

DUDRbuffID:
	mov	ax,es:[ebx].DDSBuffID
	call	ValidateBufferID	;Q: DMA buffer ID?
	je	short DUDRcheck		; Y: check if it is busy?
	mov	al,eDBSInvalidBuff	; N: invalid buffer ID
	jmp	short DUDRexit

DUDRcheck:
	test	[DMAFlags],fDMABufferBusy ;Q: Is DMA buffer currently busy?
	jnz	short DUDRcont		  ; Y: unlock it
	mov	al,eDBSLockRegion	  ; N: DMA buffer was never locked
	jmp	short DUDRexit

DUDRcont:
	test	dx,fDBSBufferCopy	;Q: Need to copy data from buffer?
	jz	short DUDRunlock	; N: unlock DMA buffer

	call	GetUserBufferPtr	; ESI/ECX is user buffer ptr/size
	xchg	esi,edi			; DMA buffer -> user buffer

	call	MoveBuffer

DUDRunlock:
	and	[DMAFlags],not fDMABufferBusy ; DMA buffer no longer in use

DUDRok:
	xor	al,al			; success

DUDRexit:
	ret

DBSUnlockDMARegion	endp
;==============================================================================
;==
;==  DBSScatGathLock - Attempts to lock a scatter/gather region.
;==
;==  Entry: (Protected Mode Ring 0)
;==	AL = 5
;==	DX = Flags: bit
;==		    6 = PTE's should be used
;==		    7 = not present pages should not be locked
;==	ES:(E)DI = pointer to extended DDS
;==
;==  Exit:  (Protected Mode Ring 0)
;==	AL = status value
;==	BX = offset into first PTE for region (only if bit 6 of flags is set).
;==	CY clear:   0 = OK
;==	CY set:	    3 = unable to lock pages
;==		    9 = # scatter/gather regions is greater than table size
;==		   10h= illegal flags requested
;==
;==============================================================================
fDBSLegal=fDBSPTEs+fDBSNotPresent
DBSScatGathLock proc	near
	push	fs

	test	dx,not fDBSLegal	;Q: Illegal flags used?
	jz	short DSGLptr		; N: continue
	mov	al,eDBSInvalidFlag	; Y: error return
	xor	si,si			; no available entries used
	jmp	DSGLexit

DSGLptr:
	movzx	edi,di			; convert to 32 bit pointer
	call	GetDDSPtr		; convert V86 ES:EDI to protected ES:EBX
 	movzx	edi,es:[ebx].DDSEAvail	; available entries

	call	GetUserBufferPtr	; ESI/ECX is user buffer ptr/size
	push	es:[ebx].DDSsize	; save size field for succesfull return
	mov	es:[ebx].DDSsize,0	; clear size field in case of error
 	mov	es:[ebx].DDSEUsed,0	; used entries

	test	edx,fDBSPTEs		;Q: Array of PTE's?
	jnz	short DSGLPTEs		; Y: list PTE entries
;
;  Each entry in the array is composed of a physical address and a size for
;  which it is contiguous.  Each are DWORD fields.
;
	mov	eax,esi			; user buffer linear address
	xor	edx,edx			; no boundary restrictions
	xor	esi,esi

DSGLnextRegion:
	push	ecx			; save size to transfer
	push	eax			; save linear address

	call	ContigCheck		; get contiguous buffer

	cmp	esi,edi			;Q: Any entries left?
	jae	short DSGLRegCont	; N: don't record information

	mov	es:[ebx][DDSElist][esi*8].DDSERPhyAddr,eax ; save address
	mov	es:[ebx][DDSElist][esi*8].DDSERsize,ecx	   ; save size
	add	es:[ebx].DDSsize,ecx	; amount of buffer described by entries

DSGLRegCont:
	inc	esi			; next region
	pop	eax
	add	eax,ecx			; new linear address

	sub	[esp],ecx		;Q: Still need more?
	pop	ecx			; amount still needed
	jnz	short DSGLnextRegion	; Y: get next region
	jmp	short DSGLcomplete	; N: all regions completed

;
;  Each entry in the array is composed of a PTE.
;
DSGLPTEs:
	mov	ax,PAGET_GSEL		; access page tables
	mov	fs,ax
	xor	eax,eax

	xchg	eax,esi
	add	ecx,eax
	or	ecx,ecx			;Q: End of buffer @ 0?
	jz	short DSGLcont		; Y: don't wrap on 4GB?
	dec	ecx			; N: last addressable byte in buffer
DSGLcont:
	push	eax			; save starting address

	shr	eax,12			; starting PTE index
	shr	ecx,12			; ending PTE index

DSGLloop:
	cmp	esi,edi			;Q: Any entries left?
	jae	short DSGLPTEcont	; N: don't record information

	mov	edx,eax			; assume linear and physical are the same
	shl	edx,12
	cmp	eax,[MaxPTEIndex]	;Q: Above the page tables?
	jae	short DSGLphys		; Y: linear and physical are the same
	mov	edx,fs:[eax*4]		; N: get PTE
DSGLphys:
	and	dx,0F000h
	or	dx,1			; page present and locked bit
	mov	es:[ebx][DDSElist][esi*4].DDSEP,edx ; save PTE
	add	es:[ebx].DDSsize,1000h	; amount of buffer described by entries

DSGLPTEcont:
	inc	eax
	inc	esi
	cmp	eax,ecx			;Q: Need any more PTEs
	jbe	short DSGLloop		; Y: get next PTE

	pop	eax			; restore starting buffer address
	and	eax,0FFFh		; clear upper 20 bits

	mov	edx,[ebp][-4]		     ; pointer to PUSHAD image
	mov	word ptr ss:[edx].reg_EBX,ax ; offset of buffer in first PTE

	or	edi,edi			;Q: Any entries available?
	jz	short DSGLcomplete	; N: don't update size field
	sub	es:[ebx].DDSsize,eax	; Y: reduce by offset into first PTE

DSGLcomplete:
	pop	ecx			; size field for succesfull return
	mov	es:[ebx].DDSEUsed,si	; number of entries required
	mov	al,eDBSTableSize	; assume need more space error code

	cmp	esi,edi			;Q: More entries required than available?
	ja	short DSGLexit		; Y: need more space error
	xor	al,al			; N: no error
	mov	es:[ebx].DDSsize,ecx	; restore original size field: succesfull return

DSGLexit:
	pop	fs
	ret

DBSScatGathLock	endp
;==============================================================================
;==
;==  DBSScatGathUnlock - Attempts to unlock a scatter/gather region.
;==
;==  Entry: (Protected Mode Ring 0)
;==	AL = 6
;==	DX = Flags: bit
;==		    6 = PTE's should be used
;==		    7 = not present pages should not be locked
;==	ES:(E)DI = pointer to extended DDS
;==
;==  Exit:  (Protected Mode Ring 0)
;==	AL = status value
;==	CY clear:   0 = OK
;==	CY set:	    7 = invalid memory region
;==		    8 = memory was not locked
;==		   10h= illegal flags requested
;==
;==============================================================================
fDBSLegal=fDBSPTEs+fDBSNotPresent
DBSScatGathUnlock proc	near

	test	dx,not fDBSLegal	;Q: Illegal flags used?
	jnz	short DSGUerror		; Y: error
	xor	al,al			; N: buffer unlocked
	ret

DSGUerror:
	mov	al,eDBSInvalidFlag	; error return
	ret
DBSScatGathUnlock	endp
;==============================================================================
;==
;==  DBSReqDMABuffer - Request a DMA Buffer
;==
;==  Entry: (Protected Mode Ring 0)
;==	AL = 7
;==	DX = Flags: bit
;==		    1 = copy to buffer
;==	ES:(E)DI = pointer to DDS
;==
;==  Exit:  (Protected Mode Ring 0)
;==	AL = status value
;==	CY clear:   0 = OK
;==	CY set:	    4 = no buffer available
;==		    5 = DMA buffer is too small
;==		    6 = DMA buffer currently in use
;==		   10h= illegal flags requested
;==
;==============================================================================
fDBSLegal=fDBSBufferCopy
DBSReqDMABuffer proc	near

	test	dx,not fDBSLegal	;Q: Illegal flags used?
	jz	short DRqDBptr		; N: continue
	mov	al,eDBSInvalidFlag	; Y: error return
	jmp	short DRqDBexit

DRqDBptr:
	movzx	edi,di			  ; convert to 32 bit pointer
	test	[DMAFlags],fDMABufferBusy ;Q: Is DMA buffer currently busy?
	jz	short DRqDBbuffer   	  ; N: get user buffer pointer
	mov	al,eDBSBufferBusy	  ; Y: DMA buffer is busy
	jmp	short DRqDBexit

DRqDBbuffer:
	call	GetDDSPtr		; convert V86 ES:EDI to protected ES:EBX

	mov	ecx,[DMABufferSize]
	cmp	ecx,es:[ebx].DDSsize	;Q: Is the DMA buffer large enough?
	jae	short DRqDBUseBuffer	; Y: use the DMA buffer
	mov	al,eDBSBufferSize	; N: DMA buffer is too small
	jmp	short DRqDBexit

DRqDBUseBuffer:
	or	[DMAFlags],fDMABufferBusy ; mark DMA buffer in use
	call	GetBufferID               ; get a unique buffer ID
	mov	es:[ebx].DDSBuffID,ax	  ; DMA buffer ID
;QLEO	mov	es:[ebx].DDSsize,ecx	  ; specify the size of the DMA buffer

	mov	edi,[DMABufferAddress]	; get address of DMA buffer
	mov	es:[ebx].DDSPhyAddr,edi ; put in DDS

	test	dx,fDBSBufferCopy	;Q: Need to copy data to DMA buffer?
	jz	short DRqDBok		; N: return

	call	GetUserBufferPtr	; ESI/ECX is user buffer ptr/size

	call	MoveBuffer

DRqDBok:
	xor	al,al			; success

DRqDBexit:
	ret

DBSReqDMABuffer	endp
;==============================================================================
;==
;==  DBSRelDMABuffer - Release DMA Buffer
;==
;==  Entry: (Protected Mode Ring 0)
;==	AL = 8
;==	DX = Flags: bit
;==		    0 = 32 bit addressing mode used (ES:EDI)
;==		    1 = copy from buffer
;==	ES:(E)DI = pointer to DDS
;==
;==  Exit:  (Protected Mode Ring 0)
;==	AL = status value
;==	CY clear:   00h = OK
;==	CY set:	    0Ah = invalid buffer ID
;==		    10h = illegal flags requested
;==
;==============================================================================
fDBSLegal=fDBSBufferCopy
DBSRelDMABuffer proc	near

	test	dx,not fDBSLegal	;Q: Illegal flags used?
	jz	short DRDBptr		; N: continue
	mov	al,eDBSInvalidFlag	; Y: error return
	jmp	short DRDBexit

DRDBptr:
	movzx	edi,di			; convert to 32 bit pointer
	call	GetDDSPtr		; convert V86 ES:EDI to protected ES:EBX
	mov	edi,[DMABufferAddress]	; get address of DMA buffer

	mov	ax,es:[ebx].DDSBuffID
	call	ValidateBufferID	;Q: DMA buffer ID?
	jne	short DRDBerror		; N: invalid buffer ID

	test	[DMAFlags],fDMABufferBusy ;Q: Is DMA buffer currently busy?
	jz	short DRDBerror		  ; N: invalid buffer ID

	test	dx,fDBSBufferCopy	;Q: Need to copy data from buffer?
	jz	short DRDBunlock	; N: unlock DMA buffer

	call	GetUserBufferPtr	; ESI/ECX is user buffer ptr/size
	xchg	esi,edi			; DMA buffer -> user buffer

	call	MoveBuffer

DRDBunlock:
	and	[DMAFlags],not fDMABufferBusy ; DMA buffer no longer in use

DRDBok:
	xor	al,al			; success

DRDBexit:
	ret

DRDBerror:
	mov	al,eDBSInvalidBuff	; DMA buffer was never locked
	ret

DBSRelDMABuffer	endp
;==============================================================================
;==
;==  DBSCopyToBuffer - Copy data to DMA buffer
;==
;==  Entry: (Protected Mode Ring 0)
;==	AL = 9
;==	DX = Flags: bit (must be zero)
;==	ES:(E)DI  = pointer to DDS
;==	BX:CX/ECX = starting offset into DMA buffer
;==
;==  Exit:  (Protected Mode Ring 0)
;==	AL = status value
;==	CY clear:   00h = OK
;==	CY set:	    0Ah = invalid buffer ID
;==		    0Bh = copy count + offset is larger than DMA buffer size
;==		    10h = illegal flags requested
;==
;==============================================================================
fDBSLegal=0
DBSCopyToBuffer proc	near

	test	dx,not fDBSLegal	;Q: Illegal flags used?
	jz	short DCTBptr		; N: continue
	mov	al,eDBSInvalidFlag	; Y: error return
	jmp	short DCTBexit

DCTBptr:
	movzx	edi,di			; convert to 32 bit pointer
	shl	ebx,16			; convert BX:CX -> ECX
	mov	bx,cx
	mov	ecx,ebx			; offset into DMA buffer

	call	GetDDSPtr		; convert V86 ES:EDI to protected ES:EBX
	mov	edi,[DMABufferAddress]	; get address of DMA buffer
	add	edi,ecx			; starting transfer address

	mov	ax,es:[ebx].DDSBuffID
	call	ValidateBufferID	;Q: DMA buffer ID?
	jne	short DCTBerrID		; N: invalid buffer ID

	add	ecx,es:[ebx].DDSsize	; size of DMA buffer needed for transfer
	cmp	[DMABufferSize],ecx	;Q: DMA buffer large enough?
	jb	short DCTBerrCount	; N: error

	call	GetUserBufferPtr	; ESI/ECX is user buffer ptr/size

	call	MoveBuffer
	xor	al,al

DCTBexit:
	ret

DCTBerrID:
	mov	al,eDBSInvalidBuff	; invalid buffer ID
	ret

DCTBerrCount:
	mov	al,eDBSBuffRange	; copy range not within DMA buffer
	ret

DBSCopyToBuffer	endp
;==============================================================================
;==
;==  DBSCopyFromBuffer - Copy data from DMA buffer
;==
;==  Entry: (Protected Mode Ring 0)
;==	AL = 10
;==	DX = Flags: bit (must be zero)
;==	ES:(E)DI  = pointer to DDS
;==	BX:CX/ECX = starting offset into DMA buffer
;==
;==  Exit:  (Protected Mode Ring 0)
;==	AL = status value
;==	CY clear:   00h = OK
;==	CY set:	    0Ah = invalid buffer ID
;==		    0Bh = copy count + offset is larger than DMA buffer size
;==		    10h = illegal flags requested
;==
;==============================================================================
fDBSLegal=0
DBSCopyFromBuffer proc	near

	test	dx,not fDBSLegal	;Q: Illegal flags used?
	jz	short DCFBptr		; N: continue
	mov	al,eDBSInvalidFlag	; Y: error return
	jmp	short DCFBexit

DCFBptr:
	movzx	edi,di			; N: convert to 32 bit pointer
	shl	ebx,16			; convert BX:CX -> ECX
	mov	bx,cx
	mov	ecx,ebx			; offset into DMA buffer

	call	GetDDSPtr		; convert V86 ES:EDI to protected ES:EBX
	mov	edi,[DMABufferAddress]	; get address of DMA buffer
	add	edi,ecx			; starting transfer address

	mov	ax,es:[ebx].DDSBuffID
	call	ValidateBufferID	;Q: DMA buffer ID?
	jne	short DCFBerrID		; N: invalid buffer ID

	add	ecx,es:[ebx].DDSsize	; size of DMA buffer needed for transfer
	cmp	[DMABufferSize],ecx	;Q: DMA buffer large enough?
	jb	short DCFBerrCount	; N: error

	call	GetUserBufferPtr	; ESI/ECX is user buffer ptr/size
	xchg	esi,edi			; DMA buffer -> user buffer

	call	MoveBuffer
	xor	al,al

DCFBexit:
	ret

DCFBerrID:
	mov	al,eDBSInvalidBuff	; invalid buffer ID
	ret

DCFBerrCount:
	mov	al,eDBSBuffRange	; copy range not within DMA buffer
	ret
DBSCopyFromBuffer	endp
;==============================================================================
;==
;==  DBSDisDMATrans - Disable DMA Translation
;==
;==  Entry: (Protected Mode Ring 0)
;==	AL = 11
;==	BX = DMA channel number
;==	DX = 0
;==
;==  Exit:  (Protected Mode Ring 0)
;==	AL = status value
;==	CY clear:   00h = OK
;==	CY set:	    0Ch = invalid DMA channel number
;==		    0Dh = disable count overflow
;==		    10h = illegal flags requested
;==
;==============================================================================
fDBSLegal=0
DBSDisDMATrans	proc	near

	test	dx,not fDBSLegal	;Q: Illegal flags used?
	jz	short DDDTptr		; N: continue
	mov	al,eDBSInvalidFlag	; Y: error return
	jmp	short DDDTexit

DDDTptr:
	cmp	bx,8			;Q: Valid DMA channel?
	jae	short DDDTerrChannel	; N: error

	add	DBSDisTable[bx],1	;Q: Disable count overflow?
	jc	short DDDTerrOver	; Y: error
	xor	al,al			; N: successful status

	cmp	DBSDisTable[bx],1	;Q: Was disable count = 0 ?
	jne	SHORT DDDTexit		; N: exit, disable flag already set

	mov	cx,bx
	xor	bx,bx
	jcxz	short DDDTRegRec

DDDTloop:
	add	bx,size DMARegRec
	loop	DDDTloop

DDDTRegRec:
	or	[DMARegSav][bx].DMAChnFlgs,fNoTrans ; set disable trans flag

DDDTexit:
	ret


DDDTerrOver:
	mov	DBSDisTable[bx],-1	; maintain translation disabled
	mov	al,eDBSCountOver	; overflow
	ret

DDDTerrChannel:
	mov	al,eDBSInvalidDMA	; invalid DMA channel
	ret

DBSDisDMATrans	endp
;==============================================================================
;==
;==  DBSEnaDMATrans - Enable DMA Translation
;==
;==  Entry: (Protected Mode Ring 0)
;==	AL = 12
;==	BX = DMA channel number
;==	DX = 0
;==
;==  Exit:  (Protected Mode Ring 0)
;==	AL = status value
;==	CY clear:   00h = OK (ZF, if count is zero, else NZ)
;==	CY set:	    0Ch = invalid DMA channel number
;==		    0Dh = disable count underflow
;==		    10h = illegal flags requested
;==
;==============================================================================
fDBSLegal=0
DBSEnaDMATrans	proc	near

	test	dx,not fDBSLegal	;Q: Illegal flags used?
	jz	short DEDTptr		; N: continue
	mov	al,eDBSInvalidFlag	; Y: error return
	jmp	short DEDTexit

DEDTptr:
	cmp	bx,8			;Q: Valid DMA channel?
	jae	short DEDTerrChannel	; N: error

	and	[ebp][VTFO].VMTF_EFLAGS,not FLAGS_ZF ; assume count not zero

	sub	DBSDisTable[bx],1	;Q: Disable translation?
	jc	short DEDTerrUnder	; -: error, underflow
	jne	short DEDTok		; N: just decrement disable count

	or	[ebp][VTFO].VMTF_EFLAGS,FLAGS_ZF ; count is zero

	mov	cx,bx
	xor	bx,bx
	jcxz	short DEDTRegRec

DEDTloop:
	add	bx,size DMARegRec
	loop	DEDTloop

DEDTRegRec:
	and	[DMARegSav][bx].DMAChnFlgs,not fNoTrans	; translation enabled

DEDTok:
	xor	al,al

DEDTexit:
	ret

DEDTerrUnder:
	mov	DBSDisTable[bx],0	; maintain translation enabled
	mov	al,eDBSCountUnder	; overflow
	ret

DEDTerrChannel:
	mov	al,eDBSInvalidDMA	; invalid DMA channel
	ret

DBSEnaDMATrans	endp
;==============================================================================
;==
;==  GetBufferID - Returns a unique buffer ID in AX.
;==
;==  Entry: (Protected Mode Ring 0)
;==
;==  Exit:  (Protected Mode Ring 0)
;==	AX = Unique Buffer ID
;==
;==============================================================================
GetBufferID	proc	near
	mov	ax,[DMABuffID]		; get previous DMA ID
	inc	ax			;Q: ID of Zero?
	jnz	short GBIDcont		; N: OK, current ID
	inc	ax			; Y: make current ID a one.
GBIDcont:
	mov	[DMABuffID],ax		; save current ID
	ret
GetBufferID	endp
;==============================================================================
;==
;==  ValidateBufferID - Verifies a valid buffer ID in AX. (This routine is
;==			provided for easy expandability to multiple DMA
;==			buffers)
;==
;==  Entry: (Protected Mode Ring 0)
;==	AX = Proposed buffer ID
;==
;==  Exit:  (Protected Mode Ring 0)
;==	ZR = Buffer ID is valid
;==	NZ = Buffer ID is invalid
;==
;==============================================================================
ValidateBufferID proc	near
	cmp	ax,[DMABuffID]		;Q: Valid buffer ID? (CY- if invalid)
	ret
ValidateBufferID	endp
;==============================================================================
;==
;==  GetDDSPtr - Returns ES:EBX pointing to DDS.
;==
;==  Entry: (Protected Mode Ring 0)
;==	EDI = offset into virtual ES segment
;==	EBP = base pointer for virtual stack frame
;==
;==  Exit:  (Protected Mode Ring 0)
;==	EBX = pointer to DDS
;==
;==============================================================================
GetDDSPtr proc	near
	movzx	ebx,[ebp].VTFO+VMTF_ES	; get virtual mode segment
	shl	ebx,4
	add	ebx,edi			; DDS pointer
	ret
GetDDSPtr	endp
;==============================================================================
;==
;==  GetUserBufferPtr - Returns ES:ESI pointing to user buffer.
;==
;==  Entry: (Protected Mode Ring 0)
;==	EBX = pointer to DDS
;==
;==  Exit:  (Protected Mode Ring 0)
;==	ESI = pointer to user buffer
;==	ECX = size of user buffer
;==
;==============================================================================
GetUserBufferPtr proc	near
	movzx	esi,es:[ebx].DDSseg	; get segment for buffer
	shl	esi,4
	add	esi,es:[ebx].DDSLinOffs	; user buffer pointer

	mov	ecx,es:[ebx].DDSsize	; user buffer size
	ret
GetUserBufferPtr	endp
;==============================================================================
;==
;==  pINT4BhHandler: DMA/bus master virtual 8086 mode services
;==
;==  Entry: (Protected Mode)
;==
;==  Exit:
;==
;==============================================================================
pINT4BhHandler:
	push	ebp
	movzx	ebp,sp
	sub	esp,4		; used to store PUSHAD pointer in dispatcher

	push	VDMD_GSEL	; DS/GS are setup for CEMM's 2 data areas.
	pop	ds
	push	RCODEA_GSEL
	pop	gs
	ASSUME	ds:_DATA,gs:R_CODE

	btr	gs:[TrapFlags],fI4BtrapBit ;Q: Reflect back?
	jnc	short pI4Breflect	   ; Y: reflect interrupt

	call	DBSdispatcher		; dispatch function

	add	esp,4
	pop	ebp
	iretd

pI4Breflect:
	add	esp,4
	push	4Bh			; reflect interrupt into virtual mode
	jmp	ReflectInterrupt

_TEXT	ends				; end of segment


	end				; end of module

=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\emm386\dmaps2.asm ===
.386p
page	58,132
;******************************************************************************
	title	DMAPS2
;******************************************************************************
;
;   (C) Copyright MICROSOFT Corp. 1989-1991
;   (C) Copyright COMPAQ Computer Corp. 1989-1991
;
;   Title:    EMM386.EXE - MICROSOFT Expanded Memory Manager 386 Driver
;
;   Module:   DMAPS2 - Routines to virtualize the PS2 DMA ports
;
;   Version:  1.0
;
;   Date:     Sep. 19,1989
;
;   Author:   Harish K. Naidu
;
;******************************************************************************
;
;   Change log:
;
;     DATE    REVISION			DESCRIPTION
;   --------  --------	-------------------------------------------------------
;   09/19/89  Original
;
;******************************************************************************
;
;   Functional Description:
;
;
;******************************************************************************

	include vdmseg.inc
	include dma.inc
	include	emmdata.inc
	include emm386.inc

;******************************************************************************
;	P U B L I C S
;******************************************************************************

	public	DMA_FuncReg
	public	DMA_ExecFunc

;******************************************************************************
;	D E F I N E S
;******************************************************************************


;******************************************************************************
;	E X T E R N A L   R E F E R E N C E S
;******************************************************************************

	extrn	DMASinMsk1:near
	extrn	DMASinMsk2:near
	extrn	DMAMask1:near
	extrn	DMAMask2:near
	extrn	DMACheckTC:near

	extrn	DMARegSav:byte

;******************************************************************************
;	C O D E   S E G M E N T
;******************************************************************************


_TEXT	segment
	assume cs:_TEXT, ds:_DATA, es:_DATA, gs:R_CODE, ss:STACK

;############################################################################
;
;	Procedure name	: DMA_FuncReg
;
;	ENTRY		: Protected mode
;			  AL = byte to output to port
;			  DS = _DATA
;		 	  BX = port address
;			  DX =  0 => Emulate Input
;			  DX <> 0 => Emulate Output
;
;	EXIT		: if input AL = byte
;			  else output virtulaized
;
;	REGs MOD	:
;
;	written		: HKN 9/19/89
;
;	Description:
;
;############################################################################

DMA_FuncReg:

	jmp	short DMA_proc

FuncHandler	label word
	dw	OFFSET PS2_DMA_Set_IO_Adr	; 0
	dw	OFFSET PS2_DMA_Bad_Func		; 1
	dw	OFFSET PS2_DMA_Set_Mem_Adr	; 2
	dw	OFFSET PS2_DMA_Get_Mem_Adr	; 3
	dw	OFFSET PS2_DMA_Set_Count	; 4
	dw	OFFSET PS2_DMA_Get_Count	; 5
	dw	OFFSET PS2_DMA_Get_Status	; 6
	dw	OFFSET PS2_DMA_Set_Mode	  	; 7
	dw	OFFSET PS2_DMA_Set_Arbus	; 8
	dw	OFFSET PS2_DMA_Set_Chn_Mask	; 9
	dw	OFFSET PS2_DMA_Reset_Chn_Mask   ; A
	dw	OFFSET PS2_DMA_Bad_Func	  	; B
	dw	OFFSET PS2_DMA_Bad_Func	  	; C
	dw	OFFSET PS2_DMA_Master_Clear	; D
	dw	OFFSET PS2_DMA_Bad_Func	  	; E
	dw	OFFSET PS2_DMA_Bad_Func	  	; F

DMA_proc:

	push	eax
	push	di
	push	ebx
	xor	di,di

	call	DMACheckTC

ifdef	ROMIDMCA
	cmp	[ROMID],ROMIDISA	;Q: ISA/EISA system?
	je	short DFRNoEm		; Y: don't emulate this port?
endif
	test	gs:[GenFlags], fMCA	; Q: MCA system
	jz	short DFRNoEm		; N: don't emulate this port?

	or	dx,dx			;Q: Read?
	jz	short DFRNoEm		; Y: don't emulate

	mov	bl, al			; save original cmd byte
	and	eax, PS2_CHANNEL_MASK	; eax = channel #
	cmp	al, 4			; Q; 2nd controller
	jb	short first_ctl
	mov	di, 1			; 2nd controller index

first_ctl:
	mov	al, bl			; al = original cmd byte
	and	ebx, PS2_FUNCTION_MASK
	shr	ebx, 3			; make function # into offset into
					; the FuncHandler table
	call	word ptr cs:[FuncHandler+ebx]

	clc
	pop	ebx
	pop	di
	pop	eax
	ret

PS2_DMA_Bad_Func:
	
	; invalid function code. just let it go thru.

DFRNoEm:
	stc
	pop	ebx
	pop	di
	pop	eax
	ret


;############################################################################
;
;	Procedure name	: DMA_ExecFunc
;
;	ENTRY		: Protected mode
;			  AL = byte to output to port
;			  DS = _DATA
;		 	  BX = port address
;			  DX =  0 => Emulate Input
;			  DX <> 0 => Emulate Output
;
;	EXIT		: if input AL = byte
;			  else output virtulaized
;
;	REGs MOD	:
;
;	Description:
;
;############################################################################

DMA_ExecFunc:

	push	eax
	push	esi
	push	ebx
	push	edx
	push	edi
	push	ebp
	mov	ebp, esp

	call	DMACheckTC

ifdef	ROMIDMCA
	cmp	[ROMID],ROMIDISA	;Q: ISA/EISA system?
	je	DEFNoEm			; Y: don't emulate this port?
endif
	test	gs:[GenFlags], fMCA	; Q: MCA system
	jz	DEFNoEm			; N: don't emulate this port?

	lea	esi, [DMARegSav]	; ds:si points to DMA save area
	or	dx,dx			; Q: reading
	jnz	short PS2_Put_DMA_Byte	; N: goto  write

;
; Let the user read the port even though he has'nt set up for it.
;
;	cmp	[esi.DMA_writing], FALSE; Q: is it a read operation
;	jne	DEFNoEm			; N: bad read. attempting to read
;					;    port 1A while executing a write
					;    command.


	movzx	ebx, [esi.DMA_byteptr]
	mov	al, byte ptr [ebx+esi.DMA_data]
	mov	byte ptr [ebp+20], al	; put al on the stack.
	jmp	PS2_Inc_Byte_ptr



PS2_Put_DMA_Byte:
	cmp	[esi.DMA_writing], TRUE	; Q: is it a write operation
	jne	bad_write		; N: attempting to write to port 1A
					;    without properly programming the
					;    function register.

	movzx	edx, [esi.DMA_PS2_cmd]
	and	edx, PS2_FUNCTION_MASK
	cmp	edx, Set_Mem_Adr	; Q: is it a mem. addrd write
	je	PS2_New_Adr		; Y: go write a byte
	cmp	edx, Set_Count		; Q: is it a count write
	je	short PS2_New_Count	; Y: go write a byte
	cmp 	edx, Set_Mode	   	; Q: writing extended mode
	je	short PS2_New_Mode	; Y: go write a byte
	cmp	edx, Set_Arbus		; Q: writing Arbus
	je	PS2_Set_Arbus		; Y: go write Arbus
	cmp	edx,Set_IO_Adr		; Q: writing to set IO address
	jne	bad_write		; N: illegal command

PS2_IO_Addr:
	call	PS2_Get_data_Ptr	; edi-> channel info within dma save
					;       area
	movzx	ebx, [esi.DMA_bytePtr]	; obtain the virtual byte ptr
	out	1ah, al			; no need to virtulaize IO addr reg.
	jmp	PS2_Inc_Byte_Ptr

PS2_Set_Arbus:
	out	1ah, al
	jmp	PS2_write_done

PS2_New_Mode:
	call	PS2_Get_data_Ptr	; edi -> channel within dma save area

; translate the extended mode info into that which is required in
; DMAChnFlgs by the bufferred DMA code in dmatrap.asm

	and	[esi][edi].DMAChnFlgs,not (fReadOp+fWriteOp+fWordTx)
	test	al, Transfer_data	; Q: verify op?
	jz	short no_transfer	; Y:
	test	al, Write_Mem		; Q: write memory?
	jnz	short PS2_write		; Y:
	or	[esi][edi].DMAChnFlgs,freadop ; N:
	jmp	short PS2_read

PS2_write:
	or	[esi][edi].DMAChnFlgs,fwriteop

PS2_read:
	test	al, _16_bit_xfer	; Q: is this a 16 bit transfer
	jz	short byte_transfer	; N:
	or	[esi][edi].DMAChnFlgs,fWordTx

byte_transfer:
no_transfer:
					; indicate channel is programmed
					; using extended PI
	or	[esi+edi.DMAChnFlgs],fExtPI
	jmp	short PS2_prog_port



PS2_New_Count:
	call	PS2_Get_data_Ptr	; edi-> channel within dma save area
	movzx	ebx, [esi.DMA_bytePtr]	; obtain virtual byte ptr in ebx
	lea	edi, [esi+edi]
					; store count byte
	mov	byte ptr [ebx+edi.DMACount], al
	mov	byte ptr [ebx+esi.DMA_data], al
					; indicate channel is programmed
					; using extended PI
	or	[edi.DMAChnFlgs],fExtPI+fDirtyCount
	jmp	short PS2_Inc_Byte_Ptr


PS2_New_Adr:
	call	PS2_Get_data_Ptr	; edi-> channel info within dma save
					;       area
	movzx	ebx, [esi.DMA_bytePtr]	; obtain the virtual byte ptr

	lea	edi, [esi+edi]
					; store the appropriate byte
	mov	byte ptr [ebx+edi.DMALinAdr], al
	mov	byte ptr [ebx+esi.DMA_data], al
					; indicate channel is programmed
					; using extended PI
	or	[edi.DMAChnFlgs],fExtPI+fDirtyAddr

;
; Increment the bytr ptr for the controller

PS2_Inc_Byte_Ptr:
	inc	ebx
	cmp	bl, [esi.DMA_dataBytes]
	jb	short next_ok
	xor	ebx, ebx
next_ok:
	mov	[esi.DMA_bytePtr], bl
	jmp	short PS2_write_done


PS2_write_done:
	clc			; IO emulated
	pop	ebp
	pop	edi
	pop	edx
	pop	ebx
	pop	esi
	pop	eax
	ret

bad_write:

PS2_prog_port:
DEFNoEm:
	stc
	pop	ebp
	pop	edi
	pop	edx
	pop	ebx
	pop	esi
	pop	eax
	ret

;############################################################################
;
;	Procedure name	: PS2_DMA_Set_IO_Adr
;
;	ENTRY		: al = original cmd byte
;			: ebx = function # * 2
;			: di = controller index
;
;	EXIT		: DMARegSav structure updated with information
;
;	REGs MOD	: NONE
;
;############################################################################

PS2_DMA_Set_IO_Adr:

	push	esi

	lea	esi, [DMARegSav]	; ds:si DMA save area
	mov	[esi.DMA_PS2_cmd], al	; save cmd byte
	mov	[esi.DMA_bytePtr], 0	; reset internal byte ptr
	mov	[esi.DMA_databytes],2	; allow for writing 2 bytes
	mov	[esi.DMA_writing], TRUE
	out	18h,al

	pop	esi
	ret



;############################################################################
;
;	Procedure name	: PS2_DMA_Set_Mem_Adr
;
;	ENTRY		: al = original cmd byte
;			: ebx = function # * 2
;			: di = controller index
;
;	EXIT		: DMARegSav structure updated with information
;
;	REGs MOD	: NONE
;
;############################################################################

PS2_DMA_Set_Mem_Adr:

	push	esi

	lea	esi, [DMARegSav]	; ds:si DMA save area
	mov	[esi.DMA_PS2_cmd], al	; save cmd byte
	mov	[esi.DMA_bytePtr], 0	; reset internal byte ptr
	mov	[esi.DMA_databytes],3	; allow for writing 3 bytes
	mov	[esi.DMA_writing], TRUE

	pop	esi
	ret


;############################################################################
;
;	Procedure name	: PS2_DMA_Set_Count
;
;	ENTRY		: al = original cmd byte
;			: ebx = function # * 2
;			: di = controller index
;
;	EXIT		: DMARegSav structure updated with information
;
;	REGs MOD	: NONE
;
;############################################################################

PS2_DMA_Set_Count:

	push	esi

	lea	esi, [DMARegSav]	; ds:si DMA save area
	mov	[esi.DMA_PS2_cmd], al	; save cmd byte
	mov	[esi.DMA_bytePtr], 0	; reset internal byte ptr
	mov	[esi.DMA_databytes],2	; allow for writing 2 bytes
	mov	[esi.DMA_writing], TRUE

	pop	esi
	ret



;############################################################################
;
;	Procedure name	: PS2_DMA_Set_Mode & PS2_DMA_Set_Arbus:
;
;	ENTRY		: al = original cmd byte
;			: ebx = function # * 2
;			: di = controller index
;
;	EXIT		: DMARegSav structure updated with information
;
;	REGs MOD	: NONE
;
;############################################################################

PS2_DMA_Set_Arbus:
PS2_DMA_Set_Mode:

	push	esi

	lea	esi, [DMARegSav]	; ds:si DMA save area
	mov	[esi.DMA_PS2_cmd], al	; save cmd byte
	mov	[esi.DMA_bytePtr], 0	; reset internal byte ptr
	mov	[esi.DMA_databytes],1	; allow for writing 1 byte
	mov	[esi.DMA_writing], TRUE
	out	DMA_XFN,al		; actually do IO	;LEO

	pop	esi
	ret



;############################################################################
;
;	Procedure name	: PS2_DMA_Get_Mem_Adr
;
;	ENTRY		: al = original cmd byte
;			: ebx = function # * 2
;			: di = controller index
;
;	REGs MOD	: NONE
;
;	Description:
;		When port 18H is programmed for reading the adddr., the
;	appropriate addr is obtained and placed in the DMA save area
;	by calling PS2_Setup_Read. The next in to port 1AH will result
;	in the appropriate byte being read from the DMA save area (see
;	DMA_ExecFunc for reads).
;
;
;############################################################################

PS2_DMA_Get_Mem_Adr:

	push	esi
	push	eax
	push	edi
	push	ecx

	lea	esi, [DMARegSav]	; ds:si DMA save area
	and 	eax, PS2_CHANNEL_MASK
	mov	cx, SIZE DMARegREc
	mul	cx			; eax -> channel within dma
					; save area
	mov	edi,eax
	lea	edi, [esi+edi]
	mov	eax, [edi.DMALinAdr]
	mov	ecx, 3
	call	PS2_Setup_Read

	pop	ecx
	pop	edi
	pop	eax
	pop	esi
	ret


;############################################################################
;
;	Procedure name	: PS2_DMA_Get_Count
;
;	ENTRY		: al = original cmd byte
;			: ebx = function # * 2
;			: di = controller index
;
;	REGs MOD	: NONE
;
;	Description:
;		When port 18H is programmed for reading the count, the
;	appropriate count is obtained and placed in the DMA save area
;	by calling PS2_Setup_Read. The next in to port 1AH will result
;	in the appropriate byte being read from the DMA save area (see
;	DMA_ExecFunc for reads).
;
;
;############################################################################

PS2_DMA_Get_Count:

	push	esi
	push	edi
	push	ecx
	push	eax

	lea	esi, [DMARegSav]		; ds:si DMA save area
	and 	eax, PS2_CHANNEL_MASK
	mov	cx, SIZE DMARegRec
	mul	cx				; eax -> channel within dma
						; save area
	mov	edi,eax
	lea	edi, [esi+edi]

	test	[edi.DMAChnFlgs], fDirtyCount	; Q: count virtualized?
	jz	short get_phy_cnt		;   N: get physical

	mov	eax, [edi.DMACount]		;   Y: virtual count
ret_cnt:
	mov	ecx, 2
	call	PS2_Setup_Read

	pop	eax
	pop	ecx
	pop	edi
	pop	esi
	ret

get_phy_cnt:
	pop	eax			; recover orig cmd byte in al
	push	eax

	out	DMA_XFN, al		; issue get count cmd for channel
	jmp	$+2
	jmp	$+2

	xor	eax, eax		; clear high word of count

	in	al, DMA_EXE		; get low byte of count
	jmp	$+2
	jmp	$+2
	mov	ah, al			; save low byte in ah

	in	al, DMA_EXE		; get high byte of count
	jmp	$+2
	jmp	$+2
	xchg	ah, al			; ah = high, al = low
	jmp	short ret_cnt


;############################################################################
;
;	Procedure name	: PS2_DMA_Get_Status
;
;	ENTRY		: al = original cmd byte
;			: ebx = function # * 2
;			: di = controller index
;
;	REGs MOD	: NONE
;
;	Description:
;		When port 18H is programmed for reading the status, the
;	appropriate status is obtained and placed in the DMA save area
;	by calling PS2_Setup_Read. The next in to port 1AH will result
;	in the appropriate byte being read from the DMA save area (see
;	DMA_ExecFunc for reads).
;
;
;############################################################################

PS2_DMA_Get_Status:

	push	esi
	push	eax
	push	edi
	push	ecx

	lea	esi, [DMARegSav]		; ds:si DMA save area
						; save area

	xor	al, al
	xchg	al, [DMARegSav][di].DMAStatus	; status register must be
						; cleared after a read
	mov	ecx, 1
	call	PS2_Setup_Read

	pop	ecx
	pop	edi
	pop	eax
	pop	esi
	ret


;############################################################################
;
;	Procedure name	: PS2_DMA_Set_Chn_Mask
;
;	ENTRY		: al = original cmd byte
;			: ebx = function # * 2
;			: di = controller index
;
;
;	REGs MOD	: NONE
;
;############################################################################

PS2_DMA_Set_Chn_Mask:

	and	al, PS2_CHANNEL_MASK
	cmp	al, 4
	pushf				; save result of comparison
	and	al, 00000011b		; get channel # within controller
					; modulo 4
	or	al, 00000100b		; set bit in order to set mask
	popf				; restore result of original compare
	jb	short msk_cont1		; less than 4 then controller 1
	call	DMASinMsk2		; else controller 2
	jmp	short setmskexit

msk_cont1:
	call	DMASinMsk1

setmskexit:
	ret


;############################################################################
;
;	Procedure name	: PS2_DMA_Reset_Chn_Mask
;
;	ENTRY		: al = original cmd byte
;			: ebx = function # * 2
;			: di = controller index
;
;
;	REGs MOD	: NONE
;
;############################################################################

PS2_DMA_Reset_Chn_Mask:

	and	al, PS2_CHANNEL_MASK
	cmp	al, 4
	pushf				; save result of comparison
	and	al, 00000011b		; get channel # within controller
					; modulo 4 and also reset bit 2 for
					; unmask operation.
	popf				; restore result of original compare
	jb	short unmsk_cont1	; less than 4 then controller 1
	call	DMASinMsk2		; else controller 2
	jmp	short resetmskexit

unmsk_cont1:
	call	DMASinMsk1

resetmskexit:
	ret




;############################################################################
;
;	Procedure name	: PS2_DMA_Master_Clear
;
;	ENTRY		: al = original cmd byte
;			: ebx = function # * 2
;			: di = controller index
;
;
;	REGs MOD	: NONE
;
;############################################################################

PS2_DMA_Master_Clear:

	push	esi
	push	eax

	lea	esi, [DMARegSav]
	xor	eax, eax
	mov	[esi.DMAStatus][0], al
	mov	[esi.DMAStatus][1], al
	mov	[esi.DMAFF][0], al
	mov	[esi.DMAFF][1], al
	mov	[esi.DMA_PS2_cmd], al
	mov	[esi.DMA_writing], al
	mov	[esi.DMA_bytePtr], al
	mov	[esi.DMA_dataBytes], al
	mov	[esi.DMA_data], eax

	mov	al, 0fh
	call	DMAMask1

	mov	al, 0fh
	call	DMAMask2

	pop	eax
	pop	esi

	ret




;############################################################################
;
;	Procedure name	: PS2_Get_data_ptr
;
;	ENTRY		: esi = dma save area
;
;	EXIT		: edi -> the appropriate channel data within dma
;			         save area
;
;
;############################################################################

PS2_Get_data_Ptr	proc	near

	push	eax
	movzx	eax, [esi.DMA_PS2_cmd]
	and 	al, PS2_CHANNEL_MASK

	mov	di, SIZE DMARegRec
	mul	di
	mov	edi, eax

	pop	eax

	ret

PS2_Get_data_Ptr	endp


;############################################################################
;
;	Procedure name	: PS2_Setup_Read
;
;	ENTRY		: EAX is data (1, 2 or 3 bytes)
;			: ECX is # of bytes
;			: ESI -> dma save area
;
;	REGs MOD	: NONE
;
;############################################################################

PS2_Setup_Read	proc	near

	mov	[esi.DMA_writing], FALSE
	mov	[esi.DMA_byteptr], 0
	mov	[esi.DMA_databytes], cl
	mov	[esi.DMA_data], eax
	ret

PS2_Setup_Read	endp

_TEXT	ends

	end

=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\emm386\dma.inc ===
ifndef INC_LIST
.xlist
endif
;=============================================================================
;==
;== (C) Copyright MICROSOFT Corp. 1989-1991
;== (C) Copyright COMPAQ Computer Corp. 1989-1991
;==
;==	Title:	EMM386.EXE - MICROSOFT Expanded Memory Manager 386 Driver
;==
;==	Module: DMA.INC  - Include for DMA support
;==
;==	Version: 1.00
;==
;==	Date:	September 9,1989
;==
;==	Author: Leo Cohen
;==
;=============================================================================
;==
;==	Change Log:
;==
;==	DATE	 	 REVISION	Description
;==	-------- --------	--------------------------------------------
;== 09/09/89 0.00	        Original
;==
;=============================================================================
;=============================================================================
;==  DMA related ports (ISA)
;=============================================================================
DMA_P0		equ	0087h	; DMA page register for Channel 0
DMA_P1		equ	0083h	; DMA page register for Channel 1
DMA_P2		equ	0081h	; DMA page register for Channel 2
DMA_P3		equ	0082h	; DMA page register for Channel 3
DMA_P5		equ	008Bh	; DMA page register for Channel 5
DMA_P6		equ	0089h	; DMA page register for Channel 6
DMA_P7		equ	008Ah	; DMA page register for Channel 7

DMA_B0		equ	0000h	; DMA base register for Channel 0
DMA_C0		equ	0001h	; DMA count register for Channel 0
DMA_B1		equ	0002h	; DMA base register for Channel 1
DMA_C1		equ	0003h	; DMA count register for Channel 1
DMA_B2		equ	0004h	; DMA base register for Channel 2
DMA_C2		equ	0005h	; DMA count register for Channel 2
DMA_B3		equ	0006h	; DMA base register for Channel 3
DMA_C3		equ	0007h	; DMA count register for Channel 3
DMA_B4		equ	00C0h	; DMA base register for Channel 4
DMA_C4		equ	00C2h	; DMA count register for Channel 4
DMA_B5		equ	00C4h	; DMA base register for Channel 5
DMA_C5		equ	00C6h	; DMA count register for Channel 5
DMA_B6		equ	00C8h	; DMA base register for Channel 6
DMA_C6		equ	00CAh	; DMA count register for Channel 6
DMA_B7		equ	00CCh	; DMA base register for Channel 7
DMA_C7		equ	00CEh	; DMA count register for Channel 7

DMA_CLR_FF1	equ	000Ch	; clear flip-flop cmd for channels 0-3
DMA_CLR_FF2	equ	00D8h	; clear flip-flop cmd for channels 5-7

;==============================================================================
;==
;== Status Register: (READ) 8237A Programmable DMA Controller
;==
;== 76543210
;== xxxxxxxx---> Channel 0 has reached TC
;== |||||||----> Channel 1 has reached TC
;== ||||||-----> Channel 2 has reached TC
;== |||||------> Channel 3 has reached TC
;== ||||-------> Channel 0 request
;== |||--------> Channel 1 request
;== ||---------> Channel 2 request
;== |----------> Channel 3 request
;==
;== Command Register: (WRITE) 8237A Programmable DMA Controller
;==
;== 76543210
;== xxxxxxxx---> Memory-to-Memory enable
;== |||||||----> Channel 0 address hold enable (don't care if bit 0 is reset)
;== ||||||-----> Controller Disable
;== |||||------> Compressed Timing (don't care if bit 0 is set)
;== ||||-------> Rotating Priority
;== |||--------> Extended Write Selection (don't care if bit 3 is set)
;== ||---------> DREQ Sense Active Low
;== |----------> DACK Sense Active High
;==
;==============================================================================
DMA_STAT1	equ	008h	; Status 1       	008h
DMA_STAT2	equ	0D0h	; Status 2       	0D0h
;==============================================================================
;==
;== Request Register: (WRITE) 8237A Programmable DMA Controller
;==
;== 76543210
;== xxxxxxxx
;== ||||||||---> Channel 0-3 selected
;== ||||||-----> Set Request Bit
;== |||||------> don't care
;==
;==============================================================================
DMA_REQUEST1	equ	009h	; Softreq 1      	009h
DMA_REQUEST2	equ	0D2h	; Softreq 2      	0D2h
;==============================================================================
;==
;== Single Mask Register: (WRITE) 8237A Programmable DMA Controller
;==
;== 76543210
;== xxxxxxxx
;== ||||||||---> Channel 0-3 selected
;== ||||||-----> Set Mask Bit
;== |||||------> don't care
;==
;==============================================================================
DMA_SINMASK1	equ	00Ah	; Single Mask 1  	00Ah
DMA_SINMASK2	equ	0D4h	; Single Mask 2  	0D4h
;==============================================================================
;==
;== Mode Register: (WRITE) 8237A Programmable DMA Controller
;==
;== 76543210
;== xxxxxxxx
;== ||||||||---> Channel 0-3 selected
;== ||||||-----> 0-Verify, 1-Write, 2- Read, 3-illegal, X- if bits 6 & 7 are set
;== ||||
;== ||||-------> Enable Autoinitaialize
;== |||--------> Address Decrement
;== ||---------> 0-Demand Mode, 1-Single Mode, 2-Block Mode, 3-Cascade Mode
;==
;==============================================================================
DMA_MODE1	equ	00Bh	; Mode 1         	00Bh
DMA_MODE2	equ	0D6h	; Mode 2         	0D6h

DMA_RESET1	equ	00Dh	; Reset 1        	00Dh
DMA_RESET2	equ	0DAh	; Reset 2        	0DAh
DMA_RESMASK1	equ	00Eh	; Reset Mask 1  	00Eh
DMA_RESMASK2	equ	0DCh	; Reset Mask 2		0DCh
;==============================================================================
;==
;== Mask Register: (WRITE) 8237A Programmable DMA Controller
;==
;== 76543210
;== xxxxxxxx
;== ||||||||---> Mask Channel 0
;== ||||||-----> Mask Channel 1
;== |||||------> Mask Channel 2
;==	||||-------> Mask Channel 3
;== |||--------> don't care
;==
;==============================================================================
DMA_MASK1	equ	00Fh	; Mask 1		00Fh
DMA_MASK2	equ	0DEh	; Mask 2		0DEh

;==============================================================================
;==  In addition for EISA:
;==============================================================================
;==============================================================================
;==
;== Channel Interrupt Status Register: (READ) (40Ah)
;==
;== 76543210
;== xxxxxxxx---> Interrupt on channel 0
;== |||||||----> Interrupt on channel 1
;== ||||||-----> Interrupt on channel 2
;== |||||------> Interrupt on channel 3
;== ||||-------> reserved
;== |||--------> Interrupt on channel 5
;== ||---------> Interrupt on channel 6
;== |----------> Interrupt on channel 7
;==
;== Chaining Mode Status Register: (READ) (4D4h)
;==
;== 76543210
;== xxxxxxxx---> Channel 0 enabled
;== |||||||----> Channel 1 enabled
;== ||||||-----> Channel 2 enabled
;== |||||------> Channel 3 enabled
;== ||||-------> reserved
;== |||--------> Channel 5 enabled
;== ||---------> Channel 6 enabled
;== |----------> Channel 7 enabled
;==
;== Chaining Mode Register: (WRITE) (40Ah & 4D4h)
;==
;== 76543210
;== xxxxxxxx
;== ||||||||---> Channel 0-3 selected
;== ||||||-----> 0-Disable, 1-Enable, 2-illegal, 3-Programming complete
;== ||||
;== ||||-------> reserved
;==
;==============================================================================
DMA_E_IS	equ	40Ah 	; Channel interrupt status register (read only)
DMA_E_CS	equ	4D4h 	; Chaining mode status register (read only)

DMA_E_CH1	equ	40Ah	; ChainMode for channels 0-3 (write only)
DMA_E_CH2	equ	4D4h	; ChainMode for channels 5-7 (write only)

;==============================================================================
;==
;== DMA Extended Mode Register: (WRITE) (40Bh & 4D6h)
;==
;== 76543210
;== xxxxxxxx
;== ||||||||---> Channel 0-3 selected
;== ||||||-----> 0-8/byte, 1-16/word, 2-32/byte, 3-16/byte
;== ||||-------> 0-ISA, 1-"A", 2-"B", 3-"C" (Burst)
;== ||---------> T-C is an input for this channel
;==	|----------> Stop register disabled
;==
;==============================================================================
DMA_E_EM1	equ	40Bh	; Extended Mode for channels 0-3
DMA_E_EM2	equ	4D6h	; Extended Mode for channels 5-7

DMA_E_P0	equ	487h	; HiPage0 (Bits: <31.24>)
DMA_E_P1	equ	483h	; HiPage1
DMA_E_P2	equ	481h	; HiPage2
DMA_E_P3	equ	482h	; HiPage3
DMA_E_P5	equ	48Bh	; HiPage5
DMA_E_P6	equ	489h	; HiPage6
DMA_E_P7	equ	48Ah	; HiPage7

DMA_E_C0	equ	401h	; HiCount0 (Bits: <23.16>)
DMA_E_C1	equ	403h	; HiCount1
DMA_E_C2	equ	405h	; HiCount2
DMA_E_C3	equ	407h	; HiCount3
DMA_E_C5	equ	4C6h	; HiCount5
DMA_E_C6	equ	4CAh	; HiCount6
DMA_E_C7	equ	4CEh	; HiCount7

DMA_E_S00	equ	4E0h	; Stop channel 0 (Bits: <7:2> )
DMA_E_S01	equ	4E1h	; Stop channel 0 (Bits: <15.8> )
DMA_E_S02	equ	4E2h	; Stop channel 0 (Bits: <23.16> )
DMA_E_S10	equ	4E4h	; Stop channel 1 (Bits: <7:2> )
DMA_E_S11	equ	4E5h	; Stop channel 1 (Bits: <15.8> )
DMA_E_S12	equ	4E6h	; Stop channel 1 (Bits: <23.16> )
DMA_E_S20	equ	4E8h	; Stop channel 2 (Bits: <7:2> )
DMA_E_S21	equ	4E9h	; Stop channel 2 (Bits: <15.8> )
DMA_E_S22	equ	4EAh	; Stop channel 2 (Bits: <23.16> )
DMA_E_S30	equ	4ECh	; Stop channel 3 (Bits: <7:2> )
DMA_E_S31	equ	4EDh	; Stop channel 3 (Bits: <15.8> )
DMA_E_S32	equ	4EEh	; Stop channel 3 (Bits: <23.16> )
DMA_E_S50	equ	4F4h	; Stop channel 5 (Bits: <7:2> )
DMA_E_S51	equ	4F5h	; Stop channel 5 (Bits: <15.8> )
DMA_E_S52	equ	4F6h	; Stop channel 5 (Bits: <23.16> )
DMA_E_S60	equ	4F8h	; Stop channel 6 (Bits: <7:2> )
DMA_E_S61	equ	4F9h	; Stop channel 6 (Bits: <15.8> )
DMA_E_S62	equ	4FAh	; Stop channel 6 (Bits: <23.16> )
DMA_E_S70	equ	4FCh	; Stop channel 7 (Bits: <7:2> )
DMA_E_S71	equ	4FDh	; Stop channel 7 (Bits: <15.8> )
DMA_E_S72	equ	4FEh	; Stop channel 7 (Bits: <23.16> )

;==
;==	  ChainBuffExp	40Ch         ** For DMA1 & DMA2  ?
;==   DMA_E_IS	40Ah : Channel interrupt status register (read only)
;==   DMA_E_CS	4D4h : Chaining mode status register (read only)
;==

;=============================================================================
;==  DMA Register Save Structure
;=============================================================================
Chnl0Num	equ	0	; Address offset in Address tables
Chnl1Num	equ	1	; Address offset in Address tables
Chnl2Num	equ	2	; Address offset in Address tables
Chnl3Num	equ	3	; Address offset in Address tables
Chnl4Num	equ	4	; Address offset in Address tables
Chnl5Num	equ	5	; Address offset in Address tables
Chnl6Num	equ	6	; Address offset in Address tables
Chnl7Num	equ	7	; Address offset in Address tables

DMARegRec	struc
  DMALinAdr	dd	0	; Channel Linear Base Register
  DMAPhyAdr	dd	0	; Channel Physical Base Register
  DMACount	dd	0	; Channel Count Register
  DMAChnFlgs	dw	0	; Channel Flags
  DMAChnlNum	dw	?	; Channel identifier index
DMARegRec	ends
;=============================================================================
;==  DMAChnlFlgs uses the following bits:
;=============================================================================
fChnlActive	equ 000000000001b ; Operation in progress on this channel
fDMABuffer	equ 000000000010b ; DMA buffer being used by this channel
fNoTrans	equ 000000000100b ; No linear to physical translation needed
fReadOp		equ 000000001000b ; Read operation
fWriteOp	equ 000000010000b ; Write operation
fDecMode	equ 000000100000b ; Channel is in decrement mode
fAutoInit	equ 000001000000b ; Channel is in auto initialize mode
fWordTx		equ 000010000000b ; Channel programmed for word transfers
fExtPI		equ 000100000000b ; Channel programmed via extended PI
fDirtyAddr	equ 001000000000b ; Virtual & physical address are not equal
fDirtyCount	equ 010000000000b ; Virtual & physical count are not the same
fCascadeOp	equ 100000000000b ; Cascade mode

fChnlActiveBit	equ	0 				; bit numbers for BT instruction
fDMABufferBit	equ	1
fNoTransBit	equ	2
fReadOpBit 	equ 	3
fWriteOpBit	equ 	4
fDecModeBit	equ	5
fAutoInitBit	equ	6
fWordTxBit	equ	7
fExtPIBit	equ	8
fDirtyAddrBit	equ	9
fDirtyCountBit	equ	10
fCascadeOpBit	equ	11
;=============================================================================
;==	 _DATA:[DMAFlags]: General flags
;=============================================================================
fDMABufferBusy	equ 00000001b	; DMA buffer is in use
fDMASystem	equ 00000010b	; DMA buffer is in use by system DMA
fDMAFormat	equ 00000100b	; Floppy format will be next DMA operation
fDMABuffXT	equ 00001000b	; DMA buffer is below 1 Meg

fDMABufferBusyBit equ	0	; bit numbers for BTx instructions
fDMASystemBit	  equ	1
fDMAFormatBit	  equ	2
fDMABuffXTBit	  equ	3

;=============================================================================
;==  Assume 18 sectors per track *QLEO: How about future floppy media?
;==  Need to find out largest amount of sectors/track of any floppy!
;=============================================================================
ORG_FORMAT_BUFFER_SIZE equ 10000h; ROM uses this size buffer for floppy format

DMARegBuf	struc
  Chnl0		db	(size DMARegRec - 2) dup (00), Chnl0Num, 0
  Chnl1		db	(size DMARegRec - 2) dup (00), Chnl1Num, 0
  Chnl2		db	(size DMARegRec - 2) dup (00), Chnl2Num, 0
  Chnl3		db	(size DMARegRec - 2) dup (00), Chnl3Num, 0
  Chnl4		db	(size DMARegRec - 2) dup (00), Chnl4Num, 0
  Chnl5		db	(size DMARegRec - 2) dup (00), Chnl5Num, 0
  Chnl6		db	(size DMARegRec - 2) dup (00), Chnl6Num, 0
  Chnl7		db	(size DMARegRec - 2) dup (00), Chnl7Num, 0
  DMAStatus	db	0	; Controller 1 Virtual Status Register
		db	0	; Controller 2 Virtual Status Register
  DMAFF		db	0	; Controller 1 FlipFlop State
		db	0	; Controller 2 FlipFlop State
  DMACtlFlgs	db  	0	; Controller 1 Flags
		db  	0	; Controller 2 Flags
; additional data for PS2 support. HKN
  DMA_PS2_cmd	db  	0	; last commmand byte
  DMA_writing	db  	0	; 0 - reading, 1 - writing port 1Ah
  DMA_bytePtr	db  	0	; byte position in read or write
  DMA_dataBytes	db  	0	; # of bytes readable or writable
  DMA_data	dd  	0	; if reading, then bytes that can be read
DMARegBuf	ends
;=============================================================================
;==  DMACtlFlgs: Controller flags
;=============================================================================
fDisabled	equ 00000001b	; controller is disabled
;=============================================================================
;==  DMA/bus master DMA version, OEM number, and DMA buffer ID
;=============================================================================
DBSMajVer	equ	1	; major version
DBSMinVer	equ	0	; minor version
DBSNumOEM	equ	1	; OEM number   (QLEO: ?????)
DBSRevOEM	equ	1	; OEM revision (QLEO: ?????)
DBSDMAXT 	equ 0010b	; DMA buffer below 1 megabyte
;=============================================================================
;==  DMA/bus master service flags
;=============================================================================
fDBSRSVD	equ 00000001b	; Reserved
fDBSBufferCopy  equ 00000010b	; automatic copy to/from bufffer
fDBSDisAutoBuff	equ 00000100b	; disable auto buffer allocation
fDBSDisAutoRem	equ 00001000b	; disable auto remap
fDBS64kAlign	equ 00010000b	; region must not cross a 64K boundary
fDBS128kAlign	equ 00100000b	; region must not cross a 128K boundary
fDBSPTEs	equ 01000000b	; copy PTE's for scatter/gather remap
fDBSNotPresent	equ 10000000b	; not present pages should not be locked
;=============================================================================
;==  DMA/bus master error codes
;=============================================================================
eDBSNotContig	equ	01h	; region not contiguous
eDBSBoundCross	equ	02h	; region crossed a boundary specified by flag
eDBSUnLockPage	equ	03h	; unable to lock pages
eDBSNoBuffer	equ	04h	; no buffer available
eDBSBufferSize	equ	05h	; size of buffer is too small
eDBSBufferBusy	equ	06h	; buffer is currently in use
eDBSInvalidMem	equ	07h	; invalid memory region
eDBSLockRegion	equ	08h	; region was not locked
eDBSTableSize	equ	09h	;	number of physical pages was greater than table length
eDBSInvalidBuff	equ	0Ah	; invalid buffer ID
eDBSBuffRange	equ	0Bh	; copy out of buffer range
eDBSInvalidDMA	equ	0Ch	; invalid DMA channel number
eDBSCountOver	equ	0Dh	; disable count overflow
eDBSCountUnder	equ	0Eh	; disable count underflow
eDBSInvalidFunc	equ	0Fh	; Function not supported
eDBSInvalidFlag	equ	10h	; Invalid flags requested
;=============================================================================
;==  DMA/bus master DMA descriptor structure (DDS)
;=============================================================================
sDDSDescriptor	struc
  DDSsize	dd	0	; region size
  DDSLinOffs	dd	0	; linear offset
  DDSseg	dw	0	; segment
  DDSBuffID	dw	0	; buffer ID (only one DMA buffer used in CEMM)
  DDSPhyAddr	dd	0	; physical address of region
sDDSDescriptor	ends
;=============================================================================
;==  DMA/bus master extended DDS
;=============================================================================
sDDSExtended	struc
  DDSEsize	dd	0	; region size
  DDSELinOffs	dd	0	; linear offset
  DDSEseg	dw	0	; segment
  DDSRSVD	dw	0	; reserved for future use
  DDSEAvail	dw	0	; available PTE/region entries
  DDSEUsed	dw	0	; used PTE/region entries
  DDSElist	dd	0	; first entry in PTE/region list
sDDSExtended	ends

sDDSEPTE	struc
  DDSEP		dd	0	; PTE entry
sDDSEPTE	ends

sDDSERegion		struc
  DDSERPhyAddr	dd	0	; physical address of region
  DDSERsize	dd	0	; size of contiguous region
sDDSERegion		ends
;=============================================================================
;==  Intel Above Brd / AT ports   as of 4/9/86 board !!!
;=============================================================================
IAB_P0		equ	0258h	; page 0 mapping register
IAB_P1		equ	4258h	; page 1 mapping register
IAB_P2		equ	8258h	; page 2 mapping register
IAB_P3		equ	0C258h	; page 3 mapping regester
IAB_PB0 	equ	2258h	; page 0 map reg for piggyback brd
IAB_PB1 	equ	6258h	; page 1 map reg for piggyback brd
IAB_PB2 	equ	0A258h	; page 2 map reg for piggyback brd
IAB_PB3 	equ	0E258h	; page 3 map reg for pibbyback brd
IAB_C0		equ	0259h	; control register
IAB_C1		equ	4259h	; control register
IAB_C2		equ	8259h 	; control register
IAB_C3		equ	0C259h	; control register

;##########################################################################
;
;equates and data for ps2 support. HKN
;
TRUE			equ	1
FALSE			equ	0
PS2_CHANNEL_MASK	equ	00000007h
PS2_FUNCTION_MASK	equ	000000f0h

;
;	extended mode bit
;
Transfer_Data	equ	00000100b
Write_Mem	equ	00001000b
_16_bit_xfer	equ	01000000b


;
;   PS/2 specific ports
;
DMA_XFN 	equ	0018h
DMA_EXE 	equ	001Ah

Set_IO_Adr	equ	00h
Set_Mem_Adr	equ	20h
Get_Mem_Adr	equ	30h
Set_Count	equ	40h
Get_Count	equ	50h
Get_Status	equ	60h
Set_Mode	equ	70h
Set_Arbus	equ	80h
Set_Chn_Mask	equ	90h
Reset_Chn_Mask	equ 	0A0h
Master_Clear	equ 0D0h

.list	; end of DMA.inc

=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\emm386\driver.inc ===
ifndef INC_LIST
.xlist
endif
;******************************************************************************
;
;   (C) Copyright MICROSOFT Corp. 1986-1991
;   (C) Copyright COMPAQ Computer Corp. 1986-1991
;
;   Title:    EMM386 - MICROSOFT Expanded Memory Manager 386
;
;   Module:   DRIVER.INC - MS-DOS Device Driver structures
;
;   Version:  0.02
;
;   Date:     June 25,1986
;
;   Author:
;
;******************************************************************************
;
;   Change log:
;
;     DATE    REVISION			DESCRIPTION
;   --------  --------	-------------------------------------------------------
;   06/25/86  Original
;   06/28/86  0.02	Name change from CEMM386 to CEMM (SBP).
;
;******************************************************************************
;
;    Device driver header structure
;
DEVICE_HEADER		STRUC
DEV_PTR 		DD		0
DEV_ATTR		DW		0
STRAT_PTR		DW		0
INT_PTR 		DW		0
DEV_NAME		DB		"        "
DEVICE_HEADER		ENDS
DEV_OFF 		EQU		WORD PTR DEV_PTR
DEV_SEG 		EQU		WORD PTR DEV_PTR+2
;
;    Device driver request header structure
;
REQUEST_HEADER		STRUC
HDR_LEN 		DB		0
UNIT_CODE		DB		0
COMMAND_CODE		DB		0
STATUS_WORD		DW		0
RES_AREA		DB		0,0,0,0,0,0,0,0
OP_DATA 		DB		0
REQUEST_HEADER		ENDS
;
;    Initialize command request header structure
;
INIT_HEADER		STRUC
			DB		13 DUP (?)
NUM_UNITS		DB		0
BRK_ADDR		DD		0
ARG_PTR 		DD		0
DRV_NUM 		DB		0
INIT_HEADER		ENDS
BRK_OFF 		EQU		WORD PTR BRK_ADDR
BRK_SEG 		EQU		WORD PTR BRK_ADDR+2
ARG_OFF 		EQU		WORD PTR ARG_PTR
ARG_SEG 		EQU		WORD PTR ARG_PTR+2
;
;    Media check request header structure
;
MEDIA_HEADER		STRUC
			DB		13 DUP (?)
MEDIA_BYTE		DB		0
RET_BYTE		DB		0
VOL_PTR 		DD		0
MEDIA_HEADER		ENDS
VOL_OFF 		EQU		WORD PTR VOL_PTR
VOL_SEG 		EQU		WORD PTR VOL_PTR+2
;
;    Build BPB request header structure
;
BPB_HEADER		STRUC
			DB		13 DUP (?)
BPB_DESC		DB		0
BPB_TRANS		DD		0
TABLE_PTR		DD		0
BPB_HEADER		ENDS
BPB_OFF 		EQU		WORD PTR BPB_TRANS
BPB_SEG 		EQU		WORD PTR BPB_TRANS+2
TABLE_OFF		EQU		WORD PTR TABLE_PTR
TABLE_SEG		EQU		WORD PTR TABLE_PTR+2
;
;    Input/output request header structure
;
IO_HEADER		STRUC
			DB		13 DUP (?)
IO_DESC 		DB		0
IO_TRANS		DD		0
IO_COUNT		DW		0
IO_START		DW		0
VOL_ID			DD		0
IO_HEADER		ENDS
IO_OFF			EQU		WORD PTR IO_TRANS
IO_SEG			EQU		WORD PTR IO_TRANS+2
ID_OFF			EQU		WORD PTR VOL_ID
ID_SEG			EQU		WORD PTR VOL_ID+2
;
;   Device driver BIOS Parameter Block (BPB) structure
;
BPB_BLOCK		STRUC
BYTES_PER_SECTOR	DW		0
SECTORS_PER_ALLOC	DB		0
RES_SECTORS		DW		0
NUM_FATS		DB		0
ROOT_DIR_ENTRIES	DW		0
NUMBER_OF_SECTORS	DW		0
MEDIA_DESC		DB		0
SECTORS_PER_FAT 	DW		0
BPB_BLOCK		ENDS
;
;   Device driver BIOS Parameter option block structure
;
BPB_OPTION		STRUC
SECTORS_PER_TRACK	DW		0
NUMBER_OF_HEADS 	DW		0
HIDDEN_SECTORS		DW		0
BPB_OPTION		ENDS
;
;  SMARTDRV status buffer
;
status	struc

write_through	db	0
write_buff	db	0
enable_13	db	0
nuldev		db	0
ticksetting	dw	0
lock_cache	db	0
reboot_flush	db	0
all_cache	db	0
pad		db	0
old_int13	dd	0
write_hits	dd	0
total_sec_read	dw	0
cache_sec_read	dw	0
track_sec_read	dw	0
cache_hit_ratio	db	0
track_hit_ratio	db	0
ttracks		dw	0
total_used	dw	0
total_locked	dw	0
total_dirty	dw	0
current_size	dw	0
initial_size	dw	0
minimum_size	dw	0

status	ends


.list	; end of Driver.inc

=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\emm386\dmatrap.asm ===
.386p
	page 58,132
;=============================================================================
	title	D M A T R A P - traps DMA programming into EMS windows
;=============================================================================
;==
;== (C) Copyright MICROSOFT Corp. 1989-1991
;== (C) Copyright COMPAQ Computer Corp. 1989-1991
;==
;==	Title:	EMM386.EXE - MICROSOFT Expanded Memory Manager 386 Driver
;==
;==	Module: DMATrap  - Traps DMA programming into EMS windows.
;==
;==	Version: 1.00
;==
;==	Date:	August 26,1989
;==
;==	Author: Leo Cohen
;==
;=============================================================================
;==
;==	Change Log:
;==
;==	DATE	 REVISION	Description
;==	-------- --------	--------------------------------------------
;==     08/26/89 0.00	        Original
;==
;==	02/08/91 M006		Initialize the channel 4 data structure for
;==				MCA machines. Also make DMAMask/UnMaskChannel
;==				sensitive to programming of the extended MCA
;==				ports.
;==	
;==	02/08/91 M007		Use the right equate when initializing the 
;==				DMA count info for EISA machines.
;==
;==	02/27/91 M012		Use ah to test for LONG READ/WRITE in int 13
;==				handler
;==
;==	04/19/91 		Added support for > 64K xfer in int 13 
;==				handler. Merged from compaq drop
;==
;=============================================================================
;==
;==   Functional Description:
;==
;==   This module monitors DMA programming while in Virtual 8088 mode.
;==
;==		a) DMA_Operation flag.
;==		   Bit 0: Buffer in use?
;==		   Bit 1: Operation going on?
;==
;==		b) Routine to check terminal count on Controller1 channels.
;==		   Get DMA status for controller 1 and test lower nibble.
;==
;==		c) Routine to check terminal count on Controller2 channels.
;==		   Get DMA status for controller2 and test lower nibble.
;==
;==		d) Routine to do the transfer to user buffer.
;==		   Check to see if the DMA buffer was being used in channel
;==		   flags.  If so read terminal count to determine how many
;==		   bytes were transferred and transfer those many bytes
;==		   to the user buffer.
;==
;==		e) DMA port handlers:
;==
;==			- All should check for TC.  And finish the transfer
;==			  if TC reached.
;==			- A mask operation is definitely transfer complete.
;==			- The base, page and count address register accesses
;==			  are just stored in the linear address and count.
;==			  The physical state of the DMA chip is not updated
;==			  till the unmask operation.
;==			- An unmask operation is the one which starts DMA
;==			  operation.  We need to examine linear address and
;==			  count, check to see if translation is enabled
;==			  or disabled on the channel and if enabled, see if
;==			  the range is contiguous.  If contiguous the DMA
;==			  can go across to the physical address and the
;==			  DMA buffer needn't be requested.  Else we need
;==			  to request the DMA buffer.  If the DMA buffer is
;==			  being used currently we should loop with interrupts
;==			  enabled till the buffer is free.  Note that
;==			  currently we operate with interrupts off. The
;==			  physical address in the DMA virtual state buffer
;==			  is updated and the transfer address and count are
;==			  dumped on the DMA chip and the channel unmasked.
;==			- The mode register access is processed to disallow
;==			  certain modes like autoinitialize if the DMA buffer
;==			  is needed.	.
;==			- The other ports are used just for TC checking.
;==
;==	  DMA ports to which must be trapped (ISA):  (CH 4 - refresh)
;==
;==			DMA1 	DMA2
;==	  Address0      000h    0C0h
;==	  Count0      	001h    0C2h
;==	  Page0         087h    ----
;==	  Address1      002h    0C4h
;==	  Count1      	003h    0C6h
;==	  Page1         083h    08Bh
;==	  Address2      004h    0C8h
;==	  Count2      	005h    0CAh
;==	  Page2         081h    089h
;==	  Address3      006h    0CCh
;==	  Count3      	007h    0CEh
;==	  Page3         082h    08Ah
;==	  Status        008h    0D0h
;==	  Softreq       009h    0D2h
;==	  Single Mask   00Ah    0D4h
;==	  Mode          00Bh    0D6h
;==	  FlipFlop      00Ch    0D8h
;==	  Reset         00Dh    0DAh
;==	  Reset Mask    00Eh    0DCh
;==	  Mask	   	00Fh	0DEh
;==
;==	  In addition for EISA:
;==
;==	  HiBase/Count0 401h    ----
;==	  HiPage0       487h    ----
;==	  HiBase/Count1 403h    4C6h
;==	  HiPage1       483h    48Bh
;==	  HiBase/Count2 405h    4CAh
;==	  HiPage2       481h    489h
;==	  HiBase/Count3 407h    4CEh
;==	  HiPage3       482h    48Ah
;==	  ChainMode	40Ah    4D4h
;==	  ExtendedMode  40Bh    4D6h
;==	  Stop0<7:2>    4E0h    ----
;==	  Stop0<15:8>   4E1h    ----
;==	  Stop0<23:16>  4E2h    ----
;==	  Stop1<7:2>    4E4h    4F4h
;==	  Stop1<15:8>   4E5h    4F5h
;==	  Stop1<23:16>  4E6h    4F6h
;==	  Stop2<7:2>    4E8h    4F8h
;==	  Stop2<15:8>   4E9h    4F9h
;==	  Stop2<23:16>  4EAh    4FAh
;==	  Stop3<7:2>    4ECh    4FCh
;==	  Stop3<15:8>   4EDh    4FDh
;==	  Stop3<23:16>  4EEh    4FEh
;==
;==
;==	  ChainBuffExp	40Ch         ** For DMA1 & DMA2
;==
;==
;==	  In addition for MCA:
;==
;==	  XFN
;==	  EXE
;==
;=============================================================================
;==	P U B L I C   D E C L A R A T I O N S
;=============================================================================
	public	DMAInit
	public	InitDMA
	public	DMARegSav
	public	DMABase0
	public	DMABase1
	public	DMABase2
	public	DMABase3
	public	DMABase5
	public	DMABase6
	public	DMABase7
	public	DMACnt0
	public	DMACnt1
	public	DMACnt2
	public	DMACnt3
	public	DMACnt5
	public	DMACnt6
	public	DMACnt7
	public	DMAPg0
	public	DMAPg1
	public	DMAPg2
	public	DMAPg3
	public	DMAPg5
	public	DMAPg6
	public	DMAPg7
	public	DMAStat1
	public	DMARequest1
	public	DMARequest2
	public	DMASinMsk1
	public	DMAMode1
	public	DMAClrFF1
	public	DMAReset1
	public	DMAResMsk1
	public	DMAMask1
	public	DMAStat2
	public	DMASinMsk2
	public	DMAMode2
	public	DMAClrFF2
	public	DMAReset2
	public	DMAResMsk2
	public	DMAMask2
	public	DMACheckTC
	public	DMATrapExit
	public	DMABeginChannel
	public	MoveBuffer
	public	SectorsPerTrack
	public	BytesPerSector
	public	ContigCheck
	public	pINT13hHandler
	public	rINT13hHandler

	public	FlushDMAState

;=============================================================================
;==	L O C A L   C O N S T A N T S
;=============================================================================
	include allocmem.inc
	include vdmseg.inc
	include vdmsel.inc
	include dma.inc
	include	page.inc
	include vm386.inc
	include	emm386.inc
	include	emmdata.inc
	include i13.inc

;=============================================================================
;==	E X T E R N A L   R E F E R E N C E S
;=============================================================================

_TEXT	segment
	extrn	PortTrapFar:far
	extrn	ReflectInterrupt:near
	extrn	CheckPageProt:near
_TEXT	ends

R_CODE	segment
	extrn	EMM_rFarEntry:word
R_CODE	ends

R1_CODE	segment
	extrn	rInt13HEntry:dword
	extrn	I13SectTrans:byte
	extrn	I13DriveTrap:dword
	extrn	SectorsInDMABuffer:byte
	extrn	LongSectorsInDMABuffer:byte
	extrn	ErrHndlr:far
R1_CODE	ends


LAST	segment
	extrn	EndDriver:word
LAST	ends

;=============================================================================
;==	L O C A	L   D A T A
;=============================================================================
_DATA	segment
DMARegSav   DMARegBuf	<>		; DMA Register buffer
ReturnAL    		db  	?	; Temp storage for client's AL

FormatBufferSize	dw	0	; Largest buffer needed for format

I13Operation		db	0	; Type of operation
I13DriveNumber		db	0	; Drive number for this operation

I13DriveIndex		db	0	; Outstanding DMA drive index
I13CheckDMA		dd	-1	; DMA drive check index
I13BuffAddress		dd	0	; Outstanding DMA buffer address

I13OrigNumSect		db	0	; Number of sectors to transfer
I13OrigStartSect	db	0	; Starting sector for transfer
I13OrigStartHead	db	0	; Starting head for transfer
I13OrigStartCyl		dw	0	; Starting cylinder for transfer
I13OrigBuffStart	dd	0	; Starting buffer offset
;*128KDMA I13OrigBuffOff		dw	0	; Starting buffer offset

I13CurrNumSect		db	0	; Number of sectors to transfer
I13CurrStartSect	db	0	; Starting sector for transfer
I13CurrStartHead	db	0	; Starting head for transfer
I13CurrStartCyl		dw	0	; Starting cylinder for transfer
I13CurrBuffStart	dd	0	; Starting buffer offset
;*128KDMA I13CurrBuffOff		dw	0	; Starting buffer offset

HeadsPerCylinder	db	0	; Heads per cylinder (current)
	db	TotalDrives	dup (0)

SectorsPerTrack		db	0	; Sectors per track (current)
	db	TotalDrives	dup (0)

BytesPerSector		dw	0	; Bytes per sector (current)
	dw	TotalDrives     dup (0)

_DATA	ends


;=============================================================================
;==	C O D E  S E G M E N T
;=============================================================================
_TEXT	segment
	assume	cs:_TEXT,ds:_DATA,es:_DATA,gs:R_CODE,ss:STACK
;==============================================================================
;==
;==  DMAStat(1-2) - Read/Write DMA Controller Status/Command Registers
;==		    Check to see if a DMA operation has completed.
;==		    Emulate reads of status register and allow programming
;==		    of command register.  Memory-To-Memory command is not
;==		    allowed.
;==
;==  Entry: (Protected Mode Ring 0)
;==	AL = byte to output to port.
;==	DS = _DATA
;==	GS = R_CODE
;==	BX = port address
;==	DX = 0 => Emulate Input (Status Register).
;==	   <>0 => Emulate Output (Command Register).
;==
;==  Exit:  (Protected Mode Ring 0)
;==	AL  =  input or output value to port.
;==	CLC => I/O emulated by DMATrap.
;==	STC => I/O NOT emulated by DMATrap.
;==
;== Status Register: (READ) 8237A Programmable DMA Controller
;==
;== 76543210
;== xxxxxxxx> Channel 0 has reached TC
;== > Channel 1 has reached TC
;== > Channel 2 has reached TC
;== > Channel 3 has reached TC
;== > Channel 0 request
;== > Channel 1 request
;== > Channel 2 request
;== > Channel 3 request
;==
;== Command Register: (WRITE) 8237A Programmable DMA Controller
;==
;== 76543210
;== xxxxxxxx> Memory-to-Memory enable
;== > Channel 0 address hold enable (don't care if bit 0 is reset)
;== > Controller Disable
;== > Compressed Timing (don't care if bit 0 is set)
;== > Rotating Priority
;== > Extended Write Selection (don't care if bit 3 is set)
;== > DREQ Sense Active Low
;== > DACK Sense Active High
;==
;==============================================================================
fMemoryToMemory	equ 00000001b		; memory-to-memory transfer
fDMADisabled	equ 00000100b		; controller disabled
fIllegalCommand equ fMemoryToMemory+fDMADisabled

DMAStat1:
	push	si
	xor	si,si			; index into controller 1
	jmp	short DMAStat

DMAStat2:
	push	si
	mov	si,1			; index into controller 2

DMAStat:
	call	DMACheckTC		; update virtualized status registers

	or	dx,dx			;Q: Emulate input?
	jnz	short DMACommand	; N: write to command register port
	mov	al,[DMARegSav][si].DMAStatus ; Y:get virtualized status register
	mov	[DMARegSav][si].DMAStatus,0  ;   and reset it
	clc
	pop	si
	ret

DMACommand:
;
;  **** Controller disable command is currently NOT supported ****
;
;  If a disable is detected, unmasks will not begin a transfer until the
;  controller is enabled.
;
	and	[DMARegSav][si].DMACtlFlgs,not fDisabled ; assume enabled
	test	al,fDMADisabled		;Q: Disable controller?
	jz	short DSCcont		; N: controller enabled
	or	[DMARegSav][si].DMACtlFlgs,fDisabled ; Y: disable controller

DSCcont:
	pop	si
	test	al,fIllegalCommand	;Q: Memory-To-Memory/disabled illegal
	jnz	SHORT DSCerror		; Y: error, can't handle
	stc				; N: program the 8237
	ret

DSCerror:
	mov	ax,DMAModeErr
	mov	bx,0
	PJmp	R1CODE_GSEL,R1_CODE:ErrHndlr

;==============================================================================
;==
;==  DMARequest - (WRITE) DMA Request register.
;==		  Check to see if a DMA operation has completed.  Program the
;==		  8237 if its a request.  Complete current transfer if request
;==		  is being reset.  Allow request to go through.  ** This
;==		  routine is not emulating H/W under all situations.  If
;==		  request is reset, it must read current registers from the
;==		  8237, and use them if a S/W request follows.  Currently,
;==		  this sequence will cause the 8237 to be reprogrammed with
;==		  initial values. **
;==
;==  Entry: (Protected Mode Ring 0)
;==	AL = byte to output to port.
;==	DS = _DATA
;==	GS = R_CODE
;==	BX = port address
;==	DX = 0 => Emulate Input
;==	   <>0 => Emulate Output
;==
;==  Exit:  (Protected Mode Ring 0)
;==	AL  =  input or output value to port.
;==	CLC => I/O emulated by DMATrap.
;==	STC => I/O NOT emulated by DMATrap.
;==
;== Request Register: (WRITE) 8237A Programmable DMA Controller
;==
;== 76543210
;== xxxxxxxx
;== > Channel 0-3 selected
;== > Set Request Bit
;== > don't care
;==
;==============================================================================
DMARequest1:
	push	si
	lea	si,[DMARegSav].Chnl0	; channel 0 on controller 1
	jmp	short DMARequest

DMARequest2:
	push	si
	lea	si,[DMARegSav].Chnl4	; channel 0 on controller 1

DMARequest:
	call	DMACheckTC
	push	cx

	or	dx,dx			;Q: Emulate output?
	jz	short DRqNoEm	 	; N: no emulation

	mov	cl,al			; get channel being used
	and	cx,00000011b            ;Q: Channel 0?
	jcxz	DRqChannel		; Y: have channel 0 context
DRqFindChannel:
	add	si,size DMARegRec	; next channel
	loop	DRqFindChannel		;Q: Channel context found? (if not, loop)
					; Y: channel context at [SI]
DRqChannel:
	test	al,00000100b		;Q: Requesting the channel?
	jnz	short DRqRequest	; Y: start transfer

	call	DMACompleteChannel	; check for completion
	jmp	short DRqNoEm	 	; no emulation

DRqRequest:
	test	[si].DMAChnFlgs,fChnlActive ;Q: Is channel already active?
	jnz	short DRqNoEm		    ; Y: no need to initialize again
	call	DMABeginChannel		    ; N: program 8237

DRqNoEm:
	stc
	pop	cx
	pop	si
	ret
;==============================================================================
;==
;==  DMASinMsk(1-2) - (WRITE) DMA Single Mask register.
;==		      Check to see if a DMA operation has completed.
;==		      If a mask to a channel is detected, check for DMA buffer
;==		      freeing up and update virtual data for channel. If an
;==		      unmask is detected, program 8237 for transfer to begin.
;==		      If DMA buffer is needed and is currently being used, it
;==		      will loop with interrupts on until it is free.
;==
;==
;==  Entry: (Protected Mode Ring 0)
;==	AL = byte to output to port.
;==	DS = _DATA
;==	GS = R_CODE
;==	BX = port address
;==	DX = 0 => Emulate Input
;==	   <>0 => Emulate Output
;==
;==  Exit:  (Protected Mode Ring 0)
;==	AL  =  input or output value to port.
;==	CLC => I/O emulated by DMATrap.
;==	STC => I/O NOT emulated by DMATrap.
;==
;==
;== Single Mask Register: (WRITE) 8237A Programmable DMA Controller
;==
;== 76543210
;== xxxxxxxx
;== > Channel 0-3 selected
;== > Set Mask Bit
;== > don't care
;==
;==============================================================================
DMASinMsk1:
	push	si
	lea	si,[DMARegSav].Chnl0	; channel 0 on controller 1
	jmp	short DMASinMsk

DMASinMsk2:
	push	si
	lea	si,[DMARegSav].Chnl4	; channel 0 on controller 2

DMASinMsk:
	call	DMACheckTC

	or	dx,dx			;Q: Emulate output?
	jz	short DSMNoEm	 	; N: no emulation
	push	cx			; Y: save

	mov	cl,al			; get channel being used
	and	cx,00000011b            ;Q: Channel 0?
	jcxz	DSMChannel		; Y: have channel 0 context
DSMFindChannel:
	add	si,size DMARegRec	; next channel
	loop	DSMFindChannel		;Q: Channel context found? (if not, loop)
					; Y: channel context at [SI]
DSMChannel:
	test	al,00000100b		;Q: Unmasking a channel?
	jnz	short DSMMask		; N: masking it, check for completion

	call	DMABeginChannel		; unmasking channel, must program 8237
	call	DMAUnMaskChannel	; unmask channel to start transfer
	jmp	short DSMExit

DSMMask:
	call	DMAMaskChannel		; mask channel to terminate DMA
	call	DMACompleteChannel	; masking channel, check for completion

DSMexit:
	clc
	pop	cx
	pop	si
	ret

DSMNoEm:
	stc
	pop	si
	ret
;==============================================================================
;==
;==  DMAMode(1-2) - (WRITE) DMA Mode register.
;==		    Check to see if a DMA operation has completed.
;==		    Mark DMAChnFlags if it is a read or a write operation.
;==		    Do not allow autoinitialize or decrement mode (note: I could
;==		    not think of a way to virtualize while in autoinitialize
;==		    mode, but decrement mode may be supported if needed).
;==
;==  Entry: (Protected Mode Ring 0)
;==	AL = byte to output to port.
;==	DS = _DATA
;==	GS = R_CODE
;==	BX = port address
;==	DX = 0 => Emulate Input
;==	   <>0 => Emulate Output
;==
;==  Exit:  (Protected Mode Ring 0)
;==	AL  =  input or output value to port.
;==	CLC => I/O emulated by DMATrap.
;==	STC => I/O NOT emulated by DMATrap.
;==
;==
;== Mode Register: (WRITE) 8237A Programmable DMA Controller
;==
;== 76543210
;== xxxxxxxx
;== > Channel 0-3 selected
;== > 0-Verify, 1-Write, 2- Read, 3-illegal, X- if bits 6 & 7 are set
;== > Enable Autoinitaialize
;== > Address Decrement
;== > 0-Demand Mode, 1-Single Mode, 2-Block Mode, 3-Cascade Mode
;==
;==============================================================================
fWriteMode	equ 00000100b
fReadMode	equ 00001000b
fAutoInitMode	equ 00010000b
fDecrementMode	equ 00100000b
fCascadeMode	equ 11000000b

DMAMode1:
	push	si
	lea	si,[DMARegSav].Chnl0	; channel 0 on controller 1
	jmp	short DMAMode

DMAMode2:
	push	si
	lea	si,[DMARegSav].Chnl4	; channel 0 on controller 2

DMAMode:
	call	DMACheckTC

	or	dx,dx			;Q: Emulate output?
	jz	short DMoNoEm	 	; N: no emulation
	push	cx			; Y: save

	mov	cl,al			; get channel being used
	and	cx,00000011b            ;Q: Channel 0?
	jcxz	DMoChannel		; Y: have channel 0 context
DMoFindChannel:
	add	si,size DMARegRec	; next channel
	loop	DMoFindChannel		;Q: Channel found? (if not, loop)
					; Y: channel context at [SI]
DMoChannel:
	pop	cx			; restore
;
; Channel is assumed to be programmed for: read, non decrement, non auto initialize
;
	or	[si].DMAChnFlgs,fReadOp	; assume read mode
	and	[si].DMAChnFlgs,not (fWriteOp+fDecMode+fAutoInit+fCascadeOp)

	push	ax
	and	al, fCascadeMode	;Q: Cascade mode?
	cmp	al, fCascadeMode	;   (both bits must be set)
	pop	ax
	jne	short DMoMode0
	or	[si].DMAChnFlgs, fCascadeOp

DMoMode0:
	test	al,fDecrementMode	;Q: Decrement mode requested?
	jz	short DMoMode1	  	; N: assumption correct
	or	[si].DMAChnFlgs,fDecMode; Y: decrement mode

DMoMode1:
	test	al,fReadMode		    ;Q: Read mode for channel?
	jnz	short DMoMode2	       	    ; Y: assumption correct
	and	[si].DMAChnFlgs,not fReadOp ; N: assume verify mode

	test	al,fWriteMode		;Q: Write mode for channel?
	jz	short DMoMode2		; N: verify mode
	or	[si].DMAChnFlgs,fWriteOp; Y: write mode

DMoMode2:
	test	al,fAutoInitMode	  ;Q: Autoinitialize mode?
	jz	short DMoNoEm		  ; N: assumption correct
	or	[si].DMAChnFlgs,fAutoInit ; Y: auto initialize mode

DMoNoEm:
	stc
	pop	si
	ret

;==============================================================================
;==
;==  DMAMask(1-2) - (WRITE) DMA Mask register.
;==		    Check to see if a DMA operation has completed.
;==		    If a mask to a channel is detected, check for DMA buffer
;==		    freeing up and update virtual data for channel. If an
;==		    unmask is detected, program 8237 for transfer to begin.
;==		    If DMA buffer is needed and is currently being used, it
;==		    will loop with interrupts on until it is free.
;==
;==  Entry: (Protected Mode Ring 0)
;==	AL = byte to output to port.
;==	DS = _DATA
;==	GS = R_CODE
;==	BX = port address
;==	DX = 0 => Emulate Input
;==	   <>0 => Emulate Output
;==
;==  Exit:  (Protected Mode Ring 0)
;==	AL  =  input or output value to port.
;==	CLC => I/O emulated by DMATrap.
;==	STC => I/O NOT emulated by DMATrap.
;==
;==
;== Mask Register: (WRITE) 8237A Programmable DMA Controller
;==
;== 76543210
;== xxxxxxxx
;== > Mask Channel 0
;== > Mask Channel 1
;== > Mask Channel 2
;== > Mask Channel 3
;== > don't care
;==
;==============================================================================
DMAMask1:
	push	si
	lea	si,[DMARegSav].Chnl0	; channel 0 on controller 1
	jmp	short DMAMask

DMAMask2:
	push	si
	lea	si,[DMARegSav].Chnl4	; channel 0 on controller 2

DMAMask:
	call	DMACheckTC

	or	dx,dx			;Q: Emulate output?
	jz	short DMNoEm	 	; N: no emulation
	push	cx			; Y: save
	push	ax

	mov	cx,4			; loop thru four channels
DMEachChannel:
	test	al,1			;Q: Unmasking channel?
	jnz	short DMMask		; N: masking it, check for completion

	call	DMABeginChannel		; program 8237
	call	DMAUnMaskChannel	; unmask channel
	jmp	short DMNextChannel

DMMask:
	call	DMAMaskChannel		; mask channel to terminate DMA
	call	DMACompleteChannel	; check for completion

DMNextChannel:
	add	si,size DMARegRec	; next channel
	shr	al,1
	loop	DMEachChannel
	clc				; emulated
	pop	ax
	pop	cx
	pop	si
	ret

DMNoEm:
	stc
	pop	si
	ret

;==============================================================================
;==
;==  DMAClrFF(1-2) - Reset Controller FlipFlop
;==
;==  Entry: (Protected Mode Ring 0)
;==	AL = byte to output to port.
;==	DS = _DATA
;==	GS = R_CODE
;==	BX = port address
;==	DX = 0 => Emulate Input
;==	   <>0 => Emulate Output (Clear Flip-Flop)
;==
;==  Exit:  (Protected Mode Ring 0)
;==	AL  =  input or output value to port.
;==	CLC => I/O emulated by DMATrap.
;==	STC => I/O NOT emulated by DMATrap.
;==
;==============================================================================
DMAClrFF1:
	push	si
	xor	si,si				; index into controller 1
	jmp	short DMAClrFF

DMAClrFF2:
	push	si
	mov	si,1				; index into controller 2

DMAClrFF:
	call	DMACheckTC

	or	dx,dx				;Q: Input ?
	jz	short DCFFNoEm			; Y: Let it go
	mov	[DMARegSav][si].DMAFF,0		; N: emulate it
	clc
	pop	si
	ret

DCFFNoEm:
	stc
	pop	si
	ret
;==============================================================================
;==
;==  DMAReset(1-2) - Reset Controller
;==		     *** Need to FREE UP DMA buffer if busy ***
;==
;==  Entry: (Protected Mode Ring 0)
;==	AL = byte to output to port.
;==	DS = _DATA
;==	GS = R_CODE
;==	BX = port address
;==	DX = 0 => Emulate Input (Status Register).
;==	   <>0 => Emulate Output (Command Register).
;==
;==  Exit:  (Protected Mode Ring 0)
;==	AL  =  input or output value to port.
;==	CLC => I/O emulated by LIM_Trap.
;==	STC => I/O NOT emulated by LIM_Trap.
;==
;==============================================================================
DMAReset1:
	push	ax
	push	si

	mov	al,0Fh			; mask channels 0-3 on controller 1
	call	DMAMask1

	xor	si,si			; index into controller 1
	jmp	short DMAReset

DMAReset2:
	push	ax
	push	si

	mov	al,0Fh			; mask channels 1-3 on controller 2
	call	DMAMask2

	mov	si,1			; index into controller 2

DMAReset:
	or	dx,dx				;Q: Input ?
	jz	short DRNoEm			; Y: no reset
	mov	[DMARegSav][si].DMAFF,0		; N: reset controller FF
	mov	[DMARegSav][si].DMAStatus,0 	; and status

DRNoEm:
	stc					; do the I/O
	pop	si
	pop	ax
	ret
;==============================================================================
;==
;==  DMAResMsk(1-2) - Reset Mask Register
;==
;==  Entry: (Protected Mode Ring 0)
;==	AL = byte to output to port.
;==	DS = _DATA
;==	GS = R_CODE
;==	BX = port address
;==	DX = 0 => Emulate Input
;==	   <>0 => Emulate Output
;==
;==  Exit:  (Protected Mode Ring 0)
;==	AL  =  input or output value to port.
;==	CLC => I/O emulated by LIM_Trap.
;==	STC => I/O NOT emulated by LIM_Trap.
;==
;==============================================================================
DMAResMsk1:
	push	si
	lea	si,[DMARegSav].Chnl0	; channel 0 on controller 1
	jmp	short DMAResMsk

DMAResMsk2:
	push	si
	lea	si,[DMARegSav].Chnl4	; channel 0 on controller 2

DMAResMsk:
	call	DMACheckTC

	or	dx,dx			;Q: Emulate output?
	jz	short DRMNoEm	 	; N: no emulation
	push	cx			; Y: save

	mov	cx,4			; loop thru four channels
DRMEachChannel:
	call	DMAMaskChannel		; mask channel to terminate DMA
	call	DMACompleteChannel	; check for completion
	add	si,size DMARegRec	; next channel
	loop	DRMEachChannel
	pop	cx

DRMNoEm:
	stc
	pop	si
	ret
;==============================================================================
;==
;==  DMABase(0-7) - Write/Read DMA Channel Base Register
;==
;==  Entry: (Protected Mode Ring 0)
;==	AL = byte to output to port.
;==	DS = _DATA
;==	GS = R_CODE
;==	BX = port address
;==	DX = 0 => Emulate Input.
;==	   <>0 => Emulate Output.
;==
;==  Exit:  (Protected Mode Ring 0)
;==	SI = pts to proper DMARegRec channel
;==	DI = Controller index
;==
;==============================================================================
DMABase0:
	push	si
	push	di
	xor	di,di				; controller 1 index
	lea	si,[DMARegSav].Chnl0
	jmp	DMABase

DMABase1:
	push	si
	push	di
	xor	di,di				; controller 1 index
	lea	si,[DMARegSav].Chnl1
	jmp	DMABase

DMABase2:
	push	si
	push	di
	xor	di,di				; controller 1 index
	lea	si,[DMARegSav].Chnl2
	jmp	DMABase

DMABase3:
	push	si
	push	di
	xor	di,di				; controller 1 index
	lea	si,[DMARegSav].Chnl3
	jmp	DMABase

DMABase5:
	push	si
	push	di
	mov	di,1				; controller 2 index
	lea	si,[DMARegSav].Chnl5
	jmp	DMABase

DMABase6:
	push	si
	push	di
	mov	di,1				; controller 2 index
	lea	si,[DMARegSav].Chnl6
	jmp	DMABase

DMABase7:
	push	si
	push	di
	mov	di,1				; controller 2 index
	lea	si,[DMARegSav].Chnl7
	jmp	DMABase

;==============================================================================
;==
;==  DMACnt(0-7) - Write/Read DMA Channel Count Register
;==
;==  Entry: (Protected Mode Ring 0)
;==	AL = byte to output to port.
;==	DS = _DATA
;==	GS = R_CODE
;==	BX = port address
;==	DX = 0 => Emulate Input.
;==	   <>0 => Emulate Output.
;==
;==  Exit:  (Protected Mode Ring 0)
;==	SI = pts to proper DMARegRec channel
;==	DI = Controller index
;==
;==============================================================================
DMACnt0:
	push	si
	push	di
	xor	di,di				; controller 1 index
	lea	si,[DMARegSav].Chnl0
	jmp	DMACnt

DMACnt1:
	push	si
	push	di
	xor	di,di				; controller 1 index
	lea	si,[DMARegSav].Chnl1
	jmp	DMACnt

DMACnt2:
	push	si
	push	di
	xor	di,di				; controller 1 index
	lea	si,[DMARegSav].Chnl2
	jmp	DMACnt

DMACnt3:
	push	si
	push	di
	xor	di,di				; controller 1 index
	lea	si,[DMARegSav].Chnl3
	jmp	DMACnt

DMACnt5:
	push	si
	push	di
	mov	di,1				; controller 2 index
	lea	si,[DMARegSav].Chnl5
	jmp	short DMACnt

DMACnt6:
	push	si
	push	di
	mov	di,1				; controller 2 index
	lea	si,[DMARegSav].Chnl6
	jmp	SHORT DMACnt

DMACnt7:
	push	si
	push	di
	mov	di,1				; controller 2 index
	lea	si,[DMARegSav].Chnl7
	jmp	SHORT DMACnt

;==============================================================================
;==
;==  DMAPg(0-7) - Write/Read DMA Channel Page Register
;==
;==  Entry: (Protected Mode Ring 0)
;==	AL = byte to output to port.
;==	DS = _DATA
;==	GS = R_CODE
;==	BX = port address
;==	DX = 0 => Emulate Input.
;==	   <>0 => Emulate Output.
;==
;==  Exit:  (Protected Mode Ring 0)
;==	SI = pts to proper DMARegRec channel
;==	AL = DMA addr bits 16-23 for channels 1-3
;==	   = DMA addr bits 17-23 for channels 5-7
;==
;==============================================================================
DMAPg0:
	push	si
	lea	si,[DMARegSav].Chnl0
	jmp	DMAPg

DMAPg1:
	push	si
	lea	si,[DMARegSav].Chnl1
	jmp	DMAPg

DMAPg2:
	push	si
	lea	si,[DMARegSav].Chnl2
	jmp	short DMAPg

DMAPg3:
	push	si
	lea	si,[DMARegSav].Chnl3
	jmp	short DMAPg

DMAPg5:
	push	si
	lea	si,[DMARegSav].Chnl5
	jmp	SHORT DMAPg

DMAPg6:
	push	si
	lea	si,[DMARegSav].Chnl6
	jmp	SHORT DMAPg

DMAPg7:
	push	si
	lea	si,[DMARegSav].Chnl7
	jmp	SHORT DMAPg

;==============================================================================
;==
;==  DMABase - Write/Read DMA Channel N Base Register
;==
;==  Entry: (Protected Mode Ring 0), DX, DS & DI on stack
;==	AL = byte to output to port.
;==	DS:SI pts to the DMA save area of interest
;==	DI = Controller index
;==	DX = 0 => Emulate Input.
;==	   <>0 => Emulate Output.
;==
;==  Exit:  (Protected Mode Ring 0)
;==	AL  =  emulated input value from port.
;==	CLC => I/O emulated by DMATrap.
;==	STC => I/O NOT emulated by DMATrap.
;==
;==============================================================================
DMABase:
	push	eax
	push	ecx
	push	dx
	push	es

	push	ds
	pop	es				; ES = _DATA

	call	DMACheckTC

	movzx	bx,[DMARegSav][di].DMAFF	; Flip-Flop state for controller
	xor	[DMARegSav][di].DMAFF,1		; toggle Flip-Flop

	or	dx,dx				;Q: Input ?
	jz	short DBNRead			; Y: do Read operation

	and	[si].DMAChnFlgs,not fExtPI	; ISA compatible mode
	mov	byte ptr [si][3].DMALinAdr,0	; ISA compatible mode
	mov	byte ptr [si][bx].DMALinAdr,al	; write virtualized 8237 base
	or	[si].DMAChnFlgs,fDirtyAddr	; virtual <> physical
	jmp	short DMATrapExit

DBNRead:
	call	GetDMAAddress			; AL = current count
	jmp	short DMATrapExit

;==============================================================================
;==
;==  DMACnt - Write/Read DMA Channel N Count Register
;==
;==  Entry: (Protected Mode Ring 0), DX, DS & DI on stack
;==	AL = byte to output to port.
;==	DS:SI pts to the DMA save area of interest
;==	DI = Controller index
;==	DX = 0 => Emulate Input.
;==	   <>0 => Emulate Output.
;==
;==  Exit:  (Protected Mode Ring 0)
;==	AL  =  emulated input value from port.
;==	CLC => I/O emulated by DMATrap.
;==	STC => I/O NOT emulated by DMATrap.
;==
;==============================================================================
DMACnt:
	push	eax
	push	ecx
	push	dx
	push	es

	push	ds
	pop	es				; ES = _DATA

	call	DMACheckTC

	movzx	bx,[DMARegSav][di].DMAFF	; Flip-Flop state for controller
	xor	[DMARegSav][di].DMAFF,1		; toggle Flip-Flop

	or	dx,dx				;Q: Input ?
	jz	short DCNRead			; Y: do Read operation

	and	[si].DMAChnFlgs,not fExtPI	; ISA compatible mode
	mov	word ptr [si][2].DMACount,0	; ISA compatible mode
	mov	byte ptr [si][bx].DMACount,al
	or	[si].DMAChnFlgs,fDirtyCount	; virtual <> physical
	jmp	short DMATrapExit

DCNRead:
	call	GetDMACount			; AL = current count
	jmp	short DMATrapExit

;==============================================================================
;==
;==  DMAPg - Write/Read DMA Channel N Page Register
;==
;==  Entry: (Protected Mode Ring 0), DX, DS & DI on stack
;==	AL = byte to output to port.
;==	BX = port address for I/O * 2
;==	DS:SI pts to the DMA save area of interest
;==	DX = 0 => Emulate Input.
;==	   <>0 => Emulate Output.
;==
;==  Exit:  (Protected Mode Ring 0)
;==	AL  =  emulated input value from port.
;==	CLC => I/O emulated by DMATrap.
;==	STC => I/O NOT emulated by DMATrap.
;==
;==
;==  For channels 0-4, DMACount is in Bytes, and DMALinAdr holds the address as:
;==
;==            Ŀ
;==               31-24      23-16            15-0         
;==            Ĵ
;==             0000 0000   A23-A16          A15-A0        
;==            
;==
;==  For channels 5-7, DMACount is in Words, and DMALinAdr holds the address as:
;==
;==            Ŀ
;==               31-24   23 22-16           15-0         
;==            Ĵ
;==             0000 0000 A23-A17 0         A16-A1        
;==            
;==
;==
;==============================================================================
DMAPg:
	push	di
	push	eax
	push	ecx
	push	dx
	push	es

	push	ds
	pop	es			; ES = _DATA

	call	DMACheckTC

	or	dx,dx			;Q: Input ?
	jz	short DPNRead		; Y: do Read operation

	and	[si].DMAChnFlgs,not fExtPI	; ISA compatible mode
	mov	byte ptr [si][3].DMALinAdr,0	; ISA compatible mode
	mov	byte ptr [si][2].DMALinAdr,al
	or	[si].DMAChnFlgs,fDirtyAddr	; virtual <> physical
	jmp	short DMATrapExit

DPNRead:
	test	[si].DMAChnFlgs,fDirtyAddr	;Q: virtual => physical?
	jz	short DPNRphys			; Y: physical read
	mov	al,byte ptr [si].DMALinAdr[2]   ; N: virtual  page
	jmp	short DMATrapExit

DPNRphys:
	movzx	ecx,[si].DMAChnlNum	; get port # for page register
	movzx	dx,[DMA_page_port][ecx]
	in	al,dx			; get byte from count register
	sub	al,byte ptr [si].DMAPhyAdr[2] ; Y: get starting physical address
	add	al,byte ptr [si].DMALinAdr[2] ; get starting linear address

;
;  unwind stack and return to IO_Trap
;
DMATrapExit:
	mov	[ReturnAL],al
	clc				; instruction was emulated
	pop	es
	pop	dx
	pop	ecx
	pop	eax
	pop	di
	pop	si
	mov	al,[ReturnAL]		; set AL for exit (read emulation)
	ret
;==============================================================================
;==
;==  DMACheckTC - Check if any of the channels have reached terminal count and
;==		  update virtualized status register.  If a channel has reached
;==		  TC, update flags and release DMA buffer if it was being used.
;==
;==  Entry: (Protected Mode Ring 0)
;==	DS = VDMD_GSEL
;==
;==  Exit:  (Protected Mode Ring 0)
;==
;==============================================================================
DMACheckTC proc	near
	push	ax
	push	cx
	push	si

	in	al,DMA_STAT1		; get status for controller 1
	or	[DMARegSav][0].DMAStatus,al ; update latest status information
	lea	si,[DMARegSav].Chnl0	; channel 0 on controller 1
	mov	cx,4			; loop through channels 0-3
	call	DCTCEachChannel

	in	al,DMA_STAT2		; get status for controller 2
	or	[DMARegSav][1].DMAStatus,al ; update latest status information
	lea	si,[DMARegSav].Chnl5	; channel 1 on controller 2
	mov	cx,3			; loop through channels 5-7
	call	DCTCEachChannel

	pop	si
	pop	cx
	pop	ax
	ret

DCTCEachChannel:
	test	al,1			;Q: Has TC been reached?
	jz	short DCTCNextChannel	; N: try next channel
	call	DMACompleteChannel	; Y: complete DMA transfer

DCTCNextChannel:
	add	si,size DMARegRec	; next channel
	shr	al,1
	loop	DCTCEachChannel
	ret

DMACheckTC endp

;==============================================================================
;==
;==  DMABeginChannel - Up to here, all DMA programming has been virtualized.
;==		       This routine checks to see if user buffer is contiguous.
;==		       If it is, programs the 8237 with the corresponding
;==		       physical address. If not contiguous, the DMA buffer
;==		       is used.
;==
;==  Entry: (Protected Mode Ring 0)
;==	DS:SI ptr to channel data area
;==
;==  Exit:  (Protected Mode Ring 0)
;==
;==============================================================================
DMABeginChannel proc	near
	pushad
	push	es

	btr	[si].DMAChnFlgs,fDMABufferBit	;Q: Channel using buffer?
	jnc	short DBCFormat			; N: nothing to be done
	and	[DMAFlags],not (fDMABufferBusy+fDMASystem) ;Y: free buffer

DBCFormat:
	test	[DMAFlags],fDMAFormat	;Q: Could this be a floppy format?
	jz	SHORT DBCGetAddress	; N: continue
;
;  Check to see if this is due to a floppy format.  If so, reduce the
;  size of the buffer from 64K to 4*(sectors/track)
;

	cmp	[si].DMACount,ORG_FORMAT_BUFFER_SIZE-1	;Q: Is it a format?
	jne	SHORT DBCGetAddress			; N: continue
	movzx	eax,[FormatBufferSize]			; Y: smaller buffer size
	mov	[si].DMACount,eax
	and	[DMAFlags],not fDMAFormat		; clear format flag

DBCGetAddress:
	call	DMAGetLinearAddress	; get linear address and size of buffer

	test	[si].DMAChnFlgs,fNoTrans;Q: Translate linear to physical?
	jnz	short DBCexit		; N: use given address ..
	jecxz	DBCexit			;    also if zero length transfer
	push	ecx			; Y: save transfer size

	test	[si].DMAChnFlgs,fDecMode;Q: Is controller in decrement mode?
	jz	short DBCContigCheck	; N: base and start address are the same
	sub	eax,ecx			; Y: calculate starting address

DBCContigCheck:
	call	ContigCheck		;Q: Physically contiguous buffer?
	pop	ecx			;   (restore size of transfer)
	jc	short DBCUseBuffer	; N: might use buffer

;  Check if ISA memory above 16 MB is supported.  If so, then use DMA
;  buffer when user buffer is above 16 MB.
;    eax = physical start address, ecx = transfer length in bytes

	test	gs:[genflags],fabove16M ;Q: Is ISA above 16M supported?
	jz	short DBCexit           ; N: continue
	mov	edx,ecx
	add	edx,eax
	cmp	edx,1000000h		;Q: Below 16M?
	jbe	short DBCexit   	; Y: Continue

DBCUseBuffer:
	test	[si].DMAChnFlgs, fCascadeOp	;Q: Cascade mode?
	jnz	short DBCexit			; Y: address/count don't matter
;
;  User Buffer is either not contiguous or a 64K/128K boundary crossing
;  is detected.  The DMA buffer must be used.
;  Must make sure the transfer size is smaller than the DMA buffer!!!!!!
;
;  Currently, if transfer size is larger, the user will be notified to reboot
;  the machine and restart CEMM with a larger DMA buffer size parameter.
;
;				 D:nnn, nnn=16,32,64,128
;
;				 A REBOOT MUST OCCUR!!!!
;

	test	[si].DMAChnFlgs,fAutoInit ;Q: AUTO INITIALIZE mode?
	jnz	short DBCModeError	  ; Y: nothing we can do!! (REBOOT)

	cmp	ecx,[DMABufferSize]	;Q: Larger than DMA buffer?
	ja	short DBCSizeError	; Y: nothing we can do!! (REBOOT)

	call	PreBufferedDMA

DBCexit:
	test	[si].DMAChnFlgs,fDecMode;Q: Is controller in decrement mode?
	jz	short DBCBaseAddr	; N: base and start address are the same
	add	eax,ecx			; Y: calculate starting address

DBCBaseAddr:
	call	DMASavePhysicalAddress
	call	DMAProgramChannel

	or	[si].DMAChnFlgs,fChnlActive	; set channel active

	mov	cx,[si].DMAChnlNum	; set active bit for this channel
	mov	al,1
	shl	ax,cl
	or	[DMAActive],al

	pop	es
	popad
	ret

DBCSizeError:
	shr	ecx,10			; size in 1K units
	add	cx,10h-1		; round up to next 16K boundary
	and	cx,not (10h-1)
	mov	bx,cx			; suggested D=nnn parameter size
	mov	ax,DMASizeErr
	PJmp	R1CODE_GSEL,R1_CODE:ErrHndlr

DBCModeError:
	mov	ax,DMAModeErr
	mov	bx,0
	PJmp	R1CODE_GSEL,R1_CODE:ErrHndlr

DMABeginChannel endp
;==============================================================================
;==
;==  DMACompleteChannel - Check if the channel was active (if not, do nothing)
;==			  If so, reset active bit and check if DMA buffer was
;==			  being used (if not, do nothing).  If DMA buffer is
;==			  in use by this channel, move data to user buffer if
;==			  a write operation took place.
;==
;==  Entry: (Protected Mode Ring 0)
;==	DS:SI ptr to channel data area
;==
;==  Exit:  (Protected Mode Ring 0)
;==	DMA operation completed (buffered/non-buffered)
;==
;==============================================================================
DMACompleteChannel proc	near
	push	ax
	push	cx

	mov	cx,[si].DMAChnlNum	; reset active bit for this channel
	mov	al,1
	shl	ax,cl
	not	al
	and	[DMAActive],al

	btr	[si].DMAChnFlgs,fChnlActiveBit	;Q: Is channel currently active?
	jnc	short DCCexit			; N: nothing to be done

	btr	[si].DMAChnFlgs,fDMABufferBit	;Q: Buffer being used?
	jnc	short DCCexit			; N: nothing to be done

	call	PostBufferedDMA			; complete buffered DMA transfer

DCCexit:
	pop	cx
	pop	ax
	ret
DMACompleteChannel endp

;==============================================================================
;==
;==  DMAMaskChannel - Physically masks a channel.
;==
;==  Entry: (Protected Mode Ring 0)
;==	DS:SI ptr to channel data area
;==
;==  Exit:  (Protected Mode Ring 0)
;==	Channel physically masked
;==
;==============================================================================
DMAMaskChannel proc	near
	push	ax
	push	dx
     					; M006 - Start
	test	[si].DMAChnFlgs,fExtPI	;Q: PS2 Ext PI?
	jz	short DMCISA		; N: ISA compatible

	test	gs:[GenFlags], fMCA	; Q: MCA ?
	jz	short DMCISA		; N: must be EISA

	xor	ax, ax
	mov	ax,[si].DMAChnlNum	; get single mask port channel number	
	or	ax, Set_Chn_Mask	; OR it with appropriate fn #
	mov	dx, DMA_XFN
	jmp	short DMCmask		; M006 - End

DMCISA:
	call	DMASetupSinMask		; get port in DX and channel AL
	or	al,00000100b		; set mask bit

DMCmask:
	out	dx,al			; mask channel

	pop	dx
	pop	ax
	ret
DMAMaskChannel endp
;==============================================================================
;==
;==  DMAUnMaskChannel - Physically unmasks a channel.
;==
;==  Entry: (Protected Mode Ring 0)
;==	DS:SI ptr to channel data area
;==
;==  Exit:  (Protected Mode Ring 0)
;==	Channel physically unmasked
;==
;==============================================================================
DMAUnMaskChannel proc	near
	push	ax
	push	dx
       					; M006 - Start
	test	[si].DMAChnFlgs,fExtPI	;Q: PS2 Ext PI?
	jz	short DUMCISA		; N: ISA compatible

	test	gs:[GenFlags], fMCA	; Q: MCA ?
	jz	short DUMCISA		; N: must be EISA

	xor	ax, ax
	mov	ax,[si].DMAChnlNum	; get single mask port channel number	
	or	ax, Reset_Chn_Mask	; OR it with appropriate fn #
	mov	dx, DMA_XFN
	jmp	short DUMCunmask	; M006 - End

DUMCISA:
	call	DMASetupSinMask		; get port in DX and channel AL
	and	al,11111011b		; clear mask bit

DUMCunmask:
	out	dx,al			; unmask channel

	pop	dx
	pop	ax
	ret
DMAUnMaskChannel endp
;==============================================================================
;==
;==  DMASetupSinMask - Gets single mask port number and seets up appropriate
;==		       channel number in AL.
;==
;==  Entry: (Protected Mode Ring 0)
;==	DS:SI ptr to channel data area
;==
;==  Exit:  (Protected Mode Ring 0)
;==	AL = 000000xxb, where xx is the channel number
;==	DX = Address for Single Mask port
;==
;==============================================================================
DMASetupSinMask	proc	near
	push	bx

	mov	bx,[si].DMAChnlNum	; get single mask port channel number
	movzx	dx,[DMA_single_mask_port][bx]
	mov	al,bl			; channel number
	and	al,03h			; modulo 4 (controller channel number)

	pop	bx
	ret
DMASetupSinMask	endp
;==============================================================================
;==
;==  PreBufferedDMA -
;==
;==  Entry: (Protected Mode Ring 0)
;==	DS:SI ptr to channel data area
;==
;==  Exit:  (Protected Mode Ring 0)
;==	EAX = Physical address of DMA buffer
;==	DMA channel flags and buffer ready for physically programming channel
;==
;==============================================================================
PreBufferedDMA	proc	near
	push	ecx
	push	edx
	push	esi
	push	edi
	push	ds
	push	es

;
;  Need to improve "wait till not busy scheme." System DMA might be depending
;  on an external interrupt also!!!!!		 QLEO
;
PBDCheckBuffer:
	test	[DMAFlags],fDMABufferBusy	;Q: DMA buffer busy?
	jz	short PBDBufferFree		; N: buffer is free

	test	[DMAFlags],fDMASystem		;Q: Is system DMA using buffer?
	jz	short PBDNonSystem		; N: turn interrupts on
	call	DMACheckTC			; Y: check if free
	jmp	short PBDCheckBuffer

PBDNonSystem:
	sti				; allow completion interrupt thru
	jmp	short PBDCheckBuffer

PBDBufferFree:
	cli
	or	[DMAFlags],fDMABufferBusy+fDMASystem	; DMA buffer used
	or	[si].DMAChnFlgs,fDMABuffer

	test	[si].DMAChnFlgs,fReadOp	;Q: Read operation
	jz	SHORT PBDexit		; N: copy data after completion
					; Y: copy user buffer to DMA buffer
	call	DMAGetLinearAddress	; ECX = size

	test	[si].DMAChnFlgs,fDecMode;Q: Is controller in decrement mode?
	jz	short PBDBaseAddr	; N: base and start address are the same
	sub	eax,ecx			; Y: calculate starting address

PBDBaseAddr:
	mov	esi,eax			; user buffer is the source
	mov	edi,[DMABufferAddress]	; DMA buffer is destination

	call	MoveBuffer

PBDexit:
	mov	eax,[DMABufferAddress]	; DMA buffer address (physical)
	pop	es
	pop	ds
	pop	edi
	pop	esi
	pop	edx
	pop	ecx
	ret
PreBufferedDMA	endp
;==============================================================================
;==
;==  PostBufferedDMA -  If DMA operation was a read, move data from DMA buffer
;==			to client/user buffer.
;==
;==  Entry: (Protected Mode Ring 0)
;==	DS:SI ptr to channel data area
;==
;==  Exit:  (Protected Mode Ring 0)
;==	DMA buffer free
;==
;==============================================================================
PostBufferedDMA proc	near
	push	eax
	push	ecx
	push	edx
	push	esi
	push	edi

	test	[si].DMAChnFlgs,fWriteOp;Q: Write operation
	jz	SHORT PoBDexit		; N: buffer copy is unnecessary
					; Y: copy DMA buffer to user buffer
	call	DMAGetLinearAddress	; ECX = size

	test	[si].DMAChnFlgs,fDecMode;Q: Is controller in decrement mode?
	jz	short PoBDStartAddr	; N: base and start address are the same
	sub	eax,ecx			; Y: calculate starting address

PoBDStartAddr:
	mov	esi,[DMABufferAddress]	; DMA buffer is source
	mov	edi,eax			; user buffer is the destination

	call	MoveBuffer

PoBDexit:
	and	[DMAFlags],not (fDMABufferBusy+fDMASystem) ; dma buffer free
	pop	edi
	pop	esi
	pop	edx
	pop	ecx
	pop	eax
	ret
PostBufferedDMA	endp
;==============================================================================
;==
;==  DMAGetLinearAddress - Get linear address from our channel data area
;==
;==  Entry: (Protected Mode Ring 0)
;==	DS:SI ptr to channel data area
;==
;==  Exit:  (Protected Mode Ring 0)
;==	EAX = linear Base Address
;==	ECX = size of transfer (bytes)
;==	EDX = boundary restriction (if crossed, will cause DMA to wrap)
;==
;==============================================================================
DMAGetLinearAddress	proc	near

	mov	eax,[si].DMALinAdr
	mov	ecx,[si].DMACount
	inc	ecx				; size of transfer
	mov	edx,10000h			; 64K boundary restriction

	test	[si].DMAChnFlgs,fExtPI		;Q: EISA/MCA Extended PI?	  	  ;PS2
	jnz	short DGLAExtMode		; Y: check type of mode

	cmp	[si].DMAChnlNum,4		;Q: Controller 2?
	jb	short DGLAexit			; N: no special treatment
	mov	edx,20000h			; Y: 128K boundary restriction
	shl	ecx,1				; adjust for word units

DGLAadjust:
	ror	eax,16
	shr	al,1				; D0 null in page reg
	rol	eax,17				; adjust for 'A0' offset

DGLAexit:
	cmp	eax,[I13BuffAddress]		;Q: Last INT 13h request?
	jne	short DGLAcont			; N: continue
	mov	[I13BuffAddress],0		; Y: mark DMA usage

DGLAcont:
	ret

DGLAExtMode:
	xor	edx,edx				; no boundary conditions
	test	[si].DMAChnFlgs,fWordTx		;Q: Word transfers?
	jz	short DGLAexit			; N: no more processing
	shl	ecx,1				; Y: adjust for word transfers

ifdef	ROMIDMCA
	cmp	[ROMID],ROMIDISA		;Q: EISA?
	je	short DGLAadjust		; Y: ISA compatible
	jmp	short DGLAexit			; N: return
endif
	test	gs:[GenFlags], fMCA		; Q: MCA ?
	jz	short DGLAadjust		; N: must be EISA
	jmp	short DGLAexit			; Y: return

DMAGetLinearAddress	endp
;==============================================================================
;==
;==  DMASavePhysicalAddress - Save the physical address to our channel data area
;==
;==  Entry: (Protected Mode Ring 0)
;==	EAX = Physical Address
;==	DS:SI ptr to channel data area
;==
;==  Exit:  (Protected Mode Ring 0)
;==
;==============================================================================
DMASavePhysicalAddress	proc	near

	test	[si].DMAChnFlgs,fExtPI		;Q: EISA/MCA Extended PI?	  	  ;PS2
	jnz	short DSPAExtMode		; Y: check type of mode

	cmp	[si].DMAChnlNum,4		;Q: Controller 2?
	jb	short DSPASaveIt		; N: save it as is

DSPAadjust:
	shr	eax,1				; adjust for implied 'A0'
	push	ax				; save A16-A1
	xor	ax,ax
	shl	eax, 1				; adjust for unused Pg Reg D0
	pop	ax				; restore A16-A1

DSPASaveIt:
	mov	[si].DMAPhyAdr,eax
	ret

DSPAExtMode:
	test	[si].DMAChnFlgs,fWordTx		;Q: Word transfers?
	jz	short DSPASaveIt		; N: no more processing

ifdef	ROMIDMCA
	cmp	[ROMID],ROMIDISA		;Q: EISA?
	je	short DSPAadjust		; Y: ISA compatible
	jmp	short DSPASaveIt		; N: return
endif
	test	gs:[GenFlags], fMCA		; Q: MCA ?
	jz	short DSPAadjust		; N: must be EISA
	jmp	short DSPASaveIt		; Y: return


DMASavePhysicalAddress	endp
;==============================================================================
;==
;==  DMAProgramChannel - Physically programs 8237 according to the current
;==			 channel data area.
;==
;==  Entry: (Protected Mode Ring 0)
;==	DS:SI ptr to channel data area
;==
;==  Exit:  (Protected Mode Ring 0)
;==	channel physically programmed
;==
;==============================================================================
DMAProgramChannel proc	near
	push	ax

	and	[si].DMAChnFlgs,not (fDirtyAddr+fDirtyCount) ; virtual=physical

ifdef	ROMIDMCA
	cmp	[ROMID],ROMIDPS2	;Q: PS2 machine?
	je	short DPCPS2		; Y: check if extended PI is used
endif
	test	gs:[GenFlags], fMCA	; Q: MCA ?
	jnz	short DPCPS2		; Y: check if extended PI is used

DPCISA:
	push	ebx
	push	dx

	xor	bx,bx			; physically clear clear FF
	call	DMASetUpFF

	movzx	ebx,[si].DMAChnlNum	; channel number

;
;  Program base address register
;
	movzx	dx,[DMA_address_port][bx]	; DMA Base register port
	mov	al,byte ptr [si][0].DMAPhyAdr	; low order byte
	out	dx,al

	mov	al,byte ptr [si][1].DMAPhyAdr	; high order byte
	out	dx,al

;
;  Program page register
;
	movzx	dx,[DMA_page_port][bx]		; page port address
	mov	al,byte ptr [si][2].DMAPhyAdr	; high word, low byte
	out	dx,al

;
;  Program count register
;
	movzx	dx,[DMA_count_port][bx]		; DMA count register port
	mov	al,byte ptr [si][0].DMACount	; low order byte
	out	dx,al

	mov	al,byte ptr [si][1].DMACount	; high order byte
	out	dx,al

	cmp	byte ptr [si][3].DMAPhyAdr,0	;Q: Super extended memory?
	jne	short DPCEISA			; Y: need to program EISA DMA

	test	[si].DMAChnFlgs,fExtPI		;Q: EISA extended PI used?
	jz	short DPCexit			; N: ISA programming complete

DPCEISA:
;
;  Program EISA high page register
;
	mov	dx,[DMA_EISA_HighPagePort][ebx*2]; EISA high page port address
	mov	al,byte ptr [si][3].DMAPhyAdr	 ; bits 24.31
	out	dx,al

;
;  Program EISA high count register
;
	mov	dx,[DMA_EISA_HighCountPort][ebx*2]; EISA high count register port
	mov	al,byte ptr [si][2].DMACount	  ; bits 16.23
	out	dx,al

DPCexit:
	pop	dx
	pop	ebx
	pop	ax
	ret


DPCPS2:
	test	[si].DMAChnFlgs,fExtPI	;Q: PS2 Ext PI?
	jz	short DPCISA		; N: ISA compatible
					; Y: program extended mode
;output base address

	mov	ax,[si].DMAChnlNum
	or	al,Set_Mem_Adr
	out	DMA_XFN,al
	jmp	$+2
	jmp	$+2

	mov	al,byte ptr [si][0].DMAPhyAdr
	out	DMA_EXE,al
	jmp	$+2
	jmp	$+2

	mov	al,byte ptr [si][1].DMAPhyAdr
	out	DMA_EXE,al
	jmp	$+2
	jmp	$+2

	mov	al, byte ptr [si][2].DMAPhyAdr
	out	DMA_EXE,al
	jmp	$+2
	jmp	$+2

;output count

	mov	ax,[si].DMAChnlNum
	or	al,Set_Count
	out	DMA_XFN,al
	jmp	$+2
	jmp	$+2

	mov	al,byte ptr [si][0].DMACount
	out	DMA_EXE,al
	jmp	$+2
	jmp	$+2

	mov	al,byte ptr [si][1].DMACount
	out	DMA_EXE,al
	jmp	$+2
	jmp	$+2

	pop	ax
	ret

DMAProgramChannel	endp

;==============================================================================
;==
;==  GetDMACount - Read the DMA current count byte
;==
;==  Entry: (Protected Mode Ring 0)
;==	BX = Internal flip flop state
;==	ES:SI pts to the DMA save area of interest
;==
;==  Exit:  (Protected Mode Ring 0)
;==	AL = current byte of count register
;==	Internal FF state updated
;==
;==============================================================================
GetDMACount	proc	near
	push	bx
	push	dx

	test	[si].DMAChnFlgs,fDirtyCount	;Q: virtual => physical?
	jz	short GDCphys			; Y: physical read
	mov	al,byte ptr [si][bx].DMACount	; N: virtual count
	jmp	short GDCexit

GDCphys:
	call	DMASetUpFF

	mov	bx,[si].DMAChnlNum	; get port # for count register
	movzx	dx,[DMA_count_port][bx]
	in	al,dx			; get byte from count register

GDCexit:
	pop	dx
	pop	bx
	ret
GetDMACount	endp

;==============================================================================
;==
;==  GetDMAAddress - Read the DMA current address byte
;==
;==  Entry: (Protected Mode Ring 0)
;==	BX = Internal flip flop state
;==	ES:SI pts to the DMA save area of interest
;==
;==  Exit:  (Protected Mode Ring 0)
;==	AL = current byte of count register
;==	Internal FF state updated
;==
;==============================================================================
GetDMAAddress	proc	near
	push	bx
	push	dx

	test	[si].DMAChnFlgs,fDirtyAddr	;Q: virtual => physical?
	jz	short GDAphys			; Y: physical read
	mov	al,byte ptr [si][bx].DMALinAdr	; N: virtual address
	jmp	short GDAexit

GDAphys:
	call	DMASetUpFF

	push	bx			; save FF state
	mov	bx,[si].DMAChnlNum	; get port # for count register
	movzx	dx,[DMA_address_port][bx]
	in	al,dx			; get byte from count register
	pop	bx			; restore FF state

	or	bx,bx			;Q: Need to adjust for lin/phy trans?
	jz	short GDAexit		; N: exit
	mov	dl,byte ptr [si].DMAPhyAdr[1] ; Y: get starting physical address
	and	dl,0F0h			; starting physical 4K page
	sub	al,dl			; number of 4K pages completed
	mov	dl,byte ptr [si].DMALinAdr[1] ; get starting linear address
	and	dl,0F0h			; starting linear 4K page
	add	al,dl			; current linear address

GDAexit:
	pop	dx
	pop	bx
	ret
GetDMAAddress	endp

;==============================================================================
;==
;==  DMASetUpFF - Set up Flip-Flop of controller to proper state
;==
;==  Entry: (Protected Mode Ring 0)
;==	BL =  desired state of physical Flip-Flop
;==	DS:SI pts to the DMA channel save area
;==
;==  Exit:  (Protected Mode Ring 0)
;==	Physical Flip-Flop state of controller is set up properly
;==
;==============================================================================
DMASetUpFF proc	near
	push	dx
	push	di

	mov	di,[si].DMAChnlNum	; get port for Clear Flip-Flop
	movzx	dx,[DMA_clr_FF_port][di]
	out	dx,al			; clear Flip-Flop

	or	bl,bl			;Q: Flip-Flop cleared?
	jz	SHORT DSUFFexit		; Y: Flip-Flop state OK
	movzx	dx,[DMA_count_port][di] ; N: set Flip-Flop
	in	al,dx

DSUFFexit:
	pop	di
	pop	dx
	ret
DMASetUpFF	endp

;==============================================================================
;==
;==  MoveBuffer - Moves a buffer.
;==
;==  Entry: (Protected Mode Ring 0)
;==	ECX = byte count
;==	ESI = 32-bit source buffer ptr
;==	EDI = 32-bit destination buffer ptr
;==
;==  Exit:  (Protected Mode Ring 0)
;==	Buffer moved (**QLEO: this routine should be interruptible!!!)
;==
;==============================================================================
MoveBuffer	proc	near
	push	ax
	push	ecx
	push	esi
	push	edi
	push	es

	mov	ax,DATA32_GSEL			; access all of memory
	mov	es,ax
	cld

	call	CheckPageProt			;Q: Write protection violation?
	jecxz	short MBexit			; Y: don't copy buffer

	test	cx,1				;Q: move an odd byte?
	jz	short MBword			; N: move word
	movs byte ptr es:[edi],byte ptr es:[esi]; Y: move a byte
	db	67h				; this and NOP need to be here
	nop					; due to an early 80386 bug!!!!!!!!

MBword:
	shr	ecx,1				; words
	test	cx,1				;Q: move an odd word?
	jz	short MBdword			; N: move dwords
	movs word ptr es:[edi],word ptr es:[esi]; Y: move a word
	db	67h				; this and NOP need to be here
	nop					; due to an early 80386 bug!!!!!!!!

MBdword:
	shr	ecx,1				; dwords
	rep movs dword ptr es:[edi],dword ptr es:[esi]
	db	67h				; this and NOP need to be here
	nop					; due to an early 80386 bug!!!!!!!!
MBexit:
	pop	es
	pop	edi
	pop	esi
	pop	ecx
	pop	ax
	ret
MoveBuffer	endp

;==============================================================================
;==
;==  ContigCheck - Checks if a linear buffer is physically contiguous.
;==
;==  Entry: (Protected Mode Ring 0)
;==	EAX = Starting linear address for buffer
;==	ECX = Size of buffer
;==	EDX = Boundary which may not be crossed (0=no boundary restrictions)
;==	      NOTE: boundary value must be larger than buffer size (ECX)
;==
;==  Exit:  (Protected Mode Ring 0)
;==	EAX = Starting physical address for buffer
;==	ECX = Size of maximum contiguous buffer which does not cross boundary
;==	EDX = 0 if boundary not crossed, else unchanged
;==	CY  = set, if buffer was not contiguous or crossed boundary condition
;==	      reset, if user buffer may be used for entire transfer
;==
;==============================================================================
ContigCheck 	proc	near
	push	ebx
	push	esi
	push	edi
	push	es

	mov	bx,PAGET_GSEL	; access to page tables
	mov	es,bx

	mov	ebx,eax
	add	ebx,ecx		; top of memory region
	jc	CCenough	; this should never happen
	dec	ebx		; ending linear address of buffer
	push	eax		; save starting linear address
	mov	esi,eax		; assume linear equals physical

	shr	eax,12		; beginning index into page table
	shr	ebx,12		; ending index into page table
;
;  Is buffer physically contiguous
;
	cmp	eax,[MaxPTEIndex] ;Q: Above page tables?
	jae	short CCphys1	  ; Y: physical and linear are the same

	test	word ptr es:[eax*4],P_WRITE ;Q: Is PTE write protected?
	jz	short CCphys1		    ; Y: lin=phy due to ROM
	mov	esi,es:[eax*4]	  	    ; N: get first physical address
CCphys1:
	and	si,0F000h	; clear control bits
	push	esi		; save starting physical page

CCNextPTE:
	add	esi,1000h	; next contiguous physical address
	inc	eax		; next PTE entry

	cmp	eax,ebx		;Q: Beyond buffer?
	ja    	short CCcont	; Y: buffer contiguous

	mov	edi,eax
	shl	edi,12		; assume physical and linear are the same

	cmp	eax,[MaxPTEIndex] ;Q: Above page tables?
	jae	short CCphys2	  ; Y: physical and linear are the same

	test	word ptr es:[eax*4],P_WRITE ;Q: Is PTE write protected?
	jz	short CCphys2		    ; Y: lin=phy due to ROM
	mov	edi,es:[eax*4]	  	    ; N: next physical address
CCphys2:
	and	di,0F000h
	cmp	esi,edi		;Q: Is it contiguous?
	je	CCNextPTE	; Y: try next PTE

CCcont:
	pop	eax		; starting physical page
	pop	ebx		; starting linear address
	and	bx,0FFFh	; offset into page
	or	ax,bx		; starting physical address

	dec	esi		; last addressable contiguous byte

	or	edx,edx		;Q: Any boundary restrictions?
	jz	short CCok	; N: no more checking

	cmp	edx,ecx		;Q: Is boundary restriction large enough?
	jb	short CCerror	; N: error

	test	eax,edx		;Q: Buffer starts at even boundary?
	jnz	short CCodd	; N: check if it also ends at an odd boundary?
	test	esi,edx		;Q: Does it also end on an even boundary?
	jz	short CCok	; Y: boundary is not crossed
	jmp	short CCbound	; N: it crossed a boundary

CCodd:
	test	esi,edx		;Q: Does it also end on an odd boundary?
	jnz	short CCok	; Y: boundary is not crossed

CCbound:
	mov	esi,eax		; starting physical address of buffer
	dec	edx
	or	esi,edx		; last byte before crossing boundary
	inc	edx		; restore boundary restriction
	jmp	short CCBufferEnd

;
; Calculate the largest contiguous buffer which does not cross a boundary
;
CCok:
	xor	edx,edx		; boundary not crossed

CCBufferEnd:
	inc	esi		; end of buffer
	sub	esi,eax		; largest contiguous buffer

	cmp	esi,ecx		;Q: Enough for user buffer
	jae	short CCenough	; Y: return OK status
	mov	ecx,esi		; N: return maximum size
	stc			; user buffer not usable for full transfer
	jmp	short CCexit

CCenough:
	clc			; user buffer is OK

CCexit:
	pop	es
	pop	edi
	pop	esi
	pop	ebx
	ret

CCerror:
	jmp 	short CCexit

ContigCheck	endp

;==============================================================================
;==
;== InitDMARegRec - macro for initting save area for channel in DMA controller
;==
;== Entry:
;==	chan_num = channel number (1-3)
;==	DMA_num  = DMA number (1-2)
;==	ES 	-> _DATA
;==
;==============================================================================
InitDMARegRec	MACRO	chan_num,cntrl_num

	lea	di,[DMARegSav.Chnl&chan_num]	; pt to channel's save area

	xor	ah,ah
	test	gs:[GenFlags],fEISA	;Q: EISA machine?
	jz	SHORT IDRRP&chan_num	; N: continue
	mov	dx,DMA_E_P&chan_num	; Y: read current high byte value
	in	al,dx
	mov	ah,al
IDRRP&chan_num:
	in	al,DMA_P&chan_num	; page register for channel
	jmp	$+2
	jmp	$+2			; timing
	shl	eax,16			; high EAX = high word of linear addr

	out	DMA_CLR_FF&cntrl_num,al	; clear flip-flop for controller
	jmp	$+2
	jmp	$+2			; timing
	in	al,DMA_B&chan_num	; get low byte of base
	jmp	$+2
	jmp	$+2			; timing
	xchg	ah,al
	in	al,DMA_B&chan_num	 ; get high byte of base
	xchg	ah,al
					; EAX = LINEAR BASE address
	cld
	stosd				; store LINEAR BASE address
	stosd				; store PHYSICAL BASE address

	xor	eax,eax			; clear EAX
	test	gs:[GenFlags],fEISA	;Q: EISA machine?
	jz	SHORT IDRRC&chan_num	; N: continue
	mov	dx,DMA_E_C&chan_num	; Y: read current bits 16.23. M007
	in	al,dx
	shl	eax,16
IDRRC&chan_num:
	jmp	$+2
	jmp	$+2			; timing
	in	al,DMA_C&chan_num	; get low byte of count
	jmp	$+2
	jmp	$+2			; timing
	xchg	ah,al
	in	al,DMA_C&chan_num	; get high byte of count
	xchg	ah,al			; EAX = count
	stosd				; store count

	ENDM
;==============================================================================
;==
;== InitDMA - initialize internal values for DMA registers
;==
;== Entry: (Protected Mode)
;==	DS = _DATA
;==
;== Exit:  (Protected Mode)
;==    _DATA:[DMARegSav] = DMA register save area initialized
;==
;==============================================================================
InitDMA	proc	near
	push	eax
	push	edx
	push	di
	push	es
	push	gs
	pushf

	cli

;
;  Set DMA/Bus Master Device Driver Interface Flag
;
	mov	ax,DATA32_GSEL
	mov	es,ax
	assume	es:ABS0

	or	es:[DBSflag],fDBSactive	; activate DMA/bus master interface

	mov	ax,VDMD_GSEL
	mov	es,ax
	assume	es:_DATA
	mov	ax,RCODEA_GSEL
	mov	gs,ax
	assume	gs:R_CODE

	InitDMARegRec	0,1		; init channel 0
	InitDMARegRec	1,1		; init channel 1
	InitDMARegRec	2,1		; init channel 2
	InitDMARegRec	3,1		; init channel 3
	InitDMARegRec	5,2		; init channel 5
	InitDMARegRec	6,2		; init channel 6
	InitDMARegRec	7,2		; init channel 7

	xor	al,al
	out	DMA_CLR_FF1,al		; clear ff on first cntrl
	mov	[DMARegSav][0].DMAFF,0	; reset variable
	jmp	$+2
	jmp	$+2			; for timing
	out	DMA_CLR_FF2,al		; clear ff on second cntrl
	mov	[DMARegSav][1].DMAFF,0	; reset variable

					; M006 - Start
	test	gs:[GenFlags], fMCA	; Q: MCA ?
	jz	short IDdone		; N: done
					; Y: initialize channel 4 structure

	lea	di,[DMARegSav].Chnl4	; channel 0 on controller 2
					; we're going to set the ext PI 
					; bit as channel can be programmed 
					; only thru the extended ports
	or	es:[di.DMAChnFlgs],fExtPI
	xor	eax, eax

	mov	al, Get_Mem_Adr OR 04h	; get current base address
	out	DMA_XFN, al 
	jmp	$+2
	jmp	$+2
	in	al, DMA_EXE
	jmp	$+2
	jmp	$+2
	xchg	ah, al

	in	al, DMA_EXE
	jmp	$+2
	jmp	$+2
	xchg	ah, al

    	movzx	edx, ax			; save the low 16 bits in dx

	xor	ax, ax
	in	al, DMA_EXE
	jmp	$+2
	jmp	$+2

	shl	eax, 16			; put high 8 bits in correct place
	or	eax, edx		; eax = current memory base value

	cld
	stosd				; store LINEAR BASE address
	stosd				; store PHYSICAL BASE address

					; get current count value
	xor	eax, eax
	mov	al, Get_Count OR 04h
	out	DMA_XFN, al
	jmp	$+2
	jmp	$+2
	in	al, DMA_EXE		; get low byte of count
	jmp	$+2
	jmp	$+2
	xchg	ah, al

	in	al, DMA_EXE		; get high byte of count
	jmp	$+2
	jmp	$+2
	xchg	ah, al
	stosd				; save count value
IDdone:					; M006 - End
	popf
	pop	gs
	pop	es
	pop	di
	pop	edx
	pop	eax
	ret
InitDMA	endp

;==============================================================================
;==
;==  pINT13hHandler: Breaks down disk transfers to less than the
;==		     DMA buffer size. QLEO: Need to allow 128K transfers!
;==
;==  Entry: (Protected Mode)
;==	INT 13h interface
;==
;==  Exit:
;==
;==============================================================================
ECC_CODE_SIZE   equ	4
FORMAT		equ     5
pINT13hHandler:
	push	ebp
	movzx	ebp,sp

	push	VDMD_GSEL	; DS/GS are setup for CEMM's 2 data areas.
	pop	ds
	push	RCODEA_GSEL
	pop	gs
	push	R1CODEA_GSEL
	pop	fs
	ASSUME	ds:_DATA,es:nothing,gs:R_CODE, fs:R1_CODE

	and	[DMAFlags],not fDMAFormat ; assume it's not a format

	test	gs:[TrapFlags],fI13trap	;Q: Reflect back?
	jnz	short pI13ProcessIO	; N: break down transfers

	cmp	ah,FORMAT		;Q: Format request?
	jne	short pINT13Reflect	; N: reflect
	or	[DMAFlags],fDMAFormat	; Y: format request

pINT13Reflect:
	push	13h
	jmp	ReflectInterrupt

;
; Set up registers for next I/O
;
pI13ProcessIO:
	or	ah,ah			;Q: First time thru?
	jz	pI13cont		; N: continue
					; Y: initialize data
;
;  First time through (original request)
;
	and	ebx,0FFFFh		; mask off hi word
	mov	[I13Operation],ah	; save operation (READ/WRITE)
	mov	[I13DriveNumber],dl	; save drive number
	mov	[I13OrigNumSect],al	; original # sectors to transfer
	mov	[I13OrigStartSect],cl
	and	[I13OrigStartSect],3Fh	; original starting sector
	mov	[I13OrigStartHead],dh	; original head number
	mov	[I13OrigStartCyl],cx
	and	[I13OrigStartCyl],0FFC0h; original cylinder number

ifdef *128KDMA
	movzx	esi,[bp.VTFO+VMTF_ES]	; get buffer segment
	shl	esi,4
	add	esi,ebx			; linear address of user buffer
	mov	ecx,esi			; used for DMA check
	shr	esi,4			; normalize buffer
	mov	[bp.VTFO+VMTF_ES],si	; normalized buffer segment
	and	bx,0Fh
	mov	[I13OrigBuffOff],bx	; normalized buffer offset
endif

	movzx	ecx,[bp.VTFO+VMTF_ES]	; get buffer segment		*128KDMA
	shl	ecx,4			;                            	*128KDMA
	add	ecx,ebx			; linear address of user buffer	*128KDMA
	mov	[I13OrigBuffStart],ecx	; buffer start		 	*128KDMA

	mov	fs:[I13SectTrans],0	; no sectors have been transferred
;
;  Check to see if previous operation used DMA
;
	cmp	[I13BuffAddress],0	;Q: Outstanding DMA?
	je	short pI13GetIndex	; N: get this request's index
	movzx	ebx,[I13DriveIndex]	; Y: drive index w/outstanding DMA tx
	btr	fs:[I13DriveTrap],ebx	; don't trap that drive
	mov	[I13BuffAddress],0	; no outstanding DMA

pI13GetIndex:
;
;  Index into proper drive data and initialize for this drive and operation
;
	movzx	ebx,dl
	btr	bx,7			;Q: Is it a fixed disk?
	jc	short pI13CheckTrap	; Y: continue
	add	bx,FixedDrives		; N: floppy data
	xor	ecx,ecx			; don't check for DMA

pI13CheckTrap:
	btr	[I13CheckDMA],ebx	;Q: Has DMA been checked for this drive?
	jnc	short pI13Index		; Y: get proper data
	mov	[I13BuffAddress],ecx	; N: save for DMA check
	mov	[I13DriveIndex],bl	; current drive index

pI13Index:
	inc	bx			; index into drive data

	mov	al,[HeadsPerCylinder][bx]
	mov	[HeadsPerCylinder],al	; heads per cylinder on this drive

	mov	al,[SectorsPerTrack][bx]
	mov	[SectorsPerTrack],al	; sectors per track on this drive

	mov	ax,[BytesPerSector][ebx*2]
	test	[I13Operation],LONG	;Q: Long sector?
	jz	short pI13SectSize	; N: regular sectors
	add	ax,ECC_CODE_SIZE	; Y: add 4 bytes of ECC code
pI13SectSize:
	mov	[BytesPerSector],ax	; sector size for drive and operation

;
;  Calculate current starting coordinates.
;
pI13cont:
;*128KDMA	movzx	eax,[I13OrigStartSect]	; original starting sector

	movzx	ax,[I13OrigStartSect]	; original starting sector
	dec	al			; zero relative
	add	al,fs:[I13SectTrans]	; current starting sector
	div	[SectorsPerTrack]
	inc	ah			; one relative
	mov	[I13CurrStartSect],ah	; save current sector number

	xor	ah,ah
	add	al,[I13OrigStartHead]
	adc	ah,0
	div	[HeadsPerCylinder]
	mov	[I13CurrStartHead],ah	; save starting head number

	xor	ah,ah
	add	al,byte ptr [I13OrigStartCyl][1] ; cylinder number
	adc	ah,0				 ; if overflow
	shl	ah,6				 ; upper 2 bits
	add	ah,byte ptr [I13OrigStartCyl]
	mov	byte ptr [I13CurrStartCyl][1],al ; save current cylinder number
	mov	byte ptr [I13CurrStartCyl],ah	 ; upper 2 bits

;
;  Calculate current buffer pointer.  (Check 32 bit MUL problem with early 386s)
;
;*128KDMA	movzx	eax,gs:[I13SectTrans]	; sectors already transferred
	movzx	ax,fs:[I13SectTrans]	; sectors already transferred
	mul	[BytesPerSector]	; offset into buffer 	       	*128KDMA
	shl	edx,16			; allow greater than 64K       	*128KDMA
	or	dx,ax			; 				*128KDMA
	add	edx,[I13OrigBuffStart]	; get current buffer start	*128KDMA
	mov	[I13CurrBuffStart],edx	;				*128KDMA

;
;  Get number of bytes left to transfer
;
;*128KDMA	movzx	eax,[I13OrigNumSect]	; number of sectors to transfer
	movzx	ax,[I13OrigNumSect]	; number of sectors to transfer
	sub	al,fs:[I13SectTrans]	; number of sectors left to transfer
	jz	pI13error		; there should always be some!
	mul	[BytesPerSector]
;*128KDMA	mov	ecx,eax
	shl	edx,16
	or	dx,ax			; number of bytes left		*128KDMA
	mov	ecx,edx			;				*128KDMA
;*128KDMA	or	ecx,edx

	push	eax			;				*128KDMA
	cmp	ecx,[DMABufferSize] 	;Q: Smaller than DMA buffer?
	jbe	short pI13complete	; Y: transfer the rest
					; N: get linear address for buffer
;
;  Get maximum contiguous transfer
;
ifdef *128KDMA
	movzx	eax,[bp.VTFO+VMTF_ES]	; normalized buffer segment
	shl	eax,4
	add	eax,[I13CurrBuffOff]	; current lin address of buffer	*128KDMA
endif
	mov	eax,[I13CurrBuffStart]	; current lin address of buffer	*128KDMA

	mov	edx,10000h		; can not cross 64K boundary
	cmp	bx,FixedDrives		;Q: Fixed drive?		*128KDMA
	ja	short @f		; N: 64K boundary is OK         *128KDMA
	shl	edx,1			; Y: 128K boundary              *128KDMA
@@:					;				*128KDMA
	cmp	ecx,edx			;Q: Is buffer > boundary 	*128KDMA
	ja	short pI13complete	; Y: the ROM will reject it	*128KDMA

	call	ContigCheck		;Q: Is the user buffer contiguous?
	jc	short pI13notContig	; N: use DMA buffer or contig buffer
					; Y: complete transfer
pI13complete:
	and	gs:[TrapFlags],not fI13trap ; transfer complete, don't trap
	jmp	short pI13exit

;
;  Transfer the larger of either the DMA buffer or contiguous space
;
pI13notContig:
	cmp	ecx,[DMABufferSize]	;Q: DMA buffer size larger?
	jae	short pI13exit		; N: use contiguous buffer space
	mov	ecx,[DMABufferSize]	; Y: use DMA buffer

;
;  Setup the registers for the ROM INT13h interface
;
pI13exit:
	pop	eax			;				*128KDMA
;*128KDMA	mov	eax,ecx
	mov	ax,cx
	mov	edx,ecx
	shr	edx,16
	div	[BytesPerSector]
	add	fs:[I13SectTrans],al	; number of sectors transferred

	mov	ah,[I13Operation]	; type of operation (READ/WRITE)
;*128KDMA	mov	bx,[I13CurrBuffOff]	; current buffer offset
	mov	ebx,[I13CurrBuffStart]	; current buffer offset		*128KDMA
	ror	ebx,4			; segment in bx                 *128KDMA
	mov	[bp.VTFO+VMTF_ES],bx	; normalized buffer segment     *128KDMA
	shr	ebx,28			; offset in bx                  *128KDMA

	mov	cx,[I13CurrStartCyl]	; current cylinder number
	or	cl,[I13CurrStartSect]	; current sector number
	mov	dh,[I13CurrStartHead]	; current head number
	mov	dl,[I13DriveNumber]	; drive number

	pop	ebp
	iretd

pI13error:
	pop	ebp
	iretd

;=======================================================================
;
;	Procedure	: FlushDMAState
;
;	Input		: DS = _DATA (VDMD_GSEL)
;			  GS = R_CODE (R_CODEA_GSEL)
;
;	Checks to see if the fDirtyAddr bit or the fDirtyCount bit is set
;	on any channel. If set it writes out the virtual DMA address and 
;	count registers out by calling DMAProgramChannel.
;
;========================================================================
FlushDMAState	proc	near

	push	si
	push	cx

	lea	si,[DMARegSav].Chnl0	; channel 0 on controller 1
	mov	cx, 8			; 8 dma channels

FDSnext:
	test	[si].DMAChnFlgs,fDirtyAddr+fDirtyCount	;Q: virtual => physical?
	jz	FDScont
	call	DMAProgramChannel
FDScont:
	add	si,size DMARegRec	; next channel
	loop	FDSnext

	pop	cx
	pop	si
	ret

	
FlushDMAState 	endp
_TEXT	ends				; end of segment

;=============================================================================
;==	C O D E  S E G M E N T
;=============================================================================
R_CODE	segment
	assume	cs:R_CODE,ds:nothing,es:nothing
;==============================================================================
;==
;==  rINT13hHandler: This is an interrupt 13h handler which monitors activity to
;==	      	     the drives for DMA purposes.  If it detects a user buffer
;==		     (ES:BX) in an EMS window and its corresponding  physical
;==		     memory is discontiguous, the operation will be modified.
;==
;==			1) The operation will be broken down to multiple read/
;==			   write requests, each being less than the DMA buffer.
;==
;==			2) If a format request is encountered, a flag will be
;==			   set so the DMA programming by the ROM will be modified
;==			   not to use a 64K buffer.
;==
;==  Entry: (Real Mode)
;==	INT 13h interface
;==
;==  Exit:
;==
;==============================================================================


rINT13hHandler:

	test	cs:[Current_State],fState_Active ;Q: in Virtual mode ?
	jz	short rI13oldHandler		 ; N: don't need to process
	jmp	cs:[rInt13HEntry]
rI13oldHandler:
	jmp	cs:[PrevInt13]


R_CODE	ends

;=============================================================================
;==	C O D E  S E G M E N T
;=============================================================================
LAST	segment
	assume	cs:LAST,ds:_DATA,es:_DATA,gs:R_CODE
;==============================================================================
;==
;==  DMAInit: This routine initializes necessary data structures for
;==	      trapping DMA programming in virtual 8088 mode.
;==
;==  Entry: (Real Mode)
;==
;==  Exit:
;==
;==============================================================================
DMAInit	proc	near
	push	es

;
; Allocate the DMA buffer. (This buffer should be below 16MB)
;
DIGetDMABuffer:
	mov	eax,[DMABufferSize]	; size of DMA buffer

	test	[DMAFlags],fDMABuffXT	;Q: Need buffer below 1 Meg?
	jnz	short DIBelowMeg	; Y:  get it

	mov	ebx,DMA_BOUNDARY	; DMA boundary
	call	MemGet			;Q: Enough free memory?
	mov	[DMABufferAddress],ebx	;   save starting address
	jnc	short DIBelow16M	; Y: make sure it is below 16Meg
	or	gs:[msg_flag],MEM_ERR_MSG;N: do not load
	jmp	DIexit

DIBelow16M:
ifndef LC910610
;
; Make sure buffer is not located in the HMA so the A20 state is not a concern.
;
	cmp	ebx,110000h		;Q: Is it above the HMA?
	jb	short DIGetDMABuffer	; N: try again
endif
	add	ebx,eax
	cmp	ebx,1000000h		;Q: Below 16M?
	jbe	short DIDriveParms	; Y: initialize drive parameters

DIBelowMeg:
	movzx	ebx,cs:[EndDriver]	; put buffer in base
	shl	ebx,4			; starting address
	mov	ecx,eax
	dec	ecx
	add	ecx,ebx			; ending address in ECX
;
;  Make sure alignment/boundary conditions meet DMA specifications
;
	cmp	eax,10000h		;Q: DMA buffer larger than 64K?
	jae	short DIBM64Kalign	; Y: align on 64K boundary
;
;  Check to see if a 64K boundary is crossed
;
	test	ebx,10000h		;Q: Is start of buffer an even 64K
	jnz	short DIBModd		; N: start is odd
	test	ecx,10000h		;Q: Is end of buffer even?
	jnz	short DIBM64Kalign	; N: align to 64K boundary
	jmp	short DIBMsave		; Y: buffer OK
DIBModd:
	test	ecx,10000h		;Q: Is end of buffer even?
	jnz	short DIBMsave		; N: buffer OK
;
;  Must align to a 64K boundary
;
DIBM64Kalign:
	mov	ecx,ebx			; restore start of buffer
	add	ebx,10000h-1		; round to next 64K boundary
	and	ebx,not (10000h-1)
	sub	ecx,ebx			; get offset from current [EndDrive]
	sub	eax,ecx			; add to size of buffer

DIBMsave:
	mov	[DMABufferAddress],ebx	; save starting address
	shr	eax,4			; size in paragraphs
	add	cs:[EndDriver],ax	; base memory usage grew
	or	[DMAFlags],fDMABuffXT	; buffer below 1 Meg

DIDriveParms:
	call	DriveParmsInit
ifdef TSSQLEO
;
; Access to TSS via ES for IO bit map access.
;
	mov	ax,TSS
	mov	es,ax
endif
;
; The addresses of the DMA ports are set in the IO bit map so that accesses
; to them while in virtual 8088 mode will be trapped.
;
	mov	bx,8000h		; 1K IO address space

	test	gs:[GenFlags],fEISA	;Q: EISA machine?
	jz	SHORT DIMCAPorts	; N: continue
;
;  Trap EISA specific DMA ports
;
	xor	bx,bx			; 64K IO address space
	mov	cx,TOTAL_DMA_EISA_PORTS ; trap EISA DMA ports
	xor	si,si
DISetEISAPorts:
	mov	ax,[DMAEISAPortList][si]
	call	_TEXT:PortTrapFar
	inc	si
	inc	si
	loop	DISetEISAPorts

DIMCAPorts:

ifdef	ROMIDMCA
	cmp	[ROMID],ROMIDPS2	;Q: MCA machine?
	jne	SHORT DIISAPorts	; N: continue
endif
	test	gs:[GenFlags], fMCA	; Q: is this MCA
	jz	SHORT DIISAPorts	; N: continue
	xor	bx,bx			; Y: don't alias

;
;  Trap MCA specific DMA ports
;
	mov	cx,TOTAL_DMA_MCA_PORTS	; trap MCA DMA ports
	xor	si,si
DISetMCAPorts:
	movzx	ax,[DMAMCAPortList][si]
	call	_TEXT:PortTrapFar
	inc	si
	loop	DISetMCAPorts

;
;  Trap ISA specific DMA ports
;
DIISAPorts:
	mov	cx,TOTAL_DMA_PORTS
	xor	si,si
DISetISAPorts:
	movzx	ax,[DMAPortList][si]
	call	_TEXT:PortTrapFar
	inc	si
	loop	DISetISAPorts


DIexit:
	pop	es
	ret
DMAInit	endp

	assume	cs:LAST,ds:_DATA,es:_DATA,gs:R_CODE
;==============================================================================
;==
;==  DriveParmsInit: This routine initializes necessary data structures for
;==	             breaking down INT 13h drive requests.
;==
;==  Entry: (Real Mode)
;==
;==  Exit:
;==
;==============================================================================
DriveParmsInit	proc	near

	push	fs

	mov	si, word ptr gs:[EMM_rFarEntry+2]
	mov	fs, si		; fs = R1_CODE seg
	assume	fs:R1_CODE

	xor	esi,esi			; index for drive data
	mov	cx,TotalDrives		; total drives supported
DPINextDrive:
	push	cx
	mov	dx,si
	or	dl,80h			; assume fixed disk parameters
	cmp	si,FixedDrives		;Q: Fixed drive?
	jb	short DPIGetParms	; Y: get parameters
	mov	dx,si			; N: get floppy drive parameters
	sub	dl,FixedDrives		; floppy drive number

DPIGetParms:
	mov	ah,08			; get drive parameters
	int	13h			;Q: Error
	jc	short DPIerr		; Y: -1 for calculations
	and	cl,03fh 		; N: get number of sectors per track

	or	cl,cl			;Q: Sector information given?
	jz	short DPIerr		; N: -1 for calculations

	cmp	cl,cs:[MaxSectorsPerTrack]	;Q: Largest track so far?
	jbe	DPIsectors			; N: continue
	mov	cs:[MaxSectorsPerTrack],cl	; Y: save it
	jmp	short DPIsectors

DPIerr:
	btr	fs:[I13DriveTrap],esi	; don't trap on this drive
	mov	cl,-1			; N: -1 for calculations
DPIsectors:
	inc	si			; index for drive data
	mov	[SectorsPerTrack][si],cl
	inc	dh
	mov	[HeadsPerCylinder][si],dh

	pop	cx
	loop	DPINextDrive
;
;  Calculate size of the largest format buffer needed
;
	movzx	ax,cs:[MaxSectorsPerTrack]; sectors/track*4=format buffer size
	shl	ax,2
	dec	ax
	mov	[FormatBufferSize],ax

;
;  Get number of bytes per sector!  (** assumption: 512 bytes/sector)
;
;  ** Need to find a way to get the number of bytes per sector on a
;  ** physical drive!!  A BPB is a logical drive structure and therefore
;  ** not useful unless a link between the logical physical drive is available.
;
	mov	ecx,TotalDrives
	mov	ax,200h			; ** WARNING: 512 bytes per sector
DPIbytes:
	mov	[BytesPerSector][ecx*2],ax
	loop	DPIbytes

;
;  Calculate number of sectors which fit in the DMA buffer
;
	mov	ecx,TotalDrives
DPIDMABuffer:
	mov	eax,[DMABufferSize]
	mov	edx,eax
	shr	edx,16
	mov	bx,[BytesPerSector][ecx*2]
	div	bx
	cmp	ax,100h				;Q: more than 255 sectors?
;
; If DMABufferSize is 128K then ax =100h. Therefore the foll. test should 
; be jl and not jle.
;	jle	DPIbsCont			; N: save correct number

	jl	DPIbsCont			; N: save correct number
	mov	al,-1				; Y: 255 sectors!
DPIbsCont:
	mov	fs:[SectorsInDMABuffer][ecx-1],al

	mov	eax,[DMABufferSize]
	mov	edx,eax
	shr	edx,16
	mov	bx,[BytesPerSector][ecx*2]
	add	bx,ECC_CODE_SIZE
	div	bx
	cmp	ax,100h				;Q: more than 255 sectors?
;
; If DMABufferSize is 128K then ax =100h. Therefore the foll. test should 
; be jl and not jle.
;	jle	DPIblCont			; N: save correct number

	jl	DPIblCont			; N: save correct number
	mov	al,-1				; Y: 255 sectors!
DPIblCont:
	mov	fs:[LongSectorsInDMABuffer][ecx-1],al

	loop	DPIDMABuffer

	pop	fs
	ret				; return
DriveParmsInit	endp

MaxSectorsPerTrack	db	0	; initializes format buffer

LAST	ends

	end				; end of module

=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\emm386\ekbd.asm ===
.386p
page	58,132
;******************************************************************************
	title	EKBD - get keyboard make codes
;******************************************************************************
;   (C) Copyright MICROSOFT Corp. 1986-1991
;   (C) Copyright COMPAQ Computer Corp. 1986-1991
;
;  Title:	EMM386.EXE - MICROSOFT Expanded Memory Manager 386 Driver
;
;  Module:	EKBD - basic keyboard handler for error handler routine	
;
;  Version:	2.00
;
;  Date	:	June 10,1986
;
;  Authors:	Brad Tate    
;
;******************************************************************************
;
;  CHANGES:
;
;    DATE     REVISION			DESCRIPTION
;  --------   --------   ------------------------------------------------------
;  06/10/86   Original 
;  06/28/86   0.02	 Name change from CEMM386 to CEMM (SBP).
;  05/13/87   2.00	 Moved to R_CODE segment (SBP).
;
;
;******************************************************************************
;
;  Functional description:  Return keyboard code while ignoring any break
;			    or command codes.
;
;******************************************************************************
	page
;
 	include	vdmseg.inc
	include	kbd.inc
;******************************************************************************
;  	Public Declarations
;******************************************************************************
;
	public	egetc			; get a character
	public	WaitKBD			; wait for keyboard ready
;******************************************************************************
;  	Externs
;******************************************************************************

;******************************************************************************
;  	Equates
;******************************************************************************
;					   
R1_CODE	segment
	ASSUME	CS:R1_CODE, DS:R1_CODE, ES:R1_CODE
;
;******************************************************************************
;
;	egetc - read a character from keyboard
;
;	entry:	NONE
;
;	exit:	al = make code
;		ZF = 0
;
;		or ZF = 1 if no code available
;
;	used:	none						 
;
;	stack: 
;
;******************************************************************************
egetc	proc	near
;
	in	al,KbStatus		; get status
	test	al,1			; q: is there anything out there?
	jz	SHORT kret		; n: return
;					; y: disable keyboard
	call	WaitKBD 		; wait til 8042 ready for input
	mov	al,0adh			; disable keyboard interface
	out	KbStatus,al	
	in	al,KbData		; get character
	cmp	al,7fh			; q: break or control word?
	jae	SHORT ign_chr		; y: ignore it
	cmp	al,80h			; clear ZF
	jmp	SHORT enaKB		; go enable keyboard
ign_chr:
	mov	al,0			; return an invalid character
					; but preserve ZF
enaKB:
	pushf				; save flags
	push	ax			; save character
	call	WaitKBD
	mov	al,0aeh			; enable keyboard
	out	KbStatus,al
	pop	ax
	popf				
kret:
	ret
egetc	endp
;	
;******************************************************************************
;
;	WaitKBD - wait for status to indicate ready for new command
;
;	entry:	NONE
;
;	exit:	NONE
;
;	used:	al  
;
;	stack: 
;
;******************************************************************************
WaitKBD	proc	near
	push	cx
	xor	cx,cx			; do 65536 times
WK_wait:
	in	al,KbStatus
	test	al,BufFull		; q: busy?
	loopnz	WK_wait			; y: try again
;
	pop	cx			; n: return
	ret
WaitKBD	endp

R1_CODE	ENDS
	END

=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\emm386\eisaex.inc ===
;******************************************************************************
;
;   (C) Copyright MICROSOFT Corp. 1986-1990
;
;   Title:    EISA.INC EISA machine related stuff
;
;   Module:   EISA.INC - Equates and structs for EISA ROM RAM search exclusion
;
;   Version:  0.00
;
;   Date:     5/29/90
;
;   Author: ARR
;
;******************************************************************************
;
;   Change log:
;
;     DATE    REVISION			DESCRIPTION
;   --------  --------	-------------------------------------------------------
;   07/27/88  0.00	Original
;
;******************************************************************************

;
; INT 15h AH = D8h AL = 00h or 80h
;
; Get slot information SHORT FORM
;
; CL = Slot number
;

;
; Return in AL is Bit field
;
GSI_DupIDMask	    equ     00001111b
GSI_DupIDShft	    equ     0
GSI_SlotTypMask     equ     00110000b
 GSI_SlotTyp_Exp    equ     00000000b
 GSI_SlotTyp_Emb    equ     00010000b
 GSI_SlotTyp_Virt   equ     00100000b
GSI_IDNotReadable   equ     01000000b
GSI_IDIsDupID	    equ     10000000b
;
; Return in DL is Bit field
;
GSI_HasPortInit     equ     00100000b
GSI_HasPortRange    equ     00010000b
GSI_HasDMA	    equ     00001000b
GSI_HasIRQ	    equ     00000100b
GSI_HasMemory	    equ     00000010b
GSI_HasFuncTyp	    equ     00000001b

;
; INT 15h AH = D8h AL = 01h or 81h
;
; Get slot information LONG FORM
;
; CH = Function # to read
; CL = Slot number
; DS:SI -> Buffer (320 bytes)
;

;
; Memory Info sub structure
;
GSI_Mem_Ent	struc

  GSI_Mem_Conf	  db	  ?
  GSI_Mem_DSize   db	  ?
  GSI_Mem_Addr256 db	  3 dup (?)
  GSI_Mem_SizeK   dw	  ?

GSI_Mem_Ent	ends

  ;
  ; Bits of GSI_Mem_Conf
  ;
  GSI_Mem_Cnf_RAM	  equ	  00000001b
  GSI_Mem_Cnf_Cached	  equ	  00000010b
  GSI_Mem_Cnf_TypMask	  equ	  00011000b
    GSI_Mem_Cnf_TypSYS	  equ	  00000000b
    GSI_Mem_Cnf_TypEXP	  equ	  00001000b
    GSI_Mem_Cnf_TypVIR	  equ	  00010000b
    GSI_Mem_Cnf_TypOTH	  equ	  00011000b
  GSI_Mem_Cnf_Shared	  equ	  00100000b
  GSI_Mem_Cnf_More	  equ	  10000000b

  ;
  ; Bits of GSI_Mem_DSize
  ;
  GSI_Mem_DS_DecodeMsk	  equ	  00001100b
    GSI_Mem_DS_Dc_20	  equ	  00000000b
    GSI_Mem_DS_Dc_24	  equ	  00000100b
    GSI_Mem_DS_Dc_32	  equ	  00001000b
  GSI_Mem_DS_SzMsk	  equ	  00000011b
    GSI_Mem_DS_Sz_1	  equ	  00000000b
    GSI_Mem_DS_Sz_2	  equ	  00000001b
    GSI_Mem_DS_Sz_4	  equ	  00000010b

;
; IRQ Info sub structure
;
GSI_IRQ_Ent	struc

  GSI_IRQ_Data		db	?
  GSI_IRQ_Reserved	db	?

GSI_IRQ_Ent	ends

  ;
  ; Bits of GSI_IRQ_Data
  ;
  GSI_IRQ_D_IRQMsk	  equ	  00001111b	; IRQ number
  GSI_IRQ_D_LevelTrig	  equ	  00100000b
  GSI_IRQ_D_Shared	  equ	  01000000b
  GSI_IRQ_D_More	  equ	  10000000b

;
; DMA Info sub structure
;
GSI_DMA_Ent	struc

  GSI_DMA_Data0 	db	?
  GSI_DMA_Data1 	db	?

GSI_DMA_Ent	ends

  ;
  ; Bits of GSI_DMA_Data0
  ;
  GSI_DMA_D0_ChanMsk	  equ	  00000111b	; Channel #
  GSI_DMA_D0_Shared	  equ	  01000000b
  GSI_DMA_D0_More	  equ	  10000000b

  ;
  ; Bits of GSI_DMA_Data1
  ;
  GSI_DMA_D1_TranSzMsk	  equ	  00001100b
    GSI_DMA_D1_Tran8	  equ	  00000000b
    GSI_DMA_D1_Tran16	  equ	  00000100b
    GSI_DMA_D1_Tran32	  equ	  00001000b
  GSI_DMA_D1_TimngMsk	  equ	  00110000b
    GSI_DMA_D1_TmgISA	  equ	  00000000b
    GSI_DMA_D1_TmgA	  equ	  00010000b
    GSI_DMA_D1_TmgB	  equ	  00100000b
    GSI_DMA_D1_TmgBRST	  equ	  00110000b

;
; I/O port Info sub structure(s)
;
GSI_Port_REnt	struc

  GSI_Port_R_Flgs	db	?
  GSI_Port_R_PortAddr	dw	?

GSI_Port_REnt	ends

  ;
  ; Bits of GSI_Port_R_Flgs
  ;
  GSI_Port_RF_NumPrtMsk   equ	  00011111b	; Number of sequential ports - 1
  GSI_Port_RF_Shared	  equ	  01000000b
  GSI_Port_RF_More	  equ	  10000000b

GSI_Port_IEnt	struc

  GSI_Port_I_Type	db	?
  GSI_Port_I_PortAddr	dw	?

GSI_Port_IEnt	ends

  ;
  ; Bits of GSI_Port_I_Type
  ;
  GSI_Port_IT_AccTypeMsk  equ	  00000011b
    GSI_Port_IT_AccType8  equ	  00000000b
    GSI_Port_IT_AccType16 equ	  00000001b
    GSI_Port_IT_AccType32 equ	  00000010b
  GSI_Port_IT_UseMskVal   equ	  00000100b
  GSI_Port_IT_More	  equ	  10000000b

;
; 320 byte Structure returned by call
;

GSI_MAXSELS	equ	26
GSI_TYPSTRLEN	equ	80
MAX_MEM_ENTS	equ	9
MAX_IRQ_ENTS	equ	7
MAX_DMA_ENTS	equ	4
MAX_PORT_RENTS	equ	20
MAX_PORT_IENTS	equ	20

GSI_Data	struc

  GSI_CompID	    db	    4 dup (?)
  GSI_Info0	    db	    ?
  GSI_Info1	    db	    ?
  GSI_CFG_Rev_Min   db	    ?
  GSI_CFG_Rev_Maj   db	    ?
  GSI_Select	    db	    GSI_MAXSELS dup (?)
  GSI_FuncInfo	    db	    ?
  GSI_TypeSubType   db	    GSI_TYPSTRLEN dup (?)
  GSI_Mem_Info	    db	    (MAX_MEM_ENTS * (SIZE GSI_Mem_Ent)) dup (?)
  GSI_IRQ_Info	    db	    (MAX_IRQ_ENTS * (SIZE GSI_IRQ_Ent)) dup (?)
  GSI_DMA_Info	    db	    (MAX_DMA_ENTS * (SIZE GSI_DMA_Ent)) dup (?)
  GSI_Port_RInfo    db	    (MAX_PORT_RENTS * (SIZE GSI_Port_REnt)) dup (?)
  GSI_Port_IInfo    db	    (MAX_PORT_IENTS * (SIZE GSI_Port_IEnt)) dup (?)

GSI_Data	ends

;
; Bits of GSI_FuncInfo
;
GSI_FI_IsTypStr     equ     00000001b
GSI_FI_IsMem	    equ     00000010b
GSI_FI_IsIRQ	    equ     00000100b
GSI_FI_IsDMA	    equ     00001000b
GSI_FI_IsPortRng    equ     00010000b
GSI_FI_IsPortInit   equ     00100000b
GSI_FI_IsCFGFreeFrm equ     01000000b
GSI_FI_FuncDisabled equ     10000000b


;
; Get Slot Info error codes
;
EISA_Err_InvalSlot	equ	80h
EISA_Err_InvFuncNum	equ	81h
EISA_Err_CMOSBad	equ	82h
EISA_Err_EmptySlot	equ	83h
EISA_Err_InvBIOSCall	equ	86h
EISA_Err_InvConfig	equ	87h



=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\emm386\elimfunc.asm ===
.386p
page 58,132
;******************************************************************************
	title	ELIMFUNC - CEMM functions module
;******************************************************************************
;
;   (C) Copyright MICROSOFT Corp. 1986-1991
;   (C) Copyright COMPAQ Computer Corp. 1986-1991
;
;	Title:	EMM386.EXE - MICROSOFT Expanded Memory Manager 386 Driver
;
;	Module: ELIMFUNC - entry point for VDM functions
;
;	Version: 2.00
;
;	Date:	May 24,1986
;
;	Author: Steve Preston
;
;******************************************************************************
;
;	Change Log:
;
;	DATE	 REVISION	Description
;	-------- --------	--------------------------------------------
;	04/24/86 Original	From EMML LIM driver.
;	06/28/86 0.02		Name change from CEMM386 to CEMM (SBP).
;	07/05/86 0.04		Added segment R_CODE (SBP).
;	07/10/86 0.05		jmp $+2 before "POPF" (SBP).
;	05/12/87 2.00		moved code to R_CODE (SBP).
;	05/21/87 2.00		added debug functions (SBP).
;	05/31/88 ?.??		set active flag AFTER GoVirtual (SBP).
;
;******************************************************************************
;   Functional Description:
;	This module contains the ON/OFF functionality code for activating/
;   deactivating CEMM from DOS.
;
;******************************************************************************
.lfcond
	page
;******************************************************************************
;			P U B L I C   D E C L A R A T I O N S
;******************************************************************************
;
	public	b2asc10
	public	b2asc10_far
	public	b2ascHEX
	public	b2ascHEX_far
	public	ELIM_Entry
	public	EFunTab
	public	EFUN_CNT

ifdef	QHKN
	public	Debug_PhysIO
	public	E_Debug
endif

	public	E_GetStatus
	public	E_ONOFF
	public	E_Weitek
	public	I_Message_Display
	public	E_XStatus_Display

;
	page
;******************************************************************************
;			L O C A L   C O N S T A N T S
;******************************************************************************
;
	include vdmseg.inc
	include vdmsel.inc
	include emm386.inc
	include page.inc
	include	emmfunct.inc
	include emmdata.inc
	include winemm.inc

;******************************************************************************
;			E X T E R N A L    R E F E R E N C E S
;******************************************************************************
;
R_CODE	SEGMENT
	EXTRN	ttl_hndls: WORD
	extrn	GoVirtual:near
;;	extrn	check_XMM:far
;	extrn	XMMAllocateHMA:far
;	extrn	XMMDeallocateHMA:far
	extrn	XMMAllocHMAFar:dword
	extrn	XMMDeallHMAFar:dword
	extrn	checkXMMFar:dword
	extrn	Devname:byte
R_CODE	ENDS


LAST	SEGMENT
	extrn	StatusMess:byte
	extrn	LIMVerMess:byte
	extrn	TotalPagesMess:byte
	extrn	AvailPagesMess:byte
	extrn	TotalHanMess:byte
	extrn	AvailHanMess:byte
	extrn	PFBAMess:byte
	extrn	MemSizeMess:byte
	extrn	ISizeMess:byte
	extrn	InitMessage:byte
	extrn	NoEMSmess:byte
	extrn	UMBstatusMess:byte
	extrn	UMBavail:byte
	extrn	UMBlargest:byte
	extrn	UMBstart:byte
	extrn	AvailUMB:near
	extrn	LargestUMB:near
LAST	ENDS


	page
;******************************************************************************
;			S E G M E N T	D E F I N I T I O N
;******************************************************************************
;
;******************************************************************************
;
;	Code Segment R_CODE
;
;******************************************************************************
;
R_CODE	segment
	assume	CS:R_CODE, DS:R_CODE, ES:R_CODE
;
;	ELIM functions table	- far calls
;
EFunTab label	dword
	dw	offset	E_GetStatus
	dw	seg	R_CODE

	dw	offset	E_ONOFF
	dw	seg	R_CODE

	dw	offset	E_Weitek
	dw	seg	R_CODE

ifdef	QHKN
	dw	offset	E_Debug
	dw	seg	R_CODE
endif

EFUN_CNT	equ	($-EFunTab)/4

	page
;******************************************************************************
;	ELIM_Entry - entry point for general ELIM functions
;
;	THIS IS A FAR CALL ROUTINE
;
;	ENTRY:	REAL or VIRTUAL mode only
;		AH = 0	=> get current status of VDM/EMM386
;		AH = 1	=> ON/OFF/AUTO
;		AH = 2	=> Weitek functions
;		AH = 3	=> DEBUG entry
;		AH = 4	=> Message Display
;		AH = 5	=> Status Display
;
;	EXIT: EMM386 is activated/deactivated if possible
;	      NC => no errors.
;	      CY => ERROR occured.
;			AH = error number
;			AH= 01 =>invalid function.
;
;	USED: none
;
;******************************************************************************
ELIM_Entry	proc	far
;

	push	ebx
	push	ds
;
	mov	bx,seg R_CODE
	mov	ds,bx
	assume	ds:R_CODE
;
	cmp	ah,EFUN_CNT	;Q: valid function #
	jae	SHORT EE_inv_func ;  N: return error
	xor	bx,bx		;  Y: exec function
	mov	bl,ah		; bx = function #
	shl	bx,2		; dword index
	call	CS:EFunTab[bx]	; call the function
;
EE_exit:
	pop	ds
	pop	ebx
	ret
;
EE_inv_func:
	mov	ah,01
	stc
	jmp	short EE_exit
;
ELIM_Entry	endp

;******************************************************************************
;	E_GetStatus - get ELIM/VDM status
;
;	ENTRY:	AH = 0
;		DS = R_CODE
;
;	EXIT:	AH = 0 => ELIM ON
;		   = 1 => ELIM OFF
;		   = 2 => ELIM in AUTO mode (ON)
;		   = 3 => ELIM in AUTO mode (OFF)
;
;	USED: none
;
;******************************************************************************
E_GetStatus	proc	far
;
	xor	ah,ah			; assume ON
	test	[Current_State],fState_Active
					;Q: CEMM currently ON?
	jnz	SHORT EGS_chkAUTO	;  Y: chk for AUTO mode
	mov	ah,1			;  N: set to OFF
EGS_chkAUTO:
	cmp	[Current_Mode],MODE_AUTO	;Q: Auto Mode?
	jne	SHORT EGS_exit			;  N: leave
	add	ah,2				;  Y: map to 2,3
EGS_exit:
	ret
;
E_GetStatus	endp

;******************************************************************************
;	E_ONOFF  - general ON/OFF code for ELIM
;
;	ENTRY:	AH = 1
;		 AL = 0 => ON
;		 AL = 1 => OFF
;		 AL = 2 => AUTO
;		DS = R_CODE
;
;	EXIT:	Virtual mode and ELIM ON
;		OR Real mode and ELIM OFF
;
;	USED: none
;
;******************************************************************************
E_ONOFF proc	far
;
	cmp	al,0			;Q: -> CEMM ON ?
	jne	SHORT EOO_chkOFF	;  N: check for OFF/AUTO

	mov	[Current_Mode],MODE_ON	; set mode to ON
	mov	[Devname],'E'		; set to allow presense detect
	jmp	SHORT EOO_ON		;     go to ON state

EOO_chkOFF:
	cmp	al,1			;Q: -> CEMM OFF ?
	jne	SHORT EOO_chkAUTO	;  N: check for AUTO
	CMP	[handle_count], 1	; Q:  entries in handle dir <= 1?
	JA	EOO_inv			; N: refuse the request
	cmp	[UsedVCPIPages],0	;Q: Any VCPI pages allocated
	jnz	EOO_inv			; Y: continue
ifdef QEMS
	MOV	AX, [free_pages]	; Get original free 4K pages	;@PIW
	CMP	AX, [free_4k_pages]	; Q: Is any page (de)allocated?	;@PIW
	jne	EOO_inv			; Y:
endif
	cmp	cs:[UMBHMA],TRUE	;Q: Are UMBs defined?
	je	EOO_inv			; Y: don't turn off
	mov	[Current_Mode],MODE_OFF ; N: set mode to OFF
	mov	[Devname],'$'		;set to prevent presense detect
	jmp	SHORT EOO_OFF

EOO_chkAUTO:
	cmp	al,2				;Q: -> CEMM AUTO ?
	jne	SHORT EOO_inv 			; N: invalid function call
	mov	[Current_Mode],MODE_AUTO	; Y: set mode to AUTO

	or	[Auto_State],fAuto_Users	; assume users: active

	cmp	[handle_count],1		;Q: EMS users active?
	jne	short EOOcont			; Y: continue
	cmp	cs:[UMBHMA],TRUE		;Q: Is virtual HMA/UMB provided?
	je	short EOOcont			; Y: continue
	cmp	[UsedVCPIPages],0		;Q: Any VCPI pages allocated
	jnz	EOOcont				; Y: continue	
ifdef QEMS
	mov	ax,[free_pages]			; Get original free 4K pages
	cmp	ax,[free_4k_pages]		;Q: Is any page allocated?
	jne	short EOOcont			; Y: continue
endif
	and	[Auto_State],not fAuto_Users	; N: CEMM may be turned inactive

EOOcont:
	mov	[Devname],'E'		;set to allow presense detect
	cmp	[Auto_State],0		;Q: turn on for AUTO mode ?
	je	SHORT EOO_OFF 		;  N: go to OFF state
					;  Y: go to ON state

	;
	; go to Virtual Mode operation and activate CEMM
	;
EOO_ON:
	test	[Current_State],fState_Active	;Q: currently active ?
	jnz	SHORT EOO_OK			;  Y: just leave
	call	GoVirtual			;  N: go to virtual mode & (sbp)
	jc	short EOOerror
	or	[Current_State],fState_Active	;     set active flag	   (sbp)
	jmp	short EOO_OK
	;
	; go to Real Mode operation and deactivate CEMM
	;
EOOerror:
	and	[Current_State],not fState_Active; make inactive
	mov	[Current_Mode],MODE_OFF 	 ; set mode to OFF
	mov	[Devname],'$'			 ; set to prevent presense detect

EOO_OFF:
	test	[Current_State],fState_Active	;Q: currently inactive ?
	jz	SHORT EOO_OK			;  Y: just leave
	and	[Current_State],NOT fState_Active ;N: reset active flag &
	push	ax				; and return to real mode
	pushf
	cli				;;; protect this sequence
	mov	al,0Fh			;;;
	out	84h,al			;;; port 84/85 return to real
	mov	al,00h			;;;	sequence ...
	out	85h,al			;;;
	jmp	$+2			;;; clear prefetch/avoid race cond
	popf
	pop	ax
	cmp	[Current_Mode],MODE_OFF
	jne	short EOO_OK
;
;   leave with no errors
;
EOO_OK:
	clc
EOO_exit:
	ret
;
;  invalid ON/OFF/AUTO function call
;
EOO_inv:
	stc
	ret
;
E_ONOFF endp

;******************************************************************************
;	E_Weitek  - Weitek support functions
;
;	ENTRY:	AH = 2
;		 AL = 0 => sense current Weitek state
;		 AL = 1 => turn Weitek ON
;		 AL = 2 => turn Weitek OFF
;		DS = R_CODE
;
;	EXIT:	STC and AH = 1 for invalid subfunction (AL)
;		for AL = 0 (sense Weitek state)
;		    AL -> bit 0 = Weitek installed flag
;			  bit 1 = Weitek mapped flag
;		for AL = 1 or 2
;		    STC and AH = 2 => Weitek not installed
;			CEMM ON or OFF depending on current
;			CEMM mode (ON/OFF/AUTO).
;
;	USED: none
;
;******************************************************************************
E_Weitek	proc	far
;
	push	bx
	cmp	al,0			;Q: sense status ?
	jne	SHORT EW_chkON		;  N: check next function code
	mov	al,[Weitek_State]	;  Y: return current state
	jmp	EW_OK

;
; Weitek ON function
;   When Weitek state is set to ON, CEMM goes active whenever it is in
;   AUTO mode and the page table mapping is set to point to the Weitek.
;
EW_chkON:
	cmp	al,1			;Q: Weitek ON function ?
	jne	SHORT EW_chkOFF		;    N: check for OFF function
	test	[Weitek_State],fWeitek_Inst ;Y: Q: Weitek installed ?
	jz	SHORT EWerror		    ;	  N: report error

	call	dword ptr [checkXMMFar]	;Q: Is there an XMM in the system
	jc	short EWok		; N: OK to take HMA for WEITEK

	test	[GenFlags],fHMA		;Q: Does CEMM own the HMA?
	jnz	short EWok		; Y: map WEITEK

	call	dword ptr [XMMAllocHMAFar]
				 	;Q: Is the HMA available
	jc	short EWerror		; N: report error

EWok:
	or	[Weitek_State],fWeitek_Map  ;	  Y: set Weitek ON
	or	[Auto_State],fAuto_Weitek   ;	     and auto mode flag
	;
	; update CEMM's state
	;   if CEMM is inactive, check for AUTO mode.
	;      if AUTO mode, CEMM goes active.
	;
	test	[Current_State],fState_Active	;Q: CEMM active ?
	jnz	SHORT EW_ONPg 			; Y: nothing to do here ...

	cmp	[Current_Mode],MODE_AUTO	;Q: CEMM in AUTO mode ?
	jne	SHORT EW_ONPg 			; N: CEMM stays inactive

	call	GoVirtual			;(sbp)	Y: go to virtual mode &
	jc	short EWerror
	or	[Current_State],fState_Active	;(sbp)	   set active flag
	;
	; now change 1meg wraparound to point to Weitek addresses
	;
EW_ONPg:
	mov	bx,0		; Weitek mapping ON
	jmp	SHORT EW_UpdPageMap
;
; HMA not available for WEITEK
EWerror:
	mov	ah,2
	stc
	jmp	SHORT EW_error

;
; Weitek OFF function
;   When Weitek state is set to OFF, CEMM active/inactive state is unaffected
;   by Weitek in AUTO mode.  The 1Meg wraparound is placed back into the
;   page tables.
;
EW_chkOFF:
	cmp	al,2			;Q: Weitek OFF function ?
	jne	SHORT EW_InvFunc	;    N: invalid Weitek subfunction
	test	[Weitek_State],fWeitek_Inst ;Y: Q: Weitek installed ?
	jz	short EWerror		;	  N: report error

	call	dword ptr [checkXMMFar]	;Q: Is there an XMM in the system
	jc	short EWOok		; N: OK to release HMA for WEITEK

	test	[GenFlags],fHMA		;Q: Does CEMM own the HMA?
	jz	short EWOok		; N: OK to release HMA for WEITEK

	call	dword ptr [XMMDeallHMAFar]
					;Q: Is the HMA released?
	jc	short EWerror		; N: report error

EWOok:
	and	[Weitek_State],NOT fWeitek_Map	; Y: set Weitek OFF
	and	[Auto_State],NOT fAuto_Weitek	;    and reset auto mode flag
	;
	; update CEMM's state
	;   if CEMM is in AUTO mode, it is active and CEMM may be able
	;    to go inactive now.
	;
	cmp	[Current_Mode],MODE_AUTO	;Q: CEMM in AUTO mode ?
	jne	SHORT EW_OFFPg			;  N: then no CEMM state change
	cmp	[Auto_State],0			;  Y: Q: CEMM stays active ?
	jne	SHORT EW_OFFPg			;	Y: then leave
	and	[Current_State],NOT fState_Active ;	N: reset active flag &
	pushf					; and return to real mode
	cli				;;; protect this sequence
	mov	al,0Fh			;;;
	out	84h,al			;;; port 84/85 return to real
	mov	al,00h			;;;	sequence ...
	out	85h,al			;;;
	jmp	$+2			;;; clear prefetch/avoid race cond
	popf
	;
	; now enable 1meg wraparound
	;
EW_OFFPg:
	mov	bx,1		; Weitek mapping OFF
;
;  Update page table mapping of 1meg linear wraparound area
;	Entry: BX = 0 => Weitek mapping ON
;		  = 1 => 1 meg wraparound (Weitek OFF)
;
EW_UpdPageMap:
	test	[Current_State],fState_Active	;Q: CEMM active?
	jz	SHORT EW_InactMap		;  N: change mapping
	pushf					;  Y: prot mode call to chg it
	cli				;;; protect this sequence
	Call_CEMM_PMF	CEMM_84_Weitek
	popf
	jmp	SHORT EW_OK

EW_InactMap:			; CEMM inactive, update Weitek mapping
EW_OK:
	clc
EW_exit:
	pop	bx
	ret

EW_InvFunc:
	mov	ah,1
	stc
	jmp	SHORT EW_error
EW_error:		; error exit
	stc
	jmp	EW_exit
;
E_Weitek	endp

;LEO ;******************************************************************************
;LEO ; WeitekPageMap - change tables to include/exclude Weitek in page tables
;LEO ;
;LEO ;	NOTE: THIS IS A FAR ROUTINE
;LEO ;
;LEO ;   ENTRY: PROTECTED or REAL mode ONLY
;LEO ;		ES -> page tables
;LEO ;		BX = 0 => Weitek mapping ON
;LEO ;		   = 1 => Weitek mapping OFF (1meg wraparound)
;LEO ;   EXIT: same as entry
;LEO ;   USED: none
;LEO ;******************************************************************************
;LEO WeitekPageMap	proc	far
;LEO 	pushad
;LEO 	cld
;LEO 	cmp	bx,0			;Q: weitek map on function ?
;LEO 	jne	SHORT WPM_chkoff	;  N: check for off function
;LEO 	;				;  Y: change page tables
;LEO 	;  For Weitek 1167 mapping addresses,
;LEO 	; change page table entries for (00100000h,0010EFFFh) ->
;LEO 	;				(C0000000h,C000EFFFh)
;LEO 	;
;LEO 	mov	eax,0C0000000h	; start with physical addr = C0000000h
;LEO 	jmp	SHORT WPM_set_PT	; set page tables
;LEO
;LEO WPM_chkoff:
;LEO 	cmp	bx,1			;Q: weitek map off function ?
;LEO 	jne	SHORT WPM_exit		;  N: leave
;LEO 	xor	eax,eax			;  Y: 1meg wraparound
;LEO
;LEO 	;
;LEO 	; set 60k worth of entries in page tables for 1meg linear
;LEO 	; entry: EAX = begin physical addr
;LEO 	;
;LEO WPM_set_PT:
;LEO 	mov	di,100h*4	; ES:DI -> PTE for 1Meg linear
;LEO 	or	al,P_AVAIL		; make pages available to all
;LEO 	mov	cx,0Fh			; set 60k worth of entries
;LEO WPM_set_entry:
;LEO 	stosd				; store EAX to ES:[DI]
;LEO 					; ES:[DI] pts to next page table entry
;LEO 	add	eax,1000h		; EAX = next physical page (with attrs)
;LEO 	loop	WPM_set_entry		;Q: done with page table entries ?
;LEO 					;  N: loop again
;LEO 					;  Y: all done
;LEO WPM_exit:
;LEO 	mov	eax,cr3		; clear the TLB !!!
;LEO 	mov	cr3,eax
;LEO 	popad
;LEO 	ret
;LEO WeitekPageMap	endp

ifdef	QHKN

	page
;******************************************************************************
;	Debug Functions table
;******************************************************************************
;
DebugTab	label	word
	dw	offset	DebugR_GetPTE
	dw	offset	DebugR_PhysIO
DEBTAB_CNT	equ	($-DebugTab)/2

;******************************************************************************
;	E_Debug  - Debug functions entry point
;
;	ENTRY:	REAL or VIRTUAL mode
;		AH = 3
;		 AL = 0 => Get physical address
;		 AL = 1 => Get physical DMA contents
;		DS = R_CODE
;
;	EXIT:	Same processor mode as entry
;		CLC => no errors
;		STC => error
;
;	USED: BX
;
;******************************************************************************
E_Debug proc	far
;
	cmp	al,DEBTAB_CNT	;Q: valid function #
	jae	SHORT ED_inv_func ;  N: return error
	xor	bx,bx		;  Y: exec function
	mov	bl,al		; bx = function #
	shl	bx,1		; word index
	call	CS:DebugTab[bx] ; call the function
;
ED_exit:
	ret
ED_inv_func:
	stc
	ret
;
E_Debug endp
;
	page
;******************************************************************************
;	DebugR_GetPTE  - Returns the Page Table Entry for a Linear Address
;
;	ENTRY:	REAL or VIRTUAL mode
;		AH = 3
;		AL = 0 => Get page table entry
;		ECX = linear address
;		DX = 0	=> don't map linear address first (for >1meg addrs)
;		DX = 1	=> map linear address first
;		DS = R_CODE
;
;	EXIT:	Same processor mode as entry
;		STC => error
;		CLC => no errors and
;			ECX = page table entry
;
;	USED: none
;
;******************************************************************************
DebugR_GetPTE	proc	near
	test	[Current_State], fState_Active	;Q: in Real mode now ?
	jnz	SHORT DRGP_VM 			;  N: go to Virtual Mode hndlng
						;  Y: ok ..
	push	eax
	push	di
	push	es
	mov	ebx,[PageD_Addr] 	; EBX = 32 bit addr of page dir
	shr	ebx,4			; BX = seg addr of page dir
	mov	es,bx			; ES -> page dir
	mov	eax,ecx			; EAX = linear addr
	PDOff	ax			; EAX = page dir offset
	mov	di,ax			; DI = page dir offset for this addr
	mov	ebx,ES:[di]		; EBX = PTE for page table
	test	bx,P_PRES		;Q: is this page table present ?
	jz	SHORT DRGP_RM_error	;  N: report error
	and	bx,(P_SIZE-1)		;  Y: remove status bits
	shr	ebx,4			; BX = seg addr of page table
	mov	es,bx			; ES -> page table
	mov	eax,ecx			; EAX = linear addr
	PTOff	ax			; EAX = page table offset
	mov	di,ax			; DI = page table offset for this addr
	mov	ecx,ES:[di]		; ECX = PTE for page table
	clc			; no errors

DRGP_RM_exit:
	pop	es
	pop	di
	pop	eax
	ret
DRGP_RM_error:
	stc
	jmp	DRGP_RM_exit
;
; In virtual mode now.	We need to go to protected mode to be sure we can
; access the page tables.
DRGP_VM:
	push	bx
	mov	bl,al			; BL = Diag function # for GetPTE
	Call_CEMM_PMF	CEMM_84_Diag	; exec diag function
	pop	bx
	ret
DebugR_GetPTE	endp

	page
;******************************************************************************
;	DebugR_PhysIO - do physical I/O (at ring 0 PM privilege level)
;
;	ENTRY:	REAL or VIRTUAL mode
;		AH = 3
;		AL = 1 => Do Physical I/O
;		    DX = I/O address
;		    ECX/CX/CL = for OUTs, the value to output
;		    SI = 0 for input
;		       = 1 for output
;		    DI = 0 for byte I/O
;		       = 1 for word I/O
;		       = 2 for dword I/O
;		DS = R_CODE
;
;	EXIT:	Same processor mode as entry
;		STC => error
;		CLC => no errors and
;		    ECX/CX/CL = value input
;
;	USED: none
;
;******************************************************************************
DebugR_PhysIO	proc	near
	test	[Current_State], fState_Active	;Q: in Real mode now ?
	jnz	SHORT DRPIO_VM			;  N: go to Virtual Mode hndlng
	call	FAR PTR Debug_PhysIO		;  Y: do I/O in real mode
	ret					;     and return
;
; here if virtual mode	=> call CEMM Protected Mode Function
;
DRPIO_VM:
	push	bx
	mov	bl,al			; BL = Diag function # for PhysIO
	Call_CEMM_PMF	CEMM_84_Diag	; exec diag function
	pop	bx
	ret
DebugR_PhysIO	endp

	page
;******************************************************************************
;	Debug_PhysIO - do physical I/O
;
;	ENTRY:	REAL MODE or Ring 0 PROT MODE
;		    DX = I/O address
;		    ECX/CX/CL = for OUTs, the value to output
;		    SI =  0 for input
;		       <> 0 for output
;		    DI = 0 for byte I/O
;		       = 1 for word I/O
;		       = 2 for dword I/O
;		DS = R_CODE
;
;	EXIT:	Same processor mode as entry
;		    ECX/CX/CL = value input
;		CLC => no error
;		STC => invalid input
;
;	USED: none
;
;******************************************************************************
Debug_PhysIO	proc	far
	push	eax
	or	si,si		;Q: Input ?
	jnz	SHORT DPIO_Out	;  N: do output
				;  Y: do input
	cmp	di,0		;Q: byte input ?
	jne	SHORT DPIO_InW	;  N: chk for word
	in	al,dx		;  Y: do input
	mov	cl,al		;     and set value into CL
	jmp	SHORT DPIO_OK 	;      and leave
DPIO_InW:
	cmp	di,1		;Q: word input ?
	jne	SHORT DPIO_InDW	;  N: chk for dword
	in	ax,dx		;  Y: do input
	mov	cx,ax		;     and set value into CL
	jmp	SHORT DPIO_OK 	;      and leave
DPIO_InDW:
	cmp	di,2		;Q: dword input ?
	jne	SHORT DPIO_error ;  N: bad xfer size
	in	eax,dx		;  Y: do input
	mov	ecx,eax		;     and set value into CL
	jmp	SHORT DPIO_OK 	;      and leave

DPIO_Out:
	cmp	di,0		;Q: byte output ?
	jne	SHORT DPIO_OutW	;  N: chk for word
	mov	al,cl		;  Y: get byte for out
	out	dx,al		;     do output
	jmp	SHORT DPIO_OK 	;      and leave

DPIO_OutW:
	cmp	di,0		;Q: word output ?
	jne	DPIO_OutW	;  N: chk for dword
	mov	ax,cx		;  Y: get word for out
	out	dx,ax		;     do output
	jmp	SHORT DPIO_OK 	;      and leave

DPIO_OutDW:
	cmp	di,2		;Q: dword output ?
	jne	SHORT DPIO_error;  N: bad xfer size
	mov	eax,ecx		;  Y: get dword for out
	out	dx,eax		;     do output
				;      and leave
DPIO_OK:
	clc
DPIO_exit:
	pop	eax
	ret

DPIO_error:
	stc
	jmp	DPIO_exit
Debug_PhysIO	endp

endif

R_CODE	ENDS

LAST	segment
	assume	CS:LAST, DS:LAST, ES:R_CODE


;******************************************************************************
;	I_Message_Display - display banner
;
;	ENTRY:	NONE
;
;	EXIT:	none
;
;	USED: none
;
;******************************************************************************
I_Message_Display	PROC	near

	push	ds
	mov	dx, cs
	mov	ds, dx
	mov	dx,offset LAST:InitMessage
	mov	ah,PRINT_STRING
	int	MS_DOS			; output init message
	pop	ds
	RET
I_Message_Display	ENDP

;******************************************************************************
;	E_XStatus_Display - display ELIM/VDM status
;
;	ENTRY:	DS = R_CODE
;
;	EXIT:	none
;
;	USED: none
;
;******************************************************************************
E_XStatus_Display	proc	near
;

	push	ds
	push	es
	push	di

	push	ds
	pop	es	; es = R_CODE

	mov	ax, cs	; si = LAST
	mov	ds, ax	; ds = LAST

	mov	dx,offset LAST:NoEMSmess	; assume EMS N/A

;;	cmp	cs:[NoEMSset],TRUE	;Q: Is EMS available?
;;	je	short EXSprint		; N: print EMS N/A message

	cmp	es:[VCPIset], -1 	; Q: has noems been specifed
	jne	EXSprint		; Y: print EMS N/A message

EXSDcont:
ifdef QEMS
	mov	ax,es:[free_4k_pages]
	shl	ax,2			; amount in K
endif
	mov	ax,es:[TopOfHandleSpace]	; top of free EMS handle space
	sub	ax,FIRST_HANDLE_PTE	; subtract start of handle space
	sub	ax,es:[UsedVCPIPages]	; number of free EMS pages
	shr	ax,2			; convert to 16K pages
	sub	ax,es:[UsedEMSPages]	; number of free EMS pages
	shl	ax,4			; number in KBs
	mov	di,offset LAST:ISizeMess; store decimal size in ASCII here.
	mov	cx,5
	call	b2asc10			; convert to ASCII...(R_CODE)

	mov	dx,offset LAST:MemSizeMess
	mov	ah,PRINT_STRING
	int	MS_DOS			; output message

	mov	al,EMM_VERSION
	xor	ah,ah
	ror	ax,4
	shr	ah,4
	or	ax,'00'
	mov	di,offset LAST:LIMVerMess
;;	stosb
	mov	byte ptr ds:[di], al
	inc	di

	inc	di
	xchg	al,ah
;;	stosb
	mov	byte ptr ds:[di], al
	inc	di

	mov	ax,es:[TopOfHandleSpace]; top of free EMS handle space
	sub	ax,FIRST_HANDLE_PTE	; subtract start of handle space
	shr	ax,2
;QEMS	mov	ax,es:[total_4k_pages]
;QEMS	shr	ax,1
;QEMS	shr	ax,1
	mov	cx,4
	mov	di,offset LAST:TotalPagesMess
	call	b2asc10

	mov	ax,es:[TopOfHandleSpace]; top of free EMS handle space
	sub	ax,FIRST_HANDLE_PTE	; subtract start of handle space
	sub	ax,es:[UsedVCPIPages]	; number of free EMS pages
	shr	ax,2			; convert to 16K pages
	sub	ax,es:[UsedEMSPages]	; number of free EMS pages
;QEMS	mov	ax,es:[free_4k_pages]
;QEMS	shr	ax,1
;QEMS	shr	ax,1
	mov	cx,4
	mov	di,offset LAST:AvailPagesMess
	call	b2asc10
	mov	ax,es:[ttl_hndls]
	mov	cx,4
	mov	di,offset LAST:TotalHanMess
	call	b2asc10

	mov	ax,es:[handle_count]
	mov	cx,4
	mov	di,offset LAST:AvailHanMess
	call	b2asc10

	CMP	es:[PF_Base], FREE	; Q: Is there a page frame?	;@PIW
	JE	SHORT get_status_mess	; N: Skip this part		;@PIW
	mov	ax,es:[PF_Base]		; page frame base addr
	mov	di,offset LAST:PFBAMess	; here for page frame base addr
	call	b2ascHEX
	; Append " H" to hex value
        MOV     BYTE PTR [DI], ' '      ; Ensure blank for localized ver (IPG)
        MOV	BYTE PTR [DI+1], 'H'	; Put H at end of the segment	;@PIW

get_status_mess:
	mov	dx,offset LAST:StatusMess
EXSprint:
	mov	ah,PRINT_STRING
	int	MS_DOS			; output message

ifndef	MSFLAG
	call	dword ptr es:[checkXMMFar]  
					;Q: Is there an XMM in the system
	jc	short EXSexit		; N: exit
endif

	cmp	es:[UMBptr],0		;Q: Any UMBs?
	je	short EXSexit		; N: exit

	call	AvailUMB
	shr	ax,6
	mov	di,offset LAST:UMBavail; store decimal size in ASCII here.
	mov	cx,4
	call	b2asc10			; convert to ASCII...(R_CODE)

	call	LargestUMB
	shr	ax,6
	mov	di,offset LAST:UMBlargest; store decimal size in ASCII here.
	mov	cx,4
	call	b2asc10			; convert to ASCII...(R_CODE)

	mov	ax,es:[UMBptr]		 ; first UMB address
	mov	di,offset LAST:UMBstart
	call	b2ascHEX
	mov	byte ptr [di+1],'H'	; Put H at end of the segment

	mov	dx,offset LAST:UMBStatusMess
	mov	ah,PRINT_STRING
	int	MS_DOS			; output message

EXSexit:
	pop	di
	pop	es
	pop	ds
	ret
;
E_XStatus_Display	endp

;******************************************************************************
;
;	b2asc10 - Converts binary to ascii decimal and stores at ES:DI.
;		  Stores CX ascii chars (decimal # is right justified and
;		  filled on left with blanks).
;
;	entry:	ax = binary number
;		cx = digits to display
;		es:di = place to store ascii chars.
;
;	exit:	ASCII decimal representation of number stored at DS:DI
;
;	used:	none
;
;	stack:
;
;******************************************************************************
;
power10		dw	1,10,100,1000,10000
;
b2asc10_far	proc	far
	call	b2asc10
	ret
b2asc10_far	endp
;
b2asc10 proc	near
;
	push	ax
	push	bx
	push	cx
	push	dx
	push	si
;
	mov	si,cx			; index to base 10 table
	dec	si
	shl	si,1			;word index
	xor	bl,bl			; leading zeroes flag
	cld
;
;   convert binary number to decimal ascii
;
b2_loop:
	xor	dx,dx			; clear word extension
	mov	cx,cs:power10[si]
	div	cx			; divide by power of 10
	or	bl,bl
	jnz	short b2_ascii
;
	or	ax,ax			; q: zero result?
	jnz	short b2_ascii		;  n: go convert to ascii
;
	mov	al,' '                  ;  y: go blank fill
	jmp	short b2_make_strg		;
;
b2_ascii:
	add	al,'0'                  ; put into ascii format
	mov	bl,1			; leading zeroes on
;
b2_make_strg:
;;	stosb				; put ascii number into string
	mov	byte ptr ds:[di], al
	inc	di

	mov	ax,dx
	sub	si,2			; decrement power of 10 pointer
	jg	short b2_loop 		; Q: Last digit?  N: Jump if not
	mov	al,dl
	and	al,0Fh
	add	al,'0'
;;	stosb
	mov	byte ptr ds:[di], al
	inc	di

;
	pop	si
	pop	dx
	pop	cx
	pop	bx
	pop	ax
	ret				; *** return ***
;
b2asc10 endp

;******************************************************************************
;
;	b2ascHEX- converts binary to ascii HEX and store at ES:DI
;		  stores 4 ascii chars (HEX # is right justified and
;		  filled on left with blanks)
;
;	entry:	ax = binary number
;		es:di = place to store ascii chars.
;
;	exit:	ASCII HEX representation of number stored at DS:DI
;
;	used:	none
;
;	stack:
;
;******************************************************************************
;
hextab		db	"0123456789ABCDEF"
;
b2ascHEX_far	proc	far
	call	b2ascHEX
	ret
b2ascHEX_far	endp
;
b2ascHEX proc	near
;
	push	ax
	push	bx
	push	cx
	push	dx

	cld				;forward,increment
	mov	dx,ax
	mov	cx,12
b2hex_loop:
	mov	bx,dx
	shr	bx,cl			; get highest nibble
	and	bx,0Fh			; nibble only
	mov	al,CS:hextab[bx]	; get ASCII for it
;;	stosb				; store ASCII
	mov	byte ptr ds:[di], al
	inc	di

	sub	cx,4
	jge	short b2hex_loop

	pop	dx
	pop	cx
	pop	bx
	pop	ax
	ret
;
b2ascHEX endp

LAST	ends
	end

=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\emm386\emmdata.asm ===
.386p
page	58,132
;******************************************************************************
	title	EMMDATA - EMM data structures definitions
;******************************************************************************
;
; (C) Copyright MICROSOFT Corp. 1986-1991
; (C) Copyright COMPAQ Computer Corp. 1986-1991
;
; Title:	EMM386.EXE - MICROSOFT Expanded Memory Manager 386 Driver
;		EMMLIB.LIB - Expanded Memory Manager Functions Library
;
; Module:	EMMDATA
;
; Version:	0.04
;
; Date:		June 14,1986
;
; Author:	Phil Barrett.
;
;******************************************************************************
;
;   Change log:
;
;     DATE    REVISION                  DESCRIPTION
;   --------  --------  -------------------------------------------------------
;
;******************************************************************************
;
;   Functional Description:
;	data definitions for emm/lim
;
;******************************************************************************

page
;******************************************************************************
; PUBLICS
;******************************************************************************
PUBLIC	xma2ems				; An XMA2EMS compatible
public	total_handles
public	ttl_hndls
public	number_EMS_windows
public	EMS_window_location
public	EMSsegLoc
public	UMBptr
public	HMAptr
public	UMBHMA
public	hndl_tbl_ptr
public	hndl_nam_ptr
public	save_map_ptr
public	save_flag
public	OS_functions
public	OS_key
public	current_register_set
public	handle_count
public	cntWinPages
public	ScratchHandleSpace
public	TopOfHandleSpace
public	TopOfFreeEMSspace
public	TopOfUsedEMSspace
public	BotOfVCPIspace
public	UsedEMSPages
public	UsedVCPIPages
public	MaxEMSpool
public	MinEMSpool
public	NumberHandlePages
public	LastHandleMap
public	CurrentHandleMap
public	subfunction_number
public	function_number
public	saved_gdtr
public	saved_idtr
public	saved_ldtr
public	saved_tr
public	saved_cr2
public	saved_cr3
public	VCPI_version
public	number_code_PTEs
public	code_address
public	code_offset
public	data_address
public	data_offset
public	real_idt
public	end_of_base_memory_PTE
public	context_save_area_size
public	page_directory
public	page_tables
public	Stack0
public	Stack0_top
public	driver_end
public	segR1_CODE
public	IRQ1Event
public	p60data
public	p64data
public	TopOfPhysicalMemory
public	MaxPTEIndex
public	msg_flag
public	PF_Base
public	VCPIset
public	NoEMSset
public	NoPFset
public	UserDS
public	UserES
public	UserFS
public	UserGS
public	UserSS
public	UserSP
public	RealSS
public	RealSP
public	StackTop
public	RealStack
public	LastStack
public	RealStackTop
public	LastStackTop
public	RealStack2_top
public	Current_State
public	Current_Mode
public	Auto_State
public	Weitek_State
public	PageD_Addr
public	TrapFlags
public	ErrType
public	ErrNum
;;public	PrevInt10
;;public	PrevInt11
public	PrevInt13
public	PrevInt15
public	PrevInt19
public	PrevInt2F
;;public	PrevInt4B
public	CROM_Length
public	arg_str
public	Initial_Mode
public	Initial_Weitek
public	DMABufferSize
public	DMABufferAddress
public	DMAFlags
public	DMAPortList
public	DMAEISAPortList
public	DMAMCAPortList
public	TOTAL_DMA_PORTS
public	TOTAL_DMA_EISA_PORTS
public	TOTAL_DMA_MCA_PORTS
public	DMA_page_port
public	DMA_address_port
public	DMA_count_port
public	DMA_EISA_HighPagePort
public	DMA_EISA_HighCountPort
public	DMA_single_mask_port
public	DMA_clr_FF_port
public	DMAActive
public	Int10_Save
public	RR_Last
public	RR85save
public	RR84save
public	buffer
public	ext_rem
PUBLIC 	total_register_sets
public	saved_pointer
public	GDT_Ptr
public	IDT_Ptr
public	DiagByte
public	Exit_Flags
public	strtng_bs_wndw_PTE
public	ROMID
public	GenFlags
public	TSS
public	IOBitMap
public	TSSLEN
public	p_TEXT
public	p_DATA
public	pSTACK
public	pTSS
public	pGDT
public	pIDT
ifdef MSFLAG
public	Stack2
public	Stack2_top
endif

ifdef QEMS
public	installed
public	first_free_handle_space
public	ext_vdisk
public	avail_mem
public	high_memory_address
public	hi_size
public	hi_alloc
public	hisys_alloc
public	ext_memory_address
public	ext_size
public	total_mem
public	AllocMapPtr
public	VCPIAllocMapPtr
public	pool_size
public	number_page_tables
public	starting_handle_PTE
public	number_handle_PTEs
public	starting_ext_mem_PTE
public	number_ext_mem_PTEs
public	starting_high_mem_PTE
public	number_high_mem_PTEs
public	starting_conv_mem_PTE
public	number_conv_mem_PTEs
PUBLIC	free_pages			; Original free 4K pages
public	free_4k_pages
public	total_4k_pages
PUBLIC	PH_entries
PUBLIC	PH_boundary
PUBLIC	my_AX
public	EMS_cntxt
public	EMS_window
public  EMS_window_ptr
public	save_area_pointer
public	target_offset
public	target_segment
endif

;******************************************************************************
; INCLUDES
;******************************************************************************
include	vdmseg.inc
include	vdmsel.inc
include	desc.inc
include	dma.inc
include	ascii_sm.equ
include	emmfunct.inc
include oemdep.inc
include	emm386.inc
include	page.inc
page
;******************************************************************************
; SEGMENTS
;******************************************************************************
R_CODE	segment
ALIGN	4
msg_flag		dd	0	;
PageD_Addr		dd	0	; The address of page directory
HMAptr			dd	100000h	; physical address of HMA
;;PrevInt10		dd	0	; The old int10 vector
;;PrevInt11		dd	0	; The old int11 vector
PrevInt13		dd	0	; The old int13 vector
PrevInt15		dd	0	; The old int15 vector
PrevInt19		dd	0	; The old int19 vector
;;PrevInt4B		dd	0	; The old int4B vector
Int10_Save		dd	?	; saved int10 vector from CEMM load
GDT_Ptr 		dd 2 dup (0)	; GDT ptr for LGDT
IDT_Ptr 		dd 2 dup (0)	; IDT ptr for LIDT
GenFlags		dd  fNoEMSInt	; General System Flags (no MES interrupts)

ttl_hndls		dw	64
TrapFlags		dw	0	; Flags to trap into protected mode
TopOfHandleSpace	dw	0
TopOfFreeEMSspace	dw	0
TopOfUsedEMSspace	dw	0
BotOfVCPIspace		dw	0
UsedEMSPages		dw	0
UsedVCPIPages		dw	0
MaxEMSpool		dw	0	; max size of EMS pool in Kb
MinEMSpool		dw	0	; min size (preallocated) of EMS pool
UserDS			dw	0	; save area for entry stack DS
UserES			dw	0	; save area for entry stack ES
UserFS			dw	0	; save area for entry stack FS
UserGS			dw	0	; save area for entry stack GS
UserSS			dw	0	; save area for entry stack SS
UserSP			dw	0	; save area for entry stack SP
RealSS			dw	0	; save area for CEMM real stack SS
RealSP			dw	0	; save area for CEMM real stack SP
StackTop		dw	Stack0_top  ; size of protected mode stack
segR1_CODE		dw	seg R1_CODE ; final segment of R1_CODE
driver_end		dw	0	; segment address of the driver's end
Current_State		dw	0	; The current ON/OFF state of CEMM
UMBptr			dw	0	; pointer to first UMB arena
ErrType			dw	0	; Error type (Exception, Privilige, DMA)
ErrNum			dw	0	; Error number
CROM_Length		dw	0	; length of COMPAQ option ROM
ext_rem 		dw	0	; remaining extended memory in kbytes
Exit_Flags		dw	0	; flags for int15 exit
PF_Base			dw	0FFFFh	;
handle_count		dw	0	; number of handles allocated
cntWinPages		dw	0	; count of WIN= pages
Current_Mode		db	0	; The current auto ON/OFF state of CEMM
Auto_State		db	0	; The current auto ON/OFF state of CEMM
Weitek_State		db	0	; The current Weitek ON/OFF state
Initial_Mode		db	0FFh	; initial CEMM mode, ON/OFF/AUTO
Initial_Weitek		db	0FFh	; initial weitek mode, ON/OFF
VCPIset			db	-1
NoEMSset		db	FALSE
NoPFset			db	FALSE
UMBHMA			db	FALSE	; CEMM is providing UMBs or and HMA

ifdef QEMS
free_pages		DW	0	; Original free 4K pages
free_4k_pages		dw	0	; number of unallocated 4k pages
total_4k_pages		dw	0	; total available 4k pages
starting_ext_mem_PTE	dw	0	; starting extended memory location
number_ext_mem_PTEs	dw	0	; number of extended memory PTEs
starting_high_mem_PTE	dw	0	; starting Built In Memory location
number_high_mem_PTEs	dw	0	; number of Built In Memory PTEs
starting_conv_mem_PTE	dw	0	; starting conventional 640k location
number_conv_mem_PTEs	dw	0	; number of conventional memory PTEs
number_page_tables	dw	0	; the number of used page tables
endif
;***********************************************************************
; VCPI Variables
;***********************************************************************
ALIGN	4
saved_cr2		dd	?		; used for storing CEMM's regs.
saved_cr3		dd	?		; used for storing CEMM's regs.
VCPI_version		dd	0100h		; the version number
data_offset		dd	?		; for ModeInterface
data_address		dd	?		; for ModeInterface
code_offset		dd	?		; for ModeInterface
code_address		dd	?		; for ModeInterface
saved_gdtr		dq	?		; used for storing CEMM's regs.
saved_idtr		dq	?		; used for storing CEMM's regs.
saved_ldtr		dw	?		; used for storing CEMM's regs.
saved_tr		dw	?		; used for storing CEMM's regs.
real_idt		dw	0400h		; real mode DOS IDT limit
			dd	0		; and base ptr
			dw	0		; just in case qword used
number_code_PTEs	dw	?		; for ModeInterface

;===============================================================================
;==  32 bit pointers to major data blocks
;===============================================================================
ALIGN	4
p_TEXT		dd	0		; 32 bit pointer to _TEXT
p_DATA		dd	0		; 32 bit pointer to _DATA
pSTACK		dd	0		; 32 bit pointer to STACK
pTSS		dd	0		; 32 bit pointer to TSS
pGDT		dd	0		; 32 bit pointer to GDT
pIDT		dd	0		; 32 bit pointer to IDT
R_CODE	ends

R1_CODE segment
	dw	128	dup(0FFFFh)
RealStack2_top	label	byte
PrevInt2F		dd	0	; The old int2F vector
R1_CODE ends

page
;******************************************************************************
; SEGMENTS
;******************************************************************************
_DATA	segment
	assume	cs:_DATA,ds:_DATA
ALIGN	4
page_directory		dd	0	; 32 bit address of the page directory
page_tables		dd	0	; 32 bit address of the page tables
ScratchHandleSpace	dd	0	; 32 bit address of scratch handle space
TopOfPhysicalMemory	dd	0	; top of physical memory
MaxPTEIndex		dd	0	; maximum PTE index in page tables
saved_pointer		dd	0
xma2ems			DW	?	; An XMA2EMS compatible
total_handles		dw	64	; Default handles supported
strtng_bs_wndw_PTE	dw	40h	; Default base window starts at 256K
end_of_base_memory_PTE	dw	0	; last valid real memory location
context_save_area_size	dw	0	; size to save the window mapping in
NumberHandlePages       dw	?	; pages used for handle space
LastHandleMap		dw	0FFCh	; used for handle space mapping
CurrentHandleMap	dw	0	; used for handle space mapping
buffer	   		dw	0	; buffer for 1 word move blocks
subfunction_number	db	0	; the AL subfunction number
function_number		db	0	; the AH subfunction number
IRQ1Event		db	TRUE	; flag indicating IRQ1 has ocurred
p60data			db	0	; last keyboard scan code
p64data			db	0	; last CMD written to port 64h
arg_str 		db	MAX_ARG_LEN+1	dup(0)
RR_Last 		db	0	; last RR port trapped
RR85save		db	0FFh
RR84save		db	0FFh
total_register_sets 	DB 	8 	; 7 alternate register sets + register set 0
				;      at int19h.
DiagByte	db	LOW LOCK_ROM	; most recent diag byte written by user
ROMID 		db  	0		; machine ID

ifdef QEMS
hi_size 	dw	0	; size of hi memory in kbytes
hi_alloc	dw	0	; actual hi memory allocated (due to waste)
hisys_alloc	dw	0	; amount of hi system mem allocated in 4k bytes
ext_size	dw	0	; size of extended memory in kbytes
total_mem	dw	0	; Total extended memory
ext_vdisk	dw	0	; VDISK extended memory used kbytes
avail_mem	dw	0	; Available memory
first_free_handle_space	dw	0
starting_handle_PTE	dw	?	; starting handle location
my_AX			DW	?	; Scratch area
high_memory_address	dd	0	; 32 bit address of high memory pool
ext_memory_address	dd	100000h	; 24 bit address of extended memory pool
pool_size		dw	0	; Default is 256K
number_handle_PTEs	dw	?	; number of PTEs reserved for handles
PH_entries		DW	?	; Number of entries for PHs
PH_boundary		DW	?	; Beyond the boundary of PHs
target_offset		dw	0
target_segment		dw	0
installed	db	0	; 1 => VDISK style header already installed
endif

;***********************************************************************
; OS_functions
;	These are various variables used for the OS/E functions.
;***********************************************************************
ALIGN	4
OS_key		dd	0
OS_functions	dw	001h

;***********************************************************************
; DMA
;	These are the various DMA port register variables.
;***********************************************************************
ALIGN	4
DMABufferSize		dd	8000h		; default of 32K (changed by parser)
DMABufferAddress	dd	0		; entered during initialization
DMAFlags		db	0		; DMA genearal flags
DMAActive		db	0		; bit set if a DMA channel is active

DMA_single_mask_port label byte
	db	DMA_SINMASK1		; DMA single mask registers
	db	DMA_SINMASK1
	db	DMA_SINMASK1
	db	DMA_SINMASK1
	db	0
	db	DMA_SINMASK2
	db	DMA_SINMASK2
	db	DMA_SINMASK2
DMA_clr_FF_port	label byte
	db	DMA_CLR_FF1		; reset flip-flop commands
	db	DMA_CLR_FF1
	db	DMA_CLR_FF1
	db	DMA_CLR_FF1
	db	0
	db	DMA_CLR_FF2
	db	DMA_CLR_FF2
	db	DMA_CLR_FF2

DMAPortList	label	byte
DMA_page_port label byte
	db	DMA_P0			; DMA page registers
	db	DMA_P1
	db	DMA_P2
	db	DMA_P3
	db	0
	db	DMA_P5
	db	DMA_P6
	db	DMA_P7
DMA_address_port label byte
	db	DMA_B0			; DMA base registers
	db	DMA_B1
	db	DMA_B2
	db	DMA_B3
	db	0
	db	DMA_B5
	db	DMA_B6
	db	DMA_B7
DMA_count_port label byte
	db	DMA_C0			; DMA count registers
	db	DMA_C1
	db	DMA_C2
	db	DMA_C3
	db	0
	db	DMA_C5
	db	DMA_C6
	db	DMA_C7

	db	DMA_STAT1
	db	DMA_STAT2
	db	DMA_REQUEST1
	db	DMA_REQUEST2
	db	DMA_SINMASK1		; DMA single mask registers
	db	DMA_SINMASK2
	db	DMA_MODE1
	db	DMA_MODE2
	db	DMA_RESET1
	db	DMA_RESET2
	db	DMA_RESMASK1
	db	DMA_RESMASK2
	db	DMA_MASK1
	db	DMA_MASK2
	db	DMA_CLR_FF1
	db	DMA_CLR_FF2
TOTAL_DMA_PORTS	equ	$-DMAPortList

DMAEISAPortList	label	word
DMA_EISA_HighPagePort label word
	dw	DMA_E_P0		; EISA DMA high page port
	dw	DMA_E_P1
	dw	DMA_E_P2
	dw	DMA_E_P3
	dw	DMA_E_P5
	dw	DMA_E_P6
	dw	DMA_E_P7
DMA_EISA_HighCountPort label word
	dw	DMA_E_C0		; EISA DMA high count port
	dw	DMA_E_C1
	dw	DMA_E_C2
	dw	DMA_E_C3
	dw	DMA_E_C5
	dw	DMA_E_C6
	dw	DMA_E_C7

	dw	DMA_E_IS	; EISA Channel interrupt status register (read only)
	dw	DMA_E_CS	; EISA Chaining mode status register (read only)

	dw	DMA_E_CH1	; EISA ChainMode for channels 0-3 (write only)
	dw	DMA_E_CH2	; EISA ChainMode for channels 5-7 (write only)

	dw	DMA_E_EM1	; EISA Extended Mode for channels 0-3
	dw	DMA_E_EM2	; EISA Extended Mode for channels 5-7
TOTAL_DMA_EISA_PORTS equ ($-DMAEISAPortList)/2

DMAMCAPortList	label	byte
	db	DMA_XFN		; MCA exteneded function register
	db	DMA_EXE		; MCA execute register
TOTAL_DMA_MCA_PORTS equ $-DMAMCAPortList


;=============================================================================
;==
;==  The TSS is in the _DATA segment for easy access during interrupt handling
;==
;=============================================================================
even
TSS:	TSS386STRUC	<>
;
;   I/O Bit Map for Virtual Mode I/O trapping
;
	public	IOBitMap
IOBitMap	equ	$-TSS
	db	2000h dup (0)		; initialize all ports to NO trapping
	db	0FFh			; last byte is all 1's
TSSLEN		equ	$-TSS

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; The following items have dynamic sizes computed during istallation.  ;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;***********************************************************************
; EMS_window[]
;	This is an array of structures where each structure defines the
;	PTE index of where the window is located and it current mapping.
;	This is initialized at init time and then the contents are copied
;	to the array in Register Set 0. The value of EMS_window_ptr is then
;	initialized to the Register Set 0 array. This EMS_window array is
;	then used only during SetAlternateRegSet for copying the contents
;	of the user buffer before we do the switch to another reg set.
;
;	The label EMS_cntct is used for this purpose. The first word is
;	used to hold the number of ems windows and the secong is used to
;	hold the ID.
;
;***********************************************************************
number_EMS_windows	dw	?	; actual number of windows available
EMS_window_location	dw	TOTAL_EMS_WINDOWS dup (FREE)
EMSsegLoc		db	256 dup (-1)

ifdef QEMS
EMS_cntxt	label	word
			dw	?	;
			dw	?	;
EMS_window	label	word
rept	TOTAL_EMS_WINDOWS
	EMS_window_struc	<FREE,NULL_PAGE>
endm

EMS_window_ptr	dd	?
endif

;***********************************************************************
; register_set[]
;	These are various variables used for the alternate page registers
;	One additional data space is reserved for the MapAndCall routine.
;***********************************************************************
current_register_set	db	0

;QEMS save_area_pointer	dd	0

;register_set	label	word
;rept	TOTAL_REGISTER_SETS + 1
;	RegisterSet_struc	<>
;endm

;***********************************************************************
; handle_table
;	These are various variables used for the handles
;***********************************************************************
;handle_table	label	word
;rept	MAX_HANDLES
;	HandleTable_struc	<NULL_PAGE,0>
;endm
hndl_tbl_ptr	DD	?

;handle_name	label	qword		; used for holding the handle's name
;rept	MAX_HANDLES
;	db	8 dup (0)
;endm
hndl_nam_ptr	DD	?

;***********************************************************************
; save_map[]
;	This is an array of structures that save the current mapping state.
;	The save_map array is only used with the 'Save Page Map' EMS function
;	which only saves the 3.2 windows (page frame base).
;***********************************************************************
;save_map	label	word
;rept	MAX_HANDLES
;	EMS_window_struc	TOTAL_PF_WINDOWS dup (<FREE, NULL_PAGE>)
;endm
save_map_ptr	DD	?

save_flag	LABEL	BYTE
rept	MAX_HANDLES
	DB	FREE
endm

ifdef QEMS
;==============================================================================
;==  EMS and VCPI memory allocation bit map
;==============================================================================
align 16
AllocMapPtr	 dd 0 ; pointer to page alloc bitmap
VCPIAllocMapPtr	 dd 0 ; pointer to VCPI page alloc bitmap
endif

_DATA	ends

page
;******************************************************************************
; SEGMENTS
;******************************************************************************
STACK	segment

;******************************************************************************
; Stack0_top  - Ring 0 stack for VDM exception/int handling
;******************************************************************************
Stack0		label	byte
	dd	Stack0Size dup(0)
Stack0_top	label	byte

ifdef MSFLAG
Stack2		label	byte
	dw	64	dup(0)
Stack2_top	label	byte
endif
STACK ends

R_STACK	segment
RealStack	label	byte
	dw	128	dup(0FFFFh)
RealStackTop	label	byte
R_STACK ends

L_STACK	segment
LastStack	label	byte
	dw	1024	dup('TS')
LastStackTop	label	byte
L_STACK ends
END

=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\emm386\emm386.inc ===
ifndef INC_LIST
.xlist
endif
;******************************************************************************
;
;   (C) Copyright MICROSOFT Corp. 1986-1991
;   (C) Copyright COMPAQ Computer Corp. 1986-1991
;
;	Title:	EMM386 - MICROSOFT Expanded Memory Manager 386
;
;	Module: EMM386.INC - general includes for CEMM
;
;	Version: 2.00
;
;	Date:	May 25,1986
;
;	Author:	Steve Preston
;
;******************************************************************************
;
;	Change Log:
;
;	DATE	 REVISION	Description
;	-------- --------	--------------------------------------------
;	04/25/86 Original
;	06/28/86 0.02		Name change from CEMM386 to CEMM (SBP).
;	05/12/87 2.00		Added CEMM mode equates (SBP).
;	01/12/89 4.00           User abort istall message added. RDV
;
;	02/13/91 M008		Added fCPQ16 & fCPQ16Bit
;
;******************************************************************************
;******************************************************************************
; General equates
;******************************************************************************
	; low word of EFLAGS
FLAGS_CF	equ	0001h	; carry flag
FLAGS_PF	equ	0004h	; parity flag
FLAGS_AF	equ	0010h	; auxillary carry flag
FLAGS_ZF	equ	0040h	; zero flag
FLAGS_SF	equ	0080h	; sign flag
FLAGS_TF	equ	0100h	; trap flag
FLAGS_IF	equ	0200h	; int flag
FLAGS_DF	equ	0400h	; direction flag
FLAGS_OF	equ	0800h	; overflow flag
FLAGS_IOPL	equ	3000h	; IOPL bits
FLAGS_NT	equ	8000h	; nested task flag
	; high word of EFLAGS
FLAGS_RF	equ	0001h	; resume flag
FLAGS_VM	equ	0002h	; virtual mode flag

ROMIDPS2	equ 	0F8h	; machine ID for PS2s
ROMIDISA	equ	0FCh	; machine ID for ISA and EISA machines

;******************************************************************************
; State equates
;******************************************************************************

;
; CEMM State Flags
;
fState_ActiveBit	equ 0	; CEMM is active
fState_pfE000Bit	equ 1	; page frame is E000h
fState_UseHiSysBit	equ 2	; use Hi system RAM (if avail)
fState_CEGAinstBit	equ 3	; COMPAQ EGA in system
fState_CEGAmoveBit	equ 4	; CEGA in system must be moved to C000h
fState_A20EnaBit	equ 5	; A20 line enabled => no wrap
fState_WinCntrlBit	equ 6	; Windows took control of system

fState_Active	equ 	1 shl fState_ActiveBit
fState_pfE000	equ     1 shl fState_pfE000Bit
fState_UseHiSys	equ     1 shl fState_UseHiSysBit
fState_CEGAinst	equ     1 shl fState_CEGAinstBit
fState_CEGAmove	equ     1 shl fState_CEGAmoveBit
fState_A20Ena	equ     1 shl fState_A20EnaBit
fState_WinCntrl	equ     1 shl fState_WinCntrlBit

;
; CEMM Modes
;
MODE_ON		equ	0
MODE_OFF	equ	1
MODE_AUTO	equ	2

;
; Auto mode state info - if any of these bits are set,
;	then AUTO mode implies CEMM should be active.
;
fAuto_Users	equ 00000001b	; users active
fAuto_Weitek	equ 00000010b	; weitek mapping on

;
; Weitek State
;
fWeitek_Inst	equ 00000001b	; Weitek in system
fWeitek_Map	equ 00000010b	; Weitek should be mapped now

;==============================================================================
;==  CEMM General Flags [GenFlags]
;==============================================================================
fEISAbit	equ 0	; Detected an EISA machine
fXMMbit		equ 1	; Detected an XMM on the system
fHMAbit		equ 2	; CEMM owns the HMA area
fP8042bit  	equ 3	; Password 8042 system detected
fP92bit		equ 4	; A20 toggle via port 92h is possible
f386SXbit	equ 5	; COMPAQ 386SX based machine
fNoINTbit	equ 6	; No interrupts allowed in protected mode
fShutDownBit	equ 7	; CPU is shutting down or POST
fAbove16MBit	equ 8	; ISA memory above 16 meg supported
fNoLocUMBbit	equ 9	; No local UMBs in Windows
fDebugActiveBit equ 10	; Supported debugger is loaded
;fCADelBit	equ 11	; An INT 15h AH=4Fh was issued for a Cntrl-Alt-Del
fTurnOffBit	equ 11
fZenithBit	equ 12	; A zenith machine
fTurnOffNOWBit	equ 13	; Turn off before chaining Int 15h for a Ctrl+Alt+Del
fEMMhltBit	equ 14 	; An sti hlt has been executed
fBackfillBit	equ 15  ; Emm386 has back filled base memory
fMCABit		equ 16	; This is an MCA machine
fCPQ16Bit	equ 17	; M008: This is a Compaq Deskpro 386/16 or a 
			; portable 386
fNoEMSIntBit	equ 18	; Do not allow interrupts while EMS functions
fEMSsemBit	equ 19	; EMS re-entrancy semaphore
fNoA20TrapBit	equ 20	; Do not trap for A20 switching
fVir8042Bit	equ 22	; Virtualize keyboard data buffer using IRQ1 (port 60h)


fEISA		equ 	1 shl fEISAbit
fXMM		equ 	1 shl fXMMbit
fHMA		equ 	1 shl fHMAbit
fP8042  	equ 	1 shl fP8042bit
fP92		equ 	1 shl fP92bit
f386SX		equ 	1 shl f386SXbit
fNoINT		equ 	1 shl fNoINTbit
fShutDown	equ 	1 shl fShutDownBit
fAbove16M	equ	1 shl fAbove16MBit
fNoLocUMB	equ 	1 shl fNoLocUMBbit
fDebugActive	equ	1 shl fDebugActiveBit
;fCADel		equ 	1 shl fCADelBit
fTurnOff	equ 	1 shl fTurnOffBit

fZenith		equ 	1 shl fZenithBit	
fTurnOffNOW	equ	1 shl fTurnOffNOWBit
fEMMhlt		equ 	1 shl fEMMhltBit	
fBackfill	equ	1 shl fBAckfillBit
fMCA		equ	1 shl fMCABit
fCPQ16		equ	1 shl fCPQ16Bit		; M008
fNoEMSInt	equ	1 shl fNoEMSIntBit
fEMSsem		equ	1 shl fEMSsemBit
fNoA20Trap	equ	1 shl fNoA20TrapBit
fVir8042	equ	1 shl fVir8042Bit

;==============================================================================
;==  CEMM protected mode trap interrupt
;==============================================================================
ProtTrap	equ	21h
;==============================================================================
;==  CEMM trap flags [TrapFlags]
;==============================================================================
fI13trapBit 	 equ 	0      	; trap in protected mode INT 4Bh handler
fI15trapBit	 equ	1	; trap in protected mode Move Block
fI4BtrapBit 	 equ 	2      	; trap in protected mode INT 4Bh handler
fI67trapBit	 equ	3	; trap in protected mode INT 67h handler
fI67noReflectBit equ	4	; INT 67h not reflected
fIntEndBit	 equ	5	; trap for end of interrupt
fXMMtrapBit	 equ	6	; trap for XMS service
fWinTrapBit	 equ	7	; trap for Windows EMM Global Import service
fWin30Bit	 equ	8	; trap for Win 3.0 XBDA sense
fXBDAnotRelBit	 equ	9	; XBDA not Relocated
fSetInstPtrBit	 equ	10
fpModeDebInitBit equ	11	; trap for protected mode Debugger Init

fI13trap	equ 1 shl fI13trapBit
fI15trap	equ 1 shl fI15trapBit
fI4Btrap	equ 1 shl fI4BtrapBit
fI67trap	equ 1 shl fI67trapBit
fI67noReflect	equ 1 shl fI67noReflectBit
fIntEnd		equ 1 shl fIntEndBit
fXMMtrap	equ 1 shl fXMMtrapBit
fWinTrap	equ 1 shl fWinTrapBit
fWin30		equ 1 shl fWin30Bit
fXBDAnotRel	equ 1 shl fXBDAnotRelBit
fSetInstPtr	equ 1 shl fSetInstPtrBit
fpModeDebInit	equ 1 shl fpModeDebInitBit
;==============================================================================
;==  Protected Mode Stack Size
;==============================================================================
Stack0Size	equ	400h	; dword entries in protected mode stack
;
; Equip status bits for high word of EAX
;
fI11h_Weitek_Inst	equ 0000000100000000b ; Weitek installed
fI11h_Weitek_Map	equ 0000000010000000b ; Weitek mapped

;******************************************************************************
; Equates for Port 84h/85h CEMM functions
;******************************************************************************
CEMM_85_Value	equ	02h	; Major # for CEMM
CEMM_84_Weitek	equ	00h	;	Minor # for Weitek
CEMM_84_Diag	equ	01h	;       Minor # for Diagnostics

RR85_Value	equ	00h	; Major # for System ROM
RR84_Value	equ	0Fh	;	Minor for Return to Real code

;******************************************************************************
;   Real/Virtual Mode Routine Id
;******************************************************************************
FIRST_RMODE_RTN equ	100h	; must be > 0FFh

QUERY_XMS_PAGES equ	100h	; query free XMS usable as EMS
ALLOC_XMS_BLOCK equ	101h	; allocate XMS block
FREE_XMS_BLOCK	equ	102h	; free XMS block

LAST_RMODE_RTN	equ	FREE_XMS_BLOCK

;******************************************************************************
;   Init equates
;******************************************************************************
;==============================================================================
;==  Message Flag Equates
;==============================================================================
OVERLAP_MSG	equ 000000000000000000000001b; User specified ranges overlap
INC_DOS_MSG	equ 000000000000000000000010b; Incorrect DOS message
MEM_ERR_MSG	equ 000000000000000000000100b; Memory error message
INS_ERR_MSG	equ 000000000000000000001000b; Already Installed message
NO_PF_MSG	equ 000000000000000000010000b; Nowhere to put PF message
SIZE_ADJ_MSG	equ 000000000000000000100000b; EMM Pool size adjusted message
BASE_ADJ_MSG	equ 000000000000000001000000b; Page Frame Base adjusted msg
MAPA_ADJ_MSG	equ 000000000000000010000000b; Map register address adjusted msg
INV_PARM_MSG	equ 000000000000000100000000b; Invalid parameter message
PF_WARN_MSG	equ 000000000000001000000000b; PF located over ROM warning message
W_NI_MSG	equ 000000000000010000000000b; Weitek Not Installed msg
NO_XMM_MSG	equ 000000000000100000000000b; XMS manager not installed
BAD_XMM_MSG	equ 000000000001000000000000b; Possible bad version of HIMEM
W_NO_HMA_MSG	equ 000000000010000000000000b; HMA not available for WEITEK
NO_LIM_PF_MSG 	equ 000000000100000000000000b; Page frame is not LIM 3.2 compatible
OTHER_EMM_MSG	equ 000000001000000000000000b; Other EMM installed message
HMAon_MSG       equ 000000010000000000000000b; HMAon is invalid on this machine
UMBmem_MSG      equ 000000100000000000000000b; No more memory for UMBs
UserAbort_MSG	equ 000001000000000000000000b; User requested abort
;
;  These messages cause CEMM to not install
;
KILLER_MSG=INC_DOS_MSG+MEM_ERR_MSG+INS_ERR_MSG+NO_XMM_MSG+OTHER_EMM_MSG+UserAbort_MSG
;KILLER_MSG=INC_DOS_MSG+MEM_ERR_MSG+INS_ERR_MSG+NO_XMM_MSG+OTHER_EMM_MSG+NO_PF_MSG+UserAbort_MSG
;KLLR_MSG	EQU	NO_PF_MSG	; If in XMA2EMS mode, install anyway
;

;
;*****************************************************************************
; Structure for obtaining device parameters
;*****************************************************************************

devparmbuf struc

SFn		db	0 	; special functions
DevTy 		db 	0 	; device type
DevAtt 		dw 	0 	; device attributes
NumCyl 		dw 	0 	; number of cylinders
MedTy 		db 	0 	; media type
 ; start of BPB
BPS		dw 	0 	; bytes per sector
SPA 		db 	0 	; sectors per allocation unit
RS 		dw 	0 	; reserved sectors
NF 		db 	0 	; number of FATs
NRD 		dw 	0 	; # of root directories
SinL 		dw 	0 	; # of sectors in logical image or 0
MD 		db 	0 	; media descriptor
NFsec 		dw 	0 	; # of FAT sectors
SPT 		dw 	0 	; # of sectors per track
Heads 		dw 	0 	; # of heads
HS 		dd 	0 	; # of hidden sectors
LS 		dd 	0 	; # of logical sectors

devparmbuf ends


;*****************************************************************************
; Structure for accessing PUSHAD data on stack
;*****************************************************************************

;  Format of PUSHAD stack frame

Pushad_Struc	STRUC
Pushad_EDI	dd	?		; Client's EDI
Pushad_ESI	dd	?		; Client's ESI
Pushad_EBP	dd	?		; Client's EBP
Pushad_ESP	dd	?		; ESP at pushall
Pushad_EBX	dd	?		; Client's EBX
Pushad_EDX	dd	?		; Client's EDX
Pushad_ECX	dd	?		; Client's ECX
Pushad_EAX	dd	?		; Client's EAX
Pushad_Struc	ENDS


;
;******************************************************************************
; MACROS
;******************************************************************************
;

;
;  Protected Mode FAR CALL
;	sel = segment to call into
;	offset = offset/routine to call
PCall	MACRO	sel,off
	db	09Ah		; far call
	dw	offset &off
	dw	&sel
	ENDM

;
;  Protected Mode FAR JUMP
;	sel = segment to call into
;	offset = offset/routine to call
PJmp	MACRO	sel,off
	db	0EAh		; far call
	dw	offset &off
	dw	&sel
	ENDM
;
;	Call_CEMM_PMF - call CEMM protected mode function
;
;	ENTRY:	Virtual mode
;		AL = CEMM PMF minor code
;
;	EXIT:	Depends on call
;
;	USED: AL
;
Call_CEMM_PMF	MACRO	minor_code
	mov	al,minor_code
	out	84h,al			; CEMM PMF Minor code
	mov	al,CEMM_85_Value
	out	85h,al			; CEMM Major code => exec function
	ENDM

REP32MOVSW	MACRO
	db	067h
rep	movsw
	db	067h
	nop				; B1 stepping 386 processor errata
	ENDM


.list	; end of EMM386.inc
=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\emm386\emmdata.inc ===
ifndef	INC_LIST
.xlist
endif
;******************************************************************************
;
; (C) Copyright MICROSOFT Corp. 1989-1991
; (C) Copyright COMPAQ Computer Corp. 1989-1991
;
; Title:	EMM386.EXE - MICROSOFT Expanded Memory Manager 386 Driver
;		EMMLIB.LIB - Expanded Memory Manager Library
;
; Module:	EMMDATA.INC - external references
;
; Version:	0.10
;
; Date:		January 6, 1989
;
; Author:	Daniel J. Mazina
;******************************************************************************
;   Change log:
;
;     DATE    REVISION                  DESCRIPTION
;   --------  --------  -------------------------------------------------------
;   01/06/89  Original
;******************************************************************************

R_CODE	segment
	extrn	ext_rem:word
	extrn	Int10_Save:dword
	extrn	Initial_Mode:byte
	extrn	Initial_Weitek:byte
	extrn	CROM_Length:word
	extrn	Current_State:word
	extrn	Current_Mode:byte
	extrn	driver_end:word
	extrn	segR1_CODE:word
	extrn	msg_flag:dword
	extrn	UMBptr:word
	extrn	HMAptr:dword
	extrn	UMBHMA:byte
	extrn	saved_gdtr:qword
	extrn	saved_idtr:qword
	extrn	saved_ldtr:word
	extrn	saved_tr:word
	extrn	saved_cr2:dword
	extrn	saved_cr3:dword
	extrn	data_offset:dword
	extrn	data_address:dword
	extrn	code_offset:dword
	extrn	code_address:dword
	extrn	VCPI_version:dword
	extrn	real_idt:word
	extrn	UserDS:word
	extrn	UserES:word
	extrn	UserFS:word
	extrn	UserGS:word
	extrn	UserSS:word
	extrn	UserSP:word
	extrn	RealSS:word
	extrn	RealSP:word
	extrn	StackTop:word
	extrn	RealStackTop:byte
	extrn	Auto_State:byte
	extrn	Weitek_State:byte
	extrn	PageD_Addr:dword
	extrn	ErrType:word
	extrn	ErrNum:word
	extrn	TrapFlags:word
	extrn	TopOfHandleSpace:word
	extrn	TopOfFreeEMSspace:word
	extrn	TopOfUsedEMSspace:word
	extrn	BotOfVCPIspace:word
	extrn	UsedEMSPages:word
	extrn	UsedVCPIPages:word
	extrn	MaxEMSpool:word
	extrn	MinEMSpool:word
;;	extrn	PrevInt10:dword
;;	extrn	PrevInt11:dword
	extrn	PrevInt13:dword
	extrn	PrevInt15:dword
	extrn	PrevInt19:dword
	extrn	end_of_R_CODE:byte
	extrn	GDT_Ptr:dword
	extrn	IDT_Ptr:dword
	extrn	Exit_Flags:word
	extrn	PF_Base:word
	extrn	VCPIset:byte
	extrn	NoEMSset:byte
	extrn	NoPFset:byte
	extrn	handle_count:word
	extrn	cntWinPages:word
	extrn	GenFlags:dword
	extrn	p_TEXT:dword
	extrn	p_DATA:dword
	extrn	pSTACK:dword
	extrn	pTSS:dword
	extrn	pGDT:dword
	extrn	pIDT:dword
ifdef QEMS
	extrn	number_page_tables:word
	extrn	number_code_PTEs:word
	EXTRN	free_pages: WORD	; Original free 4K pages	;@PIW
	extrn	free_4k_pages:word
	extrn	total_4k_pages:word
	extrn	starting_ext_mem_PTE:word
	extrn	number_ext_mem_PTEs:word
	extrn	starting_high_mem_PTE:word
	extrn	number_high_mem_PTEs:word
	extrn	starting_conv_mem_PTE:word
	extrn	number_conv_mem_PTEs:word
endif

R_CODE	ends


R1_CODE segment
	extrn	PrevInt2F:dword
R1_CODE ends


_DATA	segment
	EXTRN	xma2ems: WORD							; An XMA2EMS compatible
	extrn	subfunction_number:byte
	extrn	function_number:byte
	extrn	LastHandleMap:word
	extrn	CurrentHandleMap:word
	extrn	number_EMS_windows:word
	extrn	ScratchHandleSpace:dword
	extrn	total_handles:word
	extrn	total_register_sets:byte
	extrn	EMS_window_location:word
	extrn	EMSsegLoc:byte
	extrn	hndl_tbl_ptr: DWORD	; word
	extrn	save_map_ptr: DWORD	; word
	extrn	hndl_nam_ptr: DWORD	; qword
	extrn	save_flag:BYTE
	extrn	OS_functions:word
	extrn	OS_key:dword
	extrn	current_register_set:byte
	extrn	register_set:word
	extrn	end_of_base_memory_PTE:word
	extrn	context_save_area_size:word
	extrn	page_directory:dword
	extrn	page_tables:dword
	extrn	IRQ1Event:byte
	extrn	p60data:byte
	extrn	p64data:byte
	extrn	TopOfPhysicalMemory:dword
	extrn	MaxPTEIndex:dword
	extrn	end_of_DATA:byte
	extrn	arg_str:byte
	extrn	DMABufferSize:dword
	extrn	DMABufferAddress:dword
	extrn	DMAFlags:word
	extrn	DMAPortList:byte
	extrn	DMAEISAPortList:word
	extrn	DMAMCAPortList:byte
	extrn	TOTAL_DMA_PORTS:abs
	extrn	TOTAL_DMA_EISA_PORTS:abs
	extrn	TOTAL_DMA_MCA_PORTS:abs
	extrn	DMA_page_port:byte
	extrn	DMA_address_port:byte
	extrn	DMA_count_port:byte
	extrn	DMA_EISA_HighPagePort:word
	extrn	DMA_EISA_HighCountPort:word
	extrn	DMA_single_mask_port:byte
	extrn	DMA_clr_FF_port:byte
	extrn	DMAActive:byte
	extrn	buffer:word
	extrn	RR_Last:byte
	extrn	RR85save:byte
	extrn	RR84save:byte
	extrn	saved_pointer:dword
	extrn	DiagByte:byte
	extrn 	ROMID:byte
	extrn	TSS:byte
	extrn	IOBitMap:abs
	extrn	TSSLEN:abs
	extrn	strtng_bs_wndw_PTE:word
	extrn	NumberHandlePages:word

ifdef QEMS
	extrn	pool_size:word
	extrn	first_free_handle_space:word
	extrn	high_memory_address:dword
	extrn	hi_size :word
	extrn	hi_alloc:word
	extrn	hisys_alloc:word
	extrn	ext_memory_address:dword
	extrn	ext_size:word
	extrn	total_mem:word
	extrn	ext_vdisk:word
	extrn	avail_mem:word
	extrn	installed:byte
	extrn	VCPIAllocMapPtr:dword
	extrn	AllocMapPtr:dword
	extrn	starting_handle_PTE:word
	extrn	number_handle_PTEs:word
	EXTRN	PH_entries: WORD
	EXTRN	PH_boundary: WORD
	EXTRN	my_AX: WORD								; Used as scratch register
	extrn	EMS_window:word
	extrn	EMS_cntxt:word
	extrn	EMS_window_ptr:DWORD
	extrn	save_area_pointer:dword
	extrn	target_offset:word
	extrn	target_segment:word
endif
_DATA	ends

STACK	segment
	extrn	Stack0:byte
	extrn	Stack0_top:byte
ifdef MSFLAG
	extrn	Stack2:byte
	extrn	Stack2_top:byte
endif
	extrn	end_of_STACK:byte
STACK	ends

R_STACK	segment
	extrn	RealStack:byte
	extrn	RealStackTop:byte
	extrn	end_of_R_STACK:byte
R_STACK	ends

L_STACK	segment
	extrn	LastStack:byte
	extrn	LastStackTop:byte
	extrn	end_of_L_STACK:byte
L_STACK	ends


_TEXT	segment
	extrn	end_of_TEXT:byte
_TEXT	ends

GDT	segment
	extrn	GDTLEN:abs
GDT	ends

IDT	segment
	extrn	IDTLEN:abs
IDT	ends

ifdef TSSQLEO
TSS	segment
	extrn	TSSLEN:abs
TSS	ends
endif

.list ; end of EMMData.inc

=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\emm386\emmfunct.inc ===
ifndef	INC_LIST
.xlist
endif
;******************************************************************************
;
; (C) Copyright MICROSOFT Corp. 1986-1991
; (C) Copyright COMPAQ Computer Corp. 1986-1991
;
; Title:	EMM386.EXE - MICROSOFT Expanded Memory Manager 386 Driver
;		EMMLIB.LIB - Expanded Memory Manager Library
;
; Module:	EMMFUNCT.INC - defines for EMM code.
;
; Version:	0.10
;
; Date:		June 21, 1986
;
; Author:	Steve Preston
;
;******************************************************************************
;
; Change log:
;
; DATE		REV	DESCRIPTION
; --------	------	-----------------------------------------------------
; 06/21/86	0.0
; 06/25/86	0.02	Changed TOTAL_HANDLES to 255 to match LIM spec (SBP).
; 06/28/86	0.02	Name change from CEMM386 to CEMM (SBP).
; 07/06/86	0.04	Changed save area struct (SBP).
; 01/01/89	0.10	Rewritten for LIM 4.0 (DJM).
;******************************************************************************
;******************************************************************************
; GENERAL DEFINES
;******************************************************************************
MAX_HANDLES		EQU	255	; total number of handles supported
MAX_REGISTER_SETS	EQU	255	; number of register sets
TOTAL_EMS_WINDOWS	EQU	48	; Maximum number of 4.0 windows
TOTAL_PF_WINDOWS	EQU	4	; total number of 3.2 windows
TOTAL_PAGE_TABLES	=	10	; total number of page tables
NUMBER_BASE_WINDOWS	=	16	; number of windows from 256k to 512k
FIRST_HANDLE_PTE	=	0C00h	; starting location for handles
TOTAL_HANDLE_PTES	=	1000h	; number of handle PTEs
PAGE_SIZE		=	1000h	; 4k page size
EMS_PAGE_SIZE		=	4000H	; 16k EMS pages
START_OF_ROM_MEMORY	=	0E000h
MAX_SIZE		=   (32 * 1024) ; max size of EMS memory pool
MS_DOS			=	21h	; DOS interrupts
PRINT_STRING		=	09h	; DOS print string
GET_VERSION		=	30h	; DOS get version
X_HI_MEM_SEG		=	0F000h	; segment for the following words
X_MT_AT 		=	0FFFEh	; Machine type
DOS3X_ADJ		=	1	; DOS 3.x base memory adjustment
MAX_ARG_LEN		=	5	; max command line argument length

OS_ENABLED_BIT		=	0	; bit index into OS_function variable
OS_KEY_OUT_BIT		=	1	; bit index into OS_function variable
SAVE_MAP_IN_USE_BIT	=	15	; bit index into the save_map array
PAGE_ALLOCATED_BIT	=	9	; bit index into a page table entry
PAGE_ALLOCATED_BIT_MASK =	0200h	; bit mask for above bit
VCPI_USAGE_BIT		=	10	; bit index into a page table entry
HANDLE_ALLOCATED_BIT	=	11	; bit index into a page table entry
HANDLE_ALLOCATED_BIT_SET=	800h	; bit index into a page table entry

TRUE			=	1
FALSE			=	0
FREE			=	-1	; for save_flag
EMS_STATUS_FUNCTION	=	40h
VCPI_FUNCTION_OPCODE	=	0DEh
NULL_PAGE		=	7FFFh	; defines a handle not in use
PTE_ADDRESS_BIT_MASK	=   0FFFFF000h	; bit mask for a page table entry
PTE_CONTROL_BIT_MASK	=   000000FFFh	; bit mask for a page table entry
EMM_VERSION		=	040h	; the current version
UNMAP_WINDOW_OPCODE	=	0FFFFh	; for unmapping a window
DOS_MASTER_VECTOR	=	08h	; normal DOS master 8259 vector
DOS_SLAVE_VECTOR	=	70h	; normal DOS slave 8259 vector
TSS_RESET_BUSY		equ	0FDh	; for turning off the TSS's busy bit

;******************************************************************************
; STATUS DEFINES
;******************************************************************************
OK			=	0
EMM_SW_MALFUNCTION	=	080h
EMM_HW_MALFUNCTION	=	081h
INVALID_HANDLE		=	083h
INVALID_FUNCTION	=	084h
NO_MORE_HANDLES 	=	085h
SAVED_PAGE_DEALLOC	=	086h
NOT_ENOUGH_EXT_MEM	=	087h
NOT_ENOUGH_FREE_MEM	=	088h
ZERO_PAGES		=	089h
LOG_PAGE_RANGE		=	08Ah
PHYS_PAGE_RANGE 	=	08Bh
SAVE_AREA_FULL		=	08Ch
MAP_PREV_SAVED		=	08Dh
NO_MAP_SAVED		=	08Eh
INVALID_SUBFUNCTION	=	08Fh
NOT_SUPPORTED		=	091h
SUCCESSFUL_OVERLAP	=	092h
INSUFFICIENT_MEMORY	=	093h
INVALID_OFFSET		=	095h
INVALID_REGION		=	096h
INVALID_OVERLAP 	=	097h
INVALID_SOURCE_TYPE	=	098h
UNSUPPORTED_REGISTER_SET=	09Ah
NO_FREE_REGISTER_SETS	=	09Bh
NO_ALT_DMA_REG_SETS	=	09Ch
NO_ALT_REG_SETS 	=	09Ch
INVALID_REGISTER_SET	=	09Dh
NO_DEDICATED_DMA	=	09Eh
NAME_NOT_FOUND		=	0A0h
INVALID_NAME		=	0A1h
WRAP_AT_1MB		=	0A2h
WINDOW_INDEX_RANGE	=	0A3h
ACCESS_DENIED		=	0A4h

;==============================================================================
;==  Flags used allocation/deallocation of memory
;==============================================================================
fEMSPageAllocatedBit	equ	9	; bit to indicate an EMS allocated page
fVCPIPageAllocatedBit	equ	10	; bit to indicate a VCPI allocated page
fXMSPageAllocatedBit	equ	11	; bit to indicate a page from XMS pool

fEMSPageAllocated	equ	1 shl fEMSPageAllocatedBit
fVCPIPageAllocated	equ	1 shl fVCPIPageAllocatedBit
fXMSPageAllocated	equ	1 shl fXMSPageAllocatedBit

fWINPageBit		equ	9	; bit to indicate page for WINdows
fWINPage		equ	1 shl fWINPageBit
;==============================================================================
;==  Flags used for Page4K[] array.
;==============================================================================
INUSEbit		equ 	0  	; for WinSrch: ROM and default eXclude
EXCLUDEbit		equ	1	; for user specified X= parameter
RAMbit			equ	2	; for RAM=mmmm-nnnn
EMSbit			equ	3	; for EMS=mmmm-nnnn
ROMbit			equ	4	; for ROM=mmmm-nnnn
WINbit			equ	5	; for WIN=mmmm-nnnn

INUSE			equ	1 shl INUSEbit
EXCLUDE			equ 	1 shl EXCLUDEbit
RAM			equ	1 shl RAMbit
EMS			equ	1 shl EMSbit
ROM			equ	1 shl ROMbit
WIN			equ	1 shl WINbit
;******************************************************************************
; VCPI STATUS DEFINES
;******************************************************************************
SUCCESS 		equ	000h	; return code for AH using 32-bit regs
FAILURE 		equ	0ffh	; return code for AH using 32-bit regs

D_PRES			equ	080h	; present in memory
D_DPL0			equ	0	; Ring 0
D_CTRL			equ	0	; Control descriptor
D_386INT_GATE		equ	0eh	; 386 interrupt gate
D_386INT0	equ	(D_PRES+D_DPL0+D_CTRL+D_386INT_GATE) ; Ring 0 int gate

;******************************************************************************
;	 S T R U C T U R E S
;******************************************************************************
;***********************************************************************
; EMSmap[]
;	This structure is used for holding info about the EMS windows.
;	The windows mapping consist of PTE entries.
;***********************************************************************
EMSmap_struc	struc
		dd	0
EMSmap_struc		ends

;***********************************************************************
; RegisterStack_struc[]
;	This structure is used for accessing the user's original registers.
;	There are 2 EBP locations which have different meanings depending
;	on how CEMM was called.  If CEMM was on (in protected mode) then
;	'stack_frame_EBP' points to the fault stack frame on the ring zero
;	stack and 'reg_EBP' is the user's EBP.  If CEMM was off (in real mode)
;	then 'stack_frame_EBP' is the user's original EBP and there is no
;	fault stack frame.
;***********************************************************************
RegisterStack_struc	struc
	reg_EDI 	dd	?
	reg_ESI 	dd	?
	stack_frame_EBP	dd	?
	reg_ESP 	dd	?
	reg_EBX 	dd	?
	reg_EDX 	dd	?
	reg_ECX 	dd	?
	reg_EAX 	dd	?
	ret_IP		dw	?
	ret_CS		dw	?
	reg_DS		dw	?
	reg_ES		dw	?
	reg_EBP 	dd	?
RegisterStack_struc	ends

;***********************************************************************
; register_set[]
;	This structure is used with the register_set array.  The
;	'active' fields specifies if this register set has been allocated
;	or not.  The 'saved_mapping' is the window mapping for this set.
;***********************************************************************
RegisterSet_struc	struc
	active		db	0
	RSrsvd		db	0
	a20_state	dw	0
	page_table_ptr	dd	0
RegisterSet_struc	ends

ifdef QEMS
RegisterSet_struc	struc
	active		db	0
	a20_state	dw	0
	page_table_ptr	dd	0
	saved_mapping	dw	0
			dd	TOTAL_EMS_WINDOWS dup (NULL_PAGE)
RegisterSet_struc	ends
endif
;***********************************************************************
; handle_table[]
;	This structure is used with the handle_table[] array for
;	holding handle information.  The 'base_PTE_index' is the PTE index
;	where the handle starts at.  The 'number_PTEs' is how many PTE's
;	are allocated to this handle.  The PTE's are always contiguous and
;	for each PTE, the address saved in it is allocated to that handle.
;	A value of NULL_PAGE in 'base_PTE_index' means the handle is free.
;***********************************************************************
HandleTable_struc	struc
	base_PTE_index	dw	?
	number_PTEs	dw	?
HandleTable_struc	ends

HandleName_struc	STRUC
			DB	8 DUP (0)
HandleName_struc	ENDS

HandleSaveMap_struc	STRUC
			dd	4 dup (0)
HandleSaveMap_struc	ENDS

ifdef QEMS
;***********************************************************************
; EMS_window[]
;	This structure is used for holding info about the EMS windows.
;	The windows mapping consist of its handle and logical page.
;***********************************************************************
EMS_window_struc	struc
	handle		DB	?
	logical_4k_page	dw	?
EMS_window_struc		ends
endif

;***********************************************************************
; MACROS
;	These macro's are needed due to a 80386 bug in versions prior to
;	the D step.  The problem is that the EDI register will not be
;	incremented correctly but only the 16 bit DI register is if an
;	address size override instruction does not follow.
;***********************************************************************
REP_MOVS_DWORD_USING_DS_ESI	macro
	rep movs	dword ptr es:[edi],dword ptr ds:[esi]
	db	67h
	nop
endm
REP_MOVS_WORD_USING_DS_ESI	macro
	rep	movs	word ptr es:[edi], word ptr ds:[esi]
	db	67h
	nop
endm
REP_MOVS_BYTE_USING_DS_ESI	macro
	rep	movs	BYTE ptr es:[edi], BYTE ptr ds:[esi]
	db	67h
	nop
endm
MOVS_DWORD_USING_DS_ESI	macro
	movs	dword ptr es:[edi],dword ptr ds:[esi]
	db	67h
	nop
endm
MOVS_WORD_USING_DS_ESI	macro
	movs	word ptr es:[edi],word ptr ds:[esi]
	db	67h
	nop
endm
REP_MOVS_DWORD_USING_ES_ESI	macro
	rep movs	dword ptr es:[edi],dword ptr es:[esi]
	db	67h
	nop
endm
MOVS_DWORD_USING_ES_ESI	macro
	movs	dword ptr es:[edi],dword ptr es:[esi]
	db	67h
	nop
endm
REP_MOVS_BYTE_USING_ES_ESI	macro
	rep movs	byte ptr es:[edi],byte ptr es:[esi]
	db	67h
	nop
endm
MOVS_BYTE_USING_ES_ESI	macro
	movs	byte ptr es:[edi],byte ptr es:[esi]
	db	67h
	nop
endm
STOS_BYTE_PTR_ES_EDI macro
	stos	byte ptr es:[edi]
	db	67h		; Address mode prefix
	nop
	endm
STOS_WORD_PTR_ES_EDI macro
	stos	word ptr es:[edi]
	db	67h		; Address mode prefix
	nop
	endm
STOS_DWORD_PTR_ES_EDI macro
	stos	dword ptr es:[edi]
	db	67h		; Address mode prefix
	nop
	endm
REP_STOS_DWORD_PTR_ES_EDI macro
	rep stos    dword ptr es:[edi]
	db	67h		; Address mode prefix
	nop
	endm
LODS_BYTE_PTR_ES_ESI macro
	lods	byte ptr es:[esi]
	db	67h		; Address mode prefix
	nop
	endm
LODS_WORD_PTR_ES_ESI macro
	lods	word ptr es:[esi]
	db	67h		; Address mode prefix
	nop
	endm
LODS_DWORD_PTR_ES_ESI macro
	lods	dword ptr es:[esi]
	db	67h		; Address mode prefix
	nop
	endm
.list
=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\emm386\emm.asm ===
.386p
page 58,132
;******************************************************************************
	title	EMM - Expanded Memory Manager interface for CEMM
;******************************************************************************
;
;   (C) Copyright MICROSOFT Corp. 1986-1991
;   (C) Copyright COMPAQ Computer Corp. 1986
;
;    Title:	EMM386.EXE - MICROSOFT Expanded Memory Manager 386 Driver
;
;    Module:	EMM - Expanded Memory Manager interface
;
;    Version:	2.05
;
;    Date:	June 14, 1986
;
;    Author:	Steve Preston
;		Leo Cohen (designed and implemented memory management and
;			   mapping functions to improve performance) LC
;
;******************************************************************************
;
;	Change Log:
;
;	DATE	 REVISION	Description
;	-------- --------	--------------------------------------------
;	06/14/86 original
;	06/28/86 0.02		Name change from CEMM386 to CEMM (SBP).
;	06/29/86 0.02		Protect port 84/85 from ints (SBP).
;	07/05/86 0.04		moved EMM_rEntry to R_CODE (SBP).
;	07/06/86 0.04		Changed assume to _DATA (SBP).
;	07/08/86 0.04		Changed EMM_pEntry to call EMM functions
;				directly (SBP).
;	07/10/86 0.05		jmp $+2 before "POPF" (SBP).
;	07/10/86 0.05		added EMM_Flag (SBP).
;	01/12/87 0.09		Added check for AutoMode in EMMr_Link (SBP).
;	05/13/87 2.00		changed errhndlr call (SBP).
;	05/15/87 2.00		changed AUTO mode logic (SBP).
;	05/15/87 2.00		int67 entry called as FAR and ALWAYS from
;				protected mode (SBP).
;	09/05/87 2.05		Fixed AutoUpdate to always update AutoState
;				- even when not in AutoMode (SBP).
;	02/25/88 3.30 (*B)	Fixed rel. jumps because of increased size(RDV)
;	10/12/88 3.32 (*D)	Add VCPI code (DJM).
;
;******************************************************************************
;   Functional Description:
;	The module contains code for calling the EMM functions and a routine
;   for managing the AUTO mode of CEMM.
;	There are two EMM entry points in this module; one for real/virtual
;   mode entry and one for protected mode (IDT entry points here).   When
;   CEMM is Active (system in Virtual mode),  INT 67H calls transition to
;   protected mode and the EMM_pEntry entry point.  EMM_pEntry calls the
;   appropriate EMM function.  All EMM functions are executed in protected
;   mode.  When CEMM is Inactive, CEMM enters protected mode, calls the EMM
;   function, then returns to real mode.
;
;******************************************************************************
.lfcond
	page
;******************************************************************************
;			P U B L I C   D E C L A R A T I O N S
;******************************************************************************
;
	public	EMM_pEntry		; protected mode entry point
	public	EMM_rEntry		; real mode entry point
	public	AlterAndCallEntry
	public	AlterandCallReturn

	page
;******************************************************************************
;			L O C A L   C O N S T A N T S
;******************************************************************************
	include vdmseg.inc
	include vdmsel.inc
	include vm386.inc
	include oemdep.inc
	include desc.inc
	include emm386.inc
	include emmfunct.inc
	include emmdata.inc
	include winemm.inc

ifdef BETA
	include emm.pub
endif
;******************************************************************************
;			E X T E R N A L    R E F E R E N C E S
;******************************************************************************
;

ifdef	BugMode
DCODE	segment
extrn	_Trap03:far
DCODE	ends
 endif

_DATA	segment
	extrn	pLastVMTF:word
	extrn	LastVMTF:word
_DATA	ends

_TEXT	segment
	extrn	EMSDispatcher:far
	extrn	ReflectInterrupt:near
	extrn	EnterVirtual:far
	extrn	ExitVirtual:far
	extrn	VCPIDispatcher:far
_TEXT	ends

R_CODE	segment

	extrn	ChkA20:near
	extrn	GoProtMode:near
	extrn	GoRealMode:near
	extrn	GoVirtualMode:near
	extrn	Devname:byte
;;	extrn	chk_machine_state:far
	extrn	EMM_rFarEntry:dword
R_CODE	ends


page
;******************************************************************************
;			S E G M E N T	D E F I N I T I O N
;******************************************************************************

;******************************************************************************
;
;	_TEXT Code Segment
;
;******************************************************************************
_TEXT	segment
	assume	cs:_TEXT, ds:_DATA, es:ABS0, gs:R_CODE
align 16
;******************************************************************************
;	EMM_pEntry - protected mode entry point for EMM function calls
;
;	ENTRY:	Protected mode
;		[TrapFlags],fI67trap is set => don't reflect interrupt
;		SS:[SP] pointing to virtual mode INT stack frame
;
;	EXIT:	Real or Virtual Mode
;
;	USED:	none
;
;******************************************************************************
EMM_pEntry	proc	near
	push	ebp

;
;  The DS, ES and GS registers are setup for CEMM's data areas and 4 GB.
;
	mov	bp,VDMD_GSEL
	mov	ds,bp
	mov	bp,RCODEA_GSEL
	mov	gs,bp
	mov	bp,DATA32_GSEL
	mov	es,bp
	assume	ds:_DATA,es:ABS0,gs:R_CODE

	mov	bp,gs:[TrapFlags]

	btr	bp,fI67trapBit		;Q: Has real mode ISR been called yes?
	jc	short EpEdispatch	; Y: jump to dispatcher

	cmp	ah,56h			;Q: Alter map and call?
	je	short EpEreflect	; Y: relect interrupt

	or	bp,fI67noReflect	; assume not reflected
	mov	gs:[TrapFlags],bp	; save flags

;
;  Check to see if INT 67 in IVT is hooked
;
	mov	bp,seg R_CODE
	shl	ebp,16
	mov	bp,offset R_CODE:EMM_rEntry
	cmp	ebp,dword ptr es:[int67]	;Q: Is it hooked?
	jne	short EpEreflect		; Y: must reflect
	movzx	ebp,sp				; N: set bp

EpEcont:
        test    [bp][VTFO].VMTF_EFLAGS,FLAGS_IF ;Q: Did client have IF set?
        jz      short EpEints	                ; N: don't turn them on
	sti					; Y: let them go
EpEints:
;
;  The ES,DS registers are pushed on the stack.
;
	push	[bp][VTFO].VMTF_ES
	push	[bp][VTFO].VMTF_DS
;
;  Check to see if its a VCPI or EMS function and call appropriate dispatcher.
;
	cmp	ah,VCPI_FUNCTION_OPCODE
	je	short EpE_VCPI_function

	PCall	VDMC_GSEL,_TEXT:EMSDispatcher

	add	sp,4
	pop	ebp
	iretd

EpEdispatch:
	mov	gs:[TrapFlags],bp	; save flags
	movzx	ebp,sp
	jmp	short EpEcont

EpEreflect:
	movzx	ebp,sp				; N: set bp
	and	gs:[TrapFlags],not fI67noReflect	; reflected
	push	67h
	jmp	ReflectInterrupt


EPE_VCPI_function:
	cli
	PCall	VDMC_GSEL,_TEXT:VCPIDispatcher
	add	sp,4
	pop	ebp
	iretd

ifdef QEMS
	movzx	ebp,sp

;
;  If the real mode entry point has not been called then call it now.  This
;  enables any routines that patch out int 67h to be called.  If the EMM_Flag
;  is 0, then the real mode entry point has NOT been called yet.
;
	test	gs:[TrapFlags],fI67trap
	jnz	short EpE_clear_flag
;
;QLEO: Fast EMS function response
;
	cmp	ah,56h				;Q: Alter map and call?
	je	short EpEreflect		; Y: relect interrupt

	push	eax
	mov	ax,seg R_CODE
	shl	eax,16
	mov	ax,offset R_CODE:EMM_rEntry
	cmp	eax,dword ptr es:[int67]
	pop	eax
	je	short EpEnotReflected

EpEreflect:
	and	gs:[TrapFlags],not fI67noReflect	; reflected
	push	67h
	jmp	ReflectInterrupt

EpEnotReflected:
	or	gs:[TrapFlags],fI67noReflect	; not reflected
EpE_clear_flag:
	and	gs:[TrapFlags],not fI67trap

		; The ES,DS registers are pushed on the stack.
	push	[bp.VTFO+VMTF_ES]
	push	[bp.VTFO+VMTF_DS]

		; Check to see if its a VCPI function or EMS function.
		; Call the appropriate dispatcher.
	cmp	ah,VCPI_FUNCTION_OPCODE
	je	short EpE_VCPI_function

EpE_EMS_function:
        test    gs:[GenFlags],fNoINT+fNoEMSInt  ;Q: Allow interrupts?
        jnz     short EpEDispatch               ; N: don't turn them on
        test    [bp][VTFO].VMTF_EFLAGS,FLAGS_IF ;Q: Did client have IF set?
        jz      short EpEDispatch               ; N: don't turn them on
	sti					; Y: allow interrupts!

EpEDispatch:
	PCall	VDMC_GSEL,_TEXT:EMSDispatcher
;910521	cli

	add	sp,4
	pop	ebp
	iretd
endif
EMM_pEntry	endp

_TEXT	ends

page
;******************************************************************************
;	R_CODE SEGMENT
;******************************************************************************
R_CODE	segment
	assume	cs:R_CODE, ds:R_CODE, es:R_CODE

;******************************************************************************
; EMM_rEntry - real/virtual mode entry point for EMM function calls
;
; ENTRY:
;	real/virtual mode
;
; EXIT:
;	real/virtual mode
;
; DESCRIPTION:
;	If CEMM is off then an appropriate error code is returned in AH.
;	If CEMM is in auto mode and off then the EMS call is done from here
;	and CEMM is returned in either auto off state or ON state.  If CEMM
;	is on this this call simply reflects it back to the protected entry
;	point.
;******************************************************************************
EMM_rEntry	proc	near

	push	gs
	push	cs
	pop	gs	; gs = R_CODE
	call	cs:[EMM_rFarEntry]
	pop	gs
	iret

EMM_rEntry	endp

;******************************************************************************
; AlterAndCallEntry
;
; ENTRY
;	none
; EXIT
;	AL - the special Alter And Call subfunction number
; DESCRIPTION
;	This routine is where a user subroutine returns to during execution
;	of the AlterAndCall function.  This routine sets a special subfunction
;	number and then performs an interrupt.
;******************************************************************************
AlterAndCallEntry	proc	far
	mov	ax,56FFh
	int	67h
AlterandCallReturn:
		; This code should never return through the int 67h to here.
	hlt
AlterAndCallEntry	endp

R_CODE	ends

END

=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\emm386\emmfunct.asm ===
.386p
page	58,132
;******************************************************************************
	title	emmfunct.asm - EMM function handlers
;******************************************************************************
;
; (C) Copyright MICROSOFT Corp. 1988-1991
; (C) Copyright COMPAQ Computer Corp. 1988-1991
;
; Title:	EMM386.EXE - MICROSOFT Expanded Memory Manager 386 Driver
;		EMMLIB.LIB - Expanded Memory Manager Functions Library
;
; Module:	EMS Function Handler
;
; Version:	1.00
;
; Date:	November 1, 1988
;
; Author:	Dan Mazina (original)
;		Leo Cohen (designed and implemented memory management and
;			   mapping functions to improve performance) LC
;
;******************************************************************************
;
;   Change log:
;
;     DATE    REVISION			DESCRIPTION
;   --------  --------	-------------------------------------------------------
;   8/11/88	1	initial code
;******************************************************************************
;
;   Functional Description:
;	This module implements all of the functions for the EMM interface.
;
;******************************************************************************

page
;******************************************************************************
; PUBLICS
;******************************************************************************
public	EMSDispatcher
public	GetStatus
public	GetPageFrameAddress
public	GetUnallocatedPageCount
public	AllocatePages
public	MapHandlePage
public	DeallocatePages
public	GetEMMVersion
public	SavePageMap
public	RestorePageMap
public	GetPageMappingRegisterIOArray
public	GetLogicalToPhysicalPageTrans
public	GetEMMHandleCount
public	GetEMMHandlePages
public	GetAllEMMHandlePages
public	GetSetPageMap

;******************************************************************************
; INCLUDES
;******************************************************************************
include	vdmseg.inc
include vdmsel.inc
include	page.inc
include	emmfunct.inc
include emmdata.inc
include emm386.inc

ifdef BETA
include	emmfunct.pub
endif
;******************************************************************************
; DEFINES
;******************************************************************************

;******************************************************************************
; EXTERNALS
;******************************************************************************
_TEXT	segment
	extrn	SaveWindowMapping:near
	extrn	RestoreWindowMapping:near
	extrn	AllocEMSMem:near
	extrn	ValidateHandle:near
	extrn	GetSetPartialPageMap:near
	extrn	MapUnmapMultipleHandlePages:near
	extrn	GetSetHandleAttribute:near
	extrn	GetSetHandleName:near
	extrn	GetHandleDirectory:near
	extrn	AlterPageMapAndJump:near
	extrn	AlterPageMapAndCall:near
	extrn	MoveExchangeMemoryRegion:near
	extrn	GetMappablePhysicalAddress:near
	extrn	GetExpandedMemoryHWInfo:near
	extrn	AllocateStandardRawPages:near
	extrn	AlternateMapRegisterSet:near
	extrn	PrepareForWarmBoot:near
	extrn	EnableDisableOSFunctions:near
	extrn	ReallocatePages:near

	extrn	GetFreeEMS:near
	extrn	CheckFreeEMS:near
	extrn	ShrinkEMSpool:near

ifdef QEMS
	extrn	Get4kPages:near
	extrn	GarbageCollect:near
	extrn	GetHandleSpace:near
	extrn	SetWindows:near
	extrn	SetPT0Cntxt:near
	extrn	RestorePT0Cntxt:near
endif
_TEXT	ends
R_CODE	segment
	extrn	CEMM_Entry:word
R_CODE	ends
page
;******************************************************************************
; SEGMENTS
;******************************************************************************

_TEXT	segment
assume	cs:_TEXT,ds:_DATA,ss:_DATA,es:ABS0,gs:R_CODE
even
;******************************************************************************
; EMS_dispatcher
;
; ENTRY:
;	DS - VDMD_GSEL
;	GS - RCODEA_GSEL
;	BP - if CEMM was on during call, offset to the fault stack frame
;	all other registers have the user's values except for BP
; EXIT:
;	the return registers are set up correctly
; DESCRIPTION:
;	This routine checks the function number in AH and calls the appropriate
;	subroutine.  The user's register values are pushed on the stack and
;	accessed through the 'RegisterStack_struc' structure.
;******************************************************************************
dispatch_vector	label word
	dw	OFFSET GetStatus
	dw	OFFSET GetPageFrameAddress
	dw	OFFSET GetUnallocatedPageCount
	dw	OFFSET AllocatePages
	dw	OFFSET MapHandlePage
	dw	OFFSET DeallocatePages
	dw	OFFSET GetEMMVersion
	dw	OFFSET SavePageMap
	dw	OFFSET RestorePageMap
	dw	OFFSET GetPageMappingRegisterIOArray
	dw	OFFSET GetLogicalToPhysicalPageTrans
	dw	OFFSET GetEMMHandleCount
	dw	OFFSET GetEMMHandlePages
	dw	OFFSET GetAllEMMHandlePages
	dw	OFFSET GetSetPageMap
	dw	OFFSET GetSetPartialPageMap
	dw	OFFSET MapUnmapMultipleHandlePages
	dw	OFFSET ReallocatePages
	dw	OFFSET GetSetHandleAttribute
	dw	OFFSET GetSetHandleName
	dw	OFFSET GetHandleDirectory
	dw	OFFSET AlterPageMapAndJump
	dw	OFFSET AlterPageMapAndCall
	dw	OFFSET MoveExchangeMemoryRegion
	dw	OFFSET GetMappablePhysicalAddress
	dw	OFFSET GetExpandedMemoryHWInfo
	dw	OFFSET AllocateStandardRawPages
	dw	OFFSET AlternateMapRegisterSet
	dw	OFFSET PrepareForWarmBoot
	dw	OFFSET EnableDisableOSFunctions
cEMSFunc	equ	(($ - dispatch_vector)/2)

align 16
EMSDispatcher	proc	far
;
;  The 32-bit registers are pushed and the BP is set up for the new stack frame.
;  The direction flag is cleared.
;
	pushad
	mov	bp,sp
	cld
;
;  The function in AH is placed in ESI
;
	cmp	ah,40h + cEMSFunc
	jae	short ED_invalid_function

	movzx	si,ah
	sub	si,40h
	jb	short ED_invalid_function

	cmp	gs:[NoEMSset],TRUE	;Q: Is EMS available?
	je	short EDSWmalfunc	; N: S/W malfunction

ifdef QEMS
	bts	gs:[GenFlags],fEMSsemBit;Q: Are EMS functions being re-entered?
	jc	short EDSWmalfunc	; Y: S/W malfunction
endif
;
;  The function is changed into an index and executed. The only registers not
;  in their original states are ESI, EBP, DS and ES.
;
	add	si,si
	call	cs:dispatch_vector[si]

ifdef QEMS
	and	gs:[GenFlags],not fEMSsem ; Reset EMS re-entrancy semaphore
endif
ED_return_code:
	popad
	ret
		; If this point is reached then an invalid function
		; code was seen.
ED_invalid_function:
	cmp	ax,0FFA5h
	je	short ED_special_function

EDinvalid:
	mov	byte ptr [bp.reg_EAX + 1],INVALID_FUNCTION
	jmp	short ED_return_code

EDSWmalfunc:
	mov	byte ptr [bp.reg_EAX+1],EMM_SW_MALFUNCTION
	jmp	short ED_return_code

ED_special_function:
	ror	al,4
	mov	byte ptr [bp.reg_EAX],al
	mov	byte ptr [bp.reg_EAX + 1],INVALID_FUNCTION
	push	gs:[CEMM_Entry]
	pop	word ptr [bp.reg_ECX]
	mov	word ptr [bp.reg_EBX],SEG R_CODE
	jmp	short ED_return_code

EMSDispatcher	endp

page
align 16
;******************************************************************************
; GetStatus
;
; ENTRY
;	none
; EXIT
;	AH - OK
; DESCRIPTION
;	This function returns the current status of the EMM subsystem which is
;	always success.
;******************************************************************************
GetStatus	proc	near
	mov	byte ptr [bp.reg_EAX + 1],OK
	ret
GetStatus	endp

page
align 16
;***********************************************************************
; GetPageFrameAddress
;
; ENTRY
;	none
; EXIT
;	BX - segment address of the page frame
;	AH - OK
; DESCRIPTION
;	This routine returns the segment address of the page frame base.
;	This is window index 0 of the EMS windows.
;***********************************************************************
GetPageFrameAddress	proc	near
;
;  Get base address of the first EMS physical window
;
	mov	bx,EMS_window_location[0]	; page number
	shl	bx,8				; convert to paragraph

	mov	word ptr [bp][reg_EBX],bx	; return to client
	mov	byte ptr [bp][reg_EAX+1],OK	; assume no error

	cmp	gs:[PF_Base],FREE	;Q: Is there a full LIM 3.2 page frame?
	je	short GPFAerr		; N: return error
	ret

GPFAerr:
	mov	byte ptr [bp][reg_EAX+1],EMM_SW_MALFUNCTION ; XMA2EMS compatible
	ret
GetPageFrameAddress	endp

page
align 16
;==============================================================================
;==
;== GetUnallocatedPageCount: This routine returns the number of free 16k
;==			     pages and total number of 16k pages in the
;==			     system.
;==
;== Entry: (Protected Mode)
;==
;== Exit:  (Protected Mode)
;==	[BP]:BX = count of free 16k pages
;==	[BP]:DX = total number of 16k pages (free and allocated)
;==	[BP]:AH = OK
;==                                                                    LC
;=============================================================================
GetUnallocatedPageCount	proc	near
;
;  Get total EMS pages
;
	mov	ax,[TopOfHandleSpace]
	sub	ax,FIRST_HANDLE_PTE	; subtract start of handle space
	shr	ax,2
	mov	word ptr [bp][reg_EDX],ax
;
;  Get free EMS pages
;
	call	GetFreeEMS
	mov	word ptr [bp][reg_EBX],ax

	mov	byte ptr [bp][reg_EAX+1],OK
	ret
GetUnallocatedPageCount	endp

page
align 16
;==============================================================================
;==
;== AllocatePages: This routine allocates EMS pages to the user.
;==
;== Entry: (Protected Mode)
;==	BX = allocation size requested in 16k pages
;==
;== Exit:  (Protected Mode)
;==	[BP]:AH = return code
;==	[BP]:DX = handle
;==                                                                    LC
;=============================================================================
AllocatePages	proc	near
;
;	If the number of requested pages is zero then exit.
;
	or	bx,bx
	je	short APzeroPagesReq
;
;  Get total EMS pages
;
	mov	ax,[TopOfHandleSpace]	; top of handle space
	sub	ax,FIRST_HANDLE_PTE	; subtract start of handle space
	shr	ax,2			; convert to 16K pages

	cmp	ax,bx			;Q: Enough free EMS pages?
	jb	short APnotEnoughTotEMS	; N: error

;
;  Get free EMS pages (at this time!)
;
	call	CheckFreeEMS
	jc	short APnotEnoughFreeEMS

;EnterCrit				; BEGIN CRITICAL SECTION
pushf
cli
;
;  Search handle table for an empty handle structure that can be used.
;
	xor	dx,dx
	mov	cx,[total_handles]
	mov	esi,[hndl_tbl_ptr]
	mov	di,4
	inc	dx
	add	si,di				; skip handle 0
APfindHandle:
	cmp	ds:[si].base_PTE_index,FREE
	je	short APhandleFound
	add	si,di
	inc	dx
	cmp	dx,cx
	jb	short APfindHandle
;ExitCrit				; END CRITICAL SECTION
popf
;
;  If this is reached then no free handles could be found.
;
	mov	byte ptr [bp][reg_EAX+1],NO_MORE_HANDLES
	jmp	short APexit
;
;  The PTE's are searched to find a location for the handle and its pages.
;  BX is the number of requested PTE's.	SI is the index into the handle space.
;
APhandleFound:
	mov	ds:[si].base_PTE_index,0	; mark used
	mov	ds:[si].number_PTEs,0		; with zero pages

;ExitCrit				; END CRITICAL SECTION
popf
	push	dx
	call	AllocEMSMem
	pop	dx
;
;  If CY is set, not enough EMS pages were found!  Even though we checked above,
;  because this routine is re-entrant, it could have changed.
;
	jc	short APclearHandle

	inc	[handle_count]
	mov	word ptr [bp][reg_EDX],dx
	mov	byte ptr [bp][reg_EAX+1],OK
APexit:
	ret

APzeroPagesReq:
	mov	byte ptr [bp][reg_EAX+1],ZERO_PAGES
	jmp	short APexit
APnotEnoughTotEMS:
	mov	byte ptr [bp][reg_EAX+1],NOT_ENOUGH_EXT_MEM
	jmp	short APexit
APclearHandle:
	mov	[si].base_PTE_index,FREE		; mark free
APnotEnoughFreeEMS:
	mov	byte ptr [bp][reg_EAX+1],NOT_ENOUGH_FREE_MEM
	jmp	short APexit
AllocatePages	endp

page
align 16
;==============================================================================
;==
;== MapHandlePage: This routine maps a 16K EMS logical page into a physical
;==		   EMS window.
;==
;== Entry: (Protected Mode)
;==	AL = window index
;==	BX = logical page index
;==	DX = EMM handle
;==
;== Exit:  (Protected Mode)
;==	AH = return code
;==                                                                     LC
;=============================================================================
MapHandlePage	proc	near
;
;  Assume success
;
	mov	byte ptr [bp][reg_EAX+1],OK	; assume error
;
;  Validate window index
;
	cmp	[xma2ems],TRUE		;Q: Is it in XMA2EMS mode?
	je	MHPxma2ems		; Y: remap windows

MHPindex:
	movzx	edi,al
	cmp	di,[number_EMS_windows]	;Q: Valid window index?
	jae	MHPinvPhyPage		; N: error

;
;  Validate handle
;
	cmp	dx,[total_handles]	;Q: Handle in range?
	jae	MHPinvHandle		; N: error

	movzx	ecx,bx			; CX=logical page
	movzx	ebx,dx			; access handle structure
	shl	bx,2
	add	ebx,[hndl_tbl_ptr]	; (ESI) = pointer to handle table
	.errnz	(SIZE HandleTable_struc-4)

	cmp	ds:[bx].base_PTE_index,FREE ;Q: Handle in use?
	je	MHPinvHandle		    ; N: error

;
;  Access PTE
;
	add	di,di
	movzx	eax,[EMS_window_location][di] ; (EAX) = linear page # of window
	mov	di,ax
	shl	di,2
	add	edi,[page_tables]	; EDI = PTE address

	cmp	cx,UNMAP_WINDOW_OPCODE
	je	short MHPunmap
;
;  Validate logical page range
;
	test	ch,0C0h			;Q: Is BX range too large?
	jnz	short MHPinvLogPage	; Y: error
	shl	cx,2			; N: convert to 4K pages

	cmp	cx,ds:[bx].number_PTEs	;Q: Is logical page within valid range?
	jae	short MHPinvLogPage	; N: error


;
;  Access handle space, and map logical page
;
;EnterCritical			; base PTE index for handle may change
pushf
cli
	movzx	esi,ds:[bx].base_PTE_index
	add	si,cx
	shl	si,2			; quick esi*4
	add	esi,[page_directory]	; access handle space

	mov	cx,4
	REP_MOVS_DWORD_USING_ES_ESI
;
;debug	ExitCritical			; base PTE index for handle may change
popf
	mov	eax,cr3
	mov	cr3,eax
	ret
align 16
;
;  Unmap physical window by mapping one-to-one
;
MHPunmap:
	mov	dx,P_SIZE		; page
	shl	eax,P_SHIFT		; physical address
	or	ax,P_AVAIL		; accessible
	STOS_DWORD_PTR_ES_EDI
	add	eax,edx
	STOS_DWORD_PTR_ES_EDI
	add	eax,edx
	STOS_DWORD_PTR_ES_EDI
	add	eax,edx
	STOS_DWORD_PTR_ES_EDI

	mov	eax,cr3
	mov	cr3,eax

MHPexit:
	ret

MHPxma2ems:
	sub	al,250			;Q: P254 or P255?
	ja	short MHPx2aCont	; Y: continue
	add	al,250			; N: restore original window number
MHPx2aCont:
	cmp	al,5			;Q: Is the window in 0..5?
	ja	short MHPinvPhyPage	; N: no, error
	jmp	MHPindex

MHPinvPhyPage:
	mov	byte ptr [bp][reg_EAX+1],PHYS_PAGE_RANGE
	jmp	short MHPexit
MHPinvHandle:
	mov	byte ptr [bp][reg_EAX+1],INVALID_HANDLE
	jmp	short MHPexit
MHPinvLogPage:
	mov	byte ptr [bp][reg_EAX+1],LOG_PAGE_RANGE
	jmp	short MHPexit
MapHandlePage	endp

page
align 16
;==============================================================================
;==
;== DeallocatePages: This routine freess EMS pages belonging to a handle.
;==
;== Entry: (Protected Mode)
;==	DX = handle to deallocate
;==
;== Exit:  (Protected Mode)
;==	[BP]:AH = return code
;==                                                                     LC
;=============================================================================
DeallocatePages	proc	near
;
;  Assume success
;
	mov	byte ptr [bp][reg_EAX+1],OK

;
;  Validate handle
;
	cmp	dx,[total_handles]	;Q: Handle in range?
	jae	DPinvHandle		; N: error
	movzx	ebx,dx			; Y: handle index in EBX
	mov	edx,ebx
	mov	ax,FREE

;
;  Make sure save area is not being used.
;
	cmp	save_flag[bx],al	;Q: Is this save area FREE?
	jne	DPsaveAreaInUse		; N: error

;
;  Address the handle structure
;
	shl	bx,2
	.errnz	(SIZE HandleTable_struc-4)
	add	ebx,[hndl_tbl_ptr]	; (ESI) = pointer to handle table

;EnterCrit			; BEGIN CRITICAL SECTION
pushf
cli
;
;  Free handle
;
	xchg	ds:[bx].base_PTE_index,ax	; free handle
	cmp	ax,FREE				;Q: Handle already free?
	je	DPinvHandleX		    	; Y: error
	dec	gs:[handle_count]		; N: one less handle
;
;  If the handle is index 0, then it cannot actually be freed up,
;  so make it point somewhere innocuous.
;
	or	dx,dx
	jne	short DPnullName
	mov	ds:[bx].base_PTE_index,dx
	inc	gs:[handle_count]

;
;  The handles name is reset to all nulls
;
DPnullName:
	xor	ecx,ecx
	mov	edi,[hndl_nam_ptr]
	mov	[edi][edx*8],ecx
	mov	[edi][edx*8+4],ecx

;
;  Free its pages
;

	movzx	edi,ax			; start index of handle space
	xor	cx,cx			; free all pages for this handle
	xchg	cx,ds:[bx].number_PTEs	; get number of pages and zero it
	jcxz	short DPexitX		; if no pages, we're done
	add	ax,cx			; end of this handle space

	cmp	ax,[TopOfUsedEMSspace]	;Q: Last handle in the handle space?
	jne	short DPfPcont		; N: free all its pages
	mov	[TopOfUsedEMSspace],di	; Y: reflect change to top of used EMS
DPfPcont:
	shl	di,2			; index to offset
	add	edi,[page_directory]	; address of handle space
	shr	cx,2			; 4K to EMS pages
	sub	[UsedEMSPages],cx	; increase number of used EMS pages
	mov	ax,not fEMSPageAllocated; clear the user allocated bit

	mov	bx, cx			; 16k page count to bx
	xor	cx, cx			; cx = flag if XMS pool used for EMS

	; Free EMS pages--check each EMS page to see if allocated from XMS pool,
	; if so free XMS pages when done

DPfreePagesChkXMS:

	bt	dword ptr es:[edi], fXMSPageAllocatedBit	; from XMS?
	jnc	short DPfreePages

	inc	cx			; there is XMS memory to free

DPfreePages:
	and	word ptr es:[edi], ax
	add	edi, 10h
	dec	bx
	jz	short DPexitX
	jcxz	short DPfreePagesChkXMS ; don't check for XMS if already know
	jmp	short DPfreePages

DPexitX:
;ExitCrit			; END CRITICAL SECTION
popf
	; cx != 0 if XMS memory was used for the EMS allocation

	jcxz	short DPexit		; Q: any XMS to free?

	call	ShrinkEMSpool		;  Y:
DPexit:
	ret

DPinvHandleX:
;ExitCrit			; END CRITICAL SECTION
popf
DPinvHandle:
	mov	byte ptr [bp][reg_EAX+1],INVALID_HANDLE
	jmp	short DPexit
DPsaveAreaInUse:
	mov	byte ptr [bp][reg_EAX+1],SAVED_PAGE_DEALLOC
	jmp	short DPexit

DeallocatePages	endp

page
align 16
;***********************************************************************
; GetEMMVersion
;
; ENTRY
;	none
; EXIT
;	AH - OK
;	AL - version number
; DESCRIPTION
;	This routine returns the current version number.
;***********************************************************************
GetEMMVersion	proc	near
	mov	ah,OK
	mov	al,EMM_VERSION
	mov	word ptr [bp.reg_EAX],ax
	ret
GetEMMVersion	endp

page
align 16
;==============================================================================
;==
;== SavePageMap: This routine saves the LIM 3.2 page frame map context for a
;==		 handle.  This includes only windows 0-3.  The data is saved
;==		 in the save_map array internally.
;==
;== Entry: (Protected Mode)
;==	DX = EMM handle
;==
;== Exit:  (Protected Mode)
;==	AH = return code
;==                                                                     LC
;=============================================================================
SavePageMap	proc	near
;
;  Assume success
;
	mov	byte ptr [bp][reg_EAX+1],OK

	cmp	gs:[PF_Base],FREE	;Q: Is there a page frame?
	je	short SaPMswErr		; N: error

;
;  Validate handle
;
	cmp	dx,[total_handles]	;Q: Handle in range?
	jae	short SaPMinvHandle	; N: error

	movzx	ebx,dx			; access handle structure
	mov	edi,[hndl_tbl_ptr]	; (ESI) = pointer to handle table

	.errnz	(SIZE HandleTable_struc-4)
	cmp	ds:[edi+ebx*4].base_PTE_index,FREE  ;Q: Handle in use?
	je	short SaPMinvHandle      ; N: error

;
;  Insure the save area for this handle is not presently being used
;
	mov	dl,NOT FREE
	xchg	save_flag[bx],dl	; mark used

	cmp	dl,FREE			;Q: Already saved?
	jne	short SaPMprevMapSaved	; Y: error

;
;  Access save area
;
	mov	edi,ebx			; esi = bx * 16
	shl	di,4
	.errnz	size HandleSavemap_struc-16

	add	edi,[save_map_ptr]
	add	edi,[p_DATA]

;
;  Access page table
;
	movzx	esi,[EMS_window_location][0]	; get index for page frame
	shl	si,2
	add	esi,[page_tables]

	mov	dx,0Ch
	mov	cx,4
SaPMloop:
	MOVS_DWORD_USING_ES_ESI
	add	si,dx
	dec	cx
	jnz	short SaPMloop

SaPMexit:
	ret

SaPMswErr:
	mov	byte ptr [bp][reg_EAX+1],EMM_SW_MALFUNCTION ; assume error
	jmp	short SaPMexit
SaPMinvHandle:
	mov	byte ptr [bp][reg_EAX+1],INVALID_HANDLE ; assume invalid handle
	jmp	short SaPMexit
SaPMprevMapSaved:
	mov	byte ptr [bp][reg_EAX+1],MAP_PREV_SAVED ; assume error
	jmp	short SaPMexit
SavePageMap	endp

page
align 16
;==============================================================================
;==
;== RestorePageMap: This routine restores the LIM 3.2 page frame map context
;==		    for a handle.  This includes only windows 0-3.  The
;==		    data is restored from the internal save_map array.
;==
;== Entry: (Protected Mode)
;==	DX = EMM handle
;==
;== Exit:  (Protected Mode)
;==	AH = return code
;==                                                                      LC
;=============================================================================
RestorePageMap	proc	near
;
;  Assume success
;
	mov	byte ptr [bp][reg_EAX+1],OK

	cmp	gs:[PF_Base],FREE	;Q: Is there a page frame?
	je	RePMswErr		; N: error

;
;  Validate handle
;
	cmp	dx,[total_handles]	;Q: Handle in range?
	jae	short RePMinvHandle	; N: error

	movzx	ebx,dx			; access handle structure
	mov	edi,[hndl_tbl_ptr]	; (ESI) = pointer to handle table

	.errnz	(SIZE HandleTable_struc-4)
	cmp	ds:[edi+ebx*4].base_PTE_index,FREE  ;Q: Handle in use?
	je	short RePMinvHandle 		    ; N: error

;
;  Insure the save area for this handle is not empty
;
	mov	dl,FREE
	xchg	save_flag[bx],dl	; mark used

	cmp	dl,FREE			;Q: Already saved?
	je	short RePMnoMapSaved	; Y: error

;
;  Access save area
;
	mov	esi,ebx			; esi = bx * 16
	shl	si,4
	.errnz	size HandleSavemap_struc-16

	add	esi,[save_map_ptr]
	add	esi,[p_DATA]

;
;  Access page table
;

	movzx	edi,[EMS_window_location][0]	; get index for page frame
	shl	di,2
	add	edi,[page_tables]

	mov	bx,1000h
	mov	cx,4
RePMloop:
	LODS_DWORD_PTR_ES_ESI
	STOS_DWORD_PTR_ES_EDI
	add	eax,ebx
	STOS_DWORD_PTR_ES_EDI
	add	eax,ebx
	STOS_DWORD_PTR_ES_EDI
	add	eax,ebx
	STOS_DWORD_PTR_ES_EDI
	dec	cx
	jnz	short RePMloop

	mov	eax,cr3
	mov	cr3,eax

RePMexit:
	ret

RePMswErr:
	mov	byte ptr [bp][reg_EAX+1],EMM_SW_MALFUNCTION ; assume error
	jmp	short RePMexit
RePMinvHandle:
	mov	byte ptr [bp][reg_EAX+1],INVALID_HANDLE ; assume invalid handle
	jmp	short RePMexit
RePMnoMapSaved:
	mov	byte ptr [bp][reg_EAX+1],NO_MAP_SAVED ; assume error
	jmp	short RePMexit

RestorePageMap	endp

page
align 16
;***********************************************************************
; GetPageMappingRegisterIOArray
;
; ENTRY
;	ES:DI - pointer to the users table
; EXIT
;	AH - INVALID_FUNCTION
; DESCRIPTION
;	This routine is no longer supported.
;***********************************************************************
GetPageMappingRegisterIOArray	proc	near

	mov	byte ptr [bp.reg_EAX + 1],INVALID_FUNCTION
	ret
GetPageMappingRegisterIOArray	endp

page
align 16
;***********************************************************************
; GetLogicalToPhysicalPageTrans
;
; ENTRY
;	ES:DI - pointer to the users table
;	DX - EMM handle
; EXIT
;	AH - INVALID_FUNCTION
; DESCRIPTION
;	This routine is no longer supported.
;***********************************************************************
GetLogicalToPhysicalPageTrans	proc	near

	mov	byte ptr [bp.reg_EAX + 1],INVALID_FUNCTION
	ret
GetLogicalToPhysicalPageTrans	endp

page
align 16
;***********************************************************************
; GetEMMHandleCount
;
; ENTRY
;	none
; EXIT
;	BX - handle count
;	AH - OK
; DESCRIPTION
;	This routine returns the number of active handles.
;***********************************************************************
GetEMMHandleCount	proc	near
	mov	bx,gs:[handle_count]
	mov	word ptr [bp.reg_EBX],bx
	mov	byte ptr [bp.reg_EAX + 1],OK
	ret
GetEMMHandleCount	endp

page
align 16
;***********************************************************************
; GetEMMHandlePages
;
; ENTRY
;	DX - handle
; EXIT
;	BX - number of 16k pages allocated to this handle
;	AH - return code
; DESCRIPTION
;	This routine returns the number of 16k EMS pages allocated to the
;	provided handle.
;***********************************************************************
GetEMMHandlePages	proc	near

		; The handle is validated.  SI has the handle struct index.
	call	ValidateHandle
	jc	short GHP_return_code
	movzx	esi,dx

		; The number of PTE indexes allocated for this handle is loaded
		; and divided by 4 to change it into 16k pages from 4k pages.
	MOV	EBX, [hndl_tbl_ptr]
	MOV	BX, DS:[EBX+ESI*4].number_PTEs
	shr	bx,2
	mov	word ptr [bp.reg_EBX],bx
	mov	byte ptr [bp.reg_EAX + 1],OK

GHP_return_code:
	ret
GetEMMHandlePages	endp

page
align 16
;***********************************************************************
; GetAllEMMHandlePages
;
; ENTRY
;	ES:DI - pointer to the users table
; EXIT
;	BX - number of handles in the table
;	AH - return code
; DESCRIPTION
;	This routine returns an array which lists all of the active handles
;	and how many 16k EMS pages are allocated to each of them.  The data
;	is placed in a user provided buffer.
;***********************************************************************
GetAllEMMHandlePages	proc	near

;	The user's segment value is changed into a selector and
;	the address is placed into ES:DI.

	movzx	eax,word ptr [bp.reg_ES]
	shl	eax,4
	movzx	edi,di
	add	edi,eax
;QEMS	push	DATA32_GSEL
;QEMS	pop	es

;EnterCrit			; BEGIN CRITICAL SECTION
pushf
cli
	mov	cx,gs:[handle_count]
	mov	word ptr [bp.reg_EBX],cx
	xor	esi,esi
	dec	si
;QEMS	mov	esi,0FFFFh		; (SI) = -1, (ESI hi) = 0
	mov	ebx,[hndl_tbl_ptr]

;	If this handle is not being used then don't report it.

GAHP_loop_top:
	inc	si
	cmp	[ebx+esi*4].base_PTE_index,FREE
	je	short GAHP_loop_top

;	The handle index is converted into its appropriate user
;	handle number and stored.

	mov	es:[edi],si
	add	edi,2

;	The number of 16k pages for this handle is returned.

	mov	ax,[ebx+esi*4].number_PTEs
	shr	ax,2
	mov	es:[edi],ax
	add	edi,2
	loop	GAHP_loop_top
;ExitCrit			; END CRITICAL SECTION
popf
	mov	byte ptr [bp.reg_EAX + 1],OK
	ret
GetAllEMMHandlePages	endp

page
align 16
;==============================================================================
;==
;== GetSetPageMap: This routine saves/restores the complete mapping context
;==		   to/from an external buffer.
;==
;== Entry: (Protected Mode)
;==	AL = Subfunction code
;==	     0 : get page map
;==	     1 : set page map
;==	     2 : get and Set page map
;==	     3 : return size of page map
;==
;== Exit:  (Protected Mode)
;==	AH = return code
;==                                                                      LC
;=============================================================================
GSPMvecTable	label	word
  dw offset _TEXT:GSPM_get_function
  dw offset _TEXT:GSPM_set_function
  dw offset _TEXT:GSPM_set_get_function
  dw offset _TEXT:GSPM_return_function
GSPMFuncNum	equ	($-GSPMvecTable)/2
align 16
GetSetPageMap	proc	near
;
;  The subfunction number is checked to see if it is valid.
;
	cmp	al,GSPMFuncNum			;Q: Invalid function?
	jae	short GSPMinvFunc		; Y: error
	mov	byte ptr [bp][reg_EAX+1],OK	; N: assume success
;
;  The get and set functions will use a zero based selector in ES for addressing
;  the user's buffer.  The jump table is used to execute the subfunction.
;
	movzx	esi,al
	add	si,si
	jmp	cs:GSPMvecTable[si]
align 16
;
;  If the subfunction just wants the size of the save area then just return it.
;
GSPM_return_function:
	mov	al,byte ptr [context_save_area_size]
	mov	byte ptr [bp.reg_EAX],al
GSPMexit:
	ret
align 16
;
;  If a Get function, save mapping in user buffer
;
GSPM_get_function:
	movzx	eax,word ptr [bp.reg_ES]
	shl	eax,4
	movzx	edi,di
	add	edi,eax
	jmp	SaveWindowMapping
align 16
GSPM_set_get_function:
	movzx	eax,word ptr [bp.reg_ES]
	shl	eax,4
	movzx	edi,di
	add	edi,eax

	call	SaveWindowMapping

;	If this is a Set function then set up the user's buffer in
;	ES:ESI and make the call.

GSPM_set_function:
	movzx	esi,word ptr [bp.reg_ESI]
	movzx	eax,word ptr [bp.reg_DS]
	shl	eax,4
	add	esi,eax
	jmp	RestoreWindowMapping

GSPMinvFunc:
	mov	byte ptr [bp][reg_EAX+1],INVALID_SUBFUNCTION ; assume error
	jmp	short GSPMexit
GetSetPageMap	endp

_TEXT	ends
END


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\emm386\emminit.asm ===
.386p
page 58,132
;******************************************************************************
	title	EMMINIT - Expanded Memory Manager initialization
;******************************************************************************
;
;   (C) Copyright MICROSOFT Corp. 1986
;   (C) Copyright COMPAQ Computer Corp. 1986
;
;   Title:	EMM386.EXE - MICROSOFT Expanded Memory Manager 386 Driver
;
;   Module:	EMMINIT - Expanded Memory Manager initialization routine
;
;   Version:	0.05
;
;   Date:	November 9, 1988
;
;   Author:	Daniel J. Mazina
;
;******************************************************************************
;
;	Change Log:
;
;	DATE	 REVISION	Description
;	-------- --------	--------------------------------------------
;
;******************************************************************************
;   Functional Description:
;	This module initializes the data structures for the EMM.
;******************************************************************************
.lfcond
page
;******************************************************************************
;			P U B L I C   D E C L A R A T I O N S
;******************************************************************************
public	EMM_Init

page
;******************************************************************************
;			I N C L U D E S
;******************************************************************************
include	vdmseg.inc
include page.inc
include emmfunct.inc
include	emmdata.inc

	page
LAST	segment
	assume	cs:LAST,ds:_DATA,es:_DATA,gs:R_CODE

;******************************************************************************
;	EMM_Init - initialization routine for EMM.
;
;	ENTRY:
;		DS - _DATA segment
;		GS - R_CODE segment
;
;	EXIT:	EMM vector initialized.
;		EMM data structures initialized
;******************************************************************************
EMM_Init	proc	near

		; The registers are saved and the index registers are cleared
		; so that they may be used for 32-bit scaling.
	pushad
	xor	esi,esi
	xor	edi,edi

ifdef QEMS
		; The amount of memory in KB is converted into 4k pages
		; and stored.
	mov	cx,[pool_size]
	shr	cx,2
	mov	gs:[total_4k_pages],cx
	mov	gs:[free_4k_pages],cx
	MOV	GS:[free_pages], CX	; Original free 4K pages	;@PIW
	mov	[first_free_handle_space],FIRST_HANDLE_PTE

		; The high memory area is check to see if there is any.
		; If some is available, then store the starting address
		; in EAX with the number of 4k pages in CX.
	mov	cx,[hi_size]
	shr	cx,2
	jcxz	short EI_check_extended
	mov	eax,[high_memory_address]
	shr	eax,12
	mov	gs:[starting_high_mem_PTE],ax
	mov	gs:[number_high_mem_PTEs],cx

		; The extended memory area is checked to see if there is any.
		; If some is available, then store the starting address
		; in EAX with the number of 4k pages in CX.
EI_check_extended:
	mov	cx,[ext_size]
	shr	cx,2
	jcxz	short EI_setup_handle_zero				;LEO
	mov	eax,[ext_memory_address]
	shr	eax,12
	mov	gs:[starting_ext_mem_PTE],ax
	mov	gs:[number_ext_mem_PTEs],cx
		; The conventional memory below 640k is now allocated to
		; handle 0.
EI_setup_handle_zero:
IFDEF SEP092889
	inc	gs:[handle_count]
	MOV	ESI, [hndl_tbl_ptr]
	MOV	DS:[ESI].base_PTE_index, FIRST_HANDLE_PTE
	mov	ax,[end_of_base_memory_PTE]
	MOV	DX, [strtng_bs_wndw_PTE] ; STARTING_BASE_WINDOW_PTE
	sub	ax, DX
	MOV	DS:[ESI].number_PTEs, AX
	add	gs:[total_4k_pages],ax

		; The conventional memory pool below 640k is now set up.
	mov	gs:[starting_conv_mem_PTE], DX ; STARTING_BASE_WINDOW_PTE
	mov	gs:[number_conv_mem_PTEs],ax

	cmp	ax,0
	je	SHORT EI_init_continue
		; The window mapping for handle zero is now done.  First
		; the beginning window for handle zero is found.
	xor	esi,esi
	mov	cx,TOTAL_EMS_WINDOWS
EI_find_low_window:
	cmp	EMS_window_location[esi*2], DX ; STARTING_BASE_WINDOW_PTE
	je	short EI_map_in_handle_zero
	inc	si
	loop	EI_find_low_window

		; Now the actual handle and logical 4k page pairs are copied
		; in.  BX is the logical page which is 4 for every window.
EI_map_in_handle_zero:
	mov	cx,ax
	shr	cx,2
	xor	bx,bx
EI_init_windows:
	mov	BYTE PTR EMS_window[esi*2+ESI].handle,0
	mov	EMS_window[esi*2+ESI].logical_4k_page,bx
	inc	si
	add	bx,4
	loop	EI_init_windows

		; The amount of memory in bytes needed for the window context
		; save area is calculated and stored for easy reference.
ENDIF
endif
EI_init_continue:
	mov	ax,[number_EMS_windows]
	CMP	[xma2ems], TRUE		; Q: Is it in XMA2EMS mode?	;@PIW
	JNE	SHORT EI_normal		; N:				;@PIW
	MOV	AX, 6			; Save all of them		;@PIW
EI_normal:								;@PIW
ifndef QEMS
	shl	ax,2			; context size
	.errnz  (size EMSmap_struc)-4
else
	MOV	CX, AX			; AX *= 3
	ADD	AX, AX			; Faster than shift left?	;@PIW
	ADD	AX, CX
endif
	add	ax,4			; add header
 	mov	[context_save_area_size],ax

		; The current register set is set to 0 and is activated.
	mov	[current_register_set],0
	mov	register_set[0].active,TRUE

		; The return code in AX is cleared along with the carry.
EIexit:
	popad
	ret
EMM_Init	endp

LAST	ends
	END

=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\emm386\emm40.asm ===
.386p
page	58,132
;******************************************************************************
	title	 emm40.asm - EMM function handlers
;******************************************************************************
;
; (C) Copyright MICROSOFT Corp. 1988-1991
; (C) Copyright COMPAQ Computer Corp. 1988-1991
;
; Title:	EMM386.EXE - MICROSOFT Expanded Memory Manager 386 Driver
;		EMMLIB.LIB - Expanded Memory Manager Functions Library
;
; Module:	EMS 4.0 Function Handler
;
; Version:	1.00
;
; Date: 	December 15, 1988
;
; Authors:	Dan Mazina (original)
;		Dick Vail
;		Leo Cohen (designed and implemented memory management and
;			   mapping functions to improve performance) LC
;******************************************************************************
;
;   Change log:
;
;     DATE    REVISION			DESCRIPTION
;   --------  --------	-------------------------------------------------------
;   12/15/88	1	initial code
;   03/16/89  4.00      Change GetMappablePhysicalArray for new window order.
;
;   01/14/91  M001	In performdatamove fix up pointers if the direction
;			of the move is reversed after completing the dword
;			moves
;******************************************************************************
;
; AlterPageMapAndCall bug fix from Toshiba
;
; DTS0514 - 05/18/92
;
;	One recent change to the driver is the way the EMS function
;       calls eventually get into protected mode and into this source.
;
;       In the previous method, the INT 67h issued in virtual mode caused
;       the driver to enter the EMM_rEntry routine in EMM.ASM.  That routine
;       simply reflected the interrupt to the protected mode handler
;       AlterPageMapAndCall (in this routine).  This routine makes various
;       assumptions about the layout of user's (virtual mode) stack 
;       in order to modify it.
;
;       In the new method, the INT 67h issued in virtual mode once again 
;       takes the flow of execution to the EMM_rEntry routine in EMM.ASM.  
;       However, this routine has been rewritten to push GS on the
;       user's stack as well as make a far call to the EMM_rEntryFar
;       routine in the new source file UMBSEG.ASM.  These actions place
;       3 extra words on the user's stack, 3 words that AlterPageMapAndCall
;       (APMC) was not aware of.  Thus, this routine screwed up the return 
;       addresses on the user's stack and quickly took the machine into
;       the weeds.
;
;       In order to correctly modify this source you have to fully understand
;       the flow of execution for the APMC service in the old EMM386.
;       When APMC is entered the first time, it modifies the user's stack
;       so that the requested far address is at the time followed by the
;       user's flags register, the idea being that an eventual IRET
;       (executed in virtual mode) will take the flow of execution to the
;       desired EMS page location where the user's program is (e.g. 
;       D000:xxxx).  APMC also saves the EMS window mapping on the stack.
;       Farther down on the stack APMC places another return address
;       on the stack, that of the AlterAndCallEntry routine in EMM.ASM.  
;       Thus, when the user's called program issues a RETF, control passes
;       to this routine which issues another INT 67h in virtual mode
;       with AX=56FF.  APMC is once again entered by the same route
;       (i.e., through EMM_rEntry and EMM_rEntryFar, etc.) placing yet
;       another 3 extra words on the user's stack.  When APMC sees AL=FF,
;       it knows that it is time to clean up the user's stack, so it
;       throws away the return address to AlterAndCallEntry's 
;       AlterAndCallReturn label (where a friendly HLT instruction awaits
;       all who dare to pass).  Next, the saved EMS window mapping is
;       restored and removed from the user's stack.  Then APMC exits and
;       eventually returns to virtual mode, where the application's
;       return address is waiting to be popped and transferred to.
;
;	The way I fixed this major bug is as follows.  MS really screwed
;       up 2 things.  1) APMC always expected that an IRET would be 
;       executed once the protected mode interrupt handler returned the
;       CPU to virtual mode.  However, MS changed the EMM_rEntry routine
;       to call EMM_rEntryFar, so a RETF is actually executed (thus
;       leaving the flags on the stack).  In order to fix this problem
;       (and make changes local to APMC), I modified APMC to "push"
;       a copy of GS and the return address of EMM_rEntry so that
;       control will eventually pass back to that routine where an
;       IRET will take control (in virtual mode) to the user's
;       program (in the EMS page frame).  Then, when that program
;       issues a RETF control will pass on to the AlterAndCallEntry
;       subroutine which issues another INT 67h to restore the
;       saved window mapping and clean up the user's stack.
;
;       2) The APMC routine needs to be aware of the 3 extra words 
;       on the user's stack due to the push of GS and the far call from 
;       the EMM_rEntry routine.  Furthermore, when APMC is entered 
;       the second time (with AX=56FF) there are 2 copies of EMM_rEntry's 
;       return address and GS on the user's stack (one before and one 
;       after the saved window mapping data, 6 words in all).  So, I
;       modified APMC in a couple places to be aware of the "new"
;       stack layout so that it can modify return addresses correctly.
;
;******************************************************************************
;
;   Functional Description:
;	This module implements all of the functions for the EMM interface.
;
;******************************************************************************

page
;******************************************************************************
; PUBLICS
;******************************************************************************
public	GetSetPartialPageMap
public	MapUnmapMultipleHandlePages
public	ReallocatePages
public	GetSetHandleAttribute
public	GetSetHandleName
public	GetHandleDirectory
public	AlterPageMapAndJump
public	AlterPageMapAndCall
public	MoveExchangeMemoryRegion
public	GetMappablePhysicalAddress
public	GetExpandedMemoryHWInfo
public	AllocateStandardRawPages
public	AlternateMapRegisterSet
public	GetRegisterSet
public	SetRegisterSet
public	PrepareForWarmBoot
public	EnableDisableOSFunctions
public	FormLinearAddress
;******************************************************************************
; INCLUDES
;******************************************************************************
include vdmseg.inc
include vdmsel.inc
include vm386.inc
include	emm386.inc
include emmfunct.inc
include emmdata.inc
include	page.inc

ifdef BETA
include emm40.pub
endif
;******************************************************************************
; DEFINES
;******************************************************************************

;******************************************************************************
; EXTERNALS
;******************************************************************************
R_CODE	segment
	extrn	AlterAndCallEntry:far
	extrn	AlterandCallReturn:far
R_CODE	ends

_TEXT	segment
	extrn	AllocatePages:near
	extrn	AllocEMSMem:near
	extrn	AddFreeEMS:near
	extrn	MoveHandleSpace:near
	extrn	MapInWindows:near
	extrn	SaveWindowMapping:near
	extrn	RestoreWindowMapping:near
	extrn	GetUnallocatedPageCount:near
	extrn	GetModifyUsersStack:near
	extrn	ActivateRegSet:near
	extrn	ValidateHandle:near
	extrn	GrowEMSPool:near
	extrn	ShrinkEMSpool:near
ifdef QEMS
	extrn	ShiftHandles:near
	extrn	GarbageCollect:near
	extrn	Get4kPages:near
	extrn	FindWindowIndex:near
	extrn	SetWindows:near
	extrn	FindNextFreeHandleSpace:near
	extrn	SetPT0Cntxt:near
	extrn	RestorePT0Cntxt:near
endif
_TEXT	ends

page
;******************************************************************************
; SEGMENTS
;******************************************************************************

_TEXT	segment
	assume cs:_TEXT,ds:_DATA,es:_DATA,gs:R_CODE
even
;==============================================================================
;==
;== GetSetPartialPageMap: This routine saves/restores a partial mapping context
;==		          to/from an external buffer.
;==
;== Entry: (Protected Mode)
;==	AL = Subfunction code
;==	     0 : get page map
;==	     1 : set page map
;==	     2 : return save size
;==	BX = number of entries to save for function 2
;==
;== Exit:  (Protected Mode)
;==	AH = return code
;==	AL = size of the save area for function 2
;==                                                                   LC
;=============================================================================
GSPPMvecTable	label	word
  dw OFFSET _TEXT:GetPartialMap
  dw OFFSET _TEXT:SetPartialMap
  dw OFFSET _TEXT:GSPPM_return_function
GSPPMFuncNum	equ	($-GSPPMvecTable)/2
align 16
GetSetPartialPageMap	proc	near
;
;  Assume success
;
	mov	byte ptr [bp][reg_EAX+1],OK
;
;  The subfunction number is checked to see if it is valid
;
	cmp	al,GSPPMFuncNum
	jae	short GSPPMinvFunc
;
;  The jump table is used to execute the subfunction
;
	movzx	si,al
	add	si,si
	jmp	GSPPMvecTable[si]
align 16
;
;  The number of windows is checked to see if it is valid.
;
GSPPM_return_function:
	cmp	bx,[number_EMS_windows]
	ja	short GSPPMinvPhyPage
;
;  There is a 4 byte header and 16 bytes per window
;
	.errnz (size EMSmap_struc)-4
	shl	bl,2			; Each segment needs 4 bytes
	add	bl,4			; Plus 4 bytes header
	mov	byte ptr [bp.reg_EAX],bl

GSPPMexit:
	ret

GSPPMinvFunc:
	mov	byte ptr [bp][reg_EAX+1],INVALID_SUBFUNCTION ; assume invalid
	jmp	short GSPPMexit
GSPPMinvPhyPage:
	mov	byte ptr [bp][reg_EAX+1],PHYS_PAGE_RANGE ; assume invalid
	jmp	short GSPPMexit
GetSetPartialPageMap	endp

align 16
;==============================================================================
;==
;== GetPartialMap: This routine gets a partial page map as defined by
;==		   ES:ESI and saves it into the user's buffer at ES:EDI.
;==
;== Entry: (Protected Mode)
;==	[BP] DS:SI = user's pointer to a list of windows to get
;==	[BP] ES:DI = user's pointer to save the page map in
;==
;== Exit:  (Protected Mode)
;==	AH = return code
;==                                                                  LC
;=============================================================================
GetPartialMap	proc	near
;
;  The user's save buffer is changed into a 32 bit
;
	movzx	eax,[bp.reg_ES]
	shl	eax,4
	movzx	edi,di
	add	edi,eax
;
;  The user's window list is changed into a 32 bit
;
	movzx	esi,[bp.reg_DS]
	shl	esi,4
	movzx	eax,word ptr [bp.reg_ESI]
	add	esi,eax
;
;  Header information is placed in buffer
;
	mov	ax,'C'+'O'+'M'+'P'+'A'+'Q'
	shl	eax,16

	lods	word ptr es:[esi]
	STOS_DWORD_PTR_ES_EDI

	mov	cx,ax
	jcxz	short GPMexit

	cmp	cx,[number_EMS_windows]
	ja	short GPMinvWinIndex

	mov	ebx,[page_tables]
	xor	eax,eax
GPMloop:
;
;  Save specified windows' context
;
	lods	word ptr es:[esi]	; get window segment address

	or	al,al			;Q: Is it 4K bounded?
	jnz	short GPMinvPhyPage	; N: error
	xchg	ah,al			; Y: PTE index

	cmp	EMSsegLoc[eax],-1	;Q: Is this a valid window segment?
	je	short GPMinvPhyPage	; N: error

	mov	edx,es:[ebx][eax*4]	; get PTE
	xor	dl,dl
	or	eax,edx			; EAX = PTE + AL=16K block

	STOS_DWORD_PTR_ES_EDI		; save window mapping
	xor	eax,eax

	dec	cx
	jnz	short GPMloop

GPMexit:
	ret

GPMinvWinIndex:
	mov	byte ptr [bp][reg_EAX+1],WINDOW_INDEX_RANGE ; assume bad range
	jmp	short GPMexit
GPMinvPhyPage:
	mov	byte ptr [bp][reg_EAX+1],PHYS_PAGE_RANGE ; assume invalid
	jmp	short GPMexit

GetPartialMap	endp

align 16
;==============================================================================
;==
;== SetPartialMap: This routine restore a partial page map as defined by
;==		   ES:ESI.
;==
;== Entry: (Protected Mode)
;==	[BP] DS:SI = user's pointer to a list of windows to get
;==
;== Exit:  (Protected Mode)
;==	AH = return code
;==                                                                  LC
;=============================================================================
SetPartialMap	proc	near
;
;  The user's restore buffer pointed to by a 32 bit linear address
;
	movzx	esi,[bp.reg_DS]
	shl	esi,4
	movzx	eax,word ptr [bp.reg_ESI]
	add	esi,eax
;
;  The number of entries to read is loaded into CX and validated.
;
	lods	dword ptr es:[esi]
	mov	cx,ax			; save the number of entries

	shr	eax,16
	cmp	ax,'C'+'O'+'M'+'P'+'A'+'Q'
	jne	short SPMinvWinIndex

	jcxz	short SPMexit		; if no entries, nothing to map

	cmp	cx,[number_EMS_windows] ;Q: Is it out of range?
	ja	short SPMinvWinIndex	; Y: error

	mov    	ax,P_SIZE
	mov	edx,eax
	mov	ebx,[page_tables]
	push	bp
	mov	bp,P_AVAIL
SPMloop:
;
;  The window index is loaded into DI first and verified.
;
	lods	dword ptr es:[esi]	; get PTE index and PTE
	movzx	edi,al			; PTE index

	cmp	[EMSsegLoc][di],-1	;Q: Is this a valid window segment?
	je	short SPMinvPhyPage	; N: exit

	xor	al,al
	or	ax,bp

	mov	es:[ebx][edi*4],eax
	inc	di
	add	eax,edx
	mov	es:[ebx][edi*4],eax
	inc	di
	add	eax,edx
	mov	es:[ebx][edi*4],eax
	inc	di
	add	eax,edx
	mov	es:[ebx][edi*4],eax

	dec	cx
	jnz	short SPMloop
	pop	bp

SPMclearTLB:
	mov	eax,cr3
	mov	cr3,eax

SPMexit:
	ret

SPMinvWinIndex:
	mov	byte ptr [bp][reg_EAX+1],WINDOW_INDEX_RANGE ; assume invalid
	jmp	short SPMexit
SPMinvPhyPage:
	pop	bp
	mov	byte ptr [bp][reg_EAX+1],PHYS_PAGE_RANGE ; assume bad range
	jmp	short SPMclearTLB

SetPartialMap	endp


page
align 16
;==============================================================================
;==
;== MapUnmapMultipleHandlePages:  This routine takes the entries in DS:SI and
;==				  maps them into the current windows.  The first
;==				  value in DS:SI is the EMS page number followed
;==				  by the window index/window segment address.
;==				  The format is determined by AL.  If the
;==				  logical page is 0FFFFh then the window is
;==				  unmapped by changing its mapping to be 1 to 1.
;==
;== Entry: (Protected Mode)
;==	AL     	   = window location format, 0-window index, 1-window segment
;==	DX 	   = handle
;==	CX 	   = number of entries to map into the windows
;==	[BP] DS:SI = pointer to the array of entries to map in
;==
;== Exit:  (Protected Mode)
;==	AH = return code
;==                                                                   LC
;=============================================================================
MapUnmapMultipleHandlePages	proc	near
;
;  Assume success
;
	mov	byte ptr [bp][reg_EAX+1],OK
;
;  The subfunction number is checked.
;
	cmp	al,2
	jae	short MUMHPinvFunc

;
;  Validate handle
;
	cmp	dx,[total_handles]	;Q: Handle in range?
	jae	short MUMHPinvHandle	; N: error

	movzx	edx,dx			; access handle structure
	shl	dx,2
	add	edx,[hndl_tbl_ptr]	; (EDX) = pointer to handle structure
	.errnz	(SIZE HandleTable_struc-4)

	cmp	ds:[edx].base_PTE_index,FREE ;Q: Handle in use?
	je	short MUMHPinvHandle	     ; N: error

;
;  The user's segment value is changed into a linear address and placed into
;  ES:ESI for the source.
;
	movzx	esi,[bp.reg_DS]
	shl	esi,4
	movzx	ebx,word ptr [bp.reg_ESI]
	add	esi,ebx
;
;  ES:ESI points to the array to map in.  AL is the subfunction code.
;  DX is a pointer to the handle structure.  CX is the # of entries to process.
;
	call	MapInWindows

MUMHPexit:
	ret

MUMHPinvFunc:
	mov	byte ptr [bp][reg_EAX+1],INVALID_SUBFUNCTION ; invalid
	jmp	short MUMHPexit
MUMHPinvHandle:
	mov	byte ptr [bp][reg_EAX+1],INVALID_HANDLE ; invalid handle
	jmp	short MUMHPexit

MapUnmapMultipleHandlePages	endp

page
align 16
;==============================================================================
;==
;== ReallocatePages: This routine adjusts the number of 16k EMS pages allocated
;==		     to a handle to match the value in BX.  This may include
;==		     decreasing the current amount, increasing it or not
;==		     modifing it at all.
;==
;== Entry: (Protected Mode)
;==	BX = new number of 16k EMS pages
;==	DX = the EMS handle
;==
;== Exit:  (Protected Mode)
;==	[BP]:AH = return code
;==                                                                   LC
;=============================================================================
ReallocatePages	proc	near
;
;  Assume success
;
	mov	byte ptr [bp][reg_EAX+1],OK

;
;  Validate handle
;
	cmp	dx,[total_handles]	;Q: Handle in range?
	jae	RPinvHandle		; N: error

	movzx	esi,dx			; handle index in ESI
	mov	edx,esi
	shl	si,2
	.errnz	(SIZE HandleTable_struc-4)
	add	esi,[hndl_tbl_ptr]	; (ESI) = pointer to handle table

	cmp	ds:[si].base_PTE_index,FREE	;Q: Is handle free?
	je	RPinvHandle		    	; Y: error
;
;  Check reallocation count
;
	test	bh,0C0h
	jnz	RPnotEnoughTotEMS
;
;  Number of needed pages is calculated in CX
;
	mov	cx,ds:[si].number_PTEs
	shr	cx,2
	sub	cx,bx			;Q: Count grow?
	jl	short RPgrow		; Y: growing
	je	RPexit			; N: done (stayed the same!)

;EnterCrit			; BEGIN CRITICAL SECTION
pushf
cli
	shl	bx,2
	xchg	bx,[si].number_PTEs	; set new size, maintain old one
	sub	[UsedEMSPages],cx	; increase number of used EMS pages
	movzx	edi,[si].base_PTE_index	; start index for this handle
	add	di,bx			; end of old size
	cmp	di,[TopOfUsedEMSspace]	;Q: Is this handle on top?
	jne	short RPcont1		; N: continue
	sub	di,bx			; Y: re-adjust top of used EMS space
	add	di,[si].number_PTEs	; new top of used EMS space
	mov	[TopOfUsedEMSspace],di
	jmp	short RPcont2
RPcont1:
	sub	di,bx			; start of handle space
	add	di,[si].number_PTEs	; start index for deallocation
RPcont2:
	shl	di,2			; make it an offset
	add	edi,[page_directory]	; make it an address
	mov	edx,10h			; size of 4 PTEs
	xor	bx, bx
RPfreePages:
	mov	ax,not fEMSPageAllocated
	xchg	ax, word ptr es:[edi]
	and	word ptr es:[edi], ax
	bt	ax, fXMSPageAllocatedBit; from dynamic XMS?
	rcl	bl, 1			; CY to bl
	or	bh, bl			; bh = XMS flag
	add	edi,edx			; next EMS page
	dec	cx			;Q: Any more?
	jnz	short RPfreePages	; Y: deallocate more

;ExitCrit			; END CRITICAL SECTION
popf
	or	bh, bh			;Q: Any XMS pages released?
	jz	short RPexit		; N:

	call	ShrinkEMSpool		; Y: give them back
	jmp	short RPexit		; we're done!
;
;  Need to grow handle by CX 4K pages
;
RPgrow:
;
;  Get total EMS pages
;
	mov	ax,[TopOfHandleSpace]	; top of handle space
	sub	ax,FIRST_HANDLE_PTE	; subtract start of handle space
	shr	ax,2

	cmp	ax,bx			;Q: Enough free EMS pages?
	jb	short RPnotEnoughTotEMS	; N: error
;
;  Get free EMS pages (at this time!)
;
	mov	ax,[TopOfFreeEMSspace]	; top of free EMS handle space
	sub	ax,FIRST_HANDLE_PTE	; subtract start of handle space
	shr	ax,2			; convert to 16K pages
	sub	ax,[UsedEMSPages]	; number of free EMS pages

	neg	cx			; number of EMS pages needed to grow
	cmp	ax,cx			;Q: Enough free EMS pages to grow?
	jae	short RPgotEnough	; Y:

	mov	bx, cx			; N: Try to grow EMS space by CX pages
	sub	bx, ax			;    less already free pages
	call	GrowEMSPool
	jc	short RPnotEnoughFreeEMS

RPgotEnough:

;EnterCrit			; BEGIN CRITICAL SECTION
pushf
cli
;
;  If this handle is on top of the used EMS space, just go to add memory
;
	mov	dx,cx			 	; save number of EMS pages to grow
	movzx	edi,ds:[si].base_PTE_index	; starting index for handle
	mov	bx,ds:[si].number_PTEs		; number of PTEs
	add	di,bx			; entry after this handle
	cmp	di,[TopOfUsedEMSspace]	;Q: Is this handle on top?
	jae	short RPallocEMS	; Y: don't need to move handle
;
;  Move handle space for this handle to the top of used EMS space
;	BX  = number of slots to move the PTEs
;	DI  = starting PTE entry to move
;	ECX = page directory linear address
;
	sub	di,bx			; starting index for this handle
	mov	ecx,[page_directory]
	call	MoveHandleSpace
	mov	di,[TopOfUsedEMSspace]
	mov	ds:[si].base_PTE_index,di	; starting index for handle
	add	di,bx				; new top of Used EMS space
	mov	[TopOfUsedEMSspace],di

RPallocEMS:
;
;  Allocate necessary pages to this handle
;	BX  = Number of PTE's requested
;	SI  = handle structure pointer
;
;  because AllocEMSMem is being called with INTs OFF, there is no chance that
;  another handle space will be located above the reallocated handle
;
	mov	bx,dx
	call	AllocEMSMem
;
;  If CY is set, not enough EMS pages were found!  Even though we checked above,
;  because this routine is re-entrant, it could have changed.
;
	jc	short RPnotEnoughFreeEMSX

;ExitCrit			; END CRITICAL SECTION
popf

RPexit:
	ret

RPnotEnoughTotEMS:
	mov	byte ptr [bp][reg_EAX+1],NOT_ENOUGH_EXT_MEM
	jmp	short RPoriginalCount
RPnotEnoughFreeEMSX:
;ExitCrit			; END CRITICAL SECTION
popf
RPnotEnoughFreeEMS:
	mov	byte ptr [bp][reg_EAX+1],NOT_ENOUGH_FREE_MEM
RPoriginalCount:
	mov	bx, [si].number_PTEs		; on failure, return original
	shr	bx, 2				; page count in BX
	mov	word ptr [bp][reg_EBX], bx
	jmp	short RPexit
RPinvHandle:
	mov	byte ptr [bp][reg_EAX+1],INVALID_HANDLE
	jmp	short RPexit
ReallocatePages	endp

page
align 16
;******************************************************************************
; GetSetHandleAttribute
;
; ENTRY
;	AL - subfunction number, 0 - Get, 1 - Set, 2 - capabilities
;	DX - handle for functions 0 & 1 (get/set attributes)
; EXIT
;	AH - return code
;	AL - zero for function 2 (get attribute capabilities)
; DESCRIPTION
;	This function returns invalid for the Get and Set subfunctions
;	as CEMM only supports volatile handles. For function 3, AL is set
;	to zero to indicate that all handles are volatile.
;***********************************************************************
GetSetHandleAttribute	proc	near

		; The subfunction number is checked.
	cmp	al,2
	ja	short GSHA_invalid_function
	jb	short GSHA_not_supported

		; If the function is to get the attribute capabilities
		; then return 0 in AL to indicate all handles are volatile.
	mov	byte ptr [bp.reg_EAX],0h
	mov	byte ptr [bp.reg_EAX + 1],OK
	jmp	short GSHA_return_code

		; Functions 0 and 1 are not supported.
GSHA_not_supported:
	mov	byte ptr [bp.reg_EAX + 1],NOT_SUPPORTED
	jmp	short GSHA_return_code

		; Function numbers greater then 2 are not defined.
GSHA_invalid_function:
	mov	byte ptr [bp.reg_EAX + 1],INVALID_SUBFUNCTION

GSHA_return_code:
	ret
GetSetHandleAttribute	endp

page
align 16
;******************************************************************************
; GetSetHandleName
;
; ENTRY
;	AL - subfunction number, 0 - Get, 1 - Set
;	DX - handle index
;	ES:DI - user's data area for the handle's name in function 0
;	DS:SI - user's data area for the handle's name in function 1
; EXIT
;	AH - return code
; DESCRIPTION
;	This routine either set or gets the name of a handle.  All names
;	are 8 bytes long where all nulls in the name indicate that it has
;	not been set.
;***********************************************************************
GetSetHandleName	proc	near

		; The subfunction number is checked to see if it is valid.
	cmp	al,2
	jb	short GSHN_check_function
	mov	byte ptr [bp.reg_EAX + 1],INVALID_SUBFUNCTION
	jmp	GSHN_return_code

GSHN_check_function:
		; The handle is validated.  SI has the handle struct index.
	; CY = !ValidateHandle(DX);
	call	ValidateHandle
	jc	GSHN_return_code
	mov	esi,edx
	cmp	al,0
	je	short GSHN_get_name

		; The Set Handle's Name function is being done.
		; The handle index in SI is shifted to DI.
	mov	edi,esi

		; The user's segment:offset value is changed into a 32 bit
		; linear address.  ESI has the address.  ES is zero based.
	movzx	esi,[bp.reg_DS]
	shl	esi,4
	movzx	eax,word ptr [bp.reg_ESI]
	add	esi,eax
ifdef QEMS
	push	DATA32_GSEL
	pop	es
endif
		; The new handle name is loaded into EAX,EBX.  There are 8
		; characters placed into 2 dwords.
	lods	dword ptr es:[esi]
	mov	ebx,eax
	lods	dword ptr es:[esi]

	MOV	ESI, [hndl_nam_ptr]

		; The new handle name is checked for all zeros which is used
		; to clear names and is always legal
	or	eax,eax
	jnz	short GSHN_check_name
	or	ebx,ebx
	jz	short GSHN_set_name

		; The handle table is now searched to see if this handle name
		; is already being used. DX is the current handle index.
GSHN_check_name:
	mov	cx,[total_handles]
	xor	edx,edx
GSHN_compare_name:
	CMP	EBX, DS:[ESI+EDX*8]
	jne	short GSHN_next_handle
	CMP	EAX, DS:[ESI+EDX*8]+4
	je	short GSHN_invalid_name
GSHN_next_handle:
	inc	dx
	loop	GSHN_compare_name

		; If this is reached then the name is valid so copy it in.
GSHN_set_name:
	MOV	DS:[ESI+EDI*8], EBX
	MOV	DS:[ESI+EDI*8]+4, EAX
	mov	byte ptr [bp.reg_EAX + 1],OK
	jmp	short GSHN_return_code

		; If this is reached then the name is already being used so
		; set the appropriate error message.
GSHN_invalid_name:
	mov	byte ptr [bp.reg_EAX + 1],INVALID_NAME
	jmp	short GSHN_return_code

		; The Get Handle's Name function is being done.
		; The user's segment:offset value is changed into a 32 bit
		; linear address.  EDI has the address.  ES is zero based.
GSHN_get_name:
	movzx	eax,word ptr [bp.reg_ES]
	shl	eax,4
	movzx	edi,di
	add	edi,eax
	push	DATA32_GSEL
	pop	es
	MOV	EBX, [hndl_nam_ptr]

		; The 8 bytes are read as two dwords and written in the buffer.
	MOV	EAX, DS:[EBX+ESI*8]
	mov	es:[edi],eax
	add	edi,4
	MOV	EAX, DS:[EBX+ESI*8]+4
	mov	es:[edi],eax
	add	edi,4

		; The success return code is set.
	mov	byte ptr [bp.reg_EAX + 1],OK

GSHN_return_code:
	ret
GetSetHandleName	endp

page
align 16
;******************************************************************************
; GetHandleDirectory
;
; ENTRY
;	AL - subfunction, 0 - Get Directory, 1 - Name Search, 2 - Total Handles
;	ES:DI - pointer to user's data buffer for function 0
;	DS:SI - pointer to user's data buffer for function 1
; EXIT
;	AH - return code
;	AL - number of handles active for function 0 (get directory)
;	DX - handle index for function 1 (search for named handle)
;	BX - number of total handles for function 2 (get handle count)
; DESCRIPTION
;	This routine will either write all active handles and their names into
;	the user's buffer, search the handles for a specific name and return
;	its handle index or return the count of all allocated handles.
;***********************************************************************
GetHandleDirectory	proc	near

		; The subfunction number is checked to see if it is valid.
	cmp	al,2
	ja	short GHD_invalid_function
	jb	short GHD_check_function

		; If this is reached then the function is 2, Get Total Handles.
		; Set the BX return value for the number of handles.
	mov	ax, [total_handles]
	mov	word ptr [bp.reg_EBX],ax
	mov	byte ptr [bp.reg_EAX + 1],OK
	jmp	GHD_return_code

		; If the the function code is invalid then set the error code.
GHD_invalid_function:
	mov	byte ptr [bp.reg_EAX + 1],INVALID_SUBFUNCTION
	jmp	GHD_return_code

GHD_check_function:
	cmp	al,1
	je	short GHD_search_function

		; If this is reached then the user is doing function 0,
		; Get Handle Directory.

		; The user's segment:offset value is changed into a 32 bit
		; linear address.  EDI has the address.  ES is zero based.
GHD_load_users_buffer:
	movzx	eax,word ptr [bp.reg_ES]
	shl	eax,4
	movzx	edi,di
	add	edi,eax
	push	DATA32_GSEL
	pop	es

		; BX is the handle index being checked. CX is the number of
		; handles to process.  The upper 16 bits of EAX are used.
	mov	cx,[total_handles]
	xor	ebx,ebx
	MOV	ESI, [hndl_tbl_ptr]
	MOV	EDX, [hndl_nam_ptr]
GHD_check_handle:
	CMP	DS:[ESI+EBX*4].base_PTE_index, FREE
	je	short GHD_next_handle

		; If the handle is active then write out the handle index.
	mov	es:[edi],bx
	add	edi,2

		; The handle's name is now written out as two dwords.
	MOV	EAX, DWORD PTR DS:[EDX+EBX*8]
	mov	es:[edi],eax
	add	edi,4
	MOV	EAX, DWORD PTR DS:[EDX+EBX*8]+4
	mov	es:[edi],eax
	add	edi,4

GHD_next_handle:
	inc	bx
	loop	GHD_check_handle

		; The number of handles in the directory is now written out.
		; The return code is set for success.
	mov	al,byte ptr gs:[handle_count]
	mov	byte ptr [bp.reg_EAX],al
	mov	byte ptr [bp.reg_EAX + 1],OK
	jmp	short GHD_return_code


		; This code handles the search for named handle function.
GHD_search_function:

		; The user's segment:offset value is changed into a 32 bit
		; linear address.  ESI has the address.  ES is zero based.
	movzx	esi,[bp.reg_DS]
	shl	esi,4
	movzx	eax,word ptr [bp.reg_ESI]
	add	esi,eax
	push	DATA32_GSEL
	pop	es

		; The handle name is loaded into EAX,EBX.  There are 8
		; characters placed into 2 dwords.
	lods	dword ptr es:[esi]
	mov	ebx,eax
	lods	dword ptr es:[esi]

		; The handle table is now searched. DX is the handle index.
	mov	cx, [total_handles]
	xor	edx,edx
	MOV	EDI, [hndl_nam_ptr]
GHD_compare_name:
	CMP	EBX, DS:[EDI+EDX*8]
	jne	short GHD_next_search_handle
	CMP	EAX, DS:[EDI+EDX*8]+4
	je	short GHD_found_handle
GHD_next_search_handle:
	inc	dx
	loop	GHD_compare_name

		; If this is reached then the handle name could not be found.
	mov	byte ptr [bp.reg_EAX + 1],NAME_NOT_FOUND
	jmp	short GHD_return_code

		; The handle index is returned in DX.
GHD_found_handle:
	mov	word ptr [bp.reg_EDX],dx
	mov	byte ptr [bp.reg_EAX + 1],OK

GHD_return_code:
	ret
GetHandleDirectory	endp

page
MapAndJump_struc	struc
	jump_offset	dw	?
	jump_segment	dw	?
	map_size	db	?
	map_offset	dw	?
	map_segment	dw	?
MapAndJump_struc	ends
align 16
;==============================================================================
;==
;== AlterPageMapAndJump:  This routine modifies the window page mapping based
;==			  on the array in ES:EDI and then jumps to the provided
;==			  address.  The jump is done by	modifing the return
;==			  address on the user's stack so that instead of
;==			  returning to the caller's next instruction, the
;==			  return goes to the new jump address.
;==
;== Entry: (Protected Mode)
;==	AL 	   = window location format, 0-window index, 1-window segment
;==	DX 	   = handle index
;==	[BP] DS:SI = pointer to the map and jump structure
;==
;== Exit:  (Protected Mode)
;==	AH = return code
;==                                                                    LC
;=============================================================================
AlterPageMapAndJump	proc	near
;
;  Assume success
;
	mov	byte ptr [bp][reg_EAX+1],OK
;
;  The subfunction number is checked.
;
	cmp	al,2
	jae	short APMJinvFunc

;
;  Validate handle
;
	cmp	dx,[total_handles]	;Q: Handle in range?
	jae	short APMJinvHandle	; N: error

	movzx	edx,dx			; access handle structure
	shl	dx,2
	add	edx,[hndl_tbl_ptr]	; (EDX) = pointer to handle structure
	.errnz	(SIZE HandleTable_struc-4)

	cmp	ds:[edx].base_PTE_index,FREE ;Q: Handle in use?
	je	short APMJinvHandle	     ; N: error

;
;  The user's segment value is changed into a linear address and put into EDI
;
	movzx	edi,[bp.reg_DS]
	shl	edi,4
	movzx	ebx,word ptr [bp.reg_ESI]
	add	edi,ebx
;
;  The target address is saved temporarily in case it is lost by the map call.
;
	push	es:[edi].jump_segment
	push	es:[edi].jump_offset
;
;  The elements to process are placed in CX and the new DS:SI values are loaded.
;
	movzx	esi,es:[edi].map_segment
	shl	esi,4
	movzx	ecx,word ptr es:[edi].map_offset
	add	esi,ecx
	movzx	cx,es:[edi].map_size
;
;  ES:ESI points to the array to map in.  AL is the subfunction code.
;  DX is a pointer to the handle structure.  CX is the # of entries to process.
;
	push	edi
	call	MapInWindows
	pop	edi
	pop	cx			; (CX) = jump offset
	pop	ax			; (AX) = jump segment
;
;  If error, don't jump
;
	jc	short APMJexit
;
;  The return address to the user's code is changed to the new jump address.
;  ES:EDI points to the user's stack.AX is the amount to modify the stack pointer
;  by.
;
	test	gs:[TrapFlags],fI67noReflect ;Q: Do we need to reflect INT 67h?
	jz	short APMJuser		     ; Y: skip ahead

;
;  Go directly to the target by editing the IRETD frame on the ring 0 stack.
;
	push	bp
	mov	bp,word ptr [bp.stack_frame_EBP]
	movzx	ecx,cx			; Zero-extend the offset
	mov	dword ptr [bp.VTFO+VMTF_EIP],ecx
	mov	[bp.VTFO+VMTF_CS],ax
	pop	bp
	ret				; Save the cost of a jump

APMJinvFunc:
	mov	byte ptr [bp][reg_EAX+1],INVALID_SUBFUNCTION ; invalid
	jmp	short APMJexit
APMJinvHandle:
	mov	byte ptr [bp][reg_EAX+1],INVALID_HANDLE ; invalid handle
	jmp	short APMJexit

;
;  We need to reflect the interrupt, place the target address on user's stack.
;
APMJuser:
	push	ax
	xor	eax,eax
	mov	esi,edi
	call	GetModifyUsersStack
	pop	ax			; (AX) = target segment
	mov	es:[edi],cx
	mov	es:[edi+2],ax
APMJexit:
	ret
AlterPageMapAndJump	endp

page

AlterandCall_Frame	struc

; DTS0514 *******************************************************************
; TAIS - Added the return address and saved GS register of the EMM_rEntry
; routine to the user's return stack so that control can return to that
; routine in order to do the necessary IRET.

        emm_entry_return_IP	dw	?
	emm_entry_return_CS	dw	?
        emm_entry_GS            dw      ?
; DTS0514 *******************************************************************

	call_IP 	dw	?
	call_CS 	dw	?
	call_FLAGS	dw	?
	return_IP	dw	?
	return_CS	dw	?
AlterandCall_Frame	ends

MapAndCall_struc	struc
	call_offset	dw	?
	call_segment	dw	?
	new_map_size	db	?
	new_map_offset	dw	?
	new_map_segment dw	?
	old_map_size	db	?
	old_map_offset	dw	?
	old_map_segment dw	?
MapAndCall_struc	ends
even
;==============================================================================
;==
;== AlterPageMapAndCall:  This routine alters the page map to a new mapping,
;==			  calls an entry point that then returns to CEMM,
;==			  restores the original mapping and maps in another
;==			  page mapping before returning to the original caller.
;==			  The various mappings is handled by first saving the
;==			  current map in a tempory save area.  Then the 'old'
;==			  map that is to be applied after the call is applied
;==			  next.  This new mapping is saved on the calling
;==			  programs stack.  Next the original saved mapping is
;==			  restored and the 'new' mapping is overlaid on it.
;==			  The call can now be made.  Since the call tries to
;==			  perform a far return when done, a special return
;==			  address is pushed on his stack that returns it to a
;==			  special entry point in the R_CODE segment.  This
;==			  special return in 'emm.asm' then performs an Int 67h
;==			  with AL = FFh to get back here.  The saved page
;==			  mapping is now restored from the user's stack and
;==			  control is transfered back to the original calling
;==			  procedure.
;==
;== Entry: (Protected Mode)
;==	AL 	   = if 2, do the Get Stack Space call: otherwise
;==	AL 	   = window location format, 0-window index, 1-window segment
;==	DX 	   = handle index
;==	[BP] DS:SI = pointer to the map and call structure
;==
;== Exit:  (Protected Mode)
;==	AH = return code
;==	BX = extra space needed on the user's stack for function 2
;==                                                                   LC
;=============================================================================
APMCdispatch	dw	APMCReturn
		dw	APMCCall
		dw	APMCCall
		dw	APMCStackSpace
APMCcOpts	equ	(($ - APMCdispatch)/2)
align 16
AlterPageMapAndCall	proc	near
;
;  Assume success
;
	mov	byte ptr [bp][reg_EAX+1],OK
;
;  The subfunction number is checked.
;
	inc	al			; 0FFh=>0, 0=>1, 1=>2, 2=>3
	cmp	al,APMCcOpts		;Q: Valid function?
	jae	short APMCinvFunc	; N: error

	movzx	si,al
	add	si,si
	jmp	cs:APMCdispatch[si]

APMCinvFunc:
	mov	byte ptr [bp][reg_EAX+1],INVALID_SUBFUNCTION ; invalid
	jmp	short APMCexit
APMCinvHandle:
	mov	byte ptr [bp][reg_EAX+1],INVALID_HANDLE ; invalid handle
	jmp	short APMCexit
align 16
;
;  The special return opcode means the called routine is now returning to CEMM.
;
APMCreturn:
; DTS0514 *******************************************************************
; TAIS - Throw away the return address of EMM_rEntry and the saved GS 
; register because it exists farther down on the user's stack (beyond
; the saved window mapping information).  This return address is never
; used or needed.

        mov     ax, 6
; DTS0514 *******************************************************************

	call	GetModifyUsersStack

	cmp	word ptr es:[edi],offset R_CODE:AlterandCallReturn
	jne	short APMCinvFunc

	cmp	word ptr es:[edi][2],seg R_CODE
	jne	short APMCinvFunc
	mov	word ptr [bp][reg_EAX],OK SHL 8

;
;  The user's stack is loaded into ES:ESI.
;
	mov	ax,6			; add room for an IRET frame
	call	GetModifyUsersStack
	mov	esi,edi
;
;  The saved window mapping is now restored.
;
	call	RestoreWindowMapping
	mov	ax,[context_save_area_size]

	call	GetModifyUsersStack
	jmp	short APMCexit
align 16
;
;  The size needed is a word for each window, 1 word for the number of
;  windows stored, and 4 words for the call return and original CS:IP.
;
APMCStackSpace:
	mov	ax,[context_save_area_size]

; DTS0514 *******************************************************************
; TAIS - When reporting the needed stack space, we have to add an *extra*
; 6 bytes (on top of the 6 added to AlterAndCall_Frame) since the
; return address of EMM_rEntry and its saved GS register will be on the
; user's stack twice at one point in time.

	add	ax,size AlterandCall_Frame + 6
; DTS0514 *******************************************************************

	mov	word ptr [bp][reg_EBX],ax
	mov	byte ptr [bp][reg_EAX+1],OK

APMCexit:
	ret

APMCexitPopX:
	add	sp,[context_save_area_size]
APMCexitPop:
	add	sp,4
	ret
align 16
;
;  Alter Page Map and Call
;
APMCCall:
;
;  Validate handle
;
	cmp	dx,[total_handles]	;Q: Handle in range?
	jae	short APMCinvHandle	; N: error

	movzx	edx,dx			; access handle structure
	shl	dx,2
	add	edx,[hndl_tbl_ptr]	; (EDX) = pointer to handle structure
	.errnz	(SIZE HandleTable_struc-4)

	cmp	ds:[edx].base_PTE_index,FREE ;Q: Handle in use?
	je	short APMCinvHandle	     ; N: error

;
;  The user's segment:offset is changed into a 32 bit linear address. (ESI)
;
	movzx	esi,[bp.reg_DS]
	shl	esi,4
	movzx	eax,word ptr [bp.reg_ESI]
	add	esi,eax

;
;  The target address is saved temporarily in case it is lost by the map call.
;
	push	es:[esi].call_segment
	push	es:[esi].call_offset

;
;  If the old map is zero, then just save the current window mapping without
;  adding the old map in.
;
	cmp	es:[esi].old_map_size,0
	je	short APMC_save_current_plus_old_map

;
;  Save original mapping on protected mode stack
;
	sub	sp,[context_save_area_size]
	mov	edi,esp
	add	edi,[pSTACK]

	push	esi
	call	SaveWindowMapping
	pop	esi

;
;  The pointer to the user's buffer is swapped to EDI so that the pointer to
;  the old map can be placed into ESI.
;
	mov	edi,esi
	movzx	esi,es:[edi].old_map_segment
	shl	esi,4
	movzx	eax,word ptr es:[edi].old_map_offset
	add	esi,eax
;
;  CX is the number of entries to process. ES:ESI is a pointer to the windows
;  to map in.  A CY set means an error occured.
;
	movzx	cx,es:[edi].old_map_size

	push	edx
	push	edi
	call	MapInWindows
	pop	edi
	pop	edx
	jc	APMCexitPopX
;
;  Restore the user's buffer pointer to ESI.
;
	mov	esi,edi
;
;  The current mapping context is saved on the user's stack as pointed to by
;  ES:EDI. AX is the amount to adjust the stack pointer by.
;
APMC_save_current_plus_old_map:
	mov	ax,[context_save_area_size]
	neg	ax
	call	GetModifyUsersStack
	push	esi
	call	SaveWindowMapping
	pop	esi
;
;  If the old map is zero then skip straight to the loading of the new map.
;
	cmp	es:[esi].old_map_size,0
	je	short APMC_add_new_page_map

;
;  Restore original mapping from protected mode stack
;
 	mov	edi,esi
	mov	esi,esp
	add	esi,[pSTACK]

	push	edi
	call	RestoreWindowMapping
	pop	esi
	add	sp,[context_save_area_size]

APMC_add_new_page_map:
	mov	edi,esi
	movzx	esi,es:[edi].new_map_segment
	shl	esi,4
	movzx	eax,word ptr es:[edi].new_map_offset
	add	esi,eax
	movzx	cx,es:[edi].new_map_size

	push	edi
	call	MapInWindows
	pop	esi
;
;  The return code is checked to see if the call is done. If a failure
;  occured then no call.
;
	jnc	short APMC_continue_call
	mov	ax,[context_save_area_size]
	call	GetModifyUsersStack
	jmp	APMCexitPop
;
;  The user's stack is loaded into EDI.  AX=size to modify the stack pointer by.
;
APMC_continue_call:
	mov	ax,-(size AlterandCall_Frame)
	call	GetModifyUsersStack
;
;  The return address to the user's code is changed to the new jump address.
;
	pop	es:[edi].call_IP	; target offset
	pop	es:[edi].call_CS	; target segment
;
;  The original FLAGS from the calling procedure are given to the new
;  procedure to be called.
;
	mov	ebx,size AlterandCall_Frame
	add	bx,[context_save_area_size]

; DTS0514 *******************************************************************
; TAIS - Modified this section to be aware of the "new" stack layout and
; to "push" some extra words on the user's stack so that control returns
; to EMM_rEntry before going to the user's called program.

; Get a copy of the return address and saved GS register for EMM_rEntry 
; and "push" it on the user's stack.
	mov	ax, es:[ebx][edi]
	mov	es:[edi].emm_entry_return_IP, ax
	mov	ax, es:[ebx][edi][2]
	mov	es:[edi].emm_entry_return_CS, ax
	mov	ax, es:[ebx][edi][4]
	mov	es:[edi].emm_entry_GS, ax

; Get a copy of the user's flag register saved on the stack so that we
; can "push" it on again.  Then, when the IRET in EMM_rEntry is
; executed it will transfer control the user's program in the EMS
; page frame area and restore the user flags.
	mov	ax, es:[ebx][edi][10]
; DTS0514 *******************************************************************

	mov	es:[edi].call_FLAGS,ax

	mov	es:[edi].return_IP,offset R_CODE:AlterAndCallEntry
	mov	es:[edi].return_CS,seg R_CODE
	ret
AlterPageMapAndCall	endp

page
MoveLocation_struc	struc
	memory_type	db	?
	handle_id	dw	?
	start_offset	dw	?
	page_segment	dw	?
MoveLocation_struc	ends

MoveMemory_struc	struc
	region_length	dd	?
	start_source	db	7 dup(?)
	start_dest	db	7 dup(?)
MoveMemory_struc	ends

EXPANDED_MEMORY_FORMAT	=	1
SOURCE_IS_LOW		=	0
SOURCE_IS_HIGH		=	1
NO_OVERLAP		=	0
OVERLAP 		=	1

align 16
;******************************************************************************
; MoveExchangeMemoryRegion
;
; ENTRY
;	AL - subfunction number, 0 - Move, 1 - Exchange
;	DS:SI - pointer to user's move data structure
; EXIT
;	AH - return code
; DESCRIPTION
;	This routine either moves or exchanges 2 memory locations.  The
;	locations can be either conventional or expanded memory.  Conventional
;	memory is classified as anything under 1MB and no checks are made for
;	overlapping EMS windows.  It is assumed that the user knows what is
;	going to happen if a conventional address overlaps a used window.
;***********************************************************************
MoveExchangeMemoryRegion   proc    near

		; The subfunction number is checked to see if it is valid.
	cmp	al,2
	jb	short MXMR_form_buffer_address
	mov	byte ptr [bp.reg_EAX + 1],INVALID_SUBFUNCTION
	jmp	short MXMR_return_code

		; The user's segment:offset value is changed into a 32 bit
		; linear address.  EBX has the address.  ES is zero based.
		; The upper 16 bits of EBX, ECX are being used so watch out.
MXMR_form_buffer_address:
	movzx	ebx,word ptr [bp.reg_DS]
	shl	ebx,4
	movzx	eax,word ptr [bp.reg_ESI]
	add	ebx,eax
	push	DATA32_GSEL
	pop	es

		; The length of the operation is loaded into ECX.
	mov	ecx,es:[ebx].region_length

		;and checked for max of 1MB
	cmp	ecx,100000h
	jbe	short MXMR_check_more
	mov	byte ptr [bp.reg_EAX + 1],INVALID_REGION
	jmp	short MXMR_return_code

MXMR_check_more:
	or	ecx,ecx
	jnz	short MXMR_load_source
	mov	byte ptr [bp.reg_EAX + 1],OK
	jmp	short MXMR_return_code

		; The source's linear address is loaded into ESI.
MXMR_load_source:
	add	ebx,start_source
	call	FormLinearAddress
	jc	short MXMR_return_code
	mov	esi,eax

		; The destination's linear address is loaded into EDI.
	add	ebx,size MoveLocation_struc
	call	FormLinearAddress
	jc	short MXMR_return_code
	mov	edi,eax

		; The two pointers are now checked to see who is lower as
		; stored in AH and if overlap occurs as stored in AL.
	call	CheckForOverlap

		; The function code is now checked to see which one is done.
	cmp	byte ptr [bp.reg_EAX],0
	je	short MXMR_move_function

		; If the exchange is being done then no overlap is allowed.
	cmp	al,NO_OVERLAP
	je	short MXMR_perform_exchange
	mov	byte ptr [bp.reg_EAX + 1],INVALID_OVERLAP
	jmp	short MXMR_return_code
MXMR_perform_exchange:
	call	PerformDataExchange

	jmp	short MXMR_return_code

MXMR_move_function:
	call	PerformDataMove

MXMR_return_code:
	call	UnMapHandleSpace                                        ;LEO
	ret
MoveExchangeMemoryRegion   endp

page
align 16
;******************************************************************************
; FormLinearAddress
;
; ENTRY
;	ES:EBX - buffer pointer to the location's data
;	ECX - the size of the transfer
; EXIT
;	EAX - the 32 bit linear address
;	CY - set if an error occured
; DESCRIPTION
;	This routine takes the provided data and generates a 32 bit linear
;	address in EAX from either a segment:offset pair or a handle:page
;	pair.  The format is defined within a byte in the data structure.
;***********************************************************************
FormLinearAddress	proc	near

	push	edx
	push	esi
	PUSH	EDI

		; The type of memory is checked.
	cmp	es:[ebx].memory_type,EXPANDED_MEMORY_FORMAT
	je	short FLA_load_expanded_address
	jb	short FLA_conventional_memory
	mov	byte ptr [bp.reg_EAX + 1],INVALID_SOURCE_TYPE
	stc
	jmp	FLA_return_code

		; If the address is conventional, then form a 32 bit
		; linear address and place it in EAX.
FLA_conventional_memory:
	movzx	eax,es:[ebx].page_segment
	shl	eax,4
	movzx	edx,es:[ebx].start_offset
	add	eax,edx

		; Verify that the address does not wrap at 1MB.
	add	eax,ecx
	cmp	eax,100000h
     ;;;jae	short FLA_1MB_wrap
	ja	short FLA_1MB_wrap	;doesn't wrap if src + len == 1 meg
	sub	eax,ecx
	clc
	jmp	FLA_return_code

FLA_1MB_wrap:
	mov	byte ptr [bp.reg_EAX + 1],WRAP_AT_1MB
	stc
	jmp	SHORT FLA_return_code

		; The handle is validated.  SI is the handle's index.
FLA_load_expanded_address:
	mov	dx,es:[ebx].handle_id
	; CY = !ValidateHandle(DX);
	call	ValidateHandle
	jc	short FLA_return_code
	movzx	esi,dx

		; The EMS page index is converted into a 4k page count and
		; checked to see if it is within range.
	movzx	eax,es:[ebx].page_segment
	test	ah,0C0h
	jnz	SHORT FLA_page_range_error
	shl	ax,2
	MOV	EDI, [hndl_tbl_ptr]
	CMP	AX, DS:[EDI+ESI*4].number_PTEs
	jb	short FLA_check_limit

		; If the page is out of range then set the error code.
FLA_page_range_error:
	mov	byte ptr [bp.reg_EAX + 1],LOG_PAGE_RANGE
	stc
	jmp	short FLA_return_code

		; The offset into the page is checked to see if it is valid.
FLA_check_limit:
	mov	dx,es:[ebx].start_offset
	cmp	dx,EMS_PAGE_SIZE
	jb	short FLA_check_length
	mov	byte ptr [bp.reg_EAX + 1],INVALID_OFFSET
	stc
	jmp	short FLA_return_code

		; The length of the request is added in to insure
		; that the request does not exceed the handle's memory.
FLA_check_length:
	add	edx,ecx
	add	edx,0FFFh
	shr	edx,12
	add	ax,dx
	CMP	AX, DS:[EDI+ESI*4].number_PTEs
	jbe	short FLA_form_address

	mov	byte ptr [bp.reg_EAX + 1],INSUFFICIENT_MEMORY
	stc
	jmp	short FLA_return_code

		; The PTE index is generated and then converted into a linear
		; 32 bit address.
FLA_form_address:
;
; Need to find an empty entry in PD and point it to corresponding PH.
; Then fix linear address to use it.
;
	sub	ax,dx
	ADD	AX, DS:[EDI+ESI*4].base_PTE_index
	sub	ax,FIRST_HANDLE_PTE ; offset from start of handle space ;LEO
	shl	eax,12
	movzx	edx,es:[ebx].start_offset
	add	eax,edx
	call	MapHandleSpace	    ; returns linear address		;LEO
	clc

FLA_return_code:
	POP	EDI
	pop	esi
	pop	edx
	ret
FormLinearAddress	endp

page
align 16
;******************************************************************************
; CheckForOverlap
;
; ENTRY
;	ECX - the size of the transfer
;	ESI - the source linear address
;	EDI - the destination linear address
; EXIT
;	AH - specifies if the source is high or low in memory
;	AL - specifies is overlap occured
; DESCRIPTION
;	This routine checks the two address to see if the data space defined
;	by either address with the length will overlay.  If overlay does occur
;	then the routine also specifies if the source address is starting lower
;	in memory then the destination or not.
;***********************************************************************
CheckForOverlap proc	near

		; The source and destination are compared to see who is
		; higher in memory and if there is any overlap.
	cmp	esi,edi
	ja	short CFO_source_is_high

		; AH is used for holding the state of who is lower.
		; If the source is lower then next check for overlap.
	mov	ah,SOURCE_IS_LOW
	add	esi,ecx
	cmp	esi,edi
	ja	short CFO_overlap_src_low

		; The state of overlap is stored in AL.
	sub	esi,ecx
	mov	al,NO_OVERLAP
	jmp	short CFO_return_code
CFO_overlap_src_low:
	sub	esi,ecx
	mov	al,OVERLAP
	jmp	short CFO_return_code

		; AH is used for holding the state of who is lower.
		; If the source is higher then next check for overlap.
CFO_source_is_high:
	mov	ah,SOURCE_IS_HIGH
	add	edi,ecx
	cmp	edi,esi
	ja	short CFO_overlap_src_high
	sub	edi,ecx
	mov	al,NO_OVERLAP
	jmp	short CFO_return_code

CFO_overlap_src_high:
	sub	edi,ecx
	mov	al,OVERLAP

CFO_return_code:
	ret
CheckForOverlap endp

page
align 16
;******************************************************************************
; PerformDataExchange
;
; ENTRY
;	ECX - the size of the transfer
;	ESI - the source linear address
;	EDI - the destination linear address
; EXIT
;	EAX,EBX - trashed
; DESCRIPTION
;	This routine exchanges the data pointed to by the two addresses.
;	This is done using dword moves at first and then finishing any
;	remainder off with byte sized exchanges.
;***********************************************************************
PerformDataExchange	proc	near

		; The data will be moved in whole dword pieces with any
		; remainder done in bytes.  BX holds the bytes to do.
	mov	bx,cx
	and	bx,3
	shr	ecx,2
	jecxz	short PDE_finish_remainder

		; The whole dword parts of the data is exchanged.
PDE_exchange_dwords:
	mov	eax,es:[edi]
	xchg	eax,es:[esi]
	mov	es:[edi],eax
	add	edi,4
	add	esi,4
	dec	ecx
	jnz	short PDE_exchange_dwords

PDE_finish_remainder:
	mov	cx,bx
	jcxz	short PDE_return_code

PDE_exchange_bytes:
	mov	al,es:[edi]
	xchg	al,es:[esi]
	mov	es:[edi],al
	inc	edi
	inc	esi
	loop	PDE_exchange_bytes

PDE_return_code:
	mov	byte ptr [bp.reg_EAX + 1],OK
	ret
PerformDataExchange	endp

page
align 16
;******************************************************************************
; PerformDataMove
;
; ENTRY
;	ECX - the size of the transfer
;	ESI - the source linear address
;	EDI - the destination linear address
; EXIT
;	EAX - the 32 bit linear address
;	EBX - trashed
;	CY - clear if an error occured
; DESCRIPTION
;	This routine moves the data from the source to the destination address.
;	If overlap occurs, then the routine will insure that the data will be
;	moved correctly by seeing who is lower in memory so that it knows which
;	direction to move from.  The data is moved in dword size chunks with
;	byte sized moves for any remainder.
;***********************************************************************
PerformDataMove proc	near

		; First overlap is checked for. If there is none then do
		; the default move direction with no overlap warning.
	cmp	al,OVERLAP
	je	short PDM_fixup_direction
	mov	byte ptr [bp.reg_EAX + 1],OK
	jmp	short PDM_move_data

		; If there is overlap and the source is higher then dest.
		; then leave the move direction in the default.
		; The special overlap return code is set up here.
PDM_fixup_direction:
	mov	byte ptr [bp.reg_EAX + 1],SUCCESSFUL_OVERLAP
	cmp	ah,SOURCE_IS_LOW
	je	short PDM_reverse_direction
	jmp	short PDM_move_data

		; If there is overlap and the source is lower then destination
		; then change the direction and start at the end.
PDM_reverse_direction:
	std
	add	edi,ecx
	dec	edi
	add	esi,ecx
	dec	esi

		; The number of dwords to process is checked to see if it
		; is zero. If it is then the pointers are correct.
	mov	ebx,ecx
	shr	ebx,2
	cmp	ebx,0
	je	short PDM_move_data

		; If there are dwords to move then the pointers must be
		; backed up another 3 bytes so they are pointing at the
		; beginning of the dword to move.
	sub	esi,3
	sub	edi,3

		; The number of whole dwords to move is put in ECX while
		; BX gets the remainder number of bytes to move.
PDM_move_data:
	mov	bx,cx
	and	bx,3
	shr	ecx,2
	REP_MOVS_DWORD_USING_ES_ESI

		; Now the remaining bytes are moved.
	mov	cx,bx

		; M001 - Start
	cmp	ax, ( (SOURCE_IS_LOW SHL 8) + OVERLAP)
	jne	short PDM_pointers_OK
		; We have reversed direction. So the pointers must be
		; fixed up.
	add	esi, 3
	add	edi, 3
		; M001 - End

PDM_pointers_OK:
	REP_MOVS_BYTE_USING_ES_ESI

		; Clear the direction flag in case it has been set.
PDM_return_code:
	cld
	ret
PerformDataMove endp

page
align 16
;==============================================================================
;==
;== MapHandleSpace:  This routine finds a location in the page directory to
;==		     temporarily map the handle space for a memory transfers.
;==
;== Entry
;==	EAX = Offset in the handle space into an EMS logical page
;==	 DS = VDMD_GSEL  (_DATA)
;== Exit
;==	EAX = Created linear address for entry address
;==	DS:[CurrentHandleMap] = Current map of handle space.
;==                                                                   LC
;==============================================================================
MapHandleSpace	proc	near
	push	edx
	push	cx
	push	di
	push	es

	mov	edx,eax			; save handle space offset

	cmp	[CurrentHandleMap],0	;Q: Handle space mapped?
	jnz	short MHSlinear		; Y: get linear address
					; N: map handle space

	mov	di,PAGED_GSEL		; page directory/handle space
	mov	es,di                   ; and clear hi word of EDI

	mov	di,[LastHandleMap]	; location of last mapping
	add	di,4

;
; Search through the page directory entries for an empty range
;
MHSsearch:
	mov	cx,[NumberHandlePages]
	sub	di,4
	and	di,0FFCh		; mask to insure proper wrap
	mov	[CurrentHandleMap],di	; save location to be used

MHSnext:
	cmp	dword ptr es:[di],0	;Q: Is this being used?
	jnz	short MHSsearch		; Y: search for another range

	sub	di,4			;Q: Have we reached entry 0
	jz	short MHSsearch		; Y: search for another range
	loop	MHSnext

;
;  An empty range has been found
;
	add	di,4			; starting index
	mov	cx,[NumberHandlePages]  ; number of pages to be mapped
	mov	eax,[page_directory]	; starting physical address
	add	eax,FIRST_HANDLE_PTE shl 2; of handle space
	or	eax,P_AVAIL
;
;  Fill in the page directory entries
;
MHSfill:
	stosd
	add	eax,PAGE_SIZE
	loop	MHSfill
;
;  Adjust the linear address
;
MHSlinear:
	movzx	eax,[CurrentHandleMap]	; location of mapping
	mov	[LastHandleMap],ax	; save it for next time

	mov	cx,[NumberHandlePages]
	dec	cx
	shl	cx,2
	sub	ax,cx

	shl	eax,20			; 4M boundary for handle space
	add	eax,edx			; linear address

	pop	es
	pop	di
	pop	cx
	pop     edx
	ret
MapHandleSpace	endp

align 16
;==============================================================================
;==
;== UnMapHandleSpace:  This routine clears the current handle mapping in the
;==		       page directory.
;==
;== Entry
;==	DS:[CurrentHandleMap] = Current map of handle space.
;==
;== Exit
;==	DS:[CurrentHandleMap] = 0
;==                                                                   LC
;==============================================================================
UnMapHandleSpace proc	near
	push	eax
	push	cx
	push	di
	push	es

	xor	di,di			; clear current handle map
	xchg	di,[CurrentHandleMap]	; location of mapping in di

	or	di,di			;Q: Was there a mapping?
	jz	short UMHSexit          ; N: handle space not used

	mov	ax,PAGED_GSEL		; page directory/handle space
	mov	es,ax                   ; and clear hi word of EDI

	mov	cx,[NumberHandlePages]
	dec	cx
	shl	cx,2
	sub	di,cx
	and	di,0FFCh		; offset into page directory

;
;  Clear the page directory entries
;
	mov	cx,[NumberHandlePages]
	xor	eax,eax
UMHSclear:
	stosd
	jcxz	UMHSexit
	loop	UMHSclear

UMHSexit:
	pop	es
	pop	di
	pop	cx
	pop	eax
	ret
UnMapHandleSpace endp

page
align 16
;==============================================================================
;==
;== GetMappablePhysicalAddress:  This routine copies the mapping between the
;==				 window indexes and their segment locations
;==				 to the user's buffer.  All of the windows
;==				 are done.
;==
;== Entry
;==	AL    = subfunction number, 0-Get Array, 1-Get Size of Array
;==	ES:DI = the user's buffer for function 0, Get Address Array
;==
;== Exit
;==	[BP]:AH = return code
;==	[BP]:CX = number of windows in the array
;==                                                                    LC
;==============================================================================
GetMappablePhysicalAddress	proc	near
;
;  Assume success
;
	mov	byte ptr [bp][reg_EAX+1],OK
;
;  The subfunction number is checked to see if it is valid.
;  If the function is 1 then just return the size only.
;
	cmp	al,1
	je	GMPAretSize
	ja	short GMPAinvFunc
;
;  Function 0 has been selected which returns the array.
;  The user's segment:offset value is changed into a 32 bit linear address.
;
	movzx	eax,word ptr [bp].reg_ES
	shl	eax,4
	movzx	edi,di
	add	edi,eax

	mov	dl,-1			; no EMS window token
	mov	cx,0FCh			; last possible EMS window
	mov	bx,[strtng_bs_wndw_PTE]	; first possible EMS window
	sub	cx,bx
	shr	cx,2			; number of possible EMS windows
GMPAloop:
	movzx	eax,EMSsegLoc[bx]	; get possible EMS window
	cmp	al,dl			;Q: Is it an EMS window?
	je	short GMPAnext		; N: next window
	shl	eax,16			; Y: physical window number in hi word
	mov	ah,bl			; segment in low word
	STOS_DWORD_PTR_ES_EDI		; place in user buffer
GMPAnext:
	add	bl,4			; next 16K address (possible EMS window)
	dec	cx			;Q: Any more EMS windows?
	jnz	short GMPAloop		; Y: next
;
;  The number of windows in the system is returned in CX.
;
GMPAretSize:
	mov	ax,[number_EMS_windows]
	mov	word ptr [bp].reg_ECX,ax

GMPAexit:
	ret

GMPAinvFunc:
	mov	byte ptr [bp][reg_EAX+1],INVALID_SUBFUNCTION
	jmp	short GMPAexit

GetMappablePhysicalAddress	endp

page
align 16
;******************************************************************************
; GetExpandedMemoryHWInfo
;
; ENTRY
;	AL - subfunction number, 0 - Get Array Info, 1 - Get Page Info
;	ES:DI - user's buffer for function 0, Get Hardware Info
; EXIT
;	AH - return code
;	BX - unallocated raw pages for function 1
;	DX - total raw pages for function 2
; DESCRIPTION
;	This routine returns some standard information about the features
;	supported by CEMM.  This routine is protected by the OS/E enable
;	function.
;***********************************************************************
GetExpandedMemoryHWInfo proc	near

		; The permission is checked to see if this function is enabled.
	bt	[OS_functions],OS_ENABLED_BIT
	jc	short GEMI_check_subfunction
	mov	byte ptr [bp.reg_EAX + 1],ACCESS_DENIED
	jmp	short GEMI_return_code

		; The subfunction number is verified.
GEMI_check_subfunction:
	cmp	al,1
	je	short GEMI_raw_page_info
	jb	short GEMI_load_information

		; If the subfunction is invalid then set the correct error code.
GEMI_invalid_subfunction:
	mov	byte ptr [bp.reg_EAX + 1],INVALID_SUBFUNCTION
	jmp	short GEMI_return_code

		; Function 1 is being done.  Since the raw page size equals the
		; normal page size, this call is just passed to Function 3.
GEMI_raw_page_info:
	call	GetUnallocatedPageCount
	jmp	short GEMI_return_code

		; Function 0 is being done.
GEMI_load_information:

		; The user's segment:offset value is changed into a 32 bit
		; linear address.  EDI has the address.  ES is zero based.
	movzx	eax,word ptr [bp.reg_ES]
	shl	eax,4
	movzx	edi,di
	add	edi,eax
	push	DATA32_GSEL
	pop	es

		; The first info is the raw page size in paragraphs.
	mov	ax,400h
	mov	es:[edi],ax
	add	edi,2

		; Next the number of alternate register sets is stored.
	movZX	ax, BYTE PTR [total_register_sets]
	dec	ax
	mov	word ptr es:[edi],ax
	add	edi,2

		; The size of the context save area is stored.	The first byte
		; in the map is used for storing the number of elements in the
		; map.
	mov	ax,[context_save_area_size]
	mov	es:[edi],ax
	add	edi,2

		; The number of DMA register sets is stored.
	mov	ax,0h
	mov	es:[edi],ax
	add	edi,2

		; The DMA channel operation mode is stored.
	mov	ax,0h
	mov	es:[edi],ax
	add	edi,2

	mov	byte ptr [bp.reg_EAX + 1],OK

GEMI_return_code:
	ret
GetExpandedMemoryHWInfo endp

page
align 16
;******************************************************************************
; AllocateStandardRawPages
;
; ENTRY
;	AL - subfunction number, 0 - standard pages, 1 - raw pages
;	BX - number of pages to allocate
; EXIT
;	DX - handle index
; DESCRIPTION
;	This routine allocates either standard or raw pages to a new handle.
;	However, since CEMM's standard page size is the same as its raw page
;	size, these calls are identical.  This call is normally passed off to
;	the 3.2 version of AllocatePages except for the special case where
;	the number of pages is zero.  In this case then a handle is allocated
;	with no pages assigned to it.
;***********************************************************************
AllocateStandardRawPages	proc	near

		; The subfunction number is checked to see if it is valid.
	cmp	al,1
	ja	short ASRP_invalid_subfunction

		; The number of pages to be allocated is checked to see if
		; it is zero.  If it is then perform the following special code.
	cmp	bx,0
	ja	short ASRP_pass_call_thru

		; The handle table is now searched for an empty
		; handle structure that can be used.
ASRP_get_handle:
	mov	esi,1
	mov	cx,[total_handles]
	MOV	EDI, [hndl_tbl_ptr]
ASRP_find_handle:
	CMP	DS:[EDI+ESI*4].base_PTE_index, FREE
	je	short ASRP_got_handle
	inc	si
	loop	ASRP_find_handle

		; If this is reached then no free handles could be found.
	mov	byte ptr [bp.reg_EAX + 1],NO_MORE_HANDLES
	jmp	short ASRP_return_code

ASRP_got_handle:
	MOV	[EDI+ESI*4].base_PTE_index, 0
	MOV	[EDI+ESI*4].number_PTEs, 0
	mov	word ptr [bp.reg_EDX],si
	inc	gs:[handle_count]
	mov	byte ptr [bp.reg_EAX + 1],OK
	jmp	short ASRP_return_code

		; If the number of requested pages is not zero then just
		; pass the call thru to the AllocatePages function.
ASRP_pass_call_thru:
	call	AllocatePages
	jmp	short ASRP_return_code

ASRP_invalid_subfunction:
	mov	byte ptr [bp.reg_EAX + 1],INVALID_SUBFUNCTION

ASRP_return_code:
	ret
AllocateStandardRawPages	endp

page
align 16
;==============================================================================
;==
;== AlternateMapRegisterSet:  This code manipulates the alternate register
;==			      sets.  See the individual	routines for further
;==			      descriptions.
;==
;== Entry: (Protected Mode)
;==	AL = subfunction number, 0-Get, 1-Set, 2-Get Save Area Size
;==	     3-Allocate Set, 4-Deallocate Set, 5,6,7- DMA functions
;==
;== Exit:  (Protected Mode)
;==	AH = return code
;==                                                                    LC
;=============================================================================
AMRSdispatch	label	word
	dw	offset GetRegisterSet
	dw	offset SetRegisterSet
	dw	offset AMRS_get_save_area_size
	dw	offset AllocateAltRegisterSet
	dw	offset DeallocateAltRegisterSet
	dw	offset AMRS_allocate_DMA_set
	dw	offset AMRS_enable_DMA_functions
	dw	offset AMRS_other_DMA_functions
	dw	offset AMRS_other_DMA_functions
AMRScOpts	equ	($-AMRSdispatch)/2

AlternateMapRegisterSet proc	near
;
;  Assume success
;
	mov	byte ptr [bp][reg_EAX+1],OK
;
;  The OS is checked to see if this function is currently enabled
;
	bt	[OS_functions],OS_ENABLED_BIT
	jnc	short AMRSinvAccess
;
;  The subfunction number is checked.
;
	cmp	al,AMRScOpts
	jae	short AMRSinvFunc
;
;  The subfunction number is used as an index into the jump table.
;
   	movzx	si,al
	add	si,si
	jmp	cs:AMRSdispatch[si]
;
;  Size for save area
;
AMRS_get_save_area_size:
	mov	ax,[context_save_area_size]
	mov	word ptr [bp.reg_EDX],ax
	jmp	short AMRSexit
;
;  Since there are no alternate DMA register sets, return 0.
;
AMRS_allocate_DMA_set:
	mov	byte ptr [bp.reg_EBX],0
	jmp	short AMRSexit
;
;  For these functions if BL=0 & DL=0 then just return ok.
;  Otherwise an error message is needed.
;
AMRS_enable_DMA_functions:
	cmp	dl,0
	je	short AMRS_other_DMA_functions
	mov	byte ptr [bp][reg_EAX+1],NO_ALT_DMA_REG_SETS
	jmp	short AMRSexit

AMRS_other_DMA_functions:
	cmp	bl,0
	je	short AMRSexit
	mov	byte ptr [bp][reg_EAX+1],NO_ALT_DMA_REG_SETS
	jmp	short AMRSexit

AMRSexit:
	ret

AMRSinvAccess:
	mov	byte ptr [bp][reg_EAX+1],ACCESS_DENIED
	jmp	short AMRSexit
AMRSinvFunc:
	mov	byte ptr [bp][reg_EAX+1],INVALID_SUBFUNCTION
	jmp	short AMRSexit

AlternateMapRegisterSet endp


align 16
;==============================================================================
;==
;== GetRegisterSet:  This routine returns the current alternate register set
;==		     that has been selected.  If the current set is zero or
;==		     the dummy set, then the current window mapping is copied
;==		     into the buffer area at ES:EDI.
;==
;== Entry: (Protected Mode)
;==	BL 	   = register set index
;==	[BP] ES:DI = pointer to a map register context save area
;==
;== Exit:  (Protected Mode)
;==	[BP]:AH = return code
;==                                                                    LC
;=============================================================================
GetRegisterSet	proc	near

	cmp	[current_register_set],0	;Q: Current AR 0?
	jne	short GRSgetSet			; N: don't worry about mapping
;
;
;
	mov	eax,[saved_pointer]
	mov	word ptr [bp.reg_EDI],ax
	movzx	edi,ax
	shr	eax,16
	mov	bx,word ptr [bp.stack_frame_EBP]
	mov	ss:[bx][VTFO].VMTF_ES,ax
	shl	eax,4
	add	edi,eax
	cmp	edi,0
	je	short GRSgetSet

	call	SaveWindowMapping

GRSgetSet:
	mov	al,[current_register_set]
	mov	byte ptr [bp][reg_EBX],al
	ret

GetRegisterSet	endp

align 16
;==============================================================================
;==
;== SetRegisterSet:  This routine switches to the new alternate register set.
;==		     If the set is zero or the dummy, then the current state
;==		     is not saved but the pointer provided is used to restore
;==		     the current mapping and the current register set becomes
;==		     zero.  If the set is not zero, then the current register
;==		     state is saved before restoring the state of the new
;==		     register set.
;==
;== Entry: (Protected Mode)
;==	BL 	   = the new alternate register set
;==	[BP] ES:DI = a pointer to a context save area
;==
;== Exit:  (Protected Mode)
;==	[BP]:AH = return code
;==                                                                    LC
;=============================================================================
SetRegisterSet	proc	near
;
;  First check it to see if it is within the valid range.
;
	cmp	bl,[total_register_sets]
	jae	short SARSunsSet
;
;  Check to see if the register set specified is active.
;
	movzx	si,bl
	shl	si,3
	.errnz size RegisterSet_struc-8

	cmp	[register_set][si].active,TRUE
	jne	short SARSinvSet
;
;  Mappings for current register set are saved. ES:EDI points to the save area.
;
	or	bl,bl			;Q: AR set 0?
	jnz	short SARsetRegSet	; N: set reg set
;
;  Get context area address
;
	movzx	eax,word ptr [bp.reg_ES]
	mov	word ptr [saved_pointer+2],ax
	shl	eax,4
	movzx	esi,word ptr [bp.reg_EDI]
	mov	word ptr [saved_pointer],si
	add	esi,eax

	or	esi,esi			;Q: ES:DI pointer passed?
	jz	short SARsetRegSet	; N: set register set

	mov	eax,es:[esi]		; read header/CRC

	inc	ax			;Q: Valid restore context buffer?
	jnz	short SARSinvBuff	; N: error
	shr	eax,16

	cmp	ax,'C'+'O'+'M'+'P'+'A'+'Q';Q: Check CRC, valid?
	jne	short SARSinvBuff	  ; N: corrupted source

;
;  At this point ESI points to user buffer. Copy buffer to local stack.
;
	movzx	ecx,[context_save_area_size]
	sub	sp,cx
	mov	edi,esp
	add	edi,[pSTACK]
	mov	edx,edi

	mov	ah,cl
	shr	cx,2
	REP_MOVS_DWORD_USING_ES_ESI
	mov	cl,ah
	and	cl,3
	jcxz	short SARScont
	REP_MOVS_BYTE_USING_ES_ESI
SARScont:
	call	ActivateRegSet		; AL = AR to activate

	mov	esi,edx
	call	RestoreWindowMapping
	add	sp,[context_save_area_size]
	ret

SARSunsSet:
	mov	byte ptr [bp][reg_EAX+1],UNSUPPORTED_REGISTER_SET
	jmp	SARSexit
SARSinvSet:
	mov	byte ptr [bp][reg_EAX+1],INVALID_REGISTER_SET
	jmp	SARSexit
SARSinvBuff:
	mov	byte ptr [bp][reg_EAX+1],WINDOW_INDEX_RANGE
	jmp	SARSexit

SARsetRegSet:
	call	ActivateRegSet
SARSexit:
	ret
SetRegisterSet	endp

align 16
;==============================================================================
;==
;== AllocateAltRegisterSet:  This routine finds an unused alternate register
;==			     set and allocates it to the calling program.
;==			     The current window mapping is saved in its context
;==			     save area.
;==
;== Entry: (Protected Mode)
;==	none
;==
;== Exit:  (Protected Mode)
;==	[BP]:AH = return code
;==	[BP]:BL = allocated alternate register set
;==                                                                     LC
;=============================================================================
AllocateAltRegisterSet	proc	near
;
;  The register_set[] array is searched for a non-active register set.
;  BX is the offset of the register set.
;
	movzx	ecx,byte ptr [total_register_sets]
	xor	bx,bx
	mov	al,TRUE
AARS_check_for_active:
	xchg	[register_set][bx].active,al
	cmp	al,FALSE			;Q: Is this AR set active?
	je	short AARSallocSet		; N: use it!
	add	bx,size RegisterSet_struc	; Y: try the next one
	dec	cx
	jnz	short AARS_check_for_active
;
;  If this is reached then no free register sets were found.
;
	mov	byte ptr [bp][reg_EAX+1],NO_FREE_REGISTER_SETS
	jmp	short AARSexit

AARSallocSet:
;
;  We need to copy the current PT 0 into the 4k block pointed to by this
;  alternate register set. We shall also copy the the A20state specifed in
;  the Current_state flag into the AR set
;
	mov	di,gs:[Current_State]
	and	di,fState_A20Ena
	mov	[register_set][bx].a20_state,di
	mov	edi,[register_set][bx].page_table_ptr

	mov	esi,[page_directory]
	mov	esi,es:[esi]		; current PT0 address

	and	si,not 0fffh		; clear bits 0-11

	mov	cx,1024			; move 4K bytes (high word of ECX cleared above)
	REP_MOVS_DWORD_USING_ES_ESI
;
; The register set index is determined from the offset in BX.
;
	shr	bx,3
	.errnz size RegisterSet_struc-8
	mov	byte ptr [bp][reg_EBX],bl

AARSexit:
	ret
AllocateAltRegisterSet	endp

align 16
;==============================================================================
;==
;== DeallocateAltRegisterSet:  This routine deallocates the specified register
;==			       set.  If the dummy register set is specified
;==			       then nothing is done.  The current register set
;==			       can not be deallocated.
;==
;== Entry: (Protected Mode)
;==	BL = alternate register set
;==
;== Exit:  (Protected Mode)
;==	[BP]:AH = return code
;==                                                                     LC
;=============================================================================
DeallocateAltRegisterSet	proc	near
;
;  OS may not deallocate AR 0, but an error will not be returned
;
	cmp	bl,0			;Q: Deallocate AR 0?
	je	short DARSexit		; Y: done

;
;  The current register set cannot be deallocated so check it.
;
	cmp	bl,[current_register_set]
	je	short DARSinvRegSet
;
;  Check the range of the register set index.
;
	cmp	bl,[total_register_sets]
	jae	short DARSbadRegSet
;
;  Check to see if the specified set is currently allocated.
;
	xor	bh,bh
	shl	bx,3
	.errnz size RegisterSet_struc-8

	mov	al,FALSE
	xchg	al,[register_set][bx].active

	cmp	al,FALSE		;Q: Allocated?
	je	short DARSinvRegSet	; N: error

DARSexit:
	ret

DARSbadRegSet:
	mov	byte ptr [bp][reg_EAX+1],NO_ALT_REG_SETS ; assume no ARs
	cmp	[total_register_sets],1		;Q: Any alternate register sets supported?
	je	short DARSexit			; N: assumption correct
DARSinvRegSet:
	mov	byte ptr [bp][reg_EAX+1],INVALID_REGISTER_SET
	jmp	short DARSexit

DeallocateAltRegisterSet	endp


page
;******************************************************************************
; PrepareForWarmBoot
;
; ENTRY
;	none
; EXIT
;	AH - OK
; DESCRIPTION
;	This routine returns success as CEMM does not support non-volatile
;	handles.
;***********************************************************************
PrepareForWarmBoot	proc	near

		; Set the success return code and return.
	mov	byte ptr [bp.reg_EAX + 1],OK
	ret
PrepareForWarmBoot	endp

page
;******************************************************************************
; EnableDisableOSFunctions
;
; ENTRY
;	AL - subfunction number, 0 - Enable, 1 - Disable, 2 - Return Key
;	BX,CX - validation key
; EXIT
;	BX,CX - validation key
; DESCRIPTION
;	This routine manages the OS functions for enabling and disabling some
;	of the LIM 4.0 special functions.
;***********************************************************************
EnableDisableOSFunctions	proc	near

		; The key's value is placed into EDX for ease.
	mov	dx,cx
	shl	edx,16
	mov	dx,bx

		; The subfunction number is checked.
	cmp	al,2
	ja	short EDF_invalid_subfunction
	je	short EDF_return_access_key

		; Check to see if the key is already allocated.
	bts	[OS_functions],OS_KEY_OUT_BIT
	jc	short EDF_check_key

		; If the key is not out then return it in BX,CX.
	push	DATA32_GSEL
	pop	es
	mov	edx,dword ptr es:[046Ch]	;seed key with timer ticks
	mov	[OS_key],edx			;save the key
	mov	word ptr [bp.reg_EBX],dx
	shr	edx,16
	mov	word ptr [bp.reg_ECX],dx
	jmp	short EDF_parse_subfunction

		; Verify the provided key's value.
EDF_check_key:
	cmp	edx,[OS_key]
	jne	short EDF_invalid_access

		; The enable/disable functions are now done.
		; The return code is also set up.
EDF_parse_subfunction:
	mov	byte ptr [bp.reg_EAX + 1],OK
	cmp	al,1
	je	short EDF_disable_subfunction
	bts	[OS_functions],OS_ENABLED_BIT
	jmp	short EDF_return_code
EDF_disable_subfunction:
	btr	[OS_functions],OS_ENABLED_BIT
	jmp	short EDF_return_code

		; Function 2 is being done, Return Access Key.
EDF_return_access_key:

		; The key is validated.  The key is in EDX.
	cmp	edx,[OS_key]
	jne	short EDF_invalid_access


	btr	[OS_functions],OS_KEY_OUT_BIT ; The key allocated bit is reset.
	bts	[OS_functions],OS_ENABLED_BIT ; the functions re-enabled
	mov	byte ptr [bp.reg_EAX + 1],OK
	jmp	short EDF_return_code

EDF_invalid_access:
	mov	byte ptr [bp.reg_EAX + 1],ACCESS_DENIED
	jmp	short EDF_return_code

EDF_invalid_subfunction:
	mov	byte ptr [bp.reg_EAX + 1],INVALID_SUBFUNCTION

EDF_return_code:
	ret
EnableDisableOSFunctions	endp

_TEXT	ends
END

=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\emm386\except.asm ===
.386p
	page 58,132
;=============================================================================
	title	EXCEPT - 80386 Processor Exception Handlers
;=============================================================================
;==
;==  (C) Copyright MICROSOFT Corp. 1986-1991
;==  (C) Copyright COMPAQ Computer Corp. 1986-1991
;==
;==	Title:	MEMM.EXE - MICROSOFT Expanded Memory Manager 386 Driver
;==
;==	Module: EXCEPT - 80386 Processor Exception Handlers
;==
;==	Version: 1.00
;==
;==	Date:	March 11,1990
;==
;==	Author: Leo Cohen
;==
;=============================================================================
;==
;==	Change Log:
;==
;==	DATE	 REVISION	Description
;==	-------- --------	--------------------------------------------
;==     03/11/90 0.00	        Original
;==
;=============================================================================
;==
;==   Functional Description:
;==
;==   This module handles all 80386 processor exceptions.
;==
;==
;=============================================================================
;==	P U B L I C   D E C L A R A T I O N S
;=============================================================================
	public	ExceptHandler0
	public	ExceptHandler1
	public	ExceptHandler2
	public	ExceptHandler3
	public	ExceptHandler4
	public	ExceptHandler5
	public	ExceptHandler6
	public	ExceptHandler7
	public	ExceptHandler8
	public	ExceptHandler9
	public	ExceptHandler10
	public	ExceptHandler11
	public	ExceptHandler12
	public	ExceptHandler13
	public	ExceptHandler14
	public	ExceptHandler15
	public	ExceptHandler16
	public	ExceptHandler17
	public	_PFUser
;=============================================================================
;==	L O C A L   C O N S T A N T S
;=============================================================================
	include vdmseg.inc
	include vdmsel.inc
	include vm386.inc
	include oemdep.inc
	include	emm386.inc
	include	emmfunct.inc
	include	emmdata.inc
	include	page.inc
	include desc.inc
ifdef BETA
	include except.pub
endif

ProcessExcep	macro	ExcepNum
	mov	bx, ExcepNum
	mov	ax, ExcpErr
	PJmp	R1CODE_GSEL, R1_CODE:ErrHndlr
endm

;=============================================================================
;==	E X T E R N A L   R E F E R E N C E S
;=============================================================================
_TEXT	segment
	extrn	ReflectInterrupt:near
	extrn	pIRQHandlerMaster:near
	extrn	pIRQHandler:near
	extrn	VmFault:near
	extrn	MoveBlockParity:near
	extrn	PageFaultHandler:near
	extrn	TrapWrites:near
	extrn	MBMoveW:near
	extrn	MBrepMovD:near
_TEXT	ends

R_CODE	segment
ifdef PICtrap
	extrn	VirMasterPICVec:word
	extrn	MasterPICVec:word
	extrn	LastOCW3:byte
	extrn	MasterIS:word
endif
R_CODE	ends

R1_CODE	segment
	extrn	ErrHndlr:near
R1_CODE	ends

ifdef	BugMode
DCODE	segment
	extrn _Trap00:far		; divide by zero
	extrn _Trap01:far		; single step interrupt
	extrn _Trap02:far		; NMI interrupt
	extrn _Trap03:far		; breakpoint interrupt
	extrn _Trap04:far		; INTO detected overflow
	extrn _Trap05:far		; BOUND range exceeded
	extrn _Trap06:far		; invalid opcode
	extrn _Trap07:far		; processor extension not avaliable
	extrn _Trap08:far		; double exception detected
	extrn _Trap09:far		; processor extension segment overrun
	extrn _Trap10:far		; invalid task state segment
	extrn _Trap11:far		; segment not present
	extrn _Trap12:far		; stack segment overrun or not present
	extrn _Trap13:far		; general proctection fault
	extrn _Trap14:far		; page fault
DCODE	ends
endif
;=============================================================================
;==	L O C A	L   D A T A
;=============================================================================
_DATA	segment

_TABLE_ENTRIES	EQU	1024
_PF	DW	0			; Most recently referenced
_PFAddr	DW	1000h
	DW	2000h
_PFUser	DW	0			; Owner of page fault table 0
   	DW	0			; Owner of page fault table 1
_DATA	ends
;=============================================================================
;==	C O D E  S E G M E N T
;=============================================================================
_TEXT	segment
	assume	cs:_TEXT, ds:NOTHING, es:NOTHING, ss:NOTHING
;==============================================================================
;==
;==  ExceptHandler0: Divide error fault
;==
;==  Entry:  Protected Mode via 386 Interrupt gate
;==	     No error code on stack
;==
;==  Exit:   Reflect to real mode handler if fault occurred in virtual 8086
;==	     mode, else go to debugger.
;==
;==============================================================================
ExceptHandler0:
	push	ebp
	movzx	ebp,sp
	test	[bp][VTFO].VMTF_EFLAGShi,FLAGS_VM;Q: Virtual Mode?
	jz	short EH0debug			 ; N: go to debugger
	push	0000				 ; Y: interrupt 00
	jmp	ReflectInterrupt		 ; reflect it to virtual mode

EH0debug:
ifndef	BugMode
	ProcessExcep ErrDIV
else
	pop	ebp
	db	0EAh			; far jump opcode
	dw	offset DCODE:_trap00	; offset
	dw	DEBC_GSEL		; selector
endif
;==============================================================================
;==
;==  ExceptHandler1: Debug trap
;==
;==  Entry:  Protected Mode via 386 Interrupt gate
;==	     No error code on stack
;==
;==  Exit:   Reflect to real mode handler if fault occurred in virtual 8086
;==	     mode, else go to debugger.
;==
;==============================================================================
ExceptHandler1:
	push	ebp
	movzx	ebp,sp

	call	TrapWrites	;Q: Trap due to write violation?
	jc	short EH1iretd	; Y: return to client

ifndef	 BugMode
	test	[bp][VTFO].VMTF_EFLAGShi,FLAGS_VM;Q: Virtual Mode?
	jz	short EH1debug		 	 ; N: go to debugger
	push	0001				 ; Y: interrupt 01
	jmp	ReflectInterrupt		 ; reflect it to virtual mode

EH1debug:
	ProcessExcep ErrINT1
else
	pop	ebp

	db	0EAh			; far jump opcode
	dw	offset DCODE:_trap01	; offset
	dw	DEBC_GSEL		; selector
endif
EH1iretd:
	pop	ebp
	iretd
;==============================================================================
;==
;==  ExceptHandler2: NMI handler (H/W)
;==
;==  Entry:  Protected Mode via 386 Interrupt gate
;==	     No error code on stack
;==
;==  Exit:   Reflect to real mode handler
;==
;==QLEO:  Need to make this handler reentrant in protected mode!
;==============================================================================
ExceptHandler2:
	push	ebp
	movzx	ebp,sp

ifndef	BugMode
	test	[bp][VTFO].VMTF_EFLAGShi,FLAGS_VM;Q: Virtual Mode?
	jz	short EH2prot			 ; N: check for parity
	push	02				 ; Y: reflect it/debugger
	jmp	ReflectInterrupt		 ; reflect it

EH2prot:
;
;  Check if move block function was executing
;
	cmp	[bp][VTFO].VMTF_CS,VDMC_GSEL	;Q: Executing in _TEXT segment?
	jne	short EH2check			; N: check parity

	cmp	[bp][VTFO].VMTF_EIP,offset _TEXT:MBMoveW	;Q: MB code?
	jb	short EH2check

	cmp	[bp][VTFO].VMTF_EIP,offset _TEXT:MBrepMovD	;Q: MB code?
	ja	short EH2check
	jmp	MoveBlockParity			; Y: fail the move block.

EH2check:
	call	CheckParity		;Q: Was this a true parity error ?
	jc	short EH2parity		; Y: error/debug trap
	pop	ebp 			; N: NMI cleared, continue
	iretd				;    and toss the NMI

EH2parity:
	push	2			; reflect NMI to virtual mode (INT 2)
	push	ebx
	push	esi
	mov	bx,DATA32_GSEL
	push	ds
	mov	si,seg R_CODE
	mov	ds,bx
	movzx	esi,si
	shl	esi,4			; DS:[ESI] point to R_CODE
	jmp	pIRQHandler		; reflect interrupt

EH2MB:


;QLEO	ProcessExcep ErrNMI
else
	pop	ebp
	db	0EAh			; far jump opcode
	dw	offset DCODE:_trap02	; offset
	dw	DEBC_GSEL		; selector
endif
;==============================================================================
;==
;==  ExceptHandler3: Breakpoint trap.  Unfortunately, this breaks the
;==		     debugger's ability to GO and TRACE the VM program.
;==
;==  Entry:  Protected Mode via 386 Interrupt gate
;==	     No error code on stack
;==	     Will never be entered unless BugMode is chosen.
;==
;==  Exit:   Send to debugger
;==
;==============================================================================
ExceptHandler3:
ifndef	BugMode
	push	0
	push	0
	push	ebp
	movzx	ebp,sp
	ProcessExcep ErrINT3
else
	db	0EAh			; far jump opcode
	dw	offset DCODE:_trap03	; offset
	dw	DEBC_GSEL		; selector
endif
;==============================================================================
;==
;==  ExceptHandler4: Overflow trap
;==
;==  Entry:  Protected Mode via 386 Interrupt gate
;==	     No error code on stack
;==
;==  Exit:   Send to debugger
;==
;==============================================================================
ExceptHandler4:
ifndef	BugMode
	push	0
	push	0
	push	ebp
	movzx	ebp,sp
	ProcessExcep ErrINTO
else
	db	0EAh			; far jump opcode
	dw	offset DCODE:_trap04	; offset
	dw	DEBC_GSEL		; selector
endif
;==============================================================================
;==
;==  ExceptHandler5: Array bounds fault
;==
;==  Entry:  Protected Mode via 386 Interrupt gate
;==	     No error code on stack
;==
;==  Exit:   Reflect to real mode handler if fault occurred in virtual 8086
;==	     mode, else go to debugger.
;==
;==============================================================================
ExceptHandler5:
	push	ebp
	movzx	ebp,sp
	test	[bp][VTFO].VMTF_EFLAGShi,FLAGS_VM;Q: Virtual Mode?
	jz	SHORT EH5debug			 ; N: exit to debugger
	push	0005				 ; Y: interrupt 01
	jmp	ReflectInterrupt		 ; reflect it to virtual mode

EH5debug:
ifndef	BugMode
	ProcessExcep ErrBounds
else
	pop	ebp
	db	0EAh			; far jump opcode
	dw	offset DCODE:_trap05	; offset
	dw	DEBC_GSEL		; selector
endif
;==============================================================================
;==
;==  ExceptHandler6: Invalid opcode fault
;==
;==  Entry:  Protected Mode via 386 Interrupt gate
;==	     No error code on stack
;==
;==  Exit:   Reflect to real mode handler if fault occurred in virtual 8086
;==	     mode, else go to debugger.
;==
;==============================================================================
ExceptHandler6:
	push	0			; align stack with error offset
	push	0			;  for VmFault
	push	ebp
	movzx	ebp,sp
	test	[bp][VTFOE].VMTF_EFLAGShi,FLAGS_VM;Q: Virtual Mode?
	jnz	VmFault 			  ; Y: enter VM 06 Invalid handler

EH6debug:
ifndef	BugMode
	ProcessExcep ErrOpCode
else
	pop	ebp
	add	sp,4			; throw away dummy error code
	db	0EAh			; far jump opcode
	dw	offset DCODE:_trap06	; offset
	dw	DEBC_GSEL		; selector
endif
;==============================================================================
;==
;==  ExceptHandler7: Coprocessor not present fault
;==
;==  Entry:  Protected Mode via 386 Interrupt gate
;==	     No error code on stack
;==
;==  Exit:   Reflect to real mode handler if fault occurred in virtual 8086
;==	     mode, else go to debugger.
;==
;==============================================================================
ExceptHandler7:
	push	ebp
	movzx	ebp,sp
	test	[bp][VTFO].VMTF_EFLAGShi,FLAGS_VM;Q: Virtual Mode?
	jz	SHORT EH7debug			 ; N: exit to debugger
	push	0007				 ; Y: interrupt 07
	jmp	ReflectInterrupt		 ; reflect it to virtual mode

EH7debug:
ifndef	BugMode
	ProcessExcep ErrCoPNA
else
	pop	ebp
	db	0EAh			; far jump opcode
	dw	offset DCODE:_trap07	; offset
	dw	DEBC_GSEL		; selector
endif
ALIGN	16
;==============================================================================
;==
;==  ExceptHandler8: Double Fault
;==
;==  Entry:  Protected Mode via 386 Interrupt gate
;==	     Error Code on stack = 0000
;==
;==  Exit:   Send to debugger
;==
;==============================================================================
ExceptHandler8:
	push	ebp			; fix stack for pIRQHandler
	movzx	ebp,sp
	push	8    			; interrupt level
;QLEO jmp CheckInt
	push	ebx
	push	esi
	mov	bx,DATA32_GSEL
	push	ds
	mov	si,seg R_CODE
	mov	ds,bx
	movzx	esi,si
	shl	esi,4			; DS:[ESI] point to R_CODE
	assume	ds:R_CODE

ifdef PICtrap
;QLEO	mov	ebx,[esi][p_DATA]      	; DS:[EBX] point to _DATA
;QLEO	assume	ds:_DATA

	or	ds:[esi][MasterIS],1	; virtualize the master ISR for IRQ0
endif
	jmp	pIRQHandler		; reflect interrupt
	assume	ds:nothing

EH8except:
ifndef	BugMode
	ProcessExcep ErrDouble
else
	pop	ebp
	db	0EAh			; far jump opcode
	dw	offset DCODE:_trap08	; offset
	dw	DEBC_GSEL		; selector
endif
;==============================================================================
;==
;==  ExceptHandler9: Coprocessor segment overrun
;==
;==  Entry:  Protected Mode via 386 Interrupt gate
;==	     No error code on stack
;==
;==  Exit:   Send to debugger
;==
;==============================================================================
ExceptHandler9:
	push	ebp			; fix stack for pIRQHandler
	movzx	ebp,sp
	push	9    			; interrupt level

ifndef LC910611
	push	ebx
	push	esi
	mov	bx,DATA32_GSEL
	push	ds
	mov	si,seg R_CODE

	mov	ds,bx
	movzx	esi,si
	shl	esi,4			; DS:[ESI] point to R_CODE
	assume	ds:R_CODE

	mov	ebx,[esi][p_DATA]	; DS:[EBX] points to _DATA
	assume	ds:_DATA
	mov	[ebx][IRQ1Event],TRUE	; set flag indicating IRQ1 ocurred
	assume	ds:nothing

	jmp	pIRQHandler
else
	jmp CheckInt
endif

EH9except:
ifndef	BugMode
	ProcessExcep ErrCoPseg
else
	pop	ebp
	db	0EAh			; far jump opcode
	dw	offset DCODE:_trap09	; offset
	dw	DEBC_GSEL		; selector
endif
;==============================================================================
;==
;==  ExceptHandler10: Invalid TSS fault
;==
;==  Entry:  Protected Mode via 386 Interrupt gate
;==	     Error Code on stack = Selector
;==
;==  Exit:   Send to debugger
;==
;==============================================================================
ExceptHandler10:
	push	ebp			; fix stack for pIRQHandler
	movzx	ebp,sp
	push	10    			; interrupt level
jmp CheckInt

EH10except:
ifndef	BugMode
	ProcessExcep ErrTSS
else
	pop	ebp
	db	0EAh			; far jump opcode
	dw	offset DCODE:_trap10	; offset
	dw	DEBC_GSEL		; selector
endif
;==============================================================================
;==
;==  ExceptHandler11: Segment not present fault
;==
;==  Entry:  Protected Mode via 386 Interrupt gate
;==	     Error Code on stack = Selector
;==
;==  Exit:   Send to debugger
;==
;==============================================================================
ExceptHandler11:
	push	ebp			; fix stack for pIRQHandler
	movzx	ebp,sp
	push	11    			; interrupt level
jmp CheckInt

EH11except:
ifndef	BugMode
	ProcessExcep ErrSegNP
else
	pop	ebp
	db	0EAh			; far jump opcode
	dw	offset DCODE:_trap11	; offset
	dw	DEBC_GSEL		; selector
endif
;==============================================================================
;==
;==  ExceptHandler12: Stack fault
;==
;==  Entry:  Protected Mode via 386 Interrupt gate
;==	     Error Code on stack = Selector or 0000
;==
;==  Exit:   Send to debugger
;==
;==============================================================================
ExceptHandler12:
	push	ebp			; fix stack for pIRQHandler
	movzx	ebp,sp
	push	12    			; interrupt level
jmp CheckInt

EH12except:
ifndef	BugMode
	ProcessExcep ErrStack
else
	pop	ebp
	db	0EAh			; far jump opcode
	dw	offset DCODE:_trap12	; offset
	dw	DEBC_GSEL		; selector
endif
;==============================================================================
;==
;==  ExceptHandler13: General protection fault
;==
;==  Entry:  Protected Mode via 386 Interrupt gate
;==	     Error Code on stack = Selector or 0000
;==
;==  Exit:   Send to debugger
;==
;==============================================================================
ExceptHandler13:
	push	ebp
	movzx	ebp,sp

ifdef BugMode
	push	ax
	mov	al,1011b
	out	20h,al
	in	al,20h

	test	al,100000b
	pop	ax
	jz	short EH13except
endif
ifdef BETA
	push	ax
	mov	al,1011b
	out	20h,al
	in	al,20h

	test	al,100000b
	pop	ax
	jz	short EH13except
endif

	push	13    			; interrupt level
jmp CheckInt
	add	sp,2

EH13except:
	test	[bp][VTFOE].VMTF_EFLAGShi,FLAGS_VM;Q: Virtual Mode?
	jnz	VmFault				  ; Y: try to handle it!
ifdef BugMode
	pop	ebp
	db	0EAh			; far jump opcode
	dw	offset DCODE:_trap13	; offset
	dw	DEBC_GSEL		; selector
endif
ifdef BETA
	int 1;BETA got here do to a protected mode GP fault
endif
	ProcessExcep ErrGP

;==============================================================================
;==
;==  ExceptHandler14: Page fault
;==
;==  Entry:  Protected Mode via 386 Interrupt gate
;==	     Error Code on stack = type of fault
;==
;==  Exit:   A page table is created to handle faulting address
;==								(PIW)
;==============================================================================
ExceptHandler14:
	push	ebp
	movzx	ebp,sp
	push	14    			; interrupt level

	push	ebx
	push	esi
	mov	bx,DATA32_GSEL
	push	ds
	mov	si,seg R_CODE

	mov	ds,bx
	movzx	esi,si
	shl	esi,4			; DS:[ESI] point to R_CODE
	assume	ds:R_CODE               ; DS:[EBX] point to _DATA

	mov	ebx,cr2
	or	ebx,ebx			;Q: Page Fault Exception?
	jz	pIRQHandler		; N: H/W interrupt

	pop	ds			; clear stack for exception processing
	pop	esi
	pop	ebx
	add	sp,2			; interrupt vector must be cleared

EH14except:
	call	PageFaultHandler	;Q: Manageable page fault?
	jc	short _exception	; N: error
	pop	ebp			; Y: restore regs
	add	sp,4			; throw away error code
	iretd

_exception:
ifndef	BugMode
	ProcessExcep ErrPage
else
	pop	ebp
	db	0EAh			; far jump opcode
	dw	offset DCODE:_trap14	; offset
	dw	DEBC_GSEL		; selector
endif
;==============================================================================
;==
;==  ExceptHandler15: N/A (Dummy handler) Reflect spurious interrupts.
;==
;==  Entry:  N/A
;==
;==  Exit:   N/A
;==
;==============================================================================
ExceptHandler15:
	push	ebp			; fix stack for pIRQHandler
	movzx	ebp,sp
	push	15    			; interrupt level
	push	ebx
	push	esi
	mov	bx,DATA32_GSEL
	push	ds
	mov	si,seg R_CODE
	mov	ds,bx
	movzx	esi,si
	shl	esi,4			; DS:[ESI] point to R_CODE
	jmp	pIRQHandler		; reflect interrupt

EH15except:
	ProcessExcep 15

;==============================================================================
;==
;==  ExceptHandler16: Coprocessor Error
;==
;==  Entry:  Protected Mode via 386 Interrupt gate
;==	     No error code on stack
;==
;==  Exit:   Send to debugger - GOES TO NOT PRESENT FAULT IN DEBUGGER FOR NOW
;==
;==============================================================================
ExceptHandler16:
ifndef	BugMode
	push	0
	push	0
	push	ebp
	movzx	ebp,sp
	ProcessExcep ErrCoPerr
else
	db	0EAh			; far jump opcode
	dw	offset DCODE:_trap07	; offset
	dw	DEBC_GSEL		; selector
endif

;==============================================================================
;==
;==  ExceptHandler17: Alignment Check
;==
;==  Entry:  Protected Mode via 386 Interrupt gate
;==	     Error code on stack = 0
;==
;==  Exit:   Send to debugger - GOES TO NOT PRESENT FAULT IN DEBUGGER FOR NOW
;==
;==============================================================================
ExceptHandler17:
ifndef	BugMode
	push	ebp
	movzx	ebp,sp
	ProcessExcep 17
else
	db	0EAh			; far jump opcode
	dw	offset DCODE:_trap07	; offset
	dw	DEBC_GSEL		; selector
endif

;==============================================================================
;==
;==  CheckInt: Check if entry is due to an exception or a H/W interrupt.
;==
;==  Entry:  Protected Mode
;==	EBP and interrupt number on STACK
;==
;==  Exit:
;==
;==============================================================================
CheckInt:
	push	ebx
	push	esi
	mov	bx,DATA32_GSEL
	push	ds
	mov	si,seg R_CODE
	push	ax

	mov	ds,bx
	movzx	esi,si
	shl	esi,4			; DS:[ESI] point to R_CODE
	assume	ds:R_CODE               ; DS:[EBX] point to _DATA

ifndef PICtrap
	mov	ebx,[esi][p_DATA]	; DS:[EBX] points to _DATA
	assume	ds:_DATA
	mov	ebx,[ebx][TSS].TSS386_ESP0
	sub	bx,size VM_TRAP_FRAME+VTFOE

	cmp	bp,bx			;Q: Exception with error code?
	je	short CIexcept		; Y: it is an exception
	pop	ax			; N: reflect interrupt
	jmp	pIRQHandler

else
	test	[esi][GenFlags],fNoINT	;Q: Interruptible protected mode kernel?
	jnz	short CInoINT		; N: check for an exception via stack

	cmp	[esi][MasterPICVec],DOS_MASTER_VECTOR	;Q: Need to check ISR?
	jne	short CIexcept				; N: it's an exception
;QLEO	mov	ebx,[esi][p_DATA]			; Y: get _DATA pointer
;QLEO	assume	ds:_DATA

	mov	ah,[bp][-2]		; get interrupt number
	mov	al,1011b
	out	20h,al
	in	al,20h			; read ISR from master PIC
;QLEO
	push	ax
	mov	al,[esi][LastOCW3]
	out	20h,al
	pop	ax
;QLEO
	xchg	al,ah
	bt	ax,ax			;Q: ISR bit set?
	jnc	short CIexcept		; N: must be an exception
	sub	ax,8			; Y: get IRQ number
	xor	ah,ah
	bts	ds:[esi][MasterIS],ax	;Q: Is this an exception before the EOI?
	pop	ax
	jnc	pIRQHandler		; N: reflect interrupt
	push	ax
endif

CIexcept:
	movzx	ebx,word ptr [bp][-2]	; interrupt number
	sub	bx,8			; zero relative
	mov	bx,cs:[Exception][ebx*2]
	mov	[bp][-2],bx
	pop	ax
	pop	ds
	pop	esi
	pop	ebx
	ret

ifdef PICtrap
CInoINT:
;
;QLEO Need to detect an exception/interrupt via stack depth!  QLEO
;
	cmp	bp,Stack0Size*4-size VM_TRAP_FRAME-VTFO	;Q: H/W interrupt from VM ?
	jne	short CIexcept			    	; N: it is an exception
	pop	ax				    	; Y: reflect interrupt
	jmp	pIRQHandler
endif

Exception label	word
	dw	offset _TEXT:EH8except
	dw	offset _TEXT:EH9except
	dw	offset _TEXT:EH10except
	dw	offset _TEXT:EH11except
	dw	offset _TEXT:EH12except
	dw	offset _TEXT:EH13except
	dw	offset _TEXT:EH14except
	dw	offset _TEXT:EH15except

;===============================================================================
;==
;==  CheckParity : Check for parity error and clear NMI.
;==		   This routine clears the parity error on the system board.
;==	           If the NMI/parity line is still set, a parity error is
;==	           assumed. The purpose of this routine is to distiguish
;==	           between true parity errors and NMIs from add in boards.
;==
;==  Entry: CLI
;==
;==  Exit: CLC = no parity error
;==	   STC = parity error
;==
;===============================================================================
CheckParity	proc	near
	push	ax

	in	al,PPI		; get parity error flags, reset then set
	jmp	$+2		; parity checking to reset parity on
	jmp	$+2		; system board
;
; Disable IOCHECK & PCHECK
;
	or	al,PPO_MASK_IOCHECK+PPO_MASK_PCHECK
	out	PPO,al		; disable them
	jmp	$+2
	jmp	$+2
	jmp	$+2
;
; Enable IOCHECK & PCHECK
;
	and	al,NOT (PPO_MASK_IOCHECK+PPO_MASK_PCHECK)
	out	PPO,al		; enable them system board parity now reset

	in	al,PPI		; get parity error flags again

	test	al,(PPI_IOCHECK OR PPI_PCHECK)	;Q: any parity errors still?
	jnz	short CPParity			;  Y: return parity
	clc					;  N: wasn't a parity error
CPexit:
	pop	ax
	ret
CPParity:
	stc
	jmp	short CPexit

CheckParity	endp

_TEXT	 ends				 ; end of segment
;
	end				; end of module

=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\emm386\errhndlr.asm ===
.386p
page	58,132
;******************************************************************************
	TITLE	ErrHndlr - Error Handler
;******************************************************************************
;   (C) Copyright MICROSOFT Corp. 1986-1991
;   (C) Copyright COMPAQ Computer Corp. 1986-1991
;
;    Title:	EMM386.EXE - MICROSOFT Expanded Memory Manager 386 Driver
;
;    Module:	ErrHndlr - Recover from exception and priveledged operation errors
;
;    Version:	2.00
;
;    Date:	June 6,1986
;
;    Authors:	Brad Tate
;
;******************************************************************************
;
;  CHANGES:
;
;    DATE     REVISION			DESCRIPTION
;  --------   --------   ------------------------------------------------------
;  06/06/86   Original
;  06/28/86   0.02	Name changed from CEMM386 to CEMM (SBP).
;  06/28/86   0.02	Removed STI at end of ErrHndlr (SBP).
;  06/28/86   0.02	Changed error # display to leading zeroes (SBP).
;  07/06/86   0.04	Changed assume to _DATA (SBP).
;  01/12/87   0.09	Added defines BOOT_KEY and CONTINUE to define
;			key make code for error handler input (SBP).
;  05/13/87   2.00	Moved to R_CODE segment (SBP).
;
;******************************************************************************
	page
;******************************************************************************
;
;  Functional description:
;
;	This module contains the code that displays an error message and
;	asks the user to continue or reboot.
;
;******************************************************************************
;
 	include	vdmseg.inc
 	include	vdmsel.inc
	include	emm386.inc
	include	kbd.inc
	include	emmfunct.inc
	include	emmdata.inc
	include oemdep.inc
	include	vm386.inc

;******************************************************************************
;  	Public Declarations
;******************************************************************************
;
	public	ErrHndlr		; Display message and continue or reboot
	public	Error_Flag
	public	EHReturnFar

;******************************************************************************
;  	Externs
;******************************************************************************
_DATA	segment
	extrn	pLastVMTF:word
_DATA	ends

R_CODE	segment
	extrn	ExitVirtual:far		; exit virtual mode
	extrn	RetReal:near		; return to real mode
;LEO	extrn	JumpReal:near		; continue in real mode

	Extrn	GoRealMode:near
	extrn	GoVirtualMode:near
	extrn	EHFarReturn:dword

ErrGoVirtualMode	proc	far
	call	GoVirtualMode
	jmp	dword ptr cs:[EHFarReturn]
ErrGoVirtualMode	endp


R_CODE	ends

R1_CODE	segment

	extrn	POE_Mess:byte		; privileged operation error
	extrn	POE_Num:byte 		; where to put error code
	extrn	POE_Len:abs		; length of message
	extrn	PEN_Mess:byte		; unrecoverable privileged error
	extrn	PEN_Num:byte 		; where to put error code
	extrn	PEN_Len:abs		; length of message
	extrn	EXCPE_Mess:byte		; exception error message
	extrn	EXCPE_Num:byte		; where to put error code
	extrn	EXCPE_Len:abs		; length of message
	extrn	DMASIZE_Mess:byte	; exception error message
	extrn	DMASIZE_Num:byte	; where to put error code
	extrn	DMASIZE_Len:abs		; length of message
	extrn	DMAMODE_Mess:byte	; exception error message
	extrn	DMAMODE_Num:byte	; where to put error code
	extrn	DMAMODE_Len:abs		; length of message
	extrn	egetc:near		; get keyboard character
	extrn	WaitKBD:near		; wait for keyboard ready

R1_CODE	ends

ATTR		EQU	07		; attribute for write string
WRSTR		EQU	1301h		; write string function code (format 1)
CPOSN		EQU	5*256+0		; cursor position to write

;
R1_CODE	segment
	ASSUME	CS:R1_CODE, DS:R1_CODE, ES:R1_CODE, GS:R1_CODE
;
;******************************************************************************
;		LOCAL DATA
;******************************************************************************

EUserDS		dw	0
EUserES		dw	0
EUserFS		dw	0
EUserGS		dw	0
EUserSS		dw	0
EUserSP		dw	0

Error_Flag	dw	0		; flags for Instruction Prefixes
masterp		db	0		; save master port value
slavep		db	0		; save slave port value
mode		db	0		; save mode
boot		db	0		; value to reboot
continue	db	0		; value to continue
;
;******************************************************************************
;
;	ErrHndlr - displays the appropriate error message and prompts the
;		    user for a character to continue or reboot.  The screen
;		    is cleared by this routine.  If the user chooses to
;		    continue, the system is in real mode.
;
;	*** This routine must be entered by a JUMP ***
;
;	entry:	ax = 0 => Privileged operation error
;		ax = 1 => Exception error
;		ax = 2 => Fatal DMA errors
;		bx = error number to display
;		STACK:
;		SS:[BP] -> points to saved EBP on GP fault stack frame
;		SS:[SP] -> bottom of pushad
;
;			=> to unwind:
;				popad
;				pop	ebp	; entry BP pts to here
;				add	sp,4	; throw away error code
;				iret
;
;
;
;
;	exit:	either reboot, or continue the system in real mode
;		via the JumpReal routine.
;
;	used:	none
;
;	stack:
;
;******************************************************************************
ErrHndlr	proc	near
;
	push	VDMD_GSEL	;LEO  access _DATA data
	pop	ds              ;LEO
	push	RCODEA_GSEL	;LEO  access R_CODE data
	pop	gs              ;LEO
	push	R1CODEA_GSEL
	pop	fs
	assume	ds:_DATA,gs:R_CODE, fs:R1_CODE

;
;  If a privilige error occurs while CEMM is nested more than one level deep
;  during interrupt processing, the user may not continue by turning CEMM off.
;  Thus, the following will change the privilige error to an exception which
;  will force a reboot.  This condition needs an error message which needs to
;  be documented.
;

	cmp	ax,PrivErr		; Q: Privilige error?
	jne	short EHcont		; N: continue
	cmp	[pLastVMTF],-1		; Q: Is CEMM nested more than one 
					; level?
	jne	short EHunrec		; Y: unrecoverable privileged error

	cmp	gs:[UMBHMA], TRUE	; Q: are we providing UMBs
	jne	EHcont			; N: continue

EHunrec:
	mov	ax,UnRecPrivErr		; Y: unrecoverable privileged error

EHcont:

;
;  Save error type and number
;
	mov	gs:[ErrType],ax	;LEO
	mov	gs:[ErrNum],bx  ;LEO

;
;  Setup RSS_GSEL in GDT to have same base as user stack
;
	mov	ax,GDTD_GSEL		; ES access to GDT
	mov	es,ax

	movzx	ebx,[bp][VTFOE].VMTF_SS	; get base address of user stack
	mov	fs:[EUserSS],bx		; save user stack segment
	shl	ebx,4
	mov	es:[RSS_GSEL][2],bx	; bits 0-15 of base address
	shr	ebx,16
	mov	es:[RSS_GSEL][4],bl	; bits 16-23
	mov	es:[RSS_GSEL][7],bh	; bits 24-31
;
;  Setup user stack with proper return address and CS:IP & flags inorder
;  to return to the user code.
;
	mov	bx,[bp][VTFOE].VMTF_ESP	; get offset for user stack

	mov	ax,RSS_GSEL		; access user stack via DS
	mov	es,ax

	mov	ax,[bp][VTFOE].VMTF_EFLAGS ; get user flags
	sub	bx,2			    ; and place it on the user stack
	mov	es:[bx],ax

	mov	ax,[bp][VTFOE].VMTF_CS	; get code segment
	sub	bx,2			; and place it on the user stack
	mov	es:[bx],ax

	mov	ax,[bp][VTFOE].VMTF_EIP; get instruction pointer
	sub	bx,2			; and place it on the user stack
	mov	es:[bx],ax

	movzx	esp,sp			; access only 64K
;
;  Save all segment registers for real mode
;
	mov	ax,[bp][VTFOE].VMTF_DS	; get user DS
	mov	fs:[EUserDS],ax

	mov	ax,[bp][VTFOE].VMTF_ES	; get user ES
	mov	fs:[EUserES],ax

	mov	ax,[bp][VTFOE].VMTF_FS	; get user FS
	mov	fs:[EUserFS],ax

	mov	ax,[bp][VTFOE].VMTF_GS	; get user GS
	mov	fs:[EUserGS],ax
;
;  Save user stack values
;
	mov	fs:[EUserSP],bx
;
	;
	; change to emm386's real mode stack. 
	;

	mov	ax,GDTD_GSEL		; ES access to GDT
	mov	es,ax

	xor	ebx,ebx
	mov	bx, seg R_STACK		; get emm386's real stack

	shl	ebx,4
	mov	es:[RSS_GSEL][2],bx	; bits 0-15 of base address
	shr	ebx,16
	mov	es:[RSS_GSEL][4],bl	; bits 16-23
	mov	es:[RSS_GSEL][7],bh	; bits 24-31

	lea	bx, R_STACK:RealStackTop
;
;  Switch to EMM386's stack
;
	mov	ax, RSS_GSEL
	mov	ss, ax
	mov	sp, bx
;
;  Return to virtual mode
;

	PJmp	RCODE_GSEL, R_CODE:ErrGoVirtualMode
EHReturnFar:

	pushad                  ;LEO
	push	ds              ;LEO
	push	es		;LEO

	push	seg R_CODE
	pop	es
	assume	es:R_CODE

	mov	ax, cs
	mov	ds, ax		; es = R1_CODE
	assume	ds:R1_CODE

	mov	ax,es:[ErrType]    ;LEO
	mov	bx,es:[ErrNum]     ;LEO

;
;  CEMM is OFF now
;
	mov	es:[Current_Mode],MODE_OFF
;

	push	bp			; save entry BP

	push	ax			; save input to this routine
	in	al,MASTER		; get value of master interrupt port
	mov	[masterp],al		; save it
	in	al,SLAVE		; get value of slave interrupt port
	mov	[slavep],al		; save it
	mov	al,DIS_MSTSLV		; value to disable master/slave int
	out	MASTER,al		; disable master
	out	SLAVE,al		; disable slave
	mov	al,DISABLE_NMI		; value to disable NMI
	out	NMI_CMD,al
kbdbusy:
	call	egetc			; q: is there stuff in keyboard buffer?
	jnz	short kbdbusy		; y: get it and pitch it
					; n: continue
	pop	ax			; get entry condition
	cmp	ax,PrivErr		 ;Q: Privileged error?
	jne	short excep		 ; N: try exception error
	mov	bp,offset R1_CODE:POE_Mess; Y: privileged error
	mov	cx,POE_Len
	mov	di,offset R1_CODE:POE_Num; error number location
	mov	[boot],BOOT_KEY		; key to boot
	mov	[continue],CONTINUE_KEY	; key to continue
	jmp	short print_msg
excep:
	cmp	ax,ExcpErr		    ;Q: Exception error?
	jne	short DMAsize		    ; N: try fatal DMA error
	mov	bp,offset R1_CODE:EXCPE_Mess ; Y: load up exception error
	mov	cx,EXCPE_Len		; length of msg
	mov	di,offset R1_CODE:EXCPE_Num	; error number location
	mov	[boot],ENTER_KEY		; key to reboot
	mov	[continue],0ffh		; can't continue
	jmp	short print_msg

DMAsize:
	cmp	ax,DMASizeErr		      ;Q: DMA buffer too small?
	jne	short DMAmode		      ; N: DMA mode
	mov	bp,offset R1_CODE:DMASIZE_Mess ; Y: load up DMASIZE error
	mov	cx,DMASIZE_Len		      ; length of msg
	mov	di,offset R1_CODE:DMASIZE_Num  ; error number location
	mov	ax,bx			      ; print new D parameter
	call	PrintAX
	mov	di,offset R1_CODE:DMAMODE_Num  ; fake b2asc
	mov	[boot],ENTER_KEY	      ; key to reboot
	mov	[continue],0ffh		      ; can't continue
	jmp	short print_msg
DMAmode:
	cmp	ax,DMAModeErr		      ;Q: DMA mode error?
	jne	short UnRecPriv		      ; N: Unrecoverable privileged
	mov	bp,offset R1_CODE:DMAMODE_Mess ; Y: load up DMAMODE error
	mov	cx,DMAMODE_Len		      ; length of msg
	mov	di,offset R1_CODE:DMAMODE_Num  ; fake b2asc
	mov	[boot],ENTER_KEY	      ; key to reboot
	mov	[continue],0ffh		      ; can't continue
	jmp	short print_msg
UnRecPriv:
	mov	bp,offset R1_CODE:PEN_Mess	; load up message
	mov	cx,PEN_Len			; length of msg
	mov	di,offset R1_CODE:PEN_Num	; error number location
	mov	[boot],ENTER_KEY		; key to reboot
	mov	[continue],0ffh			; can't continue

print_msg:
	mov	ax, ds
	mov	es, ax
	mov	ax,bx			; error number in ax
	call	b2asc			; convert to ascii
	mov	ah,0fh			; read video state
	int	10h
	mov	[mode],al		; save mode
	mov	ax,3			; set to mode 3
	int	10h			; standard 80 x 25 color
	mov	dx,CPOSN		; cursor position
	mov	bl,ATTR			; attribute
	mov	ax,WRSTR		; write string function code
	int	10h			; do it
	cli				; make sure int 10 didn't enable
key_loop:
	call	egetc			; get a character
	jz	short key_loop		; nothing there yet

	cmp	al,[continue]		; q: continue?
	je	short err_cont		; y
	cmp	al,[boot]		; q: boot?
	jne	short key_loop		; n: try again
;******************************************************************************
;
;		Reboot system
;
;******************************************************************************
	assume	ds:romdata
	mov	ax,romdata
	mov	ds,ax			; ds = romdata segment
	mov	[freset],0		; cold restart
	mov	al,0fh or DISABLE_NMI		; shutdown byte address/disable NMI
	out	NMI_CMD,al			; write CMOS address
	jmp	short $+2		; delay
	mov	al,0h			; shutdown code 0 = processor reset
	out	71h,al			; write shutdown code to shutdown byte
	call	WaitKBD			; wait for 8042 to accept command
	mov	al,0feh			; feh = pulse output bit 0 (reset)
	out	KbStatus,al		; reset processor
	db	0eah
	dw	0ffffh
	dw	0f000h
	hlt

	assume	ds:R1_CODE
;
;   here if USER elects to continue in real mode
;
err_cont:
	xor	ah,ah			; ah = 0 to set video mode
	mov	al,[mode]		; restore their mode
	int	10h
	cli				; turn them off...
;
;	restore master, slave, and NMI
;
	mov	al,[masterp]		; get value of master interrupt port
	out	MASTER,al		; restore it
	mov	al,[slavep]		; get value of slave interrupt port
	out	SLAVE,al		; restore it
	mov	al,ENABLE_NMI		; value to enable NMI
	out	NMI_CMD,al
;
	pop	bp			; restore entry BP

	pop	es	;LEO
	pop	ds	;LEO
	popad		;LEO

	mov	al,0Fh
	out	84h,al		; port 84/85 return to real sequence
	mov	al,00h
	out	85h,al
	jmp	$+2		; clear prefetch/avoid race cond

;
;  Restore segment resiters
;
	mov	ds,cs:[EUserDS]
	mov	es,cs:[EUserES]
	mov	fs,cs:[EUserFS]
	mov	gs,cs:[EUserGS]

	;
;  Switch to user stack
;
	mov	ss,cs:[EUserSS]
	mov	sp,cs:[EUserSP]

	iret		;LEO

;LEO	jmp	JumpReal


ErrHndlr	endp

page
;******************************************************************************
;
;	b2asc - converts binary to ascii decimal and store at DS:DI.
;		Stores 2 ascii chars.
;		Decimal # is right justified and filled on left with 0s.
;
;	entry:	ax = binary number
;		ds:di = place to store ascii chars.
;
;	exit:	ASCII decimal representation of number stored at R_CODE:DI
;
;	used:	none
;
;	stack:
;
;******************************************************************************
;
b2asc	proc    near
	push	ax
	push	cx
	push	dx
;
	xor	dx,dx			; clear word extension
	mov	cx,10
	div	cx          		; divide by power of 10
	add	al,'0'			; put into ascii format
	mov	ds:[di],al		; put ascii number into string
	add	dl,'0'
	mov	ds:[di+1],dl
;
	pop	dx
	pop	cx
	pop	ax
	ret				; *** return ***
b2asc	endp

;==============================================================================
;==
;==  PrintAX: Output the value in AX
;==
;==  Enter: AX 	    = Binary number to convert to decimal
;==	    DS:[DI] = place to store ascii chars.
;==
;==  Exit:  DS:[DI] = next character position
;==
;==============================================================================
PrintAX	proc	near
	push	ax
	push	cx
	push	dx

	mov	cx,10		; divide value
	xor	dx,dx		; clear dx
	div	cx		; ax/10 remainder in dx
	or	ax,ax		;Q: Was AX < 10?
	jz	short AXPrint	; Y: print decimal value
	push	dx		; N: Save result
	call	PrintAX 	; divide again
	pop	dx		; get previous result
AXPrint:			;
	add	dl,'0'          ; make it printable
	mov	ds:[di],dl		; place in buffer
	inc	di		; increment cursor position

	pop	dx
	pop	cx
	pop	ax
	ret
PrintAX	endp

R1_CODE	ENDS
	END

=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\emm386\i13.inc ===
ifndef INC_LIST
.xlist
endif
;=============================================================================
;==
;== (C) Copyright MICROSOFT Corp. 1989-1991
;== (C) Copyright COMPAQ Computer Corp. 1989-1991
;==
;==	Title:	EMM386.EXE - MICROSOFT Expanded Memory Manager 386 Driver
;==
;==	Module: I13.INC  - Include for int 13 support
;==
;==	Version: 1.00
;==
;==	Date:	July 24, 1991
;==
;==
;=============================================================================
;==
;==	Change Log:
;==
;==	DATE	 REVISION	Description
;==	-------- --------	--------------------------------------------
;== 	07/24/91 0.00	        Original
;==
;=============================================================================

FixedDrives	equ	8		; Fixed disks supported
FloppyDrives	equ	2 		; Floppy disks supported
TotalDrives	equ	FixedDrives+FloppyDrives

READ		equ	2
WRITE		equ	3
LONG		equ	8

.list	; end of i13.INC


=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\emm386\i386.asm ===
.386p
page	58,132
;******************************************************************************
	TITLE	i386.asm - Support Routines for protected mode system
;******************************************************************************
;
;   (C) Copyright MICROSOFT Corp. 1986-1991
;   (C) Copyright COMPAQ Computer Corp. 1986-1991
;
;   Title:    EMM386.EXE - MICROSOFT Expanded Memory Manager 386 Driver
;
;   Module:   i386.asm - Support Routines for protected mode system
;
;   Version:  0.04
;
;   Date:     January 31, 1986
;
;   Author:
;
;******************************************************************************
;
;   Change log:
;
;     DATE    REVISION			DESCRIPTION
;   --------  --------	-------------------------------------------------------
;   01/31/86  Original
;   05/12/86  A-RRH	Cleanup and segment reorganization
;   06/21/86  0.02	Added clds just in case (SBP).
;   06/28/86  0.02	Name changed from CEMM386 to CEMM (SBP).
;   07/06/86  0.04	changed assume to _DATA (SBP).
;
;******************************************************************************
;
;   Functional Description:
;
;	Steve Preston
;	January 18,1985
;
;	DESCRIPTION
;
;	These routines manage the various 386 memory management
;	tables and manipulate descriptors and selectors.
;
;	All the routines which manipulate descriptors are callable
;	in both real and protected mode.
;
;	In general all registers are preserved.
;
;	The following routines are provided:
;
;		SetPageEntry - set up an entry in a Page Directory on Page
;					Table.
;
;		GetPageEntry - retrieve a page dir/page table entry.
;
;		InitPages - initialize page directory and page table.
;
;		PageDirOff - convert 32 bit addr to page dir entry offset
;
;		PageTableOff - convert 32 bit addr to page table entry offset
;
;	WARNING This code is 386 specific, it will NOT run on an 8088.
;
;******************************************************************************
.lfcond 				; list false conditionals
;
	include VDMseg.inc
	include VDMsel.inc
	include desc.inc
	include page.inc

;******************************************************************************
; 		E X T E R N A L S
;******************************************************************************
LAST	SEGMENT
extrn	SegTo24:near
extrn	SetSegDesc:near
LAST	ENDS


;******************************************************************************
;		S E G M E N T   D E F I N I T I O N S
;******************************************************************************
LAST SEGMENT

    assume cs:LAST,ds:_DATA,es:_DATA

;**	SetGateDesc - set up Gate Descriptor entry
;
;
;	ENTRY	DX,AX = 32 bit offset of target routine
;		CX = target code segment selector
;		ES:[DI] = points to table entry
;		BL = access bits
;	EXIT	descriptor set.
;	USES	Flags, other regs preserved
;
;	WARNING This code only works on a 386. It can be called in
;		either mode.

	public SetGateDesc
SetGateDesc proc near
;
	push	ax
	push	di
;
	cld			; stings foward
;
	stosw				; store low word of offset
	mov	ax,cx
	stosw				; store selector
	mov	al,0
	mov	ah,bl
	stosw				; store access rights
	mov	ax,dx
	stosw				; store high word of offset
;
	pop	di
	pop	ax
	ret
SetGateDesc endp


;**	SetPageEntry - set up entry in Page Directory or Page Table
;
;
;	ENTRY	DX,AX = 32 bit address of page or page table
;		ES:[DI] = page directory or table entry to set
;		BX = access/status bits ( bits 0 - 11 )
;	EXIT	ES:[DI] = next page directory or table entry
;	USES	Flags, other regs preserved
;
;	WARNING This code only works on a 386. It can be called in
;		either mode.

	public SetPageEntry
SetPageEntry proc near
;
	push	ax
;
	cld			; strings foward
;
	and	bx,0FFFh	; turn off any bits in address range
	or	ax,bx		; mov status bits into AX
	stosw			; store status and addr bits 12 - 15
	mov	ax,dx		; AX = addr bits 16-31
	stosw			; store addr bits 16-31
;
	pop	ax
	ret
SetPageEntry endp


;**	GetPageEntry -	up entry in Page Directory or Page Table
;
;	ENTRY	ES:[DI] = page directory or table entry
;	EXIT	DX,AX = 32 bit address of page or page table
;		BX = access/status bits (bits 0 - 11).
;	USES	Flags, other regs preserved
;
;	WARNING This code only works on a 386. It can be called in
;		either mode.

	public GetPageEntry
GetPageEntry proc near
;
	mov	ax,ES:[DI]	; AX = low word of entry
	mov	bx,ax		; get access/status rights bits
	and	bx,00FFFh	; turn off address bits
;
	and	ax,0F000h	; turn off status bits
	mov	dx,ES:[DI+2]	; get high word of addr
;
	ret
GetPageEntry endp


;**	PageDirOff - convert 32 bit linear address to page directory offset
;
;
;	ENTRY	EAX = 32 bit linear address
;	EXIT	DI = offset in page dir to appropriate entry
;	USES	Flags, other regs preserved
;
;	WARNING This code only works on a 386. It can be called in
;		either mode.

	public PageDirOff
PageDirOff proc near
;
	push	ebx		; push EBX

	mov	ebx,eax		; EBX = EAX

	shr	ebx,22		; EBX[0:9] = EBX[22:31] = high 10 bits
	shl	bx,2		; *4 for dword indexing into table

	mov	di,bx		; DI = dir offset

	pop	ebx		; pop EBX
;
	ret
PageDirOff endp


;**	PageTableOff - convert 32 bit linear address to page table offset
;
;
;	ENTRY	EAX = 32 bit linear address
;	EXIT	DI = offset in page table to appropriate entry
;	USES	Flags, other regs preserved
;
;	WARNING This code only works on a 386. It can be called in
;		either mode.

	public PageTableOff
PageTableOff proc near
;
	push	ebx		; push EBX

	mov	ebx,eax		; mov EBX,EAX

	shr	ebx,12		; EBX[0:9] = EBX[12:21] = middle 10 bits
	and	bx,3FFh 	; only EBX[0:9]
	shl	bx,2		; *4 for dword indexing into table

	mov	di,bx		; DI has table offset

	pop	ebx		; pop	EBX
;
	ret
PageTableOff endp


LAST	ends
	end

=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\emm386\i286.asm ===
.386p
page	58,132
;******************************************************************************
	TITLE	i286.asm - Support Routines for protected mode system
;******************************************************************************
;
;   (C) Copyright MICROSOFT Corp. 1986-1991
;   (C) Copyright COMPAQ Computer Corp. 1986-1991
;
;   Title:    EMM386.EXE - MICROSOFT Expanded Memory Manager 386 Driver
;
;   Module:   i286.asm - Support Routines for protected mode system
;
;   Version:  0.02
;
;   Date:     January 31, 1986
;
;   Author:
;
;******************************************************************************
;
;   Change log:
;
;     DATE    REVISION			DESCRIPTION
;   --------  --------	-------------------------------------------------------
;   01/31/86  Original
;   02/05/86  A 	added is286, is386
;   05/12/86  B-RRH	Cleanup and segment reorganization
;   06/03/86  C-SBP	added push/pop es to Init_GDT and changed Ring 0
;			stack to STACK0 and STACK0_SIZE.
;   06/28/86  0.02	Name changed from CEMM386 to CEMM (SBP).
;   02/22/88  3.30 (*B) Added IsP9 routine to check for 80P9 processor (RDV).
;   07/13/88  3.31 (*C) Change IsP9 routine to Is386s and add Is386c (RDV).
;   08/19/88  3.31 (*C) Fix Is386s & Is386c to only set carry for non-386 (RDV).
;   01/15/89  4.00 (*D) Add generic password 8042 detect (RDV)
;
;******************************************************************************
;
;   Functional Description:
;
;	Anthony Short
;	26th Dec 1985
;
;	DESCRIPTION
;
;	These routines manage the various 286 memory management
;	tables and manipulate descriptors and selectors.
;
;	The routines which deal with descriptors use the following
;	register usage conventions:
;
;	BX	- selector of required descriptor. The selector may
;		  have RPL bits present, the routines ignore them.
;
;	CX	- SIZE IN BYTES of segment. NOTE: descriptors contain
;		  limits, not sizes (limit = size - 1). Since everyone
;		  else talks sizes, these routines do too, and do their
;		  own conversion.
;
;	DX	- second selector when needed
;
;	AH	- access rights byte
;
;	AL, DX	- 24 bit physical address
;
;	ES:0	- pointer to the desired descriptor table.
;
;	All the routines which manipulate descriptors are callable
;	in both real and protected mode.
;
;	In general all registers are preserved.
;
;	The following routines are provided:
;
;		SetDescInfo	- set descriptor information
;		SetSegDesc	- set segment descriptor information
;
;		SegTo24 	- convert segment number to 24 bit addr
;		SegOffTo24	- convert seg:offset to 24 bit addr
;
;		InitGdt 	- set up parts of GDT which cannot easily
;				  be initialised statically.
;
;	WARNING This code is 286 specific, it will NOT run on an 8088.
;
;******************************************************************************
.lfcond 				; list false conditionals


	include VDMseg.inc
	include VDMsel.inc
	include desc.inc

;******************************************************************************
;		E X T E R N A L  R E F E R E N C E S
;******************************************************************************
GDT	segment
	extrn	GDTLEN:abs
GDT	ends

IDT	segment
	extrn	IDTLEN:abs
IDT	ends

LAST SEGMENT

    assume cs:LAST

;**	SetDescInfo - set descriptor information
;
;	The limit field of a specified descriptor is set.
;	  (limit = size - 1).
;	The base address of the specified descriptor is set.
;	The access field of the specified descriptor is set.
;
;	ENTRY	BX = selector
;		ES:0 = descriptor table to use
;		CX = limit
;		AL, DX = 24 bit base address
;		AH = access rights byte
;	EXIT	None
;	USES	Flags, other regs preserved
;
;	WARNING This code only works on a 286. It can be called in
;		either mode.

	public SetDescInfo
SetDescInfo proc near
	push	bx			; save selector
	and	bl,SEL_LOW_MASK

;	fill in the limit field

	mov	es:[bx],cx

;	fill in base address

	mov	es:[bx + 2],dx
	mov	es:[bx + 4],al

;	fill in access rights byte

	mov	es:[bx + 5],ah
	pop	bx
	ret
SetDescInfo endp


;**	SetSegDesc - set segment descriptor information
;
;	The limit field of a specified descriptor is set.
;	  (limit = size - 1).
;	The base address of the specified descriptor is set.
;	The access field of the specified descriptor is set.
;
;	ENTRY	BX = selector
;		ES:0 = descriptor table to use
;		CX = size
;		AL, DX = 24 bit base address
;		AH = access rights byte
;	EXIT	None
;	USES	Flags, other regs preserved
;
;	WARNING This code only works on a 286. It can be called in
;		either mode.

	public SetSegDesc
SetSegDesc proc near
	dec	cx			; convert size to limit
	call	SetDescInfo		; set descriptor information
	inc	cx			; restore size
	ret
SetSegDesc endp


;**	SegTo24 - convert segment to 24 bit physical address
;
;	The real mode segment number is convert to a 24 bit addr
;
;	ENTRY	AX = segment
;	EXIT	AL, DX = 24 bit physical address
;	USES	AH, Flags, other regs preserved
;
;	WARNING This code only works on a 286, it can be called in
;		either mode.
	public	SegTo24
SegTo24 proc near
	mov	dl,ah
	shr	dl,4			; DH = high byte of 24 bit addr
	xchg	ax,dx			; AH = high byte, DX = segment
	shl	dx,4			; DX = low word of 24 bit addr
	ret
SegTo24 endp


;**	SegOffTo24 - convert seg:off to 24 bit physical address
;
;	The specified real mode segment:offset is converted to
;	a 24 bit physical address.
;
;	ENTRY	AX = segment
;		DX = offset
;	EXIT	AL, DX = 24 bit physical address
;	USES	AH, Flags, other regs preserved.
;
;	WARNING This code only works on a 286. It can be called in
;		either mode.

	public SegOffTo24
SegOffTo24 proc near
	push	cx

;	Convert AX:DX into 24 bit addr in AL, DX

	mov	ch,ah
	shl	ax,4
	shr	ch,4			; CH = high byte
	add	dx,ax			; DX = low word
	mov	al,ch			; AL = high byte
	adc	al,0			; propagate cy from low word

	pop	cx
	ret
SegOffTo24 endp

;******************************************************************************
;   Is386 - return type of processor (386 vs. 8088/86/286).
;	This routine relies on Intel-approved code that takes advantage
;	of the documented behavior of the high nibble of the flag word
;	in the REAL MODE of the various processors.  The MSB (bit 15)
;	is always a one on the 8086 and 8088 and a zero on the 286 and
;	386.  Bit 14 (NT flag) and bits 13/12 (IOPL bit field) are
;	always zero on the 286, but can be set on the 386.
;
;	For future compatibility of this test, it is strongly recommended
;	that this specific instruction sequence be used.  The exit codes
;	can of course be changed to fit a particular need.
;
;	CALLABLE FROM REAL MODE ONLY - FAR ROUTINE
;
;   ENTRY:  (none)
;   EXIT:   STC if 8088/86/286
;	    CLC if 386
;   USED:   none
;   STACK:  6 bytes
;------------------------------------------------------------------------------
	public	Is386
Is386	proc	FAR
	push	ax
	pushf				; save entry flags
;
	xor	ax,ax			; 0000 into AX
	push	ax
	popf				; try to put that in the flags
	pushf
	pop	ax			; look at what really went into flags
	test	ax,08000h		;Q: was high bit set ?
	jnz	short IsNot386_exit	;  Y: 8086/8088
	mov	ax,07000h		;  N: try to set the NT/IOPL bits
	push	ax
	popf				;      ... in the flags
	pushf
	pop	ax			; look at actual flags
	test	ax,07000h		; Q: any high bits set ?
	jz	short IsNot386_exit	;   N: 80286
					;   Y: 80386
Is386_exit:
	popf				; restore flags
	clc				;  386
	jmp	short I386_exit 	; and leave

IsNot386_exit:
	popf				; restore flags
	stc				; not a 386

I386_exit:
	pop	ax
	ret				; *** RETURN ***

Is386	endp

;*****************************************************************************C
;   Is386s - returns equal if Taurus. (Original code name for 386s)	     *C
;	This routine relies on the "COMPAQ 386" ID in the ROM and then       *C
;	checks the ROM family code for the Taurus system ('F').              *C
;   ENTRY:  (none)							     *C
;   EXIT:   ZF = 1 if Taurus (equal)					     *C
;	    ZF = 0 if not (not equal)					     *C
;	    CY set if ROM image not COMPAQ 386				     *C
;----------------------------------------------------------------------------*C
	public	Is386s			;				     *C
Is386s	proc	FAR			; check for Taurus		     *C
	push	ax
	push	bx			;				     *C
	push	es			;				     *C

	mov	bx,0F000h		; ROM segment			     *C
	mov	es,bx			;				     *C

	stc				; set carry			     *C
	cmp	word ptr es:[0FFE9h],'C3' ; COMPAQ 386 ROM?                  *C
	jne	short exit386s 		; nope				     *C
	clc				; clear carry			     *C
	cmp	byte ptr es:[0FFE4h],'F';Q: is it Taurus ROM?                *C
	je	short exit386s
	cmp	byte ptr es:[0FFE4h],'R';Q: is it CARRERA ROM?
	je	short exit386s
	cmp	byte ptr es:[0FFE4h],'D';Q: is it EAGLE ROM?
	je	short exit386s
	cmp	byte ptr es:[0FFE4h],'B';Q: is it a TITAN
	je	short exit386s
;
;  For future CPQ machines, checks for a 386s processor via CMOS
;
	call	chk_cmos		; check CMOS
	cmp	ax,0			;Q: Valid CMOS?
	jne	short exit386s		; N: assume not a 386s
	mov	al,24h
	call	R_CMOS			; read byte 24 of CMOS

	shr	ax,4			; get CPU type in low 3 bits
	and	ax,0111b		; clear all but low oder 3 bits
	cmp	ax,0101b		;Q: Is this a 386sx processor?
					; Y: indicate via ZF
					; N: indicate via NZ
exit386s:pop	es			;				     *C
	pop	bx
	pop	ax
	ret				; *** RETURN ***		     *C
Is386s	endp				;				     *C

;*****************************************************************************D
;   IsP8042 - returns equal if password 8042.                                *D
;   ENTRY:  (none)							     *D
;   EXIT:   ZF = 1 if 8042 (equal)					     *D
;	    ZF = 0 if not (not equal)					     *D
;----------------------------------------------------------------------------*D
	public	IsP8042		 	;				     *D
IsP8042 proc	FAR
	PUSH	AX
	CLI
	CALL	test_8042_type
	STI
	OR	AX, AX
	POP	AX
	RET
IsP8042 endp				;				     *D

;****************************************************************************
; The following code for detecting password 8042's is from the KP utility
;****************************************************************************
;*** Begin 8042.EQU and KP.EQU
BAD_CHAR		equ	042h
BIG_WAIT		equ	0ffffh
COMMAND_REG_8042	equ	064h
DATA_REG_8042		equ	060h	; 8042 IBUF & OBUF must be empty*/
GET_D_TO		equ	-4	; get data time out
IBUF_FULL_8042		equ	002h	; must be 0 before sending data
STATUS_REG_8042 	equ	064h
OBUF_FULL_8042		equ	001h	; must be 0 before sending data
WRITE_KBD_OBUF		equ	0d2h
;*** End 8042.EQU and KP.EQU
;*********************************************************************
;   test_8042_type - Determine the type of 8042 in this machine.
;
;   Function Prototype:
;	extern int far pascal test_8042_type( void );
;
;   ENTRY: None.
;   EXIT: Returns AX=0 (8042 of TEXAS/HORIZON/PS2)
;		  AX<>0 (see 8042.equ and 8042.h)
;   USED:
;   STACK:
;---------------------------------------------------------------------
	PUBLIC	test_8042_type
test_8042_type	PROC

	mov	al, WRITE_KBD_OBUF	; determine whether this is TEXAS or
	call	send_8042_cmd		; ZEBRA hardware by sending a new
					; 8042 command
	and	ax, ax			; Q: send successful
	JZ	SHORT t_8_t_3
	mov	al, BAD_CHAR		; this character should be echoed
	call	send_8042_data		; when read
	and	ax, ax			; Q: send successful
	JZ	SHORT t_8_t_3
	call	get_8042_data		; was the bad character echoed
	cmp	ax, BAD_CHAR		; Q: echo
	je	SHORT t_8_t_3 		;  Y: continue
	mov	ax, -1			; return bad h/w error code
	ret				; *** Return ***
t_8_t_3:
	xor	ax, ax			; ZERO -> success
	ret				; *** Return ***
test_8042_type	ENDP

;*********************************************************************
;   send_8042_cmd - send a command to the 8042.  Waits for the
;			 input & output buffers to be empty.
;
;		Not callable by 'C'.  Internal function used by IOPL
;		subroutines.
;
;   ENTRY:	AL - contains the command
;   EXIT:	AX = 0 command unsuccessfully sent
;		AX <> 0 command successfully sent
;   USED:
;   STACK:
;---------------------------------------------------------------------
send_8042_cmd	PROC	NEAR
	push	bx
	push	ax			; save the command
	call	wait_for_iobuf_empty	; wait for in & out buffers to empty
	pop	bx			; restore the command
	and	ax, ax			; Q: wait fail
	jz	SHORT s_8_c_ret		;  Y: don't output
	xchg	ax, bx			; move command into AX
	out	COMMAND_REG_8042, al
	mov	al, 1			; data sent successfully
s_8_c_ret:
	pop	bx
	ret				; *** Return ***
send_8042_cmd	ENDP

;*********************************************************************
;   send_8042_data - send data to the 8042.  Waits for the
;			 input & output buffers to be empty.
;
;		Not callable by 'C'.  Internal function used by IOPL
;		subroutines.
;
;   ENTRY:	AL - contains the data
;   EXIT:	AX = 0 data unsuccessfully sent
;		AX <> 0 data successfully sent
;   USED:
;   STACK:
;---------------------------------------------------------------------
send_8042_data	PROC	NEAR
	push	bx
	push	ax			; save the data
	call	wait_for_iobuf_empty	; wait for in & out buffers to empty
	pop	bx			; restore the data
	and	ax, ax			; Q: wait fail
	je	SHORT s_8_d_ret		;  Y: don't send data
	xchg	ax, bx			; move the data into AX
	out	DATA_REG_8042, al
	mov	al, 1			; data sent successfully
s_8_d_ret:
	pop	bx
	ret				; *** Return ***
send_8042_data	ENDP

;*********************************************************************
;   get_8042_data - get data from the 8042.  Waits for the
;		    output buffer to be full.
;
;		Not callable by 'C'.  Internal function used by IOPL
;		subroutines.
;
;   ENTRY:
;   EXIT:	AX >= 0 contains the data, AX < 0 failure.
;   USED:
;   STACK:
;---------------------------------------------------------------------
get_8042_data	PROC	NEAR
	call	wait_for_obuf_full	; wait for data to read
	and	ax, ax			; did the wait "time out"
	jz	SHORT g_8_d_f 		; jump if so
	in	al, DATA_REG_8042	; get the data
	xor	ah, ah			; remove hi-byte
	ret				; *** Return ***
g_8_d_f:
	mov	ax, GET_D_TO		; error return code
	ret				; *** Return ***
get_8042_data	ENDP

;*********************************************************************
;   wait_for_obuf_full - Wait for the 8042's output buffer to become
;			'full'.
;
;		Not callable by 'C'.  Internal function used by IOPL
;		subroutines.
;
;   ENTRY:
;   EXIT:	AX = 0 obuf never became full
;		AX <> 0 obuf is full
;   USED:	AX, CX
;   STACK:
;---------------------------------------------------------------------
wait_for_obuf_full	PROC	NEAR
	push	cx
	mov	cx, BIG_WAIT		; store a 'wait' value
loop_ofull_01:
	in	al, STATUS_REG_8042	; get the 8042 status
	test	al, OBUF_FULL_8042	; Q: Output buffer full
	loopz	loop_ofull_01		; keep looping until obuf is full
	xchg	ax, cx			; use count as return code
	pop	cx
	ret				; *** Return ***
wait_for_obuf_full	ENDP

;*********************************************************************
;   wait_for_iobuf_empty - Wait for the 8042's input and output
;			   buffer to become 'empty'.
;
;		Not callable by 'C'.  Internal function used by IOPL
;		subroutines.
;
;   ENTRY:
;   EXIT:	AX = 0 ibuf & obuf never became empty
;		AX <> 0 ibuf & obuf are empty
;   USED:	AX, CX
;   STACK:
;---------------------------------------------------------------------
wait_for_iobuf_empty	PROC	NEAR
	push	cx
	mov	cx, BIG_WAIT		; store a 'wait' value
loop_iompte_01:
	in	al, STATUS_REG_8042	; get the 8042 status
					; Q: Input & Output buffer full
	test	al, (IBUF_FULL_8042 OR OBUF_FULL_8042)
	loopnz	loop_iompte_01		;  Y: keep looping until ibuf&obuf empty
	xchg	ax, cx			; use count as return code
	pop	cx
	ret				; *** Return ***
wait_for_iobuf_empty	ENDP

;/*****************************************************************************
;
; Synopsis    : state = chk_cmos()
;               int state;      CMOS invalid configuration bit
;
; Description : Check CMOS invalid configuration bit.
;
; Returns     : CMOS invalid configuration bit.
;                       0 - CMOS configuration OK.
;                      !0 - CMOS configuration invalid.
;                           or CMOS checksum bad
; Alters      : AX
;
; History     : Kelan Silvester       04/01/1988
;
;*****************************************************************************/
public	chk_cmos
chk_cmos proc near

        mov     al,0EH                  ; read CMOS diagnostics port
        call    r_cmos                  ; get CMOS byte 0EH
        and     ax,0000000001010000B    ; Is CMOS good ?
        ret
chk_cmos endp

    page
;******************************************************************************
;
;   R_CMOS  - Read a byte from cmos RAM
;
;   Entry:  al = cmos byte to read
;
;   Exit:   al = value of cmos byte read
;
;   Regs:   None
;
;******************************************************************************
public	r_cmos
r_cmos  proc    near
        out     70h, al
        jmp     $+2
        jmp     $+2
        in      al, 71h
        ret             ; *** Return ***
r_cmos  endp

    page
;******************************************************************************
;
;   W_CMOS - Write a byte to cmos RAM
;
;   Entry:  al = cmos byte to write
;           ah = value to write
;
;   Exit:   None
;
;   Regs:   ax
;
;******************************************************************************
public	w_cmos
w_cmos  proc    near

        out     70h, al
        jmp     $+2
        jmp     $+2
        mov     al, ah
        out     71h, al

        ret             ; *** Return ***
w_cmos  endp

CMOS_CHK_HIGH   equ 2Eh
CMOS_CHK_LOW    equ 2Fh

    page
;******************************************************************************
;   W_CMOS_CHECKSUM -- update the CMOS Checksum
;
;       Read system configuration from CMOS (if CMOS valid)
;   This logic reads system configuration values from CMOS
;   and verifies that the corresponding checksum is correct.
;
;   Entry: none
;   Exit: none
;   Registers changed: none
;******************************************************************************
public	w_cmos_checksum
w_cmos_checksum proc near
        push    ax              ; save registers
        push    bx              ;  ...
        push    cx              ;  ...
        push    dx              ;  ...

        mov     ah, 10h                             ; Start with byte 10H.
        mov     cx, 1Eh                             ; Reads this many bytes.
        xor     bx, bx          ; Init checksum value.
        xor     dx, dx          ;
chk_1:
        mov     al, ah          ; Which byte to read.
        call    r_cmos          ; Read cmos byte
        mov     dl, al          ;
        add     bx, dx          ; Add value to checksum
        inc     ah              ; Point to next byte in CMOS.
        loop    chk_1           ; Loop until all bytes read.

    ; Write high byte of checksum.
chk_2:
        mov     al, CMOS_CHK_HIGH
        mov     ah, bh          ; Checksum (Hi)
        call    w_cmos          ; write cmos byte

    ; Write low byte of checksum.
        mov     al, CMOS_CHK_LOW
        mov     ah, bl          ; Checksum (Lo)
        call    w_cmos          ; write cmos byte

        pop     dx              ; restore registers
        pop     cx              ;  ...
        pop     bx              ;  ...
        pop     ax              ;  ...

        ret
w_cmos_checksum endp


LAST	ends
	end

=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\emm386\emmutils.asm ===
.386p
page	58,132
;******************************************************************************
	title	emmutils.asm - EMM utility functions
;******************************************************************************
;
; (C) Copyright MICROSOFT Corp. 1988-1991
; (C) Copyright COMPAQ Computer Corp. 1988-1991
;
; Title:	EMM386.EXE - MICROSOFT Expanded Memory Manager 386 Driver
;		EMMLIB.LIB - Expanded Memory Manager Functions Library
;
; Module:	EMM utility functions
;
; Version:	1.00
;
; Date:		November 1, 1988
;
; Author:	Dan Mazina (original)
;		Leo Cohen (designed and implemented memory management and
;			   mapping functions to improve performance) LC
;
;******************************************************************************
;
;   Change log:
;
;     DATE    REVISION			DESCRIPTION
;   --------  --------	-------------------------------------------------------
;   8/11/88	1	initial code
;******************************************************************************
;
;   Functional Description:
;	This module implements all of the utilities for the EMM interface.
;
;******************************************************************************

page
;******************************************************************************
; PUBLICS
;******************************************************************************
public	AllocEMSMem
public	AddFreeEMS
public	MoveHandleSpace
public	SaveWindowMapping
public	RestoreWindowMapping
public	GetModifyUsersStack
public	MapInWindows
public	ActivateRegSet

public	ValidateHandle
ifdef QEMS
public	GetHandleSpace
public	Get4kPages
public	GarbageCollect
public	ShiftHandles
public	SetWindows
public	FindWindowIndex
public	SetPT0Cntxt
public	RestorePT0Cntxt
public	FindNextFreeHandleSpace
endif
;******************************************************************************
; INCLUDES
;******************************************************************************
include	vdmseg.inc
include vdmsel.inc
include vm386.inc
include	page.inc
include	emmfunct.inc
include	emmdata.inc
include emm386.inc
include debmac.inc

ifdef BETA
include emmutils.pub
endif
;******************************************************************************
; EXTERNALS
;******************************************************************************
_TEXT	segment
	extrn	AllocateXMSpages:near
	extrn	QueryXMSpages:near
	extrn	FreeXMSpages:near
ifdef DEBUG
	extrn	pTestDbgIns:far
	extrn	pDebugPrintf:far
endif
_TEXT	ends

R_CODE	segment
R_CODE	ends

page
;=============================================================================
;==	C O D E  S E G M E N T
;=============================================================================
_TEXT	segment
assume	cs:_TEXT,ds:_DATA,ss:STACK,es:ABS0,gs:R_CODE
page
align 16
;=======================================================================
;==
;== AllocEMSMem: This routine searches the handle space for free EMS memory.
;==		 When found, it updates the handle structure of its findings.
;==
;== Entry: (Protected Mode)
;==	BX  = Number of EMS pages requested
;==	ESI = handle structure pointer which wants EMS memory
;==	    = -1, just compact the EMS space!
;==
;== Exit:  (Protected Mode)
;==	CY  = set, handle structure is not updated
;==	    = clear, handle structure is updated with EMS memory
;==	SI remains the same
;==                                                                 LC
;=======================================================================
AllocEMSMem	proc	near
;EnterCrit				; BEGIN CRITICAL SECTION
pushf
cli
;
;  Get number of available existing EMS pages
;
	mov	ax,[TopOfFreeEMSspace]	; top of free EMS handle space
	sub	ax,FIRST_HANDLE_PTE	; subtract start of handle space
	shr	ax,2			; convert to 16K pages
	sub	ax,[UsedEMSPages]	; number of free EMS pages

	cmp	ax,bx			;Q: Enough free EMS pages?
	jb	short AEMnotEnoughEMS	; N: error
;
;  Check if enough contiguous handle space is available
;
	movzx	edi,[TopOfUsedEMSspace]
	mov	ax,[TopOfFreeEMSspace]
	sub	ax,di
	shl	bx,2

	sub	ax,bx		;Q: Enough free EMS pages already contiguous?
	jb	short AEMGarbage; N: Oh no, reorganize handle space!
;
;  Give away the ems memory
;

	add	ds:[si].number_PTEs,bx
	xchg	ds:[si].base_PTE_index,di
	or	di,di			;Q: Did the handle already have pages?
	jz	short AEMcont		; N: continue
	mov	ds:[si].base_PTE_index,di; give back his old base
AEMcont:

;
;  Update the Handle space management data structures
;
	add	[TopOfUsedEMSspace],bx
;
;  Update amount of used EMS pages
;
	shr	bx,2
	add	[UsedEMSPages],bx
;
;  Set the allocated bit on the PTEs
;
	mov	di,ds:[si].base_PTE_index
	mov	bx,ds:[si].number_PTEs
	shr	bx,2
	mov	ax,fEMSPageAllocated
	mov	edx,[page_directory]
	mov	cx,4
AEMloop:
	or	word ptr es:[edx][edi*4],ax
	add	di,cx			; need to mark the first page only

	dec	bx			;Q Last EMS page?
	jnz	short AEMloop		; N: next
;ExitCrit				; END CRITICAL SECTION
popf
	clc
	ret

AEMGarbage:
;ExitCrit				; END CRITICAL SECTION
popf
	shr	bx,2
	neg	ax			; number of pages needed
	call	AddFreeEMS		; get enough free EMS space
	jmp	short AllocEMSMem	; allocate them

AEMnotEnoughEMS:
;ExitCrit				; END CRITICAL SECTION
popf
	push	bx
	sub	bx, ax			; # additional EMS pages needed
	call	GrowEMSPool
	pop	bx
	jnc	AllocEMSMem

	ret				; CY already set for failure

AllocEMSMem	endp

;===============================================================================
;==
;== GrowEMSPool:  This routine attempts to grow the EMS pool by allocating
;==		  XMS pages and adding them to the handle space.
;==
;== Entry: (Protected Mode)
;==	BX = Number of additional EMS pages needed
;== Exit:
;==	CY = clear if desired # EMS pages added, set if failed (none added)
;==	[TopOfFreeEMSspace] = updated
;== Used:
;==	AX
;==
;===============================================================================
	public	GrowEMSPool, GrowEMSPool_far

GrowEMSPool_far proc	far
	call	GrowEMSPool
	ret
GrowEMSPool_far endp

GrowEMSPool	proc	near

	AssertSegReg	gs, RCODEA_GSEL

	;;;pDebugF "GrowEMSPool: need %d EMS pages\n", bx

;  Make sure there is enough handle space for the additional EMS pages

	mov	ax, [BotOfVCPIspace]
	sub	ax, [TopOfFreeEMSspace]
	shr	ax, 2			; 4k pages to 16k pages
	cmp	ax, bx			; bx already set for 4k pages
	jb	short GEP_exit		; CY is already set

;  Verify that enough XMS memory is available

	call	QueryXMSpages		; Q: enough XMS around?
	jc	short GEP_exit		; N:

;  Allocate additional XMS pages and update PTEs

	call	AllocateXMSpages	; allocate BX 16k pages

	; CY set or cleared by AllocateXMSpages

ifdef DEBUG
	jnc	short @f
	pDebugF "GrowEMSPool failed!\n"
@@:
endif

GEP_exit:
	ret

GrowEMSPool	endp

;===============================================================================
;==
;== ShrinkEMSpool:	This routine attempts to shrink the EMS pool by
;==		  releasing XMS pages in the free EMS space.
;==
;== Entry: (Protected Mode)
;==
;== Exit:
;==
;== Used:
;==	AX
;==
;===============================================================================
	public	ShrinkEMSpool, ShrinkEMSpool_far

ShrinkEMSpool_far proc	far
	call	ShrinkEMSpool
	ret
ShrinkEMSpool_far endp


ShrinkEMSpool	proc	near

	AssertSegReg	gs, RCODEA_GSEL

	push	bx

;  Garbage collect free EMS so all free EMS page PTEs are together

	mov	ax, [TopOfFreeEMSspace]
	sub	ax, FIRST_HANDLE_PTE
	shr	ax, 2
	sub	ax, [UsedEMSPages]
	shl	ax, 2			; ax = # free 4k pages in EMS pool

	mov	bx, [TopOfFreeEMSspace] ; skip garbage collection if free
	sub	bx, [TopOfUsedEMSspace] ;   space is already collected
	cmp	ax, bx
	jbe	short SEP_free_xms_pages

	call	AddFreeEMS		; garbage collect free EMS space

SEP_free_xms_pages:

	call	FreeXMSpages		; release free XMS pages

	pop	bx

	ret

ShrinkEMSpool	endp

page
align 16
;===============================================================================
;==
;== AddFreeEMS: This routine searches the used EMS space for free EMS pages and
;==		moves them to the free EMS space.
;==
;== Entry: (Protected Mode)
;==	AX = number of 4K pages needed in free EMS space
;==
;== Exit:  (Protected Mode)
;==	[TopOfUsedEMSspace] = updated
;==	EBX,ESI (are not modified)
;==                                                                     LC
;===============================================================================
	public	AddFreeEMS, AddFreeEMS_far

AddFreeEMS_far	proc	far
	call	AddFreeEMS
	ret
AddFreeEMS_far	endp

AddFreeEMS proc	near
	push	bx
	push	si
;
;  Start at the top of the used EMS space
;
	mov	si,FIRST_HANDLE_PTE
	mov	dx,fEMSPageAllocated
	mov	ecx,[page_directory]
;EnterCrit				; BEGIN CRITICAL SECTION
pushf
cli
	movzx	edi,[TopOfUsedEMSspace]
	mov	bx,4
AFEfindUsed:
	test	word ptr es:[ecx][edi*4-4*4],dx	;Q: Is it free?
	jnz	short AFEfoundUsed		; N: find one

	sub	di,bx
	cmp	si,di			;Q: Reached end of handle space?
	jb	short AFEfindUsed	; N: continue
;
;  Found a used page (or reached end); look until a free page is found.
;
AFEfoundUsed:
	mov	bx,di
	xchg	bx,[TopOfUsedEMSspace]
;ExitCrit				; END CRITICAL SECTION
popf
	sub	bx,di			; number of free PTEs found on top
	sub	ax,bx			;Q: Enough to satisfy request?
	jle	short AFEexit		; Y: done

AFEfindFreeX:
	cmp	si,di			;Q: Reached end of handle space?
	jae	short AFEexit		; Y: we can't do anything else

	mov	bx,4
AFEfindFree:
	test	word ptr es:[ecx][edi*4-4*4],dx	;Q: Is it free?
	jz	short AFEfoundFree		; Y: move space

	sub	di,bx
	cmp	si,di			;Q: Reached end of handle space?
	jb	short AFEfindFree	; N: continue
	jmp	short AFEexit		; Y: can't do anything else!
align 16
;
;  A free entry has been found, need to find out how many contiguous pages
;  it represents, shift all handles down, and add this to free EMS pages.
;
AFEfoundFree:
;EnterCrit				; BEGIN CRITICAL SECTION
pushf
cli
	push	di
AFEfindUsed2:
	test	word ptr es:[ecx][edi*4-4*4],dx	;Q: Is it used?
	jnz	short AFEmoveHandles		; Y: move handles

;QLEO	sub	ax,bx               	;Q: Enough to satisfy request?
;QLEO	jz	short AFEmoveHandles	; Y: exit

	sub	di,bx
	cmp	si,di			;Q: Reached end of handle space?
	jb	short AFEfindUsed2	; N: continue
;
;  Move the handle space down
;
AFEmoveHandles:
	pop	bx
	sub	bx,di			; number of entries to move PTEs

	call	MoveHandleSpace

;ExitCrit				; END CRITICAL SECTION
popf
	sub	ax,bx			;Q: Enough to satisfy request?
	jg	short AFEfindFreeX	; N: continue searching down
;QLEO	or	ax,ax			;Q: Enough to satisfy request?
;QLEO	jnz	short AFEfindFreeX	; N: continue searching down
AFEexit:
	pop	si
	pop	bx
	ret

AddFreeEMS	endp

page
align 16
;==============================================================================
;==
;== MoveHandleSpace: This routine moves the handle space and updates the handle
;==		     data structures to reflect this move.  It will move all
;==		     the pages in the range from DI to [TopOfUsedEMSspace] down by
;==		     BX entries.  It will relocate the PTEs from DI-BX to DI
;==		     to the [TopOfUsedEMSspace]-BX region.  Finally, it will update
;==		     all the EMS handles which were affected by this move.
;==
;== Entry: (Protected Mode)
;==	BX  = number of slots to move the PTEs
;==	DI  = starting PTE entry to move
;==	ECX = page directory linear address
;==	[TopOfUsedEMSspace] = last PTE entry to move
;==	This routine should be called with interrupts OFF (critical section)
;==
;== Exit:  (Protected Mode)
;==	[TopOfUsedEMSspace] = entry [TopOfUsedEMSspace] - BX
;==	EAX,BX,CX,ESI,EDX,EDI: same
;==
;==                                                                    LC
;==============================================================================
MoveHandleSpace	proc near
	push	eax
	push	ecx
	push	edx
	push	esi
	push	edi
;
;  Make sure we have something to move!
;
	or	bx,bx		;Q: Move anything?
	jz	MHSexit		; N: exit
;
;  Is this handle already on top?
;
	add	di,bx			; entry after this handle
	cmp	di,[TopOfUsedEMSspace]	;Q: Is this handle on top?
	jae	MHSexit			; Y: don't need to move handle
	sub	di,bx			; start index of this handle
;
;  Move handle space range from DI=>DI+BX-1 to ScratchHandleSpace
;
	push	bx
	mov	esi,[ScratchHandleSpace]
	xchg	esi,edi
	mov	dx,4
MHSloop1:
	mov	eax,es:[ecx][esi*4]
	STOS_DWORD_PTR_ES_EDI
	add	si,dx
	sub	bx,dx
	jnz	short MHSloop1
;
;  Move handle space range DI+BX=>[TopOfUsedEMSspace] to DI
;
	pop	bx
	push	si
	mov	di,si			; source index
	shl	si,2			; source offset
	add	esi,ecx			; source address
	movzx	ecx,[TopOfUsedEMSspace]	; source end index
	sub	cx,bx			; destination end index
	mov	[TopOfUsedEMSspace],cx	; will be the new top of used EMS space
	add	cx,bx			; again, source end index
	sub	cx,di			; number of entries to transfer
	movzx	edi,bx			; index distance to destination
	shl	di,2			; offset to destination
	sub	edi,esi
	neg	edi			; destination address
	REP_MOVS_DWORD_USING_ES_ESI
;
;  Move entries from scratch handle space to the free EMS space
;
	mov	esi,[ScratchHandleSpace]
	mov	edx,1000h
	mov	cx,bx
	shr	cx,2
MHSloop3:
	LODS_DWORD_PTR_ES_ESI
	STOS_DWORD_PTR_ES_EDI
	and	ax,not fEMSPageAllocated
	add	eax,edx
	STOS_DWORD_PTR_ES_EDI
	add	eax,edx
	STOS_DWORD_PTR_ES_EDI
	add	eax,edx
	STOS_DWORD_PTR_ES_EDI
	dec	cx
	jnz	short MHSloop3
;
;  Go through the handle table structures and update the ones we moved down
;
	pop	si			; starting index for handle space move
	movzx	eax,[total_handles]
	mov	edx,[hndl_tbl_ptr]
MHSfindHandle:
	mov	cx,[edx][eax*4-4].base_PTE_index
	cmp	cx,FREE
	je	short MHSnextHandle
	cmp	cx,si
	jb	short MHSnextHandle
	sub	cx,bx
	mov	[edx][eax*4-4].base_PTE_index,cx
MHSnextHandle:
	dec	ax
	jnz	short MHSfindHandle
MHSexit:
	pop	edi
	pop	esi
	pop	edx
	pop	ecx
	pop	eax
	ret
MoveHandleSpace endp

;***********************************************************************
; CheckFreeEMS: Determine if a desired number of free EMS pages exist,
;		or if enough EMS pages can be made available.
;
; Entry: (Protected Mode)
;	BX = Number of free EMS (16k) pages needed
; Exit:
;	CY = clear if desired # EMS pages are free, set if not
; Uses:
;	AX
;
;***********************************************************************
	public	CheckFreeEMS
CheckFreeEMS	proc	near

	AssertSegReg	gs, RCODEA_GSEL

	mov	ax,[TopOfFreeEMSspace]	; top of free EMS handle space
	sub	ax,FIRST_HANDLE_PTE	; subtract start of handle space
	shr	ax,2			; convert to 16K pages
	sub	ax,[UsedEMSPages]	; number of free EMS pages

	sub	ax, bx			; Q: already have enough pages?
	jnc	short CFE_ret		; Y: exit now

	; Don't have enough EMS available, see if the rest can be allocated
	; from XMS.

	neg	ax			; number additional EMS pages needed
	push	bx
	mov	bx, ax
	call	QueryXMSPages		; sets CY if needed pages unavailable
	pop	bx

CFE_ret:
	ret

CheckFreeEMS	endp

;***********************************************************************
; GetFreeEMS:	Return the current # of free EMS pages, and the # of EMS
;		pages that can be grabbed from XMS.
;
; Entry: (Protected Mode)
;	None.
; Exit:
;	AX = number of free EMS (16k) pages
; Used:
;	BX
;
;***********************************************************************
	public	GetFreeEMS, GetFreeEMS_far

GetFreeEMS_far	proc	far
	call	GetFreeEMS
	ret
GetFreeEMS_far	endp

GetFreeEMS	proc	near

	AssertSegReg	gs, RCODEA_GSEL

	mov	ax,[TopOfFreeEMSspace]	; top of free EMS handle space
	sub	ax,FIRST_HANDLE_PTE	; subtract start of handle space
	shr	ax,2			; convert to 16K pages
	sub	ax,[UsedEMSPages]	; number of free EMS pages

	mov	bx, [BotOfVCPIspace]
	sub	bx, [TopOfFreeEMSspace]
	jbe	short GF_EMS_exit
	shr	bx, 2			; bx = # additional 16k XMS pages that
					;   could be added to EMS pool

	push	ax			; save free EMS pages

	call	QueryXMSPages		; Q: are bx 16k pages free?
	jc	GF_EMS_under_max	;  N: ax has # available pages

	mov	ax, bx			;  Y: set ax = # we can use (may be
					;     more free than can be used)
GF_EMS_under_max:
	pop	bx			; bx = # free EMS pages

	add	ax, bx			; free EMS + available XMS

GF_EMS_exit:

	;;;pDebugF "GetFreeEMS: %d free EMS pages.\n", ax

	ret

GetFreeEMS	endp

align 16
;***********************************************************************
; ValidateHandle
;	CY = !ValidateHandle(DX);
;
; ENTRY	(BP) = stack frame pointer
;	(DX) = handle
; EXIT 	(EDX) = validated handle
;	CY = set if the handle is invalid, reset otherwise
; DESCRIPTION:
;	This routine checks the handle in DX and verifies if it is valid.
;	If it is not valid then the carry flag is set.
; CRITICAL SECTIONS:
;	This procedure may be called with interrupts enabled.  It is
;	the user's responsibilty to insure that a handle does not
;	become invalid between the time it is validated and the time
;	it is used.
;***********************************************************************
	ASSUME	DS: _DATA
ValidateHandle	proc	near

	cmp	dx,[total_handles]	; Handle in range?
	jae	short vh0		;  no, error

;	The PTE index is checked to insure that it is valid and
;	that the handle is active.

	movzx	edx,dx
	push	eax
	mov	eax, [hndl_tbl_ptr]	; (EAX) = pointer to handle table
	cmp	word ptr ds:[eax+edx*4].base_PTE_index, FREE ; Handle in use?
	pop	eax
	je	short vh0		;  no, error
	clc				; Handle is valid
	ret

;	If this point is reached than an error occured. The
;	error code is set and the carry flag reset.

vh0:	mov	byte ptr [bp.reg_EAX + 1],INVALID_HANDLE
	stc
	ret

ValidateHandle	endp

align 16
;==============================================================================
;==
;== SaveWindowMapping: This function saves the current mapping register state
;==		       into the save area specified.  The current mapping state
;==		       consists of the number of window mappings followed by
;==		       the mappings themselves.
;==
;==                      ͻ
;==                        Pn page 0    4h*(n+1)
;==                      Ķ
;==			 |             |
;==                      Ķ
;==                        P2 page 0    0Ch
;==                      Ķ
;==                        P1 page 0    08h
;==                      Ķ
;==                        P0 page 0    04h
;==                      Ķ
;==                       Head   -1    00h (-1: indicates full map)
;==                      ͼ
;==
;== Entry: (Protected Mode)
;==	ES:EDI = pointer to the save area buffer
;==
;== Exit:  (Protected Mode)
;==	EAX,EBX,CX,ESI,EDI destroyed (note: EDX remains the same)
;==                                                                    LC
;=============================================================================
SaveWindowMapping proc	near
;
;  Header 4 bytes requested by Microsoft
;
	mov	ax, 'C'+'O'+'M'+'P'+'A'+'Q'
	shl	eax,16
;
;  Indicate this to be a full mapping (-1)
;
	dec	ax

	STOS_DWORD_PTR_ES_EDI

	mov	ebx,[page_tables]
	movzx	ecx,[number_EMS_windows]	   ; number of windows to save
SWMloop:
	movzx	esi,[EMS_window_location][ecx*2-2] ; get EMS window location
	lea	esi,es:[ebx][esi*4]		   ; address of PTE

	MOVS_DWORD_USING_ES_ESI

	dec	cx			;Q: Anymore EMS pages?
	jnz	short SWMloop		; Y: continue
 	ret				; N: all done
SaveWindowMapping	endp

align 16
;==============================================================================
;==
;== RestoreWindowMapping: This function saves the current mapping register
;==			  state into the save area specified.  The current
;==			  mapping state consists of the number of window
;==			  mappings followed by the mappings themselves.
;==
;==                      ͻ
;==                        Pn page 0    4h*(n+1)
;==                      Ķ
;==			 |             |
;==                      Ķ
;==                        P2 page 0    0Ch
;==                      Ķ
;==                        P1 page 0    08h
;==                      Ķ
;==                        P0 page 0    04h
;==                      Ķ
;==                       Head   -1    00h (-1: indicates full map)
;==                      ͼ
;==
;== Entry: (Protected Mode)
;==	ES:ESI = pointer to the restore buffer
;==
;== Exit:  (Protected Mode)
;==	EAX,EBX,CX,ESI,EDI destroyed (note: EDX remains the same)
;==
;== CRITICAL SECTIONS:
;==	The copy from user space is a critical section, because we
;==	do not want to be interrupted when we have copied in a partial
;==	EMS_window entry, as the locgical page number might not be
;==	appropriate for the handle.  Once the copy is done, interruptions
;==	are allowable given that, if we are interrupted, the interruptor
;==	must return control to us with our mapping data structures in
;==	the same state that they were in when we were interrupted.
;==	There ARE critical sections inside SetWindows, since
;==	manipulates the page tables, and GarbageCollects and Reallocates
;==	can cause the data in these page tables to move around.
;==                                                                     LC
;=============================================================================
RestoreWindowMapping proc near
;
;  Make sure this is a full mapping buffer
;
	lods	dword ptr es:[esi]		; (EAX) = header

	inc	ax            			;Q: Is this a valid full map?
	jnz	short RWMerror			; N: error
	shr	eax,16
	cmp	ax, 'C'+'O'+'M'+'P'+'A'+'Q'	;Q: Expected signature?
	jne	short RWMerror			; N: error

	mov	bx,P_SIZE
	movzx	ebx,bx
 	movzx	ecx,[number_EMS_windows]		; number of windows to save
RWMloop:
	movzx	edi,[EMS_window_location][ecx*2-2]	; get EMS window location
	shl	di,2
	add	edi,[page_tables]		; address of PTE

	LODS_DWORD_PTR_ES_ESI
	STOS_DWORD_PTR_ES_EDI
	add	eax,ebx
	STOS_DWORD_PTR_ES_EDI
	add	eax,ebx
	STOS_DWORD_PTR_ES_EDI
	add	eax,ebx
	STOS_DWORD_PTR_ES_EDI

	dec	cx			;Q: Anymore EMS pages?
	jnz	short RWMloop		; Y: continue

	mov	eax,cr3
	mov	cr3,eax

 	ret				; N: all done

RWMerror:
	mov	byte ptr [bp][reg_EAX+1],WINDOW_INDEX_RANGE
	stc
	ret
RestoreWindowMapping	endp


page
align 16
;***********************************************************************
; GetModifyUsersStack
;
; ENTRY:
;	AX - the signed integer amount to modify the stack by
; EXIT:
;	EDI - a 32 bit linear address pointing to the user's stack
; DESCRIPTION:
;	This routine is used for generating and manipulating the user's
;	stack.  This is needed because the location of the user's stack
;	differs depending on how the Int 67h call was done.  If the user
;	had CEMM on (in protected mode) then the stack address is located
;	on the fault stack frame on the ring zero stack.  If CEMM was off
;	(in real mode) then the stack address is in a special data variable.
; CRITICAL SECTIONS:
;	Assuming that we can only enter EMM386.EXE once from real mode
;	(meaning if we were to reenter it, we'd have to be in protected
;	mode), then this procedure is reentrant.
;***********************************************************************
GetModifyUsersStack proc near
	push	eax

;	Check the ring zero stack pointer to see if CEMM is in
;	auto mode with cemm inactive.
;	QLEO Need new mechanism to determine AUTO mode.

	cmp	sp,VMT_STACK - size RegisterStack_struc
	ja	short gmus1

;	If CEMM is on, then pull the user's SS:SP out of the fault
;	stack frame and put it into EDI.

	push	bp
	mov	bp,word ptr [bp.stack_frame_EBP]
	movzx	edi,word ptr [bp.VTFO+VMTF_SS]
	shl	edi,4
	add	[bp.VTFO+VMTF_ESP],ax
	movzx	eax,word ptr [bp.VTFO+VMTF_ESP]
	add	edi,eax
	pop	bp

gmus0:	pop	eax
	ret

;	If CEMM is Inactive, then pull the user's SS:SP out of the
;	special saved locations and put it into EDI.

gmus1:
;LEO	movzx	edi,gs:[EMM_SS_Save]
;LEO	shl	edi,4
;LEO	add	gs:[EMM_SP_Save],ax
;LEO	movzx	eax,gs:[EMM_SP_Save]

;
;  Get base address from GDT selector for user stack (RSS_GSEL)
;
	push	ds
	push	GDTD_GSEL
	pop	ds

	add	gs:[UserSP],ax		; fix user stack pointer
	mov	di,gs:[UserSS]		; get selector
	and	di,0FFF8h		; make it an offset into GDT

	mov	eax,[di+1]		; get base (bits 0-23) in high 3 bytes
	mov	al,[di+7]		; (AL) = base bits 24-31
	ror	eax,8			; (EAX) = base

	movzx	edi,gs:[UserSP]
	add	edi,eax			; (EDI) = user stack linear address
	jmp	short gmus0		; Go return

GetModifyUsersStack endp

even
align 16
;==============================================================================
;==
;== MapInWindows:  This routine takes an array of window/page pairs and maps
;==		   them into the current window mapping.  The array consists
;==		   of either a logical window index or window segment address
;==		   followed by the EMS page to be mapped to it.  The format of
;==		   the window index/window segment is determined by the value
;==		   passed in AL.
;==
;== Entry: (Protected Mode)
;==	[BP]:AL = window location format, 0-window index, 1-window segment
;==	ES:ESI  = a pointer to an array of pages/windows to map in
;==	EDX     = handle strucutre pointer
;==	CX      = number of pages to map in
;==
;== Exit:  (Protected Mode)
;==	[BP]:AH= return code (if error ocurred)
;==	All registers destroyed!
;==                                                                     LC
;=============================================================================
MapInWindows	proc	near
;
;  If number of entries is zero, we're done!
;
	jcxz	short MIWexit		; done if nothing to map

	cmp	cx,[number_EMS_windows]	;Q: Too many windows?
	ja	MIWinvPhyPage		; Y: error

MIWloop:
;
;  Get the logical page and segment/index for the physical EMS 16k page
;
	lods	dword ptr es:[esi]
	movzx	ebx,ax			; (EBX) = logical page number
	shr	eax,16			; (EDI) = physical page number
	mov	edi,eax

	test	byte ptr [bp][reg_EAX],1;Q: Segment or index?
	jz	short MIWidxToPTE
;
;  Verify window segment
;
	or	al,al			;Q: Is this segment bounded by 16K?
	jnz	short MIWinvPhyPage	; N: error
	shr	di,8
	cmp	[EMSsegLoc][di],-1	;Q: Is this a valid window segment?
	je	short MIWinvPhyPage	; N: error

MIWsource:
	mov	ax,di
	shl	di,2			; PTE offset
	add	edi,[page_tables]	; EAX = PTE address

	cmp	bx,UNMAP_WINDOW_OPCODE
	je	short MIWunmap
;
;  Validate logical page range
;
	test	bh,0C0h			;Q: Is logical page too large?
	jnz	short MIWinvLogPage	; Y: error
	shl	bx,2			; N: convert to 4K pages

	cmp	bx,ds:[edx].number_PTEs	;Q: Is logical page within valid range?
	jae	short MIWinvLogPage	; N: error

	xchg	eax,ecx
	xchg	ebx,esi
	mov	cl,4

;EnterCritical			; base PTE index for handle may change
pushf
cli
;
;  Access handle space, and map logical page
;
	add	si,ds:[edx].base_PTE_index
	shl	si,2			; quick edi*4
	add	esi,[page_directory]	; access handle space

	REP_MOVS_DWORD_USING_ES_ESI

;debug	ExitCritical			; recalculate base PTE index for handle
popf
	mov	esi,ebx
	mov	cx,ax

	dec	cx
	jnz	short MIWloop

	mov	eax,cr3
	mov	cr3,eax
MIWexit:
	clc
	ret
align 16
MIWidxToPTE:
;
;  Verify window index
;
	cmp	[xma2ems],TRUE		;Q: Is it in XMA2EMS mode?
	je	MIWxma2ems		; Y: remap windows

	cmp	di,[number_EMS_windows]	;Q: Invalid window?
	jae	MIWinvPhyPage		; Y: error
MIWindex:
	add	di,di			; N: offset for PTE index
	mov	di,[EMS_window_location][di]
	jmp	short MIWsource

MIWinvPhyPage:
	stc
	mov	byte ptr [bp][reg_EAX+1],PHYS_PAGE_RANGE
	jmp	short MIWclearTLB

MIWinvLogPage:
	stc
	mov	byte ptr [bp][reg_EAX+1],LOG_PAGE_RANGE
	jmp	short MIWclearTLB
align 16
;
;  Unmap physical window by mapping one-to-one
;
MIWunmap:
	mov	bx,P_SIZE		; page
	shl	eax,P_SHIFT		; physical address
	or	ax,P_AVAIL		; accessible
	STOS_DWORD_PTR_ES_EDI
	add	eax,ebx
	STOS_DWORD_PTR_ES_EDI
	add	eax,ebx
	STOS_DWORD_PTR_ES_EDI
	add	eax,ebx
	STOS_DWORD_PTR_ES_EDI

	dec	cx
	jnz	MIWloop
	clc

MIWclearTLB:
	mov	eax,cr3
	mov	cr3,eax
	ret

MIWxma2ems:
	sub	di,250			;Q: P254 or P255?
	ja	short MIWx2cont 	; Y: continue
	add	di,250			; N: restore original window number
MIWx2cont:
	cmp	di,5			;Q: Is the window in 0..5?
	jbe	MIWindex		; Y: ok
	jmp	MIWinvPhyPage		; N: error

MapInWindows endp

align 16
;==============================================================================
;==
;== ActivateRegSet:  This routine switches to the new alternate register set.
;==		     If the set is zero or the dummy, then the current state
;==		     is not saved but the pointer provided is used to restore
;==		     the current mapping and the current register set becomes
;==		     zero.  If the set is not zero, then the current register
;==		     state is saved before restoring the state of the new
;==		     register set.
;==
;== Entry: (Protected Mode)
;==	BL = register set to activate
;==
;== Exit:  (Protected Mode)
;==	[BP]:AH = return code
;==	EDX = same, all others destroyed
;==                                                                      LC
;=============================================================================
ActivateRegSet	proc	near
;
;  Access AR context
;
	movzx	si,bl
	shl	si,3
	.errnz size RegisterSet_struc-8

;
;  Each AR set has a 32 bit pointer to a 4K block. This 4K block is initialized
;  to the current PT 0 at the time the AR set was allocated. Now we need to make
;  this PT0 the current one.  This is done by updating the first Page Directory
;  entry to point to this AR's PT0.  In addition, we make the PTE associated
;  with the current PT0 to point to this AR's PT 0. This is done as the selector
;  PAGET_GSEL is used through out the code to access the page tables. By
;  changing the PTE associated with the current PT 0 the access thru
;  PAGET_GSEL will now go this AR's PT.  Also note that when the current PT 0
;  is below 4M then the PTE in this AR's PT 0 has to be modified. Else the PTE
;  in the appropriate PT should be modifed.
;
	mov	edi,[register_set][si].page_table_ptr
	mov	eax,[page_tables]


	mov	ecx,eax			; ecx = address of current PT 0
	shr	eax,10			; offset in PT for PT0

	add	eax,ecx       		; EAX = address for PT0 PTE (above 4M)

	cmp	ecx,4*1024*1024		;Q: Is current PT0 below 4M
	jae	short ARScont		; N: update appropriate PTE
	sub	eax,ecx			; Y: restore EAX to PT0 offset
	add	eax,edi   		; EAX = address for PT0 PTE (below 4M)
ARScont:
;EnterCritical
pushf
cli
	or	di,P_AVAIL		; make PTE available
	mov	es:[eax],edi		; make PTE for PT0

	mov	eax,[page_directory]
	mov	es:[eax],edi		; set PT0 address in page directory

;
;  The state of the A20 line at the time the AR was allocated was copied into
;  the AR set. If the current state of the A20 line is different from what is
;  specifed in the AR set then we must update the appropriate PT 0 entries.
;  If the A20 state has not changed then we're done.
;
	mov	[current_register_set],bl
	mov	ax,gs:[Current_State]
	and	ax,fState_A20Ena
	cmp	[register_set][si].a20_state,ax
	jne	short ARSupdateHMA

ARSexit:
;
;  The TLB is flushed since the page tables were changed.
;
	mov	eax,cr3
	mov	cr3,eax
;debug ExitCritical
popf
	ret

;
; At this point edi has the 32 bit address of the current PT 0
;
ARSupdateHMA:
	mov	[register_set][si].a20_state,ax

	mov	eax,0C0000000h		; assume WEITEK map on

	test	gs:[Weitek_State],fWeitek_Map ;Q: WEITEK on?
	jnz	short ARS_HMAcont	      ; Y: WEITEK map

	xor	eax,eax			; assume A20 disabled

	test	gs:[Current_State],fState_A20Ena ;Q: Enable A20?
	jz	short ARS_HMAcont  	         ; N: wrap with page tables
	mov	eax,gs:[HMAptr]		         ; Y: no wrap (functional HMA)

ARS_HMAcont:
	and	di,not (P_SIZE-1)	; clear status bits
	or	ax,P_AVAIL		; make PTE's accessible
	mov	esi,P_SIZE
	mov	ebx,100h		; 1 Meg index
	mov	cx,10h			; 64k worth of entries
ARS_HMAloop:
	mov	es:[edi][ebx*4],eax
	add	eax,esi
	inc	bx
	dec	cx			; dec/jnz faster than loop!!!
	jnz     short ARS_HMAloop	; loop until done with PTEs?
	jmp	short ARSexit

ActivateRegSet	endp

_TEXT	ends

END

=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\emm386\initdeb.asm ===
.386p
page	58,132
;******************************************************************************
	title	InitDeb - initialize debugger
;******************************************************************************
;
;   (C) Copyright MICROSOFT Corp. 1986-1991
;   (C) Copyright COMPAQ Computer Corp. 1986-1991
;
;   Title:    EMM386.EXE - MICROSOFT Expanded Memory Manager 386 Driver
;
;   Module:   InitDeb - initialize debugger
;
;   Version:  2.00
;
;   Date:     June 16,1986
;
;   Author:   Steve Preston
;
;******************************************************************************
;
;   Change log:
;
;     DATE    REVISION			DESCRIPTION
;   --------  --------	-------------------------------------------------------
;   06/16/86  Original	from VDM MAIN.ASM module
;   06/28/86  0.02	Name changed from CEMM386 to CEMM (SBP).
;   07/06/86  0.04	Changed assume to _DATA (SBP).
;   05/18/87  2.00	Changed GDT_Seg to R_CODE (SBP).
;
;******************************************************************************
;
;   Functional Description:
;
;	This routine is linked in when linking with the kernel debugger.
;    InitDeb calls the debugger initialization routine.
;
;******************************************************************************
.lfcond 				; list false conditionals
;******************************************************************************
;	P U B L I C S
;******************************************************************************

	public	InitDeb
	public	ReInitDeb

;******************************************************************************
;	D E F I N E S
;******************************************************************************
	include vdmseg.inc
	include vdmsel.inc
	include desc.inc
	include emmfunct.inc
	include emm386.inc
;
; Definition of the packet used in debug initialization. A pointer to
; this structure is passed to Debug_Entry.
;
DebugInit	struc
	CSseg		dw	?		;Real mode code segment
	DSseg		dw	?		;Real mode data segment
	CSsel		dw	?		;Prot mode code selector
	DSsel		dw	?		;Prot mode data selector
	SpareSel1	dw	?		;Prot mode alias selector 1
	SpareSel2	dw	?		;Prot mode alias selector 2
	GDTalias	dw	?		;Prot mode GDT r/w alias
	ProtIDTaddr	dq	?		;Prot mode IDT base & limit
	RealIDTaddr	dq	?		;Real mode IDT base & limit
	BrkFlag 	db	?		;TRUE if break to debugger
	ComFlag 	db	?		;TRUE if com1, FALSE if com2
DebugInit	ends


;******************************************************************************
;	E X T E R N A L   R E F E R E N C E S
;******************************************************************************
ifdef	BugMode
dcode	segment
extrn	_Debug_Entry:far	; (debinit.asm)
dcode	ends
endif

R_CODE	SEGMENT
extrn	GDT_Seg:word
extrn	IDT_Seg:word
extrn	GenFlags:dword
R_CODE ENDS

;******************************************************************************
;	S E G M E N T	D E F I N I T I O N S
;******************************************************************************

ifdef	BugMode
_DATA	SEGMENT
InitData	DebugInit	<>
_DATA ENDS
endif

R_CODE	segment
	public	DebugEntry
DebugEntry	dd	R_CODE:NoDebugEntry

	public	DebBreakStr
DebBreakStr	label	byte
ifdef DEBUG
		db	'EMM386 Initialization',13,10
endif
		db	0
R_CODE	ends

LAST SEGMENT

ifndef BugMode

MyDebugEntry	dd	0

debugddname	db	'$debugdd',0
emm386name	db	'emm386',0

debsegtable	label	word
	dw	R_CODE, 	R_CODE, 	RCODE_GSEL,	5040h
	dw	R_STACK,	R_STACK,	RMS_GSEL,	5041h
	dw	R1_CODE,	R1_CODE,	R1CODE_GSEL,	5040h
	dw	STACK,		VDMS_GSEL,	0,		5001h
	dw	GDT,		GDT,		GDTD_GSEL,	5041h
	dw	LDT,		LDT,		LDTD_GSEL,	5041h
	dw	IDT,		IDT,		IDTD_GSEL,	5041h
	dw	SGDT,		SGDT,		0,		5011h
	dw	SIDT,		SIDT,		0,		5011h
	dw	_DATA,		VDMD_GSEL,	0,		5001h
	dw	_TEXT,		VDMC_GSEL,	0,		5000h
	dw	LAST,		LAST,		0,		5011h
	dw	L_STACK,	L_STACK,	0,		5011h
debsegtablelen	equ	($ - offset LAST:debsegtable)/8
endif
	assume cs:LAST, ds:_DATA, es:_DATA

;******************************************************************************
;	InitDeb - initialize kernel debugger
;
;
;    ENTRY:	Real Mode
;		DS = _DATA
;		AL = 00h => dont't break on debug init
;		AL = FFh => break on debug init
;
;    EXIT:	Real Mode
;		Kernel debugger initialized
;
;    USED:	none
;
;	NOTE:  this routine assumes that the GDT is addressible in real mode
;
;******************************************************************************
InitDeb proc	near
;
ifdef	BugMode
	pusha
	push	ds
	push	es
;
	push	ds
	pop	es		; ES = data
;
	mov	di, offset _DATA:InitData

	mov	bx, dcode
	mov	[di].CSseg, bx
	mov	bx, ddata
	mov	[di].DSseg, bx
	mov	[di].CSsel, DEBC_GSEL
	mov	[di].DSsel, DEBD_GSEL
	mov	[di].SpareSel1, DEBW1_GSEL
	mov	[di].SpareSel2, DEBW2_GSEL
	mov	[di].GDTalias, GDTD_GSEL
	mov	[di].BrkFlag, al		; ? break on entry ?
	mov	[di].ComFlag, FALSE		; com2

	sidt	fword ptr [di].RealIDTaddr

	push	ds
	push	di
	mov	ax, seg R_CODE
	mov	ds,ax			; DS -> R_CODE
	ASSUME	DS:R_CODE

	mov	ax, [GDT_Seg]
	mov	ds, ax			; DS -> GDT

	db	66h
	lgdt	fword ptr ds:[GDTD_GSEL]

	mov	si, IDTD_GSEL
	mov	cx, 6
	lea	di, [di].ProtIDTaddr
	cld
	rep movsb
	pop	di
	pop	ds
	ASSUME	DS:_DATA

	call	_Debug_Entry
;
; and return
;
	pop	es
	pop	ds
	popa

else

    ASSUME   DS:NOTHING, ES:NOTHING, SS:NOTHING, GS:NOTHING, FS:NOTHING

; Initialize DEBX_GSEL GDT Selector and Deb386

	pusha
	push	ds
	push	es

	mov	ax,cs
	mov	ds,ax
    ASSUME   DS:LAST
	mov	dx,offset LAST:debugddname	; ds:dx->db '$DebugDD',0
	mov	ax,3D00h
	int	21h
	jc	no_debdd

	mov	bx,ax
	mov	ax,R_CODE
	mov	ds,ax				; DS -> R_CODE
    ASSUME   DS:R_CODE
	mov	dx,offset R_CODE:DebugEntry	; ds:dx->dd ?
	mov	cx,3001h
	mov	ax,440Ch
	int	21h

	mov	ah,3Eh
	int	21h
	jmp	short deb_init

no_debdd:
	mov	ax,R_CODE
	mov	ds, ax
    ASSUME   DS:R_CODE
	mov	ax,3568h			; get debugger int vector (68h)
	int	21h
	mov	ax,es
	or	ax,bx				; Q: non-zero vector?
	jz	deb_done			;  N: exit

	mov	ah,43h				; identify
	int	68h
	cmp	ax,0f386h			; Q: debugger exists?
	jne	short deb_done			;  N: exit

	mov	word ptr [DebugEntry],offset R_CODE:Int68DebugEntry

deb_init:
    ASSUME   DS:R_CODE

	bts	[GenFlags], fDebugActiveBit
	mov	ax, word ptr [DebugEntry]
	mov	word ptr [MyDebugEntry], ax
	mov	ax, word ptr [DebugEntry+2]
	mov	word ptr [MyDebugEntry+2], ax

	mov	es,[IDT_Seg]				
	xor	di,di				; ES:DI <-- IDT

	mov	ds,[GDT_Seg]
    ASSUME   DS:NOTHING
	xor	si,si				; DS:SI <-- GDT

	mov	bx,DEBX_GSEL
	and	bl,SEL_LOW_MASK
	mov	word ptr [bx],0ffffh		; Low Limit = 0ffffh
	mov	word ptr [bx + 2],0
	mov	byte ptr [bx + 4],0		; Base = 0
	mov	byte ptr [bx + 5],D_DATA0	; Ring 0 Data
	mov	byte ptr [bx + 6],8fh		; Page Granularity/High Limit
	mov	byte ptr [bx + 7],0

	mov	bx,DEBX_GSEL			; BIG selector for all addresses
	mov	cx,DEB1_GSEL			; start of 5 working Selector
	mov	dx,GDTD_GSEL
	mov	ax,4400h			; Initialize Deb386
	call	[MyDebugEntry]

	mov	ax,LAST
	mov	es,ax
	mov	ds,ax
	mov	di,offset LAST:emm386name	; (ES:DI) = module name
	mov	si,offset LAST:debsegtable	; (DS:SI) = segment table
	mov	cx,debsegtablelen
deb_sym_loop:
	lodsw
	mov	bx,ax
	sub	bx,R_CODE			; (BX) = segment number
	push	cx
	lodsw
	mov	cx,ax				; (CX) = segment/selector
	lodsw
	mov	dx,ax				; (DX) = selector
	lodsw					; (AX) = function/type
	call	MyDebugEntry
	pop	cx
	loop	deb_sym_loop

deb_done:
	pop	es
	pop	ds
	popa
endif
	ret
InitDeb endp


ifdef DEBUG

;******************************************************************************
;	DebDefineSeg - Define EMM386 segment to debugger
;
;
;    ENTRY:	Real/Virtual Mode
;		AL = segment type for debugger
;		BX = segment number as fixed up by loader
;		CX = segment address
;		DX = segment selector
;
;    EXIT:	Real Mode
;		Kernel debugger initialized
;
;    USED:	AX
;
;******************************************************************************

	public	DebDefineSeg

DebDefineSeg	proc	near

	push	es
	push	di

	mov	ah, 50h
	sub	bx, R_CODE		; convert to segment #

	mov	di,LAST
	mov	es,di
	mov	di,offset LAST:emm386name	; (ES:DI) = module name

	call	[MyDebugEntry]

	pop	di
	pop	es
	ret

DebDefineSeg	endp

endif

LAST	ends

R_CODE	segment
    ASSUME   CS:R_CODE

ReInitDeb proc near
    ASSUME   DS:NOTHING,ES:NOTHING,SS:NOTHING,GS:NOTHING,FS:NOTHING
	pusha
	mov	bx,DEBX_GSEL			; BIG selector for all addresses
	mov	cx,DEB1_GSEL			; start of 5 working Selector
	mov	dx,GDTD_GSEL
	mov	ax,4a00h			; Reinitialize Deb386
	call	[DebugEntry]
	popa
	ret
ReInitDeb endp

Int68DebugEntry proc far
    ASSUME   DS:NOTHING,ES:NOTHING,SS:NOTHING,GS:NOTHING,FS:NOTHING
	int	68h
NoDebugEntry:
	ret
Int68DebugEntry endp

R_CODE	ends

	END
=== C:/Users/treeman/Desktop/windows nt source code\dos-6.0\dev\emm386\int15.asm ===
.386p
	page 58,132
;=============================================================================
	title	I N T 1 5 - Hooks INT 15: Move Block & Traps CTRL-ALT-DEL
;=============================================================================
;==
;== (C) Copyright MICROSOFT Corp. 1989-1991
;== (C) Copyright COMPAQ Computer Corp. 1989-1991
;==
;==	Title: EMM386.EXE - MICROSOFT Expanded Memory Manager 386 Driver
;==
;==	Module: INT15 - Emulates Move Blocks & Traps Ctrl-Alt-Del
;==
;==	Version: 1.00
;==
;==	Date: February 15, 1990
;==
;==	Author: Leo Cohen
;==
;=============================================================================
;==
;==	Change Log:
;==
;==	DATE	 REVISION	Description
;==	-------- --------	--------------------------------------------
;==     02/15/90 0.00	        Original
;==
;==	03/06/91 M014		Restore cx before checking to see if it is 0.
;==
;=============================================================================
;==
;==   Functional Description:
;==
;==   This module emulates move blocks and traps CTRL-ALT-DEL. If a CTRL-ALT-DEL
;==   is detected, it switches the system from virtual to real mode because
;==   certain ROMs having priviliged instructions in the REBOOT code sequence.
;==   Also, the amount of extended memory (INT 15h & AH=88h) is trapped and
;==   the value returned is the amount of free extedned memory left in the
;==   system.
;==
;=============================================================================
;=============================================================================
;==	P U B L I C   D E C L A R A T I O N S
;=============================================================================
	public	pINT15hHandler
	public	rINT15hHandler
	public	rINT19hHandler
	public	MoveBlock
	public	MBMoveW
	public	MBrepMovD
	public	MoveBlockParity

;=============================================================================
;==	L O C A L   C O N S T A N T S
;=============================================================================
	include vdmseg.inc
	include vdmsel.inc
	include desc.inc
	include page.inc
	include oemdep.inc
	include vm386.inc
	include emm386.inc
	include	emmfunct.inc
	include emmdata.inc
	include XMM.inc

;=============================================================================
;==	L O C A L   E Q U A T E S
;=============================================================================
;=============================================================================
;==  Move Block Local Data Structure (and flags)
;=============================================================================
MBStack	struc
  MBStat 	db	0		; move block status
  MBFlags 	db	0		; move block flags
MBStack	ends

MBData	equ	size MBStack
;=============================================================================
;== Flags for MBFlags
;=============================================================================
fMBDiagSrc	equ	00000001b	; diagnostic port is source
fMBDiagTrg	equ	00000010b	; diagnostic port is target
fMBDiagCache	equ	00000100b
fMBA20		equ	00001000b
fMBWeitek	equ	00010000b
fMBHMA		equ	00100000b	; HMA involved in transfer
fMBHMABit	equ	5		; HMA involved in transfer
;=============================================================================
;==  Move Block GDT Data Structure
;=============================================================================
MB_GDT	struc
  MG_dummy	dd 2 dup (?)		; dummy descriptor entry
  MG_GDT	dd 2 dup (?)		; GDT entry
  MG_Source	dd 2 dup (?)		; source segment entry
  MG_Target	dd 2 dup (?)		; target segment entry
MB_GDT	ends
;=============================================================================
;==  System Descriptor Vector Fields
;=============================================================================
sSysDescVec	struc
  SDVcount	dw	0	; size of System Descriptor Vector
  SDVmodel	db	0	; machine model
  SDVsubModel	db	0	; machine submodel
  SDVRevLev	db	0	; BIOS rev level
  SDVInfoFlgs	db	0	; Information flags
  SDVrsvd	db 4 dup (0)	; reserved
sSysDescVec	ends
SDVInfoXBDA	equ	100	; XBDA area is allocated
;=============================================================================
;==  Scan Code
;=============================================================================
SC_DEL		equ	0053h		; Delete
SC_INS		equ	0052h		; Insert
;=============================================================================
;==  Keyboard Control Byte Bit Positions (ROM Data Area)
;=============================================================================
KP_ALT		equ	00001000b
KP_CTRL		equ	00000100b
KP_LSHIFT	equ	00000010b
KP_RSHIFT	equ	00000001b
;=============================================================================
;==	E X T E R N A L   R E F E R E N C E S
;=============================================================================
_TEXT	segment
	extrn	CheckPageProt:near
	extrn	UpdateHMA:near
	extrn	ReflectInterrupt:near
_TEXT	ends

_DATA	segment
	extrn	pLastVMTF:word
	extrn	LastVMTF:word
_DATA	ends

R_CODE	segment
	extrn	ShutDown:near
R_CODE	ends
;=============================================================================
;==	L O C A	L   D A T A
;=============================================================================
R_CODE	segment

SysDescVec  sSysDescVec<>	; buffer for system descriptor vector

R_CODE	ends
;=============================================================================
;==	C O D E  S E G M E N T
;=============================================================================
_TEXT	segment
	assume	cs:_TEXT,ds:_DATA,es:_DATA,gs:R_CODE,ss:STACK
;==============================================================================
;==
;==  pINT15hHandler: Determines if a Move Block needs to be emulated or prevent
;==		     a multiprocessor machine from dispatching other processors.
;==		     Other processors in the system are not aware of the page
;==		     tables (mapping) on the main processor and thus linear
;==		     addresses will not correspond to similar physical addresses.
;==
;==  Entry: (Protected Mode)
;==
;==  Exit:  (Virtual Mode)
;==
;==============================================================================
pINT15hHandler	proc	far
	push	ebp
	sub	sp,MBData		; room for local variables
	movzx	ebp,sp

	push	edx
	mov	dx,DATA32_GSEL
	mov	ds,dx
	mov	dx,seg R_CODE
	movzx	edx,dx
	shl	edx,4			; DS:[EDX] points to R_CODE
	assume	ds:R_CODE


	cmp	ah, 04fh
	je	short pI15KeyBoard

	cmp	ah,87h			;Q: Move Block function?
	je	short pINT15MB		; Y: do move block

	test	[edx][GenFlags],fEISA	;Q: EISA/SYSTEMPRO?
	jz	short pINT15Reflect     ; N: reflect interrupt

	cmp	ah,0E2h			;Q: Multiprocessor availability?
	ja	short pINT15Reflect     ; N: reflect interrupt
	cmp	ah,0E0h			;Q: Multiprocessor dispatch?
	jb	short pINT15Reflect     ; N: reflect interrupt
	xor	al,al			; Y: no MP support
	or	[bp][MBData][VTFO].VMTF_EFLAGS,FLAGS_CF ; set carry flag
	jmp	pINT15exit

pINT15Reflect:
	pop	edx
	add	sp,MBData		; local variables
	mov	bp,sp
	push	15h
	jmp	ReflectInterrupt
;
; Emulate move block function
;
pINT15MB:
	btr	[edx][TrapFlags],fI15trapBit ;Q: Trap flag set?
	jc	short pI15MB		     ; Y: do emulation of Move Block
;
;QLEO: Fast MB function response: Check if IVT is hooked, if not, don't reflect
;
	assume	ds:ABS0
	shl	edx,12
	mov	dx,offset R_CODE:rINT15hHandler
	cmp	edx,dword ptr [int15]
	jne	short pINT15Reflect
	shr	edx,16
	shl	edx,4

pI15MB:
	assume ds:R_CODE
        test    [bp][MBData][VTFO].VMTF_EFLAGS,FLAGS_IF ;Q: Did client have IF set?
        jz      short pI15MoveBlock                     ; N: don't turn them on
        test    [edx][GenFlags],fNoINT                  ;Q: Allow interrupts?
        jnz     short pI15MoveBlock                     ; N: don't turn them on
	assume ds:nothing
	sti
pI15MoveBlock:
	call	MoveBlock			; emulate move block
	cli					; do not allow interrupts

pINT15exit:
	pop	edx
	add	sp,MBData		; local variables
	pop	ebp
	iretd

;========================================================================
pI15KeyBoard:

	cmp	al,SC_INS		; Q: Ins ScanCode?
	je	pI15ctrlalt		; Y: check to see if it ctrl-alt
					;    keys pressed

	cmp	al,SC_DEL		;Q: Del ScanCode?
	jne	pINT15reflect		; N: chain to previous handler

pI15ctrlalt:
	push	edx
	mov	dx,seg romdata
	movzx	edx,dx
	shl	edx,4			; DS:[EDX] points to romdata
	assume	ds:romdata


	push	bx
	mov	bl,[edx][KeyState]		; get kbd ctrl status
	and	bx,KP_ALT+KP_CTRL	; look only at these keys
	cmp	bx,KP_ALT+KP_CTRL	;Q: are both keys pressed ?
	pop	bx
	pop	edx
	assume	ds:R_CODE
	jne	short pINT15reflect	; N: chain to previous handler

	;
	; ctrl-alt with ins or del pressed
	;

	cmp	al, SC_INS		; Q: Ins ScanCode
	je	pI15chkzen		; Y: check to see if zenith
					; N: => del pressed

	push	ebx
	mov	ebx, dword ptr [bp][MBData][VTFO].VMTF_CS
	shl	ebx, 4
	add	ebx, dword ptr [bp][MBData][VTFO].VMTF_EIP
					; ebx = return address of caller
	call	InUMBs			; Q:is the int 15 coming from Umbs
	pop	ebx
	jc	pINT15reflect		; Y: do not turn off
	;
	; At this point we know that a ctrl-alt-del sequence has happened and
	; the int 15 ah=4f has not been issued from a UMB. So we need to 
	; let the int be processed and get back control so that we can 
	; decide whether to turn off or not (see rI15KeyBoard in this file).
	; We set the following flag to indicate to the int reflection code 
	; in pictrap.asm to set up the stack frame so that control is first
	; obtained in rI15KeyBorad before the int 15 caller.
	;
pI15TurnOff:
	or	[edx][GenFlags], fTurnOff
	jmp	pINT15reflect


pI15chkzen:
	test	[edx][GenFlags],fZenith	; Q: is this a zenith machine
	jz	pINT15reflect		; N: reflect the int 15
					; Y: check to see in int 15 is
					;    coming from F000 segment
	cmp	dword ptr [bp][MBData][VTFO].VMTF_CS, 0F000h
					; Q: is int 15 coming from below f000
	jb	pINT15reflect		; Y: do not set flag

	;
	; At this point we know that a ctrl-alt-ins sequence has happened 
	; on a Zenith machine and that the int 15 is coming from the Zenith
	; ROM. So we set the fTurnOff flag so that the int reflection code 
	; in pictrap.asm sets up the stack frame in such a manner that 
	; control is first obtained in rI15KeyBorad before the int 15 caller.
	;
	jmp	short pI15TurnOff
	assume	ds:nothing


pINT15hHandler	endp
;==============================================================================
;==
;==  MoveBlock: Emulates 386 ROM Move Block (INT 15h & AH=87h).
;==
;==  Entry:  (Protected Mode)
;==	   CX = number of words to move
;==	  EDX = 32bit pointer to R_CODE
;==	   DS = DATA32_GSEL
;==	ES:SI = points to the Move Block GDT structure (ES in VMTF)
;==
;==                     ͻ
;==                               MG_Target             +10h
;==                     Ķ
;==                               MG_Source             +0Ch
;==                     Ķ
;==                                                     +08h
;==                     Ķ
;==                                                     +00h
;==                     ͼ
;==
;==  Exit:   (Protected Mode)
;==	   AH = 00 : no error 			  Flags: (ZF & NC)
;==		01 : parity error                 Flags: (NZ & CY)
;==		02 : exception error              Flags: (NZ & CY)
;==		03 : gate address bit A20 fails.  Flags: (NZ & CY)
;==
;==============================================================================
MoveBlock proc	near
	push	eax
	push	ebx
	push	ecx
	push	esi
	push	edi
;
;  Initialize local data and flags
;
	movzx	ecx,cx			; use only 16 bits
	mov	[bp].MBStat,0		; init status of move block
	mov	[bp].MBFlags,0		; init flags of move block
	mov	bx,DATA32_GSEL
	cld
	mov	es,bx			; ES = DATA32_GSEL
;
;  Move Block cannot move more than 8000h words
;
	cmp	cx,8000h		;Q: word count too high
	ja	MBExcpError		; Y: report exception error
					; N: check length of segments
;
;  Access to user mini GDT (descriptor table) via DS:[EBX]
;
	movzx	ebx,[bp][MBData][VTFO].VMTF_ES
	movzx	esi,si
	shl	ebx,4
	add	ebx,esi
;
;  Make sure LIMIT field is OK, else return an exception error
;
	mov	ax,cx
	shl	ax,1
	dec	ax

	cmp	[ebx][MG_Source].LIMIT,ax ;Q: Source limit too low?
	jb	MBExcpError		  ; Y: report exception error

	cmp	[ebx][MG_Target].LIMIT,ax ;Q: Target limit too low?
	jb	MBExcpError		  ; Y: report exception error

	lea	esi,[ebx].MG_Source	; DS:ESI pts to input source descr
	call	DiagsOn386SX		;Q: Accessing diag register on 386SX?
	jnc	short MBScont		; N: continue
	or	[bp].MBFlags,fMBDiagSrc ; Y: set flag for diag addr
MBScont:
;
;  Need to Unwrap page tables if HMA area is used
;
	call	HMARegion		;Q: Within HMA?
	jnc	MBScont2		; N: continue
	or	[bp].MBFlags,fMBHMA	; Y: set flag for HMA usage
MBScont2:
	lea	esi,[ebx].MG_Target	; DS:ESI pts to target descriptor
	call	DiagsOn386SX		;Q: Accessing diag register on 386SX?
	jnc	short MBTcont		; N: continue
	or	[bp].MBFlags,fMBDiagTrg	; Y: set flag for diag addr
MBTcont:
;
;  Need to Unwrap page tables if HMA area is used
;
	call	HMARegion		;Q: Within HMA?
	jnc	MBTcont2		; N: continue
	or	[bp].MBFlags,fMBHMA	; Y: set flag for HMA usage
MBTcont2:
;
;  Verify descriptors passed in
;
	assume	ds:R_CODE
	mov	eax,[edx][pGDT]

	mov	esi,[ebx].MG_Source
	mov